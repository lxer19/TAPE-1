URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/gep-ieee.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/allpapers.html
Root-URL: http://www.research.digital.com
Title: Prudent Engineering Practice for Cryptographic Protocols  
Author: Martin Abadi and Roger Needham 
Date: November 1, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. </author> <title> "A Calculus for Access Control in Distributed Systems". </title> <journal> ACM Transactions on Programming Languages and Systems Vol. </journal> <volume> 15, No. 4, </volume> <month> September </month> <year> 1993, </year> <pages> pp. 706-734. </pages>
Reference-contexts: Possible sorts of bad behavior are disclosure of keys and forgery of messages. Therefore, if this assumption is made in a particular case then it should be explicit. 2 Example 11.5 An access control list (ACL) is a statement of trust <ref> [1] </ref>: if principal A appears on the ACL for an operation then A is trusted when it says that the operation should be performed (that is, when it makes a request). It can be a complex matter to determine whether the statement of trust that the ACL represents is appropriate.
Reference: [2] <author> S.M. Bellovin and M. Merritt. </author> <title> "Limitations of the Kerberos Authentication System". </title> <journal> Computer Communication Review Vol. </journal> <volume> 20, No. 5, </volume> <month> October </month> <year> 1990, </year> <pages> pp. 119-132. </pages>
Reference-contexts: The effect of the request at time T may benefit C, for example if C is using A's workstation at time T . Bellovin and Merritt have discussed further problems in the use of times-tamps in Kerberos <ref> [2] </ref>. 2 6.2 What is fresh: use vs. generation Roughly, a bit-pattern is fresh if any message that contains it must be recent. Clearly, it does not suffice that the bit-pattern participate in one recent message, if it may also participate in old ones.
Reference: [3] <author> C. Boyd and W. Mao. </author> <title> "On a Limitation of BAN Logic". </title> <booktitle> Advances in Cryptology: Eurocrypt '93, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 240-247. </pages>
Reference-contexts: precise comparison of informal ideas is difficult, we also find an affinity with Boyd and Mao's proposal that protocols should be robust in the sense that "authentication of any message in the protocol depends only on information contained in the message itself or already in the possession of the recipient" <ref> [3] </ref>.
Reference: [4] <author> M. Burrows, M. Abadi, and R.M. Needham. </author> <title> "A Logic of Authentication". </title> <journal> Proceedings of the Royal Society of London A Vol. </journal> <volume> 426, </volume> <year> 1989, </year> <pages> pp. 233-271. </pages> <note> A preliminary version appeared as Digital Equipment Corporation Systems Research Center report No. 39, </note> <month> February </month> <year> 1989. </year>
Reference-contexts: We illustrate the principles with examples. In order to demonstrate the actual applicability of our guidelines, we draw these examples from the literature. Some of the oddities and errors that we analyze have been documented previously (in particular, in <ref> [4] </ref>). Other examples are new: protocols by Denning and Sacco [6], Hickman (Netscape) [11, 10], Lu and Sundare-shan [14], Varadharajan, Allen, and Black [31], and Woo and Lam [34]. We believe they are all instructive. <p> In particular, 2 if any of P , S, A, B, or K are left to be inferred from context, it may be possible for one message to be used deceitfully in place of another. This principle is not completely original. In <ref> [4] </ref>, we recommend the use of a logical notation in generating and describing protocols|essentially proposing a method to follow the principle. Establishing the correspondence between the logical protocol and its concrete implementation can be a simple matter of parsing, as for example in [33, Section 4.3.2]. <p> For example, if someone believes that choosing session keys should be done by a suitably trusted server rather than by one of the participants in a session, then he will not wish to use a protocol such as the Wide-mouthed-frog protocol <ref> [4] </ref>. <p> The protocols are intended for signed, secure communication between two principals, assuming that each knows the public key of the other. The CCITT proposal has problems. We discuss one problem described in <ref> [4] </ref>; it appears already in the one-message protocol: Message 1 A ! B : A; fT a ; N a ; B; X a ; fY a g K b g K 1 a Here, T a is a timestamps, N a is a nonce (not used), and X a and <p> A; Bg K bs Message 3 S ! B : M; fN a ; K ab g K as ; fN b ; K ab g K bs Message 4 B ! A : M; fN a ; K ab g K as This is the first protocol analyzed in <ref> [4] </ref>. Perhaps because of our relative inexperience, we were rather bold in the idealization of this protocol|in assigning meanings to these messages. As a consequence, we suggested in passing that the encryption of N b in Message 2 is unnecessary.
Reference: [5] <author> CCITT. </author> <title> CCITT Blue Book, Recommendation X.509 and ISO 9594-8: The Directory-Authentication Framework. </title> <address> Geneva, </address> <month> March </month> <year> 1988. </year>
Reference-contexts: Failure to follow this principle can lead to errors, as in the next example. Example 5.1 The CCITT X.509 standard contains a set of three protocols using between one and three messages <ref> [5] </ref>. The protocols are intended for signed, secure communication between two principals, assuming that each knows the public key of the other. The CCITT proposal has problems.
Reference: [6] <author> D.E. Denning and G.M. Sacco. </author> <title> "Timestamps in Key Distribution Protocols". </title> <journal> CACM Vol. </journal> <volume> 24, No. 8, </volume> <month> August </month> <year> 1981, </year> <pages> pp. 533-536. </pages>
Reference-contexts: We illustrate the principles with examples. In order to demonstrate the actual applicability of our guidelines, we draw these examples from the literature. Some of the oddities and errors that we analyze have been documented previously (in particular, in [4]). Other examples are new: protocols by Denning and Sacco <ref> [6] </ref>, Hickman (Netscape) [11, 10], Lu and Sundare-shan [14], Varadharajan, Allen, and Black [31], and Woo and Lam [34]. We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). <p> However, when this information cannot be deduced, its omission is a blunder with serious consequences. The principle is obvious and simple, yet it is commonly ignored. We give several examples of fairly different natures. Example 3.1 In <ref> [6, p. 535] </ref>, Denning and Sacco propose a protocol for key exchange based on an asymmetric cryptosystem. In the first two messages of this protocol, A obtains certificates CA and CB that connect A and B with their public keys K a and K b , respectively. <p> Encryption is not synonymous with security, and its improper use can lead to errors. Example 4.1 The Kerberos protocol [18] is based on the original Needham-Schroeder protocol [22], but makes use of timestamps as nonces in order to remove flaws demonstrated by Denning and Sacco <ref> [6] </ref> and in order to reduce the total number of messages required. Like the Needham-Schroeder protocol on which it is based, the Kerberos protocol relies on symmetric-key 9 cryptography. <p> They do not (and in fact were not intended to) convince B that K ab is fresh, and it was pointed out by Denning and Sacco that compromise of a session key could allow an intruder to deceive B <ref> [6] </ref>. Once the importance of freshness of K ab is recognized, a solution may be found by using timestamps, as suggested by Denning and Sacco.
Reference: [7] <author> U. Feige, A. Fiat, A. Shamir. </author> <title> "Zero Knowledge Proofs of Identity". </title> <booktitle> Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 210-217. </pages>
Reference-contexts: We focus on traditional cryptography, and on protocols of the sort commonly implemented with the DES [20] and the RSA [28] algorithms. In particular, we do not consider the subtleties of interactive schemes for signatures (e.g, <ref> [7] </ref>). Moreover, we do not discuss the choice of cryptographic mechanisms with adequate protection properties, the correct implementation of cryptographic primitives, or their appropriate use; these subjects are discussed elsewhere (e.g., [32, 19]). Throughout, we concentrate on the simple principles with the largest potential applicability and payoff.
Reference: [8] <author> L. Gong. </author> <title> "A Security Risk of Depending on Synchronized Clocks". </title> <journal> Operating Systems Review Vol. </journal> <volume> 26, No. 1, </volume> <month> January </month> <year> 1992, </year> <pages> pp. 49-54. </pages>
Reference-contexts: Furthermore, the time maintenance mechanism everywhere becomes part of the trusted computing base. Example 8.1 Timestamps have received abundant attention in the authentication literature. Gong, in particular, has described problems arising from the use of incorrect timestamps <ref> [8] </ref>. Therefore, we keep this example brief, summarizing Gong's example for the Kerberos system. In Kerberos, as elsewhere, a principal with a slow clock is exposed to all sorts of difficulties, since the principal may mistake expired certificates for current ones.
Reference: [9] <author> N. Heintze and J.D. Tygar. </author> <title> "Timed Models for Protocol Security". </title> <type> CMU Technical Report CMU-CS-92-100, </type> <month> January </month> <year> 1992. </year>
Reference-contexts: It does provide a guarantee: when B receives the first part of Message 3, it knows that A must have extracted it from Message 2, and hence that A must have looked at Message 2. (Heintze and Tygar <ref> [9] </ref> discuss a similar use of encryption in a variant of the Otway-Rees protocol [25].) This interpretation of encryption is sound, but slightly unusual, and probably not what the protocol designers had in mind.
Reference: [10] <author> K.E.B. Hickman and T. Elgamal. </author> <title> "The SSL Protocol". Internet Draft, </title> <journal> Netscape Communications Corp., </journal> <note> version of June, 1995. Currently available from http://home.netscape.com/newsref/std/SSL.html. </note>
Reference-contexts: In order to demonstrate the actual applicability of our guidelines, we draw these examples from the literature. Some of the oddities and errors that we analyze have been documented previously (in particular, in [4]). Other examples are new: protocols by Denning and Sacco [6], Hickman (Netscape) <ref> [11, 10] </ref>, Lu and Sundare-shan [14], Varadharajan, Allen, and Black [31], and Woo and Lam [34]. We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). <p> Obviously, this opens the door for confusions between different connections. It also allows some easy attacks to defeat the protocol. After we contacted them, the authors published a correction [15], where names appear in messages explicitly. 2 Example 3.4 The SSL protocol <ref> [10] </ref> from Netscape allows a Web server and a client to exchange session keys.
Reference: [11] <author> K.E.B. Hickman. </author> <title> "The SSL Protocol". RFC, </title> <journal> Netscape Communications Corp., </journal> <note> version of October 31, </note> <year> 1994. </year>
Reference-contexts: In order to demonstrate the actual applicability of our guidelines, we draw these examples from the literature. Some of the oddities and errors that we analyze have been documented previously (in particular, in [4]). Other examples are new: protocols by Denning and Sacco [6], Hickman (Netscape) <ref> [11, 10] </ref>, Lu and Sundare-shan [14], Varadharajan, Allen, and Black [31], and Woo and Lam [34]. We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). <p> After we contacted them, the authors published a correction [15], where names appear in messages explicitly. 2 Example 3.4 The SSL protocol [10] from Netscape allows a Web server and a client to exchange session keys. An early version of the SSL protocol <ref> [11] </ref> includes the following messages: Message 1 A ! B : fK ab g K b Message 2 B ! A : fN b g K ab Message 3 A ! B : fCA; fN b g K 1 a g K ab In the first message, the client A sends
Reference: [12] <author> B. Lampson, M. Abadi, M. Burrows, and E. Wobber. </author> <title> "Authentication in Distributed Systems: </title> <journal> Theory and Practice". ACM Transactions on Computer Systems Vol. </journal> <volume> 10, No. 4, </volume> <month> November </month> <year> 1992, </year> <pages> pp. 265-310. 23 </pages>
Reference-contexts: by several means, the simplest of which is to sign the secret data before it is encrypted for privacy. 2 A particular case of the principle concerns hash functions: Example 5.2 It is common to use hash functions in order to save on encryption with asymmetric-key systems (see for example <ref> [27, 12] </ref>). In particular, A can send a signed, confidential message to B as follows: Message 1 A ! B : fXg K b ; fH (X)g K 1 a where H is a one-way hash function.
Reference: [13] <author> A. Liebl. </author> <title> "Authentication in Distributed Systems: A Bibliography". </title> <journal> Operating Systems Review Vol. </journal> <volume> 27, No. 4, </volume> <month> October </month> <year> 1993, </year> <pages> pp. 31-41. </pages>
Reference-contexts: 1 Introduction Cryptographic protocols, as used in distributed systems for authentication and related purposes, are prone to design errors of every kind. Over time, various formalisms have been proposed for investigating and analyzing protocols to see whether they contain blunders. (Liebl's bibliography <ref> [13] </ref> includes references to protocols and formalisms.) Although sometimes useful, these formalisms do not of themselves suggest design rules; they are not directly beneficial in preventing trouble. We present principles for the design of cryptographic protocols. The principles are not necessary for correctness, nor are they sufficient.
Reference: [14] <editor> W.P. Lu and M.K. Sundareshan. </editor> <title> "Secure Communication in Internet Environments: A Hierarchical Key Management Scheme for End-To-End Encryption". </title> <journal> IEEE Transactions on Communications Vol. </journal> <volume> 37, No. 10, </volume> <month> October </month> <year> 1989, </year> <pages> pp. 1014-1023. </pages>
Reference-contexts: Some of the oddities and errors that we analyze have been documented previously (in particular, in [4]). Other examples are new: protocols by Denning and Sacco [6], Hickman (Netscape) [11, 10], Lu and Sundare-shan <ref> [14] </ref>, Varadharajan, Allen, and Black [31], and Woo and Lam [34]. We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). <p> remove the flaw, by changing the last message of the protocol to Message 5 S ! B : fA; N b g K bs A further change is discussed in Example 6.2. 2 Example 3.3 A more dramatic example is provided by the basic Internet protocol of Lu and Sundareshan <ref> [14, pp. 1016-1017] </ref>. This protocol is rather 7 complicated for a detailed description. Its intent is to allow two principals A and B to obtain a session key, with the mediation of local servers and gateways. On the other hand, the fundamental flaw of the protocol is rather simple.
Reference: [15] <editor> W.P. Lu and M.K. Sundareshan. </editor> <title> "Enhanced Protocols for Hierarchical Encryption Key Management for Secure Communication in Internet Environments". </title> <journal> IEEE Transactions on Communications Vol. </journal> <volume> 40, No. 4, </volume> <month> April </month> <year> 1992, </year> <pages> pp. 658-660. </pages>
Reference-contexts: One immediately sees that neither A nor B ever receives a message that contains the other's name. Obviously, this opens the door for confusions between different connections. It also allows some easy attacks to defeat the protocol. After we contacted them, the authors published a correction <ref> [15] </ref>, where names appear in messages explicitly. 2 Example 3.4 The SSL protocol [10] from Netscape allows a Web server and a client to exchange session keys.
Reference: [16] <author> W. Mao and C. Boyd. </author> <title> "Towards Formal Analysis of Security Protocols". </title> <booktitle> Proceedings of the Computer Security Foundations Workshop VII, </booktitle> <year> 1993, </year> <pages> pp. 147-158. </pages>
Reference-contexts: Perhaps because of our relative inexperience, we were rather bold in the idealization of this protocol|in assigning meanings to these messages. As a consequence, we suggested in passing that the encryption of N b in Message 2 is unnecessary. As Mao and Boyd have since explained in detail <ref> [16] </ref>, the encryption of N a and N b is essential: because N a and N b are bound with the names A and B by encryption in Messages 1 and 2, they can serve as secure references to A and B in Messages 3 and 4.
Reference: [17] <author> G. Medvinsky and B.C. Neuman. "NetCash: </author> <title> A Design for Practical Electronic Currency on the Internet". </title> <booktitle> Proceedings of the 1993 ACM Conference on Computer and Communications Security, </booktitle> <pages> pp. 102-106. </pages>
Reference-contexts: We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., <ref> [17] </ref>). We focus on traditional cryptography, and on protocols of the sort commonly implemented with the DES [20] and the RSA [28] algorithms. In particular, we do not consider the subtleties of interactive schemes for signatures (e.g, [7]).
Reference: [18] <author> S.P. Miller, B.C. Neuman, J.I. Schiller, and J.H. Saltzer. </author> <title> "Kerberos Authentication and Authorization System". Project Athena Technical Plan Section E.2.1, </title> <publisher> MIT, </publisher> <month> July </month> <year> 1987. </year>
Reference-contexts: Principle 4 Be clear about why encryption is being done. Encryption is not wholly cheap, and not asking precisely why it is being done can lead to redundancy. Encryption is not synonymous with security, and its improper use can lead to errors. Example 4.1 The Kerberos protocol <ref> [18] </ref> is based on the original Needham-Schroeder protocol [22], but makes use of timestamps as nonces in order to remove flaws demonstrated by Denning and Sacco [6] and in order to reduce the total number of messages required.
Reference: [19] <author> J.H. Moore. </author> <title> "Protocol Failures in Cryptosystems". </title> <booktitle> Proceedings of the IEEE Vol. </booktitle> <volume> 76, No. 5, </volume> <month> May </month> <year> 1988, </year> <pages> pp. 594-602. </pages>
Reference-contexts: In particular, we do not consider the subtleties of interactive schemes for signatures (e.g, [7]). Moreover, we do not discuss the choice of cryptographic mechanisms with adequate protection properties, the correct implementation of cryptographic primitives, or their appropriate use; these subjects are discussed elsewhere (e.g., <ref> [32, 19] </ref>). Throughout, we concentrate on the simple principles with the largest potential applicability and payoff. Admittedly, the literature is full of ingenious protocols and attacks. We do not attempt to formulate the laws that underly this ingenuity, and perhaps it is not necessary to do so.
Reference: [20] <author> National Bureau of Standards. </author> <title> "Data Encryption Standard". </title> <publisher> FIPS Pub. </publisher> <address> 46, </address> <month> January </month> <year> 1977. </year>
Reference-contexts: We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). We focus on traditional cryptography, and on protocols of the sort commonly implemented with the DES <ref> [20] </ref> and the RSA [28] algorithms. In particular, we do not consider the subtleties of interactive schemes for signatures (e.g, [7]).
Reference: [21] <author> R.M. Needham. </author> <title> "Cryptography and Secure Channels". Distributed Systems, </title> <editor> 2nd Ed., S. Mullender (editor), </editor> <publisher> ACM Press, </publisher> <year> 1993, </year> <pages> pp. 231-241. </pages>
Reference-contexts: They are generally related to Principle 1, since they concern what encryption means and what it does not mean. 5.1 The uses of encryption As the examples below illustrate, encryption is used for a variety of purposes in the present context <ref> [21] </ref>. 8 * Encryption is sometimes used for the preservation of confidentiality. In such cases it is assumed that only intended recipients know the key needed to recover a message.
Reference: [22] <author> R.M. Needham and M.D. Schroeder. </author> <title> "Using Encryption for Authentication in Large Networks of Computers". </title> <journal> CACM Vol. </journal> <volume> 21, No. 12, </volume> <month> December </month> <year> 1978, </year> <pages> pp. 993-999. </pages>
Reference-contexts: Encryption is not wholly cheap, and not asking precisely why it is being done can lead to redundancy. Encryption is not synonymous with security, and its improper use can lead to errors. Example 4.1 The Kerberos protocol [18] is based on the original Needham-Schroeder protocol <ref> [22] </ref>, but makes use of timestamps as nonces in order to remove flaws demonstrated by Denning and Sacco [6] and in order to reduce the total number of messages required. Like the Needham-Schroeder protocol on which it is based, the Kerberos protocol relies on symmetric-key 9 cryptography.
Reference: [23] <author> R.M. Needham and M.D. Schroeder. </author> <title> "Authentication Revisited". </title> <journal> Operating Systems Review Vol. </journal> <volume> 21, No. 1, </volume> <month> January </month> <year> 1987, </year> <note> p. 7. </note>
Reference-contexts: Once the importance of freshness of K ab is recognized, a solution may be found by using timestamps, as suggested by Denning and Sacco. In another solution, described in <ref> [23] </ref>, B sends a nonce to S, and then S includes it in its certificate. 2 16 Example 9.2 In [31], Varadharajan, Allen, and Black present several pro-tocols for delegation in distributed systems. We take as an example the one for delegation in a Kerberos environment [31, p. 273].
Reference: [24] <author> B.C. Neuman and S.G. Stubblebine. </author> <title> "A Note on the Use of Times-tamps as Nonces". </title> <journal> Operating Systems Review Vol. </journal> <volume> 27, No. 2, </volume> <month> April </month> <year> 1993, </year> <pages> pp. 10-14. </pages>
Reference-contexts: A similar exchange arises in the context of Kerberos. Neuman and Stubblebine suggest using Kerberos itself to obtain the time from a time server <ref> [24] </ref>. The quantity used as a nonce is roughly predictable: it is an incorrect timestamp; since it is encrypted, we expect no difficulties. 2 Freshness can also be proved by the use of timestamps. Timestamps are appealing because they seem easier to use than random numbers.
Reference: [25] <author> D. Otway and O. Rees. </author> <title> Efficient and Timely "Mutual Authentication". </title> <journal> Operating Systems Review Vol. </journal> <volume> 21, No. 1, </volume> <month> January </month> <year> 1987, </year> <pages> pp. 8-10. </pages>
Reference-contexts: provide a guarantee: when B receives the first part of Message 3, it knows that A must have extracted it from Message 2, and hence that A must have looked at Message 2. (Heintze and Tygar [9] discuss a similar use of encryption in a variant of the Otway-Rees protocol <ref> [25] </ref>.) This interpretation of encryption is sound, but slightly unusual, and probably not what the protocol designers had in mind. <p> There is sometimes confusion about nonces|are they guaranteed new, random, unpredictable? Whence we propose: Principle 6 Be clear what properties you are assuming about nonces. What may do for ensuring temporal succession may not do for ensuring association|and perhaps association is best established by other means. Example 6.1 In <ref> [25] </ref>, Otway and Rees describe the following protocol.
Reference: [26] <editor> M.K. Reiter. </editor> <title> "A Security Architecture for Fault-Tolerant Systems". </title> <type> Ph.D. Thesis, </type> <institution> Cornell University. </institution> <note> Available as Technical Report 93-1367, </note> <institution> Department of Computer Science, Cornell University, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: After this exchange, A accepts T s as the current time if the response arrived reasonably soon after the challenge. Reiter exploits random nonces roughly in this manner <ref> [26] </ref>. This protocol would not work if N a were predictable.
Reference: [27] <author> R. Rivest. </author> <title> "The MD4 Message Digest Algorithm". </title> <booktitle> Advances in Cryptology: Crypto '90, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> pp. 303-311. </pages>
Reference-contexts: by several means, the simplest of which is to sign the secret data before it is encrypted for privacy. 2 A particular case of the principle concerns hash functions: Example 5.2 It is common to use hash functions in order to save on encryption with asymmetric-key systems (see for example <ref> [27, 12] </ref>). In particular, A can send a signed, confidential message to B as follows: Message 1 A ! B : fXg K b ; fH (X)g K 1 a where H is a one-way hash function.
Reference: [28] <author> R.L. Rivest, A. Shamir, and L. Adleman. </author> <title> "A Method for Obtaining Digital Signatures and Public-key Cryptosystems". </title> <journal> Communications of the ACM Vol. </journal> <volume> 21, No. 2, </volume> <month> February </month> <year> 1978, </year> <pages> pp. 120-126. </pages>
Reference-contexts: We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). We focus on traditional cryptography, and on protocols of the sort commonly implemented with the DES [20] and the RSA <ref> [28] </ref> algorithms. In particular, we do not consider the subtleties of interactive schemes for signatures (e.g, [7]). Moreover, we do not discuss the choice of cryptographic mechanisms with adequate protection properties, the correct implementation of cryptographic primitives, or their appropriate use; these subjects are discussed elsewhere (e.g., [32, 19]).
Reference: [29] <author> E. Snekkenes. </author> <title> "Roles in Cryptographic Protocols". </title> <booktitle> Proceedings of the 1992 IEEE Symposium on Security and Privacy, </booktitle> <pages> pp. 105-119. </pages>
Reference-contexts: There are two possible forms of confusion (which could happen together): first, between the current message and a message of similar purpose from a previous run of the protocol, and second, between the current message and a message belonging either elsewhere in the protocol, or to another protocol. Snekkenes <ref> [29] </ref> and Syverson [30] have constructed examples of protocols where these confusions can arise. We believe that these confusions are less important when all our principles are correctly followed. If a message says what it means then we have no reason to be concerned with its context.
Reference: [30] <author> P. Syverson. </author> <title> "On Key Distribution Protocols for Repeated Authentication". </title> <journal> Operating Systems Review Vol. </journal> <volume> 27, No. 4, </volume> <month> October </month> <year> 1993, </year> <pages> pp. 24-30. </pages>
Reference-contexts: Snekkenes [29] and Syverson <ref> [30] </ref> have constructed examples of protocols where these confusions can arise. We believe that these confusions are less important when all our principles are correctly followed. If a message says what it means then we have no reason to be concerned with its context. <p> B ! A : fN-S Message 4: N b g K ab Message 5 A ! B : fN-S Message 5: N b g K ab though in fact any way of making the two messages different will do. (This is an instance of our suggestion to Syverson mentioned in <ref> [30] </ref>.) Guided by the principle that messages should say what they mean, how ever, we ought to rewrite the messages: Message 4 B ! A : fB says that K ab is a good key to talk to A; sometime after receiving K ab g K ab ; N b Message
Reference: [31] <author> V. Varadharajan, P. Allen, S. Black. </author> <title> "An Analysis of the Proxy Problem in Distributed Systems". </title> <booktitle> Proceedings of the 1991 IEEE Symposium on Security and Privacy, </booktitle> <pages> pp. 255-275. </pages>
Reference-contexts: Some of the oddities and errors that we analyze have been documented previously (in particular, in [4]). Other examples are new: protocols by Denning and Sacco [6], Hickman (Netscape) [11, 10], Lu and Sundare-shan [14], Varadharajan, Allen, and Black <ref> [31] </ref>, and Woo and Lam [34]. We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). <p> Once the importance of freshness of K ab is recognized, a solution may be found by using timestamps, as suggested by Denning and Sacco. In another solution, described in [23], B sends a nonce to S, and then S includes it in its certificate. 2 16 Example 9.2 In <ref> [31] </ref>, Varadharajan, Allen, and Black present several pro-tocols for delegation in distributed systems. We take as an example the one for delegation in a Kerberos environment [31, p. 273]. <p> We take as an example the one for delegation in a Kerberos environment <ref> [31, p. 273] </ref>. In this protocol, client B shares the key K bt with the authentication server; B has generated a timestamp T b and wants a key K bs to communicate with another server S. The authentication server gives K bs and fK bs g K bt to S.
Reference: [32] <author> V.L. Voydock and S.T. Kent. </author> <title> "Security Mechanisms in High-Level Network Protocols". </title> <journal> Computing Surveys Vol. </journal> <volume> 15, No. 2, </volume> <year> 1983, </year> <pages> pp. 135-171. </pages>
Reference-contexts: In particular, we do not consider the subtleties of interactive schemes for signatures (e.g, [7]). Moreover, we do not discuss the choice of cryptographic mechanisms with adequate protection properties, the correct implementation of cryptographic primitives, or their appropriate use; these subjects are discussed elsewhere (e.g., <ref> [32, 19] </ref>). Throughout, we concentrate on the simple principles with the largest potential applicability and payoff. Admittedly, the literature is full of ingenious protocols and attacks. We do not attempt to formulate the laws that underly this ingenuity, and perhaps it is not necessary to do so.
Reference: [33] <author> E. Wobber, M. Abadi, M. Burrows, and B. Lampson. </author> <title> "Authentication in the Taos Operating System". </title> <journal> ACM Transactions on Computer Systems Vol. </journal> <volume> 12, No. 1, </volume> <month> February </month> <year> 1994, </year> <pages> pp. 3-32. </pages>
Reference-contexts: In [4], we recommend the use of a logical notation in generating and describing protocols|essentially proposing a method to follow the principle. Establishing the correspondence between the logical protocol and its concrete implementation can be a simple matter of parsing, as for example in <ref> [33, Section 4.3.2] </ref>.
Reference: [34] <author> T.Y.C. Woo and S.S. Lam. </author> <title> "Authentication for Distributed Systems". </title> <journal> Computer Vol. </journal> <volume> 25, No. 1, </volume> <month> January </month> <year> 1992, </year> <pages> pp. 39-52. </pages>
Reference-contexts: Some of the oddities and errors that we analyze have been documented previously (in particular, in [4]). Other examples are new: protocols by Denning and Sacco [6], Hickman (Netscape) [11, 10], Lu and Sundare-shan [14], Varadharajan, Allen, and Black [31], and Woo and Lam <ref> [34] </ref>. We believe they are all instructive. Generally, we pick examples from the authentication literature, but the principles are applicable elsewhere, for example to electronic-cash protocols (e.g., [17]). We focus on traditional cryptography, and on protocols of the sort commonly implemented with the DES [20] and the RSA [28] algorithms. <p> It is important that this format must not be used for anything else; we return to this point in Section 7. 2 Example 3.2 In <ref> [34, pp. 42-43] </ref>, Woo and Lam present an authentication protocol based on symmetric-key cryptography.
Reference: [35] <author> T.Y.C. Woo and S.S. Lam. </author> <title> "A Lesson on Authentication Protocol Design". </title> <journal> Operating Systems Review Vol. </journal> <volume> 28, No. 3, </volume> <month> July </month> <year> 1994, </year> <month> pp.24-37. </month>
Reference-contexts: An operational variant on this theme appears in the work of Woo and Lam, who say that a protocol is a full information protocol if "its initiator and responder always include in their outgoing encrypted messages all the information they have gathered" <ref> [35] </ref>. 2.2 Appropriate action For a message to be acted upon, it does not suffice that the message be understood; a variety of other conditions have to hold too. <p> The existence of this attack demonstrates that the messages in the protocol are not sufficiently explicit about the identity of the principals in question. (After we contacted them, Woo and Lam came to the same conclusion <ref> [35] </ref>.) Reasoning as in Example 3.1, we may remove the flaw, by changing the last message of the protocol to Message 5 S ! B : fA; N b g K bs A further change is discussed in Example 6.2. 2 Example 3.3 A more dramatic example is provided by the
Reference: [36] <author> R. Yahalom, B. Klein, T. Beth. </author> <title> "Trust Relations in Secure Systems|A Distributed Authentication Perspective". </title> <booktitle> Proceedings of the 1993 IEEE Symposium on Security and Privacy, </booktitle> <pages> pp. 150-164. 25 </pages>
Reference-contexts: The idea of trust is pervasive and a little elusive. A careful classification of types of trust is given in <ref> [36] </ref> and is taken further by Klein in her doctoral thesis. There are questions both of practice and philosophy to do with trust relations|for example whether they are transitive or not|which it would not be appropriate to pursue here.
References-found: 36

