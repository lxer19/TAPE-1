URL: http://www.fzi.de/sim/people/hergen/java-ws/FinalPapers/horch.ps
Refering-URL: http://www.fzi.de/sim/people/hergen/java-ws/FinalPapers/
Root-URL: http://www.fzi.de
Email: horch@rs.e-technik.tu-darmstadt.de  
Title: A Simple Runtime System for a Hardware-Oriented Implementation of the Java Machine  
Author: Joachim Horch 
Address: Merckstr. 25, 64283 Darmstadt  
Affiliation: Darmstadt University of Technology Dept. of Electrical and Computer Engineering Computer Systems Division  
Abstract: This article describes a simple hardware-oriented implementation of the Java Machine. Most frequently used Java bytecode instructions are hardware-implemented in the execution engine. The Runtime System is the software part of the Java Machine and is programmed in Java. It emulates all remaining instructions and performs class loading and preparation, symbolic reference resolution and object management. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Tim Lindholm, </author> <title> Frank Yellin; The Java Virtual Machine Specification; Sun 1996 </title>
Reference-contexts: 1 Introduction A Java Machine must comply with the Java Virtual Machine Specification <ref> [1] </ref> and the Java Language Specification [2]. Basic operations of the Java machine include reading the Java class file format and performing the operations of such class files correctly. Since a pure hardware-solution is not feasible, the existence of a Runtime System is required (Fig. 1).
Reference: 2. <author> James Gosling, Bill Joy, </author> <title> Guy Steele; The Java Language Specification; Sun 1996 </title>
Reference-contexts: 1 Introduction A Java Machine must comply with the Java Virtual Machine Specification [1] and the Java Language Specification <ref> [2] </ref>. Basic operations of the Java machine include reading the Java class file format and performing the operations of such class files correctly. Since a pure hardware-solution is not feasible, the existence of a Runtime System is required (Fig. 1).
Reference: 3. <author> Jon Meyer, </author> <title> Troy Downing; Java Virtual Machine; O'Reilly </title>
Reference: 4. <institution> Norman Hendrich; Java fuer Fortgeschrittene; Springer 1997 </institution>
Reference: 5. <author> Java Online Magazine: </author> <note> http://www.javaworld.com </note>
Reference: 6. <institution> Jacques Cohen; Garbage Collection of Linked Data Structures; ACM Computing Sur-veyes, </institution> <month> September </month> <year> 1981, </year> <pages> page 341 </pages>
Reference: 7. <author> Edsger W. </author> <title> Dijkstra; On-the-Fly Garbage Collection: An Exercise in Cooperation; Communications of the ACM, </title> <month> November </month> <year> 1978, </year> <pages> page 966 </pages>
Reference: 8. <author> Richard L. </author> <title> Hudson; Finalization in a Garbage Collected World ; ftp://ftp.cs.utexas.edu/pub/garbage/GC91/hudson.ps </title>
Reference: 9. <author> Paul R. </author> <title> Wilson; Uniprocessor Garbage Collection Techniques; ftp://ftp.cs.utexas.edu/pub/garbage/bigsurv.ps 127 128 </title>
References-found: 9

