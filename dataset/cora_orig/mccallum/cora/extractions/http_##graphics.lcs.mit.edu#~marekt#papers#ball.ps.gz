URL: http://graphics.lcs.mit.edu/~marekt/papers/ball.ps.gz
Refering-URL: http://graphics.lcs.mit.edu/~marekt/publications.html
Root-URL: 
Title: Probabilistic Algorithms for Efficient Grasping and Fixturing  
Author: Marek Teichmann Bud Mishra 
Abstract: Given an object with n points on its boundary where fingers can be placed, we give algorithms to select a "strong" grasp with the least number c of fingers (up to a logarithmic factor) using several measures of goodness. Along similar lines, given an integer c, we find the "best" c log c finger grasp for a small constant . In addition, we generalize existing measures for the case of frictionless assemblies of many objects in contact. We also give an approximation scheme which guarantees a grasp quality close to the overall optimal value where fingers are not restricted to preselected points. These problems translate into a collection of convex set covering problems where we either minimize the cover size or maximize the scaling factor of an inscribed geometric object L. We present an algorithmic framework which handles these problems in a uniform way and give approximation algorithms for specific instances of L including convex polytopes and balls. The framework generalizes an algorithm for polytope covering and approximation by Clarkson [Cla93] in two different ways. Let fl = 1=bd=2c, where d is the dimension of the Euclidean space containing L. For both types of problems, when L is a polytope, we get the same expected time bounds (with a minor improvement), and for a ball, the expected running time is O(n 1+ffi + (nc) 1=(1+fl=(1+ffi)) + c log(n=c)(c log c) bd=2c ) for fixed d, and arbitrary positive ffi. We improve this bound if we allow in addition a different kind of approximation for the optimal radius. We also give bounds when d is not a constant. 
Abstract-found: 1
Intro-found: 1
Reference: [AF92] <author> D. Avis and K. Fukuda. </author> <title> A pivoting algorithm for convex hulls and vertex enumeration of arrangements and polyhedra. </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 </volume> <pages> 295-313, </pages> <year> 1992. </year>
Reference-contexts: This will be the returned L-facet. This takes time O (jRj bd=2c ) for fixed d 4 (or O (jRj log jRj) if d 3) [CS89, Cha93]. For variable d, we can use the algorithm in <ref> [AF92] </ref>, which finds f facets of the convex hull of jRj points in dimension d in time O (jRjdf ). As mentioned before, Lemmas 3.1, 3.2, and 3.3 apply when we replace the polytope L by a ball B (r), and this guarantees correctness of the algorithm. <p> for B (r) is: O n 1+ffi + (nc) 1=(1+fl=(1+ffi)) + c log (n=c)(c log c) bd=2c 13 for fixed d, or O ncd log (n=c) + cd 2 2 d log (n=c)(4cd log c) bd=2c+1 for any d (and non-degenerate convex hull of the covers) using the result in <ref> [AF92] </ref> and the crude bound on the complexity of the convex hull of d2 d v b d 2 c (this can be easily derived from the Upper Bound Theorem [MS71]). MinCover-P: The geometric object L to be covered is a fixed polytope P with ` vertices, containing the origin.
Reference: [BG94] <author> H. Bronnimann and M. T. Goodrich. </author> <title> Almost optimal set covers in finite VC-dimension. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 293-302, </pages> <year> 1994. </year>
Reference-contexts: If we ask for the smallest possible number of facets, this problem is NP-complete [DJ90]. Several approximation algorithms for this problem have been presented|both deterministic <ref> [DJ90, BG94] </ref>, and randomized [Cla93]. Consider U 0 as the intersection of a set of half-planes. In the above-mentioned algorithms, 4 S 0 is found by eliminating facets (half-planes) from U 0 , while making sure that the new polytope is still contained in L 0 . <p> It runs in time O (n d+1 ). There is also a deterministic analogue of Clarkson's algorithm which solves this problem and which provides a O (d log c)-approximation <ref> [BG94] </ref> in time O It is easy to verify that these hitting set techniques also apply to our MinCover-B problem as well as more general versions. <p> See [Tei95] for details. This fact does not use the geometry of the situation at all, and one wonders whether the size of the random sample could be reduced in our application where the points of U are in (non-strictly) convex position. The deterministic algorithm in <ref> [BG94] </ref> which uses "-nets reduces the approximation factor to O (1) for the three dimensional version of a closely related problem, see Section 1.3. Finally, to obtain a bound on the running time, we need to bound the number of iterations of the loop in find cover. <p> Finally, to obtain a bound on the running time, we need to bound the number of iterations of the loop in find cover. Again this lemma is a slight variation of Clarkson's and a similar lemma also appears in <ref> [BG94] </ref>. Lemma 3.3 The number of successful iterations of the loop in find cover before a cover is found is bounded from above by 2ff 2ff3 c lg (n=c), which is 4c lg (n=c) for ff = 2, 1501c lg (n=c) for ff = 1:501. Proof.
Reference: [BMK94] <author> D. Baraff, R. Mattikalli, and P. Khosla. </author> <title> Minimal fixturing of frictionless assemblies: Complexity and algorithms. </title> <type> Report CMU-RI-TR-94-08, </type> <institution> The Robotics Inst., Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1994. </year>
Reference-contexts: Since problems similar to these have been shown to be NP-hard <ref> [BMK94] </ref> or NP-complete [DJ90], We suspect our problems to be equally hard. However, it remains an open problem to characterize the exact complexity of our problems. We therefore consider approximation algorithms for the MinCover and MaxScale problems. <p> The previous framework generalizes to this case by essentially concatenating the force-torque vectors for each object and working in R 6k where k is the number of objects <ref> [BMK94] </ref>. 8 Let m i be the center of mass of object i. In the following definitions 0 is the 6 dimensional zero vector. For each object B i and contact point p 2 B i let i (p) = [n (p); (p m i ) fi n (p)].
Reference: [Cha93] <author> B. Chazelle. </author> <title> An optimal convex hull algorithm in any fixed dimension. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 </volume> <pages> 377-409, </pages> <year> 1993. </year>
Reference-contexts: This will be the returned L-facet. This takes time O (jRj bd=2c ) for fixed d 4 (or O (jRj log jRj) if d 3) <ref> [CS89, Cha93] </ref>. For variable d, we can use the algorithm in [AF92], which finds f facets of the convex hull of jRj points in dimension d in time O (jRjdf ).
Reference: [Cha95] <author> Timothy M. Y. Chan. </author> <title> Output-sensitive results on convex hulls, extreme points, and related problems. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 10-19, </pages> <year> 1995. </year>
Reference-contexts: The entire algorithm runs in expected time O ncd log (n=c) + `c 2 d 3 log c log (n=c) + `c log (n=c)e O ( d log d) : For fixed d, we can also use linear programming queries using the recent batched version of Chan <ref> [Cha95] </ref>.
Reference: [Cla93] <author> Kenneth L. Clarkson. </author> <title> Algorithms for polytope covering and approximation. </title> <booktitle> In Proc. 3rd Workshop Algorithms Data Struct., volume 709 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 246-252. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Thus, C is a cover for fl (c)L. In the approximation version, we ask for a d log jCj-approximation of the best cover C. In the sequel, we will replace L by various convex sets. We present an algorithmic framework derived from an algorithm by Clarkson <ref> [Cla93] </ref> for polytope covering that yields efficient randomized approximation algorithms for the above problems for various types of the set L. In fact, this approach works for any set L for which we can determine whether it lies entirely on one side of a query hyper-plane. <p> However, it remains an open problem to characterize the exact complexity of our problems. We therefore consider approximation algorithms for the MinCover and MaxScale problems. The MinCover-P problem arises in a dual form in the context of separating two nested polyhedra <ref> [MS92, Cla93] </ref>. In this problem, we are given two polyhedra L 0 and U 0 with U 0 L 0 , and we want to find a separating polytope S 0 with U 0 S 0 L 0 with small number of facets. <p> If we ask for the smallest possible number of facets, this problem is NP-complete [DJ90]. Several approximation algorithms for this problem have been presented|both deterministic [DJ90, BG94], and randomized <ref> [Cla93] </ref>. Consider U 0 as the intersection of a set of half-planes. In the above-mentioned algorithms, 4 S 0 is found by eliminating facets (half-planes) from U 0 , while making sure that the new polytope is still contained in L 0 . <p> We will use versions of find cover to solve the MaxScale problems. Before describing the algorithm find cover, we first need to introduce several geometric notions. Familiarity with Clarkson's paper <ref> [Cla93] </ref> might be helpful to the reader. Let P be a convex polytope. We say that a facet F of P is visible from a point q if for every p 2 F , the segment pq does not meet P . Following [Cla93], we define an L-facet to be a <p> Familiarity with Clarkson's paper <ref> [Cla93] </ref> might be helpful to the reader. Let P be a convex polytope. We say that a facet F of P is visible from a point q if for every p 2 F , the segment pq does not meet P . Following [Cla93], we define an L-facet to be a facet visible from a point of L. We also orient facets so that their positive side contains the polytope P . Let R U be a potential cover for L. The following lemmas were shown in [Cla93] for L a set of points <p> Following <ref> [Cla93] </ref>, we define an L-facet to be a facet visible from a point of L. We also orient facets so that their positive side contains the polytope P . Let R U be a potential cover for L. The following lemmas were shown in [Cla93] for L a set of points in convex position, but the proofs actually apply to any convex set L. As in [Cla93], we also assume that no d + 1 points of U lie on the same hyperplane. <p> Let R U be a potential cover for L. The following lemmas were shown in <ref> [Cla93] </ref> for L a set of points in convex position, but the proofs actually apply to any convex set L. As in [Cla93], we also assume that no d + 1 points of U lie on the same hyperplane. To ensure this, we can use perturbation methods such as those described in [ECS97, EM90, Yap90]. <p> (U )=(ffc) then 9. for all p 2 U F , let w p = 2w p freweightg 10. else fnot a successful iterationg endffind coverg. 11 The correctness and time complexity of the general algorithm follows from the following lem-mas, which are slightly modified versions of lemmas found in <ref> [Cla93] </ref>. We state them here for completeness and to bound some constants explicitly. Lemma 3.2 Given that an L-facet F is found, the probability that an iteration of find cover will be successful (i.e. the set U F satisfies w (U F ) w (U )=(ffc)), is at least 1/2. <p> For variable d, this incurs a total cost of O (ncd log (n=c)). However, for fixed d, using sophisticated data structures for 12 half-plane range queries [Mat92], the time complexity can be significantly improved by trading off preprocessing time for query time (see <ref> [Cla93] </ref>). The resulting time complexity is O n 1+ffi + (nc) 1=(1+fl=(1+ffi)) ; where ffi is an arbitrarily small positive number and fl = 1=bd=2c. Finally, let us describe the algorithm optimal cover which will solve the corresponding cover optimization, or MinCover, problems. <p> O n 1+ffi + (nc) 1=(1+fl=(1+ffi)) + c 2 log c c 2 log c n (`c log c) bd=2c+1 + n )` log 1+d (c log c) ; a slight improvement over the existing bound O (n 1+ffi + c` 1+ffi + c (`c) 1=(1+fl=(1+ffi)) + (nc) 1=(1+fl=(1+ffi)) ) <ref> [Cla93] </ref> for large `. The analysis resulting in the above expression is similar to the one given for MinCover-B and uses the fact that the expected size of R is 4cd ln c.
Reference: [CM93] <author> B. Chazelle and J. Matousek. </author> <title> On linear-time deterministic algorithms for optimization problems in fixed dimension. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 281-290, </pages> <year> 1993. </year>
Reference-contexts: The radius found is almost optimal for that cover size. Here LP (n; d) is the time required to solve a linear programming problem of size n and in dimension d. Currently the best deterministic algorithm runs in O (d 7d+o (d) n) time <ref> [CM93] </ref> and the best randomized algorithm in time O (d 2 n + e O ( p d log d) ). See [Gol95] for this bound and a recent survey.
Reference: [CS89] <author> K. L. Clarkson and P. W. Shor. </author> <title> Applications of random sampling in computational geometry, II. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 387-421, </pages> <year> 1989. </year>
Reference-contexts: This will be the returned L-facet. This takes time O (jRj bd=2c ) for fixed d 4 (or O (jRj log jRj) if d 3) <ref> [CS89, Cha93] </ref>. For variable d, we can use the algorithm in [AF92], which finds f facets of the convex hull of jRj points in dimension d in time O (jRjdf ).
Reference: [DJ90] <author> G. Das and D. Joseph. </author> <title> The complexity of minimum convex nested polyhedra. </title> <booktitle> In Proc. 2nd Canad. Conf. Comput. Geom., </booktitle> <pages> pages 296-301, </pages> <year> 1990. </year>
Reference-contexts: Since problems similar to these have been shown to be NP-hard [BMK94] or NP-complete <ref> [DJ90] </ref>, We suspect our problems to be equally hard. However, it remains an open problem to characterize the exact complexity of our problems. We therefore consider approximation algorithms for the MinCover and MaxScale problems. <p> If we ask for the smallest possible number of facets, this problem is NP-complete <ref> [DJ90] </ref>. Several approximation algorithms for this problem have been presented|both deterministic [DJ90, BG94], and randomized [Cla93]. Consider U 0 as the intersection of a set of half-planes. <p> If we ask for the smallest possible number of facets, this problem is NP-complete [DJ90]. Several approximation algorithms for this problem have been presented|both deterministic <ref> [DJ90, BG94] </ref>, and randomized [Cla93]. Consider U 0 as the intersection of a set of half-planes. In the above-mentioned algorithms, 4 S 0 is found by eliminating facets (half-planes) from U 0 , while making sure that the new polytope is still contained in L 0 .
Reference: [ECS97] <author> I. Z. Emiris, J. F. Canny, and R. Seidel. </author> <title> Efficient perturbations for handling geometric degeneracies. </title> <journal> Algorithmica, </journal> <volume> 19(1-2):219-242, </volume> <month> September </month> <year> 1997. </year>
Reference-contexts: As in [Cla93], we also assume that no d + 1 points of U lie on the same hyperplane. To ensure this, we can use perturbation methods such as those described in <ref> [ECS97, EM90, Yap90] </ref>. Such methods have in fact been used in practice, see for example the first two methods cited above.
Reference: [EM90] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference-contexts: As in [Cla93], we also assume that no d + 1 points of U lie on the same hyperplane. To ensure this, we can use perturbation methods such as those described in <ref> [ECS97, EM90, Yap90] </ref>. Such methods have in fact been used in practice, see for example the first two methods cited above.
Reference: [FC92] <author> C. Ferrari and J. Canny. </author> <title> Planning optimal grasps. </title> <booktitle> In 1992 IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 2290-2295, </pages> <address> Nice, France, </address> <year> 1992. </year>
Reference-contexts: Another desirable characteristic of a grasp is that by varying these forces within certain limits, we can resist an arbitrary external force-torque or wrench of a certain magnitude. See for example [MNP90, MSS87] for a more detailed description. Other recent references on this topic include <ref> [Ngu87, FC92, PSS + 95, MLS94] </ref>. fl MIT Lab. for Computer Science, Cambridge, MA, USA. This work was done while at the Courant Institute, New York University. Supported by an NSF Grant CDA-9018673 and by FCAR and NSERC, Canada. y Courant Institute, New York University, NY, USA. <p> Section 5 presents a method for lifting the restriction on the placement of fingers. We conclude in section 6. 2 Further applications 2.1 Other grasp efficiency measures Other efficiency measures closely related to the previous one have been proposed, see for example <ref> [FC92] </ref> for a measure based on Minkowski sums instead of convex hulls. Yet another measure was proposed by W. Meyer and was described in [Mis94] see this paper for an extensive survey 5 of grasp efficiency measures.
Reference: [GLS88] <author> M. Grotschel, L. Lovasz, and A. Schrijver. </author> <title> Geometric Algorithms and Combinatorial Optimization, </title> <booktitle> volume 2 of Algorithms and Combinatorics. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin Hei-delberg, </address> <year> 1988. </year> <note> Second edition 1994. 19 </note>
Reference-contexts: In fact, this approach works for any set L for which we can determine whether it lies entirely on one side of a query hyper-plane. Such a test has been called a strong violation oracle <ref> [GLS88] </ref> or half-space emptiness query [Mat92]. When L is the unit ball centered at the origin, the corresponding optimization problems will be called MaxScale-B and MinCover-B, and when L is a polytope containing the origin, "-L" will be replaced by "-P".
Reference: [Gol95] <author> M. Goldwasser. </author> <title> A survey of linear programming in randomized subexponential time. </title> <journal> SIGACT News, </journal> <volume> 26(2) </volume> <pages> 96-104, </pages> <year> 1995. </year>
Reference-contexts: Currently the best deterministic algorithm runs in O (d 7d+o (d) n) time [CM93] and the best randomized algorithm in time O (d 2 n + e O ( p d log d) ). See <ref> [Gol95] </ref> for this bound and a recent survey. In section 2, we present some convexity properties of force-torque space, and describe additional applications of the algorithmic framework, including a generalization of the grasp quality measures to fixturing multiple objects. <p> The expected running time of find l-facet is then O (`d 3 c log c + `e O ( p d log d) ) using the linear programming algorithm of <ref> [Gol95] </ref>. The entire algorithm runs in expected time O ncd log (n=c) + `c 2 d 3 log c log (n=c) + `c log (n=c)e O ( d log d) : For fixed d, we can also use linear programming queries using the recent batched version of Chan [Cha95].
Reference: [Gru67] <author> B. Grunbaum. </author> <title> Convex Polytopes. </title> <publisher> Wiley, </publisher> <address> New York, NY, </address> <year> 1967. </year>
Reference-contexts: Note that W " h 0 = fw x 0 y : y 2 Y (x 0 )g. We have (see <ref> [Gru67, p17] </ref>) W " h 0 conv (W " h 0 ) = (conv W ) " h 0 , hence W " h 0 @conv W . The first part of the lemma follows. (2) Consider a point w = [x 0 ; y 0 ] of W . <p> Here we let the set L to be a scaled version of the direct product N i conv (@B i ). This construction is a special case of taking 9 Minkowski sums of polytopes, and the result is still convex <ref> [Gru67] </ref>. The set U becomes L. Alternately, if fixtures can be placed at only a finite number of points on B i , one can replace B i by this set of points. The corresponding optimization problems are MaxScale-P and MinCover-P.
Reference: [KMY92] <author> D. Kirkpatrick, B. Mishra, and C.-K. Yap. </author> <title> Quantitative Steinitz's theorems with applications to multifingered grasping. </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 </volume> <pages> 295-318, </pages> <year> 1992. </year>
Reference-contexts: For polyhedral objects there are linear time algorithms to find such a closure grasp. However there is no guarantee on the "quality" of the grasp. In <ref> [KMY92] </ref> such a measure of efficiency is proposed. It is the amount of external force and torque that can be resisted by applying at most a unit force distributed among the grasp points. <p> We take this approach to be able to work with closed polygonal faces in later analysis. We would like to obtain grasps of high efficiency but with few fingers. These are two conflicting goals <ref> [KMY92] </ref>, so in this paper we provide algorithms for optimizing one quantity or the other. 1.2 Optimization Problems in Grasping At this point let us describe the setting for the optimization algorithms in full generality. <p> It would be interesting to analyze these changes. For the MaxScale-B problem, Kirkpatrick et al. <ref> [KMY92] </ref> give an algorithm that finds a cover C of size c containing a ball of radius r (C) = 1 3d 2d 2 =c for n c 13 d d (d+3)=2 in time O (LP (n; d)c). The radius found is almost optimal for that cover size. <p> We sample conv R by performing the ray shooting queries described above for the MaxScale-P problem, along equally distributed rays on the set of directions (or points on a sphere.) We can use the upper bound construction of <ref> [KMY92] </ref> to find such a set of points or rays. This construction gives, say `, appropriately placed points on a unit sphere whose residual radius is 1 1 ` ) d1 .
Reference: [Mat92] <author> J. Matousek. </author> <title> Reporting points in halfspaces. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 2(3) </volume> <pages> 169-186, </pages> <year> 1992. </year>
Reference-contexts: In fact, this approach works for any set L for which we can determine whether it lies entirely on one side of a query hyper-plane. Such a test has been called a strong violation oracle [GLS88] or half-space emptiness query <ref> [Mat92] </ref>. When L is the unit ball centered at the origin, the corresponding optimization problems will be called MaxScale-B and MinCover-B, and when L is a polytope containing the origin, "-L" will be replaced by "-P". <p> This is repeated O (c log (n=c)) times over the entire algorithm. For variable d, this incurs a total cost of O (ncd log (n=c)). However, for fixed d, using sophisticated data structures for 12 half-plane range queries <ref> [Mat92] </ref>, the time complexity can be significantly improved by trading off preprocessing time for query time (see [Cla93]). The resulting time complexity is O n 1+ffi + (nc) 1=(1+fl=(1+ffi)) ; where ffi is an arbitrarily small positive number and fl = 1=bd=2c.
Reference: [Mis91] <author> B. Mishra. </author> <title> Workholding analysis, design and planning. </title> <booktitle> In IROS '91, </booktitle> <pages> pages 53-57, </pages> <address> Osaka, Japan, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Fixture elements or fixels are positioned in contact with the objects to achieve this. Often there is only a finite set of possible placements due to the construction of the workholding table <ref> [Mis91, ZGW94] </ref> (see Figure 2). In this setting, forces applied to an object are due both to contacts between objects, and between objects and fixtures (see Figure 3).
Reference: [Mis94] <author> B. Mishra. </author> <title> Grasp metrics: Optimality and complexity. </title> <editor> In K. Goldberg, D. Halperin, J.C. Latombe, and R. Wilson, editors, </editor> <booktitle> Algorithmic Foundations of Robotics, </booktitle> <pages> pages 137-166. </pages> <publisher> A.K. Peters, </publisher> <year> 1994. </year>
Reference-contexts: Yet another measure was proposed by W. Meyer and was described in <ref> [Mis94] </ref> see this paper for an extensive survey 5 of grasp efficiency measures. Imagine an adversarial external finger capable of applying a force of an arbitrary magnitude on the grasped object. <p> As is the case in grasping a single object, here we assume that the sum of the magnitudes of all wrenches due either to the fingers or inter-object contacts is bounded by 1 (see <ref> [Mis94] </ref>). <p> Other force-torques due to acceleration and gravity can be neglected. Other variations, using for example Minkowski sums instead of convex hulls, are possible and have slightly different physical interpretation, but do not change the situation qualitatively; see <ref> [Mis94] </ref> for a discussion. The application at hand will determine which measure will be used. 3 The Computational Framework In this section, we describe the optimal cover-finding algorithms refered to previously 1 .
Reference: [MLS94] <author> R. Murray, Z. Li, and S. Sastry. </author> <title> A Mathematical Introduction to Robotic Manipulation. </title> <publisher> CRC Press, </publisher> <year> 1994. </year>
Reference-contexts: Another desirable characteristic of a grasp is that by varying these forces within certain limits, we can resist an arbitrary external force-torque or wrench of a certain magnitude. See for example [MNP90, MSS87] for a more detailed description. Other recent references on this topic include <ref> [Ngu87, FC92, PSS + 95, MLS94] </ref>. fl MIT Lab. for Computer Science, Cambridge, MA, USA. This work was done while at the Courant Institute, New York University. Supported by an NSF Grant CDA-9018673 and by FCAR and NSERC, Canada. y Courant Institute, New York University, NY, USA.
Reference: [MNP90] <author> X. Markenscoff, L. Ni, and C. H. Papadimitriou. </author> <title> The geometry of grasping. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 9(1), </volume> <month> February </month> <year> 1990. </year>
Reference-contexts: In general, we want the number of fingers to be small. Another desirable characteristic of a grasp is that by varying these forces within certain limits, we can resist an arbitrary external force-torque or wrench of a certain magnitude. See for example <ref> [MNP90, MSS87] </ref> for a more detailed description. Other recent references on this topic include [Ngu87, FC92, PSS + 95, MLS94]. fl MIT Lab. for Computer Science, Cambridge, MA, USA. This work was done while at the Courant Institute, New York University.
Reference: [MS71] <author> P. McMullen and G. C. Shephard. </author> <title> Convex Polytopes and the Upper Bound Conjecture. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1971. </year>
Reference-contexts: d log (n=c)(4cd log c) bd=2c+1 for any d (and non-degenerate convex hull of the covers) using the result in [AF92] and the crude bound on the complexity of the convex hull of d2 d v b d 2 c (this can be easily derived from the Upper Bound Theorem <ref> [MS71] </ref>). MinCover-P: The geometric object L to be covered is a fixed polytope P with ` vertices, containing the origin. Clarkson's original algorithm solves this approximation problem.
Reference: [MS92] <author> J. S. B. Mitchell and S. Suri. </author> <title> Separation and approximation of polyhedral surfaces. </title> <booktitle> In Proc. 3rd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 296-306, </pages> <year> 1992. </year>
Reference-contexts: However, it remains an open problem to characterize the exact complexity of our problems. We therefore consider approximation algorithms for the MinCover and MaxScale problems. The MinCover-P problem arises in a dual form in the context of separating two nested polyhedra <ref> [MS92, Cla93] </ref>. In this problem, we are given two polyhedra L 0 and U 0 with U 0 L 0 , and we want to find a separating polytope S 0 with U 0 S 0 L 0 with small number of facets. <p> Polytope covering problems can in turn be cast as Hitting Set problems <ref> [MS92] </ref>. We refer the reader to this paper for the details of this transformation. The algorithm in [MS92] can be used to provide an approximation algorithm for the MinCover-P problem (or its dual) using a greedy heuristic, with an approximation factor of d log n. <p> Polytope covering problems can in turn be cast as Hitting Set problems <ref> [MS92] </ref>. We refer the reader to this paper for the details of this transformation. The algorithm in [MS92] can be used to provide an approximation algorithm for the MinCover-P problem (or its dual) using a greedy heuristic, with an approximation factor of d log n. It runs in time O (n d+1 ).
Reference: [MSS87] <author> B. Mishra, J.T. Schwartz, and M. Sharir. </author> <title> On the existence and synthesis of multifinger positive grips. </title> <journal> Algorithmica, </journal> <volume> 2(4) </volume> <pages> 541-558, </pages> <year> 1987. </year>
Reference-contexts: In general, we want the number of fingers to be small. Another desirable characteristic of a grasp is that by varying these forces within certain limits, we can resist an arbitrary external force-torque or wrench of a certain magnitude. See for example <ref> [MNP90, MSS87] </ref> for a more detailed description. Other recent references on this topic include [Ngu87, FC92, PSS + 95, MLS94]. fl MIT Lab. for Computer Science, Cambridge, MA, USA. This work was done while at the Courant Institute, New York University. <p> For a set G S of c points, we call G a c-finger closure grasp if the interior of conv (G) contains the origin o. It is shown in <ref> [MSS87] </ref> that for all but a certain class of objects having a boundary defined by an exceptional surface (a surface of revolution, for example) there is such a set G @B of size c 12. For polyhedral objects there are linear time algorithms to find such a closure grasp.
Reference: [Ngu87] <author> V.-D. Nguyen. </author> <title> Constructing force-closure grasps in 3D. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 240-245, </pages> <year> 1987. </year>
Reference-contexts: Another desirable characteristic of a grasp is that by varying these forces within certain limits, we can resist an arbitrary external force-torque or wrench of a certain magnitude. See for example [MNP90, MSS87] for a more detailed description. Other recent references on this topic include <ref> [Ngu87, FC92, PSS + 95, MLS94] </ref>. fl MIT Lab. for Computer Science, Cambridge, MA, USA. This work was done while at the Courant Institute, New York University. Supported by an NSF Grant CDA-9018673 and by FCAR and NSERC, Canada. y Courant Institute, New York University, NY, USA.
Reference: [PSS + 95] <author> J. Ponce, S. Sullivan, A. Sudsang, J.-D. Boissonnat, and J.-P. Merlet. </author> <title> Algorithms for computing force-closure grasps of polyhedral objects. </title> <editor> In K. Goldberg, D. Halperin, J.C. Latombe, and R. Wilson, editors, </editor> <booktitle> Algorithmic Foundations of Robotics, </booktitle> <pages> pages 167-184. </pages> <publisher> A.K. Peters, </publisher> <year> 1995. </year>
Reference-contexts: Another desirable characteristic of a grasp is that by varying these forces within certain limits, we can resist an arbitrary external force-torque or wrench of a certain magnitude. See for example [MNP90, MSS87] for a more detailed description. Other recent references on this topic include <ref> [Ngu87, FC92, PSS + 95, MLS94] </ref>. fl MIT Lab. for Computer Science, Cambridge, MA, USA. This work was done while at the Courant Institute, New York University. Supported by an NSF Grant CDA-9018673 and by FCAR and NSERC, Canada. y Courant Institute, New York University, NY, USA.
Reference: [Tei95] <author> M. Teichmann. Grasping and Fixturing: </author> <title> A Geometric Analysis and an Implementation. </title> <type> Ph.D. thesis, </type> <address> New York Univ., New York, NY, </address> <year> 1995. </year>
Reference-contexts: See <ref> [Tei95] </ref> for details. This fact does not use the geometry of the situation at all, and one wonders whether the size of the random sample could be reduced in our application where the points of U are in (non-strictly) convex position. <p> Each step above can be done in O (LP (jRj; d)) time which is O (LP (4cd log c; d)) via linear pro gramming using duality as described in detail in <ref> [Tei95] </ref>. The expected running time of find l-facet is then O (`d 3 c log c + `e O ( p d log d) ) using the linear programming algorithm of [Gol95].
Reference: [Yap90] <author> C. K. Yap. </author> <title> A geometric consistency theorem for a symbolic perturbation scheme. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 40 </volume> <pages> 2-18, </pages> <year> 1990. </year> <month> 20 </month>
Reference-contexts: As in [Cla93], we also assume that no d + 1 points of U lie on the same hyperplane. To ensure this, we can use perturbation methods such as those described in <ref> [ECS97, EM90, Yap90] </ref>. Such methods have in fact been used in practice, see for example the first two methods cited above.
Reference: [ZGW94] <author> Y. Zhuang, K.Y. Goldberg, and Y.-C. Wong. </author> <title> On the existence of modular fixtures. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 543-549, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: Fixture elements or fixels are positioned in contact with the objects to achieve this. Often there is only a finite set of possible placements due to the construction of the workholding table <ref> [Mis91, ZGW94] </ref> (see Figure 2). In this setting, forces applied to an object are due both to contacts between objects, and between objects and fixtures (see Figure 3).
References-found: 29

