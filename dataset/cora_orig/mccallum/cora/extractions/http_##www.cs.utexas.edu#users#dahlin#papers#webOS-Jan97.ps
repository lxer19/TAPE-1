URL: http://www.cs.utexas.edu/users/dahlin/papers/webOS-Jan97.ps
Refering-URL: http://www.cs.utexas.edu/users/dahlin/papers.html
Root-URL: 
Title: WebOS: Software Support for Scalable Web Services  
Author: Amin Vahdat, Michael Dahlin, Paul Eastham, Chad Yoshikawa, Thomas Anderson, and David Culler 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California  
Abstract: The burgeoning popularity of the Web is pushing against the performance limits of the underlying infrastructure, presenting a number of difficult challenges for the Web as a system. We believe that resources such as connectivity, storage, computation, latency, and bandwidth are likely to remain constrained in the future. Thus, we are building a higher level Web operating system to efficiently manage these resources for the benefit of all Web users. Our prototype, WebOS, is designed to support highly available, incrementally scalable, self-tuning, dynamically reconfigur-ing and geographically aware Web services. WebOS includes mechanisms for naming Web services, coherent data replication, efficient distribution of client requests across the wide area, safe execution of arbitrary executables on remote sites, and authentication for secure access to Web resources. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Albert D. Alexandrov, Maximilian Ibel, Klaus E. Schauser, and Chris J. Scheiman. Ufo: </author> <title> A Personal Global File System Based on User-Level Extensions to the Operating System. </title> <booktitle> In Proceedings of the 1997 USENIX Technical Conference, </booktitle> <address> Anaheim, CA, </address> <month> Jan-uary </month> <year> 1997. </year>
Reference-contexts: able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems <ref> [35, 15, 39, 52, 16, 33, 1] </ref>; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [2] <author> Eric Anderson, David Patterson, and Eric Brewer. </author> <title> The Magicrouter, an Application of Fast Packet Interposing. </title> <note> See http://HTTP.CS.Berkeley.EDU/eanders /magicrouter/, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users <ref> [31, 38, 6, 11, 2] </ref>. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet. Perhaps the closest to our work is the recent Active Networks proposal [51].
Reference: [3] <author> Eric Baldeschwieler, Robert Blumofe, and Eric Brewer. </author> <title> Atlas: An Infrastructure for Global Computing. </title> <booktitle> In Proc. of the Seventh ACM SIGOPS European Workshop: Systems Support for Worldwide Applcations, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Finally, a number of recent efforts exploit computational resources available on the Internet for wide area parallel programming, including Atlas <ref> [3] </ref>, Globus [24], Legion [32], and NetSolve [13]. Although we share a lot of underlying technology with these systems (such as the need for a global name space and file system), our emphasis and our solution is different.
Reference: [4] <author> J. Bartlett. </author> <title> A NonStop Kernel. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 22-29, </pages> <month> December </month> <year> 1981. </year>
Reference: [5] <author> Eshwar Belani, Alex Thornton, and Min Zhou. </author> <title> Security and Authentication in WebFS. </title> <note> See http://- now.cs.berkeley.edu/WebOS/security.ps, </note> <month> December </month> <year> 1996. </year>
Reference-contexts: Further, WebOS authentication will be used as a basis for resource allocation policies in the Web virtual machine, allowing job priorities and access rights to be set on a per-user basis. A description of a prototype implementation of WebFS authentication is available <ref> [5] </ref>. 5 Web Cooperative Cache We are using WebOS to build a geographically distributed Web cooperative cache to both validate our design and to provide an immediate benefit to the Internet by doing more intelligent caching of Web content.
Reference: [6] <author> Tim Berners-Lee. </author> <title> Hypertext Transfer Protocol HTTP/1.0, October 1995. HTTP Working Group Internet Draft. </title>
Reference-contexts: Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location. To distribute load in the local area techniques such as HTTP redirect <ref> [6] </ref> or DNS Aliasing [11, 38] can be used to send user requests to individual machines. With HTTP redirect, a front end machine redirects the client to resend the request to an available worker machine. This approach has the disadvantage of adding a round trip message latency to each request. <p> 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users <ref> [31, 38, 6, 11, 2] </ref>. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet. Perhaps the closest to our work is the recent Active Networks proposal [51].
Reference: [7] <author> Ken P. Birman. </author> <title> The Proecss Group Appraoch to Reliable Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 36-53, </pages> <year> 1993. </year>
Reference-contexts: Other Web services such as chat rooms and whiteboards have long been structured using mul-ticast; we can simplify these applications by folding the multicast support into the file system (for these applications, we use weak coherence since updates need not arrive in a consistent order at all sites <ref> [7] </ref>). Both the last-writer wins and the multi-cast update/invalidate coherence policies have been implemented in WebFS [54]. We also plan to investigate transparent result caching. HTTP servers translate some URLs into requests to dynamically generate a Web page.
Reference: [8] <author> Andrew D. Birrell, Roy Levin, Roger M. Needham, and Michael D. Schroeder. Grapevine: </author> <title> An Exercise in Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference: [9] <author> Anita Borg, Wolfgang Blau, Wolfgang Graetsch, Fer-dinand Heermann, and Wolfgang Oberle. </author> <title> Fault Tolerance Under UNIX. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(1) </volume> <pages> 1-23, </pages> <month> February </month> <year> 1989. </year>
Reference: [10] <author> T. Bressoud and F. Schneider. </author> <title> Hypervisor-based Fault Tolerance. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference: [11] <author> T. Brisco. </author> <title> DNS Support for Load Balancing, </title> <month> April </month> <year> 1995. </year> <title> Network Working Group RFC 1794. </title>
Reference-contexts: Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location. To distribute load in the local area techniques such as HTTP redirect [6] or DNS Aliasing <ref> [11, 38] </ref> can be used to send user requests to individual machines. With HTTP redirect, a front end machine redirects the client to resend the request to an available worker machine. This approach has the disadvantage of adding a round trip message latency to each request. <p> 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users <ref> [31, 38, 6, 11, 2] </ref>. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet. Perhaps the closest to our work is the recent Active Networks proposal [51].
Reference: [12] <author> Michael Burrows, Charles Jerian, Butler Lampson, and Timothy Mann. </author> <title> On-line Data Compression in a Log-Structured File System. </title> <booktitle> In Proceedings of the 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 2-9, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In WebOS, we leverage work in wide area distributed system authentication and ac cess control <ref> [20, 46, 49, 27, 12, 55, 26] </ref> to build ac-cess control lists for access to files in the global name space. Individuals are uniquely identified by a public key, allowing for unique identities across organizational boundaries. <p> context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems <ref> [20, 46, 49, 27, 12, 55, 26] </ref>; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2]. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet.
Reference: [13] <author> H. Casanova and J. Dongarra. NetSolve: </author> <title> A Net--work Server for Solving Computational Science Problems. </title> <booktitle> In Proceedings of Supercomputing '96, </booktitle> <month> Novem-ber </month> <year> 1996. </year>
Reference-contexts: Finally, a number of recent efforts exploit computational resources available on the Internet for wide area parallel programming, including Atlas [3], Globus [24], Legion [32], and NetSolve <ref> [13] </ref>. Although we share a lot of underlying technology with these systems (such as the need for a global name space and file system), our emphasis and our solution is different.
Reference: [14] <author> J. Casas, D. Clark, R. Konuru, S. Otto, R. Prouty, and J. Walpole. MPVM: </author> <title> A Migration Transparent Version of PVM. </title> <booktitle> In Computing Systems, </booktitle> <volume> volume 8, </volume> <pages> pages 171-216, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: pages at the proper time. 6 Related Work We are able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area <ref> [53, 22, 42, 28, 57, 14] </ref>; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [15] <author> Vincent Cate. </author> <title> Alex a Global Filesystem. </title> <booktitle> In Proceedings of the 1992 USENIX File System Workshop, </booktitle> <pages> pages 1-12, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems <ref> [35, 15, 39, 52, 16, 33, 1] </ref>; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [16] <author> A. Chankhunthod, P. Danzig, C. Neerdaels, M. Schwartz, and K. Worrell. </author> <title> A Hierarchical Internet Object Cache. </title> <booktitle> In Proceedings of the 1996 USENIX Technical Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems <ref> [35, 15, 39, 52, 16, 33, 1] </ref>; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [17] <author> David Cheriton and Dale Skeen. </author> <title> Understanding the Limits of Causally and Totally Ordered Communication. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 44-57, </pages> <month> Decem-ber </month> <year> 1995. </year>
Reference: [18] <author> Stephen E. Deering. </author> <title> Multicast Routing in a Datagram Internetwork. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> De-cember </month> <year> 1991. </year>
Reference-contexts: Another avenue we plan to explore is using IP Multicast <ref> [18, 23] </ref> to provide update-based cache coherence. For example, a news service could select multicast update policy for its widely shared, frequently updated files, such as vote counts on election night.
Reference: [19] <author> Daniel Dias, William Kish, Rajat Mukherjee, and Renu Tewari. </author> <title> A Scalable and Highly Available Web Server. </title> <booktitle> In Proceedings of COMPCON, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: However, currently load balancing with DNS aliasing is restricted to round-robin, making it difficult to use service-specific knowledge such as load information. Further, because clients cache hostname to IP address mappings, a single server can become overloaded with multiple requests while other servers remain relatively idle <ref> [19] </ref>. 3.2 Smart Clients In WebOS, we address the shortcomings of existing solutions for scalable service access through the Smart Client architecture [56].
Reference: [20] <author> Whitfield Diffie and Mart in Hellman. </author> <title> New Directons in Cryptography. </title> <journal> In IEEE Transactions on Information Theory, </journal> <pages> pages 74-84, </pages> <month> June </month> <year> 1977. </year>
Reference-contexts: In WebOS, we leverage work in wide area distributed system authentication and ac cess control <ref> [20, 46, 49, 27, 12, 55, 26] </ref> to build ac-cess control lists for access to files in the global name space. Individuals are uniquely identified by a public key, allowing for unique identities across organizational boundaries. <p> context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems <ref> [20, 46, 49, 27, 12, 55, 26] </ref>; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2]. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet.
Reference: [21] <institution> Digital Equipment Corporation. Alta Vista, </institution> <year> 1995. </year> <note> http://www.altavista.digital.com/. </note>
Reference-contexts: a sporadically popular web site, such as the IRS near April 15th, should buy only enough local hardware to handle the typical demand and dynamically recruit extra hardware resources over the Internet to handle peak loads. 3.1 Current Approaches Today, some popular services such as the Alta Vista search engine <ref> [21] </ref> or the Netscape home page [43] are geographically distributed but replicated manu-ally by the service provider. Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location.
Reference: [22] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-85, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: pages at the proper time. 6 Related Work We are able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area <ref> [53, 22, 42, 28, 57, 14] </ref>; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [23] <author> Sally Floyd, Van Jacobson, Steven McCanne, Ching-Gung Liu, and Lixia Zhang. </author> <title> A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing. </title> <journal> In IEEE/ACM Transacions on Networking, </journal> <month> November </month> <year> 1995. </year>
Reference-contexts: Another avenue we plan to explore is using IP Multicast <ref> [18, 23] </ref> to provide update-based cache coherence. For example, a news service could select multicast update policy for its widely shared, frequently updated files, such as vote counts on election night.
Reference: [24] <author> I. Foster and C. Kesselman. Globus: </author> <title> A Metacomput-ing Infrastructure Toolkit. </title> <booktitle> In Proc. Workshop on Environments and Tools, </booktitle> <year> 1996. </year>
Reference-contexts: Finally, a number of recent efforts exploit computational resources available on the Internet for wide area parallel programming, including Atlas [3], Globus <ref> [24] </ref>, Legion [32], and NetSolve [13]. Although we share a lot of underlying technology with these systems (such as the need for a global name space and file system), our emphasis and our solution is different.
Reference: [25] <author> Sandy Fraser. </author> <title> Future Prospects for Wide Area Telecommunications. </title> <booktitle> In IEEE Micro, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: Latency (often best predicted by the number of network hops between client and server) is often the most important metric for measuring performance delivered to the client. Further, the current (hidden) cost of Internet traffic is a few dollars per terabyte-mile <ref> [25] </ref>. These considerations suggest that to both reduce latency and consume less bandwidth, service providers should move portions of their service across the Internet.
Reference: [26] <author> Alan Freier, Philip Karlton, and Paul Kocher. </author> <title> Secure Socket Layer. Netscape, </title> <month> March </month> <year> 1996. </year>
Reference-contexts: In WebOS, we leverage work in wide area distributed system authentication and ac cess control <ref> [20, 46, 49, 27, 12, 55, 26] </ref> to build ac-cess control lists for access to files in the global name space. Individuals are uniquely identified by a public key, allowing for unique identities across organizational boundaries. <p> context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems <ref> [20, 46, 49, 27, 12, 55, 26] </ref>; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2]. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet.
Reference: [27] <author> M. Gasser, A. Goldstein, C. Kaufman, and B. Lamp-son. </author> <title> The Digital Distributed System Security Architecture. </title> <booktitle> In Proceedings of the 12th National Computer Security Conference, </booktitle> <pages> pages 305-319, </pages> <year> 1989. </year>
Reference-contexts: In WebOS, we leverage work in wide area distributed system authentication and ac cess control <ref> [20, 46, 49, 27, 12, 55, 26] </ref> to build ac-cess control lists for access to files in the global name space. Individuals are uniquely identified by a public key, allowing for unique identities across organizational boundaries. <p> context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems <ref> [20, 46, 49, 27, 12, 55, 26] </ref>; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2]. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet.
Reference: [28] <author> D. Gelernter and D. Kaminsky. </author> <title> Supercomputing Out of Recycled Garbage: Preliminary Experience with Pirhana. </title> <booktitle> In Proceedings of Supercomputing '92, </booktitle> <pages> pages 417-427, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: pages at the proper time. 6 Related Work We are able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area <ref> [53, 22, 42, 28, 57, 14] </ref>; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [29] <author> Ian Goldberg, David Wagner, Randy Thomas, and Eric Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications. </title> <booktitle> In Proceedings of the Sixth USENIX Security Symposium, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: To ensure the system integrity of the surrogate and to ensure that executed processes do not interfere with other processes running locally, the front-end creates a virtual machine where all processes for the service execute. We are using the Secure Remote Helper Applications model <ref> [29] </ref> to create a virtual machine which executes processes with limited privileges, preventing them from interfering with the operation of processes in other virtual machines. Once processes are initialized in the virtual machine, the expanding service can inform Smart Clients of the location of a new service provider.
Reference: [30] <author> C. Gray and D. Cheriton. Leases: </author> <title> An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 202-210, </pages> <year> 1989. </year>
Reference-contexts: As another example, to support service migration, WebFS may initially use large block sizes or prefetching to reduce cold-start misses and then convert to smaller blocks for minimizing false sharing. A number of cache coherence mechanisms have been proposed for distributed systems, such as leases <ref> [30] </ref>, last writer wins [35], volume reintegration [41], and modified time to live [33]; we plan to evaluate these in the context of the workloads generated by Web services. Another avenue we plan to explore is using IP Multicast [18, 23] to provide update-based cache coherence.
Reference: [31] <author> Jim Gray and Andreas Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users <ref> [31, 38, 6, 11, 2] </ref>. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet. Perhaps the closest to our work is the recent Active Networks proposal [51].
Reference: [32] <author> A. Grimshaw, A. Nguyen-Tuong, and W. Wulf. </author> <title> Campus-Wide Computing: Results Using Legion at the University of Virginia. </title> <type> Technical Report CS-95-19, </type> <institution> University of Virginia, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Finally, a number of recent efforts exploit computational resources available on the Internet for wide area parallel programming, including Atlas [3], Globus [24], Legion <ref> [32] </ref>, and NetSolve [13]. Although we share a lot of underlying technology with these systems (such as the need for a global name space and file system), our emphasis and our solution is different.
Reference: [33] <author> James Gwertzman and Margo Seltzer. </author> <title> World-Wide Web Cache Consistency. </title> <booktitle> In Proceedings of the 1996 USENIX Technical Conference, </booktitle> <pages> pages 141-151, </pages> <month> Jan-uary </month> <year> 1996. </year>
Reference-contexts: A number of cache coherence mechanisms have been proposed for distributed systems, such as leases [30], last writer wins [35], volume reintegration [41], and modified time to live <ref> [33] </ref>; we plan to evaluate these in the context of the workloads generated by Web services. Another avenue we plan to explore is using IP Multicast [18, 23] to provide update-based cache coherence. <p> able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems <ref> [35, 15, 39, 52, 16, 33, 1] </ref>; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [34] <author> R. Haskin, Y. Malachi, W. Sawdon, and G. Chan. </author> <title> Recovery Management in Quicksilver. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 82-108, </pages> <month> February </month> <year> 1988. </year>
Reference: [35] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, and M. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-82, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: As another example, to support service migration, WebFS may initially use large block sizes or prefetching to reduce cold-start misses and then convert to smaller blocks for minimizing false sharing. A number of cache coherence mechanisms have been proposed for distributed systems, such as leases [30], last writer wins <ref> [35] </ref>, volume reintegration [41], and modified time to live [33]; we plan to evaluate these in the context of the workloads generated by Web services. Another avenue we plan to explore is using IP Multicast [18, 23] to provide update-based cache coherence. <p> able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems <ref> [35, 15, 39, 52, 16, 33, 1] </ref>; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [36] <author> JavaSoft. </author> <title> Java RMI Specification, Revision 1.1, </title> <note> 1996. See http://chatsubo.javasoft.com/current/doc/- rmi-spec/rmiTOC.doc.html. </note>
Reference-contexts: The service's Smart Client applet is downloaded from one of these sites and operation proceeds normally as described in Section 3.2. Both the service certificate and Smart Client applet are cached to disk by the meta-applet to avoid this bootstrapping mechanism on subsequent accesses. Further, Java object serialization <ref> [36] </ref> is used to cache the Smart Client applet, allowing persistent service state between successive accesses. 4 Moving Services Around the Internet The Smart Clients architecture provides a model for moving some service functionality onto the client machine.
Reference: [37] <author> Eric Jul, Henry Levy, Norman Hutchinson, and An-drew Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Data is paged over to the remote site on demand, rather than being explicitly replicated from outside the application. In this respect, the global name space provided by WebFS provides a similar service as location-independent object references in Emerald <ref> [37] </ref>.
Reference: [38] <author> Eric Dean Katz, Michelle Butler, and Robert Mc-Grath. </author> <title> A Scalable HTTP Server: The NCSA Prototype. </title> <booktitle> In First International Conference on the WorldWide Web, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location. To distribute load in the local area techniques such as HTTP redirect [6] or DNS Aliasing <ref> [11, 38] </ref> can be used to send user requests to individual machines. With HTTP redirect, a front end machine redirects the client to resend the request to an available worker machine. This approach has the disadvantage of adding a round trip message latency to each request. <p> 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users <ref> [31, 38, 6, 11, 2] </ref>. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet. Perhaps the closest to our work is the recent Active Networks proposal [51].
Reference: [39] <author> James J. Kistler and M. Satyanarayanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Since the choice of coherence semantics implies tradeoffs in performance, consistency, and availability, WebFS provides application-controllable and dynamically adaptable cache coherence policies. For example, strict consistency with optimistic reinte-gration could be used for files shared between two geographically distributed sites implementing a service <ref> [39, 52] </ref>, while weaker consistency could be used for widely shared files at client machines. As another example, to support service migration, WebFS may initially use large block sizes or prefetching to reduce cold-start misses and then convert to smaller blocks for minimizing false sharing. <p> able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems <ref> [35, 15, 39, 52, 16, 33, 1] </ref>; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [40] <author> R. Ladin, B. Liskov, L. Shirira, and S. Ghemawat. </author> <title> Providing Availability Using Lazy Replication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 360-391, </pages> <year> 1992. </year>
Reference: [41] <author> L.B. Mummert, M.R. Ebling, and M. Satyanarayanan. </author> <title> Exploiting Weak Connectivity for Mobile File Access. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain Resort, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: A number of cache coherence mechanisms have been proposed for distributed systems, such as leases [30], last writer wins [35], volume reintegration <ref> [41] </ref>, and modified time to live [33]; we plan to evaluate these in the context of the workloads generated by Web services. Another avenue we plan to explore is using IP Multicast [18, 23] to provide update-based cache coherence.
Reference: [42] <author> Matt M. Mutka and Miron Livny. </author> <title> The Available Capacity of a Privately Owned Workstation Environment. Performance Evaluation, </title> <booktitle> 12(4) </booktitle> <pages> 269-84, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: pages at the proper time. 6 Related Work We are able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area <ref> [53, 22, 42, 28, 57, 14] </ref>; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [43] <author> Netscape Communications Corporation. </author> <title> Netscape Navigator, </title> <note> 1994. http://www.netscape.com. </note>
Reference-contexts: as the IRS near April 15th, should buy only enough local hardware to handle the typical demand and dynamically recruit extra hardware resources over the Internet to handle peak loads. 3.1 Current Approaches Today, some popular services such as the Alta Vista search engine [21] or the Netscape home page <ref> [43] </ref> are geographically distributed but replicated manu-ally by the service provider. Load balancing across the wide area is achieved by instructing users to access a particular mirror site based on their location.
Reference: [44] <author> Vern Paxon. </author> <title> End-To-End Routing Behavior in the Internet. </title> <booktitle> In Proceedings of the ACM SIGCOMM '96 Conference on Communications Architectures and Protocols, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: It does not matter if the service is working if the client cannot access it because of router or DNS problems. As a motivating example, one study <ref> [44] </ref> found that the probability of encountering a major Internet routing pathology was between 1.5% and 3.4%, and that the failure rate may increase with increasing Internet use. * Cheap incremental scalability: To make it easy to create new services, it is crucial to minimize the initial hardware and software investment
Reference: [45] <author> G. Popek, B. Walker, J. Chow, D. Edwards, C. Kline, G. Rudisin, and G. Thiel. </author> <title> LOCUS: A Network Transparent, High Reliability Distributed System. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 169-177, </pages> <month> December </month> <year> 1981. </year>
Reference: [46] <author> R. L. Rivest, A. Shamir, and L. Adelman. </author> <title> A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. </title> <journal> In Communications of the ACM, </journal> <volume> volume 21, </volume> <month> February </month> <year> 1978. </year>
Reference-contexts: In WebOS, we leverage work in wide area distributed system authentication and ac cess control <ref> [20, 46, 49, 27, 12, 55, 26] </ref> to build ac-cess control lists for access to files in the global name space. Individuals are uniquely identified by a public key, allowing for unique identities across organizational boundaries. <p> context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems <ref> [20, 46, 49, 27, 12, 55, 26] </ref>; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2]. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet.
Reference: [47] <author> M. Satyanarayanan, H. Mashburn, P. Kumar, D. Steere, and J. Kistler. </author> <title> Lightweight Recoverable Virtual Memory. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 33-58, </pages> <month> February </month> <year> 1994. </year>
Reference: [48] <author> D. Scales and M. Lam. </author> <title> Transparent Fault Tolerance for Parallel Applications on Networks of Workstaions. </title> <booktitle> In Proceedings of the 1996 USENIX Summer Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference: [49] <author> Jennifer G. Steiner, B. Clifford Neuman, and Jeffrey I. Schi ller. </author> <title> Kerberos: An Authentication Service for Open Network Systems. </title> <booktitle> In Proceedings of the 1988 USENIX Conference, </booktitle> <month> March </month> <year> 1988. </year>
Reference-contexts: In WebOS, we leverage work in wide area distributed system authentication and ac cess control <ref> [20, 46, 49, 27, 12, 55, 26] </ref> to build ac-cess control lists for access to files in the global name space. Individuals are uniquely identified by a public key, allowing for unique identities across organizational boundaries. <p> context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems <ref> [20, 46, 49, 27, 12, 55, 26] </ref>; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2]. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet.
Reference: [50] <author> U.S. </author> <title> Geological Survey. Latest Quake Information. </title> <address> http://quake.usgs.gov/QUAKES/CURRENT/- current.html, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: equally crucial for the service to be able to add hardware resources as the service becomes more popular. * Graceful burst behavior: The aggregate behavior of millions of clients is highly bursty; for example, the USGS web site was effectively unusable for hours after a recent (small) Northern California earthquake <ref> [50] </ref>. Bursty client behavior requires server software to be able dynamically recruit resources over the Internet. In addition, burstiness puts a premium on adapting in advanceusing idle time to reconfigure the system to better handle any impending spikes in demand.
Reference: [51] <author> D. Tennenhouse and D. Wetherall. </author> <title> Towards an Active Network Architecture. </title> <booktitle> In ACM SIGCOMM Computer Communication Review, </booktitle> <pages> pages 5-18, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet. Perhaps the closest to our work is the recent Active Networks proposal <ref> [51] </ref>. Active Networks moves computing into the Internet by modifying Internet routers to be dynamically programmable, either at the connection or the packet level. The goal is to make it easier to extend network protocols to provide new services, such as minimizing network bandwidth consumed by multicast video streams.
Reference: [52] <author> Douglas B. Terry, Marvin M. Theimer, Karin Pe-tersen, Alan J. Demers, Mike J. Spreitzer, and Carl H. Hauser. </author> <title> Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <month> Decem-ber </month> <year> 1995. </year>
Reference-contexts: Since the choice of coherence semantics implies tradeoffs in performance, consistency, and availability, WebFS provides application-controllable and dynamically adaptable cache coherence policies. For example, strict consistency with optimistic reinte-gration could be used for files shared between two geographically distributed sites implementing a service <ref> [39, 52] </ref>, while weaker consistency could be used for widely shared files at client machines. As another example, to support service migration, WebFS may initially use large block sizes or prefetching to reduce cold-start misses and then convert to smaller blocks for minimizing false sharing. <p> able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems <ref> [35, 15, 39, 52, 16, 33, 1] </ref>; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [53] <author> Marvin Theimer, K. Landtz, and David Cheriton. </author> <title> Pre-emptable Remote Execution Facilities for the V System. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: pages at the proper time. 6 Related Work We are able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area <ref> [53, 22, 42, 28, 57, 14] </ref>; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
Reference: [54] <author> Amin Vahdat, Paul Eastham, and Thomas Ander-son. WebFS: </author> <title> A Global Cache Coherent File System. </title> <note> See http://www.cs.berkeley.edu/ vahdat/www6/- www6.html, 1996. </note>
Reference-contexts: global cache coherent file system to enable services to name, access, and modify shared state, (ii) a web virtual machine to safely execute any programs needed by the service, and (iii) an authentication model allowing secure access to private service state (data and executables). 4.1 Global Cache Coherent Filesystem WebFS <ref> [54] </ref> is the initial prototype of a URL-based cache coherent file system. WebFS allows UNIX programs to take URLs (and URLs in a pathname syntax) in place of conventional file names (e.g., lpr /http/www.cs.berkeley.edu/ps/*). <p> Both the last-writer wins and the multi-cast update/invalidate coherence policies have been implemented in WebFS <ref> [54] </ref>. We also plan to investigate transparent result caching. HTTP servers translate some URLs into requests to dynamically generate a Web page.
Reference: [55] <author> Edward Wobber, Martin Abadi, Michael Burrows, and Butler Lampson. </author> <title> Authentication in the Taos Operating System. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 256-269, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: In WebOS, we leverage work in wide area distributed system authentication and ac cess control <ref> [20, 46, 49, 27, 12, 55, 26] </ref> to build ac-cess control lists for access to files in the global name space. Individuals are uniquely identified by a public key, allowing for unique identities across organizational boundaries. <p> context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area [53, 22, 42, 28, 57, 14]; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems <ref> [20, 46, 49, 27, 12, 55, 26] </ref>; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2]. In this section, we focus our discussion on efforts to exploit computing and storage resources of the Internet.
Reference: [56] <author> Chad Yoshikawa, Brent Chun, Paul Eastham, Amin Vahdat, Thomas Anderson, and David Culler. </author> <title> Using Smart Clients to Build Scalable Services. </title> <booktitle> In Proceedings of the USENIX Technical Conference, </booktitle> <month> Jan-uary </month> <year> 1997. </year>
Reference-contexts: Further, because clients cache hostname to IP address mappings, a single server can become overloaded with multiple requests while other servers remain relatively idle [19]. 3.2 Smart Clients In WebOS, we address the shortcomings of existing solutions for scalable service access through the Smart Client architecture <ref> [56] </ref>. Smart Clients allow service-specific extensions to be dynamically loaded into the client to provide tracking of the mobile service, load balancing among individual servers, and fault transparency to end users.
Reference: [57] <author> Sognian Zhou, Jingwen Wang, Xiaohn Zheng, and Pierre Delisle. </author> <title> Utopia: A Load Sharing Facility for Large, Heterogeneous Distributed Computing Systems. </title> <type> Technical Report CSRI-257, </type> <institution> University of Toronto, </institution> <year> 1992. </year>
Reference-contexts: pages at the proper time. 6 Related Work We are able to leverage and evaluate a huge research literature in the context of Web services, including: models for building fault tolerant applications [4, 8, 45, 34, 9, 40, 7, 17, 31, 47, 10, 48]; process management across the local area <ref> [53, 22, 42, 28, 57, 14] </ref>; wide area file systems [35, 15, 39, 52, 16, 33, 1]; wide area security systems [20, 46, 49, 27, 12, 55, 26]; and mechanisms for hiding fault tolerance, load balancing, and dynamic relocation from end-users [31, 38, 6, 11, 2].
References-found: 57

