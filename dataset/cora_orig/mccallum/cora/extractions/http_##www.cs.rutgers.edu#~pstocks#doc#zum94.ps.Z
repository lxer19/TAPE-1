URL: http://www.cs.rutgers.edu/~pstocks/doc/zum94.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~pstocks/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: davec j phil @cs.uq.oz.au  
Title: A tale of two paradigms: Formal methods and software testing  
Author: D. Carrington and P. Stocks 
Address: 4072, Australia  
Affiliation: Software Verification Research Centre The University of Queensland Queensland  
Abstract: There are two camps of software developers: formal methods advocates battling against traditionalist supporters of software testing and assessment metrics. Surely, as Turing observed, we will (must) never do away with testing in some form. But clearly, formal methods cannot be ignored, and must be the basis of quality assurance in some form. Important impacts of specifications on testing are in test selection, test oracles, and analysis of test suites and theoretical results of testing. We examine uses of formal specifications in software testing, particularly, roles of Z specifications in software testing. We also present our unifying framework for specification-based testing, which is founded on Z.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amla N, Ammann P. </author> <title> Using Z specifications in category partition testing. </title> <booktitle> In Proceedings of COMPASS 1992, the Seventh Annual Conference on Computer Assurance, </booktitle> <pages> pp 3-10, </pages> <year> 1992. </year>
Reference-contexts: It is a structured strategy for deriving tests. Obviously, it is much simpler to apply category partitioning to formal specifications (especially model-based specifications) because all the considerations that have to be tediously extracted from a natural language specification are spelled out formally. This is the thrust of <ref> [1] </ref> and [10]. This area is somewhat disappointing because no special connection to Z specifications is made, especially how knowledge of Z could lead to superior test selection and more complete test suites. Conformance testing Cusack and Wezeman [3] derive labelled transition systems from Object-Z specifications 2 .
Reference: [2] <author> Brien SM, </author> <title> Nicholls JE. Z base standard version 1.0. </title> <type> Technical report, </type> <institution> Programming Research Group, Oxford University Computing Laboratory, Oxford University, </institution> <year> 1992. </year>
Reference-contexts: Also, test suites derived using different strategies can be compared for overlap and performance, to give insight into which strategies are better in which circumstances. 3 Framework overview 4 The goal is to provide a generic and flexible framework for specification-based testing. The formal specification notation Z <ref> [15, 2] </ref> is used as a test description language in the framework. There is no dependence between the notation used in the framework and the notation used in the specification from which tests will be derived.
Reference: [3] <author> Cusack E, Wezeman C. </author> <title> Deriving tests for objects specified in Z. </title> <editor> In Bowen JP, Nicholls JE (eds), </editor> <booktitle> Z User Workshop. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This is the thrust of [1] and [10]. This area is somewhat disappointing because no special connection to Z specifications is made, especially how knowledge of Z could lead to superior test selection and more complete test suites. Conformance testing Cusack and Wezeman <ref> [3] </ref> derive labelled transition systems from Object-Z specifications 2 .
Reference: [4] <author> Dick J, Faivre A. </author> <title> Automatic partition analysis of VDM specifications. </title> <type> Technical Report RAD/DMA/92027, </type> <institution> Research and Advanced Development, Bull Systems Products, BULL S.A., </institution> <address> Rue Jean Jaures, 78340 Les Clayes-sous-Bois, France, </address> <year> 1992. </year>
Reference-contexts: suggests an approximation measure of software quality by measuring the difference between specification and implementation in the output domain weighted by the probability of the inputs occurring. 2.2 Dick and Faivre The work of Dick and Faivre is a major contribution to the use of formal methods in software testing <ref> [4, 5] </ref>. Though their work uses VDM, their ideas are applicable to all model-based specification notations. Selecting test data A standard strategy in testing is partition testing, where the input space is partitioned into sub-domains, and one test is drawn from each sub-domain.
Reference: [5] <author> Dick J, Faivre A. </author> <title> Automating the generation and sequencing of test cases from model-based specifications. </title> <editor> In Woodcock JCP, Larsen PG (eds), </editor> <title> FME'93 Industrial Strength Formal Methods, </title> <booktitle> Lecture Notes in Computer Science 670, </booktitle> <pages> pp 268-284. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: suggests an approximation measure of software quality by measuring the difference between specification and implementation in the output domain weighted by the probability of the inputs occurring. 2.2 Dick and Faivre The work of Dick and Faivre is a major contribution to the use of formal methods in software testing <ref> [4, 5] </ref>. Though their work uses VDM, their ideas are applicable to all model-based specification notations. Selecting test data A standard strategy in testing is partition testing, where the input space is partitioned into sub-domains, and one test is drawn from each sub-domain. <p> 2 validTriangle ^ #fx?; y?; z?g = 3] CE inv b= [VIS Classify j (x?; y?; z?) =2 validTriangle] fCE equ ; CE iso ; CE sca ; CE inv g = TTH Classify (VIS Classify ; cause effect) Our next strategy uses the partition analysis of Dick and Faivre <ref> [5] </ref>. This reduces mathematical expressions representing operations or existing test templates to Disjunctive Normal Form (DNF).
Reference: [6] <author> Duke R, King P, Rose G, Smith G. </author> <title> The Object-Z specification language version 1. </title> <type> Technical Report 91-1, </type> <institution> Software Verification Research Centre, The University of Queensland, Queensland 4072, Australia, </institution> <year> 1991. </year>
Reference-contexts: Details of the framework are discussed in the next section. The framework is mainly concerned with structuring test 2 Object-Z is an object-oriented extension to Z developed at the University of Queensland <ref> [6] </ref>. information, but we have achieved some results in other specification-based testing areas. Selecting test data We advocate using as many testing strategies as desired or possible, since no one strategy is better than all the others. Our framework is a vehicle for using strategies.
Reference: [7] <author> Hall PAV. </author> <title> Towards testing with respect to formal specifications. </title> <booktitle> In Second IEE/BCS Conference on Software Engineering 88, </booktitle> <pages> pp 159-163. </pages> <publisher> IEE, </publisher> <year> 1988. </year>
Reference-contexts: Selecting test data In <ref> [7] </ref>, a general approach is used to derive tests from Z specifications. Simple partitions of the input space are constructed by examining the obvious divisions of input defined in the predicates of operations. This approach is highly structured, but not rigorous. <p> This approach is highly structured, but not rigorous. Hall further discusses problems that may arise when checking the state of the system and indicates a preference for algebraic thinking in this regard. Evaluating tests Some preliminary ideas on test evaluation found in <ref> [7] </ref> form some of the basis for a later paper [8] examining the relationship between specifications and testing in the context of what is learned about software by its performance on a test suite. The contrast lies between deducing software correctness and between inducing software correctness based on test results.
Reference: [8] <author> Hall PAV. </author> <title> Relationship between specifications and testing. </title> <journal> Information and Software Technology, </journal> <volume> 33(1) </volume> <pages> 47-52, </pages> <year> 1991. </year>
Reference-contexts: Hall further discusses problems that may arise when checking the state of the system and indicates a preference for algebraic thinking in this regard. Evaluating tests Some preliminary ideas on test evaluation found in [7] form some of the basis for a later paper <ref> [8] </ref> examining the relationship between specifications and testing in the context of what is learned about software by its performance on a test suite. The contrast lies between deducing software correctness and between inducing software correctness based on test results.
Reference: [9] <author> Hayes IJ. </author> <title> Specification directed module testing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(1) </volume> <pages> 124-133, </pages> <year> 1986. </year>
Reference-contexts: The labelled transition systems are concerned with the external behaviour of the specification and the CO-OP method [19] is used to derive canonical testers from the transition systems which test conformance of the external behaviours of the implementations to the specifications. Oracles Hayes <ref> [9] </ref> shows how oracle procedures can be derived from Z specifications of abstract data types to check invariants, pre-conditions, and the input-output relationship.
Reference: [10] <author> Laycock G. </author> <title> Formal specification and testing: A case study. </title> <journal> Journal of Software Testing, Verification and Reliability, </journal> <volume> 2(1) </volume> <pages> 7-23, </pages> <year> 1992. </year>
Reference-contexts: It is a structured strategy for deriving tests. Obviously, it is much simpler to apply category partitioning to formal specifications (especially model-based specifications) because all the considerations that have to be tediously extracted from a natural language specification are spelled out formally. This is the thrust of [1] and <ref> [10] </ref>. This area is somewhat disappointing because no special connection to Z specifications is made, especially how knowledge of Z could lead to superior test selection and more complete test suites. Conformance testing Cusack and Wezeman [3] derive labelled transition systems from Object-Z specifications 2 .
Reference: [11] <author> Myers GJ. </author> <title> The Art of Software Testing. Business data processing. </title> <address> Wiley--Interscience, </address> <year> 1979. </year>
Reference-contexts: This particular case study is well-known in the testing community <ref> [11] </ref>. The required program is to input three natural numbers and determine whether these values can be the sides of a triangle, and if so, what type of triangle (equilateral, isosceles or scalene). Our first task is to create a Z specification of the required program. <p> One option would be to generate only the four test templates corresponding to the cause-effect strategy. Instantiating these templates produces test-cases that check that all four outcomes are able to be generated by the software under test. Myers <ref> [11] </ref> uses this example to demonstrate the complexities of software testing, indicating a wide range of cases that should be tested, and expecting readers not to guess many of them.
Reference: [12] <author> Ostrand TJ, Balcer MJ. </author> <title> The category-partition method for specifying and generating functional tests. </title> <journal> Communications of the ACM, </journal> <volume> 31(6) </volume> <pages> 676-686, </pages> <year> 1988. </year>
Reference-contexts: This approach assumes that operation sequencing information is available and requires substantial, but very worthwhile, extra development effort in defining the various mappings. 2.4 Extras There are few other results in Z-based testing. Category partitioning Category partitioning is a testing strategy developed by Ostrand and Bal-cer <ref> [12] </ref>, and is designed to extract a set of functional tests from a specification (usually informal). It is a structured strategy for deriving tests.
Reference: [13] <author> Richardson DJ, Aha SL, </author> <title> O'Malley TO. Specification-based test oracles for reactive systems. </title> <booktitle> In Proceedings of the 14th International Conference on Software Engineering, </booktitle> <pages> pp 105-118, </pages> <year> 1992. </year>
Reference-contexts: Providing test oracles A quite detailed approach to the important problem of providing test oracles is described in <ref> [13] </ref>. The approach is to construct mappings from the name spaces of the specification and implementation to the name space of the oracle. Usually, the oracle name space is the same as the specification name space.
Reference: [14] <author> Richardson DJ, O'Malley O, Tittle C. </author> <title> Approaches to specification-based testing. </title> <journal> Software Engineering Notes, </journal> <volume> 14(8) </volume> <pages> 86-96, </pages> <year> 1989. </year> <booktitle> Proceedings of the ACM SIGSOFT '89 Third Symposium on Software Testing, Analysis, and Verification (TAV3). </booktitle>
Reference-contexts: Selecting test data Richardson et al. <ref> [14] </ref> examine strategies for selecting tests by extending implementation-based testing techniques to be applicable to formal specifications. Testing strategies are classified into error-based and fault-based.
Reference: [15] <author> Spivey JM. </author> <title> The Z Notation: A Reference Manual. </title> <booktitle> Series in Computer Science. </booktitle> <publisher> Prentice Hall International, </publisher> <address> second edition, </address> <year> 1992. </year>
Reference-contexts: Also, test suites derived using different strategies can be compared for overlap and performance, to give insight into which strategies are better in which circumstances. 3 Framework overview 4 The goal is to provide a generic and flexible framework for specification-based testing. The formal specification notation Z <ref> [15, 2] </ref> is used as a test description language in the framework. There is no dependence between the notation used in the framework and the notation used in the specification from which tests will be derived.
Reference: [16] <author> Stocks P, Carrington DA. </author> <title> Test template framework: A specification-based testing case study. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA'93), </booktitle> <pages> pp 11-18, </pages> <year> 1993. </year>
Reference-contexts: This is preliminary work on data refinement and is concerned with demonstrating that the more concrete specification of the data type implements the abstract specification of the data type. 2.5 Stocks and Carrington We have developed a framework for conducting specification-based testing, in which Z plays an integral role <ref> [16, 17] </ref>. Details of the framework are discussed in the next section. The framework is mainly concerned with structuring test 2 Object-Z is an object-oriented extension to Z developed at the University of Queensland [6]. information, but we have achieved some results in other specification-based testing areas. <p> The leaves of the resulting tree represent the final test data. Instantiation templates for these templates may be derived by restricting the templates so that there is only one possible instance. 4 This overview of our framework is drawn from <ref> [16] </ref>. We introduce the generic set of testing strategies [STRATEGY] and for each operation, Op, we define the valid input space. VIS Op b= pre Op Since all the templates are subsets of the VIS, we can define a type synonym for templates to aid readability.
Reference: [17] <author> Stocks P, Carrington DA. </author> <title> Test templates: A specification-based testing framework. </title> <booktitle> In Proceedings of the 15th International Conference on Software Engineering, </booktitle> <pages> pp 405-414, </pages> <year> 1993. </year>
Reference-contexts: This is preliminary work on data refinement and is concerned with demonstrating that the more concrete specification of the data type implements the abstract specification of the data type. 2.5 Stocks and Carrington We have developed a framework for conducting specification-based testing, in which Z plays an integral role <ref> [16, 17] </ref>. Details of the framework are discussed in the next section. The framework is mainly concerned with structuring test 2 Object-Z is an object-oriented extension to Z developed at the University of Queensland [6]. information, but we have achieved some results in other specification-based testing areas. <p> Secondly, more information about the final implementation is introduced in stages, so that additional tests due to increased knowledge of structure are required in small manageable amounts, which greatly simplifies structural, or white-box, testing. Further discussion of these points can be found in <ref> [17, 18] </ref>. 5.2 Testing practices and formal methods Validation of a formal specification is important because of the central role of a specification. Several methods have been proposed for validation, including proving properties of the specification and prototyping.
Reference: [18] <author> Stocks PA. </author> <title> Applying Formal Methods to Software Testing. </title> <type> PhD thesis, </type> <institution> The University of Queensland, </institution> <year> 1993. </year>
Reference-contexts: This is valuable while fully formal development methods are not widely used and even then, test suites will allow independent checks of correct implementation. 1 We restrict ourselves to Z here because it is of most interest in this forum. Other specification-based testing work is similarly discussed in <ref> [18] </ref>. 2. The process of generating test-cases from a formal specification is a form of analysis that can assist validation of the specification. Validation is important and difficult since formal techniques cannot ensure the required consistency between the user's informal requirements and the formal specification. <p> Secondly, more information about the final implementation is introduced in stages, so that additional tests due to increased knowledge of structure are required in small manageable amounts, which greatly simplifies structural, or white-box, testing. Further discussion of these points can be found in <ref> [17, 18] </ref>. 5.2 Testing practices and formal methods Validation of a formal specification is important because of the central role of a specification. Several methods have been proposed for validation, including proving properties of the specification and prototyping.
Reference: [19] <author> Wezeman CD. </author> <title> The CO-OP method for compositional derivation of canonical testers. </title> <editor> In Brinksma E, Scollo G, Vissers CA (eds), </editor> <title> Protocol Specification, Testing and Verification IX. </title> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference-contexts: Conformance testing Cusack and Wezeman [3] derive labelled transition systems from Object-Z specifications 2 . The labelled transition systems are concerned with the external behaviour of the specification and the CO-OP method <ref> [19] </ref> is used to derive canonical testers from the transition systems which test conformance of the external behaviours of the implementations to the specifications. Oracles Hayes [9] shows how oracle procedures can be derived from Z specifications of abstract data types to check invariants, pre-conditions, and the input-output relationship.
References-found: 19

