URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTSS-96a.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/real-time.html
Root-URL: http://www.cs.unc.edu
Email: (wahab@cs.odu.edu).  (jeffay@cs.unc.edu).  (sanjoy@cs.uvm.edu).  (johannes@cs.wisc.edu).  (plaxton@cs.utexas.edu).  
Title: A Proportional Share Resource Allocation Algorithm for Real-Time, Time-Shared Systems  
Author: Ion Stoica Hussein Abdel-Wahab Kevin Jeffay Sanjoy K. Baruah Johannes E. Gehrke C. Greg Plaxton k 
Address: Norfolk, VA 23529-0162  Chapel Hill, Chapel Hill, NC 27599-3175,  Vermont, Burlignton, VT 05405,  Madison, WI 53706-1685  Austin, Austin, TX 78712-1188  
Affiliation: Dept. of CS, Old Dominion Univ.,  of CS, Univ. of North Carolina at  Dept. of CS, Univ. of  -Dpt. of CS, Univ. of Wisconsin-Madison,  Dpt. of CS, Univ. of Texas at  
Note: Supported by NSF grant CCR 95-9313857.  Supported by grant from the IBM Intel corps and NSF grant CCR 95-10156. Dpt.  Supported by NSF under Research Initiation Award CCR-9596282.  k Supported by NSF grant CCR-9504145, and the Texas Advanced Research Program under grant No. ARP-93-00365-461.  
Abstract: We propose and analyze a proportional share resource allocation algorithm for realizing real-time performance in time-shared operating systems. Processes are assigned a weight which determines a share (percentage) of the resource they are to receive. The resource is then allocated in discrete-sized time quanta in such a manner that each process makes progress at a precise, uniform rate. Proportional share allocation algorithms are of interest because (1) they provide a natural means of seamlessly integrating real- and non-real-time processing, (2) they are easy to implement, (3) they provide a simple and effective means of precisely controlling the real-time performance of a process, and (4) they provide a natural mean of policing so that processes that use more of a resource than they request have no ill-effect on well-behaved processes. We analyze our algorithm in the context of an idealized system in which a resource is assumed to be granted in arbitrarily small intervals of time and show that our algorithm guarantees that the difference between the service time that a process should receive in the idealized system and the service time it actually receives in the real system is optimally bounded by the size of a time quantum. In addition, the algorithm provides support for dynamic operations, such as processes joining or leaving the competition, and for both fractional and non-uniform time quanta. As a proof of concept we have implemented a prototype of a CPU scheduler under FreeBSD. The experimental results shows that our implementation performs within the theoretical bounds and hence supports real-time execution in a general purpose operating system. fl Supported by GAANN fellowship. Dept. of CS, Old Dominion Univ., Norfolk, VA 23529-0162 (stoica@cs.odu.edu).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. K. Baruah, J. E. Gehrke and C. G. Plaxton, </author> <title> "Fast Scheduling of Periodic Tasks on Multiple Resources", </title> <booktitle> Proc. of the 9th Int. Par. Proc. Symp., </booktitle> <month> April </month> <year> 1995, </year> <pages> pp. 280-288. </pages>
Reference-contexts: This simplifies the implementation and eliminates the need to keep an event queue. It is worth mentioning that unlike other previous approximations [5], ours guarantees optimal lag bounds. Besides the class of fair queuing algorithms, a significant number of other proportional share algorithms have recently been developed <ref> [1, 9, 12, 16] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system. <p> Besides the class of fair queuing algorithms, a significant number of other proportional share algorithms have recently been developed [1, 9, 12, 16]. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton <ref> [1] </ref> achieves constant lag bounds in a static system. The idea of applying fair queueing algorithms to processor scheduling was first suggested by Parekh in [11].
Reference: [2] <author> S. K. Baruah, J. E. Gehrke and C. G. Plaxton, </author> <title> "Fair OnLine Scheduling of a Dynamic Set of Tasks on a Single Resource", </title> <type> Technical Report UTCS-TR-96-03, </type> <institution> Dpt. of CS, Univ. of Texas at Austin, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: The original problem, an abstraction of diplomatic protocols, was stated in terms of selecting a union chairman every year, such that the accumulated number of chairmen from each state (of the union) to be proportional to its weight. As shown in <ref> [2] </ref>, Tijdeman's results can be easily applied to solve the proportional share allocation problem. In the general setting, the resource is allocated in fixed time quanta, while the clients' shares may change at the beginning of every time quantum. In this way dynamic operation can be easily accommodated. <p> We note that two similar algorithms were independently developed (in parallel to our original work [13]) by Bennett and Zhang in the context of allocating bandwidth in communication networks [3], and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta <ref> [2] </ref>. In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. First, by "decoupling" the request size from the size of a time quantum we generalize the previous known theoretical results [10]. <p> original work [13]) by Bennett and Zhang in the context of allocating bandwidth in communication networks [3], and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta <ref> [2] </ref>. In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. First, by "decoupling" the request size from the size of a time quantum we generalize the previous known theoretical results [10]. Moreover, our analysis can be easily extended to preemptive systems, as well.
Reference: [3] <author> J. C. R. Bennett and H. Zhang, </author> <title> "WF 2 Q : Worst-case Fair Queueing", </title> <booktitle> Proc. of INFOCOM'96, </booktitle> <address> San-Francisco, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: In particular, they have shown that no packet is serviced T max latter than it would have been serviced in the fluid-flow system, where T max represents the time to transmit a packet of maximum size. However, as shown in <ref> [3, 13, 18] </ref>, the lag bound can be as large as O (n), where n represents the number of active sessions (clients) in the system. <p> We note that two similar algorithms were independently developed (in parallel to our original work [13]) by Bennett and Zhang in the context of allocating bandwidth in communication networks <ref> [3] </ref>, and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta [2]. In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. <p> [13]) by Bennett and Zhang in the context of allocating bandwidth in communication networks <ref> [3] </ref>, and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta [2]. In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. First, by "decoupling" the request size from the size of a time quantum we generalize the previous known theoretical results [10]. Moreover, our analysis can be easily extended to preemptive systems, as well.
Reference: [4] <author> A. Demers, S. Keshav and S. Shenkar, </author> <title> "Analysis and Simulation of a Fair Queueing Algorithm", </title> <journal> Journal of Internet-working Research & Experience, </journal> <month> October </month> <year> 1990, </year> <pages> pp. 3-12. </pages>
Reference-contexts: Another reason is that some operations cannot be interrupted, i.e., once 1 A similar model was used by Demers et al <ref> [4] </ref> in studying fair-queuing algorithms in communication networks. started they must complete in the same time quantum. For example, once a communication switch begins to send a packet of one session, it cannot serve any other session until the entire packet is sent. <p> Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks <ref> [4, 5, 10] </ref>, and general purpose proportional share algorithms, such as stride scheduling [17, 18]. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments <ref> [4] </ref>. Since in practice a packet transmission cannot be preempted, the authors proposed an algorithm, called Packet Fair Queueing (PFQ), in which the packets are serviced in the order in which they would finish in the corresponding fluid-flow system (i.e., in the increasing order of their virtual deadlines).
Reference: [5] <author> S. J. Golestani, </author> <title> "A Self-Clocked Fair Queueing Scheme for Broadband Applications", </title> <booktitle> Proc. of INFOCOM'94, </booktitle> <month> April </month> <year> 1994, </year> <pages> pp. 636-646. </pages>
Reference-contexts: Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks <ref> [4, 5, 10] </ref>, and general purpose proportional share algorithms, such as stride scheduling [17, 18]. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> As a solution, Golestani has proposed a new algorithm, called Self-Clocked Fair Queueing (SCFQ), in which the virtual time is updated when the client joins/leaves the competition in the real system, and not in the idealized one <ref> [5] </ref>. Although this scheme can be more efficiently implemented, this does not come for free: the lag bounds increase to within a factor of two of the ones guaranteed by PFQ. <p> This simplifies the implementation and eliminates the need to keep an event queue. It is worth mentioning that unlike other previous approximations <ref> [5] </ref>, ours guarantees optimal lag bounds. Besides the class of fair queuing algorithms, a significant number of other proportional share algorithms have recently been developed [1, 9, 12, 16]. <p> Unfortunately, this solution has two major drawbacks. First, in many situations, such as scheduling incoming packets in a high speed networking switch, maintaining the events in the fluid-flow system is too expensive in practice <ref> [5] </ref>. Second and more important, this solution assumes implicitly that the service time that a client will use is known in advance.
Reference: [6] <author> P. Goyal, X. Guo and H. M. Vin, </author> <title> "A Hierarchical CPU Scheduler for Multimedia Operating Systems", </title> <booktitle> to appear in Proc. of the 2nd OSDI Symp., </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Moreover, stride scheduling provides support for both uniform and non-uniform quanta. Goyal, Guo and Vin have proposed a new algorithm, called Start-time Fair Queueing (SFQ), for hierarchically partitioning of a CPU among various application classes <ref> [6] </ref>. While this algorithm supports both uniform and non-uniform quanta, the delay bound (and implicitly the lag) increases linearly with the number of clients. However, we note that when the number of clients is small, in terms of delay, this algorithm can be superior to classical fair queueing algorithms.
Reference: [7] <author> S. J. Le*er, M. K. McKusick, M. J. Karels and J. S. Quar-terman. </author> <title> "The Design and Implementation of the 4.3BSD UNIX Operating System," </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The scheduler time slice (quantum), and the duration of any client's request were set to 10 ms. Excepting the CPU scheduler, we did not alter the FreeBSD kernel. 5 Our scheduler coexists with the original FreeBSD scheduler <ref> [7] </ref>.
Reference: [8] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment", </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, No. 1, </volume> <month> January </month> <year> 1973, </year> <pages> pp. 46-61. </pages>
Reference: [9] <author> U. Maheshwari, </author> <title> "Charged-based Proportional Scheduling", </title> <type> Technical Memorandum MIT/LCS/TM-529, </type> <institution> Laboratory for CS, MIT, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: This simplifies the implementation and eliminates the need to keep an event queue. It is worth mentioning that unlike other previous approximations [5], ours guarantees optimal lag bounds. Besides the class of fair queuing algorithms, a significant number of other proportional share algorithms have recently been developed <ref> [1, 9, 12, 16] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system.
Reference: [10] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A Generalized Processor Sharing Approach To Flow Control in Integrated Services Networks-The Single Node Case", </title> <journal> ACM/IEEE Trans. on Networking, </journal> <volume> Vol. 1, No. 3, </volume> <year> 1992, </year> <pages> pp. 344-357. </pages>
Reference-contexts: Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks <ref> [4, 5, 10] </ref>, and general purpose proportional share algorithms, such as stride scheduling [17, 18]. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> By using the concept of virtual time, previously introduced by Zhang [19], Parekh and Gallager have analyzed PFQ when the input traffic stream conforms to the leaky-bucket constraints <ref> [10, 11] </ref>. In particular, they have shown that no packet is serviced T max latter than it would have been serviced in the fluid-flow system, where T max represents the time to transmit a packet of maximum size. <p> In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. First, by "decoupling" the request size from the size of a time quantum we generalize the previous known theoretical results <ref> [10] </ref>. Moreover, our analysis can be easily extended to preemptive systems, as well. For example, we can derive lag bounds for a fully preemptive system, by simply taking time quanta to be arbitrarily small. <p> This affords a client the possibility of trading between allocation accuracy and scheduling overhead. We formulate our scheduling algorithm in terms of the behavior of an ideal, fluid-flow system that executes clients in a virtual-time time domain <ref> [19, 10] </ref>. Abstractly, the virtual fluid-flow system executes each client for w i real-time time units during each virtual-time time unit. <p> Moreover, when a client with positive lag leaves, the value of virtual-time is updated according to Eq. (14). The following theorem gives the upper bound for the maximum delay of fulfilling a request in an S-system. We note that this result generalizes a previous result of Parekh and Gallager <ref> [10] </ref> which holds for the particular case in which a request is no larger than a time quantum.
Reference: [11] <author> A. K. Parekh, </author> <title> "A Generalized Processor Sharing Approach To Flow Control in Integrated Services Networks", </title> <type> Ph.D Thesis, </type> <institution> Department of EE and CS, MIT, </institution> <year> 1992. </year>
Reference-contexts: By using the concept of virtual time, previously introduced by Zhang [19], Parekh and Gallager have analyzed PFQ when the input traffic stream conforms to the leaky-bucket constraints <ref> [10, 11] </ref>. In particular, they have shown that no packet is serviced T max latter than it would have been serviced in the fluid-flow system, where T max represents the time to transmit a packet of maximum size. <p> Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system. The idea of applying fair queueing algorithms to processor scheduling was first suggested by Parekh in <ref> [11] </ref>.
Reference: [12] <author> I. Stoica, H. Abdel-Wahab, </author> <title> "A new approach to implement proportional share resource allocation", </title> <type> Technical Report TR-95-05, </type> <institution> CS Dpt., Old Dominion Univ., </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: This simplifies the implementation and eliminates the need to keep an event queue. It is worth mentioning that unlike other previous approximations [5], ours guarantees optimal lag bounds. Besides the class of fair queuing algorithms, a significant number of other proportional share algorithms have recently been developed <ref> [1, 9, 12, 16] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system.
Reference: [13] <author> I. Stoica, H. Abdel-Wahab, </author> <title> "Earliest Eligible Virtual Deadline First: A Flexible and Accurate Mechanism for Proportional Share Resource Allocation", </title> <type> Technical Report TR-95-22, </type> <institution> CS Dpt., Old Dominion Univ., </institution> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: In particular, they have shown that no packet is serviced T max latter than it would have been serviced in the fluid-flow system, where T max represents the time to transmit a packet of maximum size. However, as shown in <ref> [3, 13, 18] </ref>, the lag bound can be as large as O (n), where n represents the number of active sessions (clients) in the system. <p> In contrast to the above algorithms, by making use of both virtual eligible times and virtual deadlines, the algorithm we develop herein achieves constant lag bounds, while providing full support for dynamic operations. We note that two similar algorithms were independently developed (in parallel to our original work <ref> [13] </ref>) by Bennett and Zhang in the context of allocating bandwidth in communication networks [3], and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta [2]. <p> In short, a gain for one client translates into a loss for the other active clients. Similarly, when a client with positive lag leaves, this translates into a gain for the remaining clients. The main question here is how to distribute this loss/gain among the remaining clients. In <ref> [13] </ref> we answered this question by distributing it in proportion to the clients' weights. In the remaining of this section we show that the same answer is obtained by approaching the problem from a different angle. <p> Since in the corresponding fluid-flow system the lag of any client is always zero, a simple solution would be to consider the time when the client leaves to be the time when it leaves in the corresponding fluid-flow system, and join operation <ref> [13] </ref>. not in the real system. Unfortunately, this solution has two major drawbacks. First, in many situations, such as scheduling incoming packets in a high speed networking switch, maintaining the events in the fluid-flow system is too expensive in practice [5]. <p> The shaded regions in (a) represents the time intervals during which the system allocates service time to the clients until their lags become zero. In both cases the virtual-time just before a client wants to leave and just after it has actually left are equal. we have shown in <ref> [13] </ref> all the basic operation required to implement the EEVDF algorithm, i.e., inserting and deleting a request, and finding the eligible request with the earliest deadline can be implemented in O (log n), where n represents the number of active clients. <p> Corollary If no request of client k is larger than a time quantum, then at any time t its lag is bounded as follows: q &lt; lag k (t) &lt; q: Finally, we note that according to the following simple lemma (the proof can be found in <ref> [13] </ref>) the bounds given in the above corollary are optimal, i.e., they hold for any proportional share algorithm.
Reference: [14] <author> I. Stoica, H. Abdel-Wahab, K. Jeffay, S. K. Baruah, J. E. Gehrke and C. G. Plaxton, </author> <title> "A Proportional Share Resource Allocation Algorithm for Real-Time, Time-Shared Systems", </title> <type> Technical Report TR-96-38, </type> <institution> CS Dpt., Univ. of North Carolina, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: An important property of the EEVDF algorithm is that at any time the sum of the lags of all active clients is zero (see Lemma 2 in <ref> [14] </ref>). Thus, if a client leaves the competition with a negative lag (i.e., after receiving more service time than it was supposed to), the remaining clients should have received less service time than they were entitled to. <p> By demonstrating that the lag of each client is bounded at all times we conclude that our algorithm is fair. Here we sketch the argument that lags are bounded. The complete proof of each result are given in the extended version of this paper <ref> [14] </ref>. Theorem 1 shows that any request is fulfilled no latter than q time units after its deadline in the corresponding fluid-flow system, where q represents the maximum size of a time quantum.
Reference: [15] <author> R. </author> <title> Tijdeman, "The Chairmain Assignment Problem", </title> <journal> Discrete Mathematics, </journal> <volume> vol. 32, </volume> <year> 1980, </year> <pages> pp. 323-330. </pages>
Reference-contexts: To gether, these properties indicate that our algorithm will provide real-time response guarantees to clients and that with respect to the class of proportional share algorithms, these guarantees are the best possible. 3 Related Work Tijdeman was one of the first to formulate and analyze the proportional share allocation problem <ref> [15] </ref>. The original problem, an abstraction of diplomatic protocols, was stated in terms of selecting a union chairman every year, such that the accumulated number of chairmen from each state (of the union) to be proportional to its weight.
Reference: [16] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> "Lottery Scheduling: Flexible Proportional-Share Resource Management," </title> <booktitle> Proc. of the 1st OSDI Symp., </booktitle> <month> November </month> <year> 1994, </year> <pages> pp. 1-12. </pages>
Reference-contexts: This simplifies the implementation and eliminates the need to keep an event queue. It is worth mentioning that unlike other previous approximations [5], ours guarantees optimal lag bounds. Besides the class of fair queuing algorithms, a significant number of other proportional share algorithms have recently been developed <ref> [1, 9, 12, 16] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system.
Reference: [17] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> "Stride Scheduling: Deterministic Proportional Share Resource Menagement," </title> <type> Technical Memorandum, </type> <institution> MIT/LCS/TM-528, Laboratory for CS, MIT, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks [4, 5, 10], and general purpose proportional share algorithms, such as stride scheduling <ref> [17, 18] </ref>. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> share allocation algorithm, called 2 The difference between fractional and non-uniform quanta is that while in the first case the fraction from the time quantum (that the client will actually use) is assumed to be known in advance, in the non-uniform quanta case this fraction is not known. stride scheduling <ref> [17, 18] </ref>, which can be viewed as a cross-application of fair queueing to the domain of processor scheduling. Stride scheduling relies on the concept of global pass (which is similar to virtual time) to measure the work progress in the system. <p> The only previous known algorithms that address this problem are lottery and stride scheduling <ref> [17, 18] </ref>. However, the lag bounds guaranteed by stride scheduling are as large as O (n), where n represents the number of active clients (being a randomized algorithm, lottery does not guarantee tight bounds). In comparison, our algorithm (described next) guarantees optimal lag bounds of one time quantum. <p> The idea of applying fair queueing algorithms to processor scheduling was first suggested by Parekh in [11]. Waldspurger and Weihl were the first to actually develop and implement such an algorithm (stride scheduling) for processor scheduling <ref> [17, 18] </ref>. 3 Finally, to our best knowledge we are the first to implement and to test a proportional share scheduler which guarantees constant lag bounds. 4 The EEVDF Algorithm In order to obtain access to the resource, a client must issue a request in which it specifies the duration of
Reference: [18] <author> C. A. Waldspurger. </author> <title> "Lottery and Stride Scheduling: Flexible Proportional-Share Resource Management," </title> <type> PhD Thesis, Technical Report, </type> <institution> MIT/LCS/TR-667, Laboratory for CS, MIT, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks [4, 5, 10], and general purpose proportional share algorithms, such as stride scheduling <ref> [17, 18] </ref>. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> In particular, they have shown that no packet is serviced T max latter than it would have been serviced in the fluid-flow system, where T max represents the time to transmit a packet of maximum size. However, as shown in <ref> [3, 13, 18] </ref>, the lag bound can be as large as O (n), where n represents the number of active sessions (clients) in the system. <p> share allocation algorithm, called 2 The difference between fractional and non-uniform quanta is that while in the first case the fraction from the time quantum (that the client will actually use) is assumed to be known in advance, in the non-uniform quanta case this fraction is not known. stride scheduling <ref> [17, 18] </ref>, which can be viewed as a cross-application of fair queueing to the domain of processor scheduling. Stride scheduling relies on the concept of global pass (which is similar to virtual time) to measure the work progress in the system. <p> The only previous known algorithms that address this problem are lottery and stride scheduling <ref> [17, 18] </ref>. However, the lag bounds guaranteed by stride scheduling are as large as O (n), where n represents the number of active clients (being a randomized algorithm, lottery does not guarantee tight bounds). In comparison, our algorithm (described next) guarantees optimal lag bounds of one time quantum. <p> The idea of applying fair queueing algorithms to processor scheduling was first suggested by Parekh in [11]. Waldspurger and Weihl were the first to actually develop and implement such an algorithm (stride scheduling) for processor scheduling <ref> [17, 18] </ref>. 3 Finally, to our best knowledge we are the first to implement and to test a proportional share scheduler which guarantees constant lag bounds. 4 The EEVDF Algorithm In order to obtain access to the resource, a client must issue a request in which it specifies the duration of
Reference: [19] <author> L. Zhang, "VirtualClock: </author> <title> A New Traffic Control Algorithm for Packet-Switched Networks", </title> <journal> ACM Trans. on Comp. Systems, </journal> <volume> vol. 9, no. 2, </volume> <month> May </month> <year> 1991, </year> <pages> pp. 101-124. </pages>
Reference-contexts: By using the concept of virtual time, previously introduced by Zhang <ref> [19] </ref>, Parekh and Gallager have analyzed PFQ when the input traffic stream conforms to the leaky-bucket constraints [10, 11]. <p> This affords a client the possibility of trading between allocation accuracy and scheduling overhead. We formulate our scheduling algorithm in terms of the behavior of an ideal, fluid-flow system that executes clients in a virtual-time time domain <ref> [19, 10] </ref>. Abstractly, the virtual fluid-flow system executes each client for w i real-time time units during each virtual-time time unit.
References-found: 19

