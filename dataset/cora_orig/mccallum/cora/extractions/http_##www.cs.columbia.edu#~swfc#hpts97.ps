URL: http://www.cs.columbia.edu/~swfc/hpts97.ps
Refering-URL: http://www.cs.columbia.edu/~swfc/
Root-URL: http://www.cs.columbia.edu
Email: swfc@cs.columbia.edu  
Title: Recovery for Extended Transaction Models  
Author: Shu-Wie F Chen Calton Pu 
Date: March 24, 1997  
Address: New York NY 10027-7003 USA  Portland OR 97291-1000 USA  
Affiliation: Department of Computer Science Columbia University  Department of Computer Science and Engineering Oregon Graduate Institute  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Philip A. Bernstein and Eric Newcomer. </author> <title> Principles of Transaction Processing. </title> <publisher> Morgan Kauf-mann, </publisher> <year> 1997. </year>
Reference-contexts: 1 Introduction The transaction has emerged as an important paradigm for building reliable distributed information systems <ref> [5, 1] </ref>. Its success stems from its ability to hide the problems of concurrency and failure from both the application programmer and the end user. The atomic transaction model defines simple, flat transactions that guarantee the execution properties of atomicity, consistency, isolation, and durability.
Reference: [2] <author> Shu-Wie F Chen. </author> <title> Recovery for Extended Transaction Models. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <year> 1997. </year>
Reference-contexts: Transaction processing support for atomic transactions has been well-studied and has been implemented in all commercial database systems. In this abstract, we summarize our work on recovery for extended transaction models <ref> [2] </ref>. Our goal is to build flexible and efficient recovery systems to support extended transactions by extending existing atomic TP systems.
Reference: [3] <author> Panos K. Chrysanthis and Krithi Ramamritham. </author> <title> Synthesis of extended transaction models using ACTA. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(3) </volume> <pages> 450-491, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: In designing the transaction states analysis algorithms, we considered those transaction models which allow for the establishment of constraints on transaction outcomes and thus restrict transactions from being unilaterally aborted or committed. We express such constraints using transaction dependencies as defined by ACTA <ref> [3] </ref>. Our algorithms consider the effects of transaction dependencies on recovery: * During normal processing, a transaction scheduler ensures that transaction events (e.g. abort, commit) and transaction dependency establishments do not lead to non-recoverable executions.
Reference: [4] <author> Hector Garcia-Molina and Kenneth Salem. Sagas. </author> <booktitle> In ACM SIGMOD Proceedings, </booktitle> <pages> pages 249-259, </pages> <year> 1987. </year>
Reference-contexts: We have applied the methodology to design and analyze recovery systems for more exotic transaction models, including the split/join [9], cooperative group [6], and sagas <ref> [4] </ref> transaction models. As an example, our methodology produces the recovery system design for the split/join model shown in Figure 3. The solid boxes denote microprotocols required for atomic recovery as well as split/join recovery. The dotted boxes denote microprotocols required solely for split/join.
Reference: [5] <author> Jim Gray and Andreas Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction The transaction has emerged as an important paradigm for building reliable distributed information systems <ref> [5, 1] </ref>. Its success stems from its ability to hide the problems of concurrency and failure from both the application programmer and the end user. The atomic transaction model defines simple, flat transactions that guarantee the execution properties of atomicity, consistency, isolation, and durability.
Reference: [6] <author> Bruce Martin and Claus H. Pederson. </author> <title> Long-lived concurrent activities. </title> <editor> In Ozsu, Dayal, and Valduriez, editors, </editor> <booktitle> Distributed Object Management. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: As base cases, our methodology trivially supports the atomic transaction model and produces recovery systems for the distributed and nested models consistent with commercial implementations. We have applied the methodology to design and analyze recovery systems for more exotic transaction models, including the split/join [9], cooperative group <ref> [6] </ref>, and sagas [4] transaction models. As an example, our methodology produces the recovery system design for the split/join model shown in Figure 3. The solid boxes denote microprotocols required for atomic recovery as well as split/join recovery. The dotted boxes denote microprotocols required solely for split/join.
Reference: [7] <author> Sean W. O'Malley and Larry L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transaction on Computer Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: To this end, we have applied the concept of microprotocols introduced in the x-kernel project <ref> [7] </ref> to define a set of recovery microprotocols that are decompositions of the recovery algorithms which can be combined to implement various recovery functionalities.
Reference: [8] <author> Calton Pu, Tito Autrey, and Andrew Black et al. </author> <title> Optimistic incremental specialization: Streamlining a commercial operating system. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <year> 1995. </year> <month> 5 </month>
Reference-contexts: Alternatively, we can 4 start with a general recovery system that consists of all possible recovery microprotocols and tailor a recovery system for the split/join model using the technique of specialization previously applied to operating systems <ref> [8] </ref> and programming languages [8]. <p> Alternatively, we can 4 start with a general recovery system that consists of all possible recovery microprotocols and tailor a recovery system for the split/join model using the technique of specialization previously applied to operating systems <ref> [8] </ref> and programming languages [8].
Reference: [9] <author> Calton Pu, Gail E. Kaiser, and Norman Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the 14th VLDB Conference, </booktitle> <pages> pages 26-37, </pages> <year> 1988. </year>
Reference-contexts: As base cases, our methodology trivially supports the atomic transaction model and produces recovery systems for the distributed and nested models consistent with commercial implementations. We have applied the methodology to design and analyze recovery systems for more exotic transaction models, including the split/join <ref> [9] </ref>, cooperative group [6], and sagas [4] transaction models. As an example, our methodology produces the recovery system design for the split/join model shown in Figure 3. The solid boxes denote microprotocols required for atomic recovery as well as split/join recovery. The dotted boxes denote microprotocols required solely for split/join.
Reference: [10] <author> Avi Silberschatz, Mike Stonebraker, and Jeff Ullman. </author> <title> Database research: Achievements and opportunities into the 21st century. Report of an NSF Workshop on the Future of Database Systems Research, </title> <month> May 26-27, </month> <year> 1995, 1995. </year> <month> 6 </month>
Reference-contexts: Such an approach has the potential of producing modular implementations of extended recovery systems that do not sacrifice the linear-time performance characteristics of atomic recovery systems. 7 Conclusion Building effective support for extended transactions has been identified as one of the key database research areas leading into the next century <ref> [10] </ref>. In this abstract, we have summarized results in architecture, algorithms, implementation, design methodology, and system designs for recovery for extended transaction models. These contributions support the modular construction of flexible, efficient extended recovery systems through systematic extensions to atomic recovery systems.
References-found: 10

