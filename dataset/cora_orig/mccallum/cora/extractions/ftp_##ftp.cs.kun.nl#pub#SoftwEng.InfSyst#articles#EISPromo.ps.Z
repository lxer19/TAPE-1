URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EISPromo.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: oei@cs.utwente.nl ferikp,efg@cs.kun.nl  
Title: Evolving Information Systems: Meeting the ever-changing environment  
Author: J.L.H. Oei H.A. Proper E.D. Falkenberg 
Address: Toernooiveld, 6525 ED Nijmegen The Netherlands  
Affiliation: 1 Twente University of Technology 2 University of Nijmegen Faculty of Mathematics and Informatics  
Date: June 14, 1993  
Abstract: Published as: J.L.H. Oei, H.A. Proper, and E.D. Falkenberg. Evolving Information Systems: Meeting the Ever-Changing Environment. Technical Report 92-24, Department of Information Systems, University of Nijmegen, The Netherlands, 1992. To appear in Journal of Information Systems. Abstract To meet the demands of organisations and their ever changing environment, information systems are required which are able to evolve to the same extent as organisations do. Such a system has to support changes of all time- and application-dependent aspects. In this paper, requirements and a conceptual framework for evolving information systems are presented. This framework includes an architecture for such systems, and a revision of the traditional notion of update. Based on this evolutionary notion of update (recording, correction, and forgetting) a state-transition-oriented model on three levels of abstraction (event level, recording level, correction level) is introduced. Some examples are provided to illustrate the conceptual framework for evolving information systems.
Abstract-found: 1
Intro-found: 1
Reference: [Ari91] <author> G. Ariav. </author> <title> Temporally oriented data definitions: Managing schema evolution in temporally oriented databases. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 6 </volume> <pages> 451-467, </pages> <year> 1991. </year>
Reference-contexts: The need for the support of evolution in information systems has already been recognized by others. However, most of them restrict themselves to evolution of only part of the application model, eg. schema evolution ([MS90], <ref> [Ari91] </ref>, [Rod91]). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population) only.
Reference: [BCG + 87] <author> J. Banerjee, H.-T. Chou, J.F. Garza, W. Kim, D. Woels, and N. Ballou. </author> <title> Data Model Issues for Object-Oriented Applications. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(1) </volume> <pages> 3-26, </pages> <year> 1987. </year>
Reference-contexts: In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population) only. Others discuss support of evolution by version management (eg. <ref> [BCG + 87] </ref>, [Kat90], [JMSV92]). The existence of versions assumes a series of replacements of system versions by new ones, thus allowing interruption of the organization processes. In our evolving information systems, however, only one system version exists at any time, capturing the complete history of information recorded as well.
Reference: [BF91] <editor> S. Brinkkemper and E.D. Falkenberg. </editor> <title> Three Dichotomies in the Information System Methodology. </title> <editor> In P.W.G. Bots, H.G. Sol, and I.G. Sprinkhuizen-Kuyper, editors, In-formatiesystemen in beweging. </editor> <publisher> Kluwer Bedrijfswetenschappen, </publisher> <year> 1991. </year> <month> 14 </month>
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [FOP92a] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A Conceptual Framework for Evolving Information Systems. </title> <editor> In H.G. Sol and R.L. Crosslin, editors, </editor> <booktitle> Dynamic Modelling of Information Systems II, </booktitle> <pages> pages 353-375. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: The restriction to a computerized actor performing information system processing activities, corresponds to what has been defined in [Ver89] as an information system in the narrower sense `IS (N)'. In this section, a general architecture for information systems is presented (see also <ref> [FOP92a] </ref>, [FOP92c]), by means of which the distinction between traditional and evolving information systems is explained. The information processor in an information system accepts input messages (requests), which may reflect changes of a state (events) in the universe of discourse, triggering the information processor to perform activities. <p> Application models describing different domains can be `plugged' into the EIS-shell. Furthermore, an EIS-shell has to be designed in such a way that it is independent of any software environment, i.e. independent of any database mananagement system and/or operating system. 3 Update in Evolving Information Systems In <ref> [FOP92a] </ref> and [FOP92c] a conceptual framework for update in evolving information systems has been introduced. This framework has been formalised in [FOP92b]. In this section, the framework is explained and illustrated by means of our running example. First of all, the notion of update in evolving information systems is summarized. <p> A sequence of these application model recording history transitions due to roll-backs is called the application model evolution which is said to take place on the correction level. In the same way corrections requiring the removal or insertion of a recording of an event can be represented. In <ref> [FOP92a] </ref> more examples are given and elaborated. Example 3.3 Suppose in our running example that at 31/01/92, it is detected that Jim did not live independently when he became student at 01/01/90, but that he still lived with his parents.
Reference: [FOP92b] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A Metamodel for Update in Information Systems. </title> <type> Technical Report 92-05, </type> <institution> Department of Information Systems, University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: This framework has been formalised in <ref> [FOP92b] </ref>. In this section, the framework is explained and illustrated by means of our running example. First of all, the notion of update in evolving information systems is summarized.
Reference: [FOP92c] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> Evolving Information Systems: Beyond Temporal Information Systems. </title> <editor> In A.M. Tjoa and I. Ramos, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 92), </booktitle> <pages> pages 282-287, </pages> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Thus, in order to cope with rapidly evolving application domains, information systems are needed which are more flexible than the current generation of information systems are. These information systems, which are able to evolve on-line, are called evolving information systems ([FOP92a], <ref> [FOP92c] </ref>). A further requirement for evolving information systems is, that they do not forget any information ever fed to them (unless they are explicitly asked to do so). This paper discusses the need, the requirements, and a conceptual framework for a generalized evolving information system. <p> The restriction to a computerized actor performing information system processing activities, corresponds to what has been defined in [Ver89] as an information system in the narrower sense `IS (N)'. In this section, a general architecture for information systems is presented (see also [FOP92a], <ref> [FOP92c] </ref>), by means of which the distinction between traditional and evolving information systems is explained. The information processor in an information system accepts input messages (requests), which may reflect changes of a state (events) in the universe of discourse, triggering the information processor to perform activities. <p> Application models describing different domains can be `plugged' into the EIS-shell. Furthermore, an EIS-shell has to be designed in such a way that it is independent of any software environment, i.e. independent of any database mananagement system and/or operating system. 3 Update in Evolving Information Systems In [FOP92a] and <ref> [FOP92c] </ref> a conceptual framework for update in evolving information systems has been introduced. This framework has been formalised in [FOP92b]. In this section, the framework is explained and illustrated by means of our running example. First of all, the notion of update in evolving information systems is summarized.
Reference: [GS86] <author> C. Gane and T. Sarson. </author> <title> Structured System Analysis: Tools and techniques. IST Databooks. </title> <publisher> MacDonald Douglas Corporation, </publisher> <address> St. Louis, </address> <year> 1986. </year>
Reference: [HN93] <author> A.H.M. ter Hofstede and E.R. Nieuwland. </author> <title> Task structure semantics through process algebra. </title> <journal> Software Engineering Journal, </journal> <volume> 8(1) </volume> <pages> 14-20, </pages> <month> January </month> <year> 1993. </year>
Reference: [Hof93] <author> A.H.M. ter Hofstede. </author> <title> Information Modelling in Data Intensive Domains. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1993. </year> <note> (To appear). </note>
Reference: [HPW92a] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Data Modelling in Complex Application Domains. </title> <editor> In P. Loucopoulos, editor, </editor> <booktitle> Proceedings of the Fourth International Conference CAiSE'92 on Advanced Information Systems Engineering, volume 593 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-377, </pages> <address> Manchester, United Kingdom, May 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Many techniques for describing world models distinguish in their language an information structure, a set of constraints defined upon the information structure, and a population of the information structure, conforming to these constraints (eg Entity Relationship Modelling ([Che76]), NIAM ([NH89], [Win90]) or PSM ([HW93], <ref> [HPW92a] </ref>).
Reference: [HPW92b] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal Definition of a Conceptual Language for the Description and Manipulation of Information Models. </title> <type> Technical Report 92/10, </type> <institution> SERC, Software Engineering Research Centre, </institution> <address> Utrecht, The Netherlands, </address> <month> July </month> <year> 1992. </year>
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: cause state transitions on the correction level. 3.1 The event level It is generally assumed that the universe of discourse described in an information system, contains a set of stable states, and that there are a number of actions that result in a change of state (state transitions) (see eg <ref> [HW93] </ref>). The states and state transitions in a universe of discourse are modelled in an information system. The state of an organisation at a particular point of time is modelled by a set of modelling constructs which we call application model elements.
Reference: [JMSV92] <author> M. Jarke, J. Mylopoulos, J.W. Schmidt, and Y. Vassiliou. DAIDA: </author> <title> An Environment for Evolving Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 20(1) </volume> <pages> 1-50, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population) only. Others discuss support of evolution by version management (eg. [BCG + 87], [Kat90], <ref> [JMSV92] </ref>). The existence of versions assumes a series of replacements of system versions by new ones, thus allowing interruption of the organization processes. In our evolving information systems, however, only one system version exists at any time, capturing the complete history of information recorded as well.
Reference: [Kat90] <author> R.H. Katz. </author> <title> Toward a Unified Framework for Version Modelling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <year> 1990. </year>
Reference-contexts: In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population) only. Others discuss support of evolution by version management (eg. [BCG + 87], <ref> [Kat90] </ref>, [JMSV92]). The existence of versions assumes a series of replacements of system versions by new ones, thus allowing interruption of the organization processes. In our evolving information systems, however, only one system version exists at any time, capturing the complete history of information recorded as well.
Reference: [LGN81] <author> M. Lundeberg, G. Goldkuhl, and A. Nilsson. </author> <title> Information Systems Development A Systematic Approach. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1981. </year>
Reference: [MS90] <author> E. McKenzie and R. Snodgrass. </author> <title> Schema Evolution and the Relational Algebra. </title> <journal> Information Systems, </journal> <volume> 15(2) </volume> <pages> 207-232, </pages> <year> 1990. </year>
Reference-contexts: The need for the support of evolution in information systems has already been recognized by others. However, most of them restrict themselves to evolution of only part of the application model, eg. schema evolution (<ref> [MS90] </ref>, [Ari91], [Rod91]). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population) only.
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference-contexts: The language (s) used for specification of the application model are based on the meta model of the information system. Though we can use the same techniques for describing its meta model, in figure 4 the (partial) meta model is described in another modelling technique (NIAM <ref> [NH89] </ref>). t Relat ionship t Entity is-part-of -, l Data set Activity is-input-of a a a is-output-of -! ! ! * j X j Event t React ion Activity triggers - consists-of ? precedes ? J J T Extra Earn ings J T T Scho lar ship J T T Pare
Reference: [OHFB92] <author> J.L.H. Oei, L.J.G.T. van Hemmen, E.D. Falkenberg, and S. Brinkkemper. </author> <title> The Meta Model Hierarchy: A Framework for Information System Concepts and Techniques. </title> <type> Technical Report 92-17, </type> <institution> Department of Information Systems, University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1992. </year> <month> 15 </month>
Reference-contexts: This meta model deals with all conceptual aspects of evolution. In this paper the meta model and the corresponding specification language (s) are assumed to be stable. Changes are restricted to the application model only. Conform the terminology introduced in <ref> [OHFB92] </ref> this means that in this paper we restrict ourselves to information systems supporting first-order evolution. Second-order evolution involves changes of the meta model. This becomes particularly important for large organizations with various sorts of applications, in which furthermore new sorts of applications may become necessary from time to time.
Reference: [PW92] <author> H.A. Proper and Th.P. van der Weide. </author> <title> A General Theory for the Evolution of Applica--tion Models. </title> <type> Technical Report 92-26, </type> <institution> Department of Information Systems, University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: On the basis of this formalisation a prototype of a generalised EIS-shell is being implemented. 4 Schema Evolution in Evolving Information Systems The framework for update in evolving information systems does not yet take the evolution of schemas into consideration. Nevertheless, in [PW93], <ref> [PW92] </ref>, a formal discussion of this topic is provided. In this article we will only provide an example of schema evolution. Consider a rental store for audio records (LP's). In this store a registration is maintained of the songs that are recorded on the available LP's.
Reference: [PW93] <author> H.A. Proper and Th.P. van der Weide. </author> <title> Towards a General Theory for the Evolution of Application Models. In M.E. </title> <editor> Orlowska and M. Papazoglou, editors, </editor> <booktitle> Proceedings of the Fourth Australian Database Conference, Advances in Database Research, </booktitle> <pages> pages 346-362. </pages> <publisher> World Scientific, </publisher> <address> Brisbane, Australia, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Another illustrative example of an evolving application domain, is provided in section 4. A more detailed, and formal, treatise of the notion of schema evolution can be found in <ref> [PW93] </ref>. 5 Given a meta model for evolving information systems, a software environment for these evolving information systems can be developed which is time-invariant and independent of any universe of discourse. Such an environment is called an evolving information system shell (EIS-shell). <p> On the basis of this formalisation a prototype of a generalised EIS-shell is being implemented. 4 Schema Evolution in Evolving Information Systems The framework for update in evolving information systems does not yet take the evolution of schemas into consideration. Nevertheless, in <ref> [PW93] </ref>, [PW92], a formal discussion of this topic is provided. In this article we will only provide an example of schema evolution. Consider a rental store for audio records (LP's). In this store a registration is maintained of the songs that are recorded on the available LP's. <p> The three ER schemata, and the associated action specifications, as discussed above, correspond to three distinct snapshots of an evolving universe of discourse. Several approaches can be taken to the modelling of this evolution (see for a more elaborate discussion <ref> [PW93] </ref>). We consider evolution, or rather the time axis, of an application model as a separate concept. The evolution of 11 ' $ AM History 0 -Rec (e 1 at 01/01/90) ' $ ' $ Jim: Lives: indep. <p> This framework was illustrated by a concrete example. The conceptual framework proposed in this paper is the basis of a meta model for update in a generalized evolving information system. In this meta-modelling process, further work is being done. This work involves the formalization of the meta model ([FOP92b], <ref> [PW93] </ref>), and the design of a language for manipulating and specifying application models.
Reference: [Rod91] <author> J.F. Roddick. </author> <title> Dynamically changing schemas within database models. </title> <journal> The Australian Computer Journal, </journal> <volume> 23(3) </volume> <pages> 105-109, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The need for the support of evolution in information systems has already been recognized by others. However, most of them restrict themselves to evolution of only part of the application model, eg. schema evolution ([MS90], [Ari91], <ref> [Rod91] </ref>). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population) only.
Reference: [SA86] <author> R. Snodgrass and I. Ahn. </author> <title> Temporal Databases. </title> <journal> IEEE Computer, </journal> <volume> 19(9) </volume> <pages> 35-42, </pages> <year> 1986. </year>
Reference-contexts: These point of times are called the recording time of events. Our notion of event time and recording time is identical to the notions of valid time, and transaction time, respectively, in <ref> [SA86] </ref>. The reason for the renaming is that the new names correspond better to the three level architecture we will introduce in section 3. The classification of information systems which is made in [SA86] is based on the basis of support of valid and transaction time. <p> time and recording time is identical to the notions of valid time, and transaction time, respectively, in <ref> [SA86] </ref>. The reason for the renaming is that the new names correspond better to the three level architecture we will introduce in section 3. The classification of information systems which is made in [SA86] is based on the basis of support of valid and transaction time. Conform this classification (which distinguishes snapshot-, historical-, rollback-, and temporal systems), evolving information systems are temporal systems because of the fact that both valid and transaction time are supported.
Reference: [Ver89] <author> A.A. Verrijn-Stuart. </author> <title> Some Reflections on the Namur Conference on Information Systems Concepts. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <title> Information System Concepts: An In-depth Analysis. </title> <address> North-Holland/IFIP, </address> <year> 1989. </year>
Reference-contexts: This computerized actor is called the information processor. The restriction to a computerized actor performing information system processing activities, corresponds to what has been defined in <ref> [Ver89] </ref> as an information system in the narrower sense `IS (N)'. In this section, a general architecture for information systems is presented (see also [FOP92a], [FOP92c]), by means of which the distinction between traditional and evolving information systems is explained.
Reference: [VW91] <author> Th.H. Visschedijk and R.N. van der Werff. </author> <title> (R)evolutionary system development in practice. </title> <journal> Journal of Software Research, </journal> <pages> pages 46-57, </pages> <month> December </month> <year> 1991. </year>
Reference: [WHO92] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 167 - 223. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: Examples of modelling techniques for the activity and behaviour model are Data Flow Diagrams ([GS86]) the A-schemas in ISAC ([LGN81]), or Task Structures ([HN93], <ref> [WHO92] </ref>). The subdivision of the proces model, is illustrated in figure 3. - - - 6 6 World Model Activity Model Behaviour Model Action Model Meta Model Application Model It is only obvious, that the world model should provide a unified conceptual model of the application.
Reference: [Win90] <author> J.J.V.R. Wintraecken. </author> <title> The NIAM Information Analysis Method: Theory and Practice. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: This model is called the world model. Many techniques for describing world models distinguish in their language an information structure, a set of constraints defined upon the information structure, and a population of the information structure, conforming to these constraints (eg Entity Relationship Modelling ([Che76]), NIAM ([NH89], <ref> [Win90] </ref>) or PSM ([HW93], [HPW92a]).
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: In order to keep track of the wear and tear of LP's, the number of times an LP has been lent, is registered. The information structure and constraints of this universe of discourse are modelled in figure 11 in the style of ER, according to the conventions of <ref> [You89] </ref>. Note the special notation of attributes (Title) using a mark symbol (#) followed by the attribute (# Title).
References-found: 28

