URL: http://www.cs.wisc.edu/~fischer/course/html/submissions/120.ps.gz
Refering-URL: http://www.cs.wisc.edu/~fischer/course/html/submissions/
Root-URL: http://www.cs.wisc.edu
Email: diderich@di.epfl.ch  Marc.Gengler@lip.ens-lyon.fr  
Title: SOLVING THE CONSTANT-DEGREE PARALLELISM ALIGNMENT PROBLEM  
Author: CLAUDE G. DIDERICH and MARC GENGLER 
Keyword: Alignment problem, automatic parallelization, data distribution, data par allelism, distributed memory machines, distributed shared memory, linear algebra.  
Date: Printed October 23, 1995  
Address: CH-1015 Lausanne, Switzerland  F-69364 Lyon, France  
Affiliation: Swiss Federal Institute of Technology Lausanne Computer Science Department  Ecole Normale Suprieure de Lyon Laboratoire de l'Informatique du Paralllisme  
Abstract: When automatically parallelizing loop nests for distributed memory parallel computers, two important aspects have to be addressed: i) maximize parallelism, and ii) minimize communication overhead due to non local data references. In this paper we describe an algorithm for tnding a computation mapping and data distributions that minimize the number of remote data accesses for a given degree of parallelism. We call this problem the constant-degree parallelism alignment problem (CDPAP). The algorithm presented uses the linear algebra framework. It proceeds by constructing a basis of the set of vectors representing the alignments between computation and data accesses that should be verited. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. Amaldi and V. Kann, </author> <title> The complexity and approximability of tnding maximum feasible subsystems of linear relations, </title> <journal> Theoret. Comput. Sci. </journal> <volume> 147 (1995), no. 12, </volume> <pages> 181210. </pages>
Reference-contexts: When considering all these parameters variable, we have the following theorem. Theorem 4.2 The CDPAP is NP-hard. Proof sketch. By reduction from the homogeneous, bipolar Max FLS = problem (see <ref> [1] </ref> for the detnition of Max FLS = ). 2 Before analyzing the running time of the CDPAA, we prove the following optimality result.
Reference: 2. <author> D. Bau, I. Kodukula, V. Kotlyar, K. Pingali, and P. Stodghill, </author> <title> Solving alignment using elementary linear algebra, </title> <booktitle> Proc. LCPC '94 (Ithaca, </booktitle> <editor> NY) (K. Pingali et al., ed.), LNCS, </editor> <volume> vol. 892, </volume> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1994, </year> <pages> pp. 4660. </pages>
Reference-contexts: In this paper we exclusively address the alignment problem. Previous work in this area has mainly focused on tnding alignments for which no remote data accesses are required. Huang and Sadayappan [6] were the trst to formulate the communication-free alignment problem in a linear algebra framework. Bau et al. <ref> [2] </ref> describe a general algorithm for solving this problem. Lim and Lam [11] present a set of ane transformations to improve data locality. Other researchers have modeled the problem in a graph theoretic framework [3, 5, 10] or used stencil-based approaches [4]. This paper is organized as follows. <p> This subproblem is called the constant-degree parallelism alignment problem. Other variants are of course possible and interesting. In this paper we restrict ourselves to array access functions that are linear or ane. This allows us to use the linear algebra framework, introduced by Bau et al. <ref> [2] </ref>, for 2 expressing the alignment problem. In this framework, access l to array k is detned by the function F l i 7! F l k i + f l where I represents the index domain detned by the loop bounds and D k the array access domain. <p> As a consequence, more ecient mapping functions can be computed. 3 3 Solving the communication-free alignment problem In this section we briey review the algorithm for solving the communication-free alignment problem in a linear algebra framework proposed by Bau et al. <ref> [2] </ref>. Our algorithm, as presented in Sec. 4, uses this algorithm as a building block. <p> Algo. 1, called linear-alignment algorithm, tnds a communication-free alignment with maximal degree of parallelism. A more in-depth discussion of the linear-alignment algorithm can be found in <ref> [2] </ref>. b Because the degree of parallelism is not inuenced by the constant oset, it only depends on the rank of U T and not on the rank of ^ U T . 4 Input: A set of alignment constraints of the form ^ C j = ^ D k ^
Reference: 3. <author> S. Chatterjee, J. R. Gilbert, and R. Schreiber, </author> <title> The alignment-distribution graph, </title> <booktitle> Proc. LCPC '93 (Portland, </booktitle> <editor> OR) (U. Banerjee et al., ed.), LNCS, </editor> <volume> vol. 768, </volume> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1993, </year> <pages> pp. 234252. </pages>
Reference-contexts: Bau et al. [2] describe a general algorithm for solving this problem. Lim and Lam [11] present a set of ane transformations to improve data locality. Other researchers have modeled the problem in a graph theoretic framework <ref> [3, 5, 10] </ref> or used stencil-based approaches [4]. This paper is organized as follows. In Sec. 2 we detne the alignment problem and show how it can be expressed in a linear algebra framework. Section 3 presents an algorithm for tnding a communication-free alignment used as a building block.
Reference: 4. <author> P. Crooks and R. H. Perrott, </author> <title> An automatic data distribution generator for distributed memory MIMD machines, </title> <booktitle> Proc. Workshop on Comp. for Par. </booktitle> <institution> Comp. (Delft, The Netherlands) (H. J. Sips, ed.), Univ. of Delft, </institution> <month> December </month> <year> 1993, </year> <pages> pp. 3344. </pages>
Reference-contexts: Bau et al. [2] describe a general algorithm for solving this problem. Lim and Lam [11] present a set of ane transformations to improve data locality. Other researchers have modeled the problem in a graph theoretic framework [3, 5, 10] or used stencil-based approaches <ref> [4] </ref>. This paper is organized as follows. In Sec. 2 we detne the alignment problem and show how it can be expressed in a linear algebra framework. Section 3 presents an algorithm for tnding a communication-free alignment used as a building block.
Reference: 5. <author> A. Darte and Y. Robert, </author> <title> Mapping uniform loop nests onto distributed memory architectures, Par. </title> <journal> Comp. </journal> <volume> 20 (1994), no. 5, </volume> <pages> 679719. </pages>
Reference-contexts: Bau et al. [2] describe a general algorithm for solving this problem. Lim and Lam [11] present a set of ane transformations to improve data locality. Other researchers have modeled the problem in a graph theoretic framework <ref> [3, 5, 10] </ref> or used stencil-based approaches [4]. This paper is organized as follows. In Sec. 2 we detne the alignment problem and show how it can be expressed in a linear algebra framework. Section 3 presents an algorithm for tnding a communication-free alignment used as a building block.
Reference: 6. <author> C.-H. Huang and P. Sadayappan, </author> <title> Communication-free hyperplane partitioning of nested loops, </title> <booktitle> Proc. </booktitle> <address> LCPC '91 (Santa Clara, </address> <publisher> CA) (U. </publisher> <editor> Banerjee et al., ed.), LNCS, </editor> <volume> vol. 589, </volume> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1991, </year> <pages> pp. 186200. </pages>
Reference-contexts: In this paper we exclusively address the alignment problem. Previous work in this area has mainly focused on tnding alignments for which no remote data accesses are required. Huang and Sadayappan <ref> [6] </ref> were the trst to formulate the communication-free alignment problem in a linear algebra framework. Bau et al. [2] describe a general algorithm for solving this problem. Lim and Lam [11] present a set of ane transformations to improve data locality.
Reference: 7. <author> K. Kennedy and U. Kremer, </author> <title> Automatic data layout for High Performance Fortran, </title> <type> Tech. Report CRPC-TR94498-S, </type> <institution> Center for Research on Parallel Computation, Rice University, Houston, TX, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Finding alignment functions at the program level. Although the CDPAA may be applied at the program level, it is most suitable for tnding alignment functions at the loop nest or phase level. In order to compute ecient alignment functions for large programs, the algorithm proposed by Kennedy and Kremer <ref> [7] </ref> could be applied replacing their block alignment strategy within program phases by our CDPAA. Cost functions. The CDPAA, as presented in Sec. 4.1, uses the number of non local data accesses as cost function to minimize.
Reference: 8. <author> C. H. Koelbel, </author> <title> The High Performance Fortran handbook, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: The parallel execution scheme, solution of the alignment problem in the linear algebra framework, is much more general than the traditional block or cyclic data distribution schemes provided by languages like HPF <ref> [8] </ref>, Vienna Fortran or Fortran D. The owner computes restriction is lifted, that is, read and write data accesses are considered at the same level.
Reference: 9. <author> L. Lamport, </author> <title> The parallel execution of DO loops, </title> <journal> Comm. ACM 17 (1974), </journal> <volume> no. 2, </volume> <pages> 8393. </pages>
Reference-contexts: Dropping one constraint, namely the one aligning the data access to A (i,j) with the computation, yields a one dimensional parallelism: ^ C S = (1 0 1) and ^ D F = (1 0 0). Suppose now that the scheduling vector, as described in Lamport's hyperplane method <ref> [9] </ref>, is chosen to be the vector = (1 0) T . Then, and C T S = (1 0) T are identical and the hyperplane of elements of the iteration space that have to be computed at a given moment are all owned by one processor.
Reference: 10. <author> J. Li and M. Chen, </author> <title> Index domain alignment: Minimizing cost of cross-referencing between distributed arrays, </title> <booktitle> Proc. FRONTIERS '90 (Maryland, </booktitle> <editor> MA) (J. JaJa, ed.), </editor> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1990, </year> <pages> pp. 424733. </pages>
Reference-contexts: Bau et al. [2] describe a general algorithm for solving this problem. Lim and Lam [11] present a set of ane transformations to improve data locality. Other researchers have modeled the problem in a graph theoretic framework <ref> [3, 5, 10] </ref> or used stencil-based approaches [4]. This paper is organized as follows. In Sec. 2 we detne the alignment problem and show how it can be expressed in a linear algebra framework. Section 3 presents an algorithm for tnding a communication-free alignment used as a building block.
Reference: 11. <author> A. W. Lim and M. S. Lam, </author> <title> Communication-free parallelization via ane transformations, </title> <booktitle> Proc. LCPC '94 (Ithaca, </booktitle> <editor> NY) (K. Pingali et al., ed.), LNCS, </editor> <volume> no. 589, </volume> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1994, </year> <pages> pp. 92106. 11 </pages>
Reference-contexts: Huang and Sadayappan [6] were the trst to formulate the communication-free alignment problem in a linear algebra framework. Bau et al. [2] describe a general algorithm for solving this problem. Lim and Lam <ref> [11] </ref> present a set of ane transformations to improve data locality. Other researchers have modeled the problem in a graph theoretic framework [3, 5, 10] or used stencil-based approaches [4]. This paper is organized as follows.
References-found: 11

