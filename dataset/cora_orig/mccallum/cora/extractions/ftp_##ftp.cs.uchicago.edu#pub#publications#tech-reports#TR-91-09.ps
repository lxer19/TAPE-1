URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-91-09.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: ARITHMETIZATION: A NEW METHOD IN STRUCTURAL COMPLEXITY THEORY to interactive proofs, the present paper demonstrates
Author: L aszl o Babai and Lance Fortnow 
Note: The arithmetization technique was independently discovered by Adi Shamir. While this simultaneous discovery was driven by applications  Subject classifications. 68Q15, 68Q60  
Abstract: We introduce a technique of arithmetization of the process of computation in order to obtain novel characterizations of certain complexity classes via multivariate polynomials. A variety of concepts and tools of elementary algebra, such as the degree of polynomials and interpolation, becomes thereby available for the study of complexity classes. The theory to be described provides a unified framework from which powerful recent results follow naturally. The central result is a characterization of ]P in terms of arithmetic straight line programs. The consequences include a simplified proof of Toda's Theorem that P H P ]P ; and an infinite class of natural and potentially inequivalent functions, checkable in the sense of Blum et al. Similar characterizations of PSPACE are also given. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Babai, </author> <title> Trading group theory for randomness, </title> <booktitle> in Proc. 17th Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1985, </year> <pages> 421-429. </pages>
Reference-contexts: Arithmetization 5 IP denotes the class of languages admitting interactive proof of membership. Babai <ref> [1, 5] </ref> and Goldwasser, Micali and Rackoff [16] invented interactive proof systems and formal definitions can be found in these papers. The two variants defined in these papers were shown equivalent by Goldwasser and Sipser [17].
Reference: [2] <author> L. Babai, </author> <title> E-mail and the unexpected power of interaction, </title> <booktitle> in Proc. 5th Ann. IEEE Structures in Complexity Theory Conf., </booktitle> <year> 1990, </year> <pages> 30-44. </pages>
Reference-contexts: Such a direct proof indeed is a corollary. A similar arithmetization was found independently by Adi Shamir [23]. A preliminary version of this paper was presented at FOCS'90 [3]. Even earlier, the basic technique and some consequences were discussed in the survey paper <ref> [2] </ref> where the suspense story of the genesis of this and related techniques was also told. 2. Preliminaries 2.1. Complexity classes for counting. By an NP machine we mean a Arithmetization 3 nondeterministic Turing machine that runs in time polynomial in the length of the input.
Reference: [3] <author> L. Babai and L. Fortnow, </author> <title> A characterization of #P by arithmetic straight line programs, </title> <booktitle> in Proc. 31st Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> 26-34. </pages> <note> 24 Babai & Fortnow </note>
Reference-contexts: Such a direct proof indeed is a corollary. A similar arithmetization was found independently by Adi Shamir [23]. A preliminary version of this paper was presented at FOCS'90 <ref> [3] </ref>. Even earlier, the basic technique and some consequences were discussed in the survey paper [2] where the suspense story of the genesis of this and related techniques was also told. 2. Preliminaries 2.1. Complexity classes for counting.
Reference: [4] <author> L. Babai, L. Fortnow, and C. Lund, </author> <title> Nondeterministic exponential time has two-prover interactive protocols, </title> <booktitle> in Proc. 31st Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> 16-25. </pages>
Reference-contexts: This technique was simultaneously and independently discovered by Adi Shamir and has been strikingly successful in determining the power of interactive proof systems <ref> [23, 4] </ref>. 2 Babai & Fortnow We should mention that in a different context (circuit complexity), A. A. Razborov has previously introduced an arithmetization technique to obtain lower bounds [21, 24]. <p> x" otherwise output "P differs from f ". 2 Up to natural equivalence, the only previously known languages with instance checkers were some number theory related languages from NP"coNP [16], Graph Isomorphism [18], coset intersection in permutation groups [5], and the languages complete for ]P [20], PSPACE [23], and EXPTIME <ref> [4] </ref>. We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs. Details of the comparison of the above definition and the [10] definition can be found in [4]. <p> [5], and the languages complete for ]P [20], PSPACE [23], and EXPTIME <ref> [4] </ref>. We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs. Details of the comparison of the above definition and the [10] definition can be found in [4]. One aspect we should point out is that under our definition, the following holds. Proposition 2.2. If the functions f and g are polynomial-time Turing equivalent, and f has a self-testing/correcting pair, then g has a self-testing/correcting pair, too. This may be false under the [10] definition. 3. <p> This may be false under the [10] definition. 3. A characterization of ]P In this section we introduce the basic arithmetization technique. Variations can be found in later sections of this paper as well as in [23] and <ref> [4] </ref>. We define a class of straight line programs of multivariate polynomials with integral coefficients over the set fx 1 ; x 2 ; : : :g of variables.
Reference: [5] <author> L. Babai and S. Moran, </author> <title> Arthur-Merlin games: a randomized proof system, and a hierarchy of complexity classes, </title> <journal> Journal Comp. Sys. Sci. </journal> <volume> 36 (1988), </volume> <pages> 254-276. </pages>
Reference-contexts: Arithmetization 5 IP denotes the class of languages admitting interactive proof of membership. Babai <ref> [1, 5] </ref> and Goldwasser, Micali and Rackoff [16] invented interactive proof systems and formal definitions can be found in these papers. The two variants defined in these papers were shown equivalent by Goldwasser and Sipser [17]. <p> x) = P (x) output "P computes the correct value on input x" otherwise output "P differs from f ". 2 Up to natural equivalence, the only previously known languages with instance checkers were some number theory related languages from NP"coNP [16], Graph Isomorphism [18], coset intersection in permutation groups <ref> [5] </ref>, and the languages complete for ]P [20], PSPACE [23], and EXPTIME [4]. We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs.
Reference: [6] <author> D. Beaver and J. Feigenbaum, </author> <title> Hiding instances in multioracle queries, </title> <booktitle> in Proc. 7th Symp. on Theoretical Aspects of Comp. Sci., Lecture Notes in Comp. Sci. 415 (1990), </booktitle> <pages> 37-48. </pages>
Reference-contexts: exhibiting an infinite class of natural and potentially inequivalent functions, checkable in the sense of Blum [8, 9, 10]. (Up to natural equivalence, only a handful of such functions were previously known; unnatural ones could be obtained by padding and other artificial tricks.) Adapting an idea of Beaver and Feigenbaum <ref> [6] </ref> and Lipton [19], these classes are also shown to have the random self-correcting property in the sense of Blum, Luby and Rubinfeld [10]. We also obtain arithmetic straight line program characterizations of PSPACE functions as well as their multilinear extensions. <p> We note that each query to a value over GF (m k ) of a polynomial in the PRAB is a ] m P-query according to Lemma 8.1 and can therefore be transformed into a single query to P . Following the ideas of Beaver-Feigenbaum <ref> [6] </ref> and Lipton [19], one recognizes that low degree polynomials over fields automatically have the self-correcting feature. Indeed, if m is prime, we create the correcting program C as follows.
Reference: [7] <author> R. Beigel, J. Gill, and U. Hertrampf, </author> <title> Counting classes: thresholds, parity, </title> <booktitle> mods, and fewness, in Proc. 7th Symp. on Theoretical Aspects of Comp. Sci., Lecture Notes in Comp. Sci. 415 (1990), </booktitle> <pages> 49-57. </pages>
Reference-contexts: A function f : f0; 1g fl ! Z m belongs to ] m P if there exists a function g 2 ]P such that f (x) is the mod m residue class of g (x) for every x 2 f0; 1g fl . Beigel, Gill and Hertrampf <ref> [7] </ref> show that for any constant m we have P ] m P = P ] m 0 P where m 0 is the product of prime divisors (the square-free part) of m. Some comments on reducibility and completeness in these classes will be in order here. <p> First we solve the problem when m is prime, using extensions of finite fields. An extension to any square-free m is then immediate via the Chinese Remainder Theorem. Finally we will use Beigel-Gill-Hertrampf <ref> [7] </ref> to extend the result to all m. For the proof, we have to consider PRAB's over k fi k matrices. In this case, the variables stand for variable matrices; and in rule (6), 0 and 1 represent the zero and the identity matrices, resp. Lemma 8.1. <p> III. Finally we turn to the case of general m &gt; 1. Recall that for any constant m we have P ] m P = P ] m 0 P where m 0 is the product of prime divisors (the square-free part) of m <ref> [7] </ref>. We convert the ] m P functions into ] m 0 P questions and by part II of this proof we have our protocol. 2 This result was independently obtained by Peter Shor (oral communication). Theorem 8.3. Every ] m P-complete function has a self-testing/correcting pair. <p> III. By the above quoted polynomial time Turing equivalence of ] m P and ] m 0 P, where m 0 is the square-free part of m <ref> [7] </ref>, the general case follows in view of the comments in Section 2. 2 Feigenbaum and Fortnow [13] use the ideas of this section to show that ] m P-complete languages are random self-reducible. 9.
Reference: [8] <author> M. Blum, </author> <title> Designing programs that check their work, </title> <note> submitted to Comm. of ACM. </note>
Reference-contexts: A simplified proof of Toda's Theorem P H P ]P follows. As a further consequence, we show that ] m P has interactive proofs with ] m P-powerful honest provers, thus exhibiting an infinite class of natural and potentially inequivalent functions, checkable in the sense of Blum <ref> [8, 9, 10] </ref>. (Up to natural equivalence, only a handful of such functions were previously known; unnatural ones could be obtained by padding and other artificial tricks.) Adapting an idea of Beaver and Feigenbaum [6] and Lipton [19], these classes are also shown to have the random self-correcting property in the <p> Lund, Fortnow, Karloff and Nisan [20] show that every ]P function has an interactive proof. Extending the ideas of [20], Shamir [23] shows that every PSPACE language has an interactive proof. We give alternate proofs of both these results in this paper. 2.4. Program self-testing. Blum and Kannan <ref> [8, 9] </ref> describe program instance checking. A Monte Carlo program C is a program instance checker for a function f if the following holds. Let P be a program that claims to compute f .
Reference: [9] <author> M. Blum and S. Kannan, </author> <title> Designing programs that check their work, </title> <booktitle> in Proc. 21st Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1989, </year> <pages> 86-97. </pages>
Reference-contexts: A simplified proof of Toda's Theorem P H P ]P follows. As a further consequence, we show that ] m P has interactive proofs with ] m P-powerful honest provers, thus exhibiting an infinite class of natural and potentially inequivalent functions, checkable in the sense of Blum <ref> [8, 9, 10] </ref>. (Up to natural equivalence, only a handful of such functions were previously known; unnatural ones could be obtained by padding and other artificial tricks.) Adapting an idea of Beaver and Feigenbaum [6] and Lipton [19], these classes are also shown to have the random self-correcting property in the <p> Lund, Fortnow, Karloff and Nisan [20] show that every ]P function has an interactive proof. Extending the ideas of [20], Shamir [23] shows that every PSPACE language has an interactive proof. We give alternate proofs of both these results in this paper. 2.4. Program self-testing. Blum and Kannan <ref> [8, 9] </ref> describe program instance checking. A Monte Carlo program C is a program instance checker for a function f if the following holds. Let P be a program that claims to compute f . <p> A language has a program instance checker if its characteristic function does. Blum and Kannan <ref> [9] </ref> show that if a language L has an interactive proof where the prover only answers questions about membership in L then L has a program instance checker. Blum, Luby and Rubinfeld [10] developed a concept which they call self-testing/correcting pairs for programs. <p> Arithmetization 17 8. Prover power and checkability of ] m P In this section we will show that ] m P has interactive proofs requiring ] m P-powerful honest provers only. Consequently, ] m P-complete functions have a program instance checker in the sense of Blum-Kannan <ref> [9] </ref>. We will also show that ] m P-complete languages have a self-testing/correcting pair in the spirit of Blum, Luby and Rubinfeld [10] (cf. our modified definition and discussion in Section 2.4). First we solve the problem when m is prime, using extensions of finite fields.
Reference: [10] <author> M. Blum, M. Luby, and R. Rubinfeld, </author> <title> Self-testing and self-correcting programs, with applications to numerical programs, </title> <booktitle> in Proc. 22nd Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1990, </year> <pages> 73-83. </pages>
Reference-contexts: A simplified proof of Toda's Theorem P H P ]P follows. As a further consequence, we show that ] m P has interactive proofs with ] m P-powerful honest provers, thus exhibiting an infinite class of natural and potentially inequivalent functions, checkable in the sense of Blum <ref> [8, 9, 10] </ref>. (Up to natural equivalence, only a handful of such functions were previously known; unnatural ones could be obtained by padding and other artificial tricks.) Adapting an idea of Beaver and Feigenbaum [6] and Lipton [19], these classes are also shown to have the random self-correcting property in the <p> only a handful of such functions were previously known; unnatural ones could be obtained by padding and other artificial tricks.) Adapting an idea of Beaver and Feigenbaum [6] and Lipton [19], these classes are also shown to have the random self-correcting property in the sense of Blum, Luby and Rubinfeld <ref> [10] </ref>. We also obtain arithmetic straight line program characterizations of PSPACE functions as well as their multilinear extensions. <p> A language has a program instance checker if its characteristic function does. Blum and Kannan [9] show that if a language L has an interactive proof where the prover only answers questions about membership in L then L has a program instance checker. Blum, Luby and Rubinfeld <ref> [10] </ref> developed a concept which they call self-testing/correcting pairs for programs. A similar concept encompassing the self-correction feature was developed independently by Lipton [19]. We will give a definition which differs slightly from that of [10]: Let f : f0; 1g ! f0; 1g be a function. <p> Blum, Luby and Rubinfeld <ref> [10] </ref> developed a concept which they call self-testing/correcting pairs for programs. A similar concept encompassing the self-correction feature was developed independently by Lipton [19]. We will give a definition which differs slightly from that of [10]: Let f : f0; 1g ! f0; 1g be a function. A self-testing/correcting pair for f is a pair (T; C) of probabilistic polynomial-time algorithms with the following properties for every n 0. Let P be a program claimed to compute f . <p> We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs. Details of the comparison of the above definition and the <ref> [10] </ref> definition can be found in [4]. One aspect we should point out is that under our definition, the following holds. Proposition 2.2. If the functions f and g are polynomial-time Turing equivalent, and f has a self-testing/correcting pair, then g has a self-testing/correcting pair, too. <p> One aspect we should point out is that under our definition, the following holds. Proposition 2.2. If the functions f and g are polynomial-time Turing equivalent, and f has a self-testing/correcting pair, then g has a self-testing/correcting pair, too. This may be false under the <ref> [10] </ref> definition. 3. A characterization of ]P In this section we introduce the basic arithmetization technique. Variations can be found in later sections of this paper as well as in [23] and [4]. <p> Consequently, ] m P-complete functions have a program instance checker in the sense of Blum-Kannan [9]. We will also show that ] m P-complete languages have a self-testing/correcting pair in the spirit of Blum, Luby and Rubinfeld <ref> [10] </ref> (cf. our modified definition and discussion in Section 2.4). First we solve the problem when m is prime, using extensions of finite fields. An extension to any square-free m is then immediate via the Chinese Remainder Theorem.
Reference: [11] <author> R. Beigel, N. Reingold and D. Spielman, </author> <title> PP is Closed under Intersection, </title> <booktitle> in Proc. 23rd Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1991, </year> <note> to appear. </note>
Reference-contexts: Remark 3.7. The celebrated proof of Beigel, Reingold and Spielman <ref> [11] </ref> that PP is closed under union can be expressed simply in terms of RA's. Their main trick involves using a rational function r (t) = p (t)=q (t) of a single variable t which very closely approximates the sign function on the nonzero integers of n c digits. <p> The completes the sketch of the proof of the Theorem of Beigel et al. <ref> [11] </ref> Arithmetization 11 4. Interactive proofs We say that a function f : f0; 1g fl ! Z has an interactive proof if the number of digits of f (x) is bounded by jxj O (1) and the graph of f belongs to the class IP.
Reference: [12] <author> A. Chandra, D. Kozen, and L. Stockmeyer, </author> <title> Alternation, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 28 (1981), </volume> <pages> 114-133. </pages>
Reference-contexts: II. Suppose we have an arithmetic program P created with the rules above. We can build a polynomial time alternating Turing machine M to decide if the final value is 1. By Chandra-Kozen-Stockmeyer <ref> [12] </ref> we can simulate this alternating Turing machine by a PSPACE machine. First we observe that on (0; 1)-substitutions, each polynomial in P takes (0; 1)-values. The machine M will proceed backward in stages starting with stage t (the last stage), attempting to verify that p t (x) = 1.
Reference: [13] <author> J. Feigenbaum and L. Fortnow, </author> <title> On the random-self-reducibility of complete sets, </title> <institution> University of Chicago Technical Report 90-22, </institution> <year> 1990. </year>
Reference-contexts: III. By the above quoted polynomial time Turing equivalence of ] m P and ] m 0 P, where m 0 is the square-free part of m [7], the general case follows in view of the comments in Section 2. 2 Feigenbaum and Fortnow <ref> [13] </ref> use the ideas of this section to show that ] m P-complete languages are random self-reducible. 9. Characterizations of PSPACE functions In this section we exhibit rules for straight line programs that characterize PSPACE functions. The first ingredient is a simple characterization of PSPACE languages.
Reference: [14] <author> S. Fenner, L. Fortnow, and S. Kurtz, </author> <title> Gap-definable counting classes, </title> <institution> University of Chicago Technical Report 90-32, </institution> <year> 1990. </year>
Reference-contexts: The class Gap-P consists of all functions that are the difference of two ]P functions. Fenner, Fortnow and Kurtz <ref> [14] </ref> show that retarded arithmetic programs characterize Gap-P functions in full analogy with Theorem 3.1: Theorem 3.3. (Fenner-Fortnow-Kurtz) For a function f : f0; 1g fl ! Z, the following are equivalent. (a) f 2 Gap-P. (b) There exists a uniform family of RAB's P n such that for every string
Reference: [15] <author> M. Garey and D. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, W.H. </title> <publisher> Freeman and Co., </publisher> <year> 1979 </year> <month> Arithmetization 25 </month>
Reference-contexts: The result is valid with either notion of uniformity. Proof. I. We first prove the implication (a) =) (b). Let M be an NP-machine which on input x 2 f0; 1g fl has f (x) accepting paths. Following the standard proof of the Cook-Levin Theorem (cf. <ref> [15] </ref>), for every n we associate a 3-CNF formula ' n with M .
Reference: [16] <author> S. Goldwasser, S. Micali, and C. Rackoff, </author> <title> The knowledge complexity of interactive proofs, </title> <note> SIAM Journal on Computing 18 (1989), 186-208. (Preliminary version appeared in Proc. </note> <editor> 18th Ann. </editor> <booktitle> ACM Symp. Theory of Computing, </booktitle> <year> 1985, </year> <pages> 291-304.) </pages>
Reference-contexts: Arithmetization 5 IP denotes the class of languages admitting interactive proof of membership. Babai [1, 5] and Goldwasser, Micali and Rackoff <ref> [16] </ref> invented interactive proof systems and formal definitions can be found in these papers. The two variants defined in these papers were shown equivalent by Goldwasser and Sipser [17]. <p> Otherwise if C (P; x) = P (x) output "P computes the correct value on input x" otherwise output "P differs from f ". 2 Up to natural equivalence, the only previously known languages with instance checkers were some number theory related languages from NP"coNP <ref> [16] </ref>, Graph Isomorphism [18], coset intersection in permutation groups [5], and the languages complete for ]P [20], PSPACE [23], and EXPTIME [4]. We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs.
Reference: [17] <author> S. Goldwasser and M. Sipser, </author> <title> Private coins versus public coins in interactive proof systems, in Randomness in Computation, </title> <editor> S. Micali, ed., </editor> <booktitle> Advances in Computing Research 5, </booktitle> <publisher> JAI Press, </publisher> <year> 1989, </year> <pages> 73-90. </pages>
Reference-contexts: Arithmetization 5 IP denotes the class of languages admitting interactive proof of membership. Babai [1, 5] and Goldwasser, Micali and Rackoff [16] invented interactive proof systems and formal definitions can be found in these papers. The two variants defined in these papers were shown equivalent by Goldwasser and Sipser <ref> [17] </ref>. We say a function f : f0; 1g fl fl has an interactive proof if jf (x)j jxj O (1) and the graph of f has an interactive proof. Lund, Fortnow, Karloff and Nisan [20] show that every ]P function has an interactive proof.
Reference: [18] <author> O. Goldreich, S. Micali, and A. Wigderson, </author> <title> Proofs that yield nothing but their validity and a methodology of cryptographic protocol design, </title> <booktitle> in Proc. 27th Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1986, </year> <pages> 174-187. </pages>
Reference-contexts: Otherwise if C (P; x) = P (x) output "P computes the correct value on input x" otherwise output "P differs from f ". 2 Up to natural equivalence, the only previously known languages with instance checkers were some number theory related languages from NP"coNP [16], Graph Isomorphism <ref> [18] </ref>, coset intersection in permutation groups [5], and the languages complete for ]P [20], PSPACE [23], and EXPTIME [4]. We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs.
Reference: [19] <author> R. Lipton, </author> <title> New directions in testing, </title> <booktitle> in Proceedings of the DIMACS Workshop on Distributed Computing and Cryptography, </booktitle> <year> 1989, </year> <note> to appear. </note>
Reference-contexts: class of natural and potentially inequivalent functions, checkable in the sense of Blum [8, 9, 10]. (Up to natural equivalence, only a handful of such functions were previously known; unnatural ones could be obtained by padding and other artificial tricks.) Adapting an idea of Beaver and Feigenbaum [6] and Lipton <ref> [19] </ref>, these classes are also shown to have the random self-correcting property in the sense of Blum, Luby and Rubinfeld [10]. We also obtain arithmetic straight line program characterizations of PSPACE functions as well as their multilinear extensions. <p> Blum, Luby and Rubinfeld [10] developed a concept which they call self-testing/correcting pairs for programs. A similar concept encompassing the self-correction feature was developed independently by Lipton <ref> [19] </ref>. We will give a definition which differs slightly from that of [10]: Let f : f0; 1g ! f0; 1g be a function. A self-testing/correcting pair for f is a pair (T; C) of probabilistic polynomial-time algorithms with the following properties for every n 0. <p> We note that each query to a value over GF (m k ) of a polynomial in the PRAB is a ] m P-query according to Lemma 8.1 and can therefore be transformed into a single query to P . Following the ideas of Beaver-Feigenbaum [6] and Lipton <ref> [19] </ref>, one recognizes that low degree polynomials over fields automatically have the self-correcting feature. Indeed, if m is prime, we create the correcting program C as follows.
Reference: [20] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan, </author> <title> Algebraic methods for interactive proof systems, </title> <booktitle> in Proc. 31st Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> 1-10. </pages>
Reference-contexts: We also obtain arithmetic straight line program characterizations of PSPACE functions as well as their multilinear extensions. The new technique was motivated by an arithmetization of Boolean formulas obtained by the authors in an attempt to remove permanents from the recent proof by Lund, Fortnow, Karloff, and Nisan <ref> [20] </ref> that P ]P has interactive proofs. Such a direct proof indeed is a corollary. A similar arithmetization was found independently by Adi Shamir [23]. A preliminary version of this paper was presented at FOCS'90 [3]. <p> The two variants defined in these papers were shown equivalent by Goldwasser and Sipser [17]. We say a function f : f0; 1g fl fl has an interactive proof if jf (x)j jxj O (1) and the graph of f has an interactive proof. Lund, Fortnow, Karloff and Nisan <ref> [20] </ref> show that every ]P function has an interactive proof. Extending the ideas of [20], Shamir [23] shows that every PSPACE language has an interactive proof. We give alternate proofs of both these results in this paper. 2.4. Program self-testing. Blum and Kannan [8, 9] describe program instance checking. <p> We say a function f : f0; 1g fl fl has an interactive proof if jf (x)j jxj O (1) and the graph of f has an interactive proof. Lund, Fortnow, Karloff and Nisan <ref> [20] </ref> show that every ]P function has an interactive proof. Extending the ideas of [20], Shamir [23] shows that every PSPACE language has an interactive proof. We give alternate proofs of both these results in this paper. 2.4. Program self-testing. Blum and Kannan [8, 9] describe program instance checking. <p> the correct value on input x" otherwise output "P differs from f ". 2 Up to natural equivalence, the only previously known languages with instance checkers were some number theory related languages from NP"coNP [16], Graph Isomorphism [18], coset intersection in permutation groups [5], and the languages complete for ]P <ref> [20] </ref>, PSPACE [23], and EXPTIME [4]. We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs. Details of the comparison of the above definition and the [10] definition can be found in [4]. <p> It is clear that the procedure is polynomial time. It is also clear that a correct prover will make his case accepted. We have to argue that a cheating prover has slim chance of acceptance. As in <ref> [20] </ref>, the idea is that if two univariate polynomials of low degree differ, then they differ almost everywhere. <p> Consequently, the probability of a wrong value being accepted is at most t X (kt=r) &lt; t 3 =2r noting that in each round, m &lt; t. 2 A self-contained proof of the <ref> [20] </ref> result is now immediate. Corollary 4.2. ]P FIP. Consequently, P ]P IP. Proof. Clear. 2 We remark that the [20] proof depended on Valiant's celebrated result [27] that the permanent of (0; 1)-matrices is ]P-complete. <p> of a wrong value being accepted is at most t X (kt=r) &lt; t 3 =2r noting that in each round, m &lt; t. 2 A self-contained proof of the <ref> [20] </ref> result is now immediate. Corollary 4.2. ]P FIP. Consequently, P ]P IP. Proof. Clear. 2 We remark that the [20] proof depended on Valiant's celebrated result [27] that the permanent of (0; 1)-matrices is ]P-complete. Valiant's proof (the only proof known of Valiant's Theorem) is substantially more intricate than the proof of the P ]P IP result given here. 5.
Reference: [21] <author> A. A. Razborov, </author> <title> Lower bounds for the size of circuits of bounded depth with a complete basis including the logical addition function (in Russian), </title> <booktitle> Matem. Zametki 41 (1981), </booktitle> <pages> 598-607. </pages> <note> (English translation in Math. Notes of the Acad. </note> <institution> Sci. USSR 41:4, </institution> <month> 333-338.) </month>
Reference-contexts: A. Razborov has previously introduced an arithmetization technique to obtain lower bounds <ref> [21, 24] </ref>. In this paper we develop a theory of arithmetic straight line programs and demonstrate its applicability to classical complexity classes. Our central result is a characterization of ]P in terms of uniform sequences of certain arithmetic straight line programs called "positive retarded arithmetic programs with binary substitution" (PRAB).
Reference: [22] <author> U. Sch oning, </author> <title> Probabilistic complexity classes and lowness, </title> <booktitle> in Proc. 2nd Ann. IEEE Structure in Complexity Theory Conf., </booktitle> <year> 1987, </year> <pages> 2-8. </pages>
Reference-contexts: Probabilistic and parity operators. Let &lt;x; y&gt; be a standard pairing function mapping f0; 1g fl fl fl . We will use several operators on complexity classes defined in Schoning <ref> [22] </ref> and Toda [26]. Let C be any complexity class. We define the classes P C, BP C and C as follows: 1. <p> Schoning <ref> [22] </ref> also shows that for any reasonable complexity class C and any polynomial q (n), we can replace two-thirds by 1 2 q (n) without affecting BP C by repeated testing and majority vote. <p> The fraction 2=3 can be amplified to 12 n c for any constant c. <ref> [22] </ref> The claim is thus immediate from Theorem 3.1. The proof for P P goes analogously. 2 Corollary 5.2. (Toda) P P P ]P . Proof. We use one of Toda's tricks.
Reference: [23] <author> A. Shamir, </author> <title> IP = PSPACE, </title> <booktitle> in Proc. 31st Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> 11-15. </pages>
Reference-contexts: This technique was simultaneously and independently discovered by Adi Shamir and has been strikingly successful in determining the power of interactive proof systems <ref> [23, 4] </ref>. 2 Babai & Fortnow We should mention that in a different context (circuit complexity), A. A. Razborov has previously introduced an arithmetization technique to obtain lower bounds [21, 24]. <p> Such a direct proof indeed is a corollary. A similar arithmetization was found independently by Adi Shamir <ref> [23] </ref>. A preliminary version of this paper was presented at FOCS'90 [3]. Even earlier, the basic technique and some consequences were discussed in the survey paper [2] where the suspense story of the genesis of this and related techniques was also told. 2. Preliminaries 2.1. Complexity classes for counting. <p> Lund, Fortnow, Karloff and Nisan [20] show that every ]P function has an interactive proof. Extending the ideas of [20], Shamir <ref> [23] </ref> shows that every PSPACE language has an interactive proof. We give alternate proofs of both these results in this paper. 2.4. Program self-testing. Blum and Kannan [8, 9] describe program instance checking. <p> value on input x" otherwise output "P differs from f ". 2 Up to natural equivalence, the only previously known languages with instance checkers were some number theory related languages from NP"coNP [16], Graph Isomorphism [18], coset intersection in permutation groups [5], and the languages complete for ]P [20], PSPACE <ref> [23] </ref>, and EXPTIME [4]. We will show that an infinite set of natural and potentially inequivalent functions, the ] m P-complete functions, have self-testing/correcting pairs. Details of the comparison of the above definition and the [10] definition can be found in [4]. <p> This may be false under the [10] definition. 3. A characterization of ]P In this section we introduce the basic arithmetization technique. Variations can be found in later sections of this paper as well as in <ref> [23] </ref> and [4]. We define a class of straight line programs of multivariate polynomials with integral coefficients over the set fx 1 ; x 2 ; : : :g of variables.
Reference: [24] <author> R. Smolensky, </author> <title> Algebraic methods in the theory of lower bounds for Boolean circuit complexity, </title> <booktitle> in Proc. 19th Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1987, </year> <pages> 77-82. </pages>
Reference-contexts: A. Razborov has previously introduced an arithmetization technique to obtain lower bounds <ref> [21, 24] </ref>. In this paper we develop a theory of arithmetic straight line programs and demonstrate its applicability to classical complexity classes. Our central result is a characterization of ]P in terms of uniform sequences of certain arithmetic straight line programs called "positive retarded arithmetic programs with binary substitution" (PRAB).
Reference: [25] <author> L. Stockmeyer, </author> <title> The Polynomial-time hierarchy, </title> <booktitle> Theoretical Computer Science 3 (1977), </booktitle> <pages> 1-22. </pages>
Reference-contexts: Any nonnegative polynomial-time computable function is also a ]P function. Toda [26] showed that every language in the polynomial-time hierarchy <ref> [25] </ref> reduces to a problem in ]P. We give a simplified version of Toda's proof in this paper. Let m be a positive integer.
Reference: [26] <author> S. </author> <title> Toda, On the computational power of PP and P, </title> <booktitle> in Proc. 30th Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1989, </year> <pages> 514-519. </pages>
Reference-contexts: Any nonnegative polynomial-time computable function is also a ]P function. Toda <ref> [26] </ref> showed that every language in the polynomial-time hierarchy [25] reduces to a problem in ]P. We give a simplified version of Toda's proof in this paper. Let m be a positive integer. <p> Probabilistic and parity operators. Let &lt;x; y&gt; be a standard pairing function mapping f0; 1g fl fl fl . We will use several operators on complexity classes defined in Schoning [22] and Toda <ref> [26] </ref>. Let C be any complexity class. We define the classes P C, BP C and C as follows: 1. <p> Valiant's proof (the only proof known of Valiant's Theorem) is substantially more intricate than the proof of the P ]P IP result given here. 5. A characterization of BP P In a recent seminal paper, S. Toda <ref> [26] </ref> proves that the polynomial hierarchy is contained in P ]P . His proof is a combination of two results, both significant in their own right.
Reference: [27] <author> L. Valiant, </author> <title> The complexity of computing the permanent, </title> <booktitle> Theoretical Computer Science 8 (1979), </booktitle> <pages> 189-201. </pages> <note> 26 Babai & Fortnow </note>
Reference-contexts: Preliminaries 2.1. Complexity classes for counting. By an NP machine we mean a Arithmetization 3 nondeterministic Turing machine that runs in time polynomial in the length of the input. FP will denote the class of polynomial time computable functions. Following Valiant <ref> [27] </ref>, we say a function f : f0; 1g fl ! Z is a ]P function if there exists an NP machine M such that for all x 2 f0; 1g fl , f (x) is exactly the number of accepting paths of M (x). <p> Valiant <ref> [27] </ref> originally defined ]P-completeness via polynomial-time Turing reductions and has shown that permanent of zero-one matrices is ]P-complete. In fact, his proof shows that the (0,1)-permanent is ]P-complete under nonadaptive polynomial-time Turing reductions. <p> Recall in particular that for m a fixed power of 2, the permanent mod m can be computed in polynomial time <ref> [27] </ref>.) 2.2. Probabilistic and parity operators. Let &lt;x; y&gt; be a standard pairing function mapping f0; 1g fl fl fl . We will use several operators on complexity classes defined in Schoning [22] and Toda [26]. Let C be any complexity class. <p> Corollary 4.2. ]P FIP. Consequently, P ]P IP. Proof. Clear. 2 We remark that the [20] proof depended on Valiant's celebrated result <ref> [27] </ref> that the permanent of (0; 1)-matrices is ]P-complete. Valiant's proof (the only proof known of Valiant's Theorem) is substantially more intricate than the proof of the P ]P IP result given here. 5. A characterization of BP P In a recent seminal paper, S.
Reference: [28] <author> L. Valiant and V. Vazirani, </author> <title> NP is as easy as detecting unique solutions, </title> <booktitle> Theoretical Computer Science 47 (1986), </booktitle> <pages> 85-93. </pages>
Reference-contexts: Retarded arithmetic programs for the polynomial time hierarchy In this section we reprove Toda's result that PH BP P. We use some of his intuition; in particular we, too, use the following Lemma of Rabin (see <ref> [28] </ref>). Apart from this Lemma, the proof given below is self-contained. Lemma 6.1. (Rabin [28]) Let S be a nonempty subset of F n 2 . Let us select n vectors w 1 ; : : : ; w n 2 F n 2 at random. <p> We use some of his intuition; in particular we, too, use the following Lemma of Rabin (see <ref> [28] </ref>). Apart from this Lemma, the proof given below is self-contained. Lemma 6.1. (Rabin [28]) Let S be a nonempty subset of F n 2 . Let us select n vectors w 1 ; : : : ; w n 2 F n 2 at random.
Reference: [29] <author> H. Venkateswaran, </author> <title> Circuit definitions of nondeterministic complexity classes, </title> <booktitle> in Proc. 8th FST & TCS, Lecture Notes in Comp. Sci. 338 (1988), </booktitle> <pages> 175-192. </pages>
Reference-contexts: Then it computes (still in deterministic polynomial time) the description of the nondeterministic Turing machine M n;m (n) associated with p n;m (n) . Finally, it simulates this machine on input ff. This completes the proof. 2 In an earlier work, Venkateswaran <ref> [29] </ref> characterized ]P functions in terms of certain arithmetic formulas of polynomial depth and polynomial degree. These formulas may have exponential size. We note that his characterization also follows from our characterization of ]P by expanding the binary substitution rule.
Reference: [30] <author> V. Zank o, </author> <title> ]P-completeness via many-one reductions, </title> <institution> University of Chicago Tech. </institution> <type> Report 90-18, </type> <institution> 1990. Manuscript received 30 March 1990 Laszlo Babai University of Chicago Chicago, IL 60637 and Eotvos University, Budapest, Hungary laci@cs.uchicago.edu Lance Fortnow Department of Computer Science University of Chicago 1100 E. </institution> <address> 58th St. Chicago, IL 60637 fortnow@cs.uchicago.edu </address>
Reference-contexts: Valiant [27] originally defined ]P-completeness via polynomial-time Turing reductions and has shown that permanent of zero-one matrices is ]P-complete. In fact, his proof shows that the (0,1)-permanent is ]P-complete under nonadaptive polynomial-time Turing reductions. Going one step further, Zanko <ref> [30] </ref> has shown that the (0; 1)-permanent remains ]P-complete under polynomial-time many-one reductions. 4 Babai & Fortnow From the proof it follows that (0; 1)-permanents mod m are ] m P-complete under many-one reductions for odd m. (The same is unlikely to hold for even m.
References-found: 30

