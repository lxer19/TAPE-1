URL: http://www.cs.man.ac.uk/~kung-kiu/pub/iclp94.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~kung-kiu/pub/
Root-URL: http://www.cs.man.ac.uk
Email: kung-kiu@cs.man.ac.uk  ornaghi@imiucca.csi.unimi.it  stenake@csd.uu.se  
Title: The Halting Problem for Deductive Synthesis of Logic Programs  
Author: Kung-Kiu Lau Mario Ornaghi Sten- Ake Tarnlund 
Address: Oxford Road, Manchester M13 9PL, United Kingdom  Via Comelico 39/41, Milano, Italy  P.O. Box 520, S-751 20 Uppsala, Sweden  
Affiliation: Department of Computer Science, University of Manchester  Dipartimento di Scienze dell'Informazione Universita' degli studi di Milano  Computing Science Department, Uppsala University  
Abstract: Deductive synthesis methods derive programs in an incremental manner, and therefore pose a halting problem when can synthesis stop with a correct program? We give a characterisation of this problem and state a halting principle as a solution. Another characteristic of deductive synthesis is that it may derive several correct programs, giving rise to another question which correct programs are desirable? We show that the answer is related to the halting problem, via the notion of steadfast, or reusable, programs as desirable programs. Our work also reveals that Clark's idea of the completion of a program is central to deductive synthesis, since it is the basis of our halting principle and our notion of steadfast programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bertoni, G. Mauri, and P. Miglioli. </author> <title> On the power of model theory in specifying abstract data types and in capturing their recursiveness. </title> <note> Fundamenta Informaticae VI(2):127-170, </note> <year> 1983. </year>
Reference-contexts: To discuss Q's total correctness, it will be more appropriate to talk about total correctness in a model, as opposed to total correctness in a framework as defined in Definition 2.2 (in Section 2.2), 12 This restriction can be avoided by using isoinitial models (see <ref> [1] </ref>) instead of canonical Herbrand models that we will consider here. by substituting truth in a model for validity in a framework.
Reference: [2] <author> C.C. Chang and H.J. Keisler. </author> <title> Model Theory. </title> <publisher> North-Holland, </publisher> <year> 1973. </year>
Reference-contexts: We will use first-order classical logic with identity (i.e. the identity axioms will be assumed), interpreted according to the usual model theoretic semantics (see e.g. <ref> [2] </ref>). We shall use H; K; R to denote formulas. H (x) will indicate that the free vari-ables of H are x.
Reference: [3] <author> K.L. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year>
Reference-contexts: More recently, Lau and Ornaghi [11] formalised deductive synthesis of logic programs and gave an incompleteness result. Clark's idea of the completion of a program <ref> [3] </ref> was originally conceived to justify semantically the inference rule `negation as failure' in logic programming. As we shall see, the notion of completion turns out to be a profound concept in deductive synthesis. <p> will propose one such criterion in Section 3.1. 2 We use total instead of the commonly used complete. 3 We assume a complete search strategy. 3 Correctness Criteria for Deductive Synthesis In this section, we propose a halting criterion based on Clark's completion Comp (P ) of a program P <ref> [3] </ref>. We normally assume that every predicate symbol r (x) of the current program P is introduced in the framework F by a definition axiom 8 (r (x) $ R (x)) We will use D P to denote the set of such definition axioms for P .
Reference: [4] <author> K.L. Clark. </author> <title> Predicate Logic as a Computational Formalism. </title> <type> Research Report 79/59, </type> <institution> Dept of Computing, Imperial College, </institution> <year> 1979. </year>
Reference-contexts: For logic programs, we adopt the definitions and the formalism of standard works such as <ref> [4, 9, 12] </ref>.
Reference: [5] <author> K.L. Clark and S.- A. </author> <title> Tarnlund. A first order theory of data and programs. </title> <booktitle> In Proc. </booktitle> <pages> IFIP 77 , pages 939-944. </pages> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference-contexts: We shall often use PA in our framework below. Several developments of program synthesis have taken advantage of the deductive method, for example Manna and Waldinger [13]. For logic programming, Hogger [8], Hansson and Tarnlund [7], and Lau and Prestwich [10] derived correct logic programs, while Clark and Tarnlund <ref> [5] </ref> developed a Peano-like theory for logic programs. More recently, Lau and Ornaghi [11] formalised deductive synthesis of logic programs and gave an incompleteness result. Clark's idea of the completion of a program [3] was originally conceived to justify semantically the inference rule `negation as failure' in logic programming.
Reference: [6] <author> Y. Deville. </author> <title> Logic Programming: Systematic Program Development. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Thus steadfastness of P works as a kind of `parametric correctness' in a class of models, where P assumes in each model M the appropriate behaviour that depends on Q M . It is interesting to observe that Deville <ref> [6] </ref> defined a similar notion of correctness for a logic procedure LP (p) that defines a predicate p. His criterion preserves what he calls the monotonicity of correctness of LP (p), which corresponds to our notion of steadfastness of LP (p).
Reference: [7] <author> A. Hansson and S.- A. </author> <title> Tarnlund. A natural programming calculus. </title> <booktitle> In Proc. </booktitle> <pages> IJCAI-79 , pages 348-355, </pages> <year> 1979. </year>
Reference-contexts: We shall often use PA in our framework below. Several developments of program synthesis have taken advantage of the deductive method, for example Manna and Waldinger [13]. For logic programming, Hogger [8], Hansson and Tarnlund <ref> [7] </ref>, and Lau and Prestwich [10] derived correct logic programs, while Clark and Tarnlund [5] developed a Peano-like theory for logic programs. More recently, Lau and Ornaghi [11] formalised deductive synthesis of logic programs and gave an incompleteness result.
Reference: [8] <author> C.J. </author> <title> Hogger. Derivation of logic programs. </title> <journal> Journal of the ACM , 28 </journal> <pages> 372-392, </pages> <year> 1981. </year>
Reference-contexts: We shall often use PA in our framework below. Several developments of program synthesis have taken advantage of the deductive method, for example Manna and Waldinger [13]. For logic programming, Hogger <ref> [8] </ref>, Hansson and Tarnlund [7], and Lau and Prestwich [10] derived correct logic programs, while Clark and Tarnlund [5] developed a Peano-like theory for logic programs. More recently, Lau and Ornaghi [11] formalised deductive synthesis of logic programs and gave an incompleteness result.
Reference: [9] <author> R. Kowalski. </author> <title> Predicate Logic as Programming Language. </title> <booktitle> In Proc. </booktitle> <pages> IFIP 74 , pages 569-574. </pages> <publisher> North-Holland, </publisher> <year> 1974. </year>
Reference-contexts: For logic programs, we adopt the definitions and the formalism of standard works such as <ref> [4, 9, 12] </ref>.
Reference: [10] <author> K.K. Lau and S.D. Prestwich. </author> <title> Top-down synthesis of recursive logic procedures from first-order logic specifications. </title> <editor> In D.H.D. Warren and P. Szeredi, editors, </editor> <booktitle> Proc. 7 th Int. Conf. on Logic Programming, </booktitle> <pages> pages 667-684. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: We shall often use PA in our framework below. Several developments of program synthesis have taken advantage of the deductive method, for example Manna and Waldinger [13]. For logic programming, Hogger [8], Hansson and Tarnlund [7], and Lau and Prestwich <ref> [10] </ref> derived correct logic programs, while Clark and Tarnlund [5] developed a Peano-like theory for logic programs. More recently, Lau and Ornaghi [11] formalised deductive synthesis of logic programs and gave an incompleteness result.
Reference: [11] <author> K.K. Lau and M. Ornaghi. </author> <title> An incompleteness result for deductive synthesis of logic programs. </title> <editor> In D.S. Warren, editor, </editor> <booktitle> Proc. 10 th Int. Conf. on Logic Programming, </booktitle> <pages> pages 456-477, </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: For logic programming, Hogger [8], Hansson and Tarnlund [7], and Lau and Prestwich [10] derived correct logic programs, while Clark and Tarnlund [5] developed a Peano-like theory for logic programs. More recently, Lau and Ornaghi <ref> [11] </ref> formalised deductive synthesis of logic programs and gave an incompleteness result. Clark's idea of the completion of a program [3] was originally conceived to justify semantically the inference rule `negation as failure' in logic programming. <p> P Q implies Comp + (P ) Comp + (Q), whereas Comp (P ) is non-monotonic, i.e. there are P Q such that Comp (P ) 6 Comp (Q). 4 We call Ax (P ) success axioms in <ref> [11] </ref>. 5 We call Comp (p) failure axioms in [11], where we use the contrapositive form 8 (:p (x) :E 1 ^ ^ :E k ). <p> P Q implies Comp + (P ) Comp + (Q), whereas Comp (P ) is non-monotonic, i.e. there are P Q such that Comp (P ) 6 Comp (Q). 4 We call Ax (P ) success axioms in <ref> [11] </ref>. 5 We call Comp (p) failure axioms in [11], where we use the contrapositive form 8 (:p (x) :E 1 ^ ^ :E k ).
Reference: [12] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <address> 2nd edition, </address> <year> 1987. </year>
Reference-contexts: For logic programs, we adopt the definitions and the formalism of standard works such as <ref> [4, 9, 12] </ref>.
Reference: [13] <author> Z. Manna and R. Waldinger. </author> <title> A deductive approach to program synthesis. </title> <journal> ACM TOPLAS , 2(1) </journal> <pages> 90-121, </pages> <month> Jan </month> <year> 1980. </year>
Reference-contexts: We shall often use PA in our framework below. Several developments of program synthesis have taken advantage of the deductive method, for example Manna and Waldinger <ref> [13] </ref>. For logic programming, Hogger [8], Hansson and Tarnlund [7], and Lau and Prestwich [10] derived correct logic programs, while Clark and Tarnlund [5] developed a Peano-like theory for logic programs. More recently, Lau and Ornaghi [11] formalised deductive synthesis of logic programs and gave an incompleteness result.
Reference: [14] <author> Z. Manna and R. Waldinger. </author> <booktitle> The Deductive Foundations of Computer Pro--gramming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: Thus, in PA we can specify any computable function by a formula. Other examples of first-order theories interesting for Computer Science are presented in <ref> [14] </ref>. Thus we define a specification in a general framework as follows: Definition 2.1 A specification framework is a first-order theory with identity, and we shall assume that it is consistent. We will denote specification frameworks by F; G; : : :.
Reference: [15] <author> J.C. Shepherdson. </author> <title> Negation in logic programming. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 19-88. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: First, we define free (P ) to be the freeness axioms for the constant and function symbols of P <ref> [15] </ref>. Informally, these axioms ensure the unique meanings of these symbols.
References-found: 15

