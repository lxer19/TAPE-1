URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/chou-intervalsched.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: http://www.cs.washington.edu
Title: Interval Scheduling: Fine-Grained Code Scheduling for Embedded Systems  
Author: Pai Chou, Gaetano Borriello 
Address: Box 352350  Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering,  University of Washington,  
Abstract: A central problem in embedded system co-synthesis is the generation of software for low-level I/O. Scheduling still remains a manual task because existing coarse-grained real-time scheduling algorithms are not applicable: they assume fixed delays even though the run times are often variable, and they incur too much overhead. To solve this problem, we present a new static ordering technique, called interval scheduling, for meeting general timing constraints on fine-grained, variable-delay operations without using a run-time executive. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Y. Park. </author> <title> Predicting Deterministic Execution Times of Real-Time Programs. </title> <type> PhD thesis, </type> <institution> Univ. of Washington, </institution> <year> 1992. </year> <type> Tech. Report 92-08-02, </type> <institution> Dept. of Computer Science & Engineering. </institution>
Reference: [2] <author> E. A. Lee and S. Ha. </author> <title> Scheduling strategies for multiprocessor real-time DSP. </title> <booktitle> In Proc. of GLOBECOM, </booktitle> <volume> volume 2, </volume> <pages> pages 1279-1283, </pages> <month> Nov. </month> <year> 1989. </year>

Reference: [4] <author> D. C. Ku and G. De Micheli. </author> <title> Relative scheduling un der timing constraints: algorithms for high-level syn thesis of digital circuits. </title> <journal> IEEE Trans. on Computer Aided Design, </journal> <volume> 11(6) </volume> <pages> 696-717, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Some of our heuristics such as least-slop are specific to the interval scheduling problems, but most heuristics are readily applicable to previous techniques that did not try to optimize for schedule length <ref> [4, 5] </ref>. We have assumed the execution delays are independent of each other, and that all combinations of delay values within the given bounds are possible.
Reference: [5] <author> P. Chou and G. Borriello. </author> <title> Software scheduling in the co-synthesis of reactive real-time systems. </title> <booktitle> In Proc. 31st DAC, </booktitle> <pages> pages 1-4, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Some of our heuristics such as least-slop are specific to the interval scheduling problems, but most heuristics are readily applicable to previous techniques that did not try to optimize for schedule length <ref> [4, 5] </ref>. We have assumed the execution delays are independent of each other, and that all combinations of delay values within the given bounds are possible.
Reference: [6] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: a Guide to the Theory of NP Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: This algorithm solves "Sequencing with Release Times and Deadlines,", which is NP-complete in the strong sense <ref> [6] </ref>. IV Scheduling Heuristics The algorithm always finds a valid schedule whenever one exists. However, when several valid schedules exist, it returns the first one it finds; it does not attempt to meet any other objective, such as minimizing schedule length.
References-found: 5

