URL: http://www.cs.utah.edu/projects/flux/unpub/procjava.ps
Refering-URL: http://www.cs.utah.edu/projects/flux/java/alta/index.html
Root-URL: 
Title: Nested Java Processes: OS Structure for Mobile Code  
Author: Patrick Tullmann Jay Lepreau 
Affiliation: University of Utah  
Abstract: The majority of work on protection in single-language mobile code environments focuses on information security issues and looks to the language environment for solutions. What is needed in these environments are not ad-hoc or incremental changes but a coherent approach to security, failure isolation, and resource management. Protection, separation, and control of the resources used by mutually untrusting components, applets, applications, or agents are exactly the same problems faced by multi-user operating systems. Therefore, we believe that real solutions will come only if an OS model is rigorously and uniformly applied. We present our initial experience developing a Java-based system which seeks to emulate a highly structured OS based on hardware-enforced protection, Fluke, and provides features appropriate to mobile code. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fiuczyn-ski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, Safety, and Performance in the SPIN Operating System. </title> <booktitle> In Proc. of the 15th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, CO, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: We need not look far: the process abstraction has historically been the unit of protection and resource management in operating systems, which have typically used hardware-enforced protection to restrict memory access between processes. In several new execution environments, such as kernel extensions in SPIN <ref> [1] </ref> and Java applets in Web browsers, a type-safe language replaces the MMU in providing memory safety, and the system-provided protection abstraction is much lighter weight than a traditional process.
Reference: [2] <author> J. Bruno, E. Gabber, B. Ozden, and A. Silberschatz. </author> <title> The Eclipse Operating System: Providing Quality of Service via Reservation Domains. </title> <note> http://www.bell-labs.com/project/eclipse/, 1997. </note>
Reference-contexts: For example, the Lava system [11] provides tight security between different JVMs, at acceptable cost, but apparently no particular resource management. Nemesis [17] was one of the earlier systems to concentrate on QoS issues, achieving good performance and good control. Eclipse <ref> [2] </ref> similarly concentrates on QoS, but for multiple resources.
Reference: [3] <author> G. Clements and G. Morrison. </author> <title> Korean implementation of the Java(tm) core class libraries. </title> <publisher> ftp://sensei.co.uk/misc/kore.tar.gz. </publisher>
Reference-contexts: We have enhanced java.lang.Thread to support our extended thread semantics, modifying the Java core libraries provided by the Kore project <ref> [3] </ref>, a clean-room implementation compatible with JDK version 1.0.2. This system currently supports multiple applications on a single virtual machine and correctly handles unknown class faults: an IPC message is generated to the parent process which can resolve the name to any class to which it has access.
Reference: [4] <institution> Digitivity Corp. Digitivity CAGE, </institution> <year> 1997. </year> <note> http://- www.digitivity.com/overview.html. </note>
Reference-contexts: Hardware-supported Approaches Fear of Java insecurity is so great that two groups have independently developed a Java applet execution model that requires the applets to run on dedicated, specially protected and isolated hosts: the Java Playground [13] and Digitiv-ity's Cage <ref> [4] </ref>. However, this model is severely flawed: it imposes inherent limits on the functionality achievable from mobile code, essentially limiting execution to the restrictive Java applet model (dancing pigs), disallowing the richer semantics the could be made available if the local system provided the needed security and resource controls.
Reference: [5] <author> B. Ford, G. Back, G. Benson, J. Lepreau, A. Lin, and O. Shivers. </author> <title> The Flux OSKit: A Substrate for OS and Language Research. </title> <booktitle> In Proc. of the 17th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 38-51, </pages> <address> St. Malo, France, </address> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: Initial memory controls have been implemented and tested. Extensions to the virtual machine and the Java objects to support CPU inheritance scheduling are under active development. The resulting Java-based OS will run atop normal OSs in user-mode, and also in kernel-mode, when linked with our OSKit <ref> [5] </ref>. The latter system should provide a true Java-based OS appropriate for supporting distributed Java components. Finally, we will learn to what extent a particular OS structure can be built on drastically different protection mechanisms: initial results are promising.
Reference: [6] <author> B. Ford, M. Hibler, J. Lepreau, P. Tullmann, G. Back, and S. Claw-son. </author> <title> Microkernels Meet Recursive Virtual Machines. </title> <booktitle> In Proc. of the Second Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 137-151, </pages> <address> Seattle, WA, Oct. 1996. </address> <publisher> USENIX Assoc. </publisher>
Reference-contexts: The focus of that paper was on making the case for the importance of the local OS, and outlining an appropriate OS for that environment: the Fluke <ref> [6] </ref> operating system, an OS based on a recursive virtual machine model, analogous to the Cambridge CAP Computer [24], but implemented by a microkernel instead of special hardware. In this paper we assume that the importance of the local OS to distributed applications is evident.
Reference: [7] <author> B. Ford and S. Susarla. </author> <title> CPU Inheritance Scheduling. </title> <booktitle> In Proc. of the Second Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 91-105, </pages> <address> Seattle, WA, Oct. 1996. </address> <publisher> USENIX Assoc. </publisher>
Reference-contexts: This design optionally exposes all of the resources required by a process to the creator of that process. For example, Fluke provides virtual memory through a user-level server which completely controls the memory resources of child environments. The model's CPU inheritance scheduling <ref> [7] </ref> framework allows normal unprivileged threads to schedule their children, and permits widely different scheduling policies to coexist in a single system. CPU use, memory use, and file system and network access can be mediated by any ancestor.
Reference: [8] <author> M. Franz and T. Kistler. </author> <note> Juice web page. http://www.ics.uci.edu/- juice/intro.html. </note>
Reference-contexts: While the language provides safety from unintentional programmer errors, global resources are available with no guaranteed way of reclaiming them. The Juice <ref> [8] </ref> project uses Oberon and Slim Binaries to provide a Java-like environment for downloaded code. Juice addresses many of the performance and security problems associated with large Java binaries and the necessity of run-time security checks in the JVM. It does not, as far as know, address resource issues.
Reference: [9] <author> L. Gong, M. Mueller, H. Prafullchandra, and R. Schemers. </author> <title> Going Beyond the Sandbox: An Overview of the New Security Architecture in the Java Development Kit 1.2. </title> <booktitle> In USENIX Symp. on Internet Technologies and Systems Proc., </booktitle> <pages> pages 103-112, </pages> <address> Monterey, CA, </address> <month> Dec. </month> <year> 1997. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: Finding this policy far too limiting, JavaSoft developed the more flexible model in JDK1.2 which introduces access control lists and signed code <ref> [9] </ref>.
Reference: [10] <author> C. Hawblitzel, C.-C. Chang, G. Czajkowski, D. Hu, and T. von Eicken. </author> <title> Implementing Multiple Protection Domains in Java. </title> <type> Technical Report 97-1660, </type> <institution> Department of Computer Science, Cornell University, </institution> <year> 1997. </year>
Reference-contexts: Juice addresses many of the performance and security problems associated with large Java binaries and the necessity of run-time security checks in the JVM. It does not, as far as know, address resource issues. Cornell's J-kernel <ref> [10] </ref> is perhaps the sole effort besides ours that fully recognizes the need for a first-class notion of protection domain in these safe-language-based systems. <p> In Fluke, processes can directly share state via shared memory. In Java, sharing memory is accomplished by sharing object references, which can improve performance. Sharing object references between domains can lead to problems, as described in <ref> [10] </ref>, but when inter-process trust allows, such flexibility is useful. Additionally, we feel these problems can be adequately handled at the application level. If a process needs to restrict the sharing of object references then it must interpose on the communication channels where the reference can be sent.
Reference: [11] <author> T. Jaeger, J. Liedtke, and N. Islam. </author> <title> Operating System Protection for Fine-Grained Programs. </title> <booktitle> In Seventh USENIX Security Symp. Proc., </booktitle> <pages> pages 143-157, </pages> <month> Jan. </month> <year> 1998. </year>
Reference-contexts: A number of microkernel style OS's have been built which provide either relatively high security or resource management for mobile code, but not both. For example, the Lava system <ref> [11] </ref> provides tight security between different JVMs, at acceptable cost, but apparently no particular resource management. Nemesis [17] was one of the earlier systems to concentrate on QoS issues, achieving good performance and good control. Eclipse [2] similarly concentrates on QoS, but for multiple resources.
Reference: [12] <author> J. Lepreau, B. Ford, and M. Hibler. </author> <title> The Persistent Relevance of the Local Operating System to Worldwide Applications. </title> <booktitle> In Proc. of the Seventh ACM SIGOPS European Workshop, </booktitle> <pages> pages 133-140, </pages> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: 1 Operating System Required In the last European SIGOPS Workshop, our paper <ref> [12] </ref> argued that the local operating system is an essential foundation for global applications. We described the many demands that a reasonably well functioning distributed system places on the local OS, and particularly emphasized end-system security in the widespread presence of mobile code.
Reference: [13] <author> D. Malkhi, M. Reiter, and A. Rubin. </author> <title> The Design and Implementation of a Java Playground. </title> <type> Technical Report 97-32, </type> <institution> AT&T Labs-Research, </institution> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: The system is implemented without modifying the JVM, so is quite slow. Hardware-supported Approaches Fear of Java insecurity is so great that two groups have independently developed a Java applet execution model that requires the applets to run on dedicated, specially protected and isolated hosts: the Java Playground <ref> [13] </ref> and Digitiv-ity's Cage [4].
Reference: [14] <author> MCI. </author> <title> networkMCI DoS Tracker: Denial of Service Tracker. </title> <note> http://- www.security.mci.net/dostracker. </note>
Reference-contexts: Contact author: Jay Lepreau, lepreau@cs.utah.edu; Univ. of Utah, CS Dept, 50 S. Central Campus Dr. Rm. 3190, SLC UT 84112-9205, USA 1.1 An Application Scenario A few months ago MCI developed and distributed its Denial of Service Tracker <ref> [14] </ref>, after getting their router vendor to add the required interfaces and code to the routers. DoSTracker works as follows: many denial of service attacks involve generating packets that spoof the IP address of the victim's host.
Reference: [15] <author> A. Myers and B. Liskov. </author> <title> A Decentralized Model for Information Flow Control. </title> <booktitle> In Proc. of the 17th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 129-142, </pages> <address> St. Malo, France, </address> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: With one exception noted below, as currently applied they have not yielded comprehensive designs. Recent work designed extensions to the type system of a (non-Java) language to support controls on information flow <ref> [15] </ref>. Refreshingly, the authors do not claim that this approach provides a complete solution to security woes, but contemplate using this approach to augment the security of applications on both traditional and non-traditional operating systems. Sun's JavaOS [21] is a standalone OS originally written almost entirely in Java.
Reference: [16] <author> L. L. Peterson et al. Joust: </author> <title> A Platform for Liquid Software. </title> <type> Technical Report 97-16, </type> <institution> Univ. of Arizona, CS Dept., </institution> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: Nemesis [17] was one of the earlier systems to concentrate on QoS issues, achieving good performance and good control. Eclipse [2] similarly concentrates on QoS, but for multiple resources. Joust <ref> [16] </ref>, a JVM integrated into the Scout operating system, provides CPU scheduling but no memory resource control, and as of yet, no particular security, though the associated Escort ef fort [20] is working on it. 2 Finally, contrast with influential systems such as Eden and Emerald, the current tendency to relegate
Reference: [17] <author> T. Roscoe. </author> <title> The Structure of a Multi-Service Operating System. </title> <type> PhD thesis, </type> <institution> Queens' College, University of Cambridge, </institution> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: A number of microkernel style OS's have been built which provide either relatively high security or resource management for mobile code, but not both. For example, the Lava system [11] provides tight security between different JVMs, at acceptable cost, but apparently no particular resource management. Nemesis <ref> [17] </ref> was one of the earlier systems to concentrate on QoS issues, achieving good performance and good control. Eclipse [2] similarly concentrates on QoS, but for multiple resources.
Reference: [18] <author> E. G. Sirer, A. J. Gregory, and B. Bershad. Kimera: </author> <title> A Java System Architecture. </title> <address> http://kimera.cs.washington.edu/. </address>
Reference-contexts: The Kimera <ref> [18] </ref> system has similarities, in that the verifier and compiler must be run on specially isolated hosts, but the resulting native code is allowed to run in the browser on the desktop.
Reference: [19] <author> S. Smalley. Flask: </author> <title> Flux Advanced Security Kernel. </title> <address> http://- www.cs.utah.edu/projects/flux/fluke/html/flask.html, Jan. </address> <year> 1997. </year>
Reference-contexts: In the interests of performance, the kernel enables process hierarchy, but does not require it. For example, a process can create multiple children and closely manage their file system accesses, while not interposing on the CPU or memory interfaces. Flask is a security-enhanced version of Fluke <ref> [19] </ref>, developed with collaborators at the NSA. Flask provides a mandatory security framework, a mechanism-independent authentication subsystem, and a separable cryptographic subsystem. A key feature of Flask is the separation of security enforcement from security policy decisions.
Reference: [20] <author> O. Spatscheck and L. L. Peterson. Escort: </author> <title> A Path-Based OS Security Architecture. </title> <type> Technical Report 97-17, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: Eclipse [2] similarly concentrates on QoS, but for multiple resources. Joust [16], a JVM integrated into the Scout operating system, provides CPU scheduling but no memory resource control, and as of yet, no particular security, though the associated Escort ef fort <ref> [20] </ref> is working on it. 2 Finally, contrast with influential systems such as Eden and Emerald, the current tendency to relegate OS design to an afterthought, relying on the features of advanced languages for security and structure.
Reference: [21] <author> Sun Microsystems, Inc. </author> <title> JavaOS: A Standalone Java Environment, </title> <month> Feb. </month> <year> 1997. </year> <note> http://www.javasoft.com/products/javaos/- javaos.white.html. </note>
Reference-contexts: Refreshingly, the authors do not claim that this approach provides a complete solution to security woes, but contemplate using this approach to augment the security of applications on both traditional and non-traditional operating systems. Sun's JavaOS <ref> [21] </ref> is a standalone OS originally written almost entirely in Java. Although it bills itself as a first-class OS for Java applications, from the scant literature available, it appears to provide a single JVM with no partic ular memory separation between applets.
Reference: [22] <author> D. L. Tennenhouse, J. M. Smith, W. D. Sincoskie, D. J. Wetherall, and G. J. Minden. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: The compatibility and flexibility problem would be solved if MCI's ISP customers could run small programs on the routers. This, of course, is one example of an active network <ref> [22] </ref>. However, one needn't commit to the aggressive vision of active networkscode in any packetto appreciate the value of routers' supporting networking management mobile code of varying trust. Network management is a domain that could greatly profit from mobile code and dynamic composition of mobile components.
Reference: [23] <author> D. S. Wallach, D. Balfanz, D. Dean, and E. W. Felten. </author> <title> Extensible Security Architectures for Java. </title> <booktitle> In Proc. of the 17th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 116-128, </pages> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: Indeed, a Java applet's execution environment is little more than threads with a few ad-hoc constraintsa situation that provides almost no control over resource use, and has led to numerous security problems. Although steps are being taken to improve the security situation in Java <ref> [23] </ref>, that is not enough. <p> Truly, in the battle against Ac-tiveX and in chasing the functionality imperative, JavaSoft will give users plenty of rope to hang themselves. Numerous other approaches to Java security exist <ref> [23] </ref>, including capabilities, stack introspection which intuits the current principal based on the call stack, and name space management, which manipulates the class name space to control suspect code's access to dangerous functionality. <p> In any event, this sort of interposition and monitoring is typically required in capability based systems to prevent unwanted capability propagation. In contrast to the argument <ref> [23] </ref> that a capability-based system in Java would require restructuring all of the Java system classes, we contend that the Java system classes do an excellent job of containing and reusing the methods that need to be modified to support a capability system.
Reference: [24] <author> M. V. Wilkes and R. M. Needham. </author> <title> The Cambridge CAP Computer and its Operating System. </title> <publisher> North Holland, </publisher> <address> NY, </address> <year> 1979. </year>
Reference-contexts: The focus of that paper was on making the case for the importance of the local OS, and outlining an appropriate OS for that environment: the Fluke [6] operating system, an OS based on a recursive virtual machine model, analogous to the Cambridge CAP Computer <ref> [24] </ref>, but implemented by a microkernel instead of special hardware. In this paper we assume that the importance of the local OS to distributed applications is evident.
Reference: [25] <author> T. Wilkinson. </author> <title> KaffeA virtual machine to compile and interperet Java(tm) bytecodes. </title> <address> http://www.kaffe.org/. </address>
Reference-contexts: Such fine-grained sharing carries the caveat that it can lead to a coupling of domain termination and of GC costs. 2.3 Status We have built our extension to the virtual machine on Kaffe <ref> [25] </ref>, a freely available, Java bytecode-compatible virtual machine that supports both interpretive and translator (JIT) modes. We have enhanced java.lang.Thread to support our extended thread semantics, modifying the Java core libraries provided by the Kore project [3], a clean-room implementation compatible with JDK version 1.0.2.
Reference: [26] <author> N. Wirth and J. Gutknecht. </author> <title> Project Oberon: The Design of an Operating System and Compiler. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year> <month> 4 </month>
Reference-contexts: Sun's JavaOS [21] is a standalone OS originally written almost entirely in Java. Although it bills itself as a first-class OS for Java applications, from the scant literature available, it appears to provide a single JVM with no partic ular memory separation between applets. The Oberon language/OS <ref> [26] </ref> shares many of Java's features, although it is a non-preemptive, single-threaded system. Protection between tasks is enforced by the language, but the exposure of global state to all top-level procedure calls (commands) and the uninterruptibility of commands means isolation is not enforceable.
References-found: 26

