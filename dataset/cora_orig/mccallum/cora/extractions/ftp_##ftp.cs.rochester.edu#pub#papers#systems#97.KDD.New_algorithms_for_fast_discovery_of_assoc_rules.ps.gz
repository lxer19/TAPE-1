URL: ftp://ftp.cs.rochester.edu/pub/papers/systems/97.KDD.New_algorithms_for_fast_discovery_of_assoc_rules.ps.gz
Refering-URL: http://www.cs.indiana.edu/cstr/search/?Knowledge+discovery+MINK%3D2
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fzaki,srini,ogihara,weig@cs.rochester.edu  
Title: New Algorithms for Fast Discovery of Association Rules  
Author: M. J. Zaki, S. Parthasarathy, M. Ogihara, and W. Li 
Address: Rochester NY 14627  
Affiliation: Computer Science Department University of Rochester  
Abstract: Discovery of association rules is an important problem in database mining. In this paper we present new algorithms for fast association mining, which scan the database only once, addressing the open question whether all the rules can be efficiently extracted in a single database pass. The algorithms use novel itemset clustering techniques to approximate the set of potentially maximal frequent itemsets. The algorithms then make use of efficient lattice traversal techniques to generate the frequent itemsets contained in each cluster. We propose two clustering schemes based on equivalence classes and maximal hypergraph cliques, and study two traversal techniques based on bottom-up and hybrid search. We also use a vertical database layout to cluster related transactions together. Experimental results show improvements of over an order of magnitude compared to previous algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Agrawal, R. & Shafer, J. </author> <year> 1996. </year> <title> Parallel mining of association rules. </title> <journal> In IEEE Knowledge & Data Engg., </journal> <volume> 8(6) </volume> <pages> 962-969. </pages>
Reference-contexts: Introduction One of the central KDD tasks is the discovery of association rules. The prototypical application is the analysis of supermarket sales or basket data <ref> (Agrawal et al. 1996) </ref>, which can be formally stated as follows: Let I = fi 1 ; i 2 ; ; i m g be the set of database items. <p> Given m items, there are potentially 2 m frequent itemsets, which form a lattice of subsets over I. However, only a small fraction of the whole lattice space is frequent. This paper presents efficient methods to discover these frequent itemsets. Related Work Among the extant solutions, the Apri-ori algorithm <ref> (Agrawal et al. 1996) </ref> was shown to be superior to earlier approaches (Park et al. 1995; Holsheimer et al. 1995). It uses the downward closure property of itemset support to prune the item-set lattice the property that all subsets of a frequent itemset must themselves be frequent. <p> This is based on the intuition that the larger the support the more likely is the itemset to be part of a larger itemset. Figure 3 shows an example of the hybrid scheme. Transaction Clustering There are two possible layouts of the database for association mining. The horizontal layout <ref> (Agrawal et al. 1996) </ref> consists of a list of transactions. Each transaction has an identifier followed by a list of items. The vertical layout (Holsheimer et al. 1995) consists of a list of items. Each item has a tid-list the list of all the transactions containing the item. <p> The use of simple intersection operations also makes the new algorithms an attractive option for direct implementation on general purpose database systems. Experimental Results Our experiments used a 100MHz MIPS processor with 256MB main memory, with different benchmark databases <ref> (Agrawal et al. 1996) </ref>. For fair comparison, all algorithms use 2-itemset supports from the preprocessing step. See (Zaki et al. 1997b) for detailed ex (a) Total Execution Time (b) Number of Transactions Scale-up periments.
Reference: <author> Agrawal, R.; Mannila, H.; Srikant, R.; Toivonen, H.; & Verkamo, A. </author> <year> 1996. </year> <title> Fast discovery of association rules. </title> <booktitle> In Advances in KDD. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: Introduction One of the central KDD tasks is the discovery of association rules. The prototypical application is the analysis of supermarket sales or basket data <ref> (Agrawal et al. 1996) </ref>, which can be formally stated as follows: Let I = fi 1 ; i 2 ; ; i m g be the set of database items. <p> Given m items, there are potentially 2 m frequent itemsets, which form a lattice of subsets over I. However, only a small fraction of the whole lattice space is frequent. This paper presents efficient methods to discover these frequent itemsets. Related Work Among the extant solutions, the Apri-ori algorithm <ref> (Agrawal et al. 1996) </ref> was shown to be superior to earlier approaches (Park et al. 1995; Holsheimer et al. 1995). It uses the downward closure property of itemset support to prune the item-set lattice the property that all subsets of a frequent itemset must themselves be frequent. <p> This is based on the intuition that the larger the support the more likely is the itemset to be part of a larger itemset. Figure 3 shows an example of the hybrid scheme. Transaction Clustering There are two possible layouts of the database for association mining. The horizontal layout <ref> (Agrawal et al. 1996) </ref> consists of a list of transactions. Each transaction has an identifier followed by a list of items. The vertical layout (Holsheimer et al. 1995) consists of a list of items. Each item has a tid-list the list of all the transactions containing the item. <p> The use of simple intersection operations also makes the new algorithms an attractive option for direct implementation on general purpose database systems. Experimental Results Our experiments used a 100MHz MIPS processor with 256MB main memory, with different benchmark databases <ref> (Agrawal et al. 1996) </ref>. For fair comparison, all algorithms use 2-itemset supports from the preprocessing step. See (Zaki et al. 1997b) for detailed ex (a) Total Execution Time (b) Number of Transactions Scale-up periments.
Reference: <author> Holsheimer, M.; Kersten, M.; Mannila, H.; & Toivo-nen, H. </author> <year> 1995. </year> <title> A perspective on databases and data mining. </title> <booktitle> In 1st KDD Conf. </booktitle>
Reference-contexts: Figure 3 shows an example of the hybrid scheme. Transaction Clustering There are two possible layouts of the database for association mining. The horizontal layout (Agrawal et al. 1996) consists of a list of transactions. Each transaction has an identifier followed by a list of items. The vertical layout <ref> (Holsheimer et al. 1995) </ref> consists of a list of items. Each item has a tid-list the list of all the transactions containing the item. The vertical format seems more suitable for association mining since the support of a candidate k-itemset can be computed by simple tid-list intersections.
Reference: <author> Park, J.; Chen, M.; & Yu, P. </author> <year> 1995. </year> <title> An effective hash based algorithm for mining association rules. </title> <booktitle> In SIG-MOD Conf. </booktitle>
Reference: <author> Savasere, A.; Omiecinski, E.; and Navathe, S. </author> <year> 1995. </year> <title> An efficient algorithm for mining association rules in large databases. </title> <booktitle> In 21st VLDB Conf Toivonen, H. </booktitle> <year> 1996. </year> <title> Sampling large databases for association rules. </title> <booktitle> In 22nd VLDB Conf Zaki, </booktitle> <editor> M.; Ogihara, M.; Parthasarathy, S.; & Li, W. </editor> <year> 1996. </year> <title> Parallel data mining for association rules on shared-memory multi-processors. </title> <booktitle> In Supercomputing. </booktitle>
Reference-contexts: Thus only the frequent k-itemsets are used to construct candidate (k + 1)-itemsets. A pass over the database is made at each level to find the frequent itemsets. The Partition algorithm <ref> (Savasere et al. 1995) </ref> minimizes I/O by scanning the database only twice. Once for generating a set of potential frequent itemsets, and once for gathering their support.
Reference: <author> Zaki, M.; Parthasarathy, S.; Li, W.; & Ogihara, M. </author> <year> 1997a. </year> <title> Evaluation of sampling for data mining of association rules. </title> <booktitle> In 7th Wkshp. Resrch. Iss. Data Engg. </booktitle>
Reference: <author> Zaki, M.; Parthasarathy, S.; Ogihara, M.; & Li, W. </author> <year> 1997b. </year> <title> New algorithms for fast discovery of association rules. </title> <type> TR 651, </type> <institution> CS Dept, Univ. of Rochester. </institution>
Reference-contexts: For example, for the class [1], the former generated the maximal element 12345678, while the latter a more refined set f1235; 1258; 1278; 13456; 1568g. The maximal cliques are discovered using a dynamic programming algorithm; see <ref> (Zaki et al. 1997b) </ref> for details. As the edge density of the equivalence class graph increases the cost for generating the cliques may increase. Some of the factors affecting the edge density include decreasing support and increasing transaction size. <p> If we are interested in all frequent itemsets, we can then gather the support of all their subsets as well. We rule out a pure top-down ap proach due to the inaccuracies in the clusters <ref> (Zaki et al. 1997b) </ref>, and propose a hybrid top-down/bottom-up scheme that works well in practice. The basic idea is to start with a single element from the itemset cluster, and extend this by one more element till we generate an infrequent itemset. This comprises the top-down phase. <p> Furthermore, the horizontal layout seems suitable only for the bottom-up traversal. The inverted layout, however, has a drawback. Intersecting 1-itemset tid-lists to determine L 2 can be very expensive <ref> (Zaki et al. 1997b) </ref>. This can be solved by using sampling (Toivonen 1996; Zaki et al. 1997a), or by using a preprocessing step to gather the support all 2-itemsets. <p> Experimental Results Our experiments used a 100MHz MIPS processor with 256MB main memory, with different benchmark databases (Agrawal et al. 1996). For fair comparison, all algorithms use 2-itemset supports from the preprocessing step. See <ref> (Zaki et al. 1997b) </ref> for detailed ex (a) Total Execution Time (b) Number of Transactions Scale-up periments. In figure 4 a), we compare our new algorithms against Apriori and Partition (with 10 partitions) on T20.I6.D100K database. <p> The number of partitions for Partition was varied from 1 to 50. While all the algorithms scale linearly, the slope is much smaller for the new algorithms. The new algorithms also scale well with transaction size, and have very low memory utilization <ref> (Zaki et al. 1997b) </ref>. Conclusions We proposed new algorithms for fast association mining, using three main techniques. We first cluster item sets using equivalence classes or maximal hypergraph cliques. We then generate the frequent itemsets from each cluster using bottom-up or hybrid traversal.
Reference: <author> Zaki, M.; Parthasarathy, S.; & Li, W. </author> <year> 1997c. </year> <title> A localized algorithm for parallel association mining. </title> <booktitle> In 9th ACM Symp. Parallel Algorithms & Architectures. </booktitle>
References-found: 8

