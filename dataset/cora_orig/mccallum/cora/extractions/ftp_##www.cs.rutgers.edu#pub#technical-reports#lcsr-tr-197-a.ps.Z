URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-197-a.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: ryder@cs.rutgers.edu  
Title: Static Type Determination for C  
Author: Hemant D. Pande Barbara G. Ryder 
Web: LCSR-TR-197-A  
Address: 1 Mangaldas Road, Pune-411050, India New Brunswick, NJ 08903  
Affiliation: Tata Research Development and Department of Computer Science Design Centre Rutgers University  
Note: To appear in the Proceedings of the Sixth USENIX C Technical Conference  
Abstract: Static type determination involves compile time calculation of the type of object a pointer may point to at a particular program point during some execution. We show that the problem of precise interprocedural type determination is NP-hard in the presence of inheritance, virtual methods and pointers. We highlight the significance of type determination in improving code efficiency and precision of other static analyses. We present a safe, approximate algorithm for C ++ programs with single level pointers, using the conditional analysis technique [LR91]. We discuss the generalization of our approach to analyze programs with multiple levels of pointer dereferencing.
Abstract-found: 1
Intro-found: 1
Reference: [Bur90] <author> M. Burke. </author> <title> An interval-based approach to exhaustive and incremental interprocedu-ral data flow analysis. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(3) </volume> <pages> 341-395, </pages> <month> July </month> <year> 1990. </year>
Reference: [CBC93] <author> J.-D. Choi, M. Burke, and P. Carini. </author> <title> Efficient flow-sensitive interprocedural computation of pointer-induced aliases and side effects. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference: [CG94] <author> B. Calder and D. Grunwald. </author> <title> Reducing indirect function call overhead in C ++ programs. </title> <booktitle> In Proceedings of the Twenty First Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1994. </year>
Reference: [CK88] <author> K. Cooper and K. Kennedy. </author> <title> Interprocedural side-effect analysis in linear time. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 57-66, </pages> <month> June </month> <year> 1988. </year>
Reference: [CK89] <author> K. Cooper and K. Kennedy. </author> <title> Fast interprocedural alias analysis. </title> <booktitle> In Conference Record of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 49-59, </pages> <month> January </month> <year> 1989. </year>
Reference: [CU89] <author> C. Chambers and D. Ungar. </author> <title> Customization: optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language. </title> <booktitle> In Proceedings of the SIG-PLAN'89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 146-160, </pages> <month> June </month> <year> 1989. </year>
Reference: [CU90] <author> C. Chambers and D. Ungar. </author> <title> Iterative type analysis and extended message splitting: optimizing dynamically-typed object-oriented programs. </title> <booktitle> In Proceedings of the SIGPLAN'90 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 150-164, </pages> <month> June </month> <year> 1990. </year>
Reference: [Cal88] <author> D. Callahan. </author> <title> The program summary graph and flow-sensitive interprocedural data flow analysis. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 47-56, </pages> <month> June </month> <year> 1988. </year>
Reference: [FW85] <author> P. G. Frankl and E. J. Weyuker. </author> <title> A data flow testing tool. </title> <booktitle> In Proceedings of IEEE Softfair II, </booktitle> <month> December </month> <year> 1985. </year>
Reference: [Ghi92] <author> Rakesh Ghiya. </author> <title> Interprocedural analysis in the presence of function pointers. </title> <institution> McGill University School of Computer Science ACAPS Technical Memo 62, </institution> <month> December </month> <year> 1992. </year>
Reference: [HCU91] <author> U. Holzle, C. Chambers and D. Ungar. </author> <title> Optimizing dynamically-typed object-oriented languages with polymorphic inline caches. </title> <booktitle> In Proceedings of the European Conference on Object Oriented Programming, </booktitle> <month> July </month> <year> 1991. </year>
Reference: [HK92] <author> Mary Hall and Ken Kennedy. </author> <title> Efficient call graph analysis. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> Vol. 1, No. 3, </volume> <month> September </month> <year> 1992. </year> <month> 11 </month>
Reference: [HRB90] <author> S. Horwitz, T. Reps, and D. Binkley. </author> <title> Interprocedural slicing using dependence graphs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(1) </volume> <pages> 26-60. </pages> <month> January </month> <year> 1990. </year>
Reference: [HS89] <author> M. J. Harrold and M. L. Soffa. </author> <title> Interprocedural data flow testing. </title> <booktitle> In Proceedings of the Third Testing, Analysis and Verification Symposium, </booktitle> <pages> pages 158-167, </pages> <month> December </month> <year> 1989. </year>
Reference: [HS90] <author> M. J. Harrold and M. L. Soffa. </author> <title> Computation of interprocedural definition and use dependencies. </title> <booktitle> In Proceedings of the 1990 International Conference on Computer Languages, </booktitle> <pages> pages 297-306, </pages> <year> 1990. </year>
Reference: [LR91] <author> W. Landi and B. G. Ryder. </author> <title> Pointer-induced aliasing: A problem classification. </title> <booktitle> In Conference Record of the Eighteenth Annual ACM symposium on Principles of Programming Languages, </booktitle> <pages> pages 93-103, </pages> <month> January </month> <year> 1991. </year>
Reference: [LR92] <author> W. Landi and B. G. Ryder. </author> <title> A safe approximate algorithm for interprocedural pointer aliasing. </title> <booktitle> In Proceedings of the SIGPLAN '92 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 235-248, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: We also initialize the worklist to EMPTY. The time complexity of the initialization of the entire points-to predicate may appear as proportional to the number of predicates possible, but we have a constant time initialization by following a lazy approach <ref> [LR92, PLR94] </ref>. The first entries in the worklist come from the introduction phase. During this phase we make-true certain predicates at a node by looking at the local information available in the node itself. in item 3 we restrict ourselves to non-virtual method calls.
Reference: [LRZ93] <author> W. Landi, B. G. Ryder, and S. Zhang. </author> <title> Interprocedural modification side effect analysis with pointer aliasing. </title> <booktitle> In Proceedings of the SIGPLAN'93 Conference on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1993. </year>
Reference: [Lak91] <author> Arun Lakhotia. </author> <title> Graph theoretic foundations of program slicing and integration. </title> <institution> The Center for Advanced Computer Studies, University of Southwestern Louisiana Technical Report CACS TR-91-5-5, </institution> <year> 1991. </year>
Reference: [Lak93] <author> Arun Lakhotia. </author> <title> Constructing call multigraphs using dependence graphs. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference: [Lar92] <author> J. M. Larcheveque. </author> <title> Interprocedural type propagation for object-oriented languages. </title> <booktitle> In proceedings of the Fourth European Symposium on Programming (ESPO'92), </booktitle> <month> February </month> <year> 1992. </year>
Reference: [MLR + 93] <author> T. J. Marlowe, W. A. Landi, B. G. Ryder, J. Choi, M. Burke, and P. Carini. </author> <title> Pointer-induce aliasing: A clarification. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(9), </volume> <month> September </month> <year> 1993. </year>
Reference: [Mey81] <author> E. M. Myers. </author> <title> A precise interprocedural data flow algorithm. </title> <booktitle> In Conference Record of the Eighth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 219-230, </pages> <month> January </month> <year> 1981. </year>
Reference: [OW91] <author> T. J. Ostrand and E. Weyuker. </author> <title> Data flow based test adequacy analysis for languages with pointers. </title> <booktitle> In Proceedings of the 1991 Symposium on Software Testing, Analysis and Verification (TAV4), </booktitle> <month> October </month> <year> 1991. </year>
Reference: [PLR94] <author> H. D. Pande, W. Landi and B. G. Ryder. </author> <title> Interprocedural def-use associations for C systems with single level pointers. </title> <note> To appear in IEEE Transactions on Software Engineering, </note> <month> April </month> <year> 1994. </year>
Reference-contexts: We also initialize the worklist to EMPTY. The time complexity of the initialization of the entire points-to predicate may appear as proportional to the number of predicates possible, but we have a constant time initialization by following a lazy approach <ref> [LR92, PLR94] </ref>. The first entries in the worklist come from the introduction phase. During this phase we make-true certain predicates at a node by looking at the local information available in the node itself. in item 3 we restrict ourselves to non-virtual method calls.
Reference: [PRL91] <author> H. D. Pande, B. G. Ryder and W. Landi. </author> <title> Interprocedural def-use associations in C programs. </title> <booktitle> In Proceedings of the 1991 Symposium on Software Testing, Analysis and Verification (TAV4), </booktitle> <month> October </month> <year> 1991. </year>
Reference: [PR94] <author> H. D. Pande and B. G. Ryder. </author> <title> Static type determination and aliasing for C ++ programs. </title> <type> Technical Report, </type> <institution> Laboratory of Computer Science Research, Rutgers University, </institution> <note> in preparation, </note> <year> 1994. </year>
Reference-contexts: We have implemented a prototype for the general algorithm to perform type determination and aliasing together for C ++ programs with multiple level pointer dereferencing. A detailed description of the general algorithm and preliminary implementation results can be found in <ref> [PR94] </ref>.
Reference: [PS91] <author> Jens Palsberg and Michael Schwartzbach. </author> <title> Object-oriented type inference. </title> <booktitle> In Proceedings of Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <pages> pages 146-161, </pages> <month> October </month> <year> 1991. </year> <month> 12 </month>
Reference: [Par92] <author> Ramesh Parameswaran. </author> <title> Interprocedural alias and type analysis for pointers. </title> <type> Masters Thesis, </type> <institution> Department of Computer Science, University of Wisconsin - Madison. </institution> <year> 1992. </year>
Reference: [RW85] <author> S. Rapps and E. Weyuker. </author> <title> Selecting software test data using data flow information. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(4):367-375, </volume> <month> April </month> <year> 1985. </year>
Reference: [Ryd79] <author> B. G. Ryder. </author> <title> Constructing the call graph of a program. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(3):216-225, </volume> <month> May </month> <year> 1979. </year>
Reference: [SS92] <author> Mario Suedholt and Christopher Steigner. </author> <title> On interprocedural data flow analysis for object oriented languages. </title> <booktitle> In Proceedings of the International Conference on Compiler Construction, </booktitle> <address> Germany, </address> <year> 1992. </year>
Reference: [Suz81] <author> Norihisa Suzuki. </author> <title> Inferring types in smalltalk. </title> <booktitle> In Eighth Symposium on Principles of Programming Languages, </booktitle> <pages> pages 187-199, </pages> <month> January </month> <year> 1981. </year>
Reference: [VHU92] <author> Jan Vitek, R. Nigel Harspool and James S. Uhl. </author> <title> Compile-time analysis of object oriented programs. </title> <booktitle> In Proceedings of the International Conference on Compiler Construction, </booktitle> <address> Germany, </address> <year> 1992. </year>
Reference: [Wei84] <author> Mark Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):352-357, </volume> <month> July </month> <year> 1984. </year>
Reference: [YHR90] <author> W. Yang, S. Horwitz and T. Reps. </author> <title> A program integration algorithm that accommodates semantic preserving transformations. </title> <booktitle> In Proceedings of the Fourth ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 133-143, </pages> <month> December </month> <year> 1990. </year> <month> 13 </month>
References-found: 36

