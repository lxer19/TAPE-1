URL: http://www.cs.utah.edu/~mokkedem/frames/charme97.ps.gz
Refering-URL: http://www.cs.utah.edu/~ratan/res.html
Root-URL: 
Email: ratang@cs.utah.edu  
Title: Formal Modeling and Validation Applied to a Commercial Coherent Bus: A Case Study  
Author: Ganesh Gopalakrishnan, Rajnish Ghughal, Ravi Hosabettu, Abdelillah Mokkedem and Ratan Nalumasu fganesh, ghughal, hosabett, mokkedem, 
Address: Salt Lake City, UT 84112, USA  
Affiliation: Department of Computer Science, University of Utah Merrill Engineering Bldg,  
Abstract: The degree to which formal verification methods are adopted in practice depends on concrete demonstrations of their applicability on real-world examples. In this paper, we present our efforts in this regard involving a commercial high-speed split-transaction bus called the Runway. Modern busses such as the Runway deal with so many inter-twined and complex issues that successful application of formal method requires separation of concerns, and the use of the most appropriate tool for each concern. We report our experiments towards this end through the use of the PVS theorem-prover to formally analyze the high-level functional behavior of the bus and the HDL-based model-checker VIS to verify the pipelined arbitration protocol of the bus. The high degree of effort found necessary, as well as the specific abstraction mechanisms found useful in obtaining these formal models are discussed in detail. 
Abstract-found: 1
Intro-found: 1
Reference: [ABJ + 92] <author> Mustaq Ahamad, Rida Bazzi, Ranjit John, Prince Kohli, and Gil Neiger. </author> <title> The power of processor consistency. </title> <type> Technical Report GIT-CC-92/34, </type> <year> 1992. </year> <note> Revised 1993; FTP path: ftp.cc.gatech.edu/pub/tech reports. </note>
Reference-contexts: The main aspect of the functional complexity of busses such as these is their coherency processing algorithm. Split-transaction busses such as the Runway attempt to guarantee the formal memory model known as coherence <ref> [ABJ + 92] </ref>| per-location sequential consistency|in an efficient manner fl . They thus permit the clients to be very aggressive in handling the notion of ownership.
Reference: [BCS96] <author> William R. Bryg, Kenneth K. Chan, and Nicholas S.Fiduccia. </author> <title> A high-performance, low-cost multiprocessor bus for workstations and midrange servers. </title> <journal> Hewlett-Packard Journal, </journal> <pages> pages 18-24, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Modern busses are used for performing both coherent and non-coherent data transfers, and in-put/output (I/O). They involve multiple levels of detail including coherency processing, split-transaction processing, bus arbitration, flow control, and absolute-timing. Descriptions of these busses (for example, the HP Runway bus <ref> [BCS96] </ref>, or the PCI bus [pci]) are extremely complex, lengthy, often contain inconsistencies [CSZ97], and are very difficult to deal with on a day-to-day basis for designers of complex systems.
Reference: [Bra96] <author> Robert Brayton. </author> <title> VIS: a verifier for interacting systems. In Com puter Aided Verification, </title> <address> New Brunswick, New Jersey, </address> <month> July </month> <year> 1996. </year> <title> Tool demo. </title>
Reference-contexts: Formal analysis using PVS is also reported in this section. In Section 4, we describe the use of the model-checker VIS <ref> [Bra96] </ref> to verify the distributed pipelined arbitration protocol of the Runway. Our conclusions appear in Section 5. Related Work Many past works deal with modeling and verifying cache coherence protocols supported by various busses [CGH + 93, GKMK91, McM93]. <p> All this activity goes on pipelined with the pipelined arbitration process for OP K+1 to be effected during cycle N+3 (most Runway operations take only one cycle; exceptions are not discussed here). A model for the distributed pipelined arbitration process was created using VIS Verilog <ref> [Bra96] </ref>. VIS supports Verilog simulation, and a host of verification algorithms including CTL model-checking [McM93], language emptiness checks, etc. VIS proved to be an effective tool to develop specifications fl The complexity of this task is very often under-estimated in the academic world, as we discovered in our work.
Reference: [CGH + 93] <author> Edmund Clarke, Orna Grumberg, Hiromi Hiraishi, Somesh Jha, David Long, Ken McMillan, and Linda Ness. </author> <title> Verification of the futurebus+ cache coherence protocol. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <booktitle> Proceedings of the 11th International Conference on Computer Hardware Description Languages and their Applications, </booktitle> <year> 1993. </year>
Reference-contexts: In Section 4, we describe the use of the model-checker VIS [Bra96] to verify the distributed pipelined arbitration protocol of the Runway. Our conclusions appear in Section 5. Related Work Many past works deal with modeling and verifying cache coherence protocols supported by various busses <ref> [CGH + 93, GKMK91, McM93] </ref>. In [HW94], the identification of deadlocks in the HP Summit Bus Converter through symbolic model-checking was presented. [Hoo93] presents the hand-proof of correctness of an academic distributed real-time arbitration protocol example.
Reference: [CKK96] <author> John B. Carter, Chen-Chi Kuo, and Ravindra Kuramkote. </author> <title> A comparison of software and hardware synchronization mechanisms for distributed shared memory multiprocessors. </title> <type> Technical Report UUCS-96-011, </type> <institution> University of Utah, </institution> <address> Salt Lake City, UT, USA, </address> <month> September </month> <year> 1996. </year> <title> Conclusions and Future Work 15 </title>
Reference-contexts: We have observed in the context of an in-house academic shared memory multiprocessor (SMP) design project called the Avalanche <ref> [CKK96] </ref> that designers are inundated by complexity of bus specifications and commit subtle but crucial mistakes on a regular basis. c flIFIP 1997. <p> The ease with which subtle errors can be introduced is very worrisome. In this paper, we report on our experiences in using Formal Methods to describe a commercial bus called the Runway, in the context of an actual multiprocessor design project called the Avalanche <ref> [CKK96] </ref>. As pointed out by Corella, [CSZ97], one of the greatest advantages of formal modeling is the clarity of thinking it promotes.
Reference: [COR + 95] <author> Judy Crow, Sam Owre, John Rushby, Natarajan Shankar, and Mandayam Srivas. </author> <title> A tutorial introduction to PVS, </title> <month> June </month> <year> 1995. </year> <note> http://www.csl.sri.com/sri-csl-fm.html. </note>
Reference-contexts: The axiomatic style was more or less forced upon us by the high degree of non-determinism inside the client-and host units. It is well known that such collections of large numbers of ad hoc axioms are prone to be inconsistent <ref> [COR + 95] </ref>. * Scores of explicit queues were employed in the model.
Reference: [CSZ97] <author> Francisco Corella, Robert Shaw, and Cui Zhang. </author> <title> A formal proof of absence of deadlock for any acyclic network of PCI buses. </title> <booktitle> In Hardware Description Languages and their Applications, </booktitle> <pages> pages 134-156. </pages> <publisher> Chapman Hall, </publisher> <year> 1997. </year>
Reference-contexts: They involve multiple levels of detail including coherency processing, split-transaction processing, bus arbitration, flow control, and absolute-timing. Descriptions of these busses (for example, the HP Runway bus [BCS96], or the PCI bus [pci]) are extremely complex, lengthy, often contain inconsistencies <ref> [CSZ97] </ref>, and are very difficult to deal with on a day-to-day basis for designers of complex systems. <p> In this paper, we report on our experiences in using Formal Methods to describe a commercial bus called the Runway, in the context of an actual multiprocessor design project called the Avalanche [CKK96]. As pointed out by Corella, <ref> [CSZ97] </ref>, one of the greatest advantages of formal modeling is the clarity of thinking it promotes. In addition, formal analysis supported by theorem-proving and model-checking tools allows one to examine various scenarios at a high level, formally prove putative theorems about them, and thereby enhance one's understanding. <p> In [HW94], the identification of deadlocks in the HP Summit Bus Converter through symbolic model-checking was presented. [Hoo93] presents the hand-proof of correctness of an academic distributed real-time arbitration protocol example. In <ref> [CSZ97] </ref>, a formal proof of absence of deadlocks for any acyclic network of PCI busses has been given. <p> Only by gaining sufficient insight into using abstractions in new domains can one develop suitable specification styles. Another aspect of using formal descriptions has been pointed out in <ref> [CSZ97] </ref>: namely that in the interest of detecting problems early on, hand-proofs are highly recommended initially. After our initial experience with the Runway bus, we now find this observation to be a bit more true.
Reference: [GC96] <author> Pierre Girodias and Eduard Cerny. </author> <title> Interface timing verification using CLP, 1996. </title> <institution> Dept of Computer Science, IRO, University of Montreal. </institution>
Reference-contexts: More specifically, one should be able to first proceed with the simplifications to prove overall correctness properties, and later verify that employing the more complex situation would not have caused any different outcomes. The latter step may be accomplished using a model-checker, a cycle constraint checker <ref> [GC96] </ref>, or even a theorem-prover. Separating the functional and timing aspects Even with the above model-simplifications, the model for the Runway behavior in PVS proved to be extremely large and unwieldy.
Reference: [GKMK91] <author> Stein Gjessing, Stein Krogdahl, and Ellen Munthe-Kaas. </author> <title> A top down approach to the formal specification of SCI cache coherence. </title> <booktitle> In Computer Aided Verification, </booktitle> <pages> pages 83-91, </pages> <year> 1991. </year> <note> LNCS 575. </note>
Reference-contexts: In Section 4, we describe the use of the model-checker VIS [Bra96] to verify the distributed pipelined arbitration protocol of the Runway. Our conclusions appear in Section 5. Related Work Many past works deal with modeling and verifying cache coherence protocols supported by various busses <ref> [CGH + 93, GKMK91, McM93] </ref>. In [HW94], the identification of deadlocks in the HP Summit Bus Converter through symbolic model-checking was presented. [Hoo93] presents the hand-proof of correctness of an academic distributed real-time arbitration protocol example.
Reference: [Hoo93] <author> Jozef Hooman. </author> <title> Specification and verification of a distributed real time arbitration protocol. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 284-293. </pages> <publisher> IEEE CS Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1993. </year>
Reference-contexts: Our conclusions appear in Section 5. Related Work Many past works deal with modeling and verifying cache coherence protocols supported by various busses [CGH + 93, GKMK91, McM93]. In [HW94], the identification of deadlocks in the HP Summit Bus Converter through symbolic model-checking was presented. <ref> [Hoo93] </ref> presents the hand-proof of correctness of an academic distributed real-time arbitration protocol example. In [CSZ97], a formal proof of absence of deadlocks for any acyclic network of PCI busses has been given.
Reference: [HP95] <author> John Hennessy and David Patterson. </author> <title> Computer Architecture: A Quantitative Approach (Second Edition). </title> <publisher> Morgan Kaufman, </publisher>
Reference-contexts: It must therefore come as no surprise that actual high-end design projects spend enormous amounts of expert designer time trying to understand and deal with busses (as, for instance, we have observed in many projects; see also <ref> [HP95] </ref>).
References-found: 11

