URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P445.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts94.htm
Root-URL: http://www.mcs.anl.gov
Title: Parallel Algorithms for the Adaptive Refinement and Partitioning of Unstructured Meshes  
Author: Mark T. Jones Paul E. Plassmann 
Address: Knoxville, TN 37996 Argonne, IL 60439  
Affiliation: Computer Science Department Mathematics Computer Science Division University of Tennessee Argonne National Laboratory  
Abstract: The efficient solution of many large-scale scientific calculations depends on adaptive mesh strategies. In this paper we present new parallel algorithms to solve two significant problems that arise in this context: the generation of the adaptive mesh and the mesh partitioning. The crux of our refinement algorithm is the identification of independent sets of elements that can be refined in parallel. The objective of our partitioning heuristic is to construct partitions with good aspect ratios. We present run-time bounds and computational results obtained on the Intel DELTA for these algorithms. These results demonstrate that the algorithms exhibit scalable performance and have run-times small in comparison with other aspects of the computation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Randolph E. Bank, Andrew H. Sherman, and Alan Weiser. </author> <title> Refinement algorithms and data structures for regular local mesh refinement. </title> <editor> In R. Stepleman et al., editor, </editor> <booktitle> Scientific Computing, </booktitle> <pages> pages 3-17. </pages> <publisher> IMACS/North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1983. </year>
Reference-contexts: The bisection algorithm in its simplest form bisects the longest edge of a triangle to form two new triangles with equal area [10]. The regular refinement algorithm divides a triangle into four similar triangles or, during a cleanup phase, into two triangles <ref> [1] </ref>. Both algorithms must finish with a conforming mesh; in a conforming mesh the edge of a triangle cannot contain a vertex other than its endpoints. In both methods, the refinement of a single triangle usually causes a propagation of refinement to other mesh elements.
Reference: [2] <author> Marsha J. Berger and Shahid H. Bokhari. </author> <title> A partitioning strategy for nonuniform problems on multiprocessors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36:570-580, </volume> <year> 1987. </year>
Reference-contexts: We propose an inexpensive method that utilizes geometric information and allows for existing partitions to be perturbed when a small perturbation to the mesh occurs. This method is a variation of the orthogonal recursive bisection (ORB) algorithm <ref> [2] </ref>. The ORB algorithm makes an initial cut to divide the vertices into two sets of equal size. Orthogonal cuts are then made recursively in the new subdomains until the vertices are equally distributed among the processors. <p> It has been shown that for the ORB heuristic, partitions can be adjacent to O ( p p) other partitions <ref> [2] </ref>. To repartition a perturbed mesh without massive movement of vertices, we simply perturb the cuts in the existing partition to rebalance the sizes of V i . If no such perturbation exists or if the perturbation would result in poor aspect ratios, then the mesh is repar-titioned from scratch.
Reference: [3] <author> Lori A. Freitag, Mark T. Jones, and Paul E. Plassmann. </author> <booktitle> New advances in the modeling of high-temperature superconductors. In 1994 International Simulation Conference Grand Challenges in Computer Simulation, </booktitle> <address> La Jolla, Cali-fornia, </address> <month> April 11-15. </month> <title> The Society for Computer Simulation, </title> <note> 1994 (to appear). </note>
Reference-contexts: We have tested our algorithms using three different PDEs (Poisson's equation, linear elasticity equations, and the nonlinear Ginzburg-Landau equations) on a variety of geometries. In this paper, we consider results obtained for the first two problems; results for the latter problem are presented in <ref> [3] </ref>. The first problem is given by @x 2 @y 2 = f (x; y) on S (1) u = 0 on boundary (2) on a square domain where f (x; y) is a Gaussian charge distribution that forces refinement around a point (S x ; S y ).
Reference: [4] <author> William Gropp and Barry Smith. </author> <title> User's Manual for Chameleon Parallel Programming Tools. </title> <type> ANL Report ANL-93/23, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1993. </year>
Reference-contexts: We plan to utilize a more sophisticated technique such as that given in [5]. 4 4 Experimental Results We have implemented these algorithms in a library of routines that is called by an application program. The software uses Chameleon <ref> [4] </ref> to achieve portability across several architectures, including the In-tel DELTA which is our focus here. We have tested our algorithms using three different PDEs (Poisson's equation, linear elasticity equations, and the nonlinear Ginzburg-Landau equations) on a variety of geometries.
Reference: [5] <author> Steven Warren Hammond. </author> <title> Mapping Unstructured Grid Computations to Massively Parallel Computers. </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, Rensselaer Polytechnic Institute, </institution> <year> 1989. </year>
Reference-contexts: Finally, we note that currently we do not handle the assignment problem in a sophisticated manner. We mainly rely on our target architectures to have wormhole routing that reduces the effect of distance between communicating nodes. We plan to utilize a more sophisticated technique such as that given in <ref> [5] </ref>. 4 4 Experimental Results We have implemented these algorithms in a library of routines that is called by an application program. The software uses Chameleon [4] to achieve portability across several architectures, including the In-tel DELTA which is our focus here.
Reference: [6] <author> Mark T. Jones and Paul E. Plassmann. </author> <title> Block-Solve v1.0: Scalable library software for the parallel solution of sparse linear systems. </title> <type> ANL Report ANL-92/46, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1992. </year>
Reference-contexts: This movement requires mesh refinement around the new position and de-refinement around the old position while the rest of the mesh remains nearly constant. To solve the linear systems arising from this problem, we use the parallel conjugate gradient method preconditioned by an incomplete factorization <ref> [6] </ref>.
Reference: [7] <author> Mark T. Jones and Paul E. Plassmann. </author> <title> A parallel graph coloring heuristic. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 14 </volume> <pages> 654-669, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: From [10], we have that L P is finite. We know that the graph D k is a bounded degree graph; in fact, any node (triangle) has at most three neighbors. Given that this is a bounded 3 degree graph, we use the algorithms and theorems in <ref> [7] </ref> to find EO ( log n log log n ) independent sets in a graph in time proportional to the number of independent sets, where n is the number of vertices in the graph. 2 3 Mesh (Re-)Partitioning In this section we present a new partitioning heuristic that uses geometric
Reference: [8] <author> Mark T. Jones and Paul E. Plassmann. </author> <title> Parallel algorithms for adaptive mesh refinement. </title> <type> Preprint MCS-P421-0394, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1994. </year>
Reference-contexts: Proof: We sketch the proof of this theorem as follows, a complete version is given in <ref> [8] </ref>. From [10], we have that L P is finite. We know that the graph D k is a bounded degree graph; in fact, any node (triangle) has at most three neighbors.
Reference: [9] <author> William F. Mitchell. </author> <title> A comparison of adaptive refinement techniques for elliptic problems. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 15(4) </volume> <pages> 326-347, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Adaptive mesh refinement techniques have been shown to be very successful in reducing the computation and storage requirements for determining approximate solutions to many partial differential equations (PDEs) <ref> [9] </ref>. Rather than using a uniform mesh with grid points evenly spaced on a domain, adaptive mesh refinement techniques place more grid points in areas where the solution is changing rapidly. The mesh is adaptively refined during the computation according to local error estimates on the domain. <p> Follow the mesh sequences from left to right. The shaded triangles have just been refined in that step. Both of these algorithms have been shown to perform well on a variety of problems; it is difficult to make a choice between the two <ref> [9] </ref>. We have chosen to discuss and implement the bisection algorithm be cause of its simplicity; however, it is possible to modify the algorithms given in this paper for use with regular refinement.
Reference: [10] <author> Maria-Cecilia Rivara. </author> <title> Mesh refinement processes based on the generalized bisection of simplices. </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 21(3) </volume> <pages> 604-613, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Department of Energy, under Contract W-31-109-Eng-38. sions. Two basic algorithms exist for the refinement of triangles: (1) bisection, and (2) regular refinement. The bisection algorithm in its simplest form bisects the longest edge of a triangle to form two new triangles with equal area <ref> [10] </ref>. The regular refinement algorithm divides a triangle into four similar triangles or, during a cleanup phase, into two triangles [1]. Both algorithms must finish with a conforming mesh; in a conforming mesh the edge of a triangle cannot contain a vertex other than its endpoints. <p> We consider the version given by Rivara <ref> [10] </ref>. This bisection algorithm bisects triangles across the largest edge (dividing the largest angle) with division of noncompatible edges after the triangle has already been bisected once. <p> The bisection refinement algorithm is given in Figure 2. Obviously, the refinement could propagate through many initially unmarked triangles before finishing. Ri-vara, however, has shown that this loop will terminate in a finite number of iterations, say L P iterations <ref> [10] </ref>. Our parallel refinement algorithm is formulated mainly within the context of the dual graph to the mesh, which we define as follows. <p> Proof: We sketch the proof of this theorem as follows, a complete version is given in [8]. From <ref> [10] </ref>, we have that L P is finite. We know that the graph D k is a bounded degree graph; in fact, any node (triangle) has at most three neighbors.
Reference: [11] <author> Ivo G. Rosenberg and Frank Stenger. </author> <title> A lower bound on the angles of triangles constructed by bisecting the longest side. </title> <journal> Mathematics of Computation, </journal> <volume> 29(130) </volume> <pages> 390-395, </pages> <month> April </month> <year> 1975. </year> <month> 8 </month>
Reference-contexts: This algorithm has been shown to yield triangulations whose smallest angle is bounded by at worst one-half the smallest angle in the inital mesh <ref> [11] </ref>. The bisection refinement algorithm is given in Figure 2. Obviously, the refinement could propagate through many initially unmarked triangles before finishing. Ri-vara, however, has shown that this loop will terminate in a finite number of iterations, say L P iterations [10].
References-found: 11

