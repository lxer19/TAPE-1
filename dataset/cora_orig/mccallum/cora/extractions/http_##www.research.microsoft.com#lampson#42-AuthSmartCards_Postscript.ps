URL: http://www.research.microsoft.com/lampson/42-AuthSmartCards\Postscript.ps
Refering-URL: http://www.research.microsoft.com/lampson/Publications.html
Root-URL: http://www.research.microsoft.com
Title: 67 Authentication and Delegation with Smart-cards  
Author: M. Abadi, M. Burrows, C. Kaufman, B. Lampson 
Date: October 22, 1990, Revised July 30, 1992  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Burrows, M. Abadi, and R.M. Needham. </author> <title> A Logic of Authentication, </title> <journal> Proceedings of the Royal Society of London A Vol. </journal> <volume> 426, </volume> <year> 1989, </year> <pages> pp. 233-271. </pages> <note> A preliminary version appeared as Digital Equipment Corporation Systems Research Center report No. 39, </note> <month> February </month> <year> 1989. </year>
Reference-contexts: The protocols considered can be based on RSA encryption [12], but other algorithms (e.g., [7]) could also be used. We analyze the protocols with a logic of authentication. This is essentially the logic of Burrows, Abadi, and Needham <ref> [1] </ref>, with a simple extension to handle secure and timely channels. It should be noted that our logical account is not the only one possible. However, the formalism enables us to describe the assumptions and the guarantees of each protocol, clarifying the trust relations between principals. <p> However, the formalism enables us to describe the assumptions and the guarantees of each protocol, clarifying the trust relations between principals. Moreover, a logical account helps in 2 avoiding certain security flaws commonly present in authentication proto-cols <ref> [1] </ref>. In the next section, we summarize the notation of the logic; the logic is discussed further in an Appendix. In later sections, we describe smart-card authentication protocols, starting with those that require the more ambitious smart-card designs and the weaker trust relations. <p> Appendix: The logic In the analysis of smart-card protocols, we apply a logic of authentication. The notation is as given in Section 2; here we give a few of the main rules of inference and briefly explain how to use them. The logic is presented in <ref> [1] </ref>; a Kripke semantics is currently being developed by M. Tuttle and M. Abadi.
Reference: [2] <author> CCITT. </author> <title> CCITT Blue Book, Recommendation X.509 and ISO 9594-8: The Directory-Authentication Framework. </title> <address> Geneva, </address> <month> March </month> <year> 1988. </year>
Reference-contexts: Furthermore, users must be able to delegate some of their authority to the nodes that they trust. Authentication protocols serve for these purposes, typically relying on secrets and encryption (e.g., <ref> [2, 10, 11] </ref>). The authentication of users poses special problems, because users lack the ability to encrypt and decrypt. In the simplest approach to user authentication, the user owns a secret (his password) that he gives to a node that he wishes to use.
Reference: [3] <editor> D. Chaum and I. Schaumuller-Bichl, editors. </editor> <title> Smart Card 2000: The Future of IC Cards. </title> <booktitle> Proceedings of the IFIP WG 11.6 International Conference on Smart Card 2000: The Future of IC Cards, </booktitle> <address> Laxenburg, Austria, </address> <month> October, </month> <title> 1987. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: The protocols were developed in the context of the Digital Distributed System Security Architecture [6]. Most previous work focuses on user authentication using shared-key cryptography, with little discussion of delegation (see, for example, <ref> [3] </ref>). We believe that public-key cryptography is more suitable than shared-key cryptography for authentication and delegation, and that it is not prohibitively expensive when used wisely. The protocols considered can be based on RSA encryption [12], but other algorithms (e.g., [7]) could also be used.
Reference: [4] <author> National Bureau of Standards. </author> <title> Data Encryption Standard. </title> <publisher> Fed. Inform. Processing Standards Pub. </publisher> <address> 46. Washington DC, </address> <month> January </month> <year> 1977. </year>
Reference-contexts: Each trusted agent assists a community of users under a single domain or management. Any such arrangement reduces availability (when all replicas are down or inaccessible, the user cannot work) and lessens security (the agents are an attractive target). If the smart-card can execute only the DES algorithm <ref> [4] </ref>, then the trusted agent will get access to the user's private key during the login process. It can still be arranged that compromise of a trusted agent will not permit the impersonation of all users who trust it|only of those who use it while it is compromised.
Reference: [5] <author> W. Diffie and M. Hellman. </author> <title> New Directions in Cryptography. </title> <journal> IEEE Transactions on Information Theory IT-22, </journal> <volume> No. 6, </volume> <month> November, </month> <year> 1976, </year> <pages> pp. 644-654. </pages>
Reference-contexts: Moreover, a malicious node could remember the user's secrets for future mischief. This threat seems important|consider, for example, the users of public terminals in hotels. A smart-card with sufficient computing power solves these problems. The smart-card we envision has its own keyboard, display, clock, logic for performing public-key encryption <ref> [5, 12] </ref>, and can be electrically coupled to the node. Authentication would be relatively straightforward with this powerful smart-card. The smart-card might operate only when fed a PIN, so an attacker would need to steal the smart-card and to discover the user's PIN in order to impersonate the user.
Reference: [6] <author> M. Gasser, A. Goldstein, C. Kaufman, B. Lampson. </author> <title> The Digital Distributed System Security Architecture. </title> <booktitle> Proceedings of the 1989 National Computer Security Conference, </booktitle> <address> Baltimore, </address> <year> 1989, </year> <pages> pp. 305-319. </pages>
Reference-contexts: In this paper, we describe a range of public-key smart-card authentication protocols, with different compromises between cost and security. The protocols were developed in the context of the Digital Distributed System Security Architecture <ref> [6] </ref>. Most previous work focuses on user authentication using shared-key cryptography, with little discussion of delegation (see, for example, [3]). We believe that public-key cryptography is more suitable than shared-key cryptography for authentication and delegation, and that it is not prohibitively expensive when used wisely.
Reference: [7] <author> U. Feige, A. Fiat, A. Shamir. </author> <title> Zero Knowledge Proofs of Identity. </title> <booktitle> Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, </booktitle> <address> New York, </address> <year> 1987, </year> <pages> pp. 210-217. </pages>
Reference-contexts: We believe that public-key cryptography is more suitable than shared-key cryptography for authentication and delegation, and that it is not prohibitively expensive when used wisely. The protocols considered can be based on RSA encryption [12], but other algorithms (e.g., <ref> [7] </ref>) could also be used. We analyze the protocols with a logic of authentication. This is essentially the logic of Burrows, Abadi, and Needham [1], with a simple extension to handle secure and timely channels. It should be noted that our logical account is not the only one possible.
Reference: [8] <author> M. Gasser, E. McDermott. </author> <title> An Architecture for Practical Delegation in a Distributed System. </title> <booktitle> Proceedings of the 1990 IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, </address> <year> 1990, </year> <pages> pp. 20-30. </pages>
Reference-contexts: Thus, F takes into account W 's identity before accepting a delegation key for U . Moreover, F may grant some requests from W on behalf of U , and not others (as in the general approach to delegation of <ref> [8] </ref>). The user obtains no real guarantee of the identity of the workstation, since the card cannot decrypt. However, the user can be sure that his authority is not delegated inappropriately, because of the check performed by F . This is the approach we adopt in the following protocol.
Reference: [9] <author> C.A.R. Hoare. </author> <title> An Axiomatic Basis for Computer Programming, </title> <journal> CACM Vol. </journal> <volume> 12, No. 10, </volume> <month> October </month> <year> 1969, </year> <pages> pp. 576-580. </pages>
Reference: [10] <author> S.P. Miller, C. Neuman, J.I. Schiller, and J.H. Saltzer. </author> <title> Kerberos Authentication and Authorization System. Project Athena Technical Plan Section E.2.1, </title> <publisher> MIT, </publisher> <month> July </month> <year> 1987. </year> <month> 23 </month>
Reference-contexts: Furthermore, users must be able to delegate some of their authority to the nodes that they trust. Authentication protocols serve for these purposes, typically relying on secrets and encryption (e.g., <ref> [2, 10, 11] </ref>). The authentication of users poses special problems, because users lack the ability to encrypt and decrypt. In the simplest approach to user authentication, the user owns a secret (his password) that he gives to a node that he wishes to use.
Reference: [11] <author> R.M. Needham and M.D. Schroeder. </author> <title> Using Encryption for Authentica--tion in Large Networks of Computers. </title> <journal> CACM Vol. </journal> <volume> 21, No. 12, </volume> <month> December </month> <year> 1978, </year> <pages> pp. 993-999. </pages>
Reference-contexts: Furthermore, users must be able to delegate some of their authority to the nodes that they trust. Authentication protocols serve for these purposes, typically relying on secrets and encryption (e.g., <ref> [2, 10, 11] </ref>). The authentication of users poses special problems, because users lack the ability to encrypt and decrypt. In the simplest approach to user authentication, the user owns a secret (his password) that he gives to a node that he wishes to use.
Reference: [12] <author> R.L. Rivest, A. Shamir, and L. Adleman. </author> <title> A Method for Obtaining Digital Signatures and Public-key Cryptosystems, </title> <journal> Communications of the ACM Vol. </journal> <volume> 21, No. 2, </volume> <month> February </month> <year> 1978, </year> <pages> pp. 120-126. 24 </pages>
Reference-contexts: Moreover, a malicious node could remember the user's secrets for future mischief. This threat seems important|consider, for example, the users of public terminals in hotels. A smart-card with sufficient computing power solves these problems. The smart-card we envision has its own keyboard, display, clock, logic for performing public-key encryption <ref> [5, 12] </ref>, and can be electrically coupled to the node. Authentication would be relatively straightforward with this powerful smart-card. The smart-card might operate only when fed a PIN, so an attacker would need to steal the smart-card and to discover the user's PIN in order to impersonate the user. <p> We believe that public-key cryptography is more suitable than shared-key cryptography for authentication and delegation, and that it is not prohibitively expensive when used wisely. The protocols considered can be based on RSA encryption <ref> [12] </ref>, but other algorithms (e.g., [7]) could also be used. We analyze the protocols with a logic of authentication. This is essentially the logic of Burrows, Abadi, and Needham [1], with a simple extension to handle secure and timely channels.
References-found: 12

