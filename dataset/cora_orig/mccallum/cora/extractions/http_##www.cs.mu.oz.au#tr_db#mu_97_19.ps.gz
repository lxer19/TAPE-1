URL: http://www.cs.mu.oz.au/tr_db/mu_97_19.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Towards Requirements for Requirements Modelling Tools  
Author: Elizabeth Haywood and Philip Dart 
Keyword: Requirements modelling, CASE tools  
Address: Melbourne, Australia  
Affiliation: Department of Electrical Electronic Engineering, Victoria University of Technology,  
Date: 10, 1997  
Note: October  1 also lecturer in the  
Abstract: Technical Report 97/19 Department of Computer Science The University of Melbourne Parkville, Victoria 3052, Australia Email: flizh,philipg@cs.mu.oz.au Abstract This paper describes the functions and properties that we have determined should be exhibited by a requirements modelling toolset. They have been broadly categorised into high, medium and low priority. Consultation with practitioners has assisted in creation and validation of our list of functions and in our broad categorisation of them into priority groups. We believe this is only the beginning of an important activity in requirements engineering research, that of determining the requirements for systems to assist in determining and modelling software system requirements. We consider that this paper would be of interest to researchers and practitioners in requirements engineering, and to developers of requirements modelling notations and toolsets. 
Abstract-found: 1
Intro-found: 1
Reference: [DOJ + 93] <author> Alan Davis, Scott Overmyer, Kathleen Jordan, Joseph Caruso, Fatma Dandashi, An-htuan Dinh, Gary Kincaid, Glen Ledeboer, Patricia Reynolds, Pradip Sitaram, Anh Ta, and Mary Theofanos. </author> <title> Identifying and Measuring Quality in a Software Requirements Specification. </title> <booktitle> In Proceedings of the First International Software Metric Symposium, </booktitle> <year> 1993. </year>
Reference-contexts: Given the notion that "good" requirements are necessary if the system to be built is going to be what the user wants, we can use the list of qualities put forward by Davis et. al. to help determine the functionality of an ideal tool set <ref> [DOJ + 93] </ref>. They list twenty-four qualities that a quality Software Requirements Specification (SRS) should exhibit. By considering qualities such as these, we have developed a set of functions and properties which we believe are necessary for a tool set to be useful in requirements modelling.
Reference: [DTI90] <author> DTI/NCC. </author> <title> Extracted from The STARTS Guide, </title> <booktitle> 2nd Edition 1987, </booktitle> <volume> Vol 1, Chapter 5, </volume> <month> September, </month> <year> 1987, </year> <pages> pp. 177-223. </pages> <editor> In Merlin Dorfman and Richard H. Thayer, editors, </editor> <title> Standards, Guidelines, </title> <booktitle> and Examples on System and Software Requirements Engineering, </booktitle> <pages> pages 320-367. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: The results of these studies are therefore quite subjective, as acknowledged in the STARTS guide <ref> [DTI90] </ref>, where ratings of how a tool performs for each characteristic selected are made against the investigative team's perception of what the ideal would be in the particular context. <p> The STARTS guide attempted to rate each of twenty-six requirements definition methods, notations and tools, many of which, like Z for example, did not have any relevant tools to be evaluated. Five criteria are included specifically for evaluation of tools <ref> [DTI90, table 5.15] </ref>: * Generality, 6 * Integrated data dictionary? * Prevention of syntax errors, * How much of method/notation does it support? * How well does it enforce method/notation? Other criteria were also used, such as availability, support and maturity, and the methods were assessed against criteria such as notation,
Reference: [GMA96a] <author> Andrew Gabb, Neelan Maheswaran, and Alan Allwright. </author> <title> Requirements Tools Evaluation Criteria. Unpublished draft received from author, </title> <year> 1996. </year>
Reference-contexts: An evaluation of requirements management tools is currently being undertaken by the Information Technology Division of the Defence Science and Technology Organisation (DSTO). Their evaluation has been made by considering detailed criteria developed from a comprehensive set of user needs <ref> [GMA96a, GMA96b] </ref>. We have also looked at a small selection of tools marketed commercially, to compare what is currently provided in support of requirements modelling, with our list.
Reference: [GMA96b] <author> Andrew Gabb, Neelan Maheswaran, and Alan Allwright. </author> <title> Requirements Tools Evaluation User Needs. Unpublished draft received from author, </title> <year> 1996. </year>
Reference-contexts: An evaluation of requirements management tools is currently being undertaken by the Information Technology Division of the Defence Science and Technology Organisation (DSTO). Their evaluation has been made by considering detailed criteria developed from a comprehensive set of user needs <ref> [GMA96a, GMA96b] </ref>. We have also looked at a small selection of tools marketed commercially, to compare what is currently provided in support of requirements modelling, with our list.
Reference: [HD96] <author> Elizabeth Haywood and Philip Dart. </author> <title> Analysis of Software System Requirements Models. </title> <booktitle> In Proceedings of Australian Software Engineering Conference, </booktitle> <pages> pages 131-138. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: As our research progresses, it is becoming increasingly obvious that for most industrial sized systems, the modelling of requirements will need tool support. There are many techniques and modelling frameworks for software system requirements put forward by researchers, more details of which can be found in <ref> [HD96] </ref>. Many of the proposed frameworks are untested on anything but academic problems, and would require some degree of automated assistance for their viable use on a larger system. <p> Our original list included most of those detailed in the next section, without any qualification. Attributes such as traceability, decomposition, provision for changes, and coverage were present in our evaluation of modelling frameworks <ref> [HD96] </ref>. These attributes need to be supported by an environment in which the modelling framework is to be used. Academic intuition, of course, may not always agree with practitioner's experience, so we decided to ask a selection of practitioners what they thought should be included in such a list.
Reference: [IEE84] <editor> IEEE. ANSI/IEEE Std 830-1984. </editor> <title> In IEEE Guide to Software Requirements Specifications. </title> <publisher> IEEE, </publisher> <year> 1984. </year>
Reference-contexts: What is required to do design? A complete, consistent, unambiguous specification, that at minimum, exhibits the IEEE Guide to Software Requirements Specification's (SRS) list of characteristics to be displayed by a good SRS. <ref> [IEE84] </ref>. 4.
Reference: [Law88] <author> David Law. </author> <title> Methods for Comparing Methods. </title> <publisher> NCC Publications, </publisher> <year> 1988. </year>
Reference-contexts: Law, in his book "Methods for comparing Methods", provides some insight into the difficulties and complexities involved in evaluating system development methods and/or tools; problems which have not decreased with the increase in offerings by tool vendors <ref> [Law88] </ref>. The STARTS guide attempted to rate each of twenty-six requirements definition methods, notations and tools, many of which, like Z for example, did not have any relevant tools to be evaluated.
Reference: [LPR93] <author> Mitch Lubars, Colin Potts, and Charles Richter. </author> <title> A Review of the State of the Practice in Requirements Modeling. </title> <booktitle> In Proceedings of the IEEE International Symposium on Requirements Engineering, </booktitle> <pages> pages 2-14. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year> <month> 8 </month>
Reference-contexts: In their Review of the State of Practice in Requirements Modelling, Lubars et. al. conducted a field study of ten organisations, by way of interviews with practitioners <ref> [LPR93] </ref>. They wished to discover what these companies did to analyse and define software system requirements and to provide some direction for future improvements to the process and supporting tools.
References-found: 8

