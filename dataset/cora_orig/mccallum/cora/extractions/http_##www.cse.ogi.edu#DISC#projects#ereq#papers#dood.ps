URL: http://www.cse.ogi.edu/DISC/projects/ereq/papers/dood.ps
Refering-URL: http://www.cse.ogi.edu/DISC/projects/ereq/papers/maier-papers.html
Root-URL: http://www.cse.ogi.edu
Title: Treating Programs as Objects: The Computational Proxy Experience  
Author: David Maier and Judith B. Cushing 
Address: 20000 N.W. Walker Road P.O. Box 91000 Portland, OR 97291-1000  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract: Migrating data to a new database model presents problems if there are existing application programs that must continue to access the data, bu that cannot be converted immediately. If the target database is object-oriented, such a legacy program can be encapsulated as an object or a message. We argue that some applications will benefit from further "reification" of execution instances as database objects. We introduce a "computational proxy" mechanism and our prototype implementation of it for computational chemistry codes. We conclude with a discussion of where declarative capabilities would have been a useful adjunct to object-oriented database features.
Abstract-found: 1
Intro-found: 1
Reference: [Abel94] <author> D. Abel. </author> <title> Loading an Object-Database from the Textual Output of Computational Programs. </title> <type> Master's thesis, </type> <institution> Portland State University, </institution> <address> Portland, OR, expected: </address> <month> June </month> <year> 1994. </year>
Reference: [Be93] <author> P. A. Bernstein. </author> <title> Middleware: An Architecture for Distributed Systems Services. </title> <institution> DEC Cambridge Research Lab report CRL 93/6, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: From this vantage point, our work resembles other efforts in software systems to promote program interoperability, such as software "packaging" [CP91], mid-dleware (see for example Bernstein <ref> [Be93] </ref>) and distributed object management systems [NWM93].
Reference: [CP91] <author> J. R. Callahan and J. M. Purtilo. </author> <title> A Packaging System for Heterogeneous Execution Environments. </title> <journal> IEEE Trans. on Software Engineering 17(6), </journal> <month> June </month> <year> 1991. </year>
Reference-contexts: From this vantage point, our work resembles other efforts in software systems to promote program interoperability, such as software "packaging" <ref> [CP91] </ref>, mid-dleware (see for example Bernstein [Be93]) and distributed object management systems [NWM93].
Reference: [CCT93] <author> W. W. Chu, A. F. Cardenas, and R. K. </author> <title> Taira, </title> <editor> editors. </editor> <booktitle> Proceedings of the AAAS Workshop on Advances in Data Management for the Scientist and Engineer. NSF, </booktitle> <address> Boston, Massachusetts, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: The proxy mechanism is also a basis for constructing and managing suites and sequences of runs. We are not alone in applying object-oriented databases to supporting scientific computing. A recent NSF report <ref> [CCT93] </ref> shows object-oriented approaches used for protein-structure data, medical research, macromolecules, global change data and scientific visualization. In particular, the MOOSE system [IL92] has dealt with modeling the complex inputs to a scientific simulation program.
Reference: [CMR92a] <author> J. B. Cushing, D. Maier, and M. Rao. </author> <title> Computational chemistry database prototype: ObjectStore. </title> <type> Technical Report CS/E-92-002, OGI, </type> <institution> Beaverton, </institution> <address> OR, </address> <month> January </month> <year> 1992. </year>
Reference: [CMR + 92b] <author> J. B. Cushing, D. Maier, M. Rao, D. M. DeVaney, and D. Feller. </author> <title> Object-oriented database support for computational chemistry. </title> <booktitle> Sixth International Working Conference on Statistical and Scientific Database Management (SSDBM), </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: An obvious additional advantage was that we could map conceptual-level classes, operations and hierarchies directly into counterparts in the database's data definition language (DDL) with little encoding. Figure 5 is a top-level view of the logical database design. This model was implemented in the ObjectStore object-oriented database management system <ref> [CMR + 92b] </ref>. Experience using standalone programs to load the prototype database with experimental inputs and outputs, however, impelled us to seriously consider how to integrate the applications with the database and make the database the focal point for running computational experiments.
Reference: [CMR93] <author> J. B. Cushing, D. Maier, and M. Rao. </author> <title> Computational proxies: Modeling scientific applications in object databases. </title> <type> Technical Report CS/E-92-020, OGI, </type> <institution> Beaverton, </institution> <address> OR, </address> <year> 1993. </year>
Reference: [C93] <author> J. B. Cushing. </author> <title> Computational proxies: Modeling scientific applications in object databases. </title> <type> Ph.D. thesis, OGI, </type> <institution> Beaverton, OR, expected: </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: To date, we have implemented a computational proxy mechanism that interfaces directly to the GAMESS package. This prototype currently runs under C++ and ObjectStore on distributed Sun SparcStation2 platforms. We are currently working on the database structures that will allow the non-programmatic specifications of proxies for new applications <ref> [C93] </ref>. Fig. 4. Conceptual model for computational proxy. 3 Lessons and Desiderata While we readily admit that computational proxies are not the solution to integrating all applications with object databases, we think they are applicable in other scientific domains and likely far beyond that.
Reference: [IL92] <author> Y. Ioannides and M. Livny. MOOSE: </author> <title> Modeling Objects in a Simulation Environment. </title> <booktitle> Information Processing 89, </booktitle> <publisher> North Holland, </publisher> <month> August </month> <year> 1989. </year>
Reference-contexts: We are not alone in applying object-oriented databases to supporting scientific computing. A recent NSF report [CCT93] shows object-oriented approaches used for protein-structure data, medical research, macromolecules, global change data and scientific visualization. In particular, the MOOSE system <ref> [IL92] </ref> has dealt with modeling the complex inputs to a scientific simulation program. Our main motivation was masking syntactic complexity, but proxies also serve to mask some details of processor heterogeneity and distribution, in the case where the underlying application runs in several dissimilar environments.
Reference: [KL89] <author> M. Kifer amd G. Lausen. F-Logic: </author> <title> A Higher-Order Language for Reasoning about Objects, Inherhitance, and Scheme. </title> <booktitle> Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Portland, OR, </address> <month> May-June </month> <year> 1989. </year>
Reference-contexts: That is, one could construct an object with some subcomponents replaced by variables and use such an object for structural decomposition and composition of other objects. Such a facility is reminiscent of what has been proposed for object logics <ref> [KL89, MZO90] </ref>. Having the ability to specify alternative matches declaratively, rather than to explicitly code the control, would have been a welcome convenience.
Reference: [MZO90] <author> D. Maier, J. Zhu, and H. Ohkawa. </author> <title> Features of the TEDM Object Model. </title> <booktitle> Proc. of the First International Conference on Deductive and Object-Oriented Databases, </booktitle> <publisher> Elsevier Science, </publisher> <year> 1990. </year>
Reference-contexts: That is, one could construct an object with some subcomponents replaced by variables and use such an object for structural decomposition and composition of other objects. Such a facility is reminiscent of what has been proposed for object logics <ref> [KL89, MZO90] </ref>. Having the ability to specify alternative matches declaratively, rather than to explicitly code the control, would have been a welcome convenience.
Reference: [NWM93] <author> J. R. Nicol, C. T. Wilkes, and F. A. Manola. </author> <title> Object Orientation in Heterogeneous Distributed Computing Systems. </title> <booktitle> IEEE Computer 26(6), </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: From this vantage point, our work resembles other efforts in software systems to promote program interoperability, such as software "packaging" [CP91], mid-dleware (see for example Bernstein [Be93]) and distributed object management systems <ref> [NWM93] </ref>.
Reference: [Rao93] <author> M. Rao. </author> <title> Computational proxies for computational chemistry: A proof of concept. </title> <type> Master's thesis, OGI, </type> <institution> Beaverton, OR, expected: </institution> <month> December </month> <year> 1993. </year> <title> Fig. 5. Computational Chemistry Data Model. </title>
References-found: 13

