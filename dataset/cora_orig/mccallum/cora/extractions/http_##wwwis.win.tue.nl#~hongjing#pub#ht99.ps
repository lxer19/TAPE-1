URL: http://wwwis.win.tue.nl/~hongjing/pub/ht99.ps
Refering-URL: http://wwwis.win.tue.nl/~hongjing/
Root-URL: http://www.win.tue.nl
Email: fdebra houben hongjingg@win.tue.nl  
Title: AHAM: A Dexter-based Reference Model for Adaptive Hypermedia  
Author: Paul De Bra Geert-Jan Houben and Hongjing Wu 
Keyword: adaptive hypermedia, user modeling, hyperme-dia reference model.  
Note: Paul De Bra is also affiliated with the  
Address: PO Box 513 NL 5600 MB Eindhoven The Netherlands  Amsterdam.  
Affiliation: Department of Computing Science Eindhoven University of Technology  University of Antwerp, Bel-gium, and with the Centrum voor Wiskunde en Informatica (CWI) in  
Abstract: Hypermedia applications offer users the impression that there are many meaningful ways to navigate through a large body of information nodes. This rich link structure not only creates orientation problems, it may also be a source of comprehension problems when users follow paths through the information which the author did not foresee. Adaptive techniques have been used by a number of researchers [1, 2, 4, 5, 6, 7, 8, 9, 10, 17, 19, 20, 22] in an attempt to offer guidance through and orientation support for rich link structures. The majority of these adaptive hypermedia systems (AHS) have been used in educational applications. The terminology used in this paper also has an educational flavor. However, there are some adaptive on-line information systems (or kiosk-systems), adaptive information retrieval systems, and other adaptive hypermedia applications. In this paper we describe a reference model for adaptive hy-permedia applications, called AHAM, which encompasses most features supported by adaptive systems that exist today or that are being developed (and have been published about). Our description of AHS is based on the Dexter model [15, 16], a widely used reference model for hypermedia. The description is kept somewhat informal in order to be able to explain AHAM rather than formally specify it. AHAM augments Dexter with features for doing adaptation based on a user model which persists beyond the duration of a session. Key aspects in AHAM are: y Geert-Jan Houben is also affiliated with the University of Antwerp, Belgium, and with Origin in Eindhoven. * The adaptation is based on a domain model, a user model and a teaching model which consists of pedagogical rules. We give a formal definition of each of these (sub)models (but only describe the pedagogical rules informally through ex amples). * We distinguish the notions of concept, page and fragment. In some AHS these notions are confused. * We provide a formalism which lets authors write pedagogical rules (about concepts) in such a way that they can be applied automatically. We illustrate various aspects of AHAM by means of some features of some well-known AHS [6, 10]. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> I. Beaumont. </author> <title> User modeling in the interactive anatomy tutoring system ANATOM-TUTOR. </title> <booktitle> User Modeling and User-Adapted Interaction, </booktitle> <volume> Vol. 4, </volume> <pages> pp. 2145, </pages> <publisher> Kluwer academic publishers, </publisher> <year> 1994. </year>
Reference-contexts: correct syntax would be more complicated because of the complex nature of relationships and specifiers in the Dexter model, and thus also in AHAM, and because we would need to discriminate between attributes of concepts in the domain model and in the user model.) &lt; CR.cinfo.type = prerequisite and CR.cinfo.dir <ref> [1] </ref> = FROM and CR.cinfo.dir [2] = TO and CR.ss.length = 2 and CR.ss [1]:uid.knowledge-value CR.cinfo.required-knowledge [1] ) CR.ss [2]:uid.ready-to-read := true ; pre ; true &gt; Note that this rule only works if it is triggered. <p> the Dexter model, and thus also in AHAM, and because we would need to discriminate between attributes of concepts in the domain model and in the user model.) &lt; CR.cinfo.type = prerequisite and CR.cinfo.dir <ref> [1] </ref> = FROM and CR.cinfo.dir [2] = TO and CR.ss.length = 2 and CR.ss [1]:uid.knowledge-value CR.cinfo.required-knowledge [1] ) CR.ss [2]:uid.ready-to-read := true ; pre ; true &gt; Note that this rule only works if it is triggered. Example 2 shows that from an access event a change to the knowledge is generated which propagates as a new event. So if the knowledge value of CR.ss [1] is <p> CR.cinfo.required-knowledge <ref> [1] </ref> ) CR.ss [2]:uid.ready-to-read := true ; pre ; true &gt; Note that this rule only works if it is triggered. Example 2 shows that from an access event a change to the knowledge is generated which propagates as a new event. So if the knowledge value of CR.ss [1] is set through an access event, that triggers the rule given in this example. We now turn to examples that deal with the presentation aspect of an AHS. <p> For simplicity we consider a link with just one source and one destination. &lt; CR.type = link and CR.cinfo.dir <ref> [1] </ref> = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = false ) CR.ss [1]:pres := GOOD ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = <p> consider a link with just one source and one destination. &lt; CR.type = link and CR.cinfo.dir <ref> [1] </ref> = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = false ) CR.ss [1]:pres := GOOD ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = true ) CR.ss [1]:pres := NEUTRAL ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = false ) CR.ss [1]:pres := <p> ) CR.ss <ref> [1] </ref>:pres := GOOD ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = true ) CR.ss [1]:pres := NEUTRAL ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = false ) CR.ss [1]:pres := BAD ; pre ; false &gt; These rules say that links to previously unread but ready-to-read pages are GOOD, links to previously read and ready-to-read pages are NEUTRAL and links to pages that are
Reference: 2. <author> C. Boyle and A. O. Encarnacion. MetaDoc: </author> <title> an adaptive hypertext reading system. </title> <booktitle> User Modeling and User-Adapted Interaction, </booktitle> <volume> Vol. 4, </volume> <pages> pp. 119, </pages> <publisher> Kluwer academic publishers, </publisher> <year> 1994. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model. <p> complicated because of the complex nature of relationships and specifiers in the Dexter model, and thus also in AHAM, and because we would need to discriminate between attributes of concepts in the domain model and in the user model.) &lt; CR.cinfo.type = prerequisite and CR.cinfo.dir [1] = FROM and CR.cinfo.dir <ref> [2] </ref> = TO and CR.ss.length = 2 and CR.ss [1]:uid.knowledge-value CR.cinfo.required-knowledge [1] ) CR.ss [2]:uid.ready-to-read := true ; pre ; true &gt; Note that this rule only works if it is triggered. <p> For simplicity we consider a link with just one source and one destination. &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir <ref> [2] </ref> = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = false ) CR.ss [1]:pres := GOOD ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = true ) CR.ss [1]:pres := <p> one source and one destination. &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir <ref> [2] </ref> = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = false ) CR.ss [1]:pres := GOOD ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = true ) CR.ss [1]:pres := NEUTRAL ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = false ) CR.ss [1]:pres := BAD ; pre ; false <p> ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir <ref> [2] </ref> = TO and CR.ss [2].uid.ready-to-read = true and CR.ss [2].uid.read = true ) CR.ss [1]:pres := NEUTRAL ; pre ; false &gt; &lt; CR.type = link and CR.cinfo.dir [1] = FROM and CR.cinfo.dir [2] = TO and CR.ss [2].uid.ready-to-read = false ) CR.ss [1]:pres := BAD ; pre ; false &gt; These rules say that links to previously unread but ready-to-read pages are GOOD, links to previously read and ready-to-read pages are NEUTRAL and links to pages that are not ready-to-read are BAD.
Reference: 3. <author> P. Brusilovsky. </author> <title> Methods and Techniques of Adaptive Hypermedia. </title> <booktitle> User Modeling and User-Adapted Interaction, </booktitle> <volume> Vol. 6, </volume> <pages> pp. 87129, </pages> <publisher> Kluwer academic publishers, </publisher> <year> 1996. </year>
Reference-contexts: Testing and setting of preferences is considered external functionality. We give a brief general description of how to combine AHS with external functions, and of how to let different AHS communicate with each other. Brusilovsky <ref> [3] </ref> describes adaptive hypermedia as follows: By adaptive hypermedia systems we mean all hypertext and hypermedia systems which reflect some features of the user in the user model and apply this model to adapt various visible aspects of the system to the user. <p> This paper is organized as follows: the next section briefly recalls the basic concepts of adaptive hypermedia, as described in Brusilovsky's overview paper <ref> [3] </ref>. Subsequently we present the architecture of adaptive hypermedia applications in terms of the Dexter-based AHAM model. <p> CONCEPTS OF ADAPTIVE HYPERMEDIA Brusilovsky <ref> [3] </ref> distinguishes between high level methods for adaptive hypermedia support and lower level techniques that are used to realize or implement that support. By a method we mean a notion of adaptation that can be presented at the conceptual level. <p> Techniques operate on actual information content and on the presentation of hypertext links. It may be possible to implement the same method through different techniques and to use the same technique for different methods. We distinguish between content-adaptation and link-adaptation. (Brusilovsky <ref> [3] </ref> calls these adaptive presentation and adaptive navigation.) We do so both at the level of methods and that of techniques. We only present a very brief overview of the methods and techniques. For a more detailed discussion of adaptive hypermedia we refer to [3]. <p> distinguish between content-adaptation and link-adaptation. (Brusilovsky <ref> [3] </ref> calls these adaptive presentation and adaptive navigation.) We do so both at the level of methods and that of techniques. We only present a very brief overview of the methods and techniques. For a more detailed discussion of adaptive hypermedia we refer to [3]. Content-adaptation It may be desirable to present information on a certain topic in different ways, depending on the user's (fore)knowledge, goals, preferences or other characteristic properties of the user. Introductory explanations may be added for novices, advanced details for experts. <p> The order in which items are displayed (on a page) may also be different for different users. At the level of adaptation methods we can thus distinguish three methods: * additional, prerequisite, and comparative explanations * explanation variants * (content) sorting Brusilovsky mentions the following techniques for content-adaptation (see <ref> [3] </ref> for details): * conditional text * stretchtext * fragment variants * page variants * frame-based technique (s) Conditional text can easily be used to implement stretchtext, fragment variants and page variants. <p> Orientation support depends on providing context. It requires some (possibly textual) map of the link structure around the current node (page). Note that generating such a map or hierarchical table of content may also be viewed as content-adaptation (or rather, content-generation). The techniques found in <ref> [3, 10] </ref> for link-adaptation are: * direct guidance (e. g. a next button); * link sorting (like in search engines); * link hiding (hide non-relevant links, but keep anchor text); * link annotation (e. g. use colors to indication relevance); * link disabling (make non-relevant links not work); * link removal
Reference: 4. <author> P. Brusilovsky and L. Pesin. ISIS-Tutor: </author> <title> An adaptive hypertext learning environment. </title> <booktitle> JCKBSE'94, Japanese-CIS Symposium on knowledge-based software engineering, Pereslavl-Zalesski, Russia, </booktitle> <pages> pp. 83 87, </pages> <year> 1994. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model.
Reference: 5. <author> P. Brusilovsky, E. Schwarz and G. Weber. ELM-ART: </author> <title> An intelligent tutoring system on World Wide Web. </title> <booktitle> Third International Conference on Intelligent Tutoring Systems, ITS-96, Montreal, </booktitle> <volume> LNCS Vol. 1086, </volume> <pages> pp. 261 269, </pages> <year> 1996. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model. <p> The concept-value pairs together form an overlay model, which represents the knowledge of the user. Some AHS use a Boolean user model [9, 10], meaning that for each concept the user either knows or does not know the concept. Other AHS use either a small set of knowledge values <ref> [5, 6] </ref>, like not known, learned, well learned and well known, or even a large set, such as a percentage or a (real) value between 0 and 1 [22]. * The read attribute indicates whether the user read something (a fragment, a page or a set of pages) about the concept. <p> In the AHA system [9, 10] this results in the link anchors being colored blue, purple or black respectively. In ELM-ART <ref> [5] </ref> and In-terbook [6] the links would be annotated with a green, yellow or red ball. The above examples illustrate how the adaptive engine of an AHS can use pedagogical rules to generate presentation specifications.
Reference: 6. <author> P. Brusilovsky, E. Schwarz and G. Weber. </author> <title> A Tool for Developing Adaptive Electronic Textbooks on WWW. Proc. </title> <booktitle> WebNet'96 Conference, </booktitle> <pages> pp. 6469, </pages> <address> San Fran--cisco, </address> <year> 1996. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model. <p> The concept-value pairs together form an overlay model, which represents the knowledge of the user. Some AHS use a Boolean user model [9, 10], meaning that for each concept the user either knows or does not know the concept. Other AHS use either a small set of knowledge values <ref> [5, 6] </ref>, like not known, learned, well learned and well known, or even a large set, such as a percentage or a (real) value between 0 and 1 [22]. * The read attribute indicates whether the user read something (a fragment, a page or a set of pages) about the concept. <p> Example 2 The following rule expresses that when a page is ready-to-read and it is accessed, the knowledge value of the corresponding concept becomes well learned in the pre phase. This is somewhat like the behavior of Interbook <ref> [6] </ref>. &lt; access (C) and C:ready-to-read = true ) C:knowledge-value := well learned ; pre ; true &gt; In this example the phase was chosen to be pre because this is the behavior of Interbook and many other AHS. <p> In the AHA system [9, 10] this results in the link anchors being colored blue, purple or black respectively. In ELM-ART [5] and In-terbook <ref> [6] </ref> the links would be annotated with a green, yellow or red ball. The above examples illustrate how the adaptive engine of an AHS can use pedagogical rules to generate presentation specifications. <p> The updated values for attributes from the user model are saved in that user model. An adaptive engine, as described above, can easily operate as a CGI-script or a servlet in a Web-based adaptive hyper-media application. In fact, most recent AHS, including In-terbook <ref> [6] </ref> and AHA [9, 10], are based on CGI-scripts or servlets. The fact that following a link may result in multiple destinations is convenient for modeling AHS which divide the display (or browser window) into different parts, each showing different aspects of the adaptive hypermedia application. <p> A kiosk system and a course text realized in AHA [10] for instance use an adaptive table of contents frame and an information frame. (See http://wwwis.win.tue.nl/IShype/ and http://wwwis.win.tue.nl/2M350/.) Applications of Interbook <ref> [6] </ref> also include frames that show concepts that are learned or that are still to be learned. Each time a link is followed all frames need to be updated. <p> Our main motivation for designing AHAM was to develop a framework to aid the development of adaptive hypermedia systems in which authoring would be much easier than in existing systems like Interbook <ref> [6] </ref> and AHA [9, 10]. The main hurdle in facilitating authoring is the clear separation of the design of the concept space, the actual information content, the link structure at a conceptual level, and the dependencies between concepts (like prerequisites and inhibitors).
Reference: 7. <author> L. Calvi and P. De Bra. </author> <title> Improving the Usability of Hypertext Courseware through Adaptive Linking. </title> <booktitle> Proc. 8th ACM Conference on Hypertext, Southamp-ton, </booktitle> <pages> pp. 224225, </pages> <year> 1997. </year>
Reference: 8. <author> L. Calvi and P. De Bra. </author> <title> Using dynamic hypertext to create multi-purpose textbooks. </title> <booktitle> Proc. ED-MEDIA'97, Calgary, </booktitle> <pages> pp. 130135, </pages> <year> 1997. </year>
Reference: 9. <author> P. De Bra and L. Calvi. </author> <title> Creating adaptive hyperdocu-ments for and on the Web. </title> <booktitle> Proc. WebNet'97 Conference, Toronto, </booktitle> <pages> pp. 149155, </pages> <year> 1997. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model. <p> The concept-value pairs together form an overlay model, which represents the knowledge of the user. Some AHS use a Boolean user model <ref> [9, 10] </ref>, meaning that for each concept the user either knows or does not know the concept. <p> Actual implementations of AHS may implement this structure in a different way. The AHA system <ref> [9, 10] </ref> for instance uses a logfile (separate for every user) in which each time is logged at which a user requests a page, and each time when a user leaves the page. <p> In the AHA system <ref> [9, 10] </ref> this results in the link anchors being colored blue, purple or black respectively. In ELM-ART [5] and In-terbook [6] the links would be annotated with a green, yellow or red ball. <p> The updated values for attributes from the user model are saved in that user model. An adaptive engine, as described above, can easily operate as a CGI-script or a servlet in a Web-based adaptive hyper-media application. In fact, most recent AHS, including In-terbook [6] and AHA <ref> [9, 10] </ref>, are based on CGI-scripts or servlets. The fact that following a link may result in multiple destinations is convenient for modeling AHS which divide the display (or browser window) into different parts, each showing different aspects of the adaptive hypermedia application. <p> Our main motivation for designing AHAM was to develop a framework to aid the development of adaptive hypermedia systems in which authoring would be much easier than in existing systems like Interbook [6] and AHA <ref> [9, 10] </ref>. The main hurdle in facilitating authoring is the clear separation of the design of the concept space, the actual information content, the link structure at a conceptual level, and the dependencies between concepts (like prerequisites and inhibitors).
Reference: 10. <author> P. De Bra and L. Calvi. </author> <title> Towards a Generic Adaptive Hypermedia System. </title> <booktitle> Proc. Second Workshop on Adaptive Hypertext and Hypermedia, Pittsburgh, </booktitle> <pages> pp. 511, </pages> <year> 1998. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model. <p> Orientation support depends on providing context. It requires some (possibly textual) map of the link structure around the current node (page). Note that generating such a map or hierarchical table of content may also be viewed as content-adaptation (or rather, content-generation). The techniques found in <ref> [3, 10] </ref> for link-adaptation are: * direct guidance (e. g. a next button); * link sorting (like in search engines); * link hiding (hide non-relevant links, but keep anchor text); * link annotation (e. g. use colors to indication relevance); * link disabling (make non-relevant links not work); * link removal <p> The concept-value pairs together form an overlay model, which represents the knowledge of the user. Some AHS use a Boolean user model <ref> [9, 10] </ref>, meaning that for each concept the user either knows or does not know the concept. <p> Actual implementations of AHS may implement this structure in a different way. The AHA system <ref> [9, 10] </ref> for instance uses a logfile (separate for every user) in which each time is logged at which a user requests a page, and each time when a user leaves the page. <p> In the AHA system <ref> [9, 10] </ref> this results in the link anchors being colored blue, purple or black respectively. In ELM-ART [5] and In-terbook [6] the links would be annotated with a green, yellow or red ball. <p> The updated values for attributes from the user model are saved in that user model. An adaptive engine, as described above, can easily operate as a CGI-script or a servlet in a Web-based adaptive hyper-media application. In fact, most recent AHS, including In-terbook [6] and AHA <ref> [9, 10] </ref>, are based on CGI-scripts or servlets. The fact that following a link may result in multiple destinations is convenient for modeling AHS which divide the display (or browser window) into different parts, each showing different aspects of the adaptive hypermedia application. <p> The fact that following a link may result in multiple destinations is convenient for modeling AHS which divide the display (or browser window) into different parts, each showing different aspects of the adaptive hypermedia application. A kiosk system and a course text realized in AHA <ref> [10] </ref> for instance use an adaptive table of contents frame and an information frame. (See http://wwwis.win.tue.nl/IShype/ and http://wwwis.win.tue.nl/2M350/.) Applications of Interbook [6] also include frames that show concepts that are learned or that are still to be learned. Each time a link is followed all frames need to be updated. <p> Our main motivation for designing AHAM was to develop a framework to aid the development of adaptive hypermedia systems in which authoring would be much easier than in existing systems like Interbook [6] and AHA <ref> [9, 10] </ref>. The main hurdle in facilitating authoring is the clear separation of the design of the concept space, the actual information content, the link structure at a conceptual level, and the dependencies between concepts (like prerequisites and inhibitors).
Reference: 11. <author> P. De Bra, G. J. Houben, Y. Kornatzky. </author> <title> An Extensible Data Model for Hyperdocuments. </title> <booktitle> Proc. 4th ACM Conference on Hypertext, Milan, </booktitle> <pages> pp. 222231, </pages> <year> 1992. </year>
Reference-contexts: The Dexter model describes an architecture that is more powerful in some areas than any hypermedia system that exists today. However, the model is showing its age in other areas. This has resulted in some newer proposals for models like the Tower model <ref> [11] </ref>, HDM [13] and OOHDM [23]. However, the Dexter model remains by far the most widely used reference model, which is still suited for modeling most kinds of hypermedia applications. This is also why we use Dexter as the basis in this paper.
Reference: 12. <author> R. Furuta and P. D. Stotts. </author> <title> The Trellis Hypertext Reference Model. </title> <booktitle> In Proc. NIST Hypertext Standardization Workshop, </booktitle> <pages> pp. 8393, </pages> <year> 1990. </year>
Reference-contexts: Many hypermedia systems have been developed during the past thirty years. In 1988 and 1990 a number of researchers and developers came together to define a common reference model for modern hypermedia systems. The resulting Dexter model was published at a NIST workshop [15], together with some other models <ref> [12, 18] </ref>, and later also in the Communications of the ACM [16]. The Dexter model describes an architecture that is more powerful in some areas than any hypermedia system that exists today. However, the model is showing its age in other areas.
Reference: 13. <author> F. Garzotto, P. Paolini, D. Schwabe. </author> <title> HDM A model-based approach to hypermedia application design. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 11:1, </volume> <pages> pp. 123, </pages> <year> 1993. </year>
Reference-contexts: The Dexter model describes an architecture that is more powerful in some areas than any hypermedia system that exists today. However, the model is showing its age in other areas. This has resulted in some newer proposals for models like the Tower model [11], HDM <ref> [13] </ref> and OOHDM [23]. However, the Dexter model remains by far the most widely used reference model, which is still suited for modeling most kinds of hypermedia applications. This is also why we use Dexter as the basis in this paper.
Reference: 14. <author> K. Grnbk, R. Trigg. </author> <title> Design issues for a Dexter-based hypermedia system. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 37, nr. 2, </volume> <pages> pp. 4049, </pages> <year> 1994. </year>
Reference-contexts: The Dexter model allows for relationships with a sequence of just one specifier (see e. g. <ref> [14] </ref>). While we allow such relationships for conformance with Dexter, current AHS only consider relationships between at least two specifiers. The most common type of concept relationship is of course the type link. It corresponds to link components in the Dexter model that are used for hypertext navigation.
Reference: 15. <author> F. Halasz and M. Schwartz. </author> <title> The Dexter Reference Model. </title> <booktitle> In Proc. NIST Hypertext Standardization Workshop, </booktitle> <pages> pp. 95133, </pages> <year> 1990. </year>
Reference-contexts: Many hypermedia systems have been developed during the past thirty years. In 1988 and 1990 a number of researchers and developers came together to define a common reference model for modern hypermedia systems. The resulting Dexter model was published at a NIST workshop <ref> [15] </ref>, together with some other models [12, 18], and later also in the Communications of the ACM [16]. The Dexter model describes an architecture that is more powerful in some areas than any hypermedia system that exists today. However, the model is showing its age in other areas. <p> Readers not familiar with reference models for hy-permedia in general, and with the Dexter model in particular, are urged to review references <ref> [15, 16] </ref>. A second, but not secondary aim of the Adaptive Hypermedia Application Model (AHAM) which this paper defines is to provide a sound basis for the development of new AHS. <p> THE ADAPTIVE HYPERMEDIA APPLICATION MODEL (AHAM) In hypermedia applications the emphasis is always on the content of the information nodes and on the link structure. The Dexter model <ref> [15, 16] </ref> confirms this by concentrating on what it calls the storage layer. It represents a domain model, i. e. the author's view on the application domain. In adaptive hypermedia applications the central role of the domain model is shared with a second part: the user model. <p> This will be done in a forthcoming extended paper that will also include a more formal definition of AHAM, using the specification language Z that was used to formally define the Dexter model <ref> [15] </ref>. CONCLUSIONS In this paper we have introduced a reference model for adaptive hypermedia applications. This model, called AHAM, was explained in terms of the well-known Dexter model.
Reference: 16. <author> F. Halasz and M. Schwartz. </author> <title> The Dexter Hypertext Reference Model. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 37, nr. 2, </volume> <pages> pp. 3039, </pages> <year> 1994. </year>
Reference-contexts: In 1988 and 1990 a number of researchers and developers came together to define a common reference model for modern hypermedia systems. The resulting Dexter model was published at a NIST workshop [15], together with some other models [12, 18], and later also in the Communications of the ACM <ref> [16] </ref>. The Dexter model describes an architecture that is more powerful in some areas than any hypermedia system that exists today. However, the model is showing its age in other areas. This has resulted in some newer proposals for models like the Tower model [11], HDM [13] and OOHDM [23]. <p> Readers not familiar with reference models for hy-permedia in general, and with the Dexter model in particular, are urged to review references <ref> [15, 16] </ref>. A second, but not secondary aim of the Adaptive Hypermedia Application Model (AHAM) which this paper defines is to provide a sound basis for the development of new AHS. <p> THE ADAPTIVE HYPERMEDIA APPLICATION MODEL (AHAM) In hypermedia applications the emphasis is always on the content of the information nodes and on the link structure. The Dexter model <ref> [15, 16] </ref> confirms this by concentrating on what it calls the storage layer. It represents a domain model, i. e. the author's view on the application domain. In adaptive hypermedia applications the central role of the domain model is shared with a second part: the user model. <p> COMMUNICATION BETWEEN ADAPTIVE HYPERMEDIA SYSTEMS The Dexter model assumes that all history information is limited to a single browsing or authoring session. It even states that when closing a session by default, pending changes to instantiations are not saved <ref> [16] </ref>. In AHAM we explicitly model a permanent user model, thus taking into account that a user's interaction with a hypermedia information source may span several sessions.
Reference: 17. <author> J. Hothi and W. Hall. </author> <title> An Evaluation of Adapted Hypermedia Techniques Using Static User Modelling. </title> <booktitle> Proc. Second Workshop on Adaptive Hypertext and Hypermedia, Pittsburgh, </booktitle> <pages> pp. 4550, </pages> <year> 1998. </year>
Reference-contexts: It is the lowest level technique and is sufficient to implement the different types of additional explanations and explanation variants. When a content fragment is considered not desirable most AHS will leave it out. Preliminary evaluation of the SAD system <ref> [17] </ref> however suggests that users may prefer these fragments to be grayed out but still readable. Frame-based techniques are used in AHS that dynamically create presentations by applying natural language generation techniques to paste together small fragments of information and turning them into fluent text [21].
Reference: 18. <author> D. Lange. </author> <title> A Formal Model of Hypertext. </title> <booktitle> In Proc. NIST Hypertext Standardization Workshop, </booktitle> <pages> pp. 145 166, </pages> <year> 1990. </year>
Reference-contexts: Many hypermedia systems have been developed during the past thirty years. In 1988 and 1990 a number of researchers and developers came together to define a common reference model for modern hypermedia systems. The resulting Dexter model was published at a NIST workshop [15], together with some other models <ref> [12, 18] </ref>, and later also in the Communications of the ACM [16]. The Dexter model describes an architecture that is more powerful in some areas than any hypermedia system that exists today. However, the model is showing its age in other areas.
Reference: 19. <author> A. Kobsa, D. Muller and A. Nill. KN-AHS: </author> <title> An adaptive hypertext client of the user modeling system BGP-MS. </title> <booktitle> Proc. Fourth International Conference on User Modeling, </booktitle> <address> Hyannis, MA, </address> <pages> pp. 3136, </pages> <year> 1994. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model.
Reference: 20. <author> N. Mathe and J. Chen. </author> <title> A user-centered approach to adaptive hypertext based on an information relevance model. </title> <booktitle> Proc. Fourth International Conference on User Modeling, </booktitle> <address> Hyannis, MA, </address> <pages> pp. 107114, </pages> <year> 1994. </year>
Reference: 21. <author> M. Milosavljevic and J. Oberlander. </author> <title> Dynamic Hypertext Catalogues: Helping Users to Help Themselves. </title> <booktitle> Proc. Ninth ACM Conference on Hypertext and Hyper-media, </booktitle> <address> Pittsburgh, PA, </address> <pages> pp. 123131. </pages>
Reference-contexts: Frame-based techniques are used in AHS that dynamically create presentations by applying natural language generation techniques to paste together small fragments of information and turning them into fluent text <ref> [21] </ref>. Link-adaptation The basic idea with link-adaptation is to change or annotate the rich link structure in such a way that the user is guided towards interesting, relevant information, and kept away from non-relevant information.
Reference: 22. <author> D. Pilar da Silva. </author> <title> Concepts and documents for adaptive educational hypermedia: a model and a prototype. </title> <booktitle> Proc. Second Workshop on Adaptive Hypertext and Hypermedia, Pittsburgh, </booktitle> <pages> pp. 3340, </pages> <year> 1998. </year>
Reference-contexts: This is also why we use Dexter as the basis in this paper. In recent years a number of adaptive hypermedia systems (AHS) have been developed <ref> [2, 4, 5, 6, 9, 10, 19, 22] </ref>. In adaptive hypermedia applications the system keeps track of evolving aspects of the user, such as preferences and domain knowledge. This permanent and continuously updated record is called a user model. <p> Other AHS use either a small set of knowledge values [5, 6], like not known, learned, well learned and well known, or even a large set, such as a percentage or a (real) value between 0 and 1 <ref> [22] </ref>. * The read attribute indicates whether the user read something (a fragment, a page or a set of pages) about the concept.
Reference: 23. <author> D. Schwabe, G. Rossi. </author> <title> The Object-Oriented Hyper-media Design Model. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 38, nr. 8, </volume> <pages> pp. 4546, </pages> <year> 1995. </year>
Reference-contexts: The Dexter model describes an architecture that is more powerful in some areas than any hypermedia system that exists today. However, the model is showing its age in other areas. This has resulted in some newer proposals for models like the Tower model [11], HDM [13] and OOHDM <ref> [23] </ref>. However, the Dexter model remains by far the most widely used reference model, which is still suited for modeling most kinds of hypermedia applications. This is also why we use Dexter as the basis in this paper.
References-found: 23

