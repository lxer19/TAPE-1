URL: ftp://ftp.cs.orst.edu/pub/tgd/papers/kcw-ips.ps.gz
Refering-URL: http://www.cs.orst.edu/~tgd/cv/pubs.html
Root-URL: 
Title: The Test Incorporation Theory of Problem Solving (Preliminary Report)  
Author: Thomas G. Dietterich James S. Bennett 
Address: Corvallis, Oregon 97331  1850 Embarcadero Road Palo Alto, California 94303  
Affiliation: Department of Computer Science Oregon State University  Teknowledge, Inc.  
Abstract: Test incorporation is a program transformation in which a generate-and-test problem solver is improved by moving information out of the test and into the generator. This paper sketches a theory of problem solving based on test incorporation. Two views of test incorporation are presented: (a) as a compile-time algorithm optimization and (b) as a run-time problem-solving method. The paper focuses on the latter, which is termed the "algebraic view," because it is often the case that test incorporations can be applied to "solve" for the desired answer thus eliminating any need to generate and test possible answers. The theory introduces an infinite tower of meta-level problem solvers, each of which has the task of improving the performance (via test incorporation) of all of the problem solvers "below" it. This infinite tower can neither be constructed in principle nor in practice, but it provides a kind of infinite-series expansion of any given problem solver. Several familiar AI methods are reconstructed as "residual" problem solvers|the remnants of the infinite tower of problem solvers after the meta-level problem solvers have done their tasks and been "compiled away." The test incorporation process is a means by which knowledge is effectively exploited to yield efficient performance. This observation leads naturally to a definition of "intelligence" as the ability to perform test incorporations. It is asserted that any intelligent system must have some ability to perform test incorporations, and test incorporation methods will be critical to the development of generally intelligent systems. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Amarel, S. </author> <year> 1968. </year> <title> On the representation of problems of reasoning about actions. </title> <editor> In Michie (ed.), </editor> <booktitle> Machine Intelligence 3, </booktitle> <publisher> U. of Edinburgh Press. </publisher>
Reference-contexts: If we are given only the original definition of full brothers in terms of P arent and Sex, it will be impossible to perform any test incorporations without reformulating the test so that it corresponds to the available generators <ref> (see Amarel, 1968, 1983) </ref>. If we had sufficient knowledge, we could reformulate the test to define x and y to be full brothers if there exists a mating mat such that x 6= y ^ Son (x; mat) ^ Son (y; mat).
Reference: <author> Amarel, S. </author> <year> 1983. </year> <title> Program synthesis as a theory formation task|problem representations and solution methods. </title> <type> Rep. </type> <institution> No. CBM-TR-135, Department of Computer Science, Rutgers University. </institution>
Reference: <author> Bennett, J. and Dietterich, T. </author> <title> Forthcoming. Applying test incorporation to derive efficient algorithms. </title>
Reference: <author> Buchanan, B. G. and Feigenbaum, E. A. </author> <year> 1978. </year> <title> Dendral and Meta-Dendral: Their applications dimension. </title> <journal> Artificial Intelligence, </journal> <volume> 11, </volume> <pages> 5-24. </pages>
Reference-contexts: He characterized the weak methods, such as generate-and-test, as being very inefficient but broadly applicable and the strong methods, such as linear programming, as being very efficient but highly specialized. The DENDRAL system <ref> (Buchanan and Feigenbaum, 1978) </ref> and the vast array of expert systems that have followed it have demonstrated that it is possible to engineer these highly efficient and specialized methods for a wide variety of domains.
Reference: <author> Cohen, D. </author> <year> 1986. </year> <title> Automatic compilation of logical specifications into efficient programs. </title> <booktitle> In Proceedings of AAAI-86, </booktitle> <address> Los Altos: </address> <publisher> Morgan-Kaufmann. </publisher> <pages> 20-25. </pages>
Reference: <author> Dietterich, T. G., </author> <year> 1986. </year> <title> Learning at the Knowledge Level. </title> <journal> Machine Learning, </journal> <volume> 1 (3). </volume>
Reference: <author> Kahn, K. M. </author> <year> 1983. </year> <title> A partial evaluator of Lisp written in Prolog. </title> <institution> UPMAIL memo, Department of Computing Science, Uppsala University. </institution>
Reference: <author> Kant, E. </author> <year> 1979. </year> <title> Efficiency considerations in program synthesis: A knowledge-based approach. </title> <type> Doctoral dissertation. Rep. </type> <institution> No. STAN-CS-79-755. Department of Computer Science, Stanford University. </institution>
Reference: <author> Lindsay, R., Buchanan, B., Feigenbaum, E., and Lederberg, J. </author> <year> 1980. </year> <title> Applications of Artificial Intelligence to Organic Chemistry: The Dendral Project. </title> <address> New York: </address> <publisher> McGraw-Hill. </publisher>
Reference-contexts: Figure 5 shows the final algorithm that we have developed. The kind of reasoning that we have been describing is familiar to most computer scientists. Several important AI systems have been designed around the notion of constraining a generator of possibilities. For example, the heart of the DENDRAL system <ref> (Lindsay, Buchanan, Feigenbaum & Lederberg, 1980) </ref> is CONGEN|a generator of all possible molecular structures consistent with a given set of constraints. If only the chemical formula of the molecule is given to CONGEN, it typically generates millions of possible structures.
Reference: <author> Mostow, D. J. </author> <year> 1983a. </year> <title> Machine transformation of advice into a heuristic search procedure. In Machine Learning, </title> <editor> Michalski, R. S., Carbonell, J. G., and Mitchell, T. M., (eds.), </editor> <address> Palo Alto: </address> <publisher> Tioga. </publisher> <pages> 367-404. </pages>
Reference: <author> Mostow, D. J. </author> <year> 1983b. </year> <title> A problem-solver for making advice operational. </title> <booktitle> In Proceedings of AAAI-83, </booktitle> <address> Los Altos: </address> <publisher> Morgan-Kaufmann. </publisher> <pages> 279-83. </pages> <note> 13 Newell, </note> <author> A. </author> <year> 1969. </year> <title> Heuristic programming: ill-structured problems, in Progress in Operations Re--search, </title> <editor> Arnofsky, J., (ed.), </editor> <address> New York: </address> <publisher> Wiley. </publisher> <pages> 363-414. </pages>
Reference: <author> Newell, A. </author> <year> 1981. </year> <title> The Knowledge Level. </title> <type> AI Magazine 2 (2) 1-20. </type>
Reference: <author> Rosenschein, J., and Singh, V., </author> <year> 1983. </year> <title> The utility of meta-level effort. </title> <type> Rep. </type> <institution> No. HPP-83-20. Department of Computer Science, Stanford University. </institution>
Reference: <author> Shapiro, E. </author> <year> 1986. </year> <editor> (ed.) </editor> <booktitle> Third International Conference on Logic Programming, Lecture Notes In Computer Science No. 225. </booktitle> <address> Berlin: </address> <publisher> Springer Verlag. </publisher> <pages> 25-83. </pages>
Reference-contexts: In addition to using the idea of test incorporation to guide the development of particular AI systems, some researchers have attempted to formalize and implement general-purpose systems for performing test incorporation. The simplest example of this is the work on Prolog compilers, especially for parallel logic programs <ref> (Shapiro, 1986) </ref>. A Prolog program can be viewed as a particular cascade of generators and tests. Some compilers consider re-arranging the order of generation and testing in order to improve performance. Related theoretical analyses of this problem include Simon & Kadane (1975) and Smith & Genesereth (1985).
Reference: <author> Simon, H. A., and Kadane, J. B. </author> <year> 1975. </year> <title> Optimal problem-solving search: all-or-none solutions. </title> <journal> Artificial Intelligence. </journal> <volume> 6 (3) 235-247. </volume>
Reference: <author> Smith, David E., and Genesereth, M. R. </author> <year> 1985. </year> <title> Ordering conjunctive queries. </title> <journal> Artificial Intelligence, </journal> <volume> 26 (2) 171-216. </volume>
Reference: <author> Smith, David E. </author> <year> 1985. </year> <title> Controlling Inference, </title> <type> Doctoral Dissertation, </type> <institution> Department of Computer Science, Stanford University. </institution>
Reference: <author> Smith, Douglas R. </author> <title> In press. On the design of generate-and-test algorithms: subspace generators. </title>
Reference: <author> Tappel, S. </author> <year> 1980. </year> <title> Some algorithm design methods. </title> <booktitle> In Proceedings of AAAI-80, </booktitle> <address> Stanford, California. </address> <pages> 64-67. </pages>
Reference-contexts: The result is an algorithm that directly computes the solutions. Test incorporation is a very attractive program transformation for several reasons. First, it is incremental. Hence, it allows us to gradually improve algorithms, and it can be applied to discover new algorithms <ref> (see Tappel, 1980) </ref>. Second, it is performance-aligned|that is, it always improves (or at least does not degrade) the performance of the algorithm, and this performance improvement is easy to compute. Third, it affects program modifiability. <p> First, we have shown that test incorporation is a powerful program transformation, and that it can be applied incrementally to develop efficient algorithms. In addition to our example problem of computing full brothers, test incorporation has been applied to derive such algorithms as the Seive of Eratosthenes <ref> (Tappel, 1980) </ref>, an efficient shortest-path algorithm (Tappel, 1980), the greedy algorithm for minimum spanning trees (Bennett & Dietterich, Forthcoming), quicksort (Smith, In Press), and the DENDRAL system (Bennett & Dietterich, Forthcoming). <p> In addition to our example problem of computing full brothers, test incorporation has been applied to derive such algorithms as the Seive of Eratosthenes <ref> (Tappel, 1980) </ref>, an efficient shortest-path algorithm (Tappel, 1980), the greedy algorithm for minimum spanning trees (Bennett & Dietterich, Forthcoming), quicksort (Smith, In Press), and the DENDRAL system (Bennett & Dietterich, Forthcoming).
Reference: <author> Tarjan, R. E. </author> <year> 1975. </year> <title> Efficiency of a good but not linear set union algorithm, </title> <journal> J. Association for Computing Machinery, </journal> <volume> 22, </volume> <pages> 215-225. 14 </pages>
References-found: 20

