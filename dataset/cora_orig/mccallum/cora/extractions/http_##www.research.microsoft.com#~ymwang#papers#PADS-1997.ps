URL: http://www.research.microsoft.com/~ymwang/papers/PADS-1997.ps
Refering-URL: http://www.research.microsoft.com/~ymwang/papers/PADS97CR.htm
Root-URL: http://www.research.microsoft.com
Email: damani@cs.utexas.edu ymwang@research.att.com garg@ece.utexas.edu  
Title: Optimistic Distributed Simulation Based on Transitive Dependency Tracking  
Author: Om P. Damani Yi-Min Wang Vijay K. Garg 
Address: Austin Murray Hill, NJ Uni. of Texas at Austin  
Affiliation: Dept. of Computer Sci. AT&T Labs-Research Dept. of Elect. Comp. Eng Uni. of Texas at  
Abstract: In traditional optimistic distributed simulation protocols, a logical process(LP) receiving a straggler rolls back and sends out anti-messages. Receiver of an anti-message may also roll back and send out more anti-messages. So a single straggler may result in a large number of anti-messages and multiple rollbacks of some LPs. In our protocol, an LP receiving a straggler broadcasts its rollback. On receiving this announcement, other LPs may roll back but they do not announce their rollbacks. So each LP rolls back at most once in response to each straggler. Anti-messages are not used. This eliminates the need for output queues and results in simple memory management. It also eliminates the problem of cascading rollbacks and echoing, and results in faster simulation. All this is achieved by a scheme for maintaining transitive dependency information. The cost incurred includes the tagging of each message with extra dependency information and the increased processing time upon receiving a message. We also present the similarities between the two areas of distributed simulation and distributed recovery. We show how the solutions for one area can be applied to the other area. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Avril and C. Tropper. </author> <title> Clustered Time Warp and Logic Simulation. </title> <booktitle> Proc. 9th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 112-119, </pages> <year> 1995. </year>
Reference-contexts: Several designs are possible. If the interaction inside a cluster is optimistic while inter-cluster messages are sent conservatively [18], independent SV's can be used inside each cluster, involving only the LPs in the cluster. If intra-cluster execution is sequential while inter-cluster execution is optimistic <ref> [1] </ref>, SV's can be used for inter-cluster messages with one entry per cluster. Similarly one can devise a scheme where inter-cluster and intra-cluster executions are both optimistic but employ different simulation vectors. This can be further generalized to a hierarchy of clusters and simulation vectors. <p> Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in <ref> [1, 18] </ref> by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions. In distributed recovery, the paper by Lowry et al. [14] describes an idea similar to the conservative time windows in the simulation literature [7].
Reference: [2] <author> S. Bellenot. </author> <title> Global Virtual Time Algorithms. </title> <booktitle> Proc. Multiconference on Distributed Simulation, </booktitle> <pages> 122-127, </pages> <year> 1990. </year>
Reference-contexts: It is the minimum of the virtual times of all LPs and all the messages in transit at the given instant. Several algorithms have been developed for computing GVT <ref> [2, 20] </ref>. To reduce the size of simulation vectors, any entry that has a timestamp less than the GVT can be set to NULL, and NULL entries need not be transmitted with the message. <p> Distributed Simulation Distributed Recovery Logical Process Recovery Unit [19] Virtual Time State Interval Index Sim. Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection [6] Global Virtual Time <ref> [2] </ref> Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and
Reference: [3] <author> K. M. Chandy and R. Sherman. </author> <title> The Conditional Event Approach to Distributed Simulation. </title> <booktitle> Proc. SCS Multiconference on Distributed Simulation, </booktitle> <pages> 93-99, </pages> <year> 1989. </year>
Reference-contexts: The optimistic protocol presented in this paper is based on the optimistic recovery protocol presented in [4, 21]. In the simulation scheme by Dickens and Reynolds [5], any results of an optimistically processed event are not sent to other processes until they become definite <ref> [3] </ref>. In the recovery scheme by Jalote [11], any messages originating from an unstable state interval are not sent to other processes until the interval becomes stable [6]. Both schemes confine the loss of computation, either due to a straggler or a failure, to the local process. <p> Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection [6] Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event <ref> [3] </ref> Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions. <p> [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection [6] Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event <ref> [3] </ref> Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions.
Reference: [4] <author> O. P. Damani and V. K. Garg. </author> <title> How to Recover Efficiently and Asynchronously when Optimism Fails. </title> <booktitle> Proc. 16th IEEE Intl. Conf. Distributed Computing Systems, </booktitle> <pages> 108-115, </pages> <year> 1996. </year>
Reference-contexts: This results in less memory overhead and simple memory management algorithms. It also eliminates the problem of cascading rollbacks and echoing [15], resulting in faster simulation. We use aggressive cancellation [7]. Our protocol is an adaptation of a similar protocol for the problem of distributed recovery <ref> [4, 21] </ref>. We fl supported in part by the NSF Grants CCR-9520540 and ECS-9414780, a TRW faculty assistantship award, a General Motors Fellowship, and an IBM grant. illustrate the main concept behind this scheme with the help of Figure 1. <p> To take rollbacks into account, we extend this relation. As in <ref> [4, 21] </ref>, we define it for the states. <p> In other words, although a rollback does occur, the rolled back states can always be reconstructed. The time warp optimistic approach [10] inspired the seminal work on optimistic message logging [19]. The optimistic protocol presented in this paper is based on the optimistic recovery protocol presented in <ref> [4, 21] </ref>. In the simulation scheme by Dickens and Reynolds [5], any results of an optimistically processed event are not sent to other processes until they become definite [3].
Reference: [5] <author> P. M. Dickens and P. F. Reynolds Jr. </author> <title> SRADS with Local Rollback. </title> <booktitle> Proc. SCS Multiconference on Dist. Simulation, </booktitle> <pages> 161-164, </pages> <year> 1990. </year>
Reference-contexts: The time warp optimistic approach [10] inspired the seminal work on optimistic message logging [19]. The optimistic protocol presented in this paper is based on the optimistic recovery protocol presented in [4, 21]. In the simulation scheme by Dickens and Reynolds <ref> [5] </ref>, any results of an optimistically processed event are not sent to other processes until they become definite [3]. In the recovery scheme by Jalote [11], any messages originating from an unstable state interval are not sent to other processes until the interval becomes stable [6].
Reference: [6] <author> E. N. Elnozahy, D. B. Johnson and Y. M. Wang. </author> <title> A Survey of Rollback-Recovery Protocols in Message-Passing Systems. </title> <type> Tech. Rep. </type> <institution> No. CMU-CS-96-181, Dept. of Computer Science, Carnegie Mellon University, ftp://ftp.cs.cmu.edu/user/mootaz/papers/S.ps, </institution> <year> 1996. </year>
Reference-contexts: So there is a trade-off between the size of simulation vectors and unnecessary rollbacks. But it does not affect the correctness of the simulation. 6 Distributed Simulation and Dis tributed Recovery The problem of failure recovery in distributed systems <ref> [6] </ref> is very similar to the problem of distributed simulation. Upon a failure, a process typically restores its last checkpoint and starts execution from there. However, process states that were lost upon the failure may create orphans and cause the system state to become inconsistent. <p> However, process states that were lost upon the failure may create orphans and cause the system state to become inconsistent. A consistent system state is one where the send of a message must be recorded if its receive is recorded <ref> [6] </ref>. In pessimistic logging [6], every message is logged before the receiver acts on it. When a process fails, it restores its last checkpoint and replays the logged messages in the original order. This ensures that the pre-failure state is recreated and no other process needs to be rolled back. <p> However, process states that were lost upon the failure may create orphans and cause the system state to become inconsistent. A consistent system state is one where the send of a message must be recorded if its receive is recorded <ref> [6] </ref>. In pessimistic logging [6], every message is logged before the receiver acts on it. When a process fails, it restores its last checkpoint and replays the logged messages in the original order. This ensures that the pre-failure state is recreated and no other process needs to be rolled back. <p> Any optimistic logging protocol must roll back all orphan states in order to bring the system back to a consistent state. There are many parallels between the issues in distributed recovery and distributed simulation. A survey of different approaches to distributed recovery can be found in <ref> [6] </ref>. In Table 1, we list the equivalent terms from these two domains. References are omitted for those terms that are widely used. The equivalence is exact in many cases, but only approximate in other cases. Stragglers trigger rollbacks in distributed simulation, while failures trigger rollbacks in distributed recovery. <p> The equivalence is exact in many cases, but only approximate in other cases. Stragglers trigger rollbacks in distributed simulation, while failures trigger rollbacks in distributed recovery. Conservative simulation [7] ensures that the current state will never need to roll back. Similarly, pessimistic logging <ref> [6] </ref> ensures that the current state is always recoverable after a failure. In other words, although a rollback does occur, the rolled back states can always be reconstructed. The time warp optimistic approach [10] inspired the seminal work on optimistic message logging [19]. <p> In the recovery scheme by Jalote [11], any messages originating from an unstable state interval are not sent to other processes until the interval becomes stable <ref> [6] </ref>. Both schemes confine the loss of computation, either due to a straggler or a failure, to the local process. Distributed Simulation Distributed Recovery Logical Process Recovery Unit [19] Virtual Time State Interval Index Sim. Vector (this paper) Trans. Dep. <p> Distributed Simulation Distributed Recovery Logical Process Recovery Unit [19] Virtual Time State Interval Index Sim. Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection <ref> [6] </ref> Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion <p> Distributed Simulation Distributed Recovery Logical Process Recovery Unit [19] Virtual Time State Interval Index Sim. Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection <ref> [6] </ref> Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined <p> Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection <ref> [6] </ref> Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions. <p> Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection <ref> [6] </ref> Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions. <p> Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection <ref> [6] </ref> Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions. <p> Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection <ref> [6] </ref> Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions. <p> The arrival of a straggler in optimistic simulation does not cause any loss of information, while the occurrence of a failure in optimistic logging causes volatile message logs to be lost. So some recovery protocols have to deal with "lost in-transit message" problem <ref> [6] </ref> which is not present in distributed simulation protocols. Incoming messages from different channels can be processed in an arbitrary order, while event messages in distributed simulation must be executed in the order of increasing timestamps. <p> Distributed recovery can potentially benefit from the advances in distributed simulation in the areas of memory management [13], analytical modeling to determine checkpoint frequency [8], checkpointing mechanisms [22], and time constrained systems [9]. Similarly, research work on coordinated checkpointing, optimal checkpoint garbage collection, and dependency tracking <ref> [6] </ref> can potentially be applied to distributed simulation.
Reference: [7] <author> R. Fujimoto. </author> <title> Parallel Discrete Event Simulation. </title> <journal> Comm. ACM, </journal> <volume> 33(10), </volume> <pages> 30-53, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Our scheme does not require output queues and anti-messages. This results in less memory overhead and simple memory management algorithms. It also eliminates the problem of cascading rollbacks and echoing [15], resulting in faster simulation. We use aggressive cancellation <ref> [7] </ref>. Our protocol is an adaptation of a similar protocol for the problem of distributed recovery [4, 21]. <p> Hence, each LP rolls back at most once in response to a straggler, and the problem of multiple rollbacks is avoided. Several schemes have been proposed to minimize the spread of erroneous computations. A survey of these schemes can be found in <ref> [7] </ref>. The Filter protocol by Prakash and Subramanian [17] is most closely related to our work. It maintain a list of assumptions with each message, which describe the class of straggler events that could cause this message to be canceled. <p> References are omitted for those terms that are widely used. The equivalence is exact in many cases, but only approximate in other cases. Stragglers trigger rollbacks in distributed simulation, while failures trigger rollbacks in distributed recovery. Conservative simulation <ref> [7] </ref> ensures that the current state will never need to roll back. Similarly, pessimistic logging [6] ensures that the current state is always recoverable after a failure. In other words, although a rollback does occur, the rolled back states can always be reconstructed. <p> In distributed recovery, the paper by Lowry et al. [14] describes an idea similar to the conservative time windows in the simulation literature <ref> [7] </ref>. Now we list some of the main differences between the two areas. While the arrival of a straggler can be prevented, the occurrence of a failure cannot. But pessimistic logging can cancel the effect of a failure through message logging and replaying.
Reference: [8] <author> J. Fleischmann and P. A. Wilsey. </author> <title> Comparative Analysis of Periodic State Saving Techniques in Time Warp Simulators. </title> <booktitle> Proc. 9th Workshop on Parall. and Dist. Simulation., </booktitle> <pages> 50-58, </pages> <year> 1995. </year>
Reference-contexts: Due to these differences, some of the protocols presented in one area may not be applicable to the other area. Distributed recovery can potentially benefit from the advances in distributed simulation in the areas of memory management [13], analytical modeling to determine checkpoint frequency <ref> [8] </ref>, checkpointing mechanisms [22], and time constrained systems [9]. Similarly, research work on coordinated checkpointing, optimal checkpoint garbage collection, and dependency tracking [6] can potentially be applied to distributed simulation.
Reference: [9] <author> K. Ghosh, R. M. Fujimoto, and K. Schwan. </author> <title> Time Warp Simulation in Time Constrained Systems. </title> <booktitle> Proc. 7th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 163-166, </pages> <year> 1993. </year>
Reference-contexts: Distributed recovery can potentially benefit from the advances in distributed simulation in the areas of memory management [13], analytical modeling to determine checkpoint frequency [8], checkpointing mechanisms [22], and time constrained systems <ref> [9] </ref>. Similarly, research work on coordinated checkpointing, optimal checkpoint garbage collection, and dependency tracking [6] can potentially be applied to distributed simulation.
Reference: [10] <author> D. R. Jefferson. </author> <title> Virtual Time. </title> <journal> ACM Trans. Prog. Lang. and Sys., </journal> <volume> 7(3), </volume> <pages> 404-425, </pages> <year> 1985. </year>
Reference-contexts: Similarly, pessimistic logging [6] ensures that the current state is always recoverable after a failure. In other words, although a rollback does occur, the rolled back states can always be reconstructed. The time warp optimistic approach <ref> [10] </ref> inspired the seminal work on optimistic message logging [19]. The optimistic protocol presented in this paper is based on the optimistic recovery protocol presented in [4, 21]. <p> Both schemes confine the loss of computation, either due to a straggler or a failure, to the local process. Distributed Simulation Distributed Recovery Logical Process Recovery Unit [19] Virtual Time State Interval Index Sim. Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection <ref> [10] </ref> Garbage Collection [6] Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from
Reference: [11] <author> P. Jalote. </author> <title> Fault Tolerant Processes. </title> <journal> Distributed Computing, </journal> <volume> 3, </volume> <pages> 187-195, </pages> <year> 1989. </year>
Reference-contexts: In the simulation scheme by Dickens and Reynolds [5], any results of an optimistically processed event are not sent to other processes until they become definite [3]. In the recovery scheme by Jalote <ref> [11] </ref>, any messages originating from an unstable state interval are not sent to other processes until the interval becomes stable [6]. Both schemes confine the loss of computation, either due to a straggler or a failure, to the local process.
Reference: [12] <author> L. Lamport. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, no. 7, </volume> <pages> 558-565, </pages> <year> 1978. </year>
Reference-contexts: the number associated with the LP to which s belongs, that is, s:p = i ) s 2 P i ; m refers to a message and e refers to an event. 3.1 Happen Before Relation Lamport defined the happen before (!) relation between events in a rollback-free distributed computation <ref> [12] </ref>. To take rollbacks into account, we extend this relation. As in [4, 21], we define it for the states.
Reference: [13] <author> Y. B. Lin. </author> <title> Memory Management Algorithms for Optimistic Parallel Simulation. </title> <booktitle> Proc. 6th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 43-52, </pages> <year> 1992. </year>
Reference-contexts: Due to these differences, some of the protocols presented in one area may not be applicable to the other area. Distributed recovery can potentially benefit from the advances in distributed simulation in the areas of memory management <ref> [13] </ref>, analytical modeling to determine checkpoint frequency [8], checkpointing mechanisms [22], and time constrained systems [9]. Similarly, research work on coordinated checkpointing, optimal checkpoint garbage collection, and dependency tracking [6] can potentially be applied to distributed simulation.
Reference: [14] <author> A. Lowry, J. R. Russel and A. P. Goldberg. </author> <title> Optimistic Failure Recovery for Very Large Networks. </title> <booktitle> Proc. Proc. 10th IEEE Symp. on Reliable Distributed Systems, </booktitle> <pages> 66-75, </pages> <year> 1991. </year>
Reference-contexts: Similarly one can devise a scheme where inter-cluster and intra-cluster executions are both optimistic but employ different simulation vectors. This can be further generalized to a hierarchy of clusters and simulation vectors. In general, however, inter-cluster simulation vectors introduce false dependencies <ref> [14] </ref> which may result in unnecessary rollbacks. So there is a trade-off between the size of simulation vectors and unnecessary rollbacks. <p> In distributed recovery, the paper by Lowry et al. <ref> [14] </ref> describes an idea similar to the conservative time windows in the simulation literature [7]. Now we list some of the main differences between the two areas. While the arrival of a straggler can be prevented, the occurrence of a failure cannot.
Reference: [15] <author> B. D. Lubachevsky, A. Schwartz, and A. Weiss. </author> <title> Rollback Sometimes Works ... if Filtered. </title> <booktitle> Proc. 1989 Winter Simulation Conference, </booktitle> <pages> 630-639, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction We modify the time warp algorithm to quickly stop the spread of erroneous computation. Our scheme does not require output queues and anti-messages. This results in less memory overhead and simple memory management algorithms. It also eliminates the problem of cascading rollbacks and echoing <ref> [15] </ref>, resulting in faster simulation. We use aggressive cancellation [7]. Our protocol is an adaptation of a similar protocol for the problem of distributed recovery [4, 21]. <p> Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection [6] Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback <ref> [15] </ref> Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and <p> Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection [6] Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback <ref> [15] </ref> Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in [1, 18] by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions.
Reference: [16] <author> F. Mattern. </author> <title> Virtual Time and Global States of Distributed Systems. Parallel and Distributed Algorithms: </title> <booktitle> Proc. of the Intl. Workshop on Parallel and Distributed Algorithms, </booktitle> <publisher> Elsevier Science Publishers B. V.(North Holland), </publisher> <pages> 215-226, </pages> <year> 1989. </year>
Reference-contexts: So if u receives a token from s, u does not become transitively dependent on s due to this token. 3.2 Simulation Vector A vector clock is a vector of size n where n is the number of processes in the system <ref> [16] </ref>. Each vector entry is a timestamp that usually counts the number of send and receive events of a process. In the context of distributed simulation, we modify and extend the notion of vector clock, and define a Simulation Vector (SV) as follows.
Reference: [17] <author> A. Prakash and R. Subramanian. </author> <title> An Efficient Optimistic Distributed Simulation Scheme Based on Conditional Knowledge. </title> <booktitle> Proc. 6th Workshop on Parallel and Dist. Simulation, </booktitle> <pages> 85-94, </pages> <year> 1992. </year>
Reference-contexts: Several schemes have been proposed to minimize the spread of erroneous computations. A survey of these schemes can be found in [7]. The Filter protocol by Prakash and Subramanian <ref> [17] </ref> is most closely related to our work. It maintain a list of assumptions with each message, which describe the class of straggler events that could cause this message to be canceled. It maintains one assumption per channel, whereas our protocol can be viewed as maintaining one assumption per LP.
Reference: [18] <author> H. Rajaei, R. Ayani, and L. E. Thorelli. </author> <title> The Local Time Warp Approach to Parallel Simulation. </title> <booktitle> Proc. 7th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 119-126, </pages> <year> 1993. </year>
Reference-contexts: In this sense optimistic protocols are N - optimistic and pessimistic protocols are 0-optimistic. Another approach to reducing the size of simulation vectors is to divide the LPs into clusters. Several designs are possible. If the interaction inside a cluster is optimistic while inter-cluster messages are sent conservatively <ref> [18] </ref>, independent SV's can be used inside each cluster, involving only the LPs in the cluster. If intra-cluster execution is sequential while inter-cluster execution is optimistic [1], SV's can be used for inter-cluster messages with one entry per cluster. <p> Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3] Stable State [6] Table 1: Parallel terms from Distributed Simula tion and Recovery Conservative and optimistic simulations are combined in <ref> [1, 18] </ref> by dividing LPs into clusters and having different schemes for inter-cluster and intra-cluster executions. In distributed recovery, the paper by Lowry et al. [14] describes an idea similar to the conservative time windows in the simulation literature [7].
Reference: [19] <author> R. E. Strom and S. Yemini. </author> <title> Optimistic Recovery in Distributed Systems. </title> <journal> ACM Trans. on Computer Systems, </journal> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: In the context of distributed simulation, we modify and extend the notion of vector clock, and define a Simulation Vector (SV) as follows. To maintain dependency in the presence of rollbacks, we extend each entry to contain both a timestamp and an incarnation number <ref> [19] </ref>. The timestamp in the i th entry of the SV of P i corresponds to the virtual time of P i . The times-tamp in the j th entry corresponds to the virtual time of the latest state of P j on which P i depends. <p> This ensures that the pre-failure state is recreated and no other process needs to be rolled back. But the synchronization between message logging and message processing reduces the speed of computation. In optimistic logging <ref> [19] </ref>, messages are stored in a volatile memory buffer and logged asynchronously to the stable storage. Since the content of volatile memory is lost upon a failure, some of the messages are no longer available for replay after the failure. <p> Similarly, pessimistic logging [6] ensures that the current state is always recoverable after a failure. In other words, although a rollback does occur, the rolled back states can always be reconstructed. The time warp optimistic approach [10] inspired the seminal work on optimistic message logging <ref> [19] </ref>. The optimistic protocol presented in this paper is based on the optimistic recovery protocol presented in [4, 21]. In the simulation scheme by Dickens and Reynolds [5], any results of an optimistically processed event are not sent to other processes until they become definite [3]. <p> Both schemes confine the loss of computation, either due to a straggler or a failure, to the local process. Distributed Simulation Distributed Recovery Logical Process Recovery Unit <ref> [19] </ref> Virtual Time State Interval Index Sim. Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection [6] Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] <p> Both schemes confine the loss of computation, either due to a straggler or a failure, to the local process. Distributed Simulation Distributed Recovery Logical Process Recovery Unit <ref> [19] </ref> Virtual Time State Interval Index Sim. Vector (this paper) Trans. Dep. Vector [19] Straggler Failure Anti-Message Rollback Announcement Fossil Collection [10] Garbage Collection [6] Global Virtual Time [2] Global Recovery Line [6] Conservative Schemes Pessimistic Schemes Optimistic Schemes Optimistic Schemes Causality Error Orphan Detection Cascading Rollback [15] Domino Effect [6] Echoing [15] Livelock [6] Conditional Event [3] Unstable State [6] Definite Event [3]
Reference: [20] <author> A. I. Tomlinson and V. K. Garg. </author> <title> An Algorithm for Minimally Latent Global Virtual Time. </title> <booktitle> Proc. 7th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 35-42, </pages> <year> 1993. </year>
Reference-contexts: It is the minimum of the virtual times of all LPs and all the messages in transit at the given instant. Several algorithms have been developed for computing GVT <ref> [2, 20] </ref>. To reduce the size of simulation vectors, any entry that has a timestamp less than the GVT can be set to NULL, and NULL entries need not be transmitted with the message.
Reference: [21] <author> Y. M. Wang, O. P. Damani, and V. K. Garg. </author> <title> Distributed Recovery with K-Optimistic Logging. </title> <booktitle> To appear in Proc. the 17th IEEE Intl. Conf. Distributed Computing Systems, </booktitle> <year> 1997. </year>
Reference-contexts: This results in less memory overhead and simple memory management algorithms. It also eliminates the problem of cascading rollbacks and echoing [15], resulting in faster simulation. We use aggressive cancellation [7]. Our protocol is an adaptation of a similar protocol for the problem of distributed recovery <ref> [4, 21] </ref>. We fl supported in part by the NSF Grants CCR-9520540 and ECS-9414780, a TRW faculty assistantship award, a General Motors Fellowship, and an IBM grant. illustrate the main concept behind this scheme with the help of Figure 1. <p> To take rollbacks into account, we extend this relation. As in <ref> [4, 21] </ref>, we define it for the states. <p> Since most of the SV entries are initialized to -1 (see Figure 3) which must be less than the GVT, this optimization allows a simulation to start with very small vectors, and is particularly effective if there is high locality in message activities. Following <ref> [21] </ref>, we can also use a K-optimistic protocol. In this scheme, an LP is allowed to act on a message only if that will not result in more than K non-NULL entries in its SV. Otherwise it blocks. <p> In other words, although a rollback does occur, the rolled back states can always be reconstructed. The time warp optimistic approach [10] inspired the seminal work on optimistic message logging [19]. The optimistic protocol presented in this paper is based on the optimistic recovery protocol presented in <ref> [4, 21] </ref>. In the simulation scheme by Dickens and Reynolds [5], any results of an optimistically processed event are not sent to other processes until they become definite [3].
Reference: [22] <author> D. West and K. Panesar. </author> <title> Automatic Incremental State Saving. </title> <booktitle> Proc. 10th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 78-85, </pages> <year> 1996. </year>
Reference-contexts: Due to these differences, some of the protocols presented in one area may not be applicable to the other area. Distributed recovery can potentially benefit from the advances in distributed simulation in the areas of memory management [13], analytical modeling to determine checkpoint frequency [8], checkpointing mechanisms <ref> [22] </ref>, and time constrained systems [9]. Similarly, research work on coordinated checkpointing, optimal checkpoint garbage collection, and dependency tracking [6] can potentially be applied to distributed simulation.
References-found: 22

