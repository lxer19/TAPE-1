URL: ftp://ftp.cs.utexas.edu/pub/boyer/ics-reports/cmp54.ps.Z
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/ics-reports/index.html
Root-URL: http://www.cs.utexas.edu
Phone: (512) 471-1901  
Title: Toward Verified Execution Environments  
Author: William R. Bevier Warren A. Hunt, Jr. William D. Young 
Address: 2100 Main Building  Austin, Texas 78712  
Affiliation: Institute for Computing Science  The University of Texas at Austin  
Note: Also appears in Proceedings of the 1987 IEEE Symposium on Security and Privacy.  
Date: #54 February 1987  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: 1. <institution> Department of Defense, DoD 5200.28-STD, Trusted Computer Systems Evaluation Criteria, </institution> <month> December, </month> <year> 1985. </year>
Reference-contexts: 1. Introduction The Department of Defense Trusted Computer Systems Evaluation Criteria <ref> [1] </ref> mandates formal design verification for systems certified at level A1 and code verification for systems above A1. However, even code verification leaves a considerable assurance gap between the specified system and the compiled code executing on a piece of hardware.
Reference: 2. <author> D.I. Good, R.L. Akers, L.M. Smith, </author> <title> ``Report on Gypsy 2.05'', </title> <type> Tech. report 48, </type> <institution> Institute for Computing Science, The University of Texas at Austin, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: This paper outlines an ambitious research program aimed at building the first vertically verified computing system. It consists of three components: a compiler, an operating system and a processor. The compiler translates Micro-Gypsy, a formally axiomatized subset of the language Gypsy <ref> [2] </ref>, onto an instruction set defined by the processor augmented with operating system services. The translation is proved to preserve the semantics of the language. The operating system, supporting multiple tasks and resource management, is verified to provide task isolation and interprocess communication. <p> An obvious step toward realizing this goal is the proof of the correctness of the compiler. If it happens that the compiler's source language is a "verifiable" high level language such as Gypsy <ref> [2] </ref>, the user will have the option of specifying and verifying his programs in the high level language before compiling. The result will be a fully verified system in which a very high degree of confidence can be invested.
Reference: 3. <author> D.I. Good, B.L. Divito, M.K. Smith, </author> <title> ``Using The Gypsy Methodology'', </title> <type> Tech. report, </type> <institution> Institute for Computing Science, University of Texas at Austin, </institution> <month> June </month> <year> 1984. </year>
Reference-contexts: A fully verified program is one which has been proved correct in a high-level verifiable language, such as Micro-Gypsy, and run on a computing system vertically verified down to the hardware level. A Micro-Gypsy application may be proved correct using existing verification tools <ref> [3] </ref>, compiled into executable FM8501 machine code with the verified Micro-Gypsy compiler, and run on the FM8501 by the verified operating system. We can invest a much higher degree of confidence in such a system than is now possible in conventionally designed systems. <p> Processing of the language and constructing proofs of programs is carried out within a mechanized verification environment (GVE) which includes a parser, verification condition generator, algebraic simplifier, interactive proof checker, database, and other tools <ref> [3] </ref>. The verified compiler takes as source language Micro-Gypsy, a subset of Gypsy 2.05. The specification components of Gypsy are available in their entirety for specifying Micro-Gypsy programs; only the executable fragment of the language is restricted.
Reference: 4. <author> Robert S. Boyer, J Strother Moore, </author> <title> A Computational Logic, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The FM8501 is implemented by a representation of a hardware gate graph. The composition of the correctness proofs of our three components is made possible by using a single formal logic. The Boyer-Moore logic <ref> [4, 5] </ref> is used for the specification of each interface and all proofs are constructed within this logic. The logic is a quantifier-free constructive first order logic with equality and rules for defining primitive recursive functions.
Reference: 5. <author> Robert S. Boyer and J Strother Moore, Metafunctions: </author> <title> Proving them Correct and Using them Efficiently as New Proof Procedures, </title> <publisher> Academic Press, Inc., </publisher> <year> 1981. </year>
Reference-contexts: The FM8501 is implemented by a representation of a hardware gate graph. The composition of the correctness proofs of our three components is made possible by using a single formal logic. The Boyer-Moore logic <ref> [4, 5] </ref> is used for the specification of each interface and all proofs are constructed within this logic. The logic is a quantifier-free constructive first order logic with equality and rules for defining primitive recursive functions.
Reference: 6. <author> Richard Cohen, </author> <title> ``Proving Gypsy Programs'', </title> <type> Tech. report, </type> <institution> Institute for Computing Science, University of Texas at Austin, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: To ensure that the semantics of Micro-Gypsy used in the compiler proof corresponds to the semantics assumed by the GVE, the executable subset was chosen to correspond to the reduced language used in defining the formal semantics of Gypsy <ref> [6] </ref>. The result is a simple language with seven statement types adequate for expressing most sequential Gypsy programs; concurrency is not handled. The seven statement types are: no-op, signal, prog2, begin-when-end, if-then-else, loop, and procedure call.
Reference: 7. <author> Warren A. Hunt, Jr., ``FM8501: </author> <title> A Verified Microprocessor'', </title> <type> Tech. report, </type> <institution> Institute for Computing Science, University of Texas at Austin, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: Other work desirable in the future is to verify an operating system with more flexible characteristics such as process creation and deletion, channel creation and deletion, and dynamic memory management. 5. The Hardware The lowest level component in our system is the formally specified and mechanically verified FM8501 microprocessor <ref> [7, 8] </ref>. The FM8501 demonstrates the use of formal logic as a representation format for combinational and sequential digital logic. Mathematical operations are defined using the Boyer-Moore logic; these operations are then shown equivalent to some graph of hardware gates.
Reference: 8. <author> Warren A. Hunt, Jr., </author> <title> ``The Mechanical Verification of a Microprocessor Design'', </title> <booktitle> Proc. of the IFIP Intl. Working Conference: From HDL Descriptions to Guaranteed Correct Circuit Design, </booktitle> <address> Grenoble, France, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: Other work desirable in the future is to verify an operating system with more flexible characteristics such as process creation and deletion, channel creation and deletion, and dynamic memory management. 5. The Hardware The lowest level component in our system is the formally specified and mechanically verified FM8501 microprocessor <ref> [7, 8] </ref>. The FM8501 demonstrates the use of formal logic as a representation format for combinational and sequential digital logic. Mathematical operations are defined using the Boyer-Moore logic; these operations are then shown equivalent to some graph of hardware gates.
Reference: 9. <author> Shlomo Waser and Michael J. Flynn, </author> <title> Introduction to Arithmetic for Digital Systems Designers, </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1982. </year> <title> Table of Contents </title>
Reference-contexts: To model time-sequenced computing devices a register-transfer style language is used <ref> [9] </ref>. Register-transfer languages describe digital hardware as combinational logic separated by clocked registers. Combinational logic is described by recursively defined functions that map bit-vector inputs to a bit-vector output. We often define such hardware functions to work on arbitrarily sized data.
Reference: 1. <institution> Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: 1. Introduction The Department of Defense Trusted Computer Systems Evaluation Criteria <ref> [1] </ref> mandates formal design verification for systems certified at level A1 and code verification for systems above A1. However, even code verification leaves a considerable assurance gap between the specified system and the compiled code executing on a piece of hardware.
Reference: 2. <institution> Vertically Verified Computing Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: This paper outlines an ambitious research program aimed at building the first vertically verified computing system. It consists of three components: a compiler, an operating system and a processor. The compiler translates Micro-Gypsy, a formally axiomatized subset of the language Gypsy <ref> [2] </ref>, onto an instruction set defined by the processor augmented with operating system services. The translation is proved to preserve the semantics of the language. The operating system, supporting multiple tasks and resource management, is verified to provide task isolation and interprocess communication. <p> An obvious step toward realizing this goal is the proof of the correctness of the compiler. If it happens that the compiler's source language is a "verifiable" high level language such as Gypsy <ref> [2] </ref>, the user will have the option of specifying and verifying his programs in the high level language before compiling. The result will be a fully verified system in which a very high degree of confidence can be invested.



Reference: 6. <institution> Achieving A Vertically Verified System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 </institution>
Reference-contexts: To ensure that the semantics of Micro-Gypsy used in the compiler proof corresponds to the semantics assumed by the GVE, the executable subset was chosen to correspond to the reduced language used in defining the formal semantics of Gypsy <ref> [6] </ref>. The result is a simple language with seven statement types adequate for expressing most sequential Gypsy programs; concurrency is not handled. The seven statement types are: no-op, signal, prog2, begin-when-end, if-then-else, loop, and procedure call.
Reference: 7. <institution> Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 i </institution>
Reference-contexts: Other work desirable in the future is to verify an operating system with more flexible characteristics such as process creation and deletion, channel creation and deletion, and dynamic memory management. 5. The Hardware The lowest level component in our system is the formally specified and mechanically verified FM8501 microprocessor <ref> [7, 8] </ref>. The FM8501 demonstrates the use of formal logic as a representation format for combinational and sequential digital logic. Mathematical operations are defined using the Boyer-Moore logic; these operations are then shown equivalent to some graph of hardware gates.
References-found: 13

