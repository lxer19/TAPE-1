URL: http://www.cs.tamu.edu/faculty/rwerger/pubs/lcr98.ps.gz
Refering-URL: http://www.cs.tamu.edu/faculty/rwerger/pubs/
Root-URL: http://www.cs.tamu.edu
Email: frwerger,farzu,kouchig@cs.tamu.edu  
Title: Standard Templates Adaptive Parallel Library  
Author: (STAPL) Lawrence Rauchwerger, Francisco Arzu, and Koji Ouchi 
Web: http://www.cs.tamu.edu/faculty/rwerger  
Address: College Station, TX 77843-3112  
Affiliation: Dept. of Computer Science Texas A&M University  
Abstract: STAPL (Standard Adaptive Parallel Library) is a parallel C++ library designed as a superset of the STL, sequentially consistent for functions with the same name, and executes on uni- or multiprocessors. STAPL is implemented using simple parallel extensions of C++ which provide a SPMD model of parallelism supporting recursive parallelism. The library is intended to be of generic use but emphasizes irregular, non-numeric programs to allow the exploitation of parallelism in areas such as geometric modeling or graph algorithms which use dynamic linked data structures. Each library routine has several different algorithmic options, and the choice among them will be made adaptively based on a performance model, statistical feedback, and current run-time conditions. Built-in performance monitors can measure actual performance and, using an extension of the BSP model predict the relative performance of the algorithmic choices for each library routine. STAPL is intended to possibly replace STL in a user transparent manner and run on small to medium scale shared memory multiprocessors which support OpenMP.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> N. M. Amato, A. Pietracaprina, G. Pucci, L. K. Dale and J. Perdue, </author> <title> "A Cost Model for Communication on a Symmetric Multiprocessor", </title> <type> TR 98004, </type> <institution> Dept. of Computer Science, Texas A&M University, </institution> <month> January, </month> <year> 1998. </year>
Reference-contexts: In STAPL, each library routine will have several different algorithmic options, and the choice among them will be made adaptively based on a performance model, statistical feedback, and current run-time conditions. Built-in performance monitors will measure actual performance and, using a an extension of the BSP model <ref> [1] </ref> that incorporates system specific information, STAPL will predict the relative performance of the algorithmic choices for each library routine and thus become an adaptive library. 2 STAPL General Specifications STAPL will be a parallel C++ library with functionality similar to STL. <p> Also, the algorithm's impact on system resources (e.g., memory traffic and workload) should be considered. The performance model, a modified BSP model <ref> [1] </ref> is currently being developed and experimentally validated by our collaborators. <p> Optional arguments will allow programmers to use a priori knowledge of the input to specify which method to employ. If the choice of algorithm is left to STAPL, then a newly developed performance model <ref> [1] </ref> will be used to determine the best algorithm (possibly sequential) for the given system and data size. Also, the library will be able to sample the input data and to help choose the most appropriate method.
Reference: 2. <author> G.E. Blelloch, "NESL: </author> <title> A nested data-parallel language," </title> <type> Technical Report CMU-CS-92-103, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Similarly, libraries of elementary, generic, parallel algorithms would provide important building blocks for parallel applications or specialized libraries <ref> [2, 3, 6] </ref>. Due to the added complexity of programming parallel machines, we believe that the potential impact of libraries on the future of parallel computing will be more profound than for sequential computing. <p> These characteristics will have the added benefit of introducing programmers to parallelism in a rather smooth and painless manner. STAPL will be implemented using simple parallel extensions of C++ which provide a SPMD model of parallelism and will support recursive (nested) parallelism (as in NESL <ref> [2] </ref>).
Reference: 3. <author> G.E. Blelloch, </author> <title> Vector Models for Data-Parallel Computing, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Similarly, libraries of elementary, generic, parallel algorithms would provide important building blocks for parallel applications or specialized libraries <ref> [2, 3, 6] </ref>. Due to the added complexity of programming parallel machines, we believe that the potential impact of libraries on the future of parallel computing will be more profound than for sequential computing.
Reference: 4. <author> E. Johnson and D. Gannon, </author> <title> HPC++: Experiments with the Parallel Standard Library, </title> <booktitle> In Proc. of the 1997 Int. Conf. on Supercomputing, </booktitle> <year> 1997, </year> <pages> pp. 124-131. </pages>
Reference-contexts: The goal of this research is not to substitute but to complement other current efforts to parallelize C++ with static, compile-time methods. The other parallel STL implementations known to us (e.g., <ref> [4] </ref>) target scientific applications which employ array data structures (which support random access). STAPL tries to explore linked dynamic structures (for which random access iterators do not exist) and their application in non-numeric applications.
Reference: 5. <author> D. Musser and A. Saini, </author> <title> STL Tutorial and Reference Guide, </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: It is for this reason that we have chosen to develop a parallel template library (STAPL) that offers full compatibility with the recently ANSI adopted Standard Template Library (STL) <ref> [5] </ref>. In a departure from previous approaches to libraries which have almost exclusively targeted scientific, numerical applications, STAPL will emphasize irregular, non-numeric programs.
Reference: 6. <author> R. Sedgewick, </author> <title> Algorithms in C++, </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Similarly, libraries of elementary, generic, parallel algorithms would provide important building blocks for parallel applications or specialized libraries <ref> [2, 3, 6] </ref>. Due to the added complexity of programming parallel machines, we believe that the potential impact of libraries on the future of parallel computing will be more profound than for sequential computing.
References-found: 6

