URL: ftp://theory.lcs.mit.edu/pub/tcryptol/96-12.ps
Refering-URL: http://theory.lcs.mit.edu/~tcryptol/1996/96-12.html
Root-URL: 
Email: 87185-1110,yair@cs.sandia.gov  87185-1110,psgemme@cs.sandia.gov  87185-1110,philmac@cs.sandia.gov.  moti@watson.ibm.com, moti@cs.columbia.edu  
Title: Proactive RSA (Dynamic) Robustness: A gateway G can combine information from any set of lt
Author: Yair Frankel Peter Gemmell Philip D. MacKenzie Moti Yung 
Address: P.O Box 5800, Albuquerque, NM  P.O Box 5800, Albuquerque, NM  P.O Box 5800, Albuquerque, NM  Yorktown Heights, NY,  
Affiliation: Sandia National Labs,  Sandia National Labs,  Sandia National Labs,  IBM T. J. Watson Research Center,  
Note: Proactive  Uniform Boundedness: The share-size is  A major technical difficulty in "proactivizing" RSA was the fact that the servers have to update  
Date: August 4, 1996  
Abstract: The notion of "proactive security" of basic primitives and cryptosystems that are distributed amongst various servers, was introduced in order to tolerate a very strong "mobile adversary." This adversary may corrupt all participants throughout the lifetime of the system in a non-monotonic fashion (i.e. recoveries are possible) but the adversary is unable to corrupt too many participants during any short time period [OstrovskyYung]. The notion assures increased security and availability of the cryptographic primitive. We present a proactive RSA system in which a threshold of servers applies the RSA signature (or decryption) function in a distributed manner; RSA is perhaps the most important trapdoor function in use. Employing new combinatorial and elementary number theoretic techniques, our protocol enables the dynamic updating of the servers (which hold the RSA key distributively); it is secure even when a linear number of the servers are corrupted during any time period (linear redundancy); it efficiently "self-maintains" the security of the function and its messages (ciphertexts or signatures); and it enables continuous availability, namely, correct function application using the shared key is possible at any time. We present an efficient way in which l servers can share an RSA private function so that, given 0 &lt; &lt; t &lt; 1: * Proactive Security (against mobile adversary): Our protocol is secure against a polynomial time adversary who controls the gateway G and time-variant sets of up to minfl(1 t ); lg servers, and can obtain the shares of up to l servers (including those that it corrupts). We also present special practical instances based on designs; some of these instances were recently implemented as part of a highly secure application testbed at Sandia National Laboratories. 
Abstract-found: 1
Intro-found: 1
Reference: [AGY95] <author> N. Alon, Z. Galil and M. Yung, </author> <title> Dynamic-resharing Verifiable Secret Sharing, </title> <type> ESA 95. </type>
Reference-contexts: This construction was originally designed for a specific verifiable secret sharing scheme which is based on the quadratic residue problem modulo Blum integers <ref> [AGY95] </ref>. (We extend the construction in [AGY95], by observing that their results will hold for more general sets of good and bad servers.) We use a simulatability argument (similar to one that was put forth in the static distribution of RSA [DDFY92]) to show that the distribution of shares is secure. <p> This construction was originally designed for a specific verifiable secret sharing scheme which is based on the quadratic residue problem modulo Blum integers <ref> [AGY95] </ref>. (We extend the construction in [AGY95], by observing that their results will hold for more general sets of good and bad servers.) We use a simulatability argument (similar to one that was put forth in the static distribution of RSA [DDFY92]) to show that the distribution of shares is secure. <p> In practice, for a small (constant) numbers of servers, we can replace the probabilistic assignment of shares to servers in <ref> [AGY95] </ref> by a specifically designed assignment. This case was suggested and investigated first in [JJKY95] (where a solution with logarithmically growing shares was given). In Appendix E, we discuss these practical assignments. <p> The assignment (initially given in <ref> [AGY95] </ref>) into subsets can be chosen at random by the dealer (or by the servers efficiently). <p> We can assume that all the signed messages originate at the correct server; otherwise, the assumption about the security of the underlying signature scheme is violated. 3.2 Initialization Protocol 3.2.1 Family and Committee Assignments We first distribute shares in multiple r-out-of-r secret sharing protocols. This technique is essentially from <ref> [AGY95] </ref>. The assignment of families and committees can be done by the dealer (but can also be 5 done by the servers). <p> The lemma is similar to Proposition 3 in <ref> [AGY95] </ref>. We can control the probability of obtaining a non-(; t )-terrific assignment to be smaller than that of breaking the RSA function given the security parameter. Note that once we have terrific assignment, any choice of "bad servers" is allowed- which is important in the mobile adversary case. <p> However, it can be shown that this type of approach is insecure. In <ref> [AGY95] </ref>, each committee is required to share its share in the same fashion as the original secret, so its share can be recovered if it is lost.
Reference: [B79] <author> G.R. Blakley, </author> <title> Safeguarding Cryptographic Keys, AFIPS Con. </title> <booktitle> Proc (v. </booktitle> <volume> 48), </volume> <year> 1979, </year> <pages> pp 313-317. </pages>
Reference-contexts: The intent of the system is reflected in two properties: Function sharing: When k uncorrupted servers are active, the shared function f x can be reconstructed to compute f x (ff) (availability), yet nothing about f x is revealed other than f x (ff) (security). (Extends secret sharing <ref> [B79, S79] </ref> to functions which can be applied many times.). Mobile adversary property: We assume that our adversary is computationally bounded and therefore can not break any of the underlying cryptographic primitives used.
Reference: [Bl88] <author> M. Blum, </author> <title> Designing programs to check their work, </title> <type> ICSI technical report TR-88-009. </type>
Reference-contexts: We then employ the idea of witness-based cryptographic program checking [FGY96] which extends Blum's methodology of program result checking <ref> [Bl88] </ref> to a system where the checker itself is not trusted by the program. We then develop specific techniques that use the RSA properties (being exponentiation cipher, and having certain algebraic structure) that complete the design.
Reference: [B88] <author> C. Boyd, </author> <title> Digital Multisignatures, Cryptography and Coding, </title> <publisher> Claredon Press, </publisher> <pages> 241-246, </pages> <editor> (Eds. H. Baker and F. </editor> <publisher> Piper). </publisher>
Reference: [CH94] <author> R. Cannetti and A. Herzberg, </author> <title> Maintaining Security in the presence of transient faults, </title> <editor> In Y. Desmedt, editor, </editor> <booktitle> Advances in Cryptology, Proc. of Crypto '94 (Lecture Notes in Computer Science 839), </booktitle> <pages> pages 425-438. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A number of very useful cryptographic mechanisms have been efficiently "proactivized", such as pseudorandomness and secret sharing <ref> [CH94, HJKY95] </ref>. More recently, [HJJKY96] developed proactive public-key schemes for keys with publicly known key-domain (essentially, those based on the Discrete Logarithm problem over groups of known order). <p> Mobile Adversary) shared RSA Ostrovsky-Yung [OY91] mobile adv. "proactive protocol" introduced CannettiHerzberg <ref> [CH94] </ref> proactive pseudorandomness [HJKY95] proactive secret sharing [HJJKY96] proactive (Disc.
Reference: [CF85] <author> J. (Benaloh) Cohen and M. Fischer, </author> <title> A robust and verifiable cryptographically secure election scheme, </title> <booktitle> Proc. 26th Annual Symposium on the Foundations of Computer Science, </booktitle> <year> 1985, </year> <pages> pp. 372-382. </pages>
Reference-contexts: In what follows we discuss informally some of the issues and assumptions in our model. The communication model: The communication model is similar to [HJKY95]. The l servers communicate via an authenticated bulletin board <ref> [CF85] </ref> in a synchronized manner. The board is accessible by a Gateway (efficient combining function which produces the correct final result) that can be assumed to be an insecure gateway. We assume that the adversary cannot jam communication.
Reference: [DDFY92] <author> A. De Santis, Y. Desmedt, Y. Frankel, and M. Yung, </author> <title> How to Share a Function Securely, </title> <note> ACM STOC 94. (Initial version May 92: FOCS 92 submission). </note>
Reference-contexts: We capitalize on the fact that these diverse techniques (combinatorial, algebraic, cryptographic, program-checking and protocol techniques) are combined and augmented in a new way to achieve an efficient cryptographic protocol. 1 Frankel [F89] (l; l)- (additive) shared RSA DesmedtFrankel [DF91] heuristic (t; l)-shared RSA scheme DeSantisDesmedtFrankelYung <ref> [DDFY92] </ref> provable (t; l)-shared RSA [FGY96, GJKR96] Efficiently Robust (i.e. verifiable) shared RSA Our result First "proactivized" (vs. Mobile Adversary) shared RSA Ostrovsky-Yung [OY91] mobile adv. "proactive protocol" introduced CannettiHerzberg [CH94] proactive pseudorandomness [HJKY95] proactive secret sharing [HJJKY96] proactive (Disc. <p> This construction allows for the verifiable distribution of shares of an RSA key by a key generator and also allows the re-randomization of these shares by the servers; it also simplifies the domain over which sharing is done (when compared with <ref> [DDFY92] </ref>). <p> based on the quadratic residue problem modulo Blum integers [AGY95]. (We extend the construction in [AGY95], by observing that their results will hold for more general sets of good and bad servers.) We use a simulatability argument (similar to one that was put forth in the static distribution of RSA <ref> [DDFY92] </ref>) to show that the distribution of shares is secure. We then employ the idea of witness-based cryptographic program checking [FGY96] which extends Blum's methodology of program result checking [Bl88] to a system where the checker itself is not trusted by the program. <p> The security of this function is formally defined in Definition A.1 Our system model is similar to that of the proactive secret sharing model of [HJKY95, HJJKY96] (motivated by the initial modeling in [OY91]), but modified to incorporate the function sharing model (for RSA) of <ref> [DDFY92] </ref> (motivated by the idea of threshold cryptography [DF89]). The system consists of l servers fs 1 ; : : : ; s l g and a function f x for some key x.
Reference: [DF89] <author> Y. Desmedt and Y. Frankel, </author> <title> Threshold cryptosystems, </title> <editor> In G. Brassard, editor, </editor> <booktitle> Advances in Cryptology, Proc. of Crypto '89 (Lecture Notes in Computer Science 435), </booktitle> <pages> pp. 307-315. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: this function is formally defined in Definition A.1 Our system model is similar to that of the proactive secret sharing model of [HJKY95, HJJKY96] (motivated by the initial modeling in [OY91]), but modified to incorporate the function sharing model (for RSA) of [DDFY92] (motivated by the idea of threshold cryptography <ref> [DF89] </ref>). The system consists of l servers fs 1 ; : : : ; s l g and a function f x for some key x. The system is synchronized and there are two types of time periods repeated in sequence: an update period and an operational period.
Reference: [DF91] <author> Y. Desmedt and Y. Frankel, </author> <title> Shared generation of authenticators and signatures, </title> <booktitle> Advances in Cryptology-Proc. of Crypto 91, </booktitle> <publisher> Springer-Verlag LNCS 576, </publisher> <year> 1992, </year> <pages> pp. 307-315. </pages>
Reference-contexts: We capitalize on the fact that these diverse techniques (combinatorial, algebraic, cryptographic, program-checking and protocol techniques) are combined and augmented in a new way to achieve an efficient cryptographic protocol. 1 Frankel [F89] (l; l)- (additive) shared RSA DesmedtFrankel <ref> [DF91] </ref> heuristic (t; l)-shared RSA scheme DeSantisDesmedtFrankelYung [DDFY92] provable (t; l)-shared RSA [FGY96, GJKR96] Efficiently Robust (i.e. verifiable) shared RSA Our result First "proactivized" (vs. Mobile Adversary) shared RSA Ostrovsky-Yung [OY91] mobile adv. "proactive protocol" introduced CannettiHerzberg [CH94] proactive pseudorandomness [HJKY95] proactive secret sharing [HJJKY96] proactive (Disc.
Reference: [F87] <author> P. Feldman, </author> <title> A Practical Scheme for Non-Interactive Verifiable Secret Sharing, </title> <booktitle> Proc. of the 28th IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pp. 427-437, </pages> <year> 1987 </year>
Reference-contexts: the dealer acts incorrectly. (We cannot, however, guarantee the security of the system, since the dealer could simply send the value d to the adversary.) The correctness of the shares is verified (with respect to the function witness g d ) using, e.g., a procedure similar to one in Feldman <ref> [F87] </ref>. Let us review the dealer's protocol. 1. The dealer generates p, q, e, d, as in RSA. Thus N = pq and ed 1 mod (N ). 2.
Reference: [F89] <author> Y. Frankel, </author> <title> A practical protocol for large group oriented networks, </title> <editor> In J. J. Quisquater and J. Vandewalle, editor, </editor> <booktitle> Advances in Cryptology, Proc. of Eurocrypt '89, (Lecture Notes in Computer Science 773), Springer-Verlarg, </booktitle> <pages> pp. 56-61. </pages>
Reference-contexts: We capitalize on the fact that these diverse techniques (combinatorial, algebraic, cryptographic, program-checking and protocol techniques) are combined and augmented in a new way to achieve an efficient cryptographic protocol. 1 Frankel <ref> [F89] </ref> (l; l)- (additive) shared RSA DesmedtFrankel [DF91] heuristic (t; l)-shared RSA scheme DeSantisDesmedtFrankelYung [DDFY92] provable (t; l)-shared RSA [FGY96, GJKR96] Efficiently Robust (i.e. verifiable) shared RSA Our result First "proactivized" (vs. <p> As in <ref> [F89] </ref>, we use an r-out-of-r scheme but employ a reduction to a method that allows a linear fraction of faults at any time. During the initialization phase (Section 3.2) a trusted dealer computes a private RSA key d and public key (e; N ) [RSA78]. <p> function sharing on an input message M , a gateway G obtains from the servers possessing a t i;j the value M a t i;j , and hence G can compute f d;N (M ) M d j=1 M i;j mod N during the signing phase (Section 3.3) as in <ref> [F89] </ref>. The shares will be unchanged during intervals of time that we call operational periods, and between these operation periods there will be update periods (Section 3.4) where (a) the good shares are renewed and (b) corrupted shares are recovered.
Reference: [FGY96] <author> Yair Frankel, Peter Gemmell, Moti Yung, </author> <title> Witness-based Cryptographic Program Checking and Robust Function Sharing Proc. </title> <booktitle> of Symposium on the Theory of Computation, </booktitle> <year> 1996, </year> <pages> pp. 499-508. </pages>
Reference-contexts: capitalize on the fact that these diverse techniques (combinatorial, algebraic, cryptographic, program-checking and protocol techniques) are combined and augmented in a new way to achieve an efficient cryptographic protocol. 1 Frankel [F89] (l; l)- (additive) shared RSA DesmedtFrankel [DF91] heuristic (t; l)-shared RSA scheme DeSantisDesmedtFrankelYung [DDFY92] provable (t; l)-shared RSA <ref> [FGY96, GJKR96] </ref> Efficiently Robust (i.e. verifiable) shared RSA Our result First "proactivized" (vs. Mobile Adversary) shared RSA Ostrovsky-Yung [OY91] mobile adv. "proactive protocol" introduced CannettiHerzberg [CH94] proactive pseudorandomness [HJKY95] proactive secret sharing [HJJKY96] proactive (Disc. <p> We then employ the idea of witness-based cryptographic program checking <ref> [FGY96] </ref> which extends Blum's methodology of program result checking [Bl88] to a system where the checker itself is not trusted by the program. We then develop specific techniques that use the RSA properties (being exponentiation cipher, and having certain algebraic structure) that complete the design. <p> The basic technique to renew and recover shares is by creating shares of shares and distributing the share of shares appropriately. To provide for robustness throughout the protocol, we give a witness (similar to <ref> [FGY96] </ref>) to check intermediate function results that provide the proactivization of the protocol. For instance we must assure that everyone gets valid shares of d during update periods. Remark: In all of these protocols messages are put on authenticated bulletin board. <p> This witness is used later on to determine if servers have correct shares (witness-based checking <ref> [FGY96] </ref> is based on the fact that having some random function 6 values does not help in breaking the cryptographic function). <p> This protocol follows the one in <ref> [FGY96] </ref>. We use the fact that since d = P i;j then M d Q i;j mod N . We also need to verify correctness of the results using a witness. 1. The gateway broadcasts [SIGN.1; M ]. 2. <p> In practice, a trusted dealer will know the factorization of P 1 and Q 1 and then be able to generate such a g with overwhelming probability. 3 If the server is uncomfortable providing a 2t i;j in this message, <ref> [FGY96] </ref> could be used to prove knowledge of a 2t i;j from g a 2t i;j .
Reference: [FY93] <author> M.K. Franklin and M. Yung, </author> <title> Secure and Efficient Digital Coin, </title> <booktitle> ICALP 93. </booktitle>
Reference-contexts: The distinction of efficient (communication independent of computation/circuit complexity) vs. inefficient (computation embedded in communication) within the realm of cryptographic protocols (that are all polynomial-time) was put forth in <ref> [FY93] </ref>. The previous proactivization techniques do not seem to be sufficient to proactively maintain the security of an RSA public-key system [RSA78] (perhaps the most popular public key system today).
Reference: [GHY] <author> Z. Galil, S. Haber, and M. Yung, </author> <title> Minimum-Knowledge Interactive Proofs for Decision Problems, </title> <journal> SIAM Journal on Computing, </journal> <volume> vol. 18, n.4, </volume> <pages> pp. 711-739. </pages> <note> (Previous version in FOCS 85). </note>
Reference: [GJKR96] <author> R. Genaro, S. Jarecki, H. Krawczyk, and T. Rabin, </author> <title> Robust and Efficient Sharing of RSA, </title> <type> Crypto 96. </type>
Reference-contexts: capitalize on the fact that these diverse techniques (combinatorial, algebraic, cryptographic, program-checking and protocol techniques) are combined and augmented in a new way to achieve an efficient cryptographic protocol. 1 Frankel [F89] (l; l)- (additive) shared RSA DesmedtFrankel [DF91] heuristic (t; l)-shared RSA scheme DeSantisDesmedtFrankelYung [DDFY92] provable (t; l)-shared RSA <ref> [FGY96, GJKR96] </ref> Efficiently Robust (i.e. verifiable) shared RSA Our result First "proactivized" (vs. Mobile Adversary) shared RSA Ostrovsky-Yung [OY91] mobile adv. "proactive protocol" introduced CannettiHerzberg [CH94] proactive pseudorandomness [HJKY95] proactive secret sharing [HJJKY96] proactive (Disc.
Reference: [GM84] <author> S. Goldwasser and S. Micali, </author> <title> Probabilistic Encryption, </title> <journal> J. Comp. Sys. Sci. </journal> <volume> 28, </volume> <year> 1984, </year> <pages> pp. 270-299. </pages>
Reference: [HJKY95] <author> A. Herzberg, S. Jarecki, H. Krawczyk, and M. Yung, </author> <title> How to Cope with Perpetual Leakage, or: Proactive Secret Sharing, </title> <type> Crypto 95. </type>
Reference-contexts: A number of very useful cryptographic mechanisms have been efficiently "proactivized", such as pseudorandomness and secret sharing <ref> [CH94, HJKY95] </ref>. More recently, [HJJKY96] developed proactive public-key schemes for keys with publicly known key-domain (essentially, those based on the Discrete Logarithm problem over groups of known order). <p> Mobile Adversary) shared RSA Ostrovsky-Yung [OY91] mobile adv. "proactive protocol" introduced CannettiHerzberg [CH94] proactive pseudorandomness <ref> [HJKY95] </ref> proactive secret sharing [HJJKY96] proactive (Disc. <p> It can be performed by the owner of the private key d. The security of this function is formally defined in Definition A.1 Our system model is similar to that of the proactive secret sharing model of <ref> [HJKY95, HJJKY96] </ref> (motivated by the initial modeling in [OY91]), but modified to incorporate the function sharing model (for RSA) of [DDFY92] (motivated by the idea of threshold cryptography [DF89]). <p> In what follows we discuss informally some of the issues and assumptions in our model. The communication model: The communication model is similar to <ref> [HJKY95] </ref>. The l servers communicate via an authenticated bulletin board [CF85] in a synchronized manner. The board is accessible by a Gateway (efficient combining function which produces the correct final result) that can be assumed to be an insecure gateway. We assume that the adversary cannot jam communication. <p> F i 0 takes the shares of shares of some family (which it verifies to be valid) and creates its new shares by summing these shares of shares in each committee. This type of share recovery is unlike the share recovery protocols in previous proactive schemes. In <ref> [HJKY95] </ref>, the properties of secret-sharing polynomials are used to recover a lost share using other servers' shares. By "blinding" the secret-sharing polynomials with polynomials that evaluate to zero at the appropriate point, the lost share can be recovered while no information is revealed.
Reference: [HJJKY96] <author> A. Herzberg, M. Jakobsson, S. Jarecki, H. Krawczyk, and M. Yung, </author> <title> Proactive public key and signature systems, </title> <type> draft. 11 </type>
Reference-contexts: A number of very useful cryptographic mechanisms have been efficiently "proactivized", such as pseudorandomness and secret sharing [CH94, HJKY95]. More recently, <ref> [HJJKY96] </ref> developed proactive public-key schemes for keys with publicly known key-domain (essentially, those based on the Discrete Logarithm problem over groups of known order). <p> Mobile Adversary) shared RSA Ostrovsky-Yung [OY91] mobile adv. "proactive protocol" introduced CannettiHerzberg [CH94] proactive pseudorandomness [HJKY95] proactive secret sharing <ref> [HJJKY96] </ref> proactive (Disc. Log based) public key with publicly known key domain Our result proactivized RSA The primary techniques used in the result: We first employ a combinatorial reduction of r-out-of-r (verifiable) secret sharing (additive threshold scheme) to r-out-of-l (verifiable) secret sharing (r strictly less than l). <p> It can be performed by the owner of the private key d. The security of this function is formally defined in Definition A.1 Our system model is similar to that of the proactive secret sharing model of <ref> [HJKY95, HJJKY96] </ref> (motivated by the initial modeling in [OY91]), but modified to incorporate the function sharing model (for RSA) of [DDFY92] (motivated by the idea of threshold cryptography [DF89]).
Reference: [JJKY95] <author> M. Jakobsson, S. Jarecki, H. Krawczyk, and M. Yung, </author> <title> Proactive RSA distribution with constant shareholders, </title> <type> manuscript. </type>
Reference-contexts: In practice, for a small (constant) numbers of servers, we can replace the probabilistic assignment of shares to servers in [AGY95] by a specifically designed assignment. This case was suggested and investigated first in <ref> [JJKY95] </ref> (where a solution with logarithmically growing shares was given). In Appendix E, we discuss these practical assignments. We note that Sandia National Laboratories has implemented this proactive RSA implementation to demonstrate proof of concept of its practicality.
Reference: [L96] <author> M. Luby, </author> <title> Pseudorandomness and its Cryptographic Applications, </title> <publisher> Princeton University Press, </publisher> <year> 1996. </year>
Reference: [OY91] <author> R. Ostrovsky and M Yung, </author> <title> How to withstand mobile virus attacks, </title> <booktitle> Proc. of the 10th ACM Symposium on the Principles in Distributed Computing, </booktitle> <year> 1991, </year> <pages> pp. 51-61. </pages>
Reference-contexts: 1 Introduction In this work we deal with algorithmic mechanisms to secure the private memory of the RSA public key system via distribution and active communication. The notion of "proactive security" <ref> [OY91] </ref> assumes a very strong "mobile adversary" who may corrupt all participants (servers, each with private memory) throughout the lifetime of the system in a non-monotonic fashion (i.e. recoveries are possible) but the adversary is not able to corrupt too many participants during any short period of time. <p> Mobile Adversary) shared RSA Ostrovsky-Yung <ref> [OY91] </ref> mobile adv. "proactive protocol" introduced CannettiHerzberg [CH94] proactive pseudorandomness [HJKY95] proactive secret sharing [HJJKY96] proactive (Disc. <p> It can be performed by the owner of the private key d. The security of this function is formally defined in Definition A.1 Our system model is similar to that of the proactive secret sharing model of [HJKY95, HJJKY96] (motivated by the initial modeling in <ref> [OY91] </ref>), but modified to incorporate the function sharing model (for RSA) of [DDFY92] (motivated by the idea of threshold cryptography [DF89]). The system consists of l servers fs 1 ; : : : ; s l g and a function f x for some key x.
Reference: [RSA78] <author> R. Rivest, A. Shamir and L. Adleman, </author> <title> A Method for Obtaining Digital Signature and Public Key Cryptosys-tems, </title> <journal> Comm. of ACM, </journal> <volume> 21 (1978), </volume> <pages> pp. 120-126. </pages>
Reference-contexts: The previous proactivization techniques do not seem to be sufficient to proactively maintain the security of an RSA public-key system <ref> [RSA78] </ref> (perhaps the most popular public key system today). One of the problems with distributing power to perform a keyed RSA has been how to distribute the shares without revealing (N ) (knowledge of which implies breaking the key). <p> As in [F89], we use an r-out-of-r scheme but employ a reduction to a method that allows a linear fraction of faults at any time. During the initialization phase (Section 3.2) a trusted dealer computes a private RSA key d and public key (e; N ) <ref> [RSA78] </ref>. It duplicates the private key m times, and the ith duplicate is divided into r shares fa 0 i;j g j2f1;:::;rg such that for all i, d = P r i;j . <p> This implies the adversary knows a multiple of (N ), which further implies that it can factor and break the underlying RSA function <ref> [RSA78] </ref>. 2 Corollary 4.1 Assuming the system has not been broken (to be shown next), the size of shares is bounded by 2h + 2 log r. Proof: If the system has not been broken, then the underlying RSA function has not been broken.
Reference: [S79] <author> A. Shamir. </author> <title> How to share a secret, </title> <journal> Commun. ACM, </journal> <volume> 22 (1979), </volume> <pages> pp. 612-613. </pages>
Reference-contexts: The intent of the system is reflected in two properties: Function sharing: When k uncorrupted servers are active, the shared function f x can be reconstructed to compute f x (ff) (availability), yet nothing about f x is revealed other than f x (ff) (security). (Extends secret sharing <ref> [B79, S79] </ref> to functions which can be applied many times.). Mobile adversary property: We assume that our adversary is computationally bounded and therefore can not break any of the underlying cryptographic primitives used.
References-found: 23

