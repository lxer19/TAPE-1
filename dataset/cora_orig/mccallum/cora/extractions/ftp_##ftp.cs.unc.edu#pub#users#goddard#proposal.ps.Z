URL: ftp://ftp.cs.unc.edu/pub/users/goddard/proposal.ps.Z
Refering-URL: http://www.cs.unc.edu/~goddard/papers.html
Root-URL: http://www.cs.unc.edu
Email: goddard@cs.unc.edu  
Title: A Dissertation Proposal: Analyzing the Real-Time Properties of a Distributed Dataflow Execution Paradigm for Signal
Author: Steve Goddard 
Keyword: Data-flow, real-time systems, scheduling theory, embedded systems, software architecture.  
Note: March 7, 1997  
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: Real-time signal processing applications are commonly designed using a dataflow software architecture. In this dissertation we will attempt to understand fundamental real-time properties of such an architecture the Navy's PGM coarse-grain dataflow methodology [23]. By applying recent results in real-time scheduling theory to PGM, we hope to identify inherent real-time properties of nodes in a PGM dataflow graph, and demonstrate how these properties can be exploited to perform useful and important system-level analyses such as schedulability analysis, end-to-end latency analysis, and memory requirements analysis in single processor and distributed systems. More importantly, we plan to develop relationships between properties such as latency and buffer bounds and show how one may be traded-off for the other. We will also explore the impact a dataflow language has on the real-time properties of the resultant dataflow model and how different language features affect the analysis required. We plan to evaluate our results using existing signal processing applications developed using PGM. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson, D.P., Tzou, S.Y., Wahbe, R., Govindan, R., Andrews, M., </author> <title> "Support for Live Digital Audio and Video", </title> <booktitle> Proceedings of the Tenth International Conference on Distributed Computing Systems, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1990, </year> <pages> pp. 54-61. </pages>
Reference-contexts: Whereas RTP/C models processes as sporadic tasks, our paradigm uses the RBE process model of [15] to more accurately predict processor demand. (The RBE process model is a generalization of sporadic tasks and the LBAP model employed by the DASH system <ref> [1] </ref>.) Unlike the RTP/C paradigm, PGM supports And nodes (nodes that are eligible to execute only when all of the input queues are over threshold), which introduces different execution properties than those of the RTP/C paradigm. <p> Our graph execution paradigm uses the RBE model [15] as its foundation, but is heavily influenced by the Real-Time Producer/Consumer (RTP/C) paradigm supported by the YARTOS operating system [13] and the Linear Bounded Arrival Process (LBAP) model employed by the DASH system <ref> [1] </ref>. Like the RTP/C paradigm, we use the structure of the graph to help specify execution rates of the processes. However, the execution model is capable of supporting much more sophisticated data flow models than RTP/C.
Reference: [2] <author> Barnes, </author> <title> K.B., </title> <editor> et al., </editor> <title> "A Data Flow Graph Programming Environment for Embedded Multiprocessing", </title> <type> Technical Report, </type> <institution> GE Advanced Technology Laboratories, </institution> <address> Moorestown, New Jersey, </address> <year> 1992. </year>
Reference-contexts: Soft-real-time systems may use buffering schemes to prevent data loss during transient over loads. The system then catches up during light load intervals. There are many products on the market that aid in the development of real-time dataflow applications (e.g., DSPView [8], DataFlo [7], RIPPEN [25], PGSE [12], GEDAE <ref> [2] </ref>), but none of these provide support for analysis of the hard-real-time semantics of the system. Dataflow models implicitly define a temporal semantics of a processing graph by specifying lower bounds on when nodes may execute as a function of the availability of data on input edges.
Reference: [3] <author> Baruah, S., Goddard, S., Jeffay, K., </author> <title> "Feasibility concerns in PGM graphs with bounded buffers" March 1997, </title> <booktitle> in submission. </booktitle>
Reference-contexts: It was surprising that such a simple graph could raise so many issues. We have documented our results in [11] and <ref> [3] </ref>, which were submitted recently to RTAS'97 (IEEE Real-time Technology and Applications Symposium, 1997) and ICECCS'97 (IEEE International Conference on Engineering of Complex Computer Systems, 1997) respectively. <p> This section summarizes [11], which precisely characterizes the execution of nodes and then bounds a graph's buffer needs when the graph is scheduled to meet a specified latency requirement. In <ref> [3] </ref>, we analyze the complement of this problem by assuming buffer constraints and showing how to schedule a feasible PGM chain such that no buffer overflow occurs. For brevity we have chosen not to summarize the results of [3] in this paper. <p> In <ref> [3] </ref>, we analyze the complement of this problem by assuming buffer constraints and showing how to schedule a feasible PGM chain such that no buffer overflow occurs. For brevity we have chosen not to summarize the results of [3] in this paper. Real-time scheduling theory provides a framework upon which we have developed an execution model that supports bounding latency and memory usage for PGM graphs such as the Synthetic Aperture Radar (SAR) graph of Figure 2 (on page 10). <p> In <ref> [3] </ref> we show that the feasibility problem is intractable (co-NP-hard in the strong sense). We are, therefore, not likely to find and efficient feasibility test.
Reference: [4] <author> Baruah, S., Mok, A., Rosier, L., </author> <title> "Preemptively Scheduling Hard-Real-Time Sporadic Tasks With One Processor" Proc. </title> <booktitle> IEEE Real-Time Systems Symp., </booktitle> <address> Lake Buena Vista, FL, </address> <month> December </month> <year> 1993, </year> <pages> pp. 182-190. </pages>
Reference-contexts: We are, therefore, not likely to find and efficient feasibility test. Note that if the cumulative processor utilization for a graph is strictly less than one (i.e., P n x i e i then condition (5.2) can be evaluated efficiently (in pseudo-polynomial time) using techniques developed in <ref> [4, 16] </ref>. Latency. Having established node execution rates and an execution model for graphs, we are now able to address the issue of latency. We begin by defining latency in the context of signal processing graphs.
Reference: [5] <author> Bettati, R., Liu, J., </author> <title> "End-to-End Scheduling to Meet Deadlines in Distributed Systems", </title> <booktitle> Proceedings of the 12th International Conference on Distributed Computing Systems, </booktitle> <address> Yokohama, Japan, </address> <month> June </month> <year> 1992, </year> <pages> pp. 452-459. </pages>
Reference-contexts: Our latency analysis is related to the work of Gerber et al. in guaranteeing end-to-end latency requirements on single processor [10], and to the work of Bettati and Liu in which they analyze the distributed end-to-end scheduling problem known as the flow-shop problem <ref> [5] </ref>. Our work differs from the former in that we cannot assume a periodic task model, and that our node execution rates are derived from the input data rate and the graph. Moreover, unlike [10], we don't introduce new (additional) tasks for the purpose of synchronization. <p> We do not assume each node must run on a different processor | this is the opposite of how PGM graphs should be distributed. Hence, our end-to-end latency analysis begins with a different set of assumptions than were used by Bettati and Liu in <ref> [5] </ref>. 5 Research Plan This section outlines our proposed research by breaking it into four steps. To date, we have concentrated on simple chains of nodes that execute on a single processor.
Reference: [6] <author> Buck, J., Ha, S., Lee, E.A., Messerschmitt, D.G., "Ptolemy: </author> <title> A Framework For Simulating and Prototyp-ing Heterogeneous Systems", </title> <journal> International Journal of computer Simulation, special issue on Simulation Software Development , Vol. </journal> <volume> 4, </volume> <year> 1994. </year>
Reference-contexts: From scheduling theory, we will derive a scheduling condition for preemptive earliest deadline first (EDF) scheduling algorithms. We will also show how to set deadline parameters to bound end-to-end latency and 1 Technically, the RASSP real-time image processing benchmark applications are developed with the Synchronous Dataflow (SDF) methodology <ref> [6, 18] </ref> from the University of California at Berkeley, but equivalent SDF graphs can be developed using PGM and some of the benchmark applications for testing tools were developed with PGM. 2 memory requirements in either a single processor environment or in a distributed system. <p> 4 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: * the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok [20, 21], * Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [18] supported by the Ptolemy system <ref> [6] </ref>, and * the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [13]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs. The dataflow graphs of the SARTOR project have different (and incompatible) node execution rules from PGM. <p> We use the LBAP concept of logical arrival times to set deadlines for N 1 to handle bursts of messages from the source. Unlike the synchronous dataflow (SDF) [18] supported by the Ptolemy system <ref> [6] </ref>, PGM does not require the number of tokens produced and consumed to be constant.
Reference: [7] <institution> DataFlo User's Guide, Axiom Technology Inc., </institution> <note> version 3.5, February 1, </note> <year> 1996. </year>
Reference-contexts: Soft-real-time systems may use buffering schemes to prevent data loss during transient over loads. The system then catches up during light load intervals. There are many products on the market that aid in the development of real-time dataflow applications (e.g., DSPView [8], DataFlo <ref> [7] </ref>, RIPPEN [25], PGSE [12], GEDAE [2]), but none of these provide support for analysis of the hard-real-time semantics of the system.
Reference: [8] <institution> DSPView User's Manual , Lucent Technologies Inc., </institution> <note> version 0.9, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: Soft-real-time systems may use buffering schemes to prevent data loss during transient over loads. The system then catches up during light load intervals. There are many products on the market that aid in the development of real-time dataflow applications (e.g., DSPView <ref> [8] </ref>, DataFlo [7], RIPPEN [25], PGSE [12], GEDAE [2]), but none of these provide support for analysis of the hard-real-time semantics of the system.
Reference: [9] <author> Berry, G., Cosserat, L., </author> <title> "The ESTEREL Synchronous Programming Language and its Mathematical Semantics", </title> <booktitle> Lecture Notes in Computer Science, Vol. 197 Seminar on Concurrency, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: What is needed is an execution paradigm that supports generic rates of the form x executions in y time units rather than a sporadic or periodic model to analyze the execution of generic dataflow graphs. 2 9 Node Execution Rates. We assume the strong synchrony hypothesis of <ref> [9] </ref> to introduce the concept of node execution rates. Under the synchrony hypothesis, we assume the graph executes on an infinitely fast machine. Hence, each node takes "no time" to execute and data passes from source to sink node instantaneously.
Reference: [10] <author> Gerber, R., Seongsoo, H., Saksena, M., </author> <title> "Guaranteeing End-to-End Timing Constraints by Calibrating Intermediate Processes", </title> <booktitle> Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1994. </year>
Reference-contexts: Our latency analysis is related to the work of Gerber et al. in guaranteeing end-to-end latency requirements on single processor <ref> [10] </ref>, and to the work of Bettati and Liu in which they analyze the distributed end-to-end scheduling problem known as the flow-shop problem [5]. <p> Our work differs from the former in that we cannot assume a periodic task model, and that our node execution rates are derived from the input data rate and the graph. Moreover, unlike <ref> [10] </ref>, we don't introduce new (additional) tasks for the purpose of synchronization. The dataflow model of PGM does not fit the flow shop problem. We do not assume each node must run on a different processor | this is the opposite of how PGM graphs should be distributed.
Reference: [11] <author> Goddard, S., Jeffay, K. </author> <title> "Analyzing the Real-Time Properties of a Dataflow Execution Paradigm using a Synthetic Aperture Radar Application", </title> <month> January </month> <year> 1997, </year> <note> in submission. </note>
Reference-contexts: The final phase of this research will be an evaluation process. 8 5.1 Current State We have focused our research, to date, on PGM chains executing on a single processor. It was surprising that such a simple graph could raise so many issues. We have documented our results in <ref> [11] </ref> and [3], which were submitted recently to RTAS'97 (IEEE Real-time Technology and Applications Symposium, 1997) and ICECCS'97 (IEEE International Conference on Engineering of Complex Computer Systems, 1997) respectively. This section summarizes [11], which precisely characterizes the execution of nodes and then bounds a graph's buffer needs when the graph is <p> We have documented our results in <ref> [11] </ref> and [3], which were submitted recently to RTAS'97 (IEEE Real-time Technology and Applications Symposium, 1997) and ICECCS'97 (IEEE International Conference on Engineering of Complex Computer Systems, 1997) respectively. This section summarizes [11], which precisely characterizes the execution of nodes and then bounds a graph's buffer needs when the graph is scheduled to meet a specified latency requirement. <p> The execution rates of the other nodes (excluding 2 The proof of this and all subsequent Lemmas and Theorems are contained in <ref> [11] </ref> 10 the Sink node) are derived as follows: R Zero F ill = (x 1 ; y 1 ) = gcd (p 0 x 0 ; c 0 ) c 0 y 0 p Range x 0 gcd (p Range x 0 ; c Range ) ; c Range y <p> Latency is a function of the scheduling algorithm. It is the case for graph models, however, that latency also has a structured component. In <ref> [11] </ref>, we illustrate this property with the execution of a graph under the strong synchrony hypothesis. For space considerations, we omit this illustration and only present the results. <p> Generally, the deadline parameters are the only free variables in the function. To determine a sample's latency in an implementation of the graph, we need to provide a value for each d i in the RBE task set. See <ref> [11] </ref> for a discussion on the assignment of a value to d i . Assume a value has been assigned to each d i in the graph.
Reference: [12] <author> Hillson, R., </author> <title> "Support Tools for the Processing Graph Method", </title> <booktitle> Proceedings of the Fifth International Conference in Signal Processing Applications and Technology [ICPAT 94] , Dalls, </booktitle> <address> TX, </address> <month> October </month> <year> 1994, </year> <pages> pp. 756-761. </pages>
Reference-contexts: Soft-real-time systems may use buffering schemes to prevent data loss during transient over loads. The system then catches up during light load intervals. There are many products on the market that aid in the development of real-time dataflow applications (e.g., DSPView [8], DataFlo [7], RIPPEN [25], PGSE <ref> [12] </ref>, GEDAE [2]), but none of these provide support for analysis of the hard-real-time semantics of the system. Dataflow models implicitly define a temporal semantics of a processing graph by specifying lower bounds on when nodes may execute as a function of the availability of data on input edges.
Reference: [13] <author> Jeffay, K., </author> <title> "The Real-Time Producer/Consumer Paradigm: A paradigm for the construction of efficient, predictable real-time systems", </title> <booktitle> Proceedings of the ACM/SIGAPP Symposium on Applied Computing , Indianapolis, IN, </booktitle> <month> February </month> <year> 1993, </year> <pages> pp. 796-804. </pages>
Reference-contexts: techniques applied to three different dataflow models: * the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok [20, 21], * Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [18] supported by the Ptolemy system [6], and * the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay <ref> [13] </ref>. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs. The dataflow graphs of the SARTOR project have different (and incompatible) node execution rules from PGM. <p> Our graph execution paradigm uses the RBE model [15] as its foundation, but is heavily influenced by the Real-Time Producer/Consumer (RTP/C) paradigm supported by the YARTOS operating system <ref> [13] </ref> and the Linear Bounded Arrival Process (LBAP) model employed by the DASH system [1]. Like the RTP/C paradigm, we use the structure of the graph to help specify execution rates of the processes. However, the execution model is capable of supporting much more sophisticated data flow models than RTP/C.
Reference: [14] <author> Jeffay, K., </author> <title> "On Latency Management in Time-Shared Operating Systems", </title> <booktitle> Proceedings 11 th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> Seatle, WA, </address> <month> May </month> <year> 1994, </year> <pages> pp. 86-90. </pages>
Reference-contexts: Since the first node in a chain receives data from an external device, it has no release time to inherit and its logical release time is the same as its actual release time. This technique was also used in <ref> [14] </ref> to manage latency on a chain of processing tasks that implemented a desktop video-conferencing application. As long as the scheduler ensures that a task only executes when its input queue is over threshold, it doesn't matter if N i+1 executes before N i .
Reference: [15] <author> Jeffay, K., Bennett, D. </author> <title> "A Rate-Based Execution Abstraction For Multimedia Computing", </title> <journal> ACM Multimedia Systems, </journal> <note> to appear. </note>
Reference-contexts: However, our execution model is capable of supporting much more sophisticated data flow models than RTP/C. Whereas RTP/C models processes as sporadic tasks, our paradigm uses the RBE process model of <ref> [15] </ref> to more accurately predict processor demand. (The RBE process model is a generalization of sporadic tasks and the LBAP model employed by the DASH system [1].) Unlike the RTP/C paradigm, PGM supports And nodes (nodes that are eligible to execute only when all of the input queues are over threshold), <p> If we schedule the tasks using the preemptive earliest deadline first (EDF) scheduling algorithm, we can verify the real-time requirements of the application using the techniques Jeffay has developed for the Rate Based Execution (RBE) model <ref> [15] </ref>. RBE is a general task model that consists of a collection of independent processes specified by four parameters: (x; y; d; e) 3 . <p> T will be feasible if and only if n X y i x i e i (5.2) In <ref> [15] </ref>, Jeffay established sufficiency of (5.2) by showing that the preemptive EDF scheduling algorithm can schedule releases of the tasks in T without a task missing a deadline if the task set satisfies (5.2). <p> Our graph execution paradigm uses the RBE model <ref> [15] </ref> as its foundation, but is heavily influenced by the Real-Time Producer/Consumer (RTP/C) paradigm supported by the YARTOS operating system [13] and the Linear Bounded Arrival Process (LBAP) model employed by the DASH system [1].
Reference: [16] <author> Jeffay, K., Stone, D., </author> <title> "Accounting for Interrupt Handling Costs in Dynamic Priority Task Systems", </title> <booktitle> Proceedings of the 14 th IEEE Symposium on Real-Time Systems, </booktitle> <address> Durham, NC, </address> <year> 1993, </year> <pages> pp. 212-221. </pages>
Reference-contexts: We are, therefore, not likely to find and efficient feasibility test. Note that if the cumulative processor utilization for a graph is strictly less than one (i.e., P n x i e i then condition (5.2) can be evaluated efficiently (in pseudo-polynomial time) using techniques developed in <ref> [4, 16] </ref>. Latency. Having established node execution rates and an execution model for graphs, we are now able to address the issue of latency. We begin by defining latency in the context of signal processing graphs.
Reference: [17] <author> Lee, B., Hurson, </author> <title> A.R., "Dataflow Architectures and Multithreading", </title> <booktitle> COMPUTER, </booktitle> <month> August </month> <year> 1994, </year> <pages> pp. 27-39. </pages>
Reference-contexts: Fine grain dataflow execution environments are usually implemented with special purpose hardware. Three of the best known dataflow computers are the Static Dataflow Machine, the Tagged-Token Dataflow Architecture (TTDA), and the Manchester Machine <ref> [17] </ref>. The first two were developed at MIT, and the third was developed at the University of Manchester. A slightly more coarse granularity of dataflow, though still considered fine grain dataflow, is supported by the Threaded Abstract Machine (TAM) produced at Berkeley [17]. <p> Tagged-Token Dataflow Architecture (TTDA), and the Manchester Machine <ref> [17] </ref>. The first two were developed at MIT, and the third was developed at the University of Manchester. A slightly more coarse granularity of dataflow, though still considered fine grain dataflow, is supported by the Threaded Abstract Machine (TAM) produced at Berkeley [17]. TAM, a compiler controlled abstract machine, associates a node with a simple sequence of instructions called a thread. The threads (nodes) are executed without preemption under compiler control following dataflow rules. TAM extends von Neumann machines (i.e., general purpose computers) to support fine grained parallelism without elaborate hardware support.
Reference: [18] <author> Lee, E.A., Messerschmitt, D.G., </author> <title> "Static Scheduling of Synchronous Data Flow Programs for Digital Signal Processing", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-36, No. 1, </volume> <month> January </month> <year> 1987, </year> <pages> pp. 24-35. </pages>
Reference-contexts: 1 Introduction Signal processing algorithms are often defined in the literature using large grain dataflow graphs <ref> [18] </ref>: directed graphs in which a node is a sequential program that executes from start to finish in isolation (i.e., without synchronization), and the graph edges depict the flow of data from one node to the next. Thus, an edge represents a producer/consumer relationship between two nodes. <p> From scheduling theory, we will derive a scheduling condition for preemptive earliest deadline first (EDF) scheduling algorithms. We will also show how to set deadline parameters to bound end-to-end latency and 1 Technically, the RASSP real-time image processing benchmark applications are developed with the Synchronous Dataflow (SDF) methodology <ref> [6, 18] </ref> from the University of California at Berkeley, but equivalent SDF graphs can be developed using PGM and some of the benchmark applications for testing tools were developed with PGM. 2 memory requirements in either a single processor environment or in a distributed system. <p> address stochastic measurements of temporal correctness. 4 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: * the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok [20, 21], * Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs <ref> [18] </ref> supported by the Ptolemy system [6], and * the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [13]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs. <p> The SDF graphs of Ptolemy are closely related to PGM graphs; SDF graphs utilize a subset of the features supported by PGM. In addition to supporting a more general dataflow model, our research differs from <ref> [18] </ref> in that we use dynamic, real-time, scheduling techniques rather than creating static schedules (as Lee and Messerschmitt do). <p> We use the LBAP concept of logical arrival times to set deadlines for N 1 to handle bursts of messages from the source. Unlike the synchronous dataflow (SDF) <ref> [18] </ref> supported by the Ptolemy system [6], PGM does not require the number of tokens produced and consumed to be constant.
Reference: [19] <author> Liu, C., Layland, J., </author> <title> "Scheduling Algorithms for multiprogramming in a Hard-Real-Time Environment", </title> <journal> Journal of the ACM , Vol 30., </journal> <month> Jan. </month> <year> 1973, </year> <pages> pp. 46-61. 21 </pages>
Reference: [20] <author> Mok, A.K., Sutanthavibul, S., </author> <title> "Modeling and Scheduling of Dataflow Real-Time Systems", </title> <booktitle> Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <address> San Diego, CA, </address> <month> December </month> <year> 1985, </year> <pages> pp. 178-187. </pages>
Reference-contexts: We do not address stochastic measurements of temporal correctness. 4 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: * the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok <ref> [20, 21] </ref>, * Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [18] supported by the Ptolemy system [6], and * the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [13]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs.
Reference: [21] <author> Mok, A. K., et al., </author> <title> "Synthesis of a Real-Time System with Data-driven Timing Constraints", </title> <booktitle> Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <address> San Jose, CA, </address> <month> December </month> <year> 1987, </year> <pages> pp. 133-143. </pages>
Reference-contexts: We do not address stochastic measurements of temporal correctness. 4 Related Work This research was inspired by the analysis techniques applied to three different dataflow models: * the dataflow graphs found in the Software Automation for Real-Time Operations (SARTOR) project led by Mok <ref> [20, 21] </ref>, * Lee and Messerschmitt's Synchronous Dataflow (SDF) graphs [18] supported by the Ptolemy system [6], and * the Real-Time Producer/Consumer (RTP/C) paradigm of Jeffay [13]. Unfortunately, none of these paradigms (or any other dataflow paradigms from the literature) correctly model the execution of PGM graphs.
Reference: [22] <author> Novak, L.M., Owirka, G.J., Netishen, </author> <title> C.M., "Performance of a high-resolution polarimetric SAR automatic target recognition system", M.I.T. </title> <journal> Lincoln Laboratory Journal, Vo. </journal> <volume> 6, No. 1, </volume> <year> 1991, </year> <pages> pp. 11-25. </pages>
Reference: [23] <editor> Processing Graph Method Specification, </editor> <title> prepared by the Naval Research Laboratory for use by the Navy Standard Signal Processing Program Office (PMS-412), </title> <note> Version 1.0, </note> <month> December </month> <year> 1987. </year>
Reference-contexts: Even the Navy's own dataflow methodology, Processing Graph Method (PGM) <ref> [23] </ref>, lacks real-time analysis techniques to support making cost trade-offs or to verify latency requirements. PGM is used to develop real-time, embedded, anti-submarine warfare (ASW) applications for the AN/UYS-2A (the Navy's standard signal processor). The AN/UYS-2A is part of a number of Navy systems including airborne, surface, and sub-surface platforms. <p> We selected PGM as the underlying dataflow model since it represents a very general dataflow paradigm. This section is a condensation of <ref> [23] </ref>. For brevity, we do not describe features of PGM that are not relevant to this research. In PGM [23], a system is expressed as a directed graph of large grain nodes (processing functions) and edges (logical communication channels). <p> We selected PGM as the underlying dataflow model since it represents a very general dataflow paradigm. This section is a condensation of <ref> [23] </ref>. For brevity, we do not describe features of PGM that are not relevant to this research. In PGM [23], a system is expressed as a directed graph of large grain nodes (processing functions) and edges (logical communication channels). The topology of the graph defines the flow of data from an input source to an output sink, defining a software architecture independent of the hardware hosting the application.
Reference: [24] <institution> Reference Manual for the Processing Graph Support Environment: Parts 1-4 , prepared by the Hughes Aircraft Ground Systems Group for the Naval Research Laboraty, </institution> <month> April 20, </month> <year> 1992. </year>
Reference: [25] <institution> RIPPEN User's Guide, ORINCON Technologies, Inc., Rev 2.0, </institution> <month> June, </month> <year> 1996. </year>
Reference-contexts: Soft-real-time systems may use buffering schemes to prevent data loss during transient over loads. The system then catches up during light load intervals. There are many products on the market that aid in the development of real-time dataflow applications (e.g., DSPView [8], DataFlo [7], RIPPEN <ref> [25] </ref>, PGSE [12], GEDAE [2]), but none of these provide support for analysis of the hard-real-time semantics of the system.
Reference: [26] <author> Zuerndorfer, B., Shaw, </author> <title> G.A., "SAR Processing for RASSP Application", </title> <booktitle> Proceedings of 1 st Annual RASSP Conference, </booktitle> <address> Arlington, VA, </address> <month> August 15-18, </month> <year> 1994. </year> <month> 22 </month>
References-found: 26

