URL: http://www.cs.colostate.edu/~draper/papers/kutlu_sdair96.ps.gz
Refering-URL: http://www.cs.colostate.edu/~vision/html/publications.html
Root-URL: 
Title: Support Tools for Visual Information Management  
Author: Gokhan Kutlu Bruce A. Draper J. Eliot B. Moss Edward M. Riseman 
Keyword: Index Terms: visual information management, persistent object store, extensible visual object store  
Note: This work was supported in part by the Advanced Research Projects Agency (via U.S. Army TEC) under contract number DACA76-92-C-0041, (via TACOM) under contract number DAAE07-91-C-R035, and by the National Science Foundation under grant number CDA-8922572.  
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Visual applications need to represent, manipulate, store, and retrieve both raw and processed visual data. Existing relational and object-oriented database systems fail to offer satisfactory visual data management support because they lack the kinds of representations, storage structures, indices, access methods, and query mechanisms needed for visual data. We argue that extensible visual object stores offer feasible and effective means to address the data management needs of visual applications. ISR4 is such a visual object store under development at the University of Massachusetts for the management of persistent visual information. ISR4 is designed to offer extensive storage and retrieval support for complex and large visual data, customizable buffering and clustering, and spatial and temporal indexing, along with a variety of multi-dimensional access methods and query languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Brolio, B. Draper, R. Beveridge, and A. Hanson. </author> <title> ISR: A Database for Symbolic Processing in Computer Vision. </title> <journal> IEEE Computer, </journal> <volume> 22(12) </volume> <pages> 22-30, </pages> <year> 1989. </year>
Reference-contexts: Spatial and temporal indexing and query methods. ISR3 is equipped with a hierarchy of C++ classes that provide representations and methods for associatively and spatially organizing and accessing sets of memory-resident objects [3]. In particular, 2D geometric objects in images can be spatially stored into two-dimensional grids <ref> [1] </ref> and retrieved according to spatial position in the image. We are currently developing persistent versions of these access methods. When manipulating persistent data, these techniques can significantly reduce data access times because only the index data structures need to be kept in-memory when indexing persistent objects. <p> Visual objects, especially features computed in an image, are often loosely structured into sets or groups <ref> [1] </ref>. <p> Set operations and range queries are defined on tokensets, as well as associative access methods. In particular, geometric objects can be spatially stored into two-dimensional grids and retrieved according to spatial position in the image <ref> [1] </ref>. As before, ISR4 is extensible, so that other grouping techniques, such as oct-trees for 3D data can easily be implemented. 4.3.3 Flexible I/O for visual objects. As a third form of assistance, the DPI provides input and output support for visual data produced in operations.
Reference: [2] <editor> Editors: H. I. Christensen and J. L. Crow-ley. </editor> <title> Experimental Environments for Computer Vision and Image Processing. </title> <publisher> World Scientific, </publisher> <year> 1994. </year>
Reference: [3] <author> B. A. Draper and G. Kutlu. </author> <note> ISR3.1 User's Manual, </note> <year> 1994. </year>
Reference-contexts: It therefore must be managed by efficient storage and access mechanisms which are geared to the nature (e.g., spatial, temporal, 3D) of the data. We addressed the management of temporary data in an earlier visual data management and process integration tool, called ISR3 <ref> [3] </ref>. In this paper, we first discuss the issues related to the management of persistent data in visual applications, and the shortcomings of current relational and object-oriented systems in dealing with these issues. <p> As shown in Figure 1, ISR4 is the integration of an earlier visual data management and process integration tool called ISR3 1 <ref> [3] </ref>, with Mneme [14], a persistent object store (also developed at the University of Massachusetts). 1 ISR (Intermediate Symbolic Representation; [Brolio, 1989]) is the name of a series of symbolic databases for visual information developed at the University of Mas-sachusetts; ISR4 is the most recent version. <p> Spatial and temporal indexing and query methods. ISR3 is equipped with a hierarchy of C++ classes that provide representations and methods for associatively and spatially organizing and accessing sets of memory-resident objects <ref> [3] </ref>. In particular, 2D geometric objects in images can be spatially stored into two-dimensional grids [1] and retrieved according to spatial position in the image. We are currently developing persistent versions of these access methods.
Reference: [4] <author> G. Droge and H.-J. Schek. </author> <title> Query-Adaptive Data Space Partitioning Using Variable-Sized Storage Clusters. </title> <booktitle> In Advances in Spatial Databases: Proceedings of the 3rd International Symposium SSD, </booktitle> <pages> pages 337-356, </pages> <year> 1993. </year>
Reference-contexts: Traditional database systems do not provide appropriate data types or built-in support for images or similar 2D objects (e.g. maps). Adaptive clustering techniques used for clustering multi-dimensional data according to patterns of access are not mature, and the ones suggested depend on complex access pattern statistics <ref> [4, 18] </ref>. Associative clustering. As discussed above, many visual applications need to store not only raw images, but also symbolic data extracted from (or associated with) images. In content-based image retrieval, for example, commonly stored data include color histograms, invariants of shape moments, and texture features.
Reference: [5] <author> R. Elmasri, G. Wuu, and Y. Kim. </author> <title> The Time Index: An Access Structure for Temporal Data. </title> <booktitle> In Proceedings of the Conference on Very Large DAtabases, </booktitle> <pages> pages 328-336, </pages> <month> August </month> <year> 1990. </year> <title> Support Tools for Visual Information Management </title>
Reference-contexts: We are also adding 3-D access mechanisms, and spatial and temporal query languages and techniques to this framework. A temporal in dex based on the Time Index <ref> [5] </ref>, and optional versioning will also be provided to support historical queries. Once indices are built, query languages and techniques will also be implemented within this framework. Extensibility.
Reference: [6] <author> W. Niblack et. al. </author> <title> The QBIC Project: Querying Images By Content Using Color, Texture, and Shape. In SPIE, Storage and Retrieval for Image and Video Databases, </title> <booktitle> volume 1908, </booktitle> <pages> pages 173-187, </pages> <year> 1993. </year>
Reference-contexts: One is content-based image retrieval, for example, the QBIC <ref> [6] </ref> project. In QBIC, color, texture, shape and sketch features are computed for image areas outlined by the user, and used at query time for image retrieval.
Reference: [7] <author> D. Le Gall. </author> <title> MPEG: A Video Compression Standard for Multimedia Applications. </title> <journal> Communications of the ACM, </journal> <volume> 34(4) </volume> <pages> 46-58, </pages> <month> April </month> <year> 1991. </year>
Reference: [8] <author> J. M. Hellerstein, J. F. Naughton, and A. Pfeffer. </author> <title> Generalized Search Trees for Database Systems. </title> <type> Technical Report No. 1252, </type> <institution> University of Wisconsin at Madison October 1994. </institution>
Reference-contexts: Moreover, Mneme provides the database programmer with a flexible and powerful interface for building different types of indices, including spatial indices, such as quad-trees and R-trees, and other multi-dimensional indices. A more general access structure similar to the Generalized Search Tree (GiST) <ref> [8] </ref> is also under construction for Mneme, which will be extensible in both the data types it can index and in the queries it can support. We are also adding 3-D access mechanisms, and spatial and temporal query languages and techniques to this framework.
Reference: [9] <author> A. Hoogs and B. Kniffin. </author> <title> The RADIUS Testbed Database: </title> <booktitle> Issues and Design. In IUW, Monterey, CA, </booktitle> <volume> volume 1, </volume> <pages> pages 269-276, </pages> <month> Nov. </month> <year> 1994. </year>
Reference: [10] <editor> R. Jain. </editor> <booktitle> Workshop Report: NSF Workshop on Visual Information Management Systems. In SPIE, Storage and Retrieval for Image and Video Databases, volume 1908, </booktitle> <pages> pages 173-187, </pages> <year> 1993. </year>
Reference-contexts: Visual Information Management Systems. A similar research effort has focused on the development of Visual Information Management Systems (VIMS) <ref> [10] </ref>. However, there is so much variety in the application domains and the types of visual data they employ (e.g. continuous vs. discrete, temporal vs. spatial) that there is a need for a spectrum of VIMSs, rather than a single, all-encompassing VIMS.
Reference: [11] <author> G. M. Lohman, B. Lindsay, H. Pirahesh, and K. B. Schiefer. </author> <title> Extensions to Star-burst: Objects, types, functions, and rules. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 94-109, </pages> <year> 1991. </year>
Reference-contexts: The features, which consist of objects as complex as histograms and reduced resolution edge maps, are currently stored in an extensible relational database called Starburst <ref> [11] </ref>. The images themselves, on the other hand, are stored in flat files. One can achieve better data clustering and faster data access if the images and related features are stored using the strategies of ISR4.
Reference: [12] <author> J. E. B. Moss. </author> <title> Working with Persistent Objects: To Swizzle or Not to Swizzle. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 18(8) </volume> <pages> 657-673, </pages> <year> 1992. </year>
Reference-contexts: The object references are G okhan Kutlu, Bruce A. Draper, J. Eliot B. Moss, and Edward M. Riseman converted to ids during storage, and back to di-rect pointers during retrieval. The performance analysis of this scheme called copy swizzling 4 has been thoroughly investigated in <ref> [12] </ref>, and is beyond the scope of this paper. The Storage Manager also provides methods to lock and release objects in Mneme buffers.
Reference: [13] <author> J. E. B. Moss, T. Hosking, and E. Brown. </author> <note> Mneme V3.x User's Guide, </note> <year> 1994. </year>
Reference-contexts: The main abstractions provided by Mneme to the Storage Manager are objects, object pointers, files, object pools, and buffer pools <ref> [13] </ref>. Mneme views an object to be a collection of bytes and references to other objects. Each object is uniquely referenced by an object identifier. In Mneme, objects are grouped together into units called files.
Reference: [14] <author> J. Eliot B. Moss. </author> <title> Design of the Mneme Persistent Object Store. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(2) </volume> <pages> 103-139, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: As shown in Figure 1, ISR4 is the integration of an earlier visual data management and process integration tool called ISR3 1 [3], with Mneme <ref> [14] </ref>, a persistent object store (also developed at the University of Massachusetts). 1 ISR (Intermediate Symbolic Representation; [Brolio, 1989]) is the name of a series of symbolic databases for visual information developed at the University of Mas-sachusetts; ISR4 is the most recent version.
Reference: [15] <author> J. L. </author> <title> Mundy and the IUE Committee. The Image Understanding Environment: Overview. </title> <booktitle> In IUW, </booktitle> <address> Washington, D.C., </address> <pages> pages 238-288, </pages> <month> April </month> <year> 1993. </year>
Reference: [16] <author> J. L. Mundy, R. Welty, L. Quam, T. Strat, W. Bremmer, M. Horwedel, D. Hackett, and A. Hoogs. </author> <title> The RADIUS Common Development Environment. </title> <booktitle> In IUW, </booktitle> <address> San Diego, CA, </address> <pages> pages 215-228, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: In content-based image retrieval, for example, commonly stored data include color histograms, invariants of shape moments, and texture features. Moreover, symbolic data often need to be associated with the image region they came from so that they can be retrieved with the sub-image. In the RADIUS <ref> [16] </ref> program, for example, site models reconstructed from sets of aerial images need to be grouped, stored, and retrieved according to their functional areas. <p> Along with indices, query mechanisms can also be implemented. 5.2 Site Models for Photo-interpreta tion Intelligence gathering operations provide other applications. As an example, the RADIUS project <ref> [16] </ref> is developing Image Understanding (IU) tools for image-analysts to support automated 3D cite model acquisition, model extension, and change detection. In a typical scenario, analysts build up a folder of image data and other intelligence about a site.
Reference: [17] <author> J. Rasure and S. Kubica. </author> <title> The Khoros Application Development Environment. </title> <booktitle> In [2], </booktitle> <pages> pages 1-32, </pages> <year> 1994. </year>
Reference-contexts: Consequently, images need special attention in a VIMS. To address the needs of a wide variety of applications, the DPI supports most commercially available image formats, including gif, tiff, (Khoros <ref> [17] </ref>) viff, (KBVision [19]) im, and (soon) JPEG. This allows image processing and image understanding operators from such widely-distributed systems as Khoros and KB-Vision to be applied to ISR4 data.
Reference: [18] <author> S. Sarawagi and M. Stonebraker. </author> <title> Efficient Organization of Large Multidimensional Arrays. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <volume> volume 10, </volume> <pages> pages 328-336, </pages> <year> 1994. </year>
Reference-contexts: Most applications store images in files, and leave the management of memory (page swaps, etc.) to the operating system. This approach can result in a large number of page swaps, especially when the physical clustering of the image on disk does not match the access pattern of the application <ref> [18] </ref>. Traditional database systems do not provide appropriate data types or built-in support for images or similar 2D objects (e.g. maps). Adaptive clustering techniques used for clustering multi-dimensional data according to patterns of access are not mature, and the ones suggested depend on complex access pattern statistics [4, 18]. <p> Traditional database systems do not provide appropriate data types or built-in support for images or similar 2D objects (e.g. maps). Adaptive clustering techniques used for clustering multi-dimensional data according to patterns of access are not mature, and the ones suggested depend on complex access pattern statistics <ref> [4, 18] </ref>. Associative clustering. As discussed above, many visual applications need to store not only raw images, but also symbolic data extracted from (or associated with) images. In content-based image retrieval, for example, commonly stored data include color histograms, invariants of shape moments, and texture features.
Reference: [19] <author> T. Williams. </author> <title> Image Understanding Tools. </title> <booktitle> In ICPR, </booktitle> <address> Atlantic City, N.J., number 10, </address> <pages> pages 606-610, </pages> <note> June 1990. </note> <author> G okhan Kutlu, Bruce A. Draper, J. Eliot B. Moss, and Edward M. </author> <month> Riseman </month>
Reference-contexts: Consequently, images need special attention in a VIMS. To address the needs of a wide variety of applications, the DPI supports most commercially available image formats, including gif, tiff, (Khoros [17]) viff, (KBVision <ref> [19] </ref>) im, and (soon) JPEG. This allows image processing and image understanding operators from such widely-distributed systems as Khoros and KB-Vision to be applied to ISR4 data. To support the smooth integration of any new operators with the system, the DPI provides facilities to convert any image format to another.
References-found: 19

