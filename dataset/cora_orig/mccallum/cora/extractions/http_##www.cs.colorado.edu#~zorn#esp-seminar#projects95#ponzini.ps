URL: http://www.cs.colorado.edu/~zorn/esp-seminar/projects95/ponzini.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/esp-seminar/overview.html
Root-URL: http://www.cs.colorado.edu
Title: Program Classification  
Author: Jeanine Cook 
Date: December 20, 1995  
Abstract: 1 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Thomas Ball and James R. Larus. </author> <title> Branch Prediction for Free. </title> <booktitle> In ACM SIGPLAN, </booktitle> <pages> pages 300-313. </pages> <institution> Association for Computer Machinery, </institution> <year> 1993. </year>
Reference-contexts: 1 Abstract Previous work has shown that static branch prediction can improve program performance <ref> [2, 1, 5] </ref>. In particular, Calder et al. [2] show that static branch prediction via a corpus-based approach improves the branch prediction miss rate by approximately 5% over other methods.
Reference: [2] <author> Brad Calder, Dirk Grunwald, Donald Lindsay, James Martin, Michael Mozer, and Benjamin Zorn. </author> <title> Corpus-based Static Branch Prediction. </title> <booktitle> In ACM SIGPLAN, </booktitle> <pages> pages 79-92. </pages> <institution> Association for Computer Machinery, </institution> <year> 1995. </year>
Reference-contexts: 1 Abstract Previous work has shown that static branch prediction can improve program performance <ref> [2, 1, 5] </ref>. In particular, Calder et al. [2] show that static branch prediction via a corpus-based approach improves the branch prediction miss rate by approximately 5% over other methods. <p> 1 Abstract Previous work has shown that static branch prediction can improve program performance [2, 1, 5]. In particular, Calder et al. <ref> [2] </ref> show that static branch prediction via a corpus-based approach improves the branch prediction miss rate by approximately 5% over other methods. <p> Entries with a ' ?' in the Function column are programs for which no information on general function could be found. 3.2 Data The data I used to classify the programs was based on the data gathered in the ESP branch prediction study <ref> [2] </ref>. It differed from that in the ESP study in that each branch was augmented with an additional six features. The original ESP data consisted of 24 feature attributes in addition to a frequency attribute and a branch probability attribute.
Reference: [3] <author> Peter Cheeseman and John Stutz. </author> <title> Maximum Entropy and Bayesian Methods, chapter Bayesian Classification (AutoClass): </title> <booktitle> Theory and Results, </booktitle> <pages> pages 61-83. </pages> <publisher> Kluwer Academic Publishers, Forthcoming. </publisher>
Reference-contexts: In other words, the method takes as input raw data from the objects to be classified and finds the most probable set of class descriptions. For a more detailed description of Bayesian classification, see <ref> [4, 3] </ref>. 2.2 The Tool AutoClass takes as input the following items: * A data file containing lines (streams) of either discrete or real- valued data/attributes. * A header file consisting of a description of each attribute with the number of possible values each attribute can assume. * A file containing
Reference: [4] <author> Robin Hanson, John Stutz, and Peter Cheeseman. </author> <title> Bayesian Classification Theory. </title> <type> Technical Report FIA-90-12-7-01, </type> <institution> NASA Ames Research Center, </institution> <year> 1991. </year>
Reference-contexts: In other words, the method takes as input raw data from the objects to be classified and finds the most probable set of class descriptions. For a more detailed description of Bayesian classification, see <ref> [4, 3] </ref>. 2.2 The Tool AutoClass takes as input the following items: * A data file containing lines (streams) of either discrete or real- valued data/attributes. * A header file consisting of a description of each attribute with the number of possible values each attribute can assume. * A file containing
Reference: [5] <author> Cliff Young and Michael D. Smith. </author> <title> Improving the Accuracy of Static Branch Prediction Using Branch Correlation. </title> <booktitle> In ACM ASPLOS, </booktitle> <pages> pages 232-241. </pages> <institution> Association for Computer Machinery, </institution> <year> 1994. </year> <month> 17 </month>
Reference-contexts: 1 Abstract Previous work has shown that static branch prediction can improve program performance <ref> [2, 1, 5] </ref>. In particular, Calder et al. [2] show that static branch prediction via a corpus-based approach improves the branch prediction miss rate by approximately 5% over other methods.
References-found: 5

