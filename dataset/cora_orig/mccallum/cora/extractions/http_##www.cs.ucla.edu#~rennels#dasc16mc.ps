URL: http://www.cs.ucla.edu/~rennels/dasc16mc.ps
Refering-URL: http://www.cs.ucla.edu/~rennels/
Root-URL: http://www.cs.ucla.edu
Email: doug.caldwell@jpl.nasa.gov  rennels@cs.ucla.edu  
Title: A MINIMALIST HARDWARE ARCHITECTURE FOR USING COMMERCIAL MICROCONTROLLERS IN SPACE  
Author: D. W. Caldwell D. A. Rennels 
Address: 4800 Oak Grove Drive, Pasadena, CA 91109  Los Angeles  Los Angeles, CA 90024  
Affiliation: Jet Propulsion Laboratory Avionic Systems Engineering Section Avionic Equipment Section  University of California,  School of Engineering and Applied Science Department of Computer Science  
Date: 1 28-30 October 1997 (pre-publication)  
Note: 16 th Digital Avionics Systems Conference  
Abstract: Microcontrollers provide very dense functionality for embedded applications ranging from telephones to automobiles. The acceptance of these devices for space applications has been hindered by their manufacture which often uses multiple semiconductor fabrication techniques and thereby compromises radiation tolerance. If such concerns could be mitigated, microcontrollers would provide a substantial increase in performance for builders of spacecraft electronics. This paper presents hardware considerations for using commercial microcontrollers in space applications. The motivations for starting with commercial devices and the concerns associated with their use are presented. The advantages of software versus hardware voting schemes to mitigate single-event effects are discussed. Interprocess communications approaches and schemes for improving I/O robustness are presented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> 8XC196Kx, 8XC196Jx, </author> <title> 87C196CA Microcontroller Family User's Manual. </title> <publisher> Intel Corporation, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: Computational Efficiency . It is also worth considering that not all computation is created equal. A general-purpose 32-bit computer like the MFC 1 delivers about 22 MIPS (at 20 MHz) and consumes 7.5W - an efficiency of about 3 MIPS/W. The 16-bit 80C196CA <ref> [1] </ref> delivers about two MIPS 2 (at 20 MHz) while consuming 375 mW, yielding 5 MIPS/W - roughly equivalent to the MFC when considering the types of code which are likely to be implemented on the 196. <p> The latter approach requires that both the output bit and the configuration bit be independently readable, a feature which is also valuable for validation experiments to determine the probability of I/O port flip-flop upset. The PIC microcontrollers [2] have this capability, as do the Intel 87C196Kx, Jx and CA <ref> [1] </ref>; many older parts do not. If the expected error rate after scrubbing is still too high (e.g., for safety-critical functions), hardware interlocks may be used wherein a critical function must be enabled by an independent control signal.
Reference: [2] <institution> PIC16/17 Microcontroller Data Book. Microchip Technology, Inc. 1995/1996. </institution>
Reference-contexts: The 16-bit 80C196CA [1] delivers about two MIPS 2 (at 20 MHz) while consuming 375 mW, yielding 5 MIPS/W - roughly equivalent to the MFC when considering the types of code which are likely to be implemented on the 196. A rather startling example is the 8-bit PIC16C73A <ref> [2] </ref> which delivers 5 MIPS (at 20 MHz) at about 60 mW (typical) for a whopping 80 MIPS/W! For a large class of applications, this processor is far more efficient than a central computer. <p> The latter approach requires that both the output bit and the configuration bit be independently readable, a feature which is also valuable for validation experiments to determine the probability of I/O port flip-flop upset. The PIC microcontrollers <ref> [2] </ref> have this capability, as do the Intel 87C196Kx, Jx and CA [1]; many older parts do not. If the expected error rate after scrubbing is still too high (e.g., for safety-critical functions), hardware interlocks may be used wherein a critical function must be enabled by an independent control signal. <p> The examples also span I/O requirements from simple bilevel and analog voting to pulse train generation, event timing, and serial communications. Example problems to be considered include an inertial measurement unit, a propulsion/pyro switching unit, and a distributed sun sensor. The prototypical example applications will use the Microchip PIC16C73A <ref> [2] </ref>. Its functionality, while relatively limited, is sufficient to implement the chosen applications but these same limitations force a frugal approach to fault-tolerance - it would be very easy to use all the I/O pins just implementing fault-tolerance.
Reference: [3] <author> V. P. Nelson, B. D. Carroll. </author> <title> Tutorial: Fault-Tolerant Computing. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: 22 7.50 3 Intel 87C196CA 16 20 2.0 0.38 5 Dallas DS87C520 8 33 8.3 0.15 55 Microchip PIC16C73A 8 20 5 0.06 83 CHALLENGES Four decades of fault-tolerance research for space applications provides the designer with a variety of ways to make a microcontroller robust in the space environment <ref> [3] </ref>. Balancing cost and reliability is nontrivial. An obvious choice is redundant microcontrollers running identical real-time applications software with lockstep comparison or voting for error detection and correction.
Reference: [4] <author> S. G. Frison, J. H. Wensley. </author> <title> Interactive Consistency and Its Impact on TMR Systems in Dig. </title> <booktitle> Int. Symp. Fault Tolerant Computing, </booktitle> <address> FTCS-12, </address> <month> June </month> <year> 1982, </year> <pages> pp. 228-233. </pages>
Reference-contexts: Some of these design problems include: Interactive Consistency. Consistent computations for voting or comparison must be guaranteed even though individual microcontrollers may read different values for the same input. <ref> [4] </ref> Error Latency. Error latency should be bounded, but there is no access to the internals of the microcontroller and there is essentially no internal checking not even memory parity. Thus, periodic internal testing must be interleaved with normal operation. Circuit Isolation.
Reference: [5] <author> D.A. Rennels, D.W. Caldwell, R. Hwang, M. Mesarina. </author> <title> A Fault-Tolerant Embedded Microcontroller Testbed. </title> <booktitle> 1997 Pacific Rim Fault-Tolerance Conference, </booktitle> <address> Taipei, Taiwan. </address> <month> 15-16 Dec </month> <year> 1997. </year> <title> [6] 1996 New Releases Data Book, Volume V. Maxim Integrated Products, </title> <year> 1996. </year>
Reference-contexts: The other, described herein, is tailored toward spacecraft applications; the focus is single-event effects rather than random parts failures, trying to minimize the resources consumed by fault-tolerance features. Space limitations preclude a detailed description of the software fault-tolerance implementation (to be presented in <ref> [5] </ref>). The remainder of this paper describes the physical architecture necessary to support such software algorithms.
References-found: 5

