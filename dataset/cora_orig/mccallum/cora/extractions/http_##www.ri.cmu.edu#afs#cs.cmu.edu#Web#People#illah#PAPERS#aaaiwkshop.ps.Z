URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/Web/People/illah/PAPERS/aaaiwkshop.ps.Z
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/Web/People/illah/lab.html
Root-URL: 
Email: illah@cs.cmu.edu  
Title: Using Abstraction to Interleave Planning and Execution  
Author: Illah R. Nourbakhsh 
Address: Pittsburgh, Pennsylvania 15213  
Affiliation: Robotics Institute Carnegie Mellon University  
Abstract: Abstraction is a technology that enables interleaved planning and execution, the much sought-after quality of a robot architecture that can both plan and act (and plan and act and plan) in short order. This paper presents a definition for Abstraction and for an architecture composed of a collection of abstractions, or an Abstraction System. We span both the theoretical extreme of formally defining abstraction and the empirical extreme of implementing an Abstraction System on a real-world robot and collecting compelling experimental results. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Donald, B. </author> <year> 1989. </year> <title> Error Detection and Recovery in Robotics. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 336. </volume> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Instances of this particular use of abstraction can be found in both the motion planning and manipulation literature. <ref> (Donald 1989) </ref>, (Lazanas & Latombe 1995) serve as two examples of the motion planning communitys use of TC actions. <p> This is precisely a form of state abstraction, as formalized by our definition of abstraction. Indeed, Bruce Donald <ref> (Donald 1989) </ref> also demonstrates this form of abstraction through his critical slice mechanism, which is a method for discretization while preserving soundness and completeness. 6 Conclusions We have presented a general, formal framework for representing and reasoning about abstraction systems.
Reference: <author> Erdmann, M. </author> <year> 1990. </year> <title> On Probabilistic Strategies for Robot Tasks. </title> <type> Technical Report #1155, </type> <institution> Massachusetts Institute of Technology. </institution>
Reference-contexts: This surjective mapping of states, known as State Abstraction, is fully general. Even in the case of continuous worlds, volume-based reasoning can reduce representation requirements to finite degrees, thereby allowing this definition to function without difficulty <ref> (Erdmann 1990) </ref>. Consider Figure 1. For the security robot shown, an abstract space can completely ignore the position of the robot, differentiating world state only on the basis of the security of areas on the robots map.
Reference: <author> Etzioni, O., Hanks, S., Weld, D., Draper, D., Lesh, </author> <title> N. </title>
Reference: <author> And Williamson, M. </author> <year> 1992. </year> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proceedings of the 3 rd International Conference on Principles of Knowledge Representation and Reasoning , pp. </booktitle> <pages> 115-125. </pages>
Reference: <author> Genesereth, M. </author> <year> 1993. </year> <note> Discrete Systems. Course notes for CS 222. </note> <institution> Stanford, CA: Stanford University. </institution>
Reference-contexts: P P -PPEEEE-PPEEEE-PPPEEEEEE-PPEEEEE-PEEE-PPEEEEPPEEEE and E indicates execution. The lowest row is the ground problem space, which is why it includes execution units. The next two higher rows are abstract search spaces. useful tool for describing the overall, observable behavior of the autonomous system <ref> (Genesereth 1993) </ref>. At the ground level, an observer would see the autonomous system executing actions in groups, with noops in between 2 .
Reference: <author> Holte, R., Mkadmi, T., Zimmer, R. and MacDonald, A. </author> <year> 1996. </year> <title> Speeding Up Problem Solving by Abstraction: A Graph Oriented Approach. </title> <journal> Artificial Intelligence </journal> . 
Reference-contexts: Particular instances of abstraction can be found in early planning literature (Sacerdoti 1974), while more recent, formal discourse in the planning community has led to crisp definitions of abstraction <ref> (Holte et al. 1996) </ref>. The most elemental ingredient of abstraction is a representational transformation. An abstraction can perform a transformation on the original search space, yielding a new, less complex search space in which discrimination between (irrelevant) details has been removed. <p> compelling result, for it shows that a practical, implementable architecture can be sufficiently formal as to attain well-behaved and desirable mathematical properties. 5 Related Work The majority of research in the area of abstraction has focused on the speedup provided by abstraction, via subgoaling, in the context of planning only <ref> (Holte et al. 1996) </ref>, (Knoblock 1994). Although analysis of such speedup is possible using the abstraction system we have defined here, we have chosen instead to concentrate on producing a methodology that allows abstraction to be leveraged into the interleaving of planning and execution.
Reference: <author> Knoblock, C. </author> <year> 1994. </year> <title> Automatically generating abstractions for planning. </title> <booktitle> Artificial Intelligence , 68(2). </booktitle>
Reference-contexts: A popular conclusion is to generalize to the Abstraction Hierarchy, which simply defines abstractions recursively to create a linearly ordered set of problem spaces ranging from the most abstract to the ground problem space (Sacerdoti 1974), <ref> (Knoblock 1994) </ref>. The computational gains of doing abstraction can be shown to carry over to this recursive case of Abstraction Hierarchies; however, one important shortcoming has led us to an alternative. Abstraction is about strategic simplification. <p> shows that a practical, implementable architecture can be sufficiently formal as to attain well-behaved and desirable mathematical properties. 5 Related Work The majority of research in the area of abstraction has focused on the speedup provided by abstraction, via subgoaling, in the context of planning only (Holte et al. 1996), <ref> (Knoblock 1994) </ref>. Although analysis of such speedup is possible using the abstraction system we have defined here, we have chosen instead to concentrate on producing a methodology that allows abstraction to be leveraged into the interleaving of planning and execution.
Reference: <author> Lazanas, A. and Latombe, J.-C. </author> <year> 1995. </year> <title> Motion planning with uncertainty: a landmark approach. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 76(1-2): 287-317. </pages>
Reference-contexts: Instances of this particular use of abstraction can be found in both the motion planning and manipulation literature. (Donald 1989), <ref> (Lazanas & Latombe 1995) </ref> serve as two examples of the motion planning communitys use of TC actions. The TC, or termination condition action assumes that actions are durative and Assuming (1) the world is static, and (2) you may have to wait a long, long time. have associated termination criteria.
Reference: <author> Lozano-Perez, T., Mason, M. and Taylor, R. </author> <year> 1984. </year> <title> Automatic Synthesis of Fine-Motion Strategies for Robots. </title> <journal> International Journal of Robotics Research, </journal> <volume> 3(1) </volume> <pages> 3-24. </pages>
Reference: <author> Nayak, P., Joskowicz, L, Addanki, S. </author> <year> 1992. </year> <title> Automated Model Selection using Context-Dependent Behaviors. </title> <booktitle> In Proceedings, Tenth National Conference on Artificial Intelligence. </booktitle> <publisher> AAAI Press. </publisher>
Reference-contexts: In this and in other cases, it is important to note that it is not possible to transform this partial order into any desirable total orderthe problem is truly a partial-order one 1 Creating sets of models with partial-order relationships between them is not new. For example, <ref> (Nayak et al. 1992) </ref> used partial orders of models in the context of model-based reasoning and diagnosis. Here, we apply There is added complexity that we will not describe here: in partial-order systems it is important to guarantee that consistent state-mapping occurs via all paths through the abstract spaces.
Reference: <author> Nourbakhsh, I. </author> <year> 1997. </year> <title> Interleaving Planning and Execution for Autonomous Robots. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston. </address>
Reference-contexts: It is important to note that this simple example fits the formally crisp concept of sound abstraction defined above. This intuitive approach to using abstraction is grounded in sufficient formal detail to enable provable properties for the system as a whole <ref> (Nourbakhsh 1997) </ref>. 2 Abstraction Systems A single level of abstraction usually does not suffice for any but the most trivial of problems. <p> This self-consistency property can be formalized and is necessary if soundness and completeness is to be proven. For details, see <ref> (Nourbakhsh 1997) </ref>. <p> Balin. The ground problem space captures all relevant details of the scenario. The scenario is quite complex, resulting in more than 10 9 possible states at this level, 8 possible low-level actions and 32 possible perceptual input vectors, or percepts <ref> (Nourbakhsh 1997) </ref>. Clearly, we succeeded in creating an unwieldy ground problem space in the hopes that abstraction would mitigate the complexity of searching this space. As one travels up the 4-deep abstraction system, the complexity of the search spaces is diminished rapidly.
Reference: <author> Olawsky, D., Krebsbach, K. And Gini, M. </author> <year> 1993. </year> <title> An Analysis of Sensor-Based Task Planning. </title> <type> Technical Report #93-94. </type> <address> Minneapolis, </address> <publisher> Minn.: Academic. </publisher>
Reference: <author> Sacerdoti, E. </author> <year> 1974. </year> <title> Planning in a hierarchy of abstraction spaces. </title> <booktitle> Artificial Intelligence , 5 </booktitle> <pages> 115-135. </pages>
Reference-contexts: 1 What is Abstraction? Abstraction is a term that has been used by many to denote some strategic form of problem simplification. Particular instances of abstraction can be found in early planning literature <ref> (Sacerdoti 1974) </ref>, while more recent, formal discourse in the planning community has led to crisp definitions of abstraction (Holte et al. 1996). The most elemental ingredient of abstraction is a representational transformation. <p> A popular conclusion is to generalize to the Abstraction Hierarchy, which simply defines abstractions recursively to create a linearly ordered set of problem spaces ranging from the most abstract to the ground problem space <ref> (Sacerdoti 1974) </ref>, (Knoblock 1994). The computational gains of doing abstraction can be shown to carry over to this recursive case of Abstraction Hierarchies; however, one important shortcoming has led us to an alternative. Abstraction is about strategic simplification.
References-found: 13

