URL: http://vibes.cs.uiuc.edu/Publications/Papers/MASCOTS96.ps.gz
Refering-URL: http://vibes.cs.uiuc.edu/Publications/publications.htm
Root-URL: http://www.cs.uiuc.edu
Title: I/O, Performance Analysis, and Performance Data Immersion  
Author: Daniel A. Reed Christopher L. Elford Tara Madhyastha Will H. Scullin Ruth A. Aydt Evgenia Smirni 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: A large and important class of national challenge applications are irregular, with complex, data dependent execution behavior, and dynamic, with time varying resource demands. We believe the solution to the performance optimization conundrum is integration of dynamic performance instrumentation and on-the-fly performance data reduction with configurable, malleable resource management algorithms, and a real-time adaptive control mechanism that automatically chooses and configures resource management algorithms based on application request patterns and observed system performance. Within the context of parallel input/output optimization, we describe the components of such a closed-loop control system based on the Pablo performance analysis environment, a portable parallel file system (PPFS), and virtual environments for study of dynamic performance data and interactive control of file system policies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adve, V. S., Mellor-Crummey, J., Ander-son, M., Kennedy, K., Wang, J., and Reed, D. A. </author> <title> An Integrated Compilation and Performance Analysis Environment for Data Parallel Programs. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: This Pablo software infrastructure has been used as a basis for a portion of Intel's performance analysis tools on the Intel Paragon XP/S [19] and has been integrated with data parallel compilers to study the performance of Fortran D and HPF codes <ref> [1] </ref>. <p> Since its development, we have retargeted the Pablo software to study application input/output patterns [2], World Wide Web access patterns [6], data parallel languages <ref> [1] </ref>, and parallel file system policies [5]. One of the keys to the Pablo environment's adaptability has been the inclusion of a self-defining data format (SDDF). SDDF data streams consists of a group of record descriptors and record instances. <p> The function of such extensions can range from simple matching of procedure entry/exit records for computing procedure invocation lifetimes to sophisticated calculation of input/output activity histograms based on input/output activity traces or correlation of dynamic program behavior with data parallel source code <ref> [1] </ref>. Finally, the ability to extract performance data via several mechanisms (e.g., files or network sockets) has enabled a variety of data analysis modes.
Reference: [2] <author> Crandall, P. E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> Characterization of a Suite of Input/Output Intensive Applications. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: 1 Introduction It is increasingly clear that a large and important class of national challenge applications are irregular, with complex, data dependent execution behavior, and dynamic, with time varying resource demands. For example, recent studies of application input/output behavior <ref> [2] </ref> showed that tuning file system policies to exploit knowledge of application access patterns can increase performance by more than an order of magnitude [5]. <p> Based on this thesis, we describe the ongoing integration of the Pablo performance analysis environment [15, 14, 16] with input/output analysis software <ref> [2] </ref>, flexible parallel file system policies [5], immersive virtual environments for interactive file system policy selection and optimization [18, 20], and an infrastructure for automatic classification of input/output behavior [8]. <p> Since its development, we have retargeted the Pablo software to study application input/output patterns <ref> [2] </ref>, World Wide Web access patterns [6], data parallel languages [1], and parallel file system policies [5]. One of the keys to the Pablo environment's adaptability has been the inclusion of a self-defining data format (SDDF). SDDF data streams consists of a group of record descriptors and record instances. <p> summaries; they define a summary over the accesses to a file region. 3.2 A Characterization Example During the past two years, we and others have used the Pablo input/output analysis software to study the behavior of a wide variety of parallel applications on the Intel Paragon XP/S and IBM SP/2 <ref> [2] </ref>. These applications represent a snapshot of current input/output practice on scalable parallel machines and reflect the developers' input/output design choices based on perceived and actual limitations of available input/output systems. <p> In particular, our characterization study <ref> [2] </ref> has shown that parallel applications exhibit a wide variety of input/output request patterns, with both very small and very large request sizes, sequential and non-sequential access, and a variety of temporal variations.
Reference: [3] <author> Cruz-Neira, C., D.J.Sandin, and DeFanti, T. </author> <title> Surround-Screen Projection-Based Virtual Reality: </title> <booktitle> The Design and Implementation of the CAVE. In SIGGRAPH '93 Proceedings (Aug. </booktitle> <year> 1993), </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: By exploiting the Pablo environment's support for real-time data extraction, we have developed an im-mersive virtual environment, called Avatar [20, 18], for real-time, three-dimensional display of dynamic performance data. Avatar operates with (a) a head-mounted display and tracker, (b) the CAVE <ref> [3] </ref> virtual reality theater, or (c) a workstation display with stereo glasses.
Reference: [4] <author> Eisenhauer, G., Gu, W., Schwan, K., and Mallavarupu, N. </author> <title> Falcon | Toward Interactive Parallel Programs: the Online Steering of a Molecular Dynamic Program. </title> <booktitle> In Proceedings of the Third International Symposium on High-Performance Distributed Computing (Aug. </booktitle> <year> 1994). </year>
Reference-contexts: Leblanc [7] has developed an adaptive real-time system for robotic control that consists of a multiprocessor executing a group of adaptive cognitive tasks. More recently, Schwan <ref> [4] </ref> has developed an adaptive control mechanism for a molecular dynamics code and an atmospheric modeling code on the KSR-1 that allows users to steer application load distribution and to automatically adjust thread locking policies based on expected synchronization delay.
Reference: [5] <author> Huber, J. V., Elford, C. L., Reed, D. A., Chien, A. A., and Blumenthal, D. S. </author> <title> PPFS: </title>
Reference-contexts: For example, recent studies of application input/output behavior [2] showed that tuning file system policies to exploit knowledge of application access patterns can increase performance by more than an order of magnitude <ref> [5] </ref>. Unfortunately, the space of possible performance optimizations is large and non-convex, and the best match of application and resource management technique is seldom obvious a priori. <p> Based on this thesis, we describe the ongoing integration of the Pablo performance analysis environment [15, 14, 16] with input/output analysis software [2], flexible parallel file system policies <ref> [5] </ref>, immersive virtual environments for interactive file system policy selection and optimization [18, 20], and an infrastructure for automatic classification of input/output behavior [8]. <p> Since its development, we have retargeted the Pablo software to study application input/output patterns [2], World Wide Web access patterns [6], data parallel languages [1], and parallel file system policies <ref> [5] </ref>. One of the keys to the Pablo environment's adaptability has been the inclusion of a self-defining data format (SDDF). SDDF data streams consists of a group of record descriptors and record instances. <p> To explore the thesis that performance is best maximized by tuning file system policies to application behavior, we continue to develop a portable parallel file system (PPFS) <ref> [5] </ref> to study the interaction of application access patterns, file caching and prefetching algorithms, and application file data distributions. 4.1 PPFS Architecture PPFS consists of a user-level input/output library that is portable across both parallel systems (the In-tel Paragon XP/S, IBM SP/2, and Convex Exemplar) and workstation clusters. <p> and, as we shall see in x6, to interactively adjust policy parameters. 4.3 PPFS Experiences By carefully choosing PPFS parameters and data management policies to match application access patterns, it is possible to increase application input/output performance by an order of magnitude over that achievable with vendor parallel file systems <ref> [5] </ref>. Intuitively, request aggregation, write behind, prefetching, and caching policies match the application request stream to the capabilities of the underlying file system. <p> As an example of the efficacy of matching file system policies to application access patterns, Figure 3 shows the time to read and write a 64 MB file using a variety of request sizes and numbers of processors on an Intel Paragon XP/S with sixteen I/O nodes; see <ref> [5] </ref> for details. For the read benchmark, each processing node reads the entire file. For the write benchmark, each processing node writes an equal portion of the file, with record level interleaving.
References-found: 5

