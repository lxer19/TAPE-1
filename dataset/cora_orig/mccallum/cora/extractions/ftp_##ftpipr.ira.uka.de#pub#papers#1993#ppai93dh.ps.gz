URL: ftp://ftpipr.ira.uka.de/pub/papers/1993/ppai93dh.ps.gz
Refering-URL: ftp://ftpipr.ira.uka.de/.public_html/papersna.html
Root-URL: 
Title: Initialization of Parallel Branch-and-bound Algorithms  
Author: Dominik Henrich 
Keyword: parallel processing, static load balancing, optimization, combinatorial algorithms, idle times, efficiency  
Address: Kaiserstrasse 12, D-76128 Karlsruhe, Germany,  
Affiliation: Institute for Real-Time Computer Systems and Robotics, Computer Science Department University of Karlsruhe,  
Note: Second International Workshop on Parallel Processing for Artificial Intelligence (PPAI-93), 29. August 1993, Chambery, France. (to be published by Elsevier in  
Email: email: dhenrich@ira.uka.de  
Date: 1994)  
Abstract: Four different initialization methods for parallel Branch-and-bound algorithms are described and compared with reference to several criteria. A formal analysis of their idle times and efficiency follows. It indicates that the efficiency of three methods depends on the branching factor of the search tree. Furthermore, the fourth method offers the best efficiency of the overall algorithm when a centralized OPEN set is used. Experimental results by a PRAM simulation support these statements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abdelrahman T. S. and T. N. Mudge, </author> <year> 1988, </year> <title> "Parallel branch and bound algorithms on hypercube multiprocessors", </title> <booktitle> Proceedings of the 1988 ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pp. 1492-1499. </pages>
Reference-contexts: Direct Initialization The last initialization method described here is the Direct Initialization. It is used for the Vertex-cover problem in ref. [17], and a serial version with - out exploiting the parallelism is mentioned in ref. <ref> [1] </ref>. The main strategy is not to built up the search tree explicitly in the startup phase. Instead, each PE di rectly computes its local (root) node for initialization similarly to the circular method of Selective Initialization.
Reference: [2] <author> El-Dessouki O., Huen W. H., </author> <year> 1980, </year> <title> "Distributed enumeration on network computers", </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 29, </volume> <pages> pp. 818-825. </pages>
Reference-contexts: On the other hand, there is redundant work because many PEs are processing the same nodes and doing identical eval uation. 3.3. Selective Initialization The Selective Initialization is a circular method first introduced by ref. <ref> [2] </ref> and used by ref. [7] later on. It prevents the disadvantages of the Enumeration Initialization by a local node selection strategy of the single PEs. This method starts, analogously to the Enumerative Initialization, with broadcasting the root node over all the PEs. <p> Instead of storing all the succes sors in the OPENsubset, only one node of the succes sors is investigated in the sequel. The selection of this node is done by a circular method, see ref. <ref> [2] </ref>. Thereby, every PE which participates at the B&B algorithm has a unique identifi cation number pu_id. The number of current PEs tak ing the same path up to now is indicated by ncp . <p> Thus, the PEs with no successor will become idle until they enter the working phase. Altogether, this method has slightly more idle times as the previous two. 1 The calculation of delta is a corrected version of the formula in <ref> [2] </ref> 7 3.4. Direct Initialization The last initialization method described here is the Direct Initialization. It is used for the Vertex-cover problem in ref. [17], and a serial version with - out exploiting the parallelism is mentioned in ref. [1]. <p> Selective Init. Direct Init. no comm. - + + + no r e d u n d a n c y + -/+ + no idle-times - + -/+ + generality + + + - var. branching + + + - best-first + + - references others [16, 10] <ref> [2, 7] </ref> [ Table 1: Comparison of the four B&B initialization methods 4. Analysis When investigating the different initialization methods, the resulting efficiency of the overall algorithm is of high interest. Most of the criteria of Section 3.5 more or less influence the efficiency.
Reference: [3] <author> Huang S.-R and Larry S. Davis, </author> <title> "Parallel Iterative A* Search: An Admissible Distributed Heuristic Search Algorithm", </title> <booktitle> Proceedings of the eleventh International Joint Conference on Artificial Intelligence, </booktitle> <year> 1989, </year> <pages> pp. 23-29. </pages>
Reference: [4] <author> Imai M., Fukumara T., Yoshida Y., </author> <year> 1979, </year> <title> "A paral lelized branch-and-bound algorithm: Implementation and efficiency", </title> <journal> Systems-Computers-Control, </journal> <volume> vol. 10, no. 3, </volume> <pages> pp. 62-70. </pages>
Reference: [5] <author> Janakiram V. K., et al., </author> <year> 1988, </year> <title> "A randomized parallel branch-and-bound algorithm", </title> <booktitle> Int. Jour. of Parallel Programming, </booktitle> <volume> vol. 17, no. 3, </volume> <pages> pp. 277-301. </pages>
Reference: [6] <author> Lai T-H., Sprague A., </author> <year> 1985, </year> <title> "Performance of Parallel Branch-and-Bound Algorithms", </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-34, no. 10, </volume> <pages> pp. 962 - 964, </pages> <institution> MAG Lab pa pers, </institution> <note> no. 33. </note>
Reference: [7] <author> Ma R. P., Tsung F. S., Ma M. H., </author> <year> 1988, </year> <title> "A dynamic load balancer for a parallel branch-and-bound algorithm", </title> <booktitle> Proc. of the 3rd Conf. on Hypercubes Concurrent, Computers, and Applications, </booktitle> <address> Pasadena, CA, </address> <pages> pp. 1505-1513. </pages>
Reference-contexts: On the other hand, there is redundant work because many PEs are processing the same nodes and doing identical eval uation. 3.3. Selective Initialization The Selective Initialization is a circular method first introduced by ref. [2] and used by ref. <ref> [7] </ref> later on. It prevents the disadvantages of the Enumeration Initialization by a local node selection strategy of the single PEs. This method starts, analogously to the Enumerative Initialization, with broadcasting the root node over all the PEs. <p> Selective Init. Direct Init. no comm. - + + + no r e d u n d a n c y + -/+ + no idle-times - + -/+ + generality + + + - var. branching + + + - best-first + + - references others [16, 10] <ref> [2, 7] </ref> [ Table 1: Comparison of the four B&B initialization methods 4. Analysis When investigating the different initialization methods, the resulting efficiency of the overall algorithm is of high interest. Most of the criteria of Section 3.5 more or less influence the efficiency.
Reference: [8] <author> Miller D. L., Pekney J. F., </author> <year> 1989, </year> <title> "Results form al parallel branch-and-bound algorithm for solving large symmetric traveling salesman problems", </title> <journal> Operations Research Letters, </journal> <volume> vol. 8, </volume> <pages> pp. 129-135. </pages>
Reference: [9] <author> Mohan J., </author> <year> 1983, </year> <title> "Experience with two parallel programs solving the traveling salesman problem", </title> <booktitle> Proc. of the Int. Conf. on Parallel Processing, </booktitle> <address> Bellaire, Michigan, </address> <month> Aug. </month> <year> 1983, </year> <pages> pp. 191-193, </pages> <institution> IEEE Comp. Soc., </institution> <address> Washington, D. C. </address>
Reference: [10] <author> Pargas R. P., Wooster E. D., </author> <year> 1988, </year> <title> "Branch-and-bound algorithms on n hypercube", </title> <booktitle> Proc. of the 3rd Conf. on Hypercube, Concurrent Computers, and Applications, </booktitle> <address> Pasadena. </address>
Reference-contexts: Each distribution is combined with a necessary 5 communication over head. Furthermore, many of the PEs are idle and wait - ing to receive a node. 3.2. Enumerative Initialization The second initialization method is very similar to the previous one. It is used by the algorithms in refs. <ref> [16, 10] </ref>. The main difference is the broadcast of the root node to every PE at the beginning of the initialization. Thereafter, each PE has the same node in its OPENsubset. This root node is expanded by each PE according to the main loop of the sequential algorithm. <p> Selective Init. Direct Init. no comm. - + + + no r e d u n d a n c y + -/+ + no idle-times - + -/+ + generality + + + - var. branching + + + - best-first + + - references others <ref> [16, 10] </ref> [2, 7] [ Table 1: Comparison of the four B&B initialization methods 4. Analysis When investigating the different initialization methods, the resulting efficiency of the overall algorithm is of high interest. Most of the criteria of Section 3.5 more or less influence the efficiency.
Reference: [11] <author> Quinn M. J., Deo N., </author> <year> 1986, </year> <title> "An upper bound for the speedup of parallel best-bound branch-and-bound algorithms", </title> <journal> BIT, </journal> <volume> vol. 26, no. 1, </volume> <pages> pp. 35-43. </pages>
Reference: [12] <author> Roucairol C., </author> <year> 1988, </year> <title> "Parallel branch and bound algorithms: An Overwiew", </title> <booktitle> Proc. of the Int. Workshop on Parallel and Distributed Algorithms, Gers, France, </booktitle> <pages> pp. 153-163. </pages>
Reference-contexts: For describing the parallel B&B algorithm solving this optimization problem, we use a common version of the sequential B&B formulation as a basis. In Fig. 1, a formulation in Pascal is stated in ref. <ref> [12] </ref>. Thereby, the initialization is hidden behind a function call and is discussed in detail in the following sections. There are two main data structures on which the single PEs are working. First, a set of nodes, called OPEN, stores the partial problems not yet investi gated.
Reference: [13] <author> Schwan K. and B. Blake and W. Bo and J. Gawkowski, </author> <year> 1989, </year> <title> "Global Data and Control in Multicomputers: Operating Systems Primitives and Experimentation with a Parallel Branch-and-Bound Algorithm", </title> <journal> Concurrency: Practice and Experience, </journal> <volume> vol. 2, </volume> <pages> pp. 191-218, </pages> <note> vol. 1 </note>
Reference: [14] <author> Sprague A. D., </author> <year> 1991, </year> <title> "Wild anomalies in parallel branch-and-bound", </title> <type> Tech. </type> <institution> Rep.91-04, CIS, UAB, Birmingham. </institution>
Reference: [15] <author> Taudes A., Netousek T., </author> <year> 1991, </year> <title> "Implementing branch-and-bound algorithsm on a cluster of workstations", </title> <editor> eds: Grauer M., Pressmar D. B., </editor> <booktitle> Parallel cpmputing and mathematical optimization, Proceedings, </booktitle> <publisher> Springer. </publisher>
Reference: [16] <author> Vornberger O., </author> <year> 1986, </year> <title> "Implementing Brach-and-bound in a ring of processors", </title> <booktitle> Proc. of CONPAR 86, Lecture Notes on Computer Sci. </booktitle> <volume> 237, </volume> <publisher> Springer. </publisher>
Reference-contexts: Each distribution is combined with a necessary 5 communication over head. Furthermore, many of the PEs are idle and wait - ing to receive a node. 3.2. Enumerative Initialization The second initialization method is very similar to the previous one. It is used by the algorithms in refs. <ref> [16, 10] </ref>. The main difference is the broadcast of the root node to every PE at the beginning of the initialization. Thereafter, each PE has the same node in its OPENsubset. This root node is expanded by each PE according to the main loop of the sequential algorithm. <p> Selective Init. Direct Init. no comm. - + + + no r e d u n d a n c y + -/+ + no idle-times - + -/+ + generality + + + - var. branching + + + - best-first + + - references others <ref> [16, 10] </ref> [2, 7] [ Table 1: Comparison of the four B&B initialization methods 4. Analysis When investigating the different initialization methods, the resulting efficiency of the overall algorithm is of high interest. Most of the criteria of Section 3.5 more or less influence the efficiency.
Reference: [17] <author> Vornberger O., </author> <year> 1987, </year> <title> "Load balancing in a network of transputers", </title> <booktitle> Second Int. Workshop on Distributed Algorithms, Amsterdam, </booktitle> <pages> pp. 116-126. </pages>
Reference-contexts: Altogether, this method has slightly more idle times as the previous two. 1 The calculation of delta is a corrected version of the formula in [2] 7 3.4. Direct Initialization The last initialization method described here is the Direct Initialization. It is used for the Vertex-cover problem in ref. <ref> [17] </ref>, and a serial version with - out exploiting the parallelism is mentioned in ref. [1]. The main strategy is not to built up the search tree explicitly in the startup phase.
References-found: 17

