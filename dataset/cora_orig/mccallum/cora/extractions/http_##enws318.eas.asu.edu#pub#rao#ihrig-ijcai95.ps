URL: http://enws318.eas.asu.edu/pub/rao/ihrig-ijcai95.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/prodigy/Web/Mixed-init/Read-group/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: laurie.ihrig@asu.edu rao@asu.edu  
Title: An Explanation-Based Approach to Improve Retrieval in Case-Based Planning  
Author: Laurie Ihrig Subbarao Kambhampati 
Note: Appears in Current Trends in AI Planning: EWSP '95, IOS Press  
Address: Tempe, AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: When a case-based planner is retrieving a previous case in preparation for solving a new similar problem, it is often not aware of the implicit features of the new problem situation which determine if a particular case may be successfully applied. This means that some cases may be retrieved in error in that the case may fail to improve the planner's performance. Retrieval may be incrementally improved by detecting and explaining these failures as they occur. In this paper we provide a definition of case failure for the planner, dersnlp (derivation replay in snlp), which solves new problems by replaying its previous plan derivations. We provide EBL (explanation-based learning) techniques for detecting and constructing the reasons for the failure. We also describe how to organize a case library so as to incorporate this failure information as it is produced. Finally we present an empirical study which demonstrates the effectiveness of this approach in improving the performance of dersnlp.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67:71--112, </volume> <year> 1994. </year> <month> 12 </month>
Reference-contexts: Since a plan failure is explained by a subset of plan constraints, failure explanations are represented in the same manner as a partial plan. dersnlp represents its partial plans as a 6-tuple, hS; O; B; L; E; Ci, where <ref> [1] </ref>: S is the set of actions (step-names) in the plan, each of which is mapped onto an operator in the domain theory. S contains two dummy steps: t I whose effects are the initial state conditions, and t G whose preconditions are the input goals, G. <p> The first was the artificial domain, ( 2 D m S 1 ), originally described in <ref> [1] </ref> and shown in Figure 8. Testing was done on problems which were randomly generated from this domain with the restriction that they always contain the goal G ff .
Reference: [2] <author> J. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. </title> <editor> In Ryszard Michalski, Jaime Carbonell, and Tom M. Mitchell, editors, </editor> <booktitle> Machine Learning: an Artificial Intelligence approach: </booktitle> <volume> Volume 2. Morgan-Kaufman, </volume> <year> 1986. </year>
Reference-contexts: One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems <ref> [2, 16] </ref>. Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [6]. Although we found that replay tends to improve overall performance, its effectiveness depends on retrieving an appropriate case. <p> Finally, in Section 5 we discuss the relationship to previous work in case storage and retrieval. 2 Derivation Replay in Partial-Order Planning Derivational analogy is a case-based planning technique which includes all of the following elements <ref> [2, 16, 17] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by
Reference: [3] <author> A. Francis and S. Ram. </author> <title> A comparative utility analysis of case-based reasoning and control-rule learning systems. </title> <booktitle> In Proceedings of the Workshop on Case-Based Reasoning. AAAI, 1994. </booktitle> <address> Seattle, Washington. </address>
Reference-contexts: As learned information is used as a censor on retrieval rather than as a pruning rule, soundness and completeness of the EBL framework may not be as critical. Furthermore, keeping censors on specific cases avoids the utility problem commonly suffered by EBL systems. See <ref> [13, 8, 3] </ref> for discussions on the issue of the relative tradeoffs offered by case-based and EBL methods in learning to improve planning performance . 6 Conclusion In this paper, we described a framework for a case-based planning system that is able to exploit case failure to improve case retrieval.
Reference: [4] <author> K. Hammond. Chef: </author> <title> A model of case-based planning. </title> <booktitle> In Proceedings AAAI-86, pages 261--271. AAAI, 1986. </booktitle> <address> Philadelphia, Pennsylvania. </address>
Reference-contexts: Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. CHEF <ref> [4] </ref> learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases. In contrast, our approach attempts to improve planning efficiency by concentrating on search failures encountered in plan generation. We integrate replay with techniques adopted from the planning framework provided by snlp+ebl [11].
Reference: [5] <author> K. Hammond. </author> <title> Explaining and repairing plans that fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45:173--228, </volume> <year> 1990. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 16] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 16]. Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [6].
Reference: [6] <author> L. Ihrig and S. Kambhampati. </author> <title> Derivation replay for partial-order planning. </title> <booktitle> In Proceedings AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 16] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 16]. Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [6]. <p> One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 16]. Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp <ref> [6] </ref>. Although we found that replay tends to improve overall performance, its effectiveness depends on retrieving an appropriate case. Often the planner is not aware of the implicit features of the new problem situation which determine if a certain case is applicable. <p> Thanks to Suresh Katukam and Biplav Srivastava for helpful comments. 1 initial state which are relevant to the achievement of those goals <ref> [10, 6] </ref>. If these are elements of the new problem situation then the case is retrieved and reused in solving the new problem. Usually the new problem contains extra goal conditions not covered by the case. <p> With this strategy, control is shifted to the series of instructions provided by the previous derivation, and is returned to from-scratch planning only after all of the valid instructions in the trace have been replayed <ref> [6, 7] </ref>. This means that the plan which is produced through replay, called the skeletal plan, contains all of the constraints that were added on the guidance of the one previous trace.
Reference: [7] <author> L Ihrig and S. Kambhampati. </author> <title> On the relative utility of plan-space vs state-space planning in a case-based framework. </title> <type> Technical Report 94-006, </type> <institution> Department of Computer Science and Engineering, 1994. Arizona State University. </institution>
Reference-contexts: With this strategy, control is shifted to the series of instructions provided by the previous derivation, and is returned to from-scratch planning only after all of the valid instructions in the trace have been replayed <ref> [6, 7] </ref>. This means that the plan which is produced through replay, called the skeletal plan, contains all of the constraints that were added on the guidance of the one previous trace.
Reference: [8] <author> S. Kambhampati. </author> <title> Utility tradeoffs in incremental modification and reuse of plans. </title> <booktitle> In Proc. AAAI Spring Symp. on Computational Considerations in Supporting Incremental Modification and Reuse, </booktitle> <year> 1992. </year>
Reference-contexts: As learned information is used as a censor on retrieval rather than as a pruning rule, soundness and completeness of the EBL framework may not be as critical. Furthermore, keeping censors on specific cases avoids the utility problem commonly suffered by EBL systems. See <ref> [13, 8, 3] </ref> for discussions on the issue of the relative tradeoffs offered by case-based and EBL methods in learning to improve planning performance . 6 Conclusion In this paper, we described a framework for a case-based planning system that is able to exploit case failure to improve case retrieval.
Reference: [9] <author> S. Kambhampati. </author> <title> Exploiting causal structure to control retrieval and refitting during plan reuse. </title> <journal> Computational Intelligence Journal, </journal> <volume> 10(2), </volume> <year> 1994. </year>
Reference-contexts: Retrieval Strategy: Cases were initially retrieved on the basis of a static similarity metric which takes into account the new goals that were covered by the case as well as all of their relevant initial state conditions. The metric was similar to the validation structure-based similarity metric of <ref> [9] </ref> and the foot-printed similarity metric of [16]. Prior studies show it to be a reasonably effective metric. In learning mode, cases were also retrieved on the basis of the same metric. However, in this mode, the failure reasons attached to the case were used to censor its retrieval.
Reference: [10] <author> S. Kambhampati and J. A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55:193--258, </volume> <year> 1992. </year>
Reference-contexts: Thanks to Suresh Katukam and Biplav Srivastava for helpful comments. 1 initial state which are relevant to the achievement of those goals <ref> [10, 6] </ref>. If these are elements of the new problem situation then the case is retrieved and reused in solving the new problem. Usually the new problem contains extra goal conditions not covered by the case. <p> information is available, the improvements gained by utilizing this information are such that they more than offset the 11 added cost entailed in testing failure reasons and retrieving on the basis of failure information. 5 Related Work and Discussion The current work complements and extends earlier treatments of case retrieval <ref> [10, 16, 17] </ref>. Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. CHEF [4] learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases.
Reference: [11] <author> S. Katukam and S. Kambhampati. </author> <title> Learning ebl-based search control rules for partial order planning. </title> <booktitle> In Proceedings AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: These include a method for forming explanations of plan failures in terms of their inconsistent constraints, and regressing these explanations through the planning decisions in the failing search paths <ref> [11] </ref>. These techniques are employed to construct reasons for case failure, which are then used to annotate the case to constrain its future retrieval. <p> We discuss a definition of case failure for dersnlp, and show how dersnlp recovers from the case failures it encounters. Then, in Section 3 we briefly describe the explanation-based learning techniques that we have developed in <ref> [11] </ref>, including the construction of failure explanations, and their regression and propagation up the search tree. We then show how reasons for case failure are constructed using these techniques, and how these failure reasons are used to refine the labeling of cases in the library. <p> Having defined case failure and provided an example, we are now in a position to describe how the planner learns the reasons underlying a case failure. Specifically, we use EBL techniques to accomplish this learning. In the next section, we show how the EBL techniques developed in <ref> [11] </ref> are employed to construct reasons for case failure. 4 Type : ESTABLISHMENT Type : ESTABLISHMENT Kind : NEW STEP Kind : NEW LINK Preconditions : Preconditions : hp 0 ; s 0 i 2 C hp 0 ; s 0 i 2 C Effects : Effects : S 0 = <p> CHEF [4] learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases. In contrast, our approach attempts to improve planning efficiency by concentrating on search failures encountered in plan generation. We integrate replay with techniques adopted from the planning framework provided by snlp+ebl <ref> [11] </ref>. This framework includes methods for constructing conditions for predicting analytical failures in its search space. In this paper, we explain and learn only from analytical failures. However, our approach may be also be extended to explain failures related to plan quality [15].
Reference: [12] <author> J. Koehler. </author> <title> Avoiding pitfalls in case-based planning. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 104--109, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 16] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 16]. Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [6].
Reference: [13] <author> S. Minton. </author> <title> Issues in the design of operator composition systems. </title> <booktitle> In Proceedings of the International conference on Machine Learning, </booktitle> <year> 1990. </year>
Reference-contexts: As learned information is used as a censor on retrieval rather than as a pruning rule, soundness and completeness of the EBL framework may not be as critical. Furthermore, keeping censors on specific cases avoids the utility problem commonly suffered by EBL systems. See <ref> [13, 8, 3] </ref> for discussions on the issue of the relative tradeoffs offered by case-based and EBL methods in learning to improve planning performance . 6 Conclusion In this paper, we described a framework for a case-based planning system that is able to exploit case failure to improve case retrieval.
Reference: [14] <author> J. Mostow and N. Bhatnagar. </author> <title> Failsafe: A floor planner that uses ebg to learn from its failures. </title> <booktitle> In Proceedings IJCAI-87, </booktitle> <pages> pages 249--255, </pages> <year> 1987. </year>
Reference-contexts: This would allow the retrieval mechanism to learn to avoid cases which result in similar bad plans, and thereby improve the quality of the solutions, as well as the planning performance. Although EBL techniques have been previously used to learn from problem-solving failures <ref> [14] </ref>, the goal of EBL has been to construct generalized control rules that can be applied to each new planning decision. Here we use the same analysis to generate case-specific rules for case retrieval.
Reference: [15] <author> A. Perez and J. Carbonell. </author> <title> Control knowledge to improve plan quality. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 323--328, </pages> <year> 1994. </year>
Reference-contexts: This framework includes methods for constructing conditions for predicting analytical failures in its search space. In this paper, we explain and learn only from analytical failures. However, our approach may be also be extended to explain failures related to plan quality <ref> [15] </ref>. If plans are rejected by an independent plan evaluation which identifies a combination of plan constraints which are to be blamed for the quality of the plan, then explanations may be constructed that identify those constraints.
Reference: [16] <author> M. Veloso. </author> <title> Learning by analogical reasoning in general problem solving. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 16] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 16]. Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [6]. <p> One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems <ref> [2, 16] </ref>. Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [6]. Although we found that replay tends to improve overall performance, its effectiveness depends on retrieving an appropriate case. <p> Finally, in Section 5 we discuss the relationship to previous work in case storage and retrieval. 2 Derivation Replay in Partial-Order Planning Derivational analogy is a case-based planning technique which includes all of the following elements <ref> [2, 16, 17] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by <p> The derivation path which leads from the root of the search tree to the final plan in the leaf node thus avoids (or repairs) the failure encountered in replaying the old case. Consider a simple example taken from the logistics transportation domain of <ref> [16] </ref> (See Figure 3a). The goal is to have package OB1 located at the destination location l d . The package is initially at location 3 cost, , of retrieving a trace from the library, as well as the cost, , of validating each of the decisions in the trace. <p> This means that any time a case is replayed that previously solved a goal, G i , through an action A fi i , and G ff as an extra goal not covered by the case, then replay will fail. The logistics transportation domain of <ref> [16] </ref> was adopted for the second set of experiments. Eight packages and one airplane were randomly distributed over four cities. Problem goals represented the task of getting one or more packages to a single destination airport. <p> The metric was similar to the validation structure-based similarity metric of [9] and the foot-printed similarity metric of <ref> [16] </ref>. Prior studies show it to be a reasonably effective metric. In learning mode, cases were also retrieved on the basis of the same metric. However, in this mode, the failure reasons attached to the case were used to censor its retrieval. <p> information is available, the improvements gained by utilizing this information are such that they more than offset the 11 added cost entailed in testing failure reasons and retrieving on the basis of failure information. 5 Related Work and Discussion The current work complements and extends earlier treatments of case retrieval <ref> [10, 16, 17] </ref>. Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. CHEF [4] learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases.
Reference: [17] <author> M. Veloso and J. Carbonell. </author> <title> Derivational analogy in prodigy: Automating case acquisition, storage and utilization. </title> <booktitle> In Machine Learning, </booktitle> <pages> pages 249--278, </pages> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Finally, in Section 5 we discuss the relationship to previous work in case storage and retrieval. 2 Derivation Replay in Partial-Order Planning Derivational analogy is a case-based planning technique which includes all of the following elements <ref> [2, 16, 17] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by <p> information is available, the improvements gained by utilizing this information are such that they more than offset the 11 added cost entailed in testing failure reasons and retrieving on the basis of failure information. 5 Related Work and Discussion The current work complements and extends earlier treatments of case retrieval <ref> [10, 16, 17] </ref>. Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. CHEF [4] learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases.
References-found: 17

