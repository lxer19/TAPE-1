URL: ftp://ftp.cs.arizona.edu/people/hiltunen/srds12.ps.Z
Refering-URL: http://www.cs.arizona.edu/cactus/public.html
Root-URL: http://www.cs.arizona.edu
Title: An Approach to Constructing Modular Fault-Tolerant Protocols  
Author: Matti A. Hiltunen and Richard D. Schlichting 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science University of Arizona  
Abstract: Modularization is a well-known technique for simplifying complex software. Here, an approach to modularizing fault-tolerant protocols such as reliable multicast and membership is described. The approach is based on implementing a protocol's individual properties as separate micro-protocols, and then combining selected micro-protocols using an event-driven software framework; a system is constructed by composing these frameworks with traditional network protocols using standard hierarchical techniques. In addition to simplifying the software, this model helps clarify the dependencies among properties of fault-tolerant protocols, and makes it possible to construct systems that are customized to the specifics of the application or underlying architecture. An example involving reliable group multicast is given, together with a description of a prototype implementation using the SR concurrent programming language. An implementation based on the x-kernel and RT-Mach is also underway. 
Abstract-found: 1
Intro-found: 1
Reference: [ADKM92] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Proceedingsof the 22nd International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <address> Boston, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: These range from the V-system [CZ85], which provides only unreliable multicast, to a number of more recent systems, like Consul, ISIS [BSS91], and Transis <ref> [ADKM92] </ref>, which provide reliable multicasts with a number of different ordering properties. Our approach to constructing these protocols, then, is based on identifying these properties and implementing each as a micro-protocol.
Reference: [AOC + 88] <author> Gregory R. Andrews, Ronald A. Olsson, Michael A. Coffin, Irving Elshoff, Kelvin Nilsen, Titus Purdin, and Gregg Townsend. </author> <title> An overview of the SR language and implementation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(1) </volume> <pages> 51-86, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Finally, a system is constructed by composing composite and simple protocols using standard hierarchical protocol composition techniques. A high-level prototype of the software framework for composite protocols has been built using the SR concurrent programming language <ref> [AOC + 88] </ref>. Work is also underway on an implementation based on the x-kernel, a software infrastructure for composing traditional network protocols [HP91], and RT-Mach, a version of the Mach microkernel designed for execution of real-time programs [TNR90, TN91]. <p> request : : : end if end if register (SEND NET,send reliability) # initialization code register (REC NET,receive reliability) register (SITE FAILURE,failure handler) register (SITE RECOVERY,recovery handler) end Reliability 4.4 SR Prototype Implementation Prototype versions of the above framework and micro-protocols have been implemented using the SR concurrent programming language <ref> [AOC + 88] </ref>. In the prototype, each machine hosting members of the multicast group is implemented as an SR virtual machine.
Reference: [Bla91] <author> A. Black. </author> <title> Understanding transations in an operating system context. </title> <journal> ACM Operating Systems Review, </journal> <volume> 20(1) </volume> <pages> 73-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Our model, on the other hand, is more general since it offers a general event mechanism, general shared data structures, and configuration of any number of components (micro-protocols). Finally, the goals put forth in <ref> [Bla91] </ref> in the area of transaction processing are related to ours in the sense that it attempts to identify similar orthogonal properties, but for transactions rather than fault-tolerant protocols. Future work will concentrate along several lines of investigation.
Reference: [BSS91] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast <ref> [BSS91, CM84, CASD85, VM90] </ref>, membership [Cri91a, EL90, KGR91, MPS92b] and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols. <p> These range from the V-system [CZ85], which provides only unreliable multicast, to a number of more recent systems, like Consul, ISIS <ref> [BSS91] </ref>, and Transis [ADKM92], which provide reliable multicasts with a number of different ordering properties. Our approach to constructing these protocols, then, is based on identifying these properties and implementing each as a micro-protocol.
Reference: [CASD85] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the Fifteenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, MI, </address> <month> Jun </month> <year> 1985. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast <ref> [BSS91, CM84, CASD85, VM90] </ref>, membership [Cri91a, EL90, KGR91, MPS92b] and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols.
Reference: [CM84] <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> Aug </month> <year> 1984. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast <ref> [BSS91, CM84, CASD85, VM90] </ref>, membership [Cri91a, EL90, KGR91, MPS92b] and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols.
Reference: [Cri91a] <author> F. Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast [BSS91, CM84, CASD85, VM90], membership <ref> [Cri91a, EL90, KGR91, MPS92b] </ref> and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols.
Reference: [Cri91b] <author> F. Cristian. </author> <title> Understanding fault-tolerant distributed systems. </title> <journal> Communications of ACM, </journal> <volume> 34(2) </volume> <pages> 56-78, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: Here, a micro-protocol M P 1 is said to depend on another micro-protocol M P 2 if the correctness of M P 1 relies on the correctness of M P 2 <ref> [Cri91b] </ref>. Direct interactions between micro-protocols, such as caused by triggering and fielding events, define explicit dependencies between micro-protocols. Unfortunately, all dependencies are not as explicit; often there are other compatibility issues that affect how and when micro-protocols can be combined.
Reference: [CZ85] <author> D. Cheriton and W. Zwaenepoel. </author> <title> Distributed process groups in the V kernel. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: The specifics of the SR prototype are addressed in Section 4.3. 4.1 Multicast Properties When surveying existing multicast systems, prototypes, and algorithms, it is clear that there is a large amount of variance in the specific properties that they provide to the user. These range from the V-system <ref> [CZ85] </ref>, which provides only unreliable multicast, to a number of more recent systems, like Consul, ISIS [BSS91], and Transis [ADKM92], which provide reliable multicasts with a number of different ordering properties. Our approach to constructing these protocols, then, is based on identifying these properties and implementing each as a micro-protocol.
Reference: [EL90] <author> P. D. Ezhilchelvan and R. Lemos. </author> <title> A robust group membership algorithm for distributed real-time system. </title> <booktitle> In Proceedings of the Eleventh Real-Time Systems Symposium, </booktitle> <pages> pages 173-179, </pages> <address> Lake Buena Vista, Florida, </address> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast [BSS91, CM84, CASD85, VM90], membership <ref> [Cri91a, EL90, KGR91, MPS92b] </ref> and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols.
Reference: [Gol92] <author> R. Golding. </author> <title> Weak-Consistency Group Communication and Membership. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of California, </institution> <address> Santa Cruz, Santa Cruz, CA, </address> <year> 1992. </year>
Reference-contexts: The ANSA system [OOW91] allows the user to customize the abstractions provided by the system to a certain extent; for example, it provides selective group transparencies, which allow certain system modules to be replaced by user-written modules. In <ref> [Gol92] </ref>, an approach to building group communication systems is described. The approach is based on having four fixed componentsthe application, message delivery, message ordering, and group membership that communicate through three shared data structuresa message log, message summary information structure, and group view.
Reference: [HP91] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: A high-level prototype of the software framework for composite protocols has been built using the SR concurrent programming language [AOC + 88]. Work is also underway on an implementation based on the x-kernel, a software infrastructure for composing traditional network protocols <ref> [HP91] </ref>, and RT-Mach, a version of the Mach microkernel designed for execution of real-time programs [TNR90, TN91]. This research is a natural continuation of our use of modularization in Consul [Mis92, Mis91], a software platform that supports the building of fault-tolerant distributed programs structured according to the state-machine approach [Sch90].
Reference: [JZ90] <author> D. Johnson and W. Zwaenepoel. </author> <title> Recovery in distributed systems using optimistic message logging and checkpointing. </title> <journal> Journal of Algorithms, </journal> <pages> pages 462-491, </pages> <year> 1990. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast [BSS91, CM84, CASD85, VM90], membership [Cri91a, EL90, KGR91, MPS92b] and recovery <ref> [JZ90, KT87, SY85] </ref>. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols. In addition, highly modular implementations can serve as the basis for configuring domain-specific software that is customized to the needs of a given application.
Reference: [KGR91] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <editor> In A. Avizienis and J.C. Laprie, editors, </editor> <booktitle> Dependable Computing for Critical Applications, </booktitle> <pages> pages 411-429. </pages> <publisher> Springer-Verlag, Wien, </publisher> <year> 1991. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast [BSS91, CM84, CASD85, VM90], membership <ref> [Cri91a, EL90, KGR91, MPS92b] </ref> and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols. <p> For example, our membership micro-protocol uses causally ordered reliable multicasts for reaching agreement [MPS92b], and so depends on the micro-protocols implementing those properties. In contrast, membership services such as <ref> [KGR91] </ref> depend instead on totally ordered reliable multicasts. The net result of these dependencies is that configuring a system is not as simple as just selecting micro-protocols.
Reference: [KT87] <author> R. Koo and S. Toueg. </author> <title> Checkpointing and rollback-recovery for distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(1):23-31, </volume> <month> Jan </month> <year> 1987. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast [BSS91, CM84, CASD85, VM90], membership [Cri91a, EL90, KGR91, MPS92b] and recovery <ref> [JZ90, KT87, SY85] </ref>. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols. In addition, highly modular implementations can serve as the basis for configuring domain-specific software that is customized to the needs of a given application.
Reference: [Lap92] <author> J. C. Laprie, </author> <title> editor. Dependability: Basic Concepts and Terminology. </title> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1992. </year>
Reference: [Mis91] <author> S. Mishra. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: Work is also underway on an implementation based on the x-kernel, a software infrastructure for composing traditional network protocols [HP91], and RT-Mach, a version of the Mach microkernel designed for execution of real-time programs [TNR90, TN91]. This research is a natural continuation of our use of modularization in Consul <ref> [Mis92, Mis91] </ref>, a software platform that supports the building of fault-tolerant distributed programs structured according to the state-machine approach [Sch90]. This paper is organized as follows.
Reference: [Mis92] <author> S. Mishra. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <type> Technical Report 92-06, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1992. </year>
Reference-contexts: Work is also underway on an implementation based on the x-kernel, a software infrastructure for composing traditional network protocols [HP91], and RT-Mach, a version of the Mach microkernel designed for execution of real-time programs [TNR90, TN91]. This research is a natural continuation of our use of modularization in Consul <ref> [Mis92, Mis91] </ref>, a software platform that supports the building of fault-tolerant distributed programs structured according to the state-machine approach [Sch90]. This paper is organized as follows.
Reference: [MPS92a] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Experience with modularity in Consul. </title> <type> Technical Report 92-25, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1992. </year>
Reference-contexts: Recovery implements replica recovery using a combination of checkpoint and message replay. As described more fully elsewhere <ref> [MPS92a, MPS93] </ref>, part of the reason for building Consul was to test whether it was possible to build a fault-tolerant system of this type in a modular manner using traditional network protocol composition techniques.
Reference: [MPS92b] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A membership protocol based on partial order. </title> <editor> In J. F. Meyer and R. D. Schlichting, editors, </editor> <booktitle> Dependable Computing for Critical Applications 2, </booktitle> <pages> pages 309-331. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast [BSS91, CM84, CASD85, VM90], membership <ref> [Cri91a, EL90, KGR91, MPS92b] </ref> and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols. <p> It is also important to note that these dependencies do not represent inherent dependencies between the properties implemented by micro-protocols, but rather just dependencies resulting from our particular realization. For example, our membership micro-protocol uses causally ordered reliable multicasts for reaching agreement <ref> [MPS92b] </ref>, and so depends on the micro-protocols implementing those properties. In contrast, membership services such as [KGR91] depend instead on totally ordered reliable multicasts. The net result of these dependencies is that configuring a system is not as simple as just selecting micro-protocols.
Reference: [MPS93] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Modularity in the design and implementation of Consul. </title> <booktitle> In Proceedings of the First IEEE Symposium on Autonomous Decentralized Systems, </booktitle> <address> Kawasaki, Japan, </address> <month> March </month> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: Recovery implements replica recovery using a combination of checkpoint and message replay. As described more fully elsewhere <ref> [MPS92a, MPS93] </ref>, part of the reason for building Consul was to test whether it was possible to build a fault-tolerant system of this type in a modular manner using traditional network protocol composition techniques.
Reference: [OOW91] <author> M. Olsen, E. Oskiewicz, and J. Warne. </author> <title> A model for interface groups. </title> <booktitle> In Proceedings of the Tenth Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 98-107, </pages> <address> Pisa, Italy, </address> <month> Sep </month> <year> 1991. </year>
Reference-contexts: Other projects in the area of fault-tolerant computing have also explored use of modularization. The ANSA system <ref> [OOW91] </ref> allows the user to customize the abstractions provided by the system to a certain extent; for example, it provides selective group transparencies, which allow certain system modules to be replaced by user-written modules. In [Gol92], an approach to building group communication systems is described.
Reference: [PBS89] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlicht-ing. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: Figure 1 illustrates the specific protocols in the system and how they are configured using the x-kernel. Psync <ref> [PBS89] </ref> realizes the functionality of a partially (or causally) ordered reliable multicast, while Order transforms that into either a total or semantic-dependent order.
Reference: [PSB + 88] <author> D. Powell, D. Seaton, G. Bonn, P. Verissimo, and F. Waeselynk. </author> <title> The Delta-4 approach to dependability in open distributed computing systems. </title> <booktitle> In Proceedings of the Eighteenth Symposium on Fault-Tolerant Computing, </booktitle> <address> Tokyo, </address> <month> Jun </month> <year> 1988. </year>
Reference-contexts: All other events, like membership changes, are defined and triggered by micro-protocols. 4.3 Micro-protocols Our current suite of micro-protocols are based on the assumptions that the network is asynchronous and that machines experience only fail-silent (or crash) failures where the processor halts and all of volatile storage is lost <ref> [PSB + 88] </ref>. Moreover, we assume that a failed process is removed from the group membership while it is down, but may join the group again after recovery.
Reference: [Sch90] <author> F. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> Dec </month> <year> 1990. </year>
Reference-contexts: This research is a natural continuation of our use of modularization in Consul [Mis92, Mis91], a software platform that supports the building of fault-tolerant distributed programs structured according to the state-machine approach <ref> [Sch90] </ref>. This paper is organized as follows. In Section 2 we motivate the problem by briefly describing the more traditional Consul model of protocol composition and the problems it causes for this type of software, and then provide an overview of our approach.
Reference: [SY85] <author> R. Strom and S. Yemini. </author> <title> Optimistic recovery in distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> Aug </month> <year> 1985. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast [BSS91, CM84, CASD85, VM90], membership [Cri91a, EL90, KGR91, MPS92b] and recovery <ref> [JZ90, KT87, SY85] </ref>. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols. In addition, highly modular implementations can serve as the basis for configuring domain-specific software that is customized to the needs of a given application.
Reference: [TN91] <author> H. Tokuda and T. Nakajima. </author> <title> Evaluation of real-time synchronization in Real-Time Mach. </title> <booktitle> In Proceedings of the USENIX 1991 Mach Workshop, </booktitle> <month> Oct </month> <year> 1991. </year>
Reference-contexts: Work is also underway on an implementation based on the x-kernel, a software infrastructure for composing traditional network protocols [HP91], and RT-Mach, a version of the Mach microkernel designed for execution of real-time programs <ref> [TNR90, TN91] </ref>. This research is a natural continuation of our use of modularization in Consul [Mis92, Mis91], a software platform that supports the building of fault-tolerant distributed programs structured according to the state-machine approach [Sch90]. This paper is organized as follows.
Reference: [TNR90] <author> H. Tokuda, T. Nakajima, and P. Rao. </author> <title> Real-Time Mach: Towards predictable real-time systems. </title> <booktitle> In Proceedings of the USENIX 1990 Mach Workshop, </booktitle> <month> Oct </month> <year> 1990. </year>
Reference-contexts: Work is also underway on an implementation based on the x-kernel, a software infrastructure for composing traditional network protocols [HP91], and RT-Mach, a version of the Mach microkernel designed for execution of real-time programs <ref> [TNR90, TN91] </ref>. This research is a natural continuation of our use of modularization in Consul [Mis92, Mis91], a software platform that supports the building of fault-tolerant distributed programs structured according to the state-machine approach [Sch90]. This paper is organized as follows.
Reference: [Ver90] <author> P. Verrissimo. </author> <title> Real-time data management with clockless reliable broadcast protocols. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 20-24, </pages> <address> Houston, TX, </address> <month> Nov </month> <year> 1990. </year>
Reference-contexts: These facilities are especially useful for constructing clock-driven systems in which many of the algorithms are based on executing certain actions at specified times <ref> [Ver90] </ref>. 3.3 Framework The framework provides an infrastructure for composing micro-protocols in parallel to form a composite protocol. The two major components of this infrastructure are provisions for shared data and the event mechanism.
Reference: [VM90] <author> P. Verissimo and J. Marques. </author> <title> Reliable broadcast for fault-tolerance on local computer networks. </title> <booktitle> In Proceedings of the Ninth Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 54-63, </pages> <address> Huntsville, AL, </address> <month> Oct </month> <year> 1990. </year>
Reference-contexts: Hiltunen also supported in part by Suomen Kulttuurirahasto. highly modular versions of fault-tolerant protocols, fundamental abstractions that have proven to be important building blocks for constructing dependable systems. Examples of such fault-tolerant protocols include reliable or atomic multicast <ref> [BSS91, CM84, CASD85, VM90] </ref>, membership [Cri91a, EL90, KGR91, MPS92b] and recovery [JZ90, KT87, SY85]. This use of modularization simplifies system development and maintenance, as well as highlights some of the inherent relationships and dependencies between protocols.
References-found: 30

