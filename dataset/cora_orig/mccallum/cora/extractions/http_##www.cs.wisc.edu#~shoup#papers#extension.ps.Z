URL: http://www.cs.wisc.edu/~shoup/papers/extension.ps.Z
Refering-URL: http://www.cs.wisc.edu/~shoup/papers/
Root-URL: 
Email: email: kaltofen@eos.ncsu.edu  email: sho@zurich.ibm.com  
Phone: 2  
Title: Fast Polynomial Factorization Over High Algebraic Extensions of Finite Fields  
Author: ERICH KALTOFEN and VICTOR SHOUP 
Web: url: http://www4.ncsu.edu/~kaltofen  
Address: Raleigh, North Carolina 27695-8205, USA  CH-8803 Ruschlikon, Switzerland  
Affiliation: 1 Department of Mathematics, North Carolina State University  IBM Zurich Research Laboratory, Saumerstrasse 4  
Abstract: New algorithms are presented for factoring polynomials of degree n over the finite field of q elements, where q is a power of 2. When log q = n 1+a , where a &gt; 0 is constant, these algorithms are asymptotically faster than previous known algorithms, the fastest of which required time (n(log q) 2 ), y or (n 3+2a ) in this case, which corresponds to the cost of computing x q modulo an n degree polynomial. The new algorithms factor an arbitrary polynomial in time O(n 3+a+o(1) + n 2:69+1:69a ). All measures are in fixed precision operations, that is in bit complexity. Moreover, in the special case where all the irreducible factors have the same degree, the new algorithms run in time O(n 2:69+1:69a ). In particular, one may test a polynomial for irreducibility in O(n 2:69+1:69a ) bit operations. These results generalize to the case where q = p k , where p is a small, fixed prime.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arwin, A. </author> <title> Uber die Kongruenzen von dem funften und hoheren Graden nach einem Primzahlmodulus. </title> <editor> Arkiv f. matematik, astronom. o. </editor> <booktitle> fysik 14 (1918), </booktitle> <pages> 1-46. </pages> <note> In German. </note>
Reference-contexts: Next, we give the classical distinct degree factorization algorithm, which as Joachim von zur Gathen tells us was already known to Gauss; Lidl and Niederreiter [19] attribute the method to Arwin <ref> [1] </ref>.
Reference: [2] <author> Ben-Or, M. </author> <title> Probabilistic algorithms in finite fields. </title> <booktitle> In Proc. 22nd IEEE Symp. Foundations Comp. Sci. </booktitle> <year> (1981), </year> <pages> pp. 394-398. </pages>
Reference-contexts: They use the map ff (q d 1)=2 if p &gt; 2 and work in a quadratic extension of F q d if p = 2. Ben-Or <ref> [2] </ref> introduced the trace of the Frobenius map used in Step E1, which is also used in the algorithm of von zur Gathen and Shoup [10].
Reference: [3] <author> Berlekamp, E. R. </author> <title> Factoring polynomials over large finite fields. </title> <journal> Math. Comp. </journal> <volume> 24 (1970), </volume> <pages> 713-735. </pages>
Reference-contexts: For any larger q the dominant complexity of any algorithm is O (n 1+o (1) log q) field operations, which arises from computation of x q modulo the polynomial to be factored and which already the Berlekamp <ref> [3] </ref> algorithm achieves (see also [21, 8], and [6]).
Reference: [4] <author> Borodin, A., and Moenck, R. </author> <title> Fast modular transforms. </title> <journal> J. Comput. System Sci. </journal> <volume> 8 (1974), </volume> <pages> 366-386. </pages>
Reference-contexts: (x)) O (n 1:69 ) O (C (n) log n) von zur Gathen & Shoup 1991 [10] given x q (mod f (x)) 6: g (h 1 ); :::; g (h n ) (mod f ) O (n ) O (M (n ) log n) using Moenck & Borodin 1972 <ref> [4, 10] </ref> 7: x ; :::; x (mod f (x)) O (n ) O (M (n ) log n) von zur Gathen & Shoup 1991 [10] given x q (mod f (x)) Table 1: Arithmetic cost of basic polynomial arithmetic over F q the right side.
Reference: [5] <author> Brent, R. P., and Kung, H. T. </author> <title> Fast algorithms for manipulating formal power series. </title> <journal> J. ACM 25, </journal> <volume> 4 (1978), </volume> <pages> 581-595. </pages>
Reference-contexts: For classical multiplication ! = 3 and the fastest method has ! = 2:375477 [9]. The following is an adapta tion of a result by Brent and Kung <ref> [5] </ref> (see [10, fact 5.1]). Lemma 1 Let F be a monic polynomial in R [x] of degree n, where R is a commutative ring, and let G and H be polynomials in R [x] of degree &lt; n. <p> n) O (M (n) log n) Knuth 1971 [16]/Moenck 1973 [20] 3: g (mod f ) O (n log q) O (M (n) log q) using Pingala 200 b.c. (see [17, Sec. 4.6.3]) 4: g (h (x)) (mod f (x)) O (n ) O (C (n)) Brent & Kung 1978 <ref> [5] </ref> Coppersmith & Winograd 1987 [9] 5: x q n (mod f (x)) O (n 1:69 ) O (C (n) log n) von zur Gathen & Shoup 1991 [10] given x q (mod f (x)) 6: g (h 1 ); :::; g (h n ) (mod f ) O (n )
Reference: [6] <author> Camion, P. </author> <title> Un algorithme de construction des idem-potents primitifs d`ideaux d`algebres sur F q . Ann. </title> <booktitle> Discrete Math 12 (1982), </booktitle> <pages> 55-63. </pages>
Reference-contexts: For any larger q the dominant complexity of any algorithm is O (n 1+o (1) log q) field operations, which arises from computation of x q modulo the polynomial to be factored and which already the Berlekamp [3] algorithm achieves (see also [21, 8], and <ref> [6] </ref>). Here we focus on the latter case when additionally q = p k with p prime and where F q is represented in the Kronecker style as F p [z]=('(z)), where ' is an irreducible polynomial over F p of degree k.
Reference: [7] <author> Cantor, D. G., and Kaltofen, E. </author> <title> On fast multiplication of polynomials over arbitrary algebras. </title> <journal> Acta Inform. </journal> <volume> 28, 7 (1991), </volume> <pages> 693-701. </pages>
Reference-contexts: Arithmetic operations in F q become polynomial operations of computational complexity O (n 1+a+o (1) ). The n o (1) factor represents logarithmic factors arising in the FFT based polynomial multiplication algorithms <ref> [22, 7] </ref>. Using any of the algorithms stated above, the number of fixed precision integer operations for factoring a polynomial of degree n over F q is then O (n (log q) 2+o (1) ), or, in terms of a, O (n 3+2a+o (1) ).
Reference: [8] <author> Cantor, D. G., and Zassenhaus, H. </author> <title> A new algorithm for factoring polynomials over finite fields. </title> <journal> Math. Comp. </journal> <volume> 36 (1981), </volume> <pages> 587-592. </pages>
Reference-contexts: For any larger q the dominant complexity of any algorithm is O (n 1+o (1) log q) field operations, which arises from computation of x q modulo the polynomial to be factored and which already the Berlekamp [3] algorithm achieves (see also <ref> [21, 8] </ref>, and [6]). Here we focus on the latter case when additionally q = p k with p prime and where F q is represented in the Kronecker style as F p [z]=('(z)), where ' is an irreducible polynomial over F p of degree k. <p> = GCD (g; f ), g 2 = GCD (1 + g; f ) and, if p &gt; 2, g 3 = The possibility of splitting the equal degree factors, similarly to the distinct degree factorization algorithm of Section 2, appears to have been first realized by Cantor and Zassenhaus <ref> [8] </ref>. They use the map ff (q d 1)=2 if p &gt; 2 and work in a quadratic extension of F q d if p = 2.
Reference: [9] <author> Coppersmith, D., and Winograd, S. </author> <title> Matrix multiplication via arithmetic progressions. </title> <journal> J. Symbolic Com-put. </journal> <volume> 9, 3 (1990), </volume> <pages> 251-280. </pages> <note> [10] von zur Gathen, </note> <author> J., and Shoup, V. </author> <title> Computing Frobenius maps and factoring polynomials. </title> <booktitle> Comput. Complexity 2 (1992), </booktitle> <pages> 187-224. </pages>
Reference-contexts: By ! we shall denote an (achievable) matrix multiplication exponent, i.e., when there is an algorithm that multiplies two n fi n matrices in O (n ! ) arithmetic operations. For classical multiplication ! = 3 and the fastest method has ! = 2:375477 <ref> [9] </ref>. The following is an adapta tion of a result by Brent and Kung [5] (see [10, fact 5.1]). <p> n) Knuth 1971 [16]/Moenck 1973 [20] 3: g (mod f ) O (n log q) O (M (n) log q) using Pingala 200 b.c. (see [17, Sec. 4.6.3]) 4: g (h (x)) (mod f (x)) O (n ) O (C (n)) Brent & Kung 1978 [5] Coppersmith & Winograd 1987 <ref> [9] </ref> 5: x q n (mod f (x)) O (n 1:69 ) O (C (n) log n) von zur Gathen & Shoup 1991 [10] given x q (mod f (x)) 6: g (h 1 ); :::; g (h n ) (mod f ) O (n ) O (M (n ) log
Reference: [11] <author> Hardy, G. H., and Wright, E. M. </author> <title> An Introduction to the Theory of Numbers, 5 ed. </title> <publisher> Oxford Univ. Press, Oxford, </publisher> <year> 1979. </year>
Reference-contexts: These tests do not require randomizations. Let $(n) be the number of distinct prime factors of n; e.g., $(3 2 5) = 2. In the worst case, $(n) = O ( log n loglog n ), while in the average case $(n) = O (loglog n) <ref> [11, Section 22.10] </ref>. Using the methods of Shoup [24, Section 6], one easily obtains the following theorem.
Reference: [12] <author> Huang, X. </author> <title> Private communication, </title> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: derived from a C (k) = O (k 1:67 ) modular polynomial composition algorithm (see last paragraph of Section 2), can be further improved if one carries out the n modular polynomial compositions of degree k needed in Step T2 of Algorithm T simultaneously by a single rectangular matrix multiplication <ref> [12] </ref>. Acknowledgements: We like to thank the two referees for catching several inaccuracies, and Xiaohan Huang for sending us his new results on fast rectangular matrix multiplication.
Reference: [13] <author> Huang, X., and Pan, V. </author> <title> Fast rectangular matrix multiplications and improving parallel matrix computations. </title> <booktitle> In Proc. Second Internat. Symp. Parallel Symbolic Comput. </booktitle> <address> PASCO '97 (New York, N. Y., </address> <year> 1997), </year> <note> E. Kaltofen, Ed., ACM Press. To appear. </note>
Reference-contexts: On January 15, 1997 we received an electronic message from Xiaohan Huang and Victor Pan that the matrix multiplication problem of dimensions b p p nc times b nc fi n used for the proof of Lemma 1 can be performed in O (n 1:666977 ) arithmetic operations <ref> [13] </ref>. One immediately obtains slight improvements of the estimates in Lemma 1 to O (n 1:67 ) and of all expontents given in the following sec tions (replace the decimal digits :69 by :67).
Reference: [14] <author> Kaltofen, E., and Lobo, A. </author> <title> Factoring high-degree polynomials by the black box Berlekamp algorithm. </title> <booktitle> In Proc. Internat. Symp. Symbolic Algebraic Comput. </booktitle> <address> IS-SAC '94 (New York, N. Y., 1994), </address> <publisher> ACM Press, </publisher> <pages> pp. 90-98. </pages>
Reference-contexts: log (kn)(n C (k) + log (p) M (n) M (k)) ) deterministic operations in F p . 5 Distinct Degree Factorization We can also apply the methods of Section 4 to the distinct degree factorization algorithm of von zur Gathen and Shoup [10], or the black box Berlekamp algorithm <ref> [14, 15] </ref>, and speed the entire factorization process for high algebraic extension. For simplicity, we describe the changes to the distinct degree factorization algorithm of von zur Gathen and Shoup.
Reference: [15] <author> Kaltofen, E., and Shoup, V. </author> <title> Subquadratic-time factoring of polynomials over finite fields. </title> <booktitle> In Proc. 27th Annual ACM Symp. Theory Comp. </booktitle> <address> (New York, N.Y., 1995), </address> <publisher> ACM Press, </publisher> <pages> pp. 398-406. </pages> <note> Math. Comput., in press. </note>
Reference-contexts: If in addition f (n) = O (g (n)) we write f (n) = fi (g (n)), i.e., f (n) and g (n) have the same asymptotic behavior. log q = O (n b ) with b &lt; 0:454 the algorithms by Kaltofen and Shoup <ref> [15] </ref> require O (n 1:815+0:408b ) expected arithmetic operations in F q , the field with q elements. <p> One immediately obtains slight improvements of the estimates in Lemma 1 to O (n 1:67 ) and of all expontents given in the following sec tions (replace the decimal digits :69 by :67). Indeed, many of the new factorizations algorithms <ref> [10, 15] </ref> are speeded by improving the running time of the modular polynomial composition problem. In our theorems we express the running times in terms of C (n), a function that bounds the asymptotic cost of modular polynomial composition. <p> log (kn)(n C (k) + log (p) M (n) M (k)) ) deterministic operations in F p . 5 Distinct Degree Factorization We can also apply the methods of Section 4 to the distinct degree factorization algorithm of von zur Gathen and Shoup [10], or the black box Berlekamp algorithm <ref> [14, 15] </ref>, and speed the entire factorization process for high algebraic extension. For simplicity, we describe the changes to the distinct degree factorization algorithm of von zur Gathen and Shoup.
Reference: [16] <author> Knuth, D. E. </author> <title> The analysis of algorithms. </title> <booktitle> Actes du congres international des Mathematiciens 3 (1970), </booktitle> <pages> 269-274. </pages>
Reference: [17] <author> Knuth, D. E. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. </volume> <month> 2, </month> <title> Seminumerical Algorithms, </title> <editor> Ed. </editor> <volume> 2. </volume> <publisher> Addison Wes-ley, </publisher> <address> Reading, MA, </address> <year> 1981. </year>
Reference-contexts: Schonhage 1977 [22] (p = 2) Sieveking 1972 [25]/Kung 1974 [18] 2: GCD (f; g) O (n (log n) loglog n) O (M (n) log n) Knuth 1971 [16]/Moenck 1973 [20] 3: g (mod f ) O (n log q) O (M (n) log q) using Pingala 200 b.c. (see <ref> [17, Sec. 4.6.3] </ref>) 4: g (h (x)) (mod f (x)) O (n ) O (C (n)) Brent & Kung 1978 [5] Coppersmith & Winograd 1987 [9] 5: x q n (mod f (x)) O (n 1:69 ) O (C (n) log n) von zur Gathen & Shoup 1991 [10] given x
Reference: [18] <author> Kung, H. T. </author> <title> On computing reciprocals of power series. </title> <journal> Numer. Math. </journal> <volume> 22 (1974), </volume> <pages> 341-348. </pages>
Reference-contexts: right side, the left side must divide Problem Running time In terms of M (n), C (n) Inventors of algorithm 1: g h (mod f ) O (n (log n) loglog n) O (M (n)) Schonhage & Strassen 1969 [23] Schonhage 1977 [22] (p = 2) Sieveking 1972 [25]/Kung 1974 <ref> [18] </ref> 2: GCD (f; g) O (n (log n) loglog n) O (M (n) log n) Knuth 1971 [16]/Moenck 1973 [20] 3: g (mod f ) O (n log q) O (M (n) log q) using Pingala 200 b.c. (see [17, Sec. 4.6.3]) 4: g (h (x)) (mod f (x)) O
Reference: [19] <author> Lidl, R., and Niederreiter, H. </author> <title> Finite Fields. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: Next, we give the classical distinct degree factorization algorithm, which as Joachim von zur Gathen tells us was already known to Gauss; Lidl and Niederreiter <ref> [19] </ref> attribute the method to Arwin [1].
Reference: [20] <author> Moenck, R. T. </author> <title> Fast computation of GCDs. </title> <booktitle> Proc. 5th ACM Symp. Theory Comp. </booktitle> <year> (1973), </year> <pages> 142-151. </pages>
Reference-contexts: 1: g h (mod f ) O (n (log n) loglog n) O (M (n)) Schonhage & Strassen 1969 [23] Schonhage 1977 [22] (p = 2) Sieveking 1972 [25]/Kung 1974 [18] 2: GCD (f; g) O (n (log n) loglog n) O (M (n) log n) Knuth 1971 [16]/Moenck 1973 <ref> [20] </ref> 3: g (mod f ) O (n log q) O (M (n) log q) using Pingala 200 b.c. (see [17, Sec. 4.6.3]) 4: g (h (x)) (mod f (x)) O (n ) O (C (n)) Brent & Kung 1978 [5] Coppersmith & Winograd 1987 [9] 5: x q n (mod
Reference: [21] <author> Rabin, M. O. </author> <title> Probabilistic algorithms in finite fields. </title> <journal> SIAM J. Comp. </journal> <volume> 9 (1980), </volume> <pages> 273-280. </pages>
Reference-contexts: For any larger q the dominant complexity of any algorithm is O (n 1+o (1) log q) field operations, which arises from computation of x q modulo the polynomial to be factored and which already the Berlekamp [3] algorithm achieves (see also <ref> [21, 8] </ref>, and [6]). Here we focus on the latter case when additionally q = p k with p prime and where F q is represented in the Kronecker style as F p [z]=('(z)), where ' is an irreducible polynomial over F p of degree k.
Reference: [22] <author> Sch onhage, A. </author> <title> Schnelle Multiplikation von Poly-nomen uber Korpern der Charakteristik 2. </title> <journal> Acta Inform. </journal> <volume> 7 (1977), </volume> <pages> 395-398. </pages> <note> In German. </note>
Reference-contexts: Arithmetic operations in F q become polynomial operations of computational complexity O (n 1+a+o (1) ). The n o (1) factor represents logarithmic factors arising in the FFT based polynomial multiplication algorithms <ref> [22, 7] </ref>. Using any of the algorithms stated above, the number of fixed precision integer operations for factoring a polynomial of degree n over F q is then O (n (log q) 2+o (1) ), or, in terms of a, O (n 3+2a+o (1) ). <p> F q d is a root of the right side, the left side must divide Problem Running time In terms of M (n), C (n) Inventors of algorithm 1: g h (mod f ) O (n (log n) loglog n) O (M (n)) Schonhage & Strassen 1969 [23] Schonhage 1977 <ref> [22] </ref> (p = 2) Sieveking 1972 [25]/Kung 1974 [18] 2: GCD (f; g) O (n (log n) loglog n) O (M (n) log n) Knuth 1971 [16]/Moenck 1973 [20] 3: g (mod f ) O (n log q) O (M (n) log q) using Pingala 200 b.c. (see [17, Sec. 4.6.3])
Reference: [23] <author> Sch onhage, A., and Strassen, V. Schnelle Multip-likation grosser Zahlen. </author> <note> Computing 7 (1971), 281-292. In German. </note>
Reference-contexts: any element of F q d is a root of the right side, the left side must divide Problem Running time In terms of M (n), C (n) Inventors of algorithm 1: g h (mod f ) O (n (log n) loglog n) O (M (n)) Schonhage & Strassen 1969 <ref> [23] </ref> Schonhage 1977 [22] (p = 2) Sieveking 1972 [25]/Kung 1974 [18] 2: GCD (f; g) O (n (log n) loglog n) O (M (n) log n) Knuth 1971 [16]/Moenck 1973 [20] 3: g (mod f ) O (n log q) O (M (n) log q) using Pingala 200 b.c. (see
Reference: [24] <author> Shoup, V. </author> <title> Fast construction of irreducible polynomials over finite fields. </title> <journal> J. Symbolic Comput. </journal> <volume> 17, </volume> <month> 5 (May </month> <year> 1994), </year> <pages> 371-391. </pages>
Reference-contexts: For one, it is easy to test f for irreducibility. One must have, with n = deg (f ), that x q n x 0 (mod f (x)) and x) = 1 for all prime numbers t dividing n. This test can be improved <ref> [24, Section 6] </ref>. A similar criterion (see von zur Gathen and Shoup [10, Fact 7.4]) tests if all factors of f have the same degree and if so determines that common degree. <p> Let $(n) be the number of distinct prime factors of n; e.g., $(3 2 5) = 2. In the worst case, $(n) = O ( log n loglog n ), while in the average case $(n) = O (loglog n) [11, Section 22.10]. Using the methods of Shoup <ref> [24, Section 6] </ref>, one easily obtains the following theorem.
Reference: [25] <author> Sieveking, M. </author> <title> An algorithm for division of power series. </title> <booktitle> Computing 10 (1972), </booktitle> <pages> 153-156. </pages>
References-found: 24

