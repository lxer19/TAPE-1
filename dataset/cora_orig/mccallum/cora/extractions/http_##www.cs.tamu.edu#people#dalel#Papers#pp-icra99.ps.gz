URL: http://www.cs.tamu.edu/people/dalel/Papers/pp-icra99.ps.gz
Refering-URL: http://www.cs.tamu.edu/people/dalel/vita.html
Root-URL: http://www.cs.tamu.edu
Email: famato,dalelg@cs.tamu.edu  
Title: Probabilistic Roadmap Methods are Embarrassingly Parallel  
Author: Nancy M. Amato, Lucia K. Dale 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science, Texas A&M University  
Abstract: In this paper we report on our experience parallelizing probabilistic roadmap motion planning methods (prms). We show that significant, scalable speedups can be obtained with relatively little effort on the part of the developer. Our experience is not limited to prms, however. In particular, we outline general techniques for parallelizing types of computations commonly performed in motion planning algorithms, and identify potential difficulties that might be faced in other efforts to parallelize sequential motion planning methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, B. Chazelle, L. Guibas, C. O'Dunlaing, and C. Yap. </author> <title> Parallel computational geometry. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 293-327, </pages> <year> 1988. </year>
Reference-contexts: Even with such a straight forward paralleliza-tion, significant speedups were reported. Although this is the only work we are aware of specifically relating to motion planning, there have been some parallel methods proposed for collision detection [18, 19] and related geometric problems (see, e.g., <ref> [1, 5] </ref>). These results illustrate that significant reductions in planning time can be obtained with parallel methods. We note, however, that none of the above mentioned motion planning methods is truly parallel.
Reference: [2] <author> J. M. Ahuactzin and K. Gupta. </author> <title> A motion planning based approach for inverse kinematics of redundant robots: The kinematic roadmap. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 3609-3614, </pages> <year> 1997. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>.
Reference: [3] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. </author> <title> Choosing good distance metrics and local planners for probabilistic roadmap methods. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 630-637, </pages> <year> 1998. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>.
Reference: [4] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. OBPRM: </author> <title> An obstacle-based PRM for 3D workspaces. </title> <booktitle> In Proc. Int. Workshop on Algorithmic Foundations of Robotics (WAFR), </booktitle> <year> 1998. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>. <p> Recall, a roadmap node in a prm corresponds to a collision-free configuration (placement and orientation) of the robot. The roadmap construction proceeds in two stages: (1) generation of collision-free nodes, and (2) connection of these nodes to form the roadmap. In our previous work, we have noted <ref> [4] </ref>, as have others [10], that while the generation of nodes is very fast, the connection of them is not. Typically, 2-3% of execution time is spend in generation while the bulk of the remaining 97-98% is spent in connection. <p> PRM NodeGeneration (Each processor does the following) 1. for 1 i n=p 2. generate a random cfg, c 3. if c is free 4. save c 5. endif 6. endfor A (slightly) more sophisticated node generation algorithm is used in the obstacle-based prm (obprm <ref> [4] </ref>). Let m be the number of obstacles. OBPRM NodeGeneration (Each processor does the following) 1. for each C-obstacle X 2. c in := colliding robot cfg with C-obstacle X 3. <p> To use this code in parallel, each processor was provided with its own hash table for keeping track of closest features between objects. There was no hacking of the V-Clip code. 4.2 Our Code Our parallel methods are basically straight-forward parallelizations of our group's sequential prm planners <ref> [4] </ref>. We parallelized the node generation and roadmap connection phases as outlined in Section 3. For example, during node generation, each processor independently generated its own set of roadmap nodes. Similarly, for the connection of roadmap nodes, each processor attempted its assigned connections.
Reference: [5] <author> N. M. Amato, M. T. Goodrich, and E. A. Ramos. </author> <title> Parallel algorithms for higher-dimensional convex hulls. </title> <booktitle> In Proc. 35th IEEE Symp. Foundat. Comput. Sci., </booktitle> <pages> pages pp. 683-694, </pages> <year> 1994. </year>
Reference-contexts: Even with such a straight forward paralleliza-tion, significant speedups were reported. Although this is the only work we are aware of specifically relating to motion planning, there have been some parallel methods proposed for collision detection [18, 19] and related geometric problems (see, e.g., <ref> [1, 5] </ref>). These results illustrate that significant reductions in planning time can be obtained with parallel methods. We note, however, that none of the above mentioned motion planning methods is truly parallel.
Reference: [6] <author> N. M. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 113-120, </pages> <address> Minneapolis, MN, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>.
Reference: [7] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> Int. J. Robot. Res., </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: For this reason, attention has focussed on randomized or probabilistic motion planning methods. Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe <ref> [7] </ref>, which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces [2, 3, 4, 6, 11, 14, 15, 21, 22]. <p> In parallel, the method pre-computes the free space for each arm configuration that will be considered by a sequential search algorithm. Challou et al. [8, 9] formulated a parallel version of the randomized path planner (RPP) of Bar-raquand and Latombe <ref> [7] </ref>. Basically, in the parallel version, each processor independently runs the sequential RPP algorithm. When a processor finds a solution, it notifies all other processors they can stop their search. Even with such a straight forward paralleliza-tion, significant speedups were reported.
Reference: [8] <author> D. Challou, D. Boley, M. Gini, and V. Kumar. </author> <title> A parallel formulation of informed randomized search for robot motion planning problems. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 709-714, </pages> <year> 1995. </year> <month> 6 </month>
Reference-contexts: Lozano-Perez and O'Donnell [17] give a parallel algorithm for computing a discretized C-space for the first three links of a six degree of freedom manipulator. In parallel, the method pre-computes the free space for each arm configuration that will be considered by a sequential search algorithm. Challou et al. <ref> [8, 9] </ref> formulated a parallel version of the randomized path planner (RPP) of Bar-raquand and Latombe [7]. Basically, in the parallel version, each processor independently runs the sequential RPP algorithm. When a processor finds a solution, it notifies all other processors they can stop their search. <p> These results illustrate that significant reductions in planning time can be obtained with parallel methods. We note, however, that none of the above mentioned motion planning methods is truly parallel. The former [17] does not parallelize the search itself, while the latter <ref> [8] </ref> cannot be expected to yield scalable speedups. That is, the expected running time is not inversely proportional to the number of processors used, since the fastest solution one can hope for is the time required by a fast sequential RPP execution.
Reference: [9] <author> D. J. Challou, M. Gini, and V. Kumar. </author> <title> Parallel search algorithms for robot motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 2, </volume> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: Lozano-Perez and O'Donnell [17] give a parallel algorithm for computing a discretized C-space for the first three links of a six degree of freedom manipulator. In parallel, the method pre-computes the free space for each arm configuration that will be considered by a sequential search algorithm. Challou et al. <ref> [8, 9] </ref> formulated a parallel version of the randomized path planner (RPP) of Bar-raquand and Latombe [7]. Basically, in the parallel version, each processor independently runs the sequential RPP algorithm. When a processor finds a solution, it notifies all other processors they can stop their search.
Reference: [10] <author> D. Hsu, L. Kavraki, J-C. Latombe, and R. Motwani. </author> <title> Capturing the connectivity of high-dimensional geometric spaces by paralleliz-able random sampling techniques. </title> <booktitle> In Proc. IEEE Workshop Randomized Parallel Computing(WRPC), </booktitle> <year> 1998. </year>
Reference-contexts: This minimizes the costly overhead of inter-processor communication which can drag down the performance of parallel algorithms [13]. The connection phase, where the heaviest costs of collision detection are incurred, is also naturally parallelizable. Although the promise of parallel implementations has been acknowledged in the literature <ref> [10] </ref>, we are aware of no specific implementations or empirical studies. 1.3 Our Results In this paper we report on our experience paralleliz-ing probabilistic roadmap methods (prms). This class of motion planning methods was selected because they seem particularly well suited to parallelization. <p> The roadmap construction proceeds in two stages: (1) generation of collision-free nodes, and (2) connection of these nodes to form the roadmap. In our previous work, we have noted [4], as have others <ref> [10] </ref>, that while the generation of nodes is very fast, the connection of them is not. Typically, 2-3% of execution time is spend in generation while the bulk of the remaining 97-98% is spent in connection.
Reference: [11] <author> D. Hsu, J-C. Latombe, and R. Motwani. </author> <title> Path planning in expansive configuration spaces. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 2719-2726, </pages> <year> 1997. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>.
Reference: [12] <author> Y. K. Hwang and N. Ahuja. </author> <title> Gross motion planning a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 219-291, </pages> <year> 1992. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computation-ally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [12, 16] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [23]. For this reason, attention has focussed on randomized or probabilistic motion planning methods.
Reference: [13] <author> J. JaJa. </author> <title> An Introduction Parallel Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: Because they are randomized, no roadmap node's generation need depend on any other. That is, the roadmap nodes can be produced independently on all processors in parallel. This minimizes the costly overhead of inter-processor communication which can drag down the performance of parallel algorithms <ref> [13] </ref>. The connection phase, where the heaviest costs of collision detection are incurred, is also naturally parallelizable.
Reference: [14] <author> L. Kavraki and J. C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Au-tom. (ICRA), </booktitle> <pages> pages 2138-2145, </pages> <year> 1994. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>.
Reference: [15] <author> L. Kavraki, P. Svestka, J. C. Latombe, and M. Overmars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration spaces. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>. <p> Not only would they benefit, but the the expensive second phase of node connection might then be more effective and produce better results. This is an example of working "smart" in addition to "hard". 3.1 Node Generation Parallelizing the node generation phase of the basic prm method <ref> [15] </ref> is trivial. If n nodes are desired, we simply ask each of the p processors to generate n=p of them.
Reference: [16] <author> J. C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computation-ally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [12, 16] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [23]. For this reason, attention has focussed on randomized or probabilistic motion planning methods. <p> Briefly, prms use randomization to construct a graph in C-space (a roadmap <ref> [16] </ref>). Roadmap nodes correspond to collision-free configurations of the robot. Two nodes are connected by an edge if a path between the two corresponding configurations can be found by a `local planning' method.
Reference: [17] <author> T. Lozano-Perez and P. O'Donnell. </author> <title> Parallel robot motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 1000-1007, </pages> <year> 1991. </year>
Reference-contexts: This is quite surprising given the high complexity of the typical motion planning problem, and the frequent need for fast, or real-time solutions. In particular, we are aware of only a few studies of parallel methods which can be applied in higher dimensional C-space. Lozano-Perez and O'Donnell <ref> [17] </ref> give a parallel algorithm for computing a discretized C-space for the first three links of a six degree of freedom manipulator. In parallel, the method pre-computes the free space for each arm configuration that will be considered by a sequential search algorithm. <p> These results illustrate that significant reductions in planning time can be obtained with parallel methods. We note, however, that none of the above mentioned motion planning methods is truly parallel. The former <ref> [17] </ref> does not parallelize the search itself, while the latter [8] cannot be expected to yield scalable speedups.
Reference: [18] <author> B. Mart inez-Salvador, A. del Pobil, and M. Perez-Francisco. </author> <title> Very fast collision detection for practical motion planning part i: The spatial representation. </title> <booktitle> In Proc. IEEE Int. Conf. </booktitle> <institution> Robot. Autom. (ICRA), </institution> <year> 1998. </year>
Reference-contexts: Even with such a straight forward paralleliza-tion, significant speedups were reported. Although this is the only work we are aware of specifically relating to motion planning, there have been some parallel methods proposed for collision detection <ref> [18, 19] </ref> and related geometric problems (see, e.g., [1, 5]). These results illustrate that significant reductions in planning time can be obtained with parallel methods. We note, however, that none of the above mentioned motion planning methods is truly parallel.
Reference: [19] <author> B. Mart inez-Salvador, A. del Pobil, and M. Perez-Francisco. </author> <title> Very fast collision detection for practical motion planning part i: The parallel algorithm. </title> <booktitle> In Proc. IEEE Int. Conf. </booktitle> <institution> Robot. Autom. (ICRA), </institution> <year> 1998. </year>
Reference-contexts: Even with such a straight forward paralleliza-tion, significant speedups were reported. Although this is the only work we are aware of specifically relating to motion planning, there have been some parallel methods proposed for collision detection <ref> [18, 19] </ref> and related geometric problems (see, e.g., [1, 5]). These results illustrate that significant reductions in planning time can be obtained with parallel methods. We note, however, that none of the above mentioned motion planning methods is truly parallel.
Reference: [20] <author> B. Mirtich. V-clip: </author> <title> Fast and robust polyhedral collision detection. </title> <type> Technical Report TR97-05, </type> <institution> Mitsubishi Electric Research Lab, </institution> <address> Cambridge, MA, </address> <year> 1997. </year>
Reference-contexts: One task was created for each processor used in the current execution; to save overhead, these tasks were reused by both generation and connection phases of the algorithm. The sequential code used for collision detection was Voronoi Clip (V-Clip) <ref> [20] </ref>. To use this code in parallel, each processor was provided with its own hash table for keeping track of closest features between objects. There was no hacking of the V-Clip code. 4.2 Our Code Our parallel methods are basically straight-forward parallelizations of our group's sequential prm planners [4]. <p> is commonly known in the parallel computing literature as the exclusive-read exclusive-write (EREW) model, while our parallel connection algorithm belongs to the concurrent-read exclusive-write (CREW) model. 4.3 Collision detection libraries As is the case with most motion planning algorithms, our sequential planners use libraries coded by others for collision detection <ref> [25, 20] </ref>. Unfortunately, as alluded to in Section 1, some difficulties were encountered when we tried to use these collision detection libraries in parallel. The underlying reason for this is that many of these libraries are optimized for performance on a sequential machine. <p> The solution we adopted was to make a separate copy of the data that was modified during the collision detection call for each active processor. This was relatively simple in V-Clip <ref> [20] </ref>, since the processors only needed separate copies of the hash tables they used to record the closest features between object pairs on previous collision detection calls. The modifications that would have been required in the C-Space Toolkit [25] would have been more extensive.
Reference: [21] <author> M. Overmars. </author> <title> A random approach to path planning. </title> <type> Technical Report RUU-CS-92-32, </type> <institution> Computer Science, Utrecht University, The Nether-lands, </institution> <year> 1992. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>.
Reference: [22] <author> M. Overmars and P. Svestka. </author> <title> A probabilistic learning approach to motion planning. </title> <booktitle> In Proc. Workshop on Algorithmic Foundations of Robotics, </booktitle> <pages> pages 19-37, </pages> <year> 1994. </year>
Reference-contexts: Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima. Recently, randomized or probabilistic roadmap methods (prms) have gained much attention for problems involving high-dimensional C-spaces <ref> [2, 3, 4, 6, 11, 14, 15, 21, 22] </ref>.
Reference: [23] <author> J. Reif. </author> <title> Complexity of the piano mover's problem and generalizations. </title> <booktitle> In Proc. IEEE Symp. Foundations of Computer Science (FOCS), </booktitle> <pages> pages 421-427, </pages> <year> 1979. </year>
Reference-contexts: Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot <ref> [23] </ref>. For this reason, attention has focussed on randomized or probabilistic motion planning methods. Notable among the randomized potential field methods is the Randomized Path Planner (RPP) of Barraquand and Latombe [7], which uses random walks to attempt to escape local minima.
Reference: [24] <institution> Silicon Graphics, Corporation, http://techpubs.sgi.com/library/. Performance Tuning Optimizaton for Origin2000 and Onyx2. </institution>
Reference-contexts: Therefore, we believe that the developers of these libraries should perhaps address these issues, and at least they should be aware of the potential problems. In some cases, explicitly parallel versions might be required. 2 Platform The parallel machine used in this study was an SGI Origin2000 <ref> [24] </ref>. The Origin2000 is a ccNUMA machine (cache-coherent, non-uniform memory access), where sets of processors are connected to form nodes, and sets of nodes are connected in a hierarchical fashion by an interconnection fabric built of dynamically-allocated switch-connected links.
Reference: [25] <author> P. G. Xavier and R. A. LaFarge. </author> <title> A configuration space toolkit for automated spatial reasoning: Technical results and ldrd project final report. </title> <type> Technical Report SAND97-0366, </type> <institution> Sandia National Laboratories, </institution> <year> 1997. </year> <month> 7 </month>
Reference-contexts: is commonly known in the parallel computing literature as the exclusive-read exclusive-write (EREW) model, while our parallel connection algorithm belongs to the concurrent-read exclusive-write (CREW) model. 4.3 Collision detection libraries As is the case with most motion planning algorithms, our sequential planners use libraries coded by others for collision detection <ref> [25, 20] </ref>. Unfortunately, as alluded to in Section 1, some difficulties were encountered when we tried to use these collision detection libraries in parallel. The underlying reason for this is that many of these libraries are optimized for performance on a sequential machine. <p> This was relatively simple in V-Clip [20], since the processors only needed separate copies of the hash tables they used to record the closest features between object pairs on previous collision detection calls. The modifications that would have been required in the C-Space Toolkit <ref> [25] </ref> would have been more extensive. However, we note that wholesale replication of data is not always a good solution as it may prove overly costly in terms of memory requirements. 5 Experimental Results In this section we report the experimental performance of our parallel node generation and connection algorithms.
References-found: 25

