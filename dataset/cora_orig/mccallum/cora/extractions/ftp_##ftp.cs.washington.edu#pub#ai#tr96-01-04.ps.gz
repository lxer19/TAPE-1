URL: ftp://ftp.cs.washington.edu/pub/ai/tr96-01-04.ps.gz
Refering-URL: http://www.cs.washington.edu/research/projects/ai/www/occam.html
Root-URL: 
Email: -ctkwok, weld-@cs.washington.edu  
Title: Planning to Gather Information  
Author: Chung T. Kwok Daniel S. Weld 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science Engineering University of Washington  
Pubnum: Technical Report UW-CSE-96-01-04  
Abstract: The exponential growth of the Internet has produced a labyrinth of documents, databases and services. While almost any type of information is available somewhere, even expert users waste time and effort searching for appropriate information sources, and phrasing queries in the custom formats required by each site. To make matters worse, many queries can only be answered by combining information from several different sites. This paper describes Occam, a query planning algorithm that determines the best way to integrate data from different sources. As input, Occam takes a library of site descriptions and a user query. As output, Occam automatically generates one or more plans that encode alternative ways to gather the requested information. Occam has several important features: (1) it integrates both legacy systems and full relational databases with an efficient, domain-independent, query-planning algorithm, (2) it reasons about the capabilities of different information sources, (3) it handles partial goal satisfaction i.e., gathers as much data as possible when it can't gather exactly all that the user requested, (4) it is both sound and complete, (5) it is efficient. We present empirical results demonstrating Occam's performance on a variety of information gathering tasks. 1 We thank Paul Beame, Oren Etzioni, Marc Friedman, Keith Golden, Steve Hanks, 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in [18] provides a more expressive type hierarchy than that used by Occam. The bulk of prior work on AI planning systems <ref> [1] </ref> assumes that execution of an operator instance has a causal effect on the world. In contrast, our approach eschews updates to the information sources and instead focuses solely on information gathering.
Reference: [2] <author> Yigal Arens, Chin Chee, Chun-Nan Hsu, </author> <title> Hoh In, and Craig Knoblock. Query processing in an information mediator. In Proceedings of the 23 ARPA / Rome Laboratory Knowledge-Based Planning and Scheduling Initiative, </title> <address> Tucson, AZ, </address> <year> 1994. </year>
Reference-contexts: Occam's shu*ed-sequence pruning technique (section 5.2) provides all the benefits of a partial-order representation with reduced complexity. Several planning systems were designed specifically for information gathering. For example, the XII planner [12] guides the Internet Softbot [9], and the Sage planner [15] controls the SIMS information system <ref> [2] </ref>. Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model. But Occam allows a more gen eral class of transformations in several ways.
Reference: [3] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: Evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67(1) </volume> <pages> 71-112, </pages> <year> 1994. </year>
Reference-contexts: One way to reduce this combinatorial explosion is to use a partial-order respresentation <ref> [3, 20] </ref>, but we adopt a simpler approach: enforcing a canonical ordering which eliminates redundant permutations. <p> This allows a much simpler and faster planning algorithm, since Occam need not worry about sibling-subgoal interactions or threats to causal links. Although some researchers have argued that partial-order planners are more efficient than total-order planners <ref> [19, 20, 3] </ref>, their arguments do not apply to the information gathering problem. Occam's shu*ed-sequence pruning technique (section 5.2) provides all the benefits of a partial-order representation with reduced complexity. Several planning systems were designed specifically for information gathering.
Reference: [4] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: For example, the only preconditions to Occam operators are knowledge preconditions [21, 22, 8]. Furthermore, since the operators executed by Occam are requests to information sources, we need not model causal effects; hence, there are no sibling-subgoal interactions such as those characterizing the Sussman anomaly <ref> [26, 4] </ref>. Occam does not model the world state as do many other AI planners; instead it models the information state, which is a description of the information collected by Occam at a particular stage in planning. <p> The next two sections present the Occam planning algorithm: section 4 explains the generation of potentially useful action sequences and shows how Occam evaluates its version of the Modal Truth Criterion <ref> [4] </ref>. In section 5 we introduce two improvements to the algorithm and present an empirical evaluation of Occam's performance. <p> Since operators can be instantiated in several ways (figure 2), expanding Seq will typically cause many new sequences to be added to Fringe . FindSolutions determines if any of these sequences can be elaborated into a solution plan; this is akin to evaluating the modal truth criterion <ref> [4] </ref> and is explained in section 4.2; Occam adds all newly discovered solutions to Sol , but in any case every sequence is kept on Fringe because its children might lead to qualitatively different solutions. 9 Procedure Occam (Q, O) Fringe = fhig Sol = fg Loop until either ( Fringe <p> This test is somewhat akin to the Modal Truth Criterion <ref> [4] </ref> which tests a partially ordered (hence incomplely specified) plan to see if any solution exists. In the case of Occam, a totally ordered sequence of operators is underspecified because there could be several (or no) heads which render it a solution.
Reference: [5] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ireland, Y. Papakon-stantinou, J. Ullman, and J. Widom. </author> <title> The tsimmis project: Integration of heterogeneous information sources. </title> <booktitle> In Proceedings of IPSJ Conference, </booktitle> <year> 1994. </year>
Reference-contexts: Artificial intelligence and database researchers have addressed this problem by constructing integrated information gathering systems that automatically query multiple, relevant information sources to satisfy a user's information request <ref> [9, 5, 15, 18, 16, 29, 10] </ref>. These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources [9]. <p> Prominent projects include the Information Manifold [14] and the Tsimmis project <ref> [5] </ref>. From Tsimmis, we adopt the no 19 tion of notion of binding templates [25]. However, for the most part, Tsimmis assumes information integration is done manually, while our work focuses on automating the information-integration process.
Reference: [6] <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic planning with information gathering and contingent execution. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Both Sage and XII interleave planning and execution, but another approach is the generation of conditional plans <ref> [17, 24, 6] </ref>. Most of the planners described above have significant combinatorial explosions and require domain-specific, search control for anything but small problems. For example, XII requires considerable control knowledge in order to handle problems that appear comparable to those in our People domain.
Reference: [7] <author> O. Etzioni, K. Golden, and D. Weld. </author> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Proc. 4th Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 178-189, </pages> <address> San Francisco, CA, June 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In 6 If one knows that a site does contain all tuples, then one could specify this by using , to separate the operator head and body. Given such a specification, one could perform local closed world reasoning <ref> [7, 12, 18] </ref> to eliminate operators from consideration, but we do not discuss the matter in this paper. 6 particular, while Occam operators have no causal preconditions, the bound arguments in an operator's head represent a form of knowledge precondi tion [21, 22] that is equivalent to the findout goals of <p> We described improvements that speed planning even more. In particular, shu*ed-sequence pruning (along with Occam's ability to reason about the type of relational attributes) is very effective. In the future we hope to incorporate local closed world information <ref> [7, 18] </ref> into our planner so that Occam can reason about situations when it has exhausted all information gathering alternatives. We are also integrating speed and cost metrics into the site descriptions so that Occam can answer queries in a manner that optimizes a user-specific utility function.
Reference: [8] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1992. </year> <note> Morgan Kaufmann. Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: For example, the only preconditions to Occam operators are knowledge preconditions <ref> [21, 22, 8] </ref>. Furthermore, since the operators executed by Occam are requests to information sources, we need not model causal effects; hence, there are no sibling-subgoal interactions such as those characterizing the Sussman anomaly [26, 4]. <p> 18] to eliminate operators from consideration, but we do not discuss the matter in this paper. 6 particular, while Occam operators have no causal preconditions, the bound arguments in an operator's head represent a form of knowledge precondi tion [21, 22] that is equivalent to the findout goals of UWL <ref> [8] </ref>. There are no causal effects, but the body of an operator is similar to a UWL observe effect.
Reference: [9] <author> O. Etzioni and D. Weld. </author> <title> A softbot-based interface to the internet. </title> <journal> CACM, </journal> <volume> 37(7) </volume> <pages> 72-76, </pages> <month> July </month> <year> 1994. </year> <note> See http://www.cs.washington.edu/research/softbots. </note>
Reference-contexts: Artificial intelligence and database researchers have addressed this problem by constructing integrated information gathering systems that automatically query multiple, relevant information sources to satisfy a user's information request <ref> [9, 5, 15, 18, 16, 29, 10] </ref>. These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources [9]. <p> These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources <ref> [9] </ref>. These motivations inspire the Occam 2 planning system which we describe in this paper. Occam automates the process of locating relevant information sources from a repository of source descriptions and combining them appropriately to answer users' information requests. <p> [25]) has two operators. * The Patho domain consists of the three operators from section A. * The Car domain models relational databases containing price information on foreign and domestic cars with five operators that use numerical constraints to encode price and date restrictions. * The People domain (derived from <ref> [9] </ref>) encodes Internet white page op erations with ten operators. In each experiment Occam exhaustively explores all sequences up to a certain length; the number of sequences explored and the time taken for each experiment is shown in Table 1. <p> Occam's shu*ed-sequence pruning technique (section 5.2) provides all the benefits of a partial-order representation with reduced complexity. Several planning systems were designed specifically for information gathering. For example, the XII planner [12] guides the Internet Softbot <ref> [9] </ref>, and the Sage planner [15] controls the SIMS information system [2]. Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model. But Occam allows a more gen eral class of transformations in several ways.
Reference: [10] <author> Oren Etzioni and Daniel Weld. </author> <title> Intelligent agents on the internet: Fact, fiction, and forecast. </title> <journal> IEEE Expert, </journal> <pages> pages 44-49, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Artificial intelligence and database researchers have addressed this problem by constructing integrated information gathering systems that automatically query multiple, relevant information sources to satisfy a user's information request <ref> [9, 5, 15, 18, 16, 29, 10] </ref>. These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources [9].
Reference: [11] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <year> 1971. </year>
Reference-contexts: When a system supports several types of query (but doesn't support full relational operations) it can be described with several operators. Full relational databases are simply described using operators with no bound variables. Although our syntax for operators looks very different from traditional STRIPS <ref> [11] </ref> or ADL [23] planning operators, there are many similarities. In 6 If one knows that a site does contain all tuples, then one could specify this by using , to separate the operator head and body.
Reference: [12] <author> K. Golden, O. Etzioni, and D. Weld. </author> <title> Omnipotence without omniscience: Sensor management in planning. </title> <booktitle> In Proc. 12th Nat. Conf. on A.I., </booktitle> <pages> pages 1048-1054, </pages> <address> Menlo Park, CA, July 1994. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: In 6 If one knows that a site does contain all tuples, then one could specify this by using , to separate the operator head and body. Given such a specification, one could perform local closed world reasoning <ref> [7, 12, 18] </ref> to eliminate operators from consideration, but we do not discuss the matter in this paper. 6 particular, while Occam operators have no causal preconditions, the bound arguments in an operator's head represent a form of knowledge precondi tion [21, 22] that is equivalent to the findout goals of <p> Occam's shu*ed-sequence pruning technique (section 5.2) provides all the benefits of a partial-order representation with reduced complexity. Several planning systems were designed specifically for information gathering. For example, the XII planner <ref> [12] </ref> guides the Internet Softbot [9], and the Sage planner [15] controls the SIMS information system [2]. Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model.
Reference: [13] <author> A. Gupta, Garcia-Monlina H., J. Ullman, and Y. Papakonstantinou. </author> <title> A query translation scheme for rapid implementation of wrappers. In Database and knowledge-base systems, volume 1. </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: However, for the most part, Tsimmis assumes information integration is done manually, while our work focuses on automating the information-integration process. In particular, Tsimmis uses binding templates to model information sources and generate data abstractions called wrappers <ref> [13] </ref>, whereas in Occam they are used to constrain search during the automatic construction of valid plans.
Reference: [14] <author> Thomas Kirk, Alon Y. Levy, Yehoshua Sagiv, and Divesh Srivastava. </author> <title> The information manifold. </title> <booktitle> In Working Notes of the AAAI Spring Symposium: Information Gathering from Heterogeneous, Distributed Environments, </booktitle> <pages> pages 85-91, </pages> <institution> Stanford University, </institution> <year> 1995. </year> <note> AAAI Press. To order a copy, contact sss@aaai.org. </note>
Reference-contexts: Prominent projects include the Information Manifold <ref> [14] </ref> and the Tsimmis project [5]. From Tsimmis, we adopt the no 19 tion of notion of binding templates [25]. However, for the most part, Tsimmis assumes information integration is done manually, while our work focuses on automating the information-integration process.
Reference: [15] <author> C. Knoblock. </author> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proc. 15th Int. Joint Conf. on A.I., </booktitle> <pages> pages 1686-1693, </pages> <year> 1995. </year>
Reference-contexts: Artificial intelligence and database researchers have addressed this problem by constructing integrated information gathering systems that automatically query multiple, relevant information sources to satisfy a user's information request <ref> [9, 5, 15, 18, 16, 29, 10] </ref>. These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources [9]. <p> Occam's shu*ed-sequence pruning technique (section 5.2) provides all the benefits of a partial-order representation with reduced complexity. Several planning systems were designed specifically for information gathering. For example, the XII planner [12] guides the Internet Softbot [9], and the Sage planner <ref> [15] </ref> controls the SIMS information system [2]. Like Occam, both XII and Sage specify transformations between the information produced by a remote site and an internal world model. But Occam allows a more gen eral class of transformations in several ways.
Reference: [16] <author> Craig Knoblock and Alon Levy, </author> <title> editors. </title> <booktitle> Working Notes of the AAAI Spring Symposium on Information Gathering from Heterogeneous, Distributed Environments, </booktitle> <institution> Stanford University, </institution> <year> 1995. </year> <note> AAAI Press. To order a copy, contact sss@aaai.org. </note>
Reference-contexts: Artificial intelligence and database researchers have addressed this problem by constructing integrated information gathering systems that automatically query multiple, relevant information sources to satisfy a user's information request <ref> [9, 5, 15, 18, 16, 29, 10] </ref>. These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources [9].
Reference: [17] <author> K. Krebsbach, D. Olawsky, and M. Gini. </author> <title> An empirical study of sensing and defaulting in planning. </title> <booktitle> In Proc. 1st Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 136-144, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Both Sage and XII interleave planning and execution, but another approach is the generation of conditional plans <ref> [17, 24, 6] </ref>. Most of the planners described above have significant combinatorial explosions and require domain-specific, search control for anything but small problems. For example, XII requires considerable control knowledge in order to handle problems that appear comparable to those in our People domain.
Reference: [18] <author> Alon Y. Levy, Divesh Srivastava, and Thomas Kirk. </author> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <note> Special Issue on Networked Information Discovery and Retrieval, 5 (2), </note> <month> September </month> <year> 1995. </year>
Reference-contexts: Artificial intelligence and database researchers have addressed this problem by constructing integrated information gathering systems that automatically query multiple, relevant information sources to satisfy a user's information request <ref> [9, 5, 15, 18, 16, 29, 10] </ref>. These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources [9]. <p> In 6 If one knows that a site does contain all tuples, then one could specify this by using , to separate the operator head and body. Given such a specification, one could perform local closed world reasoning <ref> [7, 12, 18] </ref> to eliminate operators from consideration, but we do not discuss the matter in this paper. 6 particular, while Occam operators have no causal preconditions, the bound arguments in an operator's head represent a form of knowledge precondi tion [21, 22] that is equivalent to the findout goals of <p> However, for a more expressive description language (such as that described in <ref> [18] </ref>) containment mapping must be augmented with more powerful tools such as subsumption algorithms and inequality reasoning. <p> In particular, Tsimmis uses binding templates to model information sources and generate data abstractions called wrappers [13], whereas in Occam they are used to constrain search during the automatic construction of valid plans. The rest of our representation language is based on the encodings described in <ref> [18] </ref>, but in contrast to this work we provide implemented algorithms for generating query plans when site descriptions include binding annotations. In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in [18] provides a more expressive type hierarchy than that used by <p> our representation language is based on the encodings described in <ref> [18] </ref>, but in contrast to this work we provide implemented algorithms for generating query plans when site descriptions include binding annotations. In addition, we describe several optimizations and demonstrate their effectiveness experimentally. On the other hand, the description language in [18] provides a more expressive type hierarchy than that used by Occam. The bulk of prior work on AI planning systems [1] assumes that execution of an operator instance has a causal effect on the world. <p> We described improvements that speed planning even more. In particular, shu*ed-sequence pruning (along with Occam's ability to reason about the type of relational attributes) is very effective. In the future we hope to incorporate local closed world information <ref> [7, 18] </ref> into our planner so that Occam can reason about situations when it has exhausted all information gathering alternatives. We are also integrating speed and cost metrics into the site descriptions so that Occam can answer queries in a manner that optimizes a user-specific utility function.
Reference: [19] <author> S. Minton, J. Bresina, and M. Drummond. </author> <title> Commitment strategies in planning: A comparative analysis. </title> <booktitle> In Proceedings of IJCAI-91, </booktitle> <pages> pages 259-265, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: This allows a much simpler and faster planning algorithm, since Occam need not worry about sibling-subgoal interactions or threats to causal links. Although some researchers have argued that partial-order planners are more efficient than total-order planners <ref> [19, 20, 3] </ref>, their arguments do not apply to the information gathering problem. Occam's shu*ed-sequence pruning technique (section 5.2) provides all the benefits of a partial-order representation with reduced complexity. Several planning systems were designed specifically for information gathering.
Reference: [20] <author> S. Minton, M. Drummond, J. Bresina, and A. Phillips. </author> <title> Total order vs. partial order planning: Factors influencing performance. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: One way to reduce this combinatorial explosion is to use a partial-order respresentation <ref> [3, 20] </ref>, but we adopt a simpler approach: enforcing a canonical ordering which eliminates redundant permutations. <p> This allows a much simpler and faster planning algorithm, since Occam need not worry about sibling-subgoal interactions or threats to causal links. Although some researchers have argued that partial-order planners are more efficient than total-order planners <ref> [19, 20, 3] </ref>, their arguments do not apply to the information gathering problem. Occam's shu*ed-sequence pruning technique (section 5.2) provides all the benefits of a partial-order representation with reduced complexity. Several planning systems were designed specifically for information gathering.
Reference: [21] <author> R. Moore. </author> <title> A Formal Theory of Knowledge and Action. </title> <editor> In J. Hobbs and R. Moore, editors, </editor> <title> Formal Theories of the Commonsense World. </title> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1985. </year>
Reference-contexts: For example, the only preconditions to Occam operators are knowledge preconditions <ref> [21, 22, 8] </ref>. Furthermore, since the operators executed by Occam are requests to information sources, we need not model causal effects; hence, there are no sibling-subgoal interactions such as those characterizing the Sussman anomaly [26, 4]. <p> a specification, one could perform local closed world reasoning [7, 12, 18] to eliminate operators from consideration, but we do not discuss the matter in this paper. 6 particular, while Occam operators have no causal preconditions, the bound arguments in an operator's head represent a form of knowledge precondi tion <ref> [21, 22] </ref> that is equivalent to the findout goals of UWL [8]. There are no causal effects, but the body of an operator is similar to a UWL observe effect.
Reference: [22] <author> Leora Morgenstern. </author> <title> Knowledge preconditions for actions and plans. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <pages> pages 867-874, </pages> <year> 1987. </year>
Reference-contexts: For example, the only preconditions to Occam operators are knowledge preconditions <ref> [21, 22, 8] </ref>. Furthermore, since the operators executed by Occam are requests to information sources, we need not model causal effects; hence, there are no sibling-subgoal interactions such as those characterizing the Sussman anomaly [26, 4]. <p> a specification, one could perform local closed world reasoning [7, 12, 18] to eliminate operators from consideration, but we do not discuss the matter in this paper. 6 particular, while Occam operators have no causal preconditions, the bound arguments in an operator's head represent a form of knowledge precondi tion <ref> [21, 22] </ref> that is equivalent to the findout goals of UWL [8]. There are no causal effects, but the body of an operator is similar to a UWL observe effect.
Reference: [23] <author> E. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proc. 1st Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 324-332, </pages> <year> 1989. </year>
Reference-contexts: When a system supports several types of query (but doesn't support full relational operations) it can be described with several operators. Full relational databases are simply described using operators with no bound variables. Although our syntax for operators looks very different from traditional STRIPS [11] or ADL <ref> [23] </ref> planning operators, there are many similarities. In 6 If one knows that a site does contain all tuples, then one could specify this by using , to separate the operator head and body.
Reference: [24] <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Both Sage and XII interleave planning and execution, but another approach is the generation of conditional plans <ref> [17, 24, 6] </ref>. Most of the planners described above have significant combinatorial explosions and require domain-specific, search control for anything but small problems. For example, XII requires considerable control knowledge in order to handle problems that appear comparable to those in our People domain.
Reference: [25] <author> A. Rajaraman, Y. Sagiv, and J. Ullman. </author> <title> Answering queries using templates with binding patterns. </title> <booktitle> In Principles of Database Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Both purposes are achieved with operators which have two parts: 1. A head which consists of a predicate symbol denoting the name of the operator, and an ordered list of variables called arguments. Each variable is possibly annotated with a binding pattern <ref> [25] </ref> that indicates that the argument must be bound in order for the query to be executed (denoted with the annotation $). Variables with no annotation are free. 4 2. <p> Specifically, if $V is a bound argument of O j then V must be used as a free argument to some other operator instance O i where i &lt; j or else a value for V must be a bound argument in the query head <ref> [25] </ref>. 2. All tuples satisfying plan (X 1 ; : : : ; X n ) must satisfy query (X 1 ; : : : ; X n ). <p> A precise description of the domains is precluded by space limitations, but we provide the following brief summary: * The Parent domain (defined in <ref> [25] </ref>) has two operators. * The Patho domain consists of the three operators from section A. * The Car domain models relational databases containing price information on foreign and domestic cars with five operators that use numerical constraints to encode price and date restrictions. * The People domain (derived from [9]) <p> Prominent projects include the Information Manifold [14] and the Tsimmis project [5]. From Tsimmis, we adopt the no 19 tion of notion of binding templates <ref> [25] </ref>. However, for the most part, Tsimmis assumes information integration is done manually, while our work focuses on automating the information-integration process. <p> A Bounds on Plan Length Recall that for a plan to be a solution, every tuple satisfying plan must logically entail query (section 3.2). Using a stronger definition of solution (where the entailment is bidirectional) Rajaraman et al. <ref> [25] </ref> have proven that one need not consider plans of unbounded length when searching for tight solutions. Specifically, they showed that for a query with n conjuncts and m unique variables, if a "bidirectional" solution exists, then there is an equivalent solution with at most m + n conjuncts. <p> Unfortunately, there are an infinite number of distinct possible plans, each employing a different number of instances of op 2 , and each potentially returning a different set of tuples. Note that there is no solution to this problem using the definition of <ref> [25] </ref>; if there were it would involve no more than two operators. Although it is unfortunate that our definition of solution does not afford a bound on plan length, we believe that it is the best definition.
Reference: [26] <author> G. Sussman. </author> <title> A Computer Model of Skill Acquisition. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: For example, the only preconditions to Occam operators are knowledge preconditions [21, 22, 8]. Furthermore, since the operators executed by Occam are requests to information sources, we need not model causal effects; hence, there are no sibling-subgoal interactions such as those characterizing the Sussman anomaly <ref> [26, 4] </ref>. Occam does not model the world state as do many other AI planners; instead it models the information state, which is a description of the information collected by Occam at a particular stage in planning.
Reference: [27] <author> J. Ullman. </author> <title> Database and knowledge-base systems. In Database and knowledge-base systems, volume 1. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: might be returned: h"Sam","Smith","sam@cs","501","542-8907"i h"Sam","Smith","sam@cs","501","542-8908"i The relation office (F,L,O) appears in the body of finger , hence we can conclude that office ("Sam","Smith","501") is true, and we know that office "501" has at least two phones: "542-8907" and "542-8908". 3 The body can also contain numerical constraints (i.e., built-in predicates <ref> [27, p101] </ref>), and Occam can generate appropriately constrained plans, but we do not discuss this aspect of Occam in this paper. 4 A brief comment on notation: we follow Prolog conventions, hence symbols beginning with a capital leter denote variables. All free variables are universally quantified.
Reference: [28] <author> J. Ullman. </author> <title> Database and knowledge-base systems. In Database and knowledge-base systems, volume 2. </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: These plans are thus solutions. Underlying the operation of FindSolutions is the notion of a containment mapping between two horn clauses <ref> [28, p881] </ref>. A containment mapping from query Q to the formula E is a function t mapping symbols in Q to symbols in E. <p> Soundness follows from two facts: 1) 15 InstantiateOp only returns operator instances whose bound variables are chose from the set B which Occam calculates to be precisely those satisfying the binding constraints, 2) FindSolutions constructs a containment mapping which suffices to compute logical entailment for this language <ref> [28] </ref>. Completeness follows from the fact that Occam performs an exhaustive search (to a depth bound) of all possible sequences of operator instances that satisfy the binding constraints. Since FindSolutions enumerates all possible heads, all possible plans are considered, and all non-redundant plans are returned.
Reference: [29] <author> D. Weld. </author> <title> The role of intelligent systems in the national information infrastructure. </title> <journal> AI Magazine, </journal> <volume> 16(3) </volume> <pages> 45-64, </pages> <month> Fall </month> <year> 1995. </year> <month> 26 </month>
Reference-contexts: Artificial intelligence and database researchers have addressed this problem by constructing integrated information gathering systems that automatically query multiple, relevant information sources to satisfy a user's information request <ref> [9, 5, 15, 18, 16, 29, 10] </ref>. These systems raise the level of the user interface, since they allow the user to specify what she is interested in without worrying about where it is stored or how to access the relevant sources [9].
References-found: 29

