URL: http://www.cs.ucsb.edu/~cappello/personal/articles/omer.ps
Refering-URL: http://www.cs.ucsb.edu/~cappello/personal/J_articles.html
Root-URL: http://www.cs.ucsb.edu
Title: PROCESSOR LOWER BOUND FORMULAS FOR ARRAY COMPUTATIONS AND PARAMETRIC DIOPHANTINE SYSTEMS  
Author: PETER CAPPELLO and OMER E GECIO GLU Communicated by Oscar H. Ibarra 
Keyword: Parallel algorithm, array computation, lower bound, Diophantine equation, lattice point, generating function.  
Address: Santa Barbara, CA 93106, USA  
Affiliation: Department of Computer Science University of California at Santa Barbara  
Note: International Journal of Foundations of Computer Science c World Scientific Publishing Company  
Email: fomer; cappellog@cs:ucsb:edu  
Date: Received 25 July 1997 Revised 20 October 1997  
Abstract: Using a directed acyclic graph (dag) model of algorithms, we solve a problem related to precedence-constrained multiprocessor schedules for array computations: Given a sequence of dags and linear schedules parametrized by n, compute a lower bound on the number of processors required by the schedule as a function of n. In our formulation, the number of tasks that are scheduled for execution during any fixed time step is the number of non-negative integer solutions d n to a set of parametric linear Diophantine equations. We present an algorithm based on generating functions for constructing a formula for these numbers d n . The algorithm has been implemented as a Mathematica program. Example runs and the symbolic formulas for processor lower bounds automatically produced by the algorithm for Matrix-Vector Product, Triangular Matrix Product, and Gaussian Elimination problems are presented. Our approach actually solves the following more general problem: Given an arbitrary r fi s integral matrix A and r-dimensional integral vectors b and c, let d n (n = 0; 1; : : :) be the number of solutions in non-negative integers to the system Az = nb + c. Calculate the (rational) generating function P n0 d n t n and construct a formula for d n .
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Benaini and Yves Robert. </author> <title> Space-time-minimal systolic arrays for Gaussian elimination and the algebraic path problem. </title> <journal> Parallel Computing, </journal> <volume> 15 </volume> <pages> 211-225, </pages> <year> 1990. </year>
Reference-contexts: M is the input matrix, x is the input vector, and y = M x is the output vector. We index the entries of an n-dimensional vector v by v [0]; v <ref> [1] </ref>; : : : ; v [n 1]. y [i] 0; y [i] y [i] + M [i; j] x [j]; endfor; endfor; 3 Computation is "located" at certain index pairs defined by the for loop limits, namely all pairs (i; j) satisfying: 0 i n 1 (2) Clearly, these pairs <p> Adding the schedule constraint to system we already have, we obtain the augmented Diophantine system i + j + k = 3N 2 j + s 2 = 2N 1 k + s 4 = 2N 1 Here b = [3; 0; 2; 0; 2] t and c = <ref> [2; 1; 1; 1; 1] </ref> t . The system for Gaussian elimination for n = 2N + 1 is i + j + k = 3N 1 j + s 2 = 2N k + s 4 = 2N which differs from the even case only in the vector c. <p> Sample Run 1: n fi n Matrix-Vector Multiplication For the linear schedule of the Matrix-vector Product example, the augmented Diophantine system in (3) can be written in the form (9) where a = 4 1 0 1 0 3 2 1 1 5 ; c = 4 1 3 In <ref> [1] </ref>:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 0, 0-, -0, 1, 0, 1--; In [4]:= DiophantineGF [a, b, c] a http://www.cs.ucsb.edu/~omer/personal/abstracts/DiophantineGF.m 9 t 2 In [5]:= formula; Binomial Formula : C [n, 1] Power Formula : n In the output, C [x; k] denotes the binomial coefficient x k!(xk)! <p> 4 1 0 1 0 3 2 1 1 5 ; c = 4 1 3 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 0, 0-, -0, 1, 0, 1--; In [4]:= DiophantineGF [a, b, c] a http://www.cs.ucsb.edu/~omer/personal/abstracts/DiophantineGF.m 9 t 2 In [5]:= formula; Binomial Formula : C <ref> [n, 1] </ref> Power Formula : n In the output, C [x; k] denotes the binomial coefficient x k!(xk)! when x is a non-negative integer, and zero otherwise. 4.2. <p> the n fi n Triangular Matrix Product problem the Diophantine system is az = N b + c where a = 6 4 0 1 0 1 0 0 1 0 1 0 0 1 7 5 ; b = 6 4 2 0 7 5 (11) first case, In <ref> [1] </ref>:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 1, 0, 0, 0-, -0,-1, 1, 0, 1, 0-, In [3]:= b = -3, 2, 0, 0-; c = --2,-1, 0, 0-; In [4]:= DiophantineGF [a, b, c] t 3 In [5]:= formula Binomial Formula : C [1 + n, 2] n <p> fi n matrix the Diophantine system is az = N b + c where a = 6 6 4 1 1 0 1 0 0 0 1 0 1 0 0 1 0 3 7 7 : (12) Here b = [3; 0; 2; 0; 2] t and c = <ref> [2; 1; 1; 1; 1] </ref> t , for n = 2N . <p> The system for Gaussian elimination for n = 2N + 1 is given in (7). In this case c = <ref> [1; 1; 0; 1; 0] </ref> t and a and b are the same as above. <p> 1 0 3 2 1 1 5 ; c = 4 1 3 12 The Mathematica run gives the formula for d n in the power basis as well as in terms of binomial coefficients, resulting in d n = n 3 = n 3 + n + 2 In <ref> [1] </ref>:= &lt;< DiophantineGF.m In [2]:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In [4]:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In [5]:= formula Binomial Formula : C [n, 3] + 4 C [1 + n, 3] + C [2
Reference: 2. <author> Abdelhamid Benaini and Yves Robert. </author> <title> Spacetime-minimal systolic arrays for Gaussian elimination and the algebraic path problem. </title> <booktitle> In Proc. Int. Conf. on Application Specific Array Processors, </booktitle> <pages> 746-757, </pages> <address> Princeton, </address> <month> September </month> <year> 1990. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Adding the schedule constraint to system we already have, we obtain the augmented Diophantine system i + j + k = 3N 2 j + s 2 = 2N 1 k + s 4 = 2N 1 Here b = <ref> [3; 0; 2; 0; 2] </ref> t and c = [2; 1; 1; 1; 1] t . <p> Adding the schedule constraint to system we already have, we obtain the augmented Diophantine system i + j + k = 3N 2 j + s 2 = 2N 1 k + s 4 = 2N 1 Here b = [3; 0; 2; 0; 2] t and c = <ref> [2; 1; 1; 1; 1] </ref> t . The system for Gaussian elimination for n = 2N + 1 is i + j + k = 3N 1 j + s 2 = 2N k + s 4 = 2N which differs from the even case only in the vector c. <p> fi n Matrix-Vector Multiplication For the linear schedule of the Matrix-vector Product example, the augmented Diophantine system in (3) can be written in the form (9) where a = 4 1 0 1 0 3 2 1 1 5 ; c = 4 1 3 In [1]:= &lt;< DiophantineGF.m In <ref> [2] </ref>:= a = --1, 1, 0, 0-, -0, 1, 0, 1--; In [4]:= DiophantineGF [a, b, c] a http://www.cs.ucsb.edu/~omer/personal/abstracts/DiophantineGF.m 9 t 2 In [5]:= formula; Binomial Formula : C [n, 1] Power Formula : n In the output, C [x; k] denotes the binomial coefficient x k!(xk)! when x is a <p> Triangular Matrix Product problem the Diophantine system is az = N b + c where a = 6 4 0 1 0 1 0 0 1 0 1 0 0 1 7 5 ; b = 6 4 2 0 7 5 (11) first case, In [1]:= &lt;< DiophantineGF.m In <ref> [2] </ref>:= a = --1, 1, 1, 0, 0, 0-, -0,-1, 1, 0, 1, 0-, In [3]:= b = -3, 2, 0, 0-; c = --2,-1, 0, 0-; In [4]:= DiophantineGF [a, b, c] t 3 In [5]:= formula Binomial Formula : C [1 + n, 2] n (1 + n) Power <p> (11) first case, In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 1, 0, 0, 0-, -0,-1, 1, 0, 1, 0-, In [3]:= b = -3, 2, 0, 0-; c = --2,-1, 0, 0-; In [4]:= DiophantineGF [a, b, c] t 3 In [5]:= formula Binomial Formula : C <ref> [1 + n, 2] </ref> n (1 + n) Power Formula : --------- 2 Since the n in this formula is our N , substituting n=2, we find that a lower bound for the number of processors needed to satisfy the linear schedule t (i; j; k) = i + j + <p> Elimination For Gaussian Elimination without pivoting of an n fi n matrix the Diophantine system is az = N b + c where a = 6 6 4 1 1 0 1 0 0 0 1 0 1 0 0 1 0 3 7 7 : (12) Here b = <ref> [3; 0; 2; 0; 2] </ref> t and c = [2; 1; 1; 1; 1] t , for n = 2N . <p> fi n matrix the Diophantine system is az = N b + c where a = 6 6 4 1 1 0 1 0 0 0 1 0 1 0 0 1 0 3 7 7 : (12) Here b = [3; 0; 2; 0; 2] t and c = <ref> [2; 1; 1; 1; 1] </ref> t , for n = 2N . <p> 1 1 5 ; c = 4 1 3 12 The Mathematica run gives the formula for d n in the power basis as well as in terms of binomial coefficients, resulting in d n = n 3 = n 3 + n + 2 In [1]:= &lt;< DiophantineGF.m In <ref> [2] </ref>:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In [4]:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In [5]:= formula Binomial Formula : C [n, 3] + 4 C [1 + n, 3] + C [2 + n, 3] 3
Reference: 3. <author> Peter Cappello. </author> <title> A processor-time-minimal systolic array for cubical mesh algorithms. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 3(1) </volume> <pages> 4-13, </pages> <month> January </month> <year> 1992. </year> <title> (Erratum: </title> <address> 3(3):384, </address> <month> May, </month> <year> 1992). </year>
Reference-contexts: Adding the schedule constraint to system we already have, we obtain the augmented Diophantine system i + j + k = 3N 2 j + s 2 = 2N 1 k + s 4 = 2N 1 Here b = <ref> [3; 0; 2; 0; 2] </ref> t and c = [2; 1; 1; 1; 1] t . <p> a = 6 4 0 1 0 1 0 0 1 0 1 0 0 1 7 5 ; b = 6 4 2 0 7 5 (11) first case, In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 1, 0, 0, 0-, -0,-1, 1, 0, 1, 0-, In <ref> [3] </ref>:= b = -3, 2, 0, 0-; c = --2,-1, 0, 0-; In [4]:= DiophantineGF [a, b, c] t 3 In [5]:= formula Binomial Formula : C [1 + n, 2] n (1 + n) Power Formula : --------- 2 Since the n in this formula is our N , substituting <p> Elimination For Gaussian Elimination without pivoting of an n fi n matrix the Diophantine system is az = N b + c where a = 6 6 4 1 1 0 1 0 0 0 1 0 1 0 0 1 0 3 7 7 : (12) Here b = <ref> [3; 0; 2; 0; 2] </ref> t and c = [2; 1; 1; 1; 1] t , for n = 2N . <p> = n 3 = n 3 + n + 2 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In [4]:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In [5]:= formula Binomial Formula : C <ref> [n, 3] </ref> + 4 C [1 + n, 3] + C [2 + n, 3] 3 Power Formula : n 4.5. <p> 3 + n + 2 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In [4]:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In [5]:= formula Binomial Formula : C [n, 3] + 4 C <ref> [1 + n, 3] </ref> + C [2 + n, 3] 3 Power Formula : n 4.5. <p> [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In [4]:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In [5]:= formula Binomial Formula : C [n, 3] + 4 C [1 + n, 3] + C <ref> [2 + n, 3] </ref> 3 Power Formula : n 4.5.
Reference: 4. <author> Peter R. Cappello. </author> <title> A spacetime-minimal systolic array for matrix product. </title> <editor> In John V. McCanny, John McWhirter, and Earl E. Swartzlander, Jr., editors, </editor> <title> Systolic Array Processors, </title> <address> 347-356, Killarney, IRELAND, May 1989. </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: example, the augmented Diophantine system in (3) can be written in the form (9) where a = 4 1 0 1 0 3 2 1 1 5 ; c = 4 1 3 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 0, 0-, -0, 1, 0, 1--; In <ref> [4] </ref>:= DiophantineGF [a, b, c] a http://www.cs.ucsb.edu/~omer/personal/abstracts/DiophantineGF.m 9 t 2 In [5]:= formula; Binomial Formula : C [n, 1] Power Formula : n In the output, C [x; k] denotes the binomial coefficient x k!(xk)! when x is a non-negative integer, and zero otherwise. 4.2. <p> 0 0 1 7 5 ; b = 6 4 2 0 7 5 (11) first case, In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 1, 0, 0, 0-, -0,-1, 1, 0, 1, 0-, In [3]:= b = -3, 2, 0, 0-; c = --2,-1, 0, 0-; In <ref> [4] </ref>:= DiophantineGF [a, b, c] t 3 In [5]:= formula Binomial Formula : C [1 + n, 2] n (1 + n) Power Formula : --------- 2 Since the n in this formula is our N , substituting n=2, we find that a lower bound for the number of processors needed <p> for d n in the power basis as well as in terms of binomial coefficients, resulting in d n = n 3 = n 3 + n + 2 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In <ref> [4] </ref>:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In [5]:= formula Binomial Formula : C [n, 3] + 4 C [1 + n, 3] + C [2 + n, 3] 3 Power Formula : n 4.5. <p> as well as in terms of binomial coefficients, resulting in d n = n 3 = n 3 + n + 2 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In <ref> [4] </ref>:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In [5]:= formula Binomial Formula : C [n, 3] + 4 C [1 + n, 3] + C [2 + n, 3] 3 Power Formula : n 4.5.
Reference: 5. <author> Ph. Clauss, C. Mongenet, and G. R. Perrin. </author> <title> Calculus of space-optimal mappings of systolic algorithms on processor arrays. </title> <booktitle> In Proc. Int. Conf. on Application Specific Array Processors, </booktitle> <pages> 4-18, </pages> <address> Princeton, </address> <month> September </month> <year> 1990. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: the form (9) where a = 4 1 0 1 0 3 2 1 1 5 ; c = 4 1 3 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 0, 0-, -0, 1, 0, 1--; In [4]:= DiophantineGF [a, b, c] a http://www.cs.ucsb.edu/~omer/personal/abstracts/DiophantineGF.m 9 t 2 In <ref> [5] </ref>:= formula; Binomial Formula : C [n, 1] Power Formula : n In the output, C [x; k] denotes the binomial coefficient x k!(xk)! when x is a non-negative integer, and zero otherwise. 4.2. <p> 6 4 2 0 7 5 (11) first case, In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 1, 1, 0, 0, 0-, -0,-1, 1, 0, 1, 0-, In [3]:= b = -3, 2, 0, 0-; c = --2,-1, 0, 0-; In [4]:= DiophantineGF [a, b, c] t 3 In <ref> [5] </ref>:= formula Binomial Formula : C [1 + n, 2] n (1 + n) Power Formula : --------- 2 Since the n in this formula is our N , substituting n=2, we find that a lower bound for the number of processors needed to satisfy the linear schedule t (i; j; <p> binomial coefficients, resulting in d n = n 3 = n 3 + n + 2 In [1]:= &lt;< DiophantineGF.m In [2]:= a = --1, 0, 0, 1, 0, 0-, -0, 0, 1, 0, 0, 1--; In [4]:= DiophantineGF [a, b, c] 2 Out [4]= ---------------- (-1 + t) In <ref> [5] </ref>:= formula Binomial Formula : C [n, 3] + 4 C [1 + n, 3] + C [2 + n, 3] 3 Power Formula : n 4.5. <p> linear Diophantine system z 1 z 2 + 2z 3 = n + 1 2z 1 + z 3 + z 5 = n + 3 DiophantineGF.m gives the generating function of the number of solutions d n of this system in non-negative integers as 2 2 3 4 Out <ref> [5] </ref>= ------------------------ (-1 + t) (1 + t) (1 + t + t ) = t + 3 t + 5 t + 7 t + 9 t + 12 t + 14 t + O [t] In particular, we see from the Taylor series expansion of the generating function above
Reference: 6. <author> Jose A. B. Fortes, King-Sun Fu, and Benjamin W. Wah. </author> <title> Systematic design approaches for algorithmically specified systolic arrays. </title> <editor> In Veljko M. Milutinovic, editor, </editor> <booktitle> Computer Architecture: Concepts and Systems, chapter 11, </booktitle> <pages> 454-494. </pages> <publisher> North-Holland, Elsevier Science Publishing Co., </publisher> <address> New York, NY 10017, </address> <year> 1988. </year>
Reference: 7. <author> Jose A. B. Fortes and Dan I. Moldovan. </author> <title> Parallelism detection and algorithm transformation techniques useful for VLSI architecture design. </title> <journal> J. Parallel Distrib. Com-put, </journal> <volume> 2 </volume> <pages> 277-301, </pages> <month> Aug. </month> <year> 1985. </year>
Reference: 8. <author> Jose A. B. Fortes and F. Parisi-Presicce. </author> <title> Optimal linear schedules for the parallel execution of algorithms. </title> <booktitle> In Int. Conf. on Parallel Processing, </booktitle> <pages> 322-328, </pages> <month> Aug. </month> <year> 1984. </year>
Reference: 9. <author> Basile Louka and Maurice Tchuente. </author> <title> An optimal solution for Gauss-Jordon elimination on 2D systolic arrays. </title> <editor> In John V. McCanny, John McWhirter, and Earl E. Swartzlander Jr., editors, </editor> <title> Systolic Array Processors, </title> <address> 264-274, Killarney, IRE-LAND, May 1989. </address> <publisher> Prentice-Hall. </publisher>
Reference: 10. <author> Chris Scheiman and Peter Cappello. </author> <title> A processor-time minimal systolic array for the 3d rectilinear mesh. </title> <booktitle> In Proc. Int. Conf. on Application Specific Array Processors, </booktitle> <pages> 26-33, </pages> <address> Strasbourg, FRANCE, </address> <month> July </month> <year> 1995. </year>
Reference: 11. <author> Chris Scheiman and Peter R. Cappello. </author> <title> A processor-time minimal systolic array for transitive closure. </title> <booktitle> In Proc. Int. Conf. on Application Specific Array Processors, </booktitle> <pages> 19-30, </pages> <address> Princeton, </address> <month> September </month> <year> 1990. </year> <journal> IEEE Computer Society. </journal> <volume> 23 </volume>
Reference: 12. <author> Chris Scheiman and Peter R. Cappello. </author> <title> A processor-time minimal systolic array for transitive closure. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 3(3) </volume> <pages> 257-269, </pages> <month> May </month> <year> 1992. </year>
Reference: 13. <author> Chris J. Scheiman and Peter Cappello. </author> <title> A period-processor-time-minimal schedule for cubical mesh algorithms. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 5(3) </volume> <pages> 274-280, </pages> <month> March </month> <year> 1994. </year>
Reference: 14. <author> Weijia Shang and Jose A. B. Fortes. </author> <title> Time optimal linear schedules for algorithms with uniform dependencies. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(6) </volume> <pages> 723-742, </pages> <month> June </month> <year> 1991. </year>
Reference: 15. <author> Yiwan Wong and Jean-Marc Delosme. </author> <title> Optimization of processor count for systolic arrays. </title> <institution> Dept. of Computer Sci. RR-697, Yale Univ., </institution> <month> May </month> <year> 1989. </year>
Reference: 16. <author> Yiwan Wong and Jean-Marc Delosme. </author> <title> Space-optimal linear processor allocation for systolic array synthesis. </title> <editor> In V.K. Prasanna and L. H. Canter, editors, </editor> <booktitle> Proc. 6th Int. Parallel Processing Symposium, </booktitle> <pages> 275-282. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Beverly Hills, </address> <month> March </month> <year> 1992. </year>
Reference: 17. <author> Peter R. Cappello. </author> <title> VLSI Architectures for Digital Signal Processing. </title> <type> PhD thesis, </type> <institution> Princeton University, Princeton, NJ, </institution> <month> Oct </month> <year> 1982. </year>
Reference: 18. <author> Peter R. Cappello and Kenneth Steiglitz. </author> <title> Unifying VLSI array design with geometric transformations. </title> <editor> In H. J. Siegel and Leah Siegel, editors, </editor> <booktitle> Proc. Int. Conf. on Parallel Processing, </booktitle> <pages> 448-457, </pages> <address> Bellaire, MI, </address> <month> Aug. </month> <year> 1983. </year>
Reference: 19. <author> Peter R. Cappello and Kenneth Steiglitz. </author> <title> Unifying VLSI array design with linear transformations of space-time. </title> <editor> In Franco P. Preparata, editor, </editor> <booktitle> Advances in Computing Research, volume 2: VLSI theory, </booktitle> <pages> 23-65. </pages> <publisher> JAI Press, Inc., </publisher> <address> Greenwich, CT, </address> <year> 1984. </year>
Reference: 20. <author> Alain Darte, Leonid Khachiyan, and Yves Robert. </author> <title> Linear scheduling is close to optimal. </title> <editor> In Jose Fortes, Edward Lee, and Teresa Meng, editors, </editor> <title> Application Specific Array Processors, </title> <address> 37-46. </address> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1992. </year>
Reference: 21. <author> Bradley R. Engstrom and Peter R. Cappello. </author> <title> The SDEF programming system. </title> <journal> J. of Parallel and Distributed Computing, </journal> <volume> 7 </volume> <pages> 201-231, </pages> <year> 1989. </year>
Reference: 22. <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference: 23. <author> Gene H. Golub and Charles F. Van Loan. </author> <title> Matrix Computations, 2nd Edition, </title> <publisher> The Johns Hopkins University Press, </publisher> <address> Baltimore, </address> <year> 1990. </year>
Reference: 24. <author> Richard M. Karp, Richard E. Miller, and Shmuel Winograd. </author> <title> Properties of a model for parallel computations: Determinacy, termination, queueing. </title> <journal> SIAM J. Appl. Math, </journal> <volume> 14 </volume> <pages> 1390-1411, </pages> <year> 1966. </year>
Reference: 25. <author> Richard M. Karp, Richard E. Miller, and Shmuel Winograd. </author> <title> The organization of computations for uniform recurrence equations. </title> <journal> J. ACM, </journal> <volume> 14 </volume> <pages> 563-590, </pages> <year> 1967. </year>
Reference: 26. <author> H.-T. Kung and Charles E. Leiserson. </author> <title> Algorithms for VLSI processor arrays. In Introduction to VLSI Systems, </title> <address> 271-292. </address> <publisher> Addison-Wesley Publishing Co, </publisher> <address> Menlo Park, CA, </address> <year> 1980. </year>
Reference: 27. <author> Leslie Lamport. </author> <title> The parallel execution of Do-Loops. </title> <journal> Comm. of the ACM, </journal> <volume> 17(2) </volume> <pages> 83-93, </pages> <month> Feb. </month> <year> 1974. </year>
Reference: 28. <author> Percy A. MacMahon. </author> <title> Memoir on the Theory of the Partitions of Numbers- Part II, in Collected Papers, Vol. I, Combinatorics, </title> <editor> George E. Andrews, Editor, </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MASS, </address> <year> 1978, </year> <pages> 1138-1188. </pages>
Reference: 29. <editor> Percy A. MacMahon. </editor> <booktitle> Memoir on the Theory of the Partitions of Numbers- Part IV, in Collected Papers, </booktitle> <volume> Vol. I, </volume> <editor> Combinatorics, George E. Andrews, Editor, </editor> <publisher> The 24 MIT Press, </publisher> <address> Cambridge, MASS, </address> <year> 1978, </year> <pages> 1292-1314. </pages>
Reference: 30. <author> Percy A. MacMahon. </author> <title> Application of the Partition Analysis to the study of the properties of any system of consecutive integers. in Collected Papers, Vol. I, Combinatorics, </title> <editor> George E. Andrews, Editor, </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MASS, </address> <year> 1978, </year> <pages> 1189-1211. </pages>
Reference: 31. <author> Percy A. MacMahon. </author> <title> The Diophantine Inequality x y. in Collected Papers, Vol. I, Combinatorics, </title> <editor> George E. Andrews, Editor, </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MASS, </address> <year> 1978, </year> <pages> 1212-1232. </pages>
Reference: 32. <author> Percy A. MacMahon. </author> <title> Note on the The Diophantine Inequality x y. in Collected Papers, Vol. I, Combinatorics, </title> <editor> George E. Andrews, Editor, </editor> <publisher> The MIT Press, </publisher> <address> Cambridge, MASS, </address> <year> 1978, </year> <pages> 1233-1246. </pages>
Reference: 33. <author> Dan I. Moldovan. </author> <title> On the design of algorithms for VLSI systolic arrays. </title> <journal> Proc. IEEE, </journal> <volume> 71(1) </volume> <pages> 113-120, </pages> <month> Jan. </month> <year> 1983. </year>
Reference: 34. <author> Patrice Quinton. </author> <title> Automatic synthesis of systolic arrays from uniform recurrent equations. </title> <booktitle> In Proc. 11th Ann. Symp. on Computer Architecture, </booktitle> <pages> 208-214, </pages> <year> 1984. </year>
Reference: 35. <author> Sanjay V. Rajopadhye, S. Purushothaman, and Richard M. Fujimoto. </author> <title> On synthesizing systolic arrays from recurrence equations with linear dependencies. </title> <editor> In K. V. Nori, editor, </editor> <booktitle> Lecture Notes in Computer Science, number 241: Foundations of Software Technology and Theoretical Computer Science, </booktitle> <pages> 488-503. </pages> <publisher> Springer Verlag, </publisher> <month> December </month> <year> 1986. </year>
Reference: 36. <author> Sartaj Sahni. </author> <title> Computational related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 3 </volume> <pages> 262-279, </pages> <year> 1974. </year>
Reference: 37. <author> Chris Scheiman. </author> <title> Mapping Fundamental Algorithms onto Multiprocessor Architectures. </title> <type> Ph.D. Thesis, </type> <institution> UC Santa Barbara, Dept. of Computer Science, </institution> <month> Dec., </month> <year> 1993. </year>
Reference: 38. <author> Richard P. </author> <title> Stanley Linear homogeneous diophantine equations and magic labelings of graphs. </title> <journal> Duke Math. J., </journal> <volume> 40 </volume> <pages> 607-632, </pages> <year> 1973. </year>
Reference: 39. <author> Richard P. Stanley. </author> <title> Enumerative Combinatorics, Volume I , Wadsworth & Brooks/Cole, </title> <address> Monterey, CA 1986. </address>
Reference: 40. <author> Bernd Sturmfels. </author> <title> Grobner Bases and Convex Polytopes, </title> <publisher> AMS University Lecture Series, </publisher> <address> Providence, RI 1995. </address>
Reference: 41. <author> Bernd Sturmfels. </author> <title> On Vector Partition Functions, </title> <journal> J. Combinatorial Theory, Series A, </journal> <volume> 72 </volume> <pages> 302-309, </pages> <year> 1995. </year>
Reference: 42. <author> H. Le Verge, C. Mauras, and P. </author> <title> Quinton. The ALPHA language and its use for the design of systolic arrays. </title> <journal> J. VLSI Signal Processing, </journal> <volume> 3 </volume> <pages> 173-182, </pages> <year> 1991. </year> <month> 25 </month>
References-found: 42

