URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/dac98_erl_tr.KBS.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/kukimoto/
Root-URL: 
Email: fkukimoto,braytong@eecs.berkeley.edu psawkar@ichips.intel.com  
Title: Delay-Optimal Technology Mapping by DAG Covering  
Author: Yuji Kukimoto Robert K. Brayton Prashant Sawkary 
Date: October 10, 1997  
Note: Strategic CAD Laboratories, Intel Corporation Hillsboro, OR 97124y  
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We propose an optimal algorithm for delay minimal technology mapping for library-based designs. We show that subject graphs need not be decomposed into trees for delay minimization; they can be mapped directly as DAGs. Experimental results demonstrate that significant delay improvement is possible by this new approach.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Cong and Y. Ding. </author> <title> An optimal technology mapping algorithm for delay optimization in lookup-table based FPGA designs. </title> <booktitle> In Proceedings of IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 48-53, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Minimum-delay mapping, on the other hand, was shown for LUT-based FPGAs to be solvable in polynomial time by Cong et al. in <ref> [1, 2] </ref>. Here the given circuit is directly mapped without decomposing its DAG structure to trees in this algorithm unlike conventional library-based mapping. 2 In this paper we consider the minimum-delay technology mapping problem for library-based designs where a subject graph is a DAG. <p> As in the library-based mapping, once a network is restricted either to a tree, the problem can be solved optimally in polynomial time [7]. The minimum-delay technology mapping problem, however, has a different story. Cong et al. showed in <ref> [1, 2] </ref> that the problem is solvable in polynomial time even for DAG networks.
Reference: [2] <author> J. Cong and Y. Ding. FlowMap: </author> <title> An optimal technology mapping algorithm for delay optimization in lookup-table based FPGA designs. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(1) </volume> <pages> 1-12, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Minimum-delay mapping, on the other hand, was shown for LUT-based FPGAs to be solvable in polynomial time by Cong et al. in <ref> [1, 2] </ref>. Here the given circuit is directly mapped without decomposing its DAG structure to trees in this algorithm unlike conventional library-based mapping. 2 In this paper we consider the minimum-delay technology mapping problem for library-based designs where a subject graph is a DAG. <p> Here the given circuit is directly mapped without decomposing its DAG structure to trees in this algorithm unlike conventional library-based mapping. 2 In this paper we consider the minimum-delay technology mapping problem for library-based designs where a subject graph is a DAG. Careful analysis of <ref> [2] </ref> shows that the basic dynamic programming approach in [2] is not specific to FPGA mapping and can be easily adapted to library-based mapping. This leads to a linear time algorithm for minimum-delay DAG covering under load-independent delay models. <p> Careful analysis of <ref> [2] </ref> shows that the basic dynamic programming approach in [2] is not specific to FPGA mapping and can be easily adapted to library-based mapping. This leads to a linear time algorithm for minimum-delay DAG covering under load-independent delay models. <p> This paper is organized as follows. Section 2 reviews library-based technology mapping and recent work on delay-optimal FPGA mapping. The optimal delay mapping algorithm for FPGAs presented in <ref> [2] </ref> is overviewed. Based on this algorithm Section 3 shows that the basic algorithmic principle of [2] is not limited to FPGAs and discusses how the algorithm can be adapted to library-based technology mapping. Section 4 discusses an extension of this idea to sequential circuits under consideration of retiming. <p> This paper is organized as follows. Section 2 reviews library-based technology mapping and recent work on delay-optimal FPGA mapping. The optimal delay mapping algorithm for FPGAs presented in <ref> [2] </ref> is overviewed. Based on this algorithm Section 3 shows that the basic algorithmic principle of [2] is not limited to FPGAs and discusses how the algorithm can be adapted to library-based technology mapping. Section 4 discusses an extension of this idea to sequential circuits under consideration of retiming. <p> In fact the DAG covering approach gave results of lesser quality than the tree-based approach. Although they also described an idea on node duplication similar to <ref> [2] </ref> to be detailed later, it was apparently only tried for area optimization and no results are reported on this approach in [6]. 2.2 Technology Mapping for LUT-based FPGAs Due to their unique architecture the technology mapping problem for FPGAs has been tackled in completely different ways from library-based technology mapping. <p> As in the library-based mapping, once a network is restricted either to a tree, the problem can be solved optimally in polynomial time [7]. The minimum-delay technology mapping problem, however, has a different story. Cong et al. showed in <ref> [1, 2] </ref> that the problem is solvable in polynomial time even for DAG networks. <p> The minimum-delay technology mapping problem, however, has a different story. Cong et al. showed in [1, 2] that the problem is solvable in polynomial time even for DAG networks. We will have a close look at the FlowMap algorithm presented in <ref> [2] </ref> next since this gives the basis of our proposed algorithm. 2.3 Delay-Optimal Technology Mapping for FPGAs Assume that a network is decomposed into a k-bounded network [2], which is a Boolean network where the number of fanins of each node is less than or equal to k. <p> We will have a close look at the FlowMap algorithm presented in <ref> [2] </ref> next since this gives the basis of our proposed algorithm. 2.3 Delay-Optimal Technology Mapping for FPGAs Assume that a network is decomposed into a k-bounded network [2], which is a Boolean network where the number of fanins of each node is less than or equal to k. If a given network is not k-bounded, simple decomposition can yield an equivalent k-bounded network. <p> Although explicit enumeration of all valid cuts is possible by a brute-force approach, the complexity is pseudo polynomial O (n k ), where n is the number of nodes in a given network. <ref> [2] </ref> showed that this optimal depth computation at each node can be 1 Strictly speaking the library need not contain all the 2 2 k functions since some are equivalent to each other under input permutation and having one representative is good enough. <p> More precisely once the fanin cone of the node is extracted, the standard matching procedure against pattern graphs can be applied to exhaustively check all the successful matches. This way the best delay achievable at each intermediate node can be computed in a similar way to <ref> [2] </ref>. The only difference is that actual pin-to-pin delays of gates specified in a given 2 It is interesting to note that [2] has a comment as follows. <p> This way the best delay achievable at each intermediate node can be computed in a similar way to <ref> [2] </ref>. The only difference is that actual pin-to-pin delays of gates specified in a given 2 It is interesting to note that [2] has a comment as follows. Our result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks.(page 2 [2]) 6 library need to be used in our case instead of unit delay in [2]. <p> difference is that actual pin-to-pin delays of gates specified in a given 2 It is interesting to note that <ref> [2] </ref> has a comment as follows. Our result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks.(page 2 [2]) 6 library need to be used in our case instead of unit delay in [2]. As with FPGA mapping, the principle of optimality is still valid here. <p> interesting to note that <ref> [2] </ref> has a comment as follows. Our result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks.(page 2 [2]) 6 library need to be used in our case instead of unit delay in [2]. As with FPGA mapping, the principle of optimality is still valid here. Notice that as long as delay is optimized, any DAG pattern graph can be used directly without losing the optimality, i.e. it is not necessary to restrict the library to pattern graphs of trees and leaf DAGs. <p> the graph match algorithm makes the algorithm search all extended matches instead of all standard matches without changing its asymptotic complexity. 3.3 Constructing an Optimum Mapping Once a (best delay, best gate)-pair is computed at each node, a delay-optimal network can be constructed in exactly the same way as in <ref> [2] </ref>. We maintain a queue which 8 contains nodes to be created in the final mapping. This queue is initialized to the set of all primary outputs. A node is picked up from the queue and the best gate at the node is created in the mapping. <p> This procedure is used repeatedly to guide a binary search to determine the minimum cycle time achievable by retiming and optimal technology mapping. The core of this decision procedure is again a labeling scheme quite similar to the one used in FlowMap <ref> [2] </ref>. All k-cuts at each intermediate node are explored by considering retiming possibility. This is again done implicitly by converting the original problem to a flow network problem. This step of examining all k cuts can be replaced by pattern matching as was done for combinational mapping.
Reference: [3] <author> J. Cong and Y. Ding. </author> <title> On area/depth trade-off in LUT-based FPGA technology mapping. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 2(2) </volume> <pages> 137-148, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Therefore at each intermediate node the fastest mapping is simply created no matter how critical the node is. By constructing slower but smaller mapping for non-critical subnetworks we can have a better control over area increase. Cong et al. <ref> [3] </ref> already have results on area-delay tradeoff for FPGA mapping based on the FlowMap algorithm. An extension of this idea to library-based mapping is currently being investigated. Acknowledgments This work is partially supported by SRC-97-DC-324.
Reference: [4] <author> J. Cong and Y. Ding. </author> <title> Combinational logic synthesis for lut based field programmable gate arrays. </title> <journal> ACM Transanctions on Design Automation of Electronic Systems, </journal> <volume> 1(2) </volume> <pages> 145-204, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: It is not practical to follow the same approach as library-based technology mapping since one needs to generate pattern graphs for all 2 2 k k-input functions. Based on this observation many ideas have been proposed for the FPGA mapping problem again under different cost criteria <ref> [4] </ref>. As for minimum area mapping Levin et al. [11] and Farrahi et al. [7] proved that the problem is NP-hard for k = 4 and k 5 respectively.
Reference: [5] <author> J. Cong and C. Wu. </author> <title> An improved algorithm for performance optimal technology mapping with retiming in LUT-based FPGA design. </title> <booktitle> In Proceedings of IEEE International Conference on Computer Design, </booktitle> <pages> pages 572-578, </pages> <month> October </month> <year> 1996. </year> <month> 14 </month>
Reference-contexts: Retime an initial circuit 2. Perform technology mapping of the combinational portion of the circuit 3. Retime the resulting mapped circuit. [12] proposed a polynomial-time algorithm for computing the minimum cycle-time mapping among all the mapped circuits obtained by the above transformation, which was later improved in <ref> [5] </ref>. The key ingredient is a polynomial-time decision procedure which determines whether there exists a mapping whose cycle time is less than or equal to a given value.
Reference: [6] <author> E. Detjens, G. Gannot, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang. </author> <title> Technology mapping in MIS. </title> <booktitle> In Proceedings of IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 116-119, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: So far we have focused on the case where a subject graph is a tree. To conclude this subsection we review previous work on DAG covering without tree decomposition. Detjens et al. studied this problem for area minimization in <ref> [6] </ref>, but since a heuristic approach was taken for covering, the results were not impressive. In fact the DAG covering approach gave results of lesser quality than the tree-based approach. <p> In fact the DAG covering approach gave results of lesser quality than the tree-based approach. Although they also described an idea on node duplication similar to [2] to be detailed later, it was apparently only tried for area optimization and no results are reported on this approach in <ref> [6] </ref>. 2.2 Technology Mapping for LUT-based FPGAs Due to their unique architecture the technology mapping problem for FPGAs has been tackled in completely different ways from library-based technology mapping.
Reference: [7] <author> A. Farrahi and M. Sarrafzadeh. </author> <title> Complexity of the lookup-table minimization problem for FPGA technology mapping. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(11) </volume> <pages> 1319-1332, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Based on this observation many ideas have been proposed for the FPGA mapping problem again under different cost criteria [4]. As for minimum area mapping Levin et al. [11] and Farrahi et al. <ref> [7] </ref> proved that the problem is NP-hard for k = 4 and k 5 respectively. Minimum-delay mapping, on the other hand, was shown for LUT-based FPGAs to be solvable in polynomial time by Cong et al. in [1, 2]. <p> The minimum-area technology mapping problem for LUT-based FPGAs was shown to be NP-hard for k = 4 in [11] and for k 5 in <ref> [7] </ref>. As in the library-based mapping, once a network is restricted either to a tree, the problem can be solved optimally in polynomial time [7]. The minimum-delay technology mapping problem, however, has a different story. <p> The minimum-area technology mapping problem for LUT-based FPGAs was shown to be NP-hard for k = 4 in [11] and for k 5 in <ref> [7] </ref>. As in the library-based mapping, once a network is restricted either to a tree, the problem can be solved optimally in polynomial time [7]. The minimum-delay technology mapping problem, however, has a different story. Cong et al. showed in [1, 2] that the problem is solvable in polynomial time even for DAG networks.
Reference: [8] <author> K. Keutzer. DAGON: </author> <title> Technology binding and local optimization by DAG matching. </title> <booktitle> In Proceedings of 24th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 617-623, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Technology mapping was initially done by rule-based transformations in early 80's. The approach is ad-hoc and has no guarantee about mapping quality. Furthermore different sets of transformation rules need to be maintained for different libraries. In 1987 Keutzer <ref> [8] </ref> proposed an algorithmic approach to the technology mapping problem, in which he observed similarity between this problem and the code optimization problem 1 for programming languages and adapted an existing tree-covering technique for the latter problem to technology mapping. <p> Section 6 concludes the paper with future directions of this work. 2 Preliminaries 2.1 Library-Based Technology Mapping We will briefly overview basic concepts of library-based technology mapping. We will closely follow a strategy proposed by Keutzer <ref> [8] </ref>. Given a combinational Boolean network, it is first decomposed into a NAND2/INV network by decomposing each node in the network into a NAND2/INV structure. The resulting network, called a subject graph, is a Boolean network in which every node is either a 2-input NAND or an inverter. <p> Pattern matching between a subject graph and a pattern graph in the context of technology mapping was studied extensively by Keutzer <ref> [8] </ref> and Rudell [13]. A match between a subject graph G s = (V s ; E s ) and a pattern graph G p = (V p ; E p ) is defined as follows [13].
Reference: [9] <author> K. Keutzer and D. Richards. </author> <title> Computational complexity of logic synthesis and optimization. </title> <booktitle> In Proceedings of International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: A subject graph is a directed acyclic graph (DAG) in general since it is derived from a given network. Keutzer showed that if a subject graph is a DAG, graph covering for minimum area mapping is NP-hard <ref> [9] </ref>. He further proposed a linear-time dynamic programming algorithm which guarantees optimal results for the case where a subject graph and pattern graphs are trees. These observations led naturally to the following three-step approach. 1. Decompose a subject DAG into a disjoint set of trees 2. <p> Keutzer investigated the computational complexity of the minimum-area technology mapping problem in <ref> [9] </ref> and proved that if a subject graph is a DAG, the problem is NP-hard. Having demonstrated the inherent complexity of the original problem, he considered the case where a subject graph and pattern graphs are trees.
Reference: [10] <author> E. Lehman, Y. Watanabe, J. Grodstein, and H. Harkness. </author> <title> Logic decomposition during technology mapping. </title> <booktitle> In Proceedings of IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 264-271, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: An interesting fact is that they directly started looking at tree covering without studying the complexity of DAG covering for minimum delay. This was even true for a more recent work by Lehman and Watanabe <ref> [10] </ref>. In parallel to these works on library-based technology mapping the emergence of FPGAs posed a new technology mapping problem in early 90's. LUT-based FPGAs can implement any function of k inputs by a single LUT, where k is a fixed constant depending on a given technology. <p> A simple modification to an existing FPGA technology mapping algorithm for minimum-cycle time [12] leads to an algorithm for optimal cycle-time library-based technology mapping. An idea of combining this work with Lehman et al.'s work <ref> [10] </ref> is also discussed. Experimental results are shown in Section 5 to demonstrate the effectiveness of this DAG covering approach compared with the traditional tree covering. <p> Since a single subject graph is chosen among a huge number of different decompositions without knowing an actual library to be used, it is likely that many potentially good mappings are simply not explored due to this initial choice. Lehman et al. <ref> [10] </ref> have recently resolved this issue by encoding various decompositions into a single extended subject graph called mapping graph and performing technology mapping on it. <p> As discussed in the previous sections the delay model used in this experiment is the intrinsic delay model where a fixed, load-independent delay is given between each input and the output of a gate. This is in fact the delay model used in <ref> [10] </ref>. Although loading effects are certainly an important factor in delays, there are several justifications. In design scenarios where continuous resizing of any gate is permissible one way to capture this flexibility in technology mapping is to approximate this flexibility by having many discretely resized gates. <p> In design scenarios where continuous resizing of any gate is permissible one way to capture this flexibility in technology mapping is to approximate this flexibility by having many discretely resized gates. Unfortunately this approach is known to be very expensive. The approach taken in <ref> [10] </ref> is to pick a single delay for each gate and perform technology mapping by ignoring loads. Each gate in the final mapping is then continuously resized by considering actual loads so that the delay matches the one associated with the gate.
Reference: [11] <author> I. Levin and R. Y. Pinter. </author> <title> Realizing expression graphs using table-lookup FPGAs. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <pages> pages 306-311, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Based on this observation many ideas have been proposed for the FPGA mapping problem again under different cost criteria [4]. As for minimum area mapping Levin et al. <ref> [11] </ref> and Farrahi et al. [7] proved that the problem is NP-hard for k = 4 and k 5 respectively. Minimum-delay mapping, on the other hand, was shown for LUT-based FPGAs to be solvable in polynomial time by Cong et al. in [1, 2]. <p> Even if the minimum-area tree covering for library-based designs can be solved in time linear in the size of pattern graphs, the number of gates makes the algorithm highly inefficient. The minimum-area technology mapping problem for LUT-based FPGAs was shown to be NP-hard for k = 4 in <ref> [11] </ref> and for k 5 in [7]. As in the library-based mapping, once a network is restricted either to a tree, the problem can be solved optimally in polynomial time [7]. The minimum-delay technology mapping problem, however, has a different story.
Reference: [12] <author> P. Pan and C. L. Liu. </author> <title> Optimal clock period FPGA technology mapping for sequential circuits. </title> <booktitle> In Proceedings of 33rd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 720-725, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Section 4 discusses an extension of this idea to sequential circuits under consideration of retiming. A simple modification to an existing FPGA technology mapping algorithm for minimum-cycle time <ref> [12] </ref> leads to an algorithm for optimal cycle-time library-based technology mapping. An idea of combining this work with Lehman et al.'s work [10] is also discussed. Experimental results are shown in Section 5 to demonstrate the effectiveness of this DAG covering approach compared with the traditional tree covering. <p> We only consider sequential circuits with edge-triggered latches all of which are controlled by a single clock. This problem was studied for LUT-based FPGAs by Pan and Liu <ref> [12] </ref>. <p> DAG mapping for lib2.genlib 1. Retime an initial circuit 2. Perform technology mapping of the combinational portion of the circuit 3. Retime the resulting mapped circuit. <ref> [12] </ref> proposed a polynomial-time algorithm for computing the minimum cycle-time mapping among all the mapped circuits obtained by the above transformation, which was later improved in [5].
Reference: [13] <author> R. Rudell. </author> <title> Logic synthesis for VLSI design. </title> <type> Technical Report UCB/ERL M89/49, </type> <institution> University of California, Berkeley, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: Glue the results together. This separation of the problem again has become a standard approach due to the theoretical justification about the complexity of DAG covering. Inspired by Keutzer's result technology mapping has been studied extensively to optimize different criteria. Rudell <ref> [13] </ref> worked on minimum-delay technology mapping and showed that if loading effects are completely ignored, the minimum-delay mapping problem for subject trees can be solved optimally by dynamic programming in linear time. <p> Probably it was simply assumed that the problem is NP-hard without giving much thought. Now consider the case where some pattern graphs are DAGs. Rudell showed that as long as those are leaf DAGs, the tree covering approach can be used without any modification <ref> [13] </ref>. A leaf DAG is a DAG in which the only nodes with multiple fanouts are primary inputs. An XOR gate and a multiplexor gate have leaf DAG pattern graphs and thus can be handled without any problem. <p> Pattern matching between a subject graph and a pattern graph in the context of technology mapping was studied extensively by Keutzer [8] and Rudell <ref> [13] </ref>. A match between a subject graph G s = (V s ; E s ) and a pattern graph G p = (V p ; E p ) is defined as follows [13]. <p> a pattern graph in the context of technology mapping was studied extensively by Keutzer [8] and Rudell <ref> [13] </ref>. A match between a subject graph G s = (V s ; E s ) and a pattern graph G p = (V p ; E p ) is defined as follows [13]. <p> However, in the conventional tree-covering based approach such a match is invalid, i.e. all fanouts of a subject graph node matched with an intermediate pattern graph node need to be covered by the same pattern. A match satisfying this additional constraint is called an exact match <ref> [13] </ref> and defined as follows. <p> Rudell proposed an algorithm called graph match <ref> [13] </ref> for the general case where both a subject graph and a pattern graph are DAGs. We can simply use this matching algorithm to enumerate all successful standard matches instead of exact matches. <p> Once the queue becomes empty, the mapping is complete. 3.4 Complexity of DAG Mapping for Delay Minimization An application of graph match to enumerate all successful matches at a single node is O (p) <ref> [13] </ref>, where p is the number of nodes in the entire unique pattern graphs 3 . Since this procedure is called once at each node in a subject graph, the complexity of the labeling step is O (sp), where s is the number of nodes in the subject graph. <p> The cone rooted 3 Note that p is not equal to the number of nodes in the entire pattern graphs since during matching a single pattern graph is tried for all possible permutations of its inputs. p is thus the number of nodes in the expanded pattern graphs. See <ref> [13] </ref> for details. 9 at the middle node in the subject graph is duplicated in this mapping, which makes effective use of the pattern graph possible. This example also illustrates how multiple-fanout points are created in DAG mapping.
Reference: [14] <author> H. J. Touati. </author> <title> Performance-oriented technology mapping. </title> <type> Technical Report UCB/ERL M90/109, </type> <institution> University of California, Berkeley, </institution> <month> November </month> <year> 1990. </year> <month> 15 </month>
Reference-contexts: He also considered the minimum-delay mapping problem for trees under loading effects and showed that by maintaining the best mapping for each possible load at each node the same dynamic programming approach can guarantee optimal results. Touati <ref> [14] </ref> further refined this idea later by combining the optimal tree mapping with sophisticated buffer tree construction. An interesting fact is that they directly started looking at tree covering without studying the complexity of DAG covering for minimum delay. <p> Since p is a constant defined by a given technology, the procedure is linear in the size of a subject graph. 3.5 Comparison between DAG Mapping and Tree Mapping In the past, performance-oriented technology mapping has been done by a combination of tree covering and buffer tree construction <ref> [14] </ref>. The fundamental limitation of this conventional tree-covering approach is that the search space is highly limited by the structure of a given subject graph since multiple-fanout points in the subject graph are completely preserved in the final results. <p> Each gate in the final mapping is then continuously resized by considering actual loads so that the delay matches the one associated with the gate. Even without the capability of continuous resizing, the buffer tree construction methods of <ref> [14] </ref> can be used later at multiple fanout points to reduce load dependency of delays. Therefore the use of this delay model is at least justified as an approximation to the minimum-delay mapping problem under realistic delay models.
References-found: 14

