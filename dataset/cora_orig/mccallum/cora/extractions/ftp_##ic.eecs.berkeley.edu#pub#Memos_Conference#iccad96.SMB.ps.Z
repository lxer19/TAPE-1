URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iccad96.SMB.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~vigyan/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Email: vigyan@cadence.com  malik@princeton.edu  brayton@eecs.berkeley.edu  
Title: The Case for Retiming with Explicit Reset Circuitry  
Author: Vigyan Singhal Sharad Malik Robert K. Brayton 
Address: Berkeley, CA 94704  Princeton, NJ 08544  Berkeley, CA 94720  
Affiliation: Cadence Berkeley Labs  Princeton University  University of California at Berkeley  
Abstract: Retiming is often used to optimize synchronous sequential circuits for area or delay or both. If the latches 1 that are retimed have a hardware reset value, the initial state of the circuit must also be retimed, i.e. an initial state must be derived for the retimed circuit. Previously, it has been suggested that this can be avoided if the hardware reset signals are represented explicitly. However, it was thought that this adds unnecessary area and restricts the space of possible retimings. In this paper we demonstrate that this is not the case. In addition, we show that this methodology does not require the restriction that all reset signals be asserted at the beginning of circuit operation a restriction that was imposed by existing algorithms for determining the retimed initial state. Finally we show how our explicit reset (ER) framework enables us to retime when some latches may be driven by different hardware resets, and some others may not have any hardware resets. We also consider the case where the resets are asynchronous. We expect these solutions to the retimed initial state" problem to help increase the practical applicability of retiming. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Bartlett, G. Borriello, and S. Raju. </author> <title> Timing Optimization of Multiphase Sequential Logic. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 10(1) </volume> <pages> 51-62, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: For the purposes of synthesis and analysis it is often convenient to represent each reset latch with a no-reset latch and explicit hardware circuitry. This framework (which we call the explicit reset (ER) framework) was proposed by <ref> [1, 7] </ref>. Such a representation also provides a natural solution for the problem of retiming the initial state, since now no latch has a known initial value. <p> Since we will relax the GRA assumption, we will need to prove the validity of the transformation as specified in Section 2.4. The standard strategy to retime the reset state for individual forward or backward retiming moves (as described in <ref> [1] </ref>) is to take the forward or backward functional image. We show how this can be achieved in the ER framework without making the GRA assumption in Section 3.1.1. However, this strategy, by virtue of being local, can make local decisions which may need subsequent backtracking. <p> Bartlett et al. <ref> [1] </ref> describe the standard method for obtaining the new reset state if we retime reset latches across the gate F .
Reference: [2] <author> G. De Micheli. </author> <title> Synchronous Logic Synthesis: Algorithms for Cycle-Time Minimization. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 10(1) </volume> <pages> 63-73, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This rectification is made possible with the use of a resynthesis step along with the retiming step (a very special case of the general class of transformations proposed in <ref> [7, 2] </ref>). We also show that a retiming of the reset state across primary outputs and primary inputs (OI), which is used during a retiming of the reset state with a global STG-based analysis of the whole circuit [11] can be accomplished in the ER framework.
Reference: [3] <author> G. Even, I. Y. Spillinger, and L. Stok. </author> <title> Retiming Revisited and Reversed. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 15(3) </volume> <pages> 348-357, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Recently, efficient retiming algorithms have been proposed for large industrial-sized circuits [9] which take this technique one step closer to wider adoption in practice. However, one nagging problem with using retiming in practice is retiming latches which have hardware reset values (alternatively called initial values) <ref> [3] </ref>. In practice, most designs have a few such latches (called reset latches in this paper), and the remaining latches do not have any hardware reset (called no-reset latches). <p> These generalizations provide a comprehensive solution to the retimed reset state" problem. This paper discusses ways of retiming the reset state and establishing the correctness of these transformations for a given retiming. Thus, this is orthogonal to the work done by Even et al. <ref> [3] </ref> which, given a target delay, attempts to minimize the extra logic needed to achieve the retiming. 2 Preliminaries 2.1 Leiserson-Saxe Retiming Graph Leiserson and Saxe introduced retiming [6] using a graph-theoretic model. A design is modeled as a finite edge-weighted directed graph G = (V; E).
Reference: [4] <author> J. Grodstein, E. Lehman, H. Harkness, H. Touati, and B. Grundmann. </author> <title> Optimal Latch Mapping and Retiming within a Tree. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 242-245, </pages> <address> San Jose, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Also, for designs where the technology library contains logic elements where each implements a latch plus some combinational logic <ref> [4] </ref>, the techniques described in this paper should be useful in retiming such elements. 5 Acknowledgments This research was prompted by queries from Rick Rudell of Syn-opsys, Inc. and Leon Stok of IBM Research Center. We also thank Ellen Sentovich of Ecole des Mines de Paris for many helpful discussions.
Reference: [5] <author> M. A. Iyer, D. E. Long, and M. Abramovici. </author> <title> Identifying Sequential Redundancies Without Search. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 457-462, </pages> <address> Las Vegas, NV, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: If n in the above condition is small enough, we can usually afford to wait these extra clock cycles before beginning circuit operation. This notion of replacement is very similar to (but stronger than) the notions of n-delay replacement [10] and c-cycle redundancy <ref> [5] </ref>. To save space, henceforth, we say that D is valid replacement of C if and only if D is a sufficiently old replacement of design C. The notion of valid replacement is clearly transitive, and we will make use of this transitivity later.
Reference: [6] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing Synchronous Systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <month> Spring </month> <year> 1983. </year>
Reference-contexts: Thus, this is orthogonal to the work done by Even et al. [3] which, given a target delay, attempts to minimize the extra logic needed to achieve the retiming. 2 Preliminaries 2.1 Leiserson-Saxe Retiming Graph Leiserson and Saxe introduced retiming <ref> [6] </ref> using a graph-theoretic model. A design is modeled as a finite edge-weighted directed graph G = (V; E). Each vertex in V represents either a gate in the design, or a special dummy node called the host. <p> However, in general, we need a stronger condition which does not require special assumptions about the resettability of the design. Leiserson and Saxe <ref> [6] </ref> show the validity of retiming transformations under the following condition for replacement: Definition 1 A design D is a sufficiently old replacement of design C if there exists a non-negative integer p such that for every state d that D can be in q cycles after power-up for any q
Reference: [7] <author> S. Malik, E. M. Sentovich, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Retiming and Resynthesis: Optimization of Sequential Networks with Combinational Techniques. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 10(1) </volume> <pages> 74-84, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: For the purposes of synthesis and analysis it is often convenient to represent each reset latch with a no-reset latch and explicit hardware circuitry. This framework (which we call the explicit reset (ER) framework) was proposed by <ref> [1, 7] </ref>. Such a representation also provides a natural solution for the problem of retiming the initial state, since now no latch has a known initial value. <p> However, it has been suggested that the explicit representation of reset circuitry restricts the retiming moves and adds unnecessary overhead <ref> [7, 8, 11] </ref>. Consider, for example, the circuit C in Figure 1. The rectangular boxes denote latches. Suppose each inverter has a delay of d and the reset value of each latch is 0 (shown inside the latch in the figure). <p> This rectification is made possible with the use of a resynthesis step along with the retiming step (a very special case of the general class of transformations proposed in <ref> [7, 2] </ref>). We also show that a retiming of the reset state across primary outputs and primary inputs (OI), which is used during a retiming of the reset state with a global STG-based analysis of the whole circuit [11] can be accomplished in the ER framework. <p> Thus, when backward or forward retiming of reset latches across combinational logic elements is possible by re-mapping the reset values of reset latches, this can always be achieved in the ER framework. Notice, that in essence, we have performed a special case of the general retiming and resynthesis paradigm <ref> [7] </ref>. However, we like to think of the step of resynthesizing the reset circuitry across the logic element as retiming the reset circuitry. For an example, consider the retiming of Figures 1 and 2.
Reference: [8] <author> Sharad Malik. </author> <title> Combinational Logic Optimization Techniques in Sequential Logic Synthesis. </title> <type> PhD thesis, </type> <institution> Electronics Research Laboratory, University of California, Berkeley, </institution> <address> CA 94720,November1990. MemorandumNo. UCB/ERL M90/115. </address>
Reference-contexts: However, it has been suggested that the explicit representation of reset circuitry restricts the retiming moves and adds unnecessary overhead <ref> [7, 8, 11] </ref>. Consider, for example, the circuit C in Figure 1. The rectangular boxes denote latches. Suppose each inverter has a delay of d and the reset value of each latch is 0 (shown inside the latch in the figure).
Reference: [9] <author> N. Shenoy and R. Rudell. </author> <title> Efficient Implementation of Retiming. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 226-233, </pages> <address> San Jose, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Retiming is a well known optimization technique it moves latches across combinational logic in order to minimize the delay and/or the area of the circuit. Recently, efficient retiming algorithms have been proposed for large industrial-sized circuits <ref> [9] </ref> which take this technique one step closer to wider adoption in practice. However, one nagging problem with using retiming in practice is retiming latches which have hardware reset values (alternatively called initial values) [3].
Reference: [10] <author> V. Singhal, C. Pixley, A. Aziz, and R. K. Brayton. </author> <title> Exploiting Power-up Delay for Sequential Optimization. </title> <booktitle> In Proc. EuropeanDesign AutomationConf., </booktitle> <pages> pages 54-59, </pages> <address> Brighton, Great Britain, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: If n in the above condition is small enough, we can usually afford to wait these extra clock cycles before beginning circuit operation. This notion of replacement is very similar to (but stronger than) the notions of n-delay replacement <ref> [10] </ref> and c-cycle redundancy [5]. To save space, henceforth, we say that D is valid replacement of C if and only if D is a sufficiently old replacement of design C. The notion of valid replacement is clearly transitive, and we will make use of this transitivity later.
Reference: [11] <author> H. J. Touati and R. K. Brayton. </author> <title> Computing the Initial States of Retimed Circuits. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 12(1) </volume> <pages> 157-162, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: However, it has been suggested that the explicit representation of reset circuitry restricts the retiming moves and adds unnecessary overhead <ref> [7, 8, 11] </ref>. Consider, for example, the circuit C in Figure 1. The rectangular boxes denote latches. Suppose each inverter has a delay of d and the reset value of each latch is 0 (shown inside the latch in the figure). <p> We also show that a retiming of the reset state across primary outputs and primary inputs (OI), which is used during a retiming of the reset state with a global STG-based analysis of the whole circuit <ref> [11] </ref> can be accomplished in the ER framework. We show the correctness of both the above transformations (retiming across gates and across OI) without making the GRA assumption which was needed for the global STG-based analysis [11]. <p> retiming of the reset state with a global STG-based analysis of the whole circuit <ref> [11] </ref> can be accomplished in the ER framework. We show the correctness of both the above transformations (retiming across gates and across OI) without making the GRA assumption which was needed for the global STG-based analysis [11]. We then extend our results to show how the ER framework enables the retiming of a set of latches, some of which may have different hardware reset lines and some may not have any reset line. These generalizations provide a comprehensive solution to the retimed reset state" problem. <p> To avoid this, it may be possible to determine the final value of the reset state by looking at the entire set of retiming moves and analyzing their effect on the transition graph of the design <ref> [11] </ref>. <p> Sometimes it may be impossible to retime reset latches without adding extra logic in the design. This is illustrated by the following example (due to Touati and Brayton <ref> [11] </ref>). Consider the upper circuit in Figure 8 where both latches are reset latches driven by the same reset line. <p> If we want to retime these latches (and the reset value, denoted by ?) backward across junction and the NOT-gate, to obtain the circuit drawn below, we would like to determine an equivalent reset state for this circuit. The goal in <ref> [11] </ref> is to determine a state such that the reset state of the lower circuit is equivalent to the reset state of the upper circuit (so that when the reset line is pulled to 1, both circuits have equivalent behavior). <p> Because of reconvergence in the logic, one choice may cause a conflict in retiming the reset state in the future, whereas another choice may not. This may result in backtracking to determine a value consistent with the different reconvergent paths. An elegant solution to avoid this is provided in <ref> [11] </ref> where the global behavior of all latches is analyzed, and the value of the reset state for the entire sequence of retiming steps is found directly.
References-found: 11

