URL: http://www.fzi.de/sim/people/trautw/Projekte/Ringe/Tau93/short_paper.ps.gz
Refering-URL: http://www.fzi.de/sim/people/trautw/index.ok.html
Root-URL: http://www.fzi.de
Abstract: 1 Abstract: A design methodology is presented to support the design of VLSI circuits. The methodology is defined by the interface of basic modules and the way these modules are connected. The modules can be build hierarchically. The communication between parts of the circuit is supported by a small set of communication modules. Parallelism and pipelining are modelled with communication modules. The modules have to be carefully designed. A library of these modules can be used by inexperienced designers since they can build a functional correct circuit without knowing the overall timing of the circuit. The methodology uses delay insensitive modules. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ran Ginosar, Nick Michell, </author> <title> On the Potential of Asynchronous Pipelined Processors, </title> <type> Technical Report UUCS-90-015, </type> <institution> University of Utah, Department of Computer Science </institution>
Reference-contexts: I.E. Suther-land got a turing award for his paper MICROPIPELINES. He explains the transition signalling used here and goes through the design of C-Elements up to the design of a memory-cache-processor systems. The potential of an asynchronous version of the DLX processor is written about in <ref> [1] </ref>. Ring structures are used in various theoretical and practical applications. A commercial signal processor was built using a ring of operation units. It has been proved that every circuit that is delay insensitive on gate level is a simple oscillator.
Reference: [2] <author> C.A.R. Hoare, </author> <title> Communicating Sequential Processes, </title> <journal> Comm. of the ACM, Aug. 1978, </journal> <volume> Vol 21 No 8 </volume>
Reference: [3] <author> L. Lavagno, K. Kreutzer, A. Sangiovanni-Vincentelli, </author> <title> Algorithms for synthesis of hazard-free asynchronous circuits, </title> <booktitle> 28th ACM/IEEE Design Automation Conference, Paper 19.2 </booktitle>
Reference: [4] <author> Charles E. Leiserson, James B. Saxe, </author> <title> Retiming Synchronous Circuitry, </title> <journal> Algorithmica, 1991, </journal> <volume> 6 </volume> <pages> 5-35 </pages>
Reference: [5] <author> Alain J. Martin, </author> <title> Compiling communicating processes into delay-insensitive VLSI circuits, </title> <booktitle> Distributed Computing (1986) 1 </booktitle> <pages> 226-234 Main Port </pages>
Reference: [6] <author> Alain J. Martin, </author> <title> Synthesis of Asynchronous VLSI Circuits, Formal Methods for VLSI Design, </title> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <year> 1990 </year>
Reference: [7] <author> Alain J. Martin, Steven M. Burns, T.K. Lee, Drazen Borkovic, Pieter J. Hazewindus, </author> <title> The First Asynchronous Microprocessor: The Test Results, </title> <booktitle> Computer Architecture, </booktitle> <month> April </month> <year> 1989 </year>
Reference: [8] <author> Teresa H.-Y. Meng, Robert W. Brodersen, David G. Messer-schmitt, </author> <title> Automatic Synthesis of Asynchronous Circuits from High-Level Specifications, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> Vol. 8, No. 11, </volume> <month> November </month> <year> 1989 </year>
Reference: [9] <author> David A. Patterson, John L. Hennessy, </author> <title> Computer Architecture a Quantitative Approach, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990 </year>
Reference: [10] <author> I.E. Sutherland, </author> <title> Micropipelines, </title> <journal> Communication of the ACM, </journal> <volume> 32:6, </volume> <month> June </month> <year> 1989 </year>
Reference: [11] <author> J. Staunstrup, </author> <title> M.R. Greenstreet, Synchronized Transitions, Formal Methods for VLSI Design, </title> <publisher> Elsevier Science Publishers B. V. (North-Holland) </publisher>
Reference: [12] <author> J. Staunstrup, </author> <title> M.R. Greenstreet, From High-Level Descriptions to VLSI Circuits, </title> <note> BIT 28 (1988) </note>
Reference: [13] <author> J. Bruna, A. Altman, </author> <title> A Theory of Asynchronous Control Networks, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-20, No. 6, </volume> <month> June </month> <year> 1971 </year>
Reference: [14] <author> S.S. Patil, J.B. Dennis, </author> <title> The Description and Realization of Digital Systems, </title> <booktitle> IEEE Computer Conference, </booktitle> <year> 1972 </year>
Reference: [15] <author> R. David, </author> <title> Modular Design of Asynchronous Circuits Defined by Graphs, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-26, No. 8, </volume> <month> August </month> <year> 1977 </year>
Reference-contexts: To design systems with more than a few gates design methodologies are needed. Among them are the division of a system in a data ow structure and a control ow structure [13],[14]. The modular design of asynchronous automata can be found in <ref> [15] </ref>. The data ow structure of asynchronous circuits is often implemented by using self-timed elements operating on double-rail code [16].
Reference: [16] <author> C. Mead, L. Conway, </author> <title> Introduction to VLSI Systems, </title> <booktitle> Addison-Wesley Series in Computer Science, </booktitle> <year> 1980 </year>
Reference-contexts: Among them are the division of a system in a data ow structure and a control ow structure [13],[14]. The modular design of asynchronous automata can be found in [15]. The data ow structure of asynchronous circuits is often implemented by using self-timed elements operating on double-rail code <ref> [16] </ref>. This code increases the complexity of the modules and needs twice as much connections as the binary code. (Example: An AND-gate has 4 inputs, 2 outputs and uses 4 Muller-C and one 3-input OR-gate) Recently the interest in asynchronous designs increased. I.E.
Reference: [17] <author> J. Sparso, J. Staunstrup, M. Dantzer-Sorensen, </author> <title> Design of delay insensitive circuits using multi-ring structures, email </title>
Reference: [18] <author> D. Misunas, </author> <title> Petri Nets and Speed Independent Design, </title> <journal> CACM, August 1973, </journal> <volume> Vol. 16, No. 8 [19] intel, </volume> <booktitle> 80287 80-Bit HCMOS NUMERIC PROCESSOR EXTENSION, </booktitle> <month> January </month> <year> 1986, </year> <title> Order Number: </title> <type> 210920-004 </type>
Reference-contexts: It has been proved that every circuit that is delay insensitive on gate level is a simple oscillator. Petri nets are a well known way to model asynchronous systems. They have been used for modeling speed independent asynchronous circuits too <ref> [18] </ref>. Petri nets concentrate on the control ow and give no support for modeling data. 1. Real time systems need special attention. Communicating Rings Of Delay Insensitive Modules Christoph Trautwein Wolfgang Rosenstiel Lehrstuhl fr Technische Informatik Universitt Tbingen, Germany 2 4.
Reference: [20] <institution> National Semiconductor Corporation, NS32532-20/NS32532-25/NS32532-30 High-Performance 32-Bit Microprocessor, </institution> <month> October </month> <year> 1987 </year>
Reference: [21] <author> MOTOROLA SEMICONDUCTOR, </author> <title> HCMOS Enhanced Floating-Point Coprocessor, </title> <publisher> MC68882 BRE509/D </publisher>
Reference: [22] <editor> Cypress Semiconductor, </editor> <booktitle> Applications Handbook, </booktitle> <month> August </month> <year> 1991 </year>
Reference-contexts: Since we use pairs of inverters the unit of delay is 18ns. Eleven pairs are needed for a delay of 198ns. This is 6ns more than needed. The propagation delay of a typical microstrip line is 1.74ns/ft <ref> [22] </ref>. If the wires for the data lines in the adder block are not more than 4.6 foot longer than the sum of the wires in the inverter chain the timing is correct. If this cannot be guarantied additional inverter pairs have to be inserted.
Reference: [23] <editor> Texas Instruments, </editor> <booktitle> The TTL Data Book, </booktitle> <volume> Volume 1, </volume> <year> 1985 </year>
Reference-contexts: When using CMOS or TTL technology it can be built of pairs of inverters. Fig. 5: Block Diagram: The Adder An implementation of an 32-bit adder may use eight SN74LS283 TTL circuits from Texas Instruments. The maximum propagation delay of a single SN74LS283 is 24ns <ref> [23] </ref>. Worst case propagation delay of eight SN74LS283 is 192ns. A single SN74LS04 inverter has a typical propagation delay of at least 9ns. Since we use pairs of inverters the unit of delay is 18ns. Eleven pairs are needed for a delay of 198ns. This is 6ns more than needed.
References-found: 22

