URL: http://www.cs.tamu.edu/people/miket/rtrep.ps.gz
Refering-URL: http://www.cs.tamu.edu/people/miket/
Root-URL: http://www.cs.tamu.edu
Email: fmiket,jcliug@cs.tamu.edu  
Title: Development of Portable Middleware Services in POSIX Environments  
Author: Michael E. Thomadakis and Jyh-Charn Liu 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science Texas A&M University  
Abstract: POSIX is a robust, function rich, open standard, supporting multithreading and real-time extensions. This paper presents first results of our investigation on the suitability of POSIX environments as building blocks for middleware services. We examine the service quality of certain key POSIX functions of Solaris 2.5 and IRIX 6.2 Unix operating systems. Using user-level time probing, with sub-microsecond resolution, we evaluate experimentally the overhead and accuracy in POSIX timer mechanisms, thread management, scheduling and synchronization services, and then, we examine temporal portability issues. Different timer functions have different accuracy on the same system, or even behave irregularly. Applications with moderate number of threads (32), suffered high response and barrier synchronization times. Both systems could not share the processor fairly among the threads. We noticed different timing behavior in timer and alarm services, minima scheduling quanta, logical time progress and clock drifting. Temporal portability is not automatic but knowledge of the subtle differences between systems is the first step towards this goal. Index Terms: Middleware, Multi-Threading, POSIX, Scheduling, Timers 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adelberg, B., H. Garcia-Molina, and Kao, B., </author> <title> "Emulating Soft Real-Time Scheduling Using Traditional Operating Sys Cumulative Processor Time Allocation for 32 TS pthreads tem Schedulers," </title> <booktitle> in Proc. of IEEE 1994 Real-Time Systems Symposium, </booktitle> <pages> pp. 292-298. </pages>
Reference: [2] <author> AT&T, </author> <title> System V Interface Definition, 3rd Edition, </title> <journal> AT&T, </journal> <year> 1989. </year>
Reference-contexts: POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads. Both Solaris and IRIX follow the System V UNIX model <ref> [2, 3, 5, 6, 11, 13] </ref>, and have a non-monolithic, multi-threaded kernel, meaning that multiple kernel services can run concurrently [14], and that system or user processes can be preempted by high priority system/user tasks, or asynchronous events, (e.g., network interrupts).
Reference: [3] <author> AT&T, </author> <title> Unix System V Release 4, Internals Student Guide, </title> <journal> AT&T, </journal> <year> 1990. </year>
Reference-contexts: POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads. Both Solaris and IRIX follow the System V UNIX model <ref> [2, 3, 5, 6, 11, 13] </ref>, and have a non-monolithic, multi-threaded kernel, meaning that multiple kernel services can run concurrently [14], and that system or user processes can be preempted by high priority system/user tasks, or asynchronous events, (e.g., network interrupts).
Reference: [4] <author> Baker, T. P., Mueller, F. and Rustagi, V., </author> <title> "Experience with a Prototype of the POSIX `Minimal Realtime System Profile'," </title> <booktitle> in Proc. of the 11th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May </month> <year> 1994. </year>
Reference: [5] <author> Eykholt, J., et al., </author> <title> "Beyond Multiprocessing: Multithreading the SunOS Kernel," </title> <booktitle> in Proc. of the Summer 1992 USENIX Conf., </booktitle> <address> June 1992, San Antonio, TX. </address>
Reference-contexts: POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads. Both Solaris and IRIX follow the System V UNIX model <ref> [2, 3, 5, 6, 11, 13] </ref>, and have a non-monolithic, multi-threaded kernel, meaning that multiple kernel services can run concurrently [14], and that system or user processes can be preempted by high priority system/user tasks, or asynchronous events, (e.g., network interrupts). <p> Solaris and IRIX are unique in their multithread-ing support, in that they provide three distinct levels of control structures <ref> [5, 11, 12, 14] </ref>. A process consists of one or more Light-Weight Processes (LWPs), and an LWP my consist of an arbitrary number of user-level threads (ULTs). At each time the Solaris and IRIX kernels, associate one kernel thread with an LWP, as Fig. 1 shows.
Reference: [6] <author> Gallmeister, Bill O., </author> <title> POSIX.4 Programming for the Real World, </title> <publisher> O'Reilly and Associates, Inc., </publisher> <year> 1995. </year>
Reference-contexts: In the current distributed processing environment, where platform heterogeneity is the rule, middleware functionality must be replicated to each one of the different platforms from scratch. Ad-hoc development increases the cost, the complexity and verifiability of middleware based solutions, greatly. The POSIX (Portable Operating System Interface) IEEE Standard <ref> [6, 7, 8] </ref>, represents a significant advance in the rigorous definition of portable environments. It has gained broad support in most Unix and other operating systems. The maturity and robustness of POSIX makes it an ideal basis upon which to build portable middleware software. <p> POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads. Both Solaris and IRIX follow the System V UNIX model <ref> [2, 3, 5, 6, 11, 13] </ref>, and have a non-monolithic, multi-threaded kernel, meaning that multiple kernel services can run concurrently [14], and that system or user processes can be preempted by high priority system/user tasks, or asynchronous events, (e.g., network interrupts).
Reference: [7] <institution> IEEE Portable Applications Standards Committee, IEEE Std 1003.1b-1993, Real Time Extensions, </institution> <year> 1993. </year>
Reference-contexts: In the current distributed processing environment, where platform heterogeneity is the rule, middleware functionality must be replicated to each one of the different platforms from scratch. Ad-hoc development increases the cost, the complexity and verifiability of middleware based solutions, greatly. The POSIX (Portable Operating System Interface) IEEE Standard <ref> [6, 7, 8] </ref>, represents a significant advance in the rigorous definition of portable environments. It has gained broad support in most Unix and other operating systems. The maturity and robustness of POSIX makes it an ideal basis upon which to build portable middleware software. <p> Section 3 presents the results form our experimental measurements, and finally, section 4 concludes with a discussion of our findings. 2 POSIX Model and Run-Time Envi- ronments POSIX.1b and POSIX.1c <ref> [7, 8] </ref> introduce a robust, function-rich environment for multithreaded applications, with real-time extensions. POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads.
Reference: [8] <institution> IEEE Portable Applications Standards Committee, IEEE Std 1003.1c-1995, Threads Extensions, </institution> <year> 1995. </year>
Reference-contexts: In the current distributed processing environment, where platform heterogeneity is the rule, middleware functionality must be replicated to each one of the different platforms from scratch. Ad-hoc development increases the cost, the complexity and verifiability of middleware based solutions, greatly. The POSIX (Portable Operating System Interface) IEEE Standard <ref> [6, 7, 8] </ref>, represents a significant advance in the rigorous definition of portable environments. It has gained broad support in most Unix and other operating systems. The maturity and robustness of POSIX makes it an ideal basis upon which to build portable middleware software. <p> Section 3 presents the results form our experimental measurements, and finally, section 4 concludes with a discussion of our findings. 2 POSIX Model and Run-Time Envi- ronments POSIX.1b and POSIX.1c <ref> [7, 8] </ref> introduce a robust, function-rich environment for multithreaded applications, with real-time extensions. POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads.
Reference: [9] <author> Khanna, M. Sebree and J. Zolnowski, </author> <title> "Real-Time Scheduling in SunOS 5.0," </title> <booktitle> in Proc. of the Winter 1992 USENIX Conf., </booktitle> <year> 1992. </year>
Reference-contexts: Intra-process thread switching has a much lower time overhead than the inter-process thread switching, and synchronization. Inter-process scheduling events require kernel intervention. In this study we examine the time-sharing (TSS) and fixed-priority (FPS) scheduling classes <ref> [9, 11, 12, 13] </ref> under both systems. TSS automatically adjusts the priorities of tasks according to their recently consumed processor time. For FPS, a task is assigned to an absolute priority level with a fixed time quantum. There are two variants of the FPS: the FIFO and the round-robin (RR). <p> Periodic real-time <ref> [9, 10] </ref> processes can schedule their recurring jobs via timer based schedulers, for instance.
Reference: [10] <author> Liu, C. and Layland, J. </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, </volume> <pages> pp. 46-61, </pages> <year> 1973. </year> <title> lative Time allocation for 32 RT pthreads vs.time </title>
Reference-contexts: Periodic real-time <ref> [9, 10] </ref> processes can schedule their recurring jobs via timer based schedulers, for instance.
Reference: [11] <institution> Silicon Graphics, IRIX 6.2 Technical Report, Silicon Graphics Inc., </institution> <year> 1995. </year>
Reference-contexts: POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads. Both Solaris and IRIX follow the System V UNIX model <ref> [2, 3, 5, 6, 11, 13] </ref>, and have a non-monolithic, multi-threaded kernel, meaning that multiple kernel services can run concurrently [14], and that system or user processes can be preempted by high priority system/user tasks, or asynchronous events, (e.g., network interrupts). <p> Solaris and IRIX are unique in their multithread-ing support, in that they provide three distinct levels of control structures <ref> [5, 11, 12, 14] </ref>. A process consists of one or more Light-Weight Processes (LWPs), and an LWP my consist of an arbitrary number of user-level threads (ULTs). At each time the Solaris and IRIX kernels, associate one kernel thread with an LWP, as Fig. 1 shows. <p> Intra-process thread switching has a much lower time overhead than the inter-process thread switching, and synchronization. Inter-process scheduling events require kernel intervention. In this study we examine the time-sharing (TSS) and fixed-priority (FPS) scheduling classes <ref> [9, 11, 12, 13] </ref> under both systems. TSS automatically adjusts the priorities of tasks according to their recently consumed processor time. For FPS, a task is assigned to an absolute priority level with a fixed time quantum. There are two variants of the FPS: the FIFO and the round-robin (RR).
Reference: [12] <institution> Silicon Graphics, REACT Real-Time Programmer's Guide, Silicon Graphics Inc., </institution> <year> 1996. </year>
Reference-contexts: Solaris and IRIX are unique in their multithread-ing support, in that they provide three distinct levels of control structures <ref> [5, 11, 12, 14] </ref>. A process consists of one or more Light-Weight Processes (LWPs), and an LWP my consist of an arbitrary number of user-level threads (ULTs). At each time the Solaris and IRIX kernels, associate one kernel thread with an LWP, as Fig. 1 shows. <p> Intra-process thread switching has a much lower time overhead than the inter-process thread switching, and synchronization. Inter-process scheduling events require kernel intervention. In this study we examine the time-sharing (TSS) and fixed-priority (FPS) scheduling classes <ref> [9, 11, 12, 13] </ref> under both systems. TSS automatically adjusts the priorities of tasks according to their recently consumed processor time. For FPS, a task is assigned to an absolute priority level with a fixed time quantum. There are two variants of the FPS: the FIFO and the round-robin (RR).
Reference: [13] <institution> Silicon Graphics, </institution> <note> REACT in IRIX 6.4 Technical Report, </note> <institution> Silicon Graphics Inc., </institution> <year> 1997. </year>
Reference-contexts: POSIX has adopted a hierarchical structure for computing tasks, where an application may consist of concurrent processes and a process by multiple pthreads. Both Solaris and IRIX follow the System V UNIX model <ref> [2, 3, 5, 6, 11, 13] </ref>, and have a non-monolithic, multi-threaded kernel, meaning that multiple kernel services can run concurrently [14], and that system or user processes can be preempted by high priority system/user tasks, or asynchronous events, (e.g., network interrupts). <p> Intra-process thread switching has a much lower time overhead than the inter-process thread switching, and synchronization. Inter-process scheduling events require kernel intervention. In this study we examine the time-sharing (TSS) and fixed-priority (FPS) scheduling classes <ref> [9, 11, 12, 13] </ref> under both systems. TSS automatically adjusts the priorities of tasks according to their recently consumed processor time. For FPS, a task is assigned to an absolute priority level with a fixed time quantum. There are two variants of the FPS: the FIFO and the round-robin (RR).
Reference: [14] <author> Powell, M. L., S. R. Kleiman, S. Barton, D. Shah, D. Stein and M. Weeks, </author> <title> "SunOS Multi-Thread Architecture," </title> <booktitle> in Proc. of the Winter 1991 USENIX Conf., </booktitle> <address> Dallas, TX, </address> <year> 1991. </year>
Reference-contexts: Both Solaris and IRIX follow the System V UNIX model [2, 3, 5, 6, 11, 13], and have a non-monolithic, multi-threaded kernel, meaning that multiple kernel services can run concurrently <ref> [14] </ref>, and that system or user processes can be preempted by high priority system/user tasks, or asynchronous events, (e.g., network interrupts). Solaris and IRIX are unique in their multithread-ing support, in that they provide three distinct levels of control structures [5, 11, 12, 14]. <p> Solaris and IRIX are unique in their multithread-ing support, in that they provide three distinct levels of control structures <ref> [5, 11, 12, 14] </ref>. A process consists of one or more Light-Weight Processes (LWPs), and an LWP my consist of an arbitrary number of user-level threads (ULTs). At each time the Solaris and IRIX kernels, associate one kernel thread with an LWP, as Fig. 1 shows.
Reference: [15] <author> Sha, L., Ragunathan, R. and Sathaye, S., </author> <title> "Generalized Rate-Monotonic Scheduling Theory: A Framework for Developing Real-Time Systems," </title> <booktitle> in Proceedings of the IEEE, </booktitle> <volume> Vol. 20, No. 1, </volume> <pages> pp. 68-82, </pages> <month> Jan. </month> <year> 1994. </year>
Reference: [16] <author> Stein, D. and Shah, D., </author> <title> "Implementing Lightweight Threads," </title> <booktitle> Proc. of the Summer 1992 USENIX Conf., </booktitle> <address> San Antonio, TX, </address> <year> 1992. </year>
Reference: [17] <author> SunSoft, </author> <title> SunOS Reference Manual, </title> <type> Section 2, </type> <institution> 1994, Sun Mi-crosystems Inc., Mountain View, </institution> <address> CA. </address>
Reference: [18] <author> SunSoft, </author> <title> Systems Services Guide, 1994, </title> <institution> Sun Microsystems Inc., Mountain View, </institution> <address> CA. </address>
References-found: 18

