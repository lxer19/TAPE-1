URL: ftp://rtcl.eecs.umich.edu/outgoing/jrexford/pdrts94.ps.Z
Refering-URL: http://www.eecs.umich.edu/RTCL/routing/
Root-URL: http://www.cs.umich.edu
Title: Hardware Support for Controlled Interaction of Guaranteed and Best-Effort Communication  
Author: Jennifer Rexford, James Dolter, and Kang Shin 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Real-time communication typically consists of guaranteed packets that must satisfy their delivery deadlines and best-effort packets that can tolerate occasional deadline misses for improved average latency. This paper presents hardware techniques for supporting the coexistence of these two traffic classes in real-time point-to-point networks. A careful selection of routing and switching techniques, coupled with fine-grain arbitration between traffic classes, can allow network adapters to support the diverse performance requirements of best-effort and guaranteed communication. Cycle-level simulations of SPIDER (Scalable Point-to-point Interface DrivER), a network adapter for point-to-point distributed systems, demonstrate the utility of supporting multiple low-level communication policies for different classes of traffic. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Am79168/Am79169 TAXI-275 Technical Manual, Advanced Micro Devices, </institution> <address> ban-0.1m-1/93/0 17490a edition. </address>
Reference-contexts: The PRC TXs and PRC RXs implement the low-level drivers controlling the actual transmitter and receiver devices on the network interface (NI). The NI performs the media access and flow control for six pairs of AMD TAXI chips <ref> [1] </ref>, providing a low-cost communication fabric of either fiber-optic or twisted-pair interconnect. Each TAXI TX-RX pair forms a bidirectional link to an adjacent node. The NI TX and NI RX control units perform the necessary interleaving of virtual channels to and from the physical links, on a byte-by-byte basis.
Reference: [2] <author> K. Arvind, K. Ramamritham, and J. A. Stankovic, </author> <title> "A local area network architecture for communication in distributed real-time systems," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 115-147, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Real-time communication is typically categorized into two basic classes of traffic, guaranteed messages requiring delivery before their deadlines and best-effort messages without delivery-deadline guarantees <ref> [2, 10, 18, 19] </ref>. Distributed real-time systems aim to satisfy the constraints of guaranteed messages, while providing good performance for the best-effort traffic. This paper addresses techniques for the effective mixing of guaranteed and best-effort traffic by utilizing flexible hardware support for routing and switching.
Reference: [3] <author> W. J. Dally and C. L. Seitz, </author> <title> "The torus routing chip," </title> <journal> Journal of Distributed Computing, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 187-196, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Point-to-point networks, with their multiplicity of processors and internode routes, provide a natural platform for real-time applications that require both high performance and dependability. While many parallel machines connect processing elements with a point-to-point network <ref> [3, 6, 13] </ref>, these processors often reside on a single board or chassis, making them especially vulnerable to single-point failures. A network of physically-distributed computers offers the advantage of independent processor and link failures. <p> Traditional packet switching requires an arriving packet to buffer completely before transmission to the subsequent node can begin. Buffering the packet after each hop allows the software protocols to directly schedule traffic to provide guarantees [11]. In contrast, cut-through switching schemes, such as virtual cut-through [12] and wormhole <ref> [3] </ref>, allow an incoming packet to begin transmission to the subsequent node prior to complete reception at the current node if the output link is idle.
Reference: [4] <author> W. J. Dally and C. L. Seitz, </author> <title> "Deadlock-free message routing in multiprocessor interconnection networks," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-36, no. 5, </volume> <pages> pp. 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: The simulator [7] includes a cycle-level model of SPIDER that captures the details of flow control, resource arbitration, and microcode execution. Packets use static dimension-ordered routing, with the wormhole packets employing deadlock-free routing on a pair of virtual channels <ref> [4, 16] </ref>. Each node independently injects 64-byte packets with uniform random selection of destination nodes.
Reference: [5] <author> W. Dally, </author> <title> "Virtual-channel flow control," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Designed to reside on the host processor's private memory bus, SPIDER has direct access to the host memory and provides the host with a memory-mapped control interface. The adapter coordinates bidirectional communication with up to six neighboring nodes, with two virtual channels <ref> [5] </ref> on each unidirectional link. The programmable routing controller (PRC), a custom integrated circuit, exploits concurrency amongst the virtual channels and provides fair, fine-grain arbitration at the memory and network interfaces [7].
Reference: [6] <author> W. J. Dally, J. A. S. Fiske, J. S. Keen, R. A. Lethin, M. D. Noakes, P. R. Nuth, R. E. Davison, and G. A. Fyler, </author> <title> "The Message-Driven Processor: A multicomputer processing node with efficient mechanisms," </title> <booktitle> IEEE Micro, </booktitle> <pages> pp. 23-39, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Point-to-point networks, with their multiplicity of processors and internode routes, provide a natural platform for real-time applications that require both high performance and dependability. While many parallel machines connect processing elements with a point-to-point network <ref> [3, 6, 13] </ref>, these processors often reside on a single board or chassis, making them especially vulnerable to single-point failures. A network of physically-distributed computers offers the advantage of independent processor and link failures.
Reference: [7] <author> J. Dolter, </author> <title> A Programmable Routing Controller Supporting Multi-mode Routing and Switching in Distributed Real-Time Systems, </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Section 2 evaluates the suitability of various routing and switching schemes for supporting different higher-level performance requirements. The section compares the schemes running on a cycle-level simulation model of SPIDER (Scalable Point-to-point Interface DrivER), a hardware adapter for real-time multi-hop networks <ref> [7, 8] </ref>. Designed as the front-end interface for HARTS [17], SPIDER supports a variety of routing and switching schemes through flexible, low-level con-trol over the network links. Section 3 presents mechanisms for utilizing such low-level hardware support to regulate the mixing of guaranteed and best-effort traffic. <p> The adapter coordinates bidirectional communication with up to six neighboring nodes, with two virtual channels [5] on each unidirectional link. The programmable routing controller (PRC), a custom integrated circuit, exploits concurrency amongst the virtual channels and provides fair, fine-grain arbitration at the memory and network interfaces <ref> [7] </ref>. The twelve PRC TXs provide low-level control of packet transmission, while the twelve microprogrammable PRC RXs coordinate packet reception and implement routing and switching policies for in-transit traffic. <p> Since a blocked wormhole packet never buffers, it imparts no memory demands on intermediate nodes, but instead consumes unpredictable amounts of channel bandwidth. Figure 2 compares the performance of wormhole and packet switching in simulations of a 6 fi 6 wrapped square mesh (torus). The simulator <ref> [7] </ref> includes a cycle-level model of SPIDER that captures the details of flow control, resource arbitration, and microcode execution. Packets use static dimension-ordered routing, with the wormhole packets employing deadlock-free routing on a pair of virtual channels [4, 16]. <p> Packets on separate virtual networks interact only to compete for access to the physical link. Fair, demand-slotted arbitration schemes provide the tight bounds necessary for guaranteed traffic, while allowing best-effort packets to utilize any remaining bandwidth. For instance, SPIDER employs a binary priority tree arbiter <ref> [7, 14] </ref> to order requests for byte access to the physical links. This provides a tight response time for guaranteed packets, independent of the amount or length of best-effort packets. The router can further minimize intrusion on guaranteed packets by imposing priority arbitration between the virtual networks.
Reference: [8] <author> J. Dolter, S. Daniel, A. Mehra, J. Rexford, W. Feng, and K. G. Shin, "SPIDER: </author> <title> Flexible and efficient communication support for point-to-point distributed systems," </title> <type> Technical Report CSE-TR-180-93, </type> <institution> University of Michigan, </institution> <month> October </month> <year> 1993. </year> <note> To appear in Proc. Int. Conf. on Distributed Computing Systems, </note> <month> June </month> <year> 1994. </year>
Reference-contexts: Section 2 evaluates the suitability of various routing and switching schemes for supporting different higher-level performance requirements. The section compares the schemes running on a cycle-level simulation model of SPIDER (Scalable Point-to-point Interface DrivER), a hardware adapter for real-time multi-hop networks <ref> [7, 8] </ref>. Designed as the front-end interface for HARTS [17], SPIDER supports a variety of routing and switching schemes through flexible, low-level con-trol over the network links. Section 3 presents mechanisms for utilizing such low-level hardware support to regulate the mixing of guaranteed and best-effort traffic.
Reference: [9] <author> D. Ferrari, </author> <title> "Client requirements for real-time communication services," </title> <journal> IEEE Communication Magzine, </journal> <pages> pp. 65-72, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: the guaranteed packets are largely unaffected by the presence of traffic on the other virtual network, due to fine-grain arbitration amongst the virtual channels. 4 Conclusion Emerging distributed applications impose a broad range of performance requirements on the communication subsystem, including control over end-to-end latency, delay variance, and bandwidth allocation <ref> [9] </ref>. For point-to-point networks, these communication requirements affect the suitability of particular routing and switching schemes. While the network hardware alone cannot satisfy application performance requirements, design decisions should not preclude the communication subsystem from establishing guarantees.
Reference: [10] <author> D. Ferrari and A. Gupta, </author> <title> "Resource partitioning for real-time communication," </title> <booktitle> in International Symposium on Global Data Networking, </booktitle> <month> Decem-ber </month> <year> 1993. </year>
Reference-contexts: Real-time communication is typically categorized into two basic classes of traffic, guaranteed messages requiring delivery before their deadlines and best-effort messages without delivery-deadline guarantees <ref> [2, 10, 18, 19] </ref>. Distributed real-time systems aim to satisfy the constraints of guaranteed messages, while providing good performance for the best-effort traffic. This paper addresses techniques for the effective mixing of guaranteed and best-effort traffic by utilizing flexible hardware support for routing and switching.
Reference: [11] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <booktitle> in Proc. Int. Conf. on Distributed Computer Systems, </booktitle> <pages> pp. 300-307, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Traditional packet switching requires an arriving packet to buffer completely before transmission to the subsequent node can begin. Buffering the packet after each hop allows the software protocols to directly schedule traffic to provide guarantees <ref> [11] </ref>. In contrast, cut-through switching schemes, such as virtual cut-through [12] and wormhole [3], allow an incoming packet to begin transmission to the subsequent node prior to complete reception at the current node if the output link is idle. <p> Priority arbitration enables a guaranteed packet to travel at the same rate through each link in its journey, independent of the number of active best-effort virtual channels. The router can then employ effective scheduling techniques <ref> [11, 15] </ref> to establish tight delay bounds or bandwidth guarantees. Since priority arbitration varies the service rate for the lower-priority traffic, the best-effort virtual networks could employ adaptive routing to allow these packets to circumvent links and nodes serving a heavy load of guaranteed packets.
Reference: [12] <author> P. Kermani and L. Kleinrock, </author> <title> "Virtual cut-through: A new computer communication switching technique," </title> <journal> Computer Networks, </journal> <volume> vol. 3, no. 4, </volume> <pages> pp. 267-286, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: Traditional packet switching requires an arriving packet to buffer completely before transmission to the subsequent node can begin. Buffering the packet after each hop allows the software protocols to directly schedule traffic to provide guarantees [11]. In contrast, cut-through switching schemes, such as virtual cut-through <ref> [12] </ref> and wormhole [3], allow an incoming packet to begin transmission to the subsequent node prior to complete reception at the current node if the output link is idle.
Reference: [13] <author> S. Konstantinidou and L. Snyder, </author> <title> "Chaos router: Architecture and performance," </title> <booktitle> in Proc. Int'l Symposium on Computer Architecture, </booktitle> <pages> pp. 212-221, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Point-to-point networks, with their multiplicity of processors and internode routes, provide a natural platform for real-time applications that require both high performance and dependability. While many parallel machines connect processing elements with a point-to-point network <ref> [3, 6, 13] </ref>, these processors often reside on a single board or chassis, making them especially vulnerable to single-point failures. A network of physically-distributed computers offers the advantage of independent processor and link failures.
Reference: [14] <author> A. Kovaleski, S. Ratheal, and F. Lombardi, </author> <title> "An architecture and interconnection scheme for time-sliced buses in real-time processing," </title> <booktitle> Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 20-27, </pages> <year> 1986. </year>
Reference-contexts: Packets on separate virtual networks interact only to compete for access to the physical link. Fair, demand-slotted arbitration schemes provide the tight bounds necessary for guaranteed traffic, while allowing best-effort packets to utilize any remaining bandwidth. For instance, SPIDER employs a binary priority tree arbiter <ref> [7, 14] </ref> to order requests for byte access to the physical links. This provides a tight response time for guaranteed packets, independent of the amount or length of best-effort packets. The router can further minimize intrusion on guaranteed packets by imposing priority arbitration between the virtual networks.
Reference: [15] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Priority arbitration enables a guaranteed packet to travel at the same rate through each link in its journey, independent of the number of active best-effort virtual channels. The router can then employ effective scheduling techniques <ref> [11, 15] </ref> to establish tight delay bounds or bandwidth guarantees. Since priority arbitration varies the service rate for the lower-priority traffic, the best-effort virtual networks could employ adaptive routing to allow these packets to circumvent links and nodes serving a heavy load of guaranteed packets.
Reference: [16] <author> L. Ni and P. McKinley, </author> <title> "A survey of wormhole routing techniques in direct networks," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 62-76, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The simulator [7] includes a cycle-level model of SPIDER that captures the details of flow control, resource arbitration, and microcode execution. Packets use static dimension-ordered routing, with the wormhole packets employing deadlock-free routing on a pair of virtual channels <ref> [4, 16] </ref>. Each node independently injects 64-byte packets with uniform random selection of destination nodes.
Reference: [17] <author> K. G. Shin, </author> <title> "HARTS: A distributed real-time architecture," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 25-35, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The section compares the schemes running on a cycle-level simulation model of SPIDER (Scalable Point-to-point Interface DrivER), a hardware adapter for real-time multi-hop networks [7, 8]. Designed as the front-end interface for HARTS <ref> [17] </ref>, SPIDER supports a variety of routing and switching schemes through flexible, low-level con-trol over the network links. Section 3 presents mechanisms for utilizing such low-level hardware support to regulate the mixing of guaranteed and best-effort traffic.
Reference: [18] <author> K. G. Shin and Q. Zheng, </author> <title> "Mixed time-constrained and non-time-constrained communications in local area networks," </title> <journal> IEEE Trans. Communications, </journal> <pages> pp. 1668-1676, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Real-time communication is typically categorized into two basic classes of traffic, guaranteed messages requiring delivery before their deadlines and best-effort messages without delivery-deadline guarantees <ref> [2, 10, 18, 19] </ref>. Distributed real-time systems aim to satisfy the constraints of guaranteed messages, while providing good performance for the best-effort traffic. This paper addresses techniques for the effective mixing of guaranteed and best-effort traffic by utilizing flexible hardware support for routing and switching.
Reference: [19] <author> J. A. Stankovic, </author> <title> "Distributed real-time computing: The next generation," </title> <type> Technical Report COINS 92-01, </type> <institution> University of Massachusetts, Amherst, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: Real-time communication is typically categorized into two basic classes of traffic, guaranteed messages requiring delivery before their deadlines and best-effort messages without delivery-deadline guarantees <ref> [2, 10, 18, 19] </ref>. Distributed real-time systems aim to satisfy the constraints of guaranteed messages, while providing good performance for the best-effort traffic. This paper addresses techniques for the effective mixing of guaranteed and best-effort traffic by utilizing flexible hardware support for routing and switching.
References-found: 19

