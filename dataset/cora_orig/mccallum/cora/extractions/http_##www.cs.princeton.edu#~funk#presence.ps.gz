URL: http://www.cs.princeton.edu/~funk/presence.ps.gz
Refering-URL: http://www.cs.princeton.edu/~funk/
Root-URL: http://www.cs.princeton.edu
Title: The UC Berkeley System for Interactive Visualization of Large Architectural Models  
Author: Thomas Funkhouser, Seth Teller, Carlo Sequin, and Delnaz Khorramabadi 
Date: June 3, 1996  
Abstract: We have developed data structures and algorithms for identifying a small portion of a large model to load into memory and render during each frame of an interactive walkthrough. Our algorithms rely upon an efficient display database that represents a building model as a set of objects, each of which can be described at multiple levels of detail, and contains an index of spatial cells with precomputed cell-to-cell and cell-to-object visibility information. As the observer moves through the model interactively, a real-time visibility algorithm traces sightline beams through transparent cell boundaries to determine a small set of objects potentially visible to the observer. An optimization algorithm dynamically selects a level of detail and rendering algorithm with which to display each potentially visible object in order to meet a user-specified target frame time. Throughout, memory management algorithms predict observer motion and pre-fetch objects from disk that may become visible during imminent frames. This paper describes an interactive building walkthrough system that uses these data structures and algorithms to maintain interactive frame rates during visualization of very large models. So far, the implementation supports models whose major 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Airey, John M. </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic Model-Space Subdivision and Potentially Visible Set Calculations. </title> <type> Ph.D. thesis, </type> <institution> UNC Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: Research on increasing frame rates during interactive visualization of architectural models has been under way for over twenty years [24]. Pioneering work in spatial subdivision and visibility precomputation has been done at the University of North Carolina at Chapel Hill <ref> [1, 2, 8] </ref>. Airey developed algorithms for partitioning architectural models into cells, and precomputing a potentially visible set of polygons (PVS) for each cell. Cell visibility was determined by tracing ray samples through transparent portions of cell boundaries to find polygons visible from particular viewpoints within the cell.
Reference: [2] <author> Airey, John M., John H. Rohlf, and Frederick P. Brooks, Jr. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <volume> 24, 2 (1990), </volume> <pages> 41-50. </pages>
Reference-contexts: Research on increasing frame rates during interactive visualization of architectural models has been under way for over twenty years [24]. Pioneering work in spatial subdivision and visibility precomputation has been done at the University of North Carolina at Chapel Hill <ref> [1, 2, 8] </ref>. Airey developed algorithms for partitioning architectural models into cells, and precomputing a potentially visible set of polygons (PVS) for each cell. Cell visibility was determined by tracing ray samples through transparent portions of cell boundaries to find polygons visible from particular viewpoints within the cell.
Reference: [3] <author> Amenta, Nina. </author> <title> Finding a Line Traversal of Axial Objects in Three Dimensions. </title> <booktitle> Proc. 3 rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> 66-71. </pages>
Reference-contexts: Hohmeyer and Teller have implemented a procedure to find sightlines through axial portal sequences, or determine that no such sightline exists, in O (n log n) time, where n is the number of portals in the sequence [21]. Amenta has proposed an O (n) solution for this problem <ref> [3] </ref>, although it has not yet been implemented. During the depth-first search for the source cell C, we construct its cell-to-cell and cell-to-object visibilities - i.e., the sets of cells and objects, respectively, that are potentially visible from C.
Reference: [4] <author> AutoCAD Reference Manual, </author> <title> Release 10, </title> <publisher> Autodesk Inc., </publisher> <year> 1990. </year>
Reference-contexts: In the case of Soda Hall, a set of files describing the major structural elements of the building (i.e., walls, ceilings, and floors) were prepared by architects using AutoCAD <ref> [4] </ref>. We implemented a converter that extracts the geometrical and surface attribute information embedded in AutoCAD DXF files [4] and translates them into the Berkeley UNIGRAFIX format [33] a format suitable for 3D object modeling, and then loads them into a display database, as shown in Figure 10. <p> In the case of Soda Hall, a set of files describing the major structural elements of the building (i.e., walls, ceilings, and floors) were prepared by architects using AutoCAD <ref> [4] </ref>. We implemented a converter that extracts the geometrical and surface attribute information embedded in AutoCAD DXF files [4] and translates them into the Berkeley UNIGRAFIX format [33] a format suitable for 3D object modeling, and then loads them into a display database, as shown in Figure 10. Unfortunately, the raw architectural models were not true three-dimensional models. <p> Furniture, stairs, and other objects that a user would expect to find in a typical building have been modeled in a variety of ways. Stairs, window frames, and doors were created by Khorramabadi using AutoCAD <ref> [4] </ref>. Models for many types of furniture (e.g., chairs, desks, and coffee cups) were created with interactive modeling programs by Ward [40]. Other types of furniture (e.g., bookshelves, plants, door handles, and lights) were created by procedural object generators developed by students at UC Berkeley.
Reference: [5] <author> Bechtel, Inc. WALKTHRU: </author> <title> 3D Animation and Visualization System. Promotional literature, </title> <booktitle> 1991. </booktitle> <pages> 54 </pages>
Reference-contexts: However, they do not support interactive visualization or design. Currently available commercial products that do allow interactive, real-time navigation generally support only small buildings models (e.g., less than one hundred thousand polygons), displayed with simple rendering algorithms (e.g., wire-frame or flat shading) <ref> [5, 39] </ref>. These commercial systems generally make little use of sophisticated precomputation, visibility determination, or detail elision, and require that the entire model be resident in memory. Research on increasing frame rates during interactive visualization of architectural models has been under way for over twenty years [24].
Reference: [6] <author> Bentley, J.L. </author> <title> Multidimensional Binary Search Trees Used for Associative Searching. </title> <journal> Communications of the ACM, </journal> <volume> 18 (1975), </volume> <pages> 509-517. </pages>
Reference-contexts: Finally, a radiosity computation can be performed. The results of the precomputation phase are stored in the display database for use during the walkthrough phase. 20 3.1 Spatial Subdivision We partition the model into a spatial subdivision of cells using a variant of the k-D tree data structure <ref> [6] </ref>. Splitting planes are introduced along the major, axis-aligned, opaque surfaces of the model (i.e., the walls, floors, and ceilings of the building). See [37] for details.
Reference: [7] <author> Blake, Edwin H. </author> <title> A Metric for Computing Adaptive Detail in Animated Scenes using Object-Oriented Programming. Eurographics `87. </title> <editor> G. Marechal (Ed.), </editor> <publisher> Elsivier Science Publishers, B.V. (North-Holland), </publisher> <year> 1987. </year>
Reference-contexts: If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization. Previously described detail elision techniques <ref> [7, 15, 28, 29, 32, 42] </ref>, use size or distance heuristics (often with feedback control) to choose a LOD for each object rendered. Simpler representations are used for objects that are small or far away from the observer and thus map to very few pixels on the workstation screen.
Reference: [8] <author> Brooks, Jr., Frederick P. </author> <title> Walkthrough ADynamic Graphics System for Simulating Virtual Buildings. </title> <booktitle> Proceedings of the 1986 Workshop on Interactive 3D Graphics. </booktitle>
Reference-contexts: Research on increasing frame rates during interactive visualization of architectural models has been under way for over twenty years [24]. Pioneering work in spatial subdivision and visibility precomputation has been done at the University of North Carolina at Chapel Hill <ref> [1, 2, 8] </ref>. Airey developed algorithms for partitioning architectural models into cells, and precomputing a potentially visible set of polygons (PVS) for each cell. Cell visibility was determined by tracing ray samples through transparent portions of cell boundaries to find polygons visible from particular viewpoints within the cell.
Reference: [9] <author> Brown, Thurman A. </author> <title> Interactive Object Displacement in Building Walkthrough Models. </title> <type> Master's Thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Numerous parameters are available to the user for control of object size, number, and placement. Alternatively, we use interactive placement programs, such as AutoCAD, ugitools [25] (an interactive UNIGRAFIX tool), or wkedit <ref> [9] </ref> (an interactive walkthrough editor) to generate object instances.
Reference: [10] <author> Clark, James H. </author> <title> Hierarchical Geometric Models for Visible Surface Algorithms. </title> <journal> Communications of the ACM, </journal> <volume> 19, </volume> <month> 10 (October </month> <year> 1976), </year> <pages> 547-554. </pages>
Reference-contexts: This technique was first described by Clark <ref> [10] </ref>, and has been used by numerous commercial visualization systems [32]. If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization.
Reference: [11] <author> Deyo, R. J., J. A. Briggs, and P. Doenges. </author> <title> Getting Graphics in Gear: Graphics and Dynamics in Driving Simulation. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '88), </booktitle> <volume> 24, </volume> <month> 4 (July </month> <year> 1988), </year> <pages> 317-326. </pages>
Reference-contexts: Several sophisticated commercial vehicle simulators have been built over the last thirty years, including many which contain algorithms for field-of-view culling, detail elision, and real-time management of very large databases <ref> [11, 31, 32, 43] </ref>. However, since most are commercial systems, very little has been published on this work. Although there are many similarities between vehicle simulators and building walk-through systems, there are several important differences. First, the types of environments encountered in vehicle simulators are quite different from building interiors.
Reference: [12] <author> Dijksta, </author> <title> E.W. A Note on Two Problems in Connexion with Graphs. Numerische Math-ematik 1, </title> <booktitle> 1959, </booktitle> <pages> 269-271. </pages>
Reference-contexts: In each frame of an interactive walkthrough, we compute a set of range cells, R, that are likely to contain the observer eye position during the next N frames by performing a shortest path search of the cell adjacency graph. The search, implemented using Dijkstra's method <ref> [12] </ref>, adds cells to the range set ordered by the minimum number of frames before the observer can enter the cell.
Reference: [13] <author> Foley, J.D., A. van Dam, S. Feiner, and J. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. 2nd ed., </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: We represent an observer viewpoint by a view frustum, which is specified by an "eye" position, a view direction, azimuthal and altitudinal half angles, and an up vector (Figure 25). This representation is mapped to a perspective viewing transformation <ref> [13] </ref> for display purposes by setting the center of projection to the observer eye position, the view reference point to the center of the window, and the view plane normal and up vectors to the corresponding frustum parameters (Figure 26).
Reference: [14] <author> Funkhouser, Thomas A. </author> <title> An Interactive UNIGRAFIX Editor. </title> <type> Unpublished. </type> <month> May, </month> <year> 1991. </year>
Reference-contexts: For other types of objects, many of which are described originally in a flat, polygonal format containing no information about how they were generated or whether there is a hierarchy of parts, we have constructed less detailed representations from highly detailed originals using an interactive UNIGRAFIX editor, called animator <ref> [14, 34] </ref>.
Reference: [15] <author> Funkhouser, Thomas A., Carlo H. Sequin, and Seth J. Teller. </author> <title> Management of Large Amounts of Data in Interactive Building Walkthroughs. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <month> March, </month> <year> 1992, </year> <pages> 11-20. 55 </pages>
Reference-contexts: The display database is the link between these three phases. It stores the complete building model, along with the results of the precomputation phase, for use during the walkthrough phase. Since details of many aspects of this system have been published in previous papers <ref> [15, 16, 17, 25, 35, 36, 37] </ref>, this paper focuses on the overall system design. The paper is organized 13 as follows. Sections 2 through 4 describe the three phases of the system, respectively. <p> If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization. Previously described detail elision techniques <ref> [7, 15, 28, 29, 32, 42] </ref>, use size or distance heuristics (often with feedback control) to choose a LOD for each object rendered. Simpler representations are used for objects that are small or far away from the observer and thus map to very few pixels on the workstation screen.
Reference: [16] <author> Funkhouser, Thomas A., and Carlo H. Sequin. </author> <title> Adaptive Display Algorithm for Inter--active Frame Rates During Visualization of Complex Virtual Environments. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '93), </booktitle> <month> (August </month> <year> 1993), </year> <month> 247-254.. </month>
Reference-contexts: The display database is the link between these three phases. It stores the complete building model, along with the results of the precomputation phase, for use during the walkthrough phase. Since details of many aspects of this system have been published in previous papers <ref> [15, 16, 17, 25, 35, 36, 37] </ref>, this paper focuses on the overall system design. The paper is organized 13 as follows. Sections 2 through 4 describe the three phases of the system, respectively. <p> Moreover, computations are done in parallel with the display of the previous frame on a separate processor in a pipelined architecture and thus do not increase the effective frame rate as long as the time required for computation is not greater than the time required for display. See <ref> [16, 17] </ref> for more details. 4.3 Memory Management Realistic-looking three dimensional models may be much larger than can fit into main memory. Thus, an interactive walkthrough system must swap portions of the model in and out of memory in real-time as the observer navigates through the model.
Reference: [17] <author> Funkhouser, Thomas A. </author> <title> Database and Display Algorithms for Interactive Visualization of Architectural Models. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1993. </year> <note> Also available as UC Berkeley technical report UCB/CSD-93-771. </note>
Reference-contexts: The display database is the link between these three phases. It stores the complete building model, along with the results of the precomputation phase, for use during the walkthrough phase. Since details of many aspects of this system have been published in previous papers <ref> [15, 16, 17, 25, 35, 36, 37] </ref>, this paper focuses on the overall system design. The paper is organized 13 as follows. Sections 2 through 4 describe the three phases of the system, respectively. <p> Moreover, computations are done in parallel with the display of the previous frame on a separate processor in a pipelined architecture and thus do not increase the effective frame rate as long as the time required for computation is not greater than the time required for display. See <ref> [16, 17] </ref> for more details. 4.3 Memory Management Realistic-looking three dimensional models may be much larger than can fit into main memory. Thus, an interactive walkthrough system must swap portions of the model in and out of memory in real-time as the observer navigates through the model. <p> In either case, the set of lookahead objects is certainly a superset of the objects visible from the current observer viewpoint, as well as a good estimate of the objects that are most likely to be rendered in upcoming frames. See <ref> [17] </ref> for more details. 41 4.3.2 Cache Management After computing the set of lookahead objects, we must determine which objects to load into memory (i.e., the read set) and which to remove from memory (i.e., the release set) during each frame of an interactive walkthrough.
Reference: [18] <author> Garey, Michael R. and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: We use the Cost and Benefit heuristics to choose a set of object tuples to render each frame by solving the constrained optimization in Equation 1. Unfortunately, this constrained optimization problem is NP-complete. It is the Continuous Multiple Choice Knapsack Problem <ref> [18, 22] </ref>, a version of the well-known Knapsack Problem in which elements are partitioned into candidate sets, and at most one element from each candidate set may be placed in the knapsack at once.
Reference: [19] <author> Goral, Cindy M., Kenneth E. Torrance, Donald P. Greenberg, and Bennett Bat-taile. </author> <title> Modeling the Interaction of Light Between Diffuse Surfaces. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '84), </booktitle> <volume> 18, </volume> <month> 3 (July </month> <year> 1984), </year> <pages> 213-222. </pages>
Reference-contexts: In all, the model of Soda Hall contains 1,418,807 polygons, of which only 31,625 represent the walls, ceilings, and floors of the building, while the remainder represent its "contents." 1.2.2 Image Quality A second goal of our work is to use radiosity illumination simulation methods <ref> [19, 26] </ref> to generate realistic-looking images with indirect diffuse reflections and shadows (Figures 5 and 6). Radiosity methods, based on models of radiative transfer methods in thermaengineering, consider every polygon a potential emitter or reflector of radiance (or luminance).
Reference: [20] <author> Greene, Ned, Michael Kass, and Gavin Miller. </author> <title> Hierarchical Z-Buffer Visibility. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '93), </booktitle> <month> (August </month> <year> 1993), </year> <pages> 231-238. </pages>
Reference-contexts: The disadvantage of this 6 approach is that computation is stochastic, and thus can under-estimate true cell visibility and requires a large amount of computation. Recently, other algorithms have been described for culling occluded polygons during interactive visualization. The hierarchical z-buffer algorithm <ref> [20] </ref> uses a pyramid of z-buffers to determine the cells of an octree (and the enclosed polygons) that are potentially visible for a particular viewpoint.
Reference: [21] <author> Hohmeyer, Michael E., and Seth J. Teller. </author> <title> Stabbing Isothetic Rectangles and Boxes in O(n lg n) Time. </title> <type> Technical Report UCB/CSD 91/634, </type> <institution> Computer Science Department, U.C. Berkeley, </institution> <year> 1991. </year>
Reference-contexts: Hohmeyer and Teller have implemented a procedure to find sightlines through axial portal sequences, or determine that no such sightline exists, in O (n log n) time, where n is the number of portals in the sequence <ref> [21] </ref>. Amenta has proposed an O (n) solution for this problem [3], although it has not yet been implemented. During the depth-first search for the source cell C, we construct its cell-to-cell and cell-to-object visibilities - i.e., the sets of cells and objects, respectively, that are potentially visible from C.
Reference: [22] <author> Ibaraki, T., T. Hasegawa, K. Teranaka, J. Iwase. </author> <title> The Multiple Choice Knapsack Problem. </title> <institution> J. Oper. Res. Soc. </institution> <address> Japan 21, </address> <year> 1978, </year> <pages> 59-94. </pages>
Reference-contexts: We use the Cost and Benefit heuristics to choose a set of object tuples to render each frame by solving the constrained optimization in Equation 1. Unfortunately, this constrained optimization problem is NP-complete. It is the Continuous Multiple Choice Knapsack Problem <ref> [18, 22] </ref>, a version of the well-known Knapsack Problem in which elements are partitioned into candidate sets, and at most one element from each candidate set may be placed in the knapsack at once.
Reference: [23] <author> Ibarra, O. H. and C. E. Kim. </author> <title> Fast Approximate Algorithms for the Knapsack and Sum of Subset Problems. </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 22, </volume> <year> 1975, </year> <pages> 463-468. </pages>
Reference-contexts: We have implemented a simple, greedy approximation algorithm for this problem that selects object tuples with the highest Benefit =Cost <ref> [23, 30] </ref>. Our implementation finds an approximate solution that is at least half as good as the optimal solution in O (n log n) for n potentially visible objects.
Reference: [24] <author> Jones, C.B. </author> <title> A New Approach to the `Hidden Line' Problem. </title> <journal> The Computer Journal, </journal> <volume> 14, </volume> <month> 3 (August </month> <year> 1971), </year> <pages> 232-237. 56 </pages>
Reference-contexts: These commercial systems generally make little use of sophisticated precomputation, visibility determination, or detail elision, and require that the entire model be resident in memory. Research on increasing frame rates during interactive visualization of architectural models has been under way for over twenty years <ref> [24] </ref>. Pioneering work in spatial subdivision and visibility precomputation has been done at the University of North Carolina at Chapel Hill [1, 2, 8]. Airey developed algorithms for partitioning architectural models into cells, and precomputing a potentially visible set of polygons (PVS) for each cell.
Reference: [25] <author> Khorramabadi, Delnaz. </author> <title> A Walk through the Planned CS Building. </title> <type> Master's Thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1991. </year> <note> Also available as UC Berkeley technical report UCB/CSD 91/652. </note>
Reference-contexts: The display database is the link between these three phases. It stores the complete building model, along with the results of the precomputation phase, for use during the walkthrough phase. Since details of many aspects of this system have been published in previous papers <ref> [15, 16, 17, 25, 35, 36, 37] </ref>, this paper focuses on the overall system design. The paper is organized 13 as follows. Sections 2 through 4 describe the three phases of the system, respectively. <p> Therefore, an element-by-element conversion of the architectural database to the UNIGRAFIX format would not have produced a viable model. We used automated programs to detect and correct most of these anomalies <ref> [25] </ref> and then manually corrected the remaining modeling errors with interactive tools. Furniture, stairs, and other objects that a user would expect to find in a typical building have been modeled in a variety of ways. Stairs, window frames, and doors were created by Khorramabadi using AutoCAD [4]. <p> The "office generator" places a desk against one wall, a chair in front of the desk, some bookshelves against the walls, and so on. Numerous parameters are available to the user for control of object size, number, and placement. Alternatively, we use interactive placement programs, such as AutoCAD, ugitools <ref> [25] </ref> (an interactive UNIGRAFIX tool), or wkedit [9] (an interactive walkthrough editor) to generate object instances.
Reference: [26] <author> Nishita, T., and E. Nakamae. </author> <title> Half-Tone Representation of 3D Objects Illuminated by Area Sources or Polyhedron Sources. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '85), </booktitle> <volume> 19, </volume> <month> 3 (July </month> <year> 1985), </year> <pages> 23-30. </pages>
Reference-contexts: In all, the model of Soda Hall contains 1,418,807 polygons, of which only 31,625 represent the walls, ceilings, and floors of the building, while the remainder represent its "contents." 1.2.2 Image Quality A second goal of our work is to use radiosity illumination simulation methods <ref> [19, 26] </ref> to generate realistic-looking images with indirect diffuse reflections and shadows (Figures 5 and 6). Radiosity methods, based on models of radiative transfer methods in thermaengineering, consider every polygon a potential emitter or reflector of radiance (or luminance).
Reference: [27] <author> Oakland, Steven Anders. BUMP, </author> <title> A Motion Description and Animation Package. </title> <type> Technical Report UCB/CSD 87/370, </type> <institution> Computer Science Department, U.C. Berkeley, </institution> <year> 1987. </year>
Reference-contexts: Chair instance #1 inherits its lowest LOD from the object definition, whereas its medium and high LODs are specified explicitly. own geometries. Objects that move over time are represented by a simple extension to this hierarchy using a technique derived from ugbump <ref> [27] </ref>. The 4x4 transformation of any object instance can be represented by a sequence of strings representing translate, rotate and scale transformations as functions of a variable, t. For instance, the string "-rz $10 fl t$" means rotate the object around the `z' axis by 10 degrees every second.
Reference: [28] <author> Rossignac, J. and P. Borrel. </author> <title> Multi-resolution 3D approximations for rendering complex scenes. </title> <booktitle> IFIP TC 5.WG 5.10 II Conference on Geometric Modeling in Computer Graphics, </booktitle> <address> Genova, Italy, </address> <year> 1993. </year> <note> Also available as IBM Research Report RC 17697, </note> <institution> Yorktown Heights, </institution> <address> NY 10598. </address>
Reference-contexts: If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization. Previously described detail elision techniques <ref> [7, 15, 28, 29, 32, 42] </ref>, use size or distance heuristics (often with feedback control) to choose a LOD for each object rendered. Simpler representations are used for objects that are small or far away from the observer and thus map to very few pixels on the workstation screen.
Reference: [29] <author> Rubin, S. M. </author> <title> The representation and display of scenes with a wide range of detail. </title> <booktitle> Computer Graphics and Image Processing. 19 (1982), </booktitle> <pages> 291-298. </pages>
Reference-contexts: If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization. Previously described detail elision techniques <ref> [7, 15, 28, 29, 32, 42] </ref>, use size or distance heuristics (often with feedback control) to choose a LOD for each object rendered. Simpler representations are used for objects that are small or far away from the observer and thus map to very few pixels on the workstation screen.
Reference: [30] <author> Sahni, S. </author> <title> Approximate Algorithms for the 0/1 Knapsack Problem. </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 22, </volume> <year> 1975, </year> <pages> 115-124. </pages>
Reference-contexts: We have implemented a simple, greedy approximation algorithm for this problem that selects object tuples with the highest Benefit =Cost <ref> [23, 30] </ref>. Our implementation finds an approximate solution that is at least half as good as the optimal solution in O (n log n) for n potentially visible objects.
Reference: [31] <author> Schachter, Bruce J. </author> <title> Computer Image Generation for Flight Simulation. </title> <journal> IEEE Computer Graphics and Applications. </journal> <volume> 1, 5 (1981), </volume> <pages> 29-68. </pages>
Reference-contexts: Several sophisticated commercial vehicle simulators have been built over the last thirty years, including many which contain algorithms for field-of-view culling, detail elision, and real-time management of very large databases <ref> [11, 31, 32, 43] </ref>. However, since most are commercial systems, very little has been published on this work. Although there are many similarities between vehicle simulators and building walk-through systems, there are several important differences. First, the types of environments encountered in vehicle simulators are quite different from building interiors.
Reference: [32] <author> Schachter, Bruce J. (Ed.). </author> <title> Computer Image Generation. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, NY, </address> <year> 1983. </year>
Reference-contexts: Several sophisticated commercial vehicle simulators have been built over the last thirty years, including many which contain algorithms for field-of-view culling, detail elision, and real-time management of very large databases <ref> [11, 31, 32, 43] </ref>. However, since most are commercial systems, very little has been published on this work. Although there are many similarities between vehicle simulators and building walk-through systems, there are several important differences. First, the types of environments encountered in vehicle simulators are quite different from building interiors. <p> This technique was first described by Clark [10], and has been used by numerous commercial visualization systems <ref> [32] </ref>. If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization. <p> If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization. Previously described detail elision techniques <ref> [7, 15, 28, 29, 32, 42] </ref>, use size or distance heuristics (often with feedback control) to choose a LOD for each object rendered. Simpler representations are used for objects that are small or far away from the observer and thus map to very few pixels on the workstation screen.
Reference: [33] <author> Sequin, Carlo H. </author> <title> Introduction to the Berkeley UNIGRAFIX Tools (Version 3.0). </title> <type> Technical Report UCB/CSD 91/606, </type> <institution> Computer Science Department, U.C. Berkeley, </institution> <year> 1991. </year>
Reference-contexts: We implemented a converter that extracts the geometrical and surface attribute information embedded in AutoCAD DXF files [4] and translates them into the Berkeley UNIGRAFIX format <ref> [33] </ref> a format suitable for 3D object modeling, and then loads them into a display database, as shown in Figure 10. Unfortunately, the raw architectural models were not true three-dimensional models.
Reference: [34] <author> Smith, Kevin, P. </author> <title> Interactive Modeling Tool. </title> <type> Unpublished. </type> <month> September, </month> <year> 1990. </year> <month> 57 </month>
Reference-contexts: For other types of objects, many of which are described originally in a flat, polygonal format containing no information about how they were generated or whether there is a hierarchy of parts, we have constructed less detailed representations from highly detailed originals using an interactive UNIGRAFIX editor, called animator <ref> [14, 34] </ref>.
Reference: [35] <author> Teller, Seth J., and Carlo H. Sequin. </author> <title> Visibility Preprocessing for Interactive Walk--throughs. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '91), </booktitle> <volume> 25, </volume> <month> 4 (August </month> <year> 1991), </year> <pages> 61-69. </pages>
Reference-contexts: The display database is the link between these three phases. It stores the complete building model, along with the results of the precomputation phase, for use during the walkthrough phase. Since details of many aspects of this system have been published in previous papers <ref> [15, 16, 17, 25, 35, 36, 37] </ref>, this paper focuses on the overall system design. The paper is organized 13 as follows. Sections 2 through 4 describe the three phases of the system, respectively. <p> During spatial subdivision, we precompute and store in the display database for each cell: 1) the portals on its boundaries, 2) the cells sharing its boundaries, and 3) the objects completely or partially inside its boundaries. See <ref> [35, 37] </ref> for more details. a) Actual three dimensional subdivision. b) Two dimensional schematic representation. actual three dimensional subdivision, while the image on the right shows a two dimensional schematic representation. 3.2 Visibility Precomputation Once the spatial subdivision has been constructed, we perform a visibility precomputation in which the portion of <p> Otherwise, the region of R visible to the observer (i.e., the intersection of R and W ) is included in the visible region, and the search recurses into neighboring cells. See <ref> [35, 37] </ref> for more details. A schematic diagram of the visible region computation is shown in two dimensions in by thick black lines, and the visible region is shown in stipple gray. portals.
Reference: [36] <author> Teller, Seth J. </author> <title> Computing the Antiumbra Cast by an Area Light Source. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '92), </booktitle> <volume> 26, </volume> <month> 2 (August </month> <year> 1992), </year> <pages> 139-148. </pages>
Reference-contexts: The display database is the link between these three phases. It stores the complete building model, along with the results of the precomputation phase, for use during the walkthrough phase. Since details of many aspects of this system have been published in previous papers <ref> [15, 16, 17, 25, 35, 36, 37] </ref>, this paper focuses on the overall system design. The paper is organized 13 as follows. Sections 2 through 4 describe the three phases of the system, respectively.
Reference: [37] <author> Teller, Seth J. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1992. </year> <note> Also available as UC Berkeley technical report UCB/CSD-92-708. </note>
Reference-contexts: The display database is the link between these three phases. It stores the complete building model, along with the results of the precomputation phase, for use during the walkthrough phase. Since details of many aspects of this system have been published in previous papers <ref> [15, 16, 17, 25, 35, 36, 37] </ref>, this paper focuses on the overall system design. The paper is organized 13 as follows. Sections 2 through 4 describe the three phases of the system, respectively. <p> Splitting planes are introduced along the major, axis-aligned, opaque surfaces of the model (i.e., the walls, floors, and ceilings of the building). See <ref> [37] </ref> for details. After subdivision, cell portals (i.e., the transparent portions of shared boundaries) are identified and stored with each leaf cell, along with an identifier for the neighboring cell to which the portal leads. <p> During spatial subdivision, we precompute and store in the display database for each cell: 1) the portals on its boundaries, 2) the cells sharing its boundaries, and 3) the objects completely or partially inside its boundaries. See <ref> [35, 37] </ref> for more details. a) Actual three dimensional subdivision. b) Two dimensional schematic representation. actual three dimensional subdivision, while the image on the right shows a two dimensional schematic representation. 3.2 Visibility Precomputation Once the spatial subdivision has been constructed, we perform a visibility precomputation in which the portion of <p> Otherwise, the region of R visible to the observer (i.e., the intersection of R and W ) is included in the visible region, and the search recurses into neighboring cells. See <ref> [35, 37] </ref> for more details. A schematic diagram of the visible region computation is shown in two dimensions in by thick black lines, and the visible region is shown in stipple gray. portals.
Reference: [38] <author> Teller, Seth J., Celeste Fowler, Thomas Funkhouser, </author> <title> and Pat Hanrahan Partitioning and Ordering Large Radiosity Computations. </title> <note> To appear in Computer Graphics (Proc. SIG-GRAPH '94), </note> <month> July, </month> <year> 1994. </year>
Reference-contexts: We aim to support visualization of large radiosity solutions in our building walkthrough system. However, techniques for computing such solutions have just recently been developed <ref> [38] </ref> and are not addressed in this paper. 1.2.3 Performance Another critical goal of our system is to provide performance that is adequate to maintain the real-time feel of interactive visualization.
Reference: [39] <author> Virtus Walkthrough. Promotional literature, </author> <year> 1991. </year>
Reference-contexts: However, they do not support interactive visualization or design. Currently available commercial products that do allow interactive, real-time navigation generally support only small buildings models (e.g., less than one hundred thousand polygons), displayed with simple rendering algorithms (e.g., wire-frame or flat shading) <ref> [5, 39] </ref>. These commercial systems generally make little use of sophisticated precomputation, visibility determination, or detail elision, and require that the entire model be resident in memory. Research on increasing frame rates during interactive visualization of architectural models has been under way for over twenty years [24].
Reference: [40] <author> Ward, Greg. </author> <title> Lawrence Berkeley Laboratories. </title> <type> Personal Communication, </type> <year> 1993. </year>
Reference-contexts: Stairs, window frames, and doors were created by Khorramabadi using AutoCAD [4]. Models for many types of furniture (e.g., chairs, desks, and coffee cups) were created with interactive modeling programs by Ward <ref> [40] </ref>. Other types of furniture (e.g., bookshelves, plants, door handles, and lights) were created by procedural object generators developed by students at UC Berkeley. Instances of these objects were placed into the building model using both automatic and interactive placement programs.
Reference: [41] <author> Ware, Colin, and Steven Osborne. </author> <title> Exploration and Virtual Camera Control in Virtual Three Dimensional Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <volume> 24, 2 (1990), </volume> <pages> 171-176. </pages>
Reference-contexts: Thus, realistic-looking images generated using physically-based lighting simulations are required for lighting design verification. 5 Second, mechanical CAD systems generally simulate an observer looking at the model "through a window" from the outside. The user typically uses a Scene in Hand metaphor <ref> [41] </ref> to manipulate the object by means of translation, scaling and rotation. In contrast, building walkthrough systems simulate an observer moving through the interior of the model, the Flying Vehicle Control metaphor [41]. <p> The user typically uses a Scene in Hand metaphor <ref> [41] </ref> to manipulate the object by means of translation, scaling and rotation. In contrast, building walkthrough systems simulate an observer moving through the interior of the model, the Flying Vehicle Control metaphor [41]. These different metaphors for observer navigation may imply different approaches to observer viewpoint prediction, visibility determination, and detail elision. 1.1.3 Architectural CAD Systems Commercial products for visualization of architectural models have recently become available.
Reference: [42] <author> Zyda, Michael J. </author> <title> Course Notes, Book Number 10, </title> <institution> Graphics and Video Laboratory, Department of Computer Science, Naval Postgraduate School, Monterey, California, </institution> <month> November, </month> <year> 1991. </year>
Reference-contexts: If different representations for the same object have similar appearances and are blended smoothly, using transparency blending or three dimensional interpolation, transitions between levels of detail are barely noticeable during visualization. Previously described detail elision techniques <ref> [7, 15, 28, 29, 32, 42] </ref>, use size or distance heuristics (often with feedback control) to choose a LOD for each object rendered. Simpler representations are used for objects that are small or far away from the observer and thus map to very few pixels on the workstation screen.
Reference: [43] <author> Zyda, Michael J., David R. Pratt, James G. Monahan, and Kalin P. Wilson. NPSNET: </author> <title> Constructing a 3D virtual world. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <month> March, </month> <year> 1992. </year> <month> 58 </month>
Reference-contexts: Several sophisticated commercial vehicle simulators have been built over the last thirty years, including many which contain algorithms for field-of-view culling, detail elision, and real-time management of very large databases <ref> [11, 31, 32, 43] </ref>. However, since most are commercial systems, very little has been published on this work. Although there are many similarities between vehicle simulators and building walk-through systems, there are several important differences. First, the types of environments encountered in vehicle simulators are quite different from building interiors.
References-found: 43

