URL: http://osl.cs.uiuc.edu/~nvenkata/papers/icdcs96/loadtr.ps
Refering-URL: http://osl.cs.uiuc.edu/~nvenkata/
Root-URL: http://www.cs.uiuc.edu
Email: (nalini,srinivas)@hpl.hp.com  
Title: Effective Load Management for Scalable Video Servers  
Author: Nalini Venkatasubramanian and Srinivas Ramanathan 
Date: September 12, 1996  
Address: 1501 Page Mill Road Palo Alto, CA 94304  
Affiliation: Broadband Information Systems Lab Hewlett-Packard Laboratories  
Abstract: Advances in storage technologies are making it feasible to design video servers that are capable of supporting continuous, real-time delivery of multiple video streams simultaneously. One of the major design considerations for a large-scale video server is scalability, to admit and service thousands of subscriber requests simultaneously. In this paper, we define and formulate various policies that can be used for load management in a video server. We propose a predictive placement policy that determines the degree of replication necessary for selected popular video objects using a cost-based optimization procedure that is based on a priori predictions of expected subscriber requests. For scheduling subscriber requests, we propose an adaptive scheduling policy that enables the video server to admit and service a maximum number of subscriber requests simultaneously. By comparing the relative utilization of resources at different data sources, this policy determines an assignment of requests to replicas. Since storage space is one of the key resources in the video server, we also devise methods for dereplication of storage for video objects, depending upon change in video object popularities or changes in server usage patterns. Optimizations to exploit dynamic changes in server access are also discussed. We present performance evaluations to compare the effectiveness of these load management policies for different video server configurations. Our analysis indicates that a load management procedure that uses a judicious combination of the different policies out performs the other policies for most server configurations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.P. Anderson, Y. Osawa, and R. Govindan. </author> <title> A file system for continuous media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Many of the initial efforts in designing video servers have focussed on the storage subsystem. Data layout methods that determine placement of media blocks on disk to maximize throughput while ensuring continuous, real-time retrieval <ref> [1, 17] </ref>, have been proposed. Admission control procedures [15] and buffer management policies that minimize the memory buffers needed to smooth out variations in data retrieval and transmission times have also received much attention in the past [10, 12].
Reference: [2] <author> Chatschik Bisdikian and Baiju V. Patel. </author> <title> Issues on movie allocation in distributed video-on-demand systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Communications, </booktitle> <volume> volume 1, </volume> <pages> pages 250-255, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The average duration of movies are assumed to vary uniformly between 30 and 120 minutes. In the basic configuration, the video server stores 20 movies. Following the results reported in <ref> [2, 5] </ref>, we assume that the popularity of movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: Pr. (movie m i is requested) = K M i where K M = P M 1 For each day, the peak period for request
Reference: [3] <author> M. Buddhikot and G. Parulkar. </author> <title> Efficient data layout, scheduling and play-out control in mars. </title> <booktitle> In Proceedings of NOSSDAV'95, </booktitle> <pages> pages 339-351, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: One of the major design considerations for a large-scale video server is scalability to admit and service thousands of subscriber requests simultaneously <ref> [3] </ref>.
Reference: [4] <author> Y.H. Chang, D. Coggins, D. Pitt, D. Skellern, and M. Thapar. </author> <title> An open-systems approach to video on demand. </title> <journal> IEEE Communications, </journal> <volume> 32(5) </volume> <pages> 68-80, </pages> <month> May </month> <year> 1994. </year>
Reference: [5] <author> Y.S. Chen and P.Chong. </author> <title> Mathematical modeling of empirical laws in computer applications. </title> <journal> Comput. Math. Appl., </journal> <pages> pages 77-87, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The average duration of movies are assumed to vary uniformly between 30 and 120 minutes. In the basic configuration, the video server stores 20 movies. Following the results reported in <ref> [2, 5] </ref>, we assume that the popularity of movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: Pr. (movie m i is requested) = K M i where K M = P M 1 For each day, the peak period for request
Reference: [6] <author> A. Dan, M. Kienzle, and D. Sitaram. </author> <title> Dynamic policy of segment replication for load-balancing in video-on-demand servers. </title> <journal> ACM Multimedia Systems, </journal> <volume> 3(3) </volume> <pages> 93-103, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: An interesting notion alluded to is the creation of additional replicas during lightly loaded periods. We have devised, eager replication, a mechanism to manage the transition of these replicas into serviceable replicas or reclaimable disk space. The dynamic segment replication scheme in <ref> [6] </ref> is suited for partial replication of video files. This mechanism allows us to dynamically migrate executing requests to a replica on a less loaded device. As discussed earlier, this mechanism is a suited for systems where there are two levels of switching (storage and network).
Reference: [7] <author> A. Dan, D. Sitaram, and P. Shahabuddin. </author> <title> Dynamic batching policies for an on-demand video server. </title> <journal> ACM Multimedia Systems, </journal> <volume> 4 </volume> <pages> 112-121, </pages> <year> 1996. </year>
Reference-contexts: Batching, buffering and caching mechanisms have been proposed for resource management in a video server. By batching (grouping) requests for the same video that arrive within a short time, multiple client requests for that video can be served with a single disk I/O stream and thereby exploit multicasting. <ref> [7] </ref> explores role of customer-waiting time and reneging behavior in dynamic batching policies and propose mechanisms to reduce reneging probability and avg. waiting time per client. Readahead buffering per stream avoids disruptions in playback caused by variations in disk access times.
Reference: [8] <author> Asit Dan, D. Dias, R. Mukherjee, D. Sitaram, and Tewari. R. </author> <title> Buffering and caching in large scale video servers. </title> <booktitle> In IEEE Compcon, </booktitle> <pages> pages 217-224, </pages> <year> 1995. </year>
Reference-contexts: Readahead buffering per stream avoids disruptions in playback caused by variations in disk access times. Caching, i.e., serving video streams from a memory cache improves performance in case of heavily skewed accesses. Cost-performance and real-time performance of buffering and caching in large scale video servers is studied in <ref> [8] </ref>. More recently, replication and striping strategies for optimizing storage space at the server have been proposed [11, 14].
Reference: [9] <author> Asit Dan and Dinkar Sitaram. </author> <title> An online video placement policy based on bandwidth to space ratio (bsr). </title> <booktitle> In SIGMOD '95, </booktitle> <pages> pages 376-385, </pages> <year> 1995. </year>
Reference-contexts: Related work in load balancing and resource management for video servers can be found in <ref> [16, 9] </ref>. The DASD dancing scheme proposed in [16] performs disk load balancing in two stages. An initial static stage determines assignment of videos to groups of shared disks. The process consists of building a clique tree whose root nodes contain the most popular videos. <p> The dynamic phase that follows uses this assignment and performs real-time disk scheduling effectively. An online video placement policy based on a space and bandwidth tradeoffs, quantified by a Bandwidth to Space Ratio (BSR) is proposed in <ref> [9] </ref>. Here, the expected load is allocated to a storage device so as to match the BSR of these devices. The main difference in our work is in the underlying architecture. The architecture assumed by the mechanisms proposed is that of a central processor and a collection of shared disks. <p> They, on the other hand, try to distribute load among replicas so as to match the BSRs of the devices. Another key difference lies in the treatment of the video allocation problem. <ref> [9] </ref> tries to find the best match between a video and a server (by comparing the BSR ratios for both). We do a fit based mainly on one of the factors (bandwidth, CPU, transfer rate). <p> Assuming that the request arrivals per hour follow a Zipf-like distribution <ref> [9] </ref>, we compute the probability of request arrival in hour j to be: p j = c=(j 1 ), for 1 j 24, where is the degree of skew and is assumed to be 0.8.
Reference: [10] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of delay sensitive multimedia data storage and retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Admission control procedures [15] and buffer management policies that minimize the memory buffers needed to smooth out variations in data retrieval and transmission times have also received much attention in the past <ref> [10, 12] </ref>. Batching, buffering and caching mechanisms have been proposed for resource management in a video server.
Reference: [11] <author> K. Keeton and R. Katz. </author> <title> The evaluation of video layout strategies on a high-bandwidth file server. </title> <booktitle> In Proceedings of the Fourth International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, UK, </booktitle> <pages> pages 237-250, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Cost-performance and real-time performance of buffering and caching in large scale video servers is studied in [8]. More recently, replication and striping strategies for optimizing storage space at the server have been proposed <ref> [11, 14] </ref>. An often neglected problem in video server design is how to engineer the video server for high performance by efficiently utilizing all of its storage, mem 3 ory, and processing resources to maximize its throughput.
Reference: [12] <author> P. Lougher and D. Shepherd. </author> <title> The design of a storage server for continuous media. </title> <journal> The Computer Journal Special Issue on Distributed Multimedia Systems, </journal> <volume> 36(1) </volume> <pages> 32-42, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Admission control procedures [15] and buffer management policies that minimize the memory buffers needed to smooth out variations in data retrieval and transmission times have also received much attention in the past <ref> [10, 12] </ref>. Batching, buffering and caching mechanisms have been proposed for resource management in a video server.
Reference: [13] <author> M. Thapar and B. Koerner. </author> <title> Architecture for video servers. </title> <booktitle> In Proceedings of the 43rd Annual NCTA Convention and Exposition, </booktitle> <address> New Orleans, </address> <publisher> Louisiana, </publisher> <pages> pages 141-148, </pages> <year> 1994. </year>
Reference: [14] <author> F.A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming raid: A disk storage system for video and audio files. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 393-400, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Cost-performance and real-time performance of buffering and caching in large scale video servers is studied in [8]. More recently, replication and striping strategies for optimizing storage space at the server have been proposed <ref> [11, 14] </ref>. An often neglected problem in video server design is how to engineer the video server for high performance by efficiently utilizing all of its storage, mem 3 ory, and processing resources to maximize its throughput.
Reference: [15] <author> H. M. Vin and P. V. Rangan. </author> <title> Designing a multi-user hdtv storage server. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(1) </volume> <pages> 153-164, </pages> <month> Jan-uary </month> <year> 1993. </year>
Reference-contexts: Many of the initial efforts in designing video servers have focussed on the storage subsystem. Data layout methods that determine placement of media blocks on disk to maximize throughput while ensuring continuous, real-time retrieval [1, 17], have been proposed. Admission control procedures <ref> [15] </ref> and buffer management policies that minimize the memory buffers needed to smooth out variations in data retrieval and transmission times have also received much attention in the past [10, 12]. Batching, buffering and caching mechanisms have been proposed for resource management in a video server.
Reference: [16] <author> Joel L. Wolf, Philip S. Yu, and Hadas Shachnai. </author> <title> Dasd dancing: A disk load balancing optimization scheme for video-on-demand computer systems. </title> <booktitle> In Proceedings of ACM SIGMETRICS '95, Performance Evaluation Review, </booktitle> <pages> pages 157-166, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Related work in load balancing and resource management for video servers can be found in <ref> [16, 9] </ref>. The DASD dancing scheme proposed in [16] performs disk load balancing in two stages. An initial static stage determines assignment of videos to groups of shared disks. The process consists of building a clique tree whose root nodes contain the most popular videos. <p> Related work in load balancing and resource management for video servers can be found in [16, 9]. The DASD dancing scheme proposed in <ref> [16] </ref> performs disk load balancing in two stages. An initial static stage determines assignment of videos to groups of shared disks. The process consists of building a clique tree whose root nodes contain the most popular videos. A greedy approach tries to maximize distance b/w copies of the same video.
Reference: [17] <author> P. Yu, M.S. Chen, and D.D. Kandlur. </author> <title> Design and analysis of a grouped sweeping scheme for multimedia storage management. </title> <booktitle> Proceedings of Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, </address> <pages> pages 38-49, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Many of the initial efforts in designing video servers have focussed on the storage subsystem. Data layout methods that determine placement of media blocks on disk to maximize throughput while ensuring continuous, real-time retrieval <ref> [1, 17] </ref>, have been proposed. Admission control procedures [15] and buffer management policies that minimize the memory buffers needed to smooth out variations in data retrieval and transmission times have also received much attention in the past [10, 12].
Reference: [18] <author> L. Yun and D. Messerschmitt. </author> <title> Architectures for multi-source multi-user video compositing. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <pages> pages 215-223, </pages> <month> August </month> <year> 1995. </year> <month> 35 </month>
Reference-contexts: In some cases, the retrieved data may be processed before transmission: for example, in order to provide picture-in-picture capability or to embed other information in the extracted data, compositing functions are incorporated in this module <ref> [18] </ref>. * Communication Module: The extracted and processed data from the data manipulation modules is passed to the communication module that implements the protocols required for data transmission over the interconnecting network.
References-found: 18

