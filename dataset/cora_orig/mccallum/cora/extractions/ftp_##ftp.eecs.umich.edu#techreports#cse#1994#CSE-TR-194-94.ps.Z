URL: ftp://ftp.eecs.umich.edu/techreports/cse/1994/CSE-TR-194-94.ps.Z
Refering-URL: http://www.eecs.umich.edu/~worthing/papers.html
Root-URL: http://www.cs.umich.edu
Title: Scheduling for Modern Disk Drives and Non-Random Workloads  
Author: Bruce L. Worthington, Gregory R. Ganger, Yale N. Patt 
Date: March 1, 1994  
Address: Ann Arbor 48109-2122  
Affiliation: Department of Electrical Engineering and Computer Science The University of Michigan,  
Abstract: Disk subsystem performance can be dramatically improved by dynamically ordering, or scheduling, pending requests. Modern disk drives have several features, such as complex logical-to-physical mappings and large prefetching caches, that can influence scheduling effectiveness. Via strongly validated simulation, we examine the impact of these features on various scheduling algorithms. Using both synthetic workloads and traces captured from six different user environments, we arrive at three main conclusions: (1) Incorporating complex mapping information into the scheduler provides only a marginal (less than 2%) decrease in response times for seek-reducing algorithms. (2) Algorithms which effectively utilize a prefetching disk cache provide significant performance improvements for workloads with read sequentiality. The cyclical scan algorithm (C-LOOK), which always schedules requests in ascending logical order, achieves the highest performance among seek-reducing algorithms for such workloads (five of the six examined). (3) Algorithms that reduce overall positioning delays produce the highest performance provided that they recognize and exploit a prefetching cache. 
Abstract-found: 1
Intro-found: 1
Reference: [Denn67] <author> P. J. Denning, </author> <title> "Effects of scheduling on file memory operations", </title> <booktitle> AFIPS Spring Joint Computer Conference, </booktitle> <month> April </month> <year> 1967, </year> <pages> pp. 9-21. </pages>
Reference-contexts: Many scheduling algorithms have been proposed that achieve higher performance by taking into account information about individual requests and the current state of the disk subsystem. 3.1 Seek Delay Reduction Over 25 years ago, <ref> [Denn67] </ref> analyzed the advantages of a Shortest Seek Time First (SSTF) policy. This algorithm chooses the next request to service by selecting the pending request that will incur the smallest seek delay given the current disk arm position. <p> Given a heavy workload, the disk arm tends to hover over a subset of the cylinders in an attempt to exhaust all requests to that region, thereby starving any requests outside of that space. <ref> [Denn67] </ref> also examined the SCAN or "elevator" algorithm, which provides a lower response time variance than SSTF with only a marginal increase in the average response time (for the random workloads studied).
Reference: [Gang93] <author> G. Ganger, Y. Patt, </author> <title> "The Process-Flow Model: Examining I/O Performance from the System's Point of View", </title> <booktitle> SIGMETRICS, </booktitle> <year> 1993, </year> <pages> pp. 86-97. </pages>
Reference-contexts: Finally, we believe that scheduling decisions should be based on both subsystem characteristics and system-level requirements. By incorporating knowledge of the system performance consequences of different disk requests, scheduling algorithms can be optimized for overall system performance <ref> [Gang93] </ref>. For example, a request that prevents a critical process from executing should be serviced before a low-priority background request. Such goals must be tempered with effective utilization of the storage resources, resulting in a complicated set of trade-offs which we plan to explore. 38
Reference: [Geis87] <author> R. Geist, S. Daniel, </author> <title> "A Continuum of Disk Scheduling Algorithms", </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1987, </year> <pages> pp. 77-92. </pages>
Reference-contexts: The LOOK algorithm, another SCAN variation, changes the scanning direction if no pending requests exist in the current direction of travel [Mert70]. C-SCAN and LOOK can be combined, resulting in the C-LOOK algorithm. VSCAN (R), proposed in <ref> [Geis87] </ref>, creates a continuum of algorithms between SSTF and LOOK. The R parameter denotes how strongly biased the scheduler is towards maintaining the current direction of travel. VSCAN (0.0) is equivalent to SSTF, and VSCAN (1.0) reduces to LOOK. [Geis87] suggests that VSCAN (0.2) provides a good balance between the average <p> VSCAN (R), proposed in <ref> [Geis87] </ref>, creates a continuum of algorithms between SSTF and LOOK. The R parameter denotes how strongly biased the scheduler is towards maintaining the current direction of travel. VSCAN (0.0) is equivalent to SSTF, and VSCAN (1.0) reduces to LOOK. [Geis87] suggests that VSCAN (0.2) provides a good balance between the average response time of SSTF and the starvation resistance of LOOK. The CVSCAN (N,R) variation described in [Geis87a] augments VSCAN by examining more than just the "closest" request in either direction from the current disk arm position. <p> Similar results are reported in Teorey and Pinkerton's comparison of FCFS, LOOK, C-LOOK, and SSTF [Teor72]. They determined that SSTF and LOOK (SCAN) provide the best average response times, while C-LOOK has superior starvation resistance for the heavier workloads. The simulation study in <ref> [Geis87] </ref> shows that the mean response times of SSTF, SCAN, and VSCAN (R) match to within a few percent when requests are distributed across the disk in either a uniform, unimodal, or bimodal manner. The observed starvation resistance of these algorithms also compares well with our results.
Reference: [Geis87a] <author> R. Geist, R. Reynolds, E. Pittard, </author> <title> "Disk Scheduling in System V", Performance Evaluation Review, </title> <month> May </month> <year> 1987, </year> <pages> pp. 59-68. </pages>
Reference-contexts: VSCAN (0.0) is equivalent to SSTF, and VSCAN (1.0) reduces to LOOK. [Geis87] suggests that VSCAN (0.2) provides a good balance between the average response time of SSTF and the starvation resistance of LOOK. The CVSCAN (N,R) variation described in <ref> [Geis87a] </ref> augments VSCAN by examining more than just the "closest" request in either direction from the current disk arm position.
Reference: [HP91] <institution> Hewlett-Packard Company, "HP C2247 3.5-inch SCSI-2 Disk Drive, </institution> <note> Technical Reference Manual", Draft Edition 1, </note> <month> December </month> <year> 1991. </year>
Reference-contexts: For this report, the simulator was configured to model the HP C2240 series of disk drives [HP92]. Some of the basic specifications for the HP C2247 drive <ref> [HP91] </ref> are provided in table 1. In order to accurately model this drive, an extensive set of parameters was obtained from published documentation and by monitoring the SCSI activity generated by an HP C2247 disk.
Reference: [HP92] <author> Hewlett-Packard Company, </author> <title> "HP C2240 Series 3.5-inch SCSI-2 Disk Drive, Technical Reference Manual", Part Number 5960-8346, </title> <address> Edition 2, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: For this report, the simulator was configured to model the HP C2240 series of disk drives <ref> [HP92] </ref>. Some of the basic specifications for the HP C2247 drive [HP91] are provided in table 1. In order to accurately model this drive, an extensive set of parameters was obtained from published documentation and by monitoring the SCSI activity generated by an HP C2247 disk.
Reference: [Jaco91] <author> D. Jacobson, J. Wilkes, </author> <title> "Disk Scheduling Algorithms Based on Rotational Position", </title> <type> Hewlett-Packard Technical Report, </type> <institution> HPL-CSP-91-7, </institution> <month> Feb. 26, </month> <year> 1991. </year>
Reference-contexts: Given this information, the scheduler can choose the request with the minimum positioning delay (i.e., combined seek and rotational latency). This policy was denoted as Shortest Time First (STF) in [Selt90] and Shortest Access Time First (SATF) in <ref> [Jaco91] </ref>, but we use the term Shortest Positioning Time First (SPTF) to clarify the exact focus of the algorithm. 3.3 Batch and Aging Algorithms Several modifications to the above algorithms have been proposed to reduce response time variance. <p> The resulting algorithms can be generally classified as either batch or aging algorithms. Batch algorithms service a subset of requests satisfying certain criteria before moving on to other requests. Possible criteria include the position of the request in the queue and/or the specific cylinder corresponding to the request <ref> [Teor72, Jaco91, Selt90] </ref>. Aging algorithms give priority to requests that have been in the pending queue for excessive periods of time. If too much weight is given to the queue time (age) component, such algorithms degenerate into FCFS. <p> If too much weight is given to the queue time (age) component, such algorithms degenerate into FCFS. The priority may slowly increase as the request ages, or a time limit may be set after which requests are given a higher priority <ref> [Selt90, Jaco91] </ref>. 4 Methodology and Validation 4.1 Disk simulator We have developed a detailed, strongly validated disk simulator to compare disk scheduling algorithms. <p> As with SSTF, SPTF is highly susceptible to request starvation. For this reason, we also examined an aging algorithm based on SPTF. Denoted as Aged Shortest Positioning Time First, this algorithm is equivalent to the ASATF algorithm proposed in <ref> [Jaco91] </ref>. 1 ASPTF adjusts each positioning delay prediction (T pos ) by subtracting a weighted value corresponding to the amount of time the request has been waiting for service (T wait ). <p> The resulting effective positioning delay (T eff ) is used in selecting the next request to issue: T eff = T pos (W fl T wait ) The weight suggested in <ref> [Jaco91] </ref> translates approximately to ASPTF (6.3). Figures 5a and 5b present the performance metrics for values of W ranging from 0 (SPTF) to 30. As W increases, the average response time slowly grows, but the response time variance drops significantly. <p> In fact, ASPTF (12) has lower response time variance than C-LOOK, even though its coefficient of variation is slightly higher. Selecting the request with the smallest positioning delay entails significant computational effort (especially for large queues), cf. <ref> [Jaco91] </ref>. 1 We chose this algorithm over the WSTF algorithm suggested in [Selt90] because WSTF is somewhat insensitive to differences in predicted positioning times when comparing requests whose waiting times are near the aging limit. 12 (a) Average Response Time (b) Squared Coefficient of Variation 13 (a) Average Response Time (b)
Reference: [McNu86] <author> B. McNutt, </author> <title> "An Empirical Study of Variations in DASD Volume Activity", </title> <booktitle> CMG, </booktitle> <year> 1986, </year> <pages> pp. 274-283. </pages>
Reference-contexts: 1 Introduction Disk subsystems must be carefully managed to compensate for the growing performance disparity between processing and storage components. Disk workloads are often characterized by intense bursts of activity, creating long queues of pending requests <ref> [McNu86, Ruem93] </ref>. When such queues develop, the disk scheduler is responsible for dynamically ordering the pending requests to decrease service times.
Reference: [Mert70] <author> A. G. Merten, </author> <title> "Some quantitative techniques for file organization", </title> <type> Ph.D. Thesis, Technical Report No. 15, </type> <institution> U. of Wisconsin Comput. Center, </institution> <year> 1970. </year>
Reference-contexts: C-SCAN treats each cylinder equally, rather than favoring the center cylinders as SCAN does. The LOOK algorithm, another SCAN variation, changes the scanning direction if no pending requests exist in the current direction of travel <ref> [Mert70] </ref>. C-SCAN and LOOK can be combined, resulting in the C-LOOK algorithm. VSCAN (R), proposed in [Geis87], creates a continuum of algorithms between SSTF and LOOK. The R parameter denotes how strongly biased the scheduler is towards maintaining the current direction of travel.
Reference: [Rama92] <author> K. Ramakrishnan, P. Biswas, R. Karedla, </author> <title> "Analysis of File I/O Traces in Commercial Computing Environments", </title> <booktitle> ACM SIGMETRICS, </booktitle> <year> 1992, </year> <pages> pp. 78-90. </pages>
Reference-contexts: We will describe the traces only briefly as they have been described elsewhere in more detail <ref> [Rama92, Ruem93] </ref>. The traced workloads span a broad range of environments, and each trace is at least a full workshift (8 hours) in length. Two of the traces come from Hewlett-Packard systems running HP-UX T M , a version of the UNIX TM operating system [Ruem93]. <p> While these traces are actually two months in length, we report data for a single week-long snapshot (5/30/92 to 6/6/92). The other four traces are from commercial VAX TM systems running the VMS TM operating system <ref> [Rama92] </ref>. Air-Rsv is from a transaction processing environment in which approximately 500 travel agents made airline and hotel reservations. Sci-TS is from a scientific time-sharing environment in which analytic modeling software and graphical and statistical packages were used. Order and Report are from a machine parts distribution company. <p> Some basic characteristics of the traces are given in table 2. The traces vary widely in read/write ratios, access sizes, arrival rates, degrees of sequentiality, and burstiness. The environments and characteristics of these traces are described more thoroughly in <ref> [Rama92, Ruem93] </ref>. The performance graphs in this section use a range of trace scaling factors. Note that the scaling factor (the X-axis) is shown in log 2 scale.
Reference: [Ruem93] <author> C. Ruemmler, J. Wilkes, </author> <title> "UNIX Disk Access Patterns", </title> <booktitle> Winter USENIX, </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction Disk subsystems must be carefully managed to compensate for the growing performance disparity between processing and storage components. Disk workloads are often characterized by intense bursts of activity, creating long queues of pending requests <ref> [McNu86, Ruem93] </ref>. When such queues develop, the disk scheduler is responsible for dynamically ordering the pending requests to decrease service times. <p> We will describe the traces only briefly as they have been described elsewhere in more detail <ref> [Rama92, Ruem93] </ref>. The traced workloads span a broad range of environments, and each trace is at least a full workshift (8 hours) in length. Two of the traces come from Hewlett-Packard systems running HP-UX T M , a version of the UNIX TM operating system [Ruem93]. <p> The traced workloads span a broad range of environments, and each trace is at least a full workshift (8 hours) in length. Two of the traces come from Hewlett-Packard systems running HP-UX T M , a version of the UNIX TM operating system <ref> [Ruem93] </ref>. Cello comes from a server at HP Labs used for program development, simulation, mail, and news. Snake is from a file server at the University of California, Berkeley used primarily for compilation and editing. <p> Some basic characteristics of the traces are given in table 2. The traces vary widely in read/write ratios, access sizes, arrival rates, degrees of sequentiality, and burstiness. The environments and characteristics of these traces are described more thoroughly in <ref> [Rama92, Ruem93] </ref>. The performance graphs in this section use a range of trace scaling factors. Note that the scaling factor (the X-axis) is shown in log 2 scale. <p> The Cello environment is dominated by large bursts of write requests to a single disk <ref> [Ruem93] </ref>. Almost half of the requests are serviced by this disk, with maximum queue lengths approaching 1000 at the identity scaling factor. In addition, this trace contains the smallest fraction of sequential read requests, thus benefiting the least from the prefetching cache.
Reference: [Ruem94] <author> C. Ruemmler, J. Wilkes, </author> <title> "Modelling Disks", </title> <booktitle> IEEE Computer, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: The average response times of the actual disk and the simulator match to within 0.8% in all cases. Unpredictable (from the disk's view) host delays partially account for the difference. Greater insight can be achieved by comparing the response time distributions <ref> [Ruem94] </ref>. requests. As with most of our validation results, one can barely see that two curves are present. [Ruem94] defines the root mean square horizontal distance between the two distribution curves as a demerit figure for disk model calibration. <p> Unpredictable (from the disk's view) host delays partially account for the difference. Greater insight can be achieved by comparing the response time distributions <ref> [Ruem94] </ref>. requests. As with most of our validation results, one can barely see that two curves are present. [Ruem94] defines the root mean square horizontal distance between the two distribution curves as a demerit figure for disk model calibration. The demerit figure for the validation run shown in figure 2 is 0.07 ms, or less than 0.5% of the average response time.
Reference: [Seam66] <author> P. H. Seaman, R. A. Lind, T. L. </author> <title> Wilson "An analysis of auxiliary-storage activity", </title> <journal> IBM System Journal, </journal> <volume> Vol. 5, No. 3, </volume> <year> 1966, </year> <pages> pp. 158-170. </pages>
Reference-contexts: As a result, SCAN resists starvation more effectively (i.e., has lower response time variance) than SSTF. 5 Several variations of the SCAN algorithm have been proposed. The Cyclical SCAN algorithm (C-SCAN) replaces the bi-directional scan with a single direction of arm travel <ref> [Seam66] </ref>. When the arm reaches the last cylinder, a full-stroke seek returns it to the first cylinder of the disk without servicing any requests along the way. C-SCAN treats each cylinder equally, rather than favoring the center cylinders as SCAN does.
Reference: [Selt90] <author> M. Seltzer, P. Chen, J. Ousterhout, </author> <title> "Disk Scheduling Revisited", </title> <booktitle> Winter USENIX, </booktitle> <year> 1990, </year> <pages> pp. 313-324. </pages>
Reference-contexts: In addition, the current physical location of the active read/write head must be known. Given this information, the scheduler can choose the request with the minimum positioning delay (i.e., combined seek and rotational latency). This policy was denoted as Shortest Time First (STF) in <ref> [Selt90] </ref> and Shortest Access Time First (SATF) in [Jaco91], but we use the term Shortest Positioning Time First (SPTF) to clarify the exact focus of the algorithm. 3.3 Batch and Aging Algorithms Several modifications to the above algorithms have been proposed to reduce response time variance. <p> The resulting algorithms can be generally classified as either batch or aging algorithms. Batch algorithms service a subset of requests satisfying certain criteria before moving on to other requests. Possible criteria include the position of the request in the queue and/or the specific cylinder corresponding to the request <ref> [Teor72, Jaco91, Selt90] </ref>. Aging algorithms give priority to requests that have been in the pending queue for excessive periods of time. If too much weight is given to the queue time (age) component, such algorithms degenerate into FCFS. <p> If too much weight is given to the queue time (age) component, such algorithms degenerate into FCFS. The priority may slowly increase as the request ages, or a time limit may be set after which requests are given a higher priority <ref> [Selt90, Jaco91] </ref>. 4 Methodology and Validation 4.1 Disk simulator We have developed a detailed, strongly validated disk simulator to compare disk scheduling algorithms. <p> The observed starvation resistance of these algorithms also compares well with our results. In <ref> [Selt90] </ref>, SSTF (referred to as SSF) and C-SCAN are shown to provide roughly equivalent disk utilization, but SSTF again provides inferior starvation resistance. 5.2 Scheduling with a Known Mapping If the scheduler has knowledge of LBN-to-PBN mappings, it can more accurately predict seek delays and thereby produce better schedules. <p> In fact, ASPTF (12) has lower response time variance than C-LOOK, even though its coefficient of variation is slightly higher. Selecting the request with the smallest positioning delay entails significant computational effort (especially for large queues), cf. [Jaco91]. 1 We chose this algorithm over the WSTF algorithm suggested in <ref> [Selt90] </ref> because WSTF is somewhat insensitive to differences in predicted positioning times when comparing requests whose waiting times are near the aging limit. 12 (a) Average Response Time (b) Squared Coefficient of Variation 13 (a) Average Response Time (b) Squared Coefficient of Variation 14 Trace Length Number of Number of Average
Reference: [Teor72] <author> T. Teorey, T. Pinkerton, </author> <title> "A Comparative Analysis of Disk Scheduling Policies", </title> <journal> Communications of the ACM, </journal> <month> March </month> <year> 1972, </year> <pages> pp. 177-184. 39 </pages>
Reference-contexts: The resulting algorithms can be generally classified as either batch or aging algorithms. Batch algorithms service a subset of requests satisfying certain criteria before moving on to other requests. Possible criteria include the position of the request in the queue and/or the specific cylinder corresponding to the request <ref> [Teor72, Jaco91, Selt90] </ref>. Aging algorithms give priority to requests that have been in the pending queue for excessive periods of time. If too much weight is given to the queue time (age) component, such algorithms degenerate into FCFS. <p> The squared coefficient of variation ( 2 = 2 ) is also used, as in <ref> [Teor72] </ref>. Given a constant average response time, a decrease in the coefficient of variation implies reduced response time variance (i.e., improved starvation resistance). 5 Synthetic Workloads Synthetically generated random workloads were used in order to replicate previous work and obtain a starting point for further experiments. <p> SSTF, while providing the best average response time in most cases, is highly susceptible to starvation (as is evident by its larger coefficient of variation). Similar results are reported in Teorey and Pinkerton's comparison of FCFS, LOOK, C-LOOK, and SSTF <ref> [Teor72] </ref>. They determined that SSTF and LOOK (SCAN) provide the best average response times, while C-LOOK has superior starvation resistance for the heavier workloads.
References-found: 15

