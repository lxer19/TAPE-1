URL: ftp://ftp.cs.arizona.edu/ftol/papers/dse93.ps
Refering-URL: http://www.cs.arizona.edu/cactus/public.html
Root-URL: http://www.cs.arizona.edu
Title: Consul: A Communication Substrate for Fault-Tolerant Distributed Programs  
Author: Shivakant Mishra, Larry L. Peterson, and Richard D. Schlichting 
Address: Tucson, AZ 85721, USA  
Affiliation: Department of Computer Science The University of Arizona  
Abstract: Replicating important services on multiple processors in a distributed architecture is a common technique for constructing dependable computing systems. This paper describes a communication substrate, called Consul, that facilitates the development of such systems by providing a collection of fundamental abstractions for constructing fault-tolerant programs based on replicated processing. These abstractions include a multicast service, a membership service, and a recovery service. Consul is unique in two respects. First, its services are implemented using a collection of algorithms that exploit the partial (or causal) ordering of messages exchanged in the system. Such algorithms are generally more efficient than those that depend on a total ordering of events. Second, its underlying architecture is configurable, thereby allowing a system to be structured according to the needs of the application. The paper sketches Consul's architecture, presents the algorithms used by its protocols, and reports on the performance of an implementation using the x-kernel.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ahuja, N. Carriero, and D. Gelernter. </author> <title> Linda and friends. </title> <journal> IEEE Computer, </journal> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Several applications involving replicating processing have been built using Consul, including a replicated directory service and a distributed word game. The implementation of a fault-tolerant version of the Linda coordination language <ref> [1] </ref> based on Consul is also nearing completion [3]. This paper makes two main contributions. The first is presentation of new algorithms for implementing a variety of these fundamental fault-tolerant services. In particular, Consul provides novel realizations of the following: * Consistent ordering of application requests to maintain replica consistency.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Proceedings of the 22nd International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <address> Boston, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Because of its widespread applicability, the state machine approach is also supported by many fault-tolerant distributed systems, including Delta-4 [27], ISIS [6], MARS [16], and Transis <ref> [2] </ref>. 2.2 Overview of Consul As a hardware base, Consul assumes a distributed system in which multiple processors are connected by a communication network. There is no shared memory or common physical clock.
Reference: [3] <author> D. Bakken and R. D. Schlichting. </author> <title> Supporting fault-tolerant parallel programming in Linda. </title> <type> Technical Report TR 93-18, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1993. </year>
Reference-contexts: Several applications involving replicating processing have been built using Consul, including a replicated directory service and a distributed word game. The implementation of a fault-tolerant version of the Linda coordination language [1] based on Consul is also nearing completion <ref> [3] </ref>. This paper makes two main contributions. The first is presentation of new algorithms for implementing a variety of these fundamental fault-tolerant services. In particular, Consul provides novel realizations of the following: * Consistent ordering of application requests to maintain replica consistency. <p> A third application, a fault-tolerant version of Linda, is currently nearing completion. Consul is being used in this application to construct the language runtime system, and in particular, to implement stable tuple spaces by replicating the data using the state machine approach. Details can be found in <ref> [3] </ref>. This section reports on the performance of various protocols in Consul and the overheads they impose on the overall performance of the system.
Reference: [4] <author> K. Birman and T. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> Feb </month> <year> 1987. </year>
Reference-contexts: Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems. The protocols proposed in <ref> [4, 8, 30] </ref> and the one proposed in this paper assume an asynchronous environment. The protocols proposed in [4, 8, 30] maintain a consistent view of the configuration, but have the property that the complete protocol has to be restarted when a process fails while the protocol is in progress. <p> Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems. The protocols proposed in <ref> [4, 8, 30] </ref> and the one proposed in this paper assume an asynchronous environment. The protocols proposed in [4, 8, 30] maintain a consistent view of the configuration, but have the property that the complete protocol has to be restarted when a process fails while the protocol is in progress.
Reference: [5] <author> K. Birman, T. Joseph, T. Raeuchle, and A. Abbadi. </author> <title> Implementing fault-tolerant distributed objects. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(6):502-508, </volume> <month> Jun </month> <year> 1985. </year>
Reference-contexts: These approaches may be classified into two categories. The first category includes those protocols where the semantics of the operations are not exploited and a total order is imposed to implement replicated objects or a related constructs. Examples of this approach include <ref> [5, 7, 25] </ref> In the second category, the semantics of the application have been exploited to come up with a solution. In [11], semantic information has been used to implement a replicated directory, while in [12], the authors use semantic information to implement replicated files.
Reference: [6] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Because of its widespread applicability, the state machine approach is also supported by many fault-tolerant distributed systems, including Delta-4 [27], ISIS <ref> [6] </ref>, MARS [16], and Transis [2]. 2.2 Overview of Consul As a hardware base, Consul assumes a distributed system in which multiple processors are connected by a communication network. There is no shared memory or common physical clock. <p> For a replica that is down for an extended period of time, recovery based on state transfer from a functioning replica such as is done in ISIS <ref> [6] </ref> is more efficient. Such a strategy could be configured into Consul as an alternative recovery protocol. In Consul, the recovery service is implemented primarily by the Recovery protocol, although other protocols are involved in the recovery process. <p> In contrast, other protocols wait until all the processes have formed their sf-groups before removing the failed process. 7.3 Fault-Tolerant Systems We compare the system design of Consul with some of the recent fault-tolerant systems being developed. These include MARS [16], AAS [10], Delta-4 [27], and ISIS <ref> [6] </ref>. Both MARS and AAS are distributed real-time systems that employ synchronized clocks to implement various fault-tolerant services provided by the system.
Reference: [7] <author> A. Birrell, R. Levin, R. Needham, and M. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> Apr </month> <year> 1982. </year>
Reference-contexts: These approaches may be classified into two categories. The first category includes those protocols where the semantics of the operations are not exploited and a total order is imposed to implement replicated objects or a related constructs. Examples of this approach include <ref> [5, 7, 25] </ref> In the second category, the semantics of the application have been exploited to come up with a solution. In [11], semantic information has been used to implement a replicated directory, while in [12], the authors use semantic information to implement replicated files.
Reference: [8] <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> Aug </month> <year> 1984. </year>
Reference-contexts: Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems. The protocols proposed in <ref> [4, 8, 30] </ref> and the one proposed in this paper assume an asynchronous environment. The protocols proposed in [4, 8, 30] maintain a consistent view of the configuration, but have the property that the complete protocol has to be restarted when a process fails while the protocol is in progress. <p> Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems. The protocols proposed in <ref> [4, 8, 30] </ref> and the one proposed in this paper assume an asynchronous environment. The protocols proposed in [4, 8, 30] maintain a consistent view of the configuration, but have the property that the complete protocol has to be restarted when a process fails while the protocol is in progress.
Reference: [9] <author> F. Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year> <month> 29 </month>
Reference-contexts: The approach proposed in [18] must resort to a total ordering in such a case. 7.2 Membership Membership protocols have been proposed for both synchronous and asynchronous environment. Membership protocols in synchronous systems include <ref> [9, 17] </ref>. All protocols of this type make use of synchronized clocks to maintain a consistent view of which processes are functioning at every clock tick. Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems.
Reference: [10] <author> F. Cristian, B. Dancey, and J. Dehn. </author> <title> Fault-tolerance in the Advanced Automation System. </title> <booktitle> In Proceed--ings of the Twentieth Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 6-17, </pages> <address> Newcastle-upon-Tyne, UK, </address> <month> Jun </month> <year> 1990. </year>
Reference-contexts: Reference [31] describes techniques for handling these issues. The state machine approach to replicated processing has been used over the years for a large number of applications (see [31] for examples) and is currently being used for the FAA's next generation air-traffic control system <ref> [10] </ref>. <p> In contrast, other protocols wait until all the processes have formed their sf-groups before removing the failed process. 7.3 Fault-Tolerant Systems We compare the system design of Consul with some of the recent fault-tolerant systems being developed. These include MARS [16], AAS <ref> [10] </ref>, Delta-4 [27], and ISIS [6]. Both MARS and AAS are distributed real-time systems that employ synchronized clocks to implement various fault-tolerant services provided by the system.
Reference: [11] <author> D. Daniels and A. Z. Spector. </author> <title> An algorithm for replicated directories. </title> <booktitle> In Proceedings of the Second Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 104-113, </pages> <address> Montreal, Canada, </address> <month> Dec </month> <year> 1983. </year>
Reference-contexts: Examples of this approach include [5, 7, 25] In the second category, the semantics of the application have been exploited to come up with a solution. In <ref> [11] </ref>, semantic information has been used to implement a replicated directory, while in [12], the authors use semantic information to implement replicated files.
Reference: [12] <author> D. Davcev and W. A. Burkhard. </author> <title> Consistency and recovery control for replicated files. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 86-96, </pages> <address> Orcas Island, WA, </address> <month> Dec </month> <year> 1985. </year>
Reference-contexts: Examples of this approach include [5, 7, 25] In the second category, the semantics of the application have been exploited to come up with a solution. In [11], semantic information has been used to implement a replicated directory, while in <ref> [12] </ref>, the authors use semantic information to implement replicated files. Our approach differs from these two in that we maximize 26 the concurrency by dividing different operations into op-groups, and our approach generalizes easily beyond files and directories.
Reference: [13] <author> M. Herlihy. </author> <title> Extending multiversion time-stamping protocols to exploit type information. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(4):443-448, </volume> <month> Apr </month> <year> 1987. </year>
Reference-contexts: Our approach differs from these two in that we maximize 26 the concurrency by dividing different operations into op-groups, and our approach generalizes easily beyond files and directories. In <ref> [13] </ref>, semantic information is used to efficiently implement multiversion time stamping protocol for atomic transactions. While this work is similar to ours, the two approaches differ in two aspects. First, we efficiently implement operations on an object instead of atomic transactions. Second, we deal with objects replicated over multiple sites.
Reference: [14] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: One of the novel aspects of Consul is that the other building block protocols take advantage of the partial ordering of messages provided by Psync. Consul has been implemented using the x-kernel, an operating system kernel designed for easy implementation and composition of communication protocols <ref> [14] </ref>. One version is based on version 3.1 of the x-kernel and runs standalone on Sun-3s, while another is based on version 3.2 and runs on Mach-based machines. Several applications involving replicating processing have been built using Consul, including a replicated directory service and a distributed word game. <p> is used by a processor recovering from failure, and Order is a placeholder for different protocols that ensure 1 The use of the term protocol to refer to an implementation of a protocol in general and the nodes of this graph in particular is in keeping with standard x-kernel's terminology <ref> [14] </ref>. 4 messages are delivered to the application in a consistent order on all the processors (we discuss two specific examplesTotal and SemOrderin Section 3). The configuration protocols aid the user in building a system according to the requirements of the application. <p> The code consists of approximately 10,000 lines of C code, of which 3,500 is Psync. Consul is implemented in the x-kernel, an operating system kernel designed explicitly 22 for experimenting with communication protocols <ref> [14] </ref>. In our prototype implementation, stable storage is realized as an external global facility accessed over the communication network. We have built two different applications using Consul: a variant of the replicated directory object described in Section 3 and a distributed word game.
Reference: [15] <author> D. Johnson and W. Zwaenepoel. </author> <title> Sender based message logging. </title> <booktitle> In Proceedings of the Seventeenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 14-19, </pages> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: In the case of Consul, however, no explicit log is needed since messages are implicitly logged in the context graph when they are transmitted in what is, in essence, automatic sender-based logging <ref> [15] </ref>. This general technique is most applicable in situations where a failed replica restarts relatively quickly, either on its original processor after a reboot or some other functioning processor.
Reference: [16] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger. </author> <title> Distributed fault-tolerant real-time systems: The Mars approach. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 25-40, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: Because of its widespread applicability, the state machine approach is also supported by many fault-tolerant distributed systems, including Delta-4 [27], ISIS [6], MARS <ref> [16] </ref>, and Transis [2]. 2.2 Overview of Consul As a hardware base, Consul assumes a distributed system in which multiple processors are connected by a communication network. There is no shared memory or common physical clock. <p> In contrast, other protocols wait until all the processes have formed their sf-groups before removing the failed process. 7.3 Fault-Tolerant Systems We compare the system design of Consul with some of the recent fault-tolerant systems being developed. These include MARS <ref> [16] </ref>, AAS [10], Delta-4 [27], and ISIS [6]. Both MARS and AAS are distributed real-time systems that employ synchronized clocks to implement various fault-tolerant services provided by the system.
Reference: [17] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <editor> In A. Avizienis and J. Laprie, editors, </editor> <booktitle> Dependable Computing for Critical Applications, </booktitle> <pages> pages 411-429. </pages> <publisher> Springer-Verlag, Wien, </publisher> <year> 1991. </year>
Reference-contexts: The approach proposed in [18] must resort to a total ordering in such a case. 7.2 Membership Membership protocols have been proposed for both synchronous and asynchronous environment. Membership protocols in synchronous systems include <ref> [9, 17] </ref>. All protocols of this type make use of synchronized clocks to maintain a consistent view of which processes are functioning at every clock tick. Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems.
Reference: [18] <author> R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 360-391, </pages> <month> Nov </month> <year> 1992. </year>
Reference-contexts: Second, we deal with objects replicated over multiple sites. That is, our emphasis is on increasing concurrency of independent operations over multiple sites rather than increasing concurrency among transactions on a single site. Finally, we compare our work with <ref> [18] </ref>. Here, lazy replication has been proposed as a way to preserve consistency by exploiting the semantics of the service's operations to relax the constraints on ordering. <p> Our approach performs much better in a case such as this when mixture of these different operations needs to be applied to an object. The approach proposed in <ref> [18] </ref> must resort to a total ordering in such a case. 7.2 Membership Membership protocols have been proposed for both synchronous and asynchronous environment. Membership protocols in synchronous systems include [9, 17].
Reference: [19] <author> B. Lampson. </author> <title> Atomic transactions. </title> <booktitle> In Distributed SystemsArchitecture and Implementation, </booktitle> <pages> pages 246-265. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: Processors in this system fail by crashing; i.e., they fail silently without making any incorrect state transitions [28]. Finally, Consul assumes that stable storage is available to each processor, and that data written to stable storage survives processor crashes <ref> [19] </ref>. A copy of Consul resides on some number of processors in the system and provides an interface between the state machine replica and the underlying network. These copies of Consul interact with each other to provide the relevant fault-tolerant services required for the state machine approach. <p> We assume that operations that change the state of the object are implemented atomically; in other words, execution of the operation is guaranteed not to leave the entry being modified in an intermediate state despite failures. Techniques for implementing atomic operations can be found elsewhere <ref> [19, 29] </ref>. To ensure the consistency of the replicas, some degree of consistent message ordering is clearly required. Total ordering is sufficient, but stronger than necessary in certain cases.
Reference: [20] <author> S. Mishra. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: These protocols establish connections among various protocols needed by an application for a proper message flow and for protocol operation invocations at the system start, and also reestablish these connections after a failure. These protocols are relatively minor, and so are ignored hereafter; for details, see <ref> [20] </ref>. Psync has been described elsewhere in the literature [26], but since most of the other protocols depend on Psync, it is briefly described below. The other protocols are described in the following three sections. 2.3 Psync Psync supports a conversation abstraction through which a collection of processes exchange messages. <p> This is followed by the execution of the delete operations that were deferred that belong to the op-group following this noncommutative op-group and so on. A more complete presentation of the algorithm and relevant correctness arguments can be found in <ref> [21, 20] </ref>. <p> The implication of this situation is that p is removed from the membership list earlier at the right process than in at the left process, thus allowing its execution to proceed without unnecessary delay. The correctness of this protocol is argued in <ref> [22, 20] </ref>. 18 5 Recovery The recovery service is concerned with bringing the state of a failed replica back into synchronization with the remainder of the replicas upon restart. The strategy currently implemented in Consul to realize this service is based on a combination independent checkpoint/message logging technique.
Reference: [21] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Implementing replicated objects using Psync. </title> <booktitle> In Proceedings of the Eighth Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 42-52, </pages> <address> Seattle, Washington, </address> <month> Oct </month> <year> 1989. </year>
Reference-contexts: This is followed by the execution of the delete operations that were deferred that belong to the op-group following this noncommutative op-group and so on. A more complete presentation of the algorithm and relevant correctness arguments can be found in <ref> [21, 20] </ref>.
Reference: [22] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A membership protocol based on partial order. </title> <editor> In J. F. Meyer and R. D. Schlichting, editors, </editor> <booktitle> Dependable Computing for Critical Applications 2, </booktitle> <pages> pages 309-331. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: The implication of this situation is that p is removed from the membership list earlier at the right process than in at the left process, thus allowing its execution to proceed without unnecessary delay. The correctness of this protocol is argued in <ref> [22, 20] </ref>. 18 5 Recovery The recovery service is concerned with bringing the state of a failed replica back into synchronization with the remainder of the replicas upon restart. The strategy currently implemented in Consul to realize this service is based on a combination independent checkpoint/message logging technique.
Reference: [23] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Experience with modularity in Consul. </title> <journal> Software Practice & Experience, </journal> <volume> 23, </volume> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: Moreover, Consul is highly modular. Such modularization simplifies the development of new protocols, as well as increases the configurability of the resulting system <ref> [23] </ref>. The Psync protocol, a group-oriented atomic multicast protocol that explicitly preserves the partial (or causal) order of messages, is at the heart of Consul [26].
Reference: [24] <author> S. Mishra and R. D. Schlichting. </author> <title> Abstractions for constructing dependable distributed systems. </title> <type> Technical Report 92-19, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1992. </year> <month> 30 </month>
Reference-contexts: These services are widely viewed as fundamental components of any fault-tolerant system based on replicated processing, leading to much work on developing various algorithms and implementations <ref> [24] </ref>. Consul provides these fault-tolerant services in the form of a unified collection of communication protocols. This collection, which forms a communication substrate upon which fault-tolerant programs can be built, provides support to manage communication, redundancy, failures, and recovery in a distributed system. Moreover, Consul is highly modular.
Reference: [25] <author> B. M. Oki and B. Liskov. </author> <title> Viewstamped replication: A new primary copy method to support highly--available distributed systems. </title> <booktitle> In Proceedings of the Seventh ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Toronto, Canada, </address> <month> Aug </month> <year> 1988. </year>
Reference-contexts: These approaches may be classified into two categories. The first category includes those protocols where the semantics of the operations are not exploited and a total order is imposed to implement replicated objects or a related constructs. Examples of this approach include <ref> [5, 7, 25] </ref> In the second category, the semantics of the application have been exploited to come up with a solution. In [11], semantic information has been used to implement a replicated directory, while in [12], the authors use semantic information to implement replicated files.
Reference: [26] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: Moreover, Consul is highly modular. Such modularization simplifies the development of new protocols, as well as increases the configurability of the resulting system [23]. The Psync protocol, a group-oriented atomic multicast protocol that explicitly preserves the partial (or causal) order of messages, is at the heart of Consul <ref> [26] </ref>. One of the novel aspects of Consul is that the other building block protocols take advantage of the partial ordering of messages provided by Psync. Consul has been implemented using the x-kernel, an operating system kernel designed for easy implementation and composition of communication protocols [14]. <p> These protocols are relatively minor, and so are ignored hereafter; for details, see [20]. Psync has been described elsewhere in the literature <ref> [26] </ref>, but since most of the other protocols depend on Psync, it is briefly described below. The other protocols are described in the following three sections. 2.3 Psync Psync supports a conversation abstraction through which a collection of processes exchange messages. <p> Finally, the total ordering in Consul, called Total, delivers every message multicast in the group to all group members in the same order. This order is based on the partial ordering provided by Psync. The algorithm for this protocol is given in <ref> [26] </ref>. To make the discussion of our ordering protocols more concrete, we focus our attention on an application consisting of a replicated directory object constructed using the state machine approach. <p> Each of these measurements was then divided by 1,000 to produce the average. Earlier experiments indicate multicast performance in the range of 4.5 msec for eight hosts <ref> [26] </ref>. 6.2 Performance Using Semantic Dependent Ordering To determine how well the semantic dependent ordering protocol performs, we compared the performance of the replicated directory application using SemOrder with the same application using a Total.
Reference: [27] <editor> D. Powell, editor. Delta-4: </editor> <title> A Generic Architecture for Dependable Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Because of its widespread applicability, the state machine approach is also supported by many fault-tolerant distributed systems, including Delta-4 <ref> [27] </ref>, ISIS [6], MARS [16], and Transis [2]. 2.2 Overview of Consul As a hardware base, Consul assumes a distributed system in which multiple processors are connected by a communication network. There is no shared memory or common physical clock. <p> In contrast, other protocols wait until all the processes have formed their sf-groups before removing the failed process. 7.3 Fault-Tolerant Systems We compare the system design of Consul with some of the recent fault-tolerant systems being developed. These include MARS [16], AAS [10], Delta-4 <ref> [27] </ref>, and ISIS [6]. Both MARS and AAS are distributed real-time systems that employ synchronized clocks to implement various fault-tolerant services provided by the system.
Reference: [28] <author> D. Powell, D. Seaton, G. Bonn, P. Verissimo, and F. Waeselynk. </author> <title> The Delta-4 approach to dependability in open distributed computing systems. </title> <booktitle> In Proceedings of the Eighteenth Symposium on Fault-Tolerant Computing, </booktitle> <address> Tokyo, </address> <month> Jun </month> <year> 1988. </year>
Reference-contexts: Messages may be lost or delivered out-of-order, but it is assumed that they are never corrupted. Processors in this system fail by crashing; i.e., they fail silently without making any incorrect state transitions <ref> [28] </ref>. Finally, Consul assumes that stable storage is available to each processor, and that data written to stable storage survives processor crashes [19]. A copy of Consul resides on some number of processors in the system and provides an interface between the state machine replica and the underlying network.
Reference: [29] <author> D. Reed. </author> <title> Implementing atomic actions on decentralized data. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 1(1) </volume> <pages> 3-23, </pages> <month> Feb </month> <year> 1983. </year>
Reference-contexts: We assume that operations that change the state of the object are implemented atomically; in other words, execution of the operation is guaranteed not to leave the entry being modified in an intermediate state despite failures. Techniques for implementing atomic operations can be found elsewhere <ref> [19, 29] </ref>. To ensure the consistency of the replicas, some degree of consistent message ordering is clearly required. Total ordering is sufficient, but stronger than necessary in certain cases.
Reference: [30] <author> A. Ricciardi and K. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of Tenth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-353, </pages> <address> Montreal, Quebec, Canada, </address> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems. The protocols proposed in <ref> [4, 8, 30] </ref> and the one proposed in this paper assume an asynchronous environment. The protocols proposed in [4, 8, 30] maintain a consistent view of the configuration, but have the property that the complete protocol has to be restarted when a process fails while the protocol is in progress. <p> Because the concepts of asynchrony and membership are incompatible, the membership problem is more difficult in asynchronous systems than in synchronous systems. The protocols proposed in <ref> [4, 8, 30] </ref> and the one proposed in this paper assume an asynchronous environment. The protocols proposed in [4, 8, 30] maintain a consistent view of the configuration, but have the property that the complete protocol has to be restarted when a process fails while the protocol is in progress. <p> On the other hand, our protocol manages such failures differentlyfailures or recoveries detected while the protocol is in progress are taken into account incrementally by updating SuspectUpList or SuspectDownList appropriately. Moreover, the protocol proposed in <ref> [30] </ref> only establishes a consistent time when a failed process is to be removed. In particular, it assumes that detecting and establishing the failure of a process is implemented elsewhere.
Reference: [31] <author> F. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> Dec </month> <year> 1990. </year> <month> 31 </month>
Reference-contexts: Thus, depending on the degree of replication and the type of faults to be tolerated, some number of processors can fail without the service being lost. This approach has been formalized as the replicated state machine approach <ref> [31] </ref>. This paper introduces Consul, a communication substrate that provides support for building fault-tolerant distributed programs based on the replicated state machine approach. <p> Section 6 reports on the performance of Consul, while Section 7 compares our protocols with similar protocols proposed elsewhere. Finally, Section 8 offers some conclusions. 2 Architecture 2.1 The Replicated State Machine Approach Consul supports construction of programs based on the replicated state machine approach <ref> [31] </ref>. In this approach, an application is structured as a state machine that maintains a collection of state variables. The state machine receives commands from other state machines and the environment, which prompt it to modify its state variables and potentially issue output commands. <p> Other aspects of implementing the state machine approach, such as tolerating faulty clients and arbitrating among the replicas when producing output to the external world, are orthogonal problems not addressed here. Reference <ref> [31] </ref> describes techniques for handling these issues. The state machine approach to replicated processing has been used over the years for a large number of applications (see [31] for examples) and is currently being used for the FAA's next generation air-traffic control system [10]. <p> Reference <ref> [31] </ref> describes techniques for handling these issues. The state machine approach to replicated processing has been used over the years for a large number of applications (see [31] for examples) and is currently being used for the FAA's next generation air-traffic control system [10].
References-found: 31

