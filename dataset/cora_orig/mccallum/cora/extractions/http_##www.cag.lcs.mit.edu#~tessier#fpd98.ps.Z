URL: http://www.cag.lcs.mit.edu/~tessier/fpd98.ps.Z
Refering-URL: http://www.cag.lcs.mit.edu/~tessier/
Root-URL: 
Title: Negotiated A* Routing for FPGAs  
Author: Russell Tessier 
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: In the next few years, logic capacities for field-programmable gate arrays are expected to exceed one million gates per device. While this expansion of FPGA device resources offers the promise of exceptional fine-grained performance for developing technologies such as ASIC prototyping and FPGA computing, supporting computer-aided design tools have yet to be developed to target these devices rapidly and efficiently. This paper addresses the compilation time issue for routing array FPGAs with segmented routing architectures. By treating the routing problem as an Afl search, it is possible to trade additional device routing resources for decreased router run-time by converting an exhaustive breadth-first maze route into a shorter depth-first route. It is shown that for the depth-first case, the sparse nature of FPGA routing switches in commerical architectures, such as the Xilinx XC4000 family, necessitates an additional localized search near net inputs, called domain negotiation, to aid in directing the route of each design net onto a set of routing resources most likely to lead to a successful route. For a set of large FPGA benchmarks, a route time speedup of over an order of magnitude for an iterative maze router configured for depth-first routing is shown when compared to the same router configured for a breadth-first search. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Field-Programmable Gate Arrays Data Book. Lucent Technologies, </institution> <year> 1996. </year>
Reference-contexts: and outlines directions for future work including suggestions on how the placement-time problem may be addressed. 2 Background 2.1 FPGA Architecture The model for FPGA architecture used in this paper is the same as that used for previous studies [6] [7] and closely models the architecture of several commercial FPGAs <ref> [1] </ref> [2]. The contents of logic blocks (L) are a single look-up table/flip-flop pair. As illustrated in 3) are connected to logic blocks through a set of programmable switches, referred to as connection or C blocks, at the intersection of logic block IO terminals and channel tracks.
Reference: [2] <institution> The Programmable Logic Data Book. Xilinx Corporation, </institution> <year> 1996. </year>
Reference-contexts: outlines directions for future work including suggestions on how the placement-time problem may be addressed. 2 Background 2.1 FPGA Architecture The model for FPGA architecture used in this paper is the same as that used for previous studies [6] [7] and closely models the architecture of several commercial FPGAs [1] <ref> [2] </ref>. The contents of logic blocks (L) are a single look-up table/flip-flop pair. As illustrated in 3) are connected to logic blocks through a set of programmable switches, referred to as connection or C blocks, at the intersection of logic block IO terminals and channel tracks.
Reference: [3] <author> J. Babb, M. Frank, V. Lee, E. Waingold, and R. Barua. </author> <title> The RAW Benchmark Suite: Computations Structures for General Purpose Computing. </title> <booktitle> In Proceedings, IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <address> Napa, Ca, </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: This length distribution is the same as that found in devices from the Xilinx XC4000 family. The first four benchmarks in Table 1 are from the RAW Benchmark Suite <ref> [3] </ref>. These benchmarks were Circuit Source Logic DFS-neg BFS Blocks Min. Min.
Reference: [4] <author> V. Betz and J. Rose. </author> <title> Directional Bias and NonUniformity in FPGA Global Routing Architectures. </title> <booktitle> In ICCAD, </booktitle> <address> San Jose, Ca, </address> <year> 1996. </year>
Reference-contexts: Other intermediate domains are labelled with rank values indicating their relative C d value. 4 Router Implementation To support experimentation, the iterative maze router in the Versatile Place and Route (VPR) tool suite <ref> [4] </ref> Order the sinks using Prim's Algorithm. Perform Domain Negotiation. Target = sink closest to source. Put track segments attached to source onto expansion list with cost given by (4). Remove lowest cost track segment from expansion list. While the net input has not been reached.
Reference: [5] <author> V. Betz and J. Rose. VPR: </author> <title> A New Packing, Placement, and Routing Tool for FPGA Research. </title> <booktitle> In Proceedings, Field Programmable Logic, Seventh International Workshop, </booktitle> <address> Oxford, UK, </address> <month> Sept. </month> <year> 1997. </year>
Reference-contexts: The remaining six benchmarks and associated placements are from the FPGA Challenge <ref> [5] </ref>. In only one case, ssp96, was the minimum track width that achieved a successful route, W min , less for breadth-first routing than for depth-first routing with domain negotiation.
Reference: [6] <author> S. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic. </author> <title> Field-Programmable Gate Arrays. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, Ma, </address> <year> 1992. </year>
Reference-contexts: Finally, Section 6 summarizes this research and outlines directions for future work including suggestions on how the placement-time problem may be addressed. 2 Background 2.1 FPGA Architecture The model for FPGA architecture used in this paper is the same as that used for previous studies <ref> [6] </ref> [7] and closely models the architecture of several commercial FPGAs [1] [2]. The contents of logic blocks (L) are a single look-up table/flip-flop pair.
Reference: [7] <author> S. Brown, M. Khellah, and Z. Vranesic. </author> <title> Minimizing FPGA Interconnect Delay. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pages 16-23, </pages> <year> 1996. </year>
Reference-contexts: Finally, Section 6 summarizes this research and outlines directions for future work including suggestions on how the placement-time problem may be addressed. 2 Background 2.1 FPGA Architecture The model for FPGA architecture used in this paper is the same as that used for previous studies [6] <ref> [7] </ref> and closely models the architecture of several commercial FPGAs [1] [2]. The contents of logic blocks (L) are a single look-up table/flip-flop pair.
Reference: [8] <author> G. W. Clow. </author> <title> A Global Routing Algorithm for General Cells. </title> <booktitle> In Proceedings, ACM/IEEE 21st Design Automation Conference, </booktitle> <year> 1984. </year>
Reference-contexts: Previously <ref> [8] </ref> [13], it was observed that the process of selectively expanding candidate grid points from source to destination in the maze route is actually a special case of a more general Afl search algorithm [12]. <p> Additionally, each node has an associated cost, c i , which indicates its current usage, or occupancy, among nets targetted to the device. For successfully route completion, each node should have have an occupancy of at most one net. Algorithm A* [12] may be applied to this routing problem <ref> [8] </ref> by considering an evaluation function f at each node n i in the partial route from a two-point net source to destination as: f i = g i + d i (1) where g i is the cost of the path from the source Page 2 through n i and
Reference: [9] <author> C. Lee. </author> <title> An Algorithm for Path Connections and its Applications. </title> <journal> IRE Transactions on Electronic Computers, </journal> <month> Sept. </month> <year> 1961. </year>
Reference-contexts: Most commercial routers in use today are variants of the Lee maze routing algorthm for path determination between two vertices on a planar rectangular grid <ref> [9] </ref>. This algorithm attempts to locate the shortest path between two points while avoiding grid obstacles in the form of used routing resources. <p> Value g i is represented in most maze routing algorithms <ref> [9] </ref> [11] as the total cost of the previous path f i1 plus the cost of the next candidate node or: g i = f i1 + c i (2) Typically, the estimate of the path cost from node to destination d i is ignored, giving f i = g i
Reference: [10] <author> G. Lemieux, S. Brown, and D. Vranesic. </author> <title> On Two-Step Routing for FPGAs. </title> <booktitle> In Proceedings: International Symposium on Physical Design, </booktitle> <address> Napa, Ca., </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: For this paper, it is assumed that the connection block is flexible enough to connect logic block IOs to any routing track in the channel (F c = W ). A distinctive architectural feature of the FPGA is how each C block is constructed <ref> [10] </ref>. If each logic block input connection is implemented as a pass transistor, then two or more connections to the pin may be ac tivated to permit a routing dogleg, where the pin and connected wires are shorted together to form a single electrical path.
Reference: [11] <author> L. McMurchie and C. Ebeling. PathFinder: </author> <title> A Negotiation-Based Performance-Driven Router for FP-GAs. </title> <booktitle> In International Symposium on Field Programmable Gate Arrays, </booktitle> <address> Monterey, Ca., </address> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: The sparseness of the switchbox coupled with the inability to switch tracks at logic block inputs leads to the constraint that routing domain changes can only occur at net outputs even for nets with high fanout. 2.2 A* Routing In general, FPGA routing may be defined as a graph problem <ref> [11] </ref>. Routing resources in an FPGA and their connections may be represented by a graph G = (V; E) where V represents the routing nodes or tracks and E represents the connections between the wires or switches. <p> Value g i is represented in most maze routing algorithms [9] <ref> [11] </ref> as the total cost of the previous path f i1 plus the cost of the next candidate node or: g i = f i1 + c i (2) Typically, the estimate of the path cost from node to destination d i is ignored, giving f i = g i . <p> Remove lowest cost track segment from expansion list. Endwhile Empty the expansion list. Endwhile was modified to support depth-first routing and domain negotiation in addition to its original support of breadth-first routing. This router is based on the PathFinder negotiated congestion algorithm <ref> [11] </ref> which consists of routing each net with a maze router and then ripping up and rerouting each net in sequence a number of times.
Reference: [12] <author> N. J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publishing, </publisher> <address> Palo Alto, Ca., </address> <year> 1980. </year>
Reference-contexts: Previously [8] [13], it was observed that the process of selectively expanding candidate grid points from source to destination in the maze route is actually a special case of a more general Afl search algorithm <ref> [12] </ref>. In this paper the relationship between routing run time and required routing resources is examined by varying both routing track widths for given designs and the grid point expansion rate along a given route. <p> Additionally, each node has an associated cost, c i , which indicates its current usage, or occupancy, among nets targetted to the device. For successfully route completion, each node should have have an occupancy of at most one net. Algorithm A* <ref> [12] </ref> may be applied to this routing problem [8] by considering an evaluation function f at each node n i in the partial route from a two-point net source to destination as: f i = g i + d i (1) where g i is the cost of the path from
Reference: [13] <author> M. Palczewski. </author> <title> Plane Parallel A Maze Router and its Application to FPGAs. </title> <booktitle> In Proceedings, ACM/IEEE 29th Design Automation Conference, </booktitle> <year> 1992. </year>
Reference-contexts: Previously [8] <ref> [13] </ref>, it was observed that the process of selectively expanding candidate grid points from source to destination in the maze route is actually a special case of a more general Afl search algorithm [12].
Reference: [14] <author> R. Prim. </author> <title> Shortest Connecting Networks and Some Generalizations. </title> <institution> Bell Syst. Tech. J., </institution> <year> 1957. </year>
Reference-contexts: As a result, each input must be connected in a separate routing step. In an attempt to minimize overall wire length, the depth-first router orders target inputs using Prim's shortest-path algorithm <ref> [14] </ref>. The first target input is chosen to be the one closest to the net output. Subsequent targets are selected by choosing the input with the shortest path to the net output Page 4 or to the inputs already chosen.
Reference: [15] <author> J. Swartz, V. Betz, and J. Rose. </author> <title> A Fast Routability-Driven Router for FPGAs. </title> <booktitle> In 6th International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Monterey, Ca, </address> <month> Feb. </month> <year> 1998. </year> <pages> Page 6 </pages>
Reference-contexts: While the basic routing algorithm used in this new router is similar to the one described recently in <ref> [15] </ref>, an important extension has been made to support routing structures commonly found in commercial devices such as those in the Xilinx XC4000 series. <p> The first target input is chosen to be the one closest to the net output. Subsequent targets are selected by choosing the input with the shortest path to the net output Page 4 or to the inputs already chosen. As suggested in <ref> [15] </ref>, nets are routed in order of decreasing fanout. In general, high fanout nets are easier to route when there is less existing routing congestion. The details of the PathFinder algorithm modified for depth-first routing are shown in Figure 5. <p> It was found experimentally that an ff value of 0.6 significantly accelerated routing time without creating a significant loss in routing quality. Excluding the italicized domain negotiation steps, the routing iteration shown in Figure 5 is similar to the one discussed in <ref> [15] </ref>. This previous router was targetted to an enhanced FPGA routing architecture that did not contain the disjoint switchbox commonly found in commercial architectures such as the Xilinx XC4000 family.
References-found: 15

