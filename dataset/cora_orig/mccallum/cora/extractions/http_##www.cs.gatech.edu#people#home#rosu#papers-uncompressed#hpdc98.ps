URL: http://www.cs.gatech.edu/people/home/rosu/papers-uncompressed/hpdc98.ps
Refering-URL: http://www.cs.gatech.edu/people/home/rosu/
Root-URL: 
Email: frosu, schwang@cc.gatech.edu  
Title: Sender Coordination in the Distributed Virtual Communication Machine  
Author: Marcel-Catalin Rosu and Karsten Schwan 
Address: Atlanta, GA 30332-0280  
Affiliation: Georgia Institute of Technology, College of Computing  
Abstract: We present a DVCM extension module that provides application-specific network flow control by coordinating the resource-competing components of a parallel application running on an ATM LAN. Our experiments show that this extension module helps eliminate message loss and achieve high link bandwidth utilization when there is significant link contention. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. E. Anderson, D. E. Culler, D. A. Patterson, </author> <title> and the NOW Team. A Case for Networks of Workstations: NOW. </title> <booktitle> IEEE Micro, </booktitle> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: In this section, we describe our DVCM-based solution for preventing network overload when running parallel/distributed applications in ATM-based COWs. 4.1. Motivation The advantages of using COWs for parallel and high-performance distributed computing are well known and documented <ref> [1] </ref>. However, significant challenges arise when the traffic loads generated by parallel applications do not match the traffic models supported by the COW's underlying network. These mismatches can lead to network overload and, consequently, to dramatic reductions in message throughput.
Reference: [2] <author> Bershad, B. and Savage, S. and Pardyak, P. and Sirer, E. and Fiuczynski, M. and Becker, D. and Chambers, C. and Eggers, S. </author> <title> Extensibility, safety, and performance in the SPIN operating system. </title> <booktitle> Proceedings of the 15th ACM Symposium on Operating System Principles, ACM SIGOPS Notices, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: These extensions are typically distributed across all of the DVCM's execution units. The DVCM extension modules can use the DVCM's framework primitives: control messages, timeout, and dynamic memory allocation services. 3. The DVCM Extension Model Research on configurable operating and communication systems <ref> [2, 7, 19, 26] </ref> has demonstrated the fact that a single set of system primitives cannot easily satisfy the requirements of every user-provided application program. One of the proposed solutions is to customize the application interaction with the network interface [8, 16, 17].
Reference: [3] <author> J. C. Brustuloni. </author> <title> Exposed Buffering and Sub-Datagram Flow Control for ATM LANs. </title> <booktitle> Proceedings of the 19th Conference on Local Computer Networks, </booktitle> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The first method is a form of a more general technique called sub-datagram flow control that was explored in <ref> [3] </ref>. We have experimented with the second method and the experimental results are presented in the next subsection. Token-based protocols may also be used to handle other shared resources. For instance, senders may allocate buffer space at the destination using a token carrying the necessary information.
Reference: [4] <author> G. Buzzard, D. Jacobson, M. Mackey, S. Marovich, and J. Wilkes. </author> <title> An implementation of the Hamlyn sender-managed interface architecture. </title> <booktitle> Proceedings of the 2nd Symposium on Operating Systems Design and Implementations, </booktitle> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Related Work Over the past several years there has been considerable interest in building faster and lighter-weight communication architectures for COWs based on off-the-shelf components. Most of these systems offer a set of well-optimized user-level messaging primitives <ref> [4, 5, 14, 24] </ref>. Other systems implement an efficient RPC mechanism [22] or an efficient distributed shared memory abstraction [6]. In contrast, the DVCM enables the integration of application-specific modules into a framework that provides only a small set of basic primitives.
Reference: [5] <author> P. Druschel, L. L. Peterson, and B. S. Davie. </author> <title> Experiences with a High-Speed Network Adaptor: A Software Perspective. </title> <booktitle> Proceedings SIGCOMM '94, </booktitle> <month> Aug. </month> <year> 1994. </year> <title> 2 COWs and parallel machines are considered comparable when they use same generation hardware technologies. </title>
Reference-contexts: Related Work Over the past several years there has been considerable interest in building faster and lighter-weight communication architectures for COWs based on off-the-shelf components. Most of these systems offer a set of well-optimized user-level messaging primitives <ref> [4, 5, 14, 24] </ref>. Other systems implement an efficient RPC mechanism [22] or an efficient distributed shared memory abstraction [6]. In contrast, the DVCM enables the integration of application-specific modules into a framework that provides only a small set of basic primitives.
Reference: [6] <author> C. Dubnicki, A. Bilas, Y. Chen, S. Damianakis, and K. Li. VMMC-2: </author> <title> Efficient Support for Reliable, Connection-Oriented Communication. Hot Interconnects V, </title> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: Most of these systems offer a set of well-optimized user-level messaging primitives [4, 5, 14, 24]. Other systems implement an efficient RPC mechanism [22] or an efficient distributed shared memory abstraction <ref> [6] </ref>. In contrast, the DVCM enables the integration of application-specific modules into a framework that provides only a small set of basic primitives.
Reference: [7] <author> D. Engler, M. Kaashoek, and J. O`Toole. Exokernel: </author> <title> an operating system architecture for application-level resource management. </title> <booktitle> Proceedings of the Fifteenth ACM Symposium on Operating System Principles, ACM SIGOPS Notices, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: These extensions are typically distributed across all of the DVCM's execution units. The DVCM extension modules can use the DVCM's framework primitives: control messages, timeout, and dynamic memory allocation services. 3. The DVCM Extension Model Research on configurable operating and communication systems <ref> [2, 7, 19, 26] </ref> has demonstrated the fact that a single set of system primitives cannot easily satisfy the requirements of every user-provided application program. One of the proposed solutions is to customize the application interaction with the network interface [8, 16, 17]. <p> A deactivation procedure is included, as well. Although all of our implementations provide only for static (compile-time) extensions of the DVCM, a more complex implementation can provide for dynamic extensions of DVCM functionality. Based on the results described in <ref> [7, 25] </ref>, we believe that the DVCM extension model can provide for safe dynamic extensions of the base DVCM.
Reference: [8] <author> M. E. Fiuczynski and B. N. Bershad. </author> <title> SPINE A Safe Programmable and Integrated Network Environment. </title> <booktitle> Proceedings of the Work In Progress session of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: One of the proposed solutions is to customize the application interaction with the network interface <ref> [8, 16, 17] </ref>. The research reported here goes further and considers customizing the interaction of the application with the entire network, viewed as a single entity. The DVCM architecture provides two mechanisms with which applications can customize their interactions with the network.
Reference: [9] <author> I. Foster and C. Kesselman. </author> <title> The Globus Project: A Status Report. </title> <booktitle> IPPS/SPDP '98 Heterogeneous Computing Workshop, </booktitle> <month> Apr. </month> <year> 1998. </year>
Reference-contexts: In comparison, the DVCM architecture is a lower-cost solution to providing improved performance to parallel applications running on COWs. The Globus toolkit <ref> [9] </ref> provides developers with the ability to configure the communication infrastructure used by high-performance applications and tools running across wide-area networks.
Reference: [10] <author> G. C. Fox, M. A. Johnson, G. A. Lyzenga, S. W. Otto, J. K. Salmon, and D. W. Walker. </author> <title> Solving Problems On Concurrent Processors. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: Although parallel applications schedule their communication to avoid network overloading, contention between two or three of these sources is likely to exist, as documented in numerous experimental evaluations on distributed memory machines <ref> [10, 20] </ref>. Consequently, we experiment with one, two, and three data sources. The message sizes are varied from zero to 10 Kbytes and the data burst sizes are chosen to exceed the buffering capacity of the ATM switch. Control coordination among sources.
Reference: [11] <author> M. Heinrich, J. Kuskin, D. Ofelt, J. Heinlein, J. Baxter, J. P. Singh, R. Simoni, K. Gharachorloo, D. Nakahira, M. Horowitz, A. Gupta, M. Rosenblum, , and J. Hen-nessy. </author> <title> The Performance Impact of Flexibility in the Stanford FLASH Multiprocessor. </title> <booktitle> Proceedings of the 6th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 274-285, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The benefits of extending and configuring the communication substrate have been studied for a wide variety of platforms, ranging from coherence protocols for distributed memory parallel machines to environments for high-performance computing over wide-area networks. The Stanford FLASH project <ref> [11] </ref> investigates the advantages of a flexible communication layer by replacing the traditional hardwired controller of a distributed parallel machine with a programmable microcontroller.
Reference: [12] <author> Y. Huang and P. K. McKinley. </author> <title> Efficient Collective Operations with ATM Network Interface Support. </title> <booktitle> Proceedings of the 1996 International Conference on Parallel Processing, </booktitle> <pages> pages 34-43, </pages> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: Other projects have identified the potential benefits of running communication-intensive modules of a cluster application in a "closer-to-the-network" context. <ref> [12] </ref> considers the decomposition of collective computation algorithms into "core", performance-critical operations, implemented on dedicated NI resources, and more complex but less frequently invoked operations, implemented on the workstations in the cluster.
Reference: [13] <author> P. M. Kogge. </author> <title> EXECUBE ANew Architecture for Scalable MPPs. </title> <booktitle> Proceedings of the 1994 International Conference on Parallel Processing, </booktitle> <year> 1994. </year>
Reference-contexts: It is expected that the capacity of the resources installed on intelligent NI cards will increase, driven by technology advances. More specifically, the speed of communication processors, which has already reached 100MHz, will continue to increase. Current trends of placing both processor and memory on the chip <ref> [13, 15, 18] </ref> are expected to decrease the cost of intelligent NIs, and therefore, to diminish the cost difference between intelligent and ordinary NIs.
Reference: [14] <author> S. Pakin, M. Laura, and A. Chien. </author> <title> High Performance Messaging on Workstations: Illinois Fast Messages (FM) for Myrinet. </title> <booktitle> Supercomputing, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Related Work Over the past several years there has been considerable interest in building faster and lighter-weight communication architectures for COWs based on off-the-shelf components. Most of these systems offer a set of well-optimized user-level messaging primitives <ref> [4, 5, 14, 24] </ref>. Other systems implement an efficient RPC mechanism [22] or an efficient distributed shared memory abstraction [6]. In contrast, the DVCM enables the integration of application-specific modules into a framework that provides only a small set of basic primitives.
Reference: [15] <author> D. Patterson, T. Anderson, N. Cardwell, R. Fromm, K. Kee-ton, C. Kozyrakis, R. Thomas, and K. Yelick. </author> <title> A Case for Intelligent RAM: </title> <journal> IRAM. IEEE Micro, </journal> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: It is expected that the capacity of the resources installed on intelligent NI cards will increase, driven by technology advances. More specifically, the speed of communication processors, which has already reached 100MHz, will continue to increase. Current trends of placing both processor and memory on the chip <ref> [13, 15, 18] </ref> are expected to decrease the cost of intelligent NIs, and therefore, to diminish the cost difference between intelligent and ordinary NIs.
Reference: [16] <author> M.-C. Rosu, K. Schwan, and R. Fujimoto. </author> <title> Supporting Parallel Applications on Clusters of Workstations: The Intelligent Network Interface Approach. </title> <booktitle> Proceedings of the 6th IEEE International Symposium on High Performance Distributed Computing, </booktitle> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: One of the proposed solutions is to customize the application interaction with the network interface <ref> [8, 16, 17] </ref>. The research reported here goes further and considers customizing the interaction of the application with the entire network, viewed as a single entity. The DVCM architecture provides two mechanisms with which applications can customize their interactions with the network. <p> Second, applications can extend the DVCM firmware with code implementing application-specific commands that can be executed both locally and remotely. Both of these mechanisms are designed to help reduce communication overheads. The first mechanism is very similar to the one in the VCM architecture and it is described in <ref> [16, 17] </ref>. In the following, we describe the second mechanism. Extending the DVCM with application-specific commands enables the transfer of application-level functionality to the network interface. Although this approach moves processing from a faster to a slower processor, there are arguments that support it: Latency.
Reference: [17] <author> M.-C. Rosu, K. Schwan, and R. Fujimoto. </author> <title> Supporting Parallel Applications on Clusters of Workstations: The Virtual Communication Machine-based Architecture. </title> <journal> Cluster Computing, </journal> <volume> 1 </volume> <pages> 1-17, </pages> <month> Jan. </month> <year> 1998. </year>
Reference-contexts: Most likely, every well-designed NI card hosts a certain amount of unused resources. Furthermore, our previous work on the Virtual Communication Machine (VCM) <ref> [17] </ref> has demonstrated that the amounts of additional resources required by DVCM plus typical application-specific extensions are small. This paper demonstrates the benefits of the DVCM extensible architecture with an extension module that implements a task useful in most parallel applications: coordination among the resource-competing components of a parallel/distributed application. <p> One of the proposed solutions is to customize the application interaction with the network interface <ref> [8, 16, 17] </ref>. The research reported here goes further and considers customizing the interaction of the application with the entire network, viewed as a single entity. The DVCM architecture provides two mechanisms with which applications can customize their interactions with the network. <p> Second, applications can extend the DVCM firmware with code implementing application-specific commands that can be executed both locally and remotely. Both of these mechanisms are designed to help reduce communication overheads. The first mechanism is very similar to the one in the VCM architecture and it is described in <ref> [16, 17] </ref>. In the following, we describe the second mechanism. Extending the DVCM with application-specific commands enables the transfer of application-level functionality to the network interface. Although this approach moves processing from a faster to a slower processor, there are arguments that support it: Latency.
Reference: [18] <author> A. Saulsbury, F. Pong, and A. Nowatzyk. </author> <title> Missing the Memory Wall: The Case for Processor/Memory Integration. </title> <booktitle> Proceedings of the 23rd Annual International Symposium on Computer Architecture, </booktitle> <month> Jun. </month> <year> 1996. </year>
Reference-contexts: It is expected that the capacity of the resources installed on intelligent NI cards will increase, driven by technology advances. More specifically, the speed of communication processors, which has already reached 100MHz, will continue to increase. Current trends of placing both processor and memory on the chip <ref> [13, 15, 18] </ref> are expected to decrease the cost of intelligent NIs, and therefore, to diminish the cost difference between intelligent and ordinary NIs.
Reference: [19] <author> K. Schwan, T. Bihari, B. W. Weide, and G. Taulbee. </author> <title> High-Performance Operating System Primitives for Robotics and Real-Time Control Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(3) </volume> <pages> 189-231, </pages> <month> Aug. </month> <year> 1987. </year>
Reference-contexts: These extensions are typically distributed across all of the DVCM's execution units. The DVCM extension modules can use the DVCM's framework primitives: control messages, timeout, and dynamic memory allocation services. 3. The DVCM Extension Model Research on configurable operating and communication systems <ref> [2, 7, 19, 26] </ref> has demonstrated the fact that a single set of system primitives cannot easily satisfy the requirements of every user-provided application program. One of the proposed solutions is to customize the application interaction with the network interface [8, 16, 17].
Reference: [20] <author> K. Schwan and W. Bo. </author> <title> Topologies Distributed Objects on Multicomputers. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(2) </volume> <pages> 111-157, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Although parallel applications schedule their communication to avoid network overloading, contention between two or three of these sources is likely to exist, as documented in numerous experimental evaluations on distributed memory machines <ref> [10, 20] </ref>. Consequently, we experiment with one, two, and three data sources. The message sizes are varied from zero to 10 Kbytes and the data burst sizes are chosen to exceed the buffering capacity of the ATM switch. Control coordination among sources.
Reference: [21] <author> P. G. Sobalvarro, S. Pakin, W. E. Weihl, and A. A. Chien. </author> <title> Dynamic coscheduling on workstation clusters. </title> <note> Submitted for Publication, </note> <month> March </month> <year> 1997. </year>
Reference-contexts: Furthermore, the DVCM extension model can be combined with the extension model of a host kernel to provide a framework useful for implementing efficient cluster-wide mechanisms such as scheduling in a manner similar to <ref> [21] </ref>. 4. Sender Coordination Performance degradation due to network overload is a significant challenge for parallel computations on COWs. In this section, we describe our DVCM-based solution for preventing network overload when running parallel/distributed applications in ATM-based COWs. 4.1.
Reference: [22] <author> C. A. Thekkath and H. M. Levy. </author> <title> Limits to Low-Latency Communication on High-Speed Networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 11(2) </volume> <pages> 179-203, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Related Work Over the past several years there has been considerable interest in building faster and lighter-weight communication architectures for COWs based on off-the-shelf components. Most of these systems offer a set of well-optimized user-level messaging primitives [4, 5, 14, 24]. Other systems implement an efficient RPC mechanism <ref> [22] </ref> or an efficient distributed shared memory abstraction [6]. In contrast, the DVCM enables the integration of application-specific modules into a framework that provides only a small set of basic primitives.
Reference: [23] <author> H. Topcuoglu, S. Hariri, W. Furmanski, J. Valente, I. Ra, D. Kim, Y. Kim, X. Bing, and B. Ye. </author> <title> The Software Architecture of a Virtual Distributed Computing Environment. </title> <booktitle> Proceedings of the 6th IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 40-49, </pages> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: In general, COWs built around unreliable networks and off-the-shelf switches are not able to handle hot spots in the traffic generated by a parallel computation. In particular, ATM-based COWs are promising solutions for high-performance distributed computing on metropolitan and wide-area clusters <ref> [23] </ref> due to their availability, scalability and to the continuing improvements in their cost/performance ratios.
Reference: [24] <author> T. von Eicken, A. Basu, V. Buch, and W. Vogels. </author> <month> U-Net: </month>
Reference-contexts: Related Work Over the past several years there has been considerable interest in building faster and lighter-weight communication architectures for COWs based on off-the-shelf components. Most of these systems offer a set of well-optimized user-level messaging primitives <ref> [4, 5, 14, 24] </ref>. Other systems implement an efficient RPC mechanism [22] or an efficient distributed shared memory abstraction [6]. In contrast, the DVCM enables the integration of application-specific modules into a framework that provides only a small set of basic primitives.
References-found: 24

