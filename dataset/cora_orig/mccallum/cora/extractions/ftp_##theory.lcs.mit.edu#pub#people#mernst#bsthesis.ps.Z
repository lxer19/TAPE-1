URL: ftp://theory.lcs.mit.edu/pub/people/mernst/bsthesis.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/mernst/other-technical.html
Root-URL: 
Title: Adequate Models for Recursive Program Schemes  
Author: by Michael D. Ernst c Michael D. Ernst, Albert R. Meyer Leonard A. Gould 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Bachelor of Science in Computer Science and Engineering at the  The author hereby grants to MIT permission to reproduce and to distribute copies of this thesis document in whole or in part. Signature of Author  Certified by  Professor of Computer Science and Engineering Thesis Supervisor Accepted by  Chairman, Departmental Committee on Undergraduate Theses  
Date: June 1989  1989  May 22, 1989  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [Bar81] <author> Henk P. Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics, </title> <booktitle> volume 103 of Studies in Logic. </booktitle> <publisher> North-Holland, </publisher> <year> 1981. </year> <note> Revised Edition, </note> <year> 1984. </year>
Reference: [End77] <author> Herbert B. Enderton. </author> <title> Elements of Set Theory. </title> <publisher> Academic Press, </publisher> <year> 1977. </year>
Reference: [LS87] <author> Jacques Loeckx and Kurt Sieber. </author> <title> The Foundations of Program Verification. </title> <booktitle> Wiley-Teubner Series in Computer Science. </booktitle> <publisher> John Wiley and Sons, </publisher> <year> 1987. </year> <note> Second Edition. </note>
Reference-contexts: Because it is such a basic and important property, adequacy has been often shown for various interpreters (operational semantics) and denotational semantics <ref> [Vui73, Man74, Tai75, LS87] </ref>; the classic statement is found in [Plo77]. All of these expositions use the continuous model, which we reject for reasons outlined above. The proof methods of these references are, in general, valid even when their proofs do not apply to the monotone case. <p> This method is much more general than required here (it applies to a wider class of programs), and it demands continuity. Loeckx and Sieber <ref> [LS87] </ref> present a fairly straightforward proof of adequacy based on the definitions of substitution and interpretation; however, the proof only works for interpreters which simultaneously evaluate all subexpressions of an expression.
Reference: [Man74] <author> Zohar Manna. </author> <title> Mathematical Theory of Computation. </title> <publisher> McGraw-Hill, </publisher> <year> 1974. </year>
Reference-contexts: Because it is such a basic and important property, adequacy has been often shown for various interpreters (operational semantics) and denotational semantics <ref> [Vui73, Man74, Tai75, LS87] </ref>; the classic statement is found in [Plo77]. All of these expositions use the continuous model, which we reject for reasons outlined above. The proof methods of these references are, in general, valid even when their proofs do not apply to the monotone case. <p> This isn't the case for many real interpreters, and we have no wish to so restrict ourselves in this thesis. The method which seems to have the best promise for extension to the monotone case is that of "safe" computation rules <ref> [Man74, Vui73] </ref>; this thesis follows that method. A safe computation rule is one for which adequacy is guaranteed to hold; the formal definition will appear later. This proof works only in the presence of first-order terms; no functional abstraction is permitted. <p> Similar rules are given in <ref> [Man74, p. 375] </ref> and [Vui73, p. 33]. Leftmost-innermost ("call-by-value") rule LI : Substitute for only the leftmost-innermost occurrence of F (that is, the leftmost occurrence of F which has all its arguments free of F's).
Reference: [Mey88] <author> Albert R. Meyer. </author> <title> Semantical paradigms: Notes for an invited lecture, with two appendices by Stavros Cosmodakis. </title> <type> Technical Report MIT/LCS/TM353, </type> <institution> MIT Lab. for Comp. Sci., </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: The proof methods of these references are, in general, valid even when their proofs do not apply to the monotone case. Because of this fact, the results shown in this thesis in many cases follow from the proofs, though not from the theorems, of other published work. Meyer <ref> [Mey88] </ref> presents the case for the use of monotone models and questions the gratuitous use of adequacy; it was such issues that inspired this thesis.
Reference: [Mor71] <author> J. H. Morris. </author> <title> Another recursion induction principle. </title> <journal> Communications of the ACM, </journal> <volume> 14(5), </volume> <year> 1971. </year>
Reference-contexts: Let us show by example that some of the computation rules are incorrect in that they do not compute the fixed point. For these computation rules, [[C R ]] 6= f R . Consider the following recursive program scheme <ref> [Mor71] </ref>: F (x; y) ( if x = 0 then 0 else F (x 1; F (x; y)) fi Its least fixed point is the two-argument constant zero function, but if F (1,0) is computed using the LI or P I rules, the computation runs forever. 36 The computation sequences for
Reference: [Plo77] <author> Gordon D. Plotkin. </author> <title> LCF considered as a programming language. </title> <journal> Theoretical Computer Science, </journal> <volume> 5 </volume> <pages> 223-257, </pages> <year> 1977. </year>
Reference-contexts: Because it is such a basic and important property, adequacy has been often shown for various interpreters (operational semantics) and denotational semantics [Vui73, Man74, Tai75, LS87]; the classic statement is found in <ref> [Plo77] </ref>. All of these expositions use the continuous model, which we reject for reasons outlined above. The proof methods of these references are, in general, valid even when their proofs do not apply to the monotone case. <p> Meyer [Mey88] presents the case for the use of monotone models and questions the gratuitous use of adequacy; it was such issues that inspired this thesis. Plotkin <ref> [Plo77] </ref> proves adequacy very elegantly by Tait's method of computability, which requires a proof by structural induction on terms of a property defined by induction on 8 types. This method is much more general than required here (it applies to a wider class of programs), and it demands continuity.
Reference: [RV80] <author> Jean-Claude Raoult and Jean Vuillemin. </author> <title> Operational and semantic equivalence between recursive programs. </title> <journal> Journal of the ACM, </journal> <volume> 27 </volume> <pages> 772-796, </pages> <year> 1980. </year>
Reference: [Sch88] <author> David A. Schmidt. </author> <title> Denotational Semantics: A Methodology for Language Development. Wm. </title> <editor> C. Brown, </editor> <year> 1988. </year>
Reference: [Tai75] <author> William W. Tait. </author> <title> A realizability interpretation of the theory of species. </title> <editor> In R. Parikh, editor, </editor> <booktitle> Logic Colloqium, '73, volume 453 of Lect. Notes in Math, </booktitle> <pages> pages 22-37. </pages> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference-contexts: Because it is such a basic and important property, adequacy has been often shown for various interpreters (operational semantics) and denotational semantics <ref> [Vui73, Man74, Tai75, LS87] </ref>; the classic statement is found in [Plo77]. All of these expositions use the continuous model, which we reject for reasons outlined above. The proof methods of these references are, in general, valid even when their proofs do not apply to the monotone case.
Reference: [Vel] <author> Dan Velleman. </author> <title> Manuscript of Jan. 20, 1987 on the relation between monotone and continuous models. </title>
Reference: [Vui73] <author> Jean Vuillemin. </author> <title> Proof techniques for recursive programs. note de travail, </title> <institution> Institut de Recherche d'Informatique et d'Automatique, Domaine de Voluceau, Rocquen-court, 78150 - Le Chesnay, </institution> <month> June </month> <year> 1973. </year> <month> 58 </month>
Reference-contexts: Because it is such a basic and important property, adequacy has been often shown for various interpreters (operational semantics) and denotational semantics <ref> [Vui73, Man74, Tai75, LS87] </ref>; the classic statement is found in [Plo77]. All of these expositions use the continuous model, which we reject for reasons outlined above. The proof methods of these references are, in general, valid even when their proofs do not apply to the monotone case. <p> This isn't the case for many real interpreters, and we have no wish to so restrict ourselves in this thesis. The method which seems to have the best promise for extension to the monotone case is that of "safe" computation rules <ref> [Man74, Vui73] </ref>; this thesis follows that method. A safe computation rule is one for which adequacy is guaranteed to hold; the formal definition will appear later. This proof works only in the presence of first-order terms; no functional abstraction is permitted. <p> Similar rules are given in [Man74, p. 375] and <ref> [Vui73, p. 33] </ref>. Leftmost-innermost ("call-by-value") rule LI : Substitute for only the leftmost-innermost occurrence of F (that is, the leftmost occurrence of F which has all its arguments free of F's).
References-found: 12

