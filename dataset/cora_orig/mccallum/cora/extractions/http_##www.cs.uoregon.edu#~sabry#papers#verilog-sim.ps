URL: http://www.cs.uoregon.edu/~sabry/papers/verilog-sim.ps
Refering-URL: http://www.cs.uoregon.edu/~sabry/papers/index.html
Root-URL: http://www.cs.uoregon.edu
Title: A Formal Description of the Verilog Simulation Cycle  
Author: John Fiskio-Lasseter and Amr Sabry 
Note: Summary  
Address: Eugene, OR 97403  
Affiliation: Department of Computer Information Science University of Oregon  
Abstract: Reasoning about hardware designs written in Verilog is problematic, in large part because of the lack of a formal semantics for the language. The behavioral aspects of many constructs within the language are unclear, even with the existence now of an official language standard. As a result, a program may contain many subtleties which can be overlooked without careful analysis, and which may not even appear, depending on the implementation of the simulator that is used. In this paper, we present a formal description of a large subset of behavioral Verilog, based on axiomatic semantics. Our primary contribution is an explicit formalization of the Verilog simulation cycle. In addition, we discuss some of the constructs that pose particular challenges to formal description, and offer axiomatic descriptions of these constructs that appear to match the behavior of the leading simulation packages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ariola, Z. M., and Felleisen, M. </author> <title> The call-by-need lambda calculus. </title> <editor> J. </editor> <booktitle> Functional Programming 7, </booktitle> <month> 3 </month> <year> (1997). </year>
Reference-contexts: The original work explained the semantics of two small pure functional languages: a call-by-value one and a call-by-name one. Since then, the specification technique has been successfully applied to explain all sorts of language constructs including assignments, jumps, continuation-based control operators [6, 15], and call-by-need procedures <ref> [1] </ref>. Our current work extends the application of this specification technique to languages with threads, timing and event controls, and hardware-specific constructs like non-blocking assignments. Many of the subtleties of the Verilog language represented in our semantics are described in Gordon's "Semantic Challenge" paper [9].
Reference: [2] <author> Boehm, H. </author> <title> Side Effects and Aliasing Can Have Simple Axiomatic Descriptions. </title> <journal> ACM Transactions on Programming Languages and Systems 7, </journal> <month> 4 (October </month> <year> 1985), </year> <pages> 637-655. </pages>
Reference-contexts: To represent the effect of an assignment or the result of evaluating a variable, we need to find a Verilog construct that will serve as an abstract representation of memory. We can employ a well-known technique <ref> [2] </ref> to do this: we add a sequential block to the top-level module, whose body consists of a sequence of blocking assignments to constant values, one for each declared register variable in the program.
Reference: [3] <author> Cheng, S., and Brayton, R. </author> <title> Compiling Ver-ilog into Automata. </title> <institution> Memorandum UCB/ERC M94/37, Department of Electrical Engineering and Computer Sciences, University of Califor-nia, Berkeley, </institution> <year> 1994. </year>
Reference: [4] <author> Cheng, S., and Brayton, R. </author> <title> Synthesizing Multi-Phase HDL Programs. </title> <booktitle> In 1996 IEEE International Verilog HDL Conference (Washing-ton, 1996), </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 67-76. </pages>
Reference-contexts: Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], [17]). Another prominent effort in formal reasoning about behavioral Verilog is the work surrounding the VIS system and its FSM compiler, vl2mv ([3], <ref> [4] </ref>, [5]). VIS has successfully synthesized and formally verified substantial Verilog programs, and is even capable of performing some optimizations on the resulting logic. Pace [13] describes a simplified operational semantics for Verilog, based on a variant of the discrete duration calculus.
Reference: [5] <author> Cheng, S., Brayton, R., York, G., Yelick, K., and Saldanha, A. </author> <title> Compiling Verilog into Timed Finite State Machines. </title> <booktitle> In 1995 IEEE International Verilog HDL Conference (Washing-ton, 1995), </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 32-39. </pages>
Reference-contexts: Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], [17]). Another prominent effort in formal reasoning about behavioral Verilog is the work surrounding the VIS system and its FSM compiler, vl2mv ([3], [4], <ref> [5] </ref>). VIS has successfully synthesized and formally verified substantial Verilog programs, and is even capable of performing some optimizations on the resulting logic. Pace [13] describes a simplified operational semantics for Verilog, based on a variant of the discrete duration calculus.
Reference: [6] <author> Felleisen, M., and Hieb, R. </author> <title> The revised report on the syntactic theories of sequential control and state. </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 102 </month> <year> (1992), </year> <type> 235-271. Tech. Rep. 89-100, </type> <institution> Rice University. </institution>
Reference-contexts: The original work explained the semantics of two small pure functional languages: a call-by-value one and a call-by-name one. Since then, the specification technique has been successfully applied to explain all sorts of language constructs including assignments, jumps, continuation-based control operators <ref> [6, 15] </ref>, and call-by-need procedures [1]. Our current work extends the application of this specification technique to languages with threads, timing and event controls, and hardware-specific constructs like non-blocking assignments. Many of the subtleties of the Verilog language represented in our semantics are described in Gordon's "Semantic Challenge" paper [9].
Reference: [7] <author> Fiskio-Lasseter, J. </author> <title> A Formal Description of Behavioral Verilog Based on Axiomatic Semantics. </title> <type> M.Sc Thesis, </type> <institution> Department of Computer and Information Science, University of Oregon, </institution> <year> 1998. </year>
Reference-contexts: Given a Verilog program, therefore, we perform a "flattening" transformation, based on one proposed by Gordon [9], which collapses all modules into the top-level, eliminating all module instantiations, port connections, wire variables, and labels <ref> [7] </ref>. The result is a single module with neither wires nor labels, whose body consists of all the original threads and reg declarations of the top-level module, and all those of its original module instantiations.
Reference: [8] <author> Gordon, M. </author> <title> Event and Cycle Semantics of Hardware Description Languages. </title> <note> Unpublished draft, available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/mjcg/ Verilog/V/HDLPaper.ps. </note>
Reference: [9] <author> Gordon, M. </author> <title> The semantic challenge of Ver-ilog HDL. </title> <booktitle> In the IEEE Symposium on Logic in Computer Science (June 1995), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Los Alamitos, </address> <institution> Calif. </institution> <type> Invited paper. </type>
Reference-contexts: Our current work extends the application of this specification technique to languages with threads, timing and event controls, and hardware-specific constructs like non-blocking assignments. Many of the subtleties of the Verilog language represented in our semantics are described in Gordon's "Semantic Challenge" paper <ref> [9] </ref>. Gordon's recent work has been directed toward the development of different theoretical models for understanding Ver-ilog and other HDLs ([8], [10]), using subsets of the language with simplified semantics. Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], [17]). <p> Given a Verilog program, therefore, we perform a "flattening" transformation, based on one proposed by Gordon <ref> [9] </ref>, which collapses all modules into the top-level, eliminating all module instantiations, port connections, wire variables, and labels [7].
Reference: [10] <author> Gordon, M., and Ghosh, A. </author> <title> Language Independent RTL Semantics. </title> <note> In 1998 IEEE CS Annual Workshop on VLSI: System Level Design (to be published). Available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/mjcg/ OrlandoPaper.ps. </note>
Reference-contexts: Many of the subtleties of the Verilog language represented in our semantics are described in Gordon's "Semantic Challenge" paper [9]. Gordon's recent work has been directed toward the development of different theoretical models for understanding Ver-ilog and other HDLs ([8], <ref> [10] </ref>), using subsets of the language with simplified semantics. Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], [17]).
Reference: [11] <author> Hua, X., and Zang, H. </author> <title> Axiomatic Semantics of a Hardware Specification Language. </title> <booktitle> In Second Great Lakes Symposium on VLSI (Los Alamitos, </booktitle> <address> CA, 1991), </address> <publisher> IEEE Press, </publisher> <pages> pp. 183-190. </pages>
Reference-contexts: Van Tassel [18] gives an operational semantic description of its simulation cycle, formulated in the higher-order logic notation of the Cambridge HOL system. The only other axiomatic semantic description of a hardware description language of which we are aware is a short paper by Hua and Zhang <ref> [11] </ref>, in which they describe a semantics for the Iowa Logic Specification Language. 3 Syntax and Normalization of Verilog Programs In the present work, we limit our formal description to a core subset of the full Verilog language, consisting only of representative behavioral elements.
Reference: [12] <editor> IEEE, Ed. </editor> <title> Standard Hardware Description Language Based on the Verilog Hardware Description Language. </title> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> Calif., </address> <year> 1996. </year> <note> IEEE Standard 1364-1995. </note>
Reference-contexts: Verilog began as (and remains today) an industrial language whose design was geared toward providing a practical tool for engineers rather than a tool for academic research. Until the release of the IEEE Standard <ref> [12] </ref> in 1996, there was no official standard semantics for the language. At the time of this writing, no complete formal semantics exists at all. <p> For example, there are executions of the following code in which s will not execute: initial begin x = 1; if ((!x) || x) s; end initial x = 0; Although most Verilog simulators are unlikely to implement this behavior, x5.4.1 of the IEEE Standard <ref> [12] </ref> states that full interleaving of behavioral statements is an acceptable part of the standard: this worst case is what we have chosen to reflect. 5.3 Detecting Edges The problem with this approach arises when we must consider the store in relation to event controls: the traditional representation offers us no
Reference: [13] <author> Pace, G., and He, J. </author> <title> Formal Reasoning with Verilog HDL. </title> <booktitle> In Workshop on Formal Techniques for Hardware and Hardware-like Systems (Marstrand, </booktitle> <address> Sweden, </address> <month> June </month> <year> 1998). </year>
Reference-contexts: Another prominent effort in formal reasoning about behavioral Verilog is the work surrounding the VIS system and its FSM compiler, vl2mv ([3], [4], [5]). VIS has successfully synthesized and formally verified substantial Verilog programs, and is even capable of performing some optimizations on the resulting logic. Pace <ref> [13] </ref> describes a simplified operational semantics for Verilog, based on a variant of the discrete duration calculus. VHDL is a hardware description language similar in character to Verilog.
Reference: [14] <author> Plotkin, G. D. </author> <title> Call-by-name, call-by-value, and the -calculus. </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 1 </month> <year> (1975), </year> <pages> 125-159. </pages>
Reference-contexts: Some of these sub tleties are discussed in this paper. 1 2 Related Work The style of semantic specification based on axioms and reductions was pioneered by Plotkin in 1975 <ref> [14] </ref>. The original work explained the semantics of two small pure functional languages: a call-by-value one and a call-by-name one. Since then, the specification technique has been successfully applied to explain all sorts of language constructs including assignments, jumps, continuation-based control operators [6, 15], and call-by-need procedures [1].
Reference: [15] <author> Sabry, A., and Felleisen, M. </author> <title> Reasoning about programs in continuation-passing style. Lisp Symbol. </title> <journal> Comput. </journal> <volume> 6, 3/4 (1993), </volume> <pages> 289-360. </pages> <booktitle> 11 Also in the ACM Conference on Lisp and Func--tional Programming (1992) and Tech. Rep. </booktitle> <pages> 92-180, </pages> <institution> Rice University. </institution>
Reference-contexts: The original work explained the semantics of two small pure functional languages: a call-by-value one and a call-by-name one. Since then, the specification technique has been successfully applied to explain all sorts of language constructs including assignments, jumps, continuation-based control operators <ref> [6, 15] </ref>, and call-by-need procedures [1]. Our current work extends the application of this specification technique to languages with threads, timing and event controls, and hardware-specific constructs like non-blocking assignments. Many of the subtleties of the Verilog language represented in our semantics are described in Gordon's "Semantic Challenge" paper [9].
Reference: [16] <author> Stewart, D. </author> <title> Combining Verilog Signals in Nets. </title> <note> Unpublished draft, available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/djs1002/ verilog.project/papers/ combining signals.ps.gz. </note>
Reference: [17] <author> Stewart, D. </author> <title> Modelling Verilog Port Connections. </title> <note> Unpublished draft, available (as of 08-24-98) on the World-Wide Web at http://www.cl.cam.uk/users/djs1002/ verilog.project/papers/ports.ps.gz. </note>
Reference-contexts: Gordon's recent work has been directed toward the development of different theoretical models for understanding Ver-ilog and other HDLs ([8], [10]), using subsets of the language with simplified semantics. Stewart is investigating the semantic properties of many structural constructs, particularly port connections and continuous assignment ([16], <ref> [17] </ref>). Another prominent effort in formal reasoning about behavioral Verilog is the work surrounding the VIS system and its FSM compiler, vl2mv ([3], [4], [5]). VIS has successfully synthesized and formally verified substantial Verilog programs, and is even capable of performing some optimizations on the resulting logic.
Reference: [18] <author> Van Tassel, J. P. </author> <title> A formalisation of the VHDL simulation cycle. In Higher Order Logic Theorem Proving and its Applications (North-Holland, 1993), </title> <editor> L. Claesen and M. Gordon, Eds., </editor> <publisher> Elsevier Science Publishers B.V., </publisher> <pages> pp. 359-374. 12 </pages>
Reference-contexts: Pace [13] describes a simplified operational semantics for Verilog, based on a variant of the discrete duration calculus. VHDL is a hardware description language similar in character to Verilog. Van Tassel <ref> [18] </ref> gives an operational semantic description of its simulation cycle, formulated in the higher-order logic notation of the Cambridge HOL system.
References-found: 18

