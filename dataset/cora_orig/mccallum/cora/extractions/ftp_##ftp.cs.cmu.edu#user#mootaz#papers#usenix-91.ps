URL: ftp://ftp.cs.cmu.edu/user/mootaz/papers/usenix-91.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/mootaz/ftp/html/pub.html
Root-URL: 
Title: A Highly Available Network File Server  
Author: Anupam Bhide Elmootazbellah N. Elnozahy Stephen P. Morgan 
Affiliation: IBM T.J. Watson Research Center  Department of Computer Science, Rice University  IBM T.J. Watson Research Center  
Abstract: This paper presents the design and implementation of a Highly Available Network File Server (HA-NFS). We separate the problem of network file server reliability into three different subprob-lems: server reliability, disk reliability, and network reliability. HA-NFS offers a different solution for each: dual-ported disks and impersonation are used to provide server reliability, disk mirroring can be used to provide disk reliability, and optional network replication can be used to provide network reliability. The implementation shows that HA-NFS provides high availability without the excessive resource overhead or the performance degradation that characterize traditional replication methods. Ongoing operations are not aborted during fail-over and recovery is completely transparent to applications. HA-NFS adheres to the NFS protocol standard and can be used by existing NFS clients without modification. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sun Microsystems, Inc. NFS: </author> <title> Network file system protocol specification. </title> <type> RFC 1094, </type> <institution> Network Information Center, SRI International, </institution> <month> March, </month> <year> 1989. </year>
Reference-contexts: Further, handling network partition requires quorum management, increasing system complexity. This paper describes the design and implementation of a Highly Available Network File Server (HA-NFS) that adheres to the semantics of SUN's Network File System 1 (NFS) <ref> [1] </ref>. HA-NFS differs from traditional approaches in that it considers the problem of providing a reliable network file system as three separate subproblems, namely: recovering from server failures, recovering from disk failures, and recovering from network failures. HA-NFS offers a different solution to each of these subproblems.
Reference: [2] <author> M.J. Fisher, N.A. Lynch, </author> <title> and M.S. Paterson. Impossibility of distributed consensus with one faulty process. </title> <journal> JACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In such unlikely cases, HA-NFS refrains from continuing the take-over and relies on operator intervention. In a network, it is impossible to determine with absolute certainty whether a certain machine has failed <ref> [2] </ref>. However, the failure detection tests never declare a server dead while it is operational.
Reference: [3] <author> D. C. Plummer. </author> <title> Ethernet address resolution protocol; RFC 826. In ARPANET Working Group Requests for Comments, no. </title> <type> 826. </type> <institution> SRI International, </institution> <address> Menlo Park, California, </address> <month> November </month> <year> 1982. </year>
Reference-contexts: If network interfaces that can change their hardware address are not available, an alternate scheme may be used to allow the live server to receive the packets intended for the failed one. The scheme consists of using the ARP <ref> [3] </ref> protocol to update the mapping between the failed server's IP address and the hardware address to reflect the change. HA-NFS updates stale mappings in the clients' ARP caches by sending an ARP request which queries for the hardware address corresponding to some machine's IP address.
Reference: [4] <author> Mahadev Satyanarayanan, James J. Kistler, Puneet Kumar, Maria E. Okasaki, Ellen H. Seigel, and David C. Steere. Coda: </author> <title> A highly available file system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 447-459, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: HA-NFS does not suffer from the problems associated with the traditional approaches based on replicating the file server as a unit <ref> [4, 5, 6, 7, 8, 9] </ref>. Replicating the file server as a unit introduces additional overhead during failure-free operation due to the need to enforce consistency among the replicas. <p> Re-integrating a recovering server into the system can be expensive since it requires updating 7 the server's stale view of the replicated file sys-tem. To tolerate network partition, a replication-based system must support read and write quorums, incurring a substantial performance penalty. This penalty has led some systems <ref> [4, 9] </ref> to abandon quorums, allowing divergence in replicas during network partition. While this solution may be acceptable in many practical environments, it cannot be relied on in general and it exposes failures to the users.
Reference: [5] <author> Keith Marzullo and Frank Schmuck. </author> <title> Supplying high availability with a standard network file system. </title> <booktitle> In Proceedings of the 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 447-453, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: HA-NFS does not suffer from the problems associated with the traditional approaches based on replicating the file server as a unit <ref> [4, 5, 6, 7, 8, 9] </ref>. Replicating the file server as a unit introduces additional overhead during failure-free operation due to the need to enforce consistency among the replicas. <p> Installing an HA-NFS node is complicated by the provisions taken to ensure independent failure modes of the servers and the disks in the node. Like HA-NFS, several reliable file servers attempt to provide reliability to NFS without changing the client implementation of the protocol <ref> [5, 6, 8] </ref>. HA-NFS is unique in that it uses impersonation to mask fail-over from the clients. <p> Like HA-NFS, several reliable file servers attempt to provide reliability to NFS without changing the client implementation of the protocol [5, 6, 8]. HA-NFS is unique in that it uses impersonation to mask fail-over from the clients. In the other systems <ref> [5, 6] </ref>, the clients continue to attempt to access the files from the failed server, therefore "hanging" until the user intervenes and remounts the file systems from an alternate source.
Reference: [6] <author> Alex Siegel, Kenneth Birman, and Keith Marzullo. Deceit: </author> <title> A flexible distributed file system. </title> <type> Techni 9 cal Report TR 89-1042, </type> <institution> Cornell University, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: HA-NFS does not suffer from the problems associated with the traditional approaches based on replicating the file server as a unit <ref> [4, 5, 6, 7, 8, 9] </ref>. Replicating the file server as a unit introduces additional overhead during failure-free operation due to the need to enforce consistency among the replicas. <p> Installing an HA-NFS node is complicated by the provisions taken to ensure independent failure modes of the servers and the disks in the node. Like HA-NFS, several reliable file servers attempt to provide reliability to NFS without changing the client implementation of the protocol <ref> [5, 6, 8] </ref>. HA-NFS is unique in that it uses impersonation to mask fail-over from the clients. <p> Like HA-NFS, several reliable file servers attempt to provide reliability to NFS without changing the client implementation of the protocol [5, 6, 8]. HA-NFS is unique in that it uses impersonation to mask fail-over from the clients. In the other systems <ref> [5, 6] </ref>, the clients continue to attempt to access the files from the failed server, therefore "hanging" until the user intervenes and remounts the file systems from an alternate source.
Reference: [7] <author> Uppaluru Premkumar, W. Kevin Wilkinson, and Hikyu Lee. </author> <title> Reliable servers in the JASMIN distributed system. </title> <booktitle> In Proceedings of the 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 105-112, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: HA-NFS does not suffer from the problems associated with the traditional approaches based on replicating the file server as a unit <ref> [4, 5, 6, 7, 8, 9] </ref>. Replicating the file server as a unit introduces additional overhead during failure-free operation due to the need to enforce consistency among the replicas.
Reference: [8] <author> Barbara Liskov, R. Gruber, P. Johnson, and L. Shrira. </author> <title> A replicated Unix file system. </title> <booktitle> In Proceedings of the First IEEE Workshop on Management of Replicated Data, </booktitle> <pages> pages 11-14, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: HA-NFS does not suffer from the problems associated with the traditional approaches based on replicating the file server as a unit <ref> [4, 5, 6, 7, 8, 9] </ref>. Replicating the file server as a unit introduces additional overhead during failure-free operation due to the need to enforce consistency among the replicas. <p> Installing an HA-NFS node is complicated by the provisions taken to ensure independent failure modes of the servers and the disks in the node. Like HA-NFS, several reliable file servers attempt to provide reliability to NFS without changing the client implementation of the protocol <ref> [5, 6, 8] </ref>. HA-NFS is unique in that it uses impersonation to mask fail-over from the clients. <p> In the other systems [5, 6], the clients continue to attempt to access the files from the failed server, therefore "hanging" until the user intervenes and remounts the file systems from an alternate source. The reliable file system of MIT <ref> [8] </ref> suggests the use of IP multicast addressing to solve this problem, but no implementation has been reported. When compared to impersonation, IP multicast increases the load on the replicas and introduces complexity, since all replicas must process the multicasts in the same order.
Reference: [9] <author> Richard G. Guy, John S. Heidemann, Wai Mak, Thomas W. Page, Jr., Gerald Popek, and Dieter Roth-meier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71, </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: HA-NFS does not suffer from the problems associated with the traditional approaches based on replicating the file server as a unit <ref> [4, 5, 6, 7, 8, 9] </ref>. Replicating the file server as a unit introduces additional overhead during failure-free operation due to the need to enforce consistency among the replicas. <p> Re-integrating a recovering server into the system can be expensive since it requires updating 7 the server's stale view of the replicated file sys-tem. To tolerate network partition, a replication-based system must support read and write quorums, incurring a substantial performance penalty. This penalty has led some systems <ref> [4, 9] </ref> to abandon quorums, allowing divergence in replicas during network partition. While this solution may be acceptable in many practical environments, it cannot be relied on in general and it exposes failures to the users.
Reference: [10] <author> Anupam Bhide, Elmootazbellah N. Elnozahy, Stephen Morgan, and Alex Siegel. </author> <title> A comparison between two reliable file servers. </title> <note> In preparation. </note>
Reference-contexts: Replicated file servers are also better suited for wide area networks where a client can access its files from the nearest replica, reducing network load during file read. A recent comparison study with the Deceit file server <ref> [10] </ref> shows that the performance benefits of HA-NFS and its relative simplicity come at the expense of a lack of flexibility. Both servers of an HA-NFS node must be physically close to each other because of the restriction on the SCSI bus length.
Reference: [11] <author> Dale L. Shipley, Joan D. Arnett, William A. Arnett, Steven D. Baumel, Anil Bhavnani, Chuenpu J. Chou, David L. Nelson, Maty Soha, and David H. Yamada. </author> <title> Distributed multiprocess transaction processing system and method. </title> <type> U.S. Patent No. 4819159, </type> <month> April </month> <year> 1989. </year>
Reference-contexts: When compared to impersonation, IP multicast increases the load on the replicas and introduces complexity, since all replicas must process the multicasts in the same order. Using dual-ported disks is also the basis of the reliable file system of Tolerant <ref> [11] </ref> and the Echo [12] reliable file system. Tolerant and HA-NFS are similar in that they rely on a non-dedicated backup to provide reliability against server failure. However, Tolerant relies on transaction semantics at the application level, and ongoing transactions are aborted during fail-over.
Reference: [12] <author> Andy Hisgen, Andrew Birrell, Timothy Mann, Michael Schroeder, and Garret Swart. </author> <title> Availability and consistency tradeoffs in the ECHO distributed file system. </title> <booktitle> In Proceedings of the 2nd Workshop on Workstation Operating Systems, </booktitle> <pages> pages 49-54, </pages> <year> 1989. </year>
Reference-contexts: When compared to impersonation, IP multicast increases the load on the replicas and introduces complexity, since all replicas must process the multicasts in the same order. Using dual-ported disks is also the basis of the reliable file system of Tolerant [11] and the Echo <ref> [12] </ref> reliable file system. Tolerant and HA-NFS are similar in that they rely on a non-dedicated backup to provide reliability against server failure. However, Tolerant relies on transaction semantics at the application level, and ongoing transactions are aborted during fail-over.
Reference: [13] <author> John H. Howard, Micheal L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyaranayanan, and Robert N. Sidebotham. </author> <title> Scale and performance in a distributed file system. </title> <journal> In ACM Transactions on Computer Systems, </journal> <pages> pages 51-81, </pages> <month> February </month> <year> 1988. </year> <month> 10 </month>
Reference-contexts: We are also considering adding extensions to HA-NFS operations to support consistency of concurrent file access in the presence of client caching. Finally, we plan to use the HA-NFS methodology to provide higher availability for stateful server protocols such as Andrew <ref> [13] </ref>.
References-found: 13

