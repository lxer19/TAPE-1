URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1995/TR49.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: -moeller, yagel-@cis.ohio-state.edu  
Title: Efficient Rasterization of Implicit Functions  
Author: Torsten Mller and Roni Yagel 
Address: Columbus, Ohio  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Implicit curves are widely used in computer graphics because of their powerful features for modeling and their ability for general function description. The most popular rasterization techniques for implicit curves are space subdivision and curve tracking. In this paper we are introducing an efficient curve tracking algorithm that is also more robust then existing methods. We employ the Predictor-Corrector Method on the implicit function to get a very accurate curve approximation in a short time. Speedup is achieved by adapting the step size to the curvature. In addition, we provide mechanisms to detect and properly handle bifurcation points, where the curve intersects itself. Finally, the algorithm allows the user to trade-off accuracy for speed and vice a versa. We conclude by providing examples that dem-onstrate the capabilities of our algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Allgower E. and S. Gnutzmann, </author> <title> Simplicial Pivoting for Mesh Generation of Implicitly Defined Surfaces, </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 8(4), </volume> <year> 1991, </year> <pages> pp. 30. </pages>
Reference: [2] <author> Arvo J. and K. Novins, </author> <booktitle> Iso-Contour Volume Rendering, Proceedings of 1994 Symposium On Volume Visualization. </booktitle>
Reference-contexts: Finally, if the curve enters and leaves the pixel in 4 between the same two neighboring sample points, this algorithm will not be able to register a sign change and therefore fail. For density functions, Arvo et. al. applied a numerical method known as the predictor-corrector method <ref> [2] </ref>. Their main goal is the rendering of iso-curves of medical data sets. In this paper we introduce an efficient and more robust predictor corrector method. <p> The Predictor-Corrector Method The predictor-corrector method is a well known numerical algorithm which has its origin in solving ordinary differential equations and bifurcation theory. Arvo and Novins <ref> [2] </ref> used a two dimensional standard method for extracting isocurves in a 2D medical image. Although the predictor corrector method offers ways to detect and properly deal with self intersecting curves and curves very close to themselves, Arvo and Novins did not explore these capabilities.
Reference: [3] <author> Baker G. and E. Overman, </author> <title> The Art of Scientific Computing, Draft Edition, </title> <publisher> The Ohio State Bookstore. </publisher>
Reference-contexts: Using a shortcut notation for the partial derivatives of , where is replaced by (and similarly for the partial derivative in y) the result can be written as (8) which is also proven by Baker and Overman <ref> [3] </ref>. Here stands for the sign plus or minus which represents the direction in which we continue to track the curve. In the case of the seed point we want to make sure, that we trace both directions.
Reference: [4] <author> Blinn J.F., </author> <title> A Generalization of Algebraic Surface Drawing, </title> <journal> ACM Transactions on Graphics, </journal> <volume> 1(3), </volume> <year> 1982, </year> <pages> pp. 235-256. </pages>
Reference-contexts: Another special class of implicit surfaces have density functions as their def ining functions. Density functions decrease exponentially with increasing distance to a certain center point. The models where these functions find usage usually arise in the study of physical phenomena, e.g. atom models. Blinn <ref> [4] </ref> was one of the first to try to visualize these surfaces on a computer . They became to be known as Blinns Blobby Model or Metaballs. Yet another model which is gaining importance is the discrete data set. <p> The second approach to rendering of implicit surfaces is to ray-trace them. Efficient ray-object intersection algorithms have been devised for algebraic surfaces [1 1], meta-balls <ref> [4] </ref>, and a class of functions for which Lipschitz constants can be ef ficiently computed [12][14]. The third approach to rendering implicit functions is to scan convert or discretize the function.
Reference: [5] <author> Bloomenthal J., </author> <title> Polygonization of Implicit Surfaces, </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5(4), </volume> <year> 1988, </year> <pages> pp. 341-356. </pages>
Reference: [6] <author> Bronstein I. N. and Semendjajew, K. A. </author> <title> Taschenbuch der Mathematik, </title> <address> BSB B.G.Teubner Verlagsgesellschaft, Leipzig, </address> <year> 1985. </year>
Reference-contexts: The mathematical definition of the curvature is , (18) where denotes the angel of the tangent with the x-axis and denotes the arc length between the two points. For implicit functions, C can be computed as (19) (See <ref> [6] </ref>). We compute first derivatives anyway for the Newton corrector, but would like to avoid computing second derivatives. Therefore, we use an approximation to the curvature that is based on Equation (18), where we use the current and previous point on the curve.
Reference: [7] <author> Chandler R.E., </author> <title> A Tracking Algorithm for Implicitly Defined Curves, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(2), </volume> <month> March </month> <year> 1988, </year> <pages> pp. 83-89. </pages>
Reference-contexts: A different way to continue a curve would be to evaluate the underlying function at the center of the neighboring pixels to find the one with the smallest absolute function value. This idea has been implemented by Jordan et. al. [9] and was improved by Chandler <ref> [7] </ref>. Since there are only eight neighboring pixels, eight function evaluations are the maximum needed to find the next pixel on the curve. <p> W e have chosen three very common functions without a bifurcation point (Figure 5) and three interesting functions with many bifurcation points (Figure 6). Some interesting statistics for each group of functions is summarized in Table 1 and compared to Chandlers algorithm <ref> [7] </ref>. The test cases where drawn onto a 5122 image. Drawing times, for all examples, was under 0.2 seconds on a Silicon Graphics Crimson (150Mhz R4400).
Reference: [8] <author> Foley J. D., A. van Dam, S. K. Feiner and J. F. Hughes, </author> <title> Computer Graphics Principles and Practice, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: One way to find the next pixel is based on digital difference analysis (DDA). A lot of work has been done in this field and the most popular algorithm applying this technique are Bresenham's and the midpoint line and circle drawing algorithms <ref> [8] </ref>. The rate of change in x and y is computed through fast integral updates of dx and dy, which are then used as decision variables to determine the next pixel center . This idea was generalized for algebraic curves by Hobby [13].
Reference: [9] <author> Jordan B.W., W.J. Lennon, and B.D. Holm, </author> <title> An Improved Algorithm for the Generation of Nonparametric Curves, </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. C-22, </volume> <year> 1973, </year> <pages> pp. 1052-1060. </pages>
Reference-contexts: A different way to continue a curve would be to evaluate the underlying function at the center of the neighboring pixels to find the one with the smallest absolute function value. This idea has been implemented by Jordan et. al. <ref> [9] </ref> and was improved by Chandler [7]. Since there are only eight neighboring pixels, eight function evaluations are the maximum needed to find the next pixel on the curve.
Reference: [10] <author> Hall M. and J.Warren, </author> <title> Adaptive Polygonization of Implicitly Defined Surfaces, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(6), </volume> <month> November </month> <year> 1990, </year> <pages> pp. 33-42. </pages>
Reference: [11] <author> Hanrahan P., </author> <title> Ray Tracing Algebraic Surfaces, </title> <journal> Computer Graphics (SIGGRAPH83 Proceedings), </journal> <volume> 17(3), </volume> <year> 1983, </year> <pages> pp. 83-90. </pages>
Reference: [12] <author> J.C. Hart. </author> <title> Ray Tracing Implicit Surfaces. WSU Technical Report EECS-93-014. Chapter in Design, Visualization, and Animation of Implicit Surfaces, </title> <booktitle> ACM SIGGRAPH 93 intermediate course notes, </booktitle> <editor> J. Bloomenthal and B. Wyvill, eds., </editor> <month> Aug. </month> <year> 1993. </year>
Reference: [13] <author> Hobby J.D., </author> <title> Rasterization of Nonparametric Curves, </title> <journal> ACM Transactions on Graphics, </journal> <volume> 9(3), </volume> <month> July </month> <year> 1990, </year> <pages> pp. 262-277. </pages>
Reference-contexts: The rate of change in x and y is computed through fast integral updates of dx and dy, which are then used as decision variables to determine the next pixel center . This idea was generalized for algebraic curves by Hobby <ref> [13] </ref>. One problem of this approach is that the inherent integer arithmetic can only be exploited for a small set of algebraic functions. Furthermore, this algorithm is not able to deal properly with self intersecting curves. Hobby assumes that these inter-section points are given by the user.
Reference: [14] <author> Kalra D. and A.H. Barr, </author> <title> Guaranteed Ray Intersections with Implicit Surfaces, </title> <journal> Computer Graphics (SIGGRAPH89 Proceedings), </journal> <volume> 23, </volume> <year> 1989, </year> <pages> pp. 297-306. 21 </pages>
Reference: [15] <author> Lorensen W. and H. Cline, </author> <title> Marching Cubes: A High Resolution 3D Surface Construction Algorithm, </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <year> 1987, </year> <pages> pp. 163-169. </pages>
Reference: [16] <author> Sederberg T.W., D.C.Anderson, and R.N.Goldman, </author> <title> Implicitization, Inversion, and Intersection of Planar Rational Cubic Curves, Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 31(1), </volume> <year> 1985, </year> <pages> pp. 89-102. </pages>
Reference-contexts: Algorithms for rendering 3D implicit surfaces can be classif ied into three groups: representation transforms, ray tracing, and surface tracking. The first approach tries to transform the problem from implicit surfaces to another representation which is easier to display such as polygon meshes [1][5][10][15] or parametric representations <ref> [16] </ref>. The second approach to rendering of implicit surfaces is to ray-trace them. Efficient ray-object intersection algorithms have been devised for algebraic surfaces [1 1], meta-balls [4], and a class of functions for which Lipschitz constants can be ef ficiently computed [12][14].

References-found: 16

