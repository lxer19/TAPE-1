URL: http://www.cs.umr.edu/techreports/95-10.ps
Refering-URL: http://www.cs.umr.edu/techreports/
Root-URL: 
Title: Formal Methods: How, When, and Why They are Used  
Author: BETH ARROWSMITH, BRUCE MCMILLIN, and RALPH WILKERSON 
Affiliation: University of Missouri Research Board.  
Note: 1 Supported in part by the National Science Foundation under Grant Numbers MSS-9216479 and CDA-9222827, and, in part, from the Air Force Office of Scientific Research under contract number F49620-92-J-0546 and F49620-93-1-0409, and, in part by a grant from the  
Date: October 1995  
Pubnum: Technical Report CSC-95-10  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ricky W. Butler and George B. Finelli. </author> <title> The infeasibility of quantifying the reliability of life-critical real-time software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 1 </volume> <pages> 3-12, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: This method of testing is good for any situation in which the rare, untested cases do not result in a hazardous or life-threatening failure. However, should the safety requirements for the program exceed less than 10E-7 errors per hour, the estimated necessary life-time testing could take centuries <ref> [1] </ref>. 2 Multi-version voting Multiple versions of the program are written. Each version outputs an answer. The most common result is picked as the "right" answer by the system.
Reference: [2] <author> D. Craigen, S. Gerhart, and T. Ralston. </author> <title> An international survey of industrial applications of formal methods. </title> <type> Technical Report NISTGCR 93/626, U.S. </type> <institution> Department of Commerce, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Formal methods have been advocated for over two decades, as a method of creating and debugging a programs [7] [9]. They are known to improve the quality of programs and to reduce the length of the debugging stage <ref> [2] </ref> [4]. The problem with formal methods is that they have not been widely adapted as a method of programming. Often the individuals who could most benefit from formal methods do not use them [8] [4].
Reference: [3] <author> Jim Gallagher. </author> <title> Vital lines: Phone net vulnerable, </title> <type> crash shows. </type> <institution> The St. Louis Post-Dispatch, page 1E, </institution> <month> June 9 </month> <year> 1991. </year>
Reference: [4] <author> A. Hall. </author> <title> Seven myths of formal methods. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 11-19, </pages> <year> 1990. </year>
Reference-contexts: However, formal methods are like any other proof in two significant ways: 1. mistakes can be made in the proof and 2. as evidenced by mathematical abstractions made real, such as those in engineering, the realization does not always behave as expected <ref> [4] </ref>. Despite the caveats of formal methods, they offer the most promise in developing safety-critical systems. Neither statistical testing nor multi-version voting provide sufficient confidence for safety critical programs, such as those involved with nuclear power plants or medical equipment. <p> Formal methods have been advocated for over two decades, as a method of creating and debugging a programs [7] [9]. They are known to improve the quality of programs and to reduce the length of the debugging stage [2] <ref> [4] </ref>. The problem with formal methods is that they have not been widely adapted as a method of programming. Often the individuals who could most benefit from formal methods do not use them [8] [4]. <p> to improve the quality of programs and to reduce the length of the debugging stage [2] <ref> [4] </ref>. The problem with formal methods is that they have not been widely adapted as a method of programming. Often the individuals who could most benefit from formal methods do not use them [8] [4]. This lack of use is not due to ignorance of the fundamental concepts of formal methods. Often the individuals simply choose not to apply what they know about formal methods. Part of the problem might be the lack of personal experience.
Reference: [5] <author> D. Helmbold and D. Luckham. </author> <title> Debugging Ada tasking programs. </title> <journal> IEEE Software, </journal> <volume> 2(2) </volume> <pages> 47-57, </pages> <year> 1985. </year>
Reference-contexts: Homework 2 Total class time for Homework 2: One week The second part of this introductory problem was to implement the solution to these proofs as a working CCSP program. 6 Formal Methods Discovery Training After this introduction, the program to be studied, the Gas Station Problem <ref> [5] </ref> was assigned. The students were asked to convert this problem into a formally verified program in three steps. The Gas Station Problem involves a normal virtual gas station. The assignment was as follows: For the following reactive system, design and implement a concurrent simulation of the system in ccsp.
Reference: [6] <author> C. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <year> 1978. </year>
Reference-contexts: Previous sessions of this course dealt with formal methods as a purely theoretical concept, an exercise for pencil and paper. The primary language of this course is CSP, a theoretical language designed for communicating between sequential processes <ref> [6] </ref>. The literature on CSP provides a fairly strong basis for formal methods [10] [12] [10]. CSP is the language on which ADA is based. CCSP was created to harness the students' knowledge of CSP [11]. <p> Dining Philosophers The dining philosophers are prevented from deadlock by the use of guards about the number of philosophers allowed to sit at the table at one time along with other assertions preventing two philosophers from entering the dining room at one time <ref> [6] </ref>.
Reference: [7] <author> C. A. R. Hoare. </author> <title> An axiomatic basis for computer programming. </title> <journal> Communications of the ACM, </journal> <volume> 12(10) </volume> <pages> 576-583, </pages> <year> 1969. </year>
Reference-contexts: These assertions describe the relations between various properties of the program and its variables <ref> [7] </ref>. Given a sufficient program-proof, a programmer could be assured of the correctness of the program. <p> Neither statistical testing nor multi-version voting provide sufficient confidence for safety critical programs, such as those involved with nuclear power plants or medical equipment. Formal methods have been advocated for over two decades, as a method of creating and debugging a programs <ref> [7] </ref> [9]. They are known to improve the quality of programs and to reduce the length of the debugging stage [2] [4]. The problem with formal methods is that they have not been widely adapted as a method of programming.
Reference: [8] <author> T. Janzen. </author> <title> Net news article in comp.software-eng, </title> <month> Dec. 15 </month> <year> 1993. </year>
Reference-contexts: The problem with formal methods is that they have not been widely adapted as a method of programming. Often the individuals who could most benefit from formal methods do not use them <ref> [8] </ref> [4]. This lack of use is not due to ignorance of the fundamental concepts of formal methods. Often the individuals simply choose not to apply what they know about formal methods. Part of the problem might be the lack of personal experience.
Reference: [9] <author> G.M. Levin and D. Gries. </author> <title> A proof technique for communicating sequential processes. </title> <journal> Acta Informatica, </journal> <volume> 15 </volume> <pages> 281-302, </pages> <year> 1981. </year>
Reference-contexts: Neither statistical testing nor multi-version voting provide sufficient confidence for safety critical programs, such as those involved with nuclear power plants or medical equipment. Formal methods have been advocated for over two decades, as a method of creating and debugging a programs [7] <ref> [9] </ref>. They are known to improve the quality of programs and to reduce the length of the debugging stage [2] [4]. The problem with formal methods is that they have not been widely adapted as a method of programming.
Reference: [10] <author> H. Lutfiyya, M. Schollmeyer, and B. McMillin. </author> <title> Formal generation of executable assertions for application-oriented fault tolerance. </title> <institution> UMR Department of Computer Science Technical Report Number CSC 92-15, </institution> <year> 1992. </year>
Reference-contexts: The primary language of this course is CSP, a theoretical language designed for communicating between sequential processes [6]. The literature on CSP provides a fairly strong basis for formal methods <ref> [10] </ref> [12] [10]. CSP is the language on which ADA is based. CCSP was created to harness the students' knowledge of CSP [11]. CCSP compiles a subset of CSP code to C code, allowing CSP to be run on any BSD UNIX machine. <p> The primary language of this course is CSP, a theoretical language designed for communicating between sequential processes [6]. The literature on CSP provides a fairly strong basis for formal methods <ref> [10] </ref> [12] [10]. CSP is the language on which ADA is based. CCSP was created to harness the students' knowledge of CSP [11]. CCSP compiles a subset of CSP code to C code, allowing CSP to be run on any BSD UNIX machine. <p> In CCSP, these variables can be explicitly set during a communication, as in thereotical CSP, or they may be set implicitly. The implicit setting allows CCSP to maintain its formal verification qualities using functions from HAA (History of Auxiliary Variable) Verification System <ref> [10] </ref> as a process A sends to every variable changed since the last communication to a similar process B (and visa versa). This information exchange is automatic and hidden from the programmer, allowing the programmer to concentrate on the information, rather than on the retrieval of the global variable information.
Reference: [11] <author> B. McMillin and E. Arrowsmith. </author> <title> How to program in CCSP. User Manual 93-30, </title> <institution> University of MO - Rolla, Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: The literature on CSP provides a fairly strong basis for formal methods [10] [12] [10]. CSP is the language on which ADA is based. CCSP was created to harness the students' knowledge of CSP <ref> [11] </ref>. CCSP compiles a subset of CSP code to C code, allowing CSP to be run on any BSD UNIX machine. CSP is different from many computer languages in that a considerable portion of its grammar is concerned with interprocess communication. <p> CCSP Tutorial After the month of theory, the class was given the CCSP manual and a one-day tutorial. During the tutorial, CCSP was presented as a language in which the students could program distributed processes in an environment supportive to formal methods. 6 <ref> [11] </ref> At the end of the presentation, the presenter explained that she wanted to know: 3 Computer Science 485 4 The student audited the class 5 The student had not turned in the homework assignment studied. 6 The CCSP tutorial and the CCSP manual were substantially different in style and content.
Reference: [12] <author> S. Owicki and D. Gries. </author> <title> An axiomatic proof technique for parallel programs I. </title> <journal> Acta Informatica, </journal> <volume> 6 </volume> <pages> 319-340, </pages> <year> 1976. </year>
Reference-contexts: The primary language of this course is CSP, a theoretical language designed for communicating between sequential processes [6]. The literature on CSP provides a fairly strong basis for formal methods [10] <ref> [12] </ref> [10]. CSP is the language on which ADA is based. CCSP was created to harness the students' knowledge of CSP [11]. CCSP compiles a subset of CSP code to C code, allowing CSP to be run on any BSD UNIX machine.
Reference: [13] <author> Walter J. Savitch. </author> <title> Pascal: An Introduction to the Art and Science of Programming. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <address> 2nd edition, </address> <year> 1987. </year>
Reference-contexts: The company takes nine hours to restore full service. AT&T blames a bug in their software.[3] 1.1 Cost of Failure The cost of faulty software is high. Finding these bugs is a significant part of programming <ref> [13] </ref>. In fact, should a program be too buggy, the suggested advice is often to throw out the program and start over. Even when all errors are removed from the program, the program can still become faulty. Many programs are later modified, potentially introducing new bugs into the equation.
Reference: [14] <author> M. Schollmeyer, H. Luttfiyya, and B. McMillin. </author> <title> An algorithm for generating executable assertions for fault tolerance. </title> <institution> UMR Department of Computer Science Technical Report Number CSC 92-01, </institution> <year> 1992. </year>
Reference-contexts: Mutual exclusion is maintained through the use of flags, one for each client, indicating whether either was using the critical section <ref> [14] </ref>. Dining Philosophers The dining philosophers are prevented from deadlock by the use of guards about the number of philosophers allowed to sit at the table at one time along with other assertions preventing two philosophers from entering the dining room at one time [6].
Reference: [15] <author> Nancy Stern and Robert A. Stern. </author> <title> Structured COBOL Programming. </title> <publisher> John Wiley and Sons, Inc., </publisher> <address> 7th edition, </address> <year> 1994. </year> <month> 15 </month>
Reference-contexts: Many programs are later modified, potentially introducing new bugs into the equation. Popular doctrine recommends that comments be used to provide program documentation, to aid debugging and to provide an informal description of a program's specification <ref> [15] </ref>. Good comments improve readability, making programs easier to maintain and to understand. However, comments can also mislead. Should a comment incorrectly describe a program's behavior, this fault, or programming bug, might only be discovered after a program failure during real world testing.
Reference: [16] <author> David F. etc. Vouk, Mladen A. McAllister. </author> <title> Analysis of faults detected in a large-scale multiversion software development experiment. </title> <booktitle> Proceedings IEEE/AIAA/NASA 9th Digital Avionics Systems Conference, </booktitle> <pages> pages 378-385, </pages> <year> 1990. </year> <month> 16 </month>
Reference-contexts: Nor is this unlikely to occur. One multi-version program experiment found that only 20% of the faults found occurred in more than one program, but of that 20%, some existed in over half of the program versions <ref> [16] </ref>. 2 Exhaustive testing of every possible input is often not possible. One would need to test for any possible coincidence of events, which for any large program violates reasonable time constraints. 2 Formal Methods The specification of a program, or its intended actions, can be described by assertions.
References-found: 16

