URL: http://www.daimi.aau.dk/~mis/gdtbec.ps
Refering-URL: http://www.daimi.aau.dk/~mis/papers.html
Root-URL: http://www.daimi.aau.dk
Email: fklarlund,misg@daimi.aau.dk  
Title: Graphs and Decidable Transductions based on Edge Constraints (Extended Abstract)  
Author: Nils Klarlund Michael I. Schwartzbach 
Address: Ny Munkegade, DK-8000 Arhus, Denmark  
Affiliation: Aarhus University, Department of Computer Science,  
Note: Proc. CAAP'94, pages 187-201.  
Abstract: We give examples to show that not even c-edNCE, the most general known notion of context-free graph grammar, is suited for the specification of some common data structures. To overcome this problem, we use monadic second-order logic and introduce edge constraints as a new means of specifying a large class of graph families. Our notion stems from a natural dichotomy found in programming practice between ordinary pointers forming spanning trees and auxiliary pointers cutting across. Our main result is that for certain transformations of graphs definable in monadic second-order logic, the question of whether a graph family given by a specification A is mapped to a family given by a specification B is decidable. Thus a decidable Hoare logic arises. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Courcelle. </author> <title> Graph rewriting: an algebraic and logic approach. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 193-242. </pages> <publisher> Else-vier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Graphs are complicated objects to describe. Thus various grammars and logics have emerged for their representation, see the chapter by Courcelle <ref> [1] </ref>. The monadic second-order logic of graphs (M2L-G) allows a very large class of graph families to be described. The first-order terms of the logic denote nodes. The second-order terms denote sets of nodes. Nodes and edges are related by built-in predicates.
Reference: 2. <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I. Recognizable sets of finite graphs. </title> <journal> Information and computation, </journal> <volume> 85 </volume> <pages> 12-75, </pages> <year> 1990. </year>
Reference-contexts: Some authors consider logics that comprise quantification over edges. For these logics, a fundamental result is that a family of graphs allows a decidable M2L if and only if the family is specified by a hyperedge-replacement grammar <ref> [2] </ref>. Such grammars constitute a natural generalization of context-free grammars for string languages. ? The author is supported by a fellowship from the Danish Research Council. ?? The author is partially supported by the BRICS Center under the Danish Research Foundation.
Reference: 3. <author> B. Courcelle. </author> <title> Monadic second-order definable graph transductions. </title> <editor> In J.C. Raoult, editor, </editor> <booktitle> CAAP '92, Colloquium on Trees in Algebra and Programming, </booktitle> <volume> LNCS 581, </volume> <pages> pages 124-144. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: For program correctness, we would use Hoare logic to show that the store transformations leave the graph specifications satisfied. In this paper we consider restricted graph transformations, called transduc-tions, which are based on the method of semantic interpretation [7] and studied in <ref> [3] </ref>. Given logical graph specifications A and B and a transduction, we address the problem of verifying what we call transductional correctness: for any graph satisfying A, any graph resulting from the transduction satisfies B. <p> The resulting class of graph families thus definable is called EC. We show that the classes c-edNCE and EC are incomparable. We next introduce a class of transductions. They are formulated in M2L and are similar to the ones considered in <ref> [3] </ref>. We use extra logical variables to model edges that are followed, deleted, or added during the transformation of the graph. Our main result is that the transduction problem is decidable for EC.
Reference: 4. <author> J. Engelfriet. </author> <title> A characterizarion of context-free NCE graph languages by monadic second-order logic on trees. </title> <editor> In H. Ehrig, H.J. Kreowski, and G. Rozenberg, editors, </editor> <booktitle> Graph grammars and their applications to computer science, 4th International Workshop, </booktitle> <volume> LNCS 532, </volume> <pages> pages 311-327. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: An even larger class of context-free grammars is known as c-edNCE. The monadic logic of graph families thus given is undecidable, but certain other questions, such a non-emptiness of a specification, are decidable, see <ref> [4] </ref>. For programming purposes, we would like to describe common data structures found in the store such as trees and doubly-linked lists. Indeed, this is possible within the framework of decidable formalisms as e.g. hyperedge-replacement grammars. Many other graph shapes are not representable. <p> Instead we shall use a result by Engelfriet that these languages are exactly the images of trees under functions definable in monadic second-order logic <ref> [4] </ref>. The following definition is from [4] (but changed as to allow loops in graphs): Let fl 1 and fl 2 be alphabets. <p> Instead we shall use a result by Engelfriet that these languages are exactly the images of trees under functions definable in monadic second-order logic <ref> [4] </ref>. The following definition is from [4] (but changed as to allow loops in graphs): Let fl 1 and fl 2 be alphabets. <p> f (G) 2 GR (fl 2 ) is given by G 0 V = fv 2 G V j there is exactly one v 2 fl V 1 such that G * OE v (src 7! v)g G 0 E (For simplicity, we ignore roots in this section.) Theorem 3. <ref> [4] </ref> A language of graphs is c-edNCE if and only if it is the image of an M2L-definable function f : GR (fl 1 ) ! GR (fl 2 ) applied to the set of directed trees over fl 1 . Such a language is then said to be f-definable. <p> Such a language is then said to be f-definable. Theorem 4. <ref> [4] </ref> It is decidable whether a function f defines a finite language of graphs. Lemma 5. [4] The class of M2L-definable functions is closed under composition. Now fix fl V T = ff 1 ; f 2 ; ag. <p> Such a language is then said to be f-definable. Theorem 4. <ref> [4] </ref> It is decidable whether a function f defines a finite language of graphs. Lemma 5. [4] The class of M2L-definable functions is closed under composition. Now fix fl V T = ff 1 ; f 2 ; ag.
Reference: 5. <author> N. Klarlund and M. Schwartzbach. </author> <title> Graph types. </title> <booktitle> In Proc. 20th Symp. on Princ. of Prog. Lang., </booktitle> <pages> pages 196-205. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: The first-order terms of the logic denote nodes. The second-order terms denote sets of nodes. Nodes and edges are related by built-in predicates. The M2L-G formalism is very well-suited for describing properties of some common data structures, see our earlier paper <ref> [5] </ref>. Some authors consider logics that comprise quantification over edges. For these logics, a fundamental result is that a family of graphs allows a decidable M2L if and only if the family is specified by a hyperedge-replacement grammar [2]. <p> The programming language provides assignment, dereference, allocation, deallocation, and limited forms of iterations based on regular walks. We show in [6] that the operational semantics is captured by transductions and that by the results in this paper the resulting Hoare logic on data structures is decidable. In <ref> [5] </ref>, we also used monadic second-order logic to reason about data structures as graphs, but we restricted ourselves to trees with auxiliary edges that are functionally determined by the backbone in terms of regular walks. 2 Rooted Graphs A graph alphabet fl consists of a finite set fl V of node <p> The expressive power of transductions goes beyond mere straight-line code, since regular control structures can be encoded in formulas <ref> [5] </ref>. 7 Transductional Correctnesse Let A be the free variables in the assertion A and let B be the free variables in the assertion B that are not already free in A. The problem of transductional correctness is: Given assertions A, B, and a transduction T .
Reference: 6. <author> N. Klarlund and M. Schwartzbach. </author> <title> Invariants as data types. </title> <type> Unpublished, </type> <year> 1993. </year>
Reference-contexts: The key idea is to distinguish between the bounded number of auxiliary edges that are explicitly manipulated by the transduction and the others, which are represented by a universal quantification in the logic. Our other work In an accompanying paper <ref> [6] </ref>, we outline a typing system for data structures and define a programming language. The typing information is expressed in a logic on the underlying recursive data types. The programming language provides assignment, dereference, allocation, deallocation, and limited forms of iterations based on regular walks. We show in [6] that the <p> accompanying paper <ref> [6] </ref>, we outline a typing system for data structures and define a programming language. The typing information is expressed in a logic on the underlying recursive data types. The programming language provides assignment, dereference, allocation, deallocation, and limited forms of iterations based on regular walks. We show in [6] that the operational semantics is captured by transductions and that by the results in this paper the resulting Hoare logic on data structures is decidable. <p> Note that the assertion does not eliminate extraneous s-edges from nodes other than the one marked H. In a programming language application these are avoided through elementary type-checking of the transductions that build graphs <ref> [6] </ref>. 4 Relations to Other Formalisms It is interesting to compare the expressive power of this graph specification formalism with those of other proposals. In particular we show in this section that the set of trees with unrestrained auxiliary edges is not representable as a context-free graph grammar.
Reference: 7. <author> M. Rabin. </author> <title> A simple method for undecidability proofs and some applications. </title> <booktitle> In Logic, Methodology and Philosophy of Science II, </booktitle> <pages> pages 58-68. </pages> <publisher> North-Holland, </publisher> <year> 1965. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: For program correctness, we would use Hoare logic to show that the store transformations leave the graph specifications satisfied. In this paper we consider restricted graph transformations, called transduc-tions, which are based on the method of semantic interpretation <ref> [7] </ref> and studied in [3]. Given logical graph specifications A and B and a transduction, we address the problem of verifying what we call transductional correctness: for any graph satisfying A, any graph resulting from the transduction satisfies B.
References-found: 7

