URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/dpetrou/www/papers/predict_prepage96.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/dpetrou/www/research.html
Root-URL: 
Title: Predictive State Restoration in Desktop Workstation Clusters  
Author: David Petrou Douglas P. Ghormley Thomas E. Anderson 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California, Berkeley  
Abstract: Though existing systems for sharing distributed resources in clusters of workstations are generally effective at recruiting idle resources, these systems often have a disruptive effect on desktop workstation users. Even when recruiting computing cycles from strictly idle workstations, a by-product of running foreign jobs is that the virtual memory pages of the original user's idle processes are flushed to disk and the workstation's file cache is disrupted. Consequently, users resuming work after an idle period experience delays while the system restores this state. This paper presents novel methods for minimizing the disruptions to desktop workstation users in a cluster environment while still maintaining a high utilization of the idle resources of the cluster. Disruptions to the user are reduced by identifying the memory-resident state of the user's processes when the machine becomes idle and then actively restoring that state before the user returns, using measurements of past activity patterns to predict when that user is likely to return. Trace-driven simulations show that this method can predict a user's arrival up to 43% of the time while still recruiting 83% of a workstation's idle cycles.
Abstract-found: 1
Intro-found: 1
Reference: [Anderson et al. 1995] <author> T. E. Anderson, D. E. Culler, D. A. Patterson, </author> <title> and the NOW Team. "A Case for NOW (Networks of Workstations)". </title> <booktitle> IEEE Micro, </booktitle> <month> February </month> <year> 1995. </year>
Reference-contexts: With better prediction, we can lower user interruptions and raise the availability of workstations as shared resources. 6.2 Integration with Resource Sharing Package We will integrate our system with GLUnix, the global operating system support layer of the Berkeley NOW project <ref> [Anderson et al. 1995] </ref>. Being the primary developers for GLUnix, we have had much pressure to integrate this system from desktop workstation users experiencing state restoration delays. 6.3 Eliminating State Restoration Restrictions During the discussion of the prepaging prototype, we presented some limitations with our approach.
Reference: [Arpaci et al. 1995] <author> R. Arpaci, A. Dusseau, A. Vahdat, L. Liu, T. Anderson, and D. Patterson. </author> <title> "The Interaction of Parallel and Sequential Workload on a Network of Workstations". </title> <booktitle> In Proceedings of Performance/Sigmetrics, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Only then is the machine used to run foreign jobs. 4.3 Evaluation We evaluated the accuracy of the prediction algorithm using tracedriven simulations, assuming an infinite load of foreign jobs. The traces used were taken directly from <ref> [Arpaci et al. 1995] </ref> and were generated over the course of a month on 53 assorted workstations in the Computer Science Division at U.C. Berkeley. The original traces were of varying quality and duration, so we selected 20 which had the longest duration and fewest gaps in the trace data. <p> Encouraging participation in a cluster requires reducing perceived disruptions to the user caused by foreign jobs. 8 <ref> [Arpaci et al. 1995] </ref> examines the interaction of parallel and sequential workloads with desk-top workstation users in a cluster environment. In their traced environment they showed that, depending on the definition of idleness, 60 to 70% of the desktop workstations were available even in the middle of the day.
Reference: [Baker et al. 1991] <author> M. Baker, J. Hartman, M. Kupfer, K. Shirriff, and J. Ousterhout. </author> <title> "Measurements of a Distributed File System". </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 198-212, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Then, as an approximation of restoring the file cache, the library replays the accesses to those files. Since most file accesses in a UNIX environment sequentially read or write the entire file <ref> [Baker et al. 1991] </ref>, the system can be simplified by only storing recently accessed filenames rather than each individual access to the file.
Reference: [Brady 1986] <author> J. Brady. </author> <title> "A Theory of Productivity in the Creative Process". </title> <booktitle> In IEEE CG&A, </booktitle> <month> May </month> <year> 1986. </year>
Reference-contexts: It should be the goal of any cluster resource sharing system to minimize the disruptions to users of desktop workstations. Studies have shown that user productivity increases significantly when system response is consistent, even if on average the response is low <ref> [IBM 1982, Brady 1986] </ref>. Consequently, a single large disturbance followed by high responsiveness is less disruptive to a user's productivity than many small unpredictable disturbances.
Reference: [Bricker et al. 1991] <author> A. Bricker, M. Litzkow, and M. Livny. </author> <title> "Condor Technical Summary". </title> <type> Technical Report 1069, </type> <institution> University of Wisconsin|Madison, Computer Science Department, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: In response to this, many workstation cluster systems have been built which allow users to run jobs on other idle workstations in the cluster. These systems include PVM [Sunderam 1990], Condor <ref> [Bricker et al. 1991] </ref>, LSF [Zhou 1992], Locus [Walker et al. 1983], Butler [Nichols 1987], and Sprite [Douglis & Ousterhout 1991]. However, using an idle workstation to run foreign jobs can negatively impact the user of the workstation when that user resumes work on the workstation. <p> The prediction algorithm and an evaluation of it are presented in Section 4. When the user leaves the workstation, the Prediction Engine first signals the State Restoration Libraries to snapshot the virtual memory and file cache state and then notifies the cluster resource sharing system (e.g., Condor <ref> [Bricker et al. 1991] </ref>, LFS [Zhou 1992]) that the machine is available to foreign jobs. <p> Previous systems such as Condor <ref> [Bricker et al. 1991] </ref>, LSF [Zhou 1992], Sprite [Douglis & Ousterhout 1991], and Butler [Nichols 1987], attempt to reduce interruptions to the user by introducing a recruitment threshold, or timeout, before using the machine.
Reference: [Douglis & Ousterhout 1991] <author> F. Douglis and J. Ousterhout. </author> <title> "Transparent Process Migration: Design Alternatives and the Sprite Implementation". </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-85, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: In response to this, many workstation cluster systems have been built which allow users to run jobs on other idle workstations in the cluster. These systems include PVM [Sunderam 1990], Condor [Bricker et al. 1991], LSF [Zhou 1992], Locus [Walker et al. 1983], Butler [Nichols 1987], and Sprite <ref> [Douglis & Ousterhout 1991] </ref>. However, using an idle workstation to run foreign jobs can negatively impact the user of the workstation when that user resumes work on the workstation. <p> Previous systems such as Condor [Bricker et al. 1991], LSF [Zhou 1992], Sprite <ref> [Douglis & Ousterhout 1991] </ref>, and Butler [Nichols 1987], attempt to reduce interruptions to the user by introducing a recruitment threshold, or timeout, before using the machine. This simple technique eliminates most false starts of the system and avoids interrupting the user after brief idle times.
Reference: [Feder et al. 1992] <author> M. Feder, N. Merhav, and M. Gutman. </author> <title> "Universal Prediction of Individual Sequences". </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 38(4) </volume> <pages> 1258-1270, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: This is precisely what compression algorithms are designed to do, though in a different context. The theoretical basis for using compression algorithms for prediction is presented in <ref> [Feder et al. 1992] </ref>. Adapting a compression algorithm such as Ziv-Lempel [Ziv & Lempel 1978] may perform a better job at detecting workstation usage patterns than the technique described earlier.
Reference: [Ghormley et al. 1996] <author> D. P. Ghormley, D. Petrou, and T. E. Anderson. "SLIC: </author> <title> Secure Loadable Interposition Code". </title> <month> May </month> <year> 1996. </year> <note> Submitted for publication. A draft can be downloaded from http://now.cs.berkeley.edu/Slic/. </note>
Reference-contexts: In Solaris, since the vast majority of applications dynamically link with the C library 1 , this will apply to most user applications. An alternative approach would be to insert the state restoration code into the kernel at the system call level using a system such as Slic <ref> [Ghormley et al. 1996] </ref>. Upon initialization, the state restoration code registers a signal handler for communication with the Prediction Engine. <p> The second option is to use the Solaris /proc file system to intercept the file system related system calls. The third option is to use a system such as Slic <ref> [Ghormley et al. 1996] </ref> to insert the state restoration code into the kernel at the system call interface. 3.2 Evaluation To quantify the delays that users experience due to virtual memory paging, we measured the performance of the standard Solaris 2.4 virtual memory system running on a 50 MHz Sparc 20 <p> Being the primary developers for GLUnix, we have had much pressure to integrate this system from desktop workstation users experiencing state restoration delays. 6.3 Eliminating State Restoration Restrictions During the discussion of the prepaging prototype, we presented some limitations with our approach. Slic <ref> [Ghormley et al. 1996] </ref>, a package for adding extensions to modern operating systems may be used to provide more robust prepaging.
Reference: [IBM 1982] <author> IBM. </author> <title> "The Economic Value of Rapid Response Time". </title> <booktitle> In GE20-0752-0, </booktitle> <month> November </month> <year> 1982. </year>
Reference-contexts: It should be the goal of any cluster resource sharing system to minimize the disruptions to users of desktop workstations. Studies have shown that user productivity increases significantly when system response is consistent, even if on average the response is low <ref> [IBM 1982, Brady 1986] </ref>. Consequently, a single large disturbance followed by high responsiveness is less disruptive to a user's productivity than many small unpredictable disturbances.
Reference: [Nichols 1987] <author> D. Nichols. </author> <title> "Using Idle Workstations in a Shared Computing Environment". </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 5-12, </pages> <month> November </month> <year> 1987. </year> <month> 10 </month>
Reference-contexts: In response to this, many workstation cluster systems have been built which allow users to run jobs on other idle workstations in the cluster. These systems include PVM [Sunderam 1990], Condor [Bricker et al. 1991], LSF [Zhou 1992], Locus [Walker et al. 1983], Butler <ref> [Nichols 1987] </ref>, and Sprite [Douglis & Ousterhout 1991]. However, using an idle workstation to run foreign jobs can negatively impact the user of the workstation when that user resumes work on the workstation. <p> Previous systems such as Condor [Bricker et al. 1991], LSF [Zhou 1992], Sprite [Douglis & Ousterhout 1991], and Butler <ref> [Nichols 1987] </ref>, attempt to reduce interruptions to the user by introducing a recruitment threshold, or timeout, before using the machine. This simple technique eliminates most false starts of the system and avoids interrupting the user after brief idle times.
Reference: [Pfister 1995] <author> G. F. Pfister. </author> <title> In Search of Clusters. </title> <publisher> Prentice Hall, Inc., </publisher> <year> 1995. </year>
Reference-contexts: However, none of these systems make an effort to predict when the user will return once the machine has been used to run foreign jobs, nor do they attempt to actively restore the state of the user's processes. <ref> [Pfister 1995] </ref> discusses the trade-offs between machine room versus desktop clusters, warning designers that desktop workstation users must not be inconvenienced by sharing their resources. Experience at DEC SRC and with Sprite and U.C.
Reference: [Sunderam 1990] <author> V. Sunderam. </author> <title> "PVM: A Framework for Parallel Distributed Computing". </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: In response to this, many workstation cluster systems have been built which allow users to run jobs on other idle workstations in the cluster. These systems include PVM <ref> [Sunderam 1990] </ref>, Condor [Bricker et al. 1991], LSF [Zhou 1992], Locus [Walker et al. 1983], Butler [Nichols 1987], and Sprite [Douglis & Ousterhout 1991]. However, using an idle workstation to run foreign jobs can negatively impact the user of the workstation when that user resumes work on the workstation.
Reference: [Theimer et al. 1985] <author> M. Theimer, K. Landtz, and D. Cheriton. </author> <title> "Preemptable Remote Execution Facilities for the V System". </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference: [Walker et al. 1983] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> "The LOCUS Distributed Operating System". </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 49-70, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: In response to this, many workstation cluster systems have been built which allow users to run jobs on other idle workstations in the cluster. These systems include PVM [Sunderam 1990], Condor [Bricker et al. 1991], LSF [Zhou 1992], Locus <ref> [Walker et al. 1983] </ref>, Butler [Nichols 1987], and Sprite [Douglis & Ousterhout 1991]. However, using an idle workstation to run foreign jobs can negatively impact the user of the workstation when that user resumes work on the workstation.
Reference: [Zhou 1992] <author> S. Zhou. </author> <title> "LSF: load sharing in large-scale heterogeneous distributed systems". </title> <booktitle> In Proceedings of the Workshop on Cluster Computing, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: In response to this, many workstation cluster systems have been built which allow users to run jobs on other idle workstations in the cluster. These systems include PVM [Sunderam 1990], Condor [Bricker et al. 1991], LSF <ref> [Zhou 1992] </ref>, Locus [Walker et al. 1983], Butler [Nichols 1987], and Sprite [Douglis & Ousterhout 1991]. However, using an idle workstation to run foreign jobs can negatively impact the user of the workstation when that user resumes work on the workstation. <p> When the user leaves the workstation, the Prediction Engine first signals the State Restoration Libraries to snapshot the virtual memory and file cache state and then notifies the cluster resource sharing system (e.g., Condor [Bricker et al. 1991], LFS <ref> [Zhou 1992] </ref>) that the machine is available to foreign jobs. When the Prediction Engine predicts that the user is likely to return soon, or if the user returns unexpectedly, the Prediction Engine notifies the cluster resource sharing system that the machine is unavailable to foreign jobs. <p> Previous systems such as Condor [Bricker et al. 1991], LSF <ref> [Zhou 1992] </ref>, Sprite [Douglis & Ousterhout 1991], and Butler [Nichols 1987], attempt to reduce interruptions to the user by introducing a recruitment threshold, or timeout, before using the machine. This simple technique eliminates most false starts of the system and avoids interrupting the user after brief idle times.
Reference: [Ziv & Lempel 1978] <author> J. Ziv and A. Lempel. </author> <title> "Compression of Individual Sequences Via Variable Rate Coding". </title> <journal> In IEEE Transactions on Information Theory, </journal> <month> September </month> <year> 1978. </year> <title> 11 algorithm utilizing a recruitment threshold with no prediction facility. after 7 days of history. 12 algorithm performance for the top 20 machines using a low water mark of 20% and a high water mark of 50%. </title> <type> 13 </type>
Reference-contexts: This is precisely what compression algorithms are designed to do, though in a different context. The theoretical basis for using compression algorithms for prediction is presented in [Feder et al. 1992]. Adapting a compression algorithm such as Ziv-Lempel <ref> [Ziv & Lempel 1978] </ref> may perform a better job at detecting workstation usage patterns than the technique described earlier.
References-found: 16

