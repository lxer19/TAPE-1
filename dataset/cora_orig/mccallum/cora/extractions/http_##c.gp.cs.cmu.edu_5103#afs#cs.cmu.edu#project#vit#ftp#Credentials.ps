URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/vit/ftp/Credentials.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/vit/www/paper_abstracts/Credentials.html
Root-URL: http://www.cs.cmu.edu
Title: Truth vs Knowledge: Sufficient and complete: the specification of a component says everything a user
Keyword: Conventional software doctrine calls for component  
Address: Pittsburgh PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: March 1996  
Note: To appear in Proceedings of 8th International Workshop on Software Specificatin and Design,  specifications that are:  
Abstract: The Difference Between What a Component Does and What We Know It Does Abstract Conventional doctrine holds that specifications are suffi - cient, complete, static, and homogeneous. For system - level specifications, especially for software architectures, conventional doctrine often fails to hold. This can happen when properties other than functionality are critical, when not all properties of interest can be identified in advance, or when the specifications are expensive to create. That is, the conventional doctrine often fails for prac tical software components. Specifications for real software must be incremental, ex tensible, and heterogeneous. To support such speci fications, our notations and tools must be able to extend and manipulate structured specifications. In the UniCon architecture description language, we introduce credentials , a property-list form of specification that supports evolving heterogeneous specifications and their use with system-building and analysis tools. 
Abstract-found: 1
Intro-found: 1
Reference: [BarWing90] <author> Mario R. Barbacci and Jeannette M. Wing. </author> <title> A language for distributed applications. </title> <booktitle> Proc 1990 Intl Conf on Computer Languages, </booktitle> <pages> pp. 59-68. </pages>
Reference-contexts: Not only is much important information implicit, but users have no effective way to capture information they discover for future reference. As the specifications are extended, information about a property may be received from multiple sources; these must be reconciled <ref> [BarWing90] </ref>. Specifications of architectural components must be heterogeneous , because of the diversity of significant properties, as described in Section 2. It is unreason - able to expect a single notation to serve for all of them.
Reference: [Ben95] <author> Douglas W. Bennett. </author> <title> The promise of reuse. </title> <journal> Object Magazine , vol 4, </journal> <volume> no 8, </volume> <month> January </month> <year> 1995, </year> <pages> pp. 32-40. </pages>
Reference: [CBKA95] <author> Paul Clements, Len Bass, Rick Kazman, and Gregory Abowd. </author> <title> Predicting software Qual - ity by architecture-level evaluation. </title> <booktitle> In Proc Fifth International Conf on Software Quality, </booktitle> <month> October </month> <year> 1995 </year>
Reference-contexts: properties (e.g., are there loops in a data flow system?). 2.2 Extra-functional properties In addition to functionality and structure, architec - tural specifications must be capable of expressing ex - tra-functional properties related to performance, ca - pacity, environmental assumptions, and global prop - erties such as reliability and security <ref> [MCN92, Shaw85, CBKA95] </ref>. Many of these additional proper - ties are qualitative, so they may require different kinds of support from more formal specifications.
Reference: [DeL95] <author> DeLorme Mapping Company. </author> <note> WWW page describing MapExpert product. URL: http://www.delorme.com/catalog/mex.htm, 1995. </note>
Reference-contexts: The formal specifications familiar to the IWSSD com - munity are not the most common kind. More preva - lent are product descriptions such as the following, which specifies the interface between a software product and the environment required to run it <ref> [DeL95] </ref>. This specification deals with space and con formance to established standards. The functionality of the product is described (imprecisely) in associated prose and pictures. IBM or 100% IBM-compatible microcomputer with Intel 80386 microprocessor or higher or 100%- compatible processor.
Reference: [GAO95] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Architectural Mismatch, or Why its hard to build systems out existing parts. </title> <booktitle> Proc 17th International Conf on Software Engineering (ICSE-17), </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Different tools may depend on different properties, and some tools may generate new specification information [ICSE95]. Specifications of architectural components are intrinsically incomplete because system correctness de - pends not only on computational functionality but on other properties as noted above <ref> [Shaw85, GAO95] </ref>. Its impractical to expect full specifica tions of all these properties because of the prohibitive effort required to specify a wide variety of proper - ties, whether or not anyone will use the information. <p> Even with the best of good faith, component developers cannot describe all the incidental ways their components may interact with the entire environment. Garlan and colleagues analyze the implicit assumptions that interfered with one instance of attempted reuse <ref> [GAO95] </ref>. Not only is much important information implicit, but users have no effective way to capture information they discover for future reference. As the specifications are extended, information about a property may be received from multiple sources; these must be reconciled [BarWing90].
Reference: [ICSE95] <author> David Garlan. </author> <booktitle> Report of ICSE-17 Software Architecture Workshop , to appear ACM SIGSOFT Software Engineering Notes, </booktitle> <year> 1995. </year>
Reference-contexts: Software development environments should accommodate an open-ended collection of tools for construction and analysis. Different tools may depend on different properties, and some tools may generate new specification information <ref> [ICSE95] </ref>. Specifications of architectural components are intrinsically incomplete because system correctness de - pends not only on computational functionality but on other properties as noted above [Shaw85, GAO95].
Reference: [Jac94] <author> Daniel Jackson. </author> <note> Structuring Z Specifications with Views . Carnegie Mellon University Technical Report CMU-CS-94-126. </note>
Reference-contexts: Although com - plete ness is impractical, it is still appropriate to expect specifications for a common core of properties, and it is reasonable for a tool to require certain properties. Reasoning with partial specifications has already received some attention <ref> [Jac94, Per95] </ref>. Specifications of architectural components must be extensible , because developers discover new kinds of dependencies as they attempt to reuse indepen - dently-developed compo nents together.
Reference: [MCN92] <author> John Mylopoulos, Lawrence Chung, and Brian Nixon. </author> <title> Representing and Using Nonfunctional Requirements: A Process - Oriented Approach. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol 18, no 6, </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: properties (e.g., are there loops in a data flow system?). 2.2 Extra-functional properties In addition to functionality and structure, architec - tural specifications must be capable of expressing ex - tra-functional properties related to performance, ca - pacity, environmental assumptions, and global prop - erties such as reliability and security <ref> [MCN92, Shaw85, CBKA95] </ref>. Many of these additional proper - ties are qualitative, so they may require different kinds of support from more formal specifications.
Reference: [Per95] <author> Dewayne E. Perry. </author> <title> System Compositions and Shared Dependencies. </title> <type> Unpublished manuscript, </type> <month> January </month> <year> 1995. </year>
Reference-contexts: Although com - plete ness is impractical, it is still appropriate to expect specifications for a common core of properties, and it is reasonable for a tool to require certain properties. Reasoning with partial specifications has already received some attention <ref> [Jac94, Per95] </ref>. Specifications of architectural components must be extensible , because developers discover new kinds of dependencies as they attempt to reuse indepen - dently-developed compo nents together.
Reference: [PerWolf92] <author> Dewayne E. Perry and Alexander L. Wolf, </author> <title> Foundations for the study of software archi - tecture. </title> <booktitle> ACM SIGSOFT Software Engineering Notes , vol 17, </booktitle> <volume> no 4, </volume> <pages> pp. 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Architectural components and their specifications Software architecture deals with the overall structure and properties of software systems. The most com - mon architecture description languages (ADLs) support components, connectors, and other aspects of the system such as styles, constraints, or design ratio nale <ref> [ShawGar96, PerWolf92] </ref>. Although the issues raised here apply to all architectural elements, this discussion focuses on specifications of the com - ponents, which may be either primitive (i.e., written in a programming language) or composite (i.e., defined in the ADL).
Reference: [Shaw81] <author> Mary Shaw. </author> <title> When Is 'Good' Enough?: Evaluating and Selecting Software Metrics. In Software Metrics: An Analysis and Eval - uation, </title> <editor> A. Perlis, F. Sayward, and M. Shaw (eds), </editor> <publisher> MIT Press, </publisher> <year> 1981, </year> <pages> pp. 251-262. </pages>
Reference-contexts: As an added complication, the de - gree of precision in the specification may be influ - enced by the tradeoff between the costs and benefits of improved precision <ref> [Shaw81] </ref>. Although com - plete ness is impractical, it is still appropriate to expect specifications for a common core of properties, and it is reasonable for a tool to require certain properties. Reasoning with partial specifications has already received some attention [Jac94, Per95].
Reference: [Shaw 85] <author> Mary Shaw. </author> <title> What Can We Specify? Ques - tions in the domains of software speci fica-tions. </title> <booktitle> In Proc Third International Workshop on Software Specification and Design, </booktitle> <pages> pp. 214-215, </pages> <month> August </month> <year> 1985. </year>
Reference: [ShawGar96] <author> Mary Shaw and David Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: Architectural components and their specifications Software architecture deals with the overall structure and properties of software systems. The most com - mon architecture description languages (ADLs) support components, connectors, and other aspects of the system such as styles, constraints, or design ratio nale <ref> [ShawGar96, PerWolf92] </ref>. Although the issues raised here apply to all architectural elements, this discussion focuses on specifications of the com - ponents, which may be either primitive (i.e., written in a programming language) or composite (i.e., defined in the ADL).
Reference: [SDKRYZ95] <author> Mary Shaw, Robert DeLine, Daniel V. Klein, Theodore L. Ross, David M. Young, Gre - gory Zelesnik. </author> <title> Abstractions for Soft ware Architecture and Tools to Support Them. </title> <journal> IEEE Tr on Software Engineering , May 1995. </journal>
Reference-contexts: tools as new attribute values rules for resolving values for a given at tribute that are proffered by multiple sources invocation of analysis for checking creden - tials after code is modified, including invali - dation of properties whose values can no longer be confirmed The UniCon architecture description language <ref> [SDKRYZ95] </ref> supports the bare bones of this pro - posal. UniCon specifications are given in the form of property lists; the set of attributes is open-ended; and particular attributes are required for certain checks and tools.
Reference: [ZarWing95] <author> A.M. Zaremski and J.M. Wing, </author> <title> Specifi - cation Matching of Software Components. </title> <booktitle> Proc. of SIGSOFT Foundations of Software Engineering, </booktitle> <month> October </month> <year> 1995. </year> <title> Keywords: software architecture, specification, soft - ware analysis, extra-functional proper - ties, incremental specification, </title> <publisher> cre - dentials </publisher>
Reference-contexts: These can often be improved with new information. Invalidate specifications when appropriate. Modifications to a system definition or to the sources of derived information may render individual parts of a specification invalid. Search for components that partially match a partial specification, with an indication of the goodness of fit. <ref> [ZarWing95] </ref> Support checking, both that a component specification and its associated implementa - tion are consistent and that a configuration of components is well-formed. Support tools to make minor adaptations when minor mis - matches are detected. Support incremental checking for incremental specification. Support flexibility .
References-found: 15

