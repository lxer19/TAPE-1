URL: http://www.cs.rice.edu/~andras/ECAI/kosk.ps
Refering-URL: http://www.cs.rice.edu/~andras/ECAI/koskenniemi.html
Root-URL: 
Email: kimmo.koskenniemi@helsinki.fi  
Title: Finite-state morphology and information retrieval  
Author: Kimmo Koskenniemi 
Address: FIN-00014 University of Helsinki  
Affiliation: Department of General Linguistics  
Abstract: A source of potential systematic errors in information retrieval is identified and discussed. These errors occur when base-form reduction is applied with a (necessarily) finite dictionary. Formal methods for avoiding this error source are presented, along with some practical complexities met in its implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ronald M. Kaplan and Martin Kay, </author> <title> `Regular models of rule systems', </title> <journal> Computational Linguistics, </journal> <volume> 20(3), </volume> <pages> 331-378, </pages> <year> (1994). </year>
Reference-contexts: Kaplan and Kay proposed and implemented a scheme of cascaded finite-state transducers in 1980ies <ref> [1] </ref>. Koskenniemi designed his two-level model based on this work [7, 9, 5], and there is a host of full scale morphological analyzers available now, based on this framework.
Reference: [2] <author> Lauri Karttunen, </author> <title> `Lexicon compiler', </title> <type> Technical report, </type> <institution> Xerox, Palo Alto Research Center, California, </institution> <year> (1993). </year>
Reference-contexts: We tentatively assume that a relation R H can be expressed following such lines, and using e.g. the LEXC formalism (see <ref> [2] </ref> for more details). There is one serious reservation to this simple scheme. The regular expression used as the building block in the above construction is of the type: Y = X where X is an expression corresponding to a sizable finite-state machine.
Reference: [3] <author> Lauri Karttunen and Kenneth Beesley, </author> <title> `Two-level rule compiler', </title> <type> Technical Report ISTL-92-2, </type> <institution> Xerox, Palo Alto Research Center, California, </institution> <year> (1992). </year>
Reference-contexts: Later on Karttunen generalized this scheme into a model where more than two levels could be permitted, and where the lexicon is implemented directly as a bidirectional finite-state transducer <ref> [3, 4] </ref>. Their approach is followed here as the formal framework of the representation. 7 Fixed lexicon transducer The morphological analyzer using a fixed lexicon can, thus, be expressed in terms of a finite-state transducer, or a regular relation R. This relation is not one-to-one because word-forms may be ambiguous.
Reference: [4] <author> Lauri Karttunen, Ronald M. Kaplan, and Annie Zaenen, </author> <title> `Two-level morpholgy with composition', </title> <booktitle> in COLING-92, </booktitle> <pages> pp. 141-148, </pages> <year> (1992). </year>
Reference-contexts: Later on Karttunen generalized this scheme into a model where more than two levels could be permitted, and where the lexicon is implemented directly as a bidirectional finite-state transducer <ref> [3, 4] </ref>. Their approach is followed here as the formal framework of the representation. 7 Fixed lexicon transducer The morphological analyzer using a fixed lexicon can, thus, be expressed in terms of a finite-state transducer, or a regular relation R. This relation is not one-to-one because word-forms may be ambiguous.
Reference: [5] <author> Lauri Karttunen, Kimmo Koskenniemi, and Ronald Kaplan, </author> <title> `A compiler for two-level phonological rules', in Tools for Morphological Analysis, 1-61, Center for the Study of Language and Information, </title> <institution> Stanford University, California, </institution> <year> (1987). </year> <title> 1 As suggested by Pasi Tapanainen, (personal communication). Finite-state morphology and information retrieval 44 K. </title> <type> Koskenniemi </type>
Reference-contexts: Kaplan and Kay proposed and implemented a scheme of cascaded finite-state transducers in 1980ies [1]. Koskenniemi designed his two-level model based on this work <ref> [7, 9, 5] </ref>, and there is a host of full scale morphological analyzers available now, based on this framework. Later on Karttunen generalized this scheme into a model where more than two levels could be permitted, and where the lexicon is implemented directly as a bidirectional finite-state transducer [3, 4].
Reference: [6] <author> Lauri Karttunen and Todd Yampol, </author> <title> `Interactive finite-state calculus', </title> <type> Technical report, </type> <institution> Xerox, Palo Alto Research Center, California, </institution> <year> (1993). </year>
Reference-contexts: transducer R H which is com posed with the reversal of the fixed lexicon transducer: R C = (R L ffi (R H ) ) 10 Future work The scheme which was presented in this paper has been verified in a rather small scale using the Xerox Finite State Calculus <ref> [6] </ref>. It remains to be implemented with a full scale description of some example language. We have not discussed the full complexity of dealing with unknown keywords. More work is needed e.g. to elaborate general and comprehensive methods to construct the transducer R L for all types of languages.
Reference: [7] <author> Kimmo Koskenniemi, </author> <title> Two-level Morphology: A General Computational Model for Word-Form Recognition and Production, </title> <journal> Publications, </journal> <volume> No. </volume> <pages> 11, </pages> <institution> University of Helsinki, Department of General Linguistics, </institution> <year> 1983. </year>
Reference-contexts: Kaplan and Kay proposed and implemented a scheme of cascaded finite-state transducers in 1980ies [1]. Koskenniemi designed his two-level model based on this work <ref> [7, 9, 5] </ref>, and there is a host of full scale morphological analyzers available now, based on this framework. Later on Karttunen generalized this scheme into a model where more than two levels could be permitted, and where the lexicon is implemented directly as a bidirectional finite-state transducer [3, 4].
Reference: [8] <author> Kimmo Koskenniemi, `Finstems: </author> <title> A module for information retrieval', </title> <note> in Computational Morphosyntax: Report on Research 1981-84, </note> <editor> ed., Fred Karlsson, </editor> <address> 81-92, </address> <institution> University of Helsinki, Department of General Linguistics, Publications, No. </institution> <address> 13, Helsinki, </address> <year> (1985). </year>
Reference-contexts: E.g. the search stem generator for a Finnish would give the following results out of a noun "kauppa" (`a shop'): kauppa-kaupa-kauppo-kaupo It has proven to be possible to write such search stem generators for several languages, and some of them have been in production use for more than ten years <ref> [8] </ref>. The use of this method has no effect on the number of distinct word-forms in the so called inverted file. On the other hand, it monotonically improves the recall. It fails, however, to retrieve compounds where the key word is in any other position except the first.
Reference: [9] <author> Kimmo Koskenniemi, </author> <title> `Compilation of automata from morphological two-level rules', </title> <booktitle> in Papers from the Fifth Scandi-navian Conference on Computational Linguistics, </booktitle> <address> Helsinki, </address> <month> December 11-12, </month> <year> 1985, </year> <editor> ed., Fred Karlsson, </editor> <address> 143-149, </address> <institution> University of Helsinki, Department of General Linguistics, Publications, No. </institution> <address> 15, Helsinki, </address> <year> (1986). </year>
Reference-contexts: Kaplan and Kay proposed and implemented a scheme of cascaded finite-state transducers in 1980ies [1]. Koskenniemi designed his two-level model based on this work <ref> [7, 9, 5] </ref>, and there is a host of full scale morphological analyzers available now, based on this framework. Later on Karttunen generalized this scheme into a model where more than two levels could be permitted, and where the lexicon is implemented directly as a bidirectional finite-state transducer [3, 4].
Reference: [10] <author> Atro Voutilainen, </author> <title> `Experiments with heuristics', in Constraint Crammar: A Language-Independent System for Parsing Unrestricted Text, </title> <editor> eds., Fred Karlsson, Atro Voutilainen, Juha Heikkila, and Arto Anttila, </editor> <address> 293-314, </address> <publisher> Mouton de Gruyter, </publisher> <address> Berlin, New York, </address> <year> (1995). </year> <title> Finite-state morphology and information retrieval 45 K. </title> <type> Koskenniemi </type>
Reference-contexts: This problem is routinely approached by so called morphological heuristics, or morphological guessing. These are algorithms which try to deduce the possible base forms of the word-forms which could not be recognized by the main morphological analyzer (e.g. as part of the ENGCG parser of English <ref> [10] </ref>). In fact, this is roughly what the morphological analysis without a lexicon is, as introduced above.
References-found: 10

