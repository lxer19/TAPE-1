URL: http://robotics.eecs.berkeley.edu/~godbole/ais.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~godbole/ais.html
Root-URL: 
Email: lygeros,godbole,sastry@eecs.berkeley.edu  
Title: Simulation as a Tool for Hybrid System Design  
Author: John Lygeros, Datta Godbole Shankar Sastry 
Address: Berkeley, CA 94720  
Affiliation: Intelligent Machines and Robotics Laboratory Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: A case study of the use of simulation as a tool for design and validation of hybrid systems is presented. We use the Intelligent Vehicle Highway Systems (IVHS) architecture of [1], a system that involves both continuous state and discrete event controllers as our example of a hierarchical hybrid system. We point out that even though analytical methods do not exist for verification of hybrid control system, a simulation tool can be useful to (in)validate that the the hybrid system operates properly. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Varaiya, </author> <title> "Smart cars on smart roads: </title> <journal> prob lems of control," IEEE Transactions on Automatic Control, </journal> <volume> vol. AC-38, no. 2, </volume> <pages> pp. 195-207, </pages> <year> 1993. </year>
Reference-contexts: In the architecture outlined in <ref> [1] </ref> the system is organized in five layers (Figure 2). The top layer, called the network layer, is responsible for the flow of traffic on the entire highway system. Its task is to prevent congestion and maximize throughput by dynamic routing of traffic along the interconnected network of highways.
Reference: [2] <author> R. L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </author> <title> Hybrid Systems. </title> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction The term hybrid system has been used to describe a large and rich class of dynamical systems (see for example <ref> [2] </ref>). A typical system of this class is arranged in a hierarchy of two (or more) layers (Figure 1).
Reference: [3] <author> P. J. G. Ramadge and W. M. Wonham, </author> <title> "The con trol of discrete event dynamical systems," </title> <booktitle> Proceedings of IEEE, </booktitle> <volume> vol. Vol.77, no. 1, </volume> <pages> pp. 81-98, </pages> <year> 1989. </year>
Reference: [4] <author> A. Back, J. Guckenheimer, and M. Myers, </author> <title> "A dynamical simulation facility for hybrid systems," </title> <type> Tech. Rep. 92-6, </type> <institution> Cornell University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: There has been extensive work on the development of techniques for simulating general hierarchical hybrid systems (see e.g. <ref> [4] </ref> and [5]). Our work is based on a specific simulation package, SmartPath, developed for simulation of automated vehicles in an IVHS.
Reference: [5] <author> L. Tavernini, </author> <title> "Differential automata and their simulators," Nonlinear Analysis, </title> <journal> Theory, Methods and Applications, </journal> <volume> vol. 11(6), </volume> <pages> pp. 665-683, </pages> <year> 1987. </year>
Reference-contexts: There has been extensive work on the development of techniques for simulating general hierarchical hybrid systems (see e.g. [4] and <ref> [5] </ref>). Our work is based on a specific simulation package, SmartPath, developed for simulation of automated vehicles in an IVHS.
Reference: [6] <author> B. S. Y. Rao and P. Varaiya, </author> <title> "Roadside intelli gence for flow control in an IVHS," </title> <journal> Transportation Research - C, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 49-72, </pages> <year> 1994. </year>
Reference-contexts: As a consequence the commands it issues are also in aggregate form and are addressed to all the vehicles in the link. A typical command might be "30% of the vehicles going to the next exit change lane now". <ref> [6] </ref> provides details of a possible link layer design. The next level of hierarchy below the link layer is the coordination layer. It's task is to coordinate the operation of platoons with their neighbors.
Reference: [7] <author> A. Hsu, F. Eskafi, S. Sachs, and P. Varaiya, </author> <title> "Pro tocol design for an automated highway system," Discrete Event Dynamic Systems, </title> <journal> vol. </journal> <volume> 2, no. 1, </volume> <pages> pp. 183-206, </pages> <year> 1994. </year>
Reference-contexts: The design of <ref> [7] </ref> uses protocols, in the form of finite state machines, to organize the maneuvers in a systematic way. They receive the commands of the link layer and aggregated sensor information from the individual vehicles (of the form "there is a vehicle in the adjacent lane").
Reference: [8] <author> D. N. Godbole and J. Lygeros, </author> <title> "Longitudinal con trol of the lead car of a platoon," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 398-402, </pages> <year> 1994. </year>
Reference-contexts: Its task is to receive the coordination layer commands and translate them to throttle, steering and brake input for the actuators on the vehicle. For this purpose it utilizes a number of continuous time feedback control laws (See <ref> [8] </ref> 1 Organization of traffic in platoons implies that, at any moment of time, an automated vehicle is either a leader (lead vehicle of a platoon), a follower or a free agent (single vehicle platoon). and references therein) that use the sensor readings to calculate the actuator inputs required for a <p> Similar crashes have been observed crashes during lane change from a fast to a slow lane. Joining a decelerating platoon The feedback control law for `join' maneuver is designed in two steps in <ref> [8] </ref>. In the first step, an open loop trajectory is calculated based on the assumption that the platoon in front will travel at constant velocity during the maneuver. In the second step, a feedback control law is used to asymptotically track this desired trajectory.
Reference: [9] <author> J. Lygeros and D. N. Godbole, </author> <title> "An interface be tween continuous and discrete-event controllers for vehicle automation," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 801-805, </pages> <year> 1994. </year>
Reference-contexts: The design of the interface should be done in a way that facilitates the verification of the combined system. In our example two interfaces are needed, to provide interaction between the coordination, regulation and link layers. <ref> [9] </ref> describes a possible design for the coordination-regulation interface. The proposed interface is a finite state machine whose transitions depend upon the commands from the coordination layer, the readings of the sensors (physical layer responses) and the state of the continuous controllers. It plays a dual role. <p> However, the actual trajectory will deviate from the desired one if the limits of the actuators (throttle and brake) are reached. To avoid this possibility, the interface aborts the maneuver when it detects the danger of actuator saturation (see <ref> [9] </ref>). After aborting the maneuver the system should find itself in a position from which it can continue safely under the AICC lead control law. The simulation indicates that under extreme conditions this may not be true and `join' maneuver may cause a major hazard.
Reference: [10] <author> F. Eskafi, D. Khorramabadi, and P. Varaiya, "Smartpath: </author> <title> An automated highway system simulator," </title> <type> Tech. Rep. </type> <note> PATH Technical Note UCB-ITS-94-4, </note> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: Therefore the only possible way of testing the design is by simulation. The next section describes how this idea was applied to the IVHS problem. 3 SmartPath Simulation In order to test the performance of the combined system, a dedicated simulator, called SmartPath <ref> [10] </ref>, was developed. The core of the simulator was developed by Farokh Eskafi and its capabilities were subsequently extended by other researchers. The simulation language CSIM was used as the backbone for the platform. It provides all the necessary message passing between and within the layers of the architecture.
References-found: 10

