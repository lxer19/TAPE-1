URL: http://www.cs.gatech.edu/fac/Ellen.Zegura/papers/git-cc-97-31.ps.gz
Refering-URL: http://www.cs.gatech.edu/fac/Ellen.Zegura/pubs.html
Root-URL: 
Email: fbobby,calvert,ewzg@cc.gatech.edu  
Title: Self-Organizing Wide-Area Network Caches Samrat Bhattacharjee (Corresponding Author)  
Author: Kenneth L. Calvert Ellen W. Zegura 
Note: This work was supported in part by DARPA and NSF Careers Award MIP-9502669.  
Web: GIT-CC-97/31  
Address: Atlanta, GA 30332-0280  Atlanta, Georgia 30332-0280  
Affiliation: Networking and Telecommunications Group College of Computing Georgia Tech  College of Computing Georgia Institute of Technology  
Abstract: A substantial fraction of all network traffic today comes from applications in which clients retrieve objects from servers. The caching of objects in locations "close" to clients is an important technique for reducing both network traffic and response time for such applications. In this paper we consider the benefits of associating caches with switching nodes throughout the network, rather than in a few hand-chosen locations. We also consider the use of various self-organizing or active cache management strategies for organizing cache content. We evaluate caching techniques using both simulation and a general analytic model for network caching. Our results indicate that in-network caching can make effective use of cache space. In particular, self-organizing caching schemes yield better average round-trip latencies than more traditional approaches, while requiring much smaller caches per node. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Squid internet object cache. </institution> <note> http://squid.nlanr.net/Squid/. </note>
Reference-contexts: The servers keep track of currently active push clients, and can redirect subsequent requests to its known proxies. The Internet Cache Protocol (ICP) [10] defined by the Network Working Group of the IETF is a message format used for communicating among Web caches. Harvest (and its successor|Squid <ref> [1] </ref>) both use ICP to exchange information about objects cached at neighboring caches. 3 Self-Organizing Network Caching A prudent amount of caching inside the network can lead to large benefits, both in terms of access latencies and bandwidth usage [4, 7].
Reference: [2] <author> M. Arlitt and C. Williamson. </author> <title> Web server workload characterization: The search for invariants. </title> <booktitle> In Proceedings of ACM SIGMETRICS '95, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: This measure accounts for both aspects of the benefits of caching: reduction in network traffic, and reduction of the request-response latency. Our studies involve both analysis and simulation, and use object request distributions that are consistent with studies of actual Web traffic <ref> [2] </ref>. Our results indicate that in-network caching can make effective use of cache space. In particular, active caching yields better average round-trip latencies than more traditional approaches, while requiring much smaller caches per node. <p> These access patterns |and indeed all of our simulation parameters| are consistent with what is known about access to objects in the World Wide Web. Among the "invariants" found by Arlitt and Williamson in their study of server logs <ref> [2] </ref> was that the number of distinct objects requested is between .3% and 2.1% of the total number of requests, i.e. each requested object is requested 50 to 300 times in a trace on the average.
Reference: [3] <author> Samrat Bhattacharjee, Kenneth. L. Calvert, and Ellen W. Zegura. </author> <title> An Architecture for Active Networking. </title> <booktitle> In Proceedings of High Performance Networking 97, </booktitle> <year> 1997. </year>
Reference-contexts: AN-Sim simulates an active network as defined in <ref> [3] </ref>, and allows for variation of the network topology. This section discusses the various parameters of our simulations. Network Topologies. We simulated several topologies, differing in number of nodes, diameter, average node degree, ratio of transit nodes to stub nodes, etc. <p> We have also considered active networking for application-specific congestion control in the context of a specific service architecture <ref> [3] </ref>.
Reference: [4] <author> C. M. Bowman, P. Danzig, D. Hardy, U. Manber, M. Schwartz, and D. Wessels. Harvest: </author> <title> A scalable, customizable discovery and access system. </title> <type> Technical Report CU-CS-732-94, </type> <institution> University of Colorado Boulder, </institution> <year> 1995. </year>
Reference-contexts: and does not pass through any other stub domains. * In case two stub domains are connected directly via a stub-stub edge, the path between two nodes on the two domains may (but need not) go along that edge and avoid any transit domains. 2.2 Related work The Harvest Cache <ref> [4] </ref> project at the University of Colorado is the largest wide area cache implementation in the Internet. Harvest caches are usually arranged in a hierarchy, and Web clients are manually configured to access a particular cache in the hierarchy that is designated as the client's proxy. <p> Harvest (and its successor|Squid [1]) both use ICP to exchange information about objects cached at neighboring caches. 3 Self-Organizing Network Caching A prudent amount of caching inside the network can lead to large benefits, both in terms of access latencies and bandwidth usage <ref> [4, 7] </ref>. Traditional approaches towards network caching have been to place large caches at specific points in the network, with little or no co-ordination between the caches. In contrast, we consider networks in which small caches are placed at every node. <p> Stub nodes connected to transit nodes have to be traversed in order to access the transit network. Thus, these stub nodes form good locations for network caches. This scheme is similar to the Harvest <ref> [4] </ref> scheme for placing caches. In addition, we consider an approach in which caches are located in every node (like self-organizing caches), but without any self-organizing mechanisms enabled. This case corresponds to a "null" active function in an active network. This is referred to as "No AN".
Reference: [5] <author> H. Braun and K Claffy. </author> <title> Web traffic characterization: An assessment of the impact of caching documents from NCSA's web server. </title> <booktitle> In Electronic Proceedings of the Second World Wide Web Conference '94: Mosaic and the Web, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The caching of objects in locations "close" to clients is an important technique for reducing both network traffic and response time for such applications. Studies have shown <ref> [5, 6] </ref> that caching can substantially improve performance. In this paper we consider the benefits of associating caches with switching nodes throughout the network, rather than in a few hand-chosen locations. We also consider the use of various self-organizing or active cache management strategies.
Reference: [6] <author> P. Danzig, M. Schwatrz, and R. Hall. </author> <title> A case for caching file objects inside internetworks. </title> <booktitle> In Proceedings of ACM SIGCOMM '93, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: The caching of objects in locations "close" to clients is an important technique for reducing both network traffic and response time for such applications. Studies have shown <ref> [5, 6] </ref> that caching can substantially improve performance. In this paper we consider the benefits of associating caches with switching nodes throughout the network, rather than in a few hand-chosen locations. We also consider the use of various self-organizing or active cache management strategies.
Reference: [7] <author> J. Gwertzman and Margo Seltzer. </author> <title> The case for geographical push caching. In Hot Operating Systems, </title> <year> 1995. </year>
Reference-contexts: This scheme is effective in reducing the wide-area bandwidth requirements, and in accessing "hot-spots" only once per hierarchy (as the "hot" item is then cached within the hierarchy, and subsequent requests to the same object can be satisfied by a Harvest cache hit). 2 The geographical push caching scheme <ref> [7] </ref> of Seltzer and Gwertzman at Harvard uses a friends-of-friends algorithm in which servers selectively push their content to friend caches that reside in active client networks. <p> Harvest (and its successor|Squid [1]) both use ICP to exchange information about objects cached at neighboring caches. 3 Self-Organizing Network Caching A prudent amount of caching inside the network can lead to large benefits, both in terms of access latencies and bandwidth usage <ref> [4, 7] </ref>. Traditional approaches towards network caching have been to place large caches at specific points in the network, with little or no co-ordination between the caches. In contrast, we consider networks in which small caches are placed at every node.
Reference: [8] <author> A. Lopez-Ortiz and Daniel M. </author> <note> German. A multicollaborative push-caching http protocol for the WWW. In World Wide Web Conference (WWW5), 1995. Poster Presentation. 20 </note>
Reference-contexts: An similar push caching approach in which servers disseminate popular pages has been proposed by Oritz and German at the University of Waterloo <ref> [8] </ref>. In both these schemes, the server initiates the caching of an object (that it deems popular) at a remote site.
Reference: [9] <author> D. Tennenhouse, J. Smith, W. Sincoskie, D. Wetherall, and G. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1), </volume> <year> 1997. </year>
Reference-contexts: The idea is that each node caches those objects that most frequently "pass through" it, and objects end up cached at "hot spots" where streams of requests come together. We develop the self-organizing algorithms in light of an "active" network <ref> [9] </ref>. In an active network, the routing nodes can execute code on behalf of users. The processing required by the self-organizing caching algorithms form a natural application for active networks (as this processing is confined to within the network, and uses knowledge that is available only within the network).
Reference: [10] <author> D. Wessels and K. Claffy. </author> <title> Internet Cache Protocol (ICP), </title> <type> version 2. Technical report, </type> <institution> IETF Network Working Group, </institution> <month> May 27 May </month> <year> 1997. </year> <month> draft-wessels-icp-v2-03.txt. </month>
Reference-contexts: If the client request can be satisfied at the initial proxy cache, it is served by the proxy. In case of a miss, the parent and sibling caches in the hierarchy are contacted using the connection-less mode of the Internet Cache Protocol (ICP <ref> [10] </ref> discussed below). If the requested object is not available at the sibling caches, or at the parent, then the client's proxy cache generates another HTTP query with its parent cache as the target using the HTTP proxy protocol or a connection-oriented version of ICP. <p> In the Waterloo work, clients identify themselves to servers as willing push caches, and servers can choose to replicate popular objects at certain clients. The servers keep track of currently active push clients, and can redirect subsequent requests to its known proxies. The Internet Cache Protocol (ICP) <ref> [10] </ref> defined by the Network Working Group of the IETF is a message format used for communicating among Web caches.
Reference: [11] <author> E. Zegura and K. Calvert. </author> <title> Georgia Tech Internet Topology Models. </title> <note> http://www.cc.gatech.edu/projects/gtitm. 21 </note>
Reference-contexts: Domains are of two types, transit, which (as their name implies) carry transit traffic, and stub, through which only packets addressed to or from some node in the domain are carried. The graph models used in our simulations are constructed using the GT-ITM internet topology modeling package <ref> [11] </ref>.
References-found: 11

