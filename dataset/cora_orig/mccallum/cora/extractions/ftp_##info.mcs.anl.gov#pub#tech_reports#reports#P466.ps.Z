URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P466.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts94.htm
Root-URL: http://www.mcs.anl.gov
Email: e-mail: jones@cs.utk.edu e-mail: plassman@mcs.anl.gov  
Phone: phone: (615) 974-4406 phone: (708) 252-4213 FAX: (615) 974-4404 FAX: (708) 252-5986  
Title: Large-Scale Structural Analysis for High-Performance Computers and Workstations  
Author: T. Jones Paul E. Plassmann 
Address: Knoxville, TN 37996 Argonne, IL 60439  
Affiliation: Computer Science Department Mathematics and Computer Science Division University of Tennessee Argonne National Laboratory  
Note: Paper submitted to: Third National Symposium on  Mark  This work was supported in part by the Office of Scientific Computing, U.S. Department of Energy, under Contract W-31-109-Eng-38. In addition, the first author received support from the 1994-1995 UTK Professional Development Award Program.  
Abstract: Computational Results for Parallel Unstructured Mesh Computations y Abstract: The majority of finite element models in structural engineering are composed of unstructured meshes. These unstructured meshes are often very large and require significant computational resources; hence they are excellent candidates for massively parallel computation. Parallel solution of the sparse matrices that arise from such meshes has been studied heavily, and many good algorithms have been developed. Unfortunately, many of the other aspects of parallel unstructured mesh computation have gone largely ignored. We present a set of algorithms that allow the entire unstructured mesh computation process to execute in parallel|including adaptive mesh refinement, equation reordering, mesh partitioning, and sparse linear system solution. We briefly describe these algorithms and state results regarding their running-time and performance. We then give results from the 512-processor Intel DELTA for a large-scale structural analysis problem. These results demonstrate that the new algorithms are scalable and efficient. The algorithms are able to achieve up to 2.2 gigaflops for this unstructured mesh problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Babu ska and A. K. Aziz, </author> <title> On the angle condition in the finite element method, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 13 (1976), </volume> <pages> pp. 214-226. </pages>
Reference-contexts: Finally, all angles in the mesh must be bounded away from 0 and . The latter requirement is necessary because the discretization error in a finite element approximation has been shown to grow as the maximum angle approaches <ref> [1] </ref>. Small angles are to be avoided because the condition number of the matrices arising from mesh elements has been shown to grow as O ( 1 min ), where min is the smallest angle in the mesh [5]. 2.1. A Parallel Bisection Algorithm.
Reference: [2] <author> M. J. Berger and S. H. Bokhari, </author> <title> A partitioning strategy for nonuniform problems on multiprocessors, </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36 (1987), </volume> <pages> pp. 570-580. </pages>
Reference-contexts: This is clearly not scalable behavior. Other important bounds on URB can also be proved but are given elsewhere [16]. The ORB algorithm as described in <ref> [2] </ref>, given in Figure 7 with an illustration of execution in Figure 8, partitions the vertices according to their physical coordinates while ignoring the edges between vertices. The ORB algorithm has many practical virtues [2] [18] [25] including ease of implementation, inexpensive execution cost, and ease of parallelization. <p> The ORB algorithm as described in <ref> [2] </ref>, given in Figure 7 with an illustration of execution in Figure 8, partitions the vertices according to their physical coordinates while ignoring the edges between vertices. The ORB algorithm has many practical virtues [2] [18] [25] including ease of implementation, inexpensive execution cost, and ease of parallelization. In order to simplify the presentation, the ORB algorithm is given here for the two-dimensional case, but it is easily generalizable to three dimensions. The URB algorithm is a generalization of the ORB algorithm. <p> The URB algorithm in the x-y plane The ORB and URB algorithms are particularly amenable to such updating <ref> [2] </ref>. One can simply move the cuts of the old partitioning to reflect the refined mesh. If this does not result in an acceptable partition, then the mesh can be partitioned from scratch.
Reference: [3] <author> T. F. Chan and H. C. Elman, </author> <title> Fourier analysis of iterative methods for elliptic boundary value problems, </title> <journal> SIAM Review, </journal> <volume> 31 (1989), </volume> <pages> pp. 20-49. </pages>
Reference-contexts: For 2-D structural analysis problems such as the one in Section 5, the number of iterations required for convergence to a solution is expected to be proportional to p n, where n is the number of unknowns | similar to the results in <ref> [3] </ref>. The scalable implementation of this preconditioned conjugate gradient algorithm is straightforward with two exceptions that we discuss below. Each processor is responsible for columns of the matrix and the unknowns that correspond to the grid points on that processor. <p> The number of iterations as a function of the square root of problem size proportional to the square root of the number of equations (see Figure 20) <ref> [3] </ref>. 6. Summary and Future Work. A parallel algorithm for the refinement of unstructured meshes was given and computational results were described that demonstrated the scalability and efficiency of this algorithm.
Reference: [4] <author> L. A. Freitag, M. T. Jones, and P. E. Plassmann, </author> <title> New techniques for parallel simulation of high-temperature superconductors, </title> <booktitle> in Proceedings of the Scalable High-Performance Computing Conference, </booktitle> <address> Los Alamitos, Calif., 1994, </address> <publisher> IEEE, </publisher> <pages> pp. 726-733. </pages>
Reference-contexts: A single large-scale structural analysis problem was chosen to demonstrate the behavior of the algorithms in as simple a manner as possible. The algorithms have been executed individually on other, very different problems for which similar results have been achieved <ref> [4] </ref> [12] [13] [14] [18]. The structure of interest is a thin, hollow sphere with four triangular holes equally spaced over each hemisphere. An initial triangular mesh representing this geometry is given in Figure 13.
Reference: [5] <author> I. Fried, </author> <title> Condition of finite element matrices generated from nonuniform meshes, </title> <journal> AIAA Journal, </journal> <volume> 10 (1972), </volume> <pages> pp. 219-221. </pages>
Reference-contexts: Small angles are to be avoided because the condition number of the matrices arising from mesh elements has been shown to grow as O ( 1 min ), where min is the smallest angle in the mesh <ref> [5] </ref>. 2.1. A Parallel Bisection Algorithm. The bisection algorithm bisects triangles across the largest edge (dividing the largest angle), with selective divisions across a smaller edge (termed simple bisection).
Reference: [6] <author> G. H. Golub and C. F. V. Loan, </author> <title> Matrix Computations, </title> <publisher> The Johns Hopkins University Press, </publisher> <address> Baltimore, </address> <year> 1983. </year>
Reference-contexts: In addition, recent theoretical results have shown that one does not see the dramatic increase of the number of iterations required for convergence with "many-color" orderings that one sees with the red/black ordering for model 1 For a discussion of the conjugate gradient algorithm see <ref> [6] </ref>. 2 The scalable computation of the incomplete factors can be accomplished in the same fashion as the triangular linear system solution. 10 0 4 Colors Matrix Reordered by Color 9-pt Stencil 0 0 Fig. 11. The adjacency graph corresponding to a nine-point stencil requires four colors.
Reference: [7] <author> W. D. Gropp and B. F. Smith, </author> <title> Simplified Linear Equation Solvers Users Manual, </title> <type> Tech. Rep. </type> <institution> ANL-93/8, Argonne National Laboratory, Argonne, Ill., </institution> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: Software developed for distributed memory computers includes the BlockSolve package for the iterative solution of symmetric systems [10], the CAPSS project for direct methods [8], and PETSc, which contains parallel iterative methods for nonsymmetric systems <ref> [7] </ref>.
Reference: [8] <author> M. T. Heath and P. Raghavan, </author> <title> Distributed solution of sparse linear systems, </title> <type> Tech. Rep. </type> <institution> UIUCDCS-R-93-1793, University of Illinois, </institution> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: For this reason, much effort has been invested in developing the parallel algorithms and software for general, sparse linear systems. Software developed for distributed memory computers includes the BlockSolve package for the iterative solution of symmetric systems [10], the CAPSS project for direct methods <ref> [8] </ref>, and PETSc, which contains parallel iterative methods for nonsymmetric systems [7].
Reference: [9] <author> T. Hughes, </author> <title> The Finite Element Method, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1987. </year>
Reference-contexts: The sphere is constrained around the south pole, and a force is applied around the north pole toward the south pole; the displacement of the structure at equilibrium is then solved for at every mesh point. The finite element used is a triangular shell element <ref> [9] </ref> with quartic basis functions. The local error estimator for each triangle is the norm of the strain vector integrated over the triangle. The initial mesh is refined until every triangle satisfies a specified error tolerance. Such a refined mesh is given in Figure 14.

Reference: [20] <author> T. A. Manteuffel, </author> <title> An incomplete factorization technique for positive definite linear systems, </title> <journal> Mathematics of Computation, </journal> <volume> 34 (1980), </volume> <pages> pp. 473-497. </pages>
Reference-contexts: The BlockSolve package, a collection of parallel iterative methods, is employed to solve the sparse linear systems [10]. The iterative solver chosen from BlockSolve is an incomplete matrix factorization used as a preconditioner for the conjugate gradient algorithm <ref> [20] </ref>. This general-purpose preconditioner performs well for many structural analysis problems.
Reference: [21] <author> W. F. Mitchell, </author> <title> A comparison of adaptive refinement techniques for elliptic problems, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 15 (1989), </volume> <pages> pp. 326-347. 19 </pages>
Reference-contexts: By selectively refining of initial mesh Adaptive refinement regular domain Uniform mesh on a Initial nonuniform mesh on irregular domain Fig. 1. Examples of structured and unstructured meshes portions of the mesh rather than the entire mesh, increased accuracy can be achieved at a reduced cost for many computations <ref> [21] </ref>. Unstructured mesh strategies are particularly appropriate for large-scale structural analysis, where the geometries may be complex and the mesh elements can number in the millions. Distributed-memory parallel computers such as the Intel DELTA or a network of RISC workstations offer a cost-effective tool for solving such problems. <p> The assumption is made that an initial triangulation, T 0 , of the structure is given. The parallel generation of conforming triangulations for complex geometries is an important topic, but will not be addressed here. Given T 0 the following algorithm adapted from <ref> [21] </ref> is used to solve the problem. This basic framework can be used for many types of structural analysis; in this paper the problem chosen for demonstration is linear static displacement.
Reference: [22] <author> M.-C. Rivara, </author> <title> Mesh refinement processes based on the generalized bisection of simplices, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 21 (1984), </volume> <pages> pp. 604-613. </pages>
Reference-contexts: The bisection algorithm Obviously, the refinement could propagate through many initially unmarked triangles before finishing. Rivara, however, has shown that this loop will terminate in a finite number of iterations, say L P iterations <ref> [22] </ref>. Rivara also has shown that each triangle in the resulting conforming mesh, T i+1 , embeds 1, 2, 3, or 4 triangles of T i . 3 During the execution of the algorithm, no side of a triangle will have more than one nonconformity.
Reference: [23] <author> I. G. Rosenberg and F. Stenger, </author> <title> A lower bound on the angles of triangles constructed by bisecting the longest side, </title> <journal> Mathematics of Computation, </journal> <volume> 29 (1975), </volume> <pages> pp. 390-395. </pages>
Reference-contexts: The bisection algorithm bisects triangles across the largest edge (dividing the largest angle), with selective divisions across a smaller edge (termed simple bisection). This has been shown to yield triangulations whose smallest angle is bounded by at worst one-half the smallest angle in the initial mesh <ref> [23] </ref>.
Reference: [24] <author> R. Schreiber and W.-P. Tang, </author> <title> Vectorizing the conjugate gradient method. Unpublished information, </title> <institution> Department of Computer Science, Stanford University, </institution> <year> 1982. </year>
Reference-contexts: However, a reordering of the preconditioning matrix based on a coloring of the graph associated with the matrix does allow for its scalable solution. The reordered triangular system solution is scalable because the number of sequential communication steps is proportional to the chromatic number of the graph <ref> [24] </ref>, which is essentially a function of the local graph structure, and independent of the size of the graph. In Figure 11 an example of a multicoloring ordering is given for a regular grid that requires four colors. <p> Several observations follow on the local structure of this subgraph. First, note that the adjacency structure of the vertices at the same geometric location (i.e., the nonzero structure of the associated variables) is identical; denote such vertices identical vertices. Schreiber and Tang <ref> [24] </ref> noted that a coloring of the graph corresponding to the vertices results in a system with small dense blocks, of order the number of degrees of freedom per vertex, along the diagonal.
Reference: [25] <author> R. D. Williams, </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations, </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3 (1991), </volume> <pages> pp. 457-481. 20 </pages>
Reference-contexts: The ORB algorithm as described in [2], given in Figure 7 with an illustration of execution in Figure 8, partitions the vertices according to their physical coordinates while ignoring the edges between vertices. The ORB algorithm has many practical virtues [2] [18] <ref> [25] </ref> including ease of implementation, inexpensive execution cost, and ease of parallelization. In order to simplify the presentation, the ORB algorithm is given here for the two-dimensional case, but it is easily generalizable to three dimensions. The URB algorithm is a generalization of the ORB algorithm.
References-found: 15

