URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1994/UM-CS-1994-044.ps
Refering-URL: http://dis.cs.umass.edu/lesserpubs.html
Root-URL: 
Title: An Exchange Protocol without Enforcement  
Author: Tuomas W. Sandholm and Victor R. Lesser 
Abstract: Computer Science Department University of Massachusetts at Amherst CMPSCI Technical Report 94-44 July 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Axelrod, R. </author> <year> 1984. </year> <title> The Evolution of Cooperation. </title> <publisher> BasicBooks. </publisher>
Reference-contexts: We will call a sequence of deliveries and payments safe, if neither agent is motivated to defect at any point in the exchange. The basic idea of enhancing cooperation by making the present less important compared to the future has been suggested for example in <ref> [1] </ref>. We propose an exchange strategy manager module to be added to each agent's architecture. This module is potentially different for each agent. <p> The criteria are based on the idea that an agent will cooperate if its future gain from 2 cooperation is greater than its gain from instant defection. The exchange proceeds on two axis: the portion of goods of the contract delivered so far x 2 <ref> [0; 1] </ref>, and the cumulative payment so far P (x). The payment may be monetary or other goods. The agents value the goods x according to increasing value functions that are in equivalent units of payment P (x). <p> So for a rational supplier agent to cooperate throughout an exchange in the case of continuous goods and value functions, it has to hold that 8x 2 <ref> [0; 1] </ref>, Z 1 P 0 (ff) V 0 and in the discrete case, 8x 2 [0; 1], X P (ff) V s (ff) 0: (2) The supplier controls x (based on how much payment it has received so far), but the demander controls P (x). <p> So for a rational supplier agent to cooperate throughout an exchange in the case of continuous goods and value functions, it has to hold that 8x 2 <ref> [0; 1] </ref>, Z 1 P 0 (ff) V 0 and in the discrete case, 8x 2 [0; 1], X P (ff) V s (ff) 0: (2) The supplier controls x (based on how much payment it has received so far), but the demander controls P (x). Next we analyze how the demander should control its payments to motivate the supplier to cooperate. <p> So for a rational demander agent to cooperate throughout an exchange in the case of continuous goods and value functions, it has to hold that 8x 2 <ref> [0; 1] </ref>, Z 1 V 0 and in the discrete case, 8x 2 [0; 1], X V d (ff) P (ff) 0: (5) As above, we can calculate how the supplier should control the delivering in order to motivate the demander to cooperate (equation 4 or 5): P (x) V d <p> So for a rational demander agent to cooperate throughout an exchange in the case of continuous goods and value functions, it has to hold that 8x 2 <ref> [0; 1] </ref>, Z 1 V 0 and in the discrete case, 8x 2 [0; 1], X V d (ff) P (ff) 0: (5) As above, we can calculate how the supplier should control the delivering in order to motivate the demander to cooperate (equation 4 or 5): P (x) V d (x) P (1) V d (1). 1 If equality holds, the agent is <p> The demander is safe using a lower bound for P max (x). Although the agents are safe using these bounds, even possible exchanges are disabled if the bounds are too far off. Condition 7 is not sufficient for safe exchange. Under that condition, each cumulative delivery amount x 2 <ref> [0; 1] </ref> has some cumulative payment P (x) so that at the point (x; P (x)) neither the supplier nor the demander wants to defect. This does not guarantee that such safe points can be reached. Thus it may happen that the exchange cannot proceed. <p> Neither do they assume that P max (x) or P min (x) is strictly increasing. If P max (x) and P min (x) are continuous, safe exchange can be carried out if and only if 8x 2 <ref> [0; 1] </ref>, either P max (x) &gt; P min (x) or P max (x) = P min (x) and P max (x) is constant in a left neighborhood of x and P min (x) is constant in a right neighborhood of x. <p> If in addition to continuity, P max (x) and P min (x) are strictly increasing, safe exchange is doable if and only if 8x 2 <ref> [0; 1] </ref>; P max (x) &gt; P min (x). Isolated safe exchange is problematic also in the case of continuous goods. Substituting x = 1 into the definitions of P max (x) and P min (x), we see that P max (1) = P (1) = P min (1). <p> In the case of continuous goods 8 and value functions, 8x 2 <ref> [0; 1] </ref>, Z 1 P 0 (ff) V 0 s ; (9) and in the discrete case, 8x 2 [0; 1], X P (ff) V s (ff) c def Similarly, the cooperation conditions of a rational demander can be rewritten. <p> In the case of continuous goods 8 and value functions, 8x 2 <ref> [0; 1] </ref>, Z 1 P 0 (ff) V 0 s ; (9) and in the discrete case, 8x 2 [0; 1], X P (ff) V s (ff) c def Similarly, the cooperation conditions of a rational demander can be rewritten. The supplier should make the conditions hold by controlling deliveries thus motivating the demander to cooperate. In the case of continuous goods and value functions, 8x 2 [0; 1], Z <p> 8x 2 <ref> [0; 1] </ref>, X P (ff) V s (ff) c def Similarly, the cooperation conditions of a rational demander can be rewritten. The supplier should make the conditions hold by controlling deliveries thus motivating the demander to cooperate. In the case of continuous goods and value functions, 8x 2 [0; 1], Z 1 V 0 def and in the discrete case, 8x 2 [0; 1], X V d (ff) P (ff) c d : (12) Solving equation 9 (or 10) gives the following condition that is necessary and sufficient to avoid supplier's defection: P (x) V s (x) P (1) <p> The supplier should make the conditions hold by controlling deliveries thus motivating the demander to cooperate. In the case of continuous goods and value functions, 8x 2 <ref> [0; 1] </ref>, Z 1 V 0 def and in the discrete case, 8x 2 [0; 1], X V d (ff) P (ff) c d : (12) Solving equation 9 (or 10) gives the following condition that is necessary and sufficient to avoid supplier's defection: P (x) V s (x) P (1) V s (1) + c def s . <p> If F EASIBLES = ; return NO SOLUTION POSSIBLE. c fl = arg max c2FEASIBLES P min c : chunk [i] = c fl . P max = P max P max c fl . g 6. Return the vector "chunk". First chunk to be delivered is in "chunk <ref> [1] </ref>". 13 Step 3 of the algorithm sequences the chunks with positive P max c P min c in a forward passing greedy manner to try to increase P max as much as possible while increasing P min as little as possible.
Reference: [2] <author> Durfee, E., Lee, J. and Gmytrasiewicz, P. </author> <year> 1993. </year> <title> Overeager Reciprocal Rationality and Mixed Strategy Equilibria. </title> <booktitle> In Proc. Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 225-230, </pages> <address> Washington D.C. </address>
Reference-contexts: 1 Introduction In cooperative distributed problem solving [3], the system designer imposes an interaction protocol and a strategy (a mapping from state history to actions; a way to use the protocol) for each agent. In multiagent systems <ref> [9, 12, 2, 5, 11] </ref>, the agents are provided with an interaction protocol, but each agent may choose its own strategy. This allows the agents to be constructed by separate designers and/or represent different real world parties.
Reference: [3] <author> Durfee, E., Lesser, V. and Corkill, D. </author> <year> 1989. </year> <title> Cooperative Distributed Problem Solving. </title> <editor> In: Barr, A., Cohen, P., and Feigenbaum, E. (eds.). </editor> <booktitle> The Handbook of Artificial Intelligence Vol. IV. </booktitle> <publisher> Addison Wesley. </publisher>
Reference-contexts: 1 Introduction In cooperative distributed problem solving <ref> [3] </ref>, the system designer imposes an interaction protocol and a strategy (a mapping from state history to actions; a way to use the protocol) for each agent.
Reference: [4] <author> General Magic, Inc. </author> <year> 1994. </year> <title> Telescript Technology: The Foundation for the Electronic Marketplace. General Magic White Paper. </title>
Reference-contexts: Thus, the laws cannot be enforced unless the terminated agent represented some real world party and the connection between the agent and the real world party can be traced. For example, the Telescript technology <ref> [4] </ref> follows the approach of strictly trying to tie each agent to its real world party. On the contrary, we analyze exchanges among more autonomous agents and study possibilities of exchange without enforcement (eg. with unknown real world parties or no litigation possibility).
Reference: [5] <author> Kraus, S. and Wilkenfeld, J. </author> <year> 1992. </year> <title> Multiagent Negotiation Under Time Constraints. </title> <institution> Comp. Sci. Tech. Report Series CS-TR-2975, University of Maryland, College Park, Maryland. </institution>
Reference-contexts: 1 Introduction In cooperative distributed problem solving [3], the system designer imposes an interaction protocol and a strategy (a mapping from state history to actions; a way to use the protocol) for each agent. In multiagent systems <ref> [9, 12, 2, 5, 11] </ref>, the agents are provided with an interaction protocol, but each agent may choose its own strategy. This allows the agents to be constructed by separate designers and/or represent different real world parties.
Reference: [6] <author> Kreps, D. </author> <year> 1990. </year> <title> A course in microeconomic theory. </title> <publisher> Princeton University Press. </publisher> <pages> 17 </pages>
Reference-contexts: So in game theoretic terms, the cooperation of both agents throughout the exchange is a subgame perfect Nash equilibrium <ref> [6] </ref>. 3 Non-isolated exchange So far we have considered one exchange in isolation. Often, an agent interacts with other agents more than just once in its lifetime. One interaction may affect the agent's future interactions.
Reference: [7] <author> Lax, D. A. and Sebenius, J. K. </author> <year> 1981. </year> <title> Insecure Contracts and Resource Development. </title> <publisher> Public Policy 29:4, </publisher> <pages> pp. 417-436. </pages>
Reference-contexts: This unsafe move motivates the developing country to renegotiate the conditions of the mining venture (profit division etc.). Due to expropriation risk the company cannot avoid renegotiation <ref> [7, 8] </ref>. 8 Conclusions and future research This paper presented a method for carrying out mutual exchanges among self-motivated agents without third party enforcement. Larger exchanges were split into smaller parts so that at no point was either agent motivated to defect.
Reference: [8] <author> Raiffa, H. </author> <title> The Art and Science of Negotiation. </title> <publisher> Harvard University Press, </publisher> <year> 1982. </year>
Reference-contexts: This unsafe move motivates the developing country to renegotiate the conditions of the mining venture (profit division etc.). Due to expropriation risk the company cannot avoid renegotiation <ref> [7, 8] </ref>. 8 Conclusions and future research This paper presented a method for carrying out mutual exchanges among self-motivated agents without third party enforcement. Larger exchanges were split into smaller parts so that at no point was either agent motivated to defect.
Reference: [9] <author> Sandholm, T. </author> <year> 1993. </year> <title> An Implementation of the Contract Net Protocol Based on Marginal Cost Calculations. </title> <booktitle> In Proc. Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 256-262, </pages> <address> Washington D.C. </address>
Reference-contexts: 1 Introduction In cooperative distributed problem solving [3], the system designer imposes an interaction protocol and a strategy (a mapping from state history to actions; a way to use the protocol) for each agent. In multiagent systems <ref> [9, 12, 2, 5, 11] </ref>, the agents are provided with an interaction protocol, but each agent may choose its own strategy. This allows the agents to be constructed by separate designers and/or represent different real world parties. <p> Such chunks cannot be further split, and we assume in this section that the delivery order of the chunks is strictly predefined. In the TRACONET (TRAnsportation COoperation NET) multiagent system <ref> [9] </ref>, agents representing dispatch centers negotiated over who's vehicles should transport which parcels. Taking care of one parcel is an atomic chunk, because the task cannot be split. Sometimes a contract between two agents involved multiple tasks (in order to avoid local optima in the distributed optimization [9]), so the total <p> NET) multiagent system <ref> [9] </ref>, agents representing dispatch centers negotiated over who's vehicles should transport which parcels. Taking care of one parcel is an atomic chunk, because the task cannot be split. Sometimes a contract between two agents involved multiple tasks (in order to avoid local optima in the distributed optimization [9]), so the total exchange could have been split into smaller parts.
Reference: [10] <author> Sandholm, T. and Lesser, V. </author> <year> 1994. </year> <title> An Exchange Protocol without Enforcement. </title> <booktitle> In Proc. 13th International Workshop on Distributed Artificial Intelligence, </booktitle> <address> Washington. </address>
Reference-contexts: It may also be the case that the laws are not strictly enforced or that enforcing them (eg. by litigation) is fl This paper is an extended version of <ref> [10] </ref>. y This research was supported by ARPA contract N00014-92-J-1698. The content does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. 1 impractically expensive. We would like the agents' interactions to work properly indepen-dent of fluctuations in enforcement.
Reference: [11] <author> Wellman, </author> <title> M.P. 1992. A General Equilibrium Approach to Distributed Transportation Planning. </title> <booktitle> In Proc. Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 282-289, </pages> <address> San Jose, California. </address>
Reference-contexts: 1 Introduction In cooperative distributed problem solving [3], the system designer imposes an interaction protocol and a strategy (a mapping from state history to actions; a way to use the protocol) for each agent. In multiagent systems <ref> [9, 12, 2, 5, 11] </ref>, the agents are provided with an interaction protocol, but each agent may choose its own strategy. This allows the agents to be constructed by separate designers and/or represent different real world parties.
Reference: [12] <author> Zlotkin, G. and Rosenschein, J.S. </author> <year> 1993. </year> <title> A Domain Theory for Task Oriented Negotiation. </title> <booktitle> In Proc. Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 417-442, </pages> <address> Chamberry, France. </address> <month> 18 </month>
Reference-contexts: 1 Introduction In cooperative distributed problem solving [3], the system designer imposes an interaction protocol and a strategy (a mapping from state history to actions; a way to use the protocol) for each agent. In multiagent systems <ref> [9, 12, 2, 5, 11] </ref>, the agents are provided with an interaction protocol, but each agent may choose its own strategy. This allows the agents to be constructed by separate designers and/or represent different real world parties.
References-found: 12

