URL: http://www.isi.edu/sims/papers/91-search.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: cak@cs.cmu.edu  
Title: Search Reduction in Hierarchical Problem Solving  
Author: Craig A. Knoblock 
Date: 1991  
Note: Proceedings of the Ninth National Conference on Artificial Intelligence, AAAI Press,  
Address: Pittsburgh, PA 15213  Menlo Park, CA,  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: It has long been recognized that hierarchical problem solving can be used to reduce search. Yet, there has been little analysis of the problem-solving method and few experimental results. This paper provides the first comprehensive analytical and empirical demonstrations of the effectiveness of hierarchical problem solving. First, the paper shows analytically that hierarchical problem solving can reduce the size of the search space from exponential to linear in the solution length and identifies a sufficient set of assumptions for such reductions in search. Second, it presents empirical results both in a domain that meets all of these assumptions as well as in domains in which these assumptions do not strictly hold. Third, the paper explores the conditions under which hierarchical problem solving will be effective in practice. 
Abstract-found: 1
Intro-found: 1
Reference: [ Anzai and Simon, 1979 ] <author> Yuichiro Anzai and Her-bert A. Simon. </author> <title> The theory of learning by doing. </title> <journal> Psychological Review, </journal> <volume> 86 </volume> <pages> 124-140, </pages> <year> 1979. </year>
Reference-contexts: To illustrate this point, consider a variant of the Tower of Hanoi problem that has the additional restriction that no disk can be moved twice in a row <ref> [ Anzai and Simon, 1979 ] </ref> . By imposing additional structure on the domain, the problem solver is forced to do more backtracking. Figure 4 compares the CPU time used by the two configurations on this variant of the domain.
Reference: [ Knoblock, 1990 ] <author> Craig A. Knoblock. </author> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 923-928, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: The experiments were run on the Tower of Hanoi both with and without using the abstraction hierarchy described in the preceding sections. The abstractions were automatically generated by the alpine system <ref> [ Knoblock, 1990 ] </ref> and then used in a hierarchical version of the prodigy problem solver [ Minton et al., 1989 ] .
Reference: [ Knoblock, 1991 ] <author> Craig A. Knoblock. </author> <title> Automatically Generating Abstractions for Problem Solving. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year> <note> Tech. Report CMU-CS-91-120. </note>
Reference-contexts: The intermediate states of the plan at this new level then serve as goals for the subproblems at the next level, and the process is repeated until the plan is refined into the ground space. This approach to hierarchical problem solving is formally defined in <ref> [ Knoblock, 1991 ] </ref> . Consider an abstraction hierarchy for the three-disk Tower of Hanoi, where the most abstract space contains only the largest disk, the next abstraction space contains the largest and medium-sized disk, and the ground space contains all three disks. <p> These domains were described in [ Minton, 1988 ] , where they were used to evaluate the effectiveness of the explanation-based learning module in prodigy. The abstraction hierarchies used in these experiments were automatically generated by alpine and are fully described in <ref> [ Knoblock, 1991 ] </ref> . Figures 5 and 6 compare the average CPU time on problems of increasing size both with and without using hierarchical problem solving. Both problem domains were tested on large sets of randomly generated problems (between 250 and 400 problems).
Reference: [ Korf, 1985 ] <author> Richard E. Korf. </author> <title> Depth-first iterative-deepening: An optimal admissible tree search. </title> <journal> Artificial Intelligence, </journal> <volume> 27(1) </volume> <pages> 97-109, </pages> <year> 1985. </year>
Reference-contexts: Since the size of the search spaces are potentially infinite, the analysis assumes the use of an admissible search procedure (e.g., depth-first iterative-deepening <ref> [ Korf, 1985 ] </ref> ), which is bounded by the length of the shortest solution. The analysis is similar to the analysis of abstraction planning with macros by Korf [ 1987 ] . Korf showed that using a hierarchy of macros can reduce an exponential search to a linear one.
Reference: [ Korf, 1987 ] <author> Richard E. Korf. </author> <title> Planning as search: A quantitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1) </volume> <pages> 65-88, </pages> <year> 1987. </year>
Reference: [ Minsky, 1963 ] <author> Marvin Minsky. </author> <title> Steps toward artificial intelligence. </title> <editor> In Edward A. Feigenbaum, editor, </editor> <booktitle> Computers and Thought, </booktitle> <pages> pages 406-450. </pages> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1963. </year>
Reference-contexts: Introduction Identifying intermediate states in a search space can be used to decompose a problem and significantly reduce search <ref> [ Newell et al., 1962, Minsky, 1963 ] </ref> .
Reference: [ Minton et al., 1989 ] <author> Steven Minton, Jaime G. Car-bonell, Craig A. Knoblock, Daniel R. Kuokka, Oren Etzioni, and Yolanda Gil. </author> <title> Explanation-based learning: A problem solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> 40(1-3):63-118, </volume> <year> 1989. </year>
Reference-contexts: The experiments were run on the Tower of Hanoi both with and without using the abstraction hierarchy described in the preceding sections. The abstractions were automatically generated by the alpine system [ Knoblock, 1990 ] and then used in a hierarchical version of the prodigy problem solver <ref> [ Minton et al., 1989 ] </ref> .
Reference: [ Minton, 1988 ] <author> Steven Minton. </author> <title> Learning Effective Search Control Knowledge: An Explanation-Based Approach. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Carnegie Mellon University, </institution> <year> 1988. </year>
Reference-contexts: Experimental Results This section describes the results of hierarchical problem solving in prodigy in two problem-solving domains: an extended version of the strips robot-planning domain and a machine-shop scheduling domain. These domains were described in <ref> [ Minton, 1988 ] </ref> , where they were used to evaluate the effectiveness of the explanation-based learning module in prodigy. The abstraction hierarchies used in these experiments were automatically generated by alpine and are fully described in [ Knoblock, 1991 ] .
Reference: [ Newell and Simon, 1972 ] <author> Allen Newell and Herbert A. Simon. </author> <title> Human Problem Solving. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1972. </year>
Reference-contexts: Introduction Identifying intermediate states in a search space can be used to decompose a problem and significantly reduce search [ Newell et al., 1962, Minsky, 1963 ] . One approach to finding intermediate states is to use hierarchical problem solving <ref> [ Newell and Simon, 1972, Sacerdoti, 1974 ] </ref> , where a problem is first solved in an abstract problem space and the intermediate states in the abstract plan are used as intermediate goals to guide the search at successively more detailed abstraction levels. <p> This plan is then refined at successive levels in the hierarchy by inserting additional operators to produce a complete sequence of ground-level operators. This problem-solving technique was first used in gps <ref> [ Newell and Simon, 1972 ] </ref> and abstrips [ Sacerdoti, 1974 ] and has since been used in a number of problem solvers, including noah [ Sacerdoti, 1977 ] , molgen [ Stefik, 1981 ] , nonlin [ Tate, 1977 ] , and sipe [ Wilkins, 1984 ] .
Reference: [ Newell et al., 1962 ] <author> Allen Newell, J. C. Shaw, and Herbert A. Simon. </author> <title> The processes of creative thinking. </title> <booktitle> In Contemporary Approaches to Creative Thinking, </booktitle> <pages> pages 63-119. </pages> <publisher> Atherton Press, </publisher> <address> New York, </address> <year> 1962. </year>
Reference-contexts: Introduction Identifying intermediate states in a search space can be used to decompose a problem and significantly reduce search <ref> [ Newell et al., 1962, Minsky, 1963 ] </ref> .
Reference: [ Sacerdoti, 1974 ] <author> Earl D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2) </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference-contexts: Introduction Identifying intermediate states in a search space can be used to decompose a problem and significantly reduce search [ Newell et al., 1962, Minsky, 1963 ] . One approach to finding intermediate states is to use hierarchical problem solving <ref> [ Newell and Simon, 1972, Sacerdoti, 1974 ] </ref> , where a problem is first solved in an abstract problem space and the intermediate states in the abstract plan are used as intermediate goals to guide the search at successively more detailed abstraction levels. <p> Korf [ 1987 ] provides an analysis of abstraction planning with macros, but his analysis assumes you are given a hierarchy of macro spaces, so that once a problem is solved in the macro space, the problem is solved. abstrips <ref> [ Sacerdoti, 1974 ] </ref> provides the best empirical demonstration to date, but these results are in a single problem-solving domain on a small set of problems. <p> This plan is then refined at successive levels in the hierarchy by inserting additional operators to produce a complete sequence of ground-level operators. This problem-solving technique was first used in gps [ Newell and Simon, 1972 ] and abstrips <ref> [ Sacerdoti, 1974 ] </ref> and has since been used in a number of problem solvers, including noah [ Sacerdoti, 1977 ] , molgen [ Stefik, 1981 ] , nonlin [ Tate, 1977 ] , and sipe [ Wilkins, 1984 ] .
Reference: [ Sacerdoti, 1977 ] <author> Earl D. Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <publisher> American Elsevier, </publisher> <address> New York, NY, </address> <year> 1977. </year>
Reference-contexts: This problem-solving technique was first used in gps [ Newell and Simon, 1972 ] and abstrips [ Sacerdoti, 1974 ] and has since been used in a number of problem solvers, including noah <ref> [ Sacerdoti, 1977 ] </ref> , molgen [ Stefik, 1981 ] , nonlin [ Tate, 1977 ] , and sipe [ Wilkins, 1984 ] . Hierarchical problem solvers represent abstraction spaces in various ways and employ a variety of techniques for refining an abstract plan.
Reference: [ Stefik, 1981 ] <author> Mark Stefik. </author> <title> Planning with constraints (MOLGEN: Part 1). </title> <journal> Artificial Intelligence, </journal> <volume> 16(2) </volume> <pages> 111-140, </pages> <year> 1981. </year>
Reference-contexts: This problem-solving technique was first used in gps [ Newell and Simon, 1972 ] and abstrips [ Sacerdoti, 1974 ] and has since been used in a number of problem solvers, including noah [ Sacerdoti, 1977 ] , molgen <ref> [ Stefik, 1981 ] </ref> , nonlin [ Tate, 1977 ] , and sipe [ Wilkins, 1984 ] . Hierarchical problem solvers represent abstraction spaces in various ways and employ a variety of techniques for refining an abstract plan.
Reference: [ Tate, 1977 ] <author> Austin Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 888-900, </pages> <address> Cambridge, MA, </address> <year> 1977. </year>
Reference-contexts: This problem-solving technique was first used in gps [ Newell and Simon, 1972 ] and abstrips [ Sacerdoti, 1974 ] and has since been used in a number of problem solvers, including noah [ Sacerdoti, 1977 ] , molgen [ Stefik, 1981 ] , nonlin <ref> [ Tate, 1977 ] </ref> , and sipe [ Wilkins, 1984 ] . Hierarchical problem solvers represent abstraction spaces in various ways and employ a variety of techniques for refining an abstract plan.
Reference: [ Wilkins, 1984 ] <author> David E. Wilkins. </author> <title> Domain-independent planning: Representation and plan generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22(3) </volume> <pages> 269-301, </pages> <year> 1984. </year>
Reference-contexts: technique was first used in gps [ Newell and Simon, 1972 ] and abstrips [ Sacerdoti, 1974 ] and has since been used in a number of problem solvers, including noah [ Sacerdoti, 1977 ] , molgen [ Stefik, 1981 ] , nonlin [ Tate, 1977 ] , and sipe <ref> [ Wilkins, 1984 ] </ref> . Hierarchical problem solvers represent abstraction spaces in various ways and employ a variety of techniques for refining an abstract plan.
References-found: 15

