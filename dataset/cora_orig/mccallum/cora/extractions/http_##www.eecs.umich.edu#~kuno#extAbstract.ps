URL: http://www.eecs.umich.edu/~kuno/extAbstract.ps
Refering-URL: http://www.eecs.umich.edu/~kuno/
Root-URL: http://www.cs.umich.edu
Email: e-mail: kuno@eecs.umich.edu, rundenst@eecs.umich.edu  
Phone: fax: (313) 763-1503 phone: (313) 936-2971  
Title: View Management Issues in Object-Oriented Databases  
Author: Harumi A. Kuno advisor: Elke A. Rundensteiner 
Address: 1301 Beal Avenue Ann Arbor, MI 48109-2122  
Affiliation: Dept. of Elect. Engineering and Computer Science, Software Systems Research Laboratory The University of Michigan,  
Note: Extended Abstract of Thesis by  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Abiteboul and A. Bonner. </author> <title> Objects and views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 238-247, </pages> <year> 1991. </year>
Reference-contexts: Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views [3, 2, 6]. While researchers have begun to study view mechanisms in the context of object-oriented databases (OODBs) <ref> [1, 15, 14] </ref>, little work has been done regarding the implementation of object-oriented views or object-oriented view materialization. Furthermore, of the few research papers that discuss implementations of OODB view systems, most support only limited functionality at this time [11, 12, 15].
Reference: [2] <author> T. Barsalou, N. Siambela, A. M. Keller, and G. Wiederhold. </author> <title> Updating relational databases through object-based views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 248-257, </pages> <year> 1991. </year>
Reference-contexts: Current researchers are examining new areas that can specifically benefit from the flexibility provided by object-oriented views. Barsalou et al. use object-based views to integrate object-oriented and relational databases while preserving update capabilities <ref> [2] </ref>. Ra and Rundensteiner utilize views to provide transparent schema evolution, preserving existing views through schema change [13]. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views [3, 2, 6]. <p> Ra and Rundensteiner utilize views to provide transparent schema evolution, preserving existing views through schema change [13]. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views <ref> [3, 2, 6] </ref>. While researchers have begun to study view mechanisms in the context of object-oriented databases (OODBs) [1, 15, 14], little work has been done regarding the implementation of object-oriented views or object-oriented view materialization.
Reference: [3] <author> E. Bertino. </author> <title> Integration of heterogeneous data repositories by using object-oriented views. </title> <booktitle> Int. Workshop on Interoperability in Multidatabase Systems, </booktitle> <pages> pages 22-29, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Ra and Rundensteiner utilize views to provide transparent schema evolution, preserving existing views through schema change [13]. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views <ref> [3, 2, 6] </ref>. While researchers have begun to study view mechanisms in the context of object-oriented databases (OODBs) [1, 15, 14], little work has been done regarding the implementation of object-oriented views or object-oriented view materialization.
Reference: [4] <author> M. J. Carey, D. J. DeWitt, and J. F. Naughton. </author> <title> The OO7 benchmark. </title> <booktitle> SIGMOD, </booktitle> <year> 1993. </year>
Reference-contexts: The graphic interface was implemented separately, using Tcl/Tk. In order to evaluate the trade-off in basic costs/benefits between materialized and non-materialized views in our implementation, we performed an extensive set of tests based on the OO7 benchmark <ref> [4, 5] </ref>. For example, we used selection queries to derive virtual classes from one of the OO7 benchmark's classes (AtomicPart), and performed multiple tests varying the update probability, view predicate selectivity, and number of query predicate components for various configurations of views.
Reference: [5] <author> M. J. Carey, D. J. DeWitt, and J. F. Naughton. </author> <title> The OO7 benchmark. </title> <type> Technical report, </type> <institution> University of Wisconsin-Madison, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: The graphic interface was implemented separately, using Tcl/Tk. In order to evaluate the trade-off in basic costs/benefits between materialized and non-materialized views in our implementation, we performed an extensive set of tests based on the OO7 benchmark <ref> [4, 5] </ref>. For example, we used selection queries to derive virtual classes from one of the OO7 benchmark's classes (AtomicPart), and performed multiple tests varying the update probability, view predicate selectivity, and number of query predicate components for various configurations of views.
Reference: [6] <author> M. Kaul, K. Drosten, and E. J. Neuhold. Viewsystem: </author> <title> Integrating heterogeneous information bases by object-oriented views. </title> <booktitle> In IEEE Int. Conf. on Data Engineering (ICDE), </booktitle> <pages> pages 2-10, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Ra and Rundensteiner utilize views to provide transparent schema evolution, preserving existing views through schema change [13]. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views <ref> [3, 2, 6] </ref>. While researchers have begun to study view mechanisms in the context of object-oriented databases (OODBs) [1, 15, 14], little work has been done regarding the implementation of object-oriented views or object-oriented view materialization.
Reference: [7] <author> H. A. Kuno, Y. G. Ra, and E. A. Rundensteiner. </author> <title> The object-slicing technique: A flexible object representation and its evaluation. </title> <type> Technical Report CSE-TR-241-95, </type> <institution> University of Michigan, </institution> <year> 1995. </year>
Reference-contexts: Although GemStone offers many features that greatly aided our implementation, it does not support several of the key object-model properties that are necessary for the realization of our design principles. We therefore employ an object-slicing representational model to construct the MultiView object model on top of GemStone <ref> [7] </ref>. In object-slicing, a real-world object corresponds to a hierarchy of implementation objects (one for each class whose type the object possesses) linked to a conceptual object (used to represent the object-itself) rather than associating one implementation with each conceptual object as is commonly assumed in OODB systems.
Reference: [8] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> The MultiView OODB view system: Design and implementation. </title> <type> Technical Report CSE-TR-246-95, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: an OODB view system, algorithms and strategies that facilitate the maintenance of materialized views, and support for views defined by complex queries (e.g., path queries). 2 The MultiView Approach At the University of Michigan, we have an NSF-funded project developing one of the first fully functional view systems, called MultiView <ref> [14, 8] </ref>. MultiView is a view management system capable of supporting updatable materialized object-oriented views. <p> At any time, users can select both virtual and base classes for participation in view schemata. In addition, users can access MultiView either through a visually-intuitive graphic user interface or through a Smalltalk command-level interface. The implementation solutions described in our papers <ref> [8, 9, 10] </ref> are portable to other object-oriented systems. We chose to use the commercial GemStone 2 OODB as a base for the implementation of our system 3 .
Reference: [9] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Using Object-Oriented Principles to Optimize Update Propagation to Materialized Views. </title> <note> To appear in ICDE, </note> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: To users, these view schemata look and feel just like the base schema. The MultiView model provides clean object-oriented characteristics that we use to optimize view materialization update strategies <ref> [10, 9] </ref>. Because any unique database property is inherited from a single location and accessed through encapsulated interfaces, we provide a registration service so that modifications to properties trigger update propagation. <p> Furthermore, the generalization hierarchy structure makes the subsumption relationships between classes readily apparent, establishing branches of classes unaffected by updates. In <ref> [10, 9] </ref>, we discuss experimental studies we conducted to evaluate the performance impact of our optimizations on the MultiView prototype. <p> At any time, users can select both virtual and base classes for participation in view schemata. In addition, users can access MultiView either through a visually-intuitive graphic user interface or through a Smalltalk command-level interface. The implementation solutions described in our papers <ref> [8, 9, 10] </ref> are portable to other object-oriented systems. We chose to use the commercial GemStone 2 OODB as a base for the implementation of our system 3 .
Reference: [10] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Materialized object-oriented views in MultiView. </title> <booktitle> In ACM Research Issues in Data Engineering Workshop, </booktitle> <pages> pages 78-85, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: To users, these view schemata look and feel just like the base schema. The MultiView model provides clean object-oriented characteristics that we use to optimize view materialization update strategies <ref> [10, 9] </ref>. Because any unique database property is inherited from a single location and accessed through encapsulated interfaces, we provide a registration service so that modifications to properties trigger update propagation. <p> Furthermore, the generalization hierarchy structure makes the subsumption relationships between classes readily apparent, establishing branches of classes unaffected by updates. In <ref> [10, 9] </ref>, we discuss experimental studies we conducted to evaluate the performance impact of our optimizations on the MultiView prototype. <p> At any time, users can select both virtual and base classes for participation in view schemata. In addition, users can access MultiView either through a visually-intuitive graphic user interface or through a Smalltalk command-level interface. The implementation solutions described in our papers <ref> [8, 9, 10] </ref> are portable to other object-oriented systems. We chose to use the commercial GemStone 2 OODB as a base for the implementation of our system 3 .
Reference: [11] <author> O2 Technology. </author> <title> O2 Views User Manual, </title> <note> version 1 edition, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: Furthermore, of the few research papers that discuss implementations of OODB view systems, most support only limited functionality at this time <ref> [11, 12, 15] </ref>.
Reference: [12] <author> R. Peters, M. T. Ozsu, and D. Szafron. Tigurat: </author> <title> An object model for query and view support in object database systems. </title> <type> Technical Report TR 92-14, </type> <institution> The University of Alberta, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: Furthermore, of the few research papers that discuss implementations of OODB view systems, most support only limited functionality at this time <ref> [11, 12, 15] </ref>.
Reference: [13] <author> Y. G. Ra and E. A. Rundensteiner. </author> <title> A transparent object-oriented schema change approach using view schema evolution. </title> <note> to be published in IEEE Transactions on Knowledge and Data Engineering, </note> <year> 1995. </year>
Reference-contexts: Barsalou et al. use object-based views to integrate object-oriented and relational databases while preserving update capabilities [2]. Ra and Rundensteiner utilize views to provide transparent schema evolution, preserving existing views through schema change <ref> [13] </ref>. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views [3, 2, 6].
Reference: [14] <author> E. A. Rundensteiner. </author> <title> MultiView: A methodology for supporting multiple views in object-oriented databases. </title> <booktitle> In 18th VLDB Conference, </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views [3, 2, 6]. While researchers have begun to study view mechanisms in the context of object-oriented databases (OODBs) <ref> [1, 15, 14] </ref>, little work has been done regarding the implementation of object-oriented views or object-oriented view materialization. Furthermore, of the few research papers that discuss implementations of OODB view systems, most support only limited functionality at this time [11, 12, 15]. <p> an OODB view system, algorithms and strategies that facilitate the maintenance of materialized views, and support for views defined by complex queries (e.g., path queries). 2 The MultiView Approach At the University of Michigan, we have an NSF-funded project developing one of the first fully functional view systems, called MultiView <ref> [14, 8] </ref>. MultiView is a view management system capable of supporting updatable materialized object-oriented views. <p> Hence, virtual classes fully participate in the inheritance scheme in such a way that virtual classes can act as a point of inheritance for properties, and also that the extents of both virtual and base classes are kept consistent with the class hierarchy <ref> [14] </ref>. MultiView also supports capacity-augmenting classesvirtual classes that include instance variables not derived from base classes. Finally, a MultiView user can select both base and virtual classes from the global schema at any time and add them to view schemata. <p> Finally, a MultiView user can select both base and virtual classes from the global schema at any time and add them to view schemata. The MultiView system automatically integrates these selected classes into a consistent and correct view schema <ref> [14] </ref>.
Reference: [15] <author> M. H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updatable views in object-oriented databases. </title> <booktitle> In Proceedings of the Second DOOD Conference, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Because the object-oriented paradigm offers a more powerful model for integration than the relational one, several papers discuss the integration of heterogeneous data repositories via object-oriented views [3, 2, 6]. While researchers have begun to study view mechanisms in the context of object-oriented databases (OODBs) <ref> [1, 15, 14] </ref>, little work has been done regarding the implementation of object-oriented views or object-oriented view materialization. Furthermore, of the few research papers that discuss implementations of OODB view systems, most support only limited functionality at this time [11, 12, 15]. <p> Furthermore, of the few research papers that discuss implementations of OODB view systems, most support only limited functionality at this time <ref> [11, 12, 15] </ref>.
References-found: 15

