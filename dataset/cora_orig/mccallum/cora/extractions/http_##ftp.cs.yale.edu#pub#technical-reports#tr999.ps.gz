URL: http://ftp.cs.yale.edu/pub/technical-reports/tr999.ps.gz
Refering-URL: http://ftp.cs.yale.edu/pub/technical-reports/
Root-URL: http://www.cs.yale.edu
Email: Email: westbrook@cs.yale.edu.  
Title: Load Balancing for Response Time  
Author: Jeffery Westbrook 
Address: New Haven, CT 06520.  
Date: September 1994  
Affiliation: Yale University Department of Computer Science  1 Department of Computer Science, Yale University,  
Pubnum: YALEU/DCS/TR-999  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin, and O. Waarts. </author> <title> On-line load balancing with applications to machine scheduling and virtual circuit routing. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 623-631, </pages> <year> 1993. </year>
Reference-contexts: An adversary may generate n 2 unit cost tasks. Some server v must have load at least n. The adversary then deletes all tasks except for those on v. With the exception of [10], all previous papers on on-line load balancing have dealt only with peak load. In <ref> [1, 3, 5] </ref>, tasks never depart, in which case current and peak load are equivalent. In [2, 4], tasks may depart but the algorithms are competitive against peak load only. <p> Let W i denote the sum of the weights of tasks assigned to server i. Then the load on server i is given by W i =cap i . An algorithm for the special case that tasks never depart is given in <ref> [1] </ref>. The paradigm used here and in the remaining sections of this paper is as follows. Assume for the moment a known lower bound 0 on the minimum possible load. We maintain a set of levels i for i = 0; 1; 2; : : :. <p> We begin with a lazy rebalancing scheme that keeps the load bounded by 3 for a given parameter , but that may reject insertions in doing so. This scheme is an adaptation of the algorithm of <ref> [1] </ref>. Let W j be the sum of the weights of tasks assigned to processor j. We also define a quantity M j , which will roughly be the maximum weight ever on processor j. Insertion. Let u be the new task, with weight w u .
Reference: [2] <author> B. Awerbuch, Y. Azar, S. Plotkin, and O. Waarts. </author> <title> Competitive routing of virtual circuits with unknown duration. </title> <booktitle> In Proc. ACM/SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 321-330, </pages> <year> 1994. </year>
Reference-contexts: The adversary then deletes all tasks except for those on v. With the exception of [10], all previous papers on on-line load balancing have dealt only with peak load. In [1, 3, 5], tasks never depart, in which case current and peak load are equivalent. In <ref> [2, 4] </ref>, tasks may depart but the algorithms are competitive against peak load only. <p> Corollary 8 follows from setting q = (log n) 1c , and Corollary 9 from setting q = log n. This improves on the previous result of <ref> [2] </ref> in two ways: first it works for all values of the optimum load and second it is competitive against current rather than peak load. 5 Virtual Circuit Routing In the virtual circuit routing problem one is given a communication network modeled by an undirected graph. <p> We assume that the restart cost r u is fixed and is independent of the number of edges in the connection. As usual we assume r u = w u ; the restriction can be removed using the method of Section 6. 9 Azar et al. <ref> [2] </ref> give an algorithm that is O (log n) competitive against peak load and incurs restart cost O (S log n), where A is the sum of assignment sizes. In particular, the algorithm uses an estimate of the current load .
Reference: [3] <author> Y. Azar, B. Kalyanasundaram, S. Plotkin, K. Pruhs, and O. Waarts. </author> <title> Online load balancing of temporary tasks. </title> <booktitle> In Proc. 1993 Workshop on Algorithms and Data Structures (WADS 93), Lecture Notes in Computer Science 709. </booktitle> <publisher> Springer-Verlag, </publisher> <month> Aug. </month> <year> 1993. </year> <month> 11 </month>
Reference-contexts: An adversary may generate n 2 unit cost tasks. Some server v must have load at least n. The adversary then deletes all tasks except for those on v. With the exception of [10], all previous papers on on-line load balancing have dealt only with peak load. In <ref> [1, 3, 5] </ref>, tasks never depart, in which case current and peak load are equivalent. In [2, 4], tasks may depart but the algorithms are competitive against peak load only. <p> Previously, Azar et al. gave an algorithm for related machines that is 20-competitive against peak load <ref> [3] </ref>, but not competitive against current load. Their algorithm performs no reassignments, i.e., the restart cost is S. <p> Azar et al.[4] showed that when tasks both arrive and depart, no non-preemptive algorithm can be better than O ( p n) competitive against peak load. An non-preemptive algorithm that is O ( p n) competitive against peak load is given in <ref> [3] </ref>. In this section we give an eager algorithm for the case of unit weights. Its competitive ratio is parameterized by a value 1 &lt; q &lt; log n, which determines both the ratio and amount of reassignments.
Reference: [4] <author> Y. Azar, A. Karlin, and A. Broder. </author> <title> On-line load balancing. </title> <booktitle> In Proc. 33nd Symp. of Foundations of Computer Science, </booktitle> <pages> pages 218-225, </pages> <year> 1992. </year>
Reference-contexts: The distinction between peak load and current load is quite significant. For example, consider Graham's [7] list processing heuristic for identical machines. which simply assigns each new task to the least loaded server, and never reassigns a task. It is noted in <ref> [4] </ref> that this algorithm is 2-competitive against peak load. On the other hand, an algorithm that never reassigns tasks cannot be better than n-competitive against current load. An adversary may generate n 2 unit cost tasks. Some server v must have load at least n. <p> The adversary then deletes all tasks except for those on v. With the exception of [10], all previous papers on on-line load balancing have dealt only with peak load. In [1, 3, 5], tasks never depart, in which case current and peak load are equivalent. In <ref> [2, 4] </ref>, tasks may depart but the algorithms are competitive against peak load only.
Reference: [5] <author> Y. Azar, J. Naor, and R. </author> <title> Rom. The competitiveness of on-line assignments. </title> <booktitle> In Proc. 3rd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 203-210, </pages> <year> 1992. </year>
Reference-contexts: An adversary may generate n 2 unit cost tasks. Some server v must have load at least n. The adversary then deletes all tasks except for those on v. With the exception of [10], all previous papers on on-line load balancing have dealt only with peak load. In <ref> [1, 3, 5] </ref>, tasks never depart, in which case current and peak load are equivalent. In [2, 4], tasks may depart but the algorithms are competitive against peak load only. <p> It must be assigned to one server in that subset. If no tasks ever depart and tasks cannot be preempted, the best possible competitive ratio for both randomized and deterministic algorithms is (log n); this ratio is achievable with a simple greedy strategy <ref> [5] </ref>. Azar et al.[4] showed that when tasks both arrive and depart, no non-preemptive algorithm can be better than O ( p n) competitive against peak load. An non-preemptive algorithm that is O ( p n) competitive against peak load is given in [3].
Reference: [6] <author> Y. Bartal, A. Fiat, H. Karloff, and R. Vohra. </author> <title> New algorithms for an ancient scheduling problem. </title> <booktitle> In Proc. 24nd ACM Symp. on Theory of Computing, </booktitle> <year> 1992. </year>
Reference-contexts: There are several algorithms that are competitive against peak load with a ratio 2 * for a small constant * <ref> [6, 7, 8] </ref>, but as mentioned above, none of these are better than n-competitive against current load.
Reference: [7] <author> R. L. Graham. </author> <title> Bounds for certain multiprocessing anomalies. </title> <journal> Bell System Technical Journal, </journal> <volume> 45 </volume> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference-contexts: That is, the maximum load on an on-line server is no more than c times the maximum load in an optimal assignment of the currently active tasks. The distinction between peak load and current load is quite significant. For example, consider Graham's <ref> [7] </ref> list processing heuristic for identical machines. which simply assigns each new task to the least loaded server, and never reassigns a task. It is noted in [4] that this algorithm is 2-competitive against peak load. <p> There are several algorithms that are competitive against peak load with a ratio 2 * for a small constant * <ref> [6, 7, 8] </ref>, but as mentioned above, none of these are better than n-competitive against current load.
Reference: [8] <author> D. R. Karger, S. J. Phillips, and E. Torng. </author> <title> A better algorithm for an ancient scheduling problem. </title> <booktitle> In Proc. 1994 ACM/SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: There are several algorithms that are competitive against peak load with a ratio 2 * for a small constant * <ref> [6, 7, 8] </ref>, but as mentioned above, none of these are better than n-competitive against current load.
Reference: [9] <author> E. L. Lawler, J. K. Lenstra, A. H. Rinnooy Kan, and D. B. Shmoys. </author> <title> Sequencing and scheduling: Algorithms and complexity. </title> <editor> In S. C. Graves, A. Rinnooy Kan, and P. Zipkin, editors, </editor> <booktitle> Handbook of Operations Research and Management Science, Volume IV: Production Planning and Inventory, </booktitle> <pages> pages 445-522. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: Again, the start time of each application is unknown, as is the total number of queries per task. In this paper, we consider the following specific load balancing problems. The survey paper by Lawler et al. <ref> [9] </ref> lists many others. * Identical Machines: Each task u has an associated weight w u and can be served by any one of the servers.
Reference: [10] <author> S. Phillips and J. Westbrook. </author> <title> On-line load balancing and network flow. </title> <booktitle> In Proc. 1993 Symp. on Theory of Computing, </booktitle> <pages> pages 402-411, </pages> <month> Apr. </month> <year> 1993. </year> <month> 12 </month>
Reference-contexts: An adversary may generate n 2 unit cost tasks. Some server v must have load at least n. The adversary then deletes all tasks except for those on v. With the exception of <ref> [10] </ref>, all previous papers on on-line load balancing have dealt only with peak load. In [1, 3, 5], tasks never depart, in which case current and peak load are equivalent. In [2, 4], tasks may depart but the algorithms are competitive against peak load only. <p> The behavior of load-balancing algorithms that are competitive against current load cannot be skewed by some transient peak. The current load measure is also required in the application of load balancing to network flow described in <ref> [10] </ref>. Naturally, an algorithm that is c-competitive against current load is c-competitive against peak load. As observed above, an algorithm cannot be competitive against current load unless it is allowed to occasionally reassign tasks. We study the tradeoff between the cost of reassignment and the competitive ratio. <p> In Section 4 we study the restricted assignment problem, and give a rebalancing scheme that is parameterizable to trade off competitive ratio against restart cost; its best competitive ratio is O (1) at a restart cost of O (S log n). Previously, Phillips and Westbrook <ref> [10] </ref> give a preemptive algorithm that is O ((log n)=)-competitive against current load while incurring restart cost S, where 0 &lt; 1 is a user-specified parameter. Their algorithm works for arbitrary weights. <p> All results follow by applying the lemma to algorithms presented herein, with the exception of the algorithm for general weights in the restricted subset case, which follows by applying the lemma to the algorithm in <ref> [10] </ref> While the bounds of this section are perhaps not ideal, in that they depend on the value of a ratio between input costs, it is worth noting that they remain independent of the number of tasks.
References-found: 10

