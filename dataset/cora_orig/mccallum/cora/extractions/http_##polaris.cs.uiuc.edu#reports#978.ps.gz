URL: http://polaris.cs.uiuc.edu/reports/978.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: SOLVING NAVIER-STOKES EQUATIONS ON THE CEDAR MULTI-CLUSTER SYSTEM  
Author: JACQUES LAMINIE AND ULRIKE MEIER 
Abstract: The Cedar multi-cluster system is a machine with several levels of parallelism and memory. We compare two different Cedar-implementations of a Navier-Stokes solver kernel, the Generalized Stokes problem which is discretized here by a Mixed Finite Element Method. The arising linear system is solved by the conjugate gradient Uzawa algorithm. The two implementation approaches are a static approach which we call "fork and join" where task distribution and synchronization points are a priori defined by the user and a dynamic approach called here "dynamic task distribution" where the tasks are placed into a queue from which a free cluster can fetch a task without violating the tree of dependencies. Both implementations are described, and numerical results for the most time consuming part, Uzawa's algorithm, are given. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. GLOWINSKI and J. </author> <title> PERIAUX, Numerical Methods for nonlinear Problem in Fluid Dynamics, Supercomputing, </title> <editor> A.Lichnewsky, C. Saguez Editors, </editor> <publisher> North-Holland, </publisher> <year> 1987. </year>
Reference-contexts: The scalar ff is obtained from the discretization of the Navier-Stokes equations. The Generalized Stokes problem appears in a variety of Navier-Stokes solvers, e.g. in the time discretization by operator splitting methods <ref> [1] </ref> or in transport-diffusion methods [2]. If we discretize the Generalized Stokes problem by a Mixed Finite Element Method which satisfies the Babuska-Brezzi condition, problem (1) has a unique solution [3].
Reference: [2] <author> O. PIRONNEAU, </author> <title> On the Transport Diffusion Algorithm and its Applications to the Navier-Stokes equation, </title> <journal> Numer. Math. </journal> <volume> 38 (1982), </volume> <pages> pp 309-332. </pages>
Reference-contexts: The scalar ff is obtained from the discretization of the Navier-Stokes equations. The Generalized Stokes problem appears in a variety of Navier-Stokes solvers, e.g. in the time discretization by operator splitting methods [1] or in transport-diffusion methods <ref> [2] </ref>. If we discretize the Generalized Stokes problem by a Mixed Finite Element Method which satisfies the Babuska-Brezzi condition, problem (1) has a unique solution [3].
Reference: [3] <author> R. TEMAM, </author> <title> Navier-Stokes Equations, </title> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference-contexts: If we discretize the Generalized Stokes problem by a Mixed Finite Element Method which satisfies the Babuska-Brezzi condition, problem (1) has a unique solution <ref> [3] </ref>.
Reference: [4] <author> U. MEIER and A. SAMEH, </author> <title> The Behavior of Conjugate Gradient Schemes on a Multi-Vector Processor with a Hierarchical Memory, </title> <journal> J. Comp. App. Math., </journal> <volume> 24 (1988), </volume> <pages> pp. 13-32. </pages>
Reference-contexts: Moreover, all linear algebra kernels which are linear system solvers, dotproducts and daxpys are performed now locally on the concurrent-vector level. For further details on the performance of preconditioned CG schemes and the linear algebra kernels they are composed of on one cluster see <ref> [4] </ref>. The linear systems are solved here by the classical conjugate gradient method (CG) or CG with an Incomplete Cholesky preconditioner (ICCG).
Reference: [5] <author> J. LAMINIE, </author> <title> Parallel Programming with a Scheduler, </title> <type> Technical Report, </type> <year> 1990. </year>
Reference-contexts: Two task decomposition of one iteration step of Uzawa's algorithm brief description of the routines involved is following. For further details see <ref> [5] </ref>. From the user's view point, this mechanism is managed by the following three subroutines : PCINIT : Initializes the queue, locks and events, starts the multitasking session, calls PCEXEC which inspects the queue call tasks. PCSUBM : Adds a task to the queue.
Reference: [6] <author> U. MEIER, </author> <title> Preconditioned Conjugate Gradient Schemes for Hierarchical Parallel Architectures, </title> <type> Technical Report, </type> <year> 1990. </year> <month> 6 </month>
Reference-contexts: we obtain a higher speedup for "fork and join", whereas the speedup is comparable for medium system sizes. * The superlinear speedup obtained with "dynamic task distribution" for m = 32 is caused by a favorable combination of global memory and cache, a phe nomena which was also observed in <ref> [6] </ref>. * The use of more than 2 clusters in Table 2 slightly improves the timings due to a higher cluster availability. 6. Future research. We have been able to investigate only a very small part of an interesting problem. <p> A more complicated question is however : How can we implement it on k clusters if k is greater than n? We will have to split the inner linear system solves in independent pieces and spread them across clusters as done in <ref> [6] </ref>. Another question that arises here is: How many clusters can be utilized efficiently? High parallelism might only be achieved by keeping the tasks small. The tradeoff of small grain parallelism is a large synchronization overhead.
References-found: 6

