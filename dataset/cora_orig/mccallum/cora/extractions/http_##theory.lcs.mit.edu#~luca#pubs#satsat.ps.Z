URL: http://theory.lcs.mit.edu/~luca/pubs/satsat.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~luca/papers.html
Root-URL: 
Title: Approximating Satisfiable Satisfiability Problems [Extended Abstract]  
Author: Luca Trevisan 
Abstract: We study the approximability of the Maximum Satisfiability Problem (Max SAT) and of the boolean k-ary Constraint Satisfaction Problem (Max kCSP) restricted to satisfiable instances. For both problems we improve on the performance ratios of known algorithms for the unrestricted case. Our approximation for satisfiable MAX 3CSP instances is better than any possible approximation for the unrestricted version of the problem (unless P= NP). This result implies that the requirements of perfect completeness and non-adaptiveness weaken the acceptance power of PCP verifiers. We also present the first non-trivial results about PCP classes defined in terms of free bits that collapse to P.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> G. Andersson and L. Engebretsen. </author> <title> Better approximation algorithms and tighter analysis for set splitting and not-all-equal sat. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 <ref> [1] </ref> (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results.
Reference: 2. <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proc. of FOCS'92, </booktitle> <pages> pages 14-23. </pages>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [23, 19] and the computation of PCP verifiers <ref> [2, 25] </ref>; complete classifications of their approximability properties, for the case of boolean variables, appear in [9, 20]. We call Max kCSP ? trevisan@cui.unige.ch. Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. the constraint satisfaction problem where every constraint involves at most k variables. <p> The restriction to satisfiable instances of Max kCSP corresponds to the restriction to nonadaptive PCP verifiers with perfect completeness. 3 The requirement of perfect completeness and non-adaptiveness appeared in the first defitions of PCP and in several improved proofs of it <ref> [3, 2, 6, 7] </ref>. Recently, adaptiveness (with perfect completeness) was used in [5], and a verifier without perfect completeness (but non-adaptive) appears in [17]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. <p> We say that L 2 naPCP c;s [log; q] if V , in addition, queries the q bits non-adaptively. Theorem 8 <ref> [2] </ref>.
Reference: 3. <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs; a new characterization of NP. </title> <booktitle> In Proc. of FOCS'92, </booktitle> <pages> pages 2-13, </pages> <year> 1992. </year>
Reference-contexts: The restriction to satisfiable instances of Max kCSP corresponds to the restriction to nonadaptive PCP verifiers with perfect completeness. 3 The requirement of perfect completeness and non-adaptiveness appeared in the first defitions of PCP and in several improved proofs of it <ref> [3, 2, 6, 7] </ref>. Recently, adaptiveness (with perfect completeness) was used in [5], and a verifier without perfect completeness (but non-adaptive) appears in [17]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. <p> There exists a polynomial-time :5145-approximate algorithm for GL1-Max 3CSP. Theorem 23. naPCP 1;:514 <ref> [log; 3] </ref> P. 7 Free Bits We define free bits as a property of boolean functions. There are two possible definitions. Definition 24. A function f : f0; 1g q ! f0; 1g uses f non-adaptive free bits if it has at most 2 f satisfying assignments.
Reference: 4. <author> L. Babai and P. Frankl. </author> <title> Linear Algebraic Methods in Combinatorics (2nd Preliminary version). </title> <note> Monograph in preparation, </note> <year> 1992. </year>
Reference-contexts: Theorem 8 [2]. If GL1-Max kCSP is r-approximable, then naPCP 1;s [log; k] P for any s &lt; r. 3 Some Applications of the Linear Algebra Method The linear algebra method in combinatorics <ref> [4] </ref> is a collection of techniques that prove combinatorial results making use of the following well-known fact: if we have a set of n-dimensional vectors that are linearly independent, then the size of the set is at most n.
Reference: 5. <author> M. Bellare, O. Goldreich, and M. Sudan. </author> <title> Free bits, PCP's and non-approximability towards tight results (4th version). </title> <type> Technical Report TR95-24, </type> <institution> ECCC, </institution> <year> 1996. </year> <note> Preliminary version in Proc. of FOCS'95. </note>
Reference-contexts: There is a corresponding history of continuous improvements in the non-approximability; we do not mention it here (the interested reader can find it in <ref> [5] </ref>), and we only recall that the best known hardness is 7=8+* due to H-astad [17], and it still holds when restricting to satisfiable instances with exactly three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A <p> Recently, adaptiveness (with perfect completeness) was used in <ref> [5] </ref>, and a verifier without perfect completeness (but non-adaptive) appears in [17]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [5]. <p> completeness) was used in <ref> [5] </ref>, and a verifier without perfect completeness (but non-adaptive) appears in [17]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [5]. The best known approximation for Max kCSP, for general k, is 2 1k [25]. Our results. We improve the approximation to (k + 1)2 k for satisfiable instances. 3 A verifier has perfect completeness if it accepts a correct proof with probability 1. Source of our improvement. <p> It is easy to see that, with two queries, it is impossible to get perfect completeness, while with 3 it is possible (see e.g. <ref> [5] </ref>). The challening question arises of determining which is the best soundness achievable with three bits and perfect completeness. <p> proof, there at most 2 f possible answers that make him accept (this is why f cannot be larger than the number of query bits.) This definition has been used almost always, including in H-astad's papers on Max Clique (where he used the free bit-efficient complete test.) One exception is <ref> [5] </ref>, where an adaptive version of the definition of free bits is used. We also mention that the free bit parameter has almost always been used for verifiers with perfect completeness (Bellare et al. [5] also show that one can always reduce the free bit complexity by reducing the completeness.) However, <p> H-astad's papers on Max Clique (where he used the free bit-efficient complete test.) One exception is <ref> [5] </ref>, where an adaptive version of the definition of free bits is used. We also mention that the free bit parameter has almost always been used for verifiers with perfect completeness (Bellare et al. [5] also show that one can always reduce the free bit complexity by reducing the completeness.) However, the currently best hardness result for Min Vertex Cover is due to H-astad [17] and uses a verifier with low free bit complexity and completeness 1 *, for any * &gt; 0. <p> The only result was that, with perfect completeness, it is impossible to characterize NP with only 1 free bit, while log 3 free bits are sufficient <ref> [5] </ref>. It has been conjectured that with log 3 free bits and perfect completeness it is possible to achieve any soundness. Our result. <p> We also need the definition of gadgets. Definition 5 (Gadget <ref> [5] </ref>). <p> Using the FGW algorithm with the Source Target ff Due to Constraint Constraint 3SAT 2SAT 3:5 [26] 4SAT 2SAT 6 This paper 3CSP 3 2SAT 5:5 This paper 3CSP 4 2SAT 5:5 This paper not linear 3CSP 4 2SAT 11 <ref> [5] </ref> linear 3CSP 5 2SAT 8:25 This paper 3CSP 6 2SAT 5:5 This paper Table 3. Gadgets used. <p> The class naFPCP c;s [log; f] is defines analogously by using the non-adaptive free bit parameter. Regarding recent constructions of verifiers optimized for the free bit parameter, the verifiers that use the Complete Test [16] are non-adaptive, while the verifier that uses the Extended Monomial Basis Test <ref> [5] </ref> is adaptive. We now state some results (the first ones with f &gt; 1) about naFPCP classes that collapse to P. Theorem 25.
Reference: 6. <author> M Bellare, S. Goldwasser, C. Lund, and A. Russell. </author> <title> Efficient probabilistically checkable proofs and applications to approximation. </title> <booktitle> In Proc. of STOC'94, </booktitle> <pages> pages 294-304. </pages>
Reference-contexts: The restriction to satisfiable instances of Max kCSP corresponds to the restriction to nonadaptive PCP verifiers with perfect completeness. 3 The requirement of perfect completeness and non-adaptiveness appeared in the first defitions of PCP and in several improved proofs of it <ref> [3, 2, 6, 7] </ref>. Recently, adaptiveness (with perfect completeness) was used in [5], and a verifier without perfect completeness (but non-adaptive) appears in [17]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness.
Reference: 7. <author> M. Bellare and M. Sudan. </author> <title> Improved non-approximability results. </title> <booktitle> In Proc. of STOC'94, </booktitle> <pages> pages 184-193. </pages>
Reference-contexts: The restriction to satisfiable instances of Max kCSP corresponds to the restriction to nonadaptive PCP verifiers with perfect completeness. 3 The requirement of perfect completeness and non-adaptiveness appeared in the first defitions of PCP and in several improved proofs of it <ref> [3, 2, 6, 7] </ref>. Recently, adaptiveness (with perfect completeness) was used in [5], and a verifier without perfect completeness (but non-adaptive) appears in [17]. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. <p> The interest in this parameter (implicit in [13] and explicitly introduced in <ref> [7] </ref>) lies in the fact that the "efficiency" of the reduction from PCP to Max Clique [12] depends only on the number of free bits of the verifier (indeed, it depends only on the amortized number of free bits, but we will not exploit the latter notion here).
Reference: 8. <author> J. Chen, D. Friesen, and H. Zheng. </author> <title> Tight bound on Johnson's algorithm for MaxSAT. </title> <note> In Proc. of CCC'97. To appear. </note>
Reference-contexts: The Maximum Satisfiability Problem. The Max SAT problem appears in a paper of Johnson [18] which is the first paper where the term "approximation algorithm" was introduced. Johnson proved that his algorithm was 1/2-approximate. It has been recently showed that Johnson's algorithm is indeed 2/3-approximate <ref> [8] </ref>. In the last five years, several improved approximation algorithms for Max SAT and its restricted versions Max 2SAT and Max 3SAT have been developed; we summarize such previous results in Table 1.
Reference: 9. <author> N. Creignou. </author> <title> A dichotomy theorem for maximum generalized satisfiability problems. </title> <journal> JCSS, </journal> <volume> 51(3) </volume> <pages> 511-522, </pages> <year> 1995. </year>
Reference-contexts: Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [23, 19] and the computation of PCP verifiers [2, 25]; complete classifications of their approximability properties, for the case of boolean variables, appear in <ref> [9, 20] </ref>. We call Max kCSP ? trevisan@cui.unige.ch. Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. the constraint satisfaction problem where every constraint involves at most k variables.
Reference: 10. <author> P. Crescenzi and L. Trevisan. </author> <title> MAX NP-completeness made easy. </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: Proof (Sketch). We use: (i) Johnson's algorithm [18]; (ii) the FGW algorithm, extended to length-3 and lenght-4 clauses with the TSSW method, and to longer clauses with a method of [15]; (iii) we solve the 2SAT sub-instance and then we apply a method of <ref> [10] </ref>. ut The gadget for lenght-4 clauses is new, as well as the idea of combining the reduction technique of [10] with a 2SAT algorithm. Theorem 16. There exists a :8-approximate algorithm for GL1-Max SAT and a :826-approximate algorithm for GL1-Max 3SAT. 5 The Max kCSP Algorithm Lemma 17. <p> length-3 and lenght-4 clauses with the TSSW method, and to longer clauses with a method of [15]; (iii) we solve the 2SAT sub-instance and then we apply a method of <ref> [10] </ref>. ut The gadget for lenght-4 clauses is new, as well as the idea of combining the reduction technique of [10] with a 2SAT algorithm. Theorem 16. There exists a :8-approximate algorithm for GL1-Max SAT and a :826-approximate algorithm for GL1-Max 3SAT. 5 The Max kCSP Algorithm Lemma 17.
Reference: 11. <author> U. Feige and M. Goemans. </author> <title> Approximating the value of two provers proof systems, with applications to MAX 2SAT and MAX DICUT. </title> <booktitle> In Proc. of ISTCS'95, </booktitle> <pages> pages 182-189. </pages>
Reference-contexts: with exactly three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl <ref> [11] </ref> (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl <ref> [11] </ref> (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results. <p> defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using <ref> [14, 15, 11, 22, 26] </ref>) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results. <p> Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers <ref> [15, 11] </ref>. Our results. We present a polynomial-time algorithm that, given a satisfiable Max SAT instance, satisfies a fraction :8 of the total weight of clauses, and an algorithm that, given a satisfiable Max 3SAT instance, satisfies a fraction :826 of the total weight of clauses. Source of our improvement. <p> The FGW <ref> [15, 11] </ref> algorithm for Max 2SAT is :931-approximate. We conclude this section with the definition of PCP classes and their relation with the approximability of Max kCSP. 5 GL1 stands for "Gap Location 1", which is the terminology of Petrank [24]. Definition 6 (Restricted verifier).
Reference: 12. <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Interactive proofs and the hardness of approximating cliques. </title> <journal> J. ACM, </journal> <volume> 43(2) </volume> <pages> 268-292, </pages> <year> 1996. </year> <note> Also Proc. of FOCS91. </note>
Reference-contexts: The interest in this parameter (implicit in [13] and explicitly introduced in [7]) lies in the fact that the "efficiency" of the reduction from PCP to Max Clique <ref> [12] </ref> depends only on the number of free bits of the verifier (indeed, it depends only on the amortized number of free bits, but we will not exploit the latter notion here).
Reference: 13. <author> U. Feige and J. Kilian. </author> <title> Two prover protocols low error at affordable rates. </title> <booktitle> In Proceedings of STOC'94, </booktitle> <pages> pages 172-183. </pages>
Reference-contexts: It is a relaxation of the notion of query bit: if a verifier queries q bits on the proof, than it uses at most f free bits, but a verifier using f free bits can red arbitrarily many bits. The interest in this parameter (implicit in <ref> [13] </ref> and explicitly introduced in [7]) lies in the fact that the "efficiency" of the reduction from PCP to Max Clique [12] depends only on the number of free bits of the verifier (indeed, it depends only on the amortized number of free bits, but we will not exploit the latter
Reference: 14. <author> M. Goemans and D. Williamson. </author> <title> New 3/4-approximation algorithms for the maximum satisfiability problem. </title> <journal> SIAM J. Disc. Math., </journal> <volume> 7(4) </volume> <pages> 656-666, </pages> <year> 1994. </year> <note> Also Proc. of IPCO'93. </note>
Reference-contexts: H-astad [17], and it still holds when restricting to satisfiable instances with exactly three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 <ref> [14] </ref> :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. <p> when restricting to satisfiable instances with exactly three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 <ref> [14] </ref> :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using <ref> [14, 15] </ref>) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using <ref> [27, 14, 15] </ref>) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using <ref> [14, 15, 11, 22, 26] </ref>) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results.
Reference: 15. <author> M.X. Goemans and D.P. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <journal> J. ACM, </journal> <volume> 42(6) </volume> <pages> 1115-1145, </pages> <year> 1995. </year> <note> Also Proc. of STOC'94. </note>
Reference-contexts: still holds when restricting to satisfiable instances with exactly three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl <ref> [15] </ref> (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using <ref> [14, 15] </ref>) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using <ref> [27, 14, 15] </ref>) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using <ref> [14, 15, 11, 22, 26] </ref>) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results. <p> Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers <ref> [15, 11] </ref>. Our results. We present a polynomial-time algorithm that, given a satisfiable Max SAT instance, satisfies a fraction :8 of the total weight of clauses, and an algorithm that, given a satisfiable Max 3SAT instance, satisfies a fraction :826 of the total weight of clauses. Source of our improvement. <p> The FGW <ref> [15, 11] </ref> algorithm for Max 2SAT is :931-approximate. We conclude this section with the definition of PCP classes and their relation with the approximability of Max kCSP. 5 GL1 stands for "Gap Location 1", which is the terminology of Petrank [24]. Definition 6 (Restricted verifier). <p> There exists a polynomial-time :8-approximate algorithm for GL1-Max SAT without unit clauses. Proof (Sketch). We use: (i) Johnson's algorithm [18]; (ii) the FGW algorithm, extended to length-3 and lenght-4 clauses with the TSSW method, and to longer clauses with a method of <ref> [15] </ref>; (iii) we solve the 2SAT sub-instance and then we apply a method of [10]. ut The gadget for lenght-4 clauses is new, as well as the idea of combining the reduction technique of [10] with a 2SAT algorithm. Theorem 16.
Reference: 16. <author> J. H-astad. </author> <title> Testing of the long code and hardness for clique. </title> <booktitle> In Proc. STOC'96, </booktitle> <pages> pages 11-19. </pages>
Reference-contexts: The class naFPCP c;s [log; f] is defines analogously by using the non-adaptive free bit parameter. Regarding recent constructions of verifiers optimized for the free bit parameter, the verifiers that use the Complete Test <ref> [16] </ref> are non-adaptive, while the verifier that uses the Extended Monomial Basis Test [5] is adaptive. We now state some results (the first ones with f &gt; 1) about naFPCP classes that collapse to P. Theorem 25.
Reference: 17. <author> J. H-astad. </author> <title> Some optimal inapproximability results. </title> <booktitle> In Proc. STOC'97, </booktitle> <pages> pages 1-10. </pages>
Reference-contexts: Our result for Max 3CSP is particularly strong, since we will present a :514-approximate algorithm for satisfiable Max 3CSP, while :501-approximation is NP-hard for the unrestricted Max 3CSP problem <ref> [17] </ref>. <p> There is a corresponding history of continuous improvements in the non-approximability; we do not mention it here (the interested reader can find it in [5]), and we only recall that the best known hardness is 7=8+* due to H-astad <ref> [17] </ref>, and it still holds when restricting to satisfiable instances with exactly three literals per clause. 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 <p> Recently, adaptiveness (with perfect completeness) was used in [5], and a verifier without perfect completeness (but non-adaptive) appears in <ref> [17] </ref>. The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [5]. The best known approximation for Max kCSP, for general k, is 2 1k [25]. <p> The challening question arises of determining which is the best soundness achievable with three bits and perfect completeness. The state of the art for this question is that NP can be checked with soundness :75 + * <ref> [17] </ref>, while this is impossible with soundness :367 [26], unless P = NP. Furthermore, it is possible to check NP with three queries, soundness :5 + * and completeness 1 * for any * &gt; 0 [17]. <p> for this question is that NP can be checked with soundness :75 + * <ref> [17] </ref>, while this is impossible with soundness :367 [26], unless P = NP. Furthermore, it is possible to check NP with three queries, soundness :5 + * and completeness 1 * for any * &gt; 0 [17]. The latter result implies that Max 3SAT is hard to approximate within 7=8 + *, but not when restricted to satisfiable instances. A different and more complicated proof was needed to prove the 7=8 + * hardness result also for satisfiable instances [17]. <p> 1 * for any * &gt; 0 <ref> [17] </ref>. The latter result implies that Max 3SAT is hard to approximate within 7=8 + *, but not when restricted to satisfiable instances. A different and more complicated proof was needed to prove the 7=8 + * hardness result also for satisfiable instances [17]. It was an open question whether soundness :5 + * is achievable with three queries and perfect completeness. Satisfiable instances Arbitrary instances Due to :125 :125 [23] :25 [25] :514 This paper Table 2. Evolution of the approximation factors for Max 3CSP with and without the satisfiability promise. <p> also mention that the free bit parameter has almost always been used for verifiers with perfect completeness (Bellare et al. [5] also show that one can always reduce the free bit complexity by reducing the completeness.) However, the currently best hardness result for Min Vertex Cover is due to H-astad <ref> [17] </ref> and uses a verifier with low free bit complexity and completeness 1 *, for any * &gt; 0. Even in the simple case of the non-adaptive definition and of perfect completeness there were basically no result about PCP classes with low free bit complexity collapsing to P.
Reference: 18. <author> D.S. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> JCSS, </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year>
Reference-contexts: In the rest of this section we describe in more details our results, partly clarifying the obscure terminology of the previous paragraph. The Maximum Satisfiability Problem. The Max SAT problem appears in a paper of Johnson <ref> [18] </ref> which is the first paper where the term "approximation algorithm" was introduced. Johnson proved that his algorithm was 1/2-approximate. It has been recently showed that Johnson's algorithm is indeed 2/3-approximate [8]. <p> There exists a polynomial-time :826-approximate algorithm for GL1-Max 3SAT without unit clauses. Proof (Sketch). We adapt the analysis of [26]. ut Lemma 15. There exists a polynomial-time :8-approximate algorithm for GL1-Max SAT without unit clauses. Proof (Sketch). We use: (i) Johnson's algorithm <ref> [18] </ref>; (ii) the FGW algorithm, extended to length-3 and lenght-4 clauses with the TSSW method, and to longer clauses with a method of [15]; (iii) we solve the 2SAT sub-instance and then we apply a method of [10]. ut The gadget for lenght-4 clauses is new, as well as the idea
Reference: 19. <author> S. Khanna, R. Motwani, M. Sudan, and U. Vazirani. </author> <title> On syntactic versus computational views of approximability. </title> <booktitle> In Proc. FOCS'94, </booktitle> <pages> pages 819-830. </pages>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP <ref> [23, 19] </ref> and the computation of PCP verifiers [2, 25]; complete classifications of their approximability properties, for the case of boolean variables, appear in [9, 20]. We call Max kCSP ? trevisan@cui.unige.ch.
Reference: 20. <author> S. Khanna, M. Sudan, and D.P. Williamson. </author> <title> A complete classification of the ap-proximability of maximization problems derived from boolean constraint satisfaction. </title> <booktitle> In Proc. STOC'97, </booktitle> <pages> pages 11-20. </pages>
Reference-contexts: Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [23, 19] and the computation of PCP verifiers [2, 25]; complete classifications of their approximability properties, for the case of boolean variables, appear in <ref> [9, 20] </ref>. We call Max kCSP ? trevisan@cui.unige.ch. Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. the constraint satisfaction problem where every constraint involves at most k variables. <p> Petrank observed that Max SAT remains MAX SNP-complete when restricted to satisfiable instances, and proved that the same is true for other problems, such as Max 3-Colorable Subgraph and Max 3-Dimensional Matching. More recenlty, Khanna, Sudan and Williamson <ref> [20] </ref> proved that for any MAX SNP-complete constraint satisfaction problem for which deciding sat-isfiability is NP-hard, the restriction to satisfiable instances remains MAX SNP-complete.
Reference: 21. <author> H.C. Lau and O. Watanabe. </author> <title> Randomized approximation of the constraint satisfaction problem. </title> <booktitle> In Proc. of SWAT'96, </booktitle> <pages> pages 76-87. </pages>
Reference: 22. <author> T. Ono, T. Hirata, and T. Asano. </author> <title> Approximation algorithms for the maximum satisfiability problem. </title> <booktitle> In Proc. of SWAT'96. </booktitle>
Reference-contexts: 2 The approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 <ref> [22] </ref> (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. <p> defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using <ref> [14, 15, 11, 22, 26] </ref>) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results.
Reference: 23. <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> JCSS, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year> <note> Also Proc. of STOC'88. </note>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP <ref> [23, 19] </ref> and the computation of PCP verifiers [2, 25]; complete classifications of their approximability properties, for the case of boolean variables, appear in [9, 20]. We call Max kCSP ? trevisan@cui.unige.ch. <p> A different and more complicated proof was needed to prove the 7=8 + * hardness result also for satisfiable instances [17]. It was an open question whether soundness :5 + * is achievable with three queries and perfect completeness. Satisfiable instances Arbitrary instances Due to :125 :125 <ref> [23] </ref> :25 [25] :514 This paper Table 2. Evolution of the approximation factors for Max 3CSP with and without the satisfiability promise. Our result.
Reference: 24. <author> E. Petrank. </author> <title> The hardness of approximations : Gap location. </title> <journal> Computational Complexity, </journal> <volume> 4 </volume> <pages> 133-157, </pages> <year> 1994. </year> <note> Also Proc. of ISTCS'93. </note>
Reference-contexts: Max kCSP), find in polynomial time an assignment that satisfies at a fraction r of the total weight of clauses (resp. constraints). The problem of approximating constraint satisfaction problems restricted to satisfiable instances has been considered by Petrank <ref> [24] </ref>, and called approximation problem at gap location one. Petrank observed that Max SAT remains MAX SNP-complete when restricted to satisfiable instances, and proved that the same is true for other problems, such as Max 3-Colorable Subgraph and Max 3-Dimensional Matching. <p> The FGW [15, 11] algorithm for Max 2SAT is :931-approximate. We conclude this section with the definition of PCP classes and their relation with the approximability of Max kCSP. 5 GL1 stands for "Gap Location 1", which is the terminology of Petrank <ref> [24] </ref>. Definition 6 (Restricted verifier). A verifier V for a language L is a proba-bilistic polynomial-time Turing machine that during its computations has oracle access to a string called proof. We denote by ACC [V (x)] the probability over its random tosses that V accepts x when accessing proof .
Reference: 25. <author> L. Trevisan. </author> <title> Positive linear programming, parallel approximation, </title> <booktitle> and PCP's. In Proc. of ESA'96, </booktitle> <pages> pages 62-75. </pages>
Reference-contexts: Problems of this kind, called constraint satisfaction problems, are of central interest in Artificial Intelligence. Their approximability properties are of interest in Theory of Computing since they can express the class MAX SNP [23, 19] and the computation of PCP verifiers <ref> [2, 25] </ref>; complete classifications of their approximability properties, for the case of boolean variables, appear in [9, 20]. We call Max kCSP ? trevisan@cui.unige.ch. Centre Universitaire d'Informatique, Universite de Geneve, Rue General-Dufour 24, CH-1211, Geneve, Switzerland. the constraint satisfaction problem where every constraint involves at most k variables. <p> The latter result was of particular interest, because it formerly appeared that "current techniques" could only yield PCP constructions with perfect completeness. The study of which PCP classes lie in P was initiated in [5]. The best known approximation for Max kCSP, for general k, is 2 1k <ref> [25] </ref>. Our results. We improve the approximation to (k + 1)2 k for satisfiable instances. 3 A verifier has perfect completeness if it accepts a correct proof with probability 1. Source of our improvement. We use again substitutions (but of a more general kind) as a preprocessing step. <p> A different and more complicated proof was needed to prove the 7=8 + * hardness result also for satisfiable instances [17]. It was an open question whether soundness :5 + * is achievable with three queries and perfect completeness. Satisfiable instances Arbitrary instances Due to :125 :125 [23] :25 <ref> [25] </ref> :514 This paper Table 2. Evolution of the approximation factors for Max 3CSP with and without the satisfiability promise. Our result.
Reference: 26. <author> L. Trevisan, G.B. Sorkin, M. Sudan, and D.P. Williamson. Gadgets, </author> <title> approximation, and linear programming. </title> <booktitle> In Proc. of FOCS'96, </booktitle> <pages> pages 617-626. </pages>
Reference-contexts: of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 <ref> [26] </ref> (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results. <p> defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using [27, 14, 15]) :801 [26] (using [11]) :768 [1] (using <ref> [14, 15, 11, 22, 26] </ref>) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT. The factors depicted with a fl do not appear explicitely in the referenced papers [15, 11]. Our results. <p> Source of our improvement. In both cases, we show how to reduce the given instance to an instance without unit clauses. The reduction sequentially applies a series of substitutions of values to variables. The :826 approximation for Max 3SAT then follows by adapting the analysis of <ref> [26] </ref> to the case of no unit clauses. The :8 approximation for Max SAT involves the use of known algorithms, with a couple of small changes. Maximum k-ary Constraint Satisfaction Problem. <p> The challening question arises of determining which is the best soundness achievable with three bits and perfect completeness. The state of the art for this question is that NP can be checked with soundness :75 + * [17], while this is impossible with soundness :367 <ref> [26] </ref>, unless P = NP. Furthermore, it is possible to check NP with three queries, soundness :5 + * and completeness 1 * for any * &gt; 0 [17]. <p> We then apply two algorithms and take the best solution. In one algorithm, we reduce all the constraints to 2SAT using gadgets, extending an idea of <ref> [26] </ref>. In the other algorithm we take a random solution for the set of linear constraints. Free bits. Besides the number of query bits, there is another very important parameter of the verifier that is studied in the field of probabilistic proof-checking: the number of free bits. <p> ; : : : ; y n , the following are satisfied: (8a : f (a) = 1) (8b) : j (8a : f (a) = 1) (9b) : j (8a : f (a) = 0) (8b) : j Gadgets can be used in approximation algorithms in the following way <ref> [26] </ref>. Assume we have a satisfiable instance of a constraint satisfaction problem, with constraints of total weight m, and there is ff-gadget reducing each such constraint to 2SAT. <p> There exists a polynomial-time :826-approximate algorithm for GL1-Max 3SAT without unit clauses. Proof (Sketch). We adapt the analysis of <ref> [26] </ref>. ut Lemma 15. There exists a polynomial-time :8-approximate algorithm for GL1-Max SAT without unit clauses. Proof (Sketch). <p> We have to find gadgets reducing the various possible 3-ary constraints to 2SAT constraints. The new constructions (and the old ones that we use) are listed in Table 3. All the gadgets are computer-constructed using the linear programming method of <ref> [26] </ref> and are the best possible. Using the FGW algorithm with the Source Target ff Due to Constraint Constraint 3SAT 2SAT 3:5 [26] 4SAT 2SAT 6 This paper 3CSP 3 2SAT 5:5 This paper 3CSP 4 2SAT 5:5 This paper not linear 3CSP 4 2SAT 11 [5] linear 3CSP 5 2SAT <p> The new constructions (and the old ones that we use) are listed in Table 3. All the gadgets are computer-constructed using the linear programming method of <ref> [26] </ref> and are the best possible. Using the FGW algorithm with the Source Target ff Due to Constraint Constraint 3SAT 2SAT 3:5 [26] 4SAT 2SAT 6 This paper 3CSP 3 2SAT 5:5 This paper 3CSP 4 2SAT 5:5 This paper not linear 3CSP 4 2SAT 11 [5] linear 3CSP 5 2SAT 8:25 This paper 3CSP 6 2SAT 5:5 This paper Table 3. Gadgets used.
Reference: 27. <author> M. Yannakakis. </author> <title> On the approximation of maximum satisfiability. </title> <journal> J. of Algorithms, </journal> <volume> 17 </volume> <pages> 475-502, </pages> <year> 1994. </year> <title> Also Proc. of SODA'92. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: approximation threshold r A of an optimization problem A is defined as r A = supfr : A admits an r-approximate algorithm g Max SAT Max 3SAT Due to :75 :75 [14] :758 :765 fl [15] (using [14]) :762 fl :77 fl [11] (using [14, 15]) :765 :769 [22] (using <ref> [27, 14, 15] </ref>) :801 [26] (using [11]) :768 [1] (using [14, 15, 11, 22, 26]) :8 :826 This paper for satisfiable instances Table 1. Evolution of the approximation factors for Max SAT and Max 3SAT.
References-found: 27

