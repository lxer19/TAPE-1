URL: http://ballade.cs.ucla.edu:8080/~cong/papers/fpga95_cutmap.ps.Z
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: Simultaneous Depth and Area Minimization in LUT-based FPGA Mapping  
Author: Jason Cong and Yean-Yow Hwang 
Address: Los Angeles, CA 90024  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper, we present an improvement of the FlwoMap algorithm, named CutMap, which combines depth and area minimization during the mapping process by computing min-cost min-height K-feasible cuts for critical nodes for depth minimization and computing min-cost K-feasible cuts for non-critical nodes for area minimization. CutMap guarantees depth-optimal mapping solutions in polynomial time as the FlowMap algorithm but uses considerably fewer K-LUTs. We have implemented CutMap and tested it on the MCNC logic synthesis benchmarks. For depth-optimal mapping solutions, CutMap uses 15% fewer K-LUTs than FlowMap. We also tested CutMap followed by the depth relaxation routines in FlowMap_r algorithm, which achieves area minimization by depth relaxation. CutMap followed FlowMap_r performs better than FlowMap_r. 
Abstract-found: 1
Intro-found: 1
Reference: [BrRS87] <author> Brayton, R. K., R. Rudell, and A. L. Sangiovanni-Vincentelli, </author> <title> ``MIS: A Multiple-Level Logic Optimization,'' </title> <journal> IEEE Transactions on CAD, </journal> <pages> pp. 1062-1081, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Experimental Results We have implemented the CutMap algorithm using the C language on Sun SPARC workstations. Given a general Boolean network, we uses the input/output and general utilities provided by MIS/SIS <ref> [BrRS87] </ref> to decompose it into a 2-input network of simple gates. Then we apply CutMap algorithm on the decomposed network to obtain a depth-optimal K-LUT mapping solution. Post-processing operations, including gate-decomposition, predecessor-packing [ChCD92] and FlowPack [CoDi94a], are applied to further reduce the number of LUTs in the solution.
Reference: [ChCD92] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, ``DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization,'' </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pp. 7-20, </pages> <month> Sep. </month> <year> 1992. </year>
Reference-contexts: Mappers such as Chortle [FrRC90], Mis-pga [MuNS90], Xmapa [Ka91a], FGMap [LaPV93] focus on minimizing the number of LUTs. Mappers such as Chortle-d [FrRV91b], Mis-pga-delay [MuSB91a], DAG-Map <ref> [ChCD92] </ref>, FlowMap [CoDi94a] focus on minimizing the delay of the LUT network. Other mappers, such as Rmap [ScKC92] optimize the routability of the mapping solution. Delay minimization has been achieved through various approaches. Chortle-d algorithm minimizes depth of LUT network using optimal tree based mapping algorithm and bin packing procedure. <p> However, one limitation of the FlowMap algorithm is that area minimization is not considered in the mapping process, but achieved by a separate sequence of post-processing operations, such as gate-decomposition, predecessor-packing <ref> [ChCD92] </ref> and FlowPack [CoDi94a] . These post-processing operations, although effective, may lead to suboptimal solutions in terms of area minimization. <p> Given a general Boolean network, we uses the input/output and general utilities provided by MIS/SIS [BrRS87] to decompose it into a 2-input network of simple gates. Then we apply CutMap algorithm on the decomposed network to obtain a depth-optimal K-LUT mapping solution. Post-processing operations, including gate-decomposition, predecessor-packing <ref> [ChCD92] </ref> and FlowPack [CoDi94a], are applied to further reduce the number of LUTs in the solution. In our experiments, we target a 5-LUT based mapping solution to reflect, e.g., the X3000 FPGA family produced by Xilinx.
Reference: [CoDi93b] <author> Cong, J. and Y. Ding, </author> <title> ``Beyond the Combinatorial Limit in Depth Minimization for LUT-Based FPGA Designs,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 110-114, </pages> <year> 1993. </year>
Reference-contexts: We further reduce its runtime using the max-flow information. The recent algorithm named FlowSYN <ref> [CoDi93b] </ref> uses functional decomposition based re-synthesis during the FlowMap mapping process and achieves good results in terms of both depth and area minimization. In most cases, FlowSYN outperforms CutMap in terms of both depth and area, but require longer runtime.
Reference: [CoDi94a] <author> Cong, J. and Y. Ding, </author> <title> ``An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs,'' </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> Vol. 13, </volume> <pages> pp. 1-12, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Mappers such as Chortle [FrRC90], Mis-pga [MuNS90], Xmapa [Ka91a], FGMap [LaPV93] focus on minimizing the number of LUTs. Mappers such as Chortle-d [FrRV91b], Mis-pga-delay [MuSB91a], DAG-Map [ChCD92], FlowMap <ref> [CoDi94a] </ref> focus on minimizing the delay of the LUT network. Other mappers, such as Rmap [ScKC92] optimize the routability of the mapping solution. Delay minimization has been achieved through various approaches. Chortle-d algorithm minimizes depth of LUT network using optimal tree based mapping algorithm and bin packing procedure. <p> Chortle-d algorithm minimizes depth of LUT network using optimal tree based mapping algorithm and bin packing procedure. Mis-pga-delay combines technology mapping with layout synthesis for delay minimization. DAG-Map uses Lawler's labeling algorithm for depth minimization. An important advance in K-LUT based FPGA depth minimization is the FlowMap algorithm <ref> [CoDi94a] </ref> which guarantees depth-optimal mapping solutions in polynomial time for general K-bounded networks. On average, FlowMap outperforms Chortle-d by 4.8% in depth and 50.4% in area, DAG-Map by 2.4% in depth and 8.6% in area, and Mis-pga-delay by 7.1% in depth and 9.8% in area [CoDi94a]. <p> minimization is the FlowMap algorithm <ref> [CoDi94a] </ref> which guarantees depth-optimal mapping solutions in polynomial time for general K-bounded networks. On average, FlowMap outperforms Chortle-d by 4.8% in depth and 50.4% in area, DAG-Map by 2.4% in depth and 8.6% in area, and Mis-pga-delay by 7.1% in depth and 9.8% in area [CoDi94a]. However, one limitation of the FlowMap algorithm is that area minimization is not considered in the mapping process, but achieved by a separate sequence of post-processing operations, such as gate-decomposition, predecessor-packing [ChCD92] and FlowPack [CoDi94a] . <p> depth and 8.6% in area, and Mis-pga-delay by 7.1% in depth and 9.8% in area <ref> [CoDi94a] </ref>. However, one limitation of the FlowMap algorithm is that area minimization is not considered in the mapping process, but achieved by a separate sequence of post-processing operations, such as gate-decomposition, predecessor-packing [ChCD92] and FlowPack [CoDi94a] . These post-processing operations, although effective, may lead to suboptimal solutions in terms of area minimization. <p> Consider the computation of label (v ) for a node v in the sorting list. Let p be the largest label of nodes in N v , excluding v. Then node v has a label of either p or p + 1 <ref> [CoDi94a] </ref>. When node u is a fanin node of node v, collapsing node u into v denotes the operation of removing u from N v and replacing every edge (t,u) E (N v ) by (t,v ). <p> Then we apply CutMap algorithm on the decomposed network to obtain a depth-optimal K-LUT mapping solution. Post-processing operations, including gate-decomposition, predecessor-packing [ChCD92] and FlowPack <ref> [CoDi94a] </ref>, are applied to further reduce the number of LUTs in the solution. In our experiments, we target a 5-LUT based mapping solution to reflect, e.g., the X3000 FPGA family produced by Xilinx. It has been reported in [CoDi94a] that FlowMap outperforms other speed-oriented mapper such as Chortle-d, DAG-Map and MIS-pga-delay <p> Post-processing operations, including gate-decomposition, predecessor-packing [ChCD92] and FlowPack <ref> [CoDi94a] </ref>, are applied to further reduce the number of LUTs in the solution. In our experiments, we target a 5-LUT based mapping solution to reflect, e.g., the X3000 FPGA family produced by Xilinx. It has been reported in [CoDi94a] that FlowMap outperforms other speed-oriented mapper such as Chortle-d, DAG-Map and MIS-pga-delay by as much as 50% in area and 7.1% in depth. Hence, we compare CutMap mapping solutions with only those by FlowMap.
Reference: [CoDi94b] <author> Cong, J. and Y. Ding, </author> <title> ``On Area/Depth Tradeoff in LUT-Based FPGA Technology Mapping,'' </title> <journal> IEEE Trans. on VLSI Systems, </journal> <volume> Vol. 2, </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: We have implemented CutMap and tested it on the MCNC logic synthesis benchmarks. For depth-optimal mapping solutions, CutMap uses 15% fewer K-LUTs than FlowMap. In addition, we tested CutMap followed by depth relaxation routines in FlowMap_r <ref> [CoDi94b] </ref> for further area minimization. CutMap followed FlowMap_r also performs better than FlowMap_r in term of number of LUTs in the mapping solution. The remainder of this paper is organized as follows. Section 2 gives the problem formulation and defines the basic terminology. <p> Experimental results are presented in Section 4. Section 5 gives conclusion and future research direction. The proofs of all theorems in this paper are omitted due to page limitation and can be found in [CoHw95]. 2. Problem Formulation We use the notions defined in <ref> [CoDi94b] </ref>. A combinational Boolean network can be represented by a directed acyclic graph (DAG) where a node represents a logic gate and a directed edge (u,v) represents a connection from the output of gate u to the input of gate v. <p> In fact, this is unnecessary for those LUTs on non-critical paths in order to have a depth-optimal mapping solution. Applying depth relaxation operations and re-mapping can further decrease the number of LUTs in the FlowMap mapping solution as reported in FlowMap_r <ref> [CoDi94b] </ref>. 3.2. Overview of CutMap Algorithm In our approach, we do not store a cut for each node in the first phase, instead, we compute either a min-height K-feasible cut or a min-cost K-feasible cut depending on the depth criticality of the mapped node. <p> A fanout-free cone (FFC) at v, denoted FFC v , is a cone of v such that for every uv FFC v , output (u) FFC v . The MFFC at v, denoted MFFC v , is the fanout-free cone at v of maximal number of nodes <ref> [CoDi94b] </ref>. The MFFCs have the following properties: (i) If w MFFC v , then MFFC w MFFC v . (ii) Two MFFCs are either disjoint or one contains another. (iii) Let (X v ,X v ) be a min-cut of N v . <p> Then for each MFFC i in the MFFC decomposition of N v , either X v MFFC i = or MFFC i X v <ref> [CoDi94b, CoLB94] </ref>. We decompose the network into MFFCs. Such decomposition is unique. If the size of MFFC v is sufficiently large, node v is very likely to be implemented by a LUT. Otherwise, a K-feasible cut through MFFC v will force more nodes to be implemented. <p> Numbers in row I and II are the numbers reported by CutMap without and with applying Theorem 3 for speed-up, respectively. It is clear that CutMap gains significant speedup based on the result of Theorem 3. In Table 3, we showed the results of FlowMap_r <ref> [CoDi94b] </ref> and CutMap followed by depth relaxation routines in FlowMap_r on 11 MCNC benchmarks for relaxed depth X = 0,1,2,3. It has been shown in [CoDi94b] that depth relaxation decreases the number of LUTs substantially on these benchmarks. <p> It is clear that CutMap gains significant speedup based on the result of Theorem 3. In Table 3, we showed the results of FlowMap_r <ref> [CoDi94b] </ref> and CutMap followed by depth relaxation routines in FlowMap_r on 11 MCNC benchmarks for relaxed depth X = 0,1,2,3. It has been shown in [CoDi94b] that depth relaxation decreases the number of LUTs substantially on these benchmarks. FlowMap_r was originally designed to perform depth relaxation and remapping on a depth-optimal solution produced by FlowMap for area minimization.
Reference: [CoHw95] <author> Cong, J. and Y.-Y. Hwang, </author> <title> ``Simultaneous Depth and Area Minimization in LUT-Based FPGA Mapping,'' </title> <booktitle> Proc. ACM 3rd Int'l Symp. on Field Programmable Gate Arrays, </booktitle> <pages> pp. 68-74, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Section 3 reviews FlowMap algorithm and present our CutMap algorithm. Experimental results are presented in Section 4. Section 5 gives conclusion and future research direction. The proofs of all theorems in this paper are omitted due to page limitation and can be found in <ref> [CoHw95] </ref>. 2. Problem Formulation We use the notions defined in [CoDi94b].
Reference: [CoLB94] <author> Cong, J., Z. Li, and R. Bagrodia, </author> <title> ``Acyclic Multi-Way Partitioning of Boolean Networks,'' </title> <booktitle> Proc. ACM/IEEE 31st Design Automation Conf., </booktitle> <pages> pp. 670-675, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Then for each MFFC i in the MFFC decomposition of N v , either X v MFFC i = or MFFC i X v <ref> [CoDi94b, CoLB94] </ref>. We decompose the network into MFFCs. Such decomposition is unique. If the size of MFFC v is sufficiently large, node v is very likely to be implemented by a LUT. Otherwise, a K-feasible cut through MFFC v will force more nodes to be implemented.
Reference: [FaSa94] <author> Farrahi, A. and M. Sarrafzadeh, </author> <title> ``Complexity of the Lookup-Table Minimization Problem for FPGA Technology Mapping,'' </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. </volume> <pages> 13(11) pp. </pages> <address> 1319--1332, </address> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: It has been shown recently that the area-optimal technology mapping problem for K-bounded networks is NP-hard <ref> [FaSa94] </ref>. The BDMAM problem is a more general problem because the solution is additionally constrained by a depth bound D. When D is sufficiently large, the BDMAM problem becomes the area-optimal mapping problem. Hence, the BDMAM problem is also NP-hard. We shall develop efficient heuristic algorithm for the BDMAM problem.
Reference: [FrRC90] <author> Francis, R. J., J. Rose, and K. Chung, </author> <month> ``Chortle: </month>
Reference-contexts: 1. Introduction Previous work on lookup table (LUT) based FPGA technology mapping aims at either area minimization, or depth minimization, or routability optimization as their primary goal. Mappers such as Chortle <ref> [FrRC90] </ref>, Mis-pga [MuNS90], Xmapa [Ka91a], FGMap [LaPV93] focus on minimizing the number of LUTs. Mappers such as Chortle-d [FrRV91b], Mis-pga-delay [MuSB91a], DAG-Map [ChCD92], FlowMap [CoDi94a] focus on minimizing the delay of the LUT network. Other mappers, such as Rmap [ScKC92] optimize the routability of the mapping solution.
References-found: 9

