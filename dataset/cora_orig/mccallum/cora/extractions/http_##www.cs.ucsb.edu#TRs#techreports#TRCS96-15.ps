URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS96-15.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: teo@cs.ucsb.edu  
Title: Multimessage Multicasting: Complexity and Approximations  
Author: Teofilo F. Gonzalez 
Note: q (d 1), for any integer q such that k &gt; q &gt;=  
Date: Revised: August 19, 1996  2.  
Address: Santa Barbara, CA, 93106  
Affiliation: Department of Computer Science University of California,  
Abstract: We consider Multimessage Multicasting over the n processor complete (or fully connected) static network (MM C ). First we present a linear time algorithm that constructs for every degree d problem instance a communication schedule with total communication time at most d 2 , where d is the maximum number of messages that each processor may send (receive). Then we present degree d problem instances such that all their communication schedules have total communication time at least d 2 . We observe that our lower bound applies when the fan-out (maximum number of processors receiving any given message) is huge, and thus the number of processors is also huge. Since this environment is not likely to arise in the near future, we turn our attention to the study of important subproblems that are likely to arise in practice. We show that when each message has fan-out k = 1 the M M C problem corresponds to the Makespan Openshop Preemptive Scheduling problem which can be solved in polynomial time, and show that for k 2 our problem is NP-complete. We present an algorithm to generate a communication schedule with total communication time 2d 1 for any degree d problem instance with fan-out k = 2. Our main result is an O(q d e) time algorithm, where e nd (the Our algorithms are centralized and require all the communication information ahead of time. Applications where all of this information is readily available include iterative algorithms for solving linear equations, and most dynamic programming procedures. The Meiko CS-2 machine and in general computer systems with processors communicating via dynamic permutation networks whose basic switches can act as data replicators (e.g., n by n Benes network with 2 by 2 switches that can also act as data replicators) will also benefit from our results at the expense of doubling the number of communication phases. Keywords: Approximation Algorithms, Multimessage Multicasting, Dynamic Net works, Parallel Iterative Methods, Communication Schedules. fl A preliminary version of the results presented in this paper appear in the Proceedings of the Third International Workshop on Parallel Algorithms for Irregularly Structured Problems (Irregular'96) input length), with an approximation bound of qd + k
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. S. Almasi, and A. Gottlieb, </author> <title> Highly Parallel Computing, </title> <publisher> The Benjamin/Cummings Publishing Co., Inc., </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: The first phase replicates data and transmits it to other processors, and the second phase distributes the data to the appropriate processors. This well-known approach ([14], [15], and [17]) will be discussed in more detail after defining some important terms. The IBM GF11 machine <ref> [1] </ref>, and the Meiko CS-2 machine use Benes networks for processor interconnection. The two stage translation process can also be used in the Meiko CS-2 computer system, and any multimessage multicasting schedule can be realized by using basic synchronization primitives.
Reference: [2] <author> E. G. Coffman, Jr, M. R. Garey, D. S. Johnson, and A. S. LaPaugh, </author> <title> Scheduling File Transfers in Distributed Networks, </title> <journal> SIAM J. on Computing, </journal> <volume> 14(3) (1985), </volume> <pages> pp. 744 - 780. </pages>
Reference-contexts: It is not surprising that several authors have studied the M U C problem as well as several interesting variations for which NP-completeness has been established, subproblems have been shown to be polynomially solvable, and approximation algorithms and heuristics have been developed. Coffman, Garey, Johnson and LaPaugh <ref> [2] </ref> studied a version the multimessage unicasting problem when messages have different lengths, each processor can send (receive) ff (P i ) 1 (fi (P i ) 1) messages simultaneously, and messages are transmitted without interruption (non-preemptive mode). Whitehead [19] considered the case when messages can be sent indirectly.
Reference: [3] <author> H.-A. Choi, and S. L. Hakimi, </author> <title> Data Transfers in Networks, </title> <journal> Algorithmica, </journal> <volume> Vol. 3, </volume> <year> (1988), </year> <pages> pp. 223 - 245. </pages>
Reference-contexts: Whitehead [19] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], <ref> [3] </ref>), Hajek and Sasaki [12], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [10]. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [4] <author> H.-A. Choi, and S. L. Hakimi, </author> <title> Scheduling File Transfers for Trees and Odd Cycles, </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 16, No. 1, </volume> <month> February </month> <year> 1987, </year> <pages> pp. 162 - 168. </pages>
Reference: [5] <author> H.-A. Choi, and S. L. Hakimi, </author> <title> "Data Transfers in Networks with Transceivers," </title> <journal> Networks, </journal> <volume> Vol. 17, </volume> <year> (1987), </year> <pages> pp. 393 - 421. </pages>
Reference-contexts: Whitehead [19] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], <ref> [5] </ref>, [3]), Hajek and Sasaki [12], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [10]. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [6] <author> Gonzalez, T. F., </author> <title> "Multi-Message Multicasting," Proceedings of the Third International Workshop on Parallel Algorithms for Irregularly Structured Problems (Irregular'96), </title> <note> to appear. </note>
Reference-contexts: The value of constant a 1 for the different methods we have developed and for different values for k is given in Table 3. The methods labeled "simple" are for the method in the previous section. The other methods appear in <ref> [6] </ref> and [7], and allow for a limited form of recoloration [18]. For brevity we do not discuss the other methods in this paper. We should point out that the method in this paper is among the fastest, and asymptotically it provides solutions equivalent to the ones of other methods.
Reference: [7] <author> Gonzalez, T. F., </author> <title> "Improved Approximation Algorithms for Multimessage Multicasting," </title> <institution> UCSB Department of Computer Science, </institution> <type> Technical Report TRCS-96-16, </type> <month> July </month> <year> 1996. </year>
Reference-contexts: The value of constant a 1 for the different methods we have developed and for different values for k is given in Table 3. The methods labeled "simple" are for the method in the previous section. The other methods appear in [6] and <ref> [7] </ref>, and allow for a limited form of recoloration [18]. For brevity we do not discuss the other methods in this paper. We should point out that the method in this paper is among the fastest, and asymptotically it provides solutions equivalent to the ones of other methods.
Reference: [8] <author> Gonzalez, T. F., </author> <title> "Unit Execution Time Shop Problems, </title> " <journal> Mathematics of Operations Research," </journal> <volume> Vol. 7, No. 1, </volume> <month> February </month> <year> 1982, </year> <pages> pp. 57 - 66. </pages>
Reference: [9] <author> T. F. Gonzalez, and S. Sahni, </author> <title> Open Shop Scheduling to Minimize Finish Time, </title> <journal> JACM, </journal> <volume> Vol. 23, No. 4, </volume> <month> October </month> <year> 1976, </year> <pages> pp. 665 - 679. </pages>
Reference-contexts: The problem of constructing a communication schedule with optimal total communication time can be reduced to the Makespan Openshop Preemptive Scheduling problem. This problem can be solved by the polynomial time algorithm given in <ref> [9] </ref>. An openshop consists of m 1 machines, and n 1 jobs. Each job consists of m tasks. The j th task of job i (T i;j ) must be executed by the j th machine for t i;j 0 time units. <p> Let m i be the total time that machine i must be busy, and t j be the total time that job j needs to be executed. Let t = maxfm i ; t j g. Gonzalez and Sahni <ref> [9] </ref> have shown that there is always a preemptive schedule with finish time t, which is the best possible, and that one such schedule can be constructed in O (r (minfr; m 2 g + m log n)) time, where r is the number of nonzero tasks. <p> Furthermore, when all the t i;j s are integers, there is a schedule where preemptions occur only at integer points, and one such schedule is generated by Gonzalez and Sahni's <ref> [9] </ref> algorithm. The M U C problem of degree one is a special case of the preemptive openshop problem with all the t i;j s in f0; 1; : : : ; dg. Each of the n vertices in the communication graph represent a job, and a machine. <p> Translating the results from the openshop problem back to the communication problem, it means that every problem of degree d, has a communication schedule with total communication time equal to d time units. Furthermore, one can easily adapt the algorithm for the minimum finish time openshop problem given in <ref> [9] </ref> to construct one such communication schedule. The time complexity is O (r (minfr; m 2 g + m log n)) time, where r dn, and m = n. For brevity we omit the proof of the following theorem.
Reference: [10] <author> I. S. Gopal, G. Bongiovanni, M. A. Bonuccelli, D. T. Tang, and C. K. Wong, </author> <title> An Optimal Switching Algorithm for Multibean Satellite Systems with Variable Bandwidth Beams, </title> <journal> IEEE Transactions on Communications, COM-30, </journal> <note> 11 (1982) pp. 2475 - 2481. </note>
Reference-contexts: Whitehead [19] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], [3]), Hajek and Sasaki [12], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong <ref> [10] </ref>. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [11] <author> A J. Hopcroft, and R. M. Karp, </author> <title> An n 2:5 Algorithm for Maximum Matchings in Bipartite Graphs, </title> <journal> SIAM J. Computing, </journal> <year> (1973), </year> <pages> pp. 225 - 231. </pages>
Reference-contexts: Then a matching that includes all the left-hand side vertices is constructed. The existence of the matching is established by proving that Hall's conditions hold for the graph. The matching is constructed by Hopcroft and Karp's algorithm <ref> [11] </ref>, and an edge coloration can be easily obtained from the matching. <p> A maximal set of bundles that can be colored completely with one color can be found in O (d 2 ) time. The construction of the bipartite graph takes O (d 2 ) time, and a complete matching in it can be constructed in O (d 2:5 ) time <ref> [11] </ref>. Therefore the overall time complexity for procedure GM is O (nd 2:5 ). 2 5 Approximating the M M C with Fan-Out k 3 Let us now consider our simple and very fast approximation algorithm for the M M C problem.
Reference: [12] <author> B. Hajek, and G. Sasaki, </author> <title> Link Scheduling in Polynomial Time, </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> Vol. 34, No. 5, </volume> <month> Sept. </month> <year> 1988, </year> <pages> pp. 910 - 917. </pages>
Reference-contexts: Whitehead [19] considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], [3]), Hajek and Sasaki <ref> [12] </ref>, Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [10]. Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving).
Reference: [13] <author> I. Holyer, </author> <title> The NP-completeness of Edge-Coloring, </title> <journal> SIAM J. Comp., </journal> <volume> 11 (1982), 117 - 129. </volume>
Reference-contexts: The edge coloration problem was shown to be NP-complete in <ref> [13] </ref>.
Reference: [14] <author> T. T. Lee, </author> <title> Non-blocking Copy Networks for Multicast Packet Switching, </title> <journal> IEEE J. Selected Areas of Communication, </journal> <volume> Vol. 6, No 9, </volume> <month> Dec. </month> <year> 1988, </year> <pages> pp. 1455 - 1467. </pages>
Reference: [15] <author> S. C. Liew, </author> <title> A General Packet Replication Scheme for Multicasting in Interconnection Networks, </title> <booktitle> Proceedings IEEE INFOCOM '95, Vol.1 (1995), </booktitle> <pages> pp. 394 - 401. </pages>
Reference-contexts: This is accomplished by translating each communication phase in the complete network into two communication phases for these dynamic networks. The first phase replicates data and transmits it to other processors, and the second phase distributes the data to the appropriate processors. This well-known approach ([14], <ref> [15] </ref>, and [17]) will be discussed in more detail after defining some important terms. The IBM GF11 machine [1], and the Meiko CS-2 machine use Benes networks for processor interconnection. <p> The two stage translation process can also be used in the Meiko CS-2 computer system, and any multimessage multicasting schedule can be realized by using basic synchronization primitives. This two step translation process can be reduced to one step by increasing the number of network switches about 50% ([14], <ref> [15] </ref>, and [17]). In what follows we concentrate on the M M C problem because it has a simple structure, and, as we mentioned before, results for this network can be easily translated to other dynamic networks. Let us formally define our problem. <p> When the processors are connected via a dynamic network whose basic switches allow data replication, the basic multicasting problem can be solved in two stages: the data replication step followed by the data distribution step ([14], [17], <ref> [15] </ref>). Let us illustrate this two stage process for the example given in Figure 2. A BM C problem instance is given on the left hand side of Figure 2. We transmit the messages in two stages.
Reference: [16] <author> P. I. Rivera-Vega, R, Varadarajan, and S. B. Navathe, </author> <title> "Scheduling File Transfers in Fully Connected Networks," </title> <journal> Networks, </journal> <volume> Vol. 22, </volume> <year> (1992), </year> <pages> pp. 563 - 588. 15 </pages>
Reference-contexts: Some of these papers considered the case when the input and output units are interchangeable, i.e., each processor can be involved in at most fl (P i ) message transmissions (sending and/or receiving). Rivera-Vega, Varadarajan and Navathe <ref> [16] </ref> studied, the file transferring problem, a version the multimessage unicasting problem for the complete network when every vertex can send (receive) as many messages as the number of outgoing (incoming) links.
Reference: [17] <author> J. S. Turner, </author> <title> A Practical Version of Lee's Multicast Switch Architecture, </title> <journal> IEEE Transac--tions on Communications, </journal> <volume> Vol. 41, No 8, </volume> <month> Aug. </month> <year> 1993, </year> <pages> pp. 1166 - 1169. </pages>
Reference-contexts: This is accomplished by translating each communication phase in the complete network into two communication phases for these dynamic networks. The first phase replicates data and transmits it to other processors, and the second phase distributes the data to the appropriate processors. This well-known approach ([14], [15], and <ref> [17] </ref>) will be discussed in more detail after defining some important terms. The IBM GF11 machine [1], and the Meiko CS-2 machine use Benes networks for processor interconnection. <p> This two step translation process can be reduced to one step by increasing the number of network switches about 50% ([14], [15], and <ref> [17] </ref>). In what follows we concentrate on the M M C problem because it has a simple structure, and, as we mentioned before, results for this network can be easily translated to other dynamic networks. Let us formally define our problem. <p> When the processors are connected via a dynamic network whose basic switches allow data replication, the basic multicasting problem can be solved in two stages: the data replication step followed by the data distribution step ([14], <ref> [17] </ref>, [15]). Let us illustrate this two stage process for the example given in Figure 2. A BM C problem instance is given on the left hand side of Figure 2. We transmit the messages in two stages.
Reference: [18] <author> V. G. Vizing, </author> <title> On an Estimate of the Chromatic Class of a p-graph, </title> <journal> Diskret. Analiz., </journal> <volume> 3 (1964), </volume> <pages> pp. </pages> <note> 25 - 30 (In Russian). </note>
Reference-contexts: The methods labeled "simple" are for the method in the previous section. The other methods appear in [6] and [7], and allow for a limited form of recoloration <ref> [18] </ref>. For brevity we do not discuss the other methods in this paper. We should point out that the method in this paper is among the fastest, and asymptotically it provides solutions equivalent to the ones of other methods. Table 3: Constant a 1 For Different Methods.
Reference: [19] <author> J. Whitehead, </author> <title> The Complexity of File Transfer Scheduling with Forwarding, </title> <journal> SIAM Journal on Computing Vol. </journal> <volume> 19, No 2, </volume> <month> April </month> <year> 1990, </year> <pages> pp. 222 - 245. 16 </pages>
Reference-contexts: Coffman, Garey, Johnson and LaPaugh [2] studied a version the multimessage unicasting problem when messages have different lengths, each processor can send (receive) ff (P i ) 1 (fi (P i ) 1) messages simultaneously, and messages are transmitted without interruption (non-preemptive mode). Whitehead <ref> [19] </ref> considered the case when messages can be sent indirectly. The preemptive version of these problems as well as other generalizations were studied by Choi and Hakimi ([4], [5], [3]), Hajek and Sasaki [12], Gopal, Bongiovanni, Bonuccelli, Tang, and Wong [10].
References-found: 19

