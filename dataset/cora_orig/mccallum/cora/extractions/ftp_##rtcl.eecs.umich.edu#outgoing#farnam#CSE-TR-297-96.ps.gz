URL: ftp://rtcl.eecs.umich.edu/outgoing/farnam/CSE-TR-297-96.ps.gz
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.eecs.umich.edu
Email: frmalan,farnamg@eecs.umich.edu, frasmussn,knoopg@umich.edu  
Title: Performance of a Distributed Object-Based Internet Collaboratory  
Author: G. Robert Malan, Farnam Jahanian, Craig Rasmussen, Peter Knoop 
Keyword: Distributed Systems, Internet, Network Performance  
Address: 1301 Beal Ave. Ann Arbor, Michigan 48109-2122  
Affiliation: University of Michigan Department of Electrical Engineering and Computer Science  
Pubnum: CSE-TR-297-96  
Abstract: This paper describes an experimental assessment of the Upper Atmospheric Research Collaboratory (UARC), an object-based distributed system. For the past three years, the UARC software system has enabled space scientists to collaborate on atmospheric experiments in real-time over the Internet. The UARC system provides a means for its users to view data from remote atmospheric instruments, share annotations of that data, discuss experimental results in a chat window, and simultaneously edit text manuscripts. However, UARC's distribution of atmospheric data to this geographically dispersed group of scientists is its primary mechanism for effecting their collaboration. This paper investigates the impact of UARC's implementation as a large distributed object-based software system as a means for supporting wide-area collaboratories. Specifically, it focuses on the communication performance and scalability of its object-based data distribution mechanism. First, Internet microbenchmarks are presented which characterize the UARC topology; then the results of application-level experiments are described that investigate UARC's use of NeXTSTEP's Distributed Object method invocations as a communication primitive. Finally, an analysis and discussion of the UARC system's object-based implementation concludes the paper. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Berners-Lee, T., Fielding, R., and Frystyk, H. </author> <title> "Hypertext Transfer Protocol (HTTP) 1.0." </title> <booktitle> RFC 1945, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: These method invocations are implemented as reliable TCP streams. As such, the UARC system effectively provides a multicast data distribution service using multiple point-to-point network connections. This is similar to the graph-based NNTP protocol [10]; data distribution over the World Wide Web using HTTP <ref> [1] </ref>; and the Unidata weather distribution system [8]. The topology covered by the UARC system represents a broad cross section of the Internet's current physical network layer.
Reference: [2] <author> Bolot, J. </author> <title> "End-to-End Packet Delay and Loss Behavior in the Internet." </title> <booktitle> In Proceedings of ACM Sig-Comm '93, </booktitle> <pages> pp. 289-298, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: We then built and deployed a UDP-based ping program, udping which is similar to previous measurement programs <ref> [2, 28] </ref>. The general udping experimental setup is shown in Figure 2. The experiment consisted of sending a udping packet from the UARC server to several UARC Clients and Data Suppliers every ten seconds.
Reference: [3] <author> Cristian, F. </author> <title> "Probabilistic Clock Synchronization," </title> <booktitle> Distributed Computing, </booktitle> <pages> (3) pp. 146-158, </pages> <year> 1989. </year>
Reference-contexts: In order to compensate for skewed clocks, at periodic intervals during the testing, a snapshot of the clock skew was taken. These snapshots were taken using a probabilistic clock synchronization technique, similar to the protocols developed by Cristian <ref> [3] </ref>. Specifically, the udping client and servers were used to exchange timestamp information between two hosts at one second intervals for two minutes. From this information the mean round trip time between the hosts along with its standard deviation was computed.
Reference: [4] <author> Clauer, C.R., Kelly, J.D., Rosenberg, T.J., Rasmussen, C.E., Stauning, E., Friis-Christensen, E., Niciejewski, R.J., Killeen, T.L., Mende, S.B., Zambre, Y., Weymouth, T.E., Prakash, A., Olson, G.M., McDaniel, S.E., Finholt, T.A., and Atkins, D.E. </author> <title> "A New Project to Support Scientific Collaboration Electronically." </title> <journal> In EOS Transactions on American Geophysical Union, </journal> <note> June 28, 1994 (75). 18 </note>
Reference-contexts: 1 Introduction The Upper Atmospheric Research Collaboratory (UARC) project is a multi-institution research effort, whose focus is the creation of an experimental testbed for wide-area scientific collaboratory work <ref> [4] </ref>. This testbed is implemented as a large object-based distributed system on the Internet. The UARC system provides a collaboratory environment in which a geographically dispersed community of space scientists perform real-time experiments at a remote facility in Greenland.
Reference: [5] <author> Deering, S., Cheriton, D. </author> <title> "Multicast Routing in Datagram Internetworks and Extended LANs." </title> <journal> In ACM Transactions on Computer Systems, </journal> <pages> pp. 85-110, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism <ref> [5, 6] </ref>. The current integration between reliable multicast mechanisms [7, 11, 14] and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [6] <author> Eriksson, H. "Mbone: </author> <title> The multicast backbone." </title> <journal> Communications of the ACM, </journal> <volume> 37, 8, </volume> <pages> pp. 54-60, </pages> <year> 1994. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism <ref> [5, 6] </ref>. The current integration between reliable multicast mechanisms [7, 11, 14] and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [7] <author> Floyd, S., et. al. </author> <title> "A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing." </title> <booktitle> In Proceedings of ACM SigComm '95, </booktitle> <pages> pp. 342-356, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism [5, 6]. The current integration between reliable multicast mechanisms <ref> [7, 11, 14] </ref> and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [8] <author> David, </author> <title> G.P, Rew, R.K. "The Unidata LDM: Programs and Protocols for Flexible Processing of Data Products." </title> <booktitle> In Proceedings of the Tenth International Conference on Interactive Information and Processing Systems for Meteorology, Oceanography, and Hydrology of the American Meteorological Society, </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: As such, the UARC system effectively provides a multicast data distribution service using multiple point-to-point network connections. This is similar to the graph-based NNTP protocol [10]; data distribution over the World Wide Web using HTTP [1]; and the Unidata weather distribution system <ref> [8] </ref>. The topology covered by the UARC system represents a broad cross section of the Internet's current physical network layer.
Reference: [9] <author> Hall, R.W., Mathur, A., Jahanian, F., Prakash, A., Rasmussen, C. "Corona: </author> <title> A Communication Service for Scalable, Reliable Group Collaboration Systems." </title> <booktitle> To appear in Proceedings of the ACM Conf. on Computer Supported Cooperative Work (CSCW '96), </booktitle> <address> Boston, MA, </address> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented.
Reference: [10] <author> Kantor, B., Lapsley, P. </author> <title> "Network News Transfer Protocol (NNTP)." </title> <type> RFC 977, </type> <month> February </month> <year> 1986. </year>
Reference-contexts: These method invocations are implemented as reliable TCP streams. As such, the UARC system effectively provides a multicast data distribution service using multiple point-to-point network connections. This is similar to the graph-based NNTP protocol <ref> [10] </ref>; data distribution over the World Wide Web using HTTP [1]; and the Unidata weather distribution system [8]. The topology covered by the UARC system represents a broad cross section of the Internet's current physical network layer.
Reference: [11] <author> Koifman, A., Zabele, S. "RAMP: </author> <title> A Reliable Adaptive Multicast Protocol." </title> <booktitle> In Proceedings of IEEE Infocom '96, </booktitle> <pages> (3) pp. 1442-1451, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism [5, 6]. The current integration between reliable multicast mechanisms <ref> [7, 11, 14] </ref> and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [12] <author> Knister, M., Prakash, A. </author> <title> "Issues in the Design of a Toolkit for Supporting Multiple Group Editors." </title> <journal> Computer Systems The Journal of the Usenix Association, </journal> <volume> 6(2), </volume> <pages> pp. 135-166, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented. <p> The UARC data distribution mechanism is a relatively small component in the overall UARC software 17 system; a system that is the composition of many interrelated collaboratory tools <ref> [12, 26] </ref> developed on the NeXTSTEP platform. NeXTSTEP's Distributed Object package is a mature language-level tool for creating a seamless distributed system from separate software components. The choice for using Distributed Object method invocations as UARC's communication primitive was made as a natural extension of the overall object-oriented system design.
Reference: [13] <author> Lampson, B.W. </author> <title> "Hints for Computer Systems Design." </title> <journal> In ACM Operating Systems Review, 21(5) Special Issue, </journal> <pages> pp. 33-48, </pages> <year> 1983. </year>
Reference-contexts: The choice for using Distributed Object method invocations as UARC's communication primitive was made as a natural extension of the overall object-oriented system design. The consequences of this choice are made apparent by our experimental results. These results echo one of Lampson's hints: Don't Hide Power <ref> [13] </ref>. By relying on a fairly rigid language-level primitive, the UARC system gave up the ability to control its network management policies. Specifically, it allows slow clients to adversely affect fast ones, to the point where contention for shared resources brings the system to its knees.
Reference: [14] <author> Lin, J.C., Paul, S. "RMTP: </author> <title> A Reliable Multicast Transport Protocol." </title> <booktitle> In Proceedings of IEEE Info-com '96, </booktitle> <pages> (3) pp. 1414-1423, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism [5, 6]. The current integration between reliable multicast mechanisms <ref> [7, 11, 14] </ref> and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [15] <author> Jacobson, V., Leres, C., and McCanne, S. </author> <title> "The Tcpdump Manual Page." </title> <institution> Lawrence Berkeley Laboratory, Berkeley, </institution> <address> CA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: When the Distributed Object buffer is full, there is contention between the fast and slow Clients for space. It is this contention for resources which increase the latency. To further explain this interaction, a machine on the same ethernet as the Server ran tcpdump <ref> [15] </ref> to catch all of the packets exchanged between the UARC Server and the two Clients. Figure 11 shows these results. 0 30 60 90 120 Time during experiment (seconds) 0 2000000 4000000 TCP Sequence Number.
Reference: [16] <author> Jacobson, V. </author> <title> "The Traceroute Manual Page." </title> <institution> Lawrence Berkeley Laboratory, Berkeley, </institution> <address> CA, </address> <month> December </month> <year> 1988. </year>
Reference: [17] <author> Julin, D. P and Sansom, R. D. </author> <title> "Issues with the Efficient Implementation of Network IPC and RPC in the Mach Environment.", </title> <type> Unpublished, </type> <month> September </month> <year> 1989. </year>
Reference-contexts: In this case it was able to chose between synchronous and asynchronous message passing mechanisms. In general, the UARC system has no control over the communication policies that Distributed Objects uses for message transport. The Distributed Objects transport mechanism is derived from the Mach Netmsg server <ref> [17, 29] </ref>, which in turn uses TCP for interhost communication. When a local object invokes a remote method, the Distributed Object subsystem creates a persistent TCP connection between the two hosts. This connection is used for all communication between the two objects, including subsequent method invocations.
Reference: [18] <author> Manohar, N.R., Prakash, A. </author> <title> "Asynchronous Collaboration via The Record and Replay of Temporal Multimedia Streams." </title> <journal> in ACM SIGOIS Bulletin, </journal> <volume> (15)2, </volume> <pages> pp. 32-34, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented.
Reference: [19] <author> Mathur, A.G., Prakash, A. </author> <title> "Protocols for Integrated Audio and Shared Windows in Collaborative Systems." </title> <booktitle> In Proceedings of ACM Multimedia 94, </booktitle> <pages> pp. 318-388, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented.
Reference: [20] <author> McCanne, S., Jacobson, V., Vetterli, M. </author> <title> "Receiver-driven Layered Multicast." </title> <note> To appear in Proceedings of 1996 SIGCOMM, </note> <month> August </month> <year> 1996. </year>
Reference-contexts: As the Internet evolves, slow hosts will not disappear, but will only increase; Fiber-To-The-Curb (FTTC) [30] alone assures a long-term split between well connected business or educational hosts, and an entire class of slower residential hosts. Although people have started looking at this problem (see McCanne <ref> [20] </ref>), it is far from solved. The computer industry's collective shift towards object-oriented software development, is in many respects a good thing. It allows the development of extensible, maintainable software systems; however particular attention should be paid to the costs that accrue due to the use of language-level abstractions.
Reference: [21] <author> McDaniel, S.E., Olson, G.M., Olson, J.S. </author> <title> "Methods in Search of Methodology Combining HCI and Object Orientation." </title> <booktitle> in Proceedings of ACM CHI '94, </booktitle> <pages> pp. 145-151, </pages> <year> 1994. </year>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented.
Reference: [22] <institution> NeXT Computer, Inc. "NeXTSTEP General Reference." </institution> <address> (1) Chapters 1-3, </address> <year> 1995. </year>
Reference-contexts: The total number of UARC Clients connected to the Server varies, depending on the level of interest in the experiment. To support the availability of data, a backup server takes over the data distribution service if the primary UARC Server fails. NeXTSTEP and Objective C <ref> [22] </ref>, were chosen as the UARC system's platform and implementation language because they provided a rich software development environment. This environment facilitated the creation, maintenance, and extension of the wide variety of collaboratory tools the UARC system provides.
Reference: [23] <institution> NeXT Computer, Inc. </institution> <note> "NeXTSTEP General Reference.", (2) Chapter 6, </note> <year> 1995. </year>
Reference-contexts: Their support of objects at the system level made the development of familiar user interface idioms such as the ability to drag-and-drop data objects between UARC's collaboratory tools simple. It was natural to combine the three UARC components using NeXTSTEP's Distributed Object subsystem <ref> [23] </ref> to form a single distributed system. Thus, in UARC 5.0, Distributed Object method invocations are used to transparently send atmospheric data between the components over the Internet. These method invocations are implemented as reliable TCP streams.
Reference: [24] <author> Olson, G.M., Olson, J.S., Carter, M., Storrxsten, M. </author> <title> "Small Group Design Meetings: An Analysis of Collaboration." </title> <booktitle> Human Computer Interaction, </booktitle> <volume> 7, </volume> <pages> pp. 347-374, </pages> <year> 1992. </year> <month> 19 </month>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented.
Reference: [25] <author> Paxson, V. </author> <title> "End-to-end Routing Behavior in the Internet." </title> <note> To appear in Proceedings of 1996 SIG--COMM, </note> <month> August </month> <year> 1996. </year>
Reference-contexts: The goals for this experiment were to look only at the stability of UARC's portion of the Internet, and were not meant to provide a general characterization of Internet routing stability as described by Paxson <ref> [25] </ref>. 7 5 UARC 5.0 Experiments With a solid understanding of the UARC topology's Internet characteristics, application-level UARC experiments focused on investigating its Distributed Object implementation were undertaken.
Reference: [26] <author> Prakash, A., Shim, H. "DistView: </author> <title> Support for Building Efficient Collaborative Applications using Replicated Objects." </title> <booktitle> In Proceedings of the 5th Conf. on Computer Supported Cooperative Work, </booktitle> <pages> pp. 153-164, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented. <p> The UARC data distribution mechanism is a relatively small component in the overall UARC software 17 system; a system that is the composition of many interrelated collaboratory tools <ref> [12, 26] </ref> developed on the NeXTSTEP platform. NeXTSTEP's Distributed Object package is a mature language-level tool for creating a seamless distributed system from separate software components. The choice for using Distributed Object method invocations as UARC's communication primitive was made as a natural extension of the overall object-oriented system design.
Reference: [27] <author> Prakash, A., Knister, M. </author> <title> "A Framework for Undoing Actions in Collaborative Systems." </title> <journal> in ACM Transactions on Computer-Human Interaction. </journal> <note> In press. </note>
Reference-contexts: This paper investigates the impact of UARC's implementation as a large distributed object-based software system on its communication performance. Specifically, it focuses on the performance and scalability of its object-based data distribution mechanism; for additional information on the UARC system's tools and architecture, refer to <ref> [9, 12, 18, 19, 21, 24, 26, 27] </ref>. First the results of a series of Internet UDP experiments are presented that describe the UARC topology's end-to-end loss and latency characteristics. After which, the results from a series of UARC application-level experiments are presented.
Reference: [28] <author> Sanghi, D., Agrawala, A.K., Gunmusndson, O., Jain, </author> <title> B.N. "Experiment Assessment of End-toend Behaviour on Internet." </title> <booktitle> In Proceedings of IEEE Infocom '93, </booktitle> <pages> pp. 867-874, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: We then built and deployed a UDP-based ping program, udping which is similar to previous measurement programs <ref> [2, 28] </ref>. The general udping experimental setup is shown in Figure 2. The experiment consisted of sending a udping packet from the UARC server to several UARC Clients and Data Suppliers every ten seconds.
Reference: [29] <author> Sansom, R. D. </author> <title> "Building a Secure Distributed System." </title> <type> PhD dissertation, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: In this case it was able to chose between synchronous and asynchronous message passing mechanisms. In general, the UARC system has no control over the communication policies that Distributed Objects uses for message transport. The Distributed Objects transport mechanism is derived from the Mach Netmsg server <ref> [17, 29] </ref>, which in turn uses TCP for interhost communication. When a local object invokes a remote method, the Distributed Object subsystem creates a persistent TCP connection between the two hosts. This connection is used for all communication between the two objects, including subsequent method invocations.
Reference: [30] <author> Tannenbaum, </author> <title> A.S. </title> <booktitle> Computer Networks, Third Edition, Prentice-Hall, Chapter 2, </booktitle> <pages> pp. 102-138, </pages> <year> 1996. </year> <month> 20 </month>
Reference-contexts: A solution for distributing data to a mixture of both fast and slow hosts will always be needed. As the Internet evolves, slow hosts will not disappear, but will only increase; Fiber-To-The-Curb (FTTC) <ref> [30] </ref> alone assures a long-term split between well connected business or educational hosts, and an entire class of slower residential hosts. Although people have started looking at this problem (see McCanne [20]), it is far from solved.
References-found: 30

