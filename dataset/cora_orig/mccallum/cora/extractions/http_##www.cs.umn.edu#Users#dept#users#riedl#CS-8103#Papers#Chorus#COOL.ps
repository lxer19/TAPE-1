URL: http://www.cs.umn.edu/Users/dept/users/riedl/CS-8103/Papers/Chorus/COOL.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/riedl/CS-8103/Papers/Chorus/
Root-URL: http://www.cs.umn.edu
Title: CS/TR-93-68 COOL: system support for distributed object-oriented programming  
Author: Rodger Lea, Christian Jacquemot Eric Pillevesse 
Degree: approved by: c Chorus systemes, 1993  
Date: 1993 September 1, 1993  
Note: c Chorus systemes,  
Affiliation: Chorus systemes  Service d'Etudes communes de La Poste et de France Telecom  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Van Renesse. </author> <title> Amoeba. </title> <booktitle> In proceedings of Usenix Micro-kernels and other kernel architectures. </booktitle> <address> April 27-28, 1992, Seattle, Washington. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: This has tended to force most people into the traditional solution of building their support environment above an existing operating system leading us back to the mismatch between language and system services. However, with the availability of micro-kernel architectures such as Chorus [3], Amoeba <ref> [1] </ref> and Mach [2] which provide a basic set of abstractions designed to allow people to build operating systems, it is now possible to explore how operating systems can better support programming models. <p> These figures are comparable to those reported in [12] and [16] but also show that although an order of magnitude more expensive than traditional RPC <ref> [1] </ref>, mapping clusters of objects will provide a performance benefit when the cost of mapping plus subsequent local invocation is compared to multiple remote invocations. 4 The CIDRE intelligent document system To justify some of our design decisions and to illustrate how a platform such a COOL v2 can be used
Reference: [2] <author> R. Draves. </author> <title> Mach. </title> <booktitle> In proceedings of Usenix Micro-kernels and other kernel architectures. </booktitle> <address> April 27-28, 1992, Seattle, Washington. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: This has tended to force most people into the traditional solution of building their support environment above an existing operating system leading us back to the mismatch between language and system services. However, with the availability of micro-kernel architectures such as Chorus [3], Amoeba [1] and Mach <ref> [2] </ref> which provide a basic set of abstractions designed to allow people to build operating systems, it is now possible to explore how operating systems can better support programming models.
Reference: [3] <author> M. Rozier. </author> <title> Chorus. </title> <booktitle> In proceedings of Usenix Micro-kernels and other kernel architectures. </booktitle> <address> April 27-28, 1992, Seattle, Washington. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: This has tended to force most people into the traditional solution of building their support environment above an existing operating system leading us back to the mismatch between language and system services. However, with the availability of micro-kernel architectures such as Chorus <ref> [3] </ref>, Amoeba [1] and Mach [2] which provide a basic set of abstractions designed to allow people to build operating systems, it is now possible to explore how operating systems can better support programming models.
Reference: [4] <author> Sabine Habert, Laurence Mosseri, and Vadim Abrossimov. </author> <title> COOL: Kernel support for object-oriented environments. </title> <booktitle> In ECOOP/ OOPSLA'90 Conference, volume 25 of SIGPLAN Notices, </booktitle> <pages> pages 269-277, </pages> <address> Ottawa (Canada), </address> <month> October </month> <year> 1990. </year> <note> ACM. </note>
Reference-contexts: In the final sections we discuss our experiences and outline future directions. 2 The Chorus object-oriented layer: COOL The COOL project is now in its second iteration, our first platform, COOL v1 1 , was designed as a testbed for initial ideas and implemented in late '88 <ref> [4] </ref> [5] [8].
Reference: [5] <author> Deshayes, J.M., Abrossimov, V. and Lea, R. </author> <title> The CIDRE distributed object system based on Chorus. </title> <booktitle> Proceedings of the TOOLS'89 Conference, </booktitle> <address> Paris, France. </address> <month> July </month> <year> 1989. </year>
Reference-contexts: In the final sections we discuss our experiences and outline future directions. 2 The Chorus object-oriented layer: COOL The COOL project is now in its second iteration, our first platform, COOL v1 1 , was designed as a testbed for initial ideas and implemented in late '88 [4] <ref> [5] </ref> [8].
Reference: [6] <institution> The Integrated Systems Architecture project. ISA Esprit project 2267. The ISA consortium, APM ltd, </institution> <address> Castle Park, Cambridge, UK. </address>
Reference-contexts: Further details of this can be found in [9]. We began a redesign of the COOL abstractions in 1990. This work was carried out in conjunction with two European research projects, the Esprit ISA project <ref> [6] </ref> and the Esprit Comandos project [7], both building distributed object based systems. This work was specifically designed to address this issue of providing generic support mechanisms, yet allowing those mechanisms to be efficiently used by languages.
Reference: [7] <author> V. Cahill, R. Lea and P. Sousa. Comandos: </author> <title> generic support for persistent object-oriented languages. </title> <booktitle> Proceedings of the Esprit Conference 1991. </booktitle> <address> Brussels, </address> <month> November </month> <year> 1991. </year> <note> also Chorus systemes technical report CS-TR-91-56. </note> <institution> c fl Chorus systemes, </institution> <year> 1993 </year> <month> -16- September 1, </month> <title> 1993 Chorus systemes COOL: system support for distributed OO programming CS/TR-93-68 </title>
Reference-contexts: Further details of this can be found in [9]. We began a redesign of the COOL abstractions in 1990. This work was carried out in conjunction with two European research projects, the Esprit ISA project [6] and the Esprit Comandos project <ref> [7] </ref>, both building distributed object based systems. This work was specifically designed to address this issue of providing generic support mechanisms, yet allowing those mechanisms to be efficiently used by languages.
Reference: [8] <author> R. Lea and J. Weightman. </author> <title> COOL: An object support environment co-existing with Unix. </title> <booktitle> Proceedings of Convention Unix '91, </booktitle> <address> AFUU, Paris France. </address> <month> March </month> <year> 1991. </year>
Reference-contexts: In the final sections we discuss our experiences and outline future directions. 2 The Chorus object-oriented layer: COOL The COOL project is now in its second iteration, our first platform, COOL v1 1 , was designed as a testbed for initial ideas and implemented in late '88 [4] [5] <ref> [8] </ref>.
Reference: [9] <author> R. Lea and J. Weightman. </author> <title> Supporting Object-oriented Languages in a Distributed Environment: The COOL approach. </title> <booktitle> Proceedings of TOOLS USA'91, </booktitle> <address> July 29-August 1, 1991. Santa Barbara, CA. USA. </address>
Reference-contexts: In particular, we found that our generic mechanisms were not easily used by the languages, partly because of the cost of our system level objects, and partly because our mechanism were too generic. Further details of this can be found in <ref> [9] </ref>. We began a redesign of the COOL abstractions in 1990. This work was carried out in conjunction with two European research projects, the Esprit ISA project [6] and the Esprit Comandos project [7], both building distributed object based systems.
Reference: [10] <author> V. Abrossimov, M. Rozier and M. Shapiro. </author> <title> Generic virtual memory management for operating system kernels. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 123-136, </pages> <address> Litchfield Park AZ (USA), </address> <month> December </month> <year> 1989. </year> <note> ACM. </note>
Reference-contexts: A cluster is viewed from higher levels as a place where related objects exist. When mapped into an address space, it is simply a collection of virtual memory regions <ref> [10] </ref>. The mapping may be on an arbitrary address. The collection of regions that belong to a mapped cluster is a set of CHORUS regions backed by segments, and forms a semantic unit managed by the base layer.
Reference: [11] <author> R. Campbell and P. Madany. </author> <title> Considerations of Persistence and Security in Choices, an Object- Oriented Operating System. Procs. </title> <booktitle> of International Workshop on Computer Architectures to Support Security and Persistence of Information. </booktitle> <month> May </month> <year> 1990, </year> <institution> Bremen (Germany). </institution>
Reference: [12] <author> P. Dasgupta, R Ananthanarayanan, S. Menon, A. Mohindra, R. </author> <title> Chen Distributed Programming with objects and Threads in the Clouds System Computing Systems, </title> <booktitle> Vol 4, </booktitle> <volume> No 3, </volume> <booktitle> Summer 1991, USENIX Association </booktitle>
Reference-contexts: In addition, because clusters are persistent, the COOL-base provides a means to locate non-active clusters, i.e., clusters currently swapped-out on secondary storage and load them transparently into a cluster spaces. This model is similar to that of the Clouds v2 project <ref> [12] </ref>. We use the virtual memory mapper to store and retrieve passive clusters to and from secondary storage by performing load and flush operations on virtual memory regions. <p> Lastly, the increase in time when more than 128 objects are worked on is because more than 128 objects in a cluster cause the GRT to dynamically extend internal tables. These figures are comparable to those reported in <ref> [12] </ref> and [16] but also show that although an order of magnitude more expensive than traditional RPC [1], mapping clusters of objects will provide a performance benefit when the cost of mapping plus subsequent local invocation is compared to multiple remote invocations. 4 The CIDRE intelligent document system To justify some <p> As such our work draws from many sources and has similarities to many systems. In this section we outline similar systems and discuss the differences. At the virtual memory level, the original COOL v1 system, and some of the COOL v2 base system has similar features to Clouds <ref> [12] </ref>, Amber [13] and Monads [14]. In particular the Clouds kernel, Ra, implements a simple micro-kernel that offers memory and threads in a similar way to Chorus and Mach. Memory is persistent and provides a single level store as in COOL-base.
Reference: [13] <author> J. Chase, F. Amador, E. Lazowska, H. Levy and R. Littlefield. </author> <title> The Amber system: </title> <booktitle> parallel programming on a network of multiprocessors In proceedings of the 12th ACM symposium on Operating Systems principles, </booktitle> <address> litchfield park, USA. </address> <month> December </month> <year> 1989. </year>
Reference-contexts: In this section we outline similar systems and discuss the differences. At the virtual memory level, the original COOL v1 system, and some of the COOL v2 base system has similar features to Clouds [12], Amber <ref> [13] </ref> and Monads [14]. In particular the Clouds kernel, Ra, implements a simple micro-kernel that offers memory and threads in a similar way to Chorus and Mach. Memory is persistent and provides a single level store as in COOL-base.
Reference: [14] <author> F. Henskens, J. Rosenberg and J. </author> <booktitle> Keedy A capability based distributed shared memory Proceedings of the 14th australian computer science conference, </booktitle> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: In this section we outline similar systems and discuss the differences. At the virtual memory level, the original COOL v1 system, and some of the COOL v2 base system has similar features to Clouds [12], Amber [13] and Monads <ref> [14] </ref>. In particular the Clouds kernel, Ra, implements a simple micro-kernel that offers memory and threads in a similar way to Chorus and Mach. Memory is persistent and provides a single level store as in COOL-base.
Reference: [15] <editor> M Weiser, et al. </editor> <booktitle> The portable common runtime approach to interoperability In proceedings of the 12th ACM symposium on Operating Systems principles, </booktitle> <address> litchfield park, USA. </address> <month> December </month> <year> 1989. </year>
Reference-contexts: As reported in this paper, we abandoned this approach due to the costs and difficulties in supporting language level objects within the kernel. The notion of a generic run-time is similar to the Portable Common Run-time <ref> [15] </ref>. Our experiences with the COOL v1 system led us to re-design the generic run-time to allow it to be specialised by language run-times and to allow interaction in both direction using down and up-calls.
Reference: [16] <author> T. Tenma, Y. Yokote and M. Tokoro. </author> <booktitle> Implementing persistent objects in the Apertos operating system In proceedings of the 2nd International Workshop on object orientation in operating systems (IWOOOS) 1992. </booktitle> <address> Dourdan, France, Sept 1992. </address> <publisher> IEEE press. </publisher>
Reference-contexts: Lastly, the increase in time when more than 128 objects are worked on is because more than 128 objects in a cluster cause the GRT to dynamically extend internal tables. These figures are comparable to those reported in [12] and <ref> [16] </ref> but also show that although an order of magnitude more expensive than traditional RPC [1], mapping clusters of objects will provide a performance benefit when the cost of mapping plus subsequent local invocation is compared to multiple remote invocations. 4 The CIDRE intelligent document system To justify some of our <p> The use of the up-call mechanisms between generic and language specific run-time has attempted to address the problem, but is still ad-hoc. A more promising approach, that of using meta information that can be used to control the behavior of classes, has been adopted in the Apertos project <ref> [16] </ref> and shows great promise. We hope to investigate how we can improve our system by adopting some of these ideas.
Reference: [17] <author> S. Krakowiak, A Freyssinet and S. Lacourte. </author> <booktitle> A generic object oriented virtual machine In proceedings of the International Workshop on object orientation in operating systems (IWOOOS) 1991. </booktitle> <address> Palo Alto, </address> <month> October </month> <year> 1991. </year> <note> IEEE press. </note>
Reference-contexts: COOL v2 was heavily influenced by the work carried out in the Comandos project, other implementations <ref> [17] </ref>, [18], [19] have approaches similar to this work and illustrate the way in which the generic run-time can support multiple languages. 7 Conclusion and current status The COOL project is building an object-oriented kernel above the CHORUS micro-kernel.
Reference: [18] <author> M. Castro, N. Neves, P. Trancoso and P. Sousa MIKE: </author> <booktitle> A Distributed Object-Oriented Programming Platform on top of the Mach Micro-kernel In Proceedings of the 3rd Usenix Mach Symposium April 19-21, 1993. </booktitle> <address> Santa fey, New Mexico, USA. c fl Chorus systemes, </address> <year> 1993 </year> <month> -17- September 1, </month> <title> 1993 Chorus systemes COOL: system support for distributed OO programming CS/TR-93-68 </title>
Reference-contexts: COOL v2 was heavily influenced by the work carried out in the Comandos project, other implementations [17], <ref> [18] </ref>, [19] have approaches similar to this work and illustrate the way in which the generic run-time can support multiple languages. 7 Conclusion and current status The COOL project is building an object-oriented kernel above the CHORUS micro-kernel.
Reference: [19] <author> V. Cahill, Chris Horn and Gradimir Starovic. </author> <booktitle> Towards generic support for distributed information systems In proceedings of the International Workshop on object orientation in operating systems (IWOOOS) 1991. </booktitle> <address> Palo Alto, </address> <month> October </month> <year> 1991. </year> <note> IEEE press. </note>
Reference-contexts: COOL v2 was heavily influenced by the work carried out in the Comandos project, other implementations [17], [18], <ref> [19] </ref> have approaches similar to this work and illustrate the way in which the generic run-time can support multiple languages. 7 Conclusion and current status The COOL project is building an object-oriented kernel above the CHORUS micro-kernel.
Reference: [20] <author> M. </author> <title> Shapiro Structure and Encapsulation in Distributed Systems: </title> <booktitle> the Proxy Principle Proceedings of the 6th ICDS Conference, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1986 </year>
Reference: [21] <author> Henry E. Bal, M. Frans Kaashoek, and Andrew S. Tanenbaum. </author> <title> A distributed implementation of the shared data-object model. </title> <booktitle> In Proceedings of the Workshop on Distributed and Multiprocessor Systems (SEDMS), </booktitle> <address> Fort Lauerdale FL, USA, </address> <month> October </month> <year> 1989. </year> <institution> USENIX Association. </institution>
Reference-contexts: This obvious mapping has led many groups to attempt to extend existing object-oriented languages with support for distributed objects, either by adding remote message passing facilities (based on RPC) or supporting distributed objects <ref> [21] </ref> [22]. This approach has had mixed success. On the one hand it has demonstrated that the OO languages provide sufficient support for building distributed applications.
Reference: [22] <author> P. Dasgupta, R. Ananthanarayanan, S. Menon, A. Mohindra, and R. Chen. </author> <title> Distributed programming with objects and threads in the clouds system. </title> <journal> Computing Systems, </journal> <volume> 4(3), </volume> <year> 1991. </year>
Reference-contexts: This obvious mapping has led many groups to attempt to extend existing object-oriented languages with support for distributed objects, either by adding remote message passing facilities (based on RPC) or supporting distributed objects [21] <ref> [22] </ref>. This approach has had mixed success. On the one hand it has demonstrated that the OO languages provide sufficient support for building distributed applications.
Reference: [23] <author> A. Black, N. Hutchinson, E. Jul, H. Levy, and L. </author> <title> Carter Distribution and Abstract Types in Emerald, </title> <journal> IEEE Transactions on Software Engineering Vol: </journal> <volume> SE-13 No.: 1, </volume> <year> 1987, </year> <pages> Pages: 65-76. </pages>
Reference-contexts: To deal with these kinds of mismatches a number of researchers have attempted to extend their underlying system with some support for their particular programming model, <ref> [23] </ref> [24]. While we feel that this approach is correct, it doesn't go far enough. System support needs to be both efficient, flexible and it must fit in with existing systems.
Reference: [24] <author> J. Bennett. </author> <title> The design and implementation of distributed SmallTalk. </title> <booktitle> OOPSLA'87 proceedings, </booktitle> <address> pp318-330 October 1987. FL USA. </address> <publisher> ACM press. </publisher> <address> c fl Chorus systemes, </address> <year> 1993 </year> <month> -18- September 1, </month> <year> 1993 </year>
Reference-contexts: To deal with these kinds of mismatches a number of researchers have attempted to extend their underlying system with some support for their particular programming model, [23] <ref> [24] </ref>. While we feel that this approach is correct, it doesn't go far enough. System support needs to be both efficient, flexible and it must fit in with existing systems.
References-found: 24

