URL: http://www-ccs.cs.umass.edu/recpub-rts/BOD-RTSS98.ps
Refering-URL: http://www-ccs.cs.umass.edu/recpub-rts/index.html
Root-URL: 
Email: E-mail: fjefer, krithig@cs.umass.edu  
Title: Adaptive Dissemination of Data in Real-Time Asymmetric Communication Environments  
Author: Jesus Fernandez and Krithi Ramamritham 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: The proliferation of new data-intensive applications in asymmetric communication environments has led to an increasing interest in the development of push-based techniques, in which the information is broadcast to a large population of clients in order to achieve the most efficient use of the limited server and communication resources. Most of the related current research focuses on a pure push-based approach (Broadcast Disks model), where the transmission of data is done without allowing explicit requests from the users. More recently, some bidirectional models incorporating a low-capacity uplink channel have been proposed in order to increase the functionality of the Broadcast Disks model. However, the impact of integration of the uplink channel has been investigated using only static client profiles or ignoring the existence of timing constraints associated with data. In this paper we present an adaptive data dissemination model and the associated online scheduling algorithms, which improves the functionality and performance of bidirectional broadcast models, maximizing the total number of satisfied users. This is achieved by means of dynamic adaptation of the broadcast program to the needs of the users, taking into account the bandwidth constraints inherent in asymmetric communication environments and the temporal requirements of the data. Performance is evaluated by simulation of a real-time asymmetric communication environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Acharya, R. Alonso, M. Franklin and S. Zdonik, </author> <title> "Broadcast Disks: Data Management for Asymmetric Communication Environments", </title> <booktitle> Proceedings of ACM SIGMOD International Conference, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: On the other side of the spectrum some bandwidth-efficient data broadcast models have been proposed <ref> [1] </ref>. They provide high scalability by broadcasting the information simultaneously to a large population of users, using a single, high-capacity downlink channel (server-to-users). The weaknesses found in pure broadcast models result from the absence of direct interaction with the users. <p> As the periodic broadcast program is computed dynamically, trying to address the needs of most users, the number of requests coming via the uplink channel is greatly reduced and its congestion is much less likely. 3 Related Work In the traditional Broadcast Disks (BD) model <ref> [1] </ref>, the server periodically repeats an off-line computed broadcast program, based on previously known user access patterns. The broadcast program is static and only one downlink channel is used. <p> To summarize, in Table 1 we list the features of the different models described above and our real-time adaptive hybrid broadcast model: Adaptive Timing constraints Bidirectional BD <ref> [1] </ref> No No No Extended-BD [2] No No Yes Real Time-BD [5,6,8] No Yes No Adaptive Broadcast [11, 12] Yes No Yes BoD [13] No Yes Yes RT Adaptive Hybrid Broadcast Yes Yes Yes Table 1: Comparison of broadcast models We can observe that none of the existing models integrates all
Reference: [2] <author> S. Acharya, M. Franklin and S. Zdonik, </author> <title> "Balancing Push and Pull for Data Broadcast", </title> <booktitle> Proceedings of ACM SIGMOD International Conference, </booktitle> <address> Tucson, AZ, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: In general, data broadcast models provide no mechanisms to ensure that time requirements are met. In an attempt to solve both problems, some bidirectional broadcast models have been studied <ref> [2, 13] </ref>, trying to exploit on the one hand the benefits derived from the high bandwidth efficiency and scalability of data broadcasting, and on the other hand the direct interaction 1 with the users of the client/server paradigm. <p> The BD model has been extended in <ref> [2] </ref>, providing push and pull for data dissemination, by integrating an uplink channel. Nevertheless, in this hybrid model the bandwidth is assigned to the two broadcast modes statically, and there is no adaptation to the current workload, as the contents of the periodic broadcast do not change with time. <p> To summarize, in Table 1 we list the features of the different models described above and our real-time adaptive hybrid broadcast model: Adaptive Timing constraints Bidirectional BD [1] No No No Extended-BD <ref> [2] </ref> No No Yes Real Time-BD [5,6,8] No Yes No Adaptive Broadcast [11, 12] Yes No Yes BoD [13] No Yes Yes RT Adaptive Hybrid Broadcast Yes Yes Yes Table 1: Comparison of broadcast models We can observe that none of the existing models integrates all the characteristics needed to perform
Reference: [3] <author> S. Baruah, N. Cohen, C. Plaxton and D. Varvel, </author> <title> "Proportionate Progress: A Notion of Fairness in Resource Allocation", </title> <journal> Algorithmica 15(6), </journal> <volume> pgs. </volume> <pages> 600-625, </pages> <year> 1996. </year>
Reference-contexts: It would be convenient to compute a schedule that guarantees that all the deadlines will be met for every item included 11 in the periodic broadcast program. As we show below, this is possible if the items are scheduled in a pfair manner <ref> [3, 4, 7] </ref>. We assume that every item has a certain size in pages, or units of data to be broadcast.
Reference: [4] <author> S. Baruah, </author> <title> "Fairness in periodic real-time scheduling", </title> <booktitle> Proceedings of 16th Real-Time Systems Symposium, </booktitle> <address> Pisa, Italy, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: It would be convenient to compute a schedule that guarantees that all the deadlines will be met for every item included 11 in the periodic broadcast program. As we show below, this is possible if the items are scheduled in a pfair manner <ref> [3, 4, 7] </ref>. We assume that every item has a certain size in pages, or units of data to be broadcast.
Reference: [5] <author> S. Baruah and A. Bestavros, </author> <title> "Pinwheel Scheduling for Fault-tolerant Broadcast Disks in Real-Time Database Systems", </title> <booktitle> Proceedings of IEEE International Conference on Data Engineering, </booktitle> <address> Birmingham, England, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: All requests are served sooner or later, but again, information requests are not associated with temporal constraints. Temporal constraints have been integrated into the BD model in <ref> [5, 6, 8] </ref>. The server tries to compute a periodic schedule that provides worst-case guarantees, even in the event of failures and data updates.
Reference: [6] <author> S. Baruah and A. Bestavros, </author> <title> "Real-Time mutable broadcast disks", </title> <booktitle> Proceedings of Second International Workshop on Real-Time Databases, </booktitle> <address> Burlington, VT, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: All requests are served sooner or later, but again, information requests are not associated with temporal constraints. Temporal constraints have been integrated into the BD model in <ref> [5, 6, 8] </ref>. The server tries to compute a periodic schedule that provides worst-case guarantees, even in the event of failures and data updates.
Reference: [7] <author> S. Baruah and S. Lin, </author> <title> "Improved scheduling of generalized pinwheel task systems", </title> <booktitle> Proceedings of Fourth International Workshop on Real-Time Computer Systems Applications, </booktitle> <address> Teipei, Taiwan, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: It would be convenient to compute a schedule that guarantees that all the deadlines will be met for every item included 11 in the periodic broadcast program. As we show below, this is possible if the items are scheduled in a pfair manner <ref> [3, 4, 7] </ref>. We assume that every item has a certain size in pages, or units of data to be broadcast. <p> The algorithm described below can be used to generate the desired sequence. It is based on the PinOpt <ref> [7] </ref> algorithm.
Reference: [8] <author> A. Bestavros, </author> <title> "AIDA-based Real-Time Fault-Tolerant Broadcast Disks", </title> <booktitle> Proceedings of Second IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: All requests are served sooner or later, but again, information requests are not associated with temporal constraints. Temporal constraints have been integrated into the BD model in <ref> [5, 6, 8] </ref>. The server tries to compute a periodic schedule that provides worst-case guarantees, even in the event of failures and data updates.
Reference: [9] <author> T. Cormen, C. Leiserson and R. Rivest, </author> <title> "Introduction to Algorithms", </title> <publisher> McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: In other words, the priority of an item should reflect the fact that the bandwidth is limited, and we have to assign it wisely. This problem is in fact a version of the 0-1 knapsack problem <ref> [9] </ref>, known to be NP-hard. We have n items, each one with a value and a weight. We want to take a subset of these items, maximizing the sum of their values, and we can only choose items until we fill up the capacity of the knapsack.
Reference: [10] <author> A. Mok, </author> <title> "Task Management Techniques for Enforcing ED scheduling on a Periodic Task Set", </title> <booktitle> Proceedings of 5th IEEE Workshop on Real-Time Software and Operating Systems, </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1988. </year>
Reference-contexts: This algorithm can be efficiently implemented using a heap-of-heaps data structure, in O (logn) per time slot <ref> [10] </ref>. The period of the schedule generated is the least common multiple of the deadlines, and this will be the broadcast cycle length. This is another good reason to restrict the values of the deadlines to a predefined small set, to keep the broadcast length values within a reasonable range.
Reference: [11] <author> K. Stathatos, N. Roussopoulos and J. S. Baras, </author> <title> "Adaptive Data Broadcasting Using Air-Cache", </title> <booktitle> Proceedings of the 1st International Workshop on Satellite-based Information Services, </booktitle> <address> Rye, NY, </address> <year> 1996. </year> <month> 27 </month>
Reference-contexts: Nevertheless, in this hybrid model the bandwidth is assigned to the two broadcast modes statically, and there is no adaptation to the current workload, as the contents of the periodic broadcast do not change with time. In addition, data requests are not associated with deadlines. In <ref> [11, 12] </ref>, a model for adapting the allocation of the bandwidth to the periodic and on-demand modes is proposed. <p> To summarize, in Table 1 we list the features of the different models described above and our real-time adaptive hybrid broadcast model: Adaptive Timing constraints Bidirectional BD [1] No No No Extended-BD [2] No No Yes Real Time-BD [5,6,8] No Yes No Adaptive Broadcast <ref> [11, 12] </ref> Yes No Yes BoD [13] No Yes Yes RT Adaptive Hybrid Broadcast Yes Yes Yes Table 1: Comparison of broadcast models We can observe that none of the existing models integrates all the characteristics needed to perform effectively in a real-world, dynamic real-time asymmetric communication environment.
Reference: [12] <author> K. Stathatos, N. Roussopoulos and J. S. Baras, </author> <title> "Adaptive Data Broadcast in Hybrid Net--works", </title> <booktitle> Proceedings of the 23rd VLDB Conference, </booktitle> <address> Athens, Greece, </address> <year> 1997. </year>
Reference-contexts: Nevertheless, in this hybrid model the bandwidth is assigned to the two broadcast modes statically, and there is no adaptation to the current workload, as the contents of the periodic broadcast do not change with time. In addition, data requests are not associated with deadlines. In <ref> [11, 12] </ref>, a model for adapting the allocation of the bandwidth to the periodic and on-demand modes is proposed. <p> To summarize, in Table 1 we list the features of the different models described above and our real-time adaptive hybrid broadcast model: Adaptive Timing constraints Bidirectional BD [1] No No No Extended-BD [2] No No Yes Real Time-BD [5,6,8] No Yes No Adaptive Broadcast <ref> [11, 12] </ref> Yes No Yes BoD [13] No Yes Yes RT Adaptive Hybrid Broadcast Yes Yes Yes Table 1: Comparison of broadcast models We can observe that none of the existing models integrates all the characteristics needed to perform effectively in a real-world, dynamic real-time asymmetric communication environment. <p> To overcome this problem, we have incorporated a sampling technique into the model, in a similar way to the work done in <ref> [12] </ref>. When an item is added to the periodic program, the number of requests received in the previous cycle is conveniently 14 stored for later use. <p> This technique allows a Periodic item to remain Periodic if appropriate. The time interval in which the server collects the requests is a crucial design parameter, and as suggested in <ref> [12] </ref>, its value should be calculated so that only a few requests are received, in order for the sampling to be effective, otherwise this technique essentially defeats its purpose. This small number of requests that the server expects to receive when sampling an item is called the Expected Sample Size. <p> The deadline distribution is uniform, allowing only a small set of values f200, 500, 1000g, in time units. For a given item, one of these values is permanently associated with it. All the requests are supposed to have timing constraints. As pointed out in <ref> [12] </ref>, there is a trade-off in the values of the cooling factor and the sample size. Clearly, the lower the value of the cooling factor, the faster the adaptation to changes in the user access distribution is.
Reference: [13] <author> P. Xuan, S. Sen, O. Gonzalez, J. Fernandez and K. Ramamritham, </author> <title> "Efficient and Timely Dissemination of Data in mobile Environments", </title> <booktitle> Proceedings of the Third IEEE Real Time Technology and Applications Symposium, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1997. </year> <month> 28 </month>
Reference-contexts: In general, data broadcast models provide no mechanisms to ensure that time requirements are met. In an attempt to solve both problems, some bidirectional broadcast models have been studied <ref> [2, 13] </ref>, trying to exploit on the one hand the benefits derived from the high bandwidth efficiency and scalability of data broadcasting, and on the other hand the direct interaction 1 with the users of the client/server paradigm. <p> Unfortunately, the only hybrid model in which temporal constraints are taken into account <ref> [13] </ref> is not adaptive, that is, the information that is broadcast periodically and the fraction of the bandwidth allocated to each mode does not change with time. <p> However, this model is not bidirectional, that is, there is no uplink channel and consequently the server periodically broadcasts items based on a static estimation of the potential user population, not on the actual workload. Closer to our work is the hybrid Broadcast On-Demand (BoD) model, presented in <ref> [13] </ref>, as an extension of the traditional Broadcast Disk model. The BoD model integrates two separate channels, one high-capacity channel for server-to-users broadcasting and one low-capacity channel that allows the users to transmit requests to the server. <p> To summarize, in Table 1 we list the features of the different models described above and our real-time adaptive hybrid broadcast model: Adaptive Timing constraints Bidirectional BD [1] No No No Extended-BD [2] No No Yes Real Time-BD [5,6,8] No Yes No Adaptive Broadcast [11, 12] Yes No Yes BoD <ref> [13] </ref> No Yes Yes RT Adaptive Hybrid Broadcast Yes Yes Yes Table 1: Comparison of broadcast models We can observe that none of the existing models integrates all the characteristics needed to perform effectively in a real-world, dynamic real-time asymmetric communication environment. <p> This batching technique produces an important saving of bandwidth in overload conditions, resulting in a large increase of the number of satisfied users, as shown in <ref> [13] </ref>. 4.4 Sampling: Estimating the Access Frequency Distribution The transmission of a periodic broadcast program combined with indexing decreases the number of requests arriving at the server, clearly increasing the scalability of the server.
References-found: 13

