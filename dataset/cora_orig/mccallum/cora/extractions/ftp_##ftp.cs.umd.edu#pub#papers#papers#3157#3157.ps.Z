URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3157/3157.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: ABSTRACT CIRCA: THE COOPERATIVE INTELLIGENT REAL-TIME CONTROL ARCHITECTURE  
Author: by David John Musliner Co-Chairs: Kang G. Shin and Edmund H. Durfee 
Abstract: The Cooperative Intelligent Real-time Control Architecture (CIRCA) is a novel architecture for intelligent real-time control that can guarantee to meet hard deadlines while still using unpredictable, unrestricted AI methods. CIRCA includes a real-time subsystem used to execute reactive control plans that are guaranteed to meet the domain's real-time deadlines, keeping the system safe. At the same time, CIRCA's AI subsystem performs higher-level reasoning about the domain and the system's goals and capabilities, to develop future reactive control plans. CIRCA thus aims to be intelligent about real-time: rather than requiring the system's AI methods to meet deadlines, CIRCA isolates its reasoning about which time-critical reactions to guarantee from the actual execution of the selected reactions. The formal basis for CIRCA's performance guarantees is a state-based world model of agent/environment interactions. Borrowing approaches from real-time systems research, the world model provides the information required to make real-time performance guarantees, but avoids unnecessary complexity. Using the world model, the AI subsystem develops reactive control plans that restrict the world to a limited set of safe and desirable states, by guaranteeing the timely performance of actions to preempt transitions that lead out of the set of states. By executing such "safe" and "stable" plans, CIRCA's real-time subsystem is able to keep the system safe (in the world as modeled) for an indeterminate amount of time, while the parallel AI subsystem develops the next appropriate plan. We have applied a prototype CIRCA implementation to a simulated Puma robot arm performing multiple tasks with real-time deadlines, such as packing parts off a conveyor belt and responding to asynchronous interrupts. Our experimental results show how the system can guarantee to accomplish these tasks under a given set of domain conditions (e.g., conveyor belt speed) and resource limitations (e.g., robot arm speed). Furthermore, because CIRCA reasons explicitly about its own predictable, guaranteed behaviors, the system can recognize when its resources are insufficient for the desired behaviors (e.g., parts are arriving too quickly to be packed carefully), and can then make principled modifications to its performance (e.g., temporarily stacking parts on a table) to maintain system safety. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Agre and D. Chapman, "Pengi: </author> <title> An Implementation of a Theory of Activity," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 268-272. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: As we shall see in a moment, the use of indexical features (or variables) <ref> [1] </ref> and nondeterminism also has advantages in the representation of repetitive agent behaviors.
Reference: [2] <author> P. E. Agre and I. Horswill, </author> <title> "Cultural Support for Improvisation," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 363-368, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The very notion that the system can modify the behavior of the environment to make it more convenient for its own goals is relatively uncommon in planning systems, and has recently drawn attention in work by Agre <ref> [2] </ref> and Hammond [25]. The way CIRCA uses this technique is perhaps unique in that it is motivated by a strong understanding of exactly what the agent is and is not capable of achieving, and thus why the environmental modifications are required in the first place.
Reference: [3] <author> J. F. Allen, </author> <title> "Maintaining Knowledge about Temporal Intervals," </title> <journal> Communications of the ACM, </journal> <volume> vol. 26, no. 11, </volume> <pages> pp. 832-843, </pages> <year> 1983. </year>
Reference-contexts: As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [3, 10, 27, 48, 77] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted 52 eous events. transitions. <p> More complex relations, such as the overlapping-interval relations defined by Allen <ref> [3] </ref>, are not available to the control-planning world model 3 . Because the AIS must enumerate all possible world states, continuous-valued variables are a problem: if all their values are possible, the state space is infinite.
Reference: [4] <author> R. C. Arkin, </author> <title> "Integrating Behavioral, Perceptual, and World Knowledge in Reactive Navigation," </title> <booktitle> in Robotics and Autonomous Systems 6, </booktitle> <pages> pp. 105-122, </pages> <year> 1990. </year>
Reference-contexts: We focus instead on establishing the predictable mechanisms which will allow such policy decisions to be rigidly enforced. AuRA Arkin's Autonomous Robot Architecture (AuRA) <ref> [4] </ref> includes a reactive execution subsystem and a hierarchical planner that determines which reactive "schemas" are active. A world modeling subsystem controls AuRA's stored knowledge, providing an interface that avoids shared-memory assumptions. <p> However, the design of CIRCA has been tailored for future extensions in which fault-tolerance issues can be addressed through the use of "homeostatic" <ref> [4] </ref> or internal-state monitoring and control primitives. The RTS could execute TAPs which examine the state of its execution envir 106 onment to detect all types of faults and implement short-term, control-level workarounds for intermittent or temporary system failures.
Reference: [5] <author> R. A. Brooks, </author> <title> "A Robust Layered Control System for a Mobile Robot," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-2, no. 1, </volume> <pages> pp. 14-22, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: While performance guarantees have been verified by hand for the system, it does not yet include internal mechanisms for reasoning about its own timeliness or problem-solving capacity. The system does not reason about a model of agent/environment interactions to create its own performance guarantees. 29 Subsumption The subsumption architecture <ref> [5] </ref> consists of numerous small finite state machines ("modules") running in parallel with no shared memory, connected by simple message-passing channels. The modules are "reactive" in that they maintain little or no internal state, and rapidly produce outputs in direct response to inputs, with a minimum of inferencing.
Reference: [6] <author> R. L. Burden and J. D. Faires, </author> <title> Numerical Analysis, </title> <publisher> PWS-KENT Publishing Co., </publisher> <year> 1989. </year>
Reference-contexts: This observation clarifies the value of "monotonic-improvement" any-quality algorithms: if the iterative computation always improves its result quality, then the iteration can be guaranteed to terminate for any finite Q t . As a specific example, many iterative numerical methods <ref> [6] </ref> are any-precision algorithms. An iterative numerical method continually refines its estimate for the solution to a problem until the precision of its estimate is known to be beyond a certain level.
Reference: [7] <author> D. Chapman, </author> <title> "Planning for Conjunctive Goals," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 32, no. 3, </volume> <pages> pp. 333-374, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Unfortunately, the search-based AI methods used in complex planning systems are problematic for strategic schedulers. The fundamental problem is that planning involves searching for the solution to a generally intractable problem <ref> [7] </ref>, and thus the planning process has extremely large worst-case resource requirements. The time to find a plan in the worst case may be several orders of magnitude longer than the average time to find a plan. <p> This means 8 9 that allocating resources to guarantee the worst-case response time of a planner will be very costly, and will lead to very low utilization of a system's resources [60, 68]. Furthermore, AI systems with powerful knowledge representations <ref> [7, 14] </ref> or learning abilities [13] may have unbounded worst-case response times. In these cases, it is impossible to allocate sufficient resources ahead of time, and thus real-time guarantees are not feasible.
Reference: [8] <author> J. Connell and P. Viola, </author> <title> "Cooperative Control of a Semi-Autonomous Mobile Robot," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 1118-1121, </pages> <year> 1990. </year>
Reference-contexts: CIRCA's Scheduler module addresses this problem by scheduling TAPs for the single-processor RTS. Other systems <ref> [8, 75] </ref> have made provisions to activate only subsets of reactive behaviors implemented on a single processor. However, these systems do not reason about the resources required for each set of behaviors, and do not use advanced AI techniques to control the set of activated behaviors 3 . <p> The theory underlying Rex has been used to show that the information stored within a Rex machine can have a fixed relationship to the true state of the world. 3 Although Connell and Viola <ref> [8] </ref> are on a similar track: they use a human to make the decisions. 30 Thus Rex machines provide predictable execution and support the types of performance guarantees enforced by CIRCA's RTS. Gapps [32, 33] is a system for compiling declarative descriptions of agent behaviors into Rex machines.
Reference: [9] <author> T. Dean and M. Boddy, </author> <title> "An Analysis of Time-Dependent Planning," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 49-54, </pages> <year> 1988. </year>
Reference-contexts: These tactical methods are exemplified by any-time algorithms <ref> [9, 41, 65] </ref>, which can be halted at any time to yield a result, possibly with reduced precision, confidence, or completeness. Any-time algorithms provide an on-line, dynamic method for guaranteeing the timeliness of a result, but the quality of the result may be sacrificed. <p> One approach to dealing with over-constrained systems is to make no guarantees of minimum quality, but instead strive to perform "as well as possible" with the given resources. Dean and Boddy's work on "deliberation scheduling" <ref> [9] </ref> uses decision-theoretic methods to build task schedules that optimize a measure of overall system utility (output quality). The various problem-solving methods that a system might need to run in some situation are cast as any-time algorithms. <p> If the AIS has more time available, it can continue producing plans for as much time as is convenient, and then use the best plan stored so far. In this way, the AIS can itself implement an any-time planning algorithm <ref> [9, 65] </ref>. This feature is useful because, although achieving control-level goals is never dependent on timely responses from the AIS, achieving non-critical, task-level goals may be.
Reference: [10] <author> T. L. Dean, </author> <title> "Intractability and Time-Dependent Planning," </title> <booktitle> in Proceedings of the 1986 Workshop on Reasoning about Actions & Plans, </booktitle> <pages> pp. 245-266. </pages> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <year> 1987. </year>
Reference-contexts: As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [3, 10, 27, 48, 77] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted 52 eous events. transitions.
Reference: [11] <author> J. DeKleer and J. Brown, </author> <title> "A qualitative physics based on confluences," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 24, no. </volume> <pages> 1-3, pp. 7-83, </pages> <month> December </month> <year> 1984. </year>
Reference-contexts: The system must be able to derive a causal mapping between temporal transitions and the parameters that affect their duration, and also decide what actions the agent can take to modify those parameters, in the appropriate way. Qualitative physics <ref> [11, 16] </ref> might prove to be an excellent way to derive this information. 7.2.5 Modifying TAP Implementations (Method Selection) In addition to making changes to the world model in response to resource restrictions, the AIS can also make changes directly to the implemented form of the actions planned in the world
Reference: [12] <author> R. B. Doorenbos, </author> <title> "Matching 100,000 Learned Rules," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 290-296, </pages> <year> 1993. </year>
Reference-contexts: However, this reaction technique still incorporates the uncertain delay associated with firing all productions until quiescence and then making the decision to implement the chosen operator. Recent work by Doorenbos <ref> [12] </ref> has shown significant performance improvements for Soar's matching phase with very large numbers of rules (&gt; 100; 000), but the match time can still rise as the number of productions increases.
Reference: [13] <author> E. H. Durfee, </author> <title> "A Cooperative Approach to Planning for Real-Time Control," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 277-283, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: This requirement is 3 difficult for intelligent systems because many AI techniques are not suited to analyses that can provide worst-case response times. For example, systems that learn are able to form new chains of inferences, resulting in changing performance characteristics that may defy worst-case bounding <ref> [13] </ref>. Furthermore, even predictable AI methods often have such high variance in their response times that making guarantees based on worst-case values would result in severe underutilization of computational resources during normal operations [60]. <p> This means 8 9 that allocating resources to guarantee the worst-case response time of a planner will be very costly, and will lead to very low utilization of a system's resources [60, 68]. Furthermore, AI systems with powerful knowledge representations [7, 14] or learning abilities <ref> [13] </ref> may have unbounded worst-case response times. In these cases, it is impossible to allocate sufficient resources ahead of time, and thus real-time guarantees are not feasible.
Reference: [14] <author> K. Erol, D. Nau, and V. S. Subrahmanian, </author> <title> "When is Planning Decidable?," </title> <booktitle> in Proc. Int'l Conf. on Artificial Intelligence Planning Systems, </booktitle> <pages> pp. 222-227, </pages> <year> 1992. </year> <pages> 166 167 </pages>
Reference-contexts: This means 8 9 that allocating resources to guarantee the worst-case response time of a planner will be very costly, and will lead to very low utilization of a system's resources [60, 68]. Furthermore, AI systems with powerful knowledge representations <ref> [7, 14] </ref> or learning abilities [13] may have unbounded worst-case response times. In these cases, it is impossible to allocate sufficient resources ahead of time, and thus real-time guarantees are not feasible.
Reference: [15] <author> R. J. Firby, </author> <title> "An Investigation into Reactive Planning in Complex Domains," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 202-206, </pages> <year> 1987. </year>
Reference-contexts: Several recent projects have taken similar approaches, with a variety of different areas of focus. ERE/RAPs Hanks and Firby [26] are combining a transformational planner [27] with an execution module based on Reactive-Action Packages (RAPs) <ref> [15] </ref>. Each RAP is a separate entity that pursues a goal, possibly with multiple methods, until that goal is achieved. In pursuing a goal, RAPs can process global world model data and execute actions that change the model and/or the outside world.
Reference: [16] <author> K. Forbus, </author> <title> "Qualitative Process Theory," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 24, no. </volume> <pages> 1-3, pp. 85-168, </pages> <month> December </month> <year> 1984. </year>
Reference-contexts: The system must be able to derive a causal mapping between temporal transitions and the parameters that affect their duration, and also decide what actions the agent can take to modify those parameters, in the appropriate way. Qualitative physics <ref> [11, 16] </ref> might prove to be an excellent way to derive this information. 7.2.5 Modifying TAP Implementations (Method Selection) In addition to making changes to the world model in response to resource restrictions, the AIS can also make changes directly to the implemented form of the actions planned in the world
Reference: [17] <author> C. Forgy, </author> <title> "Rete: A Fast Algorithm for the Many Pattern/Many Object Pattern Match Problem," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 19, no. 1, </volume> <pages> pp. 17-37, </pages> <month> September </month> <year> 1982. </year>
Reference-contexts: To determine which KSs are applicable to the current problem-solving state, the KS variables and preconditions are matched against the task structures via a unique Rete net <ref> [17] </ref> implementation. The Rete implementation allows the preconditions of each KS to apply arbitrary Lisp tests to the KS variables, allowing very powerful expressions describing when different KSs are applicable. The KS precondition is formed from either a single expression or a list of expressions that are implicitly conjoined.
Reference: [18] <author> M. K. Franklin and A. Gabrielian, </author> <title> "A Transformational Method for Verifying Safety Properties in Real-Time Systems," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 112-123, </pages> <year> 1989. </year>
Reference-contexts: To show formally how a control plan can make a safe set of states a safely-controlled set, we now introduce a simple set of correctness-preserving model transformations. These 45 transformations prune out unreachable states <ref> [18] </ref>, and thus allow us to prove safety properties by showing that certain control plans can restrict the world so that no failure states are reachable. 4.5 Model Transformations We must first define the concept of reachability in our world model.
Reference: [19] <author> A. Garvey and V. Lesser, </author> <title> "Design-to-time Real-Time Scheduling," </title> <journal> to appear in IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> , <year> 1993. </year>
Reference-contexts: In this over-constrained situation, an intelligent system must make tradeoffs between the level of output quality it will guarantee and the resource usage it schedules. For example, the system might use load-shedding methods <ref> [19, 35, 44] </ref> to drop or postpone some mandatory task, leaving resources available for the rest. Or, if alternative methods are available for accomplishing a particular task, the system might attempt to schedule lower-cost methods that will produce a lower-quality solution [19, 47]. <p> For example, the system might use load-shedding methods [19, 35, 44] to drop or postpone some mandatory task, leaving resources available for the rest. Or, if alternative methods are available for accomplishing a particular task, the system might attempt to schedule lower-cost methods that will produce a lower-quality solution <ref> [19, 47] </ref>. When making these tradeoffs between solution quality and resource usage, an intelligent system should use principled methods to decide what it will accomplish. <p> The AIS may have several different methods for performing an action (or a test), and it can choose amongst them according to the resources available. This tradeoff method is equivalent to the "configuration selection" [35], "version selection" [47], and "design-to-time" <ref> [19] </ref> approaches. For example, suppose that the Puma control system provides the RTS with two different types of part-placement operations, a slow, high-accuracy, "fine-motion" operation and a faster, lower-accuracy, "coarse-motion" operation. This means that the system has two possible primitive operators for the place-part-in-box action transition.
Reference: [20] <author> E. Gat, "ALFA: </author> <title> A Language for Programming Reactive Robotic Control Systems," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <year> 1991. </year>
Reference-contexts: As such, it is not a fully-developed robot programming language like RPL [50] or ALFA <ref> [20] </ref>, designed for humans building complex programs. Instead, the TAP mechanisms implement a "programmable production system," where the primitives used by the TAP "productions" are defined by arbitrary, user-produced C code (or, in an earlier version of the RTS, in Lisp).
Reference: [21] <author> E. Gat, </author> <title> Reliable Goal Directed Reactive Control for Autonomous Mobile Robots, </title> <type> PhD thesis, </type> <institution> Virginia Polytechnic Institute, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: The key point is that CIRCA is aware of its own capacity to deal with a specific combination of goals and environment. This is analogous to the cognizant failure stressed by Gat <ref> [21] </ref>. Guaranteed control plans also play a crucial role in isolating the unpredictable performance AIS from the rigid, real-time guarantees of the RTS, as discussed above. Of course, CIRCA's guarantees are based on several assumptions about the generally uncertain, unpredictable real world. <p> From the perspective of intelligent real-time control, one of the more interesting new benchmarks is the Wesson Oil Problem (WOP), as described by Gat <ref> [21, p. 40] </ref>: 81 The name derives from a television commercial for Wesson Oil in which a housewife is frying chicken (in Wesson Oil, of course) when one of her children suddenly falls down and has to be taken to the hospital.
Reference: [22] <author> E. Gat, </author> <title> "On the Role of Stored Internal State in the Control of Autonomous Mobile Robots," </title> <journal> AI Magazine, </journal> <volume> vol. 14, no. 1, </volume> <pages> pp. 64-73, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Thus, decisions about the use of internal state result from the principled application of knowledge about the system and the environment in which it is embedded. While information at higher abstraction levels may generally have longer intervals of predictive sufficiency <ref> [22] </ref>, the explicit representation of predictive sufficiency allows the benefits of internal state to be accrued even at lower levels of abstraction. In sum, predictive sufficiency is a critical concept for embedded agents, because it permits a system to make guarantees about its behaviors.
Reference: [23] <author> M. P. Georgeff and F. F. Ingrand, </author> <title> "Decision-Making in an Embedded Reasoning System," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 972-978, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: CIRCA uses this technique when generating TAP plans (see Section 5.3.1), where a minimally acceptable plan achieves only the control-level goals. PRS CIRCA's AIS includes some mechanisms derived from the Procedural Reasoning System (PRS) <ref> [23, 31] </ref>, which itself has features making it suited to real-time applications. Ingrand and Georgeff have shown that, given certain assumptions about event frequencies and the form of the system's procedural knowledge, PRS can be guaranteed to notice (or begin reacting to) every world event within a bounded time. <p> The flexibility of this precondition representation incurs the cost of relatively slow execution: Rete systems using more restricted precondition languages can be highly optimized. The interpreter mechanism that chooses the next KS to fire is drawn almost directly from the PRS architecture <ref> [23, 31] </ref>, and bears little resemblance to a blackboard's agenda mechanism. Figure 5.3 shows a slightly simplified version of the Lisp code for the prototype AIS interpreter.
Reference: [24] <author> P. Godefroid and F. Kabanza, </author> <title> "An Efficient Reactive Planner for Synthesizing Reactive Plans," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 640-645, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: This requires either an exponential enumeration of states or some dependency information that allows the system to extend guarantees made for one state to other states without examining the others individually. Recent work by Godefroid and Kabanza <ref> [24] </ref> illustrates one way in which such dependency information can reduce search spaces; their results allow a system to examine only a single ordering of independent actions, rather than enumerating all possible orderings. These results are not immediately applicable to CIRCA, because their world model does not include external events.
Reference: [25] <author> K. J. Hammond and T. M. </author> <title> Converse, "Stabilizing Environments to Facilitate Planning and Activity: An Engineering Argument," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 787-793, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The very notion that the system can modify the behavior of the environment to make it more convenient for its own goals is relatively uncommon in planning systems, and has recently drawn attention in work by Agre [2] and Hammond <ref> [25] </ref>. The way CIRCA uses this technique is perhaps unique in that it is motivated by a strong understanding of exactly what the agent is and is not capable of achieving, and thus why the environmental modifications are required in the first place.
Reference: [26] <author> S. Hanks and R. J. Firby, </author> <title> "Issues and Architectures for Planning and Execution," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 59-70, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Reactive systems simply run as fast as they can, and thus they are only "coincidently real-time" [36]. Finally, since purely reactive systems lack the ability to learn and to form complex symbolic plans or expectations, they have little of the power we associate with intelligent systems <ref> [26] </ref>. Essentially, all of the inferencing and uncertainty associated with intelligent behavior has been engineered out of these systems. We might consider them to be convenient, powerful formulations of traditional control systems, rather than intelligent real-time control systems. <p> Several recent projects have taken similar approaches, with a variety of different areas of focus. ERE/RAPs Hanks and Firby <ref> [26] </ref> are combining a transformational planner [27] with an execution module based on Reactive-Action Packages (RAPs) [15]. Each RAP is a separate entity that pursues a goal, possibly with multiple methods, until that goal is achieved. <p> In pursuing a goal, RAPs can process global world model data and execute actions that change the model and/or the outside world. RAPs can also place new RAPs on the execution queue and suspend themselves, implementing sequential and hierarchical control. The description of the combined system <ref> [26] </ref> notes that sensing actions must be explicitly included within RAPs, so that data examined by the RAPs is up-to-date.
Reference: [27] <author> S. Hanks, </author> <title> "Practical Temporal Projection," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Several recent projects have taken similar approaches, with a variety of different areas of focus. ERE/RAPs Hanks and Firby [26] are combining a transformational planner <ref> [27] </ref> with an execution module based on Reactive-Action Packages (RAPs) [15]. Each RAP is a separate entity that pursues a goal, possibly with multiple methods, until that goal is achieved. <p> As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [3, 10, 27, 48, 77] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted 52 eous events. transitions.
Reference: [28] <author> B. Hayes-Roth, </author> <title> "Architectural Foundations for Real-Time Performance in Intelligent Agents," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 99-125, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: This scheduled communication not only allows the RTS to behave predictably, it also gives the AIS control over the amount of feedback data which the RTS sends to the AIS, allowing a dynamic filtering similar to that used by Guardian <ref> [28] </ref>. If the AIS needs to keep 3 This more-complex test expression will increase the transfer TAP's worst-case execution time.
Reference: [29] <author> J. Hendler, </author> <title> "Abstraction and Reaction," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: Higher levels of planning have been added to the DR model using the notion of abstraction: the reactive system reasons about detailed information in very small units of time, while higher levels of reasoning use more abstract data and larger time scales <ref> [29] </ref>. Complex reasoning is implemented by reactive elements that are triggered by abstract information in the world model. The enhanced DR model thus attempts to smoothly integrate reactive reasoning and higher-level reasoning within a single processing model, unlike the abrupt distinction CIRCA makes between task-level and control-level goals.
Reference: [30] <author> J. Hendler and A. Agrawala, </author> <title> "Mission Critical Planning: </title> <booktitle> AI on the MARUTI Real-Time Operating System," in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 77-84, </pages> <month> November </month> <year> 1990. </year> <month> 168 </month>
Reference-contexts: ATLANTIS does not address the resource reasoning or guaranteed performance objectives of CIRCA. DR/MARUTI Hendler and Agrawala <ref> [30] </ref> are integrating an enhanced Dynamic Reaction (DR) system and the MARUTI operating system to implement guaranteed real-time reactive reasoning in a manner very similar to CIRCA's guaranteed TAP schedules. <p> DR/MARUTI currently does not reason about its scheduling requirements: it does not generate them, and it cannot revise them if sufficient resources are not available. However, Hendler and Agrawala have expressed interest in methods for internally deriving the scheduling requirements of the system <ref> [30] </ref>, much as CIRCA reasons about TAP requirements. They discuss the need to increase the flexibility of DR/MARUTI so that it may include non-real-time jobs, just as CIRCA provides the unguaranteed TAP list.
Reference: [31] <author> F. F. Ingrand and M. P. Georgeff, </author> <title> "Managing Deliberation and Reasoning in Real-Time AI Systems," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 284-291, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: CIRCA uses this technique when generating TAP plans (see Section 5.3.1), where a minimally acceptable plan achieves only the control-level goals. PRS CIRCA's AIS includes some mechanisms derived from the Procedural Reasoning System (PRS) <ref> [23, 31] </ref>, which itself has features making it suited to real-time applications. Ingrand and Georgeff have shown that, given certain assumptions about event frequencies and the form of the system's procedural knowledge, PRS can be guaranteed to notice (or begin reacting to) every world event within a bounded time. <p> Thus the system's response to a particular event can be arbitrarily interrupted by the arrival of other events, and the response to those events can delay the initial processing. It is possible to limit PRS' inferencing capabilities and make guarantees about overall response time <ref> [31] </ref>. This approach leads to a complete embedding of the AI system within 31 the real-time application environment [57], and requires either low utilization or engineering out the high-variance AI processing. The guarantees that PRS makes are external to the system's operation: it does not introspect on its abilities. <p> The flexibility of this precondition representation incurs the cost of relatively slow execution: Rete systems using more restricted precondition languages can be highly optimized. The interpreter mechanism that chooses the next KS to fire is drawn almost directly from the PRS architecture <ref> [23, 31] </ref>, and bears little resemblance to a blackboard's agenda mechanism. Figure 5.3 shows a slightly simplified version of the Lisp code for the prototype AIS interpreter. <p> Remaining interruptible gives PRS and our AIS the useful ability to perform arbitrarily complex computations within a KS while also attending to ongoing world events. In particular, Ingrand and Georgeff <ref> [31] </ref> have shown that, given certain reasonable assumptions about event frequency and KS precondition complexity, the prototype AIS will notice every event that generates an interrupt.
Reference: [32] <author> L. P. Kaelbling, </author> <title> "Goals as Parallel Program Specifications," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 60-65, </pages> <year> 1988. </year>
Reference-contexts: Gapps <ref> [32, 33] </ref> is a system for compiling declarative descriptions of agent behaviors into Rex machines. Gapps takes as input the agent's top-level goal and a set of goal-reduction rules that describe how to transform goals into smaller goals or Rex-machine primitives.
Reference: [33] <author> L. P. Kaelbling and S. J. Rosenschein, </author> <title> "Action and Planning in Embedded Agents," </title> <booktitle> in Robotics and Autonomous Systems 6, </booktitle> <pages> pp. 35-48, </pages> <year> 1990. </year>
Reference-contexts: Gapps <ref> [32, 33] </ref> is a system for compiling declarative descriptions of agent behaviors into Rex machines. Gapps takes as input the agent's top-level goal and a set of goal-reduction rules that describe how to transform goals into smaller goals or Rex-machine primitives.
Reference: [34] <author> Z. Kohavi, </author> <title> Switching and Finite Automata Theory, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: The test minimization process is essentially equivalent to the minimization of switching circuits <ref> [34] </ref>. Each action can be considered separately as a circuit whose minterms are the features of the states for which it has been planned.
Reference: [35] <author> T.-W. Kuo and A. K. Mok, </author> <title> "Load Adjustment in Adaptive Real-Time Systems," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 160-170, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: In this over-constrained situation, an intelligent system must make tradeoffs between the level of output quality it will guarantee and the resource usage it schedules. For example, the system might use load-shedding methods <ref> [19, 35, 44] </ref> to drop or postpone some mandatory task, leaving resources available for the rest. Or, if alternative methods are available for accomplishing a particular task, the system might attempt to schedule lower-cost methods that will produce a lower-quality solution [19, 47]. <p> The AIS may have several different methods for performing an action (or a test), and it can choose amongst them according to the resources available. This tradeoff method is equivalent to the "configuration selection" <ref> [35] </ref>, "version selection" [47], and "design-to-time" [19] approaches. For example, suppose that the Puma control system provides the RTS with two different types of part-placement operations, a slow, high-accuracy, "fine-motion" operation and a faster, lower-accuracy, "coarse-motion" operation.
Reference: [36] <author> T. J. Laffey, P. A. Cox, J. L. Schmidt, S. M. Kao, and J. Y. </author> <title> Read, "Real-Time Knowledge-Based Systems," </title> <journal> AI Magazine, </journal> <volume> vol. 9, no. 1, </volume> <pages> pp. 27-45, </pages> <year> 1988. </year>
Reference-contexts: Real-time computing is not about building "fast" systems; it is about building systems that 1 2 are predictably "fast enough" to act on their environments in ways that achieve their goals <ref> [36, 76] </ref>. This understanding of what it means to be "real-time" is dramatically different from the casual, non-technical use of the term which has become common in many fields. <p> intelligence within a real-time system, so that the AI mechanisms are required to meet deadlines| the goal is to be "intelligent in real time." One way to accomplish this is to simplify an AI system's knowledge-base and inference mechanism so that it responds to all inputs within a bounded time <ref> [36, 40] </ref>. Unfortunately, this approach engineers out of the AI system the high-variance search and unpredictability which distinguishes AI techniques from simple algorithms. In a sense, when a system with these limitations can always solve a problem, that problem is no longer in the realm of AI. <p> CIRCA's resource allocation and scheduling are crucial to the system's flexibility, extensibility, and efficiency. Furthermore, by explicitly reasoning about time and resources, CIRCA is able to provide guaranteed performance, which reactive systems cannot. Reactive systems simply run as fast as they can, and thus they are only "coincidently real-time" <ref> [36] </ref>. Finally, since purely reactive systems lack the ability to learn and to form complex symbolic plans or expectations, they have little of the power we associate with intelligent systems [26]. Essentially, all of the inferencing and uncertainty associated with intelligent behavior has been engineered out of these systems.
Reference: [37] <author> J. E. Laird and P. S. Rosenbloom, </author> <title> "Integrating Execution, Planning, and Learning in Soar for External Environments," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <month> July </month> <year> 1990. </year>
Reference-contexts: From a predictability perspective, Soar's flexible decision-making approach has the disadvantage that arbitrarily large amounts of subgoaling and production matching may occur. To avoid subgoaling, Soar encodes one type of reactive knowledge as productions that indicate particular operators must be selected in a given situation <ref> [37] </ref>. However, this reaction technique still incorporates the uncertain delay associated with firing all productions until quiescence and then making the decision to implement the chosen operator.
Reference: [38] <author> J. E. Laird, </author> <title> "Integrating Planning and Execution in Soar," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: The choice of TAPs also has the effect of focusing the system's attention on features which 32 are deemed important, eliminating the assumption that all changes in the world are detected by the sensor system <ref> [38] </ref>. By planning and reasoning about sequences of its own reactions, CIRCA can provide guarantees on its overall interactions with the environment, in addition to individual reactive behaviors.
Reference: [39] <author> J. E. Laird, A. Newell, and P. S. Rosenbloom, </author> <title> "SOAR: An Architecture for General Intelligence," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 33, </volume> <pages> pp. 1-64, </pages> <year> 1987. </year>
Reference-contexts: These systems use a set of designated reactions which bypass the normal invocation mechanisms, leading to faster response times. For example, the Soar system <ref> [39] </ref> is an enhanced production system that structures all deliberate activity as search. Searches are conducted in problem spaces characterized by current states, goal states, and operators to move between states. Soar productions encode knowledge about what decisions to make in different situations.
Reference: [40] <author> J. S. Lark, L. D. Erman, S. Forrest, et al., </author> <title> "Concepts, Methods, and Languages for Building Timely Intelligent Systems," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 127-148, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: intelligence within a real-time system, so that the AI mechanisms are required to meet deadlines| the goal is to be "intelligent in real time." One way to accomplish this is to simplify an AI system's knowledge-base and inference mechanism so that it responds to all inputs within a bounded time <ref> [36, 40] </ref>. Unfortunately, this approach engineers out of the AI system the high-variance search and unpredictability which distinguishes AI techniques from simple algorithms. In a sense, when a system with these limitations can always solve a problem, that problem is no longer in the realm of AI.
Reference: [41] <author> K.-J. Lin, S. Natarajan, and J. W.-S. Liu, </author> <title> "Imprecise Results: Utilizing Partial Computations in Real-Time Systems," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 210-217, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: These tactical methods are exemplified by any-time algorithms <ref> [9, 41, 65] </ref>, which can be halted at any time to yield a result, possibly with reduced precision, confidence, or completeness. Any-time algorithms provide an on-line, dynamic method for guaranteeing the timeliness of a result, but the quality of the result may be sacrificed. <p> Furthermore, by reasoning explicitly about its goals, capabilities, and deadlines, CIRCA can trade off the guarantees it chooses to enforce when constrained by limited resources. The "imprecise computation" paradigm <ref> [41] </ref> is a modification of the any-time method in which some minimum amount of processing is guaranteed, so that the algorithm will always produce a result with a minimally acceptable result. <p> What we really want, if possible, is a plan that guarantees the control-level goals and also either guarantees or at least makes possible the task-level goals. To find those plans, we have formed the action-planning algorithm as an imprecise computation <ref> [41, 54] </ref> that will continue generating new plans until no more are available, or until a plan that achieves all of the task-level goals is found. In the current implementation, a plan is considered to achieve a task-level goal if any state satisfying that goal is reachable.
Reference: [42] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: In the Puma domain, this has little or no effect, since the scheduling process is much less time-consuming than the TAP planning. The Scheduler uses a modified deadline-driven scheduling algorithm <ref> [42, 78] </ref> to build a TAP schedule. This algorithm specifies that, each time the system can choose which TAP to run, it should run the available TAP with the earliest deadline.
Reference: [43] <author> J. W.-S. Liu, K.-J. Lin, and S. Natarajan, </author> <title> "Scheduling Real-Time, Periodic Jobs Using Imprecise Results," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 252-260, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: This is essentially the approach taken by Liu et al. <ref> [43] </ref> in the "imprecise computation" method. In this paradigm, an algorithm is divided into mandatory computations that are required to reach a minimal quality threshold, and optional computations that incrementally improve the result and can be interrupted at any time. <p> There are two fundamental problems with this assumption. First, such mappings may be difficult or impossible to derive, because the performance of most algorithms is highly dependent on the particular problem to which the algorithm is being applied. For example, Liu et al. <ref> [43] </ref> describe an any-time implementation of Newton's method for finding the roots of a function F .
Reference: [44] <author> J. W. S. Liu, K.-J. Lin, W.-K. Shih, et al., </author> <title> "Algorithms for Scheduling Imprecise Computations," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In this over-constrained situation, an intelligent system must make tradeoffs between the level of output quality it will guarantee and the resource usage it schedules. For example, the system might use load-shedding methods <ref> [19, 35, 44] </ref> to drop or postpone some mandatory task, leaving resources available for the rest. Or, if alternative methods are available for accomplishing a particular task, the system might attempt to schedule lower-cost methods that will produce a lower-quality solution [19, 47].
Reference: [45] <author> D. M. Lyons, A. J. Hendriks, and S. Mehta, </author> <title> "Achieving Robustness by Casting Planning as Adaptation of a Reactive System," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 198-203, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: UPs do not yet handle 36 this type of metric information or the introspective reasoning required to internally verify or alter system goals. RS Lyons et al. <ref> [45, 46] </ref> are investigating the Robot Schemas (RS) plan representation with many of the same goals as our work on CIRCA. In the RS model, robot plans are represented as concurrent communicating processes. RS provides operators to compose larger systems from various combinations of processes. <p> RS research began by describing static, hand-coded robot control systems. An execution environment is now being developed to allow the system to run its schemas with predictable, guaranteed timeliness <ref> [45] </ref>. A planning technique has also been proposed [45], in which a concurrent planning process incrementally modifies the reactive schemas running on the execution system. <p> RS research began by describing static, hand-coded robot control systems. An execution environment is now being developed to allow the system to run its schemas with predictable, guaranteed timeliness <ref> [45] </ref>. A planning technique has also been proposed [45], in which a concurrent planning process incrementally modifies the reactive schemas running on the execution system. A major advantage of this approach is that it avoids CIRCA's behavior of building plans from scratch following every change of goal or other environmental feature.
Reference: [46] <author> D. M. Lyons, </author> <title> "A Process-Based Approach to Task Plan Representation," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 2142-2147, </pages> <year> 1990. </year> <month> 169 </month>
Reference-contexts: UPs do not yet handle 36 this type of metric information or the introspective reasoning required to internally verify or alter system goals. RS Lyons et al. <ref> [45, 46] </ref> are investigating the Robot Schemas (RS) plan representation with many of the same goals as our work on CIRCA. In the RS model, robot plans are represented as concurrent communicating processes. RS provides operators to compose larger systems from various combinations of processes. <p> The RS model can be used to represent both the capabilities of a control system and its environment, just as CIRCA represents both. Rewrite rules describe the evolution of RS systems, and these rules can be used to derive proofs that systems will meet their goals <ref> [46] </ref>. RS research began by describing static, hand-coded robot control systems. An execution environment is now being developed to allow the system to run its schemas with predictable, guaranteed timeliness [45].
Reference: [47] <author> N. Malcolm and W. Zhao, </author> <title> "Version Selection Schemes for Hard Real-Time Communications," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 12-21, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: For example, the system might use load-shedding methods [19, 35, 44] to drop or postpone some mandatory task, leaving resources available for the rest. Or, if alternative methods are available for accomplishing a particular task, the system might attempt to schedule lower-cost methods that will produce a lower-quality solution <ref> [19, 47] </ref>. When making these tradeoffs between solution quality and resource usage, an intelligent system should use principled methods to decide what it will accomplish. <p> The AIS may have several different methods for performing an action (or a test), and it can choose amongst them according to the resources available. This tradeoff method is equivalent to the "configuration selection" [35], "version selection" <ref> [47] </ref>, and "design-to-time" [19] approaches. For example, suppose that the Puma control system provides the RTS with two different types of part-placement operations, a slow, high-accuracy, "fine-motion" operation and a faster, lower-accuracy, "coarse-motion" operation. This means that the system has two possible primitive operators for the place-part-in-box action transition.
Reference: [48] <author> D. McDermott, </author> <title> "A Temporal Logic For Reasoning About Processes and Plans," </title> <journal> Cognitive Science, </journal> <volume> vol. 6, </volume> <pages> pp. 101-155, </pages> <year> 1982. </year>
Reference-contexts: States contain descriptions of the features of the world at some instant, and transitions describe how those features can change. Ongoing processes in the world are represented by "state-encoding"- that is, the status of a process is considered a feature of the world (a "fluent" <ref> [48] </ref>), and is explicitly encoded into the representation of a state. Important changes in process status thus cor 39 40 respond to transitions between states. <p> As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [3, 10, 27, 48, 77] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted 52 eous events. transitions.
Reference: [49] <author> D. McDermott, </author> <title> "Planning Reactive Behavior: A Progress Report," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 450-458, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: A major advantage of this approach is that it avoids CIRCA's behavior of building plans from scratch following every change of goal or other environmental feature. RPL/XFRM While RS uses a process-based representation for plans, McDermott is investigating a very general Lisp-like Reactive Plan Language (RPL) <ref> [49, 50] </ref> as a basis for both planning and execution. The XFRM system [51] includes a planner that incrementally modifies an RPL program to improve its performance on given tasks. On the positive side, the flexibility of RPL gives tremendous representational power.
Reference: [50] <author> D. McDermott, </author> <title> "A Reactive Plan Language," </title> <type> Technical Report 864, </type> <institution> Yale University Department of Computer Science, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: A major advantage of this approach is that it avoids CIRCA's behavior of building plans from scratch following every change of goal or other environmental feature. RPL/XFRM While RS uses a process-based representation for plans, McDermott is investigating a very general Lisp-like Reactive Plan Language (RPL) <ref> [49, 50] </ref> as a basis for both planning and execution. The XFRM system [51] includes a planner that incrementally modifies an RPL program to improve its performance on given tasks. On the positive side, the flexibility of RPL gives tremendous representational power. <p> As such, it is not a fully-developed robot programming language like RPL <ref> [50] </ref> or ALFA [20], designed for humans building complex programs. Instead, the TAP mechanisms implement a "programmable production system," where the primitives used by the TAP "productions" are defined by arbitrary, user-produced C code (or, in an earlier version of the RTS, in Lisp).
Reference: [51] <author> D. McDermott, </author> <title> "Transformational Planning of Reactive Behavior," </title> <type> Technical Report 941, </type> <institution> Yale University Department of Computer Science, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: RPL/XFRM While RS uses a process-based representation for plans, McDermott is investigating a very general Lisp-like Reactive Plan Language (RPL) [49, 50] as a basis for both planning and execution. The XFRM system <ref> [51] </ref> includes a planner that incrementally modifies an RPL program to improve its performance on given tasks. On the positive side, the flexibility of RPL gives tremendous representational power.
Reference: [52] <author> D. P. Miller, </author> <title> Planning by Search Through Simulations, </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <year> 1985. </year>
Reference-contexts: CIRCA's combination of indexical variables and nondeterministic transitions leads to a uniquely powerful approach to planning repetitive and looping behaviors. Normally, planning looping behaviors (such as the Puma task of packing parts, hammering a nail, or driving a screw <ref> [52] </ref>) causes problems for planners because they reason about individual objects, and cannot recognize that they are building loops.
Reference: [53] <author> D. P. Miller and E. Gat, </author> <title> "Exploiting Known Topologies to Navigate with Low-Computation Sensing," </title> <booktitle> in Proc. SPIE Sensor Fusion Conf., </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: In contrast, CIRCA reasons explicitly about its ability to remain safe by activating selected sets of reactions, and thus CIRCA can take into account its own bounded reactivity in building plans and choosing courses of action. ATLANTIS Miller and Gat have developed the three-layer ATLANTIS system <ref> [53] </ref>, in which the bottom layer provides a subsumption-like reactive controller and the top layer is a deliberative planner and world modeller. In between, the sequencing layer turns on and off sets of reactive behaviors, much as CIRCA runs different TAP schedules.
Reference: [54] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "Any-Dimension Algorithms," </title> <booktitle> in Proc. Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pp. 78-81, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: What we really want, if possible, is a plan that guarantees the control-level goals and also either guarantees or at least makes possible the task-level goals. To find those plans, we have formed the action-planning algorithm as an imprecise computation <ref> [41, 54] </ref> that will continue generating new plans until no more are available, or until a plan that achieves all of the task-level goals is found. In the current implementation, a plan is considered to achieve a task-level goal if any state satisfying that goal is reachable.
Reference: [55] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "Any-Dimension Algorithms and Real-Time AI," </title> <type> Technical Report CSE-TR-151-92, </type> <institution> University of Michigan Computer Science and Engineering, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: As a result, the algorithm may overshoot the resource threshold (R t ) by up to the maximum amount of resources used 1 In this discussion, we are not concerned with alternative, asynchronously-monitored termination conditions that might rely on interrupts to halt the iterative computation <ref> [55] </ref>. 11 (a) Simple any-resource algorithm. (b) Simple any-quality algorithm. during any single iteration of the computation (R u ). Thus Figure 2.2a shows that a simple any-resource computation will be halted at some point when the resource usage is between R t and R t + R u .
Reference: [56] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "Reasoning About Bounded Reactivity to Achieve Real-Time Guarantees," </title> <booktitle> in Working Notes of the AAAI Spring Symp. on Selective Perception, </booktitle> <pages> pp. 104-107, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Within this type of environment, CIRCA is designed to make guarantees about its performance based on the fundamental restriction that the system has limited sensing, processing, and actuating resources. A direct consequence of this bounded rationality [73] and bounded reactivity <ref> [56] </ref> is that the system usually cannot simultaneously guarantee all the required reactions to input stimuli that may ever be required to achieve its goals. CIRCA's solution to this limitation has two elements.
Reference: [57] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "CIRCA: A Cooperative Intelligent Real-Time Control Architecture," </title> <journal> to appear in IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> , <year> 1993. </year>
Reference-contexts: It is possible to limit PRS' inferencing capabilities and make guarantees about overall response time [31]. This approach leads to a complete embedding of the AI system within 31 the real-time application environment <ref> [57] </ref>, and requires either low utilization or engineering out the high-variance AI processing. The guarantees that PRS makes are external to the system's operation: it does not introspect on its abilities. <p> Given that most rigorous capability, we can easily modify the system so that it can forgo various goals when necessitated by resource restrictions <ref> [57] </ref>. With the action-planning algorithm described above, we can derive every possible action plan that guarantees to avoid control-level failure. What we really want, if possible, is a plan that guarantees the control-level goals and also either guarantees or at least makes possible the task-level goals.
Reference: [58] <author> P. Nii, </author> <title> "The Blackboard Model of Problem Solving," </title> <journal> AI Magazine, </journal> <volume> vol. VII, no. 2, </volume> <pages> pp. 38-53, </pages> <month> Summer </month> <year> 1986. </year>
Reference-contexts: The AIS interpreter processes these tasks by running Lisp code structured into Knowledge Sources (KSs) that are similar in form to those of a blackboard system <ref> [58] </ref>.
Reference: [59] <author> N. J. Nilsson, </author> <booktitle> Principles of Artificial Intelligence, </booktitle> <publisher> Tioga Press, </publisher> <address> Palo Alto, CA., </address> <year> 1980. </year>
Reference-contexts: The input to these mechanisms is divided into three types of information: transition descriptions, initial state descriptions, and goal descriptions. Transition descriptions are simple production rules that detail the changes the world can undergo, much like STRIPS operators <ref> [59] </ref>. Figure 5.6 shows example rules from the Puma domain. Note that the preconditions and postconditions need not fully specify all features of the states to which the transitions apply. These descriptions are implicitly generalized by the lack of certain feature specifications. <p> The Planning Algorithm Given this input information, the AIS dynamically constructs the graph model and the plan of actions together in a single depth-first search process, essentially similar to a forward-chaining STRIPS planner <ref> [59] </ref>. This process operates on a stack of states (the state-stack), examining each state in turn and planning actions that achieve goals and preempt temporal transitions that lead to failure. The flowchart in Figure 5.8 illustrates the planning algorithm.
Reference: [60] <author> C. J. Paul, A. Acharya, B. Black, and J. K. Strosnider, </author> <title> "Reducing Problem-Solving Variance to Improve Predictability," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 81-93, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Furthermore, even predictable AI methods often have such high variance in their response times that making guarantees based on worst-case values would result in severe underutilization of computational resources during normal operations <ref> [60] </ref>. <p> This means 8 9 that allocating resources to guarantee the worst-case response time of a planner will be very costly, and will lead to very low utilization of a system's resources <ref> [60, 68] </ref>. Furthermore, AI systems with powerful knowledge representations [7, 14] or learning abilities [13] may have unbounded worst-case response times. In these cases, it is impossible to allocate sufficient resources ahead of time, and thus real-time guarantees are not feasible. <p> Several other, less-restrictive approaches have been used to embed AI methods within real-time systems. These approaches variously rely on real-time operating systems, constant-cycle-time circuits, or any-time algorithms to enforce guaranteed, predictable execution. CROPS5 CROPS5 is a C-based parallel implementation of the OPS5 production system <ref> [60] </ref>. The production system is encapsulated within an "AI server" program that runs under a real-time operating system, allowing the production system to run only when other, guaranteed real-time control tasks are not using the processor. The AI server thus isolates the potentially high-variance CROPS5 problem-solving from the real-time tasks.
Reference: [61] <author> J. L. Peterson, </author> <title> Petri Net Theory and the Modeling of Systems, </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, </address> <year> 1981. </year>
Reference-contexts: to recognize that the extend-arm action leads to states that cannot be handled, and thus that changes to that portion of the plan will be useful. 4.8 Relationship to Petri-Net Models It is useful to compare this type of state-based model with models based on Petri Nets and their variations <ref> [61] </ref>. In Petri Net models, "places" represent the status of world features, and transitions connect places, representing the way features can change.
Reference: [62] <author> J. R. Quinlan, </author> <title> "Induction of Decision Trees," </title> <journal> Machine Learning, </journal> <volume> vol. 1, </volume> <pages> pp. 81-106, </pages> <year> 1986. </year>
Reference-contexts: The general test minimization problem is NP-complete, so we have avoided using a complete algorithm. Instead, the minimization phase is implemented using the heuristic ID3 program 3 <ref> [62] </ref>, which is given the states for which an action has been planned as positive examples and all the other planned (possible) states as negative examples. ID3 incrementally builds a decision tree to distinguish the positive examples from the negative examples.
Reference: [63] <author> S. J. Rosenschein, </author> <title> "Synthesizing Information-Tracking Automata from Environment Descriptions," </title> <type> Technical Report 2, </type> <institution> Teleos Research, </institution> <month> July </month> <year> 1989. </year> <month> 170 </month>
Reference-contexts: We might consider them to be convenient, powerful formulations of traditional control systems, rather than intelligent real-time control systems. Rex/Gapps Research into the formal relationship between a system's internal model of the world and the real world has been fruitfully implemented in the Rex/Gapps system <ref> [63, 64] </ref>. Rex is a language used to describe digital machines that can be viewed as reactive systems. Rex programs are compiled into automata descriptions (usually implemented on a general purpose computer) that perform a constant-time mapping between inputs (sensors) and outputs (actuators). <p> mean that the precise, complete world state must be determined for action (because some subset of world features may be sufficient to determine the appropriate action| see Section 5.3.2), nor does it mean that the control system must be able to perfectly track the progression of states in the environment <ref> [63] </ref>. In fact the system never needs to know the world's state if it does not need to take any action; thus, the world can traverse many transitions but cause no change in the control system.
Reference: [64] <author> S. J. Rosenschein and L. P. Kaelbling, </author> <title> "The Synthesis of Digital Machines with Provable Epistemic Properties," </title> <booktitle> in Proc. Conf. Theoretical Aspects of Reasoning About Knowledge, </booktitle> <pages> pp. 83-98, </pages> <year> 1986. </year>
Reference-contexts: We might consider them to be convenient, powerful formulations of traditional control systems, rather than intelligent real-time control systems. Rex/Gapps Research into the formal relationship between a system's internal model of the world and the real world has been fruitfully implemented in the Rex/Gapps system <ref> [63, 64] </ref>. Rex is a language used to describe digital machines that can be viewed as reactive systems. Rex programs are compiled into automata descriptions (usually implemented on a general purpose computer) that perform a constant-time mapping between inputs (sensors) and outputs (actuators).
Reference: [65] <author> S. J. Russell and S. Zilberstein, </author> <title> "Composing Real-Time Systems," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 212-217, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: These tactical methods are exemplified by any-time algorithms <ref> [9, 41, 65] </ref>, which can be halted at any time to yield a result, possibly with reduced precision, confidence, or completeness. Any-time algorithms provide an on-line, dynamic method for guaranteeing the timeliness of a result, but the quality of the result may be sacrificed. <p> If the AIS has more time available, it can continue producing plans for as much time as is convenient, and then use the best plan stored so far. In this way, the AIS can itself implement an any-time planning algorithm <ref> [9, 65] </ref>. This feature is useful because, although achieving control-level goals is never dependent on timely responses from the AIS, achieving non-critical, task-level goals may be.
Reference: [66] <author> M. J. Schoppers, </author> <title> "Universal Plans for Reactive Robots in Unpredictable Environments," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1039-1046, </pages> <year> 1987. </year>
Reference-contexts: Universal Plans Schoppers' research on the automatic generation of Universal Plans (UPs) <ref> [66, 67] </ref> resembles our work, with the notable exception that CIRCA relies on a restricted world model and emphasizes timeliness issues. UPs are generated without considering precisely which world states are possible and which are not; UPs specify reactions for all states of the world, possible or not. <p> The system could begin by trying to guarantee the entire set of goals over the entire state space. If such a plan is possible, resources are not a problem. More likely, the "universal" plan <ref> [66] </ref> will not be feasible, and the system will have to decide how to decompose the overall space, defining a useful set of intermediate goals that a TAP plan can achieve, and then pass control on to the next TAP plan. <p> The notion of composite TAPs also points the way towards merging the automatically-generated, scheduled, guaranteed-response-time concepts of TAPs with the form of Universal Plans <ref> [66] </ref>. Composite TAPs are not particularly efficient because, although they combine multiple TAPs, they leave the test sections of those TAPs discrete and independent.
Reference: [67] <author> M. Schoppers, </author> <title> "Automatic Synthesis of Perception Driven Discrete Event Control Laws," </title> <booktitle> in Proc. 5th IEEE Int'l Symposium on Intelligent Control, </booktitle> <pages> pp. 410-416, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: Universal Plans Schoppers' research on the automatic generation of Universal Plans (UPs) <ref> [66, 67] </ref> resembles our work, with the notable exception that CIRCA relies on a restricted world model and emphasizes timeliness issues. UPs are generated without considering precisely which world states are possible and which are not; UPs specify reactions for all states of the world, possible or not.
Reference: [68] <author> M. Schoppers, </author> <title> "Introduction to Special Edition on Real-Time Knowledge-Based Control Systems," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 27-30, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: This means 8 9 that allocating resources to guarantee the worst-case response time of a planner will be very costly, and will lead to very low utilization of a system's resources <ref> [60, 68] </ref>. Furthermore, AI systems with powerful knowledge representations [7, 14] or learning abilities [13] may have unbounded worst-case response times. In these cases, it is impossible to allocate sufficient resources ahead of time, and thus real-time guarantees are not feasible.
Reference: [69] <author> M. Schoppers, </author> <title> "Representing the Plan Monitoring Needs and Resources of Robotic Systems," </title> <booktitle> in Proc. Annual Conf. on AI, Simulation, and Planning in High Autonomy Systems, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: The possibility of a world state, of course, is dependent on the world model assumptions. We have described how CIRCA's control plans are intended to maintain the system's safety while also making progress towards its task-level goals. Schoppers <ref> [69] </ref> has recently discussed how UPs can similarly keep a system safe through stable "closed-loop dynamics." This concept of stable closed-loop control requires that, given sensed data within some bounds (input), the controlled system will produce world behaviors (output) within some bounds. <p> The goal of a control plan is to ensure that the world remains in a safely-controlled set of states, so that failure can never occur. This is analogous to a stable closed-loop control policy <ref> [69] </ref> which is known to restrict the operation of a controlled system to a desirable range of states.
Reference: [70] <author> R. Simmons, </author> <title> "An Architecture for Coordinating Planning, Sensing, and Action," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 292-297, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: CIRCA can provide similar fault-tolerant functionality, as will be discussed in Section 6.3.5. AuRA does not address the timeliness or resource restrictions that are the focus of our architecture. TCA Simmons' Task Control Architecture (TCA) also combines reactive and planning systems <ref> [70, 72] </ref>. The architecture itself provides for a central control module, a set of distributed task-specific processing modules, message-passing between modules, and a task representation ("task trees") that coordinates planning and execution.
Reference: [71] <author> R. Simmons, </author> <title> "Robust Behavior with Limited Resources," </title> <booktitle> in Proc. AAAI Spring Symp. on Planning in Uncertain, Unpredictable, or Changing Environments, </booktitle> <year> 1990. </year>
Reference-contexts: This corresponds directly to CIRCA's reasoning about TAP parameters. However, although sensing monitors are under the control of a central AI system, the reactive elements of TCA which attempt to keep the system safe are outside the system's control <ref> [71] </ref>. In contrast, CIRCA reasons explicitly about its ability to remain safe by activating selected sets of reactions, and thus CIRCA can take into account its own bounded reactivity in building plans and choosing courses of action.
Reference: [72] <author> R. Simmons, </author> <title> "Coordinating Planning, Perception, and Action for Mobile Robots," </title> <booktitle> in AAAI Spring Symposium, </booktitle> <year> 1991. </year>
Reference-contexts: CIRCA can provide similar fault-tolerant functionality, as will be discussed in Section 6.3.5. AuRA does not address the timeliness or resource restrictions that are the focus of our architecture. TCA Simmons' Task Control Architecture (TCA) also combines reactive and planning systems <ref> [70, 72] </ref>. The architecture itself provides for a central control module, a set of distributed task-specific processing modules, message-passing between modules, and a task representation ("task trees") that coordinates planning and execution.
Reference: [73] <author> H. A. Simon, </author> <title> Models of Bounded Rationality, </title> <editor> M. I. T. </editor> <publisher> Press, </publisher> <year> 1982. </year> <title> [74] pASSPORT + : A pSOS + -based Environment for Real-Time Software Development, Software Components Group, </title> <publisher> Inc., </publisher> <year> 1990. </year>
Reference-contexts: Within this type of environment, CIRCA is designed to make guarantees about its performance based on the fundamental restriction that the system has limited sensing, processing, and actuating resources. A direct consequence of this bounded rationality <ref> [73] </ref> and bounded reactivity [56] is that the system usually cannot simultaneously guarantee all the required reactions to input stimuli that may ever be required to achieve its goals. CIRCA's solution to this limitation has two elements.
Reference: [75] <author> M. H. Soldo, </author> <title> "Reactive and Preplanned Control in a Mobile Robot," </title> <booktitle> in Proc. IEEE Int'l Conf. on Robotics and Automation, </booktitle> <pages> pp. 1128-1132, </pages> <year> 1990. </year>
Reference-contexts: CIRCA's Scheduler module addresses this problem by scheduling TAPs for the single-processor RTS. Other systems <ref> [8, 75] </ref> have made provisions to activate only subsets of reactive behaviors implemented on a single processor. However, these systems do not reason about the resources required for each set of behaviors, and do not use advanced AI techniques to control the set of activated behaviors 3 .
Reference: [76] <author> J. A. Stankovic, </author> <title> "Misconceptions about Real-Time Computing: A Serious Problem for Next-Generation Systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 10, </volume> <pages> pp. 10-19, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Real-time computing is not about building "fast" systems; it is about building systems that 1 2 are predictably "fast enough" to act on their environments in ways that achieve their goals <ref> [36, 76] </ref>. This understanding of what it means to be "real-time" is dramatically different from the casual, non-technical use of the term which has become common in many fields. <p> The uncertainty inherent in the real world makes no difference for this argument. To paraphrase Stankovic <ref> [76] </ref>, the fact that the system may not function correctly or that the world may differ from our environment model with a nonzero probability does not give us license to 25 increase the odds of failure by not trying to guarantee performance. <p> Complexity We noted in Chapter 1 that the complexity of some environments may make it impractical to enumerate all possible situations. This is one of the arguments frequently used against ad hoc real-time systems that are simply tested exhaustively to demonstrate that they meet hard deadlines <ref> [76] </ref>. How, then, does CIRCA's enumerative world modeling technique differ? The most important difference is that the AIS does not enumerate the entire domain state space. As discussed earlier, the AIS' high-level planning explicitly divides long-term goals into shorter-term subgoals, which are then separately implemented by control plans.
Reference: [77] <author> S. Vere, </author> <title> "Temporal Scope of Assertions and Window Cutoff," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1055-1059, </pages> <year> 1985. </year>
Reference-contexts: As we have seen, the worst-case criterion also removes the need for any detailed representation of time. Complex temporal logics have been developed for reasoning about the relationships between asynchronous external events, simultaneous actions, and the regular passage of "wall clock" time <ref> [3, 10, 27, 48, 77] </ref>. So far the only timing information we have shown for our world model is the simple worst-case values needed to recognize preempted 52 eous events. transitions.
Reference: [78] <author> E. Walden and C. V. Ravishankar, </author> <title> "Algorithms for Real-Time Scheduling Problems," </title> <type> Technical Report CSE-TR-92-91, </type> <institution> University of Michigan, Computer Science and Engineering, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: In the Puma domain, this has little or no effect, since the scheduling process is much less time-consuming than the TAP planning. The Scheduler uses a modified deadline-driven scheduling algorithm <ref> [42, 78] </ref> to build a TAP schedule. This algorithm specifies that, each time the system can choose which TAP to run, it should run the available TAP with the earliest deadline.
References-found: 77

