URL: http://www.cs.ucl.ac.uk/research/mobile/archives/DCNDS/Distributed/icodp97.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/research/mobile/archives/DCNDS/Distributed/
Root-URL: http://www.cs.ucl.ac.uk
Email: Email: most@comp.lancs.ac.uk  
Phone: Telephone: +44 (0)1524 594337  
Title: Limbo: A tuple space based platform for adaptive mobile applications  
Author: N. Davies, S.P. Wade, A. Friday and G.S. Blair 
Keyword: Mobile Computing, Distributed Systems, Adaptive Applications, Tuple Spaces, Linda.  
Address: Lancaster, LA1 4YR, U.K.  
Affiliation: Distributed Multimedia Research Group, Computing Department, Lancaster University,  
Abstract: Mobile computing environments are characterised by significant and rapid changes in their supporting infrastructure and, in particular, in the quality-of-service (QoS) available from their underlying communications channels. Applications which can operate in these environments and take advantage of changing QoS require distributed systems support platforms. The current state-of-the-art in such platforms attempt to provide synchronous connection-oriented programming paradigms reflecting their fixed network origin. In this paper we argue that these paradigms are not well suited to operation in a mobile environment and instead propose a new platform called Limbo based on the tuple space communications paradigm. The design of Limbo is presented together with details of two prototype implementations. The use of the platform to reengineer a number of existing adaptive mobile applications is also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [APM,89] <editor> APM Limited (1989) ANSA: </editor> <title> An Engineers Introduction to the Architecture. Technical Document release TR.03.02, </title> <publisher> APM Cambridge Limited, Poseidon House, </publisher> <address> Castle Park, Cambridge, CB3 0RD, U.K. </address>
Reference-contexts: The platform augments an existing ODP compatible platform called ANSAware <ref> [APM,89] </ref> with new services, protocols and API calls. In particular, the platform incorporates a new protocol called QEX [Friday,96] which is able to adapt to changes in the QoS of its underlying communications infrastructure and pass this information on to interested client applications.
Reference: [Bjornson,91] <author> Bjornson, R., Carriero, N., Gelernter, D., Mattson, T., Kaminsky, D. and Sherman, A. </author> <title> (1991) Experience with Linda. </title> <type> Technical Report YALEU/DCS/TR-866, </type> <institution> Department of Computer Science, Yale University, New Haven, Connecticut, U.S. </institution>
Reference-contexts: In this paper we propose a system architecture based on the tuple space paradigm which fulfils these requirements. In particular, the tuple space paradigm supports inter-process communication across time as well as space <ref> [Bjornson,91] </ref> thus offering implicit support for periods of disconnection. We demonstrate the advantages of our approach by considering the reengineering of a number of existing adaptive mobile applications. 3 THE TUPLE SPACE PARADIGM The tuple space paradigm has been extensively researched by the parallel programming community for over a decade. <p> Several schemes have been proposed to achieve this, including an approach based on Amoeba-like ports [Pinakis,92]. Because tuple spaces contain persistent tuple objects, as opposed to messages, inter-process communication is supported across time and space <ref> [Bjornson,91] </ref>. The tuple space paradigm was conceived by researchers at Yale University [Gelernter,85a] and was embodied in a coordination language called Linda. Linda is not a standalone computational language, instead Linda operators are embedded in host computational languages (e.g. C or Pascal).
Reference: [Carriero,94] <author> Carriero, N., Gelernter, D. and Zuck, L. </author> <title> (1994) Bauhaus Linda. Selected Papers from the Workshop on Models and Languages for Coordination of Parallelism and Distribution (ECOOP '94), </title> <booktitle> Bologna, Italy, </booktitle> <pages> 66-76. </pages>
Reference-contexts: For example, many implementations support two new operators, inp and rdp [Leichter,89] which are non-blocking versions of in and rd and evaluate to boolean values indicating their success. More significant extensions include distributed tuple spaces [Pinakis,91], [Pinakis,93a], [Pinakis,93b], multiple tuple spaces <ref> [Carriero,94] </ref>, [Hupfer,90], rules governing the use of tuple space for communications in open systems [Minsky,94] and removal of the distinction between tuples and tuple spaces [Carriero,94]. 4 A TUPLE SPACE PLATFORM FOR MOBILE APPLICATIONS 4 . 1 Platform Overview We have designed a new platform, Limbo, aimed at providing better support <p> More significant extensions include distributed tuple spaces [Pinakis,91], [Pinakis,93a], [Pinakis,93b], multiple tuple spaces <ref> [Carriero,94] </ref>, [Hupfer,90], rules governing the use of tuple space for communications in open systems [Minsky,94] and removal of the distinction between tuples and tuple spaces [Carriero,94]. 4 A TUPLE SPACE PLATFORM FOR MOBILE APPLICATIONS 4 . 1 Platform Overview We have designed a new platform, Limbo, aimed at providing better support for adaptive mobile applications. This platform is based on the Linda model which has been described in section 3.
Reference: [Coulouris,94] <author> Coulouris, G.F., Dollimore J. and Kindberg, T. </author> <title> (1994) Distributed Systems: Concepts and Design (Second Edition). </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Tuple spaces are shared between collections of processes, all of which have access to the tuples contained within. In classic distributed environments processes communicate across virtual channels described by bindings and formed from pairs of endpoints, c.f. Chorus ports and UNIX BSD 4.3 sockets <ref> [Coulouris,94] </ref>. The tuple space paradigm is fundamentally different because processes communicate exclusively through tuple space; this has been termed generative communication [Gelernter,85a]. As processes no longer interact directly with one another, the implicit need for bindings is removed and inter-process communication can actually progress anonymously.
Reference: [Davies,94a] <author> Davies, N., Pink, S. and Blair, G.S. </author> <title> (1994) Services to Support Distributed Applications in a Mobile Environment. </title> <booktitle> Proceedings of the 1st International Workshop on Services in Distributed and Networked Environments (SDNE'94), </booktitle> <address> Prague, Czech Republic, </address> <pages> 84-89. </pages>
Reference-contexts: Previous research has demonstrated that in order to operate effectively in mobile environments applications are required to adapt in response to these changes <ref> [Davies,94a] </ref>, [Katz,94]. Such applications are termed adaptive applications. Adaptive applications require distributed systems support, and a number of platforms have recently been developed which address this requirement. Example platforms include Mobile DCE [Schill,95], the MOST platform [Davies,94b] and the Rover Toolkit [Joseph,95].
Reference: [Davies,94b] <author> Davies, N., Blair, G.S., Cheverst, K. and Friday, A. </author> <title> (1994) Supporting Adaptive Services in a Heterogeneous Mobile Environment. </title> <booktitle> Proceedings of the 1st Workshop on Mobile Computing Systems and Applications (MCSA'94), </booktitle> <address> Santa Cruz, California, </address> <publisher> U.S., </publisher> <pages> 153-157. </pages>
Reference-contexts: Such applications are termed adaptive applications. Adaptive applications require distributed systems support, and a number of platforms have recently been developed which address this requirement. Example platforms include Mobile DCE [Schill,95], the MOST platform <ref> [Davies,94b] </ref> and the Rover Toolkit [Joseph,95]. These mobile platforms attempt to provide application programmers with traditional computational models and communications' semantics consistent with those normally found in platforms designed for fixed networks.
Reference: [Davies,95] <author> Davies, N., Blair, G.S., Cheverst, K. and Friday, A. </author> <title> (1995) Experiences of Using RM-ODP to Build Advanced Mobile Applications. </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 2(3), </volume> <pages> 142-151. </pages>
Reference-contexts: The design and implementation of our decentralised prototype is described in more detail in a companion paper [Friday,97]. 5 CASE STUDY Early mobile computing research at Lancaster was aimed to develop open systems technologies to support field workers within the utilities industries <ref> [Davies,95] </ref>. In addition to the platform described in section 2.2, a collaborative toolkit application was developed that provides support for a number of day-to-day tasks carried out by field engineers.
Reference: [Floyd,95] <author> Floyd, S., Jacobson, V., McCanne, S., Lui, C. and Zhang, L. </author> <title> (1995) A Reliable Multicast Framework for LightWeight Sessions and Application Level Framing. </title> <booktitle> Proceedings of ACM SIGCOMM '95, </booktitle> <address> Cambridge, Massachusetts, </address> <publisher> U.S., </publisher> <pages> 342-356. </pages>
Reference-contexts: Changes of ownership are supported as is the concept of 'nominated owners' enabling optimisation of RPC-like communications [Friday,97]. Our implementation is based on IP multicast and borrows application level framing concepts from SRM the scalable multicast transport which underpins wb <ref> [Floyd,95] </ref> and Jetfile [Grnvall,96] with each distributed tuple space modelled as a multicast group.
Reference: [Friday,96] <author> Friday, A.J., Blair, G.S., Cheverst, K.W.J. and Davies, N. </author> <title> (1996) Extensions to ANSAware for Advanced Mobile Applications. </title> <booktitle> Proceedings of the 1st International Conference on Distributed Platforms (ICDP'96), </booktitle> <address> Dresden, Germany. </address>
Reference-contexts: The platform augments an existing ODP compatible platform called ANSAware [APM,89] with new services, protocols and API calls. In particular, the platform incorporates a new protocol called QEX <ref> [Friday,96] </ref> which is able to adapt to changes in the QoS of its underlying communications infrastructure and pass this information on to interested client applications. The QEX protocol is layered above a low-level service called S-UDP which provides dial-up UDP connections over GSM.
Reference: [Friday,97] <author> Friday, A., Wade, S.P., Davies, N. and Blair, G.S. </author> <title> (1997) Using Tuple Spaces for Adaptive Mobile Computing. </title> <type> Technical Report MPG-97-03, </type> <institution> Computing Department, Lancaster University, Bailrigg, Lancaster, LA1 4YR, U.K. </institution>
Reference-contexts: In order to ensure consistency we allocate owners to tuples and tuples may only be withdrawn from the tuple space by the owner. Changes of ownership are supported as is the concept of 'nominated owners' enabling optimisation of RPC-like communications <ref> [Friday,97] </ref>. Our implementation is based on IP multicast and borrows application level framing concepts from SRM the scalable multicast transport which underpins wb [Floyd,95] and Jetfile [Grnvall,96] with each distributed tuple space modelled as a multicast group. <p> The design and implementation of our decentralised prototype is described in more detail in a companion paper <ref> [Friday,97] </ref>. 5 CASE STUDY Early mobile computing research at Lancaster was aimed to develop open systems technologies to support field workers within the utilities industries [Davies,95].
Reference: [Gelernter,85a] <author> Gelernter, D. </author> <title> (1985) Generative Communication in Linda. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1), </volume> <pages> 80-112. </pages>
Reference-contexts: In this paper we argue that the procedure call paradigm is not well suited for use in mobile environments and suggest an alternative paradigm based on tuples and tuple spaces <ref> [Gelernter,85a] </ref>. This paradigm has been widely used in the parallel computing community but there has, to our knowledge, been no work on applying the paradigm in mobile environments. We describe the design, API and use of a tuple space based platform for mobile computing called Limbo. <p> In classic distributed environments processes communicate across virtual channels described by bindings and formed from pairs of endpoints, c.f. Chorus ports and UNIX BSD 4.3 sockets [Coulouris,94]. The tuple space paradigm is fundamentally different because processes communicate exclusively through tuple space; this has been termed generative communication <ref> [Gelernter,85a] </ref>. As processes no longer interact directly with one another, the implicit need for bindings is removed and inter-process communication can actually progress anonymously. It is, however, also possible to achieve directed communications whereby tuples are produced for an identified consumer process by encapsulating destination information in the tuples themselves. <p> Several schemes have been proposed to achieve this, including an approach based on Amoeba-like ports [Pinakis,92]. Because tuple spaces contain persistent tuple objects, as opposed to messages, inter-process communication is supported across time and space [Bjornson,91]. The tuple space paradigm was conceived by researchers at Yale University <ref> [Gelernter,85a] </ref> and was embodied in a coordination language called Linda. Linda is not a standalone computational language, instead Linda operators are embedded in host computational languages (e.g. C or Pascal).
Reference: [Gelernter,85b] <author> Gelernter, D., Carriero, N., Chandran, S. and Chang, S. </author> <title> (1985) Parallel Programming in Linda. </title> <booktitle> Proceedings of the International Conference on Parallel Processing, </booktitle> <pages> 255-263. </pages>
Reference-contexts: Tuples can be dynamically deposited in and removed from a tuple space, though they can not be altered while resident in it. Changes can, however, be made to a tuple by withdrawing it from the tuple space, amending and then reinserting it <ref> [Gelernter,85b] </ref>. Tuple spaces are shared between collections of processes, all of which have access to the tuples contained within. In classic distributed environments processes communicate across virtual channels described by bindings and formed from pairs of endpoints, c.f. Chorus ports and UNIX BSD 4.3 sockets [Coulouris,94].
Reference: [Grnvall,96] <author> Grnvall, B., Marsh I. and Pink, S. </author> <title> (1996) A Multicast-Based Distributed File System for the Internet, </title> <booktitle> Proceedings of the 7th ACM SIGOPS European Workshop, </booktitle> <address> Connemara, Ireland. </address>
Reference-contexts: Changes of ownership are supported as is the concept of 'nominated owners' enabling optimisation of RPC-like communications [Friday,97]. Our implementation is based on IP multicast and borrows application level framing concepts from SRM the scalable multicast transport which underpins wb [Floyd,95] and Jetfile <ref> [Grnvall,96] </ref> with each distributed tuple space modelled as a multicast group.
Reference: [Hupfer,90] <author> Hupfer, S. </author> <year> (1990) </year> <month> Melinda: </month> <title> Linda with Multiple Tuple Spaces. </title> <type> Technical Report YALEU/DCS/RR-766, </type> <institution> Department of Computer Science, Yale University, New Haven, Connecticut, U.S. </institution>
Reference-contexts: For example, many implementations support two new operators, inp and rdp [Leichter,89] which are non-blocking versions of in and rd and evaluate to boolean values indicating their success. More significant extensions include distributed tuple spaces [Pinakis,91], [Pinakis,93a], [Pinakis,93b], multiple tuple spaces [Carriero,94], <ref> [Hupfer,90] </ref>, rules governing the use of tuple space for communications in open systems [Minsky,94] and removal of the distinction between tuples and tuple spaces [Carriero,94]. 4 A TUPLE SPACE PLATFORM FOR MOBILE APPLICATIONS 4 . 1 Platform Overview We have designed a new platform, Limbo, aimed at providing better support for <p> We propose to provide a class of system agent which can create new tuple spaces for applications. These tuple spaces will be configurable to meet application specific requirements <ref> [Hupfer,90] </ref>. For example, in addition to general purpose tuple spaces we propose to allow the creation of tuple spaces with support for security (user authentication), persistence and tuple logging (for accountability in safety critical systems). A number of further specialisations are possible which aim to increase application performance.
Reference: [ISO,92] <author> ISO (1992) Draft Recommendation X.901: </author> <title> Basic Reference Model of Open Distributed Processing Part 1: Overview and Guide to Use. </title> <type> Draft Report. </type>
Reference-contexts: The use of the industry standard DCE/Microsoft RPC protocols allow the platform to be integrated with existing applications. 2 . 2 The MOST Platform Lancaster University's MOST platform provides support for adaptive mobile applications within an Open Distributed Processing (ODP) <ref> [ISO,92] </ref> based framework. The platform augments an existing ODP compatible platform called ANSAware [APM,89] with new services, protocols and API calls. <p> The conversion between types and subtypes (simply a matter of omitting fields when returning the matching tuple) can be handled by the tuple space. The benefits of sub-typing in a distributed environment have been comprehensively investigated within the ODP community as part of their work on interface trading <ref> [ISO,92] </ref>. In this model sub-typing enables added flexibility when matching service offers to client requests. We hope to accrue similar benefits by supporting sub-typing in Limbo. QoS Attributes Existing mobile distributed systems platforms such as MOST allow QoS attributes to be associated with both bindings and messages.
Reference: [Joseph,95] <author> Joseph, A.D., deLespinasse, A.F., Tauber, J.A., Gifford, D.K. and Kaashoek, M.F. </author> <title> (1995) Rover: A Toolkit for Mobile Information Access. </title> <booktitle> Proceedings of the 15th Symposium on Operating Systems Principles (SOSP'95), </booktitle> <address> Copper Mountain Resort, Colorado, </address> <publisher> U.S., </publisher> <pages> 156-171. </pages>
Reference-contexts: Such applications are termed adaptive applications. Adaptive applications require distributed systems support, and a number of platforms have recently been developed which address this requirement. Example platforms include Mobile DCE [Schill,95], the MOST platform [Davies,94b] and the Rover Toolkit <ref> [Joseph,95] </ref>. These mobile platforms attempt to provide application programmers with traditional computational models and communications' semantics consistent with those normally found in platforms designed for fixed networks.
Reference: [Katz,94] <author> Katz, </author> <title> R.H. (1994) Adaptation and Mobility in Wireless Information Systems. </title> <journal> IEEE Personal Communications, </journal> <volume> 1(1), </volume> <pages> 6-17. </pages>
Reference-contexts: Previous research has demonstrated that in order to operate effectively in mobile environments applications are required to adapt in response to these changes [Davies,94a], <ref> [Katz,94] </ref>. Such applications are termed adaptive applications. Adaptive applications require distributed systems support, and a number of platforms have recently been developed which address this requirement. Example platforms include Mobile DCE [Schill,95], the MOST platform [Davies,94b] and the Rover Toolkit [Joseph,95].
Reference: [Leichter,89] <author> Leichter, J.S. </author> <title> (1989) Shared Tuple Memories, Shared Memories, Buses and LAN's - Linda Implementations across the Spectrum of Connectivity. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, Yale University, New Haven, Connecticut, U.S. </institution>
Reference-contexts: In addition to the basic model and API described above more than a decade of research by the parallel programming community has led to a number of refinements and extensions to the paradigm. For example, many implementations support two new operators, inp and rdp <ref> [Leichter,89] </ref> which are non-blocking versions of in and rd and evaluate to boolean values indicating their success.
Reference: [Minsky,94] <author> Minsky, N.H. and Leichter, J. </author> <title> (1994) Law-Governed Linda as a Coordination Model. Selected Papers from the Workshop on Models and Languages for Coordination of Parallelism and Distribution, </title> <booktitle> Bologna, Italy, </booktitle> <pages> 125-146. </pages>
Reference-contexts: More significant extensions include distributed tuple spaces [Pinakis,91], [Pinakis,93a], [Pinakis,93b], multiple tuple spaces [Carriero,94], [Hupfer,90], rules governing the use of tuple space for communications in open systems <ref> [Minsky,94] </ref> and removal of the distinction between tuples and tuple spaces [Carriero,94]. 4 A TUPLE SPACE PLATFORM FOR MOBILE APPLICATIONS 4 . 1 Platform Overview We have designed a new platform, Limbo, aimed at providing better support for adaptive mobile applications.
Reference: [Pinakis,91] <author> Pinakis, J. </author> <title> (1991) The Design and Implementation of a Distributed Linda Tuple Space. </title> <booktitle> Proceedings of the 2nd Department of Computer Science Research Conference, </booktitle> <institution> Department of Computer Science, University of Western Australia, Nedlands, </institution> <address> WA 6009. </address>
Reference-contexts: For example, many implementations support two new operators, inp and rdp [Leichter,89] which are non-blocking versions of in and rd and evaluate to boolean values indicating their success. More significant extensions include distributed tuple spaces <ref> [Pinakis,91] </ref>, [Pinakis,93a], [Pinakis,93b], multiple tuple spaces [Carriero,94], [Hupfer,90], rules governing the use of tuple space for communications in open systems [Minsky,94] and removal of the distinction between tuples and tuple spaces [Carriero,94]. 4 A TUPLE SPACE PLATFORM FOR MOBILE APPLICATIONS 4 . 1 Platform Overview We have designed a new platform, <p> Similarly, tuple operations are not causally ordered and total ordering does not have to be maintained. In contrast to Distributed Linda <ref> [Pinakis,91] </ref> which centralises each tuple type at a specified server, our decentralised prototype is fully distributed. In order to ensure consistency we allocate owners to tuples and tuples may only be withdrawn from the tuple space by the owner.
Reference: [Pinakis,92] <author> Pinakis, J. </author> <title> (1992) Providing Directed Communication in Linda. </title> <booktitle> Proceedings of the 15th Australian Computer Science Conference, </booktitle> <address> Hobart, Tasmania. </address>
Reference-contexts: It is, however, also possible to achieve directed communications whereby tuples are produced for an identified consumer process by encapsulating destination information in the tuples themselves. Several schemes have been proposed to achieve this, including an approach based on Amoeba-like ports <ref> [Pinakis,92] </ref>. Because tuple spaces contain persistent tuple objects, as opposed to messages, inter-process communication is supported across time and space [Bjornson,91]. The tuple space paradigm was conceived by researchers at Yale University [Gelernter,85a] and was embodied in a coordination language called Linda.
Reference: [Pinakis,93a] <author> Pinakis, J. </author> <title> (1993) Remote Thread Execution, </title> <booktitle> Proceedings of the 16th Australian Computer Science Conference, </booktitle> <address> Brisbane, Queensland, Australia. </address>
Reference-contexts: For example, many implementations support two new operators, inp and rdp [Leichter,89] which are non-blocking versions of in and rd and evaluate to boolean values indicating their success. More significant extensions include distributed tuple spaces [Pinakis,91], <ref> [Pinakis,93a] </ref>, [Pinakis,93b], multiple tuple spaces [Carriero,94], [Hupfer,90], rules governing the use of tuple space for communications in open systems [Minsky,94] and removal of the distinction between tuples and tuple spaces [Carriero,94]. 4 A TUPLE SPACE PLATFORM FOR MOBILE APPLICATIONS 4 . 1 Platform Overview We have designed a new platform, Limbo,
Reference: [Pinakis,93b] <author> Pinakis, J. </author> <title> (1993) Using Linda as the Basis of an Operating System Microkernel. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Western Australia, Nedlands, </institution> <address> WA 6009, Australia. </address>
Reference-contexts: For example, many implementations support two new operators, inp and rdp [Leichter,89] which are non-blocking versions of in and rd and evaluate to boolean values indicating their success. More significant extensions include distributed tuple spaces [Pinakis,91], [Pinakis,93a], <ref> [Pinakis,93b] </ref>, multiple tuple spaces [Carriero,94], [Hupfer,90], rules governing the use of tuple space for communications in open systems [Minsky,94] and removal of the distinction between tuples and tuple spaces [Carriero,94]. 4 A TUPLE SPACE PLATFORM FOR MOBILE APPLICATIONS 4 . 1 Platform Overview We have designed a new platform, Limbo, aimed
Reference: [Schilit,94] <author> Schilit, B., Adams, N. and Want, R. </author> <booktitle> (1994) Context-Aware Computing Applications. Proceedings of the 1st Workshop on Mobile Computing Systems and Applications (MCSA'94), </booktitle> <address> Santa Cruz, California, </address> <publisher> U.S., </publisher> <pages> 85-90. </pages>
Reference-contexts: These changes must be propagated to clients using an alternative mechanism, e.g. operating system signals or environment variables as in <ref> [Schilit,94] </ref>. We believe that adaptive applications are best written using an asynchronous, primarily connectionless, programming paradigm with generalised support for QoS control and monitoring. In this paper we propose a system architecture based on the tuple space paradigm which fulfils these requirements.
Reference: [Schill,95] <author> Schill, A. and Kmmel, S. </author> <title> (1995) Design and Implementation of a Support Platform for Distributed Mobile Computing. </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 2(3), </volume> <pages> 128-141. </pages>
Reference-contexts: Such applications are termed adaptive applications. Adaptive applications require distributed systems support, and a number of platforms have recently been developed which address this requirement. Example platforms include Mobile DCE <ref> [Schill,95] </ref>, the MOST platform [Davies,94b] and the Rover Toolkit [Joseph,95]. These mobile platforms attempt to provide application programmers with traditional computational models and communications' semantics consistent with those normally found in platforms designed for fixed networks.

References-found: 25

