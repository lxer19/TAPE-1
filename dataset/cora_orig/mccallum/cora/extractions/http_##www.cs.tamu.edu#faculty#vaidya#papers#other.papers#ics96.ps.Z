URL: http://www.cs.tamu.edu/faculty/vaidya/papers/other.papers/ics96.ps.Z
Refering-URL: http://www.cs.tamu.edu/faculty/vaidya/Vaidya-other.html
Root-URL: http://www.cs.tamu.edu
Email: Email: fjhkim,vaidyag@cs.tamu.edu  
Title: A Cost-Comparison Approach for Adaptive Distributed Shared Memory  
Author: Jai-Hoon Kim Nitin H. Vaidya 
Web: Web: http://www.cs.tamu.edu/faculty/vaidya/  
Address: College Station, TX 77843-3112, U.S.A.  
Affiliation: Department of Computer Science Texas A&M University  
Abstract: The focus of this paper is on software implementations of Distributed Shared Memory (DSM). In recent years, many protocols for implementing DSM have been proposed. Performance of these protocols depends on the memory access behavior of the applications. Some researchers have proposed DSMs that provide a family of consistency protocols or applicationspecific protocols, and the programmer is allowed to choose any one of them for each shared memory object (or page) or each stage of an application. While such implementations have a potential for achieving optimal performance, they impose undue burden on the programmer. Therefore, some adaptive schemes that automatically choose the appropriate protocol have been proposed. This paper presents a simple approach for implementing adaptive DSMs. The approach is illustrated with the example of an adaptive DSM basedon the invalidate and competitive update protocols. The objective of the adaptive scheme is to minimize a predefinedcost function. The costfunctions considered here are number of messages and amount of data transfer. The proposedschemeallows eachnode to independentlychoose (at runtime) a different protocol for each page. The paper presents experimental evaluationof the adaptive DSM. Results showthatthe performance is improved by dynamically selecting the appropriate protocol. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Karlin et al., </author> <title> Competitive snoopy caching, </title> <booktitle> in Proc. of the 27'th Annual Symp. on Found.of Computer Science, </booktitle> <pages> pp. 244-254, </pages> <year> 1986. </year>
Reference-contexts: This prediction should be accurate, provided that the memory access patterns change relatively infrequently. To demonstrate our approach, we present an adaptive scheme that chooses between the invalidate protocol and the competitive update protocol <ref> [1, 9, 10, 13] </ref>. The competitive update protocol is defined by a threshold parameter; we will rename the threshold as the limit. Experimental results show that our adaptive scheme performs well because memory access patterns do not change frequently in many applications. This paper is organized as follows. <p> If there are three writes by a single processor without intervening references by any other processor, all other cached copies are invalidated in [2]. Competitive update scheme <ref> [1, 9, 10, 13] </ref> invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme.
Reference: [2] <author> J. Archibald, </author> <title> A cache coherence approach for large multiprocessor systems, </title> <booktitle> in International Conference on Supercomputing, </booktitle> <pages> pp. 337-345, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: The basic difference between our approach and [25] is that our scheme does not need to know whether a particular synchronization controls access to a given shared memory page or not. <ref> [2] </ref> dynamically chooses to update or invalidate copies of a shared data object. If there are three writes by a single processor without intervening references by any other processor, all other cached copies are invalidated in [2]. <p> whether a particular synchronization controls access to a given shared memory page or not. <ref> [2] </ref> dynamically chooses to update or invalidate copies of a shared data object. If there are three writes by a single processor without intervening references by any other processor, all other cached copies are invalidated in [2]. Competitive update scheme [1, 9, 10, 13] invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme.
Reference: [3] <editor> B. Falsafi et al., </editor> <booktitle> Applicationspecific protocolsfor user-level shared memory, in International Conference on Supercomputing, </booktitle> <pages> pp. 380-389, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Quarks [15] uses a variation of the competitive update scheme. Protocols presented in [8, 9, 20, 28] dynamically identify migratory shared data and switch to migratory protocol in order to reduce the overhead. Tempest <ref> [3, 26] </ref> allows programmers and compilers to use user-level mechanism to implement shared memory policies that are appropriate to a particular program or data structure. Multiple consistency protocol was proposed in [7] where several categories of shared dataobjects are identified: conventional, read-only, migratory, write-shared, and synchronization.
Reference: [4] <author> J. Bennett, J. Carter, and W. Zwaenepoel, </author> <title> Adaptive software cache management for distributed shared memory architectures, </title> <booktitle> in Proceedings of the 17th Annual International Symposiumon Computer Architecture, </booktitle> <pages> pp. 125-134, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Let U be the number of such updates to the local copy of page P during a segment. An acknowledgement is sent for each update message received. 2 Segment is a sequence of remote updates between two consecutive local accesses. Write-run [12] and no-synch run <ref> [4] </ref> models are introduced by others. A write-run is a sequence of local writes between two consecutive remote accesses [12]. A no-synch run is a sequence of accesses to a single object by any thread between two synchronization points in a particular thread [4]. <p> Write-run [12] and no-synch run <ref> [4] </ref> models are introduced by others. A write-run is a sequence of local writes between two consecutive remote accesses [12]. A no-synch run is a sequence of accesses to a single object by any thread between two synchronization points in a particular thread [4]. Therefore, the numberof messagesneededin one segment, denoted by M update , is 2 U .
Reference: [5] <author> R. Bianchini and T. LeBlanc, </author> <booktitle> Software caching on cache-coherent multiprocessors,in Proceedings of InternationalConference on Parallel and Distributed Processing, </booktitle> <pages> pp. 521-526, </pages> <year> 1992. </year>
Reference-contexts: Multiple consistency protocol was proposed in [7] where several categories of shared dataobjects are identified: conventional, read-only, migratory, write-shared, and synchronization. But, with their approach, the programmer needs to know the memory access behaviors on each shared variable to specify a protocol used for the variable. <ref> [5, 11, 18] </ref> also presentother schemesto reduce coherency overhead. IRG (Inter-Reference Gap) model for the time interval betweensuccessive references to the same addresswas presentedin [24].
Reference: [6] <author> J. Carter, D. Khandekar, and L. Kamb, </author> <title> Distributed shared memory: Where we are and where we should be headed, </title> <booktitle> in Proc. of the Fifth Workshop on HotTopics in Operating Syst., </booktitle> <pages> pp. 119-122, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. Many approacheshave been proposed to implementdistributed shared memory <ref> [6, 7, 14, 15, 19, 26, 29] </ref>. The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency [7]. <p> We implemented the adaptive protocol by modifying another DSM, named Quarks (Beta release 0.8) <ref> [6, 15] </ref>. This section presents the experimental results.
Reference: [7] <author> J. B. Carter, </author> <title> Effi cient Distributed Shared Memory Based On Multi-Protocol Release Consistency. </title> <type> PhD thesis, </type> <institution> Rice Univ., </institution> <year> 1993. </year>
Reference-contexts: Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. Many approacheshave been proposed to implementdistributed shared memory <ref> [6, 7, 14, 15, 19, 26, 29] </ref>. The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency [7]. <p> The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency <ref> [7] </ref>. As no single protocol is optimal for all applications, researchers have proposed DSM implementations that provide a choice of multiple consistency protocols (e.g. [7]). The programmer may specify the appropriate protocol to be used for each shared memory object (or page). <p> implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency <ref> [7] </ref>. As no single protocol is optimal for all applications, researchers have proposed DSM implementations that provide a choice of multiple consistency protocols (e.g. [7]). The programmer may specify the appropriate protocol to be used for each shared memory object (or page). While this approach has the potential for achieving good performance, it imposes undue burden on the programmer. <p> Tempest [3, 26] allows programmers and compilers to use user-level mechanism to implement shared memory policies that are appropriate to a particular program or data structure. Multiple consistency protocol was proposed in <ref> [7] </ref> where several categories of shared dataobjects are identified: conventional, read-only, migratory, write-shared, and synchronization. But, with their approach, the programmer needs to know the memory access behaviors on each shared variable to specify a protocol used for the variable. [5, 11, 18] also presentother schemesto reduce coherency overhead. <p> We presentan online (or adaptive) approachbasedon the number (or size) of updates by other nodes betweenconsecutive local accesses, as explained next. Our analysisassumesthatthe DSM usesrelease consistencyand dynamic distributed ownership analogous to Munin <ref> [7] </ref> and Quarks [15]. Minimizing the Number of Messages We nowconsidernumber of messages as the costmetric. Letus focus on the accessesto aparticular page P as observedatanode A. These accessescan be partitioned into segments.
Reference: [8] <author> A. Cox and R. Fowler, </author> <title> Adaptive cache coherency for detecting migratory shared data, </title> <booktitle> in Proceedings of the 20th Annual International Symposiumon Computer Architecture, </booktitle> <pages> pp. 98-108, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Competitive update scheme [1, 9, 10, 13] invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme. Protocols presented in <ref> [8, 9, 20, 28] </ref> dynamically identify migratory shared data and switch to migratory protocol in order to reduce the overhead. Tempest [3, 26] allows programmers and compilers to use user-level mechanism to implement shared memory policies that are appropriate to a particular program or data structure.
Reference: [9] <author> F. Dahlgren, M. Dubois, and P. Stenstrom, </author> <booktitle> Combined performance gains of simple cache protocolextentions,in Proceedingsof the 21st Annual InternationalSymposiumon Computer Architecture, </booktitle> <pages> pp. 187-197, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: This prediction should be accurate, provided that the memory access patterns change relatively infrequently. To demonstrate our approach, we present an adaptive scheme that chooses between the invalidate protocol and the competitive update protocol <ref> [1, 9, 10, 13] </ref>. The competitive update protocol is defined by a threshold parameter; we will rename the threshold as the limit. Experimental results show that our adaptive scheme performs well because memory access patterns do not change frequently in many applications. This paper is organized as follows. <p> If there are three writes by a single processor without intervening references by any other processor, all other cached copies are invalidated in [2]. Competitive update scheme <ref> [1, 9, 10, 13] </ref> invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme. <p> Competitive update scheme [1, 9, 10, 13] invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme. Protocols presented in <ref> [8, 9, 20, 28] </ref> dynamically identify migratory shared data and switch to migratory protocol in order to reduce the overhead. Tempest [3, 26] allows programmers and compilers to use user-level mechanism to implement shared memory policies that are appropriate to a particular program or data structure. <p> Our initial goal was to design a heuristic to dynamically choose between the invalidate and the update protocols. However, for reasons thatwill be apparent later, the proposed adaptive scheme actually chooses between the invalidate and competitive update <ref> [9] </ref> protocols. The competitive update protocol is defined using a threshold parameter in this paper, we will refer to the threshold as update limit or just limit.
Reference: [10] <author> F. Dahlgren and P. Stenstrom, </author> <title> Using write caches to improve performance of cache coherence protocols in shared-memory multiprocessors,Journalof Parallel andDistributedComputing,vol. </title> <type> 26, </type> <institution> pp.193-210, </institution> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: This prediction should be accurate, provided that the memory access patterns change relatively infrequently. To demonstrate our approach, we present an adaptive scheme that chooses between the invalidate protocol and the competitive update protocol <ref> [1, 9, 10, 13] </ref>. The competitive update protocol is defined by a threshold parameter; we will rename the threshold as the limit. Experimental results show that our adaptive scheme performs well because memory access patterns do not change frequently in many applications. This paper is organized as follows. <p> If there are three writes by a single processor without intervening references by any other processor, all other cached copies are invalidated in [2]. Competitive update scheme <ref> [1, 9, 10, 13] </ref> invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme.
Reference: [11] <author> C. Dubnickiand T. LeBlanc, Adjustableblocksize coherentcaches, </author> <booktitle> in Proceedings of the 19th Annual International Symposiumon Computer Architecture, </booktitle> <pages> pp. 170-180, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Multiple consistency protocol was proposed in [7] where several categories of shared dataobjects are identified: conventional, read-only, migratory, write-shared, and synchronization. But, with their approach, the programmer needs to know the memory access behaviors on each shared variable to specify a protocol used for the variable. <ref> [5, 11, 18] </ref> also presentother schemesto reduce coherency overhead. IRG (Inter-Reference Gap) model for the time interval betweensuccessive references to the same addresswas presentedin [24].
Reference: [12] <author> S. J. Eggers, </author> <title> Simplicity versusaccuracyin amodelof cachecoherency overhead, </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 40, </volume> <pages> pp. 893-906, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Two costmetrics considered here are: (i) number of messages, and (ii) amountof data transferred. In this section, we evaluate the above costmetrics for consistencyprotocols of interest. <ref> [12, 29, 30] </ref> also presentcostanalysis for coherency overhead. [29] presents an analysis based on many parameters such as read-write ratio, page fault ratio, and costof sending/receiving a page. <p> In this section, we evaluate the above costmetrics for consistencyprotocols of interest. [12, 29, 30] also presentcostanalysis for coherency overhead. [29] presents an analysis based on many parameters such as read-write ratio, page fault ratio, and costof sending/receiving a page. Eggers <ref> [12] </ref> presents a write-run model to predict the cache coherency overhead for the bus based multiprocessor system. [12, 29] both do not consider the problem of implementing adaptive schemes. [30] associates different costs with different events (such as cache hit, invalidate, update, and cache load) and presents an off-line algorithm to <p> Eggers [12] presents a write-run model to predict the cache coherency overhead for the bus based multiprocessor system. <ref> [12, 29] </ref> both do not consider the problem of implementing adaptive schemes. [30] associates different costs with different events (such as cache hit, invalidate, update, and cache load) and presents an off-line algorithm to choose invalidate or update protocols ateachwrite. <p> Let U be the number of such updates to the local copy of page P during a segment. An acknowledgement is sent for each update message received. 2 Segment is a sequence of remote updates between two consecutive local accesses. Write-run <ref> [12] </ref> and no-synch run [4] models are introduced by others. A write-run is a sequence of local writes between two consecutive remote accesses [12]. A no-synch run is a sequence of accesses to a single object by any thread between two synchronization points in a particular thread [4]. <p> An acknowledgement is sent for each update message received. 2 Segment is a sequence of remote updates between two consecutive local accesses. Write-run <ref> [12] </ref> and no-synch run [4] models are introduced by others. A write-run is a sequence of local writes between two consecutive remote accesses [12]. A no-synch run is a sequence of accesses to a single object by any thread between two synchronization points in a particular thread [4]. Therefore, the numberof messagesneededin one segment, denoted by M update , is 2 U .
Reference: [13] <author> H. Grahn, P. Stenstrom, and M. Dubois, </author> <title> Implementationand evaluation of update-basedcache protocolsunder relaxed memory consistency models,Future GenerationComputerSystems,vol. </title> <booktitle> 11,pp. </booktitle> <pages> 247-271, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: This prediction should be accurate, provided that the memory access patterns change relatively infrequently. To demonstrate our approach, we present an adaptive scheme that chooses between the invalidate protocol and the competitive update protocol <ref> [1, 9, 10, 13] </ref>. The competitive update protocol is defined by a threshold parameter; we will rename the threshold as the limit. Experimental results show that our adaptive scheme performs well because memory access patterns do not change frequently in many applications. This paper is organized as follows. <p> If there are three writes by a single processor without intervening references by any other processor, all other cached copies are invalidated in [2]. Competitive update scheme <ref> [1, 9, 10, 13] </ref> invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme.
Reference: [14] <author> P. Keleher, </author> <title> Lazy Release Consistencyfor DistributedSharedMemory. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. Many approacheshave been proposed to implementdistributed shared memory <ref> [6, 7, 14, 15, 19, 26, 29] </ref>. The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency [7].
Reference: [15] <author> D. Khandekar, </author> <title> Quarks: Portable dsm on unix,tech. </title> <type> rep., </type> <institution> University of Utah. </institution>
Reference-contexts: Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. Many approacheshave been proposed to implementdistributed shared memory <ref> [6, 7, 14, 15, 19, 26, 29] </ref>. The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency [7]. <p> Competitive update scheme [1, 9, 10, 13] invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks <ref> [15] </ref> uses a variation of the competitive update scheme. Protocols presented in [8, 9, 20, 28] dynamically identify migratory shared data and switch to migratory protocol in order to reduce the overhead. <p> We presentan online (or adaptive) approachbasedon the number (or size) of updates by other nodes betweenconsecutive local accesses, as explained next. Our analysisassumesthatthe DSM usesrelease consistencyand dynamic distributed ownership analogous to Munin [7] and Quarks <ref> [15] </ref>. Minimizing the Number of Messages We nowconsidernumber of messages as the costmetric. Letus focus on the accessesto aparticular page P as observedatanode A. These accessescan be partitioned into segments. A new segment begins with the first access by node A following an update to the page by another node. <p> We implemented the adaptive protocol by modifying another DSM, named Quarks (Beta release 0.8) <ref> [6, 15] </ref>. This section presents the experimental results. <p> This section presents the experimental results. We evaluated the adaptive scheme using a synthetic application (named qtest) as well as five other applications (Floyd-Warshall, SOR, ProdCons, Reader/Writer, and QSORT). qtest is a simple shared memory application based on a program available with the Quarks release <ref> [15] </ref>: all nodes access the shared data concurrently. A process acquiresmutual exclusion before each accessandreleases it after that. We measured the cost (i.e., number of messages and size of data transferred) by executing different instances of the synthetic application, as described below. SOR is available with the Quarks release [15]. <p> release <ref> [15] </ref>: all nodes access the shared data concurrently. A process acquiresmutual exclusion before each accessandreleases it after that. We measured the cost (i.e., number of messages and size of data transferred) by executing different instances of the synthetic application, as described below. SOR is available with the Quarks release [15]. ProdCons and Reader/Writer are based on qtest. Sampling period (N s ) is chosen to be 2 for all applications. <p> These two applications have small value of U . However, as shown in Figures 9 and 10, update protocol unexpectedly shows bad performance. Recall thatwe use a DSM implementation basedon Quarks <ref> [15] </ref> for these experiments. In Quarks, the Master node initializes all shared memory and the Master node is in the copyset of all pages. <p> The paper presents experimental evaluation of the adaptive DSM using an implementation basedon Quarks DSM <ref> [15] </ref>. Experimental results from the implementation suggestthat the proposed adaptive approach can indeed reduce the cost.
Reference: [16] <author> J.-H. Kim and N. H. Vaidya, </author> <title> Recoverabledistributed shared memory using the competitive update protocol, </title> <booktitle> in 1995 Pacifi c Rim International Symposiumon Fault-TolerantSystems, </booktitle> <pages> pp. 152-157, </pages> <year> 1995. </year>
Reference: [17] <author> J.-H. Kim and N. H. Vaidya, </author> <title> Towards an adaptive distributed shared memory,Tech. </title> <type> Rep. 95-037, </type> <institution> Texas A&M Univ., </institution> <year> 1995. </year>
Reference: [18] <editor> A. LebeckandD. Wood,Dynamicself-invalidation: </editor> <booktitle> Reducingcoher-ence overhead in shared-memorymultiprocessors,in Proceedingsof the 22nd Annual InternationalSymposiumon Computer Architecture, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Multiple consistency protocol was proposed in [7] where several categories of shared dataobjects are identified: conventional, read-only, migratory, write-shared, and synchronization. But, with their approach, the programmer needs to know the memory access behaviors on each shared variable to specify a protocol used for the variable. <ref> [5, 11, 18] </ref> also presentother schemesto reduce coherency overhead. IRG (Inter-Reference Gap) model for the time interval betweensuccessive references to the same addresswas presentedin [24].
Reference: [19] <author> K. Li and P. Hudak, </author> <title> Memory coherence in shared virtual memory systems, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 7, </volume> <pages> pp. 321-359, </pages> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. Many approacheshave been proposed to implementdistributed shared memory <ref> [6, 7, 14, 15, 19, 26, 29] </ref>. The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency [7].
Reference: [20] <author> H. Nilson and P. Stenstrom, </author> <title> An adaptive update-based cache coherence protocolfor reduction of miss rate and traffic, </title> <type> tech. rep., </type> <institution> Lund University, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: Competitive update scheme [1, 9, 10, 13] invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme. Protocols presented in <ref> [8, 9, 20, 28] </ref> dynamically identify migratory shared data and switch to migratory protocol in order to reduce the overhead. Tempest [3, 26] allows programmers and compilers to use user-level mechanism to implement shared memory policies that are appropriate to a particular program or data structure.
Reference: [21] <author> B. Nitzberg and V. Lo,Distributed sharedmemory: </author> <title> A survey of issues and algorithms,IEEE Computer, </title> <journal> vol. </journal> <volume> 24, </volume> <pages> pp. 52-60, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Software distributed shared memory (DSM) systems have many advantages over message passing systems <ref> [21, 29] </ref>. Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications.
Reference: [22] <author> N. Oba, A. Moriwaki, and S. Shimizu, Top-1: </author> <title> A snoop-cache-based multiprocessor, </title> <booktitle> in Proc. 1990 International Phoenix Conference on Computers and Communication, </booktitle> <pages> pp. 101-108, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: On the other hand, this paper considers adaptive (on-line) algorithms that are applicable to distributed systems. [31] examines the performance of online hybrid protocols for bus-based cache-coherent multiprocessors. Our scheme deals with distributed implementations of shared memory. <ref> [22] </ref> also describes a hardware implementation of ahybrid scheme. Ramachandran etal. [25, 27] presentnew mechanisms for explicit communication in shared memory multiprocessors which allows selectively updating a set of processors, or requesting a stream of data ahead of its intended use (prefetch).
Reference: [23] <author> J. Peterson and A. Silberschatz, </author> <booktitle> Operating SystemConcepts, </booktitle> <pages> pp. 105-108. </pages> <publisher> Addison-WesleyPublishing Company, Inc., </publisher> <year> 1983. </year>
Reference-contexts: Veenstra and Fowler [30] evaluate 1 For example, to predictthe next CPU burstof a task, a Shortest-Job-FirstCPU scheduling algorithm may use an exponential average of the measured lengths of previousCPU bursts <ref> [23] </ref>. the performance of off-line algorithms for bus-based systems, that choose invalidate or update protocol based on offline analysis. On the other hand, this paper considers adaptive (on-line) algorithms that are applicable to distributed systems. [31] examines the performance of online hybrid protocols for bus-based cache-coherent multiprocessors.
Reference: [24] <author> V. Phalke and B. Gopinath, </author> <title> An inter-reference gap modelfor temporal locality in program behavior, </title> <booktitle> in 1995 ACM SIGMETRICS Joint InternationalConferenceon MeasurementandModelingof Computer Systems, </booktitle> <pages> pp. 291-300, </pages> <year> 1995. </year>
Reference-contexts: But, with their approach, the programmer needs to know the memory access behaviors on each shared variable to specify a protocol used for the variable. [5, 11, 18] also presentother schemesto reduce coherency overhead. IRG (Inter-Reference Gap) model for the time interval betweensuccessive references to the same addresswas presentedin <ref> [24] </ref>. It estimates the future IRG values by using prediction based algorithm and can be used for memory replacementalgorithm, etc. 3 Adaptive Protocol Ourobjective is to implementan adaptive DSM thatcan adaptto the time-varying memory access patterns of an application.
Reference: [25] <author> U. Ramachandran, G. Shah, A. Sivasubramaniam, A. Singla, and I. Yanasak, Architectural mechanismsfor explicitcommunicationin sharedmemory multiproccessors,in Supercomputing`95, </author> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: On the other hand, this paper considers adaptive (on-line) algorithms that are applicable to distributed systems. [31] examines the performance of online hybrid protocols for bus-based cache-coherent multiprocessors. Our scheme deals with distributed implementations of shared memory. [22] also describes a hardware implementation of ahybrid scheme. Ramachandran etal. <ref> [25, 27] </ref> presentnew mechanisms for explicit communication in shared memory multiprocessors which allows selectively updating a set of processors, or requesting a stream of data ahead of its intended use (prefetch). <p> Ramachandran etal. [25, 27] presentnew mechanisms for explicit communication in shared memory multiprocessors which allows selectively updating a set of processors, or requesting a stream of data ahead of its intended use (prefetch). The basic difference between our approach and <ref> [25] </ref> is that our scheme does not need to know whether a particular synchronization controls access to a given shared memory page or not. [2] dynamically chooses to update or invalidate copies of a shared data object. <p> Other cost metrics need to be considered. In particular, impact of our heuristics on application execution time needs to be evaluated. * The adaptive approach (based on cost-comparison) presented here can be combined with ideas developed by other researchers (e.g., <ref> [25] </ref>) to obtain further improvementin DSM performance. As yet, we have not explored this possibility. Acknowledgements We thank John Carter and D. Khandekar at the University of Utah for making Quarks source code available in public domain, and Akhilesh Kumar for the Floyd-Warshall source code.
Reference: [26] <author> S. Reinhardt, J. Larus, and D. Wood, Tempest and typhoon: </author> <booktitle> User-levelsharedmemory,in Proceedingsof the 21stAnnual International Symposiumon Computer Architecture, </booktitle> <pages> pp. 325-336, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. Many approacheshave been proposed to implementdistributed shared memory <ref> [6, 7, 14, 15, 19, 26, 29] </ref>. The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency [7]. <p> Quarks [15] uses a variation of the competitive update scheme. Protocols presented in [8, 9, 20, 28] dynamically identify migratory shared data and switch to migratory protocol in order to reduce the overhead. Tempest <ref> [3, 26] </ref> allows programmers and compilers to use user-level mechanism to implement shared memory policies that are appropriate to a particular program or data structure. Multiple consistency protocol was proposed in [7] where several categories of shared dataobjects are identified: conventional, read-only, migratory, write-shared, and synchronization.
Reference: [27] <author> G. Shah, A. Singla, and U. Ramachandran, </author> <title> The quest for a zero overhead shared memory parallel machine, </title> <booktitle> in Proceedings of International Conferenceon Parallel Procesing, </booktitle> <volume> vol. I, </volume> <year> 1995. </year>
Reference-contexts: On the other hand, this paper considers adaptive (on-line) algorithms that are applicable to distributed systems. [31] examines the performance of online hybrid protocols for bus-based cache-coherent multiprocessors. Our scheme deals with distributed implementations of shared memory. [22] also describes a hardware implementation of ahybrid scheme. Ramachandran etal. <ref> [25, 27] </ref> presentnew mechanisms for explicit communication in shared memory multiprocessors which allows selectively updating a set of processors, or requesting a stream of data ahead of its intended use (prefetch).
Reference: [28] <author> P. Stenstrom, M. Brorsson, and L. </author> <title> Sandberg, </title> <booktitle> An adaptive cache coherence protocoloptimized for migratory sharing,in Proceedings of the 20th Annual International Symposiumon Computer Architecture, </booktitle> <pages> pp. 109-118, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Competitive update scheme [1, 9, 10, 13] invalidates a page if the number of remote updates to the page (between local accesses) exceeds a threshold or a limit parameter. Quarks [15] uses a variation of the competitive update scheme. Protocols presented in <ref> [8, 9, 20, 28] </ref> dynamically identify migratory shared data and switch to migratory protocol in order to reduce the overhead. Tempest [3, 26] allows programmers and compilers to use user-level mechanism to implement shared memory policies that are appropriate to a particular program or data structure.
Reference: [29] <author> M. Stumm and S. Zhou, </author> <booktitle> Algorithmsimplementingdistributedshared memory,IEEE Computer, </booktitle> <pages> pp. 54-64, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Software distributed shared memory (DSM) systems have many advantages over message passing systems <ref> [21, 29] </ref>. Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. <p> Since DSM provides a user a simple shared memory abstraction, the user does nothave to be concernedwith datamovementbetweenhosts. Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without sig-nificantmodifications. Many approacheshave been proposed to implementdistributed shared memory <ref> [6, 7, 14, 15, 19, 26, 29] </ref>. The DSM implementa-tionsare based onvariationsof write-invalidate and/orwrite-update protocols. Recent implementations of software DSM use relaxed fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. memory consistency models such as release consistency [7]. <p> Two costmetrics considered here are: (i) number of messages, and (ii) amountof data transferred. In this section, we evaluate the above costmetrics for consistencyprotocols of interest. <ref> [12, 29, 30] </ref> also presentcostanalysis for coherency overhead. [29] presents an analysis based on many parameters such as read-write ratio, page fault ratio, and costof sending/receiving a page. <p> Two costmetrics considered here are: (i) number of messages, and (ii) amountof data transferred. In this section, we evaluate the above costmetrics for consistencyprotocols of interest. [12, 29, 30] also presentcostanalysis for coherency overhead. <ref> [29] </ref> presents an analysis based on many parameters such as read-write ratio, page fault ratio, and costof sending/receiving a page. <p> Eggers [12] presents a write-run model to predict the cache coherency overhead for the bus based multiprocessor system. <ref> [12, 29] </ref> both do not consider the problem of implementing adaptive schemes. [30] associates different costs with different events (such as cache hit, invalidate, update, and cache load) and presents an off-line algorithm to choose invalidate or update protocols ateachwrite.
Reference: [30] <author> J. Veenstra and R. Fowler, </author> <title> A performance evaluation of optimal hybrid cache coherency protocols, </title> <booktitle> in Proc. of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pp. 149-160, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The proposed adaptive protocol is presented in Section 3. Section 4 presents the performance evaluation of the proposed scheme. Section 5 concludes the paper. 2 Related Work Many schemes have been proposed to reduce overhead by adapting to memory access patterns. Veenstra and Fowler <ref> [30] </ref> evaluate 1 For example, to predictthe next CPU burstof a task, a Shortest-Job-FirstCPU scheduling algorithm may use an exponential average of the measured lengths of previousCPU bursts [23]. the performance of off-line algorithms for bus-based systems, that choose invalidate or update protocol based on offline analysis. <p> Two costmetrics considered here are: (i) number of messages, and (ii) amountof data transferred. In this section, we evaluate the above costmetrics for consistencyprotocols of interest. <ref> [12, 29, 30] </ref> also presentcostanalysis for coherency overhead. [29] presents an analysis based on many parameters such as read-write ratio, page fault ratio, and costof sending/receiving a page. <p> Eggers [12] presents a write-run model to predict the cache coherency overhead for the bus based multiprocessor system. [12, 29] both do not consider the problem of implementing adaptive schemes. <ref> [30] </ref> associates different costs with different events (such as cache hit, invalidate, update, and cache load) and presents an off-line algorithm to choose invalidate or update protocols ateachwrite. We presentan online (or adaptive) approachbasedon the number (or size) of updates by other nodes betweenconsecutive local accesses, as explained next.
Reference: [31] <author> J. VeenstraandR. Fowler, </author> <title> The prospectsforon-linehybridcoherency protocolson bus-basedmultiprocessors,Tech. </title> <type> Rep. 490, </type> <institution> The University of Rochester, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: On the other hand, this paper considers adaptive (on-line) algorithms that are applicable to distributed systems. <ref> [31] </ref> examines the performance of online hybrid protocols for bus-based cache-coherent multiprocessors. Our scheme deals with distributed implementations of shared memory. [22] also describes a hardware implementation of ahybrid scheme.
References-found: 31

