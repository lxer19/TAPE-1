URL: http://www.cs.cmu.edu/afs/cs/project/jair/pub/volume4/cheng96a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/abstracts/cheng96a.html
Root-URL: 
Email: cheng@cs.few.eur.nl  bidewolf@cs.few.eur.nl  
Title: Least Generalizations and Greatest Specializations of Sets of Clauses  
Author: Shan-Hwei Nienhuys-Cheng Ronald de Wolf 
Address: H4-19 P.O. Box 1738, 3000 DR Rotterdam, the Netherlands  
Affiliation: Erasmus University of Rotterdam Department of Computer Science,  
Note: Journal of Artificial Intelligence Research 4 (1996) 341-363 Submitted 11/95; published 5/96  
Abstract: The main operations in Inductive Logic Programming (ILP) are generalization and specialization, which only make sense in a generality order. In ILP, the three most important generality orders are subsumption, implication and implication relative to background knowledge. The two languages used most often are languages of clauses and languages of only Horn clauses. This gives a total of six different ordered languages. In this paper, we give a systematic treatment of the existence or non-existence of least generalizations and greatest specializations of finite sets of clauses in each of these six ordered sets. We survey results already obtained by others and also contribute some answers of our own. Our main new results are, firstly, the existence of a computable least generalization under implication of every finite set of clauses containing at least one non-tautologous function-free clause (among other, not necessarily function-free clauses). Secondly, we show that such a least generalization need not exist under relative implication, not even if both the set that is to be generalized and the background knowledge are function-free. Thirdly, we give a complete discussion of existence and non-existence of greatest specializations in each of the six ordered languages.
Abstract-found: 1
Intro-found: 1
Reference: <author> Aha, D. W. </author> <year> (1992). </year> <title> Relating relational learning algorithms. </title> <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Inductive Logic Programming, Vol. 38 of APIC Series, </booktitle> <pages> pp. 233-254. </pages> <publisher> Academic Press. </publisher>
Reference: <author> Chang, C.-L., & Lee, R. C.-T. </author> <year> (1973). </year> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <address> San Diego. </address>
Reference-contexts: unsatisfiable. (3) [ f:L 1 ; : : : ; :L n g has no Herbrand model. (4) No subset of A is an Herbrand model of [ f:L 1 ; : : : ; :L n g. 353 Nienhuys-Cheng & de Wolf Then (1),(2). (2),(3) by Theorem 4.2 of <ref> (Chang & Lee, 1973) </ref>. Since also (3),(4), we have (1),(4). (4) is decidable because A is finite, so (1) is decidable as well. 2 Corollary 1 The problem whether j= C, where is a finite set of function-free clauses and C is a clause, is decidable.
Reference: <author> De Raedt, L., & Bruynooghe, M. </author> <year> (1993). </year> <title> A theory of clausal discovery. </title> <booktitle> In Proceedings of the 13th International Joint Conference on Artificial Intelligence (IJCAI-93), </booktitle> <pages> pp. 1058-1063. </pages> <publisher> Morgan Kaufmann. </publisher> <editor> 361 Nienhuys-Cheng & de Wolf Gottlob, G. </editor> <year> (1987). </year> <title> Subsumption and implication. </title> <journal> Information Processing Letters, </journal> <volume> 24 (2), </volume> <pages> 109-111. </pages>
Reference-contexts: one hand based on the Subsumption Theorem for resolution (Lee, 1967; Kowalski, 1970; Nienhuys-Cheng & de Wolf, 1996), which allows us to restrict attention to finite sets of ground instances of clauses, and on the other hand on a modification of some proofs concerning T-implication which can be found in <ref> (Idestam-Almquist, 1993, 1995) </ref>. An immediate corollary of this result is the existence and computability of an LGI of any finite set of function-free clauses. As far as we know, both our general LGI-result and this particular corollary are new results. <p> Well-known ILP-systems such as Foil (Quinlan & Cameron-Jones, 1993), Linus (Lavrac & Dzeroski, 1994) and Mobal <ref> (Morik, Wrobel, Kietz, & Emde, 1993) </ref> all use only function-free clauses. More than one half of the ILP-systems surveyed by Aha (1992) is restricted to function-free clauses. Function-free clauses are also sufficient for most applications concerning databases. <p> Hence I (C; T ) j= D. 2 Lemma 3 cannot be generalized to the case where C contains function symbols of arity 1, take C = P (f (x); y) P (z; x) and D = P (f (a); a) P (a; f (a)) <ref> (from the example given on p. 25 of Idestam-Almquist, 1993) </ref>. Then T = fa; f (a)g is the term set of D and we have C j= D, yet it can be seen that I (C; T ) 6j= D. <p> The following sequence of lemmas more or less follows the pattern of Idestam-Almquist's (1995) Lemma 10 to Lemma 12 <ref> (similar to Lemma 3.10 to Lemma 3.12 of Idestam-Almquist, 1993) </ref>. There he gives a proof of the existence of a least generalization under T-implication of any finite set of (not necessarily function-free) clauses.
Reference: <author> Idestam-Almquist, P. </author> <year> (1993). </year> <title> Generalization of Clauses. </title> <type> Ph.D. thesis, </type> <institution> Stockholm University. </institution>
Reference: <author> Idestam-Almquist, P. </author> <year> (1995). </year> <title> Generalization of clauses under implication. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 3, </volume> <pages> 467-489. </pages>
Reference: <author> Kowalski, R. A. </author> <year> (1970). </year> <title> The case for using equality axioms in automatic demonstration. </title> <booktitle> In Proceedings of the Symposium on Automatic Demonstration, Vol. 125 of Lecture Notes in Mathematics, </booktitle> <pages> pp. 112-127. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Lavrac, N., & Dzeroski, S. </author> <year> (1994). </year> <title> Inductive Logic Programming: Techniques and Applications. </title> <publisher> Ellis Horwood. </publisher>
Reference-contexts: Well-known ILP-systems such as Foil (Quinlan & Cameron-Jones, 1993), Linus <ref> (Lavrac & Dzeroski, 1994) </ref> and Mobal (Morik, Wrobel, Kietz, & Emde, 1993) all use only function-free clauses. More than one half of the ILP-systems surveyed by Aha (1992) is restricted to function-free clauses. Function-free clauses are also sufficient for most applications concerning databases.
Reference: <author> Lee, R. C.-T. </author> <year> (1967). </year> <title> A Completeness Theorem and a Computer Program for Finding Theorems Derivable from Given Axioms. </title> <type> Ph.D. thesis, </type> <institution> University of California, Berkeley. </institution>
Reference: <author> Lloyd, J. W. </author> <year> (1987). </year> <title> Foundations of Logic Programming (Second edition). </title> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: That is, they use clauses of the form A L 1 ; : : : ; L n , where A is an atom and each L i is a literal. These are called program clauses <ref> (Lloyd, 1987) </ref>. Program clauses are in fact logically equivalent to general clauses. For instance, the program clause P (x) Q (x); :R (x) is equivalent to the non-Horn clause P (x) _ :Q (x) _ R (x).
Reference: <author> Marcinkowski, J., & Pacholski, L. </author> <year> (1992). </year> <title> Undecidability of the horn-clause implication problem. </title> <booktitle> In Proceedings of the 33rd Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 354-362 Pittsburg. </pages>
Reference: <author> Morik, K., Wrobel, S., Kietz, J.-U., & Emde, W. </author> <year> (1993). </year> <title> Knowledge Acquisition and Machine Learning: Theory, Methods and Applications. </title> <publisher> Academic Press, London. </publisher>
Reference-contexts: Well-known ILP-systems such as Foil (Quinlan & Cameron-Jones, 1993), Linus (Lavrac & Dzeroski, 1994) and Mobal <ref> (Morik, Wrobel, Kietz, & Emde, 1993) </ref> all use only function-free clauses. More than one half of the ILP-systems surveyed by Aha (1992) is restricted to function-free clauses. Function-free clauses are also sufficient for most applications concerning databases.
Reference: <author> Muggleton, S. </author> <year> (1992). </year> <title> Inductive logic programming. </title> <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Inductive Logic Programming, Vol. 38 of APIC Series, </booktitle> <pages> pp. 3-27. </pages> <publisher> Academic Press. </publisher>
Reference-contexts: This background knowledge is rather restricted: it must be a finite set of ground literals. Because of its restrictiveness, we have not included relative subsumption in Table 1. Nevertheless, we mention it here, because least generalization under relative subsumption forms the basis of the well-known ILP system Golem <ref> (Muggleton & Feng, 1992) </ref>. Definition 13 Let C; D be clauses, = fL 1 ; : : : ; L m g be a finite set of ground literals.
Reference: <author> Muggleton, S., & De Raedt, L. </author> <year> (1994). </year> <title> Inductive logic programming: Theory and methods. </title> <journal> Journal of Logic Programming, </journal> <volume> 19, </volume> <pages> 629-679. </pages>
Reference: <author> Muggleton, S., & Feng, C. </author> <year> (1992). </year> <title> Efficient induction of logic programs. </title> <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Inductive Logic Programming, Vol. 38 of APIC Series, </booktitle> <pages> pp. 281-298. </pages> <publisher> Academic Press. </publisher>
Reference-contexts: This background knowledge is rather restricted: it must be a finite set of ground literals. Because of its restrictiveness, we have not included relative subsumption in Table 1. Nevertheless, we mention it here, because least generalization under relative subsumption forms the basis of the well-known ILP system Golem <ref> (Muggleton & Feng, 1992) </ref>. Definition 13 Let C; D be clauses, = fL 1 ; : : : ; L m g be a finite set of ground literals.
Reference: <author> Muggleton, S., & Page, C. D. </author> <year> (1994). </year> <title> Self-saturation of definite clauses. </title> <editor> In Wrobel, S. (Ed.), </editor> <booktitle> Proceedings of the 4th International Workshop on Inductive Logic Programming (ILP-94), Vol. 237 of GMD-Studien, </booktitle> <pages> pp. </pages> <address> 161-174 Bad Honnef/Bonn. </address> <institution> Gesellschaft fur Mathematik und Datenverarbeitung. </institution>
Reference: <author> Niblett, T. </author> <year> (1988). </year> <title> A study of generalisation in logic programs. </title> <editor> In Sleeman, D. (Ed.), </editor> <booktitle> Proceedings of the 3rd European Working Sessions on Learning (EWSL-88), </booktitle> <pages> pp. 131-138. </pages>
Reference: <author> Nienhuys-Cheng, S.-H., & de Wolf, R. </author> <year> (1996). </year> <title> The subsumption theorem in inductive logic programming: </title> <editor> Facts and fallacies. In De Raedt, L. (Ed.), </editor> <booktitle> Advances in Inductive Logic Programming, </booktitle> <pages> pp. </pages> <address> 265-276 Amsterdam. </address> <publisher> IOS Press. </publisher> <editor> 362 Least Generalizations and Greatest Specializations Plotkin, G. D. </editor> <year> (1970). </year> <title> A note on inductive generalization. </title> <journal> Machine Intelligence, </journal> <volume> 5, </volume> <pages> 153-163. </pages>
Reference: <author> Plotkin, G. D. </author> <year> (1971a). </year> <title> Automatic Methods of Inductive Inference. </title> <type> Ph.D. thesis, </type> <institution> Edinburgh University. </institution>
Reference: <author> Plotkin, G. D. </author> <year> (1971b). </year> <title> A further note on inductive generalization. </title> <journal> Machine Intelligence, </journal> <volume> 6, </volume> <pages> 101-124. </pages>
Reference-contexts: As this example also shows, the subsumption order is particularly unsatisfactory when we consider recursive clauses: clauses which can be resolved with themselves. 2. There is also relative subsumption <ref> (Plotkin, 1971b) </ref>, which will be briefly touched in Section 4. 3. Least generalizations are also often called least general generalizations, for instance by Plotkin (1971b), Muggleton and Page (1994), Idestam-Almquist (1993, 1995), Niblett (1988), though not by Plotkin (1970), but we feel this `general' is redundant. 4. <p> Niblett attributes this definition to Plotkin, though Plotkin gives a rather different definition of relative subsumption in <ref> (Plotkin, 1971b) </ref>, as we have seen in Section 4. 359 Nienhuys-Cheng & de Wolf (4) There is a substitution such that [ fCg j= D. (5) [ fCg j= D. (1),(2) by definition. (2),(3) by the completeness of `. (3),(4) by the Deduction Theorem. (4))(5) is obvious and (5))(4) follows from
Reference: <author> Quinlan, J. R., & Cameron-Jones, R. M. </author> <year> (1993). </year> <title> Foil: A midterm report. </title> <editor> In Brazdil, P. (Ed.), </editor> <booktitle> Proceedings of the 6th European Conference on Machine Learning (ECML-93), Vol. 667 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pp. 3-20. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Well-known ILP-systems such as Foil <ref> (Quinlan & Cameron-Jones, 1993) </ref>, Linus (Lavrac & Dzeroski, 1994) and Mobal (Morik, Wrobel, Kietz, & Emde, 1993) all use only function-free clauses. More than one half of the ILP-systems surveyed by Aha (1992) is restricted to function-free clauses. Function-free clauses are also sufficient for most applications concerning databases.
Reference: <author> Reynolds, J. C. </author> <year> (1970). </year> <title> Transformational systems and the algebraic structure of atomic formulas. </title> <journal> Machine Intelligence, </journal> <volume> 5, </volume> <pages> 135-151. </pages>
Reference-contexts: However, if we would instantiate in Definition 11 to the set of atoms, then the greatest specialization of two atoms in the set of atoms should itself also be an atom. The GSS of two atoms is then their most general unification <ref> (Reynolds, 1970) </ref>. For instance, the GSS of S would in this case be P (a; b). 349 Nienhuys-Cheng & de Wolf This establishes that a clausal language C ordered by is a lattice.
Reference: <author> Rouveirol, C. </author> <year> (1992). </year> <title> Extensions of inversion of resolution applied to theory completion. </title>
Reference-contexts: However, the LGS of these two clauses is P (x; y; z) P (u; v; w), which is clearly an over-generalization. 344 Least Generalizations and Greatest Specializations symbols are removed from clauses and put in the background knowledge by techniques such as flattening <ref> (Rouveirol, 1992) </ref>. Well-known ILP-systems such as Foil (Quinlan & Cameron-Jones, 1993), Linus (Lavrac & Dzeroski, 1994) and Mobal (Morik, Wrobel, Kietz, & Emde, 1993) all use only function-free clauses. More than one half of the ILP-systems surveyed by Aha (1992) is restricted to function-free clauses.
Reference: <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Inductive Logic Programming, Vol. 38 of APIC Series, </booktitle> <pages> pp. 63-92. </pages> <publisher> Academic Press. </publisher>
Reference: <author> Shapiro, E. Y. </author> <year> (1981). </year> <title> Inductive inference of theories from facts. </title> <note> Research report 192, Yale University. </note> <author> van der Laag, P. R. J., & Nienhuys-Cheng, S.-H. </author> <year> (1994). </year> <title> Existence and nonexistence of complete refinement operators. </title> <editor> In Bergadano, F., & De Raedt, L. (Eds.), </editor> <booktitle> Proceedings of the 7th European Conference on Machine Learning (ECML-94), Vol. 784 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pp. 307-322. </pages> <publisher> Springer-Verlag. </publisher> <pages> 363 </pages>
References-found: 24

