URL: http://shangrila.cs.ucdavis.edu:1234/silo/tphols96sup.ps
Refering-URL: http://shangrila.cs.ucdavis.edu:1234/silo/
Root-URL: http://www.cs.ucdavis.edu
Email: email:  olsson-@cs.ucdavis.edu  
Title: Extending a State Transition System with Real-Time Semantics  
Author: Dave Peticolas, Cui Zhang, Brian R. Becker, Mark R. Heckman, Karl N. Levitt, and Ron A. Olsson zhang, beckerb, heckman, levitt, 
Note: -peticola,  reasoning about infinite-state systems with an arbitrary number of processes. The technique has been mechanized in HOL and verification of a real-time network are presented.  
Address: CA 95616 USA  
Affiliation: Department of Computer Science University of California, Davis,  
Abstract: This paper presents a technique for extending a state transition the results of applying the technique to the specification and system with real-time semantics. The method is applicable to
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.F. Allen, </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: The model also defines several relations between two intervals such as After, which is true when the second interval starts no earlier than the first, and Overlap, which is true when two intervals overlap in time. These relations are similar to those used in <ref> [1] </ref> and their definition in HOL is straightforward. 4 An important concept in the theory is the conjunction of two intervals. The conjunction of two intervals is a function in and is defined as . (EQ 1) Interval conjunction corresponds to taking the most pessimistic components of two intervals.
Reference: 2. <author> R. Gerber and S. Hong, </author> <title> Compiler Support for Real-Time Programs. </title> <editor> In S.H. Son, editor, </editor> <booktitle> Advances in Real-Time Systems, </booktitle> <address> p353-377. </address> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1995. </year>
Reference-contexts: It would be possible to reason only about worst-case execution times, but reasoning about both best and worst-case times will give more insight into a systems operation. Second, some of the newer real-time languages allow the programmer to specify both upper and lower bounds on execution times <ref> [2, 6] </ref> and thus reasoning about the correctness of programs in those languages requires a model that can encompass both best- and worst-case execution times. Our model represents a real-time interval as an ordered pair of natural numbers.
Reference: 3. <author> M.J.C. Gordon and T.F. Melham, </author> <title> Introduction to HOL: A Theorem Proving Environment for Higher Order Logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: with the system as a whole, which allows us to retain a linear ordering of discrete-time state transitions in the model. * This work was sponsored by DARPA under contract USN N00014-93-1-1322 with the Office of Naval Research. 2 We use the Cambridge HOL system for both specifications and proofs <ref> [3] </ref>. HOL is suitable for formalizing the behavior of real-time systems. We hope our work demonstrates the expressiveness, exibility, and feasibility of higher order logic in mechanizing real-time logics for reasoning about distributed systems with real-time properties.
Reference: 4. <author> J. Hooman, </author> <title> Specification and Compositional Verification of Real-Time Systems, </title> <publisher> LNCS 558, Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Research in formal methods for reasoning about real-time has produced several models of real-time concurrent systems such as timed automata [7] and timed process algebras [10]. In this paper, we use an approach that is related to Hoomans extension of Hoare logic with real-time <ref> [4, 5] </ref>. Hoomans approach uses a denotational semantics extended with time to derive axioms and inference rules that relate the value of a now variable before and after the execution of program fragments.
Reference: 5. <author> J. Hooman, </author> <title> Extending Hoare Logic to Real-Time. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6A:801-825, </volume> <year> 1994. </year>
Reference-contexts: Research in formal methods for reasoning about real-time has produced several models of real-time concurrent systems such as timed automata [7] and timed process algebras [10]. In this paper, we use an approach that is related to Hoomans extension of Hoare logic with real-time <ref> [4, 5] </ref>. Hoomans approach uses a denotational semantics extended with time to derive axioms and inference rules that relate the value of a now variable before and after the execution of program fragments.
Reference: 6. <author> K.B. Kenny and K.J. Lin, </author> <title> Building exible real-time systems using the Flex language. </title> <journal> IEEE Computer, </journal> <volume> p70-78, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: It would be possible to reason only about worst-case execution times, but reasoning about both best and worst-case times will give more insight into a systems operation. Second, some of the newer real-time languages allow the programmer to specify both upper and lower bounds on execution times <ref> [2, 6] </ref> and thus reasoning about the correctness of programs in those languages requires a model that can encompass both best- and worst-case execution times. Our model represents a real-time interval as an ordered pair of natural numbers.
Reference: 7. <author> N. Lynch, </author> <title> Simulation Techniques for proving properties of real-time systems. </title> <booktitle> In Rex Workshop 93, Lecture Notes in Computer Science, Mook, </booktitle> <address> The Netherlands, </address> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Formal methods offer the promise of establishing the correctness of real-time distributed systems. Research in formal methods for reasoning about real-time has produced several models of real-time concurrent systems such as timed automata <ref> [7] </ref> and timed process algebras [10]. In this paper, we use an approach that is related to Hoomans extension of Hoare logic with real-time [4, 5].
Reference: 8. <author> M. Saksena, J. da Silva, and A. Agrawala, </author> <title> Design and Implementation of Maruti-II. </title> <editor> In S.H. Son, editor, </editor> <booktitle> Advances in Real-Time Systems, </booktitle> <address> p73-102. </address> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction The importance of distributed computer systems in real-time applications has been established <ref> [8, 9] </ref>. The correctness of real-time systems often includes timing requirements which must be met in order to guarantee safe operation. Thus, it is desirable to ensure the correct operation of the distributed computer system including the timing requirements.
Reference: 9. <author> K.G. Shin, D.D. Kandlur, D.L. Kiskis, P.S. Dodd, H.A. Rosenberg, and A. Indiresan, </author> <title> A Distributed Real-Time Operating System. </title> <journal> IEEE Software, v9, n5, </journal> <volume> p58-68, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The importance of distributed computer systems in real-time applications has been established <ref> [8, 9] </ref>. The correctness of real-time systems often includes timing requirements which must be met in order to guarantee safe operation. Thus, it is desirable to ensure the correct operation of the distributed computer system including the timing requirements.
Reference: 10. <author> W. Yi, </author> <title> CCS + Time = An Interleaving Model for Real Time Systems. </title> <booktitle> In Proc. International Conference on Automata, Languages, and Programming, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Formal methods offer the promise of establishing the correctness of real-time distributed systems. Research in formal methods for reasoning about real-time has produced several models of real-time concurrent systems such as timed automata [7] and timed process algebras <ref> [10] </ref>. In this paper, we use an approach that is related to Hoomans extension of Hoare logic with real-time [4, 5].
Reference: 11. <author> C. Zhang, B.R. Becker, M.R. Heckman, K. Levitt, and R.A. Olsson, </author> <title> A Hierarchical Method for Reasoning about Distributed Programming Languages. </title> <editor> In E.T. Schubert, P.J. Windley, and J. Alves-Foss, editors, </editor> <booktitle> 8th International Workshop on Higher Order Logic Theorem Proving and Its Applications, Lecture Notes in Computer Science no. 971, </booktitle> <address> p385-400, </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Section 4 describes some theorems about real-time properties which have been proven using the new specification and Section 5 concludes the paper and discusses future directions of work. 2 The Real-time State Transition Model The formal model we use is an extension to the model presented in <ref> [11] </ref>. We will briey describe the basic model and then describe the real-time extensions. 2.1 Basic Model The basic model formalizes the operation of a set of concurrent workers, where a worker may be a process, processor, network interface unit, etc.
References-found: 11

