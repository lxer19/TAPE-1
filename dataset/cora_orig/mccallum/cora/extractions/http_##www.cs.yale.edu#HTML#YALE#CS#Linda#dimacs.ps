URL: http://www.cs.yale.edu/HTML/YALE/CS/Linda/dimacs.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/Linda/linda-prog-builder.html
Root-URL: http://www.cs.yale.edu
Title: A Program Building Tool for Parallel Applications  
Author: Shakil Ahmed, Nicholas Carriero and David Gelernter 
Address: New Haven, CT.  
Note: This research is supported by National Science Foundation grant CCR-8657615, by the Air Force Office of Scientific Research under grant number AFOSR-91-0098, and by Scientific Computing Associates, New Haven. Linda is a registered trademark of Scientific  
Date: December 1, 1993  
Affiliation: Department of Computer Science Yale University  Computing Associates,  
Abstract: We describe the Linda Program Builder | a higher-level programming environment that supports the design and development of parallel software. It isolates much of the administrative effort in constructing parallel programs, and maintains a program-describing database. This database feeds information to the compiler for optimization, to a visualizer for enhanced program visualization, and potentially to other tools in the environment. The LPB is a window-oriented, menu-based, user-friendly system which provides coordination frameworks for program construction. These templates or coordination frameworks themselves can be custom-constructed by invoking a template-building template; most importantly, the LPB represents the idea of an "open" or "dynamic" preprocessor as an alternative to new programming languages . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Shakil Ahmed, Nicholas Carriero, and David Gelernter. </author> <title> The Linda Program Builder. </title> <booktitle> In Proc. Third Workshop Languages and Compilers for Parallelism (Irvine, 1990) (invited paper). Languages and Compilers for Parallel Computing II, </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction The Linda Program Builder (LPB) <ref> [1] </ref> [2] is a higher-level programming environment that aids in the design and development of parallel software. The LPB is an Epoch-based 1 , menu-driven, user-friendly system that supports incremental development of explicitly parallel C-Linda programs. <p> Many templates have already been implemented, but others may be added by using a special template-building template. Templates are expanded incrementally using buttons. Consider the master-worker template as an example. The master-worker paradigm is discussed in <ref> [1] </ref>, and we omit details here. A master process creates tasks. Worker processes operate in parallel, grabbing tasks as they become available and generating results for a task when they are done with it. The master process gathers these sub-results and determines the final result.
Reference: [2] <author> Shakil Ahmed and David Gelernter. </author> <title> A CASE Environment for Parallel Programming. </title> <booktitle> In Proceedings of the Fifth International Workshop on Computer-Aided Software Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> July 6-10 </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The Linda Program Builder (LPB) [1] <ref> [2] </ref> is a higher-level programming environment that aids in the design and development of parallel software. The LPB is an Epoch-based 1 , menu-driven, user-friendly system that supports incremental development of explicitly parallel C-Linda programs.
Reference: [3] <author> R. Bahlke and G. Snelting. </author> <title> The PSG System: From Formal Language Definitions to Interactive Programming Environments. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <month> October </month> <year> 1986. </year>
Reference-contexts: Other structure editor systems that are similar to the Cornell Program Synthesizer include Aloe [12] under Gandalf [17], MENTOR [16], CENTAUR [6] and IPSEN [22]. Like the LPB, KBEmacs [35] also used an Emacs-like environment with a higher-level programming environment on top. PSG <ref> [3] </ref> allows both structure and text editing, although the dynamic semantics of the language are defined in a functional language which is used to interpret the programs.
Reference: [4] <author> Paul A. Bercovitz and Nicholas J. Carriero. TupleScope: </author> <title> A Graphical Monitor and Debugger for Linda-Based Parallel Programs. </title> <type> Research Report 782, </type> <institution> Yale University Department of Computer Science, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: In manipulating a very large list with ten thousand insert and delete node operations on a Sparcstation 10, the v2.4d compiler required 50.51 seconds. The LPB-optimized compiler ran the same sequence in 27.13 seconds. This was, again, consistent with expectations. 3.2 Program visualization The Tuplescope visualizer <ref> [4] </ref> is a graphical monitoring tool that presents a dynamic image of an executing Linda program. Tuples are represented on the screen and their movement to and from tuple space is displayed as the program executes. <p> Pigsty is based on CSP and Pascal, and currently limited to single processes and one-dimensional arrays of processes. Since the LPB can convey semantic information to a graphical monitoring tool <ref> [4] </ref>, programmers can visualize dynamic information at a higher abstraction level than would otherwise be possible. There has been much work in the general area of visual systems such as PECAN [25], Garden [26], Use.It [18], PegaSys, [23], PICT/D [15], ThinkPad [29], or PT [20].
Reference: [5] <author> R. Bjornson, N. Carriero, D. Gelernter, D. Kaminsky, T. Mattson, and A. Sher-man. </author> <title> Experience With Linda. </title> <type> Research Report 866, </type> <institution> Yale University Department of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: The information associated with each partition is color-coded according to partition type and variable status. In the long run, the various templates the LPB offers could each have unique representations in Tuplescope. Piranha programs <ref> [5] </ref>, for example, all follow a particular pattern which is related to general master-worker programs. The LPB is aware of what constitutes a Piranha program and which processes are "feeder" and "piranha" processes. The current implementation of Tuplescope was not designed with the LPB in mind.
Reference: [6] <author> P. Borras, D. Clement, Th. Despeyroux, J. Incerpi, G. Kahn, B. Lang, and V. Pascual. </author> <title> CENTAUR: the system. </title> <journal> ACM SIGPLAN Notices 24, </journal> <volume> 2, </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: What the LPB produces is source code, and the programmer is free to ignore or modify this as desired. This flexibility is essential to any expert programmer. Other structure editor systems that are similar to the Cornell Program Synthesizer include Aloe [12] under Gandalf [17], MENTOR [16], CENTAUR <ref> [6] </ref> and IPSEN [22]. Like the LPB, KBEmacs [35] also used an Emacs-like environment with a higher-level programming environment on top. PSG [3] allows both structure and text editing, although the dynamic semantics of the language are defined in a functional language which is used to interpret the programs.
Reference: [7] <author> Nicholas Carriero and David Gelernter. </author> <title> How to Write Parallel Programs. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The LPB offers similar features, but doesn't impose them. The LPB captures organizing strategies for parallel programs and basic coordination frameworks. The basis for the "coordination framework" approach to parallel programming is presented in <ref> [7] </ref>. This method focuses on three main paradigms, called "specialist", "result", and "agenda" parallelism. The most important features of the LPB are its support of templates and high-level operations, and its construction of a program database.
Reference: [8] <author> Nicholas Carriero and David Gelernter. </author> <title> A Foundation for Advanced Compile-time Analysis of Linda Programs. </title> <type> Technical report, </type> <institution> Yale University Department of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: This allows the system to maintain semantic as well as syntactic information on the programs being developed. This information is used for guiding program development, for checking consistency, for 18 documentation purposes, for providing optimizing information to the compiler <ref> [8] </ref>, for enhancing graphical monitoring, and potentially also for benchmarking utilities to visualize performance in the spirit of [19]. There is currently much research effort in visualizing the dynamic behavior of parallel programs. [21] is a good example.
Reference: [9] <author> Nicholas J. Carriero and David H. Gelernter. </author> <title> Linda in Context. </title> <journal> Communications of the ACM, </journal> <month> April </month> <year> 1989. </year>
Reference-contexts: Linda itself has been extensively discussed in previous work, so we will not describe it here. <ref> [9] </ref> is a representative paper. Two important points respecting the LPB's relationship to Linda are important, though. (1) Nothing about the "parallel program builder" approach restricts it to Linda.
Reference: [10] <author> G. Clemm and L. Osterweil. </author> <title> A Mechanism for Environment Integration. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <month> January </month> <year> 1990. </year>
Reference-contexts: Like the LPB, KBEmacs [35] also used an Emacs-like environment with a higher-level programming environment on top. PSG [3] allows both structure and text editing, although the dynamic semantics of the language are defined in a functional language which is used to interpret the programs. Odin <ref> [10] </ref> investigates the idea that tools should be centered around a persistent centralized store of software objects, and Arcadia [34] is a large project investigating various issues involving an object management system.
Reference: [11] <author> John D. Evans and Robert R. Kessler. </author> <title> A Metalanguage and Programming Environment for Parallel Processing. LISP and Symbolic Computation: </title> <note> An International Journal, 1991. 21 </note>
Reference-contexts: There is currently much research effort in visualizing the dynamic behavior of parallel programs. [21] is a good example. DPOS <ref> [11] </ref> uses a metalanguage to define networks and provides a set of tools for visualizing and debugging. [24] is an interactive graphical environment for concurrent programming, using a specially-designed graphical language, Pigsty. Pigsty is based on CSP and Pascal, and currently limited to single processes and one-dimensional arrays of processes.
Reference: [12] <author> P.H. Feiler and R. Medina-Mora. </author> <title> An Incremental Programming Environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> September </month> <year> 1981. </year>
Reference-contexts: What the LPB produces is source code, and the programmer is free to ignore or modify this as desired. This flexibility is essential to any expert programmer. Other structure editor systems that are similar to the Cornell Program Synthesizer include Aloe <ref> [12] </ref> under Gandalf [17], MENTOR [16], CENTAUR [6] and IPSEN [22]. Like the LPB, KBEmacs [35] also used an Emacs-like environment with a higher-level programming environment on top.
Reference: [13] <author> Scott Fertig and David Gelernter. </author> <title> A Software Architecture for Acquiring Knowledge from Cases. </title> <booktitle> In Proc. of the International Joint Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: We have developed an expert database system with exactly the right capabilities in principle <ref> [13] </ref>; retargeting it to the LPB is research for the near future. The LPB language features are user-extensible in a number of ways. The template-building template is a mechanism to add new specialized operations and new frameworks for program construction. <p> The LPB's knowledge of program structure is characteristic of an expert-database approach to intelligent program development. The program database contains information that could be very useful in identifying program types and structures. Fertig has built an appropriate expert database system <ref> [13] </ref>. 6 Related work The LPB's most important template-based structure editor predecessor is the Cor-nell Program Synthesizer [28]. Unlike the synthesizer, however, the LPB does not enforce a rigid framework. Instead, the LPB captures methodologies and supports them, without imposing a strategy.
Reference: [14] <author> Mary Jo Foley. </author> <title> Can We Talk. </title> <address> SunExpert, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: There has been much work in the general area of visual systems such as PECAN [25], Garden [26], Use.It [18], PegaSys, [23], PICT/D [15], ThinkPad [29], or PT [20]. Some commercial environments such as HP's Softbench, ParcPlace C ++ , Lucid's Energize, or DEC's FUSE <ref> [14] </ref> use techniques similar to the ones in the systems mentioned above. 7 Conclusions The LPB supports basic tuple operations as well as higher-level functions, and offers complete templates and program structures. It captures programming methodologies and guides the user through program development.
Reference: [15] <author> E.P. Glinert and S.L. Tanimoto. </author> <title> Pict: An Interactive Graphical Programming Environment. </title> <booktitle> Computer, </booktitle> <month> November </month> <year> 1984. </year>
Reference-contexts: There has been much work in the general area of visual systems such as PECAN [25], Garden [26], Use.It [18], PegaSys, [23], PICT/D <ref> [15] </ref>, ThinkPad [29], or PT [20].
Reference: [16] <author> V. Donzeque gouge et al. </author> <title> Programming Environments based on Structured Editors: The Mentor Experience. In Interactive Programming Environments, </title> <editor> Barstow, Shrobe and Sandewall. </editor> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: What the LPB produces is source code, and the programmer is free to ignore or modify this as desired. This flexibility is essential to any expert programmer. Other structure editor systems that are similar to the Cornell Program Synthesizer include Aloe [12] under Gandalf [17], MENTOR <ref> [16] </ref>, CENTAUR [6] and IPSEN [22]. Like the LPB, KBEmacs [35] also used an Emacs-like environment with a higher-level programming environment on top.
Reference: [17] <author> A.N. Habermann and D. Notkin. </author> <title> Gandalf: Software Development Environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> December </month> <year> 1986. </year>
Reference-contexts: What the LPB produces is source code, and the programmer is free to ignore or modify this as desired. This flexibility is essential to any expert programmer. Other structure editor systems that are similar to the Cornell Program Synthesizer include Aloe [12] under Gandalf <ref> [17] </ref>, MENTOR [16], CENTAUR [6] and IPSEN [22]. Like the LPB, KBEmacs [35] also used an Emacs-like environment with a higher-level programming environment on top.
Reference: [18] <author> M. Hamilton and S. Zeldin. </author> <title> Higher Order Software Methodology for Defining Software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> March </month> <year> 1976. </year>
Reference-contexts: Since the LPB can convey semantic information to a graphical monitoring tool [4], programmers can visualize dynamic information at a higher abstraction level than would otherwise be possible. There has been much work in the general area of visual systems such as PECAN [25], Garden [26], Use.It <ref> [18] </ref>, PegaSys, [23], PICT/D [15], ThinkPad [29], or PT [20].
Reference: [19] <author> Michael T. Heath and Jennifer A. Etheridge. </author> <title> Visualizing the Performance of Parallel Programs. </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: This information is used for guiding program development, for checking consistency, for 18 documentation purposes, for providing optimizing information to the compiler [8], for enhancing graphical monitoring, and potentially also for benchmarking utilities to visualize performance in the spirit of <ref> [19] </ref>. There is currently much research effort in visualizing the dynamic behavior of parallel programs. [21] is a good example.
Reference: [20] <author> Hsia and Amber. </author> <title> Programming through Pictorial Transformations. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Languages 1988. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: There has been much work in the general area of visual systems such as PECAN [25], Garden [26], Use.It [18], PegaSys, [23], PICT/D [15], ThinkPad [29], or PT <ref> [20] </ref>. Some commercial environments such as HP's Softbench, ParcPlace C ++ , Lucid's Energize, or DEC's FUSE [14] use techniques similar to the ones in the systems mentioned above. 7 Conclusions The LPB supports basic tuple operations as well as higher-level functions, and offers complete templates and program structures.
Reference: [21] <author> James A. Kohl and Thomas L. Casavant. </author> <title> Use of PARADISE: A Meta-Tool for Visualizing Parallel Systems. </title> <booktitle> In Proceedings of the Fifth International Parallel Processing Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April 30 May 2 </month> <year> 1991. </year>
Reference-contexts: There is currently much research effort in visualizing the dynamic behavior of parallel programs. <ref> [21] </ref> is a good example. DPOS [11] uses a metalanguage to define networks and provides a set of tools for visualizing and debugging. [24] is an interactive graphical environment for concurrent programming, using a specially-designed graphical language, Pigsty.
Reference: [22] <author> Claus Lewerentz. </author> <title> Extended Programming in the Large in a Software Development Environment. </title> <journal> ACM SIGPLAN Notices 24,2, </journal> <month> February </month> <year> 1989. </year>
Reference-contexts: This flexibility is essential to any expert programmer. Other structure editor systems that are similar to the Cornell Program Synthesizer include Aloe [12] under Gandalf [17], MENTOR [16], CENTAUR [6] and IPSEN <ref> [22] </ref>. Like the LPB, KBEmacs [35] also used an Emacs-like environment with a higher-level programming environment on top. PSG [3] allows both structure and text editing, although the dynamic semantics of the language are defined in a functional language which is used to interpret the programs.
Reference: [23] <author> M. Moriconi and D.F. Hare. </author> <title> The PegaSys System: Pictures as Formal Documentation of Large Programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <month> October </month> <year> 1986. </year>
Reference-contexts: Since the LPB can convey semantic information to a graphical monitoring tool [4], programmers can visualize dynamic information at a higher abstraction level than would otherwise be possible. There has been much work in the general area of visual systems such as PECAN [25], Garden [26], Use.It [18], PegaSys, <ref> [23] </ref>, PICT/D [15], ThinkPad [29], or PT [20].
Reference: [24] <author> M.-C. Pong. I-Pigs: </author> <title> an Interactive Graphical Environment for Concurrent Programming. </title> <journal> The Computer Journal, </journal> <month> August </month> <year> 1991. </year>
Reference-contexts: There is currently much research effort in visualizing the dynamic behavior of parallel programs. [21] is a good example. DPOS [11] uses a metalanguage to define networks and provides a set of tools for visualizing and debugging. <ref> [24] </ref> is an interactive graphical environment for concurrent programming, using a specially-designed graphical language, Pigsty. Pigsty is based on CSP and Pascal, and currently limited to single processes and one-dimensional arrays of processes.
Reference: [25] <author> S.P. Reiss. </author> <title> Pecan: Program Development Systems that Support Multiple Views. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> March </month> <year> 1985. </year> <month> 22 </month>
Reference-contexts: Since the LPB can convey semantic information to a graphical monitoring tool [4], programmers can visualize dynamic information at a higher abstraction level than would otherwise be possible. There has been much work in the general area of visual systems such as PECAN <ref> [25] </ref>, Garden [26], Use.It [18], PegaSys, [23], PICT/D [15], ThinkPad [29], or PT [20].
Reference: [26] <author> S.P. Reiss. </author> <title> Garden Tools: Support for Graphical Programming. </title> <booktitle> In Advanced Programming Environments, Lecture Notes in Computer Science Nr.244. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Since the LPB can convey semantic information to a graphical monitoring tool [4], programmers can visualize dynamic information at a higher abstraction level than would otherwise be possible. There has been much work in the general area of visual systems such as PECAN [25], Garden <ref> [26] </ref>, Use.It [18], PegaSys, [23], PICT/D [15], ThinkPad [29], or PT [20].
Reference: [27] <author> Thomas Reps and Tim Teitelbaum. </author> <title> The Synthesizer Generator : a System for Constructing Language-based Editors. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: An experienced programmer may choose to bypass many of the point-and-click facilities of the LPB. There have been many template-editor predecessors to the 1 Epoch is a multi-window version of emacs developed by S. Kaplan of the University of Illinois, Urbana 2 LPB, notably the Cornell Program Synthesizer <ref> [27] </ref>, but on the whole, they impose rigid frameworks which the programmer is forced to follow. Requiring the programmer to follow an imposed template guarantees syntactic correctness, but may cramp a creative programmer's style by restricting his flexibility. The LPB offers similar features, but doesn't impose them.
Reference: [28] <author> Thomas Reps and Tim Teitelbaum. </author> <title> The Synthesizer Generator Reference Manual. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The program database contains information that could be very useful in identifying program types and structures. Fertig has built an appropriate expert database system [13]. 6 Related work The LPB's most important template-based structure editor predecessor is the Cor-nell Program Synthesizer <ref> [28] </ref>. Unlike the synthesizer, however, the LPB does not enforce a rigid framework. Instead, the LPB captures methodologies and supports them, without imposing a strategy. What the LPB produces is source code, and the programmer is free to ignore or modify this as desired.
Reference: [29] <author> R.V. Rubin, E.J. Golin, and S.P. Reiss. ThinkPad: </author> <title> A Graphical System for Programming by Demonstration. </title> <journal> IEEE Software, </journal> <month> March </month> <year> 1985. </year>
Reference-contexts: There has been much work in the general area of visual systems such as PECAN [25], Garden [26], Use.It [18], PegaSys, [23], PICT/D [15], ThinkPad <ref> [29] </ref>, or PT [20].
Reference: [30] <author> Jonathon Schaeffer, Duane Szafron, Greg Lobe, and Ian Parsons. </author> <title> The Enterprise Model for Developing Distributed Applications. </title> <type> Research Report, </type> <institution> Department of Computer Science, University of Alberta, </institution> <year> 1993. </year>
Reference-contexts: Odin [10] investigates the idea that tools should be centered around a persistent centralized store of software objects, and Arcadia [34] is a large project investigating various issues involving an object management system. An interesting approach is taken by Enterprise <ref> [30] </ref>, which expresses parallelism graphically, thus specifying communication and synchronization through a different medium. Extensible parallel programming environments such as SIGMACS [31] generate a program database during compile time that can be used in later modifications to the program.
Reference: [31] <author> Bruce Shei and Dennis Gannon. </author> <title> SIGMACS A Programmable Programming Environment. </title> <booktitle> In Proc. Third Workshop Languages and Compilers for Parallelism (Irvine, 1990). Languages and Compilers for Parallel Computing II, </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: An interesting approach is taken by Enterprise [30], which expresses parallelism graphically, thus specifying communication and synchronization through a different medium. Extensible parallel programming environments such as SIGMACS <ref> [31] </ref> generate a program database during compile time that can be used in later modifications to the program. The LPB, on the other hand, maintains a dynamic program-describing database that grows as the program is constructed.
Reference: [32] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1986. </year>
Reference-contexts: This level of extensibility distinguishes the LPB from preprocessors (such as C ++ in preprocessor guise <ref> [32] </ref>) that implement complete and self-contained languages. 5 Future work The integration of the LPB with the compiler and Tuplescope is promising, but not as complete or developed as it could be.
Reference: [33] <author> Daniel C. Swinehart, Polle T. Zellweger, Richard J. Beach, and Robert B. Hagmann. </author> <title> A Structural View of the Cedar Programming Environment. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <pages> pages 419-490, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: This allows the programmer to concentrate on hierarchical program construction at a high level, and to deal with "blocks" of code represented by abstractions. Abstractions in the LPB are somewhat similar to the Cedar <ref> [33] </ref> approach in its Tioga structured text-editor. Tioga treats documents in a tree-structured manner where each node is a paragraph or a statement. This hierarchical node structure allows detail to be concealed in the interests of a conceptually higher-level view, much as in the LPB.
Reference: [34] <author> R.N. Taylor, F.C. Belz, L.A. Clarke, L. Osterweil, R.W. Selby, J.C. Wileden, A.L. Wolf, and M. Young. </author> <title> Foundations for the Arcadia Environment Architecture. </title> <journal> ACM SIGPLAN Notices 24, </journal> <volume> 2, </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: PSG [3] allows both structure and text editing, although the dynamic semantics of the language are defined in a functional language which is used to interpret the programs. Odin [10] investigates the idea that tools should be centered around a persistent centralized store of software objects, and Arcadia <ref> [34] </ref> is a large project investigating various issues involving an object management system. An interesting approach is taken by Enterprise [30], which expresses parallelism graphically, thus specifying communication and synchronization through a different medium.
Reference: [35] <author> R.C. Waters. </author> <title> The Programmer's Apprentice: A Session with KBEmacs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> November </month> <year> 1985. </year> <month> 23 </month>
Reference-contexts: This flexibility is essential to any expert programmer. Other structure editor systems that are similar to the Cornell Program Synthesizer include Aloe [12] under Gandalf [17], MENTOR [16], CENTAUR [6] and IPSEN [22]. Like the LPB, KBEmacs <ref> [35] </ref> also used an Emacs-like environment with a higher-level programming environment on top. PSG [3] allows both structure and text editing, although the dynamic semantics of the language are defined in a functional language which is used to interpret the programs.
References-found: 35

