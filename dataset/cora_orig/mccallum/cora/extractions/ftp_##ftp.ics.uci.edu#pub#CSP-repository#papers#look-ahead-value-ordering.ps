URL: ftp://ftp.ics.uci.edu/pub/CSP-repository/papers/look-ahead-value-ordering.ps
Refering-URL: http://www.ics.uci.edu/~mlearn/MLPapers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fdfrost, dechterg@ics.uci.edu  
Title: Look-ahead value ordering for constraint satisfaction problems  
Author: Daniel Frost and Rina Dechter 
Address: Irvine, CA 92717-3425 U.S.A.  
Affiliation: Dept. of Information and Computer Science University of California,  
Abstract: Looking ahead during search is often useful when solving constraint satisfaction problems. Previous studies have shown that looking ahead helps by causing dead-ends to occur earlier in the search, and by providing information that is useful for dynamic variable ordering. In this paper, we show that another benefit of looking ahead is a useful domain value ordering heuristic, which we call look-ahead value ordering or LVO. LVO counts the number of times each value of the current variable conflicts with some value of a future variable, and the value with the lowest number of conflicts is chosen first. Our experiments show that look-ahead value ordering can be of substantial benefit, especially on hard constraint satisfaction prob lems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Cheeseman, Bob Kanefsky, and William M. Taylor. </author> <title> Where the really hard problems are. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 331-337, </pages> <year> 1991. </year>
Reference-contexts: The specific constraints are chosen randomly from a uniform distribution. Certain combinations of parameters generate problems of which about 50% are satisfiable; such problems are on average much more difficult than those which all have solutions (under-constrained) or which never have solutions (over-constrained) <ref> [ 1; 7 ] </ref> . Such a set of parameters is sometimes called a cross-over point.
Reference: [2] <author> Rina Dechter. </author> <title> Enhancement Schemes for Constraint Processing: Backjumping, Learning, and Cutset Decomposition. </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <pages> 273-312, </pages> <year> 1990. </year>
Reference-contexts: Previous experiments have shown that this combination is extremely effective over a wide range of problems [ 4 ] . LVO (or any other heuristic) is of practical interest only if it improves upon the performance of state of the art algorithms. Backjumping Backjumping <ref> [ 5; 2 ] </ref> is an improvement to backtracking which takes advantage of sparseness and structure in the constraint graph.
Reference: [3] <author> Rina Dechter and Judea Pearl. </author> <title> Network-based heuristics for constraint-satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 34 </volume> <pages> 1-38, </pages> <year> 1987. </year>
Reference-contexts: Pearl [ 8 ] discusses similar value ordering heuristics in the context of the 8-Queens problem. His "highest number of unattacked cells" is the same as our max-conflicts heuris-tic, and his "row with the least number of unattacked cells" heuristic is the same as max-domain-size. Dechter and Pearl <ref> [ 3 ] </ref> developed an Advised Backtrack algorithm which estimates the number of solutions in the subproblem created by instantiating each value. The estimate is based on a tree-like relaxation of the remainder of the problem. <p> We have tested LVO using a forward checking level of look-ahead. We plan to explore the possibility that a more compu-tationally expensive scheme, such as partial look-ahead or full look-ahead [ 6 ] or directional arc consistency <ref> [ 3 ] </ref> , will pay off in the increased accuracy of the value ordering. Another research direction is to reduce the overhead of LVO on easy problems.
Reference: [4] <author> Daniel Frost and Rina Dechter. </author> <title> In search of the best constraint satisfaction search. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 301-306, </pages> <year> 1994. </year>
Reference-contexts: Previous experiments have shown that this combination is extremely effective over a wide range of problems <ref> [ 4 ] </ref> . LVO (or any other heuristic) is of practical interest only if it improves upon the performance of state of the art algorithms. Backjumping Backjumping [ 5; 2 ] is an improvement to backtracking which takes advantage of sparseness and structure in the constraint graph. <p> This scheme gives substantially better performance than picking one of the tying variables at random. Look-ahead value ordering Backjumping and dynamic variable ordering can be combined into an algorithm we call BJ+DVO <ref> [ 4 ] </ref> . The BJ+DVO algorithm does not specify how to choose a Backjumping with DVO and LVO Inputs: A set of n variables, X 1 ; . . . ; X n ; For each X i , a set D i of possible values (the domain). <p> Each set of parameters produced problems near the 50% cross-over point. value. In our experiments reported in <ref> [ 4 ] </ref> , and in this paper when we refer to "plain" BJ+DVO, values are arbitrarily assigned a sequence number, and are selected according to this sequence.
Reference: [5] <author> J. Gaschnig. </author> <title> Performance measurement and analysis of certain search algorithms. </title> <type> Technical Report CMU-CS-79-124, </type> <institution> Carnegie Mellon University, </institution> <year> 1979. </year>
Reference-contexts: Previous experiments have shown that this combination is extremely effective over a wide range of problems [ 4 ] . LVO (or any other heuristic) is of practical interest only if it improves upon the performance of state of the art algorithms. Backjumping Backjumping <ref> [ 5; 2 ] </ref> is an improvement to backtracking which takes advantage of sparseness and structure in the constraint graph.
Reference: [6] <author> R. M. Haralick and G. L. Elliott. </author> <title> Increasing Tree Search Efficiency for Constraint Satisfaction Problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 263-313, </pages> <year> 1980. </year>
Reference-contexts: Interestingly, LVO often improves the performance of backjumping on problems without solutions, as well. Look-ahead value ordering does the same type of look-ahead as does the forward checking algorithm <ref> [ 6 ] </ref> . Because forward checking rejects values that it determines will not lead to a solution, it can be viewed as doing a simple form of value ordering. In this regard LVO is more refined, because it also orders the values that may be part of a solution. <p> Look-back methods consider each element in D i and check to ensure that no constraints with earlier variables are violated. There are also several look-ahead approaches, the simplest being forward checking <ref> [ 6 ] </ref> . When assigning a value to the current variable, forward checking removes values from the domains of future variables that conflict with that value. We will refer to the subset of D i that has incompatible values removed as D 0 i . <p> Dynamic variable ordering In a dynamic variable ordering (DVO) scheme <ref> [ 6; 10; 12 ] </ref> the order of variables can be different in different branches of the search tree. Our implementation of DVO uses information derived from a forward checking style look-ahead. At each step the variable with the smallest remaining domain size is selected. <p> Unexpectedly, it even helps on problems without solutions when used in conjunction with backjumping. We have tested LVO using a forward checking level of look-ahead. We plan to explore the possibility that a more compu-tationally expensive scheme, such as partial look-ahead or full look-ahead <ref> [ 6 ] </ref> or directional arc consistency [ 3 ] , will pay off in the increased accuracy of the value ordering. Another research direction is to reduce the overhead of LVO on easy problems.
Reference: [7] <author> David Mitchell, Bart Selman, and Hector Levesque. </author> <title> Hard and Easy Distributions of SAT Problems. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 459-465, </pages> <year> 1992. </year>
Reference-contexts: The specific constraints are chosen randomly from a uniform distribution. Certain combinations of parameters generate problems of which about 50% are satisfiable; such problems are on average much more difficult than those which all have solutions (under-constrained) or which never have solutions (over-constrained) <ref> [ 1; 7 ] </ref> . Such a set of parameters is sometimes called a cross-over point.
Reference: [8] <author> Judea Pearl. </author> <title> Heuristics. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1985. </year>
Reference-contexts: Pearl <ref> [ 8 ] </ref> discusses similar value ordering heuristics in the context of the 8-Queens problem. His "highest number of unattacked cells" is the same as our max-conflicts heuris-tic, and his "row with the least number of unattacked cells" heuristic is the same as max-domain-size.
Reference: [9] <author> Patrick Prosser. </author> <title> Hybrid Algorithms for the Constraint Satisfaction Problem. </title> <journal> Computational Intelligence, </journal> <volume> 9(3) </volume> <pages> 268-299, </pages> <year> 1993. </year>
Reference-contexts: If X cur has no such non-conflicting value, then a dead-end occurs. The version of backjumping we use, based on Prosser's conflict-directed backjumping <ref> [ 9 ] </ref> , is very effective in choosing the best variable to jump back to. There are two basic ways to determine which values in D i are consistent with all variables before X i .
Reference: [10] <author> Paul Walton Purdom. </author> <title> Search Rearrangement Backtracking and Polynomial Average Time. </title> <journal> Artificial Intelligence, </journal> <volume> 21 </volume> <pages> 117-133, </pages> <year> 1983. </year>
Reference-contexts: Dynamic variable ordering In a dynamic variable ordering (DVO) scheme <ref> [ 6; 10; 12 ] </ref> the order of variables can be different in different branches of the search tree. Our implementation of DVO uses information derived from a forward checking style look-ahead. At each step the variable with the smallest remaining domain size is selected.
Reference: [11] <author> Norman Sadeh and Mark S. Fox. </author> <title> Variable and Value Ordering Heuristics for Activity-based Job-shop Scheduling. </title> <booktitle> In Proceedings of the Fourth International Conference on Expert Systems in Production and Operations Management, </booktitle> <pages> pages 134-144, </pages> <year> 1990. </year>
Reference-contexts: For each value, the number of solutions is counted, and the count is used to rank the values. Advised Backtrack was the first implementation of the general idea that heuristics can be generated from a relaxed version of the problem instance. Sadeh and Fox <ref> [ 11 ] </ref> also use a tree-like relaxation of the remaining problem, in the context of job-shop scheduling problems.
Reference: [12] <author> Ramin Zabih and David McAllester. </author> <title> A Rearrangement Search Strategy for Determining Propositional Satisfiability. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 155-160, </pages> <year> 1988. </year>
Reference-contexts: Dynamic variable ordering In a dynamic variable ordering (DVO) scheme <ref> [ 6; 10; 12 ] </ref> the order of variables can be different in different branches of the search tree. Our implementation of DVO uses information derived from a forward checking style look-ahead. At each step the variable with the smallest remaining domain size is selected.
References-found: 12

