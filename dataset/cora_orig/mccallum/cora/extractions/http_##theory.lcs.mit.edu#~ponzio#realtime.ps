URL: http://theory.lcs.mit.edu/~ponzio/realtime.ps
Refering-URL: http://theory.lcs.mit.edu/~ponzio/realtime.html
Root-URL: 
Email: ponzio@theory.lcs.mit.edu  strong@almaden.ibm.com  
Phone: 2  
Title: Semisynchrony and Real Time Extended abstract  
Author: Stephen Ponzio and Ray Strong 
Address: 545 Technology Sq., Cambridge, MA 02139,  650 Harry Rd., San Jose, CA 95120-6099  
Affiliation: 1 MIT Laboratory for Computer Science,  IBM Almaden Research Center,  
Abstract: This paper represents the confluence of several streams of research on the real time complexity of distributed algorithms. The primary focus of our study is on two models and two problems: the timed automata model of Attiya and Lynch and the ("latency") model of approximately synchronized clocks studied by Strong et. al., and the problems of consensus and atomic broadcast. We compare these models and problems, producing new results and significant improvements of previously known bounds. In particular, we are able to significantly improve the upper bound of Strong, Dolev, and Cristian on latency for Byzan-tine failures, giving an algorithm that is much simpler with vastly easier analysis. For this problem, we also improve the best known lower bound on latency. We also provide certain reductions between problems and models and provide preliminary answers to some new questions in the timed automata model.
Abstract-found: 1
Intro-found: 1
Reference: [ADKM92] <author> Y. Amir, D. Dolev, S. Kramer and D. Malki. </author> <title> Total ordering of messages in broadcast domains. </title> <type> Manuscript. </type>
Reference-contexts: Although there is a vast literature on the problem of atomic broadcast (e.g., <ref> [CM84, BJ87, MMA90, MMA91, ADKM92] </ref>), we know of no work that focuses on the real time complexity of this problem when processors are not fully synchronous. Surprisingly, there is no simple algorithm for solving atomic broadcast in the TA model (even inefficiently).
Reference: [ADLS90] <author> H. Attiya, C. Dwork, N. Lynch, and L. Stockmeyer. </author> <title> Bounds on the time to reach agreement in the presence of timing uncertainty. </title> <address> MIT/LCS/TM-435, </address> <month> November </month> <year> 1990. </year> <note> Also: STOC 1991. </note>
Reference-contexts: Each processor simulates round i by waiting until for each processor q, p has either received a round i 1 message from q or has detected the failure of q. Each round then takes approximately time Cd + d to simulate. The goal of the work of <ref> [ADLS90, P91] </ref> is to quantify the effect of semisynchrony on the real-time complexity of distributed computing problems: given a system with parameters c 1 ; c 2 ; d, what are tight upper and lower bounds on the real time required for these problems? 2.2 Model AC: Approximately synchronized clocks A <p> To simulate a round-based algorithm starting at clock time t, each processor waits until time t + i (d AC + e) on its clock to receive round i messages and then sends its round i + 1 message. 2.3 Consensus This version was studied in <ref> [ADLS90, P91] </ref>. It is the standard classical binary consensus problem: each processor has a one-bit input and all correct processors must agree on a one-bit output which is equal to the input if all inputs are equal. <p> We measure running time as the difference between the real time at which the last correct processor decides on a value and the real time at which the first correct processor gets its input. Note that this definition applies to all failure models. (The algorithms from <ref> [ADLS90] </ref> and [P91] work for x &gt; 0 with little or no modifications.) 6 This ratio is equivalent to "(1+) 2 " in [ST87, LL88, DHSS89] and "1+" in [SDC90]. 2.4 Atomic broadcast This version was studied in [CASD86, SDC90, GSTC90]. <p> This fails to improve the latency of the simple message-diffusion algorithm of [CASD86]. Indeed, even if we translate the efficient consensus algorithm of <ref> [ADLS90] </ref>, the resulting latency is 2f d AC +Ad AC +e, which is also worse than [CASD86]. We remark that the algorithm of [ADLS90] can be viewed as an optimized simulation of a synchronous early-stopping consensus algorithm with a special property regarding the circumstances under which a processors must advance to <p> This fails to improve the latency of the simple message-diffusion algorithm of [CASD86]. Indeed, even if we translate the efficient consensus algorithm of <ref> [ADLS90] </ref>, the resulting latency is 2f d AC +Ad AC +e, which is also worse than [CASD86]. We remark that the algorithm of [ADLS90] can be viewed as an optimized simulation of a synchronous early-stopping consensus algorithm with a special property regarding the circumstances under which a processors must advance to successive rounds (see [P91]).
Reference: [AL89] <author> H. Attiya and N. A. Lynch. </author> <title> Time bounds for real-time process control in the presence of timing uncertainty. </title> <booktitle> Proc. 10th IEEE Real-Time Systems Symposium, </booktitle> <year> 1989, </year> <pages> pp. 268-284. </pages> <note> Also: MIT/LCS/TM-403, </note> <month> July </month> <year> 1989. </year>
Reference: [BJ87] <author> K. Birman and T. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM TOCS, </journal> <volume> Vol. 5, No. </volume> <month> 1 (February </month> <year> 1987), </year> <pages> pp. 47-76. </pages>
Reference-contexts: Although there is a vast literature on the problem of atomic broadcast (e.g., <ref> [CM84, BJ87, MMA90, MMA91, ADKM92] </ref>), we know of no work that focuses on the real time complexity of this problem when processors are not fully synchronous. Surprisingly, there is no simple algorithm for solving atomic broadcast in the TA model (even inefficiently).
Reference: [BGT90] <author> N. Budhiraja, A. Gopal and S. Toueg. </author> <title> Early-stopping distributed bidding with applications. </title> <booktitle> Proc. 4th Int'l. </booktitle> <month> WDAG </month> <year> 1990. </year>
Reference-contexts: The total latency is then * + ((1 + 2A)f + 1)d AC + 2e, for any *. A less wasteful way to remove this assumption is to use a clever proto col developed in <ref> [BGT90] </ref> to synchronize the starting round of an agreement algorithm. 7 This protocol adds 3 (e+ d) to the latency.
Reference: [CASD86] <author> F. Cristian, H. Aghili, R. Strong and D. Dolev. </author> <title> Atomic broadcast: from simple message diffusion to Byzantine agreement. </title> <booktitle> Proc. 15th Int. Conf. on Fault Tolerant Computing, </booktitle> <year> 1985, </year> <pages> pp. 1-7. </pages> <note> Also: IBM Research Report RJ5244, revised October 1989. </note>
Reference-contexts: Note that this definition applies to all failure models. (The algorithms from [ADLS90] and [P91] work for x &gt; 0 with little or no modifications.) 6 This ratio is equivalent to "(1+) 2 " in [ST87, LL88, DHSS89] and "1+" in [SDC90]. 2.4 Atomic broadcast This version was studied in <ref> [CASD86, SDC90, GSTC90] </ref>. It is a dynamic problem in the sense that inputs arrive repeatedly and asynchronously. At any time, a processor may receive a binary input which must be broadcast to all other processors. <p> This definition is workable for omission failures, but it is not meaningful if a Byzantine processor delays acting on its input and then correctly executes the broadcast algorithm on that input; in this case the time cannot be bounded. In <ref> [CASD86] </ref>, this difficulty is resolved for the AC model by defining a time complexity measure called the latency. This measurement requires as part of the problem statement that when a processor initiates a message, it should attach its local time to the message. Definition 1. <p> This fails to improve the latency of the simple message-diffusion algorithm of <ref> [CASD86] </ref>. Indeed, even if we translate the efficient consensus algorithm of [ADLS90], the resulting latency is 2f d AC +Ad AC +e, which is also worse than [CASD86]. <p> This fails to improve the latency of the simple message-diffusion algorithm of <ref> [CASD86] </ref>. Indeed, even if we translate the efficient consensus algorithm of [ADLS90], the resulting latency is 2f d AC +Ad AC +e, which is also worse than [CASD86]. We remark that the algorithm of [ADLS90] can be viewed as an optimized simulation of a synchronous early-stopping consensus algorithm with a special property regarding the circumstances under which a processors must advance to successive rounds (see [P91]).
Reference: [CM84] <author> J. M. Chang and N. Maxemchuck. </author> <title> Reliable broadcast protocols. </title> <journal> ACM TOCS, </journal> <volume> Vol. 2, No. </volume> <month> 3 (August </month> <year> 1984), </year> <pages> pp. 251-273. </pages>
Reference-contexts: Although there is a vast literature on the problem of atomic broadcast (e.g., <ref> [CM84, BJ87, MMA90, MMA91, ADKM92] </ref>), we know of no work that focuses on the real time complexity of this problem when processors are not fully synchronous. Surprisingly, there is no simple algorithm for solving atomic broadcast in the TA model (even inefficiently).
Reference: [CD86] <author> B. A. Coan and C. Dwork. </author> <title> Simultaneity is harder than agreement. </title> <journal> Information and Computation Vol. </journal> <volume> 91, No. 2, </volume> <year> 1991. </year>
Reference-contexts: In this manner, we can remove any messages of up to f 1 processors in addition to processor 1. This is easily proved formally with a (standard) recursive proof (see <ref> [DS83, CD86, M85, DM86] </ref>). We finally arrive at an execution E 00 in which processor 1 omits m to all processors, completing the proof.
References-found: 8

