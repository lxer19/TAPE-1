URL: http://albertina.inesc.pt/ftp/pub/esw/mood/PAPERS/US_LETTER/tools96.ps
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Design of Eiffel Programs: Quantitative Evaluation Using the MOOD Metrics  
Author: Fernando Brito e Abreu Rita Esteves, Miguel Goulo 
Date: July 1996.  
Address: TOOLS96 USA, Santa Barbara, California,  
Affiliation: of  
Note: Originally published in Proceedings  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [Abreu93] <author> Abreu, F. Brito and Carapua, R., </author> <title> "Candidate Metrics for ObjectOriented Software within a Taxonomy Framework", Proceedings of AQUIS'93 (Achieving QUality In Software), Venice, Italy, </title> <journal> October 1993; selected for reprint in Journal of Systems and Software, </journal> <volume> Vol. 23 (1), pp.87-96, </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: Design metrics can be used for this purpose, as will be seen in this paper. Several research works in the OO design metrics arena were produced in recent years [Dumke95] [Sellers95] [Campanai94] [Cant94] [Chidamber94] [Hopkins94] <ref> [Abreu93] </ref>. However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap. A former paper [Abreu94] proposed the MOOD (Metrics for Object Oriented Design) set of metrics.
Reference: [Abreu94] <author> Abreu, F. Brito and Carapua R., </author> <title> "Object-Oriented Software Engineering: Measuring and Controlling the Development Process", </title> <booktitle> Proceedings of the 4th International Conference on Software Quality, </booktitle> <address> ASQC, McLean, VA, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap. A former paper <ref> [Abreu94] </ref> proposed the MOOD (Metrics for Object Oriented Design) set of metrics. These metrics, which will be reviewed here, allow an evaluation of the use of the mechanisms of the ObjectOriented paradigm.
Reference: [Abreu95] <author> Abreu, F. Brito; Goulo, Miguel and Este-ves, Rita, </author> <title> Toward the Design Quality Evaluation of Object-Oriented Software Systems. </title> <booktitle> Proceedings of the 5th International Conference on Software Quality, </booktitle> <address> Austin, Texas, USA, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: The results achieved so far show that design alternatives may have a strong influence on resulting quality. Quantifying this influence can help to train novice designers by means of heuristics <ref> [Abreu95] </ref> embedded in design tools. On the other hand, being able to predict the resulting reliability and maintainability is very important for project managers during the resource allocation (planning) process. We are also concerned about producing effort and schedule estimates for OO software development. <p> A mapping, hereafter referred as binding, of MOOD concepts and terminology to the adopted implementation language is thus needed. A binding for the Eiffel language [Meyer92] is included in this section. A binding for the C++ language was introduced in <ref> [Abreu95] </ref>. Bindings for other OO languages are expected to be defined in the near future. This section will present a stepwise introduction of each relevant concept in MOOD, immediately followed by the corresponding counterpart in the Eiffel language. <p> Other experiments should also be conducted to verify application domain dependencies, whose effect on corresponding design architectures is expected to be somehow reflected in the MOOD metrics. We may come across application-domain specific design heuristics. 6.2 MOOD bindings to other OO languages Bindings for C++ <ref> [Abreu95] </ref> and Eiffel [self] were already produced and embedded in the MOODKIT tool. To enlarge the applicability of the MOOD metrics we expect to produce bindings for other OO languages such as Smalltalk, Java and OOPascal.
Reference: [Abreu96] <author> Abreu, F. Brito and Melo, Walcelio, </author> <title> Evaluating the Impact of ObjectOriented Design on Software Quality. </title> <booktitle> Proceedings of the Third International Software Metrics Symposium, </booktitle> <address> Berlin, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: design process to achieve better maintainability and reliability Improving the OO estimation process to achieve better resource allocation The results of an experiment, where the impact of objectoriented design on resulting software quality attributes such as reliability (defect density) and maintainability (normalized rework effort) was empirically evaluated, were presented in <ref> [Abreu96] </ref>. The results achieved so far show that design alternatives may have a strong influence on resulting quality. Quantifying this influence can help to train novice designers by means of heuristics [Abreu95] embedded in design tools. <p> The increase in sample size will also lead to better (smaller) confidence intervals (and thus refined heuristics) and will hopefully confirm some criteria underlying the metrics definition (size independence and statistical independence among metrics them selves). An experiment conducted at the University of Maryland (USA) and reported in <ref> [Abreu96] </ref> evaluated the impact of objectoriented design (expressed by the MOOD metrics) on resulting software quality attributes (defect density and rework). The results achieved so far allow to infer that design alternatives have a strong influence on resulting quality.
Reference: [Avotins95a] <author> Avotins, Jon; Mingins, Christine and Schmidt, Heinz, YOOCC: </author> <title> Yes! An Objectoriented Compiler Compiler, </title> <booktitle> Proceedings of TOOLS USA'95, </booktitle> <address> Santa Barbara, </address> <publisher> Prentice Hall, </publisher> <year> 1995, </year> <type> or Technical Report, </type> <institution> Department of Software Development, Monash University (http://insect.sd.monash.edu.au:/), 1995. </institution>
Reference-contexts: Analyzed version was 2.5 (October 1995). Yoocc (Yes! an ObjectOriented Compiler Compiler) - compiler compiler that uses an extended parse library that evolved from the ISE EiffelParse library. It is a tool for automatically generating a processor framework (Eiffel source code) from a grammar <ref> [Avotins95a] </ref>. Trooper (Truly Reusable OO Parser for Eiffel Reengineering) - encapsulates the complexities of lexical analysis and parsing of Eiffel texts using an extended parse library that evolved from the ISE EiffelParse library.
Reference: [Avotins95b] <author> Avotins, Jon; Maughan, Glenn and Mingins, Christine, TROOPER, </author> <type> Technical Report, </type> <institution> Department of Software Development, Monash University (http://insect.sd.monash.edu.au:/), 1995. </institution>
Reference-contexts: Semantic actions can be added to the parsing constructs to develop different tools such as pretty-printers, compilers, etc <ref> [Avotins95b] </ref>. This sample is expected to be a good representation of a population of reasonably well designed software systems written in the Eiffel language.
Reference: [Campanai94] <author> Campanai M. and Nesi P., </author> <title> "Supporting O-O Design with Metrics", </title> <booktitle> Proceedings of TOOLS94 Europe, </booktitle> <address> France, </address> <year> 1994. </year>
Reference-contexts: Design metrics can be used for this purpose, as will be seen in this paper. Several research works in the OO design metrics arena were produced in recent years [Dumke95] [Sellers95] <ref> [Campanai94] </ref> [Cant94] [Chidamber94] [Hopkins94] [Abreu93]. However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap.
Reference: [Cant94] <author> Cant, S. N.; Henderson-Sellers, B. and Jeffery, D. R., </author> <title> "Application of cognitive complexity metrics to objectoriented programs", </title> <journal> Journal of ObjectOriented Programming, </journal> <pages> pp. 52-63, </pages> <month> July-August </month> <year> 1994. </year>
Reference-contexts: Design metrics can be used for this purpose, as will be seen in this paper. Several research works in the OO design metrics arena were produced in recent years [Dumke95] [Sellers95] [Campanai94] <ref> [Cant94] </ref> [Chidamber94] [Hopkins94] [Abreu93]. However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap. A former paper [Abreu94] proposed the MOOD (Metrics for Object Oriented Design) set of metrics.
Reference: [Champeaux92] <author> Champeaux, Dennis De and Faure, Pene-lope, </author> <title> "A Comparative Study of ObjectOriented Analysis Methods", </title> <journal> Journal of ObjectOriented Programming, </journal> <volume> vol. 4, </volume> <editor> n. </editor> <volume> 10, </volume> <pages> pp. 21-33, </pages> <month> March / April </month> <year> 1992. </year>
Reference-contexts: Looking at the analysis instead of design would then be a step forward toward cost-effectiveness. The objectoriented paradigm is supposed, at least theoretically, to allow a seamless analysis-design-coding transition. Many analysis and design methods have emerged <ref> [Champeaux92] </ref> in the past few years, with their own diagrammatic representations of differently named abstractions representing not-so-different basic concepts. This plethora gave birth to tools, such as ParadigmPlus or ObjectMaker, supporting multiple analysis and design methods.
Reference: [Chidamber94] <author> Chidamber, S. and Kemerer, C., </author> <title> "A Metrics Suite for Object Oriented Design", </title> <journal> IEEE Transactions on Software Engineering, vol.20, </journal> <volume> n.6, </volume> <pages> pp. 476-493, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Design metrics can be used for this purpose, as will be seen in this paper. Several research works in the OO design metrics arena were produced in recent years [Dumke95] [Sellers95] [Campanai94] [Cant94] <ref> [Chidamber94] </ref> [Hopkins94] [Abreu93]. However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap. A former paper [Abreu94] proposed the MOOD (Metrics for Object Oriented Design) set of metrics. <p> These metrics are defined at the system or subsystem 3 level while in other approaches, such as the well know set proposed in <ref> [Chidamber94] </ref>, the metrics are defined at the class level. Each MOOD metric is associated with such basic structural mechanisms of the objectoriented paradigm as encapsulation (MHF and AHF), inheritance (MIF and AIF), polymorphism (POF) or message-passing and association (COF).
Reference: [Conner94] <author> Conner, D. Brookshire; Niguidula, David and Van Dam, Andries, </author> <title> ObjectOriented Programming: Getting It Right at the Start, </title> <booktitle> proceedings of Educators Symposium, </booktitle> <address> OOPSLA94, Portland, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: They are aimed at helping to establish comparisons and derive conclusions among heterogeneous systems (different size, complexity, application domain and/or OO implementation language). A metrics collection experiment, that will be described here, is based on a sample of 1 - It was recognised <ref> [Conner94] </ref> that, on average, students with some degree of proficiency in another paradigm (e.g. imperative) had more difficulties learning how to design the OO way, than those doing it from the start (i.e. with no previous software development knowledge whatsoever).
Reference: [Darscht94] <author> Darscht, Pablo, </author> <title> Assessing Objects Along the Development Process Workshop on Pragmatic and Theoretical Directions in ObjectOriented Software Metrics, </title> <address> submission 2, OOPSLA94, Portland, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Output from the ROSE tool (which supports the Booch method), for instance, is being used at Rational [Fay94] to derive objectoriented metrics. <ref> [Darscht94] </ref> reports the intention to build an OO metrics collection prototype integrated with the ObjectMaker tool.
Reference: [Dumke95] <author> Dumke, Reiner R., </author> <title> "A Measurement Framework for ObjectOriented Software Development", </title> <journal> Annals of Software Engineering, </journal> <volume> Vol. 1, </volume> <year> 1995. </year>
Reference-contexts: Design metrics can be used for this purpose, as will be seen in this paper. Several research works in the OO design metrics arena were produced in recent years <ref> [Dumke95] </ref> [Sellers95] [Campanai94] [Cant94] [Chidamber94] [Hopkins94] [Abreu93]. However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap.
Reference: [Fay94] <author> Fay, Bill; Hamilton, Jim and Ohnjec, Viktor, </author> <title> Position / Experience Report Workshop on Pragmatic and Theoretical Directions in ObjectOriented Software Metrics, </title> <address> submission 3, OOPSLA94, Portland, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Output from the ROSE tool (which supports the Booch method), for instance, is being used at Rational <ref> [Fay94] </ref> to derive objectoriented metrics. [Darscht94] reports the intention to build an OO metrics collection prototype integrated with the ObjectMaker tool.
Reference: [Gamma95] <author> Gamma, E.; Helm, R.; Johnson, R. and Vlissides, J., </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Oblog Software, a private Portuguese R&D company, also intends to extend its OBLOG CASE tool, that supports the OBLOG - OBject LOGic method [Sernadas91], with design metrics and heuristics based on MOOD. 6.5 Metrics for Object Oriented Design Patterns Objectoriented design patterns <ref> [Gamma95] </ref> are currently a very active research field. They seem to be one yellow brick road to the promised reuse-land. Substantial increases in quality and productivity are expected to happen if software developers really start using these new bricks.
Reference: [Griffiths93] <author> Griffiths, W.; Hill, R. and Judge, G., </author> <title> Learning and Practicing Econometrics, </title> <publisher> John Wiley & Sons, </publisher> <year> 1993. </year>
Reference-contexts: meaning ful for the purpose of our study; sampling variation - the very act of selecting a sample of software systems from a larger population introduces randomness in the form of uncontrolled and unpredictable variation; inappropriate probability distribution - normal distributions may not apply; however, by the Central Limit Theorem <ref> [Griffiths93] </ref> if the sample size is sufficiently large, which is not the case, then the normal hypothesis will stand. In spite of the eventual errors induced, we think the sample is a good representation of the population of reasonably well-designed software systems using the Eiffel Language.
Reference: [Hopkins94] <author> Hopkins, Trevor P., </author> <title> "Complexity Metrics for Quality Assessment of ObjectOriented Design", </title> <address> SQM94, Edinburgh, </address> <month> July </month> <year> 1994, </year> <booktitle> proceedings published as Software Quality Management II, </booktitle> <volume> vol. 2: </volume> <booktitle> Building Quality into Software, </booktitle> <pages> pp. 467-481, </pages> <publisher> Computational Mechanics Press, </publisher> <year> 1994. </year>
Reference-contexts: Design metrics can be used for this purpose, as will be seen in this paper. Several research works in the OO design metrics arena were produced in recent years [Dumke95] [Sellers95] [Campanai94] [Cant94] [Chidamber94] <ref> [Hopkins94] </ref> [Abreu93]. However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap. A former paper [Abreu94] proposed the MOOD (Metrics for Object Oriented Design) set of metrics.
Reference: [Lewis91] <author> Lewis, John A., Henry, Sallie M. and Kafura, Dennis G. </author> : <title> "An Empirical Study of the Object-Oriented Paradigm and Software Reuse", </title> <booktitle> proceedings of OOPSLA'91, </booktitle> <pages> pp. 184-196, </pages> <year> 1991. </year>
Reference-contexts: The explanation was that students had to unlearn habits. 2 - In other related areas such as OO reuse metrics, some interesting experimental validation studies were conducted [Melo95], <ref> [Lewis91] </ref>. OO libraries that is reasonably representative of some of that heterogeneity. This paper is organized as follows: the next section introduces the main goals and strategy of the current research work from which this paper originated.
Reference: [Melo95] <author> Melo, W., Briand, L. and Basili, V. R., </author> <title> Measuring the Impact of Reuse on Quality and Productivity in ObjectOriented Systems, </title> <type> technical report CS-TR-3395, </type> <institution> University of Maryland, Dep. of Computer Science, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: The explanation was that students had to unlearn habits. 2 - In other related areas such as OO reuse metrics, some interesting experimental validation studies were conducted <ref> [Melo95] </ref>, [Lewis91]. OO libraries that is reasonably representative of some of that heterogeneity. This paper is organized as follows: the next section introduces the main goals and strategy of the current research work from which this paper originated.
Reference: [Meyer88] <author> Meyer, B., </author> <title> Objectoriented Software Construction, </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: 1. INTRODUCTION The ObjectOriented (OO) paradigm includes a set of mechanisms such as inheritance, encapsulation, polymorphism and message-passing that are believed to allow the construction of more robust and easily extendible software <ref> [Meyer88] </ref>. However, by simply using an OO language that supports those mechanisms, we are not automatically favored with an increase in software quality and development productivity, because its effective use relies on the designers ability. <p> Naturally, a bandpass filter is the corresponding shape for the respective design heuristic. The COF metric is a measure of coupling between classes. Coupling can be due to message-passing among class instances (dynamic coupling) or to semantic association links (static coupling). It has been noted <ref> [Meyer88] </ref> that it is desirable that classes communicate with as few others as possible and even then, that they exchange as little information as possible. Coupling relations increase complexity, reduce encapsulation and potential reuse, and limit understandability and maintainability.
Reference: [Meyer92] <author> Meyer, B., </author> <title> Eiffel: The Language, </title> <publisher> Prentice Hall International, </publisher> <year> 1992. </year>
Reference-contexts: A mapping, hereafter referred as binding, of MOOD concepts and terminology to the adopted implementation language is thus needed. A binding for the Eiffel language <ref> [Meyer92] </ref> is included in this section. A binding for the C++ language was introduced in [Abreu95]. Bindings for other OO languages are expected to be defined in the near future.
Reference: [Sellers95] <author> Henderson-Sellers, B., </author> <title> "Identifying Internal and External Characteristics of Classes Likely to be Useful as Structural Complexity Metrics, </title> <booktitle> Proceedings of 1994 International Conference on Object Oriented Information Systems OOIS'94, </booktitle> <address> London, </address> <month> December </month> <year> 1994, </year> <pages> Springer-Verlag, pp. 227-230, </pages> <address> London, </address> <year> 1995. </year>
Reference-contexts: Design metrics can be used for this purpose, as will be seen in this paper. Several research works in the OO design metrics arena were produced in recent years [Dumke95] <ref> [Sellers95] </ref> [Campanai94] [Cant94] [Chidamber94] [Hopkins94] [Abreu93]. However, there is scarce information on how the proposed metrics should be used, as well as a lack of experimental validations 2 . This paper is hoped to shorten this gap.
Reference: [Sernadas91] <author> Sernadas, C. and Fiadeiro, J., </author> <title> Towards ObjectOriented Conceptual Modeling, </title> <journal> Data and Knowledge Engineering, </journal> <volume> vol. 6, </volume> <editor> n. </editor> <volume> 6, </volume> <pages> pp. 479-508, </pages> <year> 1991. </year>
Reference-contexts: Oblog Software, a private Portuguese R&D company, also intends to extend its OBLOG CASE tool, that supports the OBLOG - OBject LOGic method <ref> [Sernadas91] </ref>, with design metrics and heuristics based on MOOD. 6.5 Metrics for Object Oriented Design Patterns Objectoriented design patterns [Gamma95] are currently a very active research field. They seem to be one yellow brick road to the promised reuse-land.
Reference: [Whitty95] <author> Whitty R., </author> <title> ObjectOriented Metrics: People and Publications, </title> <type> technical report, </type> <institution> PROMISE project no. IED4/1/9308, South Bank University, </institution> <year> 1995. </year>
Reference-contexts: From there we can build predictive models for reliability or/and redesign patterns for an increased reliability. Several avenues for future work have been outlined. There is a vast ground for research in the OO metrics field. An increasing number of researchers <ref> [Whitty95] </ref> are out there to prove it.
References-found: 24

