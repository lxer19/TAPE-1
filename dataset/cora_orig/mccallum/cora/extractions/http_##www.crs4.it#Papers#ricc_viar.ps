URL: http://www.crs4.it/Papers/ricc_viar.ps
Refering-URL: http://www.crs4.it/~zip/ps_papers.html
Root-URL: 
Title: Towards integrated object-oriented Computational Fluid Dynamics environments: Interactive Domain Editor  
Author: Riccardo Scateni 
Keyword: IDE.  
Date: January 31, 1992  
Pubnum: CRS4  
Abstract: The simulation of fluid flows around complex geometries starts to be computationally possible. Thus, it has become important to provide the Computational Fluid Dynamics (CFD) community with tools that allow easy manipulation of physical geometry and, for an efficient use of resources, interactive splitting of computational domain. We propose here an object-oriented approach to the definition of an Interactive Domain Editor (IDE). We show how this can be a kernel of an integrated environment for CFD. We finally describe the first results of a test implementation of 
Abstract-found: 1
Intro-found: 1
Reference: [Bun85] <author> A.J. Bunshaft. </author> <title> A brief introduction to PHIGS. </title> <booktitle> In Proc. Computer Graphics '85, </booktitle> <volume> volume 2, </volume> <pages> pages 326-331, </pages> <year> 1985. </year>
Reference-contexts: On the other side there are the ISO/ANSI graphics standards; the main two are: GKS (Graphical Kernel System) a 2D, plotting oriented language [HDGS83] and PHIGS (Programmer's Hierarchical Interactive Graphics System) that is more recent and has 3D features <ref> [Bun85, SBM86] </ref>. Not to 6 mention graphics systems like X-Windows that are mainly devoted to the man-agement of a window environment [Nye90, Jon89].
Reference: [DS89] <author> S.C. Dewhurst and K.T. Stark. </author> <title> Programming in C ++ . Prentice Hall Software Series, </title> <year> 1989. </year>
Reference-contexts: This is a fairly new way of structuring computer programs b , largely developed in the last 5-6 years, specially after the introduction of the C ++ programming language <ref> [DS89, ES90] </ref>. 2.1 OOP features The development of OOP has been boosted by the need to design and maintain software systems which grow over time.
Reference: [ES90] <author> M.A. Ellis and B. Stroustrup. </author> <title> The annotated C ++ reference manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: This is a fairly new way of structuring computer programs b , largely developed in the last 5-6 years, specially after the introduction of the C ++ programming language <ref> [DS89, ES90] </ref>. 2.1 OOP features The development of OOP has been boosted by the need to design and maintain software systems which grow over time.
Reference: [Fou91] <author> Open Software Foundation. </author> <title> OSF/Motif Programmer's Guide. </title> <publisher> Pren-tice Hall, </publisher> <year> 1991. </year>
Reference-contexts: By now, the layout of the menu is a soft copy of the typical choice device used by PHIGS, with 32 choices available grouped in a roughly square window. The very next evolution will be to put a Motif <ref> [Fou91] </ref> interface on the top of the PHIGS layer. In the current implementation the user has to provide IDE with files containing the informations about the physical geometry f .
Reference: [HDGS83] <author> F.R.A Hopgood, D.A. Duce, J.R. Gallop, </author> <title> and D.C. Sutcliffe. Introduction to the Graphical Kernel System GKS. </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: On the other side there are the ISO/ANSI graphics standards; the main two are: GKS (Graphical Kernel System) a 2D, plotting oriented language <ref> [HDGS83] </ref> and PHIGS (Programmer's Hierarchical Interactive Graphics System) that is more recent and has 3D features [Bun85, SBM86]. Not to 6 mention graphics systems like X-Windows that are mainly devoted to the man-agement of a window environment [Nye90, Jon89].
Reference: [HK90] <author> R.D. Henderson and G.E. Karniadakis. </author> <title> A hybrid spectral element-finite difference method for parallel computers. In Unstructured Scientific Computations on Scalable Multi-processors, ICASE. </title> <publisher> M.I.T. Press, </publisher> <month> October </month> <year> 1990. </year>
Reference-contexts: has to consider a multi-domain computational fl The work has been partly developed while the author was at CERFACS, Toulouse, France. y Centro di Ricerca, Sviluppo e Studi Superiori in Sardegna, Cagliari, Italy. 1 space to be able to parallelize the code and/or use different flow solvers on dif-ferent sub-domains <ref> [HK90] </ref>. In this paper we address the problem of providing an interface between users and flow solvers. Ideally users should only be involved in the description of the physical geometry, and be relieved from the problem of domain splitting.
Reference: [Jon89] <author> O. Jones. </author> <title> Introduction to the X window system. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Not to 6 mention graphics systems like X-Windows that are mainly devoted to the man-agement of a window environment <ref> [Nye90, Jon89] </ref>. One can roughly think to the difference between using proprietary languages or graphics standards as the same difference there is between using an assembler language proper to a certain processor and using a programming language (e.g. Fortran) present on any machine.
Reference: [Jor90] <author> D. Jordan. </author> <title> Implementation benefits of C ++ language mechanism. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 61-64, </pages> <year> 1990. </year>
Reference-contexts: How it is computed influences only the implementation of the member function det but not the relations with all the other classes referring to det. 2.4 Why C ++ The C ++ language is an extension to the C language introducing data abstraction and object-oriented features <ref> [Jor90] </ref>. This is its main advantage, comparing it to the other object-oriented programming language, since it is fully backward compatible with the ANSI standardization of C. This means that pieces of code 5 written in ANSI C are immediately transportable into C ++ .
Reference: [Kar89] <author> G.E. Karniadakis. </author> <title> Spectral element simulations of laminar and turbulent flows in complex geometries. Applied Numerical Mathematics, </title> <address> 6:85, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction In recent years, due to the increasing power of computers, it has become feasible to simulate fluid flows in complex geometries <ref> [Kar89, Ors80] </ref>.
Reference: [KM90] <author> T. Korson and J.D. McGregor. </author> <title> Understanding object-oriented: a unifying paradigm. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 40-60, </pages> <year> 1990. </year>
Reference-contexts: true, since the first definition of an object-oriented language (Smalltalk) dates back to the 60s, but only recently it has become in general use. 3 over, to have a reasonable chance to reuse portions of the software passing from one project to another instead of starting each time from scratch <ref> [KM90] </ref>. Another important feature the designer of a software system would always like to have is the possibility to keep the same kind of organization of his project in each phase of his work: task analysis, system design and system programming.
Reference: [LP88] <author> R. Lohner and P. Parikh. </author> <title> Generation of three-dimensional unstructured grids by the advancing front method. </title> <type> Technical Report 88-0515, </type> <institution> AIAA, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: Unfortunately, it is currently beyond the state of the art to fully automatize the subdivision of the computational domain (unless the method used for the flow simulation accepts fully unstructured meshes <ref> [LP88] </ref>, but this is not generally the case). Thus, users should be provided with the ability to define both the computational geometry and how the multi-domain splitting should be done. It is a solved problem to provide the first capability: it is a trivial extension to a CAD program.
Reference: [Nye90] <author> A. Nye, </author> <title> editor. X Window System User's Guide, volume 3 of The Definitive Guides to the X Window System. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> second edition, </address> <year> 1990. </year> <month> 15 </month>
Reference-contexts: Not to 6 mention graphics systems like X-Windows that are mainly devoted to the man-agement of a window environment <ref> [Nye90, Jon89] </ref>. One can roughly think to the difference between using proprietary languages or graphics standards as the same difference there is between using an assembler language proper to a certain processor and using a programming language (e.g. Fortran) present on any machine.
Reference: [Ors80] <author> S.A. Orszag. </author> <title> Spectral methods for problems in complex geometry. </title> <journal> Journal of Computational Physics, </journal> <volume> 37:70, </volume> <year> 1980. </year>
Reference-contexts: 1 Introduction In recent years, due to the increasing power of computers, it has become feasible to simulate fluid flows in complex geometries <ref> [Kar89, Ors80] </ref>.
Reference: [SBM86] <author> D. Shuey, D. Bailey, </author> <title> and T.P. Morrissey. PHIGS: A standard, dynamic, interactive graphics interface. </title> <journal> IEEE CG&A, </journal> <volume> 6(8) </volume> <pages> 50-57, </pages> <year> 1986. </year>
Reference-contexts: On the other side there are the ISO/ANSI graphics standards; the main two are: GKS (Graphical Kernel System) a 2D, plotting oriented language [HDGS83] and PHIGS (Programmer's Hierarchical Interactive Graphics System) that is more recent and has 3D features <ref> [Bun85, SBM86] </ref>. Not to 6 mention graphics systems like X-Windows that are mainly devoted to the man-agement of a window environment [Nye90, Jon89].
Reference: [TWM85] <author> J.F. Thompson, Z.U.A. Warsi, and C.W. Mastin. </author> <title> Numerical Grid Generation: Foundations and Applications. </title> <publisher> North-Holland, </publisher> <year> 1985. </year> <month> 16 </month>
Reference-contexts: This has introduced a new level of complexity in the field of Computational Fluid-Dynamics (CFD): users need to be able to describe much more complex computational spaces to flow solvers; for an efficient use of computational resources the computational domains have to be subdivided in possibly many sub-domains <ref> [TWM85] </ref>. Within each of these sub-domains the flow is then discretized depending on the flow solver used. The splitting of the computational domain is primarily done to maintain uniform precision in the computation, by creating smaller domains, and thus denser grids in the critical regions of the computational space.
References-found: 15

