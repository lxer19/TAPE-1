URL: http://www.cs.washington.edu/homes/alon/site/files/vldb96-agg.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/alon/site/PaperAbstractPresentation_bib14.html
Root-URL: 
Email: divesh@research.att.com  dar@dtl.co.il  jag@research.att.com  levy@research.att.com  
Title: Answering Queries with Aggregation Using Views  
Author: Divesh Srivastava Shaul Dar H. V. Jagadish Alon Y. Levy 
Affiliation: AT&T Research  Data Technologies Ltd.  AT&T Research  AT&T Research  
Abstract: We present novel algorithms for the problem of using materialized views to compute answers to SQL queries with grouping and aggregation, in the presence of multiset tables. In addition to its obvious potential in query optimization, this problem is important in many applications, such as data warehousing, very large transaction recording systems, global information systems and mobile computing, where access to local or cached materialized views may be cheaper than access to the underlying database. Our contributions are the following: First, we show that in the case where the query has grouping and aggregation but the views do not, a view is usable in answering a query only if there is an isomor-phism between the view and a portion of the query. Second, when the views also have grouping and aggregation we identify conditions under which the aggregation information present in a view is sufficient to perform the aggregation computations required in the query. The algorithms we describe for rewriting a query also consider the case in which the rewritten query may be a union of single-block queries. Our approach is a semantic one, in that it detects when the information existing in a view is sufficient to answer a query. In contrast, previous work performed syntactic transformations on the query such that the definition of the view would be a sub-part of the definition of the query. Consequently, these methods can only detect usages of views in limited cases. 
Abstract-found: 1
Intro-found: 1
Reference: [BI94] <author> D. Barbara and T. Imielinski. Sleepers and workaholics: </author> <title> Caching strategies in mobile environments. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1994. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 22nd VLDB Conference Mumbai (Bombay), India, 1996 transaction recording systems [JMS95], global information systems [LSK95, LRO96] and mobile computing <ref> [BI94] </ref>, where access to (local or cached) materialized views may be cheaper than access to the underlying database. In data warehousing applications and very large transaction recording systems, the size of the database and the volume of incoming data may be very large. Queries against such data typically involve aggregation.
Reference: [CKPS95] <author> S. Chaudhuri, R. Krishnamurthy, S. Potamianos, and K. Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> In Proc. </booktitle> <address> ICDE, </address> <year> 1995. </year>
Reference-contexts: Intuitively, the loss of tuple multiplicities because of a groupby in the view prevents any multiset-equivalent rewriting. There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, has received little attention. <p> Note that the conditions apply also to the restricted case when both the view and the query are conjunctive <ref> [CKPS95] </ref>. Condition C 1 and the first part of condition C 4 essentially guarantee that the view is multiset equivalent to its image under ; these are a reformulation of the conditions presented in [CV93] for testing equivalence of conjunctive queries under the multiset semantics. <p> Thus, there is no rewriting of Q 7 that uses view V 7 . 3 2 6 Related Work There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, have received little attention. Caching of previous query results was explored in [Sel88, SJGP90] as a means of supporting stored procedures. <p> Therefore, we need to find a priori which tables in the FROM clause will be replaced by V . Optimization of conjunctive SQL queries using conjunctive views has been studied in <ref> [CKPS95] </ref>. In addition to considering when such views are usable in evaluating a query, they suggest how to perform this optimization in a cost-based fashion. <p> In such cases, our techniques can also be applied. We are currently extending our work in several ways, including considering the view usage problem for arbitrary nested queries, integrating our techniques with cost-based optimizers along the lines described in <ref> [CKPS95] </ref>, and developing strategies for determining which views to cache.
Reference: [CR94] <author> C. M. Chen and N. Roussopoulos. </author> <title> The implementation and performance evaluation of the ADMS query optimizer: Integrating query result caching and matching. </title> <booktitle> In Proc. </booktitle> <address> EDBT, </address> <year> 1994. </year>
Reference-contexts: Intuitively, the loss of tuple multiplicities because of a groupby in the view prevents any multiset-equivalent rewriting. There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, has received little attention. <p> Thus, there is no rewriting of Q 7 that uses view V 7 . 3 2 6 Related Work There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, have received little attention. Caching of previous query results was explored in [Sel88, SJGP90] as a means of supporting stored procedures. <p> Caching of previous query results was explored in [Sel88, SJGP90] as a means of supporting stored procedures. This corresponds to using materialized views when they match syntactically a sub-expression of the query. In the ADMS optimizer <ref> [CR94] </ref>, subquery expressions corresponding to nodes in the query execution (operator) tree were also cached. A cached result was matched against a new query by using common expression analysis [Fin82]. Grouping and aggregation issues were not addressed.
Reference: [CS94] <author> S. Chaudhuri and K .Shim. </author> <title> Including group-by in query optimization. </title> <booktitle> In Proc. VLDB, </booktitle> <year> 1994. </year>
Reference-contexts: Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>). Gupta et al. [GHQ95] have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. Additional transformations on queries involving aggregation have been proposed by <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>. <p> We have focused on single-block SQL queries and views. Often, multi-block SQL queries that have view tables in the FROM clause can be transformed to single-block queries, e.g., using techniques described in <ref> [YL94, CS94, GHQ95, CS96] </ref>. In such cases, our techniques can also be applied.
Reference: [CS96] <author> S. Chaudhuri and K .Shim. </author> <title> Optimizing queries with aggregate views. </title> <booktitle> In Proc. </booktitle> <address> EDBT, </address> <year> 1996. </year>
Reference-contexts: Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>). Gupta et al. [GHQ95] have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. Additional transformations on queries involving aggregation have been proposed by <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>. <p> We have focused on single-block SQL queries and views. Often, multi-block SQL queries that have view tables in the FROM clause can be transformed to single-block queries, e.g., using techniques described in <ref> [YL94, CS94, GHQ95, CS96] </ref>. In such cases, our techniques can also be applied.
Reference: [CV93] <author> S. Chaudhuri and M. Y. Vardi. </author> <title> Optimization of real conjunctive queries. </title> <booktitle> In Proc. ACM PODS, </booktitle> <year> 1993. </year>
Reference-contexts: Condition C 1 and the first part of condition C 4 essentially guarantee that the view is multiset equivalent to its image under ; these are a reformulation of the conditions presented in <ref> [CV93] </ref> for testing equivalence of conjunctive queries under the multiset semantics. Note that the 1-1 mapping is necessary because of the multiset semantics, whereas a many-to-1 mapping would suffice in the case of sets [LMSS95].
Reference: [Fin82] <author> S. Finkelstein. </author> <title> Common expression analysis in database applications. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1982. </year>
Reference-contexts: This corresponds to using materialized views when they match syntactically a sub-expression of the query. In the ADMS optimizer [CR94], subquery expressions corresponding to nodes in the query execution (operator) tree were also cached. A cached result was matched against a new query by using common expression analysis <ref> [Fin82] </ref>. Grouping and aggregation issues were not addressed. View usability has been studied for conjunctive queries with set semantics and without grouping and aggregation in, e.g., [YL87, LMSS95].
Reference: [GHQ95] <author> A. Gupta, V. Harinarayan, and D. Quass. </author> <title> Aggregate-query processing in data warehousing environments. </title> <booktitle> In Proc. VLDB, </booktitle> <year> 1995. </year>
Reference-contexts: Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>). Gupta et al. [GHQ95] have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96]). Gupta et al. <ref> [GHQ95] </ref> have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> Strengthening the conditions in the WHERE clause may allow us to detect usability of views that would otherwise not be determined to be usable, because it makes it more likely that condition C 4 will be satisfied. Several authors (e.g., <ref> [LMS94, RSSS95, GHQ95, LM96] </ref>) have considered the problem of inferring condi tions that can be conjoined to Conds (Q) given the conditions in GConds (Q), and removing redundant conditions in GConds (Q). <p> However, they did not consider grouping and aggregation, nor did they consider the possibility of rewritings that are UNION ALLs of single-block queries. 3 Gupta et al. <ref> [GHQ95] </ref> have suggested an expand operator to replicate tuples in a given table. Recently, Gupta et al. [GHQ95] considered the prob-lem of using materialized aggregation views to answer aggregation queries using a purely transformational approach. <p> However, they did not consider grouping and aggregation, nor did they consider the possibility of rewritings that are UNION ALLs of single-block queries. 3 Gupta et al. <ref> [GHQ95] </ref> have suggested an expand operator to replicate tuples in a given table. Recently, Gupta et al. [GHQ95] considered the prob-lem of using materialized aggregation views to answer aggregation queries using a purely transformational approach. They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. <p> They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. Additional transformations on queries involving aggregation have been proposed by <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>. <p> We have focused on single-block SQL queries and views. Often, multi-block SQL queries that have view tables in the FROM clause can be transformed to single-block queries, e.g., using techniques described in <ref> [YL94, CS94, GHQ95, CS96] </ref>. In such cases, our techniques can also be applied.
Reference: [GJM96] <author> A. Gupta, H. V. Jagadish, and I. S. Mumick. </author> <title> Data warehousing using self-maintainable views. </title> <booktitle> In Proc. </booktitle> <address> EDBT, </address> <year> 1996. </year>
Reference-contexts: This problem has the potential of improving the performance of SQL query evaluation in general. It has an even greater impact on the optimization of aggregation queries in applications such as data warehousing <ref> [GJM96, ZGMHW95] </ref>, very large fl The work of this author was performed when he was at AT&T Bell Laboratories, Murray Hill, NJ, USA.
Reference: [GMR95] <author> A. Gupta, I. S. Mumick, and K. A. Ross. </author> <title> Adapting materialized views after redefinitions. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1995. </year>
Reference-contexts: Also, Gupta et al. do not provide any formal guarantees of completeness. A related problem is studied in Gupta et al. <ref> [GMR95] </ref>. They assume that a materialized view may be redefined, and investigate how to adapt the materialization of the view to reflect the redefinition.
Reference: [JMS95] <author> H. V. Jagadish, I. S. Mumick, and A. Silberschatz. </author> <title> View maintenance issues for the Chronicle data model. </title> <booktitle> In Proc. ACM PODS, </booktitle> <year> 1995. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 22nd VLDB Conference Mumbai (Bombay), India, 1996 transaction recording systems <ref> [JMS95] </ref>, global information systems [LSK95, LRO96] and mobile computing [BI94], where access to (local or cached) materialized views may be cheaper than access to the underlying database.
Reference: [LM96] <author> A. Y. Levy and I. S. Mumick. </author> <title> Reasoning with aggregation constraints. </title> <booktitle> In Proc. </booktitle> <address> EDBT, </address> <year> 1996. </year>
Reference-contexts: Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>). Gupta et al. [GHQ95] have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> Strengthening the conditions in the WHERE clause may allow us to detect usability of views that would otherwise not be determined to be usable, because it makes it more likely that condition C 4 will be satisfied. Several authors (e.g., <ref> [LMS94, RSSS95, GHQ95, LM96] </ref>) have considered the problem of inferring condi tions that can be conjoined to Conds (Q) given the conditions in GConds (Q), and removing redundant conditions in GConds (Q). <p> They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. Additional transformations on queries involving aggregation have been proposed by <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>.
Reference: [LMS94] <author> A. Y. Levy, I. S. Mumick, and Y. Sagiv. </author> <title> Query optimization by predicate move-around. </title> <booktitle> In Proc. VLDB, </booktitle> <year> 1994. </year>
Reference-contexts: Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>). Gupta et al. [GHQ95] have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> Strengthening the conditions in the WHERE clause may allow us to detect usability of views that would otherwise not be determined to be usable, because it makes it more likely that condition C 4 will be satisfied. Several authors (e.g., <ref> [LMS94, RSSS95, GHQ95, LM96] </ref>) have considered the problem of inferring condi tions that can be conjoined to Conds (Q) given the conditions in GConds (Q), and removing redundant conditions in GConds (Q). <p> They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. Additional transformations on queries involving aggregation have been proposed by <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>.
Reference: [LMSS95] <author> A. Y. Levy, A. O. Mendelzon, Y. Sagiv, and D. Sri-vastava. </author> <title> Answering queries using views. </title> <booktitle> In Proc. ACM PODS, </booktitle> <year> 1995. </year>
Reference-contexts: Intuitively, the loss of tuple multiplicities because of a groupby in the view prevents any multiset-equivalent rewriting. There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, has received little attention. <p> Note that the 1-1 mapping is necessary because of the multiset semantics, whereas a many-to-1 mapping would suffice in the case of sets <ref> [LMSS95] </ref>. Condition C 4 ensures that constraints not enforced in the view can still be enforced in the query when the view is used, since they do not refer to columns that are projected out in the view and hence are no longer available. <p> In contrast, this property does not hold under the set semantics considered in <ref> [LMSS95] </ref>, where there may exist rewritings that cannot be found by considering sequences of single view substitutions. 3.3 Aggregation Query With a HAVING Clause We now describe how to extend the previous algorithms to the case in which the queries may contain a HAVING clause. <p> Thus, there is no rewriting of Q 7 that uses view V 7 . 3 2 6 Related Work There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, have received little attention. Caching of previous query results was explored in [Sel88, SJGP90] as a means of supporting stored procedures. <p> A cached result was matched against a new query by using common expression analysis [Fin82]. Grouping and aggregation issues were not addressed. View usability has been studied for conjunctive queries with set semantics and without grouping and aggregation in, e.g., <ref> [YL87, LMSS95] </ref>. Levy et al. [LMSS95] showed a close connection between the problem of usability of a view in evaluating a query and the problem of query containment. <p> A cached result was matched against a new query by using common expression analysis [Fin82]. Grouping and aggregation issues were not addressed. View usability has been studied for conjunctive queries with set semantics and without grouping and aggregation in, e.g., [YL87, LMSS95]. Levy et al. <ref> [LMSS95] </ref> showed a close connection between the problem of usability of a view in evaluating a query and the problem of query containment. However, this connection does not carry over to the multiset case. [LMSS95] also presented a simple technique for generating a rewriting of a query Q using view V <p> Levy et al. <ref> [LMSS95] </ref> showed a close connection between the problem of usability of a view in evaluating a query and the problem of query containment. However, this connection does not carry over to the multiset case. [LMSS95] also presented a simple technique for generating a rewriting of a query Q using view V , under the set semantics. Essentially, the technique consists of first conjoining V to the FROM clause of Q, and then (independently) minimizing the resulting query to eliminate redundant tables.
Reference: [LRO96] <author> A. Y. Levy, A. Rajaraman, and J. J. Ordille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proc. VLDB, </booktitle> <year> 1996. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 22nd VLDB Conference Mumbai (Bombay), India, 1996 transaction recording systems [JMS95], global information systems <ref> [LSK95, LRO96] </ref> and mobile computing [BI94], where access to (local or cached) materialized views may be cheaper than access to the underlying database. In data warehousing applications and very large transaction recording systems, the size of the database and the volume of incoming data may be very large.
Reference: [LSK95] <author> A. Y. Levy, D. Srivastava, and T. Kirk. </author> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 5 </volume> <pages> 121-143, </pages> <year> 1995. </year> <note> Special Issue on Networked Information Discovery and Retrieval. </note>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 22nd VLDB Conference Mumbai (Bombay), India, 1996 transaction recording systems [JMS95], global information systems <ref> [LSK95, LRO96] </ref> and mobile computing [BI94], where access to (local or cached) materialized views may be cheaper than access to the underlying database. In data warehousing applications and very large transaction recording systems, the size of the database and the volume of incoming data may be very large.
Reference: [RSSS95] <author> K. A. Ross, D. Srivastava, P. Stuckey, and S. Sudar-shan. </author> <title> Foundations of aggregation constraints. An early version appeared in Proc. </title> <booktitle> of the 2nd Intl. Workshop on Principles and Practice of Constraint Programming, </booktitle> <year> 1994, </year> <note> LNCS 874, </note> <year> 1995. </year>
Reference-contexts: Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>). Gupta et al. [GHQ95] have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> Strengthening the conditions in the WHERE clause may allow us to detect usability of views that would otherwise not be determined to be usable, because it makes it more likely that condition C 4 will be satisfied. Several authors (e.g., <ref> [LMS94, RSSS95, GHQ95, LM96] </ref>) have considered the problem of inferring condi tions that can be conjoined to Conds (Q) given the conditions in GConds (Q), and removing redundant conditions in GConds (Q). <p> They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. Additional transformations on queries involving aggregation have been proposed by <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>.
Reference: [Sel88] <author> T. Sellis. </author> <title> Intelligent caching and indexing techniques for relational database systems. </title> <booktitle> Information Systems, </booktitle> <pages> pages 175-185, </pages> <year> 1988. </year>
Reference-contexts: Caching of previous query results was explored in <ref> [Sel88, SJGP90] </ref> as a means of supporting stored procedures. This corresponds to using materialized views when they match syntactically a sub-expression of the query. In the ADMS optimizer [CR94], subquery expressions corresponding to nodes in the query execution (operator) tree were also cached.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potami-anos. </author> <title> On rules, procedures, caching and views in database systems. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1990. </year>
Reference-contexts: Intuitively, the loss of tuple multiplicities because of a groupby in the view prevents any multiset-equivalent rewriting. There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, has received little attention. <p> Thus, there is no rewriting of Q 7 that uses view V 7 . 3 2 6 Related Work There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, have received little attention. Caching of previous query results was explored in [Sel88, SJGP90] as a means of supporting stored procedures. <p> Caching of previous query results was explored in <ref> [Sel88, SJGP90] </ref> as a means of supporting stored procedures. This corresponds to using materialized views when they match syntactically a sub-expression of the query. In the ADMS optimizer [CR94], subquery expressions corresponding to nodes in the query execution (operator) tree were also cached.
Reference: [TSI94] <author> O. G. Tsatalos, M. H. Solomon, and Y. E. Ioannidis. </author> <title> The GMAP: A versatile tool for physical data independence. </title> <booktitle> In Proc. VLDB, </booktitle> <year> 1994. </year>
Reference-contexts: Intuitively, the loss of tuple multiplicities because of a groupby in the view prevents any multiset-equivalent rewriting. There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, has received little attention. <p> Thus, there is no rewriting of Q 7 that uses view V 7 . 3 2 6 Related Work There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, have received little attention. Caching of previous query results was explored in [Sel88, SJGP90] as a means of supporting stored procedures.
Reference: [YL87] <author> H. Z. Yang and P.-A. Larson. </author> <title> Query transformation for PSJ-queries. </title> <booktitle> In Proc. VLDB, </booktitle> <year> 1987. </year>
Reference-contexts: Intuitively, the loss of tuple multiplicities because of a groupby in the view prevents any multiset-equivalent rewriting. There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, has received little attention. <p> Thus, there is no rewriting of Q 7 that uses view V 7 . 3 2 6 Related Work There has been previous work on using views to answer queries (e.g., <ref> [YL87, SJGP90, TSI94, CR94, CKPS95, LMSS95] </ref>), but the problem of finding the equivalent rewrit-ings for SQL queries with multiset semantics, grouping and aggregation, have received little attention. Caching of previous query results was explored in [Sel88, SJGP90] as a means of supporting stored procedures. <p> A cached result was matched against a new query by using common expression analysis [Fin82]. Grouping and aggregation issues were not addressed. View usability has been studied for conjunctive queries with set semantics and without grouping and aggregation in, e.g., <ref> [YL87, LMSS95] </ref>. Levy et al. [LMSS95] showed a close connection between the problem of usability of a view in evaluating a query and the problem of query containment.
Reference: [YL94] <author> W. P. Yan and P.-A. Larson. </author> <title> Performing group-by before join. </title> <booktitle> In Proc. </booktitle> <address> ICDE, </address> <year> 1994. </year>
Reference-contexts: Several researchers have considered performing syntactic transformations on queries with grouping and aggregation that preserve equivalence of the query (e.g., <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>). Gupta et al. [GHQ95] have shown how these transformations can be used for finding rewritings of queries by transforming the query in a way that the definition of the view would be identical to a sub-part of the definition of the query. <p> They perform syntactic transformations on the operator tree representation of the query such that the definition of the view would be identical to a sub-part of the definition of the query. Additional transformations on queries involving aggregation have been proposed by <ref> [YL94, LMS94, CS94, RSSS95, GHQ95, CS96, LM96] </ref>. <p> We have focused on single-block SQL queries and views. Often, multi-block SQL queries that have view tables in the FROM clause can be transformed to single-block queries, e.g., using techniques described in <ref> [YL94, CS94, GHQ95, CS96] </ref>. In such cases, our techniques can also be applied.
Reference: [ZGMHW95] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View maintenance in a warehousing environment. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1995. </year>
Reference-contexts: This problem has the potential of improving the performance of SQL query evaluation in general. It has an even greater impact on the optimization of aggregation queries in applications such as data warehousing <ref> [GJM96, ZGMHW95] </ref>, very large fl The work of this author was performed when he was at AT&T Bell Laboratories, Murray Hill, NJ, USA.
References-found: 23

