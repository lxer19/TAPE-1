URL: ftp://www.cs.rutgers.edu/pub/technical-reports/dcs-tr-351.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: e-mail:fbadri@cs, phatak@paulg.rutgers.edu  
Title: An Architecture for Mobile Databases  
Author: B. R. Badrinath Shirish Hemant Phatak 
Address: New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  
Abstract: The use of mobile computers is gaining popularity. The number of users with laptops and notebooks is increasing and this trend is likely to continue in the future where the number of mobile clients will far exceed the number of traditional fixed clients. Applications running on mobile clients download information by periodically connecting to repositories of data. Mobile clients constitute a new and different kind of workload and exhibit different access patterns than those seen in traditional client server systems. Though file systems have been modified to handle clients that are capable of downloading information, updating the information while disconnected, and later reintegrating the updates, databases have not been redesigned to accommodate mobile clients. Thus, there is a need to support mobile clients in the context of client server databases. In this paper, we present a new architecture for database systems which takes mobile environments into consideration. This architecture allows us to address issues of concurrency control, disconnection, replica control in mobile databases. We also propose the concept of hoard keys which facilitates hoarding. We present simulation results that illustrate the performance of an example database system with both disconnected and traditional clients.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso and H. F. Korth, </author> <title> Database System Issues in Nomadic Computing, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1993, </year> <pages> pages 388-392. </pages>
Reference: [2] <author> P. A. Bernstein and N. Goodman, </author> <title> Concurrency Control in Distributed Database Systems, </title> <journal> ACM Computing Surveys, </journal> <volume> 13(2), </volume> <month> Jun. </month> <year> 1981, </year> <pages> pages 185-221. </pages>
Reference-contexts: Thus the hoard-reintegrate database is a special case of a replicated database. Replicated database systems have already been studied in some depth in literature <ref> [2, 6, 26] </ref>. Unfortunately, all these systems assume that there is a persistent connection between all the replica servers and any disconnection is due to failure. Thus, these solutions work poorly in a mobile disconnected environment. We have considered the following options for hoarding: 1.
Reference: [3] <author> B. R. Badrinath and S. Phatak, </author> <title> Database Server Organization for Handling Mobile Clients, </title> <institution> Department of Computer Science Technical Report DCS-TR-324, Rutgers University, </institution> <address> New Jersey. </address>
Reference-contexts: To capitalize on this fact the relations on the server are horizontally fragmented to optimize hoarding and reintegration performance. Our simulations (see section 5 and <ref> [3] </ref>) indicate that this can be done without significantly impacting time to access disk of traditional clients, even though such clients do not demonstrate any such locality of access. Note that performance of such clients is still affected by the resources consumed by hoarding operation. <p> Clients would also be able to determine what to hoard by browsing the relations in connected mode. These physical fragments must be carefully designed to capture the locality of access of "typical" hoard clients. This needs analysis of the workload offered by such hoard clients. As our results in <ref> [3] </ref> indicate, a well organized relation can lead to an improvement of upto three time in raw i/o performance for hoard queries, without significantly affecting traditional i/o performance. We present our techniques for fragmenting relations using hoard keys in section 4. <p> If each logical fragment of a hoard key is a union of one or more physical fragment of the relation on disk, then the hoard key is a physical hoard key. Physical hoard keys allow faster access to frequently hoarded data <ref> [3] </ref> by clustering data by locality of access. The logical hoard keys provide a way of clustering indices rather than data and are designed for less frequently hoarded data and for on-the-fly extensions to the database. <p> Our simulation model in <ref> [3] </ref> measures disk access performance without taking into account the effects of concurrency control. This simulation demonstrated that raw access performance can be improved by a factor of 3 for hoard clients, while only marginally impacting traditional clients. The simulation model presented here additionally incorporates concurrency control.
Reference: [4] <author> K. P. Brown, M. J. Carey and M. Livny, </author> <title> Goal-Oriented Buffer Management Revisited, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 353-364. </pages>
Reference-contexts: The traditional transaction source generates traditional transactions by sleeping for a random negative exponentially distributed amount of time with mean TraditionalThinkTime and then issuing a single traditional transaction. The transaction is "hot" with a probability ProbTraditionalHot (the concept of hot and cold accesses is defined in <ref> [4] </ref>). (A query is "hot" if it accesses a range of tuples. A "cold" query accesses tuples at random.) Both types of queries write to the disk with the probability ProbTraditionalWrite. Each transaction accesses a random uniformly distributed number of tuples with mean TraditionalSize.
Reference: [5] <author> M. J. Carey, M. J. Franklin, M. Livny, E. J. Shekita, </author> <title> Data Caching Tradeoffs in Client-Server DBMS Architectures, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> May </month> <year> 1991, </year> <pages> pages 357-366. </pages>
Reference: [6] <author> S. Ceri and G. Pelagatti, </author> <title> Distributed Databases|Principles and Systems, </title> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: Thus the hoard-reintegrate database is a special case of a replicated database. Replicated database systems have already been studied in some depth in literature <ref> [2, 6, 26] </ref>. Unfortunately, all these systems assume that there is a persistent connection between all the replica servers and any disconnection is due to failure. Thus, these solutions work poorly in a mobile disconnected environment. We have considered the following options for hoarding: 1. <p> For example, consider the following schema with two hoard keys, modeled from <ref> [6] </ref>: SUPPLY (SNUM,PNUM,DEPTNUM,QUAN) Foreign Keys SNUM,PNUM and DEPTNUM, External Hoard Keys are DEPTNUM and PNUM The domain of DEPTNUM is [0; : : :; 30] and that of PNUM is [0; : : :; 4000].
Reference: [7] <author> E. F. Codd, E. S. Codd and C. T. Salley, </author> <title> Beyond Decision Support, </title> <booktitle> Computerworld 27:30, </booktitle> <month> Jul. </month> <year> 1993, </year> <pages> pages 87-89. </pages>
Reference-contexts: None of the above work deals specifically with server organization of data to accommodate mobile clients. However, the idea of reorganizing databases for specific applications is not new. For example, in Multidimensional Online Analytical Processing or MOLAP <ref> [7] </ref>, a flat relational database is reorganized into a multidimensional read-only store to support analytical queries involving operators such as min, max and sum. Each dimension holds the result of applying some operators to the database.
Reference: [8] <author> S. B. Davidson, </author> <title> Optimism and Consistency in Partitioned Distributed Database Systems ACM Transactions on Database Systems, </title> <type> 9(3), </type> <month> Sep. </month> <year> 1984, </year> <pages> pages 456-481. </pages>
Reference-contexts: Hoarding can be initiated explicitly (say through a begin hoard primitive) or implicitly (data downloaded during browsing can be treated as the hoard). Reintegration can be performed using any partition healing algorithm that can work with just two servers participating. In particular Davidson's partition healing algorithm <ref> [8] </ref> or CODA like approaches can be used. In each case the unit of reintegration can either be all updates from the hoard client or updates by individual transactions from a hoard client. With the introduction of hoard clients, database servers can expect two distinct workloads.
Reference: [9] <author> A. Demers, K. Petersen, M. Spreitzer, D. Terry, M. Theimer and B. Welch, </author> <title> The BAYOU Architecture: Support for Data Sharing Among Mobile Users, </title> <booktitle> Proceedings of the IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <month> Dec. </month> <year> 1994, </year> <pages> pages 2-7. </pages>
Reference-contexts: Examples of such systems are CODA and FICUS [16]. These systems allow clients to update replicas of files 4 while disconnected, and reconcile updates on reconnection. CODA uses a single server to reconcile updates, whereas FICUS uses a peer-to-peer mechanism. In BAYOU <ref> [9] </ref>, the hoard is replaced by a local copy of an entire data repository. Each server must maintain such a copy. These copies can then be accessed by other hosts connecting to such a server. All the servers are assumed to be intermittently connected. <p> Another way of saying this is that only the logical fragments associated with different hoard keys can overlap. 8 indexing is still required to support traditional queries 14 consisting of tuples with DEPTNUM with values in the range <ref> [0; : : : ; 9] </ref>, [11; : : :; 19] and [20; : : :; 30] respectively. Each of the logical fragments for the Q i 's are realized using indexes.
Reference: [10] <author> M. J. Franklin, B. T. Jonsson and D. Kossmann, </author> <title> Performance Tradeoffs for Client-Server Query Processing, </title> <booktitle> Proceedings of the ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 149-160. </pages>
Reference: [11] <author> J. Gray, P. Helland, P. E. O'Neil and D. Shasha, </author> <title> The Dangers of Replication and a Solution, </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 173-182. </pages>
Reference-contexts: Furthermore, the system itself is not a full fledged database system, and can provide only very weak guarantees for applications ([27]). In the update anytime, anywhere model proposed in <ref> [11] </ref>. The database here is a collection of replicated objects with primary copies at certain sites known as object masters. The model distinguishes between mobile nodes that remain disconnected most of the time, and base nodes, that are always connected. <p> Another way of saying this is that only the logical fragments associated with different hoard keys can overlap. 8 indexing is still required to support traditional queries 14 consisting of tuples with DEPTNUM with values in the range [0; : : : ; 9], <ref> [11; : : :; 19] </ref> and [20; : : :; 30] respectively. Each of the logical fragments for the Q i 's are realized using indexes.
Reference: [12] <author> J. Gray and A. Reuter, </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1993. </year>
Reference: [13] <author> T. Imielinski and B. R. Badrinath, </author> <title> Mobile Wireless Computing: </title> <booktitle> Challenges in Data Management Communications of the ACM, </booktitle> <volume> 37(10), </volume> <year> 1994, </year> <pages> pages 18-28. 24 </pages>
Reference: [14] <author> R. Katz and S. Weiss, </author> <title> Design Transaction Management, </title> <booktitle> Proceedings of the 21st Design Automation Conference, </booktitle> <year> 1984, </year> <pages> pages 692-693. </pages>
Reference-contexts: There are two approaches for dealing with consistency problems in the face of imminent disconnection. The first approach is pessimistic and requires explicit synchronization before disconnection to maintain consistency. An example of this approach is the checkin/checkout model <ref> [14] </ref> where the server simply locks all the data hoarded by the client. This approach eliminates conflicts at the cost requiring too much information in advance, and reducing availability of the system. <p> Furthermore, care must also be taken while creating the master physical fragments on various machines, since only one machine can have the master physical fragment. In spite of these problems, support for migrating master replicas is required to support certain applications and transaction models, such as the checkin/checkout model <ref> [14] </ref>. Transactions from traditional clients cannot be subjected to rollback since traditional clients will always assume durability of committed updates. Thus the server must also ensure that a traditional transaction never commits on a non master copy of the data.
Reference: [15] <author> N. Krishnakumar and R. Jain, </author> <title> Mobile Support for Sales and Inventory Applications, in Mobile Computing, </title> <editor> T. Imielinski and H. F. </editor> <publisher> Korth Ed. </publisher>
Reference: [16] <author> G. Kuenning, G. J. Popek and P. Reiher, </author> <title> An Analysis of Trace Data for Predictive File Caching in Mobile Computing, </title> <booktitle> Proceedings of the USENIX Summer Conference, </booktitle> <year> 1994, </year> <pages> pages 291-303. </pages>
Reference-contexts: Finally, section 6 presents conclusions and discusses new issues resulting from our approach to server organization for handling mobile clients. 2 Related Work As mentioned in the introduction, hoarding is a concept that has been successfully applied to file systems. Examples of such systems are CODA and FICUS <ref> [16] </ref>. These systems allow clients to update replicas of files 4 while disconnected, and reconcile updates on reconnection. CODA uses a single server to reconcile updates, whereas FICUS uses a peer-to-peer mechanism. In BAYOU [9], the hoard is replaced by a local copy of an entire data repository. <p> We also assume that clients know a priori what data they might need access to. For example in our repairman example, the repairmen know the geographic area that they are going to serve. It is possible to work around this assumption using hoard profiles <ref> [16] </ref>. Here the client need not explicitly specify which fragments to download. Instead, the client, say a sales manager on her way to a meeting in Singapore, can indirectly ask for data, as in, "download everything related to Singapore". <p> In the latter case, the index data structures and the physical layout of the database might change dynamically. Thus, efficient schemes for tracing and evaluating database activity and dynamically reorganizing the database are needed (see <ref> [16] </ref>). Furthermore, hoard profiles could be generated for all the users of the database. How exactly to reorganize the database for a given set of hoard profiles is an open research problem.
Reference: [17] <author> P. Kumar and M. Satyanarayanan, </author> <title> Supporting Application-Specific Resolution in an Optimistically Replicated File System, </title> <booktitle> Proceedings of the Fourth IEEE Workshop on Workstation Operating Systems, </booktitle> <month> Oct. </month> <year> 1993, </year> <pages> pages 66-70. </pages>
Reference-contexts: In this paper we use the terms hoard and local replica interchangeably. 1.1 File systems versus Databases This modified client-server model has been used for file systems such as CODA [24], and has been extended to other applications using Application Specific Resolvers <ref> [17] </ref>. The granularity of hoarding in CODA is an entire file. The client is allowed to hoard a specified set of files, e.g., all files in a users home directory. The client can then disconnect and perform local updates on the files. On reconnecting, all updated files are reintegrated.
Reference: [18] <author> H. T. Kung and J. T. Robinson, </author> <title> On Optimistic Methods of Concurrency Control, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> Jun. </month> <year> 1981, </year> <pages> pages 213-226. </pages>
Reference: [19] <author> Q. Lu and M. Satyanarayanan, </author> <title> Isolation-Only Transaction for Mobile Computing, </title> <journal> Operating Systems Review, </journal> <volume> 28(2), </volume> <month> May </month> <year> 1981, </year> <pages> pages 81-87. </pages>
Reference-contexts: Commits on any other copy of physical fragment are considered "locally committed" and can be rolled back if any conflicts arise. Thus, in our architecture any transaction operating on a non-master fragment is not guaranteed durability. This is similar to the isolation-only transaction model proposed in <ref> [19] </ref>, except that atomicity is automatically guaranteed by the local server on the client. This is because the local server guarantees "local" ACID properties on the local replica of the fragment. <p> Another way of saying this is that only the logical fragments associated with different hoard keys can overlap. 8 indexing is still required to support traditional queries 14 consisting of tuples with DEPTNUM with values in the range [0; : : : ; 9], <ref> [11; : : :; 19] </ref> and [20; : : :; 30] respectively. Each of the logical fragments for the Q i 's are realized using indexes.
Reference: [20] <author> K. Mogi and M. Kitsuregawa, </author> <title> Hot Mirroring: A Method of Hiding Parity Update Penalty and Degradation during Rebuilds for RAID5, </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <month> Jun. </month> <year> 1996, </year> <pages> pages 183-194. </pages>
Reference-contexts: Another way of saying this is that only the logical fragments associated with different hoard keys can overlap. 8 indexing is still required to support traditional queries 14 consisting of tuples with DEPTNUM with values in the range [0; : : : ; 9], [11; : : :; 19] and <ref> [20; : : :; 30] </ref> respectively. Each of the logical fragments for the Q i 's are realized using indexes.
Reference: [21] <author> L. B. Mummert, M. R. Ebling and M. Satyanarayanan, </author> <title> Exploiting Weak Connectivity for Mobile File Access, </title> <booktitle> Proceedings of the 15th ACM Symposium on Operating System Principles 29(5), </booktitle> <month> Dec. </month> <year> 1995, </year> <pages> pages 143-155. </pages>
Reference-contexts: These links can be used to perform limited synchronization between the client and the server, such as locking, tuple invalidation and trickle reintegration to reintegrate low volume updates <ref> [21] </ref>. This has interesting consequences for consistency management since some parts of the hoard can become "more" consistent than others over a period of time 10 . The reintegration model presented in this paper automatically prioritizes the reintegrating clients in the order in which they reconnect.
Reference: [22] <author> P. E. O'Neil, </author> <title> The Escrow Transactional Method, </title> <journal> ACM TODS 11(4), </journal> <month> Dec. </month> <year> 1986, </year> <pages> pages 405-430. </pages>
Reference: [23] <author> P. E. O'Neil, Database|Principles, </author> <title> Programming, and Performance, </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1994. </year>
Reference: [24] <author> M. Satyanarayanan, CODA: </author> <title> A Highly Available File System for a Distributed Workstation Environment, </title> <booktitle> Proceedings of the Second IEEE Workshop on Workstation Operating Systems, </booktitle> <month> Sep. </month> <year> 1989, </year> <pages> pages 447-459. </pages>
Reference-contexts: Whenever this client reconnects, local servers reconciles its replica with the servers copy by reintegrating any local updates. In this paper we use the terms hoard and local replica interchangeably. 1.1 File systems versus Databases This modified client-server model has been used for file systems such as CODA <ref> [24] </ref>, and has been extended to other applications using Application Specific Resolvers [17]. The granularity of hoarding in CODA is an entire file. The client is allowed to hoard a specified set of files, e.g., all files in a users home directory.
Reference: [25] <author> A. Silberschatz, H. Korth and S. Sudarshan, </author> <title> Database System Concepts, </title> <publisher> McGraw-Hill, </publisher> <year> 1997. </year>
Reference: [26] <author> M. Tamer Ozsu and P. Valduriez, </author> <title> Principles of Distributed Database Systems, </title> <publisher> Prentice Hall Inc., </publisher> <year> 1991. </year>
Reference-contexts: Thus the hoard-reintegrate database is a special case of a replicated database. Replicated database systems have already been studied in some depth in literature <ref> [2, 6, 26] </ref>. Unfortunately, all these systems assume that there is a persistent connection between all the replica servers and any disconnection is due to failure. Thus, these solutions work poorly in a mobile disconnected environment. We have considered the following options for hoarding: 1.
Reference: [27] <author> D. B. Terry, A. J. Demers, K. Petersen, M. J. Spreitzer, M. M. Theimer and B. B. Welch, </author> <title> Session Guarantees for Weakly Consistent Replicated Data, </title> <booktitle> Proceedings of the International Conference on Parallel and Distributed Information Systems (PDIS), </booktitle> <month> Sept. </month> <year> 1994, </year> <pages> pages 140-149. </pages>
Reference: [28] <author> G. Walborn and P. Chrysanthis, </author> <title> Supporting Semantics-Based Transaction Processing in Mobile Database Systems, </title> <booktitle> Proceedings of the 14th Symposium on Reliable Database Systems, </booktitle> <month> Sep. </month> <year> 1995. </year>
Reference: [29] <author> G. Walborn and P. Chrysanthis, </author> <title> Transaction Processing in Mobile Computing Environment, </title> <booktitle> IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <month> Oct. </month> <year> 1993, </year> <pages> pages 77-82. 25 </pages>
References-found: 29

