URL: http://www.cs.umd.edu/users/davew/omegaExp1.ps.Z
Refering-URL: http://www.cs.umd.edu/users/davew/pubs.html
Root-URL: 
Email: pugh@cs.umd.edu davew@cs.umd.edu  
Title: Experiences with Constraint-based Array Dependence Analysis  
Author: William Pugh David Wonnacott 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science, University of Maryland,  
Abstract: Array data dependence analysis provides important information for optimization of scientific programs. Array dependence testing can be viewed as constraint analysis, although traditionally general-purpose constraint manipulation algorithms have been thought to be too slow for dependence analysis. We have explored the use of exact constraint analysis, based on Fourier's method, for array data dependence analysis. We have found these techniques can be used without a great impact on total compile time. Furthermore, the use of general-purpose algorithms has allowed us to address problems beyond traditional dependence analysis. In this paper, we summarize some of the constraint manipulation techniques we use for dependence analysis, and discuss some of the reasons for our performance results. 
Abstract-found: 1
Intro-found: 1
Reference: [AI91] <author> Corinne Ancourt and Fran~cois Irigoin. </author> <title> Scanning polyhedra with DO loops. </title> <booktitle> In Proc. of the 3rd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 39-50, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: One key idea to to recognize that we can transform A ^ :B to A ^ :(gist B given A). Given several negated clauses, we simplify them all this way before choose one to negate and distribute. Secondly, previous techniques for negating non-convex constraints, based on quasi-linear constraints <ref> [AI91] </ref>, were discovered to be incomplete in certain pathological cases [PW93a]. We [PW93a] describe a method that is exact and complete for all cases. 2.5 Simplifying Arbitrary Presburger Formulas Utilizing the capabilities described above, we can simplify and/or verify arbitrary Presburger formulas. In general, this may be prohibitively expensive. <p> Michael Wolfe and Chau-Wen Tseng [WT92] discuss how to recognize when Fourier variable elimination may produce a conservative result, but do not give a method to verify the existence of integer solutions. These methods are decision tests and cannot return symbolic answers. Corinne Ancourt and Fran~cois Irigoin <ref> [AI91] </ref> describe the use of Fourier variable elimination for quantified variable elimination. They use this to generate loop bounds that scan convex polyhedra. They extend Fourier variable elimination to integers by introducing floor and ceiling operators.
Reference: [B + 89] <author> M. Berry et al. </author> <title> The PERFECT Club benchmarks: Effective performance evaluation of supercomputers. </title> <journal> International Journal of Supercomputing Applications, </journal> <volume> 3(3) </volume> <pages> 5-40, </pages> <month> March </month> <year> 1989. </year>
Reference: [Ble75] <author> W. W. Bledsoe. </author> <title> A new method for proving certain presburger formulas. In Advance Papers, </title> <booktitle> 4th Int. Joint Conference on Artif. Intell., </booktitle> <address> Tibilisi, Georgia, U.S.S.R, </address> <year> 1975. </year>
Reference-contexts: Cooper's algorithm does not require formulas to be transformed into disjunctive normal form and may be better for formulas that would be expensive to put into disjunctive normal form (although our methods for handling negation address this as well). The SUP-INF method <ref> [Ble75, Sho77] </ref> is a semi-decision procedure. It sometimes detects solutions when only real solutions exist and it cannot be used for symbolic quantified variable elimination. H.P. Williams [Wil76] describes an extension of Fourier elimination to integers. His scheme leads to a much more explosive growth than our scheme.
Reference: [Cha93] <author> Vijay Chandru. </author> <title> Variable elimination in linear constraints. </title> <journal> The Computer Journal, </journal> <volume> 36(5) </volume> <pages> 463-472, </pages> <year> 1993. </year>
Reference-contexts: Variable elimination is much less expensive within this restricted domain (known as LI (2)), even if we use the general algorithm. The number of constraints generated is bounded by a sub-exponential (though more than polynomial) function, rather than the 2 n=2 of the general case <ref> [Cha93, Nel78] </ref>. Second, our constraints contain many unit coefficients. When the non-zero coefficients in a sparse set of constraints are all 1, projection ends up producing many parallel constraints, which can then be eliminated by our simple test for redundant constraints.
Reference: [Coo72] <author> D. C. Cooper. </author> <title> Theorem proving in arithmetic with multiplication. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 7, </booktitle> <pages> pages 91-99. </pages> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: Although this makes their elimination exact, it may not be possible to eliminate additional variables from a set of constraints involving floor and ceiling operators. This limits their ability to check for the existence of integer solutions and remove redundant constraints. Cooper <ref> [Coo72] </ref> describes a complete algorithm for verifying and/or simplifying Presburger formulas. His method for quantified variable elimination always introduces disjunctions, even if the result is convex. We have not yet performed a head-to-head comparison of the Omega test with Cooper's algorithm.
Reference: [DE73] <author> G.B. Dantzig and B.C. Eaves. </author> <title> Fourier-Motzkin elimination and its dual. </title> <journal> Journal of Combinatorial Theory (A), </journal> <volume> 14 </volume> <pages> 288-297, </pages> <year> 1973. </year>
Reference-contexts: Since then, its capabilities and uses have grown substantially. In this section, we describe the various capabilities of the Omega test. The Omega test is based on an extension of Fourier variable elimination <ref> [DE73] </ref> to integer programming. Other researchers have suggested the use of Fourier variable elimination for dependence analysis [WT92, MHL91b] but only as a last resort after exact and fast, but incomplete, methods have failed to give decisive answers.
Reference: [Duf74] <author> R. J. Duffin. </author> <title> On fourier's analysis of linear inequality systems. </title> <booktitle> Mathematical Programming Study, </booktitle> <pages> pages 71-95, </pages> <year> 1974. </year>
Reference-contexts: Our techniques are based on an extension of Fourier variable elimination to integers. Many other researchers in the constraints field <ref> [Duf74, LL92, Imb93, JMSY93] </ref> have stated that direct application of Fourier's technique may be impractical because of the number of redundant constraints generated. <p> We have not experienced any significant problems with Fourier elimination generating redundant constraints, even though we have not implemented methods suggested <ref> [Duf74, Imb93, JMSY93] </ref> to control this problem. We believe that our extension of Fourier elimination to integers is much more efficient that described by [Wil76].
Reference: [GJ79] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freemand and Company, </publisher> <year> 1979. </year>
Reference: [HLL92] <author> Tien Huynh, Catherine Lassez, and Jean-Louis Lassez. </author> <title> Practical issues on the projection of polyhedral sets. </title> <journal> Annals of mathematics and artificial intelligence, </journal> <month> November </month> <year> 1992. </year>
Reference-contexts: It is almost certainly possible to improve Will-iams' method while using the same approach as Williams, but we know of no description of such an improvement. Jean-Louis Lassez <ref> [LHM89, LL92, HLL92] </ref> gives an alternative to Fourier variable elimination for elimination of existentially quantified variables. <p> Other researchers have found that Fourier's technique may be prohibitively expensive <ref> [HLL92, Imb93] </ref> for some sets of constraints, and have proposed either alternative methods for projection [HLL92] or methods to avoid generating so many redundant constraints [Imb93]. We have found Fourier's method to be efficient, and do not experience sub-stantial increases in the number of constraints. <p> Other researchers have found that Fourier's technique may be prohibitively expensive [HLL92, Imb93] for some sets of constraints, and have proposed either alternative methods for projection <ref> [HLL92] </ref> or methods to avoid generating so many redundant constraints [Imb93]. We have found Fourier's method to be efficient, and do not experience sub-stantial increases in the number of constraints. <p> We therefore attribute our observations in Section 4.1 to a combination of constraint set size and sparsity and the high frequency of unit coefficients. 5 Conclusions Other researchers <ref> [HLL92, Imb93] </ref> have been quite leary of applying Fourier variable elimination to sets of dense constraints. Our experience has lead us to believe that Fourier's method is quite efficient when applied to sparse constraints. Furthermore, we believe that sparse constraints arise in many applications.
Reference: [IJT91] <author> Fran~cois Irigoin, Pierre Jouvelot, and Remi Triolet. </author> <title> Semantical interproce-dural parallelization: An overview of the pips project. </title> <booktitle> In Proc. of the 1991 International Conference on Supercomputing, </booktitle> <pages> pages 244-253, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: = i 00 ) (1 = i = i 00 n) _ (1 i = i 00 = 2n) _ (1 i = i 00 2 ^ n = 1) Related Work Other researchers have proposed extensions to Fourier variable elimination as a decision method for array data dependence analysis <ref> [MHL91a, WT92, IJT91] </ref>. Lam et al. [MHL91a] extend Fourier variable elimination to integers by computing a sample solution, using branch and bound techniques if needed.
Reference: [Imb93] <author> Jean-Louis Imbert. </author> <title> Fourier's elimination: Which to choose? In PCPP 93, </title> <year> 1993. </year>
Reference-contexts: Our techniques are based on an extension of Fourier variable elimination to integers. Many other researchers in the constraints field <ref> [Duf74, LL92, Imb93, JMSY93] </ref> have stated that direct application of Fourier's technique may be impractical because of the number of redundant constraints generated. <p> We have not experienced any significant problems with Fourier elimination generating redundant constraints, even though we have not implemented methods suggested <ref> [Duf74, Imb93, JMSY93] </ref> to control this problem. We believe that our extension of Fourier elimination to integers is much more efficient that described by [Wil76]. <p> Other researchers have found that Fourier's technique may be prohibitively expensive <ref> [HLL92, Imb93] </ref> for some sets of constraints, and have proposed either alternative methods for projection [HLL92] or methods to avoid generating so many redundant constraints [Imb93]. We have found Fourier's method to be efficient, and do not experience sub-stantial increases in the number of constraints. <p> Other researchers have found that Fourier's technique may be prohibitively expensive [HLL92, Imb93] for some sets of constraints, and have proposed either alternative methods for projection [HLL92] or methods to avoid generating so many redundant constraints <ref> [Imb93] </ref>. We have found Fourier's method to be efficient, and do not experience sub-stantial increases in the number of constraints. Our empirical studies have shown that Fourier's method can be used in dependence analysis without a significant impact on total compile time [Pug92, PW93a]. <p> The top graph compares the effectiveness of Fourier's method and the techniques described by Imbert on sets of constraints in which the non-zero coefficients had random integer values between -10 and +10. Our implementation of Imbert's method <ref> [Imb93] </ref> of redundant constraint detection uses Theorem 10 of Fig. 5. Variable Elimination: 15 Constraints on 5 Variables [Imb93] to determine that some constraints are redundant. However, we do not use the more expensive comparison or matrical tests. <p> Our implementation of Imbert's method <ref> [Imb93] </ref> of redundant constraint detection uses Theorem 10 of Fig. 5. Variable Elimination: 15 Constraints on 5 Variables [Imb93] to determine that some constraints are redundant. However, we do not use the more expensive comparison or matrical tests. Imbert's method is clearly important for problems of this size when the initial number of constraints per variable is above 7. <p> We therefore attribute our observations in Section 4.1 to a combination of constraint set size and sparsity and the high frequency of unit coefficients. 5 Conclusions Other researchers <ref> [HLL92, Imb93] </ref> have been quite leary of applying Fourier variable elimination to sets of dense constraints. Our experience has lead us to believe that Fourier's method is quite efficient when applied to sparse constraints. Furthermore, we believe that sparse constraints arise in many applications.
Reference: [JMSY93] <author> J. Jaffar, M. J. Maher, P. J. Stuckey, and R. H. C. Yap. </author> <title> Projecting CLP(R) constraints. </title> <journal> New Generation Computing, </journal> 11(3/4):449-469, 1993. 
Reference-contexts: Our techniques are based on an extension of Fourier variable elimination to integers. Many other researchers in the constraints field <ref> [Duf74, LL92, Imb93, JMSY93] </ref> have stated that direct application of Fourier's technique may be impractical because of the number of redundant constraints generated. <p> We have not experienced any significant problems with Fourier elimination generating redundant constraints, even though we have not implemented methods suggested <ref> [Duf74, Imb93, JMSY93] </ref> to control this problem. We believe that our extension of Fourier elimination to integers is much more efficient that described by [Wil76].
Reference: [KP93] <author> Wayne Kelly and William Pugh. </author> <title> A framework for unifying reordering transformations. </title> <type> Technical Report CS-TR-3193, </type> <institution> Dept. of Computer Science, University of Maryland, College Park, </institution> <month> April </month> <year> 1993. </year>
Reference: [LHM89] <author> Jean-Louis Lassez, Tien Huynh, and Ken McAloon. </author> <title> Simplification and elimination of redundant linear arithmetic constraints. </title> <booktitle> In Proceedings of the North American Conference on Logic Programming, </booktitle> <pages> pages 37-51, </pages> <year> 1989. </year>
Reference-contexts: It is almost certainly possible to improve Will-iams' method while using the same approach as Williams, but we know of no description of such an improvement. Jean-Louis Lassez <ref> [LHM89, LL92, HLL92] </ref> gives an alternative to Fourier variable elimination for elimination of existentially quantified variables.
Reference: [LL92] <author> Catherine Lassez and Jean-Louis Lassez. </author> <title> Quantifier elimination for conjunctions of linear constraints via a convex hull algorithm. </title> <editor> In Bruce Don-ald, Deepak Kapur, and Joseph Mundy, editors, </editor> <booktitle> Symbolic and Numerical Computation for Artificial Intelligence. </booktitle> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: Our techniques are based on an extension of Fourier variable elimination to integers. Many other researchers in the constraints field <ref> [Duf74, LL92, Imb93, JMSY93] </ref> have stated that direct application of Fourier's technique may be impractical because of the number of redundant constraints generated. <p> It is almost certainly possible to improve Will-iams' method while using the same approach as Williams, but we know of no description of such an improvement. Jean-Louis Lassez <ref> [LHM89, LL92, HLL92] </ref> gives an alternative to Fourier variable elimination for elimination of existentially quantified variables.
Reference: [MHL91a] <author> D. E. Maydan, J. L. Hennessy, and M. S. Lam. </author> <title> Effectiveness of data dependence analysis. </title> <booktitle> In Proceedings of the NSF-NCRD Workshop on Advanced Compilation Techniques for Novel Architectures, </booktitle> <year> 1991. </year>
Reference-contexts: = i 00 ) (1 = i = i 00 n) _ (1 i = i 00 = 2n) _ (1 i = i 00 2 ^ n = 1) Related Work Other researchers have proposed extensions to Fourier variable elimination as a decision method for array data dependence analysis <ref> [MHL91a, WT92, IJT91] </ref>. Lam et al. [MHL91a] extend Fourier variable elimination to integers by computing a sample solution, using branch and bound techniques if needed. <p> Lam et al. <ref> [MHL91a] </ref> extend Fourier variable elimination to integers by computing a sample solution, using branch and bound techniques if needed.
Reference: [MHL91b] <author> D. E. Maydan, J. L. Hennessy, and M. S. Lam. </author> <title> Efficient and exact data dependence analysis. </title> <booktitle> In ACM SIGPLAN'91 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 1-14, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: In this section, we describe the various capabilities of the Omega test. The Omega test is based on an extension of Fourier variable elimination [DE73] to integer programming. Other researchers have suggested the use of Fourier variable elimination for dependence analysis <ref> [WT92, MHL91b] </ref> but only as a last resort after exact and fast, but incomplete, methods have failed to give decisive answers. <p> We proved [Pug92] that in cases where the fast but incomplete methods of Lam et al. <ref> [MHL91b] </ref> apply, the Omega test is guaranteed to have low-order polynomial time complexity. 2.1 Eliminating an Existentially Quantified Variable The basic operation of the Omega test is the elimination of an existentially quantified variable, also referred to as shadow-casting or projection.
Reference: [Nel78] <author> C. G. Nelson. </author> <title> An o(n logn ) algorithm for the two-variable-per-constraint linear programming satisfiablility problem. </title> <type> Technical Report AIM-319, </type> <institution> Stan-ford University, Department of Computer Science, </institution> <year> 1978. </year>
Reference-contexts: Variable elimination is much less expensive within this restricted domain (known as LI (2)), even if we use the general algorithm. The number of constraints generated is bounded by a sub-exponential (though more than polynomial) function, rather than the 2 n=2 of the general case <ref> [Cha93, Nel78] </ref>. Second, our constraints contain many unit coefficients. When the non-zero coefficients in a sparse set of constraints are all 1, projection ends up producing many parallel constraints, which can then be eliminated by our simple test for redundant constraints.
Reference: [Pug91] <author> William Pugh. </author> <title> Uniform techniques for loop optimization. </title> <booktitle> In 1991 International Conference on Supercomputing, </booktitle> <pages> pages 341-352, </pages> <address> Cologne, Germany, </address> <month> June </month> <year> 1991. </year>
Reference: [Pug92] <author> William Pugh. </author> <title> The Omega test: a fast and practical integer programming algorithm for dependence analysis. </title> <journal> Communications of the ACM, </journal> <volume> 8 </volume> <pages> 102-114, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: We have gone beyond simply checking for satisfiability of conjunctions of constraints to being able to manipulate arbitrary Presburger formulas. This has allowed us to address problems beyond traditional dependence analysis. In our previous papers <ref> [Pug92, PW93a] </ref>, we have presented timing results for our system on a variety of benchmark programs, and argued that our techniques are not prohibitively slow. <p> In this paper, we summarize some of the constraint manipulation techniques we use for dependence analysis, and discuss some of the reasons for our performance results. 2 The Omega Test The Omega test <ref> [Pug92] </ref> was originally developed to check if a set of linear constraints has an integer solution, and was initially used in array data dependence testing. Since then, its capabilities and uses have grown substantially. In this section, we describe the various capabilities of the Omega test. <p> Other researchers have suggested the use of Fourier variable elimination for dependence analysis [WT92, MHL91b] but only as a last resort after exact and fast, but incomplete, methods have failed to give decisive answers. We proved <ref> [Pug92] </ref> that in cases where the fast but incomplete methods of Lam et al. [MHL91b] apply, the Omega test is guaranteed to have low-order polynomial time complexity. 2.1 Eliminating an Existentially Quantified Variable The basic operation of the Omega test is the elimination of an existentially quantified variable, also referred to <p> This produces a set of constraints that has a solution if and only if there exists a real value of z that satisfies the original set of constraints. In <ref> [Pug92] </ref> and Figure 2 we show how to compute the "dark shadow" of a set of constraints: a set of constraints that, if it has solutions, implies the existence of an integer z such that the original set of constraints is satisfied. <p> The dark shadow of these constraints is 5 x 25. In fact, this equation has solutions for x = 3; 5 x 27 and x = 29. In <ref> [Pug92] </ref> and Figure 2 we give a method for generating an additional sets of constraints that would contain any solutions not contained in the dark shadow. These "splinters" still contain references to the eliminated variable, but also contain an equality constraint (i.e., are flat). <p> We have found Fourier's method to be efficient, and do not experience sub-stantial increases in the number of constraints. Our empirical studies have shown that Fourier's method can be used in dependence analysis without a significant impact on total compile time <ref> [Pug92, PW93a] </ref>. The average time required for memory-based analysis (as in Figure 1) was well under 1 millisecond per pair of references, and the average time for array data flow analysis a few milliseconds. <p> Under such situations, there cannot be more than O (n 2 ) nonparallel constraints over n variables, and our method needs no more then O (n 3 ) time to eliminate as many variables as desired <ref> [Pug92] </ref>. Finally, our constraint sets contain numerous equality constraints.
Reference: [PW92] <author> William Pugh and David Wonnacott. </author> <title> Going beyond integer programming with the Omega test to eliminate false data dependences. </title> <type> Technical Report CS-TR-3191, </type> <institution> Dept. of Computer Science, University of Maryland, College Park, </institution> <month> December </month> <year> 1992. </year> <note> An earlier version of this paper appeared at the SIGPLAN PLDI'92 conference. </note>
Reference: [PW93a] <author> William Pugh and David Wonnacott. </author> <title> An evaluation of exact methods for analysis of value-based array data dependences. </title> <booktitle> In Sixth Annual Workshop on Programming Languages and Compilers for Parallel Computing, </booktitle> <address> Port-land, OR, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: We have gone beyond simply checking for satisfiability of conjunctions of constraints to being able to manipulate arbitrary Presburger formulas. This has allowed us to address problems beyond traditional dependence analysis. In our previous papers <ref> [Pug92, PW93a] </ref>, we have presented timing results for our system on a variety of benchmark programs, and argued that our techniques are not prohibitively slow. <p> In the worst-case, this cannot be prevented. But we <ref> [PW93a] </ref> have described methods that are effective in dealing with these problems for the cases we encounter. One key idea to to recognize that we can transform A ^ :B to A ^ :(gist B given A). <p> Given several negated clauses, we simplify them all this way before choose one to negate and distribute. Secondly, previous techniques for negating non-convex constraints, based on quasi-linear constraints [AI91], were discovered to be incomplete in certain pathological cases <ref> [PW93a] </ref>. We [PW93a] describe a method that is exact and complete for all cases. 2.5 Simplifying Arbitrary Presburger Formulas Utilizing the capabilities described above, we can simplify and/or verify arbitrary Presburger formulas. In general, this may be prohibitively expensive. <p> Given several negated clauses, we simplify them all this way before choose one to negate and distribute. Secondly, previous techniques for negating non-convex constraints, based on quasi-linear constraints [AI91], were discovered to be incomplete in certain pathological cases <ref> [PW93a] </ref>. We [PW93a] describe a method that is exact and complete for all cases. 2.5 Simplifying Arbitrary Presburger Formulas Utilizing the capabilities described above, we can simplify and/or verify arbitrary Presburger formulas. In general, this may be prohibitively expensive. <p> We have found Fourier's method to be efficient, and do not experience sub-stantial increases in the number of constraints. Our empirical studies have shown that Fourier's method can be used in dependence analysis without a significant impact on total compile time <ref> [Pug92, PW93a] </ref>. The average time required for memory-based analysis (as in Figure 1) was well under 1 millisecond per pair of references, and the average time for array data flow analysis a few milliseconds. <p> When analyzing a set of constraints, we counted the number of variables, and counted (separately) the number of constraints that involved 1, 2 or 3+ variables. We then eliminated all redundant constraints, and recounted. We performed these tests over our dataflow benchmark set <ref> [PW93a] </ref>, which includes some of the NASA NAS kernels and some code from the Perfect Club # of constraints involving Averages when # vars kind 1 var 2 vars 3+ vars total initial 5.6 as given 2.9 3.3 1.4 7.6 nonredundant 2.0 2.1 0.9 5.0 final 2.4 as generated 1.8 0.5
Reference: [PW93b] <author> William Pugh and David Wonnacott. </author> <title> Static analysis of upper and lower bounds on dependences and parallelism. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <note> 1993. accepted for publication. </note>
Reference: [Sho77] <author> Robert E. Shostak. </author> <title> On the sup-inf method for proving presburger formulas. </title> <journal> Journal of the ACM, </journal> <volume> 24(4) </volume> <pages> 529-543, </pages> <month> October </month> <year> 1977. </year>
Reference-contexts: Cooper's algorithm does not require formulas to be transformed into disjunctive normal form and may be better for formulas that would be expensive to put into disjunctive normal form (although our methods for handling negation address this as well). The SUP-INF method <ref> [Ble75, Sho77] </ref> is a semi-decision procedure. It sometimes detects solutions when only real solutions exist and it cannot be used for symbolic quantified variable elimination. H.P. Williams [Wil76] describes an extension of Fourier elimination to integers. His scheme leads to a much more explosive growth than our scheme.
Reference: [Wil76] <author> H.P. Williams. </author> <title> Fourier-Motzkin elimination extension to integer programming problems. </title> <journal> Journal of Combinatorial Theory (A), </journal> <volume> 21 </volume> <pages> 118-123, </pages> <year> 1976. </year>
Reference-contexts: We have not experienced any significant problems with Fourier elimination generating redundant constraints, even though we have not implemented methods suggested [Duf74, Imb93, JMSY93] to control this problem. We believe that our extension of Fourier elimination to integers is much more efficient that described by <ref> [Wil76] </ref>. <p> The SUP-INF method [Ble75, Sho77] is a semi-decision procedure. It sometimes detects solutions when only real solutions exist and it cannot be used for symbolic quantified variable elimination. H.P. Williams <ref> [Wil76] </ref> describes an extension of Fourier elimination to integers. His scheme leads to a much more explosive growth than our scheme.
Reference: [WT92] <author> M. J. Wolfe and C. Tseng. </author> <title> The Power test for data dependence. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(5) </volume> <pages> 591-601, </pages> <month> September </month> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: In this section, we describe the various capabilities of the Omega test. The Omega test is based on an extension of Fourier variable elimination [DE73] to integer programming. Other researchers have suggested the use of Fourier variable elimination for dependence analysis <ref> [WT92, MHL91b] </ref> but only as a last resort after exact and fast, but incomplete, methods have failed to give decisive answers. <p> = i 00 ) (1 = i = i 00 n) _ (1 i = i 00 = 2n) _ (1 i = i 00 2 ^ n = 1) Related Work Other researchers have proposed extensions to Fourier variable elimination as a decision method for array data dependence analysis <ref> [MHL91a, WT92, IJT91] </ref>. Lam et al. [MHL91a] extend Fourier variable elimination to integers by computing a sample solution, using branch and bound techniques if needed. <p> Lam et al. [MHL91a] extend Fourier variable elimination to integers by computing a sample solution, using branch and bound techniques if needed. Michael Wolfe and Chau-Wen Tseng <ref> [WT92] </ref> discuss how to recognize when Fourier variable elimination may produce a conservative result, but do not give a method to verify the existence of integer solutions. These methods are decision tests and cannot return symbolic answers.
References-found: 26

