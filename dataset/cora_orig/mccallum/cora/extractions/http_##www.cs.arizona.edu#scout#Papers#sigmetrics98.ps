URL: http://www.cs.arizona.edu/scout/Papers/sigmetrics98.ps
Refering-URL: http://www.cs.arizona.edu/scout/publications.html
Root-URL: http://www.cs.arizona.edu
Email: facb,bradym,llpg@cs.arizona.edu  
Title: Predicting MPEG Execution Times  
Author: Andy C. Bavier A. Brady Montz Larry L. Peterson 
Address: Tucson, AZ 85716  
Affiliation: Department of Computer Science The University of Arizona  
Abstract: This paper reports on a set of experiments that measure the amount of CPU processing needed to decode MPEG-compressed video in software. These experiments were designed to discover indicators that could be used to predict how many cycles are required to decode a given frame. Such predictors can be used to do more accurate CPU scheduling. We found that by considering both frame type and size, it is possible to construct a linear model of MPEG decoding with R 2 values of 0.97 and higher. Moreover, this model can be used to predict decoding times at both the frame and packet level that are almost always accurate to within 25% of the actual decode times. This is a surprising result given the large variability in MPEG decoding times, and suggests that it is feasible to design systems that make quality of service guarantees for MPEG-encoded video. 
Abstract-found: 1
Intro-found: 1
Reference: [BMP97] <author> Andy Bavier, Brady Montz, and Larry Peter-son. </author> <title> Predicting MPEG execution times. </title> <type> Technical Report TR97-15, </type> <institution> The Department of Computer Science, University of Arizona, Tucson, Arizona, </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: FRAME TYPE LEN: Approximates the model described at the end of Section 3.1. Keeps the same per-type average as does FRAME TYPE, but adjusts this prediction to account for the slope of the cycles-per-byte line. The code fragment that implements FRAME TYPE LEN is given in <ref> [BMP97] </ref>. PACKET AVG: Predicts processing time for next packet based on the average processing time required by all previous packets that are part of this video stream. PACKET TYPE: Tracks the average number of cycles required for each macroblock type. <p> PACKET TYPE LEN: Approximates the composite model described at the end of Section 3.2. Similar to FRAME TYPE LEN except defined in terms of blocks-per-packet rather than bytes-per-frame. The code fragment that implements PACKET TYPE LEN is given in <ref> [BMP97] </ref>. 4.3 Evaluation We ran the six predictors on the videos identified in Table 1. This section evaluates the accuracy of the predictors on this sample set.
Reference: [BMP98] <author> Andy Bavier, David Mosberger, and Larry L. Pe-terson. </author> <title> Scheduling realtime and best effort paths in Scout. </title> <type> Technical Report TR98-3, </type> <institution> The Department of Computer Science, University of Ari-zona, Tucson, Arizona, </institution> <year> 1998. </year>
Reference-contexts: The latest acceptable start time for the decoding task is the deadline of that frame minus the length of time to decode that frame. Scheduling algorithms are now being designed to exploit such information <ref> [BMP98, NL97, GGV96] </ref>. This paper focuses on the fine-grain predictors that are suitable for scheduling, but in doing so, also lays the ground work for designing better load control mechanisms. <p> This makes EDF inappropriate when one is trying to mix realtime and non-realtime tasks. Scheduling both realtime and non-realtime tasks under load requires knowing how long a realtime task is going to run <ref> [BMP98, NL97, GGV96] </ref>.
Reference: [GGV96] <author> Pawan Goyal, Xingang Guo, and Harick Vin. </author> <title> A hierarchial CPU scheduler for multimedia operating systems. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 107122, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: The latest acceptable start time for the decoding task is the deadline of that frame minus the length of time to decode that frame. Scheduling algorithms are now being designed to exploit such information <ref> [BMP98, NL97, GGV96] </ref>. This paper focuses on the fine-grain predictors that are suitable for scheduling, but in doing so, also lays the ground work for designing better load control mechanisms. <p> This makes EDF inappropriate when one is trying to mix realtime and non-realtime tasks. Scheduling both realtime and non-realtime tasks under load requires knowing how long a realtime task is going to run <ref> [BMP98, NL97, GGV96] </ref>.
Reference: [LL73] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 1(20):4661, </volume> <month> January </month> <year> 1973. </year>
Reference-contexts: First, due to video's realtime constraints, each frame must be decoded by a certain time. It is only by knowing how long this thread will run that we can determine the latest time the thread must start executing. Classical realtime scheduling algorithms, such as Earliest Deadline First (EDF) <ref> [LL73] </ref>, do not require knowing the execution time, but they have the limitation of not operating well under load. This makes EDF inappropriate when one is trying to mix realtime and non-realtime tasks.
Reference: [MP96] <author> David Mosberger and Larry Peterson. </author> <title> Making paths explicit in the Scout operating system. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 73153168, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Also, a B-block can optionally be encoded with just one motion vector, rather than two. 2.2 Scout OS We measured MPEG decoding performance in the context of the Scout operating system <ref> [MP96] </ref>. Scout is a configurable OS explicitly designed to support data streams such as MPEG-compressed video. Specifically, Scout defines a path abstraction that encapsulates data as it moves through the system, for example, from input device to output device.
Reference: [MPFL96] <author> Joan Mitchell, William Pennebaker, Chad Fogg, and Didier LeGall. </author> <title> MPEG Video Compression Standard. </title> <publisher> Chapman and Hall, </publisher> <year> 1996. </year>
Reference-contexts: describe the execution environment in which the measurements were taken, and in which the resulting estimators were eventually employed. 2.1 MPEG The MPEG video compression standard defines a video stream as a sequence of still images (frames) that are displayed at some rate, for example, 30 frames per second (fps) <ref> [MPFL96] </ref>. Each frame is of a particular type: I frames (intra-picture), P frames (predicted picture) and B frames (bidirectional predicted picture). I frames are self-contained, complete images. P and B frames are encoded as differences from other reference frames. Only I and P frames may be used as reference frames.
Reference: [NL97] <author> Jason Nieh and Monica Lam. </author> <title> The design, implementation and evaluation of SMART: A sched-uler for multimedia applications. </title> <booktitle> In Proceedings of the Sixteenth Symposium on Operating System Principles, </booktitle> <pages> pages 184197, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: The latest acceptable start time for the decoding task is the deadline of that frame minus the length of time to decode that frame. Scheduling algorithms are now being designed to exploit such information <ref> [BMP98, NL97, GGV96] </ref>. This paper focuses on the fine-grain predictors that are suitable for scheduling, but in doing so, also lays the ground work for designing better load control mechanisms. <p> This makes EDF inappropriate when one is trying to mix realtime and non-realtime tasks. Scheduling both realtime and non-realtime tasks under load requires knowing how long a realtime task is going to run <ref> [BMP98, NL97, GGV96] </ref>.
References-found: 7

