URL: http://www.cs.ucsb.edu/~vigna/pub/lncs.ps.gz
Refering-URL: http://www.cs.ucsb.edu/~vigna/listpub.html
Root-URL: http://www.cs.ucsb.edu
Email: [cugola ghezzi vigna]@elet.polimi.it.  picco@polito.it.  
Phone: 2  
Title: Analyzing Mobile Code Languages  
Author: Gianpaolo Cugola Carlo Ghezzi Gian Pietro Picco and Giovanni Vigna 
Address: P.za L. Da Vinci 23, 20100 Milano, Italy  C.so Duca degli Abruzzi 24, 10129 Torino, Italy  
Affiliation: 1 Dip. Elettronica e Informazione, Politecnico di Milano  Dip. Automatica e Informatica, Politecnico di Torino  
Abstract: The growing importance of telecommunication networks has stimulated research on a new generation of programming languages. Such languages view the network and its resources as a global environment in which computations take place. In particular, they support the notion of code mobility. To understand, discuss, evaluate, and compare such languages, it is necessary to develop a new set of programming language concepts and/or extend the concepts that are used to deal with conventional languages. The purpose of this paper is to provide such framework. This is done hand-in-hand with a survey of a number of existing new languages. Keywords. Mobile code languages, distributed programming languages, process migration, run-time model.
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> J. Baumann, C. Tschudin, and J. Vitek, editors. </editor> <booktitle> Proceedings of the 2 nd ECOOP Workshop on Mobile Object Systems. </booktitle> <address> Dpunkt, </address> <year> 1996. </year>
Reference-contexts: MCAs based on this approach are composed of EUs that can move autonomously from CE to CE in order to accomplish some prescribed tasks. The definition of EU is similar to the definition of mobile object system given in <ref> [1] </ref>, but our definition is not biased towards the object-oriented paradigm. The "Code on Demand" approach. According to this approach, the code that describes the behavior of a component of an MCA can change over time.
Reference: 2. <author> A. Black, N. Hutchinson, E. Jul, and H. Levy. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: Traditional mechanisms, like RPC or sockets, are in fact either unsuitable or inefficient for the task. For example, the "Mobile Agent" approach demands for the capability of migrating EUs around a network. This has been investigated by many researchers in the OS [9] and small-scale distributed systems <ref> [2] </ref> areas, but they are far from being mainstream techniques in large-scale distributed systems. The approaches described above can be exploited by using the mechanisms embodied in a new generation of programming languages, which are usually referred to as mobile code languages (MCLs). <p> They can be regarded as languages for distributed systems, whose primary application domain is the creation of MCAs on large-scale distributed systems, like the Internet. These languages differ from other languages or middleware for distributed system programming (e.g., CORBA [12] and Emerald <ref> [2] </ref>) because they explicitly model the concept of separate execution environments and how code and computations move among these environments. <p> This initial work will be extended in three directions: first, we will extend our work to cover other languages that were not covered here. An example of such languages is Emerald <ref> [2] </ref>. Second, we will extend and refine our model to provide a formally defined abstract machine that can be used to specify the operational semantics of different MCLs. Work in this area is on-going.
Reference: 3. <author> N.S. Borenstein. </author> <title> EMail With A Mind of Its Own: The Safe-Tcl Language for Enabled Mail. Technical report, First Virtual Holdings, </title> <publisher> Inc, </publisher> <year> 1994. </year>
Reference-contexts: Obliq objects are local to interpreters but it is possible to move computations from one interpreter to another. Distributed lexical scoping is the glue of such roaming computations, allowing transparent access to objects distributed on a computer network. Safe-Tcl Developed by the authors of the Internet MIME standard, Safe-Tcl <ref> [3] </ref> is an extension of Tcl [20] conceived to support active e-mail. In active email, messages may include code to be executed when the recipient receives or reads the message.
Reference: 4. <author> L. Cardelli. Obliq: </author> <title> A language with distributed scope. </title> <type> Technical report, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> May </month> <year> 1995. </year> <title> 4 Different implementation of the Java Virtual Machine that perform JIT compilation are provided by several vendors and a JIT compiler was announced by Sun itself. </title>
Reference-contexts: Besides the technical issues involved in EU migration, agents and places offer an intriguing and intuitive metaphor for building distributed systems. Obliq Developed at DEC by Luca Cardelli, Obliq <ref> [4] </ref> is an untyped, object-based, lexically scoped, interpreted language. Obliq objects are local to interpreters but it is possible to move computations from one interpreter to another. Distributed lexical scoping is the glue of such roaming computations, allowing transparent access to objects distributed on a computer network.
Reference: 5. <author> A. Carzaniga, G. P. Picco, and G. Vigna. </author> <title> Designing Distributed Applications using Mobile Code Paradigms. </title> <booktitle> In Proceedings of the 1997 International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: According to this approach, based on the work described in [15], any component of an MCA can invoke services 1 An evaluation and classification of mobile code design paradigms and mobile code applications is the subject of a parallel work, described in <ref> [5] </ref>. provided by other components, that are distributed on the nodes of a net-work, by providing not only the input data needed to perform the service (like in a remote procedure call scheme) but also providing the code that describes how to perform the service. The "Mobile Agent" approach. <p> This paper does not discuss the pros and cons of these new approaches with respect to traditional ones, like the client-server paradigm, since this is out of the scope of this work (see <ref> [13, 5] </ref> for a preliminary contribution on this issue).
Reference: 6. <author> B. Thomsen et al. </author> <title> Facile Antigua Release Programming Guide. </title> <type> Technical Report ECRC-93-20, </type> <institution> European Computer-Industry Research Centre, Munich, Germany, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Tycoon enables the programmer to use different programming paradigms: functional and imperative programming are supported directly. Moreover, using the higher-order language features, several variants of the object-oriented programming style are supported. Facile Developed at ECRC in Munich, Facile <ref> [6] </ref> is a functional language that extends the Standard ML language with primitives for distribution, con currency and communication. In [16] a further extension to support mobile code programming is described, which introduces advanced translation techniques and strongly typed resource linking.
Reference: 7. <author> D. </author> <title> Chess et al. Itinerant Agents for Mobile Computing. </title> <type> Technical report, </type> <institution> IBM Research Division - T.J. Watson Research Center, </institution> <year> 1995. </year>
Reference-contexts: Moreover, moving EU should be able to authenticate the destination CE in order to be protected from spoofing of the destination site <ref> [7] </ref>. Once that EU and CEs have been mutually authenticated, the EU must be shipped from the source CE to the destination CE. Code travelling among CEs should be protected from tampering and unauthorized disclosure.
Reference: 8. <author> C. Ghezzi and M. Jazayeri. </author> <title> Programming Language Concepts. </title> <publisher> John Wiley and Sons, </publisher> <address> second edition, </address> <year> 1989. </year> <title> Third ed. </title> <publisher> forthcoming. </publisher>
Reference-contexts: A complete formal definition is the subject of our on-going research. In a conventional sequential programming language, the run-time view of a program is an executing unit (see Section 1) which consists of a code segment, that provides the static description of the program's behavior, and a program state <ref> [8] </ref>. The state contains the local data of all active routines together with control information, such as the value of the instruction pointer and the value of return points for all active routines. Control information allows EUs to continue their execution from the current state supporting routine calls and returns.
Reference: 9. <author> A. Goscinski. </author> <title> Distributed Operating Systems: The Logical Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Traditional mechanisms, like RPC or sockets, are in fact either unsuitable or inefficient for the task. For example, the "Mobile Agent" approach demands for the capability of migrating EUs around a network. This has been investigated by many researchers in the OS <ref> [9] </ref> and small-scale distributed systems [2] areas, but they are far from being mainstream techniques in large-scale distributed systems. The approaches described above can be exploited by using the mechanisms embodied in a new generation of programming languages, which are usually referred to as mobile code languages (MCLs).
Reference: 10. <author> J. Gosling and H. McGilton. </author> <title> The Java Language Environment: A White Paper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: They are: Java Developed by Sun Microsystems, Java <ref> [10, 21] </ref> is perhaps the language that raised most of the current debate on and expectations from mobile code. It turns out, however, that Java is perhaps the "less mobile" of the languages reviewed here.
Reference: 11. <author> R.S. Gray. </author> <title> Agent Tcl: A Transportable Agent System. </title> <booktitle> In Proceedings of the CIKM'95 Workshop on Intelligent Information Agents, </booktitle> <year> 1995. </year>
Reference-contexts: Instead, a kind of code mobility is achieved indirectly through a programmable dynamic code loading mechanism. Presently, most of the fundamental features of Safe-Tcl have been included in the latest release of Tcl/Tk. Agent Tcl Developed at the University of Darthmouth, Agent Tcl <ref> [11] </ref> provides a Tcl interpreter extended with support for EU migration. An executing Tcl script can move from one host to another with a single jump instruction.
Reference: 12. <institution> Object Management Group. Corba: Architecture and specification, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: They can be regarded as languages for distributed systems, whose primary application domain is the creation of MCAs on large-scale distributed systems, like the Internet. These languages differ from other languages or middleware for distributed system programming (e.g., CORBA <ref> [12] </ref> and Emerald [2]) because they explicitly model the concept of separate execution environments and how code and computations move among these environments.
Reference: 13. <author> C.G. Harrison, D.M. Chess, and A. Kershenbaum. </author> <title> Mobile Agents: Are They a Good Idea? Technical report, </title> <institution> IBM Research Division - T.J. Watson Research Center, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: This paper does not discuss the pros and cons of these new approaches with respect to traditional ones, like the client-server paradigm, since this is out of the scope of this work (see <ref> [13, 5] </ref> for a preliminary contribution on this issue).
Reference: 14. <author> D. Johansen, R. van Renesse, and F.B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System Version 1.0. </title> <type> Technical Report 95-23, </type> <institution> "University of Tromst and Cornell University", </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: An executing Tcl script can move from one host to another with a single jump instruction. A jump freezes the program execution context and transmits it to a different host which resumes the script execution from the instruction that follows the jump. TACOMA In TACOMA <ref> [14] </ref> (Tromst And COrnell Mobile Agents), the Tcl language is extended to include primitives that allow an EU running a Tcl script to request the execution of another Tcl script on a different host.
Reference: 15. <author> J.W. Stamos and D.K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: These applications will be called mobile code applications (MCAs). By examining current scientific work, the approaches followed to build MCAs can be roughly classified as follows 1 : The "Remote Evaluation" approach. According to this approach, based on the work described in <ref> [15] </ref>, any component of an MCA can invoke services 1 An evaluation and classification of mobile code design paradigms and mobile code applications is the subject of a parallel work, described in [5]. provided by other components, that are distributed on the nodes of a net-work, by providing not only the
Reference: 16. <author> F.C. Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> Technical Report ECRC-95-36, </type> <institution> European Computer-Industry Research Centre, Munich, Germany, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Moreover, using the higher-order language features, several variants of the object-oriented programming style are supported. Facile Developed at ECRC in Munich, Facile [6] is a functional language that extends the Standard ML language with primitives for distribution, con currency and communication. In <ref> [16] </ref> a further extension to support mobile code programming is described, which introduces advanced translation techniques and strongly typed resource linking. <p> Replication strategies can be further divided in: Static replication strategy. Some resources, called ubiquitous resources <ref> [16, 18] </ref> can be statically replicated in all CEs. System variables and user interface libraries are good examples of such resources. The original bindings to such resources are deleted and new default bindings are established with the local instances on the destination CE. Dynamic replication strategies. <p> Since Facile is statically scoped, both the data closure and the code closure of the function instance sent may be non-empty. These closures have to be attached to the migrating function. Therefore, dynamic replication by copy is adopted 2 . In addition, static replication is supported for ubiquitous values <ref> [16] </ref>. Obliq allows remote execution of procedures by means of execution engines which implement the CE concept. A thread, the Obliq EU, can request the execution of procedures on a remote execution engine. <p> In addition, to shorten compilation time on receipt in interactive applications, functions are compiled only when the application tries to invoke them, according to a lazy strategy <ref> [16] </ref>. Java uses a stack-based intermediate language, the Java Byte Code, which is interpreted by the Java Virtual Machine. The Byte Code is tested by a Byte Code verifier in order to watch for illegal instructions before interpretation.
Reference: 17. <author> General Magic. </author> <title> Telescript Language Reference. General Magic, </title> <month> October </month> <year> 1995. </year>
Reference-contexts: Telescript Developed by General Magic, Telescript <ref> [25, 17] </ref> is a rich, object-oriented language conceived for the development of large distributed applications, oriented in particular to the electronic market. Security has been one of the driving factors in the language design, together with the capability of migrating EUs (Telescript threads) while executing.
Reference: 18. <author> B. Mathiske, F. Matthes, and J. W. Schmidt. </author> <title> On Migrating Threads. </title> <type> Technical report, </type> <institution> Fachbereich Informatik Universitat Hamburg, </institution> <year> 1994. </year>
Reference-contexts: Each platform contains one or more EUs, together with an associative array (called dictionary) used to allow memory sharing among different EUs. Platforms are connected by channels which represent the communication path between different hosts. Tycoon The overall objective of the Tycoon <ref> [19, 18] </ref> project, developed at the University of Hamburg, is to offer a persistent programming environment for the development of data-intensive applications in open environments. The Tycoon Language (later on, simply "Tycoon") is used as the application and system programming language in the Tycoon environment. <p> Replication strategies can be further divided in: Static replication strategy. Some resources, called ubiquitous resources <ref> [16, 18] </ref> can be statically replicated in all CEs. System variables and user interface libraries are good examples of such resources. The original bindings to such resources are deleted and new default bindings are established with the local instances on the destination CE. Dynamic replication strategies. <p> Threads can be moved from a Tycoon virtual machine to another using the migrate primitive. The Tycoon virtual machine embodies the CE abstraction. As for the data space of the moving EU, Tycoon adopts dynamic replication by copy. The static replication strategy is also supported through ubiquitous resources <ref> [18] </ref>. In Agent Tcl, each EU is a Unix process running the language interpreter. The CE abstraction is implemented by the operating system extended with the language run-time support that manages the name space of agents and the interactions among different agents.
Reference: 19. <author> F. Matthes, S. Mussig, and J. W. Schmidt. </author> <title> Persistent Polymorphic Programming in Tycoon: An Introduction. </title> <type> Technical report, </type> <institution> Fachbereich Informatik Universitat Hamburg, </institution> <year> 1993. </year>
Reference-contexts: Each platform contains one or more EUs, together with an associative array (called dictionary) used to allow memory sharing among different EUs. Platforms are connected by channels which represent the communication path between different hosts. Tycoon The overall objective of the Tycoon <ref> [19, 18] </ref> project, developed at the University of Hamburg, is to offer a persistent programming environment for the development of data-intensive applications in open environments. The Tycoon Language (later on, simply "Tycoon") is used as the application and system programming language in the Tycoon environment.
Reference: 20. <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Distributed lexical scoping is the glue of such roaming computations, allowing transparent access to objects distributed on a computer network. Safe-Tcl Developed by the authors of the Internet MIME standard, Safe-Tcl [3] is an extension of Tcl <ref> [20] </ref> conceived to support active e-mail. In active email, messages may include code to be executed when the recipient receives or reads the message. Since code is evaluated in the recipient's environment, care must be taken to protect the user from malicious or erroneous code.
Reference: 21. <author> Sun Microsystems. </author> <title> The Java Language Specification, </title> <month> October </month> <year> 1995. </year>
Reference-contexts: They are: Java Developed by Sun Microsystems, Java <ref> [10, 21] </ref> is perhaps the language that raised most of the current debate on and expectations from mobile code. It turns out, however, that Java is perhaps the "less mobile" of the languages reviewed here.
Reference: 22. <author> J. Tardo and L. Valente. </author> <title> Mobile Agents Security and Telescript. </title> <type> General Magic Technical Report, </type> <year> 1995. </year>
Reference-contexts: In the latter case, security policies are hardwired in the language run-time support. Of all reviewed MCLs, Telescript provides the most powerful mechanisms to support security <ref> [22] </ref>. In Telescript, each thread object has attributes that can be used to determine its security-related characteristics. For example, attributes are provided to hold the authority of the thread, i.e., the real-world person or organization which it belongs to, and can be accounted for.
Reference: 23. <author> C. F. Tschudin. </author> <title> An Introduction to the M0 Messenger Language. </title> <institution> University of Geneva, Switzerland, </institution> <year> 1994. </year>
Reference-contexts: The script code is sent, together with some initialization data, to the destination host where it is evaluated. M0 Implemented at the University of Geneva, M0 <ref> [23] </ref> is a stack-based interpreted language that implements the concepts of messengers. Messengers, the M0 EUs, are sequences of instructions that are transmitted between platforms and unconditionally executed upon receipt.
Reference: 24. <author> Jan Vitek. </author> <title> Secure object spaces. </title> <booktitle> In Proceedings of the 2 nd ECOOP Workshop on Mobile Object Systems, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Integrity mechanisms ensure that the EU representation transmitted over the lines is not modified, either by malicious intent or by errors in the transmission process. Privacy mechanisms ensure that third parties not involved in interCE communication cannot read the information transmitted over the network. IntraCE security, as noted in <ref> [24] </ref>, encompasses security among different EUs, between EUs and the hosting CE, and between the CE and the supporting operating system. Most of these issues are addressed by access control techniques.
Reference: 25. <author> J.E. White. </author> <title> Mobile Agents. General Magic, </title> <year> 1995. </year>
Reference-contexts: Telescript Developed by General Magic, Telescript <ref> [25, 17] </ref> is a rich, object-oriented language conceived for the development of large distributed applications, oriented in particular to the electronic market. Security has been one of the driving factors in the language design, together with the capability of migrating EUs (Telescript threads) while executing.
References-found: 25

