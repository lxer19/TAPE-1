URL: ftp://ftp.cs.utexas.edu/pub/lam/final-1.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/NRL/network_security.html
Root-URL: 
Title: AUTHORIZATION IN DISTRIBUTED SYSTEMS: A NEW APPROACH 1  
Author: Thomas Y.C. Woo and Simon S. Lam 
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Note: Journal of Computer Security IOS Press 1  
Abstract: In most existing systems, authorization is specified using some low-level system-specific mechanisms, e.g., protection bits, capabilities and access control lists. We argue that authorization is an independent semantic concept that must be separated from implementation mechanisms and given a precise semantics. We propose a logical approach to representing and evaluating authorization. Specifically, we introduce a language for specifying policy bases. A policy base encodes a set of authorization requirements and is given a precise semantics based upon a formal notion of authorization policy. The semantics is computable, thus providing a basis for authorization evaluation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi, M. Burrows, B.W. Lampson, and G. Plotkin. </author> <title> A calculus for access control in distributed systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 706-734, </pages> <month> September </month> <year> 1993. </year> <note> An abbreviated version appeared in Advances in Cryptology | CRYPTO '91, pages 1-23, </note> <institution> Santa Barbara, California, </institution> <month> August 11-15 </month> <year> 1991. </year>
Reference-contexts: Her focus was more in identifying and understanding the problems. In this paper, we put forth Authorization in Distributed Systems: A New Approach 5 specific constructs that allow an administer to explicitly specify and differentiate these interpretations and schemes. The paper by Abadi, et al. <ref> [1] </ref> deals also with access control in a distributed system setting. They also make use of a logic, specifically, a modal logic together with a calculus of principals. Their goal, however, is different from ours. <p> Their logic is used to explain the meaning of roles and delegation, and also the operation of certain protocols. They do not study representation issues. In particular, the concept of a statement (standing for a specific access request) in their logic is fully abstract (i.e., uninterpreted) <ref> [1, p. 725] </ref>. In some sense, our work is complementary to theirs in that we investigate the structure of these statements and provide meanings to them. Lastly, concrete models such as those proposed in [8, 15, 24] address the same general concerns as ours, but for application-specific domains.
Reference: [2] <author> K.R. Apt, H.A. Blair, and A. Walker. </author> <title> Towards a theory of declarative knowlege. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Database and Logic Programming, </booktitle> <pages> pages 89-148. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1988. </year>
Reference-contexts: This idea can indeed be generalized and a notion of stratification can be defined on the set of distinguished atoms, such that a stratified base always possesses a unique extension. We omit the details here and refer the readers to <ref> [2, 10, 31] </ref>. 18 Thomas Y.C. Woo and Simon S. Lam The semantics of a base can also be given by first "factoring out" the effects of assignments and group relations. We formalize this below. Let f be a formula, I an assignment and G a group relation.
Reference: [3] <author> D.E. Bell and L.J. LaPadula. </author> <title> Secure computer system: Unified exposition and Multics interpretation. </title> <type> Technical Report ESD-TR-75-306, </type> <institution> Mitre Corporation, </institution> <month> March </month> <year> 1976. </year>
Reference-contexts: In Section 7, we introduce our language for specifying policy bases and describe its syntax and semantics as well as some guidelines for its usage. In Section 8, we provide some examples of policy bases, including the Bell-LaPadula model <ref> [3] </ref> and some inheritance rules. In Section 9, we discuss implementation considerations. This section is necessarily brief, and is intended only to give a general idea of how our framework can be put into practice. We are currently building a prototype implementation based on the ideas presented in this paper. <p> In particular, read (A; X) holds in each case. Authorization in Distributed Systems: A New Approach 23 8 Examples of Policy Bases In this section, we present two examples of using policy bases to specify authorization requirements. The first example is the Bell-LaPadula model (BLP) <ref> [3] </ref>. We present a straightforward formulation of the basic BLP model in the policy base notation and also an enhancement with need-to-know restrictions. The second example shows how to formalize inheritance properties (as illustrated by examples in Section 2). <p> Given a complete description of the group relation, the above policy base uniquely defines a strongly sound and strongly complete authorization policy that satisfies the simple and ?-security properties <ref> [3] </ref>. However, this basic model suffers from two drawbacks. First, the group relation must be completely defined in order to give a strongly complete authorization policy. Second, although positive authorizations that are granted do satisfy the simple and ?-security property, they violate the principle of minimal privileges [33].
Reference: [4] <author> P. Bieber and F. Cuppens. </author> <title> A logical view of secure dependencies. </title> <journal> Journal of Computer Security, </journal> <volume> 1(1) </volume> <pages> 99-129, </pages> <year> 1992. </year>
Reference-contexts: Lastly, in Section 10, we provide some concluding remarks. 2 Relation to Other Work Before relating this paper to other work, we would like to emphasize several points. First, our work is concerned with access control, and does not address information flow control <ref> [4, 13, 28] </ref>. Thus, the typical concerns in most security modeling work [12, 13, 27, 29] are orthogonal to the ones in this paper.
Reference: [5] <author> M. Bishop and L. Snyder. </author> <title> The transfer of information and authority in a protection system. </title> <booktitle> In Proceedings of the 7th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 45-54, </pages> <booktitle> Asilomar Conference Grounds, </booktitle> <address> Pacific Grove, California, </address> <month> December 10-12 </month> <year> 1979. </year>
Reference-contexts: In this sense, the model we use and the issues we investigate are very different from those studied in [16, 17, 25, 34, 35, 36]. For example, we do not study the problem of access rights propagation, commonly known as safety analysis <ref> [5, 6, 17] </ref>. Similarly, the creation and deletion of subjects and objects are not modeled within our framework. We stress, however, that this does not mean that our framework cannot be extended to handle these issues.
Reference: [6] <author> T.A. Budd. </author> <title> Safety in grammatical protection systems. </title> <journal> International Journal of Computer and Information Sciences, </journal> <volume> 12(6) </volume> <pages> 413-431, </pages> <year> 1983. </year> <title> Authorization in Distributed Systems: A New Approach 27 </title>
Reference-contexts: In this sense, the model we use and the issues we investigate are very different from those studied in [16, 17, 25, 34, 35, 36]. For example, we do not study the problem of access rights propagation, commonly known as safety analysis <ref> [5, 6, 17] </ref>. Similarly, the creation and deletion of subjects and objects are not modeled within our framework. We stress, however, that this does not mean that our framework cannot be extended to handle these issues.
Reference: [7] <author> D.E. Denning. </author> <title> Cryptography and Data Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: Woo and Simon S. Lam of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow <ref> [7, 13, 22] </ref>.) Conceptually, the rights of subjects to access objects can be stored in an access matrix [14, 20, 21], with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage <p> entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control lists (access rights stored by column), or some hybrid combination of these approaches <ref> [7, 9] </ref>. Distributed systems and the prevalent client-server style of computing give rise to new problems in the specification of authorization requirements. For examples: * New kinds of attributes need to be considered.
Reference: [8] <author> D.E. Denning, T.F. Lunt, R.R. Schell, M. Heckman, and W.R. Shockley. </author> <title> The SeaView formal security policy model. </title> <type> Technical Report A003, </type> <institution> Computer Science Laboratory, SRI International, </institution> <year> 1987. </year>
Reference-contexts: In some sense, our work is complementary to theirs in that we investigate the structure of these statements and provide meanings to them. Lastly, concrete models such as those proposed in <ref> [8, 15, 24] </ref> address the same general concerns as ours, but for application-specific domains.
Reference: [9] <author> M. Gasser. </author> <title> Building a Secure Computer System. </title> <publisher> Van Nostrand Reinhold Company, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control lists (access rights stored by column), or some hybrid combination of these approaches <ref> [7, 9] </ref>. Distributed systems and the prevalent client-server style of computing give rise to new problems in the specification of authorization requirements. For examples: * New kinds of attributes need to be considered. <p> Thus, it is important that such intentional incompleteness be allowed by the language semantics. Note that this strictly generalizes the idea of a reference monitor <ref> [9] </ref>, where no incompleteness is allowed. Third, authorization may be inconsistent. That is, it is possible for an authorization request to be both granted and denied.
Reference: [10] <author> M. Gelfond and V. Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <editor> In R. Kowalski and K. Bowen, editors, </editor> <booktitle> Logic Programming: Proceedings of the Fifth International Conference, </booktitle> <pages> pages 1070-1080. </pages> <publisher> The MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: This idea can indeed be generalized and a notion of stratification can be defined on the set of distinguished atoms, such that a stratified base always possesses a unique extension. We omit the details here and refer the readers to <ref> [2, 10, 31] </ref>. 18 Thomas Y.C. Woo and Simon S. Lam The semantics of a base can also be given by first "factoring out" the effects of assignments and group relations. We formalize this below. Let f be a formula, I an assignment and G a group relation. <p> Extended logic programs are a strict superset of general logic programs, because literals rather than just atoms are allowed in the program clauses. For extended logic programs, we have developed a paraconsistent semantics (expressed in terms of models) using ideas from stable model construction <ref> [10] </ref>. Our semantics is an extension to the one proposed in [11], and is similarly computable via reduction to general logic programs. A review of this semantics is given in Appendix B.
Reference: [11] <author> M. Gelfond and V. Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. New Generation Computing, </title> <address> 9(3,4):365-385, </address> <year> 1991. </year>
Reference-contexts: In this subsection, we present a semantics-preserving translation of a base B into an extended logic program B, thus reducing the computation of E I;G (B) to the computation of B <ref> [11] </ref>. We first introduce the concept of an extended logic program. <p> For extended logic programs, we have developed a paraconsistent semantics (expressed in terms of models) using ideas from stable model construction [10]. Our semantics is an extension to the one proposed in <ref> [11] </ref>, and is similarly computable via reduction to general logic programs. A review of this semantics is given in Appendix B.
Reference: [12] <author> J. Glasgow, G. MacEwen, and P. Panangaden. </author> <title> A logic for reasoning about security. </title> <booktitle> In Proceedings of the The Computer Security Foundations Workshop III, </booktitle> <pages> pages 2-13, </pages> <address> Franconia, New Hampshire, </address> <month> June 12-14 </month> <year> 1990. </year>
Reference-contexts: First, our work is concerned with access control, and does not address information flow control [4, 13, 28]. Thus, the typical concerns in most security modeling work <ref> [12, 13, 27, 29] </ref> are orthogonal to the ones in this paper. In particular, these references focus on modeling the abstract security properties of a system as a whole, while our work has a more narrow focus on authorization only.
Reference: [13] <author> J.A. Goguen and J. Meseguer. </author> <title> Security policies and security models. </title> <booktitle> In Proceedings of the 3rd IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 11-20, </pages> <address> Oakland, California, </address> <month> April 26-28 </month> <year> 1982. </year>
Reference-contexts: Woo and Simon S. Lam of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow <ref> [7, 13, 22] </ref>.) Conceptually, the rights of subjects to access objects can be stored in an access matrix [14, 20, 21], with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage <p> Lastly, in Section 10, we provide some concluding remarks. 2 Relation to Other Work Before relating this paper to other work, we would like to emphasize several points. First, our work is concerned with access control, and does not address information flow control <ref> [4, 13, 28] </ref>. Thus, the typical concerns in most security modeling work [12, 13, 27, 29] are orthogonal to the ones in this paper. <p> First, our work is concerned with access control, and does not address information flow control [4, 13, 28]. Thus, the typical concerns in most security modeling work <ref> [12, 13, 27, 29] </ref> are orthogonal to the ones in this paper. In particular, these references focus on modeling the abstract security properties of a system as a whole, while our work has a more narrow focus on authorization only.
Reference: [14] <author> G.S. Graham and P.J. Denning. </author> <title> Protection | principles and practice. </title> <booktitle> In Proceedings of the AFIPS Spring Joint Computer Conference, </booktitle> <volume> volume 40, </volume> <pages> pages 417-429, </pages> <address> Atlantic City, New Jersey, </address> <month> May 16-18 </month> <year> 1972. </year>
Reference-contexts: Lam of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow [7, 13, 22].) Conceptually, the rights of subjects to access objects can be stored in an access matrix <ref> [14, 20, 21] </ref>, with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control
Reference: [15] <author> P.P. Griffiths and B.W. Wade. </author> <title> An authorization mechanism for a relational database system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(3) </volume> <pages> 242-255, </pages> <year> 1976. </year>
Reference-contexts: In some sense, our work is complementary to theirs in that we investigate the structure of these statements and provide meanings to them. Lastly, concrete models such as those proposed in <ref> [8, 15, 24] </ref> address the same general concerns as ours, but for application-specific domains.
Reference: [16] <author> M.A. Harrison. </author> <title> Theoretical issues concerning protection in operating systems. </title> <editor> In M.C. Yovits, editor, </editor> <booktitle> Advances in Computers, </booktitle> <volume> volume 24, </volume> <pages> pages 61-100. </pages> <publisher> Academic Press, </publisher> <year> 1985. </year>
Reference-contexts: Existing models of authorization have not been designed to address these problems <ref> [16, 23, 30] </ref>. Furthermore, existing approaches are unsatisfactory in the following respect: authorization requirements can only be specified using some low-level system-specific mechanisms. <p> In other words, we do not model the dynamics of authorization. In this sense, the model we use and the issues we investigate are very different from those studied in <ref> [16, 17, 25, 34, 35, 36] </ref>. For example, we do not study the problem of access rights propagation, commonly known as safety analysis [5, 6, 17]. Similarly, the creation and deletion of subjects and objects are not modeled within our framework.
Reference: [17] <author> M.A. Harrison, W.L. Ruzzo, and J.D. Ullman. </author> <title> Protection in operating systems. </title> <journal> Communications of the ACM, </journal> <volume> 19(8) </volume> <pages> 461-471, </pages> <month> August </month> <year> 1976. </year>
Reference-contexts: In other words, we do not model the dynamics of authorization. In this sense, the model we use and the issues we investigate are very different from those studied in <ref> [16, 17, 25, 34, 35, 36] </ref>. For example, we do not study the problem of access rights propagation, commonly known as safety analysis [5, 6, 17]. Similarly, the creation and deletion of subjects and objects are not modeled within our framework. <p> In this sense, the model we use and the issues we investigate are very different from those studied in [16, 17, 25, 34, 35, 36]. For example, we do not study the problem of access rights propagation, commonly known as safety analysis <ref> [5, 6, 17] </ref>. Similarly, the creation and deletion of subjects and objects are not modeled within our framework. We stress, however, that this does not mean that our framework cannot be extended to handle these issues.
Reference: [18] <author> A.K. Jones. </author> <title> Protection mechanisms and the enforcement of security policies. </title> <editor> In R. Bayer, R.M. Graham, and G. Seegmuller, editors, </editor> <booktitle> Operating Systems An Advanced Course, chapter 3.C, </booktitle> <pages> pages 228-251. </pages> <publisher> Springer Ver-lag, </publisher> <year> 1979. </year>
Reference-contexts: The separation of policies from mechanisms has long been recognized as a fundamental tenet in system design <ref> [18, 33] </ref>. A policy specifies what is required, while a mechanism provides the actual enforcement. In the context of authorization, this means that a policy of authorization should have an independent semantics that is separated from its implementation in system-specific mechanisms.
Reference: [19] <author> S. Kramer. </author> <title> On incorporating access control lists into the Unix operating system. </title> <booktitle> In Proceedings of the Usenix Unix Security Workshop, </booktitle> <pages> pages 38-48, </pages> <address> Portland, Oregon, </address> <month> August 29-30 </month> <year> 1988. </year> <note> 28 Thomas Y.C. </note> <author> Woo and Simon S. </author> <note> Lam </note>
Reference-contexts: The semantics is computable via a translation to extended logic programs (see 2 A vivid example of this is the assortment of setuid/setgid function calls available in different flavors of Unix. 3 See for example <ref> [19] </ref> and the POSIX Security Draft Standard P1003.6 which discuss how to supplement Unix protection bits with access control lists. 4 Thomas Y.C. Woo and Simon S. Lam Theorem B in Section 7.3), thus providing a evaluation mechanism based on the interpretation of extended logic programs.
Reference: [20] <author> B.W. Lampson. </author> <title> Dynamic protection structures. </title> <booktitle> In Proceedings of the AFIPS Fall Joint Computer Conference, </booktitle> <volume> volume 35, </volume> <pages> pages 27-38, </pages> <address> Las Ve-gas, Nevada, </address> <month> November 18-20 </month> <year> 1969. </year>
Reference-contexts: Lam of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow [7, 13, 22].) Conceptually, the rights of subjects to access objects can be stored in an access matrix <ref> [14, 20, 21] </ref>, with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control
Reference: [21] <author> B.W. Lampson. </author> <title> Protection. </title> <booktitle> In Proceedings of the 5th Princeton Symposium on Information Sciences and Systems, </booktitle> <pages> pages 437-443, </pages> <institution> Princeton University, </institution> <month> March </month> <year> 1971. </year> <journal> Reprinted in ACM Operating Systems Review, </journal> <volume> 8(1) </volume> <pages> 18-24, </pages> <month> January </month> <year> 1974. </year>
Reference-contexts: Lam of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow [7, 13, 22].) Conceptually, the rights of subjects to access objects can be stored in an access matrix <ref> [14, 20, 21] </ref>, with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage of the sparseness of the matrix, and are based upon capabilities (access rights stored by row), access control
Reference: [22] <author> B.W. Lampson. </author> <title> A note on the confinement problem. </title> <journal> Communications of the ACM, </journal> <volume> 16(10) </volume> <pages> 613-615, </pages> <month> October </month> <year> 1973. </year>
Reference-contexts: Woo and Simon S. Lam of a subject is its rights to access objects. (Thus our view of authorization is limited to access control; we do not consider issues of covert channels and secure information flow <ref> [7, 13, 22] </ref>.) Conceptually, the rights of subjects to access objects can be stored in an access matrix [14, 20, 21], with rows corresponding to subjects, columns corresponding to objects, and matrix entries indicating various access rights. (See examples in Section 3.) Practical implementations of an access matrix usually take advantage
Reference: [23] <author> C.E. Landwehr. </author> <title> Formal models for computer security. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(3) </volume> <pages> 247-278, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: Existing models of authorization have not been designed to address these problems <ref> [16, 23, 30] </ref>. Furthermore, existing approaches are unsatisfactory in the following respect: authorization requirements can only be specified using some low-level system-specific mechanisms.
Reference: [24] <author> C.E. Landwehr, C.L. Heitmeyer, and J. McLean. </author> <title> A security model for military message systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 198-222, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: In some sense, our work is complementary to theirs in that we investigate the structure of these statements and provide meanings to them. Lastly, concrete models such as those proposed in <ref> [8, 15, 24] </ref> address the same general concerns as ours, but for application-specific domains.
Reference: [25] <author> R.J. Lipton and T.A. Budd. </author> <title> On classes of protection system. </title> <editor> In R.A. DeMillo, D.P. Dobkin, A.K. Jones, and R.J. Lipton, editors, </editor> <booktitle> Foundations of Secure Computations, </booktitle> <pages> pages 281-296. </pages> <publisher> Academic Press, </publisher> <year> 1978. </year>
Reference-contexts: In other words, we do not model the dynamics of authorization. In this sense, the model we use and the issues we investigate are very different from those studied in <ref> [16, 17, 25, 34, 35, 36] </ref>. For example, we do not study the problem of access rights propagation, commonly known as safety analysis [5, 6, 17]. Similarly, the creation and deletion of subjects and objects are not modeled within our framework.
Reference: [26] <author> T.F. Lunt. </author> <title> Access control policies: Some unanswered questions. </title> <journal> Computer & Security, </journal> <volume> 8(1) </volume> <pages> 43-54, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: We stress, however, that this does not mean that our framework cannot be extended to handle these issues. In this paper, we choose not to pursue these extensions because we are interested in other issues. In relating this paper to previous work, we observe that the work by Lunt <ref> [26] </ref> is most relevant to us. She raised a similar question of ambiguity in the interpretation of authorization policies. In particular, she examined different interpretations of denial and several conflict resolution schemes. Her focus was more in identifying and understanding the problems.
Reference: [27] <author> J. McLean. </author> <title> The algebra of security. </title> <booktitle> In Proceedings of the 9th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 2-7, </pages> <address> Oakland, California, </address> <month> April 18-21 </month> <year> 1988. </year>
Reference-contexts: First, our work is concerned with access control, and does not address information flow control [4, 13, 28]. Thus, the typical concerns in most security modeling work <ref> [12, 13, 27, 29] </ref> are orthogonal to the ones in this paper. In particular, these references focus on modeling the abstract security properties of a system as a whole, while our work has a more narrow focus on authorization only.
Reference: [28] <author> J. McLean. </author> <title> Security models and information flow. </title> <booktitle> In Proceedings of the 11th IEEE Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, Cal-ifornia, </address> <month> May 7-9 </month> <year> 1990. </year>
Reference-contexts: Lastly, in Section 10, we provide some concluding remarks. 2 Relation to Other Work Before relating this paper to other work, we would like to emphasize several points. First, our work is concerned with access control, and does not address information flow control <ref> [4, 13, 28] </ref>. Thus, the typical concerns in most security modeling work [12, 13, 27, 29] are orthogonal to the ones in this paper.
Reference: [29] <author> J. McLean. </author> <title> The specification and modeling of computer security. </title> <journal> Computer, </journal> <volume> 23(1) </volume> <pages> 9-16, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: First, our work is concerned with access control, and does not address information flow control [4, 13, 28]. Thus, the typical concerns in most security modeling work <ref> [12, 13, 27, 29] </ref> are orthogonal to the ones in this paper. In particular, these references focus on modeling the abstract security properties of a system as a whole, while our work has a more narrow focus on authorization only.
Reference: [30] <author> J.K. Millen. </author> <title> Models of multilevel computer security. </title> <editor> In M.C. Yovits, editor, </editor> <booktitle> Advances in Computers, </booktitle> <volume> volume 29, </volume> <pages> pages 1-45. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: Existing models of authorization have not been designed to address these problems <ref> [16, 23, 30] </ref>. Furthermore, existing approaches are unsatisfactory in the following respect: authorization requirements can only be specified using some low-level system-specific mechanisms.
Reference: [31] <author> T. Przymusinski. </author> <title> On the declarative and procedural semantics of logic programs. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(2) </volume> <pages> 167-205, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: This idea can indeed be generalized and a notion of stratification can be defined on the set of distinguished atoms, such that a stratified base always possesses a unique extension. We omit the details here and refer the readers to <ref> [2, 10, 31] </ref>. 18 Thomas Y.C. Woo and Simon S. Lam The semantics of a base can also be given by first "factoring out" the effects of assignments and group relations. We formalize this below. Let f be a formula, I an assignment and G a group relation.
Reference: [32] <author> R. Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1-2):81-132, </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: The language is essentially a many-sorted first-order language with a rule construct. The rule construct is similar to the default construct in default logic <ref> [32] </ref>; however, we give it a different semantics. The rule construct is useful for stating structural properties of authorization requirements. From some domain-specific considerations, we impose several restrictions on the kind of first-order formulas allowed.
Reference: [33] <author> J.H. Saltzer and M.D. Schroeder. </author> <title> The protection of information in computer systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> September </month> <year> 1975. </year> <title> Authorization in Distributed Systems: A New Approach 29 </title>
Reference-contexts: The separation of policies from mechanisms has long been recognized as a fundamental tenet in system design <ref> [18, 33] </ref>. A policy specifies what is required, while a mechanism provides the actual enforcement. In the context of authorization, this means that a policy of authorization should have an independent semantics that is separated from its implementation in system-specific mechanisms. <p> However, this basic model suffers from two drawbacks. First, the group relation must be completely defined in order to give a strongly complete authorization policy. Second, although positive authorizations that are granted do satisfy the simple and ?-security property, they violate the principle of minimal privileges <ref> [33] </ref>. We remedy this by adding need-to-know restrictions and denials by default.
Reference: [34] <author> R.S. Sandhu. </author> <title> The schematic protection model: Its definition and analysis for acyclic attenuating schemes. </title> <journal> Journal of the ACM, </journal> <volume> 35(2) </volume> <pages> 404-432, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: In other words, we do not model the dynamics of authorization. In this sense, the model we use and the issues we investigate are very different from those studied in <ref> [16, 17, 25, 34, 35, 36] </ref>. For example, we do not study the problem of access rights propagation, commonly known as safety analysis [5, 6, 17]. Similarly, the creation and deletion of subjects and objects are not modeled within our framework.
Reference: [35] <author> R.S. Sandhu. </author> <title> Expressive power of the schematic protection model. </title> <journal> Journal of Computer Security, </journal> <volume> 1(1) </volume> <pages> 59-98, </pages> <year> 1992. </year>
Reference-contexts: In other words, we do not model the dynamics of authorization. In this sense, the model we use and the issues we investigate are very different from those studied in <ref> [16, 17, 25, 34, 35, 36] </ref>. For example, we do not study the problem of access rights propagation, commonly known as safety analysis [5, 6, 17]. Similarly, the creation and deletion of subjects and objects are not modeled within our framework.
Reference: [36] <author> L. Snyder. </author> <title> Formal models of capability-based protection systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(3):172-181, </volume> <month> March </month> <year> 1981. </year>
Reference-contexts: In other words, we do not model the dynamics of authorization. In this sense, the model we use and the issues we investigate are very different from those studied in <ref> [16, 17, 25, 34, 35, 36] </ref>. For example, we do not study the problem of access rights propagation, commonly known as safety analysis [5, 6, 17]. Similarly, the creation and deletion of subjects and objects are not modeled within our framework.
Reference: [37] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authorization in distributed systems: A formal approach. </title> <booktitle> In Proceedings of the 13th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 33-50, </pages> <address> Oakland, California, </address> <month> May 4-6 </month> <year> 1992. </year>
Reference-contexts: The authority 1 This work was supported in part by NSA INFOSEC University Research Program under contract no. MDA 904-92-C5150 and in part by National Science Foundation grant no. NCR-9004464. A preliminary version of this paper was presented in <ref> [37] </ref>. Published in Journal of Computer Security, 1993. Postscript files of this and other papers of the Networking Research Laboratory are available from http://www.cs.utexas.edu/~lam/NRL. 2 Thomas Y.C. Woo and Simon S. <p> We call this type of composition hierarchical or vertical composition. The key difference between horizontal and vertical compositions is in their resolution of conflicts. A formal definition of these operators and their properties are still under investigation. Some preliminary ideas have been given in <ref> [37] </ref>. We are building a prototype implementation of the ideas in this paper. As we learn from our implementation experience, we may further refine our language 26 Thomas Y.C. Woo and Simon S. Lam for pragmatic or efficiency consideration. Specifically, we may restrict the language's expressive power.
Reference: [38] <author> T.Y.C. Woo and S.S. Lam. </author> <title> A framework for distributed authorization (extended abstract). </title> <booktitle> In Proceedings of the 1st ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 112-118, </pages> <address> Fairfax, Virginia, </address> <month> Novem-ber 3-5 </month> <year> 1993. </year>
Reference-contexts: The evaluation mechanism used in each policy server is based on an interpreter for general logic programs. In fact, a suitably modified Prolog interpreter is sufficient. A preliminary design of a distributed authorization service based on the ideas presented in this paper is given in <ref> [38] </ref>. 10 Concluding Remarks We have presented a new approach to representing and evaluating authorization. In our approach, a set of authorization requirements is specified declaratively by a policy base. Unlike most existing approaches, the semantics of authorization is defined independently and is separate from implementation mechanisms.
References-found: 38

