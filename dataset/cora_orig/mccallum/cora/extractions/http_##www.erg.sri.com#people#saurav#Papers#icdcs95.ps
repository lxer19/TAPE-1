URL: http://www.erg.sri.com/people/saurav/Papers/icdcs95.ps
Refering-URL: http://www.erg.sri.com/people/saurav/paper.html
Root-URL: 
Title: Distributed Pipeline Scheduling: End-to-End Analysis of Heterogeneous, Multi-Resource Real-Time Systems  
Author: Saurav Chatterjee and Jay Strosnider 
Address: Pittsburgh, PA 15213  
Affiliation: Department of Electrical Computer Engineering Carnegie Mellon University  
Abstract: This research was supported in part by a grant from the Office of Naval Research, in part by a grant from the Naval Research and Development Laboratory, and in part by a grant from Siemens Corporate Research. In 15th IEEE International Conference on Distributed Computing Systems, May 1995. Abstract This paper presents an hierarchical end-to-end analysis technique that decomposes the very complex heterogeneous multi-resource scheduling problem into a set of single resource scheduling problems with well defined interactions. We define heterogeneity both in resource types, e.g., CPU, and in scheduling policies, e.g., rate-monotonic scheduling. This analysis technique is one phase of our systems integration framework for designing large-scale, heterogeneous, distributed real-time systems whose timing properties can be strictly controlled and analyzed. This approach, denoted the Distributed Pipelining Framework, exploits the natural pipelining execution pattern found in a large number of continuous (periodic) applications executing over heterogenous resources. A teleconference application is used in this paper to show the utility of the approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bettati and J. Liu, </author> <booktitle> Algorithms for End-to-End Scheduling to Meet Deadlines Proceedings of the 2nd IEEE Conf. on Parallel and Distributed Systems, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Limitations included a target platform consisting of a single CPU and a disc, each executing the rate-monotonic scheduling paradigm. No end-to-end timing analysis was provided. Natale and Stankovic [13] provided a dual off-line/on-line framework for guaranteeing deadlines for processes communicating via synchronous primitives. Bettati and Liu <ref> [1] </ref> provided a set of heuristics for resource allocation and end-to-end stream analysis for homogeneous multi-processor systems. Applications were scheduled in a ow-shop manner.
Reference: [2] <author> S. Chatterjee and J. Strosnider, </author> <title> An Illustrative Example on Designing and Evaluating Multi-media Systems, </title> <booktitle> IS&T/ SPIE Multimedia Computing and Networking Conference, </booktitle> <month> Feb </month> <year> 1995. </year>
Reference-contexts: Note that these configuration parameters are tunable in the optimization phase of the Distributed Pipelining Framework. The pipeline stage inherits most of its attributes. Equations for both I/O and non-I/O pipeline stage attributes can be found in <ref> [2] </ref>. Pipeline stage deadlines, , are equal to the stage periods, . Having pipeline stage deadlines less than periods reduces the concurrency that can be supported by the resource.
Reference: [3] <author> S. Chatterjee and J. Strosnider, </author> <title> Engineering Complex Real-Time Systems, </title> <type> CMUCSC-95-2 Technical Report, </type> <institution> Carnegie Mellon University, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Finally, all processor pipeline buffers switch in lock-step whereas distributed pipeline buffers may switch at different times. These differences are summarized in Table 3 and described in more detail in <ref> [3] </ref>.
Reference: [4] <author> S. Chatterjee and J. Strosnider, </author> <title> Application Stream Ordering for Mapping Real-time Applications to a Heterogeneous, Distributed Target Platform, </title> <booktitle> 4th IEEE Workshop on Parallel and Distributed Real-time Systems, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: The Framework first maps each LASM onto the TPM to create a set of Target-Specific Application Streams (TSAS). The mapping phase first orders the LASMs using a multi-dimensional first-fit decreasing heuristic <ref> [4] </ref>. Next the ordered set of LASMs are mapped to system resources using a minimum path length algorithm which allocates resources to processing steps and exposes new I/O processing steps due to routing.
Reference: [5] <author> S. Chatterjee and J. Strosnider, </author> <title> Distributed Pipeline Scheduling: End-to-End Analysis of Heterogeneous, Multi-Resource Real-Time Systems, </title> <type> CMU Technical Report, </type> <year> 1995. </year>
Reference-contexts: This Section provides equations for end-to-end latency and resource schedulability checks. Buffer, input/output rate and jitter equations can be found in <ref> [5] </ref>. The proofs for Theorems 1 and 2 can be found in [5]. <p> This Section provides equations for end-to-end latency and resource schedulability checks. Buffer, input/output rate and jitter equations can be found in <ref> [5] </ref>. The proofs for Theorems 1 and 2 can be found in [5].
Reference: [6] <author> R. Gerber, S. Hong and M. Saksena, </author> <title> Guaranteeing End-to-End Timing Constraints by Calibrating Intermediate Processes, </title> <booktitle> IEEE Real Time Systems Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: Harbour, Klein and Lehoczky [8] provided a framework for analyzing an uni-processor resource executing precedence-constrained tasks with varying execution priorities and synchronization requirements. Jeffay [10] introduced a real-time producer/consumer paradigm for expressing task precedence-constraints and for reasoning about timing behavior of programs. Gerber, Hong and Saksena <ref> [6] </ref> provided a comprehensive uni-processor design methodology for guaranteeing application end-to-end timing requirements. There have been several papers on multi-resource cpu E cpu F Audio Board V ideo (solid line: non-ideal saturation) (dashed line: ideal saturation) (a) Resource Saturation (b) Latency TR-A scheduling.
Reference: [7] <author> S. Golestani, </author> <title> Congestion-Free Transmission of Real-Time Traffic in Packet Networks, </title> <booktitle> Proceedings of INFOCOM, </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Switch Time lock-step phase-delayed Table 3: Comparison between Processor and Distributed Pipelining support work-conserving pipelines where there is no ow control mechanism between successive pipeline stages. Such dataow approaches are prone to congestion <ref> [7] </ref> and in general are not analyzable. We therefore require ow control within the distributed pipeline approach. The results presented in this paper assume a double-buffered, stop-and-go ow control policy [7], but other rate control policies [16] can also be readily supported by the Framework. <p> Such dataow approaches are prone to congestion <ref> [7] </ref> and in general are not analyzable. We therefore require ow control within the distributed pipeline approach. The results presented in this paper assume a double-buffered, stop-and-go ow control policy [7], but other rate control policies [16] can also be readily supported by the Framework.
Reference: [8] <author> M. Harbour, M. Klein, and J. Lehoczky, </author> <title> Fixed Priority Scheduling of Periodic Tasks with Varying Execution Priority, </title> <booktitle> Proceedings of the 1991 Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Comparison to Other Approaches There has been a lot of recent activity in end-to-end design and analysis of real-time systems. A majority of this research has focused on end-to-end analysis over a set of precedence-constrained tasks/ sub-tasks executing on a single resource. Harbour, Klein and Lehoczky <ref> [8] </ref> provided a framework for analyzing an uni-processor resource executing precedence-constrained tasks with varying execution priorities and synchronization requirements. Jeffay [10] introduced a real-time producer/consumer paradigm for expressing task precedence-constraints and for reasoning about timing behavior of programs.
Reference: [9] <author> J. Huang and D. Du, </author> <title> Resource Management for Continuous Multimedia Database Applications, </title> <booktitle> IEEE Real Time Systems Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: There have been several papers on multi-resource cpu E cpu F Audio Board V ideo (solid line: non-ideal saturation) (dashed line: ideal saturation) (a) Resource Saturation (b) Latency TR-A scheduling. Malcom and Zhao [12], Verma [15], and Sathaye [14] explored end-to-end analysis of multi-hop network resources. Huang and Du <ref> [9] </ref> extended the uniprocessor real-time consumer/producer paradigm and provided a multi-dimensional bin-packing approach to resource allocation and task scheduling. Limitations included a target platform consisting of a single CPU and a disc, each executing the rate-monotonic scheduling paradigm. No end-to-end timing analysis was provided.
Reference: [10] <author> K. Jeffay, </author> <title> The Real-Time Producer/Consumer Paradigm: A paradigm for the construction of efficient, predictable real-time systems, </title> <booktitle> ACM/SIGAPP Symposium on Applied Computing, </booktitle> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: The first rule eliminates unnecessary buffering and minimizes latency <ref> [10] </ref>. The second rule is necessary TSPS i 1 k TSPS i k PIDS i k PODS i 1 k 1 PIIDS i k for any pipeline strategy to function correctly. The third rule is an essential feature of our divide and conquer strategy. <p> A majority of this research has focused on end-to-end analysis over a set of precedence-constrained tasks/ sub-tasks executing on a single resource. Harbour, Klein and Lehoczky [8] provided a framework for analyzing an uni-processor resource executing precedence-constrained tasks with varying execution priorities and synchronization requirements. Jeffay <ref> [10] </ref> introduced a real-time producer/consumer paradigm for expressing task precedence-constraints and for reasoning about timing behavior of programs. Gerber, Hong and Saksena [6] provided a comprehensive uni-processor design methodology for guaranteeing application end-to-end timing requirements.
Reference: [11] <author> P. M. Kogge, </author> <title> The Architecture of Pipelined Computers, </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: Distributed pipelining is similar to processor pipelining <ref> [11] </ref>. On the other hand, we denote our pipeline as a distributed pipeline because it generally executes over network resources. As a result, unlike a processor pipeline, a single global clock may not be present to clock every one of the distributed pipeline stages.
Reference: [12] <author> N. Malcom and W. Zhao, </author> <title> Guaranteeing Synchronous Messages with Arbitrary Deadline Constraints in an FDDI Network, </title> <booktitle> IEE Conf. on Local Computer Networks, </booktitle> <year> 1993. </year>
Reference-contexts: There have been several papers on multi-resource cpu E cpu F Audio Board V ideo (solid line: non-ideal saturation) (dashed line: ideal saturation) (a) Resource Saturation (b) Latency TR-A scheduling. Malcom and Zhao <ref> [12] </ref>, Verma [15], and Sathaye [14] explored end-to-end analysis of multi-hop network resources. Huang and Du [9] extended the uniprocessor real-time consumer/producer paradigm and provided a multi-dimensional bin-packing approach to resource allocation and task scheduling.
Reference: [13] <author> M. Natale and J. Stankovic, </author> <title> Dynamic End-to-End Guarantees in Distributed Real Time Systems, </title> <booktitle> IEEE Real Time Systems Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: and transformation rules that allow a designer to systematically map his applications to a distributed system composed of heterogeneous resources, (ii) pipeline scheduling policies that facilitates efficient resource usage and high system concurrency, and (iii) an hierarchical timing analysis strategy that decomposes the complex, heterogeneous, multi-resource system timing analysis problem <ref> [13] </ref> into a set of single resource scheduling and end-to-end latency problems. In this context, we define heterogeneity both in resource types, e.g., CPU, disc, etc., and in local (resource-specific) scheduling policies, e.g., rate-monotonic, round-robin, etc. Section 2 provides an overview of the Distributed Pipelining Framework. <p> Limitations included a target platform consisting of a single CPU and a disc, each executing the rate-monotonic scheduling paradigm. No end-to-end timing analysis was provided. Natale and Stankovic <ref> [13] </ref> provided a dual off-line/on-line framework for guaranteeing deadlines for processes communicating via synchronous primitives. Bettati and Liu [1] provided a set of heuristics for resource allocation and end-to-end stream analysis for homogeneous multi-processor systems. Applications were scheduled in a ow-shop manner.
Reference: [14] <author> S. Sathaye, </author> <title> Scheduling Real-Time Traffic in Packet Switched Networks, </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1993. </year>
Reference-contexts: Therefore, resource schedulability analysis next checks to see if this is indeed true. In this paper, we use the Degree of Schedulable Saturation <ref> [14] </ref>, , as the resource schedulability metric. However, the framework is able to accommodate any other nonbinary resource schedulability metric. <p> There have been several papers on multi-resource cpu E cpu F Audio Board V ideo (solid line: non-ideal saturation) (dashed line: ideal saturation) (a) Resource Saturation (b) Latency TR-A scheduling. Malcom and Zhao [12], Verma [15], and Sathaye <ref> [14] </ref> explored end-to-end analysis of multi-hop network resources. Huang and Du [9] extended the uniprocessor real-time consumer/producer paradigm and provided a multi-dimensional bin-packing approach to resource allocation and task scheduling. Limitations included a target platform consisting of a single CPU and a disc, each executing the rate-monotonic scheduling paradigm.
Reference: [15] <author> D. Verma, </author> <title> Guaranteed Performance Communication in High Speed Networks, </title> <type> Ph.D. Thesis, </type> <institution> University of California at Berkeley, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: There have been several papers on multi-resource cpu E cpu F Audio Board V ideo (solid line: non-ideal saturation) (dashed line: ideal saturation) (a) Resource Saturation (b) Latency TR-A scheduling. Malcom and Zhao [12], Verma <ref> [15] </ref>, and Sathaye [14] explored end-to-end analysis of multi-hop network resources. Huang and Du [9] extended the uniprocessor real-time consumer/producer paradigm and provided a multi-dimensional bin-packing approach to resource allocation and task scheduling.
Reference: [16] <author> H. Zhang and D. Ferrari, </author> <title> Rate-Controlled Service Disciplines, Journal of High Speed Networks 3(4), </title> <year> 1994. </year>
Reference-contexts: Such dataow approaches are prone to congestion [7] and in general are not analyzable. We therefore require ow control within the distributed pipeline approach. The results presented in this paper assume a double-buffered, stop-and-go ow control policy [7], but other rate control policies <ref> [16] </ref> can also be readily supported by the Framework.
References-found: 16

