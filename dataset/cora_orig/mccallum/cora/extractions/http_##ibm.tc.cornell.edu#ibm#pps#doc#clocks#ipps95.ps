URL: http://ibm.tc.cornell.edu/ibm/pps/doc/clocks/ipps95.ps
Refering-URL: http://ibm.tc.cornell.edu/ibm/pps/doc/
Root-URL: http://www.tc.cornell.edu
Title: Time Synchronization on SP1 and SP2 Parallel Systems  
Author: Bulent Abali and Craig B. Stunkel 
Affiliation: IBM Thomas J. Watson Research Center,  
Date: April 1995  
Address: Santa Barbara, CA,  P.O.Box 218, Yorktown Heights, NY 10598  
Note: in Proceedings of the 9th International Parallel Processing Symposium,  
Abstract: We describe an experimental time utility for synchronizing the operating system clocks on the SP1 and SP2 parallel system nodes. It synchronizes the node clocks typically within 5 microseconds of each other utilizing the synchronous feature of the SP1 and SP2 interconnection network. This is 2 to 3 orders of magnitude better than what can be achieved by previous methods. Synchronized clocks are useful for parallel program performance measurement and tuning, parallel program tracing and debugging, and gang scheduling of parallel processes, to name a few. We also measure the performance of a widely used time synchronization utility using the SP1 and SP2 interconnection network. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. B. Stunkel, D. G. Shea, D. G. Grice, P. H. Hochschild, and M. Tsao, </author> <title> "The SP1 high-performance switch," </title> <booktitle> in Proc. 1994 Scalable High-Performance Computing Conference, </booktitle> <pages> pp. 150-157, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: We implemented an experimental time utility (a daemon) called sptimed for synchronizing the AIX 1 operating system (OS) clocks on SP1 <ref> [1, 2, 3] </ref> and SP2 parallel system nodes. The daemon synchronizes the processor node (i.e. OS) clocks typically within 5 microseconds (s) of each other. This is 2 to 3 orders of magnitude better than previous methods used in UNIX workstations. <p> The daemon synchronizes the processor node (i.e. OS) clocks typically within 5 microseconds (s) of each other. This is 2 to 3 orders of magnitude better than previous methods used in UNIX workstations. The sptimed daemon makes use of the SP1 and SP2 interconnection network, called "the Switch" <ref> [1] </ref>, to achieve this kind of performance. The Switch has an unusual feature: a set of counters that are synchronized within 200 nanoseconds (ns) throughout the network. This feature simplifies the well-known clock synchronization problem encountered in distributed systems [4]. <p> It is not necessary to align the phase of the oscillator signal received by each element. Instead, using adjustable delay lines in the data paths, each element adjusts the phase of its data by the process of tuning <ref> [2, 1] </ref> such that data transmission is synchronous from an output port to the corresponding input port of a neighboring Switch element. This allows both the oscillator signal links and the data links to be of arbitrary length up to the limits posed by reliability and protocol considerations.
Reference: [2] <author> C. B. Stunkel, D. G. Shea, B. Abali, M. M. Den-neau, P. H. Hochschild, D. J. Joseph, B. J. Nathanson, M. Tsao, and P. R. Varker, </author> <booktitle> "Architecture and implementation of Vulcan," in Proc. 8th Int. Parallel Processing Symp., </booktitle> <pages> pp. 268-274, </pages> <month> April </month> <year> 1994. </year> <note> (An extended version of this paper is also available as Research Report RC19492 from the IBM T. J. </note> <institution> Watson Research Center, </institution> <month> Sept. </month> <year> 1993.). </year>
Reference-contexts: We implemented an experimental time utility (a daemon) called sptimed for synchronizing the AIX 1 operating system (OS) clocks on SP1 <ref> [1, 2, 3] </ref> and SP2 parallel system nodes. The daemon synchronizes the processor node (i.e. OS) clocks typically within 5 microseconds (s) of each other. This is 2 to 3 orders of magnitude better than previous methods used in UNIX workstations. <p> Switch|based upon the Vulcan prototype developed at IBM Research <ref> [2] </ref>|is a bidirectional multistage interconnection network (MIN). In a bidirectional MIN [7, 8] each communication link comprises two channels which carry data in opposite directions. The Switch consists of two types of elements|8 port switch chips and single port MSMU chips [2]. The MSMU chip on each node serves as an interface between the Switch and the RISC System/6000 processor. 2 Each port consists of an 8-bit input and an 8-bit output. <p> It is not necessary to align the phase of the oscillator signal received by each element. Instead, using adjustable delay lines in the data paths, each element adjusts the phase of its data by the process of tuning <ref> [2, 1] </ref> such that data transmission is synchronous from an output port to the corresponding input port of a neighboring Switch element. This allows both the oscillator signal links and the data links to be of arbitrary length up to the limits posed by reliability and protocol considerations. <p> Since all network elements are driven by a common oscillator, the ATCs are drift free. Synchronization of ATCs along with other Switch initialization functions are integrated into a software package called the Worm which runs on an arbitrarily selected network node designated as the service processor <ref> [2] </ref>. 2 The Memory & Switch Management Unit (MSMU) also manages the memory of the communication adapter card it resides on. <p> valid measurements obtainable (i.e. round-trip delays measured to/from the service processor.) The SP1 and SP2 machines impose an additional requirement on each link's effective latency due to specialized operations that are keyed to the ATC and that are also dependent upon link data arriving within an expected 16 cycle window <ref> [2] </ref>. <p> The time synchronizing daemon sptimed uses the synchronized Absolute Time Counters (ATC) of the Switch as a global time reference to adjust the OS clocks. The ATCs are synchronized within 200 ns throughout the Switch as explained before. Each processor can access the ATC on the MSMU chip <ref> [2] </ref> that serves as an interface between the Switch and the processor node. Note that the tightly synchronized ATCs do not make the OS clocks obsolete; because there are many existing user and system applications, utilities, and the operating system itself that rely on the OS clock.
Reference: [3] <author> B. Abali and C. Aykanat, </author> <title> "Routing algorithms for IBM SP1," </title> <booktitle> Lecture Notes in Computer Science, Springer-Verlag, </booktitle> <volume> vol. 853, </volume> <pages> pp. 161-175, </pages> <year> 1994. </year>
Reference-contexts: We implemented an experimental time utility (a daemon) called sptimed for synchronizing the AIX 1 operating system (OS) clocks on SP1 <ref> [1, 2, 3] </ref> and SP2 parallel system nodes. The daemon synchronizes the processor node (i.e. OS) clocks typically within 5 microseconds (s) of each other. This is 2 to 3 orders of magnitude better than previous methods used in UNIX workstations.
Reference: [4] <author> L. Lamport, </author> <title> "Time, clocks, and the ordering of events in a distributed system," </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, </volume> <pages> pp. 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: The Switch has an unusual feature: a set of counters that are synchronized within 200 nanoseconds (ns) throughout the network. This feature simplifies the well-known clock synchronization problem encountered in distributed systems <ref> [4] </ref>. In this paper, we describe the algorithm used for synchronizing the Switch counters, the sptimed daemon for synchronizing the OS clocks, and we present the results obtained. <p> The ATCs facilitate a closely synchronized, non-drifting global time reference available to all the processor nodes, and thus they simplify the well-known clock synchronization problem encountered in distributed systems <ref> [4] </ref>. The ATCs primary function is to enable the Switch to synchronously cycle between its two primary modes of operation called the run mode for normal data transfer and the service mode for servicing the network.
Reference: [5] <author> D. L. Mills, </author> <title> "Internet Time Synchronization: The Network Time Protocol," </title> <journal> IEEE Trans. Commun., </journal> <volume> vol. 39, </volume> <pages> pp. 1482-1493, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: In this paper, we describe the algorithm used for synchronizing the Switch counters, the sptimed daemon for synchronizing the OS clocks, and we present the results obtained. We also characterize the performance of a widely used time synchronization utility called the Network Time Protocol (NTP) <ref> [5] </ref> and compare the results. <p> We have observed drifts of as much as 10s=s in practice. Clock synchronization is achieved|to a degree|on most UNIX workstations today either by manual adjustment or by time synchronizing daemons such as the Network Time Protocol (NTP) and the timed daemon of 4.3BSD <ref> [5, 6] </ref>. Time synchronizing daemons are specialized software for distributing and receiving time over local area networks (LAN). A time server or a hierarchy of time servers periodically distributes the current time to client nodes which can then adjust their clocks accordingly. <p> In our scheme, the master node shown in Fig. 3 is a "time gateway" that adjusts its OS clock periodically to track the world time. We assume that these adjustments are made either by NTP <ref> [5] </ref> or by some other time daemon. Thus, sptimed running on the master node only reads the clock; it does not adjust it. <p> Note that the results presented here are for the AIX operating system port of the NTP software. Therefore, the results may not necessarily represent the performance of NTP on all hardware and software platforms. The results for the 4.3BSD timed <ref> [5] </ref> daemon (not reported here) were worse than for NTP.
Reference: [6] <author> W. R. Stevens, </author> <title> UNIX Network Programming. </title> <address> Engle-wood Cliffs, NJ: </address> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: We have observed drifts of as much as 10s=s in practice. Clock synchronization is achieved|to a degree|on most UNIX workstations today either by manual adjustment or by time synchronizing daemons such as the Network Time Protocol (NTP) and the timed daemon of 4.3BSD <ref> [5, 6] </ref>. Time synchronizing daemons are specialized software for distributing and receiving time over local area networks (LAN). A time server or a hierarchy of time servers periodically distributes the current time to client nodes which can then adjust their clocks accordingly. <p> Likewise the switch oscillator frequency may change due to temperature and voltage variations. We implemented broadcasting using the UDP/IP (User Datagram Protocol) communication protocol <ref> [6] </ref>. The UDP/IP simplifies broadcasting on a local LAN segment such as the ethernet shown in Fig. 3. Slave sptimed daemons keep a local copy of the most recently broadcast constants a and b. Slave daemons are dormant most of the time.
Reference: [7] <author> G. J. Lipovski and M. Malek, </author> <title> Parallel Computing: Theory and Comparisons. </title> <address> New York, NY: </address> <publisher> Wiley & Sons, </publisher> <year> 1987. </year>
Reference-contexts: In this section, we give an overview of the Switch architecture and we describe the algorithm for synchronizing the ATCs. 2.1 Switch Architecture The Switch|based upon the Vulcan prototype developed at IBM Research [2]|is a bidirectional multistage interconnection network (MIN). In a bidirectional MIN <ref> [7, 8] </ref> each communication link comprises two channels which carry data in opposite directions. The Switch consists of two types of elements|8 port switch chips and single port MSMU chips [2].
Reference: [8] <author> I. D. Scherson and C.-H. Chien, </author> <title> "Least common ancestor networks," </title> <booktitle> in Proc. 7th Int. Parallel Processing Symp., </booktitle> <pages> pp. 507-513, </pages> <year> 1993. </year>
Reference-contexts: In this section, we give an overview of the Switch architecture and we describe the algorithm for synchronizing the ATCs. 2.1 Switch Architecture The Switch|based upon the Vulcan prototype developed at IBM Research [2]|is a bidirectional multistage interconnection network (MIN). In a bidirectional MIN <ref> [7, 8] </ref> each communication link comprises two channels which carry data in opposite directions. The Switch consists of two types of elements|8 port switch chips and single port MSMU chips [2].

References-found: 8

