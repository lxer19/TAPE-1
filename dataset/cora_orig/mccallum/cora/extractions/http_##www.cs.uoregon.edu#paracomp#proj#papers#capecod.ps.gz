URL: http://www.cs.uoregon.edu/paracomp/proj/papers/capecod.ps.gz
Refering-URL: http://www.cs.uoregon.edu/paracomp/proj/tau/papers.html
Root-URL: http://www.cs.uoregon.edu
Email: fmohr,malonyg@cs.uoregon.edu  fbeckman,gannong@cs.indiana.edu  
Title: Program Analysis and Tuning Tools for a Parallel Object Oriented Language: An Experiment with the
Author: Allen Malony, Bernd Mohr Peter Beckman, Dennis Gannon 
Affiliation: University of Oregon  Indiana University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Knuth, </author> <booktitle> The art of computer programming, </booktitle> <volume> Vol. </volume> <month> 3, </month> <title> Searching and Sorting, </title> <address> Reading, Mass., </address> <publisher> Addison-Wesley Pub. Co., </publisher> <year> 1968. </year>
Reference-contexts: See Knuth <ref> [1] </ref> for details.
Reference: [2] <author> F. Bodin, P. Beckman, D. Gannon, J. Gotwals, S. Narayana, S. Srinivas, B. Winnicka, Sage++: </author> <title> An Object Oriented Toolkit and Class Library for Building Fortran and C++ Restructuring Tools, </title> <booktitle> Proc. </booktitle> <address> Oonski '94, Oregon, </address> <year> 1994. </year>
Reference-contexts: These language-level objects appear in all t tools. By plan, t was designed and developed in concert with the pC ++ language system. It leverages pC ++ language technology, especially in its use of the Sage ++ toolkit <ref> [2] </ref> as an interface to the pC ++ compiler for instrumentation and for accessing properties of program objects. t is also integrated with the pC ++ runtime system for profiling and tracing support. Because pC ++ is intended to be portable, the tools are built to be portable as well.
Reference: [3] <author> R. Ferrell and E. Bertschinger, </author> <title> Particle-Mesh Methods on the Connection Machine, </title> <journal> International Journal of Modern Physics C, </journal> <year> 1993. </year> <month> 15 </month>
Reference-contexts: We illustrate the use of these tools from the perspective of the design and evaluation of a single application in pC ++ : a bitonic sort module that is used as part of a large N-Body simulation of cosmological evolution <ref> [3] </ref>. In the sections that follow we will demonstrate how the tools were used to analyze this module. Section 3 gives a brief description of the algorithm. Sections 4 and 5 show how the static analysis tools illustrate the structure of the program.
Reference: [4] <author> J. Ousterhout, </author> <title> Tcl: An Embeddable Command Language, </title> <booktitle> Proc. 1990 Winter USENIX Conf. </booktitle>
Reference-contexts: Because pC ++ is intended to be portable, the tools are built to be portable as well. C ++ and C are used to ensure portable and efficient implementation, and similar reasons led us to choose Tcl/Tk <ref> [4, 5] </ref> for the graphical interface. The t tools are implemented as graphical hypertools. While the tools are distinct, providing unique capabilities, they can act in combination to provide enhanced functionality.
Reference: [5] <author> J. Ousterhout, </author> <title> An X11 Toolkit Based on the Tcl Language, </title> <booktitle> Proc. 1991 Winter USENIX Conf. </booktitle>
Reference-contexts: Because pC ++ is intended to be portable, the tools are built to be portable as well. C ++ and C are used to ensure portable and efficient implementation, and similar reasons led us to choose Tcl/Tk <ref> [4, 5] </ref> for the graphical interface. The t tools are implemented as graphical hypertools. While the tools are distinct, providing unique capabilities, they can act in combination to provide enhanced functionality.
Reference: [6] <author> S. Hackstadt, A. Malony, </author> <title> Next-Generation Parallel Performance Visualization: A Pro-totyping Environment for Visualization Development, </title> <booktitle> Proc. Parallel Architectures and Languages Europe, (PARLE), </booktitle> <address> Athens, Greece, </address> <year> 1994. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 2. They include the integrated t tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [6, 7, 8, 9] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution.
Reference: [7] <author> V. Herrarte, E. Lusk, </author> <title> Studying Parallel Program Behavior with Upshot, </title> <type> Technical Report ANL-91/15, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 2. They include the integrated t tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [6, 7, 8, 9] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution.
Reference: [8] <author> B. Mohr, </author> <title> Standardization of Event Traces Considered Harmful or Is an Implementation of Object-Independent Event Trace Monitoring and Analysis Systems Possible?, </title> <booktitle> Proc. CNRS-NSF Workshop on Environments and Tools For Parallel Scientific Computing, </booktitle> <address> St. Hilaire du Touvet, France, Elsevier, </address> <booktitle> Advances in Parallel Computing, </booktitle> <volume> Vol. 6, </volume> <pages> pp. 103-124, </pages> <year> 1993. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 2. They include the integrated t tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [6, 7, 8, 9] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution.
Reference: [9] <author> D. A. Reed, R. D. Olson, R. A. Aydt, T. M. Madhyasta, T. Birkett, D. W. Jensen, B. A. A. Nazief, B. K. Totty, </author> <title> Scalable Performance Environments for Parallel Systems. </title> <booktitle> Proc. 6th Distributed Memory Computing Conference, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 562-569, </pages> <year> 1991. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 2. They include the integrated t tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [6, 7, 8, 9] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution.
Reference: [10] <author> A. Malony, B. Mohr, P. Beckman, D. Gannon, S. Yang, F. Bodin, </author> <title> Performance Analysis of pC++: A Portable Data-Parallel Programming System for Scalable Parallel Computers, </title> <booktitle> Proc. 8th Int. Parallel Processing Symb. (IPPS), </booktitle> <address> Cancun, Mexico, </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 75-85, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution. A more detailed discussion of the t tools can be found in <ref> [10, 11, 12] </ref>. 4 A Tour of the Sort Program: Static Analysis The pC ++ implementation of the Sort program is easily derived from the class object defined above. A pC ++ collection of Pvector objects is created.
Reference: [11] <author> B. Mohr, D. Brown, A. Malony, </author> <title> TAU: A Portable Parallel Program Analysis Environment for pC ++ , Proc. </title> <booktitle> of CONPAR 94 - VAPP VI, </booktitle> <address> Linz, Austria, </address> <publisher> Springer Verlag, LNCS 854, </publisher> <pages> pp. 29-40, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution. A more detailed discussion of the t tools can be found in <ref> [10, 11, 12] </ref>. 4 A Tour of the Sort Program: Static Analysis The pC ++ implementation of the Sort program is easily derived from the class object defined above. A pC ++ collection of Pvector objects is created.
Reference: [12] <author> D. Brown, S. Hackstadt, A. Malony, B. Mohr, </author> <title> Program Analysis Environments for Parallel Language Systems: The TAU Environment, </title> <booktitle> Proc. of the Workshop on Environments and Tools For Parallel Scientific Computing, Townsend, Tennessee, </booktitle> <pages> pp. 162-171, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution. A more detailed discussion of the t tools can be found in <ref> [10, 11, 12] </ref>. 4 A Tour of the Sort Program: Static Analysis The pC ++ implementation of the Sort program is easily derived from the class object defined above. A pC ++ collection of Pvector objects is created.
Reference: [13] <author> B. Robert Helm, Allen D. Malony, Steve Fickas, </author> <title> Capturing and Automating Performance Diagnosis: The Poirot Approach, </title> <note> to be published in Proc. 9th Inter. Parallel Processing Symp. (IPPS '95), </note> <institution> Santa Barbara, California, </institution> <month> April </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: A second direction is towards more expanded support for performance experimentation and diagnosis, particularly for scalability analysis. We are attempting to integrate a simulation-based performance extrapolation tool and a semi-automated performance diagnosis system <ref> [13] </ref> into the t toolset. In addition, we are working on better ways to maintain a database of program measurements that record the progress of a sequence of experiments and to display comparative performance behaviors across multiple executions for different numbers of processors.
References-found: 13

