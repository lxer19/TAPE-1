URL: http://www.idt.unit.no/~epos/Papers/pm-concepts-ewspt92.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Towards a Reference Framework for Process Concepts  
Author: Reidar Conradi Christer Fernstrom Alfonso Fuggetta Robert Snowdon 
Date: 158  
Note: Presented at 2nd European Workshop on Software Process Technology, (EWSPT'92) 7-8 Sept. 1992, Trondheim, Norway. Jean-Claude Derniame (ed.), Springer LNCS 635, p. 3-17. EPOS TR  
Abstract: This paper discusses the importance of process support for business activities. A reference framework for process concepts and technology support is sought. The general requirements and properties of the process domain are first discussed. Then, four process sub-models are presented to describe activities, products, tools and organisations, respectively. Five process model phases are also introduced, as well as meta-processes and related human roles to handle process models and their transformations. The process concepts are applied to a bank example. Keywords: (software) process, process modeling, process improvement, meta-process, roles. 
Abstract-found: 1
Intro-found: 1
Reference: [BCN90] <author> Hugh R. Beyer, Kathy Chapman, and Chris Nolan. </author> <title> The ATIS reference model. </title> <type> Technical Report ZK02-3N30, </type> <institution> Digital Equipment Corp., 110 Spirit Brook Rd., Nashua, </institution> <address> NH 03062, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Indeed, the model is itself a manipulatable product [BPR91]. * A tool model to describe tools and their architecture. This can partly be expressed by the activity model, embedding a tool as an activity "en velope" <ref> [BCN90] </ref>. * An organisational model to structure and control activities, and their executable resources.
Reference: [BGMT88] <author> Gerard Boudier, Ferdinando Gallo, Regis Minot, and Ian Thomas. </author> <title> An overview of PCTE and PCTE+. </title> <booktitle> In Proceedings of the ACM SIG SOFT/SIGPLAN Software Engineering Symposium on Practical Soft--ware Development Environments, </booktitle> <address> Boston, Massachusetts, </address> <month> November 28-30 </month> <year> 1988. </year>
Reference-contexts: Network-based (MELMAC [DG90], OPIUM [HFLB90], Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 [War90]). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used <ref> [BGMT88] </ref>. Note, that the product is evolved by activities, often driven by the product structure. The activities are themselves evolving and persistent artifacts, i.e. "products" being operated upon by meta-processes. Indeed, the model is itself a manipulatable product [BPR91]. * A tool model to describe tools and their architecture.
Reference: [BL79] <author> L.A. Belady and M. M. Lehman. </author> <title> Characteristics of large systems. </title> <editor> In Peter Wegner, editor, </editor> <booktitle> Research directions in Software Technology. </booktitle> <publisher> MIT Press, </publisher> <year> 1979. </year>
Reference-contexts: PMi phases below). * Evolution and Customisation: A useful model must evolve to reflect changes in the business and to absorb improvements, and it must be customisable <ref> [BL79] </ref>. * Formalisation, and thus support for automated analysis and assessment. * Monitoring and feedback mechanisms, to assist the above assessment and evolution. * Clarity and Orthogonality, so that a small set of well-defined concepts can be freely combined. * Understandability by humans, e.g. through an external graphical notation.
Reference: [BEM91] <author> N. Belkhatir and J. Estublier and W. L. Melo. Adele2: </author> <title> A Support to Large Software Development Process. </title> <booktitle> In Proc. 1st Conference on Software Process (ICSP1), </booktitle> <address> Redondo Beach, CA, </address> <month> October </month> <year> 1991, </year> <pages> pages 159-170. </pages>
Reference-contexts: A process model and associated formalisms have at least five sub-models: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KFP88] and ADELE2 <ref> [BEM91] </ref>). Network-based (MELMAC [DG90], OPIUM [HFLB90], Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 [War90]). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88].
Reference: [Boe88] <author> Barry W. Boehm. </author> <title> A spiral model of software development and enhancement. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 61-72, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: It can be used in many similar projects and organisations, sharing common properties and characteristics. Such a Schema suggests a very high-level process architecture, according to general principles and requirements. Within software production these schemas are called software life-cycles, such as the Waterfall [Roy70] and the Spiral models <ref> [Boe88] </ref>. 3. PM3. Specific / Customised Process Model: a more detailed and rigorous description of each type of task in a process, possibly automatically derived from the generic Schema in PM2.
Reference: [BPR91] <author> R.F. Bruynooghe, J.M. Parker, and J.S. </author> <title> Rowles. PSS: A system for process enactment. </title> <booktitle> In Proceedings of the First International Conference on the Software Process, </booktitle> <address> Los Angeles, USA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: An object-oriented ER model is often used [BGMT88]. Note, that the product is evolved by activities, often driven by the product structure. The activities are themselves evolving and persistent artifacts, i.e. "products" being operated upon by meta-processes. Indeed, the model is itself a manipulatable product <ref> [BPR91] </ref>. * A tool model to describe tools and their architecture. This can partly be expressed by the activity model, embedding a tool as an activity "en velope" [BCN90]. * An organisational model to structure and control activities, and their executable resources.
Reference: [C + 90] <editor> Reidar Conradi et al. </editor> <booktitle> Design of the Kernel EPOS Software Engineering Environment, 17 pages. In Proceedings of the First International Conference on System Development Environments and Factories. </booktitle> <publisher> Pitman Publishing, </publisher> <year> 1990. </year>
Reference-contexts: The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KFP88] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], OPIUM [HFLB90], Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 [War90]). Hybrids (EPOS <ref> [C + 90] </ref>). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88]. Note, that the product is evolved by activities, often driven by the product structure.
Reference: [DG90] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing Software Processes in the Environment MELMAC. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, Irvine, Califor-nia. In ACM SIGPLAN Notices, </booktitle> <month> Dec. </month> <year> 1990, </year> <pages> pages 193-205, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: A process model and associated formalisms have at least five sub-models: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KFP88] and ADELE2 [BEM91]). Network-based (MELMAC <ref> [DG90] </ref>, OPIUM [HFLB90], Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 [War90]). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88].
Reference: [DNR91] <author> Mark Dowson, Brian Nejmeh, and William Riddle. </author> <title> Fundamental Software Process Concepts. </title> <booktitle> In [FCA91], </booktitle> <pages> pages 15-37, </pages> <year> 1991. </year>
Reference-contexts: This can be used within the software process community as a common set of terms and concepts. It can also be used to exploit commonalities with related application disciplines or research areas. Other clarification efforts of PM concepts have been done by Mark Dowson et al. <ref> [DNR91] </ref> and by Watts Humphrey et al. at SEI [Hum88]. This paper is structured as follows: Section 2 describes in more details the systems we want to support. Sections 3 and 4 present the basic terminology and concepts we are introducing.
Reference: [FH92] <author> Peter H. Feiler and Watts Humphrey. </author> <title> Software Process Development and Enactment: Concepts and Definitions, </title> <month> January </month> <year> 1992, </year> <pages> 12 pages. </pages> <note> (Second version). </note>
Reference-contexts: The execution of a model is usually referred to as model enactment. The borderlines between these model phases can be hard to draw, and may vanish in systems with late / dynamic binding. Feiler and Huphrey have introduced a somewhat different taxonomy <ref> [FH92] </ref>. They speak of a Process Architecture, being the conceptual framework to express process models.
Reference: [FCA91] <author> Alfonso Fuggetta, Reidar Conradi, and Vincenzo Ambriola, </author> <title> editors. </title> <booktitle> Proceedings of the First European Workshop on Process Modeling (EWPM'91), </booktitle> <address> CEFRIEL, Milano, Italy, </address> <month> 30-31 May </month> <year> 1991, 1991. </year> <institution> Italian Society of Computer Science (AICA) Press. </institution>
Reference-contexts: See <ref> [FCA91] </ref> [IEE91a] [IEE91b]. * Outside the area of software production, similar efforts have emerged within the area of office automation, usually under the common heading of workflow support [HL91]. Efforts have sofar been restricted within their specific areas (software engineer- ing, office automation).
Reference: [BFG91] <author> Sergio Bandinelli, Alfonso Fuggetta, and Carlo Ghezzi. </author> <title> Software Process as Real-time Systems: A Case Study Using High Level Petri Nets. </title> <booktitle> In [FCA91], </booktitle> <year> 1991. </year>
Reference-contexts: The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KFP88] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], OPIUM [HFLB90], Extended Petri Nets <ref> [BFG91] </ref>), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 [War90]). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88].
Reference: [FO91] <author> Christer Fernstrom and Lennart Ohlsson. </author> <title> Integration Needs in Process Enacted Environments. </title> <booktitle> In Proceedings of the First International Conference on the Software Process, </booktitle> <address> Los Angeles, USA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Common artifacts are humans (e.g. modeled by roles), machine resources, overall project constraints, team coordination, and work delegation. * A user model to describe how various process actors benefit from the assistance provided through process support technology. A useful model is the information logistics, introduced in <ref> [FO91] </ref>, to describe the availability and flow of information between process actors. Thus, a process model may cover an entire application, not only its "active parts". A process model and its formalism must consider the requirements and prop erties of the real process (Sec. 2).
Reference: [HFLB90] <author> Laurence Hubert, Frederic Fournier, and Maryse Bourdon Le--Brasseur. </author> <title> Eureka Software Factory: OPIUM, an environment for software process modeling integrated with a project management tool. </title> <booktitle> In Proceedings of the 6th International Software Process Workshop, </booktitle> <address> Hakodate, Japan, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: A process model and associated formalisms have at least five sub-models: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KFP88] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], OPIUM <ref> [HFLB90] </ref>, Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 [War90]). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88].
Reference: [HL91] <author> Keith Hales and Mandy Lavery. </author> <title> Workflow Management Software: the Business Opportunity. </title> <publisher> OVUM Ltd., </publisher> <year> 1991. </year>
Reference-contexts: See [FCA91] [IEE91a] [IEE91b]. * Outside the area of software production, similar efforts have emerged within the area of office automation, usually under the common heading of workflow support <ref> [HL91] </ref>. Efforts have sofar been restricted within their specific areas (software engineer- ing, office automation). Two aspects therefore deserve further attention: * Software and office processes are not the only production processes.
Reference: [HSO90] <author> Dennis Heimbigner, Stanley M. Sutton, and Leon Osterweil. </author> <title> Managing Change in Process-centered Environments. </title> <booktitle> In Proceedings of 4th ACM/SIGSOFT Symposium on Software Development Environments, </booktitle> <month> December </month> <year> 1990. </year> <journal> In ACM SIGPLAN Notices. </journal>
Reference-contexts: The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KFP88] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], OPIUM [HFLB90], Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A <ref> [HSO90] </ref>, IPSE 2.5 [War90]). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88]. Note, that the product is evolved by activities, often driven by the product structure.
Reference: [Hum88] <author> Watts S. Humphrey. </author> <title> Characterizing the Software Process: A Maturity Framework. </title> <journal> IEEE Software, </journal> <pages> pages 73-79, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: It can also be used to exploit commonalities with related application disciplines or research areas. Other clarification efforts of PM concepts have been done by Mark Dowson et al. [DNR91] and by Watts Humphrey et al. at SEI <ref> [Hum88] </ref>. This paper is structured as follows: Section 2 describes in more details the systems we want to support. Sections 3 and 4 present the basic terminology and concepts we are introducing.
Reference: [IEE91a] <editor> IEEE Computer Society. </editor> <booktitle> Proceedings of the First International Conference on Software Process, </booktitle> <year> 1991. </year>
Reference-contexts: See [FCA91] <ref> [IEE91a] </ref> [IEE91b]. * Outside the area of software production, similar efforts have emerged within the area of office automation, usually under the common heading of workflow support [HL91]. Efforts have sofar been restricted within their specific areas (software engineer- ing, office automation).
Reference: [IEE91b] <editor> IEEE Computer Society. </editor> <booktitle> Proceedings of the Seventh International Workshop on Software Process, </booktitle> <year> 1991. </year>
Reference-contexts: See [FCA91] [IEE91a] <ref> [IEE91b] </ref>. * Outside the area of software production, similar efforts have emerged within the area of office automation, usually under the common heading of workflow support [HL91]. Efforts have sofar been restricted within their specific areas (software engineer- ing, office automation).
Reference: [KFP88] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent Assistance for Software Development and Maintenance. </title> <journal> IEEE Software, </journal> <pages> pages 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: A process model and associated formalisms have at least five sub-models: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL <ref> [KFP88] </ref> and ADELE2 [BEM91]). Network-based (MELMAC [DG90], OPIUM [HFLB90], Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 [War90]). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88].
Reference: [Ros77] <author> D. T. Ross and K. E. Schuman. </author> <title> Structured Analysis for Requirements Definition. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-3(1), </volume> <pages> pages 16-34. </pages> <month> January </month> <year> 1977. </year>
Reference-contexts: Meta-process: Set of (meta-)activities to model, analyse, and support a pro cess. This means that process models and processes are the objects upon which meta-processes operate. In the following, we will use simplified SADT diagrams <ref> [Ros77] </ref> as a process formalism for processes and meta-processes. 4 The meta-process As mentioned, every process needs to be made explicit, generalised and then specialised/customised, instantiated, executed, and then improved and modified.
Reference: [Roy70] <author> W. W. </author> <title> Royce. Managing the Development of Large Software Systems: Concept and Techniques. </title> <booktitle> In Proceedings of WesCon, </booktitle> <month> August </month> <year> 1970. </year>
Reference-contexts: It can be used in many similar projects and organisations, sharing common properties and characteristics. Such a Schema suggests a very high-level process architecture, according to general principles and requirements. Within software production these schemas are called software life-cycles, such as the Waterfall <ref> [Roy70] </ref> and the Spiral models [Boe88]. 3. PM3. Specific / Customised Process Model: a more detailed and rigorous description of each type of task in a process, possibly automatically derived from the generic Schema in PM2.
Reference: [War90] <author> Brian Warboys. </author> <title> The IPSE 2.5 Project: Process Modeling as the basis for a Support Environment. </title> <booktitle> In Proceedings of the First International Conference on System Development Environments and Factories. </booktitle> <publisher> Pitman Publishing, </publisher> <year> 1990. </year> <month> epos/papers/pm-concepts-ewspt92.tex February 17, </month> <year> 1993 </year>
Reference-contexts: The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KFP88] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], OPIUM [HFLB90], Extended Petri Nets [BFG91]), Imperative or programmmatic, usually interpreted (APPL/A [HSO90], IPSE 2.5 <ref> [War90] </ref>). Hybrids (EPOS [C + 90]). * A product model to express (passive) data, being manipulated by ac tivities. An object-oriented ER model is often used [BGMT88]. Note, that the product is evolved by activities, often driven by the product structure.
References-found: 23

