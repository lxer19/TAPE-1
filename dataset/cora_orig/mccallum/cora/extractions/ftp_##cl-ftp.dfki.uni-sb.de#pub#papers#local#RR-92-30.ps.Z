URL: ftp://cl-ftp.dfki.uni-sb.de/pub/papers/local/RR-92-30.ps.Z
Refering-URL: http://cl-www.dfki.uni-sb.de/cl/papers/cl-abstracts.html
Root-URL: 
Phone: Tel.: 49 (631) 205-3211 Stuhlsatzenhausweg 3  Tel.: 49 (681) 302-5252  
Title: A Complete and Recursive Feature Theory  
Author: f ur K unstliche Rolf Backofen and Gert Smolka f ur K unstliche Intelligenz 
Address: Postfach 20 80 67608 Kaiserslautern, FRG  66123 Saarbrucken, FRG  
Note: Deutsches Forschungszentrum  
Date: September 1992  
Affiliation: Deutsches Forschungszentrum  Intelligenz GmbH Research  GmbH  
Pubnum: Report RR-92-30  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> H. At-Kaci. </author> <title> A Lattice-Theoretic Approach to Computation Based on a Calculus of Partially Ordered Type Structures. </title> <type> PhD thesis, </type> <institution> University of Pennsylvenia, </institution> <address> Philadelphia, PA, </address> <year> 1984. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.
Reference: [2] <author> H. At-Kaci. </author> <title> An algebraic semantics approach to the effective resolution of type equations. </title> <journal> Theoretical Computer Science, </journal> <volume> 45 </volume> <pages> 293-351, </pages> <year> 1986. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.
Reference: [3] <author> H. At-Kaci and R. Nasr. </author> <title> LOGIN: A logic programming language with built-in inheritance. </title> <journal> The Journal of Logic Programming, </journal> <volume> 3 </volume> <pages> 185-215, </pages> <year> 1986. </year>
Reference-contexts: They originated in the late seventies with so-called unification grammars [15, 13], a by now popular family of declarative grammar formalisms for the description and processing of natural language. More recently, the use of feature descriptions in logic programming has been advocated and studied <ref> [3, 4, 5, 6, 21] </ref>. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations [1, 2, 14, 18, 11, 20, 7, 12].
Reference: [4] <author> H. At-Kaci and R. Nasr. </author> <title> Integrating logic and functional programming. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 2 </volume> <pages> 51-89, </pages> <year> 1989. </year>
Reference-contexts: They originated in the late seventies with so-called unification grammars [15, 13], a by now popular family of declarative grammar formalisms for the description and processing of natural language. More recently, the use of feature descriptions in logic programming has been advocated and studied <ref> [3, 4, 5, 6, 21] </ref>. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations [1, 2, 14, 18, 11, 20, 7, 12].
Reference: [5] <author> H. At-Kaci and A. </author> <title> Podelski. Towards a meaning of LIFE. </title> <editor> In J. Maluszynski and M. Wirsing, editors, </editor> <booktitle> Proceedings of the 3rd International Symposium on Programming Language Implementation and Logic Programming, </booktitle> <publisher> Springer LNCS vol. </publisher> <pages> 528, pages 255-274. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <month> 30 </month>
Reference-contexts: They originated in the late seventies with so-called unification grammars [15, 13], a by now popular family of declarative grammar formalisms for the description and processing of natural language. More recently, the use of feature descriptions in logic programming has been advocated and studied <ref> [3, 4, 5, 6, 21] </ref>. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations [1, 2, 14, 18, 11, 20, 7, 12].
Reference: [6] <author> H. At-Kaci, A. Podelski, and G. Smolka. </author> <title> A feature-based constraint system for logic programming with entailment. </title> <booktitle> In Fifth Generation Computer Systems 1992, </booktitle> <pages> pages 1012-1021, </pages> <address> Tokyo, Japan, </address> <month> June </month> <year> 1992. </year> <institution> Institute for New Generation Computer Technology. </institution>
Reference-contexts: They originated in the late seventies with so-called unification grammars [15, 13], a by now popular family of declarative grammar formalisms for the description and processing of natural language. More recently, the use of feature descriptions in logic programming has been advocated and studied <ref> [3, 4, 5, 6, 21] </ref>. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations [1, 2, 14, 18, 11, 20, 7, 12].
Reference: [7] <author> F. Baader, H.-J. Burckert, B. Nebel, W. Nutt, and G. Smolka. </author> <title> On the expressivity of feature logics with negation, functional uncertainty, and sort equations. </title> <note> Research Report RR-91-01, German Research Center for Artificial Intelligence (DFKI), Stuhlsatzenhausweg 3, D-6600 Saar-brucken, Germany, </note> <month> January </month> <year> 1991. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.
Reference: [8] <author> B. Carpenter. </author> <title> Typed feature structures: A generalization of first-order terms. </title> <editor> In V. Saraswat and K. Ueda, editors, </editor> <booktitle> Logic Programming, Proceedings of the 1991 International Symposium, </booktitle> <pages> pages 187-201, </pages> <address> San Diego, USA, 1991. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: In contrast to feature trees, nodes of feature graphs may or may not be labelled with sorts. Feature graphs correspond to the so-called feature structures commonly found in linguistically motivated investigations <ref> [19, 8] </ref>. 1.3 Organization of the Paper Section 2 recalls the necessary notions and notations from Predicate Logic. Section 3 defines the theory FT by means of three axiom schemes. Section 4 establishes the overall structure of the completeness proof by means of a lemma.
Reference: [9] <author> A. Colmerauer. </author> <title> Prolog and infinite trees. </title> <editor> In K. Clark and S.- A. Tarnlund, editors, </editor> <booktitle> Logic Programming, </booktitle> <pages> pages 153-172. </pages> <publisher> Academic Press, </publisher> <year> 1982. </year>
Reference-contexts: Since FT is complete, all three models are elementarily equivalent (i.e., satisfy exactly the same first-order formulae). While the feature graph model captures intuitions common in linguistically motivated investigations, the feature tree model provides the connection to the tree constraint systems <ref> [9, 10, 16, 17] </ref> employed in logic programming. Our proof of FT's completeness will exhibit a simplification algorithm that 3 computes for every feature description an equivalent solved form from which the solutions of the description can be read of easily.
Reference: [10] <author> A. Colmerauer. </author> <title> Equations and inequations on finite and infinite trees. </title> <booktitle> In Proceedings of the 2nd International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 85-99, </pages> <year> 1984. </year>
Reference-contexts: Since FT is complete, all three models are elementarily equivalent (i.e., satisfy exactly the same first-order formulae). While the feature graph model captures intuitions common in linguistically motivated investigations, the feature tree model provides the connection to the tree constraint systems <ref> [9, 10, 16, 17] </ref> employed in logic programming. Our proof of FT's completeness will exhibit a simplification algorithm that 3 computes for every feature description an equivalent solved form from which the solutions of the description can be read of easily.
Reference: [11] <author> M. Johnson. </author> <title> Attribute-Value Logic and the Theory of Grammar. CSLI Lecture Notes 16. Center for the Study of Language and Information, </title> <publisher> Stanford University, </publisher> <address> CA, </address> <year> 1988. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.
Reference: [12] <author> M. Johnson. </author> <title> Logic and feature structures. </title> <booktitle> In Proceedings of IJCAI-91, </booktitle> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.
Reference: [13] <author> R. M. Kaplan and J. Bresnan. </author> <title> Lexical-Functional Grammar: A formal system for grammatical representation. </title> <editor> In J. Bresnan, editor, </editor> <booktitle> The Mental Representation of Grammatical Relations, </booktitle> <pages> pages 173-381. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1982. </year>
Reference-contexts: 1 Introduction Feature descriptions provide for the typically partial description of abstract objects by means of functional attributes called features. They originated in the late seventies with so-called unification grammars <ref> [15, 13] </ref>, a by now popular family of declarative grammar formalisms for the description and processing of natural language. More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21].
Reference: [14] <author> R. T. Kasper and W. C. </author> <title> Rounds. A logical semantics for feature structures. </title> <booktitle> In Proceedings of the 24th Annual Meeting of the ACL, </booktitle> <publisher> Columbia University, </publisher> <pages> pages 257-265, </pages> <address> New York, N.Y., </address> <year> 1986. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.
Reference: [15] <author> M. Kay. </author> <title> Functional grammar. </title> <booktitle> In Proceedings of the Fifth Annual Meeting of the Berkeley Linguistics Society, </booktitle> <address> Berkeley, CA, </address> <year> 1979. </year> <institution> Berkeley Linguistics Society. </institution>
Reference-contexts: 1 Introduction Feature descriptions provide for the typically partial description of abstract objects by means of functional attributes called features. They originated in the late seventies with so-called unification grammars <ref> [15, 13] </ref>, a by now popular family of declarative grammar formalisms for the description and processing of natural language. More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21].
Reference: [16] <author> J.-L. Lassez, M. Maher, and K. Marriot. </author> <title> Unification revisited. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1988. </year> <month> 31 </month>
Reference-contexts: Since FT is complete, all three models are elementarily equivalent (i.e., satisfy exactly the same first-order formulae). While the feature graph model captures intuitions common in linguistically motivated investigations, the feature tree model provides the connection to the tree constraint systems <ref> [9, 10, 16, 17] </ref> employed in logic programming. Our proof of FT's completeness will exhibit a simplification algorithm that 3 computes for every feature description an equivalent solved form from which the solutions of the description can be read of easily.
Reference: [17] <author> M. J. Maher. </author> <title> Complete axiomatizations of the algebras of finite, ratio-nal and infinite trees. </title> <booktitle> In Proceedings of the 3rd Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 348-457, </pages> <address> Edinburgh, Scotland, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: Since FT is complete, all three models are elementarily equivalent (i.e., satisfy exactly the same first-order formulae). While the feature graph model captures intuitions common in linguistically motivated investigations, the feature tree model provides the connection to the tree constraint systems <ref> [9, 10, 16, 17] </ref> employed in logic programming. Our proof of FT's completeness will exhibit a simplification algorithm that 3 computes for every feature description an equivalent solved form from which the solutions of the description can be read of easily. <p> The following lemma gives the overall structure of the algorithm, which is the same as in Maher's <ref> [17] </ref> completeness proof for the theory of constructor trees.
Reference: [18] <author> W. C. Rounds and R. T. Kasper. </author> <title> A complete logical calculus for record structures representing linguistic information. </title> <booktitle> In Proceedings of the 1st IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 38-43, </pages> <address> Boston, MA, </address> <year> 1986. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.
Reference: [19] <author> S. M. Shieber. </author> <title> An Introduction to Unification-Based Approaches to Grammar, </title> <booktitle> volume 4 of CSLI Lecture Notes. Center for the Study of Language and Information, </booktitle> <address> Stanford University, CA, </address> <year> 1986. </year>
Reference-contexts: In contrast to feature trees, nodes of feature graphs may or may not be labelled with sorts. Feature graphs correspond to the so-called feature structures commonly found in linguistically motivated investigations <ref> [19, 8] </ref>. 1.3 Organization of the Paper Section 2 recalls the necessary notions and notations from Predicate Logic. Section 3 defines the theory FT by means of three axiom schemes. Section 4 establishes the overall structure of the completeness proof by means of a lemma.
Reference: [20] <author> G. Smolka. </author> <title> Feature constraint logics for unification grammars. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 </volume> <pages> 51-87, </pages> <year> 1992. </year>
Reference-contexts: More recently, the use of feature descriptions in logic programming has been advocated and studied [3, 4, 5, 6, 21]. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations <ref> [1, 2, 14, 18, 11, 20, 7, 12] </ref>. We will follow the logical approach pioneered by [20], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures. <p> Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations [1, 2, 14, 18, 11, 20, 7, 12]. We will follow the logical approach pioneered by <ref> [20] </ref>, which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures. In this approach, a semantics for feature descriptions can be given by means of a feature theory (i.e., a set of closed feature descriptions having at least one model). <p> There are two complementary ways of specifying a feature theory: either by explicitly constructing a standard model and taking all sentences valid in it, or by stating axioms and proving their consistency. Both possibilities are exemplified in <ref> [20] </ref>: the feature graph algebra F is given as a standard model, and the class of feature algebras is obtained by means of an axiomatization. Both approaches to fixing a feature theory have their advantages. <p> As the main result of this paper we will show that FT is a complete and decidable theory. By using an adaption of the proof of Theorem 8.3 in <ref> [20] </ref> one can show that FT 0 is undecidable. 4 Outline of the Completeness Proof The completeness of FT will be shown by exhibiting a simplification algorithm for FT.
Reference: [21] <author> G. Smolka and R. Treinen. </author> <title> Records for logic programming. </title> <booktitle> In Proceedings of the 1992 Joint International Conference and Symposium on Logic Programming, </booktitle> <address> Washington, DC, </address> <month> November </month> <year> 1992. </year> <note> The MIT Press, to appear. 32 </note>
Reference-contexts: They originated in the late seventies with so-called unification grammars [15, 13], a by now popular family of declarative grammar formalisms for the description and processing of natural language. More recently, the use of feature descriptions in logic programming has been advocated and studied <ref> [3, 4, 5, 6, 21] </ref>. Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages. Feature descriptions have been proposed in various forms with various formalizations [1, 2, 14, 18, 11, 20, 7, 12].
References-found: 21

