URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/TR-C95-33.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: Email: wanlei@deakin.edu.au  
Title: Performance Evaluation of Nested Transactions on Locally Distributed Database Systems  
Author: Wanlei Zhou 
Keyword: Key Words: Nested transaction; Locally distributed database systems, Performance evaluation, Combinatorics.  
Address: Geelong, VIC 3217, Australia  
Affiliation: School of Computing and Mathematics Deakin University  
Abstract: This paper describes an execution time estimating model for nested transactions running on locally distributed database systems. At first the model of nested transactions and the model of a locally distributed database system are established. The performance evaluation model of nested transactions is then built in three steps. The first step describes a nondeterministic algorithm that evaluates the execution time of a nested transaction using general routing strategies. The second step gives explicit form solutions for a few special cases. The last step uses some approximate methods to develop the lower and upper bounds of the general form solution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. J. Bewit, R. H. Gerber, G. Graefe, M. L. Heytens, K. B. Kumar, and M. Muralikrishna. </author> <title> GAMMA: A high performance dataflow database machine. </title> <booktitle> In Proceedings of the 12th International Conference on Very Large Data Bases, </booktitle> <pages> pages 228-237, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: All incoming requests to the locally distributed database system is sent to the common front-end system. The front-end system is then responsible for routing the requests to the database servers. Some industrial and academic systems, such as the Tandem's Non-Stop system [2] and the Gamma database machine <ref> [1] </ref>, have followed this architecture. The front-end system and each database server are usually located on separate machines. Figure 1 depicts the architecture of a locally distributed database system. There have been some discussions on the performance evaluation and routing strategies of transactions on a locally distributed database system.
Reference: [2] <author> A. J. Borr. </author> <title> Transaction monitoring in encompass: </title> <booktitle> Reliable distributed transaction processing. In Proceedings of the 7th International Conference on Very Large Data Bases, </booktitle> <pages> pages 155-165, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: All incoming requests to the locally distributed database system is sent to the common front-end system. The front-end system is then responsible for routing the requests to the database servers. Some industrial and academic systems, such as the Tandem's Non-Stop system <ref> [2] </ref> and the Gamma database machine [1], have followed this architecture. The front-end system and each database server are usually located on separate machines. Figure 1 depicts the architecture of a locally distributed database system.
Reference: [3] <author> M. J. Carey and H. Lu. </author> <title> Load balancing in a locally distributed database system. </title> <booktitle> In Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 108-119, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: The minimum response time strategy proposed by Yu et al [12] routes each incoming transaction to the database servers (called processing system in that paper) that would minimise its estimated response time based on steady state analysis. 1 Carey and Lu <ref> [3] </ref> use a heuristic algorithm to minimise an unbalanced factor defined to be the sum of the variance of the number of CPU-bound queries to the distributed sites plus the variance of the number of I/O-bound queries.
Reference: [4] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, California, USA, </address> <year> 1993. </year>
Reference-contexts: That is, a block cannot have itself as one of its members. 6 3 The Evaluation Model 3.1 Dynamic Dependency The definition of a nested transaction and the associated flowgraph only captures the structural dependencies among flat transactions of a nested transaction. There is another dependency, the dynamic dependency <ref> [4] </ref>, that needs to be addressed when evaluating the performance of a nested transaction. Dynamic dependency arises from two factors: the use of routing strategy and the use of shared data.
Reference: [5] <author> K. Kant. </author> <title> Introduction to Computer System Performance Evaluation. </title> <publisher> McGraw-Hill, </publisher> <address> Singapore, </address> <year> 1992. </year>
Reference-contexts: A nested transaction on a locally distributed database system by nature is a parallel or distributed program. There have been many work on the performance evaluation of parallel and distributed programs based on queueing theory [7], Petri-net <ref> [5] </ref>, and combinatorial theory [14]. The analytic model presented by Towsley et al [10] evaluates the performance of fork-join parallel programs under different sharing policies. Mak and Lundstrom [8] use queueing network model to describe a method for predicating performance of parallel computations running on concurrent systems. <p> Because they share the same database server, their execution time will be greater than the required execution time t (A i ). It is expected that real execution time will increase if k increases <ref> [5] </ref>. We use a function f (k) to represent this slow-down factor and denote the execution time of each A i by t (A i ) fi f (k).
Reference: [6] <author> V. Krishnamurthy. </author> <title> Combinatorics: Theory and Applications. </title> <publisher> Ellis Horwood Ltd., </publisher> <address> West Sussex, UK, </address> <year> 1986. </year>
Reference-contexts: Hence we identify a distinct routing map u with the allocation of m identical "balls" to n different "boxes", and the a distinct routing map v with the allocation of C S i identical "balls" to l different "boxes". This is a standard problem in combinatorics <ref> [6] </ref>. The maximum and minimum measures are easy. We have: 12 Assertion 2.
Reference: [7] <editor> S. S. Lavenberg, editor. </editor> <booktitle> Computer Performance Modeling Handbook. </booktitle> <publisher> Academic Press, Inc., </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: A nested transaction on a locally distributed database system by nature is a parallel or distributed program. There have been many work on the performance evaluation of parallel and distributed programs based on queueing theory <ref> [7] </ref>, Petri-net [5], and combinatorial theory [14]. The analytic model presented by Towsley et al [10] evaluates the performance of fork-join parallel programs under different sharing policies. Mak and Lundstrom [8] use queueing network model to describe a method for predicating performance of parallel computations running on concurrent systems.
Reference: [8] <author> V. W. Mak and S. F. Lundstrom. </author> <title> Predicating performance of parallel computations. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(3) </volume> <pages> 257-270, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: There have been many work on the performance evaluation of parallel and distributed programs based on queueing theory [7], Petri-net [5], and combinatorial theory [14]. The analytic model presented by Towsley et al [10] evaluates the performance of fork-join parallel programs under different sharing policies. Mak and Lundstrom <ref> [8] </ref> use queueing network model to describe a method for predicating performance of parallel computations running on concurrent systems. Zhou and Molinari [14] present a combinatorial model for evaluating the performance of remote procedure call programs.
Reference: [9] <author> M. T. Ozsu and P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewoods Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction The demand for high transaction processing rate has motivated the development of multiprocessor or locally distributed database systems <ref> [9] </ref>. A locally distributed database system has a tightly interconnection among its front-end system and the database servers, and therefore the communication delay is negligible compared to the database transaction delays [12]. For instance, the entire system can be located in the same machine room or in the same building.
Reference: [10] <author> D. Towsley, C. G. Rommel, and J. A. Stankovic. </author> <title> Analysis of fork-join program response time on multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(3) </volume> <pages> 286-303, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: There have been many work on the performance evaluation of parallel and distributed programs based on queueing theory [7], Petri-net [5], and combinatorial theory [14]. The analytic model presented by Towsley et al <ref> [10] </ref> evaluates the performance of fork-join parallel programs under different sharing policies. Mak and Lundstrom [8] use queueing network model to describe a method for predicating performance of parallel computations running on concurrent systems.
Reference: [11] <author> J. H. van Lint and R. M. Wilson. </author> <title> A Course in Combinatorics. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1992. </year>
Reference-contexts: We now compute E, the total number of maps which map x (identical) flat transactions into l (identical) shared data items. From combinatorics results <ref> [11] </ref> we know this is a type-2 distribution problem and that E = d (2) l 1 (14) where [0; 1) is the restrict condition of flat transactions in a single shared data item.
Reference: [12] <author> P. S. Yu, S. Balsamo, and Y. H. Lee. </author> <title> Dynamic transaction routing in distributed database systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(9):1307-1318, </volume> <month> September </month> <year> 1988. </year>
Reference-contexts: A locally distributed database system has a tightly interconnection among its front-end system and the database servers, and therefore the communication delay is negligible compared to the database transaction delays <ref> [12] </ref>. For instance, the entire system can be located in the same machine room or in the same building. All incoming requests to the locally distributed database system is sent to the common front-end system. The front-end system is then responsible for routing the requests to the database servers. <p> Figure 1 depicts the architecture of a locally distributed database system. There have been some discussions on the performance evaluation and routing strategies of transactions on a locally distributed database system. The minimum response time strategy proposed by Yu et al <ref> [12] </ref> routes each incoming transaction to the database servers (called processing system in that paper) that would minimise its estimated response time based on steady state analysis. 1 Carey and Lu [3] use a heuristic algorithm to minimise an unbalanced factor defined to be the sum of the variance of the
Reference: [13] <author> P. S. Yu, A. Leff, and Y. H. Lee. </author> <title> On robust transaction routing load sharing. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(3) </volume> <pages> 476-512, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Another paper by Yu et al <ref> [13] </ref> evaluated three dynamic routing strategies and compared them with the minimum response time strategy. Previous studies on the performance of nested transactions on locally distributed database systems have two limitations. Firstly they concentrate on performance evaluation of some specific routing strategies, not general routing strategies. <p> For simplicity, we assume that all database servers have the same set of shared data items and each flat transaction only uses one shared data item. 3.2 The Locally Distributed Database System The locally distributed database system studied in this paper has a similar architecture as the system described in <ref> [13] </ref>. The system has n database servers and one front-end system that are connected via a high-speed interconnection network.
Reference: [14] <author> W. Zhou and B. Molinari. </author> <title> A performance evaluation model for programs using remote procedure calls. </title> <journal> In Australian Computer Science Communications, </journal> <volume> volume 11(1), </volume> <pages> pages 98-109, </pages> <month> February </month> <year> 1989. </year> <month> 17 </month>
Reference-contexts: A nested transaction on a locally distributed database system by nature is a parallel or distributed program. There have been many work on the performance evaluation of parallel and distributed programs based on queueing theory [7], Petri-net [5], and combinatorial theory <ref> [14] </ref>. The analytic model presented by Towsley et al [10] evaluates the performance of fork-join parallel programs under different sharing policies. Mak and Lundstrom [8] use queueing network model to describe a method for predicating performance of parallel computations running on concurrent systems. Zhou and Molinari [14] present a combinatorial model <p> [5], and combinatorial theory <ref> [14] </ref>. The analytic model presented by Towsley et al [10] evaluates the performance of fork-join parallel programs under different sharing policies. Mak and Lundstrom [8] use queueing network model to describe a method for predicating performance of parallel computations running on concurrent systems. Zhou and Molinari [14] present a combinatorial model for evaluating the performance of remote procedure call programs. There are two limitations when one wants to apply these performance evaluation models for parallel and distributed programs to nested transactions. <p> The performance evaluation model described in this paper is an extension of our previous work <ref> [14] </ref>. Here an additional dimension of difficulty, the shared data items, is used, and the performance of nested transactions using general routing strategies, instead of the performance of remote procedure call programs, is evaluated. The rest of the paper is organised as follows.
References-found: 14

