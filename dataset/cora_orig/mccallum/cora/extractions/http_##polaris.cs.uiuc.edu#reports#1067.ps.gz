URL: http://polaris.cs.uiuc.edu/reports/1067.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Email: tuchman@uicsrd.csrd.uiuc.edu davej@uicsrd.csrd.uiuc.edu gc@uicsrd.csrd.uiuc.edu  
Title: A System for Remote Data Visualization  
Author: Allan Tuchman, David Jablonowski, and George Cybenko 
Keyword: data visualization, distributed computing, algorithm animation  
Address: Urbana, Illinois 61801  
Affiliation: Center for Supercomputing Research and Development 305 Talbot Lab University of Illinois  
Abstract: Vista is a system for simulation-time visualization of data. Vista provides a window into the application by showing program data automatically during execution. The system architecture is designed for a distributed or remotely executing application, however the Vista model allows a data or trace file to replace the executing application, providing a visualization "data browser" for existing data or simulation runs. The data to be displayed and the type of display to be used are chosen interactively while the application is executing. It is not necessary to specify the data or graphics technique before compilation as with conventional graphics tools. With minimal and possibly automatic instrumentation, an application run in the Vista environment will have its data (variables and data structures) made available to a visualization system on a remote workstation. Any data display can be enabled or disabled at any time. The application may execute locally, on a remote supercomputer, on several clusters of a shared memory computer, or even across a network of distributed computers. Designed primarily for scientific visualization, Vista also offers an environment for more effective debugging, program development, and a tool for viewing results. 
Abstract-found: 1
Intro-found: 1
Reference: [Bro88] <author> Marc H. Brown. </author> <title> Exploring algorithm using Balsa-II. </title> <journal> Computer, </journal> <volume> 21(5) </volume> <pages> 14-36, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: It is possible though, with some small modification to the program, to have the application program write directly to the start of the visualization network. This provides an excellent tool to manipulate predetermined data from an application. However, neither system provides direct access to arbitrary program data. The Balsa-II <ref> [Bro88] </ref> system for algorithm animation provides the same simulation-time animation capabilities that we strive for, yet requires considerable instrumentation of the application source program. It is not easy to dynamically show new data and the system is not inherently distributed.
Reference: [Dye90] <author> D. Scott Dyer. </author> <title> A dataflow toolkit for visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(4) </volume> <pages> 60-69, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Each shares some of the characteristics of our work, but most address a slightly different problem. The most well known systems for scientific visualization are AVS [UTK + 89], developed by Stardent Computer, and aPE <ref> [Dye90] </ref> from Ohio State University. Both of these systems provide a visual programming interface which allows the user to specify a sequence or network of processes to manipulate data. The individual processes can execute on a local or a remote computer.
Reference: [HHR89] <author> Esa Helttula, Aulikki Hyrskykari, and Kari-Jouko Raiha. </author> <title> Graphical specification of algorithm animations with Aladdin. </title> <booktitle> In Proceedings of the Twenty-Second Annual Hawaii International Conference on System Science, </booktitle> <pages> pages 892-901, </pages> <address> Kailua-Kona, Hawaii, </address> <month> January </month> <year> 1989. </year> <note> IEEE. </note>
Reference-contexts: The Balsa-II [Bro88] system for algorithm animation provides the same simulation-time animation capabilities that we strive for, yet requires considerable instrumentation of the application source program. It is not easy to dynamically show new data and the system is not inherently distributed. Aladdin <ref> [HHR89] </ref> has similar use in algorithm animation, and uses a graphical interface to minimize the amount of graphics programming required to visualize the algorithm.
Reference: [JHH + 88] <author> W. E. Johnston, D. E. Hall, J. Huang, M. Rible, and D. Robertson. </author> <title> Distributed scientific video movie making. </title> <booktitle> In Proceedings of Supercomputing '88, </booktitle> <pages> pages 156-161, </pages> <address> Orlando, Florida, </address> <month> November 14-18 </month> <year> 1988. </year>
Reference-contexts: Aladdin [HHR89] has similar use in algorithm animation, and uses a graphical interface to minimize the amount of graphics programming required to visualize the algorithm. Johnston and others at Lawrence Berkeley Laboratory have developed a system for distributed scientific movie making using a Sun workstation and a Cray supercomputer <ref> [JHH + 88] </ref>. By modifying the source program to include calls to their Scry library, an application can have data rendered on the supercomputer or the workstation, displayed on the workstation, then recorded on a low-cost animation system.
Reference: [JT91] <author> David Jablonowski and Allan Tuchman. </author> <title> Vista users manual. </title> <type> Technical Report 1068, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Other papers on Vista are one which provides an overview of Vista and its ease of use [TJC + 91b], another which provides a discussion on run-time visualization of program data [TJC91a], and the Vista user's manual <ref> [JT91] </ref>. 2 Previous Work There are a few well-known systems promoted for visualization. Each shares some of the characteristics of our work, but most address a slightly different problem.
Reference: [NT89] <author> Henry Neeman and Allan Tuchman. </author> <title> Simulation time animation system. </title> <type> Technical Report 859, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> February </month> <year> 1989. </year>
Reference-contexts: Their work is most significant in distributed image display and in the low-cost animation solution. Scry does not address dynamic data access. Our own work in this area began as we tried to abstract the necessary control and data access requirements for a distributed simulation-time animation system (STAS) <ref> [NT89] </ref>. This system was unwieldy and required considerable additions and modifications to the program source. In later work we separated data access from data display in a remote visualization environment for looking at matrix data in linear algebra applications [TB90].
Reference: [TB90] <author> Allan M. Tuchman and Michael W. Berry. </author> <title> Matrix visualization in the design of numerical algorithms. </title> <journal> ORSA Journal on Computing, </journal> <volume> 2(1) </volume> <pages> 84-92, </pages> <year> 1990. </year>
Reference-contexts: This system was unwieldy and required considerable additions and modifications to the program source. In later work we separated data access from data display in a remote visualization environment for looking at matrix data in linear algebra applications <ref> [TB90] </ref>. One way to provide distributed graphics is with a distributed window system such as 5 the X Window System or NeWS. Both allow remote display of graphics, but graphics algorithms still execute in the application (client) process. <p> Again, only on the Sun Sparc systems. We have a user's manual that can be sent out accompanying this tape. Professor Michael Berry has used Vista at the University of Alabama, Birmingham in his linear algebra research in a manner similar to his work in <ref> [TB90] </ref>. The weakest part of our system, and one that prevents its use by more users is the graphics methods themselves. Vista had more work put into the system aspects than the into the graphics.
Reference: [TJC91a] <author> Allan M. Tuchman, David Jablonowski, and George Cybenko. </author> <title> Run-time visualization of program data. </title> <booktitle> In Proceedings of Visualization '91, </booktitle> <address> San Diego, CA, </address> <month> October </month> <year> 1991. </year> <note> To appear. </note>
Reference-contexts: We will discuss its current status and list the directions that we will pursue with Vista. Other papers on Vista are one which provides an overview of Vista and its ease of use [TJC + 91b], another which provides a discussion on run-time visualization of program data <ref> [TJC91a] </ref>, and the Vista user's manual [JT91]. 2 Previous Work There are a few well-known systems promoted for visualization. Each shares some of the characteristics of our work, but most address a slightly different problem.
Reference: [TJC + 91b] <author> Allan M. Tuchman, David Jablonowski, George Cybenkoi, Brian Bliss, and Sanjay Sharma. </author> <title> Vista: A system for remote data visualization. </title> <booktitle> In Proceedings of the SIAM 5th Conference on Parallel Computing, </booktitle> <address> Houston, TX, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: We will discuss its current status and list the directions that we will pursue with Vista. Other papers on Vista are one which provides an overview of Vista and its ease of use <ref> [TJC + 91b] </ref>, another which provides a discussion on run-time visualization of program data [TJC91a], and the Vista user's manual [JT91]. 2 Previous Work There are a few well-known systems promoted for visualization. Each shares some of the characteristics of our work, but most address a slightly different problem.
Reference: [UTK + 89] <author> Craig Upson, T Faulhaber, Jr., David Kamins, David Laidlaw, David Schlegel, Jeffrey Vroom, Robert Gurwitz, and Andries van Dam. </author> <title> The application visualization system: A computational environment for scientific visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(4) </volume> <pages> 30-42, </pages> <month> July </month> <year> 1989. </year> <month> 41 </month>
Reference-contexts: Each shares some of the characteristics of our work, but most address a slightly different problem. The most well known systems for scientific visualization are AVS <ref> [UTK + 89] </ref>, developed by Stardent Computer, and aPE [Dye90] from Ohio State University. Both of these systems provide a visual programming interface which allows the user to specify a sequence or network of processes to manipulate data. The individual processes can execute on a local or a remote computer.
References-found: 10

