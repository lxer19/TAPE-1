URL: http://www.cs.columbia.edu/~mauricio/papers/pdis94.ps
Refering-URL: http://www.cs.columbia.edu/~mauricio/
Root-URL: 
Title: Predictive Dynamic Load Balancing of Parallel Hash-Joins over Heterogeneous Processors in the Presence of Data Skew  
Author: Hasanat M. Dewan Mauricio Hernandez Kui W. Mok Salvatore J. Stolfo 
Note: (This is an extended version of the paper that appeared in the Proceedings of the 3rd International Conference on Parallel and Distributed Information Systems.)  
Address: New York, NY 10027 CUCS-026-94  
Affiliation: Department of Computer Science, Columbia University,  
Abstract: In this paper, we present new algorithms to balance the computation of parallel hash joins over heterogeneous processors in the presence of data skew and external loads. Heterogeneity in our model consists of disparate computing elements, as well as general purpose computing ensembles that are subject to external loading (e.g., a LAN connected workstation cluster). Data skew manifests itself as significant non-uniformities in the distribution of attribute values of underlying relations that are involved in a join. We develop cost models and predictive dynamic load balancing protocols to detect imbalance during the computation of a single large join. New predictive bucket scheduling algorithms are presented that smooth out the load over the entire ensemble by reallocating buckets whenever imbalance is detected. Our algorithms can account for imbalance due to data skew as well as heterogeneity in the computing environment. Significant performance gains are reported for a wide range of test cases on a prototype implementation of the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Copeland, W. Alexander, E. Boughter, and T. Keller. </author> <title> Data Placement in Bubba. </title> <booktitle> In Proceedings of the ACM SIGMOD 1988, Intl. Conf. on the Management of Data. </booktitle> <publisher> ACM Press, </publisher> <year> 1988. </year>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines.
Reference: [2] <author> H. M. Dewan. </author> <title> Runtime Reorganization of Parallel and Distributed Expert Database Systems. </title> <type> Technical report, </type> <institution> Dept. of Computer Science, Columbia University, </institution> <month> May </month> <year> 1994. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa [13, 12] No No No No No Schneider/DeWitt [15, 8] No No Yes No No Wolf/Yu/Turek/Dias [19, 18] No No Yes No No DeWitt and Naughton [9] No No Yes No Yes Present Work <ref> [2] </ref> Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative to the entire relation, significant savings in computation can result. The joining of corresponding buckets may be carried out either by a nested loop algorithm, or a hash-probe method.
Reference: [3] <author> H.M. Dewan, M. Hernandez, S. Stolfo, and J. Hwang. </author> <title> Predictive Dynamic Load Balancing of Parallel and Distributed Rule and Query Processing. </title> <booktitle> In Proc. of the ACM-SIGMOD 1994, Intl. Conf. on the Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: Another crucial issue is the choice of attribute and partitioning function to optimize the distribution of workload at run-time, as well as optimal choice of batch size b for a particular distribution. The parallel join algorithm is presently being implemented as the underlying rule matching component of the PARADISER <ref> [3, 4] </ref> expert database system reported elsewhere. PARADISER currently runs in a replicated database configuration on a distributed network of workstations in the processing environment of a "typical" Computer Science department.
Reference: [4] <author> H.M. Dewan and S.J. Stolfo. </author> <title> The Distributed Evaluation of Rules in PARADISER. </title> <note> Technical Report In Preparation, </note> <institution> Department of Computer Science, Columbia University, </institution> <month> May (expected) </month> <year> 1994. </year>
Reference-contexts: Another crucial issue is the choice of attribute and partitioning function to optimize the distribution of workload at run-time, as well as optimal choice of batch size b for a particular distribution. The parallel join algorithm is presently being implemented as the underlying rule matching component of the PARADISER <ref> [3, 4] </ref> expert database system reported elsewhere. PARADISER currently runs in a replicated database configuration on a distributed network of workstations in the processing environment of a "typical" Computer Science department.
Reference: [5] <author> H.M. Dewan, S.J. Stolfo, and L. Woodbury. </author> <title> Scalable Parallel and Distributed Expert Database Systems with Predictive Load Balancing. </title> <journal> J. Parallel and Distrib. Computing, </journal> <note> Special Issue on Scalable Systems, 1994. To appear. 17 </note>
Reference-contexts: We discuss the PJ protocol for an architecture consisting of P processing sites and a single coordinator, referred to as the CP (hence, P + 1 sites are involved). Variations of the protocol may use more than one coordinator, thus distributing the coordination task <ref> [5] </ref>. However, in this paper, we discuss the case where there is a single CP. The CP only listens for messages from other sites, and sends system reorganization directives to other sites in the ensemble, but does not participate in the join processing itself. <p> The identity of the target site for each bucket pair is known to the CP in log P steps. (See <ref> [5] </ref> for details.) 7 Parallel Join in the Presence of Data Skew Parallel join algorithms are particularly sensitive to data skew. Most parallel join algorithms largely ignore the issue and assume uniform distribution of values in the domain of the join attributes for the relations to be joined.
Reference: [6] <author> D. DeWitt and R. Gerber. </author> <booktitle> Multiprocessor Hash--based Join Algorithms. </booktitle> <pages> pages 151-164, </pages> <year> 1985. </year> <booktitle> In proc. Intl. Conference on Very Large Databases. </booktitle>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines.
Reference: [7] <author> D. DeWitt, R. Gerber, G. Graefe, M. Heytens, K. Kumar, and M. Muralikrishna. </author> <title> GAMMA A High Performance Dataflow Database Machine. </title> <booktitle> pages 228-237, 1986. In proc. Intl. Conference on Very Large Databases. </booktitle>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines.
Reference: [8] <author> D. DeWitt and J. Gray. </author> <title> Parallel Database Systems: The Future of High Performance Database Systems. </title> <booktitle> In Communications of the ACM. ACM, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines. <p> Once buckets are formed, the full join can be computed by joining only the corresponding buckets (i.e., those with the same hash number). If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa [13, 12] No No No No No Schneider/DeWitt <ref> [15, 8] </ref> No No Yes No No Wolf/Yu/Turek/Dias [19, 18] No No Yes No No DeWitt and Naughton [9] No No Yes No Yes Present Work [2] Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative to the entire relation, significant savings in computation
Reference: [9] <author> D. DeWitt, J. Naughton, D. Schneider, and S. Se-shadri. </author> <title> Practical Skew Handling in Parallel Joins. </title> <booktitle> pages 27-40, 1992. In proc. Intl. Conference on Very Large Databases. </booktitle>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines. <p> While there are many subtle differences among these efforts, they all assume a homogeneous ensemble of processors which do not exhibit performance variations over time. Another class of parallel join algorithms have been described in the literature to specifically address the problems introduced when data skew is present <ref> [19, 18, 12, 9] </ref>. However, in these cases as in the previous ones, the underlying processing resources are assumed to be homogeneous and time-invariant. <p> If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa [13, 12] No No No No No Schneider/DeWitt [15, 8] No No Yes No No Wolf/Yu/Turek/Dias [19, 18] No No Yes No No DeWitt and Naughton <ref> [9] </ref> No No Yes No Yes Present Work [2] Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative to the entire relation, significant savings in computation can result.
Reference: [10] <author> R. Graham. </author> <title> Bounds on Multiprocessing Timing Anomalies. </title> <journal> SIAM J. of Applied Mathematics, </journal> <volume> 17(2) </volume> <pages> 416-429, </pages> <year> 1969. </year>
Reference-contexts: The CP now has all the information it requires to decide how to reallocate the excess buckets among all the sites and minimize the overall completion time. The PJ protocol accomplishes this with a combination of cost modelling and a modified version of the LPT (longest processing time first) <ref> [10] </ref> heuristic algorithm reported extensively in the literature. Our version is called WLPT (Weighted LPT). The details are given in the next section. <p> While finding a true optimal allocation is NP-complete, a fast heuristic that solves a closely related problem and which has excellent average case performance may be used instead. Such a heuristic is the Longest Processing Time First (LPT) algorithm <ref> [10] </ref>. LPT was designed to be a fast heuristic for solving the Multiprocessor Scheduling problem, which is NP-complete. The multiprocessor scheduling problem may be described as follows.
Reference: [11] <author> Tandem Performance Group. </author> <title> A Benchmark of Non-Stop SQL on the Debit Credit Transaction. </title> <booktitle> In Proceedings of the ACM SIGMOD 1988, Intl. Conf. on the Management of Data. </booktitle> <publisher> ACM Press, </publisher> <year> 1988. </year>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines.
Reference: [12] <author> M. Kitsuregawa and Y. Ogawa. </author> <title> Bucket Spreading Parallel Hash: A New, Robust, Parallel hash Join Method for Data Skew in the Super Database Computer (SDC). </title> <booktitle> 1990. In proc. Intl. Conference on Very Large Databases. </booktitle>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines. <p> While there are many subtle differences among these efforts, they all assume a homogeneous ensemble of processors which do not exhibit performance variations over time. Another class of parallel join algorithms have been described in the literature to specifically address the problems introduced when data skew is present <ref> [19, 18, 12, 9] </ref>. However, in these cases as in the previous ones, the underlying processing resources are assumed to be homogeneous and time-invariant. <p> This idea is common to all hash join algorithms. Once buckets are formed, the full join can be computed by joining only the corresponding buckets (i.e., those with the same hash number). If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa <ref> [13, 12] </ref> No No No No No Schneider/DeWitt [15, 8] No No Yes No No Wolf/Yu/Turek/Dias [19, 18] No No Yes No No DeWitt and Naughton [9] No No Yes No Yes Present Work [2] Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative
Reference: [13] <author> M. Kitsuregawa, H. Tanaka, and T. Moto-Oka. </author> <title> Application of Hash to Data Base Machine and Its Architecture. In New Generation Computing, </title> <booktitle> volume 1:1, </booktitle> <year> 1983. </year>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines. <p> This idea is common to all hash join algorithms. Once buckets are formed, the full join can be computed by joining only the corresponding buckets (i.e., those with the same hash number). If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa <ref> [13, 12] </ref> No No No No No Schneider/DeWitt [15, 8] No No Yes No No Wolf/Yu/Turek/Dias [19, 18] No No Yes No No DeWitt and Naughton [9] No No Yes No Yes Present Work [2] Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative
Reference: [14] <author> D.E. Knuth. </author> <title> The Art of Computer Programming, volume 3: Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: Such values are called "skew elements". It has been suggested that the skew in the distribution of the values of interesting attributes in many real databases may be modeled by a Zipf-like distribution <ref> [14] </ref>, where the degree of skew may be controlled with one of the parameters that defines the distribution. The cost models we have shown so far for the case of uniform distributions do not apply when the base relations are skewed in the distribution of its join column.
Reference: [15] <author> D.A. Schneider and D.J. DeWitt. </author> <title> A Performance Evaluation of Four Parallel Join Algorithms in a Shared-Nothing Multiprocessor Environment. </title> <booktitle> In Proceedings of the ACM SIGMOD 1989, Intl. Conf. on the Management of Data. </booktitle> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines. <p> Once buckets are formed, the full join can be computed by joining only the corresponding buckets (i.e., those with the same hash number). If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa [13, 12] No No No No No Schneider/DeWitt <ref> [15, 8] </ref> No No Yes No No Wolf/Yu/Turek/Dias [19, 18] No No Yes No No DeWitt and Naughton [9] No No Yes No Yes Present Work [2] Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative to the entire relation, significant savings in computation
Reference: [16] <author> M. Stonebraker, </author> <title> editor. The INGRES Papers: Anatomy of a Relational Database System. </title> <publisher> Addison-Weslwy Publishing Company, </publisher> <year> 1986. </year>
Reference-contexts: by the New York State Science and Technology Foundation through the Center for Advanced Technology under contract NYSSTFCU01207901, and in part by NSF CISE grant CDA-90-24735. y This author's work has been supported by an AT&T Cooperative Research Program Fellowship. the development of efficient parallel join algorithms for multiprocessor environments <ref> [13, 6, 8, 7, 16, 12, 1, 11, 15, 9] </ref>. These algorithms are parallel versions of sort-merge or hash-based joins previously developed for centralized uniprocessor database machines.
Reference: [17] <author> J. D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems; Vols. 1 and 2. </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: Thus, the ratio 1 D i may be regarded as an estimate of the join selectivity between the i-th buckets of R and S. This agrees with other estimates of join selectiv ity <ref> [17] </ref> between two relations, which is often defined to be the inverse of the larger of the domain sizes of the two relations involved in a join.
Reference: [18] <author> J.L. Wolf, </author> <title> D.M. Dias, and P.S. Yu. A Parallel Sort Merge Join Algorithm for Managing Data Skew. </title> <journal> In IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> volume 4:1, </volume> <pages> pages 70-86, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: While there are many subtle differences among these efforts, they all assume a homogeneous ensemble of processors which do not exhibit performance variations over time. Another class of parallel join algorithms have been described in the literature to specifically address the problems introduced when data skew is present <ref> [19, 18, 12, 9] </ref>. However, in these cases as in the previous ones, the underlying processing resources are assumed to be homogeneous and time-invariant. <p> If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa [13, 12] No No No No No Schneider/DeWitt [15, 8] No No Yes No No Wolf/Yu/Turek/Dias <ref> [19, 18] </ref> No No Yes No No DeWitt and Naughton [9] No No Yes No Yes Present Work [2] Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative to the entire relation, significant savings in computation can result.
Reference: [19] <author> J.L. Wolf, D.M. Dias, P.S. Yu, and J. Turek. </author> <title> Comparative Performance of Parallel Join Algorithms. </title> <booktitle> In First Intl. Conference on Parallel and Distributed Systems, </booktitle> <pages> pages 78-88. </pages> <publisher> IEEE, </publisher> <year> 1991. </year> <month> 18 </month>
Reference-contexts: While there are many subtle differences among these efforts, they all assume a homogeneous ensemble of processors which do not exhibit performance variations over time. Another class of parallel join algorithms have been described in the literature to specifically address the problems introduced when data skew is present <ref> [19, 18, 12, 9] </ref>. However, in these cases as in the previous ones, the underlying processing resources are assumed to be homogeneous and time-invariant. <p> If 2 Prior Work Hetero. Temporal Var/DLB Skew Env. Monitoring Meta Data Kitsuregawa [13, 12] No No No No No Schneider/DeWitt [15, 8] No No Yes No No Wolf/Yu/Turek/Dias <ref> [19, 18] </ref> No No Yes No No DeWitt and Naughton [9] No No Yes No Yes Present Work [2] Yes Yes Yes Yes Yes Table 1: Comparison of Parallel Join Methods buckets are small relative to the entire relation, significant savings in computation can result.
References-found: 19

