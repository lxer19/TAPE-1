URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/96-cade-trafo-red.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/96-cade-trafo.html
Root-URL: 
Title: Converting Non-Classical Matrix Proofs into Sequent-Style Systems  
Author: Stephan Schmitt Christoph Kreitz 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: FG Intellektik, FB Informatik, TH Darmstadt  
Note: In M. McRobbie and J. Slaney, editors, 13 th International Conference on Automated Deduction, LNAI 1104, pp. 418-432, Springer Verlag, 1996.  
Abstract: fsteph,kreitzg@intellektik.informatik.th-darmstadt.de Abstract. We present a uniform algorithm for transforming matrix proofs in classical, constructive, and modal logics into sequent style proofs. Making use of a similarity between matrix methods and Fitting's prefixed tableaus we first develop a procedure for extracting a prefixed sequent proof from a given matrix proof. By considering the additional restrictions on the order of rule applications we then extend this procedure into an algorithm which generates a conventional sequent proof. Our algorithm is based on unified representations of matrix characterizations for various logics as well as of prefixed and usual sequent calculi. The peculiarities of a logic are encoded by certain parameters which are summarized in tables to be consulted by the algorithm.
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> E. W. Beth. </editor> <booktitle> The foundations of mathematics. </booktitle> <publisher> North-Holland, </publisher> <year> 1959. </year>
Reference-contexts: S4) or M (a 5 )=a 7 (for S5). 2.2 Sequent Calculi We present a system of cut-free sequent calculi for C; J and for the cumulative and varying domain 1 modal logics K; K4; D; D4; T; S4 in a uniform and compact notation based on classical tableaux systems <ref> [1, 7] </ref>. According to the Kripke-semantics [6, 7] the domain conditions mean that either wRv implies P (w) P (v) (P (x) C 0 is a set of constants known at world x) or that P (w) and P (v) are independent domains of their own for all w; v.
Reference: 2. <author> W. Bibel, S. Br uning, U. Egly, T. Rath. Komet. </author> <title> In CADE-12, </title> <publisher> LNAI 814, </publisher> <pages> pp. 783-787. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: In many of these applications there is a need for automated proof methods. In general, however, calculi for these logics are of Gentzen or Tableaux style and not very efficient for proof search. On the other hand, theorem provers based on resolution [14, 19] and the connection method <ref> [3, 4, 8, 2] </ref> have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used.
Reference: 3. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> J. of the ACM, </journal> <volume> 28 </volume> <pages> 633-645, </pages> <year> 1981. </year>
Reference-contexts: In many of these applications there is a need for automated proof methods. In general, however, calculi for these logics are of Gentzen or Tableaux style and not very efficient for proof search. On the other hand, theorem provers based on resolution [14, 19] and the connection method <ref> [3, 4, 8, 2] </ref> have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used.
Reference: 4. <author> W. Bibel. </author> <title> Automated Theorem Proving. </title> <publisher> Vieweg Verlag, </publisher> <year> 1987. </year>
Reference-contexts: In many of these applications there is a need for automated proof methods. In general, however, calculi for these logics are of Gentzen or Tableaux style and not very efficient for proof search. On the other hand, theorem provers based on resolution [14, 19] and the connection method <ref> [3, 4, 8, 2] </ref> have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used. <p> These charac-terizations have been adopted from [18] which again can be viewed as an extension of Bibel's matrix method <ref> [4] </ref>. Within this paper we focus on the basic ideas and syntactical concepts and refer to [18] or [13] for details. Position-trees, Types, and Prefixes The basic structure for representing matrix proofs is a tree ordering t which will be constructed from a formula tree.
Reference: 5. <author> B. I. Dahn, J. Gehne, Th. Honigmann, L. Walther, A. Wolf. </author> <title> Integrating Logical Functions with ILF; Preprint 94-10, </title> <address> Humboldt University Berlin, </address> <year> 1994. </year>
Reference-contexts: Since the development of automated theorem provers attempts have been made to convert machine proofs into a humanly comprehensible form. Lingenfelder [9, 10] has (partially) succeeded in transforming classical resolution proofs into natural deduction proofs. The ILF System <ref> [5] </ref> can create classical proofs in a semi-natural mathematical language. In earlier work [15] we have developed a method for transforming intuitionistic matrix proofs into sequent proofs. For other non-classical logics, however, such a conversion procedure does not yet exist.
Reference: 6. <author> M. C. </author> <title> Fitting. Intuitionistic logic, model theory and forcing. </title> <booktitle> Studies in logic and the foundations of mathematics. </booktitle> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: Logics in Matrix- and Sequent Calculi 2.1 Matrix Characterizations for Various Logics We shall now introduce matrix characterizations for the logics C, J , and the modal logics K; K4; D; D4; T; S4; S5 with their cumulative, varying and constant domain 419 variants concerning the Kripke-semantics of these logics <ref> [6, 7, 18] </ref>. These charac-terizations have been adopted from [18] which again can be viewed as an extension of Bibel's matrix method [4]. Within this paper we focus on the basic ideas and syntactical concepts and refer to [18] or [13] for details. <p> According to the Kripke-semantics <ref> [6, 7] </ref> the domain conditions mean that either wRv implies P (w) P (v) (P (x) C 0 is a set of constants known at world x) or that P (w) and P (v) are independent domains of their own for all w; v.
Reference: 7. <author> M. C. </author> <title> Fitting. Proof Methods for Modal and Intuitionistic Logic. </title> <address> D. </address> <publisher> Reidel, </publisher> <year> 1983. </year>
Reference-contexts: These may again depend on the underlying logic and force us to insert wait-labels at certain nodes in order to keep them from being reduced too early. Because of a strong similarity between matrix characterizations of logical validity and Fitting's prefixed tableaux systems <ref> [7] </ref> we present the algorithm in two phases. First we show how to convert a matrix proof into a prefixed sequent proof. Such an algorithm requires `only' a unified representation of prefixed sequent systems and tables for determining appropriate sequent rules. <p> Logics in Matrix- and Sequent Calculi 2.1 Matrix Characterizations for Various Logics We shall now introduce matrix characterizations for the logics C, J , and the modal logics K; K4; D; D4; T; S4; S5 with their cumulative, varying and constant domain 419 variants concerning the Kripke-semantics of these logics <ref> [6, 7, 18] </ref>. These charac-terizations have been adopted from [18] which again can be viewed as an extension of Bibel's matrix method [4]. Within this paper we focus on the basic ideas and syntactical concepts and refer to [18] or [13] for details. <p> S4) or M (a 5 )=a 7 (for S5). 2.2 Sequent Calculi We present a system of cut-free sequent calculi for C; J and for the cumulative and varying domain 1 modal logics K; K4; D; D4; T; S4 in a uniform and compact notation based on classical tableaux systems <ref> [1, 7] </ref>. According to the Kripke-semantics [6, 7] the domain conditions mean that either wRv implies P (w) P (v) (P (x) C 0 is a set of constants known at world x) or that P (w) and P (v) are independent domains of their own for all w; v. <p> According to the Kripke-semantics <ref> [6, 7] </ref> the domain conditions mean that either wRv implies P (w) P (v) (P (x) C 0 is a set of constants known at world x) or that P (w) and P (v) are independent domains of their own for all w; v. <p> This reduction-formula is determined by the name of the rule, i.e. by the logical operator and its polarity. We further abbreviate the reduction 1 For constant domains such sequent calculi do not exist in all cases (see <ref> [7] </ref>). 422 formulae by their Ptypes (as e.g. in the ff-reductions ^l and _r). Since we do not need structural rules, we have to copy some reduction-formulae explicitly into the rule's premises to retain completeness. These are the fl-formulae and the - formulae for all modal logics except K; K4. <p> A branch is closed if its leaf is marked with axiom. A derivation is a sequent proof iff all branches are closed. If we consider varying domains (VD) we have to check an additional condition when applying a fl-rule (see <ref> [7] </ref>) which says that only constants which are aliveon a fl-branch fi.are allowed to be introduced with fl 0 (t). <p> Additionally they can also deal with constant domains. We construct them in a uniform notation from the prefixed tableaux systems developed in <ref> [7] </ref> for K; K4; D; D4; T; S4 in all domain variants, for S5 in varying and constant domains, and we present a prefixed sequent system for J . For classical logic C the prefixes should be ignored.
Reference: 8. <author> R. Letz, J. Schumann, S. Bayerl, W. Bibel. </author> <title> Setheo: A high-performance theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8 </volume> <pages> 183-212, </pages> <year> 1992. </year>
Reference-contexts: In many of these applications there is a need for automated proof methods. In general, however, calculi for these logics are of Gentzen or Tableaux style and not very efficient for proof search. On the other hand, theorem provers based on resolution [14, 19] and the connection method <ref> [3, 4, 8, 2] </ref> have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used.
Reference: 9. <author> C. Lingenfelder. </author> <title> Structuring computer generated proofs. </title> <booktitle> IJCAI-89, </booktitle> <year> 1989. </year>
Reference-contexts: A user of a theorem prover will get the information that a theorem is valid but he will hardly understand why this is the case. Since the development of automated theorem provers attempts have been made to convert machine proofs into a humanly comprehensible form. Lingenfelder <ref> [9, 10] </ref> has (partially) succeeded in transforming classical resolution proofs into natural deduction proofs. The ILF System [5] can create classical proofs in a semi-natural mathematical language. In earlier work [15] we have developed a method for transforming intuitionistic matrix proofs into sequent proofs.
Reference: 10. <author> C. Lingenfelder. </author> <title> Transformation and Structuring of Computer Generated Proofs. </title> <type> PhD thesis, </type> <institution> Universitat Kaiserslautern, </institution> <year> 1990. </year>
Reference-contexts: A user of a theorem prover will get the information that a theorem is valid but he will hardly understand why this is the case. Since the development of automated theorem provers attempts have been made to convert machine proofs into a humanly comprehensible form. Lingenfelder <ref> [9, 10] </ref> has (partially) succeeded in transforming classical resolution proofs into natural deduction proofs. The ILF System [5] can create classical proofs in a semi-natural mathematical language. In earlier work [15] we have developed a method for transforming intuitionistic matrix proofs into sequent proofs.
Reference: 11. <author> H. J. Ohlbach. </author> <title> A resolution calculus for modal logics. </title> <type> Ph.D. Thesis, </type> <institution> Universitat Kaiserslautern, </institution> <year> 1988. </year>
Reference-contexts: On the other hand, theorem provers based on resolution [14, 19] and the connection method [3, 4, 8, 2] have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used. Recently Wallen [17, 18] and Ohlbach <ref> [11] </ref> have extended the classical characterizations of logical validity into characterizations of validity for intuitionis-tic logic (J ) and the modal logics K; K4; D; D4; T; S4, and S5.
Reference: 12. <author> J. Otten, C. </author> <title> Kreitz. A connection based proof method for intuitionistic logic. </title> <journal> TABLEAUX-95, </journal> <volume> LNAI 918, </volume> <pages> pp. 122-137, </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Since then attempts have been undertaken to extend the existing proof methods accordingly in order to create efficient proof procedures for intuitionistic logic <ref> [12] </ref> and modal logics [13]. The efficiency of automated proof methods strongly depends on a compact representation of a proof. The characterizations of logical validity, on which these methods are based, avoid the notational redundancies contained in mathematical languages or sequent calculi.
Reference: 13. <author> J. Otten, C. </author> <title> Kreitz. A Uniform Proof Procedure for Classical and Non-Classical Logics Technical Report, </title> <institution> TH Darmstadt, </institution> <year> 1996. </year>
Reference-contexts: Since then attempts have been undertaken to extend the existing proof methods accordingly in order to create efficient proof procedures for intuitionistic logic [12] and modal logics <ref> [13] </ref>. The efficiency of automated proof methods strongly depends on a compact representation of a proof. The characterizations of logical validity, on which these methods are based, avoid the notational redundancies contained in mathematical languages or sequent calculi. As a result, an automatically generated proof is almost impossible to comprehend. <p> These charac-terizations have been adopted from [18] which again can be viewed as an extension of Bibel's matrix method [4]. Within this paper we focus on the basic ideas and syntactical concepts and refer to [18] or <ref> [13] </ref> for details. Position-trees, Types, and Prefixes The basic structure for representing matrix proofs is a tree ordering t which will be constructed from a formula tree. We classify a formula A and its sub-formulae according to the tableaux scheme in table 1. <p> We define an L-substitution L to be a mapping L : -0 7! T fl L . The conditions on this prefix-substitution uniquely determine the logic L to be considered (see [18] and <ref> [13] </ref>). L induces a relation &lt; L on T L fi T L satisfying the following condition: If L (u)=p and p 62 -0 , then for all v occurring in p; v &lt; L u.
Reference: 14. <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> J. of the ACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference-contexts: In many of these applications there is a need for automated proof methods. In general, however, calculi for these logics are of Gentzen or Tableaux style and not very efficient for proof search. On the other hand, theorem provers based on resolution <ref> [14, 19] </ref> and the connection method [3, 4, 8, 2] have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used.
Reference: 15. <author> S. Schmitt, C. </author> <title> Kreitz. On transforming intuitionistic matrix proofs into standard-sequent proofs. </title> <journal> TABLEAUX-95, </journal> <volume> LNAI 918, </volume> <pages> pp. 106-121, </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Lingenfelder [9, 10] has (partially) succeeded in transforming classical resolution proofs into natural deduction proofs. The ILF System [5] can create classical proofs in a semi-natural mathematical language. In earlier work <ref> [15] </ref> we have developed a method for transforming intuitionistic matrix proofs into sequent proofs. For other non-classical logics, however, such a conversion procedure does not yet exist.
Reference: 16. <editor> S. Schmitt. Ein erweiterter intuitionistischer Sequenzenkalkul und dessen Anwen-dung im intuitionistischen Konnektionsbeweisen. TH Darmstadt, </editor> <year> 1994. </year>
Reference-contexts: Thus the reduction ordering / ? has to be extended by additional wait-labels which make deleting subrelations after fi-splits essential for preserving completeness. In <ref> [16] </ref> we have developed a concept of reductions on non-normal matrix proofs which respects these optimization- and completeness features. This concept is one of the theoretical foundations of the transformation algorithm and is based on the 428 principle of proof relevant positions. <p> Finally splitting at fi-positions becomes a more complex operation since in order to guarantee completeness we have to prevent the transformation algorithm from running into deadlocks caused by the new wait 2 -labels. For details concerning the concept of fi-splits we refer to <ref> [16] </ref>. We shall present the modifications of our algorithm which deal with the first two aspects by replacing the boxed areas (1),(2),(3), and (4) as follows: 430 1.
Reference: 17. <author> L. Wallen. </author> <title> Matrix proof methods for modal logics. </title> <journal> IJCAI-87, </journal> <volume> p. </volume> <pages> 917-923. </pages> <year> 1987. </year>
Reference-contexts: On the other hand, theorem provers based on resolution [14, 19] and the connection method [3, 4, 8, 2] have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used. Recently Wallen <ref> [17, 18] </ref> and Ohlbach [11] have extended the classical characterizations of logical validity into characterizations of validity for intuitionis-tic logic (J ) and the modal logics K; K4; D; D4; T; S4, and S5.
Reference: 18. <author> L. Wallen. </author> <title> Automated deduction in nonclassical logic. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: On the other hand, theorem provers based on resolution [14, 19] and the connection method [3, 4, 8, 2] have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used. Recently Wallen <ref> [17, 18] </ref> and Ohlbach [11] have extended the classical characterizations of logical validity into characterizations of validity for intuitionis-tic logic (J ) and the modal logics K; K4; D; D4; T; S4, and S5. <p> In this paper we present an algorithm for transforming matrix proofs into sequent style proofs which allows a uniform treatment of classical, constructive, and modal logics. For this purpose we have developed a unified representation of Wallen's matrix characterizations <ref> [18] </ref> for these logics. <p> Logics in Matrix- and Sequent Calculi 2.1 Matrix Characterizations for Various Logics We shall now introduce matrix characterizations for the logics C, J , and the modal logics K; K4; D; D4; T; S4; S5 with their cumulative, varying and constant domain 419 variants concerning the Kripke-semantics of these logics <ref> [6, 7, 18] </ref>. These charac-terizations have been adopted from [18] which again can be viewed as an extension of Bibel's matrix method [4]. Within this paper we focus on the basic ideas and syntactical concepts and refer to [18] or [13] for details. <p> These charac-terizations have been adopted from <ref> [18] </ref> which again can be viewed as an extension of Bibel's matrix method [4]. Within this paper we focus on the basic ideas and syntactical concepts and refer to [18] or [13] for details. <p> These charac-terizations have been adopted from <ref> [18] </ref> which again can be viewed as an extension of Bibel's matrix method [4]. Within this paper we focus on the basic ideas and syntactical concepts and refer to [18] or [13] for details. Position-trees, Types, and Prefixes The basic structure for representing matrix proofs is a tree ordering t which will be constructed from a formula tree. We classify a formula A and its sub-formulae according to the tableaux scheme in table 1. <p> We define an L-substitution L to be a mapping L : -0 7! T fl L . The conditions on this prefix-substitution uniquely determine the logic L to be considered (see <ref> [18] </ref> and [13]). L induces a relation &lt; L on T L fi T L satisfying the following condition: If L (u)=p and p 62 -0 , then for all v occurring in p; v &lt; L u. <p> A path is -complementary iff it contains a -complementary connection. A set C of - complementary connections spans a formula hA; 0i if each path through hA; 0i con tains an element C. The following characterization theorem can be proven (see <ref> [18] </ref>). 421 Theorem 3. A formula A is L-valid iff there is a multiplicity , an L-admissible combined substitution := ( Q ; L ); L 2 fM; J g, and a set of -complementary connections that spans the signed formula hA; 0i. Example 1.
Reference: 19. <author> L. Wos et. al. </author> <note> Automated reasoning contributes to mathematics and logic. CADE-10, LNCS 449, p. 485-499. Springer 1990. 432 </note>
Reference-contexts: In many of these applications there is a need for automated proof methods. In general, however, calculi for these logics are of Gentzen or Tableaux style and not very efficient for proof search. On the other hand, theorem provers based on resolution <ref> [14, 19] </ref> and the connection method [3, 4, 8, 2] have demonstrated that formal reasoning in classical predicate logic (C) can be automated sufficiently well if less redundant calculi are being used.
References-found: 19

