URL: http://charm.cs.uiuc.edu/papers/ImportINTL95.ps
Refering-URL: http://charm.cs.uiuc.edu/papers/ImportINTL95.html
Root-URL: http://www.cs.uiuc.edu
Email: jyelon@cs.uiuc.edu, kale@cs.uiuc.edu  
Author: L. V. Kale, J. Yelon, and T. Knauff 
Note: The following report is a description of the work done on the Parallel Import simulation language developed at the  
Date: April 17, 1997  
Address: Urbana Illinois 61801,  
Affiliation: Dept. of Computer Science, University of Illinois,  University of Illinois parallel programming laboratory.  
Abstract: Parallel Import Report Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> M. Abrams and P. F. Reynolds Jr., editors. </editor> <booktitle> 6th Workshop on Parallel and Distributed Simulation (PADS92). Proceedings of the 1992 SCS Western Simulation Multiconference on Parallel and Distributed Simulation, </booktitle> <month> 20-22 January </month> <year> 1992, </year> <title> Newport Beach, </title> <booktitle> California, </booktitle> <volume> volume 24, no. </volume> <booktitle> 3 of Simulation Series. SCS, </booktitle> <year> 1992. </year>
Reference: [2] <author> D. Ball and S. Hoyt. </author> <title> The Adaptive Time-Warp Concurrency Control Algorithm. </title> <booktitle> In Proceedings of the SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 174-177, </pages> <year> 1990. </year>
Reference-contexts: It is possible to construct programs specifically to cause Time Warp to thrash. We refer the reader to previous research in this area <ref> [2] </ref> [13] [4] [8] [11] [12] [16]. While it is impossible to make general assertions about how many rollbacks will occur in a Parallel Import program, it is possible to present case studies.
Reference: [3] <author> R. F. Belanger. </author> <title> MODSIM II A Modular, </title> <booktitle> Object-Oriented Language. In Proceedings of the Winter Simulation Conference, </booktitle> <pages> pages 118-122, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Import [14] is a programming language which was developed at the U.S. Army Corps of Engineering Construction Engineering Research Laboratory. It is a general purpose language with enhancements for discrete event simulation. Its syntax is based on Modsim [5] <ref> [3] </ref>, which in turn was based loosely on Modula-2. The Parallel Programming Laboratory of the University of Illinois Department of Computer Science received a grant from ARPA to design and implement a parallel version of Import.
Reference: [4] <author> O. Berry. </author> <title> Performance evaluation of the Time Warp distributed simulation mechanism. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <year> 1986. </year>
Reference-contexts: It is possible to construct programs specifically to cause Time Warp to thrash. We refer the reader to previous research in this area [2] [13] <ref> [4] </ref> [8] [11] [12] [16]. While it is impossible to make general assertions about how many rollbacks will occur in a Parallel Import program, it is possible to present case studies.
Reference: [5] <author> O. F. Bryan Jr. </author> <title> MODSIM II An Object Oriented Simulation Language for Sequential and Parallel Procesors. </title> <booktitle> In Proceedings of the 1989 Winter Simulation Conference, </booktitle> <pages> pages 172-177, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction Import [14] is a programming language which was developed at the U.S. Army Corps of Engineering Construction Engineering Research Laboratory. It is a general purpose language with enhancements for discrete event simulation. Its syntax is based on Modsim <ref> [5] </ref> [3], which in turn was based loosely on Modula-2. The Parallel Programming Laboratory of the University of Illinois Department of Computer Science received a grant from ARPA to design and implement a parallel version of Import.
Reference: [6] <author> R. Bryant. </author> <title> Simulation on a Distributed System. </title> <booktitle> In Proceedings of the 1st International Conference on Distributed Computer Systems, </booktitle> <pages> pages 544-552, </pages> <year> 1979. </year>
Reference-contexts: Since each global object is in an object group by itself, global objects can be accessed only by tell invocation. 3 The Time-Warp Concurrency Control Mechanism There are two known means of keeping tell invocations ordered relative to each other. The first is the Chandy-Misra-Bryant conservative mechanism [7] <ref> [6] </ref>. The basic idea behind Chandy-Misra-Bryant is that one does not deliver a tell invocation to an object in a group until one is certain that the tell invocation is the earliest one the group will receive.
Reference: [7] <author> K. Chandy and J. Misra. </author> <title> A non-trivial example of concurrent processing: Distributed simulation. </title> <booktitle> In Proceedings of COMPSAC, </booktitle> <pages> pages 822-826, </pages> <year> 1978. </year>
Reference-contexts: Since each global object is in an object group by itself, global objects can be accessed only by tell invocation. 3 The Time-Warp Concurrency Control Mechanism There are two known means of keeping tell invocations ordered relative to each other. The first is the Chandy-Misra-Bryant conservative mechanism <ref> [7] </ref> [6]. The basic idea behind Chandy-Misra-Bryant is that one does not deliver a tell invocation to an object in a group until one is certain that the tell invocation is the earliest one the group will receive.
Reference: [8] <author> A. Gupta, I. F. Akyildiz, and R. Fujimoto. </author> <title> Performance Analysis of Time Warp with Homogenous Processors and Exponential Task Times. </title> <booktitle> In ACM SIGMETRICS, Performance Evaluation Review, </booktitle> <pages> pages 101-110, </pages> <year> 1991. </year>
Reference-contexts: It is possible to construct programs specifically to cause Time Warp to thrash. We refer the reader to previous research in this area [2] [13] [4] <ref> [8] </ref> [11] [12] [16]. While it is impossible to make general assertions about how many rollbacks will occur in a Parallel Import program, it is possible to present case studies.
Reference: [9] <author> D. Jefferson and H. Sowizral. </author> <title> Fast Concurrent Simulation Using the Time Warp Mechanism. </title> <booktitle> In Proceedings of the Conference on Distributed Simulation, </booktitle> <pages> pages 63-69, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: In other words, the operating system postpones delivery of tell invocations until it can prove that no other tell invocation with an earlier timestamp will be transmitted. The second means of concurrency control is the Time Warp mechanism <ref> [9] </ref>, also known as optimistic concurrency control. The Time Warp mechanism works on the following principle. When an object in a group receives a tell invocation, the method is executed. <p> In theory, the entire history of a simulation could be kept. However, roll-back logs can be expensive in terms of memory, so in practice the space for the history needs to be reclaimed. Jefferson first noted <ref> [9] </ref> that at any given point in a Time Warp system, there is a set of unprocessed tell invocations, and of those tell invocations, one of them has the least timestamp t. There are thus no unprocessed invocations prior to time t.
Reference: [10] <author> L.V. Kale, M. Bhandarkar, N. Jagathesan, S. Krishnan, and J. Yelon. </author> <title> Converse: An Interop-erable Framework for Parallel Programming. </title> <note> In International Parallel Processing Symposium 1996 (to appear), </note> <year> 1996. </year>
Reference-contexts: Detailed descriptions of specific modules are described elsewhere, the objective of this section is to provide a "big-picture" point of view. Import has been implemented on top of the Converse <ref> [10] </ref> machine interface. Converse is a toolkit providing subroutines for message transmission, thread creation, scheduling, and many other behaviors common to parallel programs. All Converse programs (including Parallel Import) utilize the following programming model. Each processor has a task-queue. <p> Transmission costs. The message must be sent to a remote processor if the target object is remote. If the target object group is local, this cost is bypassed. The cost of this operation varies significantly from machine to machine. We detail these costs in the Converse report. <ref> [10] </ref> 3. Queueing costs. When the message arrives, it must be inserted into a prioritized queue, and eventually, removed from the queue by a scheduler. 4. Unpacking Costs. The argument data must be extracted from the message and the tell method must be invoked. <p> This objective has been met. To help achieve this objective, we relied upon the Converse parallel runtime system <ref> [10] </ref>, developed at the Parallel Programming Laboratory. The objective of Converse is to support the implementation of parallel languages in such a way that they are both portable and interoperable.
Reference: [11] <author> J. P. Kearns and J. E. Payne. </author> <title> Performance Evaluation of Protocols for Distributed Systems: An Alternative to Message Counting. </title> <booktitle> In Proceedings of the Winter Simulation Conference, </booktitle> <pages> pages 441-445, </pages> <year> 1990. </year>
Reference-contexts: It is possible to construct programs specifically to cause Time Warp to thrash. We refer the reader to previous research in this area [2] [13] [4] [8] <ref> [11] </ref> [12] [16]. While it is impossible to make general assertions about how many rollbacks will occur in a Parallel Import program, it is possible to present case studies.
Reference: [12] <author> R. J. Lipton and D. W. Mizell. </author> <title> Time Warp vs. Chandy-Misra: A worstcase comparison. </title> <booktitle> In </booktitle>
Reference-contexts: It is possible to construct programs specifically to cause Time Warp to thrash. We refer the reader to previous research in this area [2] [13] [4] [8] [11] <ref> [12] </ref> [16]. While it is impossible to make general assertions about how many rollbacks will occur in a Parallel Import program, it is possible to present case studies.
Reference: [15] <institution> Proceedings of the SCS Multiconference on Distributed Simulation, </institution> <address> pages 137-143, </address> <year> 1990. </year>
Reference: [13] <author> V. Madisetti, D. Hardaker, and R. Fujimoto. </author> <title> The MIMDIX Operating System for Parallel Simulation. </title> <booktitle> In [1] Proceedings of the 6th Workshop on Parallel and Distributed Simulation (PADS92), </booktitle> <pages> pages 65-74, </pages> <year> 1992. </year>
Reference-contexts: It is possible to construct programs specifically to cause Time Warp to thrash. We refer the reader to previous research in this area [2] <ref> [13] </ref> [4] [8] [11] [12] [16]. While it is impossible to make general assertions about how many rollbacks will occur in a Parallel Import program, it is possible to present case studies.
Reference: [14] <author> Vance P. Morrison. </author> <title> Import/dome language reference manual. </title> <type> Technical report, US. </type> <institution> Army Corps of Engineering Research Laboratory, ASSET group., </institution> <year> 1995. </year> <month> 20 </month>
Reference-contexts: 1 Introduction Import <ref> [14] </ref> is a programming language which was developed at the U.S. Army Corps of Engineering Construction Engineering Research Laboratory. It is a general purpose language with enhancements for discrete event simulation. Its syntax is based on Modsim [5] [3], which in turn was based loosely on Modula-2. <p> Collectively, these are clearly a significant part of the Import language (especially lists), but they will require significant effort. 7 Compatibility Between Parallel and Sequential Import The US Army Construction Engineering Research Laboratory created a sequential implementation of the Import Language <ref> [14] </ref>. The compiler for Sequential Import is currently at a reasonably functional level. One of our major objectives was to make Sequential and Parallel Import compatible with each other.
Reference: [15] <author> D. Nicol, </author> <title> editor. Distributed Simulation, </title> <booktitle> Proceedings of the SCS Multiconference on Dis--tributed Simulation, </booktitle> <month> 17-19 January, </month> <year> 1990, </year> <title> San Diego, </title> <booktitle> California., </booktitle> <volume> volume 22, no. </volume> <booktitle> 1 of Simulation Series. SCS, </booktitle> <year> 1990. </year>
Reference: [16] <author> S. Turner and M. XU. </author> <title> Performance Evaluation of the Bounded Time Warp Algorithm. </title> <booktitle> In </booktitle>
Reference-contexts: It is possible to construct programs specifically to cause Time Warp to thrash. We refer the reader to previous research in this area [2] [13] [4] [8] [11] [12] <ref> [16] </ref>. While it is impossible to make general assertions about how many rollbacks will occur in a Parallel Import program, it is possible to present case studies.
Reference: [1] <institution> Proceedings of the 6th Workshop on Parallel and Distributed Simulation (PADS92), </institution> <address> pages 117-126, </address> <year> 1992. </year>
References-found: 18

