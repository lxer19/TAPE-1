URL: http://www.cs.colorado.edu/users/serl/cm/Papers/Dock/CU-CS-871-98.ps.gz
Refering-URL: http://www.cs.colorado.edu/serl/cm/Papers.html
Root-URL: http://www.cs.colorado.edu
Title: A Cooperative Approach to Support Software Deployment Using the Software Dock  
Author: Richard S. Hall, Dennis Heimbigner, Alexander L. Wolf 
Keyword: Software deployment, Java, mobile agents, configuration management  
Address: Campus Box 430 Boulder, CO 80309 USA  
Affiliation: Department of Computer Science University of Colorado  
Pubnum: Technical Report CU-CS-871-98  
Email: [rickhall,dennis,alw]@cs.colorado.edu  
Phone: 303-492-8115  
Abstract: Software deployment is an evolving collection of interr elated processes such as release, install, adapt, reconfigure, update, activate, deactivate, remove, and retire. The co n-nectivity of large networks, such as the Internet, is affecting how software deployment is being performed. To take full advantage of this connectivity, new software deployment technologies must be introduced in order to support these processes. The Software Dock research project is creating a distributed, agent-based deployment framework to su p-port the ongoing cooperation and negotiation among sof t-ware producers themselves and among software producers and software consumers. This deployment framework is enabled by the use of a standardized semantic schema for describing software systems, called the Deployable Sof t-ware Description (DSD) format. The Software Dock e m-ploys agents to traverse between software producers and consumers and to perform software deployment activities by interpreting the semantic descriptions of the software systems. The Software Dock infrastructure enables sof t-ware producers to offer high-level deployment services that were previously not possible to their customers. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. C. Bailey. </author> <title> Maximum RPM, Red Hat Software, </title> <publisher> Inc., </publisher> <address> ISBN: 1-888172-78-9, </address> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: The Microsoft Registry [ 10], is a hierarchical registry of consumer site information for the Windows platform. The schema used in this registry is only partially standardized and even the standardized portions are not sufficient to s e-mantically describe software systems for deployment. The Redhat Package Manager (RPM) <ref> [ 1] </ref> is a tool for the Linux user community that provides many software d e-ployment features. RPM packages contain the software system to be deployed and a semantic description of the software system; this description includes constraints, d e pendencies, artifacts, and activities in the form of scripts.
Reference: 2. <author> A. Carzaniga, D. S. Rosenblum, and A. L. Wolf. </author> <title> D e-sign of a Scalable Event Notification Service: Interface and Architecture, </title> <type> Technical Report, </type> <institution> Dept. of Co m-puter Science, University of Colorado, </institution> <year> 1998. </year>
Reference-contexts: The Software Dock prototype has been implemented entirely in Java and uses Voyager [ 17] from ObjectSpace as an inter-process communication mech a-nism and a mobile agent enabling technology. A related research project at the University of Colorado, called SIENA <ref> [2] </ref>, provides a wide-area event service. An evolving definition of the DSD was created. The cu r-rent definition of the DSD contains most of the main el e-ments to support gross software deployment behavior.
Reference: 3. <author> A. Carzaniga, A. Fuggetta, </author> <title> R.S. </title> <publisher> Hall, </publisher> <editor> A. van der Hoek, D. Heimbigner, A.L. Wolf. </editor> <title> A Characterization Framework for Software Deployment Technologies, </title> <type> Technical Report CU-CS-857-98, </type> <institution> Dept. of Computer Science, University of Colorado, </institution> <month> April </month> <year> 1998. </year>
Reference-contexts: This section only co v-ers some of the most important related work. For some more detailed information on related technologies refer to <ref> [3] </ref> and [7]. The DSD schema created for the Software Dock project is not a unique attempt to create a standard schema for d e-scribing software systems. A handful of related technol o-gies are also trying to address the same issue with similar approaches.
Reference: 4. <institution> Desktop Management Task Force, </institution> <note> Software Standard Groups Definition, Version 2.0, Mar. 27, 1996. http://www.dmtf.org/tech/apps.html. </note>
Reference-contexts: The descriptive information includes some ide n-tification information and pointers to archives where the physical artifacts can be found. The resulting description is too simplistic to perform any significant software deplo y 8 ment automation. The Desktop Management Task Force (DMTF) has created the Management Information Format (MIF) <ref> [ 4] </ref> for d e-scribing software systems. DMTF formed working groups to create standard syntax elements in MIF for describing various computing resources, including software systems. An extension to MIF has been created by Tivoli and is called the Application Management Specification (AMS) [19].
Reference: 5. <author> J. Estublier and R. Casallas. </author> <title> The Adele Configuration Manager, Configuration Management, </title> <publisher> Wiley, </publisher> <year> 1994, </year> <pages> pp. 99-134. </pages>
Reference-contexts: A handful of related technol o-gies are also trying to address the same issue with similar approaches. Traditional configuration management mo d-eling approaches, such as Adele <ref> [ 5] </ref> and PCL [ 21], have influenced DSD, particularly in the area of configuration selection. These traditional approaches, though, are more general configuration modeling languages that do not a d-dress software deployment in any fashion.
Reference: 6. <author> R. S. Hall, D. Heimbigner, and A. L. Wolf. </author> <title> Requir e-ments for Software Deployment Languages and Schema, </title> <booktitle> Proceedings of the 1998 International Wor k-shop on Software Configuration Management, </booktitle> <month> July </month> <year> 1998. </year>
Reference-contexts: In such a language or schema approach it is common to model software systems as collections of properties, where semantic information is mapped into standardized properties and values. Minimally five classes of semantic information have been identified <ref> [6] </ref> that must be described by the software system model. These classes of semantic information are: Assertions describe constraints on consumerside properties that must be true otherwise the specific d e-ployment process fails, such as supported hardware pla t forms or operating systems.
Reference: 7. <author> R. S. Hall, D. Heimbigner, and A. L. Wolf. </author> <title> Evalua t-ing Software Deployment Languages and Schema, </title> <booktitle> Proceedings of the 1998 International Conference on Software Maintenance, IEEE Computing Society, </booktitle> <month> Nov. </month> <year> 1998. </year>
Reference-contexts: This section only co v-ers some of the most important related work. For some more detailed information on related technologies refer to [3] and <ref> [7] </ref>. The DSD schema created for the Software Dock project is not a unique attempt to create a standard schema for d e-scribing software systems. A handful of related technol o-gies are also trying to address the same issue with similar approaches.
Reference: 8. <author> R. S. Hall, D. Heimbigner, A. van der Hoek, A. L. Wolf. </author> <title> An architecture for Post-Development Co n-figuration Management in a Wide-Area Network, </title> <booktitle> Proceedings of the 1997 International Conference on Distributed Configurable Systems, IEEE Computing Society, </booktitle> <month> May </month> <year> 1997, </year> <pages> pp. 269-278. </pages>
Reference-contexts: As a result, the remove process must examine the current state of the consumer site, its dependencies, and constraints, and then remove the software package in such a way as to not violate these dependencies and constraints. 3 SOFTWARE DOCK ARCHITECTURE The Software Dock research project, originally described in <ref> [8] </ref>, addresses support for software deployment processes by creating a framework that enables cooperation among software producers themselves and between software pr o-ducers and software consumers.
Reference: 9. <author> A. van Hoff, H. Partovi, T. </author> <title> Thai. The Open Software Description Format (OSD), </title> <institution> Microsoft Corp. and M a-rimba, Inc., </institution> <year> 1997. </year> <note> http://www.w3.org/TR/NOTE-OSD.html. </note>
Reference-contexts: In general, these approaches did not attempt to create a standard schema for any specific task , rather the modeling language was the primary contribution. A more recent, high-profile effort to create a standard sof t-ware deployment schema is called the Open Software D e-scription (OSD) <ref> [9] </ref> format. This effort is an initial collaboration between Microsoft and Marimba to create a schema for describing software systems for push technologies.
Reference: 10. <author> Jerry Honeycutt. </author> <title> Using the Windows 95 Registry, </title> <publisher> Que Publishing, </publisher> <address> Indianapolis, IN, </address> <year> 1996. </year>
Reference-contexts: Other approaches, such as GNU Autoconf [ 15], try to r e-solve consumer site description by using scripts and he u-ristics to directly examine the state of a site, but these methods are not always accurate and they do not scale well. The Microsoft Registry <ref> [ 10] </ref>, is a hierarchical registry of consumer site information for the Windows platform. The schema used in this registry is only partially standardized and even the standardized portions are not sufficient to s e-mantically describe software systems for deployment.
Reference: 11. <institution> InstallShield Corp. InstallShield, </institution> <year> 1998. </year> <note> http://www.installshield.com. </note>
Reference-contexts: Also, RPM is intended more for singlesite deployment and provides no support for multi-site deployment or management. A host of install utilities exist in the commercial world, such as InstallShield <ref> [ 11] </ref>. These systems typically work real well for installation, but only address a handful of d e-ployment processes, such as reconfigure and remove, in a limited form.
Reference: 12. <institution> Joint Interoperability and Engineering Organization. Defense Information Infrastructure Common Opera t-ing Environment Baseline Specificiations, </institution> <note> Version 3.0, </note> <institution> Defense Information Systems Agency, CM-400-25-05, </institution> <month> Oct. 31 </month> <year> 1996. </year> <note> http://spider.osfl.disa.mil/cm/baseline/base_line3/basel in3.pdf </note>
Reference-contexts: It is also assumed that there is no cooperation between software producers and software consumers, rather there is a more centralized administr a-tion authority that is responsible for maintaining the state of deployed software systems. The Defense Information Infrastructure Common Opera t-ing Environment (DII COE) <ref> [ 12] </ref> is a Department of D e-fense effort to restrict the set of components used to build their software systems. The COE supports, among other things, a standard means for packaging components for delivery and installation.
Reference: 13. <institution> Joint Interoperability and Engineering Organization. </institution> <note> How to Segment Guide, Version 4.0, Defense I n-formation Systems Agency, Dec. 30 1996. http://spider.osfl.disa.mil/cm/how_to/howtoseg.pdf. </note>
Reference-contexts: The COE supports, among other things, a standard means for packaging components for delivery and installation. These packages are called segments <ref> [13] </ref>, where each segment is a separate, installable entity. The DII COE segment describes the constraints, dependencies, and artifacts of a software system. High-level software deployment process support is provided in the form of scripts, though all deployment activities are not directly supported.
Reference: 14. <author> Lucent Technologies. </author> <title> Not So Bad Distribution (NSBD), </title> <note> 1998. http://www.bell-labs.com/project/nsbd/. </note>
Reference-contexts: The level of s e-mantic information is less declarative than necessary for generic software deployment automation. Another class of commercial and research utilities exist to support artifact update; some of these systems include Castanet [16], NSBD <ref> [14] </ref>, and rsync [20]. In most of these systems, there is little if any support for other software d e-ployment processes.
Reference: 15. <author> D. Mackenzie, R. McGrath, and N. Friedman. Auto-conf: </author> <title> Generating Automatic Configuration Scripts, Free Software Foundation, </title> <publisher> Inc, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Like other approaches, the deployed software system configurations are largely considered static entities that do not change or cannot be manipulated. The support provided is intended more for a centralized admin i-stration authority and there is no releaseside support. Other approaches, such as GNU Autoconf <ref> [ 15] </ref>, try to r e-solve consumer site description by using scripts and he u-ristics to directly examine the state of a site, but these methods are not always accurate and they do not scale well.
Reference: 16. <author> Marimba, Inc. </author> <title> Castanet Product Family, </title> <note> 1998. http://www.marimba.com/datasheets/castanet-3_0-ds.html. </note>
Reference-contexts: In ge n-eral, most of these solutions do not provide reasonable software system description capabilities. The level of s e-mantic information is less declarative than necessary for generic software deployment automation. Another class of commercial and research utilities exist to support artifact update; some of these systems include Castanet <ref> [16] </ref>, NSBD [14], and rsync [20]. In most of these systems, there is little if any support for other software d e-ployment processes.
Reference: 17. <institution> ObjectSpace, Inc. Voyager, </institution> <year> 1998. </year> <note> http://www.objectspace.com. </note>
Reference-contexts: The Software Dock prototype has been implemented entirely in Java and uses Voyager <ref> [ 17] </ref> from ObjectSpace as an inter-process communication mech a-nism and a mobile agent enabling technology. A related research project at the University of Colorado, called SIENA [2], provides a wide-area event service. An evolving definition of the DSD was created.
Reference: 18. <author> Open Software Associates. OpenWEB netDeploy, </author> <year> 1998. </year> <note> http://www.osa.com. </note>
Reference-contexts: These systems typically work real well for installation, but only address a handful of d e-ployment processes, such as reconfigure and remove, in a limited form. Recent install utilities are starting to address the connectivity of the Internet, such as netDeploy <ref> [18] </ref> and PC-Install with Internet Extensions [ 22]. Some of these utilities are addressing the update process as well. In ge n-eral, most of these solutions do not provide reasonable software system description capabilities. The level of s e-mantic information is less declarative than necessary for generic software deployment automation.
Reference: 19. <institution> Tivoli Systems. Applications Management Specif i-cation, </institution> <note> Version 2.0, Nov. 5 1997. http://www.tivoli.com/o_products/html/body_ams_spe c.html. </note>
Reference-contexts: DMTF formed working groups to create standard syntax elements in MIF for describing various computing resources, including software systems. An extension to MIF has been created by Tivoli and is called the Application Management Specification (AMS) <ref> [19] </ref>. Since AMS is a superset of MIF, only AMS is di s-cussed here. AMS is much more mature than OSD. AMS describes a single revision of a single variant of a software system in great detail.
Reference: 20. <author> Andrew Tridgell and Paul Mackerras. </author> <title> The rsync a l-gorithm, </title> <type> Technical Report TR-CS-96-05, </type> <month> June </month> <year> 1996. </year> <note> http://cs.anu.edu.au/techreports/1996/index.html. </note>
Reference-contexts: The level of s e-mantic information is less declarative than necessary for generic software deployment automation. Another class of commercial and research utilities exist to support artifact update; some of these systems include Castanet [16], NSBD [14], and rsync <ref> [20] </ref>. In most of these systems, there is little if any support for other software d e-ployment processes.
Reference: 21. <author> E. Tryggeseth, B. Gulla, R. Conradi. </author> <title> Modeling Sy stems with Variability using the PROTEUS Configur a-tion Language, </title> <booktitle> Proceedings of the 1995 International Symposium on System Configuration Management, </booktitle> <publisher> Springer, </publisher> <year> 1995, </year> <pages> pp. 216-240. </pages>
Reference-contexts: A handful of related technol o-gies are also trying to address the same issue with similar approaches. Traditional configuration management mo d-eling approaches, such as Adele [ 5] and PCL <ref> [ 21] </ref>, have influenced DSD, particularly in the area of configuration selection. These traditional approaches, though, are more general configuration modeling languages that do not a d-dress software deployment in any fashion.
Reference: 22. <institution> Twenty Twenty Software. PC-Install with Internet Extensions, </institution> <year> 1998. </year> <note> http://www.twenty.com. </note>
Reference-contexts: These systems typically work real well for installation, but only address a handful of d e-ployment processes, such as reconfigure and remove, in a limited form. Recent install utilities are starting to address the connectivity of the Internet, such as netDeploy [18] and PC-Install with Internet Extensions <ref> [ 22] </ref>. Some of these utilities are addressing the update process as well. In ge n-eral, most of these solutions do not provide reasonable software system description capabilities. The level of s e-mantic information is less declarative than necessary for generic software deployment automation.
References-found: 22

