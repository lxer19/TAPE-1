URL: ftp://ftp.cs.arizona.edu/xkernel/Papers/psync.ps
Refering-URL: http://www.cs.arizona.edu/xkernel/bibliography.html
Root-URL: http://www.cs.arizona.edu
Title: Preserving and Using Context Information in Interprocess Communication  
Author: Larry L. Peterson, Nick C. Buchholz, and Richard D. Schlichting 
Affiliation: University of Arizona  
Abstract: When processes in a network communicate, the messages they exchange define a partial ordering of externally visible events. While the significance of this partial order in distributed computing is well understood, it has not been made an explicit part of the communication substrate upon which distributed programs are implemented. This paper describes a new interprocess communication mechanism, called Psync, that explicitly encodes this partial ordering with each message. The paper shows how Psync can be efficiently implemented on an unreliable communications network, and it demonstrates how conversations serve as an elegant foundation for ordering messages exchanged in a distributed computation and for recovering from processor failures. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Abbott, N. Hutchinson, S. O'Malley, and L. Peterson. </author> <title> RPC in the x-kernel: evaluating design alternatives. </title> <type> University of Arizona Technical Report TR 89-4 (Mar. </type> <year> 1989). </year>
Reference-contexts: This section reports on the performance of Psync and comments on several implementation details that affect its performance. 6.1 Experiments The first set of experiments involve measuring the round trip delay for Psync, as well as three other IPC protocols: an unreliable datagram protocol (UDP), a remote procedure call protocol <ref> [1] </ref>, and a virtual circuit protocol (TCP). Note that although Psync supports communication among more than two processes, experimenting with Psync in the one-to-one case is a good measure of the overhead it imposes on sending and receiving messages. <p> The interesting aspect of this blast mechanism is that it is encapsulated as a distinct protocol rather than embedded in Psync <ref> [1] </ref>. 7 Related Work Recent work on interprocess communication has explored several dimensions of the problem space, including support for group communication [8], the exchange of very large messages [9,29], alternative send/receive semantics [6], guaranteeing a consistent order on message delivery in a many-to-many communication [3,4], and techniques for logging messages
Reference: 2. <author> A. Aho, M. Garey, and J. Ullman. </author> <title> The transitive reduction of a directed graph. </title> <journal> SIAM J. Computing (1972), </journal> <pages> 131-137. </pages>
Reference-contexts: Let G denote the directed acyclic graph representation of . A context graph, denoted G = (M; E), is taken to be the transitive reduction of G <ref> [2] </ref>.
Reference: 3. <author> K. Birman and T. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Trans. on Computer Systems 5, </journal> <month> 1 (Feb. </month> <year> 1987), </year> <pages> 47-76. </pages>
Reference: 4. <author> K. Birman and T. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Proceedings of the 11th Symposium on Operating System Principles (Nov. </booktitle> <year> 1987), </year> <pages> 123-138. </pages>
Reference: 5. <author> A. Birrell and B. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. on Computer Systems 2, </journal> <month> 1 (Feb. </month> <year> 1984), </year> <pages> 39-59. </pages>
Reference-contexts: 1 Introduction An interprocess communication (IPC) mechanism provides an abstraction through which processes that do not necessarily share an address space can exchange messages. While there exists considerable experience with IPC mechanisms for one-to-one communication|examples of such mechanisms include datagrams, virtual circuits, remote procedure calls <ref> [5] </ref>, and channels [11]|much less is understood about IPC mechanisms for many-to-many communication. Work in this area includes low-level broadcast protocols [7] and high-level programming toolkits [3,4]. This paper introduces a new IPC protocol, called Psync (for "pseudosynchronous"), that supports the exchange of messages among a well-defined set of processes.
Reference: 6. <author> N. Carriero and D. Gelernter. </author> <title> The S/Net's Linda kernel. </title> <journal> ACM Trans. on Computer Systems 4, </journal> <month> 2 (May </month> <year> 1986), </year> <pages> 110-129. </pages>
Reference-contexts: this blast mechanism is that it is encapsulated as a distinct protocol rather than embedded in Psync [1]. 7 Related Work Recent work on interprocess communication has explored several dimensions of the problem space, including support for group communication [8], the exchange of very large messages [9,29], alternative send/receive semantics <ref> [6] </ref>, guaranteeing a consistent order on message delivery in a many-to-many communication [3,4], and techniques for logging messages so as to facilitate recovery from processor failure [15,16,22,24,25]. The work presented in this paper addresses the latter two issues.
Reference: 7. <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Trans. on Computer Systems 2, </journal> <month> 3 (Aug </month> <year> 1984), </year> <pages> 251-273. </pages>
Reference-contexts: While there exists considerable experience with IPC mechanisms for one-to-one communication|examples of such mechanisms include datagrams, virtual circuits, remote procedure calls [5], and channels [11]|much less is understood about IPC mechanisms for many-to-many communication. Work in this area includes low-level broadcast protocols <ref> [7] </ref> and high-level programming toolkits [3,4]. This paper introduces a new IPC protocol, called Psync (for "pseudosynchronous"), that supports the exchange of messages among a well-defined set of processes.
Reference: 8. <author> D. Cheriton and W. Zwaenepoel. </author> <title> Distributed process groups in the V kernel. </title> <journal> ACM Trans. on Computer Systems 3, </journal> <month> 2 (May </month> <year> 1985), </year> <pages> 77-107. </pages>
Reference-contexts: Consider, for example, a simple message transaction in which a client sends a request message to a collection of servers, and one or more of the servers receive the request and sends a reply message <ref> [8] </ref>. Because Psync distributes all messages to all participants, the servers will receive each others reply messages. In contrast, only the client receives the reply messages in the case of a multicast. <p> The interesting aspect of this blast mechanism is that it is encapsulated as a distinct protocol rather than embedded in Psync [1]. 7 Related Work Recent work on interprocess communication has explored several dimensions of the problem space, including support for group communication <ref> [8] </ref>, the exchange of very large messages [9,29], alternative send/receive semantics [6], guaranteeing a consistent order on message delivery in a many-to-many communication [3,4], and techniques for logging messages so as to facilitate recovery from processor failure [15,16,22,24,25]. The work presented in this paper addresses the latter two issues.
Reference: 9. <author> D. Cheriton. VMTP: </author> <title> A transport protocol for the next generation of communications systems. </title> <booktitle> In Proceedings of SIGCOMM '86 (Aug. </booktitle> <year> 1987), </year> <pages> 406-415. </pages>
Reference: 10. <author> F. Cristian. </author> <title> Agreeing on who is present and who is absent in synchronous distributed systems. Digest of Papers, Fault Tolerant Computing Systems, 18, </title> <publisher> IEEE Computer Society Press (June 1988), </publisher> <pages> 206-211. </pages>
Reference-contexts: As a consequence, it is necessary for the running processes to be able to agree as to when a particular process has failed. While Psync does not provide a direct mechanism for doing this, algorithms for agreement about failure have been developed <ref> [10] </ref> and they can be implemented on top of Psync, analogous to the send stable routine.
Reference: 11. <author> D. Gifford and N. Glasser. </author> <title> Remote pipes and procedures for efficient distributed communi-cation. </title> <journal> ACM Trans. on Computer Systems 6, </journal> <month> 3 (Aug. </month> <year> 1988), </year> <pages> 258-283. </pages>
Reference: 12. <author> J. Gray. </author> <booktitle> Notes on database operating systems. In Lecture Notes in Computer Science 60, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin (1987), </address> <pages> 393-481. </pages>
Reference-contexts: For example, the two-phase commit protocol used to maintain consistency between copies of a replicated database despite failures requires that the processes implementing the protocol recover to guarantee that changes to the database are applied to all copies <ref> [12] </ref>. Although the specifics of participant reintegration are highly application dependent, there are generally two tasks that must be accomplished before normal processing can continue. First, the functioning participants must be notified that the failed participant wants to be reintegrated into 23 the conversation.
Reference: 13. <author> M. Herlihy. </author> <title> Extending multiversion time-stamping protocols to exploit type information. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-36, No. </volume> <month> 4 (Apr. </month> <year> 1987), </year> <pages> 443-448. </pages>
Reference-contexts: sent only if a message is received but none are sent. 21 4.3 Replicated Objects Although the total ordering of messages guaranteed by an ordered broadcast mechanism provides a foundation for synchronizing distributed computations, there are certain cases in which the same total ordering is not necessary at each host <ref> [13] </ref>. Suppose, for example, that a data object is replicated at n hosts, where a process running at each host manages the local copy. Furthermore, suppose that some of the operations that may be applied to the object are commutative with respect to other invocations of the same operation.
Reference: 14. <author> N. Hutchinson and L. Peterson. </author> <booktitle> Design of the x-kernel. In Proceedings of SIGCOMM `88 (Aug. </booktitle> <year> 1988), </year> <pages> 65-75. </pages>
Reference-contexts: same identifiers to messages during reexecution that it did during the initial execution, then the messages can be sent because they are automatically discarded as duplicates at the receiving host. 6 Performance We have implemented Psync in the x-kernel: an operating system kernel designed to facilitate experimentation with network protocols <ref> [14] </ref>. The implementation corresponds to the protocol 28 described in Section 3; it does not currently support the reintegration of failed processes as described in Section 5.
Reference: 15. <author> D. Johnson and W. Zwaenopoel. </author> <title> Sender-based message logging. </title> <booktitle> In Proceedings of the Seventeenth International Symposium on Fault-Tolerant Computing, </booktitle> <month> (June </month> <year> 1987), </year> <pages> 14-19. </pages>
Reference: 16. <author> D. Johnson and W. Zwaenopoel. </author> <title> Recovery in distributed systems using optimistic message logging and checkpointing. </title> <booktitle> In Proceedings of the 7th PODC (Aug. </booktitle> <year> 1988), </year> <note> to appear. </note>
Reference: 17. <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Commun. ACM 21, </journal> <month> 7 (July </month> <year> 1978) </year> <month> 558-565. </month>
Reference-contexts: Finally, note that many of the ideas underlying Psync are founded in the space-time view of distributed computing. For example, the context relation can be viewed as a variation of the happened before relation <ref> [17] </ref>.
Reference: 18. <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Implementing fault-tolerant replicated objects using Psync. </title> <type> University of Arizona Technical Report TR 89-3 (Mar. </type> <year> 1989). </year>
Reference-contexts: A more thorough description of a delete protocol that specifies the actions to be taken by functioning participants when another participant fails is presented elsewhere <ref> [18] </ref>. 3.3 Memory Management The previous discussion implies that the entire history of a conversation is maintained throughout the lifetime of the conversation. <p> The processes only have to synchronize with each other on the non-commutative operations, which they do by waiting for the corresponding message to become stable in the context graph. A detailed description of an algorithm that employs this idea is presented elsewhere <ref> [18] </ref>. To see how an ordering policy might take advantage of commutative operations, consider an object that supports operations ff and and fi, where multiple invocations of ff can be executed in an arbitrary order with respect to each other. <p> The join protocol typically causes each functioning participant to return the recovering participant into its active participant set by invoking the mask in operation. One example of such a protocol can be found in <ref> [18] </ref>. Second, an appropriate internal state of the participant must be restored. This state includes the application's local variables, the local image of the context graph, and the participant's view of the conversation.
Reference: 19. <author> J. Postel. </author> <title> User datagram protocol. Request For Comments 768, </title> <institution> USC Information Sciences Institute, Marina del Rey, Calif. </institution> <month> (Aug </month> <year> 1980). </year>
Reference-contexts: Because of the fundamental nature of this partial order, Psync has several desirable characteristics: it can be implemented on an unreliable network with performance comparable to conventional one-to-one protocols like UDP <ref> [19] </ref> and TCP [28], it supports elegant implementations of a wide range of existing communication protocols, it allows applications to directly access information not made available by other IPC mechanisms, and it facilitates recovery from processor failure. 1 Authors' address: Department of Computer Science, University of Arizona, Tucson, AZ 85721.
Reference: 20. <author> J. Postel. </author> <title> Internet protocol. Request For Comments 791, </title> <institution> USC Information Sciences Institute, Marina del Rey, Calif. </institution> <month> (Sept. </month> <year> 1981). </year>
Reference-contexts: For the purpose of the experiments, the x-kernel was configured as follows: one-byte messages were exchanged between a pair of user processes, all four protocols were implemented on top of IP <ref> [20] </ref>, and the tests were run on a pair of Sun 3/75s connected by a lightly loaded 10Mbs ethernet. The results are presented in Table 1. The numbers were derived by running each experiment for 10,000 round trips (20,000 total messages) and reporting the elapsed time every 1,000 round trips.
Reference: 21. <author> J. Postel. </author> <title> Simple mail transfer protocol. Request for Comments 821, </title> <institution> USC Information Sciences Institute, Marina del Rey, Calif. </institution> <month> (Aug. </month> <year> 1982). </year>
Reference-contexts: Such a pattern is commonly called conversational continuity, and can be viewed as a generalization of the message transaction paradigm. The mail protocol SMTP is an example of an application that exhibits conversational continuity <ref> [21] </ref>. Psync is an ideal communication substrate for the conversational continuity paradigm because it maintains the desired connectivity from message to message without duplicating the efforts of the application.
Reference: 22. <author> M. Powell and D. Presotto. </author> <title> Publishing: a reliable broadcast communication mechanism. </title> <booktitle> In Proceedings of the 9th Symposium on Operating System Principles (Oct. </booktitle> <year> 1983), </year> <pages> 100-109. </pages>
Reference-contexts: We note in passing that similar functionality 27 has been implemented elsewhere by logging messages onto non-volatile storage as they are received [24], logging them at a monitor site <ref> [22] </ref>, or by retaining copies of messages in the volatile storage of sending processes [15,16,25]. There are two conditions that must be satisfied to guarantee recreation of the appropriate state and view. One is that each participant in a conversation must be deterministic.
Reference: 23. <author> J. Saltzer, D. Reed, and D. Clark. </author> <title> End-to-end arguments in system design. </title> <journal> ACM Trans. on Computer Systems 2, </journal> <volume> 4 (Nov. </volume> <year> 1984), </year> <pages> 277-288. 36 </pages>
Reference-contexts: This work supported in part by National Science Foundation Grants DCR-8402090 and CCR-8701516, and Air Force Office of Scientific Research Grant AFOSR-84-0072. 1 Psync is a low-level protocol designed to support a variety of high-level protocols and distributed applications. This design has two implications <ref> [23] </ref>. First, Psync makes very few assumptions about the underlying network. For example, it does not assume expensive mechanisms such as reliable broadcast are available. Second, Psync defers to higher-levels any functionality that not all applications need. <p> Dotted lines denote a path between two message nodes. Subgraph V c p corresponds to those messages that have been totally ordered and committed to the application. (Messages in V c p would also satisfy the definition of queue stability <ref> [23] </ref>.) Subgraph V u p corresponds to the set of messages yet to be considered.
Reference: 24. <author> R. Strom and S.Yemini. </author> <title> Optimistic recovery in distributed systems. </title> <journal> ACM Trans. on Com--puter Systems 3, </journal> <month> 3 (Aug. </month> <year> 1985), </year> <pages> 204-226. </pages>
Reference-contexts: We note in passing that similar functionality 27 has been implemented elsewhere by logging messages onto non-volatile storage as they are received <ref> [24] </ref>, logging them at a monitor site [22], or by retaining copies of messages in the volatile storage of sending processes [15,16,25]. There are two conditions that must be satisfied to guarantee recreation of the appropriate state and view. One is that each participant in a conversation must be deterministic.
Reference: 25. <author> R. Strom, D. Bacon, and S.Yemini. </author> <note> Volatile logging in n-fault-tolerant distributed systems. In Proceedings of the Eighteenth International Symposium on Fault-Tolerant Computing (June 1988), to appear. </note>
Reference: 26. <author> F. Schneider. </author> <title> Synchronization in distributed programs. </title> <journal> ACM Trans. on Programming Languages and Systems 4, </journal> <month> 2 (April </month> <year> 1982), </year> <pages> 125-148. </pages>
Reference-contexts: For example, the context relation can be viewed as a variation of the happened before relation [17]. As another example, when a message is stable, it is as if it has been fully acknowledged <ref> [26] </ref>, that is, an acknowledgement message from all other participants has been received. 8 Conclusions One of the most difficult issues facing designers of distributed systems is the level at which the timing and message ordering problem should be addressed: within the communication system or by the application.
Reference: 27. <author> A. Tanenbaum. </author> <title> Computer networks, second edition. </title> <publisher> Prentice Hall, </publisher> <address> Englewook Cliffs, New Jersey (1988). </address>
Reference-contexts: A process stops sending data when the number of unstable messages it has sent exceeds the size of the circuit's sliding window. Thus, a linear context graph would result if a stop-and-wait protocol is employed <ref> [27] </ref>. Moreover, as long as a both sides have data to send, the act of sending a message in the context of received messages effectively acknowledges those messages, thereby providing a natural implementation of the piggyback optimization.
Reference: 28. <institution> USC Information Sciences Institute. Transmission control protocol. Request For Comments 793, Marina del Rey, Calif. </institution> <month> (Sept. </month> <year> 1981). </year>
Reference-contexts: Because of the fundamental nature of this partial order, Psync has several desirable characteristics: it can be implemented on an unreliable network with performance comparable to conventional one-to-one protocols like UDP [19] and TCP <ref> [28] </ref>, it supports elegant implementations of a wide range of existing communication protocols, it allows applications to directly access information not made available by other IPC mechanisms, and it facilitates recovery from processor failure. 1 Authors' address: Department of Computer Science, University of Arizona, Tucson, AZ 85721.
Reference: 29. <author> W. Zwaenepoel. </author> <title> Protocols for large data transfers over local networks. </title> <booktitle> In Proceedings of the Ninth Data Communications Symposium (Aug. </booktitle> <year> 1985) </year> <month> 22-32. 37 </month>
References-found: 29

