URL: http://www.demo.cs.brandeis.edu/papers/gp2.ps.Z
Refering-URL: http://www.demo.cs.brandeis.edu/papers/long.html
Root-URL: http://www.cs.brandeis.edu
Title: 17 Massively Parallel Genetic Programming  
Author: Hugues Juille and Jordan B. Pollack 
Note: 17.1 Introduction  
Abstract: As the field of Genetic Programming (GP) matures and its breadth of application increases, the need for parallel implementations becomes absolutely necessary. The transputer-based system presented in the chapter by Koza and Andre ([11]) is one of the rare such parallel implementations. Until today, no implementation has been proposed for parallel GP using a SIMD architecture, except for a data-parallel approach ([20]), although others have exploited workstation farms and pipelined supercomputers. One reason is certainly the apparent difficulty of dealing with the parallel evaluation of different S-expressions when only a single instruction can be executed at the same time on every processor. The aim of this chapter is to present such an implementation of parallel GP on a SIMD system, where each processor can efficiently evaluate a different S-expression. We have implemented this approach on a MasPar MP-2 computer, and will present some timing results. To the extent that SIMD machines, like the MasPar are available to offer cost-effective cycles for scientific experimentation, this is a useful approach. The idea of simulating a MIMD machine using a SIMD architecture is not new ([8, 15]). One of the original ideas for the Connection Machine ([8]) was that it could simulate other parallel architectures. Indeed, in the extreme, each processor on a SIMD architecture can simulate a universal Turing machine (TM). With different turing machine specifications stored in each local memory, each processor would simply have its own tape, tape head, state table and state pointer, and the simulation would be performed by repeating the basic TM operations simultaneously. Of course, such a simulation would be very inefficient, and difficult to program, but would have the advantage of being really MIMD, where no SIMD processor would be in idle state, until its simulated machine halts. Now let us consider an alternative idea, that each SIMD processor would simulate an individual stored program computer using a simple instruction set. For each step of the simulation, the SIMD system would sequentially execute each possible instruction on the subset of processors whose next instruction match it. For a typical assembly language, even with a reduced instruction set, most processors would be idle most of the time. However, if the set of instructions implemented on the virtual processor is very small, this approach can be fruitful. In the case of Genetic Programming, the "instruction set" is composed of the specified set of functions designed for the task. We will show below that with a precompilation step, simply adding a push, a conditional, and unconditional branching and a stop instruction, we can get a very effective MIMD simulation running. This chapter reports such an implementation of GP on a MasPar MP-2 parallel computer. The configuration of our system is composed of 4K processor elements 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> David H. Ackley and Michael L. Littman. </author> <title> A Case for Lamarckian Evolution. </title> <booktitle> In Artificial Life III, </booktitle> <editor> Ed. Christopher G. Langton, </editor> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: end of the tournament, it is straightforward to collect total score (or fitness) for each individual. 17.3.3 Sub Populations with Migration The idea of this implementation is to study a model of sub-populations that interact locally one with each other, similar to the model presented by Ackley and Littman in <ref> [1] </ref> and [2]. In our experiments, each processor manages a sub-population of 16 individuals. A table in which is stored the result of the competition between all possible pairs of individuals in the sub-population is maintained by each processor.
Reference: [2] <author> David H. Ackley and Michael L. Littman. </author> <title> Altruism in the Evolution of Communication. </title> <booktitle> In Artificial Life IV, </booktitle> <editor> Brooks and Maes, Eds. </editor> <publisher> MIT Press, </publisher> <year> 1994, </year> <pages> pp. 40-48. </pages>
Reference-contexts: the tournament, it is straightforward to collect total score (or fitness) for each individual. 17.3.3 Sub Populations with Migration The idea of this implementation is to study a model of sub-populations that interact locally one with each other, similar to the model presented by Ackley and Littman in [1] and <ref> [2] </ref>. In our experiments, each processor manages a sub-population of 16 individuals. A table in which is stored the result of the competition between all possible pairs of individuals in the sub-population is maintained by each processor.
Reference: [3] <author> Peter J. Angeline and Jordan B. Pollack. </author> <title> The Evolutionary Induction of Sub--routines. </title> <booktitle> In The Fourteenth Annual Conference of the Cognitive Science Society, </booktitle> <address> Bloomington Indiana, </address> <year> 1992. </year>
Reference: [4] <author> Peter J. Angeline and Jordan B. Pollack. </author> <title> Competitive Environments Evolve Better Solutions for Complex Tasks. </title> <booktitle> In The Fifth International Conference on Genetic Algorithms, </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993, </year> <pages> pp. 264-270. </pages>
Reference: [5] <author> Peter J. Angeline. </author> <title> Two Self-Adaptive Crossover Operations for Genetic Programming. </title> <note> In this book. </note>
Reference: [6] <author> Gail Carpenter, Stephen Grossberg, Natalya Markuzon, John Reynolds, and David Rosen. </author> <title> Fuzzy ARTMAP: A Neural Network Architecture for Incremental Supervised Learning of Analog Multidimensional Maps. </title> <journal> In IEEE Transactions on Neural Networks, </journal> <volume> Vol. 3, No. 5, </volume> <year> 1992, </year> <pages> pp. 698-713. </pages>
Reference-contexts: sec. 18 sec. (on average) Total number of games per second 8192 4915 2730 (on average) problem, originated by Alexis Wieland, perhaps based on the cover of Perceptrons, has been a challenge for pattern classification algorithms, and has been the subject of much work in the Neural Network field (e.g. <ref> [14, 7, 6] </ref>). It consists of classifying points into two classes according to two intertwined spirals. The data set is composed of two sets of of 97 points, on the plane between -7 and +7. Koza ([11]) and Angeline's chapter ([5]) also investigate this problem using the Genetic Programming paradigm.
Reference: [7] <author> Scott E. Fahlman and Christian Lebiere. </author> <booktitle> The Cascade-Correlation Learning Architecture. In Advances in Neural Information Processing Systems 2, </booktitle> <editor> Touretzky, Ed. </editor> <publisher> Morgan Kauffman, </publisher> <year> 1990. </year>
Reference-contexts: sec. 18 sec. (on average) Total number of games per second 8192 4915 2730 (on average) problem, originated by Alexis Wieland, perhaps based on the cover of Perceptrons, has been a challenge for pattern classification algorithms, and has been the subject of much work in the Neural Network field (e.g. <ref> [14, 7, 6] </ref>). It consists of classifying points into two classes according to two intertwined spirals. The data set is composed of two sets of of 97 points, on the plane between -7 and +7. Koza ([11]) and Angeline's chapter ([5]) also investigate this problem using the Genetic Programming paradigm.
Reference: [8] <author> W. Daniel Hillis and Guy L. Steele Jr. </author> <title> Data Parallel Algorithms. </title> <journal> In IEEE Computers, </journal> <volume> 29, </volume> <year> 1986, </year> <month> pp.1170-1183. </month>
Reference: [9] <author> W. Daniel Hillis. </author> <title> Co-Evolving Parasites Improve Simulated Evolution as an Optimization Procedure. </title> <booktitle> In Artificial Life II, </booktitle> <editor> Langton, et al, Eds. </editor> <publisher> Addison Wesley, </publisher> <year> 1992, </year> <pages> pp. 313-324. </pages>
Reference: [10] <author> David Jefferson, Robert Collins, Claus Cooper, Michael Dyer, Margot Flowers, Richard Korf, Charles Taylor, and Alan Wang. </author> <title> Evolution as a Theme in Artificial Life: </title> <booktitle> The Genesys/Tracker System. In Artificial Life II, </booktitle> <editor> Langton, et al, Eds. </editor> <publisher> Addison Wesley, </publisher> <year> 1992, </year> <pages> pp. 549-578. </pages>
Reference: [11] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: In our implementation, since the postfix program is the precompilation of a S-expression, it is always correct and one doesn't have to deal with stack under-flow. Moreover, the stack is protected from overflow by restricting the depth of S-expressions resulting from recombination, as described in <ref> [11] </ref>. 17.2.2 Parallel Precompiler and Interpreter For many GP problems the fitness of an expression is computed by evaluating it across a variety of inputs. <p> We have used 3 different approaches. First, we discuss an approximation of the canonical GP, then a tournament style of co-evolution, and finally, a model of sub-population evolution and migration. 17.3.1 Implementation of Canonical GP Taking fitness definition from <ref> [11] </ref>, the raw fitness, the standardized fitness and the adjusted fitness can be computed independently by each processor. <p> The sexual reproduction, or crossover operation for GP, described in detail in <ref> [11] </ref>, which involves cutting and splicing between two S-expressions, is performed in the following way in our implementation: * the 80% of individuals which have not been asexually replaced select two individuals in their local neighborhood (including self), according to fitness-proportionate probability (the same rule as for asexual reproduction). * Crossover <p> The resulting offspring replaces one of the less fit individuals (using an inverse fitness proportionate probability rule). 11 Table 1: Results and time performance. Problems: Discovery of Trigonometric Symbolic Integration Identities (section 10.5 from <ref> [11] </ref>) (section 10.1 from [11]) Objective function cos (2x) cosx + 2x + 1 Number of runs 10 10 Number of 5 to 29 gen. 4 to 7 gen. <p> The resulting offspring replaces one of the less fit individuals (using an inverse fitness proportionate probability rule). 11 Table 1: Results and time performance. Problems: Discovery of Trigonometric Symbolic Integration Identities (section 10.5 from <ref> [11] </ref>) (section 10.1 from [11]) Objective function cos (2x) cosx + 2x + 1 Number of runs 10 10 Number of 5 to 29 gen. 4 to 7 gen. <p> The two problems are from Chapter 10 of <ref> [11] </ref>, and involve repetitive testing of expression against a range of data. Table 1 presents results and performance, using the same primitives and parameter specifications (except for the population size) as Koza.
Reference: [12] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [13] <author> John R. Koza and David Andre. </author> <title> Parallel Genetic Programming on a Network of Transputers. This Volume. </title>
Reference: [14] <author> Kevin J. Lang and Michael J. Witbrock. </author> <title> Learning to tell two spirals apart. </title> <booktitle> In Proceedings of the 1988 Connectionist Summer Schools, </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: sec. 18 sec. (on average) Total number of games per second 8192 4915 2730 (on average) problem, originated by Alexis Wieland, perhaps based on the cover of Perceptrons, has been a challenge for pattern classification algorithms, and has been the subject of much work in the Neural Network field (e.g. <ref> [14, 7, 6] </ref>). It consists of classifying points into two classes according to two intertwined spirals. The data set is composed of two sets of of 97 points, on the plane between -7 and +7. Koza ([11]) and Angeline's chapter ([5]) also investigate this problem using the Genetic Programming paradigm.
Reference: [15] <author> Michael S. Littman and Christopher D. Metcalf. </author> <title> An Exploration of Asynchronous Data-Parallelism. </title> <type> Personal communication. </type> <year> 1990. </year> <month> 20 </month>
Reference: [16] <author> Timothy Perkis. </author> <title> Stack-Based Genetic Programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence. </booktitle> <publisher> IEEE Press. </publisher>
Reference: [17] <author> Christopher D. Rosin and Richard K. Belew. </author> <title> Methods for Competitive Coevolution: Finding Opponents Worth Beating. </title> <booktitle> In Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 373-380. </pages>
Reference: [18] <author> Karl Sims. </author> <title> Evolving 3D Morphology and Behavior by Competition. </title> <booktitle> In Artificial Life IV, </booktitle> <editor> Brooks and Maes, Eds. </editor> <publisher> MIT Press, </publisher> <year> 1994, </year> <pages> pp. 28-39. </pages>
Reference: [19] <author> Reiko Tanese. </author> <title> Distributed Genetic Algorithms. </title> <booktitle> In Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <year> 1989, </year> <pages> pp. 434-439. </pages>
Reference: [20] <author> Patrick Tufts. </author> <title> Parallel Case Evaluation for Genetic Programming. In 1993 Lectures in Complex Systems, </title> <editor> Eds. L. Nadel and D. Stein, </editor> <booktitle> SFI Studies in the Sciences of Complexity, Lec. Vol. VI, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1995, </year> <note> pp.591-596. 21 </note>
References-found: 20

