URL: http://theory.lcs.mit.edu/~andrews/related.ps
Refering-URL: http://theory.lcs.mit.edu/~andrews/
Root-URL: 
Title: Constant Factor Bounds for On-line Load Balancing on Related Machines  
Author: Matthew Andrews 
Abstract: We present the first algorithm for on-line load balancing on related machines which has a constant competitive ratio against current load and a constant reassignment factor. Jobs arrive in and depart from a system of machines on-line. Each job must be assigned to one of the machines. The load on a machine is defined to be the sum of the weights of the jobs on that machine divided by its capacity. A job may be reassigned but a reassignment cost which depends on the job is incurred. Our algorithm has a competitive ratio of 32 and a reassignment factor of 79.5, i.e. at any time the maximum load is at most 32 times the lowest achievable load at that time and the total reassignment cost incurred is at most 79.5 times the cost of assigning all the jobs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Andrews, M. X. Goemans, and L. Zhang. </author> <title> Improved bounds for on-line load balancing. </title> <booktitle> In Proceedings of the 2nd Annual International Computing and Combinatorics Conference (to appear), </booktitle> <year> 1996. </year> <month> 10 </month>
Reference-contexts: We encounter load balancing problems in many situations where jobs have to be carried out using limited resources. For instance the machines may be a set of communication channels which have to accommodate requests for bandwidth <ref> [1, 2, 3, 4, 5, 6, 9] </ref>. In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access [9]. <p> Supported by NSF contract 9302476-CCR, ARMY grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. Email: andrews@math.mit.edu. 1 If the model does not consider job departures [2, 6], then current load is the same as peak load. Competitive analyses against current load are presented in <ref> [1, 7, 9] </ref>. Westbrook [9] was the first to emphasize the difference between peak and current load. If we did not allow job reassignments then we would be unable to obtain an algorithm with a reasonable competitive ratio against current load. <p> Andrews et al. <ref> [1] </ref> gave a greedy algorithm which had a constant reassignment factor but whose competitive ratio depended on cap max =cap min where cap max and cap min are the maximum and minimum capacities respectively. For the special case in which all machines have cap = 1, [1] contains an algorithm which <p> Andrews et al. <ref> [1] </ref> gave a greedy algorithm which had a constant reassignment factor but whose competitive ratio depended on cap max =cap min where cap max and cap min are the maximum and minimum capacities respectively. For the special case in which all machines have cap = 1, [1] contains an algorithm which is 3.5981 competitive against current load and has a reassignment factor of 6.8285. In section 2 we describe the algorithm and bound the competitive ratio.
Reference: [2] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin, and O. Waarts. </author> <title> On-line load balancing with applications to machine scheduling and virtual circuit routing. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 623-631, </pages> <year> 1993. </year>
Reference-contexts: We encounter load balancing problems in many situations where jobs have to be carried out using limited resources. For instance the machines may be a set of communication channels which have to accommodate requests for bandwidth <ref> [1, 2, 3, 4, 5, 6, 9] </ref>. In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access [9]. <p> Supported by NSF contract 9302476-CCR, ARMY grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. Email: andrews@math.mit.edu. 1 If the model does not consider job departures <ref> [2, 6] </ref>, then current load is the same as peak load. Competitive analyses against current load are presented in [1, 7, 9]. Westbrook [9] was the first to emphasize the difference between peak and current load.
Reference: [3] <author> B. Awerbuch, Y. Azar, S. Plotkin, and O. Waarts. </author> <title> Competitive routing of virtual circuits with unknown duration. </title> <booktitle> In Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 321-330, </pages> <year> 1994. </year>
Reference-contexts: We encounter load balancing problems in many situations where jobs have to be carried out using limited resources. For instance the machines may be a set of communication channels which have to accommodate requests for bandwidth <ref> [1, 2, 3, 4, 5, 6, 9] </ref>. In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access [9]. <p> To do this we need to determine how to measure the performance of the best off-line algorithm. One possibility is to compare the maximum load of the on-line algorithm at time t to the maximum load of the off-line algorithm at any time between 0 and t <ref> [3, 4, 5] </ref>. This is known as an analysis against peak load. If however a lot of jobs arrive and then most of them depart we probably would not be satisfied with an algorithm which did not take these departures into account.
Reference: [4] <author> Y. Azar, A. Broder, and A. Karlin. </author> <title> On-line load balancing. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-225, </pages> <year> 1992. </year>
Reference-contexts: We encounter load balancing problems in many situations where jobs have to be carried out using limited resources. For instance the machines may be a set of communication channels which have to accommodate requests for bandwidth <ref> [1, 2, 3, 4, 5, 6, 9] </ref>. In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access [9]. <p> To do this we need to determine how to measure the performance of the best off-line algorithm. One possibility is to compare the maximum load of the on-line algorithm at time t to the maximum load of the off-line algorithm at any time between 0 and t <ref> [3, 4, 5] </ref>. This is known as an analysis against peak load. If however a lot of jobs arrive and then most of them depart we probably would not be satisfied with an algorithm which did not take these departures into account.
Reference: [5] <author> Y. Azar, B. Kalyanasundaram, S. Plotkin, K. Pruhs, and O. Waarts. </author> <title> Online load balancing of temporary tasks. </title> <booktitle> In Proceedings of the 1993 Workshop on Algorithms and Data Structures, Lecture Notes in Computer Science 709, </booktitle> <pages> pages 119-130. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We encounter load balancing problems in many situations where jobs have to be carried out using limited resources. For instance the machines may be a set of communication channels which have to accommodate requests for bandwidth <ref> [1, 2, 3, 4, 5, 6, 9] </ref>. In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access [9]. <p> To do this we need to determine how to measure the performance of the best off-line algorithm. One possibility is to compare the maximum load of the on-line algorithm at time t to the maximum load of the off-line algorithm at any time between 0 and t <ref> [3, 4, 5] </ref>. This is known as an analysis against peak load. If however a lot of jobs arrive and then most of them depart we probably would not be satisfied with an algorithm which did not take these departures into account.
Reference: [6] <author> Y. Azar, J. Naor, and R. </author> <title> Rom. The competitiveness of on-line assignments. </title> <booktitle> In Proceedings of the 3rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 203-210, </pages> <year> 1992. </year>
Reference-contexts: We encounter load balancing problems in many situations where jobs have to be carried out using limited resources. For instance the machines may be a set of communication channels which have to accommodate requests for bandwidth <ref> [1, 2, 3, 4, 5, 6, 9] </ref>. In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access [9]. <p> Supported by NSF contract 9302476-CCR, ARMY grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. Email: andrews@math.mit.edu. 1 If the model does not consider job departures <ref> [2, 6] </ref>, then current load is the same as peak load. Competitive analyses against current load are presented in [1, 7, 9]. Westbrook [9] was the first to emphasize the difference between peak and current load.
Reference: [7] <author> S. Phillips and J. Westbrook. </author> <title> Online load balancing and network flow. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 402-411, </pages> <year> 1993. </year>
Reference-contexts: Supported by NSF contract 9302476-CCR, ARMY grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. Email: andrews@math.mit.edu. 1 If the model does not consider job departures [2, 6], then current load is the same as peak load. Competitive analyses against current load are presented in <ref> [1, 7, 9] </ref>. Westbrook [9] was the first to emphasize the difference between peak and current load. If we did not allow job reassignments then we would be unable to obtain an algorithm with a reasonable competitive ratio against current load.
Reference: [8] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: In this case an increase in the load would result in an increase in the time for each access [9]. We analyze the performance of an on-line load balancing algorithm in terms of competitive analysis <ref> [8] </ref>. To do this we need to determine how to measure the performance of the best off-line algorithm.
Reference: [9] <author> J. Westbrook. </author> <title> Load balancing for response time. </title> <booktitle> In Proceedings of the 3rd Annual European Symposium on Algorithms, </booktitle> <pages> pages 355-368, </pages> <year> 1995. </year> <month> 11 </month>
Reference-contexts: We encounter load balancing problems in many situations where jobs have to be carried out using limited resources. For instance the machines may be a set of communication channels which have to accommodate requests for bandwidth <ref> [1, 2, 3, 4, 5, 6, 9] </ref>. In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access [9]. <p> In another application the machines represent distributed database platforms and the jobs are programs which access the database. In this case an increase in the load would result in an increase in the time for each access <ref> [9] </ref>. We analyze the performance of an on-line load balancing algorithm in terms of competitive analysis [8]. To do this we need to determine how to measure the performance of the best off-line algorithm. <p> This is known as an analysis against peak load. If however a lot of jobs arrive and then most of them depart we probably would not be satisfied with an algorithm which did not take these departures into account. Westbrook <ref> [9] </ref> proposed the following stronger notion of competitiveness against current load. <p> Supported by NSF contract 9302476-CCR, ARMY grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. Email: andrews@math.mit.edu. 1 If the model does not consider job departures [2, 6], then current load is the same as peak load. Competitive analyses against current load are presented in <ref> [1, 7, 9] </ref>. Westbrook [9] was the first to emphasize the difference between peak and current load. If we did not allow job reassignments then we would be unable to obtain an algorithm with a reasonable competitive ratio against current load. <p> Supported by NSF contract 9302476-CCR, ARMY grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. Email: andrews@math.mit.edu. 1 If the model does not consider job departures [2, 6], then current load is the same as peak load. Competitive analyses against current load are presented in [1, 7, 9]. Westbrook <ref> [9] </ref> was the first to emphasize the difference between peak and current load. If we did not allow job reassignments then we would be unable to obtain an algorithm with a reasonable competitive ratio against current load. <p> If we did not allow job reassignments then we would be unable to obtain an algorithm with a reasonable competitive ratio against current load. In fact, if there are no reassignments then any algorithm is m-competitive against current load but no algorithm is better than m-competitive against current load <ref> [9] </ref>. We cannot just allow an arbitrary amount of reassignment however since there will often be a cost associated with starting a job on a machine. Indeed, if there were no limit on reassignment then the problem would cease to be on-line in nature. <p> Results. The main result of this paper is an algorithm, load-balance, which is 32-competitive against current load and has a reassignment factor of 79:5. This is the first algorithm which has a constant competitive ratio and a constant reassignment factor. It is an adaptation of the algorithm of Westbrook <ref> [9] </ref> which considered the special case in which r u is proportional to w u . <p> Whenever any reassignment is carried out we are able to "charge" the costs incurred to jobs whose ratio r u =w u is large. The detailed analysis of the reassignment costs is carried out using the method of potential functions. 2 Westbrook generalized the algorithm of <ref> [9] </ref> to deal with arbitrary reassignment costs but the competitive ratio and reassignment factor both depend on b=a where b = max u r u =w u and a = min u r u =w u . <p> This assumption is removed at the end of the paper. (See theorem 6.) We divide the jobs into classes according to their ratio of reassignment cost to weight. Job u is in class c if r u w u = 8 c . The algorithm of <ref> [9] </ref> dealt with the special case in which all of the jobs are in one class. We say that class c 1 is smaller than class c 2 if c 1 &lt; c 2 . <p> We say that a job is in level ` if it was assigned to its current machine by balance ( ` ). In order to make sure that the algorithm is competitive we need to maintain a third invariant, the idea of which is due to Westbrook <ref> [9] </ref>. Let L be the maximum occupied level. * Invariant 3: There exists a job in level L which would be rejected by balance ( L1 ) if an attempt were made to insert it into level L 1. Invariant 3 is maintained using the following procedure. procedure global-rebalance 1.
References-found: 9

