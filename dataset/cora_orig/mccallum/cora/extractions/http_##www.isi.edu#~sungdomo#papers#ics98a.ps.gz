URL: http://www.isi.edu/~sungdomo/papers/ics98a.ps.gz
Refering-URL: http://www.isi.edu/~sungdomo/publications.html
Root-URL: http://www.isi.edu
Email: fsungdomo,mhallg@isi.edu brm@cs.stanford.edu  
Title: Predicated Array Data-Flow Analysis for Run-Time Parallelization  
Author: Sungdo Moon Mary W. Hall Brian R. Murphy 
Address: Marina del Rey, CA 90292 Stanford, CA 94305  
Affiliation: Information Sciences Institute Computer Science Department University of Southern California Stanford University  
Abstract: This paper presents a new analysis for parallelizing compilers called predicated array data-flow analysis, whereby array data-flow analysis for parallelization and privatization is extended to associate predicates with data-flow values. These predicates can be used to derive conditions under which dependences can be eliminated or privatization is possible. These conditions, which can consist of arbitrary program statements, can be used both to enhance compile-time analysis and to introduce run-time tests that guard safe execution of a parallelized version of a computation. We have implemented predicated array data-flow analysis in the Stanford SUIF compiler. We describe features of the implementation and present experimental results that demonstrate this analysis improves the performance of three programs from the SPEC95FP benchmark suite. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. P. Amarasinghe. </author> <title> Parallelizing Compiler Techniques Based on Linear Inequalities. </title> <type> PhD thesis, </type> <institution> Dept. of Electrical Engineering, Stanford University, </institution> <month> January </month> <year> 1997. </year>
Reference: [2] <author> W. J. Blume. </author> <title> Symbolic Analysis Techniques for Effective Automatic Parallelization. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> June </month> <year> 1995. </year>
Reference: [3] <author> P. Cousot and R. Cousot. </author> <title> Systematic design of program anaysis frameworks. </title> <booktitle> In Conference Record of the Sixth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 269282, </pages> <address> San Antonio, Texas, </address> <month> January </month> <year> 1979. </year>
Reference: [4] <author> G. Goff. </author> <title> Practical techniques to augment dependence analysis in the presence of symbolic terms. </title> <type> Technical Report TR92194, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> October </month> <year> 1992. </year>
Reference: [5] <author> J. Gu, Z. Li, and G. Lee. </author> <title> Experience with efficient array data-flow analysis for array privatization. </title> <booktitle> In Proceedings of the Sixth ACM SIG-PLAN Symposium on Principles & Practice of Parallel Programming, </booktitle> <pages> pages 157167, </pages> <address> Las Vegas, Nevada, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: Guarded array data-flow analysis does not merge unless the regions are identical <ref> [5] </ref>. Because predicates must sometimes be approximated during analysis, such as when summarizing information at a loop or crossing procedure boundaries, early merging avoids loss of information when analysis must approximate predicates before they are used in subtraction or dependence tests. <p> To this end, the analysis employs several cost-saving techniques. Two mechanisms for managing predicates are similar to what is used by Gu, Li, and Lee <ref> [5] </ref>. First, demand-driven predicate translation only performs translation to the predicate domain when a predicate is needed in an operation, such as when comparing predicates in merge operations or dependence and privatization testing.
Reference: [6] <author> M. R. Haghighat. </author> <title> Symbolic Analysis for Parallelizing Compilers. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1994. </year>
Reference: [7] <author> M. W. Hall, B. R. Murphy, S. P. Amarasinghe, S.-W. Liao, and M. S. Lam. </author> <title> Interprocedural analysis for parallelization. </title> <booktitle> In Proceedings of the 8th International Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 6180, </pages> <address> Columbus, Ohio, </address> <month> August </month> <year> 1995. </year>
Reference: [8] <author> L. H. Holley and B. K. Rosen. </author> <title> Qualified data flow problems. </title> <booktitle> In Conference Record of the Seventh Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 6882, </pages> <address> Las Vegas, Nevada, </address> <month> Jan-uary </month> <year> 1980. </year>
Reference: [9] <author> F. Irigoin. </author> <title> Interprocedural analyses for programming environments. </title> <booktitle> In Proceedings of the NSF-CNRS Workshop on Environment and Tools for Parallel Scientific Programming, </booktitle> <month> September </month> <year> 1992. </year>
Reference: [10] <author> F. Nielson. </author> <title> Expected forms of data flow analysis. </title> <editor> In H. Ganzinger and N. D. Jones, editors, </editor> <title> Programs as Data Objects, </title> <booktitle> volume 217 of Lecture Notes on Computer Science, </booktitle> <pages> pages 172191. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1986. </year>
Reference: [11] <author> W. Pugh and D. Wonnacott. </author> <title> Eliminating false data dependences using the Omega test. </title> <booktitle> In Proceedings of the ACM SIGPLAN '92 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 140 151, </pages> <address> San Francisco, California, </address> <month> June </month> <year> 1992. </year>
Reference: [12] <author> L. Rauchwerger and D. Padua. </author> <title> The LRPD test: Speculative run-time parallelization of loops with privatization and reduction paralleliza-tion. </title> <booktitle> In Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 218232, </pages> <address> La Jolla, California, </address> <month> June </month> <year> 1995. </year>
Reference: [13] <author> J. H. Saltz, R. Mirchandaney, and K. Crowley. </author> <title> Run-time paral-lelization and scheduling of loops. </title> <journal> IEEE Transaction on Computers, </journal> <volume> 40(5):603612, </volume> <month> May </month> <year> 1991. </year>
Reference: [14] <author> R. E. Strom and D. M. Yellin. </author> <title> Extending typestate checking using conditional liveness analysis. </title> <journal> IEEE Transaction on Software Engineering, </journal> <volume> 19(5):478485, </volume> <month> May </month> <year> 1993. </year>
Reference: [15] <author> P. Tu. </author> <title> Automatic Array Privatization and Demand-driven Symbolic Analysis. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illi-nois at Urbana-Champaign, </institution> <month> May </month> <year> 1995. </year>
Reference: [16] <author> M. N. Wegman and F. K. Zadeck. </author> <title> Constant propagation with conditional branches. </title> <booktitle> ACM Transaction on Programming Languages and Systems, </booktitle> <address> 13(2):180210, </address> <month> April </month> <year> 1991. </year> <month> 8 </month>
References-found: 16

