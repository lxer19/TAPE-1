URL: http://www.cs.wisc.edu/condor/doc/hpdc-paper.ps
Refering-URL: 
Root-URL: 
Email: solomong@cs.wisc.edu  
Title: Matchmaking: Distributed Resource Management for High Throughput Computing  
Author: Rajesh Raman, Miron Livny and Marvin Solomon framan, miron, 
Date: February 14, 1998  
Address: 1210 West Dayton Street Madison, WI 53703  
Affiliation: University of Wisconsin  
Abstract: Conventional resource management systems use a system model to describe resources and a centralized scheduler to control their allocation. We argue that this paradigm does not adapt well to distributed systems, particularly those built to support high-throughput computing. Obstacles include heterogeneity of resources, which make uniform allocation algorithms difficult to formulate, and distributed ownership, leading to widely varying allocation policies. Faced with these problems, we developed and implemented the classified advertisement (classad) matchmaking framework, a flexible and general approach to resource management in distributed environment with decentralized ownership of resources. Novel aspects of the framework include a semi-structured data model that combines schema, data, and query in a simple but powerful specification language, and a clean separation of the matching and claiming phases of resource allocation. The representation and protocols result in a robust, scalable and flexible framework that can evolve with changing resources. The framework was designed to solve real problems encountered in the deployment of Condor, a high throughput computing system developed at the University of Wisconsin|Madison. Condor is heavily used by scientists at numerous sites around the world. It derives much of its robustness and efficiency from the matchmaking architecture.
Abstract-found: 1
Intro-found: 1
Reference: [CFK + ] <author> K. Czajkowski, I. Foster, C. Kesselman, S. Martin, W. Smith, and S. Tuecke. </author> <title> A resource management architecture for metacomputing systems. </title> <note> Available from ftp://ftp.globus.org/pub/globus/papers/gram.ps.Z. 7 </note>
Reference-contexts: Systems such as NQE [Res97], PBS [HT96], LSF [Zho92] and Load-Leveler [Cor93] process user submitted jobs by finding resources that have been identified either explicitly through a job control language, or implicitly by submitting the job to a particular queue. Globus <ref> [FK, CFK + ] </ref> defines an architecture for resource management of autonomous distributed systems with provisions for policy extensibility and co-allocation. Customers describe required resources through a resource specification language (RSL) that is based on a predefined schema of the resources database.
Reference: [Cor93] <institution> International Business Machines Corporation. IBM Load Leveler: </institution> <note> User's Guide, </note> <month> September </month> <year> 1993. </year>
Reference-contexts: Instead of providing a survey of a large number of systems, we briefly discuss the basic matching mechanisms of some resource management environments to highlight the differences between conventional resource allocation and matchmaking. Systems such as NQE [Res97], PBS [HT96], LSF [Zho92] and Load-Leveler <ref> [Cor93] </ref> process user submitted jobs by finding resources that have been identified either explicitly through a job control language, or implicitly by submitting the job to a particular queue.
Reference: [ELvD + 96] <author> D.H.J. Epema, M. Livny, R. van Dantzig, X. Evers, and J. Pruyne. </author> <title> A worldwide flock of condors : Load sharing among workstation clusters. </title> <journal> Journal on Future Generations of Computer Systems, </journal> <volume> 12, </volume> <year> 1996. </year>
Reference-contexts: They can be arbitrarily nested, leading to a natural language for expressing resource aggregates or co-allocation requests. A classad is a mapping from attribute names to expressions. 1 For example, Figure 1 shows a classad that describes a workstation in a Condor <ref> [LLM88a, ELvD + 96] </ref> pool at the University of Wisconsin, 2 and integer, real, or string constants, or they may be more complicated expressions constructed with arithmetic and logical operators and record and list constructors.
Reference: [FK] <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <note> To appear in International Journal of Supercomputer Applications. </note>
Reference-contexts: Systems such as NQE [Res97], PBS [HT96], LSF [Zho92] and Load-Leveler [Cor93] process user submitted jobs by finding resources that have been identified either explicitly through a job control language, or implicitly by submitting the job to a particular queue. Globus <ref> [FK, CFK + ] </ref> defines an architecture for resource management of autonomous distributed systems with provisions for policy extensibility and co-allocation. Customers describe required resources through a resource specification language (RSL) that is based on a predefined schema of the resources database.
Reference: [GW96] <author> A. S. Grimsaw and W. A. Wulf. </author> <title> Legion | a view from 50,000 feet. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: The task of mapping specifications to actual resources is performed by a resource co-allocator, which is responsible for coordinating the allocation and management of resources at multiple sites. The RSL allows customers to provide very sophisticated resource requirements, but no analogous mechanism for resources exists. Legion <ref> [GW96] </ref> takes an object-oriented approach to resource management, formulating the matching problem as an object placement problem [Kar96]. The identification of a candidate resource is performed by an object mapper, whose recommendation is then implemented by a different object.
Reference: [HT96] <author> R. Henderson and D. Tweten. </author> <title> Portable batch system: External reference specification. </title> <type> Technical report, </type> <institution> NASA, Ames Research Center, </institution> <year> 1996. </year>
Reference-contexts: Instead of providing a survey of a large number of systems, we briefly discuss the basic matching mechanisms of some resource management environments to highlight the differences between conventional resource allocation and matchmaking. Systems such as NQE [Res97], PBS <ref> [HT96] </ref>, LSF [Zho92] and Load-Leveler [Cor93] process user submitted jobs by finding resources that have been identified either explicitly through a job control language, or implicitly by submitting the job to a particular queue.
Reference: [Kar96] <author> J. F. Karpovich. </author> <title> Support for object placement in hetergenous distributed systems. </title> <type> Technical Report CS-96-03, </type> <institution> University of Virginia, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: The RSL allows customers to provide very sophisticated resource requirements, but no analogous mechanism for resources exists. Legion [GW96] takes an object-oriented approach to resource management, formulating the matching problem as an object placement problem <ref> [Kar96] </ref>. The identification of a candidate resource is performed by an object mapper, whose recommendation is then implemented by a different object. The Legion system defines a notation [Kar96] that is similar to classads, although it uses an object-oriented type system with inheritance to define resources [LG96], as contrasted with the <p> Legion [GW96] takes an object-oriented approach to resource management, formulating the matching problem as an object placement problem <ref> [Kar96] </ref>. The identification of a candidate resource is performed by an object mapper, whose recommendation is then implemented by a different object. The Legion system defines a notation [Kar96] that is similar to classads, although it uses an object-oriented type system with inheritance to define resources [LG96], as contrasted with the simple attribute-oriented Boolean logic of classads.
Reference: [LG96] <author> M. J. Lewis and A. Grimshaw. </author> <title> The core legion object model. </title> <booktitle> In Proc. of the Fifth IEEE Int'l Symposium on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: The identification of a candidate resource is performed by an object mapper, whose recommendation is then implemented by a different object. The Legion system defines a notation [Kar96] that is similar to classads, although it uses an object-oriented type system with inheritance to define resources <ref> [LG96] </ref>, as contrasted with the simple attribute-oriented Boolean logic of classads. Legion supports autonomy with a jurisdiction magistrate (JM), which may reject requests if the offered requests do not match the policy of the site being managed by the JM.
Reference: [LL90] <author> M. J. Litzkow and M. Livny. </author> <title> Experience with the condor distributed batch system. </title> <booktitle> IEEE Workshop on Experimental Distributed Systems, </booktitle> <year> 1990. </year>
Reference-contexts: The matchmaker does not need to retain any state about the match, a fact that simplifies recovery in case of failure and makes the system more scalable. 4 An Example of Matchmaking at Work: Condor Condor <ref> [LL90, LLM88b] </ref> is an high throughput computing (HTC) environment that can manage very large heterogeneous collections of distributively owned resources. The architecture of the system is structured to provide sophisticated resource management services at the resource, customer and application levels to both sequential and parallel applications [PL96].
Reference: [LLM88a] <author> M. J. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor | a hunter of idle workstations. </title> <booktitle> In Proc. of the 8th Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 104-111, </pages> <year> 1988. </year>
Reference-contexts: They can be arbitrarily nested, leading to a natural language for expressing resource aggregates or co-allocation requests. A classad is a mapping from attribute names to expressions. 1 For example, Figure 1 shows a classad that describes a workstation in a Condor <ref> [LLM88a, ELvD + 96] </ref> pool at the University of Wisconsin, 2 and integer, real, or string constants, or they may be more complicated expressions constructed with arithmetic and logical operators and record and list constructors.
Reference: [LLM88b] <author> M. J. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor | a hunter of idle workstations. </title> <booktitle> In Proc. of the 8th Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 104-111, </pages> <year> 1988. </year>
Reference-contexts: The matchmaker does not need to retain any state about the match, a fact that simplifies recovery in case of failure and makes the system more scalable. 4 An Example of Matchmaking at Work: Condor Condor <ref> [LL90, LLM88b] </ref> is an high throughput computing (HTC) environment that can manage very large heterogeneous collections of distributively owned resources. The architecture of the system is structured to provide sophisticated resource management services at the resource, customer and application levels to both sequential and parallel applications [PL96].
Reference: [NAM97] <author> S. Nestorov, S. Abiteboul, and R. Motwani. </author> <title> Inferring structure in semistructured data. </title> <booktitle> In Proceedings of the Workshop on Management of Semistructured Data, </booktitle> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: The model has several novel aspects. * Classads use a semi-structured data model <ref> [NAM97] </ref>, so no specific schema is required by the match <br>- maker, allowing the matchmaker to work naturally in a heterogeneous environment. * The classad language folds the query language into the data model.
Reference: [PL96] <author> J. Pruyne and M. Livny. </author> <title> Interfacing condor and pvm to harness the cycles of workstation clusters. </title> <journal> Journal on Future Generations of Computer Systems, </journal> <volume> 12, </volume> <year> 1996. </year>
Reference-contexts: The architecture of the system is structured to provide sophisticated resource management services at the resource, customer and application levels to both sequential and parallel applications <ref> [PL96] </ref>. This section briefly describes aspects of the Condor system that are relevant to the problem of matchmaking. 3 Resources in the Condor system are represented by Resource-owner Agents (RAs), which are responsible for enforcing the policies stipulated by resource owners.
Reference: [Res97] <author> Cray Research. </author> <title> Document number in-2153 2/97. </title> <type> Technical report, </type> <institution> Cray Research, </institution> <year> 1997. </year>
Reference-contexts: Instead of providing a survey of a large number of systems, we briefly discuss the basic matching mechanisms of some resource management environments to highlight the differences between conventional resource allocation and matchmaking. Systems such as NQE <ref> [Res97] </ref>, PBS [HT96], LSF [Zho92] and Load-Leveler [Cor93] process user submitted jobs by finding resources that have been identified either explicitly through a job control language, or implicitly by submitting the job to a particular queue.
Reference: [SRC84] <author> J. H. Saltzer, D. P. Reed, and D. D. Clark. </author> <title> End-to-end arguments in system design. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(4) </volume> <pages> 277-288, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: The matchmaking framework thus allows several dissimilar "allocation models" to coexist in the same resource management environment. End-to-end verification <ref> [SRC84] </ref>. The principals involved in a match are themselves responsible for establishing, maintaining and servicing a match.
Reference: [Zho92] <author> S. Zhou. </author> <title> LSF: Load sharing in large-scale heterogenous distributed systems. </title> <booktitle> In Proc. Workshop on Cluster Computing, </booktitle> <year> 1992. </year> <month> 8 </month>
Reference-contexts: Instead of providing a survey of a large number of systems, we briefly discuss the basic matching mechanisms of some resource management environments to highlight the differences between conventional resource allocation and matchmaking. Systems such as NQE [Res97], PBS [HT96], LSF <ref> [Zho92] </ref> and Load-Leveler [Cor93] process user submitted jobs by finding resources that have been identified either explicitly through a job control language, or implicitly by submitting the job to a particular queue.
References-found: 16

