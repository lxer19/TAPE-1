URL: http://swarm.cs.wustl.edu/~picco/papers/ma97.ps.gz
Refering-URL: http://swarm.cs.wustl.edu/~picco/listpub.type.html
Root-URL: 
Email: [mbaldi silvano picco]@polito.it  
Title: Exploiting Code Mobility in Decentralized and Flexible Network Management  
Author: Mario Baldi, Silvano Gai, and Gian Pietro Picco 
Keyword: code mobility, mobile agents, network management.  
Address: C.so Duca degli Abruzzi 24, 10129 Torino, Italy  
Affiliation: Dip. Automatica e Informatica, Politecnico di Torino  
Abstract: Network management is gaining increasing importance due to the pervasiveness of computer networks. Nevertheless, mainstream approaches to network management are presently limited by centralized management strategies and poor flexibility|a consequence of their rigid client-server architecture. In this paper we analyze how to overcome these problems by new design paradigms and technologies encompassing the capability to relocate dynamically the components of a distributed application. We evaluate the opportunities offered by this approach and provide feasibility considerations, also discussing a few interim architectural solutions adopted in our on-going implementation work. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Carzaniga, G.P. Picco, and G. Vigna. </author> <title> Designing Distributed Applications with a Mobile Code Paradigm. </title> <booktitle> In Proceedings of the 19th International Conference on Software Engineering (ICSE'97), </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: At least three design paradigms are conceivable <ref> [1] </ref> to support this idea, namely: Code on Demand (COD) The code that describes the behavior of a component of an MCA can change over time. <p> Our work is at an initial stage, and we are currently investigating different research threads, including: Development of a quantitative model to identify which parameters of a network management application must be taken into account in order to select the most convenient approach, along the lines depicted in <ref> [1] </ref>. - Prototyping with mobile code technology. We are presently investigating the use of code mobility paradigms with one of the interim solutions sketched earlier using Agent Tcl [7] as our implementation language. Probing of quantitative data to demonstrate the effectiveness of the approach with respect to generated traffic.
Reference: 2. <author> J. Case, K. McCloghrie, M. Rose, and S. Waldbusser. </author> <title> Structure of Management Information for version 2 of the Simple Network Management Protocol. </title> <booktitle> RFC 1902, </booktitle> <month> January </month> <year> 1996. </year>
Reference: 3. <author> J. D. Case, M. Fedor, M. L. Schoffstall, and C. Davin. </author> <title> Simple Network Management Protocol. </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year>
Reference: 4. <author> G. Cugola, C. Ghezzi, G.P. Picco, and G. Vigna. </author> <title> Analyzing Mobile Code Languages. </title> <booktitle> In [16]. </booktitle>
Reference-contexts: The paradigms above have been derived from the analysis of current MCLs, which provide for code mobility under two different forms, as discussed in <ref> [4] </ref>. If strong mobility is supported (by a strong MCL), the EUs coded in the MCL can move their code and execution state to a different host. The execution state contains the information related to the state of the EU, e.g., the instruction pointer.
Reference: 5. <author> M. Straer, J. Baumann, and F. Hohl. </author> <title> MOLE|A Java Based Mobile Agent System. </title> <booktitle> In [16]. </booktitle>
Reference-contexts: The Java class loader, responsible for resolving class names at run-time, can be modified by the programmer to retrieve the corresponding code from a remote host. Finally, TACOMA [9], Facile [11], M0 [17], and Mole <ref> [5] </ref> are weak MCLs that support the REV paradigm.
Reference: 6. <author> G. Goldszmidt and Y. Yemini. </author> <title> Distributed Management by Delegation. </title> <booktitle> In 15th International Conference on Distributed Computing, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: In addition, since the agent on the probe can perform semantic compression of data by pre-processing the information collected before sending it to the management station. Management by Delegation Management by delegation <ref> [6] </ref> (MbD) represents a clear effort towards decentralization and increased flexibility of management functionality. The management architecture still includes a management protocol and agents, yet an elastic process run-time support is assumed on each device. <p> This brings a nice side-effect of modularity into the management architecture, and provides better performance by reducing the number of messages exchanged between the agent and the management station, thus limiting the load in the area around it. Management by delegation <ref> [6] </ref> which is subsumed in our paradigms, highlighted as a shortcoming the explicit invocation of remote execution on each node. We agree with this observation as we do not propose to exploit REV for the decentralization of every management task.
Reference: 7. <author> R.S. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <booktitle> In Proceedings of the CIKM'95 Workshop on Intelligent Information Agents. </booktitle>
Reference-contexts: In Telescript [19], a strong MCL, a special thread called agent can migrate to a different node by executing a go operation that suspends the execution of the thread, serializes it for transmission and sends it to the destination node, where it is resumed. In Agent Tcl <ref> [7] </ref>, another strong MCL, the Tcl interpreter is extended to provide an additional jump command, whose effect is analogous to the Telescript go, except that it freezes the whole UNIX process containing the interpreter rather than a single thread. <p> We are presently investigating the use of code mobility paradigms with one of the interim solutions sketched earlier using Agent Tcl <ref> [7] </ref> as our implementation language. Probing of quantitative data to demonstrate the effectiveness of the approach with respect to generated traffic. Acknowledgments The taxonomy for code mobility discussed here is joint work of one of the authors with G. Vigna and other people at Politecnico di Milano.
Reference: 8. <author> J. W. Stamos and D. K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Fig. 2. Mobile code design paradigms. Remote Evaluation (REV) In this paradigm, inspired by the pioneering work described in <ref> [8] </ref>, any component of an MCA can invoke services provided by other components distributed among the hosts, like in a CS paradigm. The clients, in addition to the name of the service requested and the input parameters, send also the code describing the service to be executed.
Reference: 9. <author> D. Johansen, R. van Renesse, and F.B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System Version 1.0. </title> <type> Technical Report 95-23, </type> <institution> University of Tromst and Cornell University, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: In turn, Java [14] is an example of a weak MCL that supports directly the COD paradigm. The Java class loader, responsible for resolving class names at run-time, can be modified by the programmer to retrieve the corresponding code from a remote host. Finally, TACOMA <ref> [9] </ref>, Facile [11], M0 [17], and Mole [5] are weak MCLs that support the REV paradigm.
Reference: 10. <author> K. Jones. </author> <title> Internet's SNMP and ISO's CMIP Protocols for Network Management. </title> <journal> International Journal of Network Management, </journal> <pages> pages 130-137, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Of great relevance is also the one proposed by ISO for application within OSI networks, which is based on the Common Management Information Protocol (CMIP) [13]. The two approaches are very similar in the architecture they adopt though they differ slightly in the way they operate <ref> [10] </ref>. Both assume the presence of a management station (operated by the network manager) that interacts with agents running on network nodes, e.g., bridges, routers, and workstations. Agents are computational entities whose purpose is to provide a standardized interface for accessing information about the network device on which they reside.
Reference: 11. <author> F.C. Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> Technical Report ECRC-95-36, </type> <institution> European Computer-Industry Research Centre, Germany, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: In turn, Java [14] is an example of a weak MCL that supports directly the COD paradigm. The Java class loader, responsible for resolving class names at run-time, can be modified by the programmer to retrieve the corresponding code from a remote host. Finally, TACOMA [9], Facile <ref> [11] </ref>, M0 [17], and Mole [5] are weak MCLs that support the REV paradigm.
Reference: 12. <author> T. Magedanz, K. Rothermel, and S. Krause. </author> <title> Intelligent Agents: An Emerging Technology for Next Generation Telecommunications? In INFOCOM'96, </title> <address> San Francisco, CA, USA, </address> <month> March </month> <year> 1996. </year>
Reference: 13. <author> OSI. </author> <title> ISO 9595 Information Technology, Open System Interconnection, Common Management Information Protocol Specification, </title> <year> 1991. </year>
Reference-contexts: Mainstream Approaches The approach more widely applied comes from the IETF and is based on the Simple Network Management Protocol (SNMP) [2,3]. Of great relevance is also the one proposed by ISO for application within OSI networks, which is based on the Common Management Information Protocol (CMIP) <ref> [13] </ref>. The two approaches are very similar in the architecture they adopt though they differ slightly in the way they operate [10]. Both assume the presence of a management station (operated by the network manager) that interacts with agents running on network nodes, e.g., bridges, routers, and workstations.
Reference: 14. <author> Sun Microsystems. </author> <title> The Java Language Specification, </title> <month> October </month> <year> 1995. </year>
Reference-contexts: In Agent Tcl [7], another strong MCL, the Tcl interpreter is extended to provide an additional jump command, whose effect is analogous to the Telescript go, except that it freezes the whole UNIX process containing the interpreter rather than a single thread. In turn, Java <ref> [14] </ref> is an example of a weak MCL that supports directly the COD paradigm. The Java class loader, responsible for resolving class names at run-time, can be modified by the programmer to retrieve the corresponding code from a remote host.
Reference: 15. <author> D.L. Tennenhouse and D.J. Wetherall. </author> <title> Towards an Active Network Architecture. </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <volume> 26(2), </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: Nevertheless, the opportunities offered by code mobility within the networking domain are becoming recognized by an increasing number of researchers and organizations, and the first efforts to embed code mobility at the network device level are beginning to appear <ref> [15] </ref>. In parallel, network device manufacturers are placing more and more computational power devoted to network management into their devices, thus enabling mobile code support to take advantage of existing hardware.
Reference: 16. <editor> C. Tschudin and J. Vitek, editors. </editor> <booktitle> Mobile Object Systems, Lecture Notes on Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: In this context, new approaches to application design and implementation have been developed that embody the notion of code mobility, i.e., the capability of moving dynamically the components of a distributed application among the nodes of a computer network <ref> [16] </ref>. The key idea behind code mobility is to provide a complementary solution (if not an alternative) to the traditional CS structure of distributed applications, thus en-abling a better use of bandwidth resources and a higher degree of flexibility and reconfigurability.
Reference: 17. <author> C. F. Tschudin. </author> <title> An Introduction to the M0 Messenger Language. </title> <institution> University of Geneva, Switzerland, </institution> <year> 1994. </year>
Reference-contexts: In turn, Java [14] is an example of a weak MCL that supports directly the COD paradigm. The Java class loader, responsible for resolving class names at run-time, can be modified by the programmer to retrieve the corresponding code from a remote host. Finally, TACOMA [9], Facile [11], M0 <ref> [17] </ref>, and Mole [5] are weak MCLs that support the REV paradigm.
Reference: 18. <author> S. Waldbusser. </author> <title> Remote Network Monitoring Management Information Base. </title> <type> RFC 1757, </type> <month> February </month> <year> 1995. </year>
Reference-contexts: On one side, a proxy agent sends commands to other agents and handles their responses; on the other side, it answers to commands received by a management station. The IETF has proposed another approach, known as Remote MONitoring (RMON) <ref> [18] </ref>, that introduces a higher degree of decentralization. RMON assumes the availability of network monitoring devices called monitors or probes. By monitoring packet traffic and analyzing the headers, probes provide information about links, connections among stations, traffic patterns, and status of network nodes.
Reference: 19. <author> J.E. White. </author> <title> Mobile Agents. In Software Agents. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Available MCLs provide direct support for at least one of the above design paradigms, though the latter are at a higher abstraction level and do not necessarily rely on the availability of MCLs for their eventual implementation. For instance, strong MCLs support naturally the MA paradigm. In Telescript <ref> [19] </ref>, a strong MCL, a special thread called agent can migrate to a different node by executing a go operation that suspends the execution of the thread, serializes it for transmission and sends it to the destination node, where it is resumed.
Reference: 20. <author> Y. Yemini. </author> <title> The OSI Network Management Model. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 20-29, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This choice was aimed at keeping the agents as simple as possible, due to limitations on the resources available in the devices hosting them|a constraint being relaxed by technological achievements. Yet, it has been demonstrated <ref> [20] </ref> that this solution lacks scalability and generates congestion in the network area around the management station, thus heavily limiting the effectiveness of the approach. The increased importance of computer networks has also stimulated research on large scale distributed systems. <p> Drawbacks of Centralization in Network Management The IETF and ISO approaches are characterized by high centralization, since their architecture puts almost all the computational burden on the management station. Centralization has proven to seriously limit the scalability of network management <ref> [20] </ref>. As the dimension of the network grows, the management station has to communicate with a larger number of devices, and to store and process an ever increasing amount of data.
References-found: 20

