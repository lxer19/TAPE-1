URL: http://www.csl.sri.com/shankar/cav96.ps.gz
Refering-URL: http://www.csl.sri.com/shankar/
Root-URL: 
Email: fruess,shankar,srivasg@csl.sri.com  
Title: Modular Verification of SRT Division To appear in CAV '96  
Author: H. Rue, N. Shankar, and M.K. Srivas 
Address: Menlo Park, CA 94025  
Affiliation: Computer Science Laboratory, SRI International  
Abstract: We describe a formal specification and verification in PVS for the general theory of SRT division, and for the hardware design of a specific implementation. The specification demonstrates how attributes of the PVS language (in particular, predicate subtypes) allow the general theory to be developed in a readable manner that is similar to textbook presentations, while the PVS table construct allows direct specification of the implementation's quotient look-up table. Verification of the derivations in the SRT theory and for the data path and look-up table of the implementation are highly automated and performed for arbitrary, but finite precision; in addition, the theory is verified for general radix, while the implementation is specialized to radix 4. The effectiveness of the automation derives from PVS's tight integration of rewriting with decision procedures for equality, linear arithmetic over integers and rationals, and propositional logic. This example demonstrates that the resources of an expressive specification language and of a general-purpose theorem prover are not inimical to highly automated verification in this domain, and can contribute to clarity, generality, and reuse.
Abstract-found: 1
Intro-found: 1
Reference: [Atk68] <author> D.E. Atkins. </author> <title> Higher-radix Division Using Estimates of the Divisor and Partial Remainders. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-17(10):925-934, </volume> <month> October </month> <year> 1968. </year>
Reference-contexts: 1 Introduction The SRT division algorithm is one of the most popular methods for implementing floating-point division and related operations in high-performance arithmetic units. Even though the theory of SRT division has been extensively studied <ref> [Atk68] </ref>, the design of dividers still remains a serious challenge [OF94], and it is easy to make mistakes in its implementation|as was illustrated by the much publicized FDIV error in the Intel Pentium chip.
Reference: [Bry94] <author> R.E. Bryant. </author> <title> Verification of Arithmetic Functions with Binary Moment Diagrams. </title> <type> Technical Report CMU-CS-94-160, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <year> 1994. </year>
Reference-contexts: Methods based on ordered BDDs and symbolic model checking are not well-suited for verifying multipliers and dividers since BDD graphs for such operations grow exponentially with the word size <ref> [Bry94] </ref>. However, Bryant [Bry95] has used BDDs to check the relation that one iteration of the SRT circuit must 2 preserve for the circuit to correctly divide. <p> While Bryant's BMDs can be used to verify multipliers against their number-theoretic specification <ref> [Bry94] </ref>, they cannot be used for SRT verification, because they cannot efficiently check inequalities over bit-vectors. But Clarke and Zhao [CZ95] have recently extended the symbolic model-checking algorithm used in SMV to express and verify word-level properties on numbers.
Reference: [Bry95] <author> R.E. Bryant. </author> <title> Bit-Level Analysis of an SRT Divider Circuit. </title> <type> Technical Report CMU-CS-95-140, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Methods based on ordered BDDs and symbolic model checking are not well-suited for verifying multipliers and dividers since BDD graphs for such operations grow exponentially with the word size [Bry94]. However, Bryant <ref> [Bry95] </ref> has used BDDs to check the relation that one iteration of the SRT circuit must 2 preserve for the circuit to correctly divide.
Reference: [CG95] <author> E.M. Clarke and S.M. </author> <title> German. </title> <type> Personal Communication, </type> <year> 1995. </year>
Reference-contexts: The circuits verified in both of these efforts are not based on the SRT method and hence do not contain the kinds of optimizations used in SRT division. Recently, German and Clarke <ref> [Ger95, CG95] </ref> performed a verification of Taylor's SRT divider circuit considered in this paper by manually deriving a set of inequalities that the circuit imposes on the data path signals and then showing, in the MAPLE symbolic algebraic system, that two main SRT correctness invariants are preserved by the data path
Reference: [CGZ96] <author> E.M. Clarke, S.M. German, and X. Zhao. </author> <title> Verifying the SRT Division Algorithm using Theorem Proving Techniques. </title> <note> Submitted to CAV'96, </note> <year> 1996. </year>
Reference-contexts: This work provided the main impetus for our work. Clarke et al. <ref> [CGZ96] </ref> have independently mechanized their verification in the Analytica theorem prover. Our work not only mechanizes all the steps in the verification of the SRT circuit, but also formalizes the general SRT theory correctness and develops a modular framework which can be used to verify other similar circuits. <p> The word-level model-checker can be used to check if finite-sized arithmetic circuits satisfy desired number-theoretic properties. They have used the word-level model checker to verify Taylor's SRT circuit by checking if a state transition model of the circuit satisfied the main SRT invariants. Both [CZ95] and <ref> [CGZ96] </ref> are only applicable for fixed-sized data paths. 3 An Overview of PVS The PVS system combines an expressive specification language with a productive, interactive proof checker that has a reasonable amount of theorem proving capabilities, and has been used for reasoning in domains as diverse as microprocessor verification, protocol verification,
Reference: [CZ95] <author> E.M. Clarke and X. Zhao. </author> <title> Word Level Symbolic Model Checking: A New approach for Verifying Arithmetic Circuits. </title> <type> Technical Report CMU-CS-95-161, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: While Bryant's BMDs can be used to verify multipliers against their number-theoretic specification [Bry94], they cannot be used for SRT verification, because they cannot efficiently check inequalities over bit-vectors. But Clarke and Zhao <ref> [CZ95] </ref> have recently extended the symbolic model-checking algorithm used in SMV to express and verify word-level properties on numbers. They use an extension of BDDs called hybrid decision diagrams to represent integer functions and check relations on them. <p> The word-level model-checker can be used to check if finite-sized arithmetic circuits satisfy desired number-theoretic properties. They have used the word-level model checker to verify Taylor's SRT circuit by checking if a state transition model of the circuit satisfied the main SRT invariants. Both <ref> [CZ95] </ref> and [CGZ96] are only applicable for fixed-sized data paths. 3 An Overview of PVS The PVS system combines an expressive specification language with a productive, interactive proof checker that has a reasonable amount of theorem proving capabilities, and has been used for reasoning in domains as diverse as microprocessor verification,
Reference: [Ger95] <author> S.M. </author> <title> German. Towards Automatic Verification of Arithmetic Hardware. </title> <booktitle> Lecture notes, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: The circuits verified in both of these efforts are not based on the SRT method and hence do not contain the kinds of optimizations used in SRT division. Recently, German and Clarke <ref> [Ger95, CG95] </ref> performed a verification of Taylor's SRT divider circuit considered in this paper by manually deriving a set of inequalities that the circuit imposes on the data path signals and then showing, in the MAPLE symbolic algebraic system, that two main SRT correctness invariants are preserved by the data path
Reference: [LO95] <author> M. Leeser and J. O'Leary. </author> <title> Verification of a Subtractive Radix-2 Square Root Algorithm and Implementation. </title> <booktitle> In Proc. of ICCD'95, </booktitle> <pages> pages 526-531. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: The first step of the verification is applicable to arbitrary radixes, while the second step assumes a radix-4 implementation, since it uses a look-up table for radix-4. 2 Related Work. Claesen et al. [VCM94] and Leeser and O'Leary <ref> [LO95] </ref> have used theorem provers to verify a non-restoring divider and a radix-2 subtractive square root algorithm, respectively. The circuits verified in both of these efforts are not based on the SRT method and hence do not contain the kinds of optimizations used in SRT division.
Reference: [McS61] <author> O.L. McSorley. </author> <title> High-speed Arithmetic in Binary Computers. </title> <booktitle> In Proc. of IRE, </booktitle> <pages> pages 67-91, </pages> <year> 1961. </year>
Reference-contexts: PVS has an LCF-like strategy language for combining inference steps into more complicated proof strategies. 4 SRT Division SRT dividers <ref> [McS61, Rob58, Toc58] </ref> speed up nonrestoring division and are widely used in high-speed floating point units. The quotient is represented in radix-r form and one digit of it is calculated in each iteration.
Reference: [Min95] <author> P.S. Miner. </author> <title> Defining the IEEE-854 floating-point standard in PVS. </title> <type> NASA Technical Memorandum 110167, </type> <institution> NASA Langley Research Center, Hamp-ton, VA, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: In the future we plan to extend this case study to the verification of related circuits and operations, such as square root, and investigate other concepts like IEEE compliant rounding <ref> [Min95] </ref>.
Reference: [OF94] <author> S.F. Oberman and M.J. Flynn. </author> <title> Design Issues in Floating-Point Division. </title> <type> Technical Report CSL-TR-94-647, </type> <institution> Dept. of Computer Science, Stanford University, Stanford, </institution> <address> CA 94305-2140, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The SRT division algorithm is one of the most popular methods for implementing floating-point division and related operations in high-performance arithmetic units. Even though the theory of SRT division has been extensively studied [Atk68], the design of dividers still remains a serious challenge <ref> [OF94] </ref>, and it is easy to make mistakes in its implementation|as was illustrated by the much publicized FDIV error in the Intel Pentium chip.
Reference: [ORS95] <author> S. Owre, J. Rushby, and N. Shankar. </author> <title> Analyzing Tabular and State-Transition Specification in PVS. </title> <type> Technical Report CSL-95-12, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park CA 94025 USA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Bits 6 down to 2 of P are used as a table index and the remaining bits are used in some cases to compute the resulting value. The formalization of the resulting table q (D, P) (shown in Appendix A) uses the TABLE construct of the PVS specification language <ref> [ORS95] </ref>. This construct was added to the PVS specification language in order to provide visually appealing two-dimensional tabular specifications in the manner advocated by Parnas and others [Par95]. It proved adequate to express the look-up table of this SRT circuit in a concise and perspicuous way.
Reference: [ORSvH95] <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke. </author> <title> Formal Verification for Fault-Tolerant Architectures: Prolegomena to the Design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: CCR-930044. We gratefully acknowledge the valuable guidance and help given by John Rushby, Sam Owre, Ed Clarke, and Steve German. IEEE floating-point standard, and its kernel consists of a fixed-point iteration. The verification of this kernel was performed in the interactive theorem proving system PVS <ref> [ORSvH95] </ref>. <p> paths. 3 An Overview of PVS The PVS system combines an expressive specification language with a productive, interactive proof checker that has a reasonable amount of theorem proving capabilities, and has been used for reasoning in domains as diverse as microprocessor verification, protocol verification, and algorithm and architectures concerning fault-tolerance <ref> [ORSvH95] </ref>. The PVS specification language builds on classical typed higher-order logic with the usual base types, function type constructor, dependent types, and abstract data types. A distinctive feature of PVS are predicate subtypes fx:A | P (x)g.
Reference: [Par95] <author> D. L. Parnas. </author> <title> Using mathematical models in the inspection of critical softwa re. </title> <editor> In Michael G. Hinchey and Jonathan P. Bowen, editors, </editor> <booktitle> Ap 11 plications of Formal Methods, International Series in Computer Science, chapter 2, </booktitle> <pages> pages 17-31. </pages> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: The formalization of the resulting table q (D, P) (shown in Appendix A) uses the TABLE construct of the PVS specification language [ORS95]. This construct was added to the PVS specification language in order to provide visually appealing two-dimensional tabular specifications in the manner advocated by Parnas and others <ref> [Par95] </ref>. It proved adequate to express the look-up table of this SRT circuit in a concise and perspicuous way. In particular, blank entries in the look-up table cause the type-checker to generate TCCs which ensure that viable arguments D, P never point to such a blank entry.
Reference: [Pra95] <author> V. Pratt. </author> <title> Anatomy of the Pentium Bug. </title> <editor> In P.D. Mosses, M. Nielsen, and M.I. Schwartzbach, editors, TAPSOFT'95: </editor> <booktitle> Theory and Practice of Software Development, number 915 in Lecture Notes in Computer Science, </booktitle> <pages> pages 97-107. </pages> <publisher> Springer Verlag, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: Even though the theory of SRT division has been extensively studied [Atk68], the design of dividers still remains a serious challenge [OF94], and it is easy to make mistakes in its implementation|as was illustrated by the much publicized FDIV error in the Intel Pentium chip. As Pratt <ref> [Pra95] </ref> points in his analysis, it is unlikely testing alone would have caught that error as it was due to five wrong entries in the quotient look-up table in a region of the table that was thought to be unreachable.
Reference: [Rob58] <author> J.E. Robertson. </author> <title> A new Class of Digital Division Methods. </title> <journal> In IRE Trans. on Electron. Computers, </journal> <volume> volume EC-7, </volume> <pages> pages 218-222, </pages> <year> 1958. </year>
Reference-contexts: PVS has an LCF-like strategy language for combining inference steps into more complicated proof strategies. 4 SRT Division SRT dividers <ref> [McS61, Rob58, Toc58] </ref> speed up nonrestoring division and are widely used in high-speed floating point units. The quotient is represented in radix-r form and one digit of it is calculated in each iteration.
Reference: [Tay81] <author> G.S. Taylor. </author> <title> Compatible Hardware For Division and Square Root. </title> <booktitle> In Proceedings of the 5th Symposium on Computer Arithmetic, </booktitle> <pages> pages 127-134. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1981. </year>
Reference-contexts: Hence, formal verification can play an essential role in the design and debugging of arithmetic circuits. In this paper, we present a mechanized verification of a general SRT division algorithm that can be used for performing floating-point divisions and an implementation of it based on the circuit given in <ref> [Tay81] </ref>. This circuit implements the ? Supported in part by ARPA under Arpa Order A721, by NASA under contract NAS1-20334, and by NSF Grant No. CCR-930044. We gratefully acknowledge the valuable guidance and help given by John Rushby, Sam Owre, Ed Clarke, and Steve German. <p> In the second step, we specify a data path circuit (bit-vector signals over time) to compute the partial remainder and define a specific look-up table, both of which are based on the implementation given in <ref> [Tay81] </ref>. We then show that the data path circuit and the look-up table meet the constraints characterized in step one. Both steps of the verification are performed for arbitrary, but finite precision, which appears as a parameter to the specification. <p> Whenever these conditions hold, theorem invariant in 6 , and consequently theorem convergence in 2 , is applicable. 5 Modeling The Data Path Now, the data path of an SRT division circuit with r = 4 and a = 2 as described by Taylor <ref> [Tay81] </ref> is specified and proven to be correct by applying the general SRT theory developed in Section 4. <p> The legitimacy constraint lookup legitimate? (see 8 ) on quotient look-up tables permits different implementations, and Taylor <ref> [Tay81] </ref> develops a particularly compact one. This table computes the next quotient digit from the truncation D:bvec [3] of the divisor to the three leading bits and the estimation P:bvec [7] of the next partial remainder. <p> This case study also suggests some improvements to the implementation of PVS. The correctness proof of the table implementation in Section 6 takes 3 2 Even though the original design of Taylor's look-up table in <ref> [Tay81] </ref> proved to be correct, we still managed to accidentally inject errors in the initial PVS transcrip tions. 10 hours. This is unreasonably slow, since the proof basically involves small case analysis followed by the evaluation of ground predicates.
Reference: [Toc58] <author> K.D. Tochter. </author> <title> Techniques of Multiplication and Division for Automatic Bin ary Computers. In Quart. </title> <journal> J. Mech. Appl. Match, </journal> <volume> volume Part 3, </volume> <pages> pages 364-384, </pages> <year> 1958. </year>
Reference-contexts: PVS has an LCF-like strategy language for combining inference steps into more complicated proof strategies. 4 SRT Division SRT dividers <ref> [McS61, Rob58, Toc58] </ref> speed up nonrestoring division and are widely used in high-speed floating point units. The quotient is represented in radix-r form and one digit of it is calculated in each iteration.
Reference: [VCM94] <author> D. Verkest, L. Claesen, and H. De Man. </author> <title> A Proof of the Nonrestoring Division Algorithm and its Implementation on an ALU. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 3 </volume> <pages> 5-31, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The first step of the verification is applicable to arbitrary radixes, while the second step assumes a radix-4 implementation, since it uses a look-up table for radix-4. 2 Related Work. Claesen et al. <ref> [VCM94] </ref> and Leeser and O'Leary [LO95] have used theorem provers to verify a non-restoring divider and a radix-2 subtractive square root algorithm, respectively.
References-found: 19

