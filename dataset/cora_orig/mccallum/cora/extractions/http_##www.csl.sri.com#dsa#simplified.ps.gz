URL: http://www.csl.sri.com/dsa/simplified.ps.gz
Refering-URL: http://www.csl.sri.com/dsa/sadl-main.html
Root-URL: 
Title: A SIMPLIFIED METHOD FOR ESTABLISHING THE CORRECTNESS OF ARCHITECTURAL REFINEMENTS  
Author: R. A. RIEMENSCHNEIDER 
Abstract: My colleagues and I developed an approach to proving correctness of architectural refinement hierarchies that depended upon treating architectural specifications as axiomatizations of first-order theories. This paper explores the consequences of an alternative approach to formalizing the content of specifications in logic. A specification is treated as a depiction of a particular relational structure, which is intended to be a mathematical model of the system being specified. As a result, specifications now correspond to much stronger (in fact, complete) theories. Although the criterion for refinement correctness | that the theory corresponding to the higher-level specification can be faithfully interpreted in the theory corresponding to the lower-level specification | remains the same, the technique for proving correctness is quite different: proving that a mapping is a theory interpretation is more complex, though still largely a matter of calculation, but faithfulness is trivially guaranteed. The net result is a substantial simplification of correctness proofs, as a comparison of proofs of a simple refinement pattern illustrates. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Baldwin, </author> <title> Definable second-order quantifiers, Model-theoretic logics, </title> <editor> J. Barwise and S. Feferman (eds.), </editor> <publisher> Springer, </publisher> <year> 1985. </year>
Reference: 2. <author> H.-D. Ebbinghaus, J. Flum, and W. Thomas, </author> <note> Mathematical logic, Springer, second edition, </note> <year> 1994. </year>
Reference-contexts: The pattern of interpreting one structure in another ([4], pp. 212), except we exploit intuitions about what a specification says to motivate the necessity of faithful interpretation. By focussing on isomorphism rather than finite isomorphism, the usual algebraic characterization of elementary equivalence <ref> [2] </ref>, the dependence of this approach on a particular choice of logic is largely eliminated. However, the account below will be restricted to first-order theories of structures, to enable more direct comparison of the new approach and the original. 6 R. A.
Reference: 3. <author> H. B. Enderton, </author> <title> A mathematical introduction to logic, </title> <publisher> Academic Press, </publisher> <year> 1972. </year>
Reference: 4. <author> W. Hodges, </author> <title> Model theory, </title> <address> Cambridge, </address> <year> 1993. </year>
Reference: 5. <author> M. Moriconi, X. Quan, and R. A. Riemenschneider, </author> <title> Correct architecture refinement, </title> <journal> IEEE transactions on software engineering, </journal> <volume> vol. 21 (1995), </volume> <pages> pp. 356-372. </pages> <note> (Available on the web at URL &lt;http://www.csl.sri.com/sadl/sadl-intro.ps.gz&gt;.) </note>
Reference-contexts: 1. Two Approachs to Establishing Correctness In a previous paper <ref> [5] </ref>, my colleagues and I presented an approach to proving correctness of architectural refinement patterns. <p> by the identifier mapping associated with this particular refinement step. 8 If this basis mapping is extended to an interpretation of formulas in the language of D in the standard way, 9 an interpretation of the language of D in the theory of M results. 8 See our previous paper <ref> [5] </ref> for a more detailed account of style and identifier mappings. 9 See Appendix. 8 R. A. <p> However the new approach can be used to verify a set of simple, primitive refinement patterns that generate the refinements in a multi-level formal representation of X/Open DTP in the Sadl language [6], as well as all the refinement patterns of our previous paper <ref> [5] </ref>.
Reference: 6. <author> M. Moriconi and R. A. Riemenschneider, </author> <title> Introduction to SADL 1.0, </title> <institution> SRI Computer Science Laboratory Technical Report SRI-CSL-97-01, </institution> <month> March </month> <year> 1997. </year> <note> (Available on the web at URL &lt;http://www.csl.sri.com/sadl/tse95.ps.gz&gt;.) </note>
Reference-contexts: However the new approach can be used to verify a set of simple, primitive refinement patterns that generate the refinements in a multi-level formal representation of X/Open DTP in the Sadl language <ref> [6] </ref>, as well as all the refinement patterns of our previous paper [5].
Reference: 7. <author> R. A. Riemenschneider, </author> <title> Correct transformation rules for incremental development of architecture hierarchies, </title> <note> SRI Computer Science Laboratory Technical Report SRI-CSL-97 ??, ?? 1997. (Available on the web at URL &lt;http://www.csl.sri.com/sadl/incremental.ps.gz&gt;.) </note>
Reference: 8. <author> J. R. Shoenfield, </author> <title> Mathematical logic, </title> <publisher> Addison-Wesley, </publisher> <year> 1967. </year>
Reference: 9. <author> X/Open Company, Ltd., </author> <title> Distributed transaction processing: reference model, </title> <type> version 2, </type> <institution> X/Open, </institution> <month> November </month> <year> 1993. </year> <note> 14 R. </note> <editor> A. </editor> <publisher> RIEMENSCHNEIDER </publisher>
Reference-contexts: It should also be noted that this new approach cannot be directly applied to all conceivable refinement patterns. Some architectural descriptions cannot naturally be thought of as specifying a single architectural structure. For example, there are standard architectures, such as the X/Open Distributed Transaction Processing (DTP) architecture <ref> [9] </ref> that specify how various types of components are composed, but do not specify the number of components of each type. In such cases, it is much more natural to think of the standard as specifying a class of structures.
References-found: 9

