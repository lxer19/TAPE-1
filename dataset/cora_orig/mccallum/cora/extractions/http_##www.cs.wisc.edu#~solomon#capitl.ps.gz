URL: http://www.cs.wisc.edu/~solomon/capitl.ps.gz
Refering-URL: http://www.cs.wisc.edu/~solomon/solomon.html
Root-URL: 
Email: (adams@grammatech.com)  (solomon@cs.wisc.edu)  
Phone: 2  
Title: An Overview of the CAPITL Software Development Environment  
Author: Paul Adams and Marvin Solomon 
Address: Ithaca, NY, USA  1210 W. Dayton St., Madison, WI 53706-1685, USA  
Affiliation: 1 Grammatech, Inc.,  Computer Sciences Department,  
Abstract: The CAPITL programming environment is comprised of a shared, object-oriented, versioned database, an embedded logic-based data-manipulation language, and a graphical user interface. With each software object the database stores a rich set of attributes that describe its syntax, intended semantics, and relationship to other objects. CAPITL is implemented in POL, a data model and deductive query language with elements of persistent, object-oriented and logic-based programming languages. POL is implemented in and tightly coupled with C++. A request for a derived object consists of a partial description of its attributes. A planner written in POL searches the database for tools and sources that can be combined to create an object meeting the description. Since tools are stored in the database like other objects, plans that create tools as well as intermediate inputs are possible. A builder, also written in POL, executes plans to materialize software products. The builder verifies that existing objects are current, minimally re-applying tools as sources, tools, or system descriptions change. After an overview of the database and the POL programming system, we outline CAPITL's logic-based approach to system modelling, illustrating it with two examples. We conclude with a status report and an outline of future directions.
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Proceedings of the 14th International Conference on Software Engineering. IEEE Computer Society Press, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Both of these areas have the potential to reduce the cost of develop software and increase the reliability of the final product. Reuse. Considerable attention is now being given to reusing software in order to lower the cost of writing new software <ref> [1, 2] </ref>. Any reuse system must provide a way of storing and locating components. CAPITL would be a good foundation for such environments because of its rich data model, flexible policies, and extendible attributes. In addition Congress is well suited as an ad-hoc query language for locating components for reuse.
Reference: 2. <institution> Proceedings of the 15th International Conference on Software Engineering. IEEE Computer Society Press, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Both of these areas have the potential to reduce the cost of develop software and increase the reliability of the final product. Reuse. Considerable attention is now being given to reusing software in order to lower the cost of writing new software <ref> [1, 2] </ref>. Any reuse system must provide a way of storing and locating components. CAPITL would be a good foundation for such environments because of its rich data model, flexible policies, and extendible attributes. In addition Congress is well suited as an ad-hoc query language for locating components for reuse.
Reference: 3. <author> Paul Adams and Marvin Solomon. POL: </author> <title> Persistent objects with logic. </title> <type> Technical Report 1158, </type> <institution> University of Wisconsin|Madison, Computer Sciences Department, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: CAPITL's browser can navigate the version history of the database and the links between objects. It also provides facilities for the display and manual update of objects. Most of the features of CAPITL are implemented in POL <ref> [3] </ref>, a data model and deductive query language synthesized from elements of persistent, object-oriented, and logic-based programming languages. POL is tightly integrated with the database (all database objects are POL terms) and with a general-purpose host language (C++). <p> Class Integer is a subclass of Term with an IntVal () method that returns its integer value, and so on. Documentation for this interface is currently being written <ref> [3] </ref>. Browser. An interactive browsing interface has been written on top of the X Window System using the InterViews [34] toolkit.
Reference: 4. <author> Hassan At-Kaci. </author> <title> An Algebraic Semantics Approach to the Effective Resolution of Type Equations, </title> <booktitle> pages 293-351. Number 45 in Theoretical Computer Science. </booktitle> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1986. </year>
Reference-contexts: Feature Logic. The NORA [55] system describes components and configurations using feature logic. Feature logic has as its data model terms which are similar to POL terms (both data models are derived from work by At-Kaci <ref> [4] </ref>). The operations of feature logic are selection, complement, intersection, and union of feature terms. Unification in full feature logic is not as easy as in POL since it includes both negation and disjunction.
Reference: 5. <author> Hassan At-Kaci and Roger Nasr. </author> <title> LOGIN: a logic programming language with built-in inheritance. </title> <journal> Journal of Logic Programming, </journal> <pages> pages 181-215, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Since Congress is implemented as a library of classes, any C++ program can use Congress as a "higher level" alternative to or enhancement of the raw C++ term interface. As a logic-programming language, Congress is a dialect of LOGIN <ref> [5] </ref>, an extension of Prolog that supports cyclic terms. It provides transparent persistence, and has an identity-based rather than value-based semantics. The following paragraphs briefly describe the syntax and semantics of Congress. The reader who is familiar with logic programming may skim this section. <p> The heart of this process is the definition of "matching" between terms, called unification 5 Congress uses a variant of unification that supports cyclic terms <ref> [5] </ref>. The goal of unification is to determine if two terms are isomorphic, or can be made isomorphic by substituting terms for variables. Two terms unify if their roots match (have the same functor) and corresponding successors (recursively) unify. <p> For example, the Congress expression employee (age=&gt;25,salary=&gt;30) is less confusing than the corresponding 6 A functor that contains non-alphanumeric characters or starts with an upper-case letter must be quoted. 7 It also has a rather subtle effect on the definition of unification. See the LOGIN paper <ref> [5] </ref> for details. Prolog expression employee (25,30). Second, while Prolog terms are trees (ex-cept for identification of multiple occurrences of the same variable), Congress allows arbitrary graphs, including cycles. Variables serve two purposes in Pro-log: They represent "wild cards" for pattern matching and they indicate sharing.
Reference: 6. <author> P. Asirelli and P. Inverardi. </author> <title> Enhancing configuration facilities in software development: A logic approach. </title> <booktitle> In Proceedings of ESEC '87 : 1st European Software Engineering Conference, volume 289 of Lecture Notes in Computer Science, </booktitle> <pages> pages 55-63. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1987. </year>
Reference-contexts: Using this editor, programmers interactively pick values for feature terms. The editor supports incremental selection of features and dynamic sensitivity to existing features. In the future they plan to implement a build tool based on feature logic. Deductive Databases. Asirelli and Inverardi <ref> [6] </ref> describe how a deductive database could be used to assist configuration management and software construction. Their system (EDBLOG) is a deductive database consisting of three elements: facts, rules and integrity constraints.
Reference: 7. <author> Atria Software, Natick,MA. </author> <title> ClearCase Concepts Manual, document number 3000-002-a edition, </title> <year> 1992. </year>
Reference-contexts: Version selection rules are used to bind object references in the system model to specific versions in the file system. DSEE supports many other features needed in a distributed environment such as transparent access to remote files. ClearCase. ClearCase <ref> [7] </ref> is a new product from the original DSEE developers that provides many of the same features on a variety of Unix platforms. ClearCase tightly integrates build management and version selection. As with DSEE, source components are versioned and version selection is accomplished with rules.
Reference: 8. <author> N. Belkhatir, J. Estublier, and W. L. Melo. </author> <title> Adele 2: A support to large software development process. </title> <editor> In M. Downson, editor, </editor> <booktitle> Proceedings of the 1st International Conference on Software Process, </booktitle> <pages> pages 159-170, </pages> <address> Redondo Beach, CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Constraints are quantifier-free boolean expressions whose domain is the attribute values. System architects describe systems using constraints and Adele uses them to infer consistent configurations, including the dependency relation between components. Recent work has extended Adele to include process support based on events and triggers <ref> [8] </ref>. SMILE/Marvel. SMILE and Marvel [23, 24, 25] are two rule based environments that emphasize support for the edit/debug/build cycle. Their goal is to provide a "fileless" environment for programmers by making the environment responsible for invisibly maintaining derived objects.
Reference: 9. <author> Mark R. Brown and John R. Ellis. </author> <title> Bridges: Tools to extend the vesta configuration management system. </title> <type> Technical report, </type> <institution> Digital SRC, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Derived objects are shared between different developers automatically. ClearCase supports parallel builds using a network of workstations. The repository can be replicated and distributed; changes made to each site are merged on a periodic basis. Vesta. The Vesta system <ref> [33, 13, 21, 9] </ref> developed at DEC SRC is a reposi-tory and SCM language that uses a functional model. All source components are immutable. Changes are made using a tool that builds a new configuration object from a previous version by replacing new or modified components.
Reference: 10. <author> Todd Brunhoff and Jim Fulton. </author> <title> Imake - c preprocessor interface to the make utility. Technical report, Unix Programmer's Manual, X Window System, </title> <note> Version 11, Release 5. </note>
Reference-contexts: The greatest enhancement that Dmake provides is that it saves the state of a Makefile (e.g. macro expansions, tools used, tool flags, etc.) with each target so it can detect out-of-date targets due to changes to a Makefile. Imake. Imake <ref> [10] </ref> is a tool for generating Makefiles. It compiles application dependency information along with architecture descriptions to create Makefiles, which are then interpreted by standard Make. The C preprocessor macro language is used to describe systems. Changes to a description require regenerating the Makefiles.
Reference: 11. <author> Michael Carey, David DeWitt, Goetz Graefe, David Haight, Joel Richardson, Daniel Schuh, Eugene Shekita, and Scott Vandenberg. </author> <title> The EXODUS extensible DBMS project: an overview. </title> <editor> In Stan Zdonik and David Maier, editors, </editor> <booktitle> Readings in Object-Oriented Databases. </booktitle> <address> Morgan-Kaufman, </address> <year> 1990. </year>
Reference-contexts: POL is tightly integrated with the database (all database objects are POL terms) and with a general-purpose host language (C++). The database uses the Exodus toolkit <ref> [11] </ref> to provide low-level concurrency control, error recovery, and network access. <p> C++ subclass derivation is used to add additional behavior and restrictions to classes of internal nodes. We shall return to this point in Section 3. 2.3 Exodus Exodus <ref> [11] </ref> is a toolkit for creating custom database systems. POL uses two components of Exodus, a low-level storage subsystem and a persistent programming language.
Reference: 12. <author> CaseWare, Inc, </author> <title> Irvine, CA. Introduction to CaseWare/CM, part number ic-031-010 edition, </title> <year> 1993. </year>
Reference-contexts: Derived objects are treated as accelerators for functional expressions and are cached using an algorithm that generates an almost perfect hash of an arbitrary stream of bytes. The functional system models and component immutability are borrowed from Cedar/SML [29]. CaseWare. CaseWare <ref> [12] </ref> is a commercial SCM system that manages sources, documentation, and derived information. It uses an object-oriented repository that supports extensible attributes. Software systems consist of component hierarchies and CaseWare has graphical tools to create and modify them.
Reference: 13. <author> Sheng-Yang Chiu and Roy Levin. </author> <title> The vesta repository: A file system extension for software development. </title> <type> Technical report, </type> <institution> Digital SRC, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Derived objects are shared between different developers automatically. ClearCase supports parallel builds using a network of workstations. The repository can be replicated and distributed; changes made to each site are merged on a periodic basis. Vesta. The Vesta system <ref> [33, 13, 21, 9] </ref> developed at DEC SRC is a reposi-tory and SCM language that uses a functional model. All source components are immutable. Changes are made using a tool that builds a new configuration object from a previous version by replacing new or modified components.
Reference: 14. <author> Geoffrey Clemm and Leon Osterweil. </author> <title> A mechanism for environment integration. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(1) </volume> <pages> 1-25, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: The C preprocessor macro language is used to describe systems. Changes to a description require regenerating the Makefiles. Careful use of directories is needed to avoid inconsistent systems (e.g. mixing sparc and mips object files). Odin. Odin <ref> [14] </ref> is a system for integrating existing tools into a single environ-ment. Tools are described declaratively and then linked into a derivation graph that summarizes all the "type correct" derivations possible using the current set of tools.
Reference: 15. <author> David J. DeWitt, Michael J. Franklin, Nancy E. Hall, Mark L. McAuliffe, Jef-frey F. Naughton, Daniel T. Schuh, Marvin H. Solomon, C. K. Tan, Odysseas G. Tsatalos, Seth J. White, and Michael J. Zwilling. </author> <title> Shoring up persistent applications. </title> <booktitle> In SIGMOD, </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The main source of the problem appears to be inappropriate timeouts and buffering strategies in the NFS client code in the Unix kernel. A successor to Exodus, called Shore <ref> [15] </ref>, is being developed by a separate project; one of the goals of Shore is to provide a facility similar to EFS with higher performance. 7.2 User Interface Several enhancements to the user interface are needed to make CAPITL usable by system architects and developers.
Reference: 16. <author> James R. Driscol, Neil Sarnak, Daniel D. Sleator, and Robert E. Tarjan. </author> <title> Making data structures persistent. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 38(1) </volume> <pages> 86-124, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: In this way POL differs from "value-based" Prolog and relational databases, and more closely resembles so-called "object-oriented" databases. POL supports multiple versions of the term space called worlds, and uses an algorithm devised by Driscol et. al. <ref> [16] </ref> that supports efficient "checkpointing" of the entire term space. POL has operations to save the current term space as a world, and to reset its state to any previously saved world.
Reference: 17. <author> J. Estublier. </author> <title> A configuration manager: the ADELE database of programs. </title> <booktitle> In Proceedings of the Workshop on Software Engineering Environments for Programming-in-the-Large, </booktitle> <pages> pages 140-147, </pages> <address> Harwichport, MA, </address> <month> June </month> <year> 1985. </year> <institution> GTE Laboratories. </institution>
Reference-contexts: Jason uses a powerful constraint language (full first-order predicate calculus) and compiles the given constraints into procedures that check the consistency of configurations. A rigorous algebraic model provides Ja-son with a strong theoretical foundation not present in most other systems. Adele/Nomade. Adele <ref> [17, 18] </ref> (and its successor Nomade [19]) is a constraint--based environment for SCM. An attributed filesystem is used to store information about components. Constraints are quantifier-free boolean expressions whose domain is the attribute values.
Reference: 18. <author> J. Estublier, S. Ghoul, and S. Krakowiak. </author> <title> Preliminary experience with a configuration control system. </title> <booktitle> In Proceedings of the SIGSOFT/SIGPLAN Software Eng. Symposium on Practical Software Development Environments, </booktitle> <pages> pages 149-156. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1984. </year>
Reference-contexts: Jason uses a powerful constraint language (full first-order predicate calculus) and compiles the given constraints into procedures that check the consistency of configurations. A rigorous algebraic model provides Ja-son with a strong theoretical foundation not present in most other systems. Adele/Nomade. Adele <ref> [17, 18] </ref> (and its successor Nomade [19]) is a constraint--based environment for SCM. An attributed filesystem is used to store information about components. Constraints are quantifier-free boolean expressions whose domain is the attribute values.
Reference: 19. <author> Jacky Estublier. </author> <title> Configuration management: the notion and the tools. </title> <booktitle> In Proceedings of the International Workshop on Software Version and Configuration Control, </booktitle> <pages> pages 38-61, </pages> <address> Grassau, </address> <publisher> W. </publisher> <address> Germany, </address> <month> January </month> <year> 1988. </year> <title> B.G. </title> <publisher> Teubner, Stuttgart, W. </publisher> <address> Germany. </address>
Reference-contexts: Jason uses a powerful constraint language (full first-order predicate calculus) and compiles the given constraints into procedures that check the consistency of configurations. A rigorous algebraic model provides Ja-son with a strong theoretical foundation not present in most other systems. Adele/Nomade. Adele [17, 18] (and its successor Nomade <ref> [19] </ref>) is a constraint--based environment for SCM. An attributed filesystem is used to store information about components. Constraints are quantifier-free boolean expressions whose domain is the attribute values. System architects describe systems using constraints and Adele uses them to infer consistent configurations, including the dependency relation between components.
Reference: 20. <author> Stuart I. Feldman. </author> <title> Make|a program for maintaining computer programs. </title> <journal> Software|Practice and Experience, </journal> <volume> 9(4) </volume> <pages> 255-265, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: The related work in this section is organized into three sections: build tools, environments that integrate building, versioning, and other aspects of software development, and work that uses logic as the basis for SCM or building. 6.1 Build Tools Many successors to Make <ref> [20] </ref> have been built that keep the basic idea of a Makefile for describing systems. Each of the newer systems addresses deficiencies in Make and adds new features that make it easier to use. There are many variations of these so-called "super makes" and we describe only a sample here.
Reference: 21. <author> Christine B. Hanna and Roy Levin. </author> <title> The vesta language for configuration management. </title> <type> Technical report, </type> <institution> Digital SRC, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Derived objects are shared between different developers automatically. ClearCase supports parallel builds using a network of workstations. The repository can be replicated and distributed; changes made to each site are merged on a periodic basis. Vesta. The Vesta system <ref> [33, 13, 21, 9] </ref> developed at DEC SRC is a reposi-tory and SCM language that uses a functional model. All source components are immutable. Changes are made using a tool that builds a new configuration object from a previous version by replacing new or modified components.
Reference: 22. <author> Stephen C. Johnson. </author> <title> YACC|yet another compiler compiler. C. S. </title> <type> Technical Report 32, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <year> 1975. </year>
Reference-contexts: Such an analyzer might be a component of a compiler or other larger system. We assume that four source objects are available: a Lex [32] specification of tokens, a YACC <ref> [22] </ref> specification of a grammar, a driver program written in C, and a common file of declarations included by all three sources. These objects are shown in Figure 3. Common is the file of common declarations.
Reference: 23. <author> Gail Kaiser and Peter H. Feiler. </author> <title> Granularity issues in a knowledge-based programming environment. </title> <booktitle> In 2nd Kansas Conference on Knowledge-Based Software Development, </booktitle> <address> Manhattan, KA, </address> <month> October </month> <year> 1986. </year>
Reference-contexts: System architects describe systems using constraints and Adele uses them to infer consistent configurations, including the dependency relation between components. Recent work has extended Adele to include process support based on events and triggers [8]. SMILE/Marvel. SMILE and Marvel <ref> [23, 24, 25] </ref> are two rule based environments that emphasize support for the edit/debug/build cycle. Their goal is to provide a "fileless" environment for programmers by making the environment responsible for invisibly maintaining derived objects.
Reference: 24. <author> Gail Kaiser and Peter H. Feiler. SMILE/MARVEL: </author> <title> Two approaches to knowledge-based programming environments. </title> <type> Tech. Report CU-CS-227-86, </type> <institution> Department of Computer Science, Columbia University, </institution> <address> New York, NY 10027, </address> <month> October </month> <year> 1986. </year>
Reference-contexts: System architects describe systems using constraints and Adele uses them to infer consistent configurations, including the dependency relation between components. Recent work has extended Adele to include process support based on events and triggers [8]. SMILE/Marvel. SMILE and Marvel <ref> [23, 24, 25] </ref> are two rule based environments that emphasize support for the edit/debug/build cycle. Their goal is to provide a "fileless" environment for programmers by making the environment responsible for invisibly maintaining derived objects.
Reference: 25. <author> Gail Kaiser and Peter H. Feiler. </author> <title> An architecture for intelligent assistance in software development. </title> <booktitle> In Proceedings of the Ninth International Conference on Software Engineering, </booktitle> <pages> pages 80-88, </pages> <address> Monterey, CA, March 1987. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: System architects describe systems using constraints and Adele uses them to infer consistent configurations, including the dependency relation between components. Recent work has extended Adele to include process support based on events and triggers [8]. SMILE/Marvel. SMILE and Marvel <ref> [23, 24, 25] </ref> are two rule based environments that emphasize support for the edit/debug/build cycle. Their goal is to provide a "fileless" environment for programmers by making the environment responsible for invisibly maintaining derived objects.
Reference: 26. <author> Gail E. Kaiser. </author> <title> A rule-based process server component for constructing rule-based development environments. </title> <booktitle> In Proceedings of the 7th International Software Process Workshop, </booktitle> <pages> pages 76-78, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Their rules use Hoare-style pre and post conditions to trigger actions; they can be used for either forward-chaining or backward-chaining inferences. Forward-chaining corresponds to opportunistic computation and backward-chaining corresponds to the method employed by traditional build tools such as Make. Recent work <ref> [26] </ref> has extended Marvel to include rule-based process support. 6.3 Logic-based Approaches The similarity between the rules and dependency statements in a makefile and a logic programming language has been noted by others.
Reference: 27. <author> Thilo Kielmann. </author> <title> Using prolog for software system maintenance. </title> <booktitle> In Proceedings of the First International Conference on the Practical Application of Prolog, volume 1, </booktitle> <address> London, UK, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Concepts like the "history of a component" are defined by rules and enforced by integrity constraints. Their design only covers building; they did not extend their ideas to configuration or version management. Prolog-based Make. PROM <ref> [27] </ref> is a Make tool implemented in Prolog. It defines a small language for writing the equivalent of makefiles. Prolog terms are used to represent information, so the data model is an improvement over Make's character string model. In addition logical variables can be used to implement implicit derivation rules.
Reference: 28. <author> Kevin Knight. </author> <title> Unification: a multidisciplinary survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(1) </volume> <pages> 93-124, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: As mentioned in x 2.2, some nodes are designated as variables; a variable matches any node. A side effect of a 5 Background material on unification can be found in many logic programming texts and in an excellent survey by Knight <ref> [28] </ref>. successful unification is an equivalence relation that records which nodes were matched. The evaluation of a call adds a copy of a clause to the term space and identifies nodes matched as a result of unifying its head with the query.
Reference: 29. <author> Butler W. Lampson and Eric E. Schmidt. </author> <title> Organizing software in a distributed environment. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 18(6) </volume> <pages> 1-13, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: Derived objects are treated as accelerators for functional expressions and are cached using an algorithm that generates an almost perfect hash of an arbitrary stream of bytes. The functional system models and component immutability are borrowed from Cedar/SML <ref> [29] </ref>. CaseWare. CaseWare [12] is a commercial SCM system that manages sources, documentation, and derived information. It uses an object-oriented repository that supports extensible attributes. Software systems consist of component hierarchies and CaseWare has graphical tools to create and modify them.
Reference: 30. <author> David B. Leblang and Robert P. Chase, Jr. </author> <title> Computer-aided software engineering in a distributed workstation environment. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 19(5) </volume> <pages> 104-112, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: This meta-data is used for configuration management, version selection, and history management. All of the following systems provide good support for building; they differ primarily in how systems are specified, how version selection is accomplished, and what kinds of consistency are guaranteed. DSEE. DSEE <ref> [30, 31] </ref> is a commercial environment that manages software in a network of distributed (Apollo) workstations. It supports a notion of "time travel" by compactly storing versions of source files and providing a tool, the History Manager, that associates symbolic attributes with particular versions.
Reference: 31. <author> David B. Leblang and Gordon D. McLean, Jr. </author> <title> Configuration management for large-scale software development efforts. </title> <booktitle> In Proceedings of the Workshop on Software Engineering Environments for Programming-in-the-Large, </booktitle> <pages> pages 122-127, </pages> <address> Harwichport, MA, </address> <month> June </month> <year> 1985. </year> <institution> GTE Laboratories. </institution>
Reference-contexts: This meta-data is used for configuration management, version selection, and history management. All of the following systems provide good support for building; they differ primarily in how systems are specified, how version selection is accomplished, and what kinds of consistency are guaranteed. DSEE. DSEE <ref> [30, 31] </ref> is a commercial environment that manages software in a network of distributed (Apollo) workstations. It supports a notion of "time travel" by compactly storing versions of source files and providing a tool, the History Manager, that associates symbolic attributes with particular versions.
Reference: 32. <author> M.E. Lesk. </author> <title> Lex|a lexical analyzer generator. C. S. </title> <type> Technical Report 39, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> October </month> <year> 1975. </year>
Reference-contexts: Such an analyzer might be a component of a compiler or other larger system. We assume that four source objects are available: a Lex <ref> [32] </ref> specification of tokens, a YACC [22] specification of a grammar, a driver program written in C, and a common file of declarations included by all three sources. These objects are shown in Figure 3. Common is the file of common declarations.
Reference: 33. <author> Roy Levin and Paul R. McJones. </author> <title> The vesta approach to precise configuration of large software systems. </title> <type> Technical report, </type> <institution> Digital SRC, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Derived objects are shared between different developers automatically. ClearCase supports parallel builds using a network of workstations. The repository can be replicated and distributed; changes made to each site are merged on a periodic basis. Vesta. The Vesta system <ref> [33, 13, 21, 9] </ref> developed at DEC SRC is a reposi-tory and SCM language that uses a functional model. All source components are immutable. Changes are made using a tool that builds a new configuration object from a previous version by replacing new or modified components.
Reference: 34. <author> Mark A. Linton, John M. Vlissides, and Paul R. Calder. </author> <title> Composing user interfaces with interviews. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 8-24, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: A compatibility feature allows existing Unix tools to manipulate CAPITL objects as if they were Unix files. The database is accessible via an interactive browser/editor based on the X Window System [45] and the InterViews graphical toolkit <ref> [34] </ref>. CAPITL's browser can navigate the version history of the database and the links between objects. It also provides facilities for the display and manual update of objects. <p> Class Integer is a subclass of Term with an IntVal () method that returns its integer value, and so on. Documentation for this interface is currently being written [3]. Browser. An interactive browsing interface has been written on top of the X Window System using the InterViews <ref> [34] </ref> toolkit. The browser supports visiting any object or directory in the object-base and uses type-sensitive displays to depict the contents attribute of an object; other attributes are displayed using the Congress expression language (x 2.4).
Reference: 35. <author> Axel Mahler and Andreas Lampen. </author> <title> Shape|a software configuration management tool. </title> <booktitle> In Proceedings of the International Workshop on Software Version and Configuration Control, </booktitle> <address> Grassau, </address> <publisher> W. </publisher> <address> Germany, </address> <month> January </month> <year> 1988. </year> <title> B.G. </title> <publisher> Teubner, Stuttgart, W. </publisher> <address> Germany. </address>
Reference-contexts: The environment performs transparent builds and generates Makefiles on demand to support incremental building. Each object is versioned and rules, similar to DSEE, perform version selection of the components in an system. Shape. Shape <ref> [35, 36] </ref> integrates Make with a version control system similar to RCS. Shape is backwards compatible with Make and adds version selection rules comparable to those in DSEE.
Reference: 36. <author> Axel Mahler and Andreas Lampen. </author> <title> An integrated toolset for engineering software configurations. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, number (24)2 in ACM SIGPLAN Notices, </booktitle> <pages> pages 191-200, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: The environment performs transparent builds and generates Makefiles on demand to support incremental building. Each object is versioned and rules, similar to DSEE, perform version selection of the components in an system. Shape. Shape <ref> [35, 36] </ref> integrates Make with a version control system similar to RCS. Shape is backwards compatible with Make and adds version selection rules comparable to those in DSEE.
Reference: 37. <author> John K. Ousterhout. </author> <title> Tcl: an embeddable command language. </title> <booktitle> In 1990 Winter USENIX Conference Proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: The expression language of Congress uses the functor "@" for the first purpose and tags for the second. 2.5 Embedding The coupling between C++ and Congress is a two-way embedding: Each language appears to be an embedded sub-language <ref> [37] </ref> of the other. Each language retains its own style. The embedding does not alter the syntax or semantics of either language.
Reference: 38. <author> John K. Ousterhout. </author> <title> Tcl: An embeddable command language. </title> <booktitle> 1990 Winter USENIX Conference Proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: A CAPITL object is self-describing. Descriptions of its representation, behavior, and relationships are contained in its associated attributes. This description could be extended to include a graphical view as well. Interfaces based on embedded interpreters such as TCL/TK <ref> [38, 39] </ref> or a binding of Congress with X windows intrinsics could be used to implement this extension. 7.3 Additional Functionality The user interface enhancements suggested above are all fairly straightforward. Other usability enhancements require more fundamental research. Version Management.
Reference: 39. <author> John K. Ousterhout. </author> <title> An x11 toolkit based on the tcl language. </title> <booktitle> 1991 Winter USENIX Conference Proceedings, </booktitle> <year> 1991. </year>
Reference-contexts: A CAPITL object is self-describing. Descriptions of its representation, behavior, and relationships are contained in its associated attributes. This description could be extended to include a graphical view as well. Interfaces based on embedded interpreters such as TCL/TK <ref> [38, 39] </ref> or a binding of Congress with X windows intrinsics could be used to implement this extension. 7.3 Additional Functionality The user interface enhancements suggested above are all fairly straightforward. Other usability enhancements require more fundamental research. Version Management.
Reference: 40. <author> Dewayne E. Perry, Nancy A. Staudenmayer, and Lawrence G. Votta, Jr. </author> <title> Find--ing out what goes on in a software development organization. </title> <type> Technical report, Personal communication (paper submitted for publication), </type> <month> September </month> <year> 1993. </year>
Reference-contexts: Process Support. Most of the effort in CAPITL has been spent on making the job of the software developer and architect easier. In large projects, the majority of time is spent on managing these developers and on communication costs <ref> [40, 54] </ref>. Support for such activities is called process programming or process modeling. The requirements for effective process support is an active research area. Nonetheless, there is agreement that in order to support, as well as control, human activities, flexibility is needed.
Reference: 41. <author> Anthony Rich. </author> <title> Logic-Based System Modelling. </title> <type> PhD thesis, </type> <institution> University of Wisconsin|Madison, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Maintaining invariants in an evolving system is a critical task for any support system <ref> [41, 48, 50] </ref>. ? This work was supported in part by the Defense Advanced Research Projects Agency under ARPA Order No. 8856 (monitored by the Office of Naval Research under contract N00014-92-J-1937).
Reference: 42. <author> Anthony Rich and Marvin Solomon. </author> <title> A logic-based approach to system modelling. </title> <editor> In Peter H. Feiler, editor, </editor> <booktitle> Workshop on Software Configuration Management, </booktitle> <pages> pages 84-93, </pages> <address> Trondheim, Norway, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: The CAPITL 3 project at the University of Wisconsin has been investigat-ing a logic-based approach to software configuration management <ref> [42] </ref>. The basic thesis of our approach is that if all objects in the environment carry with them sufficiently detailed descriptions, desired software products can be described declaratively and the system can infer the process necessary to build them.
Reference: 43. <author> Joel Richardson, Michael Carey, and Daniel Schuh. </author> <title> The design of the E programming language. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(3), </volume> <month> July </month> <year> 1993. </year>
Reference-contexts: The E programming language <ref> [43] </ref> is an extension of C++ that supports persistent data data that retains its state between runs of a program. E syntax extends C++ with a "db" version of each primitive type and type constructor (e.g. dbint, dbclassf ... g, etc.).
Reference: 44. <author> Russell Sandberg, David Goldberg, Steve Kleiman, Dan Walsh, and Bob Lyon. </author> <title> Design and implementation of the sun network filesystem. </title> <booktitle> In Proceedings of the Summer 1985 USENIX Conference, </booktitle> <pages> pages 119-130, </pages> <address> Portland, OR, </address> <month> June </month> <year> 1985. </year>
Reference-contexts: None of these approaches is entirely satisfactory. Fig. 1. CAPITL Browser The Emulated File System (EFS) allows programs to access CAPITL objects as if they were Unix files. It is based on the Network File System (NFS) facility <ref> [44] </ref>, which is included in most versions of Unix. NFS was originally designed to support transparent access to remote files. A version of the mount command associates a remote file system with a name, called a mount point in the local file system.
Reference: 45. <author> R.W. Scheifler and J. Gettys. </author> <title> The X window system. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 16(8) </volume> <pages> 57-69, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: Support for efficient maintenance of multiple versions of the database is built in. A compatibility feature allows existing Unix tools to manipulate CAPITL objects as if they were Unix files. The database is accessible via an interactive browser/editor based on the X Window System <ref> [45] </ref> and the InterViews graphical toolkit [34]. CAPITL's browser can navigate the version history of the database and the links between objects. It also provides facilities for the display and manual update of objects.
Reference: 46. <author> Marvin Solomon. EFS: </author> <title> the extensible file system. Unpublished manual, </title> <year> 1993. </year>
Reference-contexts: The CAPITL Directory class implements these functions by manipulating the list stored in the contents attribute of the term. More details about the EFS package will be contained in a forthcoming report <ref> [46] </ref>. 4 Software Configuration Management in CAPITL CAPITL provides assistance for constructing and maintaining software products. A product is the output of a series of tools applied to a set of objects. The goal is to produce a "correct" version of a product as efficiently as possible.
Reference: 47. <author> Richard M. Stallman and Roland McGrath. </author> <title> GNU Make. Free Software Foundation, </title> <publisher> Inc., </publisher> <address> Cambridge, MA, edition 0.26 beta edition, </address> <year> 1990. </year>
Reference-contexts: There are many variations of these so-called "super makes" and we describe only a sample here. Tools that are comparable to Make are included here as well. GNU Make. The Make utility from the Free Software Foundation <ref> [47] </ref> enhances the original Make in several ways. (The authors give credit for these to System V Make, Andrew Hume's mk, and other unnamed sources.) The major improvements include transitive closure of the dependency graph and implicit intermediate files (rule chaining).
Reference: 48. <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. </author> <title> Managing change in software development through process programming. </title> <type> Technical Report 1, </type> <institution> University of Colorado at Boulder, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Maintaining invariants in an evolving system is a critical task for any support system <ref> [41, 48, 50] </ref>. ? This work was supported in part by the Defense Advanced Research Projects Agency under ARPA Order No. 8856 (monitored by the Office of Naval Research under contract N00014-92-J-1937).
Reference: 49. <author> Walter F. Tichy. RCS: </author> <title> a system for version control. </title> <journal> Software|Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: It has exactly the same semantics as a Unix "plain" file (x 3.3). Delta files have additional operations to "compress" and "uncompress" their contents. Delta files represent consecutive versions of their contents as delta lists using an algorithm similar to RCS <ref> [49] </ref>. The contents of a term file is an arbitrary Congress term. A composite file, like a directory, contains a list of references to other objects, but it does not emulate all the behavior of a Unix directory, nor is it constrained to be part of a strict tree structure.
Reference: 50. <author> Walter F. Tichy. </author> <title> Tools for software configuration management. </title> <editor> In Jurgen F.H. Winkler, editor, </editor> <booktitle> Proceedings of the First International Workshop on Software Version and Configuration Control, </booktitle> <pages> pages 1-20, </pages> <address> Grassau, FRG, </address> <month> January </month> <year> 1988. </year> <title> B.G. </title> <publisher> Teubner, Stuttgart, W. </publisher> <address> Germany. </address>
Reference-contexts: Maintaining invariants in an evolving system is a critical task for any support system <ref> [41, 48, 50] </ref>. ? This work was supported in part by the Defense Advanced Research Projects Agency under ARPA Order No. 8856 (monitored by the Office of Naval Research under contract N00014-92-J-1937).
Reference: 51. <author> Walter F. Tichy and Mark C. Baker. </author> <title> Smart recompilation. </title> <booktitle> In 12th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 236-244, </pages> <address> New Orleans, Louisiana, </address> <month> January </month> <year> 1985. </year>
Reference-contexts: If the timestamps match, the contents is still valid. Otherwise, the provenance is re-evaluated. A more precise notion of validity that relies on semantic properties of the objects involved could be used, potentially allowing fewer expressions to be evaluated <ref> [51] </ref>. 3. The object has a provenance but no contents, indicating that a user conserved space by deleting the contents. The contents can be regenerated by simply evaluating the provenance. 4.6 Discussion Separating the planning and building phases has several advantages.
Reference: 52. <author> Dennis Vadura. </author> <title> Dmake|maintain program groups, or interdependent files. </title> <type> Technical report, </type> <institution> University of Waterloo, </institution> <year> 1992. </year> <title> Dmake Unix Programmers Manual, </title> <note> Version 3.8. </note>
Reference-contexts: An include facility and conditional execution based on the C preprocessor language eases the maintenance of makefiles since common definitions and machine dependent parts can be stored separately and dynamically chosen. GNU Make extends the syntax for implicit rules to allow simple patterns. Dmake. Dmake <ref> [52] </ref> has many of the same extensions as GNU Make such as transitive closure of the derivation graph (rule chaining), an include mechanism, and better rule definition syntax. Dmake further extends Make by supporting parallel construction of a target's prerequisites.
Reference: 53. <author> Douglas Wiebe. </author> <title> Generic Software Configuration Management: Theory and Design. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <address> Seattle, </address> <year> 1990. </year>
Reference-contexts: Like DSEE, Shape relies on an external tool for checking that a configuration is consistent. Jason. Jason is a generic software configuration system <ref> [53] </ref> that constructs a software environment from a given set of parameters. These parameters include class definitions (object schemas), consistency constraints, and build plans (dependency relations). Created environments can later be extended, but because of the "compiled" nature of generated environments, such extensions are limited to additions and refinements.
Reference: 54. <author> Edward Yourdon. </author> <title> The Decline & Fall of the American Programmer. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: Process Support. Most of the effort in CAPITL has been spent on making the job of the software developer and architect easier. In large projects, the majority of time is spent on managing these developers and on communication costs <ref> [40, 54] </ref>. Support for such activities is called process programming or process modeling. The requirements for effective process support is an active research area. Nonetheless, there is agreement that in order to support, as well as control, human activities, flexibility is needed.
Reference: 55. <author> Andreas Zeller. </author> <title> Configuration management with feature logics. </title> <type> Technical report, </type> <institution> Technishe Universitat Braunschweig Report No. </institution> <month> 94-01, March </month> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: All these systems share the desire to use the power of logic languages for consistency checking and make good use of the richer data model provided by terms. Feature Logic. The NORA <ref> [55] </ref> system describes components and configurations using feature logic. Feature logic has as its data model terms which are similar to POL terms (both data models are derived from work by At-Kaci [4]). The operations of feature logic are selection, complement, intersection, and union of feature terms.
References-found: 55

