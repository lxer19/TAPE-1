URL: http://s2k-ftp.cs.berkeley.edu:8000/postgres/papers/vis93-tioga.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/tioga/research.html
Root-URL: http://www.cs.berkeley.edu
Title: Tioga: A Database-Oriented Visualization Tool  
Author: Michael Stonebraker, Jolly Chen, Nobuko Nathan, Caroline Paxson, Alan Su, Jiang Wu 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division, EECS Department University of California  
Abstract: In this paper we present a new architecture for visualization systems that is based on Data Base Management System (DBMS) technology. By building on the mechanisms present in a next-generation DBMS, rather than merely on the capabilities of a standard file manager, we show that a simpler and more powerful visualization system can be constructed. We retain the popular "boxes and arrows" programming notation for constructing visualization programs, but add a "flight simulator" model of movement to navigate the output of such programs. In addition, we provide a means to specify a hierarchy of abstracts of data of different types and resolutions, so that a "zoom" capability can be supported. The underlying DBMS support for this system, Tioga, is briefly described, as well as the current state of the implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dozier, J., </author> <title> "Spectral Signature of Alpine Snow Cover from the Landsat Thematic Mapper," Remote Sensing Environment, </title> <month> March </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Scientific visualization applications often deal with data objects of very large sizes. Examples include large regular arrays such as those found in global atmosphere and ocean circulation models [7] and in remote sensing applications <ref> [1] </ref>. In addition, users often wish to keep large numbers of such objects in an online store. For example, the various Earth Science participants of the Sequoia 2000 project [13] wish to keep about 100 terabytes of easily accessible information.
Reference: [2] <author> Gutman, A., "R-trees: </author> <title> A Dynamic Index Structure for Spatial Searching," </title> <booktitle> Proc. 1984 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Second, Tioga requires a DBMS which allows users to store, or register, previously written functions. Lastly, Tioga requires a DBMS with a multidimensional access method such as R-trees <ref> [2] </ref> or grid files [9]. In addition to tight DBMS integration, Tioga also offers an enhanced browsing capability so users can interact with the output of visualization programs. Specifically, it offers a "flight simulator" user interface so the user can "navigate" in information space.
Reference: [3] <author> Haas, L. et. al., </author> <title> "Starburst Mid-Flight: As the Dust Clears," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: Conventional relational DBMSs lack the data modeling flexibility to support scientific data adequately. However, recently several "next-generation" DBMSs have been built with enhanced data models, including POSTGRES [8], IRIS [15], ORION [5] and Starburst <ref> [3] </ref>. Although we are building Tioga for the POSTGRES DBMS, it could be easily interfaced to any next-generation DBMS with the following three characteristics. First, Tioga requires a DBMS which can be extended with user-defined data types.
Reference: [4] <author> Herot, Christopher F., </author> <title> "Spatial Management of Data," </title> <journal> ACM Transactions on Database Systems, </journal> <month> December </month> <year> 1980. </year>
Reference-contexts: It is also the browser's responsibility to display appropriately the values which are returned from the recipe in a fashion similar to that of SDMS <ref> [4] </ref>. To assist the browser, each type implementor is expected to define a display function in POSTGRES of the form: display (object,location,screen-resource) The location of the object is an N-dimensional polyhedron. <p> To satisfy this requirement, the recipe execution system must be capable of producing recipe output at varying levels of detail. The zoom in/zoom out capability is reminiscent of SDMS <ref> [4] </ref>, where additional detail appeared automatically and was hard-wired into the system. In Tioga we are implementing a much more flexible scheme. We allow every recipe to have one or more children, which will be termed abstracts for the given recipe, since they contain less information.
Reference: [5] <author> Kim, W., Garza, J.F., Ballou, N., Woelk D., </author> <title> "Architecture of the ORION Next-Generation Database System," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: Conventional relational DBMSs lack the data modeling flexibility to support scientific data adequately. However, recently several "next-generation" DBMSs have been built with enhanced data models, including POSTGRES [8], IRIS [15], ORION <ref> [5] </ref> and Starburst [3]. Although we are building Tioga for the POSTGRES DBMS, it could be easily interfaced to any next-generation DBMS with the following three characteristics. First, Tioga requires a DBMS which can be extended with user-defined data types.
Reference: [6] <author> Kochevar, P. et. al., </author> <title> "A Simple Visualization Management System: Bridging the Gap Between Visualization and Data Management," </title> <type> Sequoia 2000 Technical Report 93/27, </type> <institution> University of Cali-fornia, Berkeley, </institution> <address> CA, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: It is certainly possible to build an interface between an existing DBMS and an existing visualization system by adding a "query" box to the visualization system. This approach, which we will call loose coupling, is exemplified by the interface between several visualization systems and POSTGRES <ref> [6] </ref>. However, much more power and flexibility can be obtained by a tighter integration of DBMS and visualization services, and the basic purpose of of Tioga is to exploit this possibility. Conventional relational DBMSs lack the data modeling flexibility to support scientific data adequately.
Reference: [7] <author> Mechoso, C. et. al., </author> <title> "Distribution of a Coupled Atmosphere-Ocean General Circulation Model Across High-Speed Networks," </title> <booktitle> Proceedings of the 4th International Symposium on Computational Fluid Dynamics, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction Scientific visualization applications often deal with data objects of very large sizes. Examples include large regular arrays such as those found in global atmosphere and ocean circulation models <ref> [7] </ref> and in remote sensing applications [1]. In addition, users often wish to keep large numbers of such objects in an online store. For example, the various Earth Science participants of the Sequoia 2000 project [13] wish to keep about 100 terabytes of easily accessible information.
Reference: [8] <editor> Mosher, C. ed., </editor> <title> "The POSTGRES Reference Manual," </title> <institution> Electronics Research Laboratory, University of California, Berkeley, CA, </institution> <note> Memo 93/57, </note> <month> July </month> <year> 1993. </year>
Reference-contexts: Conventional relational DBMSs lack the data modeling flexibility to support scientific data adequately. However, recently several "next-generation" DBMSs have been built with enhanced data models, including POSTGRES <ref> [8] </ref>, IRIS [15], ORION [5] and Starburst [3]. Although we are building Tioga for the POSTGRES DBMS, it could be easily interfaced to any next-generation DBMS with the following three characteristics. First, Tioga requires a DBMS which can be extended with user-defined data types.
Reference: [9] <author> Nievergelt, J. et. al., </author> <title> "The Grid File: An Adaptable, Symmetric Multikey File Structure," </title> <journal> ACM Transactions on Database Systems, </journal> <month> March </month> <year> 1984. </year>
Reference-contexts: Second, Tioga requires a DBMS which allows users to store, or register, previously written functions. Lastly, Tioga requires a DBMS with a multidimensional access method such as R-trees [2] or grid files <ref> [9] </ref>. In addition to tight DBMS integration, Tioga also offers an enhanced browsing capability so users can interact with the output of visualization programs. Specifically, it offers a "flight simulator" user interface so the user can "navigate" in information space.
Reference: [10] <author> Stonebraker, M. and Rowe, L., </author> <title> "Database Portals ANew Application Program Interface," </title> <booktitle> Proceedings of the 10th International Conference on Very Large Databases, </booktitle> <address> Singapore, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: Then Section 3 discusses the way Tioga requires the DBMS to interact with the user-space (client) portion of the system. This interface is a generalization of both traditional SQL cursors and database portals <ref> [10] </ref>. Section 4 indicates the run-time support provided by POSTGRES for execution of Tioga boxes and arrows diagrams. In Section 5 we describe how Tioga supports additional functionality in the areas of abstracts of data, browser synchronization, versions, data entry and interfaces to foreign systems.
Reference: [11] <author> Stonebraker, M., </author> <booktitle> "The POSTGRES Storage System,"Proceedings of the 13th International Conference on Very Large Databases, </booktitle> <address> Brighton, Eng-land, </address> <month> August </month> <year> 1987. </year>
Reference-contexts: This may be useful, for example, if one wishes to view simultaneously two portions of a map, separated by a fixed distance. 5.3 Versions POSTGRES supports the notion of time travel for data objects <ref> [11] </ref>. When an object is updated, the old value may be kept in the database, along with the new one. Both objects are time stamped, so either can be subsequently retrieved by specifying the desired logical time of a query.
Reference: [12] <author> Stonebraker, M. et. al., </author> <title> "The Implementation of POSTGRES," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: In order to manage this large repository, they wish to use the services of a Data Base Management System (DBMS). Sequoia 2000 is utilizing the next-generation DBMS, POSTGRES <ref> [12] </ref>, for this purpose. fl This research was sponsored by NSF Grant IRI-9107455, ARO Grant DAAL03-91-G-0183, DARPA Contract DABT63-92-C-0007. Additional support was provided by the University of California and Digital Equipment Corporation under Research Grant #1243. <p> We are beginning work on the optimizer and executor extensions discussed in Section 4, and expect to have a complete system within six months. We seek to extend Tioga in several different directions. For example, POSTGRES supports a sophisticated rule management system <ref> [12] </ref>, and we require a mechanism to use these capabilities in the Tioga en-vironment. POSTGRES also allows a user program to specify transaction boundaries, for which POST-GRES will guarantee standard transaction semantics. The integration of transaction support into Tioga is another area of current investigation.
Reference: [13] <author> Stonebraker, M. and Dozier, J., </author> <title> "SEQUOIA 2000: Large Capacity Object Servers to Support Global Change Research," </title> <institution> SEQUOIA 2000 Technical Report 91/1 Electronics Research Lab, University of California, Berkeley, </institution> <address> CA, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: In addition, users often wish to keep large numbers of such objects in an online store. For example, the various Earth Science participants of the Sequoia 2000 project <ref> [13] </ref> wish to keep about 100 terabytes of easily accessible information. In order to manage this large repository, they wish to use the services of a Data Base Management System (DBMS).
Reference: [14] <author> Stonebraker, M. et. al., </author> <title> "Tioga: Providing Data Management Support for Scientific Visualization Applications," </title> <booktitle> Proceedings of the 19th International Conference on Very Large Databases, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: To optimize a megaplan, we therefore must decide when to coalesce two ingredients in a megaplan and where to insert buffers. The details of our algorithms are beyond the scope of this paper and are discussed in <ref> [14] </ref>. 5 Extensions to Recipe Management By using a DBMS to support the data needs of recipe management, we are able to provide additional functionality for Tioga.
Reference: [15] <author> Wilkinson, K. et. al., </author> <title> "The IRIS Architecture and Implementation," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: Conventional relational DBMSs lack the data modeling flexibility to support scientific data adequately. However, recently several "next-generation" DBMSs have been built with enhanced data models, including POSTGRES [8], IRIS <ref> [15] </ref>, ORION [5] and Starburst [3]. Although we are building Tioga for the POSTGRES DBMS, it could be easily interfaced to any next-generation DBMS with the following three characteristics. First, Tioga requires a DBMS which can be extended with user-defined data types.
References-found: 15

