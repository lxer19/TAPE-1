URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-34.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: witt@cs.tudelft.nl  wiebe@cs.ruu.nl  
Title: Recovery of Nonmonotonic Theories  
Author: Cees Witteveen Wiebe van der Hoek 
Abstract: We present a framework for recovery of nonmonotonic theories, i.e. of theories that are interpreted using a nonmonotonic semantics. Recovery of a nonmono-tonic theory is needed if it does not have a model under the given nonmonotonic semantics, i.e. if the theory is non-monotonically inconsistent. With classical theories, inconsistency can only be removed by contracting the current theory; for nonmonotonic databases, however, it is in general unclear how to restore the consistency of a theory: indeed, several options for recovery that use (mixtures of) contractions and expansions have been proposed in the literature. In this paper, we propose a more fundamental approach to study the recovery problem by stating some rationality postulates for recovery. In these postulates we assume that, when recovering a theory T with respect to some intended semantics, one can fall back on a weaker, so called back-up semantics for T . Based on these rationality postulates, our general conclusion is that, in most cases, contraction is not adequate to handle nontrivial recovery problems in nonmonotonic theories.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.J. Alferes, L. M. Pereira, </author> <title> Reasoning with Logic Programming, </title> <publisher> Springer Verlag, </publisher> <address> Heidelberg, </address> <year> 1996. </year>
Reference-contexts: These results, however does not apply to this framework, but also to less restrictive frameworks as e.g. the Contradiction Removal framework of Pereira et al. (see <ref> [1] </ref>). Using the language of logic programming, the main idea behind this approach is that logic programs that do not have acceptable models can be revised adequately by removing assumptions. These assumptions are literals of the form not l. <p> As a special case, the Contradiction Removal framework developed by Pereira and Alferes (see <ref> [1] </ref>), satisfies our first three rationality postulates and makes use of expansions as recovery operators. Our results show that, whenever R is a mixed recovery that satisfies the postulates R1-R4, it can always be replaced by a successful expansion that does not produce more changes.
Reference: [2] <author> J. Dix, </author> <title> Nichtmonotones Schliessen und dessen Anwendung auf Semantiken logis-cher Programme, </title> <type> PhD. Thesis, </type> <institution> Karlsruhe, </institution> <year> 1992. </year>
Reference: [3] <author> P. Gardenfors, </author> <title> Belief Revision, </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: Position and overview of the paper Comparing this recovery process with the recovery of classical theories, there are some resemblances but also some differences. A classical theory has to be recovered if the theory is not satisfiable. In the dominant AGM <ref> [3] </ref> framework for recovery of classical theories, also a transformational approach is applied.
Reference: [4] <author> N. Bidoit, </author> <title> Negation in rule-based database languages: a survey, </title> <journal> Theoretical Computer Science, </journal> <volume> 78, </volume> <year> (1991), </year> <pages> 383. 20 </pages>
Reference-contexts: Then M G (P;M) M . The following lemma shows that a potential back-up semantics can be used as a back-up semantics in a successful recovery framework with the stable semantics as the intended semantics. 6 An example of such a semantics is the positivist semantics (see <ref> [4] </ref>). 17 Lemma 4.4 Let Sem be a potential back-up semantics for P elp .
Reference: [5] <author> J. Dix and G. Brewka, </author> <title> Knowledge Representation with Logic Programs, </title> <type> Re--search Report 15/96, </type> <institution> Fachberichte Informatik, Universitat Koblenz-Landau, Koblenz, </institution> <year> 1996. </year>
Reference-contexts: We assume to reader to be acquainted with the basic concepts and notations used in logic programming (cf. <ref> [5, 8] </ref>). We consider the class of finite, propositional normal logic programs with explicit negation and we will call such programs simply logic programs.
Reference: [6] <author> K. Inoue, C. Sakama, </author> <title> Abductive Framework for Nonmonotonic Theory Change. </title> <booktitle> Proceedings IJCAI'95, </booktitle> <year> 1995. </year>
Reference-contexts: In particular, we have shown that whenever the backup semantics is cumulative, syntactically minimal recovery operators for nonmonotonic theories have to be expansions in order to be successful. This result can be related to the approach to theory recovery of Inoue and Sakama (see <ref> [6] </ref>), where they propose to revise a theory T by means of a minimal set of additions I and removals O such that R (T ) = T + I O has an acceptable model. Their proposal thus comes down to advocating a mixed recovery approach.
Reference: [7] <author> S. Kraus, D. Lehmann, M. Magidor, </author> <title> NonMonotonic Reasoning , Preferential Models and Cumulative Logics, </title> <journal> Artificial Intelligence, </journal> <volume> 44 (1), </volume> <year> 1990, </year> <pages> pp. 167 207. </pages>
Reference: [8] <author> J. Lloyd, </author> <title> Foundations of Logic Programming, </title> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: We assume to reader to be acquainted with the basic concepts and notations used in logic programming (cf. <ref> [5, 8] </ref>). We consider the class of finite, propositional normal logic programs with explicit negation and we will call such programs simply logic programs.
Reference: [9] <author> D. Makinson, </author> <title> General Patterns in Nonmonotonic Reasoning, in: D.M. </title> <editor> Gabbay, C.J. Hogger, J.A. </editor> <booktitle> Robinson (eds) Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> Vol. 3, </volume> <booktitle> Nonmonotonic Reasoning, </booktitle> <publisher> Oxford Science Publications, Oxford, </publisher> <year> 1994. </year>
Reference-contexts: Properties of consequence operators In this paper, we want to state some general results about the properties a suitable recovery operator should have. These properties partly depend on some abstract properties of the consequence operators C b and C i . Therefore we recall (see e.g. <ref> [9] </ref>) some general properties along which one can classify consequence operators: A C (A) (Inclusion) C (A) = C (C (A)) (Idempotency) If A B then C (A) C (B) (Monotony) If A B C (A) then C (B) C (A) (Cut) If A B C (A) then C (A) C <p> The role of the weak principles in nonmonotonic logics Our main motivation to introduce the weak variants of Cut and Monotony, is that they help us in distinguishing the mainstream nonmonotonic semantics from other (nonclassical) semantics. Let us, following <ref> [9] </ref> and others, make a distinction between a skeptical and a choice mode 3 of using a consequence operator. <p> With respect to Cut, however, a distinction has to be made between these modes: while the skeptical modes of nonmonotonic consequence operations in general do satisfy Cut, their choice modes do not satisfy it (see <ref> [9] </ref>). This means these principles fail to distinguish these logics uniformly, i.e. independently from the mode in which they are used. As we will show now, our weak principles are capable to characterize these mainstream nonmonotonic logics uniformly. <p> The conclusion of this corollary is a weaker variant of the well-known stronger absorption principle C i C b = C i = C b C i that holds when C i is cumulative and C i is supra-inferential with respect to an operator C b satisfying Inclusion (cf. <ref> [9] </ref>). 2.2 The postulates In this section we introduce our postulates for recovery and use them to define a successful recovery framework, of which we also give an example. We then derive some simple but useful results about recovery frameworks and elaborate on the weak principles.
Reference: [10] <author> V. Marek and M. Truszczynski, </author> <title> Nonmonotonic Logic, </title> <publisher> Springer Verlag, </publisher> <address> Heidel-berg, </address> <year> 1993. </year>
Reference-contexts: Since it satisfies Cut in the skeptical mode, we only have to show that it satisfies Weak Cut in the choice mode. From <ref> [10] </ref>, we know that Default Logic satisfies the Confirmation of Evidence (CE) principle, stating that for every default theory = (W; D), the theory 0 = (W [ W 0 ; D) has at least one extension E, whenever (W; D) has a consistent extension E and W 0 E. <p> We will need the following lemma pertaining to properties of stable models: Lemma 4.3 (Marek & Truszczy nski <ref> [10] </ref>) Let M be a model of a program P and let M G (P;M) be the least model G (P; M ). Then M G (P;M) M .
Reference: [11] <author> Morris, P., </author> <title> Stable Closures, Defeasible Logic and Contradiction Tolerant Reasoning, </title> <booktitle> Proceedings of the 7th National Conference on Artificial Intelligence, </booktitle> <year> 1988. </year>
Reference: [12] <author> L. M. Pereira, J. J. Alferes and J. N. Aparicio. </author> <title> Contradiction Removal within well-founded semantics. </title> <editor> In: A. Nerode, W. Marek and V. S. Subrahmanian, (eds.), </editor> <booktitle> First International Workshop on Logic Programming and Non-monotonic Reasoning, </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [13] <author> D. Seipel. </author> <title> Partial Evidential Stable Models For Disjunctive Deductive Databases. </title> <editor> In: T. Przymusinski (ed.) </editor> <booktitle> Proc. Workshop on Logic Programming and Knowledge Representation (LPKR'97, </booktitle> <year> 1997. </year>
Reference: [14] <author> A. van Gelder, K.A. Ross, J.S. Schlipf. </author> <title> Unfounded Sets and Well-Founded Semantics for General Logic Programs, </title> <booktitle> Proceedings Seventh ACM Symposium on Principles of Database Systems, </booktitle> <address> (PODS'88), </address> <year> 1988, </year> <pages> pp. 221-230. </pages>
Reference-contexts: Then R has to be an expansion. PROOF Immediately from Theorem 4.5 and Theorem 3.9 Remark. Since we do not require the intended semantics to be two-valued, it is also possible to revise logic programs with explicit negation using the Well-Founded (WF) semantics (see <ref> [14] </ref>) as the intended semantics and, for example, the standard three-valued Kleene semantics as the backup semantics. A program like: P : a :c does not have an acceptable WF-model: W F (P ) = fa; c; :c; :bg is contradictory.
Reference: [15] <author> C. Witteveen and W. van der Hoek, </author> <title> Revision by Communication. </title> <editor> In: V. Marek, A. Nerode and M. Truszczynski, editors, </editor> <booktitle> Logic Programming and Non-Monotonic Reasoning, LNAI 928, </booktitle> <pages> pp. 189202, </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference: [16] <author> C. Witteveen and W. van der Hoek, </author> <title> Some Postulates for Nonmonotonic Theory Revision Applied to Logic Programming. </title> <editor> In: R. Dyckhoff, H. Herre and P. Schroeder-Heister, editors, </editor> <booktitle> Extensions of Logic Programming, LNAI 1050, </booktitle> <pages> pp. 303318, </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year> <month> 21 </month>
References-found: 16

