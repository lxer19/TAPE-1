URL: http://www.cs.cmu.edu/~thrun/papers/burgard.rhino_tourguide.ps.gz
Refering-URL: http://www.cs.cmu.edu/~thrun/papers/full.html
Root-URL: 
Title: The Interactive Museum Tour-Guide Robot  
Author: Wolfram Burgard, Armin B. Cremers, Dieter Fox, Dirk H ahnel, Gerhard Lakemeyer Dirk Schulz, Walter Steiner, and Sebastian Thrun 
Address: Bonn, Germany Aachen, Germany Pittsburgh, PA  
Affiliation: Computer Science Department III Computer Science Department School of Computer Science University of Bonn Aachen University of Technology Carnegie Mellon University  
Abstract: This paper describes the software architecture of an autonomous tour-guide/tutor robot. This robot was recently deployed in the Deutsches Museum Bonn, were it guided hundreds of visitors through the museum during a six-day deployment period. The robot's control software integrates low-level probabilistic reasoning with high-level problem solving embedded in first order logic. A collection of software innovations, described in this paper, enabled the robot to navigate at high speeds through dense crowds, while reliably avoiding collisions with obstaclessome of which could not even be perceived. Also described in this paper is a user interface tailored towards non-expert users, which was essential for the robot's success in the museum. Based on these experiences, this paper argues that time is ripe for the development of AI-based commercial service robots that assist people in everyday life. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bellman, R. E. </author> <year> 1957. </year> <title> Dynamic Programming. </title> <publisher> Princeton, </publisher> <address> NJ: </address> <publisher> Princeton University Press. </publisher>
Reference: <author> Borenstein, J.; Everett, B.; and Feng, L. </author> <year> 1996. </year> <title> Navigating Mobile Robots: Systems and Techniques. </title> <address> Wellesley, MA: </address> <publisher> A. K. </publisher>
Reference: <editor> Peters, </editor> <publisher> Ltd. </publisher>
Reference: <author> Burgard, W.; Fox, D.; Hennig, D.; and Schmidt, T. </author> <year> 1996. </year> <title> Estimating the absolute position of a mobile robot using position probability grids. </title> <booktitle> In Proc. of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> 896901. </pages>
Reference-contexts: RHINO employs a version of Markov localization, a method that has been employed successfully by several teams (Nourbakhsh, Powers, & Birchfield 1995; Simmons & Koenig 1995; Kaelbling, Cassandra, & Kurien 1996). RHINO utilizes a metric version of this approach <ref> (Burgard et al. 1996) </ref>, in which poses are estimated in x-y- space. Markov localization maintains a probabilistic belief as to where the robot currently is. Let P (l) denote this belief, where l is a pose in x-y- space.
Reference: <author> Cox, I. </author> <year> 1991. </year> <title> Blanchean experiment in guidance and navigation of an autonomous robot vehicle. </title> <journal> IEEE Transactions on Robotics and Automation 7(2):193204. </journal>
Reference: <author> Dean, T. L., and Boddy, M. </author> <year> 1988. </year> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceeding of Seventh National Conference on Artificial Intelligence AAAI-92, 4954. </booktitle> <address> Menlo Park, CA: </address> <publisher> AAAI. </publisher>
Reference-contexts: When computing these target locations, paths are also post-processed to maximize the robot's side-clearance. RHINO's path planner is an any-time algorithm, i.e., it returns an answer at any time, whenever needed <ref> (Dean & Boddy 1988) </ref>. As a pleasing consequence, the robot never halts to wait for its planner to generate a plan; instead, it moves continuouslyunless, of course, it explains an exhibit. In the museum, running value iteration to completion and finding the optimal path usually took less than one second.
Reference: <author> Elfes, A. </author> <year> 1989. </year> <title> Occupancy Grids: A Probabilistic Framework for Robot Perception and Navigation. </title> <type> Ph.D. Dissertation, ECE, CMU. </type>
Reference: <author> Fedor, C. </author> <year> 1993. </year> <title> TCX. An interprocess communication system for building robotic architectures. Programmer's guide to version 10.xx. </title> <address> CMU. </address>
Reference-contexts: The overall software architecture consists of approximately 25 independent modules (processes), which were executed in parallel on three on-board PCs and three off-board SUN workstations, connected via a tetherless Ethernet bridge (Thrun et al. 1998a). The software modules communicate using TCX <ref> (Fedor 1993) </ref>, a decentralized communication protocol for point-to-point socket communication. RHINO's control software applies several design princi ples, the most important of which are: 1. Probabilistic representations, reasoning, and learning.
Reference: <author> Fox, D.; Burgard, W.; Thrun, S.; and Cremers, A. </author> <year> 1998a. </year> <title> A hybrid collision avoidance method for mobile robots. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation. </booktitle>
Reference-contexts: Thus, we extended the DWA approach to use the maximum likelihood position estimate l fl = argmax l P (l) produced by RHINO's localization module. Given the robot's location in the map, the DWA algorithm <ref> (Fox et al. 1998a) </ref> generates virtual proximity measurements and integrates them with the real proximity measurements, obtained from the robot's various sensors (tactile, infrared, sonar, laser). This exten-sion of the dynamic window approach proved to be highly effective in the museum. <p> In order to deal with situations in which RHINO's localization module assigns high probability to multiple poses, we recently developed a more conservative strategy, which was not ready at the time of the museum installation, but which is now part of DWA <ref> (Fox et al. 1998a) </ref>. This approach generates virtual sensor readings that are with 99% probability shorter than the actual distances to the nearest invisible obstacles. Let s be a proximity measurement that one would expect if all invisible obstacles were actually detectable.
Reference: <author> Fox, D.; Burgard, W.; Thrun, S.; and Cremers, A. </author> <year> 1998b. </year> <title> Position estimation for mobile robots in dynamic environments. </title> <booktitle> In Proceedings of AAAI-98. </booktitle> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: Figuratively speaking, if people line up as a wall in front of the robotwhich they often did, the basic Markov localization paradigm makes the robot eventually believe that it is indeed in front of a wall. To remedy this problem, RHINO employs an entropy filter <ref> (Fox et al. 1998b) </ref>. This filter, which is applied to all proximity measurements individually, sorts measurements into two buckets: one that is assumed to contain all corrupted sensor readings, and one that is assumed to contain only authentic (non-corrupted) ones. <p> Unfortunately, the entropy filter can prevent recovery once the robot looses its position entirely. To prevent this problem, our approach also incorporates a small number of randomly chosen sensor readings in addition to those selected by the entropy filter. See <ref> (Fox et al. 1998b) </ref> for an alternative solution to this problem. In practice, our approach proved to be robust in the museum. <p> A comparison between our approach and plain Markov localization (i.e., our approach without the entropy filter) showed that the standard Markov algorithm would have lost track of the robot's position frequently, whenever large crowds surrounded the robot <ref> (Fox et al. 1998b) </ref>. Mapping Mapping addresses the problem of determining the locations of the obstacles in global world-coordinates. In the museum domain, the problem of mapping was simplified significantly, since an accurate metric map of the mu seum was provided to the robot beforehand. <p> RHINO uses body and head motion and sound to express intent and dissatisfaction. As mentioned above, RHINO's camera head is used to communicate the intended motion direction. In addition, RHINO uses a modified version of the entropy filter (a probabilistic novelty filter <ref> (Fox et al. 1998b) </ref>) to detect people or other unexpected obstacles. If such obstacles block the robot's path, it uses its horn to indicate its dissatisfaction. In the museum, people usually cleared the robot's path once they heard the horn.
Reference: <author> Fox, D.; Burgard, W.; and Thrun, S. </author> <year> 1997. </year> <title> The dynamic window approach to collision avoidance. </title> <journal> IEEE Robotics and Automation 4(1). </journal>
Reference: <author> Gutmann, J.-S., and Schlegel, C. </author> <year> 1996. </year> <title> Amos: Comparison of scan matching approaches for self-localization in indoor environments. </title> <booktitle> In Proceedings of the 1st Euromicro Workshop on Advanced Mobile Robots. </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference: <author> Horswill, I. </author> <year> 1994. </year> <title> Specialization of perceptual processes. </title> <type> Technical Report AI TR-1511, </type> <institution> MIT, AI Lab, </institution> <address> Cambridge, MA. </address>
Reference: <author> Howard, R. A. </author> <year> 1960. </year> <title> Dynamic Programming and Markov Processes. </title> <publisher> MIT Press and Wiley. </publisher>
Reference: <author> Kaelbling, L.; Cassandra, A.; and Kurien, J. </author> <year> 1996. </year> <title> Acting under uncertainty: Discrete bayesian models for mobile-robot navigation. </title> <booktitle> In Proc. of the IEEE/RSJ International Conference on Intelligent Robots and Systems. </booktitle>
Reference: <author> King, S., and Weiman, C. </author> <year> 1990. </year> <title> Helpmate autonomous mobile robot navigation system. </title> <booktitle> In Proceedings of the SPIE Conference on Mobile Robots, 190198. </booktitle> <volume> Volume 2352. </volume>
Reference-contexts: We see a significant potential to leapfrog much of the technology developed in this and similar projects (e.g., <ref> (King & Weiman 1990) </ref>) into other service robot applications, such as applications in the areas of health care, cleaning, inspection, surveillance, recreation etc. We conjecture that time is ripe for developing AI-based commercial service robots that assist people in everyday life.
Reference: <author> Levesque, H.; Reiter, R.; Lesperance, Y.; Lin, F.; and Scherl, R. </author> <year> 1997. </year> <title> GOLOG: A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming 31:5984. </journal>
Reference-contexts: Fig. 8: RHINO's on-board user in- terface: A screen and four buttons. Fig. 9: On-line image page for the Web. Fig. 10: Path of the robot during a single 4.5 hour run (1.6 km). RHINO's task planner uses GOLOG <ref> (Levesque et al. 1997) </ref>, which is an extension of the situation calculus (Mc-Carthy 1968). GOLOG is a language for specifying complex actions using structures like if-then-else or recursive procedures.
Reference: <author> Lu, F., and Milios, E. </author> <year> 1997. </year> <title> Globally consistent range scan alignment for environment mapping. </title> <booktitle> Autonomous Robots 4:333 349. </booktitle>
Reference: <author> McCarthy, J. </author> <year> 1968. </year> <title> Situations, actions and causal laws. </title> <booktitle> In Semantic Information Processing. </booktitle> <publisher> MIT Press. </publisher> <pages> 410417. </pages>
Reference: <author> Moravec, H. P. </author> <year> 1988. </year> <title> Sensor fusion in certainty grids for mobile robots. </title> <journal> AI Magazine 6174. </journal>
Reference: <author> Nourbakhsh, I.; Powers, R.; and Birchfield, S. </author> <year> 1995. </year> <title> DERVISH an office-navigating robot. </title> <journal> AI Magazine 16(2):5360. </journal>
Reference: <author> Simmons, R., and Koenig, S. </author> <year> 1995. </year> <title> Probabilistic robot navigation in partially observable environments. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence. </booktitle>
Reference: <author> Simmons, R.; Goodwin, R.; Haigh, K.; Koenig, S.; and O'Sullivan, J. </author> <year> 1997. </year> <title> A layered architecture for office delivery robots. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents. </booktitle>
Reference-contexts: Some even blocked the robot's path intentionally in expectation of an acoustic reward. Web Interface RHINO's Web interface consists of a collection of Web pages, some of which are interactive, others provide background information. In addition to previous Web interfaces (see e.g., <ref> (Simmons et al. 1997) </ref>), which basically rely on client-pull/server-push mechanisms, RHINO's interface also offers Java applets for instant update of information (both state and intent) as the robot moves. One of the main pages of the Web interface is shown in Figure 9.
Reference: <author> Thrun, S.; Bucken, A.; Burgard, W.; Fox, D.; Frohlinghaus, T.; Hennig, D.; Hofmann, T.; Krell, M.; and Schimdt, T. </author> <year> 1998a. </year> <title> Map learning and high-speed navigation in RHINO. </title> <editor> In Ko-rtenkamp, D.; Bonasso, R.; and Murphy, R., eds., </editor> <title> AI-based Mobile Robots: Case studies of successful robot systems. </title> <address> Cam-bridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: The overall software architecture consists of approximately 25 independent modules (processes), which were executed in parallel on three on-board PCs and three off-board SUN workstations, connected via a tetherless Ethernet bridge <ref> (Thrun et al. 1998a) </ref>. The software modules communicate using TCX (Fedor 1993), a decentralized communication protocol for point-to-point socket communication. RHINO's control software applies several design princi ples, the most important of which are: 1. Probabilistic representations, reasoning, and learning.
Reference: <author> Thrun, S.; Gutmann, S.; Fox, D.; Burgard, W.; and Kuipers, B. </author> <year> 1998b. </year> <title> Integrating topological and metric maps for mobile robot navigation: A statistical approach. </title> <booktitle> In Proceedings of AAAI-98. </booktitle> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: For example, one of us spent a week constructing a map of the museum by hand. Based on work by (Lu & Milios 1997; Gutmann & Schlegel 1996; Thrun, Fox, & Burgard 1998), we now have clear evidence that this task can be automated <ref> (Thrun et al. 1998b) </ref>, and the time for acquiring such a map from scratch can be reduced to a few hours.
Reference: <author> Thrun, S.; Fox, D.; and Burgard, W. </author> <year> 1998. </year> <title> A probabilistic approach to concurrent mapping and localization for mobile robots. Machine Learning and Autonomous Robots (joint issue). </title> <note> to appear. </note>
Reference-contexts: Occupancy grid techniques approximate the environment by a 2D grid, where each grid cell is annotated by a numerical occupancy value that represents the probability that this cell contains an obstacle. In our approach <ref> (Thrun 1998) </ref>, occupancy maps are generated using a Backpropagation-style network, which maps sensor measurements to local occupancy maps. The network is trained off-line, using labeled data obtained in environments where the exact locations of all obstacles are known. <p> Notice how the values spread through the free-space. After convergence, steepest decent in the value function leads to the shortest path to the goal. As described in more detail in <ref> (Thrun 1998) </ref>, RHINO's path planner employs two additional mechanisms, aimed to increase its run-time efficiency: 1. It uses a bounding box technique to focus computation on regions where it matters. 2. It uses an algorithm similar to value iteration, to identify areas that require re-planning when the map changes.
Reference: <author> Thrun, S. </author> <year> 1998. </year> <title> Learning maps for indoor mobile robot navigation. </title> <journal> Artificial Intelligence. </journal> <note> to appear. </note>
Reference-contexts: Occupancy grid techniques approximate the environment by a 2D grid, where each grid cell is annotated by a numerical occupancy value that represents the probability that this cell contains an obstacle. In our approach <ref> (Thrun 1998) </ref>, occupancy maps are generated using a Backpropagation-style network, which maps sensor measurements to local occupancy maps. The network is trained off-line, using labeled data obtained in environments where the exact locations of all obstacles are known. <p> Notice how the values spread through the free-space. After convergence, steepest decent in the value function leads to the shortest path to the goal. As described in more detail in <ref> (Thrun 1998) </ref>, RHINO's path planner employs two additional mechanisms, aimed to increase its run-time efficiency: 1. It uses a bounding box technique to focus computation on regions where it matters. 2. It uses an algorithm similar to value iteration, to identify areas that require re-planning when the map changes.
References-found: 27

