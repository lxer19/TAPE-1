URL: http://www.csd.uu.se/~jakob/publications/paam97.ps
Refering-URL: http://www.csd.uu.se/~jakob/publications.html
Root-URL: 
Email: steam@cslab.ericsson.se  
Title: A Platform for Secure Mobile Agents  
Author: Johan Arthursson Jakob Engblom Ing-Marie Jonsson Rehan Mirza Gustaf Naeser Mikael Olsson Robert Ottenhag Dan Sahlin Maria Schmid Bertil Spolander Elham Zolfonoon 
Note: Most of the work reported was carried out as a student project at the Department of Computer Systems at Uppsala University. The name of project was STEAM 4  
Date: April 18, 1997  
Address: SE-126 25 Stockholm, SWEDEN  
Affiliation: Medialab Computer Science Lab. Ericsson Telecom  
Abstract: A secure system for mobile agents written in Erlang, a real time high-level functional language with processes and message passing, is described. The emphasis for this system is on security with reasonably secure nodes and secure agent communication, something which is often ignored in most agent systems, but crucial for an open agent system. We argue that Erlang is suited for programming mobile agents, because it already has the main features needed: processes, communication, and distribution. However, some extensions to Erlang are needed, in particular in coping with the security aspects, which are discussed in the paper. To validate our approach, a meeting-scheduler using mobile agents was implemented on our platform. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Armstrong, J. L., Williams, M. C., Wikstrom, C. and Virding, S. R., </author> <title> Concurrent Programming in Erlang, 2:nd ed. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: Most of these systems are either implemented as new languages or implemented in languages where functionality for concurrency, communication, fault-tolerance etc. has been added. We started with Erlang <ref> [1] </ref>, a language that already offers built-in functionality and mechanisms well suited for agent applications: processes, asynchronous communication, distribution, soft real time support and fault-tolerance.
Reference: [2] <author> Joachim Baumann, </author> <title> Mole|A Java based Mobile Agent System, </title> <address> IVPR Stuttgart, </address> <year> 1996. </year>
Reference-contexts: A lot of activity can be seen around Java [7], due to its incorporation in several Web browsers. Java per se is not a system for mobile agents, but mobile agents, but with extensions like MOLE <ref> [2] </ref>, Aglets [13], JavaAgent [5] etc. you can build such a system. The security though seems inflexible: the message "security violation" pops up as soon as you try to do something useful. Java vs.
Reference: [3] <author> Michael H. Coen, SodaBot: </author> <title> A Software Agent Construction System, </title> <institution> MIT AI Lab, USA, </institution> <year> 1995. </year>
Reference-contexts: Then we identified a number of obvious agent functions, much like the cooperating system for agents described in SodaBot <ref> [3] </ref>. Agents typically have to interact with other agents and users, write and send email, and access local information. Remember that one of the requirements was the ability to exchange sensitive and confidential information.
Reference: [4] <editor> Tim Finin et. al., </editor> <title> Specification of the KQML Agent-Communication Language, The DARPA Knowledge Sharing Initiative, </title> <year> 1993. </year>
Reference-contexts: The station master is responsible for the security on the station and it is the station master that controls all agents on the station, for instance when the agents enter or leave the station or try to communicate. Communication between all agents uses KQML <ref> [4] </ref>. An agent may however choose to use an application specific protocol for other communication, for example when communicating with a user. To be able to monitor the system, each station master has its own web page which is visualized using Java applets [7]. <p> Remember that one of the requirements was the ability to exchange sensitive and confidential information. In the next section we will describe functions for: * KQML * Email and file system * Visualization KQML KQML <ref> [4] </ref> is used as the protocol for agent communication. The protocol has existed some years now, and there are several applications that use it.
Reference: [5] <author> H. Robert Frost, </author> <title> JavaAgent Template, </title> <institution> Stanford University, EIT, </institution> <year> 1996. </year>
Reference-contexts: A lot of activity can be seen around Java [7], due to its incorporation in several Web browsers. Java per se is not a system for mobile agents, but mobile agents, but with extensions like MOLE [2], Aglets [13], JavaAgent <ref> [5] </ref> etc. you can build such a system. The security though seems inflexible: the message "security violation" pops up as soon as you try to do something useful. Java vs.
Reference: [6] <author> Sanjay Ghemawat, </author> <title> Ical user guide, </title> <address> sanjay@lcs.mit.edu, http://www.pmg.lcs.mit.edu/~sanjay/ical.html. </address>
Reference-contexts: The user interface is a Java applet running in a web browser. The existing calendar system is Ical <ref> [6] </ref> that offers all the functionality expected from a personal calender system. It has a nice and easy to use X based user interface and stores the appointment information in a simple and easily extensible file format.
Reference: [7] <author> James Gosling, Henry McGilton, </author> <title> The Java Language Environment, Sun Microsys-tems, </title> <year> 1996. </year>
Reference-contexts: Communication between all agents uses KQML [4]. An agent may however choose to use an application specific protocol for other communication, for example when communicating with a user. To be able to monitor the system, each station master has its own web page which is visualized using Java applets <ref> [7] </ref>. Through the web page you can easily monitor the agents on the platform and get information about their owners and what the agents are doing. Java applets are also used for the user interaction with our application which is a meeting scheduler. <p> However, our system is based on a high level symbolic functional language, where we with a set of minor adjustments are able to satisfy our requirements on security for mobile agents. A lot of activity can be seen around Java <ref> [7] </ref>, due to its incorporation in several Web browsers. Java per se is not a system for mobile agents, but mobile agents, but with extensions like MOLE [2], Aglets [13], JavaAgent [5] etc. you can build such a system.
Reference: [8] <author> Robert S. Gray, </author> <title> Transportable Agents, </title> <type> Ph. D. Thesis, </type> <institution> Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: 1 Introduction There are a lot of systems that offer support for mobile agents. AgentTCL <ref> [8] </ref> is an extension of TCL from Dartmouth College; Telescript [16] from General Magic; and Facile [11] where an existing language is modified to support mobile agents. <p> Telescript [16] is an environment that supports portable and secure code. The programming language is object-oriented and provides an operator that can move running programs with its state between machines during execution. Telescript has also focused on security with with encryption and digital signatures. Our approach and also AgentTCL's <ref> [8] </ref> is in many areas similar to Telescript. However, our system is based on a high level symbolic functional language, where we with a set of minor adjustments are able to satisfy our requirements on security for mobile agents.
Reference: [9] <author> Colin G. Harrison, David M. Chess, Aaron Kershenbaum, </author> <title> Mobile Agents: Are they a good idea?, </title> <type> Research Report, </type> <institution> IBM Research Division, T.J. Watson Research Center, </institution> <year> 1995. </year>
Reference-contexts: One possible solution is to use the PGP model [19]. Our application could perhaps have been better chosen had mobility been an essential demand. However, there are advantages even for a simpler application such as our meeting scheduler in using mobile agents <ref> [9] </ref>. Related work Many systems are being released which support mobile agents. Telescript [16] is an environment that supports portable and secure code. The programming language is object-oriented and provides an operator that can move running programs with its state between machines during execution.
Reference: [10] <author> Henry A. Kautz, Bart Selman, Michael Coen, </author> <title> Bottom-Up Design of Software Agents, </title> <journal> Communications of the ACM, </journal> <month> July </month> <year> 1994. </year>
Reference: [11] <author> Frederick Colville Knabe, </author> <title> Language Support for Mobile Agents, </title> <institution> School of Computer Science, Carnegie Mellon University, USA, </institution> <year> 1995. </year>
Reference-contexts: 1 Introduction There are a lot of systems that offer support for mobile agents. AgentTCL [8] is an extension of TCL from Dartmouth College; Telescript [16] from General Magic; and Facile <ref> [11] </ref> where an existing language is modified to support mobile agents. Most of these systems are either implemented as new languages or implemented in languages where functionality for concurrency, communication, fault-tolerance etc. has been added.
Reference: [12] <author> Yannis Labrou. </author> <title> Semantics for an Agent Communication Language. </title> <institution> A Doctoral Dissertation for the PhD Defense Examination Submitted to the Defense Committee at the Computer Science and Electrical Engineering Department (CSEE), University of Maryland Graduate School, Baltimore, Maryland, </institution> <month> 21228-5398, September 10, </month> <year> 1996. </year>
Reference-contexts: Internally, between STEAM stations, distributed Erlang is used, while TCP/IP is used to communicate with external agents. Adding more transport protocols is transparent to the existing agents. KQML implementation We have implemented a subset of KQML which follows the syntax and semantics specified by Labrou <ref> [12] </ref>. We have only implemented those parts that were useful in our project, i.e. performatives for questions, responses, and problem reports. STEAM does not implement a KQML facilitator. The name server functionality is implemented in the communications sublayer.
Reference: [13] <author> Danny B. Lange, </author> <title> Java Aglet Application Programming Interface, </title> <institution> IBM Tokyo Research Laboratory, </institution> <year> 1996. </year>
Reference-contexts: A lot of activity can be seen around Java [7], due to its incorporation in several Web browsers. Java per se is not a system for mobile agents, but mobile agents, but with extensions like MOLE [2], Aglets <ref> [13] </ref>, JavaAgent [5] etc. you can build such a system. The security though seems inflexible: the message "security violation" pops up as soon as you try to do something useful. Java vs.
Reference: [14] <author> Gustaf Naeser, </author> <title> Erlang and Mobile Agents, M.Sc. </title> <type> Thesis, </type> <institution> Computing Science Department, Uppsala University, </institution> <year> 1996 </year>
Reference-contexts: We would also like to add basic security support to the Erlang run time system, based on results from this work and work on SafeErlang <ref> [14] </ref>. Mobile agents are particularly advantageous in systems where it is hard or impossible to maintain a connection between the nodes, such as in radio-based systems. An agent with a complicated task need be sent just once, and this will reduce the traffic on the connection considerably.
Reference: [15] <author> RSA Laboratories, RSAREF(TM), </author> <title> A Cryptographic Toolkit, </title> <note> Revised March 25, 1994, Version 2.0 </note>
Reference-contexts: The implemented Security Manager supports privacy, authentication, integrity of messages, non-repudiation of message origin and protection against message replay. The cryptographic and signing facilities are implemented as library calls using existing RSA implementations in C <ref> [15] </ref>. The Secure KQML protocol consists of two phases: the authentication phase and the privacy phase. In the authentication phase initial parameters for a private conversation are setup. During the privacy phase the actual messages are sent and received.
Reference: [16] <author> Telescript Technology: </author> <title> Mobile Agents, General Magic, </title> <address> USA, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction There are a lot of systems that offer support for mobile agents. AgentTCL [8] is an extension of TCL from Dartmouth College; Telescript <ref> [16] </ref> from General Magic; and Facile [11] where an existing language is modified to support mobile agents. Most of these systems are either implemented as new languages or implemented in languages where functionality for concurrency, communication, fault-tolerance etc. has been added. <p> Our application could perhaps have been better chosen had mobility been an essential demand. However, there are advantages even for a simpler application such as our meeting scheduler in using mobile agents [9]. Related work Many systems are being released which support mobile agents. Telescript <ref> [16] </ref> is an environment that supports portable and secure code. The programming language is object-oriented and provides an operator that can move running programs with its state between machines during execution. Telescript has also focused on security with with encryption and digital signatures.
Reference: [17] <institution> Chellia Thirunavukakarasu, EIT, Menlo Park, Tim Finin and James Mayfield, Computer Science and Electrical Engineering, University of Maryland Baltimore County, Secret Agents|A Security Architecture for the KQML Agent Communication Language, USA, </institution> <year> 1995. </year>
Reference-contexts: The agents then communicate directly. Secure communication To achieve a secure communication between agents a slightly modified version of the Secure KQML protocol, proposed in <ref> [17] </ref>, has been implemented. Communication security is based on the notion of secure domains. In a secure domain, all stations are assumed to be friendly, and secure communication is possible without encryption. This is the case in a company network behind a firewall.
Reference: [18] <author> Tatu Ylonen, </author> <title> Secure Shell, </title> <address> http://www.cs.hut.fi/ssh/. </address>
Reference-contexts: In the authentication phase initial parameters for a private conversation are setup. During the privacy phase the actual messages are sent and received. Performance improvements Achieving privacy by using RSA to encrypt the whole messages is quite demanding, computation wise. The approach in PGP [19] and SSH <ref> [18] </ref> is more efficient as only a small session key is encrypted by RSA. The rest of the message is encrypted with the session key using symmetric encryption methods such as DES and IDEA.
Reference: [19] <author> Philip Zimmermann, </author> <title> The Official PGP User's Guide, </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: In the authentication phase initial parameters for a private conversation are setup. During the privacy phase the actual messages are sent and received. Performance improvements Achieving privacy by using RSA to encrypt the whole messages is quite demanding, computation wise. The approach in PGP <ref> [19] </ref> and SSH [18] is more efficient as only a small session key is encrypted by RSA. The rest of the message is encrypted with the session key using symmetric encryption methods such as DES and IDEA. <p> However, as a workaround we defined secure domains, where distribution is allowed, and all communication to other domains is done by encrypted connections. Further work has to be done to decide which algorithm to use to spread trusted domain addresses. One possible solution is to use the PGP model <ref> [19] </ref>. Our application could perhaps have been better chosen had mobility been an essential demand. However, there are advantages even for a simpler application such as our meeting scheduler in using mobile agents [9]. Related work Many systems are being released which support mobile agents.
References-found: 19

