URL: http://www.cs.cmu.edu/afs/cs/usr/khaigh/www/papers/khaigh96c.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs/usr/khaigh/www/papers/khaigh96c.abstract.html
Root-URL: http://www.cs.cmu.edu
Email: khaigh@cs.cmu.edu veloso@cs.cmu.edu  
Title: Using Perception Information for Robot Planning and Execution  
Author: Karen Zita Haigh Manuela M. Veloso 
Note: In Proceedings of 96 AAAI Workshop:  
Address: Pittsburgh, PA 15213  
Affiliation: Computer Science Department Carnegie Mellon University  Intelligent Adaptive Agents  
Web: http://www.cs.cmu.edu/~khaigh http://www.cs.cmu.edu/~mmv  
Abstract: We present Rogue, an integrated planning and executing robotic agent. Rogue is designed to be a roving office gopher, doing tasks such as picking up & delivering mail and returning & picking up library books, in a setup where users can post tasks for the robot to do. We have been working towards the goal of building Rogue as a completely autonomous agent which can learn from its experiences improving its own behaviour. In this paper, we focus on describing Rogue's capabilities in executing and processing perception information, including: (1) the generation and execution of a plan which requires observation to make informed planning decisions, and (2) the monitoring of execution for informed replanning. Rogue is implemented and functional on a real indoor robot. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Agre, P. E., and Chapman, D. </author> <year> 1987. </year> <title> Pengi: An implementation of a theory of activity. </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <pages> 268-272. </pages> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Blythe, J. </author> <year> 1994. </year> <title> Planning with external events. </title> <editor> In de Mantaras, R. L., and Poole, D., eds., </editor> <booktitle> Proceedings of the Tenth Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> 94-101. </pages> <address> Seattle, WA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Because it is impossible to enumerate all the world's possible events, complete conditional planning is infeasible. Probabilistic planning falls in the middle of these two frameworks <ref> (Blythe 1994) </ref>. At planning time, it accounts for the most probable contingencies and relies on replanning if unpredictable or rare events may take place and disrupt the plan execution.
Reference: <author> Bonasso, R. P., and Kortenkamp, D. </author> <year> 1996. </year> <title> Using a layered control architecture to alleviate planning with incomplete information. In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information for Robot Problems", </title> <address> 1-4. Stanford, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots (Gat 1992) to to space station repair robots <ref> (Bonasso & Kortenkamp 1996) </ref> to unmanned spacecraft (Gat 1996). We believe that Rogue is the only such system that can support asynchronous goals, but since each of these architectures is inherently extensible, the behaviours demonstrated by Rogue under TCA could be easily transferred to one of the other architectures.
Reference: <author> Carbonell, J. G.; Knoblock, C. A.; and Minton, S. </author> <year> 1990. </year> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In VanLehn, K., ed., </editor> <booktitle> Architectures for Intelligence. </booktitle> <address> Hillsdale, NJ: </address> <note> Erlbaum. Also Available as Technical Report CMU-CS-89-189. </note> <editor> desJardins, M. </editor> <year> 1994. </year> <title> Knowledge development methods for planning systems. </title> <booktitle> In AAAI-94 Fall Symposium Series: Planning and Learning: On to Real Applications. </booktitle>
Reference: <author> Firby, R. J. </author> <year> 1994. </year> <title> Task networks for controlling continuous processes. </title> <booktitle> In Proceedings of AIPS-94, </booktitle> <pages> 49-54. </pages>
Reference-contexts: The system relies on perfect sensors and a human to tell it what features of the environment are relevant for replanning. ATLANTIS (Gat 1992) and rap <ref> (Firby 1994) </ref>, like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system.
Reference: <author> Gat, E. </author> <year> 1992. </year> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <pages> 809-815. </pages>
Reference-contexts: The system relies on perfect sensors and a human to tell it what features of the environment are relevant for replanning. ATLANTIS <ref> (Gat 1992) </ref> and rap (Firby 1994), like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots (Gat 1992) to to space station repair robots <p> ATLANTIS <ref> (Gat 1992) </ref> and rap (Firby 1994), like TCA, are architectures that enable a library of behaviours and reactions to be controlled by a deliberative system. The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots (Gat 1992) to to space station repair robots (Bonasso & Kortenkamp 1996) to unmanned spacecraft (Gat 1996).
Reference: <author> Gat, E. </author> <year> 1996. </year> <title> News from the trenches: An overview of unmanned spacecraft for AI researchers. In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information for Robot Problems", </title> <address> 5-12. Stanford, CA: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The have been used as the underlying control mechanism on a variety of robots, from indoor mobile robots (Gat 1992) to to space station repair robots (Bonasso & Kortenkamp 1996) to unmanned spacecraft <ref> (Gat 1996) </ref>. We believe that Rogue is the only such system that can support asynchronous goals, but since each of these architectures is inherently extensible, the behaviours demonstrated by Rogue under TCA could be easily transferred to one of the other architectures.
Reference: <author> Gervasio, M. T., and DeJong, G. F. </author> <year> 1996. </year> <title> Completable planning: A curative learning approach to the imperfect domain theory. </title> <booktitle> In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information for Robot Problems", </booktitle> <pages> 13-16. </pages> <publisher> AAAI Press. </publisher>
Reference-contexts: Gervasio's completable planning paradigm <ref> (Gervasio & DeJong 1996) </ref> also creates a complete plan up-front, but instead of creating contingency plans, invokes replanning upon failure.
Reference: <author> Gil, Y. </author> <year> 1992. </year> <title> Acquiring domain knowledge for planning by experimentation. </title> <type> Ph.D. Dissertation, </type> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, PA. </institution> <note> Also available as Technical Report CMU-CS-92-175. </note>
Reference-contexts: Therefore every agent executing in the real world must have the ability to monitor the execution of its actions, detect when the actions fail, and compensate for these problems. Gil <ref> (Gil 1992) </ref>, Wang (Wang 1995) and desJardins (desJardins 1994) learn or improve action models. We take the approach instead of modifying the state description to reflect the outcome of the action, thereby forcing Rogue to find an alternate means to achieve the goal.
Reference: <author> Haigh, K. Z., and Veloso, M. </author> <year> 1996. </year> <title> Interleaving planning and robot execution for asynchronous user requests. </title> <booktitle> In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information", </booktitle> <pages> 35-44. </pages> <publisher> AAAI Press. </publisher>
Reference-contexts: Currently, Rogue's main features are (1) the ability to receive and reason about multiple asynchronous goals, suspending and interrupting actions when necessary (described in a previous paper <ref> (Haigh & Veloso 1996) </ref>), (2) the ability to deliberately sense the world to update its domain model, and (3) the ability to sense, reason about, and correct simple execution failures.
Reference: <author> Hammond, K.; Converse, T.; and Martin, C. </author> <year> 1990. </year> <title> Integrating planning and acting in a case-based framework. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> 292-297. </pages> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Laird, J. E.; Yager, E. S.; Hucka, M.; and Tuck, C. M. </author> <year> 1991. </year> <title> Robo-Soar: An integration of external interaction, planning, and learning using Soar. </title> <booktitle> Robotics and Autonomous Systems 8(1-2):113-29. </booktitle>
Reference: <author> McDermott, D. </author> <year> 1978. </year> <title> Planning and acting. </title> <booktitle> Cognitive Science 2. </booktitle>
Reference: <author> Mitchell, T. M.; Allen, J.; Chalasani, P.; Cheng, J.; Etzioni, O.; Ringuette, M.; and Schlimmer, J. </author> <year> 1990. </year> <title> Theo: A framework for self-improving systems. </title> <editor> In VanLehn, K., ed., </editor> <booktitle> Architectures for Intelligence. </booktitle> <address> Hilllsdale, NJ: </address> <publisher> Erlbaum. </publisher>
Reference-contexts: Therefore the planner does not waste effort creating long plans that may be infeasible in a dynamic environment. In addition, Rogue is implemented on a real robot rather than a simulated one. Theo <ref> (Mitchell et al. 1990) </ref> is a system implemented on an indoor mobile robot which applies explanation-based learning to create stimulus-response rules. It does not support action interruption or uncertainty in the domain, nor does it maintain a state history or modify the action model, nor can it handle sensor noise.
Reference: <author> O'Sullivan, J., and Haigh, K. Z. </author> <year> 1994. </year> <institution> Xavier. Carnegie Mellon University, Pittsburgh, PA. </institution> <note> Manual, Version 0.2, unpublished internal report. </note>
Reference: <author> Perez, M. A. </author> <year> 1995. </year> <title> Learning Search Control Knowledge to Improve Plan Quality. </title> <type> Ph.D. Dissertation, </type> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, PA. </institution> <note> Available as Technical Report CMU-CS-95-175. </note>
Reference: <author> Pryor, L. M. </author> <year> 1994. </year> <title> Opportunities and Planning in an Unpredictable World. </title> <type> Ph.D. Dissertation, </type> <institution> Northwestern University, Evanston, Illinois. </institution> <note> Also available as Technical Report number 53. </note>
Reference-contexts: It allows the system to adapt to a changing environment where failures can occur. Related Work Following is a brief description of some of the robot architectures most similar to Rogue, pointing out some of the major differences. pareto <ref> (Pryor 1994) </ref>, can plan to acquire information and recognize opportunities in the environment (as can Rogue), but relies on powerful, perfect sensing in a simulated world. It is also not clear how pareto handles action failure.
Reference: <author> Simmons, R.; Lin, L.-J.; and Fedor, C. </author> <year> 1990. </year> <title> Autonomous task control for mobile robots. </title> <booktitle> In Proceedings of the IEEE Symposium on Reactive Control. </booktitle>
Reference: <author> Simmons, R. </author> <year> 1994a. </year> <title> Becoming increasingly reliable. </title> <booktitle> In Proceedings of AIPS-94, </booktitle> <pages> 152-157. </pages>
Reference-contexts: One of the goals of the Xavier project is to have the robot move autonomously in an office building reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and recycling cans <ref> (Simmons 1994a) </ref>. Our on-going contribution to this ultimate goal is at the high-level reasoning of the process, allowing the robot to efficiently handle multiple interacting goals, and to learn from its experience.
Reference: <author> Simmons, R. </author> <year> 1994b. </year> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation 10(1). </journal>
Reference: <author> Stone, P., and Veloso, M. </author> <year> 1995. </year> <title> User-guided interleaving of planning and execution. </title> <booktitle> In Proceedings of the European Workshop on Planning. </booktitle>
Reference-contexts: Applying an operator gives the planner additional information (such as consumption of resources) that might not be accurately predictable from the domain model. Prodigy also supports real-world execution of its applicable operators when it is desirable to know the actual outcome of an action <ref> (Stone & Veloso 1995) </ref>; for example, when actions have probabilistic outcomes, or the domain model is incomplete and it is necessary to acquire additional knowledge.
Reference: <author> Tambe, M.; Schwamb, K.; and Rosenbloom, P. S. </author> <year> 1995. </year> <title> Building intelligent pilots for simulated rotary wing aircraft. </title> <booktitle> In Proceedings of the Fifth Conference on Computer Generated Forces and Behavioral Representation. </booktitle>
Reference: <author> Veloso, M. M.; Carbonell, J.; Perez, M. A.; Borrajo, D.; Fink, E.; and Blythe, J. </author> <year> 1995. </year> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence 7(1). </journal>
Reference-contexts: Introduction We have been working towards the goal of building an autonomous robot that is capable of planning and executing high-level tasks in a dynamic environment. To achieve this end, we have been building an integrated framework, Rogue, which combines prodigy, a planning and learning system <ref> (Veloso et al. 1995) </ref>, with Xavier, an autonomous indoor robot (O'Sullivan & Haigh 1994). We aim to create a complete autonomous agent capable of planning, executing and learning in a dynamic real world environment. <p> Applying an operator gives the planner additional information (such as consumption of resources) that might not be accurately predictable from the domain model. Prodigy also supports real-world execution of its applicable operators when it is desirable to know the actual outcome of an action <ref> (Stone & Veloso 1995) </ref>; for example, when actions have probabilistic outcomes, or the domain model is incomplete and it is necessary to acquire additional knowledge.
Reference: <author> Veloso, M. M. </author> <year> 1994. </year> <title> Planning and Learning by Analogical Reasoning. </title> <type> Springer Verlag. (Monograph of Ph.D. thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1992). </year>
Reference: <author> Wang, X. </author> <year> 1995. </year> <title> Learning by observation and practice: An incremental approach for planning operator acquisition. </title> <booktitle> In Proceedings of ML-95. </booktitle>
Reference-contexts: Therefore every agent executing in the real world must have the ability to monitor the execution of its actions, detect when the actions fail, and compensate for these problems. Gil (Gil 1992), Wang <ref> (Wang 1995) </ref> and desJardins (desJardins 1994) learn or improve action models. We take the approach instead of modifying the state description to reflect the outcome of the action, thereby forcing Rogue to find an alternate means to achieve the goal.
References-found: 25

