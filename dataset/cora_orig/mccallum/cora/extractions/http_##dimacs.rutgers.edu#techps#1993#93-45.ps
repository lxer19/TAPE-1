URL: http://dimacs.rutgers.edu/techps/1993/93-45.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1993.html
Root-URL: http://www.cs.rutgers.edu
Title: Efficient Algorithm for Dynamic Text Indexing  
Author: by Ming Gu Martin Farach ; Richard Beigel 
Date: 8808949  
Address: New Haven, CT 06520  UC Berkeley  New Brunswick, New Jersey 08903  New Haven, CT 06520-2158  
Affiliation: Dept. of Computer Science Yale University  and Dept. of Mathematics  Dept. of Computer Science Rutgers University  Dept. of Computer Science Yale University  
Note: An  2 Permanent Member 3 Supported by DIMACS (Center for Discrete Mathematics and Theoretical Computer Science), a National Science Foundation Science and Technology Center under NSF contract STC-8809648. 4 This work was supported by NSF Grants CCR-8958528 and CCR-8808949. DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 93-45 August 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Amir, M. Farach, R. Giancarlo, Z. Galil, and K. Park. </author> <title> Dynamic dictionary matching. </title> <journal> Journal of Computer and System Sciences, </journal> <note> 1993. In press. </note>
Reference-contexts: It was shown in <ref> [1] </ref> that T T s can be converted into T P #T s , # 62 in O (jP j) time. In T P #T s , we will say that a node is new if it was not in T T s .
Reference: [2] <author> A. Amir, M. Farach, R. M. Idury, H. La Poutre, and A. A. Schaffer. </author> <title> Improved dictionary matching. </title> <booktitle> Proc. of the Fourth Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1993. </year>
Reference-contexts: This node will give the longest common prefix between T [a : n] and a suffix of P . However, this algorithm will take time O (jT j) to answer queries, or if we use more clever techniques for finding nearest marked ancestors in trees <ref> [2] </ref>, O (log jT j= log log jT j). We present a method that will compute Rss (W j ) in O (log jP j) time. We give a brief outline. Let E (T ) be the euler tour of tree T .
Reference: [3] <author> B. Baker. </author> <title> A theory of parametrized pattern matching: </title> <booktitle> Algorithms and applications. Proc. of the 25th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 71-80, </pages> <year> 1993. </year>
Reference-contexts: The suffix array, a space economical alternative to the suffix tree, was proposed by Manber and Myers [10]. In [7], Giancarlo introduced the L-suffix tree which he used to solve the static text indexing problem on two dimensional arrays. In <ref> [3] </ref>, Baker introduced the P-suffix tree to solve, amongst other things, the parameterized text indexing problem, that is, the problem of finding occurrences of patterns in text, even when global substitutions have modified occurrences of the pattern (see e.g. the emacs command query-replace).
Reference: [4] <author> R. S. Boyer and J. S. Moore. </author> <title> A fast string searching algorithm. </title> <journal> Comm. ACM, </journal> <volume> 20 </volume> <pages> 762-772, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction Pattern matching is one of the most well-studied fields in computer science. Problems in this field have very broad applications in many areas of computer science. Elegant and efficient algorithms have been developed for exact pattern matching. (e.g. <ref> [4, 9] </ref>). One of the central problems of pattern matching is that of text indexing. In a static text indexing scheme, a fixed text string is preprocessed so that on-line queries about pattern occurrences can be quickly answered. The classical solution to the text indexing problem is the suffix tree.
Reference: [5] <author> M. T. Chen and J. Seiferas. </author> <title> Efficient and elegant subword tree construction. </title> <editor> In A. Apos-tolico and Z. Galil, editors, </editor> <booktitle> Combinatorial Algorithms on Words, chapter 12, </booktitle> <pages> pages 97-107. </pages> <institution> NATO ASI Series F: Computer and System Sciences, </institution> <year> 1985. </year>
Reference-contexts: The classical solution to the text indexing problem is the suffix tree. A suffix tree is a compressed trie of all suffixes of a string, and it has a linear time construction, for constant alphabet size <ref> [11, 5, 12] </ref>. Given the suffix tree, T S s , of a text string S, and a pattern P , it is possible to find all occurrences of P in S in O (jP j + tocc), where tocc is the total number occurrences of P in S.
Reference: [6] <author> Z. Galil. </author> <title> Optimal parallel algorithms for string matching. </title> <booktitle> Proc. of the 16th Ann. ACM Symp. on Theory of Computing, </booktitle> <volume> 67 </volume> <pages> 144-157, </pages> <year> 1984. </year>
Reference: [7] <author> R. Giancarlo. </author> <title> The l-suffix tree of square matrix, with applications. </title> <booktitle> Proc. of the Fourth Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 402-411, </pages> <year> 1993. </year>
Reference-contexts: Based on the success of the suffix tree, several other indexing problems have been tackled with similar approaches. The suffix array, a space economical alternative to the suffix tree, was proposed by Manber and Myers [10]. In <ref> [7] </ref>, Giancarlo introduced the L-suffix tree which he used to solve the static text indexing problem on two dimensional arrays.
Reference: [8] <author> D. Harel and R.E. Tarjan. </author> <title> Fast algorithms for finding nearest common ancestor. </title> <journal> Computer and System Science, </journal> <volume> 13 </volume> <pages> 338-355, </pages> <year> 1984. </year>
Reference-contexts: Then Rss (L (v)) = L (lca (l v ; r v )). These operations can all be done in O (1) using the constant time lca algorithm of Harel and Tarjan <ref> [8] </ref>. Lemma 5.3 For each segment, we can find its representing substring in O (log jP j) time. 6 Wrapping Up 6.1 Updates From Algorithm A, we see that insertions and deletions affect the the decomposition of T (i) into segments.
Reference: [9] <author> D. E. Knuth, J. H. Morris, and V. R. Pratt. </author> <title> Fast pattern matching in strings. </title> <journal> SIAM J. Comp., </journal> <volume> 6 </volume> <pages> 323-350, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction Pattern matching is one of the most well-studied fields in computer science. Problems in this field have very broad applications in many areas of computer science. Elegant and efficient algorithms have been developed for exact pattern matching. (e.g. <ref> [4, 9] </ref>). One of the central problems of pattern matching is that of text indexing. In a static text indexing scheme, a fixed text string is preprocessed so that on-line queries about pattern occurrences can be quickly answered. The classical solution to the text indexing problem is the suffix tree. <p> So we can compactly represent this chain by these different D j 's and their numbers of occurrences in the chain. In <ref> [9] </ref>, Knuth, Morris and Pratt introduced a pattern matching automaton which finds all occurrences of a pattern in a string in linear time.
Reference: [10] <author> U. Manber and E. Myers. </author> <title> Suffix arrays: A new method for on-line string searches. </title> <booktitle> Proc. of the First Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 319-327, </pages> <year> 1990. </year> <month> - 12 </month> - 
Reference-contexts: Based on the success of the suffix tree, several other indexing problems have been tackled with similar approaches. The suffix array, a space economical alternative to the suffix tree, was proposed by Manber and Myers <ref> [10] </ref>. In [7], Giancarlo introduced the L-suffix tree which he used to solve the static text indexing problem on two dimensional arrays.
Reference: [11] <author> E. M. McCreight. </author> <title> A space-economical suffix tree construction algorithm. </title> <journal> Journal of the ACM, </journal> <volume> 23 </volume> <pages> 262-272, </pages> <year> 1976. </year>
Reference-contexts: The classical solution to the text indexing problem is the suffix tree. A suffix tree is a compressed trie of all suffixes of a string, and it has a linear time construction, for constant alphabet size <ref> [11, 5, 12] </ref>. Given the suffix tree, T S s , of a text string S, and a pattern P , it is possible to find all occurrences of P in S in O (jP j + tocc), where tocc is the total number occurrences of P in S.
Reference: [12] <author> P. Weiner. </author> <title> Linear pattern matching algorithm. </title> <booktitle> Proc. 14 IEEE Symposium on Switching and Automata Theory, </booktitle> <pages> pages 1-11, </pages> <year> 1973. </year>
Reference-contexts: The classical solution to the text indexing problem is the suffix tree. A suffix tree is a compressed trie of all suffixes of a string, and it has a linear time construction, for constant alphabet size <ref> [11, 5, 12] </ref>. Given the suffix tree, T S s , of a text string S, and a pattern P , it is possible to find all occurrences of P in S in O (jP j + tocc), where tocc is the total number occurrences of P in S.
References-found: 12

