URL: ftp://ftp.cs.dartmouth.edu/TR/TR93-198.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR93-198/
Root-URL: http://www.cs.dartmouth.edu
Title: The Expected Lifetime of "Single-Address-Space" Operating Systems  
Author: David Kotz and Preston Crow 
Date: Revised March 15, 1996  
Address: Hanover, NH  
Affiliation: Dartmouth College  
Web: URL ftp://ftp.cs.dartmouth.edu/TR/TR93-198.ps.Z  
Note: Available at  
Pubnum: Technical Report PCS-TR93-198  
Abstract: Trends toward shared-memory programming paradigms, large (64-bit) address spaces, and memory-mapped files have led some to propose the use of a single virtual-address space, shared by all processes and processors. To simplify address-space management, some have claimed that a 64-bit address space is sufficiently large that there is no need to ever re-use addresses. Unfortunately, there has been no data to either support or refute these claims, or to aid in the design of appropriate address-space management policies. In this paper, we present the results of extensive kernel-level tracing of the workstations on our campus, and discuss the implications for single-address-space operating systems. We found that single-address-space systems will probably not outgrow the available address space, but only if reasonable space-allocation policies are used, and only if the system can adapt as larger address spaces become available.
Abstract-found: 1
Intro-found: 1
Reference: [Baker et al. 1991] <author> M. Baker, J. Hartman, M. Kupfer, K. Shirriff, and J. Ousterhout. </author> <title> Measurements of a distributed file system. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 198-212, </pages> <year> 1991. </year>
Reference-contexts: Acceleration in the rate of address-space consumption is likely to depend significantly on changing user habits (for example, the advent of multimedia applications may encourage larger processes and larger files). This phenomenon was also noticed in a retrospective study of file-system throughput requirements <ref> [Baker et al. 1991] </ref>: "The net result is an increase in computing power per user by a factor of 200 to 500, but the throughput requirements only increased by about a factor of 20 to 30. ...
Reference: [Bartoli et al. 1993] <author> A. Bartoli, S. Mullender, and M. van der Valk. </author> <title> Wide-address spaces | exploring the design space. </title> <journal> ACM Operating Systems Review, </journal> <volume> 27 </volume> <pages> 11-17, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: They concede that conserving and re-using address space is probably necessary. Bartoli et al. point out that that "if ten machines create objects at a rate of ten gigabytes a minute, the [64-bit] address space will last 300 years" <ref> [Bartoli et al. 1993] </ref>. Hence, a collection of 200 machines would 2 only last 15 years, and larger collections would likely be out of the question.
Reference: [Broessler et al. 1987] <author> P. Broessler, F. Henskens, J. Keedy, and J. Rosenberg. </author> <title> Addressing objects in a very large distributed virtual memory. </title> <booktitle> In Distributed Processing. Proceedings of the IFIP WWG 10.3 Working Conference, </booktitle> <pages> pages 105-116, </pages> <year> 1987. </year>
Reference-contexts: In Section 3, we discuss our trace collection and the analysis of current usage patterns. In Section 4, we show how we used this data to predict the lifetime of single-address-space operating systems. Finally, in Section 5, we summarize. 2 Background The MONADS-PC project <ref> [Broessler et al. 1987, Rosenberg et al. 1992, Rosenberg 1992] </ref> was one of the first systems to place all storage (all processes and all files) in a single, distributed, virtual-address space.
Reference: [Chase et al. 1992] <author> J. Chase, H. Levy, M. Baker-Harvey, and E. Lazowska. </author> <title> How to use a 64-bit virtual address space. </title> <type> Technical Report 92-03-02, </type> <institution> University of Washington, </institution> <month> March </month> <year> 1992. </year>
Reference: [Chase et al. 1994] <author> J. Chase, H. Levy, M. Feeley, and E. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12, </volume> <month> May </month> <year> 1994. </year>
Reference-contexts: With such systems, the entire memory hierarchy is mapped into a single large address space, including files and processes, and often remote memories of other machines. A good discussion of the advantages, disadvantages, and other issues concerning such systems can be found in <ref> [Chase et al. 1994] </ref>. One of the major problems with single-address-space operating systems is managing the address space. Once space has been allocated, it is often preferable not to reallocate the same space for other purposes. Hence, over time, the address space will eventually be consumed. <p> Hemlock dynamically links code at run time to allow for different instances of global data. Opal <ref> [Chase et al. 1994] </ref> uses other techniques to avoid Hemlock's "private" 32-bit subspace and dynamic linking.
Reference: [Garrett et al. 1992] <author> W. Garrett, R. Bianchini, L. Kontothanassis, R. McCallum, J. Thomas, R. Wisniewski, and M. Scott. </author> <title> Dynamic sharing and backward compatibility on 64-bit machines. </title> <type> Technical Report 418, </type> <institution> Univ. of Rochester Computer Science Department, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: A newer version of the system, MONADS-MM [Koch and Rosenberg 1990], uses 128-bit addresses, extending the address-space numbers to 96 bits and the offsets to 32 bits. The MONADS project does not report on any experience with a long-running system and its address-space consumption. Hemlock <ref> [Garrett et al. 1992] </ref> proposes a single 64-bit address space. Persistent and shared data are allocated a non-reusable segment of the address space. <p> Different sizes would not alter the qualitative results observed. 10 term. (Note that the 32-bit subspace of Hemlock <ref> [Garrett et al. 1992] </ref> is also similar to the fixed re-use policy.) Thus, we measured only re-use, exact no-reuse, and fixed no-reuse. File allocation. Though Figure 1 implies that file data were insignificant, it does not account for fragmentation caused by address-space allocation policies in a single-address-space system. <p> This unrealistic policy was useful for comparison. fixed: A fixed 4 GB segment was allocated for each file when it was created (as in Hemlock <ref> [Garrett et al. 1992] </ref>). Any extraneous space was never recovered. chunked: Growing files were allocated virtual-address space in chunks, beginning with a one-page chunk for a new file. Once the latest chunk was full, a new chunk of twice the size was allocated.
Reference: [Glass 1991] <author> B. Glass. </author> <title> The Mips R4000. </title> <journal> Byte Magazine, </journal> <volume> 16 </volume> <pages> 271-282, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Siewiorek et al 13 Intel 4004 (12 bits), Intel 8008 (14 bits), Intel 8080 (16 bits), Intel 8086 (20 bits), Motorola 68000 (32 bits), Intel 80386 (48 bits), and MIPS R-4000 and HP 9000/700 (64 bits). The data come from [Siewiorek et al. 1982, page 5], [Tanenbaum 1990], and <ref> [Glass 1991] </ref>. noticed that available virtual address space has grown by about one bit per year [Siewiorek et al. 1982], but their conclusions are based on old data.
Reference: [Jain 1991] <author> R. Jain. </author> <title> The Art of Computer Systems Performance Analysis, page 210. </title> <publisher> Wiley, </publisher> <year> 1991. </year>
Reference-contexts: We ran 25 trials with the standard kernel and with the tracing kernel. We discarded the first trial in each case, due to a cold file cache. An unpaired t-test <ref> [Jain 1991] </ref> showed the difference to be insignificant at the 99% confidence level, implying that our tracing apparently had no significant effect on performance.
Reference: [Koch and Rosenberg 1990] <author> D. Koch and J. Rosenberg. </author> <title> A secure RISC-based architecture supporting data persistence. </title> <booktitle> In Proceedings of the International Workshop on Computer Architectures to Support Security and Persistence of Information, </booktitle> <pages> pages 188-201, </pages> <year> 1990. </year> <month> 22 </month>
Reference-contexts: They use custom hardware that partitions the bits of an address into two fields: a 32-bit address-space number and a 28-bit offset. The address-space numbers are never re-used. A newer version of the system, MONADS-MM <ref> [Koch and Rosenberg 1990] </ref>, uses 128-bit addresses, extending the address-space numbers to 96 bits and the offsets to 32 bits. The MONADS project does not report on any experience with a long-running system and its address-space consumption. Hemlock [Garrett et al. 1992] proposes a single 64-bit address space.
Reference: [Kotz and Crow 1993] <author> D. Kotz and P. Crow. </author> <title> The expected lifetime of "single-address-space" operating systems. </title> <type> Technical Report PCS-TR93-198, </type> <institution> Dept. of Math and Computer Science, Dartmouth College, </institution> <month> October </month> <year> 1993. </year> <note> Revised in 1994 to appear in SIGMETRICS '94, and revised again on March 15, </note> <year> 1996. </year>
Reference: [Lee 1989] <author> R. Lee. </author> <title> Precision architecture. </title> <journal> IEEE Computer, </journal> <volume> 22 </volume> <pages> 78-91, </pages> <month> January </month> <year> 1989. </year>
Reference: [Mullender 1993] <editor> S. Mullender, editor. </editor> <booktitle> Distributed Systems, </booktitle> <pages> pages 391-392. </pages> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1993. </year>
Reference: [Patterson and Hennessy 1990] <author> D. Patterson and J. Hennessy. </author> <booktitle> Computer Architecture A Quantitative Approach, </booktitle> <pages> pages 16-17. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: Patterson and Hennessy claim that memory requirements for a typical program have grown by a factor of 1.5 to 2 every year, consuming 1/2-1 address bits per year <ref> [Patterson and Hennessy 1990] </ref>. At this rate, an expansion from 32 bits to 64 bits would only last 32-64 years for traditional operating systems, and a single-address-space operating system would run out sooner. <p> Disks have been doubling in capacity every three years, and DRAMs have been quadrupling in capacity every three years, while per-process (physical) memory usage doubles about every one to two years 12 <ref> [Patterson and Hennessy 1990] </ref>. It seems reasonable to expect the rate of address-space consumption to grow exponentially as well, though perhaps at a different rate.
Reference: [Rosenberg et al. 1992] <author> J. Rosenberg, J. Reedy, and D. Abramson. </author> <title> Addressing mechanisms for large virtual memories. </title> <journal> The Computer Journal, </journal> <volume> 35 </volume> <pages> 24-374, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: In Section 3, we discuss our trace collection and the analysis of current usage patterns. In Section 4, we show how we used this data to predict the lifetime of single-address-space operating systems. Finally, in Section 5, we summarize. 2 Background The MONADS-PC project <ref> [Broessler et al. 1987, Rosenberg et al. 1992, Rosenberg 1992] </ref> was one of the first systems to place all storage (all processes and all files) in a single, distributed, virtual-address space.
Reference: [Rosenberg 1992] <author> J. Rosenberg. </author> <title> Architectural and operating system support for orthogonal persistence. </title> <journal> Computing Systems, </journal> <volume> 5 </volume> <pages> 305-335, </pages> <month> Summer </month> <year> 1992. </year>
Reference-contexts: In Section 3, we discuss our trace collection and the analysis of current usage patterns. In Section 4, we show how we used this data to predict the lifetime of single-address-space operating systems. Finally, in Section 5, we summarize. 2 Background The MONADS-PC project <ref> [Broessler et al. 1987, Rosenberg et al. 1992, Rosenberg 1992] </ref> was one of the first systems to place all storage (all processes and all files) in a single, distributed, virtual-address space.
Reference: [Satyanarayanan 1989] <author> M. Satyanarayanan. </author> <title> Andrew file system benchmark. </title> <institution> Carnegie-Mellon University, </institution> <year> 1989. </year>
Reference-contexts: While it is not a new technique, we highly recommend this simple, unobtrusive, portable mechanism for other trace-collection efforts. To measure the performance overhead of our tracing activity, we ran 25 trials of the Andrew benchmark <ref> [Satyanarayanan 1989] </ref> on the standard Ultrix 4.3 kernel and on our instrumented kernel. The Andrew benchmark extensively uses most of the system calls we modified for tracing, by creating, searching, and deleting files, and compiling programs. We ran 25 trials with the standard kernel and with the tracing kernel.
Reference: [Siewiorek et al. 1982] <author> D. Siewiorek, C. Bell, and A. Newell, </author> <title> editors. Computer Structures: principles and examples. </title> <publisher> McGraw-Hill, </publisher> <address> second edition, </address> <year> 1982. </year>
Reference-contexts: Siewiorek et al 13 Intel 4004 (12 bits), Intel 8008 (14 bits), Intel 8080 (16 bits), Intel 8086 (20 bits), Motorola 68000 (32 bits), Intel 80386 (48 bits), and MIPS R-4000 and HP 9000/700 (64 bits). The data come from <ref> [Siewiorek et al. 1982, page 5] </ref>, [Tanenbaum 1990], and [Glass 1991]. noticed that available virtual address space has grown by about one bit per year [Siewiorek et al. 1982], but their conclusions are based on old data. <p> The data come from [Siewiorek et al. 1982, page 5], [Tanenbaum 1990], and [Glass 1991]. noticed that available virtual address space has grown by about one bit per year <ref> [Siewiorek et al. 1982] </ref>, but their conclusions are based on old data. In Figure 3, we plot the virtual-address-bit count of microprocessor chips against the first year of introduction, for those chips that set a new maximum virtual address space among commercial, general-purpose microprocessors. <p> In Figure 3, we plot the virtual-address-bit count of microprocessor chips against the first year of introduction, for those chips that set a new maximum virtual address space among commercial, general-purpose microprocessors. We also plot two possible growth curves: the original from <ref> [Siewiorek et al. 1982] </ref> (one bit per year), and a new a linear regression fit (2.676 bits per year, with correlation coefficient 0.9824): address bits (year) = 2:676 fi (year 1967) 2:048 Address bits generally become available in increments, every few years, rather than continuously.
Reference: [Sites 1993] <author> R. </author> <title> Sites. Alpha AXP architecture. </title> <journal> Communications of the ACM, </journal> <volume> 36 </volume> <pages> 33-44, </pages> <month> February </month> <year> 1993. </year>
Reference: [Tanenbaum 1990] <author> A. Tanenbaum. </author> <title> Structured Computer Organization, page 27. </title> <publisher> Prentice Hall, </publisher> <address> third edition, </address> <year> 1990. </year>
Reference-contexts: Siewiorek et al 13 Intel 4004 (12 bits), Intel 8008 (14 bits), Intel 8080 (16 bits), Intel 8086 (20 bits), Motorola 68000 (32 bits), Intel 80386 (48 bits), and MIPS R-4000 and HP 9000/700 (64 bits). The data come from [Siewiorek et al. 1982, page 5], <ref> [Tanenbaum 1990] </ref>, and [Glass 1991]. noticed that available virtual address space has grown by about one bit per year [Siewiorek et al. 1982], but their conclusions are based on old data.
Reference: [Wakerly 1989] <author> J. Wakerly. </author> <title> Microcomputer Architecture and Programming: The 68000 Family, page 150. </title> <publisher> John Wiley and Sons, </publisher> <year> 1989. </year> <month> 23 </month>
Reference-contexts: For example, all global variables are referenced as an offset from a base register, allowing separate storage for each instance of the program (this technique is also used in the Macintosh operating system <ref> [Wakerly 1989] </ref>). They concede that conserving and re-using address space is probably necessary. Bartoli et al. point out that that "if ten machines create objects at a rate of ten gigabytes a minute, the [64-bit] address space will last 300 years" [Bartoli et al. 1993].
References-found: 20

