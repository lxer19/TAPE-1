URL: http://www.cs.umd.edu/users/egemen/papers/paper1/paper.ps
Refering-URL: http://www.cs.umd.edu/users/egemen/papers/paper.html
Root-URL: 
Title: Comparison of Two Image-Space Subdivision Algorithms for Direct Volume Rendering on Distributed-Memory Multicomputers  
Author: Egemen Tanin, Tahsin M. Kur~c, Cevdet Aykanat, Bulent Ozgu~c 
Note: SP2 system are presented and discussed.  
Address: 06533, Ankara TURKEY  
Affiliation: Dept. of Computer Eng. and Information Sci. Bilkent University, Bilkent  
Abstract: Direct Volume Rendering (DVR) is a powerful technique for visualizing volumetric data sets. However, it involves intensive computations. In addition, most of the volumetric data sets consist of large number of 3D sampling points. Therefore, visualization of such data sets also requires large computer memory space. Hence, DVR is a good candidate for parallelization on distributed-memory multicomputers. In this work, image-space parallelization of Raycasting based DVR for unstructured grids on distributed-memory multicomputers is presented and discussed. In order to visualize unstructured volumetric datasets where grid points of the dataset are irregularly distributed over the 3D space, the underlying algorithms should resolve the point location and view sort problems of the 3D grid points. In this paper, these problems are solved using a Scanline Z-buffer based algorithm. Two image space subdivision heuristics, namely horizontal and recursive rectangular subdivision heuristics, are utilized to distribute the computations evenly among the processors in the rendering phase. The horizontal subdivision algorithm divides the image space into horizontal bands composed of consecutive scanlines. In the recursive subdivision algorithm, the image space is divided into rectangular subregions recursively. The experimental performance evaluation of the horizontal and recursive subdivision algorithms on an IBM 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Challinger, J. </author> <title> Parallel Volume Rendering for Curvilinear Volumes. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 14-21. </pages>
Reference-contexts: The view sort problem refers to the determination of the correct intersection order of the ray with the voxels along its way. In this paper, the point location and the view sort problems are solved using a Scanline Z-buffer based algorithm, which is introduced by <ref> [1, 2] </ref> in volume rendering domain. The reason for this is to solve the problem of fast point location determination process and view sorting efficiently for unstructured grids. Although DVR is a common tool for visualization, it operates on volume data representation that requires a large amount of memory. <p> Most of the work for parallelization of DVR has been carried out using structured grids [3, 4, 5]. Recently some parallel methods have been developed for unstructured grids <ref> [1, 2] </ref> which form a basis for this research. These recent approaches are done on shared memory architectures which does not solve many of the problems of volume rendering on distributed-memory architectures. These approaches use scattered decomposition for task distribution and hence can be effectively used in shared memory architectures. <p> In this work, we exploit the Scanline Z-buffer algorithm widely used in polygon rendering to resolve the point location and view sort problems. The same idea has been recently used in the parallelization of DVR on shared-memory multiprocessors <ref> [1, 2] </ref>. The standard Scanline Z-buffer algorithm is used for ras-terizing the polygons but the only deviation occurs in the rendering step where in volume rendering each pixel keeps a linked list of polygons for compositing and finding a final pixel color value.
Reference: 2. <author> Challinger, J. </author> <title> Scalable Parallel Volume Raycasting for Nonrectilinear Computational Grids. </title> <booktitle> In Proceedings of the Parallel Rendering Symposium (1993), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 81-88. </pages>
Reference-contexts: The view sort problem refers to the determination of the correct intersection order of the ray with the voxels along its way. In this paper, the point location and the view sort problems are solved using a Scanline Z-buffer based algorithm, which is introduced by <ref> [1, 2] </ref> in volume rendering domain. The reason for this is to solve the problem of fast point location determination process and view sorting efficiently for unstructured grids. Although DVR is a common tool for visualization, it operates on volume data representation that requires a large amount of memory. <p> Most of the work for parallelization of DVR has been carried out using structured grids [3, 4, 5]. Recently some parallel methods have been developed for unstructured grids <ref> [1, 2] </ref> which form a basis for this research. These recent approaches are done on shared memory architectures which does not solve many of the problems of volume rendering on distributed-memory architectures. These approaches use scattered decomposition for task distribution and hence can be effectively used in shared memory architectures. <p> In this work, we exploit the Scanline Z-buffer algorithm widely used in polygon rendering to resolve the point location and view sort problems. The same idea has been recently used in the parallelization of DVR on shared-memory multiprocessors <ref> [1, 2] </ref>. The standard Scanline Z-buffer algorithm is used for ras-terizing the polygons but the only deviation occurs in the rendering step where in volume rendering each pixel keeps a linked list of polygons for compositing and finding a final pixel color value.
Reference: 3. <author> Corrie, B., and Mackerras, P. </author> <title> Parallel Volume Rendering and Data Coherence. </title> <booktitle> In Proceedings of the Parallel Rendering Symposium (1993), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 23-26. </pages>
Reference-contexts: Therefore, visualizing the results on the same parallel architecture avoids the cost of transferring large volume of data to sequential graphics workstations for visualization process. Most of the work for parallelization of DVR has been carried out using structured grids <ref> [3, 4, 5] </ref>. Recently some parallel methods have been developed for unstructured grids [1, 2] which form a basis for this research. These recent approaches are done on shared memory architectures which does not solve many of the problems of volume rendering on distributed-memory architectures.
Reference: 4. <author> Elvins, T. T. </author> <title> Volume Rendering on a Distributed Memory Parallel Computer. </title> <booktitle> In Proceedings of Visualization '92 (1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 93-98. </pages>
Reference-contexts: Therefore, visualizing the results on the same parallel architecture avoids the cost of transferring large volume of data to sequential graphics workstations for visualization process. Most of the work for parallelization of DVR has been carried out using structured grids <ref> [3, 4, 5] </ref>. Recently some parallel methods have been developed for unstructured grids [1, 2] which form a basis for this research. These recent approaches are done on shared memory architectures which does not solve many of the problems of volume rendering on distributed-memory architectures.
Reference: 5. <author> Hsu, W. M. </author> <title> Segmented Ray Casting For Data Parallel Volume Rendering. </title> <booktitle> In Proceedings of the Parallel Rendering Symposium (1993), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 7-14. </pages>
Reference-contexts: Therefore, visualizing the results on the same parallel architecture avoids the cost of transferring large volume of data to sequential graphics workstations for visualization process. Most of the work for parallelization of DVR has been carried out using structured grids <ref> [3, 4, 5] </ref>. Recently some parallel methods have been developed for unstructured grids [1, 2] which form a basis for this research. These recent approaches are done on shared memory architectures which does not solve many of the problems of volume rendering on distributed-memory architectures.
Reference: 6. <author> Levoy, M. </author> <title> Display of Surfaces From Volume Data. </title> <journal> IEEE Computer Graphics and Applications 8, </journal> <volume> 3 (1988), </volume> <pages> pp. 29-37. </pages>
Reference-contexts: One of the approaches used in direct volume rendering for visualizing these 3D voxel based data sets is Raycasting, which is the basis of this research. This approach is an image-space approach and mainly uses ray shooting from each pixel of the image plane and sampling along its way <ref> [6, 7, 9] </ref>. In order to visualize unstructured volumetric data sets, where grid points of the data set are distributed irregularly over 3D space, the underlying algorithms should resolve the point location and view sort problems.
Reference: 7. <author> Levoy, M. </author> <title> Efficient Ray Tracing of Volume Data. </title> <journal> ACM Transactions on Graphics 9, </journal> <volume> 3 (1990), </volume> <pages> pp. 245-261. </pages>
Reference-contexts: One of the approaches used in direct volume rendering for visualizing these 3D voxel based data sets is Raycasting, which is the basis of this research. This approach is an image-space approach and mainly uses ray shooting from each pixel of the image plane and sampling along its way <ref> [6, 7, 9] </ref>. In order to visualize unstructured volumetric data sets, where grid points of the data set are distributed irregularly over 3D space, the underlying algorithms should resolve the point location and view sort problems.
Reference: 8. <author> Shirley, P., and Tuchman, A. </author> <title> A Polygonal Approximation to Direct Scalar Volume Rendering. </title> <booktitle> Computer Graphics 24, 5 (1990), </booktitle> <pages> pp. 63-70. </pages> <booktitle> In Proceedings of San Diego Workshop on Volume Visualization. </booktitle>
Reference-contexts: This operation once completed can be saved and used forever. Algorithms exist for triangulating a given volumetric dataset <ref> [8] </ref>. Here, and hereafter, we will mainly assume triangles as our inputs for the sake of simplicity. The Scanline Z-buffer based algorithm is given in Fig. 1 as a flow-chart. In the proposed algorithm, we move from scanline to scanline and from pixel to pixel one-by-one.
Reference: 9. <author> Upson, C., and Keeler, M. VBUFFER: </author> <title> Visible Volume Rendering. </title> <booktitle> Computer Graphics 22, 4 (1988), </booktitle> <pages> pp. </pages> <month> 59-64. </month> <title> In Proceedings of SIGGRAPH '88. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: One of the approaches used in direct volume rendering for visualizing these 3D voxel based data sets is Raycasting, which is the basis of this research. This approach is an image-space approach and mainly uses ray shooting from each pixel of the image plane and sampling along its way <ref> [6, 7, 9] </ref>. In order to visualize unstructured volumetric data sets, where grid points of the data set are distributed irregularly over 3D space, the underlying algorithms should resolve the point location and view sort problems.
References-found: 9

