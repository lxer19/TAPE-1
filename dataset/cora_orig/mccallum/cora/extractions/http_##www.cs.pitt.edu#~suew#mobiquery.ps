URL: http://www.cs.pitt.edu/~suew/mobiquery.ps
Refering-URL: http://www.cs.pitt.edu/~suew/
Root-URL: http://www.cs.pitt.edu/~suew
Email: massari@infokit.dis.uniroma1.it  suew,panos@cs.pitt.edu  
Title: Supporting Mobile Database Access through Query by Icons  
Author: ANTONIO MASSARI SUSAN WEISSMAN, PANOS K. CHRYSANTHIS 
Keyword: Mobile Query Processing, Iconic Query Language, Mobile Computing, Semantic Distance, Semantic and Object Model, Path Computations  
Address: Rome "La Sapienza", 00198 Roma, Italy  Pittsburgh, Pittsburgh, PA 15260, U.S.A.  
Affiliation: Dipart. di Informatica e Sistemistica, University of  Department of Computer Science, University of  
Note: 1-23 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Abstract: In this paper, we present both the theoretical framework and a prototype of a query processing facility that supports the exploration and query of databases from a mobile computer based on the manipulation of icons. Icons are particularly suitable for mobile computing since they can be manipulated without typing. The facility requires no special knowledge of the location or the content of the remote database nor understanding of the details of the database schema. Its iconic query language involves no path specification in composing a query. The query facility provides metaquery tools that assist in the formulation of complete queries in an incremental manner on the mobile computer and without involving access to the actual data in the remote database. By not requiring constant access and caching of the actual data, it is able to effectively cope with the inherent limitations in memory and battery life on the mobile computer, disconnections and restricted communication bandwidth, and the high monetary cost of wireless communication. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Abiteboul S., and A. Bonner. </author> <title> Objects and Views. </title> <booktitle> Proceedings of the Int'l Conference ACM-SIGMOD, </booktitle> <address> Denver, Colorado, </address> <pages> pp. 238-247, </pages> <month> June </month> <year> 1991. </year>
Reference: 2. <author> Agrawal R., S. Dar, and H. Jagadish. </author> <title> Direct Transitive Closure Algorithms: Design and Performance Evaluation. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 15(3) </volume> <pages> 427-458, </pages> <year> 1990. </year>
Reference-contexts: Every time a step is added to an existing GA path, a new GA is formed and its associated real-valued semantic distance value (sd-value) is computed by the function Semdfl p . The generation of GAs is an instance of a path computation <ref> [2, 16] </ref>, and is clearly the most computationally expensive part of QBI. The cost of the semantic distance function depends on its complexity which, in turn, is a measure of its accuracy to express the meaningfulness of a GA. <p> Given that the first two parameters, free memory and energy level, vary over time, the threshold o dynamically changes as well. The initial GA evaluator in our QBI prototype traverses the typed-graph in a depth-first search (DFS) manner. Although this is also the approach traditionally used in path computations <ref> [2, 16] </ref>, it has turned out to be unsuitable for mobile operations. First, since it does not generate GAs sorted based on their sd-value, an additional sorting phase is required for the presentation. More importantly, the DFS strategy is not compatible with a dynamically defined threshold.
Reference: 3. <author> Alonso R., E. Haber, and H. Korth. </author> <title> A Database Interface for Mobile Computers. </title> <booktitle> Proceedings of the 1992 Globecom Workshop on Networking of Personal Communication Applications, </booktitle> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: users by means of hand-held computers equipped with a wireless interface, should be able (1) to compose a database query with minimum or no knowledge of how the database is structured and where it is located, and (2) to compose the query with a few key selections and minimum typing <ref> [3] </ref>. Motivated by these requirements, we present in this paper a query processing facility suitable for mobile database applications. <p> The need for an alternative visual query paradigm for mobile, pen-based computers that takes into consideration the requirements of mobile users, such as exploration of a large database schema, and the limitations of mobile computers, such as small screen and no keyboard, was first identified in <ref> [3] </ref>. As opposed to QBI, the proposed alternative is form-based whereas the external data model is a multi-level semantic data model which uses the universal relation approach at different levels to coalesce related information and eliminate low-level information not relevant to the user.
Reference: 4. <author> Alonso R., and H. Korth. </author> <booktitle> Database Issues in Nomadic Computing. Proceedings of ACM SIGMOD Int'l Conference on Management of Data, </booktitle> <pages> pp. 388-392, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The query processing facility, called Query By Icons (QBI), considers the inherent limitations in memory and battery power on the mobile computer, disconnections of the mobile computer for substantial periods, restricted communication bandwidth, and high monetary cost of wireless communication <ref> [4, 15] </ref>. 2 The salient features of QBI are the following: * An iconic visual language interface, which allows a user to compose a database query by manipulating icons using a pointing device like a light-pen on a handheld pen-computer.
Reference: 5. <author> Angelaccio M., T. Catarci, and G. Santucci. QBD*: </author> <title> A Graphical Query Language with Recursion. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(10) </volume> <pages> 1150-1163, </pages> <year> 1990. </year>
Reference-contexts: Semantic data models go even further than the relational model in terms of providing the user with a more abstract logical view of the data. Of these, the ER model [10] is often used as the external data model in existing visual query systems. GORDAS [12], QBD fl <ref> [5] </ref>, GRAQULA [28, 33], and GQL/ER [34] are examples of graphical visual query systems that provide the user with an ER diagram of the schema. Queries in these systems are formulated by drawing nodes and edges to be matched in the schema diagram.
Reference: 6. <author> Badre A. N., T.Catarci, A.Massari, and G.Santucci. </author> <title> Comparative Effectiveness of a Diagrammatic vs. an Iconic Query Language. </title> <note> (submitted for publication), </note> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: As opposed to QBI, Ski is diagram based and supports navigation through the paths of the underlying database schema. 20 Compared to diagrammatic visual languages, the ease and effectiveness of QBI with respect to unsophisticated users was established through an empirical evaluation of QBI and QBD fl <ref> [24, 6] </ref>. In this study users were classified into unskilled users with little, if any, training in databases, and skilled ones. The two performance measures used were the time in seconds to complete a query and accuracy of the query.
Reference: 7. <author> Batini C., T. Catarci, M.F. Costabile and S. Levialdi. </author> <title> Visual Query Systems. </title> <type> Technical Report No.04.91. </type> <institution> Dipartimento di Informatica e Sistemistica, Universita' di Roma "La Sapienza", </institution> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: In the area of graphical user interfaces a large amount of research has been produced with the purpose of facilitating user interaction while still maintaining the high expressive power of the query language <ref> [7, 20] </ref>. Most of the proposed systems adopt form, tabular, or diagram based visual paradigms. Early examples of these types of visual query languages that use a relational external data model are QBE [35] and G + [11]. In QBE, the query is made by filling in templates of relations.
Reference: 8. <author> Bono G., and P. Ficorilli. </author> <title> Natural Language Restatement of Queries Expressed in a Graphical Language. </title> <booktitle> Proceedings of the 11th Int'l Conference on Entity-Relationship Approach, Germany, </booktitle> <pages> pp. 357-374, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Below the image is a label that allows for easy identification. A full natural language sentence description is also provided that can be read by pointing at the icon. This description is automatically generated based on the method described in <ref> [8] </ref> and is essential for disambiguating the meaning between various icons. Even the shape of the icon conveys information.
Reference: 9. <author> Catarci T., and G. Santucci. </author> <title> Fundamental Graphical Primitives for Visual Query Languages. </title> <journal> Information Systems, </journal> <volume> 3(18), </volume> <pages> pp. 75-98, </pages> <year> 1993. </year>
Reference-contexts: Thus, in QBI, each focal object provides a view of the whole underlying database from its own viewpoint. Let us illustrate the concept of GAs through an example. Assume the underlying database schema depicted in Figure 1 using the Binary Graph Model <ref> [9, 25] </ref>, which also forms QBI's theoretical framework (see Section 4). <p> In further sections, we will show how the internal algorithms for GA generation were improved for a mobile environment. 4. QBI's Theoretical Framework Internally, QBI uses the Binary Graph Model (BGM) <ref> [9, 25] </ref>, a semantic data model, for capturing most of the aspects of the structure of the remote database.
Reference: 10. <author> Chen P.P. </author> <title> The Entity Relationship Model toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1), </volume> <year> 1976. </year>
Reference-contexts: Specifically, a user perceives the underlying database as a set of classes, each having several properties called generalized attributes (GA). In the same way that an attribute in the ER model <ref> [10] </ref> represents an elementary property of an entity, a GA expresses a generic property of a class. Further, GAs encapsulate both implicit and explicit relationships among the objects within each focal object. That is, other object classes are viewed as GAs of the focal object. <p> Semantic data models go even further than the relational model in terms of providing the user with a more abstract logical view of the data. Of these, the ER model <ref> [10] </ref> is often used as the external data model in existing visual query systems. GORDAS [12], QBD fl [5], GRAQULA [28, 33], and GQL/ER [34] are examples of graphical visual query systems that provide the user with an ER diagram of the schema.
Reference: 11. <author> Cruz I. F., A. O. Mendelzon, and P.T. Wood. G+: </author> <title> Recursive Queries without Recursion. </title> <booktitle> Proceedings of the 2nd Int'l Conference on Expert Database Systems, </booktitle> <pages> pp. 355-368, </pages> <year> 1988. </year>
Reference-contexts: Most of the proposed systems adopt form, tabular, or diagram based visual paradigms. Early examples of these types of visual query languages that use a relational external data model are QBE [35] and G + <ref> [11] </ref>. In QBE, the query is made by filling in templates of relations. Users do not need to remember attribute names or variable names. Queries are specified by typing example tuples expressing the information that is being requested.
Reference: 12. <author> Elmasri R., and G. Wiederhold. GORDAS: </author> <title> A Formal High-level Query Language for the Entity-Relationship Model. </title> <booktitle> Proceedings of the 2nd Int'l Conference on Entity-Relationship Approach, </booktitle> <address> Washington, D.C., </address> <pages> pp. 49-72, </pages> <year> 1981. </year>
Reference-contexts: Semantic data models go even further than the relational model in terms of providing the user with a more abstract logical view of the data. Of these, the ER model [10] is often used as the external data model in existing visual query systems. GORDAS <ref> [12] </ref>, QBD fl [5], GRAQULA [28, 33], and GQL/ER [34] are examples of graphical visual query systems that provide the user with an ER diagram of the schema. Queries in these systems are formulated by drawing nodes and edges to be matched in the schema diagram.
Reference: 13. <author> Gallager R.G.. </author> <title> Information Theory and Reliable Communication. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1968. </year>
Reference-contexts: The statistical information can be used to compute the entropy of a GA which is the measure of uncertainty in the information theory <ref> [13] </ref>. The entropy clearly captures the fact that a user considers a GA only if the GA conveys some information.
Reference: 14. <author> Groette I.P., and E.G.Nillson. SICON: </author> <title> an Icon Presentation Module for an E-R Database. </title> <booktitle> Proceedings of the 7th Int'l Conference on Entity Relationship Approach, </booktitle> <address> Roma, Italy, </address> <pages> pp. 271-289, </pages> <year> 1988. </year> <month> 23 </month>
Reference-contexts: However, the small screen space of the typical notebook or palmtop computer and the limited possibility of using a keyboard, make the iconic approach particularly suitable for the users of a mobile system. In general, the main difference between QBI and the other iconic interfaces proposed in the literature <ref> [14, 30, 29] </ref> is in the way icons are defined and used for expressing concepts. In particular, other systems do not usually assign uniform semantics to icons.
Reference: 15. <author> Imielinski T and B. R. Badrinath. </author> <title> Mobile Wireless Computing: Challenges in Data Management. </title> <journal> Communication of ACM, </journal> <volume> 37(10) </volume> <pages> 18-28, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The query processing facility, called Query By Icons (QBI), considers the inherent limitations in memory and battery power on the mobile computer, disconnections of the mobile computer for substantial periods, restricted communication bandwidth, and high monetary cost of wireless communication <ref> [4, 15] </ref>. 2 The salient features of QBI are the following: * An iconic visual language interface, which allows a user to compose a database query by manipulating icons using a pointing device like a light-pen on a handheld pen-computer.
Reference: 16. <author> Ioannidis Y. E., R. Ramakrishnan, and L. Winger. </author> <title> Transitive Closure Algorithms Based on Graph Traversal. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 18(3) </volume> <pages> 512-576, </pages> <year> 1993. </year>
Reference-contexts: Every time a step is added to an existing GA path, a new GA is formed and its associated real-valued semantic distance value (sd-value) is computed by the function Semdfl p . The generation of GAs is an instance of a path computation <ref> [2, 16] </ref>, and is clearly the most computationally expensive part of QBI. The cost of the semantic distance function depends on its complexity which, in turn, is a measure of its accuracy to express the meaningfulness of a GA. <p> Given that the first two parameters, free memory and energy level, vary over time, the threshold o dynamically changes as well. The initial GA evaluator in our QBI prototype traverses the typed-graph in a depth-first search (DFS) manner. Although this is also the approach traditionally used in path computations <ref> [2, 16] </ref>, it has turned out to be unsuitable for mobile operations. First, since it does not generate GAs sorted based on their sd-value, an additional sorting phase is required for the presentation. More importantly, the DFS strategy is not compatible with a dynamically defined threshold.
Reference: 17. <author> Ioannidis Y. E., and Y. Lashkari. </author> <title> Incomplete Path Expressions and their Disambiguation. </title> <booktitle> Proceedings of the ACM SIGMOD Int'l Conference on Management of Data, </booktitle> <address> Minneapolis, MI, </address> <pages> pp. 138-149, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: A similar notion to that of semantic distance function in QBI is the notion of semantic length in the generation of complete queries from incomplete path expressions <ref> [17] </ref>. Definition 5.3 Semantics Distance Function. Let fl p be a GA of a class node n c . <p> In [18], path expressions are examined and form the basis of the XSQL system. XSQL allows the specification of path variables by means of which incomplete path expressions can be specified. In <ref> [17] </ref>, path expressions are considered to be abbreviated queries within a user interface to a database system. Given an ambiguous path expression which could result in multiple possible paths, the task is to find those completions most likely intended by the user.
Reference: 18. <author> Kifer M., Kim W., and Sagiv Y. </author> <title> Querying Object Oriented Databases. </title> <booktitle> Proceedings of the ACM SIGMOD Int'l Conference on Management of Data, </booktitle> <pages> pp. 138-149, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Recognizing that query languages which require fully specified paths are too restrictive, a number of authors have proposed various solutions. In <ref> [18] </ref>, path expressions are examined and form the basis of the XSQL system. XSQL allows the specification of path variables by means of which incomplete path expressions can be specified. In [17], path expressions are considered to be abbreviated queries within a user interface to a database system.
Reference: 19. <author> Kim H., H. Korth, and A. Silberschatz. PICASSO: </author> <title> A Graphical Query Language. </title> <journal> Software Practice and Experience, </journal> <volume> 18(3) </volume> <pages> 169-203, </pages> <month> Mar. </month> <year> 1988. </year>
Reference-contexts: In general, the difference between these systems is their varying support in the specification of aggregation, quantification, and recursion. Further, GQL/ER combines features of the universal relational model and the ER model without the support of aggregation or quantification. PICASSO <ref> [19] </ref>, on the other hand, provides an external universal relation data model that interfaces a universal relational database system. In PICASSO, maximal objects are represented as hyperedges in a hypergraph which contains textual attribute labels. <p> This relation is computed through the Window Function on the set of attribute names X. Within a Window Function a decision problem concerning which is the most meaningful attribute is tackled. PICASSO <ref> [19] </ref> provides a graphical query interface based on the Universal Relation Model. The choice of assigning a meaning to an attribute name is based on the analysis of the schema of the underlying database and various kinds of dependencies.
Reference: 20. <author> Kim W. </author> <title> Introduction to Object-Oriented Databases. </title> <publisher> MIT press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: In the area of graphical user interfaces a large amount of research has been produced with the purpose of facilitating user interaction while still maintaining the high expressive power of the query language <ref> [7, 20] </ref>. Most of the proposed systems adopt form, tabular, or diagram based visual paradigms. Early examples of these types of visual query languages that use a relational external data model are QBE [35] and G + [11]. In QBE, the query is made by filling in templates of relations.
Reference: 21. <author> King R., and S. Melville. Ski: </author> <title> A Semantics-Knowledgeable Interface. </title> <booktitle> Proceedings of the 10th Int'l Conference on Very Large Data Bases, Singapore, </booktitle> <pages> pp. 30-33, </pages> <month> Aug. </month> <year> 1984. </year>
Reference-contexts: Adding a hyperedge with the mouse creates a tuple variable and, therefore, no character-type tuple variables are necessary. Another visual query system which as QBI is based on a richer semantic model than the ER model and universal relational model is Ski <ref> [21] </ref>. In Ski, by means of a set of semantics operators, users can dynamically construct portions of the database schema and peruse the schema for related information, having complete access to an underlying semantic data language. Similar to QBI, this perusal is not performed naviga-tionally but semantically.
Reference: 22. <author> Maier D., D. Rozenshtein, and D.S. Warren. </author> <title> Window Functions. </title> <booktitle> Advances In Computing Research, </booktitle> <volume> 3 </volume> <pages> 213-246, </pages> <year> 1986. </year>
Reference-contexts: Given an ambiguous path expression which could result in multiple possible paths, the task is to find those completions most likely intended by the user. The idea of the Universal Relation Model <ref> [23, 22, 31] </ref> is that access paths are embedded in attribute names and for every set of attributes X there is a unique basic relation that the user has in mind. This relation is computed through the Window Function on the set of attribute names X.
Reference: 23. <author> Maier D., and J.D. Ullman. </author> <title> Maximal Objects and the Semantics of Universal Relation Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(8) </volume> <pages> 1-14, </pages> <year> 1983. </year>
Reference-contexts: Users are presented with a database abstraction called complete objects [25], i.e., completely encapsulated objects, similar to the universal relation abstraction in relational databases <ref> [23] </ref>. Specifically, a user perceives the underlying database as a set of classes, each having several properties called generalized attributes (GA). In the same way that an attribute in the ER model [10] represents an elementary property of an entity, a GA expresses a generic property of a class. <p> Given an ambiguous path expression which could result in multiple possible paths, the task is to find those completions most likely intended by the user. The idea of the Universal Relation Model <ref> [23, 22, 31] </ref> is that access paths are embedded in attribute names and for every set of attributes X there is a unique basic relation that the user has in mind. This relation is computed through the Window Function on the set of attribute names X.
Reference: 24. <author> Massari A. </author> <title> An Icon Based Query System for Radiological Data. </title> <type> Ph.D. Thesis, </type> <institution> Dipartimento di Informatica e Sistemistica Universita' di Roma "La Sapienza", </institution> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: As opposed to QBI, Ski is diagram based and supports navigation through the paths of the underlying database schema. 20 Compared to diagrammatic visual languages, the ease and effectiveness of QBI with respect to unsophisticated users was established through an empirical evaluation of QBI and QBD fl <ref> [24, 6] </ref>. In this study users were classified into unskilled users with little, if any, training in databases, and skilled ones. The two performance measures used were the time in seconds to complete a query and accuracy of the query.
Reference: 25. <author> Massari A., and P. K. Chrysanthis. </author> <title> Visual Query of Completely Encapsulated Objects. </title> <booktitle> Proceedings of the 5th Int'l Workshop on Research Issues in Data Engineering-Distributed Object Management, </booktitle> <address> Taipei, Taiwan, 18-25, </address> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: QBI's Conceptual Data Model In QBI, the concepts of class of objects and attribute of a class exclusively form the external representation of the database structure due to their natural simplicity. Users are presented with a database abstraction called complete objects <ref> [25] </ref>, i.e., completely encapsulated objects, similar to the universal relation abstraction in relational databases [23]. Specifically, a user perceives the underlying database as a set of classes, each having several properties called generalized attributes (GA). <p> Thus, in QBI, each focal object provides a view of the whole underlying database from its own viewpoint. Let us illustrate the concept of GAs through an example. Assume the underlying database schema depicted in Figure 1 using the Binary Graph Model <ref> [9, 25] </ref>, which also forms QBI's theoretical framework (see Section 4). <p> In further sections, we will show how the internal algorithms for GA generation were improved for a mobile environment. 4. QBI's Theoretical Framework Internally, QBI uses the Binary Graph Model (BGM) <ref> [9, 25] </ref>, a semantic data model, for capturing most of the aspects of the structure of the remote database.
Reference: 26. <author> Massari A., S. Pavani, and L. Saladini. </author> <title> QBI:An Iconic Query System for Inexpert Users. </title> <booktitle> Proceedings of the Workshop on Advanced Visual Interfaces, </booktitle> <address> Bari, Italy, </address> <pages> pp. 240-242, </pages> <month> June </month> <year> 1994. </year>
Reference: 27. <author> Motro A., A.D' Atri, and L. Tarantino. KIVIEW: </author> <title> The Design of an Object Oriented Browser. </title> <booktitle> Proceedings of the 2nd Conference on Expert Database Systems, Virginia, </booktitle> <pages> pp. 107-131, </pages> <year> 1988. </year>
Reference-contexts: While an iconic interface allows fast interactions (faster than typing) even when the user is moving, query formulation using intensional data offsets the expense and limitations of frequent wireless communication that is inherent to extensional browsing systems, e.g., <ref> [27, 29] </ref>. Metadata can be cached on the disk on the mobile computer since its definition changes rarely and its size is small compared to the actual database. <p> In particular, other systems do not usually assign uniform semantics to icons. Also, as opposed to QBI, these systems adopt the extensional browsing approach (that is, browsing of instances in the remote database) as the principal querying strategy <ref> [27, 29] </ref> hence making them unsuitable for mobile environments that are characterized by low communication bandwidth over expensive wireless communication links. All visual query interfaces discussed above have been proposed in the context of workstations with large screens, graphics capabilities and pointing devices.
Reference: 28. <author> Sockut G. H., L. M. Burns, A. Malhotra, and K. Y. Whang. GRAQULA: </author> <title> A Graphical Query Language for Entity-Relationship or Relational Databases. </title> <type> Research Report RC 16877, </type> <institution> IBM T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: Of these, the ER model [10] is often used as the external data model in existing visual query systems. GORDAS [12], QBD fl [5], GRAQULA <ref> [28, 33] </ref>, and GQL/ER [34] are examples of graphical visual query systems that provide the user with an ER diagram of the schema. Queries in these systems are formulated by drawing nodes and edges to be matched in the schema diagram.
Reference: 29. <author> Tonomura Y., and S. Abe. </author> <title> Content Oriented Visual Interfaces Using Video Icons for Visual Database Systems. </title> <booktitle> Proceedings of the IEEE Workshop on Visual Languages, </booktitle> <address> Roma, Italy, </address> <pages> pp. 68-73, </pages> <year> 1989. </year>
Reference-contexts: While an iconic interface allows fast interactions (faster than typing) even when the user is moving, query formulation using intensional data offsets the expense and limitations of frequent wireless communication that is inherent to extensional browsing systems, e.g., <ref> [27, 29] </ref>. Metadata can be cached on the disk on the mobile computer since its definition changes rarely and its size is small compared to the actual database. <p> However, the small screen space of the typical notebook or palmtop computer and the limited possibility of using a keyboard, make the iconic approach particularly suitable for the users of a mobile system. In general, the main difference between QBI and the other iconic interfaces proposed in the literature <ref> [14, 30, 29] </ref> is in the way icons are defined and used for expressing concepts. In particular, other systems do not usually assign uniform semantics to icons. <p> In particular, other systems do not usually assign uniform semantics to icons. Also, as opposed to QBI, these systems adopt the extensional browsing approach (that is, browsing of instances in the remote database) as the principal querying strategy <ref> [27, 29] </ref> hence making them unsuitable for mobile environments that are characterized by low communication bandwidth over expensive wireless communication links. All visual query interfaces discussed above have been proposed in the context of workstations with large screens, graphics capabilities and pointing devices.
Reference: 30. <author> Tsuda K., M. Hirakawa, M. Tanaka, and T. Ichikawa. </author> <title> Iconic Browser: An Iconic Retrieval System for Object-Oriented databases. </title> <journal> Journal of Visual languages and Computing, </journal> <volume> 1(1) </volume> <pages> 59-76, </pages> <year> 1990. </year>
Reference-contexts: However, the small screen space of the typical notebook or palmtop computer and the limited possibility of using a keyboard, make the iconic approach particularly suitable for the users of a mobile system. In general, the main difference between QBI and the other iconic interfaces proposed in the literature <ref> [14, 30, 29] </ref> is in the way icons are defined and used for expressing concepts. In particular, other systems do not usually assign uniform semantics to icons.
Reference: 31. <author> Ullman J. D.. </author> <title> The U.R. Strikes Back. </title> <booktitle> Proceedings of the ACM Principles of Database Systems, </booktitle> <address> Los Angeles, California, </address> <pages> pp. 10-22, </pages> <year> 1982. </year>
Reference-contexts: Given an ambiguous path expression which could result in multiple possible paths, the task is to find those completions most likely intended by the user. The idea of the Universal Relation Model <ref> [23, 22, 31] </ref> is that access paths are embedded in attribute names and for every set of attributes X there is a unique basic relation that the user has in mind. This relation is computed through the Window Function on the set of attribute names X.
Reference: 32. <author> Weissman S.. </author> <title> Changing Query by Icons to Improve Querying Processing for Mobile Users. </title> <institution> M.S. Project, University of Pittsburgh, </institution> <month> May </month> <year> 1995. </year>
Reference: 33. <author> Whang K. Y., A. Malhotra, G. H. Sockut, L. M. Burns, and K. S. Choi. </author> <title> Two-Dimensional Specification of Universal Quantification in a Graphical Database Query Language. </title> <journal> Transactions on Software Engineering, </journal> <volume> 18(3) </volume> <pages> 216-224, </pages> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: Of these, the ER model [10] is often used as the external data model in existing visual query systems. GORDAS [12], QBD fl [5], GRAQULA <ref> [28, 33] </ref>, and GQL/ER [34] are examples of graphical visual query systems that provide the user with an ER diagram of the schema. Queries in these systems are formulated by drawing nodes and edges to be matched in the schema diagram.
Reference: 34. <author> Zhang Z., and A. O. Mendelzon. </author> <title> A Graphical Query Language for Entity Relationship Databases. An Entity-Relationship Approach to Software Engineering. </title> <editor> Davis C., S. Jajodia, P. Ann-Beng NG, and R. T. Yeh Eds., </editor> <publisher> North Holland, </publisher> <pages> pp. 441-448, </pages> <year> 1983. </year>
Reference-contexts: Of these, the ER model [10] is often used as the external data model in existing visual query systems. GORDAS [12], QBD fl [5], GRAQULA [28, 33], and GQL/ER <ref> [34] </ref> are examples of graphical visual query systems that provide the user with an ER diagram of the schema. Queries in these systems are formulated by drawing nodes and edges to be matched in the schema diagram.
Reference: 35. <author> Zloof M. M. </author> <title> Query by Example. </title> <booktitle> Proceedings of the National Comput. Conference, </booktitle> <address> pp.431-438, </address> <year> 1975. </year>
Reference-contexts: Most of the proposed systems adopt form, tabular, or diagram based visual paradigms. Early examples of these types of visual query languages that use a relational external data model are QBE <ref> [35] </ref> and G + [11]. In QBE, the query is made by filling in templates of relations. Users do not need to remember attribute names or variable names. Queries are specified by typing example tuples expressing the information that is being requested.
References-found: 35

