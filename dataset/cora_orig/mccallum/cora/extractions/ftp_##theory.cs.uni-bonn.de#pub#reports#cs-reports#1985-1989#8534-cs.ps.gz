URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1985-1989/8534-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1985-1989-en.html
Root-URL: http://cs.uni-bonn.de
Title: Fast Parallel Algorithms for the Clique Separator Decomposition  
Author: Elias Dahlhaus Marek Karpinski Mark B. Novick 
Keyword: Key words. parallel algorithms, clique separator decomposition, chordal graphs, perfect graphs, maximum independent set, chromatic number  
Address: Ithaca, NY  
Affiliation: Department of Computer Science, University of Bonn Department of Computer Science, University of Bonn, and International Computer Science Institute, Berkeley, California.  Department of Computer Science, Cornell University,  
Note: AMS(MOS) subject classifications. 05C05, 05C15, 05C75, 68Q10, 68R10  Supported in part by Leibniz Center for Research in Computer Science, by the DFG Grant KA 673/2-1, and by the SERC Grant GR-E 68297  14853-7501. Supported by NSF grant CCS-8806979  
Abstract: We give an efficient NC algorithm for finding a clique separator decomposition of an arbitrary graph, that is, a series of cliques whose removal disconnects the graph. This algorithm allows one to extend a large body of results which were originally formulated for chordal graphs to other classes of graphs. Our algorithm is optimal to within a polylogarithmic factor of Tarjan's O(mn) time sequential algorithm. The decomposition can also be used to find NC algorithms for some optimization problems on special families of graphs, assuming these problems can be solved in NC for the prime graphs of the decomposition. These optimization problems include: finding a maximum-weight clique, a minimum coloring, a maximum-weight independent set, and a minimum fill-in elimination order. We also give the first parallel algorithms for solving these problems by using the clique separator decomposition. Our maximum-weight independent set algorithm applied to chordal graphs yields the most efficient known parallel algorithm for finding a maximum-weight independent set of a chordal graph. 
Abstract-found: 1
Intro-found: 1
Reference: [BLW 85] <author> Bern, M.W., Lawler, E.L. and Wong, A.L. </author> <title> Why certain Subgraph Computations require only linear time, </title> <booktitle> Proc.26 th FOCS (1985), </booktitle> <pages> pp. 117-125. </pages>
Reference-contexts: We solve the problems on these atoms and combine the solutions to find the solutions on larger and larger components until we have the solution for the original graph. Recently, this paradigm has been used to design several efficient parallel and sequential algorithms for graph classes with small separators <ref> [BLW 85, HY 88] </ref>. Suppose X is a clique separator of G. Then there is a vertex partition A; B; X such that no vertex in A is adjacent to one in B.
Reference: [Bu 74] <author> Buneman, P. </author> <title> A Characterization on Rigid Circuit Graphs, </title> <booktitle> Discrete Mathematics 9 (1974), </booktitle> <pages> pp. 205-212. </pages>
Reference-contexts: Buneman <ref> [Bu 74] </ref> and Gavril [Ga 74] have shown that every chordal graph has a clique tree representation.
Reference: [DK 88a] <author> Dahlhaus, E., and Karpinski, M. </author> <title> Efficient Parallel Algorithm for Clique Separator Decomposition, </title> <note> Research Report No. </note> <institution> 8531-CS, University of Bonn 1988. </institution>
Reference-contexts: Our parallel algorithm runs in O (log 3 n) time with O (nm) processors on a CREW PRAM. The processor-time product of our algorithm is nearly optimal. Our algorithm is related to, but more processor-efficient than an earlier version by Dahlhaus and Karpinski <ref> [DK 88a] </ref> that runs in O (log 2 n) time using O (n 4 ) processors. In Section 4 we show how the decomposition can be used to solve several optimization problems for special graph classes.
Reference: [DK 88b] <author> Dahlhaus, E., and Karpinski, M. </author> <title> Fast Parallel Decomposition by Clique Separators, </title> <note> Research Report No. </note> <institution> 8525-CS, University of Bonn 1988. </institution>
Reference-contexts: An Outline of the Chordal-extension Algorithm. Here we present a Clique Separator Decomposition algorithm which combines methods introduced recently in <ref> [DK 88b] </ref> with certain extensions of P. Klein's FOCS '88 [Kl 88] method for chordal graphs. The algorithm first computes a chordal extension G 0 which preserves clique separators, together with a perfect elimination order on G 0 .
Reference: [DK 89] <author> Dahlhaus, E., and Karpinski, M. </author> <title> An Efficient Parallel Algorithm for the Minimal Elimination Ordering (MEO) of an Arbitrary Graph, </title> <note> Research Report No. </note> <institution> TR-89-024, International Computer Science Institute, </institution> <note> Berkeley (June 1989); Extended Abstract to appear in Proc. 30th IEEE FOCS (1989).' </note>
Reference-contexts: The fastest published sequential 1 algorithm is due to Tarjan [Ta 85], but the algorithm he gave is inherently sequential. This algorithm runs in O (nm) time by first finding a special ordering of the vertices called a minimal elimination order. Dahlhaus and Karpinski <ref> [DK 89] </ref> have given a parallel algorithm finding the minimal elimination order of an arbitrary graph, but we use a different elimination order that can be obtained more efficiently.
Reference: [Di 61] <author> Dirac, A. </author> <title> On Rigid Circuit Graphs, </title> <booktitle> Abhandlungen Mathematischer Seminare der Universitat Hamburg 25 (1961), </booktitle> <pages> pp. 71-76. </pages>
Reference-contexts: 1 Introduction Decompositions are often used in studying graph problems. Many times a graph has a property if and only if the pieces it is decomposed into also have that property. Several graph classes have been characterized by the structure of their clique separators, among them chordal graphs <ref> [Di 61, HS 58] </ref>, path graphs (the intersection graphs of paths in a tree) [MW 86], and Gallai graphs (graphs where every odd cycle of length five or more contains two non-crossing chords) [Ga 77].
Reference: [FJ 86] <author> Farber, M., and Jamison, R.E. </author> <title> Convexity in Graphs and Hypergraphs, </title> <booktitle> SIAM J. of Algebraic and Discrete Methods 7 (1986), </booktitle> <pages> pp. 433-444. </pages>
Reference-contexts: We begin with the algorithm which computes an ascending sequence (C 1 ; ; C n ), C i V , of "convex" sets of G 0 (endsegments of a PEO of G 0 ) (see <ref> [FJ 86] </ref>), such that i) C i+1 nC i has only one element; ii) [x; y] 2 E 0 iff [x; y] 2 E or x; y 2 C i and there is a connected component ~ C of G (V nC i ), such that x; y 2 N ( <p> Clearly this sequence (C i ) n i=1 defines a perfect elimination order for G 0 = (V; E [ F ). Therefore G 0 is chordal. All these C i are convex for G 0 in the sense of <ref> [FJ 86] </ref> (closed by chordless paths). By a procedure N ON E, we compute "convex" sets (see [FJ 86]) C 1 ; C 2 , such that #C 1 ; #(C 2 nC 1 ); #(V nC 2 ) 2 3 #V . <p> Therefore G 0 is chordal. All these C i are convex for G 0 in the sense of <ref> [FJ 86] </ref> (closed by chordless paths). By a procedure N ON E, we compute "convex" sets (see [FJ 86]) C 1 ; C 2 , such that #C 1 ; #(C 2 nC 1 ); #(V nC 2 ) 2 3 #V . Moreover, (V; F [ E) shall preserve clique separators.
Reference: [Ga 74] <author> Gavril, F. </author> <title> The Intersection Graphs of Subtrees of Trees are exactly the Chordal Graphs, </title> <journal> Journal of Combinatorical Theory, Series B 16 (1974), </journal> <pages> pp. 47-56. </pages>
Reference-contexts: Buneman [Bu 74] and Gavril <ref> [Ga 74] </ref> have shown that every chordal graph has a clique tree representation.
Reference: [Ga 77] <author> Gavril, F. </author> <title> Algorithms on Clique Separable Graphs, </title> <booktitle> Discrete Mathematics 19 (1977), </booktitle> <pages> pp. 159-165. </pages>
Reference-contexts: Several graph classes have been characterized by the structure of their clique separators, among them chordal graphs [Di 61, HS 58], path graphs (the intersection graphs of paths in a tree) [MW 86], and Gallai graphs (graphs where every odd cycle of length five or more contains two non-crossing chords) <ref> [Ga 77] </ref>. One of the original motivations for studying the clique separator decomposition is related to the problem of recognizing perfect graphs [Wh 84].
Reference: [Ha 88] <author> Hafsteinsson, H. </author> <title> Parallel Sparse Cholesky Factorization, </title> <type> PhD Thesis, </type> <institution> Cornell University (1988). </institution>
Reference-contexts: We can find G 0 by using the PEO we found for G 0 to calculate the fill it induces on G. Hafsteinsson's <ref> [Ha 88] </ref> algorithm does this in O (log n) time with O (n 2 ) processors. Next we get a clique tree representation of G 0 in O (log n) time using O (jE [ F j) = O (n 2 ) processors.
Reference: [HS 58] <editor> Hajnal, A. and Suranyi Uber die Auflosung von Graphen in vollstandige Teil-graphen, </editor> <address> Ann. </address> <institution> Univ. Sci. Budapest Eotvos, Sect. Math. </institution> <month> 1 </month> <year> (1958), </year> <pages> pp. 113-121. </pages>
Reference-contexts: 1 Introduction Decompositions are often used in studying graph problems. Many times a graph has a property if and only if the pieces it is decomposed into also have that property. Several graph classes have been characterized by the structure of their clique separators, among them chordal graphs <ref> [Di 61, HS 58] </ref>, path graphs (the intersection graphs of paths in a tree) [MW 86], and Gallai graphs (graphs where every odd cycle of length five or more contains two non-crossing chords) [Ga 77].
Reference: [HY 88] <author> He, X. and Yesha, Y. </author> <title> Binary Tree Algebraic Computation and Parallel Algorithms for Simple Graphs, </title> <booktitle> Journal of Algorithms 9 (1988), </booktitle> <pages> pp. 92-113 </pages>
Reference-contexts: We solve the problems on these atoms and combine the solutions to find the solutions on larger and larger components until we have the solution for the original graph. Recently, this paradigm has been used to design several efficient parallel and sequential algorithms for graph classes with small separators <ref> [BLW 85, HY 88] </ref>. Suppose X is a clique separator of G. Then there is a vertex partition A; B; X such that no vertex in A is adjacent to one in B.
Reference: [HM 86] <author> Helmbold, D. and Mayr, E. </author> <title> Perfect Graphs and Parallel Algorithms, </title> <booktitle> In International Conference on Parallel Processing, IEEE (1986), </booktitle> <pages> pp. 853-860. </pages>
Reference-contexts: We use Helmbold and Mayr's <ref> [HM 86] </ref> algorithm for finding the maximum weight independent set in an interval graph to perform steps one and two.
Reference: [HL 88] <author> Ho, C.W. and Lee, R.C.T. </author> <title> Efficient Parallel Algorithms for Finding Maximal Cliques, Clique Trees and Minimum Coloring on Chordal Graphs, </title> <booktitle> Information Processing Letters 28 (1988), </booktitle> <pages> pp. 301-309. </pages>
Reference-contexts: The total running time is bounded by the time required to color a chordal graph, which is currently O (log 2 n) for Klein's algorithm, but is O (log n) for Ho and Lee's algorithm <ref> [HL 88] </ref>. 4.4 Chromatic Polynomial For any graph G, the chromatic polynomial f (G; x) is defined to be the number of ways we can color G where we have a choice of x different colors.
Reference: [Kl 88] <author> Klein, Ph. </author> <title> Efficient Parallel Algorithms on Chordal Graphs, </title> <booktitle> Proc. 29 th IEEE FOCS (1988). </booktitle>
Reference-contexts: An Outline of the Chordal-extension Algorithm. Here we present a Clique Separator Decomposition algorithm which combines methods introduced recently in [DK 88b] with certain extensions of P. Klein's FOCS '88 <ref> [Kl 88] </ref> method for chordal graphs. The algorithm first computes a chordal extension G 0 which preserves clique separators, together with a perfect elimination order on G 0 .
Reference: [MR 85] <author> Miller, G. and Reif, J.H. </author> <title> Parallel Tree Contradiction and its Application In Proc. </title> <booktitle> 26 th FOCS (1985), </booktitle> <pages> pp. 478-489. </pages>
Reference-contexts: Our algorithms first construct a tree representation of the graph and then apply tree processing techniques such as terminal branch removal [NNS 87] and parallel tree contraction <ref> [MR 85] </ref>. We can also find the chromatic polynomial of a graph assuming it is easy to do this on the prime graphs. 2 Definitions We let G = (V; E) denote a graph with vertex set V and edge set E. <p> Let B 1 ; B 2 ; : : : ; B k be branches in the simplicial tree of G consisting of leaf nodes plus their parents. We apply Miller and Reif's <ref> [MR 85] </ref> technique of parallel tree contraction. In a rake step, we 1. Find all vertices of G that only appear in leaf cliques of the simplicial tree. 2. For each vertex v that appears in a leaf atom and some other atom.
Reference: [MW 86] <author> Monma, C.L. and Wei, V.K. </author> <title> Intersection Graphs of Paths in a Tree, </title> <journal> Journal of Combinatorial Theory, Series B 41 (1985), </journal> <pages> pp. 141-181. </pages>
Reference-contexts: Several graph classes have been characterized by the structure of their clique separators, among them chordal graphs [Di 61, HS 58], path graphs (the intersection graphs of paths in a tree) <ref> [MW 86] </ref>, and Gallai graphs (graphs where every odd cycle of length five or more contains two non-crossing chords) [Ga 77]. One of the original motivations for studying the clique separator decomposition is related to the problem of recognizing perfect graphs [Wh 84].
Reference: [NNS 87] <author> Naor, J., Naor, M., and Schaffer, A. </author> <title> Fast Parallel Algorithms for Chordal Graphs, </title> <booktitle> Proc. 19 th ACM STOC (1987), </booktitle> <pages> pp. 355-364. </pages>
Reference-contexts: All four of these problems are normally NP-complete, but can be solved in polynomial time for chordal graphs, because the only prime chordal graphs are cliques. Our algorithms first construct a tree representation of the graph and then apply tree processing techniques such as terminal branch removal <ref> [NNS 87] </ref> and parallel tree contraction [MR 85]. We can also find the chromatic polynomial of a graph assuming it is easy to do this on the prime graphs. 2 Definitions We let G = (V; E) denote a graph with vertex set V and edge set E.
Reference: [Ta 85] <author> Tarjan, R.E. </author> <title> Decomposition by Clique Separators, </title> <booktitle> Discrete Mathematics 55 (1985), </booktitle> <pages> pp. 221-232. </pages>
Reference-contexts: We can represent the decomposition of G into G 0 and G 00 as a binary tree where the leaves are prime graphs and the internal nodes are clique separators. Following Tarjan's <ref> [Ta 85] </ref> terminology, we call such a tree a binary decomposition tree. Throughout this paper we will assume that each clique separator is a minimal clique separator, because this results in smaller separators and fewer atoms in the decomposition. <p> These algorithms are the main sequential algorithms for performing the decomposition. In the third section of the paper we show how to efficiently parallelize the sequential algorithms for finding a clique separator decomposition. The fastest published sequential 1 algorithm is due to Tarjan <ref> [Ta 85] </ref>, but the algorithm he gave is inherently sequential. This algorithm runs in O (nm) time by first finding a special ordering of the vertices called a minimal elimination order. <p> parallelizes easily because we can find the clique separators easily in parallel. 4.5 Maximum Independent Sets Given a graph G with integer weights on the vertices, the problem of deciding whether G has an independent set of weight w is NP-complete when w is a problem parameter. 11 Several authors <ref> [Ta 85, Wh 84] </ref> have noted that the clique separator decomposition can help solve this problem in the following way. Suppose C is a clique of G whose removal leaves connected components induced by vertex sets A and B.
Reference: [TV 80] <author> Tarjan, R.E. and Vishkin, U. </author> <title> Finding Biconnected Components and Computing Tree Functions in Logarithmic Parallel Time, </title> <booktitle> Proc. 25 th FOCS (1980), </booktitle> <pages> pp. 12-20. </pages>
Reference-contexts: We can find the connected components for step 3 in O (log n) time by using O (n) processors on an EREW-PRAM through the use of Euler tour techniques <ref> [TV 80] </ref>.
Reference: [Wh 84] <author> Whitesides, S.H. </author> <title> A Method for Solving certain Graph Recognition and Optimization Problems with Applications to Perfect Graphs, </title> <editor> In C.Berge and V.Chv^atal, Editors, </editor> <title> Topics on Perfect Graphs, </title> <booktitle> Annals of Discrete Mathematics 21 (1984), </booktitle> <pages> North-Holland , pp. 281-297. </pages>
Reference-contexts: One of the original motivations for studying the clique separator decomposition is related to the problem of recognizing perfect graphs <ref> [Wh 84] </ref>. <p> Following Tarjan's [Ta 85] terminology, we call such a tree a binary decomposition tree. Throughout this paper we will assume that each clique separator is a minimal clique separator, because this results in smaller separators and fewer atoms in the decomposition. Whitesides <ref> [Wh 84] </ref> designed the first polynomial time sequential algorithm for finding a clique separator decomposition. Her algorithm ran in O (n 3 m) time. Tarjan found a faster algorithm which ran in O (nm) time. <p> parallelizes easily because we can find the clique separators easily in parallel. 4.5 Maximum Independent Sets Given a graph G with integer weights on the vertices, the problem of deciding whether G has an independent set of weight w is NP-complete when w is a problem parameter. 11 Several authors <ref> [Ta 85, Wh 84] </ref> have noted that the clique separator decomposition can help solve this problem in the following way. Suppose C is a clique of G whose removal leaves connected components induced by vertex sets A and B.
Reference: [Ya 81] <author> Yannakakis, M. </author> <title> Computing the Minimal Fill-In is NP-Complete, </title> <journal> SIAM Journal of Algorithms and Discrete Methods 2 (1981), </journal> <pages> pp. 77-79 15 </pages>
Reference-contexts: In fact, our first three algorithms only use a linear number of processors. 4.1 Minimum Fill-in Orders The problem of determining whether there is an elimination order of G that results in k or fewer fill-in edges, is NP-complete if k is a problem parameter <ref> [Ya 81] </ref>. However, if we can find a minimum fill-in order for each atom G i of G, then we can also easily find a minimum fill-in order of G. Let F i be the fill induced by the order on atom G i .
References-found: 22

