URL: http://www.isi.edu/~berson/mg.ps
Refering-URL: http://www.isi.edu/~berson/
Root-URL: http://www.isi.edu
Title: Detecting Matrix Geometric Matrices from Specifications  
Author: Steven Berson Richard Muntz 
Date: February 23, 1993  
Affiliation: Computer Science Department UCLA  
Abstract: Given a high level specification of a Markov chain, we would like to be able to determine if the state space of the Markov chain is finite. If the state space is finite, we can generate the entire transition matrix. If the state space of the Markov chain is infinite, however, it is impossible to generate the entire transition matrix but it still may be possible to solve the Markov chain if it has a specific form. One class of denumerable state space Markov chain that can be solved consists of those that have solutions of the matrix geometric form. If we can detect from the specification that the Markov chain has a matrix geometric solution, then we need only generate a (finite) part of the transition matrix to calculate the solution. In this paper, we propose a high level specification language for Markov chains such that, in many cases, the existence of a matrix geometric solution may be verified directly from the specification. We give an algorithm to determine whether the state space of a Markov chain, specified in this language represented as a 2 dimensional vector, is infinite and further whether it has a matrix geometric solution. We show that in general, it is undecidable whether a matrix specified in this language with a state space vector of dimension greater than 2 has a matrix geometric solution. We provide a second less powerful specification language for which the question is decidable for a specification with a state space 
Abstract-found: 1
Intro-found: 1
Reference: [HOPC79] <author> J.E. Hopcroft and J.D. Ullman, </author> <title> Introduction to Automata Theory, Languages, and Computation, </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: Note that since you don't know a priori which (if either) state vector component is bounded, two pushdown automata in general will need to be generated. A pushdown automata <ref> [HOPC79] </ref> is a system (Q; ; ; ffi; q 0 ; Z 0 ; F ) where Q is a finite set of states, is the input alphabet, is the stack alphabet, q 0 is the initial state, Z 0 is the initial stack symbol, F is the set of final <p> Thus any string that moves the machine from state 0 into state N is accepted. 10 3.2 Decidability in 2 (or less) dimensions Once the pushdown automata is built, the conversion to a grammar in Chom-sky normal form is well-known (see e.g. <ref> [HOPC79, LEWI81] </ref>). Thus, the key to the proof is to find the N for the rules. The approach is to examine each dimension in turn, and to choose N large enough so that if state N can be reached, then the state space description is unbounded in that dimension. <p> To do this, a result about Turing machines is needed. Theorem 7.9 in <ref> [HOPC79] </ref> states that a two-counter machine can simulate an arbitrary Turing machine. A two-counter machine is a Turing machine with read-only input and two storage tapes that are treated as stacks. The tapes have a bottom marker, and can only store blanks.
Reference: [KARP69] <author> R.M. Karp and R.E. Miller, </author> <title> Parallel Program Schemata, </title> <journal> Journal of Computer and System Science, </journal> <month> May </month> <year> 1969. </year>
Reference-contexts: The Petri net in figure 5a can be simulated by the VASS in figure 5b. We can generalize the VASS configuration by allowing 1 as a vector member. Thus a generalized configuration is (q; x) 2 Q fi (N <ref> [ 1) m . The Karp and Miller tree [REUT90, KARP69] </ref> associated with a VASS with the initial configuration (p; x) is a tree T where each vertex is labeled with a generalized configuration, and where each arc is labeled with an element of A (i.e. an arc of G). <p> The Petri net in figure 5a can be simulated by the VASS in figure 5b. We can generalize the VASS configuration by allowing 1 as a vector member. Thus a generalized configuration is (q; x) 2 Q fi (N [ 1) m . The Karp and Miller tree <ref> [REUT90, KARP69] </ref> associated with a VASS with the initial configuration (p; x) is a tree T where each vertex is labeled with a generalized configuration, and where each arc is labeled with an element of A (i.e. an arc of G).
Reference: [KOSA82] <author> S.R. Kosaraju, </author> <title> Decidability of Reachability in Vector Addition Systems, </title> <booktitle> Proceedings of the Symposium on the Theory of Computing, </booktitle> <year> 1982. </year>
Reference-contexts: The Petri net reachability problem is to determine, given a Petri net R, whether a marking M 0 is reachable from a marking M . It is known that the Petri net reachability problem is decidable <ref> [REUT90, MAYR84, KOSA82] </ref>.
Reference: [LEWI81] <author> H. R. Lewis and C. H. Papadimitriou, </author> <title> Elements of the Theory of Computation, </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: Thus any string that moves the machine from state 0 into state N is accepted. 10 3.2 Decidability in 2 (or less) dimensions Once the pushdown automata is built, the conversion to a grammar in Chom-sky normal form is well-known (see e.g. <ref> [HOPC79, LEWI81] </ref>). Thus, the key to the proof is to find the N for the rules. The approach is to examine each dimension in turn, and to choose N large enough so that if state N can be reached, then the state space description is unbounded in that dimension.
Reference: [MAYR84] <author> E.W. Mayr, </author> <title> An Algorithm for the General Petri Net Reachability Problem, </title> <journal> SIAM Journal of Computing, </journal> <year> 1984. </year>
Reference-contexts: The Petri net reachability problem is to determine, given a Petri net R, whether a marking M 0 is reachable from a marking M . It is known that the Petri net reachability problem is decidable <ref> [REUT90, MAYR84, KOSA82] </ref>.
Reference: [NELS90] <institution> A Performance Analysis of a General Parallel Processing Model, Proceedings of SIGMETRICS, </institution> <year> 1990. </year>
Reference-contexts: Many models of interest have matrix geometric solutions, including buffer models and tandem queues [NEUT81], data communications models [NEUT89], and parallel processing models <ref> [NELS90] </ref>. These models all have a block structured form where, except for the boundary column (s), row n of the matrix is just row n + 1 shifted to the left.
Reference: [NEUT81] <author> M. F. Neuts, </author> <title> Matrix-Geometric Solutions in Stochastic Models, </title> <publisher> Johns Hopkins University Press, </publisher> <year> 1981. </year>
Reference-contexts: The k 's form a geometric probability distribution with parameter . A matrix geometric solution <ref> [NEUT81] </ref> is a generalization of this geometric solution where the steady state probability vector can be partitioned into m-vectors k , k 0, which are given by k = 0 R k with R being a nonnegative square matrix. <p> Many models of interest have matrix geometric solutions, including buffer models and tandem queues <ref> [NEUT81] </ref>, data communications models [NEUT89], and parallel processing models [NELS90]. These models all have a block structured form where, except for the boundary column (s), row n of the matrix is just row n + 1 shifted to the left. <p> B 0 A 0 A 1 A 2 0 A 3 0 B 2 A 2 A 1 A 0 A 1 B 4 A 4 A 3 A 2 A 1 . . . . . . . . . 7 7 7 7 7 It can be shown <ref> [NEUT81] </ref> that if matrix P is positive recurrent, then there exists a (minimal) nonnegative matrix R which satisfies R = k=1 and that the steady state probability vector (conforming to P ) satisfies i+1 = i R 2 where ~e is a vector of all 1's of appropriate dimension. <p> Rule 5 states that a customer can complete intermediate stages of service. 5 Another example is a 2 stage buffered interconnection system <ref> [NEUT81] </ref>. This model, shown in figure 1, consists of processor units I and II separated by a finite buffer. Unit I (II) has r (c) 1 parallel exponential servers each with a service rate of ff (fi). The arrival process to the system is Poisson with rate . <p> When a unit II job completes processing, it can be fed back into unit I with a probability of . Many variations on this model exist which are described in more detail in <ref> [NEUT81] </ref>. We will consider as an example the case where r = 1 and c = 2 and where the buffer has space for 2 jobs.
Reference: [NEUT89] <author> M. F. Neuts, </author> <title> Structured Stochastic Matrices of M/G/1 Type and Their Applications, </title> <publisher> Marcel Dekker, </publisher> <year> 1989. </year>
Reference-contexts: Many models of interest have matrix geometric solutions, including buffer models and tandem queues [NEUT81], data communications models <ref> [NEUT89] </ref>, and parallel processing models [NELS90]. These models all have a block structured form where, except for the boundary column (s), row n of the matrix is just row n + 1 shifted to the left.
Reference: [REUT90] <author> C. Reutenauer, </author> <title> The Mathematics of Petri Nets, </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: This can be proved by reducing this language to an equivalent Petri net. Given an equivalent Petri net, determining whether a specification has a matrix geometric solution reduces to the Petri net "accessibility problem." Since it is known that the "accessibility problem" for Petri nets is decidable <ref> [REUT90] </ref>, we can determine whether a specification has a matrix geometric solution. This language can be extended to allow constants in some type of rules as will be discussed at the end of the section. <p> Using this translation, we can convert any restricted specification into an equivalent Petri net. To show whether only one place is unbounded in a Petri net, we convert to another structure known as a Vector Addition System with States (VASS) <ref> [REUT90] </ref>. <p> The Petri net in figure 5a can be simulated by the VASS in figure 5b. We can generalize the VASS configuration by allowing 1 as a vector member. Thus a generalized configuration is (q; x) 2 Q fi (N [ 1) m . The Karp and Miller tree <ref> [REUT90, KARP69] </ref> associated with a VASS with the initial configuration (p; x) is a tree T where each vertex is labeled with a generalized configuration, and where each arc is labeled with an element of A (i.e. an arc of G). <p> The Petri net reachability problem is to determine, given a Petri net R, whether a marking M 0 is reachable from a marking M . It is known that the Petri net reachability problem is decidable <ref> [REUT90, MAYR84, KOSA82] </ref>.
Reference: [STEW91] <author> W.J. Stewart, MARCA: </author> <title> Markov Chain Analyzer, a Software Package for Markov Modeling, Numerical Solution of Markov Chains, </title> <publisher> Marcel Dekker, </publisher> <year> 1991. </year> <month> 30 </month>
Reference-contexts: Section 5 gives the conclusions and future research directions. 3 2 Markov chain specification language The language we adopt for describing Markov chains is similar to other languages such as MARCA <ref> [STEW91] </ref> and describes transitions from one Markov chain state to another. We describe the language informally in this section, but the BNF for the language can be found in appendix B. The Markov chain transitions are described by pairs of state vectors with a transition rate.
References-found: 10

