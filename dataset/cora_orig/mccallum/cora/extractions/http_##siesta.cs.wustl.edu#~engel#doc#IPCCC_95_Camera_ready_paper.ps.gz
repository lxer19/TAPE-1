URL: http://siesta.cs.wustl.edu/~engel/doc/IPCCC_95_Camera_ready_paper.ps.gz
Refering-URL: http://siesta.cs.wustl.edu/~engel/resume.html
Root-URL: 
Email: engel@tech.ascom.ch  
Phone: 41 31 999 39 47,  
Title: Signalling in ATM Networks: Experiences With an Object-Oriented Solution  
Author: Robert Engel, Toni Bieri, Beat Keller 
Address: Morgenstr. 129, CH-3018 Bern, Switzerland  
Affiliation: ASCOM TECH  
Abstract: Today the Asynchronous Transfer Mode (ATM) is extensively used on the level of public pilot networks. In the first stages of introduction these networks do not yet support signalling. However, the standardisation bodies ITU-TS (former CCITT) and ATM Forum have already produced first specifications for signalling in ATM networks. These specifications define the basic procedures for point-to-point signalling. Further specifications, that are now being defined, will enlarge this basic set to support fully signalling for multimedia applications between several users (point-to-multipoint). This signifies that developers of signalling software have to cope with two demands: Until a Recommendation for a specification is approved it undergoes constant change. The introduction of a new specification is associated with an enormous increase in software functionality. In this paper we show how an object-oriented solution allows the demands of flexibility and extendability to be satisified. This solution consists of a set of classes that are put together to form a very flexible, extendable framework. This framework can be refined to realise any signalling protocol. We show how this framework was used to build an implementation of the ATM signalling protocol Q.2931 defined by ITU-TS. The reusability and flexibility of it was verified when the framework classes were integrated in the signalling architecture of an ATM switch. The framework was realised with object-oriented techniques and implemented in C++. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ATM Forum; ATM UNI specification Q.93B Prentice Hall, </author> <year> 1993 </year>
Reference-contexts: This is only possible due to a new Layer 3 Signalling Protocol (see Figure 1-1) that can enable source traffic characteristics to be given to the network. Two standardisation bodies each define a slightly different version of this User Network Interface Protocol: The ATM Forum calls it Q.93B <ref> [1] </ref>, the ITU-TS calls it Q.2931 [2]. The Protocol is defined in three steps, called Capability Sets by ITU-TS and Phases in ATM Forum. Each new specification will be a super set of the preceding one and increase the functionality.
Reference: [2] <institution> ITU-TS Recommendation Q.2931 </institution>
Reference-contexts: Two standardisation bodies each define a slightly different version of this User Network Interface Protocol: The ATM Forum calls it Q.93B [1], the ITU-TS calls it Q.2931 <ref> [2] </ref>. The Protocol is defined in three steps, called Capability Sets by ITU-TS and Phases in ATM Forum. Each new specification will be a super set of the preceding one and increase the functionality. <p> This means that the tran State State_YY Messenger SETUP [ ] State_XX Messenger- Hierarchy State - Hierarchy Protocol ALERTING-Messenger Messenger 1) 2) State sition depends also on the state! b) The message contains a flag that, if set, references another part of the message where special error handling is defined <ref> [2] </ref>. If it is not set, the default error transition happens. c) If the mentioned flag is set, a specific error transitions hap pens according to the referenced part of the message. d) Depending on the kind of error a specific error transition happens.
Reference: [3] <author> Telelogic; SDT, </author> <title> Specification and Description Language Tool Malmo, </title> <address> Sweden </address>
Reference-contexts: This method is relatively quick and well known. However, reusability and flexibility are poor. Code generation: CASE-tools like SDT <ref> [3] </ref> enable protocols to be defined with a specification language such as ITU-TSs Specification and Description Language SDL [4]. The CASE-tool generates code of this detailed description. Though this method seems to be elegant, a specification language like SDL is not well suited to describe the details of a Protocol.
Reference: [4] <institution> ITU-TS; Specification and Description Language Recommendation Z.100 </institution>
Reference-contexts: This method is relatively quick and well known. However, reusability and flexibility are poor. Code generation: CASE-tools like SDT [3] enable protocols to be defined with a specification language such as ITU-TSs Specification and Description Language SDL <ref> [4] </ref>. The CASE-tool generates code of this detailed description. Though this method seems to be elegant, a specification language like SDL is not well suited to describe the details of a Protocol. In addition, the set of target platforms is restricted.
Reference: [5] <institution> Aamod Sane; Subclassing and Composition of State Machines, University of Illinois at Urbana-Champaign, </institution> <month> February 1 </month> <year> 1994 </year>
Reference-contexts: We did this using the concept described in <ref> [5] </ref>.
Reference: [6] <institution> Rebecca Wirfs-Brock; Designing Object-Oriented Software Prentice Hall 1990, </institution> <note> ISBN 0-13-629825-7 </note>
Reference-contexts: our concept with very active and intelligent Messenger classes, that can interact instead of simply being manipulated, simplifies implementations. 4 An Object-Oriented Solution 4.1 Gaining Abstraction through a Framework Our solution for implementing signalling software consists of two parts: Firstly we have a protocol-independent set of classes; a so-called framework <ref> [6] </ref>. Secondly we have protocol-dependent classes (mostly derived from the independent ones), with which the concrete application (the protocol Q.2931) is built. In this context, a framework represents a skeletal structure of protocols. To build a specific protocol, this structure has to be refined.
Reference: [7] <author> J.M. </author> <title> Zweig; An object-oriented Framework for implementing network protocols University of Illinois at U-C 1991 </title>
Reference-contexts: These two concepts: FSMs that can be instanciated, and an architecture that guides a message to an FSM instance, are modelled in our framework. In our framework, we used concepts of other communication frameworks <ref> [7] </ref>, [8]. These frameworks model how different protocol layers in the OSI-model can interact together. However, we concentrated on the modelling within an OSI-Layer. In our view, this is the more critical point where we have to find an abstraction.
Reference: [8] <author> N. C. Hutchinson and L.L. </author> <title> Peterson; The x-kernel: An Architecture for Implementing Network Protocols IEEE Transactions on Software Engineering, </title> <journal> vol. </journal> <volume> 17, </volume> <month> January </month> <year> 1991, </year> <pages> pp. 64-76, </pages>
Reference-contexts: These two concepts: FSMs that can be instanciated, and an architecture that guides a message to an FSM instance, are modelled in our framework. In our framework, we used concepts of other communication frameworks [7], <ref> [8] </ref>. These frameworks model how different protocol layers in the OSI-model can interact together. However, we concentrated on the modelling within an OSI-Layer. In our view, this is the more critical point where we have to find an abstraction.
References-found: 8

