URL: http://www.cs.umd.edu/projects/mcml/papers/toc97.ps
Refering-URL: http://www.cs.umd.edu/projects/mcml/pub.html
Root-URL: 
Title: Improving NFS Performance over Wireless Links  
Author: Rohit Dube, Cynthia D. Rais and Satish K. Tripathi 
Keyword: zero error conditions.  
Note: 5% of that obtained in  
Address: College Park, MD 20742 U.S.A.  
Affiliation: Mobile Computing and Multimedia Laboratory Department of Computer Science University of Maryland  
Email: frohit, cldavis, tripathig@cs.umd.edu  
Date: December 22, 1996  
Abstract: NFS is a widely used remote file access protocol that has been tuned to perform well on traditional LANs which exhibit low error rates. Users migrating to mobile hosts would like continued remote file access via NFS. However, low bandwidth and high error rates degrade performance on mobile hosts using wireless links, hindering the use of NFS. We conducted experiments to study the behavior of NFS in a wireless testbed. Based on these experiments, we incorporated modifications into the mobile NFS client. This paper presents two mechanisms which improve NFS performance over wireless links: an aggressive NFS client and link-level retransmissions. Our experiments show that these mechanisms improve response time by up to 62%, which brings the performance to within 
Abstract-found: 1
Intro-found: 1
Reference: [BB95a] <author> A. Bakre and B.R. Badrinath. I-TCP: </author> <title> Indirect TCP for Mobile Hosts. </title> <booktitle> In Fifteenth International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: This approach addresses mobility but not the poor performance caused by burst errors on the wireless link. In the TCP split connection approaches [YB94], <ref> [BB95a] </ref>, the base-station 1 buffers packets being sent to the mobile hosts in its vicinity. The base-station retransmits any lost packets to prevent end-to-end retransmission.
Reference: [BB95b] <author> A. Bakre and B.R. Badrinath. M-RPC: </author> <title> A Remote Procedure Call Service for Mobile Clients. </title> <booktitle> In First ACM International Conference on Mobile Computing and Networking, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: In the TCP split connection approaches [YB94], [BB95a], the base-station 1 buffers packets being sent to the mobile hosts in its vicinity. The base-station retransmits any lost packets to prevent end-to-end retransmission. The M-RPC approach <ref> [BB95b] </ref> is a variation of the TCP split connection approaches which seeks to improve performance by separating the connection at the RPC level [Gro88]. These approaches have the disadvantage of high buffer requirements, a complex migration algorithm, consistency problems, and increased load at the base-station.
Reference: [BBKT96] <author> P. Bhagwat, P. Bhattacharya, A. Krishna, and S.K. Tripathi. </author> <title> Using Channel State Dependent Packet Scheduling to Improve Throughput over Wireless LANs. </title> <booktitle> In IEEE INFOCOM, </booktitle> <month> March </month> <year> 1996. </year> <note> An extended version appears in ACM/Baltzer Journal on Wireless Networks, </note> <month> July </month> <year> 1996. </year>
Reference-contexts: NFS clients can back-off and retry a request after waiting for some predetermined time period. On wireless links, packet losses are usually due to burst errors rather than network congestion or server failures. These burst periods are on the order of a hundred milliseconds <ref> [BBKT96] </ref>. In response to such losses, NFS clients back-off to unnecessarily long wait periods, leading to severe performance degradation. NFS improvements are needed, but they should not adversely affect the existing wired infrastructure: the static hosts and servers. <p> This approach preserves TCP semantics, while improving performance, but has a larger buffer requirement and requires complex changes. Link-level retransmissions have been proposed to improve performance over wireless links [DCY93], [PAL + 95], <ref> [BBKT96] </ref>. In addition, [BDSZ94] presents and simulates a media access protocol which provides reliability on the wireless links. <p> This leads to bad link utilization and triggers detrimental behavior (such as unnecessary back-off) in the higher level protocols or applications involved. Using link-level retransmissions ([DCY93], [PAL + 95], <ref> [BBKT96] </ref>) for a more robust wireless link would shield the higher layers, preventing them from over-reacting to errors. <p> The two states in the Markov model represent error and error-free periods. During the good state bits are transmitted without errors. The bad state occurs when bits are lost or corrupted. Two-state models have been used by previous researchers to characterize the error on the wireless channel, <ref> [BBKT96] </ref>, and as a starting point for an empirical model for wireless error behavior [NKNS96]. A two-state model is chosen over the three-state model discussed in other studies [SKKF93],[WM95], as the two-state model simplifies the model without losing information pertinent to this research. <p> This retry limit is necessary to minimize the round-trip time variability and the impact on other queued data transmissions and higher layer reliability mechanisms. Therefore, NFS must ultimately insure reliability for all attempted data transfers. A link-layer retransmission policy which is fair to multiple channels is discussed in <ref> [BBKT96] </ref>. <p> In order to implement a complete mac protocol such as the one proposed in [BDSZ94], the hardware would have to be modified. As an alternative, we will add link-level retransmission functionality to the device driver. We plan to implement per destination mac address queues at the base-station as in <ref> [BBKT96] </ref>. Each queue is scheduled in round-robin fashion. This improves fairness by eliminating head-of-the-line blocking which occurs in the output queue of the device driver if the channel for the current packet's destination is in a bad state.
Reference: [BDSZ94] <author> V. Bharghavan, A. Demers, S. Shenker, and L. Zhang. MACAW: </author> <title> A Media Access Protocol for Wireless LAN's. </title> <booktitle> In ACM SIGCOMM, </booktitle> <year> 1994. </year>
Reference-contexts: This approach preserves TCP semantics, while improving performance, but has a larger buffer requirement and requires complex changes. Link-level retransmissions have been proposed to improve performance over wireless links [DCY93], [PAL + 95], [BBKT96]. In addition, <ref> [BDSZ94] </ref> presents and simulates a media access protocol which provides reliability on the wireless links. <p> Since we are constrained to work within the current hardware and protocol stacks, we must develop link-level reliability over current hardware which includes part of the MAC protocol rather than implementing an entire MAC protocol such as the one proposed in <ref> [BDSZ94] </ref>. We considered buffering IP packets at the base-station or running a TCP connection from the mobile to the base-station where UDP packets would be constructed and relayed 4 to (and from) the NFS server. <p> This improved performance and the absence of interference present a strong case for both link layer techniques for enhancing average case performance and higher layer mechanisms to improve worst case performance over wireless links. In order to implement a complete mac protocol such as the one proposed in <ref> [BDSZ94] </ref>, the hardware would have to be modified. As an alternative, we will add link-level retransmission functionality to the device driver. We plan to implement per destination mac address queues at the base-station as in [BBKT96]. Each queue is scheduled in round-robin fashion. <p> If a message loss causes this protocol to break, the lost message is retransmitted. The exact number of retransmissions for a given message will become clear only after further experimentation. The implementation of this protocol will achieve some of the gains of the mac protocol presented in <ref> [BDSZ94] </ref> within the limitations of the current hardware. We 14 believe that this mechanism has the potential of improving the performance of all higher layer protocols (not just NFS) without causing interference with end-to-end flow and congestion control mechanisms. Improved scalability will be one result of the per destination scheduling.
Reference: [BHH94] <author> D. Bachmann, P. Honeyman, </author> <title> and L.B. Huston. The Rx Hex. </title> <booktitle> In Proceedings of the 1st International Workshop on Services in Distributed and Networked Environments, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: A study of AFS in a very low bandwidth network (9.6 Kbps) has shown the importance of using dynamically adjustable parameters to quickly adjust to changes in round-trip times and to losses <ref> [BHH94] </ref>. In the 1 Mbps LAN environment which we consider, this use of dynamic parameters is less critical, although it offers additional improvement at the cost of added complexity. We considered using an NFS implementation over TCP instead of UDP.
Reference: [BOP94] <author> L. Brakmo, S. O'Malley, and L. Peterson. </author> <title> TCP Vegas: New Techniques for Congestion Detection and Avoidance. </title> <booktitle> In ACM SIGCOMM, </booktitle> <month> August </month> <year> 1994. </year> <month> 15 </month>
Reference-contexts: Unfortunately, NFS over TCP implementations are non-standard: the 4.4BSD TCP implementations do not work with non-BSD servers. To insure that mobile hosts can inter-operate with all NFS servers, we use NFS over UDP. Thus TCP improvements can not be directly used for improving NFS. TCP Vegas <ref> [BOP94] </ref> improves throughput by using available bandwidth more efficiently. It uses the system clock to accurately calculate round-trip times and does not wait for course-grained timeouts. It also tries to avoid loss due to congestion by changing the congestion window based on the actual and expected throughput values.
Reference: [BPSK96] <author> H. Balakrishnan, V. N. Padmanabhan, S. Seshan, and R.H. Katz. </author> <title> A Comparison of Mechanisms for Improving TCP Performance over Wireless Links. </title> <booktitle> In ACM SIGCOMM, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: Tightly coupled approaches in which information is exchanged between higher and lower layers of the protocol stack can be useful for improving performance, as shown in <ref> [BPSK96] </ref>. This approach should be used only if necessary, and the degree of interaction should be minimized. The TCP/IP protocol stack has inherited increasing complexities as it has evolved and been modified over the years. This complexity makes it difficult to incorporate and test changes to this protocol stack.
Reference: [BSAK95] <author> H. Balakrishnan, S. Seshan, E. Amir, and R.H. Katz. </author> <title> Improving TCP/IP Performance over Wireless Networks. </title> <booktitle> In First ACM International Conference on Mobile Computing and Networking, </booktitle> <month> November </month> <year> 1995. </year> <note> An extended version appears in ACM/Baltzer Journal on Wireless Networks, </note> <month> December </month> <year> 1995. </year>
Reference-contexts: File systems have high consistency requirements and would be vulnerable under some of the split connection approaches. Although NFS uses RPC, the M-RPC approach would require modifications to the RPC and NFS code on both the client and the server. In the snoop approach <ref> [BSAK95] </ref>, an agent at the base station monitors all TCP packets and caches unacknowledged segments. <p> A temporal model for the error behavior of the wireless channel is desired to capture the temporal nature of burst errors. The quality of the channel (good or bad) in such a model depends only on the current time instant. This differs from the model used in <ref> [BSAK95] </ref> which non-stochastically corrupts a small percentage of the bits in transit over the wireless channel. We implement a temporal model by using a distribution for the periods spent in the good and bad states.
Reference: [CI94] <author> R. Caceres and L. Iftode. </author> <title> The Effects of Mobility on Reliable Transport Protocols. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: It also tries to avoid loss due to congestion by changing the congestion window based on the actual and expected throughput values. Our NFS approach also responds more quickly to losses, but uses a simpler method with non-dynamic parameters. The fast retransmission approach <ref> [CI94] </ref> improves TCP performance by notifying the transport layer after mobile host motion as soon as the cell-switch hand-off is complete to avoid initiating congestion control policies. This approach addresses mobility but not the poor performance caused by burst errors on the wireless link.
Reference: [DCY93] <author> A. DeSimone, M.C. Chuah, </author> <title> and O.C. Yue. Throughput Performance of Transport-Layer Protocols over Wireless LANs. </title> <booktitle> In IEEE GLOBECOM, </booktitle> <year> 1993. </year>
Reference-contexts: This approach preserves TCP semantics, while improving performance, but has a larger buffer requirement and requires complex changes. Link-level retransmissions have been proposed to improve performance over wireless links <ref> [DCY93] </ref>, [PAL + 95], [BBKT96]. In addition, [BDSZ94] presents and simulates a media access protocol which provides reliability on the wireless links.
Reference: [Gro88] <author> Network Working Group. </author> <title> RPC : Remote Procedure Call Protocol Specification, 1988. </title> <type> RFC 1057. </type>
Reference-contexts: The base-station retransmits any lost packets to prevent end-to-end retransmission. The M-RPC approach [BB95b] is a variation of the TCP split connection approaches which seeks to improve performance by separating the connection at the RPC level <ref> [Gro88] </ref>. These approaches have the disadvantage of high buffer requirements, a complex migration algorithm, consistency problems, and increased load at the base-station. File systems have high consistency requirements and would be vulnerable under some of the split connection approaches.
Reference: [HHRB92] <author> P. Honeyman, L. Huston, J. Rees, and D. Bachmann. </author> <title> The Little Work Project. </title> <booktitle> In Third IEEE Workshop on Workstation Operating Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Disk-caching is implemented in the Andrew File System (AFS) [Sat90] to improve remote file access performance. Coda [KS92], its later version Odyssey [SNKP94], and Little Work <ref> [HHRB92] </ref> are successors of AFS and all use disk-caching to support disconnected and intermittent operation.
Reference: [HMVT94] <author> H. Hashemi, M. McGuire, T. Vlasschaert, and D. Tholl. </author> <title> Measurements and Modeling of Temporal Variations of the Indoor Radio Propagation Channel. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> 43(3), </volume> <month> August </month> <year> 1994. </year>
Reference: [Jac88] <author> V. Jacobson. </author> <title> Congestion Avoidance and Contol. </title> <booktitle> In ACM SIGCOMM, </booktitle> <year> 1988. </year>
Reference-contexts: The first few losses will be retransmitted after a short linearly increasing timeout period. Subsequent losses will have exponentially increasing timeout values. This is in some sense the inverse of the congestion control mechanisms proposed in <ref> [Jac88] </ref>. In addition to improvements at the NFS client, optimizations can be made at the device driver by using link-level retransmissions. Many wireless device drivers do not implement a good retransmission policy or a reservation protocol to guard against the frequent physical layer errors.
Reference: [Jus89] <author> C. Juszczak. </author> <title> Improving the Performance and Correctness of an NFS Server. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <month> January </month> <year> 1989. </year>
Reference-contexts: The relation of these studies to our research is discussed in the following paragraphs. 2 The performance of NFS over traditional wired LANs has been improved by using a server reply cache <ref> [Jus89] </ref>, by using write gathering to improve write throughput [Jus94], and by allowing larger than 8KB block sizes and allowing asynchronous writes [PJS + 94].
Reference: [Jus94] <author> C. Juszczak. </author> <title> Improving the Write Performance of an NFS Server. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: The relation of these studies to our research is discussed in the following paragraphs. 2 The performance of NFS over traditional wired LANs has been improved by using a server reply cache [Jus89], by using write gathering to improve write throughput <ref> [Jus94] </ref>, and by allowing larger than 8KB block sizes and allowing asynchronous writes [PJS + 94].
Reference: [KL96] <author> T.M. Kroeger and D.D.E. </author> <title> Long. Predicting Future File-System Actions from Prior Events. </title> <booktitle> In USENIX Winter Technical Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: Future experiments in a larger testbed with numerous mobile hosts will provide a better understanding of the scalability of our approach. We also intend to combine hoarding, as used in Coda [KS92] and [TLAC95], with the predictive file caching techniques of <ref> [KL96] </ref> to fetch files which have a high probability of being accessed and transferred from the server onto the local disk. This can be implemented over the mechanisms discussed in this paper and would reduce remote file access latencies and user response time.
Reference: [KM87] <author> C. Kent and J. Mogul. </author> <title> Fragmentation considered Harmful. </title> <booktitle> In ACM SIGCOMM, </booktitle> <month> August </month> <year> 1987. </year>
Reference-contexts: Using large block sizes increases the number of fragments, which increases the probability of a fragment being lost during the bad state. A single fragment loss requires retransmission of the entire block and can have a detrimental impact on performance <ref> [KM87] </ref>, [RF95]. Alternatively, small block sizes cause an increase in request and acknowledgment messages. This hand-shaking increases the transmission latency. The trade-off between these two opposing effects can be seen in Figures 3 and 4. It is especially clear at higher error rates where the errors exaggerate the opposing effects.
Reference: [KS92] <author> J.J. Kistler and M. Satyanaraynan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM TOCS, </journal> <volume> 10(1), </volume> <year> 1992. </year>
Reference-contexts: Some of the traditional improvements, such as the use of larger block sizes, actually have a detrimental effect on lossy wireless links and will degrade NFS performance at mobile hosts. Disk-caching is implemented in the Andrew File System (AFS) [Sat90] to improve remote file access performance. Coda <ref> [KS92] </ref>, its later version Odyssey [SNKP94], and Little Work [HHRB92] are successors of AFS and all use disk-caching to support disconnected and intermittent operation. <p> Future experiments in a larger testbed with numerous mobile hosts will provide a better understanding of the scalability of our approach. We also intend to combine hoarding, as used in Coda <ref> [KS92] </ref> and [TLAC95], with the predictive file caching techniques of [KL96] to fetch files which have a high probability of being accessed and transferred from the server onto the local disk.
Reference: [MJ93] <author> S. McCanne and V. Jacobson. </author> <title> The BSD Packet Filter: A New Architecture for User-Level Packet Capture. </title> <booktitle> In USENIX Winter Conference, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: Two mobile NFS clients, an IBM PS/2 and an IBM RT-PC, access the NFS server through the base-station using a 1 Mbps wireless link. The DEC-ALPHA monitors traffic on the Ethernet by running tcpdump <ref> [MJ93] </ref>. tcpdump reported zero packet loss in all tests. Using this testbed, we study the performance of NFS reads and writes by measuring the response times obtained for file transfers to and from the local disks of the mobile hosts.
Reference: [NKNS96] <author> G. Nguyen, R. Katz, B. Noble, and M. Satyanarayanan. </author> <title> A Trace-Based Approach for Modeling Wireless Channel Behavior. </title> <booktitle> In Proceedings of the Winter Simulation Conference, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: During the good state bits are transmitted without errors. The bad state occurs when bits are lost or corrupted. Two-state models have been used by previous researchers to characterize the error on the wireless channel, [BBKT96], and as a starting point for an empirical model for wireless error behavior <ref> [NKNS96] </ref>. A two-state model is chosen over the three-state model discussed in other studies [SKKF93],[WM95], as the two-state model simplifies the model without losing information pertinent to this research. The third state would represent a guard state, which 6 would occur when a single bit is corrupted.
Reference: [PAL + 95] <author> S. Paul, E. Ayanoglu, T.F. LaPorta, K.H. Chen, K.K. Sabnani, and R.D. Gitlin. </author> <title> An Asymmetric Link-layer Protocol for Digital Cellular Communications. </title> <booktitle> In IEEE INFOCOM, </booktitle> <year> 1995. </year> <month> 16 </month>
Reference-contexts: This approach preserves TCP semantics, while improving performance, but has a larger buffer requirement and requires complex changes. Link-level retransmissions have been proposed to improve performance over wireless links [DCY93], <ref> [PAL + 95] </ref>, [BBKT96]. In addition, [BDSZ94] presents and simulates a media access protocol which provides reliability on the wireless links. <p> Many wireless device drivers do not implement a good retransmission policy or a reservation protocol to guard against the frequent physical layer errors. This leads to bad link utilization and triggers detrimental behavior (such as unnecessary back-off) in the higher level protocols or applications involved. Using link-level retransmissions ([DCY93], <ref> [PAL + 95] </ref>, [BBKT96]) for a more robust wireless link would shield the higher layers, preventing them from over-reacting to errors.
Reference: [PJS + 94] <author> B. Pawlowski, C. Juszczak, P. Staubach, C. Smith, D. Lebel, and D. Hitz. </author> <title> NFS Version 3 Design and Implementation. </title> <booktitle> In USENIX Summer Conference, </booktitle> <year> 1994. </year>
Reference-contexts: Unable to store all their data on their local disks, users often must fetch files from servers on the wired network via wireless links. The Network File System (NFS) protocol is widely used on wired LANs to provide a mechanism for remote and distributed file access [SGK + 85], <ref> [PJS + 94] </ref>. Users migrating to mobile hosts from stationary workstations want to continue to use NFS to access their files. <p> studies to our research is discussed in the following paragraphs. 2 The performance of NFS over traditional wired LANs has been improved by using a server reply cache [Jus89], by using write gathering to improve write throughput [Jus94], and by allowing larger than 8KB block sizes and allowing asynchronous writes <ref> [PJS + 94] </ref>. These modifications improve NFS performance at the NFS server but would not significantly help the performance of NFS in a wireless environment where the bottleneck is the mobile NFS client and the wireless link transmission.
Reference: [RF95] <author> A. Romanow and S. Floyd. </author> <title> Dynamics of TCP Traffic over ATM Networks. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 13(4), </volume> <month> May </month> <year> 1995. </year>
Reference-contexts: Using large block sizes increases the number of fragments, which increases the probability of a fragment being lost during the bad state. A single fragment loss requires retransmission of the entire block and can have a detrimental impact on performance [KM87], <ref> [RF95] </ref>. Alternatively, small block sizes cause an increase in request and acknowledgment messages. This hand-shaking increases the transmission latency. The trade-off between these two opposing effects can be seen in Figures 3 and 4. It is especially clear at higher error rates where the errors exaggerate the opposing effects.
Reference: [Sat90] <author> M. Satyanaraynan. </author> <title> Scalable, Secure and Highly Available Distributed File Access. </title> <journal> IEEE Computer, </journal> <volume> 23(5), </volume> <year> 1990. </year>
Reference-contexts: Some of the traditional improvements, such as the use of larger block sizes, actually have a detrimental effect on lossy wireless links and will degrade NFS performance at mobile hosts. Disk-caching is implemented in the Andrew File System (AFS) <ref> [Sat90] </ref> to improve remote file access performance. Coda [KS92], its later version Odyssey [SNKP94], and Little Work [HHRB92] are successors of AFS and all use disk-caching to support disconnected and intermittent operation.
Reference: [SGK + 85] <author> R. Sandberg, D. Goldberg, S. Kleinman, D. Walsh, and B. Lyon. </author> <title> Design and Implementation of the Sun Network File System. </title> <booktitle> In USENIX Summer Conference, </booktitle> <year> 1985. </year>
Reference-contexts: Unable to store all their data on their local disks, users often must fetch files from servers on the wired network via wireless links. The Network File System (NFS) protocol is widely used on wired LANs to provide a mechanism for remote and distributed file access <ref> [SGK + 85] </ref>, [PJS + 94]. Users migrating to mobile hosts from stationary workstations want to continue to use NFS to access their files.
Reference: [SKKF93] <author> T. Sato, M. Kawabe, T. Kato, and A. Fukasawa. </author> <title> Throughput Analysis Method for Hybrid ARG Schemes Over Burst Error Channels. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> 42(1), </volume> <month> February </month> <year> 1993. </year>
Reference: [SNKP94] <author> M. Satyanaraynan, B. Noble, P. Kumar, and M. Price. </author> <title> Application-Aware Adaptation for Mobile Computing. </title> <booktitle> In 6th ACM SIGOPS European Workshop, </booktitle> <month> Septem-ber </month> <year> 1994. </year>
Reference-contexts: Disk-caching is implemented in the Andrew File System (AFS) [Sat90] to improve remote file access performance. Coda [KS92], its later version Odyssey <ref> [SNKP94] </ref>, and Little Work [HHRB92] are successors of AFS and all use disk-caching to support disconnected and intermittent operation.
Reference: [TLAC95] <author> C. Tait, H. Lei, S. Acharya, and H. Chang. </author> <title> Intelligent File Hoarding for Mobile Computers. </title> <booktitle> In First ACM International Conference on Mobile Computing and Networking, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: Future experiments in a larger testbed with numerous mobile hosts will provide a better understanding of the scalability of our approach. We also intend to combine hoarding, as used in Coda [KS92] and <ref> [TLAC95] </ref>, with the predictive file caching techniques of [KL96] to fetch files which have a high probability of being accessed and transferred from the server onto the local disk.
Reference: [WM95] <author> H.S. Wang and N. Moayeri. </author> <title> Finite State Markov Channel A Useful Model for Radio Communication Channels. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <month> February </month> <year> 1995. </year>
Reference: [YB94] <author> R. Yavatkar and N. Bhagwat. </author> <title> Improving End-to-End Performance of TCP over Mobile Internetworks. </title> <booktitle> In Mobile 94 Workshop on Mobile Computing Systems and Applications, </booktitle> <month> December </month> <year> 1994. </year> <month> 17 </month>
Reference-contexts: This approach addresses mobility but not the poor performance caused by burst errors on the wireless link. In the TCP split connection approaches <ref> [YB94] </ref>, [BB95a], the base-station 1 buffers packets being sent to the mobile hosts in its vicinity. The base-station retransmits any lost packets to prevent end-to-end retransmission.
References-found: 31

