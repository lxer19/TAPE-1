URL: ftp://coast.cs.purdue.edu/pub/doc/intrusion_detection/mcrosbie-spaf-AAAI-paper.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ24.html
Root-URL: http://www.cs.purdue.edu
Email: fmcrosbie,spafg@cs.purdue.edu  
Title: Applying Genetic Programming to Intrusion Detection  
Author: Mark Crosbie, Prof. Gene Spafford 
Address: West Lafayette IN 47907-1398  
Affiliation: COAST Laboratory Dept. of Computer Sciences Purdue University  
Abstract: This paper presents a potential solution to the intrusion detection problem in computer security. It uses a combination of work in the fields of Artificial Life and computer security. It shows how an intrusion detection system can be implemented using autonomous agents, and how these agents can be built using Genetic Programming. It also shows how Automatically Defined Functions (ADFs) can be used to evolve genetic programs that contain multiple data types and yet retain type-safety. Future work arising from this is also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Koza, John, </author> <year> 1992. </year> <title> Genetic Programming. </title> <publisher> MIT Press. </publisher>
Reference-contexts: Introduction Genetic Programming (GP) has been used to solve many problems that occur in the real world. Koza's book <ref> (Koza 1992) </ref> has numerous examples of using GP techniques to solve problems in a variety of fields. This paper presents a new application of genetic programming to solve a problem in the field of computer security. This application will exploit the learning power of GP. <p> The agents were tailored to a specific set of requirements not by design, but by training. Thus an end-user could retrain the agents to detect new, previously unknown, intrusions. The system needed a learning capability. Genetic Programming (GP) <ref> (Koza 1992) </ref> was chosen to implement this. This paradigm was chosen because it allowed programs to be evolved which could be then executed in production environments. <p> This leads to problems which will be discussed in the next section. Problems with multiple types In Koza's original work <ref> (Koza 1992) </ref>, the parse trees for his genetic programs were constructed from uni-typed functions. Every function could manipulate the result of any other function. However, in real world situations, there is a need to handle multiple data types within a genetic program and still ensure type safety.
Reference: <author> Koza, John, </author> <year> 1994. </year> <title> Genetic Programming II. </title> <publisher> MIT Press. Denning, </publisher> <address> Dorothy E, </address> <year> 1987. </year> <title> An Intrusion Detection Model. </title> <journal> IEEE Transactions on Software Engineering February: </journal> <note> 222 Garfinkel S., </note> <author> and Spafford E. </author> <year> 1991. </year> <title> Practical UNIX Security. </title> <publisher> O'Reilly and Associates Inc. </publisher>
Reference-contexts: This paper presents a new application of genetic programming to solve a problem in the field of computer security. This application will exploit the learning power of GP. In the course of designing a solution to the problem, a novel use for Automatically Defined Functions (ADFs) <ref> (Koza 1994) </ref> was also discovered. Background and Motivation In order to understand the security problem being solved, this section provides a brief introduction and motivation.A computer system is secure if (Garfinkel and Spafford 1991) it can be depended upon to behave as it is ex pected to. <p> As our primary goal was intrusion detection, we chose the path of least resistance and implemented a different solution. A solution using ADFs Koza introduced the idea of an Automatically Defined Function (ADF) in his second book <ref> (Koza 1994) </ref>. An ADF is essentially a subroutine that is evolved separately from the parent parse tree. It is this separate evolution that allows the generation of type-safe parse trees.
Reference: <author> Russell D., and Gangeni Sr. G. </author> <year> 1991. </year> <title> Computer Security Basics. </title> <publisher> O'Reilly and Associates Inc. </publisher>
Reference-contexts: This is an intuitive definition | we generally will have confidence in a system if it behaves according to our expectations. More formally, security is often described in terms of confidentiality, integrity and availability <ref> (Russell and Gangeni Sr. 1991) </ref>.
Reference: <author> Longley D., and Shain M. </author> <title> 1987 Data and Computer Security: Dictionary of Standards, Concepts and Terms. </title> <publisher> Stockton Press. </publisher>
Reference-contexts: Any attack on a system can be classified using these three criteria. The key aspect of any system's security is its security policy. A policy is <ref> (Longley and Shain 1987) </ref> the set of laws, rules, and practices that regulate how an organization manages, protects and dis tributes sensitive information. A security policy is necessary before any security system can be implemented or put in place on a system.
Reference: <author> Heady R., Luger G., Maccabe A., and Servilla M. </author> <year> 1990. </year> <title> The Architecture of a Network-level Intrusion Detection System, </title> <type> Technical Report, </type> <institution> CS90-20. Dept. of Computer Science, University of New Mexico, </institution> <address> Al-buquerque, NM 87131. </address>
Reference-contexts: In our case, the detection system is called an Intrusion Detection System. Intrusions and Intrusion Detection An intrusion can be defined as <ref> (Heady et al. 1990) </ref> any set of actions that attempt to compromise the integrity, confidentiality or availability of a re source.
Reference: <author> Mukherjee B., Heberline L. T., and Levitt K. </author> <year> 1994. </year> <title> Network Intrusion Detection. IEEE Network May/June: 26 Lunt T, </title> <editor> and Javitz H. </editor> <year> 1992. </year> <title> A real-time intrusion detection expert system (IDES), </title> <type> Technical Report SRI Project 6784, </type> <institution> SRI International. </institution>
Reference-contexts: Note that this is still all interpreted relative to a security policy. To detect and report intrusions, a system must have some form of intrusion detection system (IDS) installed. An IDS must <ref> (Mukherjee, Heberline and Levitt 1994) </ref> identify, preferably in real time, unauthorized use, misuse, and abuse of computer systems. As this is a reactive form of defense, it will not stop an intrusion from occurring.
Reference: <author> Vaccaro H. S., and Liepins G. E. </author> <month> May </month> <year> 1989. </year> <title> Detection of Anomalous Computer Activity. </title> <booktitle> In Proceedings of 1989 Symposium on Research in Security and Privacy. </booktitle>
Reference-contexts: System profile met-rics are continually matched against this rule base, and if an intrusion is detected, an alert is raised. Examples of this are the IDES system (Lunt 1992) and Wisdom & Sense <ref> (Vaccaro and Liepins 1989) </ref>. Both these systems derive metrics about the system's activity and then use an expert-system to decide if the metrics represent an intrusion. To detect anomalies, some abstraction of system operation must be computed.
Reference: <editor> Maes P. </editor> <booktitle> 1993 Modeling adaptive autonomous agents. Artificial Life 1(1/2). </booktitle>
Reference-contexts: A Finer-grained Approach Instead of one large monolithic IDS module, we propose a finer-grained approach | a group of free-running processes which can act independently of each other and the system. These are termed Autonomous Agents. An agent is defined as <ref> (Maes 1993) </ref> a system that tries to fulfill a set of goals in a complex, dynamic environment. In our context, and agent would try to detect anomalous intrusions in a computer system under continually changing conditions. In other words, the agent would be the IDS.
Reference: <author> Wall L., and Schwartz R. </author> <title> 1992 Programming PERL. </title> <publisher> O'Reilly and Associates Inc. </publisher>
Reference-contexts: This was used to assign a fitness score to each potential agent. This fitness score was then used by the genetic programming package to guide the evolution of the agents' code. The scenario data is generated by a PERL <ref> (Wall and Schwartz 1992) </ref> script which executes commands at specified intervals. These commands would correspond to what a potential intruder would execute. For example, one scenario attempts rapid connections to reserved ports (mail port, HTTPd port etc.) | it has a high probability (90%) of being an intrusion.
Reference: <author> Montana D., </author> <month> May </month> <year> 1993. </year> <title> Strongly Typed Genetic Programming, </title> <type> Technical Report, </type> <institution> Bolt Beranek and Newman Inc. </institution>
Reference-contexts: This ensures that operators are passed operands that conform to a certain type-lattice. For example, adding a boolean type to an integer type would be prohibited. Previous work has been done in the area of strongly typed genetic programming <ref> (Montana 1993) </ref>. This aimed to evolve parse trees that conformed to certain typing rules. However, despite the attraction of using this approach, we felt that it would involve significant re-writing of our GP package 1 .
Reference: <author> Crosbie M., </author> <month> October </month> <year> 1995. </year> <title> Defending a Computer System using Autonomous Agents. </title> <booktitle> In Proceedings of the 18th NISSC Conference, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: If an IDS can be split up into multiple functional entities which can operate in their own right, each of them can be an agent. This gives multiple intrusion detection systems running simultaneously | multiple autonomous agents. This approach is outlined in <ref> (Crosbie 1995) </ref>. Figure 1 shows the architecture of the agent based solution, with sample agents monitoring I/O, NFS activity and TCP network connections. The agents run in parallel in the system; in this design they are placed in the kernel.
References-found: 11

