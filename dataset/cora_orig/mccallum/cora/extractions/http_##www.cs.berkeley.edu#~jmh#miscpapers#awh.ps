URL: http://www.cs.berkeley.edu/~jmh/miscpapers/awh.ps
Refering-URL: http://www.cs.berkeley.edu/~jmh/papers.html
Root-URL: 
Email: aiken@cs.berkeley.edu hellers@cs.wisc.edu widom@cs.stanford.edu  
Title: Static Analysis Techniques for Predicting the Behavior of Active Database Rules  
Author: Alexander Aiken Joseph M. Hellerstein Jennifer Widom 
Address: Berkeley, CA 94720 Madison, WI 53706 Stanford, CA 94305  
Affiliation: Computer Science Division Computer Sciences Department Dept. of Computer Science University of California University of Wisconsin Stanford University  
Abstract: This paper gives methods for statically analyzing sets of active database rules to determine if the rules are (1) guaranteed to terminate, (2) guaranteed to produce a unique final database state, and (3) guaranteed to produce a unique stream of observable actions. If the analysis determines that one of these properties is not guaranteed, it isolates the rules responsible for the problem and determines criteria that, if satisfied, guarantee the property. The analysis methods are presented in the context of the Starburst Rule System.
Abstract-found: 1
Intro-found: 1
Reference: [ACL91] <author> R. Agrawal, R.J. Cochrane, and B. Lindsay. </author> <title> On maintaining priorities in a production rule system. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 479-487, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Starburst chooses between non-prioritized rules using an algorithm based on rule creation time <ref> [ACL91] </ref>, but this is an implementation feature separate from the semantics of the rule language. A rule's condition and action may refer to the current state of the database through top-level and nested SQL select operations.
Reference: [AMC93] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A new perspective on rule support for object-oriented databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Although our methods have been designed for the Starburst Rule System, we expect that they can be adapted to accommodate the syntax and semantics of many other active database rule languages, including A-RDL [SKdM92], Ariel [Han92], Chimera [CM93], POSTGRES [SJGP90], Sentinel <ref> [AMC93] </ref>, and others [CL92, DHW94]. We also expect that our techniques should be applicable to the upcoming standard for triggers in SQL3. To apply our methods to an alternative rule language, the fundamental definitions of Section 5 (Triggers, Performs, Choose, etc.) can be redefined appropriately.
Reference: [AWH92] <author> A. Aiken, J. Widom, and J.M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence, and observable determinism. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 59-68, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: In [CW90] we presented preliminary methods for analyzing termination in the context of deriving rules for integrity constraint maintenance; these methods form the basis of our approach to termination in this paper. An initial presentation of our analysis methods appears in <ref> [AWH92] </ref>; in this paper we provide additional intuition, refine the methods in [AWH92], include numerous examples, and provide proofs for all lemmas and theorems. <p> An initial presentation of our analysis methods appears in <ref> [AWH92] </ref>; in this paper we provide additional intuition, refine the methods in [AWH92], include numerous examples, and provide proofs for all lemmas and theorems.
Reference: [BFKM85] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: First, it considers simplified versions of the OPS5 production rule language <ref> [BFKM85] </ref>. OPS5 has a quite different model of rule processing than most active database systems, including Starburst. Second, the goal of previous work is to impose restrictions and/or orderings on OPS5 rule sets such that unique fixed points are guaranteed.
Reference: [BW94] <author> E. Baralis and J. Widom. </author> <title> An algebraic approach to rule analysis in expert database systems. </title> <booktitle> In Proceedings of the Twentieth International Conference on Very Large Data Bases, </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: An initial presentation of our analysis methods appears in [AWH92]; in this paper we provide additional intuition, refine the methods in [AWH92], include numerous examples, and provide proofs for all lemmas and theorems. Finally, <ref> [BW94] </ref> presents algorithms that can be used within our framework to strengthen certain aspects of the analysis; we will point out where the results of [BW94] are applicable. 1.2 Outline of Paper As an introduction to active databases and to establish a basis for our analysis techniques, in Section 2 we <p> Finally, <ref> [BW94] </ref> presents algorithms that can be used within our framework to strengthen certain aspects of the analysis; we will point out where the results of [BW94] are applicable. 1.2 Outline of Paper As an introduction to active databases and to establish a basis for our analysis techniques, in Section 2 we give a syntax and semantics for the Starburst rule language. <p> More semantic-based and therefore accurate definitions may be "plugged in" instead, e.g., using the methods presented in <ref> [BW94] </ref>. 6 Execution Model We now define a formal model of execution-time rule processing. The model is based on execution graphs and accurately captures the semantics of rule processing described in Section 2. <p> Rules good-sales and new-rank are commutative. The conditions in Lemma 8.1 are somewhat conservative and can be refined by performing more complex analysis on rule conditions and actions and by considering a variety of special cases, as in, e.g., <ref> [BW94] </ref>. In addition, we allow the user to declare that pairs of rules that appear noncommutative according to Lemma 8.1 actually do commute. <p> This may include more complex analysis of SQL (initial progress appears in <ref> [BW94] </ref>), more accurate properties of our execution model, and a suite of special cases. * Interaction between properties: As mentioned in Section 10, there may be subtle interactions when attempting to establish a set of rules that is both confluent and observably deterministic.
Reference: [CBB + 89] <author> S. Chakravarthy, B. Blaustein, A.P. Buchmann, M. Carey, U. Dayal, D. Goldhirsch, M. Hsu, R. Jauhari, R. Ladin, M. Livny, D. McCarthy, R. McKee, and A. Rosenthal. HiPAC: </author> <title> A research project in active, time-constrained database management. </title> <type> Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, Cambridge, Massachusetts, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: Note that in active database rule languages supporting a variety of coupling modes, e.g., HiPAC <ref> [CBB + 89] </ref>, Ode [GJ91], and others, rule analysis methods must incorporate the possibility that rule conditions may be evaluated and rule actions may be executed at a different time from when 26 the rule is triggered. Our methods apply directly to immediate and deferred coupling modes.
Reference: [CL92] <author> S. Chakravarthy and D. Lomet, </author> <title> editors. Special Issue on Active Databases, </title> <journal> IEEE Data Engineering Bulletin 15(4), </journal> <month> December </month> <year> 1992. </year>
Reference-contexts: Although our methods have been designed for the Starburst Rule System, we expect that they can be adapted to accommodate the syntax and semantics of many other active database rule languages, including A-RDL [SKdM92], Ariel [Han92], Chimera [CM93], POSTGRES [SJGP90], Sentinel [AMC93], and others <ref> [CL92, DHW94] </ref>. We also expect that our techniques should be applicable to the upcoming standard for triggers in SQL3. To apply our methods to an alternative rule language, the fundamental definitions of Section 5 (Triggers, Performs, Choose, etc.) can be redefined appropriately.
Reference: [CM93] <author> S. Ceri and R. Manthey. </author> <title> Consolidated specification of Chimera, the conceptual interface of Idea. </title> <type> Technical Report IDEA.DD.2P.004, </type> <institution> Politecnico di Milano, Milan, Italy, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Although our methods have been designed for the Starburst Rule System, we expect that they can be adapted to accommodate the syntax and semantics of many other active database rule languages, including A-RDL [SKdM92], Ariel [Han92], Chimera <ref> [CM93] </ref>, POSTGRES [SJGP90], Sentinel [AMC93], and others [CL92, DHW94]. We also expect that our techniques should be applicable to the upcoming standard for triggers in SQL3. To apply our methods to an alternative rule language, the fundamental definitions of Section 5 (Triggers, Performs, Choose, etc.) can be redefined appropriately.
Reference: [CW90] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for constraint maintenance. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 566-577, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Termination analysis has been explored in the context of deductive databases; see e.g., [KRS88, SV89]. Unfortunately the rule processing model for deductive databases is sufficiently different from the model for active databases that analysis techniques for deductive databases do not carry over. In <ref> [CW90] </ref> we presented preliminary methods for analyzing termination in the context of deriving rules for integrity constraint maintenance; these methods form the basis of our approach to termination in this paper. <p> We take as an assumption that individual rule actions terminate. Hence, in terms of execution graphs, the rules in R are guaranteed to terminate iff all paths in every execution graph for R are finite. As suggested in <ref> [CW90] </ref>, termination is analyzed by constructing a directed triggering graph for the rules in R, denoted TG R . The nodes in TG R represent all rules r 2 R such that Rollback (r) is false; the edges in TG R represent the Triggers relationship. <p> It is worth noting that the analysis process did in fact uncover sources of nontermination that we overlooked when writing the rules. Details of the case study can be found in <ref> [CW90] </ref>. 8 Confluence Next we want to determine whether the rules in R are confluent. That is, we want to determine if the final database state at termination of rule processing can depend on which rule is chosen for consideration when multiple non-prioritized rules are triggered. <p> Then by Corollary 8.8 they must commute. 2 Additional similar Corollaries certainly exist and provide useful initial tools for the rule programmer. We used our approach to analyze confluence for several medium-sized rule applications. The applications included rule sets generated automatically for the purposes of integrity constraints <ref> [CW90] </ref> and materialized view maintenance [CW91]. The applications also included hand-coded rule sets for simulating SQL referential integrity, for garbage collection, and for solving a combinatorial optimization problem. In all cases except view maintenance, the rule sets were initially found to be non-confluent.
Reference: [CW91] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: We used our approach to analyze confluence for several medium-sized rule applications. The applications included rule sets generated automatically for the purposes of integrity constraints [CW90] and materialized view maintenance <ref> [CW91] </ref>. The applications also included hand-coded rule sets for simulating SQL referential integrity, for garbage collection, and for solving a combinatorial optimization problem. In all cases except view maintenance, the rule sets were initially found to be non-confluent.
Reference: [DHW94] <author> U. Dayal, E.N. Hanson, and J. Widom. </author> <title> Active database systems. </title> <editor> In W. Kim, editor, </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond. </title> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1994. </year> <month> 36 </month>
Reference-contexts: Although our methods have been designed for the Starburst Rule System, we expect that they can be adapted to accommodate the syntax and semantics of many other active database rule languages, including A-RDL [SKdM92], Ariel [Han92], Chimera [CM93], POSTGRES [SJGP90], Sentinel [AMC93], and others <ref> [CL92, DHW94] </ref>. We also expect that our techniques should be applicable to the upcoming standard for triggers in SQL3. To apply our methods to an alternative rule language, the fundamental definitions of Section 5 (Triggers, Performs, Choose, etc.) can be redefined appropriately.
Reference: [DW92] <author> U. Dayal and J. Widom. </author> <title> Active database systems. </title> <booktitle> In ACM SIGMOD International Conference on Management of Data (tutorial), </booktitle> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference: [GJ91] <author> N. Gehani and H.V. Jagadish. </author> <title> Ode as an active database: Constraints and triggers. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 327-336, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Note that in active database rule languages supporting a variety of coupling modes, e.g., HiPAC [CBB + 89], Ode <ref> [GJ91] </ref>, and others, rule analysis methods must incorporate the possibility that rule conditions may be evaluated and rule actions may be executed at a different time from when 26 the rule is triggered. Our methods apply directly to immediate and deferred coupling modes.
Reference: [H + 90] <author> L.M. Haas et al. </author> <title> Starburst mid-flight: As the dust clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Our analysis methods have been developed and are presented in the context of the Starburst Rule System [WCL91], an active database rules facility integrated into the Starburst extensible relational DBMS prototype at the IBM Almaden Research Center <ref> [H + 90] </ref>.
Reference: [Han92] <author> E.N. Hanson. </author> <title> Rule condition testing and action execution in Ariel. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 49-58, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Although our methods have been designed for the Starburst Rule System, we expect that they can be adapted to accommodate the syntax and semantics of many other active database rule languages, including A-RDL [SKdM92], Ariel <ref> [Han92] </ref>, Chimera [CM93], POSTGRES [SJGP90], Sentinel [AMC93], and others [CL92, DHW94]. We also expect that our techniques should be applicable to the upcoming standard for triggers in SQL3.
Reference: [HH91] <author> J.M. Hellerstein and M. Hsu. </author> <title> Determinism in partially ordered production systems. </title> <institution> IBM Research Report RJ 8009, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: However, the notions of confluence and observable determinism typically are not relevant for detached coupling mode: multiple transactions are involved, so there is no single thread of control and no "final" database state. Some technical comparisons can be drawn between this work and the results in [HH91,Ras90, ZH90]. In <ref> [HH91] </ref>, a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence. By defining an appropriate mapping between our language and the language in [HH91], we have shown <p> In <ref> [HH91] </ref>, a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence. By defining an appropriate mapping between our language and the language in [HH91], we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to <p> By defining an appropriate mapping between our language and the language in <ref> [HH91] </ref>, we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to subsume those in [Ras90,ZH90], hence our approach, although still conservative, appears quite accurate when compared with previous work. <p> language and the language in <ref> [HH91] </ref>, we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to subsume those in [Ras90,ZH90], hence our approach, although still conservative, appears quite accurate when compared with previous work.
Reference: [Hue80] <author> G. Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: have an empty set of triggered rules, so two different final states cannot represent the same database state.) Confluence for active database rules is a particularly difficult problem because, in addition to 13 S S j @ r j @ r j r i the standard problems associated with confluence <ref> [Hue80] </ref>, we must take into account the interactions between rule triggering and rule priorities. <p> states S, S i , and S j in EG such that S fl fl ! S j , there is a fourth state S 0 such that S i fl fl 4 Sometimes the term confluence is used to denote the supposition of this lemma, rather than the conclusion <ref> [Hue80] </ref>. This lemma demonstrates that our definition of confluence is implied by the alternative definition. 16 S S j @ fl @ fl fl (a) Based on paths S S j @ r j @ fl fl (b) Based on edges Proof: Classic result; see [Hue80]. <p> lemma, rather than the conclusion <ref> [Hue80] </ref>. This lemma demonstrates that our definition of confluence is implied by the alternative definition. 16 S S j @ fl @ fl fl (a) Based on paths S S j @ r j @ fl fl (b) Based on edges Proof: Classic result; see [Hue80]. We use Lemma 8.4 as the basis for our analysis techniques.
Reference: [HW93] <author> E.N. Hanson and J. Widom. </author> <title> An overview of production rules in database systems. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8(2) </volume> <pages> 121-143, </pages> <month> June </month> <year> 1993. </year>
Reference: [KRS88] <author> R. Krishnamurthy, R. Ramakrishnan, and O. Shmueli. </author> <title> Framework for testing safety and effective computability of extended Datalog. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 154-164, </pages> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Their technique applies to a restricted rule model and does not appear to extend readily to active database systems such as Starburst. Termination analysis has been explored in the context of deductive databases; see e.g., <ref> [KRS88, SV89] </ref>. Unfortunately the rule processing model for deductive databases is sufficiently different from the model for active databases that analysis techniques for deductive databases do not carry over.
Reference: [KU91] <editor> A.P. Karadimce and S.D. Urban. </editor> <title> Diagnosing anomalous rule behavior in databases with integrity maintenance production rules. </title> <booktitle> In Third Workshop on Foundations of Models and Languages for Data and Objects, </booktitle> <address> Aigen, Austria, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Our goal, on the other hand, is to permit arbitrary rule sets and provide useful information about their behavior in the database setting. In Section 11 we make some additional, more technical comparisons, and we explain how our analysis techniques subsume results in [HH91,Ras90,ZH90]. In <ref> [KU91] </ref>, the issue of rule set termination is discussed, along with the issue of conflicting updates|determining when one rule may undo changes made by a previous rule. Although models and a "problem-solving architecture" for rule analysis are proposed, no algorithms are given.
Reference: [KU94] <editor> A.P. Karadimce and S.D. Urban. </editor> <title> Conditional term rewriting as a formal basis for analysis of active database rules. </title> <booktitle> In Fourth International Workshop on Research Issues in Data Engineering (RIDE-ADS '94), </booktitle> <pages> pages 156-162, </pages> <address> Houston, Texas, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Although models and a "problem-solving architecture" for rule analysis are proposed, no algorithms are given. The same authors later present a rule analysis technique based on results for term rewriting systems 2 <ref> [KU94] </ref>. Their technique applies to a restricted rule model and does not appear to extend readily to active database systems such as Starburst. Termination analysis has been explored in the context of deductive databases; see e.g., [KRS88, SV89].
Reference: [Ras90] <author> L. Raschid. </author> <title> Maintaining consistency in a stratified production system. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On rules, procedures, caching and views in data base systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 281-290, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Although our methods have been designed for the Starburst Rule System, we expect that they can be adapted to accommodate the syntax and semantics of many other active database rule languages, including A-RDL [SKdM92], Ariel [Han92], Chimera [CM93], POSTGRES <ref> [SJGP90] </ref>, Sentinel [AMC93], and others [CL92, DHW94]. We also expect that our techniques should be applicable to the upcoming standard for triggers in SQL3. To apply our methods to an alternative rule language, the fundamental definitions of Section 5 (Triggers, Performs, Choose, etc.) can be redefined appropriately.
Reference: [SKdM92] <author> E. Simon, J. Kiernan, and C. de Maindreville. </author> <title> Implementing high level active rules on top of a relational DBMS. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 315-326, </pages> <address> Vancouver, British Columbia, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Although our methods have been designed for the Starburst Rule System, we expect that they can be adapted to accommodate the syntax and semantics of many other active database rule languages, including A-RDL <ref> [SKdM92] </ref>, Ariel [Han92], Chimera [CM93], POSTGRES [SJGP90], Sentinel [AMC93], and others [CL92, DHW94]. We also expect that our techniques should be applicable to the upcoming standard for triggers in SQL3.
Reference: [SV89] <author> Y. Sagiv and M. Vardi. </author> <title> Safety of Datalog over infinite databases. </title> <booktitle> In Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 160-170, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Their technique applies to a restricted rule model and does not appear to extend readily to active database systems such as Starburst. Termination analysis has been explored in the context of deductive databases; see e.g., <ref> [KRS88, SV89] </ref>. Unfortunately the rule processing model for deductive databases is sufficiently different from the model for active databases that analysis techniques for deductive databases do not carry over.
Reference: [WCL91] <author> J. Widom, R.J. Cochrane, and B.G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: If termination, confluence, or observable determinism is desired but not guaranteed, then the user may verify that the necessary criteria are satisfied or may modify the rule set and try again. Our analysis methods have been developed and are presented in the context of the Starburst Rule System <ref> [WCL91] </ref>, an active database rules facility integrated into the Starburst extensible relational DBMS prototype at the IBM Almaden Research Center [H + 90]. <p> In the context of rule conditions and for the purposes of rule analysis, predicates and select statements are equivalent <ref> [WCL91] </ref>. 4 processing point (or start of the transaction) creates the first relevant transition, and some rules are triggered by this transition. As rule actions are executed, additional transitions are created which may trigger additional rules or trigger the same rules additional times.
Reference: [WF90] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in relational database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: A formal theory of transitions and their net effects appears in <ref> [WF90] </ref>.
Reference: [Wid92] <author> J. Widom. </author> <title> The Starburst Rule System: Language design, implementation, </title> <journal> and applications. IEEE Data Engineering Bulletin, Special Issue on Active Databases, </journal> <volume> 15(4) </volume> <pages> 15-18, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: User-invoked rule processing may specify that only a subset of the defined rules should be considered for execution, rather than all rules <ref> [Wid92] </ref>. Hence, the rule programmer may want to predict the behavior of a subset of the rules. The semantics of rule processing for rule subsets is identical to rule processing in the general case, so our analysis methods can be applied directly to arbitrary rule subsets.
Reference: [ZH90] <author> Y. Zhou and M. Hsu. </author> <title> A theory for rule triggering systems. </title> <booktitle> In Advances in Database Technology| EDBT '90, Lecture Notes in Computer Science 416, </booktitle> <pages> pages 407-421. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> March </month> <year> 1990. </year> <month> 37 </month>
Reference-contexts: However, the notions of confluence and observable determinism typically are not relevant for detached coupling mode: multiple transactions are involved, so there is no single thread of control and no "final" database state. Some technical comparisons can be drawn between this work and the results in <ref> [HH91,Ras90, ZH90] </ref>. In [HH91], a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence.
References-found: 29

