URL: http://www.tik.ee.ethz.ch/~blickle/ppsn1.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: blickle@tik.ee.ethz.ch  
Title: Evolving Compact Solutions in Genetic Programming: A Case Study  
Author: Tobias Blickle 
Address: Gloriastrasse 35, 8092 Zurich Switzerland  
Affiliation: Computer Engineering and Communication Networks Lab (TIK) Swiss Federal Institute of Technology (ETH)  
Abstract: Genetic programming (GP) is a variant of genetic algorithms where the data structures handled are trees. This makes GP especially useful for evolving functional relationships or computer programs, as both can be represented as trees. Symbolic regression is the determination of a function dependence y = g(x) that approximates a set of data points (x i ; y i ). In this paper the feasibility of symbolic regression with GP is demonstrated on two examples taken from different domains. Furthermore several suggested methods from literature are compared that are intended to improve GP performance and the readability of solutions by taking into account introns or redundancy that occurs in the trees and keeping the size of the trees small. The experiments show that GP is an elegant and useful tool to derive complex functional dependencies on numerical data.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Tobias Blickle and Lothar Thiele. </author> <title> Genetic programming and redundancy. </title> <editor> In J. Hopf, editor, </editor> <booktitle> Genetic Algorithms within the Framework of Evolutionary Computation (Workshop at KI-94, Saarbrucken), </booktitle> <pages> pages 33-38. </pages> <institution> Max-Planck-Institut fur Informatik (MPI-I-94-241), </institution> <year> 1994. </year>
Reference-contexts: On the other hand, the determination of a Boolean multiplexer function is a typical example for a discrete optimization task. Second, to empirically analyze the size problem in GP. This problem is related to "introns" or "redundancy" in the trees and has been addressed by several investigations <ref> [8, 1, 7, 9, 5] </ref>. A comparison of several configurations that make use of methods to reduce the "garbage" in the trees is carried out for the two examples. The size problem is of special interest for symbolic regression as one usually looks for short, compact, and "readable" solutions. <p> It is well known from several investigations that the tree size in GP tends to grow even (or especially) when no improvement in the population is made <ref> [8, 1, 5, 6] </ref>. However for symbolic regression a small tree size is desirable in order to be able to interpret the evolved results. Furthermore, several investigations indicate that short solutions generalize the training data better [5, 9]. There are several approaches dealing with the problem of tree size explosion. <p> In a different approach dealing with the bloating phenomenon is the suggestion of a special crossover operator, the deleting crossover, based on the marking crossover <ref> [1] </ref>. The basic idea is to mark all edges in a tree that were traversed during evaluation of the fitness function. All remaining edges were never used to calculate the fitness and hence the subtrees at these edges are redundant. <p> Several suggested methods from literature to control the tree size complexity have been compared, in particular, the use of Explicitly Defined Introns (EDI) [6], the deleting crossover <ref> [1] </ref> and the use of an adaptive parsimony pressure [9]. The results for the two specific problems investigated in this paper seem to indicate that the use of EDIs or deleting crossover give no advantages for continuous problems and that deleting crossover can be successful on discrete problems.
Reference: 2. <author> Tobias Blickle and Lothar Thiele. </author> <title> A comparison of selection schemes used in genetic algorithms (2. edition). </title> <type> Technical Report 11, </type> <institution> Computer Engineering and Communication Networks Lab (TIK), Swiss Federal Institute of Technology (ETH) Zurich, </institution> <address> Gloriastrasse 35, CH-8092 Zurich, </address> <month> Dec </month> <year> 1995. </year>
Reference-contexts: threshold f th = 1:0 Maximum number of constant-optimization steps s max = 10 Complexity measure (v (g)= # of nodes) C (g) = v (g) v max Penalty value P EN ALT Y = 100:000 4.1 Regression for a Continuous Problem During the theoretical investigation of selection selection schemes <ref> [2] </ref>, several difficult integral equations were obtained. <p> The maximum relative error over all data points assures that for each data point the error is below a certain value: E c (g) = max j y i Equation 2 describes the selection variance of tournament selection as a relationship with the tournament size t (see <ref> [2] </ref> for details).
Reference: 3. <author> Hitoshi Iba, Takio Kurita, Hugo de Garis, and Taisuke Sato. </author> <title> System identification using structured genetic algorithms. </title> <editor> In Stefanie Forrest, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pages 279-286, </pages> <address> San Mateo, CA, 1993. </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: This task is similar to the system identification problem, where the behavior of an unknown system is to be learned and predicted based on examples given as input-output data. Time-series prediction, pattern recognition and the classification problem also belong to this problem class (see, e.g. <ref> [3] </ref>). Often the generalization capability of the approximation function g (x) is crucial, i.e. the accuracy of the approximation on unseen data. The approximation function g (x) may be of predefined shape, for example a polynomial of a certain degree. In this case the regression simply consists of adjusting coefficients.
Reference: 4. <author> John R. Koza. </author> <title> Genetic programming: on the programming of computers by means of natural selection. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: The different explanations will be introduced in Sect. 3. The subsequent section compares the results and Sect. 5 gives some conclusions. 2 Symbolic Regression Using GP The basic approach of using GP for symbolic regression has already been outlined by Koza <ref> [4] </ref>. The advantages of using GP for symbolic regression can be summarized as follows: Size and shape of the approximation function need not be known in advance. A small risk of over-fitting the data. Arbitrary complex functions can be supported in the function set.
Reference: 5. <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms (ICGA95), </booktitle> <pages> pages 310-317, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: On the other hand, the determination of a Boolean multiplexer function is a typical example for a discrete optimization task. Second, to empirically analyze the size problem in GP. This problem is related to "introns" or "redundancy" in the trees and has been addressed by several investigations <ref> [8, 1, 7, 9, 5] </ref>. A comparison of several configurations that make use of methods to reduce the "garbage" in the trees is carried out for the two examples. The size problem is of special interest for symbolic regression as one usually looks for short, compact, and "readable" solutions. <p> It is well known from several investigations that the tree size in GP tends to grow even (or especially) when no improvement in the population is made <ref> [8, 1, 5, 6] </ref>. However for symbolic regression a small tree size is desirable in order to be able to interpret the evolved results. Furthermore, several investigations indicate that short solutions generalize the training data better [5, 9]. There are several approaches dealing with the problem of tree size explosion. <p> However for symbolic regression a small tree size is desirable in order to be able to interpret the evolved results. Furthermore, several investigations indicate that short solutions generalize the training data better <ref> [5, 9] </ref>. There are several approaches dealing with the problem of tree size explosion. Most commonly, some kind of parsimony pressure is introduced, i.e., adding a factor to the fitness value of an approximation related to its size, i.e., f (g) = E (g) + ffC (g), as stated above. <p> Most commonly, some kind of parsimony pressure is introduced, i.e., adding a factor to the fitness value of an approximation related to its size, i.e., f (g) = E (g) + ffC (g), as stated above. Also in <ref> [5, 6] </ref> it is argued that Evolutionary Algorithms have a built in property of favoring short solutions and that a large fraction of the code of a GP solution are "introns" and hence the effective size of the code is much smaller.
Reference: 6. <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming (at Twelfth Int. Conf. on Machine Learning), </booktitle> <pages> pages 6-22. </pages> <note> Technical Report 95.2, </note> <institution> University of Rochester, </institution> <year> 1995. </year>
Reference-contexts: It is well known from several investigations that the tree size in GP tends to grow even (or especially) when no improvement in the population is made <ref> [8, 1, 5, 6] </ref>. However for symbolic regression a small tree size is desirable in order to be able to interpret the evolved results. Furthermore, several investigations indicate that short solutions generalize the training data better [5, 9]. There are several approaches dealing with the problem of tree size explosion. <p> Most commonly, some kind of parsimony pressure is introduced, i.e., adding a factor to the fitness value of an approximation related to its size, i.e., f (g) = E (g) + ffC (g), as stated above. Also in <ref> [5, 6] </ref> it is argued that Evolutionary Algorithms have a built in property of favoring short solutions and that a large fraction of the code of a GP solution are "introns" and hence the effective size of the code is much smaller. <p> The initialization range of the EDIs is [10, : : :, 1010], as recommended in <ref> [6] </ref>. Deleting setup: The use of standard GP with deleting crossover as described above and a constant parsimony pressure ff. <p> In contrary, the average error of the best solutions is very high (152%) (marked with (*) in the table). This occurs because in two runs the GP found very bad solutions. This phenomenon has also been reported in <ref> [6] </ref> where, on the other hand, the good solutions were found very quickly. This could not be observed in our experiments. If the two "runaways" are neglected the average error is 0.62%. The Deleting approach seems to have no advantages. All results are similar to those of the Simple setup. <p> Several suggested methods from literature to control the tree size complexity have been compared, in particular, the use of Explicitly Defined Introns (EDI) <ref> [6] </ref>, the deleting crossover [1] and the use of an adaptive parsimony pressure [9].
Reference: 7. <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Genetic programming with adaptive representations. </title> <type> Technical Report 489, </type> <institution> The University of Rochester, Computer Science Department, Rochester, </institution> <address> New York 14267, </address> <year> 1994. </year>
Reference-contexts: On the other hand, the determination of a Boolean multiplexer function is a typical example for a discrete optimization task. Second, to empirically analyze the size problem in GP. This problem is related to "introns" or "redundancy" in the trees and has been addressed by several investigations <ref> [8, 1, 7, 9, 5] </ref>. A comparison of several configurations that make use of methods to reduce the "garbage" in the trees is carried out for the two examples. The size problem is of special interest for symbolic regression as one usually looks for short, compact, and "readable" solutions.
Reference: 8. <author> Walter Alden Tackett. </author> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> Faculty of the Graduate School, University of Southern California, </institution> <year> 1994. </year>
Reference-contexts: On the other hand, the determination of a Boolean multiplexer function is a typical example for a discrete optimization task. Second, to empirically analyze the size problem in GP. This problem is related to "introns" or "redundancy" in the trees and has been addressed by several investigations <ref> [8, 1, 7, 9, 5] </ref>. A comparison of several configurations that make use of methods to reduce the "garbage" in the trees is carried out for the two examples. The size problem is of special interest for symbolic regression as one usually looks for short, compact, and "readable" solutions. <p> It is well known from several investigations that the tree size in GP tends to grow even (or especially) when no improvement in the population is made <ref> [8, 1, 5, 6] </ref>. However for symbolic regression a small tree size is desirable in order to be able to interpret the evolved results. Furthermore, several investigations indicate that short solutions generalize the training data better [5, 9]. There are several approaches dealing with the problem of tree size explosion.
Reference: 9. <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> Balancing accuracy and parsimony in genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(1) </volume> <pages> 17-38, </pages> <year> 1995. </year>
Reference-contexts: On the other hand, the determination of a Boolean multiplexer function is a typical example for a discrete optimization task. Second, to empirically analyze the size problem in GP. This problem is related to "introns" or "redundancy" in the trees and has been addressed by several investigations <ref> [8, 1, 7, 9, 5] </ref>. A comparison of several configurations that make use of methods to reduce the "garbage" in the trees is carried out for the two examples. The size problem is of special interest for symbolic regression as one usually looks for short, compact, and "readable" solutions. <p> However for symbolic regression a small tree size is desirable in order to be able to interpret the evolved results. Furthermore, several investigations indicate that short solutions generalize the training data better <ref> [5, 9] </ref>. There are several approaches dealing with the problem of tree size explosion. Most commonly, some kind of parsimony pressure is introduced, i.e., adding a factor to the fitness value of an approximation related to its size, i.e., f (g) = E (g) + ffC (g), as stated above. <p> Especially if the fitness function is real valued, one has to face the problem that if the parsimony pressure is too high, the GP may favor a short solution to a better one. Zhang and Muhlenbein solve this problem by a method called "adaptive balancing of accuracy and parsimony" <ref> [9] </ref>. The parsimony pressure ff (also called Occam factor) is automatically adapted to the current quality of the best solution. The proposed heuristic is derived from a detailed statistical analysis. <p> Deleting setup: The use of standard GP with deleting crossover as described above and a constant parsimony pressure ff. Adaptive setup: The usage of standard GP with adaptive parsimony pres sure as suggested in <ref> [9] </ref>, with the accuracy limit * = 0:02. 4 Experiments In the following we will test the four setups on two problems taken from different domains: the symbolic regression of a unknown complex integral equation as one-dimensional continuous regression problem and the determination of a Boolean 6-multiplexer function as an example <p> Several suggested methods from literature to control the tree size complexity have been compared, in particular, the use of Explicitly Defined Introns (EDI) [6], the deleting crossover [1] and the use of an adaptive parsimony pressure <ref> [9] </ref>. The results for the two specific problems investigated in this paper seem to indicate that the use of EDIs or deleting crossover give no advantages for continuous problems and that deleting crossover can be successful on discrete problems.
References-found: 9

