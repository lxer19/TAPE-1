URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP203-S96/L1996-02-01.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP203-S1996/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP203: Parallel and Distributed Computing Parallel lexical Analysis Halving Merge NESL 1 Parallel Lexical Analysis
Author: Manuel Oliveira Brian Grant Hopcroft Ullman. 
Note: Topics of this lecture:  M fS;  material, see ch. 1 of  3. Use the initial automaton state to index into all these arrays. Now every character has been replaced by the state the automaton would have after that character.  
Date: February 1, 1996  
Abstract: The problem we will consider now is how to break a long string of characters into tokens. The lexical structure of a programming language is conventionally expressed in terms of a regular language, which is reconized with a Determistic Finite Automaton (DFA). A DFA M is a 5-tuple: All operators we have used until now in scans and reductions were associative and commutative (e.g. +, *). Now we will use noncommutative operators. A parallel lexical analyzer can be implemented using a parallel-prefix computation. Consider the set of functions F = ff i : S ! Sji 2 g, where f i (s) = ffi(s; i). In other words, each f i describes the action of M on character i. The f i 's can be composed, but such compositions are not commutative. Observe that we have split the original transition function ffi into several transition functions, one for each symbol of the alphabet (ffi = [f i ). A function f i from a state to a state can be represented as a one-dimensional array indexed by states whose elements are states (see figure 1). The composition of two such funtions can be acomplished by "replacing every entry of one column with the result of using that entry to index into the other column" (Hillis & Steele). Figure 2 illustrates this process. Hillis & Steele describe a parallel-prefix algorithm which apply this composition operator to compute the automaton state after every character in a string as follows: 2. Perform a parallel-prefix operation. The net effect is that, after this step, every character c of the original string has been replaced by an array representing the state to state function for that prefix of the original string that ends at (and includes) c. Note that we need a CREW PRAM model to execute this parallel prefix operation. 
Abstract-found: 1
Intro-found: 1
References-found: 0

