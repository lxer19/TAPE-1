URL: http://theory.lcs.mit.edu/tds/papers/Segala/CONCUR94.ps
Refering-URL: http://theory.lcs.mit.edu/tds/papers/Segala/CONCUR94.html
Root-URL: 
Title: Probabilistic Simulations for Probabilistic Processes  
Author: Roberto Segala and Nancy Lynch 
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: Several probabilistic simulation relations for probabilistic systems are defined and evaluated according to two criteria: compositionality and preservation of "interesting" properties. Here, the interesting properties of a system are identified with those that are expressible in an untimed version of the Timed Probabilistic concurrent Computation Tree Logic (TPCTL) of Hansson. The definitions are made, and the evaluations carried out, in terms of a general labeled transition system model for concurrent probabilistic computation. The results cover weak simulations, which abstract from internal computation, as well as strong simulations, which do not.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Aspnes and M.P. Herlihy. </author> <title> Fast randomized consensus using shared memory. </title> <journal> Journal of Algorithms, </journal> <volume> 15(1) </volume> <pages> 441-460, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Randomization has been shown to be a useful tool for the solution of problems in distributed systems <ref> [1, 2, 12] </ref>. In order to support reasoning about probabilistic distributed systems, many researchers have recently focused on the study of models and methods for the analysis of such systems [3, 5, 7, 19-21]. <p> A probability space is a triplet (; F ; P ) where is a set, F is a collection of subsets of that is closed under complement and countable union and such that 2 F, and P is a function from F to <ref> [0; 1] </ref> such that P [] = 1 and for any collection fC i g i of at most countably many pairwise disjoint elements of F , P [[ i C i ] = P A probability space (; F ; P ) is discrete 3 if F = 2 and <p> ) and ( 2 ; F 2 ; P 2 ) are in relation v R , written ( 1 ; F 1 ; P 1 ) v R ( 2 ; F 2 ; P 2 ), iff there exists a weight function w : X fi Y ! <ref> [0; 1] </ref> such that 1. for each x 2 X, P 2. for each y 2 Y , P 3. for each (x; y) 2 X fi Y , if w (x; y) &gt; 0 then x R y. ut Definition 16.
Reference: 2. <author> M. Ben-Or. </author> <title> Another advantage of free choice: completely asynchronous agreement proto cols. </title> <booktitle> In Proceedings of the 2 nd PODC, </booktitle> <month> August </month> <year> 1983. </year>
Reference-contexts: 1 Introduction Randomization has been shown to be a useful tool for the solution of problems in distributed systems <ref> [1, 2, 12] </ref>. In order to support reasoning about probabilistic distributed systems, many researchers have recently focused on the study of models and methods for the analysis of such systems [3, 5, 7, 19-21].
Reference: 3. <author> I. Christoff. </author> <title> Testing equivalences for probabilistic processes. </title> <type> Technical Report DoCS 90/22, Ph.D. Thesis, </type> <institution> Department of Computer Science, Uppsala University, Sweden, </institution> <year> 1990. </year>
Reference-contexts: 1 Introduction Randomization has been shown to be a useful tool for the solution of problems in distributed systems [1, 2, 12]. In order to support reasoning about probabilistic distributed systems, many researchers have recently focused on the study of models and methods for the analysis of such systems <ref> [3, 5, 7, 19-21] </ref>. The general approach that is taken is to extend to the probabilistic setting those models and methods that have already proved successful for non-probabilistic distributed systems.
Reference: 4. <author> M. Fischer and L. Zuck. </author> <title> Reasoning about uncertainty in fault tolerant distributed systems. </title> <booktitle> In Proceedings of the Symposium on Formal Techniques in Real-Time and Fault-Tolerant Systems, </booktitle> <volume> LNCS 331, </volume> <pages> pages 142-158, </pages> <year> 1988. </year>
Reference-contexts: F 2 ; P 2 )) 2 steps (M 2 ), else ( 2 ; F 2 ; P 2 ) = D (s 2 ). ut 3.2 Schedulers and Adversaries Several papers in the literature use schedulers, sometimes viewed as adversarial entities, to resolve the nondeterminism in probabilistic systems <ref> [4, 7, 14, 21] </ref>. An adversary is an object that schedules the next step based on the past history of a probabilistic automaton. Definition 6.
Reference: 5. <author> R.J. van Glabbeek, S.A. Smolka, B. Steffen, and C.M.N. Tofts. </author> <title> Reactive, generative, and stratified models of probabilistic processes. </title> <booktitle> In Proceedings 5 th LICS, </booktitle> <pages> pages 130-141. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Randomization has been shown to be a useful tool for the solution of problems in distributed systems [1, 2, 12]. In order to support reasoning about probabilistic distributed systems, many researchers have recently focused on the study of models and methods for the analysis of such systems <ref> [3, 5, 7, 19-21] </ref>. The general approach that is taken is to extend to the probabilistic setting those models and methods that have already proved successful for non-probabilistic distributed systems. <p> A fully probabilistic automaton is a probabilistic automaton without nondetermin-ism; at each point only one step can be chosen.. The generative model of probabilistic processes of <ref> [5] </ref> is a special case of a fully probabilistic automaton; simple probabilistic automata are partially captured by the reactive model of [5] in the sense that the reactive model assumes some form of nondeterminism between different actions. <p> A fully probabilistic automaton is a probabilistic automaton without nondetermin-ism; at each point only one step can be chosen.. The generative model of probabilistic processes of <ref> [5] </ref> is a special case of a fully probabilistic automaton; simple probabilistic automata are partially captured by the reactive model of [5] in the sense that the reactive model assumes some form of nondeterminism between different actions. However, the reactive model does not allow nondeterministic choices between steps involving the same action.
Reference: 6. <author> R.J. van Glabbeek and W.P. Weijland. </author> <title> Branching time and abstraction in bisimulation se mantics (extended abstract). </title> <booktitle> In Information Processing 89, </booktitle> <pages> pages 613-618. </pages> <publisher> North-Holland, </publisher> <year> 1989. </year> <note> Full version available as Report CS-R9120, </note> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1991. </year>
Reference-contexts: WPCTL is preserved. For this reason we introduce other two relations, called branching probabilistic bisimulation and branching probabilistic simulation, which impose new restrictions similar to those of branching bisimulation <ref> [6] </ref>. Our third main result is that branching probabilistic bisimulation and branching probabilistic simulation are compositional and preserve PCTL formulas and PCTL formulas without negation and existential quantification, respectively, up to a condition about divergences. We conclude with a discussion about some related work in [11]. <p> We start by presenting the natural extension of the probabilistic relations of Section 5; then, in order to preserve WPCTL, we introduce a branching version of the new relations using the basic idea of branching bisimulation <ref> [6] </ref>. <p> In other words, each maximal path in the tree satisfies the branching condition of <ref> [6] </ref>. Definition 25.
Reference: 7. <author> H. Hansson. </author> <title> Time and Probability in Formal Design of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Uppsala University, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction Randomization has been shown to be a useful tool for the solution of problems in distributed systems [1, 2, 12]. In order to support reasoning about probabilistic distributed systems, many researchers have recently focused on the study of models and methods for the analysis of such systems <ref> [3, 5, 7, 19-21] </ref>. The general approach that is taken is to extend to the probabilistic setting those models and methods that have already proved successful for non-probabilistic distributed systems. <p> In order to extend labeled transition systems to the probabilistic setting, the main addition that is needed is some mechanism for representing probabilistic choices as well as nondeterministic choices <ref> [7, 19, 21] </ref>. <p> Here, we identify the interesting properties of a system with those that are expressible in an untimed version (PCTL) of the Timed Probabilistic concurrent Computation Tree Logic (TPCTL) of Hansson <ref> [7] </ref>; as discussed in [7], this logic is sufficiently powerful to represent most of the properties of practical interest. Thus, our second evaluation criterion is based on the types of PCTL formulas that a relation preserves. <p> Here, we identify the interesting properties of a system with those that are expressible in an untimed version (PCTL) of the Timed Probabilistic concurrent Computation Tree Logic (TPCTL) of Hansson <ref> [7] </ref>; as discussed in [7], this logic is sufficiently powerful to represent most of the properties of practical interest. Thus, our second evaluation criterion is based on the types of PCTL formulas that a relation preserves. <p> We define and evaluate our simulation relations in terms of a new general labeled transition system model for concurrent probabilistic computation, which borrows ideas from <ref> [7, 21] </ref>. The model distinguishes between probabilistic and nondeterministic choices but, unlike the Concurrent Markov Chains of [7, 21], does not distinguish between probabilistic and nondeterministic states. <p> We define and evaluate our simulation relations in terms of a new general labeled transition system model for concurrent probabilistic computation, which borrows ideas from <ref> [7, 21] </ref>. The model distinguishes between probabilistic and nondeterministic choices but, unlike the Concurrent Markov Chains of [7, 21], does not distinguish between probabilistic and nondeterministic states. <p> The separation between nondeterministic and probabilistic behavior is achieved by means of adversaries (or schedulers), that, similar to <ref> [7, 19, 21] </ref>, choose a next step to schedule based on the past history of the automaton. In our case, differently from [7, 19, 21], we allow an adversary to choose the next step randomly. Indeed, an external environment that provides some input essentially behaves like a randomized adversary. <p> The separation between nondeterministic and probabilistic behavior is achieved by means of adversaries (or schedulers), that, similar to <ref> [7, 19, 21] </ref>, choose a next step to schedule based on the past history of the automaton. In our case, differently from [7, 19, 21], we allow an adversary to choose the next step randomly. Indeed, an external environment that provides some input essentially behaves like a randomized adversary. Our first major result is that randomized adversaries do not change the distinguishing power of PCTL and WPCTL. <p> Our first major result is that randomized adversaries do not change the distinguishing power of PCTL and WPCTL. Intuitively, the main reason for this result is that PCTL and WPCTL are concerned with probability bounds rather than exact probabilities. We then redefine the strong bisimulation relation of <ref> [7, 13] </ref> in terms of our model, and also define a strong simulation relation that generalizes the simulation relation of [11], strengthening it a bit so that some liveness is preserved. <p> However, the reactive model does not allow nondeterministic choices between steps involving the same action. By restricting simple probabilistic automata to have finitely many states, we obtain objects with a structure similar to that of the Concurrent Labeled Markov Chains of <ref> [7] </ref>; however, in our model we do not need to distinguish between nondeterministic and probabilistic states. In our model nonde-terminism is obtained by means of the structure of the transition relation. This allows us to retain most of the traditional notation that is used for automata. Definition 3. <p> We now turn to the parallel composition operator for simple probabilistic automata, which is defined in the CSP style [9]. As outlined in <ref> [7] </ref>, the definition of a parallel composition operator for general probabilistic automata is problematic. We will address the issue of a general parallel composition operator in further work. Definition 5. <p> F 2 ; P 2 )) 2 steps (M 2 ), else ( 2 ; F 2 ; P 2 ) = D (s 2 ). ut 3.2 Schedulers and Adversaries Several papers in the literature use schedulers, sometimes viewed as adversarial entities, to resolve the nondeterminism in probabilistic systems <ref> [4, 7, 14, 21] </ref>. An adversary is an object that schedules the next step based on the past history of a probabilistic automaton. Definition 6. <p> It is a simplification of the Timed Probabilistic concurrent Computation Tree Logic (TPCTL) of <ref> [7] </ref>, where we do not consider time issues. Then, we show that randomized adversaries do not change the distinguishing power of the logic. Consider a set of actions ranged over by a. <p> This guarantees that the semantics of PCTL is well defined. In the definition above we did not mention explicitly what kind of adversaries to consider for the validity of a formula. In <ref> [7] </ref> the adversaries are assumed to be deterministic. However, the semantics does not change by adding randomization to the adversaries. <p> For each probabilistic automaton M and each WPCTL formula f, M j= f relative to Deterministic (M ) iff M j= f relative to Probabilistic (M ). ut 5 Strong Relations In this section we analyze relations that are sensitive to internal computation. We formalize the bisimulations of <ref> [7] </ref> (strong bisimulation) and the simulations of [11, 13] (strong simulation) in our model, and we show that the kernel of strong simulation, which is coarser than strong bisimulation, preserves PCTL formulas that do not contain EU wp . <p> We write M 1 ' M 2 whenever acts (M 1 ) = acts (M 2 ) and there is a strong bisimulation between M 1 and M 2 . ut Condition 2 of Definition 14 is stated in <ref> [7, 13] </ref> in a different but equivalent way, i.e., for each equivalence class [x] of R, the probabilities of reaching [x] from s 1 and s 2 are the same. The next definition is used to introduce strong simulations. It appears in a similar form in [11].
Reference: 8. <author> M. Hennessy. </author> <title> Algebraic Theory of Processes. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: In the non-probabilistic setting, there are two principal methods that are used for analyzing labeled transition systems: temporal logic (e.g. [18]), which is used to establish that a system satisfies certain properties, and equivalence or preorder relations (e.g., <ref> [8, 16, 17] </ref>), which are used to establish that one system "implements" another, according to some notion of implementation.
Reference: 9. <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: We now turn to the parallel composition operator for simple probabilistic automata, which is defined in the CSP style <ref> [9] </ref>. As outlined in [7], the definition of a parallel composition operator for general probabilistic automata is problematic. We will address the issue of a general parallel composition operator in further work. Definition 5.
Reference: 10. <author> B. Jonsson. </author> <title> Simulations between specifications of distributed systems. </title> <booktitle> In Proceedings CONCUR 91, </booktitle> <volume> LNCS 527, </volume> <pages> pages 346-360, </pages> <year> 1991. </year>
Reference-contexts: Bisimulation relations are two-directional relations that have proved fundamental in the process algebraic setting. Unidirectional simulations, such as refinement mappings and forward simulations, have turned out to be quite successful in formal verification of non-probabilistic distributed systems <ref> [10, 15, 16] </ref>. Thus, it is highly desirable to extend the use of simulations to the probabilistic setting. ? Supported by NSF grant CCR-89-15206, and CCR-92-25124, by DARPA contracts N00014 89-J-1988 and N00014-92-J-4033, and by ONR contract N00014-91-J-1046.
Reference: 11. <author> B. Jonsson and K. G. Larsen. </author> <title> Specification and refinement of probabilistic processes. </title> <booktitle> In Proceedings of the 6th LICS, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Intuitively, the main reason for this result is that PCTL and WPCTL are concerned with probability bounds rather than exact probabilities. We then redefine the strong bisimulation relation of [7, 13] in terms of our model, and also define a strong simulation relation that generalizes the simulation relation of <ref> [11] </ref>, strengthening it a bit so that some liveness is preserved. We show that strong simulation preserves PCTL formulas without negation and existential quantification, and we show that the kernel of strong simulation preserves PCTL formulas without existential quantification. <p> Our third main result is that branching probabilistic bisimulation and branching probabilistic simulation are compositional and preserve PCTL formulas and PCTL formulas without negation and existential quantification, respectively, up to a condition about divergences. We conclude with a discussion about some related work in <ref> [11] </ref>. In particular we show how the idea of refinement of [11] applies to our framework. We define a refinement preorder in the style of [11] for each simulation relation of this paper, and, surprisingly, we show that none of the new refinements is compositional. <p> We conclude with a discussion about some related work in <ref> [11] </ref>. In particular we show how the idea of refinement of [11] applies to our framework. We define a refinement preorder in the style of [11] for each simulation relation of this paper, and, surprisingly, we show that none of the new refinements is compositional. However, the counterexample that we present gives some insight for possible solutions to the problem. <p> We conclude with a discussion about some related work in <ref> [11] </ref>. In particular we show how the idea of refinement of [11] applies to our framework. We define a refinement preorder in the style of [11] for each simulation relation of this paper, and, surprisingly, we show that none of the new refinements is compositional. However, the counterexample that we present gives some insight for possible solutions to the problem. The rest of the paper is organized as follows. <p> our model, and shows that the distinguishing power of PCTL does not change by using randomized adversaries; Sections 5 and 6 study the strong and weak relations, respectively, on our probabilistic model, and show how they preserve PCTL formulas; Section 7 contains some concluding remarks concerning the refinement-based preorders of <ref> [11] </ref> and further work. 2 Automata An automaton A consists of four components: a set states (A) of states, a nonempty set start (A) states (A) of start states, an action signature sig (A) = (ext (A); int (A)) where ext (A) and int (A) are disjoint sets of external and <p> We formalize the bisimulations of [7] (strong bisimulation) and the simulations of <ref> [11, 13] </ref> (strong simulation) in our model, and we show that the kernel of strong simulation, which is coarser than strong bisimulation, preserves PCTL formulas that do not contain EU wp . <p> The next definition is used to introduce strong simulations. It appears in a similar form in <ref> [11] </ref>. <p> If M 1 SPS M 2 and f does not contain any occurrence of EU wp , then M 1 j= f iff M 2 j= f. ut Remark. Our strong probabilistic simulations provides us with a simple way to represent the closed interval specification systems of <ref> [11] </ref>. A probabilistic specification system of [11] is a state machine where each state is associated with a set of probability distributions over the next state. <p> Our strong probabilistic simulations provides us with a simple way to represent the closed interval specification systems of <ref> [11] </ref>. A probabilistic specification system of [11] is a state machine where each state is associated with a set of probability distributions over the next state. The set of probability distributions for a state s is specified by associating each other state s 0 with a set of probabilities that can be used from s. <p> Based on that, we have introduced a new set of relations whose main idea is that an automaton may combine probabilistically some of its steps in order to simulate another automaton. 7.2 Refinement-Based Preorders In <ref> [11] </ref> there is a notion of refinement between probabilistic specification systems stating (up to a notion of image-finiteness that is not important here) that S 1 refines S 2 if each probabilistic process system that satisfies S 1 , also satisfies S 2 . The notion of refinement of [11] suggests <p> In <ref> [11] </ref> there is a notion of refinement between probabilistic specification systems stating (up to a notion of image-finiteness that is not important here) that S 1 refines S 2 if each probabilistic process system that satisfies S 1 , also satisfies S 2 . The notion of refinement of [11] suggests a new set of preorders based on the relations of Sections 5 and 6.
Reference: 12. <author> E. Kushilevitz and M. Rabin. </author> <title> Randomized mutual exclusion algorithms revisited. </title> <booktitle> In Pro ceedings of the 11 th PODC, </booktitle> <pages> pages 275-284, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Randomization has been shown to be a useful tool for the solution of problems in distributed systems <ref> [1, 2, 12] </ref>. In order to support reasoning about probabilistic distributed systems, many researchers have recently focused on the study of models and methods for the analysis of such systems [3, 5, 7, 19-21].
Reference: 13. <author> K. G. Larsen and A. Skou. </author> <title> Bisimulation through probabilistic testing. </title> <journal> Information and Computation, </journal> <volume> 94(1) </volume> <pages> 1-28, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Our first major result is that randomized adversaries do not change the distinguishing power of PCTL and WPCTL. Intuitively, the main reason for this result is that PCTL and WPCTL are concerned with probability bounds rather than exact probabilities. We then redefine the strong bisimulation relation of <ref> [7, 13] </ref> in terms of our model, and also define a strong simulation relation that generalizes the simulation relation of [11], strengthening it a bit so that some liveness is preserved. <p> We formalize the bisimulations of [7] (strong bisimulation) and the simulations of <ref> [11, 13] </ref> (strong simulation) in our model, and we show that the kernel of strong simulation, which is coarser than strong bisimulation, preserves PCTL formulas that do not contain EU wp . <p> We write M 1 ' M 2 whenever acts (M 1 ) = acts (M 2 ) and there is a strong bisimulation between M 1 and M 2 . ut Condition 2 of Definition 14 is stated in <ref> [7, 13] </ref> in a different but equivalent way, i.e., for each equivalence class [x] of R, the probabilities of reaching [x] from s 1 and s 2 are the same. The next definition is used to introduce strong simulations. It appears in a similar form in [11].
Reference: 14. <author> D. Lehmann and M. Rabin. </author> <title> On the advantage of free choice: a symmetric and fully dis tributed solution to the dining philosophers problem. </title> <booktitle> In Proceedings of the 8 th POPL pages 133-138, </booktitle> <month> January </month> <year> 1981. </year>
Reference-contexts: F 2 ; P 2 )) 2 steps (M 2 ), else ( 2 ; F 2 ; P 2 ) = D (s 2 ). ut 3.2 Schedulers and Adversaries Several papers in the literature use schedulers, sometimes viewed as adversarial entities, to resolve the nondeterminism in probabilistic systems <ref> [4, 7, 14, 21] </ref>. An adversary is an object that schedules the next step based on the past history of a probabilistic automaton. Definition 6.
Reference: 15. <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the 6 th PODC, </booktitle> <pages> pages 137-151, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: Bisimulation relations are two-directional relations that have proved fundamental in the process algebraic setting. Unidirectional simulations, such as refinement mappings and forward simulations, have turned out to be quite successful in formal verification of non-probabilistic distributed systems <ref> [10, 15, 16] </ref>. Thus, it is highly desirable to extend the use of simulations to the probabilistic setting. ? Supported by NSF grant CCR-89-15206, and CCR-92-25124, by DARPA contracts N00014 89-J-1988 and N00014-92-J-4033, and by ONR contract N00014-91-J-1046.
Reference: 16. <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. </title> <booktitle> In Proceedings of the REX Workshop "Real-Time: Theory in Practice", </booktitle> <volume> LNCS 600, </volume> <pages> pages 397-446, </pages> <year> 1991. </year>
Reference-contexts: In the non-probabilistic setting, labeled transition systems have become well accepted as a basis for formal specification and verification of concurrent and distributed systems. (See, e.g., <ref> [16, 17] </ref>.) A transition system is an abstract machine that represents either an implementation (i.e., a physical device or software system), or a specification (i.e., a description of the required properties of an implementation). <p> In the non-probabilistic setting, there are two principal methods that are used for analyzing labeled transition systems: temporal logic (e.g. [18]), which is used to establish that a system satisfies certain properties, and equivalence or preorder relations (e.g., <ref> [8, 16, 17] </ref>), which are used to establish that one system "implements" another, according to some notion of implementation. <p> Bisimulation relations are two-directional relations that have proved fundamental in the process algebraic setting. Unidirectional simulations, such as refinement mappings and forward simulations, have turned out to be quite successful in formal verification of non-probabilistic distributed systems <ref> [10, 15, 16] </ref>. Thus, it is highly desirable to extend the use of simulations to the probabilistic setting. ? Supported by NSF grant CCR-89-15206, and CCR-92-25124, by DARPA contracts N00014 89-J-1988 and N00014-92-J-4033, and by ONR contract N00014-91-J-1046.
Reference: 17. <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1989. </year>
Reference-contexts: In the non-probabilistic setting, labeled transition systems have become well accepted as a basis for formal specification and verification of concurrent and distributed systems. (See, e.g., <ref> [16, 17] </ref>.) A transition system is an abstract machine that represents either an implementation (i.e., a physical device or software system), or a specification (i.e., a description of the required properties of an implementation). <p> In the non-probabilistic setting, there are two principal methods that are used for analyzing labeled transition systems: temporal logic (e.g. [18]), which is used to establish that a system satisfies certain properties, and equivalence or preorder relations (e.g., <ref> [8, 16, 17] </ref>), which are used to establish that one system "implements" another, according to some notion of implementation.
Reference: 18. <author> A. Pnueli. </author> <title> The temporal semantics of concurrent programs. </title> <journal> TCS, </journal> <volume> 13 </volume> <pages> 45-60, </pages> <year> 1982. </year>
Reference-contexts: In the non-probabilistic setting, there are two principal methods that are used for analyzing labeled transition systems: temporal logic (e.g. <ref> [18] </ref>), which is used to establish that a system satisfies certain properties, and equivalence or preorder relations (e.g., [8, 16, 17]), which are used to establish that one system "implements" another, according to some notion of implementation.
Reference: 19. <author> A. Pnueli and L. Zuck. </author> <title> Verification of multiprocess probabilistic protocols. </title> <journal> Distributed Computing, </journal> <volume> 1(1) </volume> <pages> 53-72, </pages> <year> 1986. </year>
Reference-contexts: In order to extend labeled transition systems to the probabilistic setting, the main addition that is needed is some mechanism for representing probabilistic choices as well as nondeterministic choices <ref> [7, 19, 21] </ref>. <p> The separation between nondeterministic and probabilistic behavior is achieved by means of adversaries (or schedulers), that, similar to <ref> [7, 19, 21] </ref>, choose a next step to schedule based on the past history of the automaton. In our case, differently from [7, 19, 21], we allow an adversary to choose the next step randomly. Indeed, an external environment that provides some input essentially behaves like a randomized adversary. <p> The separation between nondeterministic and probabilistic behavior is achieved by means of adversaries (or schedulers), that, similar to <ref> [7, 19, 21] </ref>, choose a next step to schedule based on the past history of the automaton. In our case, differently from [7, 19, 21], we allow an adversary to choose the next step randomly. Indeed, an external environment that provides some input essentially behaves like a randomized adversary. Our first major result is that randomized adversaries do not change the distinguishing power of PCTL and WPCTL.
Reference: 20. <author> K. Seidel. </author> <title> Probabilistic communicating processes. </title> <type> Technical Report PRG-102, Ph.D. </type> <institution> The sis, Programming Research Group, Oxford University Computing Laboratory, </institution> <year> 1992. </year>
Reference: 21. <author> M. Y. Vardi. </author> <title> Automatic verification of probabilistic concurrent finite-state programs. </title> <booktitle> In Proceedings of 26th FOCS, </booktitle> <pages> pages 327-338, </pages> <address> Portland, OR, </address> <year> 1985. </year>
Reference-contexts: In order to extend labeled transition systems to the probabilistic setting, the main addition that is needed is some mechanism for representing probabilistic choices as well as nondeterministic choices <ref> [7, 19, 21] </ref>. <p> We define and evaluate our simulation relations in terms of a new general labeled transition system model for concurrent probabilistic computation, which borrows ideas from <ref> [7, 21] </ref>. The model distinguishes between probabilistic and nondeterministic choices but, unlike the Concurrent Markov Chains of [7, 21], does not distinguish between probabilistic and nondeterministic states. <p> We define and evaluate our simulation relations in terms of a new general labeled transition system model for concurrent probabilistic computation, which borrows ideas from <ref> [7, 21] </ref>. The model distinguishes between probabilistic and nondeterministic choices but, unlike the Concurrent Markov Chains of [7, 21], does not distinguish between probabilistic and nondeterministic states. <p> The separation between nondeterministic and probabilistic behavior is achieved by means of adversaries (or schedulers), that, similar to <ref> [7, 19, 21] </ref>, choose a next step to schedule based on the past history of the automaton. In our case, differently from [7, 19, 21], we allow an adversary to choose the next step randomly. Indeed, an external environment that provides some input essentially behaves like a randomized adversary. <p> The separation between nondeterministic and probabilistic behavior is achieved by means of adversaries (or schedulers), that, similar to <ref> [7, 19, 21] </ref>, choose a next step to schedule based on the past history of the automaton. In our case, differently from [7, 19, 21], we allow an adversary to choose the next step randomly. Indeed, an external environment that provides some input essentially behaves like a randomized adversary. Our first major result is that randomized adversaries do not change the distinguishing power of PCTL and WPCTL. <p> F 2 ; P 2 )) 2 steps (M 2 ), else ( 2 ; F 2 ; P 2 ) = D (s 2 ). ut 3.2 Schedulers and Adversaries Several papers in the literature use schedulers, sometimes viewed as adversarial entities, to resolve the nondeterminism in probabilistic systems <ref> [4, 7, 14, 21] </ref>. An adversary is an object that schedules the next step based on the past history of a probabilistic automaton. Definition 6. <p> The result of the interaction between M and A is a fully probabilistic automaton, called an execution automaton, where at each point the only step enabled is the step due to the choice of A. A similar construction appears in <ref> [21] </ref>. Unfortunately, the definition of an execution automaton is not simple since each state contains the past history of M . Definition 8.
References-found: 21

