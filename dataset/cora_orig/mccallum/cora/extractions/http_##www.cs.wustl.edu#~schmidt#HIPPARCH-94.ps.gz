URL: http://www.cs.wustl.edu/~schmidt/HIPPARCH-94.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/dove.html
Root-URL: 
Email: schmidt@cs.wustl.edu  
Title: Scalable High-Performance Event Filtering for Dynamic Multi-point Applications  
Author: Douglas C. Schmidt 
Address: St. Louis, MO 63130, (314) 935-7538  
Affiliation: Department of Computer Science Washington University  
Abstract: This paper appeared in the 1 st International Workshop on High Performance Protocol Architectures, held in Sophia Antipolis, France, December 15-16, 1994. Abstract High-performance event filtering reduces the large volume of event traffic processed by dynamic multi-point applications in high-speed networks. We are developing an object-oriented (OO) framework for event filtering based on CORBA, which is an emerging standard for open distributed object computing. The OO framework supports the automated generation, optimization, and configuration of event filters in distributed systems. This paper outlines the key characteristics of dynamic multi-point applications, reviews related work, and describes the features provided by our event filtering framework. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Turner, </author> <title> An optimal nonblocking multicast virtual circut switch, </title> <booktitle> in Proceedings of the Conference on Computer Communications (INFOCOM), </booktitle> <pages> pp. 298-305, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In contrast, conventional multi-point applications (such as teleconferencing) generally exhibit much less dynamism. For instance, once a consumer has joined a multi-point group in an ATM switch, all data sent by a supplier is received by all other consumers who are members of the group <ref> [1] </ref>. Since consumers in DMP applications do not subscribe to every event, aggregate system performance may be enhanced significantly via event filtering. Event filtering is a data reduction mechanism that eliminates unnecessary network traffic and unnecessary processing at consumer endsys-tems. <p> The goal is to minimize the number of network packets used to deliver event messages to consumers. These optimizations take advantage of lower-level networking mechanisms (such as reliable transport multicast and ATM switch multicast) to minimize network traffic. For instance, ATM switch multicast uses port recycling and range-copying optimizations <ref> [1] </ref> to reduce the amount of copying necessary to multicast messages through an ATM switch.
Reference: [2] <institution> Isis Distributed Systems, Inc., </institution> <month> Marlboro, </month> <title> MA, Isis Users's Guide: Reliable Distributed Objects for C++, </title> <month> April </month> <year> 1994. </year>
Reference-contexts: outlines and evaluates related research on event filtering; Section 3 describes the optimization techniques we are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems <ref> [2, 3] </ref>, network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols [9, 10, 11, 12], and active databases [13, 14, 15]. <p> This section outlines relevant related work on event filtering and evaluates this work in terms of its support for the characteristics of DMP applications outlined in Section 1. 2.1.1 Distributed Systems * Isis News: Isis [3] supports event filtering in its Reliable Distributed Objects (RDO) News service <ref> [2] </ref>. In Isis RDO News, filtering is performed at the destinations since all consumers in a process group receive all events sent by suppliers. Consumer filtering is limited to matching on character strings keywords. <p> Other state-based filtering criteria is based on frequency and time (such as detecting a particular error condition occurring x times over a certain period). 2.2.3 Scalability Conventional packet filter tools <ref> [2, 9, 10, 11, 12] </ref> do not provide direct support for filtering other than at the destinations. This architecture is not scalable across large-scale DMP applications, where a large number of suppliers and consumers may exist.
Reference: [3] <author> K. Birman and R. van Renesse, </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> Los Alamitos: IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: outlines and evaluates related research on event filtering; Section 3 describes the optimization techniques we are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems <ref> [2, 3] </ref>, network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols [9, 10, 11, 12], and active databases [13, 14, 15]. <p> This section outlines relevant related work on event filtering and evaluates this work in terms of its support for the characteristics of DMP applications outlined in Section 1. 2.1.1 Distributed Systems * Isis News: Isis <ref> [3] </ref> supports event filtering in its Reliable Distributed Objects (RDO) News service [2]. In Isis RDO News, filtering is performed at the destinations since all consumers in a process group receive all events sent by suppliers. Consumer filtering is limited to matching on character strings keywords.
Reference: [4] <author> K. S. Klemba, </author> <booktitle> Openview's Architectural Models, in Proceedings of the 1 st International Symposium on Integrated Network Management (B. </booktitle> <editor> Meandzija and J. Westcott, </editor> <booktitle> eds.), </booktitle> <pages> pp. 565-572, </pages> <publisher> IFIP, </publisher> <year> 1989. </year>
Reference-contexts: filtering; Section 3 describes the optimization techniques we are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring <ref> [4, 5, 6, 7, 8] </ref>, user-level communication protocols [9, 10, 11, 12], and active databases [13, 14, 15]. <p> Consumer filtering is limited to matching on character strings keywords. Depending on the available network bandwidth and endsystem processing capacity, the RDO News filtering architecture may not scale to accommodate a large numbers of consumers that possess complex filtering requirements. 2.1.2 Network Management * HP OpenView: HP OpenView <ref> [4] </ref> provides an implementation of the ISO OSI event report management services [7]. HP OpenView filtering allows Event Forwarding Discriminators (EFDs) to be installed on remote agents in a network. An EFD contains an expression that filters events based on their type, value, generation time, and/or frequency.
Reference: [5] <author> R. T. Braden, </author> <title> A Pseudo-machine for Packet Monitoring and Statistics, </title> <booktitle> in Proceedings of the Symposium on Communications Architectures and Protocols (SIGCOMM), </booktitle> <address> (Stanford, CA), </address> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: filtering; Section 3 describes the optimization techniques we are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring <ref> [4, 5, 6, 7, 8] </ref>, user-level communication protocols [9, 10, 11, 12], and active databases [13, 14, 15]. <p> Packet filters were developed originally to 2 support efficient demultiplexing for user-level implementa-tions of network protocols [9]. In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks <ref> [6, 5, 8] </ref>. The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) [10] are two influential first-generation packet filter tools.
Reference: [6] <author> Sun Microsystems, Inc., </author> <title> Mountain View, CA, NIT(4P); SunOS 4.1.1 Reference Manual, Part number: </title> <editor> 800-5480-10 ed., </editor> <month> Oc-tober </month> <year> 1990. </year>
Reference-contexts: filtering; Section 3 describes the optimization techniques we are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring <ref> [4, 5, 6, 7, 8] </ref>, user-level communication protocols [9, 10, 11, 12], and active databases [13, 14, 15]. <p> Packet filters were developed originally to 2 support efficient demultiplexing for user-level implementa-tions of network protocols [9]. In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks <ref> [6, 5, 8] </ref>. The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) [10] are two influential first-generation packet filter tools.
Reference: [7] <author> I. O. </author> <title> for Standardization, Information Processing Systems - Open Systems Interconnection Part 5: Event Report Management Function, </title> <type> Tech. Rep. ISO/IEC DIS 10164-5, ISO. </type>
Reference-contexts: filtering; Section 3 describes the optimization techniques we are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring <ref> [4, 5, 6, 7, 8] </ref>, user-level communication protocols [9, 10, 11, 12], and active databases [13, 14, 15]. <p> Depending on the available network bandwidth and endsystem processing capacity, the RDO News filtering architecture may not scale to accommodate a large numbers of consumers that possess complex filtering requirements. 2.1.2 Network Management * HP OpenView: HP OpenView [4] provides an implementation of the ISO OSI event report management services <ref> [7] </ref>. HP OpenView filtering allows Event Forwarding Discriminators (EFDs) to be installed on remote agents in a network. An EFD contains an expression that filters events based on their type, value, generation time, and/or frequency.
Reference: [8] <author> J. C. Mogul, </author> <title> Efficient Use of Workstations for Passive Monitoring of Local Area Networks, </title> <booktitle> in Proceedings of the Symposium on Communications Architectures and Protocols (SIG-COMM), </booktitle> <address> (Philadelphia, PA), </address> <publisher> ACM, </publisher> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: filtering; Section 3 describes the optimization techniques we are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring <ref> [4, 5, 6, 7, 8] </ref>, user-level communication protocols [9, 10, 11, 12], and active databases [13, 14, 15]. <p> Packet filters were developed originally to 2 support efficient demultiplexing for user-level implementa-tions of network protocols [9]. In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks <ref> [6, 5, 8] </ref>. The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) [10] are two influential first-generation packet filter tools.
Reference: [9] <author> J. C. Mogul, R. F. Rashid, and M. J. Accetta, </author> <title> The Packet Filter: an Efficient Mechanism for User-level Network Code, </title> <booktitle> in Proceedings of the 11 th Symposium on Operating System Principles (SOSP), </booktitle> <month> November </month> <year> 1987. </year>
Reference-contexts: are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols <ref> [9, 10, 11, 12] </ref>, and active databases [13, 14, 15]. <p> Packet filters were developed originally to 2 support efficient demultiplexing for user-level implementa-tions of network protocols <ref> [9] </ref>. In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks [6, 5, 8]. The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) [10] are two influential first-generation packet filter tools. <p> Packet filters were developed originally to 2 support efficient demultiplexing for user-level implementa-tions of network protocols <ref> [9] </ref>. In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks [6, 5, 8]. The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) [10] are two influential first-generation packet filter tools. <p> Other state-based filtering criteria is based on frequency and time (such as detecting a particular error condition occurring x times over a certain period). 2.2.3 Scalability Conventional packet filter tools <ref> [2, 9, 10, 11, 12] </ref> do not provide direct support for filtering other than at the destinations. This architecture is not scalable across large-scale DMP applications, where a large number of suppliers and consumers may exist.
Reference: [10] <author> S. McCanne and V. Jacobson, </author> <title> The BSD Packet Filter: A New Architecture for User-level Packet Capture, </title> <booktitle> in Proceedings of the Winter USENIX Conference, </booktitle> <address> (San Diego, CA), </address> <pages> pp. 259-270, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols <ref> [9, 10, 11, 12] </ref>, and active databases [13, 14, 15]. <p> Packet filters were developed originally to 2 support efficient demultiplexing for user-level implementa-tions of network protocols [9]. In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks [6, 5, 8]. The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) <ref> [10] </ref> are two influential first-generation packet filter tools. <p> Other state-based filtering criteria is based on frequency and time (such as detecting a particular error condition occurring x times over a certain period). 2.2.3 Scalability Conventional packet filter tools <ref> [2, 9, 10, 11, 12] </ref> do not provide direct support for filtering other than at the destinations. This architecture is not scalable across large-scale DMP applications, where a large number of suppliers and consumers may exist.
Reference: [11] <author> M. Yuhara, B. Bershad, C. Maeda, and E. Moss, </author> <title> Efficient Packet Demultiplexing for Multiple Endpoints and Large Messages, </title> <booktitle> in Proceedings of the Winter Usenix Conference, </booktitle> <month> Jan-uary </month> <year> 1994. </year>
Reference-contexts: are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols <ref> [9, 10, 11, 12] </ref>, and active databases [13, 14, 15]. <p> In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks [6, 5, 8]. The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) [10] are two influential first-generation packet filter tools. Second-generation tools (such as the Mach Packet Filter (MPF) <ref> [11] </ref> and the PathFinder packet classifier [12]) enhance the scalability of first-generation tools by enabling the composition of multiple filters. * CSPF and BPF: CSPF is a stack-based packet filter that operates on binary instructions (e.g., pop and push). <p> In general, support for state-based comparisons in traditional packet filters has been ad hoc, focusing primarily on filtering IP packet fragments <ref> [11, 12] </ref>. In contrast, DMP applications often require state-based filtering. For example, most satellite telemetry filtering is based upon changes of state (such as a telemetry measurand exceeding an aperture constraint by a specified threshold). <p> Other state-based filtering criteria is based on frequency and time (such as detecting a particular error condition occurring x times over a certain period). 2.2.3 Scalability Conventional packet filter tools <ref> [2, 9, 10, 11, 12] </ref> do not provide direct support for filtering other than at the destinations. This architecture is not scalable across large-scale DMP applications, where a large number of suppliers and consumers may exist.
Reference: [12] <author> M. L. Bailey, B. Gopal, P. Sarkar, M. A. Pagels, and L. L. Peterson, Pathfinder: </author> <title> A pattern-based packet classifier, </title> <booktitle> in Proceedings of the 1 st Symposium on Operating System Design and Implementation, USENIX Association, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: are developing to support scalable, high-performance event filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols <ref> [9, 10, 11, 12] </ref>, and active databases [13, 14, 15]. <p> suffers from a highly inefficient process architecture that requires 4 context switches and 3 interprocess communication exchanges to receive, filter, and deliver each event end-to-end. 2.1.3 Packet Filters and Packet Classifiers The majority of related experimental research has focused upon various types of packet filters (also known as packet classifiers <ref> [12] </ref>). Packet filters were developed originally to 2 support efficient demultiplexing for user-level implementa-tions of network protocols [9]. In addition, they have been used to monitor traffic unobtrusively on promiscuous-mode networks [6, 5, 8]. <p> The CMU/Stanford Packet Filter (CSPF) [9] and the Berkeley Packet Filter (BPF) [10] are two influential first-generation packet filter tools. Second-generation tools (such as the Mach Packet Filter (MPF) [11] and the PathFinder packet classifier <ref> [12] </ref>) enhance the scalability of first-generation tools by enabling the composition of multiple filters. * CSPF and BPF: CSPF is a stack-based packet filter that operates on binary instructions (e.g., pop and push). CSPF uses boolean expressions, along with a tree model, to configure its filtering engine. <p> The MPF composition technique assumes the existence of a common prefix across protocol headers. This assumption enables low latency setup and removal of composite packet filters. However, this particular optimization strategy does not generalize to compose more complex filters. * PathFinder: The PathFinder tool described in <ref> [12] </ref> presents a more general technique for coalescing filters with common prefixes. PathFinder is a packet classifier that combines software and hardware techniques to optimize the composition of complex filtering patterns. <p> In general, support for state-based comparisons in traditional packet filters has been ad hoc, focusing primarily on filtering IP packet fragments <ref> [11, 12] </ref>. In contrast, DMP applications often require state-based filtering. For example, most satellite telemetry filtering is based upon changes of state (such as a telemetry measurand exceeding an aperture constraint by a specified threshold). <p> Other state-based filtering criteria is based on frequency and time (such as detecting a particular error condition occurring x times over a certain period). 2.2.3 Scalability Conventional packet filter tools <ref> [2, 9, 10, 11, 12] </ref> do not provide direct support for filtering other than at the destinations. This architecture is not scalable across large-scale DMP applications, where a large number of suppliers and consumers may exist. <p> For instance, the automated network fault management correlation systems install new filters in response to alarms triggered by managed objects in a high-speed network [15]. In general, conventional packet filtering tools do not provide comprehensive support for this degree of dynamism. PathFinder <ref> [12] </ref> does support the configuration of a secondary filter when a related primary filter matches (this is used to handle IP fragments). <p> Three promising techniques discussed below include parallel processing of composite filters, trie-based filter composition, and context-free grammar-based filter composition using skip-ahead parsing. Existing work has investigated several of these optimization techniques in the context of communication protocols [21] and packet filtering <ref> [12, 22] </ref>. However, there appears to be no comprehensive comparative study investigating all three techniques in the context of DMP applications. * Parallel processing of composite filters: We are using shared memory multiprocessors (e.g., a 20-CPU SPAR-Ccenter 2000) to improve event filtering performance. <p> A fairly high cost is generally incurred when accessing shared memory on standard I/O buses [23]. * Trie-based Filter Composition: We are also exploring optimization techniques that compose multiple filter expressions together using dynamic trie-based data structures. This trie-based approach is a generalization of the DAG-based techniques presented in <ref> [12] </ref>. Every node in the trie implements a particular type of branching mechanism. The branching mechanism selected at a node employs a lookup function (such as a hashing function, a binary search, or a series of inlined relational expression comparisons).
Reference: [13] <author> N. Gehani, H. V. Jagadish, and O. Shmueli, Compose: </author> <title> A System for Composite Event Specification and Detection, in Book chapter in Advanced Database Concepts and Research Issues (N. </title> <editor> R. Adam and B. Bhargava, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols [9, 10, 11, 12], and active databases <ref> [13, 14, 15] </ref>.
Reference: [14] <author> S. Gatziu and K. R. Dittrich, </author> <title> Detecting Composite Events in Active Database Systems Using Petri Nets, </title> <booktitle> in Proceedings of the 4 th International Workshop on Research Issues in Data Engineering: Active Database Systems, IEEE, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols [9, 10, 11, 12], and active databases <ref> [13, 14, 15] </ref>.
Reference: [15] <author> O. Wolfson, S. Sengupta, and Y. Yemini, </author> <title> Managing Communication Networks by Monitoring Databases, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, </volume> <pages> pp. 944-952, </pages> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: filtering for DMP applications; and Section 4 presents concluding remarks. 2 Research Background 2.1 Related Work Work on event filtering spans a number of domains, including distributed systems [2, 3], network management and network monitoring [4, 5, 6, 7, 8], user-level communication protocols [9, 10, 11, 12], and active databases <ref> [13, 14, 15] </ref>. <p> For instance, the automated network fault management correlation systems install new filters in response to alarms triggered by managed objects in a high-speed network <ref> [15] </ref>. In general, conventional packet filtering tools do not provide comprehensive support for this degree of dynamism. PathFinder [12] does support the configuration of a secondary filter when a related primary filter matches (this is used to handle IP fragments).
Reference: [16] <author> C. Maeda and B. Bershad, </author> <title> Protocol Service Decomposition for High-Performance Networking, </title> <booktitle> in Proceedings of the 14 th Symposium on Operating System Principles, </booktitle> <address> (Asheville, </address> <publisher> North Carolina), ACM, </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: When there are hundreds of filters and/or hundreds of consumers, however, this approach does not scale up since the time required to filter packets grows linearly with the number of filters. * MPF: The Mach Packet Filter (MPF) is designed to support user-level implementations <ref> [16] </ref> of layered protocol stacks (such as TCP/IP). In this context, composing multiple packet filters helps to reduce demultiplexing overhead. Often, packets destined for separate connections on an endsys-tem contain a common prefix, followed by variation at a single point in the packet.
Reference: [17] <author> S. F. Wu and G. E. Kaiser, </author> <title> On Hard Real-Time Management Information, </title> <booktitle> in Proceedings of the 1 st International Workshop on System Managment, </booktitle> <address> (Los Angeles, CA), </address> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: For instance, consumers may require certain events (such as critical faults and recovery procedures), to be reported within specific time constraints. This time limit may be negotiated during subscription time <ref> [17] </ref>. In conventional packet filters, incoming packets are buffered in FIFO order at the end of device driver input queues, regardless of packet priority.
Reference: [18] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 1.2 ed., </editor> <year> 1993. </year>
Reference-contexts: The framework is based on OMG CORBA <ref> [18] </ref> and OMG common object services [19], which are emerging standards for open distributed object computing. This section outlines work in progress on the framework, which currently consists of research prototypes. <p> In our system, event schemas are described using a superset of the OMG CORBA interface definition language (IDL) <ref> [18] </ref>. CORBA IDL provides a simplified form of the C++ type system, but is not a full-fledged programming language. CORBA IDL is similar in functionality to standard data definition languages such as ASN.1 and XDR. <p> Existing frameworks for event filtering (such as Isis, HP OpenView, DCE, CORBA, and packet filters) do not adequately address the usability, extensibility, performance, and scalability requirements of DMP applications. To improve usability and extensibility we are developing an object-oriented framework for event filtering based on CORBA <ref> [18, 19] </ref>. The framework supports the automated generation and optimization of filter expressions based on the CORBA interface definition language (IDL). By selecting CORBA, we plan to leverage off emerging distributed object 7 development environments [27] and open system protocol specification techniques [28].
Reference: [19] <author> Object Management Group, </author> <title> Common Object Services Specification, Volume 1, </title> <editor> 94-1-1 ed., </editor> <year> 1994. </year>
Reference-contexts: The framework is based on OMG CORBA [18] and OMG common object services <ref> [19] </ref>, which are emerging standards for open distributed object computing. This section outlines work in progress on the framework, which currently consists of research prototypes. <p> Existing frameworks for event filtering (such as Isis, HP OpenView, DCE, CORBA, and packet filters) do not adequately address the usability, extensibility, performance, and scalability requirements of DMP applications. To improve usability and extensibility we are developing an object-oriented framework for event filtering based on CORBA <ref> [18, 19] </ref>. The framework supports the automated generation and optimization of filter expressions based on the CORBA interface definition language (IDL). By selecting CORBA, we plan to leverage off emerging distributed object 7 development environments [27] and open system protocol specification techniques [28].
Reference: [20] <author> D. C. Schmidt, </author> <title> Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien and D. C. Schmidt, eds.), </editor> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: We are extending CORBA IDL to support packed bit-fields to support existing packet formats (such as TCP and IP headers). The following interface illustrates the CORBA IDL syntax used to define the schema for events in a distributed logging service <ref> [20] </ref>: // IDL schema definition interface Logger - // Types of logging messages. enum Log_Priority - LOG_DEBUG, // Debugging messages LOG_WARNING, // Warning messages LOG_ERROR, // Errors LOG_EMERG // A panic condition -; // Format of the logging record. struct Log_Record - Log_Priority type; long length; long time; long app_id; sequence
Reference: [21] <author> D. C. Schmidt and T. Suda, </author> <title> Measuring the Performance of Parallel Message-based Process Architectures, </title> <booktitle> in Proceedings of the Conference on Computer Communications (INFO-COM), </booktitle> <address> (Boston, MA), </address> <pages> pp. 624-633, </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: Three promising techniques discussed below include parallel processing of composite filters, trie-based filter composition, and context-free grammar-based filter composition using skip-ahead parsing. Existing work has investigated several of these optimization techniques in the context of communication protocols <ref> [21] </ref> and packet filtering [12, 22]. However, there appears to be no comprehensive comparative study investigating all three techniques in the context of DMP applications. * Parallel processing of composite filters: We are using shared memory multiprocessors (e.g., a 20-CPU SPAR-Ccenter 2000) to improve event filtering performance. <p> Task-based process architectures (which bind the PEs together with different filtering tasks or service layers) perform poorly on shared memory multiprocessors. Message-based process architectures (which bind the PEs with the individual messages or 5 connections to consumers) generally perform much better <ref> [21] </ref>. However, empirical tests are necessary to determine the circumstances under which types of message-based process architectures (e.g., Connectional Parallelism or Message Parallelism) provide the highest performance.
Reference: [22] <author> M. Jayaram, R. K. Cytron, D. C. Schmidt, and G. Vargh-ese, </author> <title> Efficient Demultiplexing of Network Packets by Automatic Parsing, </title> <booktitle> in Submitted to the ACM SIGPLAN'95 Conference on Programming Language Design and Implementation, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Three promising techniques discussed below include parallel processing of composite filters, trie-based filter composition, and context-free grammar-based filter composition using skip-ahead parsing. Existing work has investigated several of these optimization techniques in the context of communication protocols [21] and packet filtering <ref> [12, 22] </ref>. However, there appears to be no comprehensive comparative study investigating all three techniques in the context of DMP applications. * Parallel processing of composite filters: We are using shared memory multiprocessors (e.g., a 20-CPU SPAR-Ccenter 2000) to improve event filtering performance. <p> In this approach, a finite automaton is created by combining a set of context free grammars that describe the composite filter expressions. A novel technique known as skip-ahead parsing <ref> [22] </ref> is used to eliminate unnecessary access to data fields within a message. An advantage of this approach is that the generated code may be optimized using compiler optimization techniques.
Reference: [23] <author> P. Druschel, M. B. Abbott, M. Pagels, and L. L. Peterson, </author> <title> Network subsystem design, </title> <journal> IEEE Network (Special Issue on End-System Support for High Speed Networks), </journal> <volume> vol. 7, </volume> <month> July </month> <year> 1993. </year>
Reference-contexts: One limitation with the current generation of parallel processing platforms is the cost of delivering each message to all PEs attached to the shared memory. A fairly high cost is generally incurred when accessing shared memory on standard I/O buses <ref> [23] </ref>. * Trie-based Filter Composition: We are also exploring optimization techniques that compose multiple filter expressions together using dynamic trie-based data structures. This trie-based approach is a generalization of the DAG-based techniques presented in [12]. Every node in the trie implements a particular type of branching mechanism.
Reference: [24] <author> D. C. Schmidt and T. Suda, </author> <title> An Object-Oriented Framework for Dynamically Configuring Extensible Distributed Communication Systems, </title> <journal> IEE/BCS Distributed Systems Engineering Journal (Special Issue on Configurable Distributed Systems), </journal> <volume> vol. 2, </volume> <pages> pp. 280-293, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: An advantage of this approach is that the generated code may be optimized using compiler optimization techniques. One drawback to using compilation is the relatively high latency required to compile and install, modify, or delete an event filter. OS support for explicit dynamic linking <ref> [24] </ref> helps to reduce this overhead to some extent. Preliminary experiments on prototypes of our OO framework indicate that the appropriate choice of filtering optimization is affected significantly by the degree of dynamism required by a DMP application. <p> In contrast, our OO framework supports flexible lightweight (re)configuration mechanisms based upon explicit dynamic linking and lightweight processes (threads) <ref> [24] </ref>. 4 Concluding Remarks This paper describes research being conducted at Washington University on optimizations for high-performance event filtering. Efficient event filtering is crucial to reduce the large volume of event traffic processed by dynamic multi-point (DMP) applications (such as satellite telemetry processing and automated detection and recovery).
Reference: [25] <author> J. Magee, N. Dulay, and J. Kramer, </author> <title> A Constructive Development Environment for Parallel and Distributed Programs, </title> <booktitle> in Proceedings of the 2 nd International Workshop on Configurable Distributed Systems, </booktitle> <address> (Pittsburgh, PA), </address> <pages> pp. 1-14, </pages> <publisher> IEEE, </publisher> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: Distributed Event Filtering: More complex event filtering scenarios are also possible (shown in Figure 4). For example, network topology in complex systems may interconnect suppliers, event servers, and consumers that span multiple routers and switches, across local-area networks, as well as wide-area networks. Conventional techniques <ref> [25, 26] </ref> for configuring flexible software systems possess performance limitations since they install distributed application services by spawning heavyweight processes and connecting these processes via heavyweight IPC mechanisms (such as pipes and sockets).
Reference: [26] <author> J. M. Purtilo, </author> <title> The Polylith Software Toolbus, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <note> To appear 1994. </note>
Reference-contexts: Distributed Event Filtering: More complex event filtering scenarios are also possible (shown in Figure 4). For example, network topology in complex systems may interconnect suppliers, event servers, and consumers that span multiple routers and switches, across local-area networks, as well as wide-area networks. Conventional techniques <ref> [25, 26] </ref> for configuring flexible software systems possess performance limitations since they install distributed application services by spawning heavyweight processes and connecting these processes via heavyweight IPC mechanisms (such as pipes and sockets).
Reference: [27] <author> C. Horn, </author> <title> The Orbix Architecture, </title> <type> tech. rep., </type> <institution> IONA Technologies, </institution> <month> August </month> <year> 1993. </year> <month> 8 </month>
Reference-contexts: The framework supports the automated generation and optimization of filter expressions based on the CORBA interface definition language (IDL). By selecting CORBA, we plan to leverage off emerging distributed object 7 development environments <ref> [27] </ref> and open system protocol specification techniques [28]. To improve DMP application performance and scalability, we are exploring optimization techniques to reduce event filtering overhead.
Reference: [28] <author> D. Lea and J. Marlowe, </author> <title> PSL: Protocols and Pragmatics for Open Systems, </title> <type> Tech. Rep. 94-0369, </type> <institution> Object Management Group, </institution> <month> September </month> <year> 1994. </year> <month> 9 </month>
Reference-contexts: The framework supports the automated generation and optimization of filter expressions based on the CORBA interface definition language (IDL). By selecting CORBA, we plan to leverage off emerging distributed object 7 development environments [27] and open system protocol specification techniques <ref> [28] </ref>. To improve DMP application performance and scalability, we are exploring optimization techniques to reduce event filtering overhead. These techniques employ parallel processing, dynamic trie-based search structures, and compiler technology based on context-free grammars to reduce the time required to filter messages exchanged by DMP applications in a distributed system.
References-found: 28

