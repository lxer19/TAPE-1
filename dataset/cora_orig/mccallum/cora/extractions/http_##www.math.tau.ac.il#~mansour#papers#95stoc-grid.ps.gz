URL: http://www.math.tau.ac.il/~mansour/papers/95stoc-grid.ps.gz
Refering-URL: 
Root-URL: 
Email: mansour@math.tau.ac.il  boaz@ccs.neu.edu  
Title: Many-to-One Packet Routing on Grids EXTENDED ABSTRACT  
Author: Yishay Mansour Boaz Patt-Shamir 
Date: November 29, 1994  
Address: Tel-Aviv University  
Affiliation: Department of Computer Science  College of Computer Science Northeastern University  
Abstract: We study the general many-to-one packet routing problem in a grid-topology network, where the number of packets destined at a single node may be arbitrary (in contrast to the permutation and h h routing models), and the semantics of the packets is unknown (thus disallowing packet combining). The worst case time complexity of the problem may be very high, due to the possible existence of hot spots in the network (regions with small boundary, which contain destinations of many packets). We therefore aim at algorithms that route all packets at the best time possible for each instance (rather than algorithms that do as well as the worst case on all instances). We present a few results for this problem. First, we give an algorithm that finds a routing schedule, such that the time to complete the routing is a constant factor away from optimal, and only O(1) buffer space is needed at each node. As a by-product, the algorithm proves the interesting result that the distance + bandwidth lower bound is always achievable (up to constant factors). The algorithm runs in deterministic polynomial time, but it is centralized. Our second main result is a distributed on-line algorithm, which is more practically appealing. Given an instance with maximal source-destination distance D, this algorithm finds a schedule whose time complexity is at most O(log D) factor away from the best possible for that instance, using O(log D) buffer space at each node. In addition, we present an algorithm which ensures good average delivery time for the sets of packets with similar source-destination distance. 
Abstract-found: 1
Intro-found: 1
Reference: [AMO93] <author> Ravindra K. Ahuja, Thomas L. Magnanti, and James B. Orlin. </author> <title> Network Flows. </title> <publisher> Prentice-Hall, </publisher> <address> Engelwood Cliffs, New Jersey, </address> <year> 1993. </year>
Reference-contexts: Chain decomposition can be done in linear time using the greedy algorithm (see, e.g., <ref> [AMO93] </ref>). Finally, the chains in F are used to obtain paths in the original graph ^ G, by mapping nodes (i; j); (i; j) 0 ; (i; j) 00 ; (i; j) 000 in F to the original node ^ (i; j) in ^ G and eliminating cycles.
Reference: [BP93] <author> Gianfranco Bilardi and Franco Prepaprata. </author> <title> Horizons of parallel computation. </title> <institution> Research Report CS-93-20, Department of Computer Science, Brown University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction It is widely believed that due to physical considerations, the ultimate model for massively parallel computers is a (two-or three-dimensional) grid of processing elements (see, for example, surveys and arguments in <ref> [BP93, FS92, Vit86] </ref>). Packet routing is one of the critical tasks that affect the performance of parallel computers dramatically. The focus of most research in packet routing on grids has been on permutation routing, where each node is the source and the destination of one packet.
Reference: [FF62] <author> Lester R. Ford, Jr. and D. Ray Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton U. Press, </publisher> <year> 1962. </year>
Reference-contexts: Specifically, algorithms for quickest-transshipment can be used to replace Steps 1 and 2 of our algorithm: either the classical pseudo-polynomial algorithm <ref> [FF62] </ref> (which runs in polynomial time in our case), or the recent polynomial-time algorithm of Hoppe and Tardos [HT95].
Reference: [FS92] <author> Yosee Feldman and Ehud Shapiro. </author> <title> Spatial machines: A more realistic approach to parallel computation. </title> <journal> Comm. ACM, </journal> <volume> 35(10) </volume> <pages> 61-73, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction It is widely believed that due to physical considerations, the ultimate model for massively parallel computers is a (two-or three-dimensional) grid of processing elements (see, for example, surveys and arguments in <ref> [BP93, FS92, Vit86] </ref>). Packet routing is one of the critical tasks that affect the performance of parallel computers dramatically. The focus of most research in packet routing on grids has been on permutation routing, where each node is the source and the destination of one packet.
Reference: [GT88] <author> Andrew V. Goldberg and Robert E. Tarjan. </author> <title> A new approach to the maximum flow problem. </title> <journal> J. ACM, </journal> <volume> 35(4) </volume> <pages> 921-940, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Step 1 of the algorithm proceeds by computing a maximal flow f in F (2 i ), for i = 1; 2; : : :, until jf j = N ( ^ G). Any polynomial time max-flow algorithm can be used (e.g., <ref> [GT88] </ref>). In Section 3.2, we prove that if the capacity of the extended grid edges exceeds 2W , then jf j = N ( ^ G), and as a consequence, O (log (2W )) = O (log D) iterations of max-flow computations are sufficient.
Reference: [HT95] <author> Bruce Hoppe and Eva Tardos. </author> <title> The quickest transshipment problem. </title> <booktitle> In Proc. of the 6th ann. ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <month> January </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Specifically, algorithms for quickest-transshipment can be used to replace Steps 1 and 2 of our algorithm: either the classical pseudo-polynomial algorithm [FF62] (which runs in polynomial time in our case), or the recent polynomial-time algorithm of Hoppe and Tardos <ref> [HT95] </ref>. The reader should also note, however, that even though quickest transshipment algorithms yield the best possible time for the first stage of our schedule, it is unknown how to characterize the optimal transshipment time using only the distance and bandwidth bounds.
Reference: [Kun91] <author> Manfred Kunde. </author> <title> Concentrated regular data streams on grids: sorting and routing near to the bisection bound. </title> <booktitle> In 32nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 141-150, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Hence, the goal of the first stage of the schedule is to route nearly-a-permutation. This problem can be solved using any O (D)-time, O (1)-space permutation routing algorithm (e.g., <ref> [Kun91] </ref>), by partitioning the set of packets into O (1) sets, such that in each set only a partial permutation needs to be solved (see Appendix C for a similar construction). This way, the first stage is completed in O (D) steps, using O (1) buffer space at each node.
Reference: [Lei91] <author> Tom Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays Trees Hypercubes. </title> <address> Morgan-Kaufman, </address> <year> 1991. </year>
Reference-contexts: Another popular variant of grid routing is the h h problem, where each of the processors is the source, and the destination, of at most h packets. (An extensive survey of routing on grids can be found in <ref> [Lei91] </ref>.) While it seems reasonable to assume that each node can produce only a constant number of packets in a routing cycle, the restriction on the number of packets destined at a node is artificial and may require complicated coordination. <p> Observe, however, that packet combining can be done only when the semantics of packet contents is known to the routing algorithm, and if this semantics allows for efficient combining. Clearly, this is only a special case. In <ref> [Lei91] </ref>, Leighton comments regarding the general case that ... not much is known about optimal on-line algorithms for many-to-one packet routing on arrays [i.e., grids], and much of what is known is negative. Our paper offers a first step to remedy this state of affairs.
Reference: [LMR88] <author> Tom Leighton, Bruce Maggs, and Satish Rao. </author> <title> Universal packet routing algorithms. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 256-269, </pages> <address> White Plains, NY, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: Moreover, such a schedule can be found in deterministic polynomial time. A key ingredient in the proof of Theorem 1.1 is the result of Leighton et al. <ref> [LMR88, LMR95] </ref>, which shows that for a given a path for each packet, with path lengths O (d) and path congestion O (c) (viz., at most O (c) paths cross each edge), there is a schedule that delivers all packets in O (c + d) time, using constant-size buffers. 1 Our <p> After defining some notation, we make a simplifying assumption regarding the size of the grid, and conclude with the basic lower bound on routing time. 1 In <ref> [LMR88] </ref>, the existential result is proven, using the Lovasz Local Lemma. In [LMR95], a polynomial-time algorithm is given, using constructive versions of the Lemma. 2 Problem Statement. We are given a graph G = (V; E), where nodes model processors, and edges model bidirectional communication links. <p> The crux of our analysis is to show that such a desirable set of paths always exists. Moreover, these paths can be found efficiently, using flow techniques. Steps 2 and 3 are more standard: Step 2 is done by applying an algorithm of Leighton et al. <ref> [LMR88, LMR95] </ref>, which finds a good timing assignment when the paths are given; and Step 3 is done using a standard optimal permutation routing as a subroutine. In the remainder of this subsection, we describe each step in more detail. Step 1: Finding paths for the second stage. <p> Step 2: Finding a schedule for the second stage. In the second stage of the schedule, all packets are to be routed along the paths found in Step 1. To do that, we use the powerful result of Leighton et al. <ref> [LMR88, LMR95] </ref>. <p> Thus, our result is the first to establish the tight O (D + W ) upper bound on the timefor the special case of grids. (As an aside, note also that quickest transshipment algorithms do not guarantee constant size buffers.) 2 In <ref> [LMR88] </ref>, the existence of such a schedule is proved, and in [LMR95], an algorithm is presented. Consequently, a non-constructive version of Theorem 1.1 can be proven using only [LMR88]. 6 3.2 The Max-Flow Value of F The key to the correctness of the algorithm (and of Theorem 1.1) is the following <p> the special case of grids. (As an aside, note also that quickest transshipment algorithms do not guarantee constant size buffers.) 2 In <ref> [LMR88] </ref>, the existence of such a schedule is proved, and in [LMR95], an algorithm is presented. Consequently, a non-constructive version of Theorem 1.1 can be proven using only [LMR88]. 6 3.2 The Max-Flow Value of F The key to the correctness of the algorithm (and of Theorem 1.1) is the following theorem. Recall that F (u) is the network F as described above, with capacity u assigned to each extended grid edge.
Reference: [LMR95] <author> Tom Leighton, Bruce Maggs, and Satish Rao. </author> <title> Fast algorithms for finding O(congestion+dilation) packet routing schedules. </title> <booktitle> In Proc. 28th Hawaii International Conference on System Sciences, </booktitle> <month> Januray </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Moreover, such a schedule can be found in deterministic polynomial time. A key ingredient in the proof of Theorem 1.1 is the result of Leighton et al. <ref> [LMR88, LMR95] </ref>, which shows that for a given a path for each packet, with path lengths O (d) and path congestion O (c) (viz., at most O (c) paths cross each edge), there is a schedule that delivers all packets in O (c + d) time, using constant-size buffers. 1 Our <p> (c) (viz., at most O (c) paths cross each edge), there is a schedule that delivers all packets in O (c + d) time, using constant-size buffers. 1 Our main task is finding a set of paths with small d and c, which we can feed into the algorithm of <ref> [LMR95] </ref>. The algorithm used in proving Theorem 1.1 is centralized, and thus it is useful mainly in cases where the complete routing instance is known in advance. Distributed routing algorithms are more desirable in practice. <p> After defining some notation, we make a simplifying assumption regarding the size of the grid, and conclude with the basic lower bound on routing time. 1 In [LMR88], the existential result is proven, using the Lovasz Local Lemma. In <ref> [LMR95] </ref>, a polynomial-time algorithm is given, using constructive versions of the Lemma. 2 Problem Statement. We are given a graph G = (V; E), where nodes model processors, and edges model bidirectional communication links. G is assumed to be a k-dimensional grid for some fixed constant k. <p> The crux of our analysis is to show that such a desirable set of paths always exists. Moreover, these paths can be found efficiently, using flow techniques. Steps 2 and 3 are more standard: Step 2 is done by applying an algorithm of Leighton et al. <ref> [LMR88, LMR95] </ref>, which finds a good timing assignment when the paths are given; and Step 3 is done using a standard optimal permutation routing as a subroutine. In the remainder of this subsection, we describe each step in more detail. Step 1: Finding paths for the second stage. <p> Step 2: Finding a schedule for the second stage. In the second stage of the schedule, all packets are to be routed along the paths found in Step 1. To do that, we use the powerful result of Leighton et al. <ref> [LMR88, LMR95] </ref>. <p> To do that, we use the powerful result of Leighton et al. [LMR88, LMR95]. Specifically, given a set of paths with maximal path length d and path congestion at most c, the algorithm of <ref> [LMR95] </ref> finds, in deterministic polynomial time, a schedule whose time complexity is O (d + c) and whose space complexity is O (1). 2 By Properties (2,3) of the paths generated at Step 1, we have that d = O (D) and c = O (W ), and hence we get <p> complexity is O (1). 2 By Properties (2,3) of the paths generated at Step 1, we have that d = O (D) and c = O (W ), and hence we get a schedule whose time complexity is O (D + W ). (We stress again that the algorithm of <ref> [LMR95] </ref> finds only timing assignments for the packets, when the paths for the packets are given as input.) Step 3: Finding a schedule for the first stage. In the first stage of the schedule, packets are routed from their sources to their intermediate destinations. <p> is the first to establish the tight O (D + W ) upper bound on the timefor the special case of grids. (As an aside, note also that quickest transshipment algorithms do not guarantee constant size buffers.) 2 In [LMR88], the existence of such a schedule is proved, and in <ref> [LMR95] </ref>, an algorithm is presented. Consequently, a non-constructive version of Theorem 1.1 can be proven using only [LMR88]. 6 3.2 The Max-Flow Value of F The key to the correctness of the algorithm (and of Theorem 1.1) is the following theorem.
Reference: [RT92] <author> Sanguthevar Rajasekaran and Thanasis Tsantilas. </author> <title> Optimal routing algorithms for mesh-connected processor arrays. </title> <journal> Algorithmica, </journal> 1992(8) 21-38, 1992. 
Reference-contexts: Intuitively, we would like to get flexible algorithms, which perform well on easy instances and not too badly on hard instances, or in general, algorithms that always perform close to the best possible. We remark that in the same spirit, there are several permutation routing algorithms (e.g., <ref> [RT92, Sib92] </ref>) whose time complexity depend on the largest source-destination distance in the given instance, rather than on the largest possible distance, i.e., the diameter of the network. Our results.
Reference: [Sib92] <author> Jop Sibyen. </author> <title> Algorithms for routing on meshes. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Utrecht University, </institution> <year> 1992. </year>
Reference-contexts: Intuitively, we would like to get flexible algorithms, which perform well on easy instances and not too badly on hard instances, or in general, algorithms that always perform close to the best possible. We remark that in the same spirit, there are several permutation routing algorithms (e.g., <ref> [RT92, Sib92] </ref>) whose time complexity depend on the largest source-destination distance in the given instance, rather than on the largest possible distance, i.e., the diameter of the network. Our results.
Reference: [VB81] <author> Leslie G. Valiant and G. J. Brebner. </author> <title> Universal schemes for parallel communication. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 263-277, </pages> <address> Milwaukee, WI, </address> <month> May </month> <year> 1981. </year>
Reference-contexts: In some sense, the algorithm works backwards, from the destinations to the sources. The key to the algorithm is Step 1, which finds paths with some nice properties from the final destinations to some intermediate destinations. Unlike the Valiant-Brebner scheme <ref> [VB81] </ref>, the intermediate destinations are not random: they must satisfy certain requirements.
Reference: [Vit86] <author> Paul M.B. Vitanyi. </author> <title> Nonsequential computations and the laws of nature. </title> <booktitle> In Aegian Workshop on Computing, </booktitle> <pages> pages 108-120, </pages> <address> Berlin, </address> <year> 1986. </year> <note> Springer-Verlag (LNCS 227). i APPENDICES </note>
Reference-contexts: 1 Introduction It is widely believed that due to physical considerations, the ultimate model for massively parallel computers is a (two-or three-dimensional) grid of processing elements (see, for example, surveys and arguments in <ref> [BP93, FS92, Vit86] </ref>). Packet routing is one of the critical tasks that affect the performance of parallel computers dramatically. The focus of most research in packet routing on grids has been on permutation routing, where each node is the source and the destination of one packet.
References-found: 14

