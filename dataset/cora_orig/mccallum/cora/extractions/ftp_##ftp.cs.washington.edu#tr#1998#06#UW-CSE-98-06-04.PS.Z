URL: ftp://ftp.cs.washington.edu/tr/1998/06/UW-CSE-98-06-04.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Email: fgjb,borningg@cs.washington.edu  
Title: The Cassowary Linear Arithmetic Constraint Solving Algorithm: Interface and Implementation  
Author: Greg J. Badros Alan Borning 
Note: An earlier technical report also discussed QOCA and the similarities between Cassowary and that algorithm [6].  
Date: 29 June 1998  
Address: Box 352350, Seattle, WA 98195-2350 USA  
Affiliation: Department of Computer Science and Engineering University of Washington  
Pubnum: Technical Report UW-CSE-98-06-04  
Abstract: Linear equality and inequality constraints arise naturally in specifying many aspects of user interfaces, such as requiring that one window be to the left of another, requiring that a pane occupy the leftmost 1/3 of a window, or preferring that an object be contained within a rectangle if possible. Current constraint solvers designed for UI applications cannot efficiently handle simultaneous linear equations and inequalities. This is a major limitation. We describe Cassowary|an incremental algorithm based on the dual simplex method that can solve such systems of constraints efficiently. This informal technical report describes the latest version of the Cassowary algorithm. It is derived from the paper "Solving Linear Arithmetic Constraints for User Interface Applications" by Alan Borning, Kim Marriott, Peter Stuckey, and Yi Xiao [7], published in the UIST'97 Proceedings. The UIST paper also contains a description of QOCA, a closely related solver that finds least-squares solutions to linear constraints. This technical report, which is intended to be self-contained, includes material on Cassowary from the UIST paper, plus a description of the Java, C++, and Smalltalk implementations and their interfaces. along with additional details, corrections, and clarifications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Baraff. </author> <title> Fast contact force computation for nonpenetrating rigid bodies. </title> <booktitle> In SIGGRAPH '94 Conference Proceedings, </booktitle> <pages> pages 23-32. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: UI systems that handle simultaneous linear equations include DETAIL [10] and Ultraviolet [3]. A number of researchers (including the second author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. Baraff <ref> [1] </ref> describes a quadratic optimization algorithm for solving linear constraints that arise in modeling physical systems. Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities.
Reference: [2] <author> Alan Borning, Richard Anderson, and Bjorn Freeman-Benson. Indigo: </author> <title> A local propagation algorithm for inequality constraints. </title> <booktitle> In Proceedings of the 1996 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 129-136, </pages> <address> Seattle, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: The error in satisfying a constraint cn is 0 if and only if the constraint is satisfied, and becomes larger the less nearly satisfied is the constraint.) As recognized for the Indigo solver <ref> [2] </ref>, for inequality constraints it is important to use a metric rather than a predicate comparator. Thus, plausible comparators for use with linear equality and inequality constraints are locally-error-better, weighted-sum-better, and least-squares-better. <p> Most of the current systems use one-way constraints (e.g., [11, 15]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g., [17, 19]). Indigo <ref> [2] </ref> handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [10] and Ultraviolet [3]. <p> solutions at a vertex of the polytope even if all the solutions on an edge or face are equally good. (And of course Cassowary behaves this way because simplex does.) Such solutions are also produced by greedy constraint satisfaction algorithms, including local propagation algorithms such as DeltaBlue [17] and Indigo <ref> [2] </ref>, since these algorithms try to satisfy constraints one at a time, and in effect the constraints considered first are given a stronger strength than those considered later. However, there is an issue regarding comparators and Cassowary, which has not yet been resolved in an entirely clean way.
Reference: [3] <author> Alan Borning and Bjorn Freeman-Benson. </author> <title> The OTI constraint solver: A constraint library for constructing interactive graphical user interfaces. </title> <booktitle> In Proceedings of the First International Conference on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 624-628, </pages> <address> Cassis, France, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: solutions to the constraints. (In fact any least-squares-better or weighted-sum-better solution is also a locally-error-better solution [4].) It is thus easier to implement algorithms to find a locally-error-better solution, and in particular to design hybrid algorithms that include sub-solvers for simultaneous equations and inequalities and also sub-solvers for non-numeric constraints <ref> [3] </ref>. 2 1.2 Adapting the Simplex Algorithm Linear programming is concerned with solving the following problem. Consider a collection of n real-valued variables x 1 ; : : : ; x n , each of which is constrained to be non-negative: x i 0 for 1 i n. <p> Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [10] and Ultraviolet <ref> [3] </ref>. A number of researchers (including the second author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. Baraff [1] describes a quadratic optimization algorithm for solving linear constraints that arise in modeling physical systems.
Reference: [4] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Constraint hierarchies <ref> [4] </ref> provide a general theory for this. In a constraint hierarchy each constraint has a strength. The required strength is special, in that required constraints must be satisfied. The other strengths all label non-required constraints. A constraint of a given strength completely dominates any constraint with a weaker strength. <p> suited to tasks such as laying out a tree, a graph, or a collection of windows, where there are inherently conflicting preferences [6].) Locally-error-better is a more permissive comparator, in that it admits more solutions to the constraints. (In fact any least-squares-better or weighted-sum-better solution is also a locally-error-better solution <ref> [4] </ref>.) It is thus easier to implement algorithms to find a locally-error-better solution, and in particular to design hybrid algorithms that include sub-solvers for simultaneous equations and inequalities and also sub-solvers for non-numeric constraints [3]. 2 1.2 Adapting the Simplex Algorithm Linear programming is concerned with solving the following problem. <p> Unfortunately neither of these objective functions is linear and hence the simplex method is not applicable directly. We now show how we can solve the problem using quasi-linear optimization. 3 Cassowary's Quasi-linear Optimization Cassowary finds either locally-error-better or weighted-sum-better solutions. Since every weighted-sum-better solution is also a locally-error-better solution <ref> [4] </ref>, the weighted-sum part of the optimization comes automatically from the manner in which the objective function is constructed.
Reference: [5] <author> Alan Borning, Richard Lin, and Kim Marriott. </author> <title> Constraints for the web. </title> <booktitle> In Proceedings of ACM MULTIMEDIA'97, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: A demonstration Constraint Drawing Application using the Java implementation was written by Michael Noth and is available from the authors. A third Cassowary application currently being developed using a different Java implementation is a web authoring tool <ref> [5] </ref>, in which the appearance of a page is determined by the combination of constraints from both the web author and the viewer. 29 Acknowledgments Thanks to Kim Marriott, Peter Stuckey and Yi Xiao, co-developers of both Cassowary and the closely related QOCA algorithm, for their help in this work, and
Reference: [6] <author> Alan Borning, Kim Marriott, Peter Stuckey, and Yi Xiao. </author> <title> Solving linear arithmetic constraints for user interface applications: Algorithm details. </title> <type> Technical Report 97-06-01, </type> <institution> Dept. of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: The least-squares-better comparator strongly penalizes outlying values when trading off constraints of the same strength. It is particularly suited to tasks such as laying out a tree, a graph, or a collection of windows, where there are inherently conflicting preferences <ref> [6] </ref>.) Locally-error-better is a more permissive comparator, in that it admits more solutions to the constraints. (In fact any least-squares-better or weighted-sum-better solution is also a locally-error-better solution [4].) It is thus easier to implement algorithms to find a locally-error-better solution, and in particular to design hybrid algorithms that include sub-solvers <p> As a result, these systems are not so well suited for building interactive graphical applications. Borning, Marriot, Stuckey, and Xiao discuss both the original version of Cassowary and the related QOCA algorithm <ref> [7, 6] </ref>. QOCA uses the same solving technique as Cassowary, but uses a least-squares-better comparator during the optimization from basic feasible solved form. An earlier version of QOCA is described in references [8] and [9]. <p> Note also that none of these difficulties is a problem for least-squares-better comparators such as the one that the QOCA algorithm uses | that comparator distributes the error to the x and y components of all the points with stays of the same strength <ref> [6] </ref>. 5 Empirical Evaluation Cassowary has been implemented in Smalltalk, C++, and Java. We ran some simple benchmarks using test problems which tried to add 300 randomly-generated constraints using 300 variables, and 900 randomly-generated constraints using 900 variables.
Reference: [7] <author> Alan Borning, Kim Marriott, Peter Stuckey, and Yi Xiao. </author> <title> Solving linear arithmetic constraints for user interface applications. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on User Interface Software and Technology, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: As a result, these systems are not so well suited for building interactive graphical applications. Borning, Marriot, Stuckey, and Xiao discuss both the original version of Cassowary and the related QOCA algorithm <ref> [7, 6] </ref>. QOCA uses the same solving technique as Cassowary, but uses a least-squares-better comparator during the optimization from basic feasible solved form. An earlier version of QOCA is described in references [8] and [9].
Reference: [8] <author> Richard Helm, Tien Huynh, Catherine Lassez, and Kim Marriott. </author> <title> A linear constraint technology for interactive graphic systems. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> pages 301-309, </pages> <year> 1992. </year>
Reference-contexts: Borning, Marriot, Stuckey, and Xiao discuss both the original version of Cassowary and the related QOCA algorithm [7, 6]. QOCA uses the same solving technique as Cassowary, but uses a least-squares-better comparator during the optimization from basic feasible solved form. An earlier version of QOCA is described in references <ref> [8] </ref> and [9]. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [12]. 2 Incremental Simplex As you see, the subject of linear programming is surrounded by notational and terminological thickets.
Reference: [9] <author> Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides. </author> <title> An object-oriented architecture for constraint-based graphical editing. </title> <booktitle> In Proceedings of the Third Eurographics Workshop on Object-oriented Graphics, </booktitle> <address> Champery, Switzerland, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: QOCA uses the same solving technique as Cassowary, but uses a least-squares-better comparator during the optimization from basic feasible solved form. An earlier version of QOCA is described in references [8] and <ref> [9] </ref>. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [12]. 2 Incremental Simplex As you see, the subject of linear programming is surrounded by notational and terminological thickets.
Reference: [10] <author> Hiroshi Hosobe, Satoshi Matsuoka, and Akinori Yonezawa. </author> <title> Generalized local propagation: A framework for solving constraint hierarchies. </title> <booktitle> In Proceedings of the Second International Conference on Principles and Practice of Constraint Programming, </booktitle> <address> Boston, </address> <month> August </month> <year> 1996. </year> <month> 30 </month>
Reference-contexts: Most of the current systems use one-way constraints (e.g., [11, 15]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g., [17, 19]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL <ref> [10] </ref> and Ultraviolet [3]. A number of researchers (including the second author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. <p> For example, consider the two constraints weak x = 0 and weak x = 10. The set of LEB solutions is the infinite set of mappings from x to each number in <ref> [0; 10] </ref>. Assuming equal weights on the constraints, the (single) least-squares solution is fx 7! 5g. The TLEB solutions are defined by producing all the totally ordered hierarchies and taking the union of their solutions.
Reference: [11] <author> Scott Hudson and Ian Smith. </author> <title> SubArctic UI toolkit user's manual. </title> <type> Technical report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: The various implementations with example applications are available from the authors. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [18]. Most of the current systems use one-way constraints (e.g., <ref> [11, 15] </ref>), or local propagation algorithms for acyclic collections of multi-way constraints (e.g., [17, 19]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [10] and Ultraviolet [3].
Reference: [12] <author> T. Huynh and K. Marriott. </author> <title> Incremental constraint deletion in systems of linear constraints. </title> <journal> Information Processing Letters, </journal> <volume> 55 </volume> <pages> 111-115, </pages> <year> 1995. </year>
Reference-contexts: An earlier version of QOCA is described in references [8] and [9]. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in <ref> [12] </ref>. 2 Incremental Simplex As you see, the subject of linear programming is surrounded by notational and terminological thickets. Both of these thorny defenses are lovingly cultivated by a coterie of stern acolytes who have devoted themselves to the field. Actually, the basic ideas of linear programming are quite simple.
Reference: [13] <author> Joxan Jaffar, Spiro Michaylov, Peter Stuckey, and Roland Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Baraff [1] describes a quadratic optimization algorithm for solving linear constraints that arise in modeling physical systems. Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. Current constraint logic programming languages such as CLP (R) <ref> [13] </ref> include efficient solvers for linear equalities and inequalities. (See [14] for a survey.) However, these solvers use a refinement model of computation, in which the values determined for variables are successively refined as the computation progresses, but there is no notion as such of state and change.
Reference: [14] <author> Kim Marriott and Peter Stuckey. </author> <title> Introduction to Constraint Logic Programming. </title> <publisher> Mit Press, </publisher> <year> 1998. </year>
Reference-contexts: Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. Current constraint logic programming languages such as CLP (R) [13] include efficient solvers for linear equalities and inequalities. (See <ref> [14] </ref> for a survey.) However, these solvers use a refinement model of computation, in which the values determined for variables are successively refined as the computation progresses, but there is no notion as such of state and change. <p> Augmented simplex form allows us to handle unrestricted variables efficiently and simply; it was developed for implementing constraint logic programming languages <ref> [14] </ref>, and we have adopted it here. Essentially it uses two tableaux rather than one. All of the unrestricted variables will be placed in C U , the unrestricted variable tableau. C S , the simplex tableau, contains only variables constrained to be non-negative. <p> is an instance of ClSymbolicWeight and w is a float.) If we allow non-required constraints other than stays and edits, we also need to re-optimize after deleting a constraint, since a non-required constraint might have become satisfiable (or more nearly satisfiable). 4.4 Omissions The solver should implement Bland's anti-cycling rule <ref> [14] </ref>, but it does not at the moment. Adding this should be straightforward. 4.5 Comparator Details Our implementation of Cassowary favors solutions that satisfies some of the constraints completely, rather than ones that, for example, partially satisfy each of two conflicting equalities. These are still legitimate locally-error-better solutions.
Reference: [15] <author> Brad A. Myers. </author> <title> The Amulet user interface development environment. </title> <booktitle> In CHI'96 Conference Companion: Human Factors in Computing Systems, </booktitle> <address> Vancouver, B.C., </address> <month> April </month> <year> 1996. </year> <note> ACM SIGCHI. </note>
Reference-contexts: The various implementations with example applications are available from the authors. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [18]. Most of the current systems use one-way constraints (e.g., <ref> [11, 15] </ref>), or local propagation algorithms for acyclic collections of multi-way constraints (e.g., [17, 19]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [10] and Ultraviolet [3].
Reference: [16] <author> William H. Press, Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. </author> <title> Numerical Recipes: </title> <booktitle> The Art of Scientific Computing. </booktitle> <publisher> Cambridge University Press, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference-contexts: Both of these thorny defenses are lovingly cultivated by a coterie of stern acolytes who have devoted themselves to the field. Actually, the basic ideas of linear programming are quite simple. Numerical Recipes, <ref> [16, page 424] </ref> We now describe an incremental version of the simplex algorithm, adapted to the task at hand.
Reference: [17] <author> Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Borning. </author> <title> Multi-way versus one-way constraints in user interfaces: Experience with the DeltaBlue algorithm. </title> <journal> Software| Practice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Most of the current systems use one-way constraints (e.g., [11, 15]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g., <ref> [17, 19] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [10] and Ultraviolet [3]. <p> which always finds solutions at a vertex of the polytope even if all the solutions on an edge or face are equally good. (And of course Cassowary behaves this way because simplex does.) Such solutions are also produced by greedy constraint satisfaction algorithms, including local propagation algorithms such as DeltaBlue <ref> [17] </ref> and Indigo [2], since these algorithms try to satisfy constraints one at a time, and in effect the constraints considered first are given a stronger strength than those considered later.
Reference: [18] <author> Ivan Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <pages> pages 329-346. IFIPS, </pages> <year> 1963. </year>
Reference-contexts: The various implementations with example applications are available from the authors. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system <ref> [18] </ref>. Most of the current systems use one-way constraints (e.g., [11, 15]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g., [17, 19]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities).
Reference: [19] <author> Brad Vander Zanden. </author> <title> An incremental algorithm for satisfying hierarchies of multi-way dataflow constraints. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 18(1) </volume> <pages> 30-72, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Most of the current systems use one-way constraints (e.g., [11, 15]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g., <ref> [17, 19] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [10] and Ultraviolet [3].
References-found: 19

