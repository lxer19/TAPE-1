URL: http://www.cs.unc.edu/~olano/papers/2dh-tri/2dh-tri.ps.gz
Refering-URL: http://www.cs.unc.edu/~olano/papers/
Root-URL: http://www.cs.unc.edu
Title: Triangle Scan Conversion using 2D Homogeneous Coordinates  
Author: Marc Olano Trey Greer 
Keyword: CR Categories and Subject Descriptors: I.3.1 [Computer Graphics]: Hardware Architecture Parallel Processing; I.3.3 [Computer Graphics]: Picture/Image Generation; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism Visible line/surface algorithms. Additional Keywords: homogeneous coordinates, scan conversion, rasterization, clipping  
Affiliation: University of North Carolina Hewlett-Packard  
Abstract: We present a new triangle scan conversion algorithm that works entirely in homogeneous coordinates. By using homogeneous coordinates, the algorithm avoids costly clipping tests which make pipelining or hardware implementations of previous scan conversion algorithms difficult. The algorithm handles clipping by the addition of clip edges, without the need to actually split the clipped triangle. Furthermore, the algorithm can render true homogeneous triangles, including external triangles that should pass through infinity with two visible sections. An implementation of the algorithm on Pixel-Planes 5 runs about 33% faster than a similar implementation of the previous algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [Blinn96a] <author> James Blinn, Jim Blinns Corner: </author> <title> Calculating Screen Coverage, </title> <booktitle> IEEE Computer Graphics & Applications , v16n3 (May 1996), </booktitle> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> CA, </address> <year> 1996. </year>
Reference-contexts: Binning is the job of finding the regions that contain part of the triangle. For the implementation we used for performance testing, we simply used an axis-aligned bounding box around the triangle for binning. Computing bounding boxes from preprojection homogeneous coordinates is covered by Blinn in <ref> [ Blinn96a] </ref>. However, particularly for triangles with high aspect ratios, the axis aligned bounding box can seriously overestimate the number of regions covered ( Figure 6 ). This problem is becoming more serious, as region sizes shrink to increase processor utilization.
Reference: [Blinn96b] <author> James Blinn, Jim Blinns Corner: </author> <title> A Trip Down the Graphics Pipeline , Morgan Kaufmann, </title> <year> 1996. </year>
Reference-contexts: Niizeki also gives a point-in-polygon test, but it is not appropriate for our purposes as it is for 3D points in 3D polygons. Blinn noted the possibility of scan converting without hither clipping, though he still suggested operating in nonhomogeneous space for the actual scan conversion <ref> [Blinn96b] </ref>. 3 HOMOGENEOUS COORDINATES 3.1 Notation A point in 3-space, P = (X, Y, Z), is represented in homogeneous coordinates by the four element vector, p = ( X, Y, Z, 1). Any nonzero multiple of this homogeneous vector represents the same point in 3-space. <p> Figure 4 shows a triangle with one vertex in front of the eye as the Z coordinate of the other two change. 4 PERSPECTIVE-CORRECT INTERPOLATION Before attacking the full scan conversion problem, consider the equations for perspective-correct interpolation across a triangle. This is called hyperbolic interpolation by Blinn <ref> [ Blinn96b] </ref> and rational linear interpolation by Heckbert [Heckbert89]. 4.1 Interpolation function If some parameter (say the u texture coordinate) is to vary linearly across the triangle in 3D (i.e. across the object itself), it must obey this equation: u = a X + b Y + c Z (1) The <p> This allows us to rewrite equation 1 to hold in 2D homogeneous space: u = a x + b y + c w (2) Division by w produces the familiar 2D perspective-correct interpolation equation <ref> [Blinn96b, Heckbert89] </ref>: u/w = a x/w + b y/w + c = a X + b Y + c (3) This says that u/w is a linear function in the screen space (X, Y).
Reference: [Cyrus78] <author> M. Cyrus and J. Beck, </author> <title> Generalized Two and Three-Dimensional Clipping, </title> <journal> Computers and Graphics , v3, </journal> <year> 1978. </year>
Reference-contexts: We only need the new edge functions, we do not actually find the clip vertices. The pseudo-parameter vector for a clip edge function is just the dot product test normally used for determining which vertices are inside or outside the clip plane <ref> [Cyrus78] </ref>. It is linear, positive for unclipped points, negative for clipped points, and zero along the clipping plane itself.
Reference: [Fuchs85] <author> Henry Fuchs, Jack Goldfeather, Jeff Hultquist, Susan Spach, John Austin, Frederick Brooks, Jr., John Eyles and John Poulton, </author> <title> Fast Spheres, Shadows, Textures, Transparencies, and Image Enhancements in Pixel-Planes, </title> <booktitle> Proceedings of SIGGRAPH 85 (San Francisco, </booktitle> <address> CA, </address> <month> July 2226, </month> <year> 1985). </year> <title> In Computer Graphics , v19n3 (July 1985), </title> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Pineda observed that these algorithms do not extend well to parallel implementations [Pineda88]. The Pixel-Planes <ref> [ Fuchs85] </ref> and Pineda [ Pineda88] scan conversion algorithms do parallelize well. In both of these algorithms, each triangle edge is represented by a linear edge function . The edge function is positive inside the edge and negative outside. <p> Finally, our particular hardware implementation avoids most of the per-pixel costs by using deferred shading. 5 SCAN CONVERSION 5.1 Edge function The coefficient computations for parameter interpolation can be extended to complete triangle scan conversion. Following the Pixel-Planes and Pineda algorithms <ref> [ Fuchs85, Pineda88] </ref>, we compute a linear function for each edge of the triangle. This function is positive on inside of the edge and negative on the outside.
Reference: [Fuchs89] <author> Henry Fuchs, John Poulton, John Eyles, Trey Greer, Jack Goldfeather, David Ellsworth, Steve Molnar, Greg Turk, Brice Tebbs and Laura Israel, </author> <title> Pixel-Planes 5: A Heterogeneous Multiprocessor Graphics System Using Processor-Enhanced Memories, </title> <booktitle> Proceedings of SIGGRAPH 89 (Boston, </booktitle> <address> MA, July 31August 4, </address> <year> 1989). </year> <title> In Computer Graphics , v23n3 (July 1989), </title> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York, NY, </address> <year> 1989. </year>
Reference-contexts: One of the reasons that hither clipping is required is to avoid singularities in this conversion. We present a method for triangle scan conversion in which all computations occur in homogeneous space. In a comparison of similar implementations of the new algorithm and the previous algorithm on Pixel-Planes 5 <ref> [ Fuchs89] </ref>, the new algorithm ran about 33% faster. With the new method, no hither clipping is required at all for the (rather uninteresting) case using only flat shading and no z-buffering. Even triangles that touch or cross the camera plane are rendered correctly. <p> We use this method to create a hither edge function . Scan conversion of the triangle edges works without clipping. We have implemented a scan converter on Pixel-Planes 5 <ref> [Fuchs89] </ref> that renders flat shaded non-z-buffered triangles with no clipping at all. Computation of coefficients for parameter interpolation also works without clipping. However, for triangles that pass near the eye, the parameter interpolation can overflow. This is true even if the parameter itself is well defined.
Reference: [Heckbert89] <author> Paul Heckbert, </author> <title> Fundamentals of Texture Mapping and Image Warping, </title> <type> Masters Thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA, </address> <year> 1989 </year>
Reference-contexts: This is called hyperbolic interpolation by Blinn [ Blinn96b] and rational linear interpolation by Heckbert <ref> [Heckbert89] </ref>. 4.1 Interpolation function If some parameter (say the u texture coordinate) is to vary linearly across the triangle in 3D (i.e. across the object itself), it must obey this equation: u = a X + b Y + c Z (1) The 3D position ( X, Y, Z) projects to <p> This allows us to rewrite equation 1 to hold in 2D homogeneous space: u = a x + b y + c w (2) Division by w produces the familiar 2D perspective-correct interpolation equation <ref> [Blinn96b, Heckbert89] </ref>: u/w = a x/w + b y/w + c = a X + b Y + c (3) This says that u/w is a linear function in the screen space (X, Y).
Reference: [Niizeki94] <author> Masatoshi Niizeki and Fujio Yamaguchi, </author> <title> Projectively Invariant Intersection Detections for Solid Modeling, </title> <booktitle> ACM Transactions on Graphics , v13n3 (July 1994), ACM SIGGRAPH, </booktitle> <address> New York, NY, </address> <year> 1994. </year>
Reference-contexts: The new algorithm computes equivalent edge functions and parameter interpolation functions using 2D homogeneous screen coordinates without computing the actual screen coordinates. 1 olano@cs.unc.edu 2 greer@chapelhill.hp.com The new algorithm can be derived from the 2D equivalent to the 3D homogeneous point-in-tetrahedron test given by Niizeki <ref> [Niizeki94] </ref>. In this test, a 3D point is in a tetrahedron if it passes four 4x4 determinant tests. <p> This is called the projection of the homogeneous point. The representations and conversions are summarized in Table 1. 3.2 Homogeneous triangles A triangle can be defined as a weighted linear combination of three vertices <ref> [Niizeki94] </ref>. In homogeneous coordinates: p = l 1 p 1 + l (where the l s have the same sign and at least one is nonzero). This definition holds whether the points are 2D or 3D. <p> From equation 4, it is apparent that the edge parameter vectors [ 1 0 0], [0 1 0], and [0 0 1] simply pick rows out of the inverse matrix. Examining the edge functions just defined and the determinant tests of <ref> [ Niizeki94] </ref>, we can show that they are different formulations for the same test. For the pixels in the part of the triangle we usually want to render, all of the edge functions are positive * .
Reference: [Pineda88] <author> Juan Pineda, </author> <title> A Parallel Algorithm for Polygon Rasterization, </title> <booktitle> Proceedings of SIGGRAPH 88 (Atlanta, </booktitle> <address> GA, </address> <month> August 15, </month> <year> 1988). </year> <title> In Computer Graphics , v22n4 (August 1988), </title> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York, NY, </address> <year> 1988. </year> <title> performance test. </title>
Reference-contexts: Pineda observed that these algorithms do not extend well to parallel implementations <ref> [Pineda88] </ref>. The Pixel-Planes [ Fuchs85] and Pineda [ Pineda88] scan conversion algorithms do parallelize well. In both of these algorithms, each triangle edge is represented by a linear edge function . The edge function is positive inside the edge and negative outside. <p> Pineda observed that these algorithms do not extend well to parallel implementations [Pineda88]. The Pixel-Planes [ Fuchs85] and Pineda <ref> [ Pineda88] </ref> scan conversion algorithms do parallelize well. In both of these algorithms, each triangle edge is represented by a linear edge function . The edge function is positive inside the edge and negative outside. <p> Finally, our particular hardware implementation avoids most of the per-pixel costs by using deferred shading. 5 SCAN CONVERSION 5.1 Edge function The coefficient computations for parameter interpolation can be extended to complete triangle scan conversion. Following the Pixel-Planes and Pineda algorithms <ref> [ Fuchs85, Pineda88] </ref>, we compute a linear function for each edge of the triangle. This function is positive on inside of the edge and negative on the outside. <p> For incremental scan conversion <ref> [Pineda88] </ref>, we would only evaluate the edge functions inside or near the triangle, so the addition of a hither plane can prevent their overflow. For Pixel-Planes style scan conversion, the edge functions are evaluated at many pixels simultaneously, some of which may be far outside the triangle.
References-found: 8

