URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3522/3522.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: kandogan@cs.umd.edu  ben@cs.umd.edu  
Phone: Tel: (301) 405-2725  Tel: (301) 405-2680  
Title: Elastic Windows: Improved Spatial Layout and Rapid Multiple Window Operations  
Author: Eser Kandogan Ben Shneiderman 
Keyword: Window Manager, CAD, Task Switching, Multi-window operations, Personal Role Manager, Programming Environment, Elastic Windows  
Date: May 27-29.  
Note: to appear in ACM AVI'96 Advanced Visual Interfaces, Gubbio, Italy,  
Address: College Park, MD 20742 University of Maryland  College Park, MD 20742  
Affiliation: Department of Computer Science Department of Computer Science, Human-Computer Interaction Laboratory Human-Computer Interaction Laboratory University of Maryland Institute for Systems Research  
Abstract: Most windowing systems follow the independent overlapping windows approach, which emerged as an answer to the needs of the 80s' applications and technology. Advances in computers, display technology, and the applications demand more functionalityfrom window management systems. Based on these changes and the problems of current window-ing approaches, we have updated the requirements for multi-window systems to guide new methods of window management. We propose elastic windows with improved spatial layout and rapid multi-window operations. Multi-window operations are achieved by issuing operations on window groups hierarchically organized in a space-filling tiled layout. Sophisticated multi-window operations and spatial layout dynamics helps users to handle fast task-switching and to structure their work environment to their rapidly changing needs. We claim that these multi-window operations and the improved spatial layout decrease the cognitive load on users. Users found our prototype system to be comprehensible and enjoyable as they playfully explored the way multiple windows are reshaped. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Asahi, T., Turo, D., Shneiderman, B., </author> <title> Using treemaps to visualize the analytic hierarchy process, </title> <note> to appear in Information Systems Research, </note> <month> (Dec </month> <year> 1995). </year>
Reference: 2. <author> Bannon, L., Cypher, A., Greenspan, S., Monty, M. L., </author> <title> Evaluation and analysis of users' activity organization, </title> <booktitle> Proc. of the CHI'83, Human Factors in Computing Systems Conference, ACM, </booktitle> <address> New York, NY, </address> <year> (1983), </year> <pages> pp. 54-57. </pages>
Reference-contexts: Among these, independent control of multiple programs, referred to here as multitasking, is the most significant. Basically, it is the ability of users to work on different tasks in separate windows. Analyses of work flow determined that people deal with many tasks concurrently with frequent switches among them <ref> [2] </ref>. For example, a researcher preparing a paper might draw the figures in one window while writing the text of the document using an editor in another window. Multitasking results in improvements on the overall user performance due to the decreased average task-completion time. <p> Gaylin [12] observed that the number of window operations that are used to switch the active window set constitutes 63% of all the operations in an independent overlapped window manager. This result supports the findings by Bannon et al. <ref> [2] </ref> that people switch among tasks frequently forcing them to change the visible set of windows on the screen. Bederson and Hollan [3] observed that in traditional window-based systems there is no graphical depiction of the relationship among windows even when there is a strong semantic relationship.
Reference: 3. <author> Bederson, B., B., Hollan, J., D., </author> <title> Pad++: A zooming graphical interface for exploring alternate interface physics, </title> <booktitle> Proc. of the UIST'94, User Interface Software and Technology Conference, </booktitle> <pages> pp. 17-26. </pages>
Reference-contexts: This result supports the findings by Bannon et al. [2] that people switch among tasks frequently forcing them to change the visible set of windows on the screen. Bederson and Hollan <ref> [3] </ref> observed that in traditional window-based systems there is no graphical depiction of the relationship among windows even when there is a strong semantic relationship.
Reference: 4. <author> Bly, S., Rosenberg, J., </author> <title> A comparison of tiled and overlapping windows, </title> <booktitle> Proc. CHI '86 Conference Human Factors in Computing Systems, ACM, </booktitle> <address> New York, NY, </address> <year> (1986), </year> <pages> pp. 101-106. </pages>
Reference-contexts: They observed that in Windowitis situations the users become quickly disoriented, lose the relationships that exist between windows due to loss of spatial cues, and become unproductive in completing their tasks. Bly and Rosenberg <ref> [4] </ref> characterized the requirements of multi-window systems as the ability of the windows to conform to their contents and the ability of the system to relieve the user of window management.
Reference: 5. <author> Bury, K. F., Davies, S. E., and Darnell, M. J., </author> <title> Window management: A review of issues and some results from user testing, IBM Human Factors Center Report HFC-53, </title> <address> San Jose, CA, </address> <month> (June </month> <year> 1985), </year> <pages> 36 pages. </pages>
Reference-contexts: INTRODUCTION It is widely believed that windowed environments are superior to non-windowed ones. However, an early study by Bury et al. <ref> [5] </ref> (1985) comparing users' performance in windowed systems to non-windowed systems revealed that task-completion time in windowed systems can be longer due to window arrangement time. A detailed analysis, however, showed that actual times spent on solving a task were lower in windowed environments compared to non-windowed envi ronments. <p> INTRODUCTION It is widely believed that windowed environments are superior to non-windowed ones. However, an early study by Bury et al. [5] <ref> (1985) </ref> comparing users' performance in windowed systems to non-windowed systems revealed that task-completion time in windowed systems can be longer due to window arrangement time. A detailed analysis, however, showed that actual times spent on solving a task were lower in windowed environments compared to non-windowed envi ronments.
Reference: 6. <author> Card, S. K., Pavel, M., and Farrell, J. E., </author> <title> Window-based computer dialogues, </title> <booktitle> INTERACT '84, First IFIP Conference on Human-Computer Interaction, </booktitle> <address> London, UK, </address> <year> (1984), </year> <pages> pp. 355-359. </pages>
Reference-contexts: Their experiments also showed that the error rates in windowed environments were significantly lower. Although systems compared in these experiments were rather old, the results clearly indicate that benefits of windowing can be overshadowed by the extra time spent on window housekeeping activities. Card et al. <ref> [6] </ref> analyzed window usage according to tasks and identified seven functional uses of multiple windows. Among these, independent control of multiple programs, referred to here as multitasking, is the most significant. Basically, it is the ability of users to work on different tasks in separate windows. <p> Windowing allows access to multiple sources of information. It is possible to reduce the cognitive load on users by allowing them to examine other windows for supplementary information, or multiple representations for the task at hand or use task-aids like cut-and-paste. As stated by Card et al. <ref> [6] </ref>, the computer display is used not only as a communication medium but also as an external memory for users. Thus having all the necessary information on the screen and filtering out unnecessary windows is a required property of windowing systems.
Reference: 7. <author> Card, S. K.,Henderson, A., </author> <title> A multiple virtual-workspace interface to support task switching, </title> <booktitle> Proc. CHI '87 Conference Human Factors in Computing Systems, ACM, </booktitle> <address> New York, NY, </address> <year> (1987), </year> <pages> pp. 53-59. </pages>
Reference: 8. <author> Cohen, E. S., Smith, E. T., Iverson, L. A., </author> <title> Constraint-based tiled windows, </title> <journal> IEEE Computer Graphics and Applications 6, </journal> <volume> 5, </volume> <month> (May </month> <year> 1986). </year>
Reference-contexts: People typically try to organize windows to be nonoverlapping while working on a task, even when overlapping windows are allowed. Other windows are left beneath the working set of windows. As Cohen et al. <ref> [8] </ref> stated, overlapping window layouts are difficult to handle when large numbers of windows must all be visible at once, and they come and go rapidly. In tiled layouts, hierarchies of windows can be easily represented by the borders surrounding the subwindows. <p> The Dylan programming environment uses a pane-based window system [10], which allows both horizontal and vertical panes, with a mechanism to create links between panes. The Dylan programming environment does not support multiple window operations and hierarchical organization of windows. Xerox/Star [23], RTL/CRTL <ref> [8, 9] </ref>, and Windows 1.0 also used tiling, but hierarchical organization and multiple operations were not provided. CIWM [11] uses automated window management. Although automatic strategies in window management relieve the burden of window management, direct user control is preferable as in most HCI artifacts.
Reference: 9. <author> Cohen, E. S., Berman, A. M., Biggers, M. R., Camaratta, J. C., Kelly, K. M., </author> <title> Automatic strategies in the Siemens RTL tiled window manager, </title> <booktitle> Proc. IEEE 2nd International Conference on Computer Workstations, IEEE, </booktitle> <address> Piscataway, NJ, </address> <year> (1988), </year> <pages> pp. 111-119. </pages>
Reference-contexts: The Dylan programming environment uses a pane-based window system [10], which allows both horizontal and vertical panes, with a mechanism to create links between panes. The Dylan programming environment does not support multiple window operations and hierarchical organization of windows. Xerox/Star [23], RTL/CRTL <ref> [8, 9] </ref>, and Windows 1.0 also used tiling, but hierarchical organization and multiple operations were not provided. CIWM [11] uses automated window management. Although automatic strategies in window management relieve the burden of window management, direct user control is preferable as in most HCI artifacts.
Reference: 10. <author> Dumas, J., Parsons, P., </author> <title> Discovering the way programmers think about new programming environments, </title> <journal> Communications of the ACM, (June 1995), </journal> <volume> 38, 6, </volume> <pages> pp. 45-56. </pages>
Reference-contexts: Windows can not be grouped hierarchically and multiple window operations are not provided. Windows minimized are iconized at the bottom of the desktop, possibly causing disorientation if the number of windows is high. The Dylan programming environment uses a pane-based window system <ref> [10] </ref>, which allows both horizontal and vertical panes, with a mechanism to create links between panes. The Dylan programming environment does not support multiple window operations and hierarchical organization of windows.
Reference: 11. <author> Funke, D. J., Neal, J. G., Paul, R. D., </author> <title> An approach to intelligent automated window management, </title> <journal> International Journal of Man-Machine Studies 38, </journal> <year> (1993), </year> <pages> pp. 949-983. </pages>
Reference-contexts: Thus having all the necessary information on the screen and filtering out unnecessary windows is a required property of windowing systems. Malone [16] observed that the way people organize papers on their desk helps them to structure their work and reminds them of unfinished tasks. As Funke et al. <ref> [11] </ref> suggested, windowing systems should support users to integrate, organize, compare, distill, summarize, and apply the information. MOTIVATION Today's windowing systems do not differ much in their basic principles of window management. <p> The Dylan programming environment does not support multiple window operations and hierarchical organization of windows. Xerox/Star [23], RTL/CRTL [8, 9], and Windows 1.0 also used tiling, but hierarchical organization and multiple operations were not provided. CIWM <ref> [11] </ref> uses automated window management. Although automatic strategies in window management relieve the burden of window management, direct user control is preferable as in most HCI artifacts. Myers has an excellent taxonomy of these early windowing systems [17].
Reference: 12. <author> Gaylin, K., B., </author> <title> How are windows used ? Some notes on creating empirically-based windowing benchmark task, </title> <booktitle> Proc. CHI '86 Conference Human Factors in Computing Systems, ACM, </booktitle> <address> New York, NY, </address> <year> (1986), </year> <pages> pp. 96-100. </pages>
Reference-contexts: Since window housekeeping is an activity related to the computer domain and not to the users' task [21], the time spent on window management substantially increases the disruptive effect on the short-term memory, thus implies a non-linear cost curve as the number of windows per task increases. Gaylin <ref> [12] </ref> observed that the number of window operations that are used to switch the active window set constitutes 63% of all the operations in an independent overlapped window manager.
Reference: 13. <author> Henderson, A., Card, S. K., Rooms: </author> <title> The use of multiple virtual workspaces to reduce space contention in a window-based graphical user interface, </title> <journal> ACM Transactions on Graphics 5, </journal> <volume> 3, </volume> <year> (1986), </year> <pages> pp. 211-243. </pages>
Reference-contexts: This example also demonstrates the use of multi-window operations to reduce the burden of window management and the use of the Pack/Unpack operations to meet changing screen space needs. view documentation regarding a component of the sys tem. RELATED WORK The Rooms system <ref> [13] </ref> uses multiple virtual workspaces, where the overlapping window strategy is used in each of these single-screen workspaces. Each task is devoted to a workspace, where users can switch to other tasks using either the overview or the doors between workspaces for rapid transitions.
Reference: 14. <author> Kahn, M., J., Charnock, E., </author> <title> How to prevent Window-its in your Graphical Interface ?, Proc. </title> <booktitle> Silicon Valley Ergonomics Conference & Exposition, </booktitle> <address> ErgoCon'95, </address> <year> (1995), </year> <pages> pp. 18-25. </pages>
Reference-contexts: This problem is most apparent in hyper-text browsers and CAD systems, where each subwindow is either a link followed or part of the system under design. In current approaches, users have to deal with each window separately when organizing their desktop. Kahn et al. <ref> [14] </ref> observed a similar phenomenon and called the presence of too many open windows Windowitis. They observed that in Windowitis situations the users become quickly disoriented, lose the relationships that exist between windows due to loss of spatial cues, and become unproductive in completing their tasks.
Reference: 15. <author> Lifshitz, J., Shneiderman, B., </author> <title> Multi-window browsing strategies for hypertext traversal, </title> <booktitle> Proc. 30th Annual Technical Symposium of the Washington, DC Chapter of the ACM, </booktitle> <year> (1991), </year> <pages> pp. 121-131. </pages>
Reference: 16. <author> Malone, T. W., </author> <title> How do people organize their desks? Implications for the design of office automation systems, </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 1, </volume> <pages> pp. 99-112. </pages>
Reference-contexts: As stated by Card et al. [6], the computer display is used not only as a communication medium but also as an external memory for users. Thus having all the necessary information on the screen and filtering out unnecessary windows is a required property of windowing systems. Malone <ref> [16] </ref> observed that the way people organize papers on their desk helps them to structure their work and reminds them of unfinished tasks. As Funke et al. [11] suggested, windowing systems should support users to integrate, organize, compare, distill, summarize, and apply the information. <p> The layout provides the user with an overview of all correspondence, where users can pick any category and work on it. Multi-window operations: Typically, people organize papers on their desk as piles, and move all of them simultaneously. Malone <ref> [16] </ref> found out that users like to group items spatially. We claim that providing multi-window operations on groups of windows can decrease the cognitive load on users by decreasing the number of window operations.
Reference: 17. <author> Myers, B., </author> <title> Window interfaces: A taxonomy of window manager user interfaces, </title> <journal> IEEE Computer Graphics and Applications 8, </journal> <volume> 5, </volume> <month> (September </month> <year> 1988), </year> <pages> pp. 65-84. </pages>
Reference-contexts: CIWM [11] uses automated window management. Although automatic strategies in window management relieve the burden of window management, direct user control is preferable as in most HCI artifacts. Myers has an excellent taxonomy of these early windowing systems <ref> [17] </ref>. CONCLUSION We have attempted to determine the extended requirements of multi-window systems adjusted for today's applications and technology. Characteristics of modern applications demand more functionality than what is available in today's window-ing environments.
Reference: 18. <author> Norman, K. L., Weldon, L. J., Shneiderman, B., </author> <title> Cognitive layouts of windows and multiple screens for user interfaces, </title> <journal> International Journal of Man-Machine Studies 25, </journal> <year> (1986), </year> <pages> pp. 229-248. </pages>
Reference: 19. <author> Plaisant, C., Shneiderman, B., </author> <title> Organization overviews and role management: Inspiration for future desktop environments, </title> <booktitle> Proc. IEEE 4th Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises, </booktitle> <month> (April </month> <year> 1995), </year> <pages> pp. 14-22. </pages>
Reference-contexts: This operation is particularly useful when removing a number of windows from a group. SCENARIOS Personal Role Manager: The Personal Role Manager (PRM) provides users with a role-centered environment, where people can structure the screen layout and the interface tools to match their roles <ref> [22, 19] </ref>. The goal is to simplify and speed the coordination of tasks. Thus, fast access to partners, schedules, tools, and documents regarding each role, and fast switching between roles is a requirement of PRM. student onto a hierarchical window organization.
Reference: 20. <author> Plaisant, C., Carr, D., Shneiderman, B., </author> <title> Image browsers taxonomy and design guidelines, </title> <journal> IEEE Software 12, </journal> <volume> 2, </volume> <month> (March </month> <year> 1995), </year> <pages> pp. 21-32. </pages>
Reference: 21. <author> Shneiderman, B., </author> <title> Designing the User Interface: Strategies for Effective Human-Computer Interaction: Second Edition, </title> <publisher> Addison Wesley Publ. Co., </publisher> <address> Reading, MA, </address> <year> (1992), </year> <month> Ch.9. </month>
Reference-contexts: Contents of short-term memory are not only affected by the time that passes, but also by the type of work carried out during that time period. Since window housekeeping is an activity related to the computer domain and not to the users' task <ref> [21] </ref>, the time spent on window management substantially increases the disruptive effect on the short-term memory, thus implies a non-linear cost curve as the number of windows per task increases.
Reference: 22. <author> Shneiderman, B., Plaisant, C., </author> <title> The future of graphic user interfaces: Personal role managers, People and Computers IX, </title> <publisher> Cambridge University Press, </publisher> <month> (Aug </month> <year> 1994), </year> <pages> pp. 3-8. </pages>
Reference-contexts: This operation is particularly useful when removing a number of windows from a group. SCENARIOS Personal Role Manager: The Personal Role Manager (PRM) provides users with a role-centered environment, where people can structure the screen layout and the interface tools to match their roles <ref> [22, 19] </ref>. The goal is to simplify and speed the coordination of tasks. Thus, fast access to partners, schedules, tools, and documents regarding each role, and fast switching between roles is a requirement of PRM. student onto a hierarchical window organization.
Reference: 23. <author> Smith, D. C. et al., </author> <title> The Star user interface: An overview, </title> <booktitle> Proc. National Computer Conf., </booktitle> <publisher> AFIPS Press, </publisher> <address> Arlington, VA, </address> <year> (1982), </year> <pages> pp. 515-528. </pages>
Reference-contexts: The Dylan programming environment uses a pane-based window system [10], which allows both horizontal and vertical panes, with a mechanism to create links between panes. The Dylan programming environment does not support multiple window operations and hierarchical organization of windows. Xerox/Star <ref> [23] </ref>, RTL/CRTL [8, 9], and Windows 1.0 also used tiling, but hierarchical organization and multiple operations were not provided. CIWM [11] uses automated window management. Although automatic strategies in window management relieve the burden of window management, direct user control is preferable as in most HCI artifacts.
Reference: 24. <author> Teitelman, W., </author> <title> A tour through CEDAR, </title> <journal> IEEE Software, </journal> <volume> 1, 2, </volume> <month> (Apr </month> <year> 1984), </year> <pages> pp. 44-73. </pages>
Reference-contexts: There is no mechanism which allows multi-window operations. Tasks are restricted to fit in a two-level hierarchy: the overview level, and the workspace level. The Cedar <ref> [24] </ref> system also uses tiling, where windows are organized in two columns of arbitrary number of windows. It also uses space-filling tiled layout, but proportional resizing is not provided. Windows can not be grouped hierarchically and multiple window operations are not provided.
References-found: 24

