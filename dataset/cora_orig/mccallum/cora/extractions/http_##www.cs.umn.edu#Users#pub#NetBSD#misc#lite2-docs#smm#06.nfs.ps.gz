URL: http://www.cs.umn.edu/Users/pub/NetBSD/misc/lite2-docs/smm/06.nfs.ps.gz
Refering-URL: http://www.cs.umn.edu/Users/pub/NetBSD/misc/lite2-docs/smm/
Root-URL: http://www.cs.umn.edu
Title: The 4.4BSD NFS Implementation  
Author: Rick Macklem 
Affiliation: University of Guelph  
Abstract: The 4.4BSD implementation of the Network File System (NFS) 1 is intended to interoperate with other NFS Version 2 Protocol (RFC1094) implementations but also allows use of an alternate protocol that is hoped to provide better performance in certain environments. This paper will informally discuss these various protocol features and their use. There is a brief overview of the implementation followed by several sections on various problem areas related to NFS and some hints on how to deal with them. Not Quite NFS (NQNFS) is an NFS like protocol designed to maintain full cache consistency between clients in a crash tolerant manner. It is an adaptation of the NFS protocol such that the server supports both NFS and NQNFS clients while maintaining full consistency between the server and NQNFS clients. It borrows heavily from work done on Spritely-NFS [Srinivasan89], but uses Leases [Gray89] to avoid the need to recover server state information after a crash. 
Abstract-found: 1
Intro-found: 1
Reference: [Baker91] <author> Mary Baker and John Ousterhout, </author> <title> Availability in the Sprite Distributed File System, In Operating System Review, </title> <booktitle> (25)2, pg. </booktitle> <pages> 95-98, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: After this, the server simply services requests in a manner similar to NFS. In an effort to minimize the effect of "recovery storms" <ref> [Baker91] </ref>, the server replies try_again_later to the RPCs it is not yet ready to service.
Reference: [Baker91a] <author> Mary Baker, </author> <title> Private Email Communication, </title> <month> May </month> <year> 1991. </year>
Reference: [Burrows88] <author> Michael Burrows, </author> <title> Efficient Data Sharing, </title> <type> Technical Report #153, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <month> Dec. </month> <year> 1988. </year>
Reference: [Gray89] <author> Cary G. Gray and David R. Cheriton, Leases: </author> <title> An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency, </title> <booktitle> In Proc. of the Twelfth ACM Symposium on Operating Systems Principals, </booktitle> <address> Litchfield Park, AZ, </address> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: This protocol uses 64bit file offsets and sizes, an access rpc, an append option on the write rpc and extended file attributes to support 4.4BSD file system functionality more fully. It also makes use of a variant of short term leases <ref> [Gray89] </ref> with delayed write client caching, in an effort to provide full cache consistency and better performance. This protocol is available between 4.4BSD systems only and is used when the -q mount option is specified. <p> It is an adaptation of the NFS protocol such that the server supports both NFS and NQNFS clients while maintaining full consistency between the server and NQNFS clients. This section borrows heavily from work done on Spritely-NFS [Srinivasan89], but uses Leases <ref> [Gray89] </ref> to avoid the need to recover server state information after a crash. The reader is strongly encouraged to read these references before trying to grasp the material presented here. 9.1.
Reference: [Howard88] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham and Michael J. West, </author> <title> Scale and Performance in a Distributed File System, </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> (6)1, </volume> <pages> pg 51-81, </pages> <month> Feb. </month> <year> 1988. </year>
Reference: [Juszczak89] <author> Chet Juszczak, </author> <title> Improving the Performance and Correctness of an NFS Server, </title> <booktitle> In Proc. Winter 1989 USENIX Conference, pg. </booktitle> <pages> 53-63, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: resource allocation situations in the BSD kernel where the termination signal will be ignored and the process will not terminate. 7 At best, an extraneous RPC request retransmit increases the load on the server and at worst can result in damaged files on the server when non-idempotent RPCs are redone <ref> [Juszczak89] </ref>. 8 6 IP fragments for an Ethernet, which has an maximum transmission unit of 1500bytes. 9 After the first retransmit timeout, the initial interval is backed off exponentially. 10 Even 0.1% of the total RPCs is probably significant. <p> Unfortunately, a good NFS server implementation will use a ``recent request cache'' <ref> [Juszczak89] </ref> that will suppress the extraneous replies. A large value for Retries indicates a problem, but it could be any of: g a too aggressive RTO estimate g an overloaded NFS server g IP fragments being dropped (gateway, client or server) and requires further investigation.
Reference: [Keith90] <author> Bruce E. Keith, </author> <title> Perspectives on NFS File Server Performance Characterization, </title> <booktitle> In Proc. Summer 1990 USENIX Conference, pg. </booktitle> <pages> 267-277, </pages> <address> Anaheim, CA, </address> <month> June </month> <year> 1990. </year>
Reference: [Kent87] <author> Christopher. A. Kent, </author> <title> Cache Coherence in Distributed Systems, </title> <type> Research Report 87/4, </type> <institution> Digital Equipment Corporation Western Research Laboratory, </institution> <month> April </month> <year> 1987. </year> <booktitle> SMM:06-14 The 4.4BSD NFS Implementation </booktitle>
Reference: [Kent87a] <author> Christopher. A. Kent and Jeffrey C. Mogul, </author> <title> Fragmentation Considered Harmful, </title> <type> Research Report 87/3, </type> <institution> Digital Equipment Corporation Western Research Laboratory, </institution> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: If one fragment is lost/damaged in transit, the entire RPC must be retransmitted and redone. This problem can be exaggerated by a network interface on the receiver that cannot handle the reception of back to back network packets. <ref> [Kent87a] </ref> There are several tuning mount options on the client side that can prove useful when trying to alleviate performance problems related to UDP RPC transport. The options -r=num and -w=num specify the maximum read or write data size respectively.
Reference: [Macklem91] <author> Rick Macklem, </author> <title> Lessons Learned Tuning the 4.3BSD Reno Implementation of the NFS Protocol, </title> <booktitle> In Proc. Winter USENIX Conference, pg. </booktitle> <pages> 53-64, </pages> <address> Dallas, TX, </address> <month> January </month> <year> 1991. </year>
Reference: [Nelson88] <author> Michael N. Nelson, Brent B. Welch, and John K. Ousterhout, </author> <title> Caching in the Sprite Network File System, </title> <journal> ACM Transactions on Computer Systems (6)1 pg. </journal> <pages> 134-154, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The reader is strongly encouraged to read these references before trying to grasp the material presented here. 9.1. Overview The protocol maintains cache consistency by using a somewhat Sprite <ref> [Nelson88] </ref> like protocol, but is based on short term leases 17 instead of hard state information about open files. The basic principal is that the protocol will disable client caching of a file whenever that file is write shared 18 .
Reference: [Nowicki89] <author> Bill Nowicki, </author> <title> Transport Issues in the Network File System, </title> <journal> In Computer Communication Review, pg. </journal> <volume> 16-20, Vol. 19, Number 2, </volume> <month> April </month> <year> 1989. </year>
Reference: [Ousterhout90] <author> John K. Ousterhout, </author> <title> Why Aren't Operating Systems Getting Faster As Fast as Hardware? In Proc. </title> <booktitle> Summer 1990 USENIX Conference, pg. </booktitle> <pages> 247-256, </pages> <address> Anaheim, CA, </address> <month> June </month> <year> 1990. </year>
Reference: [Pendry93] <author> Jan-Simon Pendry, </author> <title> 4.4 BSD Automounter Reference Manual, In src/usr.sbin/amd/doc directory of 4.4 BSD distribution tape. </title>
Reference-contexts: This implies that the server will only see the first num groups that the user is in, which can cause some accessibility problems. For sites that have many NFS servers, amd <ref> [Pendry93] </ref> is a useful administration tool. It also reduces the number of actual NFS mount points, alleviating problems with commands such as df (1) that hang when any of the NFS servers is unreachable. 3.
Reference: [Reid90] <author> Jim Reid, N(e)FS: </author> <title> the Protocol is the Problem, </title> <booktitle> In Proc. Summer 1990 UKUUG Conference, </booktitle> <address> London, England, </address> <month> July </month> <year> 1990. </year>
Reference: [Sandberg85] <author> Russel Sandberg, David Goldberg, Steve Kleiman, Dan Walsh, and Bob Lyon, </author> <title> Design and Implementation of the Sun Network filesystem, </title> <booktitle> In Proc. Summer 1985 USENIX Conference, </booktitle> <pages> pages 119-130, </pages> <address> Portland, OR, </address> <month> June </month> <year> 1985. </year>
Reference: [Schroeder85] <author> Michael D. Schroeder, David K. Gifford and Roger M. Needham, </author> <title> A Caching File System For A Programmer's Workstation, </title> <booktitle> In Proc. of the Tenth ACM Symposium on Operating Systems Principals, pg. </booktitle> <pages> 25-34, </pages> <address> Orcas Island, WA, </address> <month> Dec. </month> <year> 1985. </year>
Reference: [Srinivasan89] <author> V. Srinivasan and Jeffrey. C. Mogul, Spritely NFS: </author> <title> Implementation and Performance of Cache-Consistency Protocols, </title> <type> Research Report 89/5, </type> <institution> Digital Equipment Corporation Western Research Laboratory, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: It is an adaptation of the NFS protocol such that the server supports both NFS and NQNFS clients while maintaining full consistency between the server and NQNFS clients. This section borrows heavily from work done on Spritely-NFS <ref> [Srinivasan89] </ref>, but uses Leases [Gray89] to avoid the need to recover server state information after a crash. The reader is strongly encouraged to read these references before trying to grasp the material presented here. 9.1.
Reference: [Steiner88] <author> Jennifer G. Steiner, Clifford Neuman and Jeffrey I. Schiller, </author> <title> Kerberos: An Authentication Service for Open Network Systems, </title> <booktitle> In Proc. Winter 1988 USENIX Conference, </booktitle> <address> Dallas, TX, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: The nfsd master daemon forks off children that enter the kernel via. the nfssvc system call. The children normally remain kernel resident, providing a process context for the NFS RPC servers. The only exception to this is when a Kerberos <ref> [Steiner88] </ref> ticket is received and at that time the nfsd exits the kernel temporarily to verify the ticket via. the Kerberos libraries and then returns to the kernel with the results. (This only happens for Kerberos mount points as described further under Security.) Meanwhile, the master nfsd waits to accept new
Reference: [Stern] <author> Hal Stern, </author> <title> Managing NFS and NIS, </title> <publisher> O'Reilly and Associates, </publisher> <address> ISBN 0-937175-75-7. </address>
Reference: [Sun87] <author> Sun Microsystems Inc., XDR: </author> <title> External Data Representation Standard, </title> <institution> RFC1014, Network Information Center, SRI International, </institution> <month> June </month> <year> 1987. </year>
Reference: [Sun88] <author> Sun Microsystems Inc., </author> <title> RPC: Remote Procedure Call Protocol Specification Version 2, </title> <institution> RFC1057, Network Information Center, SRI International, </institution> <month> June </month> <year> 1988. </year>
Reference: [Sun89] <author> Sun Microsystems Inc., NFS: </author> <title> Network File System Protocol Specification, ARPANET Working Group Requests for Comment, DDN Network Information Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, </address> <month> March </month> <year> 1989, </year> <month> RFC-1094. </month>
Reference-contexts: For the current prototype, the only solution is to modify programs writing important file (s) to call fsync and check for an error return from it instead of close. 9.4. Protocol Details The protocol specification is identical to that of NFS <ref> [Sun89] </ref> except for the following changes. g RPC Information Program Number 300105 Version Number 1 g Readdir_and_Lookup RPC struct readdirlookargs - fhandle file; nfscookie cookie; unsigned count; unsigned duration; -; struct entry - unsigned cachable; unsigned duration; modifyrev rev; fhandle entry_fh; nqnfs_fattr entry_attrib; unsigned fileid; filename name; nfscookie cookie; entry *nextentry;
References-found: 23

