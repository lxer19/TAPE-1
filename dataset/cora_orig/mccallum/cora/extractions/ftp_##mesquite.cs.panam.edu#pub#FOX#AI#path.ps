URL: ftp://mesquite.cs.panam.edu/pub/FOX/AI/path.ps
Refering-URL: http://www.cs.panam.edu/TR/cs-tr.html
Root-URL: 
Email: Email: fox@cs.panam.edu tonyg@hiline.net mlnelson@panam.edu  
Phone: Phone: (956) 381-3635  
Title: A Two-Dimensional Path Planning Algorithm  
Author: Richard Fox, Antonio Garcia Jr. and Michael Nelson 
Address: Edinburg, TX 78539, USA  
Affiliation: Department of Computer Science The University of Texas Pan American  
Abstract: Path planning is a necessary component of any autonomous vehicle. The task is one of finding a course that takes the vehicle from its current location to a destination avoiding obstacles that might damage or divert the vehicle. There are many forms of path planning algorithms such as those that pregenerate a path versus those that perform reactive run-time planning. This paper presents a two-dimensional pregenerating path planning algorithm that models the path as a line and compares a list of obstacles to this line to determine any collisions. Collisions are processed by selecting a point outside of the obstacle and recursively generating two new paths that avoid the collision by going around the obstacle. This paper will first describe the STESCA control architecture for autonomous vehicles and then consider path planning. A few other path planning algorithms are described. This is followed by details of the algorithm developed in this research. The paper then presents a number of examples. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Proceedings of the 1995 IEEE/RSJ International Conference on Intelligent Robots and Systems, </institution> <address> Volumes 1-3. </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Introduction Path planning is a fundamental task of autonomous vehicles. A wide variety of algorithms exist that address different factors of path planning (see for instance <ref> [1] </ref>).
Reference: [2] <author> D. Z. Chen, R. J. Szczerba, and J. J. Urhan Jr. </author> <title> Planning conditional shortest paths through an unknown environment: A framed-quadtree approach. </title> <booktitle> In Proceedings of the 1995 IEEE/RSJ International Conference on Intelligent Robots and System Human Interaction and Cooperation, </booktitle> <volume> volume 3, </volume> <pages> pages 33-38. </pages> <publisher> IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: Two potential problems with this algorithm, from the point of view of an autonomous vehicle, are: (1) what if the obstacle is moving? and (2) what if the obstacle should not be approached at all (e.g. a mine)? A third algorithm is based on a framed-quad-tree representation <ref> [2] </ref>. The framed-quad-tree is a variation of a general tree where each node of the tree represents a quadrant of space. Each node contains pointers to its four subregions plus a value as to whether this quadrant is passable or not. A passable quadrant has no obstacles.
Reference: [3] <author> N. Dale and S. C. Lilly. </author> <title> Pascal Plus Data Structures. </title> <publisher> Heath Publishing, </publisher> <address> fourth edition edition, </address> <year> 1995. </year>
Reference-contexts: If a three-dimensional space were used, this complexity would increase a great deal more. Other array-based searching algorithms might also be employed such as a solution used in finding the exit to a maze. Unfortunately, the complexity of such algorithms is intractable being O (2 n ) <ref> [3] </ref>. Another approach has been taken in an algorithm referred to as Distbug [5]. This algorithm does not use any kind of world model but instead has a simple principle of moving in a straight line towards the goal until a collision occurs.
Reference: [4] <author> E. W. Dijkstra. </author> <title> A note on two problems in connection with graphs. </title> <address> pages 269-272. </address>
Reference-contexts: For instance, open spaces could be called nodes in a graph with edges denoting the physical distances between each point and a lack of edges between two points representing an obstacle. One could then employ Dijkstra's Shortest 2 Path algorithm <ref> [4] </ref> to find the shortest path between the two points of interest in the graph. The generated path would not go through obstacles because Dijkstra's algorithm will only work with the available edges which are open spaces.
Reference: [5] <author> I. Kamon and E. Rivlin. </author> <title> Sesnory based motion planning with global proofs. </title> <booktitle> In Proceedings of the 1995 IEEE/RSJ International Conference on Intelligent Robots and System Human Interaction and Cooperation, </booktitle> <volume> volume 2, </volume> <pages> pages 435-440. </pages> <publisher> IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: Other array-based searching algorithms might also be employed such as a solution used in finding the exit to a maze. Unfortunately, the complexity of such algorithms is intractable being O (2 n ) [3]. Another approach has been taken in an algorithm referred to as Distbug <ref> [5] </ref>. This algorithm does not use any kind of world model but instead has a simple principle of moving in a straight line towards the goal until a collision occurs.
Reference: [6] <author> M. L. Nelson. </author> <title> Object-oriented software control architecture for robotic vehicles. </title> <type> Technical report, </type> <institution> The University of Texas Pan American Reseach Proposal - NASA Proposal NRA 96-OEOP-1, Edinburg, TX, </institution> <month> Feb., </month> <year> 1996. </year>
Reference-contexts: While it may take a team of scientists and engineers to build and maintain a robotic vehicle, it should not take such a team to operate the vehicle on a daily basis. The current mission specification system <ref> [6] </ref> requires the user to specify the vehicle's path in detail. In most situations, however, the important aspects of a mission occur after the vehicle reaches some point. <p> Changes envisioned for 9 the algorithm are to move it to a three-dimensional space, to allow for heuristics and to have more realistically shaped obstacles. Acknowledgments Partial funding for this project has been provided under NASA grant OEOP Faculty Award for Research <ref> [6] </ref>. Additional funding has been obtained from a University of Texas Pan American Faculty Research Grant.
Reference: [7] <author> M. L. Nelson and V. Rohn. </author> <title> Mission specification for autonomous underwater vehicles. </title> <booktitle> In Proceedings of Oceans '96, </booktitle> <pages> pages 407-410. </pages> <publisher> MTS/IEEE Press, </publisher> <month> September, </month> <year> 1996. </year>
Reference-contexts: The STESCA Control Architecture The STESCA (Software-Tactical-Execution Software Control Architecture) project being undertaken at the University of Texas Pan American is to implement a new control approach for autonomous robotic vehicles in general <ref> [7] </ref>. In the first phase of the project, STESCA is being implemented for the Naval Postgraduate School (NPS - Monterey, CA) Phoenix Autonomous Underwater Vehicle (AUV) [8]. In the second phase of the project, STESCA will be implemented on a wheeled land-based robotic vehicle.
Reference: [8] <author> NPS AUV Web Site. </author> <title> http : ==www:cs:nps:navy:mil=research=auv=about auv:html. </title> <type> Technical report, </type> <institution> Naval Postgraduate School, </institution> <address> Monterey, CA, </address> <year> 1997. </year> <month> 10 </month>
Reference-contexts: In the first phase of the project, STESCA is being implemented for the Naval Postgraduate School (NPS - Monterey, CA) Phoenix Autonomous Underwater Vehicle (AUV) <ref> [8] </ref>. In the second phase of the project, STESCA will be implemented on a wheeled land-based robotic vehicle. The three levels of STESCA are the Strategic, Tactical, and Execution levels. The top Strategic level is used to specify a mission for the vehicle.
References-found: 8

