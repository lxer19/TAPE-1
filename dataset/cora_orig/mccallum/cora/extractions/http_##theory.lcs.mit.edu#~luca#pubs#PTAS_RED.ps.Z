URL: http://theory.lcs.mit.edu/~luca/pubs/PTAS_RED.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~luca/papers.html
Root-URL: 
Email: E-mail: fpiluc,trevisang@dsi.uniroma1.it.  
Title: On Approximation Scheme Preserving Reducibility and Its Applications Extended abstract  
Author: Pierluigi Crescenzi and Luca Trevisan 
Address: Via Salaria 113, 00198 Roma, Italy  
Affiliation: Dipartimento di Scienze dell'Informazione Universita degli Studi di Roma "La Sapienza"  
Abstract: In this paper we generalize the notion of polynomial-time approximation scheme preserving reducibility, called PTAS-reducibility, introduced in [4]. As a first application of this generalization, we prove the APX-completeness of a polynomially bounded optimization problem, that is, an APX problem whose measure function is bounded by a polynomial in the length of the instance and such that any APX problem is reducible to it. As far as we know, no such problem was known before. This result has been recently used in [10] to show that several natural optimization problem are APX-complete, such as Max Cut, Max Sat, Min Node Cover, and Min -TSP. Successively, we apply the notion of APX-completeness to the study of the relative complexity of evaluating an *-approximate value and computing an *-approximate solution for any *. We first show that if P 6= NP " coNP then the former question can be easier than the latter even if the optimization problem is NP-hard. We therefore give strong evidence that if an optimization problem is APX-complete then the two questions are both hard.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Arora S., Lund C., Motwani R., Sudan M., Szegedy M.: </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> Proc. 33-rd Ann. IEEE Symp. on Foundations of Computer Science (1992) 14-23 </booktitle>
Reference-contexts: We shall now see that, whenever an optimization problem is APX-complete, both evaluating *-approximate values and computing *-approximate solutions for any * are computationally hard. To this aim, let us firts recall a result obtained in <ref> [1] </ref>. Theorem 13 [1]. Let L be a language in NP. Then a rational * 2 (0; 1) exists such that, for any x, a CNF-formula ' x is computable in polynomial time for which the following hold. 1. If x 2 L then ' x is satisfiable. 2. <p> We shall now see that, whenever an optimization problem is APX-complete, both evaluating *-approximate values and computing *-approximate solutions for any * are computationally hard. To this aim, let us firts recall a result obtained in <ref> [1] </ref>. Theorem 13 [1]. Let L be a language in NP. Then a rational * 2 (0; 1) exists such that, for any x, a CNF-formula ' x is computable in polynomial time for which the following hold. 1. If x 2 L then ' x is satisfiable. 2.
Reference: 2. <author> Ausiello G., Crescenzi P., Protasi M.: </author> <title> Approximate Solution of NP Optimiza--tion Problems Technical Report SI/RR-94/03, </title> <institution> Universita di Roma "La Sapienza" (1994) </institution>
Reference-contexts: Clearly, PTAS APX. It is also well-known that this containment is strict if and only if P 6= NP. An extensive survey of results on these two classes is contained in <ref> [2] </ref>. Definition 6.
Reference: 3. <author> Crescenzi P., Kann V., Trevisan L.: </author> <title> On the structure of the classes NPO and APX. </title> <note> Manuscript in preparation (1994) </note>
Reference-contexts: This observation allows us to show that the existence of a `natural' APX-intermediate problem is strictly related to the existence of many-to-one one-way functions [5] (thus partially solving an open question raised in [4]). More recently, however, it has been shown in <ref> [3] </ref> that the Bin Packing problem is APX-intermediate unless the polynomial-time hierarchy collapses.
Reference: 4. <author> Crescenzi P., Panconesi A.: </author> <title> Completeness in approximation classes. </title> <note> Information and Computation 93 (1991) 241-262 </note>
Reference-contexts: It is well-known that PTAS is strictly contained in APX if and only if P 6= NP. ? Research partially supported by the MURST project Algoritmi, Modelli di Calcolo, Strutture Informative. Several notions of approximation scheme preserving reducibilities have been introduced in <ref> [4, 11, 12] </ref> with the aim of establishing hardness and completeness results in APX and of deriving proofs of intractability of arbitrary approximation from them (see also Chap. 3 of [9] for a survey on the notion of reducibility among optimization problems). <p> In particular, in <ref> [4] </ref> an approximation scheme preserving reducibility, called PTAS-reducibility, was defined and the existence of APX-complete problems was shown. Independently, a more restricted kind of reducibility, called L-reducibility, was introduced in [12] and several completeness results for a subclass of APX were proved. <p> R B (f (x; *); y) c (*) implies R A (x; g (x; y; *)) * : The triple (f; g; c) is said to be a PTAS-reduction from A to B. Remark. The PTAS-reducibility is a generalization of a reducibility introduced in <ref> [4] </ref> and called P-reducibility. Indeed, the only difference between the PTAS-reducibility and the P-reducibility is the fact that f and g may depend on *. Moreover, in [12] a different kind of reducibility between optimization problems was defined which is a restriction of the P-reducibility and is called L-reducibility. <p> In [11] a reducibility slightly stronger than the PTAS-reducibility was defined but no APX-completeness result was proved. The following problem, called Max Bounded Weighted Sat or, simply, MBWS, has been instead shown to be APX-complete in <ref> [4] </ref>. 1. An instance is a Boolean formula in conjunctive normal form (in short, CNF formula) ' with variables x 1 ; : : : ; x n of weights w 1 ; : : : ; w n such that W i=1 where W is an integer. 2. <p> This observation allows us to show that the existence of a `natural' APX-intermediate problem is strictly related to the existence of many-to-one one-way functions [5] (thus partially solving an open question raised in <ref> [4] </ref>). More recently, however, it has been shown in [3] that the Bin Packing problem is APX-intermediate unless the polynomial-time hierarchy collapses.
Reference: 5. <author> Crescenzi P., Silvestri R.: </author> <title> Relative complexity of evaluating the optimum cost and constructing the optimum for maximization problems. </title> <note> Information Processing Letters 33 (1990) 221-226 </note>
Reference-contexts: It is well-known, for example, that checking whether an array is already sorted is simpler than sorting it. Valiant proved that, indeed, the two questions are equivalent if and only if P= NP. In [13] and, successively, in <ref> [5] </ref> the relative complexity of evaluating the optimum cost and constructing an optimum solution for optimization problems was analyzed. For example, we can either compute the size of a maximum clique in a given graph or list the nodes of a maximum clique. <p> An interesting consequence of Theorem 14 is that if a certain approx-imable problem belongs to ncPTAS PTAS, then it is APX-intermediate unless NP = coNP. This observation allows us to show that the existence of a `natural' APX-intermediate problem is strictly related to the existence of many-to-one one-way functions <ref> [5] </ref> (thus partially solving an open question raised in [4]). More recently, however, it has been shown in [3] that the Bin Packing problem is APX-intermediate unless the polynomial-time hierarchy collapses.
Reference: 6. <author> Downey R.G., </author> <title> Fellows M.R.: Fixed parameter intractability. </title> <booktitle> Proc. 7-th Structure in Complexity Theory (1992) 36-49 </booktitle>
Reference-contexts: The notion of fixed parameter complexity and of class SP is mainly due to Downey and Fellows (for an introduction to these ideas see <ref> [6] </ref>). The following theorem relates the fixed parameter complexity of the languages in L (A) to the complexity of evaluating approximate values. Theorem 18.
Reference: 7. <author> Hemaspaandra, L.A.: </author> <title> Complexity theory column 5: the not-ready-for-prime-time conjectures. </title> <journal> SIGACT News (1994) </journal>
Reference-contexts: This latter event seems to be unlikely and, in any case, the relationship between these two classes is a well-known open question in complexity theory <ref> [7] </ref>. 3 Evaluating, Constructing, and APX-Completeness Assume that P 6= NP " coNP. Let L 2 NP " coNP P and let N T and N T c be the non-deterministic Turing machines deciding L and L c in polynomial time, respectively.
Reference: 8. <author> Johnson D.S.: </author> <title> Approximation algorithms for combinatorial problems. </title> <institution> J. Comput. and Syst. </institution> <month> Sci.9 </month> <year> (1974) </year> <month> 256-278 </month>
Reference-contexts: For this reason when we have to solve problems of this kind we must restrict ourselves to compute approximate solutions, that is, solutions whose performance ratio is guaranteed to be bounded by a constant <ref> [8] </ref>. In this paper, we focus our attention on the two classes APX and PTAS, that is, the class of problems that are approximable within a factor * for a given * and the class of problems that are approximable within any factor *. <p> As a consequence of this result, it follows that Max Sat, that is, the problem of maximizing the number of satisfied clauses in a given CNF-formula, does not admit a polynomial-time approximation scheme unless P= NP (note that it is well-known that this problem is approximable <ref> [8, 15] </ref>). Let A be an APX-complete problem and let (f; g; c) be a PTAS-reduction from Max Sat to A. Moreover, let L be an NP-complete language. <p> For any CNF-formula ', for any pair (t; y) and for any * 2 (0; 1), g ('; (t; y); *) = t apx if y is a rejecting computation, t otherwise where t apx denotes a 1/2-approximate solution of ' for Max Sat (see <ref> [8] </ref>). 3. For any * 2 (0; 1), c (*) = *.
Reference: 9. <author> Kann V.: </author> <title> On the approximability of NP-complete optimization problems. </title> <type> PhD thesis, </type> <institution> Department of Numerical Analysis and Computing Science, Royal Institute of technology, </institution> <address> Stockholm (1992) </address>
Reference-contexts: Several notions of approximation scheme preserving reducibilities have been introduced in [4, 11, 12] with the aim of establishing hardness and completeness results in APX and of deriving proofs of intractability of arbitrary approximation from them (see also Chap. 3 of <ref> [9] </ref> for a survey on the notion of reducibility among optimization problems). In particular, in [4] an approximation scheme preserving reducibility, called PTAS-reducibility, was defined and the existence of APX-complete problems was shown.
Reference: 10. <author> Khanna S., Motwani R., Sudan M., Vazirani U.: </author> <title> On syntactic versus computational views of approximability. </title> <booktitle> Proc. </booktitle> <address> 35-th Ann. </address> <note> IEEE Symp. on Foundations of Computer Science (1994) to appear </note>
Reference-contexts: As far as we know, this is the first example of such problems. This result has been recently used in <ref> [10] </ref> in order to prove the APX-completeness of several natural optimization problems, such as Max Cut, Max Sat, Min Node Cover, and Min -TSP. <p> as follows m MPBWS (x; t ) = n + n (m MBWS (x; t ) W ) W where n denotes the number of variables and m MBWS and m MPBWS denote the measure functions of MBWS and MPBWS, respectively (this `scaled' version of MPBWS was first suggested in <ref> [10] </ref>). Observe that according to the above definition, for any instance x of MPBWS and for any truth-assignment t , m MPBWS (x; t ) 2n, that is, this problem is indeed polynomially bounded. Theorem 10. MBWS is PTAS-reducible to MPBWS. Proof. <p> MPBWS is APX-complete. Proof. It follows from the APX-completeness of MBWS and from the above theorem. ut As far as we know, this is the first example of a polynomially bounded APX-complete problem. By using this result, in <ref> [10] </ref> several other important problems are shown to be APX-complete, such as Max Cut, Max Sat, Min Node Cover, and Min -TSP. Thus, each of these problems is the hardest within APX and, as already known, does not admit a polynomial-time approximation scheme unless P= NP.
Reference: 11. <author> Orponen P., Mannila H.: </author> <title> On approximation preserving reductions: complete problems and robust measures. </title> <type> Technical Report C-1987-28, </type> <institution> Department of Computer Science, University of Helsinki (1987) </institution>
Reference-contexts: It is well-known that PTAS is strictly contained in APX if and only if P 6= NP. ? Research partially supported by the MURST project Algoritmi, Modelli di Calcolo, Strutture Informative. Several notions of approximation scheme preserving reducibilities have been introduced in <ref> [4, 11, 12] </ref> with the aim of establishing hardness and completeness results in APX and of deriving proofs of intractability of arbitrary approximation from them (see also Chap. 3 of [9] for a survey on the notion of reducibility among optimization problems). <p> Then T A (x; *) = g (x; T B (f (x; *); c (*)); *) is a polynomial-time approximation scheme for A. ut Definition 9. An NPO problem A in APX is APX-complete if, for any other problem B in APX, B A. In <ref> [11] </ref> a reducibility slightly stronger than the PTAS-reducibility was defined but no APX-completeness result was proved. The following problem, called Max Bounded Weighted Sat or, simply, MBWS, has been instead shown to be APX-complete in [4]. 1.
Reference: 12. <author> Papadimitriou C.H., Yannakakis M.: </author> <title> Optimization, approximation, and complexity classes. </title> <institution> J. Comput. and Syst. Sci. </institution> <month> 43 </month> <year> (1991), </year> <pages> 425-440 </pages>
Reference-contexts: It is well-known that PTAS is strictly contained in APX if and only if P 6= NP. ? Research partially supported by the MURST project Algoritmi, Modelli di Calcolo, Strutture Informative. Several notions of approximation scheme preserving reducibilities have been introduced in <ref> [4, 11, 12] </ref> with the aim of establishing hardness and completeness results in APX and of deriving proofs of intractability of arbitrary approximation from them (see also Chap. 3 of [9] for a survey on the notion of reducibility among optimization problems). <p> In particular, in [4] an approximation scheme preserving reducibility, called PTAS-reducibility, was defined and the existence of APX-complete problems was shown. Independently, a more restricted kind of reducibility, called L-reducibility, was introduced in <ref> [12] </ref> and several completeness results for a subclass of APX were proved. In Sect. 2 we generalize the PTAS-reducibility and prove the existence of polynomially bounded APX-complete problems, that is, APX-complete problems whose measure function is bounded by a polynomial in the length of the input. <p> Remark. The PTAS-reducibility is a generalization of a reducibility introduced in [4] and called P-reducibility. Indeed, the only difference between the PTAS-reducibility and the P-reducibility is the fact that f and g may depend on *. Moreover, in <ref> [12] </ref> a different kind of reducibility between optimization problems was defined which is a restriction of the P-reducibility and is called L-reducibility. Indeed, an L-reduction turns out to be a P-reduction with c (*) = 1 1* fffi where ff and fi are constants. Proposition 8.
Reference: 13. <author> Paz A., Moran S.: </author> <title> Non deterministic polynomial optimization problems and their approximations. </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 15 </month> <year> (1981) </year> <month> 251-277 </month>
Reference-contexts: The relative complexity of checking and evaluating a function was first considered in [14]. It is well-known, for example, that checking whether an array is already sorted is simpler than sorting it. Valiant proved that, indeed, the two questions are equivalent if and only if P= NP. In <ref> [13] </ref> and, successively, in [5] the relative complexity of evaluating the optimum cost and constructing an optimum solution for optimization problems was analyzed. For example, we can either compute the size of a maximum clique in a given graph or list the nodes of a maximum clique.
Reference: 14. <author> Valiant L.: </author> <title> Relative complexity of checking and evaluating. </title> <note> Information Processing Letters 5 (1976) 20-23 </note>
Reference-contexts: Successively, we apply the notion of APX-completeness to the study of the relative complexity of evaluating an *-approximate value and computing an *- approximate solution for any *. The relative complexity of checking and evaluating a function was first considered in <ref> [14] </ref>. It is well-known, for example, that checking whether an array is already sorted is simpler than sorting it. Valiant proved that, indeed, the two questions are equivalent if and only if P= NP.
Reference: 15. <author> Yannakakis M.: </author> <title> On the approximation of maximum satisfiability. Proc. 3-rd ACM-SIAM Symp. on Discrete Algorithms (1992) 1-9 This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: As a consequence of this result, it follows that Max Sat, that is, the problem of maximizing the number of satisfied clauses in a given CNF-formula, does not admit a polynomial-time approximation scheme unless P= NP (note that it is well-known that this problem is approximable <ref> [8, 15] </ref>). Let A be an APX-complete problem and let (f; g; c) be a PTAS-reduction from Max Sat to A. Moreover, let L be an NP-complete language.
References-found: 15

