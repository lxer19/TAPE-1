URL: ftp://coast.cs.purdue.edu/pub/doc/cryptography/RKEP_smart_card.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ12.html
Root-URL: http://www.cs.purdue.edu
Email: mab@research.att.com  
Title: High-Bandwidth Encryption with Low-Bandwidth Smartcards  
Author: Matt Blaze 
Date: December 3, 1995  
Address: Murray Hill, NJ 07974  
Affiliation: AT&T Bell Laboratories,  
Abstract: This paper describes a simple protocol, the Remotely Keyed Encryption Protocol (RKEP), that enables a secure, but bandwidth-limited, cryptographic smartcard to function as a high-bandwidth secret-key encryption and decryption engine for an insecure, but fast, host processor. The host processor assumes most of the computational and bandwidth burden of each cryptographic operation without ever learning the secret key stored on the card. By varying the parameters of the protocol, arbitrary size blocks can be processed by the host with only a single small message exchange with the card and minimal card computation. RKEP works with any conventional block cipher and requires only standard ECB mode block cipher operations on the smartcard, permitting its implementation with off-the-shelf components. There is no storage overhead. Computational overhead is minimal, and includes the calculation of a cryptographic hash function as well as a conventional cipher function on the host processor.
Abstract-found: 1
Intro-found: 1
Reference: [BFKR90] <author> D. Beaver, J. Feigenbaum, J. Kilian, and P. Rogaway. </author> <title> Security with Low Communication Overhead. </title> <booktitle> Advances in Cryptology - Crypto '90, Lecture Notes in Computer Science, </booktitle> <volume> volume 537, </volume> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1991, </year> <pages> pp. 62-76. </pages>
Reference-contexts: Previous work in the area of "asymmetric capacity" cryptography has focused on public-key cryptosystems in which parts of the computational burden can be shifted from one communicating party to the other [BCY93] and does not address this particular problem. Other work, e.g., [BFS90] <ref> [BFKR90] </ref>, is concerned with hiding instances of specific types of distributed computation and cannot be applied directly to encryption with block ciphers.
Reference: [BFS90] <author> D. Beaver, J. Feigenbaum, and V. Shoup. </author> <title> Hiding Instances in Zero-Knowledge Proof Systems. </title> <booktitle> Advances in Cryptology - Crypto '90, Lecture Notes in Computer Science, </booktitle> <volume> volume 537, </volume> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1991, </year> <pages> pp. 326-338. 7 </pages>
Reference-contexts: Previous work in the area of "asymmetric capacity" cryptography has focused on public-key cryptosystems in which parts of the computational burden can be shifted from one communicating party to the other [BCY93] and does not address this particular problem. Other work, e.g., <ref> [BFS90] </ref> [BFKR90], is concerned with hiding instances of specific types of distributed computation and cannot be applied directly to encryption with block ciphers.
Reference: [BCY93] <author> M. J. Beller, L. Chang and Y. Yacobi. </author> <title> Privacy and Authentication in a Portable Com--munications System. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <month> August, </month> <year> 1993. </year>
Reference-contexts: Previous work in the area of "asymmetric capacity" cryptography has focused on public-key cryptosystems in which parts of the computational burden can be shifted from one communicating party to the other <ref> [BCY93] </ref> and does not address this particular problem. Other work, e.g., [BFS90] [BFKR90], is concerned with hiding instances of specific types of distributed computation and cannot be applied directly to encryption with block ciphers.
Reference: [Bla93] <author> M. </author> <title> Blaze. A Cryptographic File System for Unix. </title> <booktitle> Proc. 1st ACM Conference on Computer and Communications Security, </booktitle> <address> Fairfax, VA., </address> <month> November </month> <year> 1993 </year>
Reference-contexts: of arbitrarily many blocks in this manner, at the cost of "buffer" memory proportional to the number of blocks to be overlapped. 3.3 DES/SHA and Fortezza Implementations We implemented RKEP using a version of the AT&T smartcard as the key storage and encryption engine for the Cryptographic File System (CFS) <ref> [Bla93] </ref>. CFS is an encrypting file system for Unix-like operating systems.
Reference: [NBS77] <institution> Data Encryption Standard. National Bureau of Standards, Federal Information Processing Standards Publication 46, Government Printing Office, </institution> <address> Washington, D. C., </address> <year> 1977. </year>
Reference-contexts: Without online access to the smartcard, however, the host cannot encrypt or decrypt other blocks, even given past card access. RKEP requires that the smartcard and host share a block cipher algorithm, such as DES <ref> [NBS77] </ref>, that operates on b-bit cipherblocks and that is keyed with a k-bit key. (Strictly speaking, there is no requirement that the host and card implement the same cipher function; if two different ciphers are used, however, the security of the system is limited to that of the weaker cipher.) There
Reference: [NBS80] <institution> Data Encryption Standard. National Bureau of Standards, Federal Information Processing Standards Publication 81, Government Printing Office, </institution> <address> Washington, D. C., </address> <year> 1980. </year>
Reference-contexts: If n is fixed, the large blocks are suitable for use with any standard cryptographic "mode of operation" <ref> [NBS80] </ref>. The scheme requires no communications overhead in transmitting or storing the ciphertext; the plaintext and ciphertext sizes are equal. Any size block can be encrypted or decrypted with one card interaction, with the card performing exactly two cipherblock encrypt / decrypt operations in each.
Reference: [NIST94] <institution> National Institute for Standards and Technology. Escrowed Encryption Standard, Federal Information Processing Standards Publication 185, U.S. Dept. of Commerce, </institution> <year> 1994. </year> <month> 8 </month>
Reference-contexts: We compare the measured performance of the four systems in Figure 3. We have also implemented a version of CFS with RKEP based on a prototype of the US DoD Fortezza PCMCIA card. The Fortezza card implements the (classified) Skipjack algorithm <ref> [NIST94] </ref> and has key management facilities that permit secure key establishment and storage. Because Skipjack is classified we could not implement it in software on the host.
References-found: 7

