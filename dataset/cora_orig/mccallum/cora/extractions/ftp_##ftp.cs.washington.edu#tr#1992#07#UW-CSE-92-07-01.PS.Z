URL: ftp://ftp.cs.washington.edu/tr/1992/07/UW-CSE-92-07-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/ui/multi-garnet-92.html
Root-URL: 
Title: Multi-Garnet: Integrating Multi-Way Constraints with Garnet on compiling and loading Multi-Garnet, as well as documentation
Author: Michael Sannella and Alan Borning 
Note: Chapter 2 contains a reference manual for the current version of Multi-Garnet (version 2.1). This includes information  and manipulate Multi-Garnet constraints. This chapter also contains additional details on the implementation of Multi-Garnet. Chapter 3 describes  
Abstract: Technical Report 92-07-01 Dept. of Computer Science and Engineering University of Washington September 1992 Abstract Constraints provide a useful mechanism for maintaining relations in user interface toolkits. Garnet is a widely-used user interface toolkit with considerable functionality, based on one-way, required constraints. Multi-Garnet extends Garnet by adding support for multi-way constraints and constraint hierarchies with both required and preferential constraints. This document contains three chapters describing Multi-Garnet: * Chapter 1 presents a high-level overview of Multi-Garnet. To motivate the development of Multi-Garnet, we examine the Garnet constraint system, present some realistic user interface problems that are difficult to handle in Garnet, and demonstrate how Multi-Garnet addresses these problems. We provide details on how Multi-Garnet supports some of the features of Garnet, including constraints with pointer variables, and inheritance of constraints. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 92] <author> Franz G. Amador, Deborah Berman, Alan Borning, Tony DeRose, Adam Finkelstein, Dorothy Neville, Norge, David Notkin, David Salesin, Mike Salisbury, Joe Sherman, Ying Sun, Daniel Weld, and Georges Winkenbach. </author> <title> Electronic "How Things Work" Articles. </title> <type> Technical Report 92-04-08, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: scatterplot to a single point. 0.00 100.00A 100.00 25.76 101.93A 130.54 (a) The Original Scatterplot (b) After Moving Points and Axes Another planned application is the Electronic Encyclopedia Exploratorium (E 3 ), a new, multi investigator project in which we are building "how things work" articles for an electronic encyclopedia <ref> [ABB + 92] </ref>. Multi-Garnet will be used in constructing E 3 's user interface. Typical articles in E 3 will describe such mechanisms as refrigerators, engines, telescopes, and mechanical linkages.
Reference: [Bar86] <author> Paul Barth. </author> <title> An Object-Oriented Approach to Graphical Interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 142-172, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW <ref> [Bar86] </ref>, Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90].
Reference: [BMMW89] <author> Alan Borning, Michael Maher, Amy Martindale, and Molly Wilson. </author> <title> Constraint Hierarchies and Logic Programming. </title> <booktitle> In Proceedings of the Sixth International Conference on Logic Programming, </booktitle> <pages> pages 149-164, </pages> <address> Lisbon, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Constraint hierarchies extend the basic theory of constraints to allow preferential constraints as well as required ones, with an arbitrary number of levels of preference <ref> [BMMW89] </ref>. In user interface applications, constraint hierarchies are useful for expressing declaratively the programmer's preferences about what is to be adjusted when resatisfying constraints after a change (since there are typically many ways of doing this), and for expressing defaults that can be overridden if necessary. <p> Two or more constraints at the same level may also be in conflict; in this case, DeltaBlue arbitrarily picks one or the other to satisfy. (In the terminology of the constraint hierarchy theory given in <ref> [BMMW89, FBMB90] </ref>, DeltaBlue produces a single locally-predicate-better solution to the hierarchy.) Another important distinction between DeltaBlue and the Garnet constraint solver is that DeltaBlue supports separate planning and execution stages.
Reference: [Bor81] <author> Alan Borning. </author> <title> The Programming Language Aspects of ThingLab, A Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Finding a solution to this problem is important not just for Multi-Garnet, but for any system that includes both multi-way constraints and pointer variables. Some of our earlier systems, in particular the original ThingLab <ref> [Bor81] </ref>, made extensive use of paths for specifying which slots were affected by a constraint; in addition these paths interacted correctly with inheritance. However, they were always 1 The input constraints used by s-value have a default strength (normally :strong).
Reference: [Dui87] <author> Robert Duisberg. </author> <title> Animation Using Temporal Constraints: An Overview of the Animus System. </title> <journal> Human-Computer Interaction, </journal> <volume> 3(3) </volume> <pages> 275-308, </pages> <year> 1987. </year>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus <ref> [Dui87] </ref>, ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90]. One significant difference among the constraint systems used in these user interface toolkits is whether they support one-way or multi-way constraints.
Reference: [EL88] <author> Danny Epstein and Wilf LaLonde. </author> <title> A Smalltalk Window System Based on Constraints. </title> <booktitle> In Proceedings of the 1988 ACM Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 83-94, </pages> <address> San Diego, </address> <month> September </month> <year> 1988. </year> <note> ACM. </note>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) <ref> [EL88] </ref>, the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90]. One significant difference among the constraint systems used in these user interface toolkits is whether they support one-way or multi-way constraints.
Reference: [EMB87] <author> Raimund Ege, David Maier, and Alan Borning. </author> <title> The Filter Browser|Defining Interfaces Graphically. </title> <booktitle> In Proceedings of the European Conference on Object-Oriented Programming, </booktitle> <pages> pages 155-165, </pages> <address> Paris, </address> <month> June </month> <year> 1987. </year> <institution> Association Fran~caise pour la Cybernetique Economique et Technique. </institution>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool <ref> [EMB87] </ref>, and the Cactus statistics exploration environment [MSB90]. One significant difference among the constraint systems used in these user interface toolkits is whether they support one-way or multi-way constraints. For example, suppose we have a con straint that window1 should be directly above window2.
Reference: [FBMB90] <author> Bjorn Freeman-Benson, John Maloney, and Alan Borning. </author> <title> An Incremental Constraint Solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: An efficient incremental algorithm|DeltaBlue|is available for satisfying constraint hierarchies using local propagation <ref> [FBMB90] </ref>. <p> Two or more constraints at the same level may also be in conflict; in this case, DeltaBlue arbitrarily picks one or the other to satisfy. (In the terminology of the constraint hierarchy theory given in <ref> [BMMW89, FBMB90] </ref>, DeltaBlue produces a single locally-predicate-better solution to the hierarchy.) Another important distinction between DeltaBlue and the Garnet constraint solver is that DeltaBlue supports separate planning and execution stages.
Reference: [Hil90] <author> Ralph D. Hill. </author> <title> A 2-D Graphics System for Multi-User Interactive Graphics Based on Objects and Constraints. </title> <editor> In E. H. Blake and P. Wisskirchen, editors, </editor> <booktitle> Advances in Object Oriented Graphics I, </booktitle> <pages> pages 67-91. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL <ref> [Hil90] </ref>, RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90].
Reference: [Hil92] <author> Ralph Hill. </author> <title> Languages for the Construction of Multi-User Multi-Media Synchronous (MUMMS) Applications. </title> <editor> In Brad Myers, editor, </editor> <booktitle> Languages for Developing User Interfaces, </booktitle> <pages> pages 125-143. </pages> <publisher> Jones and Bartlett, </publisher> <address> Boston, </address> <year> 1992. </year> <month> 47 </month>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS <ref> [Hil92] </ref>, GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90]. One significant difference among the constraint systems used in these user interface toolkits is whether they support one-way or multi-way constraints.
Reference: [Mal91] <author> John Maloney. </author> <title> Using Constraints for User Interface Construction. </title> <type> PhD thesis, </type> <institution> Depart--ment of Computer Science and Engineering, University of Washington, </institution> <month> August </month> <year> 1991. </year> <note> Published as Department of Computer Science and Engineering Technical Report 91-08-12. </note>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II <ref> [Mal91] </ref>, the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90]. One significant difference among the constraint systems used in these user interface toolkits is whether they support one-way or multi-way constraints. <p> Second, in a typical interactive graphics application, often a new input value is repeatedly fed into the same network of constraints|for example, when moving a part of a picture with the mouse. In such a case, the same plan can be executed many times, resulting in much better performance <ref> [Mal91] </ref>. We recently revised DeltaBlue to produce SkyBlue. Like its predecessor, SkyBlue finds a single locally-predicate-better solution to a constraint hierarchy, using local propagation and separate planning and execution stages. However, whereas DeltaBlue methods can only have one output variable, SkyBlue allows constraint methods to have multiple output variables. <p> Meaningful comparisons of Garnet and Multi-Garnet performance will have to measure the performance of real user interfaces. 11 One situation in which Multi-Garnet (or any other system using SkyBlue) could encounter perfor-mance problems is when the constraint network contains numerous constraints with multi-output methods. It was proved in <ref> [Mal91] </ref> that the problem of finding a locally-predicate-better solution to a constraint hierarchy is NP-complete when methods have multiple outputs. <p> This constraint 12 system initialization problem is not unique to Multi-Garnet, but has been noted by a number of other researchers (see e.g. <ref> [Mal91] </ref>); a solution to it would be of general utility. 1.6.3 Constraint Cycles Local propagation works well in many situations, but runs into problems when the constraint network contains a cycle.
Reference: [MGD + 90a] <author> Brad A. Myers, Dario Guise, Roger B. Dannenberg, Brad Vander Zanden, David Kos-bie, Philippe Marchal, and Ed Pervin. </author> <title> Comprehensive Support for Graphical, Highly-Interactive User Interfaces: The Garnet User Interface Development Environment. </title> <journal> IEEE Computer, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet <ref> [MGD + 90a, MGD + 90b] </ref>, MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90]. <p> We attempt to dispel both of these impressions in this chapter. Garnet is a widely-used user interface toolkit, built on Common Lisp and X windows, with considerable functionality <ref> [MGD + 90a, MGD + 90b] </ref>. However, Garnet supports only one-way constraints, all of which must be required (no hierarchies). In Multi-Garnet, we integrate both multi-way constraints and constraint hierarchies with Garnet.
Reference: [MGD + 90b] <author> Brad A. Myers, Dario Guise, Roger B. Dannenberg, Brad Vander Zanden, David Kos-bie, Philippe Marchal, Ed Pervin, Andrew Mickish, and John A. Kolojejchick. </author> <title> The Garnet Toolkit Reference Manuals: Support for Highly-Interactive Graphical User Interfaces in Lisp. </title> <type> Technical Report CMU-CS-90-117, </type> <institution> Computer Science Dept, Carnegie Mellon University, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet <ref> [MGD + 90a, MGD + 90b] </ref>, MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90]. <p> We attempt to dispel both of these impressions in this chapter. Garnet is a widely-used user interface toolkit, built on Common Lisp and X windows, with considerable functionality <ref> [MGD + 90a, MGD + 90b] </ref>. However, Garnet supports only one-way constraints, all of which must be required (no hierarchies). In Multi-Garnet, we integrate both multi-way constraints and constraint hierarchies with Garnet.
Reference: [MSB90] <author> John Alan McDonald, Werner Stuetzle, and Andreas Buja. </author> <title> Painting Multiple Views of Complex Objects. </title> <booktitle> In Proceedings of the 1990 ACM Conference on Object-Oriented Programming: Systems, Languages, and Applications and the European Conference on Object-Oriented Programming, </booktitle> <pages> pages 245-257, </pages> <address> Ottawa, Canada, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment <ref> [MSB90] </ref>. One significant difference among the constraint systems used in these user interface toolkits is whether they support one-way or multi-way constraints. For example, suppose we have a con straint that window1 should be directly above window2. <p> One area where we plan to apply this system is to construct interactive data analysis systems <ref> [MSB90] </ref>. For example, Figure 1.5a shows a scatterplot displaying a collection of object measurements. Multi-Garnet constraints are used to maintain relations between the object measurements, the positions of points in the scatter plot, and the positions and ranges of the scatterplot axes.
Reference: [Mye87] <author> Brad A. Myers. </author> <title> Creating Dynamic Interaction Techniques by Demonstration. </title> <booktitle> In CHI+GI 1987 Conference Proceedings, </booktitle> <pages> pages 271-278, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot <ref> [Mye87] </ref>, GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS [Ols90], Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90].
Reference: [Mye90] <author> Brad A. Myers. </author> <title> A new model for handling input. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 289-320, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Eventually, it may be possible to modify SkyBlue to directly support indirect pointers, interleaving constraint propagation and indirect pointer updates. 1.5.4 Interactors User interaction is implemented in Garnet using interactors <ref> [Mye90] </ref> that interpret input events, such as key presses and mouse movements, and set specified slots in graphic objects, such as the position of an icon being moved by the mouse. These slots are set using s-value, so constraint propagation will occur if these slots are constrained by Multi-Garnet constraints.
Reference: [Ols90] <author> Dan R. Olsen, Jr. </author> <title> Creating Interactive Techniques by Symbolically Solving Geometric Constraints. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 102-107, </pages> <address> Snowbird, Utah, </address> <month> October </month> <year> 1990. </year> <note> ACM SIG-GRAPH and SIGCHI. </note>
Reference-contexts: User interfaces and user interface construction systems that use constraints include Peri-dot [Mye87], GROW [Bar86], Garnet [MGD + 90a, MGD + 90b], MEL [Hil90], RENDEZVOUS [Hil92], GITS <ref> [Ols90] </ref>, Animus [Dui87], ThingLab II [Mal91], the Constraint Window System (CWS) [EL88], the FilterBrowser user interface construction tool [EMB87], and the Cactus statistics exploration environment [MSB90]. One significant difference among the constraint systems used in these user interface toolkits is whether they support one-way or multi-way constraints.
Reference: [San92] <author> Michael Sannella. </author> <title> The SkyBlue Constraint Solver. </title> <type> Technical Report 92-07-02, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: SkyBlue also handles cycles of constraints in a more graceful fashion than DeltaBlue, which will make it possible to link in specialized, more powerful constraint solvers as needed (see Section 1.6.3). Additional details of SkyBlue are given in <ref> [San92] </ref>. 5 1.5 Multi-Garnet At the beginning of the project, we set a number of goals for Multi-Garnet: 1. To extend Garnet to use the SkyBlue constraint solver. 2. To change Garnet's programming style as little as possible, so that existing Garnet programs could be adapted without major changes.
Reference: [VZMGS91] <author> Brad Vander Zanden, Brad Myers, Dario Guise, and Pedro Szekely. </author> <title> The Importance of Pointer Variables in Constraint Models. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 155-164, </pages> <address> Hilton Head, South Carolina, </address> <month> November </month> <year> 1991. </year> <month> 48 </month>
Reference-contexts: In particular, Garnet supports pointer variables in constraints <ref> [VZMGS91] </ref>, a facility that has proven useful for the dynamic runtime creation and manipulation of application objects. Our previous algorithms and systems haven't supported fully general pointer variables; Multi-Garnet does. In addition, Multi-Garnet uses a new constraint satisfaction algorithm, SkyBlue, which incorporates some important advances over DeltaBlue. <p> This implementation of indirect reference paths may seem suspiciously simple, compared to the elaborate algorithms described in <ref> [VZMGS91] </ref>. There are two reasons for this simplicity. First, all constraint propagation is handled by the SkyBlue algorithm as constraints are added and removed from the network, so propagation wasn't explicitly described above. <p> This is distinctly different from the Garnet constraint solver and the algorithms described in <ref> [VZMGS91] </ref>, which allow the edges 9 in the constraint graph to be changed during constraint evaluation (which accounts for some of the complexity of these algorithms).
References-found: 19

