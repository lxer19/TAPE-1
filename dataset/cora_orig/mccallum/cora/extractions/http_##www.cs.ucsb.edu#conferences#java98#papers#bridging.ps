URL: http://www.cs.ucsb.edu/conferences/java98/papers/bridging.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Title: Bridging the Gap between Distributed Shared Memory and Message Passing  
Author: Holger Karl 
Keyword: A number of measurements show significant performance improvements for annotations and annotation-based shared primitive types.  
Note: This work was done while the author was on leave from Humboldt-Universitat Berlin, Graduiertenkolleg Kommunikationsbasierte Sys-teme.  
Address: New York University  
Affiliation: Department of Computer Science Courant Institute of Mathematical Sciences  
Abstract: This paper proposes an extension to the DSM-based Charlotte system that incorporates advantages from both approaches. Annotations are used to describe the data dependencies of parallel routines. With this information, the runtime system can improve the communication efficiency while still guaranteeing the correctness of the shared memory semantics. If the correctness of these annotations can be relied upon, additional optimizations are possible, ultimately sharing primitive data types such as int across a network, making the overhead associated with accessing and sharing objects unnecessary. In this case, the annotations can be regarded as a compact representation of message passing semantics. Thus, a program's efficiency can be improved by a a step-by-step incorporation of semantic knowledge. The possibility to freely mix and to easily switch between unannotated code, annotated code and shared primitive data types entails a big flexibility for the programmer. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. E. Bal and M. F. Kaashoek. </author> <title> Object-Distribution in Orca using Compile-Time and Run-Time Techniques. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages and Applications (OOP-SLA '93), </booktitle> <pages> pages 162177, </pages> <address> Washington, D.C., </address> <year> 1993. </year> <month> 9 </month>
Reference-contexts: Since Java does not allow access to low-level system concepts such as memory pages and memory protection, all-software solutions are more relevant. A number of such systems have been proposed; examples include object-based systems like Orca <ref> [1] </ref> and Aurora [11] or C-based systems like CRL [10] and Cid [12] or Jade [14]. Aurora is an object-based system where the programmer can select different consistency models for a shared object dynamically at runtime by annotating the C++ source code with corresponding function calls.
Reference: [2] <author> J. E. Baldeschwieler, R. D. Blumofe, and E. A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In Proc. of the 7th ACM SIGOPS European Workshop: Systems support for Worldwide Applications, </booktitle> <address> Connemara, Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: A number of recent projects use Java as an implementation platform for distributed computing. A PVM-like interface for Java is described in [8]. ATLAS <ref> [2] </ref> extends Cilk's technologies, e.g., hierarchical work stealing, and integrates them into Java. Unlike Charlotte, ATLAS needs daemon processes as compute servers and also makes use of native code. JavaParty [13] transparently adds remote objects to Java by introducing a new keyword remote that is handled by a preprocessor.
Reference: [3] <author> A. Baratloo, P. Dasgupta, and Z. M. Kedem. CALYPSO: </author> <title> A Novel Software System for Fault-Tolerant Parallel Processing on Distributed Platforms. </title> <booktitle> In Proc. of the 4th IEEE Intl. Symp. on High-Performance Distributed Computing, </booktitle> <address> Washington, D.C., </address> <month> August </month> <year> 1995. </year>
Reference-contexts: In particular, it is awkward to use more than one routine per Droutine object and, hence, annotating such routines is difficult, too. We are currently investigat 8 ing a different syntactic approach for both Charlotte and Calypso (a page-based DSM system <ref> [3] </ref>). Studying the applicability of such annotations to Calypso is under way. Also, the annotation techniques proposed here should be studied with some more elaborate examples to establish the difficulty of writing the annotations. The biggest improvement is to be expected for programs that show regular data-access behaviour.
Reference: [4] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyckoff. </author> <title> Charlotte: Metacomputing on the Web. </title> <booktitle> In Proc. of the 9th Intl. Conf. on Parallel and Distributed Computing Systems, </booktitle> <address> Dijon, France, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: A number of research efforts use Java to build such an environment. Some of them use message-passing interfaces, others provide Distributed Shared Memory (DSM) semantics (cp. Section 2 for details). Charlotte <ref> [4] </ref> is such a DSM systemit uses a reliable parallel machine as programming model and the runtime system implements this model on top of unreliable machines. Charlotte provides an object-based shared memory for objects of certain distributed classes.
Reference: [5] <author> T. Brecht, H. Sandhu, M. Shan, and J. Talbot. ParaWeb: </author> <title> Towards World-Wide Supercomputing. </title> <booktitle> In 7th ACM SIGOPS European Workshop, </booktitle> <pages> pages 181 188, </pages> <address> Connemara, Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: JavaParty mainly targets clusters of workstations. The programmer or compiler generate code to guide data distribution and migration. JavaParty programs are very similar to Java programs; their efficiency is comparable to RMI-based implementations. The ParaWeb project <ref> [5] </ref> is concerned with providing an infrastructure for seamless access to heterogeneous computing resources. A library can be used for explicit message-passing programs or, with a modified Java Virtual Machine, threads can run remotely and are presented with the illusion of a single, shared memory.
Reference: [6] <author> P. Cappello, B. Christiansen, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu. Javelin: </author> <title> Internet-Based Parallel Computing Using Java. </title> <booktitle> In ACM Workshop on Java for Science and Engineering Computation, </booktitle> <year> 1997. </year>
Reference-contexts: Similarly, [16] suggests implementing a modified Java Virtual Machine on top of TreadMarks using a distributed garbage collector. In [9] it is argued that integrating the global pointer and asynchronous remote method invocation concept (constituting a global name space) from the Nexus library is beneficial for web-based supercomputing. Javelin <ref> [6] </ref>, similar to Charlotte in that it allows standard Web-browsers to be used, provides brokering functionalities for computational resources and adds a layer supporting the implementation of parallel programming models in Java. Research into DSM in general can be broadly classified as using hardware support or being an all-software approach.
Reference: [7] <author> J. B. Carter, J. K. Bennet, and W Zwaenepoel. </author> <title> Implementation and Performance of Munin. </title> <booktitle> In Proc. of the 13th ACM Symp. on Operating System Principles, </booktitle> <pages> pages 152164, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Research into DSM in general can be broadly classified as using hardware support or being an all-software approach. Among the former, Munin <ref> [7] </ref> is interesting as it uses annotations to express expected access patterns for data (e.g., producer-consumer), thereby allowing the 2 run-time system to choose an appropriate consistency pro-tocol. Since Java does not allow access to low-level system concepts such as memory pages and memory protection, all-software solutions are more relevant.
Reference: [8] <author> A. Ferrari. </author> <title> JPVM The Java Parallel Virtual Machine. </title> <address> http://www.cs.virginia. edu/ajf2j/jpvm.html. </address>
Reference-contexts: A number of recent projects use Java as an implementation platform for distributed computing. A PVM-like interface for Java is described in <ref> [8] </ref>. ATLAS [2] extends Cilk's technologies, e.g., hierarchical work stealing, and integrates them into Java. Unlike Charlotte, ATLAS needs daemon processes as compute servers and also makes use of native code.
Reference: [9] <author> I. Foster and S. Tuecke. </author> <title> Enabling Technologies for Web-Based Ubiquitous Supercomputing. </title> <booktitle> In Proc. of the 5th IEEE Symp. on High Performance Distributed Computing, </booktitle> <pages> pages 112110, </pages> <year> 1996. </year>
Reference-contexts: Similarly, [16] suggests implementing a modified Java Virtual Machine on top of TreadMarks using a distributed garbage collector. In <ref> [9] </ref> it is argued that integrating the global pointer and asynchronous remote method invocation concept (constituting a global name space) from the Nexus library is beneficial for web-based supercomputing.
Reference: [10] <author> K. L. Johnson, M. F. Kaashoek, and D. A. Wal-lach. </author> <title> CRL: </title> <booktitle> High-Performacne All-Software Distributed Shared Memory. In Proc. of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: Since Java does not allow access to low-level system concepts such as memory pages and memory protection, all-software solutions are more relevant. A number of such systems have been proposed; examples include object-based systems like Orca [1] and Aurora [11] or C-based systems like CRL <ref> [10] </ref> and Cid [12] or Jade [14]. Aurora is an object-based system where the programmer can select different consistency models for a shared object dynamically at runtime by annotating the C++ source code with corresponding function calls.
Reference: [11] <author> P. Lu. Aurora: </author> <title> Scoped Behaviour for Per-Context Optimized Distributed Data Sharing. </title> <booktitle> In Proc. of the 11th Intl. Parallel Processing Symposium, </booktitle> <pages> pages 467473, </pages> <address> Geneva, Switzerland, </address> <year> 1997. </year>
Reference-contexts: Since Java does not allow access to low-level system concepts such as memory pages and memory protection, all-software solutions are more relevant. A number of such systems have been proposed; examples include object-based systems like Orca [1] and Aurora <ref> [11] </ref> or C-based systems like CRL [10] and Cid [12] or Jade [14]. Aurora is an object-based system where the programmer can select different consistency models for a shared object dynamically at runtime by annotating the C++ source code with corresponding function calls.
Reference: [12] <author> R. S. Nikhil. Cid: </author> <title> A Parallel Shared-Memory C for Distributed Memory Machines. </title> <booktitle> In Proc. of the 7th Ann. Workshop on Languages and Compilers for Parallel Computing, volume 892 of LNCS, </booktitle> <pages> pages 376390, </pages> <address> Ithaca, NY, </address> <month> August </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: Since Java does not allow access to low-level system concepts such as memory pages and memory protection, all-software solutions are more relevant. A number of such systems have been proposed; examples include object-based systems like Orca [1] and Aurora [11] or C-based systems like CRL [10] and Cid <ref> [12] </ref> or Jade [14]. Aurora is an object-based system where the programmer can select different consistency models for a shared object dynamically at runtime by annotating the C++ source code with corresponding function calls. Orca on the other hand defines an own language for a shared data-objects model.
Reference: [13] <author> M. Philippsen and M. Zenger. </author> <title> JavaParty Transparent Remote Objects in Java. </title> <booktitle> In ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <address> Las Vegas, NV, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: A PVM-like interface for Java is described in [8]. ATLAS [2] extends Cilk's technologies, e.g., hierarchical work stealing, and integrates them into Java. Unlike Charlotte, ATLAS needs daemon processes as compute servers and also makes use of native code. JavaParty <ref> [13] </ref> transparently adds remote objects to Java by introducing a new keyword remote that is handled by a preprocessor. JavaParty mainly targets clusters of workstations. The programmer or compiler generate code to guide data distribution and migration.
Reference: [14] <author> M. C. Rinard, D. J. Scales, and M. S. Lam. </author> <title> Jade: </title>
Reference-contexts: A number of such systems have been proposed; examples include object-based systems like Orca [1] and Aurora [11] or C-based systems like CRL [10] and Cid [12] or Jade <ref> [14] </ref>. Aurora is an object-based system where the programmer can select different consistency models for a shared object dynamically at runtime by annotating the C++ source code with corresponding function calls. Orca on the other hand defines an own language for a shared data-objects model.
References-found: 14

