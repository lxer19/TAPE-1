URL: ftp://ftp.cc.gatech.edu/pub/people/byrne/chi94.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/people/Phd/Mike.Byrne.html
Root-URL: 
Keyword: GOMS, Usability, User Interface Design Environment, Interface Evaluation, Formal Models of the User, UIMS  
Abstract: One method for user interface analysis that has proven successful is formal interface analysis, such as GOMS- based analysis. Such methods are often criticized for being difficult to learn, or at the very least an additional burden for the system designer. However, if the process of constructing and using formal models could be automated as part of the interface design environment, such models could be of even greater value. This paper describes an early version of such a system, called USAGE (the UIDE System for semi-Automated GOMS Evaluation). Given the application model necessary to drive the UIDE system, USAGE generates an NGOMSL model of the interface which can be run on a typical set of user tasks and provide execution and learning time estimates. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bovair, S., Kieras, D. E., & Polson, P. G. </author> <year> (1990). </year> <title> The acquisition and performance of text editing skill: A cognitive complexity analysis. </title> <booktitle> Human Computer Interaction, </booktitle> <volume> 5, </volume> <pages> 1-48. </pages>
Reference: 2. <author> Card, S., Moran, T., & Newell, A. </author> <year> (1983). </year> <title> The psychology of human-computer interaction. </title> <address> Hillsdale, NJ: </address> <publisher> Erlbaum. </publisher>
Reference-contexts: An excerpt from such a file appears in Figure 1. GOMS GOMS (goals, operators, methods, and selection rules) was introduced in the early 1980s as a technique for interface analysis by Card et al. <ref> [2] </ref>. The validity of this technique as a method for quantifying the procedural knowledge necessary to operate and interface has been greatly reinforced by Kieras and colleagues [1,5]. Kieras [3] presents a formalism for performing GOMS analysis called NGOMSL (Natural GOMS Language).
Reference: 3. <author> Kieras, D. E. </author> <year> (1988). </year> <title> Towards a practical GOMS model methodology for user interface design. </title> <editor> In M. Helander (Ed.), </editor> <booktitle> Handbook of human-computer interaction (pp. </booktitle> <pages> 135-158). </pages> <address> Amsterdam: </address> <publisher> North-Holland Elesevier. </publisher>
Reference-contexts: The validity of this technique as a method for quantifying the procedural knowledge necessary to operate and interface has been greatly reinforced by Kieras and colleagues [1,5]. Kieras <ref> [3] </ref> presents a formalism for performing GOMS analysis called NGOMSL (Natural GOMS Language). This language is simple to learn and use for the purposes of interface analysis, and in many ways resembles a programming language. Figure 2 presents a common method as it would be represented in NGOMSL. <p> Figure 2 presents a common method as it would be represented in NGOMSL. NGOMSL models may be used to estimate learning time for an interface, as well as execution time for tasks using the interface <ref> [3] </ref>. While it is not difficult to learn how to construct models in NGOMSL, constructing such models and then using them to predict execution times can be a tedious and time-consuming process. One of those problems has recently been addressed, however. Recently, we have constructed an NGOMSL interpreter [7].
Reference: 4. <author> Nielsen, J., & Phillips, V. L. </author> <year> (1993). </year> <title> Estimating the relative usability of two interfaces: Heuristic, formal, and empirical methods compared. </title> <booktitle> In Proceedings of INTERCHI93, </booktitle> <pages> 214-221. </pages>
Reference-contexts: A system such as USAGE, as a part of the larger UIDE system, is a powerful aid and represents a real advance in bringing formal modeling techniques to the interface designer. As pointed out by Nielsen and Phillips <ref> [4] </ref>, GOMS models constructed by even moderately trained analysts is a reasonably cost-effective analytical technique. An automated GOMS system as part of UIDE provides all the advantages of formal analysis at a substantially reduced cost, as well as all the other advantages of UIDE (see [6]).
Reference: 5. <author> Kieras, D. E., & Polson, P. G. </author> <year> (1985). </year> <title> An approach to the formal analysis of user complexity. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 22, </volume> <pages> 365-394. </pages>
Reference: 6. <author> Sukaviriya, N., Foley, J. D., & Griffith, T. </author> <year> (1993). </year> <title> A second generation user interface design environment: The model and the runtime architecture. </title> <booktitle> In Proceedings of INTERCHI93, </booktitle> <pages> 375-382. </pages>
Reference-contexts: UIDE UIDE (the User Interface Design Environment) is a model- based interface design tool which was developed in C++ and currently runs under SunOS. It is described in more detail in <ref> [6] </ref>. The aspects of UIDE that are most directly relevant are the model-based nature of the system and the planning engine. In UIDE, an application is constructed by specifying a model of the interface and then plugging in the applicationspecific code. <p> Such a tool has a variety of applications, one of the most obvious being rapid comparisons between interfaces. This particular application of USAGE is important enough to merit more extended treatment. USAGE AT WORK: CIRCUITDESIGN In the description of UIDE presented in <ref> [6] </ref>, the digital circuit application which was constructed using UIDE was presented as an example, and it will be used again here. CircuitDesign is a simple demonstration application in which users can create and manipulate simple digital circuits made up of logic gates. Figure 4 depicts the CircuitDesign interface. <p> An automated GOMS system as part of UIDE provides all the advantages of formal analysis at a substantially reduced cost, as well as all the other advantages of UIDE (see <ref> [6] </ref>). LIMITATIONS While the advantages of USAGE are considerable, it is not without its shortcomings. Currently, one of the major limitations of USAGE is the translation process.
Reference: 7. <author> Wood, S. </author> <year> (1993). </year> <title> Issues in the Implementation of a GOMS-model design tool. </title> <type> Unpublished report. </type>
Reference-contexts: While it is not difficult to learn how to construct models in NGOMSL, constructing such models and then using them to predict execution times can be a tedious and time-consuming process. One of those problems has recently been addressed, however. Recently, we have constructed an NGOMSL interpreter <ref> [7] </ref>. This interpreter takes as input an NGOMSL model of an interface and a description of the tasks to be performed in that interface and produces an estimate of the time it will take to perform the tasks.
References-found: 7

