URL: http://www.cs.rice.edu/~kfisler/Pubs/cav97.ps
Refering-URL: http://www.cs.rice.edu/~kfisler/publications.html
Root-URL: 
Email: kfisler@cs.rice.edu  
Title: Containment of Regular Languages in Non-Regular Timing Diagram Languages is Decidable  
Author: Kathi Fisler 
Address: 6100 S. Main, MS 132 Houston, TX 77005-1892  
Affiliation: Department of Computer Science Rice University  
Abstract: Parametric timing constraints are expressed naturally in timing diagram logics. Algorithmic verification of parametrically constrained timing properties is a difficult problem, known to be undecidable in most general cases. This paper establishes that a class of parametrically constrained timing properties can be verified algorithmically against finite-state systems; alternatively stated, containment by a regular language is shown decidable for a class of language properties (regular and non regular) expressible in our timing diagram logic. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Rajeev Alur, Thomas A. Henzinger, and Moshe Y. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In Proc. of the 25th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 592-601, </pages> <year> 1993. </year>
Reference-contexts: Although some of these efforts support quantitative timing constraints (those using numeric constants), none support parametric timing constraints (those allowing variables over numerals). Alur, Henzinger, and Vardi have studied parametric timing constraints for real-time systems <ref> [1] </ref>. They defined a theory of parametric timed automata with multiple clocks for tracking parametric values and established that language emptiness is decidable when one clock is constrained by parameters, undecidable when three or more clocks are constrained by parameters, and an open problem when two clocks are so constrained. <p> The arrows indicate temporal ordering, while the annotations on the arrows indicate the lower and upper bounds on the time passing between the related events: annotation "=n" (shorthand for [n,n]) indicates that the lower and upper bounds are the same, while annotation "&gt; 3" (shorthand for <ref> [3, 1] </ref>), indicates a lower bound of 3 but no upper bound. Unannotated arrows have time bound [1, 1] by default. Valid bound expressions consist of natural numbers, variables, and arbitrary addition and subtraction expressions over them, as well as the symbol 1. <p> Unannotated arrows have time bound <ref> [1, 1] </ref> by default. Valid bound expressions consist of natural numbers, variables, and arbitrary addition and subtraction expressions over them, as well as the symbol 1. The labels in the shaded area are for explanatory purposes only and are not part of the timing diagram. <p> L); (p 5 ; R); (p 6 ; F )g) Relation O contains five elements, the first four corresponding to the arrows and the fifth to the synchronization line: O = f ((a; p 1 ); (a; p 2 ); [n; n]); ((a; p 2 ); (b; p 3 ); <ref> [1; 1] </ref>); ((b; p 4 ); (a; p 5 ); [3; 1]); Although we have provided only an example here, the process of representing a timing diagram in this tuple form can be formalized as a straightforward parsing procedure. <p> Relation O contains five elements, the first four corresponding to the arrows and the fifth to the synchronization line: O = f ((a; p 1 ); (a; p 2 ); [n; n]); ((a; p 2 ); (b; p 3 ); [1; 1]); ((b; p 4 ); (a; p 5 ); <ref> [3; 1] </ref>); Although we have provided only an example here, the process of representing a timing diagram in this tuple form can be formalized as a straightforward parsing procedure. <p> Languages accepted by 1-2DCM can be characterized by the number of times the counter changes between incrementing and decrementing while reading the input tape. Denoting this parameter by r, the following results about 1-2DCM (r) are due to Ibarra et al. [8]: Theorem 1 <ref> (Ibarra et al., 1993) </ref> The emptiness problem for 1-2DCM (r) is decidable for every r 1. - r 1-2DCM (r) is effectively closed under complementation, intersection, and union. The containment and equivalence problems for S r 1-2DCM (r) are decidable.
Reference: 2. <author> Bachi Berkane, Simona Gandrabur, and Eduard Cerny. </author> <title> Timing diagrams: semantics and timing analysis. </title> <institution> LASSO Laboratory, University of Montreal, </institution> <year> 1996. </year>
Reference-contexts: Algorithmic verification has been applied to requirements expressed as timing diagrams by translating the diagrams into existing formalisms such as VHDL [11] and timed automata <ref> [2] </ref>. Although some of these efforts support quantitative timing constraints (those using numeric constants), none support parametric timing constraints (those allowing variables over numerals). Alur, Henzinger, and Vardi have studied parametric timing constraints for real-time systems [1].
Reference: 3. <author> J.A. Brzozowski, T. Gahlinger, and F. Mavaddat. </author> <title> Consistency and satisfiability of waveform timing specifications. </title> <journal> Networks, </journal> <volume> 21 </volume> <pages> 91-107, </pages> <year> 1991. </year>
Reference-contexts: Timing diagrams have been used formally in a variety of hardware reasoning tasks. Brzozowski, Gahlinger, and Mavaddat provided algorithms for testing consistency and satisfiability of timing specifications given as timing diagrams in the context of interfacing components <ref> [3] </ref>; similar efforts have been undertaken by Cerny and Khordoc [4]. <p> The arrows indicate temporal ordering, while the annotations on the arrows indicate the lower and upper bounds on the time passing between the related events: annotation "=n" (shorthand for [n,n]) indicates that the lower and upper bounds are the same, while annotation "&gt; 3" (shorthand for <ref> [3, 1] </ref>), indicates a lower bound of 3 but no upper bound. Unannotated arrows have time bound [1, 1] by default. Valid bound expressions consist of natural numbers, variables, and arbitrary addition and subtraction expressions over them, as well as the symbol 1. <p> Relation O contains five elements, the first four corresponding to the arrows and the fifth to the synchronization line: O = f ((a; p 1 ); (a; p 2 ); [n; n]); ((a; p 2 ); (b; p 3 ); [1; 1]); ((b; p 4 ); (a; p 5 ); <ref> [3; 1] </ref>); Although we have provided only an example here, the process of representing a timing diagram in this tuple form can be formalized as a straightforward parsing procedure.
Reference: 4. <author> E. Cerny and K. Khordoc. </author> <title> Interface specifications with conjunctive timing constraints: realizability and compatibility. </title> <booktitle> In Second AMAST Workshop on Real-Time Systems, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Timing diagrams have been used formally in a variety of hardware reasoning tasks. Brzozowski, Gahlinger, and Mavaddat provided algorithms for testing consistency and satisfiability of timing specifications given as timing diagrams in the context of interfacing components [3]; similar efforts have been undertaken by Cerny and Khordoc <ref> [4] </ref>.
Reference: 5. <author> Kathryn Fisler. </author> <title> A Unified Approach to Hardware Verification Through a Heterogeneous Logic of Design Diagrams. </title> <type> PhD thesis, </type> <institution> Indiana University, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: parameterized timing problems potentially requiring multiple clocks for which containment by a regular language is decidable. 2 Timing Diagrams and Their Languages This work uses a formal logic of timing diagrams (called TDL) developed as part of our study of diagrammatic representations as formal specification languages for design and verification <ref> [5] </ref>. Starting from fairly common timing diagram notations, we define timing diagram semantics relative to formal languages. TDL is expressively incomparable to existing temporal logics such as LTL. <p> TDL can not express G (p ! q) because it is not possible to make disjunctive statements within a TDL timing diagram. In separate work, we are investigating calculi over timing diagrams that would relax these restrictions <ref> [5] </ref>. Due to space constraints, only the invariant semantics is defined in the remainder of this section. The iterative semantics is defined formally in [5]. <p> In separate work, we are investigating calculi over timing diagrams that would relax these restrictions <ref> [5] </ref>. Due to space constraints, only the invariant semantics is defined in the remainder of this section. The iterative semantics is defined formally in [5]. Tuples hT; S; Xi capture a timing diagram, its set of assumed time points, and its fixed-level constraints; the term "timing diagram" is henceforth overloaded to also refer to one of these tuples. <p> Based on the syntax of T , we can bound the number of counter reversals required for a 1-2DCM to test the time bound constraints of T over an arbitrary word; this follows from results in <ref> [5] </ref>. Therefore, we can bound the number of counter reversals required in a test of some fixed number of index assignment searches over a given timing diagram.
Reference: 6. <editor> Werner Grass, et al. </editor> <title> Transformation of timing diagram specifications into VHDL code. </title> <booktitle> In Proc. of Computer Hardware Description Languages and Their Applications, </booktitle> <pages> pages 659-668, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Several researchers have proposed using algebras of timing diagrams annotated with various programming language constructs for ? This research was conducted while the author was a graduate student at Indiana University, with financial support from AT&T Bell Laboratories under the PhD Fellowship Program. the behavioral specification of designs <ref> [6, 9, 10] </ref>. Algorithmic verification has been applied to requirements expressed as timing diagrams by translating the diagrams into existing formalisms such as VHDL [11] and timed automata [2].
Reference: 7. <author> Oscar H. Ibarra. </author> <title> Reversal-bounded multicounter machines and their decision problems. </title> <journal> Journal of the ACM, </journal> <volume> 25(1) </volume> <pages> 116-133, </pages> <month> January </month> <year> 1978. </year>
Reference-contexts: The following formal definition is adapted from <ref> [7] </ref>. Definition 4 1.
Reference: 8. <author> Oscar H. Ibarra, Tao Jiang, Nicholas Tran, and Hui Wang. </author> <title> New decidability results concerning two-way counter machines and applications. </title> <booktitle> In Proc. of the 20th International Colloquium on Automata, Languages, and Programming, 1993. Lecture Notes in Computer Science 700. </booktitle>
Reference-contexts: Languages accepted by 1-2DCM can be characterized by the number of times the counter changes between incrementing and decrementing while reading the input tape. Denoting this parameter by r, the following results about 1-2DCM (r) are due to Ibarra et al. <ref> [8] </ref>: Theorem 1 (Ibarra et al., 1993) The emptiness problem for 1-2DCM (r) is decidable for every r 1. - r 1-2DCM (r) is effectively closed under complementation, intersection, and union. The containment and equivalence problems for S r 1-2DCM (r) are decidable.
Reference: 9. <author> K. Khordoc, M. Dufresne, E. Cerny, P. A. Babkine, and A. Silburt. </author> <title> Integrating behavior and timing in executable specifications. </title> <booktitle> In Proc. of Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 385-402, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Several researchers have proposed using algebras of timing diagrams annotated with various programming language constructs for ? This research was conducted while the author was a graduate student at Indiana University, with financial support from AT&T Bell Laboratories under the PhD Fellowship Program. the behavioral specification of designs <ref> [6, 9, 10] </ref>. Algorithmic verification has been applied to requirements expressed as timing diagrams by translating the diagrams into existing formalisms such as VHDL [11] and timed automata [2]. <p> Languages accepted by 1-2DCM can be characterized by the number of times the counter changes between incrementing and decrementing while reading the input tape. Denoting this parameter by r, the following results about 1-2DCM (r) are due to Ibarra et al. [8]: Theorem 1 <ref> (Ibarra et al., 1993) </ref> The emptiness problem for 1-2DCM (r) is decidable for every r 1. - r 1-2DCM (r) is effectively closed under complementation, intersection, and union. The containment and equivalence problems for S r 1-2DCM (r) are decidable.
Reference: 10. <author> Philippe Mooeschler, Hans Peter Amann, and Pausto Pellandini. </author> <title> High-level modeling using extended timing diagrams. </title> <booktitle> In Proc. of the European Design Automation Conference, </booktitle> <pages> pages 494-499, </pages> <year> 1993. </year>
Reference-contexts: Several researchers have proposed using algebras of timing diagrams annotated with various programming language constructs for ? This research was conducted while the author was a graduate student at Indiana University, with financial support from AT&T Bell Laboratories under the PhD Fellowship Program. the behavioral specification of designs <ref> [6, 9, 10] </ref>. Algorithmic verification has been applied to requirements expressed as timing diagrams by translating the diagrams into existing formalisms such as VHDL [11] and timed automata [2].
Reference: 11. <author> Rainer Schlor. </author> <title> A prover for VHDL-based hardware design. </title> <booktitle> In Proc. of Computer Hardware Description Languages and Their Applications, </booktitle> <month> August </month> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Algorithmic verification has been applied to requirements expressed as timing diagrams by translating the diagrams into existing formalisms such as VHDL <ref> [11] </ref> and timed automata [2]. Although some of these efforts support quantitative timing constraints (those using numeric constants), none support parametric timing constraints (those allowing variables over numerals). Alur, Henzinger, and Vardi have studied parametric timing constraints for real-time systems [1].
References-found: 11

