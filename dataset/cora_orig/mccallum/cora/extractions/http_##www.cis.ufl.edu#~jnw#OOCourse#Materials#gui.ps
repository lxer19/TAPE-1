URL: http://www.cis.ufl.edu/~jnw/OOCourse/Materials/gui.ps
Refering-URL: http://www.cis.ufl.edu/~jnw/OOCourse/
Root-URL: http://www.cis.ufl.edu
Title: Graphical User Interfaces  
Author: Tim budd 
Date: November 14, 1994  
Abstract: This is a rough-draft for a proposed new chapter to be included in the second edition of my book "An Introduction to Object Oriented Programming", published by Addison-Wesley, 1991. It will probably appear between the current chapters 15 and 16. Constructive comments and criticism will be gratefully appreciated. (No date has been set for the second edition).
Abstract-found: 1
Intro-found: 1
Reference: [LaLonde 91] <author> Wilf R. LaLonde and John R. Pugh, </author> <title> Inside Smalltalk, </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: By providing example or template classes from which the user can subclass, the Smalltalk-80 standard class library makes the creation of new user interfaces relatively easy. A very complete description of the MVC model can be found in Volume II of the book Inside Smalltalk <ref> [LaLonde 91] </ref>. 4 The Interactor Model One complaint that is sometimes heard about the MVC model concerns the separation of input handling from output handling.
Reference: [Linton 89] <author> Mark A. Linton, John M. Vlissides, and Paul R. Calder, </author> <title> "Composing User Interfaces with InterViews," </title> <journal> Computer, </journal> <volume> 22(2): </volume> <pages> 8-22, </pages> <year> 1989. </year>
Reference-contexts: Yet these two tasks are often intimately tied together, a fact reflected in the strong ties that bind these two portions of the triangle together. The InterViews system <ref> [Linton 89] </ref> simplifies the design of user interfaces by being designed around a single abstraction, the interactor. An interactor occupies a rectangular region of an output device (such as a screen) and is responsible for managing the display in that area.
Reference: [Wilson 90] <author> David A. Wilson, Larray S. Rosenstein and Dan Shafer, </author> <title> Programming with MacApp, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address> <year> 1990. </year> <month> 19 </month>
Reference-contexts: This is exactly what is done by the systems we will describe in the remainder of this chapter. Steve Burbeck of Apple <ref> [Wilson 90] </ref> has described a typical event-driven application built using a system such as the ones we will subsequently describe as being constructed using an "upside down library". <p> Probaby the best known of such systems, and the one we will describe here, is the MacApp library of Object Pascal utilities <ref> [Wilson 90] </ref>. The prototypical Macintosh application is slightly different than the applications we have discussed in the previous sections. A typical Macintosh application is based around the idea of documents.
References-found: 3

