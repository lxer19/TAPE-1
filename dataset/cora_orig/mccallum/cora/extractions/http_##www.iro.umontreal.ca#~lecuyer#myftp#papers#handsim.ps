URL: http://www.iro.umontreal.ca/~lecuyer/myftp/papers/handsim.ps
Refering-URL: http://www.iro.umontreal.ca/~lecuyer/papers.html
Root-URL: http://www.iro.umontreal.ca
Email: Email: lecuyer@iro.umontreal.ca  
Title: CHAPTER 4 RANDOM NUMBER GENERATION 1  
Author: Pierre L'Ecuyer 
Date: 4.1 INTRODUCTION 1998  
Address: Montreal 2  Montreal, C.P. 6128, Succ. Centre-Ville, Montreal, H3C 3J7, Canada.  
Affiliation: Universite de  2 Departement d'informatique et de recherche operationnelle, Universite de  
Abstract: Random numbers are the nuts and bolts of simulation. Typically, all the randomness required by the model is simulated by a random number generator whose output is assumed to be a sequence of independent and identically distributed (IID) U(0; 1) random variables (i.e., continuous random variables distributed uniformly over the interval (0; 1)). These random numbers are then transformed as needed to simulate random variables from different probability distributions, such as the normal, exponential, Poisson, binomial, geometric, discrete uniform, etc., as well as multivariate distributions and more complicated random objects. In general, the validity of the transformation methods depends strongly on the IID U (0; 1) assumption. But this assumption is false, since the random number generators are actually simple deterministic programs trying to fool the user by producing a deterministic sequence that looks random. What could be the impact of this on the simulation results? Despite this problem, are there "safe" generators? What about the generators commonly available in system libraries and simulation packages? If they are not satisfactory, how can we build better ones? Which ones should be used, and where is the code? These are some of the topics addressed in this chapter. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Aiello, W., S. Rajagopalan and R. </author> <title> Venkatesan (1996). Design of practical and provably good random number generators. </title> <type> Manuscript (contact venkie@bellcore.com). </type>
Reference-contexts: One can identify s n with x n and the state space S is the set f0; : : : ; m 1g. To produce values in the interval <ref> [0; 1] </ref>, one can simply define the output function G by u n = G (x n ) = x n =m. When c = 0, this generator is called a multiplicative linear congruential generator (MLCG). The maximal period length for the LCG is m in general. <p> Structural analysis, on the other hand, studies the mathematical structure underlying the successsive values produced by the generator, most often over its entire period length. For example, vectors of t successive output values of a LCG can be viewed as points in the t-dimensional unit hypercube <ref> [0; 1] </ref> t . It turns out that all these points, over the entire period of the generator, form a regular lattice structure. As a result, all the points lie in a limited number of equidistant parallel hyperplanes, in each dimension t. <p> Then one may ask to be uniformly spread over U t . For example, if U is a discretization of the unit interval <ref> [0; 1] </ref>, such as U = f0; 1=m; 2=m; : : : ; (m 1)=mg for some large integer m, and if the points of are evenly distributed over U t , they are also (pretty much) evenly distributed over the unit hypercube [0; 1] t . <p> is a discretization of the unit interval <ref> [0; 1] </ref>, such as U = f0; 1=m; 2=m; : : : ; (m 1)=mg for some large integer m, and if the points of are evenly distributed over U t , they are also (pretty much) evenly distributed over the unit hypercube [0; 1] t . Example 3 Suppose that U = f0; 1=100; 2=100; : : : ; 99=100g and that the period of the generator is ae = 10 4 . Here we have jU j = 100 and ae = jU j 2 . <p> In dimension 3, for instance, we can cover only 10 4 points out of 10 6 . We would like those 10 4 points that are covered to be very uniformly distributed over the unit cube <ref> [0; 1] </ref> 3 . An even distribution of over U t , in all dimensions t, will be our basis for discriminating among generators. <p> This captures both uniformity and independence: If u n = (u n ; : : : ; u n+t1 ) is generated according to the uniform distribution over <ref> [0; 1] </ref> t , the components of u n are independent and uniformly distributed over [0; 1]. <p> This captures both uniformity and independence: If u n = (u n ; : : : ; u n+t1 ) is generated according to the uniform distribution over <ref> [0; 1] </ref> t , the components of u n are independent and uniformly distributed over [0; 1]. This idea of looking at what happens when the seed is random, for a given finite sequence, is very similar to the scanning ensemble idea of Compagner [11, 12], except that we use the framework of probability theory instead. <p> Over small fractions of the period length, the available bounds on the discrepancy are more in accordance with the law of the iterated logarithm [100]. This is yet another important justification for never using more than a negligible fraction of the period. Suppose now that numbers are generated in <ref> [0; 1] </ref> with L fractional binary digits. This gives resolution 2 L , which means that all u n 's are multiples of 2 L . It then follows ([102]) that D fl (t) N 2 L for all t 1 and N 1. <p> The output function can be defined simply by u n = G (s n ) = x n =m, which gives a value in <ref> [0; 1] </ref>, or by a more refined transformation if a better resolution than 1=m is required. The special case where k = 1 is the MLCG mentioned previously. <p> The two most widely known combination methods are: 1. Shu*ing one sequence with another or with itself. 2. Adding two or more integer sequences modulo some integer m 0 , or adding sequences of real numbers in <ref> [0; 1] </ref> modulo 1, or adding binary fractions bitwise modulo 2. Shu*ing one LCG with another can be accomplished as follows. Fill up a table of size d with the first d output values from the first LCG (suggested values of d go from 2 up to 128 or more). <p> Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See [5, 59, 78] for overviews and discussions. An interesting idea, pursued for instance in 45 <ref> [1] </ref>, is to combine a slow but cryptographically strong generator (e.g., a polynomial-time perfect one) with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step. The result is an interesting compromise between speed, size, and security. In [1], it is also suggested to use <p> idea, pursued for instance in 45 <ref> [1] </ref>, is to combine a slow but cryptographically strong generator (e.g., a polynomial-time perfect one) with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step. The result is an interesting compromise between speed, size, and security. In [1], it is also suggested to use a block cipher encryption algorithm for the slow generator. These authors actually use triple-DES (three passes over the well-known data encryption standard algorithm, with three different keys), combined with a linear hashing function defined by a matrix.
Reference: 2. <author> Anderson, S. L. </author> <year> (1990). </year> <title> Random number generators on vector supercomputers and other advanced architecture. </title> <journal> SIAM Review, </journal> <volume> Vol. 32, </volume> <pages> pp. 221-251. </pages>
Reference-contexts: For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 22, 93, 109] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada Grant ODGP0110050 and SMF0169893, and FCAR-Quebec Grant 93ER1654. Thanks to Christos Alexopoulos, Jerry Banks, Raymond Couture, Hannes Leeb, Thierry Moreau, and Richard Simard for their helpful comments.
Reference: 3. <author> Atkinson, A. C. </author> <year> (1980). </year> <title> Tests of pseudo-random numbers. </title> <journal> Applied Statistics, </journal> <volume> Vol. 29, </volume> <pages> pp. 164-171. </pages>
Reference-contexts: Consider, for example, an MLCG for which m is a power of 2, a mod 8 = 5, and x 0 is odd. The t-dimensional points constructed from successive values produced by this generator form a subgrid of L t containing one-fourth of the points <ref> [3, 50] </ref>. For a LCG with m a power of 2 and c 6= 0, with full period length ae = m, the points all lie in a grid that is a shift of the lattice L t associated with the corresponding MLCG (with the same a amd m).
Reference: 4. <author> Blum, L., M. Blum and M. </author> <month> Schub </month> <year> (1986). </year> <title> A simple unpredictable pseudo-random number generator. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 15, No. 2, </volume> <pages> pp. 364-383. </pages>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 59, 78] </ref> and other references given there). Are efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not such a family exists. But some generator families are conjectured to be polynomial-time perfect. <p> Are efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not such a family exists. But some generator families are conjectured to be polynomial-time perfect. The one with apparently the best behavior so far is the BBS, introduced by Blum, Blum, and Shub <ref> [4] </ref>, explained in the next example. Example 2 The BBS generator of size k is defined as follows. <p> The relevant conjecture here 8 is that with probability at least 1 e k* for some * &gt; 0, factoring m (i.e., finding p or q, given m) cannot be done in polynomial time (in k). Under this conjecture, the BBS generator has been proved polynomial-time perfect <ref> [4, 124] </ref>. Now, a down-to-earth question is: How large should be k to be safe in practice? Also, how small should be K? Perhaps no one really knows. A k larger than a few thousands is probably pretty safe but makes the generator too slow for general simulation use.
Reference: 5. <author> Boucher, M. </author> <year> (1994). </year> <title> La generation pseudo-aleatoire cryptographiquement securitaire et ses considerations pratiques. </title> <type> Master's thesis, </type> <institution> Departement d'I.R.O., Universite de Montreal. </institution>
Reference-contexts: An implementation based on fast modular multiplication is proposed by Moreau [99]. Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See <ref> [5, 59, 78] </ref> for overviews and discussions. An interesting idea, pursued for instance in 45 [1], is to combine a slow but cryptographically strong generator (e.g., a polynomial-time perfect one) with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step.
Reference: 6. <editor> Brassard, G. </editor> <booktitle> (1988). Modern Cryptology ATutorial, volume 325 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag. </publisher>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 59, 78] </ref> and other references given there). Are efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not such a family exists. But some generator families are conjectured to be polynomial-time perfect.
Reference: 7. <author> Bratley, P., B. L. Fox and L. E. </author> <title> Schrage (1987). A Guide to Simulation, second edition. </title> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference-contexts: Since simulations often consume several hours of CPU time, this is significant. The memory size used by a generator might also be important in general, especially since simulations often use several generators in parallel, for instance to maintain synchronization for variance reduction purposes (see Section 4.6 and <ref> [7, 60] </ref> for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques [7, 55, 60, 113]. <p> for variance reduction purposes (see Section 4.6 and [7, 60] for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques <ref> [7, 55, 60, 113] </ref>. Repeatability is a major advantage of pseudorandom sequences over sequences generated by physical devices. <p> For k = 1 and p = 2, an upper bound on the period length of the ith least significant bit of x n is max (1; 2 i2 ) <ref> [7] </ref>, and if a full cycle is split into 2 d equal segments, all segments are identical except for their d most significant bits [20, 26]. <p> Then, for any positive integer x &lt; m, the following instructions have the same effect as the assignment x ax mod m, but with all intermediate (integer) results remaining strictly between m and m <ref> [7, 61, 107] </ref>: y bx=qc; IF x &lt; 0 THEN x x + m END. As an illustration, if m = 2 31 1 and a = 16807, the generator satisfies the condition, since 16807 &lt; p m. In this case, one has q = 127773 and r = 2836. <p> It is used in the GPSS/H simulation environment. The second multiplier, a = 16807, was originally proposed in [83], is suggested in many simulation books and papers (e.g., <ref> [7, 107, 114] </ref>) and appears in several software systems such as the SLAM II and SIMAN simulation programming languages, MATLAB [94], the IMSL statistical library [54], and in operating systems for the IBM and Macintosh computers. It satisfies condition (5).
Reference: 8. <author> Brown, M. and H. </author> <title> Solomon (1979). On combining pseudorandom number generators. </title> <journal> Annals of Statistics, </journal> <volume> Vol. 1, </volume> <pages> pp. 691-695. 56 </pages>
Reference-contexts: See [10, 57, 60, 62, 87] and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. Some authors (e.g., <ref> [8, 46, 87] </ref>) have also given theoretical results which (on the surface) appear to "prove" that the output of a combined generator is "more random" than (or at least "as random" as) the output of each of its components.
Reference: 9. <author> Chen, J. and P. </author> <title> Whitlock (1995). Implementation of a distributed pseudorandom number generator. </title> <editor> In H. Niederreiter and P. J.-S. Shiue, editors, </editor> <title> Monte Carlo and Quasi-Monte Carlo Methods in Scientific Computing, </title> <booktitle> number 106 in Lecture Notes in Statistics, </booktitle> <pages> pp. 168-185. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 22, 93, 109] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada Grant ODGP0110050 and SMF0169893, and FCAR-Quebec Grant 93ER1654. Thanks to Christos Alexopoulos, Jerry Banks, Raymond Couture, Hannes Leeb, Thierry Moreau, and Richard Simard for their helpful comments.
Reference: 10. <author> Collings, B. J. </author> <year> (1987). </year> <title> Compound random number generators. </title> <journal> Journal of the American Statistical Association, </journal> <volume> Vol. 82, No. 398, </volume> <pages> pp. 525-527. </pages>
Reference-contexts: See <ref> [10, 57, 60, 62, 87] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well.
Reference: 11. <author> Compagner, A. </author> <year> (1991). </year> <title> The hierarchy of correlations in random binary sequences. </title> <journal> Journal of Statistical Physics, </journal> <volume> Vol. 63, </volume> <pages> pp. 883-896. </pages>
Reference-contexts: This idea of looking at what happens when the seed is random, for a given finite sequence, is very similar to the scanning ensemble idea of Compagner <ref> [11, 12] </ref>, except that we use the framework of probability theory instead. The reader may have already noticed that under these requirements, will not look at all like a random set of points, because its distribution over U t is too even (or superuniform, as some authors say [116]). <p> For specialized jump-ahead algorithms, see [22, 66]. Unfortunately, such simple recurrences lead to LFSR generators with bad structural properties (see <ref> [11, 66, 97, 120] </ref> and other references therein). But combining several recurrences of this type can give good generators.
Reference: 12. <author> Compagner, A. </author> <year> (1995). </year> <title> Operational conditions for random number generation. </title> <journal> Physical Review E, </journal> <volume> Vol. 52, No. 5-B, </volume> <pages> pp. 5634-5645. </pages>
Reference-contexts: This idea of looking at what happens when the seed is random, for a given finite sequence, is very similar to the scanning ensemble idea of Compagner <ref> [11, 12] </ref>, except that we use the framework of probability theory instead. The reader may have already noticed that under these requirements, will not look at all like a random set of points, because its distribution over U t is too even (or superuniform, as some authors say [116]).
Reference: 13. <author> Couture, R. and P. </author> <month> L'Ecuyer </month> <year> (1994). </year> <title> On the lattice structure of certain linear con-gruential sequences related to AWC/SWB generators. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 62, No. 206, </volume> <pages> pp. 798-808. </pages>
Reference-contexts: L'Ecuyer and Couture [77] show how to construct bases for such lattices, how to compute d t (I), and so on. The following provides "quick-and dirty" lower bounds on d t (I) <ref> [13, 67] </ref>: 1. <p> They are analyzed in [16], where a better set of parameters in terms of the lattice structure of the LCG is also given. 36 Special cases of the MWC include the add-with-carry (AWC) and subtract-with--borrow (SWB) generators, originally proposed by Marsaglia and Zaman [91] and subsequently analyzed in <ref> [13, 122] </ref>. For the AWC, put a r = a k = a 0 = 1 for 0 &lt; r &lt; k and all other a ` equal to zero.
Reference: 14. <author> Couture, R. and P. </author> <month> L'Ecuyer </month> <year> (1995). </year> <title> Linear recurrences with carry as random number generators. </title> <booktitle> In Proceedings of the 1995 Winter Simulation Conference, </booktitle> <pages> pp. 263-267. </pages>
Reference-contexts: For each n, x n 2 ZZ b , c n 2 ZZ, and the state at step n is s n = (x n ; : : : ; x n+k1 ; c n ). As in <ref> [14, 16, 88] </ref>, we call this a multiply-with-carry (MWC) generator. The idea was suggested in [58, 91]. The recurrence looks like that of an MRG, except that a carry c n is propagated between the steps.
Reference: 15. <author> Couture, R. and P. </author> <month> L'Ecuyer </month> <year> (1996). </year> <title> Computation of a shortest vector and Minkowski-reduced bases in a lattice. </title> <note> In preparation. </note>
Reference-contexts: Computing a shortest nonzero vector in a lattice L means finding the combination of values of z j in (6) giving the shortest V . This is a quadratic optimization problem with integer variables and can be solved by a branch-and-bound algorithm, as in <ref> [15, 40] </ref>. In these papers the authors use an ellipsoid method to compute the bounds on the z j for the branch-and-bound. This appears to be the best (general) approach known to date and is certainly much faster than the algorithm given in [23] and [57].
Reference: 16. <author> Couture, R. and P. </author> <month> L'Ecuyer </month> <year> (1997). </year> <title> Distribution properties of multiply-with-carry random number generators. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 66, No. 218, </volume> <pages> pp. 591-607. </pages>
Reference-contexts: For each n, x n 2 ZZ b , c n 2 ZZ, and the state at step n is s n = (x n ; : : : ; x n+k1 ; c n ). As in <ref> [14, 16, 88] </ref>, we call this a multiply-with-carry (MWC) generator. The idea was suggested in [58, 91]. The recurrence looks like that of an MRG, except that a carry c n is propagated between the steps. <p> Consider the LCG: z n = az n1 mod m; w n = z n =m: (20) There is a close correspondence between the LCG (20) and the MWC generator, assuming that their initial states agree <ref> [16] </ref>. More specifically, if w n = i=1 35 holds for n = 0, then it holds for all n. As a consequence, ju n w n j 1=b for all n. <p> How can one characterize the recurrent states? They are (essentially) the states s 0 that correspond to a given z 0 via (20)-(21). Couture and L'Ecuyer <ref> [16] </ref> give necessary and sufficient conditions for a state s 0 to be recurrent. In particular, if a ` 0 for ` 1, all the recurrent states satisfy 0 c n &lt; a 1 + + a k . <p> Therefore, the period length cannot reach m 1 even if m is prime. But if (m 1)=2 is odd and 2 is primitive mod m (e.g., if (m 1)=2 is prime), then (20) has period length ae = (m 1)=2. Couture and L'Ecuyer <ref> [16] </ref> show that the lattice structure of the LCG (20) satisfies the following: In dimensions t k, the distances d t do not depend on the parameters a 1 ; : : : ; a k , but only on b, while in dimension t = k + 1, the shortest <p> It is also better to put more weight on a k , to get a larger m. So one should choose a k close to b, with a 0 + + a k b. Marsaglia [88] proposed two specific parameter sets. They are analyzed in <ref> [16] </ref>, where a better set of parameters in terms of the lattice structure of the LCG is also given. 36 Special cases of the MWC include the add-with-carry (AWC) and subtract-with--borrow (SWB) generators, originally proposed by Marsaglia and Zaman [91] and subsequently analyzed in [13, 122].
Reference: 17. <author> Couture, R., P. L'Ecuyer and S. </author> <title> Tezuka (1993). On the distribution of k-dimensional vectors for simple and combined Tausworthe sequences. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 60, No. 202, </volume> <pages> pp. 749-761, </pages> <month> S11-S16. </month>
Reference-contexts: Fushimi [44] gives an initialization procedure satisfying this condition. Couture et al. <ref> [17] </ref> show how the (t; `)-equidistribution of simple and combined LFSR generators can be analyzed via the lattice structure of an equivalent LCG in a space of formal series.
Reference: 18. <author> Coveyou, R. R. and R. D. </author> <month> MacPherson </month> <year> (1967). </year> <title> Fourier analysis of uniform random number generators. </title> <journal> Journal of the ACM, </journal> <volume> Vol. 14, </volume> <pages> pp. 100-119. </pages>
Reference-contexts: This appears to be the best (general) approach known to date and is certainly much faster than the algorithm given in [23] and [57]. This idea of analyzing d t was introduced by Coveyou and MacPherson <ref> [18] </ref> through the viewpoint of spectral analysis. For this historical reason, computing d t is often called the spectral test .
Reference: 19. <author> Cressie, N. </author> <year> (1993). </year> <title> Statistics for Spatial Data. </title> <publisher> Wiley, </publisher> <address> New York. </address>
Reference-contexts: So, relevance depends on the application. For simulations that deal with random points in space, the close-pairs test could be relevant. Such simulations are performed, for example, to estimate the (unknown) distribution of certain random variables in spatial statistics <ref> [19] </ref>. As an illustration, suppose one wishes to estimate the distribution of min i;j D n;i;j for some fixed n, by Monte Carlo simulation. For this purpose I would not trust the generators G1 to G5. The effect of failing the serial or close-pairs test in general is unclear.
Reference: 20. <author> De Matteis, A. and S. </author> <title> Pagnutti (1988). Parallelization of random number generators and long-range correlations. </title> <journal> Numerische Mathematik, </journal> <volume> Vol. 53, </volume> <pages> pp. 595-608. </pages>
Reference-contexts: and p = 2, an upper bound on the period length of the ith least significant bit of x n is max (1; 2 i2 ) [7], and if a full cycle is split into 2 d equal segments, all segments are identical except for their d most significant bits <ref> [20, 26] </ref>. For k &gt; 1 and p = 2, the upper bound on the period length of the ith least significant bit is (2 k 1)2 i1 . So the low-order bits are typically much too regular when p = 2.
Reference: 21. <author> De Matteis, A. and S. </author> <title> Pagnutti (1990). A class of parallel random number generators. </title> <booktitle> 57 Parallel Computing, </booktitle> <volume> Vol. 13, </volume> <pages> pp. 193-198. </pages>
Reference-contexts: What is long enough? Suppose that a simulation experiment takes N random numbers from a sequence of length ae. Several reasons justify the need to take ae AE N (see, e.g., <ref> [21, 64, 86, 102, 112] </ref>). Based on geometric arguments, Ripley [112] suggests that ae AE N 2 for linear congruential generators. The papers [75, 79] provide strong experimental support for this, based on extensive empirical tests. Our previous discussion also supports the view that ae must be huge in general.
Reference: 22. <author> Deak, I. </author> <year> (1990). </year> <title> Uniform random number generators for parallel computers. </title> <journal> Parallel Computing, </journal> <volume> Vol. 15, </volume> <pages> pp. 155-164. </pages>
Reference-contexts: An efficient computer code that implements the sequence (23), for the case where the recurrence has the form x n = (x nr + x nk ) mod 2 with s r and 2r &gt; k, can be found in [66, 120, 121]. For specialized jump-ahead algorithms, see <ref> [22, 66] </ref>. Unfortunately, such simple recurrences lead to LFSR generators with bad structural properties (see [11, 66, 97, 120] and other references therein). But combining several recurrences of this type can give good generators. <p> For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 22, 93, 109] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada Grant ODGP0110050 and SMF0169893, and FCAR-Quebec Grant 93ER1654. Thanks to Christos Alexopoulos, Jerry Banks, Raymond Couture, Hannes Leeb, Thierry Moreau, and Richard Simard for their helpful comments.
Reference: 23. <author> Dieter, U. </author> <year> (1975). </year> <title> How to calculate shortest vectors in a lattice. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 29, No. 131, </volume> <pages> pp. 827-833. </pages>
Reference-contexts: Then this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studies and to see how to construct a basis for this lattice L t and its dual, see <ref> [23, 57, 73, 77] </ref>. <p> In these papers the authors use an ellipsoid method to compute the bounds on the z j for the branch-and-bound. This appears to be the best (general) approach known to date and is certainly much faster than the algorithm given in <ref> [23] </ref> and [57]. This idea of analyzing d t was introduced by Coveyou and MacPherson [18] through the viewpoint of spectral analysis. For this historical reason, computing d t is often called the spectral test .
Reference: 24. <author> Dudewicz, E. J. and T. G. </author> <month> Ralley </month> <year> (1981). </year> <title> The Handbook of Random Number Generation and Testing with TESTRAND Computer Code. </title> <publisher> American Sciences Press, </publisher> <address> Columbus, Ohio. </address>
Reference-contexts: A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND <ref> [24] </ref>. A newer battery of tests is DIEHARD, designed by Marsaglia [87, 89]. It contains more stringent tests than those in [57], in the sense that more generators tend to fail some of the tests.
Reference: 25. <author> Durbin, J. </author> <year> (1973). </year> <title> Distribution Theory for Tests Based on the Sample Distribution Function. </title> <booktitle> SIAM CBMS-NSF Regional Conference Series in Applied Mathematics. </booktitle> <publisher> SIAM, </publisher> <address> Philadelphia. </address>
Reference-contexts: This empirical distribution is then compared to the theoretical distribution of T under H 0 , say F , via a standard goodness-of-fit test, such as the Kolmogorov-Smirnov (KS) or Anderson-Darling tests <ref> [25, 115] </ref>. One version of the KS goodness-of-fit test uses the statistic D N = sup j ^ F N (x) F (x)j; for which an approximation of the distribution under H 0 is available, assuming that the distribution F is continuous [25]. <p> One version of the KS goodness-of-fit test uses the statistic D N = sup j ^ F N (x) F (x)j; for which an approximation of the distribution under H 0 is available, assuming that the distribution F is continuous <ref> [25] </ref>. Once the value d N of the statistic D N is known, one computes the p-value of the test, defined as ffi 2 = P [D N &gt; d N j H 0 ]; which is again a U (0; 1) random variable under H 0 .
Reference: 26. <author> Durst, M. J. </author> <year> (1989). </year> <title> Using linear congruential generators for parallel random number generation. </title> <booktitle> In Proceedings of the 1989 Winter Simulation Conference, </booktitle> <pages> pp. 462-466. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: But there are several counterexamples, such as for certain large simulations in particle physics <ref> [26] </ref>, or when using intensive Monte Carlo simulation to estimate with precision the distribution of a statistic that is fast to compute but requires many random numbers. <p> and p = 2, an upper bound on the period length of the ith least significant bit of x n is max (1; 2 i2 ) [7], and if a full cycle is split into 2 d equal segments, all segments are identical except for their d most significant bits <ref> [20, 26] </ref>. For k &gt; 1 and p = 2, the upper bound on the period length of the ith least significant bit is (2 k 1)2 i1 . So the low-order bits are typically much too regular when p = 2.
Reference: 27. <author> Eichenauer, J., H. Grothe, J. Lehn and A. </author> <month> Topuzoglu </month> <year> (1987). </year> <title> A multiple recursive nonlinear congruential pseudorandom number generator. </title> <journal> Manuscripta Mathematica, </journal> <volume> Vol. 59, </volume> <pages> pp. 331-346. </pages>
Reference-contexts: The sequence fz n g has period m k1 , under conditions given in [31, 102]. This class of generators was introduced and first studied in <ref> [28, 27, 30] </ref>. For k = 2, (26) is equivalent to the recurrence z n = (a 1 + a 2 z 1 a 1 if z n1 = 0, where a 1 and a 2 are the MRG coefficients.
Reference: 28. <author> Eichenauer, J. and J. </author> <title> Lehn (1986). A nonlinear congruential pseudorandom number generator. </title> <journal> Statistische Hefte, </journal> <volume> Vol. 27, </volume> <pages> pp. 315-326. </pages>
Reference-contexts: The sequence fz n g has period m k1 , under conditions given in [31, 102]. This class of generators was introduced and first studied in <ref> [28, 27, 30] </ref>. For k = 2, (26) is equivalent to the recurrence z n = (a 1 + a 2 z 1 a 1 if z n1 = 0, where a 1 and a 2 are the MRG coefficients.
Reference: 29. <author> Eichenauer, J. and J. </author> <title> Lehn (1987). On the structure of quadratic congruential sequences. </title> <journal> Manuscripta Mathematica, </journal> <volume> Vol. 58, </volume> <pages> pp. 129-140. </pages>
Reference-contexts: Consider the recurrence x n = (ax 2 where a; b; c 2 ZZ m and x n 2 ZZ m for each n. This is studied in <ref> [29, 37, 57, 102] </ref>. If m is a power of 2, this generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd. Its t-dimensional points turn out to lie on a union of grids.
Reference: 30. <author> Eichenauer, J., J. Lehn and A. </author> <month> Topuzoglu </month> <year> (1988). </year> <title> A nonlinear congruential pseudorandom number generator with power of two modulus. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 51, No. 184, </volume> <pages> pp. 757-759. </pages>
Reference-contexts: The sequence fz n g has period m k1 , under conditions given in [31, 102]. This class of generators was introduced and first studied in <ref> [28, 27, 30] </ref>. For k = 2, (26) is equivalent to the recurrence z n = (a 1 + a 2 z 1 a 1 if z n1 = 0, where a 1 and a 2 are the MRG coefficients. <p> As a simple illustrative example, take m = 2 31 1 and a = c = 1. (However, at the moment, we are not in a position to recommend these particular parameters nor any other specific ones.) Inversive congruential generators with power-of-2 moduli have also been studied <ref> [30, 31, 35] </ref>. However, they have have more regular structures than those based on prime moduli [31, 34]. Their low-order bits have the same short period lengths as for the LCGs.
Reference: 31. <author> Eichenauer-Herrmann, J. </author> <year> (1992). </year> <title> Inversive congruential pseudorandom numbers: A tutorial. </title> <journal> International Statistical Reviews, </journal> <volume> Vol. 60, </volume> <pages> pp. 167-176. </pages>
Reference-contexts: Use a nonlinear transition function T . Several types of nonlinear generators have been proposed over the last decade or so, and an impressive volume of theoretical results have been obtained for them. See, for example, <ref> [31, 34, 59, 78, 102, 104] </ref> and other references given there. Here, we give a brief overview of this rapidly developing area. Nonlinear generators avoid lattice structures. Typically, no t-dimensional hyperplane contains more than t overlapping t-tuples of successive values. <p> The sequence fz n g has period m k1 , under conditions given in <ref> [31, 102] </ref>. This class of generators was introduced and first studied in [28, 27, 30]. <p> As a simple illustrative example, take m = 2 31 1 and a = c = 1. (However, at the moment, we are not in a position to recommend these particular parameters nor any other specific ones.) Inversive congruential generators with power-of-2 moduli have also been studied <ref> [30, 31, 35] </ref>. However, they have have more regular structures than those based on prime moduli [31, 34]. Their low-order bits have the same short period lengths as for the LCGs. <p> However, they have have more regular structures than those based on prime moduli <ref> [31, 34] </ref>. Their low-order bits have the same short period lengths as for the LCGs. The idea of combined generators, discussed earlier for the linear case, also applies to nonlinear generators and offers some computational advantages. Huber [52] and Eichenauer-Herrmann [33] introduced and analyzed the following method.
Reference: 32. <author> Eichenauer-Herrmann, J. </author> <year> (1993). </year> <title> Statistical independence of a new class of inversive congruential pseudorandom numbers. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 60, </volume> <pages> pp. 375-384. </pages>
Reference-contexts: For k = 2, (26) is equivalent to the recurrence z n = (a 1 + a 2 z 1 a 1 if z n1 = 0, where a 1 and a 2 are the MRG coefficients. A more direct approach is the explicit inversive congruential method of <ref> [32] </ref>, defined as follows. Let x n = an + c for n 0, where a 6= 0 and c are in ZZ m and m is prime. Then, define z n = x 1 This sequence has period ae = m.
Reference: 33. <author> Eichenauer-Herrmann, J. </author> <year> (1994). </year> <title> On generalized inversive congruential pseudoran 58 dom numbers. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 63, </volume> <pages> pp. 293-299. </pages>
Reference-contexts: Their low-order bits have the same short period lengths as for the LCGs. The idea of combined generators, discussed earlier for the linear case, also applies to nonlinear generators and offers some computational advantages. Huber [52] and Eichenauer-Herrmann <ref> [33] </ref> introduced and analyzed the following method. Take J inversive generators as in (27), with distinct prime moduli m 1 ; : : : ; m J , all larger than 4, and full period length ae j = m j . <p> Conceptually, this is pretty similar to the combined LCGs and MRGs discussed previously, and provides a convenient way to implement an inversive generator with large modulus m. Eichenauer-Herrmann <ref> [33] </ref> shows that this type of generator has favorable asymptotic discrepancy properties, much like (26)-(28). 4.4.2 Quadratic Congruential Generators Suppose that the transformation T is quadratic instead of linear.
Reference: 34. <author> Eichenauer-Herrmann, J. </author> <year> (1995). </year> <title> Pseudorandom number generation by nonlinear methods. </title> <journal> International Statistical Reviews, </journal> <volume> Vol. 63, </volume> <pages> pp. 247-255. </pages>
Reference-contexts: Use a nonlinear transition function T . Several types of nonlinear generators have been proposed over the last decade or so, and an impressive volume of theoretical results have been obtained for them. See, for example, <ref> [31, 34, 59, 78, 102, 104] </ref> and other references given there. Here, we give a brief overview of this rapidly developing area. Nonlinear generators avoid lattice structures. Typically, no t-dimensional hyperplane contains more than t overlapping t-tuples of successive values. <p> Let x n = an + c for n 0, where a 6= 0 and c are in ZZ m and m is prime. Then, define z n = x 1 This sequence has period ae = m. According to <ref> [34] </ref>, this family of generators seems to enjoy the most favorable properties among the currently proposed inversive and quadratic families. <p> However, they have have more regular structures than those based on prime moduli <ref> [31, 34] </ref>. Their low-order bits have the same short period lengths as for the LCGs. The idea of combined generators, discussed earlier for the linear case, also applies to nonlinear generators and offers some computational advantages. Huber [52] and Eichenauer-Herrmann [33] introduced and analyzed the following method.
Reference: 35. <author> Eichenauer-Herrmann, J. and H. </author> <title> Grothe (1992). A new inversive congruential pseudorandom number generator with power of two modulus. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 2, No. 1, </volume> <pages> pp. 1-11. </pages>
Reference-contexts: As a simple illustrative example, take m = 2 31 1 and a = c = 1. (However, at the moment, we are not in a position to recommend these particular parameters nor any other specific ones.) Inversive congruential generators with power-of-2 moduli have also been studied <ref> [30, 31, 35] </ref>. However, they have have more regular structures than those based on prime moduli [31, 34]. Their low-order bits have the same short period lengths as for the LCGs.
Reference: 36. <author> Eichenauer-Herrmann, J., H. Grothe and J. </author> <title> Lehn (1989). On the period length of pseudorandom vector sequences generated by matrix generators. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 52, No. 185, </volume> <pages> pp. 145-148. </pages>
Reference-contexts: Otherwise, if m = p e for p prime and e 1, and k &gt; 1 or p &gt; 2, the upper bound is (p k 1)p e1 <ref> [36] </ref>. Clearly, p = 2 is very convenient from the implementation point of view, because the modulo operation then amounts to chopping-off the higher-order bits.
Reference: 37. <author> Eichenauer-Herrmann, J. and H. </author> <title> Niederreiter (1995). An improved upper bound for the discrepancy of quadratic congruential pseudorandom numbers. </title> <journal> Acta Arithmetica, </journal> <volume> Vol. LXIX.2, </volume> <pages> pp. 193-198. </pages>
Reference-contexts: Consider the recurrence x n = (ax 2 where a; b; c 2 ZZ m and x n 2 ZZ m for each n. This is studied in <ref> [29, 37, 57, 102] </ref>. If m is a power of 2, this generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd. Its t-dimensional points turn out to lie on a union of grids.
Reference: 38. <author> Entacher, K. </author> <year> (1998). </year> <title> Bad subsequences of well-known linear congruential pseudorandom number generators. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 8, No. </volume> <pages> 1. </pages> <note> To appear. </note>
Reference-contexts: For LCGs and MRGs, for example, the lattice structure can be analyzed with such lacunary indices. See <ref> [38, 77] </ref> for more details and numerical examples. 4.6.3 Generators for Parallel Computers Another situation where multiple random number generators are needed is for simulation on parallel processors.
Reference: 39. <author> Ferrenberg, A. M., D. P. Landau and Y. J. </author> <title> Wong (1992). Monte Carlo simulations: Hidden errors from "good" random number generators. </title> <journal> Physical Review Letters, </journal> <volume> Vol. 69, No. 23, </volume> <pages> pp. 3382-3384. </pages>
Reference-contexts: Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications <ref> [39, 49, 75] </ref>. Which are the best tests? No one can really answer this question. If the generator is to be used to estimate the expectation of some random variable T by generating replicates of T , the best test would be the one based on T as a statistic.
Reference: 40. <author> Fincke, U. and M. </author> <title> Pohst (1985). Improved methods for calculating vectors of short length in a lattice, including a complexity analysis. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 44, </volume> <pages> pp. 463-471. </pages>
Reference-contexts: Computing a shortest nonzero vector in a lattice L means finding the combination of values of z j in (6) giving the shortest V . This is a quadratic optimization problem with integer variables and can be solved by a branch-and-bound algorithm, as in <ref> [15, 40] </ref>. In these papers the authors use an ellipsoid method to compute the bounds on the z j for the branch-and-bound. This appears to be the best (general) approach known to date and is certainly much faster than the algorithm given in [23] and [57].
Reference: 41. <author> Fishman, G. S. </author> <year> (1996). </year> <title> Monte Carlo: </title> <booktitle> Concepts, Algorithms, and Applications. Springer Series in Operations Research. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference-contexts: Good generators typically have their ae very close to jSj (otherwise, there is a waste of computer memory). 4.1.2 Example: A Linear Congruential Generator Example 1 The best-known and (still) most widely used types of generators are the simple linear congruential generators (LCGs) <ref> [41, 57, 60, 82] </ref>. <p> In this case, one has q = 127773 and r = 2836. Hormann and Derflinger [51] give a different method, which is about as fast, for the case where m = 2 31 1. Fishman <ref> [41, p. 604] </ref> also uses a different method to implement the LCG with m = 2 31 1 and a = 95070637, which does not satisfy (5). Another approach is to represent all the numbers and perform all the arithmetic modulo m in double-precision floating point. <p> In particular, one can take m = 2. Then fx n g becomes a sequence of bits (zeros and ones) and the u n are constructed by juxtaposing L successive bits from this sequence. This is called a linear feedback shift register (LFSR) or Tausworthe generator <ref> [41, 64, 102, 118] </ref>, although the bits of each u n are often filled in reverse order than in (23).
Reference: 42. <author> Fishman, G. S. and L. S. </author> <title> Moore III (1986). An exhaustive analysis of multiplicative congruential random number generators with modulus 2 31 1. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> Vol. 7, No. 1, </volume> <pages> pp. 24-45. </pages>
Reference-contexts: All these generators have full period length. The LCGs of the first table are well known and most are (or have been) heavily used. For m = 2 31 1, the multiplier a = 742938285 was found by Fishman and Moore <ref> [42] </ref> in an exhaustive search for the MLCGs with the best value of M 6 for this value of m. It is used in the GPSS/H simulation environment.
Reference: 43. <author> Fushimi, M. </author> <year> (1983). </year> <title> Increasing the orders of equidistribution of the leading bits of the Tausworthe sequence. </title> <journal> Information Processing Letters, </journal> <volume> Vol. 16, </volume> <pages> pp. 189-192. </pages>
Reference-contexts: The implementation (24) requires more memory than (23), but may give a faster generator. An important instance of this is the generalized feedback shift register (GFSR) generator <ref> [43, 84, 123] </ref> which we now describe. Take m = 2 and L equal to the computer's word length. The recurrence (17) can then be computed by a bitwise exclusive-or of the X nj for which a j = 1.
Reference: 44. <author> Fushimi, M. </author> <year> (1989). </year> <title> An equivalence relation between Tausworthe and GFSR sequences and applications. </title> <journal> Applied Mathematics Letters, </journal> <volume> Vol. 2, No. 2, </volume> <pages> pp. 135-137. 59 </pages>
Reference-contexts: This GFSR can be viewed as a different way to implement a LFSR generator, provided that it is initialized accordingly, and the structural properties of the GFSR can then be analyzed by analyzing those of the corresponding LFSR generator <ref> [44, 64] </ref>. For the recurrence (17), we need to memorize kL integers in ZZ m . With this memory size, one should expect a period length close to m kL , but the actual period length cannot exceed m k 1. <p> Fushimi <ref> [44] </ref> gives an initialization procedure satisfying this condition. Couture et al. [17] show how the (t; `)-equidistribution of simple and combined LFSR generators can be analyzed via the lattice structure of an equivalent LCG in a space of formal series.
Reference: 45. <author> Fushimi, M. and S. </author> <title> Tezuka (1983). The k-distribution of generalized feedback shift register pseudorandom numbers. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 26, No. 7, </volume> <pages> pp. 516-523. </pages>
Reference-contexts: Full-period LFSR generators are all (bk=sc; s)-equidistributed. Full-period GFSR generators are all (k; 1)-equidistributed, but their (k; `)-equidistribution for ` &gt; 1 depends on the initial state (i.e., on the shifts between the different copies of the MRG). Fushimi and Tezuka <ref> [45] </ref> give a necessary and sufficient condition on this initial state for (t; L)-equidistribution, for t = bk=Lc.
Reference: 46. <author> Good, I. J. </author> <year> (1950). </year> <title> Probability and the Weighting of Evidence. </title> <publisher> Griffin, London. </publisher>
Reference-contexts: See [10, 57, 60, 62, 87] and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. Some authors (e.g., <ref> [8, 46, 87] </ref>) have also given theoretical results which (on the surface) appear to "prove" that the output of a combined generator is "more random" than (or at least "as random" as) the output of each of its components.
Reference: 47. <author> Good, I. J. </author> <year> (1969). </year> <title> How random are random numbers? The American Statistician, </title> <booktitle> Vol. </booktitle> , <pages> pp. 42-45. </pages>
Reference-contexts: Such a procedure is clearly not practical for computer simulations, which often require millions and millions of random numbers. Several other physical devices to produce random noise have been proposed and experiments have been conducted using these generators. These devices include gamma ray counters, noise diodes, and so on <ref> [47, 62] </ref>. Some of these devices have been commercialized and can be purchased to produce random numbers on a computer. But they are cumbersome and they may produce unsatisfactory outputs, as there may be significant correlation between the successive numbers. <p> Law and Kelton [60] present a short (but interesting) historical overview. Further surveys and historical accounts of the old days are provided in <ref> [47, 53, 119] </ref>. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. An illustrative example is the middle-square method, which works as follows (see, e.g., [57, 60]).
Reference: 48. <author> Grothe, H. </author> <year> (1987). </year> <title> Matrix generators for pseudo-random vectors generation. </title> <journal> Statis-tische Hefte, </journal> <volume> Vol. 28, </volume> <pages> pp. 233-238. </pages>
Reference-contexts: If a k-dimensional vector X n follows the recurrence X n = AX n1 mod m, where the k fi k matrix A has a primitive characteristic polynomial P (z) = z k a 1 z k1 a k , then X n also follows the recurrence <ref> [48, 62, 101] </ref> X n = (a 1 X n1 + + a k X nk ) mod m (17) So each component of the vector X n evolves according to (2).
Reference: 49. <author> Hellekalek, P. </author> <year> (1995). </year> <title> Inversive pseudorandom number generators: Concepts, results, and links. </title> <editor> In C. Alexopoulos, K. Kang, W. R. Lilegdon, and D. Goldsman, editors, </editor> <booktitle> Proceedings of the 1995 Winter Simulation Conference, </booktitle> <pages> pp. 255-262. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: They have also succeeded quite well in empirical tests performed so far <ref> [49] </ref>. Fast implementations with specific well-tested parameters are still under development, although several generic implementations are already available [49, 71]. 4.4.1 Inversive Congruential Generators To construct a nonlinear generator with long period, a first idea is simply to add a nonlinear twist to the output of a known generator. <p> They have also succeeded quite well in empirical tests performed so far [49]. Fast implementations with specific well-tested parameters are still under development, although several generic implementations are already available <ref> [49, 71] </ref>. 4.4.1 Inversive Congruential Generators To construct a nonlinear generator with long period, a first idea is simply to add a nonlinear twist to the output of a known generator. <p> Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications <ref> [39, 49, 75] </ref>. Which are the best tests? No one can really answer this question. If the generator is to be used to estimate the expectation of some random variable T by generating replicates of T , the best test would be the one based on T as a statistic. <p> Clearly, G1 to G5 and all other generators of that size are unsuitable for such simulations. 52 4.5.4 Empirical Testing: Summary Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [49, 63, 75, 74, 69, 89, 81] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 50. <author> Hoaglin, D. C. and M. L. </author> <title> King (1978). A remark on algorithm AS 98: The spectral test for the evaluation of congruential pseudo-random generators. </title> <journal> Applied Statistics, </journal> <volume> Vol. 27, </volume> <pages> pp. 375-377. </pages>
Reference-contexts: Consider, for example, an MLCG for which m is a power of 2, a mod 8 = 5, and x 0 is odd. The t-dimensional points constructed from successive values produced by this generator form a subgrid of L t containing one-fourth of the points <ref> [3, 50] </ref>. For a LCG with m a power of 2 and c 6= 0, with full period length ae = m, the points all lie in a grid that is a shift of the lattice L t associated with the corresponding MLCG (with the same a amd m).
Reference: 51. <author> Hormann, W. and G. </author> <month> Derflinger </month> <year> (1993). </year> <title> A portable random number generator well suited for the rejection method. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> Vol. 19, No. 4, </volume> <pages> pp. 489-495. </pages>
Reference-contexts: As an illustration, if m = 2 31 1 and a = 16807, the generator satisfies the condition, since 16807 &lt; p m. In this case, one has q = 127773 and r = 2836. Hormann and Derflinger <ref> [51] </ref> give a different method, which is about as fast, for the case where m = 2 31 1. Fishman [41, p. 604] also uses a different method to implement the LCG with m = 2 31 1 and a = 95070637, which does not satisfy (5).
Reference: 52. <author> Huber, K. </author> <year> (1994). </year> <title> On the period length of generalized inversive pseudorandom number generators. </title> <journal> Applied Algebra in Engineering, Communications, and Computing, </journal> <volume> Vol. 5, </volume> <pages> pp. 255-260. </pages>
Reference-contexts: Their low-order bits have the same short period lengths as for the LCGs. The idea of combined generators, discussed earlier for the linear case, also applies to nonlinear generators and offers some computational advantages. Huber <ref> [52] </ref> and Eichenauer-Herrmann [33] introduced and analyzed the following method. Take J inversive generators as in (27), with distinct prime moduli m 1 ; : : : ; m J , all larger than 4, and full period length ae j = m j .
Reference: 53. <author> Hull, T. E. </author> <year> (1962). </year> <title> Random number generators. </title> <journal> SIAM Review, </journal> <volume> Vol. 4, </volume> <pages> pp. 230-254. </pages>
Reference-contexts: Law and Kelton [60] present a short (but interesting) historical overview. Further surveys and historical accounts of the old days are provided in <ref> [47, 53, 119] </ref>. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. An illustrative example is the middle-square method, which works as follows (see, e.g., [57, 60]).
Reference: 54. <institution> IMSL (1987). IMSL Library Users's Manual, Vol.3. IMSL, Houston, Texas. </institution>
Reference-contexts: The second multiplier, a = 16807, was originally proposed in [83], is suggested in many simulation books and papers (e.g., [7, 107, 114]) and appears in several software systems such as the SLAM II and SIMAN simulation programming languages, MATLAB [94], the IMSL statistical library <ref> [54] </ref>, and in operating systems for the IBM and Macintosh computers. It satisfies condition (5). The IMSL library also has available the two multipliers 397204094 and 950706376, with the same modulus, as well as the possibility of adding a shu*e to the LCG. <p> A large number of empirical investigations performed over the past 30 years strongly support shu*ing and many generators available in software libraries use it (e.g., <ref> [54, 110, 117] </ref>). However, it has two important drawbacks: (1) the effect of shu*ing is not well-enough understood from the theoretical viewpoint, and (2) one does not know how to jump ahead quickly to an arbitrary point in the sequence of the combined generator.
Reference: 55. <author> James, F. </author> <year> (1990). </year> <title> A review of pseudorandom number generators. </title> <journal> Computer Physics Communications, </journal> <volume> Vol. 60, </volume> <pages> pp. 329-344. </pages>
Reference-contexts: for variance reduction purposes (see Section 4.6 and [7, 60] for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques <ref> [7, 55, 60, 113] </ref>. Repeatability is a major advantage of pseudorandom sequences over sequences generated by physical devices.
Reference: 56. <author> James, F. </author> <year> (1994). </year> <title> RANLUX: A Fortran implementation of the high-quality pseudorandom number generator of Luscher. </title> <journal> Computer Physics Communications, </journal> <volume> Vol. 79, </volume> <pages> pp. 111-114. </pages>
Reference-contexts: Luscher [85] has proposed such an approach, with specific values of for a specific SWB generator, with theoretical justification based on chaos theory. James <ref> [56] </ref> gives a Fortran implementation of Luscher's generator. <p> Computer implementations that this author can suggest for the moment include those of the MRGs given in [73], the combined MRGs given in [65, 68], the combined Tausworthe generators given in [66, 70], the twisted GFSRs given in [96, 98], and perhaps the RANLUX code of <ref> [56] </ref>. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . . In most cases this is the same generator but starting with different seeds, widely spaced in the sequence.
Reference: 57. <author> Knuth, D. E. </author> <year> (1981). </year> <title> The Art of Computer Programming, Volume 2: Seminumerical Algorithms, second edition. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address>
Reference-contexts: Good generators typically have their ae very close to jSj (otherwise, there is a waste of computer memory). 4.1.2 Example: A Linear Congruential Generator Example 1 The best-known and (still) most widely used types of generators are the simple linear congruential generators (LCGs) <ref> [41, 57, 60, 82] </ref>. <p> However, experience shows that random number generators should not be built at random (see Knuth <ref> [57] </ref> for more discussion on this). Building a good random number generator may look easy on the surface, but it is not. It requires a good understanding of heavy mathematics. <p> However, they seem to have good enough statistical properties for most reasonable simulation applications. 4.2.2 What Is a Random Sequence? The idea of a truly random sequence makes sense only in the (abstract) framework of probability theory. Several authors (see, e.g., <ref> [57] </ref>) give definitions of a random sequence, but these definitions require nonperiodic infinite-length sequences. Whenever one selects a generator with a fixed seed, as in Definition 1, one always obtains a deterministic sequence of finite length (the length of the period) which repeats itself indefinitely. <p> Further surveys and historical accounts of the old days are provided in [47, 53, 119]. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. An illustrative example is the middle-square method, which works as follows (see, e.g., <ref> [57, 60] </ref>). Take a b-digit number x i1 (say, in base 10, with b even), square it to obtain a 2b-digit number (perhaps with zeros on the left), and extract the b middle digits to define the next number x i . <p> Define ZZ m as the set f0; 1; : : : ; m1g on which operations are performed modulo m. The state at step n of the multiple recursive generator (MRG) <ref> [57, 62, 102] </ref> is the vector s n = (x n ; : : : ; x n+k1 ) 2 ZZ k m . <p> Suppose that m is prime and let r = (m k 1)=(m 1). The polynomial P is primitive over ZZ m if and only if it satisfies the following conditions, where everything is assumed to be modulo m (see <ref> [57] </ref>) (a) [(1) k+1 a k ] (m1)=q 6= 1 for each prime factor q of m 1 (b) z r mod P (z) = (1) k+1 a k (c) z r=q mod P (z) has degree &gt; 0 for each prime factor q of r, 1 &lt; q &lt; r. <p> For k = 1 and m = 2 e , e 4, the maximum period length is 2 e2 , which is reached if a 1 = 3 or 5 (mod 8) and x 0 is odd <ref> [57, p. 20] </ref>. Otherwise, if m = p e for p prime and e 1, and k &gt; 1 or p &gt; 2, the upper bound is (p k 1)p e1 [36]. <p> Then this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studies and to see how to construct a basis for this lattice L t and its dual, see <ref> [23, 57, 73, 77] </ref>. <p> In these papers the authors use an ellipsoid method to compute the bounds on the z j for the branch-and-bound. This appears to be the best (general) approach known to date and is certainly much faster than the algorithm given in [23] and <ref> [57] </ref>. This idea of analyzing d t was introduced by Coveyou and MacPherson [18] through the viewpoint of spectral analysis. For this historical reason, computing d t is often called the spectral test . <p> One has the theoretical lower bound d t d fl 1 where fl t is a constant which depends only on t and whose exact value is currently known only for t 8 <ref> [57] </ref>. So, for t 8 and T 8, one can define the figures of merit S t = d fl t =d t and M T = min ktT S t , which lie between 0 and 1. Values close to 1 are desired. <p> Therefore, apart from the vector (0; 0; 0), all other vectors of this form are contained in only two planes! Specific instances of this generator are the one proposed by Mitchell and Moore and recommended by Knuth <ref> [57] </ref>, based on the recurrence x n = (x n24 + x n55 ) mod 2 e for e equal to the computer's word length, as well as the addrans function in the SUN Unix library [117], based on x n = (x n5 + x n17 ) mod 2 24 <p> See <ref> [10, 57, 60, 62, 87] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. <p> Consider the recurrence x n = (ax 2 where a; b; c 2 ZZ m and x n 2 ZZ m for each n. This is studied in <ref> [29, 37, 57, 102] </ref>. If m is a power of 2, this generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd. Its t-dimensional points turn out to lie on a union of grids. <p> It depends on the test and on the alternative hypothesis. The rationale for two-level testing is to test the sequence not only globally, but also locally, by looking at the distribution of values of T over shorter subsequences <ref> [57] </ref>. In most cases, when testing random number generators, N = 1 turns out to be the best choice because the same regularities or defects of the generators tend to repeat themselves over all long-enough subsequences. <p> For still better confidence, it is always a good idea to run important simulations twice (or more), using random number generators of totally different types. 4.5.2 Available Batteries of Tests The statistical tests described by Knuth <ref> [57] </ref> have long been considered the "standard" tests for random number generators. A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND [24]. A newer battery of tests is DIEHARD, designed by Marsaglia [87, 89]. It contains more stringent tests than those in [57], in the <p> by Knuth <ref> [57] </ref> have long been considered the "standard" tests for random number generators. A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND [24]. A newer battery of tests is DIEHARD, designed by Marsaglia [87, 89]. It contains more stringent tests than those in [57], in the sense that more generators tend to fail some of the tests. An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. <p> The first test is a variant of the well-know serial test and the second one is a close-pairs test. More details about these tests, as well as refined variants, can be found in <ref> [57, 74, 75, 79] </ref>. Both tests generate n nonoverlapping vectors in the t-dimensional unit cube [0; 1) t .
Reference: 58. <author> Koc, C. </author> <year> (1995). </year> <title> Recurring-with-carry sequences. </title> <journal> Journal of Applied Probability, </journal> <volume> Vol. 60 32, </volume> <pages> pp. 966-971. </pages>
Reference-contexts: As in [14, 16, 88], we call this a multiply-with-carry (MWC) generator. The idea was suggested in <ref> [58, 91] </ref>. The recurrence looks like that of an MRG, except that a carry c n is propagated between the steps. What is the effect of this carry? Assume that b is a power of 2, which is very nice form the implementation viewpoint.
Reference: 59. <author> Lagarias, J. C. </author> <year> (1993). </year> <title> Pseudorandom numbers. </title> <journal> Statistical Science, </journal> <volume> Vol. 8, No. 1, </volume> <pages> pp. 31-39. </pages>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 59, 78] </ref> and other references given there). Are efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not such a family exists. But some generator families are conjectured to be polynomial-time perfect. <p> Use a nonlinear transition function T . Several types of nonlinear generators have been proposed over the last decade or so, and an impressive volume of theoretical results have been obtained for them. See, for example, <ref> [31, 34, 59, 78, 102, 104] </ref> and other references given there. Here, we give a brief overview of this rapidly developing area. Nonlinear generators avoid lattice structures. Typically, no t-dimensional hyperplane contains more than t overlapping t-tuples of successive values. <p> An implementation based on fast modular multiplication is proposed by Moreau [99]. Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See <ref> [5, 59, 78] </ref> for overviews and discussions. An interesting idea, pursued for instance in 45 [1], is to combine a slow but cryptographically strong generator (e.g., a polynomial-time perfect one) with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step.
Reference: 60. <author> Law, A. M. and W. D. </author> <title> Kelton (1991). Simulation Modeling and Analysis, second edition. </title> <publisher> McGraw-Hill, </publisher> <address> New York. </address>
Reference-contexts: Good generators typically have their ae very close to jSj (otherwise, there is a waste of computer memory). 4.1.2 Example: A Linear Congruential Generator Example 1 The best-known and (still) most widely used types of generators are the simple linear congruential generators (LCGs) <ref> [41, 57, 60, 82] </ref>. <p> Since simulations often consume several hours of CPU time, this is significant. The memory size used by a generator might also be important in general, especially since simulations often use several generators in parallel, for instance to maintain synchronization for variance reduction purposes (see Section 4.6 and <ref> [7, 60] </ref> for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques [7, 55, 60, 113]. <p> for variance reduction purposes (see Section 4.6 and [7, 60] for more details). 4.2.7 Repeatability, Splitting Facilities, and Ease of Implementation The ability to replicate exactly the same sequence of random numbers, called repeatability , is important for program verification and to facilitate the implementation of certain variance reduction techniques <ref> [7, 55, 60, 113] </ref>. Repeatability is a major advantage of pseudorandom sequences over sequences generated by physical devices. <p> Implementing a random number package as described in Section 4.6 requires efficient jump-ahead techniques. 4.2.8 Historical Accounts There is an enormous amount of scientific literature on random number generation. Law and Kelton <ref> [60] </ref> present a short (but interesting) historical overview. Further surveys and historical accounts of the old days are provided in [47, 53, 119]. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. <p> Further surveys and historical accounts of the old days are provided in [47, 53, 119]. Early attempts to construct pseudorandom number generators have given rise to all sorts of bad designs, sometimes leading to disatrous results. An illustrative example is the middle-square method, which works as follows (see, e.g., <ref> [57, 60] </ref>). Take a b-digit number x i1 (say, in base 10, with b even), square it to obtain a 2b-digit number (perhaps with zeros on the left), and extract the b middle digits to define the next number x i . <p> It satisfies condition (5). The IMSL library also has available the two multipliers 397204094 and 950706376, with the same modulus, as well as the possibility of adding a shu*e to the LCG. The multiplier a = 630360016 was proposed in [108], is recommended in <ref> [60, 92] </ref> among others, and is used in software such as the SIMSCRIPT II.5 and INSIGHT simulation programming languages. Generator G4, with modulus m = 2 31 and multiplier a = 65539, is the infamous RANDU generator, used for a long time in the IBM/360 operating system. <p> Its lattice structure is particularly bad in dimension 3, where all the points lie in only 15 parallel planes. Law and Kelton <ref> [60] </ref> give a graphical illustration. Generator G5, with m = 2 32 , a = 69069, and c = 1, is used in the VAX/VMS operating system. <p> See <ref> [10, 57, 60, 62, 87] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. <p> This implies that the structural effect of the combination method must be well understood. Law and Kelton <ref> [60, Prob. 7.6] </ref> give an example where combination makes things worse. The two most widely known combination methods are: 1. Shu*ing one sequence with another or with itself. 2.
Reference: 61. <author> L'Ecuyer, P. </author> <year> (1988). </year> <title> Efficient and portable combined random number generators. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 31, No. 6, </volume> <pages> pp. </pages> <note> 742-749 and 774. See also the correspondence in the same journal, Vol. 32, No. </note> <month> 8 </month> <year> (1989), </year> <pages> pp. 1019-1024. </pages>
Reference-contexts: Then, for any positive integer x &lt; m, the following instructions have the same effect as the assignment x ax mod m, but with all intermediate (integer) results remaining strictly between m and m <ref> [7, 61, 107] </ref>: y bx=qc; IF x &lt; 0 THEN x x + m END. As an illustration, if m = 2 31 1 and a = 16807, the generator satisfies the condition, since 16807 &lt; p m. In this case, one has q = 127773 and r = 2836. <p> The combination (13) generalizes an idea of Wichmann and Hill [126], while (12) is a generalization of the combination method proposed by L'Ecuyer <ref> [61] </ref>. The latter combination somewhat scrambles the lattice structure because of the added "noise" * n . Example 7 L'Ecuyer [65] proposes the following parameters and gives a computer code in the C language that implements (12). <p> Generator G10 requires four modular products at each step of the recurrence, so it is slower than G9 but faster than G8. The combined MLCG originally proposed by L'Ecuyer <ref> [61] </ref> also has an approximating LCG called G11 in the table. Note that this combined generator was originally constructed on the basis of the lattice structure of the components only, without examining the lattice structure of the combination.
Reference: 62. <author> L'Ecuyer, P. </author> <year> (1990). </year> <title> Random numbers for simulation. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 33, No. 10, </volume> <pages> pp. 85-97. </pages>
Reference-contexts: Such a procedure is clearly not practical for computer simulations, which often require millions and millions of random numbers. Several other physical devices to produce random noise have been proposed and experiments have been conducted using these generators. These devices include gamma ray counters, noise diodes, and so on <ref> [47, 62] </ref>. Some of these devices have been commercialized and can be purchased to produce random numbers on a computer. But they are cumbersome and they may produce unsatisfactory outputs, as there may be significant correlation between the successive numbers. <p> In simulation contexts, the term random is used instead of pseudorandom (a slight abuse of language, for simplification) and we do so in this chapter. The following definition is taken from L'Ecuyer <ref> [62, 64] </ref>. <p> Define ZZ m as the set f0; 1; : : : ; m1g on which operations are performed modulo m. The state at step n of the multiple recursive generator (MRG) <ref> [57, 62, 102] </ref> is the vector s n = (x n ; : : : ; x n+k1 ) 2 ZZ k m . <p> But the low-order bits are again too regular: The period length of the ith least significant bit of x n is at most 2 i . A constant c can also be added to the right side of the recurrence (2). One can show (see <ref> [62] </ref>) that a linear recurrence of order k with such a constant term is equivalent to some linear recurrence of order k + 1 with no constant term. <p> See <ref> [10, 57, 60, 62, 87] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. <p> If a k-dimensional vector X n follows the recurrence X n = AX n1 mod m, where the k fi k matrix A has a primitive characteristic polynomial P (z) = z k a 1 z k1 a k , then X n also follows the recurrence <ref> [48, 62, 101] </ref> X n = (a 1 X n1 + + a k X nk ) mod m (17) So each component of the vector X n evolves according to (2). <p> Other approaches, such as using completely different generators on the 55 different processors or using the same type of generator with different parameters (e.g., changing the additive term or the multiplier in a LCG), have been proposed but appear much less convenient and sometimes dangerous <ref> [62, 64] </ref>. For different ideas and surveys on parallel generators, the reader can consult [2, 9, 22, 93, 109]. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada Grant ODGP0110050 and SMF0169893, and FCAR-Quebec Grant 93ER1654.
Reference: 63. <author> L'Ecuyer, P. </author> <year> (1992). </year> <title> Testing random number generators. </title> <booktitle> In Proceedings of the 1992 Winter Simulation Conference, </booktitle> <pages> pp. 305-313. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in <ref> [63, 64, 71, 75, 74, 69, 79, 116] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications [39, 49, 75]. <p> Clearly, G1 to G5 and all other generators of that size are unsuitable for such simulations. 52 4.5.4 Empirical Testing: Summary Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [49, 63, 75, 74, 69, 89, 81] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 64. <author> L'Ecuyer, P. </author> <year> (1994). </year> <title> Uniform random number generation. </title> <journal> Annals of Operations Research, </journal> <volume> Vol. 53, </volume> <pages> pp. 77-120. </pages>
Reference-contexts: In simulation contexts, the term random is used instead of pseudorandom (a slight abuse of language, for simplification) and we do so in this chapter. The following definition is taken from L'Ecuyer <ref> [62, 64] </ref>. <p> What is long enough? Suppose that a simulation experiment takes N random numbers from a sequence of length ae. Several reasons justify the need to take ae AE N (see, e.g., <ref> [21, 64, 86, 102, 112] </ref>). Based on geometric arguments, Ripley [112] suggests that ae AE N 2 for linear congruential generators. The papers [75, 79] provide strong experimental support for this, based on extensive empirical tests. Our previous discussion also supports the view that ae must be huge in general. <p> Jumping ahead is then achieved in the same way as for the MLCG: X n+ = A X n mod m = (A mod m)X n mod m: Another way is to transform the MRG into its polynomial representation <ref> [64] </ref>, in which jumping ahead is easier, and then apply the inverse transformation to recover the original representation. 4.3.4 Lattice Structure of LCGs and MRGs A lattice of dimension t, in the t-dimensional real space IR t , is a set of the form L = &lt; V = j=1 z <p> The state at step n is now s n = (x ns ; : : : ; x ns+k1 ). The output values u n are multiples of m L instead of m 1 . This output sequence, usually with L = s, is called a digital multistep sequence <ref> [64, 102] </ref>. Taking s &gt; L means that s L values of the sequence fx n g are skipped at each step of (23). If the MRG sequence has period ae and if s has no common factor with ae, the sequence fu n g also has period ae. <p> In particular, one can take m = 2. Then fx n g becomes a sequence of bits (zeros and ones) and the u n are constructed by juxtaposing L successive bits from this sequence. This is called a linear feedback shift register (LFSR) or Tausworthe generator <ref> [41, 64, 102, 118] </ref>, although the bits of each u n are often filled in reverse order than in (23). <p> For the matrix LCG, L'Ecuyer <ref> [64] </ref> shows that if the shifts between the successive L copies of the sequence are all equal to some integer d having no common factor with the period length ae = m k 1, the sequence (24) is exactly the same as the digital multistep sequence (23) with s equal to <p> This GFSR can be viewed as a different way to implement a LFSR generator, provided that it is initialized accordingly, and the structural properties of the GFSR can then be analyzed by analyzing those of the corresponding LFSR generator <ref> [44, 64] </ref>. For the recurrence (17), we need to memorize kL integers in ZZ m . With this memory size, one should expect a period length close to m kL , but the actual period length cannot exceed m k 1. <p> An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in <ref> [63, 64, 71, 75, 74, 69, 79, 116] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications [39, 49, 75]. <p> Other approaches, such as using completely different generators on the 55 different processors or using the same type of generator with different parameters (e.g., changing the additive term or the multiplier in a LCG), have been proposed but appear much less convenient and sometimes dangerous <ref> [62, 64] </ref>. For different ideas and surveys on parallel generators, the reader can consult [2, 9, 22, 93, 109]. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada Grant ODGP0110050 and SMF0169893, and FCAR-Quebec Grant 93ER1654.
Reference: 65. <author> L'Ecuyer, P. </author> <year> (1996). </year> <title> Combined multiple recursive random number generators. </title> <journal> Operations Research, </journal> <volume> Vol. 44, No. 5, </volume> <pages> pp. 816-822. </pages>
Reference-contexts: Define the two combinations z n = @ j=1 1 and 0 J X ffi j m j A mod 1: (13) Q J j=1 m j . The following results were proved in [80] for the case of MLCG components (k = 1) and in <ref> [65] </ref> for the more general case: 1. The sequences fu n g and fw n g both have period length ae = lcm (ae 1 ; : : : ; ae J ) (the least common multiple of the period lengths of the components). 2. <p> The w n obey the recurrence x n = (a 1 x n1 + + a k x nk ) mod m; w n = x n =m; (14) where the a i can be computed by a formula given in <ref> [65] </ref> and do not depend on the ffi j . 3. One has u n = w n + * n , with * n + , where and + can be computed as explained in [65] and are generally extremely small when the m j are close to each other. <p> =m; (14) where the a i can be computed by a formula given in <ref> [65] </ref> and do not depend on the ffi j . 3. One has u n = w n + * n , with * n + , where and + can be computed as explained in [65] and are generally extremely small when the m j are close to each other. 32 The combinations (12) and (13) can then be viewed as efficient ways to implement an MRG with very large modulus m. <p> odd prime and each MRG has maximal period length ae j = m k j j 1, each ae j is even, so ae (m k 1 1 1) (m J 1)=2 J1 and this upper bound is attained if the (m k j j 1)=2 are pairwise relatively prime <ref> [65] </ref>. The combination (13) generalizes an idea of Wichmann and Hill [126], while (12) is a generalization of the combination method proposed by L'Ecuyer [61]. The latter combination somewhat scrambles the lattice structure because of the added "noise" * n . Example 7 L'Ecuyer [65] proposes the following parameters and gives <p> j 1)=2 are pairwise relatively prime <ref> [65] </ref>. The combination (13) generalizes an idea of Wichmann and Hill [126], while (12) is a generalization of the combination method proposed by L'Ecuyer [61]. The latter combination somewhat scrambles the lattice structure because of the added "noise" * n . Example 7 L'Ecuyer [65] proposes the following parameters and gives a computer code in the C language that implements (12). <p> More references and pointers can be found from the pages http://www.iro.umontreal.ca/lecuyer and http://random.mat.sbg.ac.at on the World Wide Web. Computer implementations that this author can suggest for the moment include those of the MRGs given in [73], the combined MRGs given in <ref> [65, 68] </ref>, the combined Tausworthe generators given in [66, 70], the twisted GFSRs given in [96, 98], and perhaps the RANLUX code of [56]. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . .
Reference: 66. <author> L'Ecuyer, P. </author> <year> (1996). </year> <title> Maximally equidistributed combined Tausworthe generators. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 65, No. 213, </volume> <pages> pp. 203-213. </pages>
Reference-contexts: An efficient computer code that implements the sequence (23), for the case where the recurrence has the form x n = (x nr + x nk ) mod 2 with s r and 2r &gt; k, can be found in <ref> [66, 120, 121] </ref>. For specialized jump-ahead algorithms, see [22, 66]. Unfortunately, such simple recurrences lead to LFSR generators with bad structural properties (see [11, 66, 97, 120] and other references therein). But combining several recurrences of this type can give good generators. <p> An efficient computer code that implements the sequence (23), for the case where the recurrence has the form x n = (x nr + x nk ) mod 2 with s r and 2r &gt; k, can be found in [66, 120, 121]. For specialized jump-ahead algorithms, see <ref> [22, 66] </ref>. Unfortunately, such simple recurrences lead to LFSR generators with bad structural properties (see [11, 66, 97, 120] and other references therein). But combining several recurrences of this type can give good generators. <p> For specialized jump-ahead algorithms, see [22, 66]. Unfortunately, such simple recurrences lead to LFSR generators with bad structural properties (see <ref> [11, 66, 97, 120] </ref> and other references therein). But combining several recurrences of this type can give good generators. <p> All of this is shown in [121], where specific combinations with two components are also suggested. For good combinations with more components, see <ref> [66] </ref>. Wang and Compagner [125] also suggested similar combinations, with much longer periods. They recommended constructing the combination so that the polynomial P (z) has approximately half of its coefficients equal to 1. <p> Fushimi [44] gives an initialization procedure satisfying this condition. Couture et al. [17] show how the (t; `)-equidistribution of simple and combined LFSR generators can be analyzed via the lattice structure of an equivalent LCG in a space of formal series. A different (simpler) approach is taken in <ref> [66] </ref>: Check if the matrix that expresses the first ` bits of u n as a linear transformation of (x 0 ; : : : ; x k1 ) has full rank. This is a necessary and sufficient condition for (t; `)-equidistribution. <p> An ME LFSR generator based on the recurrence x n = (x n607 + x n273 ) mod 2, with s = 512 and L = 23, is given in [123]. But as stated previously, only two nonzero coefficients for the recurrence is much too few. L'Ecuyer <ref> [66, 70] </ref> gives the results of computer searches for ME and ME-CF combined LFSR generators with J = 2; 3; 4; 5 components, as described in subSection 4.3.9. <p> The searches were for good parameters r j and s j . We summarize here a few examples of search results. For more details, as well as specific implementations in the C language, see <ref> [66, 70] </ref>. 41 Example 8 (a) For J = 2, k 1 = 31, and k 2 = 29, there are 2565 parameter sets that satisfy the conditions above. None of these combinations is ME. <p> More references and pointers can be found from the pages http://www.iro.umontreal.ca/lecuyer and http://random.mat.sbg.ac.at on the World Wide Web. Computer implementations that this author can suggest for the moment include those of the MRGs given in [73], the combined MRGs given in [65, 68], the combined Tausworthe generators given in <ref> [66, 70] </ref>, the twisted GFSRs given in [96, 98], and perhaps the RANLUX code of [56]. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . .
Reference: 67. <author> L'Ecuyer, P. </author> <year> (1997). </year> <title> Bad lattice structures for vectors of non-successive values produced by some linear recurrences. </title> <journal> INFORMS Journal on Computing, </journal> <volume> Vol. 9, No. 1, </volume> <pages> pp. 57-60. </pages>
Reference-contexts: Values close to 1 are desired. Another lower bound on d t , for t &gt; k, is (see <ref> [67] </ref>) d t @ 1 + j=1 j A : (9) This means that an MRG whose coefficients a j are small is guaranteed to have a large (bad) d t . <p> L'Ecuyer and Couture [77] show how to construct bases for such lattices, how to compute d t (I), and so on. The following provides "quick-and dirty" lower bounds on d t (I) <ref> [13, 67] </ref>: 1.
Reference: 68. <author> L'Ecuyer, P. </author> <year> (1997). </year> <title> Good parameters and implementations for combined multiple recursive random number generators. </title> <type> Manuscript. </type>
Reference-contexts: On computers with good 64-bit floating-point hardware (most computers nowadays), this approach usually gives by far the fastest implementation (see, e.g., <ref> [68] </ref> for examples and timings). 4.3.3 Jumping Ahead To jump ahead from x n to x n+ with an MLCG, just use the relation x n+ = a x n mod m = (a mod m)x n mod m: If many jumps are to be performed with the same , the <p> Slightly better combinations of the same size have been constructed since this original proposal [80, 77]. Other combinations of different sizes are given in <ref> [68] </ref>. 33 4.3.7 Matrix LCGs and MRGs A natural way to generalize LCGs and MRGs is to consider linear recurrences for vectors, with matrix coefficients X n = (A 1 X n1 + + A k X nk ) mod m; (15) where A 1 ; : : : ; A <p> More references and pointers can be found from the pages http://www.iro.umontreal.ca/lecuyer and http://random.mat.sbg.ac.at on the World Wide Web. Computer implementations that this author can suggest for the moment include those of the MRGs given in [73], the combined MRGs given in <ref> [65, 68] </ref>, the combined Tausworthe generators given in [66, 70], the twisted GFSRs given in [96, 98], and perhaps the RANLUX code of [56]. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . .
Reference: 69. <author> L'Ecuyer, P. </author> <year> (1997). </year> <title> Tests based on sum-functions of spacings for uniform random numbers. </title> <journal> Journal of Statistical Computation and Simulation, </journal> <volume> Vol. 59, </volume> <pages> pp. 251-269. </pages>
Reference-contexts: An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in <ref> [63, 64, 71, 75, 74, 69, 79, 116] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications [39, 49, 75]. <p> Clearly, G1 to G5 and all other generators of that size are unsuitable for such simulations. 52 4.5.4 Empirical Testing: Summary Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [49, 63, 75, 74, 69, 89, 81] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 70. <author> L'Ecuyer, P. </author> <year> (1998). </year> <title> Tables of maximally equidistributed combined LFSR generators. </title> <journal> Mathematics of Computation, </journal> <note> To appear. </note>
Reference-contexts: An ME LFSR generator based on the recurrence x n = (x n607 + x n273 ) mod 2, with s = 512 and L = 23, is given in [123]. But as stated previously, only two nonzero coefficients for the recurrence is much too few. L'Ecuyer <ref> [66, 70] </ref> gives the results of computer searches for ME and ME-CF combined LFSR generators with J = 2; 3; 4; 5 components, as described in subSection 4.3.9. <p> The searches were for good parameters r j and s j . We summarize here a few examples of search results. For more details, as well as specific implementations in the C language, see <ref> [66, 70] </ref>. 41 Example 8 (a) For J = 2, k 1 = 31, and k 2 = 29, there are 2565 parameter sets that satisfy the conditions above. None of these combinations is ME. <p> More references and pointers can be found from the pages http://www.iro.umontreal.ca/lecuyer and http://random.mat.sbg.ac.at on the World Wide Web. Computer implementations that this author can suggest for the moment include those of the MRGs given in [73], the combined MRGs given in [65, 68], the combined Tausworthe generators given in <ref> [66, 70] </ref>, the twisted GFSRs given in [96, 98], and perhaps the RANLUX code of [56]. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . .
Reference: 71. <author> L'Ecuyer, P. </author> <month> (Circa </month> <year> 2000). </year> <institution> TestU01: Un logiciel pour appliquer des tests statistiques a des generateurs de valeurs aleatoires. </institution> <note> In preparation. </note>
Reference-contexts: They have also succeeded quite well in empirical tests performed so far [49]. Fast implementations with specific well-tested parameters are still under development, although several generic implementations are already available <ref> [49, 71] </ref>. 4.4.1 Inversive Congruential Generators To construct a nonlinear generator with long period, a first idea is simply to add a nonlinear twist to the output of a known generator. <p> A newer battery of tests is DIEHARD, designed by Marsaglia [87, 89]. It contains more stringent tests than those in [57], in the sense that more generators tend to fail some of the tests. An extensive testing package called TestU01 <ref> [71] </ref>, that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in [63, 64, 71, 75, 74, 69, 79, 116]. <p> An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in <ref> [63, 64, 71, 75, 74, 69, 79, 116] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications [39, 49, 75].
Reference: 72. <author> L'Ecuyer, P. and T. H. </author> <title> Andres (1997). A random number generator based on the 61 combination of four LCGs. </title> <booktitle> Mathematics and Computers in Simulation, </booktitle> <volume> Vol. 44, </volume> <pages> pp. 99-107. </pages>
Reference-contexts: The number and length of segments in the package of [76] are now deemed too small for current and future needs. A similar package based on a combined LCG with period length near 2 121 in given in <ref> [72] </ref>, and other systems of this type, based on generators with much larger periods, are under development. In some of those packages, generators can be seen as objects that can be created by the user as needed, in practically unlimited number.
Reference: 73. <author> L'Ecuyer, P., F. Blouin and R. </author> <title> Couture (1993). A search for good multiple recursive random number generators. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 3, No. 2, </volume> <pages> pp. 87-98. </pages>
Reference-contexts: In this 16 case, the trick is to choose m and k so that r is prime (this can be done only for prime k). Testing primality of large numbers (using probabilistic algorithms, for example, as in <ref> [73, 111] </ref>) is much easier than factoring. Given m, k, and the factorizations of m 1 and r, primitive polynomials are generally easy to find, simply by random search. If m is not prime, the period length of (2) has an upper bound typically much lower than m k 1. <p> Then this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studies and to see how to construct a basis for this lattice L t and its dual, see <ref> [23, 57, 73, 77] </ref>. <p> This m is the largest prime under 2 31 such that (m 7 1)=(m 1) is also prime. The latter property facilitates the verification of condition (c) in the full-period conditions for an MRG. These two generators are taken from <ref> [73] </ref>, where one can also find more details on the search and a precise definition of the selection criterion. It turns out that G9 has a very bad figure of merit S 8 , and larger values of d t than G8 for t slightly larger than 7. <p> More references and pointers can be found from the pages http://www.iro.umontreal.ca/lecuyer and http://random.mat.sbg.ac.at on the World Wide Web. Computer implementations that this author can suggest for the moment include those of the MRGs given in <ref> [73] </ref>, the combined MRGs given in [65, 68], the combined Tausworthe generators given in [66, 70], the twisted GFSRs given in [96, 98], and perhaps the RANLUX code of [56]. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3,
Reference: 74. <author> L'Ecuyer, P., A. Compagner and J.-F. </author> <month> Cordeau </month> <year> (1997). </year> <title> Entropy tests for random number generators. </title> <type> Manuscript. </type>
Reference-contexts: An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in <ref> [63, 64, 71, 75, 74, 69, 79, 116] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications [39, 49, 75]. <p> The first test is a variant of the well-know serial test and the second one is a close-pairs test. More details about these tests, as well as refined variants, can be found in <ref> [57, 74, 75, 79] </ref>. Both tests generate n nonoverlapping vectors in the t-dimensional unit cube [0; 1) t . <p> Clearly, G1 to G5 and all other generators of that size are unsuitable for such simulations. 52 4.5.4 Empirical Testing: Summary Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [49, 63, 75, 74, 69, 89, 81] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 75. <author> L'Ecuyer, P., J.-F. Cordeau and R. </author> <month> Simard </month> <year> (1997). </year> <title> Close-point spatial tests and their application to random number generators. </title> <note> Submitted. </note>
Reference-contexts: Several reasons justify the need to take ae AE N (see, e.g., [21, 64, 86, 102, 112]). Based on geometric arguments, Ripley [112] suggests that ae AE N 2 for linear congruential generators. The papers <ref> [75, 79] </ref> provide strong experimental support for this, based on extensive empirical tests. Our previous discussion also supports the view that ae must be huge in general. <p> An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in <ref> [63, 64, 71, 75, 74, 69, 79, 116] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications [39, 49, 75]. <p> Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications <ref> [39, 49, 75] </ref>. Which are the best tests? No one can really answer this question. If the generator is to be used to estimate the expectation of some random variable T by generating replicates of T , the best test would be the one based on T as a statistic. <p> The first test is a variant of the well-know serial test and the second one is a close-pairs test. More details about these tests, as well as refined variants, can be found in <ref> [57, 74, 75, 79] </ref>. Both tests generate n nonoverlapping vectors in the t-dimensional unit cube [0; 1) t . <p> The p-values less than 10 15 for the CP test stem from the fact that the jumps of the process Y n tend to be clustered (and often superposed), because there are often equalities (or almost) among the small D n;i;j 's, due to the lattice structure of the generator <ref> [75, 112] </ref>. This implies that several W n;i are very close to zero, and the Anderson-Darling statistic is especially sensitive for detecting this type of 51 Table 3: The p-values of two empirical tests applied to Generators G1 to G11. <p> As a general rule of thumb, all LCGs and MRGs, whatever be the quality of their lattice structure, fail spectacularly this close-pairs test with N = 1 and m = 32 when n exceeds the square root of the period length <ref> [75] </ref>. G6 and G7 pass these tests, but will soon fail both tests if we increase the sample size. For G8 to G11, on the other hand, the sample size required for clear failure is so large that the test becomes too long to run in reasonable time. <p> Clearly, G1 to G5 and all other generators of that size are unsuitable for such simulations. 52 4.5.4 Empirical Testing: Summary Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [49, 63, 75, 74, 69, 89, 81] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 76. <author> L'Ecuyer, P. and S. </author> <title> Cote (1991). Implementing a random number package with splitting facilities. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> Vol. 17, No. 1, </volume> <pages> pp. 98-111. </pages>
Reference-contexts: For example, if m = 2 31 1 and a 1 = 16807, then x n1 can be as large as 2 31 2, so the product a 1 x n1 can easily exceed 2 31 . L'Ecuyer and Cote <ref> [76] </ref> study and compare different techniques for computing a product modulo a large integer m, using only integer arithmetic, so that no intermediate result ever exceeds m. Among the general methods, working for all representable integers and easily implementable in a high-level language, decomposition was the fastest in their experiments. <p> In most cases this is the same generator but starting with different seeds, widely spaced in the sequence. L'Ecuyer and Cote <ref> [76] </ref> have constructed a package with 32 generators (which can be easily extended to 1024). Each generator is in fact based on the same recurrence (a combined LCG of period length near 2 61 ), with seeds spaced 2 50 values apart. <p> Without appropriate tools, this may require tricky programming, because the two systems do not necessarily use the same number of random numbers in a given run. But with the package in <ref> [76] </ref>, one can simply assign each run to a segment number. With the first system, use the initial seed for the first run, and before each new run, advance each generator to the beginning of the next segment. <p> After the nth run, reset the generators to their initial seeds and do the same for the second system. The number and length of segments in the package of <ref> [76] </ref> are now deemed too small for current and future needs. A similar package based on a combined LCG with period length near 2 121 in given in [72], and other systems of this type, based on generators with much larger periods, are under development.
Reference: 77. <author> L'Ecuyer, P. and R. </author> <title> Couture (1997). An implementation of the lattice and spectral tests for multiple recursive linear random number generators. </title> <journal> INFORMS Journal on Computing, </journal> <volume> Vol. 9, No. 2, </volume> <pages> pp. 206-217. </pages>
Reference-contexts: Then this set T t is the intersection of a lattice L t with the t-dimensional unit hypercube I t = [0; 1) t . For more detailed studies and to see how to construct a basis for this lattice L t and its dual, see <ref> [23, 57, 73, 77] </ref>. <p> For more details on the latter, which is typically much more costly to compute than d t , the reader can consult <ref> [77] </ref> and the references given there. These alternative figures of merit do not tell us much important information in addition to d t . Tables 1 and 2 give the values of d t and S t for certain LCGs and MRGs. All these generators have full period length. <p> L'Ecuyer and Couture <ref> [77] </ref> show how to construct bases for such lattices, how to compute d t (I), and so on. The following provides "quick-and dirty" lower bounds on d t (I) [13, 67]: 1. <p> Note that this combined generator was originally constructed on the basis of the lattice structure of the components only, without examining the lattice structure of the combination. Slightly better combinations of the same size have been constructed since this original proposal <ref> [80, 77] </ref>. <p> For LCGs and MRGs, for example, the lattice structure can be analyzed with such lacunary indices. See <ref> [38, 77] </ref> for more details and numerical examples. 4.6.3 Generators for Parallel Computers Another situation where multiple random number generators are needed is for simulation on parallel processors.
Reference: 78. <author> L'Ecuyer, P. and R. </author> <month> Proulx </month> <year> (1989). </year> <title> About polynomial-time "unpredictable" generators. </title> <booktitle> In Proceedings of the 1989 Winter Simulation Conference, </booktitle> <pages> pp. 467-476. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: This setup is based on the idea that what cannot be computed in polynomial time is practically impossible to compute if k is reasonably large. It was introduced in cryptology, where unpredictability is a key issue (see <ref> [4, 6, 59, 78] </ref> and other references given there). Are efficient polynomial-time perfect families of generators available? Actually, nobody knows for sure whether or not such a family exists. But some generator families are conjectured to be polynomial-time perfect. <p> Use a nonlinear transition function T . Several types of nonlinear generators have been proposed over the last decade or so, and an impressive volume of theoretical results have been obtained for them. See, for example, <ref> [31, 34, 59, 78, 102, 104] </ref> and other references given there. Here, we give a brief overview of this rapidly developing area. Nonlinear generators avoid lattice structures. Typically, no t-dimensional hyperplane contains more than t overlapping t-tuples of successive values. <p> An implementation based on fast modular multiplication is proposed by Moreau [99]. Other classes of generators, conjectured to be polynomial-time perfect, have been proposed. From empirical experiments, they have appeared no better than the BBS. See <ref> [5, 59, 78] </ref> for overviews and discussions. An interesting idea, pursued for instance in 45 [1], is to combine a slow but cryptographically strong generator (e.g., a polynomial-time perfect one) with a fast (but unsecure) one. The slow generator is used sparingly, mostly in a preprocessing step.
Reference: 79. <author> L'Ecuyer, P., R. Simard and S. </author> <month> Wegenkittl </month> <year> (1998). </year> <title> Sparse serial tests of randomness. </title> <note> In preparation. </note>
Reference-contexts: Several reasons justify the need to take ae AE N (see, e.g., [21, 64, 86, 102, 112]). Based on geometric arguments, Ripley [112] suggests that ae AE N 2 for linear congruential generators. The papers <ref> [75, 79] </ref> provide strong experimental support for this, based on extensive empirical tests. Our previous discussion also supports the view that ae must be huge in general. <p> An extensive testing package called TestU01 [71], that implements most of the tests proposed so far, as well as several classes of generators implemented in generic form, is under development. References to other statistical tests applied to random number generators can be found in <ref> [63, 64, 71, 75, 74, 69, 79, 116] </ref>. Simply testing uniformity, or pair correlations, is far from enough. Good tests are designed to catch higher-order correlation properties or geometric patterns of the successive numbers. Such patterns can easily show up in certain classes of applications [39, 49, 75]. <p> The first test is a variant of the well-know serial test and the second one is a close-pairs test. More details about these tests, as well as refined variants, can be found in <ref> [57, 74, 75, 79] </ref>. Both tests generate n nonoverlapping vectors in the t-dimensional unit cube [0; 1) t .
Reference: 80. <author> L'Ecuyer, P. and S. </author> <title> Tezuka (1991). Structural properties for two classes of combined random number generators. </title> <journal> Mathematics of Computation, </journal> <volume> Vol. 57, No. 196, </volume> <pages> pp. 735-746. </pages>
Reference-contexts: Define the two combinations z n = @ j=1 1 and 0 J X ffi j m j A mod 1: (13) Q J j=1 m j . The following results were proved in <ref> [80] </ref> for the case of MLCG components (k = 1) and in [65] for the more general case: 1. <p> Note that this combined generator was originally constructed on the basis of the lattice structure of the components only, without examining the lattice structure of the combination. Slightly better combinations of the same size have been constructed since this original proposal <ref> [80, 77] </ref>.
Reference: 81. <author> Leeb, H. and S. </author> <month> Wegenkittl </month> <year> (1997). </year> <title> Inversive and linear congruential pseudorandom number generators in empirical tests. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 7, No. 2, </volume> <pages> pp. 272-286. </pages>
Reference-contexts: Clearly, G1 to G5 and all other generators of that size are unsuitable for such simulations. 52 4.5.4 Empirical Testing: Summary Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [49, 63, 75, 74, 69, 89, 81] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 82. <author> Lehmer, D. H. </author> <year> (1951). </year> <title> Mathematical methods in large scale computing units. </title> <journal> Annals Comp. Laboratory Harvard University, </journal> <volume> Vol. 26, </volume> <pages> pp. 141-146. </pages>
Reference-contexts: Good generators typically have their ae very close to jSj (otherwise, there is a waste of computer memory). 4.1.2 Example: A Linear Congruential Generator Example 1 The best-known and (still) most widely used types of generators are the simple linear congruential generators (LCGs) <ref> [41, 57, 60, 82] </ref>.
Reference: 83. <author> Lewis, P. A. W., A. S. Goodman and J. M. </author> <title> Miller (1969). A pseudo-random number generator for the system/360. </title> <journal> IBM System's Journal, </journal> <volume> Vol. 8, </volume> <pages> pp. 136-143. 62 </pages>
Reference-contexts: For a concrete illustration, let m = 2 31 1 = 2147483647, c = 0, and a = 16807. These parameters were originally proposed in <ref> [83] </ref>. Take x 0 = 12345. <p> It is used in the GPSS/H simulation environment. The second multiplier, a = 16807, was originally proposed in <ref> [83] </ref>, is suggested in many simulation books and papers (e.g., [7, 107, 114]) and appears in several software systems such as the SLAM II and SIMAN simulation programming languages, MATLAB [94], the IMSL statistical library [54], and in operating systems for the IBM and Macintosh computers. It satisfies condition (5).
Reference: 84. <author> Lewis, T. G. and W. H. </author> <title> Payne (1973). Generalized feedback shift register pseudo-random number algorithm. </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, No. 3, </volume> <pages> pp. 456-468. </pages>
Reference-contexts: The implementation (24) requires more memory than (23), but may give a faster generator. An important instance of this is the generalized feedback shift register (GFSR) generator <ref> [43, 84, 123] </ref> which we now describe. Take m = 2 and L equal to the computer's word length. The recurrence (17) can then be computed by a bitwise exclusive-or of the X nj for which a j = 1.
Reference: 85. <author> Luscher, M. </author> <year> (1994). </year> <title> A portable high-quality random number generator for lattice field theory simulations. </title> <journal> Computer Physics Communications, </journal> <volume> Vol. 79, </volume> <pages> pp. 100-110. </pages>
Reference-contexts: Obviously, this is bad. Perhaps one way to get around this problem is to take only k successive output values, then skip (say) values, take another k successive ones, skip another , and so on. Luscher <ref> [85] </ref> has proposed such an approach, with specific values of for a specific SWB generator, with theoretical justification based on chaos theory. James [56] gives a Fortran implementation of Luscher's generator.
Reference: 86. <author> MacLaren, N. M. </author> <year> (1992). </year> <title> A limit on the usable length of a pseudorandom sequence. </title> <journal> Journal of Statistical Computing and Simulation, </journal> <volume> Vol. 42, </volume> <pages> pp. 47-54. </pages>
Reference-contexts: What is long enough? Suppose that a simulation experiment takes N random numbers from a sequence of length ae. Several reasons justify the need to take ae AE N (see, e.g., <ref> [21, 64, 86, 102, 112] </ref>). Based on geometric arguments, Ripley [112] suggests that ae AE N 2 for linear congruential generators. The papers [75, 79] provide strong experimental support for this, based on extensive empirical tests. Our previous discussion also supports the view that ae must be huge in general.
Reference: 87. <author> Marsaglia, G. </author> <year> (1985). </year> <title> A current view of random number generators. </title> <booktitle> In Computer Science and Statistics, Sixteenth Symposium on the Interface, </booktitle> <pages> pp. 3-10, </pages> <publisher> North-Holland, Amsterdam. Elsevier Science Publishers. </publisher>
Reference-contexts: See <ref> [10, 57, 60, 62, 87] </ref> and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. <p> See [10, 57, 60, 62, 87] and dozens of other references given there. Combination can provably increase the period length. Empirical tests show that it typically improves the statistical behavior as well. Some authors (e.g., <ref> [8, 46, 87] </ref>) have also given theoretical results which (on the surface) appear to "prove" that the output of a combined generator is "more random" than (or at least "as random" as) the output of each of its components. <p> A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND [24]. A newer battery of tests is DIEHARD, designed by Marsaglia <ref> [87, 89] </ref>. It contains more stringent tests than those in [57], in the sense that more generators tend to fail some of the tests.
Reference: 88. <author> Marsaglia, G. </author> <year> (1994). </year> <note> Yet another rng. Posted to the electronic billboard sci.stat.math, August 1. </note>
Reference-contexts: For each n, x n 2 ZZ b , c n 2 ZZ, and the state at step n is s n = (x n ; : : : ; x n+k1 ; c n ). As in <ref> [14, 16, 88] </ref>, we call this a multiply-with-carry (MWC) generator. The idea was suggested in [58, 91]. The recurrence looks like that of an MRG, except that a carry c n is propagated between the steps. <p> It is also better to put more weight on a k , to get a larger m. So one should choose a k close to b, with a 0 + + a k b. Marsaglia <ref> [88] </ref> proposed two specific parameter sets.
Reference: 89. <author> Marsaglia, G. </author> <year> (1996). </year> <title> DIEHARD: a battery of tests of randomness. </title> <note> See http://stat.fsu.edu/geo/diehard.html. </note>
Reference-contexts: A Fortran implementation of (roughly) this set of tests is given in the package TESTRAND [24]. A newer battery of tests is DIEHARD, designed by Marsaglia <ref> [87, 89] </ref>. It contains more stringent tests than those in [57], in the sense that more generators tend to fail some of the tests. <p> Clearly, G1 to G5 and all other generators of that size are unsuitable for such simulations. 52 4.5.4 Empirical Testing: Summary Experience from years of empirical testing with different kinds of tests and different generator families provides certain guidelines <ref> [49, 63, 75, 74, 69, 89, 81] </ref>, Some of these guidelines are summarized in the following remarks. 1. Generators with period length less than 2 32 (say) can now be considered as "baby toys" and should not be used in general software packages.
Reference: 90. <author> Marsaglia, G. </author> <year> (1996). </year> <title> The Marsaglia random number CDROM. </title> <note> See http://stat.fsu.edu/geo/. </note>
Reference-contexts: Some of these devices have been commercialized and can be purchased to produce random numbers on a computer. But they are cumbersome and they may produce unsatisfactory outputs, as there may be significant correlation between the successive numbers. Marsaglia <ref> [90] </ref> applied a battery of statistical tests to three such commercial devices recently and he reports that all three failed the tests spectacularly. <p> After observing that physical phenomena by themselves are bad sources of random numbers and that the deterministic generators may produce sequences with too much structure, Marsaglia <ref> [90] </ref> decided to combine the output of some random number generators with various sources of white and black noise, such as music, pictures, or noise produced by physical devices.
Reference: 91. <author> Marsaglia, G. and A. </author> <month> Zaman </month> <year> (1991). </year> <title> A new class of random number generators. </title> <journal> The Annals of Applied Probability, </journal> <volume> Vol. 1, </volume> <pages> pp. 462-480. </pages>
Reference-contexts: As in [14, 16, 88], we call this a multiply-with-carry (MWC) generator. The idea was suggested in <ref> [58, 91] </ref>. The recurrence looks like that of an MRG, except that a carry c n is propagated between the steps. What is the effect of this carry? Assume that b is a power of 2, which is very nice form the implementation viewpoint. <p> They are analyzed in [16], where a better set of parameters in terms of the lattice structure of the LCG is also given. 36 Special cases of the MWC include the add-with-carry (AWC) and subtract-with--borrow (SWB) generators, originally proposed by Marsaglia and Zaman <ref> [91] </ref> and subsequently analyzed in [13, 122]. For the AWC, put a r = a k = a 0 = 1 for 0 &lt; r &lt; k and all other a ` equal to zero.
Reference: 92. <author> Marse, K. and S. D. </author> <title> Roberts (1983). Implementing a portable FORTRAN uniform (0,1) generator. </title> <journal> Simulation, </journal> <volume> Vol. 41, No. 4, </volume> <pages> pp. 135-139. </pages>
Reference-contexts: It satisfies condition (5). The IMSL library also has available the two multipliers 397204094 and 950706376, with the same modulus, as well as the possibility of adding a shu*e to the LCG. The multiplier a = 630360016 was proposed in [108], is recommended in <ref> [60, 92] </ref> among others, and is used in software such as the SIMSCRIPT II.5 and INSIGHT simulation programming languages. Generator G4, with modulus m = 2 31 and multiplier a = 65539, is the infamous RANDU generator, used for a long time in the IBM/360 operating system.
Reference: 93. <author> Mascagni, M., M. L. Robinson, D. V. Pryor and S. A. </author> <title> Cuccaro (1995). Parallel pseudorandom number generation using additive lagged-fibonacci recursions. </title> <editor> In H. Niederreiter and P. J.-S. Shiue, editors, </editor> <title> Monte Carlo and Quasi-Monte Carlo Methods in Scientific Computing, </title> <booktitle> number 106 in Lecture Notes in Statistics, </booktitle> <pages> pp. 263-277. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For different ideas and surveys on parallel generators, the reader can consult <ref> [2, 9, 22, 93, 109] </ref>. ACKNOWLEDGMENTS This work has been supported by NSERC-Canada Grant ODGP0110050 and SMF0169893, and FCAR-Quebec Grant 93ER1654. Thanks to Christos Alexopoulos, Jerry Banks, Raymond Couture, Hannes Leeb, Thierry Moreau, and Richard Simard for their helpful comments.
Reference: 94. <author> MATLAB (1992). </author> <title> MATLAB Reference Manual. </title> <publisher> The MathWorks Inc., </publisher> <address> Natick, Mass. </address>
Reference-contexts: It is used in the GPSS/H simulation environment. The second multiplier, a = 16807, was originally proposed in [83], is suggested in many simulation books and papers (e.g., [7, 107, 114]) and appears in several software systems such as the SLAM II and SIMAN simulation programming languages, MATLAB <ref> [94] </ref>, the IMSL statistical library [54], and in operating systems for the IBM and Macintosh computers. It satisfies condition (5). The IMSL library also has available the two multipliers 397204094 and 950706376, with the same modulus, as well as the possibility of adding a shu*e to the LCG.
Reference: 95. <author> Matsumoto, M. and Y. </author> <title> Kurita (1992). Twisted GFSR generators. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 2, No. 3, </volume> <pages> pp. 179-194. </pages>
Reference-contexts: An interesting idea is to "twist" the recurrence (17) slightly so that each a i I is replaced by a matrix A i such that the corresponding recurrence (15) has full period length m kL 1 while its implementation remains essentially as fast as (17). Matsumoto and Kurita <ref> [95, 96] </ref> proposed a specific way to do this for GFSR generators and called the resulting generators twisted GFSR (TGFSR). Their second paper and [98, 120] point out some defects in the generators proposed in their first paper, proposes better specific generators, and give nice computer codes in C.
Reference: 96. <author> Matsumoto, M. and Y. </author> <title> Kurita (1994). Twisted GFSR generators II. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 4, No. 3, </volume> <pages> pp. 254-266. </pages>
Reference-contexts: An interesting idea is to "twist" the recurrence (17) slightly so that each a i I is replaced by a matrix A i such that the corresponding recurrence (15) has full period length m kL 1 while its implementation remains essentially as fast as (17). Matsumoto and Kurita <ref> [95, 96] </ref> proposed a specific way to do this for GFSR generators and called the resulting generators twisted GFSR (TGFSR). Their second paper and [98, 120] point out some defects in the generators proposed in their first paper, proposes better specific generators, and give nice computer codes in C. <p> Computer implementations that this author can suggest for the moment include those of the MRGs given in [73], the combined MRGs given in [65, 68], the combined Tausworthe generators given in [66, 70], the twisted GFSRs given in <ref> [96, 98] </ref>, and perhaps the RANLUX code of [56]. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . .
Reference: 97. <author> Matsumoto, M. and Y. </author> <title> Kurita (1996). Strong deviations from randomness in m 63 sequences based on trinomials. </title> <journal> ACM Transactions on Modeling and Computer Sim--ulation, </journal> <volume> Vol. 6, No. 2, </volume> <pages> pp. 99-106. </pages>
Reference-contexts: For specialized jump-ahead algorithms, see [22, 66]. Unfortunately, such simple recurrences lead to LFSR generators with bad structural properties (see <ref> [11, 66, 97, 120] </ref> and other references therein). But combining several recurrences of this type can give good generators.
Reference: 98. <author> Matsumoto, M. and T. </author> <title> Nishimura (1998). Mersenne twister: A 623-dimensionally equidistributed uniform pseudorandom number generator. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 8, No. </volume> <pages> 1. </pages> <note> To appear. </note>
Reference-contexts: Matsumoto and Kurita [95, 96] proposed a specific way to do this for GFSR generators and called the resulting generators twisted GFSR (TGFSR). Their second paper and <ref> [98, 120] </ref> point out some defects in the generators proposed in their first paper, proposes better specific generators, and give nice computer codes in C. Investigations are currently made to find other twists with good properties. <p> Computer implementations that this author can suggest for the moment include those of the MRGs given in [73], the combined MRGs given in [65, 68], the combined Tausworthe generators given in [66, 70], the twisted GFSRs given in <ref> [96, 98] </ref>, and perhaps the RANLUX code of [56]. 4.6.2 Multigenerator Packages with Jump-Ahead Facilities Good simulation languages usually offer many (virtual) random number generators, often numbered 1, 2, 3, . . . .

References-found: 98

