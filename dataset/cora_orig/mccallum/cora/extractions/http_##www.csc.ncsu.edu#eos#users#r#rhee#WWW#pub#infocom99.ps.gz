URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/pub/infocom99.ps.gz
Refering-URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/publication.html
Root-URL: http://www.csc.ncsu.edu
Title: MTCP: Scalable TCP-like Congestion Control for Reliable Multicast  
Author: Injong Rhee Nallathambi Balaguru George N. Rouskas 
Address: Raleigh, NC 27695-7534  12520 Prosperity Drive, Silver Spring, MD 20904  
Affiliation: Department of Computer Science, North Carolina State University,  A&T Systems Inc.,  
Abstract: We present MTCP, a congestion control scheme for large-scale reliable multicast. Congestion control for reliable multicast is important, because of its wide applications in multimedia and collaborative computing, yet nontrivial, because of the potentially large number of receivers involved. Many schemes have been proposed to handle the recovery of lost packets in a scalable manner, but there is little work on the design and implementation of congestion control schemes for reliable multicast. We propose new techniques that can effectively handle instances of congestion occurring simultaneously at various parts of a multicast tree. Our protocol incorporates several novel features: (1) hierarchical congestion status reports that distribute the load of processing feedback from all receivers across the multicast group, (2) the relative time delay (RTD) concept which overcomes the difficulty of estimating round-trip times in tree-based multicast environments, (3) window-based control that prevents the sender from transmitting faster than packets leave the bottleneck link on the multicast path through which the sender's traffic flows, (4) a retransmission window that regulates the flow of repair packets to prevent local recovery from causing congestion, and (5) a selective acknowledgment scheme that prevents independent (i.e., non-congestion-related) packet loss from reducing the sender's transmission rate. We have implemented MTCP both on UDP in SunOS 5.6 and on the simulator ns, and we have conducted extensive Internet experiments and simulation to test the scalability and inter-fairness properties of the protocol. The encouraging results we have obtained support our confidence that TCP-like congestion control for large-scale reliable multicast is within our grasp. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> Proc. of SIGCOMM, </booktitle> <pages> pages 314-329, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: This paper is concerned with the flow and congestion control of best-effort multicast traffic. Congestion control is an integral part of any best-effort Internet data transport protocol, and the end-to-end congestion control mechanisms employed in TCP <ref> [1] </ref> have been one of the key contributors to the success of the Internet. A conforming TCP flow is expected to respond to congestion indication by drastically reducing its transmission rate and by slowly increasing its rate during steady state. <p> As these values can change over time because of routing and network traffic changes, MTCP needs to track these changes and modify its timeout values accordingly. We use the techniques employed by TCP <ref> [1] </ref> to set the RT O RT D and RT O RT T based on the average measured length of RTDs and RTTs, respectively, and their deviations in time. <p> This doubling of the timeout value continues until an ACK for the packet is received. 3.5 Slow Start MTCP employs a slightly modified version of slow start <ref> [1] </ref> to estimate the available bandwidth in the multicast paths. Specifically, the sender and SAs maintain a TCP-like congestion window whose size is indicated by cwnd. The algorithm starts by initializing cwnd to one segment size.
Reference: [2] <author> B. Braden, et al. </author> <title> Recommedations on queue management and congestion avoidance in the Internet. </title> <type> Internet Draft, </type> <month> March </month> <year> 1997. </year>
Reference-contexts: This congestion control mechanism encourages the fair sharing of a congested link among multiple competing TCP flows. A flow is said to be TCP-compatible if it behaves similar to a flow produced by TCP under congestion <ref> [2] </ref>. At steady state, a TCP-compatible flow uses no more bandwidth than a conforming TCP connection running under comparable conditions. Most of the multicast schemes proposed so far do not employ end-to-end congestion control. <p> Furthermore, as it has been pointed out [14], extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) <ref> [15, 2] </ref>. We have observed through Internet experiments and simulation that the delay in MTCP is well within this range. 3.10 Window Update Acknowledgments In MTCP, congestion summaries are normally piggybacked on every ACK and NACK. Thus, congestion summaries are reported by an SA whenever a new packet is received.
Reference: [3] <author> S. Floyd and K. </author> <month> Fall. </month> <title> Router mechanisms to support end-to-end congestion control. </title> <type> Tech. Report, </type> <institution> LBL, </institution> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: Furthermore, multicast flows insensitive to congestion (especially congestion caused by their own traffic) are likely to cause simultaneous congestion collapses in many parts of the Internet <ref> [3] </ref>. Because of the far-reaching damage of TCP-incompatible multicast, it is highly unlikely that transport protocols for large-scale reliable multicast will become widely accepted without TCP-like congestion control mechanisms. The main challenge of congestion control for reliable multicast is scalability. <p> Since MTCP emulates TCP on a logical tree, the throughput behavior of MTCP is similar to that of TCP and can be approximated as <ref> [3] </ref>: T = cs p p , where s is the packet size, RTT is the round trip time, p is the packet loss rate, and c is some constant.
Reference: [4] <author> T. Jiang, M. H. Ammar, and E. W. Zegura. </author> <title> Inter-receiver fairness: A novel performance measure for multicast ABR sessions. </title> <booktitle> Proc. of SIGMETRICS, </booktitle> <pages> pages 202-211, </pages> <month> June </month> <year> 1998. </year>
Reference-contexts: While such a feature fosters fairness among different flows (inter-fairness), it does not address the issue of fairness among the receivers in the same multicast group (intra-fairness) <ref> [4] </ref>. Specifically, it would be unfair for non-congested receivers to be subject to a low transmission rate just because of some isolated instances of congestion. In this paper, we introduce Multicast TCP (MTCP), a new congestion control protocol for reliable multicast that addresses the inter-fairness and scalability issues.
Reference: [5] <author> B. N. Levine, D. B. Lavo, and J. J. Garcia-Luna-Aceves. </author> <title> The case for reliable concurrent multicasting using shared ack trees. </title> <booktitle> Proc. of Multimedia, </booktitle> <pages> pages 365-376, </pages> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> Tree-based protocols are not new and have been studied by many researchers [5, 6, 7, 8, 9]. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. In <ref> [5, 10] </ref> it has been analytically shown that tree-based protocols can achieve higher throughput than any other class of protocols, and that their hierarchical structure is the key to reducing the processing load at each member of the multicast group.
Reference: [6] <author> S. Paul, et al. </author> <title> Reliable multicast transport protocol (RMTP). </title> <booktitle> Proc. of INFOCOM, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP <ref> [6] </ref> and TMTP [8] do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness.
Reference: [7] <author> H. W. Holbrook, S. K. Singhal, and D. R. Cheriton. </author> <title> Log-based receiver-reliable multicast for distributed interactive simulation. </title> <booktitle> Proc. of SIGCOMM, </booktitle> <pages> pages 328-341, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion.
Reference: [8] <author> R. Yavatkar, J. Griffioen, and M. Sudan. </author> <title> A reliable dissemination protocol for interactive collaborative applications. </title> <booktitle> Proc. of Multimedia, </booktitle> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP [6] and TMTP <ref> [8] </ref> do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness. In [9, 11] it was proposed to use a tree structure for feedback control, and a detailed description of how to construct such a tree was provided, but no details on congestion control were given.
Reference: [9] <author> M. Hofmann. </author> <title> A generic concept for large-scale multicast. </title> <booktitle> Proc. of IZS '96, </booktitle> <publisher> Springer Verlag, </publisher> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP [6] and TMTP [8] do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness. In <ref> [9, 11] </ref> it was proposed to use a tree structure for feedback control, and a detailed description of how to construct such a tree was provided, but no details on congestion control were given.
Reference: [10] <author> B. N. Levine and J. J. Garcia-Luna-Aceves. </author> <title> A comparision of known classes of reliable multicast protocols. </title> <booktitle> Proc. of ICNP, </booktitle> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Tree-based protocols are not new and have been studied by many researchers [5, 6, 7, 8, 9]. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. In <ref> [5, 10] </ref> it has been analytically shown that tree-based protocols can achieve higher throughput than any other class of protocols, and that their hierarchical structure is the key to reducing the processing load at each member of the multicast group.
Reference: [11] <author> M. Hofmann. </author> <title> Adding scalability to transport level multicast. </title> <booktitle> Proc. of 3rd COST 237 Workshop, </booktitle> <publisher> Springer Verlag, </publisher> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP [6] and TMTP [8] do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness. In <ref> [9, 11] </ref> it was proposed to use a tree structure for feedback control, and a detailed description of how to construct such a tree was provided, but no details on congestion control were given.
Reference: [12] <author> S. Deering. </author> <title> Multicast Routing in a Datagram Internetwork. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Below we give an overview of MTCP, and in the next section, we provide a detailed description of the protocol. Packet loss detection and recovery via selective acknowledgments. A sender multicasts data packets using IP-Multicast <ref> [12] </ref>. SAs in the logical tree store packets received from the sender in their buffers, and set a retransmission timer, for each packet they buffer. The sender also sets a retransmission timer for each of the packets it transmits.
Reference: [13] <author> L. S. Brakmo, S. W. O'Malley, and L. L. Peterson. </author> <title> TCP Ve-gas: New techniques for congestion detection and avoidance. </title> <booktitle> Proc. of SIGCOMM, </booktitle> <pages> pages 24-35, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: TCP-like congestion window. Each SA (including the sender) estimates the minimum bandwidth available in the multicast routes from the sender to its children by maintaining a TCP-like congestion window (cwnd). An SA maintains its cwnd using TCP-Vegas <ref> [13] </ref> congestion control mechanisms such as slow start and congestion avoidance. <p> This linear increase period is called the congestion avoidance period. Since during slow start cwnd increases exponentially, this process itself can cause congestion. MTCP adopts the slow start mechanisms of TCP-Vegas <ref> [13] </ref> to detect congestion even during slow start.
Reference: [14] <author> S. Floyd. </author> <title> Requirements for congestion control for reliable multicast. </title> <booktitle> The Reliable Multicast Research Group Meeting in Cannes, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: However, unless congestion is reported directly to the sender (an approach that inevitably leads to ACK implosion), this extra delay is unavoidable. Furthermore, as it has been pointed out <ref> [14] </ref>, extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) [15, 2].
Reference: [15] <author> S. Floyd and V. Jacobson. </author> <title> Random early detection gateways for congestion avoidance. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4) </volume> <pages> 397-413, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Furthermore, as it has been pointed out [14], extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) <ref> [15, 2] </ref>. We have observed through Internet experiments and simulation that the delay in MTCP is well within this range. 3.10 Window Update Acknowledgments In MTCP, congestion summaries are normally piggybacked on every ACK and NACK. Thus, congestion summaries are reported by an SA whenever a new packet is received.
References-found: 15

