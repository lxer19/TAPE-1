URL: ftp://theory.lcs.mit.edu/pub/people/oded/zkAK.ps
Refering-URL: http://theory.lcs.mit.edu/~oded/zk.html
Root-URL: 
Email: E-mail: oded@wisdom.weizmann.ac.il.  
Title: How to Construct Constant-Round Zero-Knowledge Proof Systems for NP  
Author: Oded Goldreich Ariel Kahan 
Address: Rehovot, Israel.  P.O.Box 45065, Jerusalem, Israel.  
Affiliation: Department of Computer Science and Applied Mathematics, Weizmann Institute of Science,  BRM Technologies,  
Note: To appear in Journal of Cryptology, 1996.  
Date: March 1995  
Abstract: Constant-round zero-knowledge proof systems for every language in N P are presented, assuming the existence of a collection of claw-free functions. In particular, it follows that such proof systems exist assuming the intractability of either the Discrete Logarithm Problem or the Factoring Problem for Blum Integers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Blum, </author> <title> "Coin Flipping by Phone", </title> <journal> Sigact News, </journal> <volume> Vol. 15, No. 1, </volume> <year> 1983. </year>
Reference-contexts: We stress that the reference string is not selected by either parties, but is rather postulated to be uniformly chosen by some trusted third party. Clearly, combining a secure coin-flipping protocol (cf. Blum <ref> [1] </ref>) with a non-interactive zero-knowledge proof system, one can derive a zero-knowledge proof system. Note, however, that the round-complexity of the resulting interactive proof system depends on the round-complexity of the coin-flipping protocol and on whether it can be securely performed in parallel many times.
Reference: [2] <author> M. Blum, P. Feldman and S. Micali, </author> <title> "Non-Interactive Zero-Knowledge and its Applications", </title> <booktitle> 20th STOC, </booktitle> <pages> pp. 103-112, </pages> <year> 1988. </year>
Reference-contexts: Non-interactive zero-knowledge proof systems, as defined by Blum, Feldman and Micali <ref> [2] </ref>, seem related to constant-round zero-knowledge proof systems. One has to be careful, though, and recall that in the setting of non-interactive proof systems both prover and verifier have access to a uniformly chosen string, called the reference string.
Reference: [3] <author> G. Brassard, D. Chaum and C. Crepeau, </author> <title> "Minimum Disclosure Proofs of Knowledge", </title> <journal> JCSS, </journal> <volume> Vol. 37, No. 2, </volume> <pages> pp. 156-189, </pages> <year> 1988. </year>
Reference-contexts: simplicity, we address the problem of constructing (constant-round) zero-knowledge proof systems with negligible error probability. 1 We also stress that we consider interactive proof systems, as defined by Goldwasser, Micali and Rackoff [11], rather than computationally sound proof systems (also known as arguments), as defined by Brassard, Chaum and Crepeau <ref> [3] </ref>. The difference between the two is sketched below. In (regular) interactive proof systems, the soundness condition requires that nobody, regardless of his/her computational abilities, can fool the verifier into accepting false statements (except with negligible probability).
Reference: [4] <author> G. Brassard, C. Crepeau and M. Yung, </author> <title> "Constant-round perfect zero-knowledge computationally convincing protocols", </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 84, </volume> <year> 1991, </year> <pages> pp. 23-52. </pages>
Reference-contexts: See [7]. Remark: The work reported here has been cited in the literature already in 1988. However, no version of this work has ever appeared before. 1.3 Related Work Constant-round zero-knowledge computationally sound proof (i.e., argument) systems for N P have been presented in [6] and <ref> [4] </ref>. As explained above, these protocols are weaker than ours in the sense that they don't constitute proof systems (with "unrestricted" soundness condition). However, these works have also advantages over ours. <p> of Brassard, Crepeau and Yung is that their protocol is perfect zero-knowledge 2 A sequential version of the Graph Non-Isomorphism presented in [10] can be shown to be almost-perfect (statistical) zero-knowledge by using a simulator that runs for strict polynomial-time. 2 this work Fiege and Shamir [6] Brassard et. al. <ref> [4] </ref> soundness + (unbounded) (computational) (computational) zero-knowledge (computational) (computational) + (perfect) assumptions (claw-free) + (one-way) (specific) [4], rather than just being computationally zero-knowledge. 3 (The intractability assumption in [4] is incomparable to ours, and seems stronger than the mere existence of one-way functions.) Hence, the three works (i.e., our, and those <p> of the Graph Non-Isomorphism presented in [10] can be shown to be almost-perfect (statistical) zero-knowledge by using a simulator that runs for strict polynomial-time. 2 this work Fiege and Shamir [6] Brassard et. al. <ref> [4] </ref> soundness + (unbounded) (computational) (computational) zero-knowledge (computational) (computational) + (perfect) assumptions (claw-free) + (one-way) (specific) [4], rather than just being computationally zero-knowledge. 3 (The intractability assumption in [4] is incomparable to ours, and seems stronger than the mere existence of one-way functions.) Hence, the three works (i.e., our, and those of [6] and [4]) are incomparable: each has some advantage over the other two. <p> almost-perfect (statistical) zero-knowledge by using a simulator that runs for strict polynomial-time. 2 this work Fiege and Shamir [6] Brassard et. al. <ref> [4] </ref> soundness + (unbounded) (computational) (computational) zero-knowledge (computational) (computational) + (perfect) assumptions (claw-free) + (one-way) (specific) [4], rather than just being computationally zero-knowledge. 3 (The intractability assumption in [4] is incomparable to ours, and seems stronger than the mere existence of one-way functions.) Hence, the three works (i.e., our, and those of [6] and [4]) are incomparable: each has some advantage over the other two. <p> (computational) (computational) zero-knowledge (computational) (computational) + (perfect) assumptions (claw-free) + (one-way) (specific) <ref> [4] </ref>, rather than just being computationally zero-knowledge. 3 (The intractability assumption in [4] is incomparable to ours, and seems stronger than the mere existence of one-way functions.) Hence, the three works (i.e., our, and those of [6] and [4]) are incomparable: each has some advantage over the other two. Non-interactive zero-knowledge proof systems, as defined by Blum, Feldman and Micali [2], seem related to constant-round zero-knowledge proof systems.
Reference: [5] <author> J. Boyar, M. Krentel and S. Kurtz, </author> <title> "A Discrete Logarithm Implementation of Perfect Zero-Knowledge Blobs", </title> <journal> J. of Cryptology, </journal> <volume> Vol. 2, </volume> <pages> pp. 63-76, </pages> <year> 1990. </year>
Reference-contexts: Our construction relies on the existence of collections of claw-free functions. Such functions exist if factoring Blum Integers is hard (cf. [12]), or alternatively if the Discrete Logarithm Problem is intractable (cf. <ref> [5] </ref>). As usual in the area of zero-knowledge, the results are most simply stated using a non-uniform formalization. In this formalization the intractability assumptions are stated with respect to non-uniform families of polynomial-size circuits. A formalization in terms of uniform complexity is possible. See [7].
Reference: [6] <author> U. Feige and A. Shamir, </author> <title> "Zero-Knowledge Proofs of Knowledge in Two Rounds", </title> <booktitle> Advances in Cryptology - Crypto89 (proceedings), </booktitle> <pages> pp. 526-544, </pages> <year> 1990. </year>
Reference-contexts: See [7]. Remark: The work reported here has been cited in the literature already in 1988. However, no version of this work has ever appeared before. 1.3 Related Work Constant-round zero-knowledge computationally sound proof (i.e., argument) systems for N P have been presented in <ref> [6] </ref> and [4]. As explained above, these protocols are weaker than ours in the sense that they don't constitute proof systems (with "unrestricted" soundness condition). However, these works have also advantages over ours. <p> As explained above, these protocols are weaker than ours in the sense that they don't constitute proof systems (with "unrestricted" soundness condition). However, these works have also advantages over ours. The advantage of the work of Feige and Shamir is that it uses a much weaker intractability assumption <ref> [6] </ref>; specifically, they only assume the existence of arbitrary one-way functions. <p> advantage of the work of Brassard, Crepeau and Yung is that their protocol is perfect zero-knowledge 2 A sequential version of the Graph Non-Isomorphism presented in [10] can be shown to be almost-perfect (statistical) zero-knowledge by using a simulator that runs for strict polynomial-time. 2 this work Fiege and Shamir <ref> [6] </ref> Brassard et. al. [4] soundness + (unbounded) (computational) (computational) zero-knowledge (computational) (computational) + (perfect) assumptions (claw-free) + (one-way) (specific) [4], rather than just being computationally zero-knowledge. 3 (The intractability assumption in [4] is incomparable to ours, and seems stronger than the mere existence of one-way functions.) Hence, the three works <p> + (unbounded) (computational) (computational) zero-knowledge (computational) (computational) + (perfect) assumptions (claw-free) + (one-way) (specific) [4], rather than just being computationally zero-knowledge. 3 (The intractability assumption in [4] is incomparable to ours, and seems stronger than the mere existence of one-way functions.) Hence, the three works (i.e., our, and those of <ref> [6] </ref> and [4]) are incomparable: each has some advantage over the other two. Non-interactive zero-knowledge proof systems, as defined by Blum, Feldman and Micali [2], seem related to constant-round zero-knowledge proof systems. <p> This interactive proof system, presented by Goldreich, Micali and Wigderson [10], proceeds 3 The Feige-Shamir argument system, mentioned above, also has a perfect zero-knowledge version <ref> [6] </ref>, but this version relies on seemingly stronger complexity theoretic assumptions than required for the computational zero-knowledge version. 3 by (a polynomial number of) sequential repetitions of the following basic protocol. * Common Input: A simple (3-colorable) graph G = (V; E). * Prover's first step (P1): Let be a 3-coloring <p> The disadvantage in this approach is that commitment schemes with perfect secrecy seem harder to construct that "regular" ones. Implementing the two (above mentioned) approaches turned out to be more difficult than anticipated. Nevertheless, the first approach has been implemented in <ref> [6] </ref> yielding zero-knowledge arguments for every language in N P provided that one-way functions exist. The current paper presents an implementation of the second approach.
Reference: [7] <author> O. Goldreich, </author> <title> "A Uniform-Complexity Treatment of Encryption and Zero-Knowledge", </title> <journal> J. of Cryptology, </journal> <volume> Vol. 6, </volume> <pages> pp. 21-53, </pages> <year> 1993. </year>
Reference-contexts: As usual in the area of zero-knowledge, the results are most simply stated using a non-uniform formalization. In this formalization the intractability assumptions are stated with respect to non-uniform families of polynomial-size circuits. A formalization in terms of uniform complexity is possible. See <ref> [7] </ref>. Remark: The work reported here has been cited in the literature already in 1988. However, no version of this work has ever appeared before. 1.3 Related Work Constant-round zero-knowledge computationally sound proof (i.e., argument) systems for N P have been presented in [6] and [4].
Reference: [8] <author> O. Goldreich and H. Krawcyzk, </author> <title> "On the Composition of Zero-Knowledge Proof Systems", </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 25, No. 1, </volume> <month> February </month> <year> 1996, </year> <pages> pp. 169-192. </pages>
Reference-contexts: However, as demonstrated by Goldreich and Krawcyzk, the protocol which results from parallel execution of the basic protocol, sufficiently many times, can not be proven zero-knowledge using a universal simulator which uses the verifier as a black-box <ref> [8] </ref>. We note that all known zero-knowledge protocols are proven to be zero-knowledge using such a universal simulator, and, furthermore, that it is hard to conceive an alternative way of proving that a protocol is zero-knowledge. Hence, slightly different approaches are required.
Reference: [9] <author> O. Goldreich and L.A. Levin, </author> <title> "Hard-core Predicates for any One-Way Function", </title> <booktitle> 21st STOC, </booktitle> <pages> pp. 25-32, </pages> <year> 1989. </year>
Reference-contexts: Naor showed that commitment schemes can be constructed using any pseudorandom generator [17], and the latter are known to exists provided that one-way functions exist [14, 13]. A much simpler commitment scheme can be constructed using any one-way permutation f . Using the results in <ref> [9] </ref>, we may assume without loss of generality that the permutation f has a hard-core predicate, denoted b.
Reference: [10] <author> O. Goldreich, S. Micali and A. Wigderson, </author> <title> "Proofs that Yield Nothing But Their Validity or All Languages in NP Have Zero-Knowledge Proof Systems", </title> <journal> JACM, </journal> <volume> Vol. 38, No. 1, </volume> <pages> pp. 691-729, </pages> <year> 1991. </year>
Reference-contexts: We confine ourselves to point out two facts to which zero-knowledge proofs owe their wide applicability: firstly, the generality of the notion of zero-knowledge [11]; and, secondly, the ability to construct zero-knowledge proof systems for every NP statement (using a general intractability assumption) <ref> [10, Thm. 5] </ref>. However, to be of practical use, zero-knowledge proofs have to be also efficient. A very important complexity measure for (cryptographic as well as arbitrary) protocols is their round-complexity. Namely, the number of message exchanges taking place in the course of the execution. <p> A very important complexity measure for (cryptographic as well as arbitrary) protocols is their round-complexity. Namely, the number of message exchanges taking place in the course of the execution. The above quoted result of Goldreich, Micali, and Wigderson <ref> [10] </ref>, by which the existence of one-way functions implies the existence of zero-knowledge proof system for every language in N P, is obtained using proof systems with very high round-complexity. Alternative constructions have lower, yet non-constant, round-complexity. <p> Loosely speaking, the knowledge tightness of a zero-knowledge protocol is an upper bound on the ratio between the running time of simulators for the protocol and the running time of the corresponding verifiers <ref> [10, Remark 18] </ref>. The aim is to construct constant-round proof systems with simultaneously small error probability and small knowledge tightness. 1 cheating provers and, furthermore, it is typically proven to hold under some intractability assumption. <p> Finally, we stress that our approach depends, in an essential manner, on the standard definition of zero-knowledge which allows the simulator to run in expected polynomial-time (cf., <ref> [11, 10] </ref>). We do not know whether our results can be obtained under a more strict definition of zero-knowledge which only allows the simulator to run in (strict) polynomial-time. We remark that many other popular results also depend on the same convention. <p> We remark that many other popular results also depend on the same convention. For example, Graph Isomorphism (GI) is shown to have a perfect zero-knowledge proof using a simulator that runs for expected polynomial-time <ref> [10, Thm. 2] </ref>. To the best of our knowledge, using a simulator that runs for strict polynomial-time, one can only show that GI has an interactive proof which is almost-perfect (statistical) zero-knowledge. <p> To the best of our knowledge, using a simulator that runs for strict polynomial-time, one can only show that GI has an interactive proof which is almost-perfect (statistical) zero-knowledge. Even worse, the Graph Non-Isomorphism presented in <ref> [10] </ref> is not known to have an almost-perfect zero-knowledge proof (under strict polynomial-time simulators), whereas it has a perfect zero-knowledge proof system [10, Thm. 3] (with respect to expected polynomial-time simulators). 2 1.2 Our Main Result We show how to construct constant-round zero-knowledge interactive proof systems for any language in N <p> Even worse, the Graph Non-Isomorphism presented in [10] is not known to have an almost-perfect zero-knowledge proof (under strict polynomial-time simulators), whereas it has a perfect zero-knowledge proof system <ref> [10, Thm. 3] </ref> (with respect to expected polynomial-time simulators). 2 1.2 Our Main Result We show how to construct constant-round zero-knowledge interactive proof systems for any language in N P. Our construction relies on the existence of collections of claw-free functions. <p> The advantage of the work of Brassard, Crepeau and Yung is that their protocol is perfect zero-knowledge 2 A sequential version of the Graph Non-Isomorphism presented in <ref> [10] </ref> can be shown to be almost-perfect (statistical) zero-knowledge by using a simulator that runs for strict polynomial-time. 2 this work Fiege and Shamir [6] Brassard et. al. [4] soundness + (unbounded) (computational) (computational) zero-knowledge (computational) (computational) + (perfect) assumptions (claw-free) + (one-way) (specific) [4], rather than just being computationally zero-knowledge. <p> This interactive proof system, presented by Goldreich, Micali and Wigderson <ref> [10] </ref>, proceeds 3 The Feige-Shamir argument system, mentioned above, also has a perfect zero-knowledge version [6], but this version relies on seemingly stronger complexity theoretic assumptions than required for the computational zero-knowledge version. 3 by (a polynomial number of) sequential repetitions of the following basic protocol. * Common Input: A simple <p> reveals the values corresponding to the i th and j th commitments; * Verifier's second step (V2): The verifier accepts if and only if the revealed values are different elements of f1; 2; 3g and if they indeed fit the corresponding commitments received in step P1; It is shown in <ref> [10] </ref> that the basic protocol is zero-knowledge and that this property is preserved under sequential repetitions. Repetitions are required in order to reduce the error probability of the basic protocol, which might be as large as 1 1 jEj , to a negligible function of jGj. <p> Hence, slightly different approaches are required. Two different approaches for resolving the above difficulties have been suggested in <ref> [10] </ref>. These two approaches share an underlying idea which is to let the verifier commit to its queries (i.e., a sequence of edges each corresponding to a different commitment to a coloring of the graph) before the prover commits to a sequence of colorings of the graph. <p> (expected 9 ) polynomial 8 The negligible difference in likelihood is due to the fact that the definition of perfect secrecy only requires the commitment distributions to be statistically close. 9 Verifier strategies which run in expected polynomial-time but not in strict polynomial-time are considered for sake of elegancy; cf., <ref> [11, 10] </ref>. There are two common alternative definitions for the (expected) 16 time interactive machine, V fl , we introduce an expected polynomial-time simulator, de-noted M fl . The simulator starts by selecting and fixing a random tape, r, for V fl . <p> In such a case, the simulator will find out the query edges in Step (S1), and using them in Step (S2) it will simulate the interaction of V fl with the real prover. Using ideas as in <ref> [10] </ref>, one can show that the simulation is computationally indistinguishable from the real interaction. <p> Proof: When trying to carry out the standard argument (i.e., as in <ref> [10] </ref>), we again encounter the difficulty mentioned in the proof of the previous claim. Namely, the standard argument proceeds by contradiction and uses the machine M fl to do things assumed impossible (i.e., distinguish computationally secure commitments to different values). <p> It follows that algorithm A still distinguishes, with gap at least *(G n ) 1=2P (jG n j), the output of the truncated M fl from the real interaction with the prover. At this point, we may apply the standard techniques (cf. <ref> [10] </ref>, but actually the proof here is simpler). Case 2: For infinitely many n 2 S, it holds that Prob (R ((P; V fl )(G n )) = 1) &lt; *(G n )=3.
Reference: [11] <author> S. Goldwasser, S. Micali and C. Rackoff, </author> <title> "The Knowledge Complexity of Interactive Proof Systems", </title> <journal> SIAM J. Comput., </journal> <volume> Vol. 18, No. 1, </volume> <pages> pp. 186-208, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction The applications of zero-knowledge proof systems to cryptography are too numerous and too well known to be listed here. We confine ourselves to point out two facts to which zero-knowledge proofs owe their wide applicability: firstly, the generality of the notion of zero-knowledge <ref> [11] </ref>; and, secondly, the ability to construct zero-knowledge proof systems for every NP statement (using a general intractability assumption) [10, Thm. 5]. However, to be of practical use, zero-knowledge proofs have to be also efficient. A very important complexity measure for (cryptographic as well as arbitrary) protocols is their round-complexity. <p> Hence, for sake of simplicity, we address the problem of constructing (constant-round) zero-knowledge proof systems with negligible error probability. 1 We also stress that we consider interactive proof systems, as defined by Goldwasser, Micali and Rackoff <ref> [11] </ref>, rather than computationally sound proof systems (also known as arguments), as defined by Brassard, Chaum and Crepeau [3]. The difference between the two is sketched below. <p> Finally, we stress that our approach depends, in an essential manner, on the standard definition of zero-knowledge which allows the simulator to run in expected polynomial-time (cf., <ref> [11, 10] </ref>). We do not know whether our results can be obtained under a more strict definition of zero-knowledge which only allows the simulator to run in (strict) polynomial-time. We remark that many other popular results also depend on the same convention. <p> (expected 9 ) polynomial 8 The negligible difference in likelihood is due to the fact that the definition of perfect secrecy only requires the commitment distributions to be statistically close. 9 Verifier strategies which run in expected polynomial-time but not in strict polynomial-time are considered for sake of elegancy; cf., <ref> [11, 10] </ref>. There are two common alternative definitions for the (expected) 16 time interactive machine, V fl , we introduce an expected polynomial-time simulator, de-noted M fl . The simulator starts by selecting and fixing a random tape, r, for V fl .
Reference: [12] <author> S. Goldwasser, S. Micali and R.L. Rivest, </author> <title> "A Digital Signature Scheme Secure Against Adaptive Chosen-Message Attacks", </title> <journal> SIAM J. Comput., </journal> <volume> Vol. 17, No. 2, </volume> <pages> pp. 281-308, </pages> <year> 1988. </year>
Reference-contexts: Our construction relies on the existence of collections of claw-free functions. Such functions exist if factoring Blum Integers is hard (cf. <ref> [12] </ref>), or alternatively if the Discrete Logarithm Problem is intractable (cf. [5]). As usual in the area of zero-knowledge, the results are most simply stated using a non-uniform formalization. In this formalization the intractability assumptions are stated with respect to non-uniform families of polynomial-size circuits.
Reference: [13] <author> J. Hastad, </author> <title> "Pseudorandom Generators under Uniform Assumptions", </title> <booktitle> 22nd STOC, </booktitle> <pages> pp. 395-404, </pages> <year> 1990. </year>
Reference-contexts: A dual definition, requiring information theoretic secrecy and computational infeasibility of creating ambiguities, is presented in Subsection 3.2. Naor showed that commitment schemes can be constructed using any pseudorandom generator [17], and the latter are known to exists provided that one-way functions exist <ref> [14, 13] </ref>. A much simpler commitment scheme can be constructed using any one-way permutation f . Using the results in [9], we may assume without loss of generality that the permutation f has a hard-core predicate, denoted b.
Reference: [14] <author> R. Impagliazzo, L.A. Levin and M. Luby, </author> <title> "Pseudorandom Generation from One-way Functions", </title> <booktitle> 21st STOC, </booktitle> <pages> pp. 12-24, </pages> <year> 1989. </year> <month> 23 </month>
Reference-contexts: A dual definition, requiring information theoretic secrecy and computational infeasibility of creating ambiguities, is presented in Subsection 3.2. Naor showed that commitment schemes can be constructed using any pseudorandom generator [17], and the latter are known to exists provided that one-way functions exist <ref> [14, 13] </ref>. A much simpler commitment scheme can be constructed using any one-way permutation f . Using the results in [9], we may assume without loss of generality that the permutation f has a hard-core predicate, denoted b.
Reference: [15] <author> J. Kilian, </author> <title> "A Note on Efficient Zero-Knowledge Proofs and Arguments", </title> <booktitle> 24th STOC, </booktitle> <pages> pp. 723-732, </pages> <year> 1992. </year>
Reference-contexts: In fact, one can view our work as suggesting a coin-flipping protocol that remains secure even if executed in parallel polynomially many times. Other efficiency measures related to zero-knowledge proofs and arguments have been investigated in many works; see for example, <ref> [15, 16] </ref>. 1.4 Organization We start with an overview of our approach and present an abstraction of a technical difficulty encountered and resolved. We then present the building blocks of our interactive proof system which are two "complementary" types of commitment schemes.
Reference: [16] <author> J. Kilian, </author> <title> "On the Complexity of Bounded-Interaction and Noninteractive Zero-Knowledge Proofs", </title> <booktitle> 35th FOCS, </booktitle> <pages> pp. 466-477, </pages> <year> 1994. </year>
Reference-contexts: In fact, one can view our work as suggesting a coin-flipping protocol that remains secure even if executed in parallel polynomially many times. Other efficiency measures related to zero-knowledge proofs and arguments have been investigated in many works; see for example, <ref> [15, 16] </ref>. 1.4 Organization We start with an overview of our approach and present an abstraction of a technical difficulty encountered and resolved. We then present the building blocks of our interactive proof system which are two "complementary" types of commitment schemes.
Reference: [17] <author> M. Naor, </author> <title> "Bit Commitment using Pseudorandomness", </title> <journal> Journal of Cryptology, </journal> <volume> Vol. 4, </volume> <pages> pp. 151-158, </pages> <year> 1991. </year> <month> 24 </month>
Reference-contexts: A dual definition, requiring information theoretic secrecy and computational infeasibility of creating ambiguities, is presented in Subsection 3.2. Naor showed that commitment schemes can be constructed using any pseudorandom generator <ref> [17] </ref>, and the latter are known to exists provided that one-way functions exist [14, 13]. A much simpler commitment scheme can be constructed using any one-way permutation f .
References-found: 17

