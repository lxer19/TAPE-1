URL: http://www.cs.pitt.edu/~kirk/papers/load.ps
Refering-URL: http://www.cs.pitt.edu/~kirk/papers/index.html
Root-URL: 
Email: E-Mail: plotkin@cs.stanford.edu  E-Mail: kirk@cs.pitt.edu  E-Mail: orli@cs.stanford.edu  
Phone: 9209283.  
Title: On-line Load Balancing of Temporary Tasks  
Author: Yossi Azar Bala Kalyanasundaram Serge Plotkin Kirk R. Pruhs Orli Waarts k k 
Note: Research supported by U.S. Army Research Office Grant DAAL-03-91-G-0102, and by a grant from Mitsubishi Electric Laboratories.  Supported in part by NSF under grant CCR  
Address: Pittsburgh  Pittsburgh  Center.  
Affiliation: Tel-Aviv Univ.  Univ. of  Stanford Univ.  Univ. of  IBM Almaden Dept. of Computer Science, Stanford University.  -Dept. of Computer Science, University of Pittsburgh.  IBM Almaden Research  
Abstract: This paper considers the non-preemptive on-line load balancing problem where tasks have limited duration in time. Upon arrival, each task has to be immediately assigned to one of the machines, increasing the load on this machine for the duration of the task by an amount that depends on both the machine and the task. The goal is to minimize the maximum load. Azar, Broder and Karlin studied the unknown duration case where the duration of a task is not known upon its arrival [4]. They focused on the special case in which for each task there is a subset of machines capable of executing it, and the increase in load due to assigning the task to one of these machines depends only on the task and not on the machine. For this case, they showed an O(n 2=3 )-competitive algorithm, and an ( n) lower bound on the competitive ratio, where n is the number of the machines. This paper closes the gap by giving an O( p n)-competitive algorithm. In addition, trying to overcome the ( p n) lower bound for the case of unknown task duration, this paper initiates a study of the load balancing problem for tasks with known duration (i.e., the duration of a task becomes known upon its arrival). For this case we show an O(log nT )-competitive algorithm, where T is the ratio of the maximum possible duration of a task to the minimum possible duration of a task. The paper explores also an alternative way to overcome the ( p n) bound; it con siders the related machines case with unknown task duration. In the related machines fl Preliminary version of this paper was presented at the 1993 Workshop on Algorithms and Data Structures. This paper merges the results of a paper by the first, third and fifth authors and a paper by the second and the forth authors. y Dept. of Computer Science, Tel-Aviv University. E-Mail: azar@math.tau.ac.il z Dept. of Computer Science, University of Pittsburgh. Supported in part by NSF under grants CCR 9009318 and CCR-9202158. E-Mail: kalyan@cs.pitt.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin, and O. Waarts. </author> <title> On-line load balancing with applications to machine scheduling and virtual circuit routing. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 623-631, </pages> <month> May </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Interestingly, its decision where to assign a new task depends not only on the current load on each machine but also on the history of the machines. Our algorithm for the known duration case is an application of the virtual circuit routing algorithm of <ref> [1] </ref>. Roughly speaking, we show how to use multiple concurrent instances of the permanent virtual circuit routing algorithm in order to solve a single instance of the load balancing problem with temporal tasks. Our approach, together with the results in [1], can be used to show an O (log nT )-competitive <p> is an application of the virtual circuit routing algorithm of <ref> [1] </ref>. Roughly speaking, we show how to use multiple concurrent instances of the permanent virtual circuit routing algorithm in order to solve a single instance of the load balancing problem with temporal tasks. Our approach, together with the results in [1], can be used to show an O (log nT )-competitive algorithm for virtual circuit routing with known duration. Algorithm Slow-Fit is essentially identical to the algorithm of Aspnes, Azar, Fiat, Plotkin and Waarts for assigning permanent tasks [1]. <p> Our approach, together with the results in <ref> [1] </ref>, can be used to show an O (log nT )-competitive algorithm for virtual circuit routing with known duration. Algorithm Slow-Fit is essentially identical to the algorithm of Aspnes, Azar, Fiat, Plotkin and Waarts for assigning permanent tasks [1]. Roughly speaking, the idea (which originated in the paper by Shmoys, Wein, and Williamson [12]) is to assign the task to the least capable machine while maintaining that the load does not exceed the currently set goal. However, the analysis in [1] is inapplicable for the case where tasks have <p> Fiat, Plotkin and Waarts for assigning permanent tasks <ref> [1] </ref>. Roughly speaking, the idea (which originated in the paper by Shmoys, Wein, and Williamson [12]) is to assign the task to the least capable machine while maintaining that the load does not exceed the currently set goal. However, the analysis in [1] is inapplicable for the case where tasks have limited duration. Our analysis is thus different and shows that Slow-Fit is 5-competitive if the 2 maximum load is known. 1 Similarly to algorithm Robin-Hood, also algorithm Slow-Fit is deterministic and runs in O (n) time per task assignment. <p> The (3o (1)) lower bound for the related machines case applies even if the optimal maximum load is known in advance. This lower bound stands in contrast to the 2-competitive algorithm in <ref> [1] </ref> for the case where tasks are permanent and the optimal off-line maximal load is known in advance, and the 2-competitive algorithm for the unknown-duration case where the machines are identical [7]. <p> Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively <ref> [7, 10, 5, 6, 1] </ref>. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. <p> The identical speed with assignment restriction case was introduced by Azar, Naor, and Rom [5], who described an O (log n)-competitive algorithm and a matching lower bound. The case of unrestricted load vectors (known also as the unrelated machines case), was considered by Aspnes, Azar, Fiat, Plotkin and Waarts <ref> [1] </ref>, who showed an O (log n)-competitive algorithm. They also showed an 8-competitive algorithm for the related machines case. Their algorithm is 2-competitive in the case that the optimal off-line maximum load is known. <p> Intuitively, in the load balancing context, the notion of 1 It is interesting to note that the natural greedy algorithm, which tries to minimize the maximal load on any machine, is fi (log n)-competitive <ref> [1] </ref>. (Their analysis for permanent tasks applies also for the case where tasks have limited duration .) 3 makespan corresponds to maximum load, and there is a new, orthogonal, notion of time. (See [1] for further discussion of the differences.) 2 Identical Speed with Assignment Restriction In this section we describe <p> natural greedy algorithm, which tries to minimize the maximal load on any machine, is fi (log n)-competitive <ref> [1] </ref>. (Their analysis for permanent tasks applies also for the case where tasks have limited duration .) 3 makespan corresponds to maximum load, and there is a new, orthogonal, notion of time. (See [1] for further discussion of the differences.) 2 Identical Speed with Assignment Restriction In this section we describe a (2 p n + 1)-competitive algorithm for the identical speed with assignment restriction case, where the task duration is unknown upon its arrival. <p> This result is in contrast to the ( p n) lower bound on the competitive ratio for the identical speed with restriction case when the duration of a task is not known upon its arrival [4]. Our algorithm is based on the on-line algorithm of <ref> [1] </ref>, which solves the following "route allocation" problem: We are given a directed graph G = (V; E) with jV j = N . <p> For simplicity we will abbreviate (k) as and fl (k) as fl . The goal of the online algorithm is to produce a set of routes P that minimizes = fl . The online route allocation algorithm of <ref> [1] </ref> is O (log N )-competitive, where N is the number of vertices in the given graph. <p> Roughly speaking, we will reduce our problem of online load balancing of temporary tasks with known duration to several concurrent instances of the online route allocation for permanent routes problem, where N = nT . Then we will apply the algorithm of <ref> [1] </ref> to achieve O (log N ) = O (log nT ) competitive ratio. We assume that the minimum task duration is known in advance and measure time in terms of this minimum duration interval. <p> For each group invoke a separate copy of Assign1 with T 0 = 2T . That is, assign tasks belonging to a certain group independently of the assignments of tasks in other groups. Using the route allocation algorithm of <ref> [1] </ref>, we get that for each group, the ratio between maximal online load to the maximal off-line load is at most O (log nT ). Moreover, at each instance of time active tasks can belong to at most 2 groups. <p> Observe that this does not violate the invariant that at any point in time the active tasks belong to at most two groups. We use the fact that the route allocation algorithm of <ref> [1] </ref> is scalable in the sense that the current assignment of tasks in group m is consistent with the assignment if Assign1 had used the new value of T 0 instead of the old one. Thus the argument of O (log nT )-competitiveness goes through as before. <p> This lower bound stands in contrast to the 2-competitive algorithm in <ref> [1] </ref> for the case where tasks are permanent and the optimal off-line maximal load is known in advance, as well as to the 2-competitive algorithm for the unknown-duration case where the machines are identical [7].
Reference: [2] <author> B. Awerbuch, Y. Azar, and S. Plotkin. </author> <title> Throughput-competitive on-line routing. </title> <booktitle> In Proceedings of 34th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 32-40, </pages> <year> November1993. </year>
Reference-contexts: Recently our approach was employed in the context of throughput-competitive on-line routing as well <ref> [2] </ref>. All the results in this paper, as well as in the papers mentioned above, concentrate on non-preemptive load balancing, i.e., re-assignment of tasks is not allowed. Another, very different model is when re-assignment of existing tasks is allowed.
Reference: [3] <author> B. Awerbuch, Y. Azar, S. Plotkin, and O. Waarts. </author> <title> Competitive routing of virtual circuits with unknown duration. </title> <booktitle> In Proceedings of the 5th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pp. 321-327, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The general case was later considered in <ref> [3] </ref>, who designed an O (log n)-competitive algorithm with respect to load that reroutes each circuit at most O (log n) times.
Reference: [4] <author> Y. Azar, A. Broder, and A. Karlin. </author> <title> On-line load balancing. </title> <booktitle> In Proceedings of 33rd IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-225, </pages> <year> 1992. </year>
Reference-contexts: It is easy to observe that the algorithm due to Graham [7], applied to this kind of load-balancing problem, leads to a (2 1 n )-competitive solution. Azar, Broder, and Karlin <ref> [4] </ref> proposed to study a less restricted case, motivated by the problem of on-line assignment of network nodes to gateways (see also [5]). In this case, a task can represent a request of a network node to be assigned to a gateway; machines represent gateways. <p> For this case, which we will refer to as identical speed with assignment restriction case, <ref> [4] </ref> shows an ( p n) lower bound on the competitive 1 ratio of any load balancing algorithm that deals with the unknown duration case, i.e. the case where the duration of a task becomes known only upon its termination. They also present an O (n 2=3 )-competitive algorithm. <p> They also present an O (n 2=3 )-competitive algorithm. The work in <ref> [4] </ref> opens several new research avenues. The first is the question of whether there exists an O ( p n)-competitive algorithm for the identical speed with assignment restriction case when the duration of a task becomes known only upon its termination. <p> The first is the question of whether there exists an O ( p n)-competitive algorithm for the identical speed with assignment restriction case when the duration of a task becomes known only upon its termination. Secondly, the ( n) lower bound for the competitive ratio in <ref> [4] </ref> suggests considering natural variations of the problem for which this lower bound does not apply. One such fundamental candidate proposed here is the known duration case, where the duration of each task is known upon its arrival. Another important candidate is the related machines case. <p> This work addresses the above three issues. The main results presented in this paper are as follows: * A (2 n + 1)-competitive algorithm, Robin-Hood, for the identical-speed with assignment restriction case studied by <ref> [4] </ref>. Their lower bound implies that this algorithm is optimal to within a p 2 multiplicative factor. * An O (log nT )-competitive algorithm for the known-duration case with unrestricted load vectors, where T is the ratio of the maximum to minimum duration. <p> Task j must be assigned to one of the machines in a set M (j); assigning this task to a machine i raises the load on machine i by w j . This result complements the ( p n) lower bound of <ref> [4] </ref>. The input sequence consists of task arrival and task departure events. Since the state of the system changes only as a result of one of these events, the event numbers can serve as time units, i.e. we can view the time as being discrete. <p> This result is in contrast to the ( p n) lower bound on the competitive ratio for the identical speed with restriction case when the duration of a task is not known upon its arrival <ref> [4] </ref>. Our algorithm is based on the on-line algorithm of [1], which solves the following "route allocation" problem: We are given a directed graph G = (V; E) with jV j = N .
Reference: [5] <author> Y. Azar, J. Naor, and R. </author> <title> Rom. The competitiveness of on-line assignment. </title> <booktitle> In Proceedings of the 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 203-210, </pages> <year> 1992. </year>
Reference-contexts: Azar, Broder, and Karlin [4] proposed to study a less restricted case, motivated by the problem of on-line assignment of network nodes to gateways (see also <ref> [5] </ref>). In this case, a task can represent a request of a network node to be assigned to a gateway; machines represent gateways. <p> Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively <ref> [7, 10, 5, 6, 1] </ref>. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. <p> This solution has been improved in [6] by Bartal, Fiat, Karloff and Vohra to 2 * for a small constant *, and the value of * was further improved in [9]. The identical speed with assignment restriction case was introduced by Azar, Naor, and Rom <ref> [5] </ref>, who described an O (log n)-competitive algorithm and a matching lower bound. The case of unrestricted load vectors (known also as the unrelated machines case), was considered by Aspnes, Azar, Fiat, Plotkin and Waarts [1], who showed an O (log n)-competitive algorithm.
Reference: [6] <author> Y. Bartal, A. Fiat, H. Karloff, and R. Vohra. </author> <title> New algorithms for an ancient scheduling problem. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1992. </year>
Reference-contexts: Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively <ref> [7, 10, 5, 6, 1] </ref>. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. <p> Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively [7, 10, 5, 6, 1]. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. This solution has been improved in <ref> [6] </ref> by Bartal, Fiat, Karloff and Vohra to 2 * for a small constant *, and the value of * was further improved in [9].
Reference: [7] <author> R.L. Graham. </author> <title> Bounds for certain multiprocessing anomalies. </title> <journal> Bell System Technical Journal, </journal> <volume> 45 </volume> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference-contexts: The simplest case however is where the coordinates of each load vector are equal to some value that depends only on the task. It is easy to observe that the algorithm due to Graham <ref> [7] </ref>, applied to this kind of load-balancing problem, leads to a (2 1 n )-competitive solution. Azar, Broder, and Karlin [4] proposed to study a less restricted case, motivated by the problem of on-line assignment of network nodes to gateways (see also [5]). <p> This lower bound stands in contrast to the 2-competitive algorithm in [1] for the case where tasks are permanent and the optimal off-line maximal load is known in advance, and the 2-competitive algorithm for the unknown-duration case where the machines are identical <ref> [7] </ref>. Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively [7, 10, 5, 6, 1]. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. <p> Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively <ref> [7, 10, 5, 6, 1] </ref>. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. <p> 2-competitive algorithm for the unknown-duration case where the machines are identical <ref> [7] </ref>. Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively [7, 10, 5, 6, 1]. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. This solution has been improved in [6] by Bartal, Fiat, Karloff and Vohra to 2 * for a small constant *, and the value of * was further improved in [9]. <p> This lower bound stands in contrast to the 2-competitive algorithm in [1] for the case where tasks are permanent and the optimal off-line maximal load is known in advance, as well as to the 2-competitive algorithm for the unknown-duration case where the machines are identical <ref> [7] </ref>. Theorem 4.3 The competitive factor c of any on-line algorithm for the related machines case satisfies c 3 o (1). Proof: Assume that there exists an on-line algorithm whose competitive ratio is at most c &lt; 3.
Reference: [8] <author> R.L. Graham, E.L. Lawler, J.K Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Optimization and approximation in deterministic sequencing and scheduling: a survey. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: Finally, we note that the load balancing problem is different from the classical scheduling problem of minimizing the makespan of an on-line sequence of tasks with known running times (see <ref> [8, 12] </ref> for survey).
Reference: [9] <author> D. Karger, S. Phillips, and E. Torng. </author> <title> A better algorithm for an ancient scheduling problem. </title> <booktitle> In Proceedings of the 5th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 132-140, </pages> <year> 1994. </year>
Reference-contexts: For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7]. This solution has been improved in [6] by Bartal, Fiat, Karloff and Vohra to 2 * for a small constant *, and the value of * was further improved in <ref> [9] </ref>. The identical speed with assignment restriction case was introduced by Azar, Naor, and Rom [5], who described an O (log n)-competitive algorithm and a matching lower bound.
Reference: [10] <author> R. Karp, U. Vazirani, and V. Vazirani. </author> <title> An optimal algorithm for on-line bipartite matching. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 352-358, </pages> <year> 1990. </year>
Reference-contexts: Other related work On-line load balancing of permanent tasks (i.e., tasks never terminate) was studied extensively <ref> [7, 10, 5, 6, 1] </ref>. For the case where the machines are identical, Graham showed a (2 1 n ) competitive solution [7].
Reference: [11] <author> S. Phillips and J. Westbrook. </author> <title> Online load balancing and network flow. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 402-411, </pages> <year> 1993. </year>
Reference-contexts: Another, very different model is when re-assignment of existing tasks is allowed. After the time of this work, for the case where the coordinates of the load vector are restricted to be 1 or 1, and a task duration is not known upon its arrival, Phillips and Westbrook <ref> [11] </ref> proposed an algorithm that achieves O (log n) competitive ratio with respect to load while making O (1) amortized rassignments per job.
Reference: [12] <author> D. Shmoys, J. Wein, and D.P. Williamson. </author> <title> Scheduling parallel machines on-line. </title> <booktitle> In Proceedings of the 32nd IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 131-140, </pages> <year> 1991. </year>
Reference-contexts: Algorithm Slow-Fit is essentially identical to the algorithm of Aspnes, Azar, Fiat, Plotkin and Waarts for assigning permanent tasks [1]. Roughly speaking, the idea (which originated in the paper by Shmoys, Wein, and Williamson <ref> [12] </ref>) is to assign the task to the least capable machine while maintaining that the load does not exceed the currently set goal. However, the analysis in [1] is inapplicable for the case where tasks have limited duration. <p> Finally, we note that the load balancing problem is different from the classical scheduling problem of minimizing the makespan of an on-line sequence of tasks with known running times (see <ref> [8, 12] </ref> for survey).
Reference: [13] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Comm. ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year> <month> 14 </month>
Reference-contexts: This increase in load occurs for the duration d (j) of the task. Since the arriving tasks have to be assigned without knowledge of the future tasks, it is natural to evaluate the performance in terms of the competitive ratio <ref> [13] </ref>, which in this case is the supremum, over all possible input sequences, of the maximum (over time and over machines) load achieved by the on-line algorithm to the maximum load achieved by the optimal off-line algorithm.
References-found: 13

