URL: http://www.cs.utah.edu/~hans/publications/dac96_complexgate.ps.gz
Refering-URL: http://www.cs.utah.edu/~hans/publications/publications.html
Root-URL: 
Title: Synthesis of Hazard-free Customized CMOS Complex-Gate Networks Under Multiple-Input Changes  
Author: Prabhakar Kudva Ganesh Gopalakrishnan Hans Jacobson Steven M. Nowick 
Affiliation: IBM T.J. Watson Research Center Department of Computer Science Department of Computer Science Yorktown Heights University of Utah Columbia University  
Abstract: This paper addresses the problem of realizing hazard-free single-output Boolean functions through a network of customized complex CMOS gates tailored to a given asynchronouscontroller specification. A customized CMOS gate network can either be a single CMOS gate or a multilevel network of CMOS gates. It is shown that hazard-free requirements for such networks are less restrictive than for simple gate networks. Analysis and efficient synthesis methods to generate such networks under a multiple-input change assumption (MIC) will be presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Custom layout/Virtuoso LAS user's manual, cadence design systems, inc., </institution> <year> 1992. </year>
Reference-contexts: To determine the practical applicability of the SOP/SOP form of complex gates, circuits from the state machine benchmarks [15] were used for a comparison. We applied both the CMOS complex-gate method and the two-level simple-gate methods, and used the Cadence schematic entry system and the LAS <ref> [1] </ref> layout syn-theziser. Results are shown in Table 1 in the form of critical path delays under same input slopes and output load. As expected, we found that the complex gate circuits performed better in some cases and were slower in others.
Reference: [2] <author> BREDESON, J. G. </author> <title> Synthesis of multiple input-change hazard-free combinational switching circuits without feedback. </title> <journal> Int. Journal Electronics 39, </journal> <volume> 6 (1975), </volume> <pages> 615-624. </pages>
Reference-contexts: An example SOP/SOP complex gate implementation is shown in Figure 1. Function F is implemented using p-channel stacks, and Function F is implemented using n-channel stacks. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [2, 7, 5, 4] </ref>. This is a conservative model, which assumes that inputs in an MIC transition can arrive at any time and in any order, and that gates and wires have unknown delay. <p> In <ref> [2] </ref>, a technique was presented to derive single-output multilevel AND-OR gate implementations. The algorithm assumes a fully-specified function and attempts to eliminate hazards even for unspecified transitions, leading to inefficient implementations. Our method takes a similar approach but removes hazards only for a given set of transitions. <p> We will therefore present a new technique which is an extension of work in <ref> [2] </ref>, but which deals with the special hazard requirements of SOP/SOP complex-gates. The procedure is presented in two steps. First, we will give a model for the multilevel complex gates we target.
Reference: [3] <author> DAVIS, A., COATES, B., AND STEVENS, K. </author> <title> The Post Office Experience: Designing a Large Asynchronous Chip. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conferenceon System Sciences, </booktitle> <volume> Volume 1 (Jan. </volume> <year> 1993), </year> <editor> T. Mudge, V. Milutinovic, and L. Hunter, </editor> <booktitle> Eds., </booktitle> <pages> pp. 409-418. </pages>
Reference-contexts: Techniques will be presented to synthesize such networks without hazards, under multiple-input change (MIC) transitions. Customized CMOS gate implementations have been successfully used to design a large number of burst-mode asynchronous controllers <ref> [3, 13] </ref>. However, previous methods do not present systematic models and synthesis algorithms to take advantage of the particular hazard properties of these circuits. There are several reasons for considering customized CMOS complex-gate based circuits. <p> Technology-mapping techniques to perform hazard-nonincreasing mapping of two level AND-OR networks into complex gate networks from a standard cell library have been given in [12]. Other technology mapping techniques have implemented Boolean functions as single gate hazard-free CMOS complex gate circuits <ref> [13, 3] </ref>. However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. For the class of methods that use the excitation regions, single CMOS complex-gate circuits, called Generalized C elements [6], have been used as target implementations.
Reference: [4] <author> KUNG, D. </author> <title> Hazard-non-increasinggate level optimization algorithms. </title> <booktitle> In International Conference on Computer Aided Design (ICCAD), </booktitle> <address> Santa Clara (Nov. </address> <year> 1992). </year>
Reference-contexts: Various techniques for hazard-free logic minimization have been proposed for the function region approach. An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in [7]. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in <ref> [4, 14] </ref>. A BDD-based method [5] which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-nonincreasing mapping of two level AND-OR networks into complex gate networks from a standard cell library have been given in [12]. <p> An example SOP/SOP complex gate implementation is shown in Figure 1. Function F is implemented using p-channel stacks, and Function F is implemented using n-channel stacks. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [2, 7, 5, 4] </ref>. This is a conservative model, which assumes that inputs in an MIC transition can arrive at any time and in any order, and that gates and wires have unknown delay.
Reference: [5] <author> LIN, B., AND DEVADAS, S. </author> <title> Synthesis of hazard-free multi-level implementations under multiple-input changes from binary decision diagrams. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (IC-CAD) (Nov. </booktitle> <year> 1994). </year>
Reference-contexts: This differs from the approach where one chooses standard gates from a library (such as AND-OR, MUX, AOI, etc.) to implement the required Boolean function in a hazard-free manner <ref> [7, 12, 5] </ref>. Techniques will be presented to synthesize such networks without hazards, under multiple-input change (MIC) transitions. Customized CMOS gate implementations have been successfully used to design a large number of burst-mode asynchronous controllers [3, 13]. <p> An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in [7]. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in [4, 14]. A BDD-based method <ref> [5] </ref> which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-nonincreasing mapping of two level AND-OR networks into complex gate networks from a standard cell library have been given in [12]. <p> An example SOP/SOP complex gate implementation is shown in Figure 1. Function F is implemented using p-channel stacks, and Function F is implemented using n-channel stacks. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [2, 7, 5, 4] </ref>. This is a conservative model, which assumes that inputs in an MIC transition can arrive at any time and in any order, and that gates and wires have unknown delay. <p> The algorithm assumes a fully-specified function and attempts to eliminate hazards even for unspecified transitions, leading to inefficient implementations. Our method takes a similar approach but removes hazards only for a given set of transitions. A method using BDDs that target multilevel multiplexer based circuits is presented in <ref> [5] </ref>. The multiplexers in this method are assumed to be hazard-free. Work in [12] targets multilevel hazard-free circuits, starting from a hazard-free two-level circuit.
Reference: [6] <author> MARTIN, A. J. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <booktitle> In UT Year of Programming Institute on Concurrent Programming (1989), </booktitle> <editor> e. C.A.R. Hoare, Ed., </editor> <publisher> Addison-Wesley. </publisher>
Reference-contexts: However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. For the class of methods that use the excitation regions, single CMOS complex-gate circuits, called Generalized C elements <ref> [6] </ref>, have been used as target implementations. These techniques usually rely on the use of state holding elements on the output of the gate.
Reference: [7] <author> NOWICK, S., AND DILL, D. L. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <journal> IEEE Transactions on Computer-Aided Design 14, </journal> <month> 8 (Aug. </month> <year> 1995), </year> <pages> 986-997. </pages>
Reference-contexts: This differs from the approach where one chooses standard gates from a library (such as AND-OR, MUX, AOI, etc.) to implement the required Boolean function in a hazard-free manner <ref> [7, 12, 5] </ref>. Techniques will be presented to synthesize such networks without hazards, under multiple-input change (MIC) transitions. Customized CMOS gate implementations have been successfully used to design a large number of burst-mode asynchronous controllers [3, 13]. <p> Various techniques for hazard-free logic minimization have been proposed for the function region approach. An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in <ref> [7] </ref>. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in [4, 14]. A BDD-based method [5] which targets multilevel multiplexor-based networks has been developed. <p> An example SOP/SOP complex gate implementation is shown in Figure 1. Function F is implemented using p-channel stacks, and Function F is implemented using n-channel stacks. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [2, 7, 5, 4] </ref>. This is a conservative model, which assumes that inputs in an MIC transition can arrive at any time and in any order, and that gates and wires have unknown delay. <p> even in the SOP/SOP form, both the p network and the n network may have dynamic hazards, creating a hazard at the output of the complex gate. 3.2 Algorithm For SOP/SOP Realizations Our hazard-free algorithm for SOP/SOP complex-gate realizations is similar to an existing algorithm for hazard-free two-level simple-gate networks <ref> [7] </ref>. The key difference is that our new algorithm uses fewer constraints: we can ignore hazards due to static transitions in the SOP/SOP realization. We first summarize the Make-sets algorithm given in [7], which is the first step in the hazard-free two-level minimization of AND-OR simple-gate implementations. <p> Our hazard-free algorithm for SOP/SOP complex-gate realizations is similar to an existing algorithm for hazard-free two-level simple-gate networks <ref> [7] </ref>. The key difference is that our new algorithm uses fewer constraints: we can ignore hazards due to static transitions in the SOP/SOP realization. We first summarize the Make-sets algorithm given in [7], which is the first step in the hazard-free two-level minimization of AND-OR simple-gate implementations. We then present a modified version, Complex-Make-sets, to handle complex-gate circuits. Finally, we describe the remaining steps which are common to both the two-level algorithm and the complex-gate algorithm. <p> These constraints insure that the output will not glitch during a given static transition. (Further details are provided in <ref> [7] </ref>.) The priv-set is the set of privileged cubes, corresponding to the 1 ! 0 and 0 ! 1 transition cubes. Each dynamic transition is regarded as a privileged cube, with a specified start point. These cubes are used to prevent dynamic hazards. <p> Intuitively, such an implicant may turn on, then off, during a dynamic transition, resulting in an output glitch. These conditions are justified in detail in <ref> [7] </ref>. Implicants which have no illegal intersections are called dynamic hazard-free implicants (DHF-implicants). Only DHF-implicants may be included in a hazard-free cover. Maximal DHF-implicants, which cannot be expanded further, are called dynamic hazard-free prime implicants (DHFPI). <p> Note that the unate covering problem in our complex-gate algorithm is less restrictive: required cubes for static 1 ! 1 transitions need not be covered. In fact, there are problems which have no 2-level hazard-free solution, but where a complex-gate solution exists. For instance, the example used in <ref> [7] </ref> to demonstrate the absence of a solution for hazard-free AND-OR implementation, has a solution in the SOP/SOP form of complex-gate implementation. To determine the practical applicability of the SOP/SOP form of complex gates, circuits from the state machine benchmarks [15] were used for a comparison. <p> We have synthesized many examples using this technique. Layouts have been obtained using the Cadence synthesis tools. For these examples, our method obtained a hazard-free combinational logic solution whereas the 3D tool [15] (using hfmin <ref> [7] </ref>) often had to add several state variables just in order to prevent logic hazards. Results for cases where occuring hazards require a multilevel solution for the SOP/SOP complex gate form are given in Table 2.
Reference: [8] <author> NOWICK, S. M., AND DILL, D. L. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 318-321. </pages>
Reference-contexts: The contribution of this paper is to address the problem of deriving hazard-free customized CMOS realizations for asynchronous controllers under multiple-input changes, using the function region approach. This problem is encountered during the synthesis of burst-mode circuits <ref> [8, 15] </ref> and is a general problem in asynchronous synthesis. In particular, we present a style of CMOS gate design, called SOP/SOP form, that reduces the constraints in hazard-free synthesis of single CMOS complex gates. Second, we present a generalization of this technique to multilevel networks. <p> Required cube A is covered only by itself (bc 0 ), which illegally intersects dynamic transition t2. Similarly, required cube B is covered only by itself (a 0 c), which illegally intersects dynamic transition t1. Therefore, no dhf-prime exists to cover A and B. Burst-mode sequential synthesis tools <ref> [8, 15] </ref> avoids this prob lem at an earlier point in synthesis: during state minimization. By using careful constraints on state merger, these methods produce Boolean functions for which a hazard-free solution exists. That is, a feedback variable would be added, making the circuit sequential rather than combinational.
Reference: [9] <author> PEDRON, C., AND STAUFFER, A. </author> <title> Analysis and synthesis of combinational pass transistor circuits. </title> <journal> IEEE Transactions on CAD/CAS 6, </journal> <volume> 5 (1988), </volume> <pages> 727-750. </pages>
Reference-contexts: Section 5 will provide conclusions and the open problems. 2 Terminology In this section, we first present definitions relating to pass transistor and CMOS logic gates. We will then briefly describe some terminology on hazards. 2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [9, 10, 11, 12] </ref>. We describe and extend the model presented in these works for single CMOS gates.
Reference: [10] <author> RADHAKRISHNAN, D., WHITAKER, S., AND MAKI, G. </author> <title> Formal design procedures for pass transistor switching circuits. </title> <journal> IEEE Journal of Solid State Circuits 20, </journal> <volume> 2 (1985), </volume> <pages> 531-536. </pages>
Reference-contexts: Section 5 will provide conclusions and the open problems. 2 Terminology In this section, we first present definitions relating to pass transistor and CMOS logic gates. We will then briefly describe some terminology on hazards. 2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [9, 10, 11, 12] </ref>. We describe and extend the model presented in these works for single CMOS gates.
Reference: [11] <author> SASI, S., AND RADHAKRISHNAN, D. </author> <title> Hazards in cmos circuits. </title> <journal> Int. Journal Electronics 68, </journal> <volume> 6 (1990), </volume> <pages> 967-990. </pages>
Reference-contexts: Section 5 will provide conclusions and the open problems. 2 Terminology In this section, we first present definitions relating to pass transistor and CMOS logic gates. We will then briefly describe some terminology on hazards. 2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [9, 10, 11, 12] </ref>. We describe and extend the model presented in these works for single CMOS gates.
Reference: [12] <author> SIEGEL, P. </author> <title> Automatic technologymapping for asynchronousdesigns. </title> <type> Tech. rep., Ph.D Thesis, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: This differs from the approach where one chooses standard gates from a library (such as AND-OR, MUX, AOI, etc.) to implement the required Boolean function in a hazard-free manner <ref> [7, 12, 5] </ref>. Techniques will be presented to synthesize such networks without hazards, under multiple-input change (MIC) transitions. Customized CMOS gate implementations have been successfully used to design a large number of burst-mode asynchronous controllers [3, 13]. <p> A BDD-based method [5] which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-nonincreasing mapping of two level AND-OR networks into complex gate networks from a standard cell library have been given in <ref> [12] </ref>. Other technology mapping techniques have implemented Boolean functions as single gate hazard-free CMOS complex gate circuits [13, 3]. However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. <p> Section 5 will provide conclusions and the open problems. 2 Terminology In this section, we first present definitions relating to pass transistor and CMOS logic gates. We will then briefly describe some terminology on hazards. 2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [9, 10, 11, 12] </ref>. We describe and extend the model presented in these works for single CMOS gates. <p> Our method takes a similar approach but removes hazards only for a given set of transitions. A method using BDDs that target multilevel multiplexer based circuits is presented in [5]. The multiplexers in this method are assumed to be hazard-free. Work in <ref> [12] </ref> targets multilevel hazard-free circuits, starting from a hazard-free two-level circuit. In this method a hazard-free two-level function is decomposed into base functions using De Morgan's theorem and associative laws and then partitioned into cones which are mapped to library elements based on associated hazards.
Reference: [13] <author> STEVENS, K. </author> <type> Ph.d thesis. Tech. rep., </type> <institution> Computer Systems Dept, University of Calgary, </institution> <year> 1994. </year>
Reference-contexts: Techniques will be presented to synthesize such networks without hazards, under multiple-input change (MIC) transitions. Customized CMOS gate implementations have been successfully used to design a large number of burst-mode asynchronous controllers <ref> [3, 13] </ref>. However, previous methods do not present systematic models and synthesis algorithms to take advantage of the particular hazard properties of these circuits. There are several reasons for considering customized CMOS complex-gate based circuits. <p> Technology-mapping techniques to perform hazard-nonincreasing mapping of two level AND-OR networks into complex gate networks from a standard cell library have been given in [12]. Other technology mapping techniques have implemented Boolean functions as single gate hazard-free CMOS complex gate circuits <ref> [13, 3] </ref>. However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. For the class of methods that use the excitation regions, single CMOS complex-gate circuits, called Generalized C elements [6], have been used as target implementations.
Reference: [14] <author> UNGER, S. H. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, </publisher> <year> 1969. </year>
Reference-contexts: Various techniques for hazard-free logic minimization have been proposed for the function region approach. An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in [7]. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in <ref> [4, 14] </ref>. A BDD-based method [5] which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-nonincreasing mapping of two level AND-OR networks into complex gate networks from a standard cell library have been given in [12]. <p> Within the class of logic hazards, there are single-input change (SIC) hazards and multiple-input-change (MIC) hazards. Additionally, each class of hazards (function and logic) includes both static and dynamic hazards. Further definitions and details regarding hazard modeling can be found in <ref> [14] </ref>. In this paper we will consider MIC logic hazards, i.e., we will assume that the given Boolean function free of function hazards for each specified input change. 3 Hazard-free Single CMOS gates CMOS complex gate networks can be implemented in many different ways. <p> Consider F and F to be on-set and off-set covers respectively implemented as p and n transistor networks in a complex gate. It has been shown in <ref> [14] </ref> that a sum-of-products implementation of the on-set F does not have any 0 ! 0 hazards. 1 Similarly, F does not have any 1 ! 1 hazards. <p> of complex gates, even if the transistor network of F has a static hazard (that is, a brief moment when no p stack is conducting), the transistor 1 Note that, throughout this paper, we assume that no product contains both a variable and its complement, otherwise additional hazards are possible <ref> [14] </ref>. network of F remains off (that is, no n stack will conduct during the transition). <p> As a result, the output will hold its current charge. Therefore, there is no need to avoid static hazards during synthesis of F and F . Case 2: Dynamic Transitions. For the case of SIC transitions, it has been shown in <ref> [14] </ref> that a dynamic SIC hazard cannot occur (assuming no product contains both a variable and its com plement). Since F and F are in two-level AND-OR form, no hazards will occur in the complex-gate output in this case. <p> an algorithm targeted to find the minimal sum of products implementation, we also convert the problem of finding the product of sums for a function F to the problem of finding the sum of products for F and then using De Morgan's law (which has been shown to be hazard-preserving) <ref> [14] </ref> to obtain F .
Reference: [15] <author> YUN, K. Y. </author> <title> Synthesis of asynchronous controllers for heterogeneous systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The contribution of this paper is to address the problem of deriving hazard-free customized CMOS realizations for asynchronous controllers under multiple-input changes, using the function region approach. This problem is encountered during the synthesis of burst-mode circuits <ref> [8, 15] </ref> and is a general problem in asynchronous synthesis. In particular, we present a style of CMOS gate design, called SOP/SOP form, that reduces the constraints in hazard-free synthesis of single CMOS complex gates. Second, we present a generalization of this technique to multilevel networks. <p> For instance, the example used in [7] to demonstrate the absence of a solution for hazard-free AND-OR implementation, has a solution in the SOP/SOP form of complex-gate implementation. To determine the practical applicability of the SOP/SOP form of complex gates, circuits from the state machine benchmarks <ref> [15] </ref> were used for a comparison. We applied both the CMOS complex-gate method and the two-level simple-gate methods, and used the Cadence schematic entry system and the LAS [1] layout syn-theziser. <p> Required cube A is covered only by itself (bc 0 ), which illegally intersects dynamic transition t2. Similarly, required cube B is covered only by itself (a 0 c), which illegally intersects dynamic transition t1. Therefore, no dhf-prime exists to cover A and B. Burst-mode sequential synthesis tools <ref> [8, 15] </ref> avoids this prob lem at an earlier point in synthesis: during state minimization. By using careful constraints on state merger, these methods produce Boolean functions for which a hazard-free solution exists. That is, a feedback variable would be added, making the circuit sequential rather than combinational. <p> We have synthesized many examples using this technique. Layouts have been obtained using the Cadence synthesis tools. For these examples, our method obtained a hazard-free combinational logic solution whereas the 3D tool <ref> [15] </ref> (using hfmin [7]) often had to add several state variables just in order to prevent logic hazards. Results for cases where occuring hazards require a multilevel solution for the SOP/SOP complex gate form are given in Table 2.
References-found: 15

