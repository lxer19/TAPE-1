URL: http://www.eecs.umich.edu/HPS/pub/hybrid_micro28.ps
Refering-URL: http://www.eecs.umich.edu/HPS/hps_branchpred.html
Root-URL: http://www.eecs.umich.edu
Title: Alternative Implementations of Hybrid Branch Predictors  
Author: Po-Yung Chang Eric Hao Yale N. Patt 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Very accurate branch prediction is an important requirement for achieving high performance on deeply pipelined, superscalar processors. To improve on the prediction accuracy of current single-scheme branch predictors, hybrid (multiple-scheme) branch predictors have been proposed [6, 7]. These predictors combine multiple single-scheme predictors into a single predictor. They use a selection mechanism to decide for each branch, which single-scheme predictor to use. The performance of a hybrid predictor depends on its single-scheme predictor components and its selection mechanism. Using known single-scheme predictors and selection mechanisms, this paper identifies the most effective hybrid predictor implementation. In addition, it introduces a new selection mechanism, the 2-level selector, which further improves the performance of the hybrid branch predictor. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. McFarling and J.L. Hennessey, </author> <title> "Reducing the cost of branches," </title> <booktitle> 13th International Symposium on Computer Architecture, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: As the number of transistors on a chip continues to increase (today, more than 9.3 million transistors on a single chip), more and more transistors can be allocated justifiably to satisfy this requirement. Many dynamic prediction schemes have been studied <ref> [1, 2, 3, 4] </ref>. Simple history bit and counter-based prediction schemes [2] achieve prediction accuracies of 85%-90%. However, for today's wide-issue, deeply pipelined processors, a misprediction rate of 10% incurs a severe performance cost.
Reference: [2] <author> J.E. Smith, </author> <title> "A Study of Branch Prediction Strategies," </title> <booktitle> 8th International Symposium on Computer Architecture, </booktitle> <month> June </month> <year> 1981. </year>
Reference-contexts: As the number of transistors on a chip continues to increase (today, more than 9.3 million transistors on a single chip), more and more transistors can be allocated justifiably to satisfy this requirement. Many dynamic prediction schemes have been studied <ref> [1, 2, 3, 4] </ref>. Simple history bit and counter-based prediction schemes [2] achieve prediction accuracies of 85%-90%. However, for today's wide-issue, deeply pipelined processors, a misprediction rate of 10% incurs a severe performance cost. <p> Many dynamic prediction schemes have been studied [1, 2, 3, 4]. Simple history bit and counter-based prediction schemes <ref> [2] </ref> achieve prediction accuracies of 85%-90%. However, for today's wide-issue, deeply pipelined processors, a misprediction rate of 10% incurs a severe performance cost. <p> The single-scheme predictors examined were divided into four classes: 1. static the static branch predictor which bases its prediction on the direction the branch most frequently takes [8]. This is determined by profiling the program on a training input set. 2. 2bC (n) the two bit counter predictor <ref> [2] </ref>. It consists of an array of n two bit counters. Each branch is mapped via its address to a counter which provides its prediction. 3.
Reference: [3] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> "Two-level Adaptive Branch Prediction," </title> <booktitle> 24th ACM/IEEE International Symposium on Microarchitecture, </booktitle> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: As the number of transistors on a chip continues to increase (today, more than 9.3 million transistors on a single chip), more and more transistors can be allocated justifiably to satisfy this requirement. Many dynamic prediction schemes have been studied <ref> [1, 2, 3, 4] </ref>. Simple history bit and counter-based prediction schemes [2] achieve prediction accuracies of 85%-90%. However, for today's wide-issue, deeply pipelined processors, a misprediction rate of 10% incurs a severe performance cost. <p> For a four wide processor with twelve stage pipelines, a 10% mispredic-tion rate reduces performance by 55%, from a peak 4 instructions per cycle (IPC) to 1.8 (assuming one branch every four instructions). By keeping more history information, the misprediction rate can be halved to 5% <ref> [3, 4, 5, 6] </ref>, improving performance to 2.5 IPC. However, the 5% misprediction rate still incurs a substantial performance penalty of 38%, wasting over one third of the processor's potential performance. Furthermore, as processors become wider and more deeply pipelined, this performance penalty will worsen. <p> The 2bC predictor was considered because it is used by many of the current generation of commercial microprocessors. The PAs and gshare predictors were considered because they are variations of the highest performing single-scheme predictor, the Two-Level Adaptive Branch Predictor <ref> [3, 11, 4, 5, 6] </ref>. For each predictor type, a range of predictor sizes were considered allowing us to vary the amount of hardware devoted to each scheme. The 2bC array size was varied from 2 10 to 2 20 entries. <p> We propose a new technique, the 2-level branch predictor selection mechanism, which uses more run-time information to improve the performance of the predictor selection mechanism. 4.1 2-level Branch Predictor Selection Al gorithm It is now well-known that the Two-Level Branch Predictor improves prediction accuracy over previously known single-level branch predictors <ref> [3] </ref>. The concepts embodied in the Two-Level Predictor can also be applied to the hybrid branch predictor selection mechanism. Figure 2 shows the structure of the 2-level predictor selection mechanism.
Reference: [4] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> "Alternative Implementations of Two-level Adaptive Branch Prediction," </title> <booktitle> 19th Annual International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: As the number of transistors on a chip continues to increase (today, more than 9.3 million transistors on a single chip), more and more transistors can be allocated justifiably to satisfy this requirement. Many dynamic prediction schemes have been studied <ref> [1, 2, 3, 4] </ref>. Simple history bit and counter-based prediction schemes [2] achieve prediction accuracies of 85%-90%. However, for today's wide-issue, deeply pipelined processors, a misprediction rate of 10% incurs a severe performance cost. <p> For a four wide processor with twelve stage pipelines, a 10% mispredic-tion rate reduces performance by 55%, from a peak 4 instructions per cycle (IPC) to 1.8 (assuming one branch every four instructions). By keeping more history information, the misprediction rate can be halved to 5% <ref> [3, 4, 5, 6] </ref>, improving performance to 2.5 IPC. However, the 5% misprediction rate still incurs a substantial performance penalty of 38%, wasting over one third of the processor's potential performance. Furthermore, as processors become wider and more deeply pipelined, this performance penalty will worsen. <p> It consists of an array of n two bit counters. Each branch is mapped via its address to a counter which provides its prediction. 3. PAs (m,n) the per-address variation of the Two-Level Adaptive Branch Predictor <ref> [4] </ref> consisting of 1K m-bit branch history registers and n pattern history tables. 4. gshare (m) a modified version of the global variation of the Two-Level Adaptive Branch Predictor [4, 6] consisting of a single m-bit global branch history and a single pattern history table. <p> PAs (m,n) the per-address variation of the Two-Level Adaptive Branch Predictor [4] consisting of 1K m-bit branch history registers and n pattern history tables. 4. gshare (m) a modified version of the global variation of the Two-Level Adaptive Branch Predictor <ref> [4, 6] </ref> consisting of a single m-bit global branch history and a single pattern history table. The branch history and the branch address are XORed together to form the index into the pattern history table. <p> The 2bC predictor was considered because it is used by many of the current generation of commercial microprocessors. The PAs and gshare predictors were considered because they are variations of the highest performing single-scheme predictor, the Two-Level Adaptive Branch Predictor <ref> [3, 11, 4, 5, 6] </ref>. For each predictor type, a range of predictor sizes were considered allowing us to vary the amount of hardware devoted to each scheme. The 2bC array size was varied from 2 10 to 2 20 entries.
Reference: [5] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> "A Comparison of Dynamic Branch Predictors that Use Two Levels of Branch History", </title> <booktitle> 20th Annual International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: For a four wide processor with twelve stage pipelines, a 10% mispredic-tion rate reduces performance by 55%, from a peak 4 instructions per cycle (IPC) to 1.8 (assuming one branch every four instructions). By keeping more history information, the misprediction rate can be halved to 5% <ref> [3, 4, 5, 6] </ref>, improving performance to 2.5 IPC. However, the 5% misprediction rate still incurs a substantial performance penalty of 38%, wasting over one third of the processor's potential performance. Furthermore, as processors become wider and more deeply pipelined, this performance penalty will worsen. <p> The 2bC predictor was considered because it is used by many of the current generation of commercial microprocessors. The PAs and gshare predictors were considered because they are variations of the highest performing single-scheme predictor, the Two-Level Adaptive Branch Predictor <ref> [3, 11, 4, 5, 6] </ref>. For each predictor type, a range of predictor sizes were considered allowing us to vary the amount of hardware devoted to each scheme. The 2bC array size was varied from 2 10 to 2 20 entries.
Reference: [6] <author> S. McFarling, </author> <title> "Combining Branch Predictors", </title> <note> WRL Technical Note TN-36, </note> <institution> Digital Equipment Corporation, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: For a four wide processor with twelve stage pipelines, a 10% mispredic-tion rate reduces performance by 55%, from a peak 4 instructions per cycle (IPC) to 1.8 (assuming one branch every four instructions). By keeping more history information, the misprediction rate can be halved to 5% <ref> [3, 4, 5, 6] </ref>, improving performance to 2.5 IPC. However, the 5% misprediction rate still incurs a substantial performance penalty of 38%, wasting over one third of the processor's potential performance. Furthermore, as processors become wider and more deeply pipelined, this performance penalty will worsen. <p> Furthermore, as processors become wider and more deeply pipelined, this performance penalty will worsen. To reduce this performance penalty, branch prediction accuracy must be further improved. Recently, hybrid branch predictors have been proposed as a way to achieve higher prediction accuracies <ref> [6, 7] </ref>. They combine multiple prediction schemes into a single predictor. A selection mechanism is used to decide for each branch, which single-scheme predictor to use. <p> Section 3 compares the performance of various implementations. Section 4 introduces a new selection mechanism and compares its performance to that of previously proposed selection mechanisms. Section 5 provides some concluding remarks. 2 Hybrid Branch Predictors Hybrid branch predictors were first proposed by McFarling <ref> [6] </ref>. They consist of a set of single-scheme predictors and a prediction selection mechanism. For each branch, each of the single-scheme predictors makes a prediction. The selection mechanism then chooses one of the predictions to be the hybrid predictor's prediction. <p> PAs (m,n) the per-address variation of the Two-Level Adaptive Branch Predictor [4] consisting of 1K m-bit branch history registers and n pattern history tables. 4. gshare (m) a modified version of the global variation of the Two-Level Adaptive Branch Predictor <ref> [4, 6] </ref> consisting of a single m-bit global branch history and a single pattern history table. The branch history and the branch address are XORed together to form the index into the pattern history table. <p> The 2bC predictor was considered because it is used by many of the current generation of commercial microprocessors. The PAs and gshare predictors were considered because they are variations of the highest performing single-scheme predictor, the Two-Level Adaptive Branch Predictor <ref> [3, 11, 4, 5, 6] </ref>. For each predictor type, a range of predictor sizes were considered allowing us to vary the amount of hardware devoted to each scheme. The 2bC array size was varied from 2 10 to 2 20 entries.
Reference: [7] <author> P.-Y. Chang, E. Hao, T.-Y. Yeh, and Y.N. Patt, </author> <title> "Branch Classification: a New Mechanism for Improving Branch Predictor Performance", </title> <booktitle> 27th ACM/IEEE International Symposium on Microar-chitecture, </booktitle> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Furthermore, as processors become wider and more deeply pipelined, this performance penalty will worsen. To reduce this performance penalty, branch prediction accuracy must be further improved. Recently, hybrid branch predictors have been proposed as a way to achieve higher prediction accuracies <ref> [6, 7] </ref>. They combine multiple prediction schemes into a single predictor. A selection mechanism is used to decide for each branch, which single-scheme predictor to use. <p> We will refer to this array as the branch predictor selection table (BPST). Upon confirmation of a branch prediction, the counter would be incremented or decremented depending on which single-scheme predictor was correct. If both were correct (or incorrect), the counter state would be left unchanged. Chang et al. <ref> [7] </ref> studied how hybrid predictors achieved their improved prediction accuracies. They showed that the optimal branch prediction scheme for each branch can be different because different branches have different dynamic behaviors.
Reference: [8] <author> J. A. Fisher and S. M. Freudenberger, </author> <title> "Predicting Conditional Branch Directions from Previous Runs of a Program", </title> <booktitle> 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <year> 1992. </year>
Reference-contexts: The single-scheme predictors examined were divided into four classes: 1. static the static branch predictor which bases its prediction on the direction the branch most frequently takes <ref> [8] </ref>. This is determined by profiling the program on a training input set. 2. 2bC (n) the two bit counter predictor [2]. It consists of an array of n two bit counters. Each branch is mapped via its address to a counter which provides its prediction. 3.
Reference: [9] <author> C. Young, N. Gloy, and M. D. Smith, </author> <title> "A Comparative Analysis of Schemes for Correlated Branch Prediction", </title> <booktitle> 22th Annual International Symposium on Computer Architecture, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Gcc's results differed from the other benchmarks because it contains a large number of static branches in its working set. This large set can cause interference in the pattern history tables of the gshare and PAs predictors, reducing their ability to make accurate predictions <ref> [9, 10] </ref>. In addition, the large number of branches can incur a significant training cost. Both the gshare and PAs predictors must train themselves on the first few instances of the branch before they can begin to accurately predict it. <p> The BPST is a 1K-entry table of two bit counters. The mispredic-tion rate in the graph indicates the rate at which the chosen predictor makes incorrect prediction. With the exception of gcc, all four hashing schemes have similar performance. Young et al. <ref> [9] </ref> and Talcott et al. [10] have shown how branch prediction table interference can affect the performance of branch prediction schemes. Similarly, interference in the BPS table can affect the performance of the branch predictor selection mechanism. One advantage of using the branch history is that it reduces BPST interference.
Reference: [10] <author> A. R. Talcott, M. Nemirovsky, and R. C. Wood, </author> <title> "The Influence of Branch Prediction Table Interference on Branch Prediction Scheme Performance", </title> <booktitle> International Conference on Parallel Architectures and Compilation Techniques, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Gcc's results differed from the other benchmarks because it contains a large number of static branches in its working set. This large set can cause interference in the pattern history tables of the gshare and PAs predictors, reducing their ability to make accurate predictions <ref> [9, 10] </ref>. In addition, the large number of branches can incur a significant training cost. Both the gshare and PAs predictors must train themselves on the first few instances of the branch before they can begin to accurately predict it. <p> The BPST is a 1K-entry table of two bit counters. The mispredic-tion rate in the graph indicates the rate at which the chosen predictor makes incorrect prediction. With the exception of gcc, all four hashing schemes have similar performance. Young et al. [9] and Talcott et al. <ref> [10] </ref> have shown how branch prediction table interference can affect the performance of branch prediction schemes. Similarly, interference in the BPS table can affect the performance of the branch predictor selection mechanism. One advantage of using the branch history is that it reduces BPST interference.
Reference: [11] <author> S.-T. Pan, K. So, and J. T. Rahmeh, </author> <title> "Improving the Accuracy of Dynamic Branch Prediction Using Branch Correlation", </title> <booktitle> 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The 2bC predictor was considered because it is used by many of the current generation of commercial microprocessors. The PAs and gshare predictors were considered because they are variations of the highest performing single-scheme predictor, the Two-Level Adaptive Branch Predictor <ref> [3, 11, 4, 5, 6] </ref>. For each predictor type, a range of predictor sizes were considered allowing us to vary the amount of hardware devoted to each scheme. The 2bC array size was varied from 2 10 to 2 20 entries.
References-found: 11

