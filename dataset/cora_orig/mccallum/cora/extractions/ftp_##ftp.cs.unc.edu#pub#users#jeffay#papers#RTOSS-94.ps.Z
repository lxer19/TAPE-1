URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTOSS-94.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/multimedia.html
Root-URL: http://www.cs.unc.edu
Title: On Latency Management in TimeShared Operating Systems Multimedia applications that process streams of live and
Author: Kevin Jeffay 
Keyword: models.  
Address: Chapel Hill, NC 27599-3175  
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  
Note: In: Proc. 11 th IEEE Workshop on Real-Time Operating Systems and Software, May 1994, Seattle, WA, to pp. 86-90.  1 Introduction  Supported in part by grants from the IBM Corporation, the Intel Corporation, and the National Science Foundation (numbers CCR-9110938 and ICI-9015443).  
Abstract: jeffay@cs.unc.edu Abstract: The design of general purpose operating systems impose constraints on the way one can structure real-time applications. This paper addresses the problem of minimizing the end-to-end latency of applications that are structured as a set of cooperating (real-time) tasks. When applications are structured as a set of cooperating tasks the time required for data to progress from an input task to an output task is a function of the number of the tasks that handle the data and the deadlines of individual tasks. We present an integrated inter-process communication and scheduling scheme that can be used to minimize the end-to-end latency of multi-threaded applications. Our approach is to provide the scheduler with information on the inter-process communication interconnections between tasks and to use this information to guarantee an end-to-latency to applications that is simply a function of the timing properties of the application and not its task structure. This scheme has been implemented within the YARTOS kernel and is In this note, we describe a problem that arose during the implementation of an experimental desktop video-conferencing system [4, 5]. Abstractly, the problem is that of minimizing end-to-end latency in real-time applications that consist of a set of cooperating tasks or threads. Here latency is defined as the difference between the times at which input data is first made available to an application thread and the time at which an application thread performs an output operation based on the input data. The thesis of this work is that by providing the kernel with information on the task structure of real-time applications, one can both dramatically reduce the worst case end-to-end application latency and employ relatively simple scheduling algorithms to provide real-time response to individual tasks. The following section motivates the end-to-end latency problem using an idealized version of our video-conferencing system as an example. Section 3 outlines a real-time message passing service that we constructed within the YARTOS (Yet Another Real-Time Operating System) kernel [7]. We show how this service reduces worst case end-to-end latency and how it can be efficiently implemented. The YARTOS message passing service is currently being ported to the Real-Time Mach kernel [11] and will form the basis for a comparative study of the real-time performance of the YARTOS and RT-Mach thread 2 . The End-to-End Latency Problem Real-time computations require bounded response times. In general, by employing results from the real-time scheduling literature (e.g., [10]), for relatively simple presently being ported to the Real-Time Mach kernel.
Abstract-found: 1
Intro-found: 0
References-found: 0

