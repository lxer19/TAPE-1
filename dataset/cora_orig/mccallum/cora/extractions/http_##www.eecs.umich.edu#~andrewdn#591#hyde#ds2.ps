URL: http://www.eecs.umich.edu/~andrewdn/591/hyde/ds2.ps
Refering-URL: http://www.eecs.umich.edu/~andrewdn/591/hyde/
Root-URL: http://www.cs.umich.edu
Email: fbradc,tpkelly,andrewdn,lukaszg@eecs.umich.edu  
Phone: $Id: ds2.tex,v 1.9 1997/12/16 09:54:18  
Title: Re-Usable Communications Software for Distributed Interactive Applications  
Author: B. Clement T. Kelly A. Nierman L. Opyrchal 
Web: http://www-personal.engin.umich.edu/~tpkelly/ds2/  
Note: This document is available in HTML on the World Wide Web at  
Date: December 16, 1997  
Address: Ann Arbor, MI 48109 USA  
Affiliation: Artificial Intelligence Lab University of Michigan  tpkelly Exp  
Abstract: We describe an approach to communications infrastructures for net-worked applications which emphasizes layered, structured, and re-usable software. Our method is appropriate for applications in which human users and/or software agents at different hosts make frequent changes to replicated shared state variables, e.g., multi-player video games, shared whiteboard systems, and chat programs. Many published discussions of networked games claim that a tight coupling between application-level semantics and network communications software is necessary for good performance. We briefly review a very simple system called "Dr. T" which presents a very clean and simple interface yet can support large numbers of players in a fast-paced game on LANs and campus-sized WANs. We then describe in detail a general-purpose communications system called "Mr. Hide" which exploits knowledge of application state to minimize communications overheads for applications with a spatial structure, e.g. games and shared whiteboards. Mr. Hide presents a sufficiently clean interface to be re-usable in a variety of applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, L.E. Moser, P.M. Melliar-Smith, D.A. Agarwal, and P. Ciarfella. </author> <title> The totem single-ring ordering and membershop protocol. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 13(4) </volume> <pages> 311-342, </pages> <month> November </month> <year> 1995. </year>
Reference: [2] <author> John Bentley. </author> <title> Writing Efficient Programs. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year> <note> ISBN 0 13-970244-X. </note>
Reference: [3] <author> John Bentley. </author> <title> Programming Pearls. </title> <publisher> Addison-Wesley, </publisher> <month> November </month> <year> 1985. </year> <note> ISBN 0201103311. </note>
Reference-contexts: T approach. 5 Lessons Learned Below we summarize in sound-bite format some of the lessons we learned | sometimes too late | during our work on this project. (For more of the same sort of wisdom, see the chapter on "bumper-sticker computer science" in <ref> [3] </ref>.) Simplicity is good. Read manual pages carefully. The only way to avoid fatally botched designs is to read the fine print in the man pages before beginning detailed system architecture design.
Reference: [4] <author> Kenneth P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <month> December </month> <year> 1993. </year>
Reference: [5] <author> David R. Cheriton and Dale Skeen. </author> <title> Understanding the limitations of causally and totally ordered communication. </title> <journal> Operating Systems Review (ACM), </journal> <volume> 27(5) </volume> <pages> 44-57, </pages> <month> December </month> <year> 1993. </year> <title> An excellent critique of CATOCS, illustrating why in many cases it at once provides too much and too little to application-level software. </title>
Reference: [6] <author> Brad Clement, Terence Kelly, Andrew Nierman, and Lukasz Opyrchal. </author> <title> Dr. T and Mr. Hide: Communications infrastructures for distributed interactive applications. </title> <note> Available on the Web at http://www-personal.engin.umich.edu/~tpkelly/ds/, November 1997. </note>
Reference-contexts: Section 4 relates our experiences in using Dr. T and Mr. Hide with a "legacy code" application. Section 5 summarizes the lessons we learned from our work with distributed interactive applications. We assume that the reader is familiar with our preliminary design document for Dr. T and Mr. Hide <ref> [6] </ref>. 2 Mr. Hide System Design 2.1 Design Decisions The basic strategy of Mr. Hide is to exploit higher-level semantics of multi-player games and similar applications in order to provide an efficient communication infrastructure. <p> By considering special characteristics common to multi-player games, we can rule out some models of consistency which are inappropriate. For a detailed description of the Mr. Hide approach to lazy state updating in distributed multiplayer games, see our preliminary design document <ref> [6] </ref>. In what follows we assume that the reader is familiar with the basic ideas outlined in the design document. <p> Hide Programming API Mr. Hide's API has changed somewhat since first described in a preliminary design document <ref> [6] </ref>. The major addition is the requirement that a serialize_region () and an unserialize_region () function be passed in the parameters to mrh_register (). These functions are needed for passing partial state information between regions based on group membership changes. Below we list the Mr. Hide interface.
Reference: [7] <author> Douglas E. Comer. </author> <title> Internetworking with TCP/IP: Principles, Protocols, and Architecture, volume I. </title> <publisher> Prentice Hall, </publisher> <address> third edition, </address> <year> 1995. </year> <note> ISBN 0-13-216987-8. </note>
Reference: [8] <author> Douglas E. Comer and David L. Stevens. </author> <title> Internetworking with TCP/IP: Design, Implementation, and Internals, volume II. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1994. </year> <note> ISBN 0-13-125527-4. </note>
Reference: [9] <author> Douglas E. Comer and David L. Stevens. </author> <title> Internetworking with TCP/IP: Client-Server Programming and Applications, volume III. Prentice Hall, </title> <note> Re-Usable Communications Software December 16, 1997 14 second edition, </note> <year> 1996. </year> <title> This book comes in three flavors: WinSock, TLI, and Berkeley sockets. We're using the Berkeley sockets version. </title> <note> ISBN 0-13-260969-X. </note>
Reference: [10] <author> Michael A. Cusumano and Richard W. Selby. </author> <title> Microsoft Secrets. </title> <publisher> The Free Press, </publisher> <month> July </month> <year> 1995. </year> <note> ISBN 0028740483. </note>
Reference-contexts: In general C++ caused more problems than it solved. Writing software in groups is difficult. Clean interfaces with clear semantics are essential. Furthermore, we should have adopted the Microsoft practice of frequently re-synchronizing different modules of an application while they are developed in parallel <ref> [10] </ref>.
Reference: [11] <author> Ian F. Darwin. </author> <title> Checking C Programs with lint. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1988. </year> <title> One of a very few books currently available on lint. Neither large nor recent, but provides a decent introduction to the basics. Also noteworthy for reprinting the Ten Commandments for C Programmers in an appendix. </title> <note> ISBN 0-937175-30-7. </note>
Reference: [12] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <month> April </month> <year> 1995. </year> <note> ISBN 0-201-51459-1. </note>
Reference: [13] <author> David Evans. </author> <title> The LCLint User's Guide. </title> <institution> MIT Laboratory for Computer Science, </institution> <address> 2.2 edition, </address> <month> August </month> <year> 1996. </year> <title> LCLint is a powerful lint that uses special comments to convey the programmer's intentions to the verifier. Read all about it on the Web at http://larch-www.lcs.mit.edu:8001/larch/lclint/. </title>
Reference: [14] <author> Simson Garfinkel, Daniel Weise, and Steven Strassmann. </author> <title> The UNIX-Hater's Handbook. </title> <publisher> IDG Books, </publisher> <year> 1994. </year> <title> A bitterly humorous look at the dark side of Unix, written by knowledgeable programmers. Worth the purchase price for the chapter subtitles alone, e.g. "power tools for power fools" and, for the C++ chapter, "the COBOL of the 90's." </title> <note> ISBN 1-56884-203-1. </note>
Reference: [15] <author> Laurent Gautier and Christophe Diot. Mimaze, </author> <title> a multiuser game on the internet. </title> <type> Technical Report RR-3248, </type> <institution> Institut National de Recherche en Informatique et en Automatique (INRIA), </institution> <month> September </month> <year> 1997. </year> <note> Available on the Web at http://www.inria.fr/rodeo/MiMaze/ReportInt.html. </note>
Reference-contexts: 1 Introduction Several recent papers on the design of distributed multi-player games implicitly suggest that to achieve acceptable performance a game must be internally monolithic in the sense that networking protocols must be tightly coupled with the main game software <ref> [34, 15] </ref>. Recent work on a very simple general-purpose communications infrastructure for distributed interactive applications called "Dr. T" casts doubt on this idea. Dr.
Reference: [16] <author> Audio-Video Transport Working Group. Rtp: </author> <title> A transport protocol for real-time applications. Internet RFC 1889, </title> <month> January </month> <year> 1996. </year> <note> Available on the Web at http://www.cis.ohio-state.edu/htbin/rfc/rfc1889.html. </note>
Reference: [17] <author> David R. Hanson. </author> <title> C Interfaces and Implementations. </title> <publisher> Addison-Wesley Professional Computing Series. Addison-Wesley, </publisher> <year> 1997. </year> <title> An excellent book on modular and reusable software design by a true Jedi master of C (and a former professor of mine). All of the source code described in the book is available on the Web at http://www.cs.princeton.edu/software/cii/. The book itself is produced with the aid of Ramsey's noweb literate programming tool [33, </title> <type> 32]. </type>
Reference: [18] <author> Terence P. Kelly. </author> <title> Dr. t: A communications infrastructure for distributed interactive applications. </title> <note> Available on the Web at http://www-personal.engin.umich.edu/~tpkelly/drt/, December 1997. Re-Usable Communications Software December 16, 1997 15 </note>
Reference-contexts: Measurements of network performance lead us to believe that a more sophisticated implementation of Dr. T might support over 50 players at 30 Hz on a building-sized WAN (one router), and over 15 players on a campus-sized WAN (several routers). For a detailed description of Dr. T, see <ref> [18] </ref>. Dr. T presents a very simple abstraction to application-level software, and does not meddle in the business of applications that use it. This paper describes a more complicated system called "Mr. <p> Below we list the Mr. Hide interface. It is similar in spirit to the interface of Dr. T: clients of the module provide function pointers to Mr. Hide. Mr. Hide manages an event handler which calls these functions in response to network and keyboard events. See <ref> [18] </ref> for a description of the meaning of the function pointers required by Dr. T. The Mr.
Reference: [19] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1988. </year> <title> See section 2.5, page 41, for the ugly truth about integer division and modulus involving negative operands. </title> <note> ISBN 0-13-110362-8. </note>
Reference: [20] <author> Donald E. Knuth. </author> <title> Literate Programming. Center for the Study of Language and Information, </title> <publisher> Stanford, </publisher> <address> California, </address> <year> 1992. </year> <note> The 1995 printing is thought to be error-free. ISBN 0-937073-80-6. Details available on the Web at http://www-cs-faculty.Stanford.EDU/~knuth/lp.html. </note>
Reference: [21] <author> Andrew Koenig. </author> <title> C traps and Pitfalls. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year> <title> Includes a brief discussion of C portability issues. </title> <note> ISBN 0-201-17928-8. </note>
Reference: [22] <author> Leslie Lamport. </author> <title> L A T E X User's Guide and Reference Manual. Addison-Wesley, </title> <note> second edition, 1994. ISBN 0-201-52983-1. </note>

Reference: [24] <author> Stephen A. Maguire. </author> <title> Debugging The Development Process. </title> <publisher> Microsoft Press, </publisher> <year> 1994. </year> <title> Whereas [23] is for individual programmers, this book is for small software team leaders. </title> <note> ISBN 1-55615-650-2. </note>
Reference: [25] <author> David L. Mills. </author> <title> Network time protocol. Internet RFC 1305, </title> <month> March </month> <year> 1992. </year> <note> Available on the Web at http://www.cis.ohio-state.edu/htbin/rfc/rfc1305.html. </note>
Reference: [26] <author> L.E. Moser, P.M. Melliar-Smith, D.A. Agarwal, R.K. Budhia, and C.A. Lingley-Papadopoulos. Totem: </author> <title> A fault-tolerant multicast group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 54-63, </pages> <month> April </month> <year> 1996. </year>
Reference: [27] <author> Sape Mullender, </author> <title> editor. Distributed Systems. </title> <publisher> ACM Press Frontier Series. Addison-Wesley, </publisher> <address> second edition, </address> <year> 1993. </year> <note> ISBN 0-201-62427-3. </note>
Reference: [28] <author> J. Oikarinen and D. Reed. </author> <title> Internet relay chat protocol. Internet RFC 1459, </title> <month> May </month> <year> 1993. </year> <note> Available on the Web at http://www.cis.ohio-state.edu/htbin/rfc/rfc1459.html. </note>
Reference: [29] <author> P. J. Plauger. </author> <title> The Standard C Library. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year> <title> Provides a thorough description and an implementation of the ANSI standard C library. </title> <note> ISBN 0-13-131509-9. Re-Usable Communications Software December 16, 1997 16 </note>
Reference: [30] <author> William H. Press, Saul A. Teukolsky, William T. Vetterling, and Brian P. Flannery. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> second edition, </address> <year> 1992. </year> <pages> Chapter 7, pages 274-316, </pages> <note> is devoted to random number generation. ISBN 0-521-43108-5. There's also a Numerical Recipes Web page at http://cfata2.harvard.edu/nr/nrhome.html, where the most important books in the series are available in PostScript and PDF form. </note>
Reference: [31] <author> Pure Software, 1309 S. Mary Ave., </author> <title> Sunnyvale CA 94087. Purify User's Guide. An excellent introduction to an excellent tool. My edition is labelled part number PFY300-XPX-UGD. Read all about Purify at http://www.rational.com/. </title>
Reference: [32] <author> Norman Ramsey. noweb(1), noweave(1), </author> <title> and notangle(1) manual pages. </title> <institution> University of Virginia. </institution> <note> The noweb family of tools is installed on the University of Michigan CAEN system in /afs/engin.umich.edu/u/t/p/tpkelly/bin/. The noweb tools are freely available on the Web at http://www.cs.virginia.edu/~nr/noweb/. </note>
Reference: [33] <author> Norman Ramsey. </author> <title> Literate programming simplified. </title> <journal> IEEE Software, </journal> <volume> 11(5) </volume> <pages> 97-105, </pages> <month> September </month> <year> 1994. </year> <title> Describes Ramsey's noweb(1) family of simple literate programming tools. </title>
Reference: [34] <author> Jeffrey Rothschild. </author> <title> The internet and performance. </title> <type> Technical report, </type> <institution> Mpath Interactive, Inc., </institution> <year> 1996. </year> <title> A white paper discussing performance issues in multi-player Internet games. </title> <note> Available on the Web at http://www.mpath.com/news/technical.html </note> . 
Reference-contexts: 1 Introduction Several recent papers on the design of distributed multi-player games implicitly suggest that to achieve acceptable performance a game must be internally monolithic in the sense that networking protocols must be tightly coupled with the main game software <ref> [34, 15] </ref>. Recent work on a very simple general-purpose communications infrastructure for distributed interactive applications called "Dr. T" casts doubt on this idea. Dr.
Reference: [35] <author> Richard M. Stallman and Roland McGrath. </author> <title> GNU Make. Free Software Foundation, </title> <type> 59 Temple Place, Suite 330, </type> <address> Boston MA 02111, 0.50 edition, </address> <month> March </month> <year> 1996. </year> <note> ISBN 1-882114-79-5. </note>
Reference: [36] <author> W. Richard Stevens. </author> <title> UNIX Network Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year> <note> ISBN 0-13-949876-1. </note>
Reference: [37] <author> W. Richard Stevens. </author> <title> Unix Network Programming. </title> <publisher> Prentice Hall PTR, </publisher> <address> second edition, </address> <year> 1998. </year> <note> The updated and expanded version of [36], hot off the press at the time of this writing. ISBN 0-13-490012-X. </note>
Reference: [38] <author> Bjarne Stroustrup. </author> <title> The Design and Evolution of C++. </title> <publisher> Addison-Wesley, </publisher> <month> April </month> <year> 1995. </year> <note> ISBN 0-201-54330-3. </note>
Reference: [39] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> third edition, </address> <month> August </month> <year> 1997. </year> <note> ISBN 0-201-88954-4. </note>
Reference: [40] <author> Andrew S. Tanenbaum. </author> <title> Distributed Operating Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <note> ISBN 0-13-219908-4. </note>
Reference: [41] <author> Peter van der Linden. </author> <title> Expert C Programming: Deep C Secrets. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year> <title> A highly readable and humorous look into the dark corners Re-Usable Communications Software December 16, 1997 17 of C by a member of Sun's compiler and OS kernel group. Highly recommended. </title> <note> ISBN 0-13-177429-8. More information is available on the Web at http://www.sun.com/books/books/vanderLinden/vanderLinden.html. </note>
Reference: [42] <author> Kevin Watkins. </author> <title> Discrete Event Simulation in C. </title> <booktitle> McGraw-Hill International Series in Software Engineering. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1993. </year> <note> Includes code on diskette, none of which was used in the project described in this paper. ISBN 0-07-707733-4. </note>
Reference: [43] <editor> Gray Watson. </editor> <address> Debug Malloc Library, 3.2.0 edition, </address> <month> January </month> <year> 1997. </year> <title> Debug malloc is poor man's Purify. It's a drop-in replacement for the standard C library malloc. Detects many of the same errors as Purify (e.g. leaks, some forms of corruption). </title> <note> Available free on the Web at ftp://ftp.letters.com/src/dmalloc/. </note>
References-found: 42

