URL: http://charm.cs.uiuc.edu/manuals/ca-desc.ps.gz
Refering-URL: http://charm.cs.uiuc.edu/manuals/
Root-URL: http://www.cs.uiuc.edu
Author: Andrew A. Chien Vijay Karamcheti John Plevyak Xingbin Zhang 
Affiliation: Concurrent Systems Architecture Group Department of Computer Science University of Illinois at Urbana-Champaign  
Date: February 27, 1994  
Note: Version 2.0  Electronic Mail: concert@red-herring.cs.uiuc.edu  
Abstract: Concurrent Aggregates (CA) Language Report 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. A. Chien and W. J. Dally. </author> <title> Concurrent Aggregates (CA). </title> <booktitle> In Proceedings of Second Symposium on Principles and Practice of Parallel Programming. ACM, </booktitle> <month> March </month> <year> 1990. </year>
Reference: [2] <author> Andrew A. Chien. </author> <title> Research Directions in Object-Based Concurrency, chapter "Supporting Modularity in Highly Parallel Programs". </title> <publisher> MIT Press, </publisher> <year> 1993. </year> <note> To Appear. </note>
Reference-contexts: Subsequent input/output operations, such as read int, can then be performed on the stream. close closes the stream. 33 4.12 More Examples More examples of Concurrent Aggregates programs can be found in <ref> [3, 2, 4] </ref>.
Reference: [3] <author> Andrew A. Chien. </author> <title> Concurrent Aggregates: Supporting Modularity in Massively-Parallel Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: As the computation progresses, the connections between objects change, new objects are created and the network of objects is transformed and ultimately becomes the result of the computation. The course of a computation is governed by the CA execution model which is described in detail in <ref> [3] </ref>. An informal description is given below. In CA, object state is modified via message sends (method invocations). All shared state in a computation is maintained as shared objects and accessed only via method invocations on those objects. <p> Subsequent input/output operations, such as read int, can then be performed on the stream. close closes the stream. 33 4.12 More Examples More examples of Concurrent Aggregates programs can be found in <ref> [3, 2, 4] </ref>.
Reference: [4] <author> Andrew A. Chien and William J. Dally. </author> <title> Experience with concurrent aggregates (CA): </title> <booktitle> Implementation and programming. In Proceedings of the Fifth Distributed Memory Computers Conference, </booktitle> <address> Charleston, South Carolina, </address> <month> April 8-12 </month> <year> 1990. </year> <note> SIAM. </note>
Reference-contexts: Subsequent input/output operations, such as read int, can then be performed on the stream. close closes the stream. 33 4.12 More Examples More examples of Concurrent Aggregates programs can be found in <ref> [3, 2, 4] </ref>.
Reference: [5] <author> J. Dolby. </author> <title> Using the concert system on sun workstations. CSA Group Memo, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: This generic output facility can be used to insert print statements in programs. For example, the CREATED BUFFER invocation inside the initial message method body prints the string "CREATED BUFFER" on stdout. More detailed examples of using the input/output facilities of CA can be found in <ref> [5] </ref>. 2.2 Support for Multi-access Data Abstractions: Aggregates CA extends the traditional concurrent object-oriented language paradigm by providing language-level support for programming with collections of objects. The collections can be used to imple 7 ment multi-access data abstractions because they have a collective name.
Reference: [6] <author> Adele Goldberg and David Robertson. </author> <title> Smalltalk-80 The language and its implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: First, type-dependent dispatch selects methods based on the type of the target object. This allows the writing of generic or reusable code. Second, inheritance admits another form of code reuse, deriving new class definitions as incremental modifications of existing definitions. For a thorough introduction to object-oriented languages, see <ref> [6] </ref>. CA extends this paradigm by incorporating concurrent objects, concurrent method invocation, and aggregates (distributed object collections). In CA, concurrency arises from concurrent method executions on distinct objects. A computation consists of a set of objects sending messages to each other (message passing).
Reference: [7] <author> W. Horwat, A. Chien, and W. Dally. </author> <title> Experience with CST: </title> <booktitle> Programming and implementation. In Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 101-9. </pages> <booktitle> ACM SIGPLAN, </booktitle> <publisher> ACM Press, </publisher> <year> 1989. </year> <month> 34 </month>
Reference-contexts: The internal read sum method accumulates the partial sum stored in the val instance variable of the current representative into the sum argument, and uses the forward form to implement tail forwarding <ref> [7] </ref>. Each representative in the aggregate adds its value to the running sum and simultaneously, the continuation of read sum 's caller is also passed along using forward.
References-found: 7

