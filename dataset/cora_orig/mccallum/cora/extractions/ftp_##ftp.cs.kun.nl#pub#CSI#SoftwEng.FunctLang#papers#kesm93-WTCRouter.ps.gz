URL: ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/kesm93-WTCRouter.ps.gz
Refering-URL: http://www.cs.kun.nl/~clean/Clean.Papers.html
Root-URL: 
Title: Efficient Routing using Class Climbing  
Author: Marco Kesseler 
Address: Toernooiveld 1, 6525 ED Nijmegen, The Netherlands  
Affiliation: Faculty of Mathematics and Computer Science, University of Nijmegen,  
Abstract: This paper concentrates on a routing algorithm that is adaptive and avoids deadlocks and starvation. It is a general store-and-forward packet router that has been developed to be used as part of a distributed runtime system for Concurrent Clean, an experimental, lazy, higher-order parallel functional programming language based on term graph rewriting. The routing algorithm is based on the one used by the communication processor of the Decentralised Object Oriented Machine (DOOM) architecture, which uses a class climbing algorithm to avoid deadlocks. It has been altered in such a way that it can be used for the Inmos T800 transputer. Efficiency issues will be focused on. Performance figures clearly indicate that algorithm is significantly faster - and more reliable - than the communication primitives of the Helios operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Plasmeijer M.J., Eekelen M.C.J.D. </author> <title> van (1993). Functional Programming and Parallel Graph Rewriting. </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference: [2] <author> Ncker E.G.J.M.H., Smetsers J.E.W., Eekelen M.C.J.D. van, Plasmeijer M.J., </author> <year> (1991). </year> <title> 'Concurrent Clean', </title> <booktitle> Proceedings of the conference on Parallel Architectures and Languages Europe (PARLE'91). Springer Lecture Notes in Computer Science 505, </booktitle> <volume> Vol. II, </volume> <pages> page 202-219. </pages>
Reference: [3] <author> Smetsers J.E.W., Ncker E.G.J.M.H., Van Groningen J.C., Plasmeijer M.J. </author> <year> (1991). </year> <title> Generating Efficient Code for Lazy Functional Languages. </title> <booktitle> Proceedings of the Fifth International Conference on Functional Programming Languages and Computer Architecture (FPCA91), U.S.A., Springer Lecture Notes on Computer Science. </booktitle>
Reference: [4] <author> Groningen J. van. </author> <year> (1990). </year> <title> 'Implementing the ABC-machine on M680x0 based architectures'. </title> <type> Master Thesis, </type> <institution> University of Nijmegen, </institution> <month> November </month> <year> 1990. </year>
Reference: [5] <author> Kesseler M.H.G., </author> <year> (1990), </year> <title> 'Concurrent Clean on Transputers', </title> <type> Master Thesis, </type> <institution> University of Nijmegen, </institution> <month> November </month> <year> 1990. </year>
Reference: [6] <author> Kesseler M.H.G., </author> <year> (1992), </year> <title> Communication Issues regarding Parallel Functional Graph Rewriting, </title> <booktitle> Proceedings of the Fourth International Workshop on the Parallel Implementation of Functional Languages, </booktitle> <address> Aachen, </address> <month> September </month> <year> 1992. </year>
Reference: [7] <author> Eekelen M.C.J.D. van, Plasmeijer M.J., Smetsers J.E.W., </author> <year> (1990). </year> <booktitle> 'Parallel Graph Rewriting on Loosely Coupled Machine Architectures' proceedings of the workshop on CTRS'90. </booktitle> <address> Montreal Canada. </address>
Reference: [8] <author> Groningen J. </author> <title> van (1992). Some Implementation Aspects of Concurrent Clean on Distributed Memory Architectures, </title> <booktitle> Proceedings of the Fourth International Workshop on the Parallel Implementation of Functional Languages, </booktitle> <address> Aachen, </address> <month> September </month> <year> 1992. </year>
Reference: [9] <author> INMOS Limited, </author> <title> Transputer Reference Manual, </title> <publisher> Prentice Hall International, </publisher> <year> 1988. </year>
Reference: [10] <author> Annot J.K., Twist R.A.H. van, </author> <year> (1987). </year> <title> A Novel Deadlock Free and Starvation Free Packet Switching Communication Processor. </title> <institution> Philips Research Laboratories. </institution> <address> Eindhoven. </address> <booktitle> Proceedings of the conference on Parallel Architectures and Languages Europe (PARLE87). Springer Lecture Notes in Computer Science 258, </booktitle> <volume> Vol. I, </volume> <pages> page 68-85. </pages>
Reference-contexts: We will see below that adaptive routing is better than routing over fixed paths when the network load is high. The router is based on the routing algorithm that was used for the special purpose router processor of the Decentralised Object Oriented Machine (DOOM) architecture <ref> [10] </ref>. This algorithm had to be altered in order to be usable for a network of transputers. As the algorithm uses a class climbing algorithm to avoid deadlocks we have called our router the Class Transputer Router (CTR for short). <p> We will mainly focus on efficiency issues. Finally some performance figures will be presented. 2. The DOOM Algorithm The algorithm that has been used to implement the Clean router is based on the one presented in <ref> [10] </ref>. It has been developed as part of the DOOM project and we will refer to it as the DOOM router. It has been proved to prevent deadlocks, provided that each packet that reaches its destination is consumed within a finite amount of time. <p> Unlike others that limit the number of possible physical paths a message may travel it avoids these dependencies by means of sophisticated buffer management. The DOOM algorithm uses this method and its correctness has been proved <ref> [10] </ref>. As the name suggests a class climbing algorithm works with classes: at any moment in time each packet has a certain class. During transportation this class may be increased, but never decreased. Buffers have a class as well and for every possible class at least one buffer exists. <p> In our view this increase in buffer space for large networks does not constitute any problem. 2.4. Buffer Management In order for the algorithm to work efficiently the request messages, which have been mentioned above, should always request packets for as low a class as possible. As stated in <ref> [10] </ref> a rather intricate administration is used to accomplish this efficiently. One of the things that is carefully avoided is copying the contents of buffers to others, by connecting buffers to a certain class only logically, never physically.
Reference: [11] <author> Bertsekas D., Gallager R., </author> <year> (1987). </year> <title> 'Data Networks'. </title> <booktitle> Prentice-Hall International 1987. </booktitle>
Reference: [12] <author> Stallings W., </author> <year> (1988). </year> <title> 'Data and Computer Communications'. </title> <publisher> Macmillan Publishing Company. </publisher>
Reference: [13] <author> Son N. T., Paker Y., </author> <year> (1991). </year> <title> Adaptive Deadlock-free Packet Routeing in Transputer-based Multiprocessor Interconnection Networks. </title> <journal> The Computer Journal, </journal> <volume> Vol. 34, No. 6, </volume> <year> 1991, </year> <pages> Page 493-502. </pages>
Reference-contexts: This means that the number of buffers can be limited considerably for networks that have few cycles but a relatively large diameter (e.g. an array, a tree, or a ring). Note that the number of buffers needed is linear with the network diameter at worst. In <ref> [13] </ref> it is argued this is problematic. One should keep in mind however that one can easily build a large network with a diameter of O (log n). In our view this increase in buffer space for large networks does not constitute any problem. 2.4. <p> It would be interesting to known if the elimination of cycles from routing tables affects the efficiency of Tiny in certain situations. The router presented by Son and Paker <ref> [13] </ref> has been tested on various network topologies, but the account of its performance is too short to draw any conclusions. The maximal average throughput appears to be about 260 Kbyte/sec.
Reference: [14] <author> Kesseler M., </author> <year> (1993). </year> <title> The Class Transputer Router. </title> <booktitle> Poceedings of the PaCT-93 Conference on Parallel Computing Technologies., </booktitle> <address> Obninsk, Russia, </address> <note> to appear. </note>
Reference-contexts: They are globally known to both processes. It will be clear that this change of inter-process connectivity may not influence the original behaviour of the algorithm. As explained in <ref> [14] </ref> the transputer is able to provide exactly the same communication primitives with this interconnection scheme as the DOOM hardware, which means the original algorithm is not violated in any way. Below we will see how we have solved the other problems. 3.2.2. <p> If we abandon the original method to avoid starvation it is easy to show that suspending the input process in this way does not violate the mechanism of the original algorithm to avoid deadlock (see <ref> [14] </ref>). We will take a closer look at issues related to starvation below. 3.2.3. Starvation Although it is possible to build a deadlock free router with the techniques presented above, they invalidate the DOOM method to avoid starvation. <p> Even worse: it may not get passed on at all. This has led to a different fairness administration for the CTR that does not allow sleeping processes to have any privileges <ref> [14] </ref>. This avoids the problem of the original fairness administration. For reasons of efficiency this fairness algorithm requires the number of zero class buffers to be equal to or greater than the number of connections per processor.
Reference: [15] <author> Goldsmith R., McBurney D.L. and Sleep M.R. </author> <year> (1991). </year> <title> Concurrent Clean on ZAPP. </title> <booktitle> Proceedings of the Semagraph '91 Symposium on the Semantics and Pragmatics of Generalised Graph Rewriting., </booktitle> <address> Nijmegen, the Netherlands, </address> <month> (10-12 December). </month>
Reference-contexts: Not only does this facilitate the use of shared data structures - high priority processes are not timesliced - but much more important: the use of high priority processes is vital when good response times have to be achieved (as noted in the ZAPP experiments <ref> [15] </ref>). In the original DOOM algorithm the router processes run without any interruption. Running these processes at high priority on the transputer would not allow any low priority process to run. 3.2. Changes To overcome the problems mentioned above the algorithm has been changed in two ways.
Reference: [16] <author> Perihelion Software LTD (1989). </author> <title> The Helios Operating System. </title> <publisher> Prentice Hall International, </publisher> <year> 1989. </year>
Reference-contexts: One-to-all broadcasting has been implemented as well, but for this no performance figures are available yet. 4. Performance In this section we will present the results of some tests that were carried out with the CTR. These will be compared with tests of the Helios communication mechanism <ref> [16] </ref> and the Parix communication mechanism. It will be shown that Helios is not only less reliable - it is not deadlock free -, but that it is slower as well, in particular for larger networks and higher traffic loads. <p> In addition to the differences in speed between Helios and the CTR, Helios is not deadlock-free. Helios allocates routing buffers at runtime. This means that communications might fail when memory is low on some intermediate processor. The Helios manual <ref> [16] </ref> states that, when a message gets lost due to congestion, an exception message is generated which is sent back to the reply port. Unfortunately congestion may cause exception messages to get lost as well and there is no guarantee that subsequent tries will succeed.
Reference: [17] <author> Debbage M., Hill M., Nicole D., </author> <year> (1991). </year> <title> Virtual Channel Router Version 2.0 User Guide. </title> <type> Technical Report, </type> <institution> University of Southampton, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: At the moment of writing, we did not have enough information about the performance of other routers under the same circumstances on a comparable machine to relate these to the CTR properly. For the Virtual Channel Router (VCR <ref> [17] </ref>) some figures about message latency over 1, 2 and 3 hops in a quiet network have been published. Looking at the latency for messages of different size one can deduct the raw link speed is approximately 1500 Kbyte/sec.
Reference: [18] <author> Clarke L., Wilson G., </author> <year> (1991). </year> <title> Tiny: an efficient routing harness for the Inmos transputer. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> Vol. 3(3), </volume> <pages> Page 221-245. </pages>
Reference-contexts: Tiny is able to avoid deadlocks by eliminating cycles from routing tables. It allows routing without deadlock-avoidance as well. In <ref> [18] </ref> one can find some timing information about Tiny. It presents the travel times over 1 to 12 hops in a quiet network for messages of 4, 16, 64, and 256 bytes.
Reference: [19] <institution> Parsytec GmbH (1989). Supercluster Technical Documentation. Revision 1.2, </institution> <month> April </month> <year> 1989. </year>
References-found: 19

