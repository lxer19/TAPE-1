URL: ftp://ftp.cs.dartmouth.edu/TR/TR98-330.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR98-330/
Root-URL: http://www.cs.dartmouth.edu
Title: Straightforward Java Persistence Through Checkpointing  
Author: Jon Howell 
Date: 2, 1998  
Note: May  
Abstract: Technical Report PCS-TR98-330 y Department of Computer Science Dartmouth College Hanover, NH 03755-3510 jonh@cs.dartmouth.edu Abstract Several techniques have been proposed for adding persistence to the Java language environment. This paper describes a scheme based on checkpointing the Java Virtual Machine, and compares the scheme to other techniques. Checkpointing offers two unique advantages: first, the implementation is independent of the JVM implementation, and therefore survives JVM updates; second, because checkpointing saves and restores execution state, even threads become persistent entities.
Abstract-found: 1
Intro-found: 1
Reference: [ADJ + 96] <author> Malcom Atkinson, Laurent Daynes, Mick Jordan, Tony Printezis, and Susan Spence. </author> <title> An orthogonally persistent Java. </title> <journal> ACM SIGMOD Record, </journal> <volume> 25(4) </volume> <pages> 68-75, </pages> <month> December </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: Objects are moved out to a buffer pool of storage made persistent using the Recoverable Virtual Memory (RVM) package <ref> [Spe96, SA97, Jor96, ADJ + 96, PAD + 97] </ref>.
Reference: [Dea97] <author> Alan Dearle. </author> <title> Persistent servers + ephemeral clients = user mobility. </title> <booktitle> In Proceedings of the Second International Workshop on Persistence and Java, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: Dearle et. al. suggest implementing Java on top of the persistence provided by the Grasshopper operating system. They describe how Grasshopper could be used below a JVM (or other language) to provide transparent persistence support, without modifying the runtime language system at all <ref> [DHF96, Dea97] </ref>. Libckpt is a portable checkpointing package, but is only aware of a three-segment memory map and simple files [PBKL95].
Reference: [DHF96] <author> Alan Dearle, David Hulse, and Alex Farkas. </author> <title> Persistent operating system support for Java. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Dearle et. al. suggest implementing Java on top of the persistence provided by the Grasshopper operating system. They describe how Grasshopper could be used below a JVM (or other language) to provide transparent persistence support, without modifying the runtime language system at all <ref> [DHF96, Dea97] </ref>. Libckpt is a portable checkpointing package, but is only aware of a three-segment memory map and simple files [PBKL95].
Reference: [dST96] <author> C. Souza dos Santos and E. Theroude. </author> <title> Persistent Java. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Classes must be explicitly declared potentially persistent. Persistent Java maps Java objects to a database via JDBC. The system is implemented as a Java class library, and involves no changes to the compiler or the JVM <ref> [dST96] </ref>. The Jspin system provides persistence through a mapping to an object-oriented database. Jspin also avoids modifying the JVM, but requires processing any potentially persistent classes through a modified compiler [RTW97, WKMR96].
Reference: [GN96] <author> Alex Garthwaite and Scott Nettles. </author> <title> Transactions for Java. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Transactions for Java extends the JVM to log changes to the heap, and back them to stable storage using RVM <ref> [GN96] </ref>. The Persistent Java project from IBM modifies a JVM to simulate a large address architecture, even on 32-bit hardware.
Reference: [JMN + 97] <author> Maynard P. Johnson, Steven J. Munroe, John G. Nistler, James W. Stopyro, and Ashok Malhotra. </author> <title> Java(tm) persistence via persistent virtual storage. </title> <booktitle> In Proceedings of the Second International Workshop on Persistence and Java, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: The Persistent Java project from IBM modifies a JVM to simulate a large address architecture, even on 32-bit hardware. That address space is made persistent by shared address space subsystem <ref> [Mal96, JMN + 97] </ref>. 3.3 Operating System Support We are aware of only one proposal that would make threads persistent. Dearle et. al. suggest implementing Java on top of the persistence provided by the Grasshopper operating system.
Reference: [Jor96] <author> Mick Jordan. </author> <title> Early experiences with persistent Java. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Objects are moved out to a buffer pool of storage made persistent using the Recoverable Virtual Memory (RVM) package <ref> [Spe96, SA97, Jor96, ADJ + 96, PAD + 97] </ref>.
Reference: [LLOW91] <author> Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Jspin also avoids modifying the JVM, but requires processing any potentially persistent classes through a modified compiler [RTW97, WKMR96]. The ObjectStore PSE system uses a bytecode postprocessor to insert residency and update checks into methods for potentially-persistent classes <ref> [O'B96, LLOW91] </ref>. Concordia, an infrastructure for mobile agents, employs Java serialization facilities to provide persistence for agent code and data [WPW + 97]. 3.2 Virtual Machine Extension The PJama project extends the JVM by adding a persistent object pool alongside the original transient object heap.
Reference: [Mal96] <author> Ashok Malhotra. </author> <title> Persistent Java objects: A proposal. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: The Persistent Java project from IBM modifies a JVM to simulate a large address architecture, even on 32-bit hardware. That address space is made persistent by shared address space subsystem <ref> [Mal96, JMN + 97] </ref>. 3.3 Operating System Support We are aware of only one proposal that would make threads persistent. Dearle et. al. suggest implementing Java on top of the persistence provided by the Grasshopper operating system.
Reference: [MH96] <author> J. Eliot B. Moss and Tony L. Hosking. </author> <title> Approaches to adding persistence to Java. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Previous papers at this workshop have outlined a variety of strategies for providing persistence for Java programs. Moss and Hosking provide a taxonomy for categorizing these proposals according to the persistence programming model and implementation <ref> [MH96] </ref>. Our proposal is unlike most in that even thread state is made persistent, and it requires no changes to the Java virtual machine. <p> The PJama authors lament making "a succession of ports of our technology between different versions of the JVM, an activity that will not diminish." [PAD + 97] Moss and Hosking describe a new Java interpreter that they expect to base on their Persistent Smalltalk system <ref> [MH96] </ref>. Transactions for Java extends the JVM to log changes to the heap, and back them to stable storage using RVM [GN96]. The Persistent Java project from IBM modifies a JVM to simulate a large address architecture, even on 32-bit hardware.
Reference: [O'B96] <author> Patrick O'Brien. </author> <title> Java data management using ObjectStore and PSE. Object Design, </title> <publisher> Inc. </publisher> <address> white paper, </address> <month> November </month> <year> 1996. </year> <note> Available at http://www.odi.com/content/white_papers/javawp1.html. </note>
Reference-contexts: Jspin also avoids modifying the JVM, but requires processing any potentially persistent classes through a modified compiler [RTW97, WKMR96]. The ObjectStore PSE system uses a bytecode postprocessor to insert residency and update checks into methods for potentially-persistent classes <ref> [O'B96, LLOW91] </ref>. Concordia, an infrastructure for mobile agents, employs Java serialization facilities to provide persistence for agent code and data [WPW + 97]. 3.2 Virtual Machine Extension The PJama project extends the JVM by adding a persistent object pool alongside the original transient object heap.
Reference: [PAD + 97] <author> Tony Printezis, Malcolm Atkinson, Laurent Daynes, Susan Spence, and Pete Bailey. </author> <title> The design of a new persistent object store for PJama. </title> <booktitle> In Proceedings of the Second International Workshop on Persistence and Java, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: Objects are moved out to a buffer pool of storage made persistent using the Recoverable Virtual Memory (RVM) package <ref> [Spe96, SA97, Jor96, ADJ + 96, PAD + 97] </ref>. <p> The PJama authors lament making "a succession of ports of our technology between different versions of the JVM, an activity that will not diminish." <ref> [PAD + 97] </ref> Moss and Hosking describe a new Java interpreter that they expect to base on their Persistent Smalltalk system [MH96]. Transactions for Java extends the JVM to log changes to the heap, and back them to stable storage using RVM [GN96].
Reference: [PBKL95] <author> James S. Plank, Micah Beck, Gerry Kingsley, and Kai Li. Libckpt: </author> <title> Transparent checkpointing under Unix. </title> <booktitle> In Proceedings of the 1995 USENIX Technical Conference, </booktitle> <pages> pages 213-224, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: Admittedly, this can be inefficient for certain classes of application with large amounts of temporary state. The libckpt package allows programmers to specify application data that need not be made persistent <ref> [PBKL95] </ref>, but it is not clear yet how we might support this idea without modifying the JVM. M1: Is object code persistent? Yes, since classes are loaded into the heap. M2: Is program execution state persistent? Yes, thread stacks are included in the check point file. <p> They describe how Grasshopper could be used below a JVM (or other language) to provide transparent persistence support, without modifying the runtime language system at all [DHF96, Dea97]. Libckpt is a portable checkpointing package, but is only aware of a three-segment memory map and simple files <ref> [PBKL95] </ref>. <p> It also introduces user-directed checkpointing, which allows the programmer to specify regions of memory that do not need persistence <ref> [PBKL95] </ref>. This latter feature is impractical in our system because it would violate the safety of Java, and an implementation would almost certainly require modifying the JVM.
Reference: [RTW97] <author> John V. E. Ridgway, Craig Thrall, and Jack C. Wileden. </author> <title> Toward assessing approaches to persistence for Java. </title> <booktitle> In Proceedings of the Second International Workshop on Persistence and Java, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: The system is implemented as a Java class library, and involves no changes to the compiler or the JVM [dST96]. The Jspin system provides persistence through a mapping to an object-oriented database. Jspin also avoids modifying the JVM, but requires processing any potentially persistent classes through a modified compiler <ref> [RTW97, WKMR96] </ref>. The ObjectStore PSE system uses a bytecode postprocessor to insert residency and update checks into methods for potentially-persistent classes [O'B96, LLOW91].
Reference: [SA97] <author> Susan Spence and Malcolm Atkinson. </author> <title> A scalable model of distribution promoting autonomy of and cooperation between PJava object stores. </title> <booktitle> In Proceedings of the Thirtieth Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 513-522, </pages> <year> 1997. </year>
Reference-contexts: Objects are moved out to a buffer pool of storage made persistent using the Recoverable Virtual Memory (RVM) package <ref> [Spe96, SA97, Jor96, ADJ + 96, PAD + 97] </ref>.
Reference: [Spe96] <author> Susan Spence. </author> <title> Distribution strategies for Persistent Java. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year> <month> 7 </month>
Reference-contexts: Objects are moved out to a buffer pool of storage made persistent using the Recoverable Virtual Memory (RVM) package <ref> [Spe96, SA97, Jor96, ADJ + 96, PAD + 97] </ref>.
Reference: [WKMR96] <author> Jack C. Wileden, Alan Kaplan, Geir A Myrestrand, and John V.E. Ridgway. </author> <title> Our SPIN on persistent Java: The JavaSPIN approach. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: The system is implemented as a Java class library, and involves no changes to the compiler or the JVM [dST96]. The Jspin system provides persistence through a mapping to an object-oriented database. Jspin also avoids modifying the JVM, but requires processing any potentially persistent classes through a modified compiler <ref> [RTW97, WKMR96] </ref>. The ObjectStore PSE system uses a bytecode postprocessor to insert residency and update checks into methods for potentially-persistent classes [O'B96, LLOW91].
Reference: [WPW + 97] <author> D. Wong, N. Paciorek, T. Walsh, J. DiCelie, M. Young, and B. Peet. </author> <title> Concordia: an infrastructure for collaborating mobile agents. </title> <booktitle> In Mobile Agents. First International Workshop, MA '97 Proceedings, </booktitle> <pages> pages 86-97, </pages> <year> 1997. </year> <month> 8 </month>
Reference-contexts: The ObjectStore PSE system uses a bytecode postprocessor to insert residency and update checks into methods for potentially-persistent classes [O'B96, LLOW91]. Concordia, an infrastructure for mobile agents, employs Java serialization facilities to provide persistence for agent code and data <ref> [WPW + 97] </ref>. 3.2 Virtual Machine Extension The PJama project extends the JVM by adding a persistent object pool alongside the original transient object heap.
References-found: 18

