URL: http://www.cs.rpi.edu/~spoonerd/Papers/HDKS95.ps
Refering-URL: http://www.cs.rpi.edu/~spoonerd/
Root-URL: http://www.cs.rpi.edu
Author: Martin Hardwick, Blair Downie, Mike Kutcher and David Spooner 
Address: Troy, New York 12180  
Affiliation: Rensselaer Polytechnic Institute and STEP Tools, Inc.  
Abstract: Using Delta Files to Implement Concurrent Engineering: Results of an Experiment Abstract Data management tools that effectively capture engineering changes are necessary so that engineers can work on the design and implementation of a product concurrently. We report on an experiment in which PDES/STEP was used to communicate an original product data set between two engineers, and delta files were used to communicate subsequent engineering changes. The experiment demonstrates the potential of delta files for concurrent engineering and identifies several important issues for consideration as the approach matures. 
Abstract-found: 1
Intro-found: 1
Reference: [Alm92] <author> G. Almasi, V. Montan, S. Qui, E. Schmidt and G. Trapp, </author> <title> "An Information Sharing System Based on an EXPRESS Model," </title> <booktitle> Proceedings of the 1992 EXPRESS User's Group Conference, </booktitle> <editor> editor P. Wilson, </editor> <address> Houston, TX., </address> <month> October </month> <year> 1992. </year>
Reference-contexts: 1. Introduction Concurrent engineering reduces the time needed to bring a product to market by allowing groups of engineers to work on design and manufacturing tasks concurrently. Successful implementation of concurrent engineering is facilitated with a variety of computer tools, including a shared database <ref> [Alm92, Spo93] </ref>. One of the requirements for such a shared database is efficient communication of engineering changes. In this paper, we report on an experiment in which concurrent engineering is facilitated with a data management system that communicates engineering changes using delta files.
Reference: [Elm89] <author> R. Elmasri and S. Navathe, </author> <title> Fundamentals of Database Systems, </title> <publisher> Benjamin Cummings, </publisher> <address> Redwood City, CA., </address> <year> 1989. </year> <title> [ISO92a] "Industrial Automation Systems - Product Data Representation and Exchange -- Part 1: Overview and Fundamental Principles," ISO DIS 10303-1, Draft International Standard, 1992. [ISO92b] "Industrial Automation Systems and Integration -- Product Data Representation and Exchange -- Part 11: Description Methods: The EXPRESS Language Reference Manual," ISO DIS 10303-11 Draft International Standard, </title> <year> 1992. </year>
Reference-contexts: From the perspective of a single application, however, they are often more powerful than necessary and unnecessarily difficult to manipulate. A similar problem occurs in relational databases because normal form theory requires the design of a relational database to be divided into many small relations <ref> [Elm89] </ref>. This problem is overcome by defining a simpler view of the database for an application. In our experiment, the problem is overcome by customizing the C++ classes generated by the EXPRESS compiler that we used. The global library of entity definitions in STEP describes a large number of entities.
Reference: [Kro89] <author> U. I. Kroszynski, B. Palstroem, E. Trostmann and E. G. Schlechtendahl, </author> <title> "Geometric Data Transfer Between CAD Systems: Solid Models," </title> <journal> IEEE CG&A, </journal> <month> Sept. </month> <year> 1989, </year> <pages> pp. 57-71. </pages>
Reference-contexts: The part created by the first engineer is similar to the MBB part described in <ref> [Kro89] </ref>. The fixture that the CATIA engineer creates fits into a cylindrical hole in the part as shown in Figure 1.
Reference: [Lof93] <author> D. Loffredo, </author> <title> "The STEP Utilities Reference Manual", STEP, Tools, </title> <institution> Inc., Rensselaer Technology Park, </institution> <address> Troy, NY 12180, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: An EXPRESS compiler <ref> [Lof93] </ref> was used to compile the constructive solid geometry model (CSG) entities in Part 42 of the STEP standard into C++ class definitions. Copies of the resulting C++ class library were then used to build the interfaces to ACIS and CATIA.
Reference: [Roc75] <author> M. Rochkink, </author> <title> "The Source Code Control System," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 1, No. 4, </volume> <month> December </month> <year> 1975, </year> <pages> 364-370. </pages>
Reference-contexts: This audit trail might be part of a larger quality control system. An application can store a product model version as a delta to another version to save storage space. A data archiving system can use delta files to store forward or backward deltas to product models (e.g., SCCS <ref> [Roc75] </ref>). Delta files can be used to build a change notification system for a group of engineers working on the design of a product.
Reference: [Tra91] <author> G. Trapp, </author> <title> "Advancing Concurrent Engineering Using STEP," </title> <booktitle> Proceedings of the CALS Expo, </booktitle> <address> Phoenix, AZ., </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Furthermore, in today's global manufacturing environment, this language should be universal. Collectively, these points imply that an international standard for exchange of product data such as STEP is appropriate for use as a tool to communicate changes in a concurrent engineering environment <ref> [Car91, Tra91] </ref>. As a result, we use STEP in our experiment. surprisingly, a standard that seeks to communicate complete, unambiguous, accurate definitions of products is large and complex. However, the basic organization of STEP is relatively simple.
Reference: [Tra93] <author> G. Trapp, </author> <title> "The Emerging STEP Standard for Product Model Data Exchange," </title> <publisher> Computer, IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993, </year> <pages> pp. 85-87. </pages>
Reference: [Sch94] <author> D. A. Schenck and P. R. Wilson, </author> <title> "Information Modeling the EXPRESS Way," </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Representation Structure 5 engineering product model definitions known as Parts 41 through 199 shown in the center of the figure, and a set of application protocols shown at the top of the figure. The infrastructure can be further broken into the EXPRESS language <ref> [Sch94] </ref>, implementation methods, and testing methods. Everything in the STEP libraries and Application Protocols is described using the information modeling language EXPRESS [ISO92b].
Reference: [Spo93] <author> Spooner, D. and Hardwick, M., </author> <title> "Using Persistent Object Technology to Support Concurrent Engineering Systems," to appear in Concurrent Engineering, </title> <publisher> Elsevier Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: 1. Introduction Concurrent engineering reduces the time needed to bring a product to market by allowing groups of engineers to work on design and manufacturing tasks concurrently. Successful implementation of concurrent engineering is facilitated with a variety of computer tools, including a shared database <ref> [Alm92, Spo93] </ref>. One of the requirements for such a shared database is efficient communication of engineering changes. In this paper, we report on an experiment in which concurrent engineering is facilitated with a data management system that communicates engineering changes using delta files.
References-found: 9

