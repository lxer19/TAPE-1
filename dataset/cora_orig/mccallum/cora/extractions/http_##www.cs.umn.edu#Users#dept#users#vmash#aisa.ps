URL: http://www.cs.umn.edu/Users/dept/users/vmash/aisa.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/vmash/
Root-URL: http://www.cs.umn.edu
Email: fvmash,glamm,riedlg@cs.umn.edu  
Title: AISA: Asynchronous Inspector of Software Artifacts  
Author: Vahid Mashayekhi Bob Glamm John Riedl 
Keyword: Concurrent Software Engineering, Asynchrony, Software Inspection, Computer-Supported Cooperative Work (CSCW), Collaboration, Groupware, World Wide Web.  
Date: February 10, 1995  
Address: Minneapolis, MN  
Affiliation: Department of Computer Science University of Minnesota  
Abstract: Many software engineering tasks, such as design and code inspection, have a synchronous component that constrains the participants to meet together at the same time. The time constraint calls for participants to reserve the same block of time for the meeting. We propose asynchronizing software engineering tasks to relax the constraint that participants be present at the same time. Through asynchronizing, participants working in dissimilar time zones and with different work schedules can conduct meeting activities at times that are convenient for each of them independently. We conjecture that support for asynchrony will enable software engineering teams to work together as effectively in different times as in the same time. We have chosen software inspection as our representative software engineering task because of its highly structured nature and wide spread use. We have designed, implemented, and performed pilot studies of a prototype for asynchronous inspection of software artifacts. We hypothesize that an asynchronous inspection meeting model can replace the traditional face-to-face inspection model by allowing inspection teams to work together as effectively in different times as in the same time. Our implementation experience and pilot studies suggest that distribution across the time axis is feasible, but we have found that in some cases it is not as effective as face-to-face inspection. We recommend that asynchronous inspection be used as a complement to face-to-face inspection, and not its substitute. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Marc Andreesen. </author> <title> NCSA Mosaic technical summary. </title> <type> Technical report, </type> <institution> University of Illinois, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The World Wide Web project (W3) enjoys equal support among academic and industry institutions [2, 3]. W3 uses the hypertext paradigm to provide a seamless universe of network-accessible information to computer users. The National Center for Supercomputing Applications has developed client and server software for W3 project <ref> [1] </ref>. The client software, called Mosaic, is a networked information discovery, retrieval, and collaboration tool for wide-area distributed computing. It is capable of supporting multiple media, user-tracking, personal annotations, and document cross-linking. <p> The primary goal of this project is to provide a user on the Internet access to information on distributed hosts in a seamless fashion. We have chosen the National Center for Supercomputing Applications (NCSA) WWW client and server software <ref> [1] </ref> for implementing our prototype for asynchronous inspection. NCSA client software, called Mosaic, is a networked information discovery, retrieval, and collaboration tool for wide-area distributed computing. It is capable of supporting multiple media, user-tracking, personal annotations, and document cross-linking. <p> Environment: A strength of the Web [3] project is the variety of software and hardware platforms supported by it. There are many Web browsers for PC, Macintosh, and UNIX workstations. The participants in our pilot study took advantage of this strength by running Mosaic <ref> [1] </ref> browsers from Sun Sparc Stations located in computer laboratories at the University of Minnesota or dialed in remotely from their personal computers at home. Target Material: The target material in our pilot study was the object diagram for an Automatic Teller Machine (ATM).
Reference: [2] <author> Tim Berners-Lee, Robert Cailliau, Jean-Francois Groff, and Bernd Pollermann. </author> <title> WorldWide Web: </title> <journal> The Information Universe, </journal> <volume> volume 2, </volume> <pages> pages 52-58. </pages> <publisher> Meckler Publishing, </publisher> <address> West-port, CT, USA, </address> <year> 1992. </year> <note> Published in Electronic Networking: Research, Applications and Policy. </note>
Reference-contexts: The participants in the design process argue about these issues by suggesting positions and presenting argument in support of their positions. The World Wide Web project (W3) enjoys equal support among academic and industry institutions <ref> [2, 3] </ref>. W3 uses the hypertext paradigm to provide a seamless universe of network-accessible information to computer users. The National Center for Supercomputing Applications has developed client and server software for W3 project [1]. <p> forms, including popping up a reminder window, flashing the screen, beeping the terminal, sending conventional e-mail messages, computational e-mail messages to schedule an appointment on the participant's calendar, or displaying the inspection meeting on the participant's screen. 4 Implementation In the past few years, the World Wide Web (WWW) project <ref> [2, 3] </ref> has gained increasing visibility and support among academic and industry institutions. The primary goal of this project is to provide a user on the Internet access to information on distributed hosts in a seamless fashion.
Reference: [3] <author> Tim Berners-Lee, Robert Cailliau, Jean-Francois Groff, and Bernd Pollermann. </author> <title> The World Wide Web initiative. </title> <booktitle> In Proceedings of INET 93, </booktitle> <year> 1993. </year>
Reference-contexts: The participants in the design process argue about these issues by suggesting positions and presenting argument in support of their positions. The World Wide Web project (W3) enjoys equal support among academic and industry institutions <ref> [2, 3] </ref>. W3 uses the hypertext paradigm to provide a seamless universe of network-accessible information to computer users. The National Center for Supercomputing Applications has developed client and server software for W3 project [1]. <p> forms, including popping up a reminder window, flashing the screen, beeping the terminal, sending conventional e-mail messages, computational e-mail messages to schedule an appointment on the participant's calendar, or displaying the inspection meeting on the participant's screen. 4 Implementation In the past few years, the World Wide Web (WWW) project <ref> [2, 3] </ref> has gained increasing visibility and support among academic and industry institutions. The primary goal of this project is to provide a user on the Internet access to information on distributed hosts in a seamless fashion. <p> Two of the students had participated in computer-supported inspections prior to this pilot study. We appointed a more experienced student to be the moderator for the inspection meeting; two students played the reviewer's role; and the last, the producer's. Environment: A strength of the Web <ref> [3] </ref> project is the variety of software and hardware platforms supported by it. There are many Web browsers for PC, Macintosh, and UNIX workstations.
Reference: [4] <author> Sara A. Bly, Steve R. Harrison, and Susan Irwin. </author> <title> Media spaces: Bringing people together in a video, audio, and computing environment. </title> <journal> Communications of ACM, </journal> <volume> 36(1) </volume> <pages> 28-47, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: systems, networks, and user interface technology have helped Computer Supported Cooperative Work fl We gratefully acknowledge the support of the National Science Foundation (grant number N SF=IRI 9208546) and the research funds of the Graduate School of the University of Minnesota. 1 (CSCW) become a viable alternative to face-to-face meetings <ref> [4, 11, 35] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information [16]. Time is a major constraint in CSCW.
Reference: [5] <author> Barry Boehm. </author> <title> Industrial software metrics top 10 list. </title> <booktitle> In IEEE Software, </booktitle> <month> September </month> <year> 1987. </year> <month> 27 </month>
Reference-contexts: Boehm includes software inspection in his list of the ten most important approaches for improving the quality of software, saying, "Walkthroughs (inspection) catch 60 percent of the errors (faults)" <ref> [5] </ref>. Yourdon and Humphrey both developed widely used techniques for inspection [21, 37]. In both approaches, team members have specific roles: Reviewer, moderator, producer, and recorder. Participants individually prepare for the inspection, attend the inspection meeting, 2 Inspection, Conduct Inspection Meeting, and Post Inspection.
Reference: [6] <author> Nathaniel Borenstein. </author> <title> Computational mail as network infrastructure for Computer--Supported Cooperative Work. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Confernece, </booktitle> <pages> pages 67-74. </pages> <institution> Association for Computing Machinery, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: Multimedia e-mail systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive [7, 8]. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages <ref> [6] </ref>. Active messages interact with the recipients of the messages by taking different actions based on the recipients' responses. For instance, consider a computational message that arrives at the receiver's end and engages the recipient in a question/answer dialogue to ascertain whether the user is available for a meeting.
Reference: [7] <author> Nathniel Borenstein and Ned Freed. MIME: </author> <title> Multi-purpose Internet Mail Extensions. </title> <type> RFC 1521. </type>
Reference-contexts: Traditional e-mail systems 6 are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. Multimedia e-mail systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive <ref> [7, 8] </ref>. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages [6]. Active messages interact with the recipients of the messages by taking different actions based on the recipients' responses.
Reference: [8] <author> Nathniel Borenstein and Chris Thyberg. </author> <title> Power, ease of use, and cooperative work in a practical multimedia message system. </title> <journal> International Journal of Man-Machine Studies, </journal> <month> April </month> <year> 1991. </year>
Reference-contexts: Traditional e-mail systems 6 are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. Multimedia e-mail systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive <ref> [7, 8] </ref>. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages [6]. Active messages interact with the recipients of the messages by taking different actions based on the recipients' responses.
Reference: [9] <author> L. Brothers, V. Sembugamoorthy, and M. Miller. ICICLE: </author> <title> Groupware for code inspection. </title> <booktitle> In Proceedings of Computer Supported Cooperative Work, </booktitle> <pages> pages 169-181, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: As we study asynchrony in inspection meetings, it could be that eliminating face-to-face meetings is neither possible nor desirable. For instance, social interaction is regarded to be critical to the task of software inspection as currently formulated <ref> [9] </ref>, and this may be true for many types of meetings. Presently, our focus is on technical issues in asynchronous inspection. If our work is successful, it will make it possible for further investigation of the social changes introduced by asynchronous meeting models. <p> The computer-supported tools include InspeQ, ICICLE, CIA, and CSRS. InspeQ is a prototype that has been developed that provides computer support for the phased inspection process. The tool provides windows for displaying the work product, inspection checklist, and partici 7 pants' comments. ICICLE <ref> [9] </ref> is a system intended to support the set of tasks performed during code inspection. ICICLE assists individual users in the comment-preparation phase of code inspection. It provides a synchronous environment in the inspection meeting phase, with computer support providing a paperless meeting.
Reference: [10] <author> Jeffrey Conklin and Michale Begeman. gIBIS: </author> <title> A hypertext tool for exploratory policy discussion. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4), </volume> <month> October </month> <year> 1988. </year>
Reference-contexts: The information nodes in hypermedia systems may be of any type, including text, audio, graphics, and video. Graphical Issue Based Information System (gIBIS) is part of the Design Journal Project, which aims to capture the rationale for a software design <ref> [10] </ref>. gIBIS is a multi-user hypertext system, based on a theoretical model of the design process as a conversation among "stakeholders" who bring their respective expertise and viewpoints to bear on a number of design issues.
Reference: [11] <author> P. Cook, C. Ellia, M. Graf, Gail Rein, and T. Smith. Project Nick: </author> <title> Meeting augmentation and analysis. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(2), </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: systems, networks, and user interface technology have helped Computer Supported Cooperative Work fl We gratefully acknowledge the support of the National Science Foundation (grant number N SF=IRI 9208546) and the research funds of the Graduate School of the University of Minnesota. 1 (CSCW) become a viable alternative to face-to-face meetings <ref> [4, 11, 35] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information [16]. Time is a major constraint in CSCW.
Reference: [12] <author> Kevin Crowston and Thomas Malone. </author> <title> Intelligent software agents. </title> <journal> BYTE, </journal> <month> December </month> <year> 1988. </year>
Reference-contexts: A PREP document is divided into a number of columns, where a column may be linked to other columns, providing an unlimited amount of "virtual margins" for users to make comments. Electronic Mail Systems: A widely-used computer mechanism for supporting asynchronous and distributed collaboration is electronic mail (e-mail) <ref> [12] </ref>. Email allow users to compose, edit, delete, browse, save, archive, and send messages to groups of users. Traditional e-mail systems 6 are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers.
Reference: [13] <author> Alan Dennis, Joseph Valacich, and Jay Nunamaker. </author> <title> An experimental investigation of the effect of group size in an electronic meeting environment. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 20, </volume> <year> 1990. </year>
Reference-contexts: We are exploring the potential for asynchronous inspection, denoted by the shaded section (different-time, different-place) in Figure 2 [29]. 5 In addition to enhancing flexibility for the participants, asynchronous meetings may alleviate some of the problems that have been reported in synchronous meetings <ref> [13, 22] </ref>: Limited Air Time: Only one person can speak at a time, limiting the time each person can contribute. Production Blocking: Individuals have to withhold their contributions until they get a chance to report them.
Reference: [14] <author> Prasun Dewan and John Riedl. </author> <title> Toward computer-supported concurrent software engineering. </title> <booktitle> IEEE Computer, </booktitle> <month> January 93. </month>
Reference-contexts: Software engineering is a domain in which support for collaboration can be fruitfully explored. Collaboration is a requirement in many software engineering tasks including requirements analysis, design, programming, debugging, and testing <ref> [14] </ref>. For most software engineering projects, analysts, designers, implementors, and testers must work together through an iterative process to build a software artifact. Research has shown that interaction among team members accounts for a significant part of the total cost of software systems [19].
Reference: [15] <author> Paul Dourish and Victoria Bellotti. </author> <title> Awareness and coordination in shared workspaces. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Awareness comprises cognition of past and present activities of others and what is required of us in present and future to complete our task. It is used in helping participants match their contributions with the goals and objectives of the group as a whole <ref> [15] </ref>. We provide a common context for the asynchronous meeting by presenting knowledge about three basic elements of awareness: State of information, participants of the inspection meeting, and the overall progress of the task: Information: We maintain the present state of all information, along with its history of evolution.
Reference: [16] <author> Clarence Ellis, Simon Gibbs, and Gail Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 39-56, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information <ref> [16] </ref>. Time is a major constraint in CSCW. Relaxing the time constraint allows participants to work at a time of their choosing, providing a greater degree of freedom in their actions. Consider the case of a multi-national software engineering team in Japan and the United States. <p> The reader is invited to follow the evolution of these ideas in the subsequent sections. 1.4 Time Axis In general, collaborative meetings can be categorized by the two dimensions of space and time <ref> [16] </ref>. A same-time, same-place meeting is the current board-room type meeting where everyone congregates at a table, using pointers, overhead projectors, and handouts as meeting tools. A different-time, same-place environment might be a bulletin board in a publicly accessible room used for posting announcements. <p> Collaborative Editors: Several word processors and editors supporting collaboration and co-authoring exist today. Group Outline Viewing Editor (GROVE) is a real-time text editor designed for simultaneous editing of a shared outline by multiple users <ref> [16] </ref>. Users may have private (read by single user), public (read by all users), and shared (read by a subset of all users) views of the document being edited.
Reference: [17] <author> Michael Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM System Journal, </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <year> 1976. </year>
Reference-contexts: We have chosen software inspection as our representative software engineering task because it is widely-practiced and highly-structured. Software inspection is peer review of a software artifact, aimed at detecting and resolving faults <ref> [17] </ref>. The traditional model of inspection has a large synchronous component, requiring participants to attend the inspection meeting at the same time. The time constraint makes inspection meetings costly and consequently suitable for asynchronizing. 1.1 Hypotheses Our research is intended to explore the asynchrony abstraction for software engineering environment. <p> solutions in software inspection to be applicable to other software engineering tasks and can act as a first step in addressing our main conjecture. 1.2 Traditional Software Inspection Software inspection is a detailed review of a small amount of material by technically competent peers with the goal of detecting faults <ref> [17, 18] </ref>. Boehm includes software inspection in his list of the ten most important approaches for improving the quality of software, saying, "Walkthroughs (inspection) catch 60 percent of the errors (faults)" [5]. Yourdon and Humphrey both developed widely used techniques for inspection [21, 37].
Reference: [18] <author> Michael Fagan. </author> <title> Advances in software inspections. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(7) </volume> <pages> 744-751, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: solutions in software inspection to be applicable to other software engineering tasks and can act as a first step in addressing our main conjecture. 1.2 Traditional Software Inspection Software inspection is a detailed review of a small amount of material by technically competent peers with the goal of detecting faults <ref> [17, 18] </ref>. Boehm includes software inspection in his list of the ten most important approaches for improving the quality of software, saying, "Walkthroughs (inspection) catch 60 percent of the errors (faults)" [5]. Yourdon and Humphrey both developed widely used techniques for inspection [21, 37].
Reference: [19] <author> Gene Forte and Ronald Norman. </author> <title> A self-assessment by the software engineering community. </title> <journal> Communications of the ACM, </journal> <volume> 35(4) </volume> <pages> 28-32, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: For most software engineering projects, analysts, designers, implementors, and testers must work together through an iterative process to build a software artifact. Research has shown that interaction among team members accounts for a significant part of the total cost of software systems <ref> [19] </ref>. We have chosen software inspection as our representative software engineering task because it is widely-practiced and highly-structured. Software inspection is peer review of a software artifact, aimed at detecting and resolving faults [17].
Reference: [20] <author> John Gintell and Gerard Memmi. CIA: </author> <title> Collaborative Inspection Agent experience: Building a CSCW application for software engineering. </title> <booktitle> In Workshop on CSCW Tools, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: ICICLE assists individual users in the comment-preparation phase of code inspection. It provides a synchronous environment in the inspection meeting phase, with computer support providing a paperless meeting. Collaborative Inspection Agent (CIA) is a document inspection tool <ref> [20] </ref>. CIA uses ConversationBuilder [24] to develop a tool for synchronous inspection of all work products at various stages of the life cycle. It supports collaborative work by simultaneously displaying information on multiple user's screens, and allowing participants to play inspection roles.
Reference: [21] <author> Watts Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Boehm includes software inspection in his list of the ten most important approaches for improving the quality of software, saying, "Walkthroughs (inspection) catch 60 percent of the errors (faults)" [5]. Yourdon and Humphrey both developed widely used techniques for inspection <ref> [21, 37] </ref>. In both approaches, team members have specific roles: Reviewer, moderator, producer, and recorder. Participants individually prepare for the inspection, attend the inspection meeting, 2 Inspection, Conduct Inspection Meeting, and Post Inspection. <p> These roles are used to limit access to information and operations during the meeting. For instance, fault correlation is an activity that is only performed by the producer and not by other participants. Note that Humphrey <ref> [21] </ref> prescribes the additional role of a "scribe" (or recorder) in his inspection model. This role is redundant in our model since we automatically capture and present all the comments made by the participants in the structured history of the meeting. <p> component of the root graphical document, where each list contains the faults recorded by all participants collectively. 4.2 Fault Correlation During fault correlation, the producer integrates individual faults lists into an integrated fault list, eliminates duplicates, and arranges them by the order that they will be addressed in the inspection <ref> [21] </ref>. We implement fault correlation in two steps: (1) Local correlation of faults for each component document, and (2) Global correlation of all locally-correlated faults in the root document. <p> The potential for abuse 16 of a fault. may be higher in organizations where the management uses inspection for evaluating employees' performance. However, we emphasize that the primary purpose of inspection is the evaluation of the product and not the producer <ref> [21] </ref>. Merging two (or more) faults requires that their fields be somehow combined. Consider the simple case of two faults being merged. We merge the fields in the following way: Subject: List the first subject, followed by three dots, indicating the existence of the second subject line.
Reference: [22] <author> Charles McLaughlin Hymes and Gary Olson. </author> <title> Unblocking brainstorming through the use of a simple group editor. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <year> 1992. </year>
Reference-contexts: We are exploring the potential for asynchronous inspection, denoted by the shaded section (different-time, different-place) in Figure 2 [29]. 5 In addition to enhancing flexibility for the participants, asynchronous meetings may alleviate some of the problems that have been reported in synchronous meetings <ref> [13, 22] </ref>: Limited Air Time: Only one person can speak at a time, limiting the time each person can contribute. Production Blocking: Individuals have to withhold their contributions until they get a chance to report them.
Reference: [23] <author> Philip M. Johnson and Danu Tjahjono. </author> <title> Improving software quality through computer supported collaborative review. </title> <booktitle> In Proceedings of the Third European Conference on Computer Supported Cooperative Work. Association for Computing Machinery, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: CIA uses ConversationBuilder [24] to develop a tool for synchronous inspection of all work products at various stages of the life cycle. It supports collaborative work by simultaneously displaying information on multiple user's screens, and allowing participants to play inspection roles. Collaborative Software Review System (CSRS) <ref> [23] </ref> aims to decrease the required human effort in reviews, conduct inspection incrementally during the software development, and provide on-line capabilities to collect metrics on the inspection process and software artifacts. The system is implemented on top of EGRET, a multi-user, distributed, hypertext environment for asynchronous collaboration.
Reference: [24] <author> Simon Kaplan, William Tolone, Douglas Bogia, and Celsina Bignoli. </author> <title> Flexible, active support for collaborative work with ConversationBuilder. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: ICICLE assists individual users in the comment-preparation phase of code inspection. It provides a synchronous environment in the inspection meeting phase, with computer support providing a paperless meeting. Collaborative Inspection Agent (CIA) is a document inspection tool [20]. CIA uses ConversationBuilder <ref> [24] </ref> to develop a tool for synchronous inspection of all work products at various stages of the life cycle. It supports collaborative work by simultaneously displaying information on multiple user's screens, and allowing participants to play inspection roles.
Reference: [25] <author> John C. Knight and E. Ann Myers. </author> <title> An improved inspection technique. </title> <journal> Communications of the ACM, </journal> <volume> 36(11) </volume> <pages> 51-61, </pages> <month> November </month> <year> 1993. </year> <month> 28 </month>
Reference-contexts: In the phased inspection method, reviewers examine the work in a series of small inspections (also called phases), each of which aims at verifying that the product satisfies some desirable properties <ref> [25] </ref>. The properties examined are ordered such that each phase can assume the existence of properties checked in the earlier phases. The computer-supported tools include InspeQ, ICICLE, CIA, and CSRS. InspeQ is a prototype that has been developed that provides computer support for the phased inspection process.
Reference: [26] <author> Michael Knister and Atul Prakash. DistEdit: </author> <title> A distributed toolkit for supporting mul-tiple group editors. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: Standard editing operations such as insert, delete, cut, and paste are supported, the results of which are observed by all other participants simultaneously. DistEdit is a distributed toolkit for building interactive group editors <ref> [26] </ref>. The requirements for DistEdit are supporting multiple users, achieving reasonable performance in presenting a consistent view to all users, compatibility with multiple, existing editors, tolerance in face of machine crashes, and dynamic join and departure of people.
Reference: [27] <author> Johnny Martin and Wei-Tek Tsai. </author> <title> N-Fold inspection: A requirements analysis technique. </title> <journal> Communications of the ACM, </journal> <volume> 33(2) </volume> <pages> 225-232, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: The N-fold inspection technique replicates the formal inspection method using N independent teams working in parallel under the control of a single moderator <ref> [27] </ref>. Each team is provided with a checklist and asked to analyze the software artifact. A fault may be detected by several teams, but the moderator gathers and records only the independent faults.
Reference: [28] <author> Vahid Mashayekhi, Janet Drake, Wei-Tek Tsai, and John Riedl. </author> <title> Distributed collaborative software inspection. </title> <journal> IEEE Software, </journal> <pages> pages 66-75, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: This organization introduces a user-defined structure for a document that otherwise lacks linear structure. The division may be applied recursively to yield manageable pieces from a large, complex design document for the purpose of inspection. Adding to the Information Space: Our experience with the hypertext paradigm <ref> [28, 29] </ref> has shown the model of a traversable network of information nodes to be a powerful way of capturing and adding to an information space.
Reference: [29] <author> Vahid Mashayekhi, Chris Feulner, and John Riedl. </author> <title> CAIS: Collaborative Asynchronous Inspection of Software. </title> <booktitle> In The Second ACM SIGSOFT Symposium on the Foundations of Software Engineering. Association of Computing Machinery, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: The inspection meeting process (top half), consists of all participants discussing the correlated fault list generated by the reviewers. Traditional centralized inspection meetings cover the back left octant (same-time, same-place). We are exploring the potential for asynchronous inspection, denoted by the shaded section (different-time, different-place) in Figure 2 <ref> [29] </ref>. 5 In addition to enhancing flexibility for the participants, asynchronous meetings may alleviate some of the problems that have been reported in synchronous meetings [13, 22]: Limited Air Time: Only one person can speak at a time, limiting the time each person can contribute. <p> Our previous work in this area has focused on applying asynchronous inspection model to software artifacts produced in the coding and requirements analysis phases of the software development <ref> [29] </ref>. These artifacts are usually textual documents, such as code written in a programming language like Pascal or a software requirements document listing the system's requirements, constraints, and functionalities. <p> they need to do in the present to meet the objectives of the group. 3.2 Design Elements In the following three sub-sections, we will discuss our design elements separately, concentrating on the changes and additions made to them as the result of work on our first prototype for asynchronous inspection <ref> [29] </ref> and present our scheme for supporting inspection of graphical documents: 3.2.1 Shared Information Space The shared information space plays a pivotal role in asynchronous inspection by presenting a causal and temporal ordering of the inspection activities, imposing a structure onto the meeting activities and artifacts, organizing the target material into <p> In the following, we address each point mentioned above: Causal Ordering of Activities: In a previous iteration of our design <ref> [29] </ref>, we supported only the temporal ordering of events. Subsequent pilot studies indicated that participants preferred to have both temporal and causal orders of events kept. <p> Structuring the Inspection Meeting: Our earlier design fixed the inspection meeting statically, whereby only discussions on faults discovered during the fault collection phase were allowed in the meeting. Subsequent pilot studies revealed that participants discovered new faults during the asynchronous inspection meeting that needed to be addressed <ref> [29] </ref>. Our present design supports a dynamic meeting structure, whereby new faults may be introduced and discussed during any phase of the inspection process. Organizing the Target Material: Textual documents can be divided into their physical parts, like pages, paragraphs, and lines of code. <p> This organization introduces a user-defined structure for a document that otherwise lacks linear structure. The division may be applied recursively to yield manageable pieces from a large, complex design document for the purpose of inspection. Adding to the Information Space: Our experience with the hypertext paradigm <ref> [28, 29] </ref> has shown the model of a traversable network of information nodes to be a powerful way of capturing and adding to an information space. <p> As part of the pre-inspection preparation, the producer is responsible for determining the logical components of the graphical target material based on her intimate knowledge and understanding of it. Grouping Interrelated Faults: During our earlier pilot study <ref> [29] </ref>, our participants noted their desire for grouping related faults and addressing them as a single logical fault. We introduce the notion of a "composite" fault, which is a new entity created from merging a number of related, interdependent faults that share common properties. <p> Note that Humphrey [21] prescribes the additional role of a "scribe" (or recorder) in his inspection model. This role is redundant in our model since we automatically capture and present all the comments made by the participants in the structured history of the meeting. Our previous design <ref> [29] </ref> did not support the notion of roles, leading to situations where a less-privileged participant would unknowingly perform an operation only intended for a more-privileged participant. <p> Decision by Lack of Response occurs when a participant suggests an idea (not a formal proposal), which goes un-answered by others. The lack of response by others in effect implies the rejection of that idea. In an earlier design cycle <ref> [29] </ref>, we decided to support Unanimity and Consensus methods. However, we discovered that meetings could be tied up by a slow participant. To avoid having meetings prolonged unnecessarily this way, in the current design we allow a majority of votes to decide the status of a proposal.
Reference: [30] <author> Chris Neuwirth, David Kaufer, Ravinder Chandhok, and James Morris. </author> <title> Computer support for distributed collaborative writing: Defining parameters of interaction. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 145-153. </pages> <institution> Association for Computing Machinery, </institution> <year> 1994. </year>
Reference-contexts: The PREP editor is a multi-user environment that supports co-authoring and commenting relationships <ref> [30] </ref>. A PREP document is divided into a number of columns, where a column may be linked to other columns, providing an unlimited amount of "virtual margins" for users to make comments. Electronic Mail Systems: A widely-used computer mechanism for supporting asynchronous and distributed collaboration is electronic mail (e-mail) [12].
Reference: [31] <author> David L. Parnas and David M. Weiss. </author> <title> Active design reviews: Principles and practices. </title> <journal> Journal of Systems and Software, </journal> <volume> 7 </volume> <pages> 259-265, </pages> <year> 1987. </year>
Reference-contexts: The formal inspection techniques include Active Design Reviews, N-phase inspection, and phased inspection. Active Design Reviews is a new approach for reviewing design documents, where a small group of reviewers use questionnaires to study the design artifact and record both positive and negative comments <ref> [31] </ref>. The questionnaires are provided by the producers and are meant to enable the reviewers to take a more active role in the inspection process and focus their attention on a particular aspect of the design.
Reference: [32] <author> John Riedl, Vahid Mashayekhi, Jim Schnepf, Mark Claypool, and Dan Frankowski. Suite-sound: </author> <title> A system for distributed collaborative multimedia. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <pages> pages 600-610, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: A different-time, same-place environment might be a bulletin board in a publicly accessible room used for posting announcements. An example of a same-time, different-place meeting would be a teleconferencing system supporting audio and video, allowing the meeting to take place with members in different locations <ref> [32] </ref>. Conceptually, a different-time, different-place meeting would enable participants to work together at the time and place of their choosing. An example is the e-mail systems, but existing implementations of structured activities are scarce. <p> Finally, we support the Decision by Lack of Response method by allowing those faults whose resolution are difficult to obtain asynchronously to be sent to the synchronous meeting. 3.2.3 Communications In synchronous meetings, we rely on audio-visual information for gathering knowledge about the state of data, people, and task <ref> [32] </ref>. For instance, during the vote-taking phase of a meeting, all participants cast their votes to determine the status of a proposal. Casting of a vote by everyone is an incremental step toward the completion of the task and ensures progress.
Reference: [33] <author> James Rumbaugh, Micahel Blaha, William Premerlani, Frederick Eddy, and William Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Target Material: The target material in our pilot study was the object diagram for an Automatic Teller Machine (ATM). The problem description, data dictionary, associations, and object diagram for this problem were borrowed from the solution part of the Software Engineering textbook, "Object-Oriented Modeling and Design" <ref> [33] </ref>. We thoroughly examined the object for correctness. Subsequently, we seeded 10 faults in the object diagram and asked the participants to inspect the resulting object diagram.
Reference: [34] <author> Beatrice Schultz. </author> <title> Communicating in the Small Group: Theory and Practice. </title> <publisher> Harper and Row, </publisher> <year> 1989. </year>
Reference-contexts: We therefore include a "moderator role", with certain privileged operations. 3.2.2 Group Decision-Making Once a proposal is put forth by an inspection member, group members need to decide its status. We consider the following set of group decision-making methods for software inspection <ref> [34] </ref>: 11 Unanimity means that all inspection participants must agree with one alternative and assumes that the agreed upon alternative achieves the optimal outcome for everyone. Consensus is similar to the unanimity process, with the added element of compromise.
Reference: [35] <author> Mark Stefik, Gregg Foster, Daniel Bobrow, Kenneth Kahn, Stan Lanning, and Lucy Such-man. </author> <title> Beyond the chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: systems, networks, and user interface technology have helped Computer Supported Cooperative Work fl We gratefully acknowledge the support of the National Science Foundation (grant number N SF=IRI 9208546) and the research funds of the Graduate School of the University of Minnesota. 1 (CSCW) become a viable alternative to face-to-face meetings <ref> [4, 11, 35] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information [16]. Time is a major constraint in CSCW.
Reference: [36] <author> Robert A. Virzi. </author> <title> Refining the test phase of usability evaluation: How many subjects is enough. </title> <booktitle> Human Factors, </booktitle> <volume> 34(4) </volume> <pages> 457-468, </pages> <year> 1992. </year>
Reference-contexts: A sample size of 4 was chosen as recent research has shown that 80% of a system's usability problems can be ascertained with 4 or 5 test users <ref> [36] </ref>. Three participants were Ph.D. candidates, and the other M.S. Their industrial experience ranged from one and a half years to eleven years, with the same wide distribution in software inspection practice. Two of the students had participated in computer-supported inspections prior to this pilot study.
Reference: [37] <author> Edward Yourdon. </author> <title> Structured Walkthrough. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year> <month> 29 </month>
Reference-contexts: Boehm includes software inspection in his list of the ten most important approaches for improving the quality of software, saying, "Walkthroughs (inspection) catch 60 percent of the errors (faults)" [5]. Yourdon and Humphrey both developed widely used techniques for inspection <ref> [21, 37] </ref>. In both approaches, team members have specific roles: Reviewer, moderator, producer, and recorder. Participants individually prepare for the inspection, attend the inspection meeting, 2 Inspection, Conduct Inspection Meeting, and Post Inspection.
References-found: 37

