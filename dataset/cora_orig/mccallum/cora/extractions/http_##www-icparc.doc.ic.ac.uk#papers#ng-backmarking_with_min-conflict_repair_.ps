URL: http://www-icparc.doc.ic.ac.uk/papers/ng-backmarking_with_min-conflict_repair:.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: -yj, etr, ebr-@doc.ic.ac.uk  
Title: Ng-backmarking an algorithm for constraint satisfaction  
Author: Thomas Richards, Yuejun Jiang, Barry Richards 
Keyword: Constraint satisfaction and optimisation, backjumping, backmarking, learning while searching, repair-based techniques, no-good recording, and no-good justifications.  
Address: London SW7 2BZ England  
Affiliation: IC-Parc Imperial College  
Abstract: Ng-backmarking with Min-conflict repair, a hybrid algorithm for solving constraint satisfaction problems, is presented in the context of the four main approaches to constraint satisfaction and optimisation: treesearch, domain-filtering, solution repair, and learning while searching. Repair-based techniques are often designed to use local gradients to direct the search for a solution to a constraint satisfaction problem. It has been shown experimentally that such techniques are often well suited to solving large scale problems. One drawback is that they do not guarantee a (optimal) solution if one exists. The motivation behind ng-backmarking is to allow the search to follow local gradients in the search space whilst ensuring a (optimal) solution if one exists. The search space of this combined approach is controlled by the ng-backmarking process, a method of learning constraints during search (at each failure point 1 ) that may be used to avoid the repeated traversing of failed paths in a search tree. In order to control the space of these learned constraints or 'no-goods' we must assess what information can be learned on discovery of a failure by studying the constraints of the CSP (constraint satisfaction problem). To support dynamic constraint satisfaction 2 we introduce a strategy for maintaining the set of no-goods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R Dechter, </author> <title> "Enhancement Schemes for Constraint Processing: Backjumping, Learning and Cutset Decomposition", </title> <journal> Artificial Intelligence, </journal> <volume> Vol 41, </volume> <year> 1989 </year>
Reference-contexts: These are called no-goods [10]. This information is used to prune the subsequent search space. It has been shown that the technique of learning search knowledge from inconsistencies is equivalent to making some subset of the set of paths in the constraint hypergraph of a CSP path consistent <ref> [1] </ref>. This paper is concerned with presenting and understanding ng-backmarking, a learning algorithm with a repair-based method, min-conflict repair. Ng-backmarking is then discussed and compared with learning algorithms combined with treesearch techniques.
Reference: [2] <author> R Dechter, </author> <title> "Dead-end driven Learning", </title> <booktitle> Proceedings AAAI-94, </booktitle> <year> 1994 </year>
Reference-contexts: Learning techniques have been combined with many systematic search procedures where variables are assigned in a particular order. These are known as backtrack-with-learning algorithms. There follows a description of conflict-directed backjumping with jump-back learning <ref> [2] </ref>, an example of systematic search with learning, using the above framework. The systematic search used in the following is known as conflict-directed backjumping. Given a consistent labelling to some subset of the set of variables of a CSP, 5 backjumping attempts to extend this to a complete labelling.
Reference: [3] <author> E Freuder and R Wallace, </author> <title> "Partial constraint satisfaction", </title> <journal> Artificial Intelligence, </journal> <volume> Vol 52, </volume> <year> 1992 </year>
Reference-contexts: Backtracking may be chronological, backtracking to the most recently labelled variable, or intelligent (backjumping, backmarking etc.) [8]. Treesearch follows the paths of the search space in a regular fashion by constructing and extending consistent incomplete labellings <ref> [3] </ref>. Domain-filtering algorithms seek to remove values from the domains of variables before labelling. This requires consistency rules, rules for comparing the values in the variable domains. Consistency rules that have proved successful do not complete the constraint hypergraph. Examples include arc-consistency and path-consistency [5].
Reference: [4] <author> M Ginsberg, </author> <title> "GSAT and Dynamic Backtracking", </title> <booktitle> Principles and pratices in Constraint Programming, </booktitle> <year> 1994 </year>
Reference-contexts: Then by merging we get a third no-good ng 3 = ng i -X -, c i = -(Y,1),(Z,2)- , -C (X,Y),C (X,Z)- 6 Conclusions A similar technique to ng-backmarking has been developed called partial order dynamic backtracking <ref> [4] </ref>. The motivations for this algorithm are the same as for ng-backmarking, namely, allowing the search to follow local gradients in the search space while retaining the guarantee of a solution if one exists.
Reference: [5] <author> A Mackworth, </author> <title> "Consistency in networks of relations", </title> <journal> Artificial Intelligence, </journal> <volume> Vol 8, </volume> <year> 1977 </year>
Reference-contexts: Domain-filtering algorithms seek to remove values from the domains of variables before labelling. This requires consistency rules, rules for comparing the values in the variable domains. Consistency rules that have proved successful do not complete the constraint hypergraph. Examples include arc-consistency and path-consistency <ref> [5] </ref>.
Reference: [6] <author> S Minton, M Johnson, A Philips and P Laird, </author> <title> "Minimising conflicts: a heuristic repair method for constraint satisfaction and scheduling problems", </title> <journal> Artificial Intelligence, </journal> <volume> Vol 58, </volume> <year> 1992 </year>
Reference-contexts: Given an inconsistent labelling repair-based techniques attempt to alter the labelling in some way to reduce inconsistencies. The min-conflict repair operator switches the value of a single variable involved in a violated constraint in order to reduce the overall number of conflicts <ref> [6] </ref>. It has been found that repair-based techniques are often suited to problems with a large solution space (high ratio of solutions to labellings). For such problems they often find 'good' solutions in short time, relative to other techniques. <p> The variable and value selection heuristics of ng-backmarking are based on the min-conflicts heuristic <ref> [6] </ref>. Given the above notation it is possible to define this selection heuristic.
Reference: [7] <editor> B Nadel, </editor> <title> "Constraint satisfaction algorithms", </title> <journal> Computational Intelligence, </journal> <volume> Vol 8, No 4, </volume> <year> 1989 </year>
Reference-contexts: Consistency rules that have proved successful do not complete the constraint hypergraph. Examples include arc-consistency and path-consistency [5]. Domain-filtering is performed together with treesearch, a variable is labelled and then the subsequent or future variable domains are reduced <ref> [7] </ref>. 1 A failed labelling either violates some constraints or cannot be extended to a solution 2 In a dynamic CSP constraints may be added delete or modified 2 Repair-based algorithms work on (usually complete) labellings using some 're-labelling' operation.
Reference: [8] <author> P Prosser, </author> <title> "Hybrid algorithms for the constraint satisfaction problem", </title> <journal> Computational Intelligence, </journal> <volume> Vol 9, </volume> <year> 1993 </year>
Reference-contexts: Treesearch is the incremental extension of consistent labellings. On the discovery of a failure treesearch techniques backtrack and attempt to relabel variables. Backtracking may be chronological, backtracking to the most recently labelled variable, or intelligent (backjumping, backmarking etc.) <ref> [8] </ref>. Treesearch follows the paths of the search space in a regular fashion by constructing and extending consistent incomplete labellings [3]. Domain-filtering algorithms seek to remove values from the domains of variables before labelling. This requires consistency rules, rules for comparing the values in the variable domains.
Reference: [9] <author> T Schiex and G Verfaillie, </author> <title> "No-good recording for static and dynamic constraint satisfaction problems", </title> <booktitle> Proceedings of the 5th IEEE international Conference on Tools with Artificial Intelligence, </booktitle> <year> 1993 </year>
Reference-contexts: However if constraints are deleted then certain no-goods may have to be removed to maintain the consistency of the no-good set with respect to the new CSP. To deal with such a dynamic environment the supporting constraints are attached to the no-goods <ref> [9] </ref>. A new notation is required to represent no-goods in the dynamic environment. Definition 5.2 No-goods for dynamic CSPs Given a dynamic CSP no-goods represent labellings to variables that cannot be extended to a solution. They involve a constraint set which support the no-good.
Reference: [10] <author> R M Stallman and G J Sussman, </author> <title> "Forward reasoning and dependency directed backtracking in a system for computer aided circuit analysis", </title> <journal> Artificial Intelligence, </journal> <volume> Vol 9, </volume> <year> 1977 </year>
Reference-contexts: The learning is based on generating and recording labellings to subsets of the set of variables in a CSP that cannot be extended to a solution. These are called no-goods <ref> [10] </ref>. This information is used to prune the subsequent search space. It has been shown that the technique of learning search knowledge from inconsistencies is equivalent to making some subset of the set of paths in the constraint hypergraph of a CSP path consistent [1].
Reference: [11] <author> P Van Hentenryck, </author> <title> "Constraint Satisfaction in Logic Programming", </title> <publisher> MIT Press, </publisher> <year> 1989 </year>
References-found: 11

