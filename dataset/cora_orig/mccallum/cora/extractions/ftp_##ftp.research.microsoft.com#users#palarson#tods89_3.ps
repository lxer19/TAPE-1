URL: ftp://ftp.research.microsoft.com/users/palarson/tods89_3.ps
Refering-URL: http://www.research.microsoft.com/~palarson/publications.htm
Root-URL: http://www.research.microsoft.com
Title: Updating Derived Relations: Detecting Irrelevant and Autonomously Computable Updates  
Author: Jose A. Blakeley Neil Coburn Per -Ake Larson 
Keyword: Categories and Subject Descriptions: H.2.0[Database Management]:General-security, integrity, protection H.2.1[Database Management]:Logical Design-schema and subschema, H.2.2[Database Management]:Physical Design-access methods, H.2.4[Database Management]:Systems-query processing General Terms: Theory, Algorithms Additional Key Words and Phrases: Database design, Relational databases, Conceptual relations, Stored relations, Pre-joined relations, Derived relations, Materialized views  
Address: Waterloo, Canada  
Affiliation: University of  
Abstract: Consider a database containing not only base relations but also stored derived relations (also called materialized or concrete views). When a base relation is updated, it may also be necessary to update some of the derived relations. This paper gives sufficient and necessary conditions for detecting when an update of a base relation cannot affect a derived relation (an irrelevant update), and for detecting when a derived relation can be correctly updated using no data other than the derived relation itself and the given update operation (an autonomously computable update). The class of derived relations considered is restricted to those defined by PSJ-expressions, that is, any relational algebra expression constructed from an arbitrary number of project, select and join operations (but containing no self-joins). The class of update operations consists of insertions, deletions, and modifications, where the set of tuples to be deleted or modified is specified by a selection condition on attributes of the relation being updated. fl Reference [5] is an early and incomplete version of this paper. Reference [6] contains some implementation details and experimental results not reported here. y This research was supported by Cognos, Inc., Ottawa under contract WRI 502-12, by the National Council of Science and Technology of Mexico (CONACYT), by a Natural Sciences and Engineering Research Council of Canada (NSERC) Postgraduate Scholarship and under NSERC grant No. A-2460. Authors' addresses: J.A. Blakeley, Computer Science Department, Indiana University, Bloomington, Indiana, 47405-4101 U.S.A.; N. Coburn and P. A. Larson, Department of Computer Science, University of Waterloo, Waterloo, Ontario, N2L 3G1 Canada. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Michel E. Adiba and Bruce G. Lindsay. </author> <title> "Database Snapshots." </title> <booktitle> In Proc. of the 6th. International Conference on Very Large Databases, </booktitle> <address> (Montreal, </address> <year> 1980), </year> <pages> 86-91. </pages>
Reference-contexts: If the request is submitted at a remote site, then we need to send only the update request itself to the site of the derived relation. As well, the results presented here provide a starting point for devising a general mechanism for database snapshot refresh <ref> [1, 7, 15] </ref>. 2 NOTATION AND BASIC ASSUMPTIONS 4 In the next section we outline the assumptions and notation used in this paper.
Reference: [2] <author> D.S. Batory. </author> <title> "Modeling the Storage Architectures of Commercial Database Systems." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 10, No. 4, </volume> <month> (December </month> <year> 1985), </year> <pages> 463-528. </pages>
Reference-contexts: In current systems there is, typically, a one-to-one correspondence, in terms of data contents, between conceptual relations and stored relations. (However, an implementation may map stored relations into physical files in various ways, see <ref> [2] </ref>.) This is a simple and straightforward solution, but its drawback is that the processing of a query often requires data to be collected from several stored relations. Instead of directly storing each conceptual relation, we propose structuring the stored database as a set of derived relations.
Reference: [3] <author> Philip A. Bernstein and Barbara T. Blaustein. </author> <title> "A Simplification Algorithm for Integrity Assertions and Concrete Views." </title> <booktitle> In Proc. </booktitle> <address> COMPSAC 81 , (Chicago, </address> <year> 1981), </year> <pages> 90-99. </pages>
Reference-contexts: In the work by Buneman and Clemons [8], on the support of triggers and alerters, they are called readily ignorable updates and in the work by Bernstein and Blaustein <ref> [3] </ref>, on the support of integrity constraints, they are called trivial tests. Maier and Ullman [17] study updates to relation fragments. In their work a fragment may be a physical or virtual relation over a single relation scheme, defined by selection and union operators on physical or other virtual relations.
Reference: [4] <author> Jose A. Blakeley. </author> <title> Updating Materialized Database Views. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1987. </year>
Reference-contexts: In this paper we concentrate only on the study of unconditionally autonomously computable updates, hence, we will often omit the word "unconditionally". For results on conditionally autonomously computable updates the reader is referred to <ref> [4] </ref>. Definition 4.1 Consider a derived relation definition E and an update operation U , both defined over the database scheme D. Let d denote an instance of D before applying U and d 0 the corresponding instance after applying U .
Reference: [5] <author> Jose A. Blakeley, Neil Coburn, and Per -Ake Larson. </author> <title> "Updating Derived Relations: Detecting Irrelevant and Autonomously Computable Updates." </title> <booktitle> In Proc. of the 12th International Conference on Very Large Data Bases, </booktitle> <address> (Kyoto, </address> <year> 1986), </year> <pages> 457-466. </pages>
Reference-contexts: Again, the theory developed makes no other assumptions about update functions than that they are (computable) functions on the attributes in R u . However, in practice, additional restrictions must be placed on them in order to be able to actually test the conditions. Note that in <ref> [5] </ref> we considered a more general class of update operations where the selection condition of DELETE and MODIFY operations may involve attributes in relations other than R u . (Autonomously computable modifications were not considered in detail in [5].) Further work revealed that the results presented in [5] do not always <p> Note that in <ref> [5] </ref> we considered a more general class of update operations where the selection condition of DELETE and MODIFY operations may involve attributes in relations other than R u . (Autonomously computable modifications were not considered in detail in [5].) Further work revealed that the results presented in [5] do not always hold for this more general class. However, the results are valid if the selection condition involves only attributes from R u . This is the class of update operations considered in this paper. <p> Note that in <ref> [5] </ref> we considered a more general class of update operations where the selection condition of DELETE and MODIFY operations may involve attributes in relations other than R u . (Autonomously computable modifications were not considered in detail in [5].) Further work revealed that the results presented in [5] do not always hold for this more general class. However, the results are valid if the selection condition involves only attributes from R u . This is the class of update operations considered in this paper. Conditions are Boolean expressions built from atomic conditions and logical connectives. <p> Since, C ms <ref> [hh; 5; 19; k; li] </ref> is not satisfiable we conclude that h5; 19i will not be visibly modified and can be placed in the new instance. The second tuple to test from v (E; d) is hh; 22; 16; k; li.
Reference: [6] <author> Jose A. Blakeley, Neil Coburn, and Per -Ake Larson. </author> <title> "Updating Derived Relations: Detecting Irrelevant and Autonomously Computable Updates." </title> <type> Technical Report No.235, </type> <institution> Computer Science Department, Indiana University (1987). </institution>
Reference-contexts: The results obtained from experiments using the prototype are encouraging. It appears that, in practice, the tests for irrelevant and autonomously computable updates can be computed very efficiently. Interested readers are referred to <ref> [6] </ref> for more details on implementation issues and experimental results. An important open problem is to find efficient algorithms for more general types of atomic conditions. The core of such an algorithm is a procedure for testing whether a set of inequalities/equalities can all be simultaneously satisfied.
Reference: [7] <author> Jose A. Blakeley, Per -Ake Larson, and Frank Wm. Tompa. </author> <title> "Efficiently Updating Materialized Views." </title> <booktitle> In Proc. of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> (Washington, </address> <year> 1986), </year> <pages> 61-71. </pages>
Reference-contexts: If the request is submitted at a remote site, then we need to send only the update request itself to the site of the derived relation. As well, the results presented here provide a starting point for devising a general mechanism for database snapshot refresh <ref> [1, 7, 15] </ref>. 2 NOTATION AND BASIC ASSUMPTIONS 4 In the next section we outline the assumptions and notation used in this paper.
Reference: [8] <author> O. Peter Buneman and Eric K. Clemons. </author> <title> "Efficiently Monitoring Relational Databases." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 4, No. 3, </volume> <month> (September </month> <year> 1979), </year> <pages> 368-382. </pages>
Reference-contexts: The query transformation problem has been addressed in papers by Larson and Yang [14, 20, 21]. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons <ref> [8] </ref> proposed using views (that is, virtual derived relations) for the support of alerters. An alerter monitors the database and reports when a certain state (defined by the view associated with the alerter) has been reached. Hammer and Sarin [13] proposed a method for detecting violations of integrity constraints. <p> If I 6= K, the first term of the consequent is always satisfied. Hence, the implication is valid and we conclude that the update is irrelevant to the derived relation. 2 The idea of detecting irrelevant updates is not new. In the work by Buneman and Clemons <ref> [8] </ref>, on the support of triggers and alerters, they are called readily ignorable updates and in the work by Bernstein and Blaustein [3], on the support of integrity constraints, they are called trivial tests. Maier and Ullman [17] study updates to relation fragments.
Reference: [9] <author> Neil Coburn. </author> <title> Updating Derived Relations. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1988. </year>
Reference: [10] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ledin, D. McCarthy, A. Rosenthal, S. Sarin, M.J. Carey, M. Livny, and R. Jauhari. </author> <title> "The HiPAC Project: Combining Active Databases and Timing Constraints." </title> <booktitle> Sigmod Record , Vol. </booktitle> <volume> 17, No. 1, </volume> <month> (March </month> <year> 1988), </year> <pages> 51-70. </pages>
Reference-contexts: The use of derived relations for the support of real-time queries was suggested by Gardarin et al. [12] and by Dayal et al. <ref> [10] </ref>. Stonebraker et al. [19] suggest that the results of database procedures be stored for future use; updating the stored results is similar to updating a derived relation. Our results have direct application in each these areas. <p> C of a derived relation is C (H &gt; 30) ^ (I = J), then C (F M ) (H + 20 &gt; 30) ^ (15 = J): 3 IRRELEVANT UPDATES 10 Assuming that the domains of the variables H, I, and J are given by the ranges [0; 50], <ref> [10; 100] </ref>, and [10; 100], respectively, we obtain: C B (F M ) (H + 20 0) ^ (H + 20 50) ^ (15 10) ^ (15 100) ^ (J 10) ^ (J 100): We make no assumptions about the types of update functions allowed. <p> derived relation is C (H &gt; 30) ^ (I = J), then C (F M ) (H + 20 &gt; 30) ^ (15 = J): 3 IRRELEVANT UPDATES 10 Assuming that the domains of the variables H, I, and J are given by the ranges [0; 50], <ref> [10; 100] </ref>, and [10; 100], respectively, we obtain: C B (F M ) (H + 20 0) ^ (H + 20 50) ^ (15 10) ^ (15 100) ^ (J 10) ^ (J 100): We make no assumptions about the types of update functions allowed.
Reference: [11] <author> Robert W. Floyd. </author> <title> "Algorithm 97: Shortest Path." </title> <journal> Communications of the ACM , Vol. </journal> <volume> 5, No. 6, </volume> <month> (June </month> <year> 1962), </year> <month> 345. </month>
Reference-contexts: Hence, in either case we can proceed by testing satisfiability. Rosenkrantz and Hunt [18] gave an algorithm for testing the satisfiability of conjunctive Boolean expressions where the atomic conditions come from a restricted class. Their algorithm is based on Floyd's all-pairs-shortest-path algorithm <ref> [11] </ref> and therefore has an O (n 3 ) worst case complexity, where n is the number of distinct variables in the expression. The algorithm presented here is a modification of that given by Rosenkrantz and Hunt; there are three main differences. <p> As the reduction process requires examining each element of matrix A at most once, the entire Satisfiable algorithm performs O (n 2 N ) operations in this case. (Step 6) If G is not acyclic then A is used as the input to a modified version of Floyd's algorithm <ref> [11] </ref> to determine either that N is unsatisfiable or to produce an assignment which satisfies N . The idea is that we give each remaining variable, x i , an initial trial value equal to its (possibly modified) upper bound U [i].
Reference: [12] <author> G. Gardarin, E. Simon, and L. Verlaine. </author> <title> "Querying Real Time Relational Data Bases." </title> <booktitle> In IEEE-ICC International Conference, </booktitle> <address> (Amsterdam, </address> <year> 1984), </year> <pages> 757-761. </pages>
Reference-contexts: The use of derived relations for the support of real-time queries was suggested by Gardarin et al. <ref> [12] </ref> and by Dayal et al. [10]. Stonebraker et al. [19] suggest that the results of database procedures be stored for future use; updating the stored results is similar to updating a derived relation. Our results have direct application in each these areas.
Reference: [13] <author> Michael Hammer and Sunil K. Sarin. </author> <title> "Efficient Monitoring of Database Assertions." </title> <booktitle> In Supplement Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <address> (Austin, </address> <year> 1978), </year> <month> 159. </month>
Reference-contexts: Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters. An alerter monitors the database and reports when a certain state (defined by the view associated with the alerter) has been reached. Hammer and Sarin <ref> [13] </ref> proposed a method for detecting violations of integrity constraints. Certain types of integrity constraints can be seen as defining a view.
Reference: [14] <author> Per -Ake Larson and H.Z. Yang. </author> <title> "Computing Queries from Derived Relations." </title> <booktitle> In Proc. of the 11th International Conference on Very Large Data Bases, </booktitle> <address> (Stockholm, </address> <year> 1985), </year> <pages> 259-269. REFERENCES 34 </pages>
Reference-contexts: The same type of transformation is necessary to process user queries. That is, any query posed against the conceptual relations must be transformed into an equivalent query against the stored relations. The query transformation problem has been addressed in papers by Larson and Yang <ref> [14, 20, 21] </ref>. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters. <p> This contradicts the conditions given and proves the lemma. 2 4.1 Basic concepts The concepts covered by the following definitions are required in the rest of this section. They were originally introduced by Larson and Yang <ref> [14] </ref>. Definition 4.2 Let C 0 and C 1 be Boolean expressions over the variables x 1 ; x 2 ; : : : ; x n . <p> This is done by assigning surrogate values to the variables x 1 ; x 2 ; : : : ; x k as explained by Larson and Yang <ref> [14] </ref>. Example 4.1 Let C 1 (H &gt; 5) and C 0 (H &gt; 0)(I = 5)(J &gt; 10). <p> A procedure for computing uniquely determined values can be found in <ref> [14] </ref> and in more detail in [20]. It is similar to the way surrogate values are derived for computationally nonessential variables. If the variable y i is not uniquely determined, then we cannot guarantee that its value is reconstructible for every tuple. <p> Then A + = A [A E is called the extended attribute set of E. 2 Larson and Yang <ref> [14] </ref> proved that A + is the maximal set of attributes for which values can be reconstructed for every tuple of E.
Reference: [15] <author> Bruce Lindsay, Laura Haas, C. Mohan, Hamid Pirahesh, and Paul Wilms. </author> <title> "A Snapshot Differential Refresh Algorithm." </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> (Washington, </address> <year> 1986), </year> <pages> 53-60. </pages>
Reference-contexts: If the request is submitted at a remote site, then we need to send only the update request itself to the site of the derived relation. As well, the results presented here provide a starting point for devising a general mechanism for database snapshot refresh <ref> [1, 7, 15] </ref>. 2 NOTATION AND BASIC ASSUMPTIONS 4 In the next section we outline the assumptions and notation used in this paper.
Reference: [16] <author> David Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD (1983). </address>
Reference-contexts: Since, C ms [hh; 5; 19; k; li] is not satisfiable we conclude that h5; 19i will not be visibly modified and can be placed in the new instance. The second tuple to test from v (E; d) is hh; 22; 16; k; li. Since, C ms <ref> [hh; 22; 16; k; li] </ref> is satisfiable we conclude that h22; 16i belongs in the modify set. 5 DISCUSSION 29 Property 4 allows us to determine which tuples in the modify set will be deleted since they will no longer satisfy condition C.
Reference: [17] <author> David Maier and Jeffrey D. </author> <title> Ullman "Fragments of Relations." </title> <booktitle> In SIGMOD'83 Proc. of Annual Meeting, Sigmod Record , Vol. </booktitle> <volume> 13, No. 4, </volume> <month> (December </month> <year> 1983), </year> <pages> 15-22. </pages>
Reference-contexts: In the work by Buneman and Clemons [8], on the support of triggers and alerters, they are called readily ignorable updates and in the work by Bernstein and Blaustein [3], on the support of integrity constraints, they are called trivial tests. Maier and Ullman <ref> [17] </ref> study updates to relation fragments. In their work a fragment may be a physical or virtual relation over a single relation scheme, defined by selection and union operators on physical or other virtual relations.
Reference: [18] <author> Daniel J. Rosenkrantz and Harry B. Hunt III. </author> <title> "Processing Conjunctive Predicates and Queries." </title> <booktitle> In Proc. of the 6th International Conference on Very Large Data Bases, </booktitle> <address> (Mon-treal, </address> <year> 1980), </year> <pages> 64-72. </pages>
Reference-contexts: Since we have imposed the restriction that attributes have finite domains and we assume that any functions used are computable we are guaranteed the existence of a satisfiability testing algorithm|though it may not be efficient. For a restricted class of Boolean expressions, polynomial algorithms exist. Rosenkrantz and Hunt <ref> [18] </ref> developed such an algorithm for conjunctive Boolean expressions. Each expression B must be of the form: B = B 1 ^ B 2 ^ ^ B m where each B i is an atomic condition. <p> The latter problem can be translated into one of showing that a Boolean expression is unsatisfiable. Hence, in either case we can proceed by testing satisfiability. Rosenkrantz and Hunt <ref> [18] </ref> gave an algorithm for testing the satisfiability of conjunctive Boolean expressions where the atomic conditions come from a restricted class.
Reference: [19] <author> Michael Stonebraker, Jeff Anton, and Eric Hanson. </author> <title> "Extending a Database System with Procedures." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 12, No. 3, </volume> <month> (September </month> <year> 1987), </year> <pages> 350-376. </pages>
Reference-contexts: The use of derived relations for the support of real-time queries was suggested by Gardarin et al. [12] and by Dayal et al. [10]. Stonebraker et al. <ref> [19] </ref> suggest that the results of database procedures be stored for future use; updating the stored results is similar to updating a derived relation. Our results have direct application in each these areas. The detection of irrelevant or autonomously computable updates also has applications in distributed databases. <p> Since, C ms <ref> [hh; 5; 19; k; li] </ref> is not satisfiable we conclude that h5; 19i will not be visibly modified and can be placed in the new instance. The second tuple to test from v (E; d) is hh; 22; 16; k; li.
Reference: [20] <author> Hongzhi Yang. </author> <title> Query Transformation. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1987. </year>
Reference-contexts: The same type of transformation is necessary to process user queries. That is, any query posed against the conceptual relations must be transformed into an equivalent query against the stored relations. The query transformation problem has been addressed in papers by Larson and Yang <ref> [14, 20, 21] </ref>. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters. <p> A procedure for computing uniquely determined values can be found in [14] and in more detail in <ref> [20] </ref>. It is similar to the way surrogate values are derived for computationally nonessential variables. If the variable y i is not uniquely determined, then we cannot guarantee that its value is reconstructible for every tuple. However, it may still be reconstructible for some tuples.
Reference: [21] <author> H.Z. Yang and Per -Ake Larson. </author> <title> "Query Transformation for PSJ-queries." </title> <booktitle> In Proc. of the 13th International Conference on Very Large Data Bases, </booktitle> <address> (Brighton, </address> <year> 1987), </year> <pages> 245-254. </pages>
Reference-contexts: The same type of transformation is necessary to process user queries. That is, any query posed against the conceptual relations must be transformed into an equivalent query against the stored relations. The query transformation problem has been addressed in papers by Larson and Yang <ref> [14, 20, 21] </ref>. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters.
References-found: 21

