URL: http://www-cs-faculty.stanford.edu/~koza/HECtm.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: 
Email: E-MAIL: Koza@CS.Stanford.Edu  
Phone: PHONE: 415-941-0336 FAX: 415-941-9430  
Title: for Handbook of Evolutionary Computation. Classifying Protein Segments as Transmembrane Domains Using Genetic Programming and
Author: John R. Koza 
Web: http://www-cs-faculty.stanford.edu/~koza/  
Address: 258 Gates Building Stanford, California 94305 USA  
Affiliation: Computer Science Department Stanford University  
Note: Version 2 June 25, 1996  
Abstract: The goal of automatic programming is to create, in an automated way, a computer program that enables a computer to solve a problem. Ideally, an automatic programming system should require that the user pre-specify as little as possible about the problem. In particular, it is desirable that the user not be required to specify the size and shape (i.e., the architecture) of the ultimate solution to the problem before applying the technique. This paper describes how the biological theory of gene duplication described in Susumu Ohno's provocative book, Evolution by Means of Gene Duplication, was brought to bear on a vexatious problem from the domain of automated machine learning in the computer science field. The resulting biologically-motivated approach using six new architecture-altering operations enables genetic programming to automatically discover the size and shape of the solution at the same time as it is evolving a solution to the problem. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer network architecture. </title> <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2 . Cambridge, </booktitle> <address> MA: </address> <publisher> The MIT Press. </publisher> <address> Chapter 18. </address>
Reference: <editor> Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Engelman, D., Steitz, T., and Goldman, A. </author> <year> 1986. </year> <title> Identifying nonpolar transbilayer helices in amino acid sequences of membrane proteins. </title> <journal> Annual Review of Biophysics and Biophysiological Chemistry. </journal> <volume> Volume 15. </volume>
Reference: <author> Goldberg, David E. l989a. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning . Reading, </title> <address> MA: </address> <publisher> Addison-Wesley. </publisher>
Reference: <author> Holland, John H. </author> <year> 1975. </year> <title> Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, </title> <booktitle> and Artificial Intelligence. </booktitle> <address> Ann Arbor, MI: </address> <institution> University of Michigan Press. </institution> <note> The second edition is currently available from The MIT Press 1992. </note>
Reference-contexts: I believe that the size and shape of the solution should be part of the answer provided by an automated machine learning technique, rather than part of the question supplied by the investigator. John Holland's pioneering Adaptation in Natural and Artificial Systems <ref> (Holland 1975) </ref> described how an analog of the naturally-occurring evolutionary process can be applied to solving problems using what is now called the genetic algorithm (described in section B 1.2 of this volume).
Reference: <editor> Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> 1994. Advances in Genetic Programming . Cambridge, </booktitle> <address> MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of the genetic algorithm in which the genetic population consists of computer programs (that is, compositions of primitive functions, terminals, and possibly automatically defined functions). (See section B 1.5.1 of this volume).
Reference: <author> Koza, John R. </author> <year> 1994a. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Subroutines do this in ordinary computer programs. Accordingly, Genetic Programming II: Automatic Discovery of Reusable Programs <ref> (Koza 1994a) </ref> describes how to evolve multipart programs consisting of a main program and one or more reusable, parametrized, hierarchically-called subprograms. <p> Table 1 shows the out-of-sample error rate for the four previous algorithms for classifying transmembrane domains as well as for three approaches using genetic programming, namely the set-creating version <ref> (sections 18.5 through 18.9 of Koza, 1994a) </ref>, the arithmetic-performing version (sections 18.10 and 18.11 of Koza, 1994a), and the version using the architecture-altering operations as reported herein. Table 1 Comparison of seven methods. <p> Table 1 shows the out-of-sample error rate for the four previous algorithms for classifying transmembrane domains as well as for three approaches using genetic programming, namely the set-creating version (sections 18.5 through 18.9 of Koza, 1994a), the arithmetic-performing version <ref> (sections 18.10 and 18.11 of Koza, 1994a) </ref>, and the version using the architecture-altering operations as reported herein. Table 1 Comparison of seven methods.
Reference: <author> Koza, John R. </author> <year> 1994b. </year> <title> Genetic Programming II Videotape: The Next Generation . Cambridge, </title> <address> MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1994c. </year> <title> Evolution of a computer program for classifying protein segments as transmembrane domains using genetic programming. </title> <editor> In Altman, Russ, Brutlag, Douglas, Karp, Peter, Lathrop, Richard, and Searls, David (editors). </editor> <booktitle> Proceedings of the Second International Conference on Intelligent Systems for Molecular Biology. </booktitle> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher> <pages> Pages 244252. </pages>
Reference-contexts: In this section, genetic programming will be given a set of differently-sized protein segments and asked to give the correct classification for each segment. Genetic programming has previously demonstrated the ability to evolve a classifying program for this task without using any biochemical knowledge <ref> (Koza 1994c) </ref> when the user specified the architecture of the program to be evolved.
Reference: <author> Koza, John R. </author> <year> 1994d. </year> <institution> Architecture-Altering Operations for Evolving the Architecture of a MultiPart Program in Genetic Programming . Stanford University Computer Science Department technical report STAN-CS-TR-94-1528. </institution> <month> October 21, </month> <year> 1994. </year>
Reference-contexts: they cannot account for large changes in evolution, because large changes are made possible by the acquisition of new gene loci with previously non-existent functions." The naturally occurring mechanism of gene duplication (and the complementary mechanism of gene deletion) motivated the addition of six new architecture-altering operations to genetic programming <ref> (Koza 1994d, 1995) </ref>. These operations of branch duplication, branch creation, branch deletion, argument duplication, argument creation, and argument deletion enable genetic programming evolve the architecture of a multipart program containing automatically defined functions (ADFs) during a run of genetic programming.
Reference: <author> Koza, John R. </author> <year> 1995. </year> <title> Gene duplication to enable genetic programming to concurrently evolve both the architecture and work-performing steps of a computer program. </title> <booktitle> Proceedings of the 14th International Joint Conference on Artificial Intelligence . San Francisco, </booktitle> <address> CA: </address> <publisher> Morgan Kaufmann. </publisher> <pages> Pages 734740. </pages>
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1995. </year> <title> Parallel Genetic Programming on a Network of Transputers. </title> <institution> Stanford University Computer Science Department technical report STAN-CS-TR-95-1542. </institution> <month> January 30, </month> <year> 1995. </year> <editor> Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R., and Rice, James P. </author> <year> 1992. </year> <title> Genetic Programming: The Movie . Cambridge, </title> <address> MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of the genetic algorithm in which the genetic population consists of computer programs (that is, compositions of primitive functions, terminals, and possibly automatically defined functions). (See section B 1.5.1 of this volume).
Reference: <author> Ohno, Susumu. </author> <year> 1970. </year> <title> Evolution by Gene Duplication. </title> <address> New York: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A gene duplication is a rare illegitimate recombination event that results in the duplication of a possibly lengthy subsequence of a chromosome. Susumu Ohno's seminal book Evolution by Gene Duplication <ref> (Ohno 1970) </ref> proposed the then-provocative (now accepted) thesis that the creation of new proteins (and hence new structures and behaviors in living things) begins with a gene duplication and that gene duplication is "the major force of evolution." Ohno claimed that simple point mutation and crossover are insufficient to explain major
Reference: <author> Kyte, J. and Doolittle, R. </author> <year> 1982. </year> <title> A simple method for displaying the hydropathic character of proteins. </title> <journal> Journal of Molecular Biology. </journal> <volume> 157 </volume> <pages> 105-132. </pages>
Reference-contexts: Algorithms written by biologists for the problem of classifying transmembrane domains in protein sequences are based on biochemical knowledge about hydrophobicity and other properties of membranespanning areas of the protein sequence <ref> (Kyte-Doolittle 1982, von Heijne 1992, Engelman, Steitz, and Goldman 1986) </ref>.
Reference: <author> Samuel, Arthur L. </author> <year> 1959. </year> <title> Some studies in machine learning using the game of checkers. </title> <journal> IBM Journal of Research and Development. </journal> <volume> 3(3): </volume> <pages> 210229. </pages> <address> Stryer, Lubert. </address> <year> 1995. </year> <title> Biochemistry. </title> <address> New York, </address> <publisher> NY: </publisher> <editor> W. H. Freeman. </editor> <booktitle> Fourth Edition. </booktitle> <editor> von Heijne, G. </editor> <year> 1992. </year> <title> Membrane protein structure prediction: Hydrophobicity analysis and the positive-inside rule. </title> <journal> Journal of Molecular Biology. 225:487494. </journal>
Reference-contexts: One of the banes of automated machine learning from the earliest times has been the requirement that the human user predetermine the size and shape of the ultimate solution to his problem <ref> (Samuel 1959) </ref>. I believe that the size and shape of the solution should be part of the answer provided by an automated machine learning technique, rather than part of the question supplied by the investigator.
Reference: <author> Weiss, S. M., Cohen, D. M., and Indurkhya, N. </author> <year> 1993. </year> <title> Transmembrane segment prediction from protein sequence data. </title> <editor> In Hunter, L., Searls, D., and Shavlik, J. (editors). </editor> <booktitle> Proceedings of the First International Conference on Intelligent Systems for Molecular Biology. </booktitle> <address> Menlo Park, CA: </address> <publisher> AAAI Press. </publisher>
Reference: <author> Wright, Sewall. </author> <year> 1943. </year> <title> Isolation by distance. Genetics 28:114138. </title>
Reference: <author> Yeagle, Philip L. </author> <year> 1993. </year> <title> The Membranes of Cells. Second edition. San Diego, CA: Academic Press. progn Body of ADF0 Function Definition Argument List valuesADF0 defun Body of Iteration Performing Branch IPB0 looping-over-known-finite-set values Body of Result-Producing Branch RPB zero-argument automatically defined function, ADF0, that tests for certain amino acid residues in the protein segment, one 36-point iteration-performing branch, IPB0, and one 169-point result-producing branch, </title> <publisher> RPB. </publisher>
Reference-contexts: Automated methods of machine learning may prove to be useful in discovering biologically meaningful information hidden in the rapidly growing databases of DNA sequences and protein sequences. Membranes play many important roles in living things. A transmembrane protein <ref> (Yeagle 1993) </ref> is embedded in a membrane in such a way that part of the protein is located on one side of the membrane, part is within the membrane, and part is on the opposite side of the membrane.
References-found: 20

