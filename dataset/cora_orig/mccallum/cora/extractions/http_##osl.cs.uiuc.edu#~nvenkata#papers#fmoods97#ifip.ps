URL: http://osl.cs.uiuc.edu/~nvenkata/papers/fmoods97/ifip.ps
Refering-URL: http://osl.cs.uiuc.edu/~nvenkata/
Root-URL: http://www.cs.uiuc.edu
Email: Email: ren/nalini/agha@cs.uiuc.edu  
Title: Formalizing Multimedia QoS Constraints Using Actors  
Author: Shangping Ren, Nalini Venkatasubramanian and Gul Agha 
Keyword: QoS, Real-time, Multimedia, Actors, Concurrency semantics, Sessions  
Web: Web: http://www-osl.cs.uiuc.edu  
Address: 1304 W. Springfield Avenue  Urbana, IL 61801, USA  
Affiliation: Open Systems Laboratory Department of Computer Science  University of Illinois at Urbana-Champaign  
Abstract: The vision of future information systems is that different forms of information are potentially accessible at anytime through the Internet. We describe challenges in the modeling and specification of timing related multimedia (MM) services in open distributed systems. Management of multimedia services in an open system is complicated by the heterogeneity of application requirements, multimedia information, and system components. Services and systems in this environment evolve dynamically and their components interact with an environment that is not under their control. We propose a formal specification of timing related Quality-of-Service (QoS) attributes in an actor-based distributed system and describe some techniques for informally reasoning about quantitative QoS properties. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: In general, models and methodologies that have been developed for sequential programming are inadequate for creating correct distributed applications: to simplify distributed programming, a model of concurrent computation that provides facilities for the modular specification of distributed interactive applications is needed. The Actor model of computation <ref> [1] </ref> has a built-in notion of encapsulation and interaction, and thus it is a natural model to use as a basis for interactive applications. Actors can be viewed as a model of coordination between autonomous interacting components. Actors can be dynamically created.
Reference: [2] <author> G. Agha, I. A. Mason, S. F. Smith, and C. L. Talcott. </author> <title> Towards a theory of actor computation. </title> <booktitle> In The Third International Conference on Concurrency Theory (CONCUR '92), volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 565-579. </pages> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1992. </year>
Reference-contexts: Actors can be dynamically created. They communicate via message passing which is asynchronous and fair. The communication topology of an actor system is called the acquaintance relation and can change dynamically. Semantics of actor interactions are relatively well understood and reasoning about systems of actors has be formalized <ref> [2, 11] </ref>. Specifying QoS in the Actor based model is essentially a problem of specifying coordination constraints between distributed objects. Synchronizers [5] allow us to express these coordination constraints, i.e. local synchronization constraints or multi-actor coordination constraints [4]. Synchronizers allow us to qualitatively control the semantics of message delivery.
Reference: [3] <author> G. Agha, I. A. Mason, S. F. Smith, and C. L. Talcott. </author> <title> A foundation for actor computation. </title> <journal> Journal of Functional Programming, </journal> <volume> 7 </volume> <pages> 1-72, </pages> <year> 1997. </year>
Reference-contexts: U pdate: M fi &lt; 0 fi RN ! RS Update (m; t; s) = 8 : newState if 9pSat (m; p; s); and p is an update pattern in s (s) otherwise The standard operational semantics of ART systems is build on top of the basic actor semantics <ref> [3] </ref> with two extensions: (1) there is a special actor Timer whose state t represents the current time in the system, (2) constraints are imposed on the invocation of messages.
Reference: [4] <author> S. Frtlund and G. Agha. </author> <title> A language framework for multi-object coordination. </title> <booktitle> In Proceedings of ECOOP 1993, volume 707 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Specifying QoS in the Actor based model is essentially a problem of specifying coordination constraints between distributed objects. Synchronizers [5] allow us to express these coordination constraints, i.e. local synchronization constraints or multi-actor coordination constraints <ref> [4] </ref>. Synchronizers allow us to qualitatively control the semantics of message delivery. Earlier work separates real-time constraints from the computational aspects of an application; real-time constraints are described by synchronization code between the interfaces of objects [9].
Reference: [5] <author> Svend Frtlund. </author> <title> Coordinating Distributed Objects: An Actor-Based Approach to Synchronization. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Semantics of actor interactions are relatively well understood and reasoning about systems of actors has be formalized [2, 11]. Specifying QoS in the Actor based model is essentially a problem of specifying coordination constraints between distributed objects. Synchronizers <ref> [5] </ref> allow us to express these coordination constraints, i.e. local synchronization constraints or multi-actor coordination constraints [4]. Synchronizers allow us to qualitatively control the semantics of message delivery.
Reference: [6] <author> Peter Leydekkers and Valerie Gay. </author> <title> Odp view on qos for open distributed mm environments. </title> <editor> In Jan de Meer and Andreas Vogel, editors, </editor> <booktitle> 4th International IFIP Workshop on Quality of Service, </booktitle> <address> IwQos96 Paris, France, </address> <pages> pages 45-55, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The synchronization skew is defined as: = t i;a t i;v (3) For acceptable QoS in a distributed multimedia system, these parameters are bounded. 1.1 Actors and Multimedia A drawback with the traditional method of QoS specification is that the specification of QoS requirements is intermixed with the service specification <ref> [6, 7] </ref>. While the correctness of program execution, e.g. data delivery, relies on meeting the QoS requirements, merging the specifications results in loss of modularity and complicates the correctness validation process.
Reference: [7] <author> Flavio Henrique de Souza Lima and Edmundo Roberto Mauro Madeira. </author> <title> Odp based qos specification for the multiware platform. </title> <editor> In Jan de Meer and Andreas Vogel, editors, </editor> <booktitle> 4th International IFIP Workshop on Quality of Service, </booktitle> <address> IwQos96 Paris, France, </address> <pages> pages 45-55, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The synchronization skew is defined as: = t i;a t i;v (3) For acceptable QoS in a distributed multimedia system, these parameters are bounded. 1.1 Actors and Multimedia A drawback with the traditional method of QoS specification is that the specification of QoS requirements is intermixed with the service specification <ref> [6, 7] </ref>. While the correctness of program execution, e.g. data delivery, relies on meeting the QoS requirements, merging the specifications results in loss of modularity and complicates the correctness validation process.
Reference: [8] <author> Klara Nahrstedt and Jonathan M. Smith. </author> <title> The qos broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2 </volume> <pages> 53-67, </pages> <year> 1995. </year>
Reference-contexts: For the sake of simplicity, we assume that there is only one ongoing session in the system at a time. In a system with multiple sessions, we need to address the issue of satisfying QoS constraints for each session. For this, we propose an agent called the QoS broker <ref> [8] </ref> that acts as a coordinator for all the ongoing sessions and performs admission control for new incoming sessions. Design criteria for an actor-based QoS broker, its components and interactions in a distributed multimedia environment is beyond the scope of this paper and is a future area of research [12].
Reference: [9] <author> S. Ren, G. Agha, and M. Saito. </author> <title> A modular approach for programming distributed real-time systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 36(1), </volume> <month> July </month> <year> 1996. </year>
Reference-contexts: Synchronizers allow us to qualitatively control the semantics of message delivery. Earlier work separates real-time constraints from the computational aspects of an application; real-time constraints are described by synchronization code between the interfaces of objects <ref> [9] </ref>. Objects in this system are defined using a real-time variant of the Actor model. A high-level programming language construct called RTsynchronizer, specifies a collection of temporal constraints between actors.
Reference: [10] <author> Shangping Ren. </author> <title> Modularization of Time Constraint Specification in Real-time Distributed Computing (to be published). </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1997. </year>
Reference-contexts: Structures describing the RTsynchronizer, the distribution of state information between an RTsynchronizer and its domain of control and strategies for maintaining interobject consistency are described in <ref> [10] </ref>. 2 FORMALIZING MM SESSIONS The basic Actor model captures the fundamental properties of general purpose distributed computing in which only logical time is concerned. <p> The same reason applies for RemEI and Update functions fl The details of these transition rules can be found in <ref> [10] </ref> - RTsynchronizers state change, formulated as Update (m; t; ); If m is an expected message, invoking it will satisfy an expectation instance in the system; hence, a satisfied expectation instance will be removed from the expectation instance set (RemEI (m; &; t )); the message m may also be
Reference: [11] <author> C. L. Talcott. </author> <title> Interaction semantics for components of distributed systems. </title> <booktitle> In 1st IFIP Workshop on Formal Methods for Open Object-based Distributed Systems, </booktitle> <address> FMOODS'96, </address> <year> 1996. </year>
Reference-contexts: Actors can be dynamically created. They communicate via message passing which is asynchronous and fair. The communication topology of an actor system is called the acquaintance relation and can change dynamically. Semantics of actor interactions are relatively well understood and reasoning about systems of actors has be formalized <ref> [2, 11] </ref>. Specifying QoS in the Actor based model is essentially a problem of specifying coordination constraints between distributed objects. Synchronizers [5] allow us to express these coordination constraints, i.e. local synchronization constraints or multi-actor coordination constraints [4]. Synchronizers allow us to qualitatively control the semantics of message delivery.
Reference: [12] <author> N. Venkatasubramanian. </author> <title> Composing Distributed Resource Management Activities (to be published). </title> <type> PhD thesis, </type> <institution> University of Illinois, Urbana-Champaign, </institution> <year> 1997. </year>
Reference-contexts: Design criteria for an actor-based QoS broker, its components and interactions in a distributed multimedia environment is beyond the scope of this paper and is a future area of research <ref> [12] </ref>.

References-found: 12

