URL: http://www.cs.colorado.edu/~zorn/cs5535/Fall-1995/projects/humphries-main.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/cs5535/Fall-1995/index.html
Root-URL: http://www.cs.colorado.edu
Title: A Proposal for Teaching Objected-oriented Programming in an Introductory Course 1 Introduction  
Note: "C++ is like your distant cousin Bubba. He's fat, sloppy, and has a serious  
Abstract: In the past decade, many software developers have come to the conclusion that the procedural paradigm is no longer sufficient to design software systems of the nineties. Tim Korson[Korson & McGregor 90] states that the need to develop and maintain large complex software systems in a competitive and dynamic environment has driven interest in new approaches to software design and development. These new approaches center around the objectoriented paradigm which was developed in the 1980's. Many feel as Meyer that a shift from structured analysis using the procedural paradigm to the object-oriented paradigm is here to stay and will improve the quality of software design. Meyer [Meyer 88] states the following about the shift to object orientation "Object-oriented" is the lastest in term, complementing or perhaps even replacing "structured" as the high-tech version of "good"... Let's make it clear right away ...I do not think objectoriented design is a mere fad; I think it is not trivial...; I know it works, and I believe it is not only different from but even, to a certain extent, incompatible with the software design methods that people use today... I further believe that objectoriented design has the potential for significantly improving the quality of software, The acceptance of the objectoriented paradigm in industry has propagated down to the academic community. Since there is always the need for curriculum to accomodate the needs of industry and reflect the up-to-date trends, many computer science departments are revamping their core programming courses. The move to objectorientation in courses has been gradual. In the early 1990's, computer science departments followed the model proposed by Temte[Temte 91] which suggested that one upper level elective be added to the curriculum to teach objectoriented techniques. Through these experimental courses which varied in content and tools, it was learned that the selection of language affects a student's ability to grasp the concepts of objectoriented programming. The languages that were first used in these courses were Eiffel, Smalltalk, C++, and objective-Pascal. In addition to the languages mentioned above, a later course [Wu 93] used a hybrid visual language, Prograph from TGS systems. Although C++ is not a pure objectoriented language like Smalltalk or Eiffel and therefore not the most desirable language, it has become the most widely used tool for teaching objected-oriented programming. This is mainly due to its wide use in industry. Rick Decker [Berman et. al 94] makes the following comparison with respect to C++: and that it is here to stay.
Abstract-found: 1
Intro-found: 1
Reference: [Beck and Cunningham 89] <author> Kent Beck and Ward Cunningham, </author> <title> "A Laboratory for Teaching ObjectOriented Thinking", </title> <booktitle> OOPSLA '89 Proceedings, </booktitle> <address> 24(10),1989. </address>
Reference: [Berman et. al 94] <author> A. Michael Berman, Rick Decker, Dung X. Nguyen, Richard Reid, and Eugene Wallingford, </author> <title> Panel Discussion: "Using C++ in CS1/CS2", </title> <address> SIGSCE Bulletin,26(1), </address> <year> 1994. </year>
Reference: [Brokken & Kubat] <author> F. </author> <title> Brokken & K Kubat,"C++ Annotations for users who want to transition to C++",http://www.icce.rug.nl/docs/cplusplus/cplusplus.html. </title>
Reference: [Chandra 93] <author> Kailash Chandra, </author> <title> "C++ in Eight Weeks", </title> <journal> ACM Sigplan Notices, </journal> <volume> 28(8), </volume> <year> 1993. </year>
Reference-contexts: There were several other examples [Chandra 93, Reid 91, Berman et al 94, Holt 94, Zivkova 94]. In <ref> [Chandra 93 ] </ref> , there are several programming assignments and two test examples.
Reference: [Decker & Hirshfield 94] <author> R. Decker and S. </author> <title> Hirshfield,"The Top Ten Reasons Why Object-Oriented Programming Can't be Taught in CS1," </title> <booktitle> SIGCSE Bulletin,26(1),1994. </booktitle>
Reference-contexts: In most curriculums, this course is equated to CS1. The most convincing evidence which supports the need to use this paradigm in the introductory course can be found in <ref> [Decker & Hirshfield 94, Wick 95, Luker 94 ] </ref>. Wick [ Wick 95] states that "Students appreciate the need to capture major design decisions in the documentation.
Reference: [Decker & Hirshfield 93] <author> R. Decker and S. </author> <title> Hirshfield,"Top-Down Teaching: </title> <booktitle> Object-Oriented Programming in CS1", SIGCSE Bulletin,25(1), </booktitle> <year> 1993. </year>
Reference: [D'Souza 93] <author> Desmond D'Souza, </author> <title> "An educated look at education", </title> <journal> JOOP, </journal> <volume> 6(1), </volume> <year> 1993. </year>
Reference: [D'Souza 95] <author> Desmond D'Souza, </author> <title> "Effective C++ learning and teaching", </title> <publisher> JOOP,1995. </publisher>
Reference: [Dixon 91] <author> Chip Dixon, </author> <title> "An Introduction to ObjectOriented Programming Through Turbo Pascal",SIGCSE Bulletin, </title> <type> 23(2), </type> <year> 1991. </year>
Reference: [Gamma et. al 95] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, </author> <title> Design Patterns, </title> <publisher> Addison- Wesley Publishing Comany, </publisher> <year> 1995. </year>
Reference-contexts: With the emergence of the objectoriented paradigm, patterns which are found in software application are being documented as found in <ref> [Gamma et. al 95] </ref>. These patterns can be taught to students through the use of program applications. When these students eventually become software developers, they can apply these design techniques to develop new systems properly.
Reference: [Gersting 94] <institution> Judith L Gersting,"A software Engineering "Frosting" on a Traditional CS-1 Course", SIGCSE Bulletin,26(1),1994. </institution>
Reference: [Gojenola et al 95] <author> Koldo Gojenola, Tomas A. Perez, Arturo Jaime, </author> <title> "Integrative Assignments for CS1 and CS2 through Libraries of Abstract Data Types", </title> <journal> SIGCSE Bulletin, </journal> <volume> 27(3), </volume> <year> 1995. </year>
Reference: [Holt 94] <author> R. Holt, </author> <title> "Introducing Undergraduates to Object Orientation Using the Turing Language", </title> <booktitle> SIGCSE Bulletin,26(1),1994. </booktitle>
Reference: [Horstmann 95] <author> Cay S. Horstmann, </author> <title> Mastering ObjectOriented Design in C++, </title> <publisher> John Wiley & Sons, Inc, </publisher> <year> 1995. </year>
Reference-contexts: This form could be modelled after CRC cards. An example of such a form can be found in <ref> [Horstmann 95] </ref>. 4. Summary and Evaluation The future success of designing and developing large, complex software systems is dependent on programmers' abilities to apply objectoriented design principles to solve complex problems. This paradigm is prevalently used in industry and must also be successfully incorporated in course curricula. <p> But there is hope! Near the end of my project research, I found the book referenced in <ref> [Horstmann 95] </ref>. Horstmann [Horstmann 95 ] states in his preface "I wrote this book for use in a course in objectoriented programming at San Jose State University, having found other texts unsuitable for our environment. <p> But there is hope! Near the end of my project research, I found the book referenced in [Horstmann 95]. Horstmann <ref> [Horstmann 95 ] </ref> states in his preface "I wrote this book for use in a course in objectoriented programming at San Jose State University, having found other texts unsuitable for our environment.
Reference: [Jordan 90] <institution> David Jordan,"Implementation Benefits of C++ Language Mechanisms",Communications of the ACM,33(9),1990. </institution>
Reference: [Khan et al 95] <author> Emdad H. Khan, Mansoor AlA'ali, and Moheb R. Girgis, </author> <title> "Object-Oriented Programming for Structured Procedural Programmers", </title> <journal> Computer, </journal> <volume> 28(10), </volume> <month> October, </month> <year> 1995. </year>
Reference: [Koenig 91] <author> Andrew Koenig," </author> <title> Library design is language design", </title> <type> JOOP, </type> <year> 1991. </year>
Reference: [Koenig 95] <author> Andrew Koenig, </author> " <title> Function objects, templates, and Inheritance", </title> <journal> JOOP, </journal> <volume> 8(5), </volume> <month> September, </month> <year> 1995. </year>
Reference: [Kolling et. al 95 ] <author> M. Kolling, B. Koch, and J. </author> <title> Rosenberg,"Requirements for a First Year ObjectOriented Teaching Language", </title> <booktitle> SIGCSE Bulletin,26(1), </booktitle> <year> 1994. </year>
Reference: [Korson & McGregor 90] <author> T. Korson and J. McGregor, </author> <title> "Understanding ObjectOriented: </title>
References-found: 20

