URL: http://ftp.cs.indiana.edu/pub/stoller/SIGOPS96.ps.gz
Refering-URL: http://www.cs.indiana.edu/hyplan/stoller.html
Root-URL: http://www.cs.indiana.edu
Title: Cryptographic Support for Fault-Tolerant Distributed Computing  
Author: Yaron Minsky Robbert van Renesse Fred B. Schneider Scott D. Stoller 
Date: July 6, 1996  
Address: Ithaca, New York 14853, U.S.A  
Affiliation: Department of Computer Science Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [BOGW88] <author> Michael Ben-Or, Shafi Goldwasser, and Avi Widgerson. </author> <title> Completeness theorems for non-cryptographic fault-tolerant distributed computation. </title> <booktitle> ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-10, </pages> <year> 1988. </year>
Reference-contexts: Cryptographic techniques have been used before in distributed protocols [LSP82, GLR95, CR93]. Secret sharing, in particular, has been employed for asynchronous Byzantine agreement [CR93], secure auctioning [FR95] and secure function evaluation <ref> [BOGW88] </ref>. All of this work, however, depends on computations being immobile. In the work we report here, secret sharing takes on a new role in facilitating mobile processes by providing a form of distributed authentication.
Reference: [CGH + 95] <author> D. Chess, B. Grosof, C. Harrison, D. Levine, C. Paris, and G. Tsudik. </author> <title> Itinerant agents for mobile computing. </title> <journal> IEEE Personal Communications 2, </journal> <volume> 5 </volume> <pages> 34-49, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Schneider, Department of Computer Science, Upson Hall, Cornell University, Ithaca, New York 14853, U.S.A. Email: fbs@cs.cornell.edu y Supported in part by ARPA/NSF Grant No. CCR-9014363, NASA/ARPA grant NAG-2-893, and AFOSR grant F49620 94-1-0198. z Supported in part by ARPA/ONR contract N00014-92-J-1866. 1 In contrast, <ref> [CGH + 95] </ref> gives solutions that require secure co-processors. 2 A Fault-tolerant Pipeline A simple agent-computation might visit a succession of hosts, ultimately delivering its results to an actuator (which may be the same host as the source).
Reference: [CR93] <author> Ran Canetti and Tal Rabin. </author> <title> Optimal asynchronous Byzantine agreement. </title> <booktitle> 25th Symposium on Theory of Computing, </booktitle> <pages> pages 42-51, </pages> <year> 1993. </year>
Reference-contexts: Cryptographic support was required. We also found that delays introduced by voting could be rendered insignificant by making voting less frequent. Moreover, in some cases, replication and voting actually improve performance by ensuring that slow hosts do not impede progress. Cryptographic techniques have been used before in distributed protocols <ref> [LSP82, GLR95, CR93] </ref>. Secret sharing, in particular, has been employed for asynchronous Byzantine agreement [CR93], secure auctioning [FR95] and secure function evaluation [BOGW88]. All of this work, however, depends on computations being immobile. <p> Moreover, in some cases, replication and voting actually improve performance by ensuring that slow hosts do not impede progress. Cryptographic techniques have been used before in distributed protocols [LSP82, GLR95, CR93]. Secret sharing, in particular, has been employed for asynchronous Byzantine agreement <ref> [CR93] </ref>, secure auctioning [FR95] and secure function evaluation [BOGW88]. All of this work, however, depends on computations being immobile. In the work we report here, secret sharing takes on a new role in facilitating mobile processes by providing a form of distributed authentication.
Reference: [FR95] <author> Matthew K. Franklin and Michael K. Reiter. </author> <title> The design and implementation of a secure auction service. </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <year> 1995. </year>
Reference-contexts: Moreover, in some cases, replication and voting actually improve performance by ensuring that slow hosts do not impede progress. Cryptographic techniques have been used before in distributed protocols [LSP82, GLR95, CR93]. Secret sharing, in particular, has been employed for asynchronous Byzantine agreement [CR93], secure auctioning <ref> [FR95] </ref> and secure function evaluation [BOGW88]. All of this work, however, depends on computations being immobile. In the work we report here, secret sharing takes on a new role in facilitating mobile processes by providing a form of distributed authentication.
Reference: [GLR95] <author> Li Gong, Patrick Lincoln, and John Rushby. </author> <title> Byzantine agreement with authentication: observations and applications in tolerating hybrid and link faults. </title> <booktitle> Dependable Computing for Critical Applications 5, </booktitle> <pages> pages 79-90, </pages> <month> September </month> <year> 1995. </year> <institution> Champaign, Ill. </institution>
Reference-contexts: Cryptographic support was required. We also found that delays introduced by voting could be rendered insignificant by making voting less frequent. Moreover, in some cases, replication and voting actually improve performance by ensuring that slow hosts do not impede progress. Cryptographic techniques have been used before in distributed protocols <ref> [LSP82, GLR95, CR93] </ref>. Secret sharing, in particular, has been employed for asynchronous Byzantine agreement [CR93], secure auctioning [FR95] and secure function evaluation [BOGW88]. All of this work, however, depends on computations being immobile.
Reference: [Jar95] <author> Stanislaw Jarecki. </author> <title> Proactive secret sharing and public key cryptosystems. </title> <type> Master's thesis, </type> <institution> MIT, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: In the other, message size remains constant but an initialization phase is required. The first scheme uses chains of authentication (instead of a secret privilege) to prevent masquerading. The second scheme renews <ref> [Jar95] </ref> the secret after each round, making it impossible for fragments from before a vote to be used together with fragments constructed after that vote.
Reference: [LSP82] <author> Leslie Lamport, Robert Shostak, and Marshall Pease. </author> <title> The Byzantine generals problem. </title> <journal> ACM TOPLAS 4, </journal> <volume> 3 </volume> <pages> 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: Cryptographic support was required. We also found that delays introduced by voting could be rendered insignificant by making voting less frequent. Moreover, in some cases, replication and voting actually improve performance by ensuring that slow hosts do not impede progress. Cryptographic techniques have been used before in distributed protocols <ref> [LSP82, GLR95, CR93] </ref>. Secret sharing, in particular, has been employed for asynchronous Byzantine agreement [CR93], secure auctioning [FR95] and secure function evaluation [BOGW88]. All of this work, however, depends on computations being immobile.
Reference: [Sha79] <author> Adi Shamir. </author> <title> How to share a secret. </title> <journal> CACM, </journal> <volume> 22 </volume> <pages> 612-613, </pages> <month> November </month> <year> 1979. </year>
Reference-contexts: Agent replicas cannot simply carry copies of the secret, since the secret could then be stolen by any faulty host visited by a replica. It is tempting to circumvent this problem by the use of an (n; k) threshold secret sharing scheme <ref> [Sha79] </ref> to share the secret embodying the privilege. 4 In a system having 2k 1 replicas, the source would create fragments using a (2k 1; k) threshold scheme, and send a different fragment to each of the hosts in the first stage.
References-found: 8

