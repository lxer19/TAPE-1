URL: http://jerry.cs.uiuc.edu/~plop/plop98/final_submissions/P25.ps
Refering-URL: http://jerry.cs.uiuc.edu/~plop/plop98/final_submissions/
Root-URL: http://www.cs.uiuc.edu
Email: e-mail:f972314,cmrubira,rdahabg@dcc.unicamp.br  
Title: Tropyc: A Pattern Language for Cryptographic Software  
Author: Alexandre M. Braga Ceclia M. F. Rubira Ricardo Dahab 
Keyword: Key words: cryptography, pattern language, design patterns, software archi tecture, object orientation.  
Address: P.O. Box 6176 13081-970 Campinas-SP-Brazil phone/fax:+55+19+7885842  
Affiliation: State University of Campinas Institute of Computing  
Abstract: This work describes Tropyc, a pattern language for cryptographic software. Nine patterns are described: Information Secrecy, Message Authentication, Message Integrity, Sender Authentication, Secrecy with Authentication, Secrecy with Signature, Secrecy with Integrity, Signature with Appendix, and Secrecy with Signature with Appendix. These patterns are classified according to four fundamental objectives of cryptography and compose a closed set of patterns for that domain. These patterns have the same dynamic behavior and structure. We abstracted these aspects in a generic object-oriented Cryptographic Metapattern. 
Abstract-found: 1
Intro-found: 1
Reference: [AJSW97] <author> N. Asokan, Philippe A. Janson, Michael Steiner, and Michael Waidner. </author> <title> The State of the Art in Electronic Payment Systems. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 28-35, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: Example Two common uses of MDCs are detection of file modification caused by viruses and generation of passphrases to produce cryptographic keys. Also, MDCs could be used as unique identifiers of electronic coins in electronic commerce applications based on hash chains <ref> [AJSW97] </ref>. 2.4 Message Authentication Context Alice and Bob want to exchange messages, but they cannot distinguish their own messages from the ones Eve may have included into the communication channel. Also, they have the ability to share secrets in a secure way. <p> Example Digital signatures are used in electronic commerce applications in the authentication of customers and merchants <ref> [AJSW97, HY97] </ref>. Also, they could be used to guarantee the authenticity of information obtained over the Internet [HN98]. 2.6 Secrecy with Authentication Context Alice and Bob use public key cryptography to exchange encrypted messages. Eve may intercept messages, but she cannot read their contents. <p> The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [BMR + 96] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture: A System of Patterns. </title> <publisher> John Wiley and Sons Ltd., </publisher> <address> Chichester, UK, </address> <year> 1996. </year>
Reference-contexts: The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence. The Abstract Factory [GHJV94, 87] pattern can be used in the previous negotiation step to decide which algorithm or implementation to use. The Observer [GHJV94, 293], Proxy [GHJV94, 207], and Client-Dispatcher-Server <ref> [BMR + 96, 323] </ref> patterns can be used to obtain location transparency. <p> The Abstract Factory [GHJV94, 87] pattern can be used in the previous negotiation step to decide which algorithm or implementation to use. The Observer [GHJV94, 293], Proxy [GHJV94, 207], and Client-Dispatcher-Server [BMR + 96, 323] patterns can be used to obtain location transparency. The Forwarder-Receiver <ref> [BMR + 96, 307] </ref> pattern could be combined with the cryptographic patterns in order to offer secure and transparent interprocess communication, in such a way that Alice becomes part of the Forwarder and Bob is incorporated into the Receiver.
Reference: [CGHK98] <author> Pau-Chen Cheng, Juan A. Garay, Amir Herzberg, and Hugo Krawczyk. </author> <title> A Security Architecture for the Internet Protocol. </title> <journal> IBM Systems Journal, </journal> <volume> 37(1) </volume> <pages> 42-60, </pages> <year> 1998. </year>
Reference-contexts: Implementation Factors * A secure means to exchange and keep a secret is necessary. * The security of MACs is in the secrecy of the key and in the one-wayness of the cryptographic hash function. Example MACs could be used in the authentication of IP packages over the Internet <ref> [CGHK98] </ref>. 2.5 Sender Authentication Context Alice sends messages to Bob, but they cannot distinguish their own messages from the ones Eve may include into the communication channel. Furthermore, Alice can later dispute the authorship of messages actually sent by her. <p> The secret key used to compute the MAC must be different from that used to encipher/decipher. The structural and dynamic models for that pattern are shown in Section B.5. Example Secrecy and authentication could be combined in order to secure IP packages over the Internet <ref> [CGHK98] </ref>. 2.7 Secrecy with Signature Context Alice and Bob exchange encrypted messages, but they cannot grant the authorship of an encrypted message. Furthermore, Eve can modify, replace or include messages into the communication channel in such a way that Alice and Bob cannot detect the spurious messages. <p> If they match, the signature is true. The structural and dynamic models for that pattern are shown in Section B.8. Example When a user of an Internet application must digitally sign information, for efficiency reasons, it is better to produce small signatures <ref> [CGHK98] </ref>. 2.10 Secrecy with Signature with Appendix Context Alice and Bob exchange encrypted signed messages to prevent modifications or replacement and to achieve secrecy and sender authentication. They need to manage limited storage and processing resources. However, the messages they exchange are very large and produce large signatures. <p> The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [CSS97] <institution> Common Security Services Manager Application Programming Interface, </institution> <note> Draft 2.0. http://www.opengroup.org/public/tech/security/pki/index.htm, June 1997. </note>
Reference-contexts: The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [Deg97] <author> Mary Degeforde. </author> <title> Java Cryptography Architecture API Specification and Reference. </title> <note> http://java.sun.com/products/JDK1.1/docs/guide/security/CryptoSpec.html, Febru-ary 1997. </note>
Reference-contexts: The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [GHJV94] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison Wesley Publishing Company, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98]. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy <ref> [GHJV94, 315] </ref> pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence. The Abstract Factory [GHJV94, 87] pattern can be used in the previous negotiation step to decide which algorithm or implementation to use. <p> We reference just a few [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98]. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge <ref> [GHJV94, 151] </ref> pattern can be used to obtain implementation independence. The Abstract Factory [GHJV94, 87] pattern can be used in the previous negotiation step to decide which algorithm or implementation to use. <p> Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence. The Abstract Factory <ref> [GHJV94, 87] </ref> pattern can be used in the previous negotiation step to decide which algorithm or implementation to use. The Observer [GHJV94, 293], Proxy [GHJV94, 207], and Client-Dispatcher-Server [BMR + 96, 323] patterns can be used to obtain location transparency. <p> The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence. The Abstract Factory [GHJV94, 87] pattern can be used in the previous negotiation step to decide which algorithm or implementation to use. The Observer <ref> [GHJV94, 293] </ref>, Proxy [GHJV94, 207], and Client-Dispatcher-Server [BMR + 96, 323] patterns can be used to obtain location transparency. <p> The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence. The Abstract Factory [GHJV94, 87] pattern can be used in the previous negotiation step to decide which algorithm or implementation to use. The Observer [GHJV94, 293], Proxy <ref> [GHJV94, 207] </ref>, and Client-Dispatcher-Server [BMR + 96, 323] patterns can be used to obtain location transparency. <p> The Forwarder-Receiver [BMR + 96, 307] pattern could be combined with the cryptographic patterns in order to offer secure and transparent interprocess communication, in such a way that Alice becomes part of the Forwarder and Bob is incorporated into the Receiver. The State <ref> [GHJV94, 305] </ref> pattern could also be used to provide state dependent behavior, such as turning the security of the channel on and off. Patterns related to security aspects of applications are proposed by Yoder and Barcalow [YB97]. These patterns are concerned with higher level application security aspects.
Reference: [Her97] <author> Michael Herfert. </author> <title> Security-Enhanced Mailing Lists. </title> <journal> IEEE Network, </journal> <pages> pages 30-33, </pages> <year> 1997. </year>
Reference-contexts: Implementation Factors * Private or secret keys must be kept protected from unauthorized copy or modification. * An infrastructure to distribute or make public keys broadly available is necessary. 4 Example A common use of this pattern is in the encryption of electronic mail messages <ref> [Her97] </ref>. 2.3 Message Integrity Context Alice sends large messages to Bob. He wants to verify the integrity of received messages that Eve may have modified or replaced. <p> The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [HN98] <author> Amir Herzberg and Dalit Naor. Surf'N'Sign: </author> <title> Client Signatures on Web Documents. </title> <journal> IBM Systems Journal, </journal> <volume> 37(1) </volume> <pages> 61-71, </pages> <year> 1998. </year>
Reference-contexts: Example Digital signatures are used in electronic commerce applications in the authentication of customers and merchants [AJSW97, HY97]. Also, they could be used to guarantee the authenticity of information obtained over the Internet <ref> [HN98] </ref>. 2.6 Secrecy with Authentication Context Alice and Bob use public key cryptography to exchange encrypted messages. Eve may intercept messages, but she cannot read their contents. However, she can replace or modify these messages in such a way that Alice and Bob cannot detect these modifications or replacements. <p> The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [HY97] <author> Amir Herzberg and Hilik Yochai. Minipay: </author> <title> Charging per Click on the Web. </title> <booktitle> Computer Networks and ISDN Systems, </booktitle> <year> 1997. </year>
Reference-contexts: Example Digital signatures are used in electronic commerce applications in the authentication of customers and merchants <ref> [AJSW97, HY97] </ref>. Also, they could be used to guarantee the authenticity of information obtained over the Internet [HN98]. 2.6 Secrecy with Authentication Context Alice and Bob use public key cryptography to exchange encrypted messages. Eve may intercept messages, but she cannot read their contents. <p> The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [Kal95] <author> B. Kaliski. Cryptoki: </author> <title> A Cryptographic Token Interface, </title> <note> Version 1.0. http://www.rsa.com/rsalabs/pubs/PKCS/html/pkcs-11.html, April 1995. </note>
Reference-contexts: The cryptographic patterns are widely used in many applications and supported by many cryptographic APIs, at least implicitly. We reference just a few <ref> [Deg97, Kal95, CSS97, HY97, AJSW97, Her97, CGHK98, HN98] </ref>. Some well known design patterns can be used when designing a cryptographic pattern. The Strategy [GHJV94, 315] pattern can be used to obtain algorithm independence. The Bridge [GHJV94, 151] pattern can be used to obtain implementation independence.
Reference: [MvOV96] <editor> Alfred J. Menezes, Paul C. van Orschot, and Scott A. Vanstone. </editor> <booktitle> Handbook of Applied Cryptography. </booktitle> <publisher> CRC Press, </publisher> <year> 1996. </year>
Reference: [Sch96] <author> Bruce Schneier. </author> <title> Applied Cryptography | Protocols, Algorithms , and Source Code in C. </title> <publisher> John Wiley and Sons, </publisher> <address> 2nd edition, </address> <year> 1996. </year>
Reference: [YB97] <author> Joseph Yoder and Jeffrey Barcalow. </author> <title> Application Security. </title> <note> PLoP'97 Conference, Wash-ington University Technical Report 97-34, 1997. 15 </note>
Reference-contexts: The State [GHJV94, 305] pattern could also be used to provide state dependent behavior, such as turning the security of the channel on and off. Patterns related to security aspects of applications are proposed by Yoder and Barcalow <ref> [YB97] </ref>. These patterns are concerned with higher level application security aspects. <p> These patterns are concerned with higher level application security aspects. In fact, lower level security, such as cryptography, is not treated and a pattern to encapsulate these lower level security aspects in a Security Access Layer <ref> [YB97, 16] </ref> is proposed. 4 Conclusions and Future Work Cryptographic support is becoming a default feature in many applications. In order to facilitate the design, implementation and reuse of flexible and adaptable cryptographic software, one should consider the architectural aspects of cryptographic components and the patterns that emerge from them.
References-found: 13

