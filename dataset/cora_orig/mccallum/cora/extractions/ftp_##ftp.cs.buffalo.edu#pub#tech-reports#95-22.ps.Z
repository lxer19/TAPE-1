URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/95-22.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Email: E-Mail: fbharat,govin-kg@cs.buffalo.edu  E-Mail: mantha@wrc.xerox.com  
Title: Relaxation in Constraint Logic Languages  
Author: Kannan Govindarajan Bharat Jayaraman Surya Mantha 
Address: Buffalo, NY 14260  Webster, NY 14580  
Affiliation: Department of Computer Science State University of New York at Buffalo  Systems Architecture Corporate Research and Technology Xerox Corporation  
Abstract: Optimization and relaxation are two important operations that naturally arise in many applications requiring the use of constraints, e.g., engineering design, scheduling, decision support, etc. In optimization, we are interested in finding the optimal solutions to a set of constraints with respect to an objective function. In many applications, optimal solutions may be difficult or impossible to obtain, and hence we are interested in finding suboptimal solutions, by either relaxing the constraints or relaxing the objective function. The contribution of this paper lies in providing a logical framework for performing optimization and relaxation in a constraint logic programming language. Our proposed framework is called preference logic programming (PLP), and its use for optimization was discussed in [4]. Essentially, in PLP we can designate certain predicates as optimization predicates, and we can specify the objective function by stating preference criteria for determing the optimal solutions to these predicates. This paper focuses on the use of PLP for relaxation. First we show how the paradigm of Hierarchical Constraint Logic Programming (HCLP) can be directly encoded in PLP, thereby showing how a large class of constraint relaxation problems can be expressed in PLP. Next we introduce the concept of a relaxable query, and discuss its use for preference relaxation. Our model-theoretic semantics of relaxation is based on simple concepts from modal logic: Essentially, each world in the possible-worlds semantics for a preference logic program is a model for the constraints of the program, and an ordering over these worlds is determined by the objective function. Optimization can then be expressed as truth in the optimal worlds, while relaxation becomes truth in suitably-defined suboptimal worlds. We also present an operational semantics for relaxation as well as correctness results. Our conclusion is that the concept of preference provides a unifying framework for formulating optimization as well as relaxation problems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Borning, M. J. Maher, A. Martindale, and M. Wilson. </author> <title> Constraint hierarchies and logic programming. </title> <booktitle> In Proc. 6th International Conference on Logic Programming, </booktitle> <pages> pages 149-164, </pages> <year> 1989. </year>
Reference-contexts: This is the main topic of the present paper. While there has been considerable research on partial constraint satisfaction [3], not much has been done within the framework of logic programming. Two notable efforts are Relaxable Horn Clauses [2, 7] and Hierarchical Constraint Logic Programming <ref> [1, 9] </ref>. <p> However, stating the relaxation criteria in this way, i.e., in terms of goals local to a clause, provides only limited expressiveness for our intended applications. Hierarchical Constraint Logic Programming (HCLP) <ref> [1, 9] </ref> is a paradigm that has proven useful for performing constraint relaxation in applications such as interactive graphics, document formatting, and scheduling. HCLP extends CLP by supporting required as well as relaxable constraints. <p> Borning et al <ref> [1, 9] </ref> 6 introduced the paradigm of Hierarchical Constraint Logic Programming (HCLP) by extending CLP to support required as well as relaxable constraints. Essentially, the solutions of interest must satisfy the required constraints but need not satisfy the relaxable constraints.
Reference: [2] <author> A. Brown, S. Mantha, and T. Wakayama. </author> <title> Logical Reconstruction of Constraint Relaxation Hierarchies in Logic Programming. </title> <booktitle> In Proc. of 7th Intl. Symp. on Methodologies for Intelligent Systems, </booktitle> <publisher> LNAI 689, </publisher> <address> Trondheim Norway, </address> <year> 1993. </year>
Reference-contexts: This is the main topic of the present paper. While there has been considerable research on partial constraint satisfaction [3], not much has been done within the framework of logic programming. Two notable efforts are Relaxable Horn Clauses <ref> [2, 7] </ref> and Hierarchical Constraint Logic Programming [1, 9].
Reference: [3] <author> E. C. Freuder. </author> <title> Partial Constraint Satisfaction. </title> <booktitle> In Proc. 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 278-283, </pages> <year> 1989. </year>
Reference-contexts: We explain these clauses further in section 2. The PLP paradigm provides a logical account of optimization, but it is not evident how one can perform relaxation in this paradigm. This is the main topic of the present paper. While there has been considerable research on partial constraint satisfaction <ref> [3] </ref>, not much has been done within the framework of logic programming. Two notable efforts are Relaxable Horn Clauses [2, 7] and Hierarchical Constraint Logic Programming [1, 9].
Reference: [4] <author> K. Govindarajan, B. Jayaraman, and S. Mantha. </author> <title> Preference Logic Programming. </title> <booktitle> In Proc. International Conference on Logic Programming, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: While optimization and relaxation are important in practice, they are meta-level operations and fall outside the standard (constraint) logical framework. This paper shows how these operations can be formulated in a logically principled manner by a simple extension of the CLP framework. In an earlier paper <ref> [4] </ref> we introduced preference logic programming (PLP) as an extension of constraint logic programming (CLP) for specifying optimization problems. Essentially, in PLP we can designate certain predicates as optimization predicates, and we can specify the objective function by stating preference criteria for determining the optimal solutions to these predicates. <p> The above query works by restricting the feasible solution space to paths between a and b that do not pass through c. We provide model theoretic semantics for relaxation using ideas from the model theory for preference logic programs <ref> [4] </ref>. The model theoretic semantics for PLP is given in terms of possible worlds where each world is a model for the constraints and the ordering among the worlds is determined by the preferences [4]. <p> provide model theoretic semantics for relaxation using ideas from the model theory for preference logic programs <ref> [4] </ref>. The model theoretic semantics for PLP is given in terms of possible worlds where each world is a model for the constraints and the ordering among the worlds is determined by the preferences [4]. We are interested in the preferential consequences, or truth in the optimal worlds, i.e., there is no other world in the model that is better. To provide the semantics for RELAX goals, we first note that, for truth in the optimal world, both constraints and preferences must be satisfied. <p> We also provide an operational semantics for computing the relaxed preferential consequences of a program. For this purpose, we first perform a program transformation on the definitions of the optimization predicates that must be relaxed, and then use a variation of the operational semantics for PLP <ref> [4] </ref> to compute the relaxed preferential consequences. The rest of the paper is organized as follows. Section 2 introduces preference logic programs and discusses their model theoretic and operational semantics. Section 3 shows the translation scheme from HCLP to PLP, and illustrates it with a simple example. <p> Thus pruning of sub-optimal solutions occurs at each recursive call. 2.2 Model Theoretic Semantics of Preference Logic Programs We build models for preference logic programs using ideas from modal logic. Due to space constraints, we give a brief account of the model theory, the interested reader is referred to <ref> [4] </ref> for further details. <p> Let us define p-formulae to be formulae that are constructed from atomic formulae by using the connective ^ and _ and the quantifiers 9 and 8, i.e., formulae without negation. The reader is referred to <ref> [4] </ref> for a justification for such formulae. Definition 2.4 Given a preference logic program P, a p-formula F and, M the intended preference model for P. F is said to be a preferential consequence of P if F is true in some strongly optimal world in M. <p> The declarative semantics, D P , is defined to be the set fA 2 B P j P j Ag. 2.3 Operational Semantics for Preference Logic Programs We now summarize the top-down derivation scheme for computing the optimal answers presented in <ref> [4] </ref>. We note that we do not incur the expense of general theorem proving in modal logic because we are only interested in computing preferential consequences rather than logical consequences. <p> We write P j~ G if 2 fi. PTSLD-derivations are sound for arbitrary preference logic programs, but complete for the class of stratified preference logic programs with finite search trees <ref> [4] </ref>. 3 Relaxing Constraints Applications such as interactive graphics, planning, document formatting, and decision support benefit from the ability to specify required as well as relaxable constraints. <p> Theorem 2 (Soundness) Given a preference logic program P and a relaxable query G, if is a relaxed computed optimal answer to G then G is a relaxed preferential consequence of P and G. The theorem follows from the following proposition and soundness of PTSLD-derivations <ref> [4] </ref>. <p> In earlier work <ref> [4] </ref>, we showed how optimization problems can be specified declaratively in the paradigm of preference logic programming. This paper extends our previous work in showing how the PLP paradigm can also capture the notion of relaxation.
Reference: [5] <author> J. Jaffar and J. L. Lassez. </author> <title> Constraint Logic Programming. </title> <booktitle> In Proc. 14th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 111-119, </pages> <year> 1987. </year>
Reference-contexts: The First-Order Theory: The first-order clauses of a preference logic program can have one of two forms: 1. H B 1 ; : : : ; B n , (n 0), i.e., definite clauses. In general, some of the B i s could be constraints as in <ref> [5] </ref>. 2. H ! C 1 ; : : : ; C l j B 1 ; : : : ; B m , (l; m 0), i.e., optimization clauses. C 1 ; : : : ; C l are constraints as in [5] that must be satisfied for this clause <p> i s could be constraints as in <ref> [5] </ref>. 2. H ! C 1 ; : : : ; C l j B 1 ; : : : ; B m , (l; m 0), i.e., optimization clauses. C 1 ; : : : ; C l are constraints as in [5] that must be satisfied for this clause to be applicable to a goal. In addition, the predicate symbols appearing in a PLP can be partitioned into three disjoint sets, depending on the kinds of clauses used to define them: 1.
Reference: [6] <author> J. Jaffar and M. J. Maher. </author> <title> Constraint Logic Programming: A Survey. </title> <journal> Journal of Logic Programming, </journal> <year> 1994. </year>
Reference-contexts: 1 Introduction The use of constraints in logic programming is a powerful technique for modeling a variety of complex problems <ref> [6, 8] </ref>.
Reference: [7] <author> S. Mantha. </author> <title> First-Order Preference Theories and their Applications. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: This is the main topic of the present paper. While there has been considerable research on partial constraint satisfaction [3], not much has been done within the framework of logic programming. Two notable efforts are Relaxable Horn Clauses <ref> [2, 7] </ref> and Hierarchical Constraint Logic Programming [1, 9].
Reference: [8] <author> P. van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction The use of constraints in logic programming is a powerful technique for modeling a variety of complex problems <ref> [6, 8] </ref>.
Reference: [9] <author> M. Wilson and A. Borning. </author> <title> Hierarchical Constraint Logic Programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 16 </volume> <pages> 277-318, </pages> <year> 1993. </year> <month> 15 </month>
Reference-contexts: This is the main topic of the present paper. While there has been considerable research on partial constraint satisfaction [3], not much has been done within the framework of logic programming. Two notable efforts are Relaxable Horn Clauses [2, 7] and Hierarchical Constraint Logic Programming <ref> [1, 9] </ref>. <p> However, stating the relaxation criteria in this way, i.e., in terms of goals local to a clause, provides only limited expressiveness for our intended applications. Hierarchical Constraint Logic Programming (HCLP) <ref> [1, 9] </ref> is a paradigm that has proven useful for performing constraint relaxation in applications such as interactive graphics, document formatting, and scheduling. HCLP extends CLP by supporting required as well as relaxable constraints. <p> In essence, by choosing a comparator and associating strengths with relaxable constraints, the programmer can control the order in which constraints are to be relaxed. Wilson and Borning <ref> [9] </ref> claim that the comparator can be viewed as a preference relation among the various models for the required constraints. In this paper, we show how the PLP paradigm can be used 1 to encode HCLP, thereby providing a rigorous substantiation of this claim. <p> In this paper, we show how the PLP paradigm can be used 1 to encode HCLP, thereby providing a rigorous substantiation of this claim. It may be noted that, since optimization cannot be precisely simulated in HCLP <ref> [9] </ref>, PLP is a more expressive paradigm for problems requiring optimization and relaxation. We also consider the relaxation of preferences in this paper, as it is also pragmatically motivated. Consider, for example, the query ?- sh dist (a,b,Cost,Path), notinpath (c,Path) where sh dist is as defined earlier. <p> Borning et al <ref> [1, 9] </ref> 6 introduced the paradigm of Hierarchical Constraint Logic Programming (HCLP) by extending CLP to support required as well as relaxable constraints. Essentially, the solutions of interest must satisfy the required constraints but need not satisfy the relaxable constraints. <p> In this section, we show how HCLP programs can be translated into PLP programs, thereby demonstrating the power of PLP for expressing constraint relaxation problems. 3.1 Hierarchical Constraint Logic Programming We start with a brief review of HCLP <ref> [9] </ref>. A constraint c is a relation over an appropriate domain, and a labeled constraints lc is a constraint c with strength l, where the strengths of constraints are taken from a totally-ordered domain. A constraint hierarchy H is a finite collection of labeled constraints. <p> To compare different solutions to the required constraints, the comparator makes use of error functions, which determine how well a particular solution satisfies a given constraint. These error functions return 0 if and only if the constraint is satisfied by the solution. Furthermore, most comparators introduced in <ref> [9] </ref> combine errors at a given level in the hierarchy by means of combining functions g. <p> For example, consider the following trivial HCLP program adapted from <ref> [9] </ref>: 7 b (X) a (X), weak X &gt; 6. a (X) strong X = 1. a (X) required X &gt; 0, required X &lt; 10, weak X &lt; 4. <p> We now present a systematic translation of a HCLP program into a PLP program. In accordance with the operational semantics of HCLP <ref> [9] </ref>, given a top-level query q, the translated PLP program collects all relaxable constraints arising from q into a global list, and processes them after all required constraints arising from q have been satisfied. <p> Thus, we have shown that the notion of constraint relaxation in HCLP can be encoded as optimization in PLP. From the above discussion, it should be clear that preference logic programs also allow the notion of inter-hierarchy comparison <ref> [9] </ref> to be programmed. We now introduce a novel notion of relaxing preferences as opposed to relaxin constraints. 4 Relaxing Preferences In general a relaxable query has the form: ?- RELAX p ( t) WRT c (u), where p is an O-predicate and c is a C-predicate. <p> This paper extends our previous work in showing how the PLP paradigm can also capture the notion of relaxation. We showed how problems that are expressed using both required and relaxable constraints in HCLP <ref> [9] </ref> can be systematically translated into equivalent PLP programs. In the translated PLP programs, arbiter clauses enforce the ordering over solutions that the comparator in the HCLP scheme enforces. PLP also provides with the ability to explicitly program the comparator to suit the application at hand.
References-found: 9

