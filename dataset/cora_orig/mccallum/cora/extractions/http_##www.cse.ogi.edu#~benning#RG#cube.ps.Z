URL: http://www.cse.ogi.edu/~benning/RG/cube.ps.Z
Refering-URL: http://www.cse.ogi.edu/~benning/RG/dis_rg.html
Root-URL: http://www.cse.ogi.edu
Title: Implementing Data Cubes Efficiently  
Author: Venky Harinarayan Anand Rajaraman Jeffrey D. Ullman 
Affiliation: Stanford University  
Abstract: Decision support applications involve complex queries on very large databases. Since response times should be small, query optimization is critical. Users typically view the data as multidimensional data cubes. Each cell of the data cube is a view consisting of an aggregation of interest, like total sales. The values of many of these cells are dependent on the values of other cells in the data cube. A common and powerful query optimization technique is to materialize some or all of these cells rather than compute them from raw data each time. Commercial systems differ mainly in their approach to materializing the data cube. In this paper, we investigate the issue of which cells (views) to materialize when it is too expensive to materialize all views. A lattice framework is used to express dependencies among views. We then present greedy algorithms that work off this lattice and determine a good set of views to materialize. The greedy algorithm performs within a small constant factor of optimal under a variety of models. We then consider the most common case of the hypercube lattice and examine the choice of materialized views for hypercubes in detail, giving some good tradeoffs between the space used and the average time to answer a query.
Abstract-found: 1
Intro-found: 1
Reference: [CS94] <author> S. Chaudhuri and Kyuseok Shim. </author> <title> Including Group-By in Query Optimization. </title> <booktitle> In Proceedings of the Twentieth International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 354-366, </pages> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference-contexts: The usual requirement is query execution times of a few seconds or a few minutes at the most. There are many ways to achieve such performance goals. Query optimizers and query evaluation techniques can be enhanced to handle aggregations better <ref> [CS94] </ref>, [GHQ95], [YL95], to use different indexing strategies like bit-mapped indexes and join indexes [OG95], and so on. fl Work was supported by NSF grant IRI-92-23405, by ARO grant DAAH04-95-1-0192, and by Air Force Contract F33615-93-1-1339 Authors' address: Department of Computer Science, Stanford University, Stanford, CA 94305-2140.
Reference: [ESS] <author> Arbor Software Inc. </author> <title> Multidimensional Analysis: Converting Corporate Data into Strategic Information. </title> <note> White Paper. At http://www.arborsoft.com/papers/multiTOC.html </note>
Reference-contexts: There are different commercial systems which pick one of the different strategies given above. Clearly, each strategy has its benefits. For example, for applications where performance is of paramount importance and scalability is not important we can go with the materialize-everything strategy. The Essbase system <ref> [ESS] </ref>, for example, materializes the whole data cube, while BusinessObjects [X94] materializes nothing, and the MetaCube system [STG] materializes part of the cube. There is also the issue of where the materialized data cube is stored: in a relational system or a proprietary MDDB (multi-dimensional database) system. <p> Users query the data cube, and the MDDB efficiently retrieves the value of a cell given its address. To allocate only space for those cells present in the raw data and not every possible cell of the data cube, a cell-address hashing scheme is used. Arbor's Essbase <ref> [ESS] </ref> and many other MDDBs are implemented this way. Note, this approach still materializes all the cells of the data cube present in raw data, which can be very large. The other approach is to use relational database systems and let users directly query the raw data.
Reference: [G93] <author> Goetz Graefe. </author> <title> Query Evaluation Techniques for Large Databases. </title> <journal> In ACM Computing Surveys, </journal> <volume> Vol. 25, No. 2, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: Now on the other hand if we wish to find the total sales for each part from the ancestor view (part, supplier), we need to do an aggregation over this view. We can use either hashing or sorting (with early aggregation) <ref> [G93] </ref> to do this aggregation. The cost of doing the aggregation is a function of the amount of memory available and the ratio of the number of rows in the input to that in the output.
Reference: [GBLP95] <author> J. Gray, A. Bosworth, A. Layman, H. </author> <title> Pirahesh Data Cube: A Relational Aggregation Operator Generalizing Group-By, Cross-Tab, and Sub-Totals. </title> <type> Microsoft Technical Report No. </type> <institution> MSR-TR-95-22. </institution>
Reference-contexts: In the general case, a given dimension may have many attributes as we shall see in Section 2. Users are also interested in consolidated sales: for example, what is the total sales of a given part p to a given customer c? <ref> [GBLP95] </ref> suggest adding an additional value "ALL" to the domain of each dimension to achieve this. In the question above we want the total sales of a given part p to a given customer c for "ALL" suppliers. <p> There are products in both the relational world [STG], and the MDDB world (Sinper's Spreadsheet Connector) that materialize only parts of the data cube. We believe however that this paper is the first to investigate this fundamental problem in such detail. <ref> [GBLP95] </ref> discusses generalizing the SQL GROUP-BY operator to a data cube operator. They introduce the notion of "ALL" that we mention. However, they also claim the size of the entire data cube is not much larger than the size of the corresponding GROUP-BY. <p> In order to be a lattice, any two elements (views or queries) must have a least upper bound and a greatest lower bound according to the ordering. However, in practice, we only need the assumptions that 2 The analysis in <ref> [GBLP95] </ref>, assumes that every possible cell of the data cube exists. However, in most cases, data cubes are sparse: only a small fraction of all possible cells are present. In such cases, the size of the data cube can be much larger than the corresponding GROUP-BY.
Reference: [GHQ95] <author> A. Gupta, V. Harinarayan, and D. Quass. </author> <booktitle> Aggregate-Query Processing in Data Warehousing Environments . In Proceedings of the 21st International VLDB Conference, </booktitle> <pages> pages 358-369, </pages> <year> 1995. </year>
Reference-contexts: The usual requirement is query execution times of a few seconds or a few minutes at the most. There are many ways to achieve such performance goals. Query optimizers and query evaluation techniques can be enhanced to handle aggregations better [CS94], <ref> [GHQ95] </ref>, [YL95], to use different indexing strategies like bit-mapped indexes and join indexes [OG95], and so on. fl Work was supported by NSF grant IRI-92-23405, by ARO grant DAAH04-95-1-0192, and by Air Force Contract F33615-93-1-1339 Authors' address: Department of Computer Science, Stanford University, Stanford, CA 94305-2140.
Reference: [HNSS95] <author> P. J. Haas, J. F. Naughton, S. Seshadri, L. </author> <title> Stokes. </title> <booktitle> Sampling-Based Estimation of the Number of Distinct Values of an Attribute In Proceedings of the 21st International VLDB Conference, </booktitle> <pages> pages 311-320, </pages> <year> 1995. </year>
Reference-contexts: There are many well-known sampling techniques that we can use to determine the number of distinct values of attributes in a relation <ref> [HNSS95] </ref>. 4 Optimization of Data-Cube Lattices Our most important objective is to develop techniques for optimizing the space-time tradeoff when implementing a lattice of views.
Reference: [OG95] <author> P. O'Neill and G. Graefe. </author> <title> Multi-Table Joins Through Bitmapped Join Indexes. </title> <booktitle> In SIGMOD Record, </booktitle> <pages> pages 8-11, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: There are many ways to achieve such performance goals. Query optimizers and query evaluation techniques can be enhanced to handle aggregations better [CS94], [GHQ95], [YL95], to use different indexing strategies like bit-mapped indexes and join indexes <ref> [OG95] </ref>, and so on. fl Work was supported by NSF grant IRI-92-23405, by ARO grant DAAH04-95-1-0192, and by Air Force Contract F33615-93-1-1339 Authors' address: Department of Computer Science, Stanford University, Stanford, CA 94305-2140. Email: fvenky, anand, ullmang@db.stanford.edu. 1 A commonly used technique is to materialize (precompute) frequently-asked queries.
Reference: [TPCD] <author> F. Raab, </author> <title> editor. TPC Benchmark(tm) D (Decision Support), Proposed Revision 1.0. Transaction Processing Performance Council, </title> <address> San Jose, CA 95112, </address> <month> 4 April </month> <year> 1995. </year>
Reference-contexts: The query is answered by looking up the value in cell (p; ALL; c). We use the TPC-D database of size 1GB as a running example throughout this paper. For more details on this benchmark refer to <ref> [TPCD] </ref>. We have only discussed the presentation of the data set as a multi-dimensional data cube to the user. The following implementation alternatives are possible: 1. Physically materialize the whole data cube. This approach gives the best query response time.
Reference: [Rad95] <author> Alan Radding. </author> <title> Support Decision Makers With a Data Warehouse. In Datamation, </title> <address> March 15, </address> <year> 1995. </year>
Reference-contexts: Email: fvenky, anand, ullmang@db.stanford.edu. 1 A commonly used technique is to materialize (precompute) frequently-asked queries. The data warehouse at the Mervyn's department-store chain, for instance, has a total of 2400 precomputed tables <ref> [Rad95] </ref> to improve query performance. Picking the right set of queries to materialize is a nontrivial task, since by materializing a query we may be able to answer other queries quickly.
Reference: [STG] <institution> Stanford Technology Group, Inc. </institution> <note> Designing the Data Warehouse On Relational Databases. White Paper. </note>
Reference-contexts: Clearly, each strategy has its benefits. For example, for applications where performance is of paramount importance and scalability is not important we can go with the materialize-everything strategy. The Essbase system [ESS], for example, materializes the whole data cube, while BusinessObjects [X94] materializes nothing, and the MetaCube system <ref> [STG] </ref> materializes part of the cube. There is also the issue of where the materialized data cube is stored: in a relational system or a proprietary MDDB (multi-dimensional database) system. In this paper, we assume that the data cube is stored in "summary" tables in a relational system. <p> MDDBs on the other hand have much better query performance, but are not very scalable. By materializing only selected parts of the data cube, we can improve performance in the relational database, and improve scalability in MDDBs. There are products in both the relational world <ref> [STG] </ref>, and the MDDB world (Sinper's Spreadsheet Connector) that materialize only parts of the data cube. We believe however that this paper is the first to investigate this fundamental problem in such detail. [GBLP95] discusses generalizing the SQL GROUP-BY operator to a data cube operator.
Reference: [TM75] <author> J. P. Tremblay and R. Manohar. </author> <title> Discrete Mathematical Structures with Applications to Computer Science. </title> . <publisher> McGraw Hill Book Company, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: There are certain queries that are not comparable with each other using the operator. For example: (part) 6 (customer) and (customer) 6 (part). The operator imposes a partial ordering on the queries. We shall talk about the views of a data-cube problem as forming a lattice <ref> [TM75] </ref>. In order to be a lattice, any two elements (views or queries) must have a least upper bound and a greatest lower bound according to the ordering. <p> This lattice is called the direct product of the dimensional lattices <ref> [TM75] </ref>.
Reference: [X94] <editor> John Xenakis, editor. </editor> <title> Multidimensional Databases. In Application Development Strategies, </title> <month> April </month> <year> 1994. </year> <month> 24 </month>
Reference-contexts: Clearly, each strategy has its benefits. For example, for applications where performance is of paramount importance and scalability is not important we can go with the materialize-everything strategy. The Essbase system [ESS], for example, materializes the whole data cube, while BusinessObjects <ref> [X94] </ref> materializes nothing, and the MetaCube system [STG] materializes part of the cube. There is also the issue of where the materialized data cube is stored: in a relational system or a proprietary MDDB (multi-dimensional database) system.
Reference: [YL95] <author> W. P. Yan and P. A. Larson. </author> <title> Eager Aggregation and Lazy Aggregation. </title> <booktitle> In Proceedings of the 21st International VLDB Conference, </booktitle> <pages> pages 345-357, </pages> <year> 1995. </year> <month> 25 </month>
Reference-contexts: The usual requirement is query execution times of a few seconds or a few minutes at the most. There are many ways to achieve such performance goals. Query optimizers and query evaluation techniques can be enhanced to handle aggregations better [CS94], [GHQ95], <ref> [YL95] </ref>, to use different indexing strategies like bit-mapped indexes and join indexes [OG95], and so on. fl Work was supported by NSF grant IRI-92-23405, by ARO grant DAAH04-95-1-0192, and by Air Force Contract F33615-93-1-1339 Authors' address: Department of Computer Science, Stanford University, Stanford, CA 94305-2140.
References-found: 13

