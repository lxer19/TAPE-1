URL: http://www.cis.ohio-state.edu/volviz/Papers/1995/cfd.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~kurzion/resume.html
Root-URL: 
Title: Grouping Volume Renderers for Enhanced Visualization in Computational Fluid Dynamics  
Author: Roni Yagel David S. Ebert James N. Scott and Yair Kurzion 
Affiliation: 1 Computer Science Department, University of Maryland Baltimore County 2 Department of Computer and Information Science, The Ohio State University 3 Department of Aeronautical and Astronautical Engineering, The Ohio State University  
Abstract: This paper advocates the use of a group of renderers rather than any specific rendering method. We describe a bundle containing four alternative approaches to visualizing volume data. One new approach uses realistic volumetric gas rendering techniques to produce photo-realistic images and animations. The second uses ray casting that is based on a simpler illumination model and is mainly centered around a versatile new tool for the design of transfer functions. The third method employs a simple illumination model and rapid rendering mechanisms to provide efficient preview capabilities. The last one reduces data magnitude by displaying the most visible components and exploits rendering hardware to provide real time browsing capabilities. We show that each rendering tool provides a unique service and demonstrate the combined utility of our group of volume renderers in computational uid dynamic (CFD) visualization. While one tool allows the explorer to render rapidly for navigation through the data, another tool allows one to emphasize data features (e.g., shock waves), and yet another tool allows one to realistically render the data. We believe that only through the deployment of groups of renderers will the scientist be well served and equipped to form numerous perspectives of the same dataset, each providing different insights into the data.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Avila, L. Sobierajski, and A. Kaufman, </author> <title> Towards a Comprehensive Volume Visualization System, </title> <booktitle> in Proceedings of Visualization92, </booktitle> <pages> pp. 13-20, </pages> <month> October </month> <year> 1992. </year>
Reference: [2] <author> J. </author> <title> Blinn, Light Reection Functions for Simulation of Clouds and Dusty Surfaces, </title> <journal> Proceed ings of SIGGRAPH82, Computer Graphics 16, </journal> <volume> 3, </volume> <pages> pp. 21-29, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: Pseudo-code for the basic gas rendering algorithm. 11 integral to calculate the opacity along the ray [21]. The approximation used is: where t is the optical depth <ref> [2] </ref> of the material, r () is the modified CFD value used as the volume density for rendering, t near is the starting point for the volume tracing, and t far is the ending point. <p> The following function is used to achieve these results: r () = (CFD_value density_scalar) power_exponent 3.2 Illumination Algorithm For the gaseous rendering, the following low-albedo illumination model is used, where the phase-function is based on the summation of Henyey-Greenstein functions as described in <ref> [2] </ref>: where I is: Phase (q) is the phase function, the function characterizing the total brightness of a particle as a function of the angle between the light and the eye [2]. <p> low-albedo illumination model is used, where the phase-function is based on the summation of Henyey-Greenstein functions as described in <ref> [2] </ref>: where I is: Phase (q) is the phase function, the function characterizing the total brightness of a particle as a function of the angle between the light and the eye [2]. I i (x (t),y (t),z (t)) is the amount of light from light source i reected from this element. The system also features a fast, accurate table-based volume shadowing technique, [11].
Reference: [3] <author> S. Bryson and C. Levit, </author> <title> The Virtual Wind Tunnel, </title> <journal> IEEE Computer Graphics and Applica tions, </journal> <volume> 12(4) </volume> <pages> 25-34, </pages> <month> July </month> <year> 1992. </year> <month> 28 </month>
Reference: [4] <author> D. Cohen and A. Kaufman, </author> <title> Scan-Conversion Algorithms for Linear and Quadratic Objects, in Volume Visualization, </title> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 280-301, </pages> <year> 1990. </year>
Reference-contexts: On the other hand, we prefer to employ 26-rays because they can be twice as fast as their 6-connected counterpart. For more information on the attributes of discrete rays refer to <ref> [4] </ref>. One solution is to adaptively alternate between 26- and 6-rays by traversing the empty space with 26-rays and then FIGURE 7. Template driven traversal with sub-voxel addresses for object-space supersampling. The seventh sample along each ray is circled. 17 switching to 6-rays in the vicinity of objects.
Reference: [5] <author> D. Cohen and Z. Shefer, </author> <title> Proximity Clouds, an Acceleration Technique for Ray Tracing, </title> <journal> The Visual Computer, </journal> <volume> 11(1) </volume> <pages> 27-38, </pages> <month> November </month> <year> 1994. </year>
Reference: [6] <author> R. L. Cook, </author> <title> Stochastic Sampling in Computer Graphics, </title> <journal> ACM Transaction on Graphics, </journal> <volume> 5(1) </volume> <pages> 51-72, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: This phenomena is illustrated in Fig. 6 which shows three 2D rasters with rays emanating from different sub-pixel locations. Although different ray origins yield different forms, all rays with the same relative displacement of the origin have the same form. This observation can be used even for stochastic supersampling <ref> [6] </ref> as long as the ray-origin is confined to a set of predefined sub-pixel addresses for which template are precomputed.
Reference: [7] <author> J. Danskin and P. Hanrahan, </author> <title> Fast Algorithms for Volume Ray Tracing, </title> <booktitle> 1992 Workshop on Vol ume Visualization, </booktitle> <pages> pp. 91-98, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Therefore, it is observed that one can avoid sampling in 3D regions having uniform or similar voxel values <ref> [7] </ref>. Inter-ray coherency: There is a great deal of coherency between rays in parallel viewing, that is, all rays, although having different origin, have the same slope. Therefore, the set of steps these rays take when traversing the volume are similar. <p> However, employing 26-rays has an overall speedup compared to 6-rays mainly in diagonal views when performing parallel projection. The sampling rate along a ray can also be changed in accordance to changes in the traversed density <ref> [7] </ref>. Whenever there is little change in the field of values, the ray can make larger steps without affecting the sampling quality.
Reference: [8] <author> D. S. Ebert, </author> <title> Solid Spaces: A Unified Approach to Describing Object Attributes, </title> <type> Ph.D. thesis, </type> <institution> The Ohio State University, </institution> <year> 1991. </year>
Reference: [9] <author> D. Ebert, </author> <title> Design and Animation of Volume Density Functions, </title> <journal> The Journal of Visualization and Computer Animation, </journal> <volume> 4 </volume> <pages> 1-20, </pages> <year> 1993. </year>
Reference: [10] <author> D. Ebert, W. Carlson, and R. Parent, </author> <title> Solid Spaces and Inverse Particle Systems for Controlling the Animation of Gases and Fluids, </title> <journal> The Visual Computer, </journal> <volume> 10(4) </volume> <pages> 179-190, </pages> <month> September </month> <year> 1994. </year>
Reference: [11] <author> D. Ebert and R. Parent, </author> <title> Rendering and Animation of Gaseous Phenomena by Combining Fast Volume and Scanline A-buffer Techniques, </title> <booktitle> Proceedings of SIGGRAPH90, Computer Graph ics, </booktitle> <volume> 24(4) </volume> <pages> 357-366, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Hidden volume elimination is used to determine the visibility order of the voxels. Several standard methods used for hidden surface elimination can be employed fruitfully. Z-buffer and front-to-back [31] and back-to-front [14] methods have been commonly employed, while the A-buffer <ref> [11] </ref> method has been used for rendering gaseous volumes. 3 The forward viewing approach, although surprisingly simple, is inherently very inefficient. The inefficiency of this method is rooted in the N 3 vector-by-matrix multiplications it calculates and the N 3 accesses to the Z-buffer it requires. <p> I i (x (t),y (t),z (t)) is the amount of light from light source i reected from this element. The system also features a fast, accurate table-based volume shadowing technique, <ref> [11] </ref>. A three-dimensional shadow table that surrounds the volume is efficiently calculated once per frame using a wave propagation technique. During rendering, the shadowing for each volume sample is determined by interpolating the eight shadow values that define the surrounding shadow table cell.
Reference: [12] <author> D. S. Ebert, R. Yagel, J. Scott, and Y. Kurzion, </author> <title> Volume Rendering Methods for Computational Fluid Dynamics Visualization, </title> <booktitle> Proceedings of Visualization'94, </booktitle> <address> Washington, DC, </address> <month> October </month> <year> 1994, </year> <pages> pp. 232-239. </pages>
Reference-contexts: However, these systems provide interactivity at the expense of image quality. Most of these systems use simple streamline techniques or approximated volume rendering to visually represent the complex three-dimensional ow. Since the first appearance of this work <ref> [12] </ref>, attention has been paid to these concerns in the form of add-on modules to existing visualization packages.
Reference: [13] <author> H.G. Feichtinger, and K. </author> <title> Grochenig,Error Analysis in Regular and Irregular Sampling Theo ry, </title> <journal> Applicable Analysis, </journal> <volume> 50 </volume> <pages> 167-189, </pages> <year> 1993. </year>
Reference-contexts: In essence, all rendering methods involve resampling, which requires reconstruction of a continuous signal from a set of discrete samples. Since Shannons sampling theorem [53] does not hold for irregular spacing between samples, one have to consider recently developed theory <ref> [13] </ref> to guarantee some level of reconstruction quality. Visualization of Unsteady Jet Flow The accurate analysis of unsteady ow in high speed jets is essential in the identification and assessment of noise production mechanisms.
Reference: [14] <author> G. Frieder, D. Gordon, and R. A. Reynolds, </author> <title> Back-to-Front Display of Voxel-Based Objects, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5(1) </volume> <pages> 52-60, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Hidden volume elimination is used to determine the visibility order of the voxels. Several standard methods used for hidden surface elimination can be employed fruitfully. Z-buffer and front-to-back [31] and back-to-front <ref> [14] </ref> methods have been commonly employed, while the A-buffer [11] method has been used for rendering gaseous volumes. 3 The forward viewing approach, although surprisingly simple, is inherently very inefficient. <p> The inefficiency of this method is rooted in the N 3 vector-by-matrix multiplications it calculates and the N 3 accesses to the Z-buffer it requires. Some methods have been suggested that exploit the spatial coherency between voxels such as recursive divide and conquer (octree) [28], pre-calculated tables <ref> [14] </ref>, and incremental transformations [26]. To accelerate the splatting algorithm one may employ existing hardware capabilities to render splats as texture maps [40]. Sobierajski et al have described [39] a simplified approximation to the splatting method for viewing in which only voxels comprising the objects surface are maintained.
Reference: [15] <author> A. S. Glassner, (ed.), </author> <title> An Introduction to Ray Tracing, </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: Adaptive screen sampling is well known in traditional ray tracing <ref> [15] </ref> where the number of rays emitted from a given pixel is adapted to the color change in a small neighborhood.
Reference: [16] <author> G. Gardner, </author> <title> Forest Fire Simulation, </title> <booktitle> Proceedings of SIGGRAPH90, Computer Graphics 24(4):430, </booktitle> <month> August </month> <year> 1990. </year>
Reference: [17] <author> M. P. Garrity, </author> <title> Raytracing Irregular Volume Data, </title> <booktitle> San Diego Workshop on Volume Visualiza tion, Computer Graphics, </booktitle> <volume> 24(5) </volume> <pages> 35-40, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: While our method for resampling curvilinear grid data may cause some loss of detail (minimization case), all CFD data points contribute to the final image. This method produces fewer artifacts than direct ray-tracing of irregular grid data <ref> [17] </ref> or data slicing parallel to screen scan lines [18], where adjacent rays (or slices) may entirely miss some CFD cells.
Reference: [18] <author> C. Giertsen, </author> <title> Volume Visualization of Sparse Irregular Meshes, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 12(2), </volume> <month> March </month> <year> 1992, </year> <pages> pp. 40-48. </pages>
Reference-contexts: While our method for resampling curvilinear grid data may cause some loss of detail (minimization case), all CFD data points contribute to the final image. This method produces fewer artifacts than direct ray-tracing of irregular grid data [17] or data slicing parallel to screen scan lines <ref> [18] </ref>, where adjacent rays (or slices) may entirely miss some CFD cells.
Reference: [19] <author> P. Hanrahan, </author> <title> Three-Pass Affine Transforms for Volume Rendering, San Diego Workshop on Volume Visualization, </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 71-78, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Reconstruction in three-dimensions can be performed to annul the effect of these artifacts. Hanrahan proposed a method of decomposing the transformation matrix into a series of lower dimensional shears <ref> [19] </ref>. Such a decomposition allows for an easier reconstruction operation along a single dimension (for each shearing step). Splatting [45] is another reconstruction technique employed to reduce the impact of holing and doubling artifacts by reconstructing in object space using a Gaussian filter.
Reference: [20] <author> J. Kajiya and T. Kay, </author> <title> Rendering Fur with Three Dimensional Textures, </title> <journal> Proceedings of SIG GRAPH89, Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 271-280, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The final increment along the ray may be smaller, so its opacity is scaled proportionally <ref> [20] </ref>. The volume density functions interpolate the values stored in the CFD grid and allow density scalars and power functions to be applied to enhance the visualization results. By applying a density scalar, more volumetric information can be seen.
Reference: [21] <author> J. Kajiya and B. Von Herzen, </author> <title> Ray Tracing Volume Densities. </title> <booktitle> Proceedings of SIGGRAPH84, Computer Graphics 18(3) </booktitle> <pages> 165-174, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Pseudo-code for the basic gas rendering algorithm. 11 integral to calculate the opacity along the ray <ref> [21] </ref>. The approximation used is: where t is the optical depth [2] of the material, r () is the modified CFD value used as the volume density for rendering, t near is the starting point for the volume tracing, and t far is the ending point.
Reference: [22] <author> M. Kass and G. Miller, </author> <title> Rapid, Stable Fluid Dynamics for Computer Graphics, </title> <booktitle> Proceedings of SIGGRAPH90, Computer Graphics, </booktitle> <address> 24,(4):49-58, </address> <month> August </month> <year> 1990. </year>
Reference: [23] <author> D. Laur and P. Hanrahan, </author> <title> Hierarchical Splatting: A Progressive Refinement Algorithm for Vol ume Rendering, </title> <journal> Proceedings of SIGGRAPH91, Computer Graphics, </journal> <volume> 25 </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Additional speedup is gained by culling voxels that have a normal pointing away from the observer. Finally, adaptive refinement of image quality, and hierarchical splatting are also possible <ref> [23] </ref>. Our splat renderer (Section 6) is based on a combination of these ideas where a sub-set of the voxels is maintained and rendered as texture splats. Image order methods, also known as backward-feed methods, which include ray-casting, have been specifically developed for rendering volumes [24].
Reference: [24] <author> M. Levoy, </author> <title> Volume Rendering by Adaptive Refinement, </title> <journal> The Visual Computer, </journal> <volume> 6(1) </volume> <pages> 2-7, </pages> <month> Feb 29 ruary </month> <year> 1990. </year>
Reference-contexts: Our splat renderer (Section 6) is based on a combination of these ideas where a sub-set of the voxels is maintained and rendered as texture splats. Image order methods, also known as backward-feed methods, which include ray-casting, have been specifically developed for rendering volumes <ref> [24] </ref>. In ray-casting, rays are cast from the observers eye location through the pixels of the image. The color assigned to the pixel is that of the background or the accumulated color obtained by traversing the object. Holes are not created in images rendered by backward-feed methods. <p> That is, it is highly probable that between two pixels having identical or similar color we will find another pixel having the same (or similar) color. Therefore it was observed that one can avoid shooting a ray for such obviously identical pixels <ref> [24] </ref>. 4 Object-space coherency: The extension of the pixel-space coherency to 3D states that there is coherency between voxels in object space. Therefore, it is observed that one can avoid sampling in 3D regions having uniform or similar voxel values [7].
Reference: [25] <author> W. E. Lorenson and H. E. Cline, </author> <title> Marching Cubes: A High Resolution 3D Surface Reconstruc tion Algorithm, </title> <booktitle> Proceedings of SIGGRAPH87, Computer Graphics 21(4) </booktitle> <pages> 163-169, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: One class of these methods converts the voxel representation into surface and line primitives <ref> [25] </ref>. However, methods of this class suffer from various disadvantages that mainly arise from the ambiguity of determining the exact position of the surface and the fact that only a small subset of the data is visualized. As an alternative, direct methods have been developed to render volumes.
Reference: [26] <author> R. Machiraju and R. Yagel, </author> <title> Efficient Feed-Forward Volume Rendering Techniques for Vector and Parallel Processors, </title> <booktitle> in SUPERCOMPUTING93, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Some methods have been suggested that exploit the spatial coherency between voxels such as recursive divide and conquer (octree) [28], pre-calculated tables [14], and incremental transformations <ref> [26] </ref>. To accelerate the splatting algorithm one may employ existing hardware capabilities to render splats as texture maps [40]. Sobierajski et al have described [39] a simplified approximation to the splatting method for viewing in which only voxels comprising the objects surface are maintained.
Reference: [27] <author> N. Max, R. Crawfis, and D. Williams, </author> <title> Visualization for Climate Modeling, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(4) </volume> <pages> 18-24, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: There has been some recent work on addressing some of the shortcomings of current CFD visualization systems. Surface particles [44], and a combination of volume rendering, vector fields, and tex 5 turing <ref> [27] </ref> have been used to capture the dynamics and massive information content in a CFD simulation. There has also been some work to develop systems that provide interactive visualization for CFD [3][43]. However, these systems provide interactivity at the expense of image quality.
Reference: [28] <author> D.J. Meagher, </author> <title> Geometric Modeling using Octree Encoding, </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 19(2) </volume> <pages> 129-147, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: The inefficiency of this method is rooted in the N 3 vector-by-matrix multiplications it calculates and the N 3 accesses to the Z-buffer it requires. Some methods have been suggested that exploit the spatial coherency between voxels such as recursive divide and conquer (octree) <ref> [28] </ref>, pre-calculated tables [14], and incremental transformations [26]. To accelerate the splatting algorithm one may employ existing hardware capabilities to render splats as texture maps [40].
Reference: [29] <author> T. Nishita, Y. Miyawaki, and E. Nakamae, </author> <title> A Shading Model for Atmospheric Scattering Con sidering Luminous Intensity Distribution of Light Sources, </title> <booktitle> Proceedings of SIGGRAPH87, Computer Graphics 21(4) </booktitle> <pages> 303-310, </pages> <month> July </month> <year> 1987. </year>
Reference: [30] <author> K. Perlin and E. Hoffert, Hypertexture, </author> <booktitle> Proceedings of SIGGRAPH89, Computer Graphics 23(3) </booktitle> <pages> 253-262, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The rendering techniques currently available in this system for volumes include gas-based rendering methods and traditional density-based volumetric rendering <ref> [30] </ref>. As mentioned above, the gaseous renderer allows multiple CFD values to be displayed simultaneously to increase the quantity of information conveyed in a single image. One CFD value is mapped to density for the volume rendering. <p> This figure, shows the density field by light attenuation/mapping to opacity while the color of the volume is determined from the Mach number field. 3.1 Gaseous Volume Rendering Algorithm The volume rendering technique used for gases in this system is similar to the one discussed in <ref> [30] </ref>. The ray from the eye through the pixel is traced through the defining geometry of the volume.
Reference: [31] <author> R. A. Reynolds, D. Gordon, and L. S. Chen, </author> <title> A Dynamic Screen Technique for Shaded Graphic Display of Slice-Represented Objects, Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 38(3) </volume> <pages> 275-298, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Hidden volume elimination is used to determine the visibility order of the voxels. Several standard methods used for hidden surface elimination can be employed fruitfully. Z-buffer and front-to-back <ref> [31] </ref> and back-to-front [14] methods have been commonly employed, while the A-buffer [11] method has been used for rendering gaseous volumes. 3 The forward viewing approach, although surprisingly simple, is inherently very inefficient.
Reference: [32] <author> H. Rushmeier and K. Torrance, </author> <title> The Zonal Method for Calculating Light Intensities in the Pres ence of a Participating Medium, </title> <booktitle> Proceedings of SIGGRAPH87, Computer Graphics 21(4) </booktitle> <pages> 293-302, </pages> <month> July </month> <year> 1987. </year>
Reference: [33] <author> J. N. Scott, </author> <title> Numerical Analysis of Jet Noise Generation in Unsteady Jet Flow, </title> <booktitle> AIAA 91 2254, AIAA/SAE/ASME 27th Joint Propulsion Conference, </booktitle> <address> June 1991, Sacramento, CA. </address>
Reference-contexts: In addressing such problems the adaptation and development of numerical simulation techniques has emerged to play a prominent role. Currently there are numerous efforts under way to expand and adapt methods from CFD to the analysis of aeroacoustic problems such as jet noise <ref> [33] </ref>. The visual FIGURE 2. A 2D dataset of density field from the circular jet. 8 ization renderings shown here are for two dimensional high speed jet configurations where the time-dependent Navier-Stokes equations have been solved numerically.
Reference: [34] <author> J. N. Scott, </author> <title> Acoustic Analysis using Numerical Solutions of the Navier-Stokes Equations, </title> <booktitle> AIAA 92-0506, AIAA 30th Aerospace Sciences Meeting & Exhibit, </booktitle> <month> January </month> <year> 1992, </year> <title> Reno, </title> <address> NV. </address>
Reference: [35] <author> J. N. Scott, </author> <title> Accuracy Considerations in the Computational Analysis of Jet Noise, </title> <booktitle> AIAA 93 0146, AIAA 31th Aerospace Sciences Meeting & Exhibit, </booktitle> <month> January </month> <year> 1993, </year> <title> Reno, </title> <address> NV. </address>
Reference: [36] <author> J. N. Scott, </author> <title> A Comparison of Numerical and Experimental Results for Unsteady Flow Associated with Jet Noise, </title> <booktitle> AIAA 94-0459, AIAA 32th Aerospace Sciences Meeting & Exhibit, </booktitle> <address> Jan uary 1994, Reno, NV. </address>
Reference: [37] <author> J. N. Scott and W. L. Hankey, </author> <title> Navier-Stokes Solutions of Unsteady Flow in a Compressor Ro tor, </title> <journal> ASME Journal of Turbo Machinery, </journal> <volume> 108 </volume> <pages> 206-215, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: We have applied our four visualization techniques to the problem of visualizing the ow between two blades of the compressor of a turbo-jet engine <ref> [37] </ref>, as shown in Fig. 1. The compressor rotor has many such blades attached to it, as shown in Fig. 1a.
Reference: [38] <author> P. Shirley and A. Tuchman, </author> <title> A Polygonal Approximation to Direct Scalar Volume Rendering, </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> December </month> <year> 1990. </year>
Reference: [39] <author> L. Sobierajski, D. Cohen, A. Kaufman, R. Yagel, and D. Acker, </author> <title> Fast Display Methods for Sur gical Planning, </title> <journal> The Visual Computer, </journal> <volume> 10(2) </volume> <pages> 116-124, </pages> <year> 1993. </year>
Reference-contexts: To accelerate the splatting algorithm one may employ existing hardware capabilities to render splats as texture maps [40]. Sobierajski et al have described <ref> [39] </ref> a simplified approximation to the splatting method for viewing in which only voxels comprising the objects surface are maintained. Additional speedup is gained by culling voxels that have a normal pointing away from the observer. Finally, adaptive refinement of image quality, and hierarchical splatting are also possible [23].
Reference: [40] <author> C. Stein, B. Becker, and N. Max, </author> <title> Sorting and Hardware Assisted Rendering for Volume Visu alization, </title> <booktitle> in Proceedings of 1994 Symposium on Volume Visualization, </booktitle> <pages> pp. 83-90, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Some methods have been suggested that exploit the spatial coherency between voxels such as recursive divide and conquer (octree) [28], pre-calculated tables [14], and incremental transformations [26]. To accelerate the splatting algorithm one may employ existing hardware capabilities to render splats as texture maps <ref> [40] </ref>. Sobierajski et al have described [39] a simplified approximation to the splatting method for viewing in which only voxels comprising the objects surface are maintained. Additional speedup is gained by culling voxels that have a normal pointing away from the observer.
Reference: [41] <author> I. E. Sutherland, R. F. Sproull, and R. A. Schumaker, </author> <title> A Characterization of Ten Hidden-Sur face Algorithms, </title> <journal> Computing Surveys, </journal> <volume> 6(1) </volume> <pages> 1-55, </pages> <month> March </month> <year> 1974. </year>
Reference-contexts: As an alternative, direct methods have been developed to render volumes. These methods can be classified as object order or image order <ref> [41] </ref>. Object order methods require the enumeration of all voxels of a volume and the determination of the affected pixels on a screen. Image order techniques, on the other hand, determine all the voxels of a volume that affect a given pixel on the screen.
Reference: [42] <author> J. K. Udupa and D. Odhner, </author> <title> Interactive Surgical Planning: High-Speed Object Rendition and Manipulation Without Specialized Hardware, </title> <booktitle> in Proceedings of the First Conference on Visu 30 alization in Biomedical Computing, </booktitle> <pages> pp. 330-335, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Note that if we pick F to be a projection onto the second coordinate, r, we merely do thresholding on the density. We name each voxel passing the F threshold a splat. The idea of fuzzy voxel set is similar to semi-boundaries and shells used by <ref> [42] </ref>. However, unlike previous methods which choose the vox-els for the set by segmentation methods, our approach chooses the voxels to be included by their contribution to the final image.
Reference: [43] <author> A. van Gelder and J. Wilhelms, </author> <title> Interactive Visualization of Flow Fields, </title> <booktitle> in Proceedings of 1992 Workshop on Volume Visualization, </booktitle> <pages> pp. 47-54, </pages> <month> October </month> <year> 1992. </year>
Reference: [44] <author> J. J. van Wijk, </author> <title> Flow Visualization with Surface Particles, </title> <journal> IEEE Computer Graphics and Appli cations, </journal> <volume> 13(4) </volume> <pages> 18-24, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: We present rendering algorithms that are aimed at supporting interactive rendering that will be suitable for tight coupling with the CFD simulation. There has been some recent work on addressing some of the shortcomings of current CFD visualization systems. Surface particles <ref> [44] </ref>, and a combination of volume rendering, vector fields, and tex 5 turing [27] have been used to capture the dynamics and massive information content in a CFD simulation. There has also been some work to develop systems that provide interactive visualization for CFD [3][43].
Reference: [45] <author> L. Westover, </author> <title> Footprint Evaluation for Volume Rendering, </title> <booktitle> Proceedings of SIGGRAPH 90, Computer Graphics, </booktitle> <volume> 24(4) </volume> <pages> 367-376, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Reconstruction in three-dimensions can be performed to annul the effect of these artifacts. Hanrahan proposed a method of decomposing the transformation matrix into a series of lower dimensional shears [19]. Such a decomposition allows for an easier reconstruction operation along a single dimension (for each shearing step). Splatting <ref> [45] </ref> is another reconstruction technique employed to reduce the impact of holing and doubling artifacts by reconstructing in object space using a Gaussian filter. Hidden volume elimination is used to determine the visibility order of the voxels. Several standard methods used for hidden surface elimination can be employed fruitfully. <p> The splat texture contains an image of a fuzzy circle, with opaque center and transparent circumference. Various functions can be used to govern the decay of opacity in this circle of inuence and we use a Gaussian function <ref> [45] </ref>. We also implemented a faster version of the rendering algorithm where instead of rectangles we render enlarged points on the screen.
Reference: [46] <author> J. Wilhelms and J. Challinger, </author> <title> Direct Volume Rendering of Curvilinear Volumes, San Diego Workshop on Volume Visualization, </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 41-47, </pages> <month> November </month> <year> 1990. </year>
Reference: [47] <author> P. L. Williams, </author> <title> Interactive Splatting of Nonrectilinear Volumes, </title> <booktitle> Proceedings Visualization 92, </booktitle> <pages> pp. 37-44, </pages> <month> October </month> <year> 1992. </year>
Reference: [48] <author> R. Yagel, D. Cohen, and A. Kaufman, </author> <title> Discrete Ray Tracing, </title> <journal> IEEE Computer Graphics & Ap plications, </journal> <volume> 12(9) </volume> <pages> 19-28, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Since ray casting follows only primary rays, it does not directly support the simulation of light phenomena such as reection, shadows, and refraction. As an alternative, the ray tracing algorithm can recursively consider both primary and secondary rays and thus can create photorealistic images <ref> [48] </ref>. Our gaseous renderer (Section 3), although being a ray caster, supports some photorealism capabilities such as self shadows. Our transfer-function renderer (Section 4) is a perspective ray caster, while our template renderer (Section 5) is a parallel ray caster.
Reference: [49] <author> R. Yagel, D. Cohen, A. Kaufman, and Q. Zhang, </author> <title> Volumetric Ray Tracing, </title> <type> Technical Report TR 91.01.09, </type> <institution> Department of Computer Science, SUNY at Stony Brook, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: When the ray reaches pixel (1) it encounters the proximity ag and switches to 4-connected traversal which causes it to detect the 4-curve at pixel (2). In order to benefit from the adaptive approach, the line algorithm is required to efficiently perform the connectivity switch. In <ref> [49] </ref> we described a line algorithm that adaptively switches from 26-connectedness to 6-connectedness without noticeable time penalty. It takes few seconds to generate the extra proximity ags in a preprocessing stage, and in the adaptive algorithm one needs to add only one test per step.
Reference: [50] <author> R. Yagel and A. Kaufman, </author> <title> Template-Based Volume Viewing, </title> <journal> Computer Graphics Forum, </journal> <volume> 11(3) </volume> <pages> 153-157, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: This tool supports transfer functions mapping voxel value (density) and gradient to opacity and mapping of voxel values to colors. The third approach is mainly intended for interactive preview of the data. It is based on an extended implementation of the template based ray casting <ref> [50] </ref> that supports screen and volume supersampling. To support interactivity, this renderer is based on a very simple illumination model. The fourth renderer trims the data and generates a list of voxels to be displayed that is a small subset of the volume. <p> Therefore, the set of steps these rays take when traversing the volume are similar. We exploit this coherency so as to avoid the computation involved in navigating the ray through voxel space <ref> [50] </ref>. Space-leaping: The passage of a ray through the volume is two phased. In the first phase, the ray advances through the empty space searching for an object. In the second phase, the ray integrates colors and opacities as it penetrates the object. <p> Therefore, there is no need to re-activate a line algorithm for each ray. Instead, we compute the form of the ray once and store it in a data structure called a ray-template <ref> [50] </ref>. All rays can then be generated by following this ray template. <p> The ray_template_placement computes the appropriate offset from which the current ray (emitted at pixel (i,j)) should start following the template. The variable accumulator serves as an accumulator of colors and opacities along the ray, and the denotes vector addition. 5.1 Screen Supersampling with Templates The basic algorithm <ref> [50] </ref> assumed that only one ray is traced from each screen pixel. However, the algorithm can be slightly modified to support multiple rays emitted from the same pixel but from different sub-pixel addresses. <p> The traditional line algorithms for ray generation can be easily modified by just altering the initialization phase in order to support non-integer (fixed-point) origin coordinates. 5.2 Template-Based Continuous Rays The basic template algorithm was based on integer rays that support only nearest neighbor sampling <ref> [50] </ref>. We show here that it can also support volume rendering where trilinear value variation across the voxel extent is assumed. Under this assumption, the exact volume value at a specific point is computed by a weighted average of a neighborhood of voxels. <p> Since the range of voxel values is limited, the pre-computed weights can be represented in a fixed-point notation which serves as an index into a pre-computed multiplication table. The algorithm for ray casting continuous rays is very similar to the basic one described previously <ref> [50] </ref>. It performs integer-based stepping along the ray template.
Reference: [51] <author> R. Yagel, A. Kaufman, and Q. Zhang, </author> <title> Realistic Volume Imaging, </title> <booktitle> in Proceedings of Visualiza tion91, </booktitle> <pages> pp. 226-231, </pages> <month> October </month> <year> 1991. </year>
Reference: [52] <author> R. Yagel and Z. Shi, </author> <title> Accelerating Volume Animation by Space-Leaping, </title> <booktitle> in Proceedings of Visualization93, </booktitle> <pages> pp. 62-69, </pages> <month> October </month> <year> 1993. </year>

References-found: 52

