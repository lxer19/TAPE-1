URL: http://www.cs.wustl.edu/~schmidt/europlop-97/papers/p1revised.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html
Root-URL: 
Email: np2@doc.ic.ac.uk  
Title: Abstract Session An Object Structural Pattern Allow a server object with many client objects to
Author: Nat Pryce 
Note: Intent  
Address: London, UK.  
Affiliation: Department of Computing, Imperial College,  
Abstract: Objectoriented frameworks are structured in terms of client/server relationships between objects; an object's services are invoked by client objects through the operations of its interface. A common design requirement is for a server object to maintain state for each client that it is serving. Typically this is implemented by returning handles or untyped pointers to the client that are used to identify the per-client data structure holding its state. The lack of strong typing can lead to obscure errors that complicate debugging and maintenance. This paper presents the Abstract Session pattern which allows objects to maintain per-client state with full type safety and no loss of efficiency. relationships between objects; an object's services are invoked by client objects through the operations of its interface. Typically, object interactions are defined in terms of abstract interfaces, which increases the reusability and extensibility of the framework because the set of client and server types that can be used together is not bounded and can easily be extended by framework users. A common design requirement is for a server object to maintain state for each client that it is serving. When the interactions between the server and client objects are defined in terms of abstract interfaces the per-client state cannot be stored in the client objects themselves because different server implementations will have to store different information. This problem is usually solved by using the Session pattern [1] which imposes a three-phase protocol upon the interactions between the client and the server: 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Lea. </author> <note> Sessions. Presented at ECOOP'95, 1995. Available on the WWW at the URL http://gee.cs.oswego.edu/dl/pats/session.htm </note>
Reference-contexts: The graphics context stores the current drawing state, such as the current font, background and foreground colours, and other state required to render drawing operations onto the associated device. Related Patterns The Abstract Session pattern is one way of implementing the Session pattern <ref> [1] </ref>. It is also related to the Facade, Factory Method and Mediator patterns from the GOF book [11]: The Facade pattern uses a single intermediate object to hide the complexities of a framework of cooperating objects from the users of that framework.
Reference: 2. <author> C. Petzold. </author> <title> Programming Windows 95. </title> <publisher> Microsoft Press, </publisher> <year> 1995. </year>
Reference-contexts: Untyped Pointers: Identifiers are defined to be untyped pointers that the server object initialises to point to an implementationspecific data structure and casts to the appropriate type on each invocation. For example, the Win32 API <ref> [2] </ref> uses untyped pointers to identify windows and other system resources allocated for an application. Handles: Identifiers are defined to be values of simple types, such as integers, or opaque values.
Reference: 3. <author> D. Lewine, </author> <title> POSIX Programmer's Guide: Writing Portable Unix Applications, </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1991. </year>
Reference-contexts: Handles: Identifiers are defined to be values of simple types, such as integers, or opaque values. The server uses a private associative container to map between identifiers and implementationspecific data structures and must perform a lookup each time a client makes a request. For example, the UNIX file API <ref> [3] </ref> uses integer handles to identify open files. The choice of whether to use untyped pointers or handles is one of safety versus runtime efficiency. Untyped pointers are efficient but passing an incorrect pointer to a server could cause the program to corrupt memory or crash.
Reference: 4. <author> W.R. Stevens. </author> <title> Unix Network Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference: 5. <author> The Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, Version 2.0. The Object Management Group, OMG Headquarters, 492 Old Connecticut Path, </title> <address> Framington, MA 01701, USA. </address> <month> July </month> <year> 1995. </year>
Reference-contexts: When creating a session, the server must send information to the client to allow the client to create a Proxy [11] session in its local address space. Distributed object brokers, such as CORBA <ref> [5] </ref> or DCOM [6] can be used to implement this functionality. Multiple Languages. It is difficult to call Abstract Sessions from another language, especially from languages which are not object oriented.
Reference: 6. <author> D. Rogerson. </author> <title> Inside COM Microsoft's Component Object Model. </title> <publisher> Microsoft Press, </publisher> <year> 1997. </year>
Reference-contexts: When creating a session, the server must send information to the client to allow the client to create a Proxy [11] session in its local address space. Distributed object brokers, such as CORBA [5] or DCOM <ref> [6] </ref> can be used to implement this functionality. Multiple Languages. It is difficult to call Abstract Sessions from another language, especially from languages which are not object oriented.
Reference: 7. <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1):64#76, </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: When the PortClient goes out of scope at the end of the program, its destructor releases the session, closing the connection. Known Uses The Abstract Session pattern is widely used in the implementation of objectoriented communication protocol software. The x-kernel framework <ref> [7] </ref> & the ACE communications toolkit [8] both use this pattern. Microsoft's Object Linking and Embedding (OLE) framework [9] uses the Abstract Session pattern for managing the size and location of embedded objects.
Reference: 8. <author> D.C. Schmidt. </author> <title> ACE: an ObjectOriented Framework for Developing Distributed Applications. </title> <booktitle> In Proceedings of the 6th USENIX C++ Technical Conference, </booktitle> <address> Cambridge, MA, </address> <publisher> USENIX Association, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: When the PortClient goes out of scope at the end of the program, its destructor releases the session, closing the connection. Known Uses The Abstract Session pattern is widely used in the implementation of objectoriented communication protocol software. The x-kernel framework [7] & the ACE communications toolkit <ref> [8] </ref> both use this pattern. Microsoft's Object Linking and Embedding (OLE) framework [9] uses the Abstract Session pattern for managing the size and location of embedded objects.
Reference: 9. <author> Microsoft Press. </author> <title> Object Linking and Embedding Version 2 (OLE2) Programmer's Reference. Volumes 1 and 2. </title> <address> Redmond, WA, </address> <year> 1993. </year>
Reference-contexts: Known Uses The Abstract Session pattern is widely used in the implementation of objectoriented communication protocol software. The x-kernel framework [7] & the ACE communications toolkit [8] both use this pattern. Microsoft's Object Linking and Embedding (OLE) framework <ref> [9] </ref> uses the Abstract Session pattern for managing the size and location of embedded objects.
Reference: 10. <author> J. Gosling, F. Yellin, </author> <title> and The Java Team. The Java Application Programming Interface Volume 2: Window Toolkit and Applets. </title> <publisher> Addison-Wesley. </publisher> <year> 1996. </year>
Reference-contexts: When an embedded object makes a resize request through its IOleClientSite interface, the container updates the size and position of all its embedded objects based upon the information stored in the clientsite session objects. The Java Abstract Windowing Toolkit (AWT) <ref> [10] </ref> uses the Abstract Session pattern in several places. An example is the Graphics interface, which provides a common interface for drawing graphics on a variety of devices, such as windows, bitmaps and printers.
Reference: 11. <author> E. Gamma, R. Helm, R. Johnson and J. Vlissides. </author> <title> Design Patterns: Elements of Reusable Object Oriented Software. </title> <publisher> Addison-Wesley. </publisher> <year> 1994. </year>
Reference-contexts: Distribution. It is difficult to pass a session object from the server to the client if the client and server exist in different address spaces. When creating a session, the server must send information to the client to allow the client to create a Proxy <ref> [11] </ref> session in its local address space. Distributed object brokers, such as CORBA [5] or DCOM [6] can be used to implement this functionality. Multiple Languages. It is difficult to call Abstract Sessions from another language, especially from languages which are not object oriented. <p> Distributed object brokers, such as CORBA [5] or DCOM [6] can be used to implement this functionality. Multiple Languages. It is difficult to call Abstract Sessions from another language, especially from languages which are not object oriented. This can be solved by writing an Adaptor <ref> [11] </ref> layer that hides session objects behind a set of procedures callable from the other languages and uses one of the unsafe implementations of the Session pattern to identify session objects. Implementation The following implementation issues are worth noting: 1. Use of the heap. <p> Related Patterns The Abstract Session pattern is one way of implementing the Session pattern [1]. It is also related to the Facade, Factory Method and Mediator patterns from the GOF book <ref> [11] </ref>: The Facade pattern uses a single intermediate object to hide the complexities of a framework of cooperating objects from the users of that framework. <p> The Acceptor and Connector patterns [12] are both examples of higher-level patterns that make use of the Abstract Session pattern. The Abstract Session pattern can be used to implement an Adaptor <ref> [11] </ref> around objects or non-OO libraries which use an unsafe implementation of the Session pattern.
Reference: 12. <author> D.C. Schmidt, </author> <title> Acceptor and Connector: Design Patterns for Actively and Passively Initializing Network Services. </title> <booktitle> In Pattern Languages of Program Design, </booktitle> <address> Reading, MA, </address> <publisher> Addison-Wesley, </publisher> <year> 1997. </year>
Reference-contexts: The server object of the Abstract Session pattern can be viewed as a form of Mediator controlling the interaction of all of its clients. The session objects can be viewed as simple Mediators controlling the interaction of the server and a single client. The Acceptor and Connector patterns <ref> [12] </ref> are both examples of higher-level patterns that make use of the Abstract Session pattern. The Abstract Session pattern can be used to implement an Adaptor [11] around objects or non-OO libraries which use an unsafe implementation of the Session pattern.
References-found: 12

