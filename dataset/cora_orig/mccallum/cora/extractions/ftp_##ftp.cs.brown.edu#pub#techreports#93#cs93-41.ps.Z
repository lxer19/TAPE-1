URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-41.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-41.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Agrawal, </author> <title> "Network Design and Network Cut Dualities: Approximation algorithms and applications," </title> <type> Ph. D. Thesis, </type> <institution> TR-CS-91-60, Dept. of Computer Science, Brown University, </institution> <year> 1991. </year>
Reference-contexts: The particular family of cuts depends on the problem to be formulated. Building on the work of Agrawal, Klein and Ravi <ref> [1, 2] </ref>, Goemans and Williamson [60] formulated a minimum-cost one-connected network-design problem as such a cut-cover problem and provided an approximation algorithm with performance factor two. Their formulation captures many important one-connectivity requirements such as Steiner trees, generalized Steiner forests, T -joins, and non-fixed point-to-point interconnection networks. <p> We then derive the dual of this relaxation and interpret the dual combinatorially in terms of graph-theoretic quantities associated with the problem. Restricting the variables of the dual program to be zero-one or integral in general is a useful tool in arriving at such an interpretation <ref> [1, 2] </ref>. Another useful method that has been explored before [1] is to assign values to all dual variables uniformly, i.e., all non-zero variables are assigned the same value. <p> Restricting the variables of the dual program to be zero-one or integral in general is a useful tool in arriving at such an interpretation [1, 2]. Another useful method that has been explored before <ref> [1] </ref> is to assign values to all dual variables uniformly, i.e., all non-zero variables are assigned the same value. <p> This technique yields an approximation algorithm for computing a near-optimal dual solution as well. This technique was used in a paper of Agrawal, Klein and Ravi <ref> [1, 2] </ref> and made more explicit in the subsequent work of Goemans and Williamson [60]. We use the approximate equality between two combinatorial quantities proved in [2] in proving the performance guarantee in Chapter 2.
Reference: [2] <author> A. Agrawal, P. Klein and R. Ravi, </author> <title> "When trees collide: an approximation algorithm for the generalized Steiner tree problem on networks," </title> <booktitle> Proceedings of the 23rd Annual ACM Symposium on Theory of Computing(1991), </booktitle> <pages> pp. 134-144. </pages>
Reference-contexts: The spanning tree [98, 127] specification is a special case of a Steiner tree in which all the nodes in the graph are specified as terminals. Thus a spanning tree is a subgraph which connects all the nodes. A generalized Steiner forest <ref> [97, 2] </ref> generalizes the notion of a Steiner tree. Given a set of site-pairs of nodes, a generalized Steiner forest is a network in which there is a path between every site-pair. <p> The particular family of cuts depends on the problem to be formulated. Building on the work of Agrawal, Klein and Ravi <ref> [1, 2] </ref>, Goemans and Williamson [60] formulated a minimum-cost one-connected network-design problem as such a cut-cover problem and provided an approximation algorithm with performance factor two. Their formulation captures many important one-connectivity requirements such as Steiner trees, generalized Steiner forests, T -joins, and non-fixed point-to-point interconnection networks. <p> We then derive the dual of this relaxation and interpret the dual combinatorially in terms of graph-theoretic quantities associated with the problem. Restricting the variables of the dual program to be zero-one or integral in general is a useful tool in arriving at such an interpretation <ref> [1, 2] </ref>. Another useful method that has been explored before [1] is to assign values to all dual variables uniformly, i.e., all non-zero variables are assigned the same value. <p> This technique yields an approximation algorithm for computing a near-optimal dual solution as well. This technique was used in a paper of Agrawal, Klein and Ravi <ref> [1, 2] </ref> and made more explicit in the subsequent work of Goemans and Williamson [60]. We use the approximate equality between two combinatorial quantities proved in [2] in proving the performance guarantee in Chapter 2. <p> This technique was used in a paper of Agrawal, Klein and Ravi [1, 2] and made more explicit in the subsequent work of Goemans and Williamson [60]. We use the approximate equality between two combinatorial quantities proved in <ref> [2] </ref> in proving the performance guarantee in Chapter 2. We also extend and use this technique combined with the idea of applying it in phases in Chapter 3. <p> This observation may be of independent interest. In addition to constructing the auxiliary graph, we also adapt and use an approximate min-max equality relating approximately minimum-cost Steiner trees to packing of cuts derived by Agrawal, Klein, and Ravi <ref> [2] </ref> to prove the performance guarantee of five in Theorem 2.2.1. In the next section, we introduce some definitions. Then we prove Theorem 2.2.2. Finally, we introduce some background on the approximate min-max equality proved in [2] and use it along with Theorem 2.2.2 to prove Theorem 2.2.1. 2.3 Definitions Let <p> approximately minimum-cost Steiner trees to packing of cuts derived by Agrawal, Klein, and Ravi <ref> [2] </ref> to prove the performance guarantee of five in Theorem 2.2.1. In the next section, we introduce some definitions. Then we prove Theorem 2.2.2. Finally, we introduce some background on the approximate min-max equality proved in [2] and use it along with Theorem 2.2.2 to prove Theorem 2.2.1. 2.3 Definitions Let G = (V; E) be the given undirected graph with nonnegative weights w assigned to its edges and let n = jV j and m = jEj. <p> Thus it is easy to see that the weight of any Steiner tree is at least as much as the value of a maximum packing of requirement cuts. The following result was shown by Agrawal, Klein and Ravi <ref> [2] </ref>. Theorem 2.5.1 Given an undirected graph with edge-weights, and a subset of the vertices specified as terminals, the minimum-weight of a Steiner tree connecting all the terminals is at most twice the value of a maximum packing of requirement cuts. The algorithm in [2] greedily finds a packing of requirement <p> shown by Agrawal, Klein and Ravi <ref> [2] </ref>. Theorem 2.5.1 Given an undirected graph with edge-weights, and a subset of the vertices specified as terminals, the minimum-weight of a Steiner tree connecting all the terminals is at most twice the value of a maximum packing of requirement cuts. The algorithm in [2] greedily finds a packing of requirement cuts and simultaneously builds a Steiner tree of weight at most twice the value of this packing. 20 Note that any biconnected Steiner subgraph must have at least two edges crossing any require-ment cut since this subgraph has two node-disjoint paths between the terminals <p> Combining the results from Theorem 2.5.1 and Lemma 2.5.2, we get the following theorem. Theorem 2.5.3 Given an undirected graph with edge-weights, and a subset of the vertices specified as terminals, the approximately minimum-weight Steiner tree found by the algorithm in <ref> [2] </ref> has weight at most that of any minimum-weight biconnected Steiner subgraph. We can use the above theorem to handle the case when all terminals are not one-connected in the initial subgraph G 0 . We first add edges to G 0 so as to one-connect all the terminals. <p> We use the above theorem in the first phase of one-connecting the terminals. For this, we set the weight of all the edges in G 0 to zero and use the approximation algorithm of Agrawal, Klein and Ravi in <ref> [2] </ref> to find an approximately minimum-weight Steiner tree one-connecting the terminals. By Theorem 2.5.3 above, the cost of the set of edges added in this first phase is at most that of a minimum-weight biconnected Steiner subgraph. <p> The results in this chapter were obtained jointly with Philip Klein, and appeared in [90]. 3.1 Introduction: The Framework On designing a network The following scenario was proposed in <ref> [2] </ref>. You are in the job of providing communication links to customers. You have a set of clients with communication requirements; each client has specified a pair 22 of cities (called a site-pair) between which the client must have communication capabilities. <p> The network you must construct need not be connected; all that is needed is that every client's pair of cities be connected through your network. Unfortunately, your job's NP-complete. So you come up with an approximately good solution <ref> [2] </ref> and build a network using this strategy. Soon you notice that your clients are complaining. The links used in your network seem to be breaking down pretty often. <p> In this chapter, we give the first approximation algorithm for augmenting this generalized Steiner network to a network in which each site-pair is two-connected. Combining this with the solution offered to your earlier problem in <ref> [2] </ref>, this provides an approximation for a general two-connected Steiner network design problem. In fact, you weren't so unlucky after all. <p> For this, we turn to the work of Goemans and Williamson in [60] where they define the notion of proper functions. Proper functions are a class of functions used for defining the activity of cuts in a graph. In <ref> [2] </ref>, Agrawal, Klein and Ravi provided the first approximation algorithm for the generalized network Steiner problem. The algorithm presented there involved construction of feasible primal and dual solutions with an approximate relation between their values. <p> There has also been considerable work on characterizations of integer polyhedra arising from connectivity constraints [65], and construction of minimum-cost two-connected survivable networks [59, 118]. As mentioned in the previous section, Agrawal, Klein and Ravi <ref> [2] </ref> introduced a primal-dual method for approximating the minimum-cost generalized Steiner network. Though this result addressed arbitrary connectivity requirements between pairs of nodes, it allowed for edge replication. 26 This was consequently generalized by Goemans and Williamson in [60]. <p> Indeed, while constant-factor approximations are known for the standard problem [96, 125, 148, 164] and even some of its generalizations <ref> [2, 60] </ref>, the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P [14, 110]. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem. The performance guarantee is logarithmic. <p> For example, consider the following generalization of the Steiner problem: given a set of pairs of nodes (s i ; t i ), find a minimum-cost subgraph in which each s i is connected to t i . The edge-weighted version of this problem was addressed in <ref> [2] </ref>; the node-weighted version can be approximately solved using the method of this chapter. We use a framework due to Goemans and Williamson [60] to formulate problems like that described above. <p> Our techniques generalize to the case of constructing Steiner trees as well as generalized Steiner forests. Given an undirected graph and a subset of the nodes called terminals, recall that a Steiner tree for the terminals is a subgraph spanning the terminals. Agrawal, Klein and Ravi <ref> [2] </ref> consider a generalization of Steiner trees called generalized Steiner forests. Given an undirected graph and a set of site-pairs of nodes, a generalized Steiner forest for the site-pairs is a subgraph in which there is a path between every site-pair. In [2], they provide the first approximation algorithm for finding <p> Agrawal, Klein and Ravi <ref> [2] </ref> consider a generalization of Steiner trees called generalized Steiner forests. Given an undirected graph and a set of site-pairs of nodes, a generalized Steiner forest for the site-pairs is a subgraph in which there is a path between every site-pair. In [2], they provide the first approximation algorithm for finding minimum-cost generalized Steiner forests. A b-bounded generalized Steiner forest for the site-pairs is a generalized Steiner forest for the site-pairs in which the maximum degree of any node is at most b. We can extend Theorem 6.1.2 as follows. <p> Here k represents the number of nodes of G that are sites. Building on the work of Agrawal, Klein and Ravi <ref> [2] </ref>, Goemans and Williamson [60] considered a class of constrained forest problems using the formalism of proper functions. We described their 76 formalism in Section 3.3. The generalized Steiner forest problem is a prototypical example of such a constrained forest problem. <p> G on n nodes with nonnegative weights on the edges, constructs a spanning tree of G in which the maximum weighted-degree of any node is O (log n) times the minimum possible. 77 This theorem, however, does not generalize to the case of more general constrained forest prob-lems addressed in <ref> [2, 60] </ref>. It does generalize to the case in which, given costs and weights (two distinct measures on the edges), and a bound B on the maximum weighted-degree of any node, we are required to find a minimum-cost spanning tree under this weighted-degree constraint. <p> Thus the above theorem is a strict generalization of Theorem 6.1.2. As before, we can extend the above theorem to generalized Steiner forests and to more general constrained forest problems addressed in <ref> [2, 60] </ref>. 78 An application: Approximating minimum-degree generalized Steiner forests Theorem 6.1.3 has an important application. We can use this theorem to provide a polynomial-time approximation algorithm for a class of minimum-degree forest problems that we considered in Chapter 5. <p> [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees <ref> [2] </ref> and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123]. <p> Thus we can derive Lemma 6.3.6 in this case as well. In the last iteration, when the number of active components falls to O (b), we run the approximation algorithm for minimum-cost generalized Steiner forests <ref> [2] </ref> using the contracted active components as sites. The maximum degree of any node in this forest is O (b) and the cost is at most twice OP T b using the performance guarantee in [2]. <p> components falls to O (b), we run the approximation algorithm for minimum-cost generalized Steiner forests <ref> [2] </ref> using the contracted active components as sites. The maximum degree of any node in this forest is O (b) and the cost is at most twice OP T b using the performance guarantee in [2]. Also, the final subgraph output has no active component and so the final subgraph contains a generalized Steiner forest for the site-pairs. The proof of the performance guarantee proceeds exactly as before. <p> This in turn is at most k (k+2)c fl 2 . However, we can apply an approximate min-max relation between a MST and a packing of cuts in the graph that is derived in <ref> [2, 60] </ref> in proving a better performance guarantee of k + 2 for the total cost. In particular, if OP T k denotes the cost of a minimum k-connected subgraph, we show that OP T k kc fl 2 . <p> The following is a restatement of Theorem 2.5.1 and is a consequence of the results in <ref> [2, 60] </ref>. Theorem 6.6.5 Given an undirected graph with edge-weights, the minimum-weight spanning tree has weight at most twice the value of a maximum packing of cuts.
Reference: [3] <author> A. Agrawal, P. Klein and R. Ravi, </author> <title> "How tough is the minimum-degree Steiner tree? A new approximate min-max equality," </title> <type> Technical Report CS-91-33, </type> <institution> Brown University (1991). </institution>
Reference-contexts: Minimizing this notion of cost corresponds to the minimum-degree network-design problem, which has also been well studied <ref> [3, 49, 50, 131] </ref>. A cost measure that captures the notion of price incurred in using a network is the maximum cost of any edge in the network, also termed the the bottleneck cost of the network. <p> The first polynomial-time approximation algorithm was provided by Agrawal, Klein and Ravi <ref> [3] </ref>. The performance guarantee 59 is a factor of O (log k), where k is the size of D. This was improved by Furer and Raghavachari in [49] and they provide a polynomial-time approximation algorithm for the problem with the performance guarantee essentially the same as that we show here. <p> A series of recent results have addressed the problem of minimum-degree networks of various forms: spanning trees [49, 50], Steiner trees <ref> [3, 50] </ref>, generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2]
Reference: [4] <author> A. V. Aho, J. E. Hopcroft and J. D. Ullman, </author> <title> The design and Analysis of Computer Algorithms, </title> <publisher> Addison Wesley, </publisher> <address> Reading MA., </address> <year> 1974. </year>
Reference-contexts: the problem of minimum-degree networks of various forms: spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees <ref> [4, 98, 127] </ref>, TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123]. <p> The algorithm for an approximate b-MST Input: An undirected graph with edge-costs satisfying the triangle inequality and a degree bound b 3. Output: A spanning tree in which the maximum degree of any node is b. 1 Find an MST of the given graph <ref> [4, 98, 127] </ref>. Root the spanning tree at any node r of degree at least two. 2 Partition the edges of the tree into "claws", namely, sets of edges going from every internal node to its children in the tree.
Reference: [5] <author> S. Arora, and S. Safra, </author> <title> "Probabilistic checking of proofs," </title> <booktitle> Proc. of the 33rd Annual IEEE Symp. on Foundations of Computer Science, (1992) pp. </booktitle> <pages> 2-13. </pages>
Reference-contexts: Early results on non-approximability [53, 161] were sporadic and used very specialized techniques. The recent connection drawn between results from the study of interactive proof systems from communication complexity theory <ref> [5, 6, 41, 110] </ref> and proving non-approximability results has provided a unified way to prove such results. Another tool that has been useful in applying non-approximability results is a strengthening of the notion of an NP-hardness reduction called an L-reduction [122].
Reference: [6] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy, </author> <title> "Proof verification and the hardness of approximation problems," </title> <booktitle> Proc. of the 33rd Annual IEEE Symp. on Foundations of Computer Science, (1992) pp. </booktitle> <pages> 14-23. </pages>
Reference-contexts: Early results on non-approximability [53, 161] were sporadic and used very specialized techniques. The recent connection drawn between results from the study of interactive proof systems from communication complexity theory <ref> [5, 6, 41, 110] </ref> and proving non-approximability results has provided a unified way to prove such results. Another tool that has been useful in applying non-approximability results is a strengthening of the notion of an NP-hardness reduction called an L-reduction [122]. <p> As a corollary, they derived that either all problems in this class permit very good approximations in polynomial time or all of them do not, unless P = N P . Recent results on probabilistically checkable proofs <ref> [6] </ref> show that the latter is the case. Lower bounds on approximability vary from very weak to relatively strong depending on the factor of approximation that they rule out. <p> Problems in the class MAX SNP that we talked about earlier do not have a fully polynomial-time approximation scheme unless P = N P <ref> [6] </ref>. Even stronger non-approximability results rule out approximations with multiplicative factors of a constant or better than a logarithm of the input size. <p> Papadimitriou and Yannakakis [122] identified a class of NP-hard optimization problems in-terreducible to one another using approximation-preserving reductions and thus took a step towards classifying NP-complete problems with respect to hardness of approximating them. They called this class MAX SNP. Recent work <ref> [6] </ref> has shown that problems complete for this class do not permit a fully polynomial-time approximation scheme unless P = N P .
Reference: [7] <author> A. Balakrishnan, and N. R. Patel, </author> <title> "Problem reduction methods and a tree generation algorithm for the Steiner network problem," </title> <note> Unpublished paper (1985). </note>
Reference: [8] <author> J. Bar-Ilan, and D. Peleg, </author> <title> "Approximation algorithms for selecting network centers (Preliminary version)," </title> <booktitle> LNCS 519, Proceedings, 2nd Workshop, WADS '91, Algorithms and Data Structures series, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In many applications that arise in real-world situations, the network to be built is required to minimize more than one of these cost measures simultaneously. Recent papers have identified many problems <ref> [8, 85, 89, 161] </ref> wherein multiple objectives are specified in the statement of the problem. We formulate such multi-objective problems in the area of network design and provide approximation algorithms in this thesis. The optimization objective may also involve maximizing some notion of desirability in the network. <p> Bottleneck problems have been investigated in [20, 72, 123]. Multi-objective approximations While there has been much work on finding minimum-cost networks for each of the cost measures that we simultaneously minimize, there has been relatively little work on approximations for multi-objective network-design. In this direction, Bar-Ilan and Peleg <ref> [8] </ref> considered balanced versions of problems of assigning network centers. In the balanced version, a budget is imposed on the number of nodes that any center can service. They extended existing approximation algorithms for center problems to the balanced versions.
Reference: [9] <author> R. Bar-Yehuda, D. Geiger, J. Naor, and R. M. Roth, </author> <title> "Approximation algorithms for the cycle-cover problem with applications to constraint satisfaction and Bayesian inference," </title> <note> (manuscript) July 1993. </note>
Reference-contexts: Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154]. Good approximation algorithms have constant performance ratios <ref> [9, 22, 74, 156, 164] </ref> while best-possible approximation algorithms achieve guarantees that cannot be better unless P = N P [50, 152].
Reference: [10] <author> D. Bauer, S.L. Hakimi, and E. Schmeichel, </author> <title> "Recognizing tough graphs is NP-hard," </title> <journal> Discrete Applied Mathematics, </journal> <volume> vol. 28 (1990), </volume> <pages> pp. 191-195. 136 </pages>
Reference: [11] <author> J. E. Beasley, </author> <title> "An SST-based algorithm for the Steiner problem in graphs," </title> <type> Techn. Rep., </type> <institution> Dept. of Man. Science, Imperial College, </institution> <address> London (1985). </address>
Reference: [12] <author> D. Beinstock, and O. Marcotte, </author> <title> "On a network design problem that is intractable on trees," </title> <journal> Mathematics of Operations Research, </journal> <volume> vol. 15 (1990), </volume> <pages> pp. 530-544. </pages>
Reference: [13] <author> M. Bellare, S. Goldwasser, C. Lund, and A. Russell, </author> <title> "Efficient probabilistically checkable proofs," </title> <booktitle> Proc. of the 25th Annual ACM Symp. on the Theory of Computing (1993), </booktitle> <pages> pp. 294-304. </pages>
Reference-contexts: The strongest non-approximability results are those that show that performance factors nearly as bad as the trivial ones cannot be achieved in polynomial time unless P = N P . Examples are the maximum independent set problem and the graph coloring problem <ref> [41, 110, 13] </ref>, for which no polynomial-time approximation algorithms can have performance ratios better than n ff for some fixed ff &gt; 0 unless P = N P . 5 Just like the non-approximability results, approximation algorithms that have been designed also vary from weak, reasonable, good to nearly best-possible.
Reference: [14] <author> P. Berman, </author> <type> personal communication, </type> <year> 1991. </year>
Reference-contexts: Indeed, while constant-factor approximations are known for the standard problem [96, 125, 148, 164] and even some of its generalizations [2, 60], the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P <ref> [14, 110] </ref>. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem. The performance guarantee is logarithmic. <p> A set cover is a collection of sets S i whose union is B. The set cover problem is to find a minimum-cost set-cover. Berman <ref> [14] </ref> showed that, in the presence of node-weights, approximating the minimum-cost Steiner tree is as hard as approximating set cover. More specifically, he showed that any instance of set-cover can be formulated as an instance of the node-weighted Steiner tree problem. The reduction is illustrated in Figure 4.1.
Reference: [15] <author> P. Berman and V. Ramaiyer, </author> <title> "Improved approximations for the Steiner tree problem," </title> <booktitle> Proc., 3rd Annual ACM-SIAM Symposium on Discrete Algorithms (1992), </booktitle> <pages> pp. 325-334. </pages>
Reference-contexts: Currently, the best known values of R s are 16 9 using the techniques of Zelikovsky [164] and Berman and Ramaiyer <ref> [15] </ref>. Proof: The algorithm for computing the Steiner tree which simultaneously minimizes the product of the total cost and the bottleneck cost given in the ratio (6.6) is simply this: Compute an approximately minimum-cost Steiner tree using any of the known algorithms [164, 15]. <p> Proof: The algorithm for computing the Steiner tree which simultaneously minimizes the product of the total cost and the bottleneck cost given in the ratio (6.6) is simply this: Compute an approximately minimum-cost Steiner tree using any of the known algorithms <ref> [164, 15] </ref>. Let this heuristic guarantee a solution which comes to within R s of the minimum-cost Steiner tree. Call this tree T 1 . Let c (T 1 ) and b (T 1 ) denote the total edge cost and the bottleneck cost of the tree.
Reference: [16] <author> A. Blum, </author> <title> "Some tools for approximate 3-coloring," </title> <booktitle> Proceedings of the 31st Annual IEEE Conference on Foundations of Computer Science (1990), </booktitle> <pages> pp. 554-562. </pages>
Reference-contexts: Weak approximations are those with performance ratios nearly as bad as what is trivially achievable by using any feasible solution. A large number of problems are known to have only such approximations <ref> [16, 18, 94, 95, 132] </ref>, and are good candidates for proving strong non-approximability. Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154].
Reference: [17] <author> H. L. Bodlaender, </author> <title> "On linear time minor tests and depth first search," </title> <booktitle> Proceedings of Workshop on Algorithms and Data Structures 1989, </booktitle> <pages> pp. 577-590. </pages>
Reference-contexts: The first such algorithm was due to Fellows and Langston [42]. The running time of their algorithm was improved by Bodlaender <ref> [17] </ref>. 7.3 Definitions In this section, we introduce some definitions that we use throughout this chapter. The following definitions are relevant to any spanning tree of the input simple graph G.
Reference: [18] <author> R. Boppana, and M. Halldorsson," </author> <title> Approximating maximum independent sets by excluding subgraphs," </title> <booktitle> Proc., 2nd Scandinavian Workshop on Algorithmic Theory (SWAT) (1990), </booktitle> <address> pp.13-25. </address>
Reference-contexts: Weak approximations are those with performance ratios nearly as bad as what is trivially achievable by using any feasible solution. A large number of problems are known to have only such approximations <ref> [16, 18, 94, 95, 132] </ref>, and are good candidates for proving strong non-approximability. Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154].
Reference: [19] <author> W. M. Boyce, </author> <title> "An improved program for the full Steiner tree problem," </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> vol. 3 (1977), </volume> <pages> pp. 359-385. </pages>
Reference: [20] <author> P. M. Camerini, </author> <title> "The min-max spanning tree problem and some extensions," </title> <journal> Inform. Proc. Lett., </journal> <volume> Vol. 7, No. 1, </volume> <pages> pp. 10-14, </pages> <year> (1978). </year>
Reference-contexts: Problems in which the objective is to keep the bottleneck cost low are termed bottleneck problems and these have also received considerable attention <ref> [20, 72, 123] </ref>. In many applications that arise in real-world situations, the network to be built is required to minimize more than one of these cost measures simultaneously. Recent papers have identified many problems [8, 85, 89, 161] wherein multiple objectives are specified in the statement of the problem. <p> Bottleneck problems have been investigated in <ref> [20, 72, 123] </ref>. Multi-objective approximations While there has been much work on finding minimum-cost networks for each of the cost measures that we simultaneously minimize, there has been relatively little work on approximations for multi-objective network-design.
Reference: [21] <author> S. K. Chang, </author> <title> "The generation of minimal trees with a Steiner topology," </title> <journal> Journal of the ACM, </journal> <volume> vol. 19 (1972), </volume> <pages> pp. 669-711. </pages>
Reference: [22] <author> N. Christofides, </author> <title> "Worst-case analysis of a new heuristic for the traveling salesman problem," </title> <type> Technical Report, </type> <institution> Graduate School of Industrial Administration, Carnegie-Mellon University, </institution> <address> Pittsburgh, PA. </address> <year> (1976). </year>
Reference-contexts: Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154]. Good approximation algorithms have constant performance ratios <ref> [9, 22, 74, 156, 164] </ref> while best-possible approximation algorithms achieve guarantees that cannot be better unless P = N P [50, 152]. <p> In Christofides' classical 3 2 -approximation for the Traveling Salesperson Problem on a graph with triangle inequalities <ref> [22] </ref>, the optimal TSP tour is decomposed into two equal-sized matchings. This leads to the observation that the minimum cost of a perfect matching in this graph is at most half the minimum cost of a TSP tour.
Reference: [23] <author> F. R. K. Chung, and R. L. Graham, </author> <title> "A new bound for Euclidean Steiner minimum trees," </title> <journal> Ann. N.Y. Acad. Sci., </journal> <volume> vol. 440 (1985), </volume> <pages> pp. 328-346. </pages>
Reference: [24] <author> F. R. K. Chung, and F. K. Hwang, </author> <title> "A lower bound for the Steiner tree problem," </title> <journal> SIAM J. Appl. Math., </journal> <volume> vol. 34 (1978), </volume> <pages> pp. 27-36. 137 </pages>
Reference: [25] <author> V. Chvatal, </author> <title> "A greedy heuristic for the set-covering problem," </title> <journal> Math. of OR Vol. </journal> <volume> 4, No. 3, </volume> <pages> pp. </pages> <month> 233-235 </month> <year> (1979). </year>
Reference-contexts: Nearly best-possible approximation algorithms have performance guarantees that are within a constant factor of what has been shown to be best-possible <ref> [25, 91] </ref> unless P = N P . Such approximations are especially interesting for problems for which what is known to be best-possible in terms of approximation factors is a quantity larger than a constant, like the set-cover problem. <p> We elaborate on these techniques below. 1.9 The Primal-Dual method This technique uses the framework of linear programming to derive approximate solutions to NP-hard problems. This technique has been well-known since its application to approximate the set-cover problem <ref> [25, 79, 107] </ref>. There has recently been a lot of work in applying this technique to approximation algorithms [1, 2, 3, 9, 52, 55, 60, 61, 88, 103, 90, 154]. There are two distinct ways in which this method can be applied to approximation algorithms. <p> Theorem 4.1.1 There is a polynomial-time algorithm to approximate the node-weighted Steiner tree problem in networks. The performance ratio is 2 ln k, where k is the number of terminals. An example due to Chvatal <ref> [25] </ref> can be adapted to show that our analysis of the algorithm is nearly tight (See Figure 4.2). 50 Our method can be easily applied to more general node-weighted network-design problems. <p> Thus the quotient cost for a given vertex can be computed in polynomial time; by computing the quotient cost of all the vertices, we can determine the minimum quotient cost, and thus carry out an iteration in polynomial time. In Figure 4.2, we adapt an example due to Chvatal <ref> [25] </ref> to show that the performance ratio in Theorem 4.1.1 is nearly tight. 51 In Section 4.4, we show that the cost of all nodes and edges selected by the algorithm is not much more than the minimum cost of a Steiner tree. 4.3 Spider Decompositions The proof of the performance
Reference: [26] <author> Chvatal V., </author> <title> "Tough graphs and Hamiltonian circuits," </title> <journal> Discrete Math. </journal> <volume> 5 (1973), </volume> <pages> pp. 215-228. </pages>
Reference-contexts: As we mentioned earlier, we present an approximation algorithm with a better (logarithmic) performance ratio and polynomial running time for the problem addressed in Theorem 5.3.1 using entirely different techniques in Section 6.4 Toughness, Weakness and generalizations: A lower bound Toughness, first defined by Chvatal in <ref> [26] </ref>, is a measure of how tough it is to disconnect a graph into many components by removing few nodes. The toughness of a graph is the minimum ratio of nodes removed to the number of components in the remaining graph. <p> Computing the toughness of a graph was recently shown NP-complete by Bauer, Hakimi and Schmeichel [68]. The definition of toughness we have given differs slightly from Chvatal's original definition in <ref> [26] </ref>. According to our definition, the minimum toughness ratio is never more than 1 (for nonsingleton graphs), since even a singleton X yields a ratio of at most 1.
Reference: [27] <author> E. J. Cockayne, and D. G. Schiller, </author> <title> "Computation of Steiner minimal trees," in Combinatorics, </title> <editor> D. A. Welsh, and D. R. Wodall (eds.) </editor> <year> (1972). </year>
Reference: [28] <author> C. J. Colbourn, </author> <title> The combinatorics of network reliability, </title> <publisher> Oxford University Press (1987). </publisher>
Reference: [29] <author> C. R. Coullard, A. Rais, R. L. Rardin, and D. K. Wagner, </author> <title> "Linear-time algorithms for 2-connected Steiner subgraph problems on special classes of graphs," </title> <journal> Networks, </journal> <volume> Vol. 23, </volume> <year> (1993), </year> <pages> pp. 195-205. </pages>
Reference-contexts: Hence we restrict our attention to approximating minimum-cost biconnected Steiner subgraphs (i.e., subgraphs biconnecting every pair of terminals). There has been previous work on polynomial-time algorithms for the minimum-cost two-connected Steiner subgraph problems for special classes of graphs such as outerplanar graphs [157], series-parallel graphs [158] and Halin graphs <ref> [29] </ref>. Our main results are approximation algorithms for the case of general graphs and we state them below. Theorem 2.2.1 There is a polynomial-time approximation algorithm for the minimum-cost biconnected Steiner subgraph problem. The performance guarantee of the algorithm is five.
Reference: [30] <author> G. A. Croes, </author> <title> "A method for solving traveling-salesman problems," </title> <journal> OR 6, </journal> <volume> No. 6, (Nov.-Dec. </volume> <year> 1958), </year> <pages> pp. 791-812. </pages>
Reference-contexts: There has been a surge of work subsequent to ours in extending our techniques to higher-connected network problems [52, 61, 154]. 1.10 Local Optimization Local optimization has been a well-known heuristic for hard problems even before the theory of NP-completeness was formalized <ref> [30] </ref>. There have been many practically successful applications of this heuristic to many important hard problems. Some notable examples are its applications to the graph partitioning [84, 43] and the Traveling Salesperson problems [102]. More recently, there has been some work on complexity issues related to this method [80, 120]. <p> These algorithms perform a series of local-improvement steps until a local optimum is reached and output a locally optimal solution. This notion of applying local-improvement heuristics to hard optimization problems was around <ref> [30] </ref> long before the invention of NP-completeness [83]. It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization [121].
Reference: [31] <author> G. B. Dantzig, </author> <title> "Linear programming and extensions," </title> <publisher> Princeton University Press, </publisher> <address> Prince-ton, NJ (1963). </address>
Reference: [32] <author> E. W. Dijkstra, </author> <title> "Self-stabilizing systems in spite of distributed control," </title> <journal> Comm. ACM 17, </journal> <volume> 11 (Nov. </volume> <year> 1974), </year> <pages> pp. 643-644. </pages>
Reference-contexts: Given a simple, undirected graph G = (V; E), suppose we wish to find a spanning tree of G with the maximum number of leaves. This problem finds applications in communication networks, circuit layouts and in other graph-theoretic problems [145]. An interesting application is mentioned in [124]: In <ref> [32] </ref>, E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion.
Reference: [33] <author> S. E. Dreyfus, and R. A. Wagner, </author> <title> "The Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 1 (1971), </volume> <pages> pp. 195-207. </pages>
Reference-contexts: The results in this chapter were obtained jointly with Philip Klein, and appeared in [91]. 4.1 Problem Definition The Steiner tree problem in networks that we introduced in Section 1.1 is a classic hard problem in combinatorial optimization. Much research has been devoted to heuristics for its solution <ref> [33, 68, 112, 134, 135, 163] </ref>. Despite a slew of new approximation algorithms for this problem and some of its variants, no approximation algorithm has been given for perhaps the most natural variant: the node-weighted Steiner tree problem, in which costs can be assigned to nodes as well as edges.
Reference: [34] <author> D. Z. Du, and F. K. Hwang, </author> <title> "A new lower bound for the Steiner ratio," </title> <journal> Trans. Amer. Math. Soc., </journal> <volume> vol. 278 (1983), </volume> <pages> pp. 137-148. </pages>
Reference: [35] <author> D. Z. Du, and F. K. Hwang, </author> <title> "An approach for proving lower bounds: solution of Gilbert-Pollak's conjecture on Steiner ratio," </title> <booktitle> Proceedings of the 31st Annual IEEE Conference on Foundations of Computer Science (1990), </booktitle> <pages> pp. 76-85. </pages>
Reference: [36] <author> C. W. Duin, an A. Volgenant, </author> <title> "Some generalizations of the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> 17, </volume> <pages> pp. 353-364, </pages> <year> (1987). </year>
Reference-contexts: The solution output is approximate in terms of both the number of median-nodes used and the sum of the distances from each vertex to the nearest median. Iwainsky et al. [75] formulated a version of the minimum-cost Steiner problem with an additional cost based on node-degrees. Duin and Volgenant <ref> [36] </ref>, motivated by practical considerations, formulated the degree-bounded Steiner tree problem. Other researchers have addresses multi-objective approximation algorithms for problems arising in areas other than network design.
Reference: [37] <author> J. Edmonds, </author> <title> "Paths, trees, and flowers," </title> <journal> Canadian Journal on Mathematics, </journal> <volume> vol. 17 (1965), </volume> <pages> pp. 449-467. </pages>
Reference-contexts: Classical primal-dual algorithms such as the matching algorithm <ref> [37] </ref> follow a basic framework to prove optimality of the solution that they find. These algorithms typically start with a primal infeasible solution and a dual feasible but suboptimal solution. Suppose that the problem at hand is a minimization problem.
Reference: [38] <author> J. Edmonds and E. L. Johnson, </author> <title> "Matching, Euler tours and the Chinese postman," </title> <journal> Math. Programming, </journal> <volume> vol. 5 (1973), </volume> <pages> pp. 88-124. 138 </pages>
Reference-contexts: We can think of a generalized Steiner forest specification as one that specifies not only the producers and consumers but the pairing between them as well. Another interesting class of one-connected networks are T-joins introduced by Edmonds and Johnson <ref> [38] </ref>. Given an even number of T -nodes in an undirected graph, a T -join is a subgraph in which the nodes of odd degree are exactly the T -nodes. <p> This problem is referred to as the f -factor problem [109], and is known to be polynomially solvable <ref> [38, 109] </ref>. The following variant of this problem is also known to be polynomially solvable using matching techniques [109]. Denote the degree of a node v in a subgraph H by deg H (v). <p> The b-bounded even DCS problem described above is a generalization of the T -join problem <ref> [38] </ref>. When b is allowed to be unbounded, this problem reduces to the T -join problem. We now prove a simple tree-decomposition result. Claim 6.3.2 Let R be a tree with an even number of marked nodes. <p> Using the optimal solution to the d-constrained problem, we can derive a solution to this problem that we set up during this iteration of cost at most the optimal. Since we can solve this more general problem in polynomial-time as well <ref> [38, 109, 138] </ref>, we can obtain a solution of cost at most the optimal. The rest of the performance guarantee is the same as before.
Reference: [39] <author> C. El-Arbi, </author> <title> "One heuristique pour le problem de l'arbre de Steiner," </title> <journal> R.A.I.R.O. Operations Research, </journal> <volume> vol. 12 (1978), </volume> <pages> pp. 207-212. </pages>
Reference: [40] <author> K. P. Eswaran, and R. E. Tarjan, </author> <title> "Augmentation problems," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 5 (1976), </volume> <pages> pp. 653-665. </pages>
Reference: [41] <author> U. Feige, S. Goldwasser, L. Lovasz, and S. Safra, </author> <title> "Approximating clique is almost NP-complete," </title> <booktitle> To appear in the Proceedings of the 32nd Annual IEEE Conference on Foundations of Computer Science (1991). </booktitle>
Reference-contexts: Early results on non-approximability [53, 161] were sporadic and used very specialized techniques. The recent connection drawn between results from the study of interactive proof systems from communication complexity theory <ref> [5, 6, 41, 110] </ref> and proving non-approximability results has provided a unified way to prove such results. Another tool that has been useful in applying non-approximability results is a strengthening of the notion of an NP-hardness reduction called an L-reduction [122]. <p> The strongest non-approximability results are those that show that performance factors nearly as bad as the trivial ones cannot be achieved in polynomial time unless P = N P . Examples are the maximum independent set problem and the graph coloring problem <ref> [41, 110, 13] </ref>, for which no polynomial-time approximation algorithms can have performance ratios better than n ff for some fixed ff &gt; 0 unless P = N P . 5 Just like the non-approximability results, approximation algorithms that have been designed also vary from weak, reasonable, good to nearly best-possible.
Reference: [42] <author> M. R. Fellows, and M. A. Langston, </author> <title> "On well-partial-order theory and its applications to combinatorial problems of VLSI design," </title> <type> Technical Report CS-88-188, </type> <institution> Dept. of Computer Science, Washington State Univ., </institution> <year> 1988. </year>
Reference-contexts: There has also been work on polynomial-time solutions to the problem of determining if a given graph has a spanning tree with at least k leaves for fixed k. The first such algorithm was due to Fellows and Langston <ref> [42] </ref>. The running time of their algorithm was improved by Bodlaender [17]. 7.3 Definitions In this section, we introduce some definitions that we use throughout this chapter. The following definitions are relevant to any spanning tree of the input simple graph G.
Reference: [43] <author> C. M. Fiduccia, and R. M. Mattheyses, </author> <title> "A linear-time heuristic for improving network partitions," </title> <booktitle> in 19th IEEE Design Automation Conference (1982) , pp. </booktitle> <pages> 175-181. </pages>
Reference-contexts: There have been many practically successful applications of this heuristic to many important hard problems. Some notable examples are its applications to the graph partitioning <ref> [84, 43] </ref> and the Traveling Salesperson problems [102]. More recently, there has been some work on complexity issues related to this method [80, 120].
Reference: [44] <author> L. R. Ford, Jr., and D. R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton University Press, </publisher> <address> Prince-ton, New Jersey (1962). </address>
Reference: [45] <author> H. Frank, and I. T. Frisch, </author> <title> "Communication, Transmission, and Transportation Networks," </title> <publisher> Addison-Wesley (1971). </publisher>
Reference: [46] <author> Greg N. Fredrickson, and Joseph Ja'Ja', </author> <title> "Approximation algorithms for several graph augmentation problems," </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 10, No. 2 (1981), </volume> <pages> pp. 270-283. </pages>
Reference-contexts: Moreover, the augmentation cannot contain more than one copy of any edge. We present an approximation algorithm for this problem with performance ratios of four if the initial subgraph connects the terminals and five otherwise. Fredrickson and Ja'Ja' <ref> [46] </ref> were the first to consider the problem of augmenting a given graph to make it two-connected. This is a special case of our problem in which all nodes are terminals. They showed that this problem is NP-hard and provided approximation algorithms. <p> This is a special case of our problem in which all nodes are terminals. They showed that this problem is NP-hard and provided approximation algorithms. Subsequently, Khuller and Thurimella [86] presented a more efficient and simplified version of the results of Frederickson and Ja'Ja' <ref> [46] </ref>. The performance guarantee of these algorithms is two if the initial subgraph is connected and three otherwise. The results of Frederickson and Ja'Ja' as well as that of Khuller and Thurimella hold for both the edge and vertex-connected versions of the problem. <p> The performance guarantee of the algorithm is four. The key idea in all our algorithms is to construct an auxiliary graph on a subset of the nodes in the original graph and to select a tree spanning these nodes. We then use the algorithms of Frederickson and Ja'Ja' <ref> [46] </ref> or those of Khuller and Thurimella [86] to find an approximately minimum-cost augmentation of this spanning tree to biconnect it. Finally we transform this augmentation to an augmentation that biconnects the tree in the original graph. <p> Furthermore, the weight of all these edges is at most the weight of the segments used to identify them, and hence is at most 2w (A). 2 Now we can apply the techniques of Frederickson and Ja'Ja' <ref> [46] </ref>, or that of Khuller and Thurimella [86], to find an approximately minimum-cost set of edges to augment the tree T in 19 T 0 to biconnect it. <p> Since the optimal augmentation of T in G induces an augmentation in T 0 of at most twice the cost by Lemma 2.4.6, and since the performance guarantee of the approximation algorithms of <ref> [46, 86] </ref> is two, we finally get an augmentation of cost at most four times the minimum. Finally we transform the augmentation in T 0 that we find to the collection of shortest paths in the original graph that the edges in the augmentation correspond to. <p> Finally we transform the augmentation in T 0 that we find to the collection of shortest paths in the original graph that the edges in the augmentation correspond to. Noting that the construction of the auxiliary graph T 0 and the algorithms in <ref> [46, 86] </ref> are polynomial-time completes the proof of Theorem 2.2.2. 2.5 The Biconnected Steiner Subgraph Problem In this section, we prove Theorem 2.2.1. To do this we need some background. <p> The technique we introduce in this chapter allows one to find nearly minimum-cost two-connected networks for a variety of connectivity requirements. For example, our result generalizes earlier results on finding a minimum-cost two-connected subgraph of a given edge-weighted graph in <ref> [46, 86] </ref>. Using our technique, we can also approximately solve for the first time a two-connected version of the generalized Steiner network problem and a two-connected version of the non-fixed point-to-point connection problem. <p> Moreover, they do not want you to duplicate any link in the already existing network since the link failures seem to be related to the location of the cables. By duplicating links, you are only making both copies prone to failure. Well, your problem is NP-complete again <ref> [46] </ref>. If you were lucky to have a large enough clientele so that your network spanned all the cities, then you could use the approximate solution in [46]. However, considering your past history with fortune, no approximation algorithms are known in the general case. <p> By duplicating links, you are only making both copies prone to failure. Well, your problem is NP-complete again <ref> [46] </ref>. If you were lucky to have a large enough clientele so that your network spanned all the cities, then you could use the approximate solution in [46]. However, considering your past history with fortune, no approximation algorithms are known in the general case. In this chapter, we give the first approximation algorithm for augmenting this generalized Steiner network to a network in which each site-pair is two-connected. <p> The minimum-cost augmentation problem is to choose a minimum-cost set of edges in G whose addition to G 0 yields a graph that obeys the constraints of (IP). This problem generalizes the minimum-cost bridge-connectivity augmentation problem considered in <ref> [46, 86] </ref> and also the Steiner version considered in Chapter 2. We have the following theorem about approximating the minimum-cost augmentation. <p> In Section 3.4, we present the second-phase augmentation algorithm. In the following section, we prove the performance bound of this phase. Finally, we prove the results on augmentation. 3.2 Related Work Fredrickson and Ja'Ja', in their pioneering work <ref> [46] </ref> on approximation algorithms for weighted graph augmentation problems, provided the first approximate solution for the problem of augmenting a given graph to be two-connected. The performance guarantee of their algorithm was a multiplicative factor of two. Their technique also gave an approximate solution to the minimum-cost two-connected subgraph problem. <p> This can be seen by their performance on an example graph adapted from <ref> [46] </ref>. This graph is shown in Figure 3.6. The thick (solid and dashed) edges are of unit cost and the thin edges have cost * close to zero.
Reference: [47] <author> Greg N. Fredrickson, and Joseph Ja'Ja', </author> <title> "On the relationship between the biconnectivity augmentation and Traveling Salesman problems", </title> <booktitle> Theoretical Computer Science 19 (1982), </booktitle> <pages> pp. 189-201. </pages>
Reference-contexts: Khuller and Vishkin have presented algorithms with better performance guarantees for the minimum two-connected subgraph problems in [87]. The bounds are 3 2 for the two edge-connected case and 5 3 for the two node-connected case. When the cost function c obeys the triangle inequality, then Fredrickson and Ja'Ja' <ref> [47] </ref> present an adaptation of Christofides' heuristic to solve the minimum-cost biconnectivity augmentation problem with a performance factor of 3 2 . There has been considerable previous work on network survivability [59, 66, 116, 117, 144] that addresses constructing minimum-cost k-connected subgraphs under such cost functions.
Reference: [48] <author> A. M. Frieze, G. Galbiati, and F. Maffioli, </author> <title> "On the worst-case performance of some algorithms for the asymmetric traveling salesman problem," </title> <journal> Networks, </journal> <volume> 12, </volume> <pages> pp. 23-39, </pages> <year> (1982). </year>
Reference-contexts: The approximation algorithm based on this insight finds such simpler pieces optimally and using the decomposition, proves that an approximate solution constructed using these simpler pieces is near-optimal. Implicit applications of this technique can be found in <ref> [48, 49] </ref>. We use this technique to provide the first approximation algorithms for node-weighted network-design problems in Chapter 4. <p> networks of various forms: spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs <ref> [48, 100] </ref>, Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123].
Reference: [49] <author> Martin Furer and Balaji Raghavachari, </author> <title> "An N C approximation algorithm for the minimum degree spanning tree problem," </title> <booktitle> Proceedings of the 28th Annual Allerton Conference on Communication, Control and Computing (1990), </booktitle> <pages> pp. 274-281. </pages>
Reference-contexts: Minimizing this notion of cost corresponds to the minimum-degree network-design problem, which has also been well studied <ref> [3, 49, 50, 131] </ref>. A cost measure that captures the notion of price incurred in using a network is the maximum cost of any edge in the network, also termed the the bottleneck cost of the network. <p> The approximation algorithm based on this insight finds such simpler pieces optimally and using the decomposition, proves that an approximate solution constructed using these simpler pieces is near-optimal. Implicit applications of this technique can be found in <ref> [48, 49] </ref>. We use this technique to provide the first approximation algorithms for node-weighted network-design problems in Chapter 4. <p> This problem is a generalization of the Hamil-tonian Path problem and hence is clearly NP-hard [53]. The first result on approximating the minimum-degree spanning tree was that of Furer and Raghavachari <ref> [49] </ref>. They gave a polynomial time approximation algorithm for minimum-degree spanning tree with performance guarantee O (log n). Their algorithm further generalizes to find rooted spanning trees in directed graphs of approximately minimum indegree. <p> The first polynomial-time approximation algorithm was provided by Agrawal, Klein and Ravi [3]. The performance guarantee 59 is a factor of O (log k), where k is the size of D. This was improved by Furer and Raghavachari in <ref> [49] </ref> and they provide a polynomial-time approximation algorithm for the problem with the performance guarantee essentially the same as that we show here. In fact, our work is a generalization of this algorithm and reduces to their algorithm for this special case. <p> Extension: Approximating minimum weighted-degree spanning trees We can extend the techniques used to prove Theorem 6.1.2 to approximate the following generalization of the minimum-degree spanning tree problem <ref> [53, 49, 50] </ref>. Given nonnegative weights on the edges, define the weighted-degree of any node in a spanning tree to be the sum of the weights of the edges incident to the node in the tree. <p> The case of spanning trees treated in Theorem 6.1.2 is less interesting in the case of node-weighted graphs since every node must be included in the solution. This problem then reduces to computing a minimum-degree spanning tree that has been well-studied <ref> [49, 50] </ref>. We focus our attention on the more interesting case of Steiner trees. In Chapter 4, we presented the the first polynomial-time approximation algorithm for node-weighted Steiner trees. The performance guarantee of this approximation algorithm is logarithmic in the number of terminals specified in the problem. <p> A series of recent results have addressed the problem of minimum-degree networks of various forms: spanning trees <ref> [49, 50] </ref>, Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], <p> We use b to denote the degree bound specified in the problem, and OP T b to denote the minimum cost of any b-bounded spanning tree of the input graph. Overview Our algorithm follows the same skeletal outline as an early algorithm <ref> [49] </ref> of Furer and Raghavachari for approximating the minimum-degree spanning tree. However, we generalize it to ensure that the cost of the solution chosen is small as well. The algorithm works in O (log n b ) iterations where n is the number of nodes in the original graph.
Reference: [50] <author> Martin Furer and Balaji Raghavachari, </author> <title> "Approximating the minimum-degree spanning tree to within one from the optimal degree," </title> <booktitle> Proceedings of the Third Annual ACM-SIAM Symposium on Discrete Algorithms (1992), </booktitle> <pages> pp. 317-324. 139 </pages>
Reference-contexts: Minimizing this notion of cost corresponds to the minimum-degree network-design problem, which has also been well studied <ref> [3, 49, 50, 131] </ref>. A cost measure that captures the notion of price incurred in using a network is the maximum cost of any edge in the network, also termed the the bottleneck cost of the network. <p> Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154]. Good approximation algorithms have constant performance ratios [9, 22, 74, 156, 164] while best-possible approximation algorithms achieve guarantees that cannot be better unless P = N P <ref> [50, 152] </ref>. Nearly best-possible approximation algorithms have performance guarantees that are within a constant factor of what has been shown to be best-possible [25, 91] unless P = N P . <p> However, none of these various heuristic techniques have been known to be approximation algorithms in the sense we have described. A theoretical breakthrough in this area came with the work of Furer and Raghavachari <ref> [50] </ref>. They showed that a variant of the local search heuristic can be applied to the problem of computing a spanning tree of an undirected graph in which the maximum degree of any node is minimum. Their work provides polynomial-time approximation algorithms with good performance ratios. <p> Minimum-degree networks are also useful in building networks for broadcast where we wish to minimize the amount of work done at each site and also in designing power grids where the cost of a node increases with the degree of splitting the power <ref> [50] </ref>. The purpose of the network itself gives rise to certain connectivity requirements in the network. In this chapter, we consider essentially two distinct types of such connectivity requirements on the solution subgraph. <p> They gave a polynomial time approximation algorithm for minimum-degree spanning tree with performance guarantee O (log n). Their algorithm further generalizes to find rooted spanning trees in directed graphs of approximately minimum indegree. In subsequent work <ref> [50] </ref>, they improved their previous results and provided another polynomial time algorithm to approximate the minimum-degree spanning tree to within one of the optimal. Clearly no better approximation algorithms are possible for this problem. <p> In this chapter, we show how to find a network satisfying the requirements that has nearly minimum degree. All we use of [60] is their framework for specifying connectivity requirements; our algorithm and analysis are based on the work of Furer and Raghavachari <ref> [50] </ref>. Consider a spanning tree of a graph, and any cut in the graph. At least one edge of the spanning tree must cross this cut. Conversely, if a network crosses every cut, it must span all nodes. <p> As a result of performing the first type of improvement step, note that all the edges incident on nodes of degree at least k are critical in the locally optimal solution. Termination Each improvement step is polynomial-time implementable. We adapt a potential-function argument from <ref> [50] </ref> to bound the number of improvement steps. Define the potential of a vertex v with degree d in the forest F to be (v) = n d where n is the number of nodes in the graph. <p> Extension: Approximating minimum weighted-degree spanning trees We can extend the techniques used to prove Theorem 6.1.2 to approximate the following generalization of the minimum-degree spanning tree problem <ref> [53, 49, 50] </ref>. Given nonnegative weights on the edges, define the weighted-degree of any node in a spanning tree to be the sum of the weights of the edges incident to the node in the tree. <p> This problem is a natural capacitated generalization of the minimum-degree spanning tree problem which results if all the edges in the graph are assigned unit weight. While there is an approximation algorithm that provides a solution to the minimum-degree spanning tree problem to within an additive error of one <ref> [50] </ref>, no approximations are known for the weighted-degree problem. We provide the first approximation algorithm for this problem. <p> The case of spanning trees treated in Theorem 6.1.2 is less interesting in the case of node-weighted graphs since every node must be included in the solution. This problem then reduces to computing a minimum-degree spanning tree that has been well-studied <ref> [49, 50] </ref>. We focus our attention on the more interesting case of Steiner trees. In Chapter 4, we presented the the first polynomial-time approximation algorithm for node-weighted Steiner trees. The performance guarantee of this approximation algorithm is logarithmic in the number of terminals specified in the problem. <p> A series of recent results have addressed the problem of minimum-degree networks of various forms: spanning trees <ref> [49, 50] </ref>, Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], <p> A series of recent results have addressed the problem of minimum-degree networks of various forms: spanning trees [49, 50], Steiner trees <ref> [3, 50] </ref>, generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] <p> It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization [121]. As we mentioned in Section 1.10, a recent breakthrough in this area was the work of Furer and Raghavachari <ref> [50] </ref>, who applied this technique to the minimum-degree spanning tree problem. They showed a version of a local optimization algorithm runs in polynomial time to produce near-optimal solutions. The work in this chapter is inspired by that of Furer and Raghavachari. <p> In this work, we are interested in the application of local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum. Furer and Raghavachari <ref> [50] </ref> showed such an application of local search to the problem of computing a spanning tree of a given graph whose maximum degree is minimum. This is termed the minimum-degree spanning tree problem and is NP-complete [53].
Reference: [51] <author> M. Furer and B. Raghavachari, </author> <title> "Approximating the minimum-degree Steiner tree to within one of optimal", </title> <type> TR CS-92-13, </type> <institution> Pennsylvania State University, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: In fact, our work is a generalization of this algorithm and reduces to their algorithm for this special case. Their analysis of this special case of our algorithm also shows that in this case, our algorithm is polynomial-time. Furer and Raghavachari <ref> [51] </ref> later demonstrated a polynomial-time algorithm for the Steiner case that finds a tree whose degree is within one from optimal. 5.3 The Minimum-degree Constrained Forest Problem We begin this section by formulating general one-connected network problems using the framework of proper function introduced in Section 3.3.
Reference: [52] <author> H. N. Gabow, M. X. Goemans, and D. P. Williamson, </author> <title> "An efficient approximation algorithm for the survivable network design problem," </title> <booktitle> in Proceedings, the third Integer Programming and Combinatorial Optimization Conference (1993), </booktitle> <pages> pp 57-74. </pages>
Reference-contexts: We also extend and use this technique combined with the idea of applying it in phases in Chapter 3. There has been a surge of work subsequent to ours in extending our techniques to higher-connected network problems <ref> [52, 61, 154] </ref>. 1.10 Local Optimization Local optimization has been a well-known heuristic for hard problems even before the theory of NP-completeness was formalized [30]. There have been many practically successful applications of this heuristic to many important hard problems. <p> This follows from the observation that separation over (IP) is equivalent to solving an instance of finding the minimum-cut around any active set. The latter problem can be solved using the fact that proper functions are uncrossable and can be inferred from the results in <ref> [52, 154] </ref>. Using the Ellipsoid method [64], which provides a polynomial-time reduction of the optimization problem to the separation problem, we have that the fractional relaxation of (IP) can be solved in polynomial-time. <p> general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks <ref> [52, 60, 154] </ref>. Bottleneck problems have been investigated in [20, 72, 123]. Multi-objective approximations While there has been much work on finding minimum-cost networks for each of the cost measures that we simultaneously minimize, there has been relatively little work on approximations for multi-objective network-design. <p> We list below several specific open issues that arose in the course of our work. * While the result on finding bridge-connected Steiner subgraphs in 2 has been generalized and studied extensively <ref> [52, 61, 90, 154] </ref>, the result on the biconnected case in this chapter is the only one known to date. In recent work with D. <p> It is an intriguing open problem to apply the primal-dual method to general node-survivability prob lems. * While the phased approach introduced in Chapter 3 has been taken to its limit <ref> [52, 61, 154] </ref> in the recent spate of work, it is unclear whether the performance guarantees achieved in these papers are best-possible.
Reference: [53] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A guide to the theory of NP-completeness, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco (1979). </address>
Reference-contexts: In this thesis, we consider the maximum-leaf spanning tree problem and provide approximation 3 algorithms for this network-design problem as well. 1.5 Approximation algorithms Like many important problems in combinatorial optimization, the Steiner tree problem and most of its variants are NP-complete to solve exactly <ref> [53, 83] </ref>. The class of NP-complete problems represents a colossal collection of polynomially-equivalent problems for which no polynomial-time algorithms are known. One of the outstanding open questions in computational complexity theory has been "N P = P ?", i.e., whether the class of NP-complete problems admits a polynomial-time solution. <p> Early results on non-approximability <ref> [53, 161] </ref> were sporadic and used very specialized techniques. The recent connection drawn between results from the study of interactive proof systems from communication complexity theory [5, 6, 41, 110] and proving non-approximability results has provided a unified way to prove such results. <p> This problem is a generalization of the Hamil-tonian Path problem and hence is clearly NP-hard <ref> [53] </ref>. The first result on approximating the minimum-degree spanning tree was that of Furer and Raghavachari [49]. They gave a polynomial time approximation algorithm for minimum-degree spanning tree with performance guarantee O (log n). Their algorithm further generalizes to find rooted spanning trees in directed graphs of approximately minimum indegree. <p> Consider the problem of computing a kedge-connected subgraph N of G which spans V such that the maximum degree of N is minimum. The case of k = 1 corresponds to the minimum-degree spanning tree problem and is NP-hard <ref> [53] </ref>. So far there have been no results when k &gt; 1. In this section, we consider the case when k = 2 (two-edge-connected graphs are also called bridge-connected). In this section, "connectivity" always stands for edge connectivity (and not vertex connectivity). <p> Extension: Approximating minimum weighted-degree spanning trees We can extend the techniques used to prove Theorem 6.1.2 to approximate the following generalization of the minimum-degree spanning tree problem <ref> [53, 49, 50] </ref>. Given nonnegative weights on the edges, define the weighted-degree of any node in a spanning tree to be the sum of the weights of the edges incident to the node in the tree. <p> We can use a spanning tree with the maximum number of leaves as a heuristic solution (with no guarantees) for the latter problem. The maximum-leaf spanning tree problem is NP-complete <ref> [53] </ref>. In this chapter, we use the simple technique of local optimization to provide the first approximation algorithms for this problem. These algorithms perform a series of local-improvement steps until a local optimum is reached and output a locally optimal solution. <p> Furer and Raghavachari [50] showed such an application of local search to the problem of computing a spanning tree of a given graph whose maximum degree is minimum. This is termed the minimum-degree spanning tree problem and is NP-complete <ref> [53] </ref>. Furer and Raghavachari show that local optimization can be applied to produce spanning trees and even Steiner trees of nearly minimum degree. We showed in Chapter 5 how to generalize their technique to obtain approximation algorithms for a variety of minimum-degree network-design problems.
Reference: [54] <author> N. Garg, V. Vazirani, and M.Yannakakis, </author> <title> "Approximate max-flow min-(multi) cut theorems and their applications," </title> <booktitle> Proc., 25th Annual ACM Symp. on Theory of Computing, </booktitle> <year> (1993), </year> <pages> pp. 698-707. </pages>
Reference: [55] <author> N. Garg, V. Vazirani, and M.Yannakakis, </author> <title> "Primal-dual approximation algorithms for integral flow and multicut in trees, with applications to matching and set cover," </title> <booktitle> Proc. of the 20th Internatnl. Colloq. on Automata, Langs. and Prog. </booktitle> <year> (1993). </year>
Reference: [56] <author> B. Gavish, </author> <title> "Topological design of centralized computer networks formulations and algorithms," </title> <booktitle> Networks 12 (1982), </booktitle> <pages> pp. 355-377. </pages>
Reference-contexts: Gavish <ref> [56] </ref> formulated the minimum-degree spanning tree problem as a mixed integer program and provided an exact solution using the method of Lagrangian multipliers.
Reference: [57] <author> E. N. Gilbert, and H. O. Pollak, </author> <title> "Steiner minimal trees," </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> vol. 16 (1968), </volume> <pages> pp. 1-29. </pages>
Reference: [58] <author> D. E. Goldberg, </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning, </title> <publisher> Addison-Wesley (1989). </publisher>
Reference-contexts: The underlying idea in this method is simple: start with an arbitrary solution, apply local 9 changes that improve the quality of the solution until a locally-optimal solution is reached, and output this solution. There are several randomized variants of this basic technique variously termed genetic algorithms <ref> [58] </ref>, tabu-search, and simulated annealing [151]. However, none of these various heuristic techniques have been known to be approximation algorithms in the sense we have described. A theoretical breakthrough in this area came with the work of Furer and Raghavachari [50].
Reference: [59] <author> M. X. Goemans and D. J. Bertsimas, </author> <title> "Survivable networks, linear programming relaxations and the parsimonious property," OR 216-90, Center for Operations Research, MIT (1990); An extended abstract appears as "On the parsimonious property of connectivity problems," </title> <booktitle> in Proceedings of the First Annual ACM-SIAM Symposium on Discrete Algorithms (1990), </booktitle> <pages> pp. 388-396. </pages>
Reference-contexts: When the cost function c obeys the triangle inequality, then Fredrickson and Ja'Ja' [47] present an adaptation of Christofides' heuristic to solve the minimum-cost biconnectivity augmentation problem with a performance factor of 3 2 . There has been considerable previous work on network survivability <ref> [59, 66, 116, 117, 144] </ref> that addresses constructing minimum-cost k-connected subgraphs under such cost functions. However, our interest is in the general case when the cost function does not satisfy the triangle inequality. <p> However, our interest is in the general case when the cost function does not satisfy the triangle inequality. There has also been considerable work on characterizations of integer polyhedra arising from connectivity constraints [65], and construction of minimum-cost two-connected survivable networks <ref> [59, 118] </ref>. As mentioned in the previous section, Agrawal, Klein and Ravi [2] introduced a primal-dual method for approximating the minimum-cost generalized Steiner network.
Reference: [60] <author> M. X. Goemans, and D. P. Williamson, </author> <title> "A general approximation technique for constrained forest problems," </title> <booktitle> Proceedings of the Third Annual ACM-SIAM Symposium on Discrete Algorithms (1992), </booktitle> <pages> pp. 307-316. </pages>
Reference-contexts: The particular family of cuts depends on the problem to be formulated. Building on the work of Agrawal, Klein and Ravi [1, 2], Goemans and Williamson <ref> [60] </ref> formulated a minimum-cost one-connected network-design problem as such a cut-cover problem and provided an approximation algorithm with performance factor two. Their formulation captures many important one-connectivity requirements such as Steiner trees, generalized Steiner forests, T -joins, and non-fixed point-to-point interconnection networks. <p> This technique yields an approximation algorithm for computing a near-optimal dual solution as well. This technique was used in a paper of Agrawal, Klein and Ravi [1, 2] and made more explicit in the subsequent work of Goemans and Williamson <ref> [60] </ref>. We use the approximate equality between two combinatorial quantities proved in [2] in proving the performance guarantee in Chapter 2. We also extend and use this technique combined with the idea of applying it in phases in Chapter 3. <p> Any set of edges that crosses each of the active cuts twice is a feasible solution to the two--connected Steiner network problem. We can generalize this two-connected network design problem by extending our notion of active cuts. For this, we turn to the work of Goemans and Williamson in <ref> [60] </ref> where they define the notion of proper functions. Proper functions are a class of functions used for defining the activity of cuts in a graph. In [2], Agrawal, Klein and Ravi provided the first approximation algorithm for the generalized network Steiner problem. <p> In [2], Agrawal, Klein and Ravi provided the first approximation algorithm for the generalized network Steiner problem. The algorithm presented there involved construction of feasible primal and dual solutions with an approximate relation between their values. Subsequently, Goemans and Williamson <ref> [60] </ref> generalized this result to a technique for approximating a large class of constrained forest problems. They introduced the notion of proper functions whose elegant definition captures the connectivity requirements for a variety of constrained forest problems. <p> For this, we set f (S) to 1 whenever jS " Cj 6= jS " Dj and to 0 otherwise. Strategy The algorithm we present in this chapter works in two phases. In the first phase, the algorithm in <ref> [60] </ref> is applied to construct a partial solution F 1 that partially satisfies the requirements in (IP), namely, the solution satisfies the one-connectivity constraints: x ((S)) f (S) ; 6= S V . <p> The second phase is a careful reapplication of the methods of Goemans and Williamson. We define an auxiliary function f 0 specifying a different notion of active cuts, based on the partial solution F 1 . If f 0 were proper, then we could reapply the method in <ref> [60] </ref> directly. Unfortunately, f 0 is not proper and so we need to adapt this method. Approximating augmentation The techniques used in proving Theorem 3.1.1 can be adapted to provide approximation algorithms for minimum-cost augmentation. <p> As mentioned in the previous section, Agrawal, Klein and Ravi [2] introduced a primal-dual method for approximating the minimum-cost generalized Steiner network. Though this result addressed arbitrary connectivity requirements between pairs of nodes, it allowed for edge replication. 26 This was consequently generalized by Goemans and Williamson in <ref> [60] </ref>. Our method combines the two-phase idea of Fredrickson and Ja'Ja' with a primal-dual method tailored to provide an approximate solution in both phases. 3.3 Background Following [60], we define the notion of a proper function f : 2 V ! f0; 1g. <p> addressed arbitrary connectivity requirements between pairs of nodes, it allowed for edge replication. 26 This was consequently generalized by Goemans and Williamson in <ref> [60] </ref>. Our method combines the two-phase idea of Fredrickson and Ja'Ja' with a primal-dual method tailored to provide an approximate solution in both phases. 3.3 Background Following [60], we define the notion of a proper function f : 2 V ! f0; 1g. <p> In the first phase, we construct an approximate solution to the following modified integer program: Min e2E c e x e subject to constraints: x ((S)) f (S) ; ; 6= S V (IP1) We do this using the method in <ref> [60] </ref>. Let the solution generated be denoted by F 1 . We shall use F 1 to denote the set of edges in this solution returned in the first phase. It follows from [60] that F 1 induces a forest in G. The algorithm in [60] implicitly constructs a dual solution <p> x ((S)) f (S) ; ; 6= S V (IP1) We do this using the method in <ref> [60] </ref>. Let the solution generated be denoted by F 1 . We shall use F 1 to denote the set of edges in this solution returned in the first phase. It follows from [60] that F 1 induces a forest in G. The algorithm in [60] implicitly constructs a dual solution to the above linear program to prove the performance guarantee. This dual to the linear relaxation of the above integer program (using x e 0) is the following. <p> this using the method in <ref> [60] </ref>. Let the solution generated be denoted by F 1 . We shall use F 1 to denote the set of edges in this solution returned in the first phase. It follows from [60] that F 1 induces a forest in G. The algorithm in [60] implicitly constructs a dual solution to the above linear program to prove the performance guarantee. This dual to the linear relaxation of the above integer program (using x e 0) is the following. <p> Max SV f (S) y S subject to constraints: P y S 0 ; ; 6= S V Recall that A is the set of terminals in V . We will be using the following results from <ref> [60] </ref>. 27 Theorem 3.3.1 ([60]) The solution F 1 feasible for (IP1) and the dual y constructed are related by X c e (2 jAj X y S Lemma 3.3.2 ([60]) Let e 2 N where N is a connected component of a minimal solution F 1 . <p> Note that the dual solution y provided by the algorithm of <ref> [60] </ref> is feasible for (LP) by setting r e = 0 for all edges e. The value of the above program (LP) with this solution is 2 P SV y S . Thus we have OP T 2 SV y S . <p> As long as there remains an active cluster, there remain at least two clusters since f 0 (V ) = 0. In the end, we do a clean-up to retain only essential edges and remove redundant edges. The algorithm We use the notation of <ref> [60] </ref>. We shall use C to denote the set of clusters that the algorithm maintains. For a vertex v, we let C v denote the cluster containing v. We shall use a counter t which records the iteration number during the course of the algorithm. <p> operations destroys bridge edges and so b t remains a bridge in the graph G (t 0 ) fe t g . 2 We shall use the above lemma in the proof of the performance guarantee. 3.5 The Performance Guarantee Our analysis of the algorithm is modeled on that of <ref> [60] </ref>. In this section, we prove Theorem 3.3.6. From the construction of the ~y values and the choice of edges in F , we get the following lemma directly. Lemma 3.5.1 The solution ~y satisfies ~y S &gt; 0 only when j (S) " F 1 j = 1. <p> Theorem 3.5.2 For each iteration number t, the sum of the degrees of the active nodes in the graph (C (t); F 2 (t)) is at most 2 (k (t) 1). The proof of Theorem 3.3.6 is adapted from a proof by Goemans and Williamson <ref> [60] </ref>. They use a lemma similar to our Theorem 3.5.2 in order to prove Theorem 3.3.6 by induction on the iteration count t. However, our proof of Theorem 3.5.2 differs completely from the proof of its counterpart in [60]. <p> of Theorem 3.3.6 is adapted from a proof by Goemans and Williamson <ref> [60] </ref>. They use a lemma similar to our Theorem 3.5.2 in order to prove Theorem 3.3.6 by induction on the iteration count t. However, our proof of Theorem 3.5.2 differs completely from the proof of its counterpart in [60]. We now show that the above theorem suffices to prove Theorem 3.3.6. 35 Proof of Theorem 3.3.6: The proof is by induction on the iteration count t. From Lemma 3.5.1, we can write P P P S:(S)3e ~y S . <p> We then define a minimal version F 1 of F by retaining only the edges in F that are critical. Formally, we define F 1 fe 2 F : for some connected component N of (V; F feg); f (N ) = 1g It follows from the results in <ref> [60] </ref> that if F is feasible for the one-connectivity constraints, then so is F 1 . We can then use F 1 as the skeletal forest and apply the second-phase algorithm in Section 3.4. <p> This completes the proof of the stronger bound in Theorem 3.1.2. 2 3.7 Implementation Issues We note that our algorithm can be implemented in time O (n 2 log n) where n = jV j using the techniques in <ref> [60] </ref>. We address the implementation of the clean-up steps. The important observation here is the initial forest F 1 and the candidate set of edges F both form acyclic subgraphs. Hence the total number edges in them is O (n). <p> Indeed, while constant-factor approximations are known for the standard problem [96, 125, 148, 164] and even some of its generalizations <ref> [2, 60] </ref>, the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P [14, 110]. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem. The performance guarantee is logarithmic. <p> The edge-weighted version of this problem was addressed in [2]; the node-weighted version can be approximately solved using the method of this chapter. We use a framework due to Goemans and Williamson <ref> [60] </ref> to formulate problems like that described above. Many network-design problems can be formulated as finding a subgraph of minimum-cost that covers a family of cuts in the graph (the particular family depends on the problem). <p> Many network-design problems can be formulated as finding a subgraph of minimum-cost that covers a family of cuts in the graph (the particular family depends on the problem). For certain families of cuts, the edge-weighted problem can be approximated to within a factor of two <ref> [60] </ref>. We show in Section 4.5 that the node-weighted variants of these network-design problems can also be approximated; the performance is as in Theorem 4.1.1. 4.2 The Algorithm In this section we describe the algorithm. <p> As for the Steiner tree problem, every solution subgraph must contain all the terminals. Hence we can assume without loss of generality that the terminal nodes have zero cost. 54 Goemans and Williamson <ref> [60] </ref> gave a 2-approximation algorithm for edge-weighted cut-cover problems where the cut-family corresponds to a proper function f . In this chapter we give a complementary result for node-weighted problems. Theorem 4.5.1 Let G be a graph with node- and edge-weights. <p> The algorithm reduces the number of active trees in the network by at least one in each iteration, so it eventually terminates and outputs a set of inactive trees as the final solution. Thus each connected component of the solution is inactive. It follows <ref> [60] </ref> that the solution is in fact a cut-cover. The proof of the performance guarantee proceeds as before, except that we define the value of the potential function i to be the number of active trees in the current solution, rather than the number of trees. <p> We then introduce the notion of weakness, a generalization of the reciprocal of the toughness of a graph. We then state results relating this quantity to the minimum degree of networks and prove these results algorithmically. Formulation We recall the framework proposed by Goemans and Williamson <ref> [60] </ref> for specifying connectivity requirements that we introduced in Section 3.3. This framework captures a wide variety of specifications of requirements, including Steiner and generalized Steiner connectivity, general point-to-point connectivity, and T -joins. <p> This framework captures a wide variety of specifications of requirements, including Steiner and generalized Steiner connectivity, general point-to-point connectivity, and T -joins. In this chapter, we show how to find a network satisfying the requirements that has nearly minimum degree. All we use of <ref> [60] </ref> is their framework for specifying connectivity requirements; our algorithm and analysis are based on the work of Furer and Raghavachari [50]. Consider a spanning tree of a graph, and any cut in the graph. At least one edge of the spanning tree must cross this cut. <p> Conversely, if a network crosses every cut, it must span all nodes. More generally, in order to specify connectivity requirements for a network, we designate a subset of the cuts in a graph as active cuts, and we require that the network cross every active cut. Goemans and Williamson <ref> [60] </ref> introduced the formalism of specifying which cuts are active using a 0-1 function f on the node-subsets of a graph. For a node-subset S, recall that (S) denotes the set of edges each having exactly one endpoint in S. <p> We call any feasible solution to (IP) an f -join. Minimal f -joins are forests <ref> [60] </ref>. Goemans and Williamson [60] focused on the class of proper function f . <p> We call any feasible solution to (IP) an f -join. Minimal f -joins are forests <ref> [60] </ref>. Goemans and Williamson [60] focused on the class of proper function f . <p> We find a forest F that is feasible for the covering constraints of (IP) using an iterative local-improvement algorithm. Note that we can always assume without loss of generality that any feasible solution to (IP) is the incidence vector of a forest <ref> [60] </ref>. The claim on the running time of the algorithm is proved using a potential function argument. Lemma 5.3.5 ([60]) Let F denote a subset of the edge set of G. <p> Here k represents the number of nodes of G that are sites. Building on the work of Agrawal, Klein and Ravi [2], Goemans and Williamson <ref> [60] </ref> considered a class of constrained forest problems using the formalism of proper functions. We described their 76 formalism in Section 3.3. The generalized Steiner forest problem is a prototypical example of such a constrained forest problem. Our techniques directly extend to approximating degree-bounded minimum-cost networks of this general form. <p> G on n nodes with nonnegative weights on the edges, constructs a spanning tree of G in which the maximum weighted-degree of any node is O (log n) times the minimum possible. 77 This theorem, however, does not generalize to the case of more general constrained forest prob-lems addressed in <ref> [2, 60] </ref>. It does generalize to the case in which, given costs and weights (two distinct measures on the edges), and a bound B on the maximum weighted-degree of any node, we are required to find a minimum-cost spanning tree under this weighted-degree constraint. <p> Thus the above theorem is a strict generalization of Theorem 6.1.2. As before, we can extend the above theorem to generalized Steiner forests and to more general constrained forest problems addressed in <ref> [2, 60] </ref>. 78 An application: Approximating minimum-degree generalized Steiner forests Theorem 6.1.3 has an important application. We can use this theorem to provide a polynomial-time approximation algorithm for a class of minimum-degree forest problems that we considered in Chapter 5. <p> general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks <ref> [52, 60, 154] </ref>. Bottleneck problems have been investigated in [20, 72, 123]. Multi-objective approximations While there has been much work on finding minimum-cost networks for each of the cost measures that we simultaneously minimize, there has been relatively little work on approximations for multi-objective network-design. <p> Here k represents the number of terminals defined by f . The proof of the above theorem is identical to that of Theorem 6.1.3 with the only difference that active components are now defined directly by the function f . It follows from the properties of proper functions <ref> [60] </ref> that each active component must be connected with at least one other active component in any solution. <p> This in turn is at most k (k+2)c fl 2 . However, we can apply an approximate min-max relation between a MST and a packing of cuts in the graph that is derived in <ref> [2, 60] </ref> in proving a better performance guarantee of k + 2 for the total cost. In particular, if OP T k denotes the cost of a minimum k-connected subgraph, we show that OP T k kc fl 2 . <p> The following is a restatement of Theorem 2.5.1 and is a consequence of the results in <ref> [2, 60] </ref>. Theorem 6.6.5 Given an undirected graph with edge-weights, the minimum-weight spanning tree has weight at most twice the value of a maximum packing of cuts.
Reference: [61] <author> M. Goemans, A. Goldberg, S. Plotkin, D. Shmoys, E. Tardos, and D. Williamson, </author> <title> "Improved approximation algorithms for network design problems," </title> <note> (manuscript) July 1993. </note>
Reference-contexts: We also extend and use this technique combined with the idea of applying it in phases in Chapter 3. There has been a surge of work subsequent to ours in extending our techniques to higher-connected network problems <ref> [52, 61, 154] </ref>. 1.10 Local Optimization Local optimization has been a well-known heuristic for hard problems even before the theory of NP-completeness was formalized [30]. There have been many practically successful applications of this heuristic to many important hard problems. <p> We list below several specific open issues that arose in the course of our work. * While the result on finding bridge-connected Steiner subgraphs in 2 has been generalized and studied extensively <ref> [52, 61, 90, 154] </ref>, the result on the biconnected case in this chapter is the only one known to date. In recent work with D. <p> It is an intriguing open problem to apply the primal-dual method to general node-survivability prob lems. * While the phased approach introduced in Chapter 3 has been taken to its limit <ref> [52, 61, 154] </ref> in the recent spate of work, it is unclear whether the performance guarantees achieved in these papers are best-possible.
Reference: [62] <author> R. L. Graham, and F. K. Hwang, </author> <title> "Remarks on Steiner minimal trees," </title> <journal> Bull. Inst. Math. Acad. Sinica, </journal> <volume> vol. 4 (1976), </volume> <pages> pp. 177-182. 140 </pages>
Reference: [63] <author> J. R. Griggs, D. J. Kleitman, and A. Shastri, </author> <title> "Spanning trees with many leaves in cubic graphs," </title> <journal> Journal of Graph Theory, </journal> <volume> 13 (1989), </volume> <pages> pp. 669-695. </pages>
Reference: [64] <author> M. Grotschel, L. Lovasz and A. Schrijver, </author> <title> Geometric Algorithms and Combinatorial Optimization, </title> <publisher> Springer-Verlag (1988). </publisher>
Reference-contexts: The latter problem can be solved using the fact that proper functions are uncrossable and can be inferred from the results in [52, 154]. Using the Ellipsoid method <ref> [64] </ref>, which provides a polynomial-time reduction of the optimization problem to the separation problem, we have that the fractional relaxation of (IP) can be solved in polynomial-time. It follows from Theorem 5.3.3 that the value of this linear program is a good estimate of the minimum degree.
Reference: [65] <author> M. Grotschel, and C. L. Monma, </author> <title> "Integer polyhedra arising from certain network design problems with connectivity constraints," </title> <journal> SIAM J. on Discrete Math., </journal> <volume> Vol 3, No. 4 (1990), </volume> <pages> pp. 502-523. </pages>
Reference-contexts: However, our interest is in the general case when the cost function does not satisfy the triangle inequality. There has also been considerable work on characterizations of integer polyhedra arising from connectivity constraints <ref> [65] </ref>, and construction of minimum-cost two-connected survivable networks [59, 118]. As mentioned in the previous section, Agrawal, Klein and Ravi [2] introduced a primal-dual method for approximating the minimum-cost generalized Steiner network.
Reference: [66] <author> M. Grotschel, C. L. Monma, and M. Stoer, </author> <title> "Computational results with a cutting plane algorithm for designing communication networks with low-connectivity constraints," </title> <note> to appear, </note> <institution> Oper. Res., </institution> <year> (1992). </year>
Reference-contexts: This can be achieved by using an underlying two-edge-connected network. 2 such networks has received considerable attention in the past <ref> [66, 116, 117, 144] </ref>. The higher con-nectivity requirement may be an edge-connectivity requirement or a node-connectivity requirement. In this thesis we address both these generalizations. <p> When the cost function c obeys the triangle inequality, then Fredrickson and Ja'Ja' [47] present an adaptation of Christofides' heuristic to solve the minimum-cost biconnectivity augmentation problem with a performance factor of 3 2 . There has been considerable previous work on network survivability <ref> [59, 66, 116, 117, 144] </ref> that addresses constructing minimum-cost k-connected subgraphs under such cost functions. However, our interest is in the general case when the cost function does not satisfy the triangle inequality.
Reference: [67] <author> J. R. Griggs, D. J. Kleitman, and A. Shastri, </author> <title> "Spanning trees with many leaves in cubic graphs," </title> <journal> J. Graph Theory, </journal> <volume> 13 (1989), </volume> <pages> pp. 669-695. </pages>
Reference-contexts: Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [67, 92, 124, 145] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves.
Reference: [68] <author> S. L. Hakimi, </author> <title> "Steiner's problem in graphs and its implications," </title> <journal> Networks, </journal> <volume> vol. 1 (1971), </volume> <pages> pp. 113-133. </pages>
Reference-contexts: Introduction 1.1 Steiner trees ... The advent of high-speed and high-bandwidth networks has triggered a spate of work in the application of combinatorial techniques from discrete mathematics and computer science to problems in network design. The Steiner tree problem <ref> [68] </ref> is a classical example of such a problem that arises frequently in practice. This problem arises in applications as diverse as VLSI routing, telecommunication-network design and phylogeny. <p> The results in this chapter were obtained jointly with Philip Klein, and appeared in [91]. 4.1 Problem Definition The Steiner tree problem in networks that we introduced in Section 1.1 is a classic hard problem in combinatorial optimization. Much research has been devoted to heuristics for its solution <ref> [33, 68, 112, 134, 135, 163] </ref>. Despite a slew of new approximation algorithms for this problem and some of its variants, no approximation algorithm has been given for perhaps the most natural variant: the node-weighted Steiner tree problem, in which costs can be assigned to nodes as well as edges. <p> That is, it is the minimum ratio of jXj to the number of components in G X where X ranges over all non-trivial node-subsets of G. Computing the toughness of a graph was recently shown NP-complete by Bauer, Hakimi and Schmeichel <ref> [68] </ref>. The definition of toughness we have given differs slightly from Chvatal's original definition in [26]. According to our definition, the minimum toughness ratio is never more than 1 (for nonsingleton graphs), since even a singleton X yields a ratio of at most 1.
Reference: [69] <author> Mark D. Hansen, </author> <title> "Approximation algorithms for geometric embeddings in the plane with applications to parallel processing problems," </title> <booktitle> Proceedings of the 30th Annual IEEE Conference on Foundations of Computer Science (1989), </booktitle> <pages> pp. 604-609. </pages>
Reference: [70] <author> M. Held, and R. M. Karp, </author> <title> "The traveling salesman problem and minimum spanning trees," </title> <journal> Operations Research, </journal> <volume> vol. 18 (1970), </volume> <pages> pp. 1138-1162. </pages>
Reference: [71] <author> M. Held, and R. M. Karp, </author> <title> "The traveling salesman problem and minimum spanning trees: part II," </title> <journal> Math. Prog., </journal> <volume> vol. 1 (1971), </volume> <pages> pp. 6-25. </pages>
Reference: [72] <author> D. S. Hochbaum, and D. B. Shmoys, </author> <title> "An unified approach to approximation algorithms for bottleneck problems," </title> <journal> JACM, </journal> <volume> Vol. 33, No. 3, </volume> <pages> pp. 533-550, </pages> <month> (July </month> <year> 1986). </year>
Reference-contexts: Problems in which the objective is to keep the bottleneck cost low are termed bottleneck problems and these have also received considerable attention <ref> [20, 72, 123] </ref>. In many applications that arise in real-world situations, the network to be built is required to minimize more than one of these cost measures simultaneously. Recent papers have identified many problems [8, 85, 89, 161] wherein multiple objectives are specified in the statement of the problem. <p> Bottleneck problems have been investigated in <ref> [20, 72, 123] </ref>. Multi-objective approximations While there has been much work on finding minimum-cost networks for each of the cost measures that we simultaneously minimize, there has been relatively little work on approximations for multi-objective network-design.
Reference: [73] <author> F. K. Hwang, </author> <title> "On Steiner minimal trees with rectilinear distance," </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> vol. 30(1) (1976), </volume> <pages> pp. 104-114. </pages>
Reference: [74] <author> F. K. Hwang and D. S. Richards, </author> <title> "Steiner tree problems," </title> <journal> Networks, </journal> <volume> Vol. 22, No. 1, </volume> <pages> pp. </pages> <month> 55-90 </month> <year> (1992). </year>
Reference-contexts: Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154]. Good approximation algorithms have constant performance ratios <ref> [9, 22, 74, 156, 164] </ref> while best-possible approximation algorithms achieve guarantees that cannot be better unless P = N P [50, 152]. <p> The algorithm we propose is only a slight variant of a heuristic proposed by Rayward-Smith and Clare in 1986 <ref> [74, 135, 134] </ref> for the standard edge-weighted Steiner tree problem. The key to our analysis is a decomposition lemma for trees; this lemma may be useful in other contexts as well. <p> spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees <ref> [74, 156, 164] </ref>, generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123].
Reference: [75] <author> A. Iwainsky, E. Canuto, O. Taraszow, and A. Villa, </author> <title> "Network decomposition for the optimization of connection structures," </title> <journal> Networks, </journal> <volume> 16, </volume> <pages> pp. 205-235, </pages> <year> (1986). </year> <month> 141 </month>
Reference-contexts: The solution output is approximate in terms of both the number of median-nodes used and the sum of the distances from each vertex to the nearest median. Iwainsky et al. <ref> [75] </ref> formulated a version of the minimum-cost Steiner problem with an additional cost based on node-degrees. Duin and Volgenant [36], motivated by practical considerations, formulated the degree-bounded Steiner tree problem. Other researchers have addresses multi-objective approximation algorithms for problems arising in areas other than network design.
Reference: [76] <author> A. Jain, </author> <title> "Probabilistic analysis of an LP relaxation bound for the Steiner problem in networks," </title> <journal> Networks, </journal> <volume> vol. 19 (1989), </volume> <pages> pp. 793-801. </pages>
Reference: [77] <author> D. S. Johnson, </author> <title> "The NP-completeness column, an ongoing guide," </title> <journal> Journal of Algorithms, </journal> <volume> vol. 5 (1984), </volume> <pages> pp. 147-160. </pages>
Reference: [78] <author> D. S. Johnson, </author> <title> "The NP-completeness column, an ongoing guide," </title> <journal> Journal of Algorithms, </journal> <volume> vol. 6 (1985), </volume> <pages> pp. 434-451. </pages>
Reference: [79] <author> D. S. Johnson, </author> <title> "Approximation algorithms for Combinatorial Problems," </title> <journal> J. Computer System. Sci., </journal> <volume> 9, </volume> <pages> pp. </pages> <month> 256-278 </month> <year> (1974). </year>
Reference-contexts: We elaborate on these techniques below. 1.9 The Primal-Dual method This technique uses the framework of linear programming to derive approximate solutions to NP-hard problems. This technique has been well-known since its application to approximate the set-cover problem <ref> [25, 79, 107] </ref>. There has recently been a lot of work in applying this technique to approximation algorithms [1, 2, 3, 9, 52, 55, 60, 61, 88, 103, 90, 154]. There are two distinct ways in which this method can be applied to approximation algorithms.
Reference: [80] <author> D. S. Johnson, C. H. Papadimitriou, and M. Yannakakis, </author> <title> "How easy is local search?," </title> <journal> J. Comp. Syst. Sci., </journal> <volume> 37(1988), </volume> <pages> pp. 79-100. </pages>
Reference-contexts: There have been many practically successful applications of this heuristic to many important hard problems. Some notable examples are its applications to the graph partitioning [84, 43] and the Traveling Salesperson problems [102]. More recently, there has been some work on complexity issues related to this method <ref> [80, 120] </ref>. The underlying idea in this method is simple: start with an arbitrary solution, apply local 9 changes that improve the quality of the solution until a locally-optimal solution is reached, and output this solution. <p> Some notable examples are its applications to the graph partitioning [84] and the Traveling Salesperson problems [102]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in <ref> [80, 120] </ref>. In this work, we are interested in the application of local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum.
Reference: [81] <author> D. Karger, R. Motwani, and G. D. S. Ramkumar, </author> <title> "On approximating the longest path in a graph," </title> <booktitle> to appear in Proceedings, Workshop on Algorithms and Data Structures 1993. </booktitle>
Reference-contexts: It is natural to ask if techniques similar to ours can be used to approximate this problem as well. We can use recent results on hardness of approximating the longest path problem <ref> [81] </ref> to infer that the minimum-leaf spanning tree problem is hard to approximate. The key observation is that a spanning tree on n nodes with at most ` leaves contains a path with at least 2n=` edges. <p> By our observation above, this yields a path in the graph of size at least n=f . The results of Karger, Motwani and Ramkumar <ref> [81] </ref> imply that f is at least 2 (log 1* n) for any * &gt; 1 unless ~ P = N P 3 . 3 Recall that ~ P stands for the complexity class Deterministic Quasi-polynomial time, or DTIME [n polylog n ]. 132 Chapter 8 Conclusions and Open Issues We
Reference: [82] <author> N. Karmakar, </author> <title> "A new polynomial-time algorithm for linear programming," </title> <journal> Combinatorica, </journal> <volume> vol. 4, </volume> <pages> pp. </pages> <month> 373-395 </month> <year> (1984). </year>
Reference: [83] <author> R. M. Karp, </author> <title> "Reducibility among combinatorial problems," </title> <editor> in R. E. Miller and J. W. Thatcher (eds.), </editor> <booktitle> Complexity of Computer Communications. </booktitle> <publisher> Plenum Press, </publisher> <address> New York (1972), </address> <pages> pp. 85-103. </pages>
Reference-contexts: In this thesis, we consider the maximum-leaf spanning tree problem and provide approximation 3 algorithms for this network-design problem as well. 1.5 Approximation algorithms Like many important problems in combinatorial optimization, the Steiner tree problem and most of its variants are NP-complete to solve exactly <ref> [53, 83] </ref>. The class of NP-complete problems represents a colossal collection of polynomially-equivalent problems for which no polynomial-time algorithms are known. One of the outstanding open questions in computational complexity theory has been "N P = P ?", i.e., whether the class of NP-complete problems admits a polynomial-time solution. <p> These algorithms perform a series of local-improvement steps until a local optimum is reached and output a locally optimal solution. This notion of applying local-improvement heuristics to hard optimization problems was around [30] long before the invention of NP-completeness <ref> [83] </ref>. It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization [121]. As we mentioned in Section 1.10, a recent breakthrough in this area was the work of Furer and Raghavachari [50], who applied this technique to the minimum-degree spanning tree problem.
Reference: [84] <author> B. W. Kernighan and S. Lin, </author> <title> "An efficient heuristic procedure for partitioning graphs," </title> <booktitle> BSTJ 49 (1970), </booktitle> <pages> pp. 291-308. </pages>
Reference-contexts: There have been many practically successful applications of this heuristic to many important hard problems. Some notable examples are its applications to the graph partitioning <ref> [84, 43] </ref> and the Traveling Salesperson problems [102]. More recently, there has been some work on complexity issues related to this method [80, 120]. <p> Chapter 19 of [121] surveys a few applications of this technique. Some notable examples are its applications to the graph partitioning <ref> [84] </ref> and the Traveling Salesperson problems [102]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in [80, 120].
Reference: [85] <author> S. Khuller, B. Raghavachari, and N. Young, </author> <title> "Balancing Minimum Spanning and Shortest Path Trees," </title> <booktitle> Proc., Fourth Annual ACM-SIAM Symposium on Discrete Algorithms (1993). </booktitle>
Reference-contexts: In many applications that arise in real-world situations, the network to be built is required to minimize more than one of these cost measures simultaneously. Recent papers have identified many problems <ref> [8, 85, 89, 161] </ref> wherein multiple objectives are specified in the statement of the problem. We formulate such multi-objective problems in the area of network design and provide approximation algorithms in this thesis. The optimization objective may also involve maximizing some notion of desirability in the network. <p> Agrawal, Klein and Ravi [89] provided an approximation algorithm for finding an elimination ordering for sparse Gaussian elimination to simultaneously minimize the fill-in, the total operation count and the elimination height. Khuller, Raghavachari, and Young <ref> [85] </ref> gave an algorithm for finding a rooted spanning tree of weight at most a constant times that of a MST such that the distance in this tree from the root is at most a constant times the distance in the input graph.
Reference: [86] <author> S. Khuller, and R. Thurimella, </author> <title> "Approximation algorithms for graph augmentation," </title> <journal> Journal of Algorithms, </journal> <volume> Vol 14 (2) (1993), </volume> <pages> pp. 214-225. </pages>
Reference-contexts: Fredrickson and Ja'Ja' [46] were the first to consider the problem of augmenting a given graph to make it two-connected. This is a special case of our problem in which all nodes are terminals. They showed that this problem is NP-hard and provided approximation algorithms. Subsequently, Khuller and Thurimella <ref> [86] </ref> presented a more efficient and simplified version of the results of Frederickson and Ja'Ja' [46]. The performance guarantee of these algorithms is two if the initial subgraph is connected and three otherwise. <p> The key idea in all our algorithms is to construct an auxiliary graph on a subset of the nodes in the original graph and to select a tree spanning these nodes. We then use the algorithms of Frederickson and Ja'Ja' [46] or those of Khuller and Thurimella <ref> [86] </ref> to find an approximately minimum-cost augmentation of this spanning tree to biconnect it. Finally we transform this augmentation to an augmentation that biconnects the tree in the original graph. <p> Furthermore, the weight of all these edges is at most the weight of the segments used to identify them, and hence is at most 2w (A). 2 Now we can apply the techniques of Frederickson and Ja'Ja' [46], or that of Khuller and Thurimella <ref> [86] </ref>, to find an approximately minimum-cost set of edges to augment the tree T in 19 T 0 to biconnect it. <p> Since the optimal augmentation of T in G induces an augmentation in T 0 of at most twice the cost by Lemma 2.4.6, and since the performance guarantee of the approximation algorithms of <ref> [46, 86] </ref> is two, we finally get an augmentation of cost at most four times the minimum. Finally we transform the augmentation in T 0 that we find to the collection of shortest paths in the original graph that the edges in the augmentation correspond to. <p> Finally we transform the augmentation in T 0 that we find to the collection of shortest paths in the original graph that the edges in the augmentation correspond to. Noting that the construction of the auxiliary graph T 0 and the algorithms in <ref> [46, 86] </ref> are polynomial-time completes the proof of Theorem 2.2.2. 2.5 The Biconnected Steiner Subgraph Problem In this section, we prove Theorem 2.2.1. To do this we need some background. <p> The technique we introduce in this chapter allows one to find nearly minimum-cost two-connected networks for a variety of connectivity requirements. For example, our result generalizes earlier results on finding a minimum-cost two-connected subgraph of a given edge-weighted graph in <ref> [46, 86] </ref>. Using our technique, we can also approximately solve for the first time a two-connected version of the generalized Steiner network problem and a two-connected version of the non-fixed point-to-point connection problem. <p> The minimum-cost augmentation problem is to choose a minimum-cost set of edges in G whose addition to G 0 yields a graph that obeys the constraints of (IP). This problem generalizes the minimum-cost bridge-connectivity augmentation problem considered in <ref> [46, 86] </ref> and also the Steiner version considered in Chapter 2. We have the following theorem about approximating the minimum-cost augmentation. <p> Their technique also gave an approximate solution to the minimum-cost two-connected subgraph problem. The performance guarantee is a multiplicative factor of three. Their solution for the latter problem starts with a minimum spanning tree and augments this to be two-connected. Khuller and Thurimella <ref> [86] </ref> have extended these results and provided more efficient algorithms for the same. In Chapter 2, we showed how to generalize this method achieving a weaker performance ratio to find minimum-cost two-connected Steiner subgraphs of a given graph.
Reference: [87] <author> S. Khuller, and U. Vishkin, </author> <title> "Biconnectivity approximations and graph carvings", </title> <booktitle> Proc., 24th Annual ACM Symp. on Theory of Computing, </booktitle> <year> (1993). </year>
Reference-contexts: All the above methods are also able to solve the node two-connected versions approximately. Khuller and Vishkin have presented algorithms with better performance guarantees for the minimum two-connected subgraph problems in <ref> [87] </ref>. The bounds are 3 2 for the two edge-connected case and 5 3 for the two node-connected case.
Reference: [88] <author> S. Khuller, U. Vishkin, and N. Young, </author> <title> "A primal-dual parallel approximation technique applied to weighted set and vertex cover," </title> <booktitle> Proceedings, the third Integer Programming and Combinatorial Optimization Conference (1993), </booktitle> <pages> pp. 333-342. </pages>
Reference: [89] <author> P. Klein, A. Agrawal, R. Ravi, and S. Rao, </author> <title> "Approximation through multicommodity flow," </title> <booktitle> in Proc. 31th Annual Symposium on Foundations of Computer Science (1990), </booktitle> <pages> pp. 726-737. 142 </pages>
Reference-contexts: In many applications that arise in real-world situations, the network to be built is required to minimize more than one of these cost measures simultaneously. Recent papers have identified many problems <ref> [8, 85, 89, 161] </ref> wherein multiple objectives are specified in the statement of the problem. We formulate such multi-objective problems in the area of network design and provide approximation algorithms in this thesis. The optimization objective may also involve maximizing some notion of desirability in the network. <p> Duin and Volgenant [36], motivated by practical considerations, formulated the degree-bounded Steiner tree problem. Other researchers have addresses multi-objective approximation algorithms for problems arising in areas other than network design. Agrawal, Klein and Ravi <ref> [89] </ref> provided an approximation algorithm for finding an elimination ordering for sparse Gaussian elimination to simultaneously minimize the fill-in, the total operation count and the elimination height.
Reference: [90] <author> P. Klein, and R. Ravi, </author> <title> "When cycles collapse: A general approximation technique for con-strained two-connectivity problems," </title> <booktitle> Proceedings, the third Integer Programming and Combinatorial Optimization Conference (1993), </booktitle> <pages> pp. 39-56. </pages>
Reference-contexts: Using our technique, we can also approximately solve for the first time a two-connected version of the generalized Steiner network problem and a two-connected version of the non-fixed point-to-point connection problem. The results in this chapter were obtained jointly with Philip Klein, and appeared in <ref> [90] </ref>. 3.1 Introduction: The Framework On designing a network The following scenario was proposed in [2]. You are in the job of providing communication links to customers. <p> We list below several specific open issues that arose in the course of our work. * While the result on finding bridge-connected Steiner subgraphs in 2 has been generalized and studied extensively <ref> [52, 61, 90, 154] </ref>, the result on the biconnected case in this chapter is the only one known to date. In recent work with D.
Reference: [91] <author> P. N. Klein, and R. Ravi, </author> <title> "A nearly best-possible approximation for node-weighted Steiner trees," </title> <booktitle> Proceedings, the third Integer Programming and Combinatorial Optimization Conference (1993), </booktitle> <pages> pp. 323-332. </pages>
Reference-contexts: Nearly best-possible approximation algorithms have performance guarantees that are within a constant factor of what has been shown to be best-possible <ref> [25, 91] </ref> unless P = N P . Such approximations are especially interesting for problems for which what is known to be best-possible in terms of approximation factors is a quantity larger than a constant, like the set-cover problem. <p> Its performance guarantee is within a constant factor of the best possible unless ~ P N P . 1 We generalize our algorithm to handle other node-weighted network-design problems. The results in this chapter were obtained jointly with Philip Klein, and appeared in <ref> [91] </ref>. 4.1 Problem Definition The Steiner tree problem in networks that we introduced in Section 1.1 is a classic hard problem in combinatorial optimization. Much research has been devoted to heuristics for its solution [33, 68, 112, 134, 135, 163].
Reference: [92] <author> D. J. Kleitman and D. B. West," </author> <title> Spanning trees with many leaves," </title> <journal> SIAM J. Disc. Math. </journal> <volume> Vol. 4, No. 1, </volume> <month> (February </month> <year> 1991), </year> <pages> pp. 99-106. </pages>
Reference-contexts: Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [67, 92, 124, 145] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves. <p> The best-known lower bound for the number of leaves achievable in a spanning tree of a n-node graph with minimum degree k is (1 b ln k=k)n where b is any constant exceeding 2.5 and k is sufficiently large <ref> [92] </ref>. The best lower bounds for the cases k = 3 and 4 are n=4 and 2n=5 respectively [92]. There has also been work on polynomial-time solutions to the problem of determining if a given graph has a spanning tree with at least k leaves for fixed k. <p> of leaves achievable in a spanning tree of a n-node graph with minimum degree k is (1 b ln k=k)n where b is any constant exceeding 2.5 and k is sufficiently large <ref> [92] </ref>. The best lower bounds for the cases k = 3 and 4 are n=4 and 2n=5 respectively [92]. There has also been work on polynomial-time solutions to the problem of determining if a given graph has a spanning tree with at least k leaves for fixed k. The first such algorithm was due to Fellows and Langston [42].
Reference: [93] <author> P. Korhonen, </author> <title> "An algorithm for transforming a spanning tree into a Steiner tree," </title> <booktitle> Proc. 9th Int. Math. Progr. Symp. (Budapest 1976), </booktitle> <pages> pp. 349-357. </pages>
Reference: [94] <author> G. Kortsarz, and D. Peleg, </author> <title> "Approximation algorithms for minimum time broadcast," </title> <address> manuscript (March 1992). </address>
Reference-contexts: Weak approximations are those with performance ratios nearly as bad as what is trivially achievable by using any feasible solution. A large number of problems are known to have only such approximations <ref> [16, 18, 94, 95, 132] </ref>, and are good candidates for proving strong non-approximability. Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154].
Reference: [95] <author> G. Kortsarz, and D. Peleg, </author> <title> "On choosing a dense subgraph," </title> <booktitle> to appear in Proc., 34th Annual IEEE Symp. on the Foundations of Computer Science (1993). </booktitle>
Reference-contexts: Weak approximations are those with performance ratios nearly as bad as what is trivially achievable by using any feasible solution. A large number of problems are known to have only such approximations <ref> [16, 18, 94, 95, 132] </ref>, and are good candidates for proving strong non-approximability. Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154].
Reference: [96] <author> L. Kou, G. Markowsky and L. Berman, </author> <title> "A fast algorithm for Steiner trees," </title> <journal> Acta Informatica, </journal> <volume> vol. 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: Indeed, while constant-factor approximations are known for the standard problem <ref> [96, 125, 148, 164] </ref> and even some of its generalizations [2, 60], the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P [14, 110]. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem.
Reference: [97] <author> J. Krarup, </author> <title> "The generalized Steiner problem," </title> <note> unpublished note (1978). </note>
Reference-contexts: The spanning tree [98, 127] specification is a special case of a Steiner tree in which all the nodes in the graph are specified as terminals. Thus a spanning tree is a subgraph which connects all the nodes. A generalized Steiner forest <ref> [97, 2] </ref> generalizes the notion of a Steiner tree. Given a set of site-pairs of nodes, a generalized Steiner forest is a network in which there is a path between every site-pair.
Reference: [98] <author> J. B. Kruskal, </author> <title> "On the shortest spanning subtree of a graph and the traveling salesman problem", </title> <journal> Proc. American Mathematical Society, </journal> <volume> 7(1), </volume> <pages> pp. 48-50, </pages> <year> 1956. </year>
Reference-contexts: In this thesis, we address many problems formulated in this way. 1 1.3 Connectivity specifications There are several natural connectivity specifications that have been identified. We first survey specifications that require one-connected or acyclic networks. The spanning tree <ref> [98, 127] </ref> specification is a special case of a Steiner tree in which all the nodes in the graph are specified as terminals. Thus a spanning tree is a subgraph which connects all the nodes. A generalized Steiner forest [97, 2] generalizes the notion of a Steiner tree. <p> the problem of minimum-degree networks of various forms: spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees <ref> [4, 98, 127] </ref>, TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123]. <p> The algorithm for an approximate b-MST Input: An undirected graph with edge-costs satisfying the triangle inequality and a degree bound b 3. Output: A spanning tree in which the maximum degree of any node is b. 1 Find an MST of the given graph <ref> [4, 98, 127] </ref>. Root the spanning tree at any node r of degree at least two. 2 Partition the edges of the tree into "claws", namely, sets of edges going from every internal node to its children in the tree.
Reference: [99] <author> E. L. Lawler, </author> <title> "Combinatorial Optimization: Networks and Matroids," </title> <publisher> Holt, Rinehart and Winston, </publisher> <address> New York (1976). </address>
Reference-contexts: In subsequent work [50], they improved their previous results and provided another polynomial time algorithm to approximate the minimum-degree spanning tree to within one of the optimal. Clearly no better approximation algorithms are possible for this problem. In distantly related work on this problem, Lawler <ref> [99] </ref> showed that matroid methods sufficed to solve the following variant of the minimum-degree spanning tree problem in polynomial time: given a graph G and an independent set I of nodes of G, find a spanning tree that minimizes the maximum degree of any node in I .
Reference: [100] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D. Shmoys (eds.), </author> <title> The Traveling Salesman Problem, </title> <publisher> Wiley, </publisher> <address> Chichester, </address> <year> (1985). </year>
Reference-contexts: networks of various forms: spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs <ref> [48, 100] </ref>, Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123].
Reference: [101] <author> C.- L. Li, S. T. McCormick, and D. Simchi-Levi, </author> <title> "The point-to-point delivery and connection problems: Complexity and algorithms," </title> <journal> Disc. Appl. Math., </journal> <volume> 36 (1992), </volume> <pages> pp. 267-292. </pages>
Reference-contexts: Any network satisfying these specifications must contain a path from every terminal to the chosen terminal and thus connects all the terminals. A generalized Steiner forest is sometimes referred to a fixed point-to-point interconnection network <ref> [101] </ref>. An interesting generalization, a non-fixed point-to-point interconnection network [101] is formulated as follows: given an equal number of producer and consumer nodes, find a subgraph in which every connected component has the same number of producer and consumer nodes. <p> Any network satisfying these specifications must contain a path from every terminal to the chosen terminal and thus connects all the terminals. A generalized Steiner forest is sometimes referred to a fixed point-to-point interconnection network <ref> [101] </ref>. An interesting generalization, a non-fixed point-to-point interconnection network [101] is formulated as follows: given an equal number of producer and consumer nodes, find a subgraph in which every connected component has the same number of producer and consumer nodes.
Reference: [102] <author> S. Lin and B. W. Kernighan, </author> <title> "An effective heuristic algorithm for the Traveling-Salesman Problem," </title> <journal> Oper. Res. </journal> <volume> 21 (1973), </volume> <pages> pp. 498-516. </pages>
Reference-contexts: There have been many practically successful applications of this heuristic to many important hard problems. Some notable examples are its applications to the graph partitioning [84, 43] and the Traveling Salesperson problems <ref> [102] </ref>. More recently, there has been some work on complexity issues related to this method [80, 120]. <p> Chapter 19 of [121] surveys a few applications of this technique. Some notable examples are its applications to the graph partitioning [84] and the Traveling Salesperson problems <ref> [102] </ref>. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in [80, 120].
Reference: [103] <author> F. T. Leighton and S. Rao, </author> <title> "An approximate max-flow min-cut theorem for uniform multi-commodity flow problems with application to approximation algorithms," </title> <booktitle> Proceedings of the 29th Annual IEEE Conference on Foundations of Computer Science (1988), </booktitle> <pages> pp. 422-431. 143 </pages>
Reference-contexts: Also P r j=1 Cost j is exactly the cost of the spider decomposition, which is at most OPT. Substituting in the above equation and simplifying yields h i OP T We now use the above lemma in conjunction with an analysis technique due to Leighton and Rao <ref> [103] </ref> to complete the proof of the performance guarantee. Substituting Equation (4.3) into (4.2) and using the inequality h i 2 (h i 1), we get i i1 (1 2 OP T If the total number of iterations of the algorithm is p, then p = 1. <p> We prove Lemma 6.5.3 in the remainder of this section. Proof of Lemma 6.5.3 We prove an averaging lemma and use this in conjunction with a potential function argument due to Leighton and Rao <ref> [103] </ref> to prove Lemma 6.5.3. First we prove a simple lemma bounding the number of nodes deleted from G 0 in each iteration. Fix an iteration and let q denote the number of active components at the beginning of the iteration. <p> Then by Claim 6.5.7, we have r j 12OP T b 5C j j1 (6.3) We now use an analysis technique due to Leighton and Rao <ref> [103] </ref> to complete the proof as in Chapter 4.
Reference: [104] <author> J. K. Lenstra, D. B. Shmoys, and E. Tardos, </author> <title> "Approximation algorithms for scheduling unre-lated parallel machines," Mathematical Programming A, </title> <booktitle> 46 (1990), </booktitle> <pages> pp. 259-271. </pages>
Reference-contexts: In the case of weighted spanning trees, let B fl denote the minimum weighted-degree of a spanning tree for the graph. At each iteration we form the same auxiliary graph as before. Then we draw 88 an analogy with a scheduling problem considered by Lenstra, Shmoys and Tardos <ref> [104] </ref> as follows. The cluster nodes are analogous to "jobs" while the nodes of V are analogous to "machines". The cost of an inter-cluster edge between a cluster C and a node v is analogous to the processing time of job C on machine v.
Reference: [105] <author> H. R. Lewis and C. H. Papadimitriou, </author> <title> Elements of the Theory of Computation, </title> <publisher> Prentice-Hall Inc. </publisher> <year> (1981). </year>
Reference: [106] <author> J.-H. Lin and J. S. Vitter, </author> <title> "*-approximations with minimum packing constraint violation," </title> <booktitle> Proc., 24th Annual ACM STOC (1992), </booktitle> <pages> pp. 771-782. </pages>
Reference-contexts: He showed that even finding near-optimal solutions is NP-hard if we are required to conform to the budget requirement and approximate only the sum of path-lengths. Lin and Vitter <ref> [106] </ref> provided approximations for the s-median problem where s median nodes must be chosen so as to minimize the sum of the distances from each vertex to its nearest median.
Reference: [107] <author> L. Lovasz,, </author> <title> "On the ratio of optimal integral and fractional covers," </title> <journal> Disc. Math., </journal> <volume> 13, </volume> <pages> pp. </pages> <month> 383-390 </month> <year> (1975). </year>
Reference-contexts: We elaborate on these techniques below. 1.9 The Primal-Dual method This technique uses the framework of linear programming to derive approximate solutions to NP-hard problems. This technique has been well-known since its application to approximate the set-cover problem <ref> [25, 79, 107] </ref>. There has recently been a lot of work in applying this technique to approximation algorithms [1, 2, 3, 9, 52, 55, 60, 61, 88, 103, 90, 154]. There are two distinct ways in which this method can be applied to approximation algorithms. <p> Then B P biconnects T as well. The proof of the above proposition is immediate from the observation that a chord of a circuit in a biconnected graph can be removed without violating biconnectivity (See, for example, <ref> [107] </ref>, Problem 6.35). To use this observation, we first identify a segment S of the cycle C whose endpoints lie in a simple circuit in the graph B [ T S.
Reference: [108] <author> L. Lovasz, </author> <title> Combinatorial Problems and Exercises, </title> <address> New York: </address> <publisher> North Holland, </publisher> <year> (1979). </year>
Reference: [109] <author> L. Lovasz, and M. D. Plummer, </author> <title> "Matching Theory," </title> <publisher> Akade miai Kiado, </publisher> <address> Budapest (1986). </address>
Reference-contexts: This problem is referred to as the f -factor problem <ref> [109] </ref>, and is known to be polynomially solvable [38, 109]. The following variant of this problem is also known to be polynomially solvable using matching techniques [109]. Denote the degree of a node v in a subgraph H by deg H (v). Fact 6.3.1 [109] (b-bounded even DCS problem) The following <p> This problem is referred to as the f -factor problem [109], and is known to be polynomially solvable <ref> [38, 109] </ref>. The following variant of this problem is also known to be polynomially solvable using matching techniques [109]. Denote the degree of a node v in a subgraph H by deg H (v). <p> This problem is referred to as the f -factor problem <ref> [109] </ref>, and is known to be polynomially solvable [38, 109]. The following variant of this problem is also known to be polynomially solvable using matching techniques [109]. Denote the degree of a node v in a subgraph H by deg H (v). Fact 6.3.1 [109] (b-bounded even DCS problem) The following problem has a polynomial-time solution: Given an undirected graph G = (V; E) such that V = S [ T and S " T = ;, <p> to as the f -factor problem <ref> [109] </ref>, and is known to be polynomially solvable [38, 109]. The following variant of this problem is also known to be polynomially solvable using matching techniques [109]. Denote the degree of a node v in a subgraph H by deg H (v). Fact 6.3.1 [109] (b-bounded even DCS problem) The following problem has a polynomial-time solution: Given an undirected graph G = (V; E) such that V = S [ T and S " T = ;, and an integer b 2, find a subgraph H (if one exists) of G of minimum cost such <p> The key observation is that we can solve in polynomial time a more general degree constrained minimum-cost subgraph problem than that described in Fact 6.3.1. In this general version of the f -factor problem <ref> [109] </ref>, we are given upper and lower bounds on the value of a degree of each node in the network and required to find a subgraph obeying these degree restrictions and has minimum possible cost under these restrictions. <p> Using the optimal solution to the d-constrained problem, we can derive a solution to this problem that we set up during this iteration of cost at most the optimal. Since we can solve this more general problem in polynomial-time as well <ref> [38, 109, 138] </ref>, we can obtain a solution of cost at most the optimal. The rest of the performance guarantee is the same as before.
Reference: [110] <author> C. Lund and M. Yannakakis, </author> <title> "On the Hardness of Approximating Minimization Problems," </title> <booktitle> Proc., 25th Annual ACM Symp. on Theory of Computing, </booktitle> <year> (1993), </year> <pages> pp. 286-293. </pages>
Reference-contexts: Early results on non-approximability [53, 161] were sporadic and used very specialized techniques. The recent connection drawn between results from the study of interactive proof systems from communication complexity theory <ref> [5, 6, 41, 110] </ref> and proving non-approximability results has provided a unified way to prove such results. Another tool that has been useful in applying non-approximability results is a strengthening of the notion of an NP-hardness reduction called an L-reduction [122]. <p> Even stronger non-approximability results rule out approximations with multiplicative factors of a constant or better than a logarithm of the input size. Lund and Yannakakis <ref> [110] </ref> recently proved such a hardness result for the set-cover problem in which given a collection of sets over a ground set, the objective is to find a minimum-size subcollection that contains all the elements of the ground set. <p> The strongest non-approximability results are those that show that performance factors nearly as bad as the trivial ones cannot be achieved in polynomial time unless P = N P . Examples are the maximum independent set problem and the graph coloring problem <ref> [41, 110, 13] </ref>, for which no polynomial-time approximation algorithms can have performance ratios better than n ff for some fixed ff &gt; 0 unless P = N P . 5 Just like the non-approximability results, approximation algorithms that have been designed also vary from weak, reasonable, good to nearly best-possible. <p> Indeed, while constant-factor approximations are known for the standard problem [96, 125, 148, 164] and even some of its generalizations [2, 60], the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P <ref> [14, 110] </ref>. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem. The performance guarantee is logarithmic. <p> The reduction is illustrated in Figure 4.1. Thus an approximation algorithm for minimum-cost Steiner tree could be used to achieve the same approximation for set-cover. It has recently been proved <ref> [110] </ref> that no polynomial-time approximation algorithm for set-cover achieves an approximation factor smaller than 1 4 ln jBj (unless Deterministic Time n polylogn contains NP). By Berman's reduction, the same holds for the node-weighted Steiner tree problem.
Reference: [111] <author> Hsueh-I Lu, and R. Ravi, </author> <title> "The Power of Local Optimization: Approximation Algorithms for Maximum-Leaf Spanning Tree," </title> <booktitle> in Proceedings, Thirtieth Annual Allerton Conference on Communication, Control and Computing (October 1992), </booktitle> <pages> pp. 533-542. </pages>
Reference-contexts: Our algorithms output spanning trees with as many leaves as at least a constant fraction of the maximum. The results in this chapter were obtained jointly with Hsueh-I Lu, and appeared in <ref> [111] </ref>. 106 Our algorithms perform local changes that increase the number of leaves in the resulting spanning tree. For the problem at hand, there is a natural notion of such a local change, namely, swapping a tree edge for a non-tree edge.
Reference: [112] <author> K. Mehlhorn, </author> <title> "A faster approximation algorithm for the Steiner problem in graphs," </title> <journal> Information Processing Letters, </journal> <volume> vol. 27(3) (1988), </volume> <pages> pp. 125-128. </pages>
Reference-contexts: The results in this chapter were obtained jointly with Philip Klein, and appeared in [91]. 4.1 Problem Definition The Steiner tree problem in networks that we introduced in Section 1.1 is a classic hard problem in combinatorial optimization. Much research has been devoted to heuristics for its solution <ref> [33, 68, 112, 134, 135, 163] </ref>. Despite a slew of new approximation algorithms for this problem and some of its variants, no approximation algorithm has been given for perhaps the most natural variant: the node-weighted Steiner tree problem, in which costs can be assigned to nodes as well as edges.
Reference: [113] <author> Z. A. Melzak, </author> <title> "On the problem of Steiner," </title> <journal> Canad. Math. Bull., </journal> <volume> vol. 4 (1961), </volume> <pages> pp. 143-148. </pages>
Reference: [114] <author> M. Minoux, </author> <title> "Network synthesis and optimum network design problems: models, solution methods and applications," </title> <journal> Networks, </journal> <volume> vol. 19 (1989), </volume> <pages> pp. 313-360. </pages>
Reference: [115] <author> J. S. B. Mitchell, C. Piatko, and E. M. Arkin, </author> <title> "Computing a shortest k-link path in a polygon", </title> <booktitle> Proc., 33rd Annual IEEE FOCS (1992), </booktitle> <pages> pp. 573-582. </pages>
Reference-contexts: Shmoys and Tardos [140] studied the problem of scheduling unrelated parallel machines with costs associated with processing a job on a given machine. Given a budget on the cost of the schedule, they presented an approximation algorithm for minimizing the makespan of the schedule. Mitchell, Piatko and Arkin <ref> [115] </ref> studied bicriteria optimization problems arising in computational geometry. 81 6.3 The Edge-weighted Case In this section, we sketch a proof of the results on edge-weighted degree-bounded networks. Background In this section, we describe some background material on a degree constrained subgraph (DCS) problem.
Reference: [116] <author> C. L. Monma, and C. W. Ko, </author> <title> "Methods for designing survivable communication networks,"NATO Advanced Research Workshop, </title> <address> Denmark, </address> <year> (1989). </year>
Reference-contexts: This can be achieved by using an underlying two-edge-connected network. 2 such networks has received considerable attention in the past <ref> [66, 116, 117, 144] </ref>. The higher con-nectivity requirement may be an edge-connectivity requirement or a node-connectivity requirement. In this thesis we address both these generalizations. <p> When the cost function c obeys the triangle inequality, then Fredrickson and Ja'Ja' [47] present an adaptation of Christofides' heuristic to solve the minimum-cost biconnectivity augmentation problem with a performance factor of 3 2 . There has been considerable previous work on network survivability <ref> [59, 66, 116, 117, 144] </ref> that addresses constructing minimum-cost k-connected subgraphs under such cost functions. However, our interest is in the general case when the cost function does not satisfy the triangle inequality.
Reference: [117] <author> C. L. Monma, B. S. Munson, and W. R. Pulleyblank, </author> <title> "Minimum-weight two-connected spanning networks," </title> <journal> Math. Programming, </journal> <volume> 46 (1990), </volume> <pages> pp. 153-171. </pages>
Reference-contexts: This can be achieved by using an underlying two-edge-connected network. 2 such networks has received considerable attention in the past <ref> [66, 116, 117, 144] </ref>. The higher con-nectivity requirement may be an edge-connectivity requirement or a node-connectivity requirement. In this thesis we address both these generalizations. <p> When the cost function c obeys the triangle inequality, then Fredrickson and Ja'Ja' [47] present an adaptation of Christofides' heuristic to solve the minimum-cost biconnectivity augmentation problem with a performance factor of 3 2 . There has been considerable previous work on network survivability <ref> [59, 66, 116, 117, 144] </ref> that addresses constructing minimum-cost k-connected subgraphs under such cost functions. However, our interest is in the general case when the cost function does not satisfy the triangle inequality.
Reference: [118] <author> C. L. Monma, and D. F. Shallcross, </author> <title> "Methods for designing communication networks with certain two-connectivity survivability constraints", </title> <journal> Operations Research, </journal> <volume> 37, </volume> <pages> pp. 531-541, </pages> <year> (1989). </year> <month> 144 </month>
Reference-contexts: However, our interest is in the general case when the cost function does not satisfy the triangle inequality. There has also been considerable work on characterizations of integer polyhedra arising from connectivity constraints [65], and construction of minimum-cost two-connected survivable networks <ref> [59, 118] </ref>. As mentioned in the previous section, Agrawal, Klein and Ravi [2] introduced a primal-dual method for approximating the minimum-cost generalized Steiner network.
Reference: [119] <author> G. L. Nemhauser, and L. A. Wolsey, </author> <title> Integer and Combinatorial Optimization, Wiley In--terscience series in Disc. </title> <journal> Math. </journal> <note> and Optimization (1988). </note>
Reference-contexts: While solving the linear program does not give us a solution network with this degree, just knowing the value can be useful, namely in a branch-and-bound search for an optimal solution <ref> [119] </ref>. The algorithm and its analysis We now describe the algorithm for providing an approximate solution to (IP) and prove Theorem 5.3.3.
Reference: [120] <author> C. H. Papadimitriou, A. A. Schaffer, and M. Yannakakis, </author> <title> "On the complexity of local search (Extended Abstract)," </title> <booktitle> in Proceedings of the twenty-second annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pp. </pages> <month> 438-445 </month> <year> (1990). </year>
Reference-contexts: There have been many practically successful applications of this heuristic to many important hard problems. Some notable examples are its applications to the graph partitioning [84, 43] and the Traveling Salesperson problems [102]. More recently, there has been some work on complexity issues related to this method <ref> [80, 120] </ref>. The underlying idea in this method is simple: start with an arbitrary solution, apply local 9 changes that improve the quality of the solution until a locally-optimal solution is reached, and output this solution. <p> Some notable examples are its applications to the graph partitioning [84] and the Traveling Salesperson problems [102]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in <ref> [80, 120] </ref>. In this work, we are interested in the application of local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum.
Reference: [121] <author> C. H. Papadimitriou, and K. Steiglitz, </author> <title> "Combinatorial Optimization," </title> <publisher> Prentice-Hall Inc. </publisher> <year> (1982). </year>
Reference-contexts: This notion of applying local-improvement heuristics to hard optimization problems was around [30] long before the invention of NP-completeness [83]. It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization <ref> [121] </ref>. As we mentioned in Section 1.10, a recent breakthrough in this area was the work of Furer and Raghavachari [50], who applied this technique to the minimum-degree spanning tree problem. They showed a version of a local optimization algorithm runs in polynomial time to produce near-optimal solutions. <p> In the subsequent sections, we prove Theorems 7.1.1 and 7.1.2. We close this chapter with some remarks on related problems. 107 7.2 Related Work The technique of local optimization has been applied to provide heuristic solutions for a variety of hard problems in combinatorial optimization. Chapter 19 of <ref> [121] </ref> surveys a few applications of this technique. Some notable examples are its applications to the graph partitioning [84] and the Traveling Salesperson problems [102].
Reference: [122] <author> C. H. Papadimitriou, and M. Yannakakis, </author> <title> "The complexity of restricted minimum spanning tree problems," </title> <booktitle> Lecture Notes in Computer Science 71 (1979), </booktitle> <pages> pp. 460-470. </pages>
Reference-contexts: Another tool that has been useful in applying non-approximability results is a strengthening of the notion of an NP-hardness reduction called an L-reduction <ref> [122] </ref>. An L-reduction reduces an NP-hard problem to another with extra care so that any approximation algorithm for the first can be used to derive one for the second with performance guarantee at most a small constant factor more than that for the first problem. <p> This proves Lemma 7.7.2. 2 7.8 Closing Remarks We believe that the performance ratio of 2-LOTs is better than what we prove and conjecture the following. Conjecture 7.8.1 The performance guarantee of 2-LOTs is 2.5. Papadimitriou and Yannakakis <ref> [122] </ref> identified a class of NP-hard optimization problems in-terreducible to one another using approximation-preserving reductions and thus took a step towards classifying NP-complete problems with respect to hardness of approximating them. They called this class MAX SNP.
Reference: [123] <author> R. G. Parker, and R. L. Rardin, </author> <title> "Guaranteed performance heuristic for the bottleneck traveling salesman problem," </title> <journal> Oper. Res. Lett. </journal> <volume> 6, </volume> <pages> pp. 269-272, </pages> <year> (1982). </year>
Reference-contexts: Problems in which the objective is to keep the bottleneck cost low are termed bottleneck problems and these have also received considerable attention <ref> [20, 72, 123] </ref>. In many applications that arise in real-world situations, the network to be built is required to minimize more than one of these cost measures simultaneously. Recent papers have identified many problems [8, 85, 89, 161] wherein multiple objectives are specified in the statement of the problem. <p> Bottleneck problems have been investigated in <ref> [20, 72, 123] </ref>. Multi-objective approximations While there has been much work on finding minimum-cost networks for each of the cost measures that we simultaneously minimize, there has been relatively little work on approximations for multi-objective network-design.
Reference: [124] <author> C. Payan, M. Tchuente, and N. H. Xuong, </author> <title> "Arbres avec un nombres maximum de sommets pendants, </title> <journal> Discrete Math., </journal> <volume> 49 (1984), </volume> <pages> pp. 267-273. </pages>
Reference-contexts: Given a simple, undirected graph G = (V; E), suppose we wish to find a spanning tree of G with the maximum number of leaves. This problem finds applications in communication networks, circuit layouts and in other graph-theoretic problems [145]. An interesting application is mentioned in <ref> [124] </ref>: In [32], E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion. <p> Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [67, 92, 124, 145] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves.
Reference: [125] <author> J. Plesnik, </author> <title> "A bound for the Steiner tree problem in graphs," </title> <journal> Math. Slovaca, </journal> <volume> vol. 31 (1981), </volume> <pages> pp. 155-163. </pages>
Reference-contexts: Indeed, while constant-factor approximations are known for the standard problem <ref> [96, 125, 148, 164] </ref> and even some of its generalizations [2, 60], the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P [14, 110]. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem.
Reference: [126] <author> S. Plotkin, and E. Tardos, </author> <title> "Improved bounds on the max-flow min-cut ratio for multicommod-ity flows," </title> <booktitle> Proc., 25th Annual ACM Symp. on Theory of Computing, </booktitle> <year> (1993), </year> <pages> pp. 691-697. </pages>
Reference: [127] <author> R.C. Prim, </author> <title> "Shortest connection networks and some generalizations", </title> <journal> Bell System Tech Journal, </journal> <volume> 36(6), </volume> <pages> pp. 1389-1401, </pages> <year> 1957. </year>
Reference-contexts: In this thesis, we address many problems formulated in this way. 1 1.3 Connectivity specifications There are several natural connectivity specifications that have been identified. We first survey specifications that require one-connected or acyclic networks. The spanning tree <ref> [98, 127] </ref> specification is a special case of a Steiner tree in which all the nodes in the graph are specified as terminals. Thus a spanning tree is a subgraph which connects all the nodes. A generalized Steiner forest [97, 2] generalizes the notion of a Steiner tree. <p> the problem of minimum-degree networks of various forms: spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees <ref> [4, 98, 127] </ref>, TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123]. <p> The algorithm for an approximate b-MST Input: An undirected graph with edge-costs satisfying the triangle inequality and a degree bound b 3. Output: A spanning tree in which the maximum degree of any node is b. 1 Find an MST of the given graph <ref> [4, 98, 127] </ref>. Root the spanning tree at any node r of degree at least two. 2 Partition the edges of the tree into "claws", namely, sets of edges going from every internal node to its children in the tree.
Reference: [128] <author> R. Ravi, A. Agrawal, and P. Klein, </author> <title> "Ordering problems approximated: single-processor scheduling and Interval graph computation," </title> <booktitle> in Proceedings of the 18th International Colloquium on Automata, Languages and Processing '91 (1991), </booktitle> <volume> LNCS 510, </volume> <pages> pp. 751-762. </pages>
Reference: [129] <author> R. Ravi, M. V. Marathe, S. S. Ravi, D. J. Rosenkrantz, and H.B. Hunt III, </author> <title> "Many birds with one stone: Multi-objective approximation algorithms," </title> <booktitle> Proc., 25th Annual ACM Symposium on the Theory of Computing (1993), </booktitle> <pages> pp. 438-447. </pages>
Reference-contexts: The results in this chapter were obtained jointly with Madhav V. Marathe, S. S. Ravi, Daniel J. Rosenkrantz, and Harry B. Hunt III, and appeared in <ref> [129] </ref>. 75 Degree-bounded minimum-cost network design We call the following the b-MST problem: Given an undirected edge-weighted graph and an integer b 2, find a spanning tree in which the maximum degree of any node is at most b and the total cost is minimum.
Reference: [130] <author> R. Ravi, and P. N. Klein, </author> <title> "When cycles collapse: A general approximation technique for constrained two-connectivity problems," </title> <type> Technical Report TR-CS-92-30, </type> <institution> Brown University, </institution> <month> (June </month> <year> 1992). </year>
Reference: [131] <author> R. Ravi, B. Raghavachari, and P. N. Klein, </author> <title> "Approximation through local optimality: Designing networks with small degree," </title> <booktitle> Proceedings, Twelfth Annual Conference on Foundations 145 of Software Technology and Theoretical Computer Science, </booktitle> <month> December </month> <year> 1992, </year> <pages> LNCS 652, pp. 279-290. </pages>
Reference-contexts: Minimizing this notion of cost corresponds to the minimum-degree network-design problem, which has also been well studied <ref> [3, 49, 50, 131] </ref>. A cost measure that captures the notion of price incurred in using a network is the maximum cost of any edge in the network, also termed the the bottleneck cost of the network. <p> However, the result described for this problem in this chapter may be used to derive approximation factors even better than logarithmic at the expense of higher running times. The results in this chapter were obtained jointly with Balaji Raghavachari and Philip Klein, and appeared in <ref> [131] </ref>. In Section 5.2, we start by reviewing previously known results on special cases of the problem we consider in this chapter. In Section 5.3, we describe our results on general minimum-degree one-connected networks. <p> A series of recent results have addressed the problem of minimum-degree networks of various forms: spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks <ref> [131] </ref>. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154].
Reference: [132] <author> R. Ravi, R. Sundaram, M. V. Marathe, D. J. Rosenkrantz, and S. S. Ravi, </author> <title> "Spanning trees short or small," </title> <note> (manuscript) July 1993. </note>
Reference-contexts: Weak approximations are those with performance ratios nearly as bad as what is trivially achievable by using any feasible solution. A large number of problems are known to have only such approximations <ref> [16, 18, 94, 95, 132] </ref>, and are good candidates for proving strong non-approximability. Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154].
Reference: [133] <author> R. Ravi and D. Williamson, </author> <title> "Approximation algorithms for minimum-cost k-vertex-connected subgraph," </title> <type> (manuscript), </type> <note> July 1993; a version appears in D. Williamson's thesis [155]. </note>
Reference-contexts: In recent work with D. Williamson <ref> [133, 155] </ref>, we have applied the primal-dual method to derive a 2H (k)-approximation algorithm for the minimum-cost k-vertex-connected subgraph problem where H (k) is the k th harmonic number.
Reference: [134] <author> V. J. Rayward-Smith, </author> <title> "The computation of nearly minimal Steiner trees in graphs," </title> <journal> Internat, J. Math. Ed. Sci. Tech., </journal> <volume> 14 (1), </volume> <pages> pp. </pages> <month> 15-23 </month> <year> (1983). </year>
Reference-contexts: The results in this chapter were obtained jointly with Philip Klein, and appeared in [91]. 4.1 Problem Definition The Steiner tree problem in networks that we introduced in Section 1.1 is a classic hard problem in combinatorial optimization. Much research has been devoted to heuristics for its solution <ref> [33, 68, 112, 134, 135, 163] </ref>. Despite a slew of new approximation algorithms for this problem and some of its variants, no approximation algorithm has been given for perhaps the most natural variant: the node-weighted Steiner tree problem, in which costs can be assigned to nodes as well as edges. <p> The algorithm we propose is only a slight variant of a heuristic proposed by Rayward-Smith and Clare in 1986 <ref> [74, 135, 134] </ref> for the standard edge-weighted Steiner tree problem. The key to our analysis is a decomposition lemma for trees; this lemma may be useful in other contexts as well.
Reference: [135] <author> V. J. Rayward-Smith and A. Clare, </author> <title> "On finding Steiner vertices", </title> <journal> Networks, </journal> <volume> 16, </volume> <pages> pp. </pages> <month> 283-294 </month> <year> (1986). </year>
Reference-contexts: The results in this chapter were obtained jointly with Philip Klein, and appeared in [91]. 4.1 Problem Definition The Steiner tree problem in networks that we introduced in Section 1.1 is a classic hard problem in combinatorial optimization. Much research has been devoted to heuristics for its solution <ref> [33, 68, 112, 134, 135, 163] </ref>. Despite a slew of new approximation algorithms for this problem and some of its variants, no approximation algorithm has been given for perhaps the most natural variant: the node-weighted Steiner tree problem, in which costs can be assigned to nodes as well as edges. <p> The algorithm we propose is only a slight variant of a heuristic proposed by Rayward-Smith and Clare in 1986 <ref> [74, 135, 134] </ref> for the standard edge-weighted Steiner tree problem. The key to our analysis is a decomposition lemma for trees; this lemma may be useful in other contexts as well.
Reference: [136] <author> G. Reich and P. Widmayer, </author> <title> "Beyond Steiner's problem: A VLSI oriented generalization," </title> <booktitle> in Proc., 15th International Workshop on Graph-Theoretic Concepts in Computer Science, </booktitle> <pages> pp. 196-210, </pages> <address> Castle Rolduc, </address> <year> (1989). </year>
Reference-contexts: The goal is to find a minimum-cost arborescence rooted at the distinguished node and spanning the terminals. A transformation of the node-Steiner problem to the directed version was proposed by A. Segev [139]. The group Steiner problem, proposed by Reich and Widmayer <ref> [136] </ref>, arises in VLSI design. In this problem, we are given an undirected edge-weighted graph and a collection of node-subsets, called groups. The goal is to find a minimum-cost connected subgraph containing at least one node from each group.
Reference: [137] <author> D. J. Rosenkrantz, R. E. Stearns, and P. M. Lewis, </author> <title> "An analysis of several heuristics for the traveling salesman problem," </title> <journal> SIAM Journal on Computing, </journal> <volume> vol. 6 (1977), </volume> <pages> pp. 563-581. </pages>
Reference-contexts: times that of a minimum spanning tree, and the bottleneck cost is at most twice that of the minimum-bottleneck spanning tree. 79 If we insist on a Hamiltonian path (i.e., require b = 2) or a Traveling Salesperson (TSP) tour, then the simple short-cutting heuristic of Rosenkrantz, Stearns and Lewis <ref> [137] </ref> provides a TSP tour of cost at most 2 (1 1 n ) times that of a minimum spanning tree (MST) in an n-node graph. Deleting an edge from this tour gives a Hamiltonian path with the same guarantee. <p> The rest of the analysis is identical. 96 6.6 Algorithms under Triangle Inequality In this section, we introduce the short-cutting technique used in proving Theorem 6.1.9. First, we review the short-cutting method introduced in <ref> [137] </ref>. Short-cutting for TSP Rosenkrantz, Stearns and Lewis [137] introduced a simple short-cutting technique for obtaining a TSP tour of a graph with edge-costs obeying the triangle inequality. We review this method briefly. <p> The rest of the analysis is identical. 96 6.6 Algorithms under Triangle Inequality In this section, we introduce the short-cutting technique used in proving Theorem 6.1.9. First, we review the short-cutting method introduced in <ref> [137] </ref>. Short-cutting for TSP Rosenkrantz, Stearns and Lewis [137] introduced a simple short-cutting technique for obtaining a TSP tour of a graph with edge-costs obeying the triangle inequality. We review this method briefly. First note that the cost of a TSP tour is at least as much as that of a minimum spanning tree of the graph.
Reference: [138] <author> A. Schrijver, </author> <title> "Min-max results in Combinatorial Optimization," in Mathematical programming: The state of the art, </title> <editor> Eds. A. Bachem, M. Grotschel, and B. </editor> <booktitle> Korte, </booktitle> <pages> pp. 439-500, </pages> <publisher> Springer (1983). </publisher>
Reference-contexts: Using the optimal solution to the d-constrained problem, we can derive a solution to this problem that we set up during this iteration of cost at most the optimal. Since we can solve this more general problem in polynomial-time as well <ref> [38, 109, 138] </ref>, we can obtain a solution of cost at most the optimal. The rest of the performance guarantee is the same as before.
Reference: [139] <author> A. Segev, </author> <title> "The node-weighted Steiner tree problem," </title> <journal> Networks, </journal> <volume> vol. 17 (1987), </volume> <pages> pp. 1-17. </pages>
Reference-contexts: The goal is to find a minimum-cost arborescence rooted at the distinguished node and spanning the terminals. A transformation of the node-Steiner problem to the directed version was proposed by A. Segev <ref> [139] </ref>. The group Steiner problem, proposed by Reich and Widmayer [136], arises in VLSI design. In this problem, we are given an undirected edge-weighted graph and a collection of node-subsets, called groups. The goal is to find a minimum-cost connected subgraph containing at least one node from each group.
Reference: [140] <author> D. B. Shmoys and E. Tardos, </author> <title> "Scheduling unrelated parallel machines with costs," </title> <booktitle> Proc., 4th Annual ACM-SIAM SODA (1993), </booktitle> <pages> pp. 448-454. </pages>
Reference-contexts: Shmoys and Tardos <ref> [140] </ref> studied the problem of scheduling unrelated parallel machines with costs associated with processing a job on a given machine. Given a budget on the cost of the schedule, they presented an approximation algorithm for minimizing the makespan of the schedule. <p> This proves Theorem 6.1.5. The extension to finding minimum-cost spanning trees while keeping the weighted-degree low follows by using a generalization of the result of Lenstra, Shmoys and Tardos by Shmoys and Tardos <ref> [140] </ref>. In this generalization, Shmoys and Tardos show that if there exists a schedule of cost C and makespan T , one can obtain in polynomial time a schedule of cost at most C and makespan at most 2T .
Reference: [141] <author> M. L. Shore, L. R. Foulds, and P. B. Gibbons, </author> <title> "An algorithm for the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 12 (1982), </volume> <pages> pp. 323-333. </pages>
Reference: [142] <author> J. M. Smith, </author> <title> "An O(n log n) heuristic for Steiner minimal tree problems on the Euclidean metric," </title> <journal> Networks, </journal> <volume> vol. 11 (1981), </volume> <pages> pp. 23-39. </pages>
Reference: [143] <author> J. M. Smith, D. T. Lee, and J. S. Liebman, </author> <title> "An O(n log n) heuristic algorithm for the rectilinear Steiner minimal tree problem," </title> <journal> Eng. Optimization, </journal> <volume> vol. 4 (1980), </volume> <pages> pp. 179-192. </pages>
Reference: [144] <author> K. Steiglitz, P. Weiner, and D. J. Kleitman, </author> <title> "The design of minimum-cost survivable networks," </title> <journal> IEEE Trans, on Circuit Theory, CT-16, </journal> <volume> 4, </volume> <pages> pp. 455-460, </pages> <year> (1969). </year> <month> 146 </month>
Reference-contexts: This can be achieved by using an underlying two-edge-connected network. 2 such networks has received considerable attention in the past <ref> [66, 116, 117, 144] </ref>. The higher con-nectivity requirement may be an edge-connectivity requirement or a node-connectivity requirement. In this thesis we address both these generalizations. <p> When the cost function c obeys the triangle inequality, then Fredrickson and Ja'Ja' [47] present an adaptation of Christofides' heuristic to solve the minimum-cost biconnectivity augmentation problem with a performance factor of 3 2 . There has been considerable previous work on network survivability <ref> [59, 66, 116, 117, 144] </ref> that addresses constructing minimum-cost k-connected subgraphs under such cost functions. However, our interest is in the general case when the cost function does not satisfy the triangle inequality.
Reference: [145] <author> J. A. Storer, </author> <title> "Constructing full spanning trees for cubic graphs," </title> <journal> Inform. Process. Lett. </journal> <note> 13 (1981), pp.8-11. </note>
Reference-contexts: Given a simple, undirected graph G = (V; E), suppose we wish to find a spanning tree of G with the maximum number of leaves. This problem finds applications in communication networks, circuit layouts and in other graph-theoretic problems <ref> [145] </ref>. An interesting application is mentioned in [124]: In [32], E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion. <p> Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [67, 92, 124, 145] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves.
Reference: [146] <author> G. F. Sullivan, </author> <title> "Approximation algorithms for Steiner tree problems," </title> <type> Tech. Rep. 249, </type> <institution> Dept. of Computer Science, Yale Univ. </institution> <year> (1982). </year>
Reference: [147] <author> H. Suzuki, T. Akama and T. Nishizeki, </author> <title> "Finding Steiner forests in planar graphs," </title> <booktitle> 1st Ann. ACM-SIAM Symp. on Disc. Alg. </booktitle> <year> (1990), </year> <pages> pp. 444-453. </pages>
Reference: [148] <author> H. Takahashi and A. </author> <title> Matsuyama, " An approximate solution for the Steiner problem in graphs," </title> <journal> Math. Japonica, </journal> <volume> vol. 24 (1980), </volume> <pages> pp. 573-577. </pages>
Reference-contexts: Indeed, while constant-factor approximations are known for the standard problem <ref> [96, 125, 148, 164] </ref> and even some of its generalizations [2, 60], the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P [14, 110]. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem.
Reference: [149] <author> M. Tchuente, "Sur l'auto-stabilisation dans un reseau d'odinateurs," R. A. I. R. O. Infor-matique Theorique 15, </author> <month> (1) </month> <year> (1981), </year> <pages> pp. 47-66. </pages>
Reference-contexts: An interesting application is mentioned in [124]: In [32], E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion. A variant of this solution <ref> [149] </ref> seeks a spanning tree of a graph such that the product of the degrees of all the nodes in the tree is minimum. We can use a spanning tree with the maximum number of leaves as a heuristic solution (with no guarantees) for the latter problem.
Reference: [150] <author> A. Tanenbaum, </author> <title> Computer Networks, </title> <publisher> Prentice-Hall Inc. </publisher> <year> (1981). </year>
Reference: [151] <author> P. J. M. van Laarhoven, and E. H. L. Aarts, </author> <title> "Simulated Annealing: Theory and Practice," </title> <publisher> Kluwer Academic Publishers, Dordrecht, Holland (1987). </publisher>
Reference-contexts: There are several randomized variants of this basic technique variously termed genetic algorithms [58], tabu-search, and simulated annealing <ref> [151] </ref>. However, none of these various heuristic techniques have been known to be approximation algorithms in the sense we have described. A theoretical breakthrough in this area came with the work of Furer and Raghavachari [50].
Reference: [152] <author> V. G. Vizing, </author> <title> "On an estimate of the chromatic class of a p-graph" (in Russian), </title> <journal> Diskretny i Analiz, </journal> <volume> vol. 3 (1964), </volume> <pages> pp. 11-12. </pages>
Reference-contexts: Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154]. Good approximation algorithms have constant performance ratios [9, 22, 74, 156, 164] while best-possible approximation algorithms achieve guarantees that cannot be better unless P = N P <ref> [50, 152] </ref>. Nearly best-possible approximation algorithms have performance guarantees that are within a constant factor of what has been shown to be best-possible [25, 91] unless P = N P .
Reference: [153] <author> T. Watanabe, Y. Higashi, and A. Nakamura, </author> <title> "Graph augmentation problems for a specified set of vertices," </title> <journal> Proc. SIGAL'90, </journal> <volume> LNCS 450, </volume> <pages> pp. 378-387. </pages>
Reference-contexts: The performance guarantee of these algorithms is two if the initial subgraph is connected and three otherwise. The results of Frederickson and Ja'Ja' as well as that of Khuller and Thurimella hold for both the edge and vertex-connected versions of the problem. Watanabe, Higashi, and Nakamura <ref> [153] </ref> address a closely related augmentation problem using techniques similar to ours. In [153], Watanabe, Higashi, and Nakamura have presented approximation algorithms for the following augmentation problem: given an edge-weighted undirected graph, an initial subgraph G 0 that connects all the nodes, and a specified subset S of the nodes, find <p> The results of Frederickson and Ja'Ja' as well as that of Khuller and Thurimella hold for both the edge and vertex-connected versions of the problem. Watanabe, Higashi, and Nakamura <ref> [153] </ref> address a closely related augmentation problem using techniques similar to ours. In [153], Watanabe, Higashi, and Nakamura have presented approximation algorithms for the following augmentation problem: given an edge-weighted undirected graph, an initial subgraph G 0 that connects all the nodes, and a specified subset S of the nodes, find a minimum-cost augmentation of the initial subgraph G 0 so that each pair <p> Though their technique appears to be similar to ours, they left open the case when the initial subgraph G 0 does not span all the nodes in the graph. We obtain the same performance ratio as <ref> [153] </ref> for the biconnected problem under the weaker assumption that the initial subgraph G 0 connects only the nodes specified in S. Furthermore, even when G 0 does not connect the nodes in S, we can derive approximation algorithms with a slightly worse guarantee of five. <p> Furthermore, even when G 0 does not connect the nodes in S, we can derive approximation algorithms with a slightly worse guarantee of five. This latter problem was left open for future research in <ref> [153] </ref>. In the next chapter, we present results on finding minimum-cost two-edge-connected networks. Using these results, one can derive approximation algorithms for the two-edge-connected version of the problem we consider in this chapter.
Reference: [154] <author> D. P. Williamson, M. X. Goemans, M. Mihail, and V. Vazirani, </author> <title> "A primal-dual approximation algorithm for generalized Steiner network problems," </title> <booktitle> Proc. of the 25th Annual ACM Symp. on the Theory of Computing (1993), </booktitle> <pages> pp. 708-717. </pages>
Reference-contexts: We also extend and use this technique combined with the idea of applying it in phases in Chapter 3. There has been a surge of work subsequent to ours in extending our techniques to higher-connected network problems <ref> [52, 61, 154] </ref>. 1.10 Local Optimization Local optimization has been a well-known heuristic for hard problems even before the theory of NP-completeness was formalized [30]. There have been many practically successful applications of this heuristic to many important hard problems. <p> This follows from the observation that separation over (IP) is equivalent to solving an instance of finding the minimum-cut around any active set. The latter problem can be solved using the fact that proper functions are uncrossable and can be inferred from the results in <ref> [52, 154] </ref>. Using the Ellipsoid method [64], which provides a polynomial-time reduction of the optimization problem to the separation problem, we have that the fractional relaxation of (IP) can be solved in polynomial-time. <p> general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees [74, 156, 164], generalized Steiner trees [2] and even more general one-connected networks <ref> [52, 60, 154] </ref>. Bottleneck problems have been investigated in [20, 72, 123]. Multi-objective approximations While there has been much work on finding minimum-cost networks for each of the cost measures that we simultaneously minimize, there has been relatively little work on approximations for multi-objective network-design. <p> We list below several specific open issues that arose in the course of our work. * While the result on finding bridge-connected Steiner subgraphs in 2 has been generalized and studied extensively <ref> [52, 61, 90, 154] </ref>, the result on the biconnected case in this chapter is the only one known to date. In recent work with D. <p> It is an intriguing open problem to apply the primal-dual method to general node-survivability prob lems. * While the phased approach introduced in Chapter 3 has been taken to its limit <ref> [52, 61, 154] </ref> in the recent spate of work, it is unclear whether the performance guarantees achieved in these papers are best-possible.
Reference: [155] <author> D. P. Williamson, </author> <title> "On the design of approximation algorithms for a class of graph problems," </title> <publisher> Ph. </publisher> <address> D. </address> <note> Thesis (August 1993), </note> <institution> Department of Computer Science, MIT. </institution>
Reference-contexts: In recent work with D. Williamson <ref> [133, 155] </ref>, we have applied the primal-dual method to derive a 2H (k)-approximation algorithm for the minimum-cost k-vertex-connected subgraph problem where H (k) is the k th harmonic number.
Reference: [156] <author> P. Winter, </author> <title> "Steiner problem in networks : a survey," </title> <booktitle> Networks (1987), </booktitle> <pages> pp. 129-167. </pages>
Reference-contexts: Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154]. Good approximation algorithms have constant performance ratios <ref> [9, 22, 74, 156, 164] </ref> while best-possible approximation algorithms achieve guarantees that cannot be better unless P = N P [50, 152]. <p> Despite a slew of new approximation algorithms for this problem and some of its variants, no approximation algorithm has been given for perhaps the most natural variant: the node-weighted Steiner tree problem, in which costs can be assigned to nodes as well as edges. Indeed, Winter's survey <ref> [156] </ref> on the network Steiner problem closes with the sentence, "Further investigation of the vertex-weighted SPN [Steiner problem in networks] is needed." One reason for the dearth of results on the node-weighted variant may be that it is harder than the standard problem. <p> spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees <ref> [74, 156, 164] </ref>, generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123].
Reference: [157] <author> P. Winter, </author> <title> "Generalized Steiner problem in outerplanar graphs,", </title> <booktitle> BIT 25 (1985), </booktitle> <pages> pp. 485-496. </pages>
Reference-contexts: Hence we restrict our attention to approximating minimum-cost biconnected Steiner subgraphs (i.e., subgraphs biconnecting every pair of terminals). There has been previous work on polynomial-time algorithms for the minimum-cost two-connected Steiner subgraph problems for special classes of graphs such as outerplanar graphs <ref> [157] </ref>, series-parallel graphs [158] and Halin graphs [29]. Our main results are approximation algorithms for the case of general graphs and we state them below. Theorem 2.2.1 There is a polynomial-time approximation algorithm for the minimum-cost biconnected Steiner subgraph problem. The performance guarantee of the algorithm is five.
Reference: [158] <author> P. Winter, </author> <title> "Generalized Steiner problem in series-parallel networks," </title> <editor> J. </editor> <booktitle> Algorithms 7, </booktitle> <year> (1986), </year> <pages> pp. 549-566. </pages>
Reference-contexts: Hence we restrict our attention to approximating minimum-cost biconnected Steiner subgraphs (i.e., subgraphs biconnecting every pair of terminals). There has been previous work on polynomial-time algorithms for the minimum-cost two-connected Steiner subgraph problems for special classes of graphs such as outerplanar graphs [157], series-parallel graphs <ref> [158] </ref> and Halin graphs [29]. Our main results are approximation algorithms for the case of general graphs and we state them below. Theorem 2.2.1 There is a polynomial-time approximation algorithm for the minimum-cost biconnected Steiner subgraph problem. The performance guarantee of the algorithm is five.
Reference: [159] <author> Pawel Winter, </author> <title> "An algorithm for the Steiner problem in the Euclidean plane," </title> <journal> Networks, </journal> <volume> vol. 15 (1985), </volume> <pages> pp. 323-345. </pages>
Reference: [160] <author> L. Wolsey, </author> <type> personal communication, </type> <month> May </month> <year> 1993. </year> <month> 147 </month>
Reference-contexts: Theorem 4.3.1 Let G be a connected graph, and let M be a subset of its nodes such that jM j 2. Then G contains a spider decomposition of M . Proof: We provide a simple proof of the theorem due to L. Wolsey <ref> [160] </ref>. Let T be any rooted spanning tree of G. The depth of a node in the tree is defined as the distance of the node from the root. We prove the theorem by induction on jM j.
Reference: [161] <author> R. T. Wong, </author> <title> "Worst-case analysis of network design problem heuristics," </title> <journal> SIAM J. Alg. Disc. Math., </journal> <volume> vol. 1 (1980), </volume> <pages> pp. 51-63. </pages>
Reference-contexts: In many applications that arise in real-world situations, the network to be built is required to minimize more than one of these cost measures simultaneously. Recent papers have identified many problems <ref> [8, 85, 89, 161] </ref> wherein multiple objectives are specified in the statement of the problem. We formulate such multi-objective problems in the area of network design and provide approximation algorithms in this thesis. The optimization objective may also involve maximizing some notion of desirability in the network. <p> Early results on non-approximability <ref> [53, 161] </ref> were sporadic and used very specialized techniques. The recent connection drawn between results from the study of interactive proof systems from communication complexity theory [5, 6, 41, 110] and proving non-approximability results has provided a unified way to prove such results. <p> In this direction, Bar-Ilan and Peleg [8] considered balanced versions of problems of assigning network centers. In the balanced version, a budget is imposed on the number of nodes that any center can service. They extended existing approximation algorithms for center problems to the balanced versions. Wong <ref> [161] </ref> examined a budget network design problem in which a network is to be built whose cost is at most a certain budget such that the sum of the path-lengths of commodities to be routed using this network is minimized.
Reference: [162] <author> R. T. Wong, </author> <title> "A dual ascent approach for Steiner tree problems on a directed graph," </title> <journal> Math. Program., </journal> <volume> vol. 28, </volume> <year> (1984), </year> <pages> pp. 271-287. </pages>
Reference: [163] <author> Y. F. Wu, P. Windmayer and C. K. Wong, </author> <title> "A faster approximation algorithm for the Steiner problem in graphs," </title> <journal> Acta Informatica, </journal> <volume> vol. 23 (1986), </volume> <pages> pp. 321-331. </pages>
Reference-contexts: The results in this chapter were obtained jointly with Philip Klein, and appeared in [91]. 4.1 Problem Definition The Steiner tree problem in networks that we introduced in Section 1.1 is a classic hard problem in combinatorial optimization. Much research has been devoted to heuristics for its solution <ref> [33, 68, 112, 134, 135, 163] </ref>. Despite a slew of new approximation algorithms for this problem and some of its variants, no approximation algorithm has been given for perhaps the most natural variant: the node-weighted Steiner tree problem, in which costs can be assigned to nodes as well as edges.
Reference: [164] <author> A. Z. Zelikovsky, </author> <title> "The 11/6-approximation algorithm for the Steiner problem on networks," </title> <journal> Algorithmica, </journal> <volume> 9, </volume> <pages> pp. 463-470. 148 </pages>
Reference-contexts: Reasonable approximation factors are typically slow-growing functions of the input size like the logarithm. Many known approximation algorithms have poly-logarithmic performance guarantees [25, 54, 61, 69, 79, 89, 91, 103, 107, 126, 128, 129, 154]. Good approximation algorithms have constant performance ratios <ref> [9, 22, 74, 156, 164] </ref> while best-possible approximation algorithms achieve guarantees that cannot be better unless P = N P [50, 152]. <p> Indeed, while constant-factor approximations are known for the standard problem <ref> [96, 125, 148, 164] </ref> and even some of its generalizations [2, 60], the node-weighted version cannot be approximated to within less than a logarithmic factor unless ~ P N P [14, 110]. In this chapter, we give the first approximation algorithm for the node-weighted Steiner tree problem. <p> spanning trees [49, 50], Steiner trees [3, 50], generalized Steiner forests and more general one-connected networks as well as two-edge-connected spanning networks [131]. 80 A lot of research effort has been dedicated to the study of minimum-cost network problems: e.g., spanning trees [4, 98, 127], TSPs [48, 100], Steiner trees <ref> [74, 156, 164] </ref>, generalized Steiner trees [2] and even more general one-connected networks [52, 60, 154]. Bottleneck problems have been investigated in [20, 72, 123]. <p> Currently, the best known values of R s are 16 9 using the techniques of Zelikovsky <ref> [164] </ref> and Berman and Ramaiyer [15]. Proof: The algorithm for computing the Steiner tree which simultaneously minimizes the product of the total cost and the bottleneck cost given in the ratio (6.6) is simply this: Compute an approximately minimum-cost Steiner tree using any of the known algorithms [164, 15]. <p> Proof: The algorithm for computing the Steiner tree which simultaneously minimizes the product of the total cost and the bottleneck cost given in the ratio (6.6) is simply this: Compute an approximately minimum-cost Steiner tree using any of the known algorithms <ref> [164, 15] </ref>. Let this heuristic guarantee a solution which comes to within R s of the minimum-cost Steiner tree. Call this tree T 1 . Let c (T 1 ) and b (T 1 ) denote the total edge cost and the bottleneck cost of the tree.
References-found: 164

