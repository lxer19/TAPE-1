URL: ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-014-91.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1991.html
Root-URL: http://www.cs.columbia.edu
Email: kaiser@cs.columbia.edu  
Title: Extending A Tool Integration Language  
Author: Mark A. Gisi Gail E. Kaiser 
Date: October 1991.  
Note: This version appears in the First International Conference on the Software Process,  Gisi is supported in part by National Science Foundation grant CCR-9000930. Kaiser is supported by National Science Foundation grants CCR-9000930, CDA-8920080 and CCR-8858029, by grants from AT&T, BNR, DEC, IBM, SRA and Xerox, by the New York State Center for Advanced Technology on Computer and Information Systems and by the NSF Engineering Research Center for Telecommunications Research.  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Pubnum: Technical Report CUCS-014-91  
Abstract: The Marvel environment supports rule-based modeling of software processes. Marvel invokes external tools to carry out steps in a software process. One of the major objectives of this research is to invoke existing external tools without needing to modify them. This is achieved by encapsulating tools in envelopes, designed to abstract the details of a tool from the Marvel kernel, thereby providing a "black box" interface. Initially we used the Unix shell language to write envelopes. Due to several limitations of the shell language, however, the black box abstraction could not be fully supported. We describe these limitations and discuss how we extended the shell language to obtain a new envelope language that fully supports the black box abstraction. c fl1991 Mark A. Gisi and Gail E. Kaiser
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson, G., and Anderson, P., </author> <title> "The UNIX C Shell Field Guide," </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference-contexts: An argument list is similar to the argv and argc parameters of a C program. A system that wishes to incorporate this technology would need to represent their arguments accordingly. The envelope translator supports the three major Unix shell languages, Bourne [5], Korn [6], and C <ref> [1] </ref> shells. All the facilities described in section 3 have been implemented, and integrated with the Marvel kernel, except at the time of writing we have not implemented static checking of envelope interfaces against rules.
Reference: [2] <author> Kaiser, G.E., Barghouti, N.S., Feiler, P.H., and Schwanke, R.W., </author> <title> "Database Support for Knowledge-Based Engineering Environments," </title> <booktitle> IEEE Expert 3(2) </booktitle> <pages> 18-32, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: Since tools are expensive to develop in terms of both time and cost, a major objective is to employ existing tools without modifying them. We achieve this by encapsulation of external tool interactions within envelopes <ref> [2] </ref>. The envelope concept was introduced in the ISTAR environment [8]. Each step of a process is represented in the process model by an activity. An activity may involve building an executable, running a test suite, or simply invoking an editor.
Reference: [3] <author> Kaiser, G.E., Barghouti, N.S., and Sokolsky, M.H., </author> <title> "Preliminary Experience with Process Modeling in the Marvel Software Development Environment Kernel," </title> <booktitle> Twenty-Third Annual Hawaii International Conference on System Sciences, Shriver, B.D., </booktitle> <publisher> ed., </publisher> <pages> pp. 131-140, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: An activity's execution often involves the invocation of one or more commercial off-the-shelf (COTS) tools. To support the integration of COTS tools without modification, or even access to their source code, the Marvel kernel views each activity as a "black box" <ref> [3] </ref>: it only knows the activity's input and output requirements. In addition, an activity should know nothing about the Marvel kernel. For example, suppose we want to execute an activity that compiles a C file.
Reference: [4] <author> Kaiser, G.E., Feiler, P.H., and Popovich, S.S., </author> <title> "Intelligent Assistant for Software Development and Maintenance," </title> <booktitle> IEEE Software 5(3) </booktitle> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Marvel is a rule-based environment that assists users with the software development process and stores software components, their attributes and relations in an objectbase <ref> [4] </ref>. Unlike most other process modeling systems, Marvel employs existing external tools to carry out the steps of a software process. Since tools are expensive to develop in terms of both time and cost, a major objective is to employ existing tools without modifying them.
Reference: [5] <author> Kochan, S.G., and Wood, P.H., </author> <title> "UNIX Shell Programming," </title> <publisher> Hayden Books, </publisher> <address> Indianapolis, </address> <year> 1988. </year>
Reference-contexts: An argument list is similar to the argv and argc parameters of a C program. A system that wishes to incorporate this technology would need to represent their arguments accordingly. The envelope translator supports the three major Unix shell languages, Bourne <ref> [5] </ref>, Korn [6], and C [1] shells. All the facilities described in section 3 have been implemented, and integrated with the Marvel kernel, except at the time of writing we have not implemented static checking of envelope interfaces against rules.
Reference: [6] <author> Korn, D., and Bolsky, </author> <title> "Kornshell Command and Programming Language," </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: An argument list is similar to the argv and argc parameters of a C program. A system that wishes to incorporate this technology would need to represent their arguments accordingly. The envelope translator supports the three major Unix shell languages, Bourne [5], Korn <ref> [6] </ref>, and C [1] shells. All the facilities described in section 3 have been implemented, and integrated with the Marvel kernel, except at the time of writing we have not implemented static checking of envelope interfaces against rules.
Reference: [7] <author> Sommerville, I., </author> <title> "Software Engineering," 3rd Edition, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: It abstracts the details of the interface of a tool. Envelopes were initially written in the Unix shell language, which has several advantages: it already exists; many reusable Unix utilities are available; and it provides a means of connecting existing tools together into different useful configurations <ref> [7] </ref>. However, the shell language has at least two limitations in supporting the black box abstraction: 1. It does not support the declaration of an activity's interface (i.e., input/output). There is no way to declare the types of incoming and outgoing data in a clean, controlled manner. 2.
Reference: [8] <author> Stenning, V., </author> <title> "An Introduction to ISTAR", in Software Engineering Environments, </title> <editor> Som-merville, I., ed., Peter Peregrinus, </editor> <address> London, </address> <year> 1986, </year> <pages> pp. 1-22. 11 </pages>
Reference-contexts: Since tools are expensive to develop in terms of both time and cost, a major objective is to employ existing tools without modifying them. We achieve this by encapsulation of external tool interactions within envelopes [2]. The envelope concept was introduced in the ISTAR environment <ref> [8] </ref>. Each step of a process is represented in the process model by an activity. An activity may involve building an executable, running a test suite, or simply invoking an editor. An activity's execution often involves the invocation of one or more commercial off-the-shelf (COTS) tools.
References-found: 8

