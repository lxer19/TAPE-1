URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1992/tr-92-049.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1992.html
Root-URL: http://www.icsi.berkeley.edu
Title: An Abductive Framework for Generalized Logic Programs: Preliminary Report  
Author: Gerhard Brewka 
Address: Postfach 12 40, 5205 Sankt Augustin, Germany  
Affiliation: GMD,  
Note: On leave from  
Date: July 1992  
Pubnum: TR-92-049  
Abstract: We present an abductive semantics for generalized propositional logic programs which defines the meaning of a logic program in terms of its extensions. This approach extends the stable model semantics for normal logic programs in a natural way. The new semantics is equivalent to stable semantics for a logic program P whenever P is normal and has a stable model. The existence of extensions is guaranteed for all normal programs. The semantics can be applied without further modification to generalized logic programs where disjunctions and negation signs may appear in the head of rules. Our approach is based on an idea recently proposed by Konolige for causal reasoning. Instead of maximizing in abduction the set of used hypotheses alone we maximize the union of the used and refuted hypotheses. 
Abstract-found: 1
Intro-found: 1
Reference: [Bre89] <author> Brewka, G., </author> <title> Preferred Subtheories: An Extended Framework for Default Reasoning, </title> <booktitle> Proc. IJCAI 89, </booktitle> <address> Detroit, </address> <year> 1989 </year>
Reference-contexts: Another interesting extension of this approach are prioritized logic programs. We may introduce explicit priorities among the hypotheses, e.g. in the style of preferred subtheories <ref> [Bre89] </ref>. The set of assumables Hyp can be divided into preference levels H 1 ; H 2 ; : : :. An extension base E 1 is preferred to an extension base E 2 iff there is an i such that 1.
Reference: [Dun91] <author> Dung, </author> <title> P.M., Negations as Hypotheses: An Abductive Foundation for Logic Programming, </title> <booktitle> Proc. 8th Int. Conference on Logic Programming, </booktitle> <address> Paris, </address> <year> 1991 </year>
Reference-contexts: Using abductive frameworks to define a semantics for logic programs is not a new idea. Eshghi and Kowalski [EK89] were the first to investigate logic programs, in particular negation as failure, in terms of abduction. More recently, Kakas and Mancarella [KM90] and Dung <ref> [Dun91] </ref> have continued this line of research. We will in the rest of this section review these earlier approaches and discuss why we do not consider them entirely satisfactory. Eshghi and Kowalski show that negation as failure in normal logic programs can be viewed as a special case of abduction. <p> From this it is immediate that the existence of generalized stable models is not guaranteed. Generalized stable models thus do not solve the problem of non-existence of stable models for normal programs. Dung's abductive frameworks <ref> [Dun91] </ref> are equivalent to Esghi/Kowalski's, that is he requires the programs in frameworks to consist of definite clauses. To be able to handle normal programs he replaces predicate symbols p in negated literals by new symbols p*, as in Eshghi/Kowalski's approach.
Reference: [EK89] <author> Eshghi, K., Kowalski, R.A., </author> <title> Abduction Compared with Negation by Failure, </title> <booktitle> Proc. 6th Int. Conference on Logic Programming, </booktitle> <year> 1989 </year>
Reference-contexts: It is therefore clearly an advantage if a simple semantics for normal programs can directly be applied to theses generalizations. Using abductive frameworks to define a semantics for logic programs is not a new idea. Eshghi and Kowalski <ref> [EK89] </ref> were the first to investigate logic programs, in particular negation as failure, in terms of abduction. More recently, Kakas and Mancarella [KM90] and Dung [Dun91] have continued this line of research.
Reference: [GL88] <author> Gelfond, M., Lifschitz. V., </author> <title> The Stable Model Semantics for Logic Programming, </title> <booktitle> Proc. 5th Int. Conference on Logic Programming, </booktitle> <year> 1998 </year>
Reference-contexts: Secondly, as we will show in this paper, it is possible to define a simple and elegant extension of Gelfond and Lifschitz's stable model semantics <ref> [GL88] </ref> based on abduction. This new abductive semantics has the following properties: * the semantics is equivalent to stable model semantics for programs which possess at least one stable model, * a program P has a defined meaning unless P considered as a set of inference rules is inconsistent.
Reference: [GL90] <author> Gelfond, M., Lifschitz. V., </author> <title> Logic Programs with Classical Negation, </title> <booktitle> Proc. 7th Int. Conference on Logic Programming, </booktitle> <year> 1990 </year>
Reference-contexts: All of these possible further generalizations are easily accomodated in our framework. 4 Two types of negation? In a recent paper <ref> [GL90] </ref> Gelfond and Lifschitz introduce logic programs with two different negation symbols, a "strong" negation denoted by :, and a "weak" negation denoted by ~. The use of two different negation symbols in the Gelfond/Lifschitz approach does not seem entirely convincing.
Reference: [KM90] <author> Kakas, A.C., Mancarella, P., </author> <title> Generalized Stable Models: A Semantics for Abduction, </title> <booktitle> Proc. 9th European Conference on Artificial Intelligence, </booktitle> <address> Stockholm, </address> <year> 1990 </year>
Reference-contexts: Using abductive frameworks to define a semantics for logic programs is not a new idea. Eshghi and Kowalski [EK89] were the first to investigate logic programs, in particular negation as failure, in terms of abduction. More recently, Kakas and Mancarella <ref> [KM90] </ref> and Dung [Dun91] have continued this line of research. We will in the rest of this section review these earlier approaches and discuss why we do not consider them entirely satisfactory.
Reference: [Kon92] <author> Konolige, K., </author> <title> A General Theory of Default Reasoning in Causal Domains, </title> <booktitle> Proc. 4th Int. Workshop on Nonmonotonic Reasoning, </booktitle> <address> Plymouth, VT, </address> <year> 1992 </year>
Reference-contexts: What then are the acceptable sets of hypotheses, or in our terminology the extension bases, that can be used to define the meaning of a logic program? It turns out that an idea used in <ref> [Kon92] </ref> for reasoning about simple causal systems can be applied to solve this problem.
Reference: [Rei80] <author> Reiter, R., </author> <title> A Logic for Default Reasoning, </title> <booktitle> Artificial Intelligence 13, </booktitle> <year> 1980 </year> <month> 11 </month>
Reference-contexts: Consider the following example: a :a This program has no stable model, yet it has an extension generated by the extension base f:cg. It is not difficult to establish the relationship of this approach to default logic <ref> [Rei80] </ref>.
References-found: 8

