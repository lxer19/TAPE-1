URL: ftp://ftp.idsia.ch/pub/techrep/IDSIA-38-98.ps.gz
Refering-URL: http://www.idsia.ch/techrep.html
Root-URL: http://www.idsia.ch/techrep.html
Title: Model and Data Integration and Re-use in Environmental Decision Support Systems  
Author: Andrea E. Rizzoli J.Richard Davis David J. Abel 
Date: 20 May 1998  
Address: Lugano Switzerland  Canberra Australia  Canberra Australia  
Affiliation: IDSIA Istituto Dalle Molle di Studi sull'Intelligenza Artificiale  CSIRO Land and Water  CSIRO Mathematical Information Sciences  
Pubnum: Technical report IDSIA 38-98  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> D. Abel, K. Taylor, D. Kuo, </author> <title> Integrating Modelling Systems for Environmental Management Information Systems, </title> <journal> ACM-SIGMOD, </journal> <volume> Vol. 26, No. </volume> <month> 1 </month> <year> (1997). </year>
Reference: [2] <author> D.P. Bertsekas, </author> <title> Dynamic Programming and Optimal Control (Athena Scientific, </title> <address> MA, </address> <year> 1995) </year>
Reference-contexts: For this reason, the models must be handled by "optimisation engines" (solvers) and "simulation engines" (simulators). The optimisation engine implements the Bellman dynamic programming algorithm <ref> [2] </ref> to find an optimal solution to the problem. The system analyst who wants to produce a policy can "plug-in" one of the models which were devised for this purpose. The MMS provides the software architecture which makes the solver independent from the model formulation. <p> The result of the optimisation is a regulating policy which returns the amount of water to be released given the time and the state values. Since the catchment state is not observable, it must be reconstructed by a Kalman filter <ref> [2] </ref>. Therefore the policy and the state re-constructor make up a regulator model which is used to produce the regulating decision. Figure 0.10 shows how the regulator is used to produce daily decisions of water release.
Reference: [3] <author> H.K. Bhargava, S.O. Kimbrough, </author> <title> Model Management: an Embedded Languages Approach, </title> <booktitle> Decision Support Systems, </booktitle> <volume> Vol. </volume> <month> 10 </month> <year> (1993). </year>
Reference-contexts: Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough <ref> [3] </ref> discuss the embedded language technique.
Reference: [4] <author> R.W. Blanning, R. Krishnan, R. Muller. </author> <title> Decision Support on Demand: Emerging Electronic Markets for Decision Technologies. </title> <booktitle> Decision Support Systems, </booktitle> <volume> Vol. 19, No. </volume> <month> 3 </month> <year> (1997). </year>
Reference-contexts: During the early application of our design to environmental problems the HLA (High Level Architecture) approach of the DMSO [14] was described and, recently, a special issue of the journal Decision Support Systems <ref> [4] </ref> has summarized a number of approaches. All of the above mentioned works pointed out the need of model encapsulation in order to provide consistent interfaces to model functionalities. In this section we describe our approach to encapsulation of environmental models.
Reference: [5] <author> G. Booch, </author> <title> Object-Oriented Analysis with Applications Second Edition (The Benjamin/Cummings Publishing Company, </title> <address> Redwood City, </address> <year> 1994). </year>
Reference-contexts: All these authors are agreed on the use of object technologies (OT) [17] to answer the above requirements. Object technologies include object-oriented analysis, design, and programming paradigms as tools to develop software projects. Object-orientation is mainly based on three concepts: abstraction, encapsulation, and hierarchy. Paraphrasing Booch's definitions <ref> [5] </ref>, abstraction has the purpose of denoting the essential characteristics of an object, providing crisply defined conceptual boundaries; encapsulation separates and puts in compartments the elements of an abstraction and separates the interface of an abstraction from its implementation; and finally hierarchy is a ranking or ordering of abstractions. <p> Usually, a domain class provides a general description of an entity; e.g., the class of flat watersheds. A domain object is an instance, a particular case. Domain classes are based on the concept of abstract data types and are inspired by a mix of the concept of object-oriented classes <ref> [5] </ref>, frames [21], [32], database schemas [24], and prototype systems [20]. The analogue with data types (and therefore with classes and database schemas) provides gen-eralisation, while similarities with prototype systems maintain the possibility of expanding the problem definition by incrementally modifying existing domain class definitions.
Reference: [6] <institution> CORBA, Object Management Group (http://www.omg.org/). </institution>
Reference: [7] <author> D.R. Dolk, J.E. Kottemann, </author> <title> Model Integration and Modeling Languages: a Process Perspective, </title> <journal> Information Systems Research, </journal> <volume> Vol. 3, No. </volume> <month> 1 </month> <year> (1992). </year>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research <ref> [7] </ref>, [8], [18], [26], Artificial Intelligence [11] and System Theory [15], [25], [30], [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique.
Reference: [8] <author> D.R. Dolk, J.E. Kottemann, </author> <title> Model Integration and a Theory of Models, </title> <booktitle> Decision Support Systems, </booktitle> <volume> Vol. </volume> <month> 9 </month> <year> (1993). </year>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], <ref> [8] </ref>, [18], [26], Artificial Intelligence [11] and System Theory [15], [25], [30], [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique.
Reference: [9] <author> L. Del Furia, A. Rizzoli, </author> <title> An Integrated Modelling Environment for Object-Oriented Simulation of Ecological Models, </title> <booktitle> in: Proceedings of the 26th SCS Annual Simulation Symposium, </booktitle> <address> Washington, D.C. </address> <month> (March 29-April 1 </month> <year> 1993). </year>
Reference: [10] <author> B. Falkenheimer, K.D. Forbus, </author> <title> Compositional Modelling: finding the Right Model for the Job, </title> <journal> Artificial Intelligence, </journal> <volume> Vol. </volume> <month> 51 </month> <year> (1991). </year>
Reference-contexts: It is not the aim of this work to discuss the issue of model selection (see Falkenheimer and Forbus <ref> [10] </ref>), but to describe how this approach can be integrated in a model and solver selection tool for the solution of natural management problems. Models must be re-usable with respect to domain classes.
Reference: [11] <author> P.A. Fishwick, </author> <title> Qualitative Methodology in Simulation Model Engineering, </title> <journal> Simulation, </journal> <volume> Vol. 52, No. </volume> <month> 3 </month> <year> (1989). </year> <month> 26 </month>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], [18], [26], Artificial Intelligence <ref> [11] </ref> and System Theory [15], [25], [30], [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique. <p> Potentially, many models can refer to a single domain class. Thus, a structure for retrieving and storing models, a model base, is needed. It has 12 been shown by many authors <ref> [11] </ref>, [30] that the access operations to a model base must be analogous to the access operations allowed on a data base.
Reference: [12] <author> J.W. </author> <title> Forrester, </title> <publisher> Industrial Dynamics (MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1961). </year>
Reference: [13] <author> J.R Davis, D.J. Abel, D. Zhou, A. Rizzoli, P. Kilby, HYDRA: </author> <title> a Generic Design for Integrating Catchment Models, </title> <booktitle> Presented at the American Society of Civil Engineers 21st Annual Conference on Water Resources Planning and Management Division, </booktitle> <address> Denver, Co. </address> <month> (22-26 June </month> <year> 1994). </year>
Reference-contexts: When we started our work on model integration and reuse (see <ref> [13] </ref> and [27]), techniques such as distributed computing on three-tiered architectures (client broker- server) were being developed. <p> This design solution allows the re-use of data, not only of models, thus allowing the user to easily create modelling alternatives which can be applied to the same data sets. The MMS design presented here is currently being implemented in the "Open Modelling" software [27], in the HYDRA project <ref> [13] </ref> and in a two-level Decision Support System for the operations of reservoir networks [28]. Although this design covers the requirements of a MMS, many practical 24 details have to be settled during the implementation.
Reference: [14] <author> DMSO, </author> <title> High Level Architecture (http://hla.dmso.mil). </title>
Reference-contexts: When we started our work on model integration and reuse (see [13] and [27]), techniques such as distributed computing on three-tiered architectures (client broker- server) were being developed. During the early application of our design to environmental problems the HLA (High Level Architecture) approach of the DMSO <ref> [14] </ref> was described and, recently, a special issue of the journal Decision Support Systems [4] has summarized a number of approaches. All of the above mentioned works pointed out the need of model encapsulation in order to provide consistent interfaces to model functionalities.
Reference: [15] <author> G. Guariso, H. Werthner, </author> <title> Environmental Decision Support Systems (Ellis Horwood Limited, </title> <address> Chichester, </address> <year> 1989). </year>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], [18], [26], Artificial Intelligence [11] and System Theory <ref> [15] </ref>, [25], [30], [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique.
Reference: [16] <author> G. Guariso, E. Tracanella, L.Piroddi, A.E. </author> <title> Rizzoli A web accessible environmental model base: a tool for natural resources management. </title> <booktitle> Proceedings of MODSIM 97. </booktitle> <editor> Hobart. Tasmania. D. McDonald, M. McAleer, A. Jakeman (eds.), </editor> <month> 8-11 December </month> <year> 1997. </year> <note> (GAIA is available on-line at http://www.ess.co.at/GAIA/). </note>
Reference-contexts: Moreover, the body of knowledge in the environmental sciences, and consequently the number of models, is constantly increasing. Model bases, model directories have been created to be able to tap into this knowledge, and software technologies are at work to made these resources available (see, for instance, <ref> [16] </ref> and [19]). Another issue in building DSS to support solutions of real-world problems is the time and cost to assemble the modelling systems and data resources and then to integrate these into information systems usable by planners or managers.
Reference: [17] <author> B. Henderson-Sellers, J.R. Davis, I.T. Webster, J.M. Edwards, </author> <title> Modern Tools for Environmental Management: Water Quality, </title> <editor> in: A.J. Jakeman, M.B. Beck and M.J. McAleer, Eds., </editor> <publisher> Modelling Change in Environmental Systems (John Wiley & Sons, </publisher> <address> New York, </address> <year> 1993). </year>
Reference-contexts: All these authors are agreed on the use of object technologies (OT) <ref> [17] </ref> to answer the above requirements. Object technologies include object-oriented analysis, design, and programming paradigms as tools to develop software projects. Object-orientation is mainly based on three concepts: abstraction, encapsulation, and hierarchy.
Reference: [18] <author> S.N. Hong, M.V. Mannino, B. Greenberg, </author> <title> Measurement Theoretic Representation of Large, Diverse Model Bases: the Unified Modeling Language LU, </title> <booktitle> Decision Support Systems, </booktitle> <volume> Vol. </volume> <month> 10 </month> <year> (1993). </year>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], <ref> [18] </ref>, [26], Artificial Intelligence [11] and System Theory [15], [25], [30], [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique. <p> They propose an embedding language that incorporates this extra information. Hong, Mannino and Greenberg <ref> [18] </ref> pursue an approach based on measurement theory to represent the mapping from the domain world to the model base. The domain world is composed of an individual-level and of a class-level.
Reference: [19] <author> M. Knorrenschild, R. Lenz, E. Foster, C. Herderich. UFIS: </author> <title> a database of ecological models. </title> <journal> Ecological Modelling, </journal> <volume> Vol. 86 No. </volume> <pages> 2-3, pp. </pages> <month> 141-144 </month> <year> (1996). </year> <note> (UFIS is available online at http://www.gsf.de/UFIS/ufis/ufis_proj.html) </note>
Reference-contexts: Moreover, the body of knowledge in the environmental sciences, and consequently the number of models, is constantly increasing. Model bases, model directories have been created to be able to tap into this knowledge, and software technologies are at work to made these resources available (see, for instance, [16] and <ref> [19] </ref>). Another issue in building DSS to support solutions of real-world problems is the time and cost to assemble the modelling systems and data resources and then to integrate these into information systems usable by planners or managers.
Reference: [20] <author> H. Lieberman, </author> <title> Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems, </title> <booktitle> in: Proceedings of OOPSLA-86, </booktitle> <address> Portland, OR (1986). </address>
Reference-contexts: A domain object is an instance, a particular case. Domain classes are based on the concept of abstract data types and are inspired by a mix of the concept of object-oriented classes [5], frames [21], [32], database schemas [24], and prototype systems <ref> [20] </ref>. The analogue with data types (and therefore with classes and database schemas) provides gen-eralisation, while similarities with prototype systems maintain the possibility of expanding the problem definition by incrementally modifying existing domain class definitions. The union of all the domain classes defines the structure of the domain base.
Reference: [21] <author> M. Minsky, </author> <title> A Framework for Representing Knowledge, </title> <editor> in: P.H. Win-ston, Ed., </editor> <booktitle> The Psychology of Computer Vision (McGraw-Hill, </booktitle> <address> New York, </address> <year> 1975). </year>
Reference-contexts: A domain object is an instance, a particular case. Domain classes are based on the concept of abstract data types and are inspired by a mix of the concept of object-oriented classes [5], frames <ref> [21] </ref>, [32], database schemas [24], and prototype systems [20]. The analogue with data types (and therefore with classes and database schemas) provides gen-eralisation, while similarities with prototype systems maintain the possibility of expanding the problem definition by incrementally modifying existing domain class definitions.
Reference: [22] <author> W.A. Muhanna, SYMMS: </author> <title> a Model Management System that Supports Model Reuse, Sharing, and Integration, </title> <journal> European Journal of Operational Research, </journal> <volume> Vol. </volume> <month> 72 </month> <year> (1994). </year>
Reference-contexts: The aim is to enhance model re-usability and integration via a general description of the model mechanism, independent of the specific application. Another notable example of an approach to model management can be found in SYMMS, a model management system implemented on a UNIX workstation <ref> [22] </ref>. SYMMS uses a model description language that allows the user to define general-type modules and atomic-version modules, instances of the general-type ones. 2 The previously cited works and experience have originated mainly from the management sciences field, where the focus is on solving and integrating mathematical programming problems.
Reference: [23] <author> Nardini, A., C. Piccardi, and R. Soncini-Sessa, </author> <title> On the integration of risk aversion and average-performance optimization in reservoir control, </title> <journal> Water Resour. Res., </journal> <volume> Vol. 28, No. </volume> <month> 2 </month> <year> (1992). </year> <month> 27 </month>
Reference-contexts: reservoir storage s (t), the elevation function h (s (t)) which converts the volume of water to an elevation with respect to a reference value, and the minimum and maximum storage-discharge functions (v (a (t); s (t)), V (a (t); s (t))) which define the shape of the reservoir discharge <ref> [23] </ref>. This example will be used throughout the paper, in order to show how this MMS can be applied to the case of the design of a DSS for water management, from data specification to the solution of the optimisation problem.
Reference: [24] <author> K. Parsaye, M. Chignell, S. Khoshafian, H. Wong, </author> <title> Intelligent Databases: Object-Oriented, Deductive, </title> <publisher> Hypermedia Technologies (John Wiley & Sons, </publisher> <address> New-York, </address> <year> 1989). </year>
Reference-contexts: A domain object is an instance, a particular case. Domain classes are based on the concept of abstract data types and are inspired by a mix of the concept of object-oriented classes [5], frames [21], [32], database schemas <ref> [24] </ref>, and prototype systems [20]. The analogue with data types (and therefore with classes and database schemas) provides gen-eralisation, while similarities with prototype systems maintain the possibility of expanding the problem definition by incrementally modifying existing domain class definitions.
Reference: [25] <editor> F. Pichler, R. Moreno-Diaz, Eds., </editor> <booktitle> Computer Aided Systems Theory -EUROCAST '89, Lecture Notes in Computer Science Vol. </booktitle> <publisher> 410 (Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990). </year>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], [18], [26], Artificial Intelligence [11] and System Theory [15], <ref> [25] </ref>, [30], [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique.
Reference: [26] <author> W.D. Potter, T.A. Byrd, J.A. Miller, K.J. Kochut, </author> <title> Extending Decision Support Systems: the Integration of Data, Knowledge, and Model Management, </title> <journal> Annals of Operations Research, </journal> <volume> Vol. </volume> <month> 38 </month> <year> (1992). </year>
Reference-contexts: A standard DSS is composed of at least three modules: a data base management system (DBMS), a model base management system (MMS) and a dialogue generation and management software (DGMS) [33]. Among the necessary characteristics of the MMS module are <ref> [26] </ref>: 1. The MMS should be able to create new models quickly and easily. 1 2. The model building-blocks of the MMS should contain cognitively meaningful chunks of knowledge to the user. 3. <p> The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], [18], <ref> [26] </ref>, Artificial Intelligence [11] and System Theory [15], [25], [30], [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique.
Reference: [27] <author> A. Rizzoli, J.R. Davis, M. Reed and T. Farley, </author> <title> A DSS for catchment management, </title> <editor> in: P.Zannetti, Ed., </editor> <title> Environmental Modelling - Vol 3, Computer Methods and Software for Simulating Environmental Pollution and its Adverse Effects. </title> <publisher> (Computational Mechanics Publications, </publisher> <address> Southampton, </address> <year> 1996). </year>
Reference-contexts: When we started our work on model integration and reuse (see [13] and <ref> [27] </ref>), techniques such as distributed computing on three-tiered architectures (client broker- server) were being developed. <p> This design solution allows the re-use of data, not only of models, thus allowing the user to easily create modelling alternatives which can be applied to the same data sets. The MMS design presented here is currently being implemented in the "Open Modelling" software <ref> [27] </ref>, in the HYDRA project [13] and in a two-level Decision Support System for the operations of reservoir networks [28]. Although this design covers the requirements of a MMS, many practical 24 details have to be settled during the implementation.
Reference: [28] <author> A. Rizzoli, R. Soncini-Sessa, </author> <title> Integrating and complementing Human Experience in Water Management with a Two-level DSS, </title> <editor> in: F. Burstein, H. Linger, H. Smith (eds.) </editor> <booktitle> Proceedings of the Workshop on Intelligent Decision Support, </booktitle> <address> IDS '96,, Melbourne (9 September 1996). </address>
Reference-contexts: One of the authors of this paper has been implementing a decision support system for the operations of multi-purpose reservoirs <ref> [28] </ref>. This system requires models for optimisation to generate a reservoir management policy and to suggest operation decisions and simulation to assess policy performance and its impact. For this reason, the models must be handled by "optimisation engines" (solvers) and "simulation engines" (simulators). <p> The MMS design presented here is currently being implemented in the "Open Modelling" software [27], in the HYDRA project [13] and in a two-level Decision Support System for the operations of reservoir networks <ref> [28] </ref>. Although this design covers the requirements of a MMS, many practical 24 details have to be settled during the implementation. Modelling using such software designs represent a major step towards more efficient modelling and, given the importance of predictive models to DSSs, more efficient DSS development. 25
Reference: [29] <author> P. Robertson, </author> <title> Integrating Legacy Systems with Modern Corporate Applications, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 40, No. </volume> <month> 5 </month> <year> (1997). </year>
Reference: [30] <author> J.W. Rozenblit, </author> <title> P.L. Jankowski, An Integrated Framework for Knowledge-Based Modeling and Simulation of Natural Systems, </title> <journal> Simulation, </journal> <volume> Vol. 57, No. </volume> <month> 3 </month> <year> (1991). </year>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], [18], [26], Artificial Intelligence [11] and System Theory [15], [25], <ref> [30] </ref>, [34], [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique. <p> Potentially, many models can refer to a single domain class. Thus, a structure for retrieving and storing models, a model base, is needed. It has 12 been shown by many authors [11], <ref> [30] </ref> that the access operations to a model base must be analogous to the access operations allowed on a data base.
Reference: [31] <author> R. Soncini-Sessa, D. Canuti, A. Colorni, E. Laniado, F. B. Losa, A. Rizzoli, L. Villa, B. Vitali. </author> <title> Planning and management of a transnational water system, the case of Lake Maggiore, </title> <booktitle> Italy-Switzerland. Presented at: International Workshop on barriers to Sustainable Management of Water Quantity and Quality, </booktitle> <address> Wuhan, China, </address> <month> (12-15 May </month> <year> 1998). </year>
Reference-contexts: The capability of testing different models against the same data sets was an asset in evaluating the management alternatives <ref> [31] </ref>. 0.7 Conclusions The Model Management System presented in this paper shows how the modelling knowledge and the available data, represented in the domain base, can be organised in order to enhance model integration and re-use. Models are linked to domain classes of objects and they communicate through their interfaces.
Reference: [32] <author> M. Stefik, D.G. Bobrow, </author> <title> Object-Oriented Programming: Themes and Variations, </title> <journal> AI Magazine, </journal> <volume> Vol. 6, No. </volume> <month> 4 </month> <year> (1986). </year>
Reference-contexts: A domain object is an instance, a particular case. Domain classes are based on the concept of abstract data types and are inspired by a mix of the concept of object-oriented classes [5], frames [21], <ref> [32] </ref>, database schemas [24], and prototype systems [20]. The analogue with data types (and therefore with classes and database schemas) provides gen-eralisation, while similarities with prototype systems maintain the possibility of expanding the problem definition by incrementally modifying existing domain class definitions.
Reference: [33] <editor> R.H. Sprague jr., E.D. Carlson, </editor> <title> Building Effective Decision Support Systems (Prentice Hall, </title> <address> Englewood Cliffs, </address> <year> 1982). </year>
Reference-contexts: A standard DSS is composed of at least three modules: a data base management system (DBMS), a model base management system (MMS) and a dialogue generation and management software (DGMS) <ref> [33] </ref>. Among the necessary characteristics of the MMS module are [26]: 1. The MMS should be able to create new models quickly and easily. 1 2. The model building-blocks of the MMS should contain cognitively meaningful chunks of knowledge to the user. 3.
Reference: [34] <editor> B.P. Zeigler, G. Klir, M. Elzas, T.I. Oren, </editor> <booktitle> Methodology in Systems Modelling and Simulation (North Holland, </booktitle> <address> Amsterdam, </address> <year> 1979). </year>
Reference-contexts: The MMS must be able to incorporate executable models written by other modellers and to connect them to other models in a seamless way. Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], [18], [26], Artificial Intelligence [11] and System Theory [15], [25], [30], <ref> [34] </ref>, [35]. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique.
Reference: [35] <author> B.P. Zeigler, </author> <title> Object-Oriented Simulation with Hierarchical, Modular Models: Intelligent Agents and Endomorphic Systems (Academic Press, </title> <address> New York, </address> <year> 1989). </year> <month> 28 </month>
Reference-contexts: Proposals to develop MMSs have arisen in Management Science and Operation Research [7], [8], [18], [26], Artificial Intelligence [11] and System Theory [15], [25], [30], [34], <ref> [35] </ref>. Some authors in particular have dealt with issues that have some common ground with the ideas exposed in this work. For example, Bhargava and Kimbrough [3] discuss the embedded language technique.
References-found: 35

