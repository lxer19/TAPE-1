URL: http://www.cs.colorado.edu/~hal/Papers/survivable.ps
Refering-URL: http://www.cs.colorado.edu/~hal/Home.html
Root-URL: http://www.cs.colorado.edu
Title: An Efficient Approximation Algorithm for the Survivable Network Design Problem  
Author: Harold N. Gabow Michel X. Goemans David P. Williamson 
Keyword: Key words: network design, approximation algorithm, Steiner tree  
Affiliation: University of Colorado  M.I.T.  IBM Watson  
Abstract: The survivable network design problem is to construct a minimum-cost subgraph satisfying certain given edge-connectivity requirements. The first polynomial-time approximation algorithm was given by Williamson et al. [20]. This paper gives an improved version that is more efficient. Consider a graph of n vertices and connectivity requirements that are at most k. Both algorithms find a solution that is within a factor 2k 1 of optimal for k 2 and a factor 2 of optimal for k = 1. Our algorithm improves the time from O(k 3 n 4 ) to O(k 2 n 2 + kn 2 p log log n). Our algorithm shares features with [20] but also differs from it at a high level, necessitating a different analysis of correctness and accuracy; our analysis is based on a combinatorial characterization of the "redundant" edges. Several other ideas are introduced to gain efficiency. These include a generalization of Padberg and Rao's characterization of minimum odd cuts, use of a representation of all minimum (s; t) cuts in a network, and a new priority queue system. The latter also improves the efficiency of the approximation algorithm of Goemans and Williamson [8] for constrained forest problems such as minimum-weight matching, generalized Steiner trees and others.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agrawal, P. Klein, and R. Ravi. </author> <title> When trees collide: An approximation algorithm for the generalized Steiner problem on networks. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 </volume> <pages> 440-456, </pages> <year> 1995. </year>
Reference-contexts: guarantee time reference Steiner tree r i 2 f0; 1g 2 O (n 2 ) Mehlhorn [15] 11/6 O (n 3:5 ) Zelikovsky [21] 16/9 O (n 5 ) Berman and Ramaiyer [2] Generalized Steiner tree r ij 2 f0; 1g 2 O (n 2 log n) Agrawal et al. <ref> [1] </ref> Goemans and Williamson [8] 2-edge connected subgraph r i = 2 3 O (n 2 ) Frederickson and Ja'Ja' [3] k-edge connected subgraph r i = k 2 O (kn 3 log n) Khuller and Vishkin [12] Generalized Steiner 2-edge-connected subgraph r ij 2 f0; 2g 3 O (n 2 <p> The previously known special-case SNDP approximation algorithms are listed in Table 1. Throughout this paper n and m denote the number of vertices and edges of the given graph. For simplicity the time bounds in the table assume dense graphs, m = fi (n 2 ). Agrawal et al. <ref> [1] </ref> and Goemans and Williamson [8], building on the work of Goemans and Bertsimas [7], have described an approximation algorithm for a variant of SNDP in which an edge can be selected several times. This version of the problem, however, appears to be easier to approximate.
Reference: [2] <author> P. Berman and V. Ramaiyer. </author> <title> Improved approximations for the Steiner tree problem. </title> <booktitle> In Proceedings of the 3rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 325-334, </pages> <year> 1992. </year>
Reference-contexts: N00014-89-J-1988 and N00014-92-J-1799, and AT&T Bell Laboratories. 1 Efficient Approximation Algorithm for the SNDP 2 Problem requirements performance guarantee time reference Steiner tree r i 2 f0; 1g 2 O (n 2 ) Mehlhorn [15] 11/6 O (n 3:5 ) Zelikovsky [21] 16/9 O (n 5 ) Berman and Ramaiyer <ref> [2] </ref> Generalized Steiner tree r ij 2 f0; 1g 2 O (n 2 log n) Agrawal et al. [1] Goemans and Williamson [8] 2-edge connected subgraph r i = 2 3 O (n 2 ) Frederickson and Ja'Ja' [3] k-edge connected subgraph r i = k 2 O (kn 3 log
Reference: [3] <author> G. N. Frederickson and J. Ja'Ja'. </author> <title> Approximation algorithms for several graph augmentation problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 10 </volume> <pages> 270-283, </pages> <year> 1981. </year>
Reference-contexts: 3:5 ) Zelikovsky [21] 16/9 O (n 5 ) Berman and Ramaiyer [2] Generalized Steiner tree r ij 2 f0; 1g 2 O (n 2 log n) Agrawal et al. [1] Goemans and Williamson [8] 2-edge connected subgraph r i = 2 3 O (n 2 ) Frederickson and Ja'Ja' <ref> [3] </ref> k-edge connected subgraph r i = k 2 O (kn 3 log n) Khuller and Vishkin [12] Generalized Steiner 2-edge-connected subgraph r ij 2 f0; 2g 3 O (n 2 log n) Klein and Ravi [13] Table 1: Previous work on special cases of SNDP represent switching stations that need
Reference: [4] <author> H. N. Gabow, Z. Galil, T. H. Spencer, and R. E. Tarjan. </author> <title> Efficient algorithms for finding minimum spanning trees in undirected and directed graphs. </title> <journal> Combinatorica, </journal> <volume> 6 </volume> <pages> 109-122, </pages> <year> 1986. </year>
Reference-contexts: the course of the whole algorithm. 5.4 Edge selection step This section shows how to implement the edge selection step of Uncrossable in time O (n (n+ p It uses a lemma allowing irrelevant edges to be ignored, plus the data structure idea of packets due to Gabow et al. <ref> [4] </ref>. Say that "time" is zero at the beginning of Uncrossable, and time increases by the amount * determined in each iteration (see Figure 2).
Reference: [5] <author> H. N. Gabow, M. X. Goemans, and D. P. Williamson. </author> <title> An efficient approximation algorithm for the survivable network design problem. </title> <booktitle> In Proceedings of the Third MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 57-74, </pages> <year> 1993. </year>
Reference-contexts: The top-down traversal also ensures that when we reach a node v D , all of its hit children are correctly marked. Therefore, the overall running time of the clean-up step is O (n) time. 6 Concluding Remarks Since the appearance of a preliminary version of this paper <ref> [5] </ref>, Goemans, Goldberg, Plotkin, Shmoys, Tardos, and Williamson [6] have shown how the performance guarantee of the algorithm can be improved from 2f max to 2H (f max ), where H (k) = 1 + 1 2 + + 1 k .
Reference: [6] <author> M. Goemans, A. Goldberg, S. Plotkin, D. Shmoys, E. Tardos, and D. Williamson. </author> <title> Improved approximation algorithms for network design problems. </title> <booktitle> In Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 223-232, </pages> <year> 1994. </year>
Reference-contexts: Therefore, the overall running time of the clean-up step is O (n) time. 6 Concluding Remarks Since the appearance of a preliminary version of this paper [5], Goemans, Goldberg, Plotkin, Shmoys, Tardos, and Williamson <ref> [6] </ref> have shown how the performance guarantee of the algorithm can be improved from 2f max to 2H (f max ), where H (k) = 1 + 1 2 + + 1 k .
Reference: [7] <author> M. X. Goemans and D. J. Bertsimas. </author> <title> Survivable networks, linear programming relaxations and the parsimonious property. </title> <journal> Mathematical Programming, </journal> <volume> 60 </volume> <pages> 145-166, </pages> <year> 1993. </year>
Reference-contexts: For simplicity the time bounds in the table assume dense graphs, m = fi (n 2 ). Agrawal et al. [1] and Goemans and Williamson [8], building on the work of Goemans and Bertsimas <ref> [7] </ref>, have described an approximation algorithm for a variant of SNDP in which an edge can be selected several times. This version of the problem, however, appears to be easier to approximate. This paper presents an improved version of the approximation algorithm of [20].
Reference: [8] <author> M. X. Goemans and D. P. Williamson. </author> <title> A general approximation technique for constrained forest problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 </volume> <pages> 296-317, </pages> <year> 1995. </year>
Reference-contexts: tree r i 2 f0; 1g 2 O (n 2 ) Mehlhorn [15] 11/6 O (n 3:5 ) Zelikovsky [21] 16/9 O (n 5 ) Berman and Ramaiyer [2] Generalized Steiner tree r ij 2 f0; 1g 2 O (n 2 log n) Agrawal et al. [1] Goemans and Williamson <ref> [8] </ref> 2-edge connected subgraph r i = 2 3 O (n 2 ) Frederickson and Ja'Ja' [3] k-edge connected subgraph r i = k 2 O (kn 3 log n) Khuller and Vishkin [12] Generalized Steiner 2-edge-connected subgraph r ij 2 f0; 2g 3 O (n 2 log n) Klein and <p> Throughout this paper n and m denote the number of vertices and edges of the given graph. For simplicity the time bounds in the table assume dense graphs, m = fi (n 2 ). Agrawal et al. [1] and Goemans and Williamson <ref> [8] </ref>, building on the work of Goemans and Bertsimas [7], have described an approximation algorithm for a variant of SNDP in which an edge can be selected several times. This version of the problem, however, appears to be easier to approximate. <p> As the last ingredient in an efficient algorithm, we improve the implementation of the rule for selecting the next edge to add to F . This edge-choice rule (also used in [20]) is similar to the rule in the algorithm of Goemans and Williamson <ref> [8] </ref>. Goemans and Williamson present approximation algorithms for minimum-weight matching (with the triangle inequality), T -joins, Steiner trees and generalized Steiner trees, and a number of other problems. <p> Say that "time" is zero at the beginning of Uncrossable, and time increases by the amount * determined in each iteration (see Figure 2). As in <ref> [8] </ref> our implementation keeps track of the addition time at which an edge would be selected if the set of active sets C were not to change.
Reference: [9] <author> R. Gomory and T. Hu. </author> <title> Multi-terminal network flows. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 9 </volume> <pages> 551-570, </pages> <year> 1961. </year>
Reference-contexts: We show that this problem can be solved using the Gomory-Hu cut tree <ref> [9] </ref>. <p> To avoid computing maximum flows to optimality, we modify the procedure for constructing the cut tree, since whenever the maximum flow has value greater or equal to f max we cannot use information from a mincut. First recall the classical procedure of Gomory and Hu <ref> [9] </ref>. The procedure starts from one supervertex containing all vertices of the graph. At any stage of the construction, there is a partial tree whose (super)vertices form a partition of the vertex set. <p> The modified algorithm terminates when each supervertex is either a single vertex or the forest for the supervertex is a tree on its vertices. We replace every supervertex by its associated tree and output the resulting tree as the modified Gomory-Hu subtree. By the same argument as in <ref> [9] </ref>, for any vertices s and t, the value of a maximum flow from s to t and a corresponding mincut can be obtained from the modified cut tree, provided that this maximum flow value is at most f max 1. <p> We use a maximum spanning tree T of the graph having cost r ij on edge (i; j). Any set satisfying the connectivity requirements of the edges of T satisfies all given requirements r ij (Gomory and Hu <ref> [9] </ref>). It is easy to see that the violated sets of phase p must correspond to mincuts of value p 1 associated with an edge e = (s; t) of T having f (S e ) = r st p.
Reference: [10] <author> M. Grotschel, C. L. Monma, and M. Stoer. </author> <title> Design of survivable networks. </title> <booktitle> In Handbook in Operations Research and Management Science. </booktitle> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: For a thorough discussion of the problem and a survey of existing results, the reader is referred to the survey paper by Grotschel et al. <ref> [10] </ref>. A heuristic that gives a solution guaranteed to be within a factor ff 1 of optimal has a performance guarantee of ff. If in addition the heuristic runs in polynomial time it is called an (ff)-approximation algorithm.
Reference: [11] <author> D. Gusfield and D. Naor. </author> <title> Extracting maximal information about sets of minimum cuts. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 64-89, </pages> <year> 1993. </year>
Reference-contexts: Next we combine the Gomory-Hu tree with the representation of Picard and Queyranne for all minimum (s; t) cuts of a network [17]. This allows efficient identification of the active sets. Combining these two ideas has been previously suggested by Gusfield and Naor <ref> [11] </ref>. We gain further efficiency by showing that the special structure of SNDP allows faster location of the active sets in the representation. As the last ingredient in an efficient algorithm, we improve the implementation of the rule for selecting the next edge to add to F .
Reference: [12] <author> S. Khuller and U. Vishkin. </author> <title> Biconnectivity approximations and graph carvings. </title> <journal> Journal of the ACM, </journal> <volume> 41 </volume> <pages> 214-235, </pages> <year> 1994. </year>
Reference-contexts: ij 2 f0; 1g 2 O (n 2 log n) Agrawal et al. [1] Goemans and Williamson [8] 2-edge connected subgraph r i = 2 3 O (n 2 ) Frederickson and Ja'Ja' [3] k-edge connected subgraph r i = k 2 O (kn 3 log n) Khuller and Vishkin <ref> [12] </ref> Generalized Steiner 2-edge-connected subgraph r ij 2 f0; 2g 3 O (n 2 log n) Klein and Ravi [13] Table 1: Previous work on special cases of SNDP represent switching stations that need to be protected from single edge failures, while vertices with r i = 0 are optional sites.
Reference: [13] <author> P. Klein and R. Ravi. </author> <title> When cycles collapse: A general approximation technique for constrained two-connectivity problems. </title> <booktitle> In Proceedings of the Third MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 39-55, </pages> <year> 1993. </year> <note> Also appears as Brown University Technical Report CS-92-30. To appear in Algorithmica. Efficient Approximation Algorithm for the SNDP 25 </note>
Reference-contexts: connected subgraph r i = 2 3 O (n 2 ) Frederickson and Ja'Ja' [3] k-edge connected subgraph r i = k 2 O (kn 3 log n) Khuller and Vishkin [12] Generalized Steiner 2-edge-connected subgraph r ij 2 f0; 2g 3 O (n 2 log n) Klein and Ravi <ref> [13] </ref> Table 1: Previous work on special cases of SNDP represent switching stations that need to be protected from single edge failures, while vertices with r i = 0 are optional sites.
Reference: [14] <author> P. N. Klein. </author> <title> A data structure for bicategories, with application to speeding up an approximation algorithm. </title> <journal> Information Processing Letters, </journal> <volume> 52 </volume> <pages> 303-307, </pages> <year> 1994. </year>
Reference-contexts: All these algorithms have performance guarantee 2 and run in time O (n 2 log n).Our implementation improves this time bound to O (n (n + p m log log n)). The idea of the implementation is to avoid work on irrelevant edges. Independently, Klein <ref> [14] </ref> gives a O (n p time implementation using a new data structure. Putting the pieces together gives the following results. For SNDP with requirements r ij f max the performance guarantee is 2f max 1 for f max 2 and 2 for f max = 1.
Reference: [15] <author> K. Mehlhorn. </author> <title> A faster approximation algorithm for the Steiner problem in graphs. </title> <journal> Information Processing Letters, </journal> <volume> 27 </volume> <pages> 125-128, </pages> <year> 1988. </year>
Reference-contexts: Research supported by an NSF Graduate Fellowship, Air Force contract F49620-92-J-0125, DARPA contracts N00014-89-J-1988 and N00014-92-J-1799, and AT&T Bell Laboratories. 1 Efficient Approximation Algorithm for the SNDP 2 Problem requirements performance guarantee time reference Steiner tree r i 2 f0; 1g 2 O (n 2 ) Mehlhorn <ref> [15] </ref> 11/6 O (n 3:5 ) Zelikovsky [21] 16/9 O (n 5 ) Berman and Ramaiyer [2] Generalized Steiner tree r ij 2 f0; 1g 2 O (n 2 log n) Agrawal et al. [1] Goemans and Williamson [8] 2-edge connected subgraph r i = 2 3 O (n 2 )
Reference: [16] <author> M. W. Padberg and M. Rao. </author> <title> Odd minimum cut-sets and b-matchings. </title> <journal> Mathematics of Operations Research, </journal> <volume> 7 </volume> <pages> 67-80, </pages> <year> 1982. </year>
Reference-contexts: We identify active sets more efficiently using two ideas from flow theory. First we show the Gomory-Hu cut tree gives a characterization of a feasible solution to (IP ). This generalizes Padberg and Rao's characterization of a minimum T -cut in terms of the Gomory-Hu tree <ref> [16] </ref>, since T -cuts correspond to a proper function. Next we combine the Gomory-Hu tree with the representation of Picard and Queyranne for all minimum (s; t) cuts of a network [17]. This allows efficient identification of the active sets. <p> In addition, this theorem generalizes a result of Padberg and Rao <ref> [16] </ref> for T -cuts (cuts S for which jS " T j is odd) or odd cuts (for which jSj is odd). Their result states that the minimum T -cut or odd cut is among the cuts of the Gomory-Hu tree.
Reference: [17] <author> J. Picard and M. Queyranne. </author> <title> On the structure of all minimum cuts in a network and applications. </title> <journal> Mathematical Programming Study, </journal> <volume> 13 </volume> <pages> 8-16, </pages> <year> 1980. </year>
Reference-contexts: This generalizes Padberg and Rao's characterization of a minimum T -cut in terms of the Gomory-Hu tree [16], since T -cuts correspond to a proper function. Next we combine the Gomory-Hu tree with the representation of Picard and Queyranne for all minimum (s; t) cuts of a network <ref> [17] </ref>. This allows efficient identification of the active sets. Combining these two ideas has been previously suggested by Gusfield and Naor [11]. We gain further efficiency by showing that the special structure of SNDP allows faster location of the active sets in the representation. <p> We use the compact representation of all (s; t) mincuts due to Picard and Queyranne <ref> [17] </ref>.
Reference: [18] <author> R. Ravi and P. Klein. </author> <title> Approximation through uncrossing. </title> <type> Unpublished manuscript, </type> <year> 1992. </year>
Reference-contexts: Using similar logic, given a f0; 1g proper function, our theorem shows that the minimum cut over all S such that f (S) = 1 is among the cuts of the Gomory-Hu tree (using the function M f ). Ravi and Klein <ref> [18] </ref> independently showed that Padberg and Rao's result could be generalized to proper functions f with range f0; 1g. We now describe how to check whether a set of edges generated by the main algorithm is a feasible solution for (IP ) with a given proper function.
Reference: [19] <author> D. P. Williamson. </author> <title> On the design of approximation algorithms for a class of graph problems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> September </month> <year> 1993. </year> <note> Also appears as Tech Report MIT/LCS/TR-584. </note>
Reference-contexts: Since proper functions f are symmetric, the uncrossable function used in phase p is always symmetric. Details about using Uncrossable with functions that are not symmetric can be found in Williamson <ref> [19] </ref>; some proofs and arguments are slightly different. As discussed in the introduction, the algorithm Uncrossable has two steps. The first step produces a set of edges F and consists of a number of iterations, each iteration consisting of an edge selection and edge addition step. <p> Furthermore, they show that their algorithm can be implemented by making small modifications to our implementations, yielding a 2H (f max )-approximation algorithm with the same running times as our algorithm above. This entire line of research has been summarized in the thesis of Williamson <ref> [19] </ref>. Efficient Approximation Algorithm for the SNDP 24 Acknowledgments We are grateful to an anonymous referee for many useful comments. The third author would like to thank David Johnson and AT&T for inviting him to spend the summer of 1992 at Bell Labs.
Reference: [20] <author> D. P. Williamson, M. X. Goemans, M. Mihail, and V. V. Vazirani. </author> <title> A primal-dual approximation algorithm for generalized Steiner network problems. </title> <journal> Combinatorica, </journal> <volume> 15 </volume> <pages> 435-454, </pages> <year> 1995. </year>
Reference-contexts: If in addition the heuristic runs in polynomial time it is called an (ff)-approximation algorithm. The first approximation algorithm for the general SNDP was developed by Williamson, Goe-mans, Mihail, and Vazirani <ref> [20] </ref>. Before this no approximation algorithm was known even for the case r ij = min (r i ; r j ), r i 2 f0; 1; 2g. The previously known special-case SNDP approximation algorithms are listed in Table 1. <p> This version of the problem, however, appears to be easier to approximate. This paper presents an improved version of the approximation algorithm of <ref> [20] </ref>. Both algorithms apply to a family of integer programs defined by proper functions f. <p> SNDP is given by the proper function f (S) = max i2S;j =2S r ij . The algorithms of Williamson et al. <ref> [20] </ref> and this paper both achieve this result: Efficient Approximation Algorithm for the SNDP 3 Theorem 1.1 If the proper function f takes only l non-zero distinct values 0 = 0 &lt; 1 &lt; 2 &lt; : : : &lt; l , then there is an approximation algorithm for (IP ) <p> The main result of this paper is an algorithm that achieves the accuracy of Theorem 1.1 efficiently: the time bound of Williamson et al. <ref> [20] </ref> for SNDP, O (f 3 max n 4 ), is improved to O (f 2 max n 2 + f max n 2 p To state our specific contributions, we first briefly sketch the approximation algorithm. It proceeds in f max phases. <p> Williamson et al. <ref> [20] </ref> showed how to find such a solution if the function h is uncrossable; i.e., if h (A) = h (B) = 1, then either h (A B) = h (B A) = 1, or h (A [ B) = h (A " B) = 1. <p> The second step of the algorithm is a "clean-up step." It removes certain unnecessary edges from F . We introduce an alternate algorithm to find low-cost solutions to (IP h ) for uncrossable functions. The algorithms of Williamson et al. <ref> [20] </ref> and this paper use the same procedure for the first step to initialize F , but differ in the clean-up step. The clean-up step is crucial, as no finite performance guarantee can be achieved without a clean-up step. <p> For example, on the shortest s-t path problem their algorithm emulates Dijkstra's algorithm, and the edges of the shortest path tree not on the s-t path must be removed to guarantee low cost. In <ref> [20] </ref> both steps of the algorithm use the same amount of time. The clean-up step is the bottleneck against speeding this up; it checks the feasibility of O (n) edge sets. We circumvent this problem by giving a combinatorial characterization of a set of edges which may be safely removed. <p> There are several new ideas. To decide which edges to add to F requires identifying certain "active sets." The high-level algorithm does not indicate how to do this in polynomial time. Williamson et al. <ref> [20] </ref> show how to find the active sets by solving O (n 2 ) network flow problems. We identify active sets more efficiently using two ideas from flow theory. First we show the Gomory-Hu cut tree gives a characterization of a feasible solution to (IP ). <p> As the last ingredient in an efficient algorithm, we improve the implementation of the rule for selecting the next edge to add to F . This edge-choice rule (also used in <ref> [20] </ref>) is similar to the rule in the algorithm of Goemans and Williamson [8]. Goemans and Williamson present approximation algorithms for minimum-weight matching (with the triangle inequality), T -joins, Steiner trees and generalized Steiner trees, and a number of other problems. <p> (S)j = p 1 0 otherwise 5 E p E F p1 6 F 0 Uncrossable (V; E p ; c; h p ) 7 F p F p1 [ F 0 8 Comment: End phase p. 9 Output F f max proven to be uncrossable by Williamson et al. <ref> [20] </ref>. For the rest of this paper, we will assume that the uncrossable functions in Uncrossable are symmetric: that is, h (S) = h (V S) for all S V . Since proper functions f are symmetric, the uncrossable function used in phase p is always symmetric. <p> Note that in terms of our algorithm for proper functions, a set S is violated in the call to Uncrossable in phase p if jffi F p1 [F (S)j = p 1 and f (S) p. The violated sets have the following property, which was proven in <ref> [20] </ref>. Lemma 2.1 [Williamson et al. [20]] If A and B are violated sets at any point in Uncrossable, then either A " B and A [ B are violated or A B and B A are violated. <p> The violated sets have the following property, which was proven in <ref> [20] </ref>. Lemma 2.1 [Williamson et al. [20]] If A and B are violated sets at any point in Uncrossable, then either A " B and A [ B are violated or A B and B A are violated. Proof : Since A and B are violated, we know that h (A) = h (B) = 1. <p> But this contradicts the removal of e in the clean-up step. Efficient Approximation Algorithm for the SNDP 10 Efficient Approximation Algorithm for the SNDP 11 4 Proof of the Performance Guarantee Williamson et al. <ref> [20] </ref> show that the proof of the performance guarantee (Theorem 1.1) reduces to the proof of a particular inequality. We first explain how the inequality implies a performance guarantee (complete details are in [20]), then we show that our new clean-up step also implies the same inequality. <p> 10 Efficient Approximation Algorithm for the SNDP 11 4 Proof of the Performance Guarantee Williamson et al. <ref> [20] </ref> show that the proof of the performance guarantee (Theorem 1.1) reduces to the proof of a particular inequality. We first explain how the inequality implies a performance guarantee (complete details are in [20]), then we show that our new clean-up step also implies the same inequality. Let F 0 denote the edges returned by a call to Uncrossable. <p> We now describe how to check whether a set of edges generated by the main algorithm is a feasible solution for (IP ) with a given proper function. This subroutine was needed in the edge clean-up step of the algorithm of Williamson et al. <ref> [20] </ref>; they showed how to implement it using O (n 2 ) max-flow computations. We show how the test can be implemented in O (f max nm 0 + n) time.
Reference: [21] <author> A. Zelikovsky. </author> <title> An 11/6-approximation algorithm for the network Steiner problem. </title> <journal> Algorithmica, </journal> <volume> 9 </volume> <pages> 463-470, </pages> <year> 1993. </year>
Reference-contexts: NSF Graduate Fellowship, Air Force contract F49620-92-J-0125, DARPA contracts N00014-89-J-1988 and N00014-92-J-1799, and AT&T Bell Laboratories. 1 Efficient Approximation Algorithm for the SNDP 2 Problem requirements performance guarantee time reference Steiner tree r i 2 f0; 1g 2 O (n 2 ) Mehlhorn [15] 11/6 O (n 3:5 ) Zelikovsky <ref> [21] </ref> 16/9 O (n 5 ) Berman and Ramaiyer [2] Generalized Steiner tree r ij 2 f0; 1g 2 O (n 2 log n) Agrawal et al. [1] Goemans and Williamson [8] 2-edge connected subgraph r i = 2 3 O (n 2 ) Frederickson and Ja'Ja' [3] k-edge connected subgraph
References-found: 21

