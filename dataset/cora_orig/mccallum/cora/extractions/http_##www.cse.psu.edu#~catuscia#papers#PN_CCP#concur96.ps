URL: http://www.cse.psu.edu/~catuscia/papers/PN_CCP/concur96.ps
Refering-URL: http://www.cse.psu.edu/~catuscia/publications.html
Root-URL: http://www.cse.psu.edu
Email: Email: e.best@informatik.uni-hildesheim.de  Email: catuscia@disi.unige.it  
Title: Linear Constraint Systems as High-level Nets  
Author: Eike Best Catuscia Palamidessi 
Address: Hildesheim, Marienburger Platz 22, D-31141 Hildesheim, Germany.  Genova, Via Dodecaneso, 35, I-16146 Genova, Italy.  
Affiliation: Institut fur Informatik, Universitat  DISI, Universita di  
Abstract: Linear constraint systems are simple deductive systems based on the main underlying idea of linear logic: hypotheses represent physical resources which are consumed by the entailment relation. For such systems, we define back-and-forth translations into a class of high-level Petri nets. Using the specific properties of that class of nets, and previous results about the complexity of the reachability problem for such nets, we examine the complexity of the entailment problem for finitely generated linear constraint systems and we show that it is NP-complete. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Baumgarten: Petri-Netze. </author> <title> Grundlagen und Anwendungen. </title> <address> BI-Verlag, </address> <year> 1990. </year>
Reference-contexts: Hence apply the transitivity of ; fl . 3 High-level Petri nets Rather than use the full power of Pr/T-nets <ref> [1, 10] </ref>, colored nets [11] or algebraic nets [15, 19], we consider a somewhat restricted model: M-nets [2].
Reference: 2. <author> E. Best, H. Fleischhack, W. Fraczak, R.P. Hopkins, H. Klaudel and E. Pelz: </author> <title> A Class of Composable High Level Petri Nets. </title> <booktitle> Proc. of 16th ICPN, </booktitle> <publisher> LNCS Vol.935, Springer Verlag, </publisher> <pages> 103-120, </pages> <year> 1995. </year>
Reference-contexts: Hence apply the transitivity of ; fl . 3 High-level Petri nets Rather than use the full power of Pr/T-nets [1, 10], colored nets [11] or algebraic nets [15, 19], we consider a somewhat restricted model: M-nets <ref> [2] </ref>. Let x; y; z; : : : (letters near the end of the alphabet) be variables and let a; b; c; : : : (letters near the beginning of the alphabet) be values. A high-level net , for our present purpose, is a structure N = (S; T; ). <p> Proof By the set of assumptions, it is possible to construct the unfolding U (N ) of N in polynomial time. By standard high-level net theory <ref> [2, 11] </ref>, M 0 is reachable from M in N iff the unfolded marking U (M 0 ) is reachable from U (M ) in U (N ). The result follows immediately from Proposition 8. 4 Linear constraint systems and high-level nets This section has two parts.
Reference: 3. <author> F.S. de Boer and C. Palamidessi: </author> <title> Embedding as a Tool for Language Comparison. </title> <booktitle> Information and Computation 108(1) </booktitle> <pages> 128-157, </pages> <year> 1994. </year>
Reference-contexts: It is relatively easy to prove that the first mechanism leads to a concurrent paradigm which is strictly more expressive <ref> [3] </ref>. Intuitively this is because the atomic tell is a test-and-set action, which cannot be simulated by test (ask) and set (eventual tell) separately. On the other hand, the particular kind of test-and-set performed by the atomic tell is not very suitable for distributed systems.
Reference: 4. <author> F.S. de Boer, C. Palamidessi and E. </author> <title> Best: Concurrent Constraint Programming with Information Removal. </title> <booktitle> Proc. First Intl. Workshop on Concurrent Constraint Programming, Venice, </booktitle> <pages> 1-13, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: On the other hand, the particular kind of test-and-set performed by the atomic tell is not very suitable for distributed systems. In fact the test for consistency depends on the global content of the store, hence only one such action can be performed at a time. In <ref> [4] </ref> we have proposed a concurrent constraint paradigm aimed to combine expressiveness and parallelism. The idea is to allow a test-and-set action (get) which tests (part of) the store for entailment, like the ask, but, when successful, it removes from the store the entailing information. <p> Linear constraint systems are simple deduction systems which are to linear logic as constraint systems are to classical logic. Technically, the main difference is that an element (of a system) is defined as a multiset of constraints, instead than a set. The following example, from <ref> [4] </ref>, illustrates the main idea. Example 1. Let available (x) denote the situation in which the theater place number x is available, and let mpc (y) denote the fact that Mr. y makes a phone call to reserve a theater place. <p> We illustrate now the notion of linear constraint system, as defined in <ref> [4] </ref>. For the sake of simplicity, we do not consider here the mechanism of variable instantiation (or else we assume that the basic entailment relation is closed under variable instantiation). In Section 6 we discuss this mechanism. <p> In the following, M (X) and M f (X) stand for the set of multisets and for the set of finite multisets of a set X, respectively; is the multiset sum, is the multiset difference. We refer to the appendix for the formal definition of these notions. Definition 2. <ref> [4] </ref> A basic linear constraint system is a pair hB; ` B i where B is a set of basic constraints and the basic entailment relation ` B M f (B) fi B satisfies: (i) fcg ` B c, (ii) if 1 ` B c 1 ; : : : ;
Reference: 5. <author> C. Brown and D. Gurr: </author> <title> A Categorical Linear Framework for Petri Nets. </title> <booktitle> Proc. Fifth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, </address> <publisher> IEEE Comput. Soc. Press, </publisher> <pages> 208-218, </pages> <year> 1990. </year>
Reference-contexts: We attack the problem by using the formalism of Petri nets, which are particularly convenient for our purposes, since they represent a natural model of distributed computation, and complexity questions about them have been extensively investigated. Moreover, the relationship between linear logic and Petri nets has been investigated in <ref> [5, 8] </ref>, albeit not focussing on constraint systems. The main idea is to regard constraints as tokens, and entailment as transitions. A similar interpretation was considered also in [13], where it was shown that (standard) constraint systems can be naturally modeled as Contextual Nets.
Reference: 6. <author> N. Carriero and D. Gelernter: </author> <title> Linda in Context. </title> <journal> Comm. ACM 32(4) </journal> <pages> 445-458, </pages> <year> 1989. </year>
Reference-contexts: This is similar to the interaction ? This work is supported by the HCM project EXPRESS. mechanism used in Linda <ref> [12, 6] </ref>, where the store is seen as a blackboard in which agents add and remove information. However, in Linda there is no structure on the information, i.e. the tokens of information are essentially unrelated (apart from the relation given by variable instantiation).
Reference: 7. <author> S. Christensen, Y. Hirshfeld and F. Moller: </author> <title> Bisimulation Equivalence is Decidable for Basic Parallel Processes. </title> <booktitle> Proc. </booktitle> <address> CONCUR'93, </address> <publisher> LNCS Vol.715, Springer Verlag, </publisher> <pages> 143-175, </pages> <year> 1993. </year>
Reference-contexts: 2 T , s2S W (t; s) = 1 and T-in-sequential if for all t 2 T , P T-out-sequential nets are the class of interest in connection with linear constraint programming while T-in-sequential nets are the class of nets used for translating BPP (Basic Parallel Processes) of process algebra <ref> [7, 9] </ref>. Proposition 8. The problem REACH-1: Given a finite T-out-sequential place/transition net N and two markings M and M 0 of N , is M 0 reachable from M ? is NP-complete.
Reference: 8. <author> U. Engberg and G. Winskel: </author> <title> Petri Nets as Models of Linear Logic. </title> <booktitle> Proc. 15th Colloquium on Trees in Algebra and Programming, </booktitle> <publisher> LNCS Vol.431, Springer-Verlag, </publisher> <pages> 147-161, </pages> <year> 1990. </year>
Reference-contexts: We attack the problem by using the formalism of Petri nets, which are particularly convenient for our purposes, since they represent a natural model of distributed computation, and complexity questions about them have been extensively investigated. Moreover, the relationship between linear logic and Petri nets has been investigated in <ref> [5, 8] </ref>, albeit not focussing on constraint systems. The main idea is to regard constraints as tokens, and entailment as transitions. A similar interpretation was considered also in [13], where it was shown that (standard) constraint systems can be naturally modeled as Contextual Nets.
Reference: 9. <author> J. Esparza: </author> <title> Petri Nets, Commutative Context-free Grammars and Basic Parallel Processes. </title> <booktitle> Proc. </booktitle> <address> FCT'95, </address> <publisher> LNCS Vol.965, Springer Verlag, </publisher> <pages> 221-232, </pages> <year> 1995. </year>
Reference-contexts: 2 T , s2S W (t; s) = 1 and T-in-sequential if for all t 2 T , P T-out-sequential nets are the class of interest in connection with linear constraint programming while T-in-sequential nets are the class of nets used for translating BPP (Basic Parallel Processes) of process algebra <ref> [7, 9] </ref>. Proposition 8. The problem REACH-1: Given a finite T-out-sequential place/transition net N and two markings M and M 0 of N , is M 0 reachable from M ? is NP-complete. <p> From the transition rule of place/transition nets [14] it follows that M 0 is reachable from M in N iff M is reachable from M 0 in N 0 . Moreover, N 0 is a T-in-sequential net. Reachability in T-in-sequential nets has been shown to be NP-complete in <ref> [9] </ref>. The NP-completeness of REACH-1 follows immediately. The definition of being T-out-sequential can be lifted to high-level nets. Let N = (S; T; ) be a high-level net.
Reference: 10. <author> H.J. Genrich: </author> <title> Predicate-transition Nets. In Petri Nets: Central Models and their Properties, </title> <publisher> LNCS Vol.254, Springer-Verlag, </publisher> <pages> 207-247, </pages> <year> 1987. </year>
Reference-contexts: Hence apply the transitivity of ; fl . 3 High-level Petri nets Rather than use the full power of Pr/T-nets <ref> [1, 10] </ref>, colored nets [11] or algebraic nets [15, 19], we consider a somewhat restricted model: M-nets [2].
Reference: 11. <author> K. Jensen: </author> <title> Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical Use. </title> <booktitle> Volume 1. EATCS Monographs on Theoretical Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: Hence apply the transitivity of ; fl . 3 High-level Petri nets Rather than use the full power of Pr/T-nets [1, 10], colored nets <ref> [11] </ref> or algebraic nets [15, 19], we consider a somewhat restricted model: M-nets [2]. Let x; y; z; : : : (letters near the end of the alphabet) be variables and let a; b; c; : : : (letters near the beginning of the alphabet) be values. <p> Proof By the set of assumptions, it is possible to construct the unfolding U (N ) of N in polynomial time. By standard high-level net theory <ref> [2, 11] </ref>, M 0 is reachable from M in N iff the unfolded marking U (M 0 ) is reachable from U (M ) in U (N ). The result follows immediately from Proposition 8. 4 Linear constraint systems and high-level nets This section has two parts.
Reference: 12. <author> D. Gelernter: </author> <title> Generative Communication in Linda. </title> <journal> ACM TOPLAS 7(1) </journal> <pages> 80-112, </pages> <year> 1985. </year>
Reference-contexts: This is similar to the interaction ? This work is supported by the HCM project EXPRESS. mechanism used in Linda <ref> [12, 6] </ref>, where the store is seen as a blackboard in which agents add and remove information. However, in Linda there is no structure on the information, i.e. the tokens of information are essentially unrelated (apart from the relation given by variable instantiation).
Reference: 13. <author> U. Montanari and F. Rossi: </author> <title> Concurrent Semantics for Concurrent Constraint Programming via Contextual Nets. </title> <editor> In V. Saraswat and P. Van Entenryck (eds) Constraint Programming. </editor> <publisher> The MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Moreover, the relationship between linear logic and Petri nets has been investigated in [5, 8], albeit not focussing on constraint systems. The main idea is to regard constraints as tokens, and entailment as transitions. A similar interpretation was considered also in <ref> [13] </ref>, where it was shown that (standard) constraint systems can be naturally modeled as Contextual Nets.
Reference: 14. <author> W. Reisig: </author> <title> Petri Nets. An Introduction. </title> <note> EATCS Monographs on Theoretical Computer Science Vol. 4, Springer-Verlag (1985). </note>
Reference-contexts: Proof Let N 0 =(S; T; W 0 ) be the reverse of N =(S; T; W ), i.e. W 0 (t; s)=W (s; t) and W 0 (s; t)=W (t; s) for all s2S and t2T . From the transition rule of place/transition nets <ref> [14] </ref> it follows that M 0 is reachable from M in N iff M is reachable from M 0 in N 0 . Moreover, N 0 is a T-in-sequential net. Reachability in T-in-sequential nets has been shown to be NP-complete in [9]. The NP-completeness of REACH-1 follows immediately.
Reference: 15. <author> W. Reisig: </author> <title> Petri Nets and Algebraic Specifications. </title> <booktitle> Theoretical Computer Science 80, </booktitle> <pages> 1-34, </pages> <year> 1991. </year>
Reference-contexts: Hence apply the transitivity of ; fl . 3 High-level Petri nets Rather than use the full power of Pr/T-nets [1, 10], colored nets [11] or algebraic nets <ref> [15, 19] </ref>, we consider a somewhat restricted model: M-nets [2]. Let x; y; z; : : : (letters near the end of the alphabet) be variables and let a; b; c; : : : (letters near the beginning of the alphabet) be values.
Reference: 16. <author> V.A. Saraswat and M. Rinard: </author> <title> Concurrent Constraint Programming. </title> <booktitle> Proc. seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> 232-245, </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Constraint programming is one of the most successful paradigms for processing declarative information. One of the reasons of its success is that it leads quite naturally to a model for concurrency, as shown in <ref> [16, 17] </ref>. In this model, agents interact via a shared store containing all the information generated by the system. The basic communication actions are the tell, which updates the store by adding new information (i.e. a new constraint), and the ask, which tests whether the store entails a certain constraint.
Reference: 17. <author> V.A. Saraswat, M. Rinard, and P. Panangaden: </author> <title> Semantics Foundations of Concurrent Constraint Programming. </title> <booktitle> Proc. eighteenth ACM Symposium on Principles of Programming Languages, ACM, </booktitle> <address> New York, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Constraint programming is one of the most successful paradigms for processing declarative information. One of the reasons of its success is that it leads quite naturally to a model for concurrency, as shown in <ref> [16, 17] </ref>. In this model, agents interact via a shared store containing all the information generated by the system. The basic communication actions are the tell, which updates the store by adding new information (i.e. a new constraint), and the ask, which tests whether the store entails a certain constraint. <p> Actually in literature this notion has been formalized in various ways, which differ for degree of abstraction. We illustrate here the notion of Saraswat, Rinard and Panangaden <ref> [17] </ref>, which is the most abstract we know of, and which is closely related to the notion of information system by Scott [18]. Definition 1. [17] A basic constraint system is a pair hB; ` B i where B is a set of basic constraints, c, d : : : , <p> We illustrate here the notion of Saraswat, Rinard and Panangaden <ref> [17] </ref>, which is the most abstract we know of, and which is closely related to the notion of information system by Scott [18]. Definition 1. [17] A basic constraint system is a pair hB; ` B i where B is a set of basic constraints, c, d : : : , and the basic entailment relation ` B P f (B) fi B (where P f (B) is the set of the finite subsets of B) <p> Conjunction corresponds to the join operator. In other words, this construction can be considered (limited to the algebraic part) as a subset of the classical propositional calculus, subset in the sense that certain operators, like disjunction and negation, are usually not expressible. In <ref> [17] </ref> this construction is further enriched with the addition of logical variables and (a weak form of) existential quantifier. This is done by means of cyl-indrification operators and diagonal elements, and by imposing (some of) the axioms of cylindrical algebras.
Reference: 18. <author> D. Scott: </author> <title> Domains for Denotational Semantics. </title> <booktitle> Proc. ICALP, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1982. </year>
Reference-contexts: Actually in literature this notion has been formalized in various ways, which differ for degree of abstraction. We illustrate here the notion of Saraswat, Rinard and Panangaden [17], which is the most abstract we know of, and which is closely related to the notion of information system by Scott <ref> [18] </ref>.
Reference: 19. <author> J. Vautherin: </author> <title> Parallel Systems Specification with Colored Petri Nets and Algebraic Specification. </title> <publisher> LNCS Vol. 266, Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Hence apply the transitivity of ; fl . 3 High-level Petri nets Rather than use the full power of Pr/T-nets [1, 10], colored nets [11] or algebraic nets <ref> [15, 19] </ref>, we consider a somewhat restricted model: M-nets [2]. Let x; y; z; : : : (letters near the end of the alphabet) be variables and let a; b; c; : : : (letters near the beginning of the alphabet) be values.
References-found: 19

