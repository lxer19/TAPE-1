URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-035.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: An Extensible Knowledge Base Management System for Supporting Rule-based Interoperability among Heterogeneous Systems  
Author: Stanley Y. W. Su, Herman Lam, Javier Arroyo-Figueroa, Tsae-Feng Yu and Zhidong Yang 
Date: November 28 December 2, 1995.  
Address: Baltimore, MD,  
Affiliation: Information and Knowledge Management),  Database Systems Research and Development Center University of Florida  
Note: Invited paper to be presented in CIKM (Conference on  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Ahmed, et al., </author> <title> "The Pegasus Heterogeneous Multi-database System," </title> <journal> IEEE Computer, </journal> <volume> 24 </volume> <pages> 19-27, </pages> <year> 1991. </year>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [2] <author> A. Alashqur, S. Y. W. Su and H. Lam, </author> <title> "OQL- A Query Language for Manipulating Object-oriented Databases", </title> <booktitle> in Proc. of 15th Int. Conf. Very Large Databases, Ams-terdam, Netherlands, </booktitle> <pages> pp. 433-442, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Software and human clients can access the contents of a knowledge base by issuing queries to the KBMS either through the Query Tool or from executable code. An object-oriented query language (OQL <ref> [2] </ref>) is used for this purpose. The Query Processor of the KBMS is invoked to parse and process the queries to access the knowledge base. (2) Request Monitoring Service. <p> This condition is an object pattern specification posted in an object-oriented query language OQL <ref> [2] </ref>. It verifies if there exists an X object instance which is associated with some object instance of B (* is the association operator) but is not associated with any object instance of C (! is the non-association operator).
Reference: [3] <author> M. Andersson, Y. Dupont, S. Spaccapietra, K. Yetongnon, M. Tresch, and H. Ye, "FEMUS: </author> <title> A Fed erated Multilingual Database System", Chapter 18 in Advanced Database Systems, </title> <editor> N. Adams and Bhargava, R. (Eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 359-380. </pages>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [4] <author> J. A. Arroyo-Figueroa, </author> <title> "The Design and Implementation of K.1: A Third Generation Database Programming Language," </title> <type> Technical Report, </type> <institution> Database Systems R&D Center, University of Florida, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: The KBMS provides an information modeling language called the NIIIP Common language (NCL [28]). This language is an integration of STEP' EXPRESS [14], OMG's IDL [21] and OSAM*.KBMS' K.3 programming language. The latter is the third version of an implemented language K reported in <ref> [4, 23, 24] </ref>. The implementation of NCL is based on a trans lation to K.3 and its processing is supported by the KBMS. NCL allows all things of interest to a virtual enterprise to be modeled as objects.
Reference: [5] <author> R. N. Bershad, D. T. Ching, E. D. Lazowska, J. Sanislo, and M. Schwartz, </author> <title> "A Remote Procedure Call Facility for Interconnecting Heterogeneous Computer Systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(8), </volume> <month> August </month> <year> 1987. </year>
Reference-contexts: Some good examples of these efforts can be found in <ref> [5, 7, 11, 12, 30, 31] </ref>. Our work is closely related to these works.
Reference: [6] <author> E. Bertino, </author> <title> "Integration of Heterogeneous data Repositories by Using Object-oriented Views," </title> <booktitle> Proceedings of the 1st International Workshop on Interoperability in Multidatabase Systems, </booktitle> <address> Kyoto, Japan, </address> <month> April </month> <year> 1991, </year> <pages> pp. 22-29. </pages>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [7] <author> P. Drew, R. King, and J. Bein, </author> <title> "A la Carte: An Extensible Framework for the Tailorable Construction of Heterogeneous Object Stores," in Implementing Persistent Object Bases: </title> <booktitle> Principles and Practice, The Fourth International Workshop on Persistent Object Systems, </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher> <year> 1990. </year>
Reference-contexts: Some good examples of these efforts can be found in <ref> [5, 7, 11, 12, 30, 31] </ref>. Our work is closely related to these works.
Reference: [8] <author> T. Finin, R. Fritzson and D. McKay, </author> <title> "A Language and Protocol to Support Intelligent Agent Interoperability," </title> <booktitle> appeared in the Proceedings of the CE & CALS Wash-ington `92 Conference, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: At run-time, the human and software clients would make use of the conceptual views defined over the global schema to issue all their object service requests. Service requests can be issued as remote methods calls, or as query statements in some query language. Higher-level languages such as KQML <ref> [8, 9, 10, 16] </ref> or a natural language can also be used. Alternatively, a graphical user-interface or a hypermedia facility can also be used to specify clients requests.
Reference: [9] <author> T. Finin, D. McKay, R. Fritzson, and R. McEntire, </author> <title> "KQML: An Information and Knowledge Exchange Protocol," </title> <editor> in Kazuhiro Fuchi and Toshio Yokoi (Ed.), </editor> <title> Knowledge Building and Knowledge Sharing , Ohmsha and IOS Press, </title> <year> 1994. </year>
Reference-contexts: At run-time, the human and software clients would make use of the conceptual views defined over the global schema to issue all their object service requests. Service requests can be issued as remote methods calls, or as query statements in some query language. Higher-level languages such as KQML <ref> [8, 9, 10, 16] </ref> or a natural language can also be used. Alternatively, a graphical user-interface or a hypermedia facility can also be used to specify clients requests.
Reference: [10] <author> T. Finin, R. Fritzson, D. McKay and R. McEntire, </author> <title> "KQML as an Agent Communication Language," </title> <booktitle> to appear in The Proceedings of the Third International Conference on Information and Knowledge Management (CIKM'94), </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: At run-time, the human and software clients would make use of the conceptual views defined over the global schema to issue all their object service requests. Service requests can be issued as remote methods calls, or as query statements in some query language. Higher-level languages such as KQML <ref> [8, 9, 10, 16] </ref> or a natural language can also be used. Alternatively, a graphical user-interface or a hypermedia facility can also be used to specify clients requests.
Reference: [11] <author> J. Franchitti and R. King, "Amalgame: </author> <title> A Tool for Creating Interoperating, Persistent, Heterogeneous Components," Chapter 16 in Advanced Database Systems, </title> <editor> N. Adams and Bhargava, R. (Eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 313-336. </pages>
Reference-contexts: Some good examples of these efforts can be found in <ref> [5, 7, 11, 12, 30, 31] </ref>. Our work is closely related to these works.
Reference: [12] <author> D. Heimbigner and D. McLeod, </author> <title> "A Federated Architecture for Information Systems," </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 3(3) </volume> <pages> 253-278, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Some good examples of these efforts can be found in <ref> [5, 7, 11, 12, 30, 31] </ref>. Our work is closely related to these works.
Reference: [13] <author> D. K. Hsiao, </author> <title> "Federated Databases and Systems (Parts I and II): A Tutorial on Their Resource Consolidation," </title> <journal> VLDB Journal, </journal> <volume> Vol. 1, No. 1&2, </volume> <month> July and Oct. </month> <year> 1992. </year>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [14] <author> Subcommittee 4 of ISO Technical Committee 184, </author> <title> "Product Data Representation and Exchange Part 11: The EXPRESS Language Reference Manual," ISO Document, </title> <type> ISO DIS 10303-11, </type> <month> August </month> <year> 1992. </year>
Reference-contexts: The KBMS provides an information modeling language called the NIIIP Common language (NCL [28]). This language is an integration of STEP' EXPRESS <ref> [14] </ref>, OMG's IDL [21] and OSAM*.KBMS' K.3 programming language. The latter is the third version of an implemented language K reported in [4, 23, 24]. The implementation of NCL is based on a trans lation to K.3 and its processing is supported by the KBMS.
Reference: [15] <author> W. Kim, et al., </author> <title> "On Resolving Schematic Heterogeneity in Multidatabase Systems," </title> <booktitle> in Distributed and Parallel Databases, </booktitle> <volume> 1 </volume> <pages> 251-279, </pages> <year> 1993. </year>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [16] <author> Y. Labrou and T. Finin, </author> <title> "A semantics approach for KQML a general purpose communication language for software agents," </title> <booktitle> to appear in the Third International Conference on Information and Knowledge Management (CIKM'94), </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: At run-time, the human and software clients would make use of the conceptual views defined over the global schema to issue all their object service requests. Service requests can be issued as remote methods calls, or as query statements in some query language. Higher-level languages such as KQML <ref> [8, 9, 10, 16] </ref> or a natural language can also be used. Alternatively, a graphical user-interface or a hypermedia facility can also be used to specify clients requests.
Reference: [17] <author> H. Lam, S. Y. W. Su, et al., "GTOOLS: </author> <title> An Active GUI Toolset for an Object-oriented KBMS," </title> <journal> International Journal of Computer System Science and Engineering, </journal> <volume> Vol.7,No.2,pp. </volume> <pages> 69-85, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Shown in Figure 3 is the architecture of the knowledge base management system, OSAM*.KBMS [25, 26, 27], and a number of supporting tools. A set of graphical tools called XGTOOLS (its earlier version was described in <ref> [17] </ref>) can be used to graphically define, edit, and browse schemas at build-time and to query the schemas against their instances stored in the knowledge bases at run-time. The KBMS provides an information modeling language called the NIIIP Common language (NCL [28]).
Reference: [18] <author> H. Lam, S. Y. W. Su, et al., </author> <title> "Model Extensibility in an Extensible Knowledgebase Management System," </title> <journal> submitted to IEEE Transactions on Knowledge and Data Engineering. </journal>
Reference-contexts: As a result, the operational behaviors of the KBMS is automatically extended and/or modified. A detailed description of the concept and technique of model, language and KBMS extensibilities is out of the scope of this paper. Interested readers are referred to our technical reports <ref> [18, 28] </ref>. The KBMS provides two general types of services: build-time and run-time services.
Reference: [19] <author> W. Litwin, L. Mark, and N. Roussopoulos, </author> <title> "Interoperability of Multiple Autonomous Databases," </title> <journal> ACM Computing Surveys, </journal> <volume> 22 </volume> <pages> 267-293, </pages> <year> 1990. </year>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [20] <author> NIIIP Consortium, </author> <title> "NIIIP Reference Architecture: Concepts and Guidelines," </title> <note> NIIIP Publication NTR95-01, </note> <month> Jan 1, </month> <year> 1995. </year>
Reference-contexts: The consortium is building its technology by integrating a number of existing technologies; namely, the communication technology, the information technology, the object technology, and the workflow and knowledge management technology <ref> [20] </ref>. The knowlege base management technology presented in this paper is a part of the University of Florida's contributions to the NIIIP Consortium's R&D effort. <p> Those functionalities of the systems and their data which are useful to the virtual enterprise are exposed to other systems as objects having well-defined interfaces. For additional information on the NIIIP project and the NIIIP system architecture, please refer to <ref> [20] </ref>. 2.2 VE Modeling Requirements In order for a virtual enterprise to represent, manage, and control the use of the shared, distributed, and heterogeneous resources, it is necessary to define the computational models of these resources and their inter-relationships by using an information modeling facility.
Reference: [21] <author> OMG Committee, </author> <title> "The Common Object Request Broker: Architecture and Specification," OMG Document, </title> <journal> Revision 1.1, </journal> <volume> No. 91.12.1, </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: It is based on the Common Object Request Broker Architecture (CORBA) <ref> [21] </ref> introduced by the Object Management Group (OMG). The main goal of NIIIP is to provide an infrastructure to support the formation and operation of an industrial virtual enterprise (VE). An industrial virtual enterprise is formed by a group of organizations to design, manufacture, and distribute products. <p> The KBMS provides an information modeling language called the NIIIP Common language (NCL [28]). This language is an integration of STEP' EXPRESS [14], OMG's IDL <ref> [21] </ref> and OSAM*.KBMS' K.3 programming language. The latter is the third version of an implemented language K reported in [4, 23, 24]. The implementation of NCL is based on a trans lation to K.3 and its processing is supported by the KBMS. <p> We shall focus on this application of the KBMS technology in this section. 4.1 Conventional CORBA Environment As described in Section 2.1, the NIIIP system architecture is based on the Common Object Request Broker Architecture (CORBA) <ref> [21] </ref> introduced by the Object Management Group (OMG). In the conventional CORBA environment, the specification of a service is separated into an interface part and an implementation part. The interfaces of all the object services are defined in a standard Interface Definition Language (IDL) [21] and are translated into program language <p> Common Object Request Broker Architecture (CORBA) <ref> [21] </ref> introduced by the Object Management Group (OMG). In the conventional CORBA environment, the specification of a service is separated into an interface part and an implementation part. The interfaces of all the object services are defined in a standard Interface Definition Language (IDL) [21] and are translated into program language bindings (e.g., C++/C stubs and skeletons). The implementation of these systems can be in any programming language in which there is a language binding supported by the IDL compiler.
Reference: [22] <author> A. Sheth, and J. Larson, </author> <title> "Federated Database Systems for Managing Distributed, Heterogeneous, and Autonomous Databases," </title> <booktitle> ACM Survey, 2(3), Sept. </booktitle> <volume> 1 990, </volume> <pages> pp. 183-236. </pages>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [23] <author> Y. M. Shyy, S. Y. W. Su, </author> <title> "K: High-level Knowledge Base Programming Language for Advanced Database Applications", </title> <booktitle> ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <pages> pp. 338-347, </pages> <year> 1991. </year>
Reference-contexts: The KBMS provides an information modeling language called the NIIIP Common language (NCL [28]). This language is an integration of STEP' EXPRESS [14], OMG's IDL [21] and OSAM*.KBMS' K.3 programming language. The latter is the third version of an implemented language K reported in <ref> [4, 23, 24] </ref>. The implementation of NCL is based on a trans lation to K.3 and its processing is supported by the KBMS. NCL allows all things of interest to a virtual enterprise to be modeled as objects.
Reference: [24] <author> Y.M. Shyy, J. Arroyo-Figueroa, S. Y. W. Su, and H. Lam, </author> <title> "The Design and Implementation of K: A High-level Knowledge Base Programming Language of OSAM*.KBMS," </title> <note> accepted for publication in the VLDB Journal, </note> <year> 1995. </year>
Reference-contexts: The KBMS provides an information modeling language called the NIIIP Common language (NCL [28]). This language is an integration of STEP' EXPRESS [14], OMG's IDL [21] and OSAM*.KBMS' K.3 programming language. The latter is the third version of an implemented language K reported in <ref> [4, 23, 24] </ref>. The implementation of NCL is based on a trans lation to K.3 and its processing is supported by the KBMS. NCL allows all things of interest to a virtual enterprise to be modeled as objects.
Reference: [25] <author> S. Y. W. Su, V. Krishnamurthy and H. Lam, </author> <title> "An Object Oriented Semantic Association Model (OSAM*)," </title> <booktitle> AI in Industrial Engineering and Manufacturing: Theoretical Issues and Applications, </booktitle> <institution> American Institute of Industrial Engineering, </institution> <year> 1989. </year>
Reference-contexts: In Section 4, we shall describe how this KBMS technology is applied in the NIIIP project to provide rule-based interoperability. Shown in Figure 3 is the architecture of the knowledge base management system, OSAM*.KBMS <ref> [25, 26, 27] </ref>, and a number of supporting tools. A set of graphical tools called XGTOOLS (its earlier version was described in [17]) can be used to graphically define, edit, and browse schemas at build-time and to query the schemas against their instances stored in the knowledge bases at run-time.
Reference: [26] <author> S. Y. W. Su and H. Lam, </author> <title> "An Object-oriented Knowledge Base Management System for Supporting Advanced Applications," </title> <booktitle> Proc. of the 4th Int'l Hong Kong Computer Society Database Workshop, </booktitle> <pages> pp. 3-22, </pages> <address> Decem-ber 12-13, </address> <year> 1992. </year>
Reference-contexts: In Section 4, we shall describe how this KBMS technology is applied in the NIIIP project to provide rule-based interoperability. Shown in Figure 3 is the architecture of the knowledge base management system, OSAM*.KBMS <ref> [25, 26, 27] </ref>, and a number of supporting tools. A set of graphical tools called XGTOOLS (its earlier version was described in [17]) can be used to graphically define, edit, and browse schemas at build-time and to query the schemas against their instances stored in the knowledge bases at run-time.
Reference: [27] <author> S. Y. W. Su and H. Lam, et al., "OSAM*.KBMS: </author> <title> An Object-Oriented Knowledge-Base Management System for Supporting Advanced Applications", </title> <booktitle> Proc. of the 1993 ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <pages> pp. 540-541, </pages> <year> 1993. </year>
Reference-contexts: In Section 4, we shall describe how this KBMS technology is applied in the NIIIP project to provide rule-based interoperability. Shown in Figure 3 is the architecture of the knowledge base management system, OSAM*.KBMS <ref> [25, 26, 27] </ref>, and a number of supporting tools. A set of graphical tools called XGTOOLS (its earlier version was described in [17]) can be used to graphically define, edit, and browse schemas at build-time and to query the schemas against their instances stored in the knowledge bases at run-time.
Reference: [28] <author> S. Y. W. Su and H. Lam, et al. "NCL: </author> <title> A Common Language for Achieving Rule-Based Interoperability among Heterogeneous Systems", </title> <note> Submitted for publication Journal of Intelligent Information Systems, Special Issue, </note> <year> 1995. </year>
Reference-contexts: The interface to the services provided by each server is defined in a NIIIP Common Language (NCL) <ref> [28] </ref>, resulting in a number of "local schemas", as described in the next subsection. The modeling constructs of NCL allows each local schema to describe its services in terms of their data properties, associations, keyword constraints, rules, and methods. <p> If it evaluates to True, no action is taken. Otherwise, an error message is displayed and the operation is aborted. For additional information on the NCL language and NCL rules, please refer to <ref> [28] </ref>. Thus, the modeling of virtual enterprise resources in the NIIIP environment is not restricted to the modeling of structural properties provided by the traditional database management systems (DBMSs). Nor is it limited to the modeling of the structural and behavioral properties offered by the existing commercial object-oriented DBMSs. <p> The KBMS provides an information modeling language called the NIIIP Common language (NCL <ref> [28] </ref>). This language is an integration of STEP' EXPRESS [14], OMG's IDL [21] and OSAM*.KBMS' K.3 programming language. The latter is the third version of an implemented language K reported in [4, 23, 24]. <p> As a result, the operational behaviors of the KBMS is automatically extended and/or modified. A detailed description of the concept and technique of model, language and KBMS extensibilities is out of the scope of this paper. Interested readers are referred to our technical reports <ref> [18, 28] </ref>. The KBMS provides two general types of services: build-time and run-time services.
Reference: [29] <author> G. Thomas, et al., </author> <title> "Heterogeneous Distributed Database Systems for Production Use," </title> <journal> ACM Computing Survey, </journal> <volume> 22 </volume> <pages> 237-266, </pages> <year> 1990. </year>
Reference-contexts: In recent years, the data and knowledge engineering communities have been very active in researching and building systems for accessing data stored in distributed and heterogeneous database systems. These systems are called heterogeneous database management systems, multi-database systems, or federated database systems <ref> [1, 3, 6, 13, 15, 19, 22, 29] </ref> depending on the tightness of schema integration and the degree of local autonomy that is allowed. The emphasis of these existing systems is to achieve the sharing of data managed by heterogeneous database management systems (DBMSs).
Reference: [30] <author> G. Wiederhold, </author> <title> "Intelligent Integration of Informa--tion," </title> <booktitle> Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993, </year> <pages> pp. 434-437. </pages>
Reference-contexts: Some good examples of these efforts can be found in <ref> [5, 7, 11, 12, 30, 31] </ref>. Our work is closely related to these works.
Reference: [31] <author> J. C. Wileden, A. L. Wolf, W. R. Rosenblatt, P. L. Tarr, </author> <title> "Specification Level Interoperability," </title> <booktitle> Proceedings of the Twelfth International Conference on Software Engineering, </booktitle> <address> Nice, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Some good examples of these efforts can be found in <ref> [5, 7, 11, 12, 30, 31] </ref>. Our work is closely related to these works.
References-found: 31

