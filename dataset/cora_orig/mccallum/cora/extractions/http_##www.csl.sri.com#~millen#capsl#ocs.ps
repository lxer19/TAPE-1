URL: http://www.csl.sri.com/~millen/capsl/ocs.ps
Refering-URL: http://www.csl.sri.com/~millen/capsl/
Root-URL: 
Email: millen@csl.sri.com  
Title: CAPSL Semantics  
Author: Jonathan K. Millen 
Date: November 24, 1997  
Address: Menlo Park, CA  
Affiliation: SRI International  
Abstract-found: 0
Intro-found: 1
Reference: [AhUl79 ] <author> A. V. Aho and J. D. Ullman, </author> <title> Principles of Compiler Design, </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: In other words, we are using a syntax-directed trans 11 lation scheme to produce the interpretation, as described in many standard sources, e.g., <ref> [AhUl79] </ref>. In the context of a particular rule, we use the nonterminals in a rule as variables to refer to the parse tree whose root node they label.
Reference: [Carl94 ] <author> U. Carlsen, </author> <title> "Generating Formal Cryptographic Protocol Specifications," </title> <booktitle> 1994 IEEE Symposium on Research in Security and Privacy, IEEE Computer Society, </booktitle> <year> 1994, </year> <pages> 137-146. </pages>
Reference-contexts: The Lowe reference does not indicate how the compilation is done. The advantage of CAPSL is its extensibility via abstract data type specifications. 2 There was similar prior work by Carlsen <ref> [Carl94] </ref>, who could translate "Standard Notation" (SN) into a CKT5 logical specification of each principal. Unlike CAPSL, SN expresses only the message list, and Carlsen found it necessary to infer word types, initial conditions, and goals.
Reference: [Mill97 ] <author> J. K. Millen, "CAPSL: </author> <title> Common Authentication Protocol Specification Language," </title> <institution> MP-97B-48, The MITRE Corporation, Bedford, </institution> <address> MA, </address> <month> July </month> <year> 1997. </year> <note> Also available at the URL http://www.csl.sri.com/ ~millen/capsl/. </note>
Reference-contexts: The CAPSL activity was begun during the Isaac Newton Institute Pro-gramme on Computer Security, Cryptology, and Coding Theory, in early 1996. The design principles and the syntax of CAPSL appear in a report <ref> [Mill97] </ref> whose content is also posted on a Web site. A CAPSL specification describes an authentication protocol at an abstract level in which cryptographic operations are treated axiomatically. <p> For simplicity, we assume here that the message data is a term consisting of a single variable, which may be modified by a check or `%'. A list of terms, as permitted in <ref> [Mill97] </ref>, can be handled by concatenating the terms into a single con term, and generating a name and a denotes equation for it. The receiver will then need an action to extract the fields from the con.
Reference: [Lowe97 ] <author> G. Lowe, "Casper: </author> <title> A Compiler for the Analysis of Security Protocols," </title> <booktitle> 10th IEEE Computer Security Foundations Workshop, </booktitle> <month> June </month> <year> 1997, </year> <pages> 18-30. </pages>
Reference-contexts: Semantic models for cryptographic protocol analysis have been given in the context of belief-logic approaches, as discussed by Syverson [Syve92]. The present work is more closely related to that of Lowe, developer of Casper <ref> [Lowe97] </ref>, from which CSP process specifications are produced in a form suitable for the model-checking tool FDR. The Lowe reference does not indicate how the compilation is done.
Reference: [Syve92 ] <author> P. F. Syverson, </author> <title> "Knowledge, Belief, and Semantics in the Analysis of Cryptographic Protocols," </title> <journal> Journal of Computer Security, </journal> <volume> 1(3), </volume> <year> 1992, </year> <pages> 317-334. </pages>
Reference-contexts: In the proposed CAPSL semantic interpretation, each process is specified with a sequence of primitive operations that perform computations on protocol variables and send and receive messages. Semantic models for cryptographic protocol analysis have been given in the context of belief-logic approaches, as discussed by Syverson <ref> [Syve92] </ref>. The present work is more closely related to that of Lowe, developer of Casper [Lowe97], from which CSP process specifications are produced in a form suitable for the model-checking tool FDR. The Lowe reference does not indicate how the compilation is done.
Reference: [YaWu93 ] <author> A. F. Yasinsac and W.A. Wulf, </author> <title> "A Formal Semantics for Evaluating Cryptographic Protocols," </title> <editor> CS-93-53, U. </editor> <address> Virginia, </address> <year> 1993. </year>
Reference-contexts: In this spirit, the semantic interpretation is a sequential process description based on a small fixed vocabulary of operations (assign, compare, send, and receive) with the simplest possible semantics. A language CPAL with similar operational primitives was proposed by Yasinsac and Wulf <ref> [YaWu93] </ref>, but it was viewed as a specification language, without translation from a higher-level merged message-list form. 1.2 CAPSL Specifications A brief summary of the syntax and concepts of CAPSL specifications is given here.
References-found: 6

