URL: http://www.cs.princeton.edu/~funk/vrais96.ps.gz
Refering-URL: http://www.cs.princeton.edu/~funk/
Root-URL: http://www.cs.princeton.edu
Email: funk@research.att.com  
Title: Network Topologies for Scalable Multi-User Virtual Environments  
Author: Thomas A. Funkhouser 
Address: 600 Mountain Avenue, 2A-202 Murray Hill, NJ 07974  
Affiliation: Bell Laboratories  
Abstract: This paper investigates trade-offs of different network topologies and messaging protocols for multi-user-virtual environment systems. We present message distribution techniques appropriate for constructing scalable multi-user systems for a variety of network characteristics. Hierarchical system designs utilizing servers that manage message distribution for entities in separate regions of a virtual environment are described that scale to arbitrary numbers of simultaneous users. Experimental results show that the rate of messages processed by server workstations in this system design are less than using previously described approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Airey, John M., John H. Rohlf, and Frederick P. Brooks, Jr., </author> <title> Towards Image Realism with Interactive Update Rates in Complex Virtual Building Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <volume> 24, 2 (1990), </volume> <pages> 41-50. </pages>
Reference-contexts: Specifically, prior to the multi-user simulation, the shared virtual environment is partitioned into a spatial subdivision of cells whose boundaries are comprised of the static, axis-aligned polygons of the virtual environment <ref> [1, 14] </ref>. A visibility precomputation is performed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries [14, 15].
Reference: [2] <author> Blanchard, C., S. Gurgess, Y. Harvill, J. Lanier, A. Lasko, M. Oberman, and M. Teitel, </author> <title> Reality Built for Two: A Virtual Reality Tool. </title> <booktitle> ACM SIG-GRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <address> (Snowbird, Utah), </address> <year> 1990, </year> <pages> 35-36. </pages>
Reference-contexts: Between updates, surrogate behavior is simulated by every workstation. Multi-user virtual environment systems can be characterized by their approach to message distribution. For instance, Reality Built For Two <ref> [2] </ref>, VEOS [4], and MR Toolkit [12] are based on unicast peer-to-peer designs. A unicast message is sent to each of N-1 workstations whenever any entity in the distributed simulation changes state.
Reference: [3] <author> Blau, Brian, Charles E. Hughes, Michael J. Moshell, and Curtis Lisle, </author> <title> Networked Virtual Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <address> (Cambridge, MA), </address> <year> 1992, </year> <pages> 157-164. </pages>
Reference-contexts: This approach yields O (N 2 ) update messages during every simulation step, and thus does not scale to many simultaneous users before the network gets saturated. SIMNET [5] and VERN <ref> [3] </ref> are also peer-to-peer systems, but use broadcast messages to send updates to all other workstations participating in a virtual environment at once.
Reference: [4] <author> Bricken, William, </author> <title> and Geoffrey Coco The VEOS Project. </title> <type> Technical Report, </type> <institution> Human Interface Technology Laboratory, University of Washington, </institution> <year> 1993. </year>
Reference-contexts: Between updates, surrogate behavior is simulated by every workstation. Multi-user virtual environment systems can be characterized by their approach to message distribution. For instance, Reality Built For Two [2], VEOS <ref> [4] </ref>, and MR Toolkit [12] are based on unicast peer-to-peer designs. A unicast message is sent to each of N-1 workstations whenever any entity in the distributed simulation changes state. <p> During these experiments, clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. peating tile pattern of rooms connected by hallways. <p> During these experiments, clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. peating tile pattern of rooms connected by hallways. <p> During these experiments, clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. peating tile pattern of rooms connected by hallways. <p> During these experiments, clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type <ref> [4] </ref>, entity-ID [4], target-position [12], target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. peating tile pattern of rooms connected by hallways.
Reference: [5] <author> Calvin, James, Alan Dickens, Bob Gaines, Paul Metzger, Dale Miller, and Dan Owen, </author> <title> The SIM-NET Virtual World Architecture. </title> <booktitle> Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September, </month> <year> 1993, </year> <pages> 450-455. </pages>
Reference-contexts: A unicast message is sent to each of N-1 workstations whenever any entity in the distributed simulation changes state. This approach yields O (N 2 ) update messages during every simulation step, and thus does not scale to many simultaneous users before the network gets saturated. SIMNET <ref> [5] </ref> and VERN [3] are also peer-to-peer systems, but use broadcast messages to send updates to all other workstations participating in a virtual environment at once.
Reference: [6] <author> Carlsson, Christer, and Olof Hafsand, Dive: </author> <title> A Multi-User Virtual Reality System. </title> <booktitle> Proceedings of the IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September, </month> <year> 1993, </year> <pages> 394-401. </pages>
Reference-contexts: Since every workstation must store data and process update messages and/or simulate behavior for all N entities during every simulation step, these systems do not scale beyond the capabilities of the least powerful participating workstation. NPSNET [16] and DIVE <ref> [6] </ref> are peer-to-peer systems that use multicast to send update messages to a subset of participating workstations. The general idea is to map entity properties into multicast groups, and send update messages only to relevant groups.
Reference: [7] <author> Funkhouser, Thomas A., Carlo H. Sequin, and Seth J. Teller, </author> <title> Management of Large Amounts of Data in Interactive Building Walkthroughs. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <address> (Cambridge, MA), </address> <year> 1992, </year> <pages> 11-20. </pages>
Reference: [8] <author> Funkhouser, Thomas A. </author> <title> RING: A Client-Server System for Multi-User Virtual Environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1995 Symposium on Interactive 3D Graphics, </booktitle> <address> (Monterey, CA), </address> <year> 1995, </year> <pages> 85-92. </pages>
Reference-contexts: WAVES [9], BrickNet [13], and RING <ref> [8] </ref> are client-server systems. Communication between client workstations is managed by message servers. Clients do not send messages directly to other clients, but instead send them to servers which forward them to other clients and servers participating in the same distributed simulation. <p> These systems scale well to many simultaneous users with intelligent server message processing. The study presented in this paper is based on RING <ref> [8] </ref>. The initial version of RING used a "static" client-server design in which each client sent all its update messages to the same server. The system supported multiple inter-networked servers, but a single client was connected to the same server throughout its entire execution. <p> All designs employ message filters based on precomputed line-of-sight visibility information in order to localize visual interactions (as used in RING <ref> [8] </ref>). Specifically, prior to the multi-user simulation, the shared virtual environment is partitioned into a spatial subdivision of cells whose boundaries are comprised of the static, axis-aligned polygons of the virtual environment [1, 14]. <p> For each entity update, a client sends one update message to a server, and the server propagates the message to other servers and clients containing entities inside some cell visible to the one containing the updated entity <ref> [8] </ref>. The primary advantage of this approach is that the message distribution burden is shifted out of the clients and into servers.
Reference: [9] <author> Kazman, Rick, </author> <title> Making WAVES: On the Design of Architectures for Low-end Distributed Virtual Environments. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September </month> <year> 1993, </year> <pages> 443-449. </pages>
Reference-contexts: This approach scales well for many users, but is only practical for networks which allow peer-to-peer multicast messaging, and for mappings from entity attributes to multicast addresses that are relatively static so that the impact of messages and delays associated with joining and leaving multicast groups is minimal. WAVES <ref> [9] </ref>, BrickNet [13], and RING [8] are client-server systems. Communication between client workstations is managed by message servers. Clients do not send messages directly to other clients, but instead send them to servers which forward them to other clients and servers participating in the same distributed simulation.
Reference: [10] <author> Kazman, Rick, </author> <title> Load Balancing, Latency Management and Separation of Concerns in a Distributed Virtual World. Parallel Computations Paradigms and Applications, </title> <editor> A. Zomaya (ed.), </editor> <publisher> Chapman & Hall, </publisher> <year> 1995, </year> <note> to appear. </note>
Reference: [11] <author> Macedonia, Michael, R. Michael J. Zyda, David R. Pratt, and Paul T Barham, </author> <title> Exploiting Reality with Multicast Groups: A Network Architecture for Large Scale Virtual Environments. </title> <booktitle> To appear in Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: NPSNET [16] and DIVE [6] are peer-to-peer systems that use multicast to send update messages to a subset of participating workstations. The general idea is to map entity properties into multicast groups, and send update messages only to relevant groups. For instance, NPSNET <ref> [11] </ref> partitions a virtual world into a 2D grid of hexagonal shaped cells each of which is represented by a separate multicast group. <p> A multi-cast group can be assigned to each cell. For each update, a peer sends a message to the multicast group representing the cell in which the update occurred, while all peers listen to the multicast groups representing the cells visible to the cells containing their entities <ref> [11] </ref>. With this approach, peers do not maintain explicit lists of entities resident in each cell; but, instead, they join and leave multicast groups as their entities move between cells. Filtering of messages is performed by the network rather than by the peers.
Reference: [12] <author> Shaw, Chris, and Mark Green, </author> <title> The MR Toolkit Peers Package and Experiment. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> September </month> <year> 1993, </year> <pages> 463-469. </pages>
Reference-contexts: Between updates, surrogate behavior is simulated by every workstation. Multi-user virtual environment systems can be characterized by their approach to message distribution. For instance, Reality Built For Two [2], VEOS [4], and MR Toolkit <ref> [12] </ref> are based on unicast peer-to-peer designs. A unicast message is sent to each of N-1 workstations whenever any entity in the distributed simulation changes state. <p> During these experiments, clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type [4], entity-ID [4], target-position <ref> [12] </ref>, target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. peating tile pattern of rooms connected by hallways. <p> During these experiments, clients sent update messages only for changes in derivatives of entity position and/or orientation (i.e., dead-reckoning) while other clients simulated intermediate positions with linear "smooth-back." Update messages containing 40 bytes (message-type [4], entity-ID [4], target-position <ref> [12] </ref>, target-orientation [12], positional-velocity [4], and rotational-velocity [4]) were generated for each entity once every 2.3 seconds on average with this "random" navigational behavior. peating tile pattern of rooms connected by hallways.
Reference: [13] <author> Singh, Gurminder, Luis Serra, Willie Png, Audrey Wong, and Hern Ng, BrickNet: </author> <title> Sharing Object Behaviors on the Net. </title> <booktitle> Proceedings of IEEE Virtual Reality Annual International Symposium, </booktitle> <month> March, </month> <year> 1995, </year> <pages> 19-25. </pages>
Reference-contexts: WAVES [9], BrickNet <ref> [13] </ref>, and RING [8] are client-server systems. Communication between client workstations is managed by message servers. Clients do not send messages directly to other clients, but instead send them to servers which forward them to other clients and servers participating in the same distributed simulation.
Reference: [14] <author> Teller, Seth J., and Carlo H. Sequin, </author> <title> Visibility Preprocessing for Interactive Walkthroughs. </title> <journal> Computer Graphics (SIGGRAPH `91). </journal> <volume> 25, 4, </volume> <pages> 61-69. </pages>
Reference-contexts: Specifically, prior to the multi-user simulation, the shared virtual environment is partitioned into a spatial subdivision of cells whose boundaries are comprised of the static, axis-aligned polygons of the virtual environment <ref> [1, 14] </ref>. A visibility precomputation is performed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries [14, 15]. <p> A visibility precomputation is performed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries <ref> [14, 15] </ref>. During the multi-user visual simulation, real-time update messages are propagated only to the subset of workstations managing entities inside some cell visible to the one containing the updated entity.
Reference: [15] <author> Teller, Seth J., </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1992. </year> <note> Also available as UC Berkeley technical report UCB/CSD-92-708. </note>
Reference-contexts: A visibility precomputation is performed in which the set of cells potentially visible to each cell is determined by tracing beams of possible sight-lines through transparent cell boundaries <ref> [14, 15] </ref>. During the multi-user visual simulation, real-time update messages are propagated only to the subset of workstations managing entities inside some cell visible to the one containing the updated entity.
Reference: [16] <author> Zyda, Michael J., David R. Pratt, John S. Falby, Chuck Lombardo, and Kristen M. Kelleher, </author> <title> The Software Required for the Computer Generation of Virtual Environments. Presence, </title> <type> 2, </type> <month> 2 (March </month> <year> 1993), </year> <pages> 130-140. </pages>
Reference-contexts: Since every workstation must store data and process update messages and/or simulate behavior for all N entities during every simulation step, these systems do not scale beyond the capabilities of the least powerful participating workstation. NPSNET <ref> [16] </ref> and DIVE [6] are peer-to-peer systems that use multicast to send update messages to a subset of participating workstations. The general idea is to map entity properties into multicast groups, and send update messages only to relevant groups.
References-found: 16

