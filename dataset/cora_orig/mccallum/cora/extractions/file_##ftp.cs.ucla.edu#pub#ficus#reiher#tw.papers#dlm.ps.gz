URL: file://ftp.cs.ucla.edu/pub/ficus/reiher/tw.papers/dlm.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/reiher/available_papers.html
Root-URL: http://www.cs.ucla.edu
Title: VIRTUAL TIME BASED DYNAMIC LOAD MANAGEMENT IN THE TIME WARP OPERATING SYSTEM addition, TWOS introduces
Author: Peter L. Reiher David Jefferson 
Keyword: Time Warp, dynamic load management, parallel operating systems, parallel and distributed simulation, optimistic synchronization  
Note: In  
Address: 4800 Oak Grove Drive Pasadena, CA 91109-8099  Los Angeles Los Angeles, CA 90024  
Affiliation: Jet Propulsion Laboratory  Department of Computer Science University of California,  
Abstract: The Time Warp Operating System (TWOS) executes event-driven simulations in an optimistic style on parallel machines. Recently TWOS has been substantially improved by the addition of dynamic load management for the purpose of (a) handling fluctuations in a simulations performance, (b) dealing effectively with dynamic creation and destruction of processes, and (c) eliminating the burden on users of assigning processes to processors. Because TWOS uses optimistic synchronization, existing load management theory, which tends to be based on balancing processor utilization, is not applicable; TWOS instead balances load using a more general metric called effective utilization . This paper describes early results of our experiments with the TWOS dynamic load management facility. It covers the theory and mechanics of phase splitting and migration, and presents performance results for several combinations of benchmark, configuration, and load management policy. 
Abstract-found: 1
Intro-found: 1
Reference: <author> S. Bellenot. </author> <year> 1990. </year> <title> Global Virtual Time Algorithms. </title> <booktitle> In Proceedings of the SCS Multiconference on Distributed Simulation, </booktitle> <volume> Vol. 22, No. </volume> <pages> 2. </pages>
Reference-contexts: Load management cycles are started by one node. Periodically, this node sends the initialization messages for an effective utilization gathering protocol. This protocol imposes a graph structure on the nodes of the system like that used by TWOS current global virtual time algorithm, which is used for commitment purposes <ref> (Bellenot 90) </ref>. Every node receives information from either one or two other nodes, and sends information to either one or two other nodes. The incoming information is a table of all effective utilizations so far collected by the protocol.
Reference: <author> C. Burdorf and J. Marti. </author> <year> 1990. </year> <title> Non-Preemptive Time Warp Scheduling Algorithms. </title> <journal> Operating Systems Review , Vol. </journal> <volume> 24, No. </volume> <month> 2 (April). </month>
Reference-contexts: Also, KLOX does not use optimistic synchronization. The Rand Corporations Time Warp system performs dynamic load management in a virtual time environment, even including rollback, but again, their goals are different from those of TWOS <ref> (Burdorf and Marti 1990) </ref>. The Rand implementation of Time Warp runs on a network of personal workstations, and tries to make use of idle cycles on machines on the network. <p> Many existing distributed systems support process migration, including Accent (Zaya 1987), Locus (Popek and Walker 1985), Sprite (Douglas and Ousterhout 1987), DEMOS/MP (Miller 1987), the V kernel (Theimer et al 1985), KLOX (Li 1988), and the Rand Time Warp implementation <ref> (Burdorf and Marti 1990) </ref>. Of these, only KLOX and Rand Time Warp have access to virtual time in their migration mechanism, and neither use the concept of temporal splitting to assist in migration. Most of the existing work on dynamic load management does not deal with virtual time systems.
Reference: <author> L.W. Chen. </author> <year> 1988. </year> <title> A Model for Dynamic Load Management. </title> <type> Ph.D. prospectus. </type> <institution> Computer Science Department, UCLA. </institution>
Reference-contexts: While some of these methods offer suggestions on how to perform load management in TWOS, none solve the problem of managing load in a virtual time-based system. The KLOX operating system does address virtual time-based load management, but its goal is drastically different from the goal of TWOS <ref> (Chen 1988) </ref>. KLOX investigates performance portability , rather than try to run applications as quickly as possible. Also, KLOX does not use optimistic synchronization.
Reference: <author> F. Douglas and J. Ousterhout. </author> <year> 1987. </year> <title> Process Migration in the Sprite Operating System. </title> <booktitle> In 7th International Conference on Distributed Computing Systems </booktitle> . 
Reference-contexts: Some form of object migration is needed if existing objects are to be shifted among the systems nodes. Many existing distributed systems support process migration, including Accent (Zaya 1987), Locus (Popek and Walker 1985), Sprite <ref> (Douglas and Ousterhout 1987) </ref>, DEMOS/MP (Miller 1987), the V kernel (Theimer et al 1985), KLOX (Li 1988), and the Rand Time Warp implementation (Burdorf and Marti 1990).
Reference: <author> G. Fox. </author> <year> 1986. </year> <title> Caltech Concurrent Computation Program Annual Report 1985-1986 . C 3 P-290B. </title> <institution> California Institute of Technology. </institution>
Reference-contexts: Many algorithms have been proposed for moving load from one node to another, given that dynamic load management is being used. These include distributed drafting (Ni et al 1985), physics-based systems using gradient models (Lin and Keller 1986), and physics-based systems using simulated annealing or Hamiltonians <ref> (Fox 1986) </ref>. While some of these methods offer suggestions on how to perform load management in TWOS, none solve the problem of managing load in a virtual time-based system.
Reference: <author> M. Hailperin. </author> <year> 1985. </year> <title> Load Balancing for Massively-Parallel Soft-Real-Time Systems. Knowledge Systems Laboratory Report No. </title> <institution> KSL-88-62. Stanford University. </institution>
Reference-contexts: Related Work Load management research has a long history. Much of this research was based on assumptions that do not apply to TWOS, or had goals different from those of TWOS. Dynamic load management is typically either load balancing or load sharing <ref> (Hailperin 1985) </ref>. Load balancing tries to equalize some metric, typically utilization, across all nodes, usually by migrating existing objects. Load sharing usually involves spawning new processes on idle nodes. Load balancing is only possible in systems that can migrate already running processes (Li 1988). <p> Its extremely high granularity (multiple seconds per event) and the relatively slow local area network connection resulted in a very different performance environment than that of TWOS. Balancing load based on the utilization of nodes is a fairly common idea <ref> (Hailperin 1985) </ref>. However, optimistic systems need to balance the amount of useful work done, rather than balancing the total work, which is what is measured by simple processor utilization. Since little research has been done on load management for optimistic systems, this distinction has not arisen before. <p> The effective utilization theory implies that the system should try to shift load off nodes doing a lot of effective work and onto nodes doing little effective work. Effective utilization is the analog in optimistic systems for simple node utilization in other systems <ref> (Hailperin 1985) </ref>. In optimistic systems, simple node utilization is always high, since the system optimistically performs work that may need to be discarded later.
Reference: <author> P. Hontalas, et al. </author> <year> 1989. </year> <title> Performance of the Colliding Pucks Simulation on the Time Warp Operating System (Part 1: Asynchronous Behavior and Sectoring). </title> <booktitle> In Proceedings of the Society for Computer Simulations 1989 Eastern Multiconference, </booktitle> . 
Reference-contexts: The first application is STB88, a simulation of theater level combat (Wieland 89). The second application is pucks, a simulation of frictionless two-dimensional pucks moving and colliding on a table <ref> (Hontalas 89) </ref>. The third application is WarpNet, a simulation of message passing in a packet switching network (Presley 89). The curves in this section plot points for numbers of nodes between 8 and 64 nodes.
Reference: <author> D. Jefferson. </author> <year> 1985. </year> <title> Virtual Time. </title> <journal> ACM Transactions on Programming Languages and Systems , Vol. </journal> <volume> 7 No. 3 (Jul.). </volume>
Reference-contexts: TWOS takes care of message delivery, scheduling, resource management, and synchronization. A more complete description of TWOS can be found in (Jefferson 1987). TWOS currently runs on the BBN Butterfly Plus parallel processor. Synchronization in TWOS is achieved by an unusual mechanism based on the concept of virtual time <ref> (Jefferson 1985 and Jefferson 1987) </ref>. Each message is tagged with a virtual time, indicating the order within the simulation in which the messages are to be processed.
Reference: <author> D. Jefferson, et al. </author> <year> 1987. </year> <title> Distributed Simulation and the Time Warp Operating System. ACM Operating System Review , November. </title>
Reference-contexts: 1. Introduction The Time Warp Operating System (TWOS) is a virtual time-based operating system that runs event-driven simulations on parallel processors <ref> (Jefferson 1987) </ref>. It has been built over the last several years at the Jet Propulsion Laboratory, and runs primarily on the BBN Butterfly GP1000 under Chrysalis. <p> An arriving message causes an object to perform an event . TWOS takes care of message delivery, scheduling, resource management, and synchronization. A more complete description of TWOS can be found in <ref> (Jefferson 1987) </ref>. TWOS currently runs on the BBN Butterfly Plus parallel processor. Synchronization in TWOS is achieved by an unusual mechanism based on the concept of virtual time (Jefferson 1985 and Jefferson 1987).
Reference: <author> P. Krueger and M. Livny. </author> <year> 1987. </year> <title> Load Balancing, Load Sharing and Performance in Distributed Systems. </title> <type> Technical Report 700. </type> <institution> Computer Science Department, University of Wisconsin-Madison (Aug.). </institution>
Reference-contexts: Speed of completion of a single job is not the only goal for many load management systems. Fairness , ensuring that each of several independent jobs gets its share of the systems attention, is often important <ref> (Krueger and Livny 1987) </ref>. TWOS runs a single job at a time. Since the independent parts of that job need not be treated fairly, as long as the job completes as quickly as possible, TWOS does not concern itself with fairness.
Reference: <author> K. Li. </author> <year> 1988. </year> <title> Process Migration in Distributed Systems . Masters Thesis. </title> <type> UCLA. </type>
Reference-contexts: Load balancing tries to equalize some metric, typically utilization, across all nodes, usually by migrating existing objects. Load sharing usually involves spawning new processes on idle nodes. Load balancing is only possible in systems that can migrate already running processes <ref> (Li 1988) </ref>. TWOS recognizes the need to assign new objects to nodes in accordance with load criteria, but also migrates existing objects to improve the performance of the system. Speed of completion of a single job is not the only goal for many load management systems. <p> Many existing distributed systems support process migration, including Accent (Zaya 1987), Locus (Popek and Walker 1985), Sprite (Douglas and Ousterhout 1987), DEMOS/MP (Miller 1987), the V kernel (Theimer et al 1985), KLOX <ref> (Li 1988) </ref>, and the Rand Time Warp implementation (Burdorf and Marti 1990). Of these, only KLOX and Rand Time Warp have access to virtual time in their migration mechanism, and neither use the concept of temporal splitting to assist in migration.
Reference: <author> F.C.H. Lin and R.M. Keller. </author> <year> 1986. </year> <title> Gradient Model: A Demand-Driven Load Balancing Scheme. </title> <booktitle> In 6th International Conference on Distributed Computing Systems </booktitle> . 
Reference-contexts: Many algorithms have been proposed for moving load from one node to another, given that dynamic load management is being used. These include distributed drafting (Ni et al 1985), physics-based systems using gradient models <ref> (Lin and Keller 1986) </ref>, and physics-based systems using simulated annealing or Hamiltonians (Fox 1986). While some of these methods offer suggestions on how to perform load management in TWOS, none solve the problem of managing load in a virtual time-based system.
Reference: <author> B.P. Miller. </author> <year> 1987. </year> <title> DEMOS/MP: The Development of a Distributed Operating System. </title> <journal> Software Practice and Experience , Vol. </journal> <volume> 17(4) (Apr.). </volume>
Reference-contexts: Some form of object migration is needed if existing objects are to be shifted among the systems nodes. Many existing distributed systems support process migration, including Accent (Zaya 1987), Locus (Popek and Walker 1985), Sprite (Douglas and Ousterhout 1987), DEMOS/MP <ref> (Miller 1987) </ref>, the V kernel (Theimer et al 1985), KLOX (Li 1988), and the Rand Time Warp implementation (Burdorf and Marti 1990).
Reference: <author> L.M. Ni; C.W. Xu; and T.B. Gendreau. </author> <year> 1985. </year> <title> A Distributed Drafting Algorithm for Load Balancing. </title> <journal> IEEE Transactions on Software Engineering , Vol. </journal> <volume> SE-11, No. 10 (Oct.). </volume>
Reference-contexts: Many algorithms have been proposed for moving load from one node to another, given that dynamic load management is being used. These include distributed drafting <ref> (Ni et al 1985) </ref>, physics-based systems using gradient models (Lin and Keller 1986), and physics-based systems using simulated annealing or Hamiltonians (Fox 1986). While some of these methods offer suggestions on how to perform load management in TWOS, none solve the problem of managing load in a virtual time-based system.
Reference: <author> G.J. Popek and B.J. Walker. </author> <year> 1985. </year> <title> The LOCUS Distributed System Architecture , MIT Press. </title>
Reference-contexts: Since little research has been done on load management for optimistic systems, this distinction has not arisen before. Some form of object migration is needed if existing objects are to be shifted among the systems nodes. Many existing distributed systems support process migration, including Accent (Zaya 1987), Locus <ref> (Popek and Walker 1985) </ref>, Sprite (Douglas and Ousterhout 1987), DEMOS/MP (Miller 1987), the V kernel (Theimer et al 1985), KLOX (Li 1988), and the Rand Time Warp implementation (Burdorf and Marti 1990).
Reference: <author> M.M. Theimer; K.A. Lantz; and D.R. Cheriton. </author> <year> 1985. </year> <title> Preemptable Remote Execution Facilities for the V-System. </title> <type> Technical Report STAN-CS-85-1087. </type> <institution> Stanford University (Sept.). </institution>
Reference-contexts: Some form of object migration is needed if existing objects are to be shifted among the systems nodes. Many existing distributed systems support process migration, including Accent (Zaya 1987), Locus (Popek and Walker 1985), Sprite (Douglas and Ousterhout 1987), DEMOS/MP (Miller 1987), the V kernel <ref> (Theimer et al 1985) </ref>, KLOX (Li 1988), and the Rand Time Warp implementation (Burdorf and Marti 1990). Of these, only KLOX and Rand Time Warp have access to virtual time in their migration mechanism, and neither use the concept of temporal splitting to assist in migration.
Reference: <author> F. Wieland, et al. </author> <year> 1989. </year> <title> Distributed Combat Simulation and Time Warp: The Model and its Performance. </title> <booktitle> In Proceedings of the Society for Computer Simulations 1989 Eastern Multiconference </booktitle> . 
Reference-contexts: The first application is STB88, a simulation of theater level combat <ref> (Wieland 89) </ref>. The second application is pucks, a simulation of frictionless two-dimensional pucks moving and colliding on a table (Hontalas 89). The third application is WarpNet, a simulation of message passing in a packet switching network (Presley 89).

References-found: 17

