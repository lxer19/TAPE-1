URL: http://theory.lcs.mit.edu/~harchol/Papers/focs97.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~harchol/Papers/papers.html
Root-URL: 
Title: General Dynamic Routing with Per-Packet Delay Guarantees of O( distance 1 session rate  
Author: Matthew Andrews Antonio Fernandez Mor Harchol-Balter Tom Leighton Lisa Zhang 
Keyword: groups/algorithms.  
Note: This research is supported by Army grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. A full version of the paper may be found at  Supported by NSF contract 9302476-CCR. Supported by the Spanish Ministry of Education. Current address: Departamento  Supported by NSF Postdoctoral Fellowship in the Mathematical Sciences. Supported by an NSF graduate fellowship.  
Address: fandrews, anto, harchol, ftl,  Madrid, Spain,  
Affiliation: Laboratory for Computer Science, MIT.  de Arquitectura Tecnologa de Computadores, Universidad Politecnica de  
Email: ylzg@theory.lcs.mit.edu  anto@eui.upm.es.  
Web: ftp://theory.lcs.mit.edu/pub/  
Abstract: We study dynamic routing in a connection-oriented packet-switching network. We consider a network with arbitrary topology on which a set of sessions is defined. For each session i, packets are injected at a rate r i to follow a predetermined path of length d i . Due to limited bandwidth, only one packet at a time may advance on an edge. Session paths may overlap subject to the constraint that the total rate of sessions using any particular edge is less than 1. We address the problem of scheduling the sessions at each switch, so as to minimize worst-case packet delay and queue buildup at the switches. We show the existence of an asymptotically-optimal schedule that achieves a delay bound of O(1=r i + d i ) with only constant-size queues at the switches. We also present a simple distributed algorithm that, with high probability, delivers every session-i packet to its destination within O(1=r i + d i log(m=r min )) steps of its injection, where r min is the minimum session rate, and m is the number of edges in the network. Our results can be generalized to (leaky-bucket constrained) bursty traffic, where session i tolerates a burst size of b i . In this case, our delay bounds become O(b i =r i + d i ) and O(b i =r i + d i log(m=r min )), respectively. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Andrews, B. Awerbuch, A. Fernandez, J. Kleinberg, T. Leighton, and Z. Liu. </author> <title> Universal stability results for greedy contention-resolution protocols. </title> <booktitle> In Proceedings of the 37th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 380 - 389, </pages> <address> Burlington, VT, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: A contrasting model, the connectionless adversarial queueing model, is also much studied, e.g. <ref> [3, 1] </ref>. Here the paths on which packets are injected can change over time giving the adversary more power. <p> A contrasting model, the connectionless adversarial queueing model, is also much studied, e.g. [3, 1]. Here the paths on which packets are injected can change over time giving the adversary more power. In the adversarial queueing model the best delay bound known is polynomial in the maximum path length <ref> [1] </ref>. 1.5 Our Results We first provide a randomized, distributed sched-uler that achieves a delay bound of O (1=r i + d i log (m=r min )) and a bound on the queue size of O (log (m=r min )), where m is the number of edges in the network and
Reference: [2] <author> J. Beck. </author> <title> An algorithmic approach to the Lovasz Local Lemma I. Random Structures and Algorithms, </title> <address> 2(4):343 - 365, </address> <year> 1991. </year>
Reference-contexts: We also guarantee that 1 In this paper, we concentrate on proving the existence of such a schedule. However, the proof can be made constructive using ideas of Leighton, Maggs and Richa [9] that are based on Beck's algorithm <ref> [2] </ref>. For details, see [15]. every packet always reaches its destination within the delay bound, without dropping any packets. * We guarantee constant-size edge queues.
Reference: [3] <author> A. Borodin, J. Kleinberg, P. Raghavan, M. Su-dan, and D. Williamson. </author> <title> Adversarial queueing theory. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 376 - 385, </pages> <address> Philadelphia, PA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: A contrasting model, the connectionless adversarial queueing model, is also much studied, e.g. <ref> [3, 1] </ref>. Here the paths on which packets are injected can change over time giving the adversary more power.
Reference: [4] <author> R. L. Cruz. </author> <title> A calculus for network delay, Part I: Network elements in isolation. </title> <journal> IEEE Transactions on Information Theory, </journal> <pages> pages 114 - 31, </pages> <year> 1991. </year>
Reference-contexts: During any t consecutive time steps at most r i t + b i session-i packets are injected. Leaky-bucket regulated traffic is widely used in the literature, e.g. <ref> [4, 5, 7, 11, 12, 14] </ref>. Leaky-bucket regulated injections allow traffic shaping. When session-i packets are injected, they first enter the session-i bucket at the source. These packets then leave the bucket one at a time at the rate of r i .
Reference: [5] <author> R. L. Cruz. </author> <title> A calculus for network delay, Part II: Network analysis. </title> <journal> IEEE Transactions on Information Theory, </journal> <pages> pages 132 - 141, </pages> <year> 1991. </year>
Reference-contexts: During any t consecutive time steps at most r i t + b i session-i packets are injected. Leaky-bucket regulated traffic is widely used in the literature, e.g. <ref> [4, 5, 7, 11, 12, 14] </ref>. Leaky-bucket regulated injections allow traffic shaping. When session-i packets are injected, they first enter the session-i bucket at the source. These packets then leave the bucket one at a time at the rate of r i .
Reference: [6] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <journal> Journal of Internetworking: Research and Experience, </journal> <volume> 1:3 - 26, </volume> <year> 1990. </year>
Reference-contexts: However, this leaves a large gap between the upper bound of O (d i =r i ) and the lower bound of O (1=r i + d i ). The recent work seeks to close this gap. In 1990, Demers, Keshav and Shenker <ref> [6] </ref> proposed a widely-studied routing algorithm called Weighted Fair Queueing (WFQ). WFQ is a packetized approximation of the idealized fluid model algorithm Generalized Processor Sharing (GPS). WFQ is simple and distributed.
Reference: [7] <author> A. Elwalid, D. Mitra, and R. H. Wentworth. </author> <title> A new approach for allocating buffers and bandwidth to heterogeneous, regulated traffic in an ATM node. </title> <journal> IEEE Journal on selected areas in communications, </journal> <pages> pages 1115 - 1127, </pages> <year> 1995. </year>
Reference-contexts: During any t consecutive time steps at most r i t + b i session-i packets are injected. Leaky-bucket regulated traffic is widely used in the literature, e.g. <ref> [4, 5, 7, 11, 12, 14] </ref>. Leaky-bucket regulated injections allow traffic shaping. When session-i packets are injected, they first enter the session-i bucket at the source. These packets then leave the bucket one at a time at the rate of r i .
Reference: [8] <author> F. T. Leighton, B. M. Maggs, and S. B. Rao. </author> <title> Packet routing and job-shop scheduling in O(congestion + dilation) steps. </title> <journal> Combinatorica, </journal> <volume> 14(2):167 - 186, </volume> <year> 1994. </year>
Reference-contexts: This delay-insertion technique is used extensively by Leighton et al. in <ref> [8, 9] </ref> in the context of static routing. (In the static routing problem, all packets are present in the network initially.) Since our main result employs many techniques from [8], we give a detailed summary of [8] in Section 3.1. <p> This delay-insertion technique is used extensively by Leighton et al. in [8, 9] in the context of static routing. (In the static routing problem, all packets are present in the network initially.) Since our main result employs many techniques from <ref> [8] </ref>, we give a detailed summary of [8] in Section 3.1. A contrasting model, the connectionless adversarial queueing model, is also much studied, e.g. [3, 1]. Here the paths on which packets are injected can change over time giving the adversary more power. <p> This delay-insertion technique is used extensively by Leighton et al. in [8, 9] in the context of static routing. (In the static routing problem, all packets are present in the network initially.) Since our main result employs many techniques from <ref> [8] </ref>, we give a detailed summary of [8] in Section 3.1. A contrasting model, the connectionless adversarial queueing model, is also much studied, e.g. [3, 1]. Here the paths on which packets are injected can change over time giving the adversary more power. <p> This is interesting because edge queues are much more expensive than initial queues in practice. * A consequence of our result is a packet-based bound, which improves upon the O (c + d) bound in <ref> [8] </ref> for the static problem. (See Section 3.1 for the problem and parameter definitions.) We show that if packet p i follows a route P i , then p i can be routed to its destination within O (c i + d i ) steps, where c i is the maximum <p> method used for solving the static case, and in Section 3.2 we give an overview of the additional complexities that need to be addressed in the dynamic case. 3.1 A Bound of O (c+d) for Static Routing Leighton, Maggs and Rao consider the static routing problem for arbitrary networks in <ref> [8] </ref>. For static routing, all packets are present in the network initially. Each packet is associated with a source, a destination, and a route. <p> In this schedule, at most one packet traverses each edge at each time step. A packet waits O (c + d) steps initially before leaving its source, and it waits O (1) steps to cross each edge thereafter. We summarize here the techniques in <ref> [8] </ref>. The strategy for constructing an efficient schedule is to make a succession of refinements to an initial schedule S (0) . In S (0) , each packet moves at every step until it reaches its destination. <p> A final schedule, in which at most one packet at a time crosses each edge, can be constructed by replacing each step of S () by a constant number of steps. Each refinement is achieved by inserting delays to the packets. It is the central issue in <ref> [8] </ref> to show that a set of delays always exists satisfying the criteria in Table 1. 3.2 A Bound of O (1=r i + d i ) for Dynamic Routing Our result for the dynamic routing problem is parallel to that in [8]. <p> It is the central issue in <ref> [8] </ref> to show that a set of delays always exists satisfying the criteria in Table 1. 3.2 A Bound of O (1=r i + d i ) for Dynamic Routing Our result for the dynamic routing problem is parallel to that in [8]. <p> packet reaches its destination within O (1=r i + d i ) steps of its injection, Schedule Frame size Relative congestion S (q) I (q) c (q) Refinement log 5 I (q) (1 + o (1))c (q) S (q+1) I (q+1) c (q+1) Table 1: Frame-refinement for static routing in <ref> [8] </ref>. where r i and d i are the injection rate and path length for session i, respectively. A session-i packet waits O (1=r i + d i ) steps initially before leaving its source, and it waits O (1) steps to cross each edge afterwards. <p> To achieve a session-based, end-to-end delay bound of O (1=r i + d i ) for our dynamic routing problem, we adopt the general approach in <ref> [8] </ref>. However, there are three major problems in transforming the solution for the static problem into a solution for the dynamic problem. In the following we present these three problems and their solutions. Problem 1: Infinite time In [8] all the packets to be scheduled are present initially. <p> ) for our dynamic routing problem, we adopt the general approach in <ref> [8] </ref>. However, there are three major problems in transforming the solution for the static problem into a solution for the dynamic problem. In the following we present these three problems and their solutions. Problem 1: Infinite time In [8] all the packets to be scheduled are present initially. In the dynamic model, packets are injected over an infinite time line. We would like to partition the infinite time line into finite time intervals which can be scheduled independently of each other.
Reference: [9] <author> F. T. Leighton, B. M. Maggs, and A. W. Richa. </author> <title> Fast algorithms for finding O(congestion + dilation) packet routing schedules. </title> <type> Technical report CMU-CS-96-152, </type> <institution> Carnegie Mellon University, </institution> <year> 1996. </year>
Reference-contexts: This delay-insertion technique is used extensively by Leighton et al. in <ref> [8, 9] </ref> in the context of static routing. (In the static routing problem, all packets are present in the network initially.) Since our main result employs many techniques from [8], we give a detailed summary of [8] in Section 3.1. <p> We also guarantee that 1 In this paper, we concentrate on proving the existence of such a schedule. However, the proof can be made constructive using ideas of Leighton, Maggs and Richa <ref> [9] </ref> that are based on Beck's algorithm [2]. For details, see [15]. every packet always reaches its destination within the delay bound, without dropping any packets. * We guarantee constant-size edge queues.
Reference: [10] <author> R. Ostrovsky and Y. Rabani. </author> <title> Local control packet switching algorithm. </title> <booktitle> In Proceedings of the 29th Annual ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Ostrovsky and Ra-bani improve the bound to O (1=r min + d max + log 1+" p 1 ) <ref> [10] </ref>. These bounds are not session-based, meaning that if one session has a small rate or a long path then the delay bounds for all sessions will suffer.
Reference: [11] <author> A. K. Parekh and R. G. Gallager. </author> <title> A generalized processor sharing approach to flow control in integrated services networks: The single-node case. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(3):344 - 357, </volume> <year> 1993. </year>
Reference-contexts: In 1990, Demers, Keshav and Shenker [6] proposed a widely-studied routing algorithm called Weighted Fair Queueing (WFQ). WFQ is a packetized approximation of the idealized fluid model algorithm Generalized Processor Sharing (GPS). WFQ is simple and distributed. This same algorithm was proposed independently by Parekh and Gallager <ref> [11, 12] </ref> in 1992 under the name of Packet-by-Packet Generalized Processor Sharing (PGPS). Parekh and Gallager prove that the algorithm has an end-to-end delay guarantee of 2d i =r i [12, page 148] in the case when all packets have the same size. <p> During any t consecutive time steps at most r i t + b i session-i packets are injected. Leaky-bucket regulated traffic is widely used in the literature, e.g. <ref> [4, 5, 7, 11, 12, 14] </ref>. Leaky-bucket regulated injections allow traffic shaping. When session-i packets are injected, they first enter the session-i bucket at the source. These packets then leave the bucket one at a time at the rate of r i .
Reference: [12] <author> A. K. Parekh and R. G. Gallager. </author> <title> A generalized processor sharing approach to flow control in integrated services networks: The multiple-node case. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 2(2):137 - 150, </volume> <year> 1994. </year>
Reference-contexts: In 1990, Demers, Keshav and Shenker [6] proposed a widely-studied routing algorithm called Weighted Fair Queueing (WFQ). WFQ is a packetized approximation of the idealized fluid model algorithm Generalized Processor Sharing (GPS). WFQ is simple and distributed. This same algorithm was proposed independently by Parekh and Gallager <ref> [11, 12] </ref> in 1992 under the name of Packet-by-Packet Generalized Processor Sharing (PGPS). Parekh and Gallager prove that the algorithm has an end-to-end delay guarantee of 2d i =r i [12, page 148] in the case when all packets have the same size. <p> WFQ is simple and distributed. This same algorithm was proposed independently by Parekh and Gallager [11, 12] in 1992 under the name of Packet-by-Packet Generalized Processor Sharing (PGPS). Parekh and Gallager prove that the algorithm has an end-to-end delay guarantee of 2d i =r i <ref> [12, page 148] </ref> in the case when all packets have the same size. <p> During any t consecutive time steps at most r i t + b i session-i packets are injected. Leaky-bucket regulated traffic is widely used in the literature, e.g. <ref> [4, 5, 7, 11, 12, 14] </ref>. Leaky-bucket regulated injections allow traffic shaping. When session-i packets are injected, they first enter the session-i bucket at the source. These packets then leave the bucket one at a time at the rate of r i .
Reference: [13] <author> Y. Rabani and E. Tardos. </author> <title> Distributed packet switching in arbitrary networks. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <address> Philadelphia, PA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Parekh and Gallager prove that the algorithm has an end-to-end delay guarantee of 2d i =r i [12, page 148] in the case when all packets have the same size. In their 1996 paper, Rabani and Tardos <ref> [13] </ref> produce an algorithm that routes every packet to its destination with probability 1 p in time O (1=r min ) + (log fl p 1 ) O (log fl p 1 ) d max +poly (log p 1 ), where r min = min i r i and d max
Reference: [14] <author> J. S. Turner. </author> <title> New directions in communications, or which way to the information age. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 8 - 15, </pages> <year> 1986. </year>
Reference-contexts: During any t consecutive time steps at most r i t + b i session-i packets are injected. Leaky-bucket regulated traffic is widely used in the literature, e.g. <ref> [4, 5, 7, 11, 12, 14] </ref>. Leaky-bucket regulated injections allow traffic shaping. When session-i packets are injected, they first enter the session-i bucket at the source. These packets then leave the bucket one at a time at the rate of r i .
Reference: [15] <author> L. Zhang. </author> <title> An Analysis of Network Routing and Communication Latency. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1997. </year>
Reference-contexts: We also guarantee that 1 In this paper, we concentrate on proving the existence of such a schedule. However, the proof can be made constructive using ideas of Leighton, Maggs and Richa [9] that are based on Beck's algorithm [2]. For details, see <ref> [15] </ref>. every packet always reaches its destination within the delay bound, without dropping any packets. * We guarantee constant-size edge queues.
References-found: 15

