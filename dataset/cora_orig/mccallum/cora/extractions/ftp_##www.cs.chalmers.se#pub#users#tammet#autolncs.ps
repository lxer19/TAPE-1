URL: ftp://www.cs.chalmers.se/pub/users/tammet/autolncs.ps
Refering-URL: http://www.csd.uu.se/~voronkov/Lics/001-025.htm
Root-URL: 
Email: e-mail: ftammet, smithg@cs.chalmers.se  
Title: Optimized Encodings of Fragments of Type Theory in First Order Logic  
Author: Tanel Tammet and Jan M. Smith 
Address: S-41296 Goteborg, Sweden.  
Affiliation: Department of Computing Science, Chalmers University of Technology and Univ. of Goteborg,  
Abstract: The paper presents sound and complete translations of several fragments of Martin-Lof's monomorphic type theory to first order predicate calculus. The translations are optimised for the purpose of automated theorem proving in the mentioned fragments. The implementation of the theorem prover Gandalf and several experimental results are described.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Peter Aczel. </author> <title> The strength of Martin-Lof's type theory with one universe. </title> <booktitle> In Proceedings of the Symposium on Mathematical Logic, Oulu, </booktitle> <year> 1974, </year> <pages> pages 1-32. </pages> <note> Report No 2, </note> <institution> Department of Philosophy, University of Helsinki, </institution> <year> 1977. </year>
Reference-contexts: The presented translations are shown to be sound and complete. Translations of Martin-Lof's type theory to theories based on predicate logic have been considered earlier by Aczel <ref> [1] </ref> and Smith [17], but with purposes different from automated theorem proving. Our translation is also similar to the translation given by Felty and Miller [9] of the logical framework LF to the logic hh ! of hereditary Harrop formulas with quantification at all non-predicate types.
Reference: 2. <author> L. Augustsson, T. Coquand, and B. Nordstrom. </author> <title> A short description of Another Logical Framework. </title> <booktitle> In Proceedings of the First Workshop on Logical Frameworks, Antibes, </booktitle> <pages> pages 39-42, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The subject of this paper is the problem of automated theorem proving in Martin-Lof's monomorphic type theory [16, 8], which is the underlying logic of the interactive proof development system ALF <ref> [2, 11] </ref>. In the scope of our paper the task of automated theorem proving in type theory is understood as demonstrating that a certain type is inhabited by constructing a term of that type.
Reference: 3. <author> H. Barendregt. </author> <title> The Lambda Calculus. </title> <publisher> North Holland, </publisher> <year> 1981. </year>
Reference-contexts: It is known (see <ref> [3] </ref>) that the Schonfinkel's abstraction algorithm combined with the beforementioned equality rules for S; K; I simulates weak fi-reduction of lambda calculus ([x]M N ) = M fN=xg but not the ~ rule: M = M 0 ) [x]M = [x]M 0 .
Reference: 4. <author> T.Tammet C.Fermuller, A.Leitsch and N.Zamov. </author> <title> Resolution Methods for the Decision Problem, </title> <booktitle> volume 679 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg, </address> <year> 1993. </year>
Reference-contexts: For further details see, for example, [6] or <ref> [4] </ref>. An atom is a predicate symbol applied to zero or more terms. A positive literal is an atom. A negative literal is an atom preceded by the negation sign. A clause is a finite set of literals. All variables in a clause are interpreted as being universally quantified.
Reference: 5. <author> C.Green. </author> <title> Application of theorem-proving to problem solving. </title> <booktitle> In Proc. 1st Internat. Joint. Conf. Artificial Intelligence, </booktitle> <pages> pages 219-239, </pages> <year> 1969. </year>
Reference-contexts: There are well-known techniques enabling us to always construct the required substitution instance of ) In (x; B 0 ) from the resolution refutation of Horn clause sets like 0 [ E [ A 0 [ fIn (x; B 0 ) )g; see [6] and <ref> [5] </ref>.
Reference: 6. <author> C.L.Chang and R.C.T Lee. </author> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <year> 1973. </year>
Reference-contexts: For further details see, for example, <ref> [6] </ref> or [4]. An atom is a predicate symbol applied to zero or more terms. A positive literal is an atom. A negative literal is an atom preceded by the negation sign. A clause is a finite set of literals. <p> There are well-known techniques enabling us to always construct the required substitution instance of ) In (x; B 0 ) from the resolution refutation of Horn clause sets like 0 [ E [ A 0 [ fIn (x; B 0 ) )g; see <ref> [6] </ref> and [5]. <p> The following is the standard lifting lemma of the theory of resolution calculus. (see e.g. <ref> [6] </ref>): Lemma 3. Let A and B be two clauses A fA 1 ; : : :; A n g and B fB 1 ; : : : ; B n g.
Reference: 7. <author> Thierry Coquand. </author> <title> Pattern matching with dependent types. </title> <booktitle> In Proceeding from the logical framework workshop at B-astad, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: In Martin-Lof's original formulation, implicitely defined constants were only possible to introduce by primitive recursion schemes. We will, however, use the more general formulation with pattern-matching, proposed by Coquand <ref> [7] </ref>. For our approach to automated theorem proving in type theory, pattern-matching is important since it often makes it possible to avoid higher order functions.
Reference: 8. <author> Thierry Coquand, Bengt Nordstrom, Jan M. Smith, and Bjorn von Sydow. </author> <title> Type theory and programming. </title> <journal> EATCS, </journal> <volume> 52, </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The subject of this paper is the problem of automated theorem proving in Martin-Lof's monomorphic type theory <ref> [16, 8] </ref>, which is the underlying logic of the interactive proof development system ALF [2, 11]. In the scope of our paper the task of automated theorem proving in type theory is understood as demonstrating that a certain type is inhabited by constructing a term of that type. <p> The prover takes advantage of the optimised translations we introduce and is designed for use together with the system ALF, which incorporates the pattern-matching extension of the underlying monomorphic type theory <ref> [8, 11] </ref>. Pattern-matching is implemented in the special part of the prover devoted to searching for structural induction proofs. The paper is structured as follows: the sections 2 and 3 give a brief overview of Martin-Lof's type theory and the resolution method. <p> Correctness of Toy Compiler The following example encodes the problem of proving correctness of a simple compiler. The example is presented in <ref> [8] </ref> with a proof created by a human user (C.Coquand) in interaction with the ALF system. We present a proof found by the Gandalf system using a number of crucial hints given to Gandalf by the human user.
Reference: 9. <author> A. Felty and D. Miller. </author> <title> Encoding a Dependent-type -Calculus in a Logic Programming Language. </title> <booktitle> In Proceedings of CADE-10. Lecture Notes in Artificial Intelligence 449, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Translations of Martin-Lof's type theory to theories based on predicate logic have been considered earlier by Aczel [1] and Smith [17], but with purposes different from automated theorem proving. Our translation is also similar to the translation given by Felty and Miller <ref> [9] </ref> of the logical framework LF to the logic hh ! of hereditary Harrop formulas with quantification at all non-predicate types.
Reference: 10. <author> G.Peterson. </author> <title> A technique for establishing completeness results in theorem proving with equality. </title> <journal> SIAM J. of Comput, </journal> <volume> 12 </volume> <pages> 82-100, </pages> <year> 1983. </year>
Reference-contexts: 5 Building In Equality For the Horn fragment where the translation of the F 1 class belongs, the explicit axiomatization of the equality predicate (except the reflexivity axiom x = x which must be preserved) can be replaced by the following restricted form of paramodulation without losing completeness (see eg. <ref> [10] </ref>). ) L [t] ) t 0 = g = mgu (t; t 0 ) where L [g] is obtained by replacing one occurrence of the term t in L [t] by the term g. <p> Thus we do not lose completeness in case we treat such equality axioms as rewrite rules, ie. if we rewrite any term in any derived first-order clause modulo the rewriting relation E. See <ref> [10] </ref>). However, we will still need to keep the paramodulation rule to guarantee completeness.
Reference: 11. <author> Lena Magnusson. </author> <title> The new Implementation of ALF. </title> <booktitle> In The informal proceeding from the logical framework workshop at B-astad, </booktitle> <month> June </month> <year> 1992, 1992. </year>
Reference-contexts: 1 Introduction The subject of this paper is the problem of automated theorem proving in Martin-Lof's monomorphic type theory [16, 8], which is the underlying logic of the interactive proof development system ALF <ref> [2, 11] </ref>. In the scope of our paper the task of automated theorem proving in type theory is understood as demonstrating that a certain type is inhabited by constructing a term of that type. <p> The prover takes advantage of the optimised translations we introduce and is designed for use together with the system ALF, which incorporates the pattern-matching extension of the underlying monomorphic type theory <ref> [8, 11] </ref>. Pattern-matching is implemented in the special part of the prover devoted to searching for structural induction proofs. The paper is structured as follows: the sections 2 and 3 give a brief overview of Martin-Lof's type theory and the resolution method.
Reference: 12. <author> D. Miller. </author> <title> Proofs in Higher Order Logics. </title> <type> Ph.D. thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1983. </year>
Reference-contexts: The operation of replacing the variables in G by the new constants is a specific instance of the Skolemization procedure and, unlike full Skolem-ization, is correct for intuitionistic logic, see <ref> [12] </ref> and [13]. A substitution instance of ) In (x; B 0 ) is derivable from the set 0 [ E [ A 0 if and only if the clause set 0 [ E [ A 0 [ fIn (x; B 0 ) )g is refutable.
Reference: 13. <author> D. Miller. </author> <title> A compact representation of proofs. </title> <journal> Studia Logica, </journal> <volume> 46(4), </volume> <year> 1987. </year>
Reference-contexts: The operation of replacing the variables in G by the new constants is a specific instance of the Skolemization procedure and, unlike full Skolem-ization, is correct for intuitionistic logic, see [12] and <ref> [13] </ref>. A substitution instance of ) In (x; B 0 ) is derivable from the set 0 [ E [ A 0 if and only if the clause set 0 [ E [ A 0 [ fIn (x; B 0 ) )g is refutable.
Reference: 14. <author> G. Mints. </author> <title> Gentzen-type systems and resolution rules. part i. propositional logic. </title> <booktitle> In COLOG-88, volume 417 of Lecture Notes in Computer Science, </booktitle> <pages> pages 198-231. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Soundness and completeness proofs of the translation are obtained from the analogous proofs for the fragment F 1 . The most convenient way to extend these proofs is to use the resolution method for intuitionistic logic proposed by G.Mints, see <ref> [14] </ref> and [15]. In addition to the optimization O 1 , we will apply the analogue of the optimization O 2 to the formula given by the translation T ri. We note that the introduction and elimination rules for disjunction and conjunction can be defined in F 2 .
Reference: 15. <author> G. Mints. </author> <title> Resolution strategies for the intuitionistic logic. In Constraint Programming, </title> <booktitle> volume 131 of NATO ASI Series F, </booktitle> <pages> pages 289-311. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Soundness and completeness proofs of the translation are obtained from the analogous proofs for the fragment F 1 . The most convenient way to extend these proofs is to use the resolution method for intuitionistic logic proposed by G.Mints, see [14] and <ref> [15] </ref>. In addition to the optimization O 1 , we will apply the analogue of the optimization O 2 to the formula given by the translation T ri. We note that the introduction and elimination rules for disjunction and conjunction can be defined in F 2 .
Reference: 16. <author> Bengt Nordstrom, Kent Petersson, and Jan M. Smith. </author> <title> Programming in Martin-Lof 's Type Theory. An Introduction. </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction The subject of this paper is the problem of automated theorem proving in Martin-Lof's monomorphic type theory <ref> [16, 8] </ref>, which is the underlying logic of the interactive proof development system ALF [2, 11]. In the scope of our paper the task of automated theorem proving in type theory is understood as demonstrating that a certain type is inhabited by constructing a term of that type.
Reference: 17. <author> Jan Smith. </author> <title> An interpretation of Martin-Lof's type theory in a type-free theory of propositions. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 49(3) </volume> <pages> 730-753, </pages> <year> 1984. </year>
Reference-contexts: The presented translations are shown to be sound and complete. Translations of Martin-Lof's type theory to theories based on predicate logic have been considered earlier by Aczel [1] and Smith <ref> [17] </ref>, but with purposes different from automated theorem proving. Our translation is also similar to the translation given by Felty and Miller [9] of the logical framework LF to the logic hh ! of hereditary Harrop formulas with quantification at all non-predicate types.
References-found: 17

