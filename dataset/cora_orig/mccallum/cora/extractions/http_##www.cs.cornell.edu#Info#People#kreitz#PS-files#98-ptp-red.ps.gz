URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/98-ptp-red.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/98-ptp.html
Root-URL: 
Email: steph@informatik.th-darmstadt.de  kreitz@cs.cornell.edu  
Phone: 2  
Title: Deleting Redundancy in Proof Reconstruction  
Author: Stephan Schmitt Christoph Kreitz 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  Ithaca, NY 14853, USA  
Affiliation: 1 Fachgebiet Intellektik, Fachbereich Informatik, Technische Universitat Darmstadt  Department of Computer Science, Cornell University  
Abstract: Reconstructing sequent proofs from matrix proofs in nonclassical logics requires the elimination of redundancies in order retain completeness when a proof branches into independent sub-proofs, which is a non-trivial task if additional search shall be avoided. We present a framework for eliminating redundancies during proof reconstruction. We show that search-free proof reconstruction requires knowledge from the proof search process. We relate different levels of proof knowledge to reconstruction knowledge and analyze which redundancies can be deleted by using such knowledge. Our framework is uniformly applicable to all logics which have a matrix-characterization of validity and enables us to build adequate conversion procedures for each logic.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Jour. of the ACM, </journal> <volume> 28, </volume> <pages> p. 633-645, </pages> <year> 1981. </year>
Reference-contexts: 1 Introduction Automated theorem proving in non-classical logics has become important in many branches of Artificial Intelligence and Computer Science. As a result, the resolution principle [14] and the connection method <ref> [1, 2] </ref>, which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic [20, 10, 21, 19, 7]. <p> In Section 5 we present results on the complexity, adequate completeness, and correctness of the refined proof reconstruction method. 2 Preliminaries Matrix characterizations of logical validity were introduced by Bibel <ref> [1, 2] </ref> for classical logic and later extended to intuitionistic and modal logics [21] and fragments of linear logic [7]. Based on the latter an efficient proof search procedure has been elaborated [12, 7] which captures all of these logics in a uniform way. <p> In the following we characterize the knowledge that must be provided by the proof search method and assume this method to be based on the usual extension procedure <ref> [1, 2, 12] </ref>. We will encode the proof history of this procedure as reconstruction knowledge in the form of prefixed connections and derive a refinement of fi-split and (fi; fi)-purity such that T u = ~ C will always consist of a single class.
Reference: 2. <author> W. Bibel. </author> <title> Automated theorem proving. </title> <publisher> Vieweg, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Automated theorem proving in non-classical logics has become important in many branches of Artificial Intelligence and Computer Science. As a result, the resolution principle [14] and the connection method <ref> [1, 2] </ref>, which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic [20, 10, 21, 19, 7]. <p> In Section 2 we give a brief summary of matrix characterizations and proof reconstruction in non-classical logics. Section 3 classifies redundancies in matrix proofs and the requirements for eliminating them. In Section 4 we discuss proof knowledge available from the extension procedure <ref> [2, 12] </ref>, in particular the concept of prefixed connections, and the resulting redundancy elimination methods. <p> In Section 5 we present results on the complexity, adequate completeness, and correctness of the refined proof reconstruction method. 2 Preliminaries Matrix characterizations of logical validity were introduced by Bibel <ref> [1, 2] </ref> for classical logic and later extended to intuitionistic and modal logics [21] and fragments of linear logic [7]. Based on the latter an efficient proof search procedure has been elaborated [12, 7] which captures all of these logics in a uniform way. <p> Theorem 1. A formula F is valid wrt. a logic L iff there exists a multiplicity , an admissible substitution , and a set of connections C which spans F . Proof search procedures based on the matrix characterization of logical validity are generalizations of the extension method <ref> [2] </ref> to non-normal form matrices and non-classical logics [12, 7]. They consist of a general path-checking algorithm and a uniform and efficient algorithm for prefix-unification [11]. <p> It leads to a generalized purity reduction (cf. <ref> [2] </ref>) for non-normal form matrices. An atomic position x of / ? which is not connected after fi-split is called pure. Complementarity of paths will not depend on x or any literal in the same "clause" and the whole subtree containing these literals is redundant. Definition 4. <p> In the following we characterize the knowledge that must be provided by the proof search method and assume this method to be based on the usual extension procedure <ref> [1, 2, 12] </ref>. We will encode the proof history of this procedure as reconstruction knowledge in the form of prefixed connections and derive a refinement of fi-split and (fi; fi)-purity such that T u = ~ C will always consist of a single class.
Reference: 3. <author> W. Bibel, S. Br uning, U. Egly, T. </author> <title> Rath. </title> <journal> Komet. CADE-12, </journal> <volume> LNAI 814, </volume> <pages> pp. 783-787. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Automated theorem proving in non-classical logics has become important in many branches of Artificial Intelligence and Computer Science. As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) <ref> [22, 9, 3] </ref>, have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic [20, 10, 21, 19, 7].
Reference: 4. <author> W. Bibel, D. Korn, C. Kreitz, F. Kurucz, J. Otten, S. Schmitt, G. Stolpmann. </author> <title> A MultiLevel Approach to Program Synthesis. 7 th International Workshop on Logic Program Synthesis and Transformation, </title> <note> to appear in LNCS series, Springer 1997. </note>
Reference-contexts: These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems <ref> [8, 4] </ref> and other problem oriented applications [5]. In many applications of theorem proving it is not sufficient to show that a theorem is valid.
Reference: 5. <author> W. Bibel, D. Korn, C. Kreitz, S. Schmitt. </author> <title> Problem-Oriented Applications of Automated Theorem Proving. </title> <booktitle> Design and Implementation of Symbolic Computation Systems, </booktitle> <volume> LNCS 1128, </volume> <pages> pp. 1-21, </pages> <year> 1996. </year>
Reference-contexts: These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications <ref> [5] </ref>. In many applications of theorem proving it is not sufficient to show that a theorem is valid. The need for further processing (e.g. generating programs from proofs) or a deeper understanding of the proof requires that proof details can be presented in a comprehensible form.
Reference: 6. <author> M. C. </author> <title> Fitting. Proof Methods for Modal and Intuitionistic Logic. </title> <address> D. </address> <publisher> Reidel, </publisher> <year> 1983. </year>
Reference-contexts: A signed formula will be denoted by F pol (x) x . The principal type Ptype (x) denotes the formula type of F x according to the tableaux classification in <ref> [21, 6] </ref>. Principal types are a compact and uniform way to express proof-relevant properties of a formula within different logics [17]. In the following we will only have to consider the types ff, fi, and atom .
Reference: 7. <editor> C. Kreitz, H. Mantel, J. Otten, S. Schmitt. </editor> <booktitle> Connection-based proof construction in Linear Logic. </booktitle> <address> CADE-14, </address> <year> 1997. </year>
Reference-contexts: As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic <ref> [20, 10, 21, 19, 7] </ref>. These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5]. <p> These characterizations are the foundation of efficient and uniform proof search procedures for all these logics <ref> [12, 13, 7] </ref> which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5]. In many applications of theorem proving it is not sufficient to show that a theorem is valid. <p> As a complement to existing matrix-based proof search methods we have developed a uniform procedure for transforming classical and non-classical matrix proofs back into sequent style systems <ref> [16, 17, 7] </ref>. <p> In Section 5 we present results on the complexity, adequate completeness, and correctness of the refined proof reconstruction method. 2 Preliminaries Matrix characterizations of logical validity were introduced by Bibel [1, 2] for classical logic and later extended to intuitionistic and modal logics [21] and fragments of linear logic <ref> [7] </ref>. Based on the latter an efficient proof search procedure has been elaborated [12, 7] which captures all of these logics in a uniform way. A uniform procedure which converts matrix proofs in a particular logic into sequent proofs has been developed in [17, 7]. <p> Based on the latter an efficient proof search procedure has been elaborated <ref> [12, 7] </ref> which captures all of these logics in a uniform way. A uniform procedure which converts matrix proofs in a particular logic into sequent proofs has been developed in [17, 7]. <p> Based on the latter an efficient proof search procedure has been elaborated [12, 7] which captures all of these logics in a uniform way. A uniform procedure which converts matrix proofs in a particular logic into sequent proofs has been developed in <ref> [17, 7] </ref>. In this section we shall present a brief summary of matrix calculi and the fundamentals of proof reconstruction 2.1 Matrix calculi for non-classical logics In matrix proof a formula F is represented by its formula tree t whose nodes are called positions. <p> Finally, multiple uses of subformulae in a matrix proof are represented by a combined multiplicity = h Q ; L i of the positions x in t. Using these concepts logical validity can be uniformly characterized as follows (see <ref> [21, 7] </ref> for proofs). Theorem 1. A formula F is valid wrt. a logic L iff there exists a multiplicity , an admissible substitution , and a set of connections C which spans F . <p> Proof search procedures based on the matrix characterization of logical validity are generalizations of the extension method [2] to non-normal form matrices and non-classical logics <ref> [12, 7] </ref>. They consist of a general path-checking algorithm and a uniform and efficient algorithm for prefix-unification [11]. <p> The technical details of the conversion procedure are subtle since the specific properties of various logics were integrated in a uniform way. In the following we give a rather informal account of traversal and splitting and refer to <ref> [17, 18, 7] </ref> for a complete and algorithmic presentation. Traversal of / ? . Each position x in t has to be visited and marked as solved if x is not blocked. <p> Deadlocks of above kind occur in intuitionistic logic and in all modal logics considered in [17] where additional wait-labels are required for proof reconstruction. In linear logic, wait-labels do not cause deadlocks and proof reconstruction has not to deal with this kind of redundancy <ref> [7] </ref>. Finding the appropriate isolated subrelation is the decomposition problem in / ? which we will formalize now. 6 Otherwise the subpaths which are not complementary in each subrelation could be composed into a non-complementary path which makes the matrix-proof incomplete. Definition 7. <p> Our approach refines the uniform proof reconstruction procedure presented in <ref> [17, 7] </ref> and covers classical logic C, intuitionistic logic J, the modal logics K; K4; D; D4; T; S4; S5, and fragments of linear logic. For obtaining adequate (search-free) completeness of proof reconstruction, we have classified two levels of redundancy.
Reference: 8. <author> C. Kreitz, J. Otten, and S. Schmitt. </author> <title> Guiding Program Development Systems by a Connection Based Proof Strategy. </title> <editor> In M. Proietti, ed., </editor> <booktitle> 5 th International Workshop on Logic Program Synthesis and Transformation, </booktitle> <volume> LNCS 1048, </volume> <pages> pp. 137-151. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems <ref> [8, 4] </ref> and other problem oriented applications [5]. In many applications of theorem proving it is not sufficient to show that a theorem is valid.
Reference: 9. <author> R. Letz, J. Schumann, S. Bayerl, W. Bibel. </author> <title> Setheo: A high-performance theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8 </volume> <pages> 183-212, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Automated theorem proving in non-classical logics has become important in many branches of Artificial Intelligence and Computer Science. As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) <ref> [22, 9, 3] </ref>, have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic [20, 10, 21, 19, 7].
Reference: 10. <author> H. J. Ohlbach. </author> <title> A resolution calculus for modal logics. </title> <type> Ph.D. Thesis, </type> <institution> Universitat Kaiser-slautern, </institution> <year> 1988. </year>
Reference-contexts: As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic <ref> [20, 10, 21, 19, 7] </ref>. These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5].
Reference: 11. <author> J. Otten, C. </author> <title> Kreitz. T-string-unification: unifying prefixes in non-classical proof methods. </title> <booktitle> 5 th TABLEAUX Workshop, LNAI 1071, </booktitle> <pages> pp. 244-260, </pages> <year> 1996. </year>
Reference-contexts: Proof search procedures based on the matrix characterization of logical validity are generalizations of the extension method [2] to non-normal form matrices and non-classical logics [12, 7]. They consist of a general path-checking algorithm and a uniform and efficient algorithm for prefix-unification <ref> [11] </ref>. In the following we shall use the reduction ordering / ? , a slight technical modification of (see [17]) as the starting point for proof reconstruction and consider only those aspects of which are encoded in / ? .
Reference: 12. <author> J. Otten, C. </author> <title> Kreitz. A uniform proof procedure for classical and non-classical logics. </title> <booktitle> KI-96: Advances in Artificial Intelligence, LNAI 1137, </booktitle> <pages> pp. 307-319, </pages> <year> 1996. </year>
Reference-contexts: These characterizations are the foundation of efficient and uniform proof search procedures for all these logics <ref> [12, 13, 7] </ref> which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5]. In many applications of theorem proving it is not sufficient to show that a theorem is valid. <p> In Section 2 we give a brief summary of matrix characterizations and proof reconstruction in non-classical logics. Section 3 classifies redundancies in matrix proofs and the requirements for eliminating them. In Section 4 we discuss proof knowledge available from the extension procedure <ref> [2, 12] </ref>, in particular the concept of prefixed connections, and the resulting redundancy elimination methods. <p> Based on the latter an efficient proof search procedure has been elaborated <ref> [12, 7] </ref> which captures all of these logics in a uniform way. A uniform procedure which converts matrix proofs in a particular logic into sequent proofs has been developed in [17, 7]. <p> Proof search procedures based on the matrix characterization of logical validity are generalizations of the extension method [2] to non-normal form matrices and non-classical logics <ref> [12, 7] </ref>. They consist of a general path-checking algorithm and a uniform and efficient algorithm for prefix-unification [11]. <p> In the following we characterize the knowledge that must be provided by the proof search method and assume this method to be based on the usual extension procedure <ref> [1, 2, 12] </ref>. We will encode the proof history of this procedure as reconstruction knowledge in the form of prefixed connections and derive a refinement of fi-split and (fi; fi)-purity such that T u = ~ C will always consist of a single class.
Reference: 13. <author> J. Otten. ileanTAP: </author> <title> An intuitionistic theorem prover. </title> <booktitle> 6 th TABLEAUX Workshop, </booktitle> <year> 1997. </year>
Reference-contexts: These characterizations are the foundation of efficient and uniform proof search procedures for all these logics <ref> [12, 13, 7] </ref> which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5]. In many applications of theorem proving it is not sufficient to show that a theorem is valid. <p> Apart from this we will generalize the concept of prefixed connections to other proof strategies. For example proof histories from tableau based proof procedures <ref> [13] </ref> may be expressed in terms of extension proofs in order to combine tableau provers with our proof reconstruction procedure as well.
Reference: 14. <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> J. of the ACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference-contexts: 1 Introduction Automated theorem proving in non-classical logics has become important in many branches of Artificial Intelligence and Computer Science. As a result, the resolution principle <ref> [14] </ref> and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic [20, 10, 21, 19, 7].
Reference: 15. <author> S. Schmitt. </author> <title> Avoiding Redundnacy for Proof Reconstruction in Classical and Non-Classical Logics. </title> <type> Technical Report, </type> <institution> TU-Darmstadt, </institution> <year> 1997. </year>
Reference-contexts: The proofs of the following lemmata and theorems can be found in the first author's technical report <ref> [15] </ref>. Complexity. The size of a matrix proof is usually defined as the number of inference steps for testing a mating C to be spanning.
Reference: 16. <author> S. Schmitt, C. </author> <title> Kreitz. On transforming intuitionistic matrix proofs into standard-sequent proofs. </title> <booktitle> 4 th TABLEAUX Workshop, LNAI 918, </booktitle> <pages> pp. 106-121, </pages> <year> 1995. </year>
Reference-contexts: As a complement to existing matrix-based proof search methods we have developed a uniform procedure for transforming classical and non-classical matrix proofs back into sequent style systems <ref> [16, 17, 7] </ref>.
Reference: 17. <author> S. Schmitt, C. </author> <title> Kreitz. Converting non-classical matrix proofs into sequent-style systems. </title> <journal> CADE-13, </journal> <volume> LNAI 1104, </volume> <pages> pp. 418-432, </pages> <year> 1996. </year>
Reference-contexts: As a complement to existing matrix-based proof search methods we have developed a uniform procedure for transforming classical and non-classical matrix proofs back into sequent style systems <ref> [16, 17, 7] </ref>. <p> Based on the latter an efficient proof search procedure has been elaborated [12, 7] which captures all of these logics in a uniform way. A uniform procedure which converts matrix proofs in a particular logic into sequent proofs has been developed in <ref> [17, 7] </ref>. In this section we shall present a brief summary of matrix calculi and the fundamentals of proof reconstruction 2.1 Matrix calculi for non-classical logics In matrix proof a formula F is represented by its formula tree t whose nodes are called positions. <p> The principal type Ptype (x) denotes the formula type of F x according to the tableaux classification in [21, 6]. Principal types are a compact and uniform way to express proof-relevant properties of a formula within different logics <ref> [17] </ref>. In the following we will only have to consider the types ff, fi, and atom . Two atomic positions are called ff-related (fi-related) if their greatest common predecessor in t is has principal type ff (fi). <p> They consist of a general path-checking algorithm and a uniform and efficient algorithm for prefix-unification [11]. In the following we shall use the reduction ordering / ? , a slight technical modification of (see <ref> [17] </ref>) as the starting point for proof reconstruction and consider only those aspects of which are encoded in / ? . The following example illustrates the matrix characterization of logical validity in intuitionistic logic. Example 1. <p> At a fi-position x a sequent proof branches into two independent subproofs. Accordingly, the reduction ordering / ? must be split into two suborderings / ? 1 2 and conversion continues separately on each of the two suborderings. The operation split (/ ? ; x), developed in <ref> [17] </ref> and illustrated in Figure 1, first divides / ? and then eliminates components of each / ? i which are no longer relevant for the corresponding sequent subproof. Proof reconstruction terminates when all branches of the sequent proof have been closed by converting a connection from the matrix proof. <p> The technical details of the conversion procedure are subtle since the specific properties of various logics were integrated in a uniform way. In the following we give a rather informal account of traversal and splitting and refer to <ref> [17, 18, 7] </ref> for a complete and algorithmic presentation. Traversal of / ? . Each position x in t has to be visited and marked as solved if x is not blocked. <p> P i o = (P o n fxg) [ fx i g. Formally splitting is based on the following definitions (adapted from <ref> [17] </ref>). Definition 2. Let x be a position of / ? and t x the subtree ordering with root x and position set pos (x). <p> Thus the reduction ordering / ? is is not complete wrt. rule non-permutabilities of the sequent calculus. In <ref> [17] </ref> we have therefore introduced the concept of wait-labels which are dynamically assigned to special positions of / ? during conversion and make / ? complete wrt. all non-classical logics under consideration. <p> Deadlocks of above kind occur in intuitionistic logic and in all modal logics considered in <ref> [17] </ref> where additional wait-labels are required for proof reconstruction. In linear logic, wait-labels do not cause deadlocks and proof reconstruction has not to deal with this kind of redundancy [7]. <p> Our approach refines the uniform proof reconstruction procedure presented in <ref> [17, 7] </ref> and covers classical logic C, intuitionistic logic J, the modal logics K; K4; D; D4; T; S4; S5, and fragments of linear logic. For obtaining adequate (search-free) completeness of proof reconstruction, we have classified two levels of redundancy.
Reference: 18. <author> S. Schmitt, C. </author> <title> Kreitz. A uniform procedure for converting non-classical matrix proofs into sequent-style systems. </title> <type> Technical Report AIDA-96-01, </type> <institution> TU-Darmstadt, </institution> <year> 1996. </year>
Reference-contexts: The technical details of the conversion procedure are subtle since the specific properties of various logics were integrated in a uniform way. In the following we give a rather informal account of traversal and splitting and refer to <ref> [17, 18, 7] </ref> for a complete and algorithmic presentation. Traversal of / ? . Each position x in t has to be visited and marked as solved if x is not blocked. <p> The same situation is caused by ff-reduction when solving ff 7 after fi 2 . In general, proof reconstruction will require a solution for a decomposition problem if / ? is also a deadlock. This may only occur in non-classical logics and is characterized by the following lemma (see <ref> [18] </ref> for a proof). Lemma 10. Let P r = ;.
Reference: 19. <author> T. </author> <title> Tammet A Resolution Theorem Prover for Intuitionistic Logic CADE-13, </title> <publisher> LNAI 1104, </publisher> <pages> pp. 2-16, </pages> <year> 1996. </year>
Reference-contexts: As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic <ref> [20, 10, 21, 19, 7] </ref>. These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5].
Reference: 20. <author> L. Wallen. </author> <title> Matrix proof methods for modal logics. </title> <journal> IJCAI-87, </journal> <volume> p. </volume> <pages> 917-923. </pages> <year> 1987. </year>
Reference-contexts: As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic <ref> [20, 10, 21, 19, 7] </ref>. These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5].
Reference: 21. <author> L. Wallen. </author> <title> Automated deduction in non-classical logics. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) [22, 9, 3], have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic <ref> [20, 10, 21, 19, 7] </ref>. These characterizations are the foundation of efficient and uniform proof search procedures for all these logics [12, 13, 7] which are as inference engines in automatic program development systems [8, 4] and other problem oriented applications [5]. <p> In Section 5 we present results on the complexity, adequate completeness, and correctness of the refined proof reconstruction method. 2 Preliminaries Matrix characterizations of logical validity were introduced by Bibel [1, 2] for classical logic and later extended to intuitionistic and modal logics <ref> [21] </ref> and fragments of linear logic [7]. Based on the latter an efficient proof search procedure has been elaborated [12, 7] which captures all of these logics in a uniform way. <p> Each position x of t refers to a unique subformula F x of F . 3 3 The notation F x corresponds to lab (x) in <ref> [21] </ref> but emphasizes the relation to sequents. The root w of t represents the formula F itself whereas its leaves (or atomic positions) refer to the atoms of F . Because of the corresponding subformula relation t is also called the tree ordering of F . <p> A signed formula will be denoted by F pol (x) x . The principal type Ptype (x) denotes the formula type of F x according to the tableaux classification in <ref> [21, 6] </ref>. Principal types are a compact and uniform way to express proof-relevant properties of a formula within different logics [17]. In the following we will only have to consider the types ff, fi, and atom . <p> The substitution induces a relation &lt; on the positions of t such that (x; a) 2 &lt; iff (x) = a and a is not a variable. is admissible if the reduction ordering = (t [ &lt;) + is irreflexive and some additional global conditions (see <ref> [21] </ref> for details) are fulfilled. Finally, multiple uses of subformulae in a matrix proof are represented by a combined multiplicity = h Q ; L i of the positions x in t. Using these concepts logical validity can be uniformly characterized as follows (see [21, 7] for proofs). Theorem 1. <p> Finally, multiple uses of subformulae in a matrix proof are represented by a combined multiplicity = h Q ; L i of the positions x in t. Using these concepts logical validity can be uniformly characterized as follows (see <ref> [21, 7] </ref> for proofs). Theorem 1. A formula F is valid wrt. a logic L iff there exists a multiplicity , an admissible substitution , and a set of connections C which spans F .
Reference: 22. <author> L. Wos et. al. </author> <note> Automated reasoning contributes to mathematics and logic. CADE-10, LNCS 449, </note> <author> p. </author> <month> 485-499. </month> <title> Springer 1990. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: 1 Introduction Automated theorem proving in non-classical logics has become important in many branches of Artificial Intelligence and Computer Science. As a result, the resolution principle [14] and the connection method [1, 2], which both have led to efficient theorem provers for classical logic (C) <ref> [22, 9, 3] </ref>, have been extended to characterizations of logical validity in modal logics, intuitionistic logic (J), and fragments of linear logic [20, 10, 21, 19, 7].
References-found: 22

