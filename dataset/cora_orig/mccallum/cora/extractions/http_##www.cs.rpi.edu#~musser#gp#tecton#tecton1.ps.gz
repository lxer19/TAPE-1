URL: http://www.cs.rpi.edu/~musser/gp/tecton/tecton1.ps.gz
Refering-URL: http://www.cs.rpi.edu/~musser/gp/index_4.html
Root-URL: http://www.cs.rpi.edu
Title: The Tecton Concept Description Language  
Author: David R. Musser 
Note: This work was performed while the author was on sabbatical at the Wilhelm-Schickard  
Date: September 23, 1998  
Address: Troy, New York 12180  
Affiliation: Rensselaer Polytechnic Institute  Institut fur Informatik, Universitat Tubingen.  
Abstract: This paper presents the syntax and semantics of a small language for describing and using abstract concepts in formal software development and hardware design. The language provides definition, abbreviation, extension, and lemma constructs, which have general mathematical descriptive power, plus a computation-specific realization construct. The semantics, which is denotational, includes specification of the requirements ("legality conditions") that must be met when using each construct. The syntax and semantics are such that a corresponding proof theory requires only first order and inductive proof methods, rather than general higher order techniques as required in some frameworks. The language and some of the main proof issues are illustrated with an extended example of a behavioral and structural description of a carry-lookahead adder circuit, with the circuit realization given in terms of a generic parallel-prefix cir cuit. (This is a major revision of Sections 2 and 3 of [16].) 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. S. Boyer, D. M. Goldschlag, M. Kaufman, and J S. Moore. </author> <title> "Functional Instantiation in First-Order Logic," </title> <booktitle> in Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, edited by Vladimir Lifschitz, </booktitle> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference: [2] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference: [3] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference: [4] <author> P. Briggs, Nuweb, </author> <title> a simple literate programming tool, </title> <note> Version 0.87, </note> <year> 1989. </year>
Reference-contexts: The tool we use is called Nuweb <ref> [4] </ref>, or actually a minor revision of it. 2 Another improvement still needed is better examples. I may combine this presentation with the STL container and iterator concept examples rather than continuing to use the carry-lookahead adder example.]] 2 Concepts and concept descriptions Definition of concept.
Reference: [5] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [6] <author> W. M. Farmer, J. D. Guttman, F. J. Thayer, </author> <title> "Little Theories," </title> <editor> in D. Ka-pur, ed., </editor> <booktitle> Proc. of 11th International Conference on Automated Deduction, Lecture Notes in Artificial Intelligence 607, </booktitle> <month> June </month> <year> 1992, </year> <pages> 567-581. REFERENCES 23 </pages>
Reference: [7] <author> S. J. Garland, J. V. Guttag, and J. J. Horning, </author> <title> "Debugging Larch Shared Language Specifications," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol 16, No. 9, </volume> <month> September </month> <year> 1990, </year> <pages> 1044-1057. </pages>
Reference: [8] <author> M. Gordon, </author> <title> "A proof generating system for Higher-Order Logic," </title> <editor> in: G. Birtwistle and P. Subrahmanyam, eds., </editor> <title> VLSI Specification, Verification and Synthesis, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1988, </year> <pages> pp. 73-128. </pages>
Reference: [9] <author> J. A. Goguen and R. Burstall, </author> <title> "Putting theories together to make specifications," </title> <editor> in Raj Reddy, editor, </editor> <booktitle> Proceedings, Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1045-1058. </pages>
Reference: [10] <author> J. A. Goguen, T. Winker, J. Meseguer, K. Futatsugi, and J.-P. Jouan-naud, </author> <note> "Introducing OBJ," to appear in J.A. Goguen, </note> <editor> D. Coleman, and R. Gallimore (editors). </editor> <title> Applications of Algebraic Specification using OBJ, </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [11] <author> J. A. </author> <title> Goguen "OBJ as a theorem prover, with application to hardware verification." </title> <editor> In P. Subrahmanyam and Graham Birtwistle, editors, </editor> <booktitle> Current Trends in Hardware Verification and Automated Theorem Proving, </booktitle> <pages> pp. 218-267, </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference: [12] <author> J. A. Goguen and Jose Meseguer. </author> <title> Order sorted algebra I: Equational deduction for multiple inheritance, overloading, exceptions and partial operations. </title> <type> Technical Report SRI-CSL-89-10, </type> <institution> SRI International, Computer Science Lab, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: in dom F besides those introduced in D. (Either or both of dom S and dom F could in fact be infinite). 4 One use of subsorts is to allow specification of functions as total functions on the subsort which otherwise would be partial functions on the larger sort. (See <ref> [12] </ref>, which also discusses other uses.) 2 CONCEPTS AND CONCEPT DESCRIPTIONS 5 This is a significant difference from the usual approach in which each algebra associated with a syntactic description, called a signature, has exactly the sets and functions named in the signature.
Reference: [13] <author> J. V. Guttag and J. J. Horning, </author> <title> "Report on the Larch Shared Language," </title> <journal> Sci. Comput. Program., </journal> <volume> vol. 6, no. 2, </volume> <pages> pp. 103-134, </pages> <month> Mar. </month> <year> 1986. </year>
Reference: [14] <author> J. V. Guttag, E. Horowitz, and D. R. Musser, </author> <title> "Abstract Data Types and Software Validation," </title> <journal> Comm. ACM, </journal> <volume> 21, </volume> <month> December </month> <year> 1978, </year> <pages> 1049-1064. </pages>
Reference-contexts: For assistance with this proof obligation, one may obtain from the induction principle for A a corresponding induction principle that applies to terms built with a representation function such as rep in the above example, as discussed for example in <ref> [14, Section 4] </ref>. 3 Simple examples of concept descriptions 3.1 Boolean and Natural concepts The Boolean concept is actually predefined by the semantics, but it would look as follows as a Tecton definition. hExample: Boolean concept 17ai j Definition: Boolean introduces bool, true -&gt; bool, false -&gt; bool; generates bool freely
Reference: [15] <author> J. Joyce. </author> <title> Multi-Level Verification of Microprocessor-Based Systems. </title> <type> PhD Thesis, </type> <institution> University of Cambridge, </institution> <month> December </month> <year> 1989. </year>
Reference: [16] <author> D. Kapur and D. R. Musser, Tecton: </author> <title> a framework for specifying and verifying generic system components, </title> <institution> RPI Computer Science Department Technical Report 92-20, </institution> <address> Troy, NY, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction [[Temporarily there is no introduction. I plan to add an introduction that updates the one in <ref> [16] </ref>.]] [[For those who have read [16], the primary differences are: 1. The definition of the semantics of concept instances is significantly different from that given in [16]. The old definition appears to have been logically sound but too restrictive, and some of the examples given in [16] failed to satisfy <p> 1 Introduction [[Temporarily there is no introduction. I plan to add an introduction that updates the one in <ref> [16] </ref>.]] [[For those who have read [16], the primary differences are: 1. The definition of the semantics of concept instances is significantly different from that given in [16]. The old definition appears to have been logically sound but too restrictive, and some of the examples given in [16] failed to satisfy the implied restrictions. <p> 1 Introduction [[Temporarily there is no introduction. I plan to add an introduction that updates the one in <ref> [16] </ref>.]] [[For those who have read [16], the primary differences are: 1. The definition of the semantics of concept instances is significantly different from that given in [16]. The old definition appears to have been logically sound but too restrictive, and some of the examples given in [16] failed to satisfy the implied restrictions. <p> the one in <ref> [16] </ref>.]] [[For those who have read [16], the primary differences are: 1. The definition of the semantics of concept instances is significantly different from that given in [16]. The old definition appears to have been logically sound but too restrictive, and some of the examples given in [16] failed to satisfy the implied restrictions. The case in which it was too restrictive is B [with ... x as y ...] where both x and y are already available. <p> Lemma: Strict-total-order implies Strict-weak-order. Lemma: Strict-weak-order implies Equivalence-Relation [with equiv as R]. 3 Macro referenced in scrap 27. 3.4 Binary-trees [[This a very limited version of binary trees that was used in the carry-lookahead adder example in <ref> [16] </ref>.]] hExample: Binary-tree concept 21i j REFERENCES 22 Abbreviation: Index-set is Set [with indices as domain].
Reference: [17] <author> D. Kapur and D. R. Musser, </author> <title> Examples of Tecton concept descriptions, </title> <note> working paper, </note> <month> May, </month> <year> 1992. </year>
Reference: [18] <author> D. Kapur, D. R. Musser, and Alexander A. Stepanov, </author> <title> "Operators and algebraic structures," </title> <booktitle> Proc. of Conference on Functional Programming Languages and Computer Architecture, </booktitle> <address> Portsmouth, New Hampshire, </address> <month> October </month> <year> 1981. </year>
Reference: [19] <author> D. Kapur, D. R. Musser, and A. A. Stepanov, "Tecton: </author> <title> a language for manipulating generic objects," </title> <booktitle> Proc. of Program Specification Workshop, </booktitle> <institution> University of Aarhus, Denmark, </institution> <month> August </month> <year> 1981, </year> <booktitle> Lecture Notes in Computer Science, Springer-Verlag, </booktitle> <volume> Vol. 134, </volume> <year> 1982. </year>
References-found: 19

