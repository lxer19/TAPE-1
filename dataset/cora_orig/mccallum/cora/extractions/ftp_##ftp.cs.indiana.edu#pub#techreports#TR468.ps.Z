URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR468.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Email: pierce@cs.indiana.edu  davide.sangiorgi@sophia.inria.fr  
Title: Behavioral Equivalence in the Polymorphic Pi-Calculus  
Author: Benjamin C. Pierce Davide Sangiorgi 
Date: October 2, 1996  
Address: Lindley Hall 215 Bloomington, IN 47405, USA  2004 Rue des Lucioles B.P. 93 06902 Sophia Antipolis, France  
Affiliation: Computer Science Department Indiana University  INRIA-Sophia Antipolis  Indiana University Computer Science  
Pubnum: Technical Report TR 468  
Abstract: We investigate parametric polymorphism in message-based concurrent programming, focusing on behavioral equivalences in a typed process calculus analogous to the polymorphic lambda-calculus of Girard and Reynolds. Polymorphism constrains the power of observers by preventing them from directly manipulating data values whose types are abstract, leading to notions of equivalence much coarser than the standard untyped ones. We study the nature of these constraints through simple examples of concurrent abstract data types and develop basic theoretical machinery for establishing bisimilarity of polymorphic processes. We also observe some surprising interactions between polymorphism and aliasing, drawing examples from both the polymorphic pi-calculus and ML.
Abstract-found: 1
Intro-found: 1
Reference: [Gay93] <author> Simon J. Gay. </author> <title> A sort inference algorithm for the polyadic -calculus. </title> <booktitle> In Proceedings of the Twentieth ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: Process calculi with weaker ML-style polymorphism have been developed by Gay <ref> [Gay93] </ref> and Vasconcelos and Honda [VH93]. A rather different style of polymorphism is considered by Liu and Walker [LW95]. Many other type systems have been proposed for process calculi.
Reference: [Gir72] <author> Jean-Yves Girard. </author> <title> Interpretation fonctionelle et elimination des coupures de l'arithme-tique d'ordre superieur. </title> <type> PhD thesis, </type> <institution> Universite Paris VII, </institution> <year> 1972. </year>
Reference: [Hon93] <author> Kohei Honda. </author> <title> Types for dydadic interaction. </title> <booktitle> In CONCUR'93, volume 715 of Lecture Notes in Computer Science, </booktitle> <pages> pages 509-523, </pages> <year> 1993. </year>
Reference-contexts: Another class of pi-calculus type systems for which behavioral consequences have been studied are those based on linear typing <ref> [Hon93, KPT96, Hon96] </ref>. The crucial observation here is that, in the absence of global operators such as general choice, a communication occurring on a linear ("use-once") channel can never interfere with any other communication, and hence preserves the weak bisimilarity class of the process.
Reference: [Hon96] <author> Kohei Honda. </author> <title> Composing processes. </title> <booktitle> In Principles of Programming Languages (POPL), </booktitle> <pages> pages 344-357, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Another class of pi-calculus type systems for which behavioral consequences have been studied are those based on linear typing <ref> [Hon93, KPT96, Hon96] </ref>. The crucial observation here is that, in the absence of global operators such as general choice, a communication occurring on a linear ("use-once") channel can never interfere with any other communication, and hence preserves the weak bisimilarity class of the process.
Reference: [Kob96] <author> Naoki Kobayashi. </author> <title> A partially deadlock-free typed process calculus. </title> <type> Technical report, </type> <institution> Department of Information Science, University of Tokyo, </institution> <year> 1996. </year> <note> to appear. </note>
Reference-contexts: The basic mechanisms of linearity have more recently been extended to type systems capable of guaranteeing properties such as deadlock freedom in certain cases <ref> [Yos96, Kob96] </ref>. The basic intuition behind the notion of parametricity, introduced by Strachey [Str67] and refined by Reynolds [Rey74] and others, is that a polymorphic function is parametric if its behavior is independent of (or uniform in) the type at which it is instantiated.
Reference: [KPT96] <author> Naoki Kobayashi, Benjamin C. Pierce, and David N. Turner. </author> <title> Linearity and the pi-calculus. </title> <booktitle> In Principles of Programming Languages, </booktitle> <year> 1996. </year>
Reference-contexts: Another class of pi-calculus type systems for which behavioral consequences have been studied are those based on linear typing <ref> [Hon93, KPT96, Hon96] </ref>. The crucial observation here is that, in the absence of global operators such as general choice, a communication occurring on a linear ("use-once") channel can never interfere with any other communication, and hence preserves the weak bisimilarity class of the process.
Reference: [Lar87] <author> K. G. Larsen. </author> <title> A context dependent equivalence between processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 49 </volume> <pages> 185-215, </pages> <year> 1987. </year>
Reference-contexts: Our proof technique based on polymorphic types yields a simple proof of equivalence between processes whose untyped behaviors have incomparable sets of traces. Proof techniques with this property are rare in the literature. Perhaps the best known is Larsen's relativised bisimulation <ref> [Lar87] </ref>; indeed, our method can be seen as a disciplined instance of Larsen's, in which one uses 24 types to express constraints on the behaviors of the observers, rather than explicitly writing all their possible behaviors. 11 Discussion We close with a brief discussion of some additional technical issues.
Reference: [LW95] <author> Xinxin Liu and David Walker. </author> <title> A polymorphic type system for the polyadic -calculus. </title> <booktitle> In CONCUR'95: Concurrency Theory, </booktitle> <pages> pages 103-116. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Process calculi with weaker ML-style polymorphism have been developed by Gay [Gay93] and Vasconcelos and Honda [VH93]. A rather different style of polymorphism is considered by Liu and Walker <ref> [LW95] </ref>. Many other type systems have been proposed for process calculi.
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: In the ordinary labeled bisimulations, (like the strong and weak bisimulations of CCS <ref> [Mil89] </ref>, or late and early bisimulations of the untyped pi-calculus [MPW92]) no congruence property is built into the definition, and the bisimulation game is played also on the visible actions. The main advantage of barbed equivalence is that its definition is straightforward, even in a typed setting.
Reference: [Mil91] <author> Robin Milner. </author> <title> The polyadic -calculus: a tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, UK, </institution> <month> October </month> <year> 1991. </year> <booktitle> Proceedings of the International Summer School on Logic and Algebra of Specification, Marktoberdorf, </booktitle> <month> August </month> <year> 1991. </year> <title> Reprinted in Logic and Algebra of Specification, </title> <editor> ed. F. L. Bauer, W. Brauer, and H. Schwichtenberg, </editor> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: = P j!P; and the extrusion law (- a:T )(P jQ) = ((- a:T )P )jQ if a is not free in Q; are all valid for ~ . (These laws are the main axioms of the structural congruence relation used in "chemical abstract machine style" presentations of the pi-calculus <ref> [Mil91] </ref>.) 6.2.4 Lemma: Suppose that (- a:T )P and (- a:T )Q are well-typed under . If P ~ ;a:T Q then (- a:T )P ~ (- a:T )Q. <p> To make the examples more readable, we use an extended process syntax including communication of integers and strings, union- and membership-test operations on sets, and recursive process definitions. These constructs could be taken as syntactic sugar, since data values and recursive definitions can be coded in the pi-calculus <ref> [Mil91] </ref>; for brevity of the following proofs, however, we shall take them as extensions of the syntax, since their meaning is clear and they can be accommodated in our theory with only minor and obvious modifications.
Reference: [MP88] <author> John Mitchell and Gordon Plotkin. </author> <title> Abstract types have existential type. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(3), </volume> <month> July </month> <year> 1988. </year>
Reference-contexts: The following example illustrates the use of polymorphic typing to construct abstract data typesin the pi-calculus, following Mitchell and Plotkin's encoding of ADTs in the polymorphic lambda-calculus <ref> [MP88] </ref>. Suppose we wish to implement boolean values as processes in the same way as above, but keeping hidden the details of the protocol used to implement boolean values and conditionals.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: The two lemmas below show that a type substitution does not affect the possibilities of transi tions of processes (this is not true for substitutions of names for names <ref> [MPW92] </ref>). 4.2 Lemma: P ! P 0 implies P 4.3 Lemma: Suppose that P 1. If is an output or an internal communication, then there are 0 and P 0 such that P 0 with 0 = and P 0 = R. 2. <p> If P ~ ;a:T Q then (- a:T )P ~ (- a:T )Q. Typed barbed equivalence enjoies the same kind of congruence properties as ordinary labeled bisimulation of the untyped pi-calculus <ref> [MPW92] </ref>. 6.2.5 Lemma: If P ~ ;a:T Q then (- a:T )P ~ (- a:T )Q. Proof: A consequence of Lemma 6.2.4 and of the extrusion law of Lemma 6.2.3. fl 6.2.6 Lemma: If P ~ Q then !P ~ !Q. <p> In the ordinary labeled bisimulations, (like the strong and weak bisimulations of CCS [Mil89], or late and early bisimulations of the untyped pi-calculus <ref> [MPW92] </ref>) no congruence property is built into the definition, and the bisimulation game is played also on the visible actions. The main advantage of barbed equivalence is that its definition is straightforward, even in a typed setting.
Reference: [MS92] <author> R. Milner and D. Sangiorgi. </author> <title> Barbed bisimulation. </title> <editor> In W. Kuich, editor, </editor> <booktitle> 19th ICALP, volume 623 of Lecture Notes in Computer Science, </booktitle> <pages> pages 685-695. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This ensures, for example, that the output along b in B 1 and B 2 cannot be consumed by the observer. Overview The main technical contributions of this paper are a definition of behavioral equivalence for polymorphic processes (using a typed version of the notion of barbed bisimulation <ref> [MS92, San92] </ref>) and 4 an associated proof technique by which equivalences like the one above can be established. 1 The basis of this proof technique is a refinement of the usual subject reduction theorem.
Reference: [Pit96] <author> A. M. Pitts. </author> <title> Reasoning about local variables with operationally-based logical relations. </title> <booktitle> In 11th Annual Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, </address> <year> 1996. </year>
Reference-contexts: As far as we know, this problem has not yet been tackled satisfactorily in the lambda-calculus either, though recent work by Pitts on operational accounts of parametricity <ref> [Pit96, PS96, and unpublished notes] </ref> may be relevant. Our proof technique based on polymorphic types yields a simple proof of equivalence between processes whose untyped behaviors have incomparable sets of traces. Proof techniques with this property are rare in the literature.
Reference: [PS93] <author> Benjamin Pierce and Davide Sangiorgi. </author> <title> Typing and subtyping for mobile processes. </title> <booktitle> In Logic in Computer Science, </booktitle> <year> 1993. </year> <note> Full version to appear in Mathematical Structures in Computer Science, 1996. 27 </note>
Reference-contexts: A rather different style of polymorphism is considered by Liu and Walker [LW95]. Many other type systems have been proposed for process calculi. One that particularly invites comparison with the present system is the pi-calculus with input/output modalities developed 23 by the present authors <ref> [PS93] </ref>, in which the capabilities of reading and writing on channels are distinguished and may be passed separately from one process to another.
Reference: [PS96] <author> A. M. Pitts and I. D. B. Stark. </author> <title> Operational reasoning for functions with local state. </title> <editor> In A. D. Gordon and A. M. Pitts, editors, </editor> <title> Higher Order Operational Techniques in Semantics. </title> <note> 1996. To appear. </note>
Reference-contexts: As far as we know, this problem has not yet been tackled satisfactorily in the lambda-calculus either, though recent work by Pitts on operational accounts of parametricity <ref> [Pit96, PS96, and unpublished notes] </ref> may be relevant. Our proof technique based on polymorphic types yields a simple proof of equivalence between processes whose untyped behaviors have incomparable sets of traces. Proof techniques with this property are rare in the literature.
Reference: [PT96] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Pict: A programming language based on the pi-calculus. </title> <note> To appear, </note> <year> 1996. </year>
Reference-contexts: For example, in a full-scale programming language, we would not want to combine the type constructors for channels, tuples, and type abstractions into a single syntactic form, but would separate them into orthogonal features (cf. <ref> [PT96] </ref>). They are combined here for technical convenience. The metavariables P; Q; R are used for process expressions, X, Y , and Z for type variables, S, T , U , and V for types, and lower-case letters for channel names. <p> I/O modalities can be cleanly integrated with polymorphism: for example, a variant of the polymorphic pi-calculus with I/O modalities (as well as higher-order polymorphism) forms the core of the Pict programming language <ref> [PT96] </ref>. Another class of pi-calculus type systems for which behavioral consequences have been studied are those based on linear typing [Hon93, KPT96, Hon96].
Reference: [Rey74] <author> John Reynolds. </author> <title> Towards a theory of type structure. </title> <booktitle> In Proc. Colloque sur la Program-mation, </booktitle> <pages> pages 408-425, </pages> <address> New York, 1974. </address> <publisher> Springer-Verlag LNCS 19. </publisher>
Reference-contexts: The basic mechanisms of linearity have more recently been extended to type systems capable of guaranteeing properties such as deadlock freedom in certain cases [Yos96, Kob96]. The basic intuition behind the notion of parametricity, introduced by Strachey [Str67] and refined by Reynolds <ref> [Rey74] </ref> and others, is that a polymorphic function is parametric if its behavior is independent of (or uniform in) the type at which it is instantiated.
Reference: [Rey83] <author> John C. Reynolds. </author> <title> Types, abstraction, and parametric polymorphism. </title> <editor> In R. E. A. Mason, editor, </editor> <booktitle> Information Processing 83, </booktitle> <pages> pages 513-523, </pages> <address> Amsterdam, 1983. </address> <publisher> Elsevier Science Publishers B. V. (North-Holland). </publisher>
Reference-contexts: This intuition can be phrased either intensionally | a parametric polymorphic function executes the same algorithm regardless of its type parameter | or extensionally, using Reynolds's notion of relational parametricity <ref> [Rey83] </ref>, which expresses the uniformity of behavior of polymorphic expressions in a convenient extensional form by showing how the externally observable behaviors of different instances of a polymorphic expression are "related" in a precise way.
Reference: [San92] <author> Davide Sangiorgi. </author> <title> Expressing Mobility in Process Algebras: First-Order and Higher-Order Paradigms. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Edin-burgh, </institution> <year> 1992. </year>
Reference-contexts: This ensures, for example, that the output along b in B 1 and B 2 cannot be consumed by the observer. Overview The main technical contributions of this paper are a definition of behavioral equivalence for polymorphic processes (using a typed version of the notion of barbed bisimulation <ref> [MS92, San92] </ref>) and 4 an associated proof technique by which equivalences like the one above can be established. 1 The basis of this proof technique is a refinement of the usual subject reduction theorem.
Reference: [San96] <author> Davide Sangiorgi. </author> <title> An interpretation of typed objects into typed -calculus. </title> <note> To appear as Technical Report INRIA-Sophia Antipolis, </note> <year> 1996. </year>
Reference-contexts: I/O modalities, together with variant types, have also been used to prove the adequacy of a translation of a typed object-oriented language into -calculus <ref> [San96] </ref>. One difference between the way capabilities are restricted by polymorphism and by I/O modalities is that, with the latter, an occurrence of a name which has lost certain capabilities can never recover them.
Reference: [Str67] <author> C. </author> <title> Strachey. </title> <booktitle> Fundamental concepts in programming languages. Lecture Notes, International Summer School in Computer Programming, </booktitle> <address> Copenhagen, </address> <month> August </month> <year> 1967. </year>
Reference-contexts: The basic mechanisms of linearity have more recently been extended to type systems capable of guaranteeing properties such as deadlock freedom in certain cases [Yos96, Kob96]. The basic intuition behind the notion of parametricity, introduced by Strachey <ref> [Str67] </ref> and refined by Reynolds [Rey74] and others, is that a polymorphic function is parametric if its behavior is independent of (or uniform in) the type at which it is instantiated.
Reference: [Tur96] <author> David N. Turner. </author> <title> The Polymorphic Pi-calulus: Theory and Implementation. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1996. </year>
Reference-contexts: polymorphic function that, when its first argument happens to be g, is able to test concretely for equality of its second and third arguments, even though it is given these arguments with completely abstract type. 10 Related Work The basic metatheory of the polymorphic pi-calculus has been studied by Turner <ref> [Tur96] </ref>, who also shows a strong correspondence between the polymorphic pi- and lambda-calculi by demonstrating that Milner's translations of lambda-terms into untyped pi-calculus both preserve and reflect polymorphic typing. Process calculi with weaker ML-style polymorphism have been developed by Gay [Gay93] and Vasconcelos and Honda [VH93].
Reference: [VH93] <author> Vasco T. Vasconcelos and Kohei Honda. </author> <title> Principal typing schemes in a polyadic pi-calculus. </title> <booktitle> In Proceedings of CONCUR '93, </booktitle> <month> July </month> <year> 1993. </year> <note> Also available as Keio University Report CS-92-004. </note>
Reference-contexts: Process calculi with weaker ML-style polymorphism have been developed by Gay [Gay93] and Vasconcelos and Honda <ref> [VH93] </ref>. A rather different style of polymorphism is considered by Liu and Walker [LW95]. Many other type systems have been proposed for process calculi.
Reference: [Yos96] <author> Nobuko Yoshida. </author> <title> Graph types for monadic mobile processes. </title> <type> Manuscript, </type> <month> May </month> <year> 1996. </year> <month> 28 </month>
Reference-contexts: The basic mechanisms of linearity have more recently been extended to type systems capable of guaranteeing properties such as deadlock freedom in certain cases <ref> [Yos96, Kob96] </ref>. The basic intuition behind the notion of parametricity, introduced by Strachey [Str67] and refined by Reynolds [Rey74] and others, is that a polymorphic function is parametric if its behavior is independent of (or uniform in) the type at which it is instantiated.
References-found: 25

