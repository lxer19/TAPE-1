URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-90-03.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.cs.virginia.edu
Title: SRADS WITH LOCAL ROLLBACK  
Author: Phillip M. Dickens Paul F. Reynolds, Jr. 
Note: This research was supported in part by Jet Propulsion Laboratory Contract #957721.  
Address: Charlottesville, VA 22903  
Affiliation: Institute for Parallel Computation School of Engineering and Applied Science University of Virginia  
Date: January 22, 1990  
Pubnum: IPC-TR-90-003  
Abstract-found: 0
Intro-found: 1
Reference: [ChMi79] <author> Chandy, K.M. and J. Misra, </author> <title> "Distributed Simulation: A Case Study in Design and Verification of Distributed Programs," </title> <journal> IEEE Trans on Software Engineering., </journal> <volume> SE-5,5, </volume> <month> May, </month> <year> 1979, </year> <pages> 440-452. </pages>
Reference-contexts: INTRODUCTION Most of the literature in the field of parallel discrete event simulation partitions protocol types into two basic categories: conservative <ref> [ChMi79] </ref> [PeWo79] [Reyn82] [Nico89] and optimistic (Time Warp [Jeff85]). We have shown that this is an overly simplistic taxonomy [Reyn88], instead choosing to classify protocols based, among other things, on how much aggressiveness and risk they exhibit.
Reference: [DaRe83]] <author> Davidson, D.L. and P. F. Reynolds, </author> <title> "Implementation and Performance Analysis of the SRADS Distributed Simulation Protocol" DAMACS Report No. </title> <type> 83-13, </type> <institution> University of Virginia, </institution> <month> December, </month> <year> 1983. </year>
Reference: [Fuji88] <author> Fujimoto, R., et al, </author> <title> "The Rollback Chip: Hardware Support for Distributed Simulation Using Time Warp," </title> <booktitle> Proc. of SCS Distributed Simulation Conference, </booktitle> <address> 19,3, </address> <month> Jan </month> <year> 1988, </year> <pages> 81-86. </pages>
Reference-contexts: SS can be considered negligible if we assume a separate state saving device as proposed in <ref> [Fuji88] </ref>. Thus, the remaining, dominant costs are LO and RC. In figure 2 we demonstrate a network in which RC can be made arbitrarily larger than LO, assuming that state saving is done to secondary storage, thus creating non-negligible state restoration costs.
Reference: [Jeff85] <author> Jefferson, D., </author> <title> "Virtual Time," </title> <journal> ACM TOPLAS, </journal> <volume> 7,3, </volume> <month> July, </month> <year> 1985, </year> <pages> 404-425. </pages>
Reference-contexts: INTRODUCTION Most of the literature in the field of parallel discrete event simulation partitions protocol types into two basic categories: conservative [ChMi79] [PeWo79] [Reyn82] [Nico89] and optimistic (Time Warp <ref> [Jeff85] </ref>). We have shown that this is an overly simplistic taxonomy [Reyn88], instead choosing to classify protocols based, among other things, on how much aggressiveness and risk they exhibit. Typically, protocols called conservative block when they do not have enough information to proceed.
Reference: [Nico84] <author> Nicol, </author> <title> D.M., "Synchronizing Network Performance", </title> <type> Master's Thesis, </type> <institution> University of Virginia, </institution> <month> March </month> <year> 1986. </year>
Reference-contexts: SRADS SRADS is a discrete event simulation protocol designed primarily for deterministic models where potential message arrival times are predictable. Examples of such models include logic networks, some queuing systems and generally any stochastic system that can be discretized. Studies performed by [ReKu86], [DaRe83], <ref> [Nico84] </ref> and [O'Hal83] have shown that SRADS performs quite well for this type of system. In SRADS a process that may send a message to another process is termed a writer and a process that may receive a message is termed a reader.
Reference: [Nico89] <author> Nicol, </author> <title> D.M., "The Cost of Conservative Synchronization in Parallel Discrete Event Simulations", </title> <type> unpublished manuscript, </type> <month> June, </month> <year> 1989. </year>
Reference-contexts: INTRODUCTION Most of the literature in the field of parallel discrete event simulation partitions protocol types into two basic categories: conservative [ChMi79] [PeWo79] [Reyn82] <ref> [Nico89] </ref> and optimistic (Time Warp [Jeff85]). We have shown that this is an overly simplistic taxonomy [Reyn88], instead choosing to classify protocols based, among other things, on how much aggressiveness and risk they exhibit. Typically, protocols called conservative block when they do not have enough information to proceed. <p> FIGURE 2. Network for Protocol Comparison SRADS/LR will exhibit better performance when the following inequality holds: LO + DA &lt; SS + RC + IR With sufficient activity level (see <ref> [Nico89] </ref>) we can argue that DA and IR can be negligible since they are primarily message passing costs and can be overlapped with processing. SS can be considered negligible if we assume a separate state saving device as proposed in [Fuji88]. Thus, the remaining, dominant costs are LO and RC.
Reference: [O'Hal83] <author> O'Hallaron, </author> <title> D.R., "Analysis of a Model for Distributed Simulation", </title> <type> Master's Thesis, </type> <institution> University of Vir-ginia, </institution> <month> January, </month> <year> 1983. </year>
Reference-contexts: SRADS SRADS is a discrete event simulation protocol designed primarily for deterministic models where potential message arrival times are predictable. Examples of such models include logic networks, some queuing systems and generally any stochastic system that can be discretized. Studies performed by [ReKu86], [DaRe83], [Nico84] and <ref> [O'Hal83] </ref> have shown that SRADS performs quite well for this type of system. In SRADS a process that may send a message to another process is termed a writer and a process that may receive a message is termed a reader.
Reference: [PeWo79] <author> Peacock, J.K., Wong, J.W. and E. Manning, </author> <title> "Distributed Simulation Using a Network of Processors," Computer Networks, 3, </title> <publisher> North Holland Pub., </publisher> <year> 1979, </year> <pages> 44-56. </pages>
Reference-contexts: INTRODUCTION Most of the literature in the field of parallel discrete event simulation partitions protocol types into two basic categories: conservative [ChMi79] <ref> [PeWo79] </ref> [Reyn82] [Nico89] and optimistic (Time Warp [Jeff85]). We have shown that this is an overly simplistic taxonomy [Reyn88], instead choosing to classify protocols based, among other things, on how much aggressiveness and risk they exhibit. Typically, protocols called conservative block when they do not have enough information to proceed.
Reference: [Reyn82] <author> Reynolds, P.F. </author> <title> "A Shared Resource Algorithm for Distributed Simulation," </title> <booktitle> Proc of the Ninth Annual Int'l Comp Arch Conf, </booktitle> <address> Austin, Texas, </address> <month> April, </month> <year> 1982, </year> <pages> 259-266. </pages>
Reference-contexts: INTRODUCTION Most of the literature in the field of parallel discrete event simulation partitions protocol types into two basic categories: conservative [ChMi79] [PeWo79] <ref> [Reyn82] </ref> [Nico89] and optimistic (Time Warp [Jeff85]). We have shown that this is an overly simplistic taxonomy [Reyn88], instead choosing to classify protocols based, among other things, on how much aggressiveness and risk they exhibit. Typically, protocols called conservative block when they do not have enough information to proceed. <p> This would ensure that all rollbacks are strictly local and thus there would be no cascading rollbacks. We call this approach local rollback. This paper introduces and explores the concept of a local rollback mechanism. We describe a modification to SRADS <ref> [Reyn82] </ref>, an existing synchronization protocol, that allows for more locally aggressive processing. In particular, processing based on incomplete information is allowed, but the results of this computation are not passed along until it can be guaranteed they will never have to be rolled back. <p> An interesting research question is how a local rollback scheme will perform compared to Time Warp. One of the primary advantages of SRADS/LR is that the rollback mechanism is not required to prevent deadlock. SRADS by itself has been proven deadlock free <ref> [Reyn82] </ref>. This allows for two very important options. First the process can refuse to continue to process aggressively if it is running out of memory. Thus the process can determine locally the amount of memory it will require for state saving.
Reference: [Reyn88] <author> Reynolds, P.F. </author> <title> "A Spectrum of Options for Parallel Simulation Protocols," </title> <booktitle> Proc of ACM Winter Simulation Conference, </booktitle> <month> Dec, </month> <year> 1988. </year>
Reference-contexts: INTRODUCTION Most of the literature in the field of parallel discrete event simulation partitions protocol types into two basic categories: conservative [ChMi79] [PeWo79] [Reyn82] [Nico89] and optimistic (Time Warp [Jeff85]). We have shown that this is an overly simplistic taxonomy <ref> [Reyn88] </ref>, instead choosing to classify protocols based, among other things, on how much aggressiveness and risk they exhibit. Typically, protocols called conservative block when they do not have enough information to proceed. <p> The second is the time required to periodically save state information and to rollback to an earlier state when it is discovered that some computation is incorrect. The costs of rollback can be quite large as one rollback can lead to a cascade of others. In <ref> [Reyn88] </ref> Reynolds suggests allowing aggressive processing, but placing bounds on this aggressiveness. A process could perform computations based on incomplete information, but not pass on the results of this computation until it can be guaranteed that the results will not have to be rolled back.
Reference: [ReDi89] <author> Reynolds, P.F. and Dickens, P. M., </author> <title> "SPECTRUM: </title> <booktitle> A Parallel Simulation Testbed",Proc of the 4th Annual Hypercube Conference, </booktitle> <address> Monterey, Ca., </address> <month> March, </month> <year> 1989. </year>
Reference-contexts: Thus, RC will be significant. The difference between RC and LO can be made arbitrarily large by increasing the percentage of late messages from A and/or increasing the number of processes in the subnetwork. IMPLEMENTATION We are in the process of implementing SRADS/LR on the SPECTRUM <ref> [ReDi89] </ref> Testbed at the University of Vir-ginia. SPECTRUM is a testbed for parallel discrete event simulation protocols. The testbed provides a common environment in which to test various simulation protocols. We currently have implemented SRADS and Null Messages as well as many applications.
Reference: [ReKu86] <author> Reynolds, P.F. and Kuhn, C.S., </author> <title> "Three Variations on the SRADS Simulation Protocol," </title> <booktitle> Proc of SCS Eastern Multi-conference, </booktitle> <address> Orlando, </address> <month> April, </month> <year> 1986. </year>
Reference-contexts: SRADS SRADS is a discrete event simulation protocol designed primarily for deterministic models where potential message arrival times are predictable. Examples of such models include logic networks, some queuing systems and generally any stochastic system that can be discretized. Studies performed by <ref> [ReKu86] </ref>, [DaRe83], [Nico84] and [O'Hal83] have shown that SRADS performs quite well for this type of system. In SRADS a process that may send a message to another process is termed a writer and a process that may receive a message is termed a reader.
Reference: [Theo84] <author> Theofanos, M. </author> <title> "Distributed Simulation of Queueing Networks", </title> <type> Master's Thesis, </type> <institution> University of Virginia, </institution> <month> Jan. </month> <year> 1984. </year>
Reference-contexts: As discussed above, SRADS is expected to perform best in models where this assumption is met. There is evidence to suggest that even when the message arrival times cannot be predicted that time slip is not as severe a problem as one might imagine. In <ref> [Theo84] </ref> it was shown that in the case of queuing networks time slip had little effect on mean value statistics.
References-found: 13

