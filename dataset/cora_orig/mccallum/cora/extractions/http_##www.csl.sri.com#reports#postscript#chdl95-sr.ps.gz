URL: http://www.csl.sri.com/reports/postscript/chdl95-sr.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Email: sree@csl.sri.com  
Phone: Phone: +1 (415) 859-2873 Fax: +1 (415) 859-2844  
Title: Correctness of Transformations in High Level Synthesis: Formal Verification  
Author: Sreeranga P. Rajan 
Address: Menlo Park, CA 94025, USA  
Affiliation: Computer Science Laboratory SRI International  
Abstract: This paper presents a formal approach to address the correctness of transformations in high-level synthesis. The novelty of the work is that a small set of properties that capture a general notion of refinement of control/data-flow graphs used in an industrial synthesis framework have been given, and the properties are independent of the underlying behavior model. We have mechanized the specification and verification of several optimization and refinement transformations used in industrial hardware design. This work has enabled to find and rectify errors in the transformations. Further, the work has led to generalization of transformations typically used in high-level synthesis.
Abstract-found: 1
Intro-found: 1
Reference: [AAD 93] <author> F.V. Aelten, J. Allen and S. Devadas, </author> <title> Verification of Relations between Synchronous Machines, </title> <journal> IEEE Trans. on CAD of ICs. </journal> <volume> Vol. 12, No. 12, </volume> <month> December </month> <year> 1993. </year>
Reference-contexts: In this work, a strong notion of behavior equivalence based on an imperative semantics tied to a particular model of representation is used. A post-facto verification method for comparing logic level designs against a restricted class of data flow graphs in SILAGE was presented by Aelten and others <ref> [AAD 93, Ael 94] </ref>. A formalization of SILAGE transformations in HOL was studied by Angelo [Ang 94]. 2 Overview of SIL The descriptions in SIL are presented as graphs. They are used to describe synchronous systems.
Reference: [Ael 94] <author> F.V. Aelten et.al, </author> <title> Event-Based Verification of Synchronous Globally Controlled, Logic Designs Against Signal Flow Graphs, </title> <journal> IEEE Trans. on CAD of ICs., </journal> <volume> Vol. 13, No. </volume> <month> 1 Jan </month> <year> 1994. </year>
Reference-contexts: In this work, a strong notion of behavior equivalence based on an imperative semantics tied to a particular model of representation is used. A post-facto verification method for comparing logic level designs against a restricted class of data flow graphs in SILAGE was presented by Aelten and others <ref> [AAD 93, Ael 94] </ref>. A formalization of SILAGE transformations in HOL was studied by Angelo [Ang 94]. 2 Overview of SIL The descriptions in SIL are presented as graphs. They are used to describe synchronous systems.
Reference: [Ang 94] <author> C. Angelo, </author> <type> PhD Thesis, </type> <institution> IMEC, Leuven, Belgium, </institution> <year> 1994. </year>
Reference-contexts: A post-facto verification method for comparing logic level designs against a restricted class of data flow graphs in SILAGE was presented by Aelten and others [AAD 93, Ael 94]. A formalization of SILAGE transformations in HOL was studied by Angelo <ref> [Ang 94] </ref>. 2 Overview of SIL The descriptions in SIL are presented as graphs. They are used to describe synchronous systems. The behavior of a SIL graph is derived from the behaviors of structural building blocks of the graph.
Reference: [BRB 90] <author> K.S. Brace, R.L. Rudell and R.E. Bryant, </author> <title> Efficient Implementation of a BDD Package, </title> <booktitle> Proceedings of the 27th ACM/IEEE Design Automation Conference, </booktitle> <address> Orlando, Florida, </address> <month> June 24-28, </month> <year> 1990, </year> <pages> pp. 40-45. </pages>
Reference-contexts: In general, the proofs of transformations, proceed by rewriting, using axioms and proved theorems, and finally simplifying to a set of Boolean expressions containing only relations between ports and port arrays. At this final stage the Boolean simplifier based on Binary Decision Diagrams (BDD) <ref> [BRB 90, Jan 93] </ref> integrated in PVS, is used to determine that the conjunction of Boolean expressions is indeed true.
Reference: [YIF 88] <author> R.K. Brayton, R. Camposano, G. DeMicheli, R.H.J.M. Otten, and J.T.J. van Eijndhoven, </author> <title> The Yorktown Silicon Compiler System, Silicon Compilation, </title> <editor> D. Gajski (Ed.), </editor> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: It has been implemented in a CAD tool called RetLab as part of logic synthesis at PRL. A formal analysis of transformations used in Systems Architect Workbench (SAW) high-level synthesis was studied by McFarland [McF 93]. Transformations used in YIF (Yorktown Internal Form) <ref> [YIF 88] </ref> have been proved to be behavior preserving [Cam 89]. In this work, a strong notion of behavior equivalence based on an imperative semantics tied to a particular model of representation is used.
Reference: [Cam 89] <author> R. Camposano, </author> <title> Behavior Preserving Transformations in High Level Synthesis, Hardware Specification, Verification and Synthesis: </title> <booktitle> Mathematical Aspects, Cornell MSI Workshop, Lecture Notes in Computer Science 408, </booktitle> <pages> pp 106-128, </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1989. </year>
Reference-contexts: A formal analysis of transformations used in Systems Architect Workbench (SAW) high-level synthesis was studied by McFarland [McF 93]. Transformations used in YIF (Yorktown Internal Form) [YIF 88] have been proved to be behavior preserving <ref> [Cam 89] </ref>. In this work, a strong notion of behavior equivalence based on an imperative semantics tied to a particular model of representation is used.
Reference: [Cha 92] <author> R. Chapman, G. Brown, and M. Leeser, </author> <title> Verified High-Level Synthesis in BEDROC, </title> <booktitle> Proceedings of the 1992 European Design Automation Conference, </booktitle> <address> March 1992, </address> <publisher> IEEE Press. </publisher>
Reference: [ELL 90] <institution> Computer General Electronic Design, </institution> <note> The ELLA Language Reference Manual, </note> <institution> The New Church, Henry St. Bath BA1 1JR, U.K., </institution> <note> issue 4.0, </note> <year> 1990. </year>
Reference-contexts: The synthesis system is based on a general control/data-flow graph called SPRITE Input Language (SIL) [Kro 92, Klo 92]. SIL is an intermediate language used during the synthesis of hardware described using hardware description languages such as VHDL [VHD 88], SILAGE [Hil 85], and ELLA <ref> [ELL 90] </ref>. It is used to represent both the specification at the behavior level 1 We mean by behavior model, the model governing the type and history of data values that the graph may assume 2 and the implementation at the Register Transfer Level (RTL).
Reference: [Cyr 93] <author> D. Cyrluk, </author> <title> Microprocessor Verification in PVS: A methodology and simple example, SRI-CSL-93-12, </title> <type> Technical Report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: The checking is done by comparing the specified properties of the entities. For example, one can compare if a register-transfer-level implementation of hardware satisfies the properties expressed by its high-level specification. PVS has been used for reasoning in many domains, such as in hardware verification <ref> [Cyr 93, CRS 94] </ref>, protocol verification, and algorithm verification [LOR 93].
Reference: [CRS 94] <author> D. Cyrluk, S. Rajan, N. Shankar and M. Srivas, </author> <title> Effective Theorem Proving for Hardware Verification, </title> <booktitle> Proceedings of the 2nd International Conference on Theorem Provers in Circuit Design, </booktitle> <address> Bad Heerenalb (Blackforest), Germany, </address> <month> 26-29 September, </month> <year> 1994. </year>
Reference-contexts: The checking is done by comparing the specified properties of the entities. For example, one can compare if a register-transfer-level implementation of hardware satisfies the properties expressed by its high-level specification. PVS has been used for reasoning in many domains, such as in hardware verification <ref> [Cyr 93, CRS 94] </ref>, protocol verification, and algorithm verification [LOR 93].
Reference: [EMH 93] <author> W.J.A Engelen, P.F.A. Middelhoek, C. Huijs, J. Hofstede, Th. Krol, </author> <title> Applying Software Transformations to SIL, </title> <booktitle> SPRITE deliverable Ls.a.5.2/UT/Y5/M6/1A, </booktitle> <month> June </month> <year> 1993. </year> <month> 16 </month>
Reference-contexts: The problem we undertake in this work is to provide guarantees for correctness of transformations on control/data-flow graphs, independent of the underlying behavior model 1 . A typical transformation used in high level synthesis is cross jumping tail merging <ref> [EMH 93] </ref>, shown in Figure 1. In this transformation, two identical nodes on data flow paths that are never active at the same time are merged into one node. However, as we found out using our approach explained in this paper, the transformation does not preserve behavior. <p> Figure 6 shows an unfolding of the cumulative adder over multiple clock cycles. The SIL graph description of a multiplexor shown in Figure 7 illustrates the use of a sequence edge to get the desired behavior. 2.3 Transformations in SIL There are a number of optimization and refinement transformations <ref> [EMH 93] </ref> in SIL. Many of the optimization transformations are inspired by compiler optimization techniques such as common subexpression elimination, cross jumping tail merging and algebraic transformations involving commutativity, associativity, and distribu-tivity. Other optimization transformations include retiming. <p> subexpression elimination 30 Common subexpression insertion 25 Cross jumping tail merging 56 Copy propagation 10 Constant propagation 2 Strength reduction 2 Commutativity 3 Associativity 3 Distributivity 3 Retiming 3 Self-inverse 1 Table 1: Number of Inference rule applications for various transformations distributivity and strength reduction described by Engelen and others <ref> [EMH 93] </ref> in PVS. In general, the proofs of transformations, proceed by rewriting, using axioms and proved theorems, and finally simplifying to a set of Boolean expressions containing only relations between ports and port arrays.
Reference: [Fou 90] <author> M. P. Fourman, </author> <title> Formal System Design, Formal Methods for VLSI Design, </title> <editor> J. Staunstrup (ed.), </editor> <publisher> North-Holland, IFIP 1990. </publisher>
Reference-contexts: This makes it applicable to a variety of control/data-flow graph formalisms used in different high level synthesis frameworks. A formal model was proposed for verifying correctness of high-level transformations by McFarland and Parker [McP 83]. A formal system using transformations for hardware synthesis has been discussed by Fourman <ref> [Fou 90] </ref>. A synthesis system for a language based on an algebraic formalism has been presented by Jones and Sheeran [She 90], and its formalization has been presented by Rossen [Ros 90]. Another algebraic approach to transformational design of hardware has been worked 4 out by Johnson [Joh 94].
Reference: [Hil 85] <author> P. N. Hilfinger, Silage: </author> <title> a High-level Language and Silicon Compiler for Digital Signal Processing, </title> <booktitle> Proceedings of IEEE Custom Integrated Circuits Conference pp 213-216, </booktitle> <address> Portland, OR, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: The synthesis system is based on a general control/data-flow graph called SPRITE Input Language (SIL) [Kro 92, Klo 92]. SIL is an intermediate language used during the synthesis of hardware described using hardware description languages such as VHDL [VHD 88], SILAGE <ref> [Hil 85] </ref>, and ELLA [ELL 90]. It is used to represent both the specification at the behavior level 1 We mean by behavior model, the model governing the type and history of data values that the graph may assume 2 and the implementation at the Register Transfer Level (RTL). <p> The communication of data values in a SIL graph is modeled by a single token flow concept, similar to the concept in Signal Flow Graphs (SFG) <ref> [Hil 85] </ref>. A token is an atomic symbol denoting data. A token generated at an output port (source) is transmitted through a data flow edge connecting it exactly once. The token is consumed at an input port (sink) to which the edge is connected.
Reference: [VHD 88] <author> The Institute of Electrical and Electronics Engineers, </author> <title> IEEE Standard VHDL Language Reference Manual, </title> <journal> IEEE std. </journal> <pages> 1076-88, </pages> <publisher> IEEE Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: The synthesis system is based on a general control/data-flow graph called SPRITE Input Language (SIL) [Kro 92, Klo 92]. SIL is an intermediate language used during the synthesis of hardware described using hardware description languages such as VHDL <ref> [VHD 88] </ref>, SILAGE [Hil 85], and ELLA [ELL 90].
Reference: [Jan 93] <author> G. </author> <type> Janssen, </type> <institution> ROBDD software, Department of Electrical Engineering, Technical University of Eindhoven, Eindhoven, Netherlands, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: In general, the proofs of transformations, proceed by rewriting, using axioms and proved theorems, and finally simplifying to a set of Boolean expressions containing only relations between ports and port arrays. At this final stage the Boolean simplifier based on Binary Decision Diagrams (BDD) <ref> [BRB 90, Jan 93] </ref> integrated in PVS, is used to determine that the conjunction of Boolean expressions is indeed true.
Reference: [Joh 94] <author> S. D. Johnson, </author> <title> Synthesis of Digital Designs from Recursion Equations, </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1984 </year>
Reference-contexts: A synthesis system for a language based on an algebraic formalism has been presented by Jones and Sheeran [She 90], and its formalization has been presented by Rossen [Ros 90]. Another algebraic approach to transformational design of hardware has been worked 4 out by Johnson <ref> [Joh 94] </ref>. In the work on tying formal verification to silicon compila-tion [JRS 91], a preliminary study with an emphasis on the use of formal verification at higher levels of VLSI design was presented. Correctness of register-transfer-level transformations for scheduling and allocation has been dealt with in [Vem 90].
Reference: [JRS 91] <author> J. Joyce, E. Liu, J. Rushby, N. Shankar, R. Suaya and F. von Henke, </author> <title> From Formal Verification to Silicon Compilation, </title> <booktitle> Proceedings of the IEEE Compcon, </booktitle> <address> San Francisco, CA, </address> <month> February </month> <year> 1991, </year> <pages> pp. 450-455 </pages>
Reference-contexts: Another algebraic approach to transformational design of hardware has been worked 4 out by Johnson [Joh 94]. In the work on tying formal verification to silicon compila-tion <ref> [JRS 91] </ref>, a preliminary study with an emphasis on the use of formal verification at higher levels of VLSI design was presented. Correctness of register-transfer-level transformations for scheduling and allocation has been dealt with in [Vem 90].
Reference: [Klo 92] <editor> W.E.H. Kloosterhuis, et al, </editor> <title> The SPRITE Input Language SIL-1, Language Report, SPRITE, </title> <booktitle> deliverable Ls.a.a / Philips / Y3 / M12 / 2, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: Modifications for the erroneous transformations have been proposed and incorporated. The context of our work is the synthesis framework as part of the SPRITE project at Philips Research Laboratories (PRL). The synthesis system is based on a general control/data-flow graph called SPRITE Input Language (SIL) <ref> [Kro 92, Klo 92] </ref>. SIL is an intermediate language used during the synthesis of hardware described using hardware description languages such as VHDL [VHD 88], SILAGE [Hil 85], and ELLA [ELL 90].
Reference: [Kro 92] <author> Th. Krol et.al, </author> <title> The SPRITE Input Language, An intermediate format for High Level Synthesis, </title> <booktitle> Proceedings of EDAC 92, </booktitle> <address> Brussels, </address> <month> 16-19 March </month> <year> 1992, </year> <pages> pp 186-192. </pages>
Reference-contexts: Modifications for the erroneous transformations have been proposed and incorporated. The context of our work is the synthesis framework as part of the SPRITE project at Philips Research Laboratories (PRL). The synthesis system is based on a general control/data-flow graph called SPRITE Input Language (SIL) <ref> [Kro 92, Klo 92] </ref>. SIL is an intermediate language used during the synthesis of hardware described using hardware description languages such as VHDL [VHD 88], SILAGE [Hil 85], and ELLA [ELL 90].
Reference: [KoW 93] <author> A. P. Kostelijk and A. van der Werf, </author> <title> Functional Verification for Retiming and Rebuffering Optimization, </title> <booktitle> Proceedings of The European Conference on Design Automation with the European Event in ASIC Design, </booktitle> <address> Paris, France, Feb 22-25, 1993, </address> <publisher> IEEE Computer Society Press, </publisher>
Reference-contexts: Correctness of register-transfer-level transformations for scheduling and allocation has been dealt with in [Vem 90]. An automatic method for functional verification of retiming, pipelining and buffering optimization has been presented by Kostelijk <ref> [KoW 93] </ref>. It has been implemented in a CAD tool called RetLab as part of logic synthesis at PRL. A formal analysis of transformations used in Systems Architect Workbench (SAW) high-level synthesis was studied by McFarland [McF 93].
Reference: [LOR 93] <author> Patrick Lincoln, Sam Owre, John Rushby, N. Shankar, F. von Henke, </author> <title> Eight Papers on Formal Verification, </title> <type> Technical Report SRI-CSL-93-4, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: For example, one can compare if a register-transfer-level implementation of hardware satisfies the properties expressed by its high-level specification. PVS has been used for reasoning in many domains, such as in hardware verification [Cyr 93, CRS 94], protocol verification, and algorithm verification <ref> [LOR 93] </ref>.
Reference: [McF 93] <author> M.C. McFarland, </author> <title> Formal Analysis of Correctness of Behavioral Transformations, </title> <booktitle> Formal Methods in Systems Design Vol.2, </booktitle> <pages> No.3 pp. 231-257, </pages> <publisher> Kluwer, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: It has been implemented in a CAD tool called RetLab as part of logic synthesis at PRL. A formal analysis of transformations used in Systems Architect Workbench (SAW) high-level synthesis was studied by McFarland <ref> [McF 93] </ref>. Transformations used in YIF (Yorktown Internal Form) [YIF 88] have been proved to be behavior preserving [Cam 89]. In this work, a strong notion of behavior equivalence based on an imperative semantics tied to a particular model of representation is used.
Reference: [McP 83] <author> M.C. McFarland and A.C. Parker, </author> <title> An Abstract Model of Behavior for Hardware Descriptions, </title> <journal> IEEE Trans. on Computers C-32(7), </journal> <volume> pp.621-36, </volume> <month> July </month> <year> 1983. </year>
Reference-contexts: In comparison, our work does not depend on any specific model of behavior. This makes it applicable to a variety of control/data-flow graph formalisms used in different high level synthesis frameworks. A formal model was proposed for verifying correctness of high-level transformations by McFarland and Parker <ref> [McP 83] </ref>. A formal system using transformations for hardware synthesis has been discussed by Fourman [Fou 90]. A synthesis system for a language based on an algebraic formalism has been presented by Jones and Sheeran [She 90], and its formalization has been presented by Rossen [Ros 90].
Reference: [Mid 94-1] <author> P.F.A. Middelhoek, </author> <title> Transformational Design of Digital Signal Process--ing Applications, </title> <booktitle> Proceedings of the ProRISC/IEEE workshop on CSSP, </booktitle> <month> 24 March </month> <year> 1994, </year> <pages> pp. 175-180. </pages>
Reference-contexts: Other optimization transformations include retiming. Refinement transformations include type transformations such as real to integer, integer to Boolean, and implementing data relations of the nodes by concrete operators <ref> [Mid 94-1] </ref>. 3 Formal Characterization of SIL In this section, we first introduce a relation that describes refinement on ports. The refinement relation is specified without giving a concrete model of the behavior of ports.
Reference: [Mid 94-2] <author> P.F.A. Middelhoek, </author> <title> Transformational Design of a Direction Detector for the Progressive Scan Conversion Algorithm, Preliminary, </title> <institution> Department of Computer Science, University of Twente, </institution> <month> May 25, </month> <year> 1994. </year>
Reference-contexts: Important features of SIL include hierarchy and design freedom. It has been used in the design of hardware for audio and video signal processing applications such as a direction detector for the progressive scan conversion algorithm <ref> [WMM 94, Mid 94-2] </ref>. We use a property oriented approach to address the correctness problem. In this approach, a small set of basic properties corresponding to SIL graphs are asserted to be true. Such basic properties assumed to be true are called axioms.
Reference: [OSR 93] <author> S. Owre, N. Shankar and J.M. Rushby, </author> <title> User Guide for the PVS Specification and Verification System, Language, and Proof Checker (Beta Release), </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, USA, </address> <month> February, </month> <year> 1993. </year>
Reference-contexts: (m1))) IMPLIES NOT dfe (pp,r1)) AND dfe (par00,inports (m01)) AND dfe (par11,inports (m01)) AND (FORALL par: (par /= par00 AND par /= par11) IMPLIES NOT dfe (par,inports (m01))) AND xdfe (outport (m01),r2) AND sileq (par0,par00) AND sileq (par1,par11) IMPLIES sileq (r1,r2) 4 Mechanization in PVS The Prototype Verification System (PVS) <ref> [OSR 93] </ref> is an environment for specifying entities such as hardware/software models and algorithms, and verifying properties associated with the entities. An entity is usually specified by asserting a small number of general properties that are known to be true.
Reference: [RAJ 94] <author> Sreeranga P. Rajan, </author> <title> Transformations on Dependency Graphs: Axiomatic Specification and Efficient Mechanical Verification, </title> <type> PhD Thesis, </type> <institution> University of British Columbia, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: A more detailed axiomatization appears in a forthcoming dissertation <ref> [RAJ 94] </ref>. 3 We could also allow the silimp relation to hold among sets of ports.
Reference: [Ros 90] <author> Lars Rossen, </author> <title> Formal Ruby, Formal Methods for VLSI Design, </title> <editor> J. Staunstrup (ed.), </editor> <publisher> North-Holland, IFIP 1990. </publisher>
Reference-contexts: A formal system using transformations for hardware synthesis has been discussed by Fourman [Fou 90]. A synthesis system for a language based on an algebraic formalism has been presented by Jones and Sheeran [She 90], and its formalization has been presented by Rossen <ref> [Ros 90] </ref>. Another algebraic approach to transformational design of hardware has been worked 4 out by Johnson [Joh 94].
Reference: [SOR 93] <author> N. Shankar, S. Owre,and J.M. Rushby, </author> <title> The PVS Proof Checker, A Reference Manual (Beta Release), </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, USA, March 31, </address> <year> 1993. </year>
Reference-contexts: The PVS specification language allows us to specify the properties using a convenient level of abstraction. The PVS verifier features automatic procedures and interactive inference rules to check properties of specifications. The inference rules are based on higher order logic <ref> [SOR 93] </ref>. We show SIL and our work in the context of the synthesis system in Figure 2. The 3 synthesis rest of the paper is organized as follows. We discuss related work in Section 1.1.
Reference: [She 90] <author> G. Jones and M. Sheeran, </author> <title> Circuit Design in Ruby, Formal Methods for VLSI Design, </title> <editor> J. Staunstrup (ed.), </editor> <publisher> North-Holland, IFIP 1990. </publisher>
Reference-contexts: A formal system using transformations for hardware synthesis has been discussed by Fourman [Fou 90]. A synthesis system for a language based on an algebraic formalism has been presented by Jones and Sheeran <ref> [She 90] </ref>, and its formalization has been presented by Rossen [Ros 90]. Another algebraic approach to transformational design of hardware has been worked 4 out by Johnson [Joh 94].
Reference: [Vem 90] <author> R. Vemuri, </author> <title> How to Prove the Completeness of a Set of Register Level Design Transformations, </title> <booktitle> Proceedings of the 27th Design Automation Conference, </booktitle> <pages> pp. 207-212, </pages> <address> ACM/IEEE, </address> <month> June </month> <year> 1990 </year>
Reference-contexts: In the work on tying formal verification to silicon compila-tion [JRS 91], a preliminary study with an emphasis on the use of formal verification at higher levels of VLSI design was presented. Correctness of register-transfer-level transformations for scheduling and allocation has been dealt with in <ref> [Vem 90] </ref>. An automatic method for functional verification of retiming, pipelining and buffering optimization has been presented by Kostelijk [KoW 93]. It has been implemented in a CAD tool called RetLab as part of logic synthesis at PRL.
Reference: [WMM 94] <author> A. van der Werf, J.L. van Meerbergen, O. McArdle, P.E.R. Lippens, W.F.J. Verhaegh, and D. Grant, </author> <title> Processing Unit Design, Proceedings of the SPRITE workshop on "VLSI Synthesis for DSP", </title> <type> Section 12, </type> <institution> Philips Research Labs, Eindhoven, </institution> <month> March </month> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Important features of SIL include hierarchy and design freedom. It has been used in the design of hardware for audio and video signal processing applications such as a direction detector for the progressive scan conversion algorithm <ref> [WMM 94, Mid 94-2] </ref>. We use a property oriented approach to address the correctness problem. In this approach, a small set of basic properties corresponding to SIL graphs are asserted to be true. Such basic properties assumed to be true are called axioms.
References-found: 32

