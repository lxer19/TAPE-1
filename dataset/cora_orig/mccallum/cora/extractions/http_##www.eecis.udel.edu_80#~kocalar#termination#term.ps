URL: http://www.eecis.udel.edu:80/~kocalar/termination/term.ps
Refering-URL: http://www.eecis.udel.edu:80/~kocalar/research.html
Root-URL: http://www.cis.udel.edu
Email: fkocalar,ashfaqg@eecis.udel.edu  seh@cs.purdue.edu  
Title: TERMINATION DETECTION: MODELS AND ALGORITHMS FOR SPMD COMPUTING PARADIGMS  
Author: Erturk Kocalar and Ashfaq A. Khokhar Susanne E. Hambrusch 
Keyword: Data-parallel algorithms, SPMD mode, termination detection, tree and ring networks.  
Date: September 26, 1998  
Address: 19716  West Lafayette, IN 47907  
Affiliation: Department of Electrical and Computer Engineering University of Delaware Newark, DE  Department of Computer Sciences Purdue University  
Abstract: Termination detection achieves global synchronization in Single Program Multiple Data (SPMD) applications when synchronization points cannot be explicitly placed in the program. In this paper we present two termination detection models, the APS and the AP model, which arise in different applications. In the AP model, processors are either active or passive and a passive processor can be made active by another active processor. In the APS model, processors can also be in a server state. A passive processor can enter the server state, but does not become active again. A server processor cannot change the status of other processors. We describe and analyze algorithms for both models and present experimental work highlighting the differences between the models. We show that in almost all situations the use of an AP algorithm to detect termination in an APS environment will result in a loss of performance. Our experimental work on the Cray T3E provides insight into where and why this performance loss occurs. fl Research supported in part by DARPA under contract DABT63-92-C-0022ONR. The views and conclusions contained in this paper are those of the authors and should not be interpreted as representing official policies, expressed or implied, of the U.S. government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.P. Bertsekas and J.N. Tsitsklis. </author> <title> Parallel and Distributed Computation. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The impact of this increase on overall performance is discussed in Section 5. Algorithm Tree Ack For the sake of completeness we include a second algorithm for the AP model, Algorithm Tree Ack. This algorithm is based on a well-known approach for termination detection <ref> [1] </ref>. Algorithm Tree Ack can be viewed as an algorithm with static and dynamic parental responsibility. Termination is detected by processors sending TD messages from the leaves towards the root of the static, logical tree. <p> A processor becomes passive if it completed all local work, satisfied all work request sent to it, and if all the entries in array Server i are zero. We refer to <ref> [1] </ref> for details on the correctness of Algorithm Tree Ack. 5 EXPERIMENTAL RESULTS In this section we discuss the performance of the ring- and tree-based TD algorithms on a Cray T3E using MPI message passing primitives.
Reference: [2] <author> S. Chandrasekaran and S. Venkatesan. </author> <title> A message-optimal algorithm for distributed termination detection. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 8(3) </volume> <pages> 245-252, </pages> <year> 1990. </year>
Reference-contexts: These include assuming that the sending and receiving of a message corresponds to one atomic action [23], that message sending is blocking (i.e., every send is matched by a corresponding receive operations and is thus acknowledged) [28], or that messages arrive in the order they were sent <ref> [2] </ref>. Incorporating such assumptions to an existing parallel program can lead to a significant deterioration in performance. Assume the application requiring termination detection executes on parallel system consisting of N processors. Throughout, we do not make any assumptions about the underlying interconnection network.
Reference: [3] <author> K.M. Chandy and L. Lamport. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system.
Reference: [4] <author> S. Cohen and D. Lehmann. </author> <title> Dynamic systems and their distributed termination. </title> <booktitle> In ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 29-33, </pages> <address> Ottawa, </address> <year> 1982. </year>
Reference-contexts: An example tree is shown in Figure 2. Processors becoming passive send TD information either up the tree or to a designated processor close to the root. The solutions we present belong to the parent responsibility class of termination detection algorithms <ref> [4, 7, 18] </ref>. In the logical tree every leaf corresponds to one of the N processors. PEs are grouped together in groups and one of the PEs within each group is made the parent of the group. These selected parent PEs form the second level of the tree.
Reference: [5] <author> H.G. Dietz, M.T. O'Keefe, and A. Zaafrani. </author> <title> Static scheduling for barrier MIMD architectures. </title> <journal> The Journal of Supercomputing, </journal> <volume> 5(4) </volume> <pages> 263-289, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: When synchronization only needs to ensure that no PE advances beyond a certain point and each PE knows in advance when it is going to be done with local and global computations, barrier-style synchronization primitives can generally be applied <ref> [5, 11, 16, 21, 29] </ref>. However, in many applications synchronization points cannot be explicitly or statically placed in the program and the points in time local or global computations may require synchronization are data-dependent. Termination detection achieves global synchronization for such scenarios.
Reference: [6] <author> E.W. Dijkstra, W.H.J. Feijen, and A.J.M. van Gasteren. </author> <title> Derivation of a termination detection algorithm for distributed computations. </title> <journal> Information Processing Letters, </journal> <volume> 16(5) </volume> <pages> 217-219, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system. <p> Observe that only control messages use the ring structure and that communication characteristics of work messages are determined by the application. The ring algorithms for both models are based on wave propagation concepts and are derived from Dijkstra's solution for distributed computing <ref> [6] </ref>. Termination detection in the AP model requires slightly more actions and may require an additional round through the ring to conclude termination.
Reference: [7] <author> E.W. Dijkstra and C.S. Scholten. </author> <title> Termination detection for diffusing computations. </title> <journal> Information Processing Letters, </journal> <volume> 11(1) </volume> <pages> 1-4, </pages> <month> August </month> <year> 1980. </year>
Reference-contexts: In algorithms based on a parental-relation, each PE is designated as child or/and parent and a tree structure is built on this relationship. A parent PE cannot be passive until all of its children are passive. When the root of the tree becomes passive, termination is detected <ref> [7] </ref>. <p> An example tree is shown in Figure 2. Processors becoming passive send TD information either up the tree or to a designated processor close to the root. The solutions we present belong to the parent responsibility class of termination detection algorithms <ref> [4, 7, 18] </ref>. In the logical tree every leaf corresponds to one of the N processors. PEs are grouped together in groups and one of the PEs within each group is made the parent of the group. These selected parent PEs form the second level of the tree.
Reference: [8] <author> N. Francez. </author> <title> Distributed termination. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 2(1) </volume> <pages> 42-55, </pages> <month> January </month> <year> 1980. </year> <month> 19 </month>
Reference: [9] <author> N. Francez and M. Rodeh. </author> <title> Archieving distributed termination without freezing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 8(3) </volume> <pages> 287-292, </pages> <year> 1982. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system.
Reference: [10] <author> A.Y. Grama, V. Kumar, and A. Sameh. </author> <title> Scalable parallel formulations of the barnes-hut method for n-body simulations. </title> <booktitle> In Supercomputing `94. IEEE Computer Society, </booktitle> <year> 1994. </year>
Reference-contexts: We refer to this scenario as the active-passive (AP) model. A number of parallel applications requiring termination handle incoming work requests in a different way <ref> [10, 13, 17] </ref>. In such applications, when a passive processor receives a work request from another processor, the work request obeys locality.
Reference: [11] <author> R. Gupta and C.R. Hill. </author> <title> A scalable implementation of barrier synchronization using an adaptive combining tree. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18 </volume> <pages> 161-180, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: When synchronization only needs to ensure that no PE advances beyond a certain point and each PE knows in advance when it is going to be done with local and global computations, barrier-style synchronization primitives can generally be applied <ref> [5, 11, 16, 21, 29] </ref>. However, in many applications synchronization points cannot be explicitly or statically placed in the program and the points in time local or global computations may require synchronization are data-dependent. Termination detection achieves global synchronization for such scenarios.
Reference: [12] <author> S. Haldar and D.K. Subramanian. </author> <title> Ring based termination detection algorithm for distributed computations. </title> <journal> Information Processing Letters, </journal> <volume> 29(3) </volume> <pages> 149-153, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The wave algorithms are natural solutions for termination detection. However, for parallel systems their repetitive nature and the feature that waves are following each can be unattractive. Wave algorithms that do not have repetitive property are described in <ref> [12, 15] </ref>. In algorithms based on a parental-relation, each PE is designated as child or/and parent and a tree structure is built on this relationship. A parent PE cannot be passive until all of its children are passive. When the root of the tree becomes passive, termination is detected [7].
Reference: [13] <author> S. E. Hambrusch and A. Khokhar. </author> <title> Maintaining spatial data sets in distributed-memory machines. </title> <booktitle> In Proceedings of the Eleventh International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: We refer to this scenario as the active-passive (AP) model. A number of parallel applications requiring termination handle incoming work requests in a different way <ref> [10, 13, 17] </ref>. In such applications, when a passive processor receives a work request from another processor, the work request obeys locality.
Reference: [14] <author> C. Hazari and H. Zedan. </author> <title> A distributed algorithm for distributed termination. </title> <journal> Information Processing Letters, </journal> <volume> 25(5) </volume> <pages> 293-297, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system.
Reference: [15] <author> S. Huang. </author> <title> A fully distributed termination detection scheme. </title> <journal> Information Procesing Letters, </journal> <volume> 29 </volume> <pages> 13-18, </pages> <year> 1988. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system. <p> The wave algorithms are natural solutions for termination detection. However, for parallel systems their repetitive nature and the feature that waves are following each can be unattractive. Wave algorithms that do not have repetitive property are described in <ref> [12, 15] </ref>. In algorithms based on a parental-relation, each PE is designated as child or/and parent and a tree structure is built on this relationship. A parent PE cannot be passive until all of its children are passive. When the root of the tree becomes passive, termination is detected [7].
Reference: [16] <author> T. E. Jeremiassen and S. J. Eggers. </author> <title> Static analysis of barrier synchronization in explicitly parallel programs. </title> <booktitle> In International Conference on Parallel Architectures and Compilation Techniques, </booktitle> <year> 1994. </year>
Reference-contexts: When synchronization only needs to ensure that no PE advances beyond a certain point and each PE knows in advance when it is going to be done with local and global computations, barrier-style synchronization primitives can generally be applied <ref> [5, 11, 16, 21, 29] </ref>. However, in many applications synchronization points cannot be explicitly or statically placed in the program and the points in time local or global computations may require synchronization are data-dependent. Termination detection achieves global synchronization for such scenarios.
Reference: [17] <author> K.L. Ma and T.W. Crockett. </author> <title> A scalable parallel cell-projection volume rendering algorithm for three-dimensional unstructured data. </title> <editor> In James Painter, Gordon Stoll, and Kwan-Liu Ma, editors, </editor> <booktitle> IEEE Parallel Rendering Symposium, </booktitle> <pages> pages 95-104. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1997. </year>
Reference-contexts: We refer to this scenario as the active-passive (AP) model. A number of parallel applications requiring termination handle incoming work requests in a different way <ref> [10, 13, 17] </ref>. In such applications, when a passive processor receives a work request from another processor, the work request obeys locality.
Reference: [18] <author> J. Matocha and T. </author> <title> Camp. A taxonomy of distributed termination detection algorithms. </title> <journal> Journal of Systems and Software, </journal> <year> 1997. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system. <p> We conclude this section with a brief discussion on previous and related work. Algorithms proposed for termination detection can generally be classified according to communication patterns employed, underlying network topology, algorithm symmetry, process knowledge, communication protocol, message arrival, message optimality, and fault tolerance <ref> [18] </ref>. The most popular types of termination detection algorithms are wave, parental-relation, and credibility/recovery. A wave algorithm is one in which a message is passed to each PE in the system by a single initiator or a set of initiators. Each PE then returns information to initiator (s). <p> An example tree is shown in Figure 2. Processors becoming passive send TD information either up the tree or to a designated processor close to the root. The solutions we present belong to the parent responsibility class of termination detection algorithms <ref> [4, 7, 18] </ref>. In the logical tree every leaf corresponds to one of the N processors. PEs are grouped together in groups and one of the PEs within each group is made the parent of the group. These selected parent PEs form the second level of the tree.
Reference: [19] <author> F. Mattern. </author> <title> Algorithms for distributed termination detection. </title> <journal> Distributed Computing, </journal> <volume> 2 </volume> <pages> 161-175, </pages> <year> 1987. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system.
Reference: [20] <author> F. Mattern. </author> <title> Global quiescence detection based on credit distribution and recovery. </title> <journal> Information Processing Letters, </journal> <volume> 30 </volume> <pages> 195-200, </pages> <year> 1989. </year>
Reference-contexts: A parent PE cannot be passive until all of its children are passive. When the root of the tree becomes passive, termination is detected [7]. Another class of algorithms is based on the credit/recovery or weight throwing principle <ref> [20, 22, 25, 26] </ref>. 3 RING ALGORITHMS In this section we describe termination detection algorithms for the AP and APS models when processors use a token-passing logical ring network on processors P E 0 ; : : : ; P E N1 .
Reference: [21] <author> J. M. Mellor-Crummey and M. L. Scott. </author> <title> Algorithms for scalable synchronization on shared-memory multiprocessors. </title> <journal> TOCS, </journal> <volume> 9(1) </volume> <pages> 21-65, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: When synchronization only needs to ensure that no PE advances beyond a certain point and each PE knows in advance when it is going to be done with local and global computations, barrier-style synchronization primitives can generally be applied <ref> [5, 11, 16, 21, 29] </ref>. However, in many applications synchronization points cannot be explicitly or statically placed in the program and the points in time local or global computations may require synchronization are data-dependent. Termination detection achieves global synchronization for such scenarios.
Reference: [22] <author> K. Rokusawa, N. Iciyoshi, T. Chikayama, and H. Nakashima. </author> <title> An efficient termination detection and abortion algorithm for distributed processing systems. </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <pages> pages 18-22, </pages> <year> 1988. </year>
Reference-contexts: A parent PE cannot be passive until all of its children are passive. When the root of the tree becomes passive, termination is detected [7]. Another class of algorithms is based on the credit/recovery or weight throwing principle <ref> [20, 22, 25, 26] </ref>. 3 RING ALGORITHMS In this section we describe termination detection algorithms for the AP and APS models when processors use a token-passing logical ring network on processors P E 0 ; : : : ; P E N1 .
Reference: [23] <author> S. Ronn and H. Saikkonen. </author> <title> Distributed termination detection with counters. </title> <journal> Information Processing Letters, </journal> <volume> 34 </volume> <pages> 223-227, </pages> <year> 1990. </year>
Reference-contexts: Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system. These include assuming that the sending and receiving of a message corresponds to one atomic action <ref> [23] </ref>, that message sending is blocking (i.e., every send is matched by a corresponding receive operations and is thus acknowledged) [28], or that messages arrive in the order they were sent [2]. Incorporating such assumptions to an existing parallel program can lead to a significant deterioration in performance.
Reference: [24] <author> G. Tel. </author> <title> Introduction to Distributed Algorithms. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: Section 4 describes and compares different tree-based termination detection algorithms. Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing <ref> [3, 6, 9, 14, 15, 18, 19, 24] </ref>. Solutions for parallel environments are described in [27, 28]. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system.
Reference: [25] <author> Y. Tseng. </author> <title> Detecting termination by weight-throwing in a faulty distributed system. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 25 </volume> <pages> 7-15, </pages> <year> 1995. </year>
Reference-contexts: A parent PE cannot be passive until all of its children are passive. When the root of the tree becomes passive, termination is detected [7]. Another class of algorithms is based on the credit/recovery or weight throwing principle <ref> [20, 22, 25, 26] </ref>. 3 RING ALGORITHMS In this section we describe termination detection algorithms for the AP and APS models when processors use a token-passing logical ring network on processors P E 0 ; : : : ; P E N1 .
Reference: [26] <author> S. Venkatesan. </author> <title> Reliable protocols for distributed termination detection. </title> <journal> IEEE Transactions on Reliability, </journal> <volume> 38(1) </volume> <pages> 103-110, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: A parent PE cannot be passive until all of its children are passive. When the root of the tree becomes passive, termination is detected [7]. Another class of algorithms is based on the credit/recovery or weight throwing principle <ref> [20, 22, 25, 26] </ref>. 3 RING ALGORITHMS In this section we describe termination detection algorithms for the AP and APS models when processors use a token-passing logical ring network on processors P E 0 ; : : : ; P E N1 .
Reference: [27] <author> R. Wisniewski, L. Kontothanassis, and M. L. Scott. </author> <title> High performance synchronization algorithms for multiprogrammed multiprocessors. </title> <booktitle> In Proc. Practices of Parallel Programming Conference, </booktitle> <pages> pages 199-206, </pages> <year> 1995. </year>
Reference-contexts: Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing [3, 6, 9, 14, 15, 18, 19, 24]. Solutions for parallel environments are described in <ref> [27, 28] </ref>. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system.
Reference: [28] <author> C. Xu and F.C.M. Lau. </author> <title> Efficient termination detection for loosely synchronous applications in multicomputers. </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> 7(5) </volume> <pages> 537-544, </pages> <year> 1996. </year>
Reference-contexts: Section 5 presents experimental results and comparisons for the Cray T3E and Section 6 concludes. 2 TERMINATION DETECTION Termination detection (TD) has been extensively studied in the realm of distributed processing [3, 6, 9, 14, 15, 18, 19, 24]. Solutions for parallel environments are described in <ref> [27, 28] </ref>. Termination detection solutions developed for distributed systems may make assumptions not 3 directly applicable to a parallel system. <p> These include assuming that the sending and receiving of a message corresponds to one atomic action [23], that message sending is blocking (i.e., every send is matched by a corresponding receive operations and is thus acknowledged) <ref> [28] </ref>, or that messages arrive in the order they were sent [2]. Incorporating such assumptions to an existing parallel program can lead to a significant deterioration in performance. Assume the application requiring termination detection executes on parallel system consisting of N processors.
Reference: [29] <author> H. Xu, P. K. McKinley, and L. M. Ni. </author> <title> Efficient implementation of barrier synchronization in wormhole-routed hypercube multicomputers. </title> <booktitle> In 12th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 118-125, </pages> <month> June </month> <year> 1992. </year> <month> 20 </month>
Reference-contexts: When synchronization only needs to ensure that no PE advances beyond a certain point and each PE knows in advance when it is going to be done with local and global computations, barrier-style synchronization primitives can generally be applied <ref> [5, 11, 16, 21, 29] </ref>. However, in many applications synchronization points cannot be explicitly or statically placed in the program and the points in time local or global computations may require synchronization are data-dependent. Termination detection achieves global synchronization for such scenarios.
References-found: 29

