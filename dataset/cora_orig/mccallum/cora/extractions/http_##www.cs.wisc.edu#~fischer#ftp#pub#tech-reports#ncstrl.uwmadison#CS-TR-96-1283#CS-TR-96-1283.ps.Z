URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-96-1283/CS-TR-96-1283.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-96-1283/
Root-URL: http://www.cs.wisc.edu
Title: Demand Interprocedural Dataflow Analysis a polynomial worst-case cost for both a single demand and a
Author: Susan Horwitz, Thomas Reps, and Mooly Sagiv 
Keyword: General Terms: Algorithms, Experimentation, Theory  
Note: g It has  made, or  
Affiliation: University of Wisconsin  
Abstract: An exhaustive dataflow-analysis algorithm associates with each point in a program a set of dataflow facts that are guaranteed to hold whenever that point is reached during program execution. By contrast, a demand dataflow-analysis algorithm determines whether a single given dataflow fact holds at a single given point. This paper presents a new demand algorithm for interprocedural dataflow analysis. The algorithm has four important properties: g Experimental results show that in many situations (e.g., when only a small number of demands are CR Categories and Subject Descriptors: D.2.2 [Software Engineering]: Tools and Techniques; D.3.4 [Programming Languages]: Processors compilers, optimization; E.1 [Data Structures] graphs; F.2.2 [Analysis of Algorithms and Problem Complexity]: Nonnumerical Algorithms and Problems computations on discrete structures; G.2.2 [Discrete Mathematics]: Graph Theory graph algorithms Additional Key Words and Phrases: demand dataflow analysis, distributive dataflow framework, graph reachability, interprocedural dataflow analysis, interprocedurally realizable path, interprocedurally valid path, meet-over-all-valid-paths solution hhhhhhhhhhhhhhhhhhhhhhhhhhhhh Currently at the University of Chicago. This work was supported in part by a David and Lucile Packard Fellowship for Science and Engineering, by the National Science Foundation under grants CCR-8958530 and CCR-9100424, by the Defense Advanced Research Projects Agency under ARPA Order No. 8856 (monitored by the Office of Naval Research under contract N00014-92-J-1937), by the Air Force Office of Scientific Research under grant AFOSR-91-0308, and by a grant from Xerox Corporate Research. Part of this work was done while the authors were visiting the University of Copenhagen. A preliminary version of this paper appeared in SIGSOFT 95: Proceedings of the Third ACM SIGSOFT Symposium on Foundations of Software Engineering (Washington DC, October 10-13, 1995) [Hor95] Authors' addresses: Computer Sciences Department, Univ. of Wisconsin, 1210 West Dayton Street, Madison, WI 53706, USA; Computer Science Department, University of Chicago, Ryerson Hall, 1100 E. 58th St., Chicago, IL, 60637 USA. Electronic mail: -horwitz, reps-@cs.wisc.edu; sagiv@cs.uchicago.edu g It provides precise (meet-over-all-interprocedurally-valid-paths) solutions to a large class of problems.
Abstract-found: 1
Intro-found: 1
Reference: 92. , <institution> SPEC Component CPU Integer Release 2/1992, </institution> <month> (CINT92), </month> <title> Standard Performance Evaluation Corporation (SPEC), </title> <address> Fairfax, VA (1992). Aus94. </address>
Reference-contexts: Tests were carried out on a Sun SPARCstation 20 Model 61 with 128 MB of RAM. The study used 53 C programssome standard UNIX utilities, some programs from the SPEC integer benchmark suite <ref> [92] </ref>, and some programs used for benchmarking in previous studies [Lan93,Aus94].
Reference: <author> Austin, T. M., Breach, S. E., and Sohi, G., </author> <title> Efficient detection of all pointer and array access errors, </title> <booktitle> Proceedings of the ACM SIGPLAN 94 Conference on Programming Language Design and Implementation, </booktitle> <address> (Orlando, FL, </address> <month> June 20-24, </month> <year> 1994), </year> <journal> ACM SIGPLAN Notices 29(6) pp. </journal> <month> 290-301 (June </month> <year> 1994). </year> <month> Bab78. </month>
Reference: <author> Babich, W.A. and Jazayeri, M., </author> <title> The method of attributes for data flow analysis: Part II. Demand analysis, </title> <note> Acta Informatica 10(3) pp. </note> <month> 265-272 (October </month> <year> 1978). </year> <month> Ban86. </month>
Reference: <author> Bancilhon, F., Maier, D., Sagiv, Y., and Ullman, J., </author> <title> Magic sets and other strange ways to implement logic programs, </title> <booktitle> in Proceedings of the Fifth ACM Symposium on Principles of Database Systems, </booktitle> <address> (Cambridge, MA), </address> <month> (March </month> <year> 1986). </year> <month> Ban79. </month>
Reference: <author> Banning, J.P., </author> <title> An efficient way to find the side effects of procedure calls and the aliases of variables, pp. </title> <booktitle> 29-41 in Conference Record of the Sixth ACM Symposium on Principles of Programming Languages, </booktitle> <address> (San Antonio, TX, </address> <month> January 29-31, </month> <year> 1979), </year> <month> (January </month> <year> 1979). </year> <month> Bee87. </month>
Reference: <author> Beeri, C. and Ramakrishnan, R., </author> <title> On the power of magic, pp. </title> <booktitle> 269-293 in Proceedings of the Sixth ACM Symposium on Principles of Database Systems, </booktitle> <address> (San Diego, CA, </address> <month> March </month> <year> 1987), </year> <month> (March </month> <year> 1987). </year> <month> Cal86. </month>
Reference: <author> Callahan, D., Cooper, K.D., Kennedy, K., and Torczon, L., </author> <title> Interprocedural constant propagation, </title> <booktitle> Proceedings of the SIGPLAN 86 Symposium on Compiler Construction, </booktitle> <address> (Palo Alto, CA, </address> <month> June 25-27, </month> <year> 1986), </year> <journal> ACM SIGPLAN Notices 21(7) pp. </journal> <month> 152-161 (July </month> <year> 1986). </year> <month> Cal88. </month>
Reference: <author> Callahan, D., </author> <title> The program summary graph and flow-sensitive interprocedural data flow analysis, </title> <booktitle> Proceedings of the ACM SIGPLAN 88 Conference on Programming Language Design and Implementation, </booktitle> <address> (Atlanta, GA, </address> <month> June 22-24, </month> <year> 1988), </year> <journal> ACM SIGPLAN Notices 23(7) pp. </journal> <month> 47-56 (July </month> <year> 1988). </year> <month> Coo88. </month>
Reference: <author> Cooper, K.D. and Kennedy, K., </author> <title> Interprocedural side-effect analysis in linear time, </title> <booktitle> Proceedings of the ACM SIG-PLAN 88 Conference on Programming Language Design and Implementation, </booktitle> <address> (Atlanta, GA, </address> <month> June 22-24, </month> <year> 1988), </year> <title> hhhhhhhhhhhhhhhhhhhhhhhhhhhhh 4 Strictly speaking, Callahan's problems are not quite IFDS problems because they are concerned with computing information that summarize the effects of a procedure, rather than what must be true at a program point in all calling contexts. This is only a minor technical difference, and does not invalidate the point being made above. </title> - <journal> 37 - ACM SIGPLAN Notices 23(7) pp. </journal> <month> 57-66 (July </month> <year> 1988). </year> <month> Coo89. </month>
Reference: <author> Cooper, K.D. and Kennedy, K., </author> <title> Fast interprocedural alias analysis, pp. </title> <booktitle> 49-59 in Conference Record of the Sixteenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> (Austin, TX, </address> <month> January 11-13, </month> <year> 1989), </year> <month> (January </month> <year> 1989). </year> <month> Due93. </month>
Reference: <author> Duesterwald, E., Gupta, R., and Soffa, </author> <title> M.L., Demand-driven program analysis, </title> <type> Technical Report TR-93-15, </type> <institution> Department of Computer Science, University of Pittsburgh, </institution> <address> Pittsburgh, PA (October 1993). Due95. </address>
Reference: <author> Duesterwald, E., Gupta, R., and Soffa, </author> <title> M.L., Demand-driven computation of interprocedural data flow, </title> <booktitle> in Conference Record of the Twenty-Second ACM Symposium on Principles of Programming Languages, </booktitle> <address> (San Fran-cisco, CA, </address> <month> January 23-25, </month> <year> 1995), </year> <month> (January </month> <year> 1995). </year> <month> Fis88. </month>
Reference: <author> Fischer, C.N. and LeBlanc, </author> <title> R.J., Crafting a Compiler, </title> <publisher> Benjamin/Cummings Publishing Company, Inc., </publisher> <address> Menlo Park, CA (1988). Gie81. </address>
Reference: <author> Giegerich, R., Moncke, U., and Wilhelm, R., </author> <title> Invariance of approximative semantics with respect to program transformations., pp. </title> <booktitle> 1-10 in Informatik-Fachberichte 50, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg New York (1981). Hor86. </address>
Reference: <author> Horwitz, S. and Teitelbaum, T., </author> <title> Generating editing environments based on relations and attributes, </title> <journal> ACM Transactions on Programming Languages and Systems 8(4) pp. </journal> <month> 577-608 (October </month> <year> 1986). </year> <month> Hor95. </month>
Reference: <author> Horwitz, S., Reps, T., and Sagiv, M., </author> <title> Demand interprocedural dataflow analysis, </title> <booktitle> in Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <month> (October </month> <year> 1995). </year> <month> Kil73. </month>
Reference: <author> Kildall, G., </author> <title> A unified approach to global program optimization, pp. </title> <booktitle> 194-206 in Conference Record of the First ACM Symposium on Principles of Programming Languages, </booktitle> <address> (Boston, MA, </address> <month> October 1-3, </month> <year> 1973), </year> <month> (October </month> <year> 1973). </year> <month> Kno92. </month>
Reference: <author> Knoop, J. and Steffen, B., </author> <title> The interprocedural coincidence theorem, pp. </title> <booktitle> 125-140 in Proceedings of the Fourth International Conference on Compiler Construction, (Paderborn, </booktitle> <address> FRG, </address> <month> October 5-7, </month> <year> 1992), </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 641, </volume> <editor> ed. U. Kastens and P. Pfahler,Springer-Verlag, </editor> <address> New York, NY (1992). Lan93. </address>
Reference: <author> Landi, W., Ryder, B., and Zhang, S., </author> <title> Interprocedural modification side effect analysis with pointer aliasing, pp. </title> <booktitle> 56-67 in Proceedings of the ACM SIGPLAN 93 Conference on Programming Language Design and Implementation, </booktitle> <address> (Albuquerque, NM, </address> <month> June 23-25, </month> <year> 1993), </year> <month> (June </month> <year> 1993). </year>
Reference: <institution> Lin84. </institution>
Reference: <author> Linton, M.A., </author> <title> Implementing relational views of programs, pp. </title> <booktitle> 132-140 in Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> (Pitts-burgh, PA, </address> <month> April 23-25, </month> <year> 1984), </year> <month> (April </month> <year> 1984). </year> <month> Mas80. </month>
Reference: <author> Masinter, L.M., </author> <title> Global program analysis in an interactive environment, </title> <type> Tech. Rep. </type> <institution> SSL-80-1, Xerox Palo Alto Research Center, Palo Alto, </institution> <note> CA (January 1980). Rep94a. </note>
Reference: <author> Reps, T., Sagiv, M., and Horwitz, S., </author> <title> Interprocedural dataflow analysis via graph reachability, </title> <type> Technical Report 94-14, </type> <institution> Datalogisk Institut, University of Copenhagen, Copenhagen, </institution> <address> Denmark (April 1994). Rep94b. </address>
Reference: <author> Reps, T., </author> <title> Demand interprocedural program analysis using logic databases, in Applications of Logic Databases, </title> <editor> ed. R. </editor> <publisher> Ramakrishnan,Kluwer Academic Publishers, </publisher> <address> Boston, MA (1994). Rep94c. </address>
Reference: <author> Reps, T., </author> <title> Solving demand versions of interprocedural analysis problems, pp. </title> <booktitle> 389-403 in Proceedings of the Fifth International Conference on Compiler Construction, </booktitle> <address> (Edinburgh, Scotland, </address> <month> April 7-9, </month> <year> 1994), </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 786, </volume> <editor> ed. P. Fritzson,Springer-Verlag, </editor> <address> New York, NY (1994). Rep95. </address>
Reference: <author> Reps, T., Sagiv, M., and Horwitz, S., </author> <title> Precise interprocedural dataflow analysis via graph reachability, </title> <booktitle> in - 38 - Conference Record of the Twenty-Second ACM Symposium on Principles of Programming Languages, </booktitle> <address> (San Fran-cisco, CA, </address> <month> January 23-25, </month> <year> 1995), </year> <month> (January </month> <year> 1995). </year> <month> Roh86. </month>
Reference: <author> Rohmer, R., Lescoeur, R., and Kersit, J.-M., </author> <title> The Alexander method, a technique for the processing of recursive axioms in deductive databases, </title> <journal> New Generation Computing 4(3) pp. </journal> <month> 273-285 </month> <year> (1986). </year>
Reference: <institution> Sag. </institution>
Reference: <author> Sagiv, M., Reps, T., and Horwitz, S., </author> <title> Precise interprocedural dataflow analysis with applications to constant propagation, </title> <note> Theoretical Computer Science, (). (To appear.) Sha81. </note>
Reference: <author> Sharir, M. and Pnueli, A., </author> <title> Two approaches to interprocedural data flow analysis, pp. 189-233 in Program Flow Analysis: Theory and Applications, </title> <editor> ed. S.S. Muchnick and N.D. Jones,Prentice-Hall, </editor> <address> Englewood Cliffs, NJ (1981). Ull89. </address>
Reference: <author> Ullman, J.D., </author> <title> Principles of Database and Knowledge-Base Systems, Volume II: The New Technologies, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD (1989). </address>
Reference: <institution> Wei84. </institution>
Reference: <author> Weiser, M., </author> <title> Program slicing, </title> <journal> IEEE Transactions on Software Engineering SE-10(4) pp. </journal> <month> 352-357 (July </month> <year> 1984). </year>
References-found: 33

