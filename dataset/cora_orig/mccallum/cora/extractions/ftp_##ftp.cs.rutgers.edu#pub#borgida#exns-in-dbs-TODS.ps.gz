URL: ftp://ftp.cs.rutgers.edu/pub/borgida/exns-in-dbs-TODS.ps.gz
Refering-URL: http://www.cs.rutgers.edu/~borgida/index.html
Root-URL: http://www.cs.rutgers.edu
Title: Language Features for Flexible Handling of Exceptions in Information Systems  
Author:  Alexander Borgida 
Keyword: and phrases: semantic integrity, violations of type constraints, exception handling, accommodating exceptions, conceptual models CR categories: D.2.5 (Error handling and recovery), H.2.0 (Database integrity), H.2.1 (Data models), H.2.3 (Database DDL/DML languages),  
Note: This work has been supported by the National Science Foundation under Grant No. MCS-82-10193.  
Affiliation: Department of Computer Science Rutgers University  
Abstract: We present an exception handling facility suitable for languages used to implement database-intensive Information Systems. Such a mechanism facilitates the development and maintenance of more flexible software systems by supporting the abstraction of details concerning special or abnormal occurrences. We consider the type constraints imposed by the schema as well as various semantic integrity assertions to be normalcy conditions, and the key contribution of this work is to allow exceptions to these constraints to persist. To achieve this, we propose solutions to a range of problems, including sharing and computing with exceptional information, exception handling by users, the logic of constraints with exceptions, and implementation issues. We also illustrate the use of exception handling in dealing with null values, estimates, and measurements.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Albano, A., L.Cardelli and R.Orsini. </author> <title> Galileo: a strongly typed, interactive conceptual language. </title> <type> Technical Report TR 83-11271-2 (Murray Hill, </type> <institution> NJ), Bell Laboratories, </institution> <month> July, </month> <year> 1983. </year> <note> (To appear in ACM TODS). </note>
Reference: [2] <author> Bernstein, </author> <title> P.A., Blaustein, B.T. and Clarke, E.M. Fast maintenance of semantic integrity assertions using redundant aggregate data. </title> <booktitle> In Proc. of 6th Int. Conf. On VLDB, </booktitle> <pages> pages 126-136. </pages> <address> Montreal, P.Q., </address> <month> October, </month> <year> 1980. </year>
Reference: [3] <author> Bobrow,D.G. and B. Wegbreit. </author> <title> A model and stack implementation of multiple environments. </title> <journal> Communications of the ACM 16(10) </journal> <pages> 591-603, </pages> <month> October, </month> <year> 1973. </year>
Reference: [4] <author> Borgida, A. </author> <title> Features of languages for the development of Information Systems at the Conceptual level. </title> <booktitle> IEEE Software 2(1) </booktitle> <pages> 63-73, </pages> <month> January, </month> <year> 1985. </year>
Reference: [5] <author> Brodie, </author> <title> M.L. On modelling behavioural semantics of databases. </title> <booktitle> In Proc. of 7 Int. Conf. On VLDB, </booktitle> <pages> pages 32-43. </pages> <address> Cannes, France, </address> <month> September, </month> <year> 1981. </year>
Reference: [6] <author> Buneman, O.P. and Clemons, E.K. </author> <title> Efficiently monitoring relational databases. </title> <journal> ACM TODS 4(3) </journal> <pages> 368-382, </pages> <month> September, </month> <year> 1979. </year>
Reference: [7] <author> Chan, A., Danberg, S., Fox, S., Lin, W.K., Nori, A. and Ries, D. </author> <title> Storage and access structures to support a semantic data model. </title> <booktitle> In Proc. of 8th Int. Conf. On VLDB. </booktitle> <address> Mexico, </address> <month> September, </month> <year> 1982. </year>
Reference-contexts: In the remainder of this section, we offer several techniques that can be used to achieve the above goals. We assume that information about entities is stored in records (one or more records per entity) that have index structures resembling those in relational systems (see <ref> [7] </ref>, for example). To resolve the first two problems, exceptional property values can be stored in a separate file from those of normal values. <p> (e.g., code analysis, IsA hierarchies, access statistics), attributes of a class C can be grouped into smaller sets A1, A2, ... so that the attributes of an object in Ai are often accessed together; such attributes are often stored together on the disk in order to reduce seek time ( <ref> [7] </ref>).
Reference: [8] <author> Cristian, F. </author> <title> Exception handling and software fault tolerance. </title> <journal> IEEE Transactions on Computers C-31(6):531-540, </journal> <month> June, </month> <year> 1982. </year>
Reference: [9] <author> Eswaran, K. </author> <title> Specifications, implementations and interactions of a trigger subsystem in an integrated data base system. </title> <type> Technical Report RJ 1820, </type> <institution> IBM Research, </institution> <address> San Jose, </address> <month> August, </month> <year> 1976. </year>
Reference-contexts: The latter feature of exception handling mechanisms makes them considerably more powerful than 36 previous techniques for reacting to special cases, such as triggers <ref> [9] </ref>. The mechanism we presented allows constraints to be suspended only in a controlled manner.
Reference: [10] <author> Eswaran, </author> <title> K.P. and Chamberlin, D.D. Functional specifications of a subsystem for data base integrity. </title> <booktitle> In Proc. of Int. Conf. On VLDB, pages 48:67. </booktitle> <address> Framingham, Mass., </address> <month> September, </month> <year> 1975. </year>
Reference: [11] <author> Goodenough, J.B. </author> <title> Exception handling: Issues and a proposed notation. </title> <journal> CACM 18 </journal> <pages> 683-696, </pages> <month> December, </month> <year> 1975. </year>
Reference: [12] <author> Gray, J. et al. </author> <title> The recovery manager of the System R Database Manager. </title> <journal> ACM Computing Surveys 13(2) </journal> <pages> 223-242, </pages> <month> June, </month> <year> 1981. </year>
Reference: [13] <author> Grzegorczyk, A. </author> <title> An outline of mathematical logic. </title> <publisher> Reidel Publishing Co., </publisher> <year> 1974. </year>
Reference-contexts: However, since the formula P actually defines the predicate P*, according to a theorem in logic on the elimination of definitions in proofs (e.g., <ref> [13] </ref>), we can uniformly substitute the right hand side of this definition throughout Y, to obtain Y*, which is equivalent to Y&lt;P*/P&gt; in the sense that the conclusions derivable from Y&lt;P*/P&gt; P D are identical to those derivable from Y* D. But this is exactly what was desired. Q.E.D.
Reference: [14] <author> Hammer, M. and McLeod, D. </author> <title> Semantic integrity in a relational database system. </title> <booktitle> In Proc. of Int. Conf. On VLDB, </booktitle> <pages> pages 25-47. </pages> <address> Framingham, Mass., </address> <month> September, </month> <year> 1975. </year> <month> 39 </month>
Reference: [15] <author> Ichbiah, J.D. et al. </author> <title> Rationale for the Design of the ADA Programming Language. </title> <journal> ACM SIGPLAN Notices 14(6), </journal> <month> June, </month> <year> 1979. </year>
Reference: [16] <author> Kent, W. </author> <title> Limitations of record based information models. </title> <journal> ACM TODS 4(1) </journal> <pages> 107-131, </pages> <month> March, </month> <year> 1979. </year>
Reference: [17] <author> Koenig, S. and Paige, R. </author> <title> A transformational framework for the automatic control of virtual data. </title> <booktitle> In Proc. of 7th Int. Conf. On VLDB. </booktitle> <address> Cannes, France, </address> <month> September, </month> <year> 1981. </year>
Reference: [18] <author> Kunin, J.S. </author> <title> Analysis and specification of office procedures. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> February, </month> <year> 1982. </year>
Reference: [19] <author> Levin, R. </author> <title> Program sturctures for exceptional condition handling. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <month> June, </month> <year> 1977. </year>
Reference-contexts: SOME IMPLEMENTATION CONSIDERATIONS There appears to be general agreement on the need for exception handling in modern programming languages, and in particular Taxis already has such facilities. We therefore do not consider here any 13 problems connected with this issue alone (see <ref> [19] </ref> or [20] for implementation discussions). Instead, we offer several techniques for dealing with the problems raised by allowing exceptional facts to enter the database through resumption -- the major novelty of the present proposal. In particular, we consider the costs of permitting violations of type constraints.
Reference: [20] <author> Liskov, B.H. and Snyder, A. </author> <title> Exception handling in CLU. </title> <journal> IEEE Trans. Software Eng. </journal> <volume> SE-5(6):546-558, </volume> <month> November, </month> <year> 1979. </year>
Reference-contexts: SOME IMPLEMENTATION CONSIDERATIONS There appears to be general agreement on the need for exception handling in modern programming languages, and in particular Taxis already has such facilities. We therefore do not consider here any 13 problems connected with this issue alone (see [19] or <ref> [20] </ref> for implementation discussions). Instead, we offer several techniques for dealing with the problems raised by allowing exceptional facts to enter the database through resumption -- the major novelty of the present proposal. In particular, we consider the costs of permitting violations of type constraints. <p> Among others, resume can then be used to allow exceptional facts to enter into the database. On-line handling of exceptions is also useful in specifying in a context-dependent manner how to react to such information when we encounter it later. Readers familiar with <ref> [20] </ref> may argue that the resume statement is contrary to good software engineering practice because it requires one to break the procedural abstraction barrier: one needs to find out about the internals of the procedure in order to decide on future actions.
Reference: [21] <author> Minsky, N. and A. Borgida. </author> <title> The Darwin Software Development Environment for Evolving Systems. </title> <editor> In P. Henderson (editor), </editor> <booktitle> Proceedings of ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Pratcical Software Development Environments, pages 89:95. ACM SIGPLAN Notices Vol.19, </booktitle> <address> No.5, </address> <month> April, </month> <year> 1984. </year>
Reference-contexts: We are also considering the protection issues raised by run-time specification of exception handling code, by studying the in-vivo evolution of programs allowed by the Darwin system <ref> [21] </ref>. Acknowledgments I have greatly benefitted from the comments and encouragment of numerous colleagues, and the timely and detailed suggestions of the referees 38
Reference: [22] <author> Mylopoulos, J., Bernstein, P.A. and Wong, H.K.T. </author> <title> A language facility for designing interactive database-intensive systems. </title> <journal> ACM TODS 5(2) </journal> <pages> 185-207, </pages> <month> June, </month> <year> 1980. </year>
Reference: [23] <author> Reiter, R. </author> <title> Towards a logical reconstruction of relational database theory. </title> <editor> In M.Brodie, J.Mylopoulos and J.Schmidt (editors), </editor> <booktitle> On Conceptual Modelling, </booktitle> <pages> pages 191-233. </pages> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference: [24] <author> Schwartz, </author> <title> S.P. (editor). Naming, Necessity and Natural Kinds. </title> <publisher> Cornell University Press, </publisher> <year> 1977. </year>
Reference: [25] <author> Smith, J.M. and D.C.P.Smith. </author> <title> Database abstractions: aggregation and generalization. </title> <journal> ACM TODS 2(2) </journal> <pages> 105-133, </pages> <month> June, </month> <year> 1977. </year>
Reference: [26] <author> Smith, J.M., Fox, S. and Landers, T. </author> <title> Reference Manual for ADAPLEX. </title> <type> Technical Report CCA-81-02, </type> <institution> Computer Corp. of America, </institution> <month> January, </month> <year> 1981. </year>
Reference: [27] <author> Stonebraker, M. </author> <title> Implementation of integrity constraints and views by query modification. </title> <booktitle> In Proc. ACM SIGMOD Conf. Management of Data. </booktitle> <month> May, </month> <year> 1975. </year>
Reference: [28] <author> Teitelman, W. </author> <note> INTERLISP Reference Manual 4th edition, XEROX PARC, 1974. 40 </note>
Reference: [29] <author> Wasserman, </author> <title> A.I. Procedure-oriented exception-handling. </title> <type> Technical Report 27, </type> <institution> Medical Information Science, University of California, </institution> <address> San Francisco, </address> <month> February, </month> <year> 1977. </year>
Reference: [30] <author> Yemini, S. and D.M.Berry. </author> <title> A modular verifiable exception-handling mechanism. </title> <journal> ACM Trans. Prog. Languages and Systems 7(2) </journal> <pages> 214-243, </pages> <month> April, </month> <year> 1985. </year>

References-found: 30

