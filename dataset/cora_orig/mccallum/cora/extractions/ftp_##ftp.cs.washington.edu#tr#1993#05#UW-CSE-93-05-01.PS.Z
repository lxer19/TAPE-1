URL: ftp://ftp.cs.washington.edu/tr/1993/05/UW-CSE-93-05-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/hclp/wilson-phd.html
Root-URL: 
Title: Hierarchical Constraint Logic Programming  
Note: (Ph.D. Dissertation) Molly Ann Wilson  
Abstract: Technical Report 93-05-01 Dept. of Computer Science and Engineering University of Washington May 1993 
Abstract-found: 1
Intro-found: 1
Reference: [Apt et al. 88] <author> Krzysztof R. Apt, Howard R. Blair, and Adrian Walker. </author> <title> Towards a Theory of Declarative Knowledge. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1988. </year>
Reference: [Bill & Lundell 90] <author> Thomas Bill and Bertil Lundell. </author> <title> Using the Simplex Method for Solving Layout Constraints in Scientific Diagrams, </title> <month> September </month> <year> 1990. </year> <title> Project report for Master's degree in Computer Science and Engineering, </title> <institution> School of Computer Science and Engineering, Royal Institute of Technology, Stockholm, Sweden. Work done at Departments of Statistics and Computer Science and Engineering, University of Washington. </institution>
Reference-contexts: completely independent in the graphical layout system of 69 global array S [n]; l index of modified level; for i l : : : n do t Flat.filter ( S [i 1], H i ); if t = S [i] then return S [n]; S [i] t; return S [n]; <ref> [Bill & Lundell 90] </ref> and, by solving for each dimension independently, they more than halved the response time. Similarly, when using a constraint hierarchy, two subproblems may be disjoint through level i 1 but connected at level i.
Reference: [Borning 81] <author> Alan Borning. </author> <title> The Programming Language Aspects of ThingLab, A Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: The discarding-all-but-one technique has the disadvantage that the remaining solutions can never be examined, but the powerful advantage of using less memory. 6.3 Other Algorithms Although not designed for solving constraint hierarchies, many other constraint solving techniques are available, including augmented term rewriting [Leler 87], relaxation <ref> [Borning 81, Konopasek & Jayaraman 84, Sutherland 63] </ref>, and searching for a solution over a finite domain. Augmented term rewriting is an equation rewriting technique borrowed from functional programming languages, with added support for objects and multi-directional constraints. <p> This is the same behavior as was exhibited by the original ThingLab <ref> [Borning 81] </ref>, but now produced as a consequence of declaratively represented hard and soft constraints. In a similar manner, we can (without any hard thinking required) translate all of the ThingLab examples into HCLP (R). For the more complex examples, the HCLP code becomes tediously long.
Reference: [Borning et al. 89] <author> Alan Borning, Michael Maher, Amy Martindale, and Molly Wilson. </author> <title> Constraint Hierarchies and Logic Programming. </title> <booktitle> In Proceedings of the Sixth International Conference on Logic Programming, </booktitle> <pages> pages 149-164, </pages> <address> Lisbon, </address> <month> June </month> <year> 1989. </year>
Reference: [Borning et al. 92] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint Hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: If an a priori lower bound B on the value of Var is known, then a call to minimize (Var) could be replaced by a soft constraint medium Var = B. 2 However, if an a priori bound is not known, then this simulation would not work. Reference <ref> [Borning et al. 92] </ref> describes how the constraint hierarchy theory can be extended to include objective functions.
Reference: [Brewka 89] <author> Gerhard Brewka. </author> <title> Preferred Subtheories: An Extended Logical Framework for Default Reasoning. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1043-1048, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Brewka <ref> [Brewka 89] </ref> describes an approach to representing default information with multiple levels of preference. In this framework, there are many levels of theories, some of which are more preferred than others. <p> As with inter-hierarchy comparison, having both required and preferred predicates involves difficulties with both representing and computing a possibly infinite number of solutions to a subproblem. However, previous work in default reasoning within standard logic <ref> [Brewka 89] </ref> suggests that there is a theoretical basis for adding labels to predicates. In addition, current research on the Kaleidoscope programming language [Freeman-Benson & Borning 92b, Freeman-Benson & Borning 92a] indicates that these "soft" predicates could be quite useful, specifically in the case of user-generated constraints.
Reference: [Cohen 90] <author> Jacques Cohen. </author> <title> Constraint Logic Programming Languages. </title> <journal> Communications of the ACM, </journal> <volume> 33(7) </volume> <pages> 52-68, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Instead, using the more standard intra-hierarchy comparisons, Callie's preference would have no effect on the other mealtimes (using a predicate comparator), but it would move the dinner hour to after 6:00 p.m. Chapter 8 Related Work 8.1 Constraint Logic Programming Languages HCLP builds on the CLP scheme <ref> [Cohen 90, Jaffar & Lassez 87] </ref>.
Reference: [Colmerauer 90] <author> Alain Colmerauer. </author> <title> An Introduction to Prolog III. </title> <journal> Communications of the ACM, </journal> <pages> pages 69-90, </pages> <month> July </month> <year> 1990. </year>
Reference: [del Val & Shoham 92] <author> Alvaro del Val and Yoav Shoham. </author> <title> Deriving Properties of Belief Update from Theories of Action. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 584-589, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: These areas are all related in a broad sense in that they involve reasoning in the presence of change: either change through time, change in knowledge, or change in observation. (Reference <ref> [del Val & Shoham 92] </ref> explores the relationship between temporal reasoning and belief update and 96 shows that the latter can be expressed in terms of the former.) In the case of default reasoning, new information may involve eliminating false assumptions, just as adding new constraints to a constraint hierarchy may
Reference: [Descotte & Latombe 85] <author> Yannick Descotte and Jean-Claude Latombe. </author> <title> Making Compromises among Antagonist Constraints in a Planner. </title> <journal> Artificial Intelligence, </journal> <volume> 27(2) </volume> <pages> 183-217, </pages> <month> November </month> <year> 1985. </year> <month> 102 </month>
Reference-contexts: Fox [Fox 87] discusses the problem of constraint-directed reasoning for job-shop scheduling, and allows the relaxation of constraints when conflicts occur, and context-sensitive selection and weighted interpretation of constraints. Descotte and Latombe <ref> [Descotte & Latombe 85] </ref> make compromises by selective backtracking among inconsistent constraints in a planner for manufacturing. Freuder [Freuder 92] gives a general model for partial constraint satisfaction problems (PCSPs) for variables ranging over finite domains, extending the standard CSP model.
Reference: [Dincbas et al. 88] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Bertheir. </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> In Proceedings Fifth Generation Computer Systems-88, </booktitle> <year> 1988. </year>
Reference-contexts: domains, such as booleans, finite domains, or trees, supported by existing CLP languages (e.g., [Colmerauer 90, Dincbas et al. 88, Jaffar & Michaylov 87, Jaffar et al. 92, Satoh & Aiba 90, Sidebottoms & Havens 91, Van Hentenryck 89, Walinsky 89]). 1 A number of CLP languages, for example CHIP <ref> [Dincbas et al. 88, Van Hentenryck 89] </ref>, include a minimize operator.
Reference: [Ege et al. 87] <author> Raimund Ege, David Maier, and Alan Borning. </author> <title> The Filter Browser|Defining Interfaces Graphically. </title> <booktitle> In Proceedings of the European Conference on Object-Oriented Programming, </booktitle> <pages> pages 155-165, </pages> <address> Paris, </address> <month> June </month> <year> 1987. </year> <institution> Association Fran~caise pour la Cybernetique Economique et Technique. </institution>
Reference-contexts: However, since the full power of logic programming is available, we can do considerably more. For example, filters are a powerful metaphor for the declarative construction of user interfaces. In the filter browser described in <ref> [Ege et al. 87] </ref>, the screen view of some source object is constructed by passing the object through a series of filters to produce the final image. Each filter is represented as a collection of constraints (some of which may be required and some non-required) relating its input and output.
Reference: [Emden & Kowalksi 76] <author> M.H. Van Emden and R.A. Kowalksi. </author> <title> The Semantics of Predicate Logic as a Programming Language. </title> <journal> Journal of the ACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <month> October </month> <year> 1976. </year>
Reference: [Fox 87] <author> Mark S. Fox. </author> <title> Constraint-Directed Search: A Case Study of Job-Shop Scheduling. </title> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, California, </address> <year> 1987. </year>
Reference-contexts: In addition, all variables have very weak equality constraints between their successive states, so that in the absence of stronger constraints, a variable will retain its value over time. 8.3 Applications There is a substantial body of related research in the artificial intelligence community. Fox <ref> [Fox 87] </ref> discusses the problem of constraint-directed reasoning for job-shop scheduling, and allows the relaxation of constraints when conflicts occur, and context-sensitive selection and weighted interpretation of constraints. Descotte and Latombe [Descotte & Latombe 85] make compromises by selective backtracking among inconsistent constraints in a planner for manufacturing.
Reference: [Freeman-Benson & Borning 92a] <author> Bjorn Freeman-Benson and Alan Borning. </author> <title> Integrating Constraints with an Object-Oriented Language. </title> <booktitle> In Proceedings of the 1992 European Conference on Object-Oriented Languages, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: However, previous work in default reasoning within standard logic [Brewka 89] suggests that there is a theoretical basis for adding labels to predicates. In addition, current research on the Kaleidoscope programming language <ref> [Freeman-Benson & Borning 92b, Freeman-Benson & Borning 92a] </ref> indicates that these "soft" predicates could be quite useful, specifically in the case of user-generated constraints.
Reference: [Freeman-Benson & Borning 92b] <author> Bjorn Freeman-Benson and Alan Borning. </author> <title> The Design and Implementation of Kaleidoscope'90, A Constraint Imperative Programming Language. </title> <booktitle> In Proceedings of the IEEE Computer Society International Conference on Computer Languages, </booktitle> <pages> pages 174-180, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: However, previous work in default reasoning within standard logic [Brewka 89] suggests that there is a theoretical basis for adding labels to predicates. In addition, current research on the Kaleidoscope programming language <ref> [Freeman-Benson & Borning 92b, Freeman-Benson & Borning 92a] </ref> indicates that these "soft" predicates could be quite useful, specifically in the case of user-generated constraints.
Reference: [Freeman-Benson & Maloney 89] <author> Bjorn Freeman-Benson and John Maloney. </author> <title> The DeltaBlue Algorithm: An Incremental Constraint Hierarchy Solver. </title> <booktitle> In Proceedings of the Eighth Annual IEEE Phoenix Conference on Computers and Communications, </booktitle> <address> Scottsdale, Arizona, </address> <month> March </month> <year> 1989. </year> <note> IEEE. </note>
Reference: [Freeman-Benson & Wilson 90] <author> Bjorn Freeman-Benson and Molly Wilson. DeltaStar, </author> <title> How I Wonder What You Are: A General Algorithm for Incremental Satisfaction of Constraint Hierarchies. </title> <type> Technical Report 90-05-02, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Therefore, we designed another set of algorithms that can solve constraint hierarchies consisting of arbitrary collections of linear equality and inequality constraints using the weighted-sum-metric-better, worst-case-better, and locally-metric-better comparators. These algorithms are instances of our general DeltaStar <ref> [Freeman-Benson & Wilson 90, Freeman-Benson et al. 92] </ref> framework and are collectively referred to as the Orange algorithms. The DeltaStar framework is an algorithm for incrementally solving a constraint hierarchy, based on an alternate, but provably equivalent, description of the constraint hierarchy. <p> However, all the algorithms work equally well for removing constraints. A complete listing of the code for the DeltaStar algorithm is available in <ref> [Freeman-Benson & Wilson 90] </ref>. The Flat Solver Interface The DeltaStar algorithm is built above a flat constraint solver that provides the actual constraint solving techniques and comparison methods.
Reference: [Freeman-Benson 90] <author> Bjorn Freeman-Benson. </author> <title> Kaleidoscope: Mixing Objects, Constraints, and Imperative Programming. </title> <booktitle> In Proceedings of the 1990 Conference on Object-Oriented Programming Systems, Languages, and Applications, and European Conference on Object-Oriented Programming, </booktitle> <pages> pages 77-88, </pages> <address> Ottawa, Canada, Oc-tober 1990. </address> <publisher> ACM. </publisher>
Reference: [Freeman-Benson 91] <author> Bjorn N. Freeman-Benson. </author> <title> Constraint Imperative Programming. </title> <type> PhD thesis, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> July </month> <year> 1991. </year> <note> Published as Department of Computer Science and Engineering Technical Report 91-07-02. </note>
Reference-contexts: The difficulties are formally described in <ref> [Wilson 91, Freeman-Benson 91] </ref>, but informally the problem is that global comparators use a total order over the valuations but local comparators use a partial order.
Reference: [Freeman-Benson et al. 89] <author> Bjorn Freeman-Benson, John Maloney, and Alan Borning. </author> <title> The DeltaBlue Algorithm: An Incremental Constraint Hierarchy Solver. </title> <type> Technical Report 89-08-06, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> August </month> <year> 1989. </year>
Reference: [Freeman-Benson et al. 90] <author> Bjorn Freeman-Benson, John Maloney, and Alan Borning. </author> <title> An Incremental Constraint Solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <month> January </month> <year> 1990. </year> <month> 103 </month>
Reference-contexts: Rather, we need to look for algorithms specialized by one or more attributes. In <ref> [Freeman-Benson et al. 90] </ref> a number of algorithms for solving constraint hierarchies are outlined, each of which makes a trade-off between generality and efficiency. Much of the constraint hierarchy research so far has used the locally-predicate-better comparator over arbitrary domains. <p> For more details on the incremental acyclic algorithm, the reader is referred to [Freeman-Benson & Maloney 89, Freeman-Benson et al. 89, Freeman-Benson et al. 90, Maloney 91, Sannella et al. 93]; <ref> [Freeman-Benson et al. 90] </ref> and [Maloney 91] include proofs of correctness and complexity results. 64 6.2 Algorithms for Linear Equality and Inequality Con straints One disadvantage of local propagation algorithms is that they usually cannot reliably handle cycles in the constraint graph. <p> Our recent work on constraint-based systems for user interface toolkits (ThingLab II [Maloney et al. 89, Maloney 91] and Multi-Garnet [San-nella & Borning 92]) has used the locally-predicate-better comparator. This choice has been based primarily on pragmatic rather than aesthetic or theoretical grounds: the existence of efficient incremental algorithms|DeltaBlue <ref> [Freeman-Benson et al. 90] </ref> and a derivative algorithm SkyBlue [Sannella 92]|for finding LPB solutions. For user interface applications, we do have extensive experience in the practical use of LPB [Sannella et al. 93]. It also been used by a considerable number of researchers at other institutions as well.
Reference: [Freeman-Benson et al. 92] <author> Bjorn Freeman-Benson, Molly Wilson, and Alan Borning. </author> <month> DeltaStar: </month>
Reference-contexts: Therefore, we designed another set of algorithms that can solve constraint hierarchies consisting of arbitrary collections of linear equality and inequality constraints using the weighted-sum-metric-better, worst-case-better, and locally-metric-better comparators. These algorithms are instances of our general DeltaStar <ref> [Freeman-Benson & Wilson 90, Freeman-Benson et al. 92] </ref> framework and are collectively referred to as the Orange algorithms. The DeltaStar framework is an algorithm for incrementally solving a constraint hierarchy, based on an alternate, but provably equivalent, description of the constraint hierarchy.
References-found: 23

