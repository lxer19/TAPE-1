URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/96-Uconvert.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/96-Uconvert.html
Root-URL: 
Email: fkreitz,stephg@intellektik.informatik.th-darmstadt.de  
Title: A Uniform Procedure for Converting Matrix Proofs into Sequent-Style Systems  
Author: Christoph Kreitz Stephan Schmitt 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: FG Intellektik, FB Informatik, TH Darmstadt  
Abstract: We present a uniform algorithm which transforms machine-found matrix proofs in classical, constructive, and modal logics into sequent proofs. It is based on unified representations of matrix characterizations, of sequent calculi, and of prefixed sequent systems for various logics. The peculiarities of an individual logic are described by certain parameters of these representations. They are summarized in tables which will be consulted by the algorithm. Because of the similarity between matrix methods and prefixed tableaux we first develop a procedure for extracting a prefixed sequent proof from a given matrix proof. Taking into account the restrictions on the order of rule applications in the usual calculi we then extend our procedure into an algorithm which generates a conventional sequent proof.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> P. Andrews. </author> <title> Transforming matings into natural deduction proofs. </title> <journal> CADE-5, </journal> <volume> LNCS 87, </volume> <pages> pp. 281-292. </pages> <publisher> Springer, </publisher> <year> 1980. </year>
Reference-contexts: Therefore the actual proofs generated by ATP systems tend to have a very technical look. Before they can be understood by experts of the envisaged application they must be transformed into a more readable form. Techniques for a humanly comprehensible presentation of machine-found proofs have been described in <ref> [1, 28, 2, 21] </ref> and [15, 16]. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language [8].
Reference: 2. <author> P. Andrews. </author> <title> More on the problem of finding a mapping between clause representation and natural-deduction representation. </title> <journal> JAR, </journal> <volume> 7 </volume> <pages> 285-286, </pages> <year> 1991. </year>
Reference-contexts: Therefore the actual proofs generated by ATP systems tend to have a very technical look. Before they can be understood by experts of the envisaged application they must be transformed into a more readable form. Techniques for a humanly comprehensible presentation of machine-found proofs have been described in <ref> [1, 28, 2, 21] </ref> and [15, 16]. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language [8].
Reference: 3. <editor> E. W. Beth. </editor> <booktitle> The foundations of mathematics. </booktitle> <publisher> North-Holland, </publisher> <year> 1959. </year>
Reference-contexts: For constant domains such sequent calculi do not always exist (see [10]). In our unified presentation we shall provide schematic rules containing parameters whose values describe the individual logics. To achieve a compact representation we adopt a notation based on tableau systems <ref> [3, 10] </ref> and encode a sequent ` by a set S of signed formulae which we call the associated set.
Reference: 4. <author> W. Bibel, S. Br uning, U. Egly, T. </author> <title> Rath. </title> <journal> KoMet. CADE-12, </journal> <volume> LNAI 814, </volume> <pages> pp. 783-787. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Logical reasoning is a particularly precise form of human problem solving which is used especially in scientific applications. Because of its precision it lends itself to automation more easily than reasoning in general. In classical predicate logic theorem provers based on resolution [22, 27] and the connection method <ref> [5, 6, 14, 4] </ref> have demonstrated that logical deduction can be simulated sufficiently well on a computer. Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 [17, 24, 25].
Reference: 5. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> JACM, </journal> <volume> 28 </volume> <pages> 633-645, </pages> <year> 1981. </year>
Reference-contexts: 1 Introduction Logical reasoning is a particularly precise form of human problem solving which is used especially in scientific applications. Because of its precision it lends itself to automation more easily than reasoning in general. In classical predicate logic theorem provers based on resolution [22, 27] and the connection method <ref> [5, 6, 14, 4] </ref> have demonstrated that logical deduction can be simulated sufficiently well on a computer. Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 [17, 24, 25]. <p> They avoid notational redundancies contained in mathematical languages or sequent calculi and allow a very compact representation of a formal proof. Originally developed as foundation of Bibel's connection method for classical logic <ref> [5, 6] </ref> they have later been extended to non-classical logics by Wallen [25] and serve as a basis for a uniform proof method for a rich variety of logics [19].
Reference: 6. <author> W. Bibel. </author> <title> Automated Theorem Proving. </title> <publisher> Vieweg, </publisher> <year> 1987. </year> <month> 19 </month>
Reference-contexts: 1 Introduction Logical reasoning is a particularly precise form of human problem solving which is used especially in scientific applications. Because of its precision it lends itself to automation more easily than reasoning in general. In classical predicate logic theorem provers based on resolution [22, 27] and the connection method <ref> [5, 6, 14, 4] </ref> have demonstrated that logical deduction can be simulated sufficiently well on a computer. Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 [17, 24, 25]. <p> They avoid notational redundancies contained in mathematical languages or sequent calculi and allow a very compact representation of a formal proof. Originally developed as foundation of Bibel's connection method for classical logic <ref> [5, 6] </ref> they have later been extended to non-classical logics by Wallen [25] and serve as a basis for a uniform proof method for a rich variety of logics [19].
Reference: 7. <author> R. L. Constable et. al. </author> <title> Implementing Mathematics with the NuPRL proof development system. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: A proof task to be solved by the ATP system will be extracted by the user or a strategy of the application system (e.g. Mathematica [26], NuPRL <ref> [7] </ref>, and Isabelle [20]). After selecting the particular logic (classical, intuitionistic, or modal logics) a uniform proof procedure will create a machine-proof (e.g. a matrix proof in non-normal form).
Reference: 8. <author> B. I. Dahn, J. Gehne, Th. Honigmann, L. Walther, A. Wolf. </author> <title> Integrating Logical Functions with ILF; Preprint 94-10, </title> <address> Humboldt University Berlin, </address> <year> 1994. </year>
Reference-contexts: Techniques for a humanly comprehensible presentation of machine-found proofs have been described in [1, 28, 2, 21] and [15, 16]. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language <ref> [8] </ref>. In [23] we have developed an algorithm for converting intuitionistic matrix proofs into the sequent calculus LJ in order to support program development systems [13]. In this paper we present a transformation procedure which allows a uniform treatment of classical, constructive, and modal logics.
Reference: 9. <author> M. C. </author> <title> Fitting. Intuitionistic logic, model theory and forcing. </title> <booktitle> Studies in logic and the foundations of mathematics. </booktitle> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: Unified Representations of Proof Calculi We present unified representations of matrix calculi, sequent calculi, and prefixed sequent systems for classical logic (C), intuitionistic logic (J), and the modal logics K; K4; D; D4; T; S4; S5 with their cumulative, varying and constant domain variants concerning the Kripke-semantics of these logics <ref> [9, 10] </ref>. In these representations we shall separate the aspects which are common to all logics under consideration from those which depend on the peculiarities of an individual logic.
Reference: 10. <author> M. C. </author> <title> Fitting. Proof Methods for Modal and Intuitionistic Logic. </title> <address> D. </address> <publisher> Reidel, </publisher> <year> 1983. </year>
Reference-contexts: These wait-labels may again depend on the underlying logic. Methodically we proceed in two steps. Because of a similarity between matrix calculi and Fitting's prefixed tableau systems <ref> [10] </ref> we first show how to convert a matrix proof into a prefixed sequent proof. This algorithm only requires a unified representation of the calculi and the tables for determining appropriate rules. Afterwards we extend our algorithm into one which creates conventional sequent proofs. <p> Unified Representations of Proof Calculi We present unified representations of matrix calculi, sequent calculi, and prefixed sequent systems for classical logic (C), intuitionistic logic (J), and the modal logics K; K4; D; D4; T; S4; S5 with their cumulative, varying and constant domain variants concerning the Kripke-semantics of these logics <ref> [9, 10] </ref>. In these representations we shall separate the aspects which are common to all logics under consideration from those which depend on the peculiarities of an individual logic. <p> Cut-free sequent calculi are known for classical logic, intuition-istic logic, and for the cumulative and varying domain modal logics K; K4; D; D4; T; S4. For constant domains such sequent calculi do not always exist (see <ref> [10] </ref>). In our unified presentation we shall provide schematic rules containing parameters whose values describe the individual logics. <p> For constant domains such sequent calculi do not always exist (see [10]). In our unified presentation we shall provide schematic rules containing parameters whose values describe the individual logics. To achieve a compact representation we adopt a notation based on tableau systems <ref> [3, 10] </ref> and encode a sequent ` by a set S of signed formulae which we call the associated set. <p> The set S # plays the role of S fl in modal logics whereas S + encodes the duplication of the actual reduction-formulae (denoted by hC; 1i) within ) l or :l. If we consider varying domains we have to check an additional condition when applying a fl-rule (see <ref> [10] </ref>): only constants which are alive on a fl-branch B are allowed to be introduced with fl 0 (t). The set C B of all constants alive on B is defined as follows: (i) Starting with hA; 0i C B consists of all constants occurring in A. <p> They are also important for dealing with logics which do not have a cut-free sequent calculus such as modal logics with constant domains. We have constructed them from prefixed tableau systems <ref> [10] </ref> for K; K4; D; D4; T; S4 in all domain variants and for S5 in varying and constant domains. We have also developed a prefixed sequent system for intuitionistic logic. Prefixes may be ignored in classical logic.
Reference: 11. <author> G. </author> <title> Gentzen. Untersuchungen uber das logische Schlieen. </title> <journal> Mathematische Zeitschrift, </journal> <volume> 39 </volume> <pages> 176-210, 405-431, </pages> <year> 1935. </year>
Reference-contexts: Techniques for a humanly comprehensible presentation of machine-found proofs have been described in [1, 28, 2, 21] and [15, 16]. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K <ref> [11] </ref>. Other approaches try to present them even in natural language [8]. In [23] we have developed an algorithm for converting intuitionistic matrix proofs into the sequent calculus LJ in order to support program development systems [13].
Reference: 12. <author> C. Kreitz, S. Schmitt. </author> <title> A Uniform Procedure for Converting Matrix Proofs into Sequent-Style Systems Technical report, </title> <institution> FG Intellektik, FB Informatik, TH Darmstadt, </institution> <year> 1996. </year>
Reference-contexts: For detailed considerations on this problem we refer to <ref> [12] </ref>. Definition 17 (split-operation). <p> This we have done by induction on the number of connections establishing t w 1 ~ C t w 2 for two wait 2 -labeled positions w 1 ; w 2 . For further details we refer to <ref> [12] </ref>. Example 8. We take the formula F 29x:2C (x) ^ 3B ) 3 (B ^ 39x:C (x)) from Example 3, the substitutions M ; Q , and the reduction ordering / ? generated from &lt; 18 by adding a new root w.
Reference: 13. <editor> C. Kreitz, J. Otten, S. Schmitt. </editor> <title> Guiding Program Development Systems by a Connection Based Proof Strategy. </title> <journal> LoPSTR-95, </journal> <volume> LNCS 1048, </volume> <pages> pp. 137-151, </pages> <year> 1996. </year>
Reference-contexts: Other approaches try to present them even in natural language [8]. In [23] we have developed an algorithm for converting intuitionistic matrix proofs into the sequent calculus LJ in order to support program development systems <ref> [13] </ref>. In this paper we present a transformation procedure which allows a uniform treatment of classical, constructive, and modal logics.
Reference: 14. <author> R. Letz, J. Schumann, S. Bayerl, W. Bibel. </author> <title> Setheo: A high-performance theorem prover. </title> <journal> JAR, </journal> <volume> 8 </volume> <pages> 183-212, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Logical reasoning is a particularly precise form of human problem solving which is used especially in scientific applications. Because of its precision it lends itself to automation more easily than reasoning in general. In classical predicate logic theorem provers based on resolution [22, 27] and the connection method <ref> [5, 6, 14, 4] </ref> have demonstrated that logical deduction can be simulated sufficiently well on a computer. Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 [17, 24, 25].
Reference: 15. <author> C. Lingenfelder. </author> <title> Structuring computer generated proofs. </title> <booktitle> IJCAI-89, </booktitle> <year> 1989. </year>
Reference-contexts: Before they can be understood by experts of the envisaged application they must be transformed into a more readable form. Techniques for a humanly comprehensible presentation of machine-found proofs have been described in [1, 28, 2, 21] and <ref> [15, 16] </ref>. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language [8].
Reference: 16. <author> C. Lingenfelder. </author> <title> Transformation and Structuring of Computer Generated Proofs. </title> <type> PhD thesis, </type> <year> 1990. </year>
Reference-contexts: Before they can be understood by experts of the envisaged application they must be transformed into a more readable form. Techniques for a humanly comprehensible presentation of machine-found proofs have been described in [1, 28, 2, 21] and <ref> [15, 16] </ref>. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language [8].
Reference: 17. <author> H. J. Ohlbach. </author> <title> A resolution calculus for modal logics. </title> <type> Ph.D. Thesis, </type> <year> 1988. </year>
Reference-contexts: Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 <ref> [17, 24, 25] </ref>. On this basis the existing proof methods have been extended accordingly [18, 19] in order to develop a coherent theorem prover which can deal with a variety of logics and many applications which require mathematical reasoning.
Reference: 18. <author> J. Otten, C. </author> <title> Kreitz. A connection based proof method for intuitionistic logic. </title> <journal> TABLEAUX-95, </journal> <volume> LNAI 918, </volume> <pages> pp. 122-137, </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 [17, 24, 25]. On this basis the existing proof methods have been extended accordingly <ref> [18, 19] </ref> in order to develop a coherent theorem prover which can deal with a variety of logics and many applications which require mathematical reasoning. The use of automated theorem proving (ATP) in practical applications, however, causes another problem that needs to be solved.
Reference: 19. <author> J. Otten, C. </author> <title> Kreitz. A Uniform Proof Procedure for Classical and Non-Classical Logics KI-96, </title> <publisher> LNAI 1137, </publisher> <pages> pp. 307-319, </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 [17, 24, 25]. On this basis the existing proof methods have been extended accordingly <ref> [18, 19] </ref> in order to develop a coherent theorem prover which can deal with a variety of logics and many applications which require mathematical reasoning. The use of automated theorem proving (ATP) in practical applications, however, causes another problem that needs to be solved. <p> Integrating Automated Theorem Proving into Application Systems Since currently only matrix-based proof methods are able to handle different logics in a uniform way <ref> [19] </ref> the starting point of our procedure will be a proof according to Wallen's matrix characterizations [25] of logical validity. Here a formula F is valid if every path through a matrix representation of F contains at least one pair of atomic formulae which are complementary. <p> Originally developed as foundation of Bibel's connection method for classical logic [5, 6] they have later been extended to non-classical logics by Wallen [25] and serve as a basis for a uniform proof method for a rich variety of logics <ref> [19] </ref>. Since our starting point will be a given matrix proof we will present only the basic ideas and syntactical concepts and refer to [25] or [19] for details, semantical justifications, and aspects of proof search. Position-trees, Types, and Prefixes. <p> been extended to non-classical logics by Wallen [25] and serve as a basis for a uniform proof method for a rich variety of logics <ref> [19] </ref>. Since our starting point will be a given matrix proof we will present only the basic ideas and syntactical concepts and refer to [25] or [19] for details, semantical justifications, and aspects of proof search. Position-trees, Types, and Prefixes. The basic structure for representing matrix proofs is a tree ordering t which will be constructed from a formula tree. We classify a formula A and its sub-formulae according to the tableau scheme in Table 1. <p> A prefix-substitution (or L-substitution) is a mapping L : V L 7! T fl L which fulfills certain restrictions depending on the logic L to be considered (see [25] and <ref> [19] </ref> for details). L induces a relation &lt; L on T L fi T L which satisfies the following condition: If L (u)=p and p 62 V L , then for all v occurring in p; v &lt; L u. <p> Then for t z 2 T o the [t z ]-reduction of / ? with connection set C is defined by / ? S The use of a special proof strategy (e.g. an extension procedure <ref> [19] </ref>) is necessary for ensuring completeness and correctness of the [t x i ]-reduction after a fi-split . For detailed considerations on this problem we refer to [12]. Definition 17 (split-operation).
Reference: 20. <author> L. C. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <booktitle> Logic and Computer Science, </booktitle> <pages> pp. 361-386. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: A proof task to be solved by the ATP system will be extracted by the user or a strategy of the application system (e.g. Mathematica [26], NuPRL [7], and Isabelle <ref> [20] </ref>). After selecting the particular logic (classical, intuitionistic, or modal logics) a uniform proof procedure will create a machine-proof (e.g. a matrix proof in non-normal form).
Reference: 21. <author> F. Pfenning. </author> <title> Proof Transformations in Higher-Order Logic. </title> <type> PhD thesis, </type> <year> 1987. </year>
Reference-contexts: Therefore the actual proofs generated by ATP systems tend to have a very technical look. Before they can be understood by experts of the envisaged application they must be transformed into a more readable form. Techniques for a humanly comprehensible presentation of machine-found proofs have been described in <ref> [1, 28, 2, 21] </ref> and [15, 16]. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language [8].
Reference: 22. <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> JACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference-contexts: 1 Introduction Logical reasoning is a particularly precise form of human problem solving which is used especially in scientific applications. Because of its precision it lends itself to automation more easily than reasoning in general. In classical predicate logic theorem provers based on resolution <ref> [22, 27] </ref> and the connection method [5, 6, 14, 4] have demonstrated that logical deduction can be simulated sufficiently well on a computer.
Reference: 23. <author> S. Schmitt, C. </author> <title> Kreitz. On transforming intuitionistic matrix proofs into standard-sequent proofs. </title> <journal> TABLEAUX-95, </journal> <volume> LNAI 918, </volume> <pages> pp. 106-121, </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language [8]. In <ref> [23] </ref> we have developed an algorithm for converting intuitionistic matrix proofs into the sequent calculus LJ in order to support program development systems [13]. In this paper we present a transformation procedure which allows a uniform treatment of classical, constructive, and modal logics.
Reference: 24. <author> L. Wallen. </author> <title> Matrix proof methods for modal logics. </title> <journal> IJCAI-87, </journal> <pages> pp. 917-923. </pages> <year> 1987. </year>
Reference-contexts: Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 <ref> [17, 24, 25] </ref>. On this basis the existing proof methods have been extended accordingly [18, 19] in order to develop a coherent theorem prover which can deal with a variety of logics and many applications which require mathematical reasoning.
Reference: 25. <author> L. Wallen. </author> <title> Automated deduction in nonclassical logic. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Recently the characterizations of logical validity which underly these systems have been extended to intuitionistic logic and the modal logics K; K4; D; D4; T; S4, and S5 <ref> [17, 24, 25] </ref>. On this basis the existing proof methods have been extended accordingly [18, 19] in order to develop a coherent theorem prover which can deal with a variety of logics and many applications which require mathematical reasoning. <p> Integrating Automated Theorem Proving into Application Systems Since currently only matrix-based proof methods are able to handle different logics in a uniform way [19] the starting point of our procedure will be a proof according to Wallen's matrix characterizations <ref> [25] </ref> of logical validity. Here a formula F is valid if every path through a matrix representation of F contains at least one pair of atomic formulae which are complementary. In classical logic, complementarity means that the two atomic formulae have different polarity and that their sub-terms can be unified. <p> They avoid notational redundancies contained in mathematical languages or sequent calculi and allow a very compact representation of a formal proof. Originally developed as foundation of Bibel's connection method for classical logic [5, 6] they have later been extended to non-classical logics by Wallen <ref> [25] </ref> and serve as a basis for a uniform proof method for a rich variety of logics [19]. Since our starting point will be a given matrix proof we will present only the basic ideas and syntactical concepts and refer to [25] or [19] for details, semantical justifications, and aspects of <p> have later been extended to non-classical logics by Wallen <ref> [25] </ref> and serve as a basis for a uniform proof method for a rich variety of logics [19]. Since our starting point will be a given matrix proof we will present only the basic ideas and syntactical concepts and refer to [25] or [19] for details, semantical justifications, and aspects of proof search. Position-trees, Types, and Prefixes. The basic structure for representing matrix proofs is a tree ordering t which will be constructed from a formula tree. <p> Furthermore let T + L be the set of strings over T L and T fl L =T + L [f;g. A prefix-substitution (or L-substitution) is a mapping L : V L 7! T fl L which fulfills certain restrictions depending on the logic L to be considered (see <ref> [25] </ref> and [19] for details). L induces a relation &lt; L on T L fi T L which satisfies the following condition: If L (u)=p and p 62 V L , then for all v occurring in p; v &lt; L u. <p> R 0 reflects the conditions on the accessibility relation R for modal logics and J according to their Kripke semantics. 1 The original condition in <ref> [25, p. 187] </ref>, v 2 T Q , is not complete since for instance the classical formula 9y9x:A (y) ) A (f (x)) would not be provable (see Definition 2). 5 Definition 2. A combined substitution =h Q ; L i is L-admissible provided: 1. <p> This requirement is important if domains are not empty and if each function symbol f is closed in every world w (i.e. f (a) is in the domain of w if a is). For K; K4 there is an additional condition (see <ref> [25] </ref>) which we shall not discuss here. Using the above definitions the following theorem has been proven in [25]. Theorem 3. <p> For K; K4 there is an additional condition (see <ref> [25] </ref>) which we shall not discuss here. Using the above definitions the following theorem has been proven in [25]. Theorem 3. A formula A is L-valid iff there is a multiplicity , an L-admissible com bined substitution =h Q ; L i; L 2 fM; Jg, and a set of -complementary connections C that spans the signed formula hA; 0i. Example 3.
Reference: 26. <author> S. Wolfram. </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: A proof task to be solved by the ATP system will be extracted by the user or a strategy of the application system (e.g. Mathematica <ref> [26] </ref>, NuPRL [7], and Isabelle [20]). After selecting the particular logic (classical, intuitionistic, or modal logics) a uniform proof procedure will create a machine-proof (e.g. a matrix proof in non-normal form).
Reference: 27. <author> L. Wos et. al. </author> <note> Automated reasoning contributes to mathematics and logic. CADE-10, LNCS 449, p. 485-499. Springer 1990. </note>
Reference-contexts: 1 Introduction Logical reasoning is a particularly precise form of human problem solving which is used especially in scientific applications. Because of its precision it lends itself to automation more easily than reasoning in general. In classical predicate logic theorem provers based on resolution <ref> [22, 27] </ref> and the connection method [5, 6, 14, 4] have demonstrated that logical deduction can be simulated sufficiently well on a computer.
Reference: 28. <author> L. Wos. </author> <title> The problem of finding a mapping between clause representation and natural-deduction representation. </title> <journal> JAR, </journal> <volume> 6 </volume> <pages> 211-212, </pages> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style 20 </title>
Reference-contexts: Therefore the actual proofs generated by ATP systems tend to have a very technical look. Before they can be understood by experts of the envisaged application they must be transformed into a more readable form. Techniques for a humanly comprehensible presentation of machine-found proofs have been described in <ref> [1, 28, 2, 21] </ref> and [15, 16]. They try to transform classical resolution-or matrix proofs into natural calculi such as LK or N K [11]. Other approaches try to present them even in natural language [8].
References-found: 28

