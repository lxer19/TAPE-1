URL: ftp://ftp.cs.umd.edu/pub/sel/papers/position-cod.ps.Z
Refering-URL: http://www.cs.umd.edu/~cseaman/opt.html
Root-URL: 
Title: OPT: An Approach to Organizational and Process Improvement  
Author: Carolyn B. Seaman Victor R. Basili 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland  
Abstract: Software development and maintenance enterprises constitute an extremely complex, varied, and poorly understood class of organizations. This is due in part to the newness of the technology and the dynamic nature of the field, but it also stems from the complexity of human-machine interactions. A major driver of the effectiveness of such an organization is the relationship between the software development process and the organizational structure. Little attention has been paid to this relationship, Scacchi's work [6] being one exception. Our approach addresses this issue in more detail. This paper describes the OPT method for improving both the organizational structures and processes that constitute software development environments. This method is meant to be part of a continuous improvement program, and is modeled after the Quality Improvement Paradigm [1]. The approach includes mechanisms for modeling the relationship between an organizational structure and a development process, for measuring this relationship quantitatively, and for using this information to plan specific improvements to the environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V.R. Basili, </author> <title> "Software Development: A Paradigm for the Future" (Keynote Address), </title> <booktitle> Proceedings, </booktitle> <address> COMP-SAC `89, Orlando, FL, </address> <month> September </month> <year> 1989, </year> <pages> pp. 471-485. </pages>
Reference-contexts: The OPT approach to improvement of software development environments is based on the combined improvement of organizational structure and development process. The approach is an iterative improvement method based on the Quality Improvement Paradigm <ref> [1] </ref>. The OPT modeling formalisms and the OPT met-rics are central to the approach. The goal of the OPT modeling formalisms is to create an organizational model. An organizational model completely describes those aspects of the relationship between organization and process that we wish to measure. <p> Then the OPT modeling formalisms and the OPT metrics are presented. Finally, the way in which the metrics are used to form goals and constraints is illustrated. 2 The OPT Approach The OPT approach is an iterative improvement method based on the Quality Improvement Paradigm (QIP) <ref> [1] </ref>, an iterative, goal-driven framework for continuous improvement of software development. The QIP is a closed-loop process which includes steps for planning, executing, and evaluating improvements to software development environments, as well as for incorporating experience gained from improvement efforts into future development.
Reference: [2] <author> Bill Curtis, Marc Kellner, and Jim Over, </author> <title> "Process Modeling", </title> <journal> Communications of the ACM, September 1992, </journal> <volume> Vol. 35, No. 9, </volume> <pages> pp. 75-90. </pages>
Reference-contexts: A process model representing the development process of interest forms the third part of an organizational model (the bottom part in Figure 1). A discussion of process modeling and the various formalisms that are available can be found in a number of references, including <ref> [2] </ref>, [4], and [5]. An organizational model can incorporate a process model in any representation that provides certain required capabilities.
Reference: [3] <author> Jay W. </author> <title> Forrester, Industrial Dynamics, </title> <publisher> The M.I.T. Press, </publisher> <year> 1961. </year>
Reference-contexts: * architectural agents and elements of an organiza tional specification 4 Organizational and Process Attributes A software development environment is an information-feedback system, which is defined as a system in which ...the environment leads to a decision that results in action which affects the environment and thereby influences future decisions. <ref> [3] </ref> This applies to the actions and decisions that take place in a software development environment. They have an effect not only on the software product, but also on the environment itself, and how software is produced in the future.
Reference: [4] <author> Nazim H. Madhavji, Kamel Toubache, and Ed Lynch, </author> <title> "The IBM-McGill Project on Software Process", </title> <type> IBM Technical Report 74-077, </type> <institution> IBM Canada Laboratory, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: A process model representing the development process of interest forms the third part of an organizational model (the bottom part in Figure 1). A discussion of process modeling and the various formalisms that are available can be found in a number of references, including [2], <ref> [4] </ref>, and [5]. An organizational model can incorporate a process model in any representation that provides certain required capabilities.
Reference: [5] <author> H. Dieter Rombach, "MVP-L: </author> <title> A Language for Process Modeling In-The-Large", </title> <institution> Computer Science Technical Report Series, No. CS-TR-2709, University of Maryland, College Park, MD, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: It also provides the bridge between a development process and an organization which allows the two to be considered together as a system. The objects of an architecture specification (activities, agents, and interactions) correspond to objects that appear in most process models (see <ref> [5] </ref>, for example). Activities refer to individual tasks or process steps in a process model. Most process modeling languages allow the specification of who or what is responsible for executing each task. This type of object is usually called a role, and corresponds to an architectural agent. <p> A process model representing the development process of interest forms the third part of an organizational model (the bottom part in Figure 1). A discussion of process modeling and the various formalisms that are available can be found in a number of references, including [2], [4], and <ref> [5] </ref>. An organizational model can incorporate a process model in any representation that provides certain required capabilities.
Reference: [6] <author> Walt Scacchi, </author> <title> "Managing Software Engineering Projects: A Social Analysis", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10:1, </volume> <month> January </month> <year> 1984. </year>
Reference: [7] <author> Carolyn B. Seaman, "AAA: </author> <title> A Modeling Language for Software Production Environments", </title> <booktitle> Proceedings of CASCON'92, </booktitle> <institution> IBM Canada Ltd. Laboratory Centre for Advanced Studies, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: below. interaction Component Request is purpose: directional; participants: Component Library; Project1 Developer; unidirectional from Project1 Developer to Component Library; dependent activities: Component Library.Answer Request; Project1 Developer.Request Component; end Component Request; The notation used to write architecture specifications has been designed specifically for that purpose, and is described in detail in <ref> [7] </ref> and [8]. A process model representing the development process of interest forms the third part of an organizational model (the bottom part in Figure 1).
Reference: [8] <author> Carolyn B. Seaman, </author> <title> "OPT: Organization and Process Together", </title> <booktitle> Proceedings of CASCON'93, </booktitle> <institution> IBM Canada Ltd. Laboratory Centre for Advanced Studies, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Component Request is purpose: directional; participants: Component Library; Project1 Developer; unidirectional from Project1 Developer to Component Library; dependent activities: Component Library.Answer Request; Project1 Developer.Request Component; end Component Request; The notation used to write architecture specifications has been designed specifically for that purpose, and is described in detail in [7] and <ref> [8] </ref>. A process model representing the development process of interest forms the third part of an organizational model (the bottom part in Figure 1). A discussion of process modeling and the various formalisms that are available can be found in a number of references, including [2], [4], and [5].
References-found: 8

