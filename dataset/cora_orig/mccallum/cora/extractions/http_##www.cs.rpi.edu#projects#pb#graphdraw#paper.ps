URL: http://www.cs.rpi.edu/projects/pb/graphdraw/paper.ps
Refering-URL: http://www.cs.rpi.edu/projects/pb/graphdraw/index.html
Root-URL: http://www.cs.rpi.edu
Email: fulfar,moorthyg@cs.rpi.edu  
Title: Interactive Graph Drawing on the World Wide Web  
Author: Ulfar Erlingsson Mukkai Krishnamoorthy 
Abstract: We discuss a system for performing interactive graph drawing on the World Wide Web (WWW), implemented in the Java programming language. The system allows for highly interactive experimentation in graph drawing, supporting direct user interaction and parameter adjustment during the embedding process. The use of Java and the WWW in its implementation makes the system globally available, both for interactive use and for integration into other systems, regardless of computer platform details. We present the design, implementation and use of the system, as well as some experimental results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aho, R. Sethi, and J. Ullman. </author> <booktitle> Compilers: Principles, Techniques and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The resulting figure is not too complicated, and gives a clear idea of which vertices are the leaves. 10 4.3 Control Flow Graphs We also experimented with embedding two graphs from earlier publications. In of a control flow graph from Aho, Sethi and Ullman <ref> [1] </ref>, (page 661, Fig. 10.45). et al [15].
Reference: [2] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: An annotated bibliography. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: Since the field of graph drawing algorithm design originated with [18] and [13], it has grown tremendously, especially in the last decade as high-resolution graphical devices have become commonly available. A good survey of the field, containing most relevant references, can be found in <ref> [2] </ref>. However, graph drawing systems, such as the GraphEd system [11], have so far been limited to specific computer platforms and environments. This is an unfortunate obstacle to easy experimentation and usage of graph drawing implementations. <p> Finally, in section 4, we present the results of some experiments in graph drawing using our system. 1.1 The Graph Drawing Algorithms We focus on the subfield of graph drawing which is concerned with the automatic generation of aesthetically pleasing drawings for humans, as presented in <ref> [2] </ref>, [17] and [10]. In Table 1 we see some defining characteristics of graphs, graph drawing, and graph-drawing algorithms. Graphs can be of many different types, be drawn in many different styles, with different aesthetic goals and different methods.
Reference: [3] <author> P. Eades. </author> <title> A heuristic for graph drawing. </title> <journal> Congr. Numer., </journal> <volume> 42 </volume> <pages> 149-160, </pages> <year> 1984. </year>
Reference-contexts: An example of a hierarchical embedding can be seen in the left half of Figure 1. 2 Drawing of general graphs is arguably best done using the force-directed methods of [16], [5] and [6], which are derivatives of Eades' early work in <ref> [3] </ref>. These methods use a simulated model of the graph in a pseudo-physical setting, replacing the edges with (magnetized) springs and the vertices with repulsive magnets. The graph is then laid out using an iterative simulated-annealing process, where the minimum-energy layout approximates the most aesthetically pleasing one.
Reference: [4] <author> P. Eades and K. Sugiyama. </author> <title> How to draw a directed graph. </title> <journal> Journal of Information Processing, </journal> <pages> pages 424-437, </pages> <year> 1991. </year>
Reference-contexts: Force-directed This is an adaptation of Fruchterman and Reingold's simulated annealing-based algorithm from [6]. Vertices are set to repel each other, while edges attract adjacent vertices. The graph is then embedded using an iterative process. 5 Hierarchical This is an adaptation of the directed graph methods in [15] and <ref> [4] </ref>. Cycles are broken by edge reversal, vertices are assigned to levels by their topological ordering, and the resulting hierarchy is iteratively "combed" to minimize edge crossings. This combing is done by repeated reordering of levels using vertex barycenters. <p> An exception to this is the level-placement phase of the hierarchical embedding. In [15], the authors lament that their level-placement method does not minimize the total edge length of the resulting graph, and no solution to this problem is mentioned in <ref> [4] </ref>. Our implementation achieves minimum total edge length by a very simple method.
Reference: [5] <author> A. Frick, A. Ludwig, and H. Mehldau. </author> <title> A fast adaptive layout algorithm for undirected graphs. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 388-403. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: An example of a hierarchical embedding can be seen in the left half of Figure 1. 2 Drawing of general graphs is arguably best done using the force-directed methods of [16], <ref> [5] </ref> and [6], which are derivatives of Eades' early work in [3]. These methods use a simulated model of the graph in a pseudo-physical setting, replacing the edges with (magnetized) springs and the vertices with repulsive magnets.
Reference: [6] <author> T. Fruchterman and E. Reingold. </author> <title> Graph drawing by force-directed placement. </title> <journal> Softw. - Pract. Exp., </journal> <volume> 21(11) </volume> <pages> 1129-1164, </pages> <year> 1991. </year>
Reference-contexts: An example of a hierarchical embedding can be seen in the left half of Figure 1. 2 Drawing of general graphs is arguably best done using the force-directed methods of [16], [5] and <ref> [6] </ref>, which are derivatives of Eades' early work in [3]. These methods use a simulated model of the graph in a pseudo-physical setting, replacing the edges with (magnetized) springs and the vertices with repulsive magnets. <p> The methods are as follows: Random The vertices are placed at random points in the drawing space. Circular The vertices are distributed evenly on the circumference of a circle. Force-directed This is an adaptation of Fruchterman and Reingold's simulated annealing-based algorithm from <ref> [6] </ref>. Vertices are set to repel each other, while edges attract adjacent vertices. The graph is then embedded using an iterative process. 5 Hierarchical This is an adaptation of the directed graph methods in [15] and [4]. <p> Below is a list of the embeddings, with a description of what embedding-specific adjustments the user may perform interactively during their execution. Force-directed In <ref> [6] </ref>, the original paper describing this embedding, the authors define functions for the attractive and repulsive forces based on the distance between vertices, f a (d) = d 2 =k for attraction, and f r (d) = k 2 =d for repulsion, where k depends on the square root of the
Reference: [7] <author> E. R. Gansner, E. Koutsofios, S. C. North, and K. P. Vo. </author> <title> A technique for drawing directed graphs. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 19 </volume> <pages> 214-230, </pages> <year> 1993. </year>
Reference-contexts: Bipartite Constrained Uniform density Heuristic Orthogonal Minimum edge length Non-overlapping vertices Table 1: Some characteristics of graph-drawing algorithms. Algorithms for drawing directed graphs and DAGs can be found in [8], <ref> [7] </ref> and [15]. Most of these algorithms draw general directed graphs by initial cycle-breaking by edge reversion and a subsequent DAG algorithm. The DAG algorithms from Bell Labs, described in [8] and [7], use a more complicated multi-pass algorithm which combines depth-first search, linear programming and heuristics. <p> Algorithms for drawing directed graphs and DAGs can be found in [8], <ref> [7] </ref> and [15]. Most of these algorithms draw general directed graphs by initial cycle-breaking by edge reversion and a subsequent DAG algorithm. The DAG algorithms from Bell Labs, described in [8] and [7], use a more complicated multi-pass algorithm which combines depth-first search, linear programming and heuristics.
Reference: [8] <author> E. R. Gansner, S. C. North, and K. P. Vo. </author> <title> DAG A program that draws directed graphs. </title> <journal> Softw. - Pract. Exp., </journal> <volume> 18(11) </volume> <pages> 1047-1062, </pages> <year> 1988. </year>
Reference-contexts: Bipartite Constrained Uniform density Heuristic Orthogonal Minimum edge length Non-overlapping vertices Table 1: Some characteristics of graph-drawing algorithms. Algorithms for drawing directed graphs and DAGs can be found in <ref> [8] </ref>, [7] and [15]. Most of these algorithms draw general directed graphs by initial cycle-breaking by edge reversion and a subsequent DAG algorithm. The DAG algorithms from Bell Labs, described in [8] and [7], use a more complicated multi-pass algorithm which combines depth-first search, linear programming and heuristics. <p> Algorithms for drawing directed graphs and DAGs can be found in <ref> [8] </ref>, [7] and [15]. Most of these algorithms draw general directed graphs by initial cycle-breaking by edge reversion and a subsequent DAG algorithm. The DAG algorithms from Bell Labs, described in [8] and [7], use a more complicated multi-pass algorithm which combines depth-first search, linear programming and heuristics.
Reference: [9] <author> G. Di Battista A. Giammarco, G. Santucci, and R. Tamassia. </author> <title> The architecture of Diagram Server. </title> <booktitle> In Proc. IEEE Workshop on Visual Languages (VL'90), </booktitle> <pages> pages 60-65, </pages> <year> 1990. </year>
Reference-contexts: However, graph drawing systems, such as the GraphEd system [11], have so far been limited to specific computer platforms and environments. This is an unfortunate obstacle to easy experimentation and usage of graph drawing implementations. Attempts to remedy this based on server-side solutions, e.g., Diagram Server <ref> [9] </ref> and GraphPack [14], are inherently restricted by network bandwidth and server 1 size. The WWW-based implementation methods presented in this paper show great promise for improving this situation. <p> One was the experimental GraphPack [14], based on cgi-bin scripts, and the other one was the Java graph drawing demonstration program from Sun [19], which motivated this paper. The server-side solutions of GraphPack and Diagram Server <ref> [9] </ref> suffer from several disadvantages, namely high network overhead, possible server overload and a somewhat complicated network-specific installation. The Java program from Sun was written as a demonstration of the capabilities of the Java language and is therefore understandably severely limited in its features.
Reference: [10] <author> M. Himsolt. </author> <title> Comparing and evaluating layout algorithms within GraphEd. </title> <type> Manuscript, </type> <institution> Fakultat fur Mathematik und Informatik, Univ. Passau, </institution> <year> 1994. </year>
Reference-contexts: Finally, in section 4, we present the results of some experiments in graph drawing using our system. 1.1 The Graph Drawing Algorithms We focus on the subfield of graph drawing which is concerned with the automatic generation of aesthetically pleasing drawings for humans, as presented in [2], [17] and <ref> [10] </ref>. In Table 1 we see some defining characteristics of graphs, graph drawing, and graph-drawing algorithms. Graphs can be of many different types, be drawn in many different styles, with different aesthetic goals and different methods.
Reference: [11] <author> M. Himsolt. GraphEd: </author> <title> A graphical platform for the implementation of graph algorithms. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 182-193. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A good survey of the field, containing most relevant references, can be found in [2]. However, graph drawing systems, such as the GraphEd system <ref> [11] </ref>, have so far been limited to specific computer platforms and environments. This is an unfortunate obstacle to easy experimentation and usage of graph drawing implementations.
Reference: [12] <author> JavaSoft. </author> <title> The java language specification version 1.0 beta. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <year> 1995. </year>
Reference-contexts: 1 Introduction We present a World Wide Web (WWW) based system for interactive experimental graph drawing. The system is written in Java <ref> [12] </ref>, a WWW programming language, and is therefore available for use on almost any computer system connected to the Internet. The system supports a very high degree of user interaction and parameter adjustment, allowing direct interaction with the graph layout during the embedding process.
Reference: [13] <author> D. E. Knuth. </author> <title> Computer drawn flowcharts. </title> <journal> Commun. ACM, </journal> <volume> 6, </volume> <year> 1963. </year>
Reference-contexts: The system may be used on the Internet from URL http://www.cs.rpi.edu/projects/pb/graphdraw/ through any Java-aware browser, such as Netscape. Since the field of graph drawing algorithm design originated with [18] and <ref> [13] </ref>, it has grown tremendously, especially in the last decade as high-resolution graphical devices have become commonly available. A good survey of the field, containing most relevant references, can be found in [2].
Reference: [14] <author> M. S. Krishnamoorthy, F. Oxaal, U. Dogrusoz, D. Pape, A. Robayo, R. Koyanagi, Y. Hsu, D. Hollinger, and A. Hashmi. GraphPack: </author> <title> Design and features. World Scientific: Scientific Visualization, </title> <year> 1996. </year>
Reference-contexts: However, graph drawing systems, such as the GraphEd system [11], have so far been limited to specific computer platforms and environments. This is an unfortunate obstacle to easy experimentation and usage of graph drawing implementations. Attempts to remedy this based on server-side solutions, e.g., Diagram Server [9] and GraphPack <ref> [14] </ref>, are inherently restricted by network bandwidth and server 1 size. The WWW-based implementation methods presented in this paper show great promise for improving this situation. <p> As far as the authors know, there were only two graph drawing systems available on the WWW at the time this paper was written. One was the experimental GraphPack <ref> [14] </ref>, based on cgi-bin scripts, and the other one was the Java graph drawing demonstration program from Sun [19], which motivated this paper. The server-side solutions of GraphPack and Diagram Server [9] suffer from several disadvantages, namely high network overhead, possible server overload and a somewhat complicated network-specific installation. <p> This combing is done by repeated reordering of levels using vertex barycenters. Barycentric This is a variant of Tutte's pioneering method from [18], previously implemented in <ref> [14] </ref>. Vertex positions are calculated from a set of fixed vertices, e.g., a cycle from the graph laid out in a circle, by the solution of a linear system. Relaxed This is a force-directed method based on the implementation in [19], with repelling vertices but fixed-length edges.
Reference: [15] <author> L. A. Rowe, M. Davis, E. Messinger, C. Meyer, C. Spirakis, and A. Tuan. </author> <title> A browser for directed graphs. </title> <journal> Softw. - Pract. Exp., </journal> <volume> 17(1) </volume> <pages> 61-76, </pages> <year> 1987. </year> <month> 12 </month>
Reference-contexts: Bipartite Constrained Uniform density Heuristic Orthogonal Minimum edge length Non-overlapping vertices Table 1: Some characteristics of graph-drawing algorithms. Algorithms for drawing directed graphs and DAGs can be found in [8], [7] and <ref> [15] </ref>. Most of these algorithms draw general directed graphs by initial cycle-breaking by edge reversion and a subsequent DAG algorithm. The DAG algorithms from Bell Labs, described in [8] and [7], use a more complicated multi-pass algorithm which combines depth-first search, linear programming and heuristics. <p> Force-directed This is an adaptation of Fruchterman and Reingold's simulated annealing-based algorithm from [6]. Vertices are set to repel each other, while edges attract adjacent vertices. The graph is then embedded using an iterative process. 5 Hierarchical This is an adaptation of the directed graph methods in <ref> [15] </ref> and [4]. Cycles are broken by edge reversal, vertices are assigned to levels by their topological ordering, and the resulting hierarchy is iteratively "combed" to minimize edge crossings. This combing is done by repeated reordering of levels using vertex barycenters. <p> In other respects, the embeddings are implemented for the most part as described in their respective sources. An exception to this is the level-placement phase of the hierarchical embedding. In <ref> [15] </ref>, the authors lament that their level-placement method does not minimize the total edge length of the resulting graph, and no solution to this problem is mentioned in [4]. Our implementation achieves minimum total edge length by a very simple method. <p> In of a control flow graph from Aho, Sethi and Ullman [1], (page 661, Fig. 10.45). et al <ref> [15] </ref>.
Reference: [16] <author> K. Sugiyama and K. Misue. </author> <title> A simple and unified method for drawing graphs: Magnetic-spring algorithm. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-375. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: An example of a hierarchical embedding can be seen in the left half of Figure 1. 2 Drawing of general graphs is arguably best done using the force-directed methods of <ref> [16] </ref>, [5] and [6], which are derivatives of Eades' early work in [3]. These methods use a simulated model of the graph in a pseudo-physical setting, replacing the edges with (magnetized) springs and the vertices with repulsive magnets. <p> The graph is then laid out using an iterative simulated-annealing process, where the minimum-energy layout approximates the most aesthetically pleasing one. These methods are good for drawing balanced, uniformly distributed graphs with similar edge lengths, and the implementation of <ref> [16] </ref> can minimize edge crossings. The right half of Figure 1 contains an example of this embedding. 2 Graph Drawing on the World Wide Web Graph drawing on the World Wide Web (WWW) has several potential advantages over conventional graph drawing systems.
Reference: [17] <author> R. Tamassia, G. Di Battista, and C. Batini. </author> <title> Automatic graph drawing and readability of diagrams. </title> <journal> IEEE Trans. Syst. Man Cybern., </journal> <volume> SMC-18(1):61-79, </volume> <year> 1988. </year>
Reference-contexts: Finally, in section 4, we present the results of some experiments in graph drawing using our system. 1.1 The Graph Drawing Algorithms We focus on the subfield of graph drawing which is concerned with the automatic generation of aesthetically pleasing drawings for humans, as presented in [2], <ref> [17] </ref> and [10]. In Table 1 we see some defining characteristics of graphs, graph drawing, and graph-drawing algorithms. Graphs can be of many different types, be drawn in many different styles, with different aesthetic goals and different methods.
Reference: [18] <author> W. T. Tutte. </author> <title> How to draw a graph. </title> <journal> Proc. London Math. Soc., </journal> <volume> 3(13), </volume> <year> 1963. </year>
Reference-contexts: The system may be used on the Internet from URL http://www.cs.rpi.edu/projects/pb/graphdraw/ through any Java-aware browser, such as Netscape. Since the field of graph drawing algorithm design originated with <ref> [18] </ref> and [13], it has grown tremendously, especially in the last decade as high-resolution graphical devices have become commonly available. A good survey of the field, containing most relevant references, can be found in [2]. <p> Cycles are broken by edge reversal, vertices are assigned to levels by their topological ordering, and the resulting hierarchy is iteratively "combed" to minimize edge crossings. This combing is done by repeated reordering of levels using vertex barycenters. Barycentric This is a variant of Tutte's pioneering method from <ref> [18] </ref>, previously implemented in [14]. Vertex positions are calculated from a set of fixed vertices, e.g., a cycle from the graph laid out in a circle, by the solution of a linear system.
Reference: [19] <author> A. van Hoff, S. Shaio, and O. Starbuck. </author> <title> Hooked on Java. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The system supports a very high degree of user interaction and parameter adjustment, allowing direct interaction with the graph layout during the embedding process. The system was inspired by a small Java demonstration program found on the WWW <ref> [19] </ref>, and motivated by the need for an interactive WWW presentation environment for graph-based information. The system may be used on the Internet from URL http://www.cs.rpi.edu/projects/pb/graphdraw/ through any Java-aware browser, such as Netscape. <p> As far as the authors know, there were only two graph drawing systems available on the WWW at the time this paper was written. One was the experimental GraphPack [14], based on cgi-bin scripts, and the other one was the Java graph drawing demonstration program from Sun <ref> [19] </ref>, which motivated this paper. The server-side solutions of GraphPack and Diagram Server [9] suffer from several disadvantages, namely high network overhead, possible server overload and a somewhat complicated network-specific installation. <p> Vertex positions are calculated from a set of fixed vertices, e.g., a cycle from the graph laid out in a circle, by the solution of a linear system. Relaxed This is a force-directed method based on the implementation in <ref> [19] </ref>, with repelling vertices but fixed-length edges. All the above embeddings are implemented in both two and three dimensions, although only the force-directed algorithms produce very aesthetically pleasing graph layouts in three dimensions. In other respects, the embeddings are implemented for the most part as described in their respective sources.
References-found: 19

