URL: http://www.cs.iastate.edu/~rlutz/publications/lfm97.ps
Refering-URL: http://www.cs.iastate.edu/~rlutz/homepage.html
Root-URL: http://www.cs.iastate.edu
Email: rlutz@cs.iastate.edu  
Title: Reuse of a Formal Model for Requirements Validation  
Author: Robyn R. Lutz 
Address: Pasadena, CA 91109-8099  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  
Abstract: This paper reports experience from how a project engaged in the process of requirements analysis for evolutionary builds can reuse the formally specified design model produced for a similar, earlier project in the same domain. Two levels of reuse are described here. First, a formally specified generic design model was generated on one project to systematically capture the design commonality in a set of software monitors onboard a spacecraft. These monitors periodically check for faults and invoke recovery software when needed. The paper summarizes the use of the design model to validate the software design of the various monitors on that first project. Secondly, the paper describes how the formal design model created for the first project was reused on a second, subsequent project. The model was reused to validate the evolutionary requirements for the second project's software monitors, which were being developed in a series of builds. Some mismatches due to the very different architectures on the two projects suggested changes to make the model more generic. In addition, several advantages to the reuse of the first project's formal model on the second project are reported. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Ampo and R. Lutz, </author> <title> "Evaluation of Software Safety Analysis Using Formal Methods", </title> <booktitle> Workshop for Foundation of Software Engineering (FOSE), </booktitle> <address> Hamana-Ko, Japan, </address> <month> Dec, </month> <year> 1995. </year>
Reference-contexts: Section 6 briefly discusses related work and future directions. Section 7 summarizes the lessons learned from the experience reported here. 2 The Formal Model In previous work we used two technologies, formal methods and object-oriented modeling, to analyze the software design for portions of the Cassini spacecraft's software <ref> [1, 12] </ref>. The two tools that were used were OMT, the Object Modeling Technique [17], and PVS, the Prototype Verification System tool (SRI). PVS is an integrated environment for developing and analyzing formal specifications using support tools and a theorem prover [18].
Reference: [2] <author> R. H. Bourdeau and B. H. C. Cheng, </author> <title> "A Formal Semantics for Object Model Diagrams," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(10): </volume> <pages> pp. 799-821, </pages> <month> October, </month> <year> 1995. </year>
Reference-contexts: This was consistent with our earlier experience that creating OMT diagrams prior to formally specifying the requirements enhanced the accuracy of the initial formal specifications and reduced the effort required to produce them [12]; see also <ref> [2] </ref>. The formal specification in PVS of the design for the monitor consists of two theories (five pages of typechecked PVS specifications). The first theory, called mon, specifies the design of a system-level fault protection monitor (Fig. 3).
Reference: [3] <editor> Cassini Orbiter Functional Requirements Book, </editor> <title> System Fault Protection Algorithms, </title> <institution> CAS-3-331, Jet Propulsion Laboratory, </institution> <month> June 7, </month> <year> 1995. </year>
Reference-contexts: The seven lemmas were proven, several by Martin Feather. The conformity of the OMT representation and the formal specifications to the actual, final software design was checked against the eighteen system-level fault protection monitors in the post-Critical Design Review document <ref> [3, 4] </ref>. One step in evaluating that the model accurately represented the design was to classify the Data Lists provided in [3] for each of the monitors, and then to map those data classifications to the model. <p> One step in evaluating that the model accurately represented the design was to classify the Data Lists provided in <ref> [3] </ref> for each of the monitors, and then to map those data classifications to the model. Toward this goal, the 162 data items in the Data Lists were classified into eight categories.
Reference: [4] <institution> Cassini System Fault Protection Final Design Review , Jet Propulsion Laboratory, Pasadena, </institution> <address> CA, </address> <month> June, </month> <year> 1995. </year>
Reference-contexts: The seven lemmas were proven, several by Martin Feather. The conformity of the OMT representation and the formal specifications to the actual, final software design was checked against the eighteen system-level fault protection monitors in the post-Critical Design Review document <ref> [3, 4] </ref>. One step in evaluating that the model accurately represented the design was to classify the Data Lists provided in [3] for each of the monitors, and then to map those data classifications to the model.
References-found: 4

