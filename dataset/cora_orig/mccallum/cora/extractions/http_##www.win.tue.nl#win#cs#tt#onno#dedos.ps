URL: http://www.win.tue.nl/win/cs/tt/onno/dedos.ps
Refering-URL: http://www.win.tue.nl/win/cs/tt/onno/
Root-URL: http://www.win.tue.nl
Title: DEDOS: A Distributed Real-Time Environment  
Author: Dieter K. Hammer Erik J. Luit Onno S. van Roosmalen Peter D.V. van der Stok Jack P.C. Verhoosel 
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Alstein and P.D.V. van der Stok, </author> <title> "Hard Real-Time Reliable Multicast in the DEDOS System", </title> <booktitle> Proceedings of the Third International Workshop on Responsive Computer Systems, </booktitle> <address> Lincoln, New Hampshire, </address> <month> Septem-ber </month> <year> 1993. </year>
Reference-contexts: Process p3 cannot read m and the unanimity requirement is not met. Two different algorithms are used to implement the multicast facilities in a given crate. The HRT algorithm is based on the hot-standby concept, where messages are stored in all mailbox replicas <ref> [1] </ref>. The disadvantage of the resulting overhead is compensated by a constant communication time independent of the number of failures. The SRT algorithm is based on the cold standby concept. Messages are stored in one given mailbox replica. Processes remember which messages they sent and received.
Reference: [2] <author> F. Cristian, </author> <title> "Understanding Fault-Tolerant Distributed Systems", </title> <journal> Communications of the ACM, </journal> <volume> Vol. 34(2), </volume> <pages> pp. 57-78, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Processes manifest timing failures when they respond too early or too late. Processes manifest emission-omission failures when they do not send a specified message in response to a stimulus; they manifest input-omission failures when they do not receive a message <ref> [2] </ref>. The protocols for DEDOS tolerate these classes of failures. The class of Byzan-tine failures where the process can send mes sages with a wrong contents is excluded under the assumption that the chance of their occurrence can be sufficiently reduced with error correcting codes.
Reference: [3] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schw-abl, C. Senft and R. Zainlinger, </author> <title> "Distributed Fault-Tolerant Real-Time Systems: The MARS Approach", </title> <booktitle> IEEE Micro, </booktitle> <year> 1989. </year>
Reference-contexts: In order to guarantee timeliness properties, these systems are deterministic and require off-line scheduling algorithms. Among the most prominent exponents of these types of systems is MARS <ref> [3] </ref>. Until now, little research has been done on methods to combine the two seemingly incompatible HRT and SRT paradigms. The DEDOS project acknowledges the demand for these dual systems. At the moment, the focus is on HRT issues while conventional techniques are used for the SRT part.
Reference: [4] <author> E.J. Luit and J.M.M. Martin, </author> <title> "A precise clock synchronization protocol", </title> <note> Computing Science Note 93/45, </note> <institution> Department of Mathematics and Computing Science, Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: Synchronized clocks are needed to execute the off-line calculated HRT schedule. They are also required to ascertain the timeliness requirements of the protocol stack. An algorithm has been developed to maintain once synchronized clocks accurately synchronized with each other <ref> [4] </ref>. It is specified that for any two correct processors p and q, their local clock values C p (t), C q (t) at time t obey the relation j C p (t) C q (t) j&lt; *.
Reference: [5] <author> O.S. van Roosmalen, </author> <title> "A Hierarchical Diagrammatic Representation of Class Structure", </title> <note> Computing Science Note 94/08, </note> <institution> Department of Mathematics and Computing Science, Eindhoven University of Technology, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: The server may release this activity without holding an explicit reference to the client. In Box "Activities" we give an example to illustrate some of the language additions. Box: "Activities" The following class definition exemplifies the introduction of activities. The example is taken from <ref> [5] </ref>. It concerns the implementation of the control of a home-heating system.
Reference: [6] <author> J. Stankovic and K. Ramamritham, </author> <title> "The Spring Kernel: A New Paradigm for Real-Time Systems", </title> <journal> IEEE Software, </journal> <volume> Vol. 8(3), </volume> <pages> pp. 62-72, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In practice, real-time systems must support both soft and hard real-time tasks. Soft real-time (SRT) applications are suited for system administration, system maintenance, user interfaces, OSI communication, etc. Their advantage is flexibility (they allow e.g. for on-line reconfiguration). Simple algorithms suffice to achieve a high processor utilization <ref> [6] </ref>. Their disadvantage is that it is extremely difficult to verify the timing properties of the system beforehand. In safety critical applications on the other hand, the kernel of the control activities often has hard real-time (HRT) requirements.
Reference: [7] <author> P.D.V. van der Stok, L.J.A.M Somers and P.T.A. Thi-jssen, </author> <title> "Formal Specification and Simulation of a Real-Time Concurrency Control Protocol", </title> <booktitle> Proceedings of the Second International Workshop on Responsive Computer Systems, </booktitle> <address> Tokyo, Japan, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: The algorithm is chosen on the basis of a simulation of the typical load conditions of the control system. For the moment, three Concurrency Control Algorithms (CCA) are developed and evaluated: (1) Two Phase Locking (2PL), (2) Multi Version TimeStamp Ordening (MVTSO) and (3) Optimistic Concurrency Control (OCC) <ref> [7] </ref>. Especially, the latter approach is extensively studied as variations of this type are proving to be the most promising candidates for Real-Time databases. The performance of time related transactions and the HRT/SRT communication was proven to increase with the addition of versions to the objects.
Reference: [8] <author> P.D.V. van der Stok, M.M.M.P.J. Claessen and D. Alstein, </author> <title> "Hierarchical Membership Protocol for Synchronous Distributed Systems", </title> <note> Computing Science Note 93/40, </note> <institution> Department of Mathematics and Computing Science, Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: The connecting processors communicate this set to the lower levels. At each level, all processors take the intersection of all received sets as the new membership set <ref> [8] </ref>. For the clock synchronization algorithm the values of the local clocks are communicated in the liveness messages. When the vectors of present messages are exchanged, vectors of received clock values are communicated as well.
Reference: [9] <author> J.P.C. Verhoosel, E.J. Luit, D.K. Hammer and E. Jansen, </author> <title> "A Static Scheduling Algorithm for Distributed Hard Real-Time Systems", </title> <journal> The Journal of Real-Time Systems, </journal> <volume> Vol. 3, </volume> <pages> pp. 227-246, </pages> <year> 1991. </year>
Reference: [10] <author> J.P.C. Verhoosel, L.R. Welch, D.K. Hammer, A.D. Stoyenko and E.J. Luit, </author> <title> "A Model for Scheduling of Object-Based, Distributed Real-Time Systems", </title> <note> to be published in the The Journal of Real-Time Systems, </note> <year> 1994. </year>
Reference-contexts: The same schedule can then be used for successive intervals of length LCM. The deterministic representation consists of a set of non-preemptable beads that are units of off-line scheduling <ref> [10] </ref>. Each bead represents either (1) the execution of a piece of code of a function member, or (2) the sending or receiving phase of a communication. A bead cannot contain calls to function members of objects in other processes.
References-found: 10

