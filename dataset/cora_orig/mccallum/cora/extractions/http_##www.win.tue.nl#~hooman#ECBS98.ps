URL: http://www.win.tue.nl/~hooman/ECBS98.ps
Refering-URL: http://www.win.tue.nl/~hooman/ECBS98.html
Root-URL: http://www.win.tue.nl
Email: Email: fjaco,hoomang@win.tue.nl Email: edejong@signaal.nl  
Title: Formal Requirements Specification for Command and Control Systems  
Author: Jaco van de Pol () Jozef Hooman () Edwin de Jong () 
Address: P.O. Box 513, 5600 MB Eindhoven P.O. Box 42, 7550 GD Hengelo The Netherlands The Netherlands  
Affiliation: (1) Eindhoven University of Technology (2) Hollandse Signaalapparaten BV Dept. of Computing Science Dept. of Applied System Research  
Abstract: This paper presents an approach to formal requirements specification of embedded systems. The specific demands of a specification for command and control systems are addressed. The proposed method allows various views of a system, like conventional methods. The added value lies in the fact that the relationship between the views is specified formally, and consistency between views can be analyzed formally. As a case study, we develop and analyze a formal requirements specification for a subsystem of a realistic command and control system. Specification and verification are carried out using the language and proof checker of PVS. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E.M. Clarke and J.M. Wing. </author> <title> Formal methods: State of the art and future directions. </title> <journal> ACM Computing Surveys, </journal> <volume> 28(4) </volume> <pages> 626-643, </pages> <year> 1996. </year>
Reference-contexts: The criteria themselves can be stated of course, but note that in general, we cannot require that a system finds the optimal solution. Similarly, as signaled by [3], mere preferences (as opposed to requirements) are hard to formalize. Related work. We refer to <ref> [1] </ref> for an overview of industrial applications of formal methods. In the papers below, similar work is reported as in our paper. A requirements specification for an aircraft collision avoidance system is given in [6].
Reference: [2] <author> B. Dutertre and V. Stavridou. </author> <title> Formal requirements analysis of an avionics control system. </title> <journal> IEEE Trans. on SE, </journal> <volume> 23(5) </volume> <pages> 267-278, </pages> <year> 1997. </year>
Reference-contexts: In that paper, ER-diagrams and data-flow diagrams are translated into state- and operation-specifications in VDM [5]. Concurrency requirements are modeled separately. We share many of the author's findings concerning specification. A formal requirements analysis for an avionics control system can be found in <ref> [2] </ref>. PVS is used there to formulate functional and safety requirements. It is formally verified whether the functional requirements satisfy the safety requirements. Acknowledgments. We like to thank Dieter Hammer for his stimulating contribution to our project discussions and his comments on this paper.
Reference: [3] <author> A. Hall. </author> <title> Using formal methods to develop an ATC information system. </title> <journal> IEEE Software, </journal> <volume> 13(2) </volume> <pages> 66-76, </pages> <year> 1996. </year>
Reference-contexts: Optimization criteria occur frequently in command and control systems. It is not easy to formalize that a system should use/satisfy such criteria. The criteria themselves can be stated of course, but note that in general, we cannot require that a system finds the optimal solution. Similarly, as signaled by <ref> [3] </ref>, mere preferences (as opposed to requirements) are hard to formalize. Related work. We refer to [1] for an overview of industrial applications of formal methods. In the papers below, similar work is reported as in our paper. <p> A single state-based model is constructed in that paper, written in RSML (Requirements State Machine Language). This model expresses the black-box behavior of the system. Several formal properties of the specification are automatically verified in [4]. In <ref> [3] </ref>, formal methods are used for specification, design and verification of an air traffic control infor mation system. In that paper, ER-diagrams and data-flow diagrams are translated into state- and operation-specifications in VDM [5]. Concurrency requirements are modeled separately. We share many of the author's findings concerning specification.
Reference: [4] <author> M.P.E. Heimdahl and N.G. Leveson. </author> <title> Completeness and consistency in hierarchical state-based requirements. </title> <journal> IEEE Trans. on SE, </journal> <volume> 22(6) </volume> <pages> 363-377, </pages> <year> 1996. </year>
Reference-contexts: A specification is internally complete if it deals with all cases that can be foreseen by inspecting the specification. This means among others that to any expected input there is some specified next state. However, we don't require that this state is deterministically specified, as opposed to <ref> [4] </ref>. First of all, it must be checked whether the specification is well-formed, which can be done by parsing and type-checking. This already reveals a lot of potential inconsistencies. In many typed formal languages, type-correct theories containing definitions only (thus excluding axioms), are even logically consistent. <p> A requirements specification for an aircraft collision avoidance system is given in [6]. A single state-based model is constructed in that paper, written in RSML (Requirements State Machine Language). This model expresses the black-box behavior of the system. Several formal properties of the specification are automatically verified in <ref> [4] </ref>. In [3], formal methods are used for specification, design and verification of an air traffic control infor mation system. In that paper, ER-diagrams and data-flow diagrams are translated into state- and operation-specifications in VDM [5]. Concurrency requirements are modeled separately. We share many of the author's findings concerning specification.
Reference: [5] <author> C.B. Jones. </author> <title> Systematic Software Development using VDM. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1990. </year>
Reference-contexts: Several formal properties of the specification are automatically verified in [4]. In [3], formal methods are used for specification, design and verification of an air traffic control infor mation system. In that paper, ER-diagrams and data-flow diagrams are translated into state- and operation-specifications in VDM <ref> [5] </ref>. Concurrency requirements are modeled separately. We share many of the author's findings concerning specification. A formal requirements analysis for an avionics control system can be found in [2]. PVS is used there to formulate functional and safety requirements.
Reference: [6] <author> N.G. Leveson, M.P.E. Heimdahl, H. Hildreth, and J.D. Reese. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Trans. on SE, </journal> <volume> 20(9) </volume> <pages> 684-707, </pages> <year> 1994. </year>
Reference-contexts: Related work. We refer to [1] for an overview of industrial applications of formal methods. In the papers below, similar work is reported as in our paper. A requirements specification for an aircraft collision avoidance system is given in <ref> [6] </ref>. A single state-based model is constructed in that paper, written in RSML (Requirements State Machine Language). This model expresses the black-box behavior of the system. Several formal properties of the specification are automatically verified in [4].
Reference: [7] <author> B. Meyer. </author> <title> The next software breakthrough. </title> <journal> IEEE Computer, </journal> <volume> 30(7) </volume> <pages> 113-114, </pages> <year> 1997. </year>
Reference-contexts: Firstly, tool support is needed, to make the analysis less labour intensive. Secondly, formal specifications must be modular, modifiable and extensible, in order to allow for an iterative development of the specification. Finally, as argued by <ref> [7] </ref>, formal methods can only be cost effective if the resulting products are reused. On the other hand, [7] argues that formal specification is essential for the success of reusing software components, so this is another motivation for research on formal specification. Goal. <p> Secondly, formal specifications must be modular, modifiable and extensible, in order to allow for an iterative development of the specification. Finally, as argued by <ref> [7] </ref>, formal methods can only be cost effective if the resulting products are reused. On the other hand, [7] argues that formal specification is essential for the success of reusing software components, so this is another motivation for research on formal specification. Goal.
Reference: [8] <author> S. Owre, J.M. Rushby, N. Shankar, and F. Von Henke. </author> <title> Formal Verification of Fault-Tolerant Architectures: Prolegomena to the Design of PVS. </title> <journal> IEEE Trans. on SE, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <year> 1995. </year>
Reference-contexts: To evaluate our approach, we formally specified and analyzed the requirements for a subsystem of a realistic command and control system. The requirements are derived from existing command and control systems. We used the formal language and proof checker of PVS <ref> [8] </ref>. For the presentation of the literate specification we used a tool developed for literate programming, viz. noweb [9]. Section 2 forms the main section of this paper. A general approach for the formal specification and analysis of requirements is developed. The case study is presented in Section 3. <p> A similar assumption on systems is made in [13]. 3.2 PVS and noweb In order to carry out the case study, a particular formal language has to be chosen. To support the case study mechanically, certain tools must be present. We used PVS (Prototype Verification System) <ref> [8] </ref> as a specification language equipped with an interactive proof checker, and noweb [9] as a literate specification tool. PVS language. The language of PVS is based on classical higher-order logic. This means that quantification over functions, sets and properties is allowed, leading to a great expressive power.
Reference: [9] <author> N. Ramsey. </author> <title> Literate programming simplified. </title> <journal> IEEE Software, </journal> <volume> 11(5) </volume> <pages> 97-105, </pages> <year> 1994. </year>
Reference-contexts: The requirements are derived from existing command and control systems. We used the formal language and proof checker of PVS [8]. For the presentation of the literate specification we used a tool developed for literate programming, viz. noweb <ref> [9] </ref>. Section 2 forms the main section of this paper. A general approach for the formal specification and analysis of requirements is developed. The case study is presented in Section 3. Finally, we will evaluate our approach on the basis of the case study in Section 4. <p> To support the case study mechanically, certain tools must be present. We used PVS (Prototype Verification System) [8] as a specification language equipped with an interactive proof checker, and noweb <ref> [9] </ref> as a literate specification tool. PVS language. The language of PVS is based on classical higher-order logic. This means that quantification over functions, sets and properties is allowed, leading to a great expressive power. The logic is equipped with a type system. <p> This process is partly automated by built-in strategies, like term rewriting, and decision procedures for linear arithmetic and propositional logic. Noweb. We use noweb as a literate specification tool <ref> [9] </ref>. In combination with L A T E X, noweb yields typeset text and PVS code. The PVS code can also be extracted, in order to formally analyze it. PVS theories are split in chunks, which can be presented in any order.
Reference: [10] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1991. </year>
Reference-contexts: Our approach. The good properties of informal specifications should be maintained, especially their readability and the possibility to have different views of the same system, like in e.g. OMT <ref> [10] </ref>. In order to maintain readability, we propose to interleave the formal and informal specification by means of a "literate specification" style. To get a well-structured specification, we follow the conventional approach of presenting different views of a system, viz. the information-, function- and control-model. <p> Similarly, since noweb generates the output, it is not possible to use the L A T E X pretty printer of PVS. Also graphical notations, like OMT-diagrams <ref> [10] </ref>, should be supported by the literate specification tool. * More emphasis should be put on the control model.
Reference: [11] <author> J.M. Rushby. </author> <title> Formal methods and their role in the certification of critical systems. </title> <type> Technical Report CSL-95-01, CSL, </type> <year> 1995. </year>
Reference-contexts: This already reveals a lot of potential inconsistencies. In many typed formal languages, type-correct theories containing definitions only (thus excluding axioms), are even logically consistent. The second possibility of verification is proving putative theorems <ref> [11] </ref>. These theorems can be seen as new requirements, or as challenges to the specification. The confidence in the specification is raised by proving that they already follow from the specification. It must also be proved, that the various views are compatible, i.e. don't put contradictory requirements.
Reference: [12] <author> J.M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1992. </year>
Reference: [13] <author> P. Zave and M. Jackson. </author> <title> Where do operations come from? A multiparadigm specification technique. </title> <journal> IEEE Trans. on SE, </journal> <volume> 22(7) </volume> <pages> 508-528, </pages> <year> 1996. </year>
Reference-contexts: For this reason, we have chosen to use the same language for all models. This can be weakened by using different languages that are translated to a common underlying formal framework. The second approach is followed by <ref> [13] </ref>. This language must be expressive enough to model the various views. In order to find a lot of mistakes automatically, we prefer a language with a strong typing discipline (in the sense that every expression must have a unique type). <p> TTM has no output actions. Instead, an abstract picture is built, containing the current sets of sensor- and tactical tracks, and the join-and responsibility relations between them. A similar assumption on systems is made in <ref> [13] </ref>. 3.2 PVS and noweb In order to carry out the case study, a particular formal language has to be chosen. To support the case study mechanically, certain tools must be present.
References-found: 13

