URL: http://www.cs.wustl.edu/cs/techreports/1995/wucs-95-22.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: User Interface Applications of a Multi-way Constraint Solver  
Author: T. Paul McCartney 
Date: October 1995  
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Pubnum: WUCS-95-22  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Alan Borning, and Bjorn Freeman-Benson, </author> <title> The OTI Constraint Solver: A Constraint Library for Constructing Interactive Graphical User Interfaces. </title> <booktitle> To appear in Proceedings of the First Incarnation Conference on Principles and Practice of Constraint Programming, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction <ref> [1] </ref>, [4], [10], [14], [20], [21], [23], [26].
Reference: [2] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint Hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: There may be many possible ways to satisfy a series of multi-way constraints. Constraint hierarchies <ref> [2] </ref>, [3], [23] allow each constraint to be specified using a preference level, or strength, representing its relative importance. This strength information is used to determine how to enforce constraints in the event of conicts, favoring stronger over weaker constraints.
Reference: [3] <author> Bjorn Freeman-Benson, John Maloney, Alan Borning. </author> <title> An Incremental Constraint Solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <year> 1990. </year>
Reference-contexts: There may be many possible ways to satisfy a series of multi-way constraints. Constraint hierarchies [2], <ref> [3] </ref>, [23] allow each constraint to be specified using a preference level, or strength, representing its relative importance. This strength information is used to determine how to enforce constraints in the event of conicts, favoring stronger over weaker constraints. <p> Most incremental constraint algorithms maintain constraint information locally in a constraint graph to avoid redundant global computation. New constraints can typically be added by only considering a small subset of the constraints. UltraBlue uses the concept of walkabout strength <ref> [3] </ref>, as a means to maintain constraint information locally at each variable. The walkabout strength of a variable represents the strength of its weakest upstream constraint (a constraint is said to be upstream of a variable if there exists a directed path from the constraint to the variable). <p> Systems that use this approach include Fabrik [13], RENDEZVOUS [10], [11], and Hudsons incremental attribute evaluation algorithm [12]. However, this method of evaluation does not avoid unsolvable series of equations (see Section 2.3), and can leave constraint computations unsatisfied. The DeltaBlue algorithm <ref> [3] </ref>, [14], [23] provides support to solve hierarchies of multi-way, single-output dataow constraints. DeltaBlue uses a comparator known as locally-predicate-better to decide which constraints should be enforced. Locally-predicate-better is a metric that prefers to enforce stronger constraints over (possibly many) weaker constraints [3]. <p> The DeltaBlue algorithm <ref> [3] </ref>, [14], [23] provides support to solve hierarchies of multi-way, single-output dataow constraints. DeltaBlue uses a comparator known as locally-predicate-better to decide which constraints should be enforced. Locally-predicate-better is a metric that prefers to enforce stronger constraints over (possibly many) weaker constraints [3]. DeltaBlue does not attempt to avoid cycles of constraints. When DeltaBlue detects a constraint cycle, it arbitrarily unenforces one of the constraints on the cycle, regardless of its strength (see Section 2.3).
Reference: [4] <author> Michael Gleicher. </author> <title> A Graphics Toolkit Based on Differential Constraints. </title> <booktitle> In Proceedings of the 1993 ACM Symposium on User Interface Technology, </booktitle> <pages> pages 109-120. </pages>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction [1], <ref> [4] </ref>, [10], [14], [20], [21], [23], [26]. <p> Preferences maintained. Solvable equations. strong B A weak required A = 5 B = C DeltaBlue (a) (b) (c) (d) B=C is added. is not enforced. User Interface Applications of a Multi-way Constraint Solver 6 converge and sometimes gets stuck in a local minimum. The Bramble toolkit <ref> [4] </ref> provided support for graphical manipulation by employing differential constraint techniques. A constraint engine capable of managing non-linear equations is used to map interactive controls and constraints to graphics object parameters. However, this approach is only applicable to time-based, continuous motion interaction rather than general purpose computation.
Reference: [5] <author> Kenneth J. Goldman, et al. </author> <note> Welcome to the Programmers Playground! http://www.cs.wustl.edu/cs/playground/ </note>
Reference-contexts: Future work includes enabling end-users to define arbitrary constraint relationships through the use of a calculator-like interface. Information and on-line demonstrations of The Programmers Playground and EUPHORIA are available on the World Wide Web <ref> [5] </ref>. ACKNOWLEDGMENTS Ken Goldman was very helpful and encouraging, providing suggestions and listening to ideas and problems encountered during the development of the UltraBlue algorithm.
Reference: [6] <author> Kenneth J. Goldman, T. Paul McCartney, Bala Swaminathan, and Ram Sethuraman. </author> <title> The Programmers Playground: A Demonstration. </title> <booktitle> In Proceedings of the 1995 ACM International Conference on Multimedia, </booktitle> <month> November </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: This paper describes UltraBlue, a new constraint solver algorithm, and its application to the architecture and run-time system of the EUPHORIA user interface management system <ref> [6] </ref>, [15], [17]. UltraBlue is an efficient incremental algorithm for solving hierarchies of multi-way, single-output, dataow constraints using local propagation. That is, constraints have a dynamically changing computation direction, a hierarchy of enforcement preferences, and are represented using a dataow graph structure with each constraint having a single output. <p> In practice, UltraBlue runs in linear time or better. UltraBlues unique features have been designed to meet the needs of a general purpose, interactive user interface management system. UltraBlue has been developed in the context of The Programmers Playground distributed programming environment <ref> [6] </ref>, [7] and the EUPHORIA user interface management system. The Programmers Playground is a software library and run-time system for creating distributed multimedia applications.
Reference: [7] <author> Kenneth J. Goldman, Bala Swaminathan, T. Paul McCartney, Michael D. Anderson, and Ram Sethuraman. </author> <title> The Programmers Playground: I/O Abstraction for User-Configurable Distributed Applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 735-746, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In practice, UltraBlue runs in linear time or better. UltraBlues unique features have been designed to meet the needs of a general purpose, interactive user interface management system. UltraBlue has been developed in the context of The Programmers Playground distributed programming environment [6], <ref> [7] </ref> and the EUPHORIA user interface management system. The Programmers Playground is a software library and run-time system for creating distributed multimedia applications.
Reference: [8] <author> J. Gosling, </author> <title> Algebraic Constraints. </title> <type> Ph.D. Dissertation, </type> <institution> Carnegie-Mellon University School of Computer Science technical report CMU-CS-83-132, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: As discussed earlier, some constraint systems allow cyclic relationships to be formed in the planning stage and use a cycle solver (e.g., using a linear equation solver). This approach can generate a series of constraints whose computations are not solvable (see Section 2.3). The Magritte system <ref> [8] </ref> used constraints in an editor for simple line drawings. Algebraic transformations were used to eliminate cycles in the constraint graph. When propagation encountered a cycle, the transformation system attempted to replace each cycle with a single complex constraint (i.e., executed through the use of a cycle solver).
Reference: [9] <author> Tyson R. Henry and Scott E. Hudson. </author> <title> Using Active Data in a UIMS. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software, </booktitle> <pages> pages 167-178, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The strength of these constraints is required since they should always be maintained in the presence of conicting constraints. In addition, the width and height variables have value consistency assertions that prevent their values from becoming negative. Constraint C3 is known as an active value constraint <ref> [9] </ref>. The purpose of an active value constraint is to perform a side effect action whenever it is executed. In this case, C3 is used to draw the rectangular shape whenever one of its dimension variables is modified 1 .
Reference: [10] <author> Ralph D. Hill. </author> <title> Abstraction-Link-View Paradigm: Using Constraints to Connect User Interfaces to Applications. </title> <booktitle> In ACM Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 335-342, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction [1], [4], <ref> [10] </ref>, [14], [20], [21], [23], [26]. <p> Many one-way constraint solvers use a once around the loop approach in handling cycles. That is, cycles are permitted to be formed, and the computation of each constraint on a cycle is executed once during constraint evaluation. Systems that use this approach include Fabrik [13], RENDEZVOUS <ref> [10] </ref>, [11], and Hudsons incremental attribute evaluation algorithm [12]. However, this method of evaluation does not avoid unsolvable series of equations (see Section 2.3), and can leave constraint computations unsatisfied. The DeltaBlue algorithm [3], [14], [23] provides support to solve hierarchies of multi-way, single-output dataow constraints.
Reference: [11] <author> Ralph D. Hill. </author> <title> The Rendezvous Constraint Maintenance System. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 225-234, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: This section summaries basic terminology, the visual notation used in this paper, and related work. 2.1 Multi-way constraints One-way dataow constraint systems have been used extensively as a means of forming basic constraint relationships <ref> [11] </ref>, [12], [18], [19]. With one-way constraints, each constraint represents a static computation with a fixed set of input variables (variables used by the constraints computation) and output variables (variables computed by the constraints computation). Each variable may have multiple associated constraints, forming a directed constraint graph. <p> Many one-way constraint solvers use a once around the loop approach in handling cycles. That is, cycles are permitted to be formed, and the computation of each constraint on a cycle is executed once during constraint evaluation. Systems that use this approach include Fabrik [13], RENDEZVOUS [10], <ref> [11] </ref>, and Hudsons incremental attribute evaluation algorithm [12]. However, this method of evaluation does not avoid unsolvable series of equations (see Section 2.3), and can leave constraint computations unsatisfied. The DeltaBlue algorithm [3], [14], [23] provides support to solve hierarchies of multi-way, single-output dataow constraints.
Reference: [12] <author> Scott E. Hudson. </author> <title> A System for Efficient and Flexible One-Way Constraint Evaluation in C++. </title> <institution> Georgia Institute of Technology College of Computing technical report 95-15, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: This section summaries basic terminology, the visual notation used in this paper, and related work. 2.1 Multi-way constraints One-way dataow constraint systems have been used extensively as a means of forming basic constraint relationships [11], <ref> [12] </ref>, [18], [19]. With one-way constraints, each constraint represents a static computation with a fixed set of input variables (variables used by the constraints computation) and output variables (variables computed by the constraints computation). Each variable may have multiple associated constraints, forming a directed constraint graph. <p> That is, cycles are permitted to be formed, and the computation of each constraint on a cycle is executed once during constraint evaluation. Systems that use this approach include Fabrik [13], RENDEZVOUS [10], [11], and Hudsons incremental attribute evaluation algorithm <ref> [12] </ref>. However, this method of evaluation does not avoid unsolvable series of equations (see Section 2.3), and can leave constraint computations unsatisfied. The DeltaBlue algorithm [3], [14], [23] provides support to solve hierarchies of multi-way, single-output dataow constraints.
Reference: [13] <author> Dan Ingalls, Scott Wallace, et al. Fabrik: </author> <title> A Visual Programming Environment. </title> <booktitle> In OOPSLA Conference Proceedings, </booktitle> <pages> pages 176-190, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: Many one-way constraint solvers use a once around the loop approach in handling cycles. That is, cycles are permitted to be formed, and the computation of each constraint on a cycle is executed once during constraint evaluation. Systems that use this approach include Fabrik <ref> [13] </ref>, RENDEZVOUS [10], [11], and Hudsons incremental attribute evaluation algorithm [12]. However, this method of evaluation does not avoid unsolvable series of equations (see Section 2.3), and can leave constraint computations unsatisfied. The DeltaBlue algorithm [3], [14], [23] provides support to solve hierarchies of multi-way, single-output dataow constraints.
Reference: [14] <author> John H. Maloney. </author> <title> Using Constraints for User Interface Construction. </title> <type> Ph.D. Thesis, </type> <institution> University of Washing-ton Department of Computer Science and Engineering technical report 91-08-12, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction [1], [4], [10], <ref> [14] </ref>, [20], [21], [23], [26]. Through constraints, relationships among user interface components and their applications can be defined declaratively, leaving the task of maintaining the relationships to a constraint solver, an algorithm that determines a plan for computing constrained values in a way that is consistent with the specified constraints. <p> Contributions of UltraBlue include a value consistency mechanism for maintaining arbitrary assertions (e.g., inequality relationships) and a cycle User Interface Applications of a Multi-way Constraint Solver 2 avoidance heuristic algorithm for eliminating cyclic constraint relationships. While the general problem of cycle avoidance for this type of constraints is NP-complete <ref> [14] </ref>, UltraBlue is a O (DN 2 ) time heuristic algorithm (where D is the maximum constraint fan-out of a variable, and N is the number of constraints) that finds acyclic solution graphs while preferring constraints with higher strength. In practice, UltraBlue runs in linear time or better. <p> Systems that use this approach include Fabrik [13], RENDEZVOUS [10], [11], and Hudsons incremental attribute evaluation algorithm [12]. However, this method of evaluation does not avoid unsolvable series of equations (see Section 2.3), and can leave constraint computations unsatisfied. The DeltaBlue algorithm [3], <ref> [14] </ref>, [23] provides support to solve hierarchies of multi-way, single-output dataow constraints. DeltaBlue uses a comparator known as locally-predicate-better to decide which constraints should be enforced. Locally-predicate-better is a metric that prefers to enforce stronger constraints over (possibly many) weaker constraints [3]. <p> When DeltaBlue detects a constraint cycle, it arbitrarily unenforces one of the constraints on the cycle, regardless of its strength (see Section 2.3). In contrast, our algorithm, UltraBlue, uses a heuristic that attempts to maintain locally-predicate-better condition even in the case of cycles. However, the general problem is NP-complete <ref> [14] </ref>, so when cycles are eliminated UltraBlue may not find an optimal solution according to the locally-predicate-better comparator. Typically, dataow constraints are used to compute equation-based, equality relationships among a set of variables.
Reference: [15] <author> T. Paul McCartney and Kenneth J. Goldman. </author> <title> EUPHORIA Reference Manual. </title> <institution> Washington University Department of Computer Science technical report WUCS-95-19, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: This paper describes UltraBlue, a new constraint solver algorithm, and its application to the architecture and run-time system of the EUPHORIA user interface management system [6], <ref> [15] </ref>, [17]. UltraBlue is an efficient incremental algorithm for solving hierarchies of multi-way, single-output, dataow constraints using local propagation. That is, constraints have a dynamically changing computation direction, a hierarchy of enforcement preferences, and are represented using a dataow graph structure with each constraint having a single output.
Reference: [16] <author> T. Paul McCartney and Kenneth J. Goldman. </author> <title> Visual Specification of Interprocess and Intraprocess Communication. </title> <booktitle> In Proceedings of the 10th International Symposium on Visual Languages, </booktitle> <pages> pages 80-87, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: An equality constraint is established between two graphics object attributes by drawing a connection line between the corresponding graphics object handles. This approach is based on a visual language with consistent visual semantics for defining both interprocess and intraprocess communication <ref> [16] </ref>. For example, suppose that an end-user needed to construct an adjustable picture frame for a photograph. That is, the photograph should be surrounded by a border of uniform thickness and both the photograph and border should be adjustable through direct manipulation.
Reference: [17] <author> T. Paul McCartney, Kenneth J. Goldman, and David E. Saff. EUPHORIA: </author> <title> End-User Construction of Direct Manipulation User Interfaces for Distributed Applications. To appear in Software Concepts and Tools. </title>
Reference-contexts: This paper describes UltraBlue, a new constraint solver algorithm, and its application to the architecture and run-time system of the EUPHORIA user interface management system [6], [15], <ref> [17] </ref>. UltraBlue is an efficient incremental algorithm for solving hierarchies of multi-way, single-output, dataow constraints using local propagation. That is, constraints have a dynamically changing computation direction, a hierarchy of enforcement preferences, and are represented using a dataow graph structure with each constraint having a single output. <p> Unsolvable cycles similar to approach to eliminate cycles in multi-way constraint graphs while preferring constraints of higher strength. 2.4 Related work This section summarizes some related work in the area of constraints. A discussion of related work in the area of user interfaces can be found elsewhere <ref> [17] </ref>. The SketchPad system [24] was the first graphical system to use constraints. SketchPad allowed users to assert relationships between graphical objects and showed the effects of the constraints during real-time direct manipulation. To handle cyclic constraint relationships, SketchPad employed relaxation, an iterative error minimizing process to execute constraints. <p> Since C3 represents a side-effect action, and not an equation, it is represented as a one-way constraint with shape as its only output variable. This variable contains an implementation dependent representation (e.g., a pointer to a rectangle class with 1 The shape is invalidated for later redrawing <ref> [17] </ref>. (a) (b) User Interface Applications of a Multi-way Constraint Solver 10 associated X Windows information) that is used in drawing the shape. Constraints C4 and C5 are known as stay constraints.
Reference: [18] <author> Olsen, D., Dempsey, E. and Rogge, R. </author> <title> Input/Output Linkage in a User Interface Management System. Com User Interface Applications of a Multi-way Constraint Solver 26 puter Graphics 19(3) </title> <type> 191-197, </type> <month> July </month> <year> 1985. </year>
Reference-contexts: This section summaries basic terminology, the visual notation used in this paper, and related work. 2.1 Multi-way constraints One-way dataow constraint systems have been used extensively as a means of forming basic constraint relationships [11], [12], <ref> [18] </ref>, [19]. With one-way constraints, each constraint represents a static computation with a fixed set of input variables (variables used by the constraints computation) and output variables (variables computed by the constraints computation). Each variable may have multiple associated constraints, forming a directed constraint graph.
Reference: [19] <author> Mark W. Perlin. </author> <title> Reducing Computation by Unifying Inference with User Interface. </title> <institution> Carnegie Mellon School of Computer Science technical report CMU-CS-88-150, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: This section summaries basic terminology, the visual notation used in this paper, and related work. 2.1 Multi-way constraints One-way dataow constraint systems have been used extensively as a means of forming basic constraint relationships [11], [12], [18], <ref> [19] </ref>. With one-way constraints, each constraint represents a static computation with a fixed set of input variables (variables used by the constraints computation) and output variables (variables computed by the constraints computation). Each variable may have multiple associated constraints, forming a directed constraint graph.
Reference: [20] <author> Michael Sannella. </author> <title> Constraint Satisfaction and Debugging for Interactive User Interfaces. </title> <type> Ph.D. Thesis, </type> <institution> University of Washington Department of Computer Science and Engineering technical report 94-09-10. </institution>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction [1], [4], [10], [14], <ref> [20] </ref>, [21], [23], [26]. Through constraints, relationships among user interface components and their applications can be defined declaratively, leaving the task of maintaining the relationships to a constraint solver, an algorithm that determines a plan for computing constrained values in a way that is consistent with the specified constraints.
Reference: [21] <author> Michael Sannella. SkyBlue: </author> <title> A Multi-way Local Propagation Constraint Solver for User Interface Construction. </title> <booktitle> In proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 137-146, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction [1], [4], [10], [14], [20], <ref> [21] </ref>, [23], [26]. Through constraints, relationships among user interface components and their applications can be defined declaratively, leaving the task of maintaining the relationships to a constraint solver, an algorithm that determines a plan for computing constrained values in a way that is consistent with the specified constraints. <p> Algebraic transformations were used to eliminate cycles in the constraint graph. When propagation encountered a cycle, the transformation system attempted to replace each cycle with a single complex constraint (i.e., executed through the use of a cycle solver). The SkyBlue algorithm <ref> [21] </ref> provides support for solving hierarchies of multi-way, multi-output constraints, and has been applied in the Garnet toolkit [22]. Multi-output constraints provide a convenient way to group multiple related computations into a single constraint. SkyBlue allows cyclic relationships to be formed during the planning stage.
Reference: [22] <author> Michael Sannella and Alan Borning. Multi-Garnet: </author> <title> Integrating Multi-way Constraints with Garnet. </title> <institution> University of Washington Department of Computer Science and Engineering technical report 92-07-01, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: When propagation encountered a cycle, the transformation system attempted to replace each cycle with a single complex constraint (i.e., executed through the use of a cycle solver). The SkyBlue algorithm [21] provides support for solving hierarchies of multi-way, multi-output constraints, and has been applied in the Garnet toolkit <ref> [22] </ref>. Multi-output constraints provide a convenient way to group multiple related computations into a single constraint. SkyBlue allows cyclic relationships to be formed during the planning stage. During execution, each cycle is essentially treated as a single multi-output constraint that can be executed using a cycle solver.
Reference: [23] <author> Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Borning. </author> <title> Multi-way versus One-way Constraints in User Interfaces: Experience with the DeltaBlue Algorithm. </title> <journal> Software--Practice and Experience, </journal> <volume> Vol. 32 No. 5, </volume> <pages> pages 529-566, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction [1], [4], [10], [14], [20], [21], <ref> [23] </ref>, [26]. Through constraints, relationships among user interface components and their applications can be defined declaratively, leaving the task of maintaining the relationships to a constraint solver, an algorithm that determines a plan for computing constrained values in a way that is consistent with the specified constraints. <p> There may be many possible ways to satisfy a series of multi-way constraints. Constraint hierarchies [2], [3], <ref> [23] </ref> allow each constraint to be specified using a preference level, or strength, representing its relative importance. This strength information is used to determine how to enforce constraints in the event of conicts, favoring stronger over weaker constraints. <p> Systems that use this approach include Fabrik [13], RENDEZVOUS [10], [11], and Hudsons incremental attribute evaluation algorithm [12]. However, this method of evaluation does not avoid unsolvable series of equations (see Section 2.3), and can leave constraint computations unsatisfied. The DeltaBlue algorithm [3], [14], <ref> [23] </ref> provides support to solve hierarchies of multi-way, single-output dataow constraints. DeltaBlue uses a comparator known as locally-predicate-better to decide which constraints should be enforced. Locally-predicate-better is a metric that prefers to enforce stronger constraints over (possibly many) weaker constraints [3]. DeltaBlue does not attempt to avoid cycles of constraints. <p> Figure 13s table shows the runtime performance of DeltaBlue and UltraBlue. UltraBlue executes this benchmark in O (N) time. DeltaBlues running time is exponential due to its method of maintaining the variable walkabout strengths. The time complexity of the DeltaBlue algorithm has been reported as O (N) <ref> [23] </ref>. However, that analysis made the assumption that every underlying, undirected constraint graph of is acyclic. The O (N) time complexity is not applicable to this benchmark since the underlying constraint graph of the pyramid is cyclic, even though the directed constraint graph is acyclic.
Reference: [24] <author> I, Sutherland. </author> <title> Sketchpad: A Man-Machine Graphical Communication System. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <pages> pages 329-345, </pages> <note> IFIPS 1963. </note>
Reference-contexts: A discussion of related work in the area of user interfaces can be found elsewhere [17]. The SketchPad system <ref> [24] </ref> was the first graphical system to use constraints. SketchPad allowed users to assert relationships between graphical objects and showed the effects of the constraints during real-time direct manipulation. To handle cyclic constraint relationships, SketchPad employed relaxation, an iterative error minimizing process to execute constraints.
Reference: [25] <author> Brad Vander Zanden. </author> <title> An Incremental Algorithm for Satisfying Hierarchies of Multi-way, Dataow Constraints. </title> <institution> University of Tennessee Computer Science Department technical report ut-cs-95-282, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: During execution, each cycle is essentially treated as a single multi-output constraint that can be executed using a cycle solver. However, SkyBlue has an exponential running time (the problem of maintaining this type of constraints is NP-complete). The QuickPlan algorithm <ref> [25] </ref> can solve any hierarchy of multi-way, multi-output, dataow constraints but adds some restrictions to the general problem. QuickPlan is guaranteed to solve a series of constraints in polynomial time provided that there exists at least one acyclic, conict-free solution.
Reference: [26] <author> Brad Vander Zanden. </author> <title> Incremental Constraint Satisfaction and its Application to Graphical Interfaces. </title> <type> Ph.D. Thesis, </type> <institution> Cornell University, </institution> <year> 1988. </year>
Reference-contexts: 1 INTRODUCTION A constraint is a relationship to be maintained among a set of variables. For example, A+B=C represents the relationship that C is the sum of A and B. Constraints are widely recognized as a useful tool for user interface construction [1], [4], [10], [14], [20], [21], [23], <ref> [26] </ref>. Through constraints, relationships among user interface components and their applications can be defined declaratively, leaving the task of maintaining the relationships to a constraint solver, an algorithm that determines a plan for computing constrained values in a way that is consistent with the specified constraints.
References-found: 26

