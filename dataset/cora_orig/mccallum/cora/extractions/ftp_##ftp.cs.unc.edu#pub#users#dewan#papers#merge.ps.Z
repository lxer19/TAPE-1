URL: ftp://ftp.cs.unc.edu/pub/users/dewan/papers/merge.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/merge.html
Root-URL: http://www.cs.unc.edu
Email: fmunson, dewang@cs.unc.edu  
Title: A Flexible Object Merging Framework  
Author: Jonathan P. Munson and Prasun Dewan 
Keyword: diff, flexible coupling, optimistic concurrency control, merging, undo, versions.  
Address: Chapel Hill, NC 27599-3175  
Affiliation: University of North Carolina-Chapel Hill  
Abstract: The need to merge different versions of an object to a common state arises in collaborative computing due to several reasons including optimistic concurrency control, asynchronous coupling, and absence of access control. We have developed a flexible object merging framework that allows definition of the merge policy based on the particular application and the context of the collaborative activity. It performs automatic, semi-automatic, and interactive merges, supports semantics-determined merges, operates on objects with arbitrary structure and semantics, and allows fine-grained specification of merge policies. It is based on an existing collaborative applications framework and consists of a merge matrix, which defines merge functions and their parameters and allows definition of multiple merge policies, and a merge algorithm, which performs the merge based on the results computed by the merge functions. In conjunction with our framework we introduce a set of merge policies for several useful kinds of merges we have identified. This paper motivates the need for a general approach to merging, identifies some important merging issues, surveys previous research in merging, identifies a list of merge requirements, describes our merging framework and illustrates it with examples, and evaluates the framework with respect to the requirements and other research efforts in merging objects. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Adams, E., Honda, M., and Miller, T. </author> <title> Object management in a CASE environment. </title> <booktitle> In Proceedings of the 11th International Conference on Software Engineering (May 1989), </booktitle> <pages> pp. 154-163. </pages>
Reference-contexts: A tool that performs the merge automatically, responding appropriately to conflicting changes, would be highly useful. A number of merge tools already exist. Tools for merging plain-text files include the UNIX diff3 tool, the RCS rcsmerge tool [11], and the fileresolve tool in Sun's Network Software Environment <ref> [1] </ref>. Research efforts include the work of Horwitz, Prins, and Reps with a program merging tool that detects an inconsistent merge through the use of program dependency graphs [6], and the GINA collaborative application framework [2], which allows users to merge revised versions by merging command histories. <p> The advantages of rcsmerge over diff3 are that it will warn of overlapping changes and that it is integrated with the safety and code management mechanisms of a versioning system. Sun's NSE fileresolve. The fileresolve tool in Sun's Network Software Environment <ref> [1] </ref> is a differencing-based text merge tool that allows users to do side-by-side comparisons of two sets of changes to a file, and can automatically merge changes that do not overlap. <p> This research was supported in part by National Science Foundation grant IRI-9496184 and in part by a grant from the Software Engineering Research Center at Purdue University, a National Science Foundation Industry/University Cooperative Research Center <ref> (NSF Grant No. ECD-8913133) </ref>.
Reference: 2. <author> Berlage, T., and Genau, A. </author> <title> A framework for shared applications with replicated architecture. </title> <booktitle> In Proceedings of Conference on User Interface Systems and Technology (November 1993). </booktitle>
Reference-contexts: Research efforts include the work of Horwitz, Prins, and Reps with a program merging tool that detects an inconsistent merge through the use of program dependency graphs [6], and the GINA collaborative application framework <ref> [2] </ref>, which allows users to merge revised versions by merging command histories. <p> The merge parameters of our work complement the differencing parameters flexible diff work has identified. GINA. GINA <ref> [2] </ref> takes an approach wholly different from any of the previous merge procedures. Instead of basing the merge procedure on differences between object versions, GINA bases the merge on the command histories it keeps. The command history is central to the entire GINA system.
Reference: 3. <author> Dewan, P., and Choudhary, R. </author> <title> A high-level and flexible framework for implementing multi-user user interfaces. </title> <journal> ACM Transactions on Information Systems 10, </journal> <month> 4 (October </month> <year> 1992), </year> <pages> 345-380. </pages>
Reference-contexts: GINA conflict detection is object-based since command histories are specific to the type of object. A FLEXIBLE OBJECT MERGING FRAMEWORK Basis and overview The basis of our flexible object merging framework is the Suite collaboration system <ref> [3] </ref>, which provides general structured objects, fine-grained object attributes, functions for checking the semantic correctness of user changes, and flexible coupling between object views.
Reference: 4. <author> Ellis, C. A., and Gibbs, S. J. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data (May 1989), ACM, </booktitle> <address> New York, </address> <pages> pp. 399-407. </pages>
Reference-contexts: Work related to object merging includes the PREP flexible diff tool [9], which gives users flexibility in finding and pinpointing differences, and the concurrency control model of Ellis and Gibbs <ref> [4] </ref>, which determines a consistent ordering of operations at all sites in a distributed collaborative environment by merging concurrent operations. Current merge tools are either limited by being based on plain text files, or are not adaptable to particular collaboration contexts. <p> They may undo the affected operation of the first branch and redo the operation of the second branch, or simply not redo the operation of the second branch. Groupware concurrency control (Ellis and Gibbs). The concurrency control model of Ellis and Gibbs <ref> [4] </ref> uses merging to ensure that each site in a distributed collaborative environment sees the same order of operations.
Reference: 5. <author> Graham, G., and Denning, P. </author> <title> Protectionprinciples and practice. </title> <booktitle> In Proc. Spring Jt. Computer Conf. </booktitle> <year> (1972), </year> <pages> pp. 417-429. </pages>
Reference-contexts: We first describe the merge matrix in detail and then present the procedure that implements our merge algorithm. The merge matrix The merge matrix is a mechanism in the spirit of the access control matrix of operating systems theory <ref> [5] </ref> and the lock compatibility table developed by the research in object transactions [10]. The merge matrix has a row and column for each editing operation that can be performed on the object.
Reference: 6. <author> Horwitz, S., Prins, J., and Reps, T. </author> <title> Integrating non-interfering versions of programs. </title> <journal> ACM Transactions on Programming Languages and Systems 11, </journal> <month> 3 (July </month> <year> 1989), </year> <pages> 345-387. </pages>
Reference-contexts: Research efforts include the work of Horwitz, Prins, and Reps with a program merging tool that detects an inconsistent merge through the use of program dependency graphs <ref> [6] </ref>, and the GINA collaborative application framework [2], which allows users to merge revised versions by merging command histories. <p> Overlapping changes are flagged and presented to the user performing the merge, who may select one change or the other, or modify the file by hand. Changes may also be undone. Semantic diff. Horwitz, Prins, and Reps <ref> [6] </ref> present an algorithm (which we refer to as Semantic diff) to merge two different versions of a program in a semantically correct fashion. That is, if the two versions do not interfere with each other, Semantic diff will produce a merged program that incorporates the semantics of both versions.
Reference: 7. <author> Knister, M. J., and Prakash, A. </author> <title> Undoing actions in collaborative work. </title> <booktitle> In Proceedings of the Conference on Computer Supported Cooperative Work (Nov. </booktitle> <year> 1992). </year>
Reference-contexts: Furthermore, the appropriate partitioning may well change over the course of the collaboration. In the example of the journal article writers, all these objections to partitioning may be relevant. Undo/Redo. In systems that provide collaborative undo/redo <ref> [7] </ref>, the need for a merge capability may be somewhat lessened. Collaborators can merge their versions of the object by simply stepping through their edits and using a redo mechanism to apply one collaborator's changes to the other's version of the object.
Reference: 8. <author> Lauwers, J., and Lantz, K. </author> <title> Collaboration awareness in support of collaboration transparency: Requirements for the next generation of shared window systems. </title> <booktitle> In Proceedings of ACM CHI'90 (Apr. </booktitle> <year> 1990), </year> <pages> pp. 303-311. </pages>
Reference-contexts: At some point they will need to merge the versions before they can make further progress on the compiler. Coupling. Merging is not useful in those collaborative activities where an artifact is always WYSIWIS (What You See Is What I See) <ref> [8] </ref> coupled. In this case concurrent edits never produce separate versions of an artifact. Merging is primarily useful where the coupling between views, or versions, of an object allow asynchronous collaboration.
Reference: 9. <author> Neuwirth, C. M., Chandok, R., Kaufer, D. S., Erion, P., Morris, J. H., and Miller, D. </author> <title> Flexible diff-ing in a collaborative writing system. </title> <booktitle> In Proceedings of ACM Conference on Computer Supported Cooperative Work (October 1992), </booktitle> <pages> pp. 147-154. </pages>
Reference-contexts: Work related to object merging includes the PREP flexible diff tool <ref> [9] </ref>, which gives users flexibility in finding and pinpointing differences, and the concurrency control model of Ellis and Gibbs [4], which determines a consistent ordering of operations at all sites in a distributed collaborative environment by merging concurrent operations. <p> Collaboration tools Flexible diff. flexible diff <ref> [9] </ref> is a tool in the PREP writing environment that finds and reports differences in text documents and computes scripts for automatically combining the differences in a merged document. flexible diff is different from the UNIX diff tool in that it allows users to choose the kind of differences that are
Reference: 10. <author> Schwarz, P. M., and Spector, A. Z. </author> <title> Synchronizing shared abstract types. </title> <journal> ACM Transactions on Computer Systems 2, </journal> <month> 1 (August </month> <year> 1984), </year> <pages> 223-250. </pages>
Reference-contexts: The merge matrix The merge matrix is a mechanism in the spirit of the access control matrix of operating systems theory [5] and the lock compatibility table developed by the research in object transactions <ref> [10] </ref>. The merge matrix has a row and column for each editing operation that can be performed on the object. The rows represent the edits of one user and the columns represent the edits of the other user. <p> Element-operations merge matrices are type-specific, however, having rows and columns for the operations of the structures they are defined for. Thus these matrices are inherited only from type. Our merge matrix bears a resemblance to Schwarz's and Spector's lock compatibility table <ref> [10] </ref>. There are a number of differences, however.
Reference: 11. <author> Tichy, W. F. </author> <note> RCSa system for version control. SoftwarePractice and Experience 17, </note> <month> 7 (July </month> <year> 1985), </year> <pages> 637-654. </pages>
Reference-contexts: A tool that performs the merge automatically, responding appropriately to conflicting changes, would be highly useful. A number of merge tools already exist. Tools for merging plain-text files include the UNIX diff3 tool, the RCS rcsmerge tool <ref> [11] </ref>, and the fileresolve tool in Sun's Network Software Environment [1]. <p> RCS rcsmerge. The rcsmerge program is, like diff3, a text-oriented merge program, but is based on the mechanisms of the RCS system <ref> [11] </ref>. The same observations made about diff3 above apply to rcsmerge. The advantages of rcsmerge over diff3 are that it will warn of overlapping changes and that it is integrated with the safety and code management mechanisms of a versioning system. Sun's NSE fileresolve.
References-found: 11

