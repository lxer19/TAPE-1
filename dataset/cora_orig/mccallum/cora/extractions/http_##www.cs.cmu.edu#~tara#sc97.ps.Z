URL: http://www.cs.cmu.edu/~tara/sc97.ps.Z
Refering-URL: http://www.cs.cmu.edu/~tara/thesis.html
Root-URL: http://www.cs.cmu.edu
Email: ftara,reedg@cs.uiuc.edu  
Title: Exploiting Global Input/Output Access Pattern Classification  
Author: Tara M. Madhyastha Daniel A. Reed 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Charniak, E. </author> <title> Statistical Language Learning. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Another approach is to represent a file as a collection of blocks, and construct a probabilistic model of transitions between blocks from previous execution traces using an extended Markov model, or hidden Markov model (HMM) <ref> [21, 1] </ref>. With such a model, classification is performed by computing the probability of detecting certain features based on previous execution information. A detailed description of classification methodologies is beyond the scope of this paper; for more details, see [15]. These two classification approaches are complementary.
Reference: [2] <author> Crandall, P. E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> Characterization of a Suite of Input/Output Intensive Applications. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: of file accesses from a single processor may be represented as a stream of tuples of the form &lt; byte offset ; request size; read =write &gt; : Based on this portable input/output representation and our ongoing characterization of scientific application input/output patterns as part of the Scalable I/O Initiative <ref> [2, 22, 20] </ref>, we partitioned access patterns based on three broad features: read/write mix, sequentiality, and request size. Figure 1 shows an access pattern space described by these axes; each point in the three-dimensional space represents a unique access pattern.
Reference: [3] <author> Grimshaw, A. S., and Loyot, Jr., E. C. </author> <title> ELFS: Object-oriented Extensible File Systems. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distributed Information Systems (December 1991), </booktitle> <address> p. </address> <month> 177. </month>
Reference-contexts: Many studies have shown this under different workloads and environments <ref> [11, 13, 3] </ref>. For example, small input/output requests are best managed by aggregation, prefetching, caching, and write-behind, though large requests are better served by streaming data directly to or from storage devices and application buffers.
Reference: [4] <author> Henderson, R. D. </author> <title> Unstructured Spectral Element Methods: Parallel Algorithms and Simulations. </title> <type> PhD thesis, </type> <month> June </month> <year> 1994. </year>
Reference-contexts: and the ability to select the optimal policies for the input files when they are opened, rather than during execution, reduces total read time by an order of magnitude. 5.3 PRISM PRISM, a computational fluid dynamics code, is a parallel implementation of a 3-D numerical simulation of the Navier-Stokes equations <ref> [4, 5] </ref>. The parallelization is by apportioning the periodic domain to the processors, with a combination of spectral elements and Fourier modes used to investigate the dynamics and transport properties of turbulent flow. We focus on the first phase, in which every processor reads three initialization files.
Reference: [5] <author> Henderson, R. D., and Karniadakis, G. E. </author> <title> Unstructured Spectral Element Methods for Simulation of Turbulent Flows. </title> <journal> Journal of Computational Physics 122, </journal> <volume> 2 (1995), </volume> <pages> 191-217. </pages>
Reference-contexts: and the ability to select the optimal policies for the input files when they are opened, rather than during execution, reduces total read time by an order of magnitude. 5.3 PRISM PRISM, a computational fluid dynamics code, is a parallel implementation of a 3-D numerical simulation of the Navier-Stokes equations <ref> [4, 5] </ref>. The parallelization is by apportioning the periodic domain to the processors, with a combination of spectral elements and Fourier modes used to investigate the dynamics and transport properties of turbulent flow. We focus on the first phase, in which every processor reads three initialization files.
Reference: [6] <author> Hinton, G. E. </author> <title> Connectionist Learning Procedures. </title> <booktitle> Artificial Intelligence 40 (1989), </booktitle> <volume> 185 - 234. </volume>
Reference-contexts: Unfortunately such an approach is not easily extensible. We have investigated more sophisticated classification approaches that "learn" to classify access patterns. One approach is to train a feed-forward artificial neural network <ref> [6] </ref> (ANN) to classify patterns. We provide the neural network with examples of access patterns and their corresponding classifications; once trained, the network can correctly classify new access patterns.
Reference: [7] <author> Huber, J., Elford, C. L., Reed, D. A., Chien, A. A., and Blumenthal, D. S. </author> <title> PPFS: A High Performance Portable Parallel File System. </title> <booktitle> In Proceedings of the 9th ACM International Conference on Supercomputing (Barcelona, </booktitle> <month> July </month> <year> 1995), </year> <pages> pp. 385-394. </pages>
Reference: [8] <institution> Paragon XP/S Product Overview. Intel Corporation, </institution> <year> 1991. </year>
Reference-contexts: Caching this stripe unit can potentially prevent many unnecessary disk accesses, and prefetching the file sequentially can improve throughput. Application programming interfaces (APIs) for current commercial and experimental file systems provide limited support for application specification of global access patterns. In Intel's PFS <ref> [8] </ref> the programmer can select one of five modes that describe common global access patterns. MPI-IO [23], a proposed high-level API for parallel input/output, allows a developer to specify arbitrarily complex access patterns. IBM's PIOFS also provides an interface to describe file views. <p> We used PPFS as an intermediary between the application requests and the underlying Intel PFS file system <ref> [8] </ref>. PFS is a parallel file system that stripes data over disks on input/output nodes using a default 64 KB stripe size. In normal usage, applications provide access pattern information by specify 5 ing PFS modes and have limited control over in-put/output node buffering. <p> A portable approach, supported by flexible file systems, is to utilize an application programming interface that encapsulates access pattern information. Collective input/output [10] is one such interface, as are input/output modes in Intel PFS <ref> [8] </ref>. A similar approach is to use application hints to guide a proactive file system. Patterson et al demonstrate the success of providing hints to guide prefetching and caching of files that will be accessed in the future [19].
Reference: [9] <author> Korner, K. </author> <title> Intelligent Caching for Remote File Service. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems (May 1990), </booktitle> <pages> pp. 220-226. </pages>
Reference-contexts: Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time [18]. Knowledge based caching has been proposed to enhance cache performance of remote file servers <ref> [9] </ref>. Our work uses trained neural networks and statistical models to classify 10 global access patterns, and can be trained to rec-ognize new patterns as the need arises. 7 Conclusions Global access pattern information is critical to optimizing input/output performance of parallel applications.
Reference: [10] <author> Kotz, D. </author> <title> Disk-directed I/O for MIMD Multiprocessors. </title> <booktitle> In Proceedings of the 1994 Symposium on Operating Systems Design and Implementation (November 1994), </booktitle> <pages> pp. 61-74. </pages> <note> Updated as Dartmouth TR PCS-TR94-226 on November 8, </note> <year> 1994. </year>
Reference-contexts: A portable approach, supported by flexible file systems, is to utilize an application programming interface that encapsulates access pattern information. Collective input/output <ref> [10] </ref> is one such interface, as are input/output modes in Intel PFS [8]. A similar approach is to use application hints to guide a proactive file system.
Reference: [11] <author> Kotz, D., and Ellis, C. S. </author> <title> Prefetch-ing in File Systems for MIMD Multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1, </journal> <month> 2 (April </month> <year> 1990), </year> <pages> 218-230. </pages>
Reference-contexts: Many studies have shown this under different workloads and environments <ref> [11, 13, 3] </ref>. For example, small input/output requests are best managed by aggregation, prefetching, caching, and write-behind, though large requests are better served by streaming data directly to or from storage devices and application buffers.
Reference: [12] <author> Kotz, D., and Ellis, C. S. </author> <title> Practical Prefetching Techniques for Parallel File Systems. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distributed Information Systems (December 1991), </booktitle> <pages> pp. 182-189. </pages>
Reference-contexts: Kotz has studied detecting more complicated access patterns that are used to guide non-sequential prefetching within a file <ref> [12] </ref>. Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time [18]. Knowledge based caching has been proposed to enhance cache performance of remote file servers [9].
Reference: [13] <author> Krieger, O., and Stumm, M. </author> <title> HFS: A Flexible File System for Large-scale Multiprocessors. </title> <booktitle> In Proceedings of the 1993 DAGS/PC Symposium (Hanover, </booktitle> <address> NH, </address> <month> June </month> <year> 1993), </year> <institution> Dartmouth Institute for Advanced Graduate Studies, </institution> <note> pp. 6-14. 11 </note>
Reference-contexts: Many studies have shown this under different workloads and environments <ref> [11, 13, 3] </ref>. For example, small input/output requests are best managed by aggregation, prefetching, caching, and write-behind, though large requests are better served by streaming data directly to or from storage devices and application buffers.
Reference: [14] <author> Kuppermann, A., and Wu, Y.-S. M. </author> <title> The Quantitative Prediction and Lifetime of a Pronounced Reactive Scattering Resonance. </title> <journal> Chemical Physics Letters 241 (1995), </journal> <pages> 229-240. </pages>
Reference-contexts: Our PPFS implementation synchronizes at the next classification point (every ten accesses) to change the input/output mode. Once M RECORD is selected, PPFS throughput increases to that obtained by the native PFS less the overhead of PPFS library calls. 5.2 QCRD QCRD <ref> [24, 14] </ref> is a quantum chemical reaction dynamics code used to study elementary chemical reactions.
Reference: [15] <author> Madhyastha, T. M. </author> <title> Automatic Input/Output Access Pattern Classification. </title> <type> Tech. Rep., </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: With such a model, classification is performed by computing the probability of detecting certain features based on previous execution information. A detailed description of classification methodologies is beyond the scope of this paper; for more details, see <ref> [15] </ref>. These two classification approaches are complementary. Artificial neural network (ANN) classification detects access patterns automatically throughout execution without any execution history.
Reference: [16] <author> Madhyastha, T. M., and Reed, D. A. </author> <title> Intelligent, Adaptive File System Policy Selection. </title> <booktitle> In Proceedings of the Sixth Symposium on the Frontiers of Massively Parallel Computation (1996), </booktitle> <pages> pp. 172-179. </pages>
Reference-contexts: We present our experimental results in x5. Finally, x6-x7 place this work in context and summarize our results. 2 Access Pattern Classification Rationale In previous work we showed the performance benefits of using local access pattern classification to tune file system policies <ref> [16] </ref> for sequential applications. In a parallel file system, the complexities of efficiently servicing concurrent, related, input/output request streams make exploitation of global behavior even more important to overall performance. <p> Most importantly, HMMs can provide classifications at file open based on previous execution information, while neural network classification must observe some window of accesses before detecting local and global patterns. 3.3 Global Classification Local classification is powerful tool for tuning file system policies in a sequential file system <ref> [16] </ref>. However, local classification is a small part of a global classification problem. As we noted earlier, local access patterns within the parallel program merge during program execution to create a global access pattern; it is essential to recognize qualitative patterns within the interleavings of the local input/output requests.
Reference: [17] <author> NCSA. </author> <note> NCSA HDF, Version 2.0. </note> <institution> University of Illinois at Urbana-Champaign, National Center for Supercomputing Applications, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Although some current parallel file systems provide interfaces to express global access pattern information, application input/output characterization studies have repeatedly shown that application developers are often unaware of the detailed input/output behavior of their codes, particularly when input/output requests are mediated by input/output libraries (e.g., like HDF <ref> [17] </ref>).
Reference: [18] <author> Palmer, M., and Zdonik, S. B. </author> <note> Fido: </note>
Reference-contexts: Kotz has studied detecting more complicated access patterns that are used to guide non-sequential prefetching within a file [12]. Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time <ref> [18] </ref>. Knowledge based caching has been proposed to enhance cache performance of remote file servers [9].
References-found: 18

