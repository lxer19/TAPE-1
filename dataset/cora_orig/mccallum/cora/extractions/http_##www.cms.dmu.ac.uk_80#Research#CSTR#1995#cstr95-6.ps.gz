URL: http://www.cms.dmu.ac.uk:80/Research/CSTR/1995/cstr95-6.ps.gz
Refering-URL: http://www.cms.dmu.ac.uk:80/Research/CSTR/1995/
Root-URL: 
Title: Using ITL and Tempura for Large Scale Specification and Simulation  
Author: Antonio Cau Hussein Zedan Nick Coleman Ben Moszkowski 
Address: Liverpool L3 3AF, UK Newcastle NE1 7RU, UK  
Affiliation: School of Computing Department of Electrical and Mathematical Sciences and Electronic Engineering Liverpool John Moores University University of Newcastle upon Tyne  
Abstract: ITL and Tempura are used for respectively the formal specification and simulation of a large scale system, namely the general purpose multi-threaded data-flow processor EP/3. This paper shows that this processor can be specified concisely within ITL and simulated with Tempura. But it also discusses some problems encountered during the specification and simulation, and indicates what should be added to solve those problems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> H. Barrow. </author> <title> Proving the correctness of hardware designs. </title> <booktitle> In VLSI Design, </booktitle> <pages> pages 64-77, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: A number of hardware specific calculi have been developed and used. Some of these are supported by theorem proving or other checking tools. Barrow's seminal work on VERIFY <ref> [1] </ref> (a Prolog program for checking the correctness of finite state machines) and Milne's Circle (a calculus based on CCS) [9] for specifying and analysing circuit behaviour. General purpose logics have been proposed. The Boyer-Moore theorem prover is a notable example [2].
Reference: 2. <author> R. Boyer and J. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: Barrow's seminal work on VERIFY [1] (a Prolog program for checking the correctness of finite state machines) and Milne's Circle (a calculus based on CCS) [9] for specifying and analysing circuit behaviour. General purpose logics have been proposed. The Boyer-Moore theorem prover is a notable example <ref> [2] </ref>. Recently, CLInc has demonstrated that Boyer-Moore can be used successfully for non-trivial hardware verification cases. Higher order logic was first used by Hanna and Daeche who developed the VERITAS theorem proving system [6]. HOL [5] is also a machine-oriented formulation of higher logic based on Church's lambda calculus.
Reference: 3. <author> J. Coleman. </author> <title> A high speed data-flow processing element and its performance compared to a von Neumann mainframe. </title> <booktitle> In IEEE 7th Int`l. Parallel Processing Symp, </booktitle> <pages> pages 24-33, </pages> <address> Newport Beach, California, </address> <year> 1993. </year>
Reference-contexts: Our chosen hardware fl Supported by EPSRC Research Grant GR/K25922 y Current address: Department of Computer Science, de Montfort University, Leicester LE1 9BH, UK 1 is a general-purpose multithreaded dataflow computer known as EP/3 (Event Processor/3) <ref> [3] </ref>. EP/3 is intended primarily as a vehicle for exploratory research in high-performance computer structures. 1.1 Related work There have been a plethora of formalisms proposed and used in conjunction with digital system specification and verification. <p> The specification and simulation of EP/3 in ITL are discussed in section 4. We give our evaluations in section 5 and indicate future work. 2 The EP/3 Processor The system used in this case-study is the Event Processor <ref> [3] </ref>. Its processing elements are based on the multithreaded principle, in which a main memory is available for explicit storage of data (known as static operands), in addition to the normal circulation of tokens (flow operands).
Reference: 4. <author> R. Gallimore, D. Coleman, and V. Stavridou. </author> <title> UMIST OBJ: a language for executable program specifications. </title> <journal> Comp. J., </journal> <pages> pages 413-421, </pages> <year> 1989. </year>
Reference-contexts: Algebraic specification languages have also been used; a notable example is the use of OBJ specifications with hardware. OBJ-T [13] version of the language was used to specify and test hardware building blocks. UMIST OBJ <ref> [4] </ref> has also been used to specify simple devices with theorem proving support from REVE [7]. Computer hardware description languages were the first textual descriptive techniques to be used in the design of hardware. Examples include ELLA [12] and VHDL.
Reference: 5. <author> M. Gordon. </author> <title> HOL: A machine oriented formulation of higher order logic. </title> <type> Technical Report Report 68, </type> <institution> University of Cambridge, </institution> <year> 1985. </year> <month> 10 </month>
Reference-contexts: General purpose logics have been proposed. The Boyer-Moore theorem prover is a notable example [2]. Recently, CLInc has demonstrated that Boyer-Moore can be used successfully for non-trivial hardware verification cases. Higher order logic was first used by Hanna and Daeche who developed the VERITAS theorem proving system [6]. HOL <ref> [5] </ref> is also a machine-oriented formulation of higher logic based on Church's lambda calculus. Algebraic specification languages have also been used; a notable example is the use of OBJ specifications with hardware. OBJ-T [13] version of the language was used to specify and test hardware building blocks.
Reference: 6. <author> F. Hanna and N. Daeche. </author> <title> Specification and verification using higher order logic. </title> <booktitle> In Proc. of 7th Intern. Symp. on Computer Hardware Description Languages and Applications, </booktitle> <pages> pages 418-443, </pages> <year> 1985. </year>
Reference-contexts: General purpose logics have been proposed. The Boyer-Moore theorem prover is a notable example [2]. Recently, CLInc has demonstrated that Boyer-Moore can be used successfully for non-trivial hardware verification cases. Higher order logic was first used by Hanna and Daeche who developed the VERITAS theorem proving system <ref> [6] </ref>. HOL [5] is also a machine-oriented formulation of higher logic based on Church's lambda calculus. Algebraic specification languages have also been used; a notable example is the use of OBJ specifications with hardware. OBJ-T [13] version of the language was used to specify and test hardware building blocks.
Reference: 7. <author> P. Lescanne. </author> <title> Computer experiments with the REVE term rewriting system generator. </title> <booktitle> In Proc. 10th ACM Symp. on PPL, </booktitle> <year> 1983. </year>
Reference-contexts: OBJ-T [13] version of the language was used to specify and test hardware building blocks. UMIST OBJ [4] has also been used to specify simple devices with theorem proving support from REVE <ref> [7] </ref>. Computer hardware description languages were the first textual descriptive techniques to be used in the design of hardware. Examples include ELLA [12] and VHDL. Many ideas originating from reactive systems theory including temporal logics, are relevant to the specification and verification of synchronous and asynchronous digital systems.
Reference: 8. <author> D. May, G. Barrett, and D. Shepherd. </author> <title> Designing chips that work. </title> <editor> In C. Hoare and M. Gordon, editors, </editor> <booktitle> Mechanised Reasoning and Hardware Design, </booktitle> <pages> pages 3-18. </pages> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Formal techniques have clearly had an impact on the design of safety critical systems, and have been shown to be commercially advantageous as demonstrated in the production of Inmos IMS T800 floating point unit <ref> [8] </ref>. We believe that using formal techniques in the production of systems should be viewed as a means of delivering correctness (with respect to requirements) and hence enhanced quality.
Reference: 9. <author> G. Milne. Circal: </author> <title> a calculus for circuit description. INTEGRATION. </title> <journal> VLSI J., </journal> <pages> pages 121-160, </pages> <year> 1983. </year>
Reference-contexts: A number of hardware specific calculi have been developed and used. Some of these are supported by theorem proving or other checking tools. Barrow's seminal work on VERIFY [1] (a Prolog program for checking the correctness of finite state machines) and Milne's Circle (a calculus based on CCS) <ref> [9] </ref> for specifying and analysing circuit behaviour. General purpose logics have been proposed. The Boyer-Moore theorem prover is a notable example [2]. Recently, CLInc has demonstrated that Boyer-Moore can be used successfully for non-trivial hardware verification cases.
Reference: 10. <author> B. Moszkowski. </author> <title> Executing Temporal Logic Programs. </title> <publisher> Cambridge Univ. Press, </publisher> <address> Cambridge, UK, </address> <year> 1986. </year>
Reference-contexts: However it has not been applied to the design of large scale hardware systems. The aim of this paper is an analysis and discussion of the benefits of the use of ITL and its associated executable language Tempura <ref> [10] </ref> for such large scale hardware systems. Our chosen hardware fl Supported by EPSRC Research Grant GR/K25922 y Current address: Department of Computer Science, de Montfort University, Leicester LE1 9BH, UK 1 is a general-purpose multithreaded dataflow computer known as EP/3 (Event Processor/3) [3]. <p> The I/O is therefore microcoded. 3 Interval Temporal Logic and Tempura This section describes the syntax and informal semantics of the Interval Temporal Logic (ITL) and gives the syntax of the executable part of ITL, i.e., the Tempura language. For a more succinct exposition and the formal semantics see <ref> [10] </ref>. An interval is considered to be a finite sequence of states, where a state is a mapping from variables to their values. The length of an interval is equal to one less than the number of states in the interval (i.e., a one state interval has length 0). <p> See <ref> [10] </ref> for more statements.
Reference: 11. <author> S. Owre, J. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <editor> In D. Kapur, editor, </editor> <booktitle> International Conference on Automated Deduction, </booktitle> <volume> volume LNAI 607, </volume> <pages> pages 748-752, </pages> <address> Saratoga, NY, June 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Furthermore the framing problem should be solved, this will result in an increase of the speed of the simulator because an update of the memory would then only cost 1 statement instead of as many as there are memory cells. Also we will investigate the use of the PVS <ref> [11] </ref> system as refinement tool for high level specifications written in ITL to executable specifications written in Tempura.
Reference: 12. <institution> Praxis Systems. </institution> <note> The ELLA User Manual, 2.0 edition, </note> <year> 1986. </year>
Reference-contexts: UMIST OBJ [4] has also been used to specify simple devices with theorem proving support from REVE [7]. Computer hardware description languages were the first textual descriptive techniques to be used in the design of hardware. Examples include ELLA <ref> [12] </ref> and VHDL. Many ideas originating from reactive systems theory including temporal logics, are relevant to the specification and verification of synchronous and asynchronous digital systems. Although propositional temporal logic can be used for reasoning about hardware, interval temporal logic is particularly interesting for hardware verification.
Reference: 13. <author> A. Sampaio and K. Parsaye-Ghomi. </author> <title> The formal specification and testing of expanded hardware building blocks. </title> <booktitle> In Proc. Computer Science Conf, </booktitle> <address> Rolla, MO, </address> <year> 1981. </year>
Reference-contexts: HOL [5] is also a machine-oriented formulation of higher logic based on Church's lambda calculus. Algebraic specification languages have also been used; a notable example is the use of OBJ specifications with hardware. OBJ-T <ref> [13] </ref> version of the language was used to specify and test hardware building blocks. UMIST OBJ [4] has also been used to specify simple devices with theorem proving support from REVE [7]. Computer hardware description languages were the first textual descriptive techniques to be used in the design of hardware.
References-found: 13

