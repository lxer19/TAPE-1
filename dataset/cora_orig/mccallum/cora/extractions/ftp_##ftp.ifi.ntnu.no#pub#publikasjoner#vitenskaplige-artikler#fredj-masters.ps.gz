URL: ftp://ftp.ifi.ntnu.no/pub/publikasjoner/vitenskaplige-artikler/fredj-masters.ps.gz
Refering-URL: http://www.ifi.unit.no/grupper/ai/pubs.html
Root-URL: 
Title: Software for Networking Knowledge Agents  
Author: Fred Johansen 
Degree: A Master's thesis by  
Date: 20th November 1996  
Address: 7055 Dragvoll NORWAY  
Affiliation: Department of Informatics Norwegian University of Science and Technology (NTNU)  
Abstract-found: 0
Intro-found: 1
Reference: [Aam91] <author> Agnar Aamodt. </author> <title> A Knowledge-Intensive, Integrated Approach to Problem Solving and Sustained Learning. </title> <type> PhD thesis, </type> <institution> University of Trondheim, Norwegian Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: One of the reasons I implemented it was in fact a need to get a specific Lisp program on the net, namely the CREEK system <ref> [Aam91] </ref>. CREEK is a knowledge-based Case-Based Reasoning system for decision support, complete with its own knowledge representation language called CreekL. CREEK is under implementation, but a large enough number of its modules have been implemented for working version to be able to run under both MacIntosh and Unix Common Lisp. <p> It divides each of the top-level tasks into subtasks and methods of performing these subtasks. We will not go into those details here. 6.2.5 CREEK In [Aam95] Aamodt goes on to further describe this framework and its realization in the CREEK <ref> [Aam91] </ref> system. At the top level CREEK contains four modules, each representing a sub-model of knowledge.
Reference: [Aam95] <author> Agnar Aamodt. </author> <title> Knowledge acquisition and learning by experience | the role of case-specific knowledge. In Machine Learning and Knowledge Acquisition, chapter 8. </title> <publisher> Academic Press Ltd, </publisher> <year> 1995. </year> <note> ISBN 0-12-685120-4. </note>
Reference-contexts: It divides each of the top-level tasks into subtasks and methods of performing these subtasks. We will not go into those details here. 6.2.5 CREEK In <ref> [Aam95] </ref> Aamodt goes on to further describe this framework and its realization in the CREEK [Aam91] system. At the top level CREEK contains four modules, each representing a sub-model of knowledge.
Reference: [AN95] <author> Agnar Aamodt and Mads Nyg-ard. </author> <title> Different roles and mutual dependencies of data, information, and knowledge | an ai perspective on their integration. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 16 </volume> <pages> 191-222, </pages> <year> 1995. </year>
Reference-contexts: But how does the data become information for an agent, and how does the information turn into knowledge? In the context of an agent (as a computational system) in a decision-making process, the terms of data, information and knowledge may be defined like this <ref> [AN95] </ref>: * Data are syntactic entities | patterns with no meaning; they are input to an interpretation process; ie. to the initial step of decision making. * Information is interpreted data | data with meaning; it is the output from data interpretation as well as the input to, and output from, <p> Some CBR approaches also aid the learning process with use of general knowledge about the domain. (We will look at various CBR approaches shortly.) In terms of the concepts of data, information and knowledge (section 3.5), cases may have the roles of all three of these <ref> [AN95] </ref>. (The cases are of course input data to the system, but may also have other roles.) * Cases are data only for the computational system when the system does not perform case-based reasoning as such, but applies case-based and other knowledge-based methods for case indexing and retrieval.
Reference: [And90] <author> J. R. Anderson. </author> <title> Development of expertise. In COGNITIVE PSYCHOLOGY AND ITS IMPLICATIONS, </title> <booktitle> chapter 9, </booktitle> <pages> pages 256-288. </pages> <editor> W. H. </editor> <publisher> Freeman and Company, 3rd edition, </publisher> <year> 1990. </year>
Reference-contexts: In contrast to expert systems, this approach has a greater resemblance to human reasoning, as there is mounting evidence that human experts at least CHAPTER 6. AGENTS AND CASE-BASED REASONING 57 partly rely on their memory of individual cases. (E.g. common patterns of pawns remembered by chess experts <ref> [And90] </ref>.) In addition it incorporates learning, in that the accumulated experience of a CBR system improves its performance over time. If a new case matches an old one perfectly, the new one may be deleted, otherwise it will probably be stored as a unique case.
Reference: [AP94] <author> Agnar Aamodt and Enric Plaza. </author> <title> Case-based reasoning: Foundational issues, methodological variations, and system approaches. </title> <journal> Artificial Intelligence Communications, </journal> <volume> 7(1) </volume> <pages> 39-59, </pages> <month> March </month> <year> 1994. </year> <note> Available online at &lt;http://www.iiia.csic.es/People/enric/AICom.ToC.html&gt;. </note>
Reference-contexts: From this point on, when we talk about CBR we will mainly be referring to the "typical" case-based reasoning methods, though some of what we have to say may to some degree apply to the other approaches as well. 6.2.4 Integrating specific and general knowledge Aamodt and Plaza <ref> [AP94] </ref> stress the importance of integrating the use of specific knowledge (cases) with other and more general kinds of knowledge. The tasks of case retrieval, case matching and learning etc. may all benefit from drawing upon the resources of general domain-dependent knowledge. [AP94] describes a framework of CBR where the various <p> Integrating specific and general knowledge Aamodt and Plaza <ref> [AP94] </ref> stress the importance of integrating the use of specific knowledge (cases) with other and more general kinds of knowledge. The tasks of case retrieval, case matching and learning etc. may all benefit from drawing upon the resources of general domain-dependent knowledge. [AP94] describes a framework of CBR where the various issues of CBR we mentioned above are expanded into four processes. This framework consists of two views on these processes: 1. A process model. 2. A task-method structure.
Reference: [AP96] <author> Josep Llus Arcos and Enric Plaza. </author> <title> Inference and reflection in the object-centered representation language noos. </title> <journal> Journal of Future Generation Computer Systems, </journal> <note> 1996. Available online at &lt;http://www.iiia.csic.es/Projects/analog/analog-project.html&gt;. </note>
Reference-contexts: More specifically, the authors discuss the use of the Plural Noos representation language for CBR agents within such a framework. This language is an extension of Noos, which is tailored for integrating learning and problem solving, and has been used to build several CBR systems <ref> [AP96] </ref>. As the article's title indicates, Plural Noos supports two modes of cooperation among CBR agents; DistCBR (Distributed Case-Based Reasoning) and ColCBR (Collective Case-Based Reasoning).
Reference: [BL91] <author> B. Brown and L. Lewis. </author> <title> A case-based reasoning solution to the problem of redundant resolutions of non-conformances in large scale manufacturing. </title> <booktitle> In Innovative Applications for Artificial Intelligence 3. </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year> <note> 119 BIBLIOGRAPHY 120 </note>
Reference-contexts: It has been employed in large-scale practical applications with respect to optimization of autoclave loading in airplane parts construction [HH92] and selection of mechanical equipment in ship construction <ref> [BL91] </ref>. Significant improvements in efficiency have been made in both of these applications. 6.2.3 Main issues and approaches The main issues that a CBR system has to deal with relates to the following [SL92]: 1. Retrieving cases that may contribute to solving a new problem case. 2.
Reference: [Cha86] <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge-based reasoning: High-level building blocks for expert system design. </title> <journal> IEEE Expert, </journal> <volume> 1(3) </volume> <pages> 23-29, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: More recent advances in the areas of knowledge acquisition and knowledge modeling have made this notion of the knowledge level more concrete and directly applicable for systems analysis and design, as exemplified by methodologies such as KADS [WSB92], Generic Tasks <ref> [Cha86] </ref> and Components of Expertise [Ste90b]. In chapter 2, we posed several assumptions about agents, and left open the question of whether we should understand our assumptions literally or not. CHAPTER 3.
Reference: [FFMM94] <author> Tim Finin, Richard Fritzson, Don McKay, and Robin McEntire. </author> <title> Kqml as an agent communication language. </title> <booktitle> In The Proceedings of the Third International Conference on Information and Knowledge Management (CIKM'94). </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: In terms of actual research, the ARPA Knowledge Sharing Effort (KSE) is a consortium working to develop conventions in this area | for the facilitation of sharing and reuse of knowledge bases and knowledge based systems <ref> [FFMM94] </ref>. <p> From the last of these, the External Interfaces group, has come the KQML language. 5.2 Language basics Knowledge Query and Manipulation Language (KQML) is a language constructed to deal with the problems of exchanging knowledge between different types of agents and in different representation formats [Ini92] <ref> [FFMM94] </ref> [LF94] [Lab96]. Allowing for content messages of any formalism, it handles knowledge in the way of "speaking about it". That is, it is directed at the manipulation of knowledge through speech acts.
Reference: [GFea92] <author> M. Genesereth, R. Fikes, and et. al. </author> <title> Knowledge interchange format. </title> <institution> Computer Science Department, Stanford University, </institution> <year> 1992. </year> <note> Version 3.0 reference manual. Technical report. </note>
Reference-contexts: Such formats and agents do in fact already exist. As for the former, there are already dozens of knowledge representation formats available. Examples are KIF <ref> [GFea92] </ref>, LOOM [MB87], etc. The problem here is not finding one, but rather deciding on the best one. (This is not an issue in this thesis.) There also exists a language for communicating knowledge, rather than merely representing it. This language is called KQML. <p> The fact that communication technology as well as the science of intelligent agents is constantly developing means that no list 1 Agent Communication Language (ACL) is one implementation of KQML with KIF <ref> [GFea92] </ref> as the content format. CHAPTER 5. KQML 42 of performatives should be seen as absolute. However, the one we intend to present here is taken from the latest specification of the language [Lab96], and thus is the nearest we can currently get to a absolutely correct account.
Reference: [GK94] <author> Michael R. Genesereth and Steven P. Ketchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: However, "software agent" is a term being given various definitions by researchers. One is that of "a software component which communicates with its peers by exchanging message in an expressive agent communication language" (like ACL 1 ) <ref> [GK94] </ref>. This is an interesting definition, but not one we have grounds for adopting this early in the thesis. Consequently we avoid the added complexity, and continue to concentrate on the simple term of "agent".
Reference: [GL93] <author> R. V. Guha and Douglas B. Lenat. </author> <title> Cyc: A midterm report. </title> <booktitle> In Readings in knowledge acquisition and learning : automating the construction and improvement of expert systems, </booktitle> <pages> pages 839-866. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: It would seem that many feel the lack in this area very strongly, and are waiting for some sort of breakthrough [Rie94]. One project that is trying to improve this situation is the CyC project <ref> [GL93] </ref>, which basically consists of compiling a large number of common-sense rules into one big reasoning knowledge base.
Reference: [Gol90] <author> Charles F. Goldfarb. </author> <title> The SGML Handbook. </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year> <note> ISBN 0 19 853737 9. </note>
Reference: [Gor92] <author> Tom Gordon. </author> <title> The qwertz SGML Document Types. </title> <institution> German National Research Center for Computer Science (GMD), </institution> <note> version 1.2 reference manual edition, </note> <month> October </month> <year> 1992. </year>
Reference: [Hal89] <author> R. P. Hall. </author> <title> Computational approaches to analogical reasoning: A comparative analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 39(1) </volume> <pages> 39-120, </pages> <year> 1989. </year>
Reference-contexts: This approach is therefore concerned with mechanisms for identification and utilization of cross-domain analogies <ref> [Hal89] </ref> [KC88]. This ends our account of the various CBR approaches.
Reference: [HH92] <author> D. Hennessy and D. Hinkle. </author> <title> Applying case-based reasoning to autoclave loading. </title> <journal> IEEE Expert, </journal> <volume> 7(5) </volume> <pages> 21-26, </pages> <year> 1992. </year>
Reference-contexts: It has been employed in large-scale practical applications with respect to optimization of autoclave loading in airplane parts construction <ref> [HH92] </ref> and selection of mechanical equipment in ship construction [BL91]. Significant improvements in efficiency have been made in both of these applications. 6.2.3 Main issues and approaches The main issues that a CBR system has to deal with relates to the following [SL92]: 1.
Reference: [Ini92] <institution> External Interfaces Working Group ARPA Knowledge Sharing Initiative. </institution> <note> Specification of the kqml agent-communication language. Working paper, December 1992. Available as &lt;http://www.cs.umbc.edu/kqml/papers/kqml-spec.ps&gt;. </note>
Reference-contexts: From the last of these, the External Interfaces group, has come the KQML language. 5.2 Language basics Knowledge Query and Manipulation Language (KQML) is a language constructed to deal with the problems of exchanging knowledge between different types of agents and in different representation formats <ref> [Ini92] </ref> [FFMM94] [LF94] [Lab96]. Allowing for content messages of any formalism, it handles knowledge in the way of "speaking about it". That is, it is directed at the manipulation of knowledge through speech acts.
Reference: [KA87] <author> D. Kibler and D. Aha. </author> <title> Learning representative examplars of concepts; an initial study. </title> <booktitle> In Proceedings of the Fourth International Workshop on Machine Learning, </booktitle> <pages> pages 24-29, </pages> <address> UC-Irvine, </address> <year> 1987. </year>
Reference-contexts: Wittgenstein is critical of the traditional concept of "meaning", where the meaning of a concept is seen as an abstract entity somehow corresponding to the concept itself. CHAPTER 6. AGENTS AND CASE-BASED REASONING 59 Early papers by Kibler and Aha <ref> [KA87] </ref>, and Porter and Bareiss (the PRO-TOS system) [PB86] are representative of this approach. Instance-based reasoning This is a specialization of the exemplar-based view into a highly syntactic approach.
Reference: [KAA91] <author> D. Kibler, D. Aha, and M. K. Albert. </author> <title> Instance-based learning algorithms. </title> <journal> Machine Learning, </journal> <volume> 6(1), </volume> <year> 1991. </year> <note> BIBLIOGRAPHY 121 </note>
Reference-contexts: This approach enables an increased focus on automated learning, and unlike some systems (PROTOS for example) does not need a user in the reasoning loop. More recent work by Kibler and Aha and colleagues <ref> [KAA91] </ref> are representative of this paradigm. Memory-based reasoning This approach views the set of cases as a large memory, and reasoning as a process of accessing and searching in this memory.
Reference: [KC88] <author> S. Kedar-Cabelli. </author> <title> Analogy | from a unified perspective. </title> <booktitle> In Analogical reasoning, </booktitle> <pages> pages 65-103. </pages> <publisher> Kluwer Academic, </publisher> <year> 1988. </year>
Reference-contexts: This approach is therefore concerned with mechanisms for identification and utilization of cross-domain analogies [Hal89] <ref> [KC88] </ref>. This ends our account of the various CBR approaches.
Reference: [Kit93] <author> H. Kitano. </author> <title> Challenges for massive parallelism. </title> <booktitle> In IJCAI-93, Proceedings of the Thirteenth International Conference on Artificial Intelligence, </booktitle> <pages> pages 813-834, </pages> <address> Chambery, France, 1993. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: The MBR-Talk system [SW88] is one of the memory-based reasoning systems. In addition to the above mentioned characteristics, it uses purely syntactical matching criteria. There is also a lot of work being done in Japan in this area (on "massive parallel memories" <ref> [Kit93] </ref>), but this also focuses on the integration of general domain knowledge with the methods described. (Typical) case-based reasoning The term of "case-based reasoning" is also used in a narrower sense, to describe what we may call the "typical" CBR approaches.
Reference: [KR88] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <institution> Bell Telephone Laboratories, </institution> <year> 1988. </year>
Reference-contexts: CHAPTER 4. A FIRST STEP | BASIC COMMUNICATION 36 This I have done in a simple fashion, namely by writing a program called setserver , in the C language <ref> [KR88] </ref>. (See Appendix A.) In short, setserver starts up another program, in this case a Lisp interpreter, in such a way that it can write to and read from it, and makes a socket available over the network with a service tailored to be connected to with the well-known telnet program.
Reference: [Lab96] <author> Yannis Labrou. </author> <title> Semantics for an agent communication language. </title> <type> PhD thesis, </type> <institution> Computer Science and Electrical Engineering Dept. (CSEE), University Maryland Graduate School, Balti-more, Maryland, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: From the last of these, the External Interfaces group, has come the KQML language. 5.2 Language basics Knowledge Query and Manipulation Language (KQML) is a language constructed to deal with the problems of exchanging knowledge between different types of agents and in different representation formats [Ini92] [FFMM94] [LF94] <ref> [Lab96] </ref>. Allowing for content messages of any formalism, it handles knowledge in the way of "speaking about it". That is, it is directed at the manipulation of knowledge through speech acts. <p> CHAPTER 5. KQML 42 of performatives should be seen as absolute. However, the one we intend to present here is taken from the latest specification of the language <ref> [Lab96] </ref>, and thus is the nearest we can currently get to a absolutely correct account. It's natural that our presentation start out from the tell example above.
Reference: [Lam94] <author> Leslie Lamport. </author> <title> LaTeX : a document preparation system. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <address> 2nd edition, </address> <year> 1994. </year> <note> ISBN 0-201-52983-1. </note>
Reference: [LF94] <author> Yannis Labrou and Tim Finin. </author> <title> A semantics approach for kqml | a general purpose communication language for software agents. </title> <booktitle> Third International Conference on Information and Knowledge Management, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: From the last of these, the External Interfaces group, has come the KQML language. 5.2 Language basics Knowledge Query and Manipulation Language (KQML) is a language constructed to deal with the problems of exchanging knowledge between different types of agents and in different representation formats [Ini92] [FFMM94] <ref> [LF94] </ref> [Lab96]. Allowing for content messages of any formalism, it handles knowledge in the way of "speaking about it". That is, it is directed at the manipulation of knowledge through speech acts.
Reference: [LS93] <author> George F. Luger and William A. Stubblefield. </author> <title> Artificial Intelligence: structures and strategies for complex problem solving | 2nd ed. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1993. </year> <note> ISBN 0-8053-4780-1. </note>
Reference-contexts: CHAPTER 6. AGENTS AND CASE-BASED REASONING 56 An expert system is a rule-based program that provides "expert" solutions to problems in a specific domain. But it differs from a human expert in two major respects <ref> [LS93, p.308-309] </ref>. Firstly, it does not learn from experience.
Reference: [Mae94] <editor> Pattie Maes. </editor> <title> Agents that reduce work and information overload. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 31-40, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Consequently we avoid the added complexity, and continue to concentrate on the simple term of "agent". Another conception of an agent is that of a "personal assistant who is collaborating with the user in the same work environment" <ref> [Mae94] </ref>. We will remember this definition for later | in fact we will be taking a peek at one such personal assistant agent in section 2.3. <p> we locate a more authoritative source on agents, ie. on the types that exist and how they differ from each other? Tracking some agent WWW links to the Department of Computer Science of the University of Maryland Baltimore County (UMBC), we discover the AgentNews newsletter. 4 Ref. the definition from <ref> [Mae94] </ref> we cited in section 2.1.1. CHAPTER 2. AGENT | THE TERM 21 2.4 The AgentNews newsletter The AgentNews newsletter is a source for information about agents and agent technology. It is available both as a mailing list and on the World Wide Web | at &lt;http://www.cs.umbc.edu/agentnews/&gt; .
Reference: [MB87] <author> Robert MacGregor and Raymond Bates. </author> <title> The loom knowledge representation language. </title> <type> Technical report isi/rs-87-188, </type> <institution> USC/ISI, </institution> <year> 1987. </year> <note> Also appears in Proceedings of the Knowledge-based Systems Workshop held in St. </note> <institution> Louis, Missouri, </institution> <month> April 21-23, </month> <year> 1987. </year>
Reference-contexts: Such formats and agents do in fact already exist. As for the former, there are already dozens of knowledge representation formats available. Examples are KIF [GFea92], LOOM <ref> [MB87] </ref>, etc. The problem here is not finding one, but rather deciding on the best one. (This is not an issue in this thesis.) There also exists a language for communicating knowledge, rather than merely representing it. This language is called KQML.
Reference: [New82] <author> Allen Newell. </author> <title> The knowledge level. </title> <journal> Artificial Intelligence, </journal> <volume> 18(1) </volume> <pages> 87-127, </pages> <year> 1982. </year> <note> BIBLIOGRAPHY 122 </note>
Reference-contexts: Allen Newell's famous 1982 article <ref> [New82] </ref>.) The traditional way is to interpret a computer program as a symbolic machine, ie. as an entity on the Symbol Level.
Reference: [PAM96] <author> Enric Plaza, Josep Llus Arcos, and Francisco Martn. </author> <title> Cooperation modes among case-based reasoning agents. </title> <booktitle> Proceedings of the ECAI'96 Workshop on Learning in Distributed Artificial Intelligence Systems, </booktitle> <year> 1996. </year> <note> Available online at &lt;http://www.iiia.csic.es/Projects/FedLearn/CoopCBR.html&gt;. </note>
Reference-contexts: So the question is not, "can it be done?" but "may it improve the reasoning?" 6.3 Two modes of cooperation 6.3.1 DistCBR and ColCBR Plaza, Arcos and Martn start out with an outlook similar to our current one in the article "Cooperation Modes among Case-Based Reasoning Agents" <ref> [PAM96] </ref>. <p> that a group of agents with different reasoning methods can. (Not to mention negative effects of bottlenecks, positive effects of having different implementations of similar programs, etc., which all conspire to make a group of reasoning agents more flexible and powerful than one monolithic system.) 6.3.3 Relation to KQML In <ref> [PAM96] </ref> the authors mention KQML as an approach similar to their own, but state that since they themselves are concentrating on homogeneous peer agents, they had no need for KQML's more general features.
Reference: [PB86] <author> Bruce W. Porter and Ray Bareiss. Protos: </author> <title> An experiment in knowledge acquisition for heuristic classification tasks. </title> <booktitle> In Proceedings of the First International Meeting on Advances in Learning (IMAL), </booktitle> <pages> pages 159-174, </pages> <address> Les Arcs, France, </address> <year> 1986. </year>
Reference-contexts: Wittgenstein is critical of the traditional concept of "meaning", where the meaning of a concept is seen as an abstract entity somehow corresponding to the concept itself. CHAPTER 6. AGENTS AND CASE-BASED REASONING 59 Early papers by Kibler and Aha [KA87], and Porter and Bareiss (the PRO-TOS system) <ref> [PB86] </ref> are representative of this approach. Instance-based reasoning This is a specialization of the exemplar-based view into a highly syntactic approach. Instead of using general knowledge it relies on a large number of instances to match the new case, and in this way obtains a classification.
Reference: [PBH90] <author> Bruce W. Porter, Ray Bareiss, and Robert C. Holte. </author> <title> Concept learning and heuristic classification in weak-theory domains. </title> <journal> Artificial Intelligence, </journal> <volume> 45(3) </volume> <pages> 229-263, </pages> <year> 1990. </year>
Reference-contexts: But in domains where this is not the case, ie. in so-called weak theory domains, one can only perform such generalizations at the danger of loss of information. Consequently, learning in weak theory domains is better served with methods that do not generalize at once <ref> [PBH90] </ref>. | Like lazy generalization, for instance. Also, one should be aware of that weak-theory domains are in fact more common than domains CHAPTER 6.
Reference: [PP96] <author> M. V. Nagendra Prasad and Enric Plaza. </author> <title> Corporate memories as distributed case libraries. Submitted to CORPORATE MEMORY & ENTERPRISE MODELING track in KAW'96, </title> <year> 1996. </year>
Reference-contexts: is this an improperly balanced viewpoint? The question we must ask ourselves is: May intelligent agent technology aid the very problem solving of intelligent systems, (in this case CBR systems) and if so, how? There is an important distinction here between the concepts of Distributed Processing and Distributed Problem Solving <ref> [PP96] </ref>. Distributed processing is characterized by a complete independence of sub-problems, where each agent needs nothing other than its own local knowledge and methods in order to arrive at a solution to the subproblem. <p> KQML messages. (Plural Noos has been implemented with RPC, which is an implementation method that doubtfully will scale up to all the possible applications of KQML.) This would enable an implementation of the same kind of cooperation between CBR agents as in the Plaza et.al. article. 6.4 Negotiated Retrieval In <ref> [PP96] </ref>, Prasad and Plaza describe an additional method of cooperation between case-based agents, the Negotiated Retrieval method for distributed problem solving. Negotiated retrieval represents a way of making various specialist agents cooperate on forming a mutually acceptable overall case, by merging sub-cases supplied by each agent.
Reference: [Pre92] <author> Unix Press. </author> <title> Network Programming Interfaces. UNIX System V Release 4.2 Programming Series. </title> <publisher> Unix Press, Prentice-Hall Inc., </publisher> <year> 1992. </year> <note> ISBN 0-13-017641-9. </note>
Reference-contexts: Also, most if not all of our examples of clients can be construed as Unix-based. Our self-constructed example programs in appendices A and B have both been programmed using Unix software and networking capabilities. 4.1.1 Sockets Sockets <ref> [Pre92] </ref> represent one of the ways Unix programs use to communicate with each other, and is in fact the most common way of implementing such a network-communication program in Unix. Basically, a socket can be described as an endpoint of communication.
Reference: [Rie94] <author> Doug Riecken. </author> <title> A conversation with marvin minsky about agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 23-29, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: That such an obviously practical field has not yet bloomed is perhaps the reason that a lot of people are talking about an "AI Winter". It would seem that many feel the lack in this area very strongly, and are waiting for some sort of breakthrough <ref> [Rie94] </ref>. One project that is trying to improve this situation is the CyC project [GL93], which basically consists of compiling a large number of common-sense rules into one big reasoning knowledge base.
Reference: [Sea69] <author> John R. Searle. </author> <title> Speech Acts. </title> <publisher> Cambridge University Press, </publisher> <address> Cam-bridge, UK, </address> <year> 1969. </year>
Reference-contexts: A speech act is a the kind of act one makes when one utters an expression, either by making a statement, asking a question, commanding someone to do something, expressing an intention, et cetera. One of the leading philosophers CHAPTER 5. KQML 40 in this field, John Searle <ref> [Sea69] </ref>, differs between the sentence content and its illocutionary force, a distinction that has also been adopted by KQML. In order to visualize this concept, let's consider the fact of a person P lifting an object O.
Reference: [SL92] <author> Jeffrey C. Schlimmer and Pat Langley. </author> <title> Learning, </title> <booktitle> machine. In Encyclopedia of Artificial Intelligence. </booktitle> <publisher> Wiley, </publisher> <year> 1992. </year>
Reference-contexts: more flexible is to make it learn more rules, and more often than not, the only way to make it learn is to manually update its rule-base.) Obviously, both of these facts make expert systems in their present form less than ideal for common-sense reasoning. 6.2.2 Lazy Generalization Machine learning <ref> [SL92] </ref> is the subfield of AI that studies the automated acquisition of domain-specific knowledge. One of its aims is to alleviate the shortcomings of expert systems. There are several paradigms for Machine Learning, one of which is the case-based approach [SL92, p.797-800]. <p> One of its aims is to alleviate the shortcomings of expert systems. There are several paradigms for Machine Learning, one of which is the case-based approach <ref> [SL92, p.797-800] </ref>. The core of this approach is the storing of individual problem-solving cases and using lazy generalization to classify and solve new problem cases. <p> Significant improvements in efficiency have been made in both of these applications. 6.2.3 Main issues and approaches The main issues that a CBR system has to deal with relates to the following <ref> [SL92] </ref>: 1. Retrieving cases that may contribute to solving a new problem case. 2. Matching and applying the retrieved cases to the new case. 3. Storing the outcome of the new case for future use.
Reference: [Ste90a] <author> Guy L. Steele. </author> <title> Common Lisp. </title> <note> Digital Press, second edition, </note> <year> 1990. </year> <title> (Common Lisp | The Language.) </title> <note> ISBN 1-55558-041-6. </note>
Reference-contexts: We will be using some of these system calls in our example programs. 4.2 A Lisp interpreter as an agent For our example, we will put a Lisp interpreter on the net, as described in the following. Lisp <ref> [Ste90a] </ref> is a programming language much used in AI. Given that we have available a Lisp program which implements some functionality that we may call intelligent, and also has the ability to communicate in one way or other, we may call this program an intelligent agent of sorts.
Reference: [Ste90b] <author> Luc Steels. </author> <title> Components of expertise. </title> <journal> AI Magazine, </journal> <volume> 11(2) </volume> <pages> 29-49, </pages> <year> 1990. </year>
Reference-contexts: More recent advances in the areas of knowledge acquisition and knowledge modeling have made this notion of the knowledge level more concrete and directly applicable for systems analysis and design, as exemplified by methodologies such as KADS [WSB92], Generic Tasks [Cha86] and Components of Expertise <ref> [Ste90b] </ref>. In chapter 2, we posed several assumptions about agents, and left open the question of whether we should understand our assumptions literally or not. CHAPTER 3.
Reference: [SW88] <author> C. Stanfill and D. Waltz. </author> <title> The memory based reasoning paradigm. In Case based reasoning. </title> <booktitle> Proceedings from a workshop, </booktitle> <pages> pages 414-424, </pages> <address> Clearwater Beach, Florida, 1988. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: Memory-based reasoning This approach views the set of cases as a large memory, and reasoning as a process of accessing and searching in this memory. Parallel processing techniques are being used in order to attain a high level of efficiency in the case matching process. The MBR-Talk system <ref> [SW88] </ref> is one of the memory-based reasoning systems. In addition to the above mentioned characteristics, it uses purely syntactical matching criteria.
Reference: [Wit53] <author> Ludwig Wittgenstein. </author> <title> Philosophical Investigations. </title> <publisher> Blackwell, </publisher> <year> 1953. </year> <note> ISBN 0-631-11900-0. BIBLIOGRAPHY 123 </note>
Reference-contexts: its exemplars. 1 In this approach, the solving of a new case is seen as a classification task, in that the class of the most similar past case becomes the class of the new case. 1 Such definitions may be viewed as a response to modern philosophy of language, Wittgenstein <ref> [Wit53] </ref> in particular. Wittgenstein is critical of the traditional concept of "meaning", where the meaning of a concept is seen as an abstract entity somehow corresponding to the concept itself. CHAPTER 6.
Reference: [WS91] <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1991. </year> <note> ISBN 0-937175-64-1. </note>
Reference-contexts: When a connection is made, setserver passes the data it gets from the connection on to the Lisp interpreter, and sends the data it gets in return back over the connection. In addition, I implemented a simple client in the Perl language <ref> [WS91] </ref>, called setserver-talk .
Reference: [WSB92] <author> B. J. Wielinga, A. Th. Schreiber, and J. A. Breuker. Kads: </author> <title> A modelling approach to knowledge engineering. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(1), </volume> <year> 1992. </year>
Reference-contexts: More recent advances in the areas of knowledge acquisition and knowledge modeling have made this notion of the knowledge level more concrete and directly applicable for systems analysis and design, as exemplified by methodologies such as KADS <ref> [WSB92] </ref>, Generic Tasks [Cha86] and Components of Expertise [Ste90b]. In chapter 2, we posed several assumptions about agents, and left open the question of whether we should understand our assumptions literally or not. CHAPTER 3.
References-found: 43

