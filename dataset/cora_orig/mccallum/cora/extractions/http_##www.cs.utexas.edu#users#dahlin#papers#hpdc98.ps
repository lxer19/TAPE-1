URL: http://www.cs.utexas.edu/users/dahlin/papers/hpdc98.ps
Refering-URL: http://www.cs.utexas.edu/users/dahlin/papers.html
Root-URL: 
Title: WebOS: Operating System Services for Wide Area Applications  
Author: Amin Vahdat Thomas Anderson Michael Dahlin Eshwar Belani David Culler Paul Eastham Chad Yoshikawa 
Abstract: In this paper, we demonstrate the power of providing a common set of Operating System services to wide-area applications, including mechanisms for naming, persistent storage, remote process execution, resource management, authentication, and security. On a single machine, application developers can rely on the local operating system to provide these abstractions. In the wide area, however, application developers are forced to build these abstractions themselves or to do without. This ad-hoc approach often results in individual programmers implementing non-optimal solutions, wasting both programmer effort and system resources. To address these problems, we are building a system, WebOS, that provides basic operating systems services needed to build applications that are geographically distributed, highly available, incrementally scalable, and dynamically reconfigurable. Experience with a number of applications developed under WebOS indicates that it simplifies system development and improves resource utilization. In particular, we use WebOS to implement Rent-A-Server to provide dynamic replication of overloaded Web services across the wide area in response to client demands. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. D. Alexandrov, M. Ibel, K. E. Schauser, and C. J. Scheiman. Ufo: </author> <title> A Personal Global File System Based on User-Level Extensions to the Operating System. </title> <booktitle> In Proceed ings of the 1997 USENIX Technical Conference, </booktitle> <address> Anaheim, CA, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS [21], Alex [6], Coda [25], Bayou [41], WebNFS [39], and UFO <ref> [1] </ref>. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide-area access.
Reference: [2] <author> T. E. Anderson, M. D. Dahlin, J. M. Neefe, D. A. Patter son, D. S. Roselli, and R. Y. Wang. </author> <title> Serverless Network File Systems. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 109126, </pages> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems <ref> [46, 30, 21, 25, 41, 2] </ref>. <p> We plan to explore tradeoffs associated with maintaining directories of peer cache contents <ref> [2, 13] </ref>, hints [35], or using simple IP multicasts or broadcasts. WebOS simplifies the implementation of the cooperative cache in a number of ways. First, Smart Clients are used to determine the appropriate proxy cache to contact.
Reference: [3] <author> E. Baldeschwieler, R. Blumofe, and E. Brewer. </author> <title> Atlas: An Infrastructure for Global Computing. </title> <booktitle> In Proc. of the Sev enth ACM SIGOPS European Workshop: Systems Support for Worldwide Applcations, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Beginning with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide-area parallel programming, including Wax [38], Legion [20], Atlas <ref> [3] </ref>, Globus [14], Globe [44], and NetSolve [5]. A detailed comparison with the abstractions presented here and these projects is beyond the scope of this paper. However, WebOS (a) Fixed Server (b) Rent-A-Server of retrieving a 1 KB HTML file over HTTP.
Reference: [4] <author> E. Belani, A. Vahdat, T. Anderson, and M. Dahlin. </author> <title> The CRI SIS Wide Area Security Architecture. </title> <booktitle> In Proceedings of the USENIX Security Symposium, </booktitle> <address> San Antonio, Texas, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: To address these problems, we are building WebOS, a framework for supporting geographically distributed, highly available, incrementally scalable, and dynamically reconfiguring applications. WebOS includes mechanisms for global naming [48], persistent storage [43, 42], remote process execution, resource management, authentication and security <ref> [4] </ref>. We use WebOS to demonstrate the synergy of these services in simplifying the development of wide-area distributed applications and in providing more efficient global resource utilization. The WebOS framework enables a new paradigm for Internet services. <p> WebOS is composed of a number of different components. In the space allowed, we can only briefly describe the main ideas behind individual components, each of which is described in detail elsewhere <ref> [48, 43, 4, 42] </ref>. We have completed prototypes of each component and are now working to integrate them. The end goal is to provide a platform for the development and deployment for wide-area applications. <p> In addition, we argue for benefit of integrating the file system with application-controlled efficient wide-area communication [43, 42]. * Security and Authentication: To support applications operating across organizational boundaries, WebOS defines a model of trust providing both security guarantees and an interface for authenticating the identity of principals <ref> [4] </ref>. A key enabling feature is fine-grained control of capabilities provided to remote processes executing on behalf of principals. * Process Control: In WebOS, executing a process on a remote node should be as simple as the corresponding local operation. <p> To provide this level of protection, a wide-area security system must provide fine-grained transfer of rights between principals in different administrative domains. The goal of our security abstraction is to transparently enable such rights transfer. CRISIS, the security system of WebOS, is described in another publication <ref> [4] </ref>; we present an overview here. 5.1 Validating and Revoking Statements A principal contribution of CRISIS is the introduction of transfer certificates, lightweight and revocable capabilities used to support the fine-grained transfer of rights.
Reference: [5] <author> H. Casanova and J. Dongarra. NetSolve: </author> <title> A Network Server for Solving Computational Science Problems. </title> <booktitle> In Proceed ings of Supercomputing '96, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: Beginning with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide-area parallel programming, including Wax [38], Legion [20], Atlas [3], Globus [14], Globe [44], and NetSolve <ref> [5] </ref>. A detailed comparison with the abstractions presented here and these projects is beyond the scope of this paper. However, WebOS (a) Fixed Server (b) Rent-A-Server of retrieving a 1 KB HTML file over HTTP.
Reference: [6] <author> V. Cate. </author> <title> Alex a Global Filesystem. </title> <booktitle> In Proceedings of the 1992 USENIX File System Workshop, </booktitle> <pages> pages 112, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: However, these systems focus on a programming model for computing across the wide area, while our work focuses on system level support for building and running wide-area applications. Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS [21], Alex <ref> [6] </ref>, Coda [25], Bayou [41], WebNFS [39], and UFO [1]. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide-area access.
Reference: [7] <author> A. Chankhunthod, P. Danzig, C. Neerdaels, M. Schwartz, and K. Worrell. </author> <title> A Hierarchical Internet Object Cache. </title> <booktitle> In Proceedings of the 1996 USENIX Technical Conference, </booktitle> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: Existing proposals for hierarchical caching of the Web suffer from an inability to dramatically grow the cache size and processing power at each level of the hierarchy <ref> [7] </ref>. With cooperative caching among peer servers, the aggregate capacity grows dramatically with the distance from the client. <p> We plan to build on the work done in Coda and Bayou to address issues of replication and fault tolerance in the wide area. Kermarrec et. al [24] propose a framework for supporting flexible cache consistency that is similar to the model we advocate. Harvest <ref> [7] </ref>, Squid [37], and other Web caching efforts have focused on methods of extending the client cache across the Internet to caching proxies. Caching proxies in general are limited by a number of ways. Proxies are unable to produce dynamic Web content (i.e. the results of cgi-bin programs).
Reference: [8] <author> D. R. Cheriton. </author> <title> The V Distributed System. </title> <booktitle> In Communica tions of the ACM, </booktitle> <pages> pages 314333, </pages> <month> Mar. </month> <year> 1988. </year>
Reference-contexts: Further, proxies are logical extensions of the client making it difficult for service providers to track such things as hit counts. Rent-A-Server addresses the limitations of proxy caching mechanisms by allowing full replication of overloaded services at locations determined by client access patterns. The V kernel <ref> [8] </ref> uses multicast for client communication to multiple members of a server group for load balancing and fault tolerance. This mechanism is related to our use of Smart Clients for extending service functionality onto the client. However, Smart Clients allow service-specific naming and load balancing algorithms.
Reference: [9] <author> B. Crispo and M. Lomas. </author> <title> A Certification Scheme for Elec tronic Commerce. In Security Protocols International Work shop, </title> <booktitle> pages 1932, </booktitle> <address> Cambridge UK, April 1996. </address> <publisher> Springer Verlag LNCS series vol. </publisher> <pages> 1189. </pages>
Reference-contexts: CA is usually left off-line since certificates are signed with long timeouts, increasing system security since an off-line entity is more difficult to attack, (iii) a malicious CA is unable to revoke a user's key, issue a new identity certificate, and masquerade as the user without colluding with the OLA <ref> [9] </ref>, and (iv) system performance is improved because certificates can be cached for the timeout of the counter-signature, removing the need for synchronous three-way communication in the common case. Transfer certificates can be revoked modulo a timeout.
Reference: [10] <author> M. Dahlin, R. Wang, T. Anderson, and D. Patterson. </author> <title> Coop erative Caching: Using Remote Client Memory to Improve File System Performance. </title> <booktitle> In Proceedings of the 1st USENIX Symposium on Operating Systems Design and Implementa tion, </booktitle> <pages> pages 267280, </pages> <month> November 1417 </month> <year> 1994. </year>
Reference-contexts: Resource allocation within the virtual machine allows external users to take advantage of the aggregate computing resources, while ensuring system developers have the requisite priority. 7.3 Wide Area Cooperative Cache We are using WebOS to build a geographically distributed Web cooperative cache <ref> [10] </ref> to both validate our design and to provide an immediate benefit to the Internet by doing more intelligent caching of Web content.
Reference: [11] <author> S. E. Deering. </author> <title> Multicast Routing in a Datagram Internet work. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: These properties are set and accessed through the UNIX ioctl system call. Currently, WebFS implements the last writer wins [21] cache consistency protocol to support traditional file access as well as an IP multicast-based <ref> [11] </ref> update/invalidate protocol for widely-shared, frequently updated data files. Once IP multicast becomes widely deployed, its use will increase the efficiency of popular Internet push applications [32]. We believe that providing IP multicast support at the file system interface will simplify the development of these applications.
Reference: [12] <institution> Digital Equipment Corporation. Alta Vista, </institution> <year> 1995. </year> <note> http: //www.altavista.digital.com/. </note>
Reference-contexts: For example, many popular services, such as Digital's Alta Vista <ref> [12] </ref> or Netscape's download page [31], are geographically replicated to improve bandwidth, reduce latency, and improve availabilityno single connection onto the Internet can support tens of millions of users.
Reference: [13] <author> M. M. Feeley, W. E. Morgan, F. H. Pighin, A. R. Karlin, H. M. Levy, and C. A. Thekkath. </author> <title> Implementing Global Memory Management in a Workstation Cluster. </title> <booktitle> In Pro ceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: We plan to explore tradeoffs associated with maintaining directories of peer cache contents <ref> [2, 13] </ref>, hints [35], or using simple IP multicasts or broadcasts. WebOS simplifies the implementation of the cooperative cache in a number of ways. First, Smart Clients are used to determine the appropriate proxy cache to contact.
Reference: [14] <author> I. Foster and C. Kesselman. Globus: </author> <title> A Metacomputing In frastructure Toolkit. </title> <booktitle> In Proc. Workshop on Environments and Tools, </booktitle> <year> 1996. </year>
Reference-contexts: Beginning with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide-area parallel programming, including Wax [38], Legion [20], Atlas [3], Globus <ref> [14] </ref>, Globe [44], and NetSolve [5]. A detailed comparison with the abstractions presented here and these projects is beyond the scope of this paper. However, WebOS (a) Fixed Server (b) Rent-A-Server of retrieving a 1 KB HTML file over HTTP.
Reference: [15] <author> A. Fox, S. Gribble, E. Brewer, and E. Amir. </author> <title> Adapting to Net work and Client Variability via On-Demand Dynamic Distil lation. </title> <booktitle> In Proceedings of the Seventh International Confer ence on Archictectural Support for Programming Languages and Operating Systems, </booktitle> <address> Cambridge, MA, </address> <year> 1996. </year>
Reference-contexts: We are currently in the process of generalizing these techniques to other domains through Active Names, pieces of code responsible for name resolution that can be flexibly applied at different points in the network. The flexibility of Active Names could be used to provide URN's [36], transcoding <ref> [15, 16] </ref>, resource discovery, and other applications that may benefit from the availability of code to perform name translation at various points in a distributed system. To motivate the problem of naming in WebOS, we will use the following simple example.
Reference: [16] <author> A. Fox, S. Gribble, Y. Chawathe, and E. Brewer. </author> <title> Cluster Based Scalable Network Services. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <address> Saintt Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: We are currently in the process of generalizing these techniques to other domains through Active Names, pieces of code responsible for name resolution that can be flexibly applied at different points in the network. The flexibility of Active Names could be used to provide URN's [36], transcoding <ref> [15, 16] </ref>, resource discovery, and other applications that may benefit from the availability of code to perform name translation at various points in a distributed system. To motivate the problem of naming in WebOS, we will use the following simple example.
Reference: [17] <author> A. Freier, P. Karlton, and P. Kocher. </author> <title> Secure Socket Layer. Netscape, </title> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: As an explicit design choice, we leverage as much functionality as possible from existing low level services. For example, for compatibility with existing applications, we adopt IP addresses and URL's for the global namespace, TCP to provide reliable communication, and SSL <ref> [17] </ref> for link level security. 3 Naming In this section, we discuss an abstraction for location independent dynamic naming that allows WebOS clients to locate representatives of geographically distributed and dynamically reconfiguring services, while providing load balancing and end-to-end high availability. Our approach consists of a number of components.
Reference: [18] <author> I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications. </title> <booktitle> In Proceed ings of the Sixth USENIX Security Symposium, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: These virtual machines interact with the CRISIS security system to enforce rights restriction associated with different security domains. Thus, processes will be granted variable access to local resources through the virtual machine depending on the privileges of the user originally responsible for creating the process. We use Janus <ref> [18] </ref> to create such a virtual machine. Processes in the virtual machine execute with limited privileges, preventing them from interfering with the operation of processes in other virtual machines.
Reference: [19] <author> J. Gosling and H. McGilton. </author> <title> The Java(tm) Language Envi ronment: A White Paper. </title> <address> http://java.dimensionx. com/whitePaper/javawhitepaper-1.html, </address> <year> 1995. </year>
Reference-contexts: Recently, there has been a push toward the distri-bution of active components in the network, through technologies such as Active Networks [40] and Java <ref> [19] </ref>. The goal of WebOS is to provide a framework to assist application developers in utilizing programmable and active network components. In this paper, we present an overview of the WebOS effort and a snapshot of the current status of our implementation. <p> In our implementation, we attempt to approach the above ideal by loading application and server specific code into end clients to perform perform name translation. These Smart Clients [48] enable extensions of server functionality to be dynamically loaded onto the client machine. Java's <ref> [19] </ref> portability and availability in all major Internet browsers allow us to distribute these extensions as Java applets. The Smart Client architecture is summarized in Figure 1. Client architecture. The GUI thread presents the service interface and passes user requests to the Director Thread.
Reference: [20] <author> A. Grimshaw, A. Nguyen-Tuong, and W. Wulf. </author> <title> Campus Wide Computing: Results Using Legion at the University of Virginia. </title> <type> Technical Report CS-95-19, </type> <institution> University of Virginia, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Beginning with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide-area parallel programming, including Wax [38], Legion <ref> [20] </ref>, Atlas [3], Globus [14], Globe [44], and NetSolve [5]. A detailed comparison with the abstractions presented here and these projects is beyond the scope of this paper. However, WebOS (a) Fixed Server (b) Rent-A-Server of retrieving a 1 KB HTML file over HTTP.
Reference: [21] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satya narayanan, R. Sidebotham, and M. West. </author> <title> Scale and Perfor mance in a Distributed File System. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 6(1):5182, </volume> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems <ref> [46, 30, 21, 25, 41, 2] </ref>. <p> WebFS associates a list of user-extensible properties with each file to extend basic properties such as owner and permissions, cache consistency policy, prefetching and cache replacement policy, and encryption policy. These properties are set and accessed through the UNIX ioctl system call. Currently, WebFS implements the last writer wins <ref> [21] </ref> cache consistency protocol to support traditional file access as well as an IP multicast-based [11] update/invalidate protocol for widely-shared, frequently updated data files. Once IP multicast becomes widely deployed, its use will increase the efficiency of popular Internet push applications [32]. <p> However, these systems focus on a programming model for computing across the wide area, while our work focuses on system level support for building and running wide-area applications. Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS <ref> [21] </ref>, Alex [6], Coda [25], Bayou [41], WebNFS [39], and UFO [1]. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide-area access.
Reference: [22] <institution> Internet Weather Report, </institution> <year> 1997. </year> <note> http://www. internetweather.com/. </note>
Reference-contexts: Finally, the authentication model allows proxies to validate their identities both to one another and to the client. 7.4 Internet Weather A number of sites are currently attempting to provide regular updates of congestion, latency, and partitions in the Internet <ref> [28, 22, 47] </ref>. Such information is invaluable for services making placement and load balancing decisions. However, all current efforts take network measurements from a centralized site, making it difficult to measure network characteristics between two arbitrary sites.
Reference: [23] <author> E. D. Katz, M. Butler, and R. McGrath. </author> <title> A Scalable HTTP Server: The NCSA Prototype. </title> <booktitle> In First International Confer ence on the World-Wide Web, </booktitle> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Many HTTP server implementations achieve scalability by replicating their data across a fixed set of servers at a single site and then using the Domain Name Service (DNS) to randomly distribute requests across the servers <ref> [23] </ref>. Unfortunately, this approach requires that each site purchase enough computing power and network bandwidth to satisfy peak demand.
Reference: [24] <author> A.-M. Kermarrec, I. Kuz, M. van Steen, , and A. S. Tanen baum. </author> <title> A Framework for Consistent, Replicated Web Ob jects. </title> <booktitle> In Proceedings of the 18th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: We plan to build on the work done in Coda and Bayou to address issues of replication and fault tolerance in the wide area. Kermarrec et. al <ref> [24] </ref> propose a framework for supporting flexible cache consistency that is similar to the model we advocate. Harvest [7], Squid [37], and other Web caching efforts have focused on methods of extending the client cache across the Internet to caching proxies.
Reference: [25] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1):325, </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems <ref> [46, 30, 21, 25, 41, 2] </ref>. <p> To demonstrate this point, we have implemented a stock ticker application that regularly distributes (through multicast file writes) updated stock prices to interested clients performing blocking read operations. In addition to last-writer wins and IP multicast updates, we are in the process of extending WebFS to support optimistic re-integration <ref> [25] </ref> to deal with the disconnected operation endemic to today's Internet. The WebFS prototype provides caching, cache consistency, and access-control. We implemented it as a dynamically loadable Solaris file system extension interfacing at the vnode layer [26]. <p> Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS [21], Alex [6], Coda <ref> [25] </ref>, Bayou [41], WebNFS [39], and UFO [1]. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide-area access.
Reference: [26] <author> S. R. Kleiman. Vnodes: </author> <title> An Architecture For Multiple File System Types in SUN UNIX. </title> <booktitle> In Proceedings of the 1986 USENIX Summer Technical Conference, </booktitle> <pages> pages 238 247, </pages> <year> 1986. </year>
Reference-contexts: The WebFS prototype provides caching, cache consistency, and access-control. We implemented it as a dynamically loadable Solaris file system extension interfacing at the vnode layer <ref> [26] </ref>. The vnode layer makes upcalls to a user level WebFS daemon for file accesses not cached in virtual memory. WebFS uses a URL-based name space, and the WebFS daemon uses HTTP for access to standard Web sites.
Reference: [27] <author> A. Luotonen and K. Atlis. </author> <title> World-Wide Web Proxies. </title> <booktitle> In First International Conference on the World-Wide Web, </booktitle> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: As an example of the importance of having server-controlled rather than client-controlled load distribution, some sites have recently asserted that proxy caches violate copyright laws by storing site content <ref> [27] </ref>. In effect, the proxies are reducing generated advertising revenues by hiding page access counts. 8.2 System Design In this subsection, we demonstrate how WebOS services simplify the implementation of this application. The architecture of the Rent-A-Server is described in Figure 2.
Reference: [28] <institution> Matrix Information and Directory Services, Inc. </institution> <note> MIDS In ternet Weather Report, 1996. See http://www2.mids.org/- weather/index.html. </note>
Reference-contexts: Finally, the authentication model allows proxies to validate their identities both to one another and to the client. 7.4 Internet Weather A number of sites are currently attempting to provide regular updates of congestion, latency, and partitions in the Internet <ref> [28, 22, 47] </ref>. Such information is invaluable for services making placement and load balancing decisions. However, all current efforts take network measurements from a centralized site, making it difficult to measure network characteristics between two arbitrary sites.
Reference: [29] <author> M. Mitzenmacher. </author> <title> The Power of Two Choices in Random ized Load Balancing. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1996. </year>
Reference-contexts: With Smart Clients, it is impractical to keep all clients abreast of changes in load of all servers. Given the high variability of load in the context of the Internet, clients using out of date information may make strictly worse choices than clients making random decisions <ref> [29] </ref>. Fortunately, Smart Clients can use more static state information to influence the load balancing decision, such as available servers, server capacity, server network connectivity, server location, and client location. Although the load balancing algorithm can be service specific, we implement the following algorithm by default.
Reference: [30] <author> M. Nelson, B. Welch, and J. Ousterhout. </author> <title> Caching in the Sprite Network File System. </title> <journal> ACM Transactions on Com puter Systems, </journal> <volume> 6(1):134154, </volume> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems <ref> [46, 30, 21, 25, 41, 2] </ref>.
Reference: [31] <author> Netscape Communications Corporation. Netscape Naviga tor, </author> <year> 1994. </year> <note> http://www.netscape.com. </note>
Reference-contexts: For example, many popular services, such as Digital's Alta Vista [12] or Netscape's download page <ref> [31] </ref>, are geographically replicated to improve bandwidth, reduce latency, and improve availabilityno single connection onto the Internet can support tens of millions of users.
Reference: [32] <author> PointCast. </author> <title> The PointCast Network, </title> <note> 1996. http://www. pointcast.com. </note>
Reference-contexts: Currently, WebFS implements the last writer wins [21] cache consistency protocol to support traditional file access as well as an IP multicast-based [11] update/invalidate protocol for widely-shared, frequently updated data files. Once IP multicast becomes widely deployed, its use will increase the efficiency of popular Internet push applications <ref> [32] </ref>. We believe that providing IP multicast support at the file system interface will simplify the development of these applications. To demonstrate this point, we have implemented a stock ticker application that regularly distributes (through multicast file writes) updated stock prices to interested clients performing blocking read operations.
Reference: [33] <author> R. L. Rivest and B. Lampson. </author> <title> SDSIA Simple Distributed Security Infrastructure. </title> <address> http://theory.lcs.mit. edu/cis/sdsi.html, </address> <year> 1996. </year>
Reference-contexts: Thus, in creating new roles, principals act as their own certification authority <ref> [33] </ref>.
Reference: [34] <author> A. Rutkowski. </author> <title> Testimony Before the U.S. </title> <institution> House of Repre sentatives Committee on Science. </institution> <note> Available as http:// www.isoc.org/rutkowski/ht_hearing_html, July 26 1995. </note>
Reference-contexts: This situation will only get worse; it is currently predicted that the number of Internet users will increase by an order of magnitude to over 100 million in less than 5 years <ref> [34] </ref>. To address these problems, we are building WebOS, a framework for supporting geographically distributed, highly available, incrementally scalable, and dynamically reconfiguring applications. WebOS includes mechanisms for global naming [48], persistent storage [43, 42], remote process execution, resource management, authentication and security [4].
Reference: [35] <author> P. Sarkar and J. Hartman. </author> <title> Efficient cooperative caching us ing hints. </title> <booktitle> In Operating Systems Design and Implementation, </booktitle> <pages> pages 3546, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: We plan to explore tradeoffs associated with maintaining directories of peer cache contents [2, 13], hints <ref> [35] </ref>, or using simple IP multicasts or broadcasts. WebOS simplifies the implementation of the cooperative cache in a number of ways. First, Smart Clients are used to determine the appropriate proxy cache to contact.
Reference: [36] <author> K. Sollins and L. Masinter. </author> <title> Functional Requirements for Uniform Resource Names. </title> <type> RFC 1737, </type> <month> December </month> <year> 1994. </year>
Reference-contexts: We are currently in the process of generalizing these techniques to other domains through Active Names, pieces of code responsible for name resolution that can be flexibly applied at different points in the network. The flexibility of Active Names could be used to provide URN's <ref> [36] </ref>, transcoding [15, 16], resource discovery, and other applications that may benefit from the availability of code to perform name translation at various points in a distributed system. To motivate the problem of naming in WebOS, we will use the following simple example. <p> Since it is preferable to export a namespace with location independent names, we are currently investigating combining Smart Proxies with WebFS to provide URN <ref> [36] </ref> support for WebFS file names. Additionally, if the server site is also running WebFS, then authenticated read/write access and cache consistency are enabled through our own custom extensions to HTTP. WebFS has been in day to day use for approximately one year by twenty users at the authors' site.
Reference: [37] <institution> Squid Internet Object Cache, </institution> <year> 1996. </year> <note> http://squid. nlanr.net/Squid/. </note>
Reference-contexts: We plan to build on the work done in Coda and Bayou to address issues of replication and fault tolerance in the wide area. Kermarrec et. al [24] propose a framework for supporting flexible cache consistency that is similar to the model we advocate. Harvest [7], Squid <ref> [37] </ref>, and other Web caching efforts have focused on methods of extending the client cache across the Internet to caching proxies. Caching proxies in general are limited by a number of ways. Proxies are unable to produce dynamic Web content (i.e. the results of cgi-bin programs).
Reference: [38] <author> P. D. Stout. Wax: </author> <title> A Wide Area Computation System. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1994. </year> <month> CMU-CS-94-230. </month>
Reference-contexts: Beginning with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide-area parallel programming, including Wax <ref> [38] </ref>, Legion [20], Atlas [3], Globus [14], Globe [44], and NetSolve [5]. A detailed comparison with the abstractions presented here and these projects is beyond the scope of this paper. However, WebOS (a) Fixed Server (b) Rent-A-Server of retrieving a 1 KB HTML file over HTTP.
Reference: [39] <author> WebNFS: </author> <title> The Filesystem for the World Wide Web. </title> <type> Tech nical report, </type> <institution> Sun Microsystems, </institution> <year> 1996. </year> <note> See http://www. sun.com/webnfs/wp-webnfs/. </note>
Reference-contexts: Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS [21], Alex [6], Coda [25], Bayou [41], WebNFS <ref> [39] </ref>, and UFO [1]. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide-area access.
Reference: [40] <author> D. Tennenhouse and D. Wetherall. </author> <title> Towards an Active Net work Architecture. </title> <booktitle> In ACM SIGCOMM Computer Commu nication Review, </booktitle> <pages> pages 518, </pages> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: Recently, there has been a push toward the distri-bution of active components in the network, through technologies such as Active Networks <ref> [40] </ref> and Java [19]. The goal of WebOS is to provide a framework to assist application developers in utilizing programmable and active network components. In this paper, we present an overview of the WebOS effort and a snapshot of the current status of our implementation. <p> The Active Networks proposal is to modify Internet routers to be dynamically programmable, either at the connection or packet level <ref> [40] </ref>. The goal is to make it easier to extend network protocols to provide new services, such as minimizing network bandwidth consumed by multicast video streams. As in our work, a major motivation is to move computation into the Internet to minimize network latency and congestion.
Reference: [41] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. </author> <title> Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 172183, </pages> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems <ref> [46, 30, 21, 25, 41, 2] </ref>. <p> Our work draws upon a large body of previous work in file systems exporting a global namespace, including AFS [21], Alex [6], Coda [25], Bayou <ref> [41] </ref>, WebNFS [39], and UFO [1]. The main differentiating point between WebFS and these earlier works is backward compatibility with the HTTP name space and a security model appropriate for wide-area access.
Reference: [42] <author> A. Vahdat and T. Anderson. </author> <title> Transparent Result Caching. </title> <booktitle> In Proceedings of the 1998 USENIX Technical Conference, </booktitle> <address> New Orleans, Louisiana, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: To address these problems, we are building WebOS, a framework for supporting geographically distributed, highly available, incrementally scalable, and dynamically reconfiguring applications. WebOS includes mechanisms for global naming [48], persistent storage <ref> [43, 42] </ref>, remote process execution, resource management, authentication and security [4]. We use WebOS to demonstrate the synergy of these services in simplifying the development of wide-area distributed applications and in providing more efficient global resource utilization. The WebOS framework enables a new paradigm for Internet services. <p> WebOS is composed of a number of different components. In the space allowed, we can only briefly describe the main ideas behind individual components, each of which is described in detail elsewhere <ref> [48, 43, 4, 42] </ref>. We have completed prototypes of each component and are now working to integrate them. The end goal is to provide a platform for the development and deployment for wide-area applications. <p> WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems [46, 30, 21, 25, 41, 2]. In addition, we argue for benefit of integrating the file system with application-controlled efficient wide-area communication <ref> [43, 42] </ref>. * Security and Authentication: To support applications operating across organizational boundaries, WebOS defines a model of trust providing both security guarantees and an interface for authenticating the identity of principals [4]. <p> Thus, in some instances they provide a poor match to the requirements of overloaded services. First, proxy servers cache only data pages. A proxy must send all requests for CGI scripts to the original server (another paper <ref> [42] </ref> describes our approach for relaxing this limitation). Second, because servers regard proxies as ordinary clients, the proxy can supply stale data to its clients because of the limitations of HTTP cache consistency protocols.
Reference: [43] <author> A. Vahdat, P. Eastham, and T. Anderson. WebFS: </author> <title> A Global Cache Coherent File System. </title> <note> See http://www.cs. berkeley.edu/vahdat/webfs/webfs.html, </note> <month> December </month> <year> 1996. </year>
Reference-contexts: To address these problems, we are building WebOS, a framework for supporting geographically distributed, highly available, incrementally scalable, and dynamically reconfiguring applications. WebOS includes mechanisms for global naming [48], persistent storage <ref> [43, 42] </ref>, remote process execution, resource management, authentication and security [4]. We use WebOS to demonstrate the synergy of these services in simplifying the development of wide-area distributed applications and in providing more efficient global resource utilization. The WebOS framework enables a new paradigm for Internet services. <p> WebOS is composed of a number of different components. In the space allowed, we can only briefly describe the main ideas behind individual components, each of which is described in detail elsewhere <ref> [48, 43, 4, 42] </ref>. We have completed prototypes of each component and are now working to integrate them. The end goal is to provide a platform for the development and deployment for wide-area applications. <p> WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems [46, 30, 21, 25, 41, 2]. In addition, we argue for benefit of integrating the file system with application-controlled efficient wide-area communication <ref> [43, 42] </ref>. * Security and Authentication: To support applications operating across organizational boundaries, WebOS defines a model of trust providing both security guarantees and an interface for authenticating the identity of principals [4].
Reference: [44] <author> M. van Steen, P. Homburg, and A. S. Tanenbaum. </author> <title> The Ar chitectural Design of Globe: A Wide-Area Distributed Sys tem. </title> <type> Technical Report Technical Report IR-422, </type> <institution> Vrije Uni versiteit, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: Beginning with the WebOS framework, our prototype of Rent-A-Server was operational in less than one week. 9 Related Work A number of recent efforts exploit computational resources available on the Internet for wide-area parallel programming, including Wax [38], Legion [20], Atlas [3], Globus [14], Globe <ref> [44] </ref>, and NetSolve [5]. A detailed comparison with the abstractions presented here and these projects is beyond the scope of this paper. However, WebOS (a) Fixed Server (b) Rent-A-Server of retrieving a 1 KB HTML file over HTTP.
Reference: [45] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> Lottery Scheduling: Flexible Proportional-Share Resource Management. </title> <booktitle> In Op erating Systems Design and Implementation, </booktitle> <pages> pages 111, </pages> <month> Novemeber </month> <year> 1994. </year>
Reference-contexts: In the future, we hope to integrate more robust policies allowing fine-grained control over allocation, allowing WebOS to provide quality of service guarantees. For example, techniques such as reverse lotteries <ref> [45] </ref> might be used to more flexibly allocate physical memory pages. 7 WebOS Applications This section provides an overview of four applications designed using the WebOS framework. The first two applications have been completed, while the last two are under development.
Reference: [46] <author> D. Walsh, B. Lyon, G. Sager, J. M. Chang, D. Goldberg, S. Kleiman, T. Lyon, R. Sandberg, and P. Weiss. </author> <title> Overview of the Sun Network File System. </title> <booktitle> In Proceedings of the 1985 USENIX Winter Conference, </booktitle> <pages> pages 117124, </pages> <month> Jan. </month> <year> 1985. </year>
Reference-contexts: WebOS extends to wide-area applications running in a secure HTTP name space the same interface, caching, and performance of existing distributed file systems <ref> [46, 30, 21, 25, 41, 2] </ref>. <p> Once transferred through the network, file pages are cached in the kernel file cache. Thus, once a file has been transferred from a remote site, the performance of cached access through WebFS versus cached access through NFS <ref> [46] </ref> is virtually identical. 5 Security and Authentication Applications operating across the wide area are susceptible to a variety of potential attacks by sophisticated adversaries. To motivate the need for a wide-area security system, consider the simple example of a user wishing to run a simulation.
Reference: [47] <author> R. Wolski. </author> <title> Dynamically Forecasting Network Performance to Support Dynamic Scheduling Using the Network Weather Service. </title> <booktitle> In Proceedings of the 6th High-Performance Dis tributed Computing Conference, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: Finally, the authentication model allows proxies to validate their identities both to one another and to the client. 7.4 Internet Weather A number of sites are currently attempting to provide regular updates of congestion, latency, and partitions in the Internet <ref> [28, 22, 47] </ref>. Such information is invaluable for services making placement and load balancing decisions. However, all current efforts take network measurements from a centralized site, making it difficult to measure network characteristics between two arbitrary sites.
Reference: [48] <author> C. Yoshikawa, B. Chun, P. Eastham, A. Vahdat, T. Ander son, and D. Culler. </author> <title> Using Smart Clients to Build Scalable Services. </title> <booktitle> In Proceedings of the USENIX Technical Confer ence, </booktitle> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: To address these problems, we are building WebOS, a framework for supporting geographically distributed, highly available, incrementally scalable, and dynamically reconfiguring applications. WebOS includes mechanisms for global naming <ref> [48] </ref>, persistent storage [43, 42], remote process execution, resource management, authentication and security [4]. We use WebOS to demonstrate the synergy of these services in simplifying the development of wide-area distributed applications and in providing more efficient global resource utilization. The WebOS framework enables a new paradigm for Internet services. <p> WebOS is composed of a number of different components. In the space allowed, we can only briefly describe the main ideas behind individual components, each of which is described in detail elsewhere <ref> [48, 43, 4, 42] </ref>. We have completed prototypes of each component and are now working to integrate them. The end goal is to provide a platform for the development and deployment for wide-area applications. <p> Further, given the current Internet architecture, it is impossible to accurately determine all the listed considerations, so approximations must be utilized. In our implementation, we attempt to approach the above ideal by loading application and server specific code into end clients to perform perform name translation. These Smart Clients <ref> [48] </ref> enable extensions of server functionality to be dynamically loaded onto the client machine. Java's [19] portability and availability in all major Internet browsers allow us to distribute these extensions as Java applets. The Smart Client architecture is summarized in Figure 1. Client architecture.
References-found: 48

