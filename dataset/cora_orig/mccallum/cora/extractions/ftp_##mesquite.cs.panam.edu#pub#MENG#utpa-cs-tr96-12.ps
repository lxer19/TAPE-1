URL: ftp://mesquite.cs.panam.edu/pub/MENG/utpa-cs-tr96-12.ps
Refering-URL: http://www.cs.panam.edu/TR/cs-tr.html
Root-URL: 
Title: EMUNET: Design and Implementation A Debugging Aid for Distributed Programs in TCP/IP Based Network  
Author: Meng 
Web: http://www.cs.panam.edu  
Address: 1201 W. University Dr. Edinburg, TX 78539-2999  
Affiliation: The University of Texas Pan American Department of Computer Science  
Note: Xiannong  
Abstract: Technical Report CS-96-12 May 22, 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Callahan and J. Sublok, </author> <title> "Static Analysis of Low Level Synchronization", </title> <booktitle> Proceedings of the ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <month> May </month> <year> 1988 </year>
Reference: [2] <author> Doreen Cheng and Robert Hood, </author> <title> "A Portable Debugger for Parallel and Distributed Programs", </title> <booktitle> Proceedings of Supercomputing'94, </booktitle> <address> http://ada.computer.org:80/conferen/sc94/sc94home.html, November 1994 </address>
Reference-contexts: We are mostly interested in the types of distributed debuggers that help programmers find logical errors in their programs, rather than the ones help monitor the performance. Cheng and Hood describe in <ref> [2] </ref> their work of a portable debugger. The debugger uses a client-server model. The debugger acts as a server program on the machines where the program is running. The user interface works as a client to consult the server for execution information of the program being debugged.
Reference: [3] <author> Douglas Comer, </author> <title> Internetworking with TCP/IP Vol. I. </title> <booktitle> second edition, </booktitle> <pages> pp. 357, </pages> <address> 1991, </address> <publisher> Prentice Hall </publisher>
Reference-contexts: The following is a description of the tests that have been conducted. A complete lisint of testing programs and EMUNET library can be found through Appendix. 5.5.1 Test Case One: the Whois Program The first test program we chose is the well-known Whois program <ref> [3] </ref>. In this case, the server program waits on a well known port (or a user defined port) for any client to connect. Once a request from a client is received by the server, the server looks up information for a particular user and return it to the client program.
Reference: [4] <author> Suresh K. Damodaran-Kamal and Joan M. Francioni, </author> <title> "Nondeterminacy: Testing and Debugging in Message Passing Parallel Programs", </title> <booktitle> Proceedings of the third ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <address> San Diego, </address> <month> May </month> <year> 1993 </year>
Reference-contexts: When debugging is done, the user program then is re-linked to the PVM library to actually execute in PVM environment. Damodaran-Kamal and Francioni cited three strategies for detecting non-determinism in their work <ref> [4] </ref>, compile time analysis (example:[1]), which is done before the program execution and is independent of input data, postmortem trace analysis (example:[9]), which analyzes program trace after execution using various software techniques, and on-the-fly mechanism (example: [10, 14]), which makes decision about what to trace and record references at the run
Reference: [5] <author> Suresh K. Damodaran-Kamal and Joan M. Francioni, </author> <title> "mdb: A Semantic Race Detection Tool for PVM", </title> <booktitle> Proceedings of the 1994 Scalable High Performance Computing Conference, </booktitle> <address> Knoxville, TN, </address> <month> May </month> <year> 1994 </year>
Reference-contexts: Hao et.al. of Hewlett-Packard Laboratory developed IVD, Interactive Visualization Debugger [8]. IVD provides on-the-fly program replay and visualization. The mechanism used to replay the program is to record the key events and message when the program is being executed, and then play back when needed. Xmdb <ref> [5, 7] </ref> is a message debug tool for distributed programs in PVM environment. Xmdb provides a message interface among communicating programs for user to access. Each message is sent to this interface. The user then can control how and when the message is delivered to facilitate the debugging process.
Reference: [6] <author> Alexander Dupuy (et al.) </author> <title> NEST: A Network Simulation Testbed, </title> <journal> Communications of the ACM, </journal> <month> Oct. </month> <year> 1991 </year>
Reference-contexts: A similar concept but different implementation was done at the University of Washington [16], which supports user level protocol. Multiple protocols can co-exist. Similar to the work of x-kernel, the code can be modified to support the debug of distributed programming. NEST <ref> [6] </ref> is a network simulation tool. It can alter the characteristics of network traffic to help identify bugs in any user program. However, that implementation does not use the standard TCP/IP interface so it is difficult to extend the application to general TCP/IP based distributed programming.
Reference: [7] <institution> MDB Development Tool, </institution> <address> http://www-c8.lanl.gov/dist comp2/mdb/mdb.html </address>
Reference-contexts: Hao et.al. of Hewlett-Packard Laboratory developed IVD, Interactive Visualization Debugger [8]. IVD provides on-the-fly program replay and visualization. The mechanism used to replay the program is to record the key events and message when the program is being executed, and then play back when needed. Xmdb <ref> [5, 7] </ref> is a message debug tool for distributed programs in PVM environment. Xmdb provides a message interface among communicating programs for user to access. Each message is sent to this interface. The user then can control how and when the message is delivered to facilitate the debugging process.
Reference: [8] <author> Ming C. Hao, Alan H. Karp, Milon Mackey, Vineet Singh, and Jane Chien, </author> <title> "On-the-Fly Visualization and Debugging of Parallel Programs", </title> <type> Technical Report, </type> <institution> HPL-93-95, Hewlett-Packard Laboratory, </institution> <month> October 27, </month> <year> 1993, </year> <note> http://www.hpl.hp.com/invented/techReports/93/HPL-93-95.html </note>
Reference-contexts: The user interface works as a client to consult the server for execution information of the program being debugged. The interface is well designed for portability. It can be used for both PVM and MPI programs. Hao et.al. of Hewlett-Packard Laboratory developed IVD, Interactive Visualization Debugger <ref> [8] </ref>. IVD provides on-the-fly program replay and visualization. The mechanism used to replay the program is to record the key events and message when the program is being executed, and then play back when needed. Xmdb [5, 7] is a message debug tool for distributed programs in PVM environment.
Reference: [9] <author> D.P. Helmbold, C. E. McDowell, and J-Z. Wang, </author> <title> "Determining Possible Event Orders by Analyzing Sequential Traces", </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 4, No. 7, </volume> <month> July </month> <year> 1993 </year>
Reference: [10] <author> R. Hood, K. Kennedy, and J. Mellor-Crummey, </author> <title> "Parallel Program Debugging with On-The-Fly Anormaly Detection", </title> <booktitle> Proceedings of the Supercomputing'90, </booktitle> <month> November </month> <year> 1990 </year>
Reference-contexts: Damodaran-Kamal and Francioni cited three strategies for detecting non-determinism in their work [4], compile time analysis (example:[1]), which is done before the program execution and is independent of input data, postmortem trace analysis (example:[9]), which analyzes program trace after execution using various software techniques, and on-the-fly mechanism (example: <ref> [10, 14] </ref>), which makes decision about what to trace and record references at the run time. 2.2 Works in Network Interface Emulation Our research is similar to Xmdb in nature, that is, replacing the network interface by a user program so the user can control the inter-process communications.
Reference: [11] <author> N. Hutchinson and L. Peterson, </author> <title> The x-kernel: An Architecture for Implementing Network Protocols, </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> Jan. </month> <year> 1991 </year>
Reference-contexts: We briefly examine here the works that closely related to what we do, i.e. replacing the network modules with user controllable in-memory module to aid the debugging process. There are a number of user-level TCP/IP implementations that are potentially possible to serve our purpose. The x-kernel <ref> [11] </ref> developed at the University of Arizona supports the implementation of TCP/IP at user space. With this implementation, the code can be modified so that the network traffic can be controlled and monitored and serve the purpose of debugging.
Reference: [12] <author> David Ingham and Graham Parrington, Delayline: </author> <title> A Wind-Area Network Emulation Tool, </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Newcastle, </institution> <month> Oct. </month> <year> 1993 </year>
Reference-contexts: It can alter the characteristics of network traffic to help identify bugs in any user program. However, that implementation does not use the standard TCP/IP interface so it is difficult to extend the application to general TCP/IP based distributed programming. The Delayline project <ref> [12] </ref> uses local area network to simulate wide-area network so that all the network communication components needed in a wide-area network can be controlled and monitored in a local environment. The Delayline can help debug distributed programs written for wide-area networks.
Reference: [13] <institution> The Nachos System, Department of Computer Science, University of California, ftp://ftp.cs.berkeley.edu/ucb/nachos </institution>
Reference-contexts: If the value of WaitThreshold is 100, then the reading thread is always able to read the message as long as the message available. 5.3 The Thread Package We use the thread package provided by Nachos <ref> [13] </ref> in our EMUNET library. Nachos is an instructional operating system developed at University of California - Berkeley. The current version is 3.4 which was released in late 1995. The Nachos system provides a thread package that can create, schedule, and execute user defined threads.
Reference: [14] <author> R.H.B. Netzer and B.P. </author> <title> Miller,"Optimal Tracing and Replay for Debugging Message-Passing Parallel Programs", </title> <booktitle> Proceedings of the Supercomputing'92, </booktitle> <month> November </month> <year> 1992, </year> <month> 15 </month>
Reference-contexts: Damodaran-Kamal and Francioni cited three strategies for detecting non-determinism in their work [4], compile time analysis (example:[1]), which is done before the program execution and is independent of input data, postmortem trace analysis (example:[9]), which analyzes program trace after execution using various software techniques, and on-the-fly mechanism (example: <ref> [10, 14] </ref>), which makes decision about what to trace and record references at the run time. 2.2 Works in Network Interface Emulation Our research is similar to Xmdb in nature, that is, replacing the network interface by a user program so the user can control the inter-process communications.
Reference: [15] <author> Cherri M. Pancake and Robert H. B. Netzer, </author> <title> A Bibliography of Parallel Debuggers, </title> <note> 1993 Edition, ftp://ftp.cs.orst.edu/pub/pancake/debug </note>
Reference-contexts: Section 5 describes some of the implementation issues, followed by concluding remarks in Section 6. 2 2 Related Works 2.1 Works in Parallel and Distributed Debugging A large amount of literature is available concerning general issues of debugging in parallel and distributed programming environment <ref> [15] </ref>. Debuggers can be used for different purposes such as ensuring the correctness of a program and examing the performance of a program. The ones used to find logical errors usually have to support interactive execution mode; the ones used to tune performance often provide tracing capability.
Reference: [16] <author> C.A. Thekkath, T.D. Nguyen, E. Moy, E.D. Lazowska, </author> <title> Implementing Network Protocol at User Level, </title> <type> Technical Report 93-03-01, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> Mar </month> <year> 1993 </year>
Reference-contexts: With this implementation, the code can be modified so that the network traffic can be controlled and monitored and serve the purpose of debugging. A similar concept but different implementation was done at the University of Washington <ref> [16] </ref>, which supports user level protocol. Multiple protocols can co-exist. Similar to the work of x-kernel, the code can be modified to support the debug of distributed programming. NEST [6] is a network simulation tool.
References-found: 16

