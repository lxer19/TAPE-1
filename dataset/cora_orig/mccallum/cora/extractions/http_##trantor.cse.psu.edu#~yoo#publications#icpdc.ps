URL: http://trantor.cse.psu.edu/~yoo/publications/icpdc.ps
Refering-URL: http://trantor.cse.psu.edu/~yoo/research.html
Root-URL: http://www.cse.psu.edu
Email: E-mail: fyoo j dasg@cse.psu.edu  
Title: A Performance Modeling Technique for Mesh-Connected Multicomputers  
Author: Byung S. Yoo and Chita R. Das 
Address: Park, PA 16802  
Affiliation: Department of Computer Science and Engineering The Pennsylvania State University University  
Abstract: Modeling the performance of space-shared multicomputers is a non-trivial task mainly due to difficulty in modeling the effect of external fragmentation on system performance. Mesh-connected multicomputers are hard to model in particular because of great variance in job sizes. Therefore, researchers have relied on simulation method to evaluate the mesh performance. We propose a novel modeling technique called hybrid method in this paper. The proposed technique utilizes simulation method to estimate the capacity of a system. Then, a queueing model with multiple servers is constructed using the system capacity as the number of servers in the queueing system. The technique is validated through simulation experiments. The results reveal that the hybrid method provides very close estimation of the mesh performance with very little overhead. The proposed technique can also be used for performance modeling of other multicomputers with different topologies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Introduction to CSIM17 for C Programmers, Mesquite Software, Inc., </institution> <year> 1994. </year> <month> 13 </month>
Reference-contexts: Meshes of different sizes are simulated for various workload parameters. Hypercubes are also simulated to verify that the proposed modeling approach can be used for performance modeling of multicomputers with different topologies. CSIM simulation package <ref> [1] </ref> is used to write the simulators.
Reference: [2] <author> M. S. Chen and K. G. Shin, </author> <title> "Processor Allocation in an N-Cube Multiprocessor Using Gray Code," </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. 36, </volume> <pages> pp. 1396-1407, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: However, once the value of the capacity, m, is obtained, these different systems can be abstracted as a service center with m servers and hence can be easily modeled. For instance, a hypercube system using the gray code allocation algorithm <ref> [2] </ref> with a uniform job size distribution or a k-ary n-cube using the paging scheme [17] with a normal job size distribution can be easily modeled with the proposed hybrid method. <p> Next, the performance of 8- and 12-dimensional hypercubes is modeled using the hybrid approach to show that the proposed approach can also be applied to modeling systems with different topologies. The results obtained from analysis are compared to the simulation results in Fig. 5. The buddy allocation algorithm <ref> [2, 6] </ref> is used in this experiment.
Reference: [3] <author> P. J. Chuang and N. F. Tzeng, </author> <title> "An Efficient Submesh Allocation Strategy for Mesh Computer Systems," </title> <booktitle> Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 256-263, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [4] <author> J. Ding and L. N. Bhuyan, </author> <title> "An Adaptive Submesh Allocation Strategy for Two-Dimensional Mesh Connected Systems," </title> <booktitle> Proc. Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pp. 193-200, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [5] <author> R. Jain, </author> <title> The Art of Computer Systems Performance Analysis, </title> <publisher> Johm Wiley & Sons, Inc., </publisher> <year> 1991. </year>
Reference-contexts: In the M=M=m model, the job inter-arrival time and the job service time follows an exponential distribution. The mean response time, E [r], of the system can be calculated using the following set of equations <ref> [5] </ref>.
Reference: [6] <author> K. C. Knowlton, </author> <title> "A Fast Storage Allocator," </title> <journal> Commun. ACM, </journal> <volume> Vol. 8, </volume> <pages> pp. 623-625, </pages> <month> Oct. </month> <year> 1965. </year>
Reference-contexts: Next, the performance of 8- and 12-dimensional hypercubes is modeled using the hybrid approach to show that the proposed approach can also be applied to modeling systems with different topologies. The results obtained from analysis are compared to the simulation results in Fig. 5. The buddy allocation algorithm <ref> [2, 6] </ref> is used in this experiment.
Reference: [7] <author> K. Li and K. H. Cheng, </author> <title> "A Two Dimensional Buddy System for Dynamic Resource Allocation in A Partitionable Mesh Connected System," </title> <booktitle> Proc. ACM Computer Science Conf., </booktitle> <pages> pp. 22-28, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [8] <author> T. Liu, W. Huang, F. Lombardi and L. N. Bhuyan, </author> <title> "A Submesh Allocation Scheme for Mesh-Connected Multiprocessor Systems," </title> <booktitle> Proc. Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pp. 159-163, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [9] <institution> MATLAB User's Guide, The MathWorks, Inc., </institution> <year> 1992. </year> <title> [10] "Paragon XP/S Product Overview," </title> <publisher> Intel Corporation, </publisher> <year> 1991. </year> <title> [11] "A Touchstone DELTA System Description," </title> <publisher> Intel Corporation, </publisher> <year> 1991. </year>
Reference-contexts: In this study, and are set to 15 and 1/1500, respectively to simulate such a high load. After the capacity of the system is obtained using the equations (1) - (6) in the previous section, the MATLAB <ref> [9] </ref> package is used to facilitate the calculation of the mean response time. In the performance study, the mean job response time is obtained for varying system load (ae). The system load is defined as ae = .
Reference: [12] <author> K. S. Trivedi, </author> <title> Probability and Statistics with Reliability, Queuing, </title> <booktitle> and Computer Science Applications, </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: The external fragmentation in such systems poses a major hurdle in modeling the system performance; It violates a basic queueing system assumption that a job must be serviced when there is an available server <ref> [12] </ref>. In other words, a processor must not be idle when there is a job waiting in the queue. Because of this restriction, researchers have conducted simulation experiments to evaluate the performance of the mesh systems. <p> That is, if we can calculate the capacity of a system, m, then we can model the system performance 4 by using any queueing model with finite number of servers (m). For instance, M=M=m and M=G=m queueing models <ref> [12] </ref> can be used for different job service time distribution. The modeling process becomes trivial now with this approach because only those parameters pertaining to the system density need to be considered. Two parameters pertaining to the system density are system size and job size distribution.
Reference: [13] <author> D. Das Sharma and D. K. Pradhan, </author> <title> "A Fast and Efficient Strategy for Submesh Allocation in Mesh-Connected Parallel Computers," </title> <booktitle> Proc. 5th IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> pp. 682-689, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [14] <author> J. Upadhyay and P. Mohapatra, </author> <title> "An Efficient Processor Allocation Scheme for Mesh Connected Parallel Computers," </title> <booktitle> Proc. 7th IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> PP. 196-203, </pages> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [15] <author> B. S. Yoo, C. R. Das and C. Yu, </author> <title> "Processor Management Techniques for Mesh-Connected Multiprocessors," </title> <booktitle> Proc. Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pp. 105-112, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [16] <author> B. S. Yoo and C. R. Das, </author> <title> "A Good Processor Management Scheme = Fast Allocation + Efficient Scheduling," </title> <booktitle> to appear in Proc. Int'l Conf. on Parallel Processing, </booktitle> <month> Aug. </month> <year> 1997. </year> <month> 14 </month>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [17] <author> B. S. Yoo and C. R. Das, </author> <title> "A Fast and Efficient Processor Management Scheme for k-ary n-cubes," </title> <note> submitted to Journal of Parallel and Distributed Computing. </note>
Reference-contexts: The proposed approach utilizes the system density to model the performance of space-shared meshes. The system density is defined as the number of jobs running on a system in a given condition <ref> [17] </ref>. When the load to the system is light, there are not many jobs to run, and therefore, the density of the system is also low. The system density increases as the system load increases. <p> For instance, a hypercube system using the gray code allocation algorithm [2] with a uniform job size distribution or a k-ary n-cube using the paging scheme <ref> [17] </ref> with a normal job size distribution can be easily modeled with the proposed hybrid method. Using the fact that the system density remains constant once it reaches its maximum, we obtain system capacity by simulating the system under very high load.
Reference: [18] <author> S. M. Yoo and H. Y. Youn, </author> <title> "An Efficient Task Allocation Scheme for Two-Dimensional Mesh-Connected Systems," </title> <booktitle> Proc. Int'l. Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 501-508, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation.
Reference: [19] <author> Y. Zhu, </author> <title> "Efficient Processor Allocation Strategies for Mesh-Connected Parallel Computers," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 16, </volume> <pages> pp. 328-337, </pages> <month> Dec. </month> <year> 1992. </year> <month> 15 </month>
Reference-contexts: It is not clear which one of the two techniques is better when all of these factors are taken into account. Almost all prior investigations have used various contiguous allocation policies <ref> [3, 4, 7, 8, 13, 14, 15, 16, 18, 19] </ref>. In space-shared mesh-connected multicomputers with contiguous allocation, external fragmentation is inevitable due to the nature of contiguous allocation. <p> Two simple submesh allocation algorithms are employed: the first fit (FF) <ref> [19] </ref> and the random allocation algorithms. The purpose of conducting the experiments for the different allocation schemes is to show the versatility of the proposed modeling technique. The FF algorithm allocates a requesting job to the left- and upper-most available submesh.
References-found: 17

