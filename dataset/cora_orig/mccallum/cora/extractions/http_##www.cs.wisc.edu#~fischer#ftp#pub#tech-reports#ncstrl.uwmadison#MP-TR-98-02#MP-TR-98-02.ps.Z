URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/MP-TR-98-02/MP-TR-98-02.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/MP-TR-98-02/
Root-URL: http://www.cs.wisc.edu
Title: EXPRESSING COMPLEMENTARITY PROBLEMS IN AN ALGEBRAIC MODELING LANGUAGE AND COMMUNICATING THEM TO SOLVERS  
Author: MICHAEL C. FERRIS ROBERT FOURER AND DAVID M. GAY 
Keyword: Key words. complementarity, algebraic modeling languages, optimization  
Note: AMS subject classifications. 49J40, 65K10, 90C33  
Abstract: Diverse problems in optimization, engineering, and economics have natural formulations in terms of complementarity conditions, which state (in their simplest form) that either a certain nonnegative variable must be zero or a corresponding inequality must hold with equality, or both. A variety of algorithms have been devised for solving problems expressed in terms of complementarity conditions. It is thus attractive to consider extending algebraic modeling languages, which are widely used for sending ordinary equations and inequality constraints to solvers, so that they can express complementarity problems directly. We describe an extension to the AMPL modeling language that can express the most common complementarity conditions in a concise and flexible way, through the introduction of a single new "complements" operator. We present details of an efficient implementation that incorporates an augmented presolve phase to simplify complementarity problems, and that converts complementarity conditions to a canonical form convenient for solvers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.F. Bard, </author> <title> An algorithm for solving the general bilevel programming problem. </title> <note> Mathematics of Operations Research 8 (1983) 260-272. </note>
Reference-contexts: Some generalizations of nonlinear programming, such as multilevel optimization | in which auxiliary objectives are to be minimized | may be reformulated as problems with complementarity conditions <ref> [1, 2, 3, 14] </ref>. There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs [28, 29]. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4].
Reference: [2] <author> J.F. Bard, </author> <title> Optimality conditions for the bilevel programming problem. </title> <journal> Naval Research Logistics Quarterly 31 (1984) 13-26. </journal>
Reference-contexts: Some generalizations of nonlinear programming, such as multilevel optimization | in which auxiliary objectives are to be minimized | may be reformulated as problems with complementarity conditions <ref> [1, 2, 3, 14] </ref>. There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs [28, 29]. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4].
Reference: [3] <author> J.F. Bard, </author> <title> Convex two-level optimization. </title> <note> Mathematical Programming 40 (1988) 15-27. </note>
Reference-contexts: Some generalizations of nonlinear programming, such as multilevel optimization | in which auxiliary objectives are to be minimized | may be reformulated as problems with complementarity conditions <ref> [1, 2, 3, 14] </ref>. There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs [28, 29]. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4].
Reference: [4] <author> S.C. Billups, S.P. Dirkse and M.C. Ferris, </author> <title> A comparison of large scale mixed complementarity problem solvers. </title> <note> Computational Optimization and Applications 7 (1997) 3-25. </note>
Reference-contexts: There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs [28, 29]. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems <ref> [4] </ref>. Modelers currently have a choice of robust and efficient implementations such as MILES [32] and PATH [12, 16]. Recent research in this area can be divided into two general algorithmic approaches [4]. <p> Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems <ref> [4] </ref>. Modelers currently have a choice of robust and efficient implementations such as MILES [32] and PATH [12, 16]. Recent research in this area can be divided into two general algorithmic approaches [4]. One approach transforms complementarity problems so that they can be solved using existing methods for differentiable optimization or equation-solving. The other generalizes existing methods | including Newton-type methods, path search methods, projection and proximal methods, and interior-point methods | to apply to complementarity problems of certain kinds.
Reference: [5] <author> J.J. Bisschop and R. Entriken, AIMMS: </author> <title> The Modeling System. Paragon Decision Technology (1993). </title>
Reference-contexts: Algebraic languages, such as AMPL, AIMMS <ref> [5] </ref>, GAMS [6, 8], and LINGO [34], are currently the most popular type of modeling language for describing linear and nonlinear optimization problems. With the specification of the objective omitted, algebraic modeling languages are equally useful for describing problems of finding feasible solutions to systems of equality and inequality constraints.
Reference: [6] <author> J. Bisschop and A. Meeraus, </author> <title> On the development of a general algebraic modeling system in a strategic planning environment. </title> <note> Mathematical Programming Study 20 (1982) 1-29. </note>
Reference-contexts: Algebraic languages, such as AMPL, AIMMS [5], GAMS <ref> [6, 8] </ref>, and LINGO [34], are currently the most popular type of modeling language for describing linear and nonlinear optimization problems. With the specification of the objective omitted, algebraic modeling languages are equally useful for describing problems of finding feasible solutions to systems of equality and inequality constraints. <p> Some assistance may be provided by routines that test functions for desirable properties, but they are typically incorporated into individual solvers or related analysis tools such as MProbe [9]. 3.2. Modeling language representations. The GAMS modeling language <ref> [6, 8] </ref> was the first (to our knowledge) to provide for specification of complementarity problems. As explained in [33], GAMS does not express complementarity through any modification to its constraint syntax, but rather by an extension to its model-defining statement.
Reference: [7] <author> A.L. Brearley, G. Mitra and H.P. Williams, </author> <title> Analysis of mathematical programming problems prior to applying the simplex method. </title> <note> Mathematical Programming 8 (1975) 54-83. </note>
Reference-contexts: In light of this and similar examples, we have decided that the drawbacks of having a primitive complements operator are greatly outweighed by the advantages. 5. Extending presolve. Often it is worthwhile to simplify an optimization problem before sending it to a solver. Brearley, Mitra and Williams <ref> [7] </ref> describe a set of simplification techniques based on iteratively tightening the bounds on variables and constraint expressions. These "presolve" techniques have been found to work well for linear programs, and are provided as an option by many commercial linear programming solvers. <p> These "presolve" techniques have been found to work well for linear programs, and are provided as an option by many commercial linear programming solvers. The AMPL modeling language processor also incorporates a primal presolve phase [20] that applies the ideas of <ref> [7] </ref> to linear constraints. (Nonlinearities are handled, but in a naive way. Because AMPL may send several objectives to the solver, we have not yet exploited the opportunities described in [7] to use dual information.) An integrated presolver is useful to a modeling language system in several respects. <p> The AMPL modeling language processor also incorporates a primal presolve phase [20] that applies the ideas of <ref> [7] </ref> to linear constraints. (Nonlinearities are handled, but in a naive way. Because AMPL may send several objectives to the solver, we have not yet exploited the opportunities described in [7] to use dual information.) An integrated presolver is useful to a modeling language system in several respects. By identifying constraints involving only one variable, the presolver makes it irrelevant whether one states bounds on a variable in the variable's declaration or in a separate constraint declaration.
Reference: [8] <author> A. Brooke, D. Kendrick and A. Meeraus, </author> <title> GAMS: A User's Guide, Release 2.25. </title> <publisher> Scientific Press/Duxbury Press (1992). </publisher>
Reference-contexts: Algebraic languages, such as AMPL, AIMMS [5], GAMS <ref> [6, 8] </ref>, and LINGO [34], are currently the most popular type of modeling language for describing linear and nonlinear optimization problems. With the specification of the objective omitted, algebraic modeling languages are equally useful for describing problems of finding feasible solutions to systems of equality and inequality constraints. <p> Some assistance may be provided by routines that test functions for desirable properties, but they are typically incorporated into individual solvers or related analysis tools such as MProbe [9]. 3.2. Modeling language representations. The GAMS modeling language <ref> [6, 8] </ref> was the first (to our knowledge) to provide for specification of complementarity problems. As explained in [33], GAMS does not express complementarity through any modification to its constraint syntax, but rather by an extension to its model-defining statement.
Reference: [9] <author> J.W. Chinneck, "MProbe: </author> <title> Software for exploring nonlinear models." </title> <note> Presented at CORS '97, Ottawa, May 26-28, and at Optimization Days 1997, Montreal, May 12-14. See also http://www.sce.carleton.ca/faculty/chinneck/mprobe.html. 18 M.C. </note> <author> FERRIS, R. FOURER, </author> <title> AND D.M. </title> <type> GAY </type>
Reference-contexts: Some assistance may be provided by routines that test functions for desirable properties, but they are typically incorporated into individual solvers or related analysis tools such as MProbe <ref> [9] </ref>. 3.2. Modeling language representations. The GAMS modeling language [6, 8] was the first (to our knowledge) to provide for specification of complementarity problems. As explained in [33], GAMS does not express complementarity through any modification to its constraint syntax, but rather by an extension to its model-defining statement.
Reference: [10] <author> R.W. Cottle, J.-S. Pang and R.E. Stone, </author> <title> The Linear Complementarity Problem. </title> <publisher> Academic Press (1992). </publisher>
Reference-contexts: Interest among economists in solving complementarity problems is due in part to increased use of computational general equilibrium models [33], where complementarity is used to express Walras' Law, and to the equivalence of various games to complementarity problems <ref> [10] </ref>. Some generalizations of nonlinear programming, such as multilevel optimization | in which auxiliary objectives are to be minimized | may be reformulated as problems with complementarity conditions [1, 2, 3, 14].
Reference: [11] <author> S.P. Dirkse, </author> <title> Robust solution of mixed complementarity problems. </title> <type> Mathematical Programming Technical Report 94-12, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison (1994); ftp://ftp.cs.wisc.edu/math-prog/tech-reports/94-12.ps.Z. </institution>
Reference-contexts: This distinction is hard to impress upon modelers, who see the above statements as two ways of saying the same thing. A similar complementarity representation has been implemented in <ref> [11, chapter 2] </ref> for the AMPL modeling language [22, 23], though with some differences in the nature of the extension. <p> Thus no new syntax is added to any part of the AMPL language (a key requirement of the design in <ref> [11] </ref>) and the existing AMPL translator can process the model and create a problem file in its usual format. Detection of complementarity conditions is left to the solver, or more accurately to the AMPL driver (or interface routines) for the solver.
Reference: [12] <author> S.P. Dirkse and M.C. Ferris, </author> <title> The PATH solver: a non-monotone stabilization scheme for mixed complementarity problems. </title> <note> Optimization Methods and Software 5 (1995) 123-156. </note>
Reference-contexts: Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4]. Modelers currently have a choice of robust and efficient implementations such as MILES [32] and PATH <ref> [12, 16] </ref>. Recent research in this area can be divided into two general algorithmic approaches [4]. One approach transforms complementarity problems so that they can be solved using existing methods for differentiable optimization or equation-solving. <p> All of AMPL's transformations to canonical form preserve the property of monotonicity described in x3.1, ensuring that the complementarity problem sent to a solver will tend to be as well behaved as the problem originally formulated by the modeler. 6.2. Interface to PATH. Some current solvers, such as PATH <ref> [12, 16] </ref>, want to see only complementarity conditions.
Reference: [13] <author> S.P. Dirkse and M.C. Ferris, MCPLIB: </author> <title> a collection of nonlinear mixed complementarity problems. </title> <note> Optimization Methods and Software 5 (1995) 319-345. See also ftp:// ftp.cs.wisc.edu/math-prog/mcplib/. </note>
Reference-contexts: The list of constraints in its model statement is generalized to allow the specification of complementary constraint-variable pairs, as in the following example from pies.gms in MCPLIB <ref> [13] </ref>: model pies / delc.c, delo.o, delct.ct, delot.ot, dellt.lt, delht.ht, dembal.p, cmbal.cv, ombal.ov, lmbal.lv, hmbal.hv, ruse.mu /; The specification delc.c, for example, indicates that the constraints delc, delc (creg,ctyp) .. ccost (creg,ctyp) + sum (R, cruse (R,creg,ctyp) * mu (R) =g= cv (creg); are complementary to the variables c having lower <p> Illustrations in this section are taken from pies.mod, the previous GAMS example's AMPL counterpart, which is shown in Figures 4.1 and 4.2. Additional AMPL complementarity models and corresponding data files can be found in MCPLIB <ref> [13] </ref> and at http://www.ampl.com/ampl/NEW/COMPLEMENT/. 4.1. Design specifics. The key to our design is the realization that the different complementarity forms (3.1), (3.2) and (3.3) have the same general structure. <p> Munson [private communication] and called munson1.mod in MCPLIB <ref> [13] </ref>. The first inequalities in the complementarity constraints imply that all the variables are nonnegative. Then the second constraint in f3 must always be slack, which implies that x3 = 0, whence the second constraint in f2 must always be slack, which implies that x2 = 0. <p> Instructions and C source for this driver are freely available from ftp://netlib.bell-labs.com/netlib/ampl/solvers/path. Table 6.1 shows the results of running path on some AMPL problems from MC-PLIB <ref> [13] </ref>. Certain problems are supplied with several starting guesses, as distinguished in the start column. Results are given both with ("yes") and without ("no") deduction of bounds by AMPL's presolver, in the two cases (choi and pies) where presolving makes a difference.
Reference: [14] <author> S.P. Dirkse and M.C. Ferris, </author> <title> Modeling and solution environments for MPEC: GAMS & MATLAB. In Nonsmooth, Piecewise Smooth, Semismooth and Smoothing Methods, </title> <editor> M. Fukishima and L. Qi, eds., </editor> <address> Kluwer (1998). </address> <note> See also ftp://ftp.cs.wisc.edu/math-prog/ tech-reports/97-09.ps.Z. </note>
Reference-contexts: Some generalizations of nonlinear programming, such as multilevel optimization | in which auxiliary objectives are to be minimized | may be reformulated as problems with complementarity conditions <ref> [1, 2, 3, 14] </ref>. There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs [28, 29]. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4].
Reference: [15] <author> S.P. Dirkse, M.C. Ferris, P.V. Preckel and T.F. Rutherford, </author> <title> The GAMS callable program library for variational and complementarity solvers. </title> <type> Mathematical Programming Technical Report 94-07, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison (1994); ftp://ftp.cs.wisc.edu/math-prog/tech-reports/94-07.ps.Z. </institution>
Reference: [16] <author> M.C. Ferris, and T.S. Munson, </author> <title> Interfaces to PATH 3.0: design, implementation and usage. </title> <type> Mathematical Programming Technical Report 97-12, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison (1994); ftp://ftp.cs.wisc.edu/math-prog/tech-reports/ 97-12.ps.Z. </institution> <note> Forthcoming in Computational Optimization and Applications. </note>
Reference-contexts: Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4]. Modelers currently have a choice of robust and efficient implementations such as MILES [32] and PATH <ref> [12, 16] </ref>. Recent research in this area can be divided into two general algorithmic approaches [4]. One approach transforms complementarity problems so that they can be solved using existing methods for differentiable optimization or equation-solving. <p> All of AMPL's transformations to canonical form preserve the property of monotonicity described in x3.1, ensuring that the complementarity problem sent to a solver will tend to be as well behaved as the problem originally formulated by the modeler. 6.2. Interface to PATH. Some current solvers, such as PATH <ref> [12, 16] </ref>, want to see only complementarity conditions.
Reference: [17] <author> M.C. Ferris and J.-S. Pang, </author> <title> Complementarity and Variational Problems: State of the Art. </title> <note> SIAM (1997). </note>
Reference-contexts: Background. The significance of our topic stems from the existence of applications and algorithms for complementarity problems, together with modeling languages capable of expressing such problems. We begin by briefly reviewing each of these areas. 2.1. Applications. Complementarity relations arise in a variety of engineering and economics applications <ref> [17, 18, 26] </ref>, most commonly to express an equilibrium of quantities such as forces or prices. One standard application in engineering arises in contact mechanics, where complementarity expresses the fact that friction occurs only when two bodies are in contact. <p> In particular, many standard techniques have been extended to deal with the special forms of nonsmoothness that naturally appear when formulating complementarity problems. No comprehensive survey of algorithms for complementarity problems is currently available, but extensive references to algorithms can be found in <ref> [17, 18, 26] </ref>. 2.3. Modeling languages. Constructing problem descriptions suitable for solvers is a substantial task that can easily consume more time and expense than finding EXPRESSING COMPLEMENTARITY PROBLEMS 3 problem solutions. Modeling languages have become a popular means of streamlining this task.
Reference: [18] <author> M.C. Ferris and J.-S. Pang, </author> <title> Engineering and economic applications of complementarity problems. </title> <note> SIAM Review 39 (1997) 669-713. </note>
Reference-contexts: Background. The significance of our topic stems from the existence of applications and algorithms for complementarity problems, together with modeling languages capable of expressing such problems. We begin by briefly reviewing each of these areas. 2.1. Applications. Complementarity relations arise in a variety of engineering and economics applications <ref> [17, 18, 26] </ref>, most commonly to express an equilibrium of quantities such as forces or prices. One standard application in engineering arises in contact mechanics, where complementarity expresses the fact that friction occurs only when two bodies are in contact. <p> One standard application in engineering arises in contact mechanics, where complementarity expresses the fact that friction occurs only when two bodies are in contact. Other applications are found in structural mechanics, structural design, traffic equilibrium and optimal control <ref> [18] </ref>. Interest among economists in solving complementarity problems is due in part to increased use of computational general equilibrium models [33], where complementarity is used to express Walras' Law, and to the equivalence of various games to complementarity problems [10]. <p> In particular, many standard techniques have been extended to deal with the special forms of nonsmoothness that naturally appear when formulating complementarity problems. No comprehensive survey of algorithms for complementarity problems is currently available, but extensive references to algorithms can be found in <ref> [17, 18, 26] </ref>. 2.3. Modeling languages. Constructing problem descriptions suitable for solvers is a substantial task that can easily consume more time and expense than finding EXPRESSING COMPLEMENTARITY PROBLEMS 3 problem solutions. Modeling languages have become a popular means of streamlining this task.
Reference: [19] <author> R. Fourer, </author> <title> Extending a general-purpose algebraic modeling language to combinatorial optimization: a logic programming approach. In Advances in Computational and Stochastic Optimization, Logic Programming, and Heuristic Search: Interfaces in Computer Science and Operations Research, D.L. </title> <editor> Woodruff, ed., </editor> <publisher> Kluwer Academic Publishers (1998) 31-74. </publisher>
Reference-contexts: The design of any such extension involves many tradeoffs between the goal of making the language natural and convenient for people, and the requirement that the language be processed with reasonable efficiency by a computer system. We have previously described the tradeoffs involved in various extensions to AMPL <ref> [19, 21] </ref>; similar considerations have influenced our extensions for complementarity, as we next explain. 3. Design issues. To motivate our choice of a modeling language representation for complementarity conditions, we first describe the variety of conditions that we want the language to be able to represent.
Reference: [20] <author> R. Fourer and D.M. Gay, </author> <title> Experience with a primal presolve algorithm. In Large Scale Optimization: State of the Art, W.W. Hager, </title> <editor> D.W. Hearn and P.M. Pardalos, eds., </editor> <publisher> Kluwer Academic Publishers (1994) 135-154. </publisher>
Reference-contexts: These "presolve" techniques have been found to work well for linear programs, and are provided as an option by many commercial linear programming solvers. The AMPL modeling language processor also incorporates a primal presolve phase <ref> [20] </ref> that applies the ideas of [7] to linear constraints. (Nonlinearities are handled, but in a naive way.
Reference: [21] <author> R. Fourer and D.M. Gay, </author> <title> Expressing special structures in an algebraic modeling language for mathematical programming. </title> <note> ORSA Journal on Computing 7 (1995) 166-190. </note>
Reference-contexts: The design of any such extension involves many tradeoffs between the goal of making the language natural and convenient for people, and the requirement that the language be processed with reasonable efficiency by a computer system. We have previously described the tradeoffs involved in various extensions to AMPL <ref> [19, 21] </ref>; similar considerations have influenced our extensions for complementarity, as we next explain. 3. Design issues. To motivate our choice of a modeling language representation for complementarity conditions, we first describe the variety of conditions that we want the language to be able to represent.
Reference: [22] <author> R. Fourer, D.M. Gay and B.W. Kernighan, </author> <title> A modeling language for mathematical programming. </title> <booktitle> Management Science 36 (1990) 519-554. </booktitle>
Reference-contexts: We are concerned in particular with algebraic modeling languages, which describe expressions, equations and inequalities by use of familiar algebraic terms and operators. As an example, a collection of inequality constraints defined by P c j2M (P ju =p 0 could be transcribed to the AMPL language <ref> [22, 23] </ref> as subject to ineq1 -c in C, u in U-: sum -r in R- T [r,u] &gt;= q0 [c] * prod -j in M- (P [j,u] / p0 [j]) ** e [c,j]; or, using somewhat more mnemonic identifiers, as subject to CrudeSupply -cr in CRUDES, u in USERS-: sum <p> This distinction is hard to impress upon modelers, who see the above statements as two ways of saying the same thing. A similar complementarity representation has been implemented in [11, chapter 2] for the AMPL modeling language <ref> [22, 23] </ref>, though with some differences in the nature of the extension. Complementarity is indicated by writing a constraint in the equivalent multiplicative form x j g j (x) = 0, with bounds on the variable x j specified in the declaration for the variable.
Reference: [23] <author> R. Fourer, D.M. Gay and B.W. Kernighan, AMPL: </author> <title> A Modeling Language for Mathematical Programming. </title> <publisher> Scientific Press/Duxbury Press (1993). </publisher>
Reference-contexts: We are concerned in particular with algebraic modeling languages, which describe expressions, equations and inequalities by use of familiar algebraic terms and operators. As an example, a collection of inequality constraints defined by P c j2M (P ju =p 0 could be transcribed to the AMPL language <ref> [22, 23] </ref> as subject to ineq1 -c in C, u in U-: sum -r in R- T [r,u] &gt;= q0 [c] * prod -j in M- (P [j,u] / p0 [j]) ** e [c,j]; or, using somewhat more mnemonic identifiers, as subject to CrudeSupply -cr in CRUDES, u in USERS-: sum <p> This distinction is hard to impress upon modelers, who see the above statements as two ways of saying the same thing. A similar complementarity representation has been implemented in [11, chapter 2] for the AMPL modeling language <ref> [22, 23] </ref>, though with some differences in the nature of the extension. Complementarity is indicated by writing a constraint in the equivalent multiplicative form x j g j (x) = 0, with bounds on the variable x j specified in the declaration for the variable.
Reference: [24] <author> D.M. Gay, </author> <title> Hooking your solver to AMPL. </title> <type> Technical Report 97-4-06, </type> <institution> Computing Sciences Research Center, Bell Laboratories, </institution> <note> Lucent Technologies (1997); http://www.ampl.com/ ampl/REFS/hooking2.ps.gz. </note>
Reference-contexts: This canonical form has the advantage of allowing the left operand and right operand of complements to be communicated to the solver as an ordinary constraint and an ordinary variable, respectively, as described in <ref> [24] </ref>. The complementarity extension can then be implemented by sending the solver only one new array, cvar, which pairs constraints with variables. <p> The nfunc and ngrad columns report the numbers of function and gradient (Jacobian) evaluations. 6.3. Interface to MATLAB. Often it is convenient to use MATLAB [25, 30] implementations to experiment with algorithms. The examples associated with <ref> [24] </ref> include source for MATLAB mex functions that provide various information about optimization problems expressed in AMPL, such as dimensions, bounds, starting guesses, and function, gradient (or Jacobian matrix), and Lagrangian Hessian values.
Reference: [25] <author> D.C. Hanselman and B.C. Littlefield, </author> <title> Mastering MATLAB 5: A Comprehensive Tutorial and Reference. </title> <publisher> Prentice Hall (1997). </publisher>
Reference-contexts: The nfunc and ngrad columns report the numbers of function and gradient (Jacobian) evaluations. 6.3. Interface to MATLAB. Often it is convenient to use MATLAB <ref> [25, 30] </ref> implementations to experiment with algorithms. The examples associated with [24] include source for MATLAB mex functions that provide various information about optimization problems expressed in AMPL, such as dimensions, bounds, starting guesses, and function, gradient (or Jacobian matrix), and Lagrangian Hessian values.
Reference: [26] <author> P.T. Harker and J.-S. Pang, </author> <title> Finite-dimensional variational inequality and nonlinear complementarity problems: a survey of theory, algorithms and applications. </title> <note> Mathematical Programming 48 (1990) 161-220. </note>
Reference-contexts: Background. The significance of our topic stems from the existence of applications and algorithms for complementarity problems, together with modeling languages capable of expressing such problems. We begin by briefly reviewing each of these areas. 2.1. Applications. Complementarity relations arise in a variety of engineering and economics applications <ref> [17, 18, 26] </ref>, most commonly to express an equilibrium of quantities such as forces or prices. One standard application in engineering arises in contact mechanics, where complementarity expresses the fact that friction occurs only when two bodies are in contact. <p> In particular, many standard techniques have been extended to deal with the special forms of nonsmoothness that naturally appear when formulating complementarity problems. No comprehensive survey of algorithms for complementarity problems is currently available, but extensive references to algorithms can be found in <ref> [17, 18, 26] </ref>. 2.3. Modeling languages. Constructing problem descriptions suitable for solvers is a substantial task that can easily consume more time and expense than finding EXPRESSING COMPLEMENTARITY PROBLEMS 3 problem solutions. Modeling languages have become a popular means of streamlining this task. <p> Just as there are classes of well behaved nonlinear optimization problems that involve convex functions, for complementarity problems there is a corresponding notion of a monotone function g j , which satisfies (y x) T (g j (y) g j (x)) 0 for all x and y <ref> [26, 31] </ref>. Current modeling languages largely avoid such restrictions, however, in the interest of keeping their design simple and general.
Reference: [27] <editor> M.M. Kostreva, Elasto-hydrodynamic lubrication: </editor> <title> a non-linear complementarity problem. </title> <note> International Journal for Numerical Methods in Fluids 4 (1984) 377-397. </note>
Reference: [28] <author> Z.-Q. Luo, J.-S. Pang and D. Ralph, </author> <title> Mathematical Programs with Equilibrium Constraints. </title> <publisher> Cambridge University Press (1996). </publisher>
Reference-contexts: Some generalizations of nonlinear programming, such as multilevel optimization | in which auxiliary objectives are to be minimized | may be reformulated as problems with complementarity conditions [1, 2, 3, 14]. There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs <ref> [28, 29] </ref>. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4]. Modelers currently have a choice of robust and efficient implementations such as MILES [32] and PATH [12, 16]. Recent research in this area can be divided into two general algorithmic approaches [4].
Reference: [29] <author> Z.-Q. Luo, J.-S. Pang, D. Ralph and S.-Q. Wu, </author> <title> Exact penalization and stationarity conditions of mathematical programs with equilibrium constraints. </title> <note> Mathematical Programming 75 (1996) 19-76. </note>
Reference-contexts: Some generalizations of nonlinear programming, such as multilevel optimization | in which auxiliary objectives are to be minimized | may be reformulated as problems with complementarity conditions [1, 2, 3, 14]. There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs <ref> [28, 29] </ref>. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4]. Modelers currently have a choice of robust and efficient implementations such as MILES [32] and PATH [12, 16]. Recent research in this area can be divided into two general algorithmic approaches [4].
Reference: [30] <author> D. Redfern and C. Campbell, </author> <title> MATLAB Handbook. </title> <publisher> Springer Verlag (1998). </publisher>
Reference-contexts: The nfunc and ngrad columns report the numbers of function and gradient (Jacobian) evaluations. 6.3. Interface to MATLAB. Often it is convenient to use MATLAB <ref> [25, 30] </ref> implementations to experiment with algorithms. The examples associated with [24] include source for MATLAB mex functions that provide various information about optimization problems expressed in AMPL, such as dimensions, bounds, starting guesses, and function, gradient (or Jacobian matrix), and Lagrangian Hessian values.
Reference: [31] <author> R.T. Rockafellar, </author> <title> Convex Analysis. </title> <publisher> Princeton University Press (1970). </publisher>
Reference-contexts: Just as there are classes of well behaved nonlinear optimization problems that involve convex functions, for complementarity problems there is a corresponding notion of a monotone function g j , which satisfies (y x) T (g j (y) g j (x)) 0 for all x and y <ref> [26, 31] </ref>. Current modeling languages largely avoid such restrictions, however, in the interest of keeping their design simple and general.
Reference: [32] <author> T.F. Rutherford, MILES: </author> <title> a Mixed Inequality and nonLinear Equation Solver. </title> <type> Working paper, </type> <institution> Dept. of Economics, University of Colorado (1993); http://robles.colorado.edu/ ~tomruth/milesdoc/milesdoc.htm. </institution>
Reference-contexts: There is a growing literature on these and other mathematical programming problems with equilibrium constraints, or MPECs [28, 29]. 2.2. Solvers. The demands of applications have motivated a variety of algorithms for complementarity problems [4]. Modelers currently have a choice of robust and efficient implementations such as MILES <ref> [32] </ref> and PATH [12, 16]. Recent research in this area can be divided into two general algorithmic approaches [4]. One approach transforms complementarity problems so that they can be solved using existing methods for differentiable optimization or equation-solving.
Reference: [33] <author> T.F. Rutherford, </author> <title> Extensions of GAMS for complementarity problems arising in applied economic analysis. </title> <journal> Journal of Economic Dynamics & Control 19 (1995) 1299-1324. </journal>
Reference-contexts: Other applications are found in structural mechanics, structural design, traffic equilibrium and optimal control [18]. Interest among economists in solving complementarity problems is due in part to increased use of computational general equilibrium models <ref> [33] </ref>, where complementarity is used to express Walras' Law, and to the equivalence of various games to complementarity problems [10]. <p> Modeling language representations. The GAMS modeling language [6, 8] was the first (to our knowledge) to provide for specification of complementarity problems. As explained in <ref> [33] </ref>, GAMS does not express complementarity through any modification to its constraint syntax, but rather by an extension to its model-defining statement.
Reference: [34] <author> L. </author> <title> Schrage, Optimization Modeling with LINGO. LINDO Systems, </title> <publisher> Inc. </publisher> <year> (1998). </year>
Reference-contexts: Algebraic languages, such as AMPL, AIMMS [5], GAMS [6, 8], and LINGO <ref> [34] </ref>, are currently the most popular type of modeling language for describing linear and nonlinear optimization problems. With the specification of the objective omitted, algebraic modeling languages are equally useful for describing problems of finding feasible solutions to systems of equality and inequality constraints.
References-found: 34

