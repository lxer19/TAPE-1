URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-93-9-2.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-93-9-2.html
Root-URL: http://www.cs.man.ac.uk
Title: A Graph-Based Approach To Resolution In Temporal Logic  
Author: Clare Dixon 
Affiliation: Computer Science University of Manchester  
Pubnum: Technical Report UMCS-93-9-2  
Abstract-found: 0
Intro-found: 1
Reference: [Aba88] <author> Martn Abadi. </author> <title> The Power of Temporal Proofs. </title> <type> Technical Report 30, </type> <institution> DEC Systems Research Center, Palo Alto, California, </institution> <month> August </month> <year> 1988. </year>
Reference-contexts: The theorem prover has been developed for Propositional Temporal Logic only, and extensions for first order logic could be investigated. A first order translation to SNF exists [Fis92a] and a program to perform the translation has been prototyped. Note, however, that full First-Order Temporal Logic is undecidable <ref> [Hus87, Aba88] </ref>. In spite of this, it may be possible to find subsets of First-Order Temporal Logic to which this form of temporal resolution can be successfully applied. 61 Efficient translation to normal form. The development of an efficient translation to normal form could be investigated for PTL.
Reference: [AHU74] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: As a semantic model for temporal logic formulae can be represented as a graph, graphs 10 will be used to identify the rules that together imply the -formulae required for the tem-poral resolution rule. Definitions of standard graphs, and basic search strategies may be found in <ref> [AHU74, RK91] </ref>. Descriptions of terminology relating to hypergraphs, their definitions, algorithms upon them, and their applications many be found in [GLNP90, Nil82]. 1.6 Description of the Dissertation Chapter 2 introduces the logic used, Propositional Temporal Logic, and gives an overview of the Temporal Resolution method. <p> Having represented the rules as a standard graph, strongly-connected components can be found by applying Tarjan's algorithm <ref> [AHU74] </ref>. The rules that have been used to create the SCC of the graph will be the set which imply p and can be used to apply the Temporal Resolution Rule. <p> As the hypergraph will be more complicated than a standard graph, and therefore the notion of a path through the graph also more complex, the search mechanism to detect strongly-connected components is likely to be more expensive than for standard graphs, which has been shown to be linear <ref> [AHU74] </ref>.
Reference: [AM89] <author> M. Abadi and Z. Manna. </author> <title> Temporal Logic Programming. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 8: </volume> <pages> 277-295, </pages> <year> 1989. </year>
Reference-contexts: Application to execution. Just as the resolution method for classical logic has been used to develop the logic programming language PROLOG, so the resolution method described above may be used to develop a temporal logic programming language. Such a language promises to be more efficient than similar attempts <ref> [AM89] </ref> as it would be based on clausal, rather than non-clausal temporal resolution. The normal form required for the resolution procedure, SNF, is derived from that developed for use in METATEM [BFG + 89], which is itself an executable temporal logic.
Reference: [AM90] <author> M. Abadi and Z. Manna. </author> <title> Nonclausal Deduction in First-Order Temporal Logic. </title> <journal> ACM Journal, </journal> <volume> 37(2) </volume> <pages> 279-317, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method [Wol83, Gou84]. Resolution methods have been developed for temporal logics based on both clausal forms [CdC84] and non-clausal forms <ref> [AM90] </ref>. In this dissertation an implementation of the resolution method for temporal logics described by Fisher [Fis91, Fis92b, Fis93] is described. This clausal resolution method incorporates classical resolution, together with a new type of temporal resolution rule. <p> A larger number of resolution rules may need to be defined than are necessary in clausal methods, to enable their application to any formula within the logic. A non-clausal resolution method for classical logics is described in [Mur82]. 57 Non-clausal Resolution A non-clausal temporal resolution method is described in <ref> [AM90] </ref>. The method is defined for Propositional Temporal Logic (PTL) with operators , , , W , P, (where uPv is described as meaning u precedes v, and in the original paper weak until, or unless is denoted as U ) and First Order Temporal Logic.
Reference: [Bar87] <author> Howard Barringer. </author> <title> Using Temporal Logic in the Compositional Specification of Concurrent Systems. </title> <editor> In A. P. Galton, editor, </editor> <booktitle> Temporal Logics and their Applications, chapter 2, </booktitle> <pages> pages 53-90. </pages> <publisher> Academic Press Inc. Limited, </publisher> <address> London, </address> <month> December </month> <year> 1987. </year>
Reference-contexts: Temporal logic, a variety of modal logic, has been used to provide a framework for specifying and verifying programs and may be regarded as classical logic extended with various modalities. The use of temporal logics for the specification of programs has been described in <ref> [Bar87] </ref>, while examples of their use in verification may be found in [MP81, Pnu81], and a survey of their use in both areas may be found in [Pnu86]. The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method [Wol83, Gou84].
Reference: [BFG + 89] <author> H. Barringer, M. Fisher, D. Gabbay, G. Gough, and R. Owens. </author> <title> METATEM: A Framework for Programming in Temporal Logic. </title> <booktitle> In Proceedings of REX Workshop on Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness, Mook, </booktitle> <address> Netherlands, </address> <month> June </month> <year> 1989. </year> <booktitle> (Published in Lecture Notes in Computer Science, </booktitle> <volume> volume 430, </volume> <publisher> Springer Verlag). </publisher>
Reference-contexts: Such a language promises to be more efficient than similar attempts [AM89] as it would be based on clausal, rather than non-clausal temporal resolution. The normal form required for the resolution procedure, SNF, is derived from that developed for use in METATEM <ref> [BFG + 89] </ref>, which is itself an executable temporal logic. The rewrite rules used to produce the normal form are derived from the work on transformation and determin-isation of METATEM programs [FN92]. The Use of Resolution Strategies.
Reference: [CdC84] <author> A. Cavali and L. Farinas del Cerro. </author> <title> A Decision Method for Linear Temporal Logic. </title> <editor> In R. E. Shostak, editor, </editor> <booktitle> Proceedings of the 7th International Conference on Automated Deduction, </booktitle> <pages> pages 113-127. </pages> <note> LNCS 170, </note> <year> 1984. </year>
Reference-contexts: The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method [Wol83, Gou84]. Resolution methods have been developed for temporal logics based on both clausal forms <ref> [CdC84] </ref> and non-clausal forms [AM90]. In this dissertation an implementation of the resolution method for temporal logics described by Fisher [Fis91, Fis92b, Fis93] is described. This clausal resolution method incorporates classical resolution, together with a new type of temporal resolution rule. <p> Descriptions of other methods for modal resolution may be found in [Min90, Ohl88], for example. Temporal Resolution A clausal resolution method for propositional temporal logic is outlined in <ref> [CdC84] </ref>. The temporal operators defined in the logic include , , and but include no past-time temporal operators. The method described rewrites formulae to a clausal form and then applies a series of temporal resolution rules.
Reference: [CL73] <author> Chin-Liang Chang and Richard Char-Tung Lee. </author> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <year> 1973. </year>
Reference-contexts: The full resolution procedure, for both propositional and first order logics, was introduced in [Rob65] and strategies to direct the application of the resolution rules have been explained in standard texts for example <ref> [CL73, Lov78, WOLB84] </ref>. Temporal logic, a variety of modal logic, has been used to provide a framework for specifying and verifying programs and may be regarded as classical logic extended with various modalities. <p> There are other strategies, see <ref> [CL73, WOLB84, Lov78] </ref> for more details. Unfortunately although these strategies may reduce the search space they may not be refutation complete. Unit, and input resolution for example are not complete however linear resolution is. <p> The Use of Resolution Strategies. The use of resolution strategies to guide the refutation in classical logics, mentioned previously in Sections 1.1 and 1.4.1, have been fully described in <ref> [CL73, WOLB84, Lov78] </ref>.
Reference: [CW91] <author> Mats Carlsson and Johan Widen. </author> <title> SICStus Prolog User's Manual. </title> <institution> Swedish Institute of Computer Science, Kista, Sweden, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: The resolution theorem prover has been implemented on Sun Workstations using SICSTUS PROLOG <ref> [CW91] </ref>. 4.2 Translation to SNF Existing sub-programs, performing the SNF translation, written in PROLOG, were available for inclusion in the complete resolution theorem prover. If the SNF translation is viewed as a set of rewrite rules, these may easily be encoded as predicates in a PROLOG program.
Reference: [dlTC90] <author> T. Boy de-la Tour and G. Chaminade. </author> <title> The Use of Renaming to Improve the Efficiency of Clausal Theorem Proving. </title> <editor> In Ph. Jorrand and V. Sgurev, editors, </editor> <booktitle> Artificial Intelligence IV: Methodology, Systems, Applications, </booktitle> <pages> pages 3-12. </pages> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <year> 1990. </year> <month> 77 </month>
Reference-contexts: A structure preserving clause form translation for propositional and first-order classical logics is defined which avoids the exponential increase in size that may occur with standard translations. This, other strategies relating to translation to clausal forms, and requirements that any good transformation should have are discussed in <ref> [dlTC90] </ref>. Such ideas could be adopted and developed for use with temporal logics, and applied before the application of the resolution step. Parallel Implementation Techniques. Improvements in efficiency may be obtained through the use of parallel techniques in various aspects of the resolution procedure.
Reference: [EdC89] <author> P. Enjalbert and L. Farinas del Cerro. </author> <title> Modal Resolution in Clausal Form. </title> <journal> Theor--etical Computer Science, </journal> <volume> 65 </volume> <pages> 1-33, </pages> <year> 1989. </year>
Reference-contexts: Modal Resolution Modal resolution based on Robinson's method for classical logic [Rob65], for various modal systems is discussed in <ref> [EdC89] </ref>. Classical logical operators are extended by the modal operators and (or for a collection of modal operators [k] and &lt; k &gt;, where for a formula A the formula &lt; k &gt; may be defined as &lt; k &gt;= [k]A).
Reference: [EH86] <author> E. A. Emerson and J. Y. Halpern. </author> <title> Sometimes and Not Never Revisited: On Branching Versus Linear Time Temporal Logic. </title> <journal> ACM Journal, </journal> <volume> 33(1) </volume> <pages> 151-178, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: A particular world has a unique past, but may have many possible futures, i.e. the forward linearity constraint imposed upon R above has been dropped. Program verification and specification techniques have been developed using both approaches, and discussion has taken place comparing the two, for example see <ref> [EH86] </ref>.
Reference: [Fis91] <author> Michael Fisher. </author> <title> A Resolution Method for Temporal Logic. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <address> Sydney, Australia, August 1991. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: Resolution methods have been developed for temporal logics based on both clausal forms [CdC84] and non-clausal forms [AM90]. In this dissertation an implementation of the resolution method for temporal logics described by Fisher <ref> [Fis91, Fis92b, Fis93] </ref> is described. This clausal resolution method incorporates classical resolution, together with a new type of temporal resolution rule. The implementation of this proof procedure has focused particularly on an efficient implementation of the application of the temporal resolution rule. <p> This chapter is a summary of the work presented in <ref> [Fis91, Fis92b, Fis93] </ref>. 2.1 Propositional Temporal Logic The logic used in this dissertation is Propositional Temporal Logic (PTL), which is based on a linear, discrete model of time with finite past and infinite future. <p> The normal form used is called Separated Normal Form (SNF) and was introduced in <ref> [Fis91] </ref> and has been extended in [FN92] and [Fis92a]. It has been shown [Gab87] that any arbitrary formula in PTL can be separated into its past, present and future-time components. It was initially from this `separation result' that SNF was derived. <p> The translation of PTL formulae into SNF will not be described here although examples of some of the rewrite rules used in the SNF translation are given in Appendix A. For full details of SNF and its derivation see <ref> [FN92, Fis91] </ref>. <p> Several areas for further work have been outlined both relating to the development of the resolution theorem prover as it has been implemented, and wider areas of related research. 64 Appendix A The SNF Translation The process of transforming formulae into SNF is explained in <ref> [Fis91, Fis92b, Fis93] </ref>. Some of the transformations, represented as rewrite rules, are shown below where P and F represent arbitrary past-time and future-time formulae respectively and w is a new proposition symbol.
Reference: [Fis92a] <author> Michael Fisher. </author> <title> A Normal Form for First-Order Temporal Formulae. </title> <booktitle> In Proceedings of Eleventh International Conference on Automated Deduction (CADE), </booktitle> <address> Saratoga Springs, New York, </address> <month> June </month> <year> 1992. </year> <booktitle> (Published in Lecture Notes in Computer Science, </booktitle> <volume> volume 607, </volume> <publisher> Springer Verlag). </publisher>
Reference-contexts: The normal form used is called Separated Normal Form (SNF) and was introduced in [Fis91] and has been extended in [FN92] and <ref> [Fis92a] </ref>. It has been shown [Gab87] that any arbitrary formula in PTL can be separated into its past, present and future-time components. It was initially from this `separation result' that SNF was derived. Formulae in SNF are of the form n ^ (P i fi F i ) . <p> The development of a first order version of the Resolution Theorem Prover. The theorem prover has been developed for Propositional Temporal Logic only, and extensions for first order logic could be investigated. A first order translation to SNF exists <ref> [Fis92a] </ref> and a program to perform the translation has been prototyped. Note, however, that full First-Order Temporal Logic is undecidable [Hus87, Aba88].
Reference: [Fis92b] <author> Michael Fisher. </author> <title> A Resolution Method for Temporal Logic. </title> <booktitle> (Notes provided for the Fourth European Summer School in Logic, Language and Information, </booktitle> <institution> University of Essex, </institution> <month> August </month> <year> 1992), 1992. </year>
Reference-contexts: Resolution methods have been developed for temporal logics based on both clausal forms [CdC84] and non-clausal forms [AM90]. In this dissertation an implementation of the resolution method for temporal logics described by Fisher <ref> [Fis91, Fis92b, Fis93] </ref> is described. This clausal resolution method incorporates classical resolution, together with a new type of temporal resolution rule. The implementation of this proof procedure has focused particularly on an efficient implementation of the application of the temporal resolution rule. <p> This chapter is a summary of the work presented in <ref> [Fis91, Fis92b, Fis93] </ref>. 2.1 Propositional Temporal Logic The logic used in this dissertation is Propositional Temporal Logic (PTL), which is based on a linear, discrete model of time with finite past and infinite future. <p> Sets of -rules may be represented directly as either a hypergraph or by combining rules in SNF together as an ordinary graph. To represent the global -rules as an ordinary graph, a 22 variant on SNF, called merged-SNF (SNF m ), mentioned in <ref> [Fis92b] </ref>, may be used. <p> Formulae presented to the SNF translator may include any of the temporal operators in PTL, and must first be negated if validity rather than unsatisfiability is to be shown. It has been shown <ref> [Fis92b] </ref>, if a formula A is satisfiable, then by anchoring it to the beginning of time i.e. ( false fi A) has no effect on its satisfiability. <p> The translation to SNF uses the renaming technique as part of its transformations <ref> [Fis92b] </ref>. 62 Applications in program/system verification. The form of temporal logic formulae represented by SNF is particularly useful for describing state-transition systems since an SNF rule (particularly a global -rule) corresponds very closely to a transition in such a system. <p> Several areas for further work have been outlined both relating to the development of the resolution theorem prover as it has been implemented, and wider areas of related research. 64 Appendix A The SNF Translation The process of transforming formulae into SNF is explained in <ref> [Fis91, Fis92b, Fis93] </ref>. Some of the transformations, represented as rewrite rules, are shown below where P and F represent arbitrary past-time and future-time formulae respectively and w is a new proposition symbol.
Reference: [Fis93] <author> Michael Fisher. </author> <title> A Clausal Resolution Method for Propositional Temporal Logic. </title> <note> (Submitted to the Journal of Logic and Computation), </note> <year> 1993. </year>
Reference-contexts: Resolution methods have been developed for temporal logics based on both clausal forms [CdC84] and non-clausal forms [AM90]. In this dissertation an implementation of the resolution method for temporal logics described by Fisher <ref> [Fis91, Fis92b, Fis93] </ref> is described. This clausal resolution method incorporates classical resolution, together with a new type of temporal resolution rule. The implementation of this proof procedure has focused particularly on an efficient implementation of the application of the temporal resolution rule. <p> This chapter is a summary of the work presented in <ref> [Fis91, Fis92b, Fis93] </ref>. 2.1 Propositional Temporal Logic The logic used in this dissertation is Propositional Temporal Logic (PTL), which is based on a linear, discrete model of time with finite past and infinite future. <p> The whole procedure will terminate on derivation of false by generation of one of the previously mentioned unsatisfiable termination formulae, or when no new resolvents may be generated from either of the resolution steps. The soundness and completeness of the set of resolution rules has been shown in <ref> [Fis93] </ref>. 20 Chapter 3 Implementing Temporal Resolution In this chapter the implementation of the resolution rule described in Chapter 2 is described. To apply the temporal resolution rule, an appropriate implicit -formula must be detected for resolution with one of the -rules. <p> Several areas for further work have been outlined both relating to the development of the resolution theorem prover as it has been implemented, and wider areas of related research. 64 Appendix A The SNF Translation The process of transforming formulae into SNF is explained in <ref> [Fis91, Fis92b, Fis93] </ref>. Some of the transformations, represented as rewrite rules, are shown below where P and F represent arbitrary past-time and future-time formulae respectively and w is a new proposition symbol.
Reference: [FN92] <author> M. Fisher and P. Noel. </author> <title> Transformation and Synthesis in METATEM Part I: Propositional METATEM. </title> <type> Technical Report UMCS-92-2-1, </type> <institution> Department of Computer Science, University of Manchester, </institution> <address> Oxford Road, Manchester M13 9PL, U.K., </address> <month> February </month> <year> 1992. </year>
Reference-contexts: The normal form used is called Separated Normal Form (SNF) and was introduced in [Fis91] and has been extended in <ref> [FN92] </ref> and [Fis92a]. It has been shown [Gab87] that any arbitrary formula in PTL can be separated into its past, present and future-time components. It was initially from this `separation result' that SNF was derived. <p> The translation of PTL formulae into SNF will not be described here although examples of some of the rewrite rules used in the SNF translation are given in Appendix A. For full details of SNF and its derivation see <ref> [FN92, Fis91] </ref>. <p> The normal form required for the resolution procedure, SNF, is derived from that developed for use in METATEM [BFG + 89], which is itself an executable temporal logic. The rewrite rules used to produce the normal form are derived from the work on transformation and determin-isation of METATEM programs <ref> [FN92] </ref>. The Use of Resolution Strategies. The use of resolution strategies to guide the refutation in classical logics, mentioned previously in Sections 1.1 and 1.4.1, have been fully described in [CL73, WOLB84, Lov78].
Reference: [Gab87] <author> Dov Gabbay. </author> <title> Declarative Past and Imperative Future: Executable Temporal Logic for Interactive Systems. </title> <editor> In B. Banieqbal, H. Barringer, and A. Pnueli, editors, </editor> <booktitle> Proceedings of Colloquium on Temporal Logic in Specification, </booktitle> <pages> pages 402-450, </pages> <address> Altrincham, U.K., </address> <year> 1987. </year> <booktitle> (Published in Lecture Notes in Computer Science, </booktitle> <volume> volume 398, </volume> <publisher> Springer Verlag). </publisher>
Reference-contexts: The normal form used is called Separated Normal Form (SNF) and was introduced in [Fis91] and has been extended in [FN92] and [Fis92a]. It has been shown <ref> [Gab87] </ref> that any arbitrary formula in PTL can be separated into its past, present and future-time components. It was initially from this `separation result' that SNF was derived. Formulae in SNF are of the form n ^ (P i fi F i ) .
Reference: [GLNP90] <author> G. Gallo, G. Longo, S. Nguyen, and S. Pallottino. </author> <title> Directed hypergraphs and applications. </title> <type> Technical Report 3/90, </type> <institution> Departmento di Informatica, Universita Degli Studi di Pisa, Pisa, Italy, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: Definitions of standard graphs, and basic search strategies may be found in [AHU74, RK91]. Descriptions of terminology relating to hypergraphs, their definitions, algorithms upon them, and their applications many be found in <ref> [GLNP90, Nil82] </ref>. 1.6 Description of the Dissertation Chapter 2 introduces the logic used, Propositional Temporal Logic, and gives an overview of the Temporal Resolution method. Chapter 3 explains the graph based approach to the implementation of the temporal resolution rule.
Reference: [Gou84] <author> G. D. Gough. </author> <title> Decision Procedures for Temporal Logic. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> October </month> <year> 1984. </year>
Reference-contexts: The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method <ref> [Wol83, Gou84] </ref>. Resolution methods have been developed for temporal logics based on both clausal forms [CdC84] and non-clausal forms [AM90]. In this dissertation an implementation of the resolution method for temporal logics described by Fisher [Fis91, Fis92b, Fis93] is described. <p> However the system includes many inference rules producing an increased search space. 5.2 Tableaux DP and DPP DP and DPP are decision procedures which have been developed and implemented, and are described in detail in <ref> [Gou84] </ref>. DP is a decision procedure for future-time temporal logics allowing classical connectives and the five future-time temporal operators described in Chapter 2. The decision procedure is based on the semantic tableau method [HC68, Smu68], and is similar to that described in [Wol83].
Reference: [HC68] <author> G. E. Hughes and M. J. Cresswell. </author> <title> An Introduction to Modal Logic. </title> <publisher> Methuen (UP), </publisher> <year> 1968. </year>
Reference-contexts: The many different forms of modal logic are dependent on the nature of the structural properties of the network. More detailed coverage of modal logics may be found in <ref> [HC68, HC84] </ref>, for example. 1.3 Temporal Logic A temporal logic can be regarded as a modal logic where the accessibility relation between worlds is interpreted in a temporal sense. <p> DP is a decision procedure for future-time temporal logics allowing classical connectives and the five future-time temporal operators described in Chapter 2. The decision procedure is based on the semantic tableau method <ref> [HC68, Smu68] </ref>, and is similar to that described in [Wol83]. Using semantic tableau methods a formula is shown to be valid if it is not possible to construct a model for . The decision procedure DP uses an algorithm to construct such a model.
Reference: [HC84] <author> G. E. Hughes and M. J. Cresswell. </author> <title> A Companion to Modal Logic. </title> <publisher> Methuen (UP), </publisher> <year> 1984. </year>
Reference-contexts: The many different forms of modal logic are dependent on the nature of the structural properties of the network. More detailed coverage of modal logics may be found in <ref> [HC68, HC84] </ref>, for example. 1.3 Temporal Logic A temporal logic can be regarded as a modal logic where the accessibility relation between worlds is interpreted in a temporal sense.
Reference: [Hus87] <author> Wolodymyr Hussak. </author> <title> Decidability in Temporal Presburger Arithmetic. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> February </month> <year> 1987. </year>
Reference-contexts: The theorem prover has been developed for Propositional Temporal Logic only, and extensions for first order logic could be investigated. A first order translation to SNF exists [Fis92a] and a program to perform the translation has been prototyped. Note, however, that full First-Order Temporal Logic is undecidable <ref> [Hus87, Aba88] </ref>. In spite of this, it may be possible to find subsets of First-Order Temporal Logic to which this form of temporal resolution can be successfully applied. 61 Efficient translation to normal form. The development of an efficient translation to normal form could be investigated for PTL.
Reference: [Kow74] <author> R. Kowalski. </author> <title> Predicate Logic as a Programming Language. </title> <booktitle> In Proc. IFIP, </booktitle> <pages> pages 569-574. </pages> <publisher> North Holland, </publisher> <year> 1974. </year>
Reference-contexts: The particular strategy that PROLOG uses is based on linear input resolution and is complete for Horn clauses. Details of logic programming and Prolog may be found in <ref> [Kow74, Kow79] </ref>. 1.4.2 Applying Resolution to Temporal Logics In some cases the classical resolution rule can be applied to temporal logic formulae directly, for example when attempting to resolve pairs of formulae within the context of the operator, 9 such as A p A B Generally, though, this is not the
Reference: [Kow79] <author> R. Kowalski. </author> <title> Logic for Problem Solving. </title> <publisher> North Holland, </publisher> <year> 1979. </year>
Reference-contexts: The particular strategy that PROLOG uses is based on linear input resolution and is complete for Horn clauses. Details of logic programming and Prolog may be found in <ref> [Kow74, Kow79] </ref>. 1.4.2 Applying Resolution to Temporal Logics In some cases the classical resolution rule can be applied to temporal logic formulae directly, for example when attempting to resolve pairs of formulae within the context of the operator, 9 such as A p A B Generally, though, this is not the
Reference: [Lov78] <author> David W. Loveland. </author> <title> Automated Theorem Proving: a Logical Basis. </title> <publisher> North-Holland, Inc., </publisher> <year> 1978. </year>
Reference-contexts: The full resolution procedure, for both propositional and first order logics, was introduced in [Rob65] and strategies to direct the application of the resolution rules have been explained in standard texts for example <ref> [CL73, Lov78, WOLB84] </ref>. Temporal logic, a variety of modal logic, has been used to provide a framework for specifying and verifying programs and may be regarded as classical logic extended with various modalities. <p> There are other strategies, see <ref> [CL73, WOLB84, Lov78] </ref> for more details. Unfortunately although these strategies may reduce the search space they may not be refutation complete. Unit, and input resolution for example are not complete however linear resolution is. <p> The Use of Resolution Strategies. The use of resolution strategies to guide the refutation in classical logics, mentioned previously in Sections 1.1 and 1.4.1, have been fully described in <ref> [CL73, WOLB84, Lov78] </ref>.
Reference: [Min90] <author> G. Mints. </author> <title> Gentzen-Type Systems and Resolution Rules, Part I: Propositional Logic. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 417 </volume> <pages> 198-231, </pages> <year> 1990. </year>
Reference-contexts: Descriptions of other methods for modal resolution may be found in <ref> [Min90, Ohl88] </ref>, for example. Temporal Resolution A clausal resolution method for propositional temporal logic is outlined in [CdC84]. The temporal operators defined in the logic include , , and but include no past-time temporal operators. <p> For example, if we remove the discreteness constraint on PTL (thus removing , and ), then there is no need to search for combinations of -formulae representing a hidden -formula, and the resolution system essentially becomes that described by Mints for modal logics <ref> [Min90] </ref>. Application to execution. Just as the resolution method for classical logic has been used to develop the logic programming language PROLOG, so the resolution method described above may be used to develop a temporal logic programming language.
Reference: [MP81] <author> Z. Manna and A. Pnueli. </author> <title> Verification of Concurrent Programs: The Temporal Framework. </title> <editor> In Robert S. Boyer and J. Strother Moore, editors, </editor> <booktitle> The Correctness Problem in Computer Science. </booktitle> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1981. </year>
Reference-contexts: The use of temporal logics for the specification of programs has been described in [Bar87], while examples of their use in verification may be found in <ref> [MP81, Pnu81] </ref>, and a survey of their use in both areas may be found in [Pnu86]. The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method [Wol83, Gou84].
Reference: [Mur82] <author> Neil V. Murray. </author> <title> Completely Non-Clausal Theorem Proving. </title> <journal> Artificial Intelligence, </journal> <volume> 18 </volume> <pages> 67-85, </pages> <year> 1982. </year>
Reference-contexts: A larger number of resolution rules may need to be defined than are necessary in clausal methods, to enable their application to any formula within the logic. A non-clausal resolution method for classical logics is described in <ref> [Mur82] </ref>. 57 Non-clausal Resolution A non-clausal temporal resolution method is described in [AM90].
Reference: [Nil82] <author> Nils J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1982. </year>
Reference-contexts: Definitions of standard graphs, and basic search strategies may be found in [AHU74, RK91]. Descriptions of terminology relating to hypergraphs, their definitions, algorithms upon them, and their applications many be found in <ref> [GLNP90, Nil82] </ref>. 1.6 Description of the Dissertation Chapter 2 introduces the logic used, Propositional Temporal Logic, and gives an overview of the Temporal Resolution method. Chapter 3 explains the graph based approach to the implementation of the temporal resolution rule.
Reference: [Ohl88] <author> Hans-Jurgen Ohlbach. </author> <title> A Resolution Calculus for Modal Logics. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 310 </volume> <pages> 500-516, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Descriptions of other methods for modal resolution may be found in <ref> [Min90, Ohl88] </ref>, for example. Temporal Resolution A clausal resolution method for propositional temporal logic is outlined in [CdC84]. The temporal operators defined in the logic include , , and but include no past-time temporal operators.
Reference: [PG86] <author> D. A. Plaisted and S. A. Greenbaum. </author> <title> A Structure-Preserving Clause Form Translation. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 2(3) </volume> <pages> 293-304, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: A more refined translation into normal form may reduce the size of formula produced and thus improve the efficiency of the resolution procedure. Research relating to translation to special clausal forms has been investigated, for example in <ref> [PG86] </ref>. A structure preserving clause form translation for propositional and first-order classical logics is defined which avoids the exponential increase in size that may occur with standard translations. This, other strategies relating to translation to clausal forms, and requirements that any good transformation should have are discussed in [dlTC90]. <p> Transformations based on renaming, where a sub-formula is replaced by a new proposition symbol and the truth value of the new proposition symbol linked to the sub-formula that has been replaced have been defined for classical logics <ref> [PG86] </ref>. The renaming transformations aim to obtain a good worst case complexity in size: linear in the propositional case and quadratic in the first order case, although these non-standard transformations may produce a clause form more difficult to refute than the standard one.
Reference: [Pnu81] <author> Amir Pnueli. </author> <title> The Temporal Semantics of Concurrent Programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 45-60, </pages> <year> 1981. </year>
Reference-contexts: The use of temporal logics for the specification of programs has been described in [Bar87], while examples of their use in verification may be found in <ref> [MP81, Pnu81] </ref>, and a survey of their use in both areas may be found in [Pnu86]. The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method [Wol83, Gou84].
Reference: [Pnu86] <author> Amir Pnueli. </author> <title> Applications of Temporal Logic to the Specification and Verification of Reactive Systems: A Survey of Current Trends. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 224, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: The use of temporal logics for the specification of programs has been described in [Bar87], while examples of their use in verification may be found in [MP81, Pnu81], and a survey of their use in both areas may be found in <ref> [Pnu86] </ref>. The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method [Wol83, Gou84]. Resolution methods have been developed for temporal logics based on both clausal forms [CdC84] and non-clausal forms [AM90].
Reference: [RK91] <author> Elaine Rich and Kevin Knight. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1991. </year>
Reference-contexts: As a semantic model for temporal logic formulae can be represented as a graph, graphs 10 will be used to identify the rules that together imply the -formulae required for the tem-poral resolution rule. Definitions of standard graphs, and basic search strategies may be found in <ref> [AHU74, RK91] </ref>. Descriptions of terminology relating to hypergraphs, their definitions, algorithms upon them, and their applications many be found in [GLNP90, Nil82]. 1.6 Description of the Dissertation Chapter 2 introduces the logic used, Propositional Temporal Logic, and gives an overview of the Temporal Resolution method.
Reference: [Rob65] <author> J. A. Robinson. </author> <title> A Machine Based Logic Based on the Resolution Principle. </title> <journal> ACM Journal, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <month> January </month> <year> 1965. </year>
Reference-contexts: The resolution proof procedure is refutation complete for classical logic as, when applied to an unsatisfiable formula, the procedure is guaranteed to produce false. The full resolution procedure, for both propositional and first order logics, was introduced in <ref> [Rob65] </ref> and strategies to direct the application of the resolution rules have been explained in standard texts for example [CL73, Lov78, WOLB84]. <p> Modal Resolution Modal resolution based on Robinson's method for classical logic <ref> [Rob65] </ref>, for various modal systems is discussed in [EdC89]. Classical logical operators are extended by the modal operators and (or for a collection of modal operators [k] and &lt; k &gt;, where for a formula A the formula &lt; k &gt; may be defined as &lt; k &gt;= [k]A).
Reference: [Smu68] <author> R. M. Smullyan. </author> <title> First order logic. </title> <journal> Ergebnisse der Mathematik, </journal> <volume> 43, </volume> <year> 1968. </year>
Reference-contexts: DP is a decision procedure for future-time temporal logics allowing classical connectives and the five future-time temporal operators described in Chapter 2. The decision procedure is based on the semantic tableau method <ref> [HC68, Smu68] </ref>, and is similar to that described in [Wol83]. Using semantic tableau methods a formula is shown to be valid if it is not possible to construct a model for . The decision procedure DP uses an algorithm to construct such a model.
Reference: [Wol83] <author> Pierre Wolper. </author> <title> Temporal Logic Can Be More Expressive. </title> <journal> Information and Control, </journal> <volume> 56, </volume> <year> 1983. </year>
Reference-contexts: The mechanisation of proofs in temporal logic has predominantly been carried out using the semantic tableau method <ref> [Wol83, Gou84] </ref>. Resolution methods have been developed for temporal logics based on both clausal forms [CdC84] and non-clausal forms [AM90]. In this dissertation an implementation of the resolution method for temporal logics described by Fisher [Fis91, Fis92b, Fis93] is described. <p> DP is a decision procedure for future-time temporal logics allowing classical connectives and the five future-time temporal operators described in Chapter 2. The decision procedure is based on the semantic tableau method [HC68, Smu68], and is similar to that described in <ref> [Wol83] </ref>. Using semantic tableau methods a formula is shown to be valid if it is not possible to construct a model for . The decision procedure DP uses an algorithm to construct such a model.
Reference: [WOLB84] <author> Larry Wos, Ross Overbeek, Ewing Lusk, and Jim Boyle. </author> <title> Automated Reasoning Introduction and Applications. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1984. </year>
Reference-contexts: The full resolution procedure, for both propositional and first order logics, was introduced in [Rob65] and strategies to direct the application of the resolution rules have been explained in standard texts for example <ref> [CL73, Lov78, WOLB84] </ref>. Temporal logic, a variety of modal logic, has been used to provide a framework for specifying and verifying programs and may be regarded as classical logic extended with various modalities. <p> There are other strategies, see <ref> [CL73, WOLB84, Lov78] </ref> for more details. Unfortunately although these strategies may reduce the search space they may not be refutation complete. Unit, and input resolution for example are not complete however linear resolution is. <p> The Use of Resolution Strategies. The use of resolution strategies to guide the refutation in classical logics, mentioned previously in Sections 1.1 and 1.4.1, have been fully described in <ref> [CL73, WOLB84, Lov78] </ref>.
References-found: 39

