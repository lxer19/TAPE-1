URL: http://www.cs.princeton.edu/~funk/sig94.ps.gz
Refering-URL: http://www.cs.princeton.edu/~funk/
Root-URL: http://www.cs.princeton.edu
Title: Partitioning and Ordering Large Radiosity Computations  
Author: Seth Teller Celeste Fowler Thomas Funkhouser Pat Hanrahan 
Keyword: CR Categories and Subject Descriptors: I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism -Radiosity; J.2 [Physical Sciences and Engineering]: Engineering. Additional Key Words and Phrases: Multigridding; equilibrium methods; spatial subdivision.  
Address: Princeton NJ 08544  Murray Hill, NJ 07974  
Affiliation: Computer Science Dept., Princeton University,  AT&T Bell Laboratories,  
Abstract: We describe a system that computes radiosity solutions for polygonal environments much larger than can be stored in main memory. The solution is stored in and retrieved from a database as the computation proceeds. Our system is based on two ideas: the use of visibility oracles to find source and blocker surfaces potentially visible to a receiving surface; and the use of hierarchical techniques to represent interactions between large surfaces efficiently, and to represent the computed radiosity solution compactly. Visibility information allows the environment to be partitioned into subsets, each containing all the information necessary to transfer light to a cluster of receiving polygons. Since the largest subset needed for any particular cluster is much smaller than the total size of the environment, these subset computations can be performed in much less memory than can classical or hierarchical radiosity. The computation is then ordered for further efficiency. Careful ordering of energy transfers minimizes the number of database reads and writes. We report results from large solutions of unfurnished and furnished buildings, and show that our implementation's observed running time scales nearly linearly with both local and global model complexity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baum, D., Mann, S., Smith, K., and Winget, J. </author> <title> Making Radiosity Usable: Automatic Preprocessing and Meshing Techniques for the Generation of Accurate Radiosity Solutions. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '91) 25, 4 (1991), </volume> <pages> 51-60. </pages>
Reference-contexts: When storage is unlimited, the optimal intermediate complexity is that associated with the most rapidly converging iterative scheme. Model Surfaces Patches Elements Time Theater <ref> [1] </ref> ~5K ~80K ~1M 192 H Mill [5] ~30K ~50K 195 H Cathedral [28] ~10K ~75K 1 H Table 1: Previous complex radiosity solutions. Several complex radiosity computations have been reported in the literature (Table 1). Perhaps the most complex is the Candlestick Theater reported in Baum et al [1]. <p> Theater <ref> [1] </ref> ~5K ~80K ~1M 192 H Mill [5] ~30K ~50K 195 H Cathedral [28] ~10K ~75K 1 H Table 1: Previous complex radiosity solutions. Several complex radiosity computations have been reported in the literature (Table 1). Perhaps the most complex is the Candlestick Theater reported in Baum et al [1]. This simulation generated over a million elements, performed 1600 iterations of a progressive refinement algorithm (shooting from a single source), and took approximately 8 days to compute. Other reported complex radiosity simulations each generated less than 100,000 elements.
Reference: [2] <author> Baum, D., and Winget, J. </author> <title> Real Time Radiosity Through Parallel Processing and Hardware Acceleration. </title> <booktitle> Computer Graphics (1990 Symposium on Interactive 3D Graphics) 24, </booktitle> <month> 2 (March </month> <year> 1990), </year> <pages> 67-75. </pages>
Reference-contexts: Progressive radiosity techniques choose sources in brightness order and shoot their energy into the environment [5]. This may involve considerable bookkeeping, since each shoot updates many brightnesses, and the relative priorities of queued shooters may change considerably. Parallel implementations of progressive refinement have been reported <ref> [2, 19] </ref>. "Super-shoot gather" techniques repeatedly (over)shoot from and gather to a small number of surfaces, ignoring any interactions not involving the shooters [7, 12]. * Hierarchical Approaches and Clustering.
Reference: [3] <author> Bentley, J. </author> <title> Experiments on Geometric Traveling Salesman Heuristics. </title> <type> Tech. Rep. </type> <institution> Computing Science (No. 151), AT&T Bell Laboratories, </institution> <year> 1990. </year>
Reference-contexts: We conclude that the order in which clusters are processed can greatly affect performance during radiosity computations on very large models. We are currently investigating other possible ordering algorithms, including ones derived from progressive radiosity [5], nearest neighbors, and minimum spanning trees <ref> [3] </ref>. We expect that the best ordering algorithms will take into account both cache coherence and convergence behavior.
Reference: [4] <author> Campbell III, A., and Fussell, D. </author> <title> Adaptive Mesh Generation for Global Diffuse Illumination. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '90) 24, 4 (1990), </volume> <pages> 155-164. </pages>
Reference-contexts: The projection operation involved the whole model and respected depth, producing discretized surface fragments visible to the sample point. This and other point-sampling techniques (e.g., <ref> [4] </ref>) may not detect relevant light sources and/or blockers, however. Shaft culling recast global visibility into a collection of visibility subspaces by generating a common shaft volume for each interacting pair, and treating as blockers only those ob jects (potentially) intersecting the shaft [14, 18].
Reference: [5] <author> Cohen, M., Chen, S., Wallace, J., and Greenberg, D. </author> <title> A Progressive Refinement Approach to Fast Radiosity Image Generation. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '88) 22, 4 (1988), </volume> <pages> 75-84. </pages>
Reference-contexts: When storage is unlimited, the optimal intermediate complexity is that associated with the most rapidly converging iterative scheme. Model Surfaces Patches Elements Time Theater [1] ~5K ~80K ~1M 192 H Mill <ref> [5] </ref> ~30K ~50K 195 H Cathedral [28] ~10K ~75K 1 H Table 1: Previous complex radiosity solutions. Several complex radiosity computations have been reported in the literature (Table 1). Perhaps the most complex is the Candlestick Theater reported in Baum et al [1]. <p> The ra-diosity matrix equation is then solved by repeatedly updating the matrix entries using a numerical solution technique, typically Gauss-Seidel iteration. Several proposed improvements address the order in which the matrix entries are updated. Progressive radiosity techniques choose sources in brightness order and shoot their energy into the environment <ref> [5] </ref>. This may involve considerable bookkeeping, since each shoot updates many brightnesses, and the relative priorities of queued shooters may change considerably. <p> To be effective, an ordering algorithm must schedule successive gathers so as to minimize disk accesses, while maintaining rapid convergence properties. Much work has focused on the effects of ordering on convergence rates for the radiosity computation <ref> [5, 7, 12] </ref>; here we concentrate on the effect of ordering on disk accesses. A good ordering algorithm maintains a high degree of coherence among the working sets of successive cluster interactions. Unfortunately, finding an optimal ordering is intractable. <p> We conclude that the order in which clusters are processed can greatly affect performance during radiosity computations on very large models. We are currently investigating other possible ordering algorithms, including ones derived from progressive radiosity <ref> [5] </ref>, nearest neighbors, and minimum spanning trees [3]. We expect that the best ordering algorithms will take into account both cache coherence and convergence behavior.
Reference: [6] <author> Cohen, M., and Greenberg, D. </author> <title> The Hemi-Cube: A Radiosity Solution for Complex Environments. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '85) 19, 3 (1985), </volume> <pages> 31-40. </pages>
Reference-contexts: Clearly this requires global knowledge of the model. Classical radiosity algorithms used a "hemicube" algorithm to approximate each surface's occluded view of the model as an environment map onto faces of a cube centered on a surface point <ref> [6] </ref>. The projection operation involved the whole model and respected depth, producing discretized surface fragments visible to the sample point. This and other point-sampling techniques (e.g., [4]) may not detect relevant light sources and/or blockers, however. <p> These techniques, in contrast to those based on point-sampling, are conservative in the sense that they never wrongly exclude a blocker or light source from an interaction. * Solution Methods. Classical radiosity algorithms generate a row-diagonally dominant interaction matrix <ref> [6] </ref>. The ra-diosity matrix equation is then solved by repeatedly updating the matrix entries using a numerical solution technique, typically Gauss-Seidel iteration. Several proposed improvements address the order in which the matrix entries are updated. <p> The scheduler is therefore performing Gauss-Seidel iteration of the linear system, rather than Jacobi iteration as in hierarchical radiosity. Since both methods converge for row-diagonally dominant systems of radiosity equations <ref> [6] </ref>, convergence of the partitioning algorithm is assured. 5.3 Partitioning Results We studied the performance of our system for models of varying complexity.
Reference: [7] <author> Feda, M., and Purgathofer, W. </author> <title> Accelerating radiosity by overshooting. </title> <booktitle> In Proc. 3 rd Eurographics Workshop on Rendering (May 1992), </booktitle> <pages> pp. 21-31. </pages>
Reference-contexts: Parallel implementations of progressive refinement have been reported [2, 19]. "Super-shoot gather" techniques repeatedly (over)shoot from and gather to a small number of surfaces, ignoring any interactions not involving the shooters <ref> [7, 12] </ref>. * Hierarchical Approaches and Clustering. Matrix-based solutions consider the matrix at a single granularity, namely the correspondence between each matrix entry and pair of surfaces in the environment. <p> To be effective, an ordering algorithm must schedule successive gathers so as to minimize disk accesses, while maintaining rapid convergence properties. Much work has focused on the effects of ordering on convergence rates for the radiosity computation <ref> [5, 7, 12] </ref>; here we concentrate on the effect of ordering on disk accesses. A good ordering algorithm maintains a high degree of coherence among the working sets of successive cluster interactions. Unfortunately, finding an optimal ordering is intractable.
Reference: [8] <author> Fuchs, H., Kedem, Z., and Naylor, B. </author> <title> Predetermining visibility priority in 3-D scenes. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '79) 13, 2 (1979), </volume> <pages> 175-182. </pages>
Reference-contexts: This strategy is based on the intuition that the working set of a cluster that has been visible to many previous receivers is likely to have a large overlap with the current working set. * Cell order schedules clusters by traversing cells of the wall-aligned BSP-tree <ref> [8] </ref> spatial subdivision [23, 26]. Consecutive cells are chosen by selecting the neighbor cell whose intervening boundary has the largest transparent area. This approach exploits the visibility coherence of clusters due to proximity and local intervisibility. involving almost 2,000 clusters.
Reference: [9] <author> Funkhouser, T. </author> <title> Database and Display Algorithms for Interactive Visualization of Architectural Models. </title> <type> PhD thesis, (Also TR UCB/CSD 93/771) CS Dept., </type> <institution> UC Berkeley, </institution> <year> 1993. </year>
Reference-contexts: For example, consider the model of the University of Califor-nia, Berkeley Computer Science Building. The furnished building model contains more than 8,000 light sources and 1.4 million surfaces and requires approximately 350 megabytes of storage <ref> [9] </ref>. We estimate that 10 to 100 million elements may be required to represent a high-fidelity radiosity solution throughout the model. Intermediate memory demands often determine the limits on the size of the model used in a radiosity system. <p> The database supports the operations of reading, dirtying, and releasing clusters <ref> [9, 11] </ref>. Releases of dirty data result in deferred writes to persistent storage. * The global visibility oracle, given a receiver cluster, identifies those clusters potentially visible to the receiver, i.e., those clusters that may illuminate the receiver, or block en ergy transfers to it [23, 25].
Reference: [10] <author> Funkhouser, T., and S equin, C. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environments. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) 27 (1993), </booktitle> <pages> 247-254. </pages>
Reference-contexts: The same visibility information and computations used to determine source and receiver interactions are used to maintain an interactive frame rate in the walkthrough. The hierarchical (quadtree) representation of radiosity on each polygon is particularly useful, as it allows easily selectable levels of detail <ref> [10] </ref> for each polygon. Plate I. The entire furnished floor, solved to one inch effective resolution (734,665 elements). Plate II: Office, gouraud shaded. Plate IV: Workroom, gouraud shaded. Plate III: Office, meshed.
Reference: [11] <author> Funkhouser, T., S equin, C., and Teller, S. </author> <title> Management of Large Amounts of Data in Interactive Building Walkthroughs. </title> <booktitle> In Proc. 1992 Workshop on Interactive 3D Graphics (1992), </booktitle> <pages> pp. 11-20. </pages>
Reference-contexts: The database supports the operations of reading, dirtying, and releasing clusters <ref> [9, 11] </ref>. Releases of dirty data result in deferred writes to persistent storage. * The global visibility oracle, given a receiver cluster, identifies those clusters potentially visible to the receiver, i.e., those clusters that may illuminate the receiver, or block en ergy transfers to it [23, 25]. <p> Second, a spatial subdivision groups clusters into cells by proximity, separating them along major sources of occlusion. Third, a visibility computation identifies all cluster pairs that may exchange energy <ref> [11, 23, 26] </ref>. The final tool is a flexible database from which individual portions of the model may be extracted, modified and replaced [11]. <p> Third, a visibility computation identifies all cluster pairs that may exchange energy [11, 23, 26]. The final tool is a flexible database from which individual portions of the model may be extracted, modified and replaced <ref> [11] </ref>. We adapted the database to support the new datatypes required for radiosity. 5.1 The Algorithm Our algorithm: extracts each receiver and its visible set from the spatial database; links them; refines and gathers across the links; and returns the modified clusters to the database.
Reference: [12] <author> Gortler, S., Cohen, M., and Slusallek, P. </author> <title> Radiosity and relaxation methods Progressive refinement in Southwell relaxation. </title> <type> Technical Report TR-408-93, </type> <institution> Department of Computer Science, Princeton University, </institution> <year> 1993. </year>
Reference-contexts: Parallel implementations of progressive refinement have been reported [2, 19]. "Super-shoot gather" techniques repeatedly (over)shoot from and gather to a small number of surfaces, ignoring any interactions not involving the shooters <ref> [7, 12] </ref>. * Hierarchical Approaches and Clustering. Matrix-based solutions consider the matrix at a single granularity, namely the correspondence between each matrix entry and pair of surfaces in the environment. <p> To be effective, an ordering algorithm must schedule successive gathers so as to minimize disk accesses, while maintaining rapid convergence properties. Much work has focused on the effects of ordering on convergence rates for the radiosity computation <ref> [5, 7, 12] </ref>; here we concentrate on the effect of ordering on disk accesses. A good ordering algorithm maintains a high degree of coherence among the working sets of successive cluster interactions. Unfortunately, finding an optimal ordering is intractable.
Reference: [13] <author> Gortler, S., Schr oder, P., Cohen, M., and Hanrahan, P. </author> <title> Wavelet radiosity. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) (August 1993), </booktitle> <pages> 221-230. </pages>
Reference-contexts: Galerkin-based methods use finite element techniques to represent radiosities more generally, as weighted sums of smoothly varying basis functions defined over each surface [16, 17, 27, 30]. The resulting solutions have better smoothness and convergence behavior than those of classical radiosity. Recently, the wavelet ra-diosity method <ref> [13, 21] </ref> combined hierarchical radiosity with Galerkin techniques. 3 Basic Ideas Our system is based on two ideas: partitioning and ordering. Partitioning decomposes the database into subsets. Each subset contains the information needed to gather all the energy destined for a cluster of receivers. <p> A cluster may be visible to itself. * The hierarchical wavelet radiosity solver generates high quality radiosity solutions using wavelet bases of general order and Gaussian quadrature <ref> [13, 15, 21] </ref>. * The local visibility oracle supports operations for allocating and subdividing tubes, and accelerating point-to-point visi bility queries for quadrature [25].
Reference: [14] <author> Haines, E., and Wallace, J. </author> <title> Shaft Culling for Efficient Ray-Traced Radiosity. </title> <booktitle> In Proc. 2 nd Eurographics Workshop on Rendering (May 1991). </booktitle>
Reference-contexts: This and other point-sampling techniques (e.g., [4]) may not detect relevant light sources and/or blockers, however. Shaft culling recast global visibility into a collection of visibility subspaces by generating a common shaft volume for each interacting pair, and treating as blockers only those ob jects (potentially) intersecting the shaft <ref> [14, 18] </ref>. Finally, preprocessing and incremental maintenance techniques used a coherent global pass through the model to generate initial blocker lists, then maintained the lists incrementally under link subdivision [25]. <p> The braid and links are not shown. The types surface, patch, element, and link are familiar to ra-diosity practitioners. The types blocker, shaft, and tube arise in recent related work on shaft-culling and visibility subspaces <ref> [14, 18, 25] </ref>.
Reference: [15] <author> Hanrahan, P., Salzman, D., and Aupperle, L. </author> <title> A Rapid Hierarchical Radiosity Algorithm. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '91) 25, 4 (1991), </volume> <pages> 197-206. </pages>
Reference-contexts: The hierarchical radiosity algorithm applied techniques developed for the n-body problem, incorporating a global error bound and allowing surfaces to exchange energy whenever they could do so within the specified error <ref> [15] </ref>. Thus, wherever sufficiently far-apart or dim surfaces interact, hierarchical methods essentially compact a block of the form-factor matrix into a scalar. Recursive application of this idea yielded a radiosity algorithm with running time that grows linearly with the number of output elements. <p> A cluster may be visible to itself. * The hierarchical wavelet radiosity solver generates high quality radiosity solutions using wavelet bases of general order and Gaussian quadrature <ref> [13, 15, 21] </ref>. * The local visibility oracle supports operations for allocating and subdividing tubes, and accelerating point-to-point visi bility queries for quadrature [25]. <p> That is, only after a complete update of all patch's gather slots are any patch's shoot slots updated (by Push and Pull <ref> [15] </ref>). Jacobi iteration is clearly an untenable strategy for extremely large models, since it would necessitate reading and writing every patch twice per update.
Reference: [16] <author> Heckbert, P., and Winget, J. </author> <title> Finite element methods for global illumination. </title> <type> Tech. Rep. </type> <institution> UCB/CSD 91/643, CS Department, UC Berkeley, </institution> <year> 1991. </year>
Reference-contexts: Classical and hierarchical solution algorithms represented radiosity as constant over each surface. Galerkin-based methods use finite element techniques to represent radiosities more generally, as weighted sums of smoothly varying basis functions defined over each surface <ref> [16, 17, 27, 30] </ref>. The resulting solutions have better smoothness and convergence behavior than those of classical radiosity. Recently, the wavelet ra-diosity method [13, 21] combined hierarchical radiosity with Galerkin techniques. 3 Basic Ideas Our system is based on two ideas: partitioning and ordering. Partitioning decomposes the database into subsets.
Reference: [17] <author> Lischinski, D., Tampieri, F., and Greenberg, D. P. </author> <title> Combining Hierarchical Radiosity and Discontinuity Meshing. </title> <journal> Computer Graphics (Proc. </journal> <note> Sig-graph '93) 27 (1993). </note>
Reference-contexts: Classical and hierarchical solution algorithms represented radiosity as constant over each surface. Galerkin-based methods use finite element techniques to represent radiosities more generally, as weighted sums of smoothly varying basis functions defined over each surface <ref> [16, 17, 27, 30] </ref>. The resulting solutions have better smoothness and convergence behavior than those of classical radiosity. Recently, the wavelet ra-diosity method [13, 21] combined hierarchical radiosity with Galerkin techniques. 3 Basic Ideas Our system is based on two ideas: partitioning and ordering. Partitioning decomposes the database into subsets.
Reference: [18] <author> Marks, J., Walsh, R., Christensen, J., and Friedell, M. </author> <title> Image and Intervisibility Coherence in Rendering. </title> <booktitle> In Proc. of Graphics Interface '90 (May 1990), </booktitle> <pages> pp. 17-30. </pages>
Reference-contexts: This and other point-sampling techniques (e.g., [4]) may not detect relevant light sources and/or blockers, however. Shaft culling recast global visibility into a collection of visibility subspaces by generating a common shaft volume for each interacting pair, and treating as blockers only those ob jects (potentially) intersecting the shaft <ref> [14, 18] </ref>. Finally, preprocessing and incremental maintenance techniques used a coherent global pass through the model to generate initial blocker lists, then maintained the lists incrementally under link subdivision [25]. <p> The braid and links are not shown. The types surface, patch, element, and link are familiar to ra-diosity practitioners. The types blocker, shaft, and tube arise in recent related work on shaft-culling and visibility subspaces <ref> [14, 18, 25] </ref>.
Reference: [19] <author> Recker, R., George, D., and Greenberg, D. </author> <title> Acceleration Techniques for Progressive Refinement Radiosity. </title> <booktitle> Computer Graphics (1990 Symp. on Interactive 3D Graphics) 24, 2 (1990), </booktitle> <pages> 59-66. </pages>
Reference-contexts: Progressive radiosity techniques choose sources in brightness order and shoot their energy into the environment [5]. This may involve considerable bookkeeping, since each shoot updates many brightnesses, and the relative priorities of queued shooters may change considerably. Parallel implementations of progressive refinement have been reported <ref> [2, 19] </ref>. "Super-shoot gather" techniques repeatedly (over)shoot from and gather to a small number of surfaces, ignoring any interactions not involving the shooters [7, 12]. * Hierarchical Approaches and Clustering.
Reference: [20] <author> Rushmeier, H., Patterson, C., and Veerasamy, A. </author> <title> Geometric simplification for indirect illumination calculations. </title> <booktitle> In Proc. Graphics Interface '93 (1993), </booktitle> <pages> pp. 227-236. </pages>
Reference-contexts: The hierarchical radiosity algorithm did not address the "clustering" problem of efficiently handling interactions among surfaces composed of many small surfaces; some techniques have been recently proposed to do so <ref> [20, 22, 29] </ref>. * Meshing and Finite Element Methods. Finally, meshing and finite-element techniques have been employed to improve the accuracy of radiosity solutions. Classical and hierarchical solution algorithms represented radiosity as constant over each surface.
Reference: [21] <author> Schr oder, P., Gortler, S., Cohen, M., and Hanrahan, P. </author> <title> Wavelet projections for radiosity. </title> <booktitle> In Eurographics Workshop on Rendering (1993), </booktitle> <pages> pp. 105-114. </pages>
Reference-contexts: Galerkin-based methods use finite element techniques to represent radiosities more generally, as weighted sums of smoothly varying basis functions defined over each surface [16, 17, 27, 30]. The resulting solutions have better smoothness and convergence behavior than those of classical radiosity. Recently, the wavelet ra-diosity method <ref> [13, 21] </ref> combined hierarchical radiosity with Galerkin techniques. 3 Basic Ideas Our system is based on two ideas: partitioning and ordering. Partitioning decomposes the database into subsets. Each subset contains the information needed to gather all the energy destined for a cluster of receivers. <p> A cluster may be visible to itself. * The hierarchical wavelet radiosity solver generates high quality radiosity solutions using wavelet bases of general order and Gaussian quadrature <ref> [13, 15, 21] </ref>. * The local visibility oracle supports operations for allocating and subdividing tubes, and accelerating point-to-point visi bility queries for quadrature [25].
Reference: [22] <author> Smits, B., Arvo, J., and Greenberg, D. </author> <title> A Clustering Algorithm for Radiosity in Complex Environments. </title> <journal> Computer Graphics (Proc. </journal> <note> Siggraph '94) 28 (1994). </note>
Reference-contexts: The hierarchical radiosity algorithm did not address the "clustering" problem of efficiently handling interactions among surfaces composed of many small surfaces; some techniques have been recently proposed to do so <ref> [20, 22, 29] </ref>. * Meshing and Finite Element Methods. Finally, meshing and finite-element techniques have been employed to improve the accuracy of radiosity solutions. Classical and hierarchical solution algorithms represented radiosity as constant over each surface.
Reference: [23] <author> Teller, S. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> PhD thesis, (Also TR UCB/CSD 92/708) CS Dept., </type> <institution> UC Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Releases of dirty data result in deferred writes to persistent storage. * The global visibility oracle, given a receiver cluster, identifies those clusters potentially visible to the receiver, i.e., those clusters that may illuminate the receiver, or block en ergy transfers to it <ref> [23, 25] </ref>. <p> Second, a spatial subdivision groups clusters into cells by proximity, separating them along major sources of occlusion. Third, a visibility computation identifies all cluster pairs that may exchange energy <ref> [11, 23, 26] </ref>. The final tool is a flexible database from which individual portions of the model may be extracted, modified and replaced [11]. <p> This strategy is based on the intuition that the working set of a cluster that has been visible to many previous receivers is likely to have a large overlap with the current working set. * Cell order schedules clusters by traversing cells of the wall-aligned BSP-tree [8] spatial subdivision <ref> [23, 26] </ref>. Consecutive cells are chosen by selecting the neighbor cell whose intervening boundary has the largest transparent area. This approach exploits the visibility coherence of clusters due to proximity and local intervisibility. involving almost 2,000 clusters.
Reference: [24] <author> Teller, S. </author> <title> A Methodology for Geometric Algorithm Development. </title> <booktitle> In Proc. Computer Graphics International '93 (1993), </booktitle> <editor> N. and D. Thalmann, </editor> <booktitle> Eds., </booktitle> <pages> pp. 306-317. </pages>
Reference-contexts: The global oracle supplies the initial blocker list for each tube. * The visualization module employs the Silicon Graphics IRIS GL tm to facilitate interaction, inspection, and animation of geometric data structures and algorithms <ref> [24] </ref>. It has proven indispensable to developing a working system. 5 Partitioning We wish to partition a huge radiosity computation into a sequence of small gathers to individual receivers, each of which can fit into a small amount of memory.
Reference: [25] <author> Teller, S., and Hanrahan, P. </author> <title> Global Visibility Algorithms for Illumination Computations. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) 27 (1993), </booktitle> <pages> 239-246. </pages>
Reference-contexts: Finally, preprocessing and incremental maintenance techniques used a coherent global pass through the model to generate initial blocker lists, then maintained the lists incrementally under link subdivision <ref> [25] </ref>. These techniques, in contrast to those based on point-sampling, are conservative in the sense that they never wrongly exclude a blocker or light source from an interaction. * Solution Methods. Classical radiosity algorithms generate a row-diagonally dominant interaction matrix [6]. <p> The braid and links are not shown. The types surface, patch, element, and link are familiar to ra-diosity practitioners. The types blocker, shaft, and tube arise in recent related work on shaft-culling and visibility subspaces <ref> [14, 18, 25] </ref>. <p> Releases of dirty data result in deferred writes to persistent storage. * The global visibility oracle, given a receiver cluster, identifies those clusters potentially visible to the receiver, i.e., those clusters that may illuminate the receiver, or block en ergy transfers to it <ref> [23, 25] </ref>. <p> A cluster may be visible to itself. * The hierarchical wavelet radiosity solver generates high quality radiosity solutions using wavelet bases of general order and Gaussian quadrature [13, 15, 21]. * The local visibility oracle supports operations for allocating and subdividing tubes, and accelerating point-to-point visi bility queries for quadrature <ref> [25] </ref>. The global oracle supplies the initial blocker list for each tube. * The visualization module employs the Silicon Graphics IRIS GL tm to facilitate interaction, inspection, and animation of geometric data structures and algorithms [24].
Reference: [26] <author> Teller, S., and S equin, C. H. </author> <title> Visibility Preprocessing for Interactive Walkthroughs. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '91) 25, 4 (1991), </volume> <pages> 61-69. </pages>
Reference-contexts: the model from the database (partitioning), manipulating the solver's working set, invoking the solver, extracting the modified, refined clusters, and returning them to the database. * The database contains a persistent (disk) representation of all clusters and a hierarchical spatial subdivision comprised of convex cells and portals that connect cells <ref> [26] </ref>. The database supports the operations of reading, dirtying, and releasing clusters [9, 11]. <p> Second, a spatial subdivision groups clusters into cells by proximity, separating them along major sources of occlusion. Third, a visibility computation identifies all cluster pairs that may exchange energy <ref> [11, 23, 26] </ref>. The final tool is a flexible database from which individual portions of the model may be extracted, modified and replaced [11]. <p> This strategy is based on the intuition that the working set of a cluster that has been visible to many previous receivers is likely to have a large overlap with the current working set. * Cell order schedules clusters by traversing cells of the wall-aligned BSP-tree [8] spatial subdivision <ref> [23, 26] </ref>. Consecutive cells are chosen by selecting the neighbor cell whose intervening boundary has the largest transparent area. This approach exploits the visibility coherence of clusters due to proximity and local intervisibility. involving almost 2,000 clusters.
Reference: [27] <author> Troutman, R., and Max, N. </author> <title> Radiosity algorithms using higher order finite element methods. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) (1993), </booktitle> <pages> 209-212. </pages>
Reference-contexts: Classical and hierarchical solution algorithms represented radiosity as constant over each surface. Galerkin-based methods use finite element techniques to represent radiosities more generally, as weighted sums of smoothly varying basis functions defined over each surface <ref> [16, 17, 27, 30] </ref>. The resulting solutions have better smoothness and convergence behavior than those of classical radiosity. Recently, the wavelet ra-diosity method [13, 21] combined hierarchical radiosity with Galerkin techniques. 3 Basic Ideas Our system is based on two ideas: partitioning and ordering. Partitioning decomposes the database into subsets.
Reference: [28] <author> Wallace, J., Elmquist, K., and Haines, E. </author> <title> A Ray Tracing Algorithm for Progressive Radiosity. </title> <journal> Computer Graphics (Proc. </journal> <volume> Siggraph '89) 23, 3 (1989), </volume> <pages> 315-324. </pages>
Reference-contexts: When storage is unlimited, the optimal intermediate complexity is that associated with the most rapidly converging iterative scheme. Model Surfaces Patches Elements Time Theater [1] ~5K ~80K ~1M 192 H Mill [5] ~30K ~50K 195 H Cathedral <ref> [28] </ref> ~10K ~75K 1 H Table 1: Previous complex radiosity solutions. Several complex radiosity computations have been reported in the literature (Table 1). Perhaps the most complex is the Candlestick Theater reported in Baum et al [1].
Reference: [29] <author> Xu, H., Peng, Q.-S., and Liang, Y.-D. </author> <title> Accelerated radiosity method for complex environments. </title> <journal> Computers and Graphics 14, </journal> <volume> 1 (1990), </volume> <pages> 65-71. </pages>
Reference-contexts: The hierarchical radiosity algorithm did not address the "clustering" problem of efficiently handling interactions among surfaces composed of many small surfaces; some techniques have been recently proposed to do so <ref> [20, 22, 29] </ref>. * Meshing and Finite Element Methods. Finally, meshing and finite-element techniques have been employed to improve the accuracy of radiosity solutions. Classical and hierarchical solution algorithms represented radiosity as constant over each surface.
Reference: [30] <author> Zatz, H. </author> <title> Galerkin radiosity: A higher order solution method for global illumination. </title> <booktitle> Computer Graphics (Proc. Siggraph '93) 27 (1993), </booktitle> <pages> 213-220. </pages>
Reference-contexts: Classical and hierarchical solution algorithms represented radiosity as constant over each surface. Galerkin-based methods use finite element techniques to represent radiosities more generally, as weighted sums of smoothly varying basis functions defined over each surface <ref> [16, 17, 27, 30] </ref>. The resulting solutions have better smoothness and convergence behavior than those of classical radiosity. Recently, the wavelet ra-diosity method [13, 21] combined hierarchical radiosity with Galerkin techniques. 3 Basic Ideas Our system is based on two ideas: partitioning and ordering. Partitioning decomposes the database into subsets.
References-found: 30

