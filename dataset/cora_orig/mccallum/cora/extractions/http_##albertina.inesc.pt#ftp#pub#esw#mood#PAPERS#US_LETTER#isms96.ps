URL: http://albertina.inesc.pt/ftp/pub/esw/mood/PAPERS/US_LETTER/isms96.ps
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fba@inesc.pt  melo@cs.umd.edu  
Title: Evaluating the Impact of ObjectOriented Design on Software Quality  
Author: Fernando Brito e Abreu Walclio Melo 
Address: Rua Alves Redol, 9, Apartado 13069 1000 Lisbon, Portugal  A.V.Williams Bldg., College Park MD 20742, USA  
Affiliation: ISEG Lisbon Technical Univ. and INESC  University of Maryland Inst.Adv.Comp.Stud.  
Date: March 1996.  
Note: Originally published in Proceedings of the 3rd International Software Metrics Symposium (METRICS96), IEEE, Berlin, Germany,  
Abstract: This paper describes the results of a study where the impact of ObjectOriented design on software quality characteristics is experimentally evaluated. A suite of metrics for OO design, called MOOD, was adopted to measure the use of OO design mechanisms. Data collected on the development of eight smallsized information management systems based on identical requirements were used to assess the referred impact. Data obtained in this experiment show how OO design mechanisms such as inheritance, polymorphism, information hiding and coupling, can influence quality characteristics like reliability or maintainability. Some predictive models based on OO design metrics are also presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. H. Abbott.; T. D. Korson; J. D. McGregor. </author> <title> "A proposed design complexity measure for objectoriented development". </title> <institution> Clemson University, </institution> <type> TR 94-105, </type> <month> April </month> <year> 1994. </year>
Reference-contexts: This model was validated with data from two systems built with an objectoriented dialect of Ada. A metric derived from the design information captured in class definitions, for measuring the number and strength of the object interactions, was proposed in <ref> [1] </ref>. The authors claim the metrics usefulness for predicting experts' design preferences. To validate this allegation they used 9 sets of distinct design alternatives and compared the evaluations suggested by both the proposed metric and a panel of objectoriented design experts.
Reference: [2] <author> F. B. Abreu; R. </author> <title> Carapua . "Candidate Metrics for Object-Oriented Software within a Taxonomy Framework". Proceedings of AQUIS'93 (Achieving QUality In Software), Venice, Italy, </title> <journal> October 1993; selected for reprint in the Journal of Systems and Software , Vol. </journal> <volume> 23 (1), </volume> <pages> pp. 87-96, </pages> <month> July </month> <year> 1994 </year> . 
Reference-contexts: Since the early days of computer science many approaches to quantify the internal structure of procedural software systems have emerged [31]. Some of those traditional metrics can still be used with the objectoriented paradigm, especially at the method level <ref> [2] </ref>. However, the need to quantify the distinctive features of this paradigm gave birth, in recent years, to new metric sets. Most of those sets have yet to be experimentally validated. This validation step usually consists of correlation studies between internal (design) and external (quality) attributes.
Reference: [3] <author> F. B. Abreu; R. Carapua. </author> <title> "Object-Oriented Software Engineering: Measuring and Controlling the Development Process". </title> <booktitle> Proceedings of the 4th International Conference on Software Quality, </booktitle> <address> McLean, Virginia, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: The main goal of this paper is to evaluate the impact of OO design on software quality characteristics such as defect density and rework by means of experimental validation. In order to measure the OO design characteristics, a suite of metrics called MOOD <ref> [3] </ref> was adopted.
Reference: [4] <author> F. B. Abreu; M. Goulo; R. </author> <title> Esteves . Toward the Design Quality Evaluation of ObjectOriented Software Systems. </title> <booktitle> Proceedings of the 5th International Conference on Software Quality, </booktitle> <address> Austin, Texas, USA, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: Metrics definitions and language bindings This section contains an overview of the MOOD metrics along with abstracted bindings for two OO language s, C++ [28] and Eiffel [23]. Fully detailed bindings for C++ and Eiffel can be found in <ref> [4] </ref> and [5], respectively. Readers familiarized with MOOD metrics can skip to section 3. 2.2.1. <p> These results show how inheritance, one of the most controversial concepts in OO design, appears to be an appropriate technique to reduce defect density and rework, when used sparingly. Very high values of MIF (above the 70% to 80% range <ref> [4] </ref>) are believed to reverse this beneficial effect, but this assumption still lacks experimental validation 6 . Attributes Inheritance Factor (AIF) has a low negative correlation with failure density and a moderate negative correlation with both defect density and normalized rework measure. <p> The results achieved so far allow us to infer that, in fact, the design alternatives may have a strong influence on resulting quality. Quantifying this influence can help to train novice designers by means of heuristics <ref> [4] </ref> embedded in design tools. Being able to predict the resulting reliability and maintainability is very important to project managers during the resource allocation (planning) process. This work is a small step toward the understanding of how software designs affect resulting quality.
Reference: [5] <author> F. B. Abreu; R. Esteves; M. </author> <title> Goulo . The Design of Eiffel Programs: Quantitative Evaluation Using the MOOD Metrics. </title> <type> INESC Technical report, </type> <month> January </month> <year> 1996. </year>
Reference-contexts: Metrics definitions and language bindings This section contains an overview of the MOOD metrics along with abstracted bindings for two OO language s, C++ [28] and Eiffel [23]. Fully detailed bindings for C++ and Eiffel can be found in [4] and <ref> [5] </ref>, respectively. Readers familiarized with MOOD metrics can skip to section 3. 2.2.1.
Reference: [6] <author> L. Arthur. </author> <title> "Improving Software Quality: An Insider's Guide to TQM", </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1993. </year>
Reference: [7] <author> V. Basili; L. Briand; W. </author> <title> Melo . "A Validation of Object-Oriented Design Metrics". </title> <type> Technical Report CS-TR-3343, </type> <institution> University of Maryland, Department of Computer Science, </institution> <month> May. </month> <year> 1995. </year>
Reference-contexts: This validation step usually consists of correlation studies between internal (design) and external (quality) attributes. A brief review of some known validation efforts follows. The MOOSE metrics, a set of OO design metrics [9], were validated using the same project data as those in this paper <ref> [7] </ref>. Besides discussing the metrics' advantages and drawbacks, the authors claim that several of them appear to be adequate for predicting class failure-proneness during the early phases of the life-cycle. Nevertheless, some critics on the MOOSE metrics imprecise and ambiguous definition (lack of language bindings) were raised [10].
Reference: [8] <author> J. M. Bieman; J. X. Zhao. </author> <title> Reuse Through Inheritance: a Quantitative Study of C++ Software . In S. </title> <editor> Samadzadeh and M. Zand (editors), </editor> <booktitle> Proc. of the ACM SIGSOFT Symposium on Software Reusability , Seattle, </booktitle> <address> WA, </address> <month> April 28-30, </month> <year> 1995. </year>
Reference-contexts: One of the most important design options is the degree of incorporation of available library components. This is often referred as external reuse as opposed to internal reuse (reuse through inheritance) <ref> [8] </ref>. Reusable components tend to be better designed than ordinary program code, either because their conception is more careful, or because its repeated use brings out quickly any flaws in its design or implementation.
Reference: [9] <author> S. Chidamber; C. </author> <title> Kemmerer . "A metrics suite for object oriented design". </title> <institution> Center of Information Systems Research (MIT), </institution> <note> WP No. 249, July 1993; also published in IEEE Transactions on Software Engineering , Vol. </note> <month> 20 (6), </month> <pages> pp. 476-493, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Most of those sets have yet to be experimentally validated. This validation step usually consists of correlation studies between internal (design) and external (quality) attributes. A brief review of some known validation efforts follows. The MOOSE metrics, a set of OO design metrics <ref> [9] </ref>, were validated using the same project data as those in this paper [7]. Besides discussing the metrics' advantages and drawbacks, the authors claim that several of them appear to be adequate for predicting class failure-proneness during the early phases of the life-cycle.
Reference: [10] <author> N. I. Churcher; M. J. Shepperd. </author> <title> Comments on A metrics suite for object oriented design . IEEE Transactions on Software Engineering , Vol. </title> <type> 21 (3), </type> <pages> pp. 263-265, </pages> <year> 1995. </year>
Reference-contexts: Besides discussing the metrics' advantages and drawbacks, the authors claim that several of them appear to be adequate for predicting class failure-proneness during the early phases of the life-cycle. Nevertheless, some critics on the MOOSE metrics imprecise and ambiguous definition (lack of language bindings) were raised <ref> [10] </ref>. In [19] the authors used an extension of the MOOSE set to build a regression model that is said to be adequate for predicting changeability (effort of correcting or enhancing classes). This model was validated with data from two systems built with an objectoriented dialect of Ada.
Reference: [11] <author> N. </author> <title> Fenton (editor). "Software Metrics: A Rigorous Approach", </title> <publisher> Chapman & Hall (UK) or Van Nostrand Reinhold (USA), </publisher> <year> 1991. </year>
Reference: [12] <author> E. Gamma; R. Helm; R. Johnson; J. Vlissides. </author> <title> Design Patterns: Elements of Reusable ObjectOriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Among our priorities is the definition of MOOD bindings for Smalltalk and Ada9X in order to conduct new experiments and assess whether adopted languages affect quality characteristics differently. We also intend to launch a research line on the complexity of design patterns <ref> [12] </ref>. These seem to be a natural road to the promised reuse-land. Substantial increases in quality and productivity are expected if software developers really start using these new bricks. The adoption of patterns greatly depends on their understandability, smooth integration (lack of side effects), functionality and reliability.
Reference: [13] <author> W. Humphrey. </author> <title> "Managing the Software Process", SEI Series in Software Engineering, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference: [14] <institution> Institute of Electrical and Electronic Engineers Standards Board. </institution> <note> ANSI/IEEE Standard 982 - Standard Dictionary of Measures to Produce Reliable Software , 1988. </note>
Reference-contexts: Dev. 13.0% 33.9% 19.2% 15.4% 4.5% 7.3% Table 1: MOOD metrics for each project 3.2.2. Process data Using standard terminology <ref> [14] </ref> we say that errors are inaccuracies in the human thinking process committed while trying to understand given information, solving problems or using methods and tools. These errors cause the introduction of defects, also known as faults or bugs, in the software deliverables such as documents or source code.
Reference: [15] <institution> Institute of Electrical and Electronic Engineers Standards Board . ANSI/IEEE P-1061/D21 - Standard for a Software Quality Metrics Methodology . 1990. </institution>
Reference: [16] <institution> International Organization for Standardization . ISO/IEC 9000 / Part 3 - Guidelines for the Application of ISO 9001 to the Development, Supply and Maintenance of Software". ISO JTC1/SC7, </institution> <year> 1995. </year>
Reference: [17] <author> International Organization for Standardization. </author> <title> ISO/IEC 9126 - Information Technology - Software Product Evaluation - Quality Characteristics and Guidelines for their use. ISO JTC1/SC7, 1991 (currently under revision). </title>
Reference: [18] <institution> International Organization for Standardization . ISO/IEC 14598 - Information Technology - Software Product Evaluation. ISO JTC1/SC7, </institution> <note> 1995 (currently in CD stage). </note>
Reference: [19] <author> W. Li; S. </author> <title> Henry . "Object-oriented metrics that predict maintainability". </title> <journal> Journal of Systems and Software, </journal> <volume> Vol. 23 (2), </volume> <pages> pp. 111-122, </pages> <year> 1994. </year>
Reference-contexts: Besides discussing the metrics' advantages and drawbacks, the authors claim that several of them appear to be adequate for predicting class failure-proneness during the early phases of the life-cycle. Nevertheless, some critics on the MOOSE metrics imprecise and ambiguous definition (lack of language bindings) were raised [10]. In <ref> [19] </ref> the authors used an extension of the MOOSE set to build a regression model that is said to be adequate for predicting changeability (effort of correcting or enhancing classes). This model was validated with data from two systems built with an objectoriented dialect of Ada.
Reference: [20] <author> K. J. Lieberherr; I. M. Holland. </author> <title> Assuring Good Style for ObjectOriented Programs, </title> <journal> IEEE Software , pp. </journal> <pages> 38-48, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Being able to predict some software quality characteristics based on the design, is one of our great motivations. This ability will allow the designing process to be guided, for instance, by means of heuristics. One well-known heuristic for objectoriented design is expressed by the Law of Demeter <ref> [20] </ref>. This law restricts the message sending structure of methods in order to organize and reduce dependencies between classes. The authors say ...
Reference: [21] <author> W. Melo; L. Briand; V. Basili. </author> " <title> Measuring the Impact of Reuse on Quality and Productivity in ObjectOriented Systems ". Technical Report CS-TR-3395, </title> <institution> University of Maryland, Department of Computer Science, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: Data gathered in a controlled experiment performed at the University of Maryland <ref> [21] </ref> were used. <p> Collected data In this experiment both product and process data were gathered. Only the relevant data that helped the MOOD metrics validation process will be described here. For further details about how these data were gathered and validated see <ref> [21] </ref>. 3.2.1. Product design data MOODKIT, a tool to extract MOOD metrics from C++ or Eiffel source code was built and is being maintained at INESC. MOODKIT V2 runs on a UNIX platform with Motif interface and is distributed freely for those who want to share the collected data. <p> Therefore the amount of reuse is expected to produce a positive impact on overall system design and, consequently, in resulting software quality characteristics <ref> [21] </ref>. The projects analysed in this paper had different degrees of reuse adoption. The analysis of how the reuse strategies brought about distinct design properties is beyond the scope of this paper.
Reference: [22] <author> B. Meyer. </author> <title> Objectoriented Software Construction. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: This result shows that coupling in software systems has a strong negative impact on software quality and therefore should be kept to the minimum required during design. It is desirable that classes communicate with as few others as possible <ref> [22] </ref> because coupling relations increase complexity, reduce encapsulation and potential reuse, and limit understandability and maintainability. 5 The cumulative impact of MOOD metrics, to be discussed in next section, will show a more elucidative impact of AHF. 6 Increased depth and width of the inheritance hierarchy trees make understandability and testability
Reference: [23] <author> B. Meyer. </author> <title> Eiffel: </title> <publisher> The Language . Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Metrics definitions and language bindings This section contains an overview of the MOOD metrics along with abstracted bindings for two OO language s, C++ [28] and Eiffel <ref> [23] </ref>. Fully detailed bindings for C++ and Eiffel can be found in [4] and [5], respectively. Readers familiarized with MOOD metrics can skip to section 3. 2.2.1.
Reference: [24] <author> R. Pressman. </author> " <title> Software Engineering: a Practitioner's Approach " (3rd edition), </title> <publisher> McGraw-Hill, </publisher> <year> 1992. </year>
Reference: [25] <author> L. Rising; F. </author> <title> Calliss. </title> " <journal> An information hiding metric ". Journal of Systems and Software, </journal> <volume> Vol. 26, </volume> <pages> pp. 211-220, </pages> <year> 1994. </year>
Reference-contexts: They found out that the preferred alternatives were coincident in 80% of the cases. Module and system level metrics for information hiding are described in <ref> [25] </ref>. A validation experiment based on a system with approximately one million lines of Ada 1 code is described. Results showed that those metrics were able to discriminate between packages that are, or are not, likely to undergo significant changes.
Reference: [26] <author> J. Rumbaugh; M. Blaha; W. Premerlani; F. Eddy; W. Lorensen. </author> <title> ObjectOriented Modelling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: During the repair phase, the students were asked to correct their systems based on the defects found by the independent test group. The development environment and technology used were consistent with current practice in industry and academia. Sun Sparc stations were used as implementation platforms. OMT <ref> [26] </ref>, an OO Analysis and Design method, was used during the analysis and design phases. The C++ programming language, the GNU software development environment and OSF/MOTIF were used during the implementation.
Reference: [27] <author> I. Sommerville. </author> " <title> Software Engineering " (4th edition), </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference: [28] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <booktitle> Addison-Wesley Series in Computer Science, 1991 (2nd edition). </booktitle>
Reference-contexts: Metrics definitions and language bindings This section contains an overview of the MOOD metrics along with abstracted bindings for two OO language s, C++ <ref> [28] </ref> and Eiffel [23]. Fully detailed bindings for C++ and Eiffel can be found in [4] and [5], respectively. Readers familiarized with MOOD metrics can skip to section 3. 2.2.1.
Reference: [29] <author> P. Wegner. </author> <title> Dimensions of ObjectOriented Design. </title> <booktitle> Proceedings of the OOPSLA87 Conference, </booktitle> <pages> pp. 168-182, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: an experiment where process and product metrics were collected; section 4 includes statistical analyses on the collected data, discusses the use of the adopted metrics set and proposes and validates software quality predictive models; finally, section 5 concludes the paper by presenting lessons learned and future work. 1 According to <ref> [29] </ref> Ada may be considered as object-based but not objectoriented because its objects (packages) do not have a class (type). 2. Suite of metrics for objectoriented design 2.1.
Reference: [30] <author> D. A. Young. </author> <booktitle> ObjectOriented Programming with C++ and OSF/MOTIF . Prentice-Hall, </booktitle> <year> 1992. </year>
Reference-contexts: OMT [26], an OO Analysis and Design method, was used during the analysis and design phases. The C++ programming language, the GNU software development environment and OSF/MOTIF were used during the implementation. The following libraries were provided to the students: MotifApp - this public domain library <ref> [30] </ref> provides a set of C++ classes on top of OSF/MOTIF for manipulation of windows, dialogs, menus, etc. The MotifApp library provides a way to use the OSF/Motif library in an OO programming/design style.
Reference: [31] <author> H. Zuse. </author> <title> "Software Complexity: Measures and Methods". </title> <address> Walter de Gruyer (New York), </address> <year> 1991. </year>
Reference-contexts: Unfortunately, to the extent of our knowledge, this has yet to be done. Since the early days of computer science many approaches to quantify the internal structure of procedural software systems have emerged <ref> [31] </ref>. Some of those traditional metrics can still be used with the objectoriented paradigm, especially at the method level [2]. However, the need to quantify the distinctive features of this paradigm gave birth, in recent years, to new metric sets. Most of those sets have yet to be experimentally validated.
References-found: 31

