URL: http://www.isi.edu/acal/tech-reports/1994/tr-94-06.ps.Z
Refering-URL: http://www.isi.edu/acal/tech-reports/index.html
Root-URL: http://www.isi.edu
Title: Abstract  
Abstract: The performance of a direct-mapped cache is vital to micro-parallel processors (i.e. VLIW, superscalar, and superpipelined processors). This paper presents a novel method to reduce the number of conict misses of a direct-mapped cache by providing unconventional cache hashing functions based on the data locality patterns of program execution. Our simulation results show that an unconventional cache hashing function applied on a direct-mapped cache results in hit rates as good as a two-way set associative cache with traditional mapping, while the cache hit times are as fast as a direct-mapped cache with traditional mapping. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S.G. Abraham and H. Agusleo, </author> <title> Reducing of Cache Interference Misses through Selective Bit-permutation Mapping, </title> <type> Technical report, </type> <institution> University of Michigan, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Kessler and Hill have investigated several careful page mapping algorithms in an operating system and reported a significant cache miss reduction [14]. Abraham and Agusleo have studied the use of the stride information to change the mapping of address to sets and remove the conicts <ref> [1] </ref>. In the rest of this section, we formally define the cache hashing functions used in this study, including bit selection, bit-ipping, and segmented bit-selection. All these cache hashing functions can be implemented by simple hardware, which might not need an additional pipeline stage for most advanced processors.
Reference: [2] <author> A. Agarwal, M. Horowitz, and J. Hennessy, </author> <title> An Analytical Cache Model, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(2) </volume> <pages> 184-215, </pages> <month> May </month> <year> 1989. </year>
Reference: [3] <author> A. Agarwal and S.D. Pudar, </author> <title> Column-Associative Caches: </title>
References-found: 3

