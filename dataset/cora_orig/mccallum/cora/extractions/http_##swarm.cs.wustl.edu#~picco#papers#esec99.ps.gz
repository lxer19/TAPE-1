URL: http://swarm.cs.wustl.edu/~picco/papers/esec99.ps.gz
Refering-URL: http://swarm.cs.wustl.edu/~picco/listpub.html
Root-URL: http://www.cs.wustl.edu
Email: mascolo@cs.unibo.it  fpicco|romang@cs.wustl.edu  
Phone: 2  
Title: A Fine-Grained Model for Code Mobility  
Author: Cecilia Mascolo ; Gian Pietro Picco and Gruia-Catalin Roman 
Address: Mura Anteo Zamboni, 7. 40127 Bologna, Italy.  Campus Box 1045, One Brookings Drive, Saint Louis, MO 63130-4899, USA.  
Affiliation: 1 Dip. di Scienze dell'Informazione. University of Bologna.  Dept. of Computer Science, Washington University,  
Abstract: In this paper we take the extreme view that every line of code is potentially mobile, i.e., may be duplicated and/or moved from one program context to another on the same host or across the network. Our motivation is to gain a better understanding of the range of constructs and issues facing the designer of a mobile code system, in a setting that is abstract and unconstrained by compilation and performance considerations traditionally associated with programming language design. Incidental to our study is an evaluation of the expressive power of Mobile Unity, a notation and proof logic for mobile computing. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Amadio. </author> <title> An Asynchronous Model of Locality, Failure, and Process Mobility. </title> <booktitle> In Proc. of the 2 nd Int. Conf. on Coordination Models and Languages (COORDINATION '97), </booktitle> <publisher> LNCS 1282. Springer, </publisher> <year> 1997. </year>
Reference-contexts: However, in -calculus there is no notion of location, and movement is modeled by passing a name on a channel. This limitation has been recognized and an explicit notion of location has been modeled, e.g., in <ref> [1] </ref> and also in [13], where a tuplespace-based language is presented. In the ambient calculus [4], the notion of location is central. Ambients are self-contained nested environments that contain data and processes.
Reference: 2. <author> M. </author> <title> Baldi and G.P. Picco. Evaluating the Tradeoffs of Mobile Code Design Paradigms in Network Management Applications. </title> <booktitle> In Proc. of the 20 th Int. Conf. on Software Engineering, </booktitle> <year> 1998. </year>
Reference-contexts: One of the authors has been involved in the implementation of mobile code applications where this fact has been observed experimentally <ref> [2] </ref>. This experience eventually led to the implementation of a system, called Code [14], whose goals are to provide a minimal set of programming constructs that handle the relocation of arbitrary code and state, and still exploit composability to create higher level abstractions like mobile agents.
Reference: 3. <author> L. Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> In Proc. 22 nd ACM Symp. on Principles of Programming Languages (POPL), </booktitle> <year> 1995. </year>
Reference-contexts: Java, Tcl, and derivatives support the movement of architecture-independent code that can be shipped across the network and interpreted at execution time [9, 8]. Obliq <ref> [3] </ref> permits the movement of code along with the reference to resources it needs to carry out its functions. Telescript [16] is representative of a class of languages in which fully encapsulated program units called agents migrate from site to site.
Reference: 4. <author> L. Cardelli and A. Gordon. </author> <booktitle> Mobile Ambients. In Proc. of Foundations of Software Science and Computation Structures (FoSSaCS), European Joint Conferences on Theory and Practice of Software (ETAPS'98), LNCS 1378, </booktitle> <address> Lisbon, Portugal, 1998. </address> <publisher> Springer. </publisher>
Reference-contexts: Basic differences in mathematical foundations, underlying philosophy, and technical objectives led to models very diverse in flavor. The -calculus [12] is based on algebra and treats mobility as the ability to dynamically change structure through the passing of names of entities including communication channels. The ambient calculus <ref> [4] </ref> is also algebraic in style but emphasizes the manipulation of and access to administrative domains captured by a notion of scoping. <p> This limitation has been recognized and an explicit notion of location has been modeled, e.g., in [1] and also in [13], where a tuplespace-based language is presented. In the ambient calculus <ref> [4] </ref>, the notion of location is central. Ambients are self-contained nested environments that contain data and processes. Ambients can be moved although movement is constrained to be within the boundaries of adjacent locations|i.e., there is no global notion of localities.
Reference: 5. <author> C. Fournet, G. Gonthier, J.J. Levy, L. Maranget, and D. Remy. </author> <title> A Calculus of Mobile Agents. </title> <booktitle> In Proc. 7 th Int. Conf. on Concurrency Theory (CONCUR), </booktitle> <publisher> LNCS 1119. Springer, </publisher> <year> 1996. </year>
Reference-contexts: No modification to the Mobile Unity notation and logic was required, a fact that makes a strong case for its flexibility. Other languages for the specification of mobile code systems have been devised, and many of them (e.g., <ref> [5] </ref>) are based on a process algebra that extends -calculus [12]. However, in -calculus there is no notion of location, and movement is modeled by passing a name on a channel.
Reference: 6. <author> A. Fuggetta, G.P. Picco, and G. Vigna. </author> <title> Understanding Code Mobility. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 24(5), </volume> <year> 1998. </year>
Reference-contexts: Other paradigms, like remote evaluation, or code on demand <ref> [6] </ref> require the ability to express the distinction between the unit of execution and a|smaller|unit of mobility that can be linked dynamically to extend and reconfigure the behavior of the unit of execution.
Reference: 7. <author> C. Ghezzi and G. Vigna. </author> <title> Mobile Code Paradigms and Technologies: A Case Study. </title> <booktitle> In Proc. 1 st Int. Workshop on Mobile Agents, </booktitle> <publisher> LNCS 1219. Springer, </publisher> <year> 1997. </year>
Reference-contexts: Surprisingly enough, the coincidence of unit of mobility and execution is also a common choice for systems supporting mobile code. Although relocation paradigms are in principle independent from the implementation technology, it has been pointed out <ref> [7] </ref> that the abstractions provided by the latter play a key role as far as ease of programming and overall performance are concerned.
Reference: 8. <author> R. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <booktitle> In Proc. of the CIKM Workshop on Intelligent Information Agents, </booktitle> <year> 1995. </year>
Reference-contexts: Java, Tcl, and derivatives support the movement of architecture-independent code that can be shipped across the network and interpreted at execution time <ref> [9, 8] </ref>. Obliq [3] permits the movement of code along with the reference to resources it needs to carry out its functions. Telescript [16] is representative of a class of languages in which fully encapsulated program units called agents migrate from site to site.
Reference: 9. <author> J. Kiniry and D. Zimmerman. </author> <title> A Hands-On Look at Java Mobile Agents. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(4), </volume> <year> 1997. </year>
Reference-contexts: Java, Tcl, and derivatives support the movement of architecture-independent code that can be shipped across the network and interpreted at execution time <ref> [9, 8] </ref>. Obliq [3] permits the movement of code along with the reference to resources it needs to carry out its functions. Telescript [16] is representative of a class of languages in which fully encapsulated program units called agents migrate from site to site.
Reference: 10. <author> P.J. McCann and G-.C. Roman. </author> <title> Modeling Mobile IP in Mobile UNITY. </title> <journal> ACM Trans. on Software Engineering and Methodology. </journal> <note> To appear. </note>
Reference-contexts: This applica-tion of Mobile Unity is novel. Mobile Unity has been used previously in the definition of high level transient interactions (e.g., transiently and transitively shared variables) in both a physical and logical mobile setting [11], in formal specification and verification of Mobile IP <ref> [10] </ref>, and in the specification and verification of mobile code paradigms (e.g., code on demand, remote evaluation, and mobile agents) [15]. The structure of the paper is the following. Section 2 contains an informal overview of the model.
Reference: 11. <author> P.J. McCann and G.-C. Roman. </author> <title> Compositional Programming Abstractions for Mobile Computing. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 24(2), </volume> <year> 1998. </year>
Reference-contexts: The ambient calculus [4] is also algebraic in style but emphasizes the manipulation of and access to administrative domains captured by a notion of scoping. Mobile Unity <ref> [11] </ref> is a state transition system in which the notion of location is made explicit and component interactions are defined by coordination constructs external to the components' code. <p> This applica-tion of Mobile Unity is novel. Mobile Unity has been used previously in the definition of high level transient interactions (e.g., transiently and transitively shared variables) in both a physical and logical mobile setting <ref> [11] </ref>, in formal specification and verification of Mobile IP [10], and in the specification and verification of mobile code paradigms (e.g., code on demand, remote evaluation, and mobile agents) [15]. The structure of the paper is the following. Section 2 contains an informal overview of the model.
Reference: 12. <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes I. </title> <journal> Information and Computation, </journal> <volume> 100(1), </volume> <year> 1992. </year>
Reference-contexts: Basic differences in mathematical foundations, underlying philosophy, and technical objectives led to models very diverse in flavor. The -calculus <ref> [12] </ref> is based on algebra and treats mobility as the ability to dynamically change structure through the passing of names of entities including communication channels. The ambient calculus [4] is also algebraic in style but emphasizes the manipulation of and access to administrative domains captured by a notion of scoping. <p> No modification to the Mobile Unity notation and logic was required, a fact that makes a strong case for its flexibility. Other languages for the specification of mobile code systems have been devised, and many of them (e.g., [5]) are based on a process algebra that extends -calculus <ref> [12] </ref>. However, in -calculus there is no notion of location, and movement is modeled by passing a name on a channel. This limitation has been recognized and an explicit notion of location has been modeled, e.g., in [1] and also in [13], where a tuplespace-based language is presented.
Reference: 13. <author> R. De Nicola, G. Ferrari, and R. Pugliese. KLAIM: </author> <title> A Kernel Language for Agents Interaction and Mobility. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 24(5), </volume> <year> 1998. </year>
Reference-contexts: However, in -calculus there is no notion of location, and movement is modeled by passing a name on a channel. This limitation has been recognized and an explicit notion of location has been modeled, e.g., in [1] and also in <ref> [13] </ref>, where a tuplespace-based language is presented. In the ambient calculus [4], the notion of location is central. Ambients are self-contained nested environments that contain data and processes.
Reference: 14. <author> G.P. Picco. </author> <title> Code: A Lightweight and Flexible Mobile Code Toolkit. </title> <editor> In K. Rother-mel and F. Hohl, editors, </editor> <booktitle> Proc. 2nd Int. Workshop on Mobile Agents, </booktitle> <publisher> LNCS 1477. Springer, </publisher> <year> 1998. </year>
Reference-contexts: One of the authors has been involved in the implementation of mobile code applications where this fact has been observed experimentally [2]. This experience eventually led to the implementation of a system, called Code <ref> [14] </ref>, whose goals are to provide a minimal set of programming constructs that handle the relocation of arbitrary code and state, and still exploit composability to create higher level abstractions like mobile agents.
Reference: 15. <author> G.P. Picco, G.-C. Roman, and P. McCann. </author> <title> Expressing Code Mobility in Mobile UNITY. </title> <booktitle> In Proc. 6 th European Software Eng. Conf. </booktitle> <address> (ESEC/FSE'97), </address> <publisher> LNCS 1301. Springer, </publisher> <year> 1997. </year>
Reference-contexts: the definition of high level transient interactions (e.g., transiently and transitively shared variables) in both a physical and logical mobile setting [11], in formal specification and verification of Mobile IP [10], and in the specification and verification of mobile code paradigms (e.g., code on demand, remote evaluation, and mobile agents) <ref> [15] </ref>. The structure of the paper is the following. Section 2 contains an informal overview of the model. In Section 3 we introduce the overall structure of the model, in Section 4 we give a description of the mobility primitives of our model, and Section 5 defines their formal semantics. <p> The complete list of commands and the corresponding formalization appear in Figure 7 and 9. 6 Discussion The model presented in this paper is the result of the combination of different research questions. On one hand, it can be regarded as a follow-up of the work described in <ref> [15] </ref>, where mobile code design paradigms were modeled using standard 17 F (move; u; i; v; (l)) = (l ffi u i ) F (put; u; i; v; (j; l)) = (getid (v); l ffi u j ) F (clone; u; i; v; (j; l)) = (getid (v); l ffi u
Reference: 16. <author> J. White. </author> <title> Telescript Technology: Mobile Agents. </title> <editor> In J. Bradshaw, editor, </editor> <booktitle> Software Agents. </booktitle> <publisher> AAAI Press/MIT Press, </publisher> <year> 1996. </year> <month> 20 </month>
Reference-contexts: Java, Tcl, and derivatives support the movement of architecture-independent code that can be shipped across the network and interpreted at execution time [9, 8]. Obliq [3] permits the movement of code along with the reference to resources it needs to carry out its functions. Telescript <ref> [16] </ref> is representative of a class of languages in which fully encapsulated program units called agents migrate from site to site. Location, movement, unit of mobility, and resource access are concepts present in all mobile code languages.
References-found: 16

