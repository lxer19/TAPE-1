URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-93-02.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Rapid Exploration of Curvilinear Grids Using Direct Volume Rendering  
Author: Allen Van Gelder and Jane Wilhelms 
Date: October 14, 1993  
Address: Santa Cruz 95064  
Affiliation: Computer and Information Sciences University of California,  
Pubnum: UCSC-CRL-93-02  
Abstract: Fast techniques for direct volume rendering over curvilinear grids of hexahedral cells are developed. This type of 3D grid is common in computational fluid dynamics and finite element analysis. Four new projection methods are presented and compared with each other and with previous methods for tetrahedral grids and rectilinear grids. All four methods use polygon-rendering hardware for speed. A simplified algorithm for visibility ordering, which is based on a combination of breadth-first and depth-first searches, is described. A new multi-pass blending method is described that reduces visual artifacts that are introduced by linear interpolation in hardware where exponential interpolation is needed. Multi-pass blending is of equal interest to hardware-oriented projection methods used on rectilinear grids. Visualization tools that permit rapid data banding and cycling through transfer functions, as well as region restriction, are described. 
Abstract-found: 1
Intro-found: 1
Reference: [Cha90] <author> Judy Challinger. </author> <title> Object-Oriented rendering of volumetric and geometric primitives. </title> <type> Master's thesis, </type> <institution> University of Califoria, Santa Cruz, UCSC Computer and Information Sciences, Applied Sciences Building, </institution> <address> Santa Cruz, CA 95064, </address> <year> 1990. </year>
Reference-contexts: Challinger implemented a kind of hybrid ray-caster/projection method where she sorted cells faces by scanline and pixel rather like a scan conversion algorithm for polygons, but then ray-cast faces present in a single pixel <ref> [WCA + 90, Cha90] </ref>. This approach was also slower than we desired.
Reference: [DCH88] <author> Robert A. Drebin, Loren Carpenter, and Pat Hanrahan. </author> <title> Volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 65-74, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Generally, the mapping from data values to color and opacity is done using a simple transfer function. (For certain types of volumes, e.g., medical images, more complex methods such as material percentages may be desirable <ref> [DCH88] </ref>.) We typically use an interactive transfer function editor to design the mapping from data to color and opacity, but as rendering became faster, we discovered that a significant amount of time was spent in trying to find desirable transfer functions [Ram90].
Reference: [Gar90] <author> Michael P. Garrity. </author> <title> Raytracing irregular volume data. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 35-40, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Previous work on projection methods for direct volume rendering is largely limited to a plethora of work on regular grids. Some work has been done on ray-casting irregular grids <ref> [Gar90, Use91, RW92] </ref>. A few researchers have explored projection methods on such grids.
Reference: [HB85] <author> Ching-Mao Hung and Pieter G. Buning. </author> <title> Simulation of blunt-fin-induced shock-wave and turbulent boundary-layer interaction. </title> <journal> J. Fluid Mechanics, </journal> <volume> 154 </volume> <pages> 163-185, </pages> <year> 1985. </year>
Reference-contexts: The grids present problems for direct volume rendering because cells vary greatly in size (e.g., neighbor distances in a commonly used grid vary by a factor of 10,000 <ref> [HB85] </ref>), cells may have irregular shapes, and they may be degenerate (e.g., multiple sample points in computational space may map to the same physical space location). <p> Fin Data. (Time in CPU seconds.) features of interest. 6 Experimental Results We explored these methods on two curvilinear grids. (The software works on a regular grid, but it is not optimized to take advantage of the greater simplicity of these grids.) The curvilinear grids tested were the "blunt fin" <ref> [HB85] </ref> and the "post" [RKK86], both from NASA-Ames Research Center. The curvilinear grid structure for these grids can be seen in Figure 3. The blunt fin is a 40x32x32 grid containing 40,960 samples, and the post is a 38x76x38 grid containing 109,744 samples.
Reference: [Kru90] <author> Wolfgang Krueger. </author> <title> Volume rendering and data feature enhancement. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):21 - 26, </volume> <year> 1990. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays <ref> [Lev88, UK88, Kru90] </ref>, or by projecting sample regions or cells within the volume to the screen [UK88, Wes90, LH91, MHC90, ST90, WVG91]. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. <p> Because curvilinear grids can wrap around (see Figure 3), calculating this visibility ordering is nontrivial [MHC90, Wil92b]. Further, accumulating color and opacity values correctly in depth involves an exponential function <ref> [Kru90, MHC90, WVG91] </ref>. To approximate this quickly by a quadratic, we have developed a multi-pass blending method. These issues are discussed in section 3. Direct volume rendering is an intriguing and desirable method because of the amount of information that can be included in one image.
Reference: [Lev88] <author> Marc Levoy. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(3) </volume> <pages> 29-37, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays <ref> [Lev88, UK88, Kru90] </ref>, or by projecting sample regions or cells within the volume to the screen [UK88, Wes90, LH91, MHC90, ST90, WVG91]. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur.
Reference: [LH91] <author> David Laur and Pat Hanrahan. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year> <month> 12 </month>
Reference-contexts: Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays [Lev88, UK88, Kru90], or by projecting sample regions or cells within the volume to the screen <ref> [UK88, Wes90, LH91, MHC90, ST90, WVG91] </ref>. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur [WVG91]. <p> Then we find the centroid of the cell and its depth and estimated value. By triangulation, the centroid is connected to the convex hull vertices, and these triangles sent to the screen. This is rather like the "splatting" method that is quite fast and successful for regular grids <ref> [Wes90, LH91] </ref>. Although, splatting is normally done as a region around a sample data point, not as a cell between sample data points. Unfortunately, the images produced on our irregular grids were very blotchy from oblique angles.
Reference: [MHC90] <author> Nelson Max, Pat Hanrahan, and Roger Crawfis. </author> <title> Area and volume coherence for efficient visualization of 3d scalar functions. </title> <booktitle> Computer Graphics (ACM Workshop on Volume Visualization), </booktitle> <volume> 24(5) </volume> <pages> 27-33, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays [Lev88, UK88, Kru90], or by projecting sample regions or cells within the volume to the screen <ref> [UK88, Wes90, LH91, MHC90, ST90, WVG91] </ref>. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur [WVG91]. <p> To take into account opacity, a front-to-back ordering must be established, because cells (defined by eight corner sample points) in front may partially or totally obscure those behind. Because curvilinear grids can wrap around (see Figure 3), calculating this visibility ordering is nontrivial <ref> [MHC90, Wil92b] </ref>. Further, accumulating color and opacity values correctly in depth involves an exponential function [Kru90, MHC90, WVG91]. To approximate this quickly by a quadratic, we have developed a multi-pass blending method. These issues are discussed in section 3. <p> Because curvilinear grids can wrap around (see Figure 3), calculating this visibility ordering is nontrivial [MHC90, Wil92b]. Further, accumulating color and opacity values correctly in depth involves an exponential function <ref> [Kru90, MHC90, WVG91] </ref>. To approximate this quickly by a quadratic, we have developed a multi-pass blending method. These issues are discussed in section 3. Direct volume rendering is an intriguing and desirable method because of the amount of information that can be included in one image. <p> Some work has been done on ray-casting irregular grids [Gar90, Use91, RW92]. A few researchers have explored projection methods on such grids. Max et al. describe a careful and general method that we felt was too slow for our needs <ref> [MHC90] </ref>. 3 Williams takes the approach of breaking curvilinear grid cells into five tetrahedra each and projecting the tetrahedra [Wil92b, Wil92a]. <p> An additional issue becomes prominent in using opacity with hardware interpolation and blending. As mentioned in earlier papers, linear interpolation used in Gouraud-shading polygons produces an incorrect estimate of intensity and opacity across the projected polygon, even when the vertex values are calculated fairly accurately <ref> [MHC90, WVG91] </ref>. By using a method we call "multi-pass blending", we can approximate the correct intensity and opacity and still use the hardware polygon renderer. <p> Decomposing into tetrahedra multiplies the number of cells by 5. The other side of the coin is that tetrahedra are simpler to render. The main idea that is well known for efficient visibility ordering is that of linear-time topological sorting <ref> [MHC90, Wil92b] </ref>. Recall that a topological sort of a directed acyclic graph is an ordering (or numbering) of its vertices such that there is no path from a smaller vertex to a larger one. This can be accomplished in linear time by a depth-first search and post-order numbering. <p> For convex volumes, topological sort finds a visibility order if one exists and discovers a cycle otherwise <ref> [MHC90, Wil92b] </ref>. Nonconvex volumes occur often in practice, so it is important for an algorithm to work well on them, too. Here there is no definite theory known. Williams describes an heuristic for nonconvex volumes. We present an alternative that is considerably simpler, for connected, possibly nonconvex, volumes.
Reference: [Ram90] <author> Shankar Ramamoorthy. </author> <title> An interactive transfer function editor. </title> <type> Internal Technical Report, </type> <year> 1990. </year>
Reference-contexts: complex methods such as material percentages may be desirable [DCH88].) We typically use an interactive transfer function editor to design the mapping from data to color and opacity, but as rendering became faster, we discovered that a significant amount of time was spent in trying to find desirable transfer functions <ref> [Ram90] </ref>. In section 4 we discuss some new methods of rapidly designing and changing transfer functions for volume exploration. The final area of research discussed in this paper is zeroing in on regions of interest and inverting the mapping from image to volume. <p> The extra time in computation and rendering are substantial (see Table 1. 4 Transfer Function Manipulation For some time we have used an interactive transfer function editor to design the mapping between data values and color and opacity <ref> [Ram90] </ref>. While it is certainly more pleasant than designing mappings without it, we found it quite frustrating and time-consuming to try and guess which mappings bring out regions of interest. Therefore, we developed a fast method of scanning the volume.
Reference: [RKK86] <author> S. E. Rogers, D. Kwak, and U. K. Kaul. </author> <title> A numerical study of three-dimensional incompressible flow around multiple posts, 1986. </title> <type> AIAA paper 86-0353, </type> <address> Reno, Nevada. </address>
Reference-contexts: CPU seconds.) features of interest. 6 Experimental Results We explored these methods on two curvilinear grids. (The software works on a regular grid, but it is not optimized to take advantage of the greater simplicity of these grids.) The curvilinear grids tested were the "blunt fin" [HB85] and the "post" <ref> [RKK86] </ref>, both from NASA-Ames Research Center. The curvilinear grid structure for these grids can be seen in Figure 3. The blunt fin is a 40x32x32 grid containing 40,960 samples, and the post is a 38x76x38 grid containing 109,744 samples.
Reference: [RW92] <author> Shankar Ramamoorthy and Jane Wilhelms. </author> <title> An analysis of approaches to ray-tracing curvilinear grids. </title> <type> Technical Report UCSC-CRL-92-07, </type> <institution> UCSC, University of California, CIS Board, </institution> <address> Santa Cruz, CA, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Initial explorations convinced us that using ray-casting to directly render these volumes was unacceptably slow <ref> [RW92] </ref>. The main thrust of this paper is to explore more rapid, projection-based, methods. It is hard to compare these very different approaches exactly, because the ray-caster ran on a different machine and ray-casting is very sensitive to image size and volume orientation. <p> Previous work on projection methods for direct volume rendering is largely limited to a plethora of work on regular grids. Some work has been done on ray-casting irregular grids <ref> [Gar90, Use91, RW92] </ref>. A few researchers have explored projection methods on such grids.
Reference: [ST90] <author> Peter Shirley and Allan Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays [Lev88, UK88, Kru90], or by projecting sample regions or cells within the volume to the screen <ref> [UK88, Wes90, LH91, MHC90, ST90, WVG91] </ref>. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur [WVG91].
Reference: [UK88] <author> Craig Upson and Michael Keeler. </author> <title> The v-buffer: Visible volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 59-64, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays <ref> [Lev88, UK88, Kru90] </ref>, or by projecting sample regions or cells within the volume to the screen [UK88, Wes90, LH91, MHC90, ST90, WVG91]. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays [Lev88, UK88, Kru90], or by projecting sample regions or cells within the volume to the screen <ref> [UK88, Wes90, LH91, MHC90, ST90, WVG91] </ref>. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur [WVG91].
Reference: [Use91] <author> Sam Uselton. </author> <title> Volume rendering for computational flid dynamics: Initial results. </title> <type> Technical Report RNR-91-026, </type> <institution> NAS-NASA Ames Research Center, Moffett Field, </institution> <address> CA, </address> <year> 1991. </year>
Reference-contexts: Previous work on projection methods for direct volume rendering is largely limited to a plethora of work on regular grids. Some work has been done on ray-casting irregular grids <ref> [Gar90, Use91, RW92] </ref>. A few researchers have explored projection methods on such grids.
Reference: [WCA + 90] <author> Jane Wilhelms, Judy Challinger, Naim Alper, Shankar Ramamoorthy, and Arsi Vaziri. </author> <title> Direct volume rendering of curvilinear volumes. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 41-47, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Challinger implemented a kind of hybrid ray-caster/projection method where she sorted cells faces by scanline and pixel rather like a scan conversion algorithm for polygons, but then ray-cast faces present in a single pixel <ref> [WCA + 90, Cha90] </ref>. This approach was also slower than we desired.
Reference: [Wes90] <author> Lee Westover. </author> <title> Footprint evaluation for volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 367-76, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays [Lev88, UK88, Kru90], or by projecting sample regions or cells within the volume to the screen <ref> [UK88, Wes90, LH91, MHC90, ST90, WVG91] </ref>. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur [WVG91]. <p> Then we find the centroid of the cell and its depth and estimated value. By triangulation, the centroid is connected to the convex hull vertices, and these triangles sent to the screen. This is rather like the "splatting" method that is quite fast and successful for regular grids <ref> [Wes90, LH91] </ref>. Although, splatting is normally done as a region around a sample data point, not as a cell between sample data points. Unfortunately, the images produced on our irregular grids were very blotchy from oblique angles.
Reference: [Wil92a] <author> Peter Williams. </author> <title> Interactive splatting of nonrectilinear volumes. </title> <booktitle> In Visualization '92, </booktitle> <pages> pages 37-44. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: The problem of achieving acceptably fast direct volume rendering is exacerbated if sample volumes are not on a regular rectilinear grid. Our goal in this investigation was to achieve some of these gains on curvilinear grids of hexahedral cells. Williams has studied related issues on tetrahedral grids <ref> [Wil92b, Wil92a] </ref>. In our application, computational fluid dynamics, curvilinear grids are common. A curvilinear grid can be thought of as a 3-dimensional rectilinear grid in computational space that is "warped" in physical space around regions of interest (e.g., aircraft wings). <p> A few researchers have explored projection methods on such grids. Max et al. describe a careful and general method that we felt was too slow for our needs [MHC90]. 3 Williams takes the approach of breaking curvilinear grid cells into five tetrahedra each and projecting the tetrahedra <ref> [Wil92b, Wil92a] </ref>. While this is a quite rapid and reasonable approach, we hoped to achieve more speed and to avoid the explosion of primitives this involves, as well as some of the artifacts. At some point it would be worthwhile to do an in-depth comparison of this method with ours. <p> Table 1 shows the rendering times for our four volume rendering methods using these two grids. Times are user and system CPU seconds on a Silicon Graphics uniprocessor VGX. For comparison, Williams reports times of around 15 seconds for volumes comparable in size to the blunt fin <ref> [Wil92a] </ref>. His images might be described as intermediate in quality. Coherent projection required about 4 to 7 seconds on a comparable rectilinear grid. First we consider our four direct volume rendering methods.
Reference: [Wil92b] <author> Peter Williams. </author> <title> Visibility ordering meshed polyhedra. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(2) </volume> <pages> 103-126, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> The problem of achieving acceptably fast direct volume rendering is exacerbated if sample volumes are not on a regular rectilinear grid. Our goal in this investigation was to achieve some of these gains on curvilinear grids of hexahedral cells. Williams has studied related issues on tetrahedral grids <ref> [Wil92b, Wil92a] </ref>. In our application, computational fluid dynamics, curvilinear grids are common. A curvilinear grid can be thought of as a 3-dimensional rectilinear grid in computational space that is "warped" in physical space around regions of interest (e.g., aircraft wings). <p> To take into account opacity, a front-to-back ordering must be established, because cells (defined by eight corner sample points) in front may partially or totally obscure those behind. Because curvilinear grids can wrap around (see Figure 3), calculating this visibility ordering is nontrivial <ref> [MHC90, Wil92b] </ref>. Further, accumulating color and opacity values correctly in depth involves an exponential function [Kru90, MHC90, WVG91]. To approximate this quickly by a quadratic, we have developed a multi-pass blending method. These issues are discussed in section 3. <p> A few researchers have explored projection methods on such grids. Max et al. describe a careful and general method that we felt was too slow for our needs [MHC90]. 3 Williams takes the approach of breaking curvilinear grid cells into five tetrahedra each and projecting the tetrahedra <ref> [Wil92b, Wil92a] </ref>. While this is a quite rapid and reasonable approach, we hoped to achieve more speed and to avoid the explosion of primitives this involves, as well as some of the artifacts. At some point it would be worthwhile to do an in-depth comparison of this method with ours. <p> This is described in subsection 3.2. 3.1 Visibility Ordering A visibility ordering, which is an ordering on the cells such that no earlier cell occludes a later cell in screen space, is necessary to render cells with semi-transparency. Visibility ordering issues for tetrahedra were thoroughly explored by Williams <ref> [Wil92b] </ref>, with attention to nonconvex volumes. This section outlines an implementation for curvilinear grids that is considerably simpler and is robust in practice. The main ideas are applicable to tetrahedral grids as well. Two issues concerning visibility ordering are: does one exist, and if so, how to find one. <p> Decomposing into tetrahedra multiplies the number of cells by 5. The other side of the coin is that tetrahedra are simpler to render. The main idea that is well known for efficient visibility ordering is that of linear-time topological sorting <ref> [MHC90, Wil92b] </ref>. Recall that a topological sort of a directed acyclic graph is an ordering (or numbering) of its vertices such that there is no path from a smaller vertex to a larger one. This can be accomplished in linear time by a depth-first search and post-order numbering. <p> For convex volumes, topological sort finds a visibility order if one exists and discovers a cycle otherwise <ref> [MHC90, Wil92b] </ref>. Nonconvex volumes occur often in practice, so it is important for an algorithm to work well on them, too. Here there is no definite theory known. Williams describes an heuristic for nonconvex volumes. We present an alternative that is considerably simpler, for connected, possibly nonconvex, volumes.
Reference: [WVG91] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> A coherent projection approach for direct volume rendering. </title> <booktitle> Computer Graphics (Proceedings ACM Siggraph), </booktitle> <volume> 25(4) </volume> <pages> 275-284, </pages> <year> 1991. </year> <month> 13 </month>
Reference-contexts: Direct volume rendering is a visualization method for scalar sample data volumes where values within the volume are mapped to color and opacity and directly rendered by accumulating these color and opacity values to the screen pixels <ref> [DCH88, Lev88, UK88, Kru90, Wes90, MHC90, ST90, WVG91, Wil92b] </ref>. Any part of the volume may be visible in the final semi-transparent image. <p> Any part of the volume may be visible in the final semi-transparent image. Direct volume rendering can be done by casting rays through pixels into the volume and traversing the rays [Lev88, UK88, Kru90], or by projecting sample regions or cells within the volume to the screen <ref> [UK88, Wes90, LH91, MHC90, ST90, WVG91] </ref>. Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur [WVG91]. <p> Projection must be in front-to-back or back-to-front order for correct compositing if opacity values between zero and one occur. If interpolation between sample points and integration in depth are not done accurately visual artifacts may occur <ref> [WVG91] </ref>. Further, because no geometric primitives such as polygonal isosurfaces are extracted, most or all of the work of direct volume rendering must be repeated if the viewpoint changes. For these reasons, direct volume rendering is an expensive technique to do well. <p> Because curvilinear grids can wrap around (see Figure 3), calculating this visibility ordering is nontrivial [MHC90, Wil92b]. Further, accumulating color and opacity values correctly in depth involves an exponential function <ref> [Kru90, MHC90, WVG91] </ref>. To approximate this quickly by a quadratic, we have developed a multi-pass blending method. These issues are discussed in section 3. Direct volume rendering is an intriguing and desirable method because of the amount of information that can be included in one image. <p> It builds upon the "coherent projection" technique for rectilinear grids <ref> [WVG91] </ref>, and extends it to general convex hexahedra. The main idea is to render the 2-dimensional projection of each cell as an arrangement of polygons. For an orthogonal projection of a rectilinear cell there are 3 nondegenerate and 11 degenerate projection topologies. <p> An additional issue becomes prominent in using opacity with hardware interpolation and blending. As mentioned in earlier papers, linear interpolation used in Gouraud-shading polygons produces an incorrect estimate of intensity and opacity across the projected polygon, even when the vertex values are calculated fairly accurately <ref> [MHC90, WVG91] </ref>. By using a method we call "multi-pass blending", we can approximate the correct intensity and opacity and still use the hardware polygon renderer.
References-found: 19

