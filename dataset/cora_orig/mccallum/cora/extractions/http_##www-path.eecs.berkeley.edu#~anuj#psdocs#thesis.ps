URL: http://www-path.eecs.berkeley.edu/~anuj/psdocs/thesis.ps
Refering-URL: http://www-path.eecs.berkeley.edu/~anuj/thesis/thesis.html
Root-URL: http://www.cs.berkeley.edu
Title: Theory of Hybrid Systems and Discrete Event Systems  
Author: by Anuj Puri 
Degree: 1989 M.S. (University of California at Berkeley) 1991 A dissertation submitted in partial satisfaction of the requirements for the degree of Doctor of Philosophy in Engineering-Electrical Engineering and Computer Sciences in the GRADUATE DIVISION of the UNIVERSITY of CALIFORNIA at BERKELEY Committee in charge: Professor Pravin Varaiya, Chair Professor Robert Brayton Professor Shmuel Oren  
Date: 1995  
Affiliation: B.S. (Virginia Polytechnic Institute and State University)  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Abraham, J.E. Marsden, and T. Raitu, </author> <title> Manifolds, Tensor Analysis, and Applications, </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Example 4.2.1 Consider the differential equation _x = f (x) = 2x, and X 0 = <ref> [1; 2] </ref>. Then Reach f (X 0 ; t) = [e 2t ; 2e 2t ], Reach f (X 0 ; [0; t]) = [e 2t ; 2] and Reach f (X 0 ; [0; 1)] = (0; 2]. <p> Example 4.2.2 For the differential equation _x = f (x) = 2x, the differential inclusion _x 2 f * (x) = [2x *; 2x + *]. For X 0 = <ref> [1; 2] </ref>, the reach set Reach f * (X 0 ; t) = [e 2t + *(e 2t 1); 2e 2t + *(1 e 2t )] and for * &lt; 2, Reach f * (X 0 ; [0; 1)] = (*; 2]. <p> Example 4.2.3 For the differential equation _x = 2x and X 0 = <ref> [1; 2] </ref>, T raj f (X 0 ) = f ([x (0)e 2m ]) m2Z + : x (0) 2 [1; 2]g. the points that are sampled every time units. The sequence of grids in which the "crosses" appear is recorded, and forms the sampled trajectory. <p> Example 4.2.3 For the differential equation _x = 2x and X 0 = <ref> [1; 2] </ref>, T raj f (X 0 ) = f ([x (0)e 2m ]) m2Z + : x (0) 2 [1; 2]g. the points that are sampled every time units. The sequence of grids in which the "crosses" appear is recorded, and forms the sampled trajectory. Notice, it is not the sampled value that is recorded, but the grid in which the sample point appears that is recorded. <p> The contingent cone to I at x is the set T I (x) = fvj lim dist ((x + hv); I) h The result characterizing invariant sets under _x 2 f (x) is that I is invariant under f iff for x 2 I, f (x) T I (x) <ref> [6, 1] </ref>. Definition 4.5.2 A set I is *-invariant provided for all x 2 I, f * (x) T I (x). 53 Definition 4.5.2 states that the set I is *-invariant provided it is invariant under *-perturbations of f .
Reference: [2] <author> R. Alur et. al., </author> <title> The Algorithmic Analysis of Hybrid Systems, </title> <booktitle> Theoretical Computer Science, </booktitle> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: On the edge from B to A, the guard is g = fxjx 2g, and x is nondeterministically assigned a value in the interval <ref> [2; 4] </ref>. 2.3.2 Transition System of Hybrid Automata The state space of the hybrid automaton is Q H LfiR n . We define the semantics of the hybrid automaton by defining its transition system. <p> Example 4.2.1 Consider the differential equation _x = f (x) = 2x, and X 0 = <ref> [1; 2] </ref>. Then Reach f (X 0 ; t) = [e 2t ; 2e 2t ], Reach f (X 0 ; [0; t]) = [e 2t ; 2] and Reach f (X 0 ; [0; 1)] = (0; 2]. <p> Example 4.2.1 Consider the differential equation _x = f (x) = 2x, and X 0 = [1; 2]. Then Reach f (X 0 ; t) = [e 2t ; 2e 2t ], Reach f (X 0 ; [0; t]) = <ref> [e 2t ; 2] </ref> and Reach f (X 0 ; [0; 1)] = (0; 2]. There is a close relationship between the Lipschitz differential inclusion _x 2 f (x) and the convex-valued differential inclusion _x 2 co (f (x)). This is made by the fol lowing relaxation theorem [5, 42]. <p> Example 4.2.2 For the differential equation _x = f (x) = 2x, the differential inclusion _x 2 f * (x) = [2x *; 2x + *]. For X 0 = <ref> [1; 2] </ref>, the reach set Reach f * (X 0 ; t) = [e 2t + *(e 2t 1); 2e 2t + *(1 e 2t )] and for * &lt; 2, Reach f * (X 0 ; [0; 1)] = (*; 2]. <p> Example 4.2.3 For the differential equation _x = 2x and X 0 = <ref> [1; 2] </ref>, T raj f (X 0 ) = f ([x (0)e 2m ]) m2Z + : x (0) 2 [1; 2]g. the points that are sampled every time units. The sequence of grids in which the "crosses" appear is recorded, and forms the sampled trajectory. <p> Example 4.2.3 For the differential equation _x = 2x and X 0 = <ref> [1; 2] </ref>, T raj f (X 0 ) = f ([x (0)e 2m ]) m2Z + : x (0) 2 [1; 2]g. the points that are sampled every time units. The sequence of grids in which the "crosses" appear is recorded, and forms the sampled trajectory. Notice, it is not the sampled value that is recorded, but the grid in which the sample point appears that is recorded. <p> The cover c g is indicated by the bold square. Note, for x 2 hgi, B ffi (x) c g for ffi * 6k . Example 4.3.1 Consider the following differential inclusion: _x 1 = 2x 1 x 2 We are interested in the region R = <ref> [2; +2] </ref> fi [2; +2]. We first determine the Lipschitz constant for the differential inclusion. <p> Note, for x 2 hgi, B ffi (x) c g for ffi * 6k . Example 4.3.1 Consider the following differential inclusion: _x 1 = 2x 1 x 2 We are interested in the region R = <ref> [2; +2] </ref> fi [2; +2]. We first determine the Lipschitz constant for the differential inclusion. <p> But from the relaxation theorem (theorem 4.2.1), for a Lipschitz differential inclusion _x 2 f (x), it suffices to study the convex-valued differential inclusion _x 2 co (f (x)). 47 The Reach Set Computation procedure we described can be automated using computer tools available for analysis of hybrid systems <ref> [2, 3, 17, 31, 29] </ref>. An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . <p> An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . See <ref> [2, 3, 17, 31, 30, 29] </ref> for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). <p> When we are interested in studying the differential inclusion on a bounded region, we restrict the graph A to the bounded region and get a finite graph. Example 4.4.2 For the differential equation _x = 2x, figure 4.4 shows the sample graph for interval <ref> [0; 2] </ref> where the sample time = 0:5 and grid separation is fi = 0:25. To get an *-approximation of the differential equation _x 2 f (x), we need to construct the sample graph from a sufficiently small grid.
Reference: [3] <author> R.Alur, C.Courcoubetis, T.A. Henzinger and P.-H. Ho, </author> <title> Hybrid automata: an algorithmic approach to the specification and analysis of hybrid systems,Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag 1993. </publisher>
Reference-contexts: For more details on transition systems and their relationships, see [27]. 2.3 Hybrid Automata A hybrid automaton <ref> [3, 29] </ref> models a hybrid system. It consists of control locations with edges between the control locations. The control locations are the vertices in a graph. Each location is labeled with a differential inclusion, and every edge is labeled with a guard, and a jump or reset relation. <p> But from the relaxation theorem (theorem 4.2.1), for a Lipschitz differential inclusion _x 2 f (x), it suffices to study the convex-valued differential inclusion _x 2 co (f (x)). 47 The Reach Set Computation procedure we described can be automated using computer tools available for analysis of hybrid systems <ref> [2, 3, 17, 31, 29] </ref>. An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . <p> An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . See <ref> [2, 3, 17, 31, 30, 29] </ref> for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). <p> The fixed point at the origin is a saddle point with one dimensional unstable manifold. The other two fixed points at (1,1,1) and (-1,-1,1) are stable. We compute the largest invariant set contained in the region R = <ref> [3; 3] </ref> fi [3; 3] fi [3; 3]. It can be shown that k = 9 is a Lipschitz constant. The sample time is = ln2 k 58 (see discussion in Example 4.4.3). A graph is constructed on a grid of size 90fi90fi90. <p> The fixed point at the origin is a saddle point with one dimensional unstable manifold. The other two fixed points at (1,1,1) and (-1,-1,1) are stable. We compute the largest invariant set contained in the region R = <ref> [3; 3] </ref> fi [3; 3] fi [3; 3]. It can be shown that k = 9 is a Lipschitz constant. The sample time is = ln2 k 58 (see discussion in Example 4.4.3). A graph is constructed on a grid of size 90fi90fi90. <p> The fixed point at the origin is a saddle point with one dimensional unstable manifold. The other two fixed points at (1,1,1) and (-1,-1,1) are stable. We compute the largest invariant set contained in the region R = <ref> [3; 3] </ref> fi [3; 3] fi [3; 3]. It can be shown that k = 9 is a Lipschitz constant. The sample time is = ln2 k 58 (see discussion in Example 4.4.3). A graph is constructed on a grid of size 90fi90fi90. The algorithm of Section 4.2 is then used to compute the invariant set.
Reference: [4] <author> R. Alur and D. Dill, </author> <title> Automata for modeling real-time systems, </title> <booktitle> Proc. 17th ICALP, Lecture Notes in Computer Science 443, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: On the edge from B to A, the guard is g = fxjx 2g, and x is nondeterministically assigned a value in the interval <ref> [2; 4] </ref>. 2.3.2 Transition System of Hybrid Automata The state space of the hybrid automaton is Q H LfiR n . We define the semantics of the hybrid automaton by defining its transition system. <p> The guards on the edges are rectangles. The jump relation either leaves the value of the clock unchanged, or sets the clock nondeterministically to a value in an interval. Figure 2.4 is an example of a timed automaton. 15 We review the work in <ref> [4] </ref> in which it was shown that timed automata have a time-symmetric bisimulation with a finite number of congruence classes. Consider a timed automaton T = (L; E) with state space Q T . <p> Consider the edge from location A to location B. The guard (x 5) on the edge in the multirate automaton is replaced with the guard (x 5 2 ) in the timed automaton since _x = 2 in location A of the multirate automaton. Similarly the initialization x := <ref> [4; 4] </ref> in the multirate automaton is replaced with the initialization x := [ 4 3 ; 4 3 ] in the timed automaton since _x = 3 in location B of the multirate automaton.
Reference: [5] <author> J.P. Aubin and A. Cellina, </author> <title> Differential Inclusions, </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: There is a close relationship between the Lipschitz differential inclusion _x 2 f (x) and the convex-valued differential inclusion _x 2 co (f (x)). This is made by the fol lowing relaxation theorem <ref> [5, 42] </ref>. <p> For further details on differential inclusions, see <ref> [6, 5, 42] </ref>. The following two results are obtained by using the Bellman-Gronwall inequality [18].
Reference: [6] <author> J.P. Aubin, </author> <title> Viability Theory, </title> <publisher> Birkhauser, </publisher> <year> 1991. </year>
Reference-contexts: For further details on differential inclusions, see <ref> [6, 5, 42] </ref>. The following two results are obtained by using the Bellman-Gronwall inequality [18]. <p> The contingent cone to I at x is the set T I (x) = fvj lim dist ((x + hv); I) h The result characterizing invariant sets under _x 2 f (x) is that I is invariant under f iff for x 2 I, f (x) T I (x) <ref> [6, 1] </ref>. Definition 4.5.2 A set I is *-invariant provided for all x 2 I, f * (x) T I (x). 53 Definition 4.5.2 states that the set I is *-invariant provided it is invariant under *-perturbations of f .
Reference: [7] <author> V. Borkar and P. Varaiya, </author> <title> *-Approximation of Differential Inclusion using Rectangular Differential Inclusion, </title> <booktitle> Notes. </booktitle>
Reference-contexts: We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). Instead, a decidable class of hybrid systems such as [30, 17], can be used to approximate a differential inclusion and prove the same result as Theorem 4.3.3 <ref> [7] </ref>. The decidable hybrid systems have the intersting property that the infinite time reachable set for them can be computed in a finite number of steps.
Reference: [8] <author> A. Church, </author> <title> Logic, arithmetic and automata, </title> <booktitle> Proc. International Congress of Mathematicians, </booktitle> <year> 1963. </year>
Reference-contexts: Solving a game on an !-automaton is sometimes referred to as Church's problem who posed the question as a synthesis problem for digital circuits <ref> [8] </ref>. Games on !-automata have been extensively studied in the logic and computer science communities [35, 40, 23]. In this chapter, we relate games on !-automata with the payoff games. We show that a game on an !-automaton with the chain acceptance condition can be solved as a payoff game. <p> The reader can check that starting from any position, this is a winning strategy for Player 1 since any resulting play visits a state in F infinitely often. Games on !-automata are closely related to synthesis problems. Church in <ref> [8] </ref> poses two problems about digital circuits and logic: the decision problem and the synthesis problem. The decision problem is the verification question: does the designed circuit meet its specification? The synthesis problem is to automatically synthesize a circuit to meet a specification.
Reference: [9] <author> A. Condon, </author> <title> The complexity of stochastic games, </title> <journal> Information and computation, </journal> <volume> 96 </volume> <pages> 203-224, </pages> <year> 1992. </year>
Reference-contexts: At present, it is not known whether the policy iteration algorithm is a polynomial time algorithm. The complexity question for the problem has also attracted attention in the computer science community <ref> [9, 26, 43] </ref>. Condon [9] studies a simplified version of stochastic games called simple stochastic games. She points out that this problem is in N P " co N P . Zwick and Patterson [43] study mean payoff and discounted payoff games. <p> At present, it is not known whether the policy iteration algorithm is a polynomial time algorithm. The complexity question for the problem has also attracted attention in the computer science community [9, 26, 43]. Condon <ref> [9] </ref> studies a simplified version of stochastic games called simple stochastic games. She points out that this problem is in N P " co N P . Zwick and Patterson [43] study mean payoff and discounted payoff games.
Reference: [10] <author> A. Ehrenfeucht and J. Mycielski, </author> <title> Positional strategies for mean payoff games, </title> <journal> International Journal of Game Theory, </journal> <year> 1979. </year> <month> 91 </month>
Reference-contexts: Example 5.4.1. 84 5.4.5 Mean Payoff Games We next study the mean payoff game (MPG) M = (G; P ) in which the play is p = p 0 p 1 p 2 : : : and the payoff is P (p) = lim inf N k=0 Ehrenfeucht and Mycielski <ref> [10] </ref> showed that mean payoff games have a value and both players have optimal positional strategies. To do this, they needed to work with both finite and infinite games. They define a finite game in which the play stops as soon as a cycle is formed.
Reference: [11] <author> E. A. Emerson, </author> <title> Automata, tableaux, and temporal logics, Logics of Programs, </title> <publisher> LNCS 193, Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Then 1. the game G has a value (i.e., the game has a winner), 2. there is an algorithm to determine the winner, 69 3. the winner can implement its strategy with a finite amount of memory. The following is the result of <ref> [11] </ref>. Theorem 5.3.4 Strategy space MD is complete for Player 1 in Rabin Games. Hence, Player 1 can restrict himself to playing with positional strategies in Rabin Games.
Reference: [12] <author> E. A. Emerson and C.S. Jutla, </author> <title> The complexity of tree automata and logics of programs, </title> <booktitle> Proc. of the 29th Ann. IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1988. </year>
Reference-contexts: We want to compute the largest invariant set contained in region R = [; ] fi <ref> [12; 12] </ref>. The invariant set can be calculated exactly. <p> From Lemma 5.3.3, it follows that determining whether Player 1 wins a Rabin Game is in NP, a Streett Game in Co-NP, and a Chain Game in NP " Co N P . In <ref> [12] </ref>, it is shown that determining whether Player 1 wins a Rabin (Streett) game is NP-hard (Co-NP hard). 5.3.3 Propositional -Calculus Propositional -calculus is a propositional modal logic with a least fixed point operator [22, 13].
Reference: [13] <author> E.A. Emerson, C.S. Jutla, and A.P. Sistla, </author> <title> On model-checking for fragments of -calculus, </title> <booktitle> Proc. of Fifth Conference on Computer Aided Verification, </booktitle> <publisher> LNCS 697, Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The chain acceptance condition can express any !-regular language. As a result, any game on an !-automaton can be solved as a payoff game. It is known that solving the model checking problem for propositional -calculus is polynomially equivalent to solving the chain game <ref> [13] </ref>. Hence, we get a new method for model checking -calculus using algorithms for solving payoff games. In Section 5.2, we introduce games played on graphs. In Section 5.3, we discuss games on !-automata. <p> The chain acceptance condition is also sometimes written as the parity acceptance condition (B i ; G i ) where B i = E i n F i+1 and G i = F i n E i (see <ref> [23, 13] </ref>). The sets B i and G i are disjoint. A run r is accepting provided for some i, inf (r ) "touches" G i but not B j for j i. <p> In [12], it is shown that determining whether Player 1 wins a Rabin (Streett) game is NP-hard (Co-NP hard). 5.3.3 Propositional -Calculus Propositional -calculus is a propositional modal logic with a least fixed point operator <ref> [22, 13] </ref>. Syntax The logic has atomic propositions A = p; q; : : :, and propositional variables x; y; : : :. <p> Given a Kripke structure K = (S; E; L), a state s 2 S, and a -calculus formula f , the model checking problem is to determine whether s 2 f K . 74 Chain Games and -Calculus The following two theorems of <ref> [13] </ref> show that the model checking problem for -calculus and solving Chain games are essentially equivalent problems.
Reference: [14] <author> J.Frankel, L.Alvarez, R.Horowitz, and P.Li. </author> <title> "Robust Platoon Manuevers for AVHS," </title> <type> UCB-PATH TECH NOTE 94-09, </type> <institution> University of California. </institution>
Reference-contexts: The network layer determines the route for the vehicles. 24 Designs for the various layers of AVHS have been proposed. A design for the control laws in the regulation layer is proposed in [15] and <ref> [14] </ref>. In [15], control laws are proposed for the leader mode in which a platoon tracks the recommended velocity, or if there is a platoon in front, then it remains a safe distance behind that platoon. Control laws for the merge and split maneuver are proposed in [14]. <p> in [15] and <ref> [14] </ref>. In [15], control laws are proposed for the leader mode in which a platoon tracks the recommended velocity, or if there is a platoon in front, then it remains a safe distance behind that platoon. Control laws for the merge and split maneuver are proposed in [14]. A design for the coordination layer is proposed in [21]. This consists of protocols modeled with finite state machines. In this chapter we consider the following problem. Consider an AVHS, for example the system proposed in [41, 15, 14, 21]. <p> Control laws for the merge and split maneuver are proposed in [14]. A design for the coordination layer is proposed in [21]. This consists of protocols modeled with finite state machines. In this chapter we consider the following problem. Consider an AVHS, for example the system proposed in <ref> [41, 15, 14, 21] </ref>. How do we know that such a system is safe? Of course we have to define what safety means. We say a system is unsafe if there is a possibility of a high relative velocity collision on the AVHS. <p> We consider a proposed design for an AVHS and show that if the physical controllers in the vehicles satisfy a set of constraints then the AVHS is safe. In Section 3.2, we describe relevant parts of the AVHS design proposed by <ref> [41, 15, 14, 21] </ref>. In Section 3.3, we show that a single lane AVHS is safe when the controllers satisfy a set of constraints. In Section 3.4, we extend the design to include the change lane maneuver, and prove that the new design is also safe.
Reference: [15] <author> D.Godbole and J.Lygeros, </author> <title> Longitudinal Control of the Lead Car of a Platoon. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> 43(4) </volume> <pages> 1125-35, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: The network layer determines the route for the vehicles. 24 Designs for the various layers of AVHS have been proposed. A design for the control laws in the regulation layer is proposed in <ref> [15] </ref> and [14]. In [15], control laws are proposed for the leader mode in which a platoon tracks the recommended velocity, or if there is a platoon in front, then it remains a safe distance behind that platoon. Control laws for the merge and split maneuver are proposed in [14]. <p> The network layer determines the route for the vehicles. 24 Designs for the various layers of AVHS have been proposed. A design for the control laws in the regulation layer is proposed in <ref> [15] </ref> and [14]. In [15], control laws are proposed for the leader mode in which a platoon tracks the recommended velocity, or if there is a platoon in front, then it remains a safe distance behind that platoon. Control laws for the merge and split maneuver are proposed in [14]. <p> Control laws for the merge and split maneuver are proposed in [14]. A design for the coordination layer is proposed in [21]. This consists of protocols modeled with finite state machines. In this chapter we consider the following problem. Consider an AVHS, for example the system proposed in <ref> [41, 15, 14, 21] </ref>. How do we know that such a system is safe? Of course we have to define what safety means. We say a system is unsafe if there is a possibility of a high relative velocity collision on the AVHS. <p> We consider a proposed design for an AVHS and show that if the physical controllers in the vehicles satisfy a set of constraints then the AVHS is safe. In Section 3.2, we describe relevant parts of the AVHS design proposed by <ref> [41, 15, 14, 21] </ref>. In Section 3.3, we show that a single lane AVHS is safe when the controllers satisfy a set of constraints. In Section 3.4, we extend the design to include the change lane maneuver, and prove that the new design is also safe. <p> As shown in figure 3.1, the distance of platoon i from the origin is d i . The continuous state of the leader of platoon i is x i . In <ref> [15] </ref>, it is assumed x i = (d i ; _ d i ; d i ). <p> Therefore the system of equation 3.4 is safe if and only if the optimal cost J &gt; 0 in equation 3.5. 3.3.2 A Leader Control Example Equation 3.6 shows part of the leader control developed in <ref> [15] </ref>. The control is applied during safety-critical situations when the inter-vehicle distance is small, or the relative velocity between vehicles is large. The state of the system is x = ((d i1 d i ); _ d i ; _ d i1 ; d i ).
Reference: [16] <author> J. Guckenheimer and P. Holmes, </author> <title> Nonlinear Oscillations, Dynamical Systems, and Bifurcations of Vector Fields, </title> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: The actual invariant set is shown in Figure 4.8. The invariant set is an attracting set of the equilibrium point (0; 0) (see <ref> [16] </ref>). We next use the graph method of Theorem 4.5.1 and Theorem 4.4.3 to compute the invariant set for Equation 4.3. A straightforward computation shows that k = 11 is a Lipschitz constant. We choose = ln2 k to be the sample time (see Example 4.4.3). <p> For a lightly damped system (smaller c), we expect a larger grid size to be required. This is also observed in our computational experiments. 4.6.2 The Lorenz Equations In this section, we study the Lorenz equations <ref> [16, 39] </ref>. The equations are _x = (y x) (4.4) 57 _y = x y xz We study the system for = 1, = 2 and fi = 1. The system has three fixed points (see [16, 39] for a detailed description of the dynamics of the system). <p> computational experiments. 4.6.2 The Lorenz Equations In this section, we study the Lorenz equations <ref> [16, 39] </ref>. The equations are _x = (y x) (4.4) 57 _y = x y xz We study the system for = 1, = 2 and fi = 1. The system has three fixed points (see [16, 39] for a detailed description of the dynamics of the system). The fixed point at the origin is a saddle point with one dimensional unstable manifold. The other two fixed points at (1,1,1) and (-1,-1,1) are stable.
Reference: [17] <author> T. Henzinger, P. Kopke, A. Puri and P. Varaiya, </author> <title> What's Decidable About Hybrid Automata, </title> <booktitle> Proceedings of the 27th Ann. ACM Symposium on the Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: Hence, the policy iteration algorithm can be used to model check -calculus formulae. This is at present the most efficient algorithm for model checking propositional -calculus. Some of the work we present in this thesis has also been published in <ref> [17, 34, 33, 32] </ref>. 4 Chapter 2 Decidable Hybrid Systems 2.1 Introduction Complex systems that are being designed today incorporate both differential equations to model the continuous behavior and discrete event systems to model instantaneous state changes in response to events. <p> Decidability of initialized rectangular automata was shown in [30]. We follow the proof given in <ref> [17] </ref>. In a rectangular automaton, the inclusion for the ith component x i is _x i 2 [l i ; u i ]. method to translate an initialized rectangular automaton into an initialized multirate automaton. <p> But from the relaxation theorem (theorem 4.2.1), for a Lipschitz differential inclusion _x 2 f (x), it suffices to study the convex-valued differential inclusion _x 2 co (f (x)). 47 The Reach Set Computation procedure we described can be automated using computer tools available for analysis of hybrid systems <ref> [2, 3, 17, 31, 29] </ref>. An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . <p> An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . See <ref> [2, 3, 17, 31, 30, 29] </ref> for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). <p> See [2, 3, 17, 31, 30, 29] for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). Instead, a decidable class of hybrid systems such as <ref> [30, 17] </ref>, can be used to approximate a differential inclusion and prove the same result as Theorem 4.3.3 [7]. The decidable hybrid systems have the intersting property that the infinite time reachable set for them can be computed in a finite number of steps.
Reference: [18] <author> M. W. Hirsh and S. </author> <title> Smale Differential Equations, Dynamical Systems, and Linear Algebra, </title> <publisher> Academic Press, Inc., </publisher> <year> 1974. </year>
Reference-contexts: For further details on differential inclusions, see [6, 5, 42]. The following two results are obtained by using the Bellman-Gronwall inequality <ref> [18] </ref>.
Reference: [19] <author> A.J. Hoffman and R.M. Karp, </author> <title> On Non-terminating Stochastic Games, </title> <journal> Management Science, </journal> <volume> 12 </volume> <pages> 359-370, </pages> <year> 1966. </year>
Reference-contexts: We also discuss Howard's policy iteration algorithm [20] and its extension to stochastic games <ref> [19] </ref>. Value of the Game and Successive Approximation Lemma 5.4.5 and Theorem 5.4.1 are due to Shapley [38]. <p> The value v can be computed in polynomial time by solving the system of linear equations in Equation 5.4. We are now ready to describe the strategy improvement algorithm of <ref> [19] </ref>. Strategy Improvement Algorithm: 1. i = 0; Player 1 picks an initial positional strategy t 0 . 2. repeat 3. Player 2 responds with positional strategy i 2 r 2 (t i ). 4. Compute the fixed point v i = T t i i (v i ). 5.
Reference: [20] <author> R.A. Howard, </author> <title> Dynamic Programming and Markov Processes, </title> <publisher> M.I.T. Press, </publisher> <year> 1960. </year>
Reference-contexts: The strategy for Player 1 is fixed to t and the game is played by Player 2. The reward function is r : V ! R. The 1-Player payoff games are deterministic analogues of Markov 77 decision problems <ref> [20, 24, 37] </ref>. We study the N -step game, and the infinite discounted and mean payoff games. We show that 1-Player discounted and mean payoff games have a value and optimal positional strategies. The value and optimal strategies in 1-Player games can be computed in polynomial time. <p> The play is p = p 0 p 1 p 2 : : :, and the payoff is P fi (p) = k=0 We prove Shapley's result that the game has a value, and both players have optimal positional strategies. We also discuss Howard's policy iteration algorithm <ref> [20] </ref> and its extension to stochastic games [19]. Value of the Game and Successive Approximation Lemma 5.4.5 and Theorem 5.4.1 are due to Shapley [38]. <p> How do we compute the value of the discounted payoff game? This value can be approximated by computing the value of the N -step game for large N. This is known as the method of successive approximation <ref> [38, 20, 37, 24] </ref>. Lemma 5.4.6 Suppose v is the value of the discounted payoff game. Then lim N!1 v N = v where v N is the value of the N-step game. <p> To overcome the problem with slow convergence, we will study the policy iteration algorithm. 82 Strategy Improvement using Policy Iteration In this section, we will show how to use a variant of the policy iteration algorithm <ref> [20, 37, 24] </ref> to determine the value of the discounted payoff game D = (G; P fi ). Definition 5.4.3 Let us fix positional strategy t for Player 1, and positional strategy for Player 2 in the DPG D.
Reference: [21] <author> A.Hsu, F.Eskafi, S.Sachs, and P.Varaiya. </author> <title> Protocol Design for an Automated Highway System. Discrete Event Dynamic Systems: Theory and Applications, </title> <address> vol.2,(no.3-4):183-206, </address> <month> February </month> <year> 1993. </year> <month> 92 </month>
Reference-contexts: Control laws for the merge and split maneuver are proposed in [14]. A design for the coordination layer is proposed in <ref> [21] </ref>. This consists of protocols modeled with finite state machines. In this chapter we consider the following problem. Consider an AVHS, for example the system proposed in [41, 15, 14, 21]. How do we know that such a system is safe? Of course we have to define what safety means. <p> Control laws for the merge and split maneuver are proposed in [14]. A design for the coordination layer is proposed in [21]. This consists of protocols modeled with finite state machines. In this chapter we consider the following problem. Consider an AVHS, for example the system proposed in <ref> [41, 15, 14, 21] </ref>. How do we know that such a system is safe? Of course we have to define what safety means. We say a system is unsafe if there is a possibility of a high relative velocity collision on the AVHS. <p> We consider a proposed design for an AVHS and show that if the physical controllers in the vehicles satisfy a set of constraints then the AVHS is safe. In Section 3.2, we describe relevant parts of the AVHS design proposed by <ref> [41, 15, 14, 21] </ref>. In Section 3.3, we show that a single lane AVHS is safe when the controllers satisfy a set of constraints. In Section 3.4, we extend the design to include the change lane maneuver, and prove that the new design is also safe.
Reference: [22] <author> D. Kozen, </author> <title> Results on propositional -calculus, </title> <booktitle> Theoretical Computer Science, </booktitle> <month> Dec. </month> <year> 1983. </year>
Reference-contexts: In [12], it is shown that determining whether Player 1 wins a Rabin (Streett) game is NP-hard (Co-NP hard). 5.3.3 Propositional -Calculus Propositional -calculus is a propositional modal logic with a least fixed point operator <ref> [22, 13] </ref>. Syntax The logic has atomic propositions A = p; q; : : :, and propositional variables x; y; : : :. <p> The greatest fixed point is defined as -x:f = :x::f. The least fixed point can be computed by starting from the emptyset, and iterating until a fixed point is reached. Similarly, the greatest fixed point is computed by starting from the set containing all states and iterating <ref> [22] </ref>. In this way, the set f K can be computed inductively.
Reference: [23] <author> S.C. Krishnan, A. Puri, R.K. Brayton, </author> <title> and P.P. Varaiya, The Rabin index and chain automata, with applications to automata and games, </title> <booktitle> Proc. of the Seventh Conference on Computer Aided Verification, </booktitle> <publisher> LNCS 939, Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The payoff is P (p) = P k r (p k ). Player 1 chooses his moves to maximize the payoff; Player 2 chooses hers to minimize it. An !-automaton is a finite state automaton which accepts infinite sequences <ref> [40, 23] </ref>. In a game on !-automaton, the objective of Player 1 is to create a play p which is accepted by the automaton; Player 2 tries to create a play which is rejected. <p> Solving a game on an !-automaton is sometimes referred to as Church's problem who posed the question as a synthesis problem for digital circuits [8]. Games on !-automata have been extensively studied in the logic and computer science communities <ref> [35, 40, 23] </ref>. In this chapter, we relate games on !-automata with the payoff games. We show that a game on an !-automaton with the chain acceptance condition can be solved as a payoff game. The chain acceptance condition can express any !-regular language. <p> Then t and are also optimal in (HD; HD). 5.3 Games on !-Automata, Church's Problem and -Calculus !-automata are finite automata which accept infinite sequences. The sequences which are accepted form the language of the !-automaton <ref> [40, 23] </ref>. A game on an !- automaton is played between Player 1 and Player 2. The two players together create 65 a sequence p = p 0 p 1 p 2 : : :. <p> The chain acceptance condition is also sometimes written as the parity acceptance condition (B i ; G i ) where B i = E i n F i+1 and G i = F i n E i (see <ref> [23, 13] </ref>). The sets B i and G i are disjoint. A run r is accepting provided for some i, inf (r ) "touches" G i but not B j for j i. <p> The index k is the Rabin Index of the language | the minimum number of pairs in a Rabin automaton required to realize the language. 67 For a more complete discussion of !-automata and a proof of Theorem 5.3.1, see [40]. Theorem 5.3.2 is the main result of <ref> [23] </ref>. 5.3.2 Games on !-Automata A game on an !-automaton is G = (G; P ) where G = (V; E) is a game graph and is an acceptance condition.
Reference: [24] <author> P.R. Kumar and P. Varaiya, </author> <title> Stochastic Systems: Estimation, Identification and Adaptive Control, </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: A contraction map has a unique fixed point (i.e., unique x such that T (x) = x). Furthermore, for any y lim n!1 T n (y) = x (by T n , we mean the n fold composition of T ). See <ref> [24, 37] </ref> for a proof of this. The games are played on the game graph G = (V; E) where V = f1; : : : ; 2ng. <p> The strategy for Player 1 is fixed to t and the game is played by Player 2. The reward function is r : V ! R. The 1-Player payoff games are deterministic analogues of Markov 77 decision problems <ref> [20, 24, 37] </ref>. We study the N -step game, and the infinite discounted and mean payoff games. We show that 1-Player discounted and mean payoff games have a value and optimal positional strategies. The value and optimal strategies in 1-Player games can be computed in polynomial time. <p> How do we compute the value of the discounted payoff game? This value can be approximated by computing the value of the N -step game for large N. This is known as the method of successive approximation <ref> [38, 20, 37, 24] </ref>. Lemma 5.4.6 Suppose v is the value of the discounted payoff game. Then lim N!1 v N = v where v N is the value of the N-step game. <p> To overcome the problem with slow convergence, we will study the policy iteration algorithm. 82 Strategy Improvement using Policy Iteration In this section, we will show how to use a variant of the policy iteration algorithm <ref> [20, 37, 24] </ref> to determine the value of the discounted payoff game D = (G; P fi ). Definition 5.4.3 Let us fix positional strategy t for Player 1, and positional strategy for Player 2 in the DPG D.
Reference: [25] <author> R.D. Luce and H. Raiffa, </author> <title> Games and Decisions: Introduction and Critical Survey, </title> <publisher> Dover Publications, </publisher> <year> 1957. </year>
Reference-contexts: To do this, they needed to work with both finite and infinite games. They define a finite game in which the play stops as soon as a cycle is formed. Player 2 then pays to Player 1 the mean value of the cycle. All finite games have a value <ref> [25] </ref>. Ehrenfeucht and Mycielski show that this is also the value of the infinite game. To show that the game has optimal positional strategies, they needed to use the infinite game to show some results about the finite game. The proof is somewhat involved.
Reference: [26] <author> W. Ludwig, </author> <title> A subexponential randomized algorithm for the simple stochastic game problem, </title> <journal> Information and Computation, </journal> <volume> 117 </volume> <pages> 151-155, </pages> <year> 1995. </year>
Reference-contexts: At present, it is not known whether the policy iteration algorithm is a polynomial time algorithm. The complexity question for the problem has also attracted attention in the computer science community <ref> [9, 26, 43] </ref>. Condon [9] studies a simplified version of stochastic games called simple stochastic games. She points out that this problem is in N P " co N P . Zwick and Patterson [43] study mean payoff and discounted payoff games. <p> Zwick and Patterson [43] study mean payoff and discounted payoff games. They provide a polynomial reduction from payoff games to simple stochastic games, hence showing that these games are perhaps easier than payoff games. Lud-wig <ref> [26] </ref> gives an interesting randomized algorithm of complexity O (2 p jV j ) for solving simple stochastic games.
Reference: [27] <author> R. Milner, </author> <title> Communication and Concurrency, </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: For more details on transition systems and their relationships, see <ref> [27] </ref>. 2.3 Hybrid Automata A hybrid automaton [3, 29] models a hybrid system. It consists of control locations with edges between the control locations. The control locations are the vertices in a graph.
Reference: [28] <author> J. Mycielski, </author> <title> Games with Perfect Information, </title> <booktitle> Handbook of Game Theory, </booktitle> <volume> vol. 1, </volume> <publisher> Elsevier Science, </publisher> <year> 1992. </year>
Reference-contexts: Ehrenfeucht and Mycielski show that this is also the value of the infinite game. To show that the game has optimal positional strategies, they needed to use the infinite game to show some results about the finite game. The proof is somewhat involved. Mycielski <ref> [28] </ref> mentions that no direct proof is known. In contrast, Shapley's proof for discounted payoff games relies on a contraction map, and is simpler. We give a new proof that mean payoff games have optimal positional strategies.
Reference: [29] <author> X.Nicollin, A.Olivero, J. Sifakis and S. Yovine, </author> <title> An Approach to the Description and Analysis of Hybrid Systems, Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag 1993. </publisher>
Reference-contexts: For more details on transition systems and their relationships, see [27]. 2.3 Hybrid Automata A hybrid automaton <ref> [3, 29] </ref> models a hybrid system. It consists of control locations with edges between the control locations. The control locations are the vertices in a graph. Each location is labeled with a differential inclusion, and every edge is labeled with a guard, and a jump or reset relation. <p> But from the relaxation theorem (theorem 4.2.1), for a Lipschitz differential inclusion _x 2 f (x), it suffices to study the convex-valued differential inclusion _x 2 co (f (x)). 47 The Reach Set Computation procedure we described can be automated using computer tools available for analysis of hybrid systems <ref> [2, 3, 17, 31, 29] </ref>. An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . <p> An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . See <ref> [2, 3, 17, 31, 30, 29] </ref> for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x).
Reference: [30] <author> A. Puri and P. Varaiya, </author> <title> Decidability of Hybrid System with Rectangular Differential Inclusions, </title> <booktitle> CAV 94: Computer-Aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Decidability of initialized rectangular automata was shown in <ref> [30] </ref>. We follow the proof given in [17]. In a rectangular automaton, the inclusion for the ith component x i is _x i 2 [l i ; u i ]. method to translate an initialized rectangular automaton into an initialized multirate automaton. <p> An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . See <ref> [2, 3, 17, 31, 30, 29] </ref> for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). <p> See [2, 3, 17, 31, 30, 29] for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). Instead, a decidable class of hybrid systems such as <ref> [30, 17] </ref>, can be used to approximate a differential inclusion and prove the same result as Theorem 4.3.3 [7]. The decidable hybrid systems have the intersting property that the infinite time reachable set for them can be computed in a finite number of steps.
Reference: [31] <author> A. Puri and P. Varaiya, </author> <title> Verification of Hybrid Systems using Abstractions, Hybrid Systems II, </title> <publisher> LNCS 999, Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In Chapter 3, we study the Automated Vehicle Highway System (AVHS) architecture of Varaiya [41]. We are interested in the safety question: can there be a collision between two vehicles on the AVHS? Using the abstraction methodology in <ref> [31] </ref>, we show that the AVHS is safe provided the controllers in the vehicles satisfy a set of constraints. The problem of checking whether the controllers satisfy the constraints is equivalent to solving an optimal control problem. In Chapter 4, we consider computational questions about differential inclusions. <p> To analyze systems with more complicated dynamics, we use abstractions <ref> [31] </ref>. A system which has complicated continuous dynamics is abstracted with one which has simpler dynamics, such as rectangular inclusions. The abstractions are conservative approximations. <p> But from the relaxation theorem (theorem 4.2.1), for a Lipschitz differential inclusion _x 2 f (x), it suffices to study the convex-valued differential inclusion _x 2 co (f (x)). 47 The Reach Set Computation procedure we described can be automated using computer tools available for analysis of hybrid systems <ref> [2, 3, 17, 31, 29] </ref>. An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . <p> An equivalent hybrid automaton can be constructed by associating location l g with c g , differential inclusion d g with location l g , and guard c g T c h with the edge from location l g to l h . See <ref> [2, 3, 17, 31, 30, 29] </ref> for more details on hybrid systems and their analysis. We used polyhedral inclusions to approximate the differential inclusion _x 2 f (x). <p> Computing the invariant sets and reach sets is an important problem. It is finding increasing use in the study of hybrid systems (see <ref> [31, 33] </ref>). An important problem is to find techniques to make the algorithms and methods presented in this chapter more efficient in terms of space and time usage. 59 Chapter 5 Shapley's Game and Church's Problem 5.1 Introduction In this chapter, we study graph games played by two players.
Reference: [32] <author> A. Puri, V. Borkar and P. Varaiya, </author> <title> *-Approximation of Differential Inclusions, </title> <booktitle> Proceedings of the 34th IEEE Conference on Decision and Control, </booktitle> <year> 1995. </year>
Reference-contexts: Hence, the policy iteration algorithm can be used to model check -calculus formulae. This is at present the most efficient algorithm for model checking propositional -calculus. Some of the work we present in this thesis has also been published in <ref> [17, 34, 33, 32] </ref>. 4 Chapter 2 Decidable Hybrid Systems 2.1 Introduction Complex systems that are being designed today incorporate both differential equations to model the continuous behavior and discrete event systems to model instantaneous state changes in response to events.
Reference: [33] <author> A. Puri and P. Varaiya, </author> <note> Driving Safely in Smart Cars, California PATH Research Report UCB-ITS-PRR-95-24, </note> <month> July </month> <year> 1995. </year> <month> 93 </month>
Reference-contexts: Hence, the policy iteration algorithm can be used to model check -calculus formulae. This is at present the most efficient algorithm for model checking propositional -calculus. Some of the work we present in this thesis has also been published in <ref> [17, 34, 33, 32] </ref>. 4 Chapter 2 Decidable Hybrid Systems 2.1 Introduction Complex systems that are being designed today incorporate both differential equations to model the continuous behavior and discrete event systems to model instantaneous state changes in response to events. <p> Computing the invariant sets and reach sets is an important problem. It is finding increasing use in the study of hybrid systems (see <ref> [31, 33] </ref>). An important problem is to find techniques to make the algorithms and methods presented in this chapter more efficient in terms of space and time usage. 59 Chapter 5 Shapley's Game and Church's Problem 5.1 Introduction In this chapter, we study graph games played by two players.
Reference: [34] <author> A. Puri and P. Varaiya, </author> <title> Decidable Hybrid Systems, </title> <note> To appear in Computer and Mathematical Modeling. </note>
Reference-contexts: Hence, the policy iteration algorithm can be used to model check -calculus formulae. This is at present the most efficient algorithm for model checking propositional -calculus. Some of the work we present in this thesis has also been published in <ref> [17, 34, 33, 32] </ref>. 4 Chapter 2 Decidable Hybrid Systems 2.1 Introduction Complex systems that are being designed today incorporate both differential equations to model the continuous behavior and discrete event systems to model instantaneous state changes in response to events.
Reference: [35] <author> M.O. Rabin, </author> <title> Automata on Infinite Objects and Church's Problem, </title> <booktitle> volume 13 of Regional Conf. Series in Mathematics, </booktitle> <year> 1972. </year>
Reference-contexts: Solving a game on an !-automaton is sometimes referred to as Church's problem who posed the question as a synthesis problem for digital circuits [8]. Games on !-automata have been extensively studied in the logic and computer science communities <ref> [35, 40, 23] </ref>. In this chapter, we relate games on !-automata with the payoff games. We show that a game on an !-automaton with the chain acceptance condition can be solved as a payoff game. The chain acceptance condition can express any !-regular language. <p> Solvability Problem | Is there an algorithm to determine the winner? 2. Synthesis Problem | Is there a finite-state strategy for the winner? The problem was resolved by Buchi, Landweber and Rabin (see <ref> [35] </ref>). Theorem 5.3.3 Consider the game G = (G; P ) where is a boolean formula.
Reference: [36] <author> T.E.S. Raghavan and J.A. Filar, </author> <title> Algorithms for Stochastic Games A Survey, </title> <journal> ZOR Methods and Models of Operations Research, </journal> <volume> 35 </volume> <pages> 437-472, </pages> <year> 1991. </year>
Reference-contexts: We study two classes of games: the payoff games and games on !-automata. Payoff games are a special case of stochastic games introduced by Shapley [38] and extensively studied in the operations research community since then <ref> [36] </ref>. In the 60 payoff game, each position w has some reward r (w). The players move from position to position, creating the play p = p 0 p 1 p 2 : : :. The payoff is P (p) = P k r (p k ).
Reference: [37] <author> S.M. Ross, </author> <title> Introduction to Stochastic Dynamic Programming, </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: A contraction map has a unique fixed point (i.e., unique x such that T (x) = x). Furthermore, for any y lim n!1 T n (y) = x (by T n , we mean the n fold composition of T ). See <ref> [24, 37] </ref> for a proof of this. The games are played on the game graph G = (V; E) where V = f1; : : : ; 2ng. <p> The strategy for Player 1 is fixed to t and the game is played by Player 2. The reward function is r : V ! R. The 1-Player payoff games are deterministic analogues of Markov 77 decision problems <ref> [20, 24, 37] </ref>. We study the N -step game, and the infinite discounted and mean payoff games. We show that 1-Player discounted and mean payoff games have a value and optimal positional strategies. The value and optimal strategies in 1-Player games can be computed in polynomial time. <p> How do we compute the value of the discounted payoff game? This value can be approximated by computing the value of the N -step game for large N. This is known as the method of successive approximation <ref> [38, 20, 37, 24] </ref>. Lemma 5.4.6 Suppose v is the value of the discounted payoff game. Then lim N!1 v N = v where v N is the value of the N-step game. <p> To overcome the problem with slow convergence, we will study the policy iteration algorithm. 82 Strategy Improvement using Policy Iteration In this section, we will show how to use a variant of the policy iteration algorithm <ref> [20, 37, 24] </ref> to determine the value of the discounted payoff game D = (G; P fi ). Definition 5.4.3 Let us fix positional strategy t for Player 1, and positional strategy for Player 2 in the DPG D.
Reference: [38] <author> L.S. Shapley, </author> <title> Stochastic Games, </title> <booktitle> Proceedings National Academy of Sciences, </booktitle> <volume> vol. 39, </volume> <year> 1957. </year>
Reference-contexts: By "solving a game," we mean determining the value of the game, and the optimal strategies for the players. We study two classes of games: the payoff games and games on !-automata. Payoff games are a special case of stochastic games introduced by Shapley <ref> [38] </ref> and extensively studied in the operations research community since then [36]. In the 60 payoff game, each position w has some reward r (w). The players move from position to position, creating the play p = p 0 p 1 p 2 : : :. <p> Player 1 tries to maximize his payoff, and Player 2 tries to minimize it. This class of games was originally studied by Shapley under a more general setting. Shapley in <ref> [38] </ref> introduced the class of stochastic games. A stochastic game is a zero-sum game played between two players: Player 1 who is trying to maximize his payoff, and Player 2 who wants to minimize it. The game has a finite number of positions. <p> He showed that such games have a value, and both players have optimal stationary strategies <ref> [38] </ref>. We study a subclass of stochastic games | called Payoff Games | played on the game graph G. From positions v 2 V 1 , Player 1 chooses an action and moves to e 0 (v) or e 1 (v). <p> We also discuss Howard's policy iteration algorithm [20] and its extension to stochastic games [19]. Value of the Game and Successive Approximation Lemma 5.4.5 and Theorem 5.4.1 are due to Shapley <ref> [38] </ref>. <p> How do we compute the value of the discounted payoff game? This value can be approximated by computing the value of the N -step game for large N. This is known as the method of successive approximation <ref> [38, 20, 37, 24] </ref>. Lemma 5.4.6 Suppose v is the value of the discounted payoff game. Then lim N!1 v N = v where v N is the value of the N-step game.
Reference: [39] <author> C. </author> <title> Sparrow, The Lorenz Equations, </title> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: For a lightly damped system (smaller c), we expect a larger grid size to be required. This is also observed in our computational experiments. 4.6.2 The Lorenz Equations In this section, we study the Lorenz equations <ref> [16, 39] </ref>. The equations are _x = (y x) (4.4) 57 _y = x y xz We study the system for = 1, = 2 and fi = 1. The system has three fixed points (see [16, 39] for a detailed description of the dynamics of the system). <p> computational experiments. 4.6.2 The Lorenz Equations In this section, we study the Lorenz equations <ref> [16, 39] </ref>. The equations are _x = (y x) (4.4) 57 _y = x y xz We study the system for = 1, = 2 and fi = 1. The system has three fixed points (see [16, 39] for a detailed description of the dynamics of the system). The fixed point at the origin is a saddle point with one dimensional unstable manifold. The other two fixed points at (1,1,1) and (-1,-1,1) are stable.
Reference: [40] <author> W. Thomas, </author> <title> Automata on Infinite Objects, Formal Models and Semantics, </title> <booktitle> volume B of Handbook of Theoretical Computer Science, </booktitle> <publisher> Elsevier Science, </publisher> <year> 1990. </year>
Reference-contexts: The payoff is P (p) = P k r (p k ). Player 1 chooses his moves to maximize the payoff; Player 2 chooses hers to minimize it. An !-automaton is a finite state automaton which accepts infinite sequences <ref> [40, 23] </ref>. In a game on !-automaton, the objective of Player 1 is to create a play p which is accepted by the automaton; Player 2 tries to create a play which is rejected. <p> Solving a game on an !-automaton is sometimes referred to as Church's problem who posed the question as a synthesis problem for digital circuits [8]. Games on !-automata have been extensively studied in the logic and computer science communities <ref> [35, 40, 23] </ref>. In this chapter, we relate games on !-automata with the payoff games. We show that a game on an !-automaton with the chain acceptance condition can be solved as a payoff game. The chain acceptance condition can express any !-regular language. <p> Then t and are also optimal in (HD; HD). 5.3 Games on !-Automata, Church's Problem and -Calculus !-automata are finite automata which accept infinite sequences. The sequences which are accepted form the language of the !-automaton <ref> [40, 23] </ref>. A game on an !- automaton is played between Player 1 and Player 2. The two players together create 65 a sequence p = p 0 p 1 p 2 : : :. <p> The index k is the Rabin Index of the language | the minimum number of pairs in a Rabin automaton required to realize the language. 67 For a more complete discussion of !-automata and a proof of Theorem 5.3.1, see <ref> [40] </ref>. Theorem 5.3.2 is the main result of [23]. 5.3.2 Games on !-Automata A game on an !-automaton is G = (G; P ) where G = (V; E) is a game graph and is an acceptance condition. <p> When the controller can win this game, we say the specification is synthesizable. The winning strategy for the controller is implemented as the circuit. This circuit then meets its specification. Solving a game on !-automaton is sometimes called Church's problem. In <ref> [40] </ref>, Church's problem is presented as the following two questions about games on !- automata: 1. Solvability Problem | Is there an algorithm to determine the winner? 2. Synthesis Problem | Is there a finite-state strategy for the winner? The problem was resolved by Buchi, Landweber and Rabin (see [35]).
Reference: [41] <author> P.Varaiya. </author> <title> Smart Cars on Smart Roads: Problems of Control. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 38(2) </volume> <pages> 195-207, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: We show that for initialized hybrid automata with rectangular inclusions, the reachability problem can be solved in a finite number of steps. In Chapter 3, we study the Automated Vehicle Highway System (AVHS) architecture of Varaiya <ref> [41] </ref>. We are interested in the safety question: can there be a collision between two vehicles on the AVHS? Using the abstraction methodology in [31], we show that the AVHS is safe provided the controllers in the vehicles satisfy a set of constraints. <p> Hence, any property we prove for the abstraction always holds for the original system. 23 Chapter 3 Driving Safely in Smart Cars 3.1 Introduction Automation of driving functions is central to proposals for the design of an Automated Vehicle/Highway System (AVHS). In the control architecture in <ref> [41] </ref>, it is proposed that vehicles travel in platoons. Three maneuvers are needed: in merge, two platoons join together; in split, one platoon separates into two; and in change lane, a single vehicle changes lane. <p> Control laws for the merge and split maneuver are proposed in [14]. A design for the coordination layer is proposed in [21]. This consists of protocols modeled with finite state machines. In this chapter we consider the following problem. Consider an AVHS, for example the system proposed in <ref> [41, 15, 14, 21] </ref>. How do we know that such a system is safe? Of course we have to define what safety means. We say a system is unsafe if there is a possibility of a high relative velocity collision on the AVHS. <p> We consider a proposed design for an AVHS and show that if the physical controllers in the vehicles satisfy a set of constraints then the AVHS is safe. In Section 3.2, we describe relevant parts of the AVHS design proposed by <ref> [41, 15, 14, 21] </ref>. In Section 3.3, we show that a single lane AVHS is safe when the controllers satisfy a set of constraints. In Section 3.4, we extend the design to include the change lane maneuver, and prove that the new design is also safe.
Reference: [42] <author> P. P. Varaiya, </author> <title> On the Trajectories of a Differential System, in A.V. </title> <editor> Balakrishnan and L.W. Neustadt, editor, </editor> <booktitle> Mathematical Theory of Control, </booktitle> <publisher> Academic Press, </publisher> <year> 1967. </year>
Reference-contexts: There is a close relationship between the Lipschitz differential inclusion _x 2 f (x) and the convex-valued differential inclusion _x 2 co (f (x)). This is made by the fol lowing relaxation theorem <ref> [5, 42] </ref>. <p> For further details on differential inclusions, see <ref> [6, 5, 42] </ref>. The following two results are obtained by using the Bellman-Gronwall inequality [18].
Reference: [43] <author> U. Zwick and M. Patterson, </author> <title> The complexity of mean payoff games on graphs, COCOON '95, </title> <publisher> LNCS, Springer-Verlag. </publisher>
Reference-contexts: From Lemma 5.2.1 and since MD is complete for 1-Player mean payoff games, v is also the value in (HD,HD). As our intuition would suggest, the optimal strategies in the MPG are the same ones which would be used for the DPG for fi close to 1. In <ref> [43] </ref>, it is shown how the value of the mean payoff game can be obtained from solving the discounted payoff game. <p> At present, it is not known whether the policy iteration algorithm is a polynomial time algorithm. The complexity question for the problem has also attracted attention in the computer science community <ref> [9, 26, 43] </ref>. Condon [9] studies a simplified version of stochastic games called simple stochastic games. She points out that this problem is in N P " co N P . Zwick and Patterson [43] study mean payoff and discounted payoff games. <p> The complexity question for the problem has also attracted attention in the computer science community [9, 26, 43]. Condon [9] studies a simplified version of stochastic games called simple stochastic games. She points out that this problem is in N P " co N P . Zwick and Patterson <ref> [43] </ref> study mean payoff and discounted payoff games. They provide a polynomial reduction from payoff games to simple stochastic games, hence showing that these games are perhaps easier than payoff games.
References-found: 43

