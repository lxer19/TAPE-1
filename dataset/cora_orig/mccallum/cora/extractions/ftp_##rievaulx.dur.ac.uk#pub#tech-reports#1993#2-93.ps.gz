URL: ftp://rievaulx.dur.ac.uk/pub/tech-reports/1993/2-93.ps.gz
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: 
Email: EMail C.D.Turner@durham.ac.uk  
Title: Guidance for the Testing of ObjectOriented Programs  
Author: C. D. Turner and D. J. Robson 
Date: 16 April, 1993  
Address: Durham, England  
Affiliation: Computer Science Division School of Engineering and Computer Science (SECS) University of Durham  
Pubnum: Technical Report No: TR 2/93  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Berard, E., </author> <title> Object Oriented Testing, Internet Electronic Network News, </title> <year> 1990 </year>
Reference-contexts: C.D.Turner - 16 - 16/04/93 5.3.1. Classification of Features It has been suggested in <ref> [1] </ref> that confidence should be increased (by testing) in those features which do not alter the state of the object. This is based upon the assumption that features which do not alter the state are more likely to have simpler code.
Reference: [2] <author> Biggerstaff, T. J. and Richeter, C., </author> <title> Reusability Framework, Assesment, And Directions, </title> <journal> IEEE Software, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 41 - 47, </pages> <month> March </month> <year> 1987 </year>
Reference-contexts: Both these techniques are provided by OOPLs. Components can be reused without change by instantiation (the creation of an instance). They can also be reused with alteration with the use of inheritance. Large scale code reuse can be obtained by the use of inheritance [10] <ref> [2] </ref> [6]. It has been proposed that the use of inheritance be restricted to that of an 'is-a' relationship (see [7] for an example). A restriction of this kind, has been used by the Eiffel community (see [10] and [11]). However, it has not been applied correctly.
Reference: [3] <author> Birtwistle, G. M., Dahl, O. -J., Myhrhaug, B. and Nygaard, K., </author> <title> Simula Begin, </title> <institution> Studentlitteratur, Lund, Sweden, </institution> <year> 1979 </year>
Reference-contexts: This allows even the most fundamental design decision of the parent class to be superseded in the future. Such a mechanism is provided by the very first objectoriented programming language (OOPL), Simula (as described by Birtwistle et al. in <ref> [3] </ref>). Smalltalk because of its dynamic nature is also ideal for this purpose. Other more statically typed languages such as C++ can be used, but not with such ease.
Reference: [4] <author> Booch, G., </author> <title> Object Oriented Design With Applications, </title> <publisher> Benjamin Cummings, </publisher> <year> 1991 </year>
Reference-contexts: It is less cost-effective replicating code to access the representation which would also require testing; although the features used in the tests may not have all the errors removed from them. The classification of features listed below is derived from the combination of two main sources, <ref> [4] </ref> and [9]. The categories are based upon the functionality of the features. The features of a class can be categorised into six main groups: Create Also known as Constructors, these features perform the initial memory allocation to the object, and initialise it to a known state.
Reference: [5] <author> Camp, J. W. and Jensen, E. P., </author> <title> Cost of Modularity, </title> <booktitle> in Symposium on Computer Software Engineering, </booktitle> <pages> pp. 215 - 224, </pages> <publisher> IEEE, </publisher> <year> 1976 </year>
Reference-contexts: When viewing 'programming' in the short term, this "convention" produces programs constructed of highly modular units (classes), with a high degree of information-hiding. High modularity can increase the maintainability of programs <ref> [5] </ref>. A high level of information-hiding can help to reduce the complexity of programs by reducing the coupling between units. When viewing 'programming' in the long term, if no access is allowed to the representation (even by a derived class), the reusability of the class is reduced.
Reference: [6] <author> Deutsch, L. P., </author> <title> Design REUSE and Frameworks in the Smalltalk-80 System, in Software Reusability Volume 2 : Experience, by Biggerstaff, </title> <editor> T. J. and Perlis, A. J. (Editors), pp. </editor> <volume> 57 - 71, </volume> <publisher> ACM Press (Addison Wesley), </publisher> <year> 1989 </year>
Reference-contexts: Both these techniques are provided by OOPLs. Components can be reused without change by instantiation (the creation of an instance). They can also be reused with alteration with the use of inheritance. Large scale code reuse can be obtained by the use of inheritance [10] [2] <ref> [6] </ref>. It has been proposed that the use of inheritance be restricted to that of an 'is-a' relationship (see [7] for an example). A restriction of this kind, has been used by the Eiffel community (see [10] and [11]). However, it has not been applied correctly.
Reference: [7] <author> Eriksson, M., </author> <title> A Correct Example of Multiple Inheritance, </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 25, no. 7, </volume> <pages> pp. 7 - 10, </pages> <month> July </month> <year> 1990 </year> <month> C.D.Turner - 25 - 16/04/93 </month>
Reference-contexts: They can also be reused with alteration with the use of inheritance. Large scale code reuse can be obtained by the use of inheritance [10] [2] [6]. It has been proposed that the use of inheritance be restricted to that of an 'is-a' relationship (see <ref> [7] </ref> for an example). A restriction of this kind, has been used by the Eiffel community (see [10] and [11]). However, it has not been applied correctly.
Reference: [8] <author> Fiedler, S. P., </author> <title> ObjectOriented Unit Testing, </title> <journal> Hewlett-Packard Journal, pp. </journal> <volume> 69 - 74, </volume> <month> April </month> <year> 1989 </year>
Reference-contexts: Guidance for Testing A class has a very high level of encapsulation, and thus it might be expected that Black Box 1 testing would be used. This is not so, it has been stated in <ref> [8] </ref> that this is not an adequate way to test a class. Therefore a mixture of both White Box 2 and Black Box testing should be used (see [15] for a more detailed discussion on the techniques required to ensure a class has been completely tested).
Reference: [9] <author> Harrison, R., </author> <title> Abstract Data Types in Modula-2, </title> <editor> J. </editor> <publisher> Wiley & Sons, </publisher> <year> 1989 </year>
Reference-contexts: It is less cost-effective replicating code to access the representation which would also require testing; although the features used in the tests may not have all the errors removed from them. The classification of features listed below is derived from the combination of two main sources, [4] and <ref> [9] </ref>. The categories are based upon the functionality of the features. The features of a class can be categorised into six main groups: Create Also known as Constructors, these features perform the initial memory allocation to the object, and initialise it to a known state.
Reference: [10] <author> Meyer, B., </author> <title> Reusability: The Case for Object Oriented Design, </title> <journal> IEEE Software, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 50 - 64, </pages> <month> March </month> <year> 1987 </year>
Reference-contexts: Both these techniques are provided by OOPLs. Components can be reused without change by instantiation (the creation of an instance). They can also be reused with alteration with the use of inheritance. Large scale code reuse can be obtained by the use of inheritance <ref> [10] </ref> [2] [6]. It has been proposed that the use of inheritance be restricted to that of an 'is-a' relationship (see [7] for an example). A restriction of this kind, has been used by the Eiffel community (see [10] and [11]). However, it has not been applied correctly. <p> Large scale code reuse can be obtained by the use of inheritance <ref> [10] </ref> [2] [6]. It has been proposed that the use of inheritance be restricted to that of an 'is-a' relationship (see [7] for an example). A restriction of this kind, has been used by the Eiffel community (see [10] and [11]). However, it has not been applied correctly. The natural language used to express the requirements is ambiguous and therefore open to interpretation, it has therefore been possible to abuse the restriction. <p> A sentence may be syntactically correct, but may be semantically incorrect with respect to expressing a conceptual dependency; that is, it may not actually express a conceptual dependency. For example (taken from <ref> [10] </ref>) "Every binary search tree is-a table" It is felt that this should actually read C.D.Turner - 10 - 16/04/93 "A binary search tree can be implemented as a table" It is felt that there are many different ways of implementing a binary search tree, a table is simply one of
Reference: [11] <author> Meyer, B., </author> <title> Object Oriented Software Construction, </title> <publisher> Prentice Hall, </publisher> <year> 1988 </year>
Reference-contexts: It has been proposed that the use of inheritance be restricted to that of an 'is-a' relationship (see [7] for an example). A restriction of this kind, has been used by the Eiffel community (see [10] and <ref> [11] </ref>). However, it has not been applied correctly. The natural language used to express the requirements is ambiguous and therefore open to interpretation, it has therefore been possible to abuse the restriction.
Reference: [12] <author> Smith, M. D. and Robson D. J., </author> <title> ObjectOriented Programming - the Problems of Validation, </title> <booktitle> in proceedings of the 6th International Conference on Software Maintenance, </booktitle> <pages> pp. 272 - 282, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990 </year>
Reference-contexts: This is because the state determines the response of the feature in the majority of cases. C.D.Turner - 14 - 16/04/93 5.2. Traditional Testing Methods It is because of this interconnectivity that Smith <ref> [12] </ref> suggests that traditional testing techniques will be difficult to apply to objectoriented programs. However, as was shown in [15], traditional testing techniques can be applied with a minor modification to the model upon which they are based.
Reference: [13] <author> Snyder, A., </author> <title> Encapsulation And Inheritance in ObjectOriented Programming Languages, </title> <booktitle> in proceedings of the ObjectOriented Programming: Systems, Languages and Applications Conference, </booktitle> <pages> pp. 38 - 45, </pages> <booktitle> SIGPLAN Notices, </booktitle> <publisher> ACM Inc., </publisher> <address> New York, New York, </address> <year> 1986 </year>
Reference-contexts: A 'fire-wall' is thus built in the path of any changes that would be propagated through the inheritance hierarchy. The preservation is achieved by mapping the expected functionality (the old representation model) onto the new representation. Work has been done in this area by Snyder (see <ref> [13] </ref> and [14]). In [14] he discusses the language CommonObjects which provides a mechanism for replacing a variable by a pair of features. Because the language provides the mechanism, the replacement is performed in a more consistent manner than would otherwise be possible.
Reference: [14] <author> Snyder, A., CommonObjects: </author> <title> An Overview, </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 21, no. 10, </volume> <pages> pp. 19 - 28, </pages> <month> October </month> <year> 1986 </year>
Reference-contexts: A 'fire-wall' is thus built in the path of any changes that would be propagated through the inheritance hierarchy. The preservation is achieved by mapping the expected functionality (the old representation model) onto the new representation. Work has been done in this area by Snyder (see [13] and <ref> [14] </ref>). In [14] he discusses the language CommonObjects which provides a mechanism for replacing a variable by a pair of features. Because the language provides the mechanism, the replacement is performed in a more consistent manner than would otherwise be possible. <p> The preservation is achieved by mapping the expected functionality (the old representation model) onto the new representation. Work has been done in this area by Snyder (see [13] and <ref> [14] </ref>). In [14] he discusses the language CommonObjects which provides a mechanism for replacing a variable by a pair of features. Because the language provides the mechanism, the replacement is performed in a more consistent manner than would otherwise be possible. Wirfs-Brock and Wilkerson also describes a similar technique (see [18]).
Reference: [15] <author> Turner, C. D., </author> <title> The Testing of ObjectOriented Programs, </title> <type> Tech. Rep. TR 13/92, </type> <institution> University of Durham, Durham, </institution> <address> England, </address> <year> 1992 </year>
Reference-contexts: Work has already been undertaken to redress this shortfall. This report is a continuation of the previous work by the author, described in <ref> [15] </ref>, [17] and [16]. C.D.Turner - 1 - 16/04/93 The remainder of this report is as follows: A section describing the terms and concepts that will be used throughout this report. A section describing the various ways in which classes can be declared, and their advantages and disadvantages. <p> Without the dependency, there is little chance that a derived class will require the changes that are to be made to its parent class. C.D.Turner - 13 - 16/04/93 5. Testing This section will discuss the testing of objectoriented programs. This topic has been cover in <ref> [15] </ref> and therefore will not be replicated here. However, this section is concerned with the guidance of the testing process rather than the algorithmic detail of how it is performed. <p> Unit of Test This report is only concerned with the process of unit testing classes. The size of a unit was discussed in <ref> [15] </ref>. The conclusion was that the class is the smallest sensible unit of test, not the feature. <p> C.D.Turner - 14 - 16/04/93 5.2. Traditional Testing Methods It is because of this interconnectivity that Smith [12] suggests that traditional testing techniques will be difficult to apply to objectoriented programs. However, as was shown in <ref> [15] </ref>, traditional testing techniques can be applied with a minor modification to the model upon which they are based. Alternatively, instead of altering the process model behind the testing (as outlined in [15]), the model behind the programming technique could be remapped to the model upon which the testing is based. <p> However, as was shown in <ref> [15] </ref>, traditional testing techniques can be applied with a minor modification to the model upon which they are based. Alternatively, instead of altering the process model behind the testing (as outlined in [15]), the model behind the programming technique could be remapped to the model upon which the testing is based. A class is a single unit encapsulating both a data structure and the required routines to interact with and manipulate the data structure to produce the required behaviour. <p> The disadvantage is that the class must be altered everytime it requires testing and then it must be rebuilt for release once validated. It is for this reason that the approach suggested in <ref> [15] </ref> is more advantageous. 5.3. Guidance for Testing A class has a very high level of encapsulation, and thus it might be expected that Black Box 1 testing would be used. <p> This is not so, it has been stated in [8] that this is not an adequate way to test a class. Therefore a mixture of both White Box 2 and Black Box testing should be used (see <ref> [15] </ref> for a more detailed discussion on the techniques required to ensure a class has been completely tested). For the procedural style of programming, a test case is usually created by test drivers which initialise the data structures required for use as the inputs to the routine under test.
Reference: [16] <author> Turner, C. D., </author> <title> State-Based Testing and Inheritance, </title> <type> Tech. Rep. TR 1/93, </type> <institution> University of Durham, Durham, </institution> <address> England, </address> <year> 1993 </year>
Reference-contexts: Work has already been undertaken to redress this shortfall. This report is a continuation of the previous work by the author, described in [15], [17] and <ref> [16] </ref>. C.D.Turner - 1 - 16/04/93 The remainder of this report is as follows: A section describing the terms and concepts that will be used throughout this report. A section describing the various ways in which classes can be declared, and their advantages and disadvantages.
Reference: [17] <author> Turner, C. D., </author> <title> A Suite of Tools for the State-Based Testing of ObjectOriented Programs, </title> <type> Tech. Rep. TR 14/92, </type> <institution> University of Durham, Durham, </institution> <address> England, </address> <year> 1992 </year>
Reference-contexts: Work has already been undertaken to redress this shortfall. This report is a continuation of the previous work by the author, described in [15], <ref> [17] </ref> and [16]. C.D.Turner - 1 - 16/04/93 The remainder of this report is as follows: A section describing the terms and concepts that will be used throughout this report. A section describing the various ways in which classes can be declared, and their advantages and disadvantages.
Reference: [18] <author> Wirfs-Brock, A. and Wilkerson, B., </author> <title> Variables Limit Reusability, </title> <journal> Journal of Object Oriented Programming, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. </pages> <note> 34 - 42, May/June 1989 C.D.Turner - 26 - 16/04/93 C.D.Turner - 27 - 16/04/93 </note>
Reference-contexts: In [14] he discusses the language CommonObjects which provides a mechanism for replacing a variable by a pair of features. Because the language provides the mechanism, the replacement is performed in a more consistent manner than would otherwise be possible. Wirfs-Brock and Wilkerson also describes a similar technique (see <ref> [18] </ref>). A further increase in class reuse can be obtained by allowing a derived class to redefine the access features. All inherited features would then by default use the new definitions, not the old ones.
References-found: 18

