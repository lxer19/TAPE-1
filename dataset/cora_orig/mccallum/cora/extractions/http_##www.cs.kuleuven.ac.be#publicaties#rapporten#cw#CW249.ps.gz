URL: http://www.cs.kuleuven.ac.be/publicaties/rapporten/cw/CW249.ps.gz
Refering-URL: http://www.cs.kuleuven.ac.be/publicaties/rapporten/CW1997.html
Root-URL: 
Title: Java and the ObjectOriented Paradigm: Comparison and Evaluation  
Author: W. AlAhmad and E. Steegmans 
Affiliation: Department of Computer Science, K.U.Leuven  
Date: 249, April 1997  
Pubnum: Report CW  
Abstract: Java has, undoubtedly, received unprecedented hype. This article examines Java in light of the ObjectOriented (OO for short) paradigm. We investigate whether the hype or part of it is due to the OO features, or due to other features of the language. For that purpose, we compare Java with other major OO languages such as C++, Eiffel and Smalltalk. Furthermore, we evaluate Java to arrive at an unbiased judgement regarding its expressive power of the OO paradigm. We outline some of the new interesting features of Java that we hope will be adopted by the OO community as new characteristics of OO languages. Finally, we present some recommendations that we hope will be considered in new releases of Java . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gosling and McGilton, </author> <title> The Java Language Environment, A White Paper, Sun Microsystems, </title> <year> 1995. </year>
Reference-contexts: 1. Introduction As there are nowadays a plethora of ObjectOriented Programming Languages (OOPLs for short), we believe it is imperative and useful to compare Java with other important OOPLs in an unbiased way. In the white paper <ref> [1] </ref> as well as in other literature, Java is defined as the language that is simple, objectoriented, robust, secure, architecture neutral, distributed, threaded, etc. We know that Java has borrowed its syntax from C++ to make it familiar to programmers.
Reference: [2] <author> Arnold and Gosling, </author> <title> The Java Programming Language, </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference: [3] <author> Flanagan, </author> <title> Java in a Nutshell, </title> <publisher> OReilly & Associates, </publisher> <year> 1996. </year>
Reference: [4] <author> Coad and Nicola, </author> <title> ObjectOriented Programming, </title> <publisher> Yourdon Press, </publisher> <year> 1993. </year>
Reference-contexts: Notion of Object Any OOPL includes the notion of an object. An object is an abstract entity which understands and executes a set of operations (methods, features) <ref> [4] </ref>. However, class-based OO programs do not deal with single objects, rather they deal with groups of objects. A class is a description of a group of objects with common characteristics and behavior. Classes and objects are the most important building blocks of the OO paradigm.
Reference: [5] <editor> Winblad et al., </editor> <booktitle> ObjectOriented Software, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [6] <editor> Madsen et al., </editor> <booktitle> ObjectOriented Programming in the Beta Language, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference: [8] <author> Goldberg and Robson, Smaltalk-80, </author> <title> The Language and its Implementation, </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference: [9] <author> Thomas and Weedon, </author> <title> ObjectOriented Programming in Eiffel, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [10] <author> Meyer, </author> <title> Eiffel : The Language, </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference: [11] <author> Stroustrup, </author> <title> The C++ Programming Language, Second Edition, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [12] <author> AlAhmad, Steegmans, </author> <title> Specialization of Behavior : Comparison, Critique, and A New Approach, </title> <note> Accepted for publication in JOOP, </note> <year> 1996. </year>
Reference-contexts: The Beta language went a step further and allowed the implementation of an extended operation in the subclass to be combined with that of the superclass. By so doing, Beta becomes the first language to partially fulfil the requirements of extension inheritance <ref> [12] </ref>. This is actually the reason why we compare Java with Beta with respect to this matter.
Reference: [13] <author> Joyner, </author> <title> C++ ?? A Critique of C++, </title> <note> 3rd Edition, http://www.csd.uu.se/~alexb/study/cppv3.ps.z , 1996 </note>
Reference: [14] <author> Kristensen and sterbye, </author> <title> A Conceptual Perspective on the Comparison of ObjectOriented Programming Languages, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> Vol. 31(2), </volume> <year> 1996. </year>
Reference-contexts: However, where it is appropriate we use other languages such as Smalltalk and Beta. Our evaluation of Java is based on the language features offered by Java and the languages we consider (other ways for languages comparison exist <ref> [ 14 ] </ref> ). We will follow the evaluation methodology proposed by Edward Berard [ 15 ] in his essay entitled Evaluating An Object-Oriented Programming Language. As such we will consider the common, missing, and new features of Java with respect to the other languages.
Reference: [15] <editor> Berard, </editor> <booktitle> Essays on ObjectOriented Software Engineering, Prentice-Hall, </booktitle> <volume> Vol. 1, </volume> <year> 1993. </year>
Reference-contexts: Our evaluation of Java is based on the language features offered by Java and the languages we consider (other ways for languages comparison exist [ 14 ] ). We will follow the evaluation methodology proposed by Edward Berard <ref> [ 15 ] </ref> in his essay entitled Evaluating An Object-Oriented Programming Language. As such we will consider the common, missing, and new features of Java with respect to the other languages.
Reference: [16] <author> Rumbaugh, </author> <title> Packaging a System: showing architecture dependencies, </title> <type> JOOP, </type> <institution> Vol.8(7), </institution> <year> 1996. </year>
Reference-contexts: Javas package is an interesting concept as it helps dividing classes that collaborate closely into units. This has many advantages as stated in <ref> [ 16 ] </ref> . - 6 - 2.1.4. Object Construction and Destruction Constructors offer the ability to create new instances of a class, whereas destructors offer the ability to destroy existing objects of a class. Constructors in C++, Eiffel and Java are restricted to initialization of new objects.
Reference: [17] <author> Budd, </author> <title> An Introduction to ObjectOriented Programming, </title> <publisher> Addison Wesley, </publisher> <year> 1997. </year>
Reference-contexts: There are two kinds of inheritance, namely, single inheritance whereby the subclass inherits from only one superclass, and multiple inheritance (subject of section 3.2) whereby the subclass inherits from more than one superclass. There are several forms of inheritance <ref> [17] </ref>. In extension inheritance for example, the subclass introduces new data and/or operations not present in the superclass. At times - 7 - the subclass needs to keep the effect of inherited features, but wants to add extra actions applicable to its instances.
Reference: [18] <author> Singh, </author> <title> Single Versus Multiple Inherutance in ObjectOriented Programming, </title> <journal> OOPS Messenger, </journal> <volume> Vol. 5(1), </volume> <year> 1994. </year>
Reference-contexts: Multiple Inheritance Unlike single inheritance, multiple inheritance (MI) is a controversial issue and there has been a considerable amount of discussion on its value. A thorough study of MI on its usefulness, difficulties and other related issues is given in <ref> [ 18 ] </ref> . Multiple inheritance, despite its complications, does add expressive power to and is a desirable property of the OO paradigm. It is also one of the most misused features of OO paradigm.
Reference: [19] <author> Meyer, </author> <title> Concurrency, distribution, clientserver and the Internet: </title> <note> http://www.eiffel.com/doc/manuals/CONCURRENCY.html, 1996. </note>
Reference-contexts: Beta ,for example, supports concurrency at the language and the programming environment levels. Several extensions to C++ were proposed to incorporate such issues in C++. Recently proposals are made to incorporate concurrency and distribution issues at language level in Eiffel <ref> [19] </ref>. A comparison of the language constructs and mechanisms offered by these languages is beyond the scope of this article. The solutions they provide are considerable improvements in these areas and form the building blocks for final solutions.
References-found: 18

