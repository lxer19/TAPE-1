URL: ftp://zonker.uwaterloo.ca/pub/TRs/3054.1.ps.Z
Refering-URL: http://www.cs.umd.edu/users/akyurek/papers.html
Root-URL: 
Title: Adaptive Block Rearrangement Under UNIX  
Author: Sedat Akyurek Kenneth Salem 
Address: College Park, Maryland 20742  College Park, Maryland 20742  
Affiliation: Department of Computer Science University of Maryland  Institute for Advanced Computer Studies and Department of Computer Science University of Maryland  
Date: February, 1994  
Pubnum: CS-TR-3054.1 UMIACS-TR-93-28.1  
Abstract: An adaptive UNIX disk device driver is described. To reduce seek times, the driver copies frequently-referenced blocks from their original locations to reserved space near the center of the disk. Block reference frequencies need not be known in advance. Instead, they are estimated by monitoring the stream of arriving requests. Measurements show that the adaptive driver reduces seek times and response times substantially.
Abstract-found: 1
Intro-found: 1
Reference: [Akyurek 93] <author> Akyurek, Sedat, Kenneth Salem, </author> <title> "Adaptive Block Rearrangement," </title> <booktitle> Proceedings of Ninth International Conference on Data Engineering, </booktitle> <address> Vienna, Austria, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: One of the major components of disk access times is seek time, the time required to move the drive's read/write heads to the required data. By reducing seek time, the performance of a disk can be improved. In a recent paper <ref> [Akyurek 93] </ref> we introduced an adaptive block rearrangement technique which reduces disk seek times. Under this technique, a small number of frequently referenced data blocks are copied from their original locations to a reserved space near the middle of the disk. <p> In our experiments, the analyzer maintained a list of several thousand reference counts, enough so that replacement was rarely necessary. However, experiments reported in <ref> [Salem 92, Akyurek 93, Salem 93] </ref> indicate that if space is limited, this technique can still generate very accurate guesses using much shorter lists. <p> This amounts to approximately 50 megabytes of space, about 5% of the disk's total capacity. The size of the reserved region puts an upper bound on the amount of data that can be rearranged. We chose the size in light of the results of our previous simulation studies <ref> [Akyurek 93] </ref>. These suggested that most of the benefits of block rearrangement were realized by rearranging 1%-2% of the total number of blocks. Sakarya was used as a file server for two different file systems. The first consisted primarily of executable files and libraries.
Reference: [English 92] <author> English, Robert M., Alexander A. Stepanov, " Loge: </author> <title> A Self-Organizing Disk Controller," </title> <booktitle> Proceedings of the Winter 1992 USENIX Conference, </booktitle> <address> San Francisco, CA, </address> <year> 1992. </year>
Reference-contexts: However, hot blocks from different files may be spread widely over the disk's surface. This can result in long random seek operations when requests for the blocks of different files are interleaved, as is the case in multi-user systems. LFS [Rosenblum 91] and Loge <ref> [English 92] </ref> rearrange data based on the order of writes in the request stream. The primary goal of these systems is to improve write performance, not read performance. In contrast to both Loge and LFS, our adaptive block rearrangement technique makes both read and write operations faster.
Reference: [Floyd 89] <author> Floyd, Richard A., Carla Schlatter Ellis, </author> <title> "Directory Reference Patterns in Hierarchical File Systems," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 1, No. 2, </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: More recently, similar results have been shown for optical storage media [Ford 91]. In practice, data references are not drawn from a fixed distribution, nor are they independent. Although references are highly skewed <ref> [Floyd 89, Staelin 91, Vongsath 90, Ouster 85] </ref>, request distributions change over time, and they are generally not known in advance. Nevertheless, variations of the organ pipe heuristic seem to work well in practice. Recently, several papers have proposed adaptive applications of data clustering based on this idea. <p> In Section 5 we present the results of experiments conducted while the system was operational on a network file server. 2 Overview Although the volume of data stored on disks is increasing, experience shows that only a small fraction of this data on the disks is actively and frequently used <ref> [Floyd 89, Staelin 90, Staelin 91] </ref>. If the blocks storing hot (frequently accessed) data are spread over the surface of the disk, distant from each other, long seek delays may result. Adaptive block rearrangement takes advantage of highly skewed data access patterns to reduce seek delays.
Reference: [Ford 91] <author> Ford, Daniel A., Stavros Christodoulakis, </author> <title> "Optimizing Random Retrievals from CLV format Optical Disks," </title> <booktitle> Proceedings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September, </month> <year> 1991. </year> <month> 19 </month>
Reference-contexts: The next most frequently accessed data is placed to either side of the center, and the process continues until the least-accessed data has been placed at the edge of the disk. More recently, similar results have been shown for optical storage media <ref> [Ford 91] </ref>. In practice, data references are not drawn from a fixed distribution, nor are they independent. Although references are highly skewed [Floyd 89, Staelin 91, Vongsath 90, Ouster 85], request distributions change over time, and they are generally not known in advance.
Reference: [Grossman 73] <author> Grossman, David D., Harvey F. Silverman, </author> <title> "Placement of Records on a Secondary Storage Device to Minimize Access Time," </title> <journal> JACM, Vol.20, </journal> <volume> No.3, </volume> <month> July </month> <year> 1973. </year>
Reference-contexts: If data references are derived from an independent random process with a known, fixed distribution, it has been shown that the organ pipe heuristic places the data optimally <ref> [Wong 80, Grossman 73] </ref>. The organ pipe heuristic calls for the most frequently accessed data to be placed in the center of the disk.
Reference: [Jobalia] <author> Jobalia, Meenal, </author> <title> "Precision Measurement of Disk Delay Characteristics," </title> <type> Master's Thesis, </type> <institution> Electrical Engineering Department, University of Maryland at College Park, </institution> <year> 1991. </year>
Reference-contexts: Later we repeated the experiments on a larger disk. Both disks provided SCSI (Small Computer System Interface) interfaces. Specifications and seek time functions for the disks are given in Table 1. The seek time function for the Toshiba disk is borrowed from <ref> [Jobalia] </ref>, in which the disk delay parameters for this disk were measured and a precise seek time function was devised. We derived the seek time function for the Fujitsu disk ourselves, using a methodology similar to that used in [Jobalia]. <p> The seek time function for the Toshiba disk is borrowed from <ref> [Jobalia] </ref>, in which the disk delay parameters for this disk were measured and a precise seek time function was devised. We derived the seek time function for the Fujitsu disk ourselves, using a methodology similar to that used in [Jobalia]. The Fujitsu disk has a track buffer and supports read-ahead buffering. With read-ahead buffering, when requested data is read off the recording media into the disk's buffer, the disk continues reading data into its buffer even after the requested piece of data is read.
Reference: [McKusick 84] <author> McKusick, K. Marshall, et al, </author> <title> "A Fast File System for UNIX," </title> <journal> ACM Transactions on Computer Systems 2(3), </journal> <month> August </month> <year> 1984. </year>
Reference-contexts: The layout of cool blocks is not disturbed at all. Transparency Our technique can be implemented in a device driver (or controller). No changes to the file system are required. Other systems cluster data based on criteria other than reference frequency. The Berkeley Fast File System (FFS) <ref> [McKusick 84] </ref> used in many UNIX systems uses placement heuristics that try to cluster the blocks of a file. However, hot blocks from different files may be spread widely over the disk's surface.
Reference: [McVoy 91] <author> McVoy, L.W., S.R. Kleiman, </author> <title> "Extent-like Performance from a UNIX File System," </title> <booktitle> USENIX Winter 1991 Conference Proceedings, </booktitle> <address> Dallas, TX, </address> <year> 1991. </year>
Reference-contexts: Sakarya has a main memory of 32 megabytes. The amount of memory used for buffer cache is not fixed. Under SunOS, the amount of physical memory used for the buffer cache is determined dynamically. Potentially, all of the available memory can be used for the buffer cache <ref> [McVoy 91] </ref>.
Reference: [Ouster 85] <author> Ousterhout, John K., et al, </author> <title> "A Trace Driven Analysis of the UNIX 4.2 BSD File System," </title> <booktitle> Proceedings of the 10th ACM Symposium on Operating System Principles, </booktitle> <year> 1985. </year>
Reference-contexts: More recently, similar results have been shown for optical storage media [Ford 91]. In practice, data references are not drawn from a fixed distribution, nor are they independent. Although references are highly skewed <ref> [Floyd 89, Staelin 91, Vongsath 90, Ouster 85] </ref>, request distributions change over time, and they are generally not known in advance. Nevertheless, variations of the organ pipe heuristic seem to work well in practice. Recently, several papers have proposed adaptive applications of data clustering based on this idea.
Reference: [Rosenblum 91] <author> Rosenblum, M., J. K. Ousterhout, </author> <title> "The Design and Implementation of a Log-Structured File System," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol.10, </volume> <month> February </month> <year> 1992, </year> <pages> 26-52. </pages>
Reference-contexts: However, hot blocks from different files may be spread widely over the disk's surface. This can result in long random seek operations when requests for the blocks of different files are interleaved, as is the case in multi-user systems. LFS <ref> [Rosenblum 91] </ref> and Loge [English 92] rearrange data based on the order of writes in the request stream. The primary goal of these systems is to improve write performance, not read performance.
Reference: [Ruemmler 91] <author> Ruemmler, C., J. Wilkes, </author> <title> "Disk Shu*ing", </title> <institution> HPL-91-156, Hewlett-Packard Laboratories, </institution> <address> Palo Alto, CA, </address> <month> October, </month> <year> 1991. </year>
Reference-contexts: Vongsathorn and Carson [Vongsath 90] showed that dynamically clustering frequently accessed data worked better than static placement. In that study, disk cylinders are dynamically rearranged using the organ pipe heuristic, according to observed data access frequencies. Recent work in the DataMesh project <ref> [Ruemmler 91] </ref> considered rearrangement of cylinders and blocks, with mixed results. Their conclusion that block shu*ing generally outperforms cylinder shu*ing corroborates one of our own.
Reference: [Salem 92] <author> Salem, K., D. Barbara, R. Lipton, </author> <title> "Probabilistic Diagnosis of Hot Spots," </title> <booktitle> Proceedings of the Eighth International Conference on Data Engineering, </booktitle> <month> February, </month> <year> 1992, </year> <pages> pp. 30-39. </pages>
Reference-contexts: In our experiments, the analyzer maintained a list of several thousand reference counts, enough so that replacement was rarely necessary. However, experiments reported in <ref> [Salem 92, Akyurek 93, Salem 93] </ref> indicate that if space is limited, this technique can still generate very accurate guesses using much shorter lists.
Reference: [Salem 93] <author> Salem, K., </author> <title> "Space-Efficient Hot Spot Estimation," </title> <institution> CS-TR-3115, Computer Science Dept., Univ. of Maryland, College Park, MD, </institution> <month> August, </month> <year> 1993. </year>
Reference-contexts: In our experiments, the analyzer maintained a list of several thousand reference counts, enough so that replacement was rarely necessary. However, experiments reported in <ref> [Salem 92, Akyurek 93, Salem 93] </ref> indicate that if space is limited, this technique can still generate very accurate guesses using much shorter lists.
Reference: [Staelin 90] <author> Staelin, Carl, Hector Garcia-Molina, </author> <title> "Clustering Active Disk Data To Improve Disk Performance," </title> <type> Technical Report CS-TR-283-90, </type> <institution> Department of Computer Science, Princeton University, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: In Section 5 we present the results of experiments conducted while the system was operational on a network file server. 2 Overview Although the volume of data stored on disks is increasing, experience shows that only a small fraction of this data on the disks is actively and frequently used <ref> [Floyd 89, Staelin 90, Staelin 91] </ref>. If the blocks storing hot (frequently accessed) data are spread over the surface of the disk, distant from each other, long seek delays may result. Adaptive block rearrangement takes advantage of highly skewed data access patterns to reduce seek delays.
Reference: [Staelin 91] <author> Staelin, Carl, Hector Garcia-Molina, </author> <title> "Smart Filesystems," </title> <booktitle> Proceedings of the Winter 1991 USENIX Conference, </booktitle> <address> Dallas, TX, </address> <year> 1991. </year>
Reference-contexts: More recently, similar results have been shown for optical storage media [Ford 91]. In practice, data references are not drawn from a fixed distribution, nor are they independent. Although references are highly skewed <ref> [Floyd 89, Staelin 91, Vongsath 90, Ouster 85] </ref>, request distributions change over time, and they are generally not known in advance. Nevertheless, variations of the organ pipe heuristic seem to work well in practice. Recently, several papers have proposed adaptive applications of data clustering based on this idea. <p> Recent work in the DataMesh project [Ruemmler 91] considered rearrangement of cylinders and blocks, with mixed results. Their conclusion that block shu*ing generally outperforms cylinder shu*ing corroborates one of our own. A similar approach is employed in the experimental iPcress file system <ref> [Staelin 91] </ref>, which monitors access to files and moves files with high "temperatures" (frequency of access divided by file size) to the center of the disk. Our technique differs from each of the techniques mentioned above in at least one of the following respects. <p> In Section 5 we present the results of experiments conducted while the system was operational on a network file server. 2 Overview Although the volume of data stored on disks is increasing, experience shows that only a small fraction of this data on the disks is actively and frequently used <ref> [Floyd 89, Staelin 90, Staelin 91] </ref>. If the blocks storing hot (frequently accessed) data are spread over the surface of the disk, distant from each other, long seek delays may result. Adaptive block rearrangement takes advantage of highly skewed data access patterns to reduce seek delays.
Reference: [Vongsath 90] <author> Vongsathorn, Paul, Scott D. Carson, </author> <title> "A System for Adaptive Disk Rearrangement," </title> <journal> Software-Practice and Experience, </journal> <volume> Vol. 20(3), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: More recently, similar results have been shown for optical storage media [Ford 91]. In practice, data references are not drawn from a fixed distribution, nor are they independent. Although references are highly skewed <ref> [Floyd 89, Staelin 91, Vongsath 90, Ouster 85] </ref>, request distributions change over time, and they are generally not known in advance. Nevertheless, variations of the organ pipe heuristic seem to work well in practice. Recently, several papers have proposed adaptive applications of data clustering based on this idea. <p> Nevertheless, variations of the organ pipe heuristic seem to work well in practice. Recently, several papers have proposed adaptive applications of data clustering based on this idea. Vongsathorn and Carson <ref> [Vongsath 90] </ref> showed that dynamically clustering frequently accessed data worked better than static placement. In that study, disk cylinders are dynamically rearranged using the organ pipe heuristic, according to observed data access frequencies. Recent work in the DataMesh project [Ruemmler 91] considered rearrangement of cylinders and blocks, with mixed results.
Reference: [Wong 80] <author> Wong, C. K., </author> <title> "Minimizing Expected Head Movement in One-Dimensional and Two-Dimensional Mass Storage Systems," </title> <journal> Computing Surveys, Vol.12, No.2, </journal> <month> June </month> <year> 1980. </year> <month> 20 </month>
Reference-contexts: If data references are derived from an independent random process with a known, fixed distribution, it has been shown that the organ pipe heuristic places the data optimally <ref> [Wong 80, Grossman 73] </ref>. The organ pipe heuristic calls for the most frequently accessed data to be placed in the center of the disk.
References-found: 17

