URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1994/tr-94-071.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1994.html
Root-URL: http://www.icsi.berkeley.edu
Title: Improved Randomized On-Line Algorithms for the List Update Problem  
Author: Susanne Albers 
Pubnum: TR-94-071  
Abstract: The best randomized on-line algorithms known so far for the list update problem achieve a competitiveness of p 3 1:73. In this paper we present a new family of randomized on-line algorithms that beat this competitive ratio. Our improved algorithms are called TIMESTAMP algorithms and achieve a competitiveness of maxf2 p; 1 + p(2 p)g, for any real number p 2 [0; 1]. Setting p = (3 p 5)=2, we obtain a -competitive algorithm, where = (1 + 5)=2 1:62 is the Golden Ratio. TIMESTAMP algorithms coordinate the movements of items using some information on past requests. We can reduce the required information at the expense of increasing the competitive ratio. We present a very simple version of the TIMESTAMP algorithms that is 1:68-competitive. The family of TIME-STAMP algorithms also includes a new deterministic 2-competitive on-line algorithm that is different from the MOVE-TO-FRONT rule. fl International Computer Science Institute, 1947 Center Street, Berkeley, CA 94704; and Max Planck Institute for Computer Science, Im Stadtwald, 66123 Saarbrucken, Germany. Supported in part by an Otto Hahn Medal Award of the Max Planck Society and by the ESPRIT Basic Research Actions Program of the EU under contract No. 7141 (project ALCOM II). p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ben-David, A. Borodin, R.M. Karp, G. Tardos and A. Wigderson. </author> <title> On the power of randomization in on-line algorithms. </title> <journal> Algorithmica, </journal> <volume> 11(1) </volume> <pages> 2-14, </pages> <year> 1994. </year>
Reference-contexts: Thus the MOVE-TO-FRONT algorithm achieves the best possible competitive factor. While the best performance of deterministic on-line algorithms is known, the optimal competitive factor of randomized on-line algorithms has not been determined yet. Here we are interested in evaluating randomized on-line algorithms against the oblivious adversary <ref> [1] </ref>. The oblivious adversary specifies a request sequence in advance and is not allowed to see the random choices made by the on-line algorithm. <p> In this paper we present improved randomized on-line algorithms for the list update problem that beat the competitive ratio of p 3. Our new algorithms are called TIMESTAMP algorithms and achieve a competitiveness of maxf2 p; 1 + p (2 p)g, for any real number p 2 <ref> [0; 1] </ref>. Choosing p = (3 5)=2, we obtain a -competitive algorithm, where = (1 + p 5)=2 1:62 is the Golden Ratio. <p> All theorems that we will present also hold for the dynamic list update problem. 2 TIMESTAMP algorithms We present a new family of randomized on-line algorithms for the list update problem. The following algorithm works for any real number p 2 <ref> [0; 1] </ref>. Algorithm TIMESTAMP (p): Given a request sequence = (1); (2); : : : ; (m), each request (t), 1 t m, is processed as follows. Suppose that (t) is a request to item x. <p> Suppose that (t) is a request to item x. With probability p, execute Step (a). (a) Move x to the front of the list. With probability 1 p, execute Step (b). (b) If x has not been requested so far during the time interval <ref> [1; t 1] </ref>, then do not change the position of x in the list. Otherwise let t 0 2 [1; t 1] be the time at which x was requested most recently and serve the request (t) as follows. <p> With probability 1 p, execute Step (b). (b) If x has not been requested so far during the time interval <ref> [1; t 1] </ref>, then do not change the position of x in the list. Otherwise let t 0 2 [1; t 1] be the time at which x was requested most recently and serve the request (t) as follows. <p> If there is no such item, then let v x (t) = x. Insert x immediately before v x (t). Theorem 1 For any real number p 2 <ref> [0; 1] </ref>, TIMESTAMP (p) is c-competitive, where c = maxf2 p; 1 + p (2 p)g. <p> Theorem 2 implies that this deterministic strategy is 2-competitive. We now proceed with the proof of Theorem 1. Consider a fixed p 2 <ref> [0; 1] </ref>. Let be an arbitrary request sequence consisting of m requests. Let C T S () be the cost incurred by TIMESTAMP (p) in serving . <p> Obviously, an online algorithm that is c-competitive in the (i 1)-cost measure is also c-competitive in the i-cost measure. We need some notation. Let L be the set of items in the list. For any t 2 <ref> [1; m] </ref> and any item x 2 L, let C T S (t; x) be the cost incurred by item x when TIMESTAMP (p) serves (t). <p> In any case x precedes y in TIMESTAMP (p)'s list immediately after the service of (t). Since y is only moved when it is requested, the relative position of x and y cannot change before the next request to y. 2 Lemma 2 Let t be a time in <ref> [1; m] </ref>. If the item x = (t) was requested at least once in [1; t 1], then the following two statements hold. <p> Since y is only moved when it is requested, the relative position of x and y cannot change before the next request to y. 2 Lemma 2 Let t be a time in [1; m]. If the item x = (t) was requested at least once in <ref> [1; t 1] </ref>, then the following two statements hold. <p> Proof: Suppose that there is a time in <ref> [1; m] </ref> at which Lemma 2 does not hold. Then let t 0 2 [1; m] be the earliest point of time at which the lemma is violated. <p> Proof: Suppose that there is a time in <ref> [1; m] </ref> at which Lemma 2 does not hold. Then let t 0 2 [1; m] be the earliest point of time at which the lemma is violated. Furthermore, let t 0 0 , t 0 time at which item x = (t 0 ) was requested most recently, and let z = v x (t 0 ). <p> Claim 1 implies that with probability p, TIMESTAMP (p) moves x in front of y when serving (t b j ); in that case Step (a) was executed. If y was not requested during <ref> [1; t b j +1 1] </ref>, then y stays behind x if and only if TIMESTAMP (p) executes Step (b) when serving (t b j +1 ). If y was requested at least once during [1; t b j +1 1], then applying Lemma 2b) (the roles of x and y <p> If y was not requested during <ref> [1; t b j +1 1] </ref>, then y stays behind x if and only if TIMESTAMP (p) executes Step (b) when serving (t b j +1 ). If y was requested at least once during [1; t b j +1 1], then applying Lemma 2b) (the roles of x and y are interchanged), we obtain that x precedes v y (t b j +1 ) immediately before the request (t b j +1 ). <p> We conclude E [C T S (P (j))] = 1 + p + (2h 1 1)(1 p + p 2 ) + p p 2 2 (h 1 + 1)(1 p + p 2 ) for all p 2 <ref> [0; 1] </ref>. Thus E [C T S (P (j))] 2 (h 1 + 1)(1 p + p 2 ) (h 1 + 1)(2 p) 2 . <p> If TIMESTAMP (p) executes Step (a) when serving (t b j ), then x is moved to the front of the list and must precede y. On the other hand, suppose that (t b j ) is served using Step (b). If x was not requested during <ref> [1; t b j 1] </ref>, then the position of x remains unchanged and x stays behind y in the list. If x was requested at least once in [1; t b j 1], then Lemma 2a) implies that y precedes v x (t b j ) at time t b j <p> On the other hand, suppose that (t b j ) is served using Step (b). If x was not requested during <ref> [1; t b j 1] </ref>, then the position of x remains unchanged and x stays behind y in the list. If x was requested at least once in [1; t b j 1], then Lemma 2a) implies that y precedes v x (t b j ) at time t b j .
Reference: [2] <author> S. Irani. </author> <title> Two results on the list update problem. </title> <journal> Information Processing Letters, </journal> <volume> 38 </volume> <pages> 301-306, </pages> <year> 1991. </year>
Reference-contexts: Against the oblivious adversary, a randomized on-line algorithm A is called c-competitive if there exists a constant a such that for all request sequences , E [C A ()] c C OP T () + a; where the expectation is taken over the random choices made by A. Irani <ref> [2] </ref> has exhibited the first randomized on-line algorithm for the list update problem; the SPLIT algorithm she proposed is 31 16 -competitive. Reingold et al. [4] have given a family of COUNTER and RANDOM RESET algorithms that achieve a competitive ratio of p 3 1:73. <p> C OP T ( fx;yg ) t2 [1;m] C OP T (t; y) + t2 [1;m] C OP T (t; x) and equation (2) implies C OP T () fx;yg C OP T ( fx;yg ): This method of analyzing cost by considering pairs of items was also used in <ref> [2] </ref>.
Reference: [3] <author> R. Karp and P. Raghavan. </author> <type> Personal communication, </type> <note> transmitted through [4]. </note>
Reference-contexts: Sleator and Tarjan [5] have shown that the well-known MOVE-TO-FRONT algorithm is 2-competitive. This deterministic on-line algorithm moves an item to the front of the list each time it is requested. Karp and Raghavan <ref> [3] </ref> have observed that no deterministic on-line algorithm for the list update problem can be better than 2-competitive. Thus the MOVE-TO-FRONT algorithm achieves the best possible competitive factor.
Reference: [4] <author> N. Reingold, J. Westbrook and D.D. Sleator. </author> <title> Randomized competitive algorithms for the list update problem. </title> <journal> Algorithmica, </journal> <volume> 11(1) </volume> <pages> 15-32, </pages> <year> 1994. </year>
Reference-contexts: Irani [2] has exhibited the first randomized on-line algorithm for the list update problem; the SPLIT algorithm she proposed is 31 16 -competitive. Reingold et al. <ref> [4] </ref> have given a family of COUNTER and RANDOM RESET algorithms that achieve a competitive ratio of p 3 1:73. This has been the best upper bound known so far for randomized list update algorithms. The best lower bound known is due to Teia [6]. <p> In the simplified TIMESTAMP algorithm we can reduce the number of random bits using a technique presented by Reingold et 11 al. <ref> [4] </ref>. For each item in the list we maintain a mod i counter, where i is a positive integer. These counters are initialized independently and uniformly at random to a value in f0; 1; : : : ; i 1g.
Reference: [5] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communication of the ACM, </journal> <volume> 28 </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: A list update algorithm is on-line if it serves every request without knowledge of any future requests. We analyze the performance of on-line algorithms for the list update problem using competitive analysis <ref> [5] </ref>. In a competitive analysis, an on-line algorithm A is compared to an optimal off-line algorithm. An optimal off-line algorithm knows the entire request sequence in advance and can serve it with minimum cost. <p> Then the algorithm A is called c-competitive if there is a constant a such that C A () c C OP T () + a for all request sequences . The competitive factor of A is the infimum of all c such that A is c-competitive. Sleator and Tarjan <ref> [5] </ref> have shown that the well-known MOVE-TO-FRONT algorithm is 2-competitive. This deterministic on-line algorithm moves an item to the front of the list each time it is requested. Karp and Raghavan [3] have observed that no deterministic on-line algorithm for the list update problem can be better than 2-competitive. <p> The family of TIMESTAMP algorithms also includes two deterministic 2-competitive on-line algorithms, one of which is the MOVE-TO-FRONT rule. The second, new algorithm is the only other deterministic on-line algorithm found so far that achieves a competitive factor of 2; Sleator and Tarjan <ref> [5] </ref> have proved that the well-known deterministic algorithms TRANSPOSE and FREQUENCY COUNT are not 2-competitive. The list update problem as defined above is the static version of the problem. Each request is an access to an item.
Reference: [6] <author> B. Teia. </author> <title> A lower bound for randomized list update algorithms. </title> <journal> Information Processing Letters, </journal> <volume> 47 </volume> <pages> 5-9, </pages> <year> 1993. </year>
Reference-contexts: Reingold et al. [4] have given a family of COUNTER and RANDOM RESET algorithms that achieve a competitive ratio of p 3 1:73. This has been the best upper bound known so far for randomized list update algorithms. The best lower bound known is due to Teia <ref> [6] </ref>. He shows that no randomized on-line algorithm for the list update problem can be better than 1.5-competitive. In this paper we present improved randomized on-line algorithms for the list update problem that beat the competitive ratio of p 3.
References-found: 6

