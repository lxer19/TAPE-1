URL: ftp://ftp.cs.umass.edu/pub/eksl/tech-reports/ijcai95-msa_95-66.ps
Refering-URL: http://www.cs.umass.edu/~atkin/research/publications.html
Root-URL: 
Title: Monitoring in Embedded Agents  
Author: Marc S. Atkin and Paul R. Cohen 
Note: This research was supported by ARPA/Rome Laboratory under contract F30602-91-C-0076.  
Address: Box 34610  Amherst, MA 01003-4610  
Affiliation: Computer Science  Experimental Knowledge Systems Laboratory Computer Science Department,  Lederle Graduate Research Center University of Massachusetts  
Pubnum: Technical Report 95-66  
Abstract: Finding good monitoring strategies is an important process in the design of any embedded agent. We describe the nature of the monitoring problem, point out what makes it difficult, and show that while periodic monitoring strategies are often the easiest to derive, they are not always the most appropriate. We demonstrate mathematically and empirically that for a wide class of problems, the so-called "cupcake problems", there exists a simple strategy, interval reduction, that outperforms periodic monitoring. We also show how features of the environment may influence the choice of the optimal strategy. The paper concludes with some thoughts about a monitoring strategy taxonomy, and what its defining features might be. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Atkin, M. & Cohen, P. R., </author> <year> 1993. </year> <title> Genetic Programming to Learn an Agent's Monitoring Strategy, </title> <booktitle> Proceedings of the AAAI 93 Workshop on Learning Action Models, </booktitle> <pages> pp. 36-41. </pages>
Reference-contexts: Proportional Reduction Motivated by the Ceci and Bronfenbrenner study, one of our main interests was the relative merits of interval reduction and periodic monitoring in the cupcake problem. In this section, we will present both empirical and analytical work (see <ref> [1] </ref> for a more complete description). The subclass of interval reduction strategies under investigation is perhaps the most simple, characterized by a linear interval reduction function: after monitoring, the agent waits a fixed proportion of the distance remaining to the deadline before monitoring again.
Reference: [2] <author> Atkin, M. S. & Cohen, P. R., </author> <year> 1994. </year> <title> Learning Monitoring Strategies: A Difficult Genetic Programming Application. </title> <booktitle> Proceedings on the First IEEE Conference on Evolutionary Computation, </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. </pages> <month> 328-332a. </month>
Reference-contexts: Examples for the latter category are loop commands and conditionals. We developed several systems that learned monitoring strategies (see <ref> [2] </ref> for an overview). The one we discuss here, linear LTB, represented individuals as fixed-size lists of commands. Population size was 800, tournament selection with a tournament size of two was the selection scheme. A program's fitness score was based on the average of twelve different test cases.
Reference: [3] <author> Atkin, M. S., </author> <year> 1994. </year> <title> A Genetic Programming Approach to a Monitoring Strategy Taxonomy. </title> <type> Master's Thesis, </type> <institution> University of Massachusetts at Amherst. </institution> <month> 10 </month>
Reference-contexts: It is easy to show that if you have no knowledge about how the event being monitored for is temporally distributed, and if monitoring tells you only whether the event has occurred or not, then periodic monitoring is the best strategy <ref> [3] </ref>. Periodic monitoring is also the best strategy if the event can occur at any given time with equal probability [3]. As an example, consider fires breaking out in a forest. <p> about how the event being monitored for is temporally distributed, and if monitoring tells you only whether the event has occurred or not, then periodic monitoring is the best strategy <ref> [3] </ref>. Periodic monitoring is also the best strategy if the event can occur at any given time with equal probability [3]. As an example, consider fires breaking out in a forest. Let the probability that a fire breaks out on any given day be p; a fire incurs a cost F for every day it burns undetected. <p> They are representations of behavior. Our goal was to apply genetic programming to a wide variety of problems, and build a taxonomy from the resulting monitoring strategies based on general features of the task and environment <ref> [3] </ref>. For this purpose, we needed a programming language that was general and easily extendable. <p> We have been able to show that for any cupcake problem with large enough D, a proportional reduction strategy exists that does better than the best periodic one. The proof is fairly involved, and cannot be presented in its entirety here (see <ref> [3] </ref>). Basically, the proof proceeds as follows: Derive a lower bound on the expected cost of the best periodic monitoring strategy for a cupcake problem. <p> During our experiments with different scenarios, we have come to believe that there may only be a relatively small number of basic monitoring strategies <ref> [3] </ref>. This would imply that the factor subset cannot be very large. An interesting way of looking at the difference between periodic and interval reduction is in terms of the amount of information the sensor provides.
Reference: [4] <author> Ceci, S. J. & Bronfenbrenner, U., </author> <year> 1985. </year> <title> "Don't forget to take the cupcakes out of the oven": Prospective memory, strategic time-monitoring, and context. Child Development, </title> <journal> Vol. </journal> <volume> 56. </volume> <pages> pp. 152-164. </pages>
Reference-contexts: We believe this is a general rule: If monitoring changes the agent's knowledge about the distribution of an event, monitoring events are no longer independent and monitoring becomes a sequential decision problem. 3 Interval Reduction In 1985, Ceci and Bronfenbrenner conducted an experiment with children from two different age groups <ref> [4] </ref>. They instructed the children to take cupcakes out of an oven in 30 minutes, and to spend the time until then playing a video game.
Reference: [5] <author> Cohen, P. R., Atkin, M. S., and Hansen, E. A., </author> <year> 1994. </year> <title> The Interval Reduction Strategy for Monitoring Cupcake problems, </title> <booktitle> Proceedings of the Third International Conference on the Simulation of Adaptive Behavior. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: Like periodic monitoring, interval reduction is a very general strategy. We have shown empirically that it arises in a variety of agents, artificial and natural, in cupcake problems <ref> [5] </ref>. Interval reduction emerges if one simply tries to fix the probability of overshooting the goal during each epoch.
Reference: [6] <author> Doyle, R., Atkinson, D., & Doshi, R., </author> <year> 1986. </year> <title> Generating Perception Requests and Expectations to Verify the Execution of Plans. </title> <booktitle> AAAI-86, </booktitle> <pages> pp. 81-88. </pages>
Reference-contexts: This paper represents a summary of the work we have done on discovering and categorizing monitoring strategies. We want to demonstrate that the prevalent scheme, monitoring after each effector action <ref> [6, 7, 8, 9, 15] </ref>, is not always the most efficient. The emphasis will be on discussing what makes certain monitoring problems more difficult than others, and investigating the tradeoff between two monitoring strategies, periodic and interval reduction. In robotic systems, monitoring happens on at least three levels.
Reference: [7] <author> Fikes, R., Hart, P., & Nilsson, N., </author> <year> 1972. </year> <title> Learning and Executing Generalized Robot Plans. </title> <booktitle> Artificial Intelligence 3 (4), </booktitle> <pages> pp. 251-288. </pages>
Reference-contexts: This paper represents a summary of the work we have done on discovering and categorizing monitoring strategies. We want to demonstrate that the prevalent scheme, monitoring after each effector action <ref> [6, 7, 8, 9, 15] </ref>, is not always the most efficient. The emphasis will be on discussing what makes certain monitoring problems more difficult than others, and investigating the tradeoff between two monitoring strategies, periodic and interval reduction. In robotic systems, monitoring happens on at least three levels.
Reference: [8] <author> Firby, R. J., </author> <year> 1987. </year> <title> An Investigation into Reactive Planning in Complex Domains, </title> <booktitle> AAAI-87, </booktitle> <pages> pp. 202-206. </pages>
Reference-contexts: This paper represents a summary of the work we have done on discovering and categorizing monitoring strategies. We want to demonstrate that the prevalent scheme, monitoring after each effector action <ref> [6, 7, 8, 9, 15] </ref>, is not always the most efficient. The emphasis will be on discussing what makes certain monitoring problems more difficult than others, and investigating the tradeoff between two monitoring strategies, periodic and interval reduction. In robotic systems, monitoring happens on at least three levels. <p> Each of these levels requires a monitoring strategy, but due to the different circumstances and costs involved, the strategies might be completely different. A distinction is frequently made between sensing and monitoring (e.g. <ref> [8, 9, 15] </ref>). Sensing refers to the typically low-level data acquisition mechanisms needed to keep a world model up-to-date; monitoring involves querying this world model. The multi-level model of monitoring also explains why interrupts cannot be used to circumvent the need for monitoring.
Reference: [9] <author> Georgeff, M. P., & Lansky, A. L., </author> <year> 1987. </year> <title> Reactive Reasoning and Planning, </title> <booktitle> AAAI-87, </booktitle> <pages> pp. 677-682. </pages>
Reference-contexts: This paper represents a summary of the work we have done on discovering and categorizing monitoring strategies. We want to demonstrate that the prevalent scheme, monitoring after each effector action <ref> [6, 7, 8, 9, 15] </ref>, is not always the most efficient. The emphasis will be on discussing what makes certain monitoring problems more difficult than others, and investigating the tradeoff between two monitoring strategies, periodic and interval reduction. In robotic systems, monitoring happens on at least three levels. <p> Each of these levels requires a monitoring strategy, but due to the different circumstances and costs involved, the strategies might be completely different. A distinction is frequently made between sensing and monitoring (e.g. <ref> [8, 9, 15] </ref>). Sensing refers to the typically low-level data acquisition mechanisms needed to keep a world model up-to-date; monitoring involves querying this world model. The multi-level model of monitoring also explains why interrupts cannot be used to circumvent the need for monitoring.
Reference: [10] <author> Goldberg, D. E., </author> <year> 1989. </year> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: We call this class of strategies proportional reduction strategies. 4.1 The Genetic Programming Algorithm Genetic programming concerns itself with the evolution of programs via a genetic algorithm (e.g. [13, 14]; see <ref> [10] </ref> for an introduction to genetic algorithms). In our case, these programs represent monitoring strategies. But they are more than just that: they also tell the agent how to solve the task at hand. They are representations of behavior.
Reference: [11] <author> Hansen, E. A., </author> <year> 1992. </year> <note> Note on monitoring cupcakes. EKSL Memo #22. </note> <institution> Experimental Knowledge Systems Laboratory, Computer Science Dept., University of Mas-sachusetts, Amherst. </institution>
Reference-contexts: Again, we have a sequential decision problem. Eric Hansen has generated the optimal strategy for a given cupcake problem using a dynamic programming algorithm, and it is in fact an interval reduction strategy <ref> [11] </ref>. One computes the optimal placement of the last monitoring event and works backwards to the starting point. This algorithm has been extended to the general problem of monitoring plan execution [12].
Reference: [12] <author> Hansen, E. A., </author> <year> 1994. </year> <title> Cost-Effective Sensing During Plan Execution. </title> <booktitle> AAAI-94, </booktitle> <pages> pp. 1029-1035. </pages>
Reference-contexts: One computes the optimal placement of the last monitoring event and works backwards to the starting point. This algorithm has been extended to the general problem of monitoring plan execution <ref> [12] </ref>. The problem with a dynamic programming approach is that it gives you the monitoring strategy implicitly: at each time step, you know how long you should wait before monitoring again.
Reference: [13] <author> Koza, J. R., </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection and Genetics. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: We call this class of strategies proportional reduction strategies. 4.1 The Genetic Programming Algorithm Genetic programming concerns itself with the evolution of programs via a genetic algorithm (e.g. <ref> [13, 14] </ref>; see [10] for an introduction to genetic algorithms). In our case, these programs represent monitoring strategies. But they are more than just that: they also tell the agent how to solve the task at hand. They are representations of behavior.
Reference: [14] <author> Koza, J. R. & Rice, J.P., </author> <year> 1992. </year> <title> Automatic Programming of Robots using Genetic Programming. </title> <booktitle> AAAI-92, </booktitle> <pages> pp. 194-207. </pages>
Reference-contexts: We call this class of strategies proportional reduction strategies. 4.1 The Genetic Programming Algorithm Genetic programming concerns itself with the evolution of programs via a genetic algorithm (e.g. <ref> [13, 14] </ref>; see [10] for an introduction to genetic algorithms). In our case, these programs represent monitoring strategies. But they are more than just that: they also tell the agent how to solve the task at hand. They are representations of behavior.
Reference: [15] <author> McDermott, D., </author> <year> 1978. </year> <title> Planning and Acting. </title> <booktitle> Cognitive Science 2 (2), </booktitle> <pages> pp. 71-109. 11 </pages>
Reference-contexts: This paper represents a summary of the work we have done on discovering and categorizing monitoring strategies. We want to demonstrate that the prevalent scheme, monitoring after each effector action <ref> [6, 7, 8, 9, 15] </ref>, is not always the most efficient. The emphasis will be on discussing what makes certain monitoring problems more difficult than others, and investigating the tradeoff between two monitoring strategies, periodic and interval reduction. In robotic systems, monitoring happens on at least three levels. <p> Each of these levels requires a monitoring strategy, but due to the different circumstances and costs involved, the strategies might be completely different. A distinction is frequently made between sensing and monitoring (e.g. <ref> [8, 9, 15] </ref>). Sensing refers to the typically low-level data acquisition mechanisms needed to keep a world model up-to-date; monitoring involves querying this world model. The multi-level model of monitoring also explains why interrupts cannot be used to circumvent the need for monitoring.
References-found: 15

