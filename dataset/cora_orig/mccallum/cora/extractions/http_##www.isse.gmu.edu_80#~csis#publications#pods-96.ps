URL: http://www.isse.gmu.edu:80/~csis/publications/pods-96.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Email: bettini@dsi.unimi.it  fxywang, jajodiag@isse.gmu.edu  
Title: Testing Complex Temporal Relationships Involving Multiple Granularities and Its Application to Data Mining (Extended Abstract)  
Author: Claudio Bettini X. Sean Wang, Sushil Jajodia 
Address: via Comelico 39, 20135 Milan, Italy  Fairfax, VA 22030, USA  
Affiliation: Dept. of Computer Science (DSI) University of Milan  Dept. of Info.& Software Systems Eng. George Mason University  
Abstract: An important usage of time sequences is for discovering temporal patterns of events (a special type of data mining). This process usually starts with the specification by the user of an event structure which consists of a number of variables representing events and temporal constraints among these variables. The goal of the data mining is to find temporal patterns, i.e., instantiations of the variables in the structure, which frequently appear in the time sequence. This paper introduces event structures that have temporal constraints with multiple granularities (TCGs). Testing the consistency of such structures is shown to be NP-hard. An approximate algorithm is then presented. The paper also introduces the concept of a timed automaton with granularities (TAGs) that can be used to find in a time sequence occurrences of a particular TCG with instantiated variables. The TCGs, the approximate algorithm and the TAGs are shown to be useful for obtaining effective data mining procedures. 
Abstract-found: 1
Intro-found: 1
Reference: [AD94] <author> R. Alur and D. L. Dill. </author> <title> A theory of timed 8 automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: We introduce networks of constraints in terms of arbitrary gran-ularities and a new algorithm to solve the related problems. Finally, the TAGs presented here are extensions of the timed automata introduced in <ref> [AD94] </ref> for modelling real-time systems and checking their specifications. We extend the automata to ones which have clocks "ticking" in different granularities in order to use them to find complex events that have temporal relationships involving multiple granularities. <p> In order to do so, we define a variation of the timed automaton <ref> [AD94] </ref> that we call a timed automaton with granularities (TAG). A TAG is essentially an automaton that recognizes words. However, there is a timing information associated with the symbols of the words signifying the time when the symbol arrives at the automaton.
Reference: [AHU74] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ull-man. </author> <title> The design and analysis of computer algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: The proof basically follows a standard technique for pattern matching using a non-deterministic finite automaton (NDFA) (cf. <ref> [AHU74, page 328] </ref>). For each input symbol, a new set of states that are reached from the states of the previous step is recorded. (Initially, the set consists of all the start states.) Note however, clock values, in addition to the states, must be recorded.
Reference: [AIS90] <author> R. Agrawal, T. Imielinski, and A. Swami. </author> <title> Database mining: A performance perspective. </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> 5(5) </volume> <pages> 914-925, </pages> <year> 1990. </year>
Reference-contexts: These types of analyses can be very useful for deriving implicit information from the raw data, and for predicting the future behavior of the process that we are monitoring. Although a lot of work has been done on identifying and using patterns in sequential data (see <ref> [AIS90, Lai93] </ref> for an overview), little attention has been paid to the discovery of temporal patterns or relationships that involve multiple granularities. We believe that these relationships are an important aspect of data mining.
Reference: [BWJ95] <author> C. Bettini, X. Wang, and S. Jajodia. </author> <title> On the relevance of time granularity in data mining. </title> <type> Technical report, </type> <institution> ISSE Department, George Mason University, </institution> <year> 1995. </year>
Reference-contexts: For step 5, the TAGs introduced in Section 4 are used. For lack of space, we only give an intuition of steps 2 and 3 which are formally specified in <ref> [BWJ95] </ref>, while in the next subsection we describe step 4. Regarding Step 2, we give a general rule to reduce the length of the input event sequence by exploiting the granularities. For example, consider the event structure depicted in Figure 1 (a).
Reference: [CSS94] <author> R. Chandra, A. Segev, and M. Stonebraker. </author> <title> Implementing calendars and temporal rules in next generation databases. </title> <booktitle> In Proc. Data Engineering Conference, </booktitle> <year> 1994. </year>
Reference-contexts: Hence, a real system can use only a subset of the temporal types that we have defined. Various proposals on representing granularities have appeared in the literature (e.g., <ref> [NS92, LMF86, CSS94] </ref>). The granularities expressible in these languages are all instances of our temporal types. Furthermore, software packages that implement calendars are available [Soo93]. However, all the algorithms of this paper are implementable in a system using any of the above representations or systems.
Reference: [DMP91] <author> R. Dechter, I. Meiri, and J. Pearl. </author> <title> Temporal constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 49, </volume> <year> 1991. </year>
Reference-contexts: The temporal constraints with granularities introduced in this paper are closely related to temporal constraint networks and related problems (e.g., consistency checking) that have been studied mostly in A.I. (cf. <ref> [DMP91] </ref>); however, these works assume that either constraints involve a single granularity or, if they involve multiple gran-ularities, they are translated into constraints in single granularity before applying the algorithms. We introduce networks of constraints in terms of arbitrary gran-ularities and a new algorithm to solve the related problems. <p> That is, for each in M , let C be the set of all the constraints X Y 2 [m; n], where X, Y are in W and [m; n] 2 (X; Y ). Now, the propagation within C is a problem known as the Simple Temporal Problem <ref> [DMP91] </ref>. We apply the path consistency algorithm [DMP91] within each group. Since constraints expressed in a granularity could imply constraints in other granularities, we need to translate the constraints of each group to those in terms of the other granularities, and add them to the corresponding groups. <p> Now, the propagation within C is a problem known as the Simple Temporal Problem <ref> [DMP91] </ref>. We apply the path consistency algorithm [DMP91] within each group. Since constraints expressed in a granularity could imply constraints in other granularities, we need to translate the constraints of each group to those in terms of the other granularities, and add them to the corresponding groups.
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability A guide to the theory of NP-completeness. W.H. </title> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: Unfortunately, however, determining the consistency of event structures turns out to be a difficult problem: Theorem 1 It is NP-hard to decide if an arbitrary event structure is consistent. The proof consists of a reduction from the "subset sum" problem <ref> [GJ79] </ref>. The basic difficulty of the consistency checking is due to the fact that the presence of different granularities in the constraints allows us to express a form of disjunction. Consider the graph in Figure 1 (b).
Reference: [Lai93] <author> P. Laird. </author> <title> Identifying and using patterns in sequential data. In Algorithmic Learning theory, </title> <booktitle> 4th International Workshop, </booktitle> <pages> pages 1-18. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: These types of analyses can be very useful for deriving implicit information from the raw data, and for predicting the future behavior of the process that we are monitoring. Although a lot of work has been done on identifying and using patterns in sequential data (see <ref> [AIS90, Lai93] </ref> for an overview), little attention has been paid to the discovery of temporal patterns or relationships that involve multiple granularities. We believe that these relationships are an important aspect of data mining.
Reference: [LMF86] <author> B. Leban, D. Mcdonald, and D. Foster. </author> <title> A representation for collections of temporal intervals. </title> <booktitle> In Proc. AAAI-86, </booktitle> <pages> pages 367-371, </pages> <year> 1986. </year>
Reference-contexts: Hence, a real system can use only a subset of the temporal types that we have defined. Various proposals on representing granularities have appeared in the literature (e.g., <ref> [NS92, LMF86, CSS94] </ref>). The granularities expressible in these languages are all instances of our temporal types. Furthermore, software packages that implement calendars are available [Soo93]. However, all the algorithms of this paper are implementable in a system using any of the above representations or systems.
Reference: [MTV95] <author> H. Mannila, H. Toivonen, and A.I. Verkamo. </author> <title> Discovering frequent episodes in sequences (extended abstract). </title> <booktitle> In 1st Conference on Knowledge Discovery and Data Mining, </booktitle> <address> Montreal, CA, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: The global approach offers an effective procedure to discover patterns of events that occur frequently in a sequence satisfying specific temporal relationships. In terms of related research, our work is closest to <ref> [MTV95] </ref>, where event sequences are searched for frequent patterns of events. These patterns have a simple structure (essentially a partial order) whose total span of time is constrained by a window given by the user. <p> IBM-rise event, this particular reference event can be discarded (no automata is started for it). 5.1 Reducing candidate complex event types The basic idea of step 4 is as follows: If a complex event type occurs frequently, then any of its sub-type should also occur frequently. (This is similar to <ref> [MTV95] </ref>.) Here by a sub-type of a complex type T , we mean a complex event type, induced by a subset of variables, such that each complex event that is an occurrence of the sub-type can be "extended" to an occurrence of T .
Reference: [NS92] <author> M. Niezette and J. Stevenne. </author> <title> An efficient symbolic representation of periodic time. </title> <booktitle> In Proc. </booktitle> <address> CIKM, Baltimore, MD, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Hence, a real system can use only a subset of the temporal types that we have defined. Various proposals on representing granularities have appeared in the literature (e.g., <ref> [NS92, LMF86, CSS94] </ref>). The granularities expressible in these languages are all instances of our temporal types. Furthermore, software packages that implement calendars are available [Soo93]. However, all the algorithms of this paper are implementable in a system using any of the above representations or systems.
Reference: [Soo93] <author> M. D. Soo. </author> <title> Multiple calendar support for conventional database management systems. </title> <editor> In R. T. Snodgrass, editor, </editor> <booktitle> Proceedings of the Workshop on an Infrastructure for Temporal Databases, </booktitle> <pages> pages FF1-FF17, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Various proposals on representing granularities have appeared in the literature (e.g., [NS92, LMF86, CSS94]). The granularities expressible in these languages are all instances of our temporal types. Furthermore, software packages that implement calendars are available <ref> [Soo93] </ref>. However, all the algorithms of this paper are implementable in a system using any of the above representations or systems. The event discovery problem can easily be extended in two different directions. First, the event type E 0 in the event-discovery problem needs not be a "regular" event type.
Reference: [WBBJ] <author> X. Wang, C. Bettini, A. Brodsky, and S. Ja-jodia. </author> <title> Logical design for temporal databases with multiple granularities. </title> <journal> ACM Transactions of Database Systems, </journal> <note> to appear. </note>
Reference-contexts: In order to formally define temporal relationships that involve time granularities, we review the notion of temporal types given in <ref> [WBBJ] </ref>.
References-found: 13

