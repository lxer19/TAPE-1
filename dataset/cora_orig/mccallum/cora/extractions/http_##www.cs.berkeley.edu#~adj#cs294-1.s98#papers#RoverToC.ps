URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/papers/RoverToC.ps
Refering-URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/plan.html
Root-URL: 
Email: fadj, josh, kaashoekg@lcs.mit.edu  
Title: Mobile Computing with the Rover Toolkit  
Author: Anthony D. Joseph, Joshua A. Tauber, and M. Frans Kaashoek 
Address: Cambridge, MA 02139, U.S.A.  
Affiliation: M.I.T. Laboratory for Computer Science  
Abstract: Rover is a software toolkit that supports the construction of both mobile-transparent and mobile-aware applications. The objective of the mobile-transparent approach is to develop proxies for system services that hide the mobile characteristics of the environment from applications. Since applications can be run without alteration, the mobile-transparent approach is appealing. However, to excel, applications operating in the harsh conditions of a mobile environment must often be aware of and take an active part in mitigating those conditions. The Rover toolkit supports a set of programming and communication abstractions that enable the construction of both mobile-transparent and mobile-aware applications. Using the Rover abstractions, applications obtain increased availability, concurrency, resource allocation efficiency, fault tolerance, consistency, and adaptation. Experimental evaluation of a suite of mobile applications built with the toolkit demonstrates that such application-level control can be obtained with relatively little programming overhead and allows correct operation, increases interactive performance, and dramatically reduces network utilization under intermittently connected conditions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. T. Kung and J. T. Robinson, </author> <title> "On Optimistic Methods for Concurrency Control," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> vol. 6, no. 2, </volume> <pages> pp. 213-226, </pages> <month> June </month> <year> 1981. </year>
Reference: [2] <author> J. J. Kistler and M. Satyanarayanan, </author> <title> "Disconnected operation in the Coda file system," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 10, </volume> <pages> pp. 3-25, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: Several previous projects have studied building mobile-transparent services for mobile clients. The Coda project pioneered distributed services for mobile clients. In particular, it investigated how to build a mobile-transparent file system proxy for mobile computers by using optimistic concurrency control and prefetching <ref> [2] </ref>, [14]. Coda logs all updates to the file system during disconnection and replays the log on reconnection; automatic conflict resolution mechanisms are provided for directories and files, using Unix file naming semantics to invoke ASRs at the file system level [4].
Reference: [3] <author> P. Honeyman, L. Huston, J. Rees, and D. Bachmann, </author> <title> "The LITTLE WORK project," </title> <booktitle> in Proc. of the 3rd Workshop on Workstations Operating Systems, </booktitle> <address> Key Biscayne, FL, </address> <month> Apr. </month> <year> 1992, </year> <note> IEEE. </note>
Reference: [4] <author> P. Kumar, </author> <title> Mitigating the Effects of Optimistic Replication in a Distributed File System, </title> <type> Ph.D. thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Coda logs all updates to the file system during disconnection and replays the log on reconnection; automatic conflict resolution mechanisms are provided for directories and files, using Unix file naming semantics to invoke ASRs at the file system level <ref> [4] </ref>. A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda supports low-bandwidth networks as well as intermittent communication [15].
Reference: [5] <author> J. H. Saltzer, D. P. Reed, and D. D. Clark, </author> <title> "End-to-end arguments in system design," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, no. 4, </volume> <pages> pp. 277-28, </pages> <month> Nov. </month> <year> 1984. </year>
Reference: [6] <author> A. Joseph, A. F. deLespinasse, J. A. Tauber, D. K. Gifford, and F. Kaashoek, </author> <title> "Rover: A toolkit for mobile information access," </title> <booktitle> in Proc. of the Fifteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <month> Dec. </month> <year> 1995, </year> <pages> pp. 156-171. </pages>
Reference-contexts: The ISDN and Wired and Cellular CSLIP links perform hardware compression. Note that the cellular times reflect the overhead of the ETC protocol and a non-error-free wireless link. A. Null QRPC Performance To establish the baseline performance for QRPC, we repeated the latency and bandwidth measurement experiments from <ref> [6] </ref>, but extended them to include several additional network technologies and the use of Flash RAM for stable storage. The results are summarized in Table III.
Reference: [7] <author> A.D. Birrell and B.J. Nelson, </author> <title> "Implementing remote procedure calls," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 39-59, </pages> <month> Feb. </month> <year> 1984. </year>
Reference: [8] <author> A. Joseph and F. Kaashoek, </author> <title> "Building reliable mobile-aware applications using the rover toolkit," </title> <booktitle> in Proc. of the Second International Conference on Mobile Computing and Networking (MOBICOM '96), </booktitle> <address> Rye, NY, </address> <month> Nov. </month> <year> 1996, </year> <pages> pp. 117-129. 22 </pages>
Reference-contexts: Conflict detection is based upon a log of changes to RDOs; this allows the server to detect and resolve a conflict such as one user adding an entry to an index and another user deleting it. Rover Stock Market Watcher. This application uses both computation migration and fault-tolerance techniques <ref> [8] </ref>. The client constructs RDOs for stocks that are to be monitored and sends them to the server. The server uses fault-tolerant techniques to store the real-time information retrieved from stock ticker services. 17 VI. <p> By using stable logging at clients, Rover can guarantee the delivery of requests from clients to servers. The use of server-side stable logging allows Rover to avoid having to retransmit a request from a client (which might be disconnected) after a server failure <ref> [8] </ref>. The results show that the relative impact of logging is a function of the transport media.
Reference: [9] <author> R. H. Katz, </author> <title> "Adaptation and mobility in wireless information systems," </title> <journal> IEEE Personal Communications, </journal> <volume> vol. 1, </volume> <pages> pp. 6-17, </pages> <year> 1994. </year>
Reference-contexts: II. Related Work The need for mobile-aware applications and complimentary system services to expose mobility to applications was identified concurrently by several groups. Katz noted the need for adaptation of mobile systems to a variety of networking environments <ref> [9] </ref>. Davies et. al. cited the need for protocols to provide feedback about the network 5 to applications in a vertically integrated application environment [10]. Similarly, Kaashoek et. al. created a Web browser which exposed the mobile environment to mobile code that implemented mobile-aware Web pages [11].
Reference: [10] <author> N. Davies, G. Blair, K. Cheverst, and A. Friday, </author> <title> "Supporting adaptive services in a heterogeneous mobile environment," </title> <booktitle> in Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Katz noted the need for adaptation of mobile systems to a variety of networking environments [9]. Davies et. al. cited the need for protocols to provide feedback about the network 5 to applications in a vertically integrated application environment <ref> [10] </ref>. Similarly, Kaashoek et. al. created a Web browser which exposed the mobile environment to mobile code that implemented mobile-aware Web pages [11]. The Bayou project proposed and implemented an architecture for mobile-aware databases [12]. <p> The BARWAN [29] project supports mobile, "data type aware" applications. The approach relies on strongly typed transmissions. A dynamically extensible type system enables type-specific compression levels and abstraction mechanisms to conserver network usage. User code is itself a transmission type allowing computation relocation. Davies' Adaptive Services <ref> [10] </ref> similarly takes a protocol-centric approach for exposing information about the mobile environment to the application. A similar approach is taken by the Odyssey project. Odyssey focuses on system support to enable mobile-aware applications to use "data fidelity" to control resource utilization.
Reference: [11] <author> F. Kaashoek, T. Pinckney, and J. A. Tauber, </author> <title> "Dynamic documents: Mobile wireless access to the WWW," in Proc. </title> <booktitle> of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994, </year> <pages> pp. 179-184. </pages>
Reference-contexts: Davies et. al. cited the need for protocols to provide feedback about the network 5 to applications in a vertically integrated application environment [10]. Similarly, Kaashoek et. al. created a Web browser which exposed the mobile environment to mobile code that implemented mobile-aware Web pages <ref> [11] </ref>. The Bayou project proposed and implemented an architecture for mobile-aware databases [12]. Baker has identified the dichotomy between mobile-awareness and mobile-transparency in general application and system design [13]. Rover is the first implemented general application architecture to support both mobile-transparent system service proxies and mobile-aware applications. <p> However, if the application finds more hardware and network resources available (e.g., if the mobile host is docked) further RDOs may be loaded to handle these cases <ref> [11] </ref>. Failure recovery is also handled by the access manager. This task is eased somewhat by our use of both a persistent cache and an operation log. After a failure, the access manager re-queues any incomplete QRPCs for re-delivery.
Reference: [12] <author> A. Demers, K. Petersen, M. Spreitzer, D. Terry, M. Theimer, and B. Welch, </author> <title> "The Bayou architecture: Support for data sharing among mobile users," </title> <booktitle> in Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994, </year> <pages> pp. 2-7. </pages>
Reference-contexts: Similarly, Kaashoek et. al. created a Web browser which exposed the mobile environment to mobile code that implemented mobile-aware Web pages [11]. The Bayou project proposed and implemented an architecture for mobile-aware databases <ref> [12] </ref>. Baker has identified the dichotomy between mobile-awareness and mobile-transparency in general application and system design [13]. Rover is the first implemented general application architecture to support both mobile-transparent system service proxies and mobile-aware applications. Several previous projects have studied building mobile-transparent services for mobile clients. <p> Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces [21]. A number of proposals have been made for various degrees of mobile-awareness in operating system services and application. The Bayou project <ref> [12] </ref>, [22] defines a mobile-aware database architecture for sharing data among mobile users. Bayou supports tentative operation logs and data values [23] and session guarantees for weakly-consistent replicated data [24]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database. <p> For example, in our calendar application (see Section V), appointments that have been modified but not propagated to the server are displayed in a distinctive color (a technique that was borrowed from the Bayou room scheduling tool <ref> [12] </ref>). This informs users that the appointment might be canceled due to a conflict. E. Object Replication and Consistency An essential component to accomplishing useful work while disconnected is having the necessary information locally available [33].
Reference: [13] <author> M.G. Baker, </author> <title> "Changing communication environments in MosquitoNet," </title> <booktitle> in Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994, </year> <pages> pp. 64-68. </pages>
Reference-contexts: Similarly, Kaashoek et. al. created a Web browser which exposed the mobile environment to mobile code that implemented mobile-aware Web pages [11]. The Bayou project proposed and implemented an architecture for mobile-aware databases [12]. Baker has identified the dichotomy between mobile-awareness and mobile-transparency in general application and system design <ref> [13] </ref>. Rover is the first implemented general application architecture to support both mobile-transparent system service proxies and mobile-aware applications. Several previous projects have studied building mobile-transparent services for mobile clients. The Coda project pioneered distributed services for mobile clients.
Reference: [14] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu, </author> <title> "Experience with disconnected operation in a mobile environment," </title> <booktitle> in Proc. of the First USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1993, </year> <pages> pp. 11-28. </pages>
Reference-contexts: Several previous projects have studied building mobile-transparent services for mobile clients. The Coda project pioneered distributed services for mobile clients. In particular, it investigated how to build a mobile-transparent file system proxy for mobile computers by using optimistic concurrency control and prefetching [2], <ref> [14] </ref>. Coda logs all updates to the file system during disconnection and replays the log on reconnection; automatic conflict resolution mechanisms are provided for directories and files, using Unix file naming semantics to invoke ASRs at the file system level [4].
Reference: [15] <author> L. B. Mummert, M. R. Ebling, and M. Satyanarayanan, </author> <title> "Exploiting weak connectivity for mobile file access," </title> <booktitle> in Proc. of the Fifteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <month> Dec. </month> <year> 1995, </year> <pages> pp. 143-155. </pages>
Reference-contexts: A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda supports low-bandwidth networks as well as intermittent communication <ref> [15] </ref>. The Ficus file system is also a mobile-transparent file system supporting disconnected operation, but relies on version vectors to detect conflicts [16]. The Little Work project caches files to smooth disconnection from an AFS file system [17]. Conflicts are detected and reported to the user.
Reference: [16] <author> P. Reiher, J. Heidemann, D. Ratner, G. Skinner, and G. J. Popek, </author> <title> "Resolving file conflicts in the Ficus file system," </title> <booktitle> in Proc. of the USENIX Summer 1994 Technical Conference, </booktitle> <address> Boston, MA, </address> <year> 1994, </year> <pages> pp. 183-195. </pages>
Reference-contexts: A newer version of Coda supports low-bandwidth networks as well as intermittent communication [15]. The Ficus file system is also a mobile-transparent file system supporting disconnected operation, but relies on version vectors to detect conflicts <ref> [16] </ref>. The Little Work project caches files to smooth disconnection from an AFS file system [17]. Conflicts are detected and reported to the user. Little Work is also able to use low-bandwidth networks [18]. The BNU project implements an RPC-driven mobile-transparent application framework on mobile computers.
Reference: [17] <author> L. B. Huston and P. Honeyman, </author> <title> "Disconnected operation for AFS," </title> <booktitle> in Proc. of the First USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1993, </year> <pages> pp. 1-10. </pages>
Reference-contexts: The Ficus file system is also a mobile-transparent file system supporting disconnected operation, but relies on version vectors to detect conflicts [16]. The Little Work project caches files to smooth disconnection from an AFS file system <ref> [17] </ref>. Conflicts are detected and reported to the user. Little Work is also able to use low-bandwidth networks [18]. The BNU project implements an RPC-driven mobile-transparent application framework on mobile computers. It allows for function shipping by downloading Scheme functions for interpretation [19].
Reference: [18] <author> L. Huston and P. Honeyman, </author> <title> "Partially connected operation," </title> <booktitle> in Proc. of the Second USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <address> Ann Arbor, MI, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 91-97. </pages>
Reference-contexts: The Little Work project caches files to smooth disconnection from an AFS file system [17]. Conflicts are detected and reported to the user. Little Work is also able to use low-bandwidth networks <ref> [18] </ref>. The BNU project implements an RPC-driven mobile-transparent application framework on mobile computers. It allows for function shipping by downloading Scheme functions for interpretation [19]. The BNU environment includes mobile-transparent proxies on stationary hosts for hiding the mobility of the system.
Reference: [19] <author> T. Watson and B. Bershad, </author> <title> "Local area mobile computing on stock hardware and mostly stock software," </title> <booktitle> in Proc. of the First USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1993, </year> <pages> pp. 109-116. </pages>
Reference-contexts: Conflicts are detected and reported to the user. Little Work is also able to use low-bandwidth networks [18]. The BNU project implements an RPC-driven mobile-transparent application framework on mobile computers. It allows for function shipping by downloading Scheme functions for interpretation <ref> [19] </ref>. The BNU environment includes mobile-transparent proxies on stationary hosts for hiding the mobility of the system. BNU applications do not dynamically adjust to the environment; nor do they have a concept of tentative or stale data.
Reference: [20] <author> T. Watson, </author> <title> "Application design for wireless computing," </title> <booktitle> in Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994, </year> <pages> pp. 91-94. </pages>
Reference-contexts: No additional support for disconnected operation, such as Rover's queued RPC, is included in BNU. A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions <ref> [20] </ref>. Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces [21]. A number of proposals have been made for various degrees of mobile-awareness in operating system services and application.
Reference: [21] <editor> J. Landay, </editor> <booktitle> "User interface issues in mobile computing," in Proc. of the Fourth Workshop on Workstation Operating Systems (WWOS-IV). IEEE, </booktitle> <month> Oct. </month> <year> 1993, </year> <pages> pp. 40-47. </pages>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [20]. Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces <ref> [21] </ref>. A number of proposals have been made for various degrees of mobile-awareness in operating system services and application. The Bayou project [12], [22] defines a mobile-aware database architecture for sharing data among mobile users.
Reference: [22] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser, </author> <title> "Managing update conflicts in a weakly connected replicated storage system," </title> <booktitle> in Proc. of the Fifteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <month> Dec. </month> <year> 1995, </year> <pages> pp. 172-183. </pages>
Reference-contexts: Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces [21]. A number of proposals have been made for various degrees of mobile-awareness in operating system services and application. The Bayou project [12], <ref> [22] </ref> defines a mobile-aware database architecture for sharing data among mobile users. Bayou supports tentative operation logs and data values [23] and session guarantees for weakly-consistent replicated data [24]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database.
Reference: [23] <author> M. Theimer, A. Demers, K. Petersen, M. Spreitzer, D. Terry, and B. Welch, </author> <title> "Dealing with tentative data values in disconnected work groups," </title> <booktitle> in Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994, </year> <pages> pp. 192-195. </pages>
Reference-contexts: A number of proposals have been made for various degrees of mobile-awareness in operating system services and application. The Bayou project [12], [22] defines a mobile-aware database architecture for sharing data among mobile users. Bayou supports tentative operation logs and data values <ref> [23] </ref> and session guarantees for weakly-consistent replicated data [24]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database. Rover shares the notions of tentative operations and data, session guarantees, and the calendar tool example with the Bayou project.
Reference: [24] <author> D. B. Terry, A. J. Demers, K. Petersen, M. J. Spreitzer, M. M. Theimer, and B. B. Welch, </author> <title> "Session guarantees for weakly consistent replicated data," </title> <booktitle> in Proc. of the 1994 Symposium on Parallel and Distributed Information Systems, </booktitle> <month> Sept. </month> <year> 1994, </year> <pages> pp. 140-149. </pages>
Reference-contexts: The Bayou project [12], [22] defines a mobile-aware database architecture for sharing data among mobile users. Bayou supports tentative operation logs and data values [23] and session guarantees for weakly-consistent replicated data <ref> [24] </ref>. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database. Rover shares the notions of tentative operations and data, session guarantees, and the calendar tool example with the Bayou project.
Reference: [25] <author> M.T. Le, F. Burghardt, S. Seshan, and J. Rabaey, "InfoNet: </author> <booktitle> the networking infrastructure of InfoPad," in Proc. of the Spring COMPCON Conference, </booktitle> <year> 1995, </year> <pages> pp. 163-168. </pages>
Reference-contexts: Rover shares the notions of tentative operations and data, session guarantees, and the calendar tool example with the Bayou project. Rover extends this work with an application programming interface, RDOs, and QRPC to deal with intermittent communication, limited bandwidth, and resource-poor clients. The InfoPad <ref> [25] </ref>, Daedalus [26], GloMop [27] and W4 [28] projects focus on mobile-aware wireless information access. The InfoPad project employs a dumb terminal and o*oads all functionality from the client to the server.
Reference: [26] <author> S. Narayanaswamy, et. al., </author> <title> "Application and network support for InfoPad," </title> <journal> IEEE Personal Communications, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 4-17, </pages> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: Rover shares the notions of tentative operations and data, session guarantees, and the calendar tool example with the Bayou project. Rover extends this work with an application programming interface, RDOs, and QRPC to deal with intermittent communication, limited bandwidth, and resource-poor clients. The InfoPad [25], Daedalus <ref> [26] </ref>, GloMop [27] and W4 [28] projects focus on mobile-aware wireless information access. The InfoPad project employs a dumb terminal and o*oads all functionality from the client to the server. Daedalus and GloMop use dynamic "transcoding" or "distillation" to reduce the bandwidth consumed by data transmitted to a mobile host.
Reference: [27] <author> A. Fox, S. D. Gribble, E. A. Brewer, and E. Amir, </author> <title> "Adapting to network and client variability via on-demand dynamic distillation," </title> <booktitle> in Proc. of the Seventh Architectural Support for Programming Languages and Operating Systems (ASPLOS), </booktitle> <address> Cambridge, MA, </address> <month> Oct. </month> <year> 1996, </year> <pages> pp. 160-173. </pages>
Reference-contexts: Rover shares the notions of tentative operations and data, session guarantees, and the calendar tool example with the Bayou project. Rover extends this work with an application programming interface, RDOs, and QRPC to deal with intermittent communication, limited bandwidth, and resource-poor clients. The InfoPad [25], Daedalus [26], GloMop <ref> [27] </ref> and W4 [28] projects focus on mobile-aware wireless information access. The InfoPad project employs a dumb terminal and o*oads all functionality from the client to the server. Daedalus and GloMop use dynamic "transcoding" or "distillation" to reduce the bandwidth consumed by data transmitted to a mobile host. <p> The HTML portion of the pages accounted for 44.5 Kbytes and had a compression ratio of 2.6:1. The majority of the data consisted of images, which were far less compressible using the default compression. We plan to explore the use of application-specific image compression <ref> [27] </ref>. It is important to note that the experiments do not reflect the 20 Fig. 5. Speedup (or slowdown) of Rover mobile-aware versions of applications over the original X11-based applications.
Reference: [28] <author> J. Bartlett, </author> <title> "W4|the Wireless World-Wide Web," </title> <booktitle> in Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994, </year> <pages> pp. 176-178. </pages>
Reference-contexts: Rover extends this work with an application programming interface, RDOs, and QRPC to deal with intermittent communication, limited bandwidth, and resource-poor clients. The InfoPad [25], Daedalus [26], GloMop [27] and W4 <ref> [28] </ref> projects focus on mobile-aware wireless information access. The InfoPad project employs a dumb terminal and o*oads all functionality from the client to the server. Daedalus and GloMop use dynamic "transcoding" or "distillation" to reduce the bandwidth consumed by data transmitted to a mobile host.
Reference: [29] <author> R. Katz et. al., </author> <title> "The Bay Area Research Wireless Access Network (BARWAN)," </title> <booktitle> in Proc. of the Spring COMPCON Conference, </booktitle> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: Rover is designed for more flexible, dy 6 namic divisions. Depending on the power of the mobile host and available bandwidth, Rover allows mobile-aware browsers to dynamically move functionality between the client and the server. The BARWAN <ref> [29] </ref> project supports mobile, "data type aware" applications. The approach relies on strongly typed transmissions. A dynamically extensible type system enables type-specific compression levels and abstraction mechanisms to conserver network usage. User code is itself a transmission type allowing computation relocation.
Reference: [30] <author> B. D. Noble, M. Price, and M. Satyanarayanan, </author> <title> "A programming interface for application-aware adaptation in mobile computing," </title> <booktitle> in Proc. of the Second USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <address> Ann Arbor, MI, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: A similar approach is taken by the Odyssey project. Odyssey focuses on system support to enable mobile-aware applications to use "data fidelity" to control resource utilization. Data fidelity is defined as the degree to which a copy of data matches the original. <ref> [30] </ref> Again, Rover is designed to focus on dynamic adaptation of program functionality and data types. A number of successful commercial mobile-aware applications have been developed for mobile hosts and limited-bandwidth channels. For example, Qualcomm's Eudora is a mail browser that allows efficient remote access over low-bandwidth links.
Reference: [31] <author> L. Kawell Jr., S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif, </author> <title> "Replicated document management in a group communication system," </title> <booktitle> Presented at the Second Conference on Computer-Supported Cooperative Work, </booktitle> <address> Portland, OR, </address> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: A number of successful commercial mobile-aware applications have been developed for mobile hosts and limited-bandwidth channels. For example, Qualcomm's Eudora is a mail browser that allows efficient remote access over low-bandwidth links. Lotus Notes <ref> [31] </ref> is a groupware application allowing users to share data in a weakly-connected environment. Notes supports two forms of update operations: append and time-stamped. Conflicts are referred to the user.
Reference: [32] <author> J. Gray, P. Helland, P. O'Neil, and D. Shasha, </author> <title> "The dangers of replication and a solution," </title> <booktitle> in Proc. of the 1996 SIGMOD Conference, </booktitle> <address> Montreal, Quebec, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Gray et. al. perform a thorough theoretical analysis of the options for database replication in a mobile environment and conclude that primary copy replication with tentative updates is the most appropriate approach for mobile environments <ref> [32] </ref>. III. Design of the Rover Toolkit The Rover toolkit is designed to support the construction of mobile-aware applications and proxies. In this section we describe the key components of the Rover toolkit. A.
Reference: [33] <author> J. J. Kistler, </author> <title> Disconnected Operation in a Distributed File System, </title> <type> Ph.D. thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: This informs users that the appointment might be canceled due to a conflict. E. Object Replication and Consistency An essential component to accomplishing useful work while disconnected is having the necessary information locally available <ref> [33] </ref>. RDO replica caching is the chief technique available in Rover to achieve high availability, concurrency, and reliability. In this section, we discuss strategies for selecting objects to replicate and for reducing consistency-related-costs. <p> The ability to convey application-level semantics directly to servers is an important functional advantage, especially in the presence of intermittent connectivity. However, it may lead to an operation log that grows in size at a rate exceeding that of a simple write-ahead log. The traditional approach is log compaction <ref> [33] </ref>. Rover takes a different approach by directly involving applications in log compaction. Applications can download procedures into the access manager to manipulate their log records.
Reference: [34] <author> D. K. Gifford and J. E. Donahue, </author> <title> "Coordinating independent atomic actions," </title> <booktitle> in Proc. of the Spring COMPCON Conference, </booktitle> <address> San Francisco, CA, </address> <month> Feb. </month> <year> 1985, </year> <pages> pp. 92-92. </pages>
Reference-contexts: We expect many applications will continue to use a variety of approaches, including ad hoc approaches such as hand editing or requiring all data replicas to converge to the same values. Certain applications will be structured as a collection of independent atomic actions <ref> [34] </ref>, where the importing action uses application-level locks, version vectors, or dependency-set checks to implement fully-serializable transactions within Rover method calls. Of course, pessimistic concurrency control may cause long blocking periods in the mobile environment. Rover directly supports primary-copy, tentative-update optimistic consistency control.
Reference: [35] <author> W. Weihl and B. Liskov, </author> <title> "Implementation of Resilient, Atomic Data Types," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 7, no. 2, </volume> <pages> pp. 244-269, </pages> <month> Apr. </month> <year> 1985. </year>
Reference-contexts: Since the submitted operation is tentative and was originally performed at the client on tentative data, the result of performing the operation at the server may not be exactly what the client expected. However, since Rover can employ type-specific concurrency control <ref> [35] </ref>, many conflicts can be avoided. Note that conflict detection may depend not only on the application, but on the data or even the operation involved. IV.
Reference: [36] <author> J.K. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: When a client-side application issues an import or export operation, the toolkit satisfies the request based upon whether the object is found in a local cache and the consistency option specified for the object. 1 The current implementation of RDOs uses the Tcl and Tk languages <ref> [36] </ref>.
Reference: [37] <author> K. Arnold and J. Gosling, </author> <title> The Java Programming Language, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: However, since the interface is designed to be language-independent, it will be easy to explore the use of other interpreted or byte-compiled languages (e.g., Java <ref> [37] </ref>). 11 Once an object has been imported into the client-side application's local address space, method invocations without side effects are serviced locally by the object. At the application's discretion, method invocations with side effects may also be processed locally, inserting tentative data into the object cache.
Reference: [38] <author> D. H. Crocker, </author> <title> Standard for the Format of ARPA Internet Text Messages, Internet RFC 822, </title> <month> Aug. </month> <year> 1982. </year>
Reference-contexts: Rover is capable of using a variety of network transports. Rover supports both connection-based protocols (e.g., HTTP over TCP/IP networks) and connection-less protocols (e.g., SMTP over IP or non-IP networks) <ref> [38] </ref>, [39]. Different protocols have different strengths. For example, while SMTP has extremely high latency, it is fundamentally a queued background process; it is more appropriate than more interactive protocols for fetching extremely large documents, such as stored video, which require large amounts of time regardless of the protocol.
Reference: [39] <author> Information Sciences Institute, </author> <title> Transmission Control Protocol: DARPA Internet Program Protocol Specification, Internet RFC 793, </title> <month> Sept. </month> <year> 1981. </year>
Reference-contexts: Rover is capable of using a variety of network transports. Rover supports both connection-based protocols (e.g., HTTP over TCP/IP networks) and connection-less protocols (e.g., SMTP over IP or non-IP networks) [38], <ref> [39] </ref>. Different protocols have different strengths. For example, while SMTP has extremely high latency, it is fundamentally a queued background process; it is more appropriate than more interactive protocols for fetching extremely large documents, such as stored video, which require large amounts of time regardless of the protocol.
Reference: [40] <author> B. Liskov and L. Shrira, </author> <title> "Promises: Linguistic support for efficient asynchronous procedure calls," </title> <booktitle> in Proc. of the SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <address> Atlanta, GA, </address> <month> June </month> <year> 1988, </year> <pages> pp. 260-267. </pages>
Reference-contexts: To import an object, an application calls import and provides the object's unique identifier, the session identifier, a callback, and arguments. In addition, the application specifies a priority that is used by the network scheduler to reorder QRPCs. The import function immediately returns a promise <ref> [40] </ref> to the application. The application can then wait on this promise or continue execution. Rover transparently queues QRPCs for each import operation in the stable log. When the requested object is received by the access manager, the access manager updates the promise with the returned information.
Reference: [41] <institution> National Center for Supercomputing Applications, Mosaic, University of Illinois in Urbana-Champaign, </institution> <year> 1995. </year>
Reference-contexts: As pages arrive, the window is updated to reflect the changes. This window exposes the object cache and operations log directly to the user and allows the user limited control over them. The proxy can also directly control NCSA's Mosaic <ref> [41] </ref> and NCC's Netscape Navigator [42] browsers using their remote control interfaces. C.2 Mobile-Aware Applications Rover Exmh. Rover Exmh uses three types of RDOs: mail messages, mail folders, and lists of mail folders. By using this level of granularity, many user requests can be handled locally without any network traffic.
Reference: [42] <author> Netscape Communications Corporation, </author> <title> Netscape Navigator, </title> <address> Mountain View, CA, </address> <year> 1995. </year>
Reference-contexts: As pages arrive, the window is updated to reflect the changes. This window exposes the object cache and operations log directly to the user and allows the user limited control over them. The proxy can also directly control NCSA's Mosaic [41] and NCC's Netscape Navigator <ref> [42] </ref> browsers using their remote control interfaces. C.2 Mobile-Aware Applications Rover Exmh. Rover Exmh uses three types of RDOs: mail messages, mail folders, and lists of mail folders. By using this level of granularity, many user requests can be handled locally without any network traffic.
Reference: [43] <author> V. Jacobson, </author> <title> Compressing TCP/IP Headers for Low-Speed Serial Links, Internet RFC 1144, </title> <month> Feb. </month> <year> 1990. </year> <month> 24 </month>
Reference-contexts: Network options that we have experimented with include 10 Mbit/s switched Ethernet, 2 Mbit/s wireless AT&T WaveLAN, 128 Kbit/s and 64 Kbit/s Integrated Digital Services Network (ISDN) links, and Serial Line IP with Van Jacobson TCP/IP header compression (CSLIP) <ref> [43] </ref> over 19.2 Kbit/s V.32terbo wired and 9.6 Kbit/s Enhanced Throughput Cellular (ETC) cellular dial-up links 2 . The test environment consisted of a single server and multiple clients. The server machine was an Intel Advanced/EV workstation running the standalone TCP/IP server. The clients were IBM ThinkPad 701C laptops.
References-found: 43

