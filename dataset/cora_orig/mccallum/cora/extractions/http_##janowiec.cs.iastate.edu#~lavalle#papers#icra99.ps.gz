URL: http://janowiec.cs.iastate.edu/~lavalle/papers/icra99.ps.gz
Refering-URL: http://janowiec.cs.iastate.edu/
Root-URL: http://www.cs.iastate.edu
Email: fprasanth,lavalleg@cs.iastate.edu  
Title: Efficient Computation of Optimal Navigation Functions for Nonholonomic Planning  
Author: Prashanth Konkimalla Steven M. LaValle 
Note: DRAFT: Submitted to the 1999 IEEE International Conference on Robotics and Automation  
Address: Ames, IA 50011 USA  
Affiliation: Department of Computer Science Iowa State University  
Abstract: Many robotic tasks require a motion strategy that overcomes geometric constraints, nonholonomic constraints, and unpredictability. This paper presents an efficient numerical computation technique that computes an optimal feedback strategy for nonholonomic planning problems in cluttered environments. The optimal strategy is expressed as a navigation function that is used during execution to quickly provide the optimal control inputs, regardless of actual path taken by the robot. The proposed algorithm can be considered as a generalization of Dijkstra's algorithm or wavefront propagation techniques to the case of nonholonomic planning on continuous spaces. The computation of the optimal navigation function relies heavily on interpolation. To increase applicability of this method to higher-dimensional configuration spaces, a scheme is presented that enables interpolation to be performed in O(n lg n) time for n dimensions. The scheme defines the navigation function on a simplicial complex obtained by complete barycentric subdivision of hypercubes. The approach has been implemented, and we have used it to efficiently generate results for car-like robots and for push planning. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, J.-C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Nonholonomic path planning for push 7 ing a disk among obstacles. </title> <booktitle> In IEEE Int. Conf. </booktitle> <institution> Robot. & Autom., </institution> <year> 1997. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [15]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems [3, 8, 19], push planning <ref> [1, 13] </ref>). The focus of this paper is on motion planning prob 1 lems that require either feedback solutions, nonholo--nomic analysis, or both. Figure 1 shows a computed example; for a given goal, an navigation function can be used to generate a path from any initial configuration. <p> This result can be considered as a numerical approximation to the nonholonomic metric determined in [20]. In general, our technique can be considered as a numerical way to approximate nonholonomic metrics. 5.2 Push-Planning In the case of the push planning problem <ref> [1, 13] </ref>, the robot's task is to push a box to the goal while avoiding obstacles. The box can be pushed from along one of two edges (which are highlighted in the figure). It is assumed that the robot makes a line contact with the robot.
Reference: [2] <author> J. Barraquand and J.-C. Latombe. </author> <title> Nonholonomic multibody mobile robots: Controllability and motion planning in the presence of obstacles. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 121-155, </pages> <year> 1993. </year>
Reference-contexts: The continuous Dijkstra paradigm [5, 14] and level set methods [17] are also closely related. The proposed approach shares similarities with the nonholonomic planning approach taken in <ref> [2, 13] </ref>. Both approaches numerically approximate a continuous problem, resulting in applicability to a broad class of nonholonomic systems.
Reference: [3] <author> L. G. Bushnell, D. M. Tilbury, and S. S. Sastry. </author> <title> Steering three-input nonholonomic systems: the fire truck example. </title> <journal> Int. J. Robot. Res., </journal> <volume> 14(4) </volume> <pages> 366-381, </pages> <year> 1995. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [15]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems <ref> [3, 8, 19] </ref>, push planning [1, 13]). The focus of this paper is on motion planning prob 1 lems that require either feedback solutions, nonholo--nomic analysis, or both.
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> An Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: It also shares similarities with Dijkstra's algorithm for computing single-source shortest paths in a graph; however, in our case a continuous configuration space must be considered (as opposed to a graph) <ref> [4] </ref>. The continuous Dijkstra paradigm [5, 14] and level set methods [17] are also closely related. The proposed approach shares similarities with the nonholonomic planning approach taken in [2, 13]. Both approaches numerically approximate a continuous problem, resulting in applicability to a broad class of nonholonomic systems.
Reference: [5] <author> J. Hershberger and S. Suri. </author> <title> Efficient computation of Euclidean shortest paths in the plane. </title> <booktitle> In Proc. 34th Annual IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 508-517, </pages> <year> 1995. </year>
Reference-contexts: It also shares similarities with Dijkstra's algorithm for computing single-source shortest paths in a graph; however, in our case a continuous configuration space must be considered (as opposed to a graph) [4]. The continuous Dijkstra paradigm <ref> [5, 14] </ref> and level set methods [17] are also closely related. The proposed approach shares similarities with the nonholonomic planning approach taken in [2, 13]. Both approaches numerically approximate a continuous problem, resulting in applicability to a broad class of nonholonomic systems.
Reference: [6] <author> R. E. Larson. </author> <title> A survey of dynamic programming computational procedures. </title> <journal> IEEE Trans. Autom. Control, </journal> <volume> 12(6) </volume> <pages> 767-774, </pages> <month> December </month> <year> 1967. </year>
Reference-contexts: It is expected, however, that the practical limitation of the approach will be to systems that have six degrees of freedom or less. The computational approach offered in this paper is built from the principle of optimality as it appears in optimal control theory <ref> [6] </ref>. It also shares similarities with Dijkstra's algorithm for computing single-source shortest paths in a graph; however, in our case a continuous configuration space must be considered (as opposed to a graph) [4]. The continuous Dijkstra paradigm [5, 14] and level set methods [17] are also closely related.
Reference: [7] <author> R. E. Larson and J. L. Casti. </author> <title> Principles of Dynamic Programming, Part II. </title> <publisher> Dekker, </publisher> <address> New York, NY, </address> <year> 1982. </year>
Reference-contexts: The expression _x = f (x (t); u (t)) can be approximated in discrete time as a difference equation, x k+1 = f (x k ; u k ). For stationary systems the cost-to-go function can be ex pressed as <ref> [7, 9] </ref>: L fl (x k ) = min fl k (x k ; u k ) + L fl (x k+1 )g (2) in which l k (x k ; u k ) is the loss (1) that accumulates over time t.
Reference: [8] <author> J.-P. Laumond, P. E. Jacobs, M. Taix, and R. M. Murray. </author> <title> A motion planner for nonholonomic mobile robots. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 10(5) </volume> <pages> 577-593, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [15]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems <ref> [3, 8, 19] </ref>, push planning [1, 13]). The focus of this paper is on motion planning prob 1 lems that require either feedback solutions, nonholo--nomic analysis, or both.
Reference: [9] <author> S. M. LaValle. </author> <title> A Game-Theoretic Framework for Robot Motion Planning. </title> <type> PhD thesis, </type> <institution> University of Illinois, Urbana, IL, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: The expression _x = f (x (t); u (t)) can be approximated in discrete time as a difference equation, x k+1 = f (x k ; u k ). For stationary systems the cost-to-go function can be ex pressed as <ref> [7, 9] </ref>: L fl (x k ) = min fl k (x k ; u k ) + L fl (x k+1 )g (2) in which l k (x k ; u k ) is the loss (1) that accumulates over time t. <p> Instead of precomputing a path, the solution takes the form of a navigation function, as considered in [15]. Two improvements are made over our previous approach to the problem of numerically computing optimal cost-to-go functions <ref> [9] </ref>: 1) The solution can be obtained in a single iteration over several chosen configurations (there is no penalty for switching edges).
Reference: [10] <author> S. M. LaValle. </author> <title> Robot motion planning: A game-theoretic foundation. </title> <booktitle> In Proc. 2nd Int'l Workshop on the Algorithmic Foundations of Robotics, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: This computational approach is also intended as a step toward a more general approach that can additionally handle complications such as stochastic or nondeterministic uncertainty in sensing and predictability, multiple robots, and dynamics. Such extensions are facilitated within the unified framework presented in <ref> [10] </ref>. It is expected, however, that the practical limitation of the approach will be to systems that have six degrees of freedom or less. The computational approach offered in this paper is built from the principle of optimality as it appears in optimal control theory [6].
Reference: [11] <author> S. M. LaValle. </author> <title> Numerical computation of optimal navigation functions on a simplicial complex. </title> <editor> In P. Agarwal, L. Kavraki, and M. Mason, editors, </editor> <title> Robotics: The Algorithmic Perspective. A K Peters, </title> <address> Wellesley, MA, </address> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: The improvement is also expected to be significant in practice (i.e., the scaling constant in the analysis should be small). 4 The Algorithm This algorithm is an adaptation of the method in <ref> [11] </ref>, and it performs a kind of wavefront propagation by iteratively constructing nonholonomic preimages. The n-dimensional C-space is divided into simplexes as described above. Let p be a control point, and let P be the set of all control points.
Reference: [12] <author> Carl W. Lee. </author> <title> Subdivisions and Triangulations of Poly-topes. </title> <publisher> CRC Press, </publisher> <year> 1997. </year>
Reference-contexts: Dividing the space into cubes can make the point location problem easy, but computing the cost-to-go (step 3) becomes complicated. To overcome this problem, we further divide the cube into tetrahedra (in general, we divide hypercubes into simplexes). It has been shown in <ref> [12] </ref> that an nD-cube must be divided into at least 2 n (n + 1) (n+1)=2 n! simplexes. Thus, a 2D-cube (a square) can be divided into no less than two triangles (2D-simplex). The minimum number of tetrahedra that a 3D-cube can be divided into is found to be 5.
Reference: [13] <author> K. M. Lynch and M. T. Mason. </author> <title> Stable pushing: Mechanics, controllability, and planning. </title> <journal> Int. J. Robot. Res., </journal> <volume> 15(6) </volume> <pages> 533-556, </pages> <year> 1996. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [15]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems [3, 8, 19], push planning <ref> [1, 13] </ref>). The focus of this paper is on motion planning prob 1 lems that require either feedback solutions, nonholo--nomic analysis, or both. Figure 1 shows a computed example; for a given goal, an navigation function can be used to generate a path from any initial configuration. <p> The continuous Dijkstra paradigm [5, 14] and level set methods [17] are also closely related. The proposed approach shares similarities with the nonholonomic planning approach taken in <ref> [2, 13] </ref>. Both approaches numerically approximate a continuous problem, resulting in applicability to a broad class of nonholonomic systems. <p> This result can be considered as a numerical approximation to the nonholonomic metric determined in [20]. In general, our technique can be considered as a numerical way to approximate nonholonomic metrics. 5.2 Push-Planning In the case of the push planning problem <ref> [1, 13] </ref>, the robot's task is to push a box to the goal while avoiding obstacles. The box can be pushed from along one of two edges (which are highlighted in the figure). It is assumed that the robot makes a line contact with the robot.
Reference: [14] <author> J. S. B. Mitchell. </author> <title> Planning Shortest Paths. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1986. </year>
Reference-contexts: It also shares similarities with Dijkstra's algorithm for computing single-source shortest paths in a graph; however, in our case a continuous configuration space must be considered (as opposed to a graph) [4]. The continuous Dijkstra paradigm <ref> [5, 14] </ref> and level set methods [17] are also closely related. The proposed approach shares similarities with the nonholonomic planning approach taken in [2, 13]. Both approaches numerically approximate a continuous problem, resulting in applicability to a broad class of nonholonomic systems.
Reference: [15] <author> E. Rimon and D. E. Koditschek. </author> <title> Exact robot navigation using artificial potential fields. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 8(5) </volume> <pages> 501-518, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: This corresponds to a feedback motion strategy, which is computed using the method presented in this paper. Arguments for directly incorporating feedback in the form of a navigation function were also made in <ref> [15] </ref>. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems [3, 8, 19], push planning [1, 13]). The focus of this paper is on motion planning prob 1 lems that require either feedback solutions, nonholo--nomic analysis, or both. <p> In most motion planning research the solution takes the form of a path; however, in our case the solution involves configuration feedback. Therefore, we construct a real-valued function on the configuration space that is used for navigation in the sense proposed in <ref> [15] </ref>. Let the cost-to-go function, L fl : C free ! &lt; [ f1g represent the loss according to (1), that would be received by choosing the optimal control input and driving the system until time t = T f . <p> Table 12 shows the computation time for Problem 3. 6 Conclusions An approach has been presented for computing optimal feedback motion strategies for nonholonomic planning problems. Instead of precomputing a path, the solution takes the form of a navigation function, as considered in <ref> [15] </ref>. Two improvements are made over our previous approach to the problem of numerically computing optimal cost-to-go functions [9]: 1) The solution can be obtained in a single iteration over several chosen configurations (there is no penalty for switching edges).
Reference: [16] <author> J. J. Rotman. </author> <title> Introduction to Algebraic Topology. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: Figures 2 and 3 illustrate that this representation is general and is applicable to higher dimensional C-spaces. It is important to note that we do not explicitly store simplexes; only the control points are stored. In each simplex, the interpolation weights are selected as the barycentric coordinates <ref> [16] </ref>.
Reference: [17] <author> J. A. Sethian. </author> <title> Level set methods : Evolving interfaces in geometry, fluid mechanics, </title> <booktitle> computer vision, and materials science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1996. </year>
Reference-contexts: It also shares similarities with Dijkstra's algorithm for computing single-source shortest paths in a graph; however, in our case a continuous configuration space must be considered (as opposed to a graph) [4]. The continuous Dijkstra paradigm [5, 14] and level set methods <ref> [17] </ref> are also closely related. The proposed approach shares similarities with the nonholonomic planning approach taken in [2, 13]. Both approaches numerically approximate a continuous problem, resulting in applicability to a broad class of nonholonomic systems.
Reference: [18] <author> S. Sundar and Z. Shiller. </author> <title> Optimal obstacle avoidance based on the Hamilton-Jacobi-Bellman equation. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 13(2) </volume> <pages> 305-310, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: The cost-to-go is also referred to as a value function in <ref> [18] </ref>, and the nonholo-nomic metric in [20]. We next define a discrete-time approximation in which actions are performed at each t. The expression _x = f (x (t); u (t)) can be approximated in discrete time as a difference equation, x k+1 = f (x k ; u k ).
Reference: [19] <author> P. Svestka and M. H. Overmars. </author> <title> Coordinated motion planning for multiple car-like robots using probabilistic roadmaps. </title> <booktitle> In IEEE Int. Conf. Robot. & Autom., </booktitle> <pages> pages 1631-1636, </pages> <year> 1995. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [15]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems <ref> [3, 8, 19] </ref>, push planning [1, 13]). The focus of this paper is on motion planning prob 1 lems that require either feedback solutions, nonholo--nomic analysis, or both.
Reference: [20] <author> M. Vendittelli and J.-P. Laumond. </author> <title> Visible positions for a car-like robot amidst obstacles. </title> <editor> In J.-P. Laumond and M. Overmars, editors, </editor> <booktitle> Algorithms for Robotic Motion and Manipulation, </booktitle> <pages> pages 213-228. </pages> <editor> A K Peters, </editor> <address> Wellesley, MA, </address> <year> 1997. </year> <month> 8 </month>
Reference-contexts: The cost-to-go is also referred to as a value function in [18], and the nonholo-nomic metric in <ref> [20] </ref>. We next define a discrete-time approximation in which actions are performed at each t. The expression _x = f (x (t); u (t)) can be approximated in discrete time as a difference equation, x k+1 = f (x k ; u k ). <p> The navigation function naturally steers the robot to the appropriate component of G. point car-like robot that can only go forward. This result can be considered as a numerical approximation to the nonholonomic metric determined in <ref> [20] </ref>. In general, our technique can be considered as a numerical way to approximate nonholonomic metrics. 5.2 Push-Planning In the case of the push planning problem [1, 13], the robot's task is to push a box to the goal while avoiding obstacles. <p> In this case, Given any initial configuration, the car goes to the nearest goal, thus demonstrating the optimality of the solution. a particular orientation of a car that can go only forward. These can be considered as a numerical approx imation to the nonholonomic metric <ref> [20] </ref>. 6 for switching edges. added for switching edges. it takes 125 time steps, switching edges only 2 times to reach the goal. Figure 11 shows the trajectories of the robot from several chosen configurations without minimizing the number of switches of the pushing edge.
References-found: 20

