URL: http://www.wi.leidenuniv.nl/home/joost/ipl.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: frob,joostg@cs.ruu.nl.  
Title: Unity Properties and Sequences of States some observations  
Author: R.T. Udink and J.N. Kok 
Keyword: Stepwise refinement, Unity, program refinement, program specification.  
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands.  
Affiliation: Utrecht University, Department of Computer Science,  
Abstract: We examine the expressive power of Unity properties in relation to execution sequences of Unity programs. One might expect that if two programs have the same unless and leadsto properties, then they have the same execution sequences. We show that this is not true. We examine whether this difference vanishes if we adopt a stronger notion of fairness, or use ensures properties instead of leadsto properties (possibly adopting a stronger fairness notion also). We show by a simple example that both approaches are not successful. Hence, properties are not expressive enough to characterize execution sequences, and it is not clear what execution model corresponds to Unity properties. As a consequence, the notion of property preserving program refinement differs from the notion of decreasing nondeterminism. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport. </author> <title> The existence of refinement mappings. </title> <booktitle> In Proc. of the 3rd Annual IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 165-175, </pages> <address> Washington D.C., July 1988. </address> <publisher> Computer Society Press. </publisher>
Reference-contexts: An important consequence of the observations above is that the following two notions of program refinement differ (which makes it difficult to provide an operational interpretation of property preserving program refinement). 1. The notion of implementation as defined by Abadi and Lamport in <ref> [1] </ref>; a specification S 1 is implemented by a specification S 2 if every execution sequence of S 2 is an execution sequence of S 1 .
Reference: [2] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design A Foundation. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1988. </year>
Reference-contexts: 1 Preliminaries The Unity framework, introduced by Chandy and Misra in <ref> [2] </ref>, consists of a programming language and a programming logic. In this note, we examine the expressive power of the Unity properties in relation to execution sequences of a program.
Reference: [3] <author> E.W. Dijkstra and C.S. Scholten. </author> <title> Predicate Calculus and Program Semantics. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: Execution of a program never terminates. The semantics of a single statement can be given by its weakest precondition predicate transformer <ref> [3] </ref>.
Reference: [4] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems| Specification. </title> <publisher> Springer Verlag, </publisher> <year> 1992. </year> <month> 6 </month>
Reference-contexts: The programs given above differ in ensures properties: true ensures ((x mod 4 = 0) _ (x mod 4 = 1)) is a property of F , but not of G. 2. Change the set of possible execution sequences by adopting a stronger notion of fairness; for example compassion <ref> [4] </ref>: it is not the case that the condition of a statement holds infinitely often, and that it is only executed a finite number of times. Assuming this notion of fairness, F and G have the same execution sequences.
Reference: [5] <author> J. Pachl. </author> <title> Three definitions of leads-to for UNITY. </title> <booktitle> Notes on UNITY, </booktitle> <pages> 23-90, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: We use the leadsto property as defined by Pachl in <ref> [5, 6] </ref>, because of its correspondence to the intuitive meaning of the leadsto property in terms of computation sequences: p 7! q = h8i; v : v = hh 0 ; 1 ; ii is a computation sequence of F :: p ( i ) ) h9j i :: q ( <p> For this notion of leadsto the equivalence (1) does not hold. The implication from left to right holds, but in <ref> [5] </ref>, Pachl gives a counterexample for the implication from right to left. Although Pachl's notion is weaker, the claims we make about leadsto properties also hold for the leadsto of Chandy and Misra, but the proofs are more complicated.
Reference: [6] <author> J. Pachl. </author> <title> A simple proof of a completeness result for leads-to in the UNITY logic. </title> <journal> Information Processing Letters, </journal> <volume> 41 </volume> <pages> 35-38, </pages> <year> 1992. </year>
Reference-contexts: We use the leadsto property as defined by Pachl in <ref> [5, 6] </ref>, because of its correspondence to the intuitive meaning of the leadsto property in terms of computation sequences: p 7! q = h8i; v : v = hh 0 ; 1 ; ii is a computation sequence of F :: p ( i ) ) h9j i :: q (
Reference: [7] <author> B.A. Sanders. </author> <title> Stepwise refinement of mixed specifications of concurrent programs. </title> <editor> In M. Broy and Jones C.B., editors, </editor> <booktitle> Proceedings of the IFIP Working Conference on Programming and Methods, </booktitle> <pages> pages 1-25. </pages> <publisher> Elsevier Science Publishers B.V. (North Holland), </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: In other words, in going from specification to implementation the set of execution 5 sequences reduces; during the implementation phase certain choices are made and hence the nondeterminism reduces. 2. The notion of refinement as defined by Sanders <ref> [7] </ref> and Singh [8]; they define program refinement as the preservation of Unity properties: a Unity program F is refined by G iff every Unity property of F is a property of G.
Reference: [8] <author> A.K. Singh. </author> <title> Program refinement in fair transition systems. </title> <editor> In E.H.L. Aarts, J. van Leeuwen, and M. Rem, editors, </editor> <booktitle> PARLE '91: Parallel Architectures and Languages Europe, volume II Parallel Languages, </booktitle> <pages> pages 128-147. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: In other words, in going from specification to implementation the set of execution 5 sequences reduces; during the implementation phase certain choices are made and hence the nondeterminism reduces. 2. The notion of refinement as defined by Sanders [7] and Singh <ref> [8] </ref>; they define program refinement as the preservation of Unity properties: a Unity program F is refined by G iff every Unity property of F is a property of G. Using this notion, G is a refinement of F , since both programs have the same Unity properties.
Reference: [9] <author> R.T. Udink and J.N. Kok. </author> <title> On the relation between Unity properties and sequences of states. </title> <editor> In J.W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Semantics: Foundations and Applications, volume 666 of Lecture Notes in Computer Science, </booktitle> <pages> pages 594-608. </pages> <booktitle> REX Workshop, </booktitle> <address> June 1992, </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year> <note> A full version is available as Technical Report RUU-CS-93-07 of Utrecht University. 7 </note>
Reference-contexts: It will depend on the specific application which notion is preferable. We have only shown that these notions differ. A detailed study of the relation between Unity properties, and sequences of states, and different notions of refinement can be found in <ref> [9] </ref>. Acknowledgements We like to thank the Calculi for Distributed Program Construction Club headed by Lambert Meertens and Doaitse Swierstra and the Formal Models Club at Utrecht University.
References-found: 9

