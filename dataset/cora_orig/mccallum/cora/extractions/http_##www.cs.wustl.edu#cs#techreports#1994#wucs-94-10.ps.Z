URL: http://www.cs.wustl.edu/cs/techreports/1994/wucs-94-10.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Visual Specification of Interprocess and Intraprocess Communication  
Author: T. Paul McCartney and Kenneth J. Goldman 
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Date: April 1994  
Pubnum: WUCS-94-10  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Amir Aboueinaga. TRW Sr. </author> <title> Staff Engineer and FAA Consultant. </title> <type> Personal Communication. </type>
Reference-contexts: The air traffic control system consists of several communicating components <ref> [1] </ref>: a radar component that gets information about the position and identity of the set of current airplanes, a radio component that is used to coordinate audio communication between the pilots and the air traffic controller, and a graphical user interface component (GUI) that displays the current state of the airplanes
Reference: [2] <author> A. Borning. </author> <title> Thinglab a constraint-oriented simulation laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Here, we mention three systems that are representative of this paradigm. The Thinglab system <ref> [2] </ref> uses multiway constraints to specify relationships between parts of a simulation graphical display. Thinglab represents early work in graphical constraint systems and provided the foundation for many later systems.
Reference: [3] <author> Jerome R. Cox, Jr., Mike Gaddis, and Jonathan S. Turner. </author> <title> Project Zeus: Design of a broadband network and its application on a university campus. </title> <journal> IEEE Network, </journal> <pages> pages 20-30, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: The development work is being conducted in the context of an ATM network being deployed on the Washington University campus <ref> [3] </ref>. 1.3 Overview The remainder of this paper is organized as follows. In Section 2, we provide an overview of related work. We present our visual communication language in the context of an air traffic control example introduced in Section 3. Section 4 discusses visual specification of intraprocess communication.
Reference: [4] <author> David Gelernter and Nicholas Carriero. </author> <title> Coordination languages and their significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: However, there has been considerable work in the area of coordination languages for configurable distributed systems and in the area of visual specification of user interfaces. In this section, we highlight some of this related work. The purpose of a coordination language <ref> [4] </ref> is to separate communication from computation in order to offer programmers a uniform communication abstraction that is independent of a particular programming language or operating system.
Reference: [5] <author> Kenneth J. Goldman, Michael D. Anderson, and Bala Swaminathan. </author> <title> The Programmers' Playground: I/O abstraction for heterogeneous distributed systems. </title> <booktitle> In Proceedings of the 27th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 363-372, </pages> <month> January </month> <year> 1994. </year> <note> Long version available as Washington University technical report WUCS-93-29. </note>
Reference-contexts: The system is free to make choices about how to implement the communication specified by each connection in the configuration. 2 1.1 I/O Abstraction Our model of interprocess communication is called I/O abstraction <ref> [5] </ref>. Each module in a system has a module boundary 1 containing values (published data structures) that may be externally observed and/or manipulated. A distributed application consists of a collection of independent modules and a configuration of logical connections among the published values at module boundaries. <p> Our treatment of interprocess communication is completely general, while our treatment of intraprocess communication concentrates on the specification of 1 In other papers <ref> [5, 20] </ref> describing the I/O abstraction concept, the data interface of an I/O abstraction module has been called the "presentation." Since this paper deals with interfaces for visual languages, we use the term boundary in order to avoid confusion with user "interfaces" and a visual "presentation." 3 sophisticated direct-manipulation graphical user <p> Over time, the position and length of the airplanes is updated to display the current state from available information. The user of the GUI can communicate with the pilots through audio radio channels. By clicking on airplanes with 2 See the technical report version of <ref> [5] </ref> for a comparison of I/O abstraction with other communication models. 6 the mouse, a "focus" set of flight IDs is selected.
Reference: [6] <author> Michael M. Gorlick and Rami R. Razouk. </author> <title> Using weaves for software construction and analysis. </title> <booktitle> In Proceedings of the 13th International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: PROFIT [9] provides a mixture of data sharing and RPC communication through facets with data and procedure slots that are bound to slots in other facets during compilation. Extensions to PROFIT enable dynamic binding of slots in special cases [7]. The Weaves system <ref> [6] </ref> provides a configuration mechanism based on dataflow. The above systems adopt a given communication model and concentrate on the configuration problem.
Reference: [7] <author> Brent Hailpern and Gail E. Kaiser. </author> <title> Dynamic reconfiguration in an object-based programming language with distributed shared data. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 73-80, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: PROFIT [9] provides a mixture of data sharing and RPC communication through facets with data and procedure slots that are bound to slots in other facets during compilation. Extensions to PROFIT enable dynamic binding of slots in special cases <ref> [7] </ref>. The Weaves system [6] provides a configuration mechanism based on dataflow. The above systems adopt a given communication model and concentrate on the configuration problem.
Reference: [8] <author> Ralph D. Hill. </author> <title> Abstraction-link-view paradigm: using constraints to connect user interfaces to applications. </title> <booktitle> In ACM Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 335-342, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: The Garnet system comes the closest to resembling the display construction aspects of our system, but Garnet does not provide end-users with graphical mechanisms for establishing relationships between the user interface and the application that it controls. The RENDEZVOUS project <ref> [8] </ref> concentrates on the separation of the user interfaces from their applications.
Reference: [9] <author> Gail E. Kaiser and Brent Hailpern. </author> <title> An object-based programming model for shared data. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(2) </volume> <pages> 201-264, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: In Polylith [16, 17], a configuration is expressed using "module interconnection constructs" that establish procedure call bindings among modules in a distributed system. CONCERT [21] provides a uniform communication abstraction by extending several procedural programming languages to support the Hermes [19] distributed process model. PROFIT <ref> [9] </ref> provides a mixture of data sharing and RPC communication through facets with data and procedure slots that are bound to slots in other facets during compilation. Extensions to PROFIT enable dynamic binding of slots in special cases [7]. The Weaves system [6] provides a configuration mechanism based on dataflow.
Reference: [10] <author> T.D. Kimura, J.W. Choi, and J.M. Mack. </author> <title> A visual language for keyboardless programming. </title> <type> Technical Report WUCS-86-6, </type> <institution> Washington University in St. Louis, </institution> <month> June </month> <year> 1986. </year> <month> 18 </month>
Reference-contexts: However, our connection oriented visual communication language would also blend nicely with general purpose visual computation languages based on dataflow concepts, such as the "Show and Tell" system <ref> [10] </ref>. Our visual language is designed to support end-user configuration of distributed multimedia applications on top of The Programmer's Playground, a software library and run-time system we are developing to support the I/O abstraction programming model.
Reference: [11] <author> Jeff Kramer and Jeff Magee. </author> <title> The evolving philosophers problem. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(11) </volume> <pages> 1293-1306, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The separation of computation from communication permits local reasoning about functional components in terms of well-defined interfaces and allows systems to be designed by assembling collections of individually verified functional components. Coordination languages typically provide a structured configuration mechanism for specifying relationships among program modules. For example, Darwin <ref> [11, 14, 13] </ref> is a configuration language for managing message-passing connections between process ports in a dynamic system. Processes are expressed in a separate computation language that allows ports to be declared for interconnection within Darwin.
Reference: [12] <author> Jeff Kramer, Jeff Magee, and Keng Ng. </author> <title> Graphical configuration programming. </title> <journal> IEEE Computer, </journal> <volume> 22(10) </volume> <pages> 53-65, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Processes are expressed in a separate computation language that allows ports to be declared for interconnection within Darwin. Conic, the predecessor of Darwin, provides a graphical configuration mechanism for establishing bindings among the ports <ref> [12] </ref>. However, the modules of the system must still be concerned with when to send or receive messages on these ports. In Polylith [16, 17], a configuration is expressed using "module interconnection constructs" that establish procedure call bindings among modules in a distributed system.
Reference: [13] <author> Jeff Kramer, Jeff Magee, and Morris Sloman. </author> <title> Configuring distributed systems. </title> <booktitle> In Proceedings of the 5th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: The separation of computation from communication permits local reasoning about functional components in terms of well-defined interfaces and allows systems to be designed by assembling collections of individually verified functional components. Coordination languages typically provide a structured configuration mechanism for specifying relationships among program modules. For example, Darwin <ref> [11, 14, 13] </ref> is a configuration language for managing message-passing connections between process ports in a dynamic system. Processes are expressed in a separate computation language that allows ports to be declared for interconnection within Darwin.
Reference: [14] <author> Jeff Magee, Naranker Dulay, and Jeff Kramer. </author> <title> Structuring parallel and distributed programs. </title> <booktitle> In Proceedings of the International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 102-117, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: The separation of computation from communication permits local reasoning about functional components in terms of well-defined interfaces and allows systems to be designed by assembling collections of individually verified functional components. Coordination languages typically provide a structured configuration mechanism for specifying relationships among program modules. For example, Darwin <ref> [11, 14, 13] </ref> is a configuration language for managing message-passing connections between process ports in a dynamic system. Processes are expressed in a separate computation language that allows ports to be declared for interconnection within Darwin.
Reference: [15] <author> B. A. Myers, et al. Garnet: </author> <title> Comprehensive support for graphical, highly interactive user interfaces. </title> <journal> IEEE Computer, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Here, we mention three systems that are representative of this paradigm. The Thinglab system [2] uses multiway constraints to specify relationships between parts of a simulation graphical display. Thinglab represents early work in graphical constraint systems and provided the foundation for many later systems. The Garnet system <ref> [15] </ref> provides a toolkit which allows the user to construct interactive graphical user interfaces using an object oriented constraint based library.
Reference: [16] <author> James M. Purtilo and Christine R. Hofmeister. </author> <title> Dynamic reconfiguration of distributed programs. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 560-571, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Conic, the predecessor of Darwin, provides a graphical configuration mechanism for establishing bindings among the ports [12]. However, the modules of the system must still be concerned with when to send or receive messages on these ports. In Polylith <ref> [16, 17] </ref>, a configuration is expressed using "module interconnection constructs" that establish procedure call bindings among modules in a distributed system. CONCERT [21] provides a uniform communication abstraction by extending several procedural programming languages to support the Hermes [19] distributed process model.
Reference: [17] <author> James M. Purtilo and Pankaj Jalote. </author> <title> An environment for prototyping distributed applications. </title> <booktitle> In Proceedings of the 9th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 588-594, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Conic, the predecessor of Darwin, provides a graphical configuration mechanism for establishing bindings among the ports [12]. However, the modules of the system must still be concerned with when to send or receive messages on these ports. In Polylith <ref> [16, 17] </ref>, a configuration is expressed using "module interconnection constructs" that establish procedure call bindings among modules in a distributed system. CONCERT [21] provides a uniform communication abstraction by extending several procedural programming languages to support the Hermes [19] distributed process model.
Reference: [18] <author> Robert W. Scheifler and Jim Gettys. </author> <title> The X window system. </title> <type> Technical Report MIT/LCS/TR-368, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: Also, we have designed and implemented a customized graphics package which will be used as the foundation of the user interface management system. This graphics package is currently implemented on top of the X window system <ref> [18] </ref>, but it is not designed exclusively for X windows.
Reference: [19] <author> R.E. Strom, D.F. Bacon, A.P. Goldberg, A. Lowry, D.M. Yellin, and S. Yemini. </author> <title> Hermes: A Language for Distributed Computing. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: In Polylith [16, 17], a configuration is expressed using "module interconnection constructs" that establish procedure call bindings among modules in a distributed system. CONCERT [21] provides a uniform communication abstraction by extending several procedural programming languages to support the Hermes <ref> [19] </ref> distributed process model. PROFIT [9] provides a mixture of data sharing and RPC communication through facets with data and procedure slots that are bound to slots in other facets during compilation. Extensions to PROFIT enable dynamic binding of slots in special cases [7].
Reference: [20] <author> Bala Swaminathan and Kenneth J. Goldman. </author> <title> Dynamic reconfiguration with I/O abstraction. </title> <type> Technical Report WUCS-93-21, </type> <institution> Washington University in St. Louis, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: Our treatment of interprocess communication is completely general, while our treatment of intraprocess communication concentrates on the specification of 1 In other papers <ref> [5, 20] </ref> describing the I/O abstraction concept, the data interface of an I/O abstraction module has been called the "presentation." Since this paper deals with interfaces for visual languages, we use the term boundary in order to avoid confusion with user "interfaces" and a visual "presentation." 3 sophisticated direct-manipulation graphical user
Reference: [21] <author> Shaula A. Yemini, German S. Goldszmidt, Alexander D. Stoyenko, and Langdon W. Beeck. </author> <title> CONCERT: A high-level-language approach to heterogeneous distributed systems. </title> <booktitle> In Proceed 19 ings of the 9th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 162-171, </pages> <year> 1989. </year>
Reference-contexts: However, the modules of the system must still be concerned with when to send or receive messages on these ports. In Polylith [16, 17], a configuration is expressed using "module interconnection constructs" that establish procedure call bindings among modules in a distributed system. CONCERT <ref> [21] </ref> provides a uniform communication abstraction by extending several procedural programming languages to support the Hermes [19] distributed process model. PROFIT [9] provides a mixture of data sharing and RPC communication through facets with data and procedure slots that are bound to slots in other facets during compilation.
References-found: 21

