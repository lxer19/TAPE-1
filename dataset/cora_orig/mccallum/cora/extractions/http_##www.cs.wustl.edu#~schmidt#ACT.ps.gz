URL: http://www.cs.wustl.edu/~schmidt/ACT.ps.gz
Refering-URL: http://www.cs.wustl.edu/~irfan/resume/publications.html
Root-URL: 
Email: harrison@cs.wustl.edu, schmidt@cs.wustl.edu, and irfan@cs.wustl.edu  
Title: Asynchronous Completion Token An Object Behavioral Pattern for Efficient Asynchronous Event Handling  
Author: Timothy H. Harrison, Douglas C. Schmidt, and Irfan Pyarali 
Address: St. Louis, Missouri, 63130  
Affiliation: Department of Computer Science Washington University,  
Abstract: This paper appeared in the Proceedings of the 3 rd Annual Pattern Languages of Programming Conference, Aller-ton Park, Illinois, September 4-6, 1996.. Abstract Asynchronous Completion Token pattern allows applications to efficiently associate state with the completion of asynchronous operations. Contemporary applications must respond to many types of events, ranging from user interface notifications to network messages. Delay-sensitive applications, such as network management systems, often perform long-running operations asynchronously to avoid blocking the processing of other pending events. When these asynchronous operations complete, applications may need more information than simply the notification itself to properly handle the event. This paper describes how such applications can benefit from the use of the Asynchronous Completion Token pattern. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Pyarali, T. H. Harrison, and D. C. Schmidt, </author> <title> Design and Performance of an Object-Oriented Framework for High-Performance Electronic Medical Imaging, </title> <booktitle> in Proceedings of the 2 nd Conference on Object-Oriented Technologies and Systems, </booktitle> <institution> (Toronto, Canada), USENIX, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: associate state with the completion of asynchronous operations. 2 Also Known As Magic Cookie 3 Motivation 3.1 Context To illustrate the Asynchronous Completion Token pattern, consider the structure of a network Management Application that monitors the performance and status of multiple components in a distributed Electronic Medical Imaging System (EMIS) <ref> [1] </ref>. <p> Although the server can test the ACT for equality (e.g., to detect duplicates), it is not allowed to interpret the ACT any further. * EMIS network management: The example described throughout this paper is derived from a distributed Electronic Medical Imaging System being developed at Wash-ington University for Project Spectrum <ref> [1, 7] </ref>. A network Management Application monitors the performance and status of multiple components in an EMIS. Agents provide the asynchronous service of notifying the Management Application of EMIS events (e.g. connection events and image transfer events).
Reference: [2] <author> D. C. Schmidt, </author> <title> ACE: an Object-Oriented Framework for Developing Distributed Applications, </title> <booktitle> in Proceedings of the 6 th USENIX C++ Technical Conference, </booktitle> <address> (Cambridge, Mas-sachusetts), </address> <publisher> USENIX Association, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: However, there are several drawbacks with a completely synchronous approach based on threading: * Increased complexity Threading may require complex concurrency control schemes; * Poor performance Threading may lead to poor performance due to context switching, synchronization, and data movement <ref> [2] </ref>; * Lack of portability Threading may not be available on the OS platform. Another way to associate state with the completion of an asynchronous operation is to depend on the information returned by the asynchronous service.
Reference: [3] <author> S. Berczuk, </author> <title> A Pattern for Separating Assembly and Processing, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien and D. C. Schmidt, eds.), </editor> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In other words, you must decide how Clients should be notified when asynchronous operations complete. There are several common approaches: * Callbacks In the callback approach, Clients specify functions or class methods that are called by the Service when an operation completes <ref> [3] </ref>. Depending on the Service, callback functions can be specified once or on a per-request basis. In the callback approach, the ACT is returned as a parameter to the callback function.
Reference: [4] <institution> Information Technology - POSIX Realtime Extension (C Lanaguage), </institution> <type> Tech. Rep. </type> <institution> P1003.1c/, </institution> <year> 1995. </year>
Reference-contexts: Clients dequeue completion notifications (including the OVERLAPPED structures) via the GetQueuedCompletionStatus function. * Asynchronous callbacks A variation on the callback approach is used by implementations of POSIX 4.0 Asynchronous I/O <ref> [4] </ref>. Clients can specify that completion notifications for asynchronous I/O operations be returned via UNIX signals. This approach is similar to the callback approach, i.e., a registered signal handler is called. <p> used in many systems software and communication middleware, as well as in less technical domains (such as Fedex inventory tracking): * OS asynchronous I/O mechanisms: ACTs can be found in Win32 handles, Win32 Overlapped I/O, and Win32 I/O completion ports [5], as well as in the POSIX Asynchronous I/O API <ref> [4] </ref>. When an application is performing multiple asynchronous operations (e.g., network and file I/O), there is typically one location (such as a Win32 I/O completion port) where the operation completion results are queued.
Reference: [5] <author> H. Custer, </author> <title> Inside Windows NT. </title> <address> Redmond, Washington: </address> <publisher> Mi-crosoft Press, </publisher> <year> 1993. </year>
Reference-contexts: described below, the Asynchronous Completion Token (ACT) pattern is widely used in many systems software and communication middleware, as well as in less technical domains (such as Fedex inventory tracking): * OS asynchronous I/O mechanisms: ACTs can be found in Win32 handles, Win32 Overlapped I/O, and Win32 I/O completion ports <ref> [5] </ref>, as well as in the POSIX Asynchronous I/O API [4]. When an application is performing multiple asynchronous operations (e.g., network and file I/O), there is typically one location (such as a Win32 I/O completion port) where the operation completion results are queued.
Reference: [6] <author> Sun Microsystems, </author> <title> Open Network Computing: Transport Independent RPC, </title> <month> June </month> <year> 1995. </year>
Reference-contexts: For UNIX and POSIX asynchronous I/O read and write operations, results can be dequeued through the aio wait and aio suspend interfaces, respectively. * RPC transaction identifiers: Client-side stubs generated by Sun RPC <ref> [6] </ref> use ACTs to ensure that requests from a client match up with responses from the server. Every client request carries a unique opaque transaction ID (the ACT), which is represented as a 32-bit integer.
Reference: [7] <author> G. Blaine, M. Boyd, and S. Crider, </author> <title> Project Spectrum: Scalable Bandwidth for the BJC Health System, </title> <journal> HIMSS, Health Care Communications, </journal> <pages> pp. 71-81, </pages> <year> 1994. </year>
Reference-contexts: Although the server can test the ACT for equality (e.g., to detect duplicates), it is not allowed to interpret the ACT any further. * EMIS network management: The example described throughout this paper is derived from a distributed Electronic Medical Imaging System being developed at Wash-ington University for Project Spectrum <ref> [1, 7] </ref>. A network Management Application monitors the performance and status of multiple components in an EMIS. Agents provide the asynchronous service of notifying the Management Application of EMIS events (e.g. connection events and image transfer events).
Reference: [8] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <month> 8 </month>
Reference-contexts: this field with the index of a record for an internal database or with a name of a file containing a to-do list to be performed after the acknowledgement of the FedEx package delivery has been received. 12 Related Patterns An Asynchronous Completion Token is typically treated as a Memento <ref> [8] </ref> by the underlying framework. In the Memento pattern, Originators give Mementos to Caretakers who treat the Memento as opaque objects. In the ACT pattern, Clients give ACTs to Services that treat the ACTs as opaque objects. Thus, the ACT and Memento patterns are similar with respect to the participants.
References-found: 8

