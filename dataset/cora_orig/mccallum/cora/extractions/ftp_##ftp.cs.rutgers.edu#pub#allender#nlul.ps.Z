URL: ftp://ftp.cs.rutgers.edu/pub/allender/nlul.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Email: e-mail: reinhard@informatik.uni-tuebingen.de  e-mail: allender@cs.rutgers.edu  
Title: Making Nondeterminism Unambiguous  
Author: Klaus Reinhardt Eric Allender 
Keyword: NL/poly UL/poly LogCFL/poly UAuxPDA(log n; n O(1) )/poly Keywords: Nondeterministic space, Unambiguous computation, NLOG, ULOG, LogCFL  
Web: 68Q15, 68Q10  
Note: AMS Subject Classification:  
Date: May 6, 1998  
Address: Sand 13, D-72076 Tubingen, Germany  P.O. Box 1179, Piscataway, NJ 08855-1179,USA  
Affiliation: Wilhelm-Schickard Institut fur Informatik Universitat Tubingen  Department of Computer Science, Rutgers University  
Abstract: We show that in the context of nonuniform complexity, nondeterministic logarithmic space bounded computation can be made unambiguous. An analogous result holds for the class of problems reducible to context-free languages. In terms of complexity classes, this can be stated as: fl A preliminary version of this paper appeared in Proc. IEEE Symposium on Foundations of Computer Science (FOCS), 1997. y Supported in part by the DFG Project La 618/3-1 KOMET. z Supported in part by NSF grant CCR-9509603. This work was performed while this author was a visiting scholar at the Wilhelm-Schickard Institut fur Informatik, Universitat Tubingen, supported by DFG grant TU 7/117-1 
Abstract-found: 1
Intro-found: 1
Reference: [AAD97] <author> M. Agrawal, E. Allender, and S. Datta. </author> <title> On TC 0 , AC 0 , and arithmetic circuits. </title> <booktitle> In Proceedings, 12th Annual IEEE Conference on Computational Complexity, </booktitle> <pages> pages 134-148, </pages> <year> 1997. </year>
Reference-contexts: The class #SAC 1 can be defined similarly. This notion of arithmetic circuit complexity has been investigated in a series of papers including <ref> [Vin91, CMTV96, AAD97, All97] </ref>. Our results say that the zero-one valued characteristic function of any language in NL (or LogCFL) can be computed by the corresponding (nonuniform) class of arithmetic circuits.
Reference: [ABO96] <author> E. Allender, R. Beals, and M. Ogihara. </author> <title> The complexity of matrix rank and feasible systems of linear equations. </title> <booktitle> In ACM Symposium on Theory of Computing (STOC), </booktitle> <year> 1996. </year>
Reference: [AJ93] <author> C. Alvarez and B. Jenner. </author> <title> A very hard log-space counting class. </title> <journal> Theoretical Computer Science, </journal> <volume> 107 </volume> <pages> 3-30, </pages> <year> 1993. </year>
Reference-contexts: This question remains open. In recent years, nondeterministic logspace (NL) has been the focus of much attention, in part because NL captures the complexity of many natural computational problems [Jon75]. The unambiguous version of NL, denoted UL, was first explicitly defined and studied in <ref> [BJLR91, AJ93] </ref>. A language A is in UL if and only if there is a nondeterministic logspace machine M accepting A such that, for every x, M has at most one accepting computation on input x. <p> (n))=2 O (s (n)) , but this is interesting only for sublinear s (n). (In a personal communication, Fortnow has pointed out that our argument does show that NSPACE (n) = USPACE (n) relative to a random oracle.) There is a natural class of functions associated with NL, denoted FNL <ref> [AJ93] </ref>. <p> Another important class of problems related to NL is the class #L, which counts the number of accepting paths of a NL machine. #L characterizes the complexity of computing the determinant [Vin91]. (See also [Tod, Dam, MV97, Val92, AO96].) It was observed in <ref> [AJ93] </ref> that if NL = UL, then FNL is contained in #L. Thus a corollary of the result in this paper is that FNL/poly #L/poly. Many questions about #L remain unanswered.
Reference: [AL96] <author> E. Allender and K.-J. Lange. </author> <title> StUSPACE(log n) is contained in DSPACE(log 2 n= log log n). </title> <booktitle> In Proceedings of the 7th International Symposium on Algorithms and Computation (ISAAC), volume 1178 of Lecture Notes in Computer Science, </booktitle> <pages> pages 193-202. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> To appear in Theory of Computing Systems. </note>
Reference-contexts: Strongly unambiguous algorithms have more efficient algorithms than are known for general NL or UL problems. It is shown in <ref> [AL96] </ref> that problems in strongly unambiguous logspace have deterministic algorithms using less than log 2 n space, and it is shown in [BJLR91] that this class is also in LogDCFL (and hence has logarithmic-time CROW-PRAM algorithms and is in SC 2 ).
Reference: [All97] <author> E. Allender. </author> <title> Making computation count: Arithmetic circuits in the nineties. </title> <journal> SIGACT NEWS, </journal> <volume> 28(4) </volume> <pages> 2-15, </pages> <month> December </month> <year> 1997. </year>
Reference-contexts: The class #SAC 1 can be defined similarly. This notion of arithmetic circuit complexity has been investigated in a series of papers including <ref> [Vin91, CMTV96, AAD97, All97] </ref>. Our results say that the zero-one valued characteristic function of any language in NL (or LogCFL) can be computed by the corresponding (nonuniform) class of arithmetic circuits.
Reference: [AO96] <author> E. Allender and M. Ogihara. </author> <title> Relationships among PL, #L, and the determinant. </title> <journal> RAIRO Theoretical Information and Application, </journal> <volume> 30 </volume> <pages> 1-21, </pages> <year> 1996. </year>
Reference-contexts: Another important class of problems related to NL is the class #L, which counts the number of accepting paths of a NL machine. #L characterizes the complexity of computing the determinant [Vin91]. (See also <ref> [Tod, Dam, MV97, Val92, AO96] </ref>.) It was observed in [AJ93] that if NL = UL, then FNL is contained in #L. Thus a corollary of the result in this paper is that FNL/poly #L/poly. Many questions about #L remain unanswered.
Reference: [AR98] <author> E. Allender and K. Reinhardt. </author> <title> Isolation, matching, and counting. </title> <booktitle> In Proceedings, 13th Annual IEEE Conference on Computational Complexity, </booktitle> <year> 1998. </year> <note> to appear. </note>
Reference-contexts: We see no application of this observation. It is natural to ask if the randomized aspect of the construction can be eliminated using some sort of derandomization technique to obtain the equality UL = NL. In more recent work <ref> [AR98] </ref>, we observe that if DSPACE (n) contains a language with sufficiently high circuit complexity, then the techniques of [NW94] 13 can be used to build pseudorandom generators of sufficiently high quality, so that the results of this paper would also hold in the uniform setting.
Reference: [BCD + 89] <author> A. Borodin, S. A. Cook, P. W. Dymond, W. L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <year> 1989. </year>
Reference: [BF97] <author> R. Beigel and B. Fu. </author> <title> Circuits over PP and PL. </title> <booktitle> In IEEE Conference on Computational Complexity, </booktitle> <pages> pages 24-35, </pages> <year> 1997. </year>
Reference: [BJLR91] <author> G. Buntrock, B. Jenner, K.-J. Lange, and P. Rossmanith. </author> <title> Unambi-guity and fewness for logarithmic space. </title> <booktitle> In Proc. 8th International Conference on Fundamentals of Computation Theory (FCT '91), volume 529 of Lecture Notes in Computer Science, </booktitle> <pages> pages 168-179. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: This question remains open. In recent years, nondeterministic logspace (NL) has been the focus of much attention, in part because NL captures the complexity of many natural computational problems [Jon75]. The unambiguous version of NL, denoted UL, was first explicitly defined and studied in <ref> [BJLR91, AJ93] </ref>. A language A is in UL if and only if there is a nondeterministic logspace machine M accepting A such that, for every x, M has at most one accepting computation on input x. <p> Strongly unambiguous algorithms have more efficient algorithms than are known for general NL or UL problems. It is shown in [AL96] that problems in strongly unambiguous logspace have deterministic algorithms using less than log 2 n space, and it is shown in <ref> [BJLR91] </ref> that this class is also in LogDCFL (and hence has logarithmic-time CROW-PRAM algorithms and is in SC 2 ). For more information on this connection to CROW-PRAM algorithms, see [FLR96]. <p> A corollary of our work is that UL/poly is closed under complement. It remains an open question if UL is closed under complement, although some of the unambiguous logspace classes that can be defined using strong unambiguity are known to be closed under complement <ref> [BJLR91] </ref>. Similarly, UL/poly has a complete set under the natural types of reducibility to consider (nonuniform logspace reductions, or even nonuniform projections). In contrast, UL itself is not known to have any complete sets under logspace reducibility.
Reference: [CMTV96] <author> H. Caussinus, P. McKenzie, D. Therien, and H. Vollmer. </author> <title> Nondeterministic NC 1 computation. </title> <booktitle> In Proceedings, 11th Annual IEEE Conference on Computational Complexity, </booktitle> <pages> pages 12-21, </pages> <year> 1996. </year>
Reference-contexts: The class #SAC 1 can be defined similarly. This notion of arithmetic circuit complexity has been investigated in a series of papers including <ref> [Vin91, CMTV96, AAD97, All97] </ref>. Our results say that the zero-one valued characteristic function of any language in NL (or LogCFL) can be computed by the corresponding (nonuniform) class of arithmetic circuits.
Reference: [Dam] <author> C. Damm. </author> <title> DET = L #L ? Informatik-Preprint 8, </title> <institution> Fachbereich Infor-matik der Humboldt-Universitat zu Berlin, </institution> <year> 1991. </year>
Reference-contexts: Another important class of problems related to NL is the class #L, which counts the number of accepting paths of a NL machine. #L characterizes the complexity of computing the determinant [Vin91]. (See also <ref> [Tod, Dam, MV97, Val92, AO96] </ref>.) It was observed in [AJ93] that if NL = UL, then FNL is contained in #L. Thus a corollary of the result in this paper is that FNL/poly #L/poly. Many questions about #L remain unanswered.
Reference: [FLR96] <author> H. Fernau, K.-J. Lange, and K. Reinhardt. </author> <title> Advocating ownership. </title> <editor> In V. Chandru, editor, </editor> <booktitle> Proceedings of the 16th Conference on Foundations of Software Technology and Theoretical Computer Science, volume 1180 of LNCS, </booktitle> <pages> pages 286-297. </pages> <publisher> Springer, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: For more information on this connection to CROW-PRAM algorithms, see <ref> [FLR96] </ref>. The reader is encouraged to note that, in a min-unique graph, the shortest path between any two vertices is unique. This bears a superficial resemblance to the property of strong unambiguity. We see no application of this observation.
Reference: [Gal95] <author> A. Gal. </author> <title> Semi-unbounded fan-in circuits: Boolean vs. arithmetic. </title> <booktitle> In IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 82-87, </pages> <year> 1995. </year>
Reference-contexts: A similar history followed a few years later: not long after it was shown that NL is contained in L/poly [Wig94, GW96], the isolation lemma was again used to show that LogCFL is contained in SAC 1 /poly <ref> [Gal95, GW96] </ref>. (As is noted in [GW96], this was independently shown by H. <p> The weight of a certificate is the sum of the weights of the edges traversed in the depth-first search. This informal definition is made precise by the following inductive definition. (It should be noted that this definition differs in some unimportant ways from the definition given in <ref> [Gal95, GW96] </ref>.) * If g is a constant 1 gate or an input gate evaluating to 1 on input x, then the only certificate for g is the string g. <p> Lemma 3.2 is in some sense implicit in <ref> [Gal95, GW96] </ref>. We include a proof for completeness. Proof: Let A be in LogCFL, and let C be the semiunbounded circuit of size n k and depth d = O (log n) recognizing A on inputs of length n. As in [Gal95, GW96], a modified application of the isolation lemma technique <p> Lemma 3.2 is in some sense implicit in <ref> [Gal95, GW96] </ref>. We include a proof for completeness. Proof: Let A be in LogCFL, and let C be the semiunbounded circuit of size n k and depth d = O (log n) recognizing A on inputs of length n. As in [Gal95, GW96], a modified application of the isolation lemma technique of [MVV87] shows that, for each input x, if each wire in C is assigned a weight in the range [1; 4n 3k ] uniformly and independently at random, then with probability at least 3 4 , C is min-unique on
Reference: [GS88] <author> J. Grollmann and A. Selman. </author> <title> Complexity measures for public-key cryptosystems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 309-335, </pages> <year> 1988. </year>
Reference-contexts: context-free languages form one of the most important sub classes of the class of context-free languages. * The complexity class UP (unambiguous polynomial time) was first defined and studied by Valiant [Val76]; a necessary precondition for the existence of one-way functions is for P to be properly contained in UP <ref> [GS88] </ref>.
Reference: [GW96] <author> A. Gal and A. Wigderson. </author> <title> Boolean vs. arithmetic complexity classes: randomized reductions. Random Structures and Algorithms, </title> <booktitle> 9 </booktitle> <pages> 99-111, </pages> <year> 1996. </year>
Reference-contexts: Motivated in part by the question of whether a space-bounded analog of the result of [VV86] could be proved, Wigderson <ref> [Wig94, GW96] </ref> proved the inclusion NL/poly L/poly. (An alternative proof of this inclusion is sketched in [Reg97, p. 284].) This is a weaker statement than NL L, which is still not known to hold. <p> L is the class of languages A for which there is a nondeterministic logspace bounded machine M such that x 2 A if and only M has an odd number of accepting computation paths on input x. In the proof of the main result of <ref> [Wig94, GW96] </ref>, Wigderson observed that a simple modification of his construction produces graphs in which the shortest distance between every pair of nodes is achieved by a unique path. We will refer to such graphs in the following as min-unique graphs. <p> It is well-known that this is a complete problem for NL [Jon75]. The following lemma is implicit in <ref> [Wig94, GW96] </ref>, but for completeness we make it explicit here. <p> A similar history followed a few years later: not long after it was shown that NL is contained in L/poly <ref> [Wig94, GW96] </ref>, the isolation lemma was again used to show that LogCFL is contained in SAC 1 /poly [Gal95, GW96]. (As is noted in [GW96], this was independently shown by H. <p> A similar history followed a few years later: not long after it was shown that NL is contained in L/poly [Wig94, GW96], the isolation lemma was again used to show that LogCFL is contained in SAC 1 /poly <ref> [Gal95, GW96] </ref>. (As is noted in [GW96], this was independently shown by H. <p> A similar history followed a few years later: not long after it was shown that NL is contained in L/poly [Wig94, GW96], the isolation lemma was again used to show that LogCFL is contained in SAC 1 /poly [Gal95, GW96]. (As is noted in <ref> [GW96] </ref>, this was independently shown by H. <p> The weight of a certificate is the sum of the weights of the edges traversed in the depth-first search. This informal definition is made precise by the following inductive definition. (It should be noted that this definition differs in some unimportant ways from the definition given in <ref> [Gal95, GW96] </ref>.) * If g is a constant 1 gate or an input gate evaluating to 1 on input x, then the only certificate for g is the string g. <p> Lemma 3.2 is in some sense implicit in <ref> [Gal95, GW96] </ref>. We include a proof for completeness. Proof: Let A be in LogCFL, and let C be the semiunbounded circuit of size n k and depth d = O (log n) recognizing A on inputs of length n. As in [Gal95, GW96], a modified application of the isolation lemma technique <p> Lemma 3.2 is in some sense implicit in <ref> [Gal95, GW96] </ref>. We include a proof for completeness. Proof: Let A be in LogCFL, and let C be the semiunbounded circuit of size n k and depth d = O (log n) recognizing A on inputs of length n. As in [Gal95, GW96], a modified application of the isolation lemma technique of [MVV87] shows that, for each input x, if each wire in C is assigned a weight in the range [1; 4n 3k ] uniformly and independently at random, then with probability at least 3 4 , C is min-unique on
Reference: [Imm88] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complement. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 935-938, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction In this paper, we combine two very useful algorithmic techniques (the inductive counting technique of <ref> [Imm88, Sze88] </ref> and the isolation lemma of [MVV87]) to give a simple proof that two fundamental concepts in complexity theory coincide in the context of nonuniform computation: nondeterminism and unambiguity. Unambiguous computation has been the focus of much attention over the past three decades. <p> Combining this routine with the construction of Lemma 2.1 yields the desired UL/poly algorithm. Our algorithm is an enhancement of the inductive counting technique of <ref> [Imm88] </ref> and [Sze88]. We call this the double counting technique since in each stage we count not only the number of vertices having distance at most k from the start vertex, but also the sum of the lengths of the shortest path to each such vertex. <p> SAC 1 is the class of languages accepted by logspace-uniform semi-unbounded circuits of depth O (log n); a circuit family is semi-unbounded if the AND gates have fan-in 2 and the OR gates have unbounded fan-in. Not long after NL was shown to be closed under complementation <ref> [Imm88, Sze88] </ref>, LogCFL was also shown to be closed under complementation in a proof that also used the inductive counting technique ([BCD + 89]).
Reference: [Jon75] <author> N. D. Jones. </author> <title> Space bounded reducibility among combinatorial problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 11 </volume> <pages> 68-85, </pages> <year> 1975. </year>
Reference-contexts: This question remains open. In recent years, nondeterministic logspace (NL) has been the focus of much attention, in part because NL captures the complexity of many natural computational problems <ref> [Jon75] </ref>. The unambiguous version of NL, denoted UL, was first explicitly defined and studied in [BJLR91, AJ93]. <p> It is well-known that this is a complete problem for NL <ref> [Jon75] </ref>. The following lemma is implicit in [Wig94, GW96], but for completeness we make it explicit here.
Reference: [KL82] <author> R. Karp and R. Lipton. </author> <title> Turing machines that take advice. </title> <journal> L'Enseignement Mathematique, </journal> <volume> 28 </volume> <pages> 191-209, </pages> <year> 1982. </year> <month> 16 </month>
Reference-contexts: Uniform complexity classes can be used to give characterizations of the non-uniform classes, too, using a formalism presented in <ref> [KL82] </ref>: Given any complexity class C, C/poly is the class of languages A for which there exists a sequence of "advice strings" fff (n) j n 2 Ng and a language B 2 C such that x 2 A if and only if (x; ff (jxj)) 2 B.
Reference: [Lan97] <author> K.-J. Lange. </author> <title> An unambiguous class possessing a complete set. </title> <booktitle> In Proc. 14th Symposium on Theoretical Aspects of Computer Science (STACS '97), volume 1200 of Lecture Notes in Computer Science, </booktitle> <pages> pages 339-350. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: In contrast, UL itself is not known to have any complete sets under logspace reducibility. In this regard, note that Lange has shown that one of the other unambiguous logspace classes does have complete sets <ref> [Lan97] </ref>. It is disappointing that the techniques used in this paper do not seem to provide any new information about complexity classes such as NSPACE (n) and NSPACE (2 n ).
Reference: [MV97] <author> M. Mahajan and V. Vinay. </author> <title> Determinant: Combinatorics, algorithms, and complexity. </title> <journal> Chicago Journal of Theoretical Computer Science, </journal> <volume> (5), </volume> <year> 1997. </year>
Reference-contexts: Another important class of problems related to NL is the class #L, which counts the number of accepting paths of a NL machine. #L characterizes the complexity of computing the determinant [Vin91]. (See also <ref> [Tod, Dam, MV97, Val92, AO96] </ref>.) It was observed in [AJ93] that if NL = UL, then FNL is contained in #L. Thus a corollary of the result in this paper is that FNL/poly #L/poly. Many questions about #L remain unanswered.
Reference: [MVV87] <author> K. Mulmuley, U. Vazirani, and V. Vazirani. </author> <title> Matching is as easy as matrix inversion. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 105-113, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction In this paper, we combine two very useful algorithmic techniques (the inductive counting technique of [Imm88, Sze88] and the isolation lemma of <ref> [MVV87] </ref>) to give a simple proof that two fundamental concepts in complexity theory coincide in the context of nonuniform computation: nondeterminism and unambiguity. Unambiguous computation has been the focus of much attention over the past three decades. <p> Proof: We first observe that a standard application of the isolation lemma technique of <ref> [MVV87] </ref> shows that, if each edge in G is assigned a weight in the range [1; 4n 4 ] uniformly and independently at random, then with probability at least 3 4 , for any two vertices x and y such that there is a path from x to y, there is <p> Proof: Let A be in LogCFL, and let C be the semiunbounded circuit of size n k and depth d = O (log n) recognizing A on inputs of length n. As in [Gal95, GW96], a modified application of the isolation lemma technique of <ref> [MVV87] </ref> shows that, for each input x, if each wire in C is assigned a weight in the range [1; 4n 3k ] uniformly and independently at random, then with probability at least 3 4 , C is min-unique on input x. (Sketch: The probability that there is more than one
Reference: [NR95] <author> R. Niedermeier and P. Rossmanith. </author> <title> Unambiguous auxiliary pushdown automata and semi-unbounded fan-in circuits. </title> <journal> Information and Computation, </journal> <volume> 118(2) </volume> <pages> 227-245, </pages> <year> 1995. </year>
Reference-contexts: Shouldn't similar relationships hold for the unambiguous classes? Unfortunately, it is not known that UAuxPDA (log n; n O (1) ) or UL is reducible to unambiguous context-free languages. The work of Niedermeier and Ross-manith does an excellent job of explaining the subtleties and difficulties here <ref> [NR95] </ref>. CREW algorithms are closely associated with a version of unambigu-ity called strong unambiguity.
Reference: [NW94] <author> N. Nisan and A. Wigderson. </author> <title> Hardness vs. randomness. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 49 </volume> <pages> 149-167, </pages> <year> 1994. </year>
Reference-contexts: In more recent work [AR98], we observe that if DSPACE (n) contains a language with sufficiently high circuit complexity, then the techniques of <ref> [NW94] </ref> 13 can be used to build pseudorandom generators of sufficiently high quality, so that the results of this paper would also hold in the uniform setting. A corollary of our work is that UL/poly is closed under complement.
Reference: [Ogi96] <author> M. Ogihara. </author> <title> The PL hierarchy collapses. </title> <booktitle> In ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 84-88, </pages> <year> 1996. </year> <note> to appear in SIAM J. Comput. </note>
Reference: [Raz90] <author> A. Razborov. </author> <title> Lower bounds on the size of switching-and-rectifier networks for symmetric Boolean functions. </title> <journal> Mathematical Notes of the Academy of Sciences of the USSR, </journal> <volume> 48(6) </volume> <pages> 79-91, </pages> <year> 1990. </year>
Reference-contexts: (We will consider "logspace-uniform" circuits, where the function n 7! C n can be computed in space log n.) P and 2 NL (and many other uniform complexity classes) have natural definitions in terms of uniform circuits; for instance, NL can be characterized in terms of switching-and-rectifier networks (see, e.g. <ref> [Raz92, Raz90] </ref>) and skew circuits [Ven92].
Reference: [Raz92] <author> A. Razborov. </author> <title> Lower bounds for deterministic and nondeterministic branching programs. </title> <booktitle> In Proc. 8th International Conference on Fundamentals of Computation Theory (FCT '91), volume 529 of Lecture Notes in Computer Science, </booktitle> <pages> pages 47-60. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: (We will consider "logspace-uniform" circuits, where the function n 7! C n can be computed in space log n.) P and 2 NL (and many other uniform complexity classes) have natural definitions in terms of uniform circuits; for instance, NL can be characterized in terms of switching-and-rectifier networks (see, e.g. <ref> [Raz92, Raz90] </ref>) and skew circuits [Ven92].
Reference: [Reg97] <author> K. Regan. </author> <title> Polynomials and combinatorial definitions of languages. </title> <editor> In L. Hemaspaandra and Alan Selman, editors, </editor> <booktitle> Complexity Theory Retrospective II, </booktitle> <pages> pages 261-293. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Motivated in part by the question of whether a space-bounded analog of the result of [VV86] could be proved, Wigderson [Wig94, GW96] proved the inclusion NL/poly L/poly. (An alternative proof of this inclusion is sketched in <ref> [Reg97, p. 284] </ref>.) This is a weaker statement than NL L, which is still not known to hold.
Reference: [RR92] <author> P. Rossmanith and W. Rytter. </author> <title> Observations on log n time parallel recognition of unambiguous context-free languages. </title> <journal> Information Processing Letters, </journal> <volume> 44 </volume> <pages> 267-272, </pages> <year> 1992. </year>
Reference-contexts: Corollary 3.4 LogCFL/poly = UAuxPDA (log n; n O (1) )/poly. 4 Discussion and Open Problems Rytter [Ryt87] (see also <ref> [RR92] </ref>) showed that any unambiguous context-free language can be recognized in logarithmic time by a CREW-PRAM.
Reference: [Ryt87] <author> W. Rytter. </author> <title> Parallel time O(log n) recognition of unambiguous context-free languages. </title> <journal> Information and Computation, </journal> <volume> 73 </volume> <pages> 75-86, </pages> <year> 1987. </year>
Reference-contexts: Corollary 3.4 LogCFL/poly = UAuxPDA (log n; n O (1) )/poly. 4 Discussion and Open Problems Rytter <ref> [Ryt87] </ref> (see also [RR92]) showed that any unambiguous context-free language can be recognized in logarithmic time by a CREW-PRAM. In contrast, no such CREW algorithm is known for any problem complete for NL, even in the nonuniform setting, although one might initially suspect that our results, combined with those of [Ryt87], <p> <ref> [Ryt87] </ref> (see also [RR92]) showed that any unambiguous context-free language can be recognized in logarithmic time by a CREW-PRAM. In contrast, no such CREW algorithm is known for any problem complete for NL, even in the nonuniform setting, although one might initially suspect that our results, combined with those of [Ryt87], would yield such algorithms, because of the following considerations: * NL is the class of languages reducible to linear context-free languages [Sud75]. * The class of languages accepted by deterministic AuxPDAs in logarithmic space and polynomial time coincides with the class of languages logspace reducible to deterministic context-free languages. *
Reference: [Sud75] <author> I. H. Sudborough. </author> <title> A note on tape-bounded complexity classes and linear context-free languages. </title> <journal> J. Association of Computing Machinery, </journal> <volume> 22 </volume> <pages> 499-500, </pages> <year> 1975. </year>
Reference-contexts: such CREW algorithm is known for any problem complete for NL, even in the nonuniform setting, although one might initially suspect that our results, combined with those of [Ryt87], would yield such algorithms, because of the following considerations: * NL is the class of languages reducible to linear context-free languages <ref> [Sud75] </ref>. * The class of languages accepted by deterministic AuxPDAs in logarithmic space and polynomial time coincides with the class of languages logspace reducible to deterministic context-free languages. * LogCFL coincides with AuxPDA (log n; n O (1) ).
Reference: [Sud78] <author> I. H. Sudborough. </author> <title> On the tape complexity of deterministic context-free languages. </title> <journal> J. Association of Computing Machinery, </journal> <volume> 25 </volume> <pages> 405-414, </pages> <year> 1978. </year>
Reference-contexts: If BAD.GRAPH = false then there is an s-t path in G if and only if d (t) k. 7 Proposition 3.1 <ref> [Sud78, Ven91] </ref> LogCFL = AuxPDA (log n; n O (1) ) = SAC 1 . An Auxiliary Pushdown Automaton (AuxPDA) is a nondeterministic Tur-ing machine with a read-only input tape, a space-bounded worktape, and a pushdown store that is not subject to the space-bound.
Reference: [Sze88] <author> R. Szelepcsenyi. </author> <title> The method of forced enumeration for nondeter-ministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction In this paper, we combine two very useful algorithmic techniques (the inductive counting technique of <ref> [Imm88, Sze88] </ref> and the isolation lemma of [MVV87]) to give a simple proof that two fundamental concepts in complexity theory coincide in the context of nonuniform computation: nondeterminism and unambiguity. Unambiguous computation has been the focus of much attention over the past three decades. <p> Combining this routine with the construction of Lemma 2.1 yields the desired UL/poly algorithm. Our algorithm is an enhancement of the inductive counting technique of [Imm88] and <ref> [Sze88] </ref>. We call this the double counting technique since in each stage we count not only the number of vertices having distance at most k from the start vertex, but also the sum of the lengths of the shortest path to each such vertex. <p> SAC 1 is the class of languages accepted by logspace-uniform semi-unbounded circuits of depth O (log n); a circuit family is semi-unbounded if the AND gates have fan-in 2 and the OR gates have unbounded fan-in. Not long after NL was shown to be closed under complementation <ref> [Imm88, Sze88] </ref>, LogCFL was also shown to be closed under complementation in a proof that also used the inductive counting technique ([BCD + 89]).
Reference: [Tod] <author> S. </author> <title> Toda. Counting problems computationally equivalent to the determinant. </title> <type> Technical Report CSIM 91-07, </type> <institution> Department of Computer Science and Information Mathematics, University of Electro-Communications, </institution> <address> Tokyo, </address> <year> 1991. </year>
Reference-contexts: Another important class of problems related to NL is the class #L, which counts the number of accepting paths of a NL machine. #L characterizes the complexity of computing the determinant [Vin91]. (See also <ref> [Tod, Dam, MV97, Val92, AO96] </ref>.) It was observed in [AJ93] that if NL = UL, then FNL is contained in #L. Thus a corollary of the result in this paper is that FNL/poly #L/poly. Many questions about #L remain unanswered.
Reference: [Val76] <author> L. Valiant. </author> <title> The relative complexity of checking and evaluating. </title> <journal> Information Processing Letters, </journal> <volume> 5 </volume> <pages> 20-23, </pages> <year> 1976. </year>
Reference-contexts: For example: * Unambiguous context-free languages form one of the most important sub classes of the class of context-free languages. * The complexity class UP (unambiguous polynomial time) was first defined and studied by Valiant <ref> [Val76] </ref>; a necessary precondition for the existence of one-way functions is for P to be properly contained in UP [GS88].
Reference: [Val92] <author> L. Valiant. </author> <title> Why is Boolean complexity theory difficult? In M. Pa-terson, editor, Boolean Function Complexity, </title> <booktitle> volume 169 of London Mathematical Society Lecture Notes Series, </booktitle> <pages> pages 84-94. </pages> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: Another important class of problems related to NL is the class #L, which counts the number of accepting paths of a NL machine. #L characterizes the complexity of computing the determinant [Vin91]. (See also <ref> [Tod, Dam, MV97, Val92, AO96] </ref>.) It was observed in [AJ93] that if NL = UL, then FNL is contained in #L. Thus a corollary of the result in this paper is that FNL/poly #L/poly. Many questions about #L remain unanswered.
Reference: [Ven91] <author> H. Venkateswaran. </author> <title> Properties that characterize LOGCFL. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 380-404, </pages> <year> 1991. </year>
Reference-contexts: If BAD.GRAPH = false then there is an s-t path in G if and only if d (t) k. 7 Proposition 3.1 <ref> [Sud78, Ven91] </ref> LogCFL = AuxPDA (log n; n O (1) ) = SAC 1 . An Auxiliary Pushdown Automaton (AuxPDA) is a nondeterministic Tur-ing machine with a read-only input tape, a space-bounded worktape, and a pushdown store that is not subject to the space-bound.
Reference: [Ven92] <author> H. Venkateswaran. </author> <title> Circuit definitions of nondeterministic complexity classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21 </volume> <pages> 655-670, </pages> <year> 1992. </year>
Reference-contexts: where the function n 7! C n can be computed in space log n.) P and 2 NL (and many other uniform complexity classes) have natural definitions in terms of uniform circuits; for instance, NL can be characterized in terms of switching-and-rectifier networks (see, e.g. [Raz92, Raz90]) and skew circuits <ref> [Ven92] </ref>. <p> Does the equality UL/poly = NL/poly provide any help in analyzing this hierarchy in the nonuniform setting? 14 It is instructive to view our results in terms of arithmetic circuits. An equiv-alent definition of the class of functions #L results by taking the Boolean circuit characterization of NL (see <ref> [Ven92] </ref>) and replacing each Boolean AND and OR gate by integer multiplication and addition, respectively. The class #SAC 1 can be defined similarly. This notion of arithmetic circuit complexity has been investigated in a series of papers including [Vin91, CMTV96, AAD97, All97].
Reference: [Vin91] <author> V. Vinay. </author> <title> Counting auxiliary pushdown automata and semi-unbounded arithmetic circuits. </title> <booktitle> In Proc. 6th Structure in Complexity Theory Conference, </booktitle> <pages> pages 270-284. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: Another important class of problems related to NL is the class #L, which counts the number of accepting paths of a NL machine. #L characterizes the complexity of computing the determinant <ref> [Vin91] </ref>. (See also [Tod, Dam, MV97, Val92, AO96].) It was observed in [AJ93] that if NL = UL, then FNL is contained in #L. Thus a corollary of the result in this paper is that FNL/poly #L/poly. Many questions about #L remain unanswered. <p> The class #SAC 1 can be defined similarly. This notion of arithmetic circuit complexity has been investigated in a series of papers including <ref> [Vin91, CMTV96, AAD97, All97] </ref>. Our results say that the zero-one valued characteristic function of any language in NL (or LogCFL) can be computed by the corresponding (nonuniform) class of arithmetic circuits.
Reference: [VV86] <author> L. Valiant and V. Vazirani. </author> <title> NP is as easy as detecting unique solutions. </title> <journal> Theoretical Computer Science, </journal> <volume> 47 </volume> <pages> 85-93, </pages> <year> 1986. </year>
Reference-contexts: of NP, it is neither known nor widely-believed that UP contains any sets that are hard for NP under any interesting notion of reducibility. (Recall that Valiant and Vazirani showed that "Unique.Satisfiability" the set of all Boolean formulae with exactly one satisfying assignment is hard for NP under probabilistic reductions <ref> [VV86] </ref>. However, the language Unique.Satisfiability is hard for coNP under p m reductions, and thus is not in UP unless NP = coNP.) Nondeterministic and unambiguous space-bounded computation have also been the focus of much work in computer science. <p> Motivated in part by the question of whether a space-bounded analog of the result of <ref> [VV86] </ref> could be proved, Wigderson [Wig94, GW96] proved the inclusion NL/poly L/poly. (An alternative proof of this inclusion is sketched in [Reg97, p. 284].) This is a weaker statement than NL L, which is still not known to hold.
Reference: [Wig94] <author> A. Wigderson. NL/poly L L/poly. </author> <booktitle> In Proc. of the 9th IEEE Structure in Complexity Conference, </booktitle> <pages> pages 59-62, </pages> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Motivated in part by the question of whether a space-bounded analog of the result of [VV86] could be proved, Wigderson <ref> [Wig94, GW96] </ref> proved the inclusion NL/poly L/poly. (An alternative proof of this inclusion is sketched in [Reg97, p. 284].) This is a weaker statement than NL L, which is still not known to hold. <p> L is the class of languages A for which there is a nondeterministic logspace bounded machine M such that x 2 A if and only M has an odd number of accepting computation paths on input x. In the proof of the main result of <ref> [Wig94, GW96] </ref>, Wigderson observed that a simple modification of his construction produces graphs in which the shortest distance between every pair of nodes is achieved by a unique path. We will refer to such graphs in the following as min-unique graphs. <p> It is well-known that this is a complete problem for NL [Jon75]. The following lemma is implicit in <ref> [Wig94, GW96] </ref>, but for completeness we make it explicit here. <p> A similar history followed a few years later: not long after it was shown that NL is contained in L/poly <ref> [Wig94, GW96] </ref>, the isolation lemma was again used to show that LogCFL is contained in SAC 1 /poly [Gal95, GW96]. (As is noted in [GW96], this was independently shown by H.
References-found: 41

