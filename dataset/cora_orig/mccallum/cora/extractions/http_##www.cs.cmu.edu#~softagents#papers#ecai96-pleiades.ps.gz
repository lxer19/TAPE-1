URL: http://www.cs.cmu.edu/~softagents/papers/ecai96-pleiades.ps.gz
Refering-URL: http://www.cs.cmu.edu/~softagents/publications_old.html
Root-URL: 
Title: Multi-Agent Integration of Information Gathering and Decision Support  
Author: Katia Sycara and Dajun Zeng 
Abstract: We are investigating techniques for developing distributed and adaptive collections of information agents that coordinate to retrieve, filter and fuse information relevant to the user, task and situation. In our system of agents, information gathering is seamlessly integrated with decision support. In this paper we present the distributed system architecture, agent collaboration interactions, and a reusable set of software components for structuring agents. The system has three types of agents: Interface agents interact with the user receiving user specifications and delivering results. They acquire, model, and utilize user preferences to guide system coordination in support of the user's tasks. Task agents help users perform tasks by formulating problem solving plans and carrying out these plans through querying and exchanging information with other software agents. Information agents provide intelligent access to a heterogeneous collection of information sources. We have implemented this system framework and are developing collaborating agents in diverse complex real world tasks, such as organizational decision making, and financial portfolio management. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Keith Decker and Katia Sycara, </author> <title> `Designing reusable behaviors for information agents', </title> <type> Technical report, </type> <institution> The Robotics Institute, Carnegie Mellon University, Pittsburgh, U.S.A., </institution> <year> (1996). </year>
Reference-contexts: For information agents, the local data base is a major part of their reusable architecture. It is this local database that allows all information agents to present a consistent interface to other agents, and re-use behaviors, even in very different information environments <ref> [1] </ref>. An agent architecture may also contain components that are not reusable. For example, the architecture of information agents contains a small amount of site-specific external query interface code.
Reference: [2] <author> Lisa Dent, Jesus Boticario, John McDermott, Tom Mitchell, and David Zabowski, </author> <title> `A personal learning apprentice', </title> <booktitle> in Proceedings of the Tenth National Conference on Artificial Intelligence. AAAI, </booktitle> <year> (1992). </year>
Reference-contexts: The visitor information is used by faculty calendar software agents, such as CAP (see <ref> [2] </ref>), to decide level of interest of a faculty member to meet with the visitor. * The Personnel Finder agent accesses Internet resources to find more detailed information about the visitor (e.g. visitor's rank). * Meanwhile, the Interests agent queries the faculty interests data base and returns names of CMU faculty
Reference: [3] <author> Oren Etzioni and Daniel Weld, </author> <title> `A softbot-based interface to the internet', </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> (July </month> <year> 1994). </year>
Reference: [4] <author> Tim Finin, Rich Fritzson, and Don McKay, </author> <title> `A language and protocol to support intelligent agent interoperability', </title> <booktitle> in Proceedings of the CE and CALS Washington 92 Conference, </booktitle> <month> (June </month> <year> 1992). </year>
Reference-contexts: In this type of organization, task-specific agents continually interleave planning, scheduling, coordination, and the execution of domain-level problem-solving actions. Obviously, one of the major issues involved in multi-agent systems is the problem of interoperability and communication between the agents. In our framework, we use KQML <ref> [4] </ref> for inter-agent communication. In order to incorporate and utilize pre-existing software agents or information services that have been developed by others, we adopt the following strategy: If the agent is under our control, it will be built using KQML as a communication language.
Reference: [5] <author> Henry A. Kautz, Bart Selman, and Michael Coen, </author> <title> `Bottom-up design of software agents', </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> (July </month> <year> 1994). </year>
Reference-contexts: Hosting a visitor involves arranging the visitor's schedule with faculty whose research interests match the interests that the visitor has expressed in his/her visit request. A different variation of the hosting visitor task has also been explored by Kautz and his colleagues at Bell Labs <ref> [5] </ref>. Our system consisting of a collection of agents, collectively referred to as Visitor Hosting system, supports the visitor hosting task. The Visitor Hosting system takes as input a visit request, the tentative requested days for the meeting and the research interests of the visitor.
Reference: [6] <author> Kan Lang, `Newsweeder: </author> <title> Learning to filter netnews', </title> <booktitle> in Proceedings of Machine Learning Conference, </booktitle> <year> (1995). </year>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [12, 15, 6, 14] </ref>) has been proposed to address this challenge.
Reference: [7] <author> JyiShane Liu and Katia Sycara, </author> <title> `Distributed meeting scheduling', </title> <booktitle> in Proceedings of the Sixteenth Annual Conference of the Cognitive Science Society, </booktitle> <address> Atlanta, Georgia, </address> <month> (August 13-16 </month> <year> 1994). </year>
Reference-contexts: Delegating some of the information processing to Intelligent Agents could increase human productivity and reduce cognitive load. Within the context of our PLEIADES project, we have applied our distributed agent architecture to tasks, such as distributed, collaborative meeting scheduling among multiple human attendees <ref> [7] </ref>, finding people information on the Internet, hosting a visitor to Carnegie Mellon University [14], accessing and filtering information about conference announcements and requests for proposals (RFPs) from funding organizations and notifying Computer Science faculty of RFPs that suit their research interests [11]. 5 An Extended Example: The Visitor Hosting Task <p> We presented the various agent types that we believe are necessary for supporting and seamlessly integrating information gathering from distributed internet-based information sources 3 For details on the distributed meeting scheduling algorithm, see <ref> [7] </ref>. and decision support. We have also described and illustrated our implemented, distributed system of such collaborating agents.
Reference: [8] <editor> Pattie Maes, </editor> <title> `Agents that reduce work and information overload', </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> (July </month> <year> 1994). </year>
Reference-contexts: Most current agent-oriented approaches have focussed on what we call interface agentsa single agent with simple knowledge and problem solving capabilities whose main task is information filtering to alleviate the user's cognitive overload (e.g., <ref> [8, 9] </ref>). Another type of agent is the SoftBot ([3]), a single agent with general knowledge that performs a wide range of user-delegated information-finding tasks. We believe that such centralized approaches have several limitations.
Reference: [9] <author> Tom Mitchell, Rich Caruana, Dayne Freitag, John McDermott, and David Zabowski, </author> <title> `Experience with a learning personal assistant', </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> (July </month> <year> 1994). </year>
Reference-contexts: Most current agent-oriented approaches have focussed on what we call interface agentsa single agent with simple knowledge and problem solving capabilities whose main task is information filtering to alleviate the user's cognitive overload (e.g., <ref> [8, 9] </ref>). Another type of agent is the SoftBot ([3]), a single agent with general knowledge that performs a wide range of user-delegated information-finding tasks. We believe that such centralized approaches have several limitations.
Reference: [10] <author> Tim Oates, M. V. Nagendra Prasad, and Victor R. Lesser, </author> <title> `Cooperative information gathering: A distributed problem solving approach', </title> <type> Technical Report 94-66, </type> <institution> Department of Computer Science, University of Massachusetts, </institution> <month> (September </month> <year> 1994). </year>
Reference-contexts: Finally, because of the complexity of the information finding and filtering task, and the large amount of information, the required processing would overwhelm a single agent. Another proposed solution is to use multi-agent computer systems to access, filter, evaluate, and integrate this information <ref> [14, 10] </ref>. Such multi-agent systems can compartmentalize specialized task knowledge, organize themselves to avoid processing bottlenecks, and can be built expressly to deal with dynamic changes in the agent and information-source landscape.
Reference: [11] <author> Anandeep Pannu and Katia Sycara, </author> <title> `Learning text filtering preferences', </title> <booktitle> in 1996 AAAI Symposium on Machine Learning and Information Access, </booktitle> <year> (1996). </year>
Reference-contexts: distributed, collaborative meeting scheduling among multiple human attendees [7], finding people information on the Internet, hosting a visitor to Carnegie Mellon University [14], accessing and filtering information about conference announcements and requests for proposals (RFPs) from funding organizations and notifying Computer Science faculty of RFPs that suit their research interests <ref> [11] </ref>. 5 An Extended Example: The Visitor Hosting Task We will use the task of hosting a visitor to Carnegie Mellon University (CMU) as an illustrative example of system operation.
Reference: [12] <author> Anand S. Rao and Michael P. Georgeff, </author> <title> `A model-theoretic approach to the verification of situated reasoning systems', </title> <booktitle> in Proceedings of IJCAI-93, </booktitle> <pages> pp. 318324, </pages> <address> Chambery, France, </address> <month> (28 August - 3 September </month> <year> 1993). </year> <pages> IJCAI. </pages>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [12, 15, 6, 14] </ref>) has been proposed to address this challenge. <p> The architecture of all these agents follows the general BDI type philosophy <ref> [12] </ref>, however, each of them embodies particular architectural design commitments to make them effective in dealing with the particular category of issues of its type.
Reference: [13] <author> Reid Simmons, </author> <title> `Structured control for autonomous robots', </title> <journal> IEEE Journal of Robotics and Automation, </journal> <year> (1994). </year>
Reference-contexts: As our point of departure, we use the Task Control Architecture (TCA) framework <ref> [13] </ref> which we extend and specialize for real-time user interaction, information gathering, and decision support tasks in the Infosphere. Before we present the general agent architecture and coordination in Section 3, we discuss first the characteristics of the different types of agents. <p> As our point of departure in structuring an agent, we extend and specialize the Task Control Architecture (TCA) <ref> [13] </ref> for real-time user interaction, information gathering, and decision support. The overall architectural design of a TCA-based agent is shown in Figure 2. The planning module takes as input a set of goals and produces a plan that satisfies the goals. <p> The overall architectural design of a TCA-based agent is shown in Figure 2. The planning module takes as input a set of goals and produces a plan that satisfies the goals. The key component of this architecture is a hierarchical representation of task/subtask relationships <ref> [13] </ref>. This representation, called a task tree, has goals as non-terminal nodes, and executable actions and execution monitoring mechanisms at the leaves. Temporal constraints between nodes are used to schedule task planning and execution: actions are queued until their temporal constraints are satisfied.
Reference: [14] <author> Katia Sycara and Dajun Zeng, </author> <title> `Towards an intelligent electronic secretary', </title> <booktitle> in Proceedings of the CIKM-94 (International Conference on Information and Knowledge Management) Workshop on Intelligent Information Agents, </booktitle> <institution> National Institute of Standards and Technology, Gaithersburg, Maryland, </institution> <month> (December </month> <year> 1994). </year>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [12, 15, 6, 14] </ref>) has been proposed to address this challenge. <p> Finally, because of the complexity of the information finding and filtering task, and the large amount of information, the required processing would overwhelm a single agent. Another proposed solution is to use multi-agent computer systems to access, filter, evaluate, and integrate this information <ref> [14, 10] </ref>. Such multi-agent systems can compartmentalize specialized task knowledge, organize themselves to avoid processing bottlenecks, and can be built expressly to deal with dynamic changes in the agent and information-source landscape. <p> Within the context of our PLEIADES project, we have applied our distributed agent architecture to tasks, such as distributed, collaborative meeting scheduling among multiple human attendees [7], finding people information on the Internet, hosting a visitor to Carnegie Mellon University <ref> [14] </ref>, accessing and filtering information about conference announcements and requests for proposals (RFPs) from funding organizations and notifying Computer Science faculty of RFPs that suit their research interests [11]. 5 An Extended Example: The Visitor Hosting Task We will use the task of hosting a visitor to Carnegie Mellon University (CMU)
Reference: [15] <author> M. Wooldridge and N. R. Jennings, </author> <title> `Intelligent agents: </title> <journal> Theory and practice', The Knowledge Engineering Review, </journal> <volume> 10(2), 115152, </volume> <year> (1995). </year> <title> Multi-Agent Systems 553 K. </title> <editor> Sycara and D. </editor> <publisher> Zeng </publisher>
Reference-contexts: As a result, the problem of locating information sources, accessing, filtering, and integrating information in support of decision making, as well as coordinating information retrieval and problem solving efforts of information sources and decision-making systems has become a very critical task. The notion of Intelligent Software Agents (e.g., <ref> [12, 15, 6, 14] </ref>) has been proposed to address this challenge.
References-found: 15

