URL: ftp://ftp.cs.huji.ac.il/users/transis/podc-98.ps
Refering-URL: http://www.cs.huji.ac.il/~grishac/grishac.html
Root-URL: http://www.cs.huji.ac.il
Email: E-mail:fgrishac,nabil,dolevg@cs.huji.ac.il,  
Title: An Adaptive Totally Ordered Multicast Protocol that Tolerates Partitions  
Author: G. V. Chockler N. Huleihel D. Dolev 
Web: http://www.cs.huji.ac.il/f~grishac,~nabil,~dolevg  
Address: Jerusalem, Jerusalem 91904, Israel  
Affiliation: Institute of Computer Science, The Hebrew University of  
Abstract: In this paper we present a novel algorithm that implements a totally ordered multicast primitive for a Totally Ordered Group Communication Service (TO-GCS). TO-GCS is a powerful infrastructure for building distributed fault-tolerant applications, such as totally ordered broadcast, consistent object replication, distributed shared memory, Computer Supported Cooperative Work (CSCW) applications and distributed monitoring and display applications. Our algorithm is adaptive, i.e., it is able to dynamically alter the message delivery order in response to changes in the transmission rates of the participating processes. This compensates for differences among participant transmission rates and therefore minimizes fluctuations in message delivery latency. Our algorithm is thus useful for soft real-time environments where sharp fluctuations in message delivery latency are not acceptable. Our solution provides well-defined message ordering semantics. These semantics are preserved even in the face of site and communication link failures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AMIR, Y. </author> <title> Replication Using Group Communication Over a Partitioned Network. </title> <type> PhD thesis, </type> <institution> Institute of Computer Science, The Hebrow University of Jerusalem, Israel, </institution> <year> 1995. </year>
Reference-contexts: 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast <ref> [1, 8, 10, 14, 12] </ref>, consistent object replication [1, 12], distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast [1, 8, 10, 14, 12], consistent object replication <ref> [1, 12] </ref>, distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> Our algorithm is thus useful for such applications. Another important feature of our solution is that it provides well-defined message ordering semantics. These semantics are required by existing TO-GCS based applications <ref> [1, 8, 12] </ref> and are preserved in spite of both site and communication link failures. They were first formulated within the framework of the Extended Virtual Synchrony model [15] and elaborated in [8, 12, 21]. <p> The minimal requirements of the underlying GCS appear in Section 2. The principal correctness requirements imposed by our service 1 are listed below. They are motivated by existing TO-GCS based applications <ref> [1, 8, 12] </ref>: * A logical timestamp is attached to every message delivered by TOGCS; * The same timestamp is attached to a message at every process that delivers that message.
Reference: [2] <author> AMIR, Y., MOSER, L. E., MELLIAR-SMITH, P. M., AGAR-WAL, D. A., AND CIARFELLA, P. </author> <title> The totem single-ring ordering and membership protocol. </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 13, </volume> <month> 4 (November </month> <year> 1995). </year>
Reference-contexts: Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. Isis [3], Horus [20], Totem <ref> [2, 16] </ref>, Transis [7], Amoeba [11], RMP [22], Delta-4 [17] are only some of the systems that support TO-GCS. fl This work was supported by ARPA grant number 030-7310 In this paper we present a novel total ordering algorithm for TO-GCS.
Reference: [3] <author> BIRMAN, K. P., SCHIPER, A., AND STEPHENSON, P. </author> <title> Lightweight Causal and Atomic Group Multicast. </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 9, </volume> <month> 3 </month> <year> (1991), </year> <month> 272314. </month>
Reference-contexts: Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. Isis <ref> [3] </ref>, Horus [20], Totem [2, 16], Transis [7], Amoeba [11], RMP [22], Delta-4 [17] are only some of the systems that support TO-GCS. fl This work was supported by ARPA grant number 030-7310 In this paper we present a novel total ordering algorithm for TO-GCS. <p> This results in high latency in message delivery when not all the participant processes are uniformly active. Total ordering protocols which are based upon this technique are called symmetric. Another approach implemented by sequencer <ref> [3, 4, 11, 22] </ref> or token [16] based protocols uses extra messages (ordering messages or token requests) and is therefore less efficient under high loads [19]. <p> With many existing group communication systems <ref> [3, 5, 11, 22] </ref> the following scenario is possible: Suppose that two processes disconnect from each other, while some common non-delivered messages remain in their buffers. If these messages' order has not yet been negotiated, they may either be delivered in an inconsistent order or be discarded.
Reference: [4] <author> CHANG, J. M., AND MAXEMCHUCK, N. </author> <title> Realiable Broadcast Protocols. </title> <journal> ACM Trans. Comput. Syst. </journal> <volume> 2, </volume> <month> 3 (August </month> <year> 1984), </year> <month> 251273. </month>
Reference-contexts: This results in high latency in message delivery when not all the participant processes are uniformly active. Total ordering protocols which are based upon this technique are called symmetric. Another approach implemented by sequencer <ref> [3, 4, 11, 22] </ref> or token [16] based protocols uses extra messages (ordering messages or token requests) and is therefore less efficient under high loads [19].
Reference: [5] <author> DOLEV, D., KRAMER, S., AND MALKI, D. </author> <title> Early Delivery Totally Ordered Broadcast in Asynchronous Environments. </title> <booktitle> In 23rd Annual International Symposium on Fault-Tolerant Computing (June 1993), </booktitle> <pages> pp. 544553. </pages>
Reference-contexts: The obvious limitation of the approach exemplified by these two protocols is that all the active (passive) processes are treated equally, while in practice it is rare that all of the active (passive) processes are uniformly active (passive). In the ToTo protocol of <ref> [5] </ref> messages are delayed until messages are received from a majority of group members. <p> With many existing group communication systems <ref> [3, 5, 11, 22] </ref> the following scenario is possible: Suppose that two processes disconnect from each other, while some common non-delivered messages remain in their buffers. If these messages' order has not yet been negotiated, they may either be delivered in an inconsistent order or be discarded.
Reference: [6] <author> DOLEV, D., AND MALKI, D. </author> <booktitle> The design of the transis system. In Theory and Practice in Distributed Systems: International Workshop (1995), </booktitle> <editor> K. P. Birman, F. Mattern, and A. Schipper, Eds., </editor> <publisher> Springer, </publisher> <pages> pp. </pages> <note> 8398. Lecture Notes in Computer Science 938. </note>
Reference-contexts: In the future we intend to analyze the performance of our protocol in more dynamic settings (see Section 7). 6.2.1 Performance Results Analysis In our experiments we compared the performance of ATOP with a non-adaptive symmetric total ordering protocol, All-Ack <ref> [6] </ref>, as well as with the Transis CMS. The Transis CMS guarantees only that the message delivery order satisfies the causal partial order on messages. Thus, in the Transis CMS, message order should not be agreed upon by all processes before delivery.
Reference: [7] <author> DOLEV, D., AND MALKI, D. </author> <title> The Transis Approach to High Availability Cluster Communication. </title> <journal> Communications of the ACM 39, </journal> <month> 4 (April </month> <year> 1996). </year>
Reference-contexts: Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. Isis [3], Horus [20], Totem [2, 16], Transis <ref> [7] </ref>, Amoeba [11], RMP [22], Delta-4 [17] are only some of the systems that support TO-GCS. fl This work was supported by ARPA grant number 030-7310 In this paper we present a novel total ordering algorithm for TO-GCS. <p> This is described in Section 6.1 below. The resulting protocol was implemented over the Causal Multicast Service (CMS) of the Transis GCS <ref> [7] </ref> which satisfies the VS layer correctness specifications presented in Section 2. 6.1 An Adaptation Policy Implementation In the adaptation policy we implemented, only the AP module at a single process deterministically chosen among the current view members, called a book-keeper, has the right to inject new distributions.
Reference: [8] <author> FEKETE, A., LYNCH, N., AND SHVARTSMAN, A. </author> <title> Specifying and Using a Partionable Group Communication Service. </title> <booktitle> In 16th Annual ACM Symposium on Principles of Distributed Computing (August 1997). </booktitle>
Reference-contexts: 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast <ref> [1, 8, 10, 14, 12] </ref>, consistent object replication [1, 12], distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast [1, 8, 10, 14, 12], consistent object replication [1, 12], distributed shared memory <ref> [8] </ref>, Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> Our algorithm is thus useful for such applications. Another important feature of our solution is that it provides well-defined message ordering semantics. These semantics are required by existing TO-GCS based applications <ref> [1, 8, 12] </ref> and are preserved in spite of both site and communication link failures. They were first formulated within the framework of the Extended Virtual Synchrony model [15] and elaborated in [8, 12, 21]. <p> These semantics are required by existing TO-GCS based applications [1, 8, 12] and are preserved in spite of both site and communication link failures. They were first formulated within the framework of the Extended Virtual Synchrony model [15] and elaborated in <ref> [8, 12, 21] </ref>. Further discussion of our algorithm's features appears in Section 1.2. 1.1 Problem Definition A group communication service (GCS) classically consists of two main parts: a membership service and a set of multicast services. <p> The minimal requirements of the underlying GCS appear in Section 2. The principal correctness requirements imposed by our service 1 are listed below. They are motivated by existing TO-GCS based applications <ref> [1, 8, 12] </ref>: * A logical timestamp is attached to every message delivered by TOGCS; * The same timestamp is attached to a message at every process that delivers that message. <p> Our service is similar to the partitionable group communication service specified by the VS-machine of <ref> [8] </ref>. However, there are a few distinctions: * Unlike [8], our service delivers application messages labeled with timestamps. <p> Our service is similar to the partitionable group communication service specified by the VS-machine of <ref> [8] </ref>. However, there are a few distinctions: * Unlike [8], our service delivers application messages labeled with timestamps. The use of timestamps is motivated by the fact that TO-GCS with timestamps is useful for various TO-GCS based applications, e.g., it is utilized by the Consistent Object Replication Layer described in [12]. * The VS-machine of [8] provides safe indications, whereas <p> few distinctions: * Unlike <ref> [8] </ref>, our service delivers application messages labeled with timestamps. The use of timestamps is motivated by the fact that TO-GCS with timestamps is useful for various TO-GCS based applications, e.g., it is utilized by the Consistent Object Replication Layer described in [12]. * The VS-machine of [8] provides safe indications, whereas TO-GCS does not. However, semantics similar to those achieved with safe indications can easily be achieved at the application level using end-to-end acknowledgments. <p> Since the liveness specification of the VS layer is out of the scope of this paper (the interested reader may refer to <ref> [8, 21] </ref>), we only require that for every process p, ATOP at p preserves the liveness semantics provided by the underlying VS layer. More precisely, we require the following: 1. Every application message sent through ATOP is eventually transferred to the underlying VS layer unless a crash occurs; 2. <p> For example: if, during the network stability periods, applications at all processes in the current stable component send infinite number of messages and the VS layer guarantees to deliver all messages sent through it (as required in <ref> [8] </ref>), then TOGCS also guarantees to deliver every application message. Note that the requirement that every process in the current view should issue an infinite number of messages may seem unrealistic. We require it only for the sole purpose of simplifying the protocol presentation.
Reference: [9] <author> FRIEDMAN, R., AND VAN RENESSE, R. </author> <title> Packing Messages as a Tool for Boosting the Perfomance of Total Ordering Protocols. </title> <type> TR 95-1527, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Moreover, these protocols exhibit sharp fluctuations in message delivery latency. This makes the message delivery latency incurred by such protocols much less predictable, causing problems for soft real-time applications. Our protocol is thus a solution for these problems. Some systems differentiate between only two process activity levels. For example, <ref> [9] </ref> addresses the adaptivity issues by classifying group members as active or passive according to whether they have any messages to send or not; the right to multicast messages is then evenly distributed among all currently active processes.
Reference: [10] <author> HADZILACOS, V., AND TOUEG, S. </author> <title> Fault-Tolerant Broadcasts and Related Problems. In chapter in: Distributed Systems, </title> <editor> S. Mullender, Ed. </editor> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast <ref> [1, 8, 10, 14, 12] </ref>, consistent object replication [1, 12], distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> Note that the above problem is weaker in several ways than the well-known Atomic Broadcast (AB) problem found in the literature <ref> [10] </ref>. In particular, we do not require that each message multicast by a correct process will eventually be delivered by all correct processes; nor do we require that each message delivered by a correct process will be eventually delivered by all correct processes.
Reference: [11] <author> KAASHOEK, M. F., AND TANENBAUM, A. S. </author> <title> An evaluation of the Amoeba group communication system. </title> <booktitle> In Proceedings of the 16th International Conference on Distributed Computing Systems (May 1996), </booktitle> <pages> pp. </pages> <month> 436447. </month> <title> 9 Message# Deli v ery Interv al 2500 1500 500 (a) The Post-Adaptation Delivery Rate of ATOP Message# Deli v ery Interv al 2500 1500 500 (b) The Delivery Rate of All-Ack Sender Receiver 26000 (a) ATOP After Adaptation Sender Receiver 7800520026000 (b) All-Ack </title>
Reference-contexts: Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. Isis [3], Horus [20], Totem [2, 16], Transis [7], Amoeba <ref> [11] </ref>, RMP [22], Delta-4 [17] are only some of the systems that support TO-GCS. fl This work was supported by ARPA grant number 030-7310 In this paper we present a novel total ordering algorithm for TO-GCS. <p> This results in high latency in message delivery when not all the participant processes are uniformly active. Total ordering protocols which are based upon this technique are called symmetric. Another approach implemented by sequencer <ref> [3, 4, 11, 22] </ref> or token [16] based protocols uses extra messages (ordering messages or token requests) and is therefore less efficient under high loads [19]. <p> With many existing group communication systems <ref> [3, 5, 11, 22] </ref> the following scenario is possible: Suppose that two processes disconnect from each other, while some common non-delivered messages remain in their buffers. If these messages' order has not yet been negotiated, they may either be delivered in an inconsistent order or be discarded.
Reference: [12] <author> KEIDAR, I., AND DOLEV, D. </author> <title> Efficient Message Ordering in Dynamic Networks. </title> <booktitle> In 15th Annual ACM Symposium on Principles of Distributed Computing (May 1996), </booktitle> <pages> pp. 6877. </pages>
Reference-contexts: 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast <ref> [1, 8, 10, 14, 12] </ref>, consistent object replication [1, 12], distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast [1, 8, 10, 14, 12], consistent object replication <ref> [1, 12] </ref>, distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> Our algorithm is thus useful for such applications. Another important feature of our solution is that it provides well-defined message ordering semantics. These semantics are required by existing TO-GCS based applications <ref> [1, 8, 12] </ref> and are preserved in spite of both site and communication link failures. They were first formulated within the framework of the Extended Virtual Synchrony model [15] and elaborated in [8, 12, 21]. <p> These semantics are required by existing TO-GCS based applications [1, 8, 12] and are preserved in spite of both site and communication link failures. They were first formulated within the framework of the Extended Virtual Synchrony model [15] and elaborated in <ref> [8, 12, 21] </ref>. Further discussion of our algorithm's features appears in Section 1.2. 1.1 Problem Definition A group communication service (GCS) classically consists of two main parts: a membership service and a set of multicast services. <p> The minimal requirements of the underlying GCS appear in Section 2. The principal correctness requirements imposed by our service 1 are listed below. They are motivated by existing TO-GCS based applications <ref> [1, 8, 12] </ref>: * A logical timestamp is attached to every message delivered by TOGCS; * The same timestamp is attached to a message at every process that delivers that message. <p> However, there are a few distinctions: * Unlike [8], our service delivers application messages labeled with timestamps. The use of timestamps is motivated by the fact that TO-GCS with timestamps is useful for various TO-GCS based applications, e.g., it is utilized by the Consistent Object Replication Layer described in <ref> [12] </ref>. * The VS-machine of [8] provides safe indications, whereas TO-GCS does not. However, semantics similar to those achieved with safe indications can easily be achieved at the application level using end-to-end acknowledgments. This technique was demonstrated in [12]. 1.2 Protocol Features In this section we consider the main features of <p> e.g., it is utilized by the Consistent Object Replication Layer described in <ref> [12] </ref>. * The VS-machine of [8] provides safe indications, whereas TO-GCS does not. However, semantics similar to those achieved with safe indications can easily be achieved at the application level using end-to-end acknowledgments. This technique was demonstrated in [12]. 1.2 Protocol Features In this section we consider the main features of our total ordering protocol and discuss related work. 1.2.1 Dynamic Adaptation Because a totally ordered multicast service is so useful, the efficiency of its implementation has become an important issue.
Reference: [13] <author> LAMPORT, L. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Comm. ACM 21, </journal> <volume> 7 (July 78), </volume> <pages> 558565. </pages>
Reference-contexts: This timestamp is unique system-wide and remains unique in face of network parti tions; * Every process delivers messages in the order of their times tamps; * The timestamp order complies with the global causal order on messages <ref> [13] </ref>, ; , defined to be the reflexive transitive closure of the following: 1. m ; m 0 if there exists a process p such that m was sent at p before m 0 ; 2. m ; m 0 if there exists a process p such that m 0 was
Reference: [14] <author> MALKI, D. </author> <title> Multicast Communication for High Avalaibility. </title> <type> PhD thesis, </type> <institution> Institute of Computer Science, The Hebrow University of Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction A group communication service with a totally ordered multicast primitive, Totally Ordered Group Communication Service (TO-GCS), is a powerful infrastructure for building distributed fault-tolerant applications. Some of these are totally ordered broadcast <ref> [1, 8, 10, 14, 12] </ref>, consistent object replication [1, 12], distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. <p> Some of these are totally ordered broadcast [1, 8, 10, 14, 12], consistent object replication [1, 12], distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications [18] and distributed monitoring and display applications <ref> [14] </ref>. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide.
Reference: [15] <author> MOSER, L. E., AMIR, Y., MELLIAR-SMITH, P. M., AND AGARWAL, D. A. </author> <title> Extended Virtual Synchrony. </title> <note> In Intl. Conference on Distributed Computing Systems (June 1994). Also available as technical report ECE93-22, </note> <institution> Department of Electrical and Computer Engineering, University of California, Santa Barbara, </institution> <address> CA. </address>
Reference-contexts: These semantics are required by existing TO-GCS based applications [1, 8, 12] and are preserved in spite of both site and communication link failures. They were first formulated within the framework of the Extended Virtual Synchrony model <ref> [15] </ref> and elaborated in [8, 12, 21]. Further discussion of our algorithm's features appears in Section 1.2. 1.1 Problem Definition A group communication service (GCS) classically consists of two main parts: a membership service and a set of multicast services.
Reference: [16] <author> MOSER, L. E., MELLIAR-SMITH, P. M., AGARWAL, D. A., BUDHIA, R. K., AND LINGLEY-PAPADOPOULOS, C. A. Totem: </author> <title> A Fault-Tolerant Multicast Group Communication System. </title> <journal> Communications of the ACM 39, </journal> <month> 4 (April </month> <year> 1996). </year>
Reference-contexts: Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. Isis [3], Horus [20], Totem <ref> [2, 16] </ref>, Transis [7], Amoeba [11], RMP [22], Delta-4 [17] are only some of the systems that support TO-GCS. fl This work was supported by ARPA grant number 030-7310 In this paper we present a novel total ordering algorithm for TO-GCS. <p> This results in high latency in message delivery when not all the participant processes are uniformly active. Total ordering protocols which are based upon this technique are called symmetric. Another approach implemented by sequencer [3, 4, 11, 22] or token <ref> [16] </ref> based protocols uses extra messages (ordering messages or token requests) and is therefore less efficient under high loads [19]. The protocol presented in this paper is dynamically adaptive: Messages are assigned a wide range of priorities which are adjusted on-the-fly to reflect ongoing changes in process activities. <p> If these messages' order has not yet been negotiated, they may either be delivered in an inconsistent order or be discarded. Either way, the service requirements are violated. Special care is needed to prevent such situations from occurring. Common practice <ref> [16] </ref> is to attach some ordering information to each newly multicast message. This information should be sufficient to allow each process to consistently order the message so that the need to communicate with other processes is eliminated.
Reference: [17] <author> POWELL, D. Delta-4: </author> <title> A Generic Architecture for Dependable Distributed Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. Isis [3], Horus [20], Totem [2, 16], Transis [7], Amoeba [11], RMP [22], Delta-4 <ref> [17] </ref> are only some of the systems that support TO-GCS. fl This work was supported by ARPA grant number 030-7310 In this paper we present a novel total ordering algorithm for TO-GCS.
Reference: [18] <author> RODDEN, T. </author> <title> A survey of CSCW systems. Interacting with Computers 3, </title> <booktitle> 3 (1991), </booktitle> <pages> 319353. </pages>
Reference-contexts: Some of these are totally ordered broadcast [1, 8, 10, 14, 12], consistent object replication [1, 12], distributed shared memory [8], Computer Supported Cooperative Work (CSCW) applications <ref> [18] </ref> and distributed monitoring and display applications [14]. Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide.
Reference: [19] <author> RODRIGUES, L. E. T., FONSECA, H., AND VERISSIMO, P. </author> <title> Totally ordered multicast in large-scale systems. </title> <booktitle> In Proceedings of the 16th International Conference on Distributed Computing Systems (May 1996), </booktitle> <pages> pp. 503510. </pages>
Reference-contexts: Total ordering protocols which are based upon this technique are called symmetric. Another approach implemented by sequencer [3, 4, 11, 22] or token [16] based protocols uses extra messages (ordering messages or token requests) and is therefore less efficient under high loads <ref> [19] </ref>. The protocol presented in this paper is dynamically adaptive: Messages are assigned a wide range of priorities which are adjusted on-the-fly to reflect ongoing changes in process activities. Messages are then delivered in order of priority. <p> For example, [9] addresses the adaptivity issues by classifying group members as active or passive according to whether they have any messages to send or not; the right to multicast messages is then evenly distributed among all currently active processes. In the Hybrid protocol of <ref> [19] </ref>, assignment of active or passive process status is based upon the relation between the process' transmission rate and the network delay: active processes run a symmetric protocol, while passive processes run a token-based one. Processes dynamically switch between active and passive states.
Reference: [20] <author> VAN RENESSE, R., BIRMAN, K. P., AND MAFFEIS, S. Ho-rus: </author> <title> A Flexible Group Communication System. </title> <journal> Communications of the ACM 39, </journal> <month> 4 (April </month> <year> 1996). </year>
Reference-contexts: Due to its importance for distributed computing, TO-GCS has inspired a great number of research projects in universities and research institutions world-wide. Isis [3], Horus <ref> [20] </ref>, Totem [2, 16], Transis [7], Amoeba [11], RMP [22], Delta-4 [17] are only some of the systems that support TO-GCS. fl This work was supported by ARPA grant number 030-7310 In this paper we present a novel total ordering algorithm for TO-GCS.
Reference: [21] <author> VITENBERG, R., KEIDAR, I., CHOCKLER, G. V., AND DOLEV, D. </author> <title> Group Communication System Specifications: </title>
Reference-contexts: These semantics are required by existing TO-GCS based applications [1, 8, 12] and are preserved in spite of both site and communication link failures. They were first formulated within the framework of the Extended Virtual Synchrony model [15] and elaborated in <ref> [8, 12, 21] </ref>. Further discussion of our algorithm's features appears in Section 1.2. 1.1 Problem Definition A group communication service (GCS) classically consists of two main parts: a membership service and a set of multicast services. <p> Since the liveness specification of the VS layer is out of the scope of this paper (the interested reader may refer to <ref> [8, 21] </ref>), we only require that for every process p, ATOP at p preserves the liveness semantics provided by the underlying VS layer. More precisely, we require the following: 1. Every application message sent through ATOP is eventually transferred to the underlying VS layer unless a crash occurs; 2.
References-found: 21

