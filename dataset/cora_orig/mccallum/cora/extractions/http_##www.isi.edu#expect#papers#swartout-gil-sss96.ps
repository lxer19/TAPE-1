URL: http://www.isi.edu/expect/papers/swartout-gil-sss96.ps
Refering-URL: http://www.isi.edu/expect/papers/papers-ka.html
Root-URL: 
Email: swartout@isi.edu, gil@isi.edu  
Title: Flexible Knowledge Acquisition Through Explicit Representation of Knowledge Roles  
Author: Bill Swartout Yolanda Gil 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: USC/Information Sciences Institute  
Abstract: A system that acquires knowledge from a user should be able to reflect upon the knowledge that it hasat each momentand understand what kinds of new knowledge it needs to learn. For the past two decades, research in the area of knowledge acquisition has been moving towards systems that have access to richer representations of knowledge about their task. This paper reviews some well-known knowledge acquisition tools representative of this trend. It also describes our recent work in EXPECT, a system with explicit representations of knowledge about the task and the domain that supports knowledge acquisition for a wider range of tasks and applications than its predecessors. We hope our observations will be useful to researchers in user interfaces and in machine learning concerned with acquiring information from users. 
Abstract-found: 1
Intro-found: 1
Reference: [Bennett 1985] <author> Bennett, J. S. ROGET: </author> <title> A knowledge-based system for acquiring the conceptual structure of a diagnostic expert system. </title> <booktitle> In Journal of Automated Reasoning , 1, </booktitle> <pages> pp. 49-74, </pages> <year> 1985. </year>
Reference-contexts: Such tools could then be used to build knowledge based systems that used that particular problem solving approach. Examples of such tools include MORE [Eshelman 1988], SALT [Marcus 1988], and ROGET <ref> [Bennett 1985] </ref>. Because these tools understood how knowledge would be used in problem solving, they could provide much more guidance in helping the user formulate the knowledge he was adding to a system correctly. SALT is a good example of a knowledge acquisition tool based on a role-limiting method.
Reference: [Buchanan and Shortliffe 1984] <author> Buchanan, B. and Shortliffe, E. </author> <title> "Rule-Based Expert Systems: The MYCIN Experiments of the Stanford Heuristic Programming Project, </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: Symbol-Level Approaches TEIREISIAS [Davis 1976] was one of the earliest knowledge acquisition systems. It was designed to help a user correct and extend MYCINs knowledge base <ref> [Buchanan and Shortliffe 1984] </ref> for diagnosing infections. If MYCIN either incorrectly concluded that a disease was present, or missed a correct diagnosis, TEIREISIAS would walk the user through the trace of rule firings to determine where the error arose.
Reference: [Chandrasekaran, 1986] <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge-based reasoning. </title> <booktitle> IEEE Expert , 1(3) </booktitle> <pages> 23-30, </pages> <year> 1986. </year>
Reference-contexts: A research goal during this stage was to try to understand a number of general methods used by knowledge based systems <ref> [Chandrasekaran, 1986] </ref>, such as propose-and-revise and heuristic classification, and then to construct a knowledge acquisition tool for a particular method. Such tools could then be used to build knowledge based systems that used that particular problem solving approach.
Reference: [Clancey 1985] <author> Clancey, </author> <title> W.J., </title> <journal> Heuristic classification Artificial Intelligence, </journal> <volume> 27(3) </volume> <pages> 289-350, </pages> <year> 1985. </year>
Reference-contexts: Indeed, work on TEIREISIAS predated Clanceys analysis of MYCIN that showed that it was following the general problem solving strategy that he identified as heuristic classification <ref> [Clancey 1985] </ref>. TEIREISIAS did not capture the distinctions between rules for data abstraction, heuristic match, and solution refinement that charaterize a heuristic classification system.
Reference: [Davis 1976] <author> Davis, R. </author> <title> Applications of metalevel knowledge to the construction, maintenance, and use of large knowledge bases, </title> <type> Phd Thesis, </type> <institution> Stanford University, </institution> <note> 1976 (also available as SAIL AIM-283. </note>
Reference-contexts: A result of this has been more flexible acquisition tools that allow users to make a greater variety of changes to the knowledge-based system being built. To make this more concrete, we will begin by briefly reviewing three well-known acquisition systems: TEIREISIAS <ref> [Davis 1976] </ref>, SALT [Marcus 1988], PROTG-II [Musen and Tu 1993]. We will then describe EXPECT, the acquisition framework we have been developing [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994]. Each of these four systems represents a point along the trend we outlined above. <p> We conclude with a discussion about how these systems make the knowledge structures they use for acquisition more or less explicit, and summarize the implications of these differences in terms of the kinds of knowledge acquisition they can support. Symbol-Level Approaches TEIREISIAS <ref> [Davis 1976] </ref> was one of the earliest knowledge acquisition systems. It was designed to help a user correct and extend MYCINs knowledge base [Buchanan and Shortliffe 1984] for diagnosing infections.
Reference: [Eshelman 1988] <author> Eshelman, L. MOLE: </author> <title> A knowledge-acquisition system for cover-and-differentiate systems. </title> <editor> In S. Marcus (Ed.), </editor> <title> Automating Knowledge Acquisition for Expert Systems , Kluwer Academic Publishers, </title> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Such tools could then be used to build knowledge based systems that used that particular problem solving approach. Examples of such tools include MORE <ref> [Eshelman 1988] </ref>, SALT [Marcus 1988], and ROGET [Bennett 1985]. Because these tools understood how knowledge would be used in problem solving, they could provide much more guidance in helping the user formulate the knowledge he was adding to a system correctly.
Reference: [Gil 1994] <author> Gil, Y. </author> <title> Knowledge Refinement in a Reflective Architecture. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI-94), </booktitle> <year> 1994. </year>
Reference-contexts: To make this more concrete, we will begin by briefly reviewing three well-known acquisition systems: TEIREISIAS [Davis 1976], SALT [Marcus 1988], PROTG-II [Musen and Tu 1993]. We will then describe EXPECT, the acquisition framework we have been developing <ref> [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994] </ref>. Each of these four systems represents a point along the trend we outlined above. <p> PROTG-II doesnt allow such changes because its methods are pre-configured and the mapping between method and domain ontologies is fixed at system design time. Since PROTG-IIs knowledge acquisition tool is derived from that mapping, it too is fixed at design time. The idea in EXPECT <ref> [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994] </ref> is to derive the interdependencies between domain knowledge and problem solving methods automatically, and to be able to rederive the dependencies as needed when changes are made to the problem solving knowledge.
Reference: [Gil and Paris 1994] <author> Gil, Y., and Paris, C.L. </author> <title> Towards Method-Independent Knowledge Acquisition. </title> <booktitle> In Knowledge Acquisition , 6 (2), </booktitle> <pages> pp. 163-178, </pages> <year> 1994. </year>
Reference-contexts: To make this more concrete, we will begin by briefly reviewing three well-known acquisition systems: TEIREISIAS [Davis 1976], SALT [Marcus 1988], PROTG-II [Musen and Tu 1993]. We will then describe EXPECT, the acquisition framework we have been developing <ref> [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994] </ref>. Each of these four systems represents a point along the trend we outlined above. <p> PROTG-II doesnt allow such changes because its methods are pre-configured and the mapping between method and domain ontologies is fixed at system design time. Since PROTG-IIs knowledge acquisition tool is derived from that mapping, it too is fixed at design time. The idea in EXPECT <ref> [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994] </ref> is to derive the interdependencies between domain knowledge and problem solving methods automatically, and to be able to rederive the dependencies as needed when changes are made to the problem solving knowledge.
Reference: [Klinker et al. 1991] <author> Klinker, G., Bhola, C., Dallemagne, G., Marques, D., and McDermott, J. </author> <title> Usable and reusable programming constructs, </title> <journal> Knowledge Acquisition, </journal> <volume> 3(2) </volume> <pages> 117-135. </pages> <year> 1991. </year>
Reference-contexts: New applications are built by composing the overall problemsolving strategy from the smaller components of the library. Examples of systems that take this approach are SBF <ref> [Klinker et al. 1991] </ref>, COMET [Steels 1990], and PROTG-II [Musen and Tu 1993]. PROTG-II guides acquisition based on fine-grained role-limiting methods. To build an application, a knowledge engineer configures the overall problem~solving method using the components in the method library.
Reference: [Marcus 1988] <author> Marcus, S. </author> <title> SALT: a knowledge-acquisition tool for propose-and-revise systems, </title> <booktitle> in Automating Knowledge-acquisition for expert systems S.Marcus (ed), </booktitle> <pages> pp. 81-121. </pages> <publisher> Kluwer Academic Publishing. </publisher> <year> 1988 </year>
Reference-contexts: A result of this has been more flexible acquisition tools that allow users to make a greater variety of changes to the knowledge-based system being built. To make this more concrete, we will begin by briefly reviewing three well-known acquisition systems: TEIREISIAS [Davis 1976], SALT <ref> [Marcus 1988] </ref>, PROTG-II [Musen and Tu 1993]. We will then describe EXPECT, the acquisition framework we have been developing [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994]. Each of these four systems represents a point along the trend we outlined above. <p> Such tools could then be used to build knowledge based systems that used that particular problem solving approach. Examples of such tools include MORE [Eshelman 1988], SALT <ref> [Marcus 1988] </ref>, and ROGET [Bennett 1985]. Because these tools understood how knowledge would be used in problem solving, they could provide much more guidance in helping the user formulate the knowledge he was adding to a system correctly.
Reference: [McDermott 1988] <author> McDermott, J, </author> <title> Preliminary steps toward a taxonomy of problem solving methods, in Automating Knowledge-acquisition for expert systems S.Marcus (ed), </title> <publisher> Kluwer Academic Publishing. </publisher> <year> 1988 </year>
Reference-contexts: Role Limiting Approaches The next generation of knowledge acquistion tools represents what is called a role-limiting approach. It was based on the observation that the kind of problem solving method that a system uses determines the kind of domain information the system needs <ref> [McDermott 1988] </ref>. Put another way, the role that a particular kind of knowledge plays in problem solving strongly constrains how that knowledge should be expressed what is required for the system to function.
Reference: [Musen 1992] <author> Musen, M. A. </author> <title> Overcoming the limitations of role-limiting methods, </title> <journal> Knowledge Acquisition, </journal> <volume> 4(2) </volume> <pages> 165-170. </pages> <year> 1992. </year>
Reference-contexts: That is, they do not use a single problemsolving method throughoutsome of the application can use one technique but different techniques are needed for other parts. As a result, an acquisition tool that only supports a single method has limited applicability <ref> [Musen 1992] </ref>. Composable Role-Limiting Methods Rather than embodying a single problem solving method, some knowledge acquisition environments contain a library of problem solving methods of smaller size. New applications are built by composing the overall problemsolving strategy from the smaller components of the library.
Reference: [Musen and Tu 1993] <author> Musen, M. A., and Tu, S. W. </author> <title> Problemsolving models for generation of taskspecific knowledge acquisition tools. </title> <editor> In J. Cuena (Ed.), </editor> <booktitle> Knowledge-Oriented Software Design , Elsevier, </booktitle> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: A result of this has been more flexible acquisition tools that allow users to make a greater variety of changes to the knowledge-based system being built. To make this more concrete, we will begin by briefly reviewing three well-known acquisition systems: TEIREISIAS [Davis 1976], SALT [Marcus 1988], PROTG-II <ref> [Musen and Tu 1993] </ref>. We will then describe EXPECT, the acquisition framework we have been developing [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994]. Each of these four systems represents a point along the trend we outlined above. <p> New applications are built by composing the overall problemsolving strategy from the smaller components of the library. Examples of systems that take this approach are SBF [Klinker et al. 1991], COMET [Steels 1990], and PROTG-II <ref> [Musen and Tu 1993] </ref>. PROTG-II guides acquisition based on fine-grained role-limiting methods. To build an application, a knowledge engineer configures the overall problem~solving method using the components in the method library.
Reference: [Newell 1982] <author> Newell, A. </author> <title> The knowledge level, </title> <booktitle> Artificial Intelligence , 18(1) </booktitle> <pages> 87-127. </pages> <year> 1982. </year>
Reference-contexts: This is useful, but a long way from actually understanding the role that the rule plays in problem solving. TEIREISIAS understood MYCIN at the symbol level <ref> [Newell 1982] </ref>. It understood rule patterns and why a particular rule fired or did not fire, but it did not have a global view of the overall algorithm that MYCIN was following.
Reference: [Rosenbloom 1988] <author> Rosenbloom, </author> <title> P.S., Beyond generalization as search: Towards a unified framework for the acquisition of new knowledge, in G.F. </title> <editor> DeJong (ed.) </editor> <booktitle> Proceedings of the AAAI Symposium on Explanation-Based Learning, </booktitle> <pages> pp. 17-21, </pages> <address> Stanford, CA. </address> <year> 1988. </year>
Reference-contexts: Introduction The acquisition of knowledge about a task can be viewed as a process of incorporating new knowledge into some existing knowledge structure <ref> [Rosenbloom 1988] </ref>. The existing knowledge can guide and constrain the search for new knowledge, and the process of integrating the new knowledge with the old may identify additional opportunities for learning.
Reference: [Swartout and Gil 1995] <author> Swartout, B. and Gil, Y. </author> <title> EXPECT: Explicit Representations for Flexible Acquisition in Proceedings of the Ninth Knowledge Acquisition for Knowledge-Based Systems Workshop (KAW95) Banff, </title> <address> Canada, </address> <month> February 26-March 3, </month> <year> 1995. </year>
Reference-contexts: To make this more concrete, we will begin by briefly reviewing three well-known acquisition systems: TEIREISIAS [Davis 1976], SALT [Marcus 1988], PROTG-II [Musen and Tu 1993]. We will then describe EXPECT, the acquisition framework we have been developing <ref> [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994] </ref>. Each of these four systems represents a point along the trend we outlined above. <p> PROTG-II doesnt allow such changes because its methods are pre-configured and the mapping between method and domain ontologies is fixed at system design time. Since PROTG-IIs knowledge acquisition tool is derived from that mapping, it too is fixed at design time. The idea in EXPECT <ref> [Swartout and Gil 1995, Gil 1994, Gil and Paris 1994] </ref> is to derive the interdependencies between domain knowledge and problem solving methods automatically, and to be able to rederive the dependencies as needed when changes are made to the problem solving knowledge. <p> Each method also has a body, which is a step or sequence of steps for achieving the methods capability. EXPECTs method language supports conditionals, sequences of steps and embedded steps in method bodies. The automatic method instantiator uses partial evaluation and reformulation (see <ref> [Swartout and Gil 1995] </ref>) to derive the interdependencies between the problem solving methods and domain knowledge that are needed to guide knowledge acquisition. The method instantiator starts with a high level goal that specifies a class of problems for which one would like to create a system.
References-found: 16

