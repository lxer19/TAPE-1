URL: http://dimacs.rutgers.edu/techps/1993/93-57.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1993.html
Root-URL: http://www.cs.rutgers.edu
Title: Finding a Shortest Diagonal of a Simple Polygon in Linear Time  
Author: John Hershberger Subhash Suri 
Date: August 16, 1993  
Address: 130 Lytton Avenue, Palo Alto, California 94301  445 South Street, Morristown, New Jersey 07960  
Affiliation: DEC/SRC  Bellcore  
Abstract: A diagonal of a planar, simple polygon P is an open line segment that connects two non-adjacent vertices and lies in the relative interior of P . We present a linear time algorithm for finding a shortest diagonal (in the L 2 norm) of a simple polygon, improving the previous best result by a factor of log n. Our result provides an interesting contrast to a known (n log n) lower bound for finding a closest pair of vertices in a simple polygon|observe that a shortest diagonal is defined by a closest pair of vertices satisfying an additional visibility constraint. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, H. Edelsbrunner, P. Raghavan, and P. Tiwari. </author> <title> Optimal time bounds for some proximity problems in the plane. </title> <journal> Information Processing Letters, </journal> <volume> 42 </volume> <pages> 55-60, </pages> <year> 1992. </year>
Reference-contexts: The lower bound holds even if the points form the vertices of a simple polygon, given in the boundary order <ref> [1] </ref>. A variant of the closest pair problem that has received some interest recently is the shortest diagonal problem. A diagonal of a simple polygon is a line segment joining two non-adjacent vertices that are mutually visible inside the polygon, and a shortest diagonal is a diagonal of minimum length. <p> Thus, a shortest diagonal of a polygon is defined by a closest pair among its vertices satisfying the additional constraint that the vertices be visible. Despite the close similarity between the two problems, the lower bound of <ref> [1] </ref> does not apply to the shortest diagonal problem. The previous best result for computing a shortest diagonal was an O (n log n) time algorithm, based on a Voronoi diagram [5].
Reference: [2] <author> B. Chazelle. </author> <title> Triangulating a simple polygon in linear time. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 6 </volume> <pages> 485-524, </pages> <year> 1991. </year>
Reference-contexts: A linear-time preprocessing of the polygon allows us to do this step in constant time. The preprocessing step computes a shortest path tree of P , rooted at an arbitrary vertex x, and records parent (u) for each vertex u in the tree <ref> [2, 3] </ref>. Now consider an arbitrary 2-neighbor pair (u; v), and let w denote the common neighbor of u and v.
Reference: [3] <author> L. Guibas, J. Hershberger, D. Leven, M. Sharir, and R. Tarjan. </author> <title> Linear time algorithms for visibility and shortest path problems inside triangulated simple polygons. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 209-233, </pages> <year> 1987. </year>
Reference-contexts: A linear-time preprocessing of the polygon allows us to do this step in constant time. The preprocessing step computes a shortest path tree of P , rooted at an arbitrary vertex x, and records parent (u) for each vertex u in the tree <ref> [2, 3] </ref>. Now consider an arbitrary 2-neighbor pair (u; v), and let w denote the common neighbor of u and v.
Reference: [4] <author> J. Hershberger and S. Suri. </author> <title> Matrix searching with the shortest path metric. </title> <booktitle> In Proceedings of the Twenty Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 485-494, </pages> <year> 1993. </year>
Reference-contexts: To solve this last problem, we apply a result from our paper on matrix searching with the shortest path metric <ref> [4] </ref>. The paper is organized in five sections.
Reference: [5] <author> A. Lingas. </author> <title> Voronoi diagrams with barriers and the shortest diagonal problem. </title> <journal> Information Processing Letters, </journal> <volume> 32(4) </volume> <pages> 191-198, </pages> <year> 1989. </year>
Reference-contexts: Despite the close similarity between the two problems, the lower bound of [1] does not apply to the shortest diagonal problem. The previous best result for computing a shortest diagonal was an O (n log n) time algorithm, based on a Voronoi diagram <ref> [5] </ref>. For the special case of a monotone polygon, Zhu [10] was able to get a linear-time algorithm; however, it remained an open question to determine the time complexity of the general problem [6].
Reference: [6] <author> J. O'Rourke. </author> <title> Computational geometry column 8. </title> <journal> SIGACT News, </journal> <volume> 20(4):30, </volume> <year> 1989. </year>
Reference-contexts: For the special case of a monotone polygon, Zhu [10] was able to get a linear-time algorithm; however, it remained an open question to determine the time complexity of the general problem <ref> [6] </ref>. In this paper, we settle this question by presenting a linear-time algorithm for computing a shortest diagonal of a simple polygon. A brief sketch of our algorithm is as follows. We partition the polygon into connected, monotone regions each satisfying a property we call conformity.
Reference: [7] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: It is well-known, for instance, that a closest pair among n points in the plane can be found in O (n log n) time, and that this bound is tight in the worst case in the algebraic-tree model of computation <ref> [7] </ref>. The lower bound holds even if the points form the vertices of a simple polygon, given in the boundary order [1]. A variant of the closest pair problem that has received some interest recently is the shortest diagonal problem.
Reference: [8] <author> S. Suri. </author> <title> Minimum Link Paths in Polygons and Related Problems. </title> <type> PhD thesis, </type> <institution> The Johns Hopkins University, </institution> <year> 1987. </year>
Reference-contexts: The only ingredient missing from the description of our algorithm is the construction of a conforming partition, which we now address. 5 Computing a conforming partition Our partition is closely related to window partition, a concept useful in link distance problems <ref> [8, 9] </ref>, except that we restrict the directions of visibility to horizontal and vertical. We use the common term orthogonal visibility to denote horizontal or vertical visibility, as the case may be.
Reference: [9] <author> S. Suri. </author> <title> On some link distance problems in a simple polygon. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 6 </volume> <pages> 108-113, </pages> <year> 1990. </year>
Reference-contexts: The only ingredient missing from the description of our algorithm is the construction of a conforming partition, which we now address. 5 Computing a conforming partition Our partition is closely related to window partition, a concept useful in link distance problems <ref> [8, 9] </ref>, except that we restrict the directions of visibility to horizontal and vertical. We use the common term orthogonal visibility to denote horizontal or vertical visibility, as the case may be.
Reference: [10] <author> B. Zhu. </author> <title> Computing the shortest diagonal of a monotone polygon in linear time. </title> <journal> Information Processing Letters, </journal> <volume> 42 </volume> <pages> 303-307, </pages> <year> 1992. </year> <month> 12 </month>
Reference-contexts: The previous best result for computing a shortest diagonal was an O (n log n) time algorithm, based on a Voronoi diagram [5]. For the special case of a monotone polygon, Zhu <ref> [10] </ref> was able to get a linear-time algorithm; however, it remained an open question to determine the time complexity of the general problem [6]. In this paper, we settle this question by presenting a linear-time algorithm for computing a shortest diagonal of a simple polygon. <p> We partition the polygon into connected, monotone regions each satisfying a property we call conformity. The partition is hierarchical, and modeled by a rooted tree, called a partition tree. The shortest diagonal within each monotone region is computed using the linear-time algorithm of Zhu <ref> [10] </ref>. The more complex step involves computing diagonal distances between vertices lying in different regions. Our key lemma shows that the regions containing endpoints of a shortest diagonal cannot be far apart in the partition tree. <p> Each region of (v) is a monotone polygon, and its shortest diagonal can be computed in time proportional to its size using a linear-time algorithm of Zhu <ref> [10] </ref>. Lemma 4.1 ([10]) Given a monotone polygon P on n vertices, a shortest diagonal of P can be computed in O (n) time. Remark: A region in our partition also has artificial vertices, the endpoints of windows, which should be excluded from the shortest diagonal computation. <p> This completes the proof. 2 By Lemma 4.4, the total size of all the subproblems created during the algorithm DIAGONAL is O (n). Each subproblem is solved in time proportional to its size; Step 4 uses the linear-time algorithm of Zhu <ref> [10] </ref> to compute a shortest diagonal in a monotone region; Step 6 uses the linear-time algorithm of Lemma 4.3 to compute a shortest diagonal between two disjoint chains.
References-found: 10

