URL: ftp://ftp.cs.monash.edu.au/pub/annn/acse97.ps
Refering-URL: http://www.cs.monash.edu.au/~annn/cv/pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail annn@cs.monash.edu.au  E-mail kym.fraser@adm.monash.edu.au  
Title: Methodologies for teaching new programming languages: A case study teaching LISP.  
Author: A. E. Nicholson K. M. Fraser 
Address: Clayton, Victoria, 3168  Clayton, Victoria, 3168  
Affiliation: Department of Computer Science Monash University  Centre for Higher Education and Development Monash University  
Abstract: A primary aim of computing degrees is to produce graduates with general programming skills, the ability to program in several programming languages, and the ability to learn new programming languages. In this paper, two approaches to teaching a programming language are identified: "start small", where students begin writing small pieces of code from scratch; and "code-provided", where students are given existing code to modify and extend. Each approach has been used for teaching introductory programming, and for teaching subsequent additional programming languages. This paper reports on a case study involving the teaching of LISP programming. The class was divided into two groups and given different assignments, in accordance with the two approaches, for their first two assignments. A common third assignment, and a LISP programming question on the exam, were used to compare the impact of the assignment-based teaching methodology on student programming skills in the new programming language. The teaching methodology was found to have no significant effect on student programming outcomes, with performance in a core prerequisite programming subject being the only predictor. In addition to the presentation of the details of the study and the results, comments from student surveys, and ethical and logistical issues in undertaking such a study, are presented and discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> ACM. </editor> <booktitle> Computing Curricula 1991: Report of the ACM/IEEE-CS Joint Curriculum Task Force, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction Computing degrees aim to prepare students for entry into the computing profession <ref> [1, p.7] </ref>. A critical component of many jobs in the computing profession is proficiency in programming which is defined as "the entire collection of activities that surround the description, development, and effective implementation of algorithmic solutions to well-specified problems" [1, p.16]. <p> A critical component of many jobs in the computing profession is proficiency in programming which is defined as "the entire collection of activities that surround the description, development, and effective implementation of algorithmic solutions to well-specified problems" <ref> [1, p.16] </ref>. Programming occurs in all subject areas in the discipline of computing [1, p.17]. While there are literally hundreds of programming languages, at any given time several programming languages will dominate in the commercial environment, with the particular languages changing over time. <p> Programming occurs in all subject areas in the discipline of computing <ref> [1, p.17] </ref>. While there are literally hundreds of programming languages, at any given time several programming languages will dominate in the commercial environment, with the particular languages changing over time.
Reference: [2] <author> T. Dean, J. Allen and Y. </author> <title> Aloimondos. </title> <journal> Artificial Intelligence: Theory and Practice. </journal> <volume> Ben-jamin/Cummings, </volume> <year> 1995. </year>
Reference-contexts: deferred exam); * students who changed from one group to another during the course of the semester (Univer sity ethics required they be given this option); 9 The A* search algorithm, for a sliding tiles problem as described in [6]. 10 LISP code for tree structures and search provided with <ref> [2] </ref>. * the one student who explicitly said he did not want to be included in the study; * students who were identified as cheating on the final assignment 11 .
Reference: [3] <author> H. M. Deitel and P. J. Deitel. </author> <title> C: How to Program. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: This approach has been used to teach students to program since at least the early 1980s and is still used today, as evidenced by programming text books <ref> [5, 3] </ref>. The approach is used to teach both first and subsequent programming languages. One of the limitations of this approach is that students do not work with more complex, sophisticated examples of the code and as a result, students often produce "working" code that is poorly structured or unsophisticated.
Reference: [4] <author> P. </author> <title> East. Opinion. </title> <journal> Journal of Computer Science Education, </journal> <volume> Volume 8, Number 4, </volume> <pages> pages 5, </pages> <year> 1996. </year>
Reference-contexts: reports on the impact on student programming skills of two different approaches used to set assignments. 3 This falls more into the realm of software engineering than in a subject teaching fluency in a programming language. 4 This may be in supervised class situation or on their own. 5 East <ref> [4] </ref> believes that "students may not develop into good programmers unless they see good programs" and that it is the responsibility of teachers to ensure that this occurs, however he does not explicitly distinguish between presenting such examples in lectures, or in the actual programming environment. 2.2 The traditional, "start-small", ap
Reference: [5] <author> E. B. Koffman. </author> <title> Problem Solving and Structured Programming in Pascal. </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: This approach has been used to teach students to program since at least the early 1980s and is still used today, as evidenced by programming text books <ref> [5, 3] </ref>. The approach is used to teach both first and subsequent programming languages. One of the limitations of this approach is that students do not work with more complex, sophisticated examples of the code and as a result, students often produce "working" code that is poorly structured or unsophisticated.
Reference: [6] <author> N. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publishing Co., </publisher> <year> 1980. </year>
Reference-contexts: the course although still enrolled, or under special consideration had a deferred exam); * students who changed from one group to another during the course of the semester (Univer sity ethics required they be given this option); 9 The A* search algorithm, for a sliding tiles problem as described in <ref> [6] </ref>. 10 LISP code for tree structures and search provided with [2]. * the one student who explicitly said he did not want to be included in the study; * students who were identified as cheating on the final assignment 11 .
Reference: [7] <author> S. Russell and P. </author> <title> Norvig. </title> <journal> Artificial Intelligence: </journal>
Reference-contexts: They were required to implement an Artificial Intelligence algorithm presented in the lecture, the alpha-beta game playing algorithm for tic-tac-toe. Experimental group students were provided with working functions which contained some internal doc umentation for the problem of simulating a vacuum cleaning agent <ref> [7] </ref>. Students were asked to run each function. They were required to add functions to the existing code in order to achieve extra functionality (different types of agents). The amount of code provided, in terms of numbers of lines, is given in Table 1.
References-found: 7

