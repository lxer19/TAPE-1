URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1184/CS-TR-93-1184.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1184/
Root-URL: http://www.cs.wisc.edu
Title: Indexing Alternatives for Multiversion Locking  
Author: Paul M. Bober and Michael J. Carey 
Address: Wisconsin, Madison Wisconsin 53706, USA  
Affiliation: Computer Sciences Department, University of  
Abstract: Multiversion two-phase locking (MV2PL) provides on-line serializable queries without introducing the long blocking delays that can occur with conventional two-phase locking (2PL). MV2PL requires indexing structures, however, that are capable of supporting multiple versions of data. In this paper, we present several options for extending single-version indexing schemes for use with MV2PL. These basic approaches are largely orthogonal to the underlying indexing structure (e.g., hashing or B+ trees). The options considered differ in where they place version selection information (i.e., references to individual versions); this information is placed either with the data or with the index entries of one or more of the indices. We also present the results from a performance study that show that placing the version selection information with the data is usually the best option, since it keeps the indices smaller and thus enables a larger fraction of the index pages to remain cached in the buffer pool.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Agrawal, D., A. Bernstein, P. Gupta and S. Sengupta, </author> <title> "Distributed Multiversion Optimistic Concurrency Control with Reduced Rollback," </title> <journal> Journal of Distributed Computing, Springer-Verlag, </journal> <volume> 2(1), </volume> <month> January </month> <year> 1987. </year>
Reference: 2. <author> Agrawal, D. and S. Sengupta, </author> <title> "Modular Synchronization in Multiversion Databases: Version Control and Concurrency Control," </title> <booktitle> Proc. 1989 SIGMOD Conference, </booktitle> <year> 1989. </year>
Reference-contexts: Several 2PL-based algorithms that retain at most two versions of data in order to reduce blocking due to read/write conflicts have also been proposed [5, 27]. Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation [25, 9, 19] multiversion timestamp 3 ordering <ref> [2] </ref>, and the multiversion tree protocol [26].
Reference: 3. <author> Bayer, R. and M. Schkolnick, </author> <title> "Concurrency of Operations on B-trees," </title> <journal> Acta Informatica, </journal> <month> September </month> <year> 1977. </year>
Reference-contexts: While this approach supports index-only plans, it is not compatible with the use of high performance non-2PL B+ tree concurrency control algorithms such as those proposed in <ref> [3, 21, 22] </ref>. Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include [13, 28, 18, 20, 22].
Reference: 4. <author> Bayer, R. and E. M. McCreight, </author> <title> "Organization and Maintenance of Large Ordered Indicies," </title> <journal> Acta Informatica, </journal> <volume> Volume 1, Number 3, </volume> <year> 1972. </year>
Reference-contexts: We describe the approaches here as they would work with the on-page caching method for storing prior versions (as described in Section 2) and the B+ tree indexing method <ref> [4] </ref>. We used several criterion to select the schemes that we will be considering here. First, to be practical, we decided that the schemes should involve only relatively simple changes to proven indexing methods (i.e., we didn't want to consider something so foreign that nobody would want to implement it).
Reference: 5. <author> Bayer, et al., </author> <title> "Parallelism and Recovery in Database Systems," </title> <journal> ACM Trans. on Database Sys., </journal> <volume> 5(2), </volume> <month> June </month> <year> 1980. </year>
Reference-contexts: To the best of our knowledge, Reed's distributed times-tamp ordering scheme [Reed83] was actually the first multiversion concurrency control algorithm proposal. Several 2PL-based algorithms that retain at most two versions of data in order to reduce blocking due to read/write conflicts have also been proposed <ref> [5, 27] </ref>. Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation [25, 9, 19] multiversion timestamp 3 ordering [2], and the multiversion tree protocol [26].
Reference: 6. <author> Bober, P. and M. Carey, </author> <title> "On Mixing Queries and Transactions via Multiversion Locking," </title> <booktitle> Proc. of the Eighth IEEE Data Engineering Conf., </booktitle> <year> 1992. </year> <month> 29 </month>
Reference-contexts: As a result, queries may begin to thrash if they are sufficiently large <ref> [6] </ref>. The on-page version caching refinement discussed next was designed to alleviate these problems. 2.3 On-Page Version Caching In [6], we presented and studied a record-level refinement to the CCA version pool scheme in which versions are maintained on records (as opposed to pages) and a small portion of each main <p> As a result, queries may begin to thrash if they are sufficiently large <ref> [6] </ref>. The on-page version caching refinement discussed next was designed to alleviate these problems. 2.3 On-Page Version Caching In [6], we presented and studied a record-level refinement to the CCA version pool scheme in which versions are maintained on records (as opposed to pages) and a small portion of each main segment (i.e., data) page is reserved for caching prior versions. <p> Because of the added positional clustering, the write-all policy was shown to be able to complete queries at a faster rate than write-one <ref> [6] </ref>. Despite having to replicate some prior versions under write-all, the more rapid completion of queries under this policy was also shown in many cases to lead to a significantly lower overall storage cost than under write-one; in other cases, the storage cost was not appreciably higher. <p> Since such update operations dirty the data page anyway, on-page garbage collection is essentially free. For further details about version garbage collection and other aspects of on-page caching, the reader is referred to <ref> [6] </ref>. 3 MULTIVERSION INDEXING APPROACHES In this section, we discuss options for extending single-version indexing schemes to handle multiversion data. We outline four different approaches here and discuss their performance tradeoffs.
Reference: 7. <author> Bober, P. and M. Carey, </author> <title> "Multiversion Query Locking," </title> <booktitle> Proc. of the Eighteenth International Conference on Very Large Databases, </booktitle> <year> 1992. </year>
Reference-contexts: In this paper, we compare a range of possible multiversion indexing approaches that are designed specifically for use with MV2PL. This paper is an extension of our previous work, where we proposed and studied the on-page caching scheme for placing transient multiversion data on secondary storage <ref> [7] </ref>; that scheme in turn is a refinement of CCA's version pool scheme [10]. Each of the multiversion indexing approaches that we study in this paper are integrated with on-page caching to present a complete version placement and indexing solution for MV2PL. <p> Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation [25, 9, 19] multiversion timestamp 3 ordering [2], and the multiversion tree protocol [26]. Finally, in <ref> [7] </ref>, we presented a generalization of MV2PL that provides queries with a tradeoff between consistency and performance. 2.1 Multiversion Two-Phase Locking (MV2PL) In MV2PL, each transaction T is assigned a startup timestamp, T S (T ), when it begins to run, and a commit timestamp, T C (T ), when it
Reference: 8. <author> Bober, P. and M. Carey, </author> <title> Indexing Alternatives for Multiversion Locking, </title> <type> Tech. Report #1184, </type> <institution> University of Wisconsin|Madison, </institution> <month> November </month> <year> 1993. </year>
Reference: 9. <author> Carey, M. J., </author> <title> Modeling and Evaluation of Database Concurrency Control Algorithms, </title> <type> Ph.D. Thesis, </type> <institution> Comp. Sci., U. of California, Berkeley, </institution> <year> 1983. </year>
Reference-contexts: Several 2PL-based algorithms that retain at most two versions of data in order to reduce blocking due to read/write conflicts have also been proposed [5, 27]. Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation <ref> [25, 9, 19] </ref> multiversion timestamp 3 ordering [2], and the multiversion tree protocol [26].
Reference: 10. <author> Chan, A., S. Fox, W. Lin, A. Nori, and Ries, D., </author> <title> "The Implementation of an Integrated Concurrency Control and Recovery Scheme," </title> <booktitle> Proc. 1982 ACM SIGMOD Conf., </booktitle> <year> 1982. </year>
Reference-contexts: To solve this data contention problem while providing consistent answers to queries, a multiversion extension to two-phase locking was proposed and implemented in a system developed at Prime in the early 1980s [12]. This extension was also used in a system developed at Computer Corporation of America (CCA) <ref> [10, 11] </ref>, and it has subsequently been incorporated in DEC's Rdb product [23]. <p> This paper is an extension of our previous work, where we proposed and studied the on-page caching scheme for placing transient multiversion data on secondary storage [7]; that scheme in turn is a refinement of CCA's version pool scheme <ref> [10] </ref>. Each of the multiversion indexing approaches that we study in this paper are integrated with on-page caching to present a complete version placement and indexing solution for MV2PL. <p> current version 4 MV2PL utilized page-level locking in its original form. 5 Actually, to reduce commit-time processing in the absence of a no-steal buffer management policy, the page is stamped with the creator's transaction id and a separately maintained list is used to map from transaction ids to commit timestamps <ref> [10] </ref>. 4 of every page in the database, and the version pool contains prior versions of pages. The version pool is organized as a circular buffer, much like the log in a traditional recovery manager [15]. <p> that primary key values cannot be updated. 3.1 Chaining (CH) In the Chaining (CH) versioning selection scheme, each index leaf entry simply references the most recent version of a tuple; the remainder of the versions are chained behind the current version in reverse chronological order, as in the CCA scheme <ref> [10] </ref>. The organization of data pages (with on-page caching) and the version pool was discussed in the previous section. As described earlier, each version of a tuple has a create timestamp (CTS) which is the commit timestamp of the transaction that wrote the version.
Reference: 11. <author> Chan, A., and R. Gray, </author> <title> "Implementing Distributed Read-Only Transactions," </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> SE-11(2), </volume> <month> Feb </month> <year> 1985. </year>
Reference-contexts: To solve this data contention problem while providing consistent answers to queries, a multiversion extension to two-phase locking was proposed and implemented in a system developed at Prime in the early 1980s [12]. This extension was also used in a system developed at Computer Corporation of America (CCA) <ref> [10, 11] </ref>, and it has subsequently been incorporated in DEC's Rdb product [23].
Reference: 12. <author> DuBourdieu, D., </author> <title> "Implementation of Distributed Transactions," </title> <booktitle> Proc. 6th Berkeley Workshop on Distributed Data Management and Computer Networks, </booktitle> <year> 1982. </year>
Reference-contexts: These approaches are referred to as GO processing and cursor stability locking, respectively. To solve this data contention problem while providing consistent answers to queries, a multiversion extension to two-phase locking was proposed and implemented in a system developed at Prime in the early 1980s <ref> [12] </ref>. This extension was also used in a system developed at Computer Corporation of America (CCA) [10, 11], and it has subsequently been incorporated in DEC's Rdb product [23].
Reference: 13. <author> Easton, M., </author> <title> "Key-Sequence Data Sets on Indelible Storage," </title> <journal> IBM Journal of Research and Development, </journal> <month> May </month> <year> 1986. </year>
Reference-contexts: Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include <ref> [13, 28, 18, 20, 22] </ref>. With the exception of [22], however, all of these proposed indexing schemes are designed to support historical databases, where out-of-date versions are retained for an arbitrary length of time.
Reference: 14. <author> Eswaran, K., J. Gray, R. Lorie, I. Traiger, </author> <title> "The Notions of Consistency and Predicate Locks in a Database System," </title> <journal> CACM 19(11), </journal> <year> 1976. </year>
Reference-contexts: 1 INTRODUCTION Due to the adoption of relational database technology and the increasing ability of database systems to efficiently execute ad-hoc queries, query processing is becoming an increasingly important function of transaction processing systems. The concurrency control algorithm found in most commercial database systems, two-phase locking (2PL) <ref> [14] </ref>, however, does not efficiently support on-line query processing. This is because 2PL causes queries to lock large regions of data for long periods of time, thus causing update transactions to suffer long delays.
Reference: 15. <author> Gray, J., </author> <title> "Notes on Database Operating Systems," in Operating Systems: An Advanced Course, </title> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: The version pool is organized as a circular buffer, much like the log in a traditional recovery manager <ref> [15] </ref>. The CCA design chains the versions in reverse chronological order; in Section 3, we discuss other ways of organizing sets of versions.
Reference: 16. <author> Haas, L., </author> <title> "Starburst Mid-Flight: As the Dust Clears," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: We further assume that the optional compression of TID fields described at the end of Section 3.1 is carried out whenever an index page overflows. The last component of the system model, the buffer manager, encapsulates the details of an LRU buffer manager with "LOVE/HATE" hints (a la Starburst <ref> [16] </ref>). The number of page frames in the buffer pool is specified as N umBuff ers, and the frames are shared among data, index, and version pool pages.
Reference: 17. <author> Joshi, Ashok, </author> <type> Personal Communication. </type>
Reference-contexts: One approach, taken in DEC's Rdb system, is to treat index nodes like data records at the storage level, including having MV2PL applied to them <ref> [17] </ref>. While this approach supports index-only plans, it is not compatible with the use of high performance non-2PL B+ tree concurrency control algorithms such as those proposed in [3, 21, 22]. <p> because a query must read successively older versions (relative to the current database) as it ages, the number of version pool I/O operations that 6 In contrast, DEC's Rdb system stores old versions of records on "shadow" pages which must be first read and then written whenever an update occurs <ref> [17] </ref>. 5 it must make to read a given page increases with time. As a result, queries may begin to thrash if they are sufficiently large [6].
Reference: 18. <author> Kolovson, C. and M. Stonebraker, </author> <title> "Indexing Techniques for Multiversion Databases," </title> <booktitle> Proc. of the Fifth IEEE Int'l Conf. on Data Engineering, </booktitle> <year> 1989. </year>
Reference-contexts: Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include <ref> [13, 28, 18, 20, 22] </ref>. With the exception of [22], however, all of these proposed indexing schemes are designed to support historical databases, where out-of-date versions are retained for an arbitrary length of time.
Reference: 19. <author> Lai, M. and K. Wilkinson, </author> <title> "Distributed Transaction Management in Jasmin," </title> <booktitle> Proc. of 10th International Conference on Very Large Database Systems, </booktitle> <year> 1984. </year>
Reference-contexts: Several 2PL-based algorithms that retain at most two versions of data in order to reduce blocking due to read/write conflicts have also been proposed [5, 27]. Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation <ref> [25, 9, 19] </ref> multiversion timestamp 3 ordering [2], and the multiversion tree protocol [26].
Reference: 20. <author> Lomet, D. and B. Salzberg, </author> <title> "Access Methods for Multiversion Data," </title> <booktitle> Proc. 1989 ACM SIGMOD Conf., </booktitle> <year> 1989. </year>
Reference-contexts: Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include <ref> [13, 28, 18, 20, 22] </ref>. With the exception of [22], however, all of these proposed indexing schemes are designed to support historical databases, where out-of-date versions are retained for an arbitrary length of time.
Reference: 21. <author> Lehman, P. and S. Yao, </author> <title> "Efficient Locking for Concurrent Operations on B-trees," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(4), </volume> <month> December </month> <year> 1981. </year>
Reference-contexts: While this approach supports index-only plans, it is not compatible with the use of high performance non-2PL B+ tree concurrency control algorithms such as those proposed in <ref> [3, 21, 22] </ref>. Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include [13, 28, 18, 20, 22].
Reference: 22. <author> Mohan, C., H. Pirahesh, and R. Lorie, </author> <title> "Efficient and Flexible Methods for Transient Versioning of Records to Avoid Locking by Read-Only Transactions," </title> <booktitle> Proc. 1992 ACM SIGMOD Conf., </booktitle> <year> 1992. </year>
Reference-contexts: This form of versioning, where old copies of data are retained temporarily for concurrency control purposes (as opposed to long-term retention for historical queries), has been referred to as transient versioning <ref> [22] </ref>. Since indexes are important for good performance in database systems, it is important to to determine how they may coexist with MV2PL. <p> While this approach supports index-only plans, it is not compatible with the use of high performance non-2PL B+ tree concurrency control algorithms such as those proposed in <ref> [3, 21, 22] </ref>. Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include [13, 28, 18, 20, 22]. <p> Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include <ref> [13, 28, 18, 20, 22] </ref>. With the exception of [22], however, all of these proposed indexing schemes are designed to support historical databases, where out-of-date versions are retained for an arbitrary length of time. <p> Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include [13, 28, 18, 20, 22]. With the exception of <ref> [22] </ref>, however, all of these proposed indexing schemes are designed to support historical databases, where out-of-date versions are retained for an arbitrary length of time. <p> It is similar 9 to the scheme presented in <ref> [22] </ref>, which is the only previously published indexing scheme for multiversion locking that we are aware of. only one entry in the primary index because primary index keys cannot be changed. 8 For versions that are replicated under the write-all cache write policy, this scheme would list replicated versions in the <p> index because primary index keys cannot be changed. 8 For versions that are replicated under the write-all cache write policy, this scheme would list replicated versions in the VST twice (i.e., once for their on-page cache copy and once for their version pool copy). 9 The overall versioning scheme in <ref> [22] </ref> differs somewhat in that it bounds the number of versions of each tuple by essentially restricting the number of query startup timestamps in use simultaneously.
Reference: 23. <author> Raghavan, A., </author> <title> and T.K. Rengarajan, "Database Availability for Transaction Processing," </title> <note> Digital Technical Journal 3(1), </note> <month> Winter </month> <year> 1991. </year>
Reference-contexts: This extension was also used in a system developed at Computer Corporation of America (CCA) [10, 11], and it has subsequently been incorporated in DEC's Rdb product <ref> [23] </ref>.
Reference: 24. <author> Reed, D., </author> <title> "Implementing Atomic Actions on Decentralized Data," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 1(1), </volume> <month> February </month> <year> 1983. </year>
Reference: 25. <author> Robinson, J., </author> <title> Design of Concurrency Controls for Transaction Processing Systems, </title> <type> Ph.D. Thesis, </type> <institution> Comp. Sci. </institution> <type> Tech. Rep. </type> <institution> No. CMU-CS-82-114, </institution> <year> 1982. </year>
Reference-contexts: Several 2PL-based algorithms that retain at most two versions of data in order to reduce blocking due to read/write conflicts have also been proposed [5, 27]. Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation <ref> [25, 9, 19] </ref> multiversion timestamp 3 ordering [2], and the multiversion tree protocol [26].
Reference: 26. <author> Silberschatz, A. </author> <title> "A Multi-Version Concurrency Control Scheme With No Rollbacks," </title> <booktitle> ACM-SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1982. </year>
Reference-contexts: Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation [25, 9, 19] multiversion timestamp 3 ordering [2], and the multiversion tree protocol <ref> [26] </ref>.
Reference: 27. <author> Stearns, R. and D. Rosenkrantz, </author> <title> "Distributed Database Concurrency Control Using Before-Values," </title> <booktitle> Proc. of the 1981 ACM SIGMOD Conf., </booktitle> <year> 1981. </year>
Reference-contexts: To the best of our knowledge, Reed's distributed times-tamp ordering scheme [Reed83] was actually the first multiversion concurrency control algorithm proposal. Several 2PL-based algorithms that retain at most two versions of data in order to reduce blocking due to read/write conflicts have also been proposed <ref> [5, 27] </ref>. Other multiversion extensions of single-version con-currency control algorithms include: multiversion optimistic validation [25, 9, 19] multiversion timestamp 3 ordering [2], and the multiversion tree protocol [26].
Reference: 28. <author> Stonebraker, M., </author> <title> "The Design of the Postgres Storage System," </title> <booktitle> Proc. Thirteenth International Conference on Very Large Database Systems, </booktitle> <year> 1987. </year> <month> 30 </month>
Reference-contexts: Because (non-2PL) B-tree concurrency control algorithms are widely viewed as being important to achieving acceptable performance, we do not consider the Rdb approach further. A number of other multiversion indexing approaches have been proposed in the literature; examples include <ref> [13, 28, 18, 20, 22] </ref>. With the exception of [22], however, all of these proposed indexing schemes are designed to support historical databases, where out-of-date versions are retained for an arbitrary length of time.
References-found: 28

