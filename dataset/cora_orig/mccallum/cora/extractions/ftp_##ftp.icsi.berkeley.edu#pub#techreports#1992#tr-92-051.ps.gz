URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1992/tr-92-051.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1992.html
Root-URL: http://www.icsi.berkeley.edu
Title: Improved Parallel Polynomial Division and Its Extensions  
Author: Dario Bini Victor Pan 
Note: Dario Bini was supported by NSF Grants CCR 8805782 and CCR 9020690, and by MPI (40% funds). Lehman College, CUNY, and ICSI. Victor Pan was supported by NSF grants CCR 8805782, CCR 9020690 and by PSC CUNY Awards #661340, #668541, #669210 and #662478.  
Affiliation: Department of Mathematics, University of Pisa.  
Date: September 1992  
Pubnum: TR-92-051  
Abstract: We compute the first N coefficients of the reciprocal r(x) of a given polynomial p(x), (r(x)p(x) = 1 mod x N , p(0) 6= 0), by using, under the PRAM arithmetic models, O(h log N) time-steps and O( (N=h)(1 + 2 h log (h) N) ) processors, for any h, h = 1; 2; : : : ; log fl N, provided that O(log m) steps and m processors suffice to perform DFT on m points and that log (0) N = N , log (h) N = log 2 log (h1) N , h = 1; : : : ; log fl N, log fl N = maxfh : log (h) N &gt; 0g. The same complexity estimates apply to some other computations, such as the division with a remainder of two polynomials of degrees O(N) and the inversion of an N fi N triangular Toeplitz matrix. This improves the known estimates of Reif-Tate and Georgiev. We also show how to extend our techniques to parallel implementation of other recursive processes, such as the evaluation modulo x N of the m-th root, p(x) 1=m , of p(x) (for any fixed natural m), for which we need O(log N log log N ) time-steps and O(N= log log N ) processors. The paper demonstrates some new techniques of supereffective slowdown of parallel algebraic computations, which we combine with a technique of stream contraction. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Bini, </author> <title> "Parallel Solution of Certain Toeplitz Linear Systems," </title> <journal> SIAM J. on Computing, </journal> <volume> 13(2), </volume> <year> (1984) </year> <month> 268-276. </month>
Reference-contexts: O A (log N ; N log 2 N ) ; and of [11], We refer the reader to [2] and [3] on other previous works, in particular, on Reif's results of [10], including the bound c N = O A (log N; N 2 ), and Bini's results of <ref> [1] </ref>, where c N = O A (log N; N ) is proven for any precision approximation to the reciprocal of a polynomial modulo x N . 2 Stream of Newton's Steps and Its Contraction It is well known that, given a polynomial p (x), p (0) 6= 0, the first
Reference: [2] <author> D. Bini and V. Pan, </author> <title> "Polynomial Division and its Computational Complexity," Jour. Complexity, </title> <month> 2 </month> <year> (1986) </year> <month> 179-203. </month>
Reference-contexts: 1 Introduction In this paper we will improve the known upper estimates for the parallel arithmetic complexity of computing the reciprocal of a polynomial and, consequently, of the equivalent computations, such as polynomial and power series division and triangular Toeplitz matrix inversion (compare <ref> [2] </ref>, [3] and the appendix). This improvement relies on the new techniques that, in particular, decrease by q times the processor bound for a large class of parallel algebraic computations in the result of their slowdown by s = o (q) times. <p> turns into c N = O A (log fl N log N ; N= log fl N ) : (1:3) This improves the previous record bounds of [5], c N = O A (log N ; N log 2 N ) ; and of [11], We refer the reader to <ref> [2] </ref> and [3] on other previous works, in particular, on Reif's results of [10], including the bound c N = O A (log N; N 2 ), and Bini's results of [1], where c N = O A (log N; N ) is proven for any precision approximation to the reciprocal
Reference: [3] <author> D. Bini and V. Pan, </author> <title> Numerical and Algebraic Computations with Matrices and Polynomials, Vols. 1 and 2, </title> <publisher> Birkhauser, </publisher> <address> Boston (1992, </address> <note> to appear). </note>
Reference-contexts: 1 Introduction In this paper we will improve the known upper estimates for the parallel arithmetic complexity of computing the reciprocal of a polynomial and, consequently, of the equivalent computations, such as polynomial and power series division and triangular Toeplitz matrix inversion (compare [2], <ref> [3] </ref> and the appendix). This improvement relies on the new techniques that, in particular, decrease by q times the processor bound for a large class of parallel algebraic computations in the result of their slowdown by s = o (q) times. <p> c N = O A (log fl N log N ; N= log fl N ) : (1:3) This improves the previous record bounds of [5], c N = O A (log N ; N log 2 N ) ; and of [11], We refer the reader to [2] and <ref> [3] </ref> on other previous works, in particular, on Reif's results of [10], including the bound c N = O A (log N; N 2 ), and Bini's results of [1], where c N = O A (log N; N ) is proven for any precision approximation to the reciprocal of a
Reference: [4] <author> G. Cantor and Kaltofen, E., </author> <title> "On Fast Multiplication of Polynomials over Arbitrary Algebras," </title> <journal> Acta Inf., </journal> <month> 28 </month> <year> (1991) </year> <month> 693-701. </month>
Reference-contexts: This bound holds, in particular, over the complex field of constants. Over any ring (with unity), the bound O A (log m; m log log m) holds <ref> [4] </ref>, so that all our estimates apply if their processor bounds are increased by the factor of log log N provided that the ring supports Bluestein's generalized FFT ([7]). In section 5 we will comment on the latter assumption. Hereafter, log stands for log 2 (all logarithms are binary).
Reference: [5] <author> R. E. Georgiev, </author> <title> "Inversion of Triangular Toeplitz Matrices by Using the Fast Fourier Transform," </title> <journal> J. New Gener. Comput. Sys. </journal> <volume> 2(3) (1989) 247-256. </volume> <pages> 8 </pages>
Reference-contexts: ; log fl N = maxfh : log (h) N &gt; 0g : In particular, for h = log fl N , (1.2) turns into c N = O A (log fl N log N ; N= log fl N ) : (1:3) This improves the previous record bounds of <ref> [5] </ref>, c N = O A (log N ; N log 2 N ) ; and of [11], We refer the reader to [2] and [3] on other previous works, in particular, on Reif's results of [10], including the bound c N = O A (log N; N 2 ), and <p> In <ref> [5] </ref> it is pointed out that the relation (2.3) still holds even if p (x) in (2.1) is replaced by p (x) mod x 2 i+1 . <p> Similarly to the algorithm of <ref> [5] </ref>, contract the stream of Newton's steps by replacing p 1 (x) by p 1 in (6.2).
Reference: [6] <author> R. M. Karp and V. Ramachandran, </author> <title> "A Survey of Parallel Algorithms for Shared Mem--ory Machines," </title> <booktitle> in Handbook of Theor. Comp. Science, </booktitle> <publisher> North-Holland (1990) 869-941. </publisher>
Reference-contexts: We call such a slowdown supereffective since a variant of Brent's scheduling principle only implies an effective decrease of the processor bound by O (s) times in this case (see <ref> [6] </ref>, [8]). <p> We will state our estimates in the form O A (t; P ), which means that our computations can be performed by using O (st) time-steps and O (P=s) processors (for any fixed s, 1 s P ), under the PRAM arithmetic models of computing (see <ref> [6] </ref>). We will assume the bound O A (log m; m) on the cost of performing (forward and inverse) discrete Fourier transforms on the m-th roots of 1 [hereafter referred to as DF T (m)]. This bound holds, in particular, over the complex field of constants.
Reference: [7] <author> D. E. Knuth, </author> <title> The Art of Computer Programming: Seminumerical Algorithms, </title> <publisher> v. 2, Addison-Wesley, </publisher> <address> Mass., </address> <year> 1981. </year>
Reference-contexts: In this case we may replace FFT by its Bluestein's extension (where g replaces the principal root of 1), <ref> [7] </ref>. Such an extended FFT is performed at the cost O A (log N; N log log N ) over any ring R ([4]).
Reference: [8] <author> V. Y. Pan and F. P. Preparata, </author> <title> "Supereffective Slowdown of Parallel computations," </title> <booktitle> Proc. 4th Annual ACM Symp. on Parallel Algrithms and Architectures (1992), </booktitle> <pages> 402-409. </pages>
Reference-contexts: We call such a slowdown supereffective since a variant of Brent's scheduling principle only implies an effective decrease of the processor bound by O (s) times in this case (see [6], <ref> [8] </ref>). <p> Somewhat similar techniques yield supereffective slowdown of some fundamental computations in linear algebra and in path algebras, where we recursively apply fast but processor inefficient algorithms to decrease the size of the problem (see <ref> [8] </ref>). 2) The complexity estimates (1.2), (1.3) and (6.7) can be extended to the computational problems readily reducible to computing the reciprocal of a polynomial p (x) and its m-th root, respectively.
Reference: [9] <author> V. Y. Pan and J. H. Reif, </author> <title> "The Parallel Computation of the Minimum Cost Paths in Graph by Stream Contraction,"Information Processing Letters, </title> <month> 40 </month> <year> (1991) </year> <month> 79-83. </month>
Reference-contexts: This way, we contract the stream of recursive steps, by cutting-off their slowest parts (that is, DFT's) and thus accelerating the transition to each new step (compare another example of stream contraction in <ref> [9] </ref>).
Reference: [10] <author> J. H. Reif, </author> <title> "Logarithmic Depth Circuits for the Algebraic Problems," </title> <journal> SIAM J. on Computing, </journal> <month> 15 </month> <year> (1986) </year> <month> 231-242. </month>
Reference-contexts: N= log fl N ) : (1:3) This improves the previous record bounds of [5], c N = O A (log N ; N log 2 N ) ; and of [11], We refer the reader to [2] and [3] on other previous works, in particular, on Reif's results of <ref> [10] </ref>, including the bound c N = O A (log N; N 2 ), and Bini's results of [1], where c N = O A (log N; N ) is proven for any precision approximation to the reciprocal of a polynomial modulo x N . 2 Stream of Newton's Steps and
Reference: [11] <author> J. H. Reif and S. H. Tate, </author> <title> "Optimal Size Division Circuits," </title> <journal> Proc. 21-th Ann. ACM Symp. on Theory of Computing, </journal> <note> (1989) 264-270 and SIAM J. on Computing, 19(5) (1990) 264-270. </note>
Reference-contexts: = log fl N , (1.2) turns into c N = O A (log fl N log N ; N= log fl N ) : (1:3) This improves the previous record bounds of [5], c N = O A (log N ; N log 2 N ) ; and of <ref> [11] </ref>, We refer the reader to [2] and [3] on other previous works, in particular, on Reif's results of [10], including the bound c N = O A (log N; N 2 ), and Bini's results of [1], where c N = O A (log N; N ) is proven for <p> alternative, we may compute p 1 (x) mod x dN=de by using our algorithms and then make transition to p 1 (x) mod x N by means of the Sieveking-Kung algorithm, at the overall cost O A (log N log log N; N ) over any ring of constants (compare <ref> [11] </ref>).
References-found: 11

