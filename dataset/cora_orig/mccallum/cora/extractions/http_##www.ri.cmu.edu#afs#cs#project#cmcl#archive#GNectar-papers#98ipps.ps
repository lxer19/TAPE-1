URL: http://www.ri.cmu.edu/afs/cs/project/cmcl/archive/GNectar-papers/98ipps.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs/usr/prs/WWW/papers.html
Root-URL: 
Email: fjass,prs,stichnot,pjlg@cs.cmu.edu  
Title: Airshed Pollution Modeling: A Case Study in Application Development in an HPF Environment  
Author: Jaspal Subhlok, Peter Steenkiste, James Stichnoth and Peter Lieu 
Address: Pittsburgh PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Note: Appears in IPPS/SPDP 98  
Abstract: In this paper, we describe our experience with developing Airshed, a large pollution modeling application, in the Fx programming environment. We demonstrate that high level parallel programming languages like Fx and High Performance Fortran offer a simple and attractive model for developing portable and efficient parallel applications. Performance results are presented for the Airshed application executing on Intel Paragon and Cray T3D and T3E parallel computers. The results demonstrate that the application is "performance portable", i.e., it achieves good and consistent performance across different architectures, and that the performance can be explained and predicted using a simple model for the communication and computation phases in the program. We also show how task parallelism was used to alleviate I/O related bottlenecks, an important consideration in many applications. Finally, we demonstrate how external parallel modules developed using different parallelization methods can be integrated in a relatively simple and flexible way with modules developed in the Fx compiler framework. Overall, our experience demonstrates that an HPF-based environment is highly suitable for developing complex applications, including multidisciplinary applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Barbacci, M. </author> <title> Software Support for Heterogeneous Machines. </title> <type> Tech. Rep. </type> <institution> SEI-86-TM-4, Software Engineering Institute, Carnegie Mellon University, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: Both approaches have obvious disadvantages: inefficient execution or a high cost in program development. Some of the more attractive approaches include the use of coordination languages <ref> [1, 2, 3, 10] </ref>, which are designed to build programs by combining existing modules. However, coordination languages have not been widely used, probably in part because familiarity with a new language is required. We will present our approach to the problem here, using Airshed+PopExp as an example. <p> However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project. Several coordination languages have been developed for application development <ref> [1, 2, 3, 10] </ref> but they are primarily targeted to communication between sequential processes. High Performance Fortran [15] allows control to be transferred to external routines in other languages using EXTRINSIC procedure calls.
Reference: [2] <author> Beguelin, A., Dongarra, J. J., Geist, G. A., Manchek, R., and Sunderam, V. S. </author> <title> Graphical Development Tools for Network-Based Concurrent Supercomputing. </title> <booktitle> In Proceedings of Supercomputing '91 (Al-bequerque, </booktitle> <month> November </month> <year> 1991), </year> <journal> IEEE, </journal> <pages> pp. 435-444. </pages>
Reference-contexts: Both approaches have obvious disadvantages: inefficient execution or a high cost in program development. Some of the more attractive approaches include the use of coordination languages <ref> [1, 2, 3, 10] </ref>, which are designed to build programs by combining existing modules. However, coordination languages have not been widely used, probably in part because familiarity with a new language is required. We will present our approach to the problem here, using Airshed+PopExp as an example. <p> However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project. Several coordination languages have been developed for application development <ref> [1, 2, 3, 10] </ref> but they are primarily targeted to communication between sequential processes. High Performance Fortran [15] allows control to be transferred to external routines in other languages using EXTRINSIC procedure calls.
Reference: [3] <author> Carriero, N., and Gelernter, D. </author> <title> Applications experience with Linda. </title> <booktitle> In Proceedings of the ACM SIG-PLAN Symposium on Parallel Programming: Experience with Applications, Languages and Systems (New Haven, </booktitle> <address> CT, </address> <month> July </month> <year> 1988), </year> <pages> pp. 173-187. </pages>
Reference-contexts: Both approaches have obvious disadvantages: inefficient execution or a high cost in program development. Some of the more attractive approaches include the use of coordination languages <ref> [1, 2, 3, 10] </ref>, which are designed to build programs by combining existing modules. However, coordination languages have not been widely used, probably in part because familiarity with a new language is required. We will present our approach to the problem here, using Airshed+PopExp as an example. <p> However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project. Several coordination languages have been developed for application development <ref> [1, 2, 3, 10] </ref> but they are primarily targeted to communication between sequential processes. High Performance Fortran [15] allows control to be transferred to external routines in other languages using EXTRINSIC procedure calls.
Reference: [4] <author> Chapman, B., Mehrotra, P., Van Rosendale, J., and Zima, H. </author> <title> A software architecture for multidisciplinary applications: Integrating task and data parallelism. </title> <type> Tech. Rep. 94-18, </type> <institution> ICASE, NASA Langley Research Center, Hampton, VA, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available. Support for task parallelism in Fx is discussed in [28], and the subject has also been addressed by several other research efforts, including <ref> [4, 8, 12] </ref>. The Airshed model for pollution modeling was developed by McRae and Russel, and earlier parallel implementation, based on PVM, was developed by Russel et. al. [17]. A parallel implementation of the original uniform grid CIT model is described by Dabdub et. al. [6].
Reference: [5] <author> Chapman, B., Mehrotra, P., and Zima, H. </author> <title> Programming in Vienna Fortran. </title> <booktitle> Scientific Programming 1, </booktitle> <month> 1 (Aug. </month> <year> 1992), </year> <pages> 31-50. </pages>
Reference-contexts: Given the advantages in code reuse, this preliminary evaluation suggests that the foreign module approach is attractive. and foreign module on an Intel Paragon 8 7 Related Work Several research efforts have addressed compilation of data parallel languages, two of the pioneering ones being Fortran D [14] and Vienna Fortran <ref> [5] </ref>. Data parallelism in Fx, the framework used in this research, is discussed in [25, 29]. With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available.
Reference: [6] <author> Dabdub, D., and Seinfeld, J. </author> <title> Air quality modeling on massively parallel computers. Atmospheric Environment 28, </title> <booktitle> 9 (1994), </booktitle> <pages> 1679-1687. </pages>
Reference-contexts: As we explained in Section 2, the use of a 2-dimensional operator over a multiscale grid significantly improves efficiency compared with 1-dimensional operators. Unfortunately, it has the drawback that it exhibits a much lower degree of parallelism than 1-dimensional uniform grid transport operators <ref> [17, 6] </ref>. With a 1-dimensional uniform grid transport, both the L x and L y operators can be parallelized over the layers and over one dimension of the grid, resulting in a relatively high degree of parallelism. <p> The 2-dimensional L xy is however difficult to parallelize, so the degree of parallelism is restricted to the number of layers. Overall, this means that models based on a uniform grid and 1-dimensional operators will offer better speedups <ref> [6] </ref>, but because of their lower efficiency, they may not necessarily have better abso 3 (a) time in linear scale (b) time in log scale States lute performance. In fact, related research [23] appears to indicate that the improved parallelization does not make up for the reduced sequential performance. <p> The Airshed model for pollution modeling was developed by McRae and Russel, and earlier parallel implementation, based on PVM, was developed by Russel et. al. [17]. A parallel implementation of the original uniform grid CIT model is described by Dabdub et. al. <ref> [6] </ref>. To our knowledge, this is the first implementation of Airshed in a high level parallel programming framework, and that exploits both data and task parallelism.
Reference: [7] <author> Dinda, P., O'Hallaron, D., Subhlok, J., Webb, J., and Yang, B. </author> <title> Language and runtime support for network parallel computing. </title> <booktitle> In Eighth Workshop on Languages and Compilers for Parallel Computing (Columbus, </booktitle> <address> Ohio, </address> <month> Aug </month> <year> 1995). </year> <note> Proceedings published as Springer Verlag Lecture Notes in Computer Science, No 1033. </note>
Reference-contexts: Finally, the most complex and potentially most efficient implementation is represented by the scenario C, where the data is directly transferred from the variables in the native program to the variables in the foreign module. Some of the challenges of such an efficient implementation are discussed in <ref> [7] </ref>. Our prototype implementation of foreign modules is based on the simplest approach A above and it was used to integrate the PopExp program with Airshed. The structure of combined Airshed-PopExp processing is illustrated in Figure 12.
Reference: [8] <author> Foster, I., Avalani, B., Choudhary, A., and Xu, M. </author> <title> A compilation system that integrates High Performance Fortran and Fortran M. </title> <booktitle> In Proceeding of 1994 Scalable High Performance Computing Conference (Knoxville, </booktitle> <address> TN, </address> <month> October </month> <year> 1994), </year> <pages> pp. 293-300. </pages>
Reference-contexts: With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available. Support for task parallelism in Fx is discussed in [28], and the subject has also been addressed by several other research efforts, including <ref> [4, 8, 12] </ref>. The Airshed model for pollution modeling was developed by McRae and Russel, and earlier parallel implementation, based on PVM, was developed by Russel et. al. [17]. A parallel implementation of the original uniform grid CIT model is described by Dabdub et. al. [6].
Reference: [9] <author> Foster, I., Kohr, D., Krishnaiyer, R., and Choudhary, A. </author> <title> Double standards: Bringing task parallelism to HPF via the Message Passing Interface. </title> <booktitle> In Proceedings of Supercomputing '96 (Pittsburgh, </booktitle> <address> PA, </address> <month> November </month> <year> 1996). </year>
Reference-contexts: Our approach blends such a mechanism with task parallelism and uses a common communication interface between a native Fx program and a foreign module. The result is that a foreign module can potentially execute concurrently with the main computation, offering significantly more flexibility. Foster et. al. <ref> [9] </ref> use an MPI binding to HPF to enable multiple HPF executables to communicate using MPI collective communication operations. This approach is somewhat similar to our approach, with the difference that our system is more closely integrated with the parallelizing compiler.
Reference: [10] <author> Foster, I., and Taylor, S. Strand: </author> <title> New Concept in Parallel Programming. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliff, New Jersey, </address> <year> 1990. </year>
Reference-contexts: Both approaches have obvious disadvantages: inefficient execution or a high cost in program development. Some of the more attractive approaches include the use of coordination languages <ref> [1, 2, 3, 10] </ref>, which are designed to build programs by combining existing modules. However, coordination languages have not been widely used, probably in part because familiarity with a new language is required. We will present our approach to the problem here, using Airshed+PopExp as an example. <p> However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project. Several coordination languages have been developed for application development <ref> [1, 2, 3, 10] </ref> but they are primarily targeted to communication between sequential processes. High Performance Fortran [15] allows control to be transferred to external routines in other languages using EXTRINSIC procedure calls.
Reference: [11] <author> Gross, T., O'Hallaron, D., and Subhlok, J. </author> <title> Task parallelism in a High Performance Fortran framework. </title> <booktitle> IEEE Parallel & Distributed Technology 2, 3 (Fall 1994), </booktitle> <pages> 16-26. </pages>
Reference-contexts: Task parallelism makes it possible to reduce or eliminate the impact of application components with limited paral lelism on the overall execution time. In related research, task parallelism has been used to minimize the impact of application modules that do not scale well because of high 6 communication overheads <ref> [11, 28] </ref>. In the Airshed appli-cation, we have used task parallelism to alleviate the I/O bottlenecks. <p> To our knowledge, this is the first implementation of Airshed in a high level parallel programming framework, and that exploits both data and task parallelism. Task parallelism has been used to alleviate various kinds of performance bottlenecks <ref> [11] </ref> and some research efforts have addressed the automatic use of mixed parallelism [20, 26, 27]. However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project.
Reference: [12] <author> Haines, M., Hes, B., Mehrotra, P., and Van Rosendale, J. </author> <title> Runtime support for data parallel tasks. </title> <booktitle> In Fifth Symposium on the Frontiers of Massively Parallel Computation (1995). </booktitle>
Reference-contexts: With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available. Support for task parallelism in Fx is discussed in [28], and the subject has also been addressed by several other research efforts, including <ref> [4, 8, 12] </ref>. The Airshed model for pollution modeling was developed by McRae and Russel, and earlier parallel implementation, based on PVM, was developed by Russel et. al. [17]. A parallel implementation of the original uniform grid CIT model is described by Dabdub et. al. [6].
Reference: [13] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran Language Specification, </title> <note> Version 2.0, </note> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: 1 Introduction This paper reports on the development of Airshed, a large air pollution modeling application [18], in the Fx parallel programming framework [28]. Our goal is to demonstrate that high level parallel programming languages like Fx and High Performance Fortran <ref> [13] </ref> offer an efficient and portable, yet relatively simple, model for developing parallel applications. <p> Loop parallelism is expressed by a parallel loop construct that combines loop and reduction parallelism. Data parallelism in Fx is similar to that in High Performance Fortran <ref> [13] </ref> and further details are available in [25, 29]. We group the Airshed computation steps outlined in Figure 1 into three classes. We refer to the routines inputhour, pretrans and outputhour collectively as I/O processing. <p> This allows independent sequential and data parallel routines to execute concurrently on disjoint groups of processors. The syntax and semantics of task parallelism in Fx are described in [28]. A similar task parallel construct is also an approved extension of High Performance Fortran <ref> [13] </ref>. Task parallelism makes it possible to reduce or eliminate the impact of application components with limited paral lelism on the overall execution time. <p> Data parallelism in Fx, the framework used in this research, is discussed in [25, 29]. With the standardization of High Performance Fortran <ref> [13] </ref>, several commercial compilers for the language are also available. Support for task parallelism in Fx is discussed in [28], and the subject has also been addressed by several other research efforts, including [4, 8, 12].
Reference: [14] <author> Hiranandani, S., Kennedy, K., and Tseng, C. </author> <title> Compiling fortran D for MIMD distributed-memory machines. </title> <journal> Communications of the ACM 35, </journal> <month> 8 (August </month> <year> 1992), </year> <pages> 66-80. </pages>
Reference-contexts: Given the advantages in code reuse, this preliminary evaluation suggests that the foreign module approach is attractive. and foreign module on an Intel Paragon 8 7 Related Work Several research efforts have addressed compilation of data parallel languages, two of the pioneering ones being Fortran D <ref> [14] </ref> and Vienna Fortran [5]. Data parallelism in Fx, the framework used in this research, is discussed in [25, 29]. With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available.
Reference: [15] <author> Koelbel, C., Loveman, D., Steele, G., and Zosel, M. </author> <title> The High Performance Fortran Handbook. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: Several coordination languages have been developed for application development [1, 2, 3, 10] but they are primarily targeted to communication between sequential processes. High Performance Fortran <ref> [15] </ref> allows control to be transferred to external routines in other languages using EXTRINSIC procedure calls. Our approach blends such a mechanism with task parallelism and uses a common communication interface between a native Fx program and a foreign module.
Reference: [16] <author> Kumar, N., Odman, M. T., and Russell, A. G. </author> <title> Multiscale air quality modeling: Application to southern california. </title> <journal> Journal of Geophysical Research 99 (1994), </journal> <pages> 5385-5397. </pages>
Reference-contexts: For the chemistry and vertical transport equations, the hybrid scheme of Young and Boris [30] for stiff systems of ordinary differential equations is used. A detailed description of the model can be found in <ref> [16] </ref>. Airshed uses a multiscale grid instead of a uniform grid, since, to provide a given accuracy, a well-chosen multiscale grid is computationally significantly more efficient than a uniform grid, as it requires evaluation of the L cz operator at fewer points.
Reference: [17] <author> Kumar, N., Russell, A., Segall, E., and Steenkiste, P. </author> <title> Parallel and distributed application of an urban and regional multiscale model. </title> <journal> Computers and Chemical Engineering 21, </journal> <month> 4 (December </month> <year> 1996), </year> <pages> 399-408. </pages>
Reference-contexts: As we explained in Section 2, the use of a 2-dimensional operator over a multiscale grid significantly improves efficiency compared with 1-dimensional operators. Unfortunately, it has the drawback that it exhibits a much lower degree of parallelism than 1-dimensional uniform grid transport operators <ref> [17, 6] </ref>. With a 1-dimensional uniform grid transport, both the L x and L y operators can be parallelized over the layers and over one dimension of the grid, resulting in a relatively high degree of parallelism. <p> The Airshed model for pollution modeling was developed by McRae and Russel, and earlier parallel implementation, based on PVM, was developed by Russel et. al. <ref> [17] </ref>. A parallel implementation of the original uniform grid CIT model is described by Dabdub et. al. [6]. To our knowledge, this is the first implementation of Airshed in a high level parallel programming framework, and that exploits both data and task parallelism.
Reference: [18] <author> McRae, G., Russell, A., and Harley, R. </author> <title> CIT Photochemical Airshed Model Systems Manual. </title> <institution> Carnegie Mellon University, Pittsburgh, PA, and California Institute of Technology, Pasadena, </institution> <address> CA, </address> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: 1 Introduction This paper reports on the development of Airshed, a large air pollution modeling application <ref> [18] </ref>, in the Fx parallel programming framework [28]. Our goal is to demonstrate that high level parallel programming languages like Fx and High Performance Fortran [13] offer an efficient and portable, yet relatively simple, model for developing parallel applications. <p> It is a multiscale grid version of the CIT Airshed model <ref> [18] </ref>. This model predicts the concentration of different chemicals in the atmosphere using their initial values and hourly input of sun and wind conditions, and release of additional chemicals. An important use of Airshed is to help in the development of environmental policies.
Reference: [19] <author> Odman, M. T., and Russell, A. G. </author> <title> A multiscale finite element pollutant transport scheme for urban and regional modeling. </title> <booktitle> Atmospheric Environment 25A (1991), </booktitle> <pages> 2385-2394. </pages>
Reference-contexts: L cz is the chemistry and vertical transport operator; they are combined because they involve similar computations on similar timescales. The Streamline Upwind Petrov-Galerkin (SUPG) finite element method is used for the solution of horizontal transport <ref> [19] </ref>. For the chemistry and vertical transport equations, the hybrid scheme of Young and Boris [30] for stiff systems of ordinary differential equations is used. A detailed description of the model can be found in [16].
Reference: [20] <author> Ramaswamy, S., Sapatnekar, S., and Banerjee, P. </author> <title> A convex programming approach for exploiting data and functional parallelism. </title> <booktitle> In Proceedings of the 1994 International Conference on Parallel Processing (St Charles, </booktitle> <address> IL, </address> <month> August </month> <year> 1994), </year> <journal> vol. </journal> <volume> 2, </volume> <pages> pp. 116-125. </pages>
Reference-contexts: Task parallelism has been used to alleviate various kinds of performance bottlenecks [11] and some research efforts have addressed the automatic use of mixed parallelism <ref> [20, 26, 27] </ref>. However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project.
Reference: [21] <author> Ranganathan, M., Acharya, A., Edjlali, G., Sussman, A., and Saltz, J. </author> <title> Runtime coupling of data-parallel programs. </title> <type> Tech. Rep. </type> <institution> CS-TR-3565, Department of Computer Science, University of Maryland, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: In particular, the interface from the Fx/HPF compiler is not an explicit call to a collective communication library but a subroutine call in a task region, which is an existing HPF concept. A similar idea of using runtime communication libraries to integrate existing parallel code modules is explored in <ref> [21] </ref>. 8 Conclusions This paper reports on the development of the Airshed pollution modeling application in the Fx programming environment. The paper has demonstrated that large parallel applications can be successfully developed in a high level parallel programming environment based on High Performance Fortran.
Reference: [22] <author> Riedel, E., Bruegge, B., Russell, A., and McRae, G. </author> <title> Developing gems: An environmental modeling system. </title> <booktitle> IEEE Computational Science and Engineering 2, 3 (Fall 1995), </booktitle> <pages> 55-68. </pages>
Reference-contexts: Population exposure calculations can be very expensive and are often also parallelized. Environmental scientists would like to use an efficient integrated version of these two programs through the GEMS problem solving environment <ref> [22] </ref>, as illustrated in Figure 10. However, different programs are often parallelized in different frameworks, and in this case, Fx was used for Airshed and PVM for PopExp.
Reference: [23] <author> Segall, E., Steenkiste, P., Kumar, N., and Rus-sell, A. </author> <title> Portability and scalability of a distributed multiscale air quality model. In U.S. EPA Next Generation Environmental Models Computation Methods (NGEMCOM) Workshop (Cape May, </title> <address> NJ, </address> <month> August </month> <year> 1995), </year> <note> EPA, p. Appears in this collection. </note>
Reference-contexts: Overall, this means that models based on a uniform grid and 1-dimensional operators will offer better speedups [6], but because of their lower efficiency, they may not necessarily have better abso 3 (a) time in linear scale (b) time in log scale States lute performance. In fact, related research <ref> [23] </ref> appears to indicate that the improved parallelization does not make up for the reduced sequential performance.
Reference: [24] <author> Steenkiste, P., and Subhlok, J. </author> <title> Coordinating foreign modules with a parallelizing compiler. </title> <type> Tech. Rep. </type> <institution> CMU-CS-97-145, School of Computer Science, Carnegie Mellon University, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: However, 7 the internal communication model of the foreign module is independent of the communication model used by the Fx compiler. This approach is discussed in detail in <ref> [24] </ref>. We will summarize the key features here: 1. Modules written in different parallelism models can be integrated in a single framework. The main change in the foreign module is the insertion of calls to a shared library to input and output data from the native Fx program. 2.
Reference: [25] <author> Stichnoth, J., O'Hallaron, D., and Gross, T. </author> <title> Generating communication for array statements: Design, implementation, and evaluation. </title> <journal> Journal of Parallel and Distributed Computing 21, </journal> <volume> 1 (1994), </volume> <pages> 150-159. </pages>
Reference-contexts: Loop parallelism is expressed by a parallel loop construct that combines loop and reduction parallelism. Data parallelism in Fx is similar to that in High Performance Fortran [13] and further details are available in <ref> [25, 29] </ref>. We group the Airshed computation steps outlined in Figure 1 into three classes. We refer to the routines inputhour, pretrans and outputhour collectively as I/O processing. <p> Data parallelism in Fx, the framework used in this research, is discussed in <ref> [25, 29] </ref>. With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available. Support for task parallelism in Fx is discussed in [28], and the subject has also been addressed by several other research efforts, including [4, 8, 12].
Reference: [26] <author> Subhlok, J., and Vondran, G. </author> <title> Optimal mapping of sequences of data parallel tasks. </title> <booktitle> In Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (Santa Barbara, </booktitle> <address> CA, </address> <month> July </month> <year> 1995), </year> <pages> pp. 134-143. </pages>
Reference-contexts: The Fx compiler maintains a global view of the application. With the knowledge of computation and communication characteristics of a foreign module, the techniques used in Fx to manage processor allocation among tasks <ref> [26, 27] </ref> can be extended to foreign mod ules. 3. The interaction between the native Fx program and a foreign module is very general. <p> Task parallelism has been used to alleviate various kinds of performance bottlenecks [11] and some research efforts have addressed the automatic use of mixed parallelism <ref> [20, 26, 27] </ref>. However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project.
Reference: [27] <author> Subhlok, J., and Vondran, G. </author> <title> Optimal latency-throughput tradeoffs for data parallel pipelines. </title> <booktitle> In Eighth Annual ACM Symposium on Parallel Algorithms and Architectures (Padua, </booktitle> <address> Italy, </address> <month> June </month> <year> 1996), </year> <pages> pp. 62-71. </pages>
Reference-contexts: The Fx compiler maintains a global view of the application. With the knowledge of computation and communication characteristics of a foreign module, the techniques used in Fx to manage processor allocation among tasks <ref> [26, 27] </ref> can be extended to foreign mod ules. 3. The interaction between the native Fx program and a foreign module is very general. <p> Task parallelism has been used to alleviate various kinds of performance bottlenecks [11] and some research efforts have addressed the automatic use of mixed parallelism <ref> [20, 26, 27] </ref>. However, we believe that the use of task parallelism to alleviate I/O bottlenecks is a novel idea that is being investigated in the Fx project.
Reference: [28] <author> Subhlok, J., and Yang, B. </author> <title> A new model for integrated nested task and data parallel programming. </title> <booktitle> In Proceedings of the Sixth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (June 1997), ACM. </booktitle>
Reference-contexts: 1 Introduction This paper reports on the development of Airshed, a large air pollution modeling application [18], in the Fx parallel programming framework <ref> [28] </ref>. Our goal is to demonstrate that high level parallel programming languages like Fx and High Performance Fortran [13] offer an efficient and portable, yet relatively simple, model for developing parallel applications. <p> This allows independent sequential and data parallel routines to execute concurrently on disjoint groups of processors. The syntax and semantics of task parallelism in Fx are described in <ref> [28] </ref>. A similar task parallel construct is also an approved extension of High Performance Fortran [13]. Task parallelism makes it possible to reduce or eliminate the impact of application components with limited paral lelism on the overall execution time. <p> Task parallelism makes it possible to reduce or eliminate the impact of application components with limited paral lelism on the overall execution time. In related research, task parallelism has been used to minimize the impact of application modules that do not scale well because of high 6 communication overheads <ref> [11, 28] </ref>. In the Airshed appli-cation, we have used task parallelism to alleviate the I/O bottlenecks. <p> Data parallelism in Fx, the framework used in this research, is discussed in [25, 29]. With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available. Support for task parallelism in Fx is discussed in <ref> [28] </ref>, and the subject has also been addressed by several other research efforts, including [4, 8, 12]. The Airshed model for pollution modeling was developed by McRae and Russel, and earlier parallel implementation, based on PVM, was developed by Russel et. al. [17].
Reference: [29] <author> Yang, B., Webb, J., Stichnoth, J., O'Hallaron, D., and Gross, T. Do&merge: </author> <title> Integrating parallel loops and reductions. </title> <booktitle> In Sixth Annual Workshop on Languages and Compilers for Parallel Computing (Portland, </booktitle> <address> Oregon, </address> <month> Aug </month> <year> 1993). </year>
Reference-contexts: Loop parallelism is expressed by a parallel loop construct that combines loop and reduction parallelism. Data parallelism in Fx is similar to that in High Performance Fortran [13] and further details are available in <ref> [25, 29] </ref>. We group the Airshed computation steps outlined in Figure 1 into three classes. We refer to the routines inputhour, pretrans and outputhour collectively as I/O processing. <p> Data parallelism in Fx, the framework used in this research, is discussed in <ref> [25, 29] </ref>. With the standardization of High Performance Fortran [13], several commercial compilers for the language are also available. Support for task parallelism in Fx is discussed in [28], and the subject has also been addressed by several other research efforts, including [4, 8, 12].
Reference: [30] <author> Young, T. R., and Boris, J. P. </author> <title> A numerical technique for solving ordinary differential equations associated with the chemical kinetics of reactive flow problems. </title> <journal> Journal of Physics and Chemistry 81 (1977), </journal> <pages> 2424-2427. </pages>
Reference-contexts: The Streamline Upwind Petrov-Galerkin (SUPG) finite element method is used for the solution of horizontal transport [19]. For the chemistry and vertical transport equations, the hybrid scheme of Young and Boris <ref> [30] </ref> for stiff systems of ordinary differential equations is used. A detailed description of the model can be found in [16].
References-found: 30

