URL: http://www.cs.rpi.edu/~scorec/papers/97/sccc/sccc.ps
Refering-URL: http://www.cs.rpi.edu/~scorec/papers/97/papers.html
Root-URL: http://www.cs.rpi.edu
Title: Load Balancing and Communication Optimization for Parallel Adaptive Finite Element Methods  
Author: J. E. Flaherty, R. M. Loy, P. C. Scully, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz 
Address: Troy, NY, U.S.A.  
Affiliation: Computer Science Department and Scientific Computation Research Center Rensselaer Polytechnic Institute  
Abstract: This paper describes predictive load balancing schemes designed for use with parallel adaptive finite element methods. We provide an overview of data structures suitable for distributed storage of finite element mesh data as well as software designed for mesh adaptation and load balancing. During the course of a parallel computation, processor load imbalances are introduced at adaptive enrichment steps. The predictive load balancing methods described here use a priori estimates of work load for adaptive refinement and subsequent computation to improve enrichment efficiency and reduce total balancing time. An analysis code developed with these components for solving compressible flow problems is used to obtain predictive load balancing results on an IBM SP2 computer. Our test problem involves the transient solution of the three-dimensional Euler equations of compressible flow inside a perforated shock tube. We also present a message passing library extension in development which allows for automated packing of messages to improve communication efficiency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. T. Barnard. PMRSB: </author> <title> parallel multilevel recursive spectral bisection. </title> <editor> In F. Baker and J. Wehmer, editors, </editor> <booktitle> Proc. Supercomputing 95, </booktitle> <address> San Diego, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection (RSB) [16] and, more recently, MeTiS [12] are generally regarded as good static partitioners. Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB but relies heavily on a shared-memory architecture and is likely to be inefficient in a true message passing environment <ref> [1] </ref>. Other enhancements to RSB [20, 21, 22] may make it more useful as a dynamic repartitioner, but doubts remain. MeTiS has recently been extended to operate in parallel (ParMeTiS [17]) and may be a viable option. Several dynamic load balancing techniques are available for use with our software.
Reference: [2] <author> M. W. Beall and M. S. Shephard. </author> <title> A general topology-based mesh data structure. </title> <note> To appear Int. J. Numer. Meth. Engng., </note> <year> 1997. </year>
Reference-contexts: They provide a uniform way to implement reusable parallel adaptive software. 2.1. Mesh data structures The SCOREC Mesh Database (MDB) <ref> [2] </ref> provides an object-oriented representation of a finite element mesh and operators to query and update the mesh data structure. The mesh entity hierarchy consists of three-dimensional regions, and their bounding faces, edges, and vertices, with bidirectional links between mesh entities of consecutive dimensional order.
Reference: [3] <author> R. Biswas, K. D. Devine, and J. E. Flaherty. </author> <title> Parallel, adaptive finite element methods for conservation laws. </title> <journal> Appl. Numer. Math., </journal> <volume> 14 </volume> <pages> 255-283, </pages> <year> 1994. </year>
Reference-contexts: ITB, PSIRB, and OCT each honor such weights when determining partitions. 3. Adaptive techniques Results presented here were obtained using our Parallel Adaptive Euler Solver in which three-dimensional conservation laws are discretized using a discontinuous Galerkin finite element method <ref> [3, 5, 6] </ref>. More details may be found in [10]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed. 3.1.
Reference: [4] <author> C. L. Bottasso, J. E. Flaherty, C. Ozturan, M. S. Shep-hard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> The quality of partitions produced by an iterative load balancer. </title> <editor> In B. K. Szymanski and B. Sinharoy, editors, </editor> <booktitle> Proc. Third Workshop on Languages, Compilers, and Runtime Systems, </booktitle> <pages> pages 265-277, </pages> <address> Troy, </address> <year> 1996. </year>
Reference-contexts: Flow features compare favorably with experimental and numerical results of Naga-matsu et al. [13]. Iterative balancing methods like ITB tend to have low per-iteration costs. However, global repartitioners generally maintain better partition quality than ITB <ref> [4] </ref>. Thus, the standard nonpredictive method executes a few iterations of ITB between spatial enrichment stages followed by a global size-weighted repartitioning (using velocity vectors onto the surfaces of a perforated cylinder at time 0.6. OCT) after enrichment.
Reference: [5] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws III: One-Dimensional systems. </title> <journal> J. Comput. Phys., </journal> <volume> 84 </volume> <pages> 90-113, </pages> <year> 1989. </year>
Reference-contexts: ITB, PSIRB, and OCT each honor such weights when determining partitions. 3. Adaptive techniques Results presented here were obtained using our Parallel Adaptive Euler Solver in which three-dimensional conservation laws are discretized using a discontinuous Galerkin finite element method <ref> [3, 5, 6] </ref>. More details may be found in [10]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed. 3.1.
Reference: [6] <author> B. Cockburn and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws II: General framework. </title> <journal> Math. Comp., </journal> <volume> 52 </volume> <pages> 411-435, </pages> <year> 1989. </year>
Reference-contexts: ITB, PSIRB, and OCT each honor such weights when determining partitions. 3. Adaptive techniques Results presented here were obtained using our Parallel Adaptive Euler Solver in which three-dimensional conservation laws are discretized using a discontinuous Galerkin finite element method <ref> [3, 5, 6] </ref>. More details may be found in [10]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed. 3.1.
Reference: [7] <author> K. D. Devine, J. E. Flaherty, R. Loy, and S. Wheat. </author> <title> Parallel partitioning strategies for the adaptive solution of conservation laws. </title> <editor> In I. Babuska, J. E. Flaherty, W. D. Henshaw, J. E. Hopcroft, J. E. Oliger, and T. Tezdu-yar, editors, </editor> <title> Modeling, Mesh Generation, and Adaptive Numerical Methods for Partial Differential Equations, </title> <booktitle> volume 75, </booktitle> <pages> pages 215-242, </pages> <address> Berlin-Heidelberg, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Thus, variations in solution times prevent drawing any conclusions on the relative performance of VPOCT and size-weighted OCT after enrichment in terms of time spent in computation. However, two important and accurate measures of computational imbalance that exhibit less variation between runs have been developed <ref> [7, 10] </ref>. Time-step imbalance is defined as the maximum number of elements time stepped on a processor normalized by the average number stepped on all processors. Likewise, the flux imbalance is the maximum number of fluxes computed on a processor relative to the average number computed on all processors.
Reference: [8] <author> R. E. Dillon Jr. </author> <title> A parametric study of perforated muzzle brakes. </title> <type> ARDC Technical Report ARLCB-TR-84015, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1984. </year>
Reference-contexts: Results Consider the three-dimensional unsteady compressible flow in a cylinder containing a cylindrical vent. This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [8] </ref>. A quasi-steady flow exists behind the contact surface for a short time. The larger cylinder (the shock tube) initially contains air moving at Mach 1.23 while the smaller cylinder (the vent) is quiescent. A Mach 1.23 flow is prescribed at the tube's inlet. <p> The larger cylinder (the shock tube) initially contains air moving at Mach 1.23 while the smaller cylinder (the vent) is quiescent. A Mach 1.23 flow is prescribed at the tube's inlet. Simulation flow parameters match those of shock tube studies of Dillon <ref> [8] </ref> and Nagamatsu et al. [13]. The simulation begins with an initial mesh of 69,572 tetrahedral elements distributed across 16 processors of an IBM SP2 computer. Figure 2 shows the Mach number with velocity vectors at time t = 0:6 in the simulation.
Reference: [9] <author> J. E. Flaherty, R. M. Loy, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Parallel structures and dynamic load balancing for adaptive finite element computation. </title> <type> SCOREC Report 22-1996, </type> <institution> Scientific Computation Research Center, Rensse-laer Polytechnic Institute, Troy, </institution> <year> 1996. </year> <note> To appear Appl. Num. Math. </note>
Reference-contexts: In order to maintain appropriate domain geometry as the mesh is generated, and later as it is enriched, mesh entities are explicitly classified relative to a geometric model of the domain. A Parallel Mesh Database (PMDB) <ref> [9, 18] </ref> is built on top of MDB. Using PMDB, each processor holds MDB data associated with a subset of the complete mesh, and operators are provided to create and manipulate distributed mesh data. <p> MeTiS has recently been extended to operate in parallel (ParMeTiS [17]) and may be a viable option. Several dynamic load balancing techniques are available for use with our software. Iterative Tree Balancing <ref> [9, 18] </ref> (ITB) is a diffusive algorithm based on repeated local migration. Processors request load from their most heavily loaded neighbors, and these requests form a forest of trees. Load flows are computed on linearized representations of these trees using a logarithmic-time scan. <p> The last case has not been seen in the tests performed thus far. Predictive balancing proved effective in balancing a transient flow problem solved using our Parallel Adaptive Euler Solver with time steps determined by the MOL <ref> [9] </ref>. Since the workload per element in the computation phase was homogeneous in this case, the Uniform element workload Predictive balancing (UP) technique described above also balanced the numerical calculations subsequent to each adaptive step.
Reference: [10] <author> J. E. Flaherty, R. M. Loy, M. S. Shephard, B. K. Szy-manski, J. D. Teresco, and L. H. Ziantz. </author> <title> Adaptive local refinement with octree load-balancing for the parallel solution of three-dimensional conservation laws. </title> <type> IMA Preprint Series 1483, </type> <institution> Institute for Mathematics and its Applications, University of Minnesota, </institution> <year> 1997. </year> <note> Submitted for publication. </note>
Reference-contexts: These tools have been used in many applications, including in the construction of a parallel finite element code described in <ref> [10] </ref> which can solve three-dimensional conservation laws. Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) [18]. Refinement is also performed in time using a spatially dependent local refinement method [10]. <p> been used in many applications, including in the construction of a parallel finite element code described in <ref> [10] </ref> which can solve three-dimensional conservation laws. Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) [18]. Refinement is also performed in time using a spatially dependent local refinement method [10]. The consideration of heterogeneous element weights allows us to balance processor loads based on the temporal as well as spatial refinement. Typically, balancing follows mesh refinement and coarsening. <p> Parallel Sort Inertial Recursive Bisection [18] (PSIRB) is an implementation of inertial bisection. The domain is bisected repeatedly in a direction orthogonal to its principal axis of inertia. Inertial coordinates are sorted in parallel to allow operation on a distributed mesh. Octree Partitioning <ref> [10] </ref> (OCT) uses a one-dimensional ordering of the nodes of an oc-tree structure underlying the mesh. The ordered list of nodes is divided into segments corresponding to nearly equal load. Octants adjacent to one another in the ordered list tend to be spatially adjacent and, thus, form a good partition. <p> ITB, PSIRB, and OCT each honor such weights when determining partitions. 3. Adaptive techniques Results presented here were obtained using our Parallel Adaptive Euler Solver in which three-dimensional conservation laws are discretized using a discontinuous Galerkin finite element method [3, 5, 6]. More details may be found in <ref> [10] </ref>. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed. 3.1. Spatial refinement The SCOREC mesh enrichment procedure [18] is used to perform spatial (h-) refinement and coarsening in parallel. <p> Temporal refinement In a time-dependent calculation, such as the one described in Section 5, elements may choose spatially-dependent time steps based upon the Courant stability condition for explicit time integration. When this temporal Local Refinement Method (LRM) <ref> [10] </ref> advances the global solution time, a small number of larger time steps will be taken on large elements, while smaller elements, with smaller stable time steps, will require a larger number of time steps. Periodic synchronizations are used to calculate error estimates or indicators and to perform h-refinement. <p> Thus, variations in solution times prevent drawing any conclusions on the relative performance of VPOCT and size-weighted OCT after enrichment in terms of time spent in computation. However, two important and accurate measures of computational imbalance that exhibit less variation between runs have been developed <ref> [7, 10] </ref>. Time-step imbalance is defined as the maximum number of elements time stepped on a processor normalized by the average number stepped on all processors. Likewise, the flux imbalance is the maximum number of fluxes computed on a processor relative to the average number computed on all processors. <p> Automatic message packing Another difficulty in performing efficient communication in a parallel adaptive environment relates to message size. The most straightforward implementation of an algorithm often results in sending many small messages. For example, in the current version of our Parallel Adaptive Euler Solver <ref> [10] </ref>, each time step of an ele ment on an interprocessor boundary generates commu-nication. Only 52 bytes of information must be passed to the adjoining element on the neighboring processor, and it would be simplest to send this information in individual messages.
Reference: [11] <author> J. E. Flaherty, R. M. Loy, M. S. Shephard, B. K. Szy-manski, J. D. Teresco, and L. H. Ziantz. </author> <title> Predictive load balancing for parallel adaptive finite element computation. </title> <editor> In H. R. Arabnia, editor, </editor> <booktitle> Proceedings PDPTA '97, </booktitle> <volume> volume I, </volume> <pages> pages 460-469, </pages> <year> 1997. </year>
Reference-contexts: The UP method has also been used in tests with two different weighted balancing algorithms to improve enrichment and balancing times for a nonhomogeneous workload per element solution technique <ref> [11] </ref>. A standard partitioner was used to balance the computation. <p> Thus, a positive q diff indicates that the predictive method outperforms the nonpredictive one. While this is essentially the same problem solved in <ref> [11] </ref>, the test conditions have changed enough to warrant presenting a new set of results to ensure that improvements in other areas, such as solver efficiency and estimator performance, did not impact the advantages of VP. <p> Estimator accuracy The accuracy of the LRM estimator function for the VP method is reflected in the resulting weight imbalance. The values given in Figure 5 were computed using the weight function given by (2). Preliminary results presented in <ref> [11] </ref> showed a 15-45% imbalance level with an average imbalance of 28%; however, this has been improved to imbalances from 4-23% with an average 0 20 40 60 80 0 1 2 3 4 5 6 Percent Improvement Mesh number runs avg to nonpredictive runs. imbalance of 10%.
Reference: [12] <author> G. Karypis and V. Kumar. Metis: </author> <title> Unstructured graph partitioning and sparse matrix ordering system. </title> <type> Technical report, </type> <institution> University of Minnesota, Department of Computer Science, Minneapolis, MN, </institution> <year> 1995. </year>
Reference-contexts: An owner-updates rule is used to coordinate the update of partition boundary structures during migration. 2.2. Dynamic load balancers Since a parallel adaptive computation generally involves large partitioned meshes, any dynamic load balancing scheme must operate on distributed mesh data. Recursive spectral bisection (RSB) [16] and, more recently, MeTiS <ref> [12] </ref> are generally regarded as good static partitioners. Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB but relies heavily on a shared-memory architecture and is likely to be inefficient in a true message passing environment [1].
Reference: [13] <author> H. T. Nagamatsu, K. Y. Choi, R. E. Duffy, and G. C. Carofano. </author> <title> An experimental and numerical study of the flow through a vent hole in a perforated muzzle brake. </title> <type> ARDEC Technical Report ARCCB-TR-87016, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1987. </year>
Reference-contexts: The larger cylinder (the shock tube) initially contains air moving at Mach 1.23 while the smaller cylinder (the vent) is quiescent. A Mach 1.23 flow is prescribed at the tube's inlet. Simulation flow parameters match those of shock tube studies of Dillon [8] and Nagamatsu et al. <ref> [13] </ref>. The simulation begins with an initial mesh of 69,572 tetrahedral elements distributed across 16 processors of an IBM SP2 computer. Figure 2 shows the Mach number with velocity vectors at time t = 0:6 in the simulation. <p> Figure 2 shows the Mach number with velocity vectors at time t = 0:6 in the simulation. Flow features compare favorably with experimental and numerical results of Naga-matsu et al. <ref> [13] </ref>. Iterative balancing methods like ITB tend to have low per-iteration costs. However, global repartitioners generally maintain better partition quality than ITB [4].
Reference: [14] <author> L. Oliker, R. Biswas, and R. C. Strawn. </author> <title> Parallel im-plementaion of an adaptive scheme for 3D unstructured grids on the SP2. </title> <booktitle> In Proc. 3rd International Workshop on Parallel Algorithms for Irregularly Structured Problems, </booktitle> <address> Santa Barbara, </address> <year> 1996. </year>
Reference-contexts: Uniform workloads Error indicator data generated during the computation phase may be used to select element weights and to perform load balancing before the refinement stage of the enrichment process. A similar technique has also been used by Oliker, Biswas, and Strawn <ref> [14] </ref> in their enrichment procedure. Without predictive balancing, some processors may have nearly all of their elements scheduled for refinement which can lead to a memory overflow.
Reference: [15] <author> A. Patra and J. T. Oden. </author> <title> Problem decomposition for adaptive hp finite element methods. </title> <journal> Comp. Sys. Engng., </journal> <volume> 6(2):97, </volume> <year> 1995. </year>
Reference-contexts: The ordered list of nodes is divided into segments corresponding to nearly equal load. Octants adjacent to one another in the ordered list tend to be spatially adjacent and, thus, form a good partition. The use of space-filling curves <ref> [15] </ref> produces similar results, keeping neighboring elements of the ordering in close spatial proximity. A recent addi tion to our software is an interface to convert our data structures into a format usable by the ParMeTiS package.
Reference: [16] <author> A. Pothen, H. Simon, and K.-P. Liou. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM J. Mat. Anal. Appl., </journal> <volume> 11(3) </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: An owner-updates rule is used to coordinate the update of partition boundary structures during migration. 2.2. Dynamic load balancers Since a parallel adaptive computation generally involves large partitioned meshes, any dynamic load balancing scheme must operate on distributed mesh data. Recursive spectral bisection (RSB) <ref> [16] </ref> and, more recently, MeTiS [12] are generally regarded as good static partitioners. Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB but relies heavily on a shared-memory architecture and is likely to be inefficient in a true message passing environment [1].
Reference: [17] <author> K. Schloegel, G. Karypis, and V. Kumar. </author> <title> Parallel multilevel diffusion algorithms for repartitioning of adaptive meshes. </title> <type> Technical Report 97-014, </type> <institution> University of Minnesota, Department of Computer Science and Army HPC Center, Minneapolis, MN, </institution> <year> 1997. </year>
Reference-contexts: Other enhancements to RSB [20, 21, 22] may make it more useful as a dynamic repartitioner, but doubts remain. MeTiS has recently been extended to operate in parallel (ParMeTiS <ref> [17] </ref>) and may be a viable option. Several dynamic load balancing techniques are available for use with our software. Iterative Tree Balancing [9, 18] (ITB) is a diffusive algorithm based on repeated local migration.
Reference: [18] <author> M. S. Shephard, J. E. Flaherty, H. L. de Cougny, C. Ozturan, C. L. Bottasso, and M. W. Beall. </author> <title> Parallel automated adaptive procedures for unstructured meshes. </title> <booktitle> In Parallel Computing in CFD, number R-807, pages 6.1-6.49. </booktitle> <address> Agard, Neuilly-Sur-Seine, </address> <year> 1995. </year>
Reference-contexts: These tools have been used in many applications, including in the construction of a parallel finite element code described in [10] which can solve three-dimensional conservation laws. Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) <ref> [18] </ref>. Refinement is also performed in time using a spatially dependent local refinement method [10]. The consideration of heterogeneous element weights allows us to balance processor loads based on the temporal as well as spatial refinement. Typically, balancing follows mesh refinement and coarsening. <p> In order to maintain appropriate domain geometry as the mesh is generated, and later as it is enriched, mesh entities are explicitly classified relative to a geometric model of the domain. A Parallel Mesh Database (PMDB) <ref> [9, 18] </ref> is built on top of MDB. Using PMDB, each processor holds MDB data associated with a subset of the complete mesh, and operators are provided to create and manipulate distributed mesh data. <p> MeTiS has recently been extended to operate in parallel (ParMeTiS [17]) and may be a viable option. Several dynamic load balancing techniques are available for use with our software. Iterative Tree Balancing <ref> [9, 18] </ref> (ITB) is a diffusive algorithm based on repeated local migration. Processors request load from their most heavily loaded neighbors, and these requests form a forest of trees. Load flows are computed on linearized representations of these trees using a logarithmic-time scan. <p> Elements on interproces-sor boundaries are moved from heavily loaded to lightly loaded processors to achieve balance within each tree. This process is iterated to achieve a global balance within the required tolerance. Parallel Sort Inertial Recursive Bisection <ref> [18] </ref> (PSIRB) is an implementation of inertial bisection. The domain is bisected repeatedly in a direction orthogonal to its principal axis of inertia. Inertial coordinates are sorted in parallel to allow operation on a distributed mesh. <p> More details may be found in [10]. The software makes use of both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed. 3.1. Spatial refinement The SCOREC mesh enrichment procedure <ref> [18] </ref> is used to perform spatial (h-) refinement and coarsening in parallel. Error indicator information and threshold values, provided by an application code, are used to mark mesh edges to be coarsened, refined, or to remain unchanged.
Reference: [19] <author> M. S. Shephard and M. K. Georges. </author> <title> Automatic three-dimensional mesh generation by the Finite Octree technique. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 32(4) </volume> <pages> 709-749, </pages> <year> 1991. </year>
Reference-contexts: Tetrahedral regions are used as finite elements in three-dimensional meshes, while triangular faces serve as elements in the two-dimensional case. Initial meshes are created from a CAD model of the problem domain using the SCOREC Finite Octree Automatic Mesh Generator <ref> [19] </ref>. In order to maintain appropriate domain geometry as the mesh is generated, and later as it is enriched, mesh entities are explicitly classified relative to a geometric model of the domain. A Parallel Mesh Database (PMDB) [9, 18] is built on top of MDB.
Reference: [20] <author> A. Sohn, R. Biswas, and H. D. Simon. </author> <title> Impact of load balancing on unstructured adaptive computations for distributed-memory multiprocessors. </title> <booktitle> In Proc. Eighth IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 26-33, </pages> <address> New Orleans, LA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB but relies heavily on a shared-memory architecture and is likely to be inefficient in a true message passing environment [1]. Other enhancements to RSB <ref> [20, 21, 22] </ref> may make it more useful as a dynamic repartitioner, but doubts remain. MeTiS has recently been extended to operate in parallel (ParMeTiS [17]) and may be a viable option. Several dynamic load balancing techniques are available for use with our software.
Reference: [21] <author> R. Van Driessche and D. Roose. </author> <title> An improved spectral bisection algorithm and its application to dynamic load balancing. </title> <journal> Parallel Computing, </journal> <volume> 21 </volume> <pages> 29-48, </pages> <year> 1995. </year>
Reference-contexts: Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB but relies heavily on a shared-memory architecture and is likely to be inefficient in a true message passing environment [1]. Other enhancements to RSB <ref> [20, 21, 22] </ref> may make it more useful as a dynamic repartitioner, but doubts remain. MeTiS has recently been extended to operate in parallel (ParMeTiS [17]) and may be a viable option. Several dynamic load balancing techniques are available for use with our software.
Reference: [22] <author> C. H. Walshaw and M. Berzins. </author> <title> Dynamic load balancing for PDE solvers on adaptive unstructured meshes. </title> <journal> Con-currency: Practice and Experience, </journal> <volume> 7(1) </volume> <pages> 17-28, </pages> <year> 1995. </year>
Reference-contexts: Multilevel Recursive Spectral Bisection (MRSB) has improved the efficiency of RSB but relies heavily on a shared-memory architecture and is likely to be inefficient in a true message passing environment [1]. Other enhancements to RSB <ref> [20, 21, 22] </ref> may make it more useful as a dynamic repartitioner, but doubts remain. MeTiS has recently been extended to operate in parallel (ParMeTiS [17]) and may be a viable option. Several dynamic load balancing techniques are available for use with our software.
References-found: 22

