URL: http://www.cs.princeton.edu/~jlk/tksh/paper/tksh.ps.gz
Refering-URL: http://www.cs.princeton.edu/~jlk/resh.html
Root-URL: http://www.cs.princeton.edu
Email: jlk@cs.princeton.edu  
Title: Tksh: A Tcl Library for KornShell  
Author: Jeffrey Korn 
Address: 35 Olden Street Princeton, NJ 08544  
Affiliation: Princeton University  
Abstract: This paper describes Tksh, an implementation of the Tcl C library written on top of the library for the new KornShell (ksh93). Tksh emulates the behavior of Tcl by using the API that is provided for extending ksh93, which is similar to the Tcl library in that it allows access to variables, functions and other state of the interpreter. This implementation requires no modification to ksh93, and allows Tcl libraries such as Tk to run on top of ksh93 unchanged, making it possible to use shell scripts in place of Tcl scripts. ksh93 is well suited for use with Tk because it is backward compatible with sh, making it both easy to learn and easy to extend existing scripts to provide a graphical user interface. Tksh is not yet another port of Tk to another language it allows Tcl scripts to run without modification using the ksh93 internals. This makes it possible to combine Tcl and ksh93, which is useful for writing ksh93 scripts that use components that have been implemented in Tcl (such as Tk widgets). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Beattie, </author> <title> "TkPerl A port of the Tk toolkit to Perl5", </title> <booktitle> Very High Level Languages Proceedings, USENIX, </booktitle> <year> 1994. </year>
Reference-contexts: With the growing popularity of Tk, there have been efforts to port Tk to other programming languages so users of these languages can take advantage of Tk's features. There are versions of Tk for Perl (TkPerl <ref> [1] </ref>), Scheme (STk [4]), Python (Tkinter [3]), and ML (CamlTk [12]). Tksh has come into existence because of the growing demand for a toolkit with the strengths of ksh93 as a scripting language coupled with the strengths that Tk has for building user interfaces. <p> There are, however, a handful of Tcl commands that use functions which are not part int Tcl_SetCmd (dummy, interp, argc, argv) ClientData dummy; register Tcl_Interp *interp; int argc; char **argv; - if (argc == 2) - char *value; value = Tcl_GetVar (interp, argv <ref> [1] </ref>, TCL_LEAVE_ERR_MSG); if (value == NULL) - return TCL_ERROR; - interp-&gt;result = value; return TCL_OK; else if (argc == 3) - char *result; result = Tcl_SetVar (interp, argv [1], argv [2], TCL_LEAVE_ERR_MSG); if (result == NULL) - return TCL_ERROR; - interp-&gt;result = result; return TCL_OK; else Tcl_AppendResult (interp, "wrong # args: <p> ClientData dummy; register Tcl_Interp *interp; int argc; char **argv; - if (argc == 2) - char *value; value = Tcl_GetVar (interp, argv <ref> [1] </ref>, TCL_LEAVE_ERR_MSG); if (value == NULL) - return TCL_ERROR; - interp-&gt;result = value; return TCL_OK; else if (argc == 3) - char *result; result = Tcl_SetVar (interp, argv [1], argv [2], TCL_LEAVE_ERR_MSG); if (result == NULL) - return TCL_ERROR; - interp-&gt;result = result; return TCL_OK; else Tcl_AppendResult (interp, "wrong # args: should be """, argv [0]," varName ?newValue?""", (char *) NULL); return TCL_ERROR; - of the exported interface.
Reference: [2] <author> M. Bolsky, D. Korn, </author> <title> The New KornShell Command and Programming Language, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: register Tcl_Interp *interp; int argc; char **argv; - if (argc == 2) - char *value; value = Tcl_GetVar (interp, argv [1], TCL_LEAVE_ERR_MSG); if (value == NULL) - return TCL_ERROR; - interp-&gt;result = value; return TCL_OK; else if (argc == 3) - char *result; result = Tcl_SetVar (interp, argv [1], argv <ref> [2] </ref>, TCL_LEAVE_ERR_MSG); if (result == NULL) - return TCL_ERROR; - interp-&gt;result = result; return TCL_OK; else Tcl_AppendResult (interp, "wrong # args: should be """, argv [0]," varName ?newValue?""", (char *) NULL); return TCL_ERROR; - of the exported interface.
Reference: [3] <author> M. Conway, </author> <title> A Tkinter Life Preserver, </title> <note> ftp:// ftp.python.org/pub/python/doc/tkinter-doc.tar.gz, </note> <year> 1994. </year>
Reference-contexts: With the growing popularity of Tk, there have been efforts to port Tk to other programming languages so users of these languages can take advantage of Tk's features. There are versions of Tk for Perl (TkPerl [1]), Scheme (STk [4]), Python (Tkinter <ref> [3] </ref>), and ML (CamlTk [12]). Tksh has come into existence because of the growing demand for a toolkit with the strengths of ksh93 as a scripting language coupled with the strengths that Tk has for building user interfaces.
Reference: [4] <author> E. Gallesio, </author> <title> "Embedding a Scheme Interpreter in the Tk Toolkit", </title> <booktitle> Proceedings of the Tcl/Tk 1993 Workshop, USENIX, </booktitle> <year> 1993. </year>
Reference-contexts: With the growing popularity of Tk, there have been efforts to port Tk to other programming languages so users of these languages can take advantage of Tk's features. There are versions of Tk for Perl (TkPerl [1]), Scheme (STk <ref> [4] </ref>), Python (Tkinter [3]), and ML (CamlTk [12]). Tksh has come into existence because of the growing demand for a toolkit with the strengths of ksh93 as a scripting language coupled with the strengths that Tk has for building user interfaces.
Reference: [5] <author> D. Korn, "ksh: </author> <title> An Extensible High Level Language", </title> <booktitle> Very High Level Languages Proceedings, USENIX, </booktitle> <year> 1994. </year>
Reference-contexts: Performance Although it is hard to precisely measure language performance, ksh93 has been reported to be comparable to the speed of Perl <ref> [5] </ref>. Testing shows there is only a 20% CPU-time penalty from using ksh93 as opposed to a totally C based application [11].
Reference: [6] <author> D. Korn, P. Vo, "Sfio: </author> <title> Safe/Fast String/File IO", </title> <booktitle> Proceedings of Summer USENIX Conference, USENIX, </booktitle> <year> 1991. </year>
Reference-contexts: One of the features introduced in Tcl 7.5 is a new I/O system, which is needed to support versions of Tcl on MacOS and Windows. The I/O system will be implemented for Tksh on top of the I/O system that is part of ksh93, called sfio <ref> [6] </ref>. sfio is a portable I/O library that is backward compatible with the C stdio library. It has functionality similar to the I/O system in Tcl 7.5, including the ability to expand the system for new file types and the ability to do nonblocking I/O.
Reference: [7] <author> B. Krishnamurthy, </author> <title> Practical Reliable UNIX Software, </title> <publisher> Wiley, </publisher> <year> 1995. </year>
Reference-contexts: The debugger runs by spawning an execution of a line oriented debugger such as gdb or dbx and communicating with the process through a pipe. The debugger uses external programs, such as a graph drawing program (called dotty <ref> [7] </ref>) to display data structures. Shell scripts can be specified to be executed at break-points as well. Tksh is used as the debugging language because of its strengths as an interactive command language.
Reference: [8] <author> D. Libes, </author> <title> Exploring Expect, </title> <address> O'Reilly, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Tcl [9] is a general-purpose scripting language which can be reused for a variety of different tools. It is designed to be extensible by allowing operations to be performed through a C library interface, such as adding new commands and manipulating variables. Programs such as expect <ref> [8] </ref> and Tcl-DP have been developed this way. The most well known and one of the most useful extensions to Tcl is Tk, which allows graphical user interfaces to be developed quickly and easily.
Reference: [9] <author> J. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Tcl <ref> [9] </ref> is a general-purpose scripting language which can be reused for a variety of different tools. It is designed to be extensible by allowing operations to be performed through a C library interface, such as adding new commands and manipulating variables.
Reference: [10] <author> J. S. Pendergrast, </author> <title> Desktop KornShell Graphical Programming, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [11] <author> J. S. Pendergrast, </author> <title> Answers to FAQ Questions, </title> <note> http://landru.unx.com/~pend/dtksh.html, 1996. </note>
Reference-contexts: Performance Although it is hard to precisely measure language performance, ksh93 has been reported to be comparable to the speed of Perl [5]. Testing shows there is only a 20% CPU-time penalty from using ksh93 as opposed to a totally C based application <ref> [11] </ref>.
Reference: [12] <author> F. Pessaux, F. Rouaix, </author> <title> The CamlTk Interface, </title> <address> ftp://ftp.inria.fr/lang/caml-light/caml tk.dvi.tar.gz, </address> <year> 1995. </year>
Reference-contexts: With the growing popularity of Tk, there have been efforts to port Tk to other programming languages so users of these languages can take advantage of Tk's features. There are versions of Tk for Perl (TkPerl [1]), Scheme (STk [4]), Python (Tkinter [3]), and ML (CamlTk <ref> [12] </ref>). Tksh has come into existence because of the growing demand for a toolkit with the strengths of ksh93 as a scripting language coupled with the strengths that Tk has for building user interfaces.
Reference: [13] <institution> POSIX Part 2: Shell and Utilities, IEEE Standard 1003.2, </institution> <address> ISO/IEC 9945-2, </address> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: It is possible to write scripts without having to learn a new language. Furthermore, existing shell scripts can be easily adapted to provide a user interface. 2. Conformance to Standards - KornShell conforms to the IEEE P1003.2 and ISO 9945-2 shell standards <ref> [13] </ref>. It deals with the issues of internationalization such as error messages, collation order, and international character classes used in pattern matching. 3. KornShell is a Powerful Language - ksh93 has a full set of programming constructs such as functions, floating-point math, associative arrays, loops, and pattern matching.
Reference: [14] <author> S. Raney, </author> <title> "A comparison of Tcl/Tk, the Desktop KornShell and MetaCard", </title> <note> http:// www.metacard.com, 1996. </note>
Reference-contexts: Performance Although it is hard to precisely measure language performance, ksh93 has been reported to be comparable to the speed of Perl [5]. Testing shows there is only a 20% CPU-time penalty from using ksh93 as opposed to a totally C based application [11]. Another study <ref> [14] </ref> quotes the speed of ksh as being in between the speed of Tcl and Perl. 2 Using Tksh Tksh implements the library interface for Tcl version 7.4, and works with Tk versions 3.6 and 4.0 (support for Tcl version 7.5 and Tk version 4.1 is in development).
Reference: [15] <author> B. Welch, </author> <title> Practical Programming in Tcl and Tk, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
References-found: 15

