URL: http://www.cs.cornell.edu/home/caldwell/papers/cade13_final.ps
Refering-URL: http://www.cs.cornell.edu/home/caldwell/papers.html
Root-URL: 
Title: Classical Tools for Constructive Proof Search  
Author: James L. Caldwell and Judith Underwood 
Date: June 25, 1996  
Abstract: In this paper, we compare program development by extraction from a constructive proof with direct verification of a function. Motivated by the development of a decision procedure for intuitionistic propositional logic, we have taken first steps toward considering how classical type systems might be used in support of constructive systems. To this end we explore two statements of theorems asserting the existence of the tableau decision procedure. The constructive proof of one has a tableau decision procedure as its extraction; the other, if proved classically by providing a explicit witness, results in a verified decision procedure. The systems considered are the classical type theory of the PVS system and the constructive type theory of the Nuprl system. Since lambda terms encode constructive proofs, the question of what the explicit witness of the PVS theorem might prove on the constructive side is also considered.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sten Agerholm, Ilya Beylin, and Peter Dybjer. </author> <title> A comparison of HOL and ALF formalizations of a catagorical coherence theorem. </title> <institution> Computer Science Department, Chalmers University of Technology, Goteborg, Sweden. </institution> <note> Manuscript available at http://www.cs.chalmers.se/~peterd/, March 1996. </note>
Reference-contexts: The approach described there can be viewed as the inverse of the program extraction process and is related to the discussion below in section 3.1. Another comparison of a constructive proof with its classical counterpart can be found in <ref> [1] </ref>. Translation techniques connecting classical logic with constructive logic have a long history (see [8] for a survey). These techniques provide a method for interpreting an arbitrary classical formula in a constructive system such that is provable classically if and only if its translation is provable constructively.
Reference: [2] <author> William Aitken, Robert Constable, and Judith Underwood. </author> <title> Metalogical frameworks II: Using reflected decision procedures. </title> <type> unpublished manuscript. </type>
Reference-contexts: Verified decision procedures provide sound ways of increasing the automation of theorem provers; the decision procedure we describe could even be used as a proof search tool in a system which permitted reflection of proofs <ref> [3, 2] </ref>. This decision procedure is a form of the tableau algorithm [5, 13] which represents the computational content of a constructive proof of the completeness of Kripke models for intuitionistic propositional logic.
Reference: [3] <author> D. Basin and R. Constable. </author> <title> Metalogical frameworks. </title> <editor> In G. Huet and G. Plotkin, editors, </editor> <booktitle> Logical Environments, chapter 1, </booktitle> <pages> pages 1-29. </pages> <publisher> Cambridge University Press, </publisher> <address> Great Britain, </address> <year> 1993. </year>
Reference-contexts: Verified decision procedures provide sound ways of increasing the automation of theorem provers; the decision procedure we describe could even be used as a proof search tool in a system which permitted reflection of proofs <ref> [3, 2] </ref>. This decision procedure is a form of the tableau algorithm [5, 13] which represents the computational content of a constructive proof of the completeness of Kripke models for intuitionistic propositional logic.
Reference: [4] <author> Robert L. Constable and et al. </author> <title> Implementing Mathematics with the Nuprl Development System. </title> <publisher> Prentice-Hall, </publisher> <address> N.J., </address> <year> 1986. </year>
Reference-contexts: The classical language we use is that of PVS, a specification language and verification system based on simply typed higher-order logic [9, 10]. As a constructive system, we will work mainly with the type theory of Nuprl <ref> [4, 7] </ref>, but we shall also consider what properties are needed in general for the interpretation of verification results. 2 From extraction to verification and back If the goal of a constructive proof development is the extraction of a program, it is often the case that parts of the proof are
Reference: [5] <author> Melvin Fitting. </author> <title> Intuitionistic Logic, Model Theory, and Forcing. </title> <address> NorthHolland, </address> <year> 1969. </year>
Reference-contexts: Verified decision procedures provide sound ways of increasing the automation of theorem provers; the decision procedure we describe could even be used as a proof search tool in a system which permitted reflection of proofs [3, 2]. This decision procedure is a form of the tableau algorithm <ref> [5, 13] </ref> which represents the computational content of a constructive proof of the completeness of Kripke models for intuitionistic propositional logic.
Reference: [6] <author> D. J. Howe. </author> <title> Semantic foundations for embedding HOL in Nuprl. </title> <booktitle> In Fifth International Conference on Algebraic Methodology and Software Technology AMAST '96, </booktitle> <month> July </month> <year> 1996. </year> <note> To appear as a volume in LNCS. </note>
Reference-contexts: Some steps have been taken towards such a connection. Howe has developed a modified semantics for Nuprl to allow HOL theorems to be used within Nuprl proofs <ref> [6] </ref>. Coq's Program tactic, described in [11, 12], provides automatic assistance for program verification. The approach described there can be viewed as the inverse of the program extraction process and is related to the discussion below in section 3.1.
Reference: [7] <author> Paul Jackson. </author> <title> The Nuprl proof developemnt system, version 4.2 reference manual and user's guide. </title> <institution> Computer Science Department, Cornell University, Ithaca, N.Y. </institution> <note> Manuscript available at http://www.cs.cornell.edu/Info/Projects/NuPrl/manual/it.html, July 1995. 9 </note>
Reference-contexts: The classical language we use is that of PVS, a specification language and verification system based on simply typed higher-order logic [9, 10]. As a constructive system, we will work mainly with the type theory of Nuprl <ref> [4, 7] </ref>, but we shall also consider what properties are needed in general for the interpretation of verification results. 2 From extraction to verification and back If the goal of a constructive proof development is the extraction of a program, it is often the case that parts of the proof are
Reference: [8] <author> C. Murthy. </author> <title> Extracting Constructive Content from Classical Proofs. </title> <type> PhD thesis, </type> <institution> Cornell University, Dept. of Computer Science, </institution> <year> 1990. </year> <type> (TR 89-1151). </type>
Reference-contexts: Another comparison of a constructive proof with its classical counterpart can be found in [1]. Translation techniques connecting classical logic with constructive logic have a long history (see <ref> [8] </ref> for a survey). These techniques provide a method for interpreting an arbitrary classical formula in a constructive system such that is provable classically if and only if its translation is provable constructively. In this case, however, we consider only particular kinds of classical proofs, namely, program verification results.
Reference: [9] <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2):107125, </volume> <month> February </month> <year> 1995. </year>
Reference-contexts: The classical language we use is that of PVS, a specification language and verification system based on simply typed higher-order logic <ref> [9, 10] </ref>.
Reference: [10] <author> Sam Owre and Natarajan Shankar. </author> <title> The formal semantics of PVS. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA. </address> <note> Draft Manuscript available at http://www.csl.sri.com/~shankar/shankar-drafts.html, October 1995. </note>
Reference-contexts: The classical language we use is that of PVS, a specification language and verification system based on simply typed higher-order logic <ref> [9, 10] </ref>.
Reference: [11] <author> C. Parent. </author> <title> Developing certified programs in the system Coq- The Program tactic. </title> <editor> In H. Barendregt and T. Nipkow, editors, </editor> <title> Types For Proofs and Programs, </title> <booktitle> volume 806 of LNCS, </booktitle> <pages> pages 291-312, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Some steps have been taken towards such a connection. Howe has developed a modified semantics for Nuprl to allow HOL theorems to be used within Nuprl proofs [6]. Coq's Program tactic, described in <ref> [11, 12] </ref>, provides automatic assistance for program verification. The approach described there can be viewed as the inverse of the program extraction process and is related to the discussion below in section 3.1. Another comparison of a constructive proof with its classical counterpart can be found in [1].
Reference: [12] <author> C. Parent. </author> <title> Synthesizing proofs from programs in the Calculus of Inductive Constructions. In Mathematics for Programs Constructions'95, </title> <booktitle> volume 947 of LNCS, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: Some steps have been taken towards such a connection. Howe has developed a modified semantics for Nuprl to allow HOL theorems to be used within Nuprl proofs [6]. Coq's Program tactic, described in <ref> [11, 12] </ref>, provides automatic assistance for program verification. The approach described there can be viewed as the inverse of the program extraction process and is related to the discussion below in section 3.1. Another comparison of a constructive proof with its classical counterpart can be found in [1].
Reference: [13] <author> Judith Underwood. </author> <title> The tableau algorithm for intuitionistic propositional calculus as a constructive completeness proof. </title> <booktitle> In Proceedings of the Workshop on Theorem Proving with Analytic Tableaux, Marseille, France, </booktitle> <pages> pages 245-248, </pages> <year> 1993. </year> <note> Available as Technical Report MPI-I-93-213 Max-PlanckInstitut fur Informatik, Saarbrucken, Germany. 10 </note>
Reference-contexts: Verified decision procedures provide sound ways of increasing the automation of theorem provers; the decision procedure we describe could even be used as a proof search tool in a system which permitted reflection of proofs [3, 2]. This decision procedure is a form of the tableau algorithm <ref> [5, 13] </ref> which represents the computational content of a constructive proof of the completeness of Kripke models for intuitionistic propositional logic.
References-found: 13

