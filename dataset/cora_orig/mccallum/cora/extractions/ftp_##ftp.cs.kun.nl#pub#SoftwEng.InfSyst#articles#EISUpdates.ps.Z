URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EISUpdates.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: A Meta Model for Update in Evolving Information Systems  A Metamodel for Update in Information Systems.  
Author: J.L.H. Oei, H.A. Proper, E.D. Falkenberg Falkenberg, J.L.H. Oei, and H.A. Proper. 
Keyword: Evolution of Information Systems, Schema Evolution, Temporal Information Systems, Historical Information Systems.  
Note: Published as: E.D.  
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands, +31-80-652645  Nijmegen, Nijmegen, The Netherlands, 1992.  
Affiliation: Department of Information Systems, University of Nijmegen,  Department of Information Systems, University of  
Pubnum: Technical Report 92-05,  
Email: fhanoei,erikp,efg@cs.kun.nl  
Abstract: The main focus of this paper is on update in evolving information systems. A framework for the processing of updates in evolving information systems is presented. In this framework, update is regarded as recording, correction or forgetting, and state transitions are considered on three different levels of abstraction, viz. the event level, the recording level and the correction level. A formal specification of this framework is provided as well. Furthermore, the notion of evolution dependency is discussed, taking the dependencies of changes within the universe of discourse into consideration.
Abstract-found: 1
Intro-found: 1
Reference: [AH87] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference: [Ari91] <author> G. Ariav. </author> <title> Temporally oriented data definitions: Managing schema evolution in temporally oriented databases. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 6(6) </volume> <pages> 451-467, </pages> <year> 1991. </year>
Reference-contexts: Directly related research regarding evolving information systems can be found in [MS90] and <ref> [Ari91] </ref>. Indirectly related research can be found in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. a change of their arity.
Reference: [BCG + 87] <author> J. Banerjee, H.-T. Chou, J.F. Garza, W. Kim, D. Woels, and N. Ballou. </author> <title> Data Model Issues for Object-Oriented Applications. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(1) </volume> <pages> 3-26, </pages> <year> 1987. </year>
Reference-contexts: Directly related research regarding evolving information systems can be found in [MS90] and [Ari91]. Indirectly related research can be found in the area of version modelling in engineering databases: <ref> [BCG + 87] </ref>, [Kat90], [JMSV92]. In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. a change of their arity. In this paper, we take a more conceptual approach to evolution of information systems.
Reference: [Bub80] <author> J.A. Bubenko. </author> <title> Information Modelling in the Context of System Development. </title> <editor> In S.H. Lavington, editor, </editor> <booktitle> Information Processing 80, </booktitle> <pages> pages 395-411. </pages> <address> North-Holland/IFIP, Amsterdam, The Netherlands, </address> <year> 1980. </year>
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [FOP92a] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A Conceptual Framework for Evolving Information Systems. </title> <editor> In H.G. Sol and R.L. Crosslin, editors, </editor> <booktitle> Dynamic Modelling of Information Systems II, </booktitle> <pages> pages 353-375. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction As has been argued in <ref> [FOP92a] </ref>, [FOP92b] and [Rod91], there is a substantial demand for information systems which are able to evolve to the same extent and at the same pace at which the supported organisation system evolves due to changes in the universe of discourse. <p> Another limitation of many traditional systems is that they are snapshot systems, i.e. they reflect information valid at a certain point of time, but lack the ability to preserve the history of information. An evolving information system, on the contrary, must be conservative or temporal ([SA85], [SA86], [RBL87], <ref> [FOP92a] </ref>, [FOP92b]) in the sense that it should not forget anything ever fed to the system, unless explicitly asked for, thus allowing for the formulation of queries about the history of the information base (populations). <p> Traditional systems can thus be regarded as `degenerations' of these evolving information systems. For a more elaborate discussion on the difference between traditional and evolving information systems, see <ref> [FOP92a] </ref> and [FOP92b]. An important concept in evolving information systems are updates. In traditional information systems, updates are a non-trivial aspect. In the field of evolving information systems, this is even more the case. The main focus of this paper will be on updates in evolving information systems. <p> Event Level It is generally assumed that in the universe of discourse, described in the information system, a set of stable states can be recognised, and that there are a number of actions that result in event occurences (a change of state occuring at a point of time), see e.g. <ref> [FOP92a] </ref>, [HW93]. As stated before, the elements of the application model reflect the application-dependent or time-variant elements in the universe of discourse, implying that the state of a universe of discourse at a particular point of time can be modelled by means of a set of application model elements. <p> Note that the roll-back performed by the correction is implicitly present in this figure. In the same way corrections requiring the removal or insertion of a recording of an event can be represented. In <ref> [FOP92a] </ref> more examples are given and elaborated. As stated before, the recordings of the user's update requests have to be split up, based on the roll-backs, in a list of sets of recordings. Each of these sets will correspond to an application model's recording history.
Reference: [FOP92b] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> Evolving Information Systems: Beyond Temporal Information Systems. </title> <editor> In A.M. Tjoa and I. Ramos, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 92), </booktitle> <pages> pages 282-287, </pages> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year> <note> Springer-Verlag. </note>
Reference-contexts: 1 Introduction As has been argued in [FOP92a], <ref> [FOP92b] </ref> and [Rod91], there is a substantial demand for information systems which are able to evolve to the same extent and at the same pace at which the supported organisation system evolves due to changes in the universe of discourse. <p> A universe of discourse ([Gri82]) is that part of the organisation which is reflected in the information system. Whenever the term information system is used in this paper, we refer to information systems in a narrower sense, i.e. a computerised information system ([Ver89], <ref> [FOP92b] </ref>). Most traditional information systems hardly support any aspect of evolution. First of all, most traditional information systems only allow for update of the information base, i.e. the set of facts which obeys a fixed (conceptual) schema with a fixed set of constraints. <p> evolving information systems is fl The investigations were partly supported by the Foundation for Computer Science in the Netherlands (SION) with financial support from the Netherlands Organization for Scientific Research (NWO). 1 that no update of any sort should result in the interruption of activities of the evolving organisation ([FOP92a], <ref> [FOP92b] </ref>), i.e. changes should be performed on line. Directly related research regarding evolving information systems can be found in [MS90] and [Ari91]. Indirectly related research can be found in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. <p> Version modelling in engineering databases offers a fast body of knowledge concerning evolution of several types of engineering applications. The requirements for the evolving information systems regarded in this article (see also <ref> [FOP92b] </ref>) are related to the requirements for version modelling as presented in [Kat90]. As stated before, an important requirement for evolving information systems, as considered in this paper, is that changes to the structure can be made on-line. <p> The main difference between a traditional information system and an evolving information system, is best explained in more detail by means of the general architecture for an evolving information system as depicted in figure 1 (for a more elaborate discussion on the architecture of an evolving information system see <ref> [FOP92b] </ref>). The information processor (the computer) performs the information processing activities. This processing involves the acceptance of input messages (requests from the users) which, among other things, may reflect changes of states in the universe of discourse. <p> Another limitation of many traditional systems is that they are snapshot systems, i.e. they reflect information valid at a certain point of time, but lack the ability to preserve the history of information. An evolving information system, on the contrary, must be conservative or temporal ([SA85], [SA86], [RBL87], [FOP92a], <ref> [FOP92b] </ref>) in the sense that it should not forget anything ever fed to the system, unless explicitly asked for, thus allowing for the formulation of queries about the history of the information base (populations). <p> Traditional systems can thus be regarded as `degenerations' of these evolving information systems. For a more elaborate discussion on the difference between traditional and evolving information systems, see [FOP92a] and <ref> [FOP92b] </ref>. An important concept in evolving information systems are updates. In traditional information systems, updates are a non-trivial aspect. In the field of evolving information systems, this is even more the case. The main focus of this paper will be on updates in evolving information systems. <p> As both the information needs and the information itself change in time, information systems have to be updated from time to time. In this paper, a framework for update in evolving information systems is introduced, which is based on the possible causes for update requests. As argued in <ref> [FOP92b] </ref>, update in traditional systems can be regarded as a degeneration of update in evolving systems. This is due to the fact that the requirements of traditional information systems, with respect to update, are less demanding than those of evolving information systems. <p> The framework for the processing of updates in evolving information systems is based on the possible causes for update requests. On this basis, three kinds of update are distinguished: recording, correction and forgetting ([FOP92a], <ref> [FOP92b] </ref>). <p> Such an application model element evolution consists of a sequence of consecutive change-transitions, and can alternatively be seen as a partial function assigning application model elements to points of time (see also [PW93]). 4 As has been argued in e.g. <ref> [FOP92b] </ref> and [SA85], the time of recording of the events is different from its occurence time. The time at which an event occurs in a universe of discourse is called the event time, and the time at which the event is recorded is referred to as the recording time. <p> A world model encompasses the combination of information structure, both static and dynamic constraints, and a population conforming to these requirements. The complete specification of a universe of discourse containing all these components is referred to as the application model ([FOP92a], <ref> [FOP92b] </ref>). These definitions, result in the hierarchy of models, as denoted in figure 9. There the distinct models, their interrelationships, and their respective components are depicted. Most updates of the application model will be concerned with the update of the information base.
Reference: [Gri82] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference: [HPW92] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Data Modelling in Complex Application Domains. </title> <editor> In P. Loucopoulos, editor, </editor> <booktitle> Proceedings of the Fourth International Conference CAiSE'92 on Advanced Information Systems Engineering, volume 593 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-377, </pages> <address> Manchester, United Kingdom, May 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The one part is the conceptual schema, determining the data base structure. Such a conceptual schema is a schema conform a modelling technique like NIAM ([NH89]) or ER ([Che76]), or for more complex applications a schema conform IFO ([AH87]), or PSM ([HW93], <ref> [HPW92] </ref>). The other part is the information base, or population, conform the conceptual schema. Besides the above two traditional parts, an application model may also contain descriptions of activities and behaviour (see for instance [HSV89], [HV91], [WHO92]).
Reference: [HPW93] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal Definition of a Conceptual Language for the Description and Manipulation of Information Models. </title> <journal> Information Systems, </journal> <volume> 18(7), </volume> <year> 1993. </year>
Reference-contexts: for a universe of discourse concerned with personell working for departments at a university: e 1 : ADD Person: 'Erik' works-for Department: 'Information Systems' e 2 : DELETE Person works-for Department: 'Information Systems' The event specifications in the above example are denoted in the semi-natural language LISA-D as defined in <ref> [HPW93] </ref>. The first event denotation (e 1 ) represents the adding of person `Erik' as a coworker of the department of `Information Systems', whereas the second event denotation (e 2 ) represents the deletion of all personell working for the department of `Information Systems'.
Reference: [HSV89] <author> K.M. van Hee, L.J. Somers, and M. Voorhoeve. </author> <title> Executable Specifications for Distributed Information Systems. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information System Concepts: An In-depth Analysis, </booktitle> <pages> pages 139-156. </pages> <address> North-Holland/IFIP, Amsterdam, The Netherlands, </address> <year> 1989. </year>
Reference-contexts: The other part is the information base, or population, conform the conceptual schema. Besides the above two traditional parts, an application model may also contain descriptions of activities and behaviour (see for instance <ref> [HSV89] </ref>, [HV91], [WHO92]). The intention of an evolving information system is, to be able to change all parts of the application model, and not just the information base as is the case in most traditional information systems.
Reference: [HV91] <author> K.M. van Hee and P.A.C. Verkoulen. </author> <title> Integration of a data model and high-level petri nets. </title> <booktitle> In Proceedings of the Twelfth International Conference on Applications and Theory of Petri Nets, </booktitle> <pages> pages 410-431, </pages> <address> Gjern, Denmark, </address> <year> 1991. </year>
Reference-contexts: The other part is the information base, or population, conform the conceptual schema. Besides the above two traditional parts, an application model may also contain descriptions of activities and behaviour (see for instance [HSV89], <ref> [HV91] </ref>, [WHO92]). The intention of an evolving information system is, to be able to change all parts of the application model, and not just the information base as is the case in most traditional information systems.
Reference: [HW92] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Formalisation of techniques: chopping down the methodology jungle. </title> <journal> Information and Software Technology, </journal> <volume> 34(1) </volume> <pages> 57-65, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In this section we provide an overview of these evolution dependencies. Before doing this, we define the contents of an application model in more detail. An application model, being a complete specification of a universe of discourse typically ([Gri82], <ref> [HW92] </ref>) contains the following components: 1. An intentional description of the set of populations of the universe of discourse. This is referred to as the underlying information structure. 2. A further refinement of the set of allowed populations by means of static constraints. 3.
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Level It is generally assumed that in the universe of discourse, described in the information system, a set of stable states can be recognised, and that there are a number of actions that result in event occurences (a change of state occuring at a point of time), see e.g. [FOP92a], <ref> [HW93] </ref>. As stated before, the elements of the application model reflect the application-dependent or time-variant elements in the universe of discourse, implying that the state of a universe of discourse at a particular point of time can be modelled by means of a set of application model elements.
Reference: [JMSV92] <author> M. Jarke, J. Mylopoulos, J.W. Schmidt, and Y. Vassiliou. DAIDA: </author> <title> An Environment for Evolving Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 20(1) </volume> <pages> 1-50, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Directly related research regarding evolving information systems can be found in [MS90] and [Ari91]. Indirectly related research can be found in the area of version modelling in engineering databases: [BCG + 87], [Kat90], <ref> [JMSV92] </ref>. In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. a change of their arity. In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population). <p> In these systems, the support of evolution is restricted to version managament. This latter notion of evolution is the approach to evolving information as taken in e.g. <ref> [JMSV92] </ref>.
Reference: [Kat90] <author> R.H. Katz. </author> <title> Toward a Unified Framework for Version Modelling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <year> 1990. </year>
Reference-contexts: Directly related research regarding evolving information systems can be found in [MS90] and [Ari91]. Indirectly related research can be found in the area of version modelling in engineering databases: [BCG + 87], <ref> [Kat90] </ref>, [JMSV92]. In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. a change of their arity. In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population). <p> Version modelling in engineering databases offers a fast body of knowledge concerning evolution of several types of engineering applications. The requirements for the evolving information systems regarded in this article (see also [FOP92b]) are related to the requirements for version modelling as presented in <ref> [Kat90] </ref>. As stated before, an important requirement for evolving information systems, as considered in this paper, is that changes to the structure can be made on-line.
Reference: [MS90] <author> E. McKenzie and R. Snodgrass. </author> <title> Schema Evolution and the Relational Algebra. </title> <journal> Information Systems, </journal> <volume> 15(2) </volume> <pages> 207-232, </pages> <year> 1990. </year>
Reference-contexts: Directly related research regarding evolving information systems can be found in <ref> [MS90] </ref> and [Ari91]. Indirectly related research can be found in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. a change of their arity. <p> Directly related research regarding evolving information systems can be found in <ref> [MS90] </ref> and [Ari91]. Indirectly related research can be found in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. a change of their arity. In this paper, we take a more conceptual approach to evolution of information systems. Furthermore, we do not restrict evolution to the data model (and its population).
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference: [OHFB92] <author> J.L.H. Oei, L.J.G.T. van Hemmen, E.D. Falkenberg, and S. Brinkkemper. </author> <title> The Meta Model Hierarchy: A Framework for Information System Concepts and Techniques. </title> <type> Technical Report 92-17, </type> <institution> Department of Information Systems, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: The intention of an evolving information system is, to be able to change all parts of the application model, and not just the information base as is the case in most traditional information systems. In <ref> [OHFB92] </ref> the evolvability of the composing parts of an information system is taken even further. There the evolution of meta models is considered.
Reference: [OPF92] <author> J.L.H. Oei, H.A. Proper, and E.D. Falkenberg. </author> <title> Modelling the Evolution of Information Systems. </title> <type> Technical Report 92-36, </type> <institution> Department of Information Systems, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: To accomplish these kinds of corrections, it must be possible to `travel' backwards in the sequence of recordings which is ordered on time of recording. The operation which accomplishes this task is called a roll-back, and is the most primitive form of correction. In <ref> [OPF92] </ref> a formal definition is given of how the above discussed three kinds of corrections can be mapped onto roll-backs and (re)-recordings. It is therefore sufficient to consider roll-backs as the only corrections in the scope of this article. This has been illustrated in figure 2. <p> A recorded event may have to be replaced by another one, a recording may have to be inserted in the sequence of already recorded events, and a recording may have to be removed. As shown in <ref> [OPF92] </ref>, these three kinds of recordings can be implemented by means of a roll-back and a series of re-recordings of already recorded (correct) events. In all cases which need a correction, a roll-back should take place to the latest application model history which is correct.
Reference: [PW93] <author> H.A. Proper and Th.P. van der Weide. </author> <title> Towards a General Theory for the Evolution of Application Models. In M.E. </title> <editor> Orlowska and M. Papazoglou, editors, </editor> <booktitle> Proceedings of the Fourth Australian Database Conference, Advances in Database Research, </booktitle> <pages> pages 346-362. </pages> <publisher> World Scientific, </publisher> <address> Brisbane, Australia, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Change-transitions are needed in order to maintain the evolution of an application model element. Such an application model element evolution consists of a sequence of consecutive change-transitions, and can alternatively be seen as a partial function assigning application model elements to points of time (see also <ref> [PW93] </ref>). 4 As has been argued in e.g. [FOP92b] and [SA85], the time of recording of the events is different from its occurence time.
Reference: [RBL87] <editor> C. Rolland, F. Bodart, and M. Leonard, editors. </editor> <booktitle> Temporal Aspects in Information Systems. </booktitle> <address> North-Holland/IFIP, Amsterdam, The Netherlands, </address> <year> 1987. </year>
Reference-contexts: Another limitation of many traditional systems is that they are snapshot systems, i.e. they reflect information valid at a certain point of time, but lack the ability to preserve the history of information. An evolving information system, on the contrary, must be conservative or temporal ([SA85], [SA86], <ref> [RBL87] </ref>, [FOP92a], [FOP92b]) in the sense that it should not forget anything ever fed to the system, unless explicitly asked for, thus allowing for the formulation of queries about the history of the information base (populations).
Reference: [Rod91] <author> J.F. Roddick. </author> <title> Dynamically changing schemas within database models. </title> <journal> The Australian Computer Journal, </journal> <volume> 23(3) </volume> <pages> 105-109, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: 1 Introduction As has been argued in [FOP92a], [FOP92b] and <ref> [Rod91] </ref>, there is a substantial demand for information systems which are able to evolve to the same extent and at the same pace at which the supported organisation system evolves due to changes in the universe of discourse.
Reference: [SA85] <author> R. Snodgrass and I. Ahn. </author> <title> A Taxonomy of Time in Databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 236-246, </pages> <address> Austin, Texas, </address> <year> 1985. </year>
Reference-contexts: In such systems, the distinction between event time the time at which an event occurs in the universe of discourse and recording time the time at which the event is recorded in the information systemand recording time is of great importance ([Bub80], <ref> [SA85] </ref>, [SA86], [Sno90]). Traditional systems can thus be regarded as `degenerations' of these evolving information systems. For a more elaborate discussion on the difference between traditional and evolving information systems, see [FOP92a] and [FOP92b]. An important concept in evolving information systems are updates. <p> Such an application model element evolution consists of a sequence of consecutive change-transitions, and can alternatively be seen as a partial function assigning application model elements to points of time (see also [PW93]). 4 As has been argued in e.g. [FOP92b] and <ref> [SA85] </ref>, the time of recording of the events is different from its occurence time. The time at which an event occurs in a universe of discourse is called the event time, and the time at which the event is recorded is referred to as the recording time.
Reference: [SA86] <author> R. Snodgrass and I. Ahn. </author> <title> Temporal Databases. </title> <journal> IEEE Computer, </journal> <volume> 19(9) </volume> <pages> 35-42, </pages> <year> 1986. </year>
Reference-contexts: Another limitation of many traditional systems is that they are snapshot systems, i.e. they reflect information valid at a certain point of time, but lack the ability to preserve the history of information. An evolving information system, on the contrary, must be conservative or temporal ([SA85], <ref> [SA86] </ref>, [RBL87], [FOP92a], [FOP92b]) in the sense that it should not forget anything ever fed to the system, unless explicitly asked for, thus allowing for the formulation of queries about the history of the information base (populations). <p> In such systems, the distinction between event time the time at which an event occurs in the universe of discourse and recording time the time at which the event is recorded in the information systemand recording time is of great importance ([Bub80], [SA85], <ref> [SA86] </ref>, [Sno90]). Traditional systems can thus be regarded as `degenerations' of these evolving information systems. For a more elaborate discussion on the difference between traditional and evolving information systems, see [FOP92a] and [FOP92b]. An important concept in evolving information systems are updates.
Reference: [Sno90] <author> R. Snodgrass. </author> <title> Temporal Databases Status and Research Directions. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 19(4) </volume> <pages> 83-89, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: In such systems, the distinction between event time the time at which an event occurs in the universe of discourse and recording time the time at which the event is recorded in the information systemand recording time is of great importance ([Bub80], [SA85], [SA86], <ref> [Sno90] </ref>). Traditional systems can thus be regarded as `degenerations' of these evolving information systems. For a more elaborate discussion on the difference between traditional and evolving information systems, see [FOP92a] and [FOP92b]. An important concept in evolving information systems are updates. In traditional information systems, updates are a non-trivial aspect.
Reference: [Ver89] <author> A.A. Verrijn-Stuart. </author> <title> Some Reflections on the Namur Conference on Information Systems Concepts. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <title> Information System Concepts: An In-depth Analysis. </title> <address> North-Holland/IFIP, Amsterdam, The Netherlands, </address> <year> 1989. </year>
Reference: [WHO92] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 167 - 223. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: The other part is the information base, or population, conform the conceptual schema. Besides the above two traditional parts, an application model may also contain descriptions of activities and behaviour (see for instance [HSV89], [HV91], <ref> [WHO92] </ref>). The intention of an evolving information system is, to be able to change all parts of the application model, and not just the information base as is the case in most traditional information systems.
Reference: [Win90] <author> J.J.V.R. Wintraecken. </author> <title> The NIAM Information Analysis Method: Theory and Practice. </title> <publisher> Kluwer, </publisher> <address> Deventer, The Netherlands, </address> <year> 1990. </year> <month> 19 </month>
Reference-contexts: The model depicted there is in the style of the NIAM modelling technique ([NH89], <ref> [Win90] </ref>). ' $ T r & % ' $ t & % RbTo RcAt UI rb RcOf RcAt UI rc UI occ OccOf OccAt - 3 A Conceptual Framework for Update Processing Based on the notion of update as discussed in the previous section, a conceptual framework for update is presented
References-found: 29

