URL: http://www.cs.umd.edu/users/musliner/papers/salsa.ps.Z
Refering-URL: http://www.cs.umd.edu/users/musliner/
Root-URL: 
Email: musliner@umiacs.umd.edu  
Title: Using Abstraction and Nondeterminism to Plan Reaction Loops  
Author: David J. Musliner 
Address: College Park, Maryland 20742  
Affiliation: Institute for Advanced Computer Studies The University of Maryland  
Abstract: By looping over a set of behaviors, reactive systems use repetition and feedback to deal with errors and environmental uncertainty. Their robust, fault-tolerant performance makes reactive systems desirable for executing plans. However, most planning systems cannot reason about the loops that characterize reactive systems. In this paper, we show how the structured application of abstraction and nondeterminism can map complex planning problems requiring loop plans into a simpler representation amenable to standard planning technologies. In the process, we illustrate key recipes for automatically building predictable reactive systems that are guaranteed to achieve their goals. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Agre, P. E., and Chapman, D. </author> <year> 1987. </year> <title> Pengi: An implementation of a theory of activity. </title> <booktitle> In Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> 268-272. </pages>
Reference-contexts: There are several tough problems hidden in this seemingly simple domain, including plan loops, a counting variable, and a special type of goal. However, before we address these problems with the abstraction techniques described above, we must first utilize a different form of abstraction called indexical features <ref> (Agre & Chapman 1987) </ref>. This technique is used to avoid the enumeration problems that result from individuating specific objects in the environment.
Reference: <author> Allen, J. F. </author> <year> 1983. </year> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the ACM 26(11) </journal> <pages> 832-843. </pages>
Reference-contexts: To make sure that the agent does not starve from lack of salsa, the planner must reason about the relative speeds and frequencies of shopping trips, salsa consumption, and other activities. While there have been many forays into temporal representations for planners <ref> (e.g., Allen 1983) </ref>, none have focused on the sort of repeated, long-term behaviors we are interested in producing. Instead, most temporal logic systems focus on maintaining partial ordering constraints among time intervals, for non-looping plans.
Reference: <author> Drummond, M. </author> <year> 1985. </year> <title> Refining and extending the procedural net. </title> <booktitle> In Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> 528-531. </pages>
Reference: <author> Firby, R. J. </author> <year> 1987. </year> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> 202-206. </pages>
Reference-contexts: When executing a TAP, the RTS evaluates the test expression and, if it returns true, the RTS executes the corresponding action. TAPs differ from other reactive mechanisms such as RAPs <ref> (Firby 1987) </ref> in two fundamental ways: first, TAPs are automatically generated by CIRCA's planning system, and second, TAPs specify how frequently they must be executed in order to meet domain deadlines.
Reference: <author> Musliner, D. J.; Durfee, E. H.; and Shin, K. G. </author> <year> 1993. </year> <title> CIRCA: A cooperative intelligent real-time control architecture. </title> <journal> IEEE Trans. Systems, Man, and Cybernetics 23(6) </journal> <pages> 1561-1574. </pages>
Reference-contexts: We begin by introducing a simple, intuitive example to illustrate the first abstraction technique and how it can be useful in the automatic planning of loops. We then present a brief overview of the Cooperative Intelligent Real-Time Control Architecture (CIRCA) <ref> (Musliner, Durfee, & Shin 1993) </ref>, a system designed to automatically plan and execute reactive behaviors. We then provide a more detailed example showing how CIRCA uses abstraction, nondeterminism, and an "abstract" time representation to plan reactive loops. <p> Overview of CIRCA As illustrated in Figure 3, CIRCA consists of three subsystems operating in parallel <ref> (Musliner, Durfee, & Shin 1993) </ref>. The AI Subsystem (AIS) acts as a planning system, reasoning about a model of the domain and deriving appropriate reaction plans. These plans are sent to the Scheduler module, along with timing constraints expressing how frequently each reaction must be executed.
Reference: <author> Musliner, D. J.; Durfee, E. H.; and Shin, K. G. </author> <year> 1994. </year> <title> World modeling for the dynamic construction of real-time control plans. </title> <note> To appear in Artificial Intelligence. </note>
Reference-contexts: The world model and planning algorithm that the AIS uses to develop TAP plans are detailed in <ref> (Musliner, Durfee, & Shin 1994) </ref>.
Reference: <author> Nilsson, N. J. </author> <year> 1980. </year> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Press, </publisher> <address> Palo Alto, CA. </address>
Reference: <author> Schoppers, M. </author> <year> 1990. </year> <title> Automatic synthesis of perception driven discrete event control laws. </title> <booktitle> In Proc. 5th IEEE Int'l Symposium on Intelligent Control, </booktitle> <pages> 410-416. </pages>
Reference-contexts: Furthermore, because the design and construction process is not automated, building new reactive systems for different domains requires lengthy human interactions. Several researchers have recognized that traditional AI planning systems might be used to automate the ad hoc process of designing reactive systems <ref> (e.g., Schoppers 1990) </ref>, leading to significant advances in performance predictability and rapid system adaptation. However, most AI planning systems are unable to plan in domains that involve the type of repetition (looping) characteristic of reactive systems.
Reference: <author> Wilkins, D. E. </author> <year> 1988. </year> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: To build a reaction that would yield the state-space behavior shown in Figure 2, we still need a planner to decide which of the various applicable operators should actually be executed in any particular world tuition, as well as with <ref> (Wilkins 1988) </ref>, in that our abstract models match larger sets of possible worlds than less-abstract models. state. The planner must decide that we should invoke the hammer-blow action only when the nail is not yet flush (i.e., in state B only, not in state C).
References-found: 9

