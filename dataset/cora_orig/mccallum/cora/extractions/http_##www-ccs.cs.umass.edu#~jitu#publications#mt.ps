URL: http://www-ccs.cs.umass.edu/~jitu/publications/mt.ps
Refering-URL: http://www-ccs.cs.umass.edu/~jitu/publications.html
Root-URL: 
Email: e-mail: fjitu, stankovicg@cs.umass.edu  
Title: Programming Language Support for Implementation of Statistical Quality of Service Guarantees and Fault Tolerance  
Author: Jitendra D. Padhye and John A. Stankovic 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: This paper describes new programming language primitives that are designed to support statistical Quality of Service (QoS) guarantees and simple fault tolerance. We believe that such features would be useful in the implementation of next generation mechatronic systems that combine real time control applications and multimedia [GSRS96]. The paper does not describe a complete programming language, but instead builds on top of the Real-Time Concurrent C (RTCC) language described in [GR91]. Five new language constructs are introduced, each for a specific purpose. These are: specification of statistical QoS requirements, specification of complex value functions, synchronization of periodic processes, barrier synchronization of periodic processes, and simple fault tolerance via explicit task-processor binding. In each case we provide a justification for incorporating the feature into RTCC. The paper is intended as a presentation of our work in progress and discussion of possible research directions. 
Abstract-found: 1
Intro-found: 1
Reference: [BSS95] <author> A. Bondavalli, J. Stankovic and L. Stringini, </author> <title> "Adaptable Fault Tolerance for Real Time Systems," Responsive Computer Systems: Steps Toward Fault Tolerant Real-Time Systems, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993, </year> <pages> pp. 187-208. </pages>
Reference-contexts: The authors also present an error model and show how it allows better resource optimization. The authors, however, do not discuss a procedural programming language implementation of their work. A general framework for adaptive fault tolerance is proposed in <ref> [BSS95] </ref>. The authors describe syntax and semantics of FERT (Fault Tolerant Entities for Real Time), which is presented as an intermediate level structure between system design and application code.
Reference: [GPLRS95] <author> A. Guha, A. Pavan, J. Liu, A. Rastogi and T. Stevents, </author> <title> "Supporting Real-Time and Multimedia Applications on Mercuri Testbed," </title> <journal> IEEE Journal on Selected Areas in Communications, Vol.13, </journal> <volume> No. 4, </volume> <month> May </month> <year> 1995. </year>
Reference-contexts: However, most of these languages lack features to support statistical Quality of Service 1 (QoS) guarantees and complex value functions to describe post-deadline behavior. We believe that such features would be useful in the implementation of next generation mechatronic systems that combine real time control applications and multimedia [GSRS96], <ref> [GPLRS95] </ref>. This paper is an attempt to describe a minimal but general set of language constructs that can be incorporated in the Real-Time Concurrent C (RTCC) language described in [GR91], to satisfy these needs. <p> The multimedia technology can also be used in planning and design. Live images from the plant floor are used to create a virtual-reality, 3-D map of the plant to aid in design and process modifications. In <ref> [GPLRS95] </ref>, the authors describe a prototype control system that uses infra-red video data to detect a flaw in a coating process and sound an alarm when appropriate.
Reference: [GR91] <author> N. Gehani and K. Ramamritham, </author> <title> "Real-Time Concurrent C: A Language for Programming Dynamic Real Time Systems,"J. Real Time Systems, </title> <journal> Vol. </journal> <volume> 3, No. 4, </volume> <month> De-cember </month> <year> 1991, </year> <pages> pp. 377-405. </pages>
Reference-contexts: 1 Introduction Programming language support for real time systems has long been an active area of research. Several programming languages such as Euclid [KS86], Flex [KL91], Real-Time Concurrent C <ref> [GR91] </ref> and Real-Time C++ [ITM90] have been described in the literature. Many of these languages are designed to address the issues faced in traditional real time applications. These languages provide constructs for specifying deadlines and periods of tasks, bounded-waiting IPC primitives and critical regions. <p> This paper is an attempt to describe a minimal but general set of language constructs that can be incorporated in the Real-Time Concurrent C (RTCC) language described in <ref> [GR91] </ref>, to satisfy these needs. In addition, we also describe a programming language primitive that can assign tasks to processors and demonstrate how simple fault tolerance can be achieved by using it in conjunction with bounded-waiting IPC calls provided by RTCC. <p> However, RTCC had no features for supporting multimedia. By adding real time and multimedia features to C, we can build upon a widely used programming language. In this section we briefly describe several relevant features of RTCC. More details can be found in <ref> [GR91] </ref>. * Activities with Deadlines: The language allows timeouts to be associated with any statement using the within deadline construct. If the execution of the statement is not completed within the given time limit, the execution is aborted. <p> by using asynchronous communication primitives, we have managed to keep the execution time of the controller predictable, even if the application processors were to fail completely. 5 Related Work The Real Time Concurrent C language (RTCC), which forms the basis of this paper, was proposed by Gehani and Ramamritham in <ref> [GR91] </ref>. The language is an extension of the Concurrent C language. The language provides facilities (some of which have been described previously in this paper) to support description of periodic and non-periodic tasks and deadline constraints.
Reference: [GSR96] <author> O. Gonzalez, J. Stankovic and K. Ramamritham, </author> <title> "Support for Adaptive Fault Tolerance on the Spring Real-Time System," </title> <institution> Technical Report Department of Computer Science, University of Massachusetts, </institution> <year> 1996. </year> <month> 15 </month>
Reference-contexts: In addition, we also describe a programming language primitive that can assign tasks to processors and demonstrate how simple fault tolerance can be achieved by using it in conjunction with bounded-waiting IPC calls provided by RTCC. Mechanisms for adaptive fault tolerance are being further explored by our group <ref> [GSR96] </ref>. This paper is intended as a presentation of our work in progress and discussion of possible research directions. The rest of the paper is organized as follows. In Section 2, we briefly describe the relevant features of the RTCC language.
Reference: [GSRS96] <author> O. Gonzalez, S. Sen, K. Ramamritham and J. Stankovic, </author> <title> "Incorporation of Multime--dia Capabilities in Distributed Real-Time Applications,"To appear in Workshop on Databases: Active and Real-Time (Concepts meet Practice) to be held in Rockville, </title> <type> Maryland November 15, </type> <year> 1996. </year>
Reference-contexts: However, most of these languages lack features to support statistical Quality of Service 1 (QoS) guarantees and complex value functions to describe post-deadline behavior. We believe that such features would be useful in the implementation of next generation mechatronic systems that combine real time control applications and multimedia <ref> [GSRS96] </ref>, [GPLRS95]. This paper is an attempt to describe a minimal but general set of language constructs that can be incorporated in the Real-Time Concurrent C (RTCC) language described in [GR91], to satisfy these needs. <p> However, as high bandwidth networking, processing power and physical memory become cheaper, incorporation of multimedia technology into control applications is becoming feasible. Control applications can benefit from multimedia technologies in many different ways. The authors of <ref> [GSRS96] </ref> suggest that the technology can be used at two different levels operator and management. At the operator level, the multimedia (audio and video) technology could be used to enhance safety and confirm readings made by other, conventional sensors.
Reference: [ITM90] <author> Y. Ishikawa, H. Tokuda and C. Mercer, </author> <title> "Object-Oriented Real-Time Language Design: Constructs for Timing Constraints," </title> <booktitle> Proc. </booktitle> <volume> ECOOP/OOPSLA '90, </volume> <month> October </month> <year> 1990, </year> <pages> pp. 289-298. </pages>
Reference-contexts: 1 Introduction Programming language support for real time systems has long been an active area of research. Several programming languages such as Euclid [KS86], Flex [KL91], Real-Time Concurrent C [GR91] and Real-Time C++ <ref> [ITM90] </ref> have been described in the literature. Many of these languages are designed to address the issues faced in traditional real time applications. These languages provide constructs for specifying deadlines and periods of tasks, bounded-waiting IPC primitives and critical regions. <p> FLEX also provides support for describing complex timing relationship between tasks. However, it lacks features for specifying statistical QoS guarantees and complex value functions. Another significant drawback of the language is that the timing guarantees provided by the language may not hold under worst case assumption. In <ref> [ITM90] </ref> the authors describe the Real Time C++ language.
Reference: [KL91] <author> K. Kenny and K. Lin, </author> <title> "Building Flexible Real Time Systems using the Flex language," </title> <journal> IEEE Computer, </journal> <volume> Vol. 24, No. 5, </volume> <month> May </month> <year> 1991, </year> <pages> pp. 70-78. </pages>
Reference-contexts: 1 Introduction Programming language support for real time systems has long been an active area of research. Several programming languages such as Euclid [KS86], Flex <ref> [KL91] </ref>, Real-Time Concurrent C [GR91] and Real-Time C++ [ITM90] have been described in the literature. Many of these languages are designed to address the issues faced in traditional real time applications. These languages provide constructs for specifying deadlines and periods of tasks, bounded-waiting IPC primitives and critical regions. <p> The language, however, does not provide support for describing statistical QoS constraints, mutual timing constraints between multiple periodic tasks and support for specifying complex value functions. No support for specifying fault tolerance is provided either. The FLEX language is described in <ref> [KL91] </ref>. The language is based on the concept of imprecise computations, allowing for the tradeoff between performance and quality. FLEX also provides support for describing complex timing relationship between tasks. However, it lacks features for specifying statistical QoS guarantees and complex value functions.
Reference: [KS86] <author> E. Kligerman and A. Stoyenko, </author> <title> "Real-Time Euclid: A Language for Reliable Real-Time Systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-12, No. 9, </volume> <month> September </month> <year> 1986, </year> <pages> pp. 941-949. </pages>
Reference-contexts: 1 Introduction Programming language support for real time systems has long been an active area of research. Several programming languages such as Euclid <ref> [KS86] </ref>, Flex [KL91], Real-Time Concurrent C [GR91] and Real-Time C++ [ITM90] have been described in the literature. Many of these languages are designed to address the issues faced in traditional real time applications. These languages provide constructs for specifying deadlines and periods of tasks, bounded-waiting IPC primitives and critical regions.
Reference: [PICL] <author> G. Geist, M. Heath, B. Peyton and P. Worley, "PICL, </author> <title> A PORTABLE INSTRUMENTED COMMUNICATION LIBRARY, C REFERENCE MANUAL," </title> <institution> Oak Ridge National Laboratory, </institution> <year> 1990. </year>
Reference-contexts: Sophisticated barrier synchronization primitives, like those described in <ref> [PICL] </ref> have been developed and analyzed. We introduce a very simple version here 3 . Our synchronization primitive allows for a one-time synchronization of two periodic processes. The processes need not have the same period; indeed, their periods can be relatively prime. <p> Let us also assume that the description for each type of corrosion is done in approximately 20 invocations 3 To be precise, this construct is semantically a little different from the barrier synchronization process described in <ref> [PICL] </ref>.
Reference: [SR91] <author> J. Stankovic and K. Ramamritham, </author> <title> "The Spring Kernel: A New Paradigm for Real Time Systems," </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 62-72. </pages>
Reference: [SWM95] <author> Richard Staehli, Jonathan Walpole and David Maier, </author> <title> "Quality of Service Specification for Multimedia Presentations," </title> <journal> Multimedia Systems, </journal> <volume> Vol. 3, number 5/6, </volume> <month> November </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: The language is built around the rate-monotonic scheduling paradigm. Guarantees are provided only to periodic processes and for aperiodic code segments, exception handling is provided when deadlines are missed. The language provides no support to describe statistical QoS constraints. In <ref> [SWM95] </ref>, the authors describe a data model for multimedia presentations that allows formal specification of QoS constraints and based on an ideal presentation output. The authors also present an error model and show how it allows better resource optimization.
References-found: 11

