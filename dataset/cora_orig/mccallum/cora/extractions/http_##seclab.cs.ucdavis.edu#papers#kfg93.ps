URL: http://seclab.cs.ucdavis.edu/papers/kfg93.ps
Refering-URL: http://seclab.cs.ucdavis.edu/papers.html
Root-URL: http://www.cs.ucdavis.edu
Title: Analysis of an Algorithm for Distributed Recognition and Accountability  
Author: Calvin Ko Deborah A. Frincke Terrence Goan, Jr. L. Todd Heberlein Karl Levitt Biswanath Mukherjee Christopher Wee 
Address: Davis, CA 95616  
Affiliation: Department of Computer Science University of California, Davis  
Abstract: Computer and network systems are vulnerable to attacks. Abandoning the existing huge infrastructure of possibly-insecure computer and network systems is impossible, and replacing them by totally secure systems may not be feasible or cost effective. A common element in many attacks is that a single user will often attempt to intrude upon multiple resources throughout a network. Detecting the attack can become significantly easier by compiling and integrating evidence of such intrusion attempts across the network rather than attempting to assess the situation from the vantage point of only a single host. To solve this problem, we suggest an approach for distributed recognition and accountability (DRA), which consists of algorithms which "process", at a central location, distributed and asynchronous "reports" generated by computers (or a subset thereof) throughout the network. Our highest-priority objectives are to observe ways by which an individual moves around in a network of computers, including changing user names to possibly hide his/her true identity, and to associate all activities of multiple instances of the same individual to the same network-wide user. We present the DRA algorithm and a sketch of its proof under an initial set of simplifying albeit realistic assumptions. Later, we relax these assumptions to accommodate pragmatic aspects such as missing or delayed "reports", clock skew, tampered "reports", etc. We believe that such algorithms will have widespread applications in the future, particularly in intrusion-detection systems. 
Abstract-found: 1
Intro-found: 1
Reference: [HDL + 90] <author> L. Heberlein, G. Dias, K. Levitt, B. Mukherjee, J. Wood, and D. Wolber. </author> <title> A network security monitor. </title> <booktitle> Proceedings of the 1990 Symposium on Security and Privacy, </booktitle> <pages> pages 296-304, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Much of this information comes from HAYSTACK [Sma88], which has been incorporated into the Host Monitor. The LAN is monitored by a subset of the NSM <ref> [HDL + 90] </ref>. This LAN Monitor observes all traffic along the network and reports activity such as rlogin and telnet connections, security-related services, and the use of sensitive keywords (such as passwd) to the Director.
Reference: [HML + 91] <author> L. Heberlein, B. Mukherjee, K. Levitt, G. Dias, and D. Mansur. </author> <title> Towards detecting intrusions in a net-worked environment. </title> <booktitle> Proceeding of the 14th DOE Conference on Computer Security, </booktitle> <year> 1991. </year>
Reference-contexts: network packets associated with audit data), immediate "report" generation (i.e., all "reports" are in sequence), the network connecting all host computers is an Ethernet local area network (LAN) so that all of their network activities can be picked up by a LAN monitor such as the Network Security Monitor (NSM) <ref> [HML + 91] </ref>, etc. Later, some of the simplifying assumptions are relaxed, and the corresponding necessary changes to the DRA algorithm are discussed. Proofs of correctness are outlined to demonstrate that the DRA algorithm is robust under the simplifying assumptions.
Reference: [HML92] <author> L. Heberlein, B. Mukherjee, and K. Levitt. </author> <title> Internet security monitor: An intrusion-detection system for large-scale networks. </title> <booktitle> Proceedings of the 15th National Computer Security Conference, </booktitle> <year> 1992. </year>
Reference-contexts: tracks by logging onto an unmonitored host and then back onto the monitored network. (See Figure 5.) However, in many environments, hosts without monitors or even audit trails are a reality, so we are working with a technology we call thumbprinting to provide some measure of accountability through unmonitored hosts <ref> [HML92] </ref>. Suppose a user u1 on host A performs a remote login to user u2 on host B, and from host B, performs a remote login to user u3 on host C. <p> If these assumptions hold, we can determine, with some degree of assurance, whether user u3 on host C is really the same as user u1 on host A by using what we call thumbprints. A thumbprint is a profile of connection activity over a specified period of time <ref> [HML92] </ref>. If two connections have similar thumbprints over several segments of time, then we can say with some amount of certainty that the two connections are really part of an extended connection.
Reference: [KFH + 93] <author> C. Ko, D. Frincke, T. Heberlein, K. Levitt, and B. Mukherjee. </author> <title> An algorithm for distributed recognition and accountability. </title> <type> Technical report, </type> <institution> CSE-93-7, UC Davis, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: due to timeout or user exit), only a CE message is sent when the connection closes, since there was no session start. 4.3 Overview of the DRA Algorithm We present an overview of the DRA algorithm and its proof, a detailed description and proof of the algorithm is presented in <ref> [KFH + 93] </ref>. The DRA algorithm maintains a directed graph G (V,E), a message working set (MWS), and a connection working set (CWS) throughout the execution of the system. The directed graph G (V,E) records the current connection status of the system.
Reference: [SB + 91a] <author> S. Snapp, J. Brentano, et al. </author> <title> DIDS (Distributed Intrusion Detection System)-Motivation, Architecture and An Early Prototype. </title> <booktitle> Proceedings of the 1991 National Computer Security Conference, </booktitle> <year> 1991. </year>
Reference-contexts: We assume that mechanisms (communication facilities) are available by which "reports" can be sent by computers distributed across the network to a centralized location. The centralized facility, a CLIPS-based expert system in our current implementation <ref> [SB + 91a] </ref>, executes the DRA algorithm to track users as they move around the network, maintaining correct NIDs as stated above. <p> At present, monitored hosts must be either Unix systems with Sun Microsystem's Basic Security Module (BSM) or VMS systems. Both provide a C2-level standard of auditing information. Our architecture combines distributed monitoring and data reduction with centralized data analysis <ref> [SB + 91a] </ref>[SB + 91b]. This approach is unique among current intrusion detection systems. Each monitored host is provided with a Host Monitor that collects and analyzes audit records locally. These monitors pass information about notable events to a central analyzer, called the Director, for further processing.
Reference: [SB + 91b] <author> S. Snapp, J. Brentano, et al. </author> <title> A system for distributed intrusion detection. </title> <booktitle> IEEE COMPCON, </booktitle> <year> 1991. </year>
Reference: [Sma88] <author> S. Smaha. Haystack: </author> <title> An intrusion detection system. </title> <booktitle> Proceedings of the IEEE Fourth Aerospace Computer Security Applications Conference, </booktitle> <year> 1988. </year> <month> 11 </month>
Reference-contexts: Notable events include: failed logins, changes to the security state of the system, tagged file accesses, unusually high number of file accesses (browsing), and an unusually high volume of requests for information about users (paranoia). Much of this information comes from HAYSTACK <ref> [Sma88] </ref>, which has been incorporated into the Host Monitor. The LAN is monitored by a subset of the NSM [HDL + 90].
References-found: 7

