URL: ftp://cse.ogi.edu/pub/dsrg/synthetix/nossdav95.ps.gz
Refering-URL: http://www.cse.ogi.edu/~crispin/
Root-URL: http://www.cse.ogi.edu
Email: walpoleg@cse.ogi.edu  
Title: A Distributed Real-Time MPEG Video Audio Player  
Author: Shanwei Cen, Calton Pu, Richard Staehli, Crispin Cowan and Jonathan Walpole fscen, calton, staehli, crispin, 
Address: Portland, Oregon, USA  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science and Technology  
Abstract: This paper presents the design, implementation and experimental analysis of a distributed, real-time MPEG video and audio player. The player is designed for use across the Internet, a shared environment with variable traffic and with great diversity in network bandwidth and host processing speed. We use a novel toolkit approach to build software feedback mechanisms for client/server synchronization, dynamic Quality-of-Service control, and system adaptiveness. Our experimental results show that the feedback mechanisms are effective, and that the player performs very well in the Internet environment.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> William L. Brogan. </author> <title> Modern Control Theory. </title> <publisher> Quantum Publishers, Inc. </publisher> <year> 1974. </year>
Reference-contexts: The next section introduces the basic concepts behind software feedback and shows how it can be used to solve these problems. 3 Software Feedback for Synchronization & QoS Control Software feedback is a technique that uses feedback mechanisms similar to hardware feedback such as phase-lock loops in control systems <ref> [1, 5] </ref>. A feedback mechanism monitors the output or internal state of the system under control, compares it to the goal specification, and feeds the difference back to adjust the behavior of the system itself.
Reference: 2. <author> Lawrence S. Brakmo et. al. </author> <title> TCP vegas: New Techniques for Congestion Detection and Avoidance. </title> <booktitle> Proc. SIGCOMM'94 Symposium, </booktitle> <pages> pages 24-35. </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: This paper explores the use of software feedback [5, 6] for client/server syn-chronization, dynamic QoS control and system adaptiveness in the Internet environment. Software feedback mechanisms already exist in many forms, such as the flow control mechanism used in TCP <ref> [2] </ref>, the clock synchronization mechanism used in NTP [4], and Rowe's video stream frame rate control mechanism [8]. However, most existing approaches are implemented in an ad-hoc manner, and are usually hard-coded for a particular application.
Reference: 3. <author> Shanwei Cen. </author> <title> A Distributed Real-Time MPEG Video Audio Player. </title> <note> Available via anonymous FTP from ftp://ftp.cse.ogi.edu/pub/dsrg/Player. </note>
Reference-contexts: The streams supported by the player are MPEG-1 video and 8-bit 8K sample rate -law audio. The software is publicly available <ref> [3] </ref>. their respective hosts. The client is a set of collaborating processes which communicate via shared memory, semaphores, pipes and signals. The video and audio output devices are X Window and AudioFile [10] processes respectively.
Reference: 4. <author> D. L. Mills. </author> <title> Network Time Protocol (Version 3) Specification, Implementation and Analysis. </title> <institution> DARPA Network Working Group Report RFC-1305. University of Delaware, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: To meet the strict timing requirements of distributed multimedia presentation in the face of such characteristics requires new approaches to client/server synchronization, Quality-of-Service (QoS) control and system adaptiveness. One approach to client/server synchronization is to use an external mechanism, such as the Network Time Protocol (NTP) <ref> [4] </ref>, to build the illusion of a common clock. However, since such protocols are not ubiquitous, and are rarely engaged between geographically separate sites, it is currently necessary for distributed real-time applications to implement their own mechanisms for maintaining client/server synchronization. <p> This paper explores the use of software feedback [5, 6] for client/server syn-chronization, dynamic QoS control and system adaptiveness in the Internet environment. Software feedback mechanisms already exist in many forms, such as the flow control mechanism used in TCP [2], the clock synchronization mechanism used in NTP <ref> [4] </ref>, and Rowe's video stream frame rate control mechanism [8]. However, most existing approaches are implemented in an ad-hoc manner, and are usually hard-coded for a particular application. Consequently, they suffer from arbitrary structure, hard-to-predict behavior, and wasted effort due to repeated design and implementation of logically similar components. <p> We follow a toolkit approach, and our feedback mechanism is more efficient and more adaptive to play speed and environmental changes than that used in the Berkeley player as shown by comparing Fig. 6 to similar figures in [9]. However, the Berkeley player relies on NTP <ref> [4] </ref> for client/server synchronization, while our feedback approach to synchronization is built into the player and does not need external synchronization. Thus our player is more robust and adaptive in Internet environments. Finally, our player supports user-specified QoS.
Reference: 5. <author> H. Massalin and C. Pu. </author> <title> Fine-Grain Adaptive Scheduling Using Feedback. </title> <journal> Computing System, </journal> <volume> 3(1) </volume> <pages> 139-173, </pages> <month> Winter </month> <year> 1990. </year>
Reference-contexts: This paper explores the use of software feedback <ref> [5, 6] </ref> for client/server syn-chronization, dynamic QoS control and system adaptiveness in the Internet environment. Software feedback mechanisms already exist in many forms, such as the flow control mechanism used in TCP [2], the clock synchronization mechanism used in NTP [4], and Rowe's video stream frame rate control mechanism [8]. <p> The next section introduces the basic concepts behind software feedback and shows how it can be used to solve these problems. 3 Software Feedback for Synchronization & QoS Control Software feedback is a technique that uses feedback mechanisms similar to hardware feedback such as phase-lock loops in control systems <ref> [1, 5] </ref>. A feedback mechanism monitors the output or internal state of the system under control, compares it to the goal specification, and feeds the difference back to adjust the behavior of the system itself. <p> The set of basic filters can include low-pass filters, differential filters, integration filters etc. Consider an input sequence input [i] (i 0). The output sequence lowpass [i](i 0) of the low-pass filter described by Massalin <ref> [5] </ref>, with a parameter R (0 R 1:0), is defined as: lowpass [0] = input [0] lowpass [i + 1] = (1:0 R) fl lowpass [i] + R fl input [i] where i 0 Here the output of the low-pass filter is actually the weighted sum of recent inputs with an <p> Thus our player is more robust and adaptive in Internet environments. Finally, our player supports user-specified QoS. The idea of software feedback was identified in the Synthesis operating system project <ref> [5] </ref>. Massalin and Pu demonstrated that software feedback can be used in process scheduling to adapt quickly to system changes. Pu and Fuhrer [6] proposed a toolkit approach to software feedback.
Reference: 6. <author> Calton Pu and Robert M. Fuhrer. </author> <title> Feedback-Based Scheduling: a Toolbox Approach. </title> <booktitle> Fourth Workshop on Workstation Operating Systems. </booktitle> <month> Oct. </month> <pages> 14-15, </pages> <year> 1993. </year>
Reference-contexts: This paper explores the use of software feedback <ref> [5, 6] </ref> for client/server syn-chronization, dynamic QoS control and system adaptiveness in the Internet environment. Software feedback mechanisms already exist in many forms, such as the flow control mechanism used in TCP [2], the clock synchronization mechanism used in NTP [4], and Rowe's video stream frame rate control mechanism [8]. <p> However, most existing approaches are implemented in an ad-hoc manner, and are usually hard-coded for a particular application. Consequently, they suffer from arbitrary structure, hard-to-predict behavior, and wasted effort due to repeated design and implementation of logically similar components. We are developing a toolkit-based approach <ref> [6] </ref> in order to overcome these drawbacks. To study the effectiveness of software feedback mechanisms for client/server synchronization, dynamic QoS control and system adaptiveness, and to investigate the toolkit approach, we have constructed a distributed real-time MPEG video and audio player. <p> Finally, our player supports user-specified QoS. The idea of software feedback was identified in the Synthesis operating system project [5]. Massalin and Pu demonstrated that software feedback can be used in process scheduling to adapt quickly to system changes. Pu and Fuhrer <ref> [6] </ref> proposed a toolkit approach to software feedback.
Reference: 7. <author> Ketan Patel et. al. </author> <title> Performance of a Software MPEG Video Decoder. </title> <booktitle> ACM multimedia'93, </booktitle> <address> Anaheim, California. </address> <month> August </month> <year> 1993. </year>
Reference-contexts: These parameters, as well as the back-off time after a feedback action, are re-specialized upon play speed change. The back-off time is also adapted to T swa measured in the synchronization feedback mechanism. 4 Implementation The player is written in C, using code modified from the Berkeley MPEG decoder <ref> [7] </ref>, and a Motif interface based on a modified version from the University of Minnesota. The streams supported by the player are MPEG-1 video and 8-bit 8K sample rate -law audio. The software is publicly available [3]. their respective hosts.
Reference: 8. <author> Lawrence A. Rowe and Brian C. Smith. </author> <title> A Continuous Media Player. </title> <booktitle> Proc. 3rd NOSSDAV. </booktitle> <address> San Diego, California. </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Software feedback mechanisms already exist in many forms, such as the flow control mechanism used in TCP [2], the clock synchronization mechanism used in NTP [4], and Rowe's video stream frame rate control mechanism <ref> [8] </ref>. However, most existing approaches are implemented in an ad-hoc manner, and are usually hard-coded for a particular application. Consequently, they suffer from arbitrary structure, hard-to-predict behavior, and wasted effort due to repeated design and implementation of logically similar components. <p> In other experiments with VS on a host at Georgia Tech and the client on our default host, if the Internet was congested VS could work ahead of the client by about 1 second. 6 Related Work The Berkeley Continuous Media Player <ref> [8, 9] </ref> has had the most significant influence on the design and implementation of our player. The Berkeley player and ours use the same MPEG decoder. The Berkeley player uses an ad-hoc software feedback mechanism to adjust the frame rate sent by its server.
Reference: 9. <author> Lawrence A. Rowe et. al. </author> <title> MPEG Video in Software: Representation, Transmission and Playback. </title> <booktitle> Symp. </booktitle> <institution> on Elec. Imaging Sci. & Tech., </institution> <address> San Jose, CA, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: In other experiments with VS on a host at Georgia Tech and the client on our default host, if the Internet was congested VS could work ahead of the client by about 1 second. 6 Related Work The Berkeley Continuous Media Player <ref> [8, 9] </ref> has had the most significant influence on the design and implementation of our player. The Berkeley player and ours use the same MPEG decoder. The Berkeley player uses an ad-hoc software feedback mechanism to adjust the frame rate sent by its server. <p> We follow a toolkit approach, and our feedback mechanism is more efficient and more adaptive to play speed and environmental changes than that used in the Berkeley player as shown by comparing Fig. 6 to similar figures in <ref> [9] </ref>. However, the Berkeley player relies on NTP [4] for client/server synchronization, while our feedback approach to synchronization is built into the player and does not need external synchronization. Thus our player is more robust and adaptive in Internet environments. Finally, our player supports user-specified QoS.
Reference: 10. <author> Thomas M. Levergood et. al. AudioFile: </author> <title> a Network-Transparent System for Distributed Audio Applications. </title> <booktitle> Proc. the USENIX Summer Conference, </booktitle> <month> June, </month> <year> 1993. </year>
Reference-contexts: The software is publicly available [3]. their respective hosts. The client is a set of collaborating processes which communicate via shared memory, semaphores, pipes and signals. The video and audio output devices are X Window and AudioFile <ref> [10] </ref> processes respectively. The client sends control messages to AS and retrieves the audio stream through a TCP channel. Synchronization between the client and AS is maintained by the TCP flow control mechanism.
Reference: 11. <author> Richard Staehli, Jonathan Walpole and David Maier. </author> <title> Quality of Service Specifications for Multimedia Presentations. </title> <note> To appear in Multimedia Systems. </note> <month> August, </month> <year> 1995. </year>
Reference-contexts: User QoS specification is currently restricted to a single dimension, a desired display frame rate. Future versions of the player will support QoS specifications 3 in several other dimensions <ref> [11] </ref>. The player tries to yield a display frame rate up to the user-specified frame rate. To comply with the user-specified frame rate, the player drops excess frames at the source of the pipeline, i.e., VS does not retrieve them from storage. <p> If one drops frames more evenly than the other, the former playback will be smoother than the latter. We need a metric to quantify this smoothness aspect of QoS. 8 One smoothness measure is the deviation of presentation jitter <ref> [11] </ref> from the desired value of zero. Using our assumption that the mapping of logical time (frame number) into system time is precise, and that the delay from the client to the video output can be ignored, we measure the presentation jitter in terms of logical display time.
References-found: 11

