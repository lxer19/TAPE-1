URL: http://www.it.kth.se/docs/Reports/se/nwpt96.ps.Z
Refering-URL: http://www.it.kth.se/docs/Reports/se/
Root-URL: http://www.it.kth.se
Title: A Cube of Proof Systems for the Intuitionistic Predicate ,-Logic  
Author: Tarmo Uustalu Varmo Vene 
Address: Stockholm, Sweden  Tartu, Estonia  
Affiliation: Royal Institute of Technology,  University of  
Abstract: This paper is an attempt at a systematizing study of the proof theory of the intuitionistic predicate ; -logic (conventional intuitionistic predicate logic extended with logical constants and for the least and greatest fixpoint operators on positive predicate transformers). We identify eight proof-theoretically interesting natural-deduction calculi for this logic and propose a classification of these into a cube on the basis of the embeddibility relationships between these. 
Abstract-found: 1
Intro-found: 1
Reference: [BB85] <author> Corrado Bohm and Alessandro Berarducci. </author> <title> Automatic synthesis of typed -programs on term algebras. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 39(2-3):135-154, </address> <year> 1985. </year>
Reference-contexts: The homomorphism from NI P ; to NI P This definition of the and and the associating inference rules of NI P ; via the 2nd-order quantifiers and the associating inference rules is well-known; it is due to Leivant [Lei83] and Bohm and Berarducci <ref> [BB85] </ref>. NI P / enjoy the property of strong normalizability.
Reference: [EF95] <author> Heinz-Dieter Ebbinghaus and Jorg Flum. </author> <title> Finite Model Theory. Perspectives in Mathematical Logic. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: The classical 1st-order predicate ,-logic can been used as a logic of (non-deterministic) imperative programs and as a database query language. It is also one of the relation description languages studied in descriptive complexity theory (finite model theory) (for a survey on this highly actual application, see <ref> [EF95, chapter 7] </ref>). Its modal propositional fragment is applicable as a specification language for state machines and as a terminological logic.
Reference: [Geu92] <author> Herman Geuvers. </author> <title> Inductive and coinductive types with iteration and recursion. </title> <editor> In B. Nordstrom, K. Pettersson, and G. Plotkin, editors, </editor> <booktitle> Preliminary Proceedings Workshop on Types for Proofs and Programs, </booktitle> <address> Bastad, Sweden, </address> <month> 8-12 June </month> <year> 1992, </year> <pages> pages 193-217. </pages> <institution> Dept. of Computing Science, Chalmers Univ. of Technology and Goteborg Univ., </institution> <year> 1992. </year> <month> (ftp://ftp.cs.chalmers.se/pub/cs-reports/baastad.92/proc.dvi.Z.) </month>
Reference-contexts: d; k); e) fl fi e (c; (AE)cv-iter (d (AE); e); k) NI P ; / m ; were first formulated by Leivant [Lei90]; he acknowledged the work of Mendler [Men87], which is the first publication of a variant of m ; r . ; r appeared first in Geuvers <ref> [Geu92] </ref>. We are not aware of any accounts of the calculi at the back nodes of the cube in the literature. Hagino's category-theoretically motivated -calculus in [Hag87] is a relative of ; . <p> The top-to-bottom embedding from NI P ; ; is implicit in [Par90]. For the corresponding -calculi, it is explicitly given in <ref> [Geu92] </ref>. The homomorphism from NI P ; to NI P This definition of the and and the associating inference rules of NI P ; via the 2nd-order quantifiers and the associating inference rules is well-known; it is due to Leivant [Lei83] and Bohm and Berarducci [BB85].
Reference: [Gir71] <author> Jean-Yves Girard. </author> <title> Une extension de l'interpretation de Godel a l'analyse, et son application a l'elimination des coupures dans l'analyse et la theorie des types. </title> <editor> In J. E. Fenstad, editor, </editor> <booktitle> Proceedings 2nd Scandinavian Logic Symp., </booktitle> <address> Oslo, Norway, </address> <month> 18-20 June </month> <year> 1970, </year> <booktitle> volume 63 of Studies in Logic and the Foundations of Mathematics, </booktitle> <pages> pages 63-92. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1971. </year>
Reference-contexts: The codomain of the isomorphism for the the sentential fragment of NI P is an extension of Girard and Reynold's system F <ref> [Gir71, Rey74] </ref>, a nice simply typed -calculus. The codomain of the isomorphism for the full NI P , in contrast, is a dependently typed -calculus, too heavy to serve as a practical functional programming language.
Reference: [Gre92] <author> John Greiner. </author> <title> Programming with inductive and co-inductive types. </title> <type> Technical Report CMU-CS-92-109, </type> <institution> School of Computer Science, Carnegie-Mellon Univ., </institution> <address> Pittsburgh, PA, USA, </address> <month> January </month> <year> 1992. </year> <month> 9 </month>
Reference-contexts: We are not aware of any accounts of the calculi at the back nodes of the cube in the literature. Hagino's category-theoretically motivated -calculus in [Hag87] is a relative of ; . A - calculus with two destructors for (namely, cata and an inverse of wrap) appears in <ref> [Gre92] </ref> and [How92, chapter 3]. Martin-Lof published a paper about a n.d. calculus supporting iterated inductive definitions of predicates as early as in 1971 [ML71]. 6 3.2 The embeddings There exist embeddings (i.e. injective homomorphisms) between any two n.d. calculi at adjacent nodes in the cube in both directions.
Reference: [Hag87] <author> Tatsuya Hagino. </author> <title> A typed lambda calculus with categorical type constructors. </title> <editor> In D. H. Pitt, A. Poigne, and D. E. Rydeheard, editors, </editor> <booktitle> Proceedings 2nd Int'l Conf. on Category Theory and Computer Science, </booktitle> <address> CTCS'87, Edinburgh, UK, </address> <month> 7-9 Sept </month> <year> 1987, </year> <booktitle> volume 283 of Lecture Notes in Computer Science, </booktitle> <pages> pages 140-157. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: We are not aware of any accounts of the calculi at the back nodes of the cube in the literature. Hagino's category-theoretically motivated -calculus in <ref> [Hag87] </ref> is a relative of ; . A - calculus with two destructors for (namely, cata and an inverse of wrap) appears in [Gre92] and [How92, chapter 3].
Reference: [How80] <author> W. A. Howard. </author> <title> The formulae-as-types notion of construction. </title> <editor> In J. P. Seldin and J. R. Hindley, editors, To H. B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus, and Formalism, </booktitle> <pages> pages 479-490. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1980. </year> <note> Reprint of a manuscript written 1969. </note>
Reference-contexts: a typed functional programming language relies on a direct interpretation of its sentences as types and derivations as algorithms, best formalized by defining an isomorphism (i.e. a homomorphism with an inverse that is a homomorphism, too) between the n.d. calculus and a typed -calculus 1 |the Curry and Howard isomorphism <ref> [How80] </ref>. The codomain of the isomorphism for the the sentential fragment of NI P is an extension of Girard and Reynold's system F [Gir71, Rey74], a nice simply typed -calculus.
Reference: [How92] <author> Brian T. Howard. </author> <title> Fixed Points and Extensionality in Typed Functional Programming Languages. </title> <type> PhD thesis (Technical Report STAN-CS-92-1455), </type> <institution> Computer Science Dept., Stanford Univ., </institution> <address> CA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Hagino's category-theoretically motivated -calculus in [Hag87] is a relative of ; . A - calculus with two destructors for (namely, cata and an inverse of wrap) appears in [Gre92] and <ref> [How92, chapter 3] </ref>. Martin-Lof published a paper about a n.d. calculus supporting iterated inductive definitions of predicates as early as in 1971 [ML71]. 6 3.2 The embeddings There exist embeddings (i.e. injective homomorphisms) between any two n.d. calculi at adjacent nodes in the cube in both directions.
Reference: [Lei83] <author> Daniel Leivant. </author> <title> Reasoning about functional programs and complexity classes associated with type disciplines. </title> <booktitle> In Proceedings 24th Annual IEEE Symp. on Foundations of Computer Science, FOCS'83, </booktitle> <address> Tucson, AZ, USA, </address> <month> 7-9 Nov </month> <year> 1983, </year> <pages> pages 460-469. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1983. </year>
Reference-contexts: The codomain of the isomorphism for the full NI P , in contrast, is a dependently typed -calculus, too heavy to serve as a practical functional programming language. A more general approach, first put forth by Leivant <ref> [Lei83] </ref>, is to consider a certain part of the structure present in sentences and derivations to be essential for typing and computation, and to relate a typed -calculus to the n.d. calculus by means of an appropriate "contracting" homomorphism. <p> For the corresponding -calculi, it is explicitly given in [Geu92]. The homomorphism from NI P ; to NI P This definition of the and and the associating inference rules of NI P ; via the 2nd-order quantifiers and the associating inference rules is well-known; it is due to Leivant <ref> [Lei83] </ref> and Bohm and Berarducci [BB85]. NI P / enjoy the property of strong normalizability.
Reference: [Lei90] <author> Daniel Leivant. </author> <title> Contracting proofs to programs. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, volume 31 of APIC Studies in Data Processing, </booktitle> <pages> pages 279-327. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1990. </year>
Reference-contexts: cv-iter : Term (F ) ((Y )Term F (Y ) (Term Y !!Term R )(Term Y !!Term F (Y ) )!!Term R )!!Term R cv-iter (cv-mapwrap (c; d; k); e) fl fi e (c; (AE)cv-iter (d (AE); e); k) NI P ; / m ; were first formulated by Leivant <ref> [Lei90] </ref>; he acknowledged the work of Mendler [Men87], which is the first publication of a variant of m ; r . ; r appeared first in Geuvers [Geu92]. We are not aware of any accounts of the calculi at the back nodes of the cube in the literature.
Reference: [Men87] <author> Nax Paul Mendler. </author> <title> Recursive types and type constraints in second-order lambda-calculus. </title> <booktitle> In Proceedings 2nd Annual IEEE Symp. on Logic in Computer Science, LICS'87, </booktitle> <address> Ithaca, NY, USA, </address> <month> 22-25 June </month> <year> 1987, </year> <pages> pages 30-36. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC, </address> <year> 1987. </year>
Reference-contexts: F (Y ) (Term Y !!Term R )(Term Y !!Term F (Y ) )!!Term R )!!Term R cv-iter (cv-mapwrap (c; d; k); e) fl fi e (c; (AE)cv-iter (d (AE); e); k) NI P ; / m ; were first formulated by Leivant [Lei90]; he acknowledged the work of Mendler <ref> [Men87] </ref>, which is the first publication of a variant of m ; r . ; r appeared first in Geuvers [Geu92]. We are not aware of any accounts of the calculi at the back nodes of the cube in the literature.
Reference: [ML71] <author> Per Martin-Lof. </author> <title> Hauptsatz for the intuitionistic theory of iterated inductive definitions. </title> <editor> In J. E. Fenstad, editor, </editor> <booktitle> Proceedings 2nd Scandinavian Logic Symp., </booktitle> <address> Oslo, Norway, </address> <month> 18-20 June </month> <year> 1970, </year> <booktitle> volume 63 of Studies in Logic and the Foundations of Mathematics, </booktitle> <pages> pages 179-216. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1971. </year>
Reference-contexts: A - calculus with two destructors for (namely, cata and an inverse of wrap) appears in [Gre92] and [How92, chapter 3]. Martin-Lof published a paper about a n.d. calculus supporting iterated inductive definitions of predicates as early as in 1971 <ref> [ML71] </ref>. 6 3.2 The embeddings There exist embeddings (i.e. injective homomorphisms) between any two n.d. calculi at adjacent nodes in the cube in both directions. In addition, there exists a homomorphism from the basic calculus NI P ; to NI P .
Reference: [NPS90] <author> Bengt Nordstrom, Kent Petersson, and Jan M. Smith. </author> <title> Programming in Martin-Lof 's Type Theory, </title> <booktitle> volume 7 of The Int'l Series of Monographs on Computer Science. </booktitle> <publisher> Claren-don Press, Oxford, </publisher> <year> 1990. </year>
Reference-contexts: The codomain of this "contracting" homomorphism for the full NI P is an extension of a variant of system F with implicit type coercions, here denoted . The syntax we employ derives from Martin-Lof's theory of expressions <ref> [NPS90, chapter 3] </ref>. s (t 1 ; : : : ; t n ) denotes application of s to t 1 ; : : : ; t n . (x 1 ; : : : ; x n )s denotes abstraction of x 1 ; : : : ; x n
Reference: [Par90] <author> Michel Parigot. </author> <title> On the representation of data in lambda-calculus. </title> <editor> In E. Borger, H. Kleine Buning, and M. M. Richter, editors, </editor> <booktitle> Proceedings 3rd Workshop on Computer Science Logic, </booktitle> <address> CSL'89, Kaiserslautern, FRG, </address> <month> 2-6 Oct </month> <year> 1989, </year> <booktitle> volume 440 of Lecture Notes in Computer Science, </booktitle> <pages> pages 309-321. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: The top-to-bottom embedding from NI P ; ; is implicit in <ref> [Par90] </ref>. For the corresponding -calculi, it is explicitly given in [Geu92].
Reference: [Rey74] <author> John C. Reynolds. </author> <title> Towards a theory of type structure. </title> <editor> In B. Robinet, editor, </editor> <booktitle> Proceedings Programming Symp. (Colloque sur la Programmation), </booktitle> <address> Paris, France, </address> <month> 9-11 Apr </month> <year> 1974, </year> <booktitle> volume 19 of Lecture Notes in Computer Science, </booktitle> <pages> pages 408-425. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1974. </year>
Reference-contexts: The codomain of the isomorphism for the the sentential fragment of NI P is an extension of Girard and Reynold's system F <ref> [Gir71, Rey74] </ref>, a nice simply typed -calculus. The codomain of the isomorphism for the full NI P , in contrast, is a dependently typed -calculus, too heavy to serve as a practical functional programming language.
Reference: [SH84] <author> Peter Schroeder-Heister. </author> <title> A natural extension of natural deduction. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 49(4) </volume> <pages> 1284-1300, </pages> <year> 1984. </year> <month> 10 </month>
Reference-contexts: For derivations, we use a syntax essentially due to Schroeder-Heister <ref> [SH84] </ref>. This syntax is a notational variant of the general syntax. The following is a part of the definition of NI P , accompanied by the respective part of the definition of .
References-found: 16

