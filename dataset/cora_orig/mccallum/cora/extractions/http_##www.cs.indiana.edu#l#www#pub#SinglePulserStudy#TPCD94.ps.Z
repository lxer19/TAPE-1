URL: http://www.cs.indiana.edu/l/www/pub/SinglePulserStudy/TPCD94.ps.Z
Refering-URL: http://www.cs.indiana.edu/l/www/pub/SinglePulserStudy/
Root-URL: http://www.cs.indiana.edu
Phone: 2  3  
Title: Studies of the Single Pulser in Various Reasoning Systems  
Author: Steven D. Johnson, Paul S. Miner, and Albert Camilleri 
Keyword: and Phrases: Formal methods, hardware verification, formal verification, theorem prover, higher order logic, model checker, design derivation, logic synthesis, PVS, SMV, CTL, DDD, Oct Tools.  
Address: Bloomington, IN 47405-4101 USA  Hampton, VA 23681-0001 USA  Roseville, CA 95747-5596 USA  
Affiliation: 1 Indiana University,  NASA Langley Research Center,  Hewlett-Packard Company,  
Abstract: The single pulser is a clocked sequential device which generates a unit-time pulse on its output for every pulse on its input. This paper explores how a single-pulser implementation is verified by various formal reasoning tools, including the PVS theorem prover for higher-order logic, the SMV model checker for computation tree logic, the DDD design derivation system, and the Oct Tools design environment. By fixing a single, simple example, the study attempts to contrast how the underlying formalisms influence one's perspective on design and verification. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Further details about these studies can be obtained through the World Wide Web via URL www.cs.indiana.edu. Access the Single Pulser Study through the Hardware Methods Group thread in the list of departmental research projects. </institution> <note> Individuals wishing to contribute to this collection should contact sjohnson@cs.indiana.edu or write Hardware Methods Laboratory, </note> <institution> Indiana University Computer Science Department, Bloomington Indiana, USA. </institution>
Reference-contexts: Even if one were to have criteria for comparisons, a more diverse set of examples would be needed to make them meaningful. More detailed accounts of some of these studies (e.g. transcripts of interactions, script files, etc.) will be made available through <ref> [1] </ref>. Sections 3 through 6 contain references to more detailed descriptions of the individual systems under study. <p> There are no constraints on the behavior of imp between pulses. As an example, a simple inverter satisfies our proposed single pulser specification. This is illustrated by where the inverter is defined by Verbose proof for single pulse1. single pulse1: <ref> [1] </ref> (8 (o; i : signal) : imp (i; o) spec1 (i; o)) Expanding the definitions of spec1, imp, delay, and ffi * , , Pulse Applying (SKOSIMP*), Instantiating the top quantifier in + with the terms: m!1 Applying propositional simplification and decision procedures, which yields 2 subgoals: single pulse1.1: f1g <p> Finally, the complexity in using a design synthesis environment lies in understanding what tools to apply and when to be satisfied with the outcome. We plan to continue collecting and comparing studies of the single pulser, and will maintain the results in <ref> [1] </ref>. 8 Acknowledgments We are especially grateful to Shyamsundar Pullela for his contributions to earlier versions of this paper, and to both Shyam and Kathi Fisler for their help in the SMV study.
Reference: 2. <author> Bhaskar Bose. </author> <title> DDD A Transformation system for Digital Design Derivation. </title> <type> Technical Report 331, </type> <institution> Computer Science Dept. Indiana University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: However, in this study, invalid theorems always revealed inadequacies in the specification, rather than mistakes in the design. 5 Derivation of a Single Pulser using DDD DDD (Digital Design Derivation) is a specialized transformation system for digital system design <ref> [9, 2] </ref>. It operates on two dialects of first-order functional expressions concretely represented by Scheme (Lisp) s-expressions. These dialects correspond to behavioral and structural forms of hardware description. The goal of transformation is to reduce a higher-level algorithmic specification into a hierarchical network of processes. <p> Recursion in system-letrec expressions corresponds to feedback in the stream network, but there is no feedback in the single pulser example. Streams are not standard Scheme constructs but are added as a syntactic extension <ref> [2] </ref>. The first step in the derivation constructs an initial structural description.
Reference: 3. <author> J.R. Burch, E.M. Clarke, D.L. Dill, and K. L. McMillan. </author> <title> Sequential circuit verification using symbolic model checking. </title> <booktitle> In Proceedings of the 27th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: The system automatically verifies whether the given state-machine satisfies that formula, that is, provides a model which makes the formula true. A CTL formula specifies a possibly infinite computation tree describing the intended behavior of a correct design <ref> [4, 3] </ref>. Universal and existential quantifiers, A and E, refer to paths in the tree. The modalities F (some future state), G (all states), X (next state) and U ("(strong) until," or an interval between states) refer to the totally ordered set of states along a path.
Reference: 4. <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite--state concurrent systems using temporal logic specification. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2), </volume> <month> April </month> <year> 1986. </year>
Reference-contexts: f5g i 0 (m 0 ) = 0 f6g (8 (t : time) : (n 0 t ^ t &lt; m 0 i 0 (t) = 1)) f1g o 0 (m 0 ) = 1 single pulse1.2: f1g n 0 j 0 f3g o 0 (j 0 ) = 1 <ref> [4] </ref> (8 (t : time) : (x 0 (t + 1) = i 0 (t))) [5] (8 (t : time) : (o 0 (t) = (1 i 0 (t)) fi x 0 (t))) [6] n 0 &lt; m 0 [8] i 0 (m 0 ) = 0 [9] (8 (t : <p> The system automatically verifies whether the given state-machine satisfies that formula, that is, provides a model which makes the formula true. A CTL formula specifies a possibly infinite computation tree describing the intended behavior of a correct design <ref> [4, 3] </ref>. Universal and existential quantifiers, A and E, refer to paths in the tree. The modalities F (some future state), G (all states), X (next state) and U ("(strong) until," or an interval between states) refer to the totally ordered set of states along a path.
Reference: 5. <author> Kathi Fisler. </author> <title> Extending formal reasoning with support for hardware diagrams, </title> <booktitle> 1994. This volume. </booktitle>
Reference-contexts: 0 t ^ t &lt; m 0 i 0 (t) = 1)) f1g o 0 (m 0 ) = 1 single pulse1.2: f1g n 0 j 0 f3g o 0 (j 0 ) = 1 [4] (8 (t : time) : (x 0 (t + 1) = i 0 (t))) <ref> [5] </ref> (8 (t : time) : (o 0 (t) = (1 i 0 (t)) fi x 0 (t))) [6] n 0 &lt; m 0 [8] i 0 (m 0 ) = 0 [9] (8 (t : time) : (n 0 t ^ t &lt; m 0 i 0 (t) = 1)) <p> SP in Bdsyn Although diagrams are used informally in this paper, efforts are underway to make their meaning precise, with the goal of extending formal-reasoning systems to be more visually oriented <ref> [8, 5] </ref>. In PVS, the most general of the formal systems used, a proof directly establishes that the implementation satisfies the requirements of the specification. The intermediate representation of the state machine was not needed, although it, too, could have been formalized in PVS.
Reference: 6. <author> M.J.C. Gordon. </author> <title> Why higher order logic is a good formalism for specifying and verifying hardware. </title> <editor> In G.J. Milne and P.A. Subrahmanyam, editors, </editor> <booktitle> Formal Aspects of VLSI Design: Proceedings of the 1985 Edinburgh Conference on VLSI, </booktitle> <pages> pages 153-177. </pages> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: representation of Pulse (f; n; m) is given by: The definition of predicate Pulse in PVS is: Pulse (f; n; m) : bool = (n &lt; m ^ f (n 1) = 0 ^ f (m) = 0 Our candidate single pulser circuit is Using the style advocated by Gordon <ref> [6] </ref> we can represent this circuit as follows: imp (i; o) : bool = (9 x : (delay (i; x) ^ and ffi * (i; x; o))) delay (i; o) : bool = (8 t : (o (t + 1) = i (t))) and ffi * (a; b; y) : bool <p> = 1 single pulse1.2: f1g n 0 j 0 f3g o 0 (j 0 ) = 1 [4] (8 (t : time) : (x 0 (t + 1) = i 0 (t))) [5] (8 (t : time) : (o 0 (t) = (1 i 0 (t)) fi x 0 (t))) <ref> [6] </ref> n 0 &lt; m 0 [8] i 0 (m 0 ) = 0 [9] (8 (t : time) : (n 0 t ^ t &lt; m 0 i 0 (t) = 1)) f1g j 0 = m 0 Fig. 1.
Reference: 7. <author> Aarti Gupta. </author> <title> Formal hardware verification methods: A survey. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 1 </volume> <pages> 151-238, </pages> <year> 1992. </year>
Reference-contexts: More detailed accounts of some of these studies (e.g. transcripts of interactions, script files, etc.) will be made available through [1]. Sections 3 through 6 contain references to more detailed descriptions of the individual systems under study. For a broader view of hardware verification systems and methods, Gupta's survey <ref> [7] </ref> contains an extensive bibliography and a partial taxonomy; it is a good starting point for further reading although it specifically mentions only one of the systems used in this work, SMV. 2 Informal Description of the Single Pulser The single pulser comes from a textbook by Winkel and Prosser on
Reference: 8. <author> Steven D. Johnson, Gerard Allwein, and Jon Barwise. </author> <title> Toward the rigorous use of diagrams in reasoning about hardware. </title> <editor> In Gerard Allwein and Jon Barwise, editors, </editor> <booktitle> Working Papers on Diagrams and Logic. </booktitle> <institution> Indiana University Logic Group Preprint IULG-93-24, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: One interacts with PVS through an ASCII text editor, but the system also provides formatting facilities for printed reports. Those facilities were used to generate the logic formulas in this section. The proof presented in this section is also discussed in <ref> [8] </ref>. Since the single pulser is a simple circuit, we bypass the state machine level and directly prove a candidate implementation with respect to a high-level specification. <p> 0 j 0 f3g o 0 (j 0 ) = 1 [4] (8 (t : time) : (x 0 (t + 1) = i 0 (t))) [5] (8 (t : time) : (o 0 (t) = (1 i 0 (t)) fi x 0 (t))) [6] n 0 &lt; m 0 <ref> [8] </ref> i 0 (m 0 ) = 0 [9] (8 (t : time) : (n 0 t ^ t &lt; m 0 i 0 (t) = 1)) f1g j 0 = m 0 Fig. 1. <p> SP in Bdsyn Although diagrams are used informally in this paper, efforts are underway to make their meaning precise, with the goal of extending formal-reasoning systems to be more visually oriented <ref> [8, 5] </ref>. In PVS, the most general of the formal systems used, a proof directly establishes that the implementation satisfies the requirements of the specification. The intermediate representation of the state machine was not needed, although it, too, could have been formalized in PVS.
Reference: 9. <author> Steven D. Johnson and Bhaskar Bose. </author> <title> A system for mechanized digital design derivation. </title> <editor> In P. A. Subramanyahm (ed.), </editor> <booktitle> Participants' procedings of the ACM/SIGDA International Workshop on Formal Methods in VLSI Design, </booktitle> <address> Mi-ami, Florida, USA, </address> <month> January </month> <year> 1991., </year> <month> December </month> <year> 1990. </year> <note> With appendix as Indiana University Computer Science Department Technical Report No. 323. </note>
Reference-contexts: The propositional temporal logic on which SMV is founded is far less expressive than the higher-order logic of PVS; and consequently, the proofs are far more automatic. Third, we try DDD, a design derivation system based the algebra of first-order functional expressions <ref> [9] </ref>. Finally, we apply the Oct Tools suite of design synthesis tools [13] to the single-pulser problem. As discussed in the following section, there are many ways of looking at a single pulser. <p> ) = 1 [4] (8 (t : time) : (x 0 (t + 1) = i 0 (t))) [5] (8 (t : time) : (o 0 (t) = (1 i 0 (t)) fi x 0 (t))) [6] n 0 &lt; m 0 [8] i 0 (m 0 ) = 0 <ref> [9] </ref> (8 (t : time) : (n 0 t ^ t &lt; m 0 i 0 (t) = 1)) f1g j 0 = m 0 Fig. 1. <p> However, in this study, invalid theorems always revealed inadequacies in the specification, rather than mistakes in the design. 5 Derivation of a Single Pulser using DDD DDD (Digital Design Derivation) is a specialized transformation system for digital system design <ref> [9, 2] </ref>. It operates on two dialects of first-order functional expressions concretely represented by Scheme (Lisp) s-expressions. These dialects correspond to behavioral and structural forms of hardware description. The goal of transformation is to reduce a higher-level algorithmic specification into a hierarchical network of processes.
Reference: 10. <author> K. L. McMillan. </author> <title> Symbolic Model-Checking: An Approach to the State Explosion Problem. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1992. </year>
Reference-contexts: We look at four systems in this paper. The first and most general is the PVS theorem prover [11], which operates on higher-order logic expressions over inductive types. Next, we look at SMV, a symbolic model checker <ref> [10] </ref>. The propositional temporal logic on which SMV is founded is far less expressive than the higher-order logic of PVS; and consequently, the proofs are far more automatic. Third, we try DDD, a design derivation system based the algebra of first-order functional expressions [9]. <p> In a larger verification, we would prove properties about our representation and simplify accordingly, rather than employing the brute force approach shown here. 4 Verification of the Single Pulser Using Temporal Logic We used the SMV (Symbolic Model Verifier ) system <ref> [10] </ref> to specify and verify the single pulser circuit. An implementation is represented by a finite-state machine and the specification is represented by a formula in computation-tree logic (CTL). The system automatically verifies whether the given state-machine satisfies that formula, that is, provides a model which makes the formula true.
Reference: 11. <author> S. Owre, J.M. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE), volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 748-752, </pages> <address> Saratoga, NY, June 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The single pulser is arguably the simplest sequential circuit that does anything interesting. Even so, its verification exposes interesting issues in each of the studies we have undertaken. We look at four systems in this paper. The first and most general is the PVS theorem prover <ref> [11] </ref>, which operates on higher-order logic expressions over inductive types. Next, we look at SMV, a symbolic model checker [10]. The propositional temporal logic on which SMV is founded is far less expressive than the higher-order logic of PVS; and consequently, the proofs are far more automatic. <p> recognizes as a "pulse." None of these generalizations arise in the studies we have carried out so far, but it might be good to keep them in mind. 3 Verification of a Single Pulser using PVS PVS (Prototype Verification System) is a mechanical theorem proving system developed at SRI International <ref> [11] </ref>. Its specification language is based on simply-typed higher-order logic; it provides an interactive proof checker employing sequent calculus proof rules and it has decision procedures for linear arithmetic. One interacts with PVS through an ASCII text editor, but the system also provides formatting facilities for printed reports.
Reference: 12. <author> Franklin Prosser and David Winkel. </author> <title> The Art of Digital Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs NJ, </address> <note> second edition, </note> <year> 1987. </year>
Reference-contexts: bibliography and a partial taxonomy; it is a good starting point for further reading although it specifically mentions only one of the systems used in this work, SMV. 2 Informal Description of the Single Pulser The single pulser comes from a textbook by Winkel and Prosser on clocked synchronous design <ref> [12] </ref>. Their original English specification reads: Problem Statement. We have a debounced pushbutton, on (true) in the down position, off (false) in the up position. Devise a circuit to sense the depression of the button and assert an output signal for one clock pulse.
Reference: 13. <author> Rick L. Spickelmier. </author> <title> Release Notes for Oct Tools Distribution 5.1. </title> <institution> Electronics Research Laboratory, University of California, Berkeley, </institution> <month> August </month> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Third, we try DDD, a design derivation system based the algebra of first-order functional expressions [9]. Finally, we apply the Oct Tools suite of design synthesis tools <ref> [13] </ref> to the single-pulser problem. As discussed in the following section, there are many ways of looking at a single pulser. The four studies we have done are not directly comparable because they address different facets of the verification task. However, there are common impressions resulting from these studies. <p> a single-gate realization of (SELECT STATUS 0 0 1), and we end up with the desired circuit: In all, six DDD commands were involved in the derivation, plus a rather cumbersome script of logic-synthesis commands. 6 Synthesis of a single-pulser using Oct Tools A standard CAD system|we use Oct Tools <ref> [13] </ref> as a readily available example| can automatically synthesize efficient implementations of the single-pulser. We shall not pursue whether a set of CAD tools should be classified as a formal system, but it is software that supports a specific kind of reasoning.
References-found: 13

