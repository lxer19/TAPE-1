URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3375.1/3375.1.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Feature Recognition for Interactive Applications: Exploiting Distributed Resources  
Author: William C. Regli Satyandra K. Gupta Dana S. Nau 
Keyword: Distributed Computing, Feature-Based Modeling, Feature Recognition, Multiprocessor Solid Modeling.  
Address: College Park, MD 20742 USA  Pittsburgh, PA 15213 USA  College Park, MD 20742 USA  
Affiliation: Department of Computer Science and Institute for Systems Research University of Maryland  Rapid Manufacturing Laboratory The Robotics Institute Carnegie Mellon University  Department of Computer Science, Institute for Advanced Computer Studies and Institute for Systems Research University of Maryland  
Abstract: The availability of low-cost computational power is enabling development of increasingly sophisticated CAD software. Automation of design and manufacturing activities poses many difficult computational problems. Design is an interactive process and speed is a critical factor in systems that enable designers to explore and experiment with alternative ideas. As more downstream manufacturing activities are considered during the design phase, computational costs become problematic. Achieving interactivity requires a sophisticated allocation of computational resources in order to perform realistic design analyses and generate feedback in real time. This paper presents our initial efforts to use distributed algorithms to recognize machining features from solid models of parts with large numbers of features and many geometric and topological entities. Our goal is to outline how significant improvements in computation time can be obtained using existing hardware and software tools. An implementation of our approach is discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> George Almasi, Raghu Karinthi, and Kankanahalli Srinivas. </author> <title> A parallel algorithm for computing set operations on loops. </title> <type> Technical Report TR 93-10, </type> <institution> Department of Statistics and Computer Science, West Virginia University, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: In the domain of boundary representation modeling, Karinthi et al. [18] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al. <ref> [1] </ref>, these techniques are extended to more general loops of edges. Strip and Karasick [27] present techniques for performing solid modeling operations on a massively parallel SIMD (single instruction multiple data) computer.
Reference: [2] <author> Raja P. K. Banerjee, Vineet Goel, and Amar Mukherjee. </author> <title> Efficient parallel evaluation of CSG trees using fixed number of processors. </title> <editor> In Jaroslaw Rossignac, Joshua Turner, and George Allen, editors, </editor> <booktitle> Second Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 313-322, </pages> <address> New York, NY 10036, USA, </address> <month> May </month> <year> 1993. </year> <booktitle> ACM SIGGRAPH, </booktitle> <publisher> ACM Press. </publisher> <address> Montreal, Canada. </address>
Reference-contexts: Narayanaswami and Franklin [21] present a parallel multi-processor method for calculating the mass properties of polygonal CSG objects and outlined some extensions for applying the techniques to 3-D polyhedra. Banerjee et al. <ref> [2] </ref> have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory. In the domain of boundary representation modeling, Karinthi et al. [18] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes.
Reference: [3] <author> S. H. Chuang and M. R. Henderson. </author> <title> Three-dimensional shape pattern recognition using vertex classification and the vertex-edge graph. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Secondly, methods based on pattern matching and finding subgraph isomorphisms (a problem known to be NP-hard) are prone to combinatorial difficulties. Chuang and Henderson <ref> [3] </ref> explore graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Efforts at Carnegie Mellon University [22, 26] have employed graph grammars for finding features in models of injection molded parts.
Reference: [4] <author> J. Corney and D. E. R. Clark. </author> <title> Method for finding holes and pockets that connect multiple faces in 2 1 2 d objects. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 23(10) </volume> <pages> 658-668, </pages> <month> December </month> <year> 1991. </year> <month> 16 </month>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search <ref> [6, 4] </ref> and those based on pattern matching [17, 22, 26]. A common difficulty for both categories of graph-based approaches is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Chuang and Henderson [3] explore graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Efforts at Carnegie Mellon University [22, 26] have employed graph grammars for finding features in models of injection molded parts. Recently, Corney and Clark <ref> [4] </ref> have employed graph-based algorithms to find general feature classes from 2 1 2 -dimensional parts.
Reference: [5] <author> Diginta Das, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Reducing setup cost by automated generation of redesign suggestions. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 159-170. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: This problem has been the focus of extensive research over the last decade. Feature recognition is used for a variety of applications, including the generation of process plans [29], translation between design and manufacturing features, and production of redesign suggestions <ref> [5, 11] </ref>. What has also become evident is that feature recognition, for realistic classes of parts with multiple and interacting feature interpretations, is computationally expensive. Hence, generating the features from a part may become a computational bottleneck within a design system. <p> They formally describe the behavior of their algorithm and calculate a general measure of its complexity. This approach has been employed for automated design analysis [12] and automated redesign <ref> [5, 11] </ref>. Trace-based approaches have several properties that are just beginning to be exploited by researchers, including: * Feature traces can be derived from a variety of design information such as tolerances, surface finish requirements, and functional information associated with surfaces.
Reference: [6] <author> Leila De Floriani. </author> <title> Feature extraction from boundary models of three-dimensional objects. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 11(8), </volume> <month> August </month> <year> 1989. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search <ref> [6, 4] </ref> and those based on pattern matching [17, 22, 26]. A common difficulty for both categories of graph-based approaches is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts.
Reference: [7] <author> J. L. Ellis, G. Kedem, T. C. Lyerly, D. G. Thielman, R. J. Marisa, P. J. Menon, and H. B. Voelcker. </author> <title> The RayCasting Engine and ray representations. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 255-267, </pages> <address> New York, NY 10036, USA, Austin, TX, June 1991. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: Lastly, Section 6 contains concluding remarks and discussion. 2 Related Work The bibliography of work on multi-processor algorithms for solid modeling applications is limited but growing. Currently, most works have focused on parallel operations on CSG trees and other CSG representations of polygonal or polyhedral entities. Ellis et al. <ref> [7] </ref> have developed the RayCasting Engine: a hardware-implemented facility for sampling solids represented in CSG for a variety of purposes, including rendering and mass-property calculations. They outline how this special-case hardware makes possible brute-force solutions to difficult computational problems, such as spatial sweeping and offsetting.
Reference: [8] <author> M. C. Fields and D. C. Anderson. </author> <title> Fast feature extraction for machining applications. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 26(11), </volume> <month> November </month> <year> 1994. </year>
Reference-contexts: While this kind of approach holds much promise for addressing combinatorial problems,it does not address how to extend the techniques to better handle interacting features and more non-linear (non-faceted) solid models. Fields and Anderson <ref> [8] </ref> present an approach to feature recognition that overcomes some of the representation and efficiency problems common in previous work. Unlike pattern-based or decomposition-based recognition methodologies, they categorize sets of faces on the surface of the part into classes of general machining features: protrusions, depressions, and passages.
Reference: [9] <author> R. Gadh and F. B. Prinz. </author> <title> Recognition of geometric forms using the differential depth filter. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(11) </volume> <pages> 583-598, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Efforts at Carnegie Mellon University [22, 26] have employed graph grammars for finding features in models of injection molded parts. Recently, Corney and Clark [4] have employed graph-based algorithms to find general feature classes from 2 1 2 -dimensional parts. Gadh and Prinz <ref> [9] </ref> were the first to describe techniques for combating the combinatorial costs of han 2 (a): hole h, a drilling feature (b): pocket m, an end-milling feature dling complex and realistic industrial parts (i.e., those with thousands of topological entities).
Reference: [10] <author> P. Gavankar and M. R. Henderson. </author> <title> Graph-based extraction of protrusions and depressions from boundary representations. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 22(7) </volume> <pages> 442-450, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: We present below several of the more recent and relevant works. The work of Henderson has continually brought new computational techniques to address the feature recognition problem. The work described in [15] was the first to apply expert systems to the feature recognition problem. Gavankar and Henderson <ref> [10] </ref> present techniques to identify protrusions and depressions in the boundary model of a part. More recently, Prabhakar and Henderson [23] described the use of neural networks to recognize and classify features.
Reference: [11] <author> Diganta Das Satyandra K. Gupta and Dana S. Nau. </author> <title> Generating redesign suggestions to reduce setup cost: A step towards automated redesign. </title> <booktitle> Computer Aided Design, </booktitle> <year> 1995. </year> <note> Also available as University of Maryland ISR TR 95:39,CS-TR-3439, UMIACS-TR-95-36. </note>
Reference-contexts: This problem has been the focus of extensive research over the last decade. Feature recognition is used for a variety of applications, including the generation of process plans [29], translation between design and manufacturing features, and production of redesign suggestions <ref> [5, 11] </ref>. What has also become evident is that feature recognition, for realistic classes of parts with multiple and interacting feature interpretations, is computationally expensive. Hence, generating the features from a part may become a computational bottleneck within a design system. <p> Synthesis of results. Combine the results obtained by each separate processor into a global solution. This solution set can then be passed on to the application at hand|in the context of our previous work, this application is a system for automated manufacturability analysis and redesign for machined parts <ref> [12, 13, 11] </ref>. The benefits of applying this approach include: * It increases the complexity of parts that are now computationally feasible. <p> They formally describe the behavior of their algorithm and calculate a general measure of its complexity. This approach has been employed for automated design analysis [12] and automated redesign <ref> [5, 11] </ref>. Trace-based approaches have several properties that are just beginning to be exploited by researchers, including: * Feature traces can be derived from a variety of design information such as tolerances, surface finish requirements, and functional information associated with surfaces.
Reference: [12] <author> S. K. Gupta and D. S. Nau. </author> <title> A systematic approach for analyzing the manufacturability of machined parts. </title> <booktitle> Computer Aided Design, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Synthesis of results. Combine the results obtained by each separate processor into a global solution. This solution set can then be passed on to the application at hand|in the context of our previous work, this application is a system for automated manufacturability analysis and redesign for machined parts <ref> [12, 13, 11] </ref>. The benefits of applying this approach include: * It increases the complexity of parts that are now computationally feasible. <p> Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [29], incremental recognition of features [19, 14], modeling alternative feature interpretations and completeness [20, 24], and reasoning about the manufacturability of features <ref> [12] </ref>. 3 Approach to Feature Recognition In this section we outline a basic feature recognition technique on which we will build our multiprocessor algorithms in Section 4. We have chosen to adopt a trace-based methodology for this purpose; the reasons for this choice shall become evident. <p> They formally describe the behavior of their algorithm and calculate a general measure of its complexity. This approach has been employed for automated design analysis <ref> [12] </ref> and automated redesign [5, 11]. Trace-based approaches have several properties that are just beginning to be exploited by researchers, including: * Feature traces can be derived from a variety of design information such as tolerances, surface finish requirements, and functional information associated with surfaces.
Reference: [13] <author> Satyandra K. Gupta, Thomas R. Kramer, Dana S. Nau, William C. Regli, and Guangming Zhang. </author> <title> Building MRSEV models for CAM applications. </title> <booktitle> Advances in Engineering Software, </booktitle> 20(2/3):121-139, 1994. 
Reference-contexts: Synthesis of results. Combine the results obtained by each separate processor into a global solution. This solution set can then be passed on to the application at hand|in the context of our previous work, this application is a system for automated manufacturability analysis and redesign for machined parts <ref> [12, 13, 11] </ref>. The benefits of applying this approach include: * It increases the complexity of parts that are now computationally feasible.
Reference: [14] <author> JungHyun Han and Aristides A. G. Requicha. </author> <title> Incremental recognition of machining features. </title> <editor> In Kosuke Ishii, editor, </editor> <booktitle> ASME Computers in Engineering Conference, </booktitle> <pages> pages 143-150. </pages> <publisher> ASME, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: For each of their feature classes, they present a linear-time algorithm. Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [29], incremental recognition of features <ref> [19, 14] </ref>, modeling alternative feature interpretations and completeness [20, 24], and reasoning about the manufacturability of features [12]. 3 Approach to Feature Recognition In this section we outline a basic feature recognition technique on which we will build our multiprocessor algorithms in Section 4.
Reference: [15] <author> Mark R. Henderson. </author> <title> Extraction of Feature Information from Three-Dimensional CAD Data. </title> <type> PhD thesis, </type> <institution> Purdue University, West Lafayette, IN, USA, </institution> <year> 1984. </year>
Reference-contexts: We present below several of the more recent and relevant works. The work of Henderson has continually brought new computational techniques to address the feature recognition problem. The work described in <ref> [15] </ref> was the first to apply expert systems to the feature recognition problem. Gavankar and Henderson [10] present techniques to identify protrusions and depressions in the boundary model of a part. More recently, Prabhakar and Henderson [23] described the use of neural networks to recognize and classify features.
Reference: [16] <author> Christoph M. Hoffman. </author> <title> Geometric and Solid Modeling: An Introduction. </title> <publisher> Morgan Kaufmann Publishers Incorporated, </publisher> <address> CA, </address> <year> 1989. </year>
Reference-contexts: The machined part is a solid object, represented by a solid model of the part P , to be produced as a result of a finite set of machining operations. The delta volume is the regularized difference <ref> [16] </ref> of the initial workpiece and the part: = S fl P . In general, there may be several alternative interpretations of the part as collections of machining features, each interpretation corresponding to a different way of manufacturing it.
Reference: [17] <author> S. Joshi and T. C. Chang. </author> <title> Graph-based heuristics for recognition of machined features from a 3D solid model. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 20(2) </volume> <pages> 58-66, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search [6, 4] and those based on pattern matching <ref> [17, 22, 26] </ref>. A common difficulty for both categories of graph-based approaches is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Fundamentally, a trace-based approach to feature recognition attempts to reconstruct feature instances from the information that they contribute to the final CAD model of the product. The work of Marefat and Kashyap [20] presented an early trace-based technique. They expanded on the work of Joshi and Chang <ref> [17] </ref>, augmenting it with hypothesis testing techniques. In Marefat and Kashyap's method, information from the solid model is used to generate hypotheses about the existence of features. These hypotheses are tested to see if they give rise to valid feature instances.
Reference: [18] <author> Raghu Karinthi, Kankanahalli Srinivas, and George Almasi. </author> <title> A parallel algorithm for computing polygon set operations. </title> <type> Technical Report TR 93-4, </type> <institution> Department of Statistics and Computer Science, West Virginia University, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Banerjee et al. [2] have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory. In the domain of boundary representation modeling, Karinthi et al. <ref> [18] </ref> have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al. [1], these techniques are extended to more general loops of edges.
Reference: [19] <author> Timo Laakko and Martti Mantyla. </author> <title> Feature modelling by incremental feature recognition. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 25(8) </volume> <pages> 479-492, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: For each of their feature classes, they present a linear-time algorithm. Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [29], incremental recognition of features <ref> [19, 14] </ref>, modeling alternative feature interpretations and completeness [20, 24], and reasoning about the manufacturability of features [12]. 3 Approach to Feature Recognition In this section we outline a basic feature recognition technique on which we will build our multiprocessor algorithms in Section 4.
Reference: [20] <author> M. Marefat and R. L. Kashyap. </author> <title> Geometric reasoning for recognition of three-dimensional object features. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 12(10) </volume> <pages> 949-965, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: For each of their feature classes, they present a linear-time algorithm. Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [29], incremental recognition of features [19, 14], modeling alternative feature interpretations and completeness <ref> [20, 24] </ref>, and reasoning about the manufacturability of features [12]. 3 Approach to Feature Recognition In this section we outline a basic feature recognition technique on which we will build our multiprocessor algorithms in Section 4. <p> Fundamentally, a trace-based approach to feature recognition attempts to reconstruct feature instances from the information that they contribute to the final CAD model of the product. The work of Marefat and Kashyap <ref> [20] </ref> presented an early trace-based technique. They expanded on the work of Joshi and Chang [17], augmenting it with hypothesis testing techniques. In Marefat and Kashyap's method, information from the solid model is used to generate hypotheses about the existence of features.
Reference: [21] <author> Chandrasekhar Narayanaswami and William R. Franklin. </author> <title> Determination of mass properties of polygonal csg objects in parallel. </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 255-267, </pages> <address> New York, NY 10036, USA, Austin, TX, </address> <month> June </month> <year> 1991. </year> <note> ACM SIGGRAPH, ACM Press. 17 </note>
Reference-contexts: They outline how this special-case hardware makes possible brute-force solutions to difficult computational problems, such as spatial sweeping and offsetting. Narayanaswami and Franklin <ref> [21] </ref> present a parallel multi-processor method for calculating the mass properties of polygonal CSG objects and outlined some extensions for applying the techniques to 3-D polyhedra. Banerjee et al. [2] have developed parallelized algorithms for evaluating CSG trees that operate with a fixed number of processors with shared memory.
Reference: [22] <author> J. Miguel Pinilla, Susan Finger, and Friedrich B. Prinz. </author> <title> Shape feature description using an augmented topology graph grammar. </title> <booktitle> In Proceedings NSF Engineering Design Research Conference, </booktitle> <pages> pages 285-300. </pages> <institution> National Science Foundation, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search [6, 4] and those based on pattern matching <ref> [17, 22, 26] </ref>. A common difficulty for both categories of graph-based approaches is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Secondly, methods based on pattern matching and finding subgraph isomorphisms (a problem known to be NP-hard) are prone to combinatorial difficulties. Chuang and Henderson [3] explore graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Efforts at Carnegie Mellon University <ref> [22, 26] </ref> have employed graph grammars for finding features in models of injection molded parts. Recently, Corney and Clark [4] have employed graph-based algorithms to find general feature classes from 2 1 2 -dimensional parts.
Reference: [23] <author> S. Prabhakar and M. R. Henderson. </author> <title> Automatic form-feature recognition using neural-network-based techniques on boundary representations of solid models. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 24(7) </volume> <pages> 381-393, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The work described in [15] was the first to apply expert systems to the feature recognition problem. Gavankar and Henderson [10] present techniques to identify protrusions and depressions in the boundary model of a part. More recently, Prabhakar and Henderson <ref> [23] </ref> described the use of neural networks to recognize and classify features. A strength of this approach is that it exploits the trainability of a neural net to incorporate new feature types.
Reference: [24] <author> William C. Regli, Satyandra K. Gupta, and Dana S. Nau. </author> <title> Extracting alternative machining features: An algorithmic approach. </title> <booktitle> Research in Engineering Design, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: In this paper we present our initial efforts toward developing a methodology for recognizing a class of machining features using a distributed, multi-processor algorithms. Feature recognition has been approached using a variety of techniques, some of which are easier to parallelize than others. In previous work <ref> [24] </ref>, we described trace-based, serial algorithms for finding feature instances from solid model data. This current work indicates that trace-based feature recognition methodologies are particularly well suited for parallelization. The basic steps in this approach are: 1. Task initialization. <p> For each of their feature classes, they present a linear-time algorithm. Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features [29], incremental recognition of features [19, 14], modeling alternative feature interpretations and completeness <ref> [20, 24] </ref>, and reasoning about the manufacturability of features [12]. 3 Approach to Feature Recognition In this section we outline a basic feature recognition technique on which we will build our multiprocessor algorithms in Section 4. <p> After filling frames with the trace information present in the part, the system classifies the partial frames and attempts to complete the frame information for those that appear promising using a variety of geometric reasoning and computational geometry techniques. Regli et al. <ref> [25, 24] </ref> present an approach for guaranteeing completeness of a recognition algorithm, i.e., it describes how one can define a class of features and verify that a particular approach was capable of producing all features in that class. <p> The feature set F is a finite set of features composed of the union of those features in the alternative feature-based models for the part <ref> [24] </ref>. 3.3 Trace-based Recognition of Features A trace represents the partial information in the solid model of the part produced by an instance of a feature. Intuitively, a trace t M corresponds to the information contributed to the part by an instance of a feature of type M . <p> Such algorithms have been developed in previous work, notably: Vandenbrande [29] for drilling feature traces 1 and 2 and end-milling feature trace 1; and Regli et al. <ref> [25, 24] </ref> for all of the above traces. 4 Approach to Parallelization In the distributed computing paradigm, collections of autonomous computational resources are interconnected on a network, as illustrated in Figure 3 [28]. <p> More significant than any precise calculation of elapsed time is the speedup factor between the serial and parallelized algorithms. Measurements of elapsed CPU time are summarized in the table in Figure 8. (a): example from [29] (b): example from <ref> [24] </ref> Example 1. The example part in Figure 6 (a), taken from [29], contains 21 part faces. Vandenbrande and Requicha [29] report identifying 7 features (3 slots, 3 open pockets, and a step) in two and a half minutes on a SUN 4/360. <p> Using the simplification techniques, the number of geometric and topological entities that had to be considered was reduced by 22%. Example 2. The example part in Figure 6 (b) is a socket taken from <ref> [24] </ref>. This part, when machined from a cylindrical piece of stock material, has 37 faces in the delta volume. There are 12 drilling and 20 end-milling features in its feature-based models that can be produced with the traces given above.
Reference: [25] <author> William C. Regli and Dana S. Nau. </author> <title> Building a general approach to feature recognition of material removal shape element volumes (MRSEVs). </title> <editor> In Jaroslaw Rossignac and Joshua Turner, editors, </editor> <booktitle> Second Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <address> New York, NY 10036, USA, May 19-21, Montreal, Canada 1993. </address> <publisher> ACM SIGGRAPH, ACM Press. </publisher>
Reference-contexts: After filling frames with the trace information present in the part, the system classifies the partial frames and attempts to complete the frame information for those that appear promising using a variety of geometric reasoning and computational geometry techniques. Regli et al. <ref> [25, 24] </ref> present an approach for guaranteeing completeness of a recognition algorithm, i.e., it describes how one can define a class of features and verify that a particular approach was capable of producing all features in that class. <p> Such algorithms have been developed in previous work, notably: Vandenbrande [29] for drilling feature traces 1 and 2 and end-milling feature trace 1; and Regli et al. <ref> [25, 24] </ref> for all of the above traces. 4 Approach to Parallelization In the distributed computing paradigm, collections of autonomous computational resources are interconnected on a network, as illustrated in Figure 3 [28].
Reference: [26] <author> Scott A. Safier and Susan Finger. </author> <title> Parsing features in solid geometric models. </title> <booktitle> In European Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Graph-based algorithms have proven useful for extracting some classes of features. These methods fall into two categories: those based on graph search [6, 4] and those based on pattern matching <ref> [17, 22, 26] </ref>. A common difficulty for both categories of graph-based approaches is that the graph-based representations for solid models of parts are difficult to extend to the complex geometry and topology found in real industrial parts. <p> Secondly, methods based on pattern matching and finding subgraph isomorphisms (a problem known to be NP-hard) are prone to combinatorial difficulties. Chuang and Henderson [3] explore graph-based pattern matching techniques to classify feature patterns based on geometric and topological information from the part. Efforts at Carnegie Mellon University <ref> [22, 26] </ref> have employed graph grammars for finding features in models of injection molded parts. Recently, Corney and Clark [4] have employed graph-based algorithms to find general feature classes from 2 1 2 -dimensional parts.
Reference: [27] <author> D. Strip and M. Karasick. </author> <title> Solid modeling on a massively parallel processor. </title> <journal> International Journal of Supercomputing Applications, </journal> <volume> 6(2) </volume> <pages> 175-192, </pages> <month> Summer </month> <year> 1992. </year>
Reference-contexts: In the domain of boundary representation modeling, Karinthi et al. [18] have produced a parallel algorithm for performing boolean set operations on polygons and polygons with holes. In Almasi et al. [1], these techniques are extended to more general loops of edges. Strip and Karasick <ref> [27] </ref> present techniques for performing solid modeling operations on a massively parallel SIMD (single instruction multiple data) computer. They provide a data structure for representation of solid models and a variety of parallel algorithms for implementing solid modeling operations. In addition, they present performance comparisons with serial implementations.
Reference: [28] <author> Amjad Umar. </author> <title> Distributed Computing: A Practical Synthesis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ 07632, </address> <year> 1993. </year>
Reference-contexts: Vandenbrande [29] for drilling feature traces 1 and 2 and end-milling feature trace 1; and Regli et al. [25, 24] for all of the above traces. 4 Approach to Parallelization In the distributed computing paradigm, collections of autonomous computational resources are interconnected on a network, as illustrated in Figure 3 <ref> [28] </ref>. While these resources do not share main memory, they may share access to common devices such as peripherals, file systems, output devices, etc. Software systems can use the network and shared peripherals to exchange information among the autonomous resources.
Reference: [29] <author> J. H. Vandenbrande and A. A. G. Requicha. </author> <title> Spatial reasoning for the automatic recognition of machinable features in solid models. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 15(12) </volume> <pages> 1269-1285, </pages> <month> December </month> <year> 1993. </year> <month> 18 </month>
Reference-contexts: This problem has been the focus of extensive research over the last decade. Feature recognition is used for a variety of applications, including the generation of process plans <ref> [29] </ref>, translation between design and manufacturing features, and production of redesign suggestions [5, 11]. What has also become evident is that feature recognition, for realistic classes of parts with multiple and interacting feature interpretations, is computationally expensive. <p> For each of their feature classes, they present a linear-time algorithm. Many aspects of the feature recognition problem are still open and active areas of research. Among these are: recognizing and representing interacting features <ref> [29] </ref>, incremental recognition of features [19, 14], modeling alternative feature interpretations and completeness [20, 24], and reasoning about the manufacturability of features [12]. 3 Approach to Feature Recognition In this section we outline a basic feature recognition technique on which we will build our multiprocessor algorithms in Section 4. <p> In Marefat and Kashyap's method, information from the solid model is used to generate hypotheses about the existence of features. These hypotheses are tested to see if they give rise to valid feature instances. Vandenbrande and Requicha <ref> [29] </ref> were the first to formalize trace-based (or hint-based) techniques for 3 (a): part (after machining) (b): part (underside view, after machining) constructing features from information in a solid model. In the work of Vandenbrande, the traces are used to fill "feature frames" in a frame-based reasoning system. <p> A presentation of the details of the various procedures P (t Mi ) for constructing feature instances from these traces is not central to the focus of this paper. Such algorithms have been developed in previous work, notably: Vandenbrande <ref> [29] </ref> for drilling feature traces 1 and 2 and end-milling feature trace 1; and Regli et al. [25, 24] for all of the above traces. 4 Approach to Parallelization In the distributed computing paradigm, collections of autonomous computational resources are interconnected on a network, as illustrated in Figure 3 [28]. <p> While there is no authoritative reference on the general complexity of solid modeling operations such as booleans, sweeps, and the like, the consensus is that these operations account for the majority of the computational cost during feature recognition <ref> [29] </ref>. The complexity of boolean operations appears to lie between O (n 2 ) and O (n 4 ) or O (n 5 ) time, depending on the particular configuration of geometric entities and many implementation-specific details. <p> More significant than any precise calculation of elapsed time is the speedup factor between the serial and parallelized algorithms. Measurements of elapsed CPU time are summarized in the table in Figure 8. (a): example from <ref> [29] </ref> (b): example from [24] Example 1. The example part in Figure 6 (a), taken from [29], contains 21 part faces. Vandenbrande and Requicha [29] report identifying 7 features (3 slots, 3 open pockets, and a step) in two and a half minutes on a SUN 4/360. The OOFF system [29] <p> Measurements of elapsed CPU time are summarized in the table in Figure 8. (a): example from <ref> [29] </ref> (b): example from [24] Example 1. The example part in Figure 6 (a), taken from [29], contains 21 part faces. Vandenbrande and Requicha [29] report identifying 7 features (3 slots, 3 open pockets, and a step) in two and a half minutes on a SUN 4/360. The OOFF system [29] handles a wide variety of machining features and process planning constraints; hence it is not directly <p> Measurements of elapsed CPU time are summarized in the table in Figure 8. (a): example from <ref> [29] </ref> (b): example from [24] Example 1. The example part in Figure 6 (a), taken from [29], contains 21 part faces. Vandenbrande and Requicha [29] report identifying 7 features (3 slots, 3 open pockets, and a step) in two and a half minutes on a SUN 4/360. The OOFF system [29] handles a wide variety of machining features and process planning constraints; hence it is not directly comparable to the approach outlined in this paper. <p> <ref> [29] </ref> (b): example from [24] Example 1. The example part in Figure 6 (a), taken from [29], contains 21 part faces. Vandenbrande and Requicha [29] report identifying 7 features (3 slots, 3 open pockets, and a step) in two and a half minutes on a SUN 4/360. The OOFF system [29] handles a wide variety of machining features and process planning constraints; hence it is not directly comparable to the approach outlined in this paper.
References-found: 29

