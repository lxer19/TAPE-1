URL: http://www.cs.purdue.edu/research/cse/pythia/papers/conf-journal/joshi-ijcai95wk.ps.gz
Refering-URL: http://www.cs.purdue.edu/research/cse/pythia/pythia-papers.html
Root-URL: http://www.cs.purdue.edu
Email: email: joshi@cs.purdue.edu  
Phone: Phone: 317-494-7821, Fax: 317-494-0739  
Title: To Learn or Not to Learn  
Author: Anupam Joshi 
Address: West Lafayette, IN 47907-1398 USA  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Multiagent systems in which agents interact with each other are now being proposed as a solution to many problems which can be grouped together under the "distributed problem solving" umbrella. For such systems to work properly, it is necessary that agents learn from their environment and adapt their behaviour accordingly. In this paper we present a system which uses a combination of neuro-fuzzy learning and static adaptation to coordinate the activity of multiple agents. An epistemic utility based formulation is used to automatically generate the exemplars for learning, making the process unsupervised. The system has been developed in the context of a scientific computing scenario.
Abstract-found: 1
Intro-found: 1
Reference: [ Carpenter et al., 1991 ] <author> G. Carpenter, S. Grossberg, and S. Rosen. </author> <title> Fuzzy ART: Fast stable learning and categorization of analog patterns by an adaptive resonance system. </title> <booktitle> Neural Networks, </booktitle> <volume> 4 </volume> <pages> 759-771, </pages> <year> 1991. </year>
Reference-contexts: Similar methods have been proposed by Newton [ Newton and Mitra, 1991 ] and Grossberg et. al. <ref> [ Carpenter et al., 1991 ] </ref> . Simpson describes a supervised learning neural network classifier that uses fuzzy sets to describe pattern classes. Each fuzzy set is the fuzzy union of several n-dimensional hyperboxes. Such hyperboxes define a region in n-dimensional pattern space that have patterns with full-class membership.
Reference: [ Drashansky et al., 1995 ] <author> T. Drashansky, A. Joshi, and J.R. Rice. </author> <title> SciAgents An Agent Based Environment for Distributed, Cooperative Scientific Computing. </title> <type> Technical Report TR-95-029, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995. </year> <note> (submitted to Tools with AI '95). </note>
Reference-contexts: We limit our analysis here to cooperative agents. Our interest in multi agent systems arises out of work we are doing in the domain of scientific and ubiquitous computing <ref> [ Drashansky et al., 1995 ] </ref> . fl This work was supported in part by NSF awards ASC 9404859 and CCR 9202536, AFOSR award F49620-92-J-0069 and ARPA ARO award DAAH04-94-G-0010 In the scientific research environment, computational simulation of experimental processes is now an essential component of scientific experimentation.
Reference: [ Gallopoulos et al., 1994 ] <author> E. Gallopoulos, E. Houstis, and J.R. Rice. </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science. </title> <journal> IEEE Computational Science and Engin-erring, </journal> <volume> 1(2) </volume> <pages> 11-23, </pages> <year> 1994. </year>
Reference-contexts: An important goal in the area of Computational Science & Engineering (CS&E) is to develop a unified environment where the experimental and computational models can interact with and complement each other in the problem-solving process. Such an environment has been described as a Problem Solving Environment (PSE) <ref> [ Gallopoulos et al., 1994 ] </ref> . It supports the construction of mathematical models for the experimental process, the definition of the geometry and associated conditions, the specification of the solution strategy, and finally, the generation and validation of results.
Reference: [ Houstis et al., 1995 ] <author> E. Houstis, S. Weerawarana, A. Joshi, and J.R. Rice. </author> <title> The PYTHIA projet. </title> <booktitle> In Proceedings First Intl. Conf. on Neural, Parallel and Scientific Computing, </booktitle> <year> 1995. </year> <note> (to appear). </note>
Reference-contexts: On the other hand, the numerical solution chosen must satisfy several objectives, primarily involving error and hardware resource requirements. 1.1 PYTHIA In the PYTHIA <ref> [ Houstis et al., 1995 ] </ref> project, our aim is to develop a system that will accept a description of a problem from the user, and then automatically select the appropriate numerical solver and computing platform, along with values for the various associated parameters.
Reference: [ Joshi et al., 1994 ] <author> A. Joshi, S. Weerawarana, and E. Houstis. </author> <title> The use of Neural Networks to support intelligent scientific computing. </title> <booktitle> In Proceedings IEEE Intl. Conf. Neural Networks. </booktitle> <publisher> IEEE, IEEE Press, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: Other parameters will reflect confidence measures of the agent in proposing the method and hardware. Our recent work has concentrated on applying various learning techniques to this single agent problem. Specifically, we have used Bayesian belief nets [ Weerawarana, 1994 ] , neural networks <ref> [ Joshi et al., 1994 ] </ref> and fuzzy systems [ Ra-makrishnan et al., 1995 ] . We are now working on applying learning to the multiagent scenario.
Reference: [ Joshi et al., 1995 ] <author> A. Joshi, T. Drashansky, E. Houstis, and S. Weerawarana. SciencePad: </author> <title> An Intelligent Electronic Notepad for Ubiquitous Scientific Computing. </title> <booktitle> In International Conference on Inteligent Information Management Systems, </booktitle> <month> June </month> <year> 1995. </year> <note> (to appear). </note>
Reference-contexts: Moreover, PSEs use the language of the target class of problems, so users can run them without specialised knowledge of the underlying computer hardware or software. Scientific computing systems will also become increasingly ubiquitous <ref> [ Joshi et al., 1995 ] </ref> . While one component of ubiquity involves computers that are mobile and connected over wireless links, another equally important aspect is computers that can be used by everyone. In other words, ubiquity aims to bring computers everywhere, and for everyone.
Reference: [ Lashkari et al., 1994 ] <author> Y. Lashkari, M. Metral, and P. Maes. </author> <title> Collaborative Interface Agents. </title> <booktitle> In Proceedings AAAI '94. AAAI, </booktitle> <year> 1994. </year>
Reference-contexts: PYTHIA would present all the answers obtained from peer agents, and the user would select the best. Given this kind of a scenario, Lashkari et. al. <ref> [ Lashkari et al., 1994 ] </ref> have developed a trust function which each agent uses to measure its belief that a peer agent has a correct answer.
Reference: [ Lehrer, 1990 ] <author> K. Lehrer. </author> <title> Theory of Knowledge. </title> <publisher> West-view Press, </publisher> <address> Boulder, CO, USA, </address> <year> 1990. </year>
Reference-contexts: This is self defeating in our case since the aim of the system is to allow a non expert (in HPC) to use it. We propose an alternate approach formulated in terms of epistemic utility. We summarize the ideas here following Lehrer's <ref> [ Lehrer, 1990 ] </ref> presentation of internal coherence and personal justification in humans. The basic idea here is that each agent has an acceptance system, which it uses to accept certain hypothesis as true. This system is based on two principles, obtaining truth and avoiding error. <p> Further, let p (q) be the probability that q is true. Then, the reasonableness of accepting q can be defined as <ref> [ Lehrer, 1990 ] </ref> r (q) = p (q)U t (q) + p (not (q))U f (q): In the case of PYTHIA, each agent produces a number denoting confidence in its recommendation being correct, so p (q) is trivially defined, and p (not (q)) is simply 1 p (q).
Reference: [ Marinescu and Rice, 1994 ] <author> D. Marinescu and J.R. Rice. </author> <title> On the scalability of Asynchronous Parallel Compu tations. </title> <journal> J. Parallel and Distributed Computing, </journal> <volume> 22, </volume> <year> 1994. </year>
Reference-contexts: Since a heterogeneous system would not have more than a few tens of different computing platforms, this would not be a burden. Analytic models predicting speedups in parallel platforms are notoriously difficult to obtain. However, seminal work in this direction has been done by colleagues in our group <ref> [ Marinescu and Rice, 1994 ] </ref> . The system proposed by them parametrizes scalability of computation using three quantities that are in turn functions of the number of processors. These are: 1.
Reference: [ Mascarenhas and Rego, 1995 ] <author> E. Mascarenhas and V. Rego. Ariadne: </author> <title> Architecture of a Portable Threads system supporting Mobile Processes. </title> <type> Technical Report CSD-TR-95-017, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: Our multiagent system will be responsive to this dynamic behaviour, and will adapt by moving computations around. This will be achieved by systems similar to those proposed in <ref> [ Mascarenhas and Rego, 1995 ] </ref> by Rego et. al. .
Reference: [ Newton and Mitra, 1991 ] <author> S. Newton and S. Mitra. </author> <title> Self organizing leader clustering in a neural network using a fuzzy learning rule. </title> <booktitle> In SPIE Proc. 1565: adaptive signal processing. SPIE, </booktitle> <year> 1991. </year>
Reference-contexts: The basic idea of the method we use was proposed by Simpson [ Simpson, 1992; 1993 ] , and is a variation of the leader cluster algorithm, enhanced with the notion of fuzziness. Similar methods have been proposed by Newton <ref> [ Newton and Mitra, 1991 ] </ref> and Grossberg et. al. [ Carpenter et al., 1991 ] . Simpson describes a supervised learning neural network classifier that uses fuzzy sets to describe pattern classes. Each fuzzy set is the fuzzy union of several n-dimensional hyperboxes.
Reference: [ Ramakrishnan et al., 1995 ] <author> N. Ra-makrishnan, A. Joshi, S. Weerawarana, E. Houstis, and J.R. Rice. </author> <title> Neuro-fuzzy systems for intelligent scientific computing. </title> <type> Technical Report CSD-TR-95-026, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year> <note> (submitted to ANNIE 95). </note>
Reference-contexts: It would thus fail to account for a situation where more than one agent might be expected to provide a correct answer. We have enhanced the method to allow it operate under this situation. Initial results from this approach <ref> [ Ramakrishnan et al., 1995 ] </ref> have been very promising. We are also studying other improvements to this method using techniques from computational geometry. The method as it stands tries to form classes by using isothetic hyperboxes.
Reference: [ Sang et al., 1993 ] <author> J. Sang, E. Mascarenhas, and Rego V. </author> <title> Process mobility in distributed memory simulation systems. </title> <booktitle> In Proceedings Winter Simulation Conference, </booktitle> <pages> pages 722-730, </pages> <year> 1993. </year>
Reference-contexts: This will be achieved by systems similar to those proposed in [ Mascarenhas and Rego, 1995 ] by Rego et. al. . Such systems use threads of control to efficiently migrate tasks across processing systems, and have been shown to be extremely effective in simulations <ref> [ Sang et al., 1993 ] </ref> . 5 Conclusion That Multiagent systems have to be adaptable and involve learning is, in our opinion, evident. In this paper, we have presented a multiagent system operating in a complex, scientific computing environment.
Reference: [ Simpson, 1992 ] <author> P.K. Simpson. </author> <title> Fuzzy min-max neural networks-part I: Classification. </title> <journal> IEEE Trans. Neural Networks, </journal> <volume> 3 </volume> <pages> 776-786, </pages> <month> Sept </month> <year> 1992. </year>
Reference-contexts: A conventional, binary membership function would not model this situation accurately. We feel that such fuzziness will be inherent in the learning task whenever agents model complex, real world problems. The basic idea of the method we use was proposed by Simpson <ref> [ Simpson, 1992; 1993 ] </ref> , and is a variation of the leader cluster algorithm, enhanced with the notion of fuzziness. Similar methods have been proposed by Newton [ Newton and Mitra, 1991 ] and Grossberg et. al. [ Carpenter et al., 1991 ] .
Reference: [ Simpson, 1993 ] <author> P.K. Simpson. </author> <title> Fuzzy min-max neural networks-part II: Clustering. </title> <journal> IEEE Trans. Fuzzy Systems, </journal> <volume> 1(1) </volume> <pages> 32-45, </pages> <month> Feb </month> <year> 1993. </year>
Reference: [ Weerawarana et al., 1995 ] <author> S. Weerawarana, A. Joshi, E. Houstis, and A. Catlin. </author> <title> Using NCSA Mosaic to build notebook interfaces for CS&E applications. </title> <type> Technical Report CSD-TR-95-006, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year> <note> (submitted to IFIP WG2.7 EHCI '95). </note>
Reference-contexts: In order to develop systems that are truly easy to use, PSEs need to provide the user with a high level abstraction of the complexity of the underlying computational facilities <ref> [ Weerawarana et al., 1995 ] </ref> . The user can not, and should not, be expected to be well versed in selecting appropriate numerical, symbolic and parallel systems, along with their associated parameters, that are needed to solve a problem.
Reference: [ Weerawarana, 1994 ] <author> S. Weerawarana. </author> <title> Problem Solving Environments for Partial Differential Equation based systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1994. </year>
Reference-contexts: Other parameters will reflect confidence measures of the agent in proposing the method and hardware. Our recent work has concentrated on applying various learning techniques to this single agent problem. Specifically, we have used Bayesian belief nets <ref> [ Weerawarana, 1994 ] </ref> , neural networks [ Joshi et al., 1994 ] and fuzzy systems [ Ra-makrishnan et al., 1995 ] . We are now working on applying learning to the multiagent scenario.
References-found: 17

