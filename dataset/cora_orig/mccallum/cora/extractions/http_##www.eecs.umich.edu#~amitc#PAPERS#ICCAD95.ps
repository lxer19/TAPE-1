URL: http://www.eecs.umich.edu/~amitc/PAPERS/ICCAD95.ps
Refering-URL: http://www.eecs.umich.edu/~amitc/PAPERS/ICCAD95.html
Root-URL: http://www.cs.umich.edu
Email: famitc,jhayesg@eecs.umich.edu  
Title: Technology Mapping for Field-Programmable Gate Arrays Using Integer Programming 1  
Author: Amit Chowdhary and John P. Hayes 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Advanced Computer Architecture Laboratory Department of Electrical Engineering and Computer Science University of Michigan  
Abstract: We show that the FPGA technology mapping problem can be efficiently implemented as a mixed integer linear programming (MILP) problem which generates truly optimal mappings. The MILP approach can handle a wide variety of FPGA logic block architectures. We present a compact MILP formulation for logic blocks based on lookup tables (LUTs) or multiplexers. We also show that the MILP formulation can be easily modified to optimize area, delay, or a combination of both. We demonstrate that moderately large benchmark circuits can be mapped in a reasonable time using the MILP approach directly. For larger circuits, we propose a technique of partitioning a circuit prior to mapping, which drastically reduces the computation time with little or no loss in optimality. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Actel Inc. </author> <title> The Actel FPGA Data Book, </title> <institution> Sunnyvale, Calif., </institution> <year> 1993. </year>
Reference-contexts: An m-input lookup table (LUT) is a static RAM which can implement any function of at most m inputs. A multiplexer-based logic block consists of a multi-level arrangement of small multiplexers (muxes). Figure 1 shows the logic blocks used in various FPGAs <ref> [1, 16] </ref>. The FPGA technology mapping problem is to map a logic circuit onto the logic blocks of an FPGA, while minimizing an objective function such as area, delay, 1 This research was supported by the National Science Foundation under Grant No. <p> MIP-9200526. (a) (b) (c) and (c) the mux-based Actel ACT 1 <ref> [1] </ref>. or a combination of both. FPGA mapping cannot be performed efficiently using conventional library-based techniques due to the large number of functions which can be implemented by a logic block.
Reference: [2] <author> F. Brglez and H. Fujiwara. </author> <title> A Neutral Netlist of 10 Combinational Benchmark Circuits and a Target Translator in FORTRAN. </title> <booktitle> Proc. IEEE Int'l Symp. on Circuits and Systems, </booktitle> <year> 1985, </year> <pages> pp. 705-712. </pages>
Reference-contexts: It generates optimal mappings, which are often much better than those produced by conventional heuristic techniques, as demonstrated by our experimental results. For example, our technique gives an optimal mapping of 64 5-input X3000-style LUTs for the ISCAS-85 benchmark circuit c499 <ref> [2] </ref>. The best result reported for c499 using other techniques [9] is 74 5-input LUTs. 2. It is a very flexible approach, since a variety of logic blocks composed of LUTs, muxes, or indeed, any logic structure, can be accommodated. <p> Thus the main criterion for an efficient partition is a small cutsize. The high-level specification of a circuit provides a natural and efficient partition for mapping purposes. We have studied the effect of partitioning on the optimality and execution time for some ISCAS-85 benchmark circuits <ref> [2] </ref>, as shown in Table 1. The circuits (a) (b) 3 logic blocks. are partitioned according to the high-level models described in [10]. Figure 5 shows the high-level model of c880 circuit, which is an 8-bit ALU. We obtained an efficient partition of cutsize 9 for c880.
Reference: [3] <author> J. Cong and Y. Ding. </author> <title> On Area/Depth Trade-off in LUT-based FPGA Technology Mapping. </title> <booktitle> Proc. 30th Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 213-218. </pages>
Reference-contexts: On the other hand, an optimal-delay cover of a circuit can be generated using a polynomial-time algorithm called FlowMap [4], but the area of the cover is unbounded. A modification of FlowMap <ref> [3] </ref> determines the optimal-delay mapping, and then allows a fixed increase in delay to reduce area. However, a more practical objective would be to reduce delay with the area fixed, since an FPGA contains a fixed number of LUTs.
Reference: [4] <author> J. Cong and Y. Ding. FlowMap: </author> <title> An Optimal Technology Mapping Algorithm for Delay Optimization in LUT Based FPGA Designs. </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 13, </volume> <pages> pp. 1-11, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: The mapping problem under area minimization has been shown to be NP-complete for LUTs of size greater than 4 [7]. On the other hand, an optimal-delay cover of a circuit can be generated using a polynomial-time algorithm called FlowMap <ref> [4] </ref>, but the area of the cover is unbounded. A modification of FlowMap [3] determines the optimal-delay mapping, and then allows a fixed increase in delay to reduce area.
Reference: [5] <author> G. B. Dantzig. </author> <title> Linear Programming and Extensions. </title> <publisher> Princeton Univ. Press, </publisher> <year> 1963. </year>
Reference-contexts: If there are no real variables, i.e. n 2 = 0, then we have an integer programming (IP) problem. The linear programming problem can be solved efficiently by the classic simplex algorithm <ref> [5] </ref>. We outline this algorithm using the following small example. Minimize x 1 x 2 subject to x 1 + 3x 2 6, 3x 1 + x 2 6, This example is represented graphically in Fig. 3.
Reference: [6] <author> E. Detjens et al. </author> <title> Technology Mapping in MIS. </title> <booktitle> Proc. Int'l Conf. on CAD, </booktitle> <year> 1987, </year> <pages> pp. 116-119. </pages>
Reference-contexts: Figure 2 shows a small example. The technology mapping process is often preceded by a technology-independent logic minimization step performed using, for example, the mis logic synthesis package <ref> [6] </ref>. In our experiments, we perform the same technology-independent minimization to make our results comparable with prior work. We make the following general assumptions about the circuit C. 1. Every gate in C has a fanin less than or equal to the size m of the logic block. 2. <p> We have written a program for generating the MILP formulation from the circuit netlist, whose time complexity is O (V 2 ). We have mapped various MCNC benchmark circuits on both types of FPGAs. We first perform technology-independent logic minimization using the mis logic synthesis package <ref> [6] </ref>. We use the mis script provided by Francis et al. [9]. We then decompose the circuit into an equivalent circuit of 2-input gates using the tech-decomp -a2 -o2 function from the mis package.
Reference: [7] <author> A. H. Farrahi and M. Sarrafzadeh. </author> <title> Complexity of the LUT Minimization Problem for FPGA Technology Mapping. </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 13, </volume> <pages> pp. 1319-1332, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: The mapping problem under area minimization has been shown to be NP-complete for LUTs of size greater than 4 <ref> [7] </ref>. On the other hand, an optimal-delay cover of a circuit can be generated using a polynomial-time algorithm called FlowMap [4], but the area of the cover is unbounded. A modification of FlowMap [3] determines the optimal-delay mapping, and then allows a fixed increase in delay to reduce area. <p> of LUTs With Without using prior Circuit partitioning partitioning techniques c432 39 + 23 62 70y c499 24 + 40 64 74z c880 44 + 43 86 109z c6288 31 2 + 32 13 478y fl :Unable to complete due to enormous circuit size y:Obtained by running mis-pga z:Quoted from <ref> [7] </ref> Table 1: LUT-based mapping of ISCAS-85 circuits with and without partitioning. 5 Circuit Partitioning The execution time for our MILP approach on an IBM RS6000 workstation varies from a few CPU seconds for small circuits with fewer than 50 gates to about an hour for large circuits with over 500 <p> We use the mis script provided by Francis et al. [9]. We then decompose the circuit into an equivalent circuit of 2-input gates using the tech-decomp -a2 -o2 function from the mis package. These preprocessing steps are performed to compare our results with those from the LevelMap algorithm <ref> [7] </ref>, which uses the same steps. LUT-based logic blocks: We assume the size of LUT to be 5, as in the Xilinx X3000 FPGAs. No. of No. of LUTs Best known 2-input using the MILP no. of Circuit gates approach LUTs [7] apex7 201 60 76 count 112 31 31 duke2 <p> compare our results with those from the LevelMap algorithm <ref> [7] </ref>, which uses the same steps. LUT-based logic blocks: We assume the size of LUT to be 5, as in the Xilinx X3000 FPGAs. No. of No. of LUTs Best known 2-input using the MILP no. of Circuit gates approach LUTs [7] apex7 201 60 76 count 112 31 31 duke2 325 128 150 misex1 49 12 15 rd84 153 11 24 z4ml 27 5 6 9sym 201 60 61 c499 392 64 77 c6288 2406 478 478y T otal 1011 1145 y: Obtained by partitioning, and applying mis-pga Table 2: Number <p> Area minimization: The mapping results for various MCNC benchmark circuits from our MILP approach are compared in Table 2 with the best results from prior techniques <ref> [7] </ref>. Our results are significantly better due to the inherent optimality of the MILP approach. We have also observed that the optimal solution is usually obtained in a few minutes for very large circuits, but the MILP solver takes a much longer time to verify its optimality.
Reference: [8] <author> R. Fourer, D. Gay, and B. Kernighan. </author> <title> AMPL Reference Manual, </title> <year> 1992. </year>
Reference-contexts: OSL is an optimization tool which can solve LP problems with millions of variables and constraints. We define our MILP problems in a high level modeling language, called AMPL <ref> [8] </ref>. We have written a program for generating the MILP formulation from the circuit netlist, whose time complexity is O (V 2 ). We have mapped various MCNC benchmark circuits on both types of FPGAs. We first perform technology-independent logic minimization using the mis logic synthesis package [6].
Reference: [9] <author> R. J. Francis, J. Rose, and Z. Vranesic. Chortle-crf: </author> <title> Fast Technology Mapping for LUT Based FPGAs. </title> <booktitle> Proc. 28th Design Automation Conf., </booktitle> <year> 1991, </year> <pages> pp. 613-619. </pages>
Reference-contexts: For example, our technique gives an optimal mapping of 64 5-input X3000-style LUTs for the ISCAS-85 benchmark circuit c499 [2]. The best result reported for c499 using other techniques <ref> [9] </ref> is 74 5-input LUTs. 2. It is a very flexible approach, since a variety of logic blocks composed of LUTs, muxes, or indeed, any logic structure, can be accommodated. Existing techniques are restricted to one particular logic block structure. 3. <p> An extensive survey of heuristic mapping algorithms for various logic block structures and mapping objectives is presented in [15]. A representative technique using LUTs for area minimization is Chortle-crf <ref> [9] </ref>, which considers various decompositions of a gate using an approximate bin-packing technique, but exploits node replication only to a limited extent. The mapping problem under area minimization has been shown to be NP-complete for LUTs of size greater than 4 [7]. <p> We have mapped various MCNC benchmark circuits on both types of FPGAs. We first perform technology-independent logic minimization using the mis logic synthesis package [6]. We use the mis script provided by Francis et al. <ref> [9] </ref>. We then decompose the circuit into an equivalent circuit of 2-input gates using the tech-decomp -a2 -o2 function from the mis package. These preprocessing steps are performed to compare our results with those from the LevelMap algorithm [7], which uses the same steps.
Reference: [10] <author> M. C. Hansen and J. P. Hayes. </author> <title> High-Level Test Generation using Physically-Induced Faults. </title> <booktitle> Proc. of VLSI Test Symposium, </booktitle> <year> 1995, </year> <pages> pp. 20-28. </pages>
Reference-contexts: We have studied the effect of partitioning on the optimality and execution time for some ISCAS-85 benchmark circuits [2], as shown in Table 1. The circuits (a) (b) 3 logic blocks. are partitioned according to the high-level models described in <ref> [10] </ref>. Figure 5 shows the high-level model of c880 circuit, which is an 8-bit ALU. We obtained an efficient partition of cutsize 9 for c880.
Reference: [11] <institution> IBM Corp. Optimization Subroutine Library, </institution> <year> 1990. </year>
Reference-contexts: as the sum of the external and inversion variables for the primary outputs, because an inverted primary output in the cover of C requires a logic block to correct its inversion parity. 7 Experimental Results We have solved the foregoing MILP problems using the OSL package developed by IBM Corp. <ref> [11] </ref>. OSL is an optimization tool which can solve LP problems with millions of variables and constraints. We define our MILP problems in a high level modeling language, called AMPL [8].
Reference: [12] <author> R. Murgai et al. </author> <title> Logic Synthesis for Programmable Gate Arrays. </title> <booktitle> Proc. 27th Design Automation Conf., </booktitle> <year> 1990, </year> <pages> pp. 620-625. </pages>
Reference-contexts: We obtained an efficient partition of cutsize 9 for c880. Our results show that partitioning drastically reduces the execution time while resulting in almost the same number of LUTs as the optimal cover of the un-partitioned circuit. We found that mis-pga <ref> [12] </ref> generates covers for c6288 of 478 and 898 LUTs with and without partitioning, respectively. <p> Therefore very good solutions can be obtained quickly without completely solving the MILP problem. Our algorithm decomposes the nodes of G into nodes with fanin less than the LUT size m, before the technology mapping process. Therefore, we do not compare our technique with the techniques such as mis-pga <ref> [12] </ref>, which use functional information to perform node decomposition during the technology-mapping step. Delay minimization with fixed area: We choose a few MCNC benchmark circuits which can be mapped on an FPGA of size 8 fi 8.
Reference: [13] <author> R. Murgai, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> An Improved Synthesis Algorithm for Multiplexer-based PGAs. </title> <booktitle> Proc. 29th Design Automation Conf., </booktitle> <year> 1992, </year> <pages> pp. 380-386. </pages>
Reference-contexts: We then minimize the number of levels of LUTs while mapping the circuits on the chosen FPGA. Table 3 presents some results of No. of No. of logic No. of logic 2-input blocks using the blocks using Circuit gates MILP approach mis-pga (new) <ref> [13] </ref> vg2 72 33 30 5xp1 88 37 35 c880 347 168 159 Table 4: Number of ACT 1 logic blocks required by various benchmark circuits. minimizing delay with the fixed number of LUTs. <p> Multiplexer-based logic blocks: We map a few MCNC benchmark circuits using the ACT 1 logic blocks, and compare our algorithm to mis-pga <ref> [13] </ref> in Table 4. mis-pga constructs a binary decision diagram (BDD) or an if-then-else directed acyclic graph for every node in the circuit graph. It then maps every BDD using ACT 1 logic blocks, since a BDD node corresponds to a 2-to-1 multiplexer.
Reference: [14] <author> G. L. Nemhauser and L. A. Wolsey. </author> <title> Integer and Combinatorial Optimization. </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: We present an exact approach to FPGA mapping, where the problem is efficiently formulated as a mixed integer linear programming (MILP) problem. The general MILP problem <ref> [14] </ref> is to minimize a linear objective function in terms of integer or real variables subject to some linear constraints. The proposed MILP-based approach to FPGA mapping has the following advantages over the existing techniques which employ heuristics. 1. <p> restricting the other parameter. (a) (b) region R (shaded); (b) the branch-and-bound tree. 3 Mixed Integer Linear Programming The goal of mixed integer linear programming (MILP) is to minimize (or maximize) a linear objective function of a set of integer or real variables while satisfying a system of linear constraints <ref> [14] </ref>. The MILP problem is stated below in the usual matrix notation.
Reference: [15] <author> A. Sangiovanni-Vincentelli, A. El Gamal, and J. Rose. </author> <title> Synthesis Methods for FPGAs. </title> <booktitle> Proc. of IEEE, </booktitle> <month> July </month> <year> 1993, </year> <pages> pp. 1057-1083. </pages>
Reference-contexts: The area and delay objectives refer to the number of logic blocks and the number of levels of logic blocks respectively, in the cover of G. An extensive survey of heuristic mapping algorithms for various logic block structures and mapping objectives is presented in <ref> [15] </ref>. A representative technique using LUTs for area minimization is Chortle-crf [9], which considers various decompositions of a gate using an approximate bin-packing technique, but exploits node replication only to a limited extent.
Reference: [16] <author> Xilinx Inc. </author> <title> The Xilinx FPGA Data Book, </title> <address> Santa Clara, Calif., </address> <year> 1994. </year>
Reference-contexts: An m-input lookup table (LUT) is a static RAM which can implement any function of at most m inputs. A multiplexer-based logic block consists of a multi-level arrangement of small multiplexers (muxes). Figure 1 shows the logic blocks used in various FPGAs <ref> [1, 16] </ref>. The FPGA technology mapping problem is to map a logic circuit onto the logic blocks of an FPGA, while minimizing an objective function such as area, delay, 1 This research was supported by the National Science Foundation under Grant No.
References-found: 16

