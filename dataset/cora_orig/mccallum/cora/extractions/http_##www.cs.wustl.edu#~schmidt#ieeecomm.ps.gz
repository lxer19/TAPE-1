URL: http://www.cs.wustl.edu/~schmidt/ieeecomm.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/corba-research-reliable.html
Root-URL: 
Email: maffeis@acm.org schmidt@cs.wustl.edu  
Title: Constructing Reliable Distributed Communication Systems with CORBA reliable, efficient, flexible, and reusable. These requirements motivate
Author: Silvano Maffeis Douglas C. Schmidt 
Keyword: Communication software and distributed services  
Note: for next-generation applications must be  This paper describes  
Address: Zurich, Switzerland Washington University, St. Louis  
Affiliation: Olsen and Associates Department of Computer Science  
Abstract: This paper will appear in the feature topic issue on Distributed Object Computing in the IEEE Communications Magazine, Vol. 14, No. 2, February 1997. Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <booktitle> 1995. Revision 2.0. </booktitle>
Reference-contexts: These requirements motivate the use of the Object Management Group's Common Object Request Broker Architecture (OMG CORBA) <ref> [1, 2] </ref>. CORBA is an open standard for distributed object computing. It defines a set of components that allow client applications to invoke operations on remote object implementations.
Reference: [2] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: These requirements motivate the use of the Object Management Group's Common Object Request Broker Architecture (OMG CORBA) <ref> [1, 2] </ref>. CORBA is an open standard for distributed object computing. It defines a set of components that allow client applications to invoke operations on remote object implementations.
Reference: [3] <author> I. Pyarali, T. H. Harrison, and D. C. Schmidt, </author> <title> Design and Performance of an Object-Oriented Framework for High-Performance Electronic Medical Imaging, </title> <booktitle> USENIX Computing Systems, </booktitle> <volume> vol. 9, </volume> <month> November/December </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: CORBA enhances application flexibility and portability by automating many common development tasks such as object registration, location, and activation; demultiplexing; framing and error-handling; pa rameter marshalling and demarshalling; and operation dispatching. Experience over the past several years <ref> [3] </ref> illustrates that CORBA is well-suited for best-effort, client-server applications running over conventional local area networks (such as Ethernet and Token Ring). However, building highly available applications with CORBA is much harder. <p> In particular, user interfaces have widely adopted object-oriented design and programming techniques [9]. In contrast, relatively few examples <ref> [10, 3] </ref> of object-oriented distributed systems are currently deployed in production commercial systems. There are a number of interesting projects that are currently employing object-oriented distributed technology and which are planned to become operational shortly.
Reference: [4] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: However, building highly available applications with CORBA is much harder. Neither the CORBA standard nor conventional implementations of CORBA directly address complex problems related to distributed computing, such as real-time quality of service <ref> [4] </ref> or high-speed performance [5], group communication [6], partial failures, [7] and causal ordering of events [8]. This paper makes three contributions to the study of reliable distributed object computing systems with CORBA. First, we examine the question of whether reliable applications can (or should) be implemented with CORBA today.
References-found: 4

