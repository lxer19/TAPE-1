URL: http://www.cs.umn.edu/Users/dept/users/vmash/teleconf.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/vmash/
Root-URL: http://www.cs.umn.edu
Title: SuiteSound: A System for Distributed Collaborative Multimedia  
Author: John Riedl Vahid Mashayekhi James Schnepf Mark Claypool Dan Frankowski 
Keyword: Teleconferencing, Collaborative Systems, Multimedia, Distributed Systems, Silence Dele tion, Silence Detection, Continuous Media, Digital Audio, Ethernet  
Note: April 28, 1993  
Abstract: Multimedia has the same potential to revolutionize human-computer interfaces that bitmapped workstations have realized over the last decade by providing a more familiar environment to the users. Achieving this potential requires the development of programming environments with integrated support for multimedia. SuiteSound is one such environment. SuiteSound is built in the Suite object-based system on a conventional UNIX operating system. SuiteSound objects incorporate multimedia by creating flows and filters. Flows are streams of multimedia data moving through a sequence of objects. They bridge the gap between objects representing the state of an entity at a discrete point in time and space and continuous media such as live audio or video. Filters are intermediate objects between the source and destination of a flow. They take a flow as input, perform one of several operations such as multiplex-in, multiplex-out, gain control, or silence deletion on it, and send the resulting flow to its destination. In effect, they provide a virtual device interface for the application programmer that is uniform and independent of any physical device. This paper describes the design and implementation of SuiteSound on the Sun SparcStation. We perform experiments to determine the network and CPU load of the sound tool, detail experiences using the SuiteSound environment and applications, and suggest future work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Ellis, S. Gibbs, and G. Rein. </author> <title> Groupware. </title> <journal> Communications of the ACM, </journal> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Computer Supported Collaborative Work (CSCW) is the study of methods for enhancing cooperation among computer users by providing tools that explicitly support user interaction and sharing of information <ref> [1, 2] </ref>. Suite is an object-based system with powerful tools for developing distributed collaborative applications [3, 4]. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as digital audio, in Suite.
Reference: [2] <author> J.M. Tazelaar. </author> <title> In-depth groupware. </title> <journal> Byte magazine, </journal> <month> December </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Computer Supported Collaborative Work (CSCW) is the study of methods for enhancing cooperation among computer users by providing tools that explicitly support user interaction and sharing of information <ref> [1, 2] </ref>. Suite is an object-based system with powerful tools for developing distributed collaborative applications [3, 4]. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as digital audio, in Suite.
Reference: [3] <author> P. Dewan and E. Vasilik. </author> <title> An object model for conventional operating systems. </title> <booktitle> Usenix Computing Systems, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Computer Supported Collaborative Work (CSCW) is the study of methods for enhancing cooperation among computer users by providing tools that explicitly support user interaction and sharing of information [1, 2]. Suite is an object-based system with powerful tools for developing distributed collaborative applications <ref> [3, 4] </ref>. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as digital audio, in Suite. SuiteSound supports development of collaborative applications using multimedia by integrating flexible, easy-to-use digital audio with a flexible, easy-to-use object-based system. <p> Prasun Dewan and his research team designed and developed Suite, a multi-user interface generator, at Purdue University [12]. They implemented a Suite prototype on top of UNIX 2 , TCP/IP, NFS 3 , and X <ref> [3] </ref>. Suite supports remote procedure calls (RPC), active persistent data, and management of "direct manipulation" user interfaces.
Reference: [4] <author> P. Dewan and R. Choudhary. </author> <title> Flexible user interface coupling in a collaborative system. </title> <booktitle> Proceedings of the ACM CHI's 91 Conference, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Computer Supported Collaborative Work (CSCW) is the study of methods for enhancing cooperation among computer users by providing tools that explicitly support user interaction and sharing of information [1, 2]. Suite is an object-based system with powerful tools for developing distributed collaborative applications <ref> [3, 4] </ref>. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as digital audio, in Suite. SuiteSound supports development of collaborative applications using multimedia by integrating flexible, easy-to-use digital audio with a flexible, easy-to-use object-based system.
Reference: [5] <author> H.C. Forsdick and R.H. Thomas. </author> <title> The design of Diamond: A distributed multimedia document system. </title> <type> Technical report, TR number 5402, </type> <institution> Bolt Beranek and Newman Inc., </institution> <month> October </month> <year> 1982. </year>
Reference-contexts: Multimedia electronic mail systems, such as Diamond <ref> [5] </ref>, ease communication between participants, especially those who are not used to using computers. Teleconferencing systems improve synchronous interaction, when traveling is not desirable.
Reference: [6] <author> D.B. Terry and D.C. Swinehart. </author> <title> Managing stored voice in the Etherphone system. </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1988. </year>
Reference-contexts: This section briefly describes several of the successful multimedia environments for collaborative work. The Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks <ref> [6] </ref>. In the Etherphone system, each workstation is associated with an Etherphone that digitizes, packetizes, and encrypts the voice and transmits it over the Ethernet. The voice manager in the Etherphone system provides facilities for recording, editing, and playing stored voice.
Reference: [7] <author> S. Sakata. </author> <title> Development and evaluation of an in-house multimedia desktop coneference. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <month> April </month> <year> 1990. </year>
Reference-contexts: The voice manager in the Etherphone system provides facilities for recording, editing, and playing stored voice. Collaborative multimedia has already proven useful for distributed decision making. For instance, the Mermaid system is designed for collaborative decision-making with multiple remote participants <ref> [7] </ref>. Data, voice, and video are transmitted using N-ISDN channels with 64Kpbs per channel. The voice and data use one B-channel and video the other. Users can talk freely, with voices mixed and transmitted to all users simultaneously.
Reference: [8] <author> Susan Angebarnndt, Richard Hyde, Daphne Luong, Nagendra Siravara, and Chris Schmandt. </author> <title> Integrating audio and telephony in a distributed workstation environment. </title> <booktitle> In Proceedings of the Summer 1991 USENIX Conference, </booktitle> <pages> pages 419-435, </pages> <address> Nashville, TN, </address> <year> 1991. </year>
Reference-contexts: Angebarnndt et. al describes a client-server model that uses an audio server for supporting shared access to audio hardware, introduces a protocol that provides applications with a device-independent interface to the audio capabilities of the workstation (virtual devices), and provides primitives for synchronizing the various media components <ref> [8] </ref>. Terek and Pasquale describe an extension to the X Window System 1 to support audio [9]. The modified X11 server accepts audio requests from across the network and executes them on Sun SparcStations. 1.2 Overview Our work extends previous research in four ways.
Reference: [9] <author> Robert Terek and Joseph Pasquale. </author> <title> Experiences with audio conferencing using the X, Window system, UNIX, </title> <booktitle> and TCP/IP. In Proceedings of the Summer 1991 USENIX Conference, </booktitle> <pages> pages 405-418, </pages> <address> Nashville, TN, </address> <year> 1991. </year>
Reference-contexts: Terek and Pasquale describe an extension to the X Window System 1 to support audio <ref> [9] </ref>. The modified X11 server accepts audio requests from across the network and executes them on Sun SparcStations. 1.2 Overview Our work extends previous research in four ways. First, SuiteSound provides an object-oriented interface for building applications that integrate multimedia with traditional objects, promoting simplicity and re-usability.
Reference: [10] <author> P. Wegner. </author> <title> Dimensions of object-based language design. </title> <booktitle> In OOPSLA Proceedings, </booktitle> <month> October </month> <year> 1987. </year>
Reference-contexts: We want infrastructure to handle the complexity, while allowing programmers the flexibility to create the applications they need. 2.1 Continuous Media in Discrete Objects Object-based systems are being used for many tasks because of the benefits of improved encapsulation <ref> [10] </ref>. However, objects are inherently discrete, conceptually containing the representation of the state of a system at a fixed point in space and time. Continuous media, such as voice and video, flow across time, with no convenient boundaries for object representation.
Reference: [11] <author> D. Clark. </author> <title> The structuring of systems using upcalls. </title> <booktitle> In Proceedings of the 10th ACM symposium on operating systems principles, </booktitle> <month> December </month> <year> 1985. </year> <month> 17 </month>
Reference-contexts: These method invocations from an object to an application filter are named callbacks because the method to be invoked is passed to another object, which "calls-back" the original object. Callbacks are similar to Swift's upcalls <ref> [11] </ref> in that they are invocations from a lower layer of a protocol stack to a higher layer.
Reference: [12] <author> P. Dewan. </author> <title> A guide to Suite. </title> <type> Technical report, </type> <institution> SERC-TR-60-P, Software Engineering Research Center at Purdue Univesity, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: Prasun Dewan and his research team designed and developed Suite, a multi-user interface generator, at Purdue University <ref> [12] </ref>. They implemented a Suite prototype on top of UNIX 2 , TCP/IP, NFS 3 , and X [3]. Suite supports remote procedure calls (RPC), active persistent data, and management of "direct manipulation" user interfaces.
Reference: [13] <author> T. Watanabe. </author> <title> Adaptation of machine conversational speed to speaker utterance speed in human-machine communication. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 20(2) </volume> <pages> 502-507, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: The problem of silence detection and deletion has been studied in various domains, including natural languages, multimedia systems, telephone systems, and network systems. Watanabe explores the development of a machine that adapts its conversational speed to the particular speech pattern of a speaker by detecting silence <ref> [13] </ref>. Kashorda and Jones show that muting of transmitters during periods of silence increases the voice capacity of a microcellular cordless telephone system [14]. The MAGNET system uses adaptive protocols for dynamically controlling the network load requirements by detecting silence in speech or lack of motion in video [15].
Reference: [14] <author> A. Kashorda and E.V. Jones. </author> <title> A spectrum efficient technique for cordless telephone access to ISDN. </title> <booktitle> In Fifth International Conference on Mobile Radio and Personal Communications, </booktitle> <pages> pages 15-19, </pages> <address> London, UK, </address> <year> 1989. </year>
Reference-contexts: Watanabe explores the development of a machine that adapts its conversational speed to the particular speech pattern of a speaker by detecting silence [13]. Kashorda and Jones show that muting of transmitters during periods of silence increases the voice capacity of a microcellular cordless telephone system <ref> [14] </ref>. The MAGNET system uses adaptive protocols for dynamically controlling the network load requirements by detecting silence in speech or lack of motion in video [15]. These projects demonstrate the feasibility of silence deletion and detection.
Reference: [15] <author> C. Gan and R.W. Donaldson. </author> <title> Adaptive silence deletion for speech storage and voice mail applications. </title> <journal> IEEE Transactions on Acoustics, Speech, and Signal Processing, </journal> <volume> 36(6) </volume> <pages> 924-927, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Kashorda and Jones show that muting of transmitters during periods of silence increases the voice capacity of a microcellular cordless telephone system [14]. The MAGNET system uses adaptive protocols for dynamically controlling the network load requirements by detecting silence in speech or lack of motion in video <ref> [15] </ref>. These projects demonstrate the feasibility of silence deletion and detection. Our project aims at reducing the network traffic experienced in unfiltered Free mode by silence removal. There are many possible algorithms for determining non-silent periods.
Reference: [16] <author> L. R. Rabiner and M. R. Sambur. </author> <title> An algorithm for determining the endpoints of isolated utterances. </title> <type> Technical Report 2, </type> <institution> Bell lab, </institution> <month> Feb </month> <year> 1975. </year>
Reference-contexts: There are many possible algorithms for determining non-silent periods. Most are based on watching the linear audio signal for sections of pre-determined length with non-zero energy. Since most energy comes from voiced speech, this may do poorly for sibilants or fricatives at the beginning or end of a word <ref> [16] </ref>. Our algorithms are based on measures of energy, but do not seem to have such problems, perhaps because of relatively large chunk size we used. Our silence deletion algorithms do not prefilter any frequencies, so the audio signal has background noise. <p> The chunk size used for our experiments is 4 ms (32 bytes). The average energy is the sum of the absolute values of the linear values of the bytes in a chunk <ref> [16] </ref>. The idea is that if an audio signal has energy from voiced speech, the average energy of a chunk will be much higher than that of a chunk from a silent signal.
Reference: [17] <author> C.A. Ellis and S.J. Gibbs. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings fo the ACM SIGMOD '89 Conference in Groupware systems, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: Floor control policies usually permit or deny access to all the objects in the collaboration simultaneously, conceptually controlling the entire "floor" at once. More general concurrency control policies separate the objects into domains that can be accessed individually <ref> [17] </ref>. Floor control can be important in collaborative multimedia to structure the interaction and reduce bandwidth. SuiteSound is designed to support arbitrary floor control.
Reference: [18] <author> Janet Drake, Vahid Mashayekhi, John Riedl, and Wei-Tek Tsai. </author> <title> A distributed collaborative software inspection tool: Design, prototype, and early trial. </title> <journal> IEEE Software, </journal> <note> 1993. To appear. </note>
Reference-contexts: These include: Play, Loop (replay), Sort, and Length. The CSI tool (see section 3.3) relies heavily on the Annotator. 3.3 Collaborative Software Inspection The Collaborative Software Inspection tool (CSI) supports software inspection in a distributed, collaborative environment <ref> [18] </ref>. Software inspection activities can be thought of as asynchronous and synchronous. Preliminary results suggest, that given the proper audio support, distributed collaborative software inspection can be as effective as traditional software inspection. The asynchronous activities are those that can be done separately by the participants.
Reference: [19] <author> E. Lazowska, J. Zahorjan, D. Cheriton, and W. Zwaenepoel. </author> <title> File access performance of diskless workstations. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(3) </volume> <pages> 238-268, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: The etherfind output for each packet contains a timestamp, number of bytes in the packet, protocol, source workstation, destination workstation and the sending and receiving ports. To measure CPU load, we followed the method described in Lazowska et. al.'s paper <ref> [19] </ref>. We ran a process in the background that incremented a counter, and compared speed with and without Teleconf. The counter was run in conjunction with Teleconf, supporting 1, 2, 3, and 4-person conversations, for the same time interval. We repeated the runs five times in each case.
Reference: [20] <author> David. R. Cheriton and W. Zwaenepoel. </author> <title> Distributed process groups in the V kernel. </title> <journal> TOCS, </journal> <volume> 3(2) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: To avoid this problem, our applications do not construct cyclic flows. For instance, the Teleconf play and record objects are separate to avoid creating a false cycle. 15 None of these problems would exist in an operating system that supports multiple threads of control in each address space <ref> [20, 21] </ref>. Silence Deletion: There is a substantial amount of audio data that does not need to be sent. The silence deletion algorithms remove a significant portion of the flow of sound without affecting the quality.
Reference: [21] <author> Richard F. Rashid. </author> <title> Threads of a new system. </title> <journal> UNIX Review, </journal> <volume> 4(8) </volume> <pages> 37-49, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: To avoid this problem, our applications do not construct cyclic flows. For instance, the Teleconf play and record objects are separate to avoid creating a false cycle. 15 None of these problems would exist in an operating system that supports multiple threads of control in each address space <ref> [20, 21] </ref>. Silence Deletion: There is a substantial amount of audio data that does not need to be sent. The silence deletion algorithms remove a significant portion of the flow of sound without affecting the quality.
Reference: [22] <author> Mashito Hirakawa Tadao Ichikawa. </author> <title> Iconic programming: </title> <booktitle> Where to go? IEEE Software, </booktitle> <pages> pages 63-68, </pages> <month> November </month> <year> 1990. </year> <month> 18 </month>
Reference-contexts: Programmers should build applications using multimedia in the same way they build applications using conventional media. Users should have the same support for access control, concurrency control, undo/redo, and coupling for all media types. Graphical Specification: Build a visual programming language for flow specification <ref> [22] </ref>. Programmers could construct flows by drawing connections among filters from an iconic toolkit. Running flows could show sound moving among the filters visually. 16 Quality of Service: Develop a quality of service specification for the flow model.
References-found: 22

