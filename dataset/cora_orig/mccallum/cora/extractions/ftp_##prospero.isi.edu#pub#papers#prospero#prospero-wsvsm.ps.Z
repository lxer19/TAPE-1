URL: ftp://prospero.isi.edu/pub/papers/prospero/prospero-wsvsm.ps.Z
Refering-URL: http://gost.isi.edu/people/bcn/publications.html
Root-URL: http://www.isi.edu
Email: bcn@cs.washington.edu  
Title: Workstations and the Virtual System Model  
Author: B. Clifford Neuman 
Date: October, 1989  
Address: FR-35 Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Pubnum: Technical Report 89-10-10  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Luis-Felipe Cabrera and Jim Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year> <note> Also IBM Research Report RJ 5578, </note> <month> April </month> <year> 1987. </year>
Reference-contexts: The fact that this is not required in Prospero makes it much easier to place files where they are most frequently accessed with no need to move an entire hierarchy. The Prospero file system is similar to QuickSilver <ref> [1] </ref> and Tilde [2] in that it supports user centered naming. Each user chooses the parts of the system that will be visible, and this choice follows the user around regardless of the physical processor used.
Reference: [2] <author> Douglas Comer and Thomas P. Murtagh. </author> <title> The Tilde file naming scheme. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 509-514, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: The fact that this is not required in Prospero makes it much easier to place files where they are most frequently accessed with no need to move an entire hierarchy. The Prospero file system is similar to QuickSilver [1] and Tilde <ref> [2] </ref> in that it supports user centered naming. Each user chooses the parts of the system that will be visible, and this choice follows the user around regardless of the physical processor used.
Reference: [3] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Although the same name may refer to different objects within different contexts, the correct context is always known. 2.2 Comparison to Other Systems Unlike symbolic links in systems such as NFS [7], Andrew <ref> [3] </ref>, and Locus [8], all names for an object in Prospero are equivalent. In NFS, Andrew, and Locus, each object has a primary name, and all other names are translated to the primary name before the object is accessed. In Prospero, all names for the object are primary.
Reference: [4] <author> S. J. Mullender and A. S. Tanenbaum. </author> <title> The design of a capability-based distributed operating system. </title> <journal> The Computer Journal, </journal> <volume> 29(4) </volume> <pages> 289-299, </pages> <year> 1986. </year>
Reference-contexts: service can be used to name objects other than files and directories, and because the objects included in a directory do not need to be located on the same system as the directory itself, the directory service is actually much closer to directory services in object-based systems such as Amoeba <ref> [4] </ref> than to directories in traditional file systems. The Prospero directory service differs from that found in capability based systems in that no permission is implied by one's ability to name an object. 3 3 Role of the Workstation A workstation is its user's window to the world.
Reference: [5] <author> B. Clifford Neuman. </author> <title> The need for closure in large distributed systems. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 28-30, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: These programs can also add objects to that view and alter the names or attributes of included objects. A customizable name space has the potential to cause confusion and to limit sharing. To address this problem, Prospero supports closure <ref> [5] </ref>. A namespace is associated with every object. In this way, the context within which a name is to be resolved is automatically passed along with the object specifying the name.
Reference: [6] <author> B. Clifford Neuman. </author> <title> The Virtual System Model for large distributed operating systems. </title> <type> Technical Report 89-01-07, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: Users needn't be concerned with objects in which they have little interest. One way to help users cope with very large systems is to let each user see a smaller system containing only those parts that are of interest. This section briefly describes the virtual system model <ref> [6] </ref>, a new model for organizing large distributed systems. The virtual system model supports the maintenance of customized views of the system. Each view is called a virtual system. The virtual system model addresses several of the problems that arise in large systems.
Reference: [7] <author> R. Sandberg et al. </author> <title> Design and implementation of the Sun network file system. </title> <booktitle> In Proceedings of the Summer 1985 Usenix Conference, </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: Although the same name may refer to different objects within different contexts, the correct context is always known. 2.2 Comparison to Other Systems Unlike symbolic links in systems such as NFS <ref> [7] </ref>, Andrew [3], and Locus [8], all names for an object in Prospero are equivalent. In NFS, Andrew, and Locus, each object has a primary name, and all other names are translated to the primary name before the object is accessed. In Prospero, all names for the object are primary.
Reference: [8] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The Locus distributed operating system. </title> <booktitle> In Proceedings of the 9th Symposium on Operating Systems Principles, </booktitle> <pages> pages 49-70, </pages> <month> October </month> <year> 1983. </year> <month> 5 </month>
Reference-contexts: Although the same name may refer to different objects within different contexts, the correct context is always known. 2.2 Comparison to Other Systems Unlike symbolic links in systems such as NFS [7], Andrew [3], and Locus <ref> [8] </ref>, all names for an object in Prospero are equivalent. In NFS, Andrew, and Locus, each object has a primary name, and all other names are translated to the primary name before the object is accessed. In Prospero, all names for the object are primary.
References-found: 8

