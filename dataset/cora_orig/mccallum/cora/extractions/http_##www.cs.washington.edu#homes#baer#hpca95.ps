URL: http://www.cs.washington.edu/homes/baer/hpca95.ps
Refering-URL: http://www.cs.washington.edu/homes/baer/
Root-URL: 
Title: Two Techniques for Improving Performance on Bus-based Multiprocessors uses a large transfer block to take
Author: Craig Anderson and Jean-Loup Baer 
Keyword: coherence protocol  
Note: that  
Address: Seattle WA, 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: In this paper, we explore two techniques for reducing memory latency in bus-based multiprocessors. The first one, designed for sector caches, is a snoopy cache We evaluated the two techniques by simulating 6 applications that exhibit a variety of reference patterns. We compared the performance of the new proto col against that of the Illinois protocol with both small and large block sizes and found that it was effective in reducing memory latency and providing more consistent, good results than the Illinois protocol with a given line size. Read snarfing also improved performance mostly for protocols that use large line sizes. 
Abstract-found: 1
Intro-found: 1
Reference: [AB86] <author> James Archibald and Jean-Loup Baer. </author> <title> Cache coherence protocols: Evaluation using a multiprocessor simulation model. </title> <journal> ACM TOCS, </journal> <volume> 4(4) </volume> <pages> 273-298, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: The protocol is snoopy-based <ref> [AB86] </ref>. It incorporates features from the Illinois protocol [PP84] and from protocols or write policies with subblock (in)validations [CD93, Jou93]. The basic philosophy behind the protocol is as follows. As much as possible, we favor cache to cache transfers.
Reference: [AB93] <author> Craig Anderson and Jean-Loup Baer. </author> <title> A multilevel hierarchical cache coherence protocol for multiprocessors. </title> <booktitle> In Proc. of 7th Int. Parallel Processing Symoposium, </booktitle> <pages> pages 142-148, </pages> <year> 1993. </year>
Reference-contexts: With our assumption of dual-ported tag directories (c.f. Section 2), the processor lock-out problem is no longer present. 5 Methodology 5.1 Benchmarks We modified the Cerberus multiprocessor instruction-level simulator <ref> [BAD89, AB93] </ref> to evaluate both the sector cache protocol and snarfing. The basis for comparison (with usual caches) is the Illinois protocol.
Reference: [AB94] <author> Craig Anderson and Jean-Loup Baer. </author> <title> Design and evaluation of a subblock cache coherence protocol for bus-based multiprocessors. </title> <type> Technical Report 94-05-02, </type> <institution> University of Washing-ton, </institution> <year> 1994. </year>
Reference-contexts: It must be written back on replacement. Read and write accesses to this subblock hit with no bus transac tions. Additional detail on the subblock protocol, including complete tables of state transitions and an example of the protocol in action may be found in <ref> [AB94] </ref>. 3.2 Related work Goodman introduced the concept of a coherence block which can be different in size from either an address block (the amount of storage associated with a cache address tag) or a transfer block, which is the amount of data transferred from memory on a miss [Goo87]. <p> In all experiments the subblock size b was 8 bytes and caches were two-way set-associative (k = 2). In order to minimize simulation time, we only simulated relatively large caches (C = 128K). Previous 4 work <ref> [AB94] </ref> indicates that using a smaller cache size does not significantly change the results. The block size was either 8 or 64 bytes. For the usual caches we used the Illinois protocol.
Reference: [BAD89] <author> E.D. Brooks III, T. S. Axelrod, and G. H. Dar-mohray. </author> <title> The Cerberus multiprocessor simulator. </title> <editor> In G. Rodrigue, editor, </editor> <booktitle> Parallel Processing for Scientific Computing, </booktitle> <pages> pages 384-390. </pages> <publisher> SIAM, </publisher> <year> 1989. </year>
Reference-contexts: With our assumption of dual-ported tag directories (c.f. Section 2), the processor lock-out problem is no longer present. 5 Methodology 5.1 Benchmarks We modified the Cerberus multiprocessor instruction-level simulator <ref> [BAD89, AB93] </ref> to evaluate both the sector cache protocol and snarfing. The basis for comparison (with usual caches) is the Illinois protocol.
Reference: [CD93] <author> Yung-Syau Chen and Michel Dubois. </author> <title> Cache protocols with partial block invalidations. </title> <booktitle> In 7th International Parallel Processing Symposium, </booktitle> <pages> pages 16-24, </pages> <year> 1993. </year>
Reference-contexts: The protocol is snoopy-based [AB86]. It incorporates features from the Illinois protocol [PP84] and from protocols or write policies with subblock (in)validations <ref> [CD93, Jou93] </ref>. The basic philosophy behind the protocol is as follows. As much as possible, we favor cache to cache transfers. On read misses, we transfer as many valid subblocks in the block as possible. <p> However, at some point increased traffic from false sharing misses will cause an overall increase in memory latency and bus traffic. Other authors have proposed directory based schemes in which the unit of coherence is smaller than an address block. Chen and Dubois <ref> [CD93] </ref> describe an extension to a full-map directory protocol in which a valid bit is associated with each invalidation block. They show a substantial decrease in both miss rates and memory traffic when partial invalidations are used.
Reference: [CGM91] <author> David Cheriton, Hendrik Goosen, and Philip Machanick. </author> <title> Restructuring a parallel simulation to improve cache behavior in a shared memory multiprocessor: A first experience. </title> <booktitle> In Proc. of the Intl. Symp. on Shared Memory Multiprocessing, </booktitle> <pages> pages 109-118, </pages> <year> 1991. </year>
Reference-contexts: It slightly reduced the number of bus transactions, and had a very small impact on bus utilization. 6.3 MP3D MP3D has a great deal of both true and false sharing <ref> [CGM91, EJ91] </ref>. Such sharing tends to limit speedups as more processors are devoted to the prob lem. Because of MP3D's sharing behavior, using a large block size severely impacts performance when using 16 or 32 processors, as can be seen in Figure 3A for the 64I protocol.
Reference: [DL92] <author> Czarek Dubnicki and Thomas LeBlanc. </author> <title> Adjustable block size coherent caches. </title> <booktitle> In Proc. of 19th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 170-180, </pages> <year> 1992. </year>
Reference-contexts: Chen and Dubois [CD93] describe an extension to a full-map directory protocol in which a valid bit is associated with each invalidation block. They show a substantial decrease in both miss rates and memory traffic when partial invalidations are used. Dubnicki and LeBlanc <ref> [DL92] </ref> propose adjustable block size caches where the size of an address block dynamically grows or shrinks, in a buddy-system like fashion, in response to various patterns of write sharing. Unlike Chen's protocol, Dubnicki's protocol is not easily adaptable to non-directory based coherence protocols.
Reference: [DN87] <author> S. Devadas and A. R. </author> <title> Newton. Topological optimization of multiple level array logic. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <month> November </month> <year> 1987. </year>
Reference-contexts: MP3D is a 3-dimensional particle simulator which has poor locality and incurs a great deal of coherence misses. We ran MP3D on 50000 molecules for 50 steps (21 million instructions). Topopt performs topological optimization on VLSI circuits using a parallel simulated annealing algorithm <ref> [DN87] </ref>. This application exhibits a fair amount of both true and false sharing [EJ91]. We used the cpla1.lomim input file (1.7 billion instructions). Pverify determines whether two boolean circuits are functionally identical [MDWS87]. It exhibits a great deal of false sharing, even when using moderate-sized blocks [EJ91].
Reference: [EJ91] <author> Susan Eggers and Tor Jeremiassen. </author> <title> Eliminating false-sharing. </title> <booktitle> In Proc. of Int. Conf. on Parallel Processing, </booktitle> <pages> pages I-377-381, </pages> <year> 1991. </year>
Reference-contexts: We ran MP3D on 50000 molecules for 50 steps (21 million instructions). Topopt performs topological optimization on VLSI circuits using a parallel simulated annealing algorithm [DN87]. This application exhibits a fair amount of both true and false sharing <ref> [EJ91] </ref>. We used the cpla1.lomim input file (1.7 billion instructions). Pverify determines whether two boolean circuits are functionally identical [MDWS87]. It exhibits a great deal of false sharing, even when using moderate-sized blocks [EJ91]. We ran Pverify on the circuits C880.21.berk1 and C880.21.berk2 (1 billion instructions). <p> This application exhibits a fair amount of both true and false sharing <ref> [EJ91] </ref>. We used the cpla1.lomim input file (1.7 billion instructions). Pverify determines whether two boolean circuits are functionally identical [MDWS87]. It exhibits a great deal of false sharing, even when using moderate-sized blocks [EJ91]. We ran Pverify on the circuits C880.21.berk1 and C880.21.berk2 (1 billion instructions). Our final applications is Barnes-Hut, from the SPLASH suite. It simulates the effect of gravity on a system of bodies. Barnes exhibits a very low coherence miss rate, even when 64 processors are used. <p> It slightly reduced the number of bus transactions, and had a very small impact on bus utilization. 6.3 MP3D MP3D has a great deal of both true and false sharing <ref> [CGM91, EJ91] </ref>. Such sharing tends to limit speedups as more processors are devoted to the prob lem. Because of MP3D's sharing behavior, using a large block size severely impacts performance when using 16 or 32 processors, as can be seen in Figure 3A for the 64I protocol. <p> The subblock protocol also did nearly as well as 8I protocol in minimizing the number of bytes transferred, and had fewer bus transactions than the other protocols. 6.5 Pverify Pverify has great deal of false sharing, even for moderate blocks sizes <ref> [EJ91] </ref>. It is not surprising, therefore, that using a large block size substantially degrades performance, as can be seen in Figure 5A. In contrast, using a small block size leads to near-linear speedup.
Reference: [EK89] <author> Susan Eggers and Randy Katz. </author> <title> Evaluating the performance of four snooping cache coherence protocols. </title> <booktitle> In Proc. of 16th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 2-15, </pages> <year> 1989. </year>
Reference-contexts: Read snarfing was discussed in previous work by Rudolph [SR84], Goodman [GW88], and Eggers <ref> [EK89] </ref>. Of these, only Eggers evaluated the performance benefits of read snarfing.
Reference: [Goo87] <author> James Goodman. </author> <title> Coherency for multiprocessor virtual caches. </title> <booktitle> In Proc. of 2nd Int. Conf. on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 72-81, </pages> <year> 1987. </year>
Reference-contexts: in [AB94]. 3.2 Related work Goodman introduced the concept of a coherence block which can be different in size from either an address block (the amount of storage associated with a cache address tag) or a transfer block, which is the amount of data transferred from memory on a miss <ref> [Goo87] </ref>. Goodman advocates using a large size for the coherence block to reduce the number of coherence operations that must be done to read or write a given amount of data.
Reference: [GW88] <author> James R. Goodman and Phillip J. Woest. </author> <title> The Wisconsin Multicube: A new large-scale cache coherent multiprocessor. </title> <booktitle> In Proc. of 15th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: Read snarfing was discussed in previous work by Rudolph [SR84], Goodman <ref> [GW88] </ref>, and Eggers [EK89]. Of these, only Eggers evaluated the performance benefits of read snarfing.
Reference: [Jou93] <author> Norm Jouppi. </author> <title> Cache write policies and performance. </title> <booktitle> In Proc. of 20th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 191-201, </pages> <year> 1993. </year>
Reference-contexts: The protocol is snoopy-based [AB86]. It incorporates features from the Illinois protocol [PP84] and from protocols or write policies with subblock (in)validations <ref> [CD93, Jou93] </ref>. The basic philosophy behind the protocol is as follows. As much as possible, we favor cache to cache transfers. On read misses, we transfer as many valid subblocks in the block as possible.
Reference: [MDWS87] <author> H-K. T. Ma, S. Devadas, R. Wei, and A. Sangiovanni-Vincentelli. </author> <title> Logic verification algorithms and their parallel implementation. </title> <booktitle> In Proceedings of the 24th Design Automation Conference, </booktitle> <pages> pages 283-290, </pages> <year> 1987. </year>
Reference-contexts: Topopt performs topological optimization on VLSI circuits using a parallel simulated annealing algorithm [DN87]. This application exhibits a fair amount of both true and false sharing [EJ91]. We used the cpla1.lomim input file (1.7 billion instructions). Pverify determines whether two boolean circuits are functionally identical <ref> [MDWS87] </ref>. It exhibits a great deal of false sharing, even when using moderate-sized blocks [EJ91]. We ran Pverify on the circuits C880.21.berk1 and C880.21.berk2 (1 billion instructions). Our final applications is Barnes-Hut, from the SPLASH suite. It simulates the effect of gravity on a system of bodies.
Reference: [PP84] <author> Mark Papamarcos and Janak Patel. </author> <title> A low overhead coherence solution for multiprocessors with private cache memories. </title> <booktitle> In Proc. of 11th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 348-354, </pages> <year> 1984. </year>
Reference-contexts: The protocol is snoopy-based [AB86]. It incorporates features from the Illinois protocol <ref> [PP84] </ref> and from protocols or write policies with subblock (in)validations [CD93, Jou93]. The basic philosophy behind the protocol is as follows. As much as possible, we favor cache to cache transfers. On read misses, we transfer as many valid subblocks in the block as possible.
Reference: [Sez94] <author> Andre Seznec. </author> <title> Decoupled sector caches: Conciliating low tag implementation cost and low miss ratio. </title> <booktitle> In Proc. of 21th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 384-393, </pages> <year> 1994. </year>
Reference-contexts: Note also that a usual cache with L = b is more memory expensive than a sector cache with L and b as above <ref> [Sez94] </ref>. Systems with sector caches also require more bus lines to transmit bitmasks corresponding to the status of the subblocks in a particular block.
Reference: [SR84] <author> Z. Segall and L. Rudolph. </author> <title> Dynamic decentralized cache schemes for an MIMD parallel processor. </title> <booktitle> In Proc. of 11th Int. Symp. on Computer Architecture, </booktitle> <pages> pages 340-347, </pages> <year> 1984. </year>
Reference-contexts: Read snarfing was discussed in previous work by Rudolph <ref> [SR84] </ref>, Goodman [GW88], and Eggers [EK89]. Of these, only Eggers evaluated the performance benefits of read snarfing.
Reference: [SWG92] <author> J. Singh, W.-D. Weber, and A. Gupta. </author> <title> SPLASH: Stanford Parallel Applications for Shared Memory. </title> <booktitle> Computer Architecture News, </booktitle> <pages> pages 5-44, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: We ran our simulation on a 250x250 matrix, comprising approximately 161 million instructions on a single processor. Cholesky is a program from the SPLASH benchmark suite for sparse matrix factorization <ref> [SWG92] </ref>. Our simulation used the BCSSTK14 input file (65 million instructions). Another program from the SPLASH suite is MP3D. MP3D is a 3-dimensional particle simulator which has poor locality and incurs a great deal of coherence misses. We ran MP3D on 50000 molecules for 50 steps (21 million instructions).
Reference: [TM91] <author> Milo Tomasevic and Veljko Milutinovic. </author> <title> A simulation study of snoopy cache coherence protocols. </title> <booktitle> In Proc. of the 25th Hawaii Int. Conference on System Sciences, </booktitle> <pages> pages 427-436, </pages> <year> 1991. </year>
Reference-contexts: Unlike Chen's protocol, Dubnicki's protocol is not easily adaptable to non-directory based coherence protocols. Tomasevic and Milutinovic <ref> [TM91] </ref> advocate a Word Invalidate Protocol (WIP) that uses per-word valid bits and additional block states to reduce the "pollution" of valid blocks with invalid words.
References-found: 19

