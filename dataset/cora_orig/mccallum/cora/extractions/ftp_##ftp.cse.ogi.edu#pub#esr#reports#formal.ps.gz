URL: ftp://ftp.cse.ogi.edu/pub/esr/reports/formal.ps.gz
Refering-URL: http://www.cse.ogi.edu/~calton/publication.html
Root-URL: http://www.cse.ogi.edu
Title: A Formal Characterization of Epsilon Serializability  
Author: Krithi Ramamritham Calton Pu 
Address: Amherst MA 01003  Beaverton, OR 97006  
Affiliation: Dept. of Computer Science University of Massachusetts  Dept. Computer of Science and Eng. Oregon Grad. Inst. of Sci. Tech  
Abstract: Epsilon Serializability (ESR) is a generalization of classic serializability (SR). In this paper, we provide a precise characterization of ESR when queries that may view inconsistent data run concurrently with consistent update transactions. Our first goal is to understand the behavior of queries in the presence of conflicts and to show how ESR in fact is a generalization of SR. So, using the ACTA framework, we formally express the inter-transaction conflicts that are recognized by ESR and through that define ESR, analogous to the manner in which conflict-based serializability is defined. Secondly, expressions are derived for the amount of inconsistency (in a data item) viewed by a query and its effects on the results of a query. These inconsistencies arise from concurrent updates allowed by ESR. Thirdly, in order to maintain the inconsistencies within bounds associated with each query, the expressions are used to determine the preconditions that operations have to satisfy. The results of a query, and the errors in it, depend on what a query does with the, possibly inconsistent, data viewed by it. One of the important byproducts of this work is the identification of different types of queries which lend themselves to an analysis of the effects of data inconsistency on the results of the query. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In contrast, ESR refers specifically to the amount of inconsistency in state space. Sheth and Rusinkiewicz [26] have proposed eventual consistency , similar to identity connections introduced by Wiederhold and Qian [28], and lagging consistency , similar to asynchronously updated copies like quasi-copies <ref> [1] </ref>. They discuss implementation issues in [24, 25]. In comparison, ESR achieves similar goals but has a general approach based on state space properties and functional properties. Barbara and Garcia-Molina [2] proposed controlled inconsistency , which extends their work on quasi-copies [1]. <p> consistency , similar to asynchronously updated copies like quasi-copies <ref> [1] </ref>. They discuss implementation issues in [24, 25]. In comparison, ESR achieves similar goals but has a general approach based on state space properties and functional properties. Barbara and Garcia-Molina [2] proposed controlled inconsistency , which extends their work on quasi-copies [1]. Their demarcation protocol [3] can be used for implementing ESR in distributed TP systems. ESR is applicable to arithmetic and other kinds of consistency constraints. 6.2 Asynchronous Transaction Processing Garcia-Molina et al. [9] proposed sagas that use semantic atomicity [8] defined on transaction semantics.
Reference: [2] <author> D. Barbara and H. Garcia-Molina. </author> <title> The case for controlled inconsistency in replicated data. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 35-42, </pages> <address> Houston, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: They discuss implementation issues in [24, 25]. In comparison, ESR achieves similar goals but has a general approach based on state space properties and functional properties. Barbara and Garcia-Molina <ref> [2] </ref> proposed controlled inconsistency , which extends their work on quasi-copies [1]. Their demarcation protocol [3] can be used for implementing ESR in distributed TP systems.
Reference: [3] <author> D. Barbara, H. Garcia-Molina, </author> <title> The Demarcation Protocol: A Technique for Maintaining Arithmetic Constraints in Distributed Database Systems, Extending Database Technology Conference, </title> <address> Vienna, </address> <month> March </month> <year> 1992, </year> <booktitle> in Lecture Notes in Computer Science #580, </booktitle> <publisher> Springer Verlag, </publisher> <pages> pp. 373-397. </pages>
Reference-contexts: They discuss implementation issues in [24, 25]. In comparison, ESR achieves similar goals but has a general approach based on state space properties and functional properties. Barbara and Garcia-Molina [2] proposed controlled inconsistency , which extends their work on quasi-copies [1]. Their demarcation protocol <ref> [3] </ref> can be used for implementing ESR in distributed TP systems. ESR is applicable to arithmetic and other kinds of consistency constraints. 6.2 Asynchronous Transaction Processing Garcia-Molina et al. [9] proposed sagas that use semantic atomicity [8] defined on transaction semantics.
Reference: [4] <author> P. Chrysanthis and K. Ramamritham. </author> <title> A formalism for extended transaction models. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: Our first goal is to understand the behavior of queries in the presence of conflicts and to show how ESR in fact is a generalization of SR. So, in section 2, using the ACTA framework <ref> [5, 6, 4] </ref> we formally express the inter-transaction conflicts that are recognized by ESR and, through that, define ESR, analogous to the manner in which conflict-based serializability is defined. Our second goal is to quantify the amount of inconsistency experienced by queries. <p> point out that throughout the paper, it is assumed that the read set of a query, i.e., the set of data items read by a query is not affected by the inconsistency in the data read by a query. 2 A Formal Definition of ESR We use the ACTA framework <ref> [5, 4, 6] </ref> to introduce the notion of conflicts between operations and discuss the dependencies induced between transactions when they invoke conflicting transactions.
Reference: [5] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings of SIGMOD Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Our first goal is to understand the behavior of queries in the presence of conflicts and to show how ESR in fact is a generalization of SR. So, in section 2, using the ACTA framework <ref> [5, 6, 4] </ref> we formally express the inter-transaction conflicts that are recognized by ESR and, through that, define ESR, analogous to the manner in which conflict-based serializability is defined. Our second goal is to quantify the amount of inconsistency experienced by queries. <p> point out that throughout the paper, it is assumed that the read set of a query, i.e., the set of data items read by a query is not affected by the inconsistency in the data read by a query. 2 A Formal Definition of ESR We use the ACTA framework <ref> [5, 4, 6] </ref> to introduce the notion of conflicts between operations and discuss the dependencies induced between transactions when they invoke conflicting transactions.
Reference: [6] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: The Saga continues. </title> <editor> In Ahmed Elmagarmid, editor, </editor> <title> Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Our first goal is to understand the behavior of queries in the presence of conflicts and to show how ESR in fact is a generalization of SR. So, in section 2, using the ACTA framework <ref> [5, 6, 4] </ref> we formally express the inter-transaction conflicts that are recognized by ESR and, through that, define ESR, analogous to the manner in which conflict-based serializability is defined. Our second goal is to quantify the amount of inconsistency experienced by queries. <p> point out that throughout the paper, it is assumed that the read set of a query, i.e., the set of data items read by a query is not affected by the inconsistency in the data read by a query. 2 A Formal Definition of ESR We use the ACTA framework <ref> [5, 4, 6] </ref> to introduce the notion of conflicts between operations and discuss the dependencies induced between transactions when they invoke conflicting transactions.
Reference: [7] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializability: a correctness criterion for global concurrency control in InterBase. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <pages> pages 347-355, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: In general, ESR offers a much finer granularity 16 control than the degrees of consistency. Garcia-Molina and Wiederhold [10] have introduced the weak consistency class of read-only transactions. In contrast to their WLCA algorithm, ESR is supported by many divergence control methods [29]. Similarly, Du and Elmagarmid <ref> [7] </ref> proposed quasi-serializability (QSR). QSR has limited applicability because of the local SR requirements despite unbounded inconsistency. Korth and Speegle [16] introduced a formal model that include transaction pre-conditions and post-conditions. In contrast, ESR refers specifically to the amount of inconsistency in state space.
Reference: [8] <author> H. Garcia-Molina. </author> <title> Using semantic knowledge for transactions processing in a distributed database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(2) </volume> <pages> 186-213, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: Their demarcation protocol [3] can be used for implementing ESR in distributed TP systems. ESR is applicable to arithmetic and other kinds of consistency constraints. 6.2 Asynchronous Transaction Processing Garcia-Molina et al. [9] proposed sagas that use semantic atomicity <ref> [8] </ref> defined on transaction semantics. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database. Levy et al [19] defined relaxed atomicity and its implementation by the Polarized Protocol.
Reference: [9] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Barbara and Garcia-Molina [2] proposed controlled inconsistency , which extends their work on quasi-copies [1]. Their demarcation protocol [3] can be used for implementing ESR in distributed TP systems. ESR is applicable to arithmetic and other kinds of consistency constraints. 6.2 Asynchronous Transaction Processing Garcia-Molina et al. <ref> [9] </ref> proposed sagas that use semantic atomicity [8] defined on transaction semantics. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database. Levy et al [19] defined relaxed atomicity and its implementation by the Polarized Protocol.
Reference: [10] <author> H. Garcia-Molina and G. Wiederhold. </author> <title> Read-only transactions in a distributed database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7(2) </volume> <pages> 209-234, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: Since degree 2 allows unbounded inconsistency, degree 2 queries become less accurate as a system grows larger and faster. In general, ESR offers a much finer granularity 16 control than the degrees of consistency. Garcia-Molina and Wiederhold <ref> [10] </ref> have introduced the weak consistency class of read-only transactions. In contrast to their WLCA algorithm, ESR is supported by many divergence control methods [29]. Similarly, Du and Elmagarmid [7] proposed quasi-serializability (QSR). QSR has limited applicability because of the local SR requirements despite unbounded inconsistency.
Reference: [11] <author> J.N. Gray, R.A. Lorie, </author> <title> G.R. Putzolu, and I.L. Traiger. Granularity of locks and degrees of consistency in a shared data base. </title> <booktitle> In Proceedings of the IFIP Working Conference on Modeling of Data Base Management Systems, </booktitle> <pages> pages 1-29, </pages> <year> 1979. </year>
Reference-contexts: A taxonomy of these correctness criteria is given in [23]. Here we contrast those that are closely related to ESR with ESR. Gray's different degrees of consistency <ref> [11] </ref> is an example of a coarse spectrum of consistency. Of specific interest to us is degree 2 consistency which trades off reduced consistency for higher concurrency for queries. Since degree 2 allows unbounded inconsistency, degree 2 queries become less accurate as a system grows larger and faster.
Reference: [12] <author> T. Haerder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(4) </volume> <pages> 287-317, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: This has practical implications. Specifically, before an update is begun, the data values may have to be logged in order to derive the inconsistency for the 13 queries that may subsequently begin. This is the case of systems that require UNDO capability (using the STEAL buffering policy <ref> [12] </ref>). Given that the lower bound on the result of the above query is 0, one may be tempted to take the following solution: Assume that x i;initial is the smallest value x i can take, i.e., 0.
Reference: [13] <author> M. Hsu and A. Silberschatz. </author> <title> Unilateral commit: A new paradigm for reliable distributed transaction processing. </title> <booktitle> In Proceedings of the Seventh International Conference on Data Engineering, </booktitle> <address> Kobe, Japan, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: ESR is defined over state space properties and less dependent on application semantics. An important problem in asynchronous TP is to guarantee uniform outcome of distributed transactions in the absence of a commit protocol. Unilateral Commit <ref> [13] </ref> is a protocol that uses reliable message transmission to ensure that a uniform decision is carried out asynchronously. Optimistic Commit [18] is a protocol that uses Compensating Transactions [15] to compensate for the effects of inconsistent partial results, ensuring a uniform decision.
Reference: [14] <author> M. Kamath and K. Ramamritham, </author> <title> "Performance Characteristics of Epsilon Serializability with Hierarchical Inconsistency Bounds", </title> <booktitle> International Conference on Data Engineering, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: An evaluation of the performance improvement due to ESR is reported in <ref> [14] </ref>. In this paper, we have examined epsilon serializability (ESR) from first principles. We showed precisely how ESR is related to SR, for example, which conflicts considered by SR are ignored by ESR.
Reference: [15] <author> H. Korth, E. Levy, and A. Silberschatz. </author> <title> A formal approach to recovery by compensating transactions. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Unilateral Commit [13] is a protocol that uses reliable message transmission to ensure that a uniform decision is carried out asynchronously. Optimistic Commit [18] is a protocol that uses Compensating Transactions <ref> [15] </ref> to compensate for the effects of inconsistent partial results, ensuring a uniform decision. Unilateral Commit and Optimistic Commit can be seen as implementation techniques for ESR-based systems. Another way to increase TP concurrency is Escrow Method [20].
Reference: [16] <author> H.F. Korth and G.D. Speegle. </author> <title> Formal model of correctness without serializability. </title> <booktitle> In Proceedings of 1988 ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 379-386, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: In contrast to their WLCA algorithm, ESR is supported by many divergence control methods [29]. Similarly, Du and Elmagarmid [7] proposed quasi-serializability (QSR). QSR has limited applicability because of the local SR requirements despite unbounded inconsistency. Korth and Speegle <ref> [16] </ref> introduced a formal model that include transaction pre-conditions and post-conditions. In contrast, ESR refers specifically to the amount of inconsistency in state space.
Reference: [17] <author> N. Krishnakumar and A.J. Bernstein. </author> <title> Bounded Ignorance in Replicated Systems. </title> <booktitle> In Proceedings of the 1991 ACM Symposium on principles of Database Systems, </booktitle> <pages> pages 63-74, </pages> <month> May </month> <year> 1991, </year> <month> 20 </month>
Reference: [18] <author> E. Levy, H. Korth, and A. Silberschatz. </author> <title> An optimistic commit protocol for distributed transaction management. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Denver, Colorado, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: An important problem in asynchronous TP is to guarantee uniform outcome of distributed transactions in the absence of a commit protocol. Unilateral Commit [13] is a protocol that uses reliable message transmission to ensure that a uniform decision is carried out asynchronously. Optimistic Commit <ref> [18] </ref> is a protocol that uses Compensating Transactions [15] to compensate for the effects of inconsistent partial results, ensuring a uniform decision. Unilateral Commit and Optimistic Commit can be seen as implementation techniques for ESR-based systems. Another way to increase TP concurrency is Escrow Method [20].
Reference: [19] <author> E. Levy, H. Korth, and A. Silberschatz. </author> <title> A theory of relaxed atomicity. </title> <booktitle> In Proceedings of the 1991 ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database. Levy et al <ref> [19] </ref> defined relaxed atomicity and its implementation by the Polarized Protocol. ESR is defined over state space properties and less dependent on application semantics. An important problem in asynchronous TP is to guarantee uniform outcome of distributed transactions in the absence of a commit protocol.
Reference: [20] <author> P. E. O'Neil. </author> <title> The escrow transactional method. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 405-430, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Optimistic Commit [18] is a protocol that uses Compensating Transactions [15] to compensate for the effects of inconsistent partial results, ensuring a uniform decision. Unilateral Commit and Optimistic Commit can be seen as implementation techniques for ESR-based systems. Another way to increase TP concurrency is Escrow Method <ref> [20] </ref>. Like the escrow method, ESR also uses properties of data state space, but ESR does not rely on operation semantics to preserve consistency. Similarly, data-value partitioning [27] increases distributed TP system availability and autonomy.
Reference: [21] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Epsilon Serializability (ESR) <ref> [21, 29] </ref>, a generalization of classic serializability (SR), explicitly allows some limited amount of inconsistency in transaction processing (TP). ESR enhances concurrency since some non-SR execution schedules are permitted. For example, epsilon-transactions (ETs) that just perform queries may execute in spite of ongoing concurrent updates to the database. <p> Using the expressions quantifying the inconsistency, we derive preconditions that operations have to satisfy. Derivation of these preconditions is the subject of Section 4. These preconditions point to possible mechanisms that can be used to realize ESR and show that more flexible implementations than those presented in <ref> [21, 29] </ref> are possible. The effects of the inconsistent view on the results of a query depend on what a query does with the viewed data. In general, a small data inconsistency can translate into an arbitrarily large result inconsistency. <p> Similarly, data-value partitioning [27] increases distributed TP system availability and autonomy. ESR can be used in the modeling and management of escrow and partitioned data-values. 7 Conclusions Previous ESR papers discussed ESR in informal terms by motivating it via specific applications <ref> [21, 22] </ref> and by presenting implementation-oriented considerations [29]. An evaluation of the performance improvement due to ESR is reported in [14]. In this paper, we have examined epsilon serializability (ESR) from first principles.
Reference: [22] <author> C. Pu and A. Leff. </author> <title> Autonomous transaction execution with epsilon-serializability. </title> <booktitle> In Proceedings of 1992 RIDE Workshop on Transaction and Query Processing, Phoenix, </booktitle> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal>
Reference-contexts: The correctness notion in ESR is based on bounding the amount of imported and exported inconsistency for each ET. The benefits of ESR have been discussed in the papers cited above. For instance, ESR may increase system availability and autonomy <ref> [22] </ref> in distributed TP systems, since asynchronous execution is allowed. But in this paper we restrict our attention to ESR in a centralized TP system. In its full generality, update ETs may view inconsistent data the same way query ETs may. <p> Similarly, data-value partitioning [27] increases distributed TP system availability and autonomy. ESR can be used in the modeling and management of escrow and partitioned data-values. 7 Conclusions Previous ESR papers discussed ESR in informal terms by motivating it via specific applications <ref> [21, 22] </ref> and by presenting implementation-oriented considerations [29]. An evaluation of the performance improvement due to ESR is reported in [14]. In this paper, we have examined epsilon serializability (ESR) from first principles.
Reference: [23] <author> Ramamritham, K. and P. Chrysanthis. </author> <title> "In Search of Acceptability Criteria: Database Consistency Requirements and Transaction Correctness Properties" Distributed Object Management, </title> <editor> Ozsu, Dayal, and Valduriez, Ed., </editor> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Clearly, more elaborate characterization of these functions defined on discrete metric spaces will be useful. 6 Related Work 6.1 General Weak Consistency Criteria Several notions of correctness weaker than SR have been proposed previously. A taxonomy of these correctness criteria is given in <ref> [23] </ref>. Here we contrast those that are closely related to ESR with ESR. Gray's different degrees of consistency [11] is an example of a coarse spectrum of consistency. Of specific interest to us is degree 2 consistency which trades off reduced consistency for higher concurrency for queries.
Reference: [24] <author> A. Sheth and P. Krishnamurthy. </author> <title> Redundant data management in Bellcore and BCC databases. </title> <type> Technical Report TM-STS-015011/1, </type> <institution> Bell Communications Research, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: In contrast, ESR refers specifically to the amount of inconsistency in state space. Sheth and Rusinkiewicz [26] have proposed eventual consistency , similar to identity connections introduced by Wiederhold and Qian [28], and lagging consistency , similar to asynchronously updated copies like quasi-copies [1]. They discuss implementation issues in <ref> [24, 25] </ref>. In comparison, ESR achieves similar goals but has a general approach based on state space properties and functional properties. Barbara and Garcia-Molina [2] proposed controlled inconsistency , which extends their work on quasi-copies [1]. Their demarcation protocol [3] can be used for implementing ESR in distributed TP systems.
Reference: [25] <author> A. Sheth, Yungho Leu, and Ahmed Elmagarmid. </author> <title> Maintaining consistency of interdependent data in multidatabase systems. </title> <type> Technical Report CSD-TR-91-016, </type> <institution> Computer Science Department, Purdue University, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: In contrast, ESR refers specifically to the amount of inconsistency in state space. Sheth and Rusinkiewicz [26] have proposed eventual consistency , similar to identity connections introduced by Wiederhold and Qian [28], and lagging consistency , similar to asynchronously updated copies like quasi-copies [1]. They discuss implementation issues in <ref> [24, 25] </ref>. In comparison, ESR achieves similar goals but has a general approach based on state space properties and functional properties. Barbara and Garcia-Molina [2] proposed controlled inconsistency , which extends their work on quasi-copies [1]. Their demarcation protocol [3] can be used for implementing ESR in distributed TP systems.
Reference: [26] <author> A. Sheth and M. Rusinkiewicz. </author> <title> Management of interdependent data: Specifying dependency and consistency requirements. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 133-136, </pages> <address> Houston, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: QSR has limited applicability because of the local SR requirements despite unbounded inconsistency. Korth and Speegle [16] introduced a formal model that include transaction pre-conditions and post-conditions. In contrast, ESR refers specifically to the amount of inconsistency in state space. Sheth and Rusinkiewicz <ref> [26] </ref> have proposed eventual consistency , similar to identity connections introduced by Wiederhold and Qian [28], and lagging consistency , similar to asynchronously updated copies like quasi-copies [1]. They discuss implementation issues in [24, 25].
Reference: [27] <author> N. Soparkar and A. Silberschatz. </author> <title> Data-value partitioning and virtual messages. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Principles of Database Systems, </booktitle> <address> Nashville, Tennessee, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Another way to increase TP concurrency is Escrow Method [20]. Like the escrow method, ESR also uses properties of data state space, but ESR does not rely on operation semantics to preserve consistency. Similarly, data-value partitioning <ref> [27] </ref> increases distributed TP system availability and autonomy. ESR can be used in the modeling and management of escrow and partitioned data-values. 7 Conclusions Previous ESR papers discussed ESR in informal terms by motivating it via specific applications [21, 22] and by presenting implementation-oriented considerations [29].
Reference: [28] <author> G. Wiederhold and X. Qian. </author> <title> Modeling asynchrony in distributed databases. </title> <booktitle> In Proceedings of the Third International Conference on Data Engineering, </booktitle> <pages> pages 246-250, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: Korth and Speegle [16] introduced a formal model that include transaction pre-conditions and post-conditions. In contrast, ESR refers specifically to the amount of inconsistency in state space. Sheth and Rusinkiewicz [26] have proposed eventual consistency , similar to identity connections introduced by Wiederhold and Qian <ref> [28] </ref>, and lagging consistency , similar to asynchronously updated copies like quasi-copies [1]. They discuss implementation issues in [24, 25]. In comparison, ESR achieves similar goals but has a general approach based on state space properties and functional properties.

References-found: 28

