URL: http://monet.cs.uiuc.edu/~h-chu3/papers/OSDI-99.ps
Refering-URL: http://monet.cs.uiuc.edu/~h-chu3/
Root-URL: http://www.cs.uiuc.edu
Email: h-chu3,klara@cs.uiuc.edu  
Title: CPU Service Classes for Multimedia Applications  
Author: Hao-hua Chu and Klara Nahrstedt 
Address: Urbana Champaign  
Affiliation: Department of Computer Science University of Illinois at  
Abstract: We present the design, implementation, and experimental results of our soft real time (SRT) system for multimedia applications in a general purpose UNIX environment. The SRT system supports several service classes for the real time processes based on their processor usage time pattern: periodic constant processing time(PCPT) class, aperiodic constant processing time(ACPT) class, variable processing time (VPT) class, and one-time constant processing time(OCPT) class. It also provides the following features: (1) reservation and timing guarantees for the service classes, (2) overrun protection among real time processes, (3) dynamic earliest deadline first (EDF) algorithm for scheduling of multiple real time (RT) processes,(4) overrun scheduling algorithm, (5) system-initiated adaptation strategies, (6) probing service to estimate the amount of processing time needed prior to a reservation, (7) profiling service to record and retrieve the processing time needed for a reservation, (8) synchronization support among concurrent and cooperating real time processes, and (9) guaranteed allocation for traditional time sharing (TS) processes. Another unique feature of the SRT system is its easy portability to any operating systems with real time extensions because it is implemented purely in the user space without any modifications to the kernel. We have implemented the SRT system on top of the Solaris 2.6 operating system with scheduling overhead under 400us and with good performance guarantees.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ATM FORUM Technical Committee. </author> <title> "Traffic Management Specification Version 4.0", </title> <note> available from http://www.atmforum.com/atmforum/specs/approved.html, April 1996. </note>
Reference-contexts: Class Specification Parameters Guarantee ATM Network traffic classes CBR (Constant Bit Rate) P CR = Peak Cell Rate P CR rt-VBR (Variable Bit Rate) SCR = Sustainable Cell Rate See ATM Forum <ref> [1] </ref> P CR = Peak Cell Rate M BS = Maximum Burst Size Processor service classes PCPT (Constant Processing Time) P = Period P P T P P T = Peak Processing Time VPT (Variable Processing Time) P = Period SP T SP T = Sustainable Processing Time P P T <p> The credit account of the process is also replenished, and a flag set to notify the process of a deadline miss. 2.4 Process Conformance Test The process conformance test checks if the process behaves according to its contract. It is similar to the ATM conformance test <ref> [1] </ref> for the traffic classes. For the PCPT, ACPT, and OCPT classes, our SRT system allows the system administrator to set a system-specific burst tolerance (SSBT ) due to variations caused by our scheduling overhead, the underlying general purpose operating system, and hardware.
Reference: [2] <author> Hao-hua Chu, Klara Nahrstedt. </author> <title> "A Soft Real Time Scheduling Server in UNIX Operating System", European Workshop on Interactive Distributed Multimedia Systems and Telecommunication Services, </title> <address> Darmstadt, Germany, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> The Riato system [7] also allows RT processes to specify timing constraints and continuous periodic reservations, and it provides guarantees to them. The soft real time server <ref> [2] </ref> supports periodic reservations with guarantees, it is based on the rate monotonic scheduling algorithm and the priority dispatch mechanism proposed by the URsched [8]. 6 Conclusion Our SRT system stands out among the related system by introducing various real time service classes in the processor domain.
Reference: [3] <author> Z. Deng, J.W.-S. Liu, and J. Sun. </author> <title> "Dynamic Scheduling of Hard Real-Time Applications in Open System Environment". </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <address> Washington DC, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> Hierarchical CPU Scheduler [6] partitioned the processor resource into hierarchical classes, e.g. RT or Best-Effort classes. Each class is designed a suitable scheduler to meet the class, and the classes are scheduled by the Start-time Fair Queuing algorithm. Similar concept can be found in <ref> [3] </ref> which applies it further to a hard RT system in open system environment. SMART 13 [12] allows RT processes to specify timing constraints, and it uses upcalls to notify the RT processes of constraint violations. It is still based on TS concept of proportional sharing, and offers no guarantees.
Reference: [4] <author> Bryan Ford and Sai Susarla. </author> <title> "CPU Inheritance Scheduling". </title> <booktitle> The proceedings of Second Usenix Symposium on Operating System Design and Implementation, </booktitle> <address> Seattle WA, </address> <month> October </month> <year> 1996. </year>
Reference: [5] <author> R. Gopalakrishnan. </author> <title> "Efficient Quality of Service Support Within Endsystems for High Speed Multimedia Networking". </title> <type> PhD Thesis, </type> <institution> Washington University. </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> SMART 13 [12] allows RT processes to specify timing constraints, and it uses upcalls to notify the RT processes of constraint violations. It is still based on TS concept of proportional sharing, and offers no guarantees. The real time upcall <ref> [5] </ref> contains an event handler that is registered with the kernel and it is invoked for a specified execution time periodically. The Riato system [7] also allows RT processes to specify timing constraints and continuous periodic reservations, and it provides guarantees to them.
Reference: [6] <author> Pawan Goyal, Xingang Guo, and Harrick Vin. </author> <title> "A Hierarchical CPU Scheduler for Multimedia Operating System". </title> <booktitle> The proceedings of Second Usenix Symposium on Operating System Design and Implementation, </booktitle> <address> Seattle WA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> Each RT process specifies a reserve rate used in the VC algorithm. The scheduler provides rate adaptation that gradually adjusts the reserve rate of the RT process according to its usage rate. Hierarchical CPU Scheduler <ref> [6] </ref> partitioned the processor resource into hierarchical classes, e.g. RT or Best-Effort classes. Each class is designed a suitable scheduler to meet the class, and the classes are scheduled by the Start-time Fair Queuing algorithm.
Reference: [7] <author> Michael B. Jones, Daniela Rosu, Marcel-Catalin Rosu. </author> <title> "CPU Reservation and Time Constraints: Efficient, Predictable Scheduling of Independent Activities". </title> <booktitle> Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP '97), </booktitle> <address> St. Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> It is still based on TS concept of proportional sharing, and offers no guarantees. The real time upcall [5] contains an event handler that is registered with the kernel and it is invoked for a specified execution time periodically. The Riato system <ref> [7] </ref> also allows RT processes to specify timing constraints and continuous periodic reservations, and it provides guarantees to them.
Reference: [8] <author> Jun Kamada, Masanobu Yuhara, Etsuo Ono. </author> <title> "User-level Realtime Scheduler Exploiting Kernel-level Fixed Priority Sched-uler". </title> <booktitle> Multimedia Japan, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> It is based on the simple priority dispatching technique first proposed by Kamada <ref> [8] </ref>. The priority structure is shown in Table 3. The server process must have root privilege so that it can manipulate the fixed RT priorities and it can change the priority of RT client processes. The server process runs at the highest possible global (and fixed) priority n. <p> The soft real time server [2] supports periodic reservations with guarantees, it is based on the rate monotonic scheduling algorithm and the priority dispatch mechanism proposed by the URsched <ref> [8] </ref>. 6 Conclusion Our SRT system stands out among the related system by introducing various real time service classes in the processor domain. Our system also provides unique features like exponential average and statistical adaptation strategies, probing and profiling, and overrun scheduling.
Reference: [9] <author> Chen Lee, Ragunathan Rajkumar, and Cliff Mercer. </author> <title> "Experience with Processor Reservation and Dynamic QOS in Real-Time Mach". </title> <booktitle> Multimedia Japan, </booktitle> <year> 1996. </year>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> The RT Mach [10] implements the Processor Capacity Reserves abstraction for the RT threads, it contains a reservation mechanism and provides guarantees. A recent <ref> [9] </ref> version supports adaptation in the form of dynamic quality and policies. The Adaptive Rate-Controlled Scheduler [13] is based on a modification of the virtual clock (VC) algorithm. Each RT process specifies a reserve rate used in the VC algorithm.
Reference: [10] <author> Clifford W. Mercer, Stefan Savage, and Hideyuki Tokuda. </author> <title> "Processor Capacity Reserves: Operating System Support for Multimedia Applications". </title> <booktitle> IEEE International Conference on Multimedia Computing and Systems. </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The SP T value is adjusted from the initial 40000us to 56000us when the processor usage time increases after frame 370. 5 Related Work There has been an abundance of research in the area of providing real time support in the general purpose operating systems. The RT Mach <ref> [10] </ref> implements the Processor Capacity Reserves abstraction for the RT threads, it contains a reservation mechanism and provides guarantees. A recent [9] version supports adaptation in the form of dynamic quality and policies. The Adaptive Rate-Controlled Scheduler [13] is based on a modification of the virtual clock (VC) algorithm.
Reference: [11] <author> C.L. Liu and J.W. Layland. </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment". </title> <journal> JACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: Upon receiving the request, the RT Scheduler will perform an admission control test to determine if there is enough free processor resource in the RT partition to satisfy this request. Our RT scheduler is based on the well-known preemptive earliest deadline first <ref> [11] </ref> 6 (p-EDF) algorithm with modifications to do overrun detection and protection. We assume that all RT processes in our system are preempt-able 5 . We choose p-EDF because it gives the most optimal processor utilization.
Reference: [12] <author> Jason Nieh and M.S. Lam. </author> <title> "SMART UNIX SVR4 Support for Multimedia Applications.". </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Ottawa, Canada, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: RT or Best-Effort classes. Each class is designed a suitable scheduler to meet the class, and the classes are scheduled by the Start-time Fair Queuing algorithm. Similar concept can be found in [3] which applies it further to a hard RT system in open system environment. SMART 13 <ref> [12] </ref> allows RT processes to specify timing constraints, and it uses upcalls to notify the RT processes of constraint violations. It is still based on TS concept of proportional sharing, and offers no guarantees.
Reference: [13] <author> David K.Y. Yau and Simon S. Lam. </author> <title> "Adaptive Rate-Controlled Scheduling for Multimedia Applications". </title> <booktitle> ACM Multimedia Conference, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1996. </year> <month> 14 </month>
Reference-contexts: In recent years, there has been an abundance of research in the area of providing real time support in the general purpose operating systems. In general, these research systems <ref> [2, 3, 5, 6, 7, 8, 9, 13] </ref> offer the following basic features: * Processor time reservation and guarantee For a periodic RT process to run correctly, it needs a continuous and periodic processor time. To receive the processor time, the RT process first enters a reservation with the system. <p> The RT Mach [10] implements the Processor Capacity Reserves abstraction for the RT threads, it contains a reservation mechanism and provides guarantees. A recent [9] version supports adaptation in the form of dynamic quality and policies. The Adaptive Rate-Controlled Scheduler <ref> [13] </ref> is based on a modification of the virtual clock (VC) algorithm. Each RT process specifies a reserve rate used in the VC algorithm. The scheduler provides rate adaptation that gradually adjusts the reserve rate of the RT process according to its usage rate.
References-found: 13

