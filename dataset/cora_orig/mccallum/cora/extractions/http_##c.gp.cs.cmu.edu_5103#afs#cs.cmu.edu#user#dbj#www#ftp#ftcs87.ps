URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/dbj/www/ftp/ftcs87.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/dbj/www/ft.html
Root-URL: http://www.cs.cmu.edu
Title: Sender-Based Message Logging  
Author: David B. Johnson Willy Zwaenepoel 
Address: Houston, Texas  
Affiliation: Department of Computer Science Rice University  
Abstract: Sender-based message logging is a new low-overhead mechanism for providing transparent fault-tolerance in distributed systems. It differs from conventional message logging mechanisms in that each message is logged in volatile memory on the machine from which the message is sent. Keeping the message log in the sender's local memory allows us to recover from a single failure at a time without the expense of synchronously logging each message to stable storage. The message log is then asynchronously written to stable storage, without delaying the computation, as part of the sender's periodic checkpoint. Maintaining the sender-based message log requires at most one extra network packet over non-fault-tolerant reliable message communication and imposes little additional synchronization delay. It can be applied transparently to existing distributed applications and does not require specialized hardware. It is currently being implemented on a network of SUN workstations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrew D. Birrell and Bruce Jay Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Extending this further, if processes use a remote procedure call protocol to communicate, there often is no explicit acknowledgement packet since the return from the RPC call implicitly acknowledges the call <ref> [1] </ref>.
Reference: [2] <author> Anita Borg, Jim Baumbach, and Sam Glazer. </author> <title> A message system supporting fault tolerance. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 90-99, </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1983. </year>
Reference-contexts: Also, we do not address in this paper the issues of maintaining the consistency and availability of static data such as file systems and databases [5] or the constraints of real-time applications [6, 7]. Sender-based message logging differs from other types of message logging mechanisms <ref> [2, 9, 13] </ref> in that the messages are logged in the local volatile memory on the machine from which each is sent, as illustrated in Figure 1. <p> For example, the ARGUS system [8] requires applications to be structured as a (possibly nested) set of atomic actions on abstract data types. Since sender-based message logging is a transparent mechanism, it does not impose such restrictions on the applications. The Auros distributed operating system <ref> [2] </ref> and the PUBLISHING mechanism [9] both use message logging but require specialized hardware to assist with the logging. Auros uses special networking hardware that atomically sends each message also to backup processes for the sender and the receiver.
Reference: [3] <author> David R. Cheriton. </author> <title> The V kernel: a software base for distributed systems. </title> <journal> IEEE Software, </journal> <volume> 1(2) </volume> <pages> 19-42, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: Since it does not rely on any specialized hardware to achieve fault tolerance, sender-based message logging can be added easily to existing distributed systems, as well as being designed into new systems. We are currently implementing a prototype of sender-based message logging under the V-System <ref> [4, 3] </ref> on a collection of SUN workstations connected by an Ethernet network. Although the V-System differs slightly from the distributed system model assumed in this work, we believe that this can be satisfactorily handled in the implementation.
Reference: [4] <author> David R. Cheriton and Willy Zwaenepoel. </author> <title> The distributed V kernel and its performance for diskless workstations. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 129-140, </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1983. </year>
Reference-contexts: Since it does not rely on any specialized hardware to achieve fault tolerance, sender-based message logging can be added easily to existing distributed systems, as well as being designed into new systems. We are currently implementing a prototype of sender-based message logging under the V-System <ref> [4, 3] </ref> on a collection of SUN workstations connected by an Ethernet network. Although the V-System differs slightly from the distributed system model assumed in this work, we believe that this can be satisfactorily handled in the implementation.
Reference: [5] <author> J. N. Gray. </author> <title> Notes on database operating systems. </title> <editor> In R. Bayer, R. M. Graham, and G. Seegmuller, editors, </editor> <booktitle> Operating Systems: An Advanced Course, chapter 3. F., </booktitle> <pages> pages 393-481, </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Also, we do not address in this paper the issues of maintaining the consistency and availability of static data such as file systems and databases <ref> [5] </ref> or the constraints of real-time applications [6, 7]. Sender-based message logging differs from other types of message logging mechanisms [2, 9, 13] in that the messages are logged in the local volatile memory on the machine from which each is sent, as illustrated in Figure 1.
Reference: [6] <author> H. Hecht. </author> <title> Fault-tolerant software for real-time applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 8(4) </volume> <pages> 391-407, </pages> <month> December </month> <year> 1976. </year>
Reference-contexts: Also, we do not address in this paper the issues of maintaining the consistency and availability of static data such as file systems and databases [5] or the constraints of real-time applications <ref> [6, 7] </ref>. Sender-based message logging differs from other types of message logging mechanisms [2, 9, 13] in that the messages are logged in the local volatile memory on the machine from which each is sent, as illustrated in Figure 1.
Reference: [7] <author> H. Kopetz. </author> <title> Resilient real-time systems. </title> <editor> In T. Ander-son, editor, </editor> <booktitle> Resilient Computing Systems, chapter 5, </booktitle> <pages> pages 91-101, </pages> <address> Collins, London, </address> <year> 1985. </year>
Reference-contexts: Also, we do not address in this paper the issues of maintaining the consistency and availability of static data such as file systems and databases [5] or the constraints of real-time applications <ref> [6, 7] </ref>. Sender-based message logging differs from other types of message logging mechanisms [2, 9, 13] in that the messages are logged in the local volatile memory on the machine from which each is sent, as illustrated in Figure 1.
Reference: [8] <author> Barbara Liskov and Robert Scheifler. </author> <title> Guardians and actions: linguistic support for robust, distributed programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(3) </volume> <pages> 381-404, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: For example, the ARGUS system <ref> [8] </ref> requires applications to be structured as a (possibly nested) set of atomic actions on abstract data types. Since sender-based message logging is a transparent mechanism, it does not impose such restrictions on the applications.
Reference: [9] <author> Michael L. Powell and David L. Presotto. </author> <title> PUBLISHING: a reliable broadcast communication mechanism. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 100-109, </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1983. </year>
Reference-contexts: Also, we do not address in this paper the issues of maintaining the consistency and availability of static data such as file systems and databases [5] or the constraints of real-time applications [6, 7]. Sender-based message logging differs from other types of message logging mechanisms <ref> [2, 9, 13] </ref> in that the messages are logged in the local volatile memory on the machine from which each is sent, as illustrated in Figure 1. <p> Since sender-based message logging is a transparent mechanism, it does not impose such restrictions on the applications. The Auros distributed operating system [2] and the PUBLISHING mechanism <ref> [9] </ref> both use message logging but require specialized hardware to assist with the logging. Auros uses special networking hardware that atomically sends each message also to backup processes for the sender and the receiver. PUBLISHING uses a centralized logging machine that must reliably receive every network packet.
Reference: [10] <author> Brian Randell. </author> <title> System structure for software fault tolerance. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> se-1(2):220-232, </volume> <month> June </month> <year> 1975. </year>
Reference-contexts: In either case, correct further operation of the protocol is assured. Finally, this mechanism avoids the problem of the domino effect <ref> [10, 11] </ref> since no processes other than the failed one need to be rolled back to recover from a failure. 5.4 An Optimistic Alternative This protocol is an alternative to the basic message logging protocol of Section 5.1 that allows the receiver to send new messages to other processes without waiting
Reference: [11] <author> David L. Russell. </author> <title> State restoration in systems of communicating processes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> se-6(2):183-194, </volume> <month> March </month> <year> 1980. </year>
Reference-contexts: In either case, correct further operation of the protocol is assured. Finally, this mechanism avoids the problem of the domino effect <ref> [10, 11] </ref> since no processes other than the failed one need to be rolled back to recover from a failure. 5.4 An Optimistic Alternative This protocol is an alternative to the basic message logging protocol of Section 5.1 that allows the receiver to send new messages to other processes without waiting
Reference: [12] <author> Richard D. Schlichting and Fred B. Schneider. </author> <title> Fail-stop processors: an approach to designing fault-tolerant distributed computing systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 1(3) </volume> <pages> 222-238, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: We make the following assumptions about the hardware and the applications: * The system is composed of a network of fail-stop pro cessors <ref> [12] </ref>. * Packet delivery on the network is not guaranteed, but reliable delivery can be implemented by retransmit-ting the packet a limited number of times and waiting for an acknowledgement from the destination.
Reference: [13] <author> Robert E. Strom and Shaula Yemini. </author> <title> Optimistic recovery in distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Also, we do not address in this paper the issues of maintaining the consistency and availability of static data such as file systems and databases [5] or the constraints of real-time applications [6, 7]. Sender-based message logging differs from other types of message logging mechanisms <ref> [2, 9, 13] </ref> in that the messages are logged in the local volatile memory on the machine from which each is sent, as illustrated in Figure 1. <p> The message log is then asynchronously written to stable storage as part of the sender's periodic checkpoint. This allows the stable storage logging to proceed independently of computation, much the same as in Strom and Yemini's optimistic recovery protocol <ref> [13] </ref>. The sender-based message logging protocols accomplish this volatile logging with a minimum of overhead. They require at most one extra message over non-fault-tolerant reliable message communication and impose little additional synchronization delay. <p> Strom and Yemini's optimistic recovery mechanism uses an optimistic asynchronous message logging protocol that does not delay the sender or the receiver for synchronization with stable storage logging <ref> [13] </ref>. Causal dependency tracking and process rollback are used to recreate a consistent system state after a failure. <p> We are also continuing development of the optimistic logging protocol discussed in Section 5.4. Finally, we are considering the extension of sender-based message logging with causal dependency tracking similar to that used in Strom and Yemini's optimistic recovery protocol <ref> [13] </ref> to allow for recovery from multiple concurrent failures. The presence of the volatile log in the sender should greatly reduce the occurrence of orphaned processes, thus reducing the need to roll back processes other than those that have failed.
References-found: 13

