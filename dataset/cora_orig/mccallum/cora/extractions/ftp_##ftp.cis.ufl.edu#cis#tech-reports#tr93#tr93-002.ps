URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-002.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Chakravarthy. </author> <title> Divide and Conquer: A Basis for Augmenting a Conventional Query Optimizer with Multiple Query Processing Capabilities. </title> <booktitle> In Proc. of the 7th Int'l Conf. on Data Engineering, </booktitle> <address> Kobe, Japan, </address> <pages> pages 482-490, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: First, rules are temporally persistent. That is, they have a longer life-span and as a result are likely to be evaluated many times. This suggests that several rules can be optimized simultaneously in a group, possibly using some of the techniques developed for multiple query optimization <ref> [10, 5, 20, 1] </ref>. The effect of multiple query optimization can be further enhanced by materializing intermediate results (e.g., common subexpressions) judiciously. Second, rules used for real-time applications are likely to have priorities or timing requirements associated with their execution. <p> Starburst, Sybase and InterBase do not explicitly state anything about optimization of rule evaluation. ETM provides fast access paths to events, constraints, actions and triggers. But it does not provide efficient strategies for evaluation of rules in general. HiPAC supports several such strategies <ref> [18, 17, 1] </ref>. In addition to the multiple query optimization techniques, an extended algebra for the Changes operators using delta relations and incremental operators has been developed. A chain rule transforms an expression containing the changes operator into an expression containing incremental operators. HiPAC also allows transformations specific to situations.
Reference: [2] <author> S. Chakravarthy. </author> <title> Architectures and monitoring techniques for active databases: An evaluation. </title> <type> Technical Report UF-CIS TR-92-041, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Below, we briefly describe the approaches taken for ECA rule support by earlier work in the relational database context. To keep the presentation focused, we shall not discuss the details of complex events [6, 12] or the architectural details for the relational model <ref> [2, 19] </ref>. 3 Comparison Criteria Functionally, an active database management system monitors conditions triggered by events representing database events, temporal events, or external events and if the condition evaluates to true then the action is executed.
Reference: [3] <author> S. Chakravarthy et al. HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Final Report. Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: A rule with the these components is termed an ECA or event-condition-action rule in the literature <ref> [3] </ref>. Explicit specification of these components of a rule provides maximum flexibility and expressibility although these components have been packaged in different ways in the literature as shown in Figure 1.
Reference: [4] <author> S. Chakravarthy, S. B. Navathe, S. Garg, D. Mishra, and A. Sharma. </author> <title> An evaluation of active dbms developments. </title> <type> Technical Report UF-CIS TR-90-23, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1990. </year>
Reference-contexts: A detailed discussion of active relational DBMSs and their comparison can be found in <ref> [4] </ref>. The comparison shown in the table is based on the literature cited in this paper. 1 This is not an exhaustive comparison of all systems.
Reference: [5] <author> U. S. Chakravarthy and J. Minker. </author> <title> Multiple Query Processing in Deductive Databases Using Query Graphs. </title> <booktitle> In Proceedings of International Conference of Very Large Data Bases, </booktitle> <pages> pages 384-391, </pages> <year> 1986. </year> <month> 6 </month>
Reference-contexts: First, rules are temporally persistent. That is, they have a longer life-span and as a result are likely to be evaluated many times. This suggests that several rules can be optimized simultaneously in a group, possibly using some of the techniques developed for multiple query optimization <ref> [10, 5, 20, 1] </ref>. The effect of multiple query optimization can be further enhanced by materializing intermediate results (e.g., common subexpressions) judiciously. Second, rules used for real-time applications are likely to have priorities or timing requirements associated with their execution.
Reference: [6] <author> S. Chakravathy and D. Mishra. </author> <title> An event specification language (snoop) for active databases and its detection. </title> <type> Technical Report UF-CIS TR-91-23, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Below, we briefly describe the approaches taken for ECA rule support by earlier work in the relational database context. To keep the presentation focused, we shall not discuss the details of complex events <ref> [6, 12] </ref> or the architectural details for the relational model [2, 19]. 3 Comparison Criteria Functionally, an active database management system monitors conditions triggered by events representing database events, temporal events, or external events and if the condition evaluates to true then the action is executed.
Reference: [7] <author> U. Dayal, A. Buchmann, and D. McCarthy. </author> <title> Rules are Objects Too: A Knowledge Model for an Active, Object-Oriented Database Management System. </title> <booktitle> In Proceedings 2nd International Workshop on Object-Oriented Database Systems, </booktitle> <address> Bad Muenster am Stein, Ebernburg, West Germany, </address> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: The action part is a transaction (a sequence of Transact-SQL statements, in Sybase). The condition part is encoded as part of the action. ETM (Event Trigger Mechanism, [8, 16]) also follows the same philosophy. On the other hand, POSTGRES [21], Starburst [23], and HiPAC ([3], <ref> [7] </ref>) have separate event, condition and action parts (case III in Figure 1). Case I is typically used by production rule systems (e.g., OPS5 ([11]). They just have a condition part (from which one or more events are implicitly derived) and an action part.
Reference: [8] <author> K. R. Dittrich, A. M. Kotz, and J. A. Mulle. </author> <title> An Event/Trigger Mechanism to Enforce Complex Consistency Constraints in Design Databases. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 15(3) </volume> <pages> 22-36, </pages> <month> Sep. </month> <year> 1986. </year>
Reference-contexts: The action part is a transaction (a sequence of Transact-SQL statements, in Sybase). The condition part is encoded as part of the action. ETM (Event Trigger Mechanism, <ref> [8, 16] </ref>) also follows the same philosophy. On the other hand, POSTGRES [21], Starburst [23], and HiPAC ([3], [7]) have separate event, condition and action parts (case III in Figure 1). Case I is typically used by production rule systems (e.g., OPS5 ([11]).
Reference: [9] <author> K. P. Eswaran. </author> <title> Specifications, Implementations, and Interactions of a Trigger Subsystem in an Integrated Data Base System. </title> <institution> IBM Research Report RJ1820, </institution> <month> Aug. </month> <year> 1976. </year>
Reference-contexts: Rule expressiveness: Commonly used data manipulation languages (SQL and its variations) do not support ECA rule specification. As a result ad hoc extensions have been proposed even for the specification of simple integrity constraints (e.g., domain constraints). Some of the earlier approaches <ref> [9] </ref> specifically addressed the enforcement of integrity constraints by extending the data model for specifying triggers. In contrast, active DBMSs require enhancements to the data model in at least two ways: i) for specifying events and ii) for specifying conditions and actions.
Reference: [10] <author> S. Finkelstein. </author> <title> Common Expression Analysis in Database applications. </title> <booktitle> In Proc. of ACM-SIGMOD, </booktitle> <address> Orlando, </address> <month> Jun. </month> <year> 1982. </year>
Reference-contexts: First, rules are temporally persistent. That is, they have a longer life-span and as a result are likely to be evaluated many times. This suggests that several rules can be optimized simultaneously in a group, possibly using some of the techniques developed for multiple query optimization <ref> [10, 5, 20, 1] </ref>. The effect of multiple query optimization can be further enhanced by materializing intermediate results (e.g., common subexpressions) judiciously. Second, rules used for real-time applications are likely to have priorities or timing requirements associated with their execution.
Reference: [11] <author> C. L. Forgy. </author> <title> RETE: A Fast Algorithm for the Many Pattern/Many Object Pattern Matching Problem. </title> <booktitle> Artificial Intelligence 19, </booktitle> <pages> pages 17-37, </pages> <year> 1982. </year>
Reference: [12] <author> N. H. Gehani, H. V. Jagadish, and O. Shmueli. </author> <title> Event Specification in an Object-Oriented Database. </title> <booktitle> In Proceedings International Conference on Management of Data, </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Below, we briefly describe the approaches taken for ECA rule support by earlier work in the relational database context. To keep the presentation focused, we shall not discuss the details of complex events <ref> [6, 12] </ref> or the architectural details for the relational model [2, 19]. 3 Comparison Criteria Functionally, an active database management system monitors conditions triggered by events representing database events, temporal events, or external events and if the condition evaluates to true then the action is executed.
Reference: [13] <author> Eric N. Hanson. </author> <title> An Initial Report on the Design of Ariel: a DBMS with an integrated production rule system. </title> <journal> ACM SIGMOD RECORD, </journal> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> Sep. </month> <year> 1989. </year>
Reference-contexts: The comparison shown in the table is based on the literature cited in this paper. 1 This is not an exhaustive comparison of all systems. Some commercial (e.g., VAX/Rdb, INGRES) and some research prototypes (e.g., Ariel <ref> [13] </ref>) have not been included to keep the presentation manageable. 4 All the systems shown in the table support database events; only HiPAC and ETM support external events. The need of temporal events was recognized in HiPAC and absolute and relative events were proposed.
Reference: [14] <author> M. Hsu, R. Ladin, and D. McCarthy. </author> <title> An Execution Model for Active Data Base Management Systems. </title> <booktitle> In Proceedings 3rd International Conference on Data and Knowledge Bases, </booktitle> <month> Jun. </month> <year> 1988. </year>
Reference-contexts: Starburst supports only deferred mode, while ETM, POSTGRES, Sybase and interBase support immediate coupling mode only. HiPAC supports a general execution model <ref> [14] </ref> which includes immediate, deferred and detached modes. The detached mode includes causally-dependent and causally-independent modes. In causally-dependent mode there is a commit dependency between the triggering transaction and the rules triggered by that transaction. All the allow cascaded execution of rules.
Reference: [15] <institution> InterBase Software Corporation, Bedford, </institution> <address> MA. </address> <note> InterBase DDL Reference Manual, InterBase Version 3.0, </note> <year> 1990. </year>
Reference-contexts: Explicit specification of these components of a rule provides maximum flexibility and expressibility although these components have been packaged in different ways in the literature as shown in Figure 1. In Sybase [22] and InterBase <ref> [15] </ref> a rule is composed of an event part, and an action part (case II in Figure 1). The action part is a transaction (a sequence of Transact-SQL statements, in Sybase). The condition part is encoded as part of the action.
Reference: [16] <author> A. Kotz, K. Dittrich, and J. Mulle. </author> <title> Supporting Semantic Rules by a Generalized Event/Trigger Mechanism. </title> <booktitle> In Proceedings International Conference on Extending Database Technology, </booktitle> <address> Venice, </address> <month> March </month> <year> 1988. </year>
Reference-contexts: The action part is a transaction (a sequence of Transact-SQL statements, in Sybase). The condition part is encoded as part of the action. ETM (Event Trigger Mechanism, <ref> [8, 16] </ref>) also follows the same philosophy. On the other hand, POSTGRES [21], Starburst [23], and HiPAC ([3], [7]) have separate event, condition and action parts (case III in Figure 1). Case I is typically used by production rule systems (e.g., OPS5 ([11]).
Reference: [17] <author> A. Rosenthal and U. Chakravarthy. </author> <title> Anatomy of a Modular Multiple Query Optimizer. </title> <booktitle> In Proceedings 14th International Conference on Very Large Data Bases, </booktitle> <pages> pages 230-239, </pages> <address> Los Angeles, CA, </address> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: Starburst, Sybase and InterBase do not explicitly state anything about optimization of rule evaluation. ETM provides fast access paths to events, constraints, actions and triggers. But it does not provide efficient strategies for evaluation of rules in general. HiPAC supports several such strategies <ref> [18, 17, 1] </ref>. In addition to the multiple query optimization techniques, an extended algebra for the Changes operators using delta relations and incremental operators has been developed. A chain rule transforms an expression containing the changes operator into an expression containing incremental operators. HiPAC also allows transformations specific to situations.
Reference: [18] <author> A. Rosenthal, U. S. Chakravarthy, B. Blaustein, and J. Blakeley. </author> <title> Situation Monitoring in Active Databases. </title> <booktitle> In Proc. of the 15th Int'l Conf. on Very Large Databases, </booktitle> <pages> pages 455-464, </pages> <address> Amsterdam, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Starburst, Sybase and InterBase do not explicitly state anything about optimization of rule evaluation. ETM provides fast access paths to events, constraints, actions and triggers. But it does not provide efficient strategies for evaluation of rules in general. HiPAC supports several such strategies <ref> [18, 17, 1] </ref>. In addition to the multiple query optimization techniques, an extended algebra for the Changes operators using delta relations and incremental operators has been developed. A chain rule transforms an expression containing the changes operator into an expression containing incremental operators. HiPAC also allows transformations specific to situations.
Reference: [19] <author> U. Schreier et al. Alert: </author> <title> An architecture for transforming a passive dbms into an active dbms. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 469-478, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Below, we briefly describe the approaches taken for ECA rule support by earlier work in the relational database context. To keep the presentation focused, we shall not discuss the details of complex events [6, 12] or the architectural details for the relational model <ref> [2, 19] </ref>. 3 Comparison Criteria Functionally, an active database management system monitors conditions triggered by events representing database events, temporal events, or external events and if the condition evaluates to true then the action is executed.
Reference: [20] <author> T. Sellis. </author> <title> Global Query Optimization. </title> <booktitle> In Proceedings of SIGMOD, </booktitle> <pages> pages 191-205, </pages> <year> 1986. </year>
Reference-contexts: First, rules are temporally persistent. That is, they have a longer life-span and as a result are likely to be evaluated many times. This suggests that several rules can be optimized simultaneously in a group, possibly using some of the techniques developed for multiple query optimization <ref> [10, 5, 20, 1] </ref>. The effect of multiple query optimization can be further enhanced by materializing intermediate results (e.g., common subexpressions) judiciously. Second, rules used for real-time applications are likely to have priorities or timing requirements associated with their execution.
Reference: [21] <author> M. Stonebraker, M. Hanson, and S. Potamianos. </author> <title> The POSTGRES rule manager. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(7) </volume> <pages> 897-907, </pages> <month> Jul. </month> <year> 1988. </year>
Reference-contexts: The action part is a transaction (a sequence of Transact-SQL statements, in Sybase). The condition part is encoded as part of the action. ETM (Event Trigger Mechanism, [8, 16]) also follows the same philosophy. On the other hand, POSTGRES <ref> [21] </ref>, Starburst [23], and HiPAC ([3], [7]) have separate event, condition and action parts (case III in Figure 1). Case I is typically used by production rule systems (e.g., OPS5 ([11]). They just have a condition part (from which one or more events are implicitly derived) and an action part.
Reference: [22] <institution> Sybase, Inc., Sybase, Inc. Berkeley, </institution> <address> CA 94710. </address> <note> Transact-SQL User's Guide, Release 4.2, </note> <month> May </month> <year> 1990. </year>
Reference-contexts: A rule with the these components is termed an ECA or event-condition-action rule in the literature [3]. Explicit specification of these components of a rule provides maximum flexibility and expressibility although these components have been packaged in different ways in the literature as shown in Figure 1. In Sybase <ref> [22] </ref> and InterBase [15] a rule is composed of an event part, and an action part (case II in Figure 1). The action part is a transaction (a sequence of Transact-SQL statements, in Sybase). The condition part is encoded as part of the action.
Reference: [23] <author> J. Widom and S. Finkelstein. </author> <title> Set-Oriented Production Rules in Relational Database Systems. </title> <booktitle> In Proc. of ACM-SIGMOD, </booktitle> <pages> pages 259-270, </pages> <month> May </month> <year> 1990. </year> <month> 7 </month>
Reference-contexts: The action part is a transaction (a sequence of Transact-SQL statements, in Sybase). The condition part is encoded as part of the action. ETM (Event Trigger Mechanism, [8, 16]) also follows the same philosophy. On the other hand, POSTGRES [21], Starburst <ref> [23] </ref>, and HiPAC ([3], [7]) have separate event, condition and action parts (case III in Figure 1). Case I is typically used by production rule systems (e.g., OPS5 ([11]). They just have a condition part (from which one or more events are implicitly derived) and an action part.
References-found: 23

