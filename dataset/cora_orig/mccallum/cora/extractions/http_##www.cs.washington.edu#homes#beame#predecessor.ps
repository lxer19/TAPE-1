URL: http://www.cs.washington.edu/homes/beame/predecessor.ps
Refering-URL: http://www.cs.washington.edu/homes/beame/papers.html
Root-URL: http://www.cs.washington.edu
Email: beame@cs.washington.edu  fich@cs.utoronto.ca  
Title: Optimal Bounds for the Predecessor Problem  
Author: Paul Beame Faith E. Fich 
Address: Seattle, WA, USA 98195-2350  Toronto, Ontario, Canada M5S 1A4  
Affiliation: Computer Science and Engineering University of Washington  Department of Computer Science University of Toronto  
Abstract: We obtain matching upper and lower bounds for the amount of time to find the predecessor of a given element among the elements of a fixed efficiently stored set. Our algorithms are for the unit-cost word-level RAM with multiplication and extend to give optimal dynamic algorithms. The lower bounds are proved in a much stronger communication game model, but they apply to the cell probe and RAM models and to both static and dynamic predecessor problems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, M. Fredman, and J. Komlos. </author> <title> Hash functions for priority queues. </title> <journal> Information and Control, </journal> <volume> 63:217225, </volume> <year> 1984. </year>
Reference-contexts: The distributions get simpler as the rounds of the communication proceed. If Z is a probability distribution on a set Z and B Z, we define Z (B) = Pr Z [B]. Let U (N; n) be the distribution which chooses a set S <ref> [1; N] </ref> of size n uniformly at random. The following is the base case of our lower bound. Lemma 8: Let N n &gt; 0, a &gt; 0, and b e an . Consider any set of positions A [1; N], with jAj aN + 1, and any collection of subsets <p> U (N; n) be the distribution which chooses a set S <ref> [1; N] </ref> of size n uniformly at random. The following is the base case of our lower bound. Lemma 8: Let N n &gt; 0, a &gt; 0, and b e an . Consider any set of positions A [1; N], with jAj aN + 1, and any collection of subsets B Z (N; n), with U (N;n) (B) b. Then there exist integers a; a 0 2 A and a set S 2 B such that pred (a; S) 6= pred (a 0 ; S). <p> Proof Observe that the only way that pred (a; S) is the same for all a 2 A is if there is no element j 2 S with min (A) j &lt; max (A). Since this region contains at least an elements of <ref> [1; N] </ref>, this probability is at most (1 a) n &lt; e an b since a &gt; 0. <p> A leaf below v is marked if it is the rightmost descendant of the j-th child of v for some j 2 S v . Lemma 9: Suppose (b; k;t; N; n) satisfies the integrality condition and b 3. Let A <ref> [1; N i ] </ref> with jAj aN i , and B Z (N i ; n i ) with Z i (B) b = 2 b1 . <p> Suppose there is a t i round cell-probe communication protocol, using m n k memory cells of b bits, that correctly computes pred ( j; S) for all j 2 A and S 2 B. Then there exist A 0 <ref> [1; N i+1 ] </ref> with jA 0 j aN i+1 , B 0 Z (N i+1 ; n i+1 ) with Z i+1 (B 0 ) b and a t i 1 round cell-probe communication protocol, using m cells of b bits, that correctly computes pred ( j 0 ; S <p> For v 2 V and S chosen from Z fl i , let p v (S) denote the subset of <ref> [1; N i+1 ] </ref> indicating which children of v have marked descendants. In other words, k 2 p v (S) if and only if the k'th child of v has a marked descendant. Let B v = fp v (S) j S 2 B is consistent with W g. <p> Choose that node v. Fixing a round of communication for each player Since v is a-dense, there is some message c that the Querier may send in the first round such that jA 0 j=N i+1 a, where A 0 = f j 0 2 <ref> [1; N i+1 ] </ref> j the j 0 -th child of v is coloured cg; i.e., there is some input j corresponding to a descendant of the j 0 -th child of v on which the Querier sends message c in the first round. <p> As noted above, N t N=( f u t ). Therefore (b; k 0 ;t; N; n 0 ) satisfies the integrality condition and the algorithm works correctly for all inputs j 2 A = <ref> [1; N] </ref> and S 2 B = Z (N; n 0 ). <p> Since b 2, Lemma 9 can be applied t times to obtain A 0 <ref> [1; N t ] </ref> with jA 0 j aN t , B 0 Z (N t ; n 0 t ) with Z t (B 0 ) b = 2 b1 , and a 0 round cell-probe communication protocol such that the protocol correctly computes pred ( j; S) for all <p> One then obtains: Theorem 12: There is no cell-probe data structure for the dynamic predecessor problem on <ref> [1; N] </ref> for sets of size at most n using (log N) O (1) bits per memory cell, n O (1) worst-case time for insertions, and o ( p log n= log log n) worst-case query time. <p> Theorem 13: Any cell-probe data structure using 2 O (b) memory cells of b = 2 (logN) 1W (1) bits to solve the dynamic predecessor problem on <ref> [1; N] </ref> using 2 (logN) 1W (1) amortized time per update, requires W (log log N= log log log N) worst-case time for queries. Acknowledgements We are grateful to Peter Bro Miltersen and Mikkel Thorup for helpful discussions.
Reference: [2] <author> Miklos Ajtai. </author> <title> A lower bound for finding predecessors in Yao's cell probe model. </title> <journal> Combinatorica, </journal> <volume> 8:235247, </volume> <year> 1988. </year>
Reference-contexts: A node is a good candidate for v if there is some fixed communication c by the Querier such that many of its children (at least an a fraction) have descendants corresponding to inputs consistent with communication c. By a lemma of Ajtai <ref> [2] </ref>, we show that, no matter how the communication of the Querier is determined, there is a level with many nodes that are good candidates for v. <p> Then Pr [jH " Sj rs=4] ( 2=e 3=4 ) rs &lt; 2 rs=2 : The next result is a small modification and rephrasing of a combinatorial lemma that formed the basis of Ajtai's lower bound argument in <ref> [2] </ref>. Suppose we have a tree T of depth d such that all nodes on the same level have the same number of children. <p> A non-leaf node v is d-dense (where 0 d 1) if there is a colour c such that at least a fraction d of v's children have colour c. Lemma 11: (Ajtai <ref> [2] </ref>) Let T be a tree of depth d 2 such that all nodes on the same level of T have the same number of children. Suppose that at least a fraction a of all the leaves in T are coloured (each with one of m colours).
Reference: [3] <author> A. Andersson. </author> <title> Sublogarithmic seaching without multiplications. </title> <booktitle> In 36th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 655665, </pages> <address> Milwaukee, WI, </address> <year> 1995. </year>
Reference: [4] <author> A. Andersson. </author> <title> Faster deterministic sorting and seaching in linear space. </title> <booktitle> In 37th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 135141, </pages> <address> Burlington, VT, </address> <year> 1996. </year>
Reference: [5] <author> A. Andersson, P. B. Miltersen, S. Riis, and M. </author> <title> Thorup. Static dictionaries on AC 0 RAMs: query time Q( p log n= log log n) is necessary and sufficient. </title> <booktitle> In 37th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 441450, </pages> <address> Burling-ton, VT, </address> <month> October </month> <year> 1996. </year> <note> IEEE. </note>
Reference: [6] <author> A. Andersson and M. </author> <title> Thorup. Exponential search trees for faster deterministic searching, sorting and priority queues in linear space. </title> <type> Manuscript. </type>
Reference: [7] <author> A. Brodnik, P.B. Miltersen, and I. Munro. </author> <title> Trans-dichotomous algorithms without multiplicationssome upper and lower bounds. </title> <booktitle> In Proceedings of the 5th Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS volume 1272, </volume> <pages> pages 426439, </pages> <address> Halifax, NS, Canada, 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference: [8] <author> J. L. Carter and M. N. Wegman. </author> <title> Universal classes of hash functions. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18:143 154, </volume> <year> 1979. </year>
Reference: [9] <author> A. Chakrabarti, B. Chazelle, B. Gum, and A. Lvov. </author> <title> A good neighbor is hard to find. </title> <booktitle> In Proceedings of the Thirty First Annual ACM Symposium on Theory of Computing, </booktitle> <address> Atlanta, GA, </address> <month> May </month> <year> 1999. </year>
Reference: [10] <author> V. Chvatal. </author> <title> Probabilistic methods in graph theory. </title> <journal> Annals of Operations Research, </journal> <volume> 1:171182, </volume> <year> 1984. </year>
Reference-contexts: It is not hard to see that we can remap the answers in a simple deterministic way using this reduction. We now follow through on this sketch, after stating a couple of preliminaries. Preliminaries The following form of the Chernoff-Hoeffding bound follows easily from the presentation in <ref> [10] </ref>. Proposition 10: Fix H U with jHj rjU j and let S U with jSj = s be chosen uniformly at random.
Reference: [11] <author> M. Dietzfelbinger. </author> <title> Universal hashing and k-wise independent random variables via integer arithmetic without primes. </title> <booktitle> In Proceedings of the 13th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <volume> LNCS volume 1046, </volume> <pages> pages 569580, </pages> <address> Grenoble, France, </address> <month> February </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference: [12] <author> M. Dietzfelbinger, J. Gil, Y. Matias, and N. Pippenger. </author> <title> Polynomial hash functions are reliable. </title> <booktitle> In Automata, Languages, and Programming: 19th International Colloquium, </booktitle> <volume> LNCS volume 623, </volume> <pages> pages 235246. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1992. </year>
Reference: [13] <author> M. Dietzfelbinger, A. Karlin, K. Mehlhorn, F. Meyer auf der Heide, H. Rohnert, and R Tarjan. </author> <title> Dynamic pertect hashing: Upper and lower bounds. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(4):738761, </volume> <year> 1994. </year>
Reference: [14] <editor> M. Dietzfelbinger and F. Meyer auf der Heide. </editor> <title> A new universal class of hash functions and dynamic hashing in real time. </title> <booktitle> In Automata, Languages, and Programming: 17th International Colloquium, </booktitle> <volume> LNCS volume 443, </volume> <pages> pages 617, </pages> <institution> Warwick University, </institution> <address> England, July 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference: [15] <author> F. Fich and P. B. Miltersen. </author> <title> Tables should be sorted (on random access machines). </title> <booktitle> In Proceedings of the 4th Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS volume 995, </volume> <pages> pages 163174. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [16] <author> M. Fredman, J. Komlos, and E. Szemeredi. </author> <title> Storing a sparse table with O(1) worst case access time. </title> <journal> Journal of the ACM, </journal> <volume> 31:538544, </volume> <year> 1984. </year>
Reference: [17] <author> M. Fredman and M. Saks. </author> <title> The cell probe complexity of dynamic data structures. </title> <booktitle> In Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 345 354, </pages> <address> Seattle, WA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: The basic idea of Miltersen's translation is to observe that dynamic algorithms that have small cost per query and do not run for very long can access only a small number of memory cells from a moderate size set of potential memory cells. Using static dictionary techniques from <ref> [17] </ref>, one can obtain an efficient solution to the static problem by beginning with the empty set and inserting elements one by one, recording the changes made to the memory in the dictionary.
Reference: [18] <author> M. Fredman and D. Willard. </author> <title> Surpassing the information theoretic bound with fusion trees. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 47(3):424436, </volume> <year> 1993. </year>
Reference: [19] <author> Mauricio Karchmer and Avi Wigderson. </author> <title> Monotone circuits for connectivity require super-logarithmic depth. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 539550, </pages> <address> Chicago, IL, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: The technical condition that the sequence of locations and their values determine the answer is equivalent to the condition that the bits communicated alone determine the answer. The lower bound, in the style of <ref> [19] </ref>, works `top down', maintaining, for each player, a relatively large set of inputs on which the communication is fixed. Unlike [19], we ac tually have non-uniform distributions on the Responder's inputs, so our notion of `large' is with respect to these distributions. <p> The lower bound, in the style of <ref> [19] </ref>, works `top down', maintaining, for each player, a relatively large set of inputs on which the communication is fixed. Unlike [19], we ac tually have non-uniform distributions on the Responder's inputs, so our notion of `large' is with respect to these distributions. The distributions get simpler as the rounds of the communication proceed.
Reference: [20] <author> P. B. Miltersen. </author> <title> The bit probe complexity measure revisited. </title> <booktitle> In Proceedings of the 10th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <volume> LNCS volume 665, </volume> <pages> pages 662 671, </pages> <address> Wurzburg, Germany, </address> <month> February </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference: [21] <author> P. B. Miltersen. </author> <title> Lower bounds for Union-Split-Find related problems on random access machines. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 625634, </pages> <address> Montreal, Quebec, Canada, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: introduction, Miltersen <ref> [21] </ref> observed that one can phrase a static data structure algorithm in the cell-probe model in terms of a communication protocol between between two players: the Querier, who holds the input to a query, and the Responder, who holds the data structure. <p> This is a contradiction. One can translate the arguments of this section to the dynamic case, using a translation argument given by Miltersen <ref> [21] </ref>. This requires work since the bound applies even without the polynomial restriction on the size of the data structure.
Reference: [22] <author> P. B. Miltersen, N. Nisan, S. Safra, and A. Wigderson. </author> <title> On data structures and asymmetric communication complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 57(1):3749, </volume> <year> 1998. </year>
Reference: [23] <author> R. Raman. </author> <title> Priority queues: Small, monotone, </title> <booktitle> and trans-dichotomous. In Proceedings of the 4th European Symposium on Algorithms, </booktitle> <volume> LNCS volume 1136, </volume> <pages> pages 121137. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [24] <author> P. Van Emde Boas. </author> <title> Preserving order in a forest in less than logarithmic time and linear space. </title> <journal> Information Processing Letters, </journal> <volume> 6:8082, </volume> <year> 1977. </year>
Reference: [25] <author> P. Van Emde Boas, R Kaas, and E. Zijlstra. </author> <title> Design and implementation of an efficient priority queue. </title> <journal> Mathematical Systems Theory, </journal> <volume> 10:99127, </volume> <year> 1977. </year>
Reference: [26] <author> D. E. Willard. </author> <title> Log-logarithmic worst case range queries are possible in space Q(n). </title> <journal> Information Processing Letters, </journal> <volume> 17:8184, </volume> <year> 1983. </year>
Reference: [27] <author> Bing Xiao. </author> <title> New bounds in cell probe model. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> San Diego, </address> <year> 1992. </year>
Reference: [28] <author> A. C. Yao. </author> <title> Some complexity questions related to distributive computing. </title> <booktitle> In Conference Record of the Eleventh Annual ACM Symposium on Theory of Computing, pages 209213, </booktitle> <address> Atlanta, GA, </address> <month> April-May </month> <year> 1979. </year>
Reference: [29] <author> A. C. Yao. </author> <title> Should tables be sorted? Journal of the ACM, </title> <address> 28:615628, </address> <month> July </month> <year> 1981. </year>
References-found: 29

