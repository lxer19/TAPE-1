URL: http://www.cs.mu.oz.au/tr_db/mu_97_17.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Email: clow@cs.mu.oz.au  
Title: Using the IDaF (Interaction Diagrams And Fragmentations) Tool Suite  
Author: Chi Keen Low 
Date: August 1997  
Address: Melbourne, Victoria, Australia  
Affiliation: Department of Computer Science University of Melbourne  
Abstract: Interaction diagrams are used in multi-agent systems to describe computation threads of agents and communication between agents. The IDaF (Interaction Diagrams And Fragmentations) is a tool suite based on the formalism of interaction diagrams and fragmentations. The tool suite consists of ValidatoR, FormatteR, TranslatoR, GrapheR and TesteR. This paper describes the usage of the tool suite. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adobe Systems Incorporated, </author> <title> Postscript Language Reference Manual. </title> <address> Reading, MA, USA: </address> <publisher> Addison-Wesley, </publisher> <editor> second ed., </editor> <year> 1990. </year>
Reference-contexts: It can be extended to produce output in any format easily by defining several primitive drawing constructs. The algorithm for drawing the interaction diagram need not be changed when implementing it in a different drawing format. Currently, the GrapheR supports L A T E X [4], postscript <ref> [1] </ref> and xfig format.
Reference: [2] <author> J. M. Corchado, B. Lees, and N. Rees, </author> <title> "A multi-agent system 'test bed' for evaluating autonomous agents," </title> <booktitle> in Proceedings of the 1st International Conference on Autonomous Agents, </booktitle> <address> (Los Angeles, CA, USA), </address> <pages> pp. 386-393, </pages> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Multi-agent systems [5, 7] consist of agents interacting to achieve certain goals. It is useful to vi-sualise the system for analysis, documentation and testing <ref> [2] </ref>. The theory of interaction diagrams proposed by Ronnquist and Low [6] provides an effective way of visualising computation and communication between agents in a multi-agent system. Interaction diagrams present the overview of the system graphically, so that the overall system can easily be understood.
Reference: [3] <author> D. P. Helmbold and C. E. McDowell, </author> <title> "A taxonomy of race conditions," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 33, </volume> <pages> pp. 159-164, </pages> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: However, in specifications and implementation, it is generally accepted that all agents communicate with each other. To detect an agent that does not have any communication, the TesteR searches for an agent without any snd or rcv fragments. 7.3 Race condition A race condition <ref> [3] </ref> is defined as the condition when multiple entities are trying to perform the same action on one entity. The other entities are racing to achieve their own goals but may potentially cause conflicts. The order of receiving messages may affect the proper computation process of an agent.
Reference: [4] <author> L. Lamport, </author> <title> L A T E X: A Document Preparation System. </title> <publisher> Addison-Wesley, </publisher> <editor> second ed., </editor> <year> 1994. </year>
Reference-contexts: It can be extended to produce output in any format easily by defining several primitive drawing constructs. The algorithm for drawing the interaction diagram need not be changed when implementing it in a different drawing format. Currently, the GrapheR supports L A T E X <ref> [4] </ref>, postscript [1] and xfig format.
Reference: [5] <author> A. S. Rao and M. P. Georgeff, </author> <title> "BDI agents: From theory to practice," </title> <booktitle> in Proceedings of the 1st International Conference on Multi-Agent Systems (ICMAS-95), </booktitle> <address> (San Francisco, CA, USA), </address> <pages> pp. 312-319, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Multi-agent systems <ref> [5, 7] </ref> consist of agents interacting to achieve certain goals. It is useful to vi-sualise the system for analysis, documentation and testing [2]. The theory of interaction diagrams proposed by Ronnquist and Low [6] provides an effective way of visualising computation and communication between agents in a multi-agent system.
Reference: [6] <author> R. Ronnquist and C. K. </author> <title> Low, "Formalisation of interaction diagrams," </title> <booktitle> in Proceedings of the 3rd Asia-Pacific Software Engineering Conference, </booktitle> <volume> vol. </volume> <pages> 1, </pages> <address> (Seoul, Korea), </address> <pages> pp. 318-327, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1996. </year> <month> 14 </month>
Reference-contexts: 1 Introduction Multi-agent systems [5, 7] consist of agents interacting to achieve certain goals. It is useful to vi-sualise the system for analysis, documentation and testing [2]. The theory of interaction diagrams proposed by Ronnquist and Low <ref> [6] </ref> provides an effective way of visualising computation and communication between agents in a multi-agent system. Interaction diagrams present the overview of the system graphically, so that the overall system can easily be understood. We can immediately see the agents in the system and how they communicate with each other. <p> In the final section, we conclude this paper. 1 2 Interaction Diagrams, Fragmentations and Notation This section briefly describes interaction diagrams, fragmentations and notations used by the tools. For more information on the theoretical background of these concepts, readers should refer to Ronnquist and Low <ref> [6] </ref>. An interaction diagram is a graphical representation of the computation threads and communications in a multi-agent system. It uses vertical lines to denote the computation flow of agents and horizontal or oblique arrows to denote messages between agents. A sample interaction diagram is shown in Figure 1. <p> : : ; f b n ; [completejsplitsjjoinsjendsjpartial]+ As another example, the message flow fragmentation for Figure 1 is as follows. &lt; beg (A), beg (B), beg (C), snd (C,m3), rcv (B,m3), snd (B,m4), rcv (A,m4), Computation flow fragmentation and message flow fragmentation have been shown to be image equivalent <ref> [6] </ref>. Image equivalent means the interaction diagrams of different fragmentations are exactly the same. Two fragmentations can represent the same interaction diagram only if the each agent preserves the order of its fragments. <p> A design consisting of interaction diagrams can use the TranslatoR to assist in generating code stubs that are computation steps for each agent. The translation to computation flow fragmentation uses the image equivalences described by Ronnquist and Low <ref> [6] </ref> which state that two adjacent fragments may interchange positions as long as they do not concern the same agent. By repeatedly interchanging positions so that for each agent, all its fragments are grouped together, the fragmentation is rearranged to computation flow fragmentation. <p> A graphical representation is an effective method to convey the overall picture of a system. The algebraic counterpart of the graphical representation is a fragmentation. Based on the theory of interaction diagrams proposed by Ronnquist and Low <ref> [6] </ref>, IDaF has been developed to manipulate interaction diagrams and fragmentations. Most automatic analysis is done in the form of fragmentations. We have produced the Val-idatoR to validate a fragmentation before it is used in the other tools.
Reference: [7] <author> M. Wooldridge and N. R. Jennings, </author> <title> "Intelligent agents: </title> <journal> Theory and practice," The Knowledge Engineering Review, </journal> <volume> vol. 10, </volume> <pages> pp. 115-152, </pages> <month> June </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: 1 Introduction Multi-agent systems <ref> [5, 7] </ref> consist of agents interacting to achieve certain goals. It is useful to vi-sualise the system for analysis, documentation and testing [2]. The theory of interaction diagrams proposed by Ronnquist and Low [6] provides an effective way of visualising computation and communication between agents in a multi-agent system.
References-found: 7

