URL: http://www.bell-labs.com/~yash/sc-ejor.ps.Z
Refering-URL: http://www.bell-labs.com/~yash/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Computational Experience with Approximation Algorithms for the Set Covering Problem  
Author: Tal Grossman Avishai Wool 
Keyword: set covering, optimization, neural networks, approximation algorithms.  
Address: CNLS, MS B-213, Los Alamos  Los Alamos NM 87545, USA.  Rehovot 76100, Israel.  
Affiliation: Division and  National Lab,  Department of Applied Mathematics and Computer Science, The Weizmann Institute,  
Note: Deceased. Work done while with the Theoretical  
Email: E-mail: yash@wisdom.weizmann.ac.il.  
Date: April 18, 1996  
Abstract: The Set Covering problem (SCP) is a well known combinatorial optimization problem, which is NP-hard. We conducted a comparative study of nine different approximation algorithms for the SCP, including several greedy variants, fractional relaxations, randomized algorithms and a neural network algorithm. The algorithms were tested on a set of random-generated problems with up to 500 rows and 5000 columns, and on two sets of problems originating in combinatorial questions with up to 28160 rows and 11264 columns. On the random problems and on one set of combinatorial problems, the best algorithm among those we tested was a randomized greedy algorithm, with the neural network algorithm very close in second place. On the other set of combinatorial problems, the best algorithm was a deterministic greedy variant, and the randomized algorithms (both randomized greedy and neural network) performed quite poorly. The other algorithms we tested were always inferior to the ones mentioned above. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximating problems. </title> <booktitle> In Proc. 33rd IEEE Symp. Found. of Comp. Science, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: Therefore the SCP problem is sometimes referred to as the unicost SCP. The SCP is known to be NP-hard, cf. [13]. This also is a MAX-SNP-hard problem [23, 12], i.e., does not have a polynomial time approximation scheme unless P=NP <ref> [1] </ref>. The unicost version of the covering problem can be presented as the following combinatorial problem. Consider a set of objects (points, or vertices) V and a collection E of sets of these objects. <p> Some of the algorithms use the solution vector of the relaxed fractional set covering, denoted by x fl , and its cost C fl . The fractional covering is obtained by replacing the integrality requirement on the variables and instead allowing them to take real values in the range <ref> [0; 1] </ref>, thereby transforming the problem to a linear program. Therefore a linear programming (LP) step was performed prior to running the algorithms. Brief descriptions of the algorithms follow. NoLP This is a generalization of Gavril's algorithm [14].
Reference: [2] <author> E. Balas and A. Ho. </author> <title> Set covering algorithms using cutting planes, heuristics, and subgradient optimization: a computational study. </title> <journal> Math. Programming, </journal> <volume> 12 </volume> <pages> 37-60, </pages> <year> 1980. </year>
Reference-contexts: A randomized rounding algorithm for SCP appears in [25]. The approximation ratio of this algorithm is k m for some small constant c. A number of optimal algorithms for SCP, typically based upon tree-search procedures, have appeared in the literature (e.g., <ref> [2, 3] </ref>). These algorithms have been used to solve problems with up to 50 rows and 500 columns, albeit at considerable computational cost. The Lagrangian approximation heuristic for SCP of [4] was tested on problems with up to 500 rows and 5000 columns. <p> The variable to be discarded is the one with the maximal mr j value. 3 Methods 3.1 Random Generated Problems The algorithms were tested on 60 randomly generated problems, (see Table 1 for details), which are available electronically [5]. Problem sets 4-6 are from <ref> [2] </ref>, problem sets A-E are from [3], and problem sets NRE-NRF are from [4]. All the problems were randomly produced according to the specified densities, using the scheme of [2], namely every column covers at least one row and every row is covered by at least two columns. <p> Problem sets 4-6 are from <ref> [2] </ref>, problem sets A-E are from [3], and problem sets NRE-NRF are from [4]. All the problems were randomly produced according to the specified densities, using the scheme of [2], namely every column covers at least one row and every row is covered by at least two columns. All these problems were originally generated to test weighted SCP algorithms. In order to use them for our unicost SCP algorithms, we discarded the column costs.
Reference: [3] <author> J. E. Beasley. </author> <title> An algorithm for set covering problem. Euro. </title> <journal> J. Operational Research, </journal> <volume> 31 </volume> <pages> 85-93, </pages> <year> 1987. </year>
Reference-contexts: A randomized rounding algorithm for SCP appears in [25]. The approximation ratio of this algorithm is k m for some small constant c. A number of optimal algorithms for SCP, typically based upon tree-search procedures, have appeared in the literature (e.g., <ref> [2, 3] </ref>). These algorithms have been used to solve problems with up to 50 rows and 500 columns, albeit at considerable computational cost. The Lagrangian approximation heuristic for SCP of [4] was tested on problems with up to 500 rows and 5000 columns. <p> Problem sets 4-6 are from [2], problem sets A-E are from <ref> [3] </ref>, and problem sets NRE-NRF are from [4]. All the problems were randomly produced according to the specified densities, using the scheme of [2], namely every column covers at least one row and every row is covered by at least two columns. <p> The other algorithms did significantly worse. Note that on all the problems in set E, the R-Gr, NN and Alt-Gr algorithms found the best cost. The found cost, 5, is known to be optimal for all the problems in this set <ref> [3] </ref>. As these problems were generated randomly, one could assume that the results obtained would fit the predictions of [29]. Denote the optimal cost of a random SCP with m rows by C m .
Reference: [4] <author> J. E. Beasley. </author> <title> A lagrangian heuristic for set covering problems. </title> <journal> Naval Research Logistics, </journal> <volume> 37 </volume> <pages> 151-164, </pages> <year> 1990. </year>
Reference-contexts: A number of optimal algorithms for SCP, typically based upon tree-search procedures, have appeared in the literature (e.g., [2, 3]). These algorithms have been used to solve problems with up to 50 rows and 500 columns, albeit at considerable computational cost. The Lagrangian approximation heuristic for SCP of <ref> [4] </ref> was tested on problems with up to 500 rows and 5000 columns. The approximation algorithm of [30] was tested on problems generated for airline crew scheduling, involving up to 1600 rows and 105000 columns. Genetic algorithms and simulated annealing algorithms for set covering appear in [27, 6]. <p> Problem sets 4-6 are from [2], problem sets A-E are from [3], and problem sets NRE-NRF are from <ref> [4] </ref>. All the problems were randomly produced according to the specified densities, using the scheme of [2], namely every column covers at least one row and every row is covered by at least two columns. All these problems were originally generated to test weighted SCP algorithms.
Reference: [5] <author> J. E. Beasley. OR-library: </author> <title> Distributing test problems by electronic mail. </title> <journal> J. Oper. Res. Soc., </journal> <volume> 41(11) </volume> <pages> 1069-1072, </pages> <year> 1990. </year> <note> See also in WWW site http://mscmga.ms.ic.ac.uk/info.html. </note>
Reference-contexts: The variable to be discarded is the one with the maximal mr j value. 3 Methods 3.1 Random Generated Problems The algorithms were tested on 60 randomly generated problems, (see Table 1 for details), which are available electronically <ref> [5] </ref>. Problem sets 4-6 are from [2], problem sets A-E are from [3], and problem sets NRE-NRF are from [4]. <p> We used problems generated with r = 4 and d = 10; 11; 12; 13. We have contributed the CYC and CLR problem sets to the OR-library, thus they are now available electronically <ref> [5] </ref>. 3.3 The Tests The algorithms were programmed in C, using the IBM AIX XL C compiler, with optimization turned on. The tests were conducted on an IBM RS6000 model 370 workstation with 128MB memory. The linear programming solver used was R. J. Vanderbei's interior-point solver LOQO [28].
Reference: [6] <author> J. E. Beasley and P. C. Chu. </author> <title> A genetic algorithm for the set covering problem, </title> <note> 1995. To appear in Euro. J. Operational Research. </note>
Reference-contexts: The approximation algorithm of [30] was tested on problems generated for airline crew scheduling, involving up to 1600 rows and 105000 columns. Genetic algorithms and simulated annealing algorithms for set covering appear in <ref> [27, 6] </ref>. Several neural network based algorithms were suggested or developed for problems related to SCP (like scheduling and diagnostic problems, cf. [26, 20, 9]), but to our knowledge no neural network based algorithm for the SCP was actually presented and tested so far.
Reference: [7] <author> P. Brass, H. Harborth, and H. Nienborg. </author> <title> On the maximum number of edges in a C 4 -free subgraph of Q n . J. </title> <journal> Graph Theory, </journal> <volume> 19(1) </volume> <pages> 17-23, </pages> <year> 1995. </year>
Reference-contexts: The optimal solution for this problem is known for all d 6. For larger d it is an open question. For the currently best explicit solutions see <ref> [7, 18] </ref> and the references therein. We used problems generated from hypercubes of dimension d = 6; 7; 8; 9; 10; 11. <p> Their average deviations from the best explicit solution are 2.98%, 3.03% and 3.03% respectively (see 11 Table 6). Note that on problem CYC.6 our best solution (60) is known to be opti-mal [18], and on CYC.7 our best solution (144) matches the currently best explicit solution <ref> [7] </ref>. Algorithms NN and R-Gr did slightly worse, and never found the best solution. Algorithms RR, SortLP, Thresh and NoLP performed much worse on all CYC problems.
Reference: [8] <author> V. Chvatal. </author> <title> A greedy heuristic for the set-covering problem. </title> <journal> Math. of Oper. Res., </journal> <volume> 4(3) </volume> <pages> 233-235, </pages> <year> 1979. </year>
Reference-contexts: A simple instance of this problem is shown in Figure 1. The main goal of this paper is a comparative study of the performance of several different SCP approximation algorithms. 1.2 Related Work The first published approximation algorithms for the SCP with a worst-case analysis <ref> [21, 22, 8] </ref>, use the greedy heuristic. The approximation ratio of the greedy algorithm (i.e., the worst ratio between the cost of a greedy solution and the optimum) is ln m + 1. <p> SortLP This algorithm is from [24]. The variables are checked in a decreasing order of their fractional x fl j values, and each variable that appears in an unsatisfied 3 inequality is picked. Gr This is the simple greedy algorithm of <ref> [21, 8] </ref>. In each iteration the variable that appears in the largest number of unsatisfied inequalities is picked. Ties are broken lexicographically (i.e., the variable with the smallest index is picked first). R-Gr This is the randomized greedy algorithm.
Reference: [9] <editor> I. F. Croall and J. P. Mason, editors. </editor> <booktitle> Industrial Applications of Neural Networks. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: Genetic algorithms and simulated annealing algorithms for set covering appear in [27, 6]. Several neural network based algorithms were suggested or developed for problems related to SCP (like scheduling and diagnostic problems, cf. <ref> [26, 20, 9] </ref>), but to our knowledge no neural network based algorithm for the SCP was actually presented and tested so far. One of the algorithms tested in this work is such a neural net based algorithm that was developed recently. It will be described in detail separately [16].
Reference: [10] <author> P. Erd-os. </author> <title> On a combinatorial problem I. </title> <journal> Nordisk Mat. Tidskrift, </journal> <volume> 11 </volume> <pages> 5-10, </pages> <year> 1963. </year>
Reference-contexts: For the currently best explicit solutions see [7, 18] and the references therein. We used problems generated from hypercubes of dimension d = 6; 7; 8; 9; 10; 11. The second set of problems, the CLR set, is derived from another question of Erd-os <ref> [10] </ref>: "what is m d (r), the minimal number of r-tuples that can be chosen so that every coloring of d elements with 2 colors contains at least one monochromatic r-tuple ?" [Note: in combinatorics texts this function is usually denoted m (n), where n replaces our r as the size
Reference: [11] <author> P. Erd-os. </author> <title> On some of my favorite problems in graph theory and block designs. </title> <journal> Le Matematische, </journal> <volume> 45 </volume> <pages> 61-74, </pages> <year> 1990. </year>
Reference-contexts: Table 1: Details of the random problems. 3.2 Combinatorial Problems The algorithms were also tested on 10 problems that arise out of two combinatorial questions. See Table 2 for details. The first set of problems, the CYC set, is derived from an old question of Erd-os, cf. <ref> [11] </ref>: "what is the minimal number of edges of a hypercube that can be chosen so that every cycle of 4 edges contains at least one chosen edge ?". This question translates to an SCP, with hypercube edges corresponding to the variables and an inequality per 4-cycle.
Reference: [12] <author> U. Feige, </author> <year> 1993. </year> <type> Personal communication. 14 </type>
Reference-contexts: Therefore the SCP problem is sometimes referred to as the unicost SCP. The SCP is known to be NP-hard, cf. [13]. This also is a MAX-SNP-hard problem <ref> [23, 12] </ref>, i.e., does not have a polynomial time approximation scheme unless P=NP [1]. The unicost version of the covering problem can be presented as the following combinatorial problem. Consider a set of objects (points, or vertices) V and a collection E of sets of these objects.
Reference: [13] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: In the weighted SCP the objective function is P n j=1 c j x j for some weights (or costs) c j &gt; 0. Therefore the SCP problem is sometimes referred to as the unicost SCP. The SCP is known to be NP-hard, cf. <ref> [13] </ref>. This also is a MAX-SNP-hard problem [23, 12], i.e., does not have a polynomial time approximation scheme unless P=NP [1]. The unicost version of the covering problem can be presented as the following combinatorial problem.
Reference: [14] <author> F. Gavril, </author> <year> 1974. </year> <note> Appears in [13], page 134. </note>
Reference-contexts: The approximation ratio of the greedy algorithm (i.e., the worst ratio between the cost of a greedy solution and the optimum) is ln m + 1. The approximation algorithms of <ref> [14, 19, 24] </ref> have worst-case analyses showing approximation ratios of k (the maximal number of ones per row). 1 of points are denoted by letters. The goal is to "cover" all the points by choosing the minimum number of sets. The incidence graph of this instance is shown in (B). <p> It will be described in detail separately [16]. A probabilistic analysis of SCP defined by randomly generated matrices appears in [29]. 1.3 New Results We conducted a computational study of several approximation algorithms for SCP. These are the simple greedy algorithm [21], the algorithms of <ref> [14, 19, 24] </ref>, a randomized rounding algorithm [25], an alternating greedy algorithm, a randomized greedy algorithm, and a neural network algorithm. <p> Therefore a linear programming (LP) step was performed prior to running the algorithms. Brief descriptions of the algorithms follow. NoLP This is a generalization of Gavril's algorithm <ref> [14] </ref>. Each inequality is in spected in turn, and if it is not satisfied yet then all its variables are picked. Thresh This is Hochbaum's algorithm [19]. Each variable for which the fractional solution value x fl j 1=k is picked. SortLP This algorithm is from [24].
Reference: [15] <author> M. K. Goldberg and H. C. Russell. </author> <title> Toward computing m(4). </title> <journal> Ars Combinatoria, </journal> <volume> 3(9) </volume> <pages> 139-148, </pages> <year> 1995. </year>
Reference-contexts: This is an open combinatorial question for r 4. For the currently best lower bounds for m d (4), and best explicit solution constructions, see <ref> [15] </ref> and the references therein. We used problems generated with r = 4 and d = 10; 11; 12; 13. <p> 352 387 385 CYC.10 1280.0 1792 2220 2220 2633 2193 1916 1916 1916 2060 2081 CLR.10-4 21.00 25 35 35 42 32 32 32 32 29 28 CLR.12-4 16.50 26 37 35 46 33 31 31 28 29 27 1 The currently best explicit solutions, from [18] (CYC problem) and <ref> [15] </ref> (CLR problem). Table 5: Computational results of the combinatorial problems.
Reference: [16] <author> T. Grossman. </author> <title> A neural network algorithm for the minimum cover problem, 1994. </title> <type> Unpublished manuscript. </type>
Reference-contexts: One of the algorithms tested in this work is such a neural net based algorithm that was developed recently. It will be described in detail separately <ref> [16] </ref>. A probabilistic analysis of SCP defined by randomly generated matrices appears in [29]. 1.3 New Results We conducted a computational study of several approximation algorithms for SCP. <p> At the top-most level, the algorithm has an adaptive restart procedure to search for initial states. We used N = 100 such restarts. The network and the algorithm are described in detail in <ref> [16] </ref>. The first seven algorithms (all except Alt-Gr and NN) can terminate with a solution which is not minimal. Therefore a redundancy elimination procedure was performed on their solutions. For the RR algorithm, this procedure was performed on each feasible solution.
Reference: [17] <author> T. Grossman and A. Wool. </author> <title> Computational experience with approximation algorithms for the set covering problem. </title> <type> Technical Report CS94-25, </type> <institution> The Weizmann Institute of Science, Rehovot, Israel, </institution> <year> 1994. </year>
Reference-contexts: The other algorithms we tested were inferior to the ones mentioned above on all the problems. A preliminary version of this paper can be found in <ref> [17] </ref>. 2 The Algorithms Nine algorithms were tested, six of which are deterministic and three (R-Gr, RR, and NN) are randomized. Some of the algorithms use the solution vector of the relaxed fractional set covering, denoted by x fl , and its cost C fl .
Reference: [18] <author> H. Harborth and H. Nienborg. </author> <title> Maximum number of edges in a six-cube without four-cycles, </title> <note> 1995. To appear in Bull. </note> <institution> Inst. Combin. Appl. </institution>
Reference-contexts: The optimal solution for this problem is known for all d 6. For larger d it is an open question. For the currently best explicit solutions see <ref> [7, 18] </ref> and the references therein. We used problems generated from hypercubes of dimension d = 6; 7; 8; 9; 10; 11. <p> 503 406 352 352 352 387 385 CYC.10 1280.0 1792 2220 2220 2633 2193 1916 1916 1916 2060 2081 CLR.10-4 21.00 25 35 35 42 32 32 32 32 29 28 CLR.12-4 16.50 26 37 35 46 33 31 31 28 29 27 1 The currently best explicit solutions, from <ref> [18] </ref> (CYC problem) and [15] (CLR problem). Table 5: Computational results of the combinatorial problems. <p> Their average deviations from the best explicit solution are 2.98%, 3.03% and 3.03% respectively (see 11 Table 6). Note that on problem CYC.6 our best solution (60) is known to be opti-mal <ref> [18] </ref>, and on CYC.7 our best solution (144) matches the currently best explicit solution [7]. Algorithms NN and R-Gr did slightly worse, and never found the best solution. Algorithms RR, SortLP, Thresh and NoLP performed much worse on all CYC problems.
Reference: [19] <author> D. S. Hochbaum. </author> <title> Approximation algorithms for the set covering and vertex cover problems. </title> <journal> SIAM J. Computing, </journal> <volume> 11(3) </volume> <pages> 555-556, </pages> <year> 1982. </year>
Reference-contexts: The approximation ratio of the greedy algorithm (i.e., the worst ratio between the cost of a greedy solution and the optimum) is ln m + 1. The approximation algorithms of <ref> [14, 19, 24] </ref> have worst-case analyses showing approximation ratios of k (the maximal number of ones per row). 1 of points are denoted by letters. The goal is to "cover" all the points by choosing the minimum number of sets. The incidence graph of this instance is shown in (B). <p> It will be described in detail separately [16]. A probabilistic analysis of SCP defined by randomly generated matrices appears in [29]. 1.3 New Results We conducted a computational study of several approximation algorithms for SCP. These are the simple greedy algorithm [21], the algorithms of <ref> [14, 19, 24] </ref>, a randomized rounding algorithm [25], an alternating greedy algorithm, a randomized greedy algorithm, and a neural network algorithm. <p> Brief descriptions of the algorithms follow. NoLP This is a generalization of Gavril's algorithm [14]. Each inequality is in spected in turn, and if it is not satisfied yet then all its variables are picked. Thresh This is Hochbaum's algorithm <ref> [19] </ref>. Each variable for which the fractional solution value x fl j 1=k is picked. SortLP This algorithm is from [24]. The variables are checked in a decreasing order of their fractional x fl j values, and each variable that appears in an unsatisfied 3 inequality is picked.
Reference: [20] <author> C. Jefries. </author> <title> Code Recognition and Set Selection with Neural Networks. </title> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: Genetic algorithms and simulated annealing algorithms for set covering appear in [27, 6]. Several neural network based algorithms were suggested or developed for problems related to SCP (like scheduling and diagnostic problems, cf. <ref> [26, 20, 9] </ref>), but to our knowledge no neural network based algorithm for the SCP was actually presented and tested so far. One of the algorithms tested in this work is such a neural net based algorithm that was developed recently. It will be described in detail separately [16].
Reference: [21] <author> D. S. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> J. Computer System Sci., </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year>
Reference-contexts: A simple instance of this problem is shown in Figure 1. The main goal of this paper is a comparative study of the performance of several different SCP approximation algorithms. 1.2 Related Work The first published approximation algorithms for the SCP with a worst-case analysis <ref> [21, 22, 8] </ref>, use the greedy heuristic. The approximation ratio of the greedy algorithm (i.e., the worst ratio between the cost of a greedy solution and the optimum) is ln m + 1. <p> It will be described in detail separately [16]. A probabilistic analysis of SCP defined by randomly generated matrices appears in [29]. 1.3 New Results We conducted a computational study of several approximation algorithms for SCP. These are the simple greedy algorithm <ref> [21] </ref>, the algorithms of [14, 19, 24], a randomized rounding algorithm [25], an alternating greedy algorithm, a randomized greedy algorithm, and a neural network algorithm. <p> SortLP This algorithm is from [24]. The variables are checked in a decreasing order of their fractional x fl j values, and each variable that appears in an unsatisfied 3 inequality is picked. Gr This is the simple greedy algorithm of <ref> [21, 8] </ref>. In each iteration the variable that appears in the largest number of unsatisfied inequalities is picked. Ties are broken lexicographically (i.e., the variable with the smallest index is picked first). R-Gr This is the randomized greedy algorithm.
Reference: [22] <author> L. Lovasz. </author> <title> On the ratio of optimal integral and fractional covers. </title> <journal> Disc. Math., </journal> <volume> 13 </volume> <pages> 383-390, </pages> <year> 1975. </year>
Reference-contexts: A simple instance of this problem is shown in Figure 1. The main goal of this paper is a comparative study of the performance of several different SCP approximation algorithms. 1.2 Related Work The first published approximation algorithms for the SCP with a worst-case analysis <ref> [21, 22, 8] </ref>, use the greedy heuristic. The approximation ratio of the greedy algorithm (i.e., the worst ratio between the cost of a greedy solution and the optimum) is ln m + 1.
Reference: [23] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> J. Computer System Sci., </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year>
Reference-contexts: Therefore the SCP problem is sometimes referred to as the unicost SCP. The SCP is known to be NP-hard, cf. [13]. This also is a MAX-SNP-hard problem <ref> [23, 12] </ref>, i.e., does not have a polynomial time approximation scheme unless P=NP [1]. The unicost version of the covering problem can be presented as the following combinatorial problem. Consider a set of objects (points, or vertices) V and a collection E of sets of these objects.
Reference: [24] <author> D. Peleg, G. Schechtman, and A. Wool. </author> <title> Approximating bounded 0-1 integer linear programs. </title> <booktitle> In Proc. 2nd Israel Symp. Theory of Computing Sys., </booktitle> <pages> pages 69-77, </pages> <address> Netanya, Israel, </address> <year> 1993. </year>
Reference-contexts: The approximation ratio of the greedy algorithm (i.e., the worst ratio between the cost of a greedy solution and the optimum) is ln m + 1. The approximation algorithms of <ref> [14, 19, 24] </ref> have worst-case analyses showing approximation ratios of k (the maximal number of ones per row). 1 of points are denoted by letters. The goal is to "cover" all the points by choosing the minimum number of sets. The incidence graph of this instance is shown in (B). <p> It will be described in detail separately [16]. A probabilistic analysis of SCP defined by randomly generated matrices appears in [29]. 1.3 New Results We conducted a computational study of several approximation algorithms for SCP. These are the simple greedy algorithm [21], the algorithms of <ref> [14, 19, 24] </ref>, a randomized rounding algorithm [25], an alternating greedy algorithm, a randomized greedy algorithm, and a neural network algorithm. <p> Each inequality is in spected in turn, and if it is not satisfied yet then all its variables are picked. Thresh This is Hochbaum's algorithm [19]. Each variable for which the fractional solution value x fl j 1=k is picked. SortLP This algorithm is from <ref> [24] </ref>. The variables are checked in a decreasing order of their fractional x fl j values, and each variable that appears in an unsatisfied 3 inequality is picked. Gr This is the simple greedy algorithm of [21, 8].
Reference: [25] <author> D. Peleg, G. Schechtman, and A. Wool. </author> <title> Randomized approximation of bounded multicovering problems. </title> <journal> Algorithmica, </journal> <note> 1996. To appear. </note>
Reference-contexts: The incidence graph of this instance is shown in (B). In the neural network used by algorithm NN (see text), the lines represent symmetric connections of weight 1. A randomized rounding algorithm for SCP appears in <ref> [25] </ref>. The approximation ratio of this algorithm is k m for some small constant c. A number of optimal algorithms for SCP, typically based upon tree-search procedures, have appeared in the literature (e.g., [2, 3]). <p> A probabilistic analysis of SCP defined by randomly generated matrices appears in [29]. 1.3 New Results We conducted a computational study of several approximation algorithms for SCP. These are the simple greedy algorithm [21], the algorithms of [14, 19, 24], a randomized rounding algorithm <ref> [25] </ref>, an alternating greedy algorithm, a randomized greedy algorithm, and a neural network algorithm. The algorithms were tested on a set of random-generated problems with up to 500 rows and 5000 columns, and on two sets of problems originating in combinatorial questions with up to 28160 rows and 11264 columns. <p> Among these, the algorithm picks variables according to the greedy rule, with ties broken ac cording to x fl (the variable with the largest x fl j value is picked first). RR This is a randomized rounding algorithm, similar to that of <ref> [25] </ref>. Each fractional value x fl j is multiplied by a scaling factor ffi &gt; 1.
Reference: [26] <author> Y. Peng and J. A. Reggia. </author> <title> A connectionist model for diagnostic problem solving. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 19:285, </volume> <year> 1989. </year>
Reference-contexts: Genetic algorithms and simulated annealing algorithms for set covering appear in [27, 6]. Several neural network based algorithms were suggested or developed for problems related to SCP (like scheduling and diagnostic problems, cf. <ref> [26, 20, 9] </ref>), but to our knowledge no neural network based algorithm for the SCP was actually presented and tested so far. One of the algorithms tested in this work is such a neural net based algorithm that was developed recently. It will be described in detail separately [16].
Reference: [27] <author> S. Sen. </author> <title> Minimal cost set covering using probabilistic methods. </title> <booktitle> In Proc. ACM Symp. Applied Computing, </booktitle> <pages> pages 157-164, </pages> <address> Indianapolis, </address> <year> 1993. </year>
Reference-contexts: The approximation algorithm of [30] was tested on problems generated for airline crew scheduling, involving up to 1600 rows and 105000 columns. Genetic algorithms and simulated annealing algorithms for set covering appear in <ref> [27, 6] </ref>. Several neural network based algorithms were suggested or developed for problems related to SCP (like scheduling and diagnostic problems, cf. [26, 20, 9]), but to our knowledge no neural network based algorithm for the SCP was actually presented and tested so far.
Reference: [28] <author> R. J. Vanderbei. </author> <note> LOQO user's manual, 1992. </note> <institution> Program in Statistics & Operations Research, Princeton University, NJ. </institution> <month> 15 </month>
Reference-contexts: The tests were conducted on an IBM RS6000 model 370 workstation with 128MB memory. The linear programming solver used was R. J. Vanderbei's interior-point solver LOQO <ref> [28] </ref>. Tables 3-4 contain the costs our algorithms obtained on the random problems, along with the fractional solution costs. Table 5 contains the results obtained on the combinatorial problems. The minimal costs that were found for each problem are displayed in boxes on the appropriate columns.
Reference: [29] <author> C. Vercellis. </author> <title> A probabilistic analysis of the set covering problem. </title> <journal> Annals of Oper. Res., </journal> <volume> 1 </volume> <pages> 255-271, </pages> <year> 1984. </year>
Reference-contexts: One of the algorithms tested in this work is such a neural net based algorithm that was developed recently. It will be described in detail separately [16]. A probabilistic analysis of SCP defined by randomly generated matrices appears in <ref> [29] </ref>. 1.3 New Results We conducted a computational study of several approximation algorithms for SCP. These are the simple greedy algorithm [21], the algorithms of [14, 19, 24], a randomized rounding algorithm [25], an alternating greedy algorithm, a randomized greedy algorithm, and a neural network algorithm. <p> The found cost, 5, is known to be optimal for all the problems in this set [3]. As these problems were generated randomly, one could assume that the results obtained would fit the predictions of <ref> [29] </ref>. Denote the optimal cost of a random SCP with m rows by C m . <p> Table 7: Comparison between the predictions of <ref> [29] </ref> and the empirical data. then Theorem 3.1 of [29] says that lim C m = ln 1=(1 %) Somewhat surprisingly, the costs found by our algorithms are significantly less than predicted (see Table 7). <p> Table 7: Comparison between the predictions of <ref> [29] </ref> and the empirical data. then Theorem 3.1 of [29] says that lim C m = ln 1=(1 %) Somewhat surprisingly, the costs found by our algorithms are significantly less than predicted (see Table 7). For densities % = 0:02; 0:05; 0:1; 0:2 the found costs are roughly 6.8, 4.8, 3.5, 2.6 times smaller than the prediction, respectively.
Reference: [30] <author> D. Wedelin. </author> <title> An algorithm for 0-1 programming with application to airline crew scheduling. </title> <booktitle> In Euro. Symp. Algorithms, </booktitle> <year> 1994. </year> <month> 16 </month>
Reference-contexts: These algorithms have been used to solve problems with up to 50 rows and 500 columns, albeit at considerable computational cost. The Lagrangian approximation heuristic for SCP of [4] was tested on problems with up to 500 rows and 5000 columns. The approximation algorithm of <ref> [30] </ref> was tested on problems generated for airline crew scheduling, involving up to 1600 rows and 105000 columns. Genetic algorithms and simulated annealing algorithms for set covering appear in [27, 6].
References-found: 30

