URL: http://www.eecs.berkeley.edu/~rajeev/publications/psdir/retiming_algo.ps
Refering-URL: http://www.eecs.berkeley.edu/~rajeev/publications/publications.html
Root-URL: 
Title: Using Combinational Verification for Sequential Circuits  
Author: Rajeev K. Ranjan Vigyan Singhal Fabio Somenzi zy Robert K. Brayton 
Abstract: Retiming combined with combinational optimization is a powerful sequential synthesis method. However, this methodology has not found wide application because formal sequential verification is not practical and current simulation methodology requires the correspondence of latches disallowing any movement of latches. We present a practical verification technique which permits such sequential synthesis for a class of circuits. In particular, we require certain constraints to be met on the feedback paths of the latches involved in the retiming process. For a general circuit, we can satisfy these constraints by fixing the location of some latches, e.g., by making them observable. We show that equivalence checking after performing repeated retiming and synthesis on this class of circuit reduces to a combinational verification problem. We also demonstrate that our methodology covers a large class of circuits by applying it to a set of benchmarks and industrial designs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Ashar, A. Gupta, and S. Malik. </author> <title> Using Complete-1-Distinguishability for FSM Equivalence Checking. </title> <booktitle> In Proc. IEEE/ACM International Conference on April 17, 1998 15 : 59 International Workshop on Logic Synthesis '1997 9 Computer-Aided Design, </booktitle> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: In this approach, sequential optimization is constrained in order to reduce the verification complexity. In the limit, by making all the latches observable, sequential synthesis reduces to combinational optimization leading to combinational verification problems. The solution proposed in <ref> [1] </ref> falls in this category. We propose a methodology that reduces a sequential verification problem into an equivalent combinational verification problem for a class of circuits. This allows us to leverage powerful combinational verification techniques.
Reference: [2] <author> G. P. Bischoff, K. S. Brace, S. Jain, and R. Razdan. </author> <title> Formal Implementation Verification of the Bus Interface Unit for the Alpha 21164 Microprocessor. </title> <booktitle> In Proc. IEEE/ACM International Conference on Computer Design, </booktitle> <year> 1997. </year>
Reference-contexts: Later we show this methodology allows self-loops on latches, pipelined circuits where the latches cannot be retimed to the periphery, latches trapped inside combinational blocks, with load-enabled latches, and latches that conditionally update their contents. Related to our technique, Bischoff et al. <ref> [2] </ref> verify the implementation of the bus interface unit for the Alpha 21264 microprocessor. They compare RTL with gates extracted from a custom transistor netlist. <p> Starting from primary outputs, we recursively obtain the EDBF for each signal as shown in the Figure 6. 1 1 Though this algorithm was developed independently, a very similar algorithm was presented in <ref> [2] </ref>. For completeness sake, we produce it here. <p> The minterm m can be used to generate a sequence of events and input values such that when applied to the circuits, C 1 and C 2 will result in different outputs. The Theorem 4.2 is necessary to validate the algorithm given in <ref> [2] </ref>. Unlike the regular latch case, the result does not hold for any two sequentially equivalent circuits. This is illustrated by following two examples. In Figure 8, two sequentially equivalent circuits are presented. <p> ) = a (t ) and q (t ) = a (t )b (t )) and (4) (with p (t ) = 1 and q (t ) = a (t )b (t )), we get, O 1 = c ([a (t )b (t )]) From (5) = O 2 In <ref> [2] </ref>, a similar rule was presented to minimize the false negatives. This rewriting rule extends the applicability of our technique. However, this rule is not complete, as shown by the next example. In Figure 9, (a) and (b) are two sequentially equivalent circuits.
Reference: [3] <author> O. Coudert and J. C. Madre. </author> <title> A Unified Framework for the Formal Verification of Sequential Circuits. </title> <booktitle> In Proc. IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 1269, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Many solutions to the sequential equivalence problem have been proposed in the literature which can be broadly divided into two categories. The solutions in the first category attempt to solve the general sequential equivalence problem <ref> [17, 3, 6, 16] </ref>. However, due to the complexity of the problem, the proposed solutions are either limited to relatively small-sized circuits or to circuits which have undergone relatively fewer optimization transformations. The second approach is to trade off the optimization capability with the verification complexity.
Reference: [4] <author> M. Damiani and G. De Micheli. </author> <title> Recurrence Equations and the Optimization of Synchronous Logic Circuits. </title> <booktitle> In Proc. of the IEEE/ACM Design Automation Conf., </booktitle> <pages> pages 556561, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This notion is very similar to the notion of Timed Boolean Function given in [8] and recurrence equations in <ref> [4] </ref>. In [8], similar expressions are obtained for the signals which integrate both timing and logical functionality and generalize the conventional Boolean functions to the temporal domain. These expressions were used in timing analysis, analysis and optimization of wave-pipelined circuits, and performance validation of circuits and systems. In [4], synchronous recurrence <p> equations in <ref> [4] </ref>. In [8], similar expressions are obtained for the signals which integrate both timing and logical functionality and generalize the conventional Boolean functions to the temporal domain. These expressions were used in timing analysis, analysis and optimization of wave-pipelined circuits, and performance validation of circuits and systems. In [4], synchronous recurrence equations were proposed for modeling and optimization of sequential circuits.
Reference: [5] <author> S.-Y. Huang, K.-T. Cheng, and K.-C. Chen. </author> <title> On Verifying the Correctness of Retimed Circuits. </title> <booktitle> In Proceedings. The Great Lakes Symposium on VLSI, </booktitle> <pages> pages 27780, </pages> <year> 1996. </year>
Reference-contexts: Two examples of circuits which are considered equivalent with this notion are shown in Figure 1. This notion is different from April 17, 1998 15 : 59 International Workshop on Logic Synthesis '1997 2 3-valued equivalence <ref> [5] </ref> (it distinguishes both the circuit pairs in circuits in Figure 1b). In the next section we present our technique to derive a combinational representation of sequential circuits.
Reference: [6] <author> S.-Y. Huang, K.-T. Cheng, and K.-C. Chen. AQUILA: </author> <title> An Equivalence Verifier for Large Sequential Circuits. </title> <booktitle> In Proc. of Asian and South Pacific Design Automation Conf., </booktitle> <year> 1997. </year>
Reference-contexts: 1 Introduction Many solutions to the sequential equivalence problem have been proposed in the literature which can be broadly divided into two categories. The solutions in the first category attempt to solve the general sequential equivalence problem <ref> [17, 3, 6, 16] </ref>. However, due to the complexity of the problem, the proposed solutions are either limited to relatively small-sized circuits or to circuits which have undergone relatively fewer optimization transformations. The second approach is to trade off the optimization capability with the verification complexity.
Reference: [7] <author> A. Kuehlmann and F. Krohm. </author> <title> Equivalence Checking Using Cuts and Heaps. </title> <booktitle> In Proc. of the IEEE/ACM Design Automation Conf., </booktitle> <pages> pages 2638, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: In practice, a modified combinational equivalence checker could be used which would not require generation of such circuits and hence no blow-up would occur. The combinational verification was performed by an in-house tool similar to the ones presented in <ref> [13, 7] </ref>. 7 Experimental Results Our experiment consisted of the following steps communication layer. 1. Given the sequential circuit (A), modify it appropriately to satisfy constraints on all feedback paths to obtain a new circuit (B).
Reference: [8] <author> W. Lam. </author> <title> Algebraic Methods for Timing Analysis and Testing in High Performance Designs. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, </institution> <month> Apr. </month> <year> 1993. </year> <note> Memorandum No. UCB/ERL M94/19. </note>
Reference-contexts: This notion is very similar to the notion of Timed Boolean Function given in <ref> [8] </ref> and recurrence equations in [4]. In [8], similar expressions are obtained for the signals which integrate both timing and logical functionality and generalize the conventional Boolean functions to the temporal domain. <p> This notion is very similar to the notion of Timed Boolean Function given in <ref> [8] </ref> and recurrence equations in [4]. In [8], similar expressions are obtained for the signals which integrate both timing and logical functionality and generalize the conventional Boolean functions to the temporal domain. These expressions were used in timing analysis, analysis and optimization of wave-pipelined circuits, and performance validation of circuits and systems.
Reference: [9] <author> D. H. Lee and S. M. Reddy. </author> <title> On Determining Scan Flip-Flops in Partial-Scan Designs. </title> <booktitle> In Proc. IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 3225, </pages> <year> 1990. </year>
Reference-contexts: The problem of finding the minimum set of vertices to make the circuit acyclic corresponds to the minimum feedback vertex set problem, which is NP-complete. We used a modified version of the heuristics given in <ref> [9] </ref>. April 17, 1998 15 : 59 International Workshop on Logic Synthesis '1997 7 6.2 Retiming Retiming was done using Minaret [12]. This tool only supports the constant delay model (we could not find any efficient public domain retiming tools, that supported better delay models).
Reference: [10] <author> C. Legl, P. Vanbekbergen, and A. Wang. </author> <title> Retiming of Edge-Triggered Circuits with Mulitple Clocks and Load Enables. </title> <booktitle> In Proc. IEEE/ACM Intl. Workshop on Logic Synthesis, </booktitle> <year> 1997. </year>
Reference-contexts: Each latch l 2 L is a pair l = (x; e), where x is the latch's output signal and e is its load-enable signal. A latch without a load-enable signal (a regular latch in this paper) has e = 1. Following <ref> [10] </ref>, we define a latch class cl = (e) to be all latches with the same load-enable signal e. <p> In <ref> [10] </ref>, a retiming technique was proposed to handle latches with different enable signals and different clocks. In this work, we propose a verification methodology where all the latches are driven by the same clock but can have different enable signals. Extension to circuits with multiple clocks is straightforward. <p> 4.2 (Latch count and enable sequence) Given an acyclic sequential circuit with load-enabled latches and an input/output pair, for each true path between the pair, the number of latches and the event associated with the sequence of enabling signals of the latches along the path is invariant during retiming (ala <ref> [10] </ref>) and synthesis optimization steps. Proof: Let us first consider the retiming transformation. Suppose fG 1 ; G 2 ; :::; G k g is a path of gates between an input I and output O. Assume that the latches cannot be retimed across input and output ports. <p> In the second mode, the delay obtained through combinational optimization was used as the timing constraint and then constrained minimum area retiming was performed. We could not find a retiming tool which could handle latches with enable signals as proposed in <ref> [10] </ref> and shown in Figure 13. Hence, in the current work we show results on retiming of circuits with regular latches. 6.3 Combinational Optimization We used SIS [14] to obtain a minimum delay circuit. A modified version of script.delay was used.
Reference: [11] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing Synchronous Systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1):4167, </volume> <month> Spring </month> <year> 1983. </year>
Reference-contexts: Intuitively, if an input sequence produces non-X values for the outputs of both the circuits, then the output values must match for the circuits to be steady-state equivalent. Note that this notion of equivalence is along the lines of sufficiently old configuration <ref> [11] </ref> or delayed designs [15]. Two examples of circuits which are considered equivalent with this notion are shown in Figure 1.
Reference: [12] <author> N. Maheshwari and S. S. Sapatnekar. </author> <title> An Improved Algorithm for Minimum-Area Retiming. </title> <booktitle> In Proc. of the IEEE/ACM Design Automation Conf., </booktitle> <year> 1997. </year>
Reference-contexts: We used a modified version of the heuristics given in [9]. April 17, 1998 15 : 59 International Workshop on Logic Synthesis '1997 7 6.2 Retiming Retiming was done using Minaret <ref> [12] </ref>. This tool only supports the constant delay model (we could not find any efficient public domain retiming tools, that supported better delay models). Retiming was performed in two modes. First, the minimum feasible period was obtained and the area of the circuit was optimized for this period.
Reference: [13] <author> Y. Matsunaga. </author> <title> An Efficient Equivalence Checker for Combinational Circuits. </title> <booktitle> In Proc. of the IEEE/ACM Design Automation Conf., </booktitle> <pages> pages 62934, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: In practice, a modified combinational equivalence checker could be used which would not require generation of such circuits and hence no blow-up would occur. The combinational verification was performed by an in-house tool similar to the ones presented in <ref> [13, 7] </ref>. 7 Experimental Results Our experiment consisted of the following steps communication layer. 1. Given the sequential circuit (A), modify it appropriately to satisfy constraints on all feedback paths to obtain a new circuit (B).
Reference: [14] <author> E. M. Sentovich, K. J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. R. Stephan, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <note> SIS: </note>
Reference-contexts: We could not find a retiming tool which could handle latches with enable signals as proposed in [10] and shown in Figure 13. Hence, in the current work we show results on retiming of circuits with regular latches. 6.3 Combinational Optimization We used SIS <ref> [14] </ref> to obtain a minimum delay circuit. A modified version of script.delay was used. The modifications were made because the original script was not able to handle large designs (or took very long to complete). As mentioned earlier, the unit delay model was used during re-timing.
References-found: 14

