URL: http://www.idt.unit.no/IDT/grupper/DB-grp/tech_papers/dexa97/dexa97.ps
Refering-URL: http://www.idt.unit.no/IDT/grupper/DB-grp/tech_papers/tech_papers.html
Root-URL: 
Email: fnoervaag,kjellbg@idi.ntnu.no  
Title: Log-Only Temporal Object Storage  
Author: Kjetil Ntrv-ag and Kjell Bratbergsengen 
Address: 7034 Trondheim, Norway  
Affiliation: Department of Computer and Information Science Norwegian University of Science and Technology  
Abstract: As main memory capacity increases, more of the database read requests will be satisfied from the buffer system. Consequently, the amount of disk write operations relative to disk read operations will increase. This calls for a focus on write optimized storage managers. In this paper we show how the Vagabond object storage manager uses no-overwrite sequential writing of long blocks to achieve high write performance. Vagabond also supports versioned/temporal objects, with the no-overwrite policy used, this does not imply any extra cost. Large objects, e.g., video and matrixes, are divided into large chunks. This makes it easy to achieve high read and write bandwidth. This is important, since in many application areas, high data bandwidth is just as important as high transaction throughput. The buffer system in Vagabond is object based, rather than page based. This gives better utilization of main memory. Transparent compression of objects on disk is supported. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. M. Astrahan et.al. </author> <title> System R: Relational Approach to Database Management. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(2), </volume> <year> 1976. </year>
Reference-contexts: In Section 8 to 11 we describe briefly transaction and recovery related issues. Finally, in Section 12, we present future work and conclude the paper. 2 Related Work A no-overwrite strategy has been used in shadow-paging recovery schemes earlier, e.g., in System R <ref> [1] </ref>. Log-only database techniques are used in Postgres [6], an object-relational database system. Because of the high cost of commit in Postgres, the techniques did not gain any success at that time.
Reference: [2] <author> K. Bratbergsengen and K. Ntrv-ag. </author> <title> Improved and Optimized Partitioning Techniques in Database Query Processing. </title> <booktitle> In Proceedings of the Fifteenth British National Conference on Databases, </booktitle> <address> BNCOD15, </address> <note> 1997 (to appear). </note>
Reference-contexts: These applications will have a need for high data bandwidth. Increasing the effective bandwidth can be done in three ways: 1) by reducing seek time, 2) by reducing the amount of time spent in rotational delay, and 3) parallel I/O. This can be achieved by sequential writes, large blocks <ref> [2] </ref>, and the use of RAID. In current database systems, the first two are partially achieved by the use of write ahead logging (WAL), which defers the non-sequential writing. However, sooner or later, the data has to be written to the database.
Reference: [3] <author> D. E. Langworthy and S. B. Zdonik. </author> <title> Extensibility and Asynchrony in the Brown-Object Storage System. </title> <editor> In V. Kumar, editor, </editor> <title> Performance of Concur-rency Control Mechanisms in Centralized Database Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: Ver-sioning comes at virtually no extra cost, while in a conventional database system versioning doubles the amount of data that has to be written. Cache Coherence. Versioning/timestamping can be exploited in cache coherence in client-server environments, as is done in BOSS <ref> [3] </ref>. With all the advantages listed above, one might wonder why the idea of a log-only database system has not been brought into reality. All the nice features listed should have made them the preferred system type.
Reference: [4] <author> M. Rosenblum and J. K. Ousterhout. </author> <title> The Design and Implementation of a Log-Structured File System. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating System Principles, </booktitle> <year> 1991. </year>
Reference-contexts: Because of the high cost of commit in Postgres, the techniques did not gain any success at that time. The ideas from Postgres were borrowed and used in log structured file systems (LFS), first presented by Rosenblum and Ousterhout <ref> [4] </ref>, later refined by Seltzer [5]. In a LFS, file and directory information are interleaved in a log.
Reference: [5] <author> M. Selzer, K. Bostic, M. K. McKusick, and C. Staelin. </author> <title> An Implementation of a Log-Structured File System for UNIX. </title> <booktitle> In Proceedings of the USENIX Winter 1993 Conference, </booktitle> <year> 1993. </year>
Reference-contexts: Because of the high cost of commit in Postgres, the techniques did not gain any success at that time. The ideas from Postgres were borrowed and used in log structured file systems (LFS), first presented by Rosenblum and Ousterhout [4], later refined by Seltzer <ref> [5] </ref>. In a LFS, file and directory information are interleaved in a log.
Reference: [6] <author> M. Stonebraker. </author> <title> The Design of the POSTGRES Storage System. </title> <booktitle> In Proceedings of the 13th Conference on Very Large Databases, </booktitle> <year> 1987. </year>
Reference-contexts: Finally, in Section 12, we present future work and conclude the paper. 2 Related Work A no-overwrite strategy has been used in shadow-paging recovery schemes earlier, e.g., in System R [1]. Log-only database techniques are used in Postgres <ref> [6] </ref>, an object-relational database system. Because of the high cost of commit in Postgres, the techniques did not gain any success at that time. The ideas from Postgres were borrowed and used in log structured file systems (LFS), first presented by Rosenblum and Ousterhout [4], later refined by Seltzer [5].
Reference: [7] <author> M. Stonebraker. </author> <title> Readings in Database Systems (2nd edition). </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: To benefit from RAID technology, the write blocks has to be much larger than those used in traditional systems. In addition, in normal systems, sequential writes are only about 3-5 times faster than random writes, while in RAID, sequential writes can be up to 20 times faster <ref> [7] </ref>. Super Computing Applications. In many super computing applications, computations are done on large matrixes and arrays. To be able to do operations on these large structures, it is often necessary to break them into chunks which can be processed independently.
References-found: 7

