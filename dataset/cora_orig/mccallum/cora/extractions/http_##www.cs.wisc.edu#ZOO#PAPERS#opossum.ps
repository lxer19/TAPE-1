URL: http://www.cs.wisc.edu/ZOO/PAPERS/opossum.ps
Refering-URL: http://www.cs.wisc.edu/ZOO/papers.html
Root-URL: 
Email: fhaber,yannis,mirong@cs.wisc.edu  
Title: OPOSSUM: Desk-Top Schema Management through Customizable Visualization  
Author: Eben M. Haber Yannis E. Ioannidis Miron Livny 
Address: 1210 W. Dayton St., Madison, WI 53706  
Affiliation: Department of Computer Sciences, University of Wisconsin-Madison,  
Abstract: Several recent trends have changed the usage and users of schemas beyond those of a database administrator's tool for describing database contents. Distribution of computing power to the desk-top and increasing needs for data management have broadened the base of schema users to include people who are not database experts. The advent of graphical user interfaces has brought schemas into use as templates for a variety of database operations such as query specification and browsing. Such changes demand advanced schema management techniques, primarily schema visualization, in order to support productive interaction between increasingly novice users and increasingly complex schemas. In this paper, we present OPOSSUM, a flexible, customizable, and extensible schema management system. Working within the established paradigm of schema editing through direct manipulation, OPOSSUM employs several novel techniques to offer the following capabilities: enhancement of schema visualizations with user-specific information; exploration of schemas through choice of visual representations; and creation of new visual representation styles when existing ones prove unsatisfactory. We discuss the architecture of the system and the methodology that guided its development, and illustrate its most important features through examples of how it has been used. OPOSSUM is operational and is in use by three groups of experimental scientists on the University of Wisconsin campus as a tool for experiment and database design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, N.H. Gehani, and J. Srinivasan. </author> <title> OdeView: The Graphical Interface to Ode. </title> <booktitle> SIGMOD Record, </booktitle> <pages> pp. 34-43, </pages> <year> 1990. </year>
Reference-contexts: The data and visual models in such systems are mainly textual, however, and are not extensible. Finally, there is a multitude of schema template visualization tools in Object-Oriented database systems, which use class methods to procedurally define object visualizations (ADAM [27], DEED [28], ODDS [16], OdeView <ref> [1] </ref>, and others [32]). They all present the user with a single, mixed metaphor, where each object can be seen in one of many ways. A limitation of these systems is that there is no mechanism to deal with co-existing contradictory or ambiguous visualiza tions. 10 Model Def. Metaphor Def.
Reference: [2] <author> A. Albano, L. Alfo, S. Coluccini, and R. Orsini. </author> <title> An Overview of Sidereus, A Graphical Database Schema Editor for Galileo. </title> <booktitle> Int. Conf. on EDBT, </booktitle> <year> 1988. </year>
Reference-contexts: Although textual representations are most common, there are other frequently used visual metaphors including tables, graphs (such as E-R diagrams), and icons. 6 We view all three `ex' properties as equivalent. There are several systems that provide multiple metaphors for visualizing schemas, including ISIS-V [13], Sidereus <ref> [2] </ref>, SUPER [4], IDDS [25], and WINONA [29]. They provide metaphor choices from among those listed above, as well as more unusual metaphors such as 3-D displays and natural language dialogs with the user. While these systems provide a certain amount of choice, the alternatives are pre-defined and hard-coded. <p> A limitation of these systems is that there is no mechanism to deal with co-existing contradictory or ambiguous visualiza tions. 10 Model Def. Metaphor Def. Metaphor Choice Other Work Declarative Extensible Declarative Extensible Multiple Mixed Schema Tools OPOSSUM p p p p p p (Most systems) ISIS-V [13], Sidereus <ref> [2] </ref>, SUPER [4], IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p
Reference: [3] <author> M. Angelaccio, T. Catarci, and G. Santucci. QDB*: </author> <title> A Graphical Query Language with Recursion. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pp. 1150-1163, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: A Group may be collapsed, i.e., displayed as a single Node with its constituent subgraph invisible, or expanded, i.e., displayed with the entire subgraph visible. Grouping has been proposed and implemented in the past <ref> [3, 4, 36] </ref>, although not always on the scale described here. Unlike zooming, which shows the same detail at a smaller scale, Grouping shows less detail at the same scale. By drawing only high-level Groups, the overall structure of a complex schema can be clearly shown. <p> Finally, Figures 11 and 12 show the internal structure of one and two top-level Groups, respectively, allowing study of their details. 5.2.2 Grouping as an Example of a Mixed Metaphor Grouping has already been seen in several systems, e.g., QBD* <ref> [3] </ref>, SUPER [4], and others [36]. Below we describe how it is realized in OPOSSUM, with little effort, as an example of a mixed metaphor. Working with the typical graph visual model described above, we introduce a new primitive type called a Group.
Reference: [4] <author> A. Auddino, E. Amiel, Y. Dennebouy, Y. Dupont, E. Fontana, S. Spac-capietra, and Z. Tari. </author> <title> Database Visual Environments Based on Advanced Data Models. </title> <booktitle> In AVI'92: Proc. Work. on Advanced Visual Interfaces, </booktitle> <pages> pp. 156-172, </pages> <year> 1994. </year>
Reference-contexts: A Group may be collapsed, i.e., displayed as a single Node with its constituent subgraph invisible, or expanded, i.e., displayed with the entire subgraph visible. Grouping has been proposed and implemented in the past <ref> [3, 4, 36] </ref>, although not always on the scale described here. Unlike zooming, which shows the same detail at a smaller scale, Grouping shows less detail at the same scale. By drawing only high-level Groups, the overall structure of a complex schema can be clearly shown. <p> Finally, Figures 11 and 12 show the internal structure of one and two top-level Groups, respectively, allowing study of their details. 5.2.2 Grouping as an Example of a Mixed Metaphor Grouping has already been seen in several systems, e.g., QBD* [3], SUPER <ref> [4] </ref>, and others [36]. Below we describe how it is realized in OPOSSUM, with little effort, as an example of a mixed metaphor. Working with the typical graph visual model described above, we introduce a new primitive type called a Group. <p> Although textual representations are most common, there are other frequently used visual metaphors including tables, graphs (such as E-R diagrams), and icons. 6 We view all three `ex' properties as equivalent. There are several systems that provide multiple metaphors for visualizing schemas, including ISIS-V [13], Sidereus [2], SUPER <ref> [4] </ref>, IDDS [25], and WINONA [29]. They provide metaphor choices from among those listed above, as well as more unusual metaphors such as 3-D displays and natural language dialogs with the user. While these systems provide a certain amount of choice, the alternatives are pre-defined and hard-coded. <p> Metaphor Def. Metaphor Choice Other Work Declarative Extensible Declarative Extensible Multiple Mixed Schema Tools OPOSSUM p p p p p p (Most systems) ISIS-V [13], Sidereus [2], SUPER <ref> [4] </ref>, IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly
Reference: [5] <author> J. R. Bedell and F. J. Maryanski. </author> <title> Extensible Semantic Automata for Modular Design Systems, </title> <journal> pp. </journal> <pages> 43-56. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1989. </year>
Reference-contexts: Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM only VM only Binnacle <ref> [5] </ref> & (Most OODBMS Tool Generators) VM only p p p p [11] DM only DM only [8] Table 1: Comparison of OPOSSUM with other related systems. 6.3 Query/Data Visualization Tools There are a few systems that offer choice in metaphors for query and/or data visualization, though their metaphors and models <p> There are several user interface tools designed to support a specific database system and hence a single data model. Binnacle <ref> [5] </ref> and R1 [18] are two similar systems for the nested Relational data model, which allow procedural specified metaphors, with interface behavior determined through an extensible description of a finite state automaton. Binnacle allows extensible descriptions of the visual model as well.
Reference: [6] <author> S. Benford and J. Mariani. </author> <title> Virtual Environments for Data Sharing and Visualization Populated Information Terrains. </title> <booktitle> In Proc. 2nd Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 168-184, </pages> <year> 1994. </year>
Reference-contexts: p p p p p (Most systems) ISIS-V [13], Sidereus [2], SUPER [4], IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT <ref> [6] </ref>, PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM only VM only Binnacle [5] & (Most OODBMS Tool Generators) VM only p p p p [11] DM only DM only [8] Table 1: Comparison of OPOSSUM with other related systems. 6.3 Query/Data Visualization <p> For data visualization, Hy+ [14] deals with graph-type data and provides a hard-wired mixed metaphor to accommodate a grouping abstraction similar to that of Section 5.2. Two other such systems are Q-PIT <ref> [6] </ref>, which proposes allowing user-defined mappings of tuples and attributes to visual primitives and attributes in a 3-D space (although there is no concrete suggestion on how this mapping would be accomplished), and PRIMA [33], which allows query results to be viewed at four levels of abstraction.
Reference: [7] <author> P. Borras, J.C. Mamou, D. Plateau, B. Poyet, and D. Tallot. </author> <title> Building user interface for database applications. </title> <booktitle> SIGMOD Record, </booktitle> <pages> pp. 32-38, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Binnacle allows extensible descriptions of the visual model as well. There are also several user interface tools for object-oriented data models (DUET [26], FaceKit [22], O2Look/ToonMaker <ref> [7] </ref>, Picasso [30]), which allow the procedural definition of a single, mixed metaphor, and associated visual model.
Reference: [8] <author> R. Carapuca, A. Serrano, and J. Farinha. </author> <title> Automatic Derivation of Graphic Human-Machine Inferfaces for Databases. </title> <booktitle> In Proc. 1st Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 176-192, </pages> <year> 1992. </year>
Reference-contexts: (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM only VM only Binnacle [5] & (Most OODBMS Tool Generators) VM only p p p p [11] DM only DM only <ref> [8] </ref> Table 1: Comparison of OPOSSUM with other related systems. 6.3 Query/Data Visualization Tools There are a few systems that offer choice in metaphors for query and/or data visualization, though their metaphors and models are not extensible. <p> There are notable exceptions, however, which can deal with several object-oriented and semantic data models by capturing their common characteristics [11], or deal with a specific object-oriented model and uses a single, hard-coded visual model and metaphor to automatically generate form and menu-based interfaces from the database schema <ref> [8] </ref>. 7 Summary In the natural world, the Opossum is an animal known for its acting ability; the expression playing 'possum originates from its inclination to feign death when startled or alarmed.
Reference: [9] <author> T. Catarci, S.K.Chang, and G. Santucci. </author> <title> Query Representation and Management in a Multiparadigmatic Visual Query Environment. </title> <journal> Journal of Intelligent Information Systems, </journal> 3(3/4):299-330, July 1994. 
Reference-contexts: For query visualization, Catarci et. al. <ref> [9] </ref> describe a powerful framework that uses both mixed and multiple metaphors; queries may be specified in a diagrammatic, form, icon, or hybrid fashion, with procedural transformations between them. 6.4 Tool Generators In our discussion of tool generators (user interface tools), we view them as a means to define models and
Reference: [10] <author> M. Consens and A.O. Mendelzon. </author> <title> Hy+: A Hygraph-based Query and Visualization System. </title> <type> Technical Report CSRS-285, </type> <institution> University of Toronto, </institution> <month> June </month> <year> 1993. </year>
Reference: [11] <author> R. Cooper. </author> <title> Configurable Data Modelling Systems. </title> <booktitle> In Proc. 9th Conf. on the Entity Relationship Approach, </booktitle> <pages> pp. 57-73, </pages> <year> 1990. </year>
Reference-contexts: (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM only VM only Binnacle [5] & (Most OODBMS Tool Generators) VM only p p p p <ref> [11] </ref> DM only DM only [8] Table 1: Comparison of OPOSSUM with other related systems. 6.3 Query/Data Visualization Tools There are a few systems that offer choice in metaphors for query and/or data visualization, though their metaphors and models are not extensible. <p> There are notable exceptions, however, which can deal with several object-oriented and semantic data models by capturing their common characteristics <ref> [11] </ref>, or deal with a specific object-oriented model and uses a single, hard-coded visual model and metaphor to automatically generate form and menu-based interfaces from the database schema [8]. 7 Summary In the natural world, the Opossum is an animal known for its acting ability; the expression playing 'possum originates from
Reference: [12] <author> Isabel Cruz. </author> <title> User-Defined Visual Languages for Querying Data. </title> <type> Technical Report CS-93-58, </type> <institution> Brown University, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Although not yet implemented, conceptually the most advanced of these systems (and, in fact, the one that comes closest to OPOSSUM) is DOODLE <ref> [12] </ref>. It offers a visual declarative language that allows users to define with pictures OODBMS queries or visualizations of database objects. DOODLE defines the visual model and metaphor together, and the former is not separable from the latter. <p> Metaphor Def. Metaphor Choice Other Work Declarative Extensible Declarative Extensible Multiple Mixed Schema Tools OPOSSUM p p p p p p (Most systems) ISIS-V [13], Sidereus [2], SUPER [4], IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE <ref> [12] </ref> p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM only VM only Binnacle [5] & (Most OODBMS
Reference: [13] <author> J. Davison and S. Zdonik. </author> <title> A Visual Interface for a Database with Version Management. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 4(3) </volume> <pages> 226-256, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: Although textual representations are most common, there are other frequently used visual metaphors including tables, graphs (such as E-R diagrams), and icons. 6 We view all three `ex' properties as equivalent. There are several systems that provide multiple metaphors for visualizing schemas, including ISIS-V <ref> [13] </ref>, Sidereus [2], SUPER [4], IDDS [25], and WINONA [29]. They provide metaphor choices from among those listed above, as well as more unusual metaphors such as 3-D displays and natural language dialogs with the user. <p> A limitation of these systems is that there is no mechanism to deal with co-existing contradictory or ambiguous visualiza tions. 10 Model Def. Metaphor Def. Metaphor Choice Other Work Declarative Extensible Declarative Extensible Multiple Mixed Schema Tools OPOSSUM p p p p p p (Most systems) ISIS-V <ref> [13] </ref>, Sidereus [2], SUPER [4], IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE
Reference: [14] <author> F. Ch. Eigler. </author> <title> Hy+ User's Manual. </title> <type> Technical Report CSRS-285, </type> <institution> University of Toronto, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: OPOSSUM p p p p p p (Most systems) ISIS-V [13], Sidereus [2], SUPER [4], IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ <ref> [14] </ref> Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM only VM only Binnacle [5] & (Most OODBMS Tool Generators) VM only p p p p [11] DM only DM only [8] Table 1: Comparison of OPOSSUM with other related systems. 6.3 <p> For data visualization, Hy+ <ref> [14] </ref> deals with graph-type data and provides a hard-wired mixed metaphor to accommodate a grouping abstraction similar to that of Section 5.2.
Reference: [15] <author> D. England and R. Cooper. </author> <title> Reconfigurable User Interfaces for Databases. </title> <booktitle> In Proc. 1st Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 338-352, </pages> <year> 1992. </year>
Reference-contexts: They provide metaphor choices from among those listed above, as well as more unusual metaphors such as 3-D displays and natural language dialogs with the user. While these systems provide a certain amount of choice, the alternatives are pre-defined and hard-coded. Alternatively, England and Cooper <ref> [15] </ref> suggest visualizing schemas using a data visualization tool that permits user-specified mappings of information to icons in a 2-D space.
Reference: [16] <author> B. Flynn and D. Maier. </author> <title> Supporting Display Generation for Complex Database Objects. </title> <booktitle> SIGMOD Record, </booktitle> <pages> pp. 18-24, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: The data and visual models in such systems are mainly textual, however, and are not extensible. Finally, there is a multitude of schema template visualization tools in Object-Oriented database systems, which use class methods to procedurally define object visualizations (ADAM [27], DEED [28], ODDS <ref> [16] </ref>, OdeView [1], and others [32]). They all present the user with a single, mixed metaphor, where each object can be seen in one of many ways. A limitation of these systems is that there is no mechanism to deal with co-existing contradictory or ambiguous visualiza tions. 10 Model Def.
Reference: [17] <author> E. M. Haber, Y. Ioannidis, and M. Livny. </author> <title> Foundations of Visual Metaphors for Schema Display. </title> <journal> Journal of Intelligent Information Systems, </journal> 3(3/4):263-298, July 1994. 
Reference-contexts: In this section, we briefly discuss the formalism of the visualization process underlying the design and development of OPOSSUM, which is presented in detail elsewhere <ref> [17] </ref>. 3.1 Overview As is well known, every database schema is an instance of some data model, and a data model essentially defines a set of valid schemas for that model. In exactly the same way, we introduce the notions of a visual model and a visual schema. <p> Figure 3 shows the relationships between data, personal, and visual models, along with the original and enhanced visual metaphors. 3.2 A Brief Example A complete discussion and examples of model and metaphor definitions appears elsewhere <ref> [17] </ref>. The crux of the formalism is that models are described in terms of primitive types 5 , attributes of those primitives, and possible values of the attributes. Models also include constraints that must be satisfied by every schema in the model.
Reference: [18] <author> G. Houben and J. Paredaens. </author> <title> A Graphical Interface Formalism: Specifying Nested Relational Databases, </title> <journal> pp. </journal> <pages> 257-276. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1989. </year>
Reference-contexts: There are several user interface tools designed to support a specific database system and hence a single data model. Binnacle [5] and R1 <ref> [18] </ref> are two similar systems for the nested Relational data model, which allow procedural specified metaphors, with interface behavior determined through an extensible description of a finite state automaton. Binnacle allows extensible descriptions of the visual model as well.
Reference: [19] <author> Y. Ioannidis and M. Livny. </author> <title> Conceptual Schemas: Multi-Faceted Tools for Desktop Scientific Experiment Management. </title> <journal> Int. Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(3), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: to do more organized usability assessments to better tailor the operation of OPOSSUM to its intended users. 5.1 Cupid, MOOSE, and a Graph Visual Model A group of soil scientists have used OPOSSUM to layout a MOOSE schema describing the parameters of Cupid, a FORTRAN simulation model of plant growth <ref> [19, 20] </ref>. The input part of the Cupid schema alone has 159 classes (see Figure 8).
Reference: [20] <author> Y. Ioannidis, M. Livny, and E. M. Haber. </author> <title> Graphical User Interfaces for the Management of Scientific Experiments and Data. </title> <booktitle> SIGMOD Record, </booktitle> <pages> pp. 47-53, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: to do more organized usability assessments to better tailor the operation of OPOSSUM to its intended users. 5.1 Cupid, MOOSE, and a Graph Visual Model A group of soil scientists have used OPOSSUM to layout a MOOSE schema describing the parameters of Cupid, a FORTRAN simulation model of plant growth <ref> [19, 20] </ref>. The input part of the Cupid schema alone has 159 classes (see Figure 8).
Reference: [21] <author> R. King and M. Novak. Freeform: </author> <title> A User-Adaptable Form Management System. </title> <booktitle> In Proc. Int. Conf. on VLDB, </booktitle> <pages> pp. 331-339, </pages> <year> 1987. </year>
Reference-contexts: The advantages of DOODLE include its ability to visually specify visual constraints and data visualizations and the fact that the expressive power of its language is well studied. On a simpler level, the Relational report generators and forms tools found in most commercial database systems (and some research prototypes <ref> [21, 31] </ref>) allow users to specify metaphors for schema visualizations to be used for query and data presentation. These metaphors are usually defined either interactively or with a declarative language, and many of them may co-exist (i.e., one may use multiple forms or report definitions for the same data).
Reference: [22] <author> R. King and M. Novak. FaceKit: </author> <title> A Database Interface Design Toolkit. </title> <booktitle> In Proc. Int. Conf. on VLDB, </booktitle> <pages> pp. 115-123, </pages> <year> 1989. </year>
Reference-contexts: Binnacle allows extensible descriptions of the visual model as well. There are also several user interface tools for object-oriented data models (DUET [26], FaceKit <ref> [22] </ref>, O2Look/ToonMaker [7], Picasso [30]), which allow the procedural definition of a single, mixed metaphor, and associated visual model.
Reference: [23] <author> M. A. Linton, P. R. Calder, and J. M. Vlissides. InterViews: </author> <title> A C++ Graphical Interface Toolkit. </title> <type> Technical Report CSL-TR-88-358, </type> <institution> Stanford University, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: Just as a database system can manage data given a schema, Module I can manage schemas given this model and metaphor information. At run-time, models, metaphors and schemas are represented as instances of C++ classes, and all operations on them are managed by methods. Module II uses InterViews <ref> [23] </ref> to convert visual schemas to screen objects. Given any specific visual model and metaphor, this code provides direct manipulation tools for creating, modifying, exploring, and printing schema visualizations. The second component, the meta-creator, supports creation/modification of models and metaphors and is intended to be used by relatively knowledgeable people.
Reference: [24] <author> R. Miller, Y. Ioannidis, and R. Ramakrishnan. </author> <title> The use of information capacity in schema integration and translation. </title> <booktitle> In Proc. 19th Int. VLDB Conf., </booktitle> <address> Dublin, Ireland, </address> <year> 1993. </year>
Reference-contexts: The primary contribution of our framework is that it brings visualizations and visual models to the same level as traditional data schemas and data models, demonstrating duality between the two. Hence, the basic techniques that are applied to translate schemas between different data models <ref> [24] </ref> can also be applied between visual and data models. Such a translation establishes a correspondence between a schema and its visualization (visual schema).
Reference: [25] <author> M. C. Norrie. </author> <title> An Interactive System for Object-Oriented Database Design. </title> <booktitle> In Proc. 1st Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 9-24, </pages> <year> 1992. </year>
Reference-contexts: There are several systems that provide multiple metaphors for visualizing schemas, including ISIS-V [13], Sidereus [2], SUPER [4], IDDS <ref> [25] </ref>, and WINONA [29]. They provide metaphor choices from among those listed above, as well as more unusual metaphors such as 3-D displays and natural language dialogs with the user. While these systems provide a certain amount of choice, the alternatives are pre-defined and hard-coded. <p> Metaphor Def. Metaphor Choice Other Work Declarative Extensible Declarative Extensible Multiple Mixed Schema Tools OPOSSUM p p p p p p (Most systems) ISIS-V [13], Sidereus [2], SUPER [4], IDDS <ref> [25] </ref>, WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID
Reference: [26] <author> B.C. Ooi, C. Zhao, and H. Lu. </author> <title> DUET A Database User Interface Design Environment. </title> <journal> Journal of Intelligent Information Systems, </journal> 3(3/4):331-356, July 1994. 
Reference-contexts: Binnacle allows extensible descriptions of the visual model as well. There are also several user interface tools for object-oriented data models (DUET <ref> [26] </ref>, FaceKit [22], O2Look/ToonMaker [7], Picasso [30]), which allow the procedural definition of a single, mixed metaphor, and associated visual model.
Reference: [27] <author> N. W. Paton, G. al Qaimari, and A. C. Kilgour. </author> <title> An Extensible Interface to an Extensible Object-Oriented Database System. </title> <booktitle> In Proc. 1st Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 265-281, </pages> <year> 1992. </year>
Reference-contexts: The data and visual models in such systems are mainly textual, however, and are not extensible. Finally, there is a multitude of schema template visualization tools in Object-Oriented database systems, which use class methods to procedurally define object visualizations (ADAM <ref> [27] </ref>, DEED [28], ODDS [16], OdeView [1], and others [32]). They all present the user with a single, mixed metaphor, where each object can be seen in one of many ways.
Reference: [28] <author> K. Radermacher. </author> <title> An Extensible Graphical Programming Environment for Semantic Modelling. </title> <booktitle> In Proc. 1st Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 353-373, </pages> <year> 1992. </year>
Reference-contexts: The data and visual models in such systems are mainly textual, however, and are not extensible. Finally, there is a multitude of schema template visualization tools in Object-Oriented database systems, which use class methods to procedurally define object visualizations (ADAM [27], DEED <ref> [28] </ref>, ODDS [16], OdeView [1], and others [32]). They all present the user with a single, mixed metaphor, where each object can be seen in one of many ways.
Reference: [29] <author> M. Rapley and J. Kennedy. </author> <title> Three Dimensional Interface for an Object Oriented Database. </title> <booktitle> In Proc. 2nd Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 143-167, </pages> <year> 1994. </year>
Reference-contexts: There are several systems that provide multiple metaphors for visualizing schemas, including ISIS-V [13], Sidereus [2], SUPER [4], IDDS [25], and WINONA <ref> [29] </ref>. They provide metaphor choices from among those listed above, as well as more unusual metaphors such as 3-D displays and natural language dialogs with the user. While these systems provide a certain amount of choice, the alternatives are pre-defined and hard-coded. <p> Metaphor Def. Metaphor Choice Other Work Declarative Extensible Declarative Extensible Multiple Mixed Schema Tools OPOSSUM p p p p p p (Most systems) ISIS-V [13], Sidereus [2], SUPER [4], IDDS [25], WINONA <ref> [29] </ref> p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM
Reference: [30] <author> L. Rowe, J. Konstan, B. Simth, S.Seitz, and C. Lin. </author> <title> The Picasso Application Framework. </title> <type> Technical Report UCB/ERL M90/18, </type> <institution> University of California, Berkeley, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: Binnacle allows extensible descriptions of the visual model as well. There are also several user interface tools for object-oriented data models (DUET [26], FaceKit [22], O2Look/ToonMaker [7], Picasso <ref> [30] </ref>), which allow the procedural definition of a single, mixed metaphor, and associated visual model.
Reference: [31] <author> L. A. Rowe. </author> <booktitle> Fill-in-the-Form Programming. In Proc. 10th Int. VLDB Conf., </booktitle> <address> Stockholm, Sweeden, </address> <year> 1985. </year>
Reference-contexts: The advantages of DOODLE include its ability to visually specify visual constraints and data visualizations and the fact that the expressive power of its language is well studied. On a simpler level, the Relational report generators and forms tools found in most commercial database systems (and some research prototypes <ref> [21, 31] </ref>) allow users to specify metaphors for schema visualizations to be used for query and data presentation. These metaphors are usually defined either interactively or with a declarative language, and many of them may co-exist (i.e., one may use multiple forms or report definitions for the same data).
Reference: [32] <author> P. Sawyer, A. Colebourne, I. Sommervill, and J. Mariani. </author> <title> Object-Oriented Database Systems: a Framework for User Interface Development. </title> <booktitle> In Proc. 1st Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 25-38, </pages> <year> 1992. </year>
Reference-contexts: The data and visual models in such systems are mainly textual, however, and are not extensible. Finally, there is a multitude of schema template visualization tools in Object-Oriented database systems, which use class methods to procedurally define object visualizations (ADAM [27], DEED [28], ODDS [16], OdeView [1], and others <ref> [32] </ref>). They all present the user with a single, mixed metaphor, where each object can be seen in one of many ways. A limitation of these systems is that there is no mechanism to deal with co-existing contradictory or ambiguous visualiza tions. 10 Model Def. Metaphor Def.
Reference: [33] <author> H. Schoning. </author> <title> A Graphical Interface to a Complex-Object Database Management System. </title> <booktitle> In Proc. 1st Int. Work. on User Interfaces to Databases, </booktitle> <pages> pp. 193-208, </pages> <year> 1992. </year>
Reference-contexts: p p p (Most systems) ISIS-V [13], Sidereus [2], SUPER [4], IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA <ref> [33] </ref> p p p Tool Generators UIDE [34] p p partly p HUMANOID [35] VM only VM only Binnacle [5] & (Most OODBMS Tool Generators) VM only p p p p [11] DM only DM only [8] Table 1: Comparison of OPOSSUM with other related systems. 6.3 Query/Data Visualization Tools There <p> Two other such systems are Q-PIT [6], which proposes allowing user-defined mappings of tuples and attributes to visual primitives and attributes in a 3-D space (although there is no concrete suggestion on how this mapping would be accomplished), and PRIMA <ref> [33] </ref>, which allows query results to be viewed at four levels of abstraction.
Reference: [34] <author> P. `Noi' Sukavariya, J. D. Foley, and T. Griffith. </author> <title> A Second Generation User Interface Design Environment: The Model and The Runtime Architecture. </title> <booktitle> In INTERCHI '93, Proc. Conf. on Human Factors in Computing Systems, </booktitle> <pages> pp. 375-382, </pages> <year> 1993. </year>
Reference-contexts: Sidereus [2], SUPER [4], IDDS [25], WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE <ref> [34] </ref> p p partly p HUMANOID [35] VM only VM only Binnacle [5] & (Most OODBMS Tool Generators) VM only p p p p [11] DM only DM only [8] Table 1: Comparison of OPOSSUM with other related systems. 6.3 Query/Data Visualization Tools There are a few systems that offer choice <p> We distinguish two categories of tool generators, those unrelated and those related to database systems. Most general user interface tools specify visual models proce-durally, though a few, such as HUMANOID [35] and UIDE <ref> [34] </ref>, allow description of visual models through expressions in formal modeling languages. HUMANOID does not allow any description of a data domain, and all data is encapsulated in the visual primitive types.
Reference: [35] <author> P. Szekely, P. Luo, and R. Neches. </author> <title> Beyond Intferface Builders: Model Based Interface Tools. </title> <booktitle> In INTERCHI '93, Proc. Conf. on Human Factors in Computing Systems, </booktitle> <pages> pp. 383-390, </pages> <year> 1993. </year>
Reference-contexts: WINONA [29] p p p Schema Template Tools DOODLE [12] p p p p p (Report Generators) & (Form Systems) p p p (OODBMS Visual Tools) VM only p p Query/Data Tools Hy+ [14] Q-PIT [6], PRIMA [33] p p p Tool Generators UIDE [34] p p partly p HUMANOID <ref> [35] </ref> VM only VM only Binnacle [5] & (Most OODBMS Tool Generators) VM only p p p p [11] DM only DM only [8] Table 1: Comparison of OPOSSUM with other related systems. 6.3 Query/Data Visualization Tools There are a few systems that offer choice in metaphors for query and/or data <p> We distinguish two categories of tool generators, those unrelated and those related to database systems. Most general user interface tools specify visual models proce-durally, though a few, such as HUMANOID <ref> [35] </ref> and UIDE [34], allow description of visual models through expressions in formal modeling languages. HUMANOID does not allow any description of a data domain, and all data is encapsulated in the visual primitive types.
Reference: [36] <author> T. J. Teory, G. Wei, D. L. Bolton, and J.A. Koenig. </author> <title> ER Model Clustering as an Aid for User Communication and Documentation in Database Design. </title> <journal> Communications of the ACM, </journal> <pages> pp. 975-987, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: A Group may be collapsed, i.e., displayed as a single Node with its constituent subgraph invisible, or expanded, i.e., displayed with the entire subgraph visible. Grouping has been proposed and implemented in the past <ref> [3, 4, 36] </ref>, although not always on the scale described here. Unlike zooming, which shows the same detail at a smaller scale, Grouping shows less detail at the same scale. By drawing only high-level Groups, the overall structure of a complex schema can be clearly shown. <p> Finally, Figures 11 and 12 show the internal structure of one and two top-level Groups, respectively, allowing study of their details. 5.2.2 Grouping as an Example of a Mixed Metaphor Grouping has already been seen in several systems, e.g., QBD* [3], SUPER [4], and others <ref> [36] </ref>. Below we describe how it is realized in OPOSSUM, with little effort, as an example of a mixed metaphor. Working with the typical graph visual model described above, we introduce a new primitive type called a Group.
Reference: [37] <author> J. L. Wiener and Y. Ioannidis. </author> <title> A Moose and a Fox can aid scientists with data management problems. </title> <booktitle> In Proc. 4th Int. Work. on Database Programming Languages, </booktitle> <year> 1993. </year>
Reference-contexts: Whether designing a study, invoking an experiment, querying the data, or analyzing query results, a graphical presentation of the schema is used to perform the activity; in essence, the schema captures the experimental study itself. Schemas in ZOO are based on the MOOSE object-oriented data model <ref> [37] </ref>, which is similar to many other object-oriented or semantic models. (MOOSE schemas are used in many of the examples in this paper.) The needs of several experimental scientists collaborating in the development of ZOO have led us to realize the importance of improved and flexible schema management and have been
Reference: [38] <author> H. K. T. Wong and I. Kou. </author> <title> GUIDE: Graphical User Interface for Database Exploration. </title> <booktitle> In Proc. Int. Conf. on VLDB, </booktitle> <pages> pp. 22-32, </pages> <year> 1982. </year>
Reference-contexts: This system's flexibility, however, stops at metaphor definition; the data and visual models are hard-coded. 6.2 Schema Template Tools The idea of using schema visualizations as templates for query specification or data presentation goes all the way back to QBE [39] and GUIDE <ref> [38] </ref> and has been routinely incorporated in many systems and prototypes. Although not yet implemented, conceptually the most advanced of these systems (and, in fact, the one that comes closest to OPOSSUM) is DOODLE [12].
Reference: [39] <author> M. Zloof. Query-by-Example, </author> <title> The Invocation and Definition of Tables and Forms. </title> <booktitle> In Proc. Int. Conf. on VLDB, </booktitle> <year> 1975. </year> <month> 12 </month>
Reference-contexts: This system's flexibility, however, stops at metaphor definition; the data and visual models are hard-coded. 6.2 Schema Template Tools The idea of using schema visualizations as templates for query specification or data presentation goes all the way back to QBE <ref> [39] </ref> and GUIDE [38] and has been routinely incorporated in many systems and prototypes. Although not yet implemented, conceptually the most advanced of these systems (and, in fact, the one that comes closest to OPOSSUM) is DOODLE [12].
References-found: 39

