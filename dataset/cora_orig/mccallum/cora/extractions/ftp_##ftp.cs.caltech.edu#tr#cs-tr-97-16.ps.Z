URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-97-16.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Email: fdmz, brianr, ymk, khaig@cs.caltech.edu  
Title: Constructing Client-Server Multi-Player Asynchronous Networked Games Using a Single-Computer Model  
Author: Daniel M. Zimmerman, Brian Rothstein, Yevgeniy Kaganovich and Khai Pham 
Keyword: asynchronous message passing, networked multi-player games, distributed systems, client-server model, Java  
Date: 1 August 1997  
Address: Pasadena, California 91125  
Affiliation: Computer Science 256-80 California Institute of Technology  
Abstract: We examine the process of creating asynchronous networked games by applying systematic transformations to their single-computer analogues, identify the need for such transformations, and propose a simple system of rules for them. In developing these rules, our primary concerns are comparing the flow of events in single-processor and net-worked games and examining the restrictions and limitations resulting from speed considerations. Although this paper only discusses games, the transformation rules may apply to any networked application with asynchronous data input and exchange. fl This work was supported under the Caltech Infospheres Project. The Caltech Info-spheres Project is sponsored by the Air Force Office of Scientific Research under grant AFOSR F49620-94-1-0244, by the CISE directorate of the National Science Foundation under Problem Solving Environments grant CCR-9527130, by the NSF Center for Research on Parallel Computation under Cooperative Agreement Number CCR-9120008, and by Novell, Inc. and Parasoft Corporation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Begole, J., and Shaffer, </editor> <address> C.A. </address> <year> (1997). </year> <title> Internet Based Real-Time Multiuser Simulation: Ppong!. </title> <type> Technical Report, </type> <institution> Virginia Tech Department of Computer Science. </institution>
Reference-contexts: 1 Introduction Asynchronous networked game programming is a new and exciting application of the Internet. While networked games are more interesting in terms of both gameplay and programming than their single-computer counterparts, they present many design complications <ref> [1] </ref>. These include fairness and synchronization, which are unique to networked games, and game speed, which ascends to a new level of complexity as a result of message passing and network speeds. <p> This is quite different from Tron, where every single movement made by each player must be communicated to the other players. 6 Comparison to Other Methods The need for systematization of networked distributed programming is discussed by other authors in [3, 7]. The problems of network delays <ref> [1] </ref> and increased programming complexity [5] are also addressed elsewhere. The process of transforming a single computer application into a net-worked one is examined in [5], mainly with regard to already existing applications. <p> James Begole, of Virginia Tech, favorably compares the event broadcasting model to display broadcasting in [3] and suggests a view of a game as a sequence of states for each player in <ref> [1] </ref>. He has also identified the event-driven nature of the games and has developed a "retardation" technique [1], similar to the state buffering described in our paper. <p> James Begole, of Virginia Tech, favorably compares the event broadcasting model to display broadcasting in [3] and suggests a view of a game as a sequence of states for each player in <ref> [1] </ref>. He has also identified the event-driven nature of the games and has developed a "retardation" technique [1], similar to the state buffering described in our paper. We have used these and other concepts to form a logical system of transformations, presenting an organized and intuitive method for identifying and employing these concepts.
Reference: [2] <editor> Begole, J., Struble, </editor> <address> C.A., and Shaffer, C.A. </address> <year> (1997). </year> <title> Leveraging Java Applets: Toward Collaboration Transparency in Java. </title> <journal> IEEE Internet Computing, </journal> <volume> volume 1, number 2, </volume> <pages> pp. 57-64. </pages>
Reference: [3] <author> Begole, J., Struble, C.A., Shaffer, C.A., and Smith, R.B. </author> <year> (1997). </year> <title> Transparent Sharing of Java Applets: A Replicated Approach. </title> <booktitle> In conference proceedings the 1997 Conference on User Interface Software and Technology (UIST'97). </booktitle>
Reference-contexts: In response to the increasing demand for simplifying the construction of networked games, a few models have been proposed to deal with the problems of distributed programming and asynchronous message passing <ref> [3, 5] </ref>. Our model centers around a transformation from a multi-player, single-computer version of the game, in an attempt to provide an easier transition to the realm of networked games. <p> This is quite different from Tron, where every single movement made by each player must be communicated to the other players. 6 Comparison to Other Methods The need for systematization of networked distributed programming is discussed by other authors in <ref> [3, 7] </ref>. The problems of network delays [1] and increased programming complexity [5] are also addressed elsewhere. The process of transforming a single computer application into a net-worked one is examined in [5], mainly with regard to already existing applications. <p> Because of that, we have found the existent proposals of single-computer to multi-computer transformations to be rigid and unpermissive. The predominant attempt in the field has been to automatize the transformation as much as possible by creating an "absolute data sharing" model, as in <ref> [3] </ref>, where all state information is shared by broadcasting every state change among all participating parties. We feel that this approach, while suitable for some specific applications, is impractical for most multi-player games, mainly because of speed constraints. <p> Many distributed computing models employ techniques similar to our 15 net event handling. For instance, CORBA [7] technology employs stubs and skeletons to isolate the transformation of network communications into local data. James Begole, of Virginia Tech, favorably compares the event broadcasting model to display broadcasting in <ref> [3] </ref> and suggests a view of a game as a sequence of states for each player in [1]. He has also identified the event-driven nature of the games and has developed a "retardation" technique [1], similar to the state buffering described in our paper.
Reference: [4] <author> Chandy, K.M., Kiniry, J., Rifkin, A., and Zimmerman, D. </author> <year> (1997). </year> <title> The Infospheres Infrastructure User's Guide. </title> <type> Technical Report, </type> <institution> California Institute of Technology. </institution>
Reference-contexts: While using a high-level communications layer may greatly simplify the programming process, some communication-intensive games require reverting to lower level protocols such as TCP and UDP. For instance, we have successfully used the communications layer provided by the Caltech Infospheres Group's info.net package <ref> [4] </ref> for two of our example games, but found it inadequate for the third, for which we used UDP directly. The communication volume also determines the amount of data stored in the PlayerTable.
Reference: [5] <author> Crowley, T., Miazzo, P., Baker, E., Forsdick, H., and Tomlinson, R. </author> <year> (1990) </year> <month> MMConf: </month> <title> An Infrastructure for Building Shared Multimedia Applications. </title> <booktitle> In conference proceedings the 1990 Conference on Computer-Supported Cooperative Work (CSCW'90). </booktitle>
Reference-contexts: In response to the increasing demand for simplifying the construction of networked games, a few models have been proposed to deal with the problems of distributed programming and asynchronous message passing <ref> [3, 5] </ref>. Our model centers around a transformation from a multi-player, single-computer version of the game, in an attempt to provide an easier transition to the realm of networked games. <p> The problems of network delays [1] and increased programming complexity <ref> [5] </ref> are also addressed elsewhere. The process of transforming a single computer application into a net-worked one is examined in [5], mainly with regard to already existing applications. However, this examination largely neglects the benefits of this approach, instead regarding it as a problem that needs to be overcome. <p> The problems of network delays [1] and increased programming complexity <ref> [5] </ref> are also addressed elsewhere. The process of transforming a single computer application into a net-worked one is examined in [5], mainly with regard to already existing applications. However, this examination largely neglects the benefits of this approach, instead regarding it as a problem that needs to be overcome.
Reference: [6] <institution> Grandmaster Technologies Corp. </institution> <year> (1996). </year> <title> CyberSite Internet Collaboration Engine, </title> <address> URL http://www2.tcc.net/CyberSite </address>
Reference: [7] <author> Mowbray, T.J, and Zahavi, R. </author> <year> (1995). </year> <title> The Essential CORBA: System Integration Using Distributed Objects. </title> <publisher> John Wiley & Sons, Inc. </publisher> <address> New York. </address>
Reference-contexts: This is quite different from Tron, where every single movement made by each player must be communicated to the other players. 6 Comparison to Other Methods The need for systematization of networked distributed programming is discussed by other authors in <ref> [3, 7] </ref>. The problems of network delays [1] and increased programming complexity [5] are also addressed elsewhere. The process of transforming a single computer application into a net-worked one is examined in [5], mainly with regard to already existing applications. <p> We feel that this approach, while suitable for some specific applications, is impractical for most multi-player games, mainly because of speed constraints. Many distributed computing models employ techniques similar to our 15 net event handling. For instance, CORBA <ref> [7] </ref> technology employs stubs and skeletons to isolate the transformation of network communications into local data. James Begole, of Virginia Tech, favorably compares the event broadcasting model to display broadcasting in [3] and suggests a view of a game as a sequence of states for each player in [1].
Reference: [8] <author> Wilson, A. </author> <year> (1997). </year> <title> An Internet Game Server in Java. Web Techniques Magazine, </title> <month> March </month> <year> 1997. </year> <month> 17 </month>
References-found: 8

