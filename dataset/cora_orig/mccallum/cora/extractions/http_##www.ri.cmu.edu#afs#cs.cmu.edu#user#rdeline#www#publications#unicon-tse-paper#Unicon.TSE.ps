URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rdeline/www/publications/unicon-tse-paper/Unicon.TSE.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rdeline/www/publications/unicon-tse-paper/index.html
Root-URL: 
Title: Abstractions for Software Architecture and Tools to Support Them 1 Abstractions for Software Architecture and
Author: Mary Shaw Mary Shaw, Robert DeLine, Daniel V. Klein, Theodore L. Ross, David M. Young, Gregory Zelesnik 
Keyword: Software architecture, architecture description language, software system organization, architectural abstraction, software engineering  
Date: March 8, 1995  
Note: and various other current affiliations 1 Version of  
Address: Pittsburgh PA  str act  
Affiliation: Computer Science Department Carnegie Mellon University  Ab  
Abstract: Architectures for software use rich abstractions and idioms to describe system components, the nature of interactions among the components, and the patterns that guide the composition of components into systems. These abstractions are higher-level than the elements usually supported by programming languages and tools. They capture packaging and interaction issues as well as computational functionality. Well-established (if informal) patterns guide architectural design of systems. We sketch a model for defining architectures and present an implementation of the basic level of that model. Our purpose is to support the abstractions used in practice by software designers. The implementation provides a testbed for experiments with a variety of system construction mechanisms. It distinguishes among different types of components and different ways these components can interact. It supports abstract interactions such as data flow and scheduling on the same footing as simple procedure call. It can express and check appropriate compatibility restrictions and configuration constraints. It accepts existing code as components, incurring no runtime overhead after initialization. It allows easy incorporation of specifications and associated analysis tools developed elsewhere. The implementation provides a base for extending the notation and validating the model. 
Abstract-found: 1
Intro-found: 1
References-found: 0

