URL: http://www.cs.tamu.edu/faculty/rwerger/Courses/434/c++primer.ps
Refering-URL: http://www.cs.tamu.edu/people/jac7734/
Root-URL: http://www.cs.tamu.edu
Title: Foundations for Native C Styles  
Author: Andrew Koenig Bjarne Stroustrup 
Address: Murray Hill, New Jersey 07974, USA  
Affiliation: AT&T Research  
Abstract: Over the past decade, C ++ has become the most commonly used language for introducing object-oriented programming and other abstraction techniques into production software. During this period, C ++ has evolved to meet the challenges of production systems. In this, C ++ differs radically from languages that come primarily from academic or research environments, and from less widely used languages. Although C ++ has also been extensively used in academia and for research, its evolution was driven primarily by feedback from its use in industrial applications. In this paper, we focus on three design areas key to successful C ++ use. In doing so, we explore fundamental C ++ concepts and facilities and present distinctive C ++ design and programming styles that have evolved to cope with the stringent demands of everyday systems building. First we explore C ++ 's support for concrete data types and containers and give examples of how the C ++ generic programming facilities, together with well-designed libraries, can yield flexibility and economy of expression. Next we examine some uses of class hierarchies, touching on issues including encapsulation, interface design, efficiency, and maintainability. Finally, we note that languages succeed for rea sons that are not entirely technical and review the background for C ++ 's success. This paper is not a C ++ tutorial. However, it does include enough code examples and supporting commentary that readers familiar with programming languages in general but unfamiliar with C ++ can grasp the key C ++ language constructs and programming tech niques.
Abstract-found: 1
Intro-found: 1
Reference: [Booch,1993] <author> Grady Booch: </author> <title> Object-oriented Analysis and Design with Applications, 2nd edition. </title> <publisher> Benjamin Cummings, </publisher> <address> Redwood City, CA. </address> <year> 1993. </year> <note> ISBN 0-8053-5340-2. </note>
Reference: [Gamma,1994] <author> Gamma E., et.al.: </author> <title> Design Patterns. </title> <publisher> Addison Wesley. </publisher> <year> 1994. </year> <note> ISBN 0-201-63361-2. </note>
Reference-contexts: f (ival_maker* pim) - ival_box = pim-&gt;ival_slider (-99,99); // instead of new BB_val_slider (-99,99); // or new LS_val_slider (-99,99); // or ... - BB_ival_maker BBim; LS_ival_maker LSim; void g () - f (&BBim); // let f use BB f (&LSim); // let f use LS - This technique appears in <ref> [Gamma,1994] </ref> as the abstract factory pattern. 6 C ++ Style C ++ is often inaccurately described as an object-oriented language, and (therefore?) often criticized for not fulfilling everybody's fantasies of what an object-oriented language ought to be. <p> Section 4 was partly inspired by Alex Stepanov's work on the STL [Stepanov,1994]. Section 5 was partly inspired by <ref> [Gamma,1994] </ref>. Brian Kernighan made constructive comments of an draft of this paper.
Reference: [Koenig,1989] <author> Andrew Koenig and Bjarne Stroustrup: </author> <note> As Close as Possible to Cbut no Closer The C++ Report. Vol 1 No 7 July 1989. </note>
Reference-contexts: The policy regarding C/C ++ compatibility has been expressed as: ``As close to C as possiblebut no closer'' <ref> [Koenig,1989] </ref>. In practice, this means that C ++ accepts any C featurehowever uglyas long as it does not interfere with the type system. This policy has kept incompatibilities to an easily manageable minimum. C is the de facto measure of efficiency.
Reference: [Koenig,1995] <author> Andrew Koenig (editor): </author> <note> The Working Papers for the ANSI-X3J16 /ISO-SC22 WG21 C ++ standards committee. </note>
Reference-contexts: A container is an object used to hold other objects. Other examples are vectors, lists, maps (sometimes called associative arrays and dictionaries), sets, and queues. In addition to input/output streams and proper character strings, the C ++ standard library provides these and other containers <ref> [Koenig,1995] </ref>. It also provides the basic operations needed to use the containers. These operationsconventionally called algorithmsinclude sorting, merging, facilities for iterating over containers, facilities for applying operations of elements in containers, etc. The standard library facilities for containers and generic algorithms are derived from Alex Stepanov's STL library [Stepanov,1994] [Vilot,1994]. <p> Thus, if p is an object of an input iterator type, *p and ++p do sensible things, but --p might not. You can find the formal definition in the draft ANSI/ISO C ++ standard <ref> [Koenig,1995] </ref> or in [Stepanov,1994]. There are also output iterators, which allow a sequential data structure to be written but not read. The difference between an input and an output iterator is that if p is an output iterator, *p may only be written but not read.
Reference: [Koenig,1995a] <author> Andrew Koenig and Barbara Moo: </author> <note> Ruminations on C ++ . Book, to appear 1996. </note>
Reference: [Stroustrup,1985] <author> Bjarne Stroustrup: </author> <title> The C ++ Programming Language. </title> <publisher> Addison Wesley, </publisher> <address> ISBN 0 201-12078-X. </address> <month> October </month> <year> 1985. </year>
Reference-contexts: The solution chosen for C ++ was to augment the low-level - 3 - language features with powerful, yet affordable abstraction mechanisms <ref> [Stroustrup,1985] </ref>: ``A programming language serves two related purposes: it provides a vehicle for the programmer to specify actions to be executed and a set of concepts for the programmer to use when thinking about what can be done.
Reference: [Stroustrup,1991] <author> Bjarne Stroustrup: </author> <title> The C ++ Programming Language (2nd Edition) Addison Wesley, </title> <address> ISBN 0-201-53992-6. </address> <month> June </month> <year> 1991. </year>
Reference: [Stroustrup,1994] <author> Bjarne Stroustrup: </author> <title> The Design and Evolution of C ++ Addison Wesley, </title> <type> ISBN 0-201 54330-3. </type> <month> March </month> <year> 1994. </year>
Reference-contexts: If we have to stick a pretentious-sounding label on C ++ it must be: C ++ is a multi-paradigm language. It supports several styles of programming and combinations of those styles. The traditional summary is <ref> [Stroustrup,1994] </ref>: box center; l.
Reference: [Stepanov,1994] <author> Alexander Stepanov and Meng Lee: </author> <title> The Standard Template Library. ISO Program ming language C ++ project. Doc No: </title> <address> X3J16/94-0095, WG21/N0482. </address> <month> May </month> <year> 1994. </year>
Reference-contexts: It also provides the basic operations needed to use the containers. These operationsconventionally called algorithmsinclude sorting, merging, facilities for iterating over containers, facilities for applying operations of elements in containers, etc. The standard library facilities for containers and generic algorithms are derived from Alex Stepanov's STL library <ref> [Stepanov,1994] </ref> [Vilot,1994]. <p> Thus, if p is an object of an input iterator type, *p and ++p do sensible things, but --p might not. You can find the formal definition in the draft ANSI/ISO C ++ standard [Koenig,1995] or in <ref> [Stepanov,1994] </ref>. There are also output iterators, which allow a sequential data structure to be written but not read. The difference between an input and an output iterator is that if p is an output iterator, *p may only be written but not read. <p> Section 4 was partly inspired by Alex Stepanov's work on the STL <ref> [Stepanov,1994] </ref>. Section 5 was partly inspired by [Gamma,1994]. Brian Kernighan made constructive comments of an draft of this paper.
Reference: [Vilot,1994] <author> Michael J Vilot: </author> <title> An Introduction to the STL Library. The C ++ Report. </title> <month> October </month> <year> 1994. </year>
Reference-contexts: It also provides the basic operations needed to use the containers. These operationsconventionally called algorithmsinclude sorting, merging, facilities for iterating over containers, facilities for applying operations of elements in containers, etc. The standard library facilities for containers and generic algorithms are derived from Alex Stepanov's STL library [Stepanov,1994] <ref> [Vilot,1994] </ref>. This section explores some of the principles behind the STL and some of the techniques used to express them. 4.1 An Elementary Data Structure A library of fundamental data types is valuable only if the types provided by the library are about as easy to use as built-in types.
References-found: 10

