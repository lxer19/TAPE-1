URL: http://www.cs.wvu.edu/~atkinson/pubs/icsr5.ps.gz
Refering-URL: http://www.cs.wvu.edu/~atkinson/publications.html
Root-URL: http://www.cs.wvu.edu
Email: atkinson@csee.wvu.edu  
Title: Modelling Formal Integrated Component Retrieval  
Author: Steven Atkinson 
Address: Morgantown WV 26506-6109  
Affiliation: Reusable Software Research Group Department of Computer Science and Electrical Engineering West Virginia University  
Abstract: A fundamental problem associated with libraries of software components is that of retrieval: how to find specific components that can be used in the construction of a particular application. Approaches to this problem can be classified into three categories based upon the way components are represented: synthetic classification, structural matching and behavioral matching. The objective of this paper is to unify these existing approaches to the component retrieval problem into a formally specified framework, thereby enabling a rigorous description of integrated retrieval schemes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Atkinson. </author> <title> Examining behavioural retrieval. </title> <booktitle> In Proceedings of the 8th Workshop on Institutionalizing Software Reuse (WISR8). Electronically published., </booktitle> <month> Mar. </month> <year> 1997. </year>
Reference-contexts: Structural schemes: Structural schemes, such as signature [26] and specification matching [14, 22, 27], seek relevant components using their structural char acteristics. 3. Behavioral schemes: Behavioral retrieval schemes seek to take advantage of a distinguishing property of software: its executability. Behavior-based schemes <ref> [1, 12, 18] </ref> seek relevant components by comparing input and output spaces of components. The framework discussed in this paper enables a uniform description of each of the retrieval schemes from those categories.
Reference: [2] <author> S. Atkinson. </author> <title> Formal Engineering of Software Library Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Electrical Engineering, University of Queensland, </institution> <year> 1997. </year>
Reference-contexts: The next section presents summaries for models of signature matching, specification matching and behavioral retrieval under the formal framework. 3. Further Retrieval Models Three further instantiations of the retrieval framework (namely, signature-matching, specification-matching and behavioral schemes) have been developed <ref> [2] </ref>. In this section a brief summary of each is included. The vocabulary of a signature matching scheme SignatureScheme is a set Signature of constructed type signatures. The set Signature includes basic and constructed types (for example function and Cartesian-product types). <p> Queries and surrogates are characterized as a relation between programs (operations and input values) and resulting behaviors (sequences of output values). A partial order over behaviors is used to achieve surrogate selection. This model is based upon the schemes in Podgurski and Pierce [18] and Atkinson <ref> [2] </ref>. The three schemes described in this section have been formulated under the formal framework of Section 2; hence all have the operations Search and PerformSearch, presenting the same interface to their environment. <p> In <ref> [2] </ref> it is shown how these various sets of vo-cabularies and operations to manage the vocabularies are maintained by a library. <p> The framework for retrieval schemes presented here has been integrated with frameworks for other software library operations, namely insertion, removal, copying, annotation and evolution of library components <ref> [2] </ref>. Acknowledgements. The author gratefully acknowledges financial support from the Australian Postgraduate Awards scheme, and from the Defense Advanced Research Projects Agency under project number DAAH04-96-1-0419, monitored by the U.S. Army Research Office.
Reference: [3] <author> T. Biggerstaff and A. Perlis. </author> <title> Software Reusability: Concepts and Models, vol I. Frontier Series. </title> <publisher> ACM (Addison Wesley), </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: 1. Introduction The problem of retrieval from component libraries has long been considered to be the central technical issue in software library construction <ref> [3, 16] </ref>. Organizational and domain-specific software reuse strategies have somewhat simplified the retrieval problem by narrowing the scope of the universe of discourse. They have enabled specialized retrieval techniques such as domain-modelling [20] and controlled-vocabulary-classification [11] to be applied with some success.
Reference: [4] <author> J. Borstler. </author> <title> Feature-Oriented Classification for Software Reuse. </title> <booktitle> In Proc. Seventh International Conference of Software Engineering and Knowledge Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: These and other retrieval schemes proposed in the literature can be classified into categories, based upon the technique used to index components during the search process: 1. Classification-based schemes: Keyword, faceted [21], knowledge-based [6] and feature <ref> [4] </ref> classification schemes all seek relevant components using controlled vocabularies, properties and ontologies external to the component. 2. Structural schemes: Structural schemes, such as signature [26] and specification matching [14, 22, 27], seek relevant components using their structural char acteristics. 3. <p> Examples of similar classification schemes include retrieval using the REBOOT project's faceted scheme [24], frames [5], features <ref> [4] </ref>, class descriptors [17] and lexical affinity [15]. These retrieval schemes could also be mod-elled under the common framework presented in this section. The next section presents summaries for models of signature matching, specification matching and behavioral retrieval under the formal framework. 3.
Reference: [5] <author> M. del Rosario Girardi and B. Ibrahim. </author> <title> A similarity measure for retrieving software artifacts. </title> <booktitle> In Proc. Sixth International Conference on Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 478485, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Examples of similar classification schemes include retrieval using the REBOOT project's faceted scheme [24], frames <ref> [5] </ref>, features [4], class descriptors [17] and lexical affinity [15]. These retrieval schemes could also be mod-elled under the common framework presented in this section. The next section presents summaries for models of signature matching, specification matching and behavioral retrieval under the formal framework. 3.
Reference: [6] <author> P. Devanbu, R. Brachman, P. Selfridge, and B. Ballard. </author> <title> LaSSIE: A Knowledge-Based Software Information System. </title> <journal> Commun. ACM, </journal> <volume> 34(5):3549, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: These and other retrieval schemes proposed in the literature can be classified into categories, based upon the technique used to index components during the search process: 1. Classification-based schemes: Keyword, faceted [21], knowledge-based <ref> [6] </ref> and feature [4] classification schemes all seek relevant components using controlled vocabularies, properties and ontologies external to the component. 2. Structural schemes: Structural schemes, such as signature [26] and specification matching [14, 22, 27], seek relevant components using their structural char acteristics. 3.
Reference: [7] <author> R. Duke, G. Rose, and G. Smith. Object-Z: </author> <title> a Specification Language Advocated for the Description of Standards. Computer Standards and Interfaces, </title> <address> 17:511533, </address> <month> Sept. </month> <year> 1995. </year> <note> Available from http://svrc.it.uq.edu.au/. </note>
Reference-contexts: Section 3 presents summaries of further instantiations of the common framework to model signature matching, specification matching and behavioral retrieval schemes. Section 4 describes how the framework can be used to define integrated retrieval schemes, and provides several examples of such schemes. In this paper, the Object-Z notation <ref> [7] </ref> has been used to specify concepts. Object-Z is a formal object-oriented specification language; the notation is briefly explained as required. 2. An Abstract Retrieval Framework In this section, an abstract retrieval framework is presented. The framework identifies common characteristics of retrieval schemes, and formalizes them using the Object-Z notation.
Reference: [8] <author> D. Eichmann. </author> <title> A Hybrid Approach to Software Repository Retrieval: Blending Faceted Classification and Type Signatures. </title> <booktitle> In Proc. International Conference on Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 236240, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: In this paper, we apply formal modelling techniques to unify existing approaches to the component retrieval problem into a formal framework. This framework enables a rigorous description of integrated retrieval schemes. An integrated retrieval scheme comprises several retrieval schemes by definition. For example, Eichmann <ref> [8] </ref> has researched an integrated scheme comprising faceted and signature matching schemes; Fischer et. al [10] have proposed an integrated scheme, pipelining signature and specification matching techniques.
Reference: [9] <author> D. Eichmann. </author> <title> Supporting Multiple Domains in a Single Reuse Repository. </title> <booktitle> In Proc. International Conference of Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 164 169, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: They have enabled specialized retrieval techniques such as domain-modelling [20] and controlled-vocabulary-classification [11] to be applied with some success. However there remains the need to develop software retrieval strategies suited for large-scale, domain-spanning libraries <ref> [9, 13] </ref>. In an environment comprising a large library of components, there are obvious advantages for allowing many schemes instead of a single retrieval scheme.
Reference: [10] <author> B. Fischer, M. Kievernagel, and W. Struckmann. </author> <month> VCR: </month>
Reference-contexts: This framework enables a rigorous description of integrated retrieval schemes. An integrated retrieval scheme comprises several retrieval schemes by definition. For example, Eichmann [8] has researched an integrated scheme comprising faceted and signature matching schemes; Fischer et. al <ref> [10] </ref> have proposed an integrated scheme, pipelining signature and specification matching techniques. These and other retrieval schemes proposed in the literature can be classified into categories, based upon the technique used to index components during the search process: 1. <p> SigSpecScheme [Signature; TSym; FSym] SignatureScheme [Signature] [SigSearch=Search; :::] SpecificationScheme [TSym; FSym] [SpecSearch=Search; :::] SequentialSearch b= SigSearch o 9 SpecSearch ConjoinedSearch b= SigSearch [sig !=cs !] ^ SpecSearch [spec!=cs !] Fischer et. al <ref> [10] </ref> developed such an integrated scheme using signature and specification matching schemes. They state that the successive filtering of components allows free combination of different retrieval schemes.
References-found: 10

