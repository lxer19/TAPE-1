URL: http://www.cs.bris.ac.uk/~flach/papers/flach-etal-ILP98.ps
Refering-URL: http://www.cs.bris.ac.uk/~flach/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: -flach,cgc,jwl-@cs.bris.ac.uk  
Title: Strongly Typed Inductive Concept Learning  
Author: P.A. Flach, C. Giraud-Carrier and J.W. Lloyd 
Web: http://www.cs.bris.ac.uk/Research/MachineLearning/  
Address: Merchant Venturers Building, Woodland Road, Bristol BS8 1UB, United Kingdom  
Affiliation: Department of Computer Science, University of Bristol  
Abstract: In this paper we argue that the use of a language with a type system, together with higher-order facilities and functions, provides a suitable basis for knowledge representation in inductive concept learning and, in particular, illuminates the relationship between attribute-value learning and inductive logic programming (ILP). Individuals are represented by closed terms: tuples of constants in the case of attribute-value learning; arbitrarily complex terms in the case of ILP. To illustrate the point, we take some learning tasks from the machine learning and ILP literature and represent them in Escher, a typed, higher-order, functional logic programming language being developed at the University of Bristol. We argue that the use of a type system provides better ways to discard meaningless hypotheses on syntactic grounds and encompasses many ad hoc approaches to declarative bias.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. De Raedt & W. Van Laer. </author> <title> Inductive constraint logic. </title> <booktitle> Proc. 6th Int. Workshop on Algorithmic Learning Theory, </booktitle> <publisher> LNAI 997, </publisher> <address> pp.8094, </address> <year> 1995. </year>
Reference-contexts: Since the data types above are simple types without internal structure, the only operation available for, say, outlookP (w) is a test for equality with one of the constants of type Outlook. Our next example concerns one of the Bongard problems <ref> [1] </ref>.
Reference: 2. <author> L. De Raedt & L. Dehaspe. </author> <title> Clausal Discovery. </title> <booktitle> Machine Learning 26(2/3):99146, </booktitle> <year> 1997. </year>
Reference-contexts: Information about an individual is localised, and naming of subterms is only needed if we want to refer to them from other subterms, as in the mutagenesis example. The representation of individuals by interpretations <ref> [ 2] </ref> is also motivated by localisation of examples. However, we believe that representing individuals by terms offers considerably more opportunities for localisation.
Reference: 3. <author> J.W. Lloyd. </author> <title> Programming in an Integrated Functional and Logic Language. </title> <journal> Journal of Functional and Logic Programming, </journal> <note> 1998 (to appear). </note>
Reference-contexts: The relation between attribute-value learning and ILP is illuminated by viewing it through a strongly typed language such as Escher. One of the main differences lies in the complexity of the terms representing individuals. 2. Elements of Escher This section highlights the main features of the Escher language <ref> [ 3] </ref> and assumes familiarity with Prolog. We mainly deal with list-processing functions. It should be noted that the syntax of Escher is compatible with the syntax of Haskell (a popular and influential functional programming language).
Reference: 4. <author> T.M. Mitchell. </author> <title> Machine Learning. </title> <publisher> McGraw-Hill, </publisher> <year> 1997. </year>
Reference-contexts: In the next section we illustrate this by representing various well-known learning tasks in Escher. 3. Representing learning tasks in Escher We start with representing in Escher a typical attribute-value learning task which involves learning the concept of playing, or not playing, tennis, according to the weather <ref> [4] </ref>. In attribute-value learning, individuals are tuples (elements of a cartesian product) of atomic values. Translated to Escher, this means the definition of a tuple type, which is the domain of the function to be learned, and a data type for each attribute.
Reference: 5. <author> A. Srinivasan, S. Muggleton, R. King & M. Sternberg. Mutagenesis: </author> <title> ILP experiments in a non-determinate biological domain. </title> <booktitle> Proc. 4th Inductive Logic Programming Workshop, </booktitle> <volume> GMD-Studien 237, </volume> <year> 1994. </year>
Reference-contexts: Notice again how the Escher type definitions naturally generate the hypothesis space. The existential variables appear because (i) the top-level type is a set, from which we may select an element, and (ii) one of the data types defines a constructor. Our third and final example involves mutagenicity <ref> [5] </ref>. An abstract view of a molecule is that it is a graph with atoms as nodes and bonds as edges. Below we represent this graph by the set of atoms and the set of bonds; in the next section we give an atom-centered representation.
References-found: 5

