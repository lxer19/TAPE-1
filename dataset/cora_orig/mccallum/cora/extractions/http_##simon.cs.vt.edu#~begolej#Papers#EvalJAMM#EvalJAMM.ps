URL: http://simon.cs.vt.edu/~begolej/Papers/EvalJAMM/EvalJAMM.ps
Refering-URL: http://simon.cs.vt.edu/~begolej/Papers/EvalJAMM/
Root-URL: http://www.cs.vt.edu
Email: fbegolej, rosson, shafferg@cs.vt.edu  
Title: Supporting Worker Independence in Collaboration Transparency  
Author: James "Bo" Begole Mary Beth Rosson Clifford A. Shaffer 
Keyword: Computer-supported cooperative work, groupware, collaboration transparency, usability, Java.  
Address: VA 24061  
Affiliation: Department of Computer Science Virginia Tech Blacksburg,  
Abstract: Conventional collaboration-transparency systems, which provide real-time shared use of legacy single-user applications, are inefficient in their use of network resources and lack support for key groupware principles: concurrent work, relaxed WYSIWIS, and group awareness. We present an alternative implementation approach to collaboration transparency that provides many features previously seen only in collaboration-aware applications. Our approach is based on an object-oriented replicated architecture where selected single-user interface objects are dynamically replaced by multi-user extensions. The replacement occurs at run-time and is transparent to the single-user application and its developers. As an instance of this approach, we describe its incorporation into a new Java-based collaboration-transparency system for serializable, Swing-based Java applications, called Flexible JAMM (Java Applets Made Multiuser). We conducted an empirical study to evaluate the effectiveness of Flexible JAMM versus a representative conventional collaboration-transparency system, Microsoft NetMeeting. Completion times were significantly faster in a loosely-coupled task using Flexible JAMM, and were not adversely affected in a tightly-coupled task, which had been a concern. Accuracy was unaffected by the system used. Participants greatly preferred Flexible JAMM. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> H. Abdel-Wahab and M. Feit. XTV: </author> <title> A framework for sharing X Window clients in remote synchronous collaboration. </title> <booktitle> In Proceedings of IEEE TriComm, </booktitle> <pages> pages 159-167, </pages> <year> 1991. </year>
Reference-contexts: The second approach, collaboration awareness, is to design an application specifically to support cooperative work. Several collaboration-transparency systems now exist, including Old Dominion University's XTV <ref> [1] </ref>, Hewlett Packard's SharedX [8] and Sun Microsystem's ShowMe SharedApp [18] for the X Window System. Recently, Microsoft has released NetMeeting, a freely-available collaboration-transparency system for the Windows platform [13].
Reference: 2. <author> J. B. Begole, C. A. Struble, and C. A. Shaf-fer. </author> <title> Leveraging Java applets: Toward collaboration transparency in Java. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(2) </volume> <pages> 57-64, </pages> <address> Mar./Apr. </address> <year> 1997. </year>
Reference-contexts: INTRODUCTION There are two general approaches to providing computer support for synchronous collaboration <ref> [2] </ref>. One is the sharing of legacy single-user applications. This is called collaboration transparency, because the sharing is provided by a mechanism that is unknown, or transpar ent, to the application and its developers. The second approach, collaboration awareness, is to design an application specifically to support cooperative work. <p> Our approach is to dynamically replace selected single-user interface objects with multi-user versions. Transparency is maintained, because the original application source code is unmodified. We illustrate the approach, with a system called Flexible JAMM (Java Applets Made Multiuser). Flexible JAMM extends the architecture of our previous work <ref> [2, 3] </ref>. Second, we describe an empirical study that evaluated the effectiveness of our flexible collaboration-transparency system versus a representative conventional collaboration-transparency system, NetMeet-ing, for performing tightly- and loosely-coupled tasks. <p> Without this knowledge, the collaboration-transparency system cannot determine which events may be safely modified, delayed, or dropped. Flexible JAMM We have incorporated our approach of dynamic object replacement into a new replicated-architecture collaboration-transparency system, called Flexible JAMM, which extends our previous work <ref> [2, 3] </ref>. lable panel object contains the document editor. In addition to demonstrating our approach to providing flexible collaboration transparency, Flexible JAMM has implications for collaboration-aware groupware toolkits. Flexible JAMM may be viewed as a simple group-ware toolkit. <p> Therefore, in addition to telepointers, Flexible JAMM provides group awareness information by indicating each participant's viewport position in the radar view. Explicit and Implicit Floor Control To avoid potential conflicts between non-atomic events such as mouse drags <ref> [2] </ref>, Flexible JAMM uses a floor control mechanism for some, but not all, interface components.
Reference: 3. <author> J. B. Begole, C. A. Struble, C. A. Shaffer, and R. B. Smith. </author> <title> Transparent Sharing of Java Applets: A Replicated Approach. </title> <booktitle> In Proceedings of the ACM Symposium on User Interface Software and Technology (UIST'97), </booktitle> <pages> pages 55-64, </pages> <address> New York, Oct. 14-17 1997. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Our approach is to dynamically replace selected single-user interface objects with multi-user versions. Transparency is maintained, because the original application source code is unmodified. We illustrate the approach, with a system called Flexible JAMM (Java Applets Made Multiuser). Flexible JAMM extends the architecture of our previous work <ref> [2, 3] </ref>. Second, we describe an empirical study that evaluated the effectiveness of our flexible collaboration-transparency system versus a representative conventional collaboration-transparency system, NetMeet-ing, for performing tightly- and loosely-coupled tasks. <p> Replicated Architecture In a replicated architecture, each collaborator maintains a copy of the shared application. In prior work, we found that current technology can support a replicated architecture for transparent sharing of many, though not all, single-user applications <ref> [3, 12] </ref>. In addition to reducing network bandwidth usage, replication facilitates support of concurrent work and relaxed WYSIWIS, as described later in this section. Dynamic Object Replacement User interfaces are commonly created by combining objects from an object-oriented toolkit. <p> Without this knowledge, the collaboration-transparency system cannot determine which events may be safely modified, delayed, or dropped. Flexible JAMM We have incorporated our approach of dynamic object replacement into a new replicated-architecture collaboration-transparency system, called Flexible JAMM, which extends our previous work <ref> [2, 3] </ref>. lable panel object contains the document editor. In addition to demonstrating our approach to providing flexible collaboration transparency, Flexible JAMM has implications for collaboration-aware groupware toolkits. Flexible JAMM may be viewed as a simple group-ware toolkit. <p> Although in most cases serializability is not difficult to implement, a developer may have no need of it and therefore neglect to include it (see also our previous discussion on Applet Migration <ref> [3] </ref> for more on the limits of JOS). Being constrained to serializable, Swing-based applets and applications, Flexible JAMM does not support as broad a target platform as conventional collaboration-transparency systems, such as NetMeeting or SharedX. <p> FUTURE WORK We are currently working on the following issues. Proxied Externalities In our prototype version of JAMM, we implemented a technique to allow the semi-replicated sharing of system resources such as files, sockets, and system time <ref> [3] </ref>. Flexible JAMM does not have that support, and we plan to restore this in a future version. Extensibility Presently, a developer must modify Flexible JAMM's source code to introduce new multi-user interface elements. We will modify it to make the set of replaceable objects easier to extend.
Reference: 4. <author> A. Chapanis. </author> <title> Interactive human communication. </title> <journal> Scientific American, </journal> <volume> 232(3) </volume> <pages> 36-42, </pages> <month> Mar. </month> <year> 1975. </year>
Reference-contexts: This is a text-editing task analogous to the equipment-assembly task of Chapa-nis' communication study in which a source guides a seeker to construct a piece of equipment <ref> [4] </ref>. For Copy Edit, participants shared an electronic copy of a document that contained errors. One participant assumed the role of a manuscript editor and was given a hard copy of the seven-page document with ten corrections highlighted by bold-italic type.
Reference: 5. <author> T. Crowley, P. Milazzo, E. Baker, H. Forsdick, and R. Tomlinson. MMConf: </author> <title> An infrastructure for building shared multimedia applications. </title> <booktitle> In Proceedings of Conference on Computer-Supported Cooperative Work (CSCW'90), </booktitle> <pages> pages 329-342. </pages> <publisher> ACM Press, </publisher> <year> 1990. </year>
Reference-contexts: Where floor control is used, Flexible JAMM provides mechanisms for both explicit floor requests, where participants explicitly grab and release control of the application, and implicit floor requests, where the system automatically makes floor requests as collaborators use the application. See Crowley, et al. <ref> [5] </ref>, for a description of floor control policies. Implicit control provides seamless floor passing as work flows among the participants. floor control mechanism.
Reference: 6. <author> P. Dewan and R. Choudhary. </author> <title> Flexible user interface coupling in a collaborative system. </title> <booktitle> In Proceedings of ACM Conference on Human Factors in Computing Systems (CHI'91), </booktitle> <pages> pages 41-48, </pages> <year> 1991. </year>
Reference-contexts: However, there are differences in the quality of support for collaboration that these types of systems provide. The degree to which collaborators work closely together versus independently is referred to as tight versus loose coupling <ref> [6] </ref>. In contrast to typical collaboration-aware applications, conventional collaboration-transparency implementations impose an inflexible, tightly-coupled style of collaboration and do not adequately support the following key groupware principles. Concurrent work Conventional collaboration-transpa rency systems do not allow input from more than one person at a time.
Reference: 7. <author> C. A. Ellis and S. J. Gibbs. </author> <title> Concurrency control in group systems. </title> <journal> ACM SIGMOD Record, </journal> <volume> 18(2) </volume> <pages> 399-407, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Flexible JAMM uses an operational transformation algorithm similar to the REDUCE (REal-time Distributed Unconstrained Cooperative Editing) approach described by Sun and colleagues [17]. Operational transformation algorithms require no locking, yet avoid conflicts between edits <ref> [7, 16] </ref>. Each replica updates its copy of the document by transforming incoming remote operations to be consistent with its own set of local operations. Flexible JAMM intercepts and distributes low-level input events before they are delivered to the application. <p> EVALUATION We have criticized conventional collaboration-transparency systems because they impose a tightly-coupled style of collaboration. However, when the collaboration lends itself to a tightly-coupled style of work, conventional collaboration-transparency systems should be adequate. Flexible JAMM provides features previously shown to be useful in collaboration-aware applications <ref> [7, 10, 15] </ref>: concurrent work, relaxed WYSIWIS and detailed group awareness. We were concerned that the advantages provided by our flexible system might be offset by users' unfamiliarity with the new interface items introduced into a legacy single-user application.
Reference: 8. <author> D. Garfinkel, B. Welti, and T. Yip. </author> <title> HP SharedX: A tool for real-time collaboration. </title> <journal> HP Journal, </journal> <pages> pages 23-36, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: The second approach, collaboration awareness, is to design an application specifically to support cooperative work. Several collaboration-transparency systems now exist, including Old Dominion University's XTV [1], Hewlett Packard's SharedX <ref> [8] </ref> and Sun Microsystem's ShowMe SharedApp [18] for the X Window System. Recently, Microsoft has released NetMeeting, a freely-available collaboration-transparency system for the Windows platform [13].
Reference: 9. <author> S. Greenberg and M. Roseman. GroupWeb: </author> <title> A groupware web browser. </title> <booktitle> In Proceedings of the ACM Conference on Computer Supported Work (CSCW'96), Video Program, </booktitle> <pages> page 7, </pages> <address> New York, Nov.16-20 1996. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Group awareness Conventional collaboration-transpa rency systems indicate remote users' cursor locations by means of telepointers. However, telepointers alone are inadequate to convey users' locations when WYSIWIS is relaxed <ref> [9, 14] </ref>. collaboration-transparency systems and collaboration aware applications differ.
Reference: 10. <author> C. Gutwin and S. Greenberg. </author> <title> Effects of awareness support on groupware usability. </title> <booktitle> In Proceedings of the ACM Conference on Human Factors in Computer Systems (CHI'98), </booktitle> <address> New York, Apr.18-23 1998. </address> <publisher> ACM Press. </publisher>
Reference-contexts: In Figure 3 the same application is now being shared among three participants via Flexible JAMM. The scrollable panel object has been replaced by a multi-user radar panel. Gutwin and Greenberg have demonstrated that multi-user radar views enhance the usability of collaborative applications for some collaborative tasks <ref> [10] </ref>. Flexible JAMM Target Platform Collaboration-transparency systems generally allow the sharing of any application written for a particular platform (e.g., X or Windows). <p> EVALUATION We have criticized conventional collaboration-transparency systems because they impose a tightly-coupled style of collaboration. However, when the collaboration lends itself to a tightly-coupled style of work, conventional collaboration-transparency systems should be adequate. Flexible JAMM provides features previously shown to be useful in collaboration-aware applications <ref> [7, 10, 15] </ref>: concurrent work, relaxed WYSIWIS and detailed group awareness. We were concerned that the advantages provided by our flexible system might be offset by users' unfamiliarity with the new interface items introduced into a legacy single-user application. <p> This lack of distinction in responses under between-subjects analysis is likely due to the participants not having a base from which to make judgments. This was observed in questionnaire responses in a study by Gutwin and Greenberg <ref> [10] </ref> and was a primary reason we chose to use a within-subjects design for this study.
Reference: 11. <author> Java Foundation Classes, </author> <month> Mar. 23, </month> <year> 1998. </year> <note> &lt;http://- java.sun.com/products/jfc&gt;. </note>
Reference-contexts: Thus, multi-user radar panels and concurrent text components can be as easy to include in a collaborative application as single-user scroll panels and text components in a single-user application. which is included as a sample in the Java Foundation Classes graphical user interface library, called Swing <ref> [11] </ref>. This application contains a scrollable panel that in turn embeds an editor object. In Figure 3 the same application is now being shared among three participants via Flexible JAMM. The scrollable panel object has been replaced by a multi-user radar panel. <p> A uniquely colored and shaded rectangle indicates each participant's scroll position. Three participant positions are shown here: PC User and Solaris User overlap near the top while Unix User is near the center. Java Foundation Classes' user interface library, Swing <ref> [11] </ref>, became available we moved to it for several reasons. First, interface components in a Swing window are drawn on various layers. This allows a fairly straightforward implementation of telepointers, which are drawn on a layer "above" the application's components.
Reference: 12. <author> J. C. Lauwers, T. A. Joseph, K. A. Lantz, and A. L. Romanow. </author> <title> Replicated architectures for shared window systems: A critique. </title> <booktitle> In OIS90, Computer Mediated Work Environments, </booktitle> <pages> pages 249-260. </pages> <publisher> ACM Press, </publisher> <year> 1990. </year>
Reference-contexts: Replicated Architecture In a replicated architecture, each collaborator maintains a copy of the shared application. In prior work, we found that current technology can support a replicated architecture for transparent sharing of many, though not all, single-user applications <ref> [3, 12] </ref>. In addition to reducing network bandwidth usage, replication facilitates support of concurrent work and relaxed WYSIWIS, as described later in this section. Dynamic Object Replacement User interfaces are commonly created by combining objects from an object-oriented toolkit.
Reference: 13. <author> Microsoft NetMeeting, </author> <month> Mar. 23, </month> <year> 1998. </year> <note> &lt;http://- www.microsoft.com/netmeeting/&gt;. </note>
Reference-contexts: Several collaboration-transparency systems now exist, including Old Dominion University's XTV [1], Hewlett Packard's SharedX [8] and Sun Microsystem's ShowMe SharedApp [18] for the X Window System. Recently, Microsoft has released NetMeeting, a freely-available collaboration-transparency system for the Windows platform <ref> [13] </ref>. We refer to these and other currently available systems as conventional, because they share the same basic implementation and resulting limitations described later in this section. We discuss a flexible collaboration-transparency system in the next section.
Reference: 14. <author> G. Smith. </author> <title> Cooperative virtual environments: Lessons from 2D multi user interfaces. </title> <booktitle> In Proceedings of the ACM Conference on Computer Supported Work (CSCW'96), </booktitle> <pages> pages 390-398, </pages> <address> New York, 1996. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Group awareness Conventional collaboration-transpa rency systems indicate remote users' cursor locations by means of telepointers. However, telepointers alone are inadequate to convey users' locations when WYSIWIS is relaxed <ref> [9, 14] </ref>. collaboration-transparency systems and collaboration aware applications differ.
Reference: 15. <author> M. Stefik, D. G. Bobrow, G. Foster, S. Lanning, and D. Tatar. </author> <title> WYSIWIS revised: Early experiences with multiuser interfaces. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(2) </volume> <pages> 147-167, </pages> <year> 1987. </year>
Reference-contexts: Concurrent work Conventional collaboration-transpa rency systems do not allow input from more than one person at a time. WYSIWIS In conventional collaboration-transparency systems, all participants see exactly the same view at the same time in a manner referred to as strict What You See Is What I See (WYSIWIS) <ref> [15] </ref>. Group awareness Conventional collaboration-transpa rency systems indicate remote users' cursor locations by means of telepointers. However, telepointers alone are inadequate to convey users' locations when WYSIWIS is relaxed [9, 14]. collaboration-transparency systems and collaboration aware applications differ. <p> EVALUATION We have criticized conventional collaboration-transparency systems because they impose a tightly-coupled style of collaboration. However, when the collaboration lends itself to a tightly-coupled style of work, conventional collaboration-transparency systems should be adequate. Flexible JAMM provides features previously shown to be useful in collaboration-aware applications <ref> [7, 10, 15] </ref>: concurrent work, relaxed WYSIWIS and detailed group awareness. We were concerned that the advantages provided by our flexible system might be offset by users' unfamiliarity with the new interface items introduced into a legacy single-user application.
Reference: 16. <author> C. Sun and C. S. Ellis. </author> <title> Operational transformation in real-time group editors: Issues algorithms, and achievements. </title> <booktitle> In Proceedings of the ACM conference on Computer-Supported Cooperative Work (CSCW'98), </booktitle> <month> Nov. </month> <year> 1998. </year> <note> in press. </note>
Reference-contexts: Flexible JAMM uses an operational transformation algorithm similar to the REDUCE (REal-time Distributed Unconstrained Cooperative Editing) approach described by Sun and colleagues [17]. Operational transformation algorithms require no locking, yet avoid conflicts between edits <ref> [7, 16] </ref>. Each replica updates its copy of the document by transforming incoming remote operations to be consistent with its own set of local operations. Flexible JAMM intercepts and distributes low-level input events before they are delivered to the application.
Reference: 17. <author> C. Sun, X. Jia, Y. Zhang, Y. Yang, and D. Chen. </author> <title> Achieving convergence, causality-preservation, and intention-preservation in real-time cooperative editing systems. </title> <journal> Transactions on Computer-Human Interactions, </journal> <volume> 5(1) </volume> <pages> 63-108, </pages> <month> Mar. </month> <year> 1998. </year>
Reference-contexts: If the document is changed as a result, which is usually the case, a message describing the change is sent to all replicas. Flexible JAMM uses an operational transformation algorithm similar to the REDUCE (REal-time Distributed Unconstrained Cooperative Editing) approach described by Sun and colleagues <ref> [17] </ref>. Operational transformation algorithms require no locking, yet avoid conflicts between edits [7, 16]. Each replica updates its copy of the document by transforming incoming remote operations to be consistent with its own set of local operations.
Reference: 18. <author> ShowMe SharedApp, </author> <month> Mar. 23, </month> <year> 1998. </year> <note> &lt;http://- www.sun.com/products-n-solutions/sw/- ShowMe/products/ShowMe SharedApp.html&gt;. </note>
Reference-contexts: The second approach, collaboration awareness, is to design an application specifically to support cooperative work. Several collaboration-transparency systems now exist, including Old Dominion University's XTV [1], Hewlett Packard's SharedX [8] and Sun Microsystem's ShowMe SharedApp <ref> [18] </ref> for the X Window System. Recently, Microsoft has released NetMeeting, a freely-available collaboration-transparency system for the Windows platform [13]. We refer to these and other currently available systems as conventional, because they share the same basic implementation and resulting limitations described later in this section.
References-found: 18

