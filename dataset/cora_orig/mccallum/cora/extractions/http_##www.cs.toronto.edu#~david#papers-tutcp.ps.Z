URL: http://www.cs.toronto.edu/~david/papers-tutcp.ps.Z
Refering-URL: http://www.cs.toronto.edu/~david/papers.html
Root-URL: 
Title: Query Evaluation in Constraint Databases (Tutorial Proposal)  
Author: David Toman 
Address: Toronto, Ontario M5S 1A4, Canada  
Affiliation: Department of Computer Science, University of Toronto  
Abstract: One of the leading approaches to finite encodings of infinite relational databases is the use of constraints|quantifier-free characteristic formulas that describe sets of elements in a particular domain. We introduce an abstract notion of a constraint class to serve as a basis for finite encodings of (classes of) such infinite sets. We study the basic operations in terms of which the evaluation of queries over such representation can be defined together with techniques used in efficient query evaluation algorithms. We also introduce several areas where the use of constraints is very beneficial.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abramsky, S., Hankin, C. </author> <title> Abstract Interpretation of Declarative Languages. </title> <editor> Ellis Hor wood, </editor> <year> 1987. </year>
Reference-contexts: Figure 1). * Spatial Databases [16] (e.g., using linear arithmetic constrains to define convex sets as an intersection of hyperplanes of the appropriate dimension), and * Program analysis using abstract interpretation <ref> [1, 8] </ref> where the constraints encode the abstract properties we use to analyze the programs.
Reference: [2] <author> Bancilhon F., Maier D., Sagiv Y., Ullman J. D. </author> <title> Magic sets and other strange ways to implement logic programs. </title> <booktitle> In Proc. ACM Symposium on Principles of Database Systems, </booktitle> <year> 1986. </year>
Reference: [3] <author> Bancilhon F., Ramakrishnan, R. </author> <title> An Amateur's Introduction to Recursive Query Pro cessing Strategies. </title> <booktitle> In Proc. of ACM SIGMOD '86 , 16-52, </booktitle> <year> 1986. </year>
Reference: [4] <author> Baudinet, M., Chomicki, J., Wolper, P. </author> <title> Temporal Deductive Databases. In Temporal Databases: Theory, Design, And Implementation, Tansel, </title> <editor> A. et al. (editors). </editor> <publisher> Benjamin Cummings 1993. </publisher> <pages> 4 </pages>
Reference: [5] <author> Baudinet, M., Nezette, M., Wolper P. </author> <title> On the Representation of Infinite Temporal Data and Queries. </title> <booktitle> 10th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pp 280-290, </pages> <year> 1991. </year>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [6] <author> Chomicki J. </author> <title> Temporal Query Languages: a Survey. </title> <booktitle> Proc. International Conference on Temporal Logic, </booktitle> <address> July 1994, Bonn, Germany, </address> <publisher> Springer-Verlag (LNAI 827), </publisher> <pages> pp. 506-534. </pages>
Reference-contexts: The restriction to finite relations, common to virtually all relational systems, is not acceptable in many cases, e.g., for modeling time in temporal databases <ref> [6] </ref> or the spatial dimension in spatial databases [16]. On the other hand, computers can directly handle only finite amount of information. Thus finite encodings of classes of infinite databases are needed in these cases. <p> We also survey the known constraint representations, including the complexity of query evaluation of both the first-order and deductive queries. 2.3 Applications of Constraint Databases The last part of the tutorial will introduce several applications of constraint databases: * Temporal Databases <ref> [6] </ref> where the constraints are used to represent possibly unbounded periods of time (cf.
Reference: [7] <author> Chomicki, J., Imielinski, T. </author> <title> Finite Representation of Infinite Query Answers, </title> <journal> In ACM Transactions on Database Systems, </journal> <pages> pp. 181-223, (18) 2, </pages> <year> 1993. </year>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [8] <author> Cousot P., Cousot R. </author> <title> Abstract Interpretation Frameworks. </title> <journal> J. of Logic and Computation, </journal> <pages> 2-4, </pages> <year> 1992. </year>
Reference-contexts: Figure 1). * Spatial Databases [16] (e.g., using linear arithmetic constrains to define convex sets as an intersection of hyperplanes of the appropriate dimension), and * Program analysis using abstract interpretation <ref> [1, 8] </ref> where the constraints encode the abstract properties we use to analyze the programs.
Reference: [9] <author> Gao, H., Warren, D. S. </author> <title> A Powerful Evaluation Strategy For CLP Programs. </title> <booktitle> Proc. Intl. Workshop on Principles and Practice of Constraint Programming, </booktitle> <year> 1993. </year>
Reference: [10] <author> Jaffar J., Maher, M. J. </author> <title> Constraint Logic Programming: A Survey. </title> <journal> J. Logic Programming 1994, </journal> <volume> 19. 20 </volume> <pages> 503-581. </pages>
Reference: [11] <author> Kabanza, F., Stevenne, J-M., Wolper, P. </author> <title> Handling Infinite Temporal Data. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> (51) 1, </volume> <pages> 149-186, </pages> <year> 1995. </year>
Reference: [12] <author> Kanellakis, P. C., Goldin, D. Q. </author> <title> Constraint Programming and Database Query Lan guages. </title> <booktitle> In Proc. 2nd TACS , 1994. </booktitle>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [13] <author> Kanellakis, P. C., Ramaswamy, S., Vengroff, D. E., Vitter, J. S. </author> <title> Indexing for Data Models with Constraints and Classes. </title> <booktitle> Proc. ACM Symposium on Principles of Database Systems, </booktitle> <pages> pp 233-243, </pages> <year> 1993. </year>
Reference: [14] <author> Kanellakis, P. C., Kuper, G. M., Revesz, P.Z. </author> <title> Constraint Query Languages, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> (51) 1, </volume> <pages> 26-52, </pages> <year> 1995. </year>
Reference-contexts: On the other hand, computers can directly handle only finite amount of information. Thus finite encodings of classes of infinite databases are needed in these cases. The leading approach to finite encodings of infinite databases uses constraints (generalized tuples <ref> [14] </ref>) in place of the ground tuples. The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. <p> The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints. <p> foundations on which the query evaluation in constraint databases is based: * We define an abstract notion of constraint class [27] that will serve as the common basis of finite encoding of abstract databases. * We instantiate this general definition with examples of constraint classes, e.g., the linear arithmetic constraints <ref> [14] </ref>, the (gap-)order constraints [18], the periodicity constraints [26], and other. * We study various query languages over the chosen class of abstract databases and their relation to the chosen encoding. In this section we study the first-order queries and Datalog (deductive) queries over such encodings.
Reference: [15] <author> Mumick, I. S. </author> <title> Query Optimization in Deductive and Relational Databases. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1991. </year>
Reference-contexts: We focus on: * Evaluation of first-order queries (quantifier elimination, duplicates and subsumption, free variables and domain independence). * Evaluation of deductive queries (bottom-up algorithm, termination of queries, goal ori ented query evaluation strategies based on MST transformation <ref> [17, 15] </ref> and resolution with tabling [25, 27]). * Low-level implementation issues (indexing of constraint relations, storage techniques, access methods, compilation of queries, etc.). * Other features of query languages (e.g., aggregation or dependencies) and their relation to the constraint representation of abstract databases.
Reference: [16] <author> Paredaens, J., Van den Bussche, J., Van Gucht, D. </author> <title> Towards a Theory of Spatial Database Queries. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <year> 1994. </year>
Reference-contexts: The restriction to finite relations, common to virtually all relational systems, is not acceptable in many cases, e.g., for modeling time in temporal databases [6] or the spatial dimension in spatial databases <ref> [16] </ref>. On the other hand, computers can directly handle only finite amount of information. Thus finite encodings of classes of infinite databases are needed in these cases. The leading approach to finite encodings of infinite databases uses constraints (generalized tuples [14]) in place of the ground tuples. <p> Figure 1). * Spatial Databases <ref> [16] </ref> (e.g., using linear arithmetic constrains to define convex sets as an intersection of hyperplanes of the appropriate dimension), and * Program analysis using abstract interpretation [1, 8] where the constraints encode the abstract properties we use to analyze the programs.
Reference: [17] <author> Ramakrishnan, R. </author> <title> Magic Templates. A spellbinding approach to logic programs. </title> <journal> J. Logic Programming 1991, </journal> <volume> 11 </volume> <pages> 189-216. </pages>
Reference-contexts: We focus on: * Evaluation of first-order queries (quantifier elimination, duplicates and subsumption, free variables and domain independence). * Evaluation of deductive queries (bottom-up algorithm, termination of queries, goal ori ented query evaluation strategies based on MST transformation <ref> [17, 15] </ref> and resolution with tabling [25, 27]). * Low-level implementation issues (indexing of constraint relations, storage techniques, access methods, compilation of queries, etc.). * Other features of query languages (e.g., aggregation or dependencies) and their relation to the constraint representation of abstract databases.
Reference: [18] <author> Revesz, P. Z. </author> <title> A Closed Form for Datalog Queries with Integer Order. </title> <booktitle> Proc. 3rd Interna tional Conference on Database Theory, </booktitle> <pages> pp 187-201, </pages> <publisher> Springer-Verlag LNCS 470, </publisher> <year> 1990. </year>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints. <p> query evaluation in constraint databases is based: * We define an abstract notion of constraint class [27] that will serve as the common basis of finite encoding of abstract databases. * We instantiate this general definition with examples of constraint classes, e.g., the linear arithmetic constraints [14], the (gap-)order constraints <ref> [18] </ref>, the periodicity constraints [26], and other. * We study various query languages over the chosen class of abstract databases and their relation to the chosen encoding. In this section we study the first-order queries and Datalog (deductive) queries over such encodings.
Reference: [19] <author> Revesz, P. </author> <title> Constraint Query Languages. </title> <type> PhD Dissertation, </type> <institution> Brown University, </institution> <year> 1991. </year>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [20] <author> Revesz, P. Z. </author> <title> A Closed Form Evaluation for Datalog Queries with Integer (Gap)-Order Constraints. </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 116, no. 1, </volume> <pages> 117-149, </pages> <year> 1993. </year>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [21] <author> Revesz, P. Z. </author> <title> Datalog Queries of Set Constraint Databases. </title> <booktitle> In Proc. 5th International Conference on Database Theory, </booktitle> <pages> 423-438, </pages> <year> 1995. </year> <month> 5 </month>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [22] <author> Revesz, P. </author> <title> Safe Stratified Datalog with Integer Order Programs. </title> <booktitle> In Proc. First Interna tional Conference on Constraint Programming, </booktitle> <editor> Montanari U., Rossi F. eds., </editor> <publisher> Springer-Verlag LNCS 976, </publisher> <address> Cassis, France, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [23] <author> Srivastava, D., Ramakrishnan, R., Revesz, P. Z. </author> <title> Constraint Objects. </title> <booktitle> Proc. Intl. Workshop on Principles and Practice of Constraint Programming, </booktitle> <pages> 218-228, </pages> <year> 1994. </year>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints.
Reference: [24] <author> Swift, T., Warren, D. S. </author> <title> An Abstract Machine for SLG Resolution: Definite Programs. </title> <booktitle> Proc. 1994 International Logic Programming Symposium, </booktitle> <publisher> MIT Press, </publisher> <year> 1994, </year> <pages> 633-652. </pages>
Reference: [25] <author> Swift, T., Warren, D. S., Chen, W. </author> <title> Operational semantics of SLG evaluation. </title> <type> Tech. report, </type> <institution> SUNY at Stony Brook, </institution> <year> 1994. </year>
Reference-contexts: We focus on: * Evaluation of first-order queries (quantifier elimination, duplicates and subsumption, free variables and domain independence). * Evaluation of deductive queries (bottom-up algorithm, termination of queries, goal ori ented query evaluation strategies based on MST transformation [17, 15] and resolution with tabling <ref> [25, 27] </ref>). * Low-level implementation issues (indexing of constraint relations, storage techniques, access methods, compilation of queries, etc.). * Other features of query languages (e.g., aggregation or dependencies) and their relation to the constraint representation of abstract databases.
Reference: [26] <author> Toman, D., Chomicki, J., Rogers D. S. </author> <title> Datalog with Integer Periodicity Constraints. </title> <booktitle> Proc. 1994 International Logic Programming Symposium, </booktitle> <publisher> MIT Press, </publisher> <year> 1994, </year> <pages> 189-203. </pages>
Reference-contexts: The constraints allow to represent whole sets of tuples using a single tuple|the constraint itself serves as a characteristic formula of such a set. There are many published proposals, that extend the standard relational model with classes of constraints over various domains <ref> [5, 7, 12, 14, 18, 19, 20, 21, 22, 23, 26] </ref> and study the query evaluation over such representations. These approaches differ in * the chosen class of infinite databases (abstract databases) to be represented using con straints. <p> databases is based: * We define an abstract notion of constraint class [27] that will serve as the common basis of finite encoding of abstract databases. * We instantiate this general definition with examples of constraint classes, e.g., the linear arithmetic constraints [14], the (gap-)order constraints [18], the periodicity constraints <ref> [26] </ref>, and other. * We study various query languages over the chosen class of abstract databases and their relation to the chosen encoding. In this section we study the first-order queries and Datalog (deductive) queries over such encodings.
Reference: [27] <author> Toman, D. </author> <title> Top-Down beats Bottom-Up for Constraint Based Extensions of Datalog. </title> <booktitle> Proc. 1995 International Logic Programming Symposium, </booktitle> <publisher> MIT Press, </publisher> <year> 1995 </year> <month> 98-112. </month>
Reference-contexts: applications of the constraint technology. 2 Organization of the Tutorial The tutorial consists of three parts: 2.1 Theoretical Foundations In the first part of the tutorial we investigate the theoretical foundations on which the query evaluation in constraint databases is based: * We define an abstract notion of constraint class <ref> [27] </ref> that will serve as the common basis of finite encoding of abstract databases. * We instantiate this general definition with examples of constraint classes, e.g., the linear arithmetic constraints [14], the (gap-)order constraints [18], the periodicity constraints [26], and other. * We study various query languages over the chosen class <p> We focus on: * Evaluation of first-order queries (quantifier elimination, duplicates and subsumption, free variables and domain independence). * Evaluation of deductive queries (bottom-up algorithm, termination of queries, goal ori ented query evaluation strategies based on MST transformation [17, 15] and resolution with tabling <ref> [25, 27] </ref>). * Low-level implementation issues (indexing of constraint relations, storage techniques, access methods, compilation of queries, etc.). * Other features of query languages (e.g., aggregation or dependencies) and their relation to the constraint representation of abstract databases.
Reference: [28] <author> Ullman J. D. </author> <title> Principles of Database and Knowledge-base Systems, </title> <booktitle> Vol. 1,2. Computer Science Systems, </booktitle> <year> 1989. </year>
Reference: [29] <author> Williams, H. P. </author> <title> Fourier-Motzkin Elimination Extension to Integer Programming Prob lems. </title> <journal> In Journal of Combinatorial Theory (A) 21, </journal> <pages> pp 118-123, </pages> <year> 1976. </year> <month> 6 </month>
References-found: 29

