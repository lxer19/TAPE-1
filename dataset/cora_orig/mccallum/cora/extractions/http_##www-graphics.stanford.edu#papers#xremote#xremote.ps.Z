URL: http://www-graphics.stanford.edu/papers/xremote/xremote.ps.Z
Refering-URL: http://www-graphics.stanford.edu/papers/xremote/
Root-URL: http://www.cs.stanford.edu
Title: Compression Performance of the Xremote Protocol  
Author: John Danskin Pat Hanrahan 
Affiliation: Department of Computer Science, Princeton University  
Abstract: The Xremote protocol is a compressed transformation of the X Window System protocol, designed to efficiently implement X connections across relatively slow serial lines. Using an Xremote simulator and 11 traces of X sessions, we found that Xremote's overall compression ratio is 2.4:1. This figure varies widely depending on the trace. A study of compression ratio as a function of message type shows text based messages commonly achieving 3:1 compression, while geometric messages usually achieve only 1.6:1 compression. By examining bandwidth requirements and compression performance as a function of time, we see that Xremote performs adequately for some applications which are text based or which use small geometric datasets, except at application startup where more bandwidth is required. Further work is required to adequately support the initialization stage of X applications and medium to large geometric databases.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arden, Michelle J., James Gosling, and David S. H. Rosenthal, </author> <title> "The NeWS book : an introduction to the Networked extensible Window System," </title> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: One way to address the client-server bandwidth issue is to allow applications to dynamically extend the protocol by downloading macros, display-lists, or even procedures into the server. For example, the NeWS window system <ref> [1] </ref> allows applications to download postscript programs into the server. We are interested in protocols, like the X protocol, where the division of labor between client and server is fixed. This study is based on our simulation of the Xremote protocol over 11 traces of X sessions.
Reference: [2] <author> Bell, Timothy C., John G. Cleary, and Ian H. Witten, </author> <title> "Text Compression," </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990 </year>
Reference: [3] <author> Card, Stuart K, Thomas P Moran, and Allen Newell, </author> <title> "The psychology of human-computer interaction," </title> <address> Hillsdale, N.J., </address> <publisher> L. Erlbaum Associates, </publisher> <year> 1983 </year>
Reference-contexts: X supports many different types of data including images, geometric objects, and text. 2. X supports interactive applications. Humans can detect, and are affected by delays exceeding 100ms <ref> [3] </ref>. Delays can arise either from the compression architecture, or from insufficient network bandwidth. 3.
Reference: [4] <author> Cornelius, David, "XRemote: </author> <title> a serial line protocol for X" 6th Annual X Technical Conference, </title> <address> Boston, MA, </address> <year> 1992 </year>
Reference-contexts: Whenever network bandwidth is a limiting factor, there is an opportunity for compression. This is the case for X connections using normal telephone service, ISDN, and even sometimes ethernet. Xremote <ref> [4] </ref> is a transformation of the X protocol designed (by NCD) as a way to efficiently implement X connections over serial lines. There is a follow-on to Xremote called LBX [6], but it is still in the design stage.
Reference: [5] <author> Danskin, John and Pat Hanrahan, </author> <title> "Profiling the X Protocol," </title> <booktitle> submitted to 1994 Sigmetrics Conference on Measurement and Modeling of Computer Systems. </booktitle>
Reference-contexts: A summary of the traces is presented in Table 1. Motivation for the selection of these traces, the trace gathering methodology, and an analysis of the contents of the traces can be found in our previous work on profiling the X protocol <ref> [5] </ref>. According to our traces, Xremote's overall compression ratio is 2.4:1. This figure varies widely depending on the trace. A study of compression ratio as a function of message type shows text based messages commonly achieving 3:1 compression, while geometric messages usually achieve only 1.6:1 compression. <p> The pseudo server multiplexes messages on multiple connections by using three additional messages: 1. NEWSTREAM 2. CLOSESTREAM 3. CHANGESTREAM These three extra messages are sufficient to manage the multiplexing and demultiplexing tasks. this category <ref> [5] </ref>. Incoming messages are compared to cached messages of the same length. If there are fewer than 8 differing bytes, then a difference message is output instead of the original message, as long as the difference message is not longer than the original message. <p> Table 1: We collected traces of complete X sessions by interposing a logging process XTee on the network between client and server. XTee and the traces are described fully in <ref> [5] </ref>. Our simulator optionally disables these stages so that we can measure LZW compression as a function of message type. <p> Table 2 shows the result of our experiment with chunking and coalescing. Chunking and coalescing almost never have a significant impact on compression, probably because most messages, and even most groups of messages eligible for coalescing are smaller than the chunking theshold of 108 bytes <ref> [5] </ref>. Overall Compression Table 2 also has data on overall compression efficiency. On average, client data compressed to 44% of its original size while server data compressed to about 28% of its original size. <p> For details of the categories see <ref> [5] </ref>. The top graph shows how well the delta compactor works by itself, the middle graph shows how well the LZW encoder works by itself, and the bottom graph shows how well they work together. <p> performance resulting from coalescing messages after delta compaction, or from breaking messages into maximum sized chunks, or both is not significant. (Averages are unweighted.) Because the X protocol defines so many different types of messages (156 by our count), we divided the different types of messages into 6 major categories <ref> [5] </ref>: 1. Geometry: line drawing, polygons, etc. 2. Image: image and cursor manipulation. 3. Misc: access control, the bell, errors, X extensions, and IPC facilities such as cut and paste. 4. Text: character drawing and font manipulation. 5.
Reference: [6] <author> Fulton Jim, and Chris Kent Kantarjiev, </author> <title> "An update on low bandwidth X (LBX)," </title> <booktitle> Proceedings of the 7th Annual X Technical Conference, </booktitle> <month> January </month> <year> 1993, </year> <institution> O'Reilly and Associates. </institution>
Reference-contexts: This is the case for X connections using normal telephone service, ISDN, and even sometimes ethernet. Xremote [4] is a transformation of the X protocol designed (by NCD) as a way to efficiently implement X connections over serial lines. There is a follow-on to Xremote called LBX <ref> [6] </ref>, but it is still in the design stage. In this paper, we will study the performance of the Xremote protocol with the aim of finding opportunities for further compression. <p> The dash-dot graph at the tip-top shows the compression ratio as a function of time. 9 5 Discussion In our view, Xremote just scratches the surface of what is possible in graphics protocol compression. We would like to see reply caching, better image compression (both proposed in <ref> [6] </ref>), better geometric compression, and a way to take advantage of message structure. Just as file compression makes disks bigger, network compression enhances network bandwidth.
Reference: [7] <author> Gettys Jim, Phil Karlton, and Scott McGregor, </author> <title> "The X Window System, Version 11," </title> <journal> Software Practice and Experience vol. </journal> <volume> 20, no. S2, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Window systems provide an abstraction for the display screen, and arbitrate between applications competing for display space. The X Window System version 11 <ref> [7] </ref> (usually known as X11 or just X) also provides network transparency. Network transparency decouples the application's user interface from its computer without application intervention.
Reference: [8] <author> Thomas, S. W., J. McKie, S. Davies, K. Turkowski, J. A. Woods, and J. W. Orost. </author> <title> "Compress (version 4.0) program and documentation," </title> <note> available from joe@petsd.uucp, </note> <year> 1985. </year>
Reference-contexts: If there are fewer than 8 differing bytes, then a difference message is output instead of the original message, as long as the difference message is not longer than the original message. The LZW coder [9] is modified so that pointers have varying size as in the LZC scheme <ref> [8] </ref>. The protocol allows for varying dictionary and pointer sizes, but only 4096 entry dictionaries and pointers up to 12 bits are supported. The dictionary is cleared and rebuilt from scratch whenever it fills, allowing the coder to adapt to changing data.
Reference: [9] <author> Welch, T. A., </author> <title> "A technique for high-performance data compression," </title> <journal> IEEE Computer, </journal> <volume> 17 (6), </volume> <pages> 8-19, </pages> <month> June </month> <year> 1984. </year> <month> 10 </month>
Reference-contexts: Incoming messages are compared to cached messages of the same length. If there are fewer than 8 differing bytes, then a difference message is output instead of the original message, as long as the difference message is not longer than the original message. The LZW coder <ref> [9] </ref> is modified so that pointers have varying size as in the LZC scheme [8]. The protocol allows for varying dictionary and pointer sizes, but only 4096 entry dictionaries and pointers up to 12 bits are supported.
References-found: 9

