URL: http://www.isi.edu/sims/papers/95-sage.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: Email: knoblock@isi.edu  
Title: Planning, Executing, Sensing, and Replanning for Information Gathering  
Author: Craig A. Knoblock 
Note: To appear in the Proceedings of the Fourteenth International Joint Conference on  
Address: 4676 Admiralty Way Marina del Rey, CA 90292  Montreal, Canada, 1995.  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  Artificial Intelligence,  
Abstract: Current specialized planners for query processing are designed to work in local, reliable, and predictable environments. However, a number of problems arise in gathering information from large networks of distributed information. In this environment, the same information may reside in multiple places, actions can be executed in parallel to exploit distributed resources, new goals come into the system during execution, actions may fail due to problems with remote databases or networks, and sensing may need to be interleaved with planning in order to formulate efficient queries. We have developed a planner called Sage that addresses the issues that arise in this environment. This system integrates previous work on planning, execution, replanning, and sensing and extends this work to support simultaneous and interleaved planning and execution. Sage has been applied to the problem of information gathering to provide a flexible and efficient system for integrat ing heterogeneous and distributed data.
Abstract-found: 1
Intro-found: 1
Reference: [ Ambros-Ingerson, 1987 ] <author> Jose Ambros-Ingerson. IPEM: </author> <title> Integrated Planning, Execution, and Monitoring. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Essex, </institution> <year> 1987. </year>
Reference-contexts: The planner, which we call Sage, was implemented by augmenting ucpop [ Penberthy and Weld, 1992; Barrett et al., 1993 ] with the capabilities to produce parallel execution plans [ Wilkins, 1984; Knoblock, 1994 ] , interleave planning and execution <ref> [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] </ref> , support run-time variables for sensing [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] , perform replanning where appropriate, and plan for new goals as they arise. <p> call Sage, was implemented by augmenting ucpop [ Penberthy and Weld, 1992; Barrett et al., 1993 ] with the capabilities to produce parallel execution plans [ Wilkins, 1984; Knoblock, 1994 ] , interleave planning and execution [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] , support run-time variables for sensing <ref> [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] </ref> , perform replanning where appropriate, and plan for new goals as they arise. We have integrated all of these capabilities into a single, unified system in which planning, sensing, and replanning can be performed during execution. <p> Sage keeps track of the current status of every action in the plan by marking them as either unexecuted, executing, completed, or failed. This is similar to how execution was integrated into ipem <ref> [ Ambros-Ingerson, 1987 ] </ref> . The underlying planner, ucpop, maintains a list of flaws, which is an agenda of things that need to be done to complete a particular plan. <p> This constraint prevents the replanned move action from being executed until this other action completes. 4.3 Sensing to Plan Integrating planning and execution allows the system to interleave sensing actions with the planning. Earlier work on sensing in planning <ref> [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] </ref> proposed the idea of incorporating run-time variables in the planner to allow the planner to reason about the sensed information.
Reference: [ Arens et al., 1993 ] <author> Yigal Arens, Chin Y. Chee, Chun-Nan Hsu, and Craig A. Knoblock. </author> <title> Retrieving and integrating data from multiple information sources. </title> <journal> International Journal on Intelligent and Cooperative Information Systems, </journal> <volume> 2(2) </volume> <pages> 127-158, </pages> <year> 1993. </year>
Reference-contexts: For example, Table 1 illustrates a goal which specifies that the set of data be sent to the output device of the sims information mediator <ref> [ Arens et al., 1993; Knoblock et al., 1994 ] </ref> . The goal also specifies the data to be retrieved and is defined using the syntax of the query language of the Loom knowledge representation system [ MacGregor, 1990 ] . <p> However, the basic architecture is quite general and has been demonstrated in a real-world application. Sage serves as the underlying query planner for the sims information mediator <ref> [ Arens et al., 1993; Knoblock et al., 1994 ] </ref> . The goal of sims is to provide flexible and efficient access to large numbers of information sources. We have implemented the planning, execution, replan-ning, and sensing as described in this paper.
Reference: [ Barrett et al., 1993 ] <author> Anthony Barrett, Keith Golden, Scott Penberthy, and Daniel Weld. </author> <note> UCPOP user's manual (version 2.0). Technical Report 93-09-06, </note> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1993. </year>
Reference-contexts: To address these problems, we have developed a planning system that builds on previous work on planning, execution, sensing, and replanning. The planner, which we call Sage, was implemented by augmenting ucpop <ref> [ Penberthy and Weld, 1992; Barrett et al., 1993 ] </ref> with the capabilities to produce parallel execution plans [ Wilkins, 1984; Knoblock, 1994 ] , interleave planning and execution [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] , support run-time variables for sensing [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] <p> Retrieving the information may be time consuming due to the distribution of data and the contention for limited resources. To solve this problem, we have developed a planner called Sage that builds on the ucpop partial-order plan-ner <ref> [ Barrett et al., 1993 ] </ref> . ucpop provides an expressive operator language that includes conjunction, negation, disjunction, existential and universal quantifiers, conditional effects, and a functional interface that allows preconditions to be implemented as Lisp functions.
Reference: [ Beetz and McDermott, 1992 ] <author> Michael Beetz and Drew McDermott. </author> <title> Declarative goals in reactive plans. </title> <booktitle> In Artificial Intelligence Planning Systems: Proceedings of the First International Conference (AIPS92), </booktitle> <pages> pages 3-12, </pages> <address> College Park, MD, </address> <year> 1992. </year>
Reference-contexts: Also, there will be no local processing, so the result can be sent directly to the output. 5 Related Work There are a variety of systems that have tightly integrated planning with some combination of execution, sensing, and replanning. There is work on reactive planning (e.g., <ref> [ Firby, 1987; Beetz and McDermott, 1992 ] </ref> ), which emphasizes the ability to react to unexpected situations rather than assume that a plan will usually work.
Reference: [ Etzioni and Weld, 1994 ] <author> Oren Etzioni and Daniel S. Weld. </author> <title> A softbot-based interface to the Internet. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <year> 1994. </year>
Reference-contexts: The other aspect to this work is the application of the planner to the problem of information gathering. The xii planner [ Etzioni et al., 1994 ] , which is used in the Unix Softbot <ref> [ Etzioni and Weld, 1994 ] </ref> , also supports execution and sensing for information gathering. Compared to Sage, the Softbot reasons about the information at a different level of granularity. Instead of representing general actions for manipulating data, each operator corresponds to a Unix command.
Reference: [ Etzioni et al., 1992 ] <author> Oren Etzioni, Steve Hanks, Daniel Weld, Denise Draper, Neal Lesh, and Mike Williamson. </author> <title> An approach to planning with incomplete information. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 115-125, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: call Sage, was implemented by augmenting ucpop [ Penberthy and Weld, 1992; Barrett et al., 1993 ] with the capabilities to produce parallel execution plans [ Wilkins, 1984; Knoblock, 1994 ] , interleave planning and execution [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] , support run-time variables for sensing <ref> [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] </ref> , perform replanning where appropriate, and plan for new goals as they arise. We have integrated all of these capabilities into a single, unified system in which planning, sensing, and replanning can be performed during execution. <p> This constraint prevents the replanned move action from being executed until this other action completes. 4.3 Sensing to Plan Integrating planning and execution allows the system to interleave sensing actions with the planning. Earlier work on sensing in planning <ref> [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] </ref> proposed the idea of incorporating run-time variables in the planner to allow the planner to reason about the sensed information.
Reference: [ Etzioni et al., 1994 ] <author> Oren Etzioni, Keith Golden, and Dan Weld. </author> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Fourth International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> Bonn, Germany, </address> <year> 1994. </year>
Reference-contexts: The planner, which we call Sage, was implemented by augmenting ucpop [ Penberthy and Weld, 1992; Barrett et al., 1993 ] with the capabilities to produce parallel execution plans [ Wilkins, 1984; Knoblock, 1994 ] , interleave planning and execution <ref> [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] </ref> , support run-time variables for sensing [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] , perform replanning where appropriate, and plan for new goals as they arise. <p> The other aspect to this work is the application of the planner to the problem of information gathering. The xii planner <ref> [ Etzioni et al., 1994 ] </ref> , which is used in the Unix Softbot [ Etzioni and Weld, 1994 ] , also supports execution and sensing for information gathering. Compared to Sage, the Softbot reasons about the information at a different level of granularity.
Reference: [ Firby, 1987 ] <author> R. James Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> pages 202-206, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: Also, there will be no local processing, so the result can be sent directly to the output. 5 Related Work There are a variety of systems that have tightly integrated planning with some combination of execution, sensing, and replanning. There is work on reactive planning (e.g., <ref> [ Firby, 1987; Beetz and McDermott, 1992 ] </ref> ), which emphasizes the ability to react to unexpected situations rather than assume that a plan will usually work.
Reference: [ Hanks and Weld, 1992 ] <author> Steven Hanks and Daniel S. Weld. </author> <title> The systematic plan adaptor: A formal foundation for case-based planning. </title> <type> Technical Report 92-09-04, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <year> 1992. </year>
Reference-contexts: This replanning can be performed while other unaffected actions continue to execute. A more complete replanning capability could be incorporated by using the approach developed in the Systematic Plan Adaptor (SPA) <ref> [ Hanks and Weld, 1992 ] </ref> , which systematically searches the space of plan modifications. In the information gathering domain, the ability to replan upon failure can be exploited to handle query failures by redirecting a query to a different informa 5 tion source.
Reference: [ Jarke and Koch, 1984 ] <author> Matthias Jarke and Jurgen Koch. </author> <title> Query optimization in database systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 111-152, </pages> <year> 1984. </year>
Reference-contexts: The disadvantage is that it would be impractical to efficiently reason about and manipulate large amounts of information. Information gathering is also similar to conventional query processing in databases. These systems generate a query access plan and then execute it <ref> [ Jarke and Koch, 1984 ] </ref> .
Reference: [ Knoblock and Levy, 1995 ] <author> Craig A. Knoblock and Alon Levy. </author> <title> Exploiting run-time information for efficient processing of queries. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Information Gathering in Distributed Heterogeneous Environments, </booktitle> <address> Palo Alto, CA, </address> <year> 1995. </year>
Reference-contexts: Second, the run-time variables also can be used to retrieve information which is then used in the selection of the most appropriate information sources. We have already implemented the first use, which is described below, and we investigate the second in <ref> [ Knoblock and Levy, 1995 ] </ref> . The capability for gathering information to use in the formulation of another query can be added to the system by adding two more operators to the domain, shown in Table 5.
Reference: [ Knoblock et al., 1994 ] <author> Craig Knoblock, Yigal Arens, and Chun-Nan Hsu. </author> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proceedings of the Second International Conference on Cooperative Information Systems, </booktitle> <address> Toronto, Canada, </address> <year> 1994. </year>
Reference-contexts: For example, Table 1 illustrates a goal which specifies that the set of data be sent to the output device of the sims information mediator <ref> [ Arens et al., 1993; Knoblock et al., 1994 ] </ref> . The goal also specifies the data to be retrieved and is defined using the syntax of the query language of the Loom knowledge representation system [ MacGregor, 1990 ] . <p> However, the basic architecture is quite general and has been demonstrated in a real-world application. Sage serves as the underlying query planner for the sims information mediator <ref> [ Arens et al., 1993; Knoblock et al., 1994 ] </ref> . The goal of sims is to provide flexible and efficient access to large numbers of information sources. We have implemented the planning, execution, replan-ning, and sensing as described in this paper.
Reference: [ Knoblock, 1994 ] <author> Craig A. Knoblock. </author> <title> Generating parallel execution plans with a partial-order planner. </title> <booktitle> In Proceedings of the Second International Conference on Artificial Intelligence Planning Systems, </booktitle> <address> Chicago, IL, </address> <year> 1994. </year>
Reference-contexts: The planner, which we call Sage, was implemented by augmenting ucpop [ Penberthy and Weld, 1992; Barrett et al., 1993 ] with the capabilities to produce parallel execution plans <ref> [ Wilkins, 1984; Knoblock, 1994 ] </ref> , interleave planning and execution [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] , support run-time variables for sensing [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] , perform replanning where appropriate, and plan for new goals as they arise. <p> We extended this planner to support simultaneous action execution and to tightly integrate planning and execution. The execution is presented in the next section, and the support for simultaneous actions was previously addressed in <ref> [ Knoblock, 1994 ] </ref> and will be briefly described here. Partial-order planners, such as ucpop, produce plans with actions that are unordered. However, if two actions are left unordered they can be executed in either order, but not simultaneously.
Reference: [ MacGregor, 1990 ] <author> Robert MacGregor. </author> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In John Sowa, editor, </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: The goal also specifies the data to be retrieved and is defined using the syntax of the query language of the Loom knowledge representation system <ref> [ MacGregor, 1990 ] </ref> . This particular query requests all port names of seaports that are sufficiently deep to accommodate "breakbulk" ships. The initial state of a problem defines the available information sources (e.g., databases) and the servers (e.g., an Oracle DBMS) they are running on.
Reference: [ Olawsky and Gini, 1990 ] <author> Duane Olawsky and Maria Gini. </author> <title> Deferred planning and sensor use. </title> <booktitle> In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pages 166-174, </pages> <address> San Diego, CA, </address> <year> 1990. </year>
Reference: [ Penberthy and Weld, 1992 ] <author> J. Scott Penberthy and Daniel S. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 189-197, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: To address these problems, we have developed a planning system that builds on previous work on planning, execution, sensing, and replanning. The planner, which we call Sage, was implemented by augmenting ucpop <ref> [ Penberthy and Weld, 1992; Barrett et al., 1993 ] </ref> with the capabilities to produce parallel execution plans [ Wilkins, 1984; Knoblock, 1994 ] , interleave planning and execution [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] , support run-time variables for sensing [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ]
Reference: [ Selinger et al., 1988 ] <author> P. Griffiths Selinger, M.M. Astra-han, D.D. Chamberlin, R.A. Lorie, and T.G. Price. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Artificial Intelligence and Databases, </booktitle> <pages> pages 511-522. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1988. </year>
Reference-contexts: Once the final set of data has been generated, it is sent to the output. The approach of searching the space of plans to find the best one is similar to what is done in other systems for producing query plans for relational databases <ref> [ Selinger et al., 1988 ] </ref> . These systems typically generate the space of query access plans, constraining the space of plans with appropriate domain-specific heuristics, and then evaluate the plans and select the best one.
Reference: [ Wilkins, 1984 ] <author> David E. Wilkins. </author> <title> Domain-independent planning: Representation and plan generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22(3) </volume> <pages> 269-301, </pages> <year> 1984. </year> <month> 8 </month>
Reference-contexts: The planner, which we call Sage, was implemented by augmenting ucpop [ Penberthy and Weld, 1992; Barrett et al., 1993 ] with the capabilities to produce parallel execution plans <ref> [ Wilkins, 1984; Knoblock, 1994 ] </ref> , interleave planning and execution [ Ambros-Ingerson, 1987; Etzioni et al., 1994 ] , support run-time variables for sensing [ Ambros-Ingerson, 1987; Etzioni et al., 1992 ] , perform replanning where appropriate, and plan for new goals as they arise.
References-found: 18

