URL: http://www.cs.ucla.edu/~stott/ge/CSD-950038.ps.Z
Refering-URL: http://www.cs.ucla.edu/~stott/ge/
Root-URL: http://www.cs.ucla.edu
Title: Input randomization and automatic derivation of systolic arrays for matrix computations  
Author: Dinh L^e D. Stott Parker Brad Pierce 
Address: Los Angeles, CA 90095-1596, USA  
Affiliation: Computer Science Department, UCLA School of Engineering and Applied Science  
Abstract: Many standard matrix algorithms are difficult to implement as systolic arrays, because they involve data movement that cannot be determined a priori, resulting in high timing complexity. In the case of dense matrix inversion, Gaussian elimination (GE) with pivoting has largely been supplanted by alternative schemes, such as Givens rotations and the Gram-Schmidt method, which are costly and complex, and the simpler GE with pairwise pivoting and GE without pivoting, which can break down on "degenerate" inputs, i.e., invertible matrices with noninvertible submatrices. A new input randomization technique efficiently transforms the linear problem Ax = b into the randomized problem (VA)x = (V b), where the matrix V is chosen from a special class of random matrices. If A is nonsingular, then, with probability 1, GE without pivoting can be successfully applied to VA. As is demonstrated by an extended tutorial example, this simple algorithm is amenable to current-generation matrix algorithm compilers, such as UCLA's Mamacg system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.M. Gentleman and H.T. Kung. </author> <title> Matrix triangularization by systolic arrays. </title> <booktitle> Proceedings of the SPIE The International Society for Optical Engineering, </booktitle> <volume> 298:19 15 26, </volume> <month> August </month> <year> 1981. </year>
Reference-contexts: This entails data movement that cannot be determined a priori and amounts to a dynamically constructed permutation of the original problem. The overhead of pivoting is high: Megson [4, p.199] notes that "These new designs are based on extensions to the triangular arrays of Gentleman and Kung <ref> [1] </ref> and require O (n 2 ) time and O (n 2 ) cells to implement partial pivoting. <p> While Givens rotations and Gram-Schmidt require costly and complex computations, ordinary GE without pivoting and matrix triangularization with pairwise pivoting 1 <ref> [1] </ref> fail to handle a common kind of degeneracy: an invertible input matrix with a leading principal submatrix that is not invertible. <p> After explaining our input randomization technique, we give an extended tutuorial example of the derivation, using UCLA's Mamacg software [3], of a systolic rank-4 GE 1 The pairwise pivoting scheme was used in <ref> [1] </ref> mainly to avoid global communication and to improve numerical stability. 2 architecture for solving systems of linear equations. 1.2 Related Literature There is an extensive literature [10] on the design of systolic arrays for the direct solution of dense systems of linear equations, and, more generally, for the solution of <p> In [8] we discuss roundoff errors resulting under randomization. Although it is possible to derive bounds for the backwards error in terms of determinants of matrix elements, the randomized version of Gaussian elimination is less stable than that with pivoting. It is possible that pairwise pivoting <ref> [1] </ref> would be ameliorative in practice. However, ultimately a statistical error analysis like that in [11] is needed to test any variant of Gaussian elimination.
Reference: [2] <author> H.T. Kung. </author> <title> Why systolic architectures? Computer, </title> <booktitle> 15(1) </booktitle> <pages> 37-46, </pages> <month> January </month> <year> 1982. </year>
Reference-contexts: 1 Introduction Systolic architectures were popularized by Kung <ref> [2] </ref>. Many techniques have been developed since to exploit their regularity and potential for massive parallelism. The heart of a systolic system is a regular network of processors such as the 4 fi 4 mesh array shown in Figure 1.
Reference: [3] <author> D. L^e, M. Ercegovac, T. Lang, and J. Moreno. MAMACG: </author> <title> a tool for automatic mapping of matrix algorithms onto mesh array computational graphs. </title> <editor> In J. Fortes, E. Lee, and T. Meng, editors, </editor> <booktitle> Proceedings of the International Conference on Application Specific Array Processors, </booktitle> <pages> pages 511-525. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1992. </year>
Reference-contexts: After explaining our input randomization technique, we give an extended tutuorial example of the derivation, using UCLA's Mamacg software <ref> [3] </ref>, of a systolic rank-4 GE 1 The pairwise pivoting scheme was used in [1] mainly to avoid global communication and to improve numerical stability. 2 architecture for solving systems of linear equations. 1.2 Related Literature There is an extensive literature [10] on the design of systolic arrays for the direct <p> Since the ODGs for rank-3 ordinary GE and 11 12 13 back-substitution do not contain bidirectional flow, their MMGs are their ODGs. ODGs of other systolic algorithms contain bidirectional flows, and these must be removed. Interested readers should consult <ref> [3] </ref> for details. Since the resulting upper triangular matrix U and the intermediate vector y generated by ordinary GE is passed to back-substitution as input, ordinary GE can be composed with back-substitution to form one MMG that solves systems of linear equations.
Reference: [4] <author> G.M. Megson. </author> <title> A systolic helix for matrix triangularisation with partial pivoting. </title> <journal> Parallel Computing, </journal> <volume> 14(2) </volume> <pages> 199-206, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This entails data movement that cannot be determined a priori and amounts to a dynamically constructed permutation of the original problem. The overhead of pivoting is high: Megson <ref> [4, p.199] </ref> notes that "These new designs are based on extensions to the triangular arrays of Gentleman and Kung [1] and require O (n 2 ) time and O (n 2 ) cells to implement partial pivoting.
Reference: [5] <author> G.M. Megson. </author> <title> A fast Faddeev array. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(12) </volume> <pages> 1594-1600, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: By using suitable inputs, a Faddeev array can be flexibly used for a variety of computations, e.g., setting D = 0 and C = I yields A 1 B. Although Faddeev arrays are often said to implement "Faddeev's algorithm", according to Megson <ref> [5, p. 1594] </ref> this algorithm is "just a special case of dense matrix triangularization without pivoting". Perhaps the confusion stems from the fact that in Faddeeva's classic Computational Methods of Linear Algebra (1959) she discusses both Schur complements (x14) and the Souriau-Frame-Faddeev algorithm (x25). Megson [5, p. 1594] contrasts the Schur <p> "Faddeev's algorithm", according to Megson <ref> [5, p. 1594] </ref> this algorithm is "just a special case of dense matrix triangularization without pivoting". Perhaps the confusion stems from the fact that in Faddeeva's classic Computational Methods of Linear Algebra (1959) she discusses both Schur complements (x14) and the Souriau-Frame-Faddeev algorithm (x25). Megson [5, p. 1594] contrasts the Schur complement and algebraic path problem approaches: "Faddeev's algorithm is ... of interest because of its generality in solving a range of linear algebra problems (e.g., solution for multiple right-hand sides, matrix-matrix, matrix-vector products, Schur's complement of a matrix, and matrix inversion).
Reference: [6] <author> G.M. Megson. </author> <title> An introduction to systolic algorithm design. </title> <publisher> Oxford science publications. Oxford University Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Megson's Introduction to Systolic Algorithm Design (1992) <ref> [6] </ref> is a good survey, emphasizing application and performance. An important subliterature has grown up around so-called Faddeev arrays, which compute Schur complements.
Reference: [7] <author> J.H. Moreno and T. Lang. </author> <title> Matrix computations on systolic-type meshes: an introduction to the multimesh graph method. </title> <journal> Computer, </journal> <volume> 23(4) </volume> <pages> 32-51, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The derivation of the ODGs for rank-3 ordinary GE and back-substitution are shown in Figure 7 and Figure 8, respectively. 4.3 Transforming MMG to Systolic Computational Graphs As the basis for efficient mesh array designs, the MMG method <ref> [7] </ref> introduces a 3D multimesh graph representation, the MMG. To obtain the MMG from the corresponding ODG, bidirectional flows must be removed. Since the ODGs for rank-3 ordinary GE and 11 12 13 back-substitution do not contain bidirectional flow, their MMGs are their ODGs. <p> M 2 contains nodes located at h1; 2; 1i, h2; 2; 1i, and h3; 2; 1i; and cell M 3 contains nodes located at h1; 3; 1i, h2; 3; 1i and h3; 3; 1i. rectangular prism affect the performance and cost of the derived systolic computational graph, as discussed in <ref> [7] </ref>. 5 Summary It is known that systolic systems for solving Gaussian Elimination (GE) that include pivoting have much higher timing complexity than their nonpivoting counterparts. It is also known that among alternative techniques, Givens rotations and Gram-Schmidt require costly and complex computations.
Reference: [8] <author> D.S. Parker. </author> <title> Random butterfly transformations with applications in computational linear algebra. </title> <type> Technical Report CSD-950023, </type> <institution> UCLA Computer Science Department, </institution> <year> 1995. </year>
Reference-contexts: In this paper, we survey our recent results <ref> [8, 9] </ref> showing that input randomization can be a general tool for regularizing array computations, and demonstrate that this simplification makes practical the semi-automated construction of systolic arrays (and other regular parallel architectures) for important applications in numerical linear algebra. <p> The algorithm is simple, however, and handles all matrices except those lacking distinct eigenvalues. We suspect, but have not yet proved, that our randomization scheme can also remove this form of degeneracy. 2 A Randomization Technique The randomization technique was pioneered in <ref> [8] </ref>. The particular variant we describe here is developed in [9]. Let us sketch the idea of this randomizing linear transformation, and how it can be used. 2.1 The Basic Idea Let A be a nonsingular n fi n matrix and V be a random n fi n matrix. <p> So we need not specifically rely on the FFT, but can use any implementation of the DFT F n . The RDFT has the drawback that it requires complex arithmetic for n &gt; 2. In <ref> [8] </ref> a related transform, called the Random Butterfly Transform (RBT), is described that has essentially the same computational graph as the RFFT, but enables the use of real arithmetic for real inputs. 4 We have used the FFT here since most readers are probably familiar with it, and it has many <p> In <ref> [8] </ref> we discuss roundoff errors resulting under randomization. Although it is possible to derive bounds for the backwards error in terms of determinants of matrix elements, the randomized version of Gaussian elimination is less stable than that with pivoting.
Reference: [9] <author> D.S. Parker and B. Pierce. </author> <title> The randomizing fft: an alternative to pivoting in Gaussian elimination. </title> <type> Technical Report CSD-950037, </type> <institution> UCLA Computer Science Department, </institution> <year> 1995. </year>
Reference-contexts: In this paper, we survey our recent results <ref> [8, 9] </ref> showing that input randomization can be a general tool for regularizing array computations, and demonstrate that this simplification makes practical the semi-automated construction of systolic arrays (and other regular parallel architectures) for important applications in numerical linear algebra. <p> We suspect, but have not yet proved, that our randomization scheme can also remove this form of degeneracy. 2 A Randomization Technique The randomization technique was pioneered in [8]. The particular variant we describe here is developed in <ref> [9] </ref>. Let us sketch the idea of this randomizing linear transformation, and how it can be used. 2.1 The Basic Idea Let A be a nonsingular n fi n matrix and V be a random n fi n matrix. <p> Simply multiplying by an arbitrary random matrix will achieve the first goal. However, this multiplication will be expensive, requiring more time than Gaussian Elimina tion itself. Furthermore, multiplying by poorly-conditioned random matrices can cause serious loss of numerical accuracy. 2.4 The Random DFT and FFT In <ref> [9] </ref> we describe a specific randomizing transform that is both efficient and has the property that, for any nonsingular matrix A, the transform of A is Gauss eliminable with probability 1. Thus, with extremely high probability, Gaussian elimination will succeed. <p> The RDFT can be used to implement Gaussian Elimination without pivoting: Theorem The RDFT yields Gauss eliminable matrices. That is, with probability 1, Gaussian elimination can operate without any pivoting on e A = VA, the result of the RDFT. The proof, presented in <ref> [9] </ref>, shows that leading principal submatrices of e A are almost always nonsingular.
Reference: [10] <author> Y. Robert. </author> <title> Solving dense linear systems on systolic architectures. </title> <editor> In E.F. Depret-tere and A.-J. Van Der Veen, editors, </editor> <booktitle> Algorithms and parallel VLSI architectures: lectures and tutorials presented at the International Workshop 1990, volume A, </booktitle> <pages> pages 363-401, </pages> <address> Amsterdam, 1991. </address> <publisher> Elsevier. </publisher>
Reference-contexts: tutuorial example of the derivation, using UCLA's Mamacg software [3], of a systolic rank-4 GE 1 The pairwise pivoting scheme was used in [1] mainly to avoid global communication and to improve numerical stability. 2 architecture for solving systems of linear equations. 1.2 Related Literature There is an extensive literature <ref> [10] </ref> on the design of systolic arrays for the direct solution of dense systems of linear equations, and, more generally, for the solution of the algebraic path problem. Megson's Introduction to Systolic Algorithm Design (1992) [6] is a good survey, emphasizing application and performance.
Reference: [11] <author> L.N. Trefethen and R.S. Schreiber. </author> <title> Average-case stability of Gaussian elimination. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 11(3) </volume> <pages> 335-360, </pages> <year> 1990. </year> <month> 16 </month>
Reference-contexts: It is possible that pairwise pivoting [1] would be ameliorative in practice. However, ultimately a statistical error analysis like that in <ref> [11] </ref> is needed to test any variant of Gaussian elimination. Backwards error analyses give only partial certification of a numerical algorithm. 3 A Randomized Systolic Linear System Solver Let A be an n fi n matrix and b be a vector of size n.
References-found: 11

