URL: http://www.cs.purdue.edu/homes/edm/papers/display1.ps.Z
Refering-URL: http://www.cs.purdue.edu/research/PaCS/display.html
Root-URL: http://www.cs.purdue.edu
Title: DISplay A Visualization and User Interaction Interface for Parallel Simulation Environments  
Author: Edward Mascarenhas Vernon Rego 
Date: 95-016  
Note: CSD TR  Research supported in part by NATO-CRG900108, NSF CCR-9102331, ONR-9310233, and ARO-93G0045.  
Address: West Lafayette, IN 47907  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: An application-independent visualization interaction system is proposed, with potential for application-binding at any stage of the modeling process. Advantages of this approach include ease of use, flexibility, code reuse, and modularity. Our design ideas are manifest in the DISplay system, a graphical user interaction and display library which can be used with any parallel software. We outline its use in the the dynamic display of results from computations in queueing and distributed particle-physics simulations, exemplifying synchronization of multiple remote display requests, and the potential for enhanced parallel simulations. We also describe how it may be used to define customized user interaction dialogs for input from an application, and bi-directional interaction between a user and an application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. C. Bell and R. M. O'Keefe. </author> <title> Visual interactive simulation History, recent develeopments, and major issues. </title> <journal> Simulation, </journal> <volume> 49(3) </volume> <pages> 109-116, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: More recently, researchers have attempted to separate and refine functions associated with VIS and VIM [19]. Details on VIM can be found in <ref> [1, 19] </ref>. In the rest of this paper, we focus our attention on VIS, with special emphasis on parallel and distributed simulation. Early software systems supporting VIS were generally restricted to animations of application components of simulation models. Later, these systems added user interaction capabilities in various forms. <p> of Synchronous dialog */ - char *reply [4]; /* replies placed here */ double dbl, timereply; int ivl; timereply = clock; sQueryReply (sock, &timereply, parm_dialog_id, reply); /* query user */ if ((dbl = atof (reply [0])) &gt; 0.0) iatm = dbl; /* Inter-arrival Time */ if ((dbl = atof (reply <ref> [1] </ref>)) &gt; 0.0) svtm = dbl; /* service time */ if ((ivl = atoi (reply [2])) &gt; 0) ns = ivl; /* number of servers */ if ((ivl = atoi (reply [3])) &gt; 0) nars = ivl; /* number of customers */ sStrPrintMsg (sock, clock, "M/M/n parameters"); sStrPrintMsg (sock, clock, "Service
Reference: [2] <author> K. Chandy and J. Misra. </author> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Trans. on Softw. Eng., </journal> <volume> SE-5(5):440-452, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: The corresponding convenience function for performing 2D plots is sPltPoint2D (). Function 14 #include "sdconsts.h" #include "sdclnt.h" #include "sdutil.h" - /* dialog */ static SdQtnAns qtnans_sync [] = - -"What is your name?", SDSTRING-, -"What is your key?", SDINT-, -; char *reply <ref> [2] </ref>; double timereply=0.0; int i; int histtask; int dialog_task, dialog_sync; int global = 1; /* is a global task */ /* create and initiate a Histogram task */ histtask = sdCreateTask (HISTTASK, window, log, global); sdSetTaskValues (histtask, SdXaxisName, "X- axis", SdYaxisName, "Y- axis", SdTitle, "Particle simulation", SdXmin, 0.0, SdXmax, 20.0 SdYmin, <p> timereply; int ivl; timereply = clock; sQueryReply (sock, &timereply, parm_dialog_id, reply); /* query user */ if ((dbl = atof (reply [0])) &gt; 0.0) iatm = dbl; /* Inter-arrival Time */ if ((dbl = atof (reply [1])) &gt; 0.0) svtm = dbl; /* service time */ if ((ivl = atoi (reply <ref> [2] </ref>)) &gt; 0) ns = ivl; /* number of servers */ if ((ivl = atoi (reply [3])) &gt; 0) nars = ivl; /* number of customers */ sStrPrintMsg (sock, clock, "M/M/n parameters"); sStrPrintMsg (sock, clock, "Service Time %f Inter-Arrival %f Servers %d", svtm, iatm, ns); - int handle_arrival_change (char *reply []) <p> Initiating a time-step while particles are in transit (which can occur if communication time between processors is large) will result in a logic error. The third synchronization mechanism is decentralized, based on a conservative parallel simulation protocol <ref> [2] </ref>. The master process does not play any role in synchronization; instead, time-stamps on migrating particles are used for synchronization. If no particles migrate from a processor, the processor sends null-messages [2] to other processors, thus giving them the necessary time-stamp information. <p> The third synchronization mechanism is decentralized, based on a conservative parallel simulation protocol <ref> [2] </ref>. The master process does not play any role in synchronization; instead, time-stamps on migrating particles are used for synchronization. If no particles migrate from a processor, the processor sends null-messages [2] to other processors, thus giving them the necessary time-stamp information. In this application, a process interacts with only two other processors- those assigned to neighboring slices of the lattice. Because of this, it is sufficient for a processor to synchronize itself with its neighbors.
Reference: [3] <author> N. Collins and C. Watson. </author> <title> Introduction to Arena. </title> <editor> In G. Evans, M. Mollaghasemi, E. Russell, and W. Biles, editors, </editor> <booktitle> Winter Simulation Conference, </booktitle> <pages> pages 205-212, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Early software systems supporting VIS were generally restricted to animations of application components of simulation models. Later, these systems added user interaction capabilities in various forms. More recent systems supporting VIS include WITNESS [23] which also allows interactive model building, Cinema [7] and Arena <ref> [3] </ref> which are used with the SIMAN simulation language, providing real-time or post-processed animation and building of a model, SIMSCRIPT II.5 [20] a language which provides an integrated graphical interface called SIMGRAPHICS, and TESS [17, 15] a system associated with the SLAM simulation language, with facilities for graphical model building, analyzing, <p> ((dbl = atof (reply [0])) &gt; 0.0) iatm = dbl; /* Inter-arrival Time */ if ((dbl = atof (reply [1])) &gt; 0.0) svtm = dbl; /* service time */ if ((ivl = atoi (reply [2])) &gt; 0) ns = ivl; /* number of servers */ if ((ivl = atoi (reply <ref> [3] </ref>)) &gt; 0) nars = ivl; /* number of customers */ sStrPrintMsg (sock, clock, "M/M/n parameters"); sStrPrintMsg (sock, clock, "Service Time %f Inter-Arrival %f Servers %d", svtm, iatm, ns); - int handle_arrival_change (char *reply []) /* handle mean inter-arrival */ - /* reply contains user input */ float new_iatm; char **send_reply;
Reference: [4] <author> D. Comer and D. L. Stevens. </author> <title> Internetworking with TCP/IP, </title> <booktitle> volume III:Client-Server Programming and Applications. </booktitle> <address> Englewood Cliffs, N.J. </address> : <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: We conclude in Section 6, discussing the contributions of this work, aspects of its limitations and ideas for future work. 2 The DISplay Architecture The DISplay software architecture is based on the client-server paradigm <ref> [4] </ref>. Here, the simulation application, which is created by an analyst or programmer, is treated as a client. Client calls are made by invoking functions resident in the DISplay client library. <p> static int parm_dialog_id, arr_dialog_id; /* dialog identifiers */ int ds_setup () /* demonstrates setup */ - parm_dialog_id = sdCreateDialogNotask ("M/M/n Parameters", SDMODEL_QUERY, Number (dialog_parm), dialog_parm, NULL); ...; sBeginDialog (sock, clock, parm_dialog_id, arr_dialog_id, "Change Parameters"); return (sock); - get_parameters (int sock) /* demonstrates use of Synchronous dialog */ - char *reply <ref> [4] </ref>; /* replies placed here */ double dbl, timereply; int ivl; timereply = clock; sQueryReply (sock, &timereply, parm_dialog_id, reply); /* query user */ if ((dbl = atof (reply [0])) &gt; 0.0) iatm = dbl; /* Inter-arrival Time */ if ((dbl = atof (reply [1])) &gt; 0.0) svtm = dbl; /* service
Reference: [5] <author> R. Fujimoto. </author> <title> Parallel Discrete Event Simulation. </title> <journal> CACM, </journal> <volume> 33(10) </volume> <pages> 30-53, </pages> <year> 1990. </year>
Reference-contexts: The approach requires some form of state-saving, so that simulation re-execution from a given point is possible. The adaptive approach is a 5 mixture of the optimistic and the conservative approaches. A summary of these approaches can be found in <ref> [5] </ref>. Without loss of generality, we assume that the simulation environment is made up of a cluster of workstations which work collectively to solve a problem. Each workstation may host a variable number of processes. The DS can be used in one of two ways in such a situation.
Reference: [6] <author> T. Gaskins. </author> <title> PEXlib Programming Manual. The Definitive Guides to the X Window System. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Use of DISplay for the display of real-time performance measures in general EcliPSe-based parallel simulations is described in [9]. DISplay has a graphical component that was constructed using OSF/Motif [8], in conjunction with the PEX <ref> [6] </ref> library for 3D graphs. To use DISplay, all that is required is a workstation hosting an X server, with an optional PEX compatibility (for 3D graphs). The rest of the paper is organized as follows.
Reference: [7] <author> M. Glavach and D. Sturrock. </author> <title> Introduction to SIMAN/Cinema. </title> <editor> In G. Evans, M. Mollaghasemi, E. Russell, and W. Biles, editors, </editor> <booktitle> Winter Simulation Conference, </booktitle> <pages> pages 190-192, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Early software systems supporting VIS were generally restricted to animations of application components of simulation models. Later, these systems added user interaction capabilities in various forms. More recent systems supporting VIS include WITNESS [23] which also allows interactive model building, Cinema <ref> [7] </ref> and Arena [3] which are used with the SIMAN simulation language, providing real-time or post-processed animation and building of a model, SIMSCRIPT II.5 [20] a language which provides an integrated graphical interface called SIMGRAPHICS, and TESS [17, 15] a system associated with the SLAM simulation language, with facilities for graphical
Reference: [8] <author> D. Heller. </author> <title> Motif Programming Manual. For OSF/Motif Version 1.1, volume Six of The Definitive Guides to the X Window System. </title> <publisher> O'Reilley & Associates, Inc., </publisher> <address> motif edition, </address> <year> 1991. </year>
Reference-contexts: To get around this, the entire functionality of an interface can be embedded in a high-level library which provides an application developer a tool for rapid interface generation. This is the second approach and is found in tools like Motif <ref> [8] </ref> and Tk [16]. This tack has several advantages. Application developers require no knowledge of the workings of low levels graphics functions. Distinct applications may link to the same library, using a common interface to make distinct application-specific interfaces. <p> Use of DISplay for the display of real-time performance measures in general EcliPSe-based parallel simulations is described in [9]. DISplay has a graphical component that was constructed using OSF/Motif <ref> [8] </ref>, in conjunction with the PEX [6] library for 3D graphs. To use DISplay, all that is required is a workstation hosting an X server, with an optional PEX compatibility (for 3D graphs). The rest of the paper is organized as follows.
Reference: [9] <author> F. Knop, E. Mascarenhas, V. Rego, and V. Sunderam. </author> <title> Fail-Safe Concurrent Simulation with EcliPSe: An introduction. </title> <note> Simulation Practice & Theory (to appear), </note> <year> 1994. </year>
Reference-contexts: Our ideas are manifest in the DISplay system, a graphical user interaction and display library, and associated servers which can be used with any sequential or parallel computation. DISplay was motivated by our studies in Distributed Interactive Simulation on heterogeneous networks <ref> [9] </ref>. The construction of a user-interface for a given application is a nontrivial task, requiring specialized skills. A good interface enhances the ease of use of a software product, often improving a user's productivity significantly. <p> Here we describe two examples of its use one with CSIM, and the other with Conch, which is a message-passing environment for a network of workstations. Use of DISplay for the display of real-time performance measures in general EcliPSe-based parallel simulations is described in <ref> [9] </ref>. DISplay has a graphical component that was constructed using OSF/Motif [8], in conjunction with the PEX [6] library for 3D graphs. To use DISplay, all that is required is a workstation hosting an X server, with an optional PEX compatibility (for 3D graphs). <p> This effort is manifest in the ACES software architecture, a brief overview of which can be found in <ref> [9] </ref>. A first motivation was the need for a general mechanism to display data and perform user interaction in a software layer that made display and interaction functions independent of kernel and communication layers of the ACES system. <p> This graphical interface is common to all DISplay applications. For example, a sample screen dump of an EcliPSe <ref> [13, 9] </ref> Performance Monitoring display is shown in Figure 6. This is a particular use of DISplay for EcliPSe applications. In the figure is shown an example of a network (GRAPHTASK), a histogram task and several asynchronous dialogs. <p> The use of the DS for monitoring of parallel applications in EcliPSe is described in <ref> [9] </ref>. Here we focus on simple examples demonstrating the use of DISplay in general simulations. The first example is that of an M/M/n queueing system. This example shows how user interaction facilities and basic displays are used. Results are displayed using line plots and histograms. <p> These enhancements are currently under way, as part of a larger effort in heterogeneous distributed simulation. This effort is based on the ACES system <ref> [9] </ref>. Support for ACES is planned in the form of debugging, and display of arbitrary simulation objects at different points in time. Visual model building and interface specification for ACES-applications is a long term goal. A critical issue we plan to investigate is performance.
Reference: [10] <author> E. Mascarenhas and V. Rego. </author> <title> DISplay: A technical reference manual. </title> <type> Technical report, </type> <institution> Purdue University, Department of Computer Sciences, </institution> <year> 1994. </year> <note> In preparation. </note>
Reference-contexts: Commands to display output or query the user are then executed. Details on these aspects of the system can be found in <ref> [10] </ref>. 3.1 DISplay Classes A central class, called the controller class, keeps track of all connected processes and their associated channels. It has a predefined maximum number of channels which are setup as each process connects to the DS.
Reference: [11] <author> E. Mascarenhas, V. Rego, and V. Sunderam. </author> <title> Ariadne user manual. </title> <type> Technical report, </type> <institution> Computer Sciences Department, Purdue University, </institution> <year> 1994. </year>
Reference-contexts: The second example involves a simple parallel simulation in particle physics, where particles move about randomly within a 2D grid. What is of interest to the analyst is the dynamics of particle movement and final particle positions. In this example we employ the Ariadne light-weight process library <ref> [11] </ref> and the Conch distributed computing environment [24]. All computing processes work on distinct portions (slices) of the 2D grid, cooperatively sending data to the DS in order to compose a single window display. Each process displays on a specific part of the screen window.
Reference: [12] <author> H. Nakanishi. </author> <title> Anomalous diffusion in disordered clusters. </title> <editor> In P. J. Reynolds, editor, </editor> <title> On clusters and Clustering, From Atoms to Fractals, </title> <booktitle> chapter 27, </booktitle> <pages> pages 373-382. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1993. </year>
Reference-contexts: These phenomena are often modeled as random walks on disordered clusters. The model described below is in essence the one known as the ant in the labyrinth and is due to deGennes <ref> [12] </ref>. The random walker (ant) moves at random only on certain accessible sites of a lattice, where the fraction of accessible sites on the lattice is q, 0 &lt; q &lt; 1. <p> We simulate the movement of the ant for T time-steps and then compute the mean square displacement of the ant. The goal is to find the relation between this displacement and the values of q and T . Details on this model can be found in <ref> [12] </ref>. This example shows how the DISplay system can be used with distributed or parallel applications. Here, DISplay was valuable in verifying program correctness through visual examination of program results, and also in monitoring the performance of different algorithms.
Reference: [13] <author> H. Nakanishi, V. Rego, and V. S. Sunderam. </author> <title> On the effectiveness of superconcurrent computations on heterogeneous networks. </title> <note> Parallel and Distributed Computing (to appear), </note> <year> 1994. </year>
Reference-contexts: It is possible to associate dialogs with nodes and arcs. Clicking on a node or arc with which a dialog is associated, will cause the associated dialog to execute at the DS. For example, in an EcliPSe simulation, processors arrange themselves in a virtual tree-topology <ref> [13] </ref> to perform parallel sampling. This underlying tree configuration of the machines can be displayed by DISplay's Graph Task (see Figure 6). With each node is associated a dialog that displays performance data for that node, causing it to pop up when that particular node is clicked. <p> This graphical interface is common to all DISplay applications. For example, a sample screen dump of an EcliPSe <ref> [13, 9] </ref> Performance Monitoring display is shown in Figure 6. This is a particular use of DISplay for EcliPSe applications. In the figure is shown an example of a network (GRAPHTASK), a histogram task and several asynchronous dialogs.
Reference: [14] <author> R. M. O'Keefe. </author> <title> What is Visual Interactive Simualtion? (And is there a methodology for doing it right?). </title> <booktitle> In Proceedings of the Winter Simulation Conference, </booktitle> <pages> pages 461-464, </pages> <year> 1987. </year> <month> 27 </month>
Reference-contexts: Simple user-interface tools for sequential interactions and displays cannot cater to multiple interactions for distributed applications. 1.1 Visual Interactive Simulation Questions concerning the provision of facilities for user interaction with a running simulation, or for the graphical display of simulations results in real-time are not new. Indeed, O'Keefe <ref> [14] </ref> discusses basic ideas underlying and a methodology for Visual Interactive Simulation (VIS), and Rooks [19] gives a proposal for VIS, outlining general requirements and potentially unifying framework. Requirements delineated in the latter proposal include * Intervention: allowing the initiation of interaction with the simulation model. <p> In early literature on this subject, the term VIS <ref> [14] </ref> was used to include activities which are now generally regarded as components of Visual Interactive Modelling (VIM), where a computer model of the system to be simulated is created. More recently, researchers have attempted to separate and refine functions associated with VIS and VIM [19].
Reference: [15] <author> J. J. O'Reilly. </author> <title> Introduction to SLAM II and SLAMSYSTEM. </title> <editor> In G. Evans, M. Mollaghasemi, E. Russell, and W. Biles, editors, </editor> <booktitle> Winter Simulation Conference, </booktitle> <pages> pages 179-183, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: systems supporting VIS include WITNESS [23] which also allows interactive model building, Cinema [7] and Arena [3] which are used with the SIMAN simulation language, providing real-time or post-processed animation and building of a model, SIMSCRIPT II.5 [20] a language which provides an integrated graphical interface called SIMGRAPHICS, and TESS <ref> [17, 15] </ref> a system associated with the SLAM simulation language, with facilities for graphical model building, analyzing, graphing and animating model results. In this paper we describe the DISplay system, which exhibits all of the requirements of VIS to a large degree. Our terminology follows that provided by Rooks [19].
Reference: [16] <author> J. K. Ousterhout. </author> <title> An X11 Toolkit based on the Tcl language. </title> <booktitle> In Winter USENIX Conference, </booktitle> <pages> pages 105-115, </pages> <year> 1991. </year>
Reference-contexts: To get around this, the entire functionality of an interface can be embedded in a high-level library which provides an application developer a tool for rapid interface generation. This is the second approach and is found in tools like Motif [8] and Tk <ref> [16] </ref>. This tack has several advantages. Application developers require no knowledge of the workings of low levels graphics functions. Distinct applications may link to the same library, using a common interface to make distinct application-specific interfaces.
Reference: [17] <institution> Pritsker and Associates, Inc., West lafayette, </institution> <note> IN 47906. TESS and SLAMII. </note>
Reference-contexts: systems supporting VIS include WITNESS [23] which also allows interactive model building, Cinema [7] and Arena [3] which are used with the SIMAN simulation language, providing real-time or post-processed animation and building of a model, SIMSCRIPT II.5 [20] a language which provides an integrated graphical interface called SIMGRAPHICS, and TESS <ref> [17, 15] </ref> a system associated with the SLAM simulation language, with facilities for graphical model building, analyzing, graphing and animating model results. In this paper we describe the DISplay system, which exhibits all of the requirements of VIS to a large degree. Our terminology follows that provided by Rooks [19].
Reference: [18] <author> V. J. Rego and V. S. Sunderam. </author> <title> Experiments in Concurrent Stochastic Simulation: The EcliPSe Paradigm. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 14(1) </volume> <pages> 66-84, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: A programmer may code an application in a variety of languages, provided these can be interfaced with a C library. We have tested the DISplay tool in a number of different environments, including distributed computing environments such as PVM [22] and Conch [24], the EcliPSe parallel simulation environment <ref> [18] </ref>, and the process-oriented simulation tool CSIM [21]. Here we describe two examples of its use one with CSIM, and the other with Conch, which is a message-passing environment for a network of workstations.
Reference: [19] <author> M. Rooks. </author> <title> A Unified Framework for Visual Interactive Simulation. </title> <booktitle> In Proceedings of the Winter Simulation Conference, </booktitle> <pages> pages 1146-1154, </pages> <year> 1991. </year>
Reference-contexts: Indeed, O'Keefe [14] discusses basic ideas underlying and a methodology for Visual Interactive Simulation (VIS), and Rooks <ref> [19] </ref> gives a proposal for VIS, outlining general requirements and potentially unifying framework. Requirements delineated in the latter proposal include * Intervention: allowing the initiation of interaction with the simulation model. <p> More recently, researchers have attempted to separate and refine functions associated with VIS and VIM <ref> [19] </ref>. Details on VIM can be found in [1, 19]. In the rest of this paper, we focus our attention on VIS, with special emphasis on parallel and distributed simulation. Early software systems supporting VIS were generally restricted to animations of application components of simulation models. <p> More recently, researchers have attempted to separate and refine functions associated with VIS and VIM [19]. Details on VIM can be found in <ref> [1, 19] </ref>. In the rest of this paper, we focus our attention on VIS, with special emphasis on parallel and distributed simulation. Early software systems supporting VIS were generally restricted to animations of application components of simulation models. Later, these systems added user interaction capabilities in various forms. <p> In this paper we describe the DISplay system, which exhibits all of the requirements of VIS to a large degree. Our terminology follows that provided by Rooks <ref> [19] </ref>. Facilities for dynamic visualization of the progress of a simulation in the form of abstract displays like histograms and representative displays like networks are provided. The result is a system which provides a simple scheme for animating general simulations.
Reference: [20] <author> E. C. Russell. </author> <title> Building simulation models with SIMSCRIPT II.5. CACI Products Company, </title> <address> La Jolla, CA, </address> <year> 1989. </year>
Reference-contexts: Later, these systems added user interaction capabilities in various forms. More recent systems supporting VIS include WITNESS [23] which also allows interactive model building, Cinema [7] and Arena [3] which are used with the SIMAN simulation language, providing real-time or post-processed animation and building of a model, SIMSCRIPT II.5 <ref> [20] </ref> a language which provides an integrated graphical interface called SIMGRAPHICS, and TESS [17, 15] a system associated with the SLAM simulation language, with facilities for graphical model building, analyzing, graphing and animating model results.
Reference: [21] <author> H. Schwetman. </author> <title> CSIM Users' Guide. </title> <institution> Microelectronics and Computer Technology Corporation, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: We have tested the DISplay tool in a number of different environments, including distributed computing environments such as PVM [22] and Conch [24], the EcliPSe parallel simulation environment [18], and the process-oriented simulation tool CSIM <ref> [21] </ref>. Here we describe two examples of its use one with CSIM, and the other with Conch, which is a message-passing environment for a network of workstations. Use of DISplay for the display of real-time performance measures in general EcliPSe-based parallel simulations is described in [9]. <p> In this example we fix the mean service time and examine the effect of arrival rate and number of servers n on the measured responses of mean queue size, actual queue size and server utilization. The M/M/n application was developed using the process-oriented simulation language CSIM <ref> [21] </ref>. The multi-server facility is implemented using the facility type in CSIM. This simulation tool also provides functions for computing queue size, mean queue size and utilization, all of which were used to collect data that was subsequently sent to the DS.
Reference: [22] <author> V. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: A programmer may code an application in a variety of languages, provided these can be interfaced with a C library. We have tested the DISplay tool in a number of different environments, including distributed computing environments such as PVM <ref> [22] </ref> and Conch [24], the EcliPSe parallel simulation environment [18], and the process-oriented simulation tool CSIM [21]. Here we describe two examples of its use one with CSIM, and the other with Conch, which is a message-passing environment for a network of workstations.
Reference: [23] <author> W. Thompson. </author> <title> A tutorial for modelling with the WITNESS visual interactive simulator. </title> <editor> In G. Evans, M. Mollaghasemi, E. Russell, and W. Biles, editors, </editor> <booktitle> Winter Simulation Conference, </booktitle> <pages> pages 228-232, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Early software systems supporting VIS were generally restricted to animations of application components of simulation models. Later, these systems added user interaction capabilities in various forms. More recent systems supporting VIS include WITNESS <ref> [23] </ref> which also allows interactive model building, Cinema [7] and Arena [3] which are used with the SIMAN simulation language, providing real-time or post-processed animation and building of a model, SIMSCRIPT II.5 [20] a language which provides an integrated graphical interface called SIMGRAPHICS, and TESS [17, 15] a system associated with
Reference: [24] <author> B. Topol. Conch: </author> <title> Second generation heterogeneous computing. </title> <type> Master's thesis, </type> <institution> Department of Math and Computer Science, Emory University, </institution> <year> 1992. </year>
Reference-contexts: A programmer may code an application in a variety of languages, provided these can be interfaced with a C library. We have tested the DISplay tool in a number of different environments, including distributed computing environments such as PVM [22] and Conch <ref> [24] </ref>, the EcliPSe parallel simulation environment [18], and the process-oriented simulation tool CSIM [21]. Here we describe two examples of its use one with CSIM, and the other with Conch, which is a message-passing environment for a network of workstations. <p> What is of interest to the analyst is the dynamics of particle movement and final particle positions. In this example we employ the Ariadne light-weight process library [11] and the Conch distributed computing environment <ref> [24] </ref>. All computing processes work on distinct portions (slices) of the 2D grid, cooperatively sending data to the DS in order to compose a single window display. Each process displays on a specific part of the screen window.

References-found: 24

