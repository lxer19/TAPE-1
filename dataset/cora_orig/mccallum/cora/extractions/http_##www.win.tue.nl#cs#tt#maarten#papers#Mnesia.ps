URL: http://www.win.tue.nl/cs/tt/maarten/papers/Mnesia.ps
Refering-URL: http://www.win.tue.nl/cs/tt/maarten/
Root-URL: http://www.win.tue.nl
Email: fmaarten,wsstokg@win.tue.nl,  
Phone: Fax +31-40-2468508  
Title: Design issues of an efficient distributed database scheduler for Telecom study of database scheduler performance
Author: M.P. Bodlaender, P.D.V. v.d. Stok 
Note: A theoretical  has been designed.  
Address: P.O. Box 513, 5600 Eindhoven, The Netherlands  
Affiliation: Department of Computing Science, TUE  
Abstract: We optimize the speed of real-time databases by optimizing the scheduler. The performance of a database is directly linked to the environment it operates in, and we use environment characteristics as guidelines for the optimization. A typical Telecom environment is investigated, and characteristics that are relevant to performance are derived. OCC-light is implemented in the Mnesia database. Experiments were conducted to compare OCC-light against the existing Two Phase Locking (2PL) scheduler. OCC-light compared favorably to 2PL, as was already suggested by our theoretical study. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Argante. </author> <title> Concurrency control algorithms on a 20 node sc2000. </title> <type> PhD. Thesis Technical University Eindhoven, </type> <year> 1998. </year>
Reference-contexts: These characteristics are derived from [7] and discussions with members of Ericsson Research Rijen and KPN Research Groningen. In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck <ref> [6, 8, 1] </ref>. Often, research papers ignore scheduler overhead, or accept it as a given fact [12, 11, 3, 17, 5]. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. <p> They are necessary to regulate the interleaving of concurrently executing transactions. In a number of operating systems, synchronization primitives like locks are time-consuming <ref> [2, 1, 8] </ref>. The software implementation of a critical section in the Mnesia database is no exception. To ensure that scheduling information (for Two Phase Locking: lock-queues) is accessed by at most one process at a time, a managing process (a server) is created.
Reference: [2] <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recoveryin Database Systems, </title> <journal> pp. </journal> <volume> 61. </volume> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: They are necessary to regulate the interleaving of concurrently executing transactions. In a number of operating systems, synchronization primitives like locks are time-consuming <ref> [2, 1, 8] </ref>. The software implementation of a critical section in the Mnesia database is no exception. To ensure that scheduling information (for Two Phase Locking: lock-queues) is accessed by at most one process at a time, a managing process (a server) is created.
Reference: [3] <author> A. Bestavros. </author> <title> Speculative concurrency control. </title> <type> Tech. Report BUCS-TR-93-002, </type> <institution> Computer Science Department, Boston University, </institution> <address> MA, </address> <year> 1993. </year>
Reference-contexts: In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck [6, 8, 1]. Often, research papers ignore scheduler overhead, or accept it as a given fact <ref> [12, 11, 3, 17, 5] </ref>. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. A database scheduler (OCC-light) is designed, based on the observations made earlier.
Reference: [4] <author> M. Bodlaender, S. Sassen, P. van der Stok, and J. van der Wal. </author> <title> The response time distribution in a multi-processor database with single queue static locking. </title> <type> COSOR 95-40, </type> <institution> Eindhoven University of Technology, </institution> <year> 1995. </year>
Reference-contexts: In general, the expression given above cannot be exactly computed without intensive analyses, under strict assumptions about the environment. Examples of such studies are <ref> [15, 4, 14] </ref>. 3 Environment study Knowledge of the type and arrival-rate of transactions can be used to fine-tune the scheduler to the particular situation. For instance, in an environment where transactions write to all data items that they access, read-optimizations are of little use.
Reference: [5] <author> P. Franaszek, J. Haritsa, J. Robinson, and A. Thomasian. </author> <title> Distributed concurrency control based on limited wait-depth. </title> <booktitle> In Transactions on Parallel and Distributed Systems, </booktitle> <pages> pages 1246-1264. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck [6, 8, 1]. Often, research papers ignore scheduler overhead, or accept it as a given fact <ref> [12, 11, 3, 17, 5] </ref>. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. A database scheduler (OCC-light) is designed, based on the observations made earlier.
Reference: [6] <author> V. Gottemukkala and T. Lehman. </author> <title> Locking and latching in a memory-resident database system. </title> <booktitle> Proc. of the 18th VLDB Conference, </booktitle> <year> 1992. </year>
Reference-contexts: These characteristics are derived from [7] and discussions with members of Ericsson Research Rijen and KPN Research Groningen. In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck <ref> [6, 8, 1] </ref>. Often, research papers ignore scheduler overhead, or accept it as a given fact [12, 11, 3, 17, 5]. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead.
Reference: [7] <author> W. Jonker and L. Nieuwenhuis. </author> <title> Overview of databases requirements for intelligent networks. </title> <booktitle> Joint Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <address> Santa Barbara, California, </address> <month> april </month> <year> 1995. </year>
Reference-contexts: By tailoring the database scheduler to the application domain, reductions in transaction response time are expected. In section 3 the relevant characteristics of the Telecom environment are investigated. These characteristics are derived from <ref> [7] </ref> and discussions with members of Ericsson Research Rijen and KPN Research Groningen. In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck [6, 8, 1].
Reference: [8] <author> A. Kagi, D. Burger, and J. Goodman. </author> <title> Efficient synchronization: Let them eat qolb. </title> <booktitle> In 24th Ann. Int. Symposium on Computer Architecture, </booktitle> <pages> pages 170-179. </pages> <publisher> ACM, </publisher> <year> 1997. </year>
Reference-contexts: These characteristics are derived from [7] and discussions with members of Ericsson Research Rijen and KPN Research Groningen. In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck <ref> [6, 8, 1] </ref>. Often, research papers ignore scheduler overhead, or accept it as a given fact [12, 11, 3, 17, 5]. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. <p> They are necessary to regulate the interleaving of concurrently executing transactions. In a number of operating systems, synchronization primitives like locks are time-consuming <ref> [2, 1, 8] </ref>. The software implementation of a critical section in the Mnesia database is no exception. To ensure that scheduling information (for Two Phase Locking: lock-queues) is accessed by at most one process at a time, a managing process (a server) is created.
Reference: [9] <author> H. Kung and J. T. Robinson. </author> <title> On optimistic methods for con-currency control. </title> <booktitle> ACM 0362-5915/81/0600-0213, </booktitle> <year> 1981. </year>
Reference-contexts: This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. A database scheduler (OCC-light) is designed, based on the observations made earlier. It turns out to be a distributed version of the OCC-pure scheduler <ref> [9] </ref>, that employs time stamps on data items to implement the validation phase. The design of OCC-light is described in section 7. In section 8.2 we describe the original scheduler (2PL) that has been implemented in Mnesia.
Reference: [10] <author> K. Lam, V. Lee, K. Lam, and S. Hung. </author> <title> Distributed real-time optimistic concurrency control protocol. </title> <booktitle> Workshop on Distributed and Real-Time Systems, </booktitle> <pages> pages 122-125, </pages> <year> 1996. </year>
Reference-contexts: This rule prevents inconsistencies and avoids wait-chains. Furthermore, if we assume that transactions commit 99% of the time (low conflict probability!), the restart-rule is correct and efficient in 99% of all cases. For comparison, distributed OCC variants <ref> [10, 16] </ref> often employ waiting, and an acyclic validation order. In most cases, such waiting transactions have to restart. Furthermore, to implement the acyclic validation order, n + 1 sequential messages are required, if n sites are involved in the validation.
Reference: [11] <author> J. Lee and S. Son. </author> <title> Using dynamic adjustment of serialization order for real-time database systems. </title> <booktitle> Proc. of the 14th Real-Time Systems Symposium, </booktitle> <pages> pages 66-75, </pages> <year> 1993. </year>
Reference-contexts: In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck [6, 8, 1]. Often, research papers ignore scheduler overhead, or accept it as a given fact <ref> [12, 11, 3, 17, 5] </ref>. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. A database scheduler (OCC-light) is designed, based on the observations made earlier.
Reference: [12] <author> R. Morris and W. Wong. </author> <title> Performance analysis of locking and occ algorithms. </title> <booktitle> Performance Evaluation 5, </booktitle> <pages> 105-118, </pages> <year> 1985. </year>
Reference-contexts: In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck [6, 8, 1]. Often, research papers ignore scheduler overhead, or accept it as a given fact <ref> [12, 11, 3, 17, 5] </ref>. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. A database scheduler (OCC-light) is designed, based on the observations made earlier.
Reference: [13] <author> C. H. Papadimitriou. </author> <title> The serializability of concurrent database updates. </title> <journal> Journal of the association for computing machinery, </journal> <month> October </month> <year> 1979. </year>
Reference-contexts: A reduced conflict-probability allows more transactions to exe cute concurrently. 4. Read-requests and local data accesses should be opti mized, since they are pre-dominant. 4 Concurrency To utilize more than one CPU effectively, the database scheduler has to execute transactions concurrently. However, unless the interleaving is serializable (see <ref> [13] </ref>), concurrent transaction execution can lead to interferences between transactions, and incorrect results. The scheduler has to prevent such incorrect interleavings from occurring, by delaying the execution of transactions that might possibly interfere. <p> Unfortunately, unrestricted transaction execution can lead to unexpected and unwanted results if concurrent transactions conflict. * Theoretically optimal concurrency As long as only serializable interleavings are possible, database consistency is ensured <ref> [13, 18] </ref>. Transactions are only delayed if immediate execution would destroy database consistency. Interferences between transactions arise from con-flicting database accesses, but conflicts are rare in the Telecom environment. Therefore, theoretical optimal concurrency almost never delays transactions. <p> Therefore, theoretical optimal concurrency almost never delays transactions. Unfortunately, it has been shown that, given a finite sequence of data accesses Dseq and a data access Da, recognizing whether Dseq; Da is a prefix of a conflict-serializable data access order is an NP complete problem <ref> [13] </ref>. * Approximations of the optimum Fast approximations of the optimal solution are used instead of theoretical optimal concurrency. These approximations are safe: no incorrect interleavings are possible. However, only a subset of all correct interleavings can be allowed by these approximations.
Reference: [14] <author> S. Sassen and J. van der Wal. </author> <title> The response time distribution in a real-time database with optimistic concurrency control. </title> <type> COSOR 96-17, </type> <institution> Eindhoven University of Technology, </institution> <year> 1996. </year>
Reference-contexts: In general, the expression given above cannot be exactly computed without intensive analyses, under strict assumptions about the environment. Examples of such studies are <ref> [15, 4, 14] </ref>. 3 Environment study Knowledge of the type and arrival-rate of transactions can be used to fine-tune the scheduler to the particular situation. For instance, in an environment where transactions write to all data items that they access, read-optimizations are of little use.
Reference: [15] <author> Y. Tay. </author> <title> Locking Performancein Centralized Databases. </title> <publisher> Academic Press, Inc., </publisher> <year> 1987. </year>
Reference-contexts: In general, the expression given above cannot be exactly computed without intensive analyses, under strict assumptions about the environment. Examples of such studies are <ref> [15, 4, 14] </ref>. 3 Environment study Knowledge of the type and arrival-rate of transactions can be used to fine-tune the scheduler to the particular situation. For instance, in an environment where transactions write to all data items that they access, read-optimizations are of little use.
Reference: [16] <author> A. Thomasian. </author> <title> Distributed optimistic concurrency control methods for high-performance transaction processing. </title> <journal> Transactions on Knowledge and Data Engineering, </journal> <pages> pages 173-189, </pages> <year> 1998. </year>
Reference-contexts: This rule prevents inconsistencies and avoids wait-chains. Furthermore, if we assume that transactions commit 99% of the time (low conflict probability!), the restart-rule is correct and efficient in 99% of all cases. For comparison, distributed OCC variants <ref> [10, 16] </ref> often employ waiting, and an acyclic validation order. In most cases, such waiting transactions have to restart. Furthermore, to implement the acyclic validation order, n + 1 sequential messages are required, if n sites are involved in the validation. <p> Trivial Concurrency obtains a good CPU utilization in the investigated environment, and can be implemented with minimal communication and synchronization overhead. OCC-light performs well in low-conflict environments, but performs poorly for high-conflict environments, and should be used selectively. A combination of the OCC-light and 2PL scheduler (quite similar to <ref> [16] </ref>) seems a good middle-road between the higher scheduling overhead of 2PL and the lifelock possibilities of OCC-light. Already they share common mechanisms as time-stamps and restarts (used for deadlock-prevention by 2PL), so integration is possible. Low-conflict transactions can execute using OCC-light, while high conflict-transactions (maintenance transactions, hotspot-data) use 2PL.
Reference: [17] <author> A. Thomasian and E. Rahm. </author> <title> A new distributed optimistic concurrency control method and a comparison of its performance with two-phase locking. </title> <booktitle> Proc. of the Int. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 294-301, </pages> <year> 1990. </year>
Reference-contexts: In section 4 we take a closer look at the influence of concurrency on the transaction response-time. It has been observed that scheduler overhead can be a bottleneck [6, 8, 1]. Often, research papers ignore scheduler overhead, or accept it as a given fact <ref> [12, 11, 3, 17, 5] </ref>. This paper treats scheduler overhead in more detail: section 5 describes the major sources of scheduler overhead, and ways to reduce this overhead. A database scheduler (OCC-light) is designed, based on the observations made earlier.
Reference: [18] <author> K. Vidyasankar. </author> <title> Unified theory of database serializability. </title> <journal> Fundamenta Informaticae XIV, </journal> <pages> pages 147-183, </pages> <year> 1991. </year>
Reference-contexts: Unfortunately, unrestricted transaction execution can lead to unexpected and unwanted results if concurrent transactions conflict. * Theoretically optimal concurrency As long as only serializable interleavings are possible, database consistency is ensured <ref> [13, 18] </ref>. Transactions are only delayed if immediate execution would destroy database consistency. Interferences between transactions arise from con-flicting database accesses, but conflicts are rare in the Telecom environment. Therefore, theoretical optimal concurrency almost never delays transactions.
Reference: [19] <author> C. Wikstrom and H. Nilsson. </author> <title> An industrial dbms with transactions, distribution and a logical query language. </title> <booktitle> Int. Symp. on Cooperative Database Systems for Advanced Applications, </booktitle> <address> Kyoto Japan, </address> <year> 1996. </year>
Reference-contexts: The database used has to be fast, reliable and scalable. Applications that access the database often interact with the real world, for instance with customers. Therefore, the database has to process each individual transaction in a short time. The distributed real-time database Mnesia <ref> [19] </ref> provides this functionality. Mnesia stores data in main-memory for fast access-speed. Applications execute transactions at arbitrary sites in the network.
References-found: 19

