URL: http://cs-www.bu.edu/faculty/best/res/papers/rtss96.ps
Refering-URL: http://cs-www.bu.edu/faculty/best/res/Home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (best@cs.bu.edu)  (nagy@cs.bu.edu)  
Title: Value-cognizant Admission Control for RTDB Systems  
Author: Azer Bestavros Sue Nagy 
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Date: Dec 1996.  
Note: In Proceedings of RTSS'96: The 16th IEEE Real-TimeSystem Symposium, Washington, DC,  
Abstract: Admission control and overload management techniques are central to the design and implementation of Real-Time Database Systems. In this paper, we motivate the need for these mechanisms and present protocols for adding such capabilities to Real-Time Databases. In particular, we present a novel admission control paradigm, we describe a number of admission control strategies and contrast (through simulations) their relative performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions: A performance evaluation. </title> <booktitle> In Proceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <pages> pages 1-12, </pages> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: In this paper we study our admission control mechanism in conjunction with two types of concurrency control protocols, namely Optimistic Concurrency Control with forward validation (such as OCC-BC [20] or SCC-nS [3]), or Pessimistic Concurrency Control with Priority Abort (such as 2PL-PA <ref> [1] </ref>). Workload Admission Control Manager: The source contains a set of transactions which are generated 4 Our current research involves extending our results to soft and firm deadline systems by allowing for a profit/loss past a transaction's deadline. This is similar to our work in [4]. off-line.
Reference: [2] <author> N. C. Audsley, R. I. Davis, and A. Burns. </author> <title> Mechanisms for enhancing the flexibility and utility of hard real-time systems. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pages 12-21, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: There have been a number of similar models suggested in the literature. Liu et al. [18] developed the imprecise computation model which decomposes each task into two subtasks, a mandatory part and an optional part. Audsley et al. <ref> [2] </ref> and Davis et al. [8] developed mechanisms whereby mandatory, hard deadline tasks are given off-line guarantees of minimum quality of service while associated optional tasks are guaranteed on-line, if sufficient resources are available. <p> Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in <ref> [18, 2, 8] </ref>, whereas they are assumed only for the compensating tasks in our model. Also, unlike the imprecise computation model, we start off with the execution of the optional component (the primary task), leaving the mandatory component (the compensating task) to a later time (if needed).
Reference: [3] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> Timeliness via speculation for real-time databases. </title> <booktitle> In Proceedings of RTSS'94: The 14 th IEEE Real-Time System Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Notice that this 2-tier priority assumption still allows primary tasks (compensating tasks) to be prioritized amongst themselves. In this paper we study our admission control mechanism in conjunction with two types of concurrency control protocols, namely Optimistic Concurrency Control with forward validation (such as OCC-BC [20] or SCC-nS <ref> [3] </ref>), or Pessimistic Concurrency Control with Priority Abort (such as 2PL-PA [1]). Workload Admission Control Manager: The source contains a set of transactions which are generated 4 Our current research involves extending our results to soft and firm deadline systems by allowing for a profit/loss past a transaction's deadline.
Reference: [4] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> Value-cognizant speculative concurrency control. </title> <booktitle> In Proceedings of VLDB'95: The International Conference on Very Large Databases, </booktitle> <address> Zurich, Switzerland, </address> <month> Spetember </month> <year> 1995. </year>
Reference-contexts: Workload Admission Control Manager: The source contains a set of transactions which are generated 4 Our current research involves extending our results to soft and firm deadline systems by allowing for a profit/loss past a transaction's deadline. This is similar to our work in <ref> [4] </ref>. off-line. Each enters the system at a random time and is first processed by the ACM. The decision of whether to admit or reject a transaction submitted for execution is based upon a feedback mechanism that takes into consideration the current demand on the resources in the system. <p> In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems [5, 6] as well as in RTDB <ref> [4, 12, 13, 22] </ref>. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. <p> Extending their AED scheduling algorithm to be value-cognizant, Haritsa et al. [12], developed Hierarchical Earliest Deadline (HED) for firm RTDB systems. All of the aforementioned research make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis <ref> [4] </ref> and Tseng et al. [22]. In [4], value functions are employed in a soft real-time system to determine whether it is more advantageous to commit a transaction or to delay that commitment for a period of time. Like [4], Tseng et al. use time-variant value functions in their Highest Reward <p> All of the aforementioned research make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis <ref> [4] </ref> and Tseng et al. [22]. In [4], value functions are employed in a soft real-time system to determine whether it is more advantageous to commit a transaction or to delay that commitment for a period of time. Like [4], Tseng et al. use time-variant value functions in their Highest Reward First (HRF) scheduling algorithm for firm RTDB <p> A different approach is taken by Bestavros and Braoudakis <ref> [4] </ref> and Tseng et al. [22]. In [4], value functions are employed in a soft real-time system to determine whether it is more advantageous to commit a transaction or to delay that commitment for a period of time. Like [4], Tseng et al. use time-variant value functions in their Highest Reward First (HRF) scheduling algorithm for firm RTDB systems. 6 Summary and Future Work In this paper, we proposed a new paradigm for the execution of transactions in a RTDB system.
Reference: [5] <author> Sara Biyabani, John Stankovic, and Krithi Ramam-ritham. </author> <title> The integration of deadline and criticalness in hard real-time scheduling. </title> <booktitle> In Proceedings of the 9th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems <ref> [5, 6] </ref> as well as in RTDB [4, 12, 13, 22]. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. <p> In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems <ref> [5, 6] </ref> as well as in RTDB [4, 12, 13, 22]. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment.
Reference: [6] <author> G. Buttazzo, M. Spuri, and F. Sensini. </author> <title> Value vs. deadline scheduling in overload conditions. </title> <booktitle> In Proceedings of the 16th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems <ref> [5, 6] </ref> as well as in RTDB [4, 12, 13, 22]. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. <p> In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems <ref> [5, 6] </ref> as well as in RTDB [4, 12, 13, 22]. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment.
Reference: [7] <author> H. Chetto and M. Chetto. </author> <title> Some results of the earliest deadline scheduling algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(10) </volume> <pages> 1261-1269, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In a sense, our paradigm is complementary to the imprecise computation paradigm. A similar model was also considered by Liestman and Campbell [16] and by Chetto and Chetto <ref> [7] </ref>. In [16] primary tasks provide good quality of service and are preferable to alternative tasks which produce acceptable quality of service and handle timing faults. Our notion of a compensating task is indeed similar to that of an alternative, with one major difference. <p> Our notion of a compensating task is indeed similar to that of an alternative, with one major difference. Alternative tasks in [16] are not subject to timing failures, whereas in our model compensating tasks have hard deadlines. In <ref> [7] </ref>, alternative tasks are periodic in nature, unlike compensating tasks which are not. Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling [12], memory allocation for queries [21], and B-tree index concurrency control [10].
Reference: [8] <author> R. I. Davis, S. Punnekkat, N. Audsley, and A. Burns. </author> <title> Flexible scheduling for adaptable real-time systems. </title> <booktitle> In Proceedings of the Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 230-239, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: There have been a number of similar models suggested in the literature. Liu et al. [18] developed the imprecise computation model which decomposes each task into two subtasks, a mandatory part and an optional part. Audsley et al. [2] and Davis et al. <ref> [8] </ref> developed mechanisms whereby mandatory, hard deadline tasks are given off-line guarantees of minimum quality of service while associated optional tasks are guaranteed on-line, if sufficient resources are available. <p> Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in <ref> [18, 2, 8] </ref>, whereas they are assumed only for the compensating tasks in our model. Also, unlike the imprecise computation model, we start off with the execution of the optional component (the primary task), leaving the mandatory component (the compensating task) to a later time (if needed).
Reference: [9] <author> M. L. Dertouzos. </author> <title> Control robotics: The procedural control of physical processes. </title> <booktitle> In Proceedings IFIP Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: Since all tasks in the PTQ are ready to execute, a scheduling algorithm must be used to apportion the CPU time amongst these tasks. We use the Earliest Deadline First algorithm (EDF) [17], which is optimal for a uniprocessor system with independent, preemptible tasks having arbitrary deadlines <ref> [9] </ref>. The CTQ is organized as a series of slots, one for each compensating task. Each slot contains the compensating task id as well as its start and end times. Slots are order according to ascending start time.
Reference: [10] <author> B. Goyal, J. Haritsa, S. Seshadri, and V. Srinivasan. </author> <title> Index concurrency control in firm real-time dbms. </title> <booktitle> In Proceedings of the 21st VLDB Conference, </booktitle> <pages> pages 146-157, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In [7], alternative tasks are periodic in nature, unlike compensating tasks which are not. Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling [12], memory allocation for queries [21], and B-tree index concurrency control <ref> [10] </ref>. Haritsa et al. [12] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. <p> The admission control component of their Priority Memory Management algorithm dynamically sets the target MPL by using a feedback process based upon information from previously completed queries. Goyal et al. <ref> [10] </ref> describe an approach that allows transactions to be rejected as part of an optimization of the Load Adaptive B-link algorithm, a real-time version of index (B-tree) concurrency control algorithms in firm-deadline RTDB systems.
Reference: [11] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Livny. </author> <title> On being optimistic about real-time constraints. </title> <booktitle> In Proceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: These simulations, illustrated in Figure 3, show that LMF is most beneficial when data conflicts are least. Also, it shows that LMF is more beneficial with OCC-BC than it is with 2PL-PA. This could be explained by noting that OCC techniques are better suited for systems with controllable utilization <ref> [11] </ref>, which is the case in a system with admission control like ours. The value of the threshold to be used in LMF is key to its performance. As we explained before, the optimal value for this threshold depends on many parameters, most of which cannot be estimated a priori.
Reference: [12] <author> Jayant R. Haritsa, Miron Livny, and Michael J. Carey. </author> <title> Earliest deadline scheduling for real-time database systems. </title> <booktitle> In Proceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: In [7], alternative tasks are periodic in nature, unlike compensating tasks which are not. Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling <ref> [12] </ref>, memory allocation for queries [21], and B-tree index concurrency control [10]. Haritsa et al. [12] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. <p> In [7], alternative tasks are periodic in nature, unlike compensating tasks which are not. Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling <ref> [12] </ref>, memory allocation for queries [21], and B-tree index concurrency control [10]. Haritsa et al. [12] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. <p> In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems [5, 6] as well as in RTDB <ref> [4, 12, 13, 22] </ref>. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. <p> In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. Extending their AED scheduling algorithm to be value-cognizant, Haritsa et al. <ref> [12] </ref>, developed Hierarchical Earliest Deadline (HED) for firm RTDB systems. All of the aforementioned research make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis [4] and Tseng et al. [22].
Reference: [13] <author> J. Huang, J. A. Stankovic, D. Towsley, and K. Ramam-ritham. </author> <title> Experimental evaluation of real-time transaction processing. </title> <booktitle> In Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems [5, 6] as well as in RTDB <ref> [4, 12, 13, 22] </ref>. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. <p> The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems [5, 6] as well as in RTDB [4, 12, 13, 22]. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. <ref> [13] </ref> use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. Extending their AED scheduling algorithm to be value-cognizant, Haritsa et al. [12], developed Hierarchical Earliest Deadline (HED) for firm RTDB systems.
Reference: [14] <author> E. Jensen, C. Locke, and H. Tokuda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the 6th Real-Time Systems Symbosium, </booktitle> <pages> pages 112-122, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions <ref> [14, 19] </ref> have been utilized in both general real-time systems [5, 6] as well as in RTDB [4, 12, 13, 22]. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g.
Reference: [15] <author> Lee W. Johnson and R. Dean Riess. </author> <title> Numerical Analysis. </title> <publisher> Addison Wesley, </publisher> <year> 1982. </year>
Reference-contexts: This process was repeated for a number of threshold values in order to compute the optimal value per setting. The bisection method <ref> [15] </ref> was used in order to determine the optimal threshold value for each ArrivalRate, CTCompTime, SlackFactor triplet. To evaluate the relative performance of LAF, we ran a set of experiments in which LAF optimized the value of its threshold along all 3 dimensions using the results from the above experiments.
Reference: [16] <author> A. Liestman and R. Campbell. </author> <title> A fault-tolerant scheduling problem. </title> <journal> IEEE Transaction on Software Engineering, </journal> <volume> SE-12(11):1089-1095, </volume> <month> November </month> <year> 1986. </year>
Reference-contexts: In a sense, our paradigm is complementary to the imprecise computation paradigm. A similar model was also considered by Liestman and Campbell <ref> [16] </ref> and by Chetto and Chetto [7]. In [16] primary tasks provide good quality of service and are preferable to alternative tasks which produce acceptable quality of service and handle timing faults. Our notion of a compensating task is indeed similar to that of an alternative, with one major difference. <p> In a sense, our paradigm is complementary to the imprecise computation paradigm. A similar model was also considered by Liestman and Campbell <ref> [16] </ref> and by Chetto and Chetto [7]. In [16] primary tasks provide good quality of service and are preferable to alternative tasks which produce acceptable quality of service and handle timing faults. Our notion of a compensating task is indeed similar to that of an alternative, with one major difference. Alternative tasks in [16] are not subject to timing <p> In <ref> [16] </ref> primary tasks provide good quality of service and are preferable to alternative tasks which produce acceptable quality of service and handle timing faults. Our notion of a compensating task is indeed similar to that of an alternative, with one major difference. Alternative tasks in [16] are not subject to timing failures, whereas in our model compensating tasks have hard deadlines. In [7], alternative tasks are periodic in nature, unlike compensating tasks which are not.
Reference: [17] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in hard real-time environments. </title> <journal> Journal of the Assocation of Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Since all tasks in the PTQ are ready to execute, a scheduling algorithm must be used to apportion the CPU time amongst these tasks. We use the Earliest Deadline First algorithm (EDF) <ref> [17] </ref>, which is optimal for a uniprocessor system with independent, preemptible tasks having arbitrary deadlines [9]. The CTQ is organized as a series of slots, one for each compensating task. Each slot contains the compensating task id as well as its start and end times.
Reference: [18] <author> J. W.-S. Liu, K. J. Lin, and S. Natarajan. </author> <title> Scheduling real-time, periodic jobs using imprecise results. </title> <booktitle> In Proceedings of the 8th IEEE Real-time Systems Symposium, </booktitle> <month> December </month> <year> 1987. </year>
Reference-contexts: There have been a number of similar models suggested in the literature. Liu et al. <ref> [18] </ref> developed the imprecise computation model which decomposes each task into two subtasks, a mandatory part and an optional part. <p> Our model differs from the imprecise computation model in that the WCET requirements for the mandatory and optional parts are assumed in <ref> [18, 2, 8] </ref>, whereas they are assumed only for the compensating tasks in our model. Also, unlike the imprecise computation model, we start off with the execution of the optional component (the primary task), leaving the mandatory component (the compensating task) to a later time (if needed).
Reference: [19] <author> C. Locke. </author> <title> Best Effort Decision Making for Real-Time Scheduling. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Department of Computer Science, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions <ref> [14, 19] </ref> have been utilized in both general real-time systems [5, 6] as well as in RTDB [4, 12, 13, 22]. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g.
Reference: [20] <author> D. Menasce and T. Nakanishi. </author> <title> Optimistic versus pessimistic concurrency control mechanisms in database management systems. </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: Notice that this 2-tier priority assumption still allows primary tasks (compensating tasks) to be prioritized amongst themselves. In this paper we study our admission control mechanism in conjunction with two types of concurrency control protocols, namely Optimistic Concurrency Control with forward validation (such as OCC-BC <ref> [20] </ref> or SCC-nS [3]), or Pessimistic Concurrency Control with Priority Abort (such as 2PL-PA [1]).
Reference: [21] <author> H. Pang, M. J. Carey, and M. Livny. </author> <title> Managing memory for real-time queries. </title> <booktitle> In Proceedings of the 1994 ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 221-232, </pages> <year> 1994. </year>
Reference-contexts: In [7], alternative tasks are periodic in nature, unlike compensating tasks which are not. Admission control protocols and feedback mechanisms have been employed in a variety of RTDB system components: transaction scheduling [12], memory allocation for queries <ref> [21] </ref>, and B-tree index concurrency control [10]. Haritsa et al. [12] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. <p> Haritsa et al. [12] incorporate a feedback mechanism into an Adaptive Earliest Deadline (AED) and Hierarchical Earliest Deadline (HED) scheduling strategies for transactions in a firm deadline environment. Both AED and HED attempt to stabilize the overload performance of EDF. The focus of Pang et al. <ref> [21] </ref> is on admission control and memory management of queries requiring large amounts of computational memory in a firm RTDB system. The admission control component of their Priority Memory Management algorithm dynamically sets the target MPL by using a feedback process based upon information from previously completed queries.
Reference: [22] <author> S.-M. Tseng, Y.H. Chin, and W.-P. Yang. </author> <title> Scheduling real-time transactions with dynamic values: a performance evaluation. </title> <booktitle> In Proceedings Second International Workshop on Real-Time Computing Systems and Applications, </booktitle> <pages> pages 60-67, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: In such systems, the performance objective becomes that of maximizing the system profit. The notions of transaction values and value functions [14, 19] have been utilized in both general real-time systems [5, 6] as well as in RTDB <ref> [4, 12, 13, 22] </ref>. In [5, 6], the value of a task is evaluated during the admission control process. Huang et al. [13] use transactions' values to schedule system resources (e.g. CPU) and in conflict resolution protocols in a soft real-time environment. <p> Extending their AED scheduling algorithm to be value-cognizant, Haritsa et al. [12], developed Hierarchical Earliest Deadline (HED) for firm RTDB systems. All of the aforementioned research make use of transactions' values which are time-invariant. A different approach is taken by Bestavros and Braoudakis [4] and Tseng et al. <ref> [22] </ref>. In [4], value functions are employed in a soft real-time system to determine whether it is more advantageous to commit a transaction or to delay that commitment for a period of time.
References-found: 22

