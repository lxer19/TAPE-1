URL: http://www.cs.unc.edu/~hoffman/papers/TR93-051.ps
Refering-URL: http://www.cs.unc.edu/~hoffman/publications.html
Root-URL: http://www.cs.unc.edu
Title: A Computer Architecture for Fast Approximate Pattern Matching  
Author: Rickard E. Faith Doug L. Hoffman 
Note: fi  
Date: 27 April 1993  
Pubnum: TR93-051  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ricardo Baeza-Yates and Gaston H. Gonnet. </author> <title> A new approach to text searching. </title> <journal> Communications of the ACM, </journal> <volume> 35(10) </volume> <pages> 74-82, </pages> <year> 1992. </year>
Reference-contexts: text and biological sequence searching * Inexpensive hardware that can be added to existing workstations * At least one order of magnitude improvement in search speed over a sequential algorithm 2 Characteristics of the Application 2.1 Background Recently, a class of algorithms have been proposed for rapid non-exact pattern matching <ref> [3, 1] </ref>. The ability of these algorithms to match strings containing arbitrary insertions, deletions, or substitutions make them applicable to a large number of problems, including text searching for information retrieval, biological sequence analysis (e.g., DNA and protein sequence matching), and protein structure analysis. <p> The "shift-and" algorithm, originally described by Baeza-Yates and Gonnet in 1989 <ref> [1] </ref> and subsequently modified by Wu and Manber [8], has characteristics which make it ideal for implementation in hardware. The algorithm, as actually implemented in the agrep program, is one of the fastest sequential pattern matching algorithms available. <p> If R j [i] = 0 then there is no match up to i and there cannot be a match up to i + 1. If t j+1 = p 1 then R j+1 <ref> [1] </ref> = 1. If R j+1 [m] = 1 then we have a complete match, starting at j m + 2, and we output it. <p> Family tree. To our knowledge the RFDH-1 has established no family tree. In fact, no example of the RFDH-1 has ever been built. Noteworthy Hardware support for parallel string comparison. The RFDH-1 directly supports the "shift-and" variant of the string comparison algorithm of Baeza-Yates and Gonnet <ref> [1, 8] </ref> for string sizes of up to 2048 characters. This support is provided by a large set (256) of bit vector registers that are used as operands on a 2 kilobit accumulator. <p> r2 / 32 loadi L2,r8 ! r8 &lt;- address of L2: shiftleft r3,r3,2 ! make it a word offset add r8,r3,r8 ! r8 &lt;- address of L2 + word offset jump r8 ! jump to address in r8 L2: MoveRegToAccumulator r0,r0 ! zero accumulator [0] MoveRegToAccumulator r0,r1 ! zero accumulator <ref> [1] </ref> MoveRegToAccumulator r0,r2 ! zero accumulator [2] MoveRegToAccumulator r0,r3 ! zero accumulator [3] . . . . . . <p> L3,r8 ! r8 &lt;- address of L3 shiftleft r3,r3,1 ! make it a two word offset add r8,r3,r8 ! r8 &lt;- address of L3 + word offset jump r8 ! jump to address in r8 L3: MoveRegToAccumulator r5,r0 ! load accumulator [0] jump L4 ! MoveRegToAccumulator r5,r1 ! load accumulator <ref> [1] </ref> jump L4 ! MoveRegToAccumulator r5,r2 ! load accumulator [2] jump L4 ! MoveRegToAccumulator r5,r3 ! load accumulator [3] jump L4 ! . . . . . . 5 SAMPLE PROGRAMS 36 MoveRegToAccumulator r5,r61 ! load accumulator [61] jump L4 ! MoveRegToAccumulator r5,r62 ! load accumulator [62] jump L4 ! MoveRegToAccumulator
Reference: [2] <author> C. Burks. </author> <title> How much sequence data the data banks will be processing in the near future. </title> <editor> In R. R. Colwell, editor, </editor> <booktitle> Biomolecular Data, </booktitle> <pages> pages 17-26. </pages> <address> New York: </address> <publisher> Oxford University Press, </publisher> <year> 1989. </year>
Reference-contexts: The GenBank database [4] has more than eighty thousand DNA and RNA sequences. The SWISS-PROT database [4] contains over twenty-six thousand protein sequences. These databases have been growing at an exponential rate with a doubling time between 18 and 24 months <ref> [2] </ref>. The GenBank database is expected to contain 3 billion characters by the year 2000. Given this volume of data, hardware-assisted 2 CHARACTERISTICS OF THE APPLICATION 2 pattern matching is not only desirable, but imperative. The sizes of some typical databases are shown in Table 1. <p> r8 &lt;- address of L2: shiftleft r3,r3,2 ! make it a word offset add r8,r3,r8 ! r8 &lt;- address of L2 + word offset jump r8 ! jump to address in r8 L2: MoveRegToAccumulator r0,r0 ! zero accumulator [0] MoveRegToAccumulator r0,r1 ! zero accumulator [1] MoveRegToAccumulator r0,r2 ! zero accumulator <ref> [2] </ref> MoveRegToAccumulator r0,r3 ! zero accumulator [3] . . . . . . <p> ! make it a two word offset add r8,r3,r8 ! r8 &lt;- address of L3 + word offset jump r8 ! jump to address in r8 L3: MoveRegToAccumulator r5,r0 ! load accumulator [0] jump L4 ! MoveRegToAccumulator r5,r1 ! load accumulator [1] jump L4 ! MoveRegToAccumulator r5,r2 ! load accumulator <ref> [2] </ref> jump L4 ! MoveRegToAccumulator r5,r3 ! load accumulator [3] jump L4 ! . . . . . . 5 SAMPLE PROGRAMS 36 MoveRegToAccumulator r5,r61 ! load accumulator [61] jump L4 ! MoveRegToAccumulator r5,r62 ! load accumulator [62] jump L4 ! MoveRegToAccumulator r5,r63 ! load accumulator [63] jump L4 ! !
Reference: [3] <author> William B. Frakes and Ricardo Baeza-Yates. </author> <title> Information Retrieval: Data Structures & Algorithms. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: text and biological sequence searching * Inexpensive hardware that can be added to existing workstations * At least one order of magnitude improvement in search speed over a sequential algorithm 2 Characteristics of the Application 2.1 Background Recently, a class of algorithms have been proposed for rapid non-exact pattern matching <ref> [3, 1] </ref>. The ability of these algorithms to match strings containing arbitrary insertions, deletions, or substitutions make them applicable to a large number of problems, including text searching for information retrieval, biological sequence analysis (e.g., DNA and protein sequence matching), and protein structure analysis. <p> r3,r3,2 ! make it a word offset add r8,r3,r8 ! r8 &lt;- address of L2 + word offset jump r8 ! jump to address in r8 L2: MoveRegToAccumulator r0,r0 ! zero accumulator [0] MoveRegToAccumulator r0,r1 ! zero accumulator [1] MoveRegToAccumulator r0,r2 ! zero accumulator [2] MoveRegToAccumulator r0,r3 ! zero accumulator <ref> [3] </ref> . . . . . . <p> ! r8 &lt;- address of L3 + word offset jump r8 ! jump to address in r8 L3: MoveRegToAccumulator r5,r0 ! load accumulator [0] jump L4 ! MoveRegToAccumulator r5,r1 ! load accumulator [1] jump L4 ! MoveRegToAccumulator r5,r2 ! load accumulator [2] jump L4 ! MoveRegToAccumulator r5,r3 ! load accumulator <ref> [3] </ref> jump L4 ! . . . . . . 5 SAMPLE PROGRAMS 36 MoveRegToAccumulator r5,r61 ! load accumulator [61] jump L4 ! MoveRegToAccumulator r5,r62 ! load accumulator [62] jump L4 ! MoveRegToAccumulator r5,r63 ! load accumulator [63] jump L4 ! ! ! end of coprocessor initialization. ! end The jumps
Reference: [4] <author> M. Gribskov and J. Devereux, </author> <title> editors. Sequence Analysis Primer. </title> <address> New York: </address> <publisher> Stockton Press, </publisher> <year> 1991. </year>
Reference-contexts: The Online Book Initiative, an Internet accessible e-text database, has doubled in size over the last year, and currently contains over 400 million characters of data. The GenBank database <ref> [4] </ref> has more than eighty thousand DNA and RNA sequences. The SWISS-PROT database [4] contains over twenty-six thousand protein sequences. These databases have been growing at an exponential rate with a doubling time between 18 and 24 months [2]. <p> The Online Book Initiative, an Internet accessible e-text database, has doubled in size over the last year, and currently contains over 400 million characters of data. The GenBank database <ref> [4] </ref> has more than eighty thousand DNA and RNA sequences. The SWISS-PROT database [4] contains over twenty-six thousand protein sequences. These databases have been growing at an exponential rate with a doubling time between 18 and 24 months [2]. The GenBank database is expected to contain 3 billion characters by the year 2000.
Reference: [5] <author> R. P. Hughey and D. P. Lopresti. B-sys: </author> <title> A 470-processor programmable systolic array. </title> <booktitle> Proceedings of the International Conference on Parallel Processing, </booktitle> <pages> pages 580-586, </pages> <year> 1991. </year>
Reference-contexts: Therefore, the size of the RFDH-1 bit vectors is 2048 bits. Though this is less than the 12992 characters accommodated by the BioSCAN custom processor [7] it is much larger than the 470 character capacity of the B-sys processor <ref> [5] </ref>. To allow multiple shorter test vectors to be processed in parallel, it was decided to segment the Accumulator into 32 64-bit segments. This fits nicely with the observation that most text queries are less that 64 characters in length [8].
Reference: [6] <author> Gerry Kane. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The relevant "Coprocessor Instructions" supported by the MIPS R3000 <ref> [6, p. 3-11] </ref> are shown in Table 4. Context Switch Not Supported. Because of the size of the BitVectorTable, context switches which involve the coprocessor are not realistic. <p> The RFDH-1 load and store instructions use this format, but all address calculation is performed by the host processor. 3.4 Data The R3000 defines a 32-bit word, a 16-bit half word, and an 8-bit byte <ref> [6] </ref>. The 16-bit half-word is not used by the RFDH-1. The R3000 byte ordering is configurable into either big-endian or little-endian ordering. The RFDH-1 description given here assumes a big-endian configuration. Character Strings Character set and size. <p> Instruction Structure Machine-language syntax. The structure of the machine instructions is dictated by the coprocessor instructions provided by the MIPS R3000. The instruction formats that are detailed in the previous section are taken directly from MIPS RISC Architecture by Gerry Kane <ref> [6] </ref>. Of the nine syntactic patterns, only type a, Coprocessor Operation, allows the specification of part of the instruction format by the coprocessor's designers. The instruction formats that conform to this syntactic pattern are those that execute exclusively on the coprocessor. 4 DESIGN RATIONALE 24 Instruction format.
Reference: [7] <author> R. K. Singh, S. G. Tell, C. T. White, D. L. Hoffman, V. L. Chi, and B. W. Erick-son. </author> <title> A scalable systolic multiprocessor system for analysis of biological sequences. </title> <booktitle> Proceedings of the Symposium on Integrated Systems, </booktitle> <pages> pages 167-182, </pages> <year> 1993. </year>
Reference-contexts: As cited in the introductory section of this document, 98% of typical biosequence queries can be accommodated by a string length of 2048. Therefore, the size of the RFDH-1 bit vectors is 2048 bits. Though this is less than the 12992 characters accommodated by the BioSCAN custom processor <ref> [7] </ref> it is much larger than the 470 character capacity of the B-sys processor [5]. To allow multiple shorter test vectors to be processed in parallel, it was decided to segment the Accumulator into 32 64-bit segments.
Reference: [8] <author> Sun Wu and Udi Manber. </author> <title> Fast text searching allowing errors. </title> <journal> Communications of the ACM, </journal> <volume> 35(10) </volume> <pages> 83-91, </pages> <year> 1992. </year>
Reference-contexts: The "shift-and" algorithm, originally described by Baeza-Yates and Gonnet in 1989 [1] and subsequently modified by Wu and Manber <ref> [8] </ref>, has characteristics which make it ideal for implementation in hardware. The algorithm, as actually implemented in the agrep program, is one of the fastest sequential pattern matching algorithms available. <p> For example, human-readable text searches are usually less than 64 characters long <ref> [8] </ref>, whereas typical DNA sequence matches are 400 characters long. The results of word-list analysis is shown in Table 2. <p> This would allow the construction of a text database query which involves and and or operations among several short patterns, as well as the simultaneous scan of a large DNA sequence in both the C-terminal and N-terminal directions. 2 CHARACTERISTICS OF THE APPLICATION 4 2.4 Algorithm Wu and Manber <ref> [8] </ref> succinctly describe the basic algorithm: Let R be a bit array of size m (the size of the pattern). We denote by R j the value of the array R after the j character of the text has been processed. <p> The inner loop in the above example becomes a shift of R, a logical and of R and S j , and a bit test of a bit in R. Wu and Manber <ref> [8] </ref> explain an important enhancement to the algorithm which allows for approximate matching. Assume that q arbitrary insertions or deletions are allowed in the pattern P . <p> Family tree. To our knowledge the RFDH-1 has established no family tree. In fact, no example of the RFDH-1 has ever been built. Noteworthy Hardware support for parallel string comparison. The RFDH-1 directly supports the "shift-and" variant of the string comparison algorithm of Baeza-Yates and Gonnet <ref> [1, 8] </ref> for string sizes of up to 2048 characters. This support is provided by a large set (256) of bit vector registers that are used as operands on a 2 kilobit accumulator. <p> To allow multiple shorter test vectors to be processed in parallel, it was decided to segment the Accumulator into 32 64-bit segments. This fits nicely with the observation that most text queries are less that 64 characters in length <ref> [8] </ref>. The segments can be combined to form any combination of 64n-bit "logical segments" that will fit into the 2048 bit Accumulator. Unfortunately, this organization of the Accumulator requires the extension of the R3000 5-bit register address to 6 bits.
References-found: 8

