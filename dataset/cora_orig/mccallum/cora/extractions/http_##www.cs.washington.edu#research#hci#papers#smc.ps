URL: http://www.cs.washington.edu/research/hci/papers/smc.ps
Refering-URL: http://www.cs.washington.edu/research/hci/
Root-URL: http://www.cs.washington.edu
Title: Designing Automation to Reduce Operator Errors  
Author: Nancy G. Leveson Everett Palmer 
Affiliation: Computer Science and Engineering University of Washington  NASA Ames Research Center  
Abstract-found: 0
Intro-found: 1
Reference: [Deg96] <author> Degani, A. </author> <title> Modeling Human-Machine Systems: On Modes, Error, and Patterns of Interaction. </title> <type> Ph. D. thesis, </type> <institution> Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: Although these errors are accentuated by poor interface design and gaps or misconceptions in the user's mental model of the system, an important factor is inconsistent automation behavior. Sarter and Woods have identified some of these predictable error forms. Leveson et. al. [LPS97] and De-gani <ref> [Deg96] </ref> have defined taxonomies of automation features that lead to mode confusion.
Reference: [Hans97] <author> Hansman, John. </author> <type> Personal communication. </type>
Reference-contexts: In addition to providing design guidance, this approach might provide a way of "measuring" or evaluating the cognitive demands involved in working with specific automated devices. Hansman has suggested that automation complexity be defined in terms of the predictability of the automation behavior <ref> [Hans97] </ref>. This predictability can potentially be evaluated on the formal SpecTRM-RL (SpecTRM Requirements Language) models. The rest of the paper provides more information about the approach and illustrates its use on a commonly reported mode confusion error called a "kill-the-capture" bust.
Reference: [HL96] <author> Heimdahl, M. P. E. and N. Leveson. </author> <title> Completeness and consistency analysis of state-based requirements. </title> <journal> Transactions on Software Engineering, </journal> <month> June </month> <year> 1996. </year>
Reference-contexts: of effort has been expended in software engineering on finding software design and implementation errors, much less has been accomplished in terms of validating requirements specifications beyond executing them for a few test cases or showing the consistency of a formal specification with various properties of the underlying mathematical model <ref> [HL96, HLK95] </ref>. Most of the specfication errors and omissions that lead to accidents are unlikely to be found using these techniques. The testing of any complex software is necessarily very incomplete, and consistency with a mathematical model does not imply consistency with required properties of a real world application.
Reference: [HLK95] <author> Heitmeyer, C., Labaw, B., and Kiskis, D. </author> <title> Consistency checking of SCR-style requirements specifications. </title> <booktitle> Int. Symposium on Requirements Engineering, </booktitle> <address> York, </address> <year> 1995. </year>
Reference-contexts: of effort has been expended in software engineering on finding software design and implementation errors, much less has been accomplished in terms of validating requirements specifications beyond executing them for a few test cases or showing the consistency of a formal specification with various properties of the underlying mathematical model <ref> [HL96, HLK95] </ref>. Most of the specfication errors and omissions that lead to accidents are unlikely to be found using these techniques. The testing of any complex software is necessarily very incomplete, and consistency with a mathematical model does not imply consistency with required properties of a real world application.
Reference: [JLHM91] <author> Jaffe, M.S, Leveson, N.G., Heimdahl, M.P.E., and Melhart, B.E.. </author> <title> Software requirements analysis for real-time process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-17(3):241-258, </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: To deal with this problem, we have specified a set of criteria for completeness and correctness of blackbox process-control requirements specifications that are related to safety <ref> [JLHM91, Lev95] </ref>. These criteria were derived using real accidents and industrial experience with process-control software, and they have been validated by experimental application to the NASA Gallileo and Voyager software [Lut92, Lut93] and through industrial use.
Reference: [Lev95] <author> Leveson, N.G. Safeware: </author> <title> System Safety and Computers. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1995. </year>
Reference-contexts: Mode Confusion Analysis Most accidents related to software behavior can be traced back to errors or omissions in the software requirements, not to implementation or coding errors <ref> [Lev95, Lut93] </ref>. <p> To deal with this problem, we have specified a set of criteria for completeness and correctness of blackbox process-control requirements specifications that are related to safety <ref> [JLHM91, Lev95] </ref>. These criteria were derived using real accidents and industrial experience with process-control software, and they have been validated by experimental application to the NASA Gallileo and Voyager software [Lut92, Lut93] and through industrial use.
Reference: [Lev97] <author> Leveson, Nancy G. </author> <title> Mode Confusion Modeling and Analysis, </title> <note> in preparation. </note>
Reference-contexts: The rest of this paper shows an example of this approach for one particular common cause of mode confusion error, i.e., indirect mode changes. The basic criteria and analysis technique is being specified formally <ref> [Lev97] </ref>, but we include only an informal description here. Indirect Mode Change Example Indirect mode changes occur when the automation changes mode without an explicit instruction by the operator.
Reference: [LPS97] <author> Leveson, N.G., Pinnell, L.D., Sandys, S.D., Koga, S., and Reese, J.D. </author> <title> Analyzing Software Specifications for Mode Confusion Potential. </title> <booktitle> Proc. Workshop on Human Error and System Development, </booktitle> <address> Glascow, </address> <month> March </month> <year> 1997. </year>
Reference-contexts: Although these errors are accentuated by poor interface design and gaps or misconceptions in the user's mental model of the system, an important factor is inconsistent automation behavior. Sarter and Woods have identified some of these predictable error forms. Leveson et. al. <ref> [LPS97] </ref> and De-gani [Deg96] have defined taxonomies of automation features that lead to mode confusion. <p> A previous paper described six categories of potential design flaws that can lead to mode confusion errors: interface interpretation flaws, inconsistent behavior, indirect mode changes, operator authority limits, unintended side effects, and lack of appropriate feedback <ref> [LPS97] </ref>. The rest of this paper shows an example of this approach for one particular common cause of mode confusion error, i.e., indirect mode changes. The basic criteria and analysis technique is being specified formally [Lev97], but we include only an informal description here.
Reference: [Luc87] <author> Lucas, D.A. </author> <title> Mental models and new technology. New Technology and Human Error, </title> <publisher> John Wiley & Sons, </publisher> <year> 1987, </year> <pages> pp. 337-340. </pages>
Reference-contexts: Each person may have a different mental model of the system and the automation, and these may change over time within the same person. In fact, operators have been found to be able to function with multiple and inconsistent models <ref> [Luc87] </ref>. However, it is possible to state some high-level abstractions about required features of correct operator mental models|for example, that particular actions on the part of the operator will result eventually in particular changes in the automation and/or the system.
Reference: [Lut92] <author> Lutz, </author> <title> R.R. Analyzing software requirements errors in safety-critical, embedded systems. </title> <booktitle> Software Requirements Conference, </booktitle> <year> 1992. </year>
Reference-contexts: These criteria were derived using real accidents and industrial experience with process-control software, and they have been validated by experimental application to the NASA Gallileo and Voyager software <ref> [Lut92, Lut93] </ref> and through industrial use.
Reference: [Lut93] <author> Lutz, </author> <title> R.R. Targeting safety-related errors during software requirements analysis. </title> <booktitle> Proc. Sig-soft '93: Foundations of Software Engineering, </booktitle> <year> 1993. </year>
Reference-contexts: Mode Confusion Analysis Most accidents related to software behavior can be traced back to errors or omissions in the software requirements, not to implementation or coding errors <ref> [Lev95, Lut93] </ref>. <p> These criteria were derived using real accidents and industrial experience with process-control software, and they have been validated by experimental application to the NASA Gallileo and Voyager software <ref> [Lut92, Lut93] </ref> and through industrial use.
Reference: [MLR97] <author> Modugno, F., Leveson, N.G., Reese, J.D., Partridge, K., and Sandys, </author> <title> S.D. Integrated Safety Analysis of Requirements Specifications. </title> <journal> Requirements Engineering Journal, </journal> <note> to appear. </note>
Reference-contexts: We are contining to extend the criteria, most recently with the goal of reducing mode confusion er rors, and to validate them on real software <ref> [MLR97] </ref>. 1 Sensors Disturbances Process outputsProcess inputs Controlled Process Measured variablesvariables Controlled Supervisor (s) Set points, Control commands Controller Internal model of process Actuators Automated Sensors Disturbances Process outputsProcess inputs Controlled Process Measured variablesvariables Controlled Internal model of supervisory interface Internal model of process Internal model of controller Controller Internal model
Reference: [Pal96] <author> Palmer, E. </author> <title> "oops, it didn't arm" a case study of two automation surprises. </title> <type> NASA Technical Report, </type> <year> 1996. </year>
Reference-contexts: Palmer has described another example of a common indirect mode transition problem called a "kill-the-capture bust" that has been noted in many ASRS reports <ref> [Pal96] </ref>.
Reference: [SW95] <author> Sarter, N. D. and D. </author> <title> Woods "How in the world did I ever get into that mode?": Mode error and awareness in supervisory control. </title> <booktitle> Human Factors 37, </booktitle> <pages> 5-19. </pages>
Reference-contexts: The new mode-rich systems provide flexibility and enhanced capabilities, but they also increase the need for and difficulty of maintaining mode awareness. While automation has eliminated some types of operator mode-awareness errors, it has also created the potential for new types of mode-related problems <ref> [SW95] </ref>. After studying accidents and incidents in the new, highly automated aircraft, Sarter and Woods have concluded that certain errors are non-random and predictable [SW95]: They are the regular and predictable consequences of a variety of identifiable factors. <p> While automation has eliminated some types of operator mode-awareness errors, it has also created the potential for new types of mode-related problems <ref> [SW95] </ref>. After studying accidents and incidents in the new, highly automated aircraft, Sarter and Woods have concluded that certain errors are non-random and predictable [SW95]: They are the regular and predictable consequences of a variety of identifiable factors. Although these errors are accentuated by poor interface design and gaps or misconceptions in the user's mental model of the system, an important factor is inconsistent automation behavior. <p> It has been speculated that the pilots did not notice the mode annunciation because the indirect mode change occurred during approach when the pilots were busy and they were not expecting the change <ref> [SW95] </ref>. Another example of such an indirect mode change in the A-320 automation involves an automatic mode transition triggered when the airspeed exceeds a predefined limit.
Reference: [SW95] <author> Sarter, N. D. and D. Woods Strong, </author> <type> silent, </type> <institution> and out-of-the-loop. CSEL Report 95-TR-01, Ohio State University, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: The new mode-rich systems provide flexibility and enhanced capabilities, but they also increase the need for and difficulty of maintaining mode awareness. While automation has eliminated some types of operator mode-awareness errors, it has also created the potential for new types of mode-related problems <ref> [SW95] </ref>. After studying accidents and incidents in the new, highly automated aircraft, Sarter and Woods have concluded that certain errors are non-random and predictable [SW95]: They are the regular and predictable consequences of a variety of identifiable factors. <p> While automation has eliminated some types of operator mode-awareness errors, it has also created the potential for new types of mode-related problems <ref> [SW95] </ref>. After studying accidents and incidents in the new, highly automated aircraft, Sarter and Woods have concluded that certain errors are non-random and predictable [SW95]: They are the regular and predictable consequences of a variety of identifiable factors. Although these errors are accentuated by poor interface design and gaps or misconceptions in the user's mental model of the system, an important factor is inconsistent automation behavior. <p> It has been speculated that the pilots did not notice the mode annunciation because the indirect mode change occurred during approach when the pilots were busy and they were not expecting the change <ref> [SW95] </ref>. Another example of such an indirect mode change in the A-320 automation involves an automatic mode transition triggered when the airspeed exceeds a predefined limit.
References-found: 15

