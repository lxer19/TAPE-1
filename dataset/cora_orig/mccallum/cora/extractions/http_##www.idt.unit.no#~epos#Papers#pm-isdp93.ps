URL: http://www.idt.unit.no/~epos/Papers/pm-isdp93.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Customization and Evolution of Process Models in EPOS  
Author: Reidar Conradi 
Date: March 8, 1993  
Note: Accepted at IFIP 8.1 ISDP'93, Como, Italy, 1-3 Sept. 1993 EPOS TR 174  
Address: Trondheim, Norway.  
Affiliation: Norwegian Institute of Technology,  
Abstract: The originality of the EPOS approach to PM flexibility lies in a common, reflexive, object-oriented data model to describe persistent and versioned products, activities, tools, organizational contexts, and their meta-processes. A process model or schema is a set of data types for such entities and their relationships. A PM Manager is capable of defining and changing process models. A Planner will instantiate them into software processes. Work is going on to use roles and access rights to better control process change, and to support the full process model life-cycle by a "CASE tool" for PM. 
Abstract-found: 1
Intro-found: 1
Reference: [B + 87] <author> Jay Banerjee et al. </author> <title> Semantics and implementation of schema evolution in object-oriented databases. </title> <booktitle> In ACM SIGMOD'87, </booktitle> <pages> pages 311-322, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: All these cases are covered by the Invariants of the PM Manager. Note, that type-changes often will affect sub types through inheritance, and some locking must be observed, see <ref> [B + 87] </ref> on ORION. However, due to quasi-concurrent task execution and disciplined inter-transaction propagation, this can be solved in EPOS PM [Jac92]. Type-level triggers may e.g. assist such propagation.
Reference: [BF92] <author> Sergio Bandinelli and Alfonso Fuggetta. </author> <title> Computational Reflection in Software Process Modeling: the SLANG Approach. </title> <type> Technical report, </type> <institution> CEFRIEL-Politecnico di Milano, </institution> <month> September </month> <year> 1992. </year> <note> (Submitted to ICSE'15). </note>
Reference-contexts: The system does not exhibits reflection, because FUNSOFT net definitions are not explicitly represented nor up-datable by the system. Thus FUNSOFT net enables refinement or specialization, but not evolution by corrections. <ref> [BF92] </ref> has recently proposed to extend Petri Nets with reflection to manage process evolution in the SPADE system. APPL/A [JHO90] extends Ada with persistent relations, triggers, predicates, and transaction statements.
Reference: [BK91] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling up Rule-Based Software Development Environments. </title> <booktitle> In Proc. of the 3rd European Software Engineering Conference, </booktitle> <address> ESEC'91, Milan, Italy, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Obviously, the process activity formalism Task Net, Rule Based / Triggers, or Process Programming strongly influences the approach to evolution management. It is also straight-forward that a system must exhibit some kind of reflection [MN88] to inspect and change its state. In MARVEL <ref> [BK91] </ref> a process model is specified by a rule set denoting the activity part, a project type set denoting the product part, and tool envelopes denote the tools. All these may be loaded (meta-process PM3) into the kernel to obtain a Specific Process Model.
Reference: [Bra92] <author> Svein Erik Bratsberg. </author> <title> Unified class evolution by object-oriented views. </title> <editor> In G. Per-nul and A. M. Tjoa (editors), </editor> <booktitle> Proc. 11th Int'l Conf. on the Entity-Relationship Approach, </booktitle> <month> 7-9 October </month> <year> 1992, </year> <institution> Karlsruhe, </institution> <address> Germany, </address> <publisher> Springer Verlag LNCS 645 (17 p.), </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: Thus, we distinguish between hard and soft type-changes. The hard ones imply changes in instance-level attributes or in the subtype structure. Such changes are generally disallowed, see however [Odb92] <ref> [Bra92] </ref> and Section 4.7. The soft type-changes are the PM-specific ones, as they modify the behavioral part of a type. The procedures start, restart, and stop may be used on tasks during a soft type-change, if the task state allows it (initiated, waiting, active, or terminated see below).
Reference: [CFFS92] <author> Reidar Conradi, Christer Fernstrom, Al-fonso Fuggetta, and Robert Snowdon. </author> <title> Towards a Reference Framework for Process Concepts. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trond-heim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 3-17, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Ideally, the PM system should serves as an intelligent and cooperative assistant in the daily work of project workers at any level. Since most PM system are intended to serve in a hybrid machine-human environment, called human-oriented systems <ref> [CFFS92] </ref>, flexibility through customization and evolution is a crucial property. This implies that classic programming language technologies, like strict type-checking and compiled systems, are partly unsuited. As for knowledge-based systems, many PM systems have been built on interpretative and reflexive systems. <p> We also characterize some existing PM systems wrt. to such variability. Thereafter follows a presentation of the EPOS support for PM variability. A short conclusion is also given, with indications of further work. 1 2 Background There is no commonly agreed concepts and terminology for software PM [FH92] <ref> [CFFS92] </ref> [Lon93]. We will therefore summarize some key concepts below. 2.1 General PM Definitions A software process model provides a common, often typed description of a class of software artifacts: activities and their related products, application tools, and organization. The latter includes human roles.
Reference: [CJM + 92] <author> Reidar Conradi, M. Letizia Jaccheri, Cristina Mazzi, Amund Aarsten, and Ngoc Minh Nguyen. </author> <title> Design, use, and implementation of SPELL, a language for software process modeling and evolution. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trondheim, Nor-way, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 167-177, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: A transaction is executed on the current database version, i.e. the visible subdatabase. The transaction has a scope (ambition) to indicate into which other versions a local change should be propagated (made visible) after commit. A transaction is associated to a project description, see Section 3.3. The SPELL <ref> [CJM + 92] </ref> process specification language extends the DDL and DML of the underlying EPOSDB with user-accessible types and meta-types (reflection), type-level attributes with declarable inheritance rules, type- and instance-level procedures and triggers, and con 1 NB: from a representation point of view, see Sec tion 4.5 on change semantics. 4
Reference: [CM91] <author> Reidar Conradi and Carl Chr. Malm. </author> <title> Cooperating Transactions and Workspaces in EPOS: Design and Preliminary Implementation. </title> <editor> In Rudolf Andersen, Janis A. Bubenko jr., and Arne Stlvberg, editors, </editor> <booktitle> Proc. of CAiSE'91, the 3rd International Conference on Advanced Information Systems, </booktitle> <address> Trondheim, Norway, </address> <month> 13-15 May </month> <year> 1991, </year> <pages> pages 375-392. </pages> <publisher> LNCS 498, Springer Verlag, </publisher> <address> 578 p., </address> <year> 1991. </year> <note> Also as DCST TR 47/90, EPOS TR 119. </note>
Reference-contexts: Thus, several parallel subprojects can co-exist and have customized process models, perhaps initially "borrowed" from a common superpro ject. This means that the same, shared prod ucts can be governed by several customized or versioned process models (views), belonging to different subprojects. See also <ref> [CM91] </ref> on coop erating transactions. We start up a (sub)project in four steps: First, we instantiate a Project instance and link it to the superproject, and initialize some key values. Second, we bind the actual subdatabase ver sion, being a subset of the parent's.
Reference: [Der92] <editor> Jean-Claude Derniame, editor. </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <address> Sept. 7-8 1992, Trond-heim, Norway. </address> <publisher> Springer Verlag LNCS 635, </publisher> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction We need to model and manage not only the product space, but also the process aspects of software engineering. Software process modeling (PM) and its support has gotten increased attention in the last 15 years [Leh87] [Per89] [Hum89] <ref> [Der92] </ref>. Many PM formalisms, techniques and prototypes have been developed (Section 2.3), fl Detailed address: Div. of Computer Systems and Telematics, Norwegian Institute of Technology (NTH), N-7034 Trondheim, Norway. Phone: +47 7 593444, Fax: +47 7 594466, Email: conradi@idt.unit.no. but with little market penetration yet.
Reference: [Fer93] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding Process Support to UNIX. </title> <editor> In Leon Osterweil (ed.): </editor> <booktitle> Proc. from 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> March 1993, Berlin. </address> <publisher> IEEE Press (forthcoming), </publisher> <year> 1993. </year>
Reference-contexts: The advantage is the possibility to introduce global dynamic constraints, regulating the interaction and evolution of an object-oriented system. There is no explicitly representation of executable software processes, whose models are given in a totally declarative way. Process WEAVER <ref> [Fer93] </ref> from Cap Gemini Innovation allows dynamic reconfiguration of enacted processes. A task network is here modeled as a set of inter-linked Petri nets. The links between the nets are expressed in terms of actions, which are attached to the net transitions. These links can be dynamically restructured.
Reference: [FH92] <author> Peter H. Feiler and Watts Humphrey. </author> <title> Software Process Development and Enactment: Concepts and Definitions, </title> <note> Jan-uary 1992. 12 pages (Second version). </note>
Reference-contexts: We also characterize some existing PM systems wrt. to such variability. Thereafter follows a presentation of the EPOS support for PM variability. A short conclusion is also given, with indications of further work. 1 2 Background There is no commonly agreed concepts and terminology for software PM <ref> [FH92] </ref> [CFFS92] [Lon93]. We will therefore summarize some key concepts below. 2.1 General PM Definitions A software process model provides a common, often typed description of a class of software artifacts: activities and their related products, application tools, and organization. The latter includes human roles.
Reference: [Huf89] <author> Karen E. Huff. </author> <title> Plan-Based Intelligent Assistance: An Approach to Supporting the Software Development Process. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <month> Septem-ber </month> <year> 1989. </year>
Reference-contexts: Section 4.1. The next two subsections deals with variability in process instances, not process models, but we will focus on type-related changes. 4.6 Instantiating Software Processes Software process instances are represented by task/product networks. The tasks are incrementally and automatically 3 instantiated by the Planner, cf. Grapple <ref> [Huf89] </ref>. Many PM systems based on task networks rely on manual instanti-ation here. The type-level procedure i create is defined in root type Entity to generate arbitrary instances.
Reference: [Hum89] <author> Watts S. Humphrey. </author> <title> Managing The Software Process. </title> <booktitle> SEI Series in Software Engineering, </booktitle> <pages> 493 pages. </pages> <publisher> Addison Wesley, </publisher> <year> 1989. </year> <month> 11 </month>
Reference-contexts: 1 Introduction We need to model and manage not only the product space, but also the process aspects of software engineering. Software process modeling (PM) and its support has gotten increased attention in the last 15 years [Leh87] [Per89] <ref> [Hum89] </ref> [Der92]. Many PM formalisms, techniques and prototypes have been developed (Section 2.3), fl Detailed address: Div. of Computer Systems and Telematics, Norwegian Institute of Technology (NTH), N-7034 Trondheim, Norway. Phone: +47 7 593444, Fax: +47 7 594466, Email: conradi@idt.unit.no. but with little market penetration yet.
Reference: [Jac92] <author> M. Letizia Jaccheri. </author> <title> Customization and evolution of process model support. </title> <type> 135 p. (draft PhD thesis), </type> <month> February </month> <year> 1992. </year>
Reference-contexts: Note, that type-changes often will affect sub types through inheritance, and some locking must be observed, see [B + 87] on ORION. However, due to quasi-concurrent task execution and disciplined inter-transaction propagation, this can be solved in EPOS PM <ref> [Jac92] </ref>. Type-level triggers may e.g. assist such propagation. As mentioned, structural reshu*es of the type hierarchy are not legal, but the issue is being pursued by us and by colleagues elsewhere. Lastly, deleting a type by t delete is much more delicate.
Reference: [JHO90] <author> Stanley M. Sutton Jr., Dennis Heim-bigner, and Leon Osterweil. </author> <title> Language Constructs for Managing Change in Process-Centered Environments. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <address> Irvine, California. </address> <booktitle> In ACM SIG-PLAN Notices, </booktitle> <month> Dec. </month> <year> 1990, </year> <pages> pages 206-217, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Thus FUNSOFT net enables refinement or specialization, but not evolution by corrections. [BF92] has recently proposed to extend Petri Nets with reflection to manage process evolution in the SPADE system. APPL/A <ref> [JHO90] </ref> extends Ada with persistent relations, triggers, predicates, and transaction statements. A process model corresponds to an APPL/A program that is statically compiled into an executable program (an enactable process model) and then executed. Neither APPL/A programs, nor their executables may be manipulated and changed on the fly.
Reference: [Kat89] <author> T. Katayama. </author> <title> A Hierarchical and Functional Software Process Description and its Enaction. </title> <booktitle> In Proc. of the 11th Int'l ACM-SIGSOFT/IEEE-CS Conference on Software Engineering, </booktitle> <address> Pittsburgh, PA, </address> <pages> pages 343-352, </pages> <year> 1989. </year>
Reference-contexts: The IPSE PML is highly reflexive: definition, customization, instantiation, execution, moni 3 toring and evolution of a given process model are supported and well documented. HFSP <ref> [Kat89] </ref> demonstrates a successful and formal attempt to apply reflection techniques to process modeling. A set of meta-operations enable inspection and manipulation of the state of enaction, that is explicitly represented. However, no explicit representation, nor manipulation of process model definitions is allowed. <p> The use of reflection to manage PM evolution is not new <ref> [Kat89] </ref>, but we exploit an integrated, object-oriented architecture for managing type-changes. It also appears, that many of our mechanisms, originally aimed at the PM field, can be applied to schema evolution in the database field.
Reference: [Kaw92] <author> Peter J. Kawalek. </author> <title> The process mod-elling cookbook: Orientation, description and experience. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trond-heim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 227-229, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Typical roles are Process-Designer, Process-Manager, and Process-User. Only privileged "meta-tasks" (with sufficient access rights!) in the superpro-jects may change such information. On top of all this apparatus, a methodology for PM change must be developed and tested. We have none now, but see <ref> [Kaw92] </ref> [Sno92]. 5.3 A CASE Tool for PM models? The life-cycle of process models brings up the idea of a CASE tool for PM, as a generalization of our PM Manager.
Reference: [LCD + 89] <author> Anund Lie, Reidar Conradi, Tor M. Didriksen, Even-Andre Karlsson, Svein O. Hallsteinsen, and Per Holager. </author> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In Wal-ter F. Tichy (Ed.): </editor> <booktitle> Proc. of the 2nd International Workshop on Software Configuration Management, </booktitle> <address> Princeton, USA, 25-27 Oct. </address> <year> 1989, </year> <title> 178 p. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 14 (7), </volume> <pages> pages 56-65, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The PM support is based upon a software engineering database, EPOSDB, as shown in Figure 1. EPOSDB offers a structurally object-oriented data model ("OO Entity-Relationship" with entities as objects). EPOSDB implements a Change Oriented Ver-sioning model (COV) <ref> [LCD + 89] </ref>, being largely independent of the data model. COV enables uniform versioning of entities and relationships, and their types 1 . An EPOSDB type corresponds to a class in the OMG terminology, and has an extent.
Reference: [Leh87] <author> M. M. Lehman. </author> <title> Process Models, Process Programming, </title> <booktitle> Programming Support. In Proc. of the 9th Int'l ACM-SIGSOFT/IEEE-CS Conference on Software Engineering, </booktitle> <address> Monterey, CA, </address> <pages> pages 14-16, </pages> <month> March </month> <year> 1987. </year> <title> (Response to an ICSE'9 Keynote Address by Leon Oster-weil). </title>
Reference-contexts: 1 Introduction We need to model and manage not only the product space, but also the process aspects of software engineering. Software process modeling (PM) and its support has gotten increased attention in the last 15 years <ref> [Leh87] </ref> [Per89] [Hum89] [Der92]. Many PM formalisms, techniques and prototypes have been developed (Section 2.3), fl Detailed address: Div. of Computer Systems and Telematics, Norwegian Institute of Technology (NTH), N-7034 Trondheim, Norway. Phone: +47 7 593444, Fax: +47 7 594466, Email: conradi@idt.unit.no. but with little market penetration yet.
Reference: [Liu91] <author> Chunnian Liu. </author> <title> An Expert System for Program and System Development. </title> <booktitle> In Proc. </booktitle> <address> AVIGNON'91, Avignon, France, </address> <month> May 27-31, </month> <journal> 1991, </journal> <volume> Volume 3, </volume> <pages> pages 97-110, </pages> <year> 1991. </year>
Reference-contexts: The horizontal task network resembles a Petri-net, where transition nodes are connected with places. Task execution is performed by the EPOS Execution Manager (meta-process PM5), Incremental instantiation of tasks in a network is done by the EPOS Planner <ref> [Liu91] </ref> (meta-process PM4), interacting closely with the Execution Manager. The EPOS PM Manager incorporates a SPELL Translator/Editor to manage the set of types, and their customization and evolution (meta-processes PM2 and PM3).
Reference: [Lon93] <author> Jacques Lonchamp. </author> <title> A structured conceptual and terminological framework for software process engineering. </title> <editor> In Leon Os-terweil (ed.): </editor> <booktitle> Proc. from 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> March 1993, Berlin. </address> <publisher> IEEE Press (forthcoming, </publisher> <address> 15 p.), </address> <year> 1993. </year>
Reference-contexts: We also characterize some existing PM systems wrt. to such variability. Thereafter follows a presentation of the EPOS support for PM variability. A short conclusion is also given, with indications of further work. 1 2 Background There is no commonly agreed concepts and terminology for software PM [FH92] [CFFS92] <ref> [Lon93] </ref>. We will therefore summarize some key concepts below. 2.1 General PM Definitions A software process model provides a common, often typed description of a class of software artifacts: activities and their related products, application tools, and organization. The latter includes human roles.
Reference: [Maz92] <author> Cristina Mazzi. </author> <title> SPELL: The Revised EPOS Process Model Language, </title> <note> Novem-ber 1992. EPOS TR 171 175 pp. </note>
Reference-contexts: See Section 3.3 for a scenario on subprojects. The EPOSDB is implemented in C on C-ISAM, and the surrounding EPOS-PM system is implemented in SWI-Prolog using XPC graphics. 3.2 SPELL: A Process Specification Language We will not explain the SPELL syntax and semantics formally here, see e.g. <ref> [Maz92] </ref>. Note, that types have both an instance-level part and a type-level (meta-type) part, as for class definitions in Smalltalk.
Reference: [Min91] <author> N.H. Minsky. </author> <title> Law-Governed Systems. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 285-302, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: A set of meta-operations enable inspection and manipulation of the state of enaction, that is explicitly represented. However, no explicit representation, nor manipulation of process model definitions is allowed. The meta-operations give support for software processes execution and monitoring, but do not help in the meta-processes PM2-PM3. The Darwin <ref> [Min91] </ref> environment is based on the concepts of law, that provides rules under which both the product and the model itself operate and evolve.
Reference: [MN88] <editor> Patty Maes and Daniele Nardi, editors. </editor> <title> Meta-Level Architectures and Reflection. </title> <publisher> North Holland, </publisher> <year> 1988. </year>
Reference-contexts: Second, we concentrate on which technical aspects each system uses to manage evolution. Obviously, the process activity formalism Task Net, Rule Based / Triggers, or Process Programming strongly influences the approach to evolution management. It is also straight-forward that a system must exhibit some kind of reflection <ref> [MN88] </ref> to inspect and change its state. In MARVEL [BK91] a process model is specified by a rule set denoting the activity part, a project type set denoting the product part, and tool envelopes denote the tools.
Reference: [Odb92] <author> Erik Odberg. </author> <title> A framework for managing schema versioning in object oriented databases. </title> <booktitle> In Proc. from DEXA'92, </booktitle> <month> Sept. </month> <pages> 2-4, </pages> <address> Valencia, Spain. 12 p., </address> <year> 1992. </year>
Reference-contexts: Thus, we distinguish between hard and soft type-changes. The hard ones imply changes in instance-level attributes or in the subtype structure. Such changes are generally disallowed, see however <ref> [Odb92] </ref> [Bra92] and Section 4.7. The soft type-changes are the PM-specific ones, as they modify the behavioral part of a type. The procedures start, restart, and stop may be used on tasks during a soft type-change, if the task state allows it (initiated, waiting, active, or terminated see below).
Reference: [Per89] <editor> Dewayne E. Perry, editor. </editor> <booktitle> Proc. 5th Int'l Software Process Workshop - ISPW'5, </booktitle> <address> Kennebunkport, Maine, USA, October 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction We need to model and manage not only the product space, but also the process aspects of software engineering. Software process modeling (PM) and its support has gotten increased attention in the last 15 years [Leh87] <ref> [Per89] </ref> [Hum89] [Der92]. Many PM formalisms, techniques and prototypes have been developed (Section 2.3), fl Detailed address: Div. of Computer Systems and Telematics, Norwegian Institute of Technology (NTH), N-7034 Trondheim, Norway. Phone: +47 7 593444, Fax: +47 7 594466, Email: conradi@idt.unit.no. but with little market penetration yet.
Reference: [Pre87] <author> Roger S. Pressman. </author> <title> Software Engineering A Practioner's Approach (2nd Ed.). </title> <publisher> McGraw Hill International Editions, </publisher> <address> ISBN 0-07-100232-4, </address> <year> 1987. </year>
Reference-contexts: And how many of the changes can be anticipated (and thus "parameterizable"), and how many are ad-hoc ("raw" versioning)? 4. Reasons for change For software products, <ref> [Pre87] </ref> indicates the following distribution of updates (not costs): perfective (51%), adaptive (25%), corrective (21%), preventive and others (4%). For processes or process models we do not know the distribution, but at least adaptive changes will be important. 5.
Reference: [Sno92] <author> Robert Snowdon. </author> <title> An example of process change. </title> <editor> In J.-C. Derniame (ed.): </editor> <booktitle> Proc. from EWSPT'92, </booktitle> <month> Sept. </month> <pages> 7-8, </pages> <address> Trond-heim, Norway, </address> <publisher> Springer Verlag LNCS 635, </publisher> <pages> pages 178-195, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Neither APPL/A programs, nor their executables may be manipulated and changed on the fly. However, relations are explicitly stored in the underlying storage management and together with triggers and transactions mechanisms are useful to manage product changes. IPSE 2.5 <ref> [Sno92] </ref> enables to express process models in terms of Roles and Interactions that are described by object-oriented classes. <p> Typical roles are Process-Designer, Process-Manager, and Process-User. Only privileged "meta-tasks" (with sufficient access rights!) in the superpro-jects may change such information. On top of all this apparatus, a methodology for PM change must be developed and tested. We have none now, but see [Kaw92] <ref> [Sno92] </ref>. 5.3 A CASE Tool for PM models? The life-cycle of process models brings up the idea of a CASE tool for PM, as a generalization of our PM Manager.
Reference: [SZ86] <author> Andrea H. Skarra and Stanley B. Zdonik. </author> <title> The management of changing types in an object-oriented database. </title> <booktitle> In Proc. of the ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA'86), </booktitle> <pages> pages 483-491, </pages> <address> Portland, OR, USA, </address> <year> 1986. </year> <journal> In ACM SIGPLAN Notices 21(11), </journal> <month> Nov. </month> <year> 1986. </year> <month> March 8, </month> <year> 1993 </year> <month> 12 </month>
Reference-contexts: There are no formal sub-schema or sub-model mechanism, other than COV to hide the invisible parts of a model. We can regard PM variability within a project as a special case of schema evolution in object-oriented databases <ref> [SZ86] </ref>.
References-found: 28

