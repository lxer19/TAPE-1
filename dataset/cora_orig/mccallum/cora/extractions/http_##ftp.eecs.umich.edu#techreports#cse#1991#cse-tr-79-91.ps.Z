URL: http://ftp.eecs.umich.edu/techreports/cse/1991/cse-tr-79-91.ps.Z
Refering-URL: http://ftp.eecs.umich.edu/techreports/cse/1991/
Root-URL: http://www.eecs.umich.edu
Title: The Hyperfile Model and a Hyperfile Service  
Author: Stuart Sechrest William A. Adamson Yoonho Park 
Date: January 1991  
Address: Ann Arbor, Michigan  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan  
Pubnum: CSE-TR-79-91  
Abstract: Traditional file models do not provide mechanisms to represent multidataset entities. We propose a new file model, the Hyperfile model, to address this deficiency. A hyperfile consists of one or more nodes. A node consists of a dataset and linkages to other nodes. The complexity of a hyperfile structure can be hidden from many applications through the definition of tours through the hyperfile, that allow a complex entity to be interpreted as a linear byte stream. Different tours of a Hyperfile provide various interpretations of the datasets. To test the utility of hyperfile, we are developing a Hyperfile Service similar in design to Sun's Network File System. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. R. Kleiman. Vnodes: </author> <title> An architecture for multiple file system types in Sun UNIX. </title> <booktitle> In Proceedings of the USENIX 1986 Summer Conference, </booktitle> <pages> pages 238-247, </pages> <address> Atlanta, Georgia (USA), </address> <month> June </month> <year> 1986. </year> <institution> USENIX Association, Berkeley, Calif. (USA). </institution>
Reference-contexts: We have chosen to implement our client hyperfile system in the MACH 2.5 kernel. We extend the UNIX file system interface, supported by MACH, by adding calls to provide access to hyperfile functionality. CHFS makes use of the VFS/vnode interface <ref> [1] </ref> used by MACH, which allows several implementors of client file systems to coreside. CHFS accesses HFS through a protocol much like the NFS protocol. This protocol allows the client to requests information about or data from a particular file specified by a file handle.
Reference: [2] <author> R. Sandberg, D. Goldberg, S. Kleinman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the sun network filesystem. </title> <booktitle> In Proceedings of the USENIX 1985 Summer Conference, </booktitle> <pages> pages 119-130, </pages> <address> Portland, Oregon, </address> <month> June </month> <year> 1985. </year> <institution> USENIX Association, Berkeley, Calif. (USA). </institution>
Reference-contexts: Interpreting and updating this information would be the responsibility of the application, of course. 3 A Hyperfile Service Hyperfiles can be implemented through an extended form of distributed file system. We are currently implementing a system whose design is based upon SUN's Network File System (NFS) <ref> [2] </ref>. NFS divides responsibilities between a server file system, which supplies file information and data blocks in response to a request protocol, and a client file system, which translates local file system calls (for a file system such as the UNIX file system) to a sequence of protocol requests.
Reference: [3] <author> M. Satyanaranan. </author> <title> Integrating security in a large distributed system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 247-280, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Implementation may be made simpler by insisting that this be the case, as the Andrew File System has insisted, in its initial implementations, that all files in a directory share a single access list <ref> [3] </ref>. Reference links, however, generally refer from one hyperfile to another. It is most appropriate to place responsibility for establishing the access policy for the target hyperfile with the creator of that hyperfile, rather than placing controls on the traversal of the reference linkage.
Reference: [4] <author> Stuart Sechrest. </author> <title> Attribute-based naming of files. </title> <type> Technical Report CSE-TR-78-91, </type> <institution> University of Michigan, </institution> <year> 1991. </year>
Reference-contexts: When copying a hyperfile specified by a root, copies are made of all nodes reachable 1 The name space will be the usual UNIX hierarchical name space, but another scheme could be substituted quite easily. An alternative scheme using attribute-based naming is described in <ref> [4] </ref>. 4 - - - - DataAttr's Linkages Flags DataAttr's Linkages Flags To be..... 0 101 1 DataAttr's 1011..... Self Text Voice Self Linkages Flags Self Next Next Comment Oh Romeo... Ordinary UNIX File Hyperfile Data Root node File System Name Space 5 from the root through constituent linkages.
Reference: [5] <author> Marc Shapiro, David Plainfosse, and Olivier Gruber. </author> <title> A garbage detection protocol for a realistic distributed object-support system. </title> <type> Research Report 1320, </type> <institution> INRIA, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: While in our current implementation references are local to a disk partition, we plan to allow references to be made freely between objects throughout a large distributed system. This will require the inclusion of a distributed garbage detection algorithm such as that described in <ref> [5] </ref>. 2.2 The Self Linkage Tompa [6] points out the importance for hypertext and related systems of distinguishing between the structure imposed on data and the data itself. In hyperfiles, a node encapsulates both a dataset and a set of linkages.

References-found: 5

