URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-35/s2k-93-35.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-35/
Root-URL: http://www.cs.berkeley.edu
Title: A Visualization Architecture for the Sequoia 2000 Project  
Author: Peter Kochevar Zahid Ahmed Len Wanger Colin Shade Jonathan Sharp 
Affiliation: Digital Equipment Corporation  San Diego Supercomputer Center  
Abstract: An architecture is described for the Tioga Visualization Management System which is under development as part of the Sequoia 2000 Project. This system brings together the capabilities of a database management system, a scientific visualization system, and a graphical user-interface builder. The paper concentrates on the front-end of Tioga which is called the Visualization Executive. The Visualization Executive is designed to allow scientists to easily do their own interactive visualizations of data that reside in a database management system. The Visualization Executive achieves this goal by mixing techniques from knowledge-based systems with those of scientific visualization and user-interface design. The intent is to free scientists as much as possible from having to deal with the process of doing science so that they can concentrate on the science itself.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Advanced Visual Systems, Inc. </institution> <note> AVS User's Guide, </note> <month> May </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Scientists find the current complement of visualization systems, exemplified by AVS <ref> [1] </ref>, IDL [13], Data Explorer [8], and others, too difficult to use. Within such systems, they cannot easily find and then access their data. This problem is made more difficult when a search for data is conducted by content rather than by file name. <p> Modules may also have special inputs representing parameters which are supplied at run-time by a user. These parameters are denoted in Figure 2 by ball-and-stick icons attached to certain module boxes. Such data flow programming environments are common in scientific visualization systems as evidenced by systems such as AVS <ref> [1] </ref>, Explorer [19], and Khoros [9]. Recipes may contain one or more special module instances called eyes. Eye modules are responsible for converting database objects into renderable forms. These modules take as input any number of database objects packaged as abstract data types representing fiber bundles 1 .
Reference: [2] <author> Clifford Beshers and Steven Feiner. </author> <title> Automated design of virtual worlds for visualizing multivariate relations. </title> <booktitle> In Proceedings Visualization '92 Conference, </booktitle> <pages> pages 283-290, </pages> <year> 1992. </year>
Reference-contexts: In addition, interactive renderables have behavioral properties which are invoked in response to user inputs. As such, interactive renderables can be used to create 3D user-interface tools like the widgets described in [6] and [17], or the interactors described in <ref> [2] </ref>. Renderable forms are specified as programs written in an interpreted scripting language much like Tcl/Tk [11, 12]. Like Tcl/Tk, event handlers are bound to geometric primitives and these handlers are invoked when events, such as mouse picks, are directed at the primitives. <p> One technique that can be used to encode and retrieve prior plans is that of case-based reasoning [15]. In general, the implementation of the Intelligent Subsystem in the Visualization Executive is intended to extend the work of Mackinlay [10], Casner [5], Senay and Ignatius [18], and Beshers and Feiner <ref> [2] </ref>. Both Mackinlay and Casner dealt with the automatic, 2D presentation of relational data while Senay and Ignatius, and Beshers and Feiner dealt with 3D visualization of data which could also be non-relational. <p> When task specifications must be written, the standard way of creating a them is to build them up from a number of basic task operators <ref> [2, 5] </ref>. Some examples of task operators are browse, directed search, comparison, find pattern, and so on. These operators apply to domain-specific types thus allowing scientists to specify naturally their intentions concerning the visualization of a given data set.
Reference: [3] <author> D. M. Butler and M. H. Pendley. </author> <title> A visualization model based on the mathematics of fiber bundles. </title> <booktitle> Computers in Physics, </booktitle> <pages> pages 45-51, </pages> <month> Sep/Oct </month> <year> 1989. </year>
Reference-contexts: In particular, it is hoped this assistant will allow the rapid assimilation of the many large data sets that characterize the study of global processes at work on planet Earth. 11 A Fiber Bundles A fiber bundle <ref> [7, 3, 4] </ref> is a mathematical abstraction representing a space which is the Cartesian product of two other spaces; a base space and a fiber space. Conceptually, a copy of the fiber space is attached to each element of the base space.
Reference: [4] <author> David M. Butler and Steve Bryson. </author> <title> Vector-bundle classes form powerful tool for scientific visualization. </title> <journal> Computers in Physics, </journal> <volume> 6(6) </volume> <pages> 576-584, </pages> <month> Nov/Dec </month> <year> 1992. </year>
Reference-contexts: In particular, it is hoped this assistant will allow the rapid assimilation of the many large data sets that characterize the study of global processes at work on planet Earth. 11 A Fiber Bundles A fiber bundle <ref> [7, 3, 4] </ref> is a mathematical abstraction representing a space which is the Cartesian product of two other spaces; a base space and a fiber space. Conceptually, a copy of the fiber space is attached to each element of the base space.
Reference: [5] <author> Stephen M. Casner. </author> <title> A task-analytic approach to the automated design of graphic presentations. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 10(2) </volume> <pages> 111-151, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: One technique that can be used to encode and retrieve prior plans is that of case-based reasoning [15]. In general, the implementation of the Intelligent Subsystem in the Visualization Executive is intended to extend the work of Mackinlay [10], Casner <ref> [5] </ref>, Senay and Ignatius [18], and Beshers and Feiner [2]. Both Mackinlay and Casner dealt with the automatic, 2D presentation of relational data while Senay and Ignatius, and Beshers and Feiner dealt with 3D visualization of data which could also be non-relational. <p> When task specifications must be written, the standard way of creating a them is to build them up from a number of basic task operators <ref> [2, 5] </ref>. Some examples of task operators are browse, directed search, comparison, find pattern, and so on. These operators apply to domain-specific types thus allowing scientists to specify naturally their intentions concerning the visualization of a given data set. <p> The task operators in a specification are mapped to perceptual operators according to rules in the Knowledge Base. The perceptual operators then dictate how to structure the renderables in a way which satisfies the task specification <ref> [5] </ref>.
Reference: [6] <author> D. Brookshire Connor et al. </author> <title> Three-dimensional widgets. </title> <booktitle> In Proceedings Workshop on 3D Interactive Computer Graphics, </booktitle> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: Interactive renderable forms represent the geometric properties and the appearance attributes of objects which comprise a scene. In addition, interactive renderables have behavioral properties which are invoked in response to user inputs. As such, interactive renderables can be used to create 3D user-interface tools like the widgets described in <ref> [6] </ref> and [17], or the interactors described in [2]. Renderable forms are specified as programs written in an interpreted scripting language much like Tcl/Tk [11, 12].
Reference: [7] <author> R. B. Haber, B. Lucas, and N. Collins. </author> <title> A data model for scientific visualization with provisions for regular and irregular grids. </title> <booktitle> In Proceedings Visualization `91 Conference, </booktitle> <year> 1991. </year>
Reference-contexts: In particular, it is hoped this assistant will allow the rapid assimilation of the many large data sets that characterize the study of global processes at work on planet Earth. 11 A Fiber Bundles A fiber bundle <ref> [7, 3, 4] </ref> is a mathematical abstraction representing a space which is the Cartesian product of two other spaces; a base space and a fiber space. Conceptually, a copy of the fiber space is attached to each element of the base space.
Reference: [8] <author> IBM, </author> <title> Corp. IBM Visualization Data Explorer: User's Guide, </title> <year> 1992. </year>
Reference-contexts: 1 Introduction Scientists find the current complement of visualization systems, exemplified by AVS [1], IDL [13], Data Explorer <ref> [8] </ref>, and others, too difficult to use. Within such systems, they cannot easily find and then access their data. This problem is made more difficult when a search for data is conducted by content rather than by file name.
Reference: [9] <institution> The Khoros Group, Dept. of Electrical and Computer Engineering, University of New Mexico. </institution> <note> Khoros User's Manual, </note> <year> 1992. </year>
Reference-contexts: These parameters are denoted in Figure 2 by ball-and-stick icons attached to certain module boxes. Such data flow programming environments are common in scientific visualization systems as evidenced by systems such as AVS [1], Explorer [19], and Khoros <ref> [9] </ref>. Recipes may contain one or more special module instances called eyes. Eye modules are responsible for converting database objects into renderable forms. These modules take as input any number of database objects packaged as abstract data types representing fiber bundles 1 .
Reference: [10] <author> J. D. Mackinlay. </author> <title> Automating the design of graphical presentations of relational information. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 110-141, </pages> <year> 1986. </year>
Reference-contexts: One technique that can be used to encode and retrieve prior plans is that of case-based reasoning [15]. In general, the implementation of the Intelligent Subsystem in the Visualization Executive is intended to extend the work of Mackinlay <ref> [10] </ref>, Casner [5], Senay and Ignatius [18], and Beshers and Feiner [2]. Both Mackinlay and Casner dealt with the automatic, 2D presentation of relational data while Senay and Ignatius, and Beshers and Feiner dealt with 3D visualization of data which could also be non-relational.
Reference: [11] <author> John Ousterhout. </author> <title> Tcl: An embeddable command language. </title> <booktitle> In Proceedings of the 1990 Winter USENIX Conference, </booktitle> <year> 1990. </year>
Reference-contexts: As such, interactive renderables can be used to create 3D user-interface tools like the widgets described in [6] and [17], or the interactors described in [2]. Renderable forms are specified as programs written in an interpreted scripting language much like Tcl/Tk <ref> [11, 12] </ref>. Like Tcl/Tk, event handlers are bound to geometric primitives and these handlers are invoked when events, such as mouse picks, are directed at the primitives. The event handlers are procedures written in the renderable scripting language.
Reference: [12] <author> John Ousterhout. </author> <title> An X11 toolkit based on the Tcl language. </title> <booktitle> In Proceedings of the 1991 Winter USENIX Conference, </booktitle> <year> 1991. </year>
Reference-contexts: As such, interactive renderables can be used to create 3D user-interface tools like the widgets described in [6] and [17], or the interactors described in [2]. Renderable forms are specified as programs written in an interpreted scripting language much like Tcl/Tk <ref> [11, 12] </ref>. Like Tcl/Tk, event handlers are bound to geometric primitives and these handlers are invoked when events, such as mouse picks, are directed at the primitives. The event handlers are procedures written in the renderable scripting language.
Reference: [13] <institution> Research Systems, Inc. </institution> <note> IDL User's Guide, </note> <month> January </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Scientists find the current complement of visualization systems, exemplified by AVS [1], IDL <ref> [13] </ref>, Data Explorer [8], and others, too difficult to use. Within such systems, they cannot easily find and then access their data. This problem is made more difficult when a search for data is conducted by content rather than by file name.
Reference: [14] <author> Larry Riddle et al. </author> <title> A multipath exploratory inquiry into a comprehensive hydroclimate database. </title> <type> unpublished report, </type> <year> 1993. </year>
Reference-contexts: Each column of a table corresponds to an attribute and each row is a record. For example, a hydroclimate database might contain a relation which links snow ratios in the Sierra Mountains of California with liquid equivalent precipitation and mean temperature <ref> [14] </ref>. Each row in such a relation corresponds to a record having values for precipitation, temperature, and the snow ratio for a particular measurement site. <p> A convenient way of visualizing this data is as a scatter plot which positions icons representing each record in the relation into a 3D space whose axes correspond to the three measured values <ref> [14] </ref>. Tioga would be responsible for determining that a scatter plot is an appropriate visualization technique and then executing a program which creates an image of the plot.
Reference: [15] <author> Christopher Riesbeck and Roger Schank. </author> <title> Inside Case-Based Reasoning. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1989. </year>
Reference-contexts: In order to make this possible, previously created visualization plans and the circumstances under which they were created must be stored in the Knowledge Base. One technique that can be used to encode and retrieve prior plans is that of case-based reasoning <ref> [15] </ref>. In general, the implementation of the Intelligent Subsystem in the Visualization Executive is intended to extend the work of Mackinlay [10], Casner [5], Senay and Ignatius [18], and Beshers and Feiner [2].
Reference: [16] <editor> John Roads et al. </editor> <title> A preliminary description of western U. </title> <editor> S. climatology. </editor> <booktitle> In Proceedings of the Ninth Annual Pacific Climate Workshop, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: Non-relational data consists of information that cannot easily be represented in a tabular format, for example, satellite images or simulation output from a climate modeling program <ref> [16] </ref>. Before a satellite image can be displayed, the intensity values at each pixel must be mapped into red, green, and blue color coordinates. Field values from climate model output can be visualized by creating iso-surfaces embedded in a 3D world whose axes correspond to latitude, longitude, and altitude.
Reference: [17] <author> George Robertson et al. </author> <title> Information visualization using 3D interactive animation. </title> <journal> Communications of the ACM, </journal> <volume> 36(4) </volume> <pages> 56-71, </pages> <year> 1993. </year>
Reference-contexts: In addition, interactive renderables have behavioral properties which are invoked in response to user inputs. As such, interactive renderables can be used to create 3D user-interface tools like the widgets described in [6] and <ref> [17] </ref>, or the interactors described in [2]. Renderable forms are specified as programs written in an interpreted scripting language much like Tcl/Tk [11, 12]. Like Tcl/Tk, event handlers are bound to geometric primitives and these handlers are invoked when events, such as mouse picks, are directed at the primitives. <p> For instance, various data dimensions can be encoded using colors, textures, and the sizes and orientations of scene components. Examples of virtual environments which encode multi-dimensional data are provided in <ref> [17] </ref> which describes scenes visualized with the 3D Information Visualizer. Beyond movement through static environments, time is yet another dimension that can be used for encoding data so that objects in a scene or even entire scenes may change in time.
Reference: [18] <author> Hikmet Senay and Eve Ignatius. </author> <title> Vista: A knowledge based system for scientific data visualization. </title> <type> Technical Report GWU-IIST-92-10, </type> <institution> George Washington University, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: One technique that can be used to encode and retrieve prior plans is that of case-based reasoning [15]. In general, the implementation of the Intelligent Subsystem in the Visualization Executive is intended to extend the work of Mackinlay [10], Casner [5], Senay and Ignatius <ref> [18] </ref>, and Beshers and Feiner [2]. Both Mackinlay and Casner dealt with the automatic, 2D presentation of relational data while Senay and Ignatius, and Beshers and Feiner dealt with 3D visualization of data which could also be non-relational.
Reference: [19] <institution> Silicon Graphics Inc. </institution> <note> Explorer User's Guide, </note> <year> 1992. </year>
Reference-contexts: These parameters are denoted in Figure 2 by ball-and-stick icons attached to certain module boxes. Such data flow programming environments are common in scientific visualization systems as evidenced by systems such as AVS [1], Explorer <ref> [19] </ref>, and Khoros [9]. Recipes may contain one or more special module instances called eyes. Eye modules are responsible for converting database objects into renderable forms. These modules take as input any number of database objects packaged as abstract data types representing fiber bundles 1 .
Reference: [20] <author> Michael Stonebraker et al. </author> <title> Tioga: Providing data management support for scientific visualization applications. </title> <type> Sequoia 2000 Technical Report 93/29, </type> <institution> University of California, Berkeley, </institution> <month> April </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: A companion paper describes the back-end of Tioga which is chiefly responsible for servicing requests to the database <ref> [20] </ref>. The main idea underlying the design of the Tioga front-end is to merge knowledge-based systems with visualization and graphical user-interfaces. Scientists specify what data sets they are interested in by navigating through a database using visual, point-and-click interfaces.
References-found: 20

