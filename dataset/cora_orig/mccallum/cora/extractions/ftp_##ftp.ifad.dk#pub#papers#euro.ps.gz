URL: ftp://ftp.ifad.dk/pub/papers/euro.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: Making Specifications Executable Using IPTES Meta-IV  
Abstract: This article discusses the extra effort required to make specifications executable. With an origin in essential (but in general non-executable) specification techniques and specification language constructs the limitations of writing specifications in an executable language are discussed. The (executable) example specifications are written in IPTES Meta-IV which is a subset of BSI/VDM-SL.
Abstract-found: 1
Intro-found: 1
Reference: [Alexander&90] <author> Heather Alexander and Val Jones. </author> <title> Software Design and Prototyping using Me Too. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year> <pages> 279 pages. </pages>
Reference-contexts: In addition to these two we have looked at `me too' <ref> [Alexander&90] </ref>. The main difference between our executable language and the existing ones is the generality of the pattern matching and the powerful let : : : be st : : : in : : : construct.
Reference: [BSIVDM91] <institution> VDM Specification Language - Proto-Standard. </institution> <type> Technical Report, </type> <institution> British Standards Institution, </institution> <month> December </month> <year> 1991. </year> <pages> 237 pages. </pages> <address> BSI IST/5/50 N-231. </address>
Reference-contexts: We have selected an executable subset of this language and specified and implemented an interpreter for that subset. Our specification language is called IPTES Meta-IV and it is derived from BSI/VDM-SL 2 <ref> [BSIVDM91] </ref>. This standard also includes an ASCII syntax that we conform to as well. The language includes looseness [Larsen&91] which is a strong concept not normally found in executable specification languages. This topic will be further described in Section 4.
Reference: [Ha87] <author> Manfred Ha. </author> <title> Development and Application of a Meta IV Compiler. In VDM A Formal Method at Work, </title> <type> pages 118-141, </type> <institution> Institut fur Informatik und Praktische Mathematik, Springer-Verlag, </institution> <month> March </month> <year> 1987. </year> <pages> 24 pages. </pages>
Reference-contexts: In [Plat&89] an overview of existing tool support for VDM is presented. Only two projects dealing with an executable subset of VDM-SL are given in that overview: the Meta-IV compiler project from Kiel University <ref> [Ha87] </ref>, and the EPROS project where both an interpreter and a compiler for a language called EPROL (strongly inspired by VDM) have been developed [Hekmatpour&88]. In addition to these two we have looked at `me too' [Alexander&90].
Reference: [Hayes&89] <author> I.J. Hayes, C.B. Jones. </author> <title> Specifications are not (necessarily) executable. </title> <journal> Software Engineering Journal, </journal> <pages> 330-338, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The language includes looseness [Larsen&91] which is a strong concept not normally found in executable specification languages. This topic will be further described in Section 4. In IPTES the specifications of data transformations form running prototypes and there are benefits as well as drawbacks from this approach. In <ref> [Hayes&89] </ref> some arguments are put forward against executable specification languages. The arguments run along the lines, that there are a number of very strong specification techniques which in general are non-executable. In this paper we will examine some examples of non-executable specifications (taken from [Hayes&89]), and show how an executable IPTES <p> In <ref> [Hayes&89] </ref> some arguments are put forward against executable specification languages. The arguments run along the lines, that there are a number of very strong specification techniques which in general are non-executable. In this paper we will examine some examples of non-executable specifications (taken from [Hayes&89]), and show how an executable IPTES Meta-IV specification can be derived. The examples in this paper are written according to the mathematical syntax of VDM-SL. Example functions with signatures are executable whereas the quantified equations in general are not. <p> When a specification allows a choice between a number of different results it is termed `loose'. In the following sections we will examine some deterministic specification techniques and discuss the cost of making them executable. The examples are taken from <ref> [Hayes&89] </ref>. 3.1 Specifying by Inverse In the case that there are no known functions with which to specify like e.g. when dealing with novel concepts, it can sometimes be useful to constrain a function by applying the inverse of a known function.
Reference: [Hekmatpour&88] <author> Sharam Hekmatpour and Darrel Ince. </author> <title> Software Prototyping, Formal Methods and VDM. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year> <pages> 222 pages. </pages>
Reference-contexts: Whether prototypes are used evolutionary, incrementally or on a throw-away basis they can be written in an executable specification language. From that point of view there are several advantages in having executable specification <ref> [Hekmatpour&88] </ref>. These advantages include: * Once the specification (and verification) of a system has been completed there is no extra cost involved in producing a prototype. <p> Only two projects dealing with an executable subset of VDM-SL are given in that overview: the Meta-IV compiler project from Kiel University [Ha87], and the EPROS project where both an interpreter and a compiler for a language called EPROL (strongly inspired by VDM) have been developed <ref> [Hekmatpour&88] </ref>. In addition to these two we have looked at `me too' [Alexander&90]. The main difference between our executable language and the existing ones is the generality of the pattern matching and the powerful let : : : be st : : : in : : : construct.
Reference: [Larsen&91] <author> Peter Gorm Larsen and Poul Btgh Lassen. </author> <title> An Executable Subset of Meta-IV with Loose Specification. </title> <booktitle> In VDM'91 Symposium, VDM Europe, </booktitle> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1991. </year> <pages> 15 pages. </pages>
Reference-contexts: Our specification language is called IPTES Meta-IV and it is derived from BSI/VDM-SL 2 [BSIVDM91]. This standard also includes an ASCII syntax that we conform to as well. The language includes looseness <ref> [Larsen&91] </ref> which is a strong concept not normally found in executable specification languages. This topic will be further described in Section 4. In IPTES the specifications of data transformations form running prototypes and there are benefits as well as drawbacks from this approach.
Reference: [Plat&89] <author> Nico Plat and Hans Toetenel. </author> <title> Tool support for VDM. </title> <type> Technical Report 89-81, </type> <institution> Delft University of Technology, </institution> <month> November </month> <year> 1989. </year> <pages> 52 pages. </pages>
Reference-contexts: In <ref> [Plat&89] </ref> an overview of existing tool support for VDM is presented.
Reference: [Pulli&91] <author> P. Pulli, R. Elmstrtm, G. Leon, J.A. de la Puente. </author> <title> IPTES- Incremental Prototyping Technology for Embedded real-time Systems. </title> <booktitle> In ESPRIT Information Processing Systems and Software, Results and Progress of Selected Projects 1991, </booktitle> <pages> pages 497-512, </pages> <booktitle> Esprit, Commission of the European Communities, </booktitle> <month> November </month> <year> 1991. </year> <pages> 16 pages. </pages> <address> IPTES Doc.id. :IPTES-IFAD-61-V1.1. </address>
Reference-contexts: 1 Introduction In ESPRIT project EP5570 IPTES 1 <ref> [Pulli&91] </ref> the Ward/Mellor notation of SA/RT [Ward&85] is being formalized to allow execution and animation of SA/RT models. As a part of the IPTES project a language has been developed for specifying data transformations in SA/RT (pure functional transformations).
Reference: [Ward&85] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems. Volume 1-3, </title> <publisher> Yourdon Press, </publisher> <address> New York, </address> <pages> 1985-1986. </pages>
Reference-contexts: 1 Introduction In ESPRIT project EP5570 IPTES 1 [Pulli&91] the Ward/Mellor notation of SA/RT <ref> [Ward&85] </ref> is being formalized to allow execution and animation of SA/RT models. As a part of the IPTES project a language has been developed for specifying data transformations in SA/RT (pure functional transformations).
Reference: [Wieth89] <author> Morten Wieth. </author> <title> Loose Specification and its Semantics. </title> <editor> In G.X. Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 1115-1120, </pages> <publisher> IFIP, North-Holland, </publisher> <month> August </month> <year> 1989. </year> <pages> 6 pages. 9 </pages>
Reference-contexts: Since some (internal) choices can lead to external visible looseness one cannot separate the two types of looseness. One should also be aware of the different ways to interpret looseness <ref> [Wieth89] </ref> when implementing the specifications. There are (at least) two ways to interpret looseness either under-determinedly or non-deterministically.
References-found: 10

