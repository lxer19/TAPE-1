URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1993/GIT-CC-93-44.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.93.html
Root-URL: 
Email: amir@cc.gatech.edu;  farach@dimacs.rutgers.edu;  muthu@cs.nyu.edu  
Phone: (908) 932-5928;  
Title: Alphabet Dependence in Parameterized Matching  
Author: Amihood Amir Martin Farach S. Muthukrishnan 
Note: Partially supported by NSF grant CCR-92-23699 and IRI-90-13055. DIMACS,  Supported by DIMACS under NSF contract STC-88-09648.  Partially supported by NSF/DARPA grant CCR-89-06949 and by NSF grant CCR-91-03953.  
Date: July 1993  
Address: GIT-CC-93/44  Atlanta, Georgia 30332-0280  Atlanta, GA 30332-0280; (404) 853-0083;  Piscataway, NJ 08855;  251 Mercer Street, New York, NY 10012; (212) 998-3061;  
Affiliation: Georgia Tech DIMACS Courant Institute Rutgers U.  College of Computing Georgia Institute of Technology  College of Computing, Georgia Institute of Technology,  Box 1179, Rutgers University,  Courant Institute of Mathematical Sciences,  
Abstract: The classical pattern matching paradigm is that of seeking occurrences of one string in another, where both strings are drawn from an alphabet set . A recently introduced model is that of parameterized pattern matching; the main motivation for this scheme lies in software maintenance where programs are considered "identical" even if variables are different. Strings, under this model, additionally have symbols from a variable set and occurrences of one string in the other up to a renaming of the variables are sought. In this paper we show that finding the occurrences of a m-length string in a n-length string under the parameterized pattern matching paradigm can be done in time O(n log ), where = min(m; jj); that is, independent of jj. Additionally, we show that in general this dependence on jj is inherent to any algorithm for this problem in the comparison model that is, our algorithm is optimal. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho and M.J. Corasick. </author> <title> Efficient string matching. </title> <journal> C. ACM, </journal> <volume> 18(6) </volume> <pages> 333-340, </pages> <year> 1975. </year>
Reference-contexts: This overhead appears as a result of the complexity of constructing the parameterized suffix tree. Idury and Schaffer [6] considered a generalization of the standard p-string matching, namely, dictionary matching under the parameterized pattern matching model. They used a modified Aho-Corasick automaton <ref> [1] </ref> that, again, has a log (jj + jj) multiplicative factor. In this paper, we investigate the alphabet-dependence in the complexity of the standard p-string matching problem. We provide an algorithm for p-string matching that takes time O (n log ), where = min (m; jj). <p> We modify the KMP algorithm to solve the m-matching problem simply by replacing every equality comparison "x = y" by "x ~ = y". Implementation of "x ~ = y" Construct table A <ref> [1] </ref>; . . .; A [m] where A [i] = the largest k; 1 k &lt; i, such that p k = p i . If no such k exists then A [i] = i.
Reference: [2] <author> B. S. Baker. </author> <title> A theory of parameterized pattern matching: </title> <booktitle> algorithms and applications. In Proc. 25th STOC, </booktitle> <pages> pages 71-80. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: This problem is known to be solvable in O (n + m) time independent of the alphabet size jj [4, 7]. A related model of parameterized pattern matching was recently introduced by Baker <ref> [2] </ref>. The main motivation for this scheme lies in software maintenance, where programs are to be considered "identical" even if variable names are different. Therefore, strings under this model are comprised of symbols from two disjoint sets and containing fixed symbols and variable/parameter symbols respectively. <p> Corresponding to standard string matching, the standard p-string matching problem is to find all parameterized occurrences of a pattern string of length m in a text string of length n. Baker <ref> [2] </ref> investigated the problem of finding repeated maximal parameterized occurrences of substrings in a string. This is naturally done by an appropriate suffix tree and for this purpose, Baker developed algorithms to build parameterized suffix trees.
Reference: [3] <author> A. Borodin, F. Fich, F. Meyer auf der Heide, E. Upfal, and A. Wigderson. </author> <title> A time-space tradeoff for element distinctness. </title> <journal> SIAM J. Computing, </journal> <volume> 16(1) </volume> <pages> 97-99, </pages> <year> 1987. </year>
Reference-contexts: The reduction in Lemma 4.1 is performed on the comparison-based branching program model (See <ref> [3] </ref> for the details about the model). To obtain a comparsion branching program for the element distinctness program, consider that for the standard p-string matching problem.
Reference: [4] <author> R.S. Boyer and J.S. Moore. </author> <title> A fast string searching algorithm. </title> <journal> Comm. ACM, </journal> <volume> 20 </volume> <pages> 762-772, </pages> <year> 1977. </year>
Reference-contexts: This problem is known to be solvable in O (n + m) time independent of the alphabet size jj <ref> [4, 7] </ref>. A related model of parameterized pattern matching was recently introduced by Baker [2]. The main motivation for this scheme lies in software maintenance, where programs are to be considered "identical" even if variable names are different.
Reference: [5] <author> Z. Galil and J.I. Seiferas. </author> <title> Time-space-optimal string matching. </title> <journal> J. Computer and System Science, </journal> <volume> 26 </volume> <pages> 280-294, </pages> <year> 1983. </year>
Reference-contexts: That completes the reduction. In contrast to this theorem, standard string matching is known to be performable using time T and space S, such that T S = O (m) <ref> [5] </ref>. 5 Conclusions For the standard p-string matching problem, we have derived an algorithm whose complexity is independent of jj, the size of the set of fixed symbols in the p-strings.
Reference: [6] <author> R.M. Idury and A.A Schaffer. </author> <title> multiple matching of parameterized patterns. </title> <note> submitted for publication, </note> <month> June </month> <year> 1993. </year>
Reference-contexts: This overhead appears as a result of the complexity of constructing the parameterized suffix tree. Idury and Schaffer <ref> [6] </ref> considered a generalization of the standard p-string matching, namely, dictionary matching under the parameterized pattern matching model. They used a modified Aho-Corasick automaton [1] that, again, has a log (jj + jj) multiplicative factor.
Reference: [7] <author> D.E. Knuth, J.H. Morris, and V.R. Pratt. </author> <title> Fast pattern matching in strings. </title> <journal> SIAM J. Comp., </journal> <volume> 6 </volume> <pages> 323-350, </pages> <year> 1977. </year>
Reference-contexts: This problem is known to be solvable in O (n + m) time independent of the alphabet size jj <ref> [4, 7] </ref>. A related model of parameterized pattern matching was recently introduced by Baker [2]. The main motivation for this scheme lies in software maintenance, where programs are to be considered "identical" even if variable names are different. <p> Solve the standard string matching problem for T 0 and P 0 by any O (n) time algorithm (e.g. <ref> [7] </ref>). Let S 1 be all locations of T 0 where P 0 matches. The strings T 00 and P 00 are p-strings over 00 = and parameter alphabet set 00 = fbg [ .
References-found: 7

