URL: http://www.first.gmd.de/~espress/publications/femsys97con.ps.gz
Refering-URL: http://www.first.gmd.de/~espress/gesamt_public.html
Root-URL: 
Title: An Adaptive Cruise Control System A Case Study for the Industrial Use of Formal Methods  
Author: Mirko Conrad, Dirk Wetter Daimler-Benz AG, Germany 
Keyword: Key Words: Automotive Electronics, Formal Methods, Specification, Statecharts, Z  
Abstract: Adaptive cruise control systems are typical examples of software-based, embedded systems in automotive electronics. To ensure an efficient development process of such systems, appropriate techniques for the specification and validation have to be applied. In particular, notations and techniques for a precise and executable specification of the system and the software have to be provided. In our talk, parts of the requirements specification of an embedded automotive system are presented. The specification framework used is based on the separate description of different aspects basis, functional and additional nonfunctional requirements by means of a methodically supported combination of Z, statecharts and activitycharts (data flow diagrams). The framework is part of an overall concept for the development of complex embedded systems with high quality demands in an industrial context. The framework enables the developer to avoid errors during the early phases of the development life cycle and provides a firm basis for the subsequent phases, especially for testing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bortolazzi, T. Hirth, T. Raith: </author> <title> Specification and Design of Electronic Control Units. </title> <booktitle> Proc. of European Design Automation Conference 1996 (EURO-DAC '96). </booktitle> <publisher> IEEE Computer Society Press 1996, pp.36-41. </publisher>
Reference-contexts: Approved aspects must be preserved and inherent limitations need to be overcome. On the basis of a reengineering and quality improvement analysis, the introduction of formal, executable specification models proved the backbone of the new development process <ref> [1] </ref>. Since most practitioners have little or no training in formal computer science, all notations used must be easy to learn and comprehensible. For reasons of efficiency the new approach must also be supported by tools which have to be integrated in the existing tool environment.
Reference: [2] <author> J. Bortolazzi: </author> <title> Integrating Statemate into the Electronic Vehicle System Design Process at Mercedes-Benz. </title> <booktitle> Proc. of Statemate Anwen-derforum 1996 </booktitle>
Reference-contexts: The Combined Use of Activitycharts, State-charts and Z The framework adopts the notations provided by the tool Statemate, namely activitycharts and statecharts. The tool has already been partially integrated into the electronic vehicle system design process at Mercedes-Benz <ref> [2] </ref>. The methodological support aims at the adoption of Statemate for 2 software development by means of a methodically supported combination with the formal language Z. Activitycharts [5] are hierarchical data flow diagrams.
Reference: [3] <author> J. Bowen, V. Stavridou: </author> <title> Safety-Critical Systems, Formal Methods and Standards. </title> <journal> Software Engineering Journal, </journal> <month> July </month> <year> 1995, </year> <pages> pp. 189-209 </pages>
Reference-contexts: Consequently, resources can be shifted to the early phases of the life cycle, and bugs can be discovered already during specification and design where its removal is less costly. Industrial applications have already shown the capability of reducing the overall development costs <ref> [3] </ref>. However, a single technique is not suited for describing all relevant aspects of the embedded software. Instead, a synergetical use of formal (mathematical) and established, well-known semi-formal (graphical) notations is possible, if each class of notations is used in its own rights. <p> Z [8] is a formal notation based on set theory and first order predicate logic. A currently ongoing international ISO standardization makes Z attractive for industrial use. It is used by industry in different projects as part of the software development process and has proved to be beneficial <ref> [3] </ref>. Z is well suited for a mathematically precise description of data transformations on different levels of abstraction. In our framework Z is used in three ways. Firstly, Z expressions denote properties of statecharts. Secondly, data transformations associated with basic activities and state-transitions are specified in Z, too. <p> They can also be applied to subsequent development phases. Compared to traditional approaches, the adoption of formal techniques requires more resources in the early stages of the life cycle. This is opposed to current industrial practice. Nevertheless, development costs are not only shifted but are likely to be reduced <ref> [3] </ref>. This paper presented a combination of the formal language Z and semi-formal notations provided by the tool Statemate for specification and design issues. The combined use overcomes the limitations of the separate application of either Z or State-mate.
Reference: [4] <author> M. Chiodo: </author> <title> Automotive Electronics A Major Application Field for Hardware-Software Co-Design. </title> <editor> In: G. De Micheli, M. Sami (eds.): Hardware/Software Co-Design, </editor> <publisher> Kluwer Academic Publishers 1996, </publisher> <pages> pp. 295-310. </pages>
Reference-contexts: In the development of automotive electronics a large amount of time and money is spent on rework due to incomplete, inconsistent or erroneous specifications, or wrong interpretation of ambiguous specifications <ref> [4] </ref>. Thus, the requirements specification stage in particular needs to be improved. On the basis of the given requirements the main ideas of the proposed specification framework are outlined in the following.
Reference: [5] <author> D. Harel, M. Politi: </author> <title> Modelling Reactive Systems with Statecharts: The Statemate Approach. </title> <publisher> i-Logix Inc. </publisher> <year> 1996 </year>
Reference-contexts: The tool has already been partially integrated into the electronic vehicle system design process at Mercedes-Benz [2]. The methodological support aims at the adoption of Statemate for 2 software development by means of a methodically supported combination with the formal language Z. Activitycharts <ref> [5] </ref> are hierarchical data flow diagrams. They establish the architecture of the software specification and visualize the structural aspects of the software system, e.g. the division into components and the interface to the operating environment. Statecharts [5] generalize state-transition diagrams. <p> Activitycharts <ref> [5] </ref> are hierarchical data flow diagrams. They establish the architecture of the software specification and visualize the structural aspects of the software system, e.g. the division into components and the interface to the operating environment. Statecharts [5] generalize state-transition diagrams. They are used to specify and design reactive behaviour, e.g. by describing the response of software to input stimuli. While also addressing aspects like hierarchy, concurrency and real-time behaviour, statecharts retain the visual and intuitive appeal inherent to ordinary state diagrams.
Reference: [6] <author> F. Lattemann, E. Lehmann: </author> <title> Systematisches Vorgehen bei der Anforderungsspezifikation eingebetteter Systeme. </title> <type> Technical Report F3S-96-009, </type> <institution> Daimler-Benz AG, Systems Technology Research, </institution> <address> Berlin 1996 </address>
Reference-contexts: Furthermore, the use of Z tools provides additional supporting capabilities for extended type-checking and supporting proofs. Formal notations, even in conjunction with other techniques, cannot replace an overall software technology. Their application has to be integrated into an appropriate methodological framework, which is discussed in a special specification guide <ref> [6] </ref>. The further adaptation to vehicle specific needs is still under consideration. The separation of different specification aspects provides tailoring according to different levels of rigour. Furthermore, the proportion between the formal and semi-formal notations can be varied.
Reference: [7] <author> H. Singh, M. Conrad, G. Egger, S. Sadeghipour: </author> <title> Tool-Supported Test Case Design Based on Z and the Classification-Tree Method. </title> <booktitle> To appear in Proc. of 2nd Workshop on Systems for Computer-aided Specification, Development and Verification, </booktitle> <address> Bremen 1996. </address>
Reference-contexts: Currently it is being extended to software design. Furthermore, the proposed formal specifications contain a lot of useful information necessary for the central test activities. Methodological support for systematic and effective test case generation based on specifications with Z and Statemate is currently under development <ref> [7] </ref>. The approach will be integrated into the state-of-the-art testing tools CTE and TESSY, developed at Daimler-Benz Systems Technology Research to further improve the test efficiency.

References-found: 7

