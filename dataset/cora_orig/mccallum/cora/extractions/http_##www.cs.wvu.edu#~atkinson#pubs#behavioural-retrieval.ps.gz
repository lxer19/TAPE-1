URL: http://www.cs.wvu.edu/~atkinson/pubs/behavioural-retrieval.ps.gz
Refering-URL: http://www.cs.wvu.edu/~atkinson/publications.html
Root-URL: http://www.cs.wvu.edu
Email: atkis@cs.uq.oz.au rduke@cs.uq.oz.au  
Title: Behavioural Retrieval from Class Libraries  
Author: Steven Atkinson Roger Duke 
Address: AUSTRALIA AUSTRALIA  
Affiliation: Software Verification Research Centre Software Verification Research Centre Department of Computer Science Department of Computer Science University of Queensland University of Queensland  
Abstract: The central problem associated with libraries of reusable software components such as classes is that of retrieval: how to find in the library those classes that can be used in the construction of a particular application. At the heart of class retrieval is the issue of behaviour: to decide if a library class is appropriate for a particular application it is necessary to know how objects of that class behave, i.e. how they react when sent messages by their environment. In this paper a methodology for searching libraries to find classes whose objects behave in some specified manner is defined. In general, it will not be possible to find a class whose objects behave exactly as required. In this case the methodology finds classes whose objects best approximate the specified behaviour in a precisely defined sense. The aim is to retrieve classes that can be easily modified to define objects that behave exactly as required. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Atkinson and R. Duke. </author> <title> A methodology for behavioural retrieval from class libraries. </title> <type> Technical Report 94-28, </type> <institution> Software Verification Research Centre, Dept. of Computer Science, Univ. of Queensland, Australia, </institution> <year> 1994. </year>
Reference-contexts: Secondly, the definition allows for removal of rejections by allowing sequences in B 2 to be extensions of sequences in B 1 . The proof that v defines a partial order is straightforward, and given in <ref> [1] </ref>. 3.4 The Lattice of Behaviours The partial order v on behaviours defines a lattice whose join and meet operations are defined in this section. <p> It is straightforward to show that the meet operator above does define the greatest lower bound operation on the lattice defined by v. The proof is given in <ref> [1] </ref>. 3.4.2 The Join of Behaviours The join of class behaviours is not always defined because two classes may respond to a program p with completely unrelated output. <p> The proof that t defines the least upper bound operation on the lattice defined by v is given in <ref> [1] </ref>. 4 Behavioural Retrieval In this section a methodology for searching class libraries to find classes whose objects behave in some specified manner is given. <p> that if there are classes C in the library L whose behaviour with respect to the program p is equal to the desired behaviour b, then these classes (and no others) will be retrieved by the methodology; i.e. behavioural retrieval (L) = C A proof of this is given in <ref> [1] </ref>. 5 An Example This section provides an example to illustrate the method of behavioural retrieval established in Section 4. Suppose the library L consists of 4 vending machine classes named A, B, C and D .
Reference: [2] <author> T. J. Biggerstaff and C. Richter. </author> <title> Reusability framework, assessment, and directions. </title> <journal> IEEE Software, </journal> <volume> 4(2) </volume> <pages> 41-49, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: Furthermore, object orientation has been seen as the technology most likely to achieve this through the construction of class libraries [6, 7]. In practice, however, the problems associated with software reuse are formidable despite considerable recent effort <ref> [2, 13] </ref>. The central problem associated with libraries of reusable software components is that of retrieval. A library is of little use unless it can be easily searched and suitable components retrieved.
Reference: [3] <author> R. Duke, P. King, G. Rose, and G. Smith. </author> <title> The Object-Z specification language: </title> <type> Version 1. Technical Report 91-1, </type> <institution> Software Verification Research Centre, Dept. of Computer Science, Univ. of Queensland, Australia, </institution> <year> 1991. </year>
Reference-contexts: The relationship between instances of the abstract class model described in Section 2 and classes specified in object-oriented specification languages such as Object-Z <ref> [3] </ref> needs to be investigated, particularly to determine a method of deriving behaviour from formal specifications. The aim is to enable the methodology to be applied to a library of classes described by formal specifications.
Reference: [4] <author> R. J. Hall. </author> <title> Generalized behavior-based retrieval. </title> <booktitle> In Proceedings of the 15th International Conference on Software Engineering, </booktitle> <pages> pages 371-380, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: However, it is the dynamic behaviour of objects that is of the most concern when building applications <ref> [4, 10] </ref>. At heart, the task of retrieval is to find those classes in the library whose objects behave in some specified way when sent messages by their environment. It is this behavioural view of retrieval that we discuss.
Reference: [5] <author> M. D. McIlroy. </author> <title> Mass produced software components. </title> <booktitle> Proceedings of the 1969 NATO Conference on Software Engineeering, </booktitle> <year> 1969. </year>
Reference-contexts: 1 Introduction It has been an article of faith for some time that comprehensive libraries of reusable software components will transform and mature the practice of software engineering <ref> [5, 16] </ref>. Furthermore, object orientation has been seen as the technology most likely to achieve this through the construction of class libraries [6, 7]. In practice, however, the problems associated with software reuse are formidable despite considerable recent effort [2, 13].
Reference: [6] <author> B. Meyer. </author> <title> Reusability: The case for object-oriented design. </title> <journal> IEEE Software, </journal> <volume> 4(2) </volume> <pages> 50-64, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: 1 Introduction It has been an article of faith for some time that comprehensive libraries of reusable software components will transform and mature the practice of software engineering [5, 16]. Furthermore, object orientation has been seen as the technology most likely to achieve this through the construction of class libraries <ref> [6, 7] </ref>. In practice, however, the problems associated with software reuse are formidable despite considerable recent effort [2, 13]. The central problem associated with libraries of reusable software components is that of retrieval. A library is of little use unless it can be easily searched and suitable components retrieved.
Reference: [7] <author> B. Meyer. </author> <title> Reusable software The base object-oriented component libraries. </title> <publisher> Prentice Hall, </publisher> <address> ISE, </address> <institution> Santa Barbara and SOL, Paris, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction It has been an article of faith for some time that comprehensive libraries of reusable software components will transform and mature the practice of software engineering [5, 16]. Furthermore, object orientation has been seen as the technology most likely to achieve this through the construction of class libraries <ref> [6, 7] </ref>. In practice, however, the problems associated with software reuse are formidable despite considerable recent effort [2, 13]. The central problem associated with libraries of reusable software components is that of retrieval. A library is of little use unless it can be easily searched and suitable components retrieved.
Reference: [8] <author> A. Mili, R. Mili, and R. Mittermeir. </author> <title> Storing and retrieving software components: A refinement based system. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 91-100. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: The principle of behavioural retrieval from software libraries has been suggested by Podgurski and Pierce [10]; the idea of using a lattice structure as the basis of behavioural retrieval has been suggested by Mili <ref> [8] </ref>. In our paper we combine this work and extend it in three directions. Firstly, an abstract model of classes and class behaviour is defined, laying the foundation for a general theory of behavioural retrieval, independent of any particular language formalism.
Reference: [9] <author> Xavier Pintado. </author> <title> Selection and exploration in an object-oriented environment: The affinity browser. Object management, </title> <institution> Centre Univer-sitaire d'Informatique, University of Geneva, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: Until recently, most effort in solving the retrieval problem has gone into software classification, with emphasis upon domain-specific aspects such as the signature of operations [17], and the determination of static metrics that can be used when searching and retrieving <ref> [9, 12] </ref>. However, it is the dynamic behaviour of objects that is of the most concern when building applications [4, 10]. At heart, the task of retrieval is to find those classes in the library whose objects behave in some specified way when sent messages by their environment.
Reference: [10] <author> A. Podgurski and L. Pierce. </author> <title> Behaviour sampling: A technique for automated retrieval of reusable components. </title> <booktitle> In Proceedings of the 14th International Conference on Software Engineering, </booktitle> <pages> pages 349-360, </pages> <year> 1992. </year>
Reference-contexts: However, it is the dynamic behaviour of objects that is of the most concern when building applications <ref> [4, 10] </ref>. At heart, the task of retrieval is to find those classes in the library whose objects behave in some specified way when sent messages by their environment. It is this behavioural view of retrieval that we discuss. <p> The methodology is illustrated in Section 5 with a detailed example, while issues to do with its practical application are discussed in Section 6. The principle of behavioural retrieval from software libraries has been suggested by Podgurski and Pierce <ref> [10] </ref>; the idea of using a lattice structure as the basis of behavioural retrieval has been suggested by Mili [8]. In our paper we combine this work and extend it in three directions.
Reference: [11] <author> B. Potter, J. Sinclair, and D. Till. </author> <title> An Introduction to Formal Specification and Z. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Thirdly, a prescription for behavioural retrieval involving the join and meet lattice operations is given. Throughout this paper, the Z notation is used to specify concepts. In the main, Z is much like standard mathematical notation; readers unfamiliar with the notation may wish to consult <ref> [11, 15] </ref>. 2 An Abstract Class Model In this section an abstract model of class behaviour is formulated in terms of the response of objects of a class to sequences of messages.
Reference: [12] <author> R. Prieto-Diaz. </author> <title> Implementing faceted classification for software reuse. </title> <journal> Commun. ACM, </journal> <volume> 34(5) </volume> <pages> 88-97, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Until recently, most effort in solving the retrieval problem has gone into software classification, with emphasis upon domain-specific aspects such as the signature of operations [17], and the determination of static metrics that can be used when searching and retrieving <ref> [9, 12] </ref>. However, it is the dynamic behaviour of objects that is of the most concern when building applications [4, 10]. At heart, the task of retrieval is to find those classes in the library whose objects behave in some specified way when sent messages by their environment.
Reference: [13] <author> R. Prieto-Diaz. </author> <title> Status report software reusability. </title> <journal> IEEE Software, </journal> <volume> 10(3) </volume> <pages> 61-66, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Furthermore, object orientation has been seen as the technology most likely to achieve this through the construction of class libraries [6, 7]. In practice, however, the problems associated with software reuse are formidable despite considerable recent effort <ref> [2, 13] </ref>. The central problem associated with libraries of reusable software components is that of retrieval. A library is of little use unless it can be easily searched and suitable components retrieved.
Reference: [14] <author> G. Salton and M. J. McGill. </author> <title> Introduction to Modern Information Retrieval. </title> <publisher> McGraw-Hill, </publisher> <year> 1983. </year>
Reference-contexts: As these strategies will not in general select identical sets of behaviours in B, both are employed in order to maximize the recall (defined to be ratio of the number of relevant retrievals to the number of relevant solutions <ref> [14] </ref>) of the retrieval process.
Reference: [15] <author> J.M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: Thirdly, a prescription for behavioural retrieval involving the join and meet lattice operations is given. Throughout this paper, the Z notation is used to specify concepts. In the main, Z is much like standard mathematical notation; readers unfamiliar with the notation may wish to consult <ref> [11, 15] </ref>. 2 An Abstract Class Model In this section an abstract model of class behaviour is formulated in terms of the response of objects of a class to sequences of messages.
Reference: [16] <author> P. </author> <title> Wegner. </title> <journal> Capital-intensive software technology. IEEE Software, </journal> <volume> 1(3), </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: 1 Introduction It has been an article of faith for some time that comprehensive libraries of reusable software components will transform and mature the practice of software engineering <ref> [5, 16] </ref>. Furthermore, object orientation has been seen as the technology most likely to achieve this through the construction of class libraries [6, 7]. In practice, however, the problems associated with software reuse are formidable despite considerable recent effort [2, 13].
Reference: [17] <author> A. Zaremski and J. M. Wing. </author> <title> Signature matching: A key to reuse. </title> <type> Technical Report CMU-CS-93-151, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: A library is of little use unless it can be easily searched and suitable components retrieved. Until recently, most effort in solving the retrieval problem has gone into software classification, with emphasis upon domain-specific aspects such as the signature of operations <ref> [17] </ref>, and the determination of static metrics that can be used when searching and retrieving [9, 12]. However, it is the dynamic behaviour of objects that is of the most concern when building applications [4, 10].
References-found: 17

