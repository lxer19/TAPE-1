URL: http://www.cs.umd.edu/projects/bdisk/oopsla97.ps
Refering-URL: http://http.cs.berkeley.edu/~randy/BTG.html
Root-URL: 
Email: franklin@cs.umd.edu  sbz@cs.brown.edu  
Title: A Framework for Scalable Dissemination-Based Systems  
Author: Michael Franklin Stanley Zdonik 
Affiliation: University of Maryland  Brown University  
Abstract: The dramatic improvements in global interconnectivity due to intranets, extranets, and the Internet has led to an explosion in the number and variety of new data-intensive applications. Along with the proliferation of these new applications have come increased problems of scale. This is demonstrated by frequent delays and service disruptions when accessing networked data sources. Recently, push-based techniques have been proposed as a solution to scalability problems for distributed applications. This paper argues that push indeed has its place, but that it is just one aspect of a much larger design space for distributed information systems. We propose the notion of a Dissemination-Based Information System (DBIS) which integrates a variety of data delivery mechanisms and information broker hierarchies. We discuss the properties of such systems and provide some insight into the architectural imperatives that will influence their design. The DBIS framework can serve as the basis for development of a toolkit for constructing distributed information systems that better match the technology they employ to the characteristics of the applications they are intended to support. 
Abstract-found: 1
Intro-found: 1
Reference: [Acha95a] <author> S. Acharya, R. Alonso, M. Franklin, S. Zdonik, </author> <title> "Broadcast Disks: Data Management for Asymmetric Communication Environments", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <month> May, </month> <year> 1995. </year>
Reference-contexts: Broadcast Disks Periodic push has been used for data dissemination in many systems such as TeleText [Amma85, Wong88], DataCycle [Herm87, Bowe92], Broadcast Disks <ref> [Acha95a, Acha95b] </ref> and mobile databases [Imie94a]. Clients needing access to a data item that is pushed periodically can wait until the item appears. <p> The broadcast schedule used by the push approach was tailored to support a skewed access pattern through the use of Broadcast Disks which allow the frequency of broadcast for an item to be based on that item's popularity <ref> [Acha95a, Acha95b] </ref>. As can be seen in the figure, the performance of pure push is independent of the number of clients listening to the broadcast here. <p> Deciding which object to evict from the cache when a new candidate arrives is another issue that must be addressed by any cache manager. Many systems use some form of LRU for this purpose. We have shown in previous work <ref> [Acha95a] </ref> that for some styles of data delivery (e.g., broadcast disks), LRU is not the most effective choice. For cyclic data delivery, in which different items can have different arrival frequencies, a cost-based caching scheme performs significantly better. In a DBIS, the modes of data delivery might change. <p> When A creates a broadcast disk which is read by B, B might then change its caching policy to a cost based scheme similar to the one that we propose in <ref> [Acha95a] </ref>. 3.3 Value-Added Nodes Some nodes may also add value to data as it passes through, by performing specific computations on that data. The computations can be simple or complex, or they can act on single values or sets of values. <p> Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan95, Best96], and Advanced Traveler Information Systems [Shek96]. Our work on Broadcast Disks differs from these in that we consider multi-level disks and their relationship to cache management. In <ref> [Acha95a] </ref>, we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. Recently, [Baru96] gave an algorithm to determine the parameters controlling a broadcast program. In [Acha96a], we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching.
Reference: [Acha95b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Dissemination-based Data Delivery Using Broadcast Disks", </title> <journal> IEEE Personal Communications, </journal> <volume> 2(6), </volume> <month> December, </month> <year> 1995. </year>
Reference-contexts: Broadcast Disks Periodic push has been used for data dissemination in many systems such as TeleText [Amma85, Wong88], DataCycle [Herm87, Bowe92], Broadcast Disks <ref> [Acha95a, Acha95b] </ref> and mobile databases [Imie94a]. Clients needing access to a data item that is pushed periodically can wait until the item appears. <p> The broadcast schedule used by the push approach was tailored to support a skewed access pattern through the use of Broadcast Disks which allow the frequency of broadcast for an item to be based on that item's popularity <ref> [Acha95a, Acha95b] </ref>. As can be seen in the figure, the performance of pure push is independent of the number of clients listening to the broadcast here.
Reference: [Acha96a] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Prefetching from a Broadcast Disk", </title> <booktitle> 12th International Conference on Data Engineering, </booktitle> <address> New Orleans, LA, </address> <month> February, </month> <year> 1996. </year>
Reference-contexts: In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. Recently, [Baru96] gave an algorithm to determine the parameters controlling a broadcast program. In <ref> [Acha96a] </ref>, we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching. More recently, in [Acha96b], we studied the influence of volatile data on client performance and showed that the Broadcast Disk environment can be made very robust in the presence of updates.
Reference: [Acha96b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Dissemi nating Updates on Broadcast Disks", </title> <booktitle> Proc. 22 nd VLDB Conf., </booktitle> <address> Bombay, India, </address> <month> September, </month> <year> 1996. </year>
Reference-contexts: An invalidation message results in the purge of the item from the cache. Alternatively, the new value could be propagated to the client cache managers. For typical client/server systems, invalidation is usually preferable. However, in our broadcast disk studies <ref> [Acha96b] </ref> we showed that for periodic broadcast, performance can often be improved using propagation. The decision about how current to keep the cached copies is the same as in other caching mechanisms. Once that has been decided, the means by which it is achieved can vary. <p> Recently, [Baru96] gave an algorithm to determine the parameters controlling a broadcast program. In [Acha96a], we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching. More recently, in <ref> [Acha96b] </ref>, we studied the influence of volatile data on client performance and showed that the Broadcast Disk environment can be made very robust in the presence of updates.
Reference: [Acha97] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Balancing Push and Pull for Data Broadcast", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Tucson, AZ, </address> <month> May, </month> <year> 1997. </year>
Reference-contexts: Choosing the proper mechanism (or combination of them) to use for a given link requires an understanding of the tradeoffs among them. In a recent paper, we studied one such set of tradeoffs; namely, those between broadcasting data using periodic push (Broadcast Disks) and aperiodic pull (request-response with snooping) <ref> [Acha97] </ref>. Here, we briefly discuss some observations from that study. The tradeoffs between push and pull in general revolve around the costs of initiating the transfer of data. A pull-based approach requires the use of a backchannel for each request. <p> One solution to this problem is to allow the clients to provide a profile of their interests to the servers. As mentioned above, Publish/subscribe protocols are one popular mechanism for providing such profiles. In <ref> [Acha97] </ref> we studied a hybrid push/pull broadcast system. <p> The fundamental performance tradeoff between these two approaches can be seen in in Figure 2, which shows results from <ref> [Acha97] </ref> 2 . The x-axis in the figure models the number of clients (all having identical access rates and distributions) that are accessing data from the broadcast. Thus, at a value of 250, the broadcast is serving 25 times as many clients than at a value of 10. <p> In this case the performance of aperiodic pull at saturation is worse than that of periodic push, because the broadcast schedule generated by the FIFO discipline is less well suited to the access pattern than the pre-computed schedule used by periodic push. As discussed in <ref> [Acha97] </ref>, the problems of pull can be exacerbated if the server drops client requests when it becomes overloaded. The tradeoffs described above give an indication of the kinds of concerns that must be balanced when choosing the proper data delivery mechanism for a given situation. <p> In [Acha96a], we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching. More recently, in [Acha96b], we studied the influence of volatile data on client performance and showed that the Broadcast Disk environment can be made very robust in the presence of updates. In <ref> [Acha97] </ref>, we explored the tradeoff between cyclic broadcast and pull. 7 Conclusions The increasing ability to interconnect computers through internetworking, mobile and wireless networks, and high-bandwidth content delivery to the home, has resulted in a proliferation of dissemination-oriented applications. A key attribute of many such applications is their huge scale.
Reference: [Amma85] <author> M. Ammar, J. Wong, </author> <title> "The Design of Teletext Broadcast Cycles", Perf. Evaluation, </title> <month> 5 </month> <year> (1985). </year>
Reference-contexts: Such protocols are typically performed in a 1-to-N fashion, but a similar protocol can be used over a unicast channel, as is done for triggers in active database systems. Broadcast Disks Periodic push has been used for data dissemination in many systems such as TeleText <ref> [Amma85, Wong88] </ref>, DataCycle [Herm87, Bowe92], Broadcast Disks [Acha95a, Acha95b] and mobile databases [Imie94a]. Clients needing access to a data item that is pushed periodically can wait until the item appears. <p> It obtains profiles from users that describe their interests, and then uses these profiles to assemble and update customized "newspapers" from a database of current stories. The Pointcast system has been touted as one of the first push-based systems. This is not exactly true. Other systems such as Teletex <ref> [Amma85] </ref>, BCS at MIT [Giff90], and Datacycle [Herm87] used push long before Pointcast. However, Pointcast was one of the first push-based systems to achieve wide-spread use. It is instructive, therefore, to see exactly how push is used in Pointcast 1.0 4 . <p> The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT [Yan95] and the Information Bus [Oki93]. There has also been work on broadcasting in Teletex systems <ref> [Amma85, Wong88] </ref>. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. The Datacycle Project [Bowe92, Herm87] at Bellcore investigated the notion of using a repetitive broadcast medium for database storage and query processing.
Reference: [Baru96] <author> S. Baruah and A. Bestavros, </author> <title> "Pinwheel Scheduling for Fault-tolerant Broadcast Disks in Real-time Database Systems", </title> <type> Technical Report TR-96-023, </type> <institution> Boston University, </institution> <month> August, </month> <year> 1996. </year>
Reference-contexts: Our work on Broadcast Disks differs from these in that we consider multi-level disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment. Recently, <ref> [Baru96] </ref> gave an algorithm to determine the parameters controlling a broadcast program. In [Acha96a], we showed how opportunistic prefetching by the client can significantly improve performance over demand-driven caching.
Reference: [Best96] <author> A. Bestavros, C. Cunha, </author> <title> "Server-initiated Document Dissemination for the WWW", IEEE Data Engineering Bulletin, </title> <type> 19(3), </type> <month> September, </month> <year> 1996. </year>
Reference-contexts: A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients. Some recent applications of dissemination-based systems include information dissemination on the Internet <ref> [Yan95, Best96] </ref>, and Advanced Traveler Information Systems [Shek96]. Our work on Broadcast Disks differs from these in that we consider multi-level disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment.
Reference: [Bowe92] <author> T. Bowen, G. Gopal, G. Herman, T. Hickey, K. Lee, W. Mansfield, J. Raitz, A. Weinrib, </author> <title> "The Datacycle Architecture", </title> <journal> CACM, </journal> <volume> 35(12), </volume> <month> December, </month> <year> 1992. </year>
Reference-contexts: Such protocols are typically performed in a 1-to-N fashion, but a similar protocol can be used over a unicast channel, as is done for triggers in active database systems. Broadcast Disks Periodic push has been used for data dissemination in many systems such as TeleText [Amma85, Wong88], DataCycle <ref> [Herm87, Bowe92] </ref>, Broadcast Disks [Acha95a, Acha95b] and mobile databases [Imie94a]. Clients needing access to a data item that is pushed periodically can wait until the item appears. <p> There has also been work on broadcasting in Teletex systems [Amma85, Wong88]. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. The Datacycle Project <ref> [Bowe92, Herm87] </ref> at Bellcore investigated the notion of using a repetitive broadcast medium for database storage and query processing. An early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Care91] <author> M. Carey, M. Franklin, M. Livny, E. Shekita, </author> <title> "Data Caching Tradeoffs in Client-Server DBMS Architectures", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Denver, </address> <month> June, </month> <year> 1991. </year>
Reference: [Dao96] <author> S. Dao, B. Perry, </author> <title> "Information Dissemination in Hybrid Satellite/Terrestrial Networks", </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference-contexts: More recently, there has been work on data management issues for wireless environments [Katz94]. Some of work in this area has focused on satellite-based systems <ref> [Dao96, Dire96] </ref> in which the downstream bandwidth is quite high. The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT [Yan95] and the Information Bus [Oki93].
Reference: [Dire96] <institution> Hughes Network Systems, DirecPC Home Page, </institution> <address> http://www.direcpc.com/, Oct, </address> <year> 1996. </year>
Reference-contexts: More recently, there has been work on data management issues for wireless environments [Katz94]. Some of work in this area has focused on satellite-based systems <ref> [Dao96, Dire96] </ref> in which the downstream bandwidth is quite high. The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT [Yan95] and the Information Bus [Oki93].
Reference: [Erik94] <author> H. Erikson,"MBONE: </author> <title> The Multicast Backbone", </title> <journal> CACM, </journal> <volume> 37(8), </volume> <month> August, </month> <year> 1994. </year>
Reference: [Fran96a] <author> M. Franklin, </author> <title> Client Data Caching: A Foundation for High Performance Object Database Systems, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <month> February, </month> <year> 1996. </year>
Reference-contexts: The management of data in distributed settings has a long history. The preponderance of previous work assumes that data is requested when needed (i.e., pull) and that servers respond to these requests in an orderly fashion. Some of this work has occurred in a client/server database setting <ref> [Fran96a] </ref> while other work has been done in the distributed file system context [Levy90]. There has been a lot of work on caching in these environments, much of which has focused on the maintenance of cache consistency in the face of updates.
Reference: [Fran96b] <author> M. Franklin, S. </author> <title> Zdonik, </title> <journal> "Dissemination-Based Information Systems", IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference: [Giff90] <author> D. Gifford, </author> <title> "Polychannel Systems for Mass Digital Communication", </title> <journal> CACM, </journal> <volume> 33(2), </volume> <month> February, </month> <year> 1990. </year>
Reference-contexts: The Pointcast system has been touted as one of the first push-based systems. This is not exactly true. Other systems such as Teletex [Amma85], BCS at MIT <ref> [Giff90] </ref>, and Datacycle [Herm87] used push long before Pointcast. However, Pointcast was one of the first push-based systems to achieve wide-spread use. It is instructive, therefore, to see exactly how push is used in Pointcast 1.0 4 . <p> The Datacycle Project [Bowe92, Herm87] at Bellcore investigated the notion of using a repetitive broadcast medium for database storage and query processing. An early effort in information broadcasting, the Boston Community Information System (BCIS) is described in <ref> [Giff90] </ref>. BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Both Datacycle and BCIS used a flat broadcast (i.e., all items have the same frequency).
Reference: [Glan96] <author> D. Glance, </author> <title> "Multicast Support for Data Dissemination in OrbixTalk", </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference-contexts: If the information is returned over a 1-to-N link, then as with request/response, other clients can snoop to obtain data items as they go by. Publish/Subscribe - Publish/subscribe protocols are becoming a popular way to disseminate information in a network <ref> [Oki93, Yan95, Glan96] </ref>. Publish/subscribe is push-based; data flow is initiated by the data sources, and is aperiodic, as there is no predefined schedule for sending data.
Reference: [Herm87] <author> G. Herman, G. Gopal, K. Lee, A. Weinrib, </author> <title> "The Datacycle Architecture for Very High Throughput Database Systems", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May, </month> <year> 1987. </year>
Reference-contexts: Such protocols are typically performed in a 1-to-N fashion, but a similar protocol can be used over a unicast channel, as is done for triggers in active database systems. Broadcast Disks Periodic push has been used for data dissemination in many systems such as TeleText [Amma85, Wong88], DataCycle <ref> [Herm87, Bowe92] </ref>, Broadcast Disks [Acha95a, Acha95b] and mobile databases [Imie94a]. Clients needing access to a data item that is pushed periodically can wait until the item appears. <p> The Pointcast system has been touted as one of the first push-based systems. This is not exactly true. Other systems such as Teletex [Amma85], BCS at MIT [Giff90], and Datacycle <ref> [Herm87] </ref> used push long before Pointcast. However, Pointcast was one of the first push-based systems to achieve wide-spread use. It is instructive, therefore, to see exactly how push is used in Pointcast 1.0 4 . <p> There has also been work on broadcasting in Teletex systems [Amma85, Wong88]. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. The Datacycle Project <ref> [Bowe92, Herm87] </ref> at Bellcore investigated the notion of using a repetitive broadcast medium for database storage and query processing. An early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Imie94a] <author> T. Imielinski, B. Badrinath, </author> <title> "Mobile Wireless Computing: Challenges in Data Management", </title> <journal> CACM, </journal> <volume> 37(10), </volume> <month> October, </month> <year> 1994. </year>
Reference-contexts: Broadcast Disks Periodic push has been used for data dissemination in many systems such as TeleText [Amma85, Wong88], DataCycle [Herm87, Bowe92], Broadcast Disks [Acha95a, Acha95b] and mobile databases <ref> [Imie94a] </ref>. Clients needing access to a data item that is pushed periodically can wait until the item appears. <p> BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Both Datacycle and BCIS used a flat broadcast (i.e., all items have the same frequency). The mobility group at Rutgers <ref> [Imie94a, Imie94b] </ref> has done significant work on data broadcasting in mobile environments. A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients.
Reference: [Imie94b] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> "Energy Efficient Indexing on Air", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: We discuss several of the leaves in this diagram below. 1 For the purposes of this discussion, we do not distinguish between fixed and randomized schedules. Such a distinction is important in certain applications. For example, algorithms for conserving energy in mobile environments proposed by Imielinski et al. <ref> [Imie94b] </ref> depend on a strict schedule to allow mobile clients to "doze" during periods when no data of interest to them will be broadcast. Request/Response Traditional request/response mechanisms use aperiodic pull over a unicast connection. <p> BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Both Datacycle and BCIS used a flat broadcast (i.e., all items have the same frequency). The mobility group at Rutgers <ref> [Imie94a, Imie94b] </ref> has done significant work on data broadcasting in mobile environments. A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients.
Reference: [Katz94] <author> R. Katz, </author> <title> "Adaption and Mobility in Wireless Information Systems", </title> <journal> IEEE Personnal Comm., 1st Quarter, </journal> <year> 1994. </year>
Reference-contexts: There has been a lot of work on caching in these environments, much of which has focused on the maintenance of cache consistency in the face of updates. More recently, there has been work on data management issues for wireless environments <ref> [Katz94] </ref>. Some of work in this area has focused on satellite-based systems [Dao96, Dire96] in which the downstream bandwidth is quite high. The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT [Yan95] and the Information Bus [Oki93].
Reference: [Levy90] <author> Levy, E., Silbershatz, A., </author> <title> "Distributed File Systems: Concepts and Examples", </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4), </volume> <month> December, </month> <year> 1990. </year>
Reference-contexts: The preponderance of previous work assumes that data is requested when needed (i.e., pull) and that servers respond to these requests in an orderly fashion. Some of this work has occurred in a client/server database setting [Fran96a] while other work has been done in the distributed file system context <ref> [Levy90] </ref>. There has been a lot of work on caching in these environments, much of which has focused on the maintenance of cache consistency in the face of updates. More recently, there has been work on data management issues for wireless environments [Katz94].
Reference: [OMG91] <author> Object Management Group and X/Open, </author> <title> "Common Object Request Broker: Architecture and Specification", Reference OMG 91.12.1, </title> <year> 1991. </year>
Reference-contexts: All types of consistency must be provided in a flexible manner, so that tradeoffs between consistency and responsiveness can be made on a case-by case basis. 6 Related Work Work on distributed object computing has generated many important standards and systems. CORBA <ref> [OMG91] </ref> and DCE [OSF94], for example, are two important approaches to system interoperability. This work is not incompatible with the notion of a DBIS. A DBIS can be thought of as infrastructure for such object-oriented middleware. There is much previous work that relates to the architectural issues of a DBIS.
Reference: [Oki93] <author> B. Oki, M. Pfluegl, A. Siegel, D. Skeen, </author> <title> "The Information Bus An Architecture for Extensible Distributed Systems", </title> <booktitle> Proc. 14th SOSP, </booktitle> <address> Ashville, NC, </address> <month> December, </month> <year> 1993. </year>
Reference-contexts: If the information is returned over a 1-to-N link, then as with request/response, other clients can snoop to obtain data items as they go by. Publish/Subscribe - Publish/subscribe protocols are becoming a popular way to disseminate information in a network <ref> [Oki93, Yan95, Glan96] </ref>. Publish/subscribe is push-based; data flow is initiated by the data sources, and is aperiodic, as there is no predefined schedule for sending data. <p> Some of work in this area has focused on satellite-based systems [Dao96, Dire96] in which the downstream bandwidth is quite high. The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT [Yan95] and the Information Bus <ref> [Oki93] </ref>. There has also been work on broadcasting in Teletex systems [Amma85, Wong88]. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework.
Reference: [OSF94] <author> Open Software Foundation, </author> <title> "Introduction to OSF DCE", </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference-contexts: All types of consistency must be provided in a flexible manner, so that tradeoffs between consistency and responsiveness can be made on a case-by case basis. 6 Related Work Work on distributed object computing has generated many important standards and systems. CORBA [OMG91] and DCE <ref> [OSF94] </ref>, for example, are two important approaches to system interoperability. This work is not incompatible with the notion of a DBIS. A DBIS can be thought of as infrastructure for such object-oriented middleware. There is much previous work that relates to the architectural issues of a DBIS.
Reference: [Shek96] <author> S. Shekhar, A. Fetterer, D. Liu, </author> <title> "Genesis: An Approach to Data Dissemination in Advanced Traveller Information Systems", </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 19(3), </volume> <month> September, </month> <year> 1996. </year>
Reference-contexts: A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients. Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan95, Best96], and Advanced Traveler Information Systems <ref> [Shek96] </ref>. Our work on Broadcast Disks differs from these in that we consider multi-level disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment.
Reference: [Terr92] <author> D. Terry, D. Goldberg, D. Nichols, </author> <title> "Continuous Queries Over Append-Only Databases", </title> <booktitle> Proc. ACM SIG-MOD Conf., </booktitle> <address> San Diego, CA, </address> <month> June, </month> <year> 1992. </year>
Reference-contexts: What would such a profile look like? A profile is very much like a continuously executing query <ref> [Terr92] </ref>. In other words, it is a predicate that indicates the items that the client would like to see. It is continuously executing because the server will push items as long as there are currently valid profiles that match the items.
Reference: [Wong88] <author> J. Wong, </author> <title> "Broadcast Delivery", </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 76(12), </volume> <month> December, </month> <year> 1988. </year>
Reference-contexts: Such protocols are typically performed in a 1-to-N fashion, but a similar protocol can be used over a unicast channel, as is done for triggers in active database systems. Broadcast Disks Periodic push has been used for data dissemination in many systems such as TeleText <ref> [Amma85, Wong88] </ref>, DataCycle [Herm87, Bowe92], Broadcast Disks [Acha95a, Acha95b] and mobile databases [Imie94a]. Clients needing access to a data item that is pushed periodically can wait until the item appears. <p> The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT [Yan95] and the Information Bus [Oki93]. There has also been work on broadcasting in Teletex systems <ref> [Amma85, Wong88] </ref>. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. The Datacycle Project [Bowe92, Herm87] at Bellcore investigated the notion of using a repetitive broadcast medium for database storage and query processing. <p> The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT [Yan95] and the Information Bus [Oki93]. There has also been work on broadcasting in Teletex systems [Amma85, Wong88]. <ref> [Wong88] </ref> presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. The Datacycle Project [Bowe92, Herm87] at Bellcore investigated the notion of using a repetitive broadcast medium for database storage and query processing.
Reference: [Yan95] <author> T. Yan, H. Garcia-Molina, </author> <title> "SIFT ATool for Wide-area Information Dissemination", </title> <booktitle> Proc. 1995 USENIX Technical Conference, </booktitle> <year> 1995. </year>
Reference-contexts: If the information is returned over a 1-to-N link, then as with request/response, other clients can snoop to obtain data items as they go by. Publish/Subscribe - Publish/subscribe protocols are becoming a popular way to disseminate information in a network <ref> [Oki93, Yan95, Glan96] </ref>. Publish/subscribe is push-based; data flow is initiated by the data sources, and is aperiodic, as there is no predefined schedule for sending data. <p> It should be noted that in the broadcast disk case, the push is periodic and is scheduled by the server. In the Point-cast case, the pull is also periodic, but the interval is set by the user. 4.3 SIFT The SIFT <ref> [Yan95] </ref> system was developed at Stanford University as a way to disseminate documents to a user community. SIFT combines data management ideas from information retrieval with a publish/subscribe model for dissemination. We describe the way the publish/subscribe model works in terms of our DBIS architecture. <p> Some of work in this area has focused on satellite-based systems [Dao96, Dire96] in which the downstream bandwidth is quite high. The idea of the publish/subscribe model as a dissemination mechanism has been used in many contexts including SIFT <ref> [Yan95] </ref> and the Information Bus [Oki93]. There has also been work on broadcasting in Teletex systems [Amma85, Wong88]. [Wong88] presents an overview of some of the analytical studies on one-way, two-way and hybrid broadcast in this framework. <p> A main focus of their work has been to investigate novel ways of indexing in order to reduce power consumption at the mobile clients. Some recent applications of dissemination-based systems include information dissemination on the Internet <ref> [Yan95, Best96] </ref>, and Advanced Traveler Information Systems [Shek96]. Our work on Broadcast Disks differs from these in that we consider multi-level disks and their relationship to cache management. In [Acha95a], we proposed an algorithm to generate Broadcast Disk programs and demonstrated the need for cost-based caching in this environment.
Reference: [Zdon94] <author> S. Zdonik, M. Franklin, R. Alonso, S. Acharya, </author> <title> "Are 'Disks in the Air' Just Pie in the Sky?", </title> <booktitle> IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December, </month> <year> 1994. </year>
References-found: 30

