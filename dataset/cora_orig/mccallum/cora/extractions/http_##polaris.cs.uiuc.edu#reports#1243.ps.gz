URL: http://polaris.cs.uiuc.edu/reports/1243.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: INTERACTIVE DIRECT VOLUME RENDERING OF CURVILINEAR AND UNSTRUCTURED DATA  
Author: BY PETER LAWRENCE WILLIAMS 
Degree: M.S., University of Lowell, 1984 THESIS Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in Computer Science in the Graduate College of the  
Date: 1960  
Address: Berkeley,  1992 Urbana, Illinois  
Affiliation: B.S., University of California,  University of Illinois at Urbana-Champaign,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> BAKER, T.J. </author> <title> Three Dimensional Mesh Generation by Triangulation of Arbitrary Point Sets. </title> <journal> Amer. Inst. </journal> <note> Aero. & Astro. Report AIAA-87-1124 1987. </note>
Reference-contexts: For unusual point distributions, a DT of n points can be O (n 2 ) both in time and in size; however, for uniform point distributions, over certain domains, a DT can be expected to have size O (n) and <ref> [1, 49] </ref> report expected running times of O (n 4=3 ). It is possible that most scientific data sets will fall into the category of uniform point distributions; but, this requires investigation, especially for graded meshes. <p> In computational geometry, the DT is usually implemented using integer arithmetic in order to properly handle degenerate cases. Three-dimensional DT algorithms are described in [49, 68, 85]. Mesh generation algorithms used by computational scientists usually are implemented in floating point; see for example Baker's 3D DT algorithm <ref> [1] </ref>. The proof of acyclicity of the DT is based on exact arithmetic and the slightest inaccuracy can destroy the acyclicity property. <p> This algorithm is shown below. The boolean array waitLock [NUMBPROCS] is initialized to all true except for waitLock <ref> [1] </ref> which is set to false. This allows CPU1 (pid 1) to get a lock. It is important that the array waitLock be declared as volatile, otherwise an optimizing compiler might translate the first line of the following algorithm, while (waitLock [pid]) busy-wait, as: if (!waitlock [pid]) for (;;) busy-wait. <p> LOCK ORDERING ALGORITHM: while (waitLock [pid]) busy-wait lock (gpipe) make graphics calls waitLock [pid] = true if pid == (numbProcs - 1) then waitLock <ref> [1] </ref> = false else waitLock [pid + 1] = false unlock (gpipe) 7.6.2 Results of Parallelization of Nonconvex Algorithm The ONERA M6 wing simulation described in Chapter 6 is defined over a nonconvex mesh generated by a conformed Delaunay triangulation.
Reference: [2] <author> BAKER, T.J. </author> <title> Shape Reconstruction and Volume Meshing for Complex Solids. </title> <booktitle> Intl. J. Numerical Methods in Engin. </booktitle> <volume> 32 4 (1991), </volume> <pages> 665-675. </pages>
Reference-contexts: We would like computational scientists to consider the following generation technique for unstructured meshes. Whenever possible, generate a mesh over a convex domain even though the domain of interest is nonconvex; such a technique is used by Baker <ref> [2] </ref>. Retain the vertices and cells which lie outside the domain of interest for use at visualization time; send the remaining vertices and cells to the finite element solver. By doing this, the data set can be immediately and efficiently visualized using the MPVO algorithm. <p> The mesh has 362,712 tetrahedra and was constructed using a conformed Delaunay triangulation <ref> [2] </ref>. <p> Section 4.11, the mesh was generated over a convex domain even though the domain of interest is nonconvex. The vertices and cells lying outside the nonconvex region were retained for visualization and the remaining vertices and cells were sent to the finite element solver <ref> [2] </ref>. This enables us to render the ONERA data either as a convex mesh, where the cells lying outside the nonconvex domain of interest are marked invisible, or to render it using the MPVO algorithm for nonconvex meshes.
Reference: [3] <author> BALACHANDAR, S. </author> <title> Methods for Evaluating Fluid Velocities in Spectral Simulations of Turbulence. Jrnl Computational Physics 83 1 (July, </title> <year> 1989). </year>
Reference: [4] <author> BLINN, J. F. </author> <title> Light Reflection Functions for Simulation of Clouds and Dusty Surfaces. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 16 3 (July </month> <year> 1982), </year> <pages> 21-29. </pages>
Reference-contexts: A method is described which allows isosurface shading within a volume rendering. 3.2 Early Cloud Models One of the first computer graphics models for clouds was reported by James Blinn <ref> [4] </ref> of the Jet Propulsion Lab. He described a method to synthesize an image of the rings of the planet Saturn using data from Voyager 1. The rings of Saturn consist of clouds of reflective ice particles in orbit about the planet.
Reference: [5] <author> BONGIOVANNI, G. and PETRESCHI, R. </author> <title> Parallel-Depth Search for Acyclic Digraphs. </title> <booktitle> Jrnl. Parallel and Distrib. Comp. 7 (1989), </booktitle> <pages> 383-390. </pages>
Reference: [6] <author> BRAMLEY, R. and NITROSSO, B. </author> <title> Data Distribution in CFD Finite Element Codes. </title> <institution> Center for Supercomputing Research and Development Report, University of Illinois, Urbana. </institution> <year> (1992). </year>
Reference-contexts: I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>.
Reference: [7] <author> CARPENTER, L. </author> <title> The A-buffer, an Antialiased Hidden Surface Method. </title> <journal> ACM SIG-GRAPH Comput. Gr. </journal> <volume> 18 3 (1984), </volume> <pages> 103-108. 151 </pages>
Reference-contexts: Analysis of the BSP tree algorithm by Paterson and Yao [72] suggests that its performance could be O (f 2 ), where f is the number of faces in the original mesh. An A-buffer <ref> [7] </ref> is also not suitable for visibility ordering large meshes because there are too many transparent cells at each pixel, making memory requirements prohibitive with current hardware. 1 Goad [41] describes a special purpose program written in LISP for visibility ordering polygons.
Reference: [8] <author> CHALLINGER, J. </author> <title> Parallel Volume Rendering on a Shared-Memory Multiprocessor. </title> <institution> Univ. Calif. Santa Cruz Dept. Comp. Sci. </institution> <note> Report UCSC-CRL-91-23, rev March 1992. </note>
Reference: [9] <author> CHALLINGER, J. </author> <title> Parallel Volume Rendering for Curvilinear Volumes. </title> <booktitle> IEEE Comp. Soc., Proc. Scalable High Performance Computing Conference (April 1992). </booktitle>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels.
Reference: [10] <author> CHANDRASEKHAR, S. </author> <title> Radiative Transfer. </title> <publisher> Dover, </publisher> <address> New York, </address> <year> 1960. </year>
Reference-contexts: goal of this thesis is to visualize irregular volume data without interpolating the data to a rectilinear mesh. 13 CHAPTER 3 VOLUME DENSITY OPTICAL MODEL 3.1 Introduction An exact simulation of light interacting with a volume density or cloud is quite complex and requires the use of Radiative Transport Theory <ref> [10, 53] </ref>. However, for the purpose of scientific visualization, especially interactive previewing, less complex simulations are satisfactory. The optical model is the most crucial part of a volume renderer but it also can be the most confusing part. Therefore it is important that the underlying model be clearly understood.
Reference: [11] <author> CHAZELLE, B. </author> <title> Convex Partitions of Polyhedra: A Lower Bound and Worst Case Optimal Algorithm. </title> <journal> SIAM J. Comput. </journal> <volume> 13 (1984), </volume> <pages> 488-507. </pages>
Reference-contexts: However, if an O (n 2 ) algorithm [27, section 8.4] is satisfactory, a much simpler implementation is possible. Even an O (n log n) implementation can be quite clean if the Guibas and Stolfi quad edge data structure [43] and the SoS library is used. Algorithms by Chazelle <ref> [11] </ref> or Chazelle and Palios [13] can be used to partition any nonconvex cavities or voids into convex regions; however, there is no guarantee of acyclicity. A collection of observed data with no specified connectivity between the data points is called scattered data.
Reference: [12] <author> CHAZELLE, B. </author> <title> How to Search in History. Inform. </title> <booktitle> Control 64 (1985), </booktitle> <pages> 77-99. </pages>
Reference-contexts: targetCell = search2 ( cell which shares f ); if targetCell not -1 then exit search2 and return targetCell; end for if hasOutboundEdge = TRUE then exit search2 and return -1; else exit search2 and return cell; 143 9.4 Conclusion Efficient spatial point location algorithms have been published by Chazelle <ref> [12] </ref> and by Preparata and Tamassia [79]; however, no known implementations of these algorithms exist.
Reference: [13] <author> CHAZELLE, B. and PALIOS, L. </author> <title> Triangulating a Nonconvex Polytope. </title> <booktitle> Proc. 5th Ann. Sympos. </booktitle> <institution> Comput. Geom. </institution> <month> (June </month> <year> 1989), </year> <pages> 393-399. </pages>
Reference-contexts: If cells of a computational mesh have curved bounding surfaces, the cells can be approximated by sets of tetrahedra [54]; nonconvex cells can be tetrahedralized <ref> [13, 93] </ref>. Thus, the domain of the MPVO algorithm may be extended to any mesh. 4.4.2 The MPVO Algorithm for Nonconvex Meshes The MPVO algorithm can be adapted to visibility order many acyclic nonconvex meshes. <p> Even an O (n log n) implementation can be quite clean if the Guibas and Stolfi quad edge data structure [43] and the SoS library is used. Algorithms by Chazelle [11] or Chazelle and Palios <ref> [13] </ref> can be used to partition any nonconvex cavities or voids into convex regions; however, there is no guarantee of acyclicity. A collection of observed data with no specified connectivity between the data points is called scattered data.
Reference: [14] <author> CHRISOCHOIDES, N., HOUSTIS, C., HOUSTIS, E., PAPACHIOU, P., KORTESIS, S. and RICE, J. </author> <title> Domain Decomposer; A Software Tool for Mapping PDE Computations to Parallel Architectures. </title> <institution> Report CSD-TR-1025 Dept. Comput. Sci. Purdue University (Sept, </institution> <year> 1990). </year>
Reference-contexts: I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>.
Reference: [15] <author> CLINE, H. E., LORENSEN, W. E., LUDKE, S., CRAWFORD, C. R. and TEETER, B. C. </author> <title> Two Algorithms for the Reconstruction of Surfaces from Tomograms. </title> <journal> Medical Physics, </journal> <month> 15 3 (June </month> <year> 1988), </year> <pages> 320-327. </pages>
Reference: [16] <author> COOK, S. A. </author> <title> Towards a Complexity Theory of Synchronous Parallel Computation. </title> <journal> En-seign. Math. </journal> <volume> 27 (1981), </volume> <pages> 99-124. </pages>
Reference: [17] <author> DREBIN, R. A., CARPENTER, L. and HANRAHAN, P. </author> <title> Volume Rendering. </title> <journal> ACM SIG-GRAPH Comput. Gr. </journal> <volume> 22 4 (Aug. </volume> <year> 1988), </year> <pages> 65-74. 152 </pages>
Reference-contexts: This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending.
Reference: [18] <author> DAY, A. M. </author> <title> The Implementation of an Algorithm to Find the Convex Hull of a Set of 3D Points. </title> <journal> ACM Trans. Gr. </journal> <volume> 9 1 (Jan. </volume> <year> 1990), </year> <pages> 105-132. </pages>
Reference-contexts: The dihedral angle examination can be used to determine if each void or cavity is convex/nonconvex. An O (n log n) time convex hull algorithm for n points in E 3 has been described by Preparata and Hong [78] and implemented by Day <ref> [18] </ref>. Day writes that he found the task "... definitely not a trivial exercise ..." due to degeneracies and special cases. However, if an O (n 2 ) algorithm [27, section 8.4] is satisfactory, a much simpler implementation is possible.
Reference: [19] <author> DELAUNAY, B. </author> <title> Sur la sphere vide. </title> <journal> Izv. Akad. Nauk SSSR, Otdelenie Matematicheskii i Estestvennyka Nauk 7 (1934), </journal> <pages> 793-800. </pages>
Reference-contexts: If the curved bounding surfaces of the cells are approximated by triangles, the resulting cells can be tetrahedralized so that the cycle remains. 4.8.2 The Delaunay Triangulation An acyclicity theorem for the obstructs relation for meshed polyhedra resulting from a Delaunay triangulation (DT) <ref> [19] </ref> has been proven by Edelsbrunner [26]. A DT of a set S of points in E 3 is a triangulation such that a sphere circumscribed about the four vertices of any tetrahedron in the triangulation contains no other points in S.
Reference: [20] <author> EBERT, D. S. and PARENT, R. E. </author> <title> Rendering and Animation of Gaseous Phenomena by Combining Fast Volume and Scanline A-buffer Techniques. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 24 4 (July </month> <year> 1990), </year> <pages> 357-363. </pages>
Reference-contexts: Light propagating through clouds is also discussed by Max [62, 63], Rushmeier and Torrance [87] and Ebert and Parent <ref> [20] </ref>; however, these techniques are not directly applicable to volume rendering.
Reference: [21] <author> EDELSBRUNNER, H. and M UCKE, E. P. </author> <title> Three-dimensional Alpha Shapes. </title> <type> Report No. </type> <institution> UIUCDCS-R-92-1734 Dept. Comp. Sci., Univ. of Illinois, Urbana-Champaign, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Consider for example a tetrahedron created such that three vertices are in Mexico and one in Florida. The ff-shape concept discussed in <ref> [21, 27, 68] </ref> can be a useful way to make a DT conform to the implicit boundary of the data, which in the example given would be the shore line of the Gulf.
Reference: [22] <author> EDELSBRUNNER, H. and TAN, T.-S. </author> <title> An Upper Bound for Conforming Delaunay Triangulations. </title> <note> To appear Proc. 8th Ann. </note> <institution> Sympos. Comput. Geom. </institution> <year> (1992). </year>
Reference-contexts: It is possible to implement a floating point front and back end to the SoS library which will make the use of integer arithmetic transparent to the user. 7 Edelsbrunner and Tan <ref> [22] </ref> have demonstrated an O (m 2 n) bound on the number of points in a Delaunay triangulation in E 2 that conforms to m line segments and n vertices. 60 A number of algorithms have been published which are called Delaunay triangulations of nonconvex domains or sometimes constrained DTs, e.g.
Reference: [23] <author> EDELSBRUNNER, H. and SHAH, N. R. </author> <title> Incremental Topological Flipping Works for Regular Triangulations. </title> <note> To appear Proc. 8th Ann. </note> <institution> Sympos. Comput. Geom. </institution> <year> (1992). </year>
Reference-contexts: Edelsbrunner has proven the acyclicity of the obstructs relation for regular triangulations [26]. One of the best algorithms for constructing a regular triangulation in any dimension is given by Edelsbrunner and Shah <ref> [23] </ref>. When more is known about the properties and the implementation of regular triangulations, it may be the case that a conformed regular triangulation will be more suitable than a conformed DT for the purpose of the work taken up in this thesis.
Reference: [24] <author> EDELSBRUNNER, H. and M UCKE, E. P. </author> <title> Simulation of Simplicity: A Technique to Cope with Degenerate Cases in Geometric Algorithms. </title> <journal> ACM Trans. Gr. </journal> <volume> 9 1 (Jan. </volume> <year> 1990), </year> <pages> 66-104. </pages>
Reference-contexts: This can be accomplished by the following symbolic perturbation technique based on the ideas described by Edelsbrunner and Mucke <ref> [24] </ref>. <p> The proof of acyclicity of the DT is based on exact arithmetic and the slightest inaccuracy can destroy the acyclicity property. The Simulation of Simplicity (SoS) technique developed by Edelsbrunner and Mucke <ref> [24] </ref>, and now implemented as a C library by Mucke, uses integer arithmetic, and cleanly and transparently handles all degenerate cases that may arise in the implementation of the DT algorithm.
Reference: [25] <author> EDELSBRUNNER, H., PREPARATA, F. P. and WEST, D. B. </author> <title> Tetrahedrizing Point Sets in Three Dimensions. </title> <journal> J. Symb. Comput. </journal> <volume> 10 (1990), </volume> <pages> 335-347. </pages>
Reference-contexts: A result that may be useful for data structure planning is that the maximum number of tetrahedra for a triangulation of v vertices is: 1 2 (v 2 3v 2) <ref> [25] </ref>. In general, for meshes whose cells are not necessarily tetrahedra, the amount of storage required is linear in the size of the mesh.
Reference: [26] <author> EDELSBRUNNER H. </author> <title> An Acyclicity Theorem for Cell Complexes in d Dimension. </title> <booktitle> Com-binatorica 10 (3) (1990), </booktitle> <pages> 251-260. </pages>
Reference-contexts: Other images generated using the MPVO algorithm and the MPVO algorithm for nonconvex meshes are shown in Chapter 6. The basic ideas of the MPVO algorithm were suggested by Herbert Edelsbrunner in a conversation regarding his paper on the acyclicity of cell complexes <ref> [26] </ref>. A similar algorithm to the MPVO algorithm, also based on Edelsbrunner's suggestions, was developed independently by Max, Hanrahan and Crawfis [61]. <p> if there is a half-line hl starting at vp so that hl " int (p 1 ) 6= ;, hl " int (p 2 ) 6= ;, and every point of hl " int (p 2 ) lies between vp and any point of hl " int (p 1 ) <ref> [26] </ref>. Let us define the behind relation &lt; vp such that p 1 &lt; vp p 2 if and only if p 1 and p 2 are adjacent, that is, share a face, and p 2 obstructs p 1 . <p> If the curved bounding surfaces of the cells are approximated by triangles, the resulting cells can be tetrahedralized so that the cycle remains. 4.8.2 The Delaunay Triangulation An acyclicity theorem for the obstructs relation for meshed polyhedra resulting from a Delaunay triangulation (DT) [19] has been proven by Edelsbrunner <ref> [26] </ref>. A DT of a set S of points in E 3 is a triangulation such that a sphere circumscribed about the four vertices of any tetrahedron in the triangulation contains no other points in S. <p> Delaunay triangulations are a special case of regular triangulations [58]. A regular triangulation in E d is a triangulation that can be obtained by projecting the boundary complex of a convex polyhedron in E d+1 . Edelsbrunner has proven the acyclicity of the obstructs relation for regular triangulations <ref> [26] </ref>. One of the best algorithms for constructing a regular triangulation in any dimension is given by Edelsbrunner and Shah [23].
Reference: [27] <author> EDELSBRUNNER, H. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> Heidel-berg, </address> <year> 1987. </year> <month> 153 </month>
Reference-contexts: Day writes that he found the task "... definitely not a trivial exercise ..." due to degeneracies and special cases. However, if an O (n 2 ) algorithm <ref> [27, section 8.4] </ref> is satisfactory, a much simpler implementation is possible. Even an O (n log n) implementation can be quite clean if the Guibas and Stolfi quad edge data structure [43] and the SoS library is used. <p> Consider for example a tetrahedron created such that three vertices are in Mexico and one in Florida. The ff-shape concept discussed in <ref> [21, 27, 68] </ref> can be a useful way to make a DT conform to the implicit boundary of the data, which in the example given would be the shore line of the Gulf.
Reference: [28] <author> FARHAT, C. </author> <title> A Simple and Efficient Automatic FEM Domain Decomposer. </title> <booktitle> Comput. and Structures 28 (1988), </booktitle> <pages> 579-602. </pages>
Reference-contexts: I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>.
Reference: [29] <author> FARHAT, C. </author> <title> On Mapping of Massively Parallel Processors onto Finite Element Graphs. </title> <booktitle> Comput. and Structures 32 (1989), </booktitle> <pages> 347-353. </pages>
Reference-contexts: Finding ways to effectively apply massively parallel architectures with a NEWS topology to an irregular mesh is still a open problem. If an answer is found it will benefit not only volume rendering, but more importantly, the solution of finite element problems on such meshes <ref> [29, 46, 90] </ref>. It will be interesting to investigate volume rendering using the next generation of SIMD machines which are expected to offer constant time communication between any two processors. <p> I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>.
Reference: [30] <author> FLOWER, J., OTTO,S. and SALAMA, M. </author> <title> Optimal Mapping of Irregular Finite Element Domains to Parallel Processors. in Parallel Computations and Their Impact on Machines, </title> <editor> A. Noor, ed., </editor> <address> Am. </address> <publisher> Soc. Mech. Engin., </publisher> <address> New York (1987), </address> <pages> 239-250. </pages>
Reference-contexts: I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>. <p> Sadayappan and Ercal [90] summarize a number of categories of approaches to the domain decomposition problem, including graph based approaches, mathematical programming based formulations, queuing theory based models and heuristic approaches such as scattered decomposition [67], simulated annealing <ref> [30] </ref> and a graph-based recursive bisection model [32]. 145 It has been found that the MPVO Algorithm may be a candidate for domain decomposition of unstructured finite element meshes. While the resulting partitioning may not be optimal, it has the property of coherence. <p> While the resulting partitioning may not be optimal, it has the property of coherence. The simulated annealing process for domain decomposition as described by Flower, Otto and Salama <ref> [30] </ref> can achieve an optimal mapping of finite elements to a set of parallel processors; although it does not guarantee determination of an optimal mapping. The simulated annealing method requires an initial decomposition of the mesh. The algorithm is then iterated starting from this initial decomposition.
Reference: [31] <author> FOLEY, J. D., van DAM, A., FEINER, S. K. and HUGHES, J. F. </author> <title> Computer Graphics Principles and Practice. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1990. </year>
Reference-contexts: INTRODUCTION Volume rendering 1 is used to show the characteristics of the interior of a solid region in a 2D image <ref> [31] </ref>. This thesis focuses on volume rendering as a technique for visualizing three dimensional space-filling 2 scientific data sets.
Reference: [32] <author> FOX, G. </author> <title> Load Balancing and Sparse Matrix Vector Multiplication on the Hypercube. </title> <type> Report 327, </type> <institution> Caltech Concurrent Cube Project, </institution> <month> July </month> <year> 1985. </year>
Reference-contexts: Sadayappan and Ercal [90] summarize a number of categories of approaches to the domain decomposition problem, including graph based approaches, mathematical programming based formulations, queuing theory based models and heuristic approaches such as scattered decomposition [67], simulated annealing [30] and a graph-based recursive bisection model <ref> [32] </ref>. 145 It has been found that the MPVO Algorithm may be a candidate for domain decomposition of unstructured finite element meshes. While the resulting partitioning may not be optimal, it has the property of coherence.
Reference: [33] <author> FRIEDER, G., GORDON, D., and REYNOLDS, R. A. </author> <title> Back-to-Front Display of Voxel-Based Objects. </title> <journal> IEEE Comput. Graph. Appl. </journal> <volume> 5 1 (Jan. </volume> <year> 1985), </year> <pages> 52-60. </pages>
Reference-contexts: Visibility ordering the cells of rectilinear meshes (or certain classes of regular meshes based on a decomposition of a rectilinear mesh) is straightforward <ref> [33] </ref>. However, for other types of meshes, such as curvilinear or unstructured meshes, it is not immediately obvious how to compute this ordering. This chapter describes a simple and efficient algorithm for visibility ordering the cells of any acyclic convex set of meshed convex polyhedra. <p> Rectilinear meshes with embedded rectilinear meshes can be visibility ordered by the recursive use of a method such as given in <ref> [33] </ref>. Nonrectilinear meshes with embedded meshes can be ordered by treating the embedded mesh as a cell in the embedding mesh. Apply the MPVO algorithm to the embedding mesh; when a cell is encountered that is an embedded mesh, apply the MPVO algorithm recursively to it.
Reference: [34] <author> FUCHS, H., KEDEM, Z. and NAYLOR, B. </author> <title> On Visible Surface Generation by A Priori Tree Structures. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 14 3 (July </month> <year> 1980), </year> <pages> 124-133. </pages>
Reference-contexts: A similar algorithm to the MPVO algorithm, also based on Edelsbrunner's suggestions, was developed independently by Max, Hanrahan and Crawfis [61]. The Binary Space Partition (BSP) tree algorithm <ref> [34] </ref> is not suitable for visibility ordering large meshes because the algorithm uses splitting planes, (even when not required to break cycles). Since the cells are meshed, a large number of cells could be split, resulting in a potential explosion in the total number of cells. <p> One way to do this is to retriangulate the vertices of the mesh such that the resulting mesh is acyclic. The MPVO algorithm is not amenable to cutting the polyhedra therefore it will output a correct ordering only if there are no cycles. A BSP tree <ref> [34] </ref> can be used to visibility order a set of polyhedra, regardless of whether they are acyclic. This can be done by using each shared face as a splitting plane to create the BSP tree.
Reference: [35] <author> GALLAGHER, R. S. and NAGTEGAAL, J. C. </author> <title> An Efficient 3D Visualization Technique for Finite Element Models and Other Course Volumes. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 23 3 (July </month> <year> 1989), </year> <pages> 185-192. </pages>
Reference-contexts: A more accurate average vertex gradient can be calculated by weighting the gradients at the surrounding centroids by the inverse of the distance to the centroid. Other methods are described in <ref> [35] </ref>. 3.3.5 Exact Solution for Linear Parameter and Transfer Functions Equation 3.6 can be integrated exactly on a cell by cell basis if the transfer functions vary piecewise linearly along a ray segment within a cell. This can be done as follows.
Reference: [36] <author> GARRITY, M. P. </author> <title> Raytracing Irregular Volume Data. </title> <booktitle> San Diego Workshop on Volume Visualization, Comput. Gr. </booktitle> <month> 24 5 (Dec </month> <year> 1990), </year> <pages> 35-40. 154 </pages>
Reference-contexts: When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. <p> Since considerable research is being devoted to parallel ray tracing, it will be interesting to compare the results reported herein with those from a ray tracing volume rendering algorithm for irregular volumes, such as the one reported by Garrity <ref> [36] </ref>, that uses the latest parallel ray tracing algorithms and the most efficient hardware available. The thesis is organized as follows. In Chapter 2, we define a number of terms and discuss concepts needed for future chapters.
Reference: [37] <author> GAZIT, H. and MILLER, G. L. </author> <title> An Improved Parallel Algorithm that Computes the BFS Numbering of a Directed Graph. </title> <journal> Inf. proc. Letters 28 (1988), </journal> <pages> 61-65. </pages>
Reference-contexts: Therefore, the processor-time product for the parallel algorithm is far in excess of the time required to solve the problem serially. The best known bounds for a BFS algorithm are O (log 2 n) using O (n 2:376 ) processors <ref> [51, 37] </ref>. This means BFS is placed in N C 2 . Techniques related to transitive closure are used to exhibit the algorithm. However, since BFS can be solved sequentially in time O (n + e) [99], this algorithm is not efficient for the same reason as given above.
Reference: [38] <author> GIERTSEN, C. </author> <title> Volume Visualization of Sparse Irregular Meshes. </title> <journal> IEEE Comp. Gr. </journal> <month> 12 2 (March </month> <year> 1992), </year> <pages> 40-48. </pages>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods <ref> [38, 40] </ref>. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> Using the filtering methods described herein, this performance is possible for even larger data sets. These results justify the choice of a projection method, since they are significantly faster than any results published to date for any of the methods of direct volume rendering. Giertsen's papers <ref> [38, 40] </ref> on the hybrid method of volume rendering do not state the complexity of his algorithm; and it is difficult to calculate bounds based on the information published.
Reference: [39] <author> GIERTSEN, C. </author> <title> Creative Parameter Selection for Volume Visualization. </title> <note> To appear in Jrn. </note> <institution> Visualization and Comput. Anim. </institution> <year> (1992). </year>
Reference: [40] <author> GIERTSEN, C. and TUCHMAN, A. </author> <title> Fast Volume Rendering with Embedded Geometric Primitives. </title> <type> Manuscript, </type> <institution> IBM Bergen Scientific Centre, Norway, </institution> <year> 1992. </year>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods <ref> [38, 40] </ref>. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> Using the filtering methods described herein, this performance is possible for even larger data sets. These results justify the choice of a projection method, since they are significantly faster than any results published to date for any of the methods of direct volume rendering. Giertsen's papers <ref> [38, 40] </ref> on the hybrid method of volume rendering do not state the complexity of his algorithm; and it is difficult to calculate bounds based on the information published.
Reference: [41] <author> GOAD, C. </author> <title> Special Purpose Automatic Programming for Hidden Surface Elimination. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 16 3 (July </month> <year> 1982), </year> <pages> 167-178. </pages>
Reference-contexts: An A-buffer [7] is also not suitable for visibility ordering large meshes because there are too many transparent cells at each pixel, making memory requirements prohibitive with current hardware. 1 Goad <ref> [41] </ref> describes a special purpose program written in LISP for visibility ordering polygons. This approach might be adapted for polyhedra; further investigation may be warranted.
Reference: [42] <author> GOODRICH, M.T. and TAMASSIA, R. </author> <title> Dynamic Trees and Dynamic Point Location. </title> <booktitle> Proc. 23rd ACM Symp. on Theory of Computing (1991), </booktitle> <pages> 523-533. </pages>
Reference-contexts: The latter algorithm requires that the mesh have no nonconvex voids and requires O (f log 2 f ) preprocessing time and storage, and has a query time of O (log 2 f ) worst case; Goodrich and Tamassia <ref> [42] </ref> improve the storage and preprocessing bound to O (f log f ). The advantages of the MPPL Algorithms are that they are easy to implement and that they utilize the data structures of the MPVO Algorithm which may have already been built.
Reference: [43] <author> GUIBAS, L. J. and STOLFI, J. </author> <title> Primitives for the Manipulation of General Subdivisions and the Computation of Voronoi Diagrams. </title> <journal> ACM Trans. Gr. </journal> <month> 4 2 (April </month> <year> 1985), </year> <pages> 74-123. </pages>
Reference-contexts: However, if an O (n 2 ) algorithm [27, section 8.4] is satisfactory, a much simpler implementation is possible. Even an O (n log n) implementation can be quite clean if the Guibas and Stolfi quad edge data structure <ref> [43] </ref> and the SoS library is used. Algorithms by Chazelle [11] or Chazelle and Palios [13] can be used to partition any nonconvex cavities or voids into convex regions; however, there is no guarantee of acyclicity.
Reference: [44] <author> HABER, R. </author> <title> Visualization in Engineering Mechanics. </title> <booktitle> SIGGRAPH '88 Tutorial. </booktitle>
Reference: [45] <author> HABER, R. B., LUCAS, B. and COLLINS, N. </author> <title> A Data Model for Scientific Visualization with Provision for Regular and Irregular Grids. </title> <booktitle> Proc. Visualization '91 (Oct. </booktitle> <year> 1991), </year> <pages> 298-305. </pages>
Reference-contexts: Examples of nonrectilinear meshes are curvilinear meshes and irregular meshes. A curvilinear mesh is a nonorthogonal mesh in E 3 which is a transformation of a rectilinear mesh in some curvilinear coordinate system. Haber, Lucas and Collins <ref> [45] </ref> classify meshes by their topology and geometry. A mesh can have a regular or irregular topology and a regular or irregular geometry. A curvilinear mesh has a regular topology but may have either a regular or irregular geometry. <p> The calculus of manifolds serves as a useful mathematical model for scientific visualization because it allows for a uniform treatment of data (scalar, vector or tensor) defined on meshes of different dimensionality, geometry and topology. Haber, Lucas and Collins <ref> [45] </ref> have developed this model to some extent. For example, a curvilinear mesh, as used in the finite difference method, exists as a rectilinear mesh in the coordinate domain.
Reference: [46] <author> HAMMOND, S. and SCHREIBER, R. </author> <title> Mapping Unstructured Grid Problems to the Connection Machine. </title> <institution> RIACS Report 90.22 NASA Ames Research Center, </institution> <month> Oct. </month> <year> 1990. </year> <month> 155 </month>
Reference-contexts: Finding ways to effectively apply massively parallel architectures with a NEWS topology to an irregular mesh is still a open problem. If an answer is found it will benefit not only volume rendering, but more importantly, the solution of finite element problems on such meshes <ref> [29, 46, 90] </ref>. It will be interesting to investigate volume rendering using the next generation of SIMD machines which are expected to offer constant time communication between any two processors. <p> I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>.
Reference: [47] <author> HIBBARD W. and SANTEK D. </author> <title> Interactivity is the Key. </title> <booktitle> Proceedings Chapel Hill Workshop of Volume Visualization (May 1989), </booktitle> <pages> 39-43. </pages>
Reference: [48] <author> HUNG, C. and BUNING, P., </author> <title> Simulation of Blunt-Fin Induced Shock Wave and Turbulent Boundary Layer Separation, AIAA Paper 84-0457, </title> <booktitle> AIAA Aerospace Sciences Conference, </booktitle> <address> Reno NV (Jan. </address> <year> 1984). </year>
Reference-contexts: The mesh has 362,712 tetrahedra and was constructed using a conformed Delaunay triangulation [2]. The top image in Figure 6.7 shows the density field defined on a curvilinear mesh of 187,395 tetrahedra from a simulation of a blunt-fin induced shock wave and turbulent boundary layer separation <ref> [48] </ref>. 6.4 Suite of Rendering Approximations To investigate the feasibility of even faster methods than the PT algorithm, a suite of four different rendering approximation methods have been developed. They tradeoff image accuracy/quality for faster image generation time.
Reference: [49] <author> JOE, B. </author> <title> Construction of Three-Dimensional Delaunay Triangulations Using Local Transformations. </title> <booktitle> Computer Aided Geometric Design 8 (1991), </booktitle> <pages> 123-142. </pages>
Reference-contexts: For unusual point distributions, a DT of n points can be O (n 2 ) both in time and in size; however, for uniform point distributions, over certain domains, a DT can be expected to have size O (n) and <ref> [1, 49] </ref> report expected running times of O (n 4=3 ). It is possible that most scientific data sets will fall into the category of uniform point distributions; but, this requires investigation, especially for graded meshes. <p> In computational geometry, the DT is usually implemented using integer arithmetic in order to properly handle degenerate cases. Three-dimensional DT algorithms are described in <ref> [49, 68, 85] </ref>. Mesh generation algorithms used by computational scientists usually are implemented in floating point; see for example Baker's 3D DT algorithm [1]. The proof of acyclicity of the DT is based on exact arithmetic and the slightest inaccuracy can destroy the acyclicity property.
Reference: [50] <author> KAJIYA, J. T. and VON HERZEN, B. P. </author> <title> Ray Tracing Volume Densities. </title> <journal> ACM SIG-GRAPH Comput. Gr. </journal> <month> 18 4 (July </month> <year> 1984), </year> <pages> 165-174. </pages>
Reference-contexts: The exponent is sometimes referred to as the optical density or optical depth . Therefore, in this model, light passing through an absorbing medium is attenuated by the factor e . Kajiya and Von Herzen <ref> [50] </ref> give an alternative model which deals with multiple scattering against particles with high albedo; and they further develop Blinn's low albedo model and give a ray tracing algorithm for it.
Reference: [51] <author> KARP, R. M. and RAMACHANDRAN, V. </author> <title> Parallel Algorithms for Shared Memory Machines. </title> <booktitle> In Handbook of Theoretical Computer Science. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Therefore, the processor-time product for the parallel algorithm is far in excess of the time required to solve the problem serially. The best known bounds for a BFS algorithm are O (log 2 n) using O (n 2:376 ) processors <ref> [51, 37] </ref>. This means BFS is placed in N C 2 . Techniques related to transitive closure are used to exhibit the algorithm. However, since BFS can be solved sequentially in time O (n + e) [99], this algorithm is not efficient for the same reason as given above.
Reference: [52] <author> KENNON, S. R. </author> <title> A Vectorized Delaunay Triangulation Scheme for Non-Convex Domains With Automatic Nodal Point Generation. </title> <journal> Amer. Inst. </journal> <note> Aero. & Astro. Report AIAA-88-0314 (1988). </note>
Reference-contexts: have demonstrated an O (m 2 n) bound on the number of points in a Delaunay triangulation in E 2 that conforms to m line segments and n vertices. 60 A number of algorithms have been published which are called Delaunay triangulations of nonconvex domains or sometimes constrained DTs, e.g. <ref> [52] </ref>; however, these triangulations are not rigorous DTs due to relaxing the DT criteria at the boundary, therefore they may have cycles. Delaunay triangulations are a special case of regular triangulations [58].
Reference: [53] <author> KRUEGER, W. </author> <title> The Application of Transport Theory to Visualization of 3D Scalar Data Fields. </title> <booktitle> Proc. Visualization '90 (Oct. </booktitle> <year> 1990), </year> <pages> 273-280. </pages>
Reference-contexts: goal of this thesis is to visualize irregular volume data without interpolating the data to a rectilinear mesh. 13 CHAPTER 3 VOLUME DENSITY OPTICAL MODEL 3.1 Introduction An exact simulation of light interacting with a volume density or cloud is quite complex and requires the use of Radiative Transport Theory <ref> [10, 53] </ref>. However, for the purpose of scientific visualization, especially interactive previewing, less complex simulations are satisfactory. The optical model is the most crucial part of a volume renderer but it also can be the most confusing part. Therefore it is important that the underlying model be clearly understood.
Reference: [54] <author> KOYAMADA, K. </author> <title> Volume Visualization for the Unstructured Grid Data. SPIE/SPSE Extracting Meaning from Complex Data Conf. </title> <booktitle> Proc. </booktitle> <volume> Vol. 1259 (1990), </volume> <pages> 14-25. </pages>
Reference-contexts: Sections 4.8.2 and 4.9 describe methods to preprocess meshes which are cyclic and/or nonconvex such that the resulting mesh can be ordered by the MPVO algorithm. If cells of a computational mesh have curved bounding surfaces, the cells can be approximated by sets of tetrahedra <ref> [54] </ref>; nonconvex cells can be tetrahedralized [13, 93]. Thus, the domain of the MPVO algorithm may be extended to any mesh. 4.4.2 The MPVO Algorithm for Nonconvex Meshes The MPVO algorithm can be adapted to visibility order many acyclic nonconvex meshes.
Reference: [55] <author> KOYAMADA, K. and MIYAZAWA, T. </author> <title> Volume Rendering of Unstructured Grid Data. </title> <type> Manuscript, </type> <institution> Tokyo Scientific Center, IBM Japan Ltd (1991). </institution> <month> 156 </month>
Reference-contexts: When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels.
Reference: [56] <author> LASZLO, M. J. </author> <title> Techniques for Visualizing 3-Dimensional Manifolds. </title> <booktitle> Proc. Visualization '90 (Oct. </booktitle> <year> 1990), </year> <pages> 342-352. </pages>
Reference-contexts: To perform this computation it is helpful to have a data structure containing edge adjacency information, and to order the vertices so as to have facial orientation information. One such data structure is given in <ref> [56] </ref>. If more than one connected set is found, the set which is the outside boundary can be determined by comparison with the convex hull or by the following method.
Reference: [57] <author> LAUR, D. and HANRAHAN, P. </author> <title> Hierarchical Splatting: A Progressive Refinement Algorithm for Volume Rendering. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 25 4 (July </month> <year> 1991), </year> <pages> 285-288. </pages>
Reference-contexts: This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending.
Reference: [58] <author> LEE, C. </author> <title> Regular Triangulations of Convex Polytopes. Applied Geometry and Discrete Mathematics: </title> <editor> The Victor Klee Festschrift P. Gritzmann and B. Sturmfels, eds. </editor> <publisher> Amer Math. Soc., </publisher> <address> Providence, RI, </address> <year> 1991. </year>
Reference-contexts: Delaunay triangulations are a special case of regular triangulations <ref> [58] </ref>. A regular triangulation in E d is a triangulation that can be obtained by projecting the boundary complex of a convex polyhedron in E d+1 . Edelsbrunner has proven the acyclicity of the obstructs relation for regular triangulations [26].
Reference: [59] <author> LEVOY, M. </author> <title> Display of Surfaces from Volume Data. </title> <journal> IEEE Comput. Graph. Appl. </journal> <month> 8 3 (May </month> <year> 1988) </year> <month> 29-37. </month>
Reference-contexts: When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. <p> In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points <ref> [59] </ref> or regions [89] along the ray are calculated. This approach is simple to implement, but can be liable to the aliasing problems common to ray tracing. <p> Substituting these three equations into Equation 3.12 gives, for the case of linear tetrahedral elements: S c (t) = v + wt (3:13) 2 When a mesh is rectilinear, a finite difference scheme <ref> [97, 59, 100] </ref> can be used to approximate the gradient. 31 where v = c 1 + c 2 ff 1 + c 3 fi 1 + c 4 fl 1 and w = c 2 ff 2 + c 3 fi 2 + c 4 fl 2 .
Reference: [60] <author> LEVOY, M. </author> <title> Efficient Ray Tracing of Volume Data. </title> <journal> ACM Trans on Graphics 9 3, </journal> <month> (July </month> <year> 1990), </year> <pages> 245-261. </pages>
Reference-contexts: Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. There are three basic techniques for displaying volume data <ref> [60] </ref>, the use of 2D cross sections or slices of the data (cross section rendering); 3D level surfaces (isosurfaces) or threshold rendering, which can either be opaque or semitransparent; or direct volume rendering where a 2D projection of a colored semitransparent 3D volume or cloud is displayed. <p> When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels.
Reference: [61] <author> MAX, N., HANRAHAN, P. and CRAWFIS, R. </author> <title> Area and Volume Coherence for Efficient Visualization of 3D Scalar Functions. </title> <booktitle> San Diego Workshop on Volume Visualization, Com-put. Gr. </booktitle> <month> 24 5 (Dec </month> <year> 1990), </year> <pages> 27-33. </pages>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> This thesis focuses on the use of projection methods for nonrectilinear data where the data is rendered without interpolating it to a rectilinear mesh. I refer to this henceforth as Direct Projection Volume Rendering (DPVR). Methods for DPVR are discussed in <ref> [61, 93, 104, 105] </ref>. In DPVR, each cell of the mesh is projected onto the screen in back-to-front or front-to-back order. To do this, an algorithm is required to visibility order the cells of the mesh. <p> During the rendering process, useful information can be gained by watching the image being generated. When the data sets are large, it is as if one is watching an animation. A very accurate, but computationally intensive, DPVR algorithm is given by Max, Hanrahan and Crawfis <ref> [61] </ref>. A fast approximation to this process, sometimes called a splatting algorithm, is given by Shirley and Tuchman [93]. The Shirley and Tuchman splatting algorithm, which 4 they refer to as the Projected Tetrahedra (PT) Algorithm, is used as the basis for the work herein. <p> These color transfer functions were used in the creation of the image shown in Figure 3.5. 7 The suite of splatting approximations along with the PT algorithm and highly accurate volume rendering methods, such as ray tracing and the DPVR algorithm by Max, Hanrahan and Crawfis <ref> [61] </ref>, form a hierarchy of rendering methods that tradeoff image accuracy/quality and generation time. Parallel volume rendering algorithms that include visibility ordering for both convex and nonconvex irregular meshes are investigated and results are given for several versions of parallel algorithms. <p> Sabella also allows for lighting from several point light sources exterior to the volume by incorporating a diffuse lighting term into Equation 3.3. When the indefinite integral R t 0 (u) du can be tabulated or calculated analytically, and when c and t are constants, Max, Hanrahan and Crawfis <ref> [61] </ref> show how Equation 3.3 can be simplified to a closed form expression which can be evaluated for each cell through which the ray passes. In addition, they take c and t as vectors with three components, red, green and blue. <p> This solution is given in Section 3.3.5 after parameter functions are introduced in Section 3.3.4. 24 If the chromaticity is assumed to be constant along a ray then, by the same method that Max <ref> [61] </ref> used to simplify Equation 3.3 or by a simple transformation of Equation 3.6, a closed form solution for Equation 3.6 can be obtained: I (t n ; ) = ()(1 e R t n (u;); du t 0 (3:7) If we further assume that both the optical density and chromaticity <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending. <p> The basic ideas of the MPVO algorithm were suggested by Herbert Edelsbrunner in a conversation regarding his paper on the acyclicity of cell complexes [26]. A similar algorithm to the MPVO algorithm, also based on Edelsbrunner's suggestions, was developed independently by Max, Hanrahan and Crawfis <ref> [61] </ref>. The Binary Space Partition (BSP) tree algorithm [34] is not suitable for visibility ordering large meshes because the algorithm uses splitting planes, (even when not required to break cycles). <p> The top image was generated using the modified PT splatting algorithm. The VOX approximation was used to generate the bottom image. 87 such as ray tracing and the projection algorithm of Max et al <ref> [61] </ref>. The approximations tradeoff image accuracy/quality for faster image generation time. PT is the Projected Tetrahedra algorithm of Shirley and Tuchman [93].
Reference: [62] <author> MAX, N. </author> <title> Atmospheric Illumination and Shadows. </title> <journal> ACM SIGGRAPH Comput. Gr. </journal> <volume> 20 4 (Aug. </volume> <year> 1986), </year> <pages> 117-124. </pages>
Reference-contexts: Kajiya and Von Herzen [50] give an alternative model which deals with multiple scattering against particles with high albedo; and they further develop Blinn's low albedo model and give a ray tracing algorithm for it. Light propagating through clouds is also discussed by Max <ref> [62, 63] </ref>, Rushmeier and Torrance [87] and Ebert and Parent [20]; however, these techniques are not directly applicable to volume rendering.
Reference: [63] <author> MAX, N. </author> <title> Light Diffusion through Clouds and Haze. Comput Vision, Graph. </title> <booktitle> and Image Proc. </booktitle> <month> 33 (march </month> <year> 1986), </year> <pages> 280-292. </pages>
Reference-contexts: Kajiya and Von Herzen [50] give an alternative model which deals with multiple scattering against particles with high albedo; and they further develop Blinn's low albedo model and give a ray tracing algorithm for it. Light propagating through clouds is also discussed by Max <ref> [62, 63] </ref>, Rushmeier and Torrance [87] and Ebert and Parent [20]; however, these techniques are not directly applicable to volume rendering.
Reference: [64] <author> MESHKAT, S., RUPPERT, J. and LI, H. </author> <title> Three-Dimensional Unstructured Grid Generation Based On Delaunay Tetrahedrization. </title> <booktitle> Proc. Third Intl. Conf. Numerical Grid Generation (June 1991), </booktitle> <pages> 841-851. 157 </pages>
Reference-contexts: Points are usually added only on the original boundary using heuristics. The convergence properties of this process in E 3 is an unsolved problem. 7 An implementation of such a process for floating point DTs has been developed by Meshkat et al at IBM <ref> [64] </ref>. Although they are not able to prove convergence for their algorithm, they have tested it on hundreds of objects and found that it converges rapidly. The convergence issue in E 3 is discussed somewhat in [69]. <p> The coalescing method can result in nonconvex cells not amenable to ordering by the MPVO Algorithm. The most promising approach seems to be to retriangulate a random subset of the original vertices of the mesh using a (conformed) Delaunay triangulation <ref> [64, 105] </ref>. Therefore, this 134 No Filtering Max Indep Set 20% Random 50% Random Serial 79.6 sec. 35.1 sec. 33.4 sec. 55.9 sec. 6 CPUs 30.2 sec. 13.9 sec. 13.0 sec. 21.6 sec.
Reference: [65] <author> MESHKAT, S. </author> <title> CDSmesh 3D Automatic Mesh Generator User's Guide and Reference. </title> <institution> IBM Almaden Research Center, </institution> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Figure 6.2 shows volume rendered images of a simulated temperature field and of hot-spots in a different temperature field, both defined on an nonconvex irregular mesh of 13,499 tetrahedra comprising a MBB-Gehause solid modeling benchmark. The mesh was generated by a conformed Delaunay triangulation <ref> [65] </ref>. 80 The images shown in Figure 6.5 show an N3S simulation of velocity magnitude of coolant flow in a component of the cooling system in Electricite de France's Super Phoenix nuclear reactor. The data field is defined on a mesh of 12,936 tetrahedra.
Reference: [66] <author> MEYERS R. J. and STEPHENSON, M. B. </author> <title> Ray Traced Scalar Fields with Shaded Polygonal Output. </title> <booktitle> Proc. Visualization '90 (Oct 1990), </booktitle> <pages> 263-272. </pages>
Reference: [67] <author> MORISON R. and OTTO, S. </author> <title> The Scattered Decomposition for Finite Elements. </title> <journal> J. Sci. Comput. </journal> <volume> 2 1 (1987), </volume> <pages> 59-76. </pages>
Reference-contexts: I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>. <p> Sadayappan and Ercal [90] summarize a number of categories of approaches to the domain decomposition problem, including graph based approaches, mathematical programming based formulations, queuing theory based models and heuristic approaches such as scattered decomposition <ref> [67] </ref>, simulated annealing [30] and a graph-based recursive bisection model [32]. 145 It has been found that the MPVO Algorithm may be a candidate for domain decomposition of unstructured finite element meshes. While the resulting partitioning may not be optimal, it has the property of coherence.
Reference: [68] <author> M UCKE, E. P. </author> <type> PhD thesis in preparation. </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1991. </year>
Reference-contexts: In computational geometry, the DT is usually implemented using integer arithmetic in order to properly handle degenerate cases. Three-dimensional DT algorithms are described in <ref> [49, 68, 85] </ref>. Mesh generation algorithms used by computational scientists usually are implemented in floating point; see for example Baker's 3D DT algorithm [1]. The proof of acyclicity of the DT is based on exact arithmetic and the slightest inaccuracy can destroy the acyclicity property. <p> Consider for example a tetrahedron created such that three vertices are in Mexico and one in Florida. The ff-shape concept discussed in <ref> [21, 27, 68] </ref> can be a useful way to make a DT conform to the implicit boundary of the data, which in the example given would be the shore line of the Gulf.
Reference: [69] <author> NACKMAN, L. R. and SRINIVASAN, V. </author> <title> Point Placement for Delaunay Triangulation of Polygonal Domains. </title> <booktitle> Proc. Third Canadian Conf. </booktitle> <institution> Comput. Geom. </institution> <month> (Aug. </month> <year> 1991), </year> <pages> 37-40. </pages>
Reference-contexts: Although they are not able to prove convergence for their algorithm, they have tested it on hundreds of objects and found that it converges rapidly. The convergence issue in E 3 is discussed somewhat in <ref> [69] </ref>. The DT is important in computational geometry and also is considered to be one of the three most attractive methods for 3D automatic mesh generation [73]. In computational geometry, the DT is usually implemented using integer arithmetic in order to properly handle degenerate cases.
Reference: [70] <author> NOVINS, K., SILLION, F. and GREENBERG, D. </author> <title> An Efficient Method for Volume Rendering using Perspective Projection. </title> <booktitle> San Diego Workshop on Volume Visualization, Comput. Gr. </booktitle> <month> 24 5 (Dec </month> <year> 1990), </year> <pages> 95-100. </pages>
Reference-contexts: Ray traced images typically take from 15 min to several hours to generate and their complexity depends on the size of the image in pixels. It is possible that the aliasing problem may be overcome if adaptive supersampling is used <ref> [70] </ref>. This thesis focuses on the use of projection methods for nonrectilinear data where the data is rendered without interpolating it to a rectilinear mesh. I refer to this henceforth as Direct Projection Volume Rendering (DPVR). Methods for DPVR are discussed in [61, 93, 104, 105].
Reference: [71] <author> OSTERHAUG, A. </author> <title> Guide to Parallel Programming. Sequent Computer Systems, </title> <address> Beaverton, OR, </address> <year> 1987. </year>
Reference-contexts: Only one lock is required for the graphics pipe. However, each cell has its own shared variable. If there are enough hardware locks (hardlocks), then one is used per cell. If there are not enough, there are two alternatives. Each hardlock can guard several cells, or multiplexed locks <ref> [71] </ref> can be used. Multiplexed locks use a single hardlock to guard multiple softlocks. Each cell has its own softlock which is a boolean software variable. In order to access a cell's shared variable, a process spins on that cell's softlock.
Reference: [72] <author> PATERSON, M. S. and YAO, F. F. </author> <title> Binary Partitions with Applications to Hidden-Surface Removal and Solid Modeling. </title> <booktitle> Proc. 5th Ann. Sympos. </booktitle> <institution> Comput. Geom. </institution> <month> (June </month> <year> 1989), </year> <pages> 23-32. </pages>
Reference-contexts: Since the cells are meshed, a large number of cells could be split, resulting in a potential explosion in the total number of cells. Analysis of the BSP tree algorithm by Paterson and Yao <ref> [72] </ref> suggests that its performance could be O (f 2 ), where f is the number of faces in the original mesh.
Reference: [73] <author> PERRONNET, A. </author> <title> Some Present Fully Automatic Mesh Generators. </title> <booktitle> Intl. Symp. on Numerical Methods in Engineering (1989), </booktitle> <pages> 129-136. </pages>
Reference-contexts: The convergence issue in E 3 is discussed somewhat in [69]. The DT is important in computational geometry and also is considered to be one of the three most attractive methods for 3D automatic mesh generation <ref> [73] </ref>. In computational geometry, the DT is usually implemented using integer arithmetic in order to properly handle degenerate cases. Three-dimensional DT algorithms are described in [49, 68, 85]. Mesh generation algorithms used by computational scientists usually are implemented in floating point; see for example Baker's 3D DT algorithm [1].
Reference: [74] <author> PIPPENGER, N. </author> <title> On Simultaneous Resource Bounds. </title> <booktitle> Proc. 20th Ann. IEEE Symp. on Foundations of Comput. Sci. </booktitle> <year> (1979) </year> <month> 307-311. 158 </month>
Reference-contexts: In other words, the class of problems that can be solved very rapidly, in time polynomial in log n, with a feasible (polynomial) number of processors coincides with N C. The class N C was first identified and characterized by Pippenger in 1979 <ref> [74] </ref> and is now called N C for Nick's class. The problems in N C 1 are the problems that are solvable by the fastest parallel algorithms.
Reference: [75] <author> POMMERELL, C., ANNARATONE, M. and FICHTNER, W. </author> <title> A Set of New Mapping and Coloring Heuristics for Distributed-Memory Parallel Processors. </title> <journal> SIAM J. Sci. Stat. </journal> <note> Comp (Jan 1992). </note>
Reference-contexts: I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>.
Reference: [76] <author> PORTER, D. </author> <title> Perspective Volume Rendering. </title> <institution> Univ. Minn. Supercomp. Inst. </institution> <note> Research Report UMSI 91/149 (May 1991). </note>
Reference: [77] <author> PORTER, T. and DUFF, T. </author> <title> Compositing Digital Images. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 18 3 (July </month> <year> 1984), </year> <pages> 253-259. </pages>
Reference-contexts: Term A represents the attenuation of the light emitted within the region itself. Equation 3.8 is the alpha compositing formula described by Porter and Duff <ref> [77] </ref> which they call the atop operator. The restriction that the optical density and/or chromaticity be constant along a ray is not too serious since the cloud is discretized into cells.
Reference: [78] <author> PREPARATA, F. P. and HONG, S. J. </author> <title> Convex Hulls of Finite Sets of Points in Two and Three Dimensions. </title> <booktitle> Comm. ACM 20 (1977), </booktitle> <pages> 87-93. </pages>
Reference-contexts: The dihedral angle examination can be used to determine if each void or cavity is convex/nonconvex. An O (n log n) time convex hull algorithm for n points in E 3 has been described by Preparata and Hong <ref> [78] </ref> and implemented by Day [18]. Day writes that he found the task "... definitely not a trivial exercise ..." due to degeneracies and special cases. However, if an O (n 2 ) algorithm [27, section 8.4] is satisfactory, a much simpler implementation is possible.
Reference: [79] <author> PREPARATA, F. P. and TAMASSIA, R. </author> <title> Efficient Point Location in a Convex Spatial Cell Complex. </title> <note> To appear SIAM J. Computing 21 2 (1992). </note>
Reference-contexts: shares f ); if targetCell not -1 then exit search2 and return targetCell; end for if hasOutboundEdge = TRUE then exit search2 and return -1; else exit search2 and return cell; 143 9.4 Conclusion Efficient spatial point location algorithms have been published by Chazelle [12] and by Preparata and Tamassia <ref> [79] </ref>; however, no known implementations of these algorithms exist.
Reference: [80] <author> QUINN, M. J. and DEO, N. </author> <title> Parallel Graph Algorithms. </title> <journal> ACM Comput. </journal> <volume> Surveys 16 3 (Sept. </volume> <year> 1984), </year> <pages> 319-348. </pages>
Reference-contexts: Either a depth first search (DFS) or a breadth first search (BFS) can be used for the topological sort. It was initially conjectured that a DFS was inherently sequential and so not solvable in poly-log parallel time <ref> [80, 82, 83, 95] </ref>. In 1989, however, Bongiovanni and Petreschi 111 published a DFS algorithm using O (n 4 ) processors which runs in time O (log 2 n). However, the algorithm is not efficient. <p> Techniques related to transitive closure are used to exhibit the algorithm. However, since BFS can be solved sequentially in time O (n + e) [99], this algorithm is not efficient for the same reason as given above. Reghbati and Corneil <ref> [82, 80] </ref> describe an algorithm for BFS using bounded parallelism.
Reference: [81] <author> REEVES, W. </author> <title> Particle Systems aTechnique for Modeling a Class of Fuzzy Objects. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 17 3 (July </month> <year> 1983), </year> <pages> 359-373. </pages>
Reference-contexts: It is based on Blinn's model but assumes the particles emit their own light, rather than scattering light from a source. This model is not related to Reeves <ref> [81] </ref> particle system in which particles are modeled individually. Sabella models the density of particles, not the particles themselves. The size of the particle is considered to be small compared to other dimensions so the density of the particles can be regarded as a continuous function.
Reference: [82] <author> REGHBATI, E. and CORNEIL, D. G. </author> <title> Parallel Computations in Graph Theory. </title> <journal> SIAM J. Comput. </journal> <volume> 7 2 (1978), </volume> <pages> 230-237. </pages>
Reference-contexts: Either a depth first search (DFS) or a breadth first search (BFS) can be used for the topological sort. It was initially conjectured that a DFS was inherently sequential and so not solvable in poly-log parallel time <ref> [80, 82, 83, 95] </ref>. In 1989, however, Bongiovanni and Petreschi 111 published a DFS algorithm using O (n 4 ) processors which runs in time O (log 2 n). However, the algorithm is not efficient. <p> Techniques related to transitive closure are used to exhibit the algorithm. However, since BFS can be solved sequentially in time O (n + e) [99], this algorithm is not efficient for the same reason as given above. Reghbati and Corneil <ref> [82, 80] </ref> describe an algorithm for BFS using bounded parallelism.
Reference: [83] <author> REIF, J. H. </author> <title> Depth-first Search is Inherently Sequential. </title> <journal> Inform. Process. Lett. </journal> <volume> 20 (1985), </volume> <pages> 229-234. </pages>
Reference-contexts: Either a depth first search (DFS) or a breadth first search (BFS) can be used for the topological sort. It was initially conjectured that a DFS was inherently sequential and so not solvable in poly-log parallel time <ref> [80, 82, 83, 95] </ref>. In 1989, however, Bongiovanni and Petreschi 111 published a DFS algorithm using O (n 4 ) processors which runs in time O (log 2 n). However, the algorithm is not efficient.
Reference: [84] <author> ROGERS, S., KWAK, D. and KAUL, U., </author> <title> A Numerical Study of Three-Dimensional Incompressible Flow Around Multiple Posts, </title> <type> AIAA Paper 86-0353, </type> <address> Reno, Nevada (1986). </address> <month> 159 </month>
Reference: [85] <author> ROSENBERGER, H. </author> <title> Degeneracy Control in Geometric Programs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1990. </year>
Reference-contexts: In computational geometry, the DT is usually implemented using integer arithmetic in order to properly handle degenerate cases. Three-dimensional DT algorithms are described in <ref> [49, 68, 85] </ref>. Mesh generation algorithms used by computational scientists usually are implemented in floating point; see for example Baker's 3D DT algorithm [1]. The proof of acyclicity of the DT is based on exact arithmetic and the slightest inaccuracy can destroy the acyclicity property.
Reference: [86] <author> RUDER, H., ERTL, F., GEYER, F., HEROLD, H. and KRAUS, U. </author> <title> Line-of-Sight Integration: A Powerful Tool for Visualization of Three-Dimensional Scalar Fields. </title> <journal> Comput. </journal> & <volume> Graphics 13 2 (1989), </volume> <pages> 223-228. </pages>
Reference-contexts: Light propagating through clouds is also discussed by Max [62, 63], Rushmeier and Torrance [87] and Ebert and Parent [20]; however, these techniques are not directly applicable to volume rendering. Ruder et al <ref> [86] </ref> discuss the use of line of sight integration for visualization of 3D scalar fields. 3.3 Current Volume Density Models Up to this point in the development, the light sources have been outside the cloud and the model has described how the particles in the cloud scatter, absorb and transmit this
Reference: [87] <author> RUSHMEIER, H. E. and TORRANCE, K. E. </author> <title> The Zonal Method for Calculating Light Intensities in the Presence of a Participating Medium. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 21 4 (July </month> <year> 1987), </year> <pages> 293-302. </pages>
Reference-contexts: Kajiya and Von Herzen [50] give an alternative model which deals with multiple scattering against particles with high albedo; and they further develop Blinn's low albedo model and give a ray tracing algorithm for it. Light propagating through clouds is also discussed by Max [62, 63], Rushmeier and Torrance <ref> [87] </ref> and Ebert and Parent [20]; however, these techniques are not directly applicable to volume rendering.
Reference: [88] <author> RUSSELL, G. and MILES, R. </author> <title> Display and Perception of 3-D Space-filling Data. </title> <journal> Appl. </journal> <volume> Optics 26 6 (March 1989), </volume> <pages> 973-982. </pages>
Reference: [89] <author> SABELLA, P. </author> <title> A rendering algorithm for visualizing 3D scalar fields. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 22 4 (July </month> <year> 1988), </year> <pages> 51-58. </pages>
Reference-contexts: When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. <p> In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions <ref> [89] </ref> along the ray are calculated. This approach is simple to implement, but can be liable to the aliasing problems common to ray tracing. Ray traced images typically take from 15 min to several hours to generate and their complexity depends on the size of the image in pixels. <p> The optical model is the most crucial part of a volume renderer but it also can be the most confusing part. Therefore it is important that the underlying model be clearly understood. Current models such as in <ref> [89, 103] </ref> lack some generality and/or are not easy to comprehend. This chapter presents a new continuous model which is rigorous and quite general, yet is intuitive and easy to understand. The next section discusses an early cloud model upon which many subsequent cloud models are based. <p> For the remainder of this chapter, it is assumed that the volume over which the scalar field is defined is subdivided into cells and that the scalar field is continuous over the volume. 3.3.1 The Particle Model Paolo Sabella <ref> [89] </ref> first described a particle model for volume rendering which he called the density emitter model. It is based on Blinn's model but assumes the particles emit their own light, rather than scattering light from a source.
Reference: [90] <author> SADAYAPPAN, P. and ERCAL, F. </author> <title> Nearest Neighbor Mapping of Finite Element Graphs onto Processor Meshes. </title> <journal> IEEE Trans. Comput. </journal> <volume> C-36 12 (Dec. </volume> <year> 1987), </year> <pages> 1408-1424. </pages>
Reference-contexts: Finding ways to effectively apply massively parallel architectures with a NEWS topology to an irregular mesh is still a open problem. If an answer is found it will benefit not only volume rendering, but more importantly, the solution of finite element problems on such meshes <ref> [29, 46, 90] </ref>. It will be interesting to investigate volume rendering using the next generation of SIMD machines which are expected to offer constant time communication between any two processors. <p> I refer to the process of partitioning the elements (cells) of a computational mesh into subdomains that can each be processed in parallel as the domain decomposition problem. A number of solutions to this problem have been proposed <ref> [6, 14, 28, 29, 30, 46, 67, 75, 90] </ref>. <p> A number of solutions to this problem have been proposed [6, 14, 28, 29, 30, 46, 67, 75, 90]. Sadayappan and Ercal <ref> [90] </ref> summarize a number of categories of approaches to the domain decomposition problem, including graph based approaches, mathematical programming based formulations, queuing theory based models and heuristic approaches such as scattered decomposition [67], simulated annealing [30] and a graph-based recursive bisection model [32]. 145 It has been found that the MPVO
Reference: [91] <institution> Silicon Graphics Inc. 4D1-3.3 Development Release and Installation Notes. </institution> <year> 1990. </year>
Reference: [92] <author> SCH ONHARDT, E. </author> <title> Uber die Zerlegung von Dreieckspolyedern in Tetraeder. </title> <journal> Math. Ann. </journal> <volume> 98 (1928), </volume> <pages> 309-312. </pages>
Reference: [93] <author> SHIRLEY, P. and TUCHMAN, A. </author> <title> A Polygonal Approximation to Direct Scalar Volume Rendering. </title> <booktitle> San Diego Workshop on Volume Visualization, Comput. Gr. </booktitle> <month> 24 5 (Dec </month> <year> 1990), </year> <pages> 63-70. </pages>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> This thesis focuses on the use of projection methods for nonrectilinear data where the data is rendered without interpolating it to a rectilinear mesh. I refer to this henceforth as Direct Projection Volume Rendering (DPVR). Methods for DPVR are discussed in <ref> [61, 93, 104, 105] </ref>. In DPVR, each cell of the mesh is projected onto the screen in back-to-front or front-to-back order. To do this, an algorithm is required to visibility order the cells of the mesh. <p> When the data sets are large, it is as if one is watching an animation. A very accurate, but computationally intensive, DPVR algorithm is given by Max, Hanrahan and Crawfis [61]. A fast approximation to this process, sometimes called a splatting algorithm, is given by Shirley and Tuchman <ref> [93] </ref>. The Shirley and Tuchman splatting algorithm, which 4 they refer to as the Projected Tetrahedra (PT) Algorithm, is used as the basis for the work herein. Wilhelms and Van Gelder [103] discuss a number of issues very relevant to DPVR. <p> For visualization, it offers more flexibility than the particle model described in the last section. The volume renderer described 21 in this thesis is based on this theoretical model. We benefit greatly from the earlier work of Shirley and Tuchman <ref> [93] </ref> and Wilhelms and Van Gelder [103]. The goal is to provide a simple, but accurate, formal model on which to base direct volume rendering of scalar fields defined on irregular meshes and to maximize the flexibility of use of transfer functions. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending. <p> The data structures for the MPVO algorithm can be used to solve the spatial point location problem. The MPVO algorithm was used to generate the picture of a scientific data set of approximately 70,000 tetrahedra which is shown on the cover of <ref> [93] </ref>. Other images generated using the MPVO algorithm and the MPVO algorithm for nonconvex meshes are shown in Chapter 6. The basic ideas of the MPVO algorithm were suggested by Herbert Edelsbrunner in a conversation regarding his paper on the acyclicity of cell complexes [26]. <p> If cells of a computational mesh have curved bounding surfaces, the cells can be approximated by sets of tetrahedra [54]; nonconvex cells can be tetrahedralized <ref> [13, 93] </ref>. Thus, the domain of the MPVO algorithm may be extended to any mesh. 4.4.2 The MPVO Algorithm for Nonconvex Meshes The MPVO algorithm can be adapted to visibility order many acyclic nonconvex meshes. <p> As noted in Chapter 2, the voxel model does not apply when volume rendering nonrectilinear data. The splatting technique for DPVR described in Chapter 6 decomposes each tetrahedron into triangles. Therefore, high performance polygon rendering engines can be harnessed to help achieve interactive rates of rendering. Shirley and Tuchman <ref> [93] </ref> implemented their Projected Tetrahedra (PT) splatting algorithm for volume rendering on a Sun 4/490 workstation. They wrote a scan conversion algorithm to create and display the image on a Pixar monitor. <p> The software support for parallel processing on a SGIPS is described in Chapter 7. 76 CHAPTER 6 CELL PROJECTION METHODS 6.1 Introduction In this Chapter, we present a suite of fast rendering approximations that support the goal of interactive volume rendering. A modified version of Shirley and Tuchman's <ref> [93] </ref> Projected Tetrahedra (PT) splatting algorithm is used as the basis for these approximations and also as a standard of comparison, both for image information content and rendering speed. <p> The opacity and color at the vertices are interpolated over the splat; Wilhelms and Van Gelder [103] describe three possible interpolation methods. 78 The point marked as NZT is used as a non-zero thickness vertex for the triangles. 6.3 The Projected Tetrahedra Algorithm The PT algorithm <ref> [93] </ref> works by compositing into an image the polygonal projection of each cell, called the cell's footprint, onto the viewing plane. Each footprint is subdivided into from one to four triangles, depending on the projection, and then rendered as a set of triangles. <p> The VOX approximation was used to generate the bottom image. 87 such as ray tracing and the projection algorithm of Max et al [61]. The approximations tradeoff image accuracy/quality for faster image generation time. PT is the Projected Tetrahedra algorithm of Shirley and Tuchman <ref> [93] </ref>. <p> However, Gouraud shading (linear interpolation) was used to create both images. To create an image using Equation 3.10 without Gouraud shading it would be necessary to either use ray tracing or else to do the scan conversion in software. It has been pointed out <ref> [93, 103] </ref> that because only 8 bits are used for the opacity channel on many high performance workstations, this can lead to distortions in splatted images which are created using hardware opacity blending. This is due to roundoff error when a lot of cells have very small opacity.
Reference: [94] <author> SPERAY, D. and KENNON, S. </author> <title> Volume Probes: Interactive Data Exploration on Arbitrary Grids. </title> <booktitle> San Diego Workshop on Volume Visualization, Comput. Gr. </booktitle> <month> 24 5 (Dec </month> <year> 1990), </year> <pages> 5-12. </pages>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh.
Reference: [95] <author> TARJAN, R. E. and VISHKIN, U. </author> <title> An Efficient Parallel Biconnectivity Algorithm. </title> <journal> SIAM J. Comput. </journal> <volume> 14 (1985), </volume> <pages> 862-874. </pages>
Reference-contexts: Either a depth first search (DFS) or a breadth first search (BFS) can be used for the topological sort. It was initially conjectured that a DFS was inherently sequential and so not solvable in poly-log parallel time <ref> [80, 82, 83, 95] </ref>. In 1989, however, Bongiovanni and Petreschi 111 published a DFS algorithm using O (n 4 ) processors which runs in time O (log 2 n). However, the algorithm is not efficient.
Reference: [96] <author> TUCHMAN, A. M. </author> <title> Volume Rendering and Visualization for Scientific Data. M.S. </title> <type> thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1991. </year>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh.
Reference: [97] <author> UPSON, C. and KEELER, M. V-BUFFER: </author> <title> Visible Volume Rendering. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 22 4 (July </month> <year> 1988), </year> <pages> 59-64. </pages>
Reference-contexts: When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. <p> This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> Substituting these three equations into Equation 3.12 gives, for the case of linear tetrahedral elements: S c (t) = v + wt (3:13) 2 When a mesh is rectilinear, a finite difference scheme <ref> [97, 59, 100] </ref> can be used to approximate the gradient. 31 where v = c 1 + c 2 ff 1 + c 3 fi 1 + c 4 fl 1 and w = c 2 ff 2 + c 3 fi 2 + c 4 fl 2 . <p> See Figure 3.8. The value of n determines the shininess of the surface. The cumulative intensity I (t; ) derived in Section 3.3.2 can be considered to be the first term in Equation 3.14, that is the ambient term. Upson and Keeler <ref> [97] </ref> add a contribution to the diffuse reflection due to surface texture M (x; y; z; ), and use depth cueing to weight both the ambient and diffuse terms. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending.
Reference: [98] <author> UPSON, C., FAULHABER Jr., T., KAMINS, D., LAIDLAW, D., SCHLEGEL, D., VROOM, J., GURWITZ, R. and VAN DAM, A. </author> <title> The Application Visualization System: A Computational Environment for Scientific Visualization. </title> <journal> IEEE Comput. Graph. Appl. </journal> <volume> 9, </volume> <month> 4 (July </month> <year> 1989), </year> <pages> 30-42. </pages> <editor> [99] van LEEUWEN, J. </editor> <booktitle> Graph Algorithms. In Handbook of Theoretical Computer Science. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference: [100] <author> WESTOVER, L. </author> <title> Interactive Volume Rendering. </title> <booktitle> Proceedings Chapel Hill Workshop of Volume Visualization (May 1989), </booktitle> <pages> 9-16. </pages>
Reference-contexts: This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> A brief overview of splatting is given here; it is described in more detail in Chapter 6. In this technique, each cell is projected onto the screen in visibility order from back to front to build up a semitransparent image. Westover <ref> [100] </ref> first referred to this process as splatting, as in splatting a snowball against a wall. See Figure 1.2. The contribution of each cell to the image is proportional to the thickness of the splat. This means the opacity is zero at the periphery of the splat. <p> Substituting these three equations into Equation 3.12 gives, for the case of linear tetrahedral elements: S c (t) = v + wt (3:13) 2 When a mesh is rectilinear, a finite difference scheme <ref> [97, 59, 100] </ref> can be used to approximate the gradient. 31 where v = c 1 + c 2 ff 1 + c 3 fi 1 + c 4 fl 1 and w = c 2 ff 2 + c 3 fi 2 + c 4 fl 2 . <p> As Westover <ref> [100] </ref> states, [the volume density has now become] "a reflective light emitting semi-transparent blob". <p> Upson and Keeler [97] add a contribution to the diffuse reflection due to surface texture M (x; y; z; ), and use depth cueing to weight both the ambient and diffuse terms. Westover <ref> [100] </ref> provides the user additional flexibility by offering a number of transfer functions in addition to opacity and color, such as reflected color tables and opacity modulation tables. For example, setting specular reflectivity to zero turns off specular shading. <p> Shirley and Tuchman's PT algorithm, then describe our suite of four fast splatting approximation algorithms, then discuss distortions introduced by the use of graphics hardware, and finally present comparative timings and discuss image quality. 6.2 Overview of the Splatting Process In splatting, as in splatting a snowball against a wall <ref> [100] </ref>, each cell is projected onto the screen in visibility order from back to front to build up a semitransparent image. The contribution of each cell to the image is proportional to the thickness of the splat.
Reference: [101] <author> WESTOVER, L. </author> <title> Footprint Evaluation for Volume Rendering. </title> <journal> ACM SIGGRAPH Comput. Gr. </journal> <volume> 24 4 (Aug. </volume> <year> 1990), </year> <pages> 367-376. </pages>
Reference-contexts: This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending.
Reference: [102] <author> WILHELMS, J., CHALLINGER J., ALPER N., RAMAMOORTHY S. and VAZIRI A. </author> <title> Direct Volume Rendering of Curvilinear Volumes. </title> <booktitle> San Diego Workshop on Volume Visualization, Comput. Gr. </booktitle> <month> 24 5 (Dec </month> <year> 1990), </year> <pages> 41-47. 161 </pages>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> When discussing the optical properties of this colored semitransparent cloud or volume, it is sometimes referred to as a volume density. This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting <ref> [9, 36, 55, 59, 60, 89, 97, 102] </ref>, projection methods [17, 57, 61, 93, 97, 100, 101, 103, 104, 105], and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. <p> This can be very expensive for meshes with 12 highly refined regions. Some workers are investigating hierarchical rectilinear meshes, using a quadtree or octree concept, which may compensate for this problem <ref> [102] </ref>. If a satisfactory solution can be found, then the many volume rendering techniques developed for the voxel model will become applicable to nonrectilinear meshes. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending.
Reference: [103] <author> WILHELMS, J. and VAN GELDER, A. </author> <title> A Coherent Projection Approach for Direct Volume Rendering. </title> <booktitle> ACM SIGGRAPH Comput. Gr. </booktitle> <month> 25 4 (July </month> <year> 1991), </year> <pages> 275-284. </pages>
Reference-contexts: This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> A fast approximation to this process, sometimes called a splatting algorithm, is given by Shirley and Tuchman [93]. The Shirley and Tuchman splatting algorithm, which 4 they refer to as the Projected Tetrahedra (PT) Algorithm, is used as the basis for the work herein. Wilhelms and Van Gelder <ref> [103] </ref> discuss a number of issues very relevant to DPVR. A brief overview of splatting is given here; it is described in more detail in Chapter 6. In this technique, each cell is projected onto the screen in visibility order from back to front to build up a semitransparent image. <p> At this common vertex, the opacity is nonzero; at all other vertices the opacity is zero. The opacity and color at the vertices are interpolated over the splat. Wilhelms and Van Gelder <ref> [103] </ref> describe three possible interpolation methods for this purpose. To highlight areas of interest in the scalar field and de-emphasize other areas, user-specified color and density transfer functions, are used to map the scalar field value to a color and density. <p> The optical model is the most crucial part of a volume renderer but it also can be the most confusing part. Therefore it is important that the underlying model be clearly understood. Current models such as in <ref> [89, 103] </ref> lack some generality and/or are not easy to comprehend. This chapter presents a new continuous model which is rigorous and quite general, yet is intuitive and easy to understand. The next section discusses an early cloud model upon which many subsequent cloud models are based. <p> For visualization, it offers more flexibility than the particle model described in the last section. The volume renderer described 21 in this thesis is based on this theoretical model. We benefit greatly from the earlier work of Shirley and Tuchman [93] and Wilhelms and Van Gelder <ref> [103] </ref>. The goal is to provide a simple, but accurate, formal model on which to base direct volume rendering of scalar fields defined on irregular meshes and to maximize the flexibility of use of transfer functions. <p> An interval in the density map which produces an isosurface is distinctive, for example a tall narrow rectangular pulse or a delta function. If such intervals are flagged, surface shading can be turned on only for those intervals. Wilhelms and Van Gelder <ref> [103] </ref> outline a continuous model and develop differential equations for cumulative intensity and transmittance based on it. Our model benefits from their development, but also differs from their model in a number of respects. <p> However, if the mesh is highly regular, then these errors can be magnified and be highly noticeable. For this thesis, only tetrahedral cells are considered. The MPVO algorithm can deal with any cells. The PT splatting algorithm, described below, deals only with tetrahedra. Wilhelms and Van Gelder <ref> [103] </ref> discuss the splatting of right-angled parallelepipeds (bricks). Alternatively, nontetrahedral cells can be tetrahedralized so the PT algorithm can be used. <p> At this common vertex, the opacity is nonzero; at all other vertices the opacity is zero. The opacity and color at the vertices are interpolated over the splat; Wilhelms and Van Gelder <ref> [103] </ref> describe three possible interpolation methods. 78 The point marked as NZT is used as a non-zero thickness vertex for the triangles. 6.3 The Projected Tetrahedra Algorithm The PT algorithm [93] works by compositing into an image the polygonal projection of each cell, called the cell's footprint, onto the viewing plane. <p> However, Gouraud shading (linear interpolation) was used to create both images. To create an image using Equation 3.10 without Gouraud shading it would be necessary to either use ray tracing or else to do the scan conversion in software. It has been pointed out <ref> [93, 103] </ref> that because only 8 bits are used for the opacity channel on many high performance workstations, this can lead to distortions in splatted images which are created using hardware opacity blending. This is due to roundoff error when a lot of cells have very small opacity.
Reference: [104] <author> WILLIAMS, P. L. </author> <title> Issues in Interactive Direct Projection Volume Rendering of Nonrec-tilinear Meshed Data Sets. Work in Progress Report, </title> <booktitle> San Diego Workshop on Volume Visualization Dec. </booktitle> <year> 1990, </year> <note> available as Report 1059, </note> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> This thesis focuses on the use of projection methods for nonrectilinear data where the data is rendered without interpolating it to a rectilinear mesh. I refer to this henceforth as Direct Projection Volume Rendering (DPVR). Methods for DPVR are discussed in <ref> [61, 93, 104, 105] </ref>. In DPVR, each cell of the mesh is projected onto the screen in back-to-front or front-to-back order. To do this, an algorithm is required to visibility order the cells of the mesh. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending. <p> Since a DFS is used by this algorithm, it is not significantly parallelizable; however, it is possible to parallelize the overall rendering system of which the algorithm is a part as is shown in Chapter 7 <ref> [104, 105] </ref>. 4.6 Time and Storage Analysis The size of a three-dimensional mesh is the total number of cells, faces, edges and vertices in the mesh.
Reference: [105] <author> WILLIAMS, P. L. </author> <title> Applications of Computational Geometry to Volume Visualization. </title> <booktitle> Proc. 3rd Canadian Conf. </booktitle> <institution> Comput. Geom. </institution> <month> (Aug. </month> <year> 1991), </year> <pages> 247-251. </pages>
Reference-contexts: However, much less has been published dealing with nonrectilinear data <ref> [9, 38, 40, 61, 93, 94, 96, 102, 104, 105] </ref>. Nonrectilinear data is often rendered volumetrically by first interpolating it to a rectilinear mesh. The focus of this thesis is on volume rendering nonrectilinear data without interpolating it to a rectilinear mesh. <p> This subject is discussed at length in Chapter 3. 3 There are three classes of techniques for direct volume rendering: ray tracing or ray casting [9, 36, 55, 59, 60, 89, 97, 102], projection methods <ref> [17, 57, 61, 93, 97, 100, 101, 103, 104, 105] </ref>, and hybrid methods [38, 40]. In ray tracing, rays are cast out from the viewer through the screen pixels. The contributions to the pixel from the points [59] or regions [89] along the ray are calculated. <p> This thesis focuses on the use of projection methods for nonrectilinear data where the data is rendered without interpolating it to a rectilinear mesh. I refer to this henceforth as Direct Projection Volume Rendering (DPVR). Methods for DPVR are discussed in <ref> [61, 93, 104, 105] </ref>. In DPVR, each cell of the mesh is projected onto the screen in back-to-front or front-to-back order. To do this, an algorithm is required to visibility order the cells of the mesh. <p> Certain visualization techniques, particularly direct volume rendering based on projection methods <ref> [17, 57, 61, 93, 97, 101, 102, 104, 105] </ref> require a visibility ordering of the polyhedral cells of a mesh so the cells can be rendered using color and opacity blending. <p> Since a DFS is used by this algorithm, it is not significantly parallelizable; however, it is possible to parallelize the overall rendering system of which the algorithm is a part as is shown in Chapter 7 <ref> [104, 105] </ref>. 4.6 Time and Storage Analysis The size of a three-dimensional mesh is the total number of cells, faces, edges and vertices in the mesh. <p> The coalescing method can result in nonconvex cells not amenable to ordering by the MPVO Algorithm. The most promising approach seems to be to retriangulate a random subset of the original vertices of the mesh using a (conformed) Delaunay triangulation <ref> [64, 105] </ref>. Therefore, this 134 No Filtering Max Indep Set 20% Random 50% Random Serial 79.6 sec. 35.1 sec. 33.4 sec. 55.9 sec. 6 CPUs 30.2 sec. 13.9 sec. 13.0 sec. 21.6 sec.
Reference: [106] <author> WILLIAMS, P. L. </author> <title> Visibility Ordering Meshed Polyhedra. </title> <journal> ACM Trans. </journal> <note> on Graphics 11 2 (April 1992). 162 VITA Peter Williams was born in London, England. He graduated with a Bachelor of Science degree in Engineering-Physics from the University of California, Berkeley in June, 1960. He received a Master of Science degree in Computer Science from the University of Lowell in 1984. 163 </note>
References-found: 105

