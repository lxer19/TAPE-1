URL: ftp://coast.cs.purdue.edu/pub/doc/cryptography/Key-Mngmt-Crypto-FS.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ12.html
Root-URL: http://www.cs.purdue.edu
Title: Key Management in an Encrypting File System  
Author: Matt Blaze 
Affiliation: AT&T Bell Laboratories  
Abstract: As distributed computing systems grow in size, complexity and variety of application, the problem of protecting sensitive data from unauthorized disclosure and tampering becomes increasingly important. Cryptographic techniques can play an important role in protecting communication links and file data, since access to data can be limited to those who hold the proper key. In the case of file data, however, the routine use of encryption facilities often places the organizational requirements of information security in opposition to those of information management. Since strong encryption implies that only the holders of the cryptographic key have access to the cleartext data, an organization may be denied the use of its own critical business records if the key used to encrypt these records becomes unavailable (e.g., through the accidental death of the key holder). This paper describes a system, based on cryptographic "smartcards," for the temporary "escrow" of file encryption keys for critical files in a cryptographic file system. Unlike conventional escrow schemes, this system is bilaterally auditable, in that the holder of an escrowed key can verify that, in fact, he or she holds the key to a particular directory and the owner of the key can verify, when the escrow period is ended, that the escrow agent has neither used the key nor can use it in the future. We describe a new algorithm, based on the DES cipher, for the online encryption of file data in a secure and efficient manner that is suitable for use in a smartcard. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Blaze, M., </author> <title> "A Cryptographic File System for Unix." </title> <booktitle> Proc. First ACM Conference on Computer and Communications Security, </booktitle> <address> Fairfax, VA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Backups and other such routine administrative services can take place in the normal manner and without the encryption keys. Details on CFS can be found in <ref> [1] </ref>. Basically, CFS provides a mechanism to associate "real" directories (on other file systems) that contain encrypted data with temporary "virtual" names through which users can read and write cleart-ext. These virtual names appear in a separate names-pace under the CFS mount point, which is usually called /crypt.
Reference: [2] <author> Denning, D. E., </author> <title> "Encryption and Law Enforcement." </title> <institution> Georgetown University, Computer Science Dept., </institution> <month> Feb. 21, </month> <year> 1994, </year> <note> available by anony mous ftp from cpsr.org. </note>
Reference-contexts: keys are lost or unavailable is rarely an issue.* Public key techniques [3][10] make communication key management easier, allowing two parties to establish a secure channel without prior arrangement. *The law enforcement community argues that it may be an exception; widespread use of encryption techniques may impede police wiretap investigations <ref> [2] </ref>. The ethical, legal, social and technical implications of law enforcement access to cryptographic communication are presently the subjects of intense public debate in the United States and are (fortunately) outside the scope of this paper.
Reference: [3] <author> Diffie, W. and Hellman, M. E., </author> <title> "New Directions in Cryptography." </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> IT-11:644-654, </volume> <month> November </month> <year> 1976. </year>
Reference: [4] <author> Lacy, J., Mitchell, D. and Schell, W., "Cryp-toLib: </author> <booktitle> Cryptography in Software." Proc. Fourth USENIX Security Workshop, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: The proposed US national health care insurance system includes a smartcard-based identification token into which such a scheme could possibly be integrated. 4.1. Performance The standard CFS system employs a software-based cryptographic engine that performs encryption on a modern workstation at between one and three Mbps <ref> [4] </ref>. Because CFS uses the standard file system cache, actual performance is much better, with a performance penalty of only 20-50% above the underlying file system under typical workloads.
Reference: [5] <author> Ioannidis, J. and Blaze, M., </author> <title> "Architecture and Implementation of Network-Layer Security Under Unix." </title> <booktitle> Proc. Fourth USENIX Security Workshop, </booktitle> <month> October </month> <year> 1993. </year>
Reference: [6] <author> National Bureau of Standards, </author> <title> "Data Encryption Standard." </title> <note> FIPS Publication #46, NTIS, </note> <month> April </month> <year> 1977. </year>
Reference-contexts: At the time keys are assigned (e.g., with the CFS cmkdir command), the smartcard is initialized with three sets of cryptographic keys. The first key set, the "file system key," is used for actual file data encryption, and consists, in CFS, of two 56 bit DES <ref> [6] </ref> keys derived from a user-selected secret "passphrase." The file key is also used to hash a known plaintext string that is stored in the host file system in the "check file." The second key, the "audit key," is used to post-audit the card at escrow revocation time and will be
Reference: [7] <author> National Bureau of Standards, </author> <title> "Data Encryption Standard Modes of Operation." </title> <publisher> FIPS Pub lication #81, NTIS, </publisher> <month> December </month> <year> 1980. </year>
Reference-contexts: File Encryption Scheme One of the lessons learned from the design of CFS is that the problem of encrypting files on-line in a file system is somewhat different from other kinds of encryption problems. No single standard encryption mode <ref> [7] </ref> has all the properties required for file system use; further compounding the problem are concerns NFS Svr.
Reference: [8] <institution> National Institute for Standards and Technology, </institution> <note> "Escrowed Encryption Standard." FIPS Publication #185, NTIS, </note> <month> February </month> <year> 1994. </year>
Reference-contexts: All escrow systems suffer from this limitation. In a centralized key distribution system, nothing prevents the use of "out of band" keys not obtained from the key center. In a system such as the government Escrowed Encryption Standard <ref> [8] </ref> (the "Clipper chip"), it is possible to suppress the escrow exploitation field in the data stream or pre-encrypt with a secure non-escrowed cryptosystem. (The government system attempts to reduce this risk by supplying the escrowed devices in tamper-resistant modules, making it difficult to deploy the cipher without the escrow features.)
Reference: [9] <author> Reiher, P., et. al., </author> <title> "Security Issues in the Truf-es File System." </title> <booktitle> PSRG Workshop on Network and Distributed System Security, </booktitle> <year> 1993. </year>
Reference: [10] <author> Rivest, R.L., Shamir, A. and Adleman, L., </author> <title> "A Method of Obtaining Digital Signatures and Public-Key Cryptosystems." </title> <journal> CACM, </journal> <month> February </month> <year> 1978. </year>
Reference: [11] <author> Sandberg, R., Goldberg, D., Kleiman, S., Walsh, D. and Lyon, B., </author> <title> "Design and Implementation of the Sun Network File System." </title> <booktitle> Proc. USENIX, </booktitle> <month> Summer </month> <year> 1985. </year>
Reference-contexts: When CFS is run on a client workstation, the cleartext data (and the cryptographic key passphrase) are never stored on a disk or sent over a network, even when the real directory is located on a remote file server. The system is implemented as a user-level NFS <ref> [11] </ref> server. The basic ow of data in CFS is shown in Figure 1. Key escrow is implemented for CFS as an option to escrow the key when the encrypted directory is created with cmkdir.
Reference: [12] <author> Steiner, J., Neuman, C. and Schiller, J.I., "Ker-beros: </author> <title> An Authentication Service for Open Network Systems." </title> <booktitle> Proc. USENIX, </booktitle> <month> Winter </month> <year> 1988. </year>
Reference-contexts: Keys often serve the dual purpose of authenticating identity as well as protecting against eavesdroppers. The architecture for distributing communication keys is closely tied to the trust relationships within the system, and practical key distribution protocols (such as those employed by the Kerberos system <ref> [12] </ref>) must be carefully engineered to balance reliability, security and performance. In a file system, on the other hand, there is usually little need to distribute keys geographically; most protected files are encrypted and decrypted at the same locations (and by the same users).
Reference: [13] <author> Tygar, J.D. and Yee, B., "Strongbox: </author> <title> A System for Self Securing Programs." </title> <booktitle> CMU Computer Science: 25th Anniversary Commemorative, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [14] <author> Weiner, M.J., </author> <title> "Efficient DES Key Search." </title> <note> Crypto '93, (short presentation) August 1993. Pre-publication draft This paper will appear in Proc. Summer 1994 USENIX Technical Conference, </note> <institution> Boston, </institution> <address> MA, </address> <month> June </month> <year> 1994. </year> <title> The author can be reached via email at mab@research.att.com and via postal mail at AT&T Bell Laboratories, 101 Craw-fords Corner Rd., Room 4G-634, </title> <address> Holmdel, NJ 07733. </address>
Reference-contexts: Interface (internal - localhost) File System Interface Encrypted (local or remote) Cleartext System Calls Smartcard Escrow Smartcard Interface Decrypt Engine Interface CFS Escrow Daemon that the 56 bits of key used by the DES cipher are vulnerable to exhaustive search attack <ref> [14] </ref>. CFS uses a combination of DES "codebook" and pre-computable "stream" cipher modes to approximate the strength of multiple iterations of DES with the runtime latency of only a single iteration of DES.
References-found: 14

