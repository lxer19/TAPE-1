URL: http://www.eecs.umich.edu/techreports/cse/1994/CSE-TR-220-94.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse94.html
Root-URL: http://www.eecs.umich.edu
Email: Email: birlas@eecs.umich.edu  
Title: Conceptual Modeling of Manufacturing Automation  a study directed by  
Author: by Sushil Birla Prof. K. G. Shin 
Date: September 22, 1994  
Address: Ann Arbor, MI 48105  
Affiliation: The University of Michigan Electrical Engineering and Computer Science Dept.  
Abstract-found: 0
Intro-found: 0
Reference: [1] <institution> Air Force Systems Command Aeronautical Systems DIV/PMRRC, Department of Defense|1987 Machine Tool/Manufacturing Technology Development Conference| Executive Summary, </institution> <address> Volume 1, WPAFB, OH 45433-6503, </address> <month> June </month> <year> 1987. </year> <title> Documents industry needs formulated through discussions of invited presentations by over 300 conferees, subgroup workshops, and panel ranking. </title>
Reference-contexts: Many studies and projects sponsored by the U.S. Department of Defense <ref> [1, 36] </ref> document information from many sources leading to the following conclusions that motivate this study: * Opportunities for further creation of wealth abound in improving manufacturing productivity through intelli gent automation. * The time-window of such opportunities has typically been short.
Reference: [2] <author> J. S. Albus, "RCS: </author> <title> A reference model architecture for intelligent control," </title> <journal> Computer, </journal> <volume> vol. 25, no. 5, </volume> <pages> pp. 56-59, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: the issue of making it easier to reuse, modify, extend and integrate software for manufacturing equipment: * building libraries of reusable code * defining standard interfaces between application-code frag ments [48] * defining interoperability standards for implementation plat forms [48] * defining architectures in various views and at various levels <ref> [2, 48] </ref> * applying CASE tools * building tools and aids such as expert systems * building special-purpose application-generators * using the "right" programming language, e.g., ADA [12] * defining schema for an Information Base * creating models [12] Many of these approaches overlap and many are complementary. <p> Our conceptual model is based on deploying the following types of hierarchy in organizing the information: * Generalization/specialization hierarchy * Constituent hierarchy (or aggregation) * Task (decomposition) hierarchy * Resolution-relevance (spatial, temporal) [23] NIST <ref> [2] </ref> has demonstrated the workability of such an architecture. Their reference model architecture for intelligent control provides a good starting point for a hierarchy. From this reference model, we constructed Figures 4-2, and Table 3. 4.3 Nested hierarchical control Meystel [23, 33] describes the concept of nested hierarchical control. <p> Thus, we postulate that the concept of nested hierarchical control, as shown in Figures 4-5, would not be overly restrictive. From Figure 4, taking Level 1 as an example nesting, we show its internal structure <ref> [2] </ref> in Figure 4. It consists of: TD Task decomposition, which includes the functions: * Assign task or job * Plan * Execute the plan Albus [2] places the knowledge required for each task in task frames. <p> From Figure 4, taking Level 1 as an example nesting, we show its internal structure <ref> [2] </ref> in Figure 4. It consists of: TD Task decomposition, which includes the functions: * Assign task or job * Plan * Execute the plan Albus [2] places the knowledge required for each task in task frames. <p> Associated with the role of world modeling is a store of information|data and knowledge|that is a part fo an IB distributed across the various levels. The knowledge may be in the form of rules [23]. Examples of accessible information are: state variables, evaluation functions, models, and programs. Albus <ref> [2] </ref> includes specifications of state information shared with other WM modules in the task frames mentioned above. Thus, we can associate conceptual models of equipment-elements with their purpose in each module at each level in the architectural model. <p> Physical action in the external world is performed only at Level 1. Actions at higher levels are successive compositions of the physical actions at Level 1. Thus, the performers are only conceptual entities. Most of these semantics are established in the application-domain and are documented in literature <ref> [2, 48] </ref>. We have found some additional abstractions to be useful|we will discuss these abstractions in Section 5. 4.5 Spatial span and resolution The spatial span and resolution at the innermost nested level have the smallest values.
Reference: [3] <author> Y. Altintas and C. L. Dong, </author> <title> "Design and analysis of a modular cnc system for machining control and monitoring," in Modeling of Machine Tools: Accuracy, Dynamics, and Control, </title> <booktitle> ASME, </booktitle> <address> 345 East 47th Street, New York, N.Y. 10017, </address> <year> 1990. </year>
Reference-contexts: The composed property of interest is the dynamics of the resultant system, generally, the dynamics model between the input at an actuator and the output motion at some reference point on the joint. Mathematical transformations are available <ref> [3, 49] </ref> to derive the dynamics model for joints having compositions of the type shown in Class-structure 7. As an example, the different types of joint components identified in Section 5.3 are shown assembled in a schematic in Figure 6.
Reference: [4] <institution> Standard practice for the use of the International System of Units (SI), American Society for Testing and Materials, </institution> <address> 1989. ASTM Designation: E 380-89a. </address>
Reference-contexts: The term quantity is used here to mean: "a measurable attribute of phenomena or matter" <ref> [4] </ref>. class-structure 8: Relationships among measurable physical phenomena The first column in Table 6 is the conceptual entity. The second and third columns are attributes. Using a standard basis of physical quantities will ease reuse, extension and integration of software. The vocabulary is based on the "International System of Units [4]" <p> <ref> [4] </ref>. class-structure 8: Relationships among measurable physical phenomena The first column in Table 6 is the conceptual entity. The second and third columns are attributes. Using a standard basis of physical quantities will ease reuse, extension and integration of software. The vocabulary is based on the "International System of Units [4]" and STEP. Definitions of quantities and units The physical quantities are defined in the SI standard [4]. <p> The second and third columns are attributes. Using a standard basis of physical quantities will ease reuse, extension and integration of software. The vocabulary is based on the "International System of Units <ref> [4] </ref>" and STEP. Definitions of quantities and units The physical quantities are defined in the SI standard [4]. <p> The dot represents the multiplication symbol. For derived units with different names, Table 7 provides formulae or mathematical definitions of these derived units in terms of the more basic units, as defined in <ref> [4] </ref>. The same (table) structure serves to define physical quantities that describe material properties, as shown in Table 5, where material property is a derived physical quantity. <p> Certain quantities, e.g., hardness may have to be defined in tables of numbers or curves relating them to previously defined quantities. Unit conversions and scaling factors. Some other derived units, defined in the SI standard <ref> [4] </ref> or in usage in the trade, can be related to the units defined above by conversion factors, i.e. scaling constants (see Class-structure 8). Such scaling factors may also be defined and used to allow for different orders of magnitude. The structure of Table 7 accommodates these definitions.
Reference: [5] <author> G. Arango, </author> <title> "From art form to engineering discipline," </title> <booktitle> in Proceedings of the 5th International Workshop on Software Specifications and Design, </booktitle> <pages> pp. 152-159, </pages> <year> 1989. </year> <title> Provides a unifying conceptual framework for domain analysis methods. </title>
Reference-contexts: Also recall that one result of this step is the identification of a network of domains. A key issue we address is an approach to incrementally evolve a model of a domain to achieve a specified level of performance with a given target reuser. As recommended by Arango <ref> [5] </ref>, we strive for a systematic and incremental approximation to a definition of an ontology and semantics for this problem domain. Per Freeman [18], this is a long-range research issue.
Reference: [6] <author> T. Biggerstaff, </author> <title> "Reusability framework, assessment, and directions," </title> <journal> IEEE Software, </journal> <pages> pp. 41-49, </pages> <month> July </month> <year> 1987. </year> <title> advocates semantic binding; case for partial specs. </title>
Reference-contexts: We chose the conceptual model as the level of reusable resource, since the consensus of experts <ref> [6, 27, 45] </ref> is to focus on reuse at a high level of abstraction, rather than at the code-level. 1.3.1 Basic objectives 1. The conceptual model should support the creation, modification and evolution of software for the functions to be 1 performed. <p> In contrast, the models in our study are more concerned with the primitives from which devices are composed, with the purpose of monitoring and control of motion and the process at a finer granularity in time. In most literature on the general problem of software reuse <ref> [6, 18, 27, 41, 45] </ref>, there is general agreement among the various sectors of the research community that the critical need is to organize knowledge of the application domain.
Reference: [7] <author> T. Biggerstaff and A. Perlis, </author> <title> Software Reusability Volume I, </title> <publisher> ACM Press, </publisher> <address> New York, New York, </address> <year> 1989. </year> <title> introduction. </title>
Reference-contexts: In particular, they should provide guidance on how to capture and organize reusable information : : : According to Biggerstaff <ref> [7] </ref>, Software reuse is the reapplication of a variety of kinds of knowledge about one system to another similar system in order to reduce the effort of development and maintenance of that system. <p> There are many uncertainties in amortizing this cost over (future) applications that are not fully defined and specified at the beginning. In cases where the commonality across expected applications is high (narrow domain <ref> [7] </ref>) and very visible and there is a large volume and frequency of such cases, it is relatively easy to identify the abstractions and establish their economic worthiness. For example, the benefit of parametric feature-definition in a family of parts is well-established. <p> The term fixed is used relative to a time scale, i.e., the architecture is reusable or amortizable over a number of application-development cycles. Biggerstaff <ref> [7] </ref> concludes that for any significant reuse of software components it is essential to have an architectural standard for the domain over which the components are to be reused. <p> A simple union will not suffice for this purpose. Biggerstaff <ref> [7] </ref> observes, in the context of software components, The composing process imposes the most challenging requirements on the representation used to specify components...The notions of functional composition drawn from mathematical theory are largely inadequate.
Reference: [8] <editor> S. Birla, J. Korein, et al. </editor> <booktitle> Next Generation Workstation/Machine Controller (NGC), </booktitle> <month> November </month> <year> 1987. </year> <title> draft requirements and program plan. </title>
Reference-contexts: This scheme has two main categories of workpiece shapes: prismatic and cylindrical. The scheme also has other classes of part-shapes. We adopt Opitz' scheme for classifying parts. Prismatic parts account for two-thirds of the machining equipment used <ref> [8] </ref> and account for the bulk of the variety in equipment configurations. The large amount of potential usage provides the economic attraction. The large variety provides the attraction that the initial concepts will be more easily extensible. Transmission cases, engine blocks, and cylinder heads are examples of prismatic parts. <p> It accounts for the largest proportion of all equipment for transforming shape of mechanical parts <ref> [8] </ref>. In Class-structure 3, we also show processes that support machining. These attendant processes are also within the scope. Our taxonomy separates certain processes that are not specific to machining processes.
Reference: [9] <author> G. Booch, </author> <title> Object Oriented Design with Applications, </title> <publisher> The Benjamin/Cummings Publishing Company, </publisher> <address> 390 Bridge Parkway, Redwood City, California 94065, </address> <year> 1991. </year>
Reference-contexts: In other words, the process yields a generic set of models. However, to assure their adequacy, reusability, and extensibility, the process is incremental and iterative, as observed by Booch <ref> [9] </ref>. 6 2.5 Method envisioned for validation Next, we give a procedure to validate the adequacy of these models, although this study did not reach that stage. S1: Identify test cases, e.g., physical components and their assemblages, deemed useful by users, but different from the ones originally identified. <p> Prototype for kinematic modeling A prototype based on a relational model was constructed to define and apply the kinematic configuration of multi-axis numerically-controlled machine tools. 8.5 Limitations and further work proposed The major technical limitation is that this type of modeling is an iterative and incremental process <ref> [9] </ref>. Significant effort will be required to evaluate the reusability and extensibility of software based on the proposed conceptual model. This study is a small early step in a long spiral road of incremental iterations. Inadequacy of tools poses another obstacle. <p> A parameterized class must be instantiated (its parameters filled in) before instances can be created. Parameterized classes are typically used as container classes; the terms generic class and parameterized class are interchangeable <ref> [9] </ref>. PHYSICAL. adjective 1. Of or pertaining to the body, as distinguished from the mind or spirit; bodily; corporeal. 2. Of or pertaining to material things. 3. Of or pertaining to matter or energy or the sciences dealing with them, especially physics. POLYMORPHISM.
Reference: [10] <author> R. J. Brachman, </author> <title> "I lied about the trees or Defaults and definitions in knowledge representation," </title> <journal> The AI Magazine, </journal> <pages> pp. 80-93, </pages> <year> 1985. </year>
Reference-contexts: Forbus [17] defines the issue as merging measurement interpretation with explanation. 4.2 Hierarchical structured systems Many notable scientists strongly recommend an hierarchical representation <ref> [10, 32, 35] </ref>. It is a well-established approach to manage complexity. Still there is controversy in industry and the concept has not been put into practice explicitly. We offer the following additional arguments in support of an hierarchical representation: 1.
Reference: [11] <author> F. P. Brooks, </author> <title> "No silver bullet," </title> <booktitle> in Information Processing 1986, </booktitle> <publisher> Elsevier Science Publishers B.V. North Holland, </publisher> <year> 1986. </year>
Reference-contexts: Todorov and Levi [52] observe that the current state in practice (and, we add, in manufacturing research communities) is to interface different programs and packages, with great difficulty. They recommend a single integrated database. We focus on the element of conceptual integrity <ref> [11] </ref> implied in their recommendation. Next, we decompose this purpose into a number of techno-economic objectives to be accomplished in stages. In the process, we bring out certain issues in accomplishing these objectives.
Reference: [12] <author> J. K. Chaar, </author> <title> A methodology for developing real-time control software for efficient and dependable manufacturing systems, </title> <type> PhD thesis, </type> <institution> University of Michigan, Ann Arbor, Michigan, </institution> <year> 1990. </year>
Reference-contexts: application-code frag ments [48] * defining interoperability standards for implementation plat forms [48] * defining architectures in various views and at various levels [2, 48] * applying CASE tools * building tools and aids such as expert systems * building special-purpose application-generators * using the "right" programming language, e.g., ADA <ref> [12] </ref> * defining schema for an Information Base * creating models [12] Many of these approaches overlap and many are complementary. Chaar [12] is the closest and most recent example of a methodology developed and applied to real-time control software for a manufacturing cell. <p> forms [48] * defining architectures in various views and at various levels [2, 48] * applying CASE tools * building tools and aids such as expert systems * building special-purpose application-generators * using the "right" programming language, e.g., ADA <ref> [12] </ref> * defining schema for an Information Base * creating models [12] Many of these approaches overlap and many are complementary. Chaar [12] is the closest and most recent example of a methodology developed and applied to real-time control software for a manufacturing cell. It encapsulates complete devices into formal models and transforms these models into implementation-language-level components. <p> levels [2, 48] * applying CASE tools * building tools and aids such as expert systems * building special-purpose application-generators * using the "right" programming language, e.g., ADA <ref> [12] </ref> * defining schema for an Information Base * creating models [12] Many of these approaches overlap and many are complementary. Chaar [12] is the closest and most recent example of a methodology developed and applied to real-time control software for a manufacturing cell. It encapsulates complete devices into formal models and transforms these models into implementation-language-level components. <p> One major issue is that if extensive engineering is done in the beginning: * It delays the start of benefits * It increases the initial investment. * It delays the start of validation (the history of reusability in software has not been very promising <ref> [41, 12] </ref>). * Over the course of the elaborate engineering process, condi tions may keep changing. These factors make the life-cycle-economics of extensive front-end engineering less attractive (lower net present value; higher uncertainty). <p> However, there is very little published literature on this subject. Chaar <ref> [12] </ref> models workstation-level assemblages as a simple union of the constituents. <p> Any other constraints to be applied would be explicitly specified by the user. The synthesis models are given below in terms of mathematical equations, example rules of composition, and textual explanations. 6.1 Composing features of a joint from its constituents Using Chaar's model <ref> [12] </ref>, i.e., an assembly as a union of components, as a point of departure, we show in Class-structure 22 samples of different rules for composing different features of a joint: * the simple aggregation relationship between constituents and assembly, * connectivity relationship for the purpose of dynamics and kinematics, * resultant <p> At the joint-level, these models are assimilated in Class-structure 22. At the level of a multi-joint machine, the kinematics-model and the calibration-model would follow the principles documented in [16]. The other features would be a union <ref> [12] </ref> of the features of all the joints in the machine, with certain conditions, restrictions, and values added for specialized cases or specific instances. <p> A specific workstation would be an aggregation of resources of one or more of the types shown in the struct. Its operations would be the union <ref> [12] </ref> of the operations of its constituents. 6.6 Modeling maintainability aspects of ma chine tool performance The focus of this study in the earlier parts had been on modeling the operational capabilitites, constraints and behavior of servo-controlled manufacturing automation.
Reference: [13] <author> R. A. Collacott, </author> <title> Mechanical Fault Diagnosis and Condition Monitoring, </title> <publisher> Chapman and Hall, </publisher> <address> London, </address> <year> 1977. </year> <title> wide range of techniques, particularly for rotating machinery and other equipment with periodicity and patterns in emitted signals. </title>
Reference-contexts: Our interest is in monitoring the temperature rise and in limiting the temperature-fluctuation for the purpose of estimating this deformation. Fluctuations may be minimized by addition, removal or redistribution of heat. Limit degradation Excessive temperature rise (and secondarily the accompanying structural deformation) accelerate the degradation of equipment <ref> [13] </ref> (e.g., excessive wear in distorted bearings, detereoration of fluids, life-reduction of electronic parts). The scope of our interest is in monitoring and limiting the temperature rise.
Reference: [14] <author> R. Davis and B. Buchanan, </author> <title> "Meta-level knowledge: overview and applications," </title> <booktitle> in Proc. IJCAI, </booktitle> <pages> pp. 920-927, </pages> <month> August </month> <year> 1977. </year>
Reference-contexts: This study focuses on this issue of knowledge acquisition and representation, following the process described in Section 2. 1.4.4 Capturing undocumented information It is not sufficient to base the conceptual model on information formally-documented in current practice, because it may not be sufficient for reuse. Davis <ref> [14] </ref> observes: Typically, much of the design and organizational information is not well managed. It is widely scattered, e.g., throughout comments in system code, in documents and manuals separately, and in the mind of the system architect. 1.4.5 Data-structure management With respect to the implementation of these representations, Davis [14] explains <p> Davis <ref> [14] </ref> observes: Typically, much of the design and organizational information is not well managed. It is widely scattered, e.g., throughout comments in system code, in documents and manuals separately, and in the mind of the system architect. 1.4.5 Data-structure management With respect to the implementation of these representations, Davis [14] explains how some of the engineering cost and time is wasted in data-structure management: Even adding a new instance of an existing data type is a major task (difficult to find all of the necessary information)...Various approaches to knowledge representation (predicate calculus, semantic nets, production rules, frames, etc.) have all
Reference: [15] <author> J. Denavit and R. Hartenberg, </author> <title> "A kinematic notation for lower-pair mechanisms based on matrices," </title> <journal> Journal of Applied Mechanics, </journal> <pages> pp. 215-221, </pages> <month> june </month> <year> 1955. </year>
Reference-contexts: additional calibration procedures at joint-level [CM (j)]: set of calibration models of components j lim eq (j): equivalent limits of component j class-structure 22: Joint 6.2 Kinematic synthesis model Our basic synthesis model is the ISO standard [22] for kinematic modeling, which is close to the well-known Denavit-Hartenberg (D-H) model <ref> [15] </ref>. This draft standard had its genesis in robotics, primarily oriented toward a single robotic device.
Reference: [16] <author> M. A. Donmez, C. R. Liu, and M. M. Barash, </author> <title> "A generalized mathematical model for machine tool errors," in Modeling, Sensing, and Control of Manufacturing Processes, </title> <editor> K. Srini-vasan et al., editors, </editor> <publisher> ASME Press, </publisher> <year> 1988. </year>
Reference-contexts: If errors of motion were included <ref> [16] </ref>, B 2 4 " z 1 " x Y + ffi y 0 0 0 1 7 where: " x is rotational error about x-axis, yaw, " y is rotational error about y-axis, pitch, 27 Calibration-related attributes: calibration-procedure :string calibrated-deadband :real calibration model (form as in state space model) State <p> The D-H model is also extended to include kinematic errors of motion, as described by Donmez <ref> [16] </ref>. The composed property of interest is the motion of the work-point as a result of motions of the joints (or vice versa). Mathematical transformations for non-redundant compositions are available [16] as an established body of knowl 30 edge. <p> The D-H model is also extended to include kinematic errors of motion, as described by Donmez <ref> [16] </ref>. The composed property of interest is the motion of the work-point as a result of motions of the joints (or vice versa). Mathematical transformations for non-redundant compositions are available [16] as an established body of knowl 30 edge. <p> At the joint-level, these models are assimilated in Class-structure 22. At the level of a multi-joint machine, the kinematics-model and the calibration-model would follow the principles documented in <ref> [16] </ref>. The other features would be a union [12] of the features of all the joints in the machine, with certain conditions, restrictions, and values added for specialized cases or specific instances.
Reference: [17] <author> K. Forbus, </author> <title> "Qualitative physics: past, present, and future.," </title> <booktitle> in Exploring Artificial Intelligence: Survey talks from the national conferences on artificial intelligence, </booktitle> <editor> H. Shrobe, </editor> <booktitle> editor, </booktitle> <pages> pp. 239-296. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: Q5: How should knowledge be organized to apply relevant case experience in prognostics and diagnostics about the controlled system? This question is linked to the previous question. Forbus <ref> [17] </ref> defines the issue as merging measurement interpretation with explanation. 4.2 Hierarchical structured systems Many notable scientists strongly recommend an hierarchical representation [10, 32, 35]. It is a well-established approach to manage complexity. Still there is controversy in industry and the concept has not been put into practice explicitly.
Reference: [18] <author> P. Freeman, </author> <title> editor, Tutorial: Software Reusability, </title> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, D.C., </address> <year> 1987. </year>
Reference-contexts: In contrast, the models in our study are more concerned with the primitives from which devices are composed, with the purpose of monitoring and control of motion and the process at a finer granularity in time. In most literature on the general problem of software reuse <ref> [6, 18, 27, 41, 45] </ref>, there is general agreement among the various sectors of the research community that the critical need is to organize knowledge of the application domain. <p> We next devise a methodology for domain analysis by assimilating ideas from different sources and present the chosen method in terms of modifications to the published methodologies. This is consistent with the recommendation given by Freeman <ref> [18] </ref> where he also states that no such methodologies exist and establishing such methodologies is a long-term research task. 2.1 Methodologies surveyed We start with an overview of tasks in domain engineering, as outlined in [41, pp.20-21]. Tasks requiring domain expertise 1. Identify relevant areas of knowledge. 2. <p> As recommended by Arango [5], we strive for a systematic and incremental approximation to a definition of an ontology and semantics for this problem domain. Per Freeman <ref> [18] </ref>, this is a long-range research issue. Our approach to the domain of manufacturing equipment may be viewed as a case-study in the path of long-range research efforts in software-reuse.
Reference: [19] <author> R. Guha and D. Lenat, </author> <title> "Cyc,: A midterm report," </title> <journal> AI Magazine, </journal> <pages> pp. 33-59, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: Generally, many secondary processes support the primary process. The conceptual model should include the necessary supporting processes. Referring to Class-structure 3, these secondary processes may be physical, computational or cognitive, or even the process of existence. Cyc <ref> [19] </ref> has associated the concept of existence with things, i.e., physical objects. It serves the purpose of associating a starting time and an ending time between which the entity exists in a certain context. It unifies the concepts of product and process. <p> Structural materials do not satisfy the above assumptions completely [51]. Yet they are a part of well-established engineering practice for limited specified purposes. Steels, high-quality cast irons, aluminum and aluminum alloys are examples of commonly used materials in machined products for which these assumptions can be made. Cyc <ref> [19] </ref> has a taxonomy of substances, including materials, which we adopt at the top level. STEP [24] provides a taxonomy of materials and their properties, which we adopt under the substance model. Materials for the workpiece, cutting tools and components of the manufacturing equipment will branch off under this taxonomy. <p> Q4: How should knowledge be organized to draw conclusions from disparate data, e.g., sensed information? Schank [43] treats this question as a generalization problem. The concept of contexts is mentioned in <ref> [19, 29] </ref>, but they did not report any general solutions or any methodology to determine what con texts are adequate and sufficient for the purpose.
Reference: [20] <author> F. Hayes-Roth, D. A. Waterman, and D. B. Lenat, </author> <title> Building Expert Systems, </title> <booktitle> volume 1 of Teknowledge series in Knowledge Engineering, </booktitle> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1983. </year>
Reference-contexts: Secondly, we want to represent this knowledge in a way that maximizes reusability, e.g., by abstracting commonalities across different basic machines. We have focused on characteristics related to monitoring and continuous control of servo-controlled motion, with the intent to extend the model for monitoring and diagnostics. Hayes-Roth <ref> [20, p. 143-144] </ref> recommends that the conceptualization stage should focus on identifying the key concepts and their relations and not commit to formal representations prematurely| different representation frameworks may be more suitable for different concepts.
Reference: [21] <author> R. Hocken, </author> <title> "How to cope with on-machine measurement," </title> <booktitle> Manufacturing Engineering, </booktitle> <pages> pp. 8-10, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Machines of other configurations, but composed of commonly used building blocks. See Appendix D. 2. Precision machines performing different types of functions on different types of discrete shape-retaining parts: * positioning, orientation and other manipulation of discrete mechanical, electrical, optical or electro-optical parts; * measurement of dimensions <ref> [21] </ref>, locations, orientations (relative and absolute); * assembly of such parts by placement or insertion at pre determined absolute or relative locations; * combinations of such functions in the same work-cell. 3. <p> The signal-to-noise discrimination problem becomes more severe, and representations become more complex. 4. Monitoring, tracking, estimation and use of changing dynamic and kinematic characteristics such as friction, stiffness, backlash, geometric errors of motion, and thermal deformation <ref> [21] </ref>. 5. Inclusion of fixture, workpiece, tooling, and such attachments, to extend the scope of the system from the basic machine to the workstation level and then to the cell level. 6.
Reference: [22] <institution> ISO CD 10303-105 Product Model Data Representation and Exchange: Part 105|Kinematics, International Standards Organization, </institution> <month> july </month> <year> 1991. </year> <note> Version: Sapporo 91. </note>
Reference-contexts: coupling drive amplifier motor feedback-sensor position-sensor velocity-sensor current-sensor temperature-sensor rotational-joint spindle : : : class-structure 7: Constituents of a programmable servo controlled basic machine 3.8.2 Scope of kinematic configurations We limit the scope to kinematic non-redundant mechanisms that can be modeled in terms of the ISO standard for representing kinematics <ref> [22] </ref>. Furthermore, we limit configurations to one of those categorized in Appendix E of [36]. We limit our initial modeling-scope to machines, Class-structure 7, equipped with programmable servo-controllable actuation, as well as perception of pertinent state. Most common state information is the servo-position and velocity (often derived from position). <p> Configuration-related attributes constituents = T j (components of the joint) [enumer ation] connectivity of components modeled per <ref> [22] </ref> input = input of first component in connectivity chain output = output of last component in connectivity chain serviceable constituents = S (serviceable constituents of components) Kinematic and dynamics model lower (intra-joint) kinematic model derived from models of constituents higher (extra-joint) kinematic model = model of jointpair component Travel limits <p> set of calibration of procedures of components j [CP k ]: set of additional calibration procedures at joint-level [CM (j)]: set of calibration models of components j lim eq (j): equivalent limits of component j class-structure 22: Joint 6.2 Kinematic synthesis model Our basic synthesis model is the ISO standard <ref> [22] </ref> for kinematic modeling, which is close to the well-known Denavit-Hartenberg (D-H) model [15]. This draft standard had its genesis in robotics, primarily oriented toward a single robotic device. <p> Thus, the scheme allows the kinematic modeling of the complete loop from the work-point on the tool, through the toolholder, tool-supporting substructure of the machine, ground, workpiece-supporting substructure of the machine, fixture, and, finally, the work-point on the workpiece. Connectivity is defined by extending the ISO kinematic model <ref> [22] </ref>. The mechanical engineering researchers 21 agreed that the scheme could save software-creation labor by reusing previous knowledge captured in the database.
Reference: [23] <author> C. Isik and A. </author> <title> Meystel, "Pilot level of a hierarchical controller for an unmanned mobile robot," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 241-255, </pages> <year> 1988. </year>
Reference-contexts: Our conceptual model is based on deploying the following types of hierarchy in organizing the information: * Generalization/specialization hierarchy * Constituent hierarchy (or aggregation) * Task (decomposition) hierarchy * Resolution-relevance (spatial, temporal) <ref> [23] </ref> NIST [2] has demonstrated the workability of such an architecture. Their reference model architecture for intelligent control provides a good starting point for a hierarchy. <p> Their reference model architecture for intelligent control provides a good starting point for a hierarchy. From this reference model, we constructed Figures 4-2, and Table 3. 4.3 Nested hierarchical control Meystel <ref> [23, 33] </ref> describes the concept of nested hierarchical control. He has applied it to unmanned mobile robots in an environment considerably less structured and less predictable than the environment for our manufacturing applications. <p> It may use and update prior information in the system. Associated with the role of world modeling is a store of information|data and knowledge|that is a part fo an IB distributed across the various levels. The knowledge may be in the form of rules <ref> [23] </ref>. Examples of accessible information are: state variables, evaluation functions, models, and programs. Albus [2] includes specifications of state information shared with other WM modules in the task frames mentioned above.
Reference: [24] <institution> Product data exchange specification, </institution> <note> First working draft, </note> <month> Oc-tober </month> <year> 1988. </year> <title> Standard for the Exchange of Product Model Data. </title>
Reference-contexts: We began identifying parameters that allow generalization. We also began to lay successive stages of specialization-generalization of concepts, thus setting up potential stages of extension. Eventually, we have to test if the usefulness (scope) of our concepts is expandable economically. ISO/STEP <ref> [24] </ref> has developed a taxonomy under shape-retaining products, with a subclassification for discrete mechanical parts. We adopt the ISO/STEP taxonomy. 3.2.1 Scope of shape Shaping the workpiece to specifications is the main function of the manufacturing equipment on which we want to focus. <p> Steels, high-quality cast irons, aluminum and aluminum alloys are examples of commonly used materials in machined products for which these assumptions can be made. Cyc [19] has a taxonomy of substances, including materials, which we adopt at the top level. STEP <ref> [24] </ref> provides a taxonomy of materials and their properties, which we adopt under the substance model. Materials for the workpiece, cutting tools and components of the manufacturing equipment will branch off under this taxonomy.
Reference: [25] <author> H. F. Korth and A. Silberchatz, </author> <title> Database System Concepts, </title> <publisher> McGraw-Hill, Inc., </publisher> <year> 1991. </year>
Reference-contexts: Container classes are most often defined as generic or parameterized classes, with some parameter des ignating the class of the contained objects. CONTEXT. The conditions that bound and relate discrete events temporally, spatially and semantically. DATA ABSTRACTION AT CONCEPTUAL LEVEL. (in the context of databases, per Korth <ref> [25] </ref> A description of what data are actually stored in the database, and the relationships that exist among the data : : : in terms of a small number of relatively simple structures : : : (the abstraction) hides certain details of how the data is stored and maintained.
Reference: [26] <author> T. R. Kramer, </author> <title> "A library of material removal shape volumes (mrsevs)," </title> <type> Technical report, </type> <institution> National Institute of Standards and Technology, Gaithersburg, Maryland 20899, </institution> <year> 1992. </year> <title> NIS-TIR 4809: catalogs machined features coded in EXPRESS. </title> <type> 43 </type>
Reference-contexts: We include a broader classification in the scope, in order to extend use of abstractions that are common to different types of part-shapes. 3.2.2 Scope of shape-features A stronger commonality across different part-shapes can be found in the shapes of the manufactured features. Kramer <ref> [26] </ref> has compiled a catalog, which we adopt. Within these features, we limit the initial scope of manufactured features to shapes that are planar, cylindrical, conical, a section of a torus generated by a circular arc, or a composition of these surfaces.
Reference: [27] <author> C. Krueger, </author> <title> "Software reuse," </title> <booktitle> in acm computing surveys, S. </booktitle> <address> March, </address> <publisher> editor, </publisher> <pages> pp. 131-183, </pages> <institution> Association for Computing Machinery, Inc., </institution> <address> 1515 Broadway, New York, NY 10036, </address> <month> June </month> <year> 1992. </year> <title> Introduces notion of cognitive distance in reuse. </title>
Reference-contexts: We chose the conceptual model as the level of reusable resource, since the consensus of experts <ref> [6, 27, 45] </ref> is to focus on reuse at a high level of abstraction, rather than at the code-level. 1.3.1 Basic objectives 1. The conceptual model should support the creation, modification and evolution of software for the functions to be 1 performed. <p> The conceptual model should support the creation, modification and evolution of software for the functions to be 1 performed. To quote Krueger <ref> [27] </ref>, ": : : it must be easier to reuse 1 the artifacts than it is to develop the software from scratch..." or from code fragments, as used in cur rent practice. 2. <p> In contrast, the models in our study are more concerned with the primitives from which devices are composed, with the purpose of monitoring and control of motion and the process at a finer granularity in time. In most literature on the general problem of software reuse <ref> [6, 18, 27, 41, 45] </ref>, there is general agreement among the various sectors of the research community that the critical need is to organize knowledge of the application domain. <p> Biggerstaff [7] concludes that for any significant reuse of software components it is essential to have an architectural standard for the domain over which the components are to be reused. Krueger <ref> [27] </ref> ranks architecture second among eight different approaches to reuse, when the objective is to reduce the intellectual effort required to go from the initial conceptualization of a system to a specification of the system in abstractions of the reuse technique.
Reference: [28] <author> P. Loucopoulos and R. Zicari, </author> <title> Conceptual Modeling, Databases, and Case, </title> <publisher> John Wiley & Sons, Inc, </publisher> <year> 1992. </year>
Reference-contexts: Therefore, our primary focus is on modeling elements of a basic machine in the language customary to the domain and the related engineering subdomains. Loucopoulos <ref> [28] </ref> classifies conceptual modeling orientation along one of three dimensions: data modeling, process modeling, and event modeling. The domain of manufacturing equipment requires a mix of all three dimensions.
Reference: [29] <author> S. Lytinen, </author> <title> "Conceptual dependency and its descendants," </title> <journal> Computer Math. Applic., </journal> <volume> vol. 23, no. </volume> <pages> 2-5, pp. 51-73, </pages> <year> 1992. </year>
Reference-contexts: Q4: How should knowledge be organized to draw conclusions from disparate data, e.g., sensed information? Schank [43] treats this question as a generalization problem. The concept of contexts is mentioned in <ref> [19, 29] </ref>, but they did not report any general solutions or any methodology to determine what con texts are adequate and sufficient for the purpose. <p> We offer the following additional arguments in support of an hierarchical representation: 1. The underlying body of general engineering knowledge is hierarchical, though the knowledge used in a particular system is often not explicit. Lytinen <ref> [29] </ref> brings out the notion of organizing structures for causal knowledge that comes from more general causal laws, so that the same knowledge can be applied in different situations. 2. Such physical systems are engineered in an hierarchy of constituents. <p> The nested hierarchical architecture discussed in Section 4 sets up these contexts. A higher level in the hierarchy may give a different simplified model at different times to different lower levels nested within it. The architecture proposed in Section 4 provides for categorizing goals <ref> [29] </ref> which help determine which models and which approximations and simplifications are appropriate when in pursuit of a goal of a particular category.
Reference: [30] <author> Y. Matsumoto, </author> <title> "A software factory: An overall apoproach to software production," in Tutorial: Software Reusability, </title> <editor> P. Freeman, </editor> <booktitle> editor, </booktitle> <pages> pp. 155-178, </pages> <booktitle> The Computer Society of the IEEE, </booktitle> <year> 1987. </year> <title> Examples from the Fuchu software factory, Toshiba, </title> <address> Japan. </address>
Reference-contexts: The term manufacturing is often used synonymous to the terms producing, making, and processing. For example, even the creation of software has been viewed as "manufacturing" software <ref> [30] </ref>. M anufacturing has been more commonly used in the context of making a product, which, historically, has been a physical product. However, software is also being viewed as a product. The views and usages of the term manufacturing are changing with the socio-technological environment.
Reference: [31] <author> R. McCain, </author> <title> "Reusable software component construction: A product-oriented paradigm," </title> <booktitle> in Proceedings of the 5th AIAA/ACM/NASA/IEEE Computers in Aerospace Conference, </booktitle> <pages> pp. 125-135. AIAA, </pages> <month> oct </month> <year> 1985. </year> <title> methodology|introduces domain analysis for components of an application. </title>
Reference-contexts: The result is a collection of natural-language-requirements for domain-analysis. As forecast by Arango and Prieto [41, p.14], this turns out to be a network of domains. As we proceed with the investigation of the domain of manufacturing equipment, along lines recommended by McCain <ref> [31] </ref>, we identify subdomains of equipment. At this point, it becomes necessary to define the purpose of each subdomain. In turn, it becomes appropriate to define a reference architecture. We have done this by gleaning, adapting and synthesizing from published architectural models. <p> The subsequent tasks are not addressed in this study. 3 We modify the method by performing a brief qualitative version for defining the boundary of the domain. 5 In comparison, we also considered the methodology for developing reusable components, given by McCain <ref> [31] </ref>. Following is an outline of the part that corresponds to the domain engineering process given above. 1. Perform "market analysis". 4 2. Perform domain analysis * for the application, and * for the components. 3. Perform usability analysis. 4. <p> Analyze domain (a) Identify common features (b) Select specific functions/objects (c) Abstract functions/objects (d) Classify (e) Define domain language * Taxonomy 6 * Frames * Language * Model 3. Produce reusable workproducts 7 McCain <ref> [31] </ref> recommends that abstract interface specifications should be defined for each reusable component. However, before we can define component interface specifications or even component functions, an architecture relating the components to the system is needed. <p> We are building on the lessons learned, in an iterative and incremental manner. Early economic tradeoff assessment Another departure from published methodologies was the performance of an early version of a market analysis <ref> [31] </ref> in terms of potential gain in applicability versus the pain of assuring applicability, i.e., assessing degree of flexibility against degree of development uncertainty, cost, and time.
Reference: [32] <author> D. McDermott and E. Davis, </author> <title> "Planning routes through uncertain territory," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 22, </volume> <pages> pp. 107-156, </pages> <year> 1984. </year>
Reference-contexts: Forbus [17] defines the issue as merging measurement interpretation with explanation. 4.2 Hierarchical structured systems Many notable scientists strongly recommend an hierarchical representation <ref> [10, 32, 35] </ref>. It is a well-established approach to manage complexity. Still there is controversy in industry and the concept has not been put into practice explicitly. We offer the following additional arguments in support of an hierarchical representation: 1.
Reference: [33] <author> A. </author> <title> Meystel, "Theoretical foundations of planning and navigation for autonomous robots," </title> <journal> International Journal of Intelligent Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 73-128, </pages> <year> 1987. </year>
Reference-contexts: Their reference model architecture for intelligent control provides a good starting point for a hierarchy. From this reference model, we constructed Figures 4-2, and Table 3. 4.3 Nested hierarchical control Meystel <ref> [23, 33] </ref> describes the concept of nested hierarchical control. He has applied it to unmanned mobile robots in an environment considerably less structured and less predictable than the environment for our manufacturing applications.
Reference: [34] <author> D. S. Nau, G. Zhang, and S. K. Gupta, </author> <title> "Generation and evaluation of alternative operation sequences," in Quality Assurance through Integration of Manufacturing Processes and Systems, </title> <booktitle> volume PED-Vol.56, ASME, </booktitle> <year> 1992. </year>
Reference-contexts: Thus, it is expected that in the future the audit trail will also include process-capability models of the manufacturing system, especially the equipment. Nau <ref> [34] </ref> has shown off-line usefulness|with on-line-modeling, the effect of equipment on process-capability could be traced and compensated much more productively.
Reference: [35] <author> A. Newell, </author> <title> Unified Theories of Cognition, </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, MA, U.S.A., </address> <year> 1990. </year>
Reference-contexts: This resource is identified as an "Information Base (IB)" in [48]. The acquisition and organization of the required knowledge is a well-recognized problem in the fields of Artificial Intelligence <ref> [35] </ref> and Software Engineering [41]. This study addresses the issue of organizing an initial amount of knowledge in a way that it can be extended economically. <p> To quote Newell <ref> [35] </ref>: Much of the difficulty turns out to be that we don't understand what we want to represent, not that we can't find first-order ways of doing it. Another part of the difficulty is that the representation is often very awkward and indirect. <p> Forbus [17] defines the issue as merging measurement interpretation with explanation. 4.2 Hierarchical structured systems Many notable scientists strongly recommend an hierarchical representation <ref> [10, 32, 35] </ref>. It is a well-established approach to manage complexity. Still there is controversy in industry and the concept has not been put into practice explicitly. We offer the following additional arguments in support of an hierarchical representation: 1.
Reference: [36] <institution> Next Generation Workstation/Machine Controller (NGC) Requirements Definition Document (RDD), </institution> <address> 1989. Martin Mari-etta, Denver, Colorado. </address>
Reference-contexts: Many studies and projects sponsored by the U.S. Department of Defense <ref> [1, 36] </ref> document information from many sources leading to the following conclusions that motivate this study: * Opportunities for further creation of wealth abound in improving manufacturing productivity through intelli gent automation. * The time-window of such opportunities has typically been short. <p> Furthermore, we limit configurations to one of those categorized in Appendix E of <ref> [36] </ref>. We limit our initial modeling-scope to machines, Class-structure 7, equipped with programmable servo-controllable actuation, as well as perception of pertinent state. Most common state information is the servo-position and velocity (often derived from position). Information of average actuation power is also usually available. <p> These user types were identified in the NGC Requirements Definition Document <ref> [36] </ref> and the NGC Schema [48]. The descriptions also refer to the Needs analysis document [44]. The descriptions are ordered by increasing scope of tasks and responsibilities. <p> D Common kinematic configura tions in manufacturing equipment Following is an excerpt from the NGC Requirements Definition Document <ref> [36, Appendix E] </ref> that describes different types of machine configurations in common use in manufacturing industries. 38 The list is arranged in order of increasing complexity. <p> The review-ers of the NGC Requirements Definition Document <ref> [36] </ref> considered these categories very comprehensive. 1. 1-axis motion (s) + a spindle to rotate tool or workpiece. (a) Few translational independent axes of motion. (b) Many independent, but concurrent, translational processing motions with closely coupled workpiece changing motions. 2. 2-axis motion (s) + a spindle to rotate tool or workpiece.
Reference: [37] <author> H. Opitz, Werkstuckbeschreibendes Klassifizierungssystem, Girardet, </author> <title> Essen, </title> <address> Germany, </address> <year> 1968. </year> <title> Genesis of group technology and part feature-based processing. </title>
Reference-contexts: Therefore, one aspect of bounding the domain of manufacturing equipment is by bounding the scope of overall shape of the workpiece and the shape of features on the workpiece that will relate to the manufacturing equipment. Opitz <ref> [37] </ref> established a parts-classification scheme to organize the knowledge for processing these parts. This scheme has two main categories of workpiece shapes: prismatic and cylindrical. The scheme also has other classes of part-shapes. We adopt Opitz' scheme for classifying parts.
Reference: [38] <author> D. L. Parnas and D. P. Siewiorek, </author> <title> "Use of the concept of transparency in the design of hierarchically structured systems," </title> <journal> Communications of the ACM, </journal> <volume> vol. 18, </volume> <pages> pp. 401-408, </pages> <month> July </month> <year> 1975. </year>
Reference-contexts: The results of the experience are reported in Section 7. 2.3 Combining Top-down and Bottom-up Approaches In designing a software architecture for reuse, flexibility and extension, the traditional top-down or outside-in approach is inadequate, as explained by Parnas <ref> [38] </ref>, who proposes these (: : : outside-in approach and inside-out approach : : : ) as complementary approaches which must be used in some judicious combination according to the needs of the situation. We have taken an approach consistent with this recommendation. Parnas [38] recommends : : : begin with <p> is inadequate, as explained by Parnas <ref> [38] </ref>, who proposes these (: : : outside-in approach and inside-out approach : : : ) as complementary approaches which must be used in some judicious combination according to the needs of the situation. We have taken an approach consistent with this recommendation. Parnas [38] recommends : : : begin with a specification of the family of objects one wishes to construct : : : members must be highly similar items.
Reference: [39] <author> C. L. Phillips and H. T. Nagle, </author> <title> Digital Control System Analysis and Design, </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J. 07632, </address> <year> 1984. </year>
Reference-contexts: It will operate properly in the environment of the plant. 2. It is protected from emissions of the manufacturing process, e.g., chips and dust. 3. It is observable and controllable <ref> [39] </ref>. 4. Its behavior within its operating range may be approximated as a linear system. 5. The noise in signals from continuous processes, e.g., position feedback in servo-controlled motion, may be treated as white Gaussian noise. These conditions often do not hold in operation.
Reference: [40] <author> R. Prieto-Diaz, </author> <title> "Domain analysis for reusability," </title> <booktitle> in Proceedings of COMPSAC '87, </booktitle> <pages> pp. 23-29. </pages> <publisher> IEEE, </publisher> <year> 1987. </year> <title> Gives methodology in terms of data flow diagrams. </title>
Reference-contexts: Perform domain analysis * for the application, and * for the components. 3. Perform usability analysis. 4. Implement/use prototype (includes full user interface). 5 . . . . Within the revised scope of domain analysis noted earlier, we next review the steps in this task. Prieto-Diaz <ref> [40] </ref> proposes a methodology in terms of data flow diagrams, from which we extracted the following outline: 1. Prepare domain information (a) Define approach (b) Bound and define domain (c) Select knowledge sources (d) Define requirements for domain analysis 2.
Reference: [41] <author> R. Prieto-Diaz and G. Arango, </author> <title> Domain Analysis and Software Systems Modeling, </title> <publisher> The IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, 1991. </address> <publisher> IEEE Computer Society Press tutorial. </publisher>
Reference-contexts: This is to be accomplished by allowing the integration of knowledge available to perform these functions (the cellular manufacturing concept [52]), using available computer technology. The initial body of knowledge should be reusable and extensible, as economics permit. 1.1 Definition of reusability According to Prieto-Diaz <ref> [41] </ref>, Reusability is a collection of principles and heuristics for the creation and evolution of software systems : : : they provide guidance on how other technologies can best be used. <p> This reused knowledge includes artifacts such as domain knowledge, development experience, design decisions, architectural structures,, requirements, designs, code, documentation : : : Reusability : : : depends on a particular problem and problem-solving context, i.e., : : : method <ref> [41, pp.10] </ref>. This study focuses on the reuse of domain knowledge, including constraints on its reusability. The results are at the level of r equirements analysis in the traditional software engineering life-cycle. <p> This resource is identified as an "Information Base (IB)" in [48]. The acquisition and organization of the required knowledge is a well-recognized problem in the fields of Artificial Intelligence [35] and Software Engineering <ref> [41] </ref>. This study addresses the issue of organizing an initial amount of knowledge in a way that it can be extended economically. Todorov and Levi [52] observe that the current state in practice (and, we add, in manufacturing research communities) is to interface different programs and packages, with great difficulty. <p> In the process, we bring out certain issues in accomplishing these objectives. These issues, in turn, provide the rationale for the scope and the direction of investigation chosen in this study. In this process, as recommended by Prieto-Diaz <ref> [41, p.10] </ref>, we will define scope by the extent over which reuse is valued and the extent over which the problem domain is cohesive and relatively stable. 1.3 Productivity objectives The initial conceptual model should support the basic objectives given below. <p> Thus, the process of defining the right abstractions for the right domains is going to be iterative by its very nature <ref> [41] </ref>, adding to the complexity of the economics. This study explores two approaches to deal with these difficulties. The first approach is to search for ways to bound the domain to obtain stability. This is an open research question [41]. <p> right domains is going to be iterative by its very nature <ref> [41] </ref>, adding to the complexity of the economics. This study explores two approaches to deal with these difficulties. The first approach is to search for ways to bound the domain to obtain stability. This is an open research question [41]. The second approach is to find a modeling technique that makes evolution easy. This is also an open research question [41]. However, a combination of the two approaches may be a fruitful direction. 1.4.2 Gaining user acceptance There are two known obstacles to reuse of software: 1. <p> The first approach is to search for ways to bound the domain to obtain stability. This is an open research question <ref> [41] </ref>. The second approach is to find a modeling technique that makes evolution easy. This is also an open research question [41]. However, a combination of the two approaches may be a fruitful direction. 1.4.2 Gaining user acceptance There are two known obstacles to reuse of software: 1. Users perceive reuse to be a constraint on their creativity. <p> One approach to avoid this problem is by concentrating 2 on applications of well-established engineering practice. Thus the conceptual model should reduce the labor of applying routine engineering and allow the engineer more time for the creative part of the task <ref> [41] </ref>. Ideally, the conceptual model should be perceived as a support for creative work. 2. The practice of function-level abstractions is not common in mechanical engineering, especially in manufacturing applications. Traditional MCAD tools do not support practitioners at this level of abstraction. <p> Prieto <ref> [41] </ref> describes this problem as the lack of a r euse infrastructure. <p> We develop the method followed in this study as an assimilation and adaptation of a number of published methodologies. Following the chosen methodology, we further prepare the domain information. The result is a collection of natural-language-requirements for domain-analysis. As forecast by Arango and Prieto <ref> [41, p.14] </ref>, this turns out to be a network of domains. As we proceed with the investigation of the domain of manufacturing equipment, along lines recommended by McCain [31], we identify subdomains of equipment. At this point, it becomes necessary to define the purpose of each subdomain. <p> In contrast, the models in our study are more concerned with the primitives from which devices are composed, with the purpose of monitoring and control of motion and the process at a finer granularity in time. In most literature on the general problem of software reuse <ref> [6, 18, 27, 41, 45] </ref>, there is general agreement among the various sectors of the research community that the critical need is to organize knowledge of the application domain. <p> In most literature on the general problem of software reuse [6, 18, 27, 41, 45], there is general agreement among the various sectors of the research community that the critical need is to organize knowledge of the application domain. Prieto-Diaz <ref> [41] </ref> identifies this task as d omain analysis, as a part of the overall field of domain engineering, analogous to software engineering. We next devise a methodology for domain analysis by assimilating ideas from different sources and present the chosen method in terms of modifications to the published methodologies. <p> This is consistent with the recommendation given by Freeman [18] where he also states that no such methodologies exist and establishing such methodologies is a long-term research task. 2.1 Methodologies surveyed We start with an overview of tasks in domain engineering, as outlined in <ref> [41, pp.20-21] </ref>. Tasks requiring domain expertise 1. Identify relevant areas of knowledge. 2. Identify reasonable boundaries for these areas. 3. Organize and disambiguate the vocabulary in each problem domain so the semantics of application-specific concepts are refined. 4. <p> One major issue is that if extensive engineering is done in the beginning: * It delays the start of benefits * It increases the initial investment. * It delays the start of validation (the history of reusability in software has not been very promising <ref> [41, 12] </ref>). * Over the course of the elaborate engineering process, condi tions may keep changing. These factors make the life-cycle-economics of extensive front-end engineering less attractive (lower net present value; higher uncertainty).
Reference: [42] <author> J. Rumbaugh et al., </author> <title> Object-Oriented Modeling and Design, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey 07632, </address> <year> 1991. </year>
Reference-contexts: In the event modeling dimension, Section 6.4 and Class-structure 23 show our approach to modeling generic states of manufacturing equipment. Thus, structure, behavior and dynamics of the manufacturing equipment are de-coupled from each other, as recommended by Rumbaugh <ref> [42] </ref>, although the three types of information are shown in the same textual "template" or skeletal frame. For ease of human readability, object class features are not named with concatenated or cryptic words (as done for computer-readability); instead, descriptive text is used. <p> Would the architecture be simpler and more useful if a unified hierarchy of states were established? We found that certain states of (automated) manufacturing equipment can be modeled in a generalization hierarchy, as mentioned by Rumbaugh <ref> [42, p. 94-98] </ref>. In Class-structure 23, we show an integrated approach to modeling the various types of states pertinent to a machine capable of continuous servo-controlled motion. At the most general level state has the attributes, entity-id, (whose state) and readiness-status (state of readiness). <p> By association with the entity resource, we have availability as a resource-state, applicable to any type of resource in the system. The states of a planning task|a subclass of the entity process| form a simple example of nesting of states <ref> [42, pg 97] </ref>. The class continuous-motion-state is obtained by associating process-state with the continuous-motion class of tasks. <p> The states of a planning task|a subclass of the entity process| form a simple example of nesting of states [42, pg 97]. The class continuous-motion-state is obtained by associating process-state with the continuous-motion class of tasks. In Class-structure 23, we show continuous-motion-state as an aggregation of orthogonal components <ref> [42, p. 95] </ref>. continuous-motion-state coordinate-system, e.g., cartesian, cylindrical : : : reference frames position orientation &lt;started, waiting, blocked, suspended, running, aborted, failed, completed&gt; &lt;not-available, available-busy, available-idle&gt; &lt;enabled-ready, enabled-not-ready, disabled&gt; &lt;examining-resource availability, generating-plan, replanning&gt; class-structure 23: Partial model of states of a manufacturing resource We identyify three specializations (subclasses) of continuous-motion-state (not
Reference: [43] <author> R. C. Schank, </author> <title> "What is AI, anyway?," </title> <journal> AI Magazine, </journal> <month> Winter </month> <year> 1987. </year>
Reference-contexts: Q2: How should knowledge be represented and organized for timely prediction and recovery? <ref> [43] </ref> (The concept of temporal span, shown in Section 4.6, provides for specification of the duration for which information in an architectural branch is valid). Q3: How should knowledge be organized to extract the content of the sensed information? Schank [43] puts this question under the Inference problem. (Appropriate contexts are <p> knowledge be represented and organized for timely prediction and recovery? <ref> [43] </ref> (The concept of temporal span, shown in Section 4.6, provides for specification of the duration for which information in an architectural branch is valid). Q3: How should knowledge be organized to extract the content of the sensed information? Schank [43] puts this question under the Inference problem. (Appropriate contexts are set up in the hierarchy of the architecture). Q4: How should knowledge be organized to draw conclusions from disparate data, e.g., sensed information? Schank [43] treats this question as a generalization problem. <p> Q3: How should knowledge be organized to extract the content of the sensed information? Schank <ref> [43] </ref> puts this question under the Inference problem. (Appropriate contexts are set up in the hierarchy of the architecture). Q4: How should knowledge be organized to draw conclusions from disparate data, e.g., sensed information? Schank [43] treats this question as a generalization problem. The concept of contexts is mentioned in [19, 29], but they did not report any general solutions or any methodology to determine what con texts are adequate and sufficient for the purpose.
Reference: [44] <author> R. Schappell et al. </author> <title> Next Generation Workstation/Machine Controller (NGC) Needs Analysis, </title> <month> February </month> <year> 1990. </year> <note> Also contains ranking by criteria. </note>
Reference-contexts: repair; 3. as feedback for design-improvements and retrofits; and 4. as a basis for future system specifications and design. 4.8.4 Data for quality audit In certain situations, e.g., parts of high value or high consequential costs, manufacturers find it valuable to maintain an audit trail specific to each part manufactured <ref> [44] </ref>. Audit trail data become very voluminous. Therefore, even for an archival level in the information architecture, there is value in using information models that allow data reduction or compression. In current practice, the major items of data are: 1. <p> Also, off-line inspection is very costly. Thus, the trend is to assure quality on line, maintain knowledge of the process-capability of the system and use this knowledge to determine how well quality can be obtained <ref> [44] </ref>. Thus, it is expected that in the future the audit trail will also include process-capability models of the manufacturing system, especially the equipment. Nau [34] has shown off-line usefulness|with on-line-modeling, the effect of equipment on process-capability could be traced and compensated much more productively. <p> These user types were identified in the NGC Requirements Definition Document [36] and the NGC Schema [48]. The descriptions also refer to the Needs analysis document <ref> [44] </ref>. The descriptions are ordered by increasing scope of tasks and responsibilities.
Reference: [45] <author> M. A. Simos, </author> <title> "The domain-oriented software life cycle: Towards an extended process model for reusability," </title> <booktitle> in Proceedings of the Workshop on Software Reusability and Maintainability. The National Institute of Software Quality and Productivity, </booktitle> <month> October </month> <year> 1987. </year>
Reference-contexts: We chose the conceptual model as the level of reusable resource, since the consensus of experts <ref> [6, 27, 45] </ref> is to focus on reuse at a high level of abstraction, rather than at the code-level. 1.3.1 Basic objectives 1. The conceptual model should support the creation, modification and evolution of software for the functions to be 1 performed. <p> No successful commercial examples exist. 1.4.1 Amortizing over expected applications The initial cost <ref> [45] </ref> to create such a reusable resource is much higher than the cost of a single-use solution. There are many uncertainties in amortizing this cost over (future) applications that are not fully defined and specified at the beginning. <p> However, with more abstraction many issues and difficulties arise: 1. The volume and frequency of their future uses is not as visible. 2. Until these abstractions are applied in sufficient number of sufficiently different conditions, it is difficult to estab lish their technical and economic soundness <ref> [45] </ref>. 3. As the application of this approach changes design-practice and as a result of other changes in practice over the development-period, the usage pattern may change and invalidate the original basis of the economic value of certain abstractions. <p> In contrast, the models in our study are more concerned with the primitives from which devices are composed, with the purpose of monitoring and control of motion and the process at a finer granularity in time. In most literature on the general problem of software reuse <ref> [6, 18, 27, 41, 45] </ref>, there is general agreement among the various sectors of the research community that the critical need is to organize knowledge of the application domain.
Reference: [46] <author> N. K. Sinha and B. Kuszta, </author> <title> Modeling and Identification of Dynamic Systems, </title> <publisher> Van Nostrand Reinhold Company, </publisher> <address> 135 West 50th Street, New York, N.Y. 10020, </address> <year> 1983. </year> <title> systemizes model construction, learning and validation. </title>
Reference-contexts: These models capture the key features of such components used in most applications in industry today. In Class-structure 11 the dynamics model of the component, treated as a linear multivariable continuous-time system is described <ref> [46] </ref> in terms of the following equations, ~x (k + 1) = A~x (k) + B~u (k) (1) where: ~u is the input vector of dimension m, ~y is the output vector of dimension p, ~v is the noise vector, ~x is the state vector. n is the order of the
Reference: [47] <author> V. Solaja and D. Vukelja, </author> <title> "Identification of tool wear rate by temperature variation of a carbide tip," </title> <journal> in Annals of the International Institution for Production Engineering Research, </journal> <volume> Volume 22/1, </volume> <year> 1973. </year>
Reference-contexts: The scope of our interest is in monitoring and limiting the temperature rise. Detect abnormality Excessive temperature rise or abnormal temperature distribution could also be monitored to yield prognostic and diagnostic information about the cutting tool and machine elements <ref> [47, 54] </ref>. The scope of our interest is in monitoring the temperature rise, distribution and trend. Class-structure 4 is a taxonomy of the different thermal processes of concern in the domain of manufacturing equipment for machining processes. Heat-generation processes are classified by their sources.
Reference: [48] <institution> Next Generation Workstation/Machine Controller (NGC) Specification for Open System Architecture Standard (SOSAS), Volumes I-VI, </institution> <month> March </month> <year> 1992. </year> <institution> Martin Marietta. </institution>
Reference-contexts: An appropriately-organized, reusable base of knowledge, available on-line, in an open architecture, is a key enabler in reducing the time and cost to engineer and integrate intelligent manufacturing automation [52]. This resource is identified as an "Information Base (IB)" in <ref> [48] </ref>. The acquisition and organization of the required knowledge is a well-recognized problem in the fields of Artificial Intelligence [35] and Software Engineering [41]. This study addresses the issue of organizing an initial amount of knowledge in a way that it can be extended economically. <p> Technical Approach From a review of pertinent literature, research projects, consortia projects and industrial practice, we find many approaches to the issue of making it easier to reuse, modify, extend and integrate software for manufacturing equipment: * building libraries of reusable code * defining standard interfaces between application-code frag ments <ref> [48] </ref> * defining interoperability standards for implementation plat forms [48] * defining architectures in various views and at various levels [2, 48] * applying CASE tools * building tools and aids such as expert systems * building special-purpose application-generators * using the "right" programming language, e.g., ADA [12] * defining schema <p> projects, consortia projects and industrial practice, we find many approaches to the issue of making it easier to reuse, modify, extend and integrate software for manufacturing equipment: * building libraries of reusable code * defining standard interfaces between application-code frag ments <ref> [48] </ref> * defining interoperability standards for implementation plat forms [48] * defining architectures in various views and at various levels [2, 48] * applying CASE tools * building tools and aids such as expert systems * building special-purpose application-generators * using the "right" programming language, e.g., ADA [12] * defining schema for an Information Base * creating models [12] Many <p> the issue of making it easier to reuse, modify, extend and integrate software for manufacturing equipment: * building libraries of reusable code * defining standard interfaces between application-code frag ments [48] * defining interoperability standards for implementation plat forms [48] * defining architectures in various views and at various levels <ref> [2, 48] </ref> * applying CASE tools * building tools and aids such as expert systems * building special-purpose application-generators * using the "right" programming language, e.g., ADA [12] * defining schema for an Information Base * creating models [12] Many of these approaches overlap and many are complementary. <p> Physical action in the external world is performed only at Level 1. Actions at higher levels are successive compositions of the physical actions at Level 1. Thus, the performers are only conceptual entities. Most of these semantics are established in the application-domain and are documented in literature <ref> [2, 48] </ref>. We have found some additional abstractions to be useful|we will discuss these abstractions in Section 5. 4.5 Spatial span and resolution The spatial span and resolution at the innermost nested level have the smallest values. <p> For ease of human readability, object class features are not named with concatenated or cryptic words (as done for computer-readability); instead, descriptive text is used. We also reviewed literature on conceptual primitives for machine tools. The NGC Schema <ref> [48] </ref> is the closest work, in which a number of "primitive data types" are proposed as part of a standard for the next generation of controllers. Some examples are given in Appendix A. <p> A model of a machine composed in this manner can be applied to lathes, milling machines, drilling machines, ma chining centers, grinders, coordinate measurement machines, and robotic mechanisms. Thus this approach to abstraction is more generic than the approach used in <ref> [48] </ref>. 6.3 Synthesis of dynamics model Since we modeled the elements of manufacturing equipment with the property of linearity, their assemblages can be modeled as a network of linear system components. <p> The NGC Schema <ref> [48] </ref> defines a number of state-related primitive data types and entity-types, shown in Section B, as types of attributes for other models, e.g., * The system as a whole * Components, e.g., robot-hand * History-logs, plans, requests, goals, events. We note several issues in this review [48]: 1. <p> The NGC Schema <ref> [48] </ref> defines a number of state-related primitive data types and entity-types, shown in Section B, as types of attributes for other models, e.g., * The system as a whole * Components, e.g., robot-hand * History-logs, plans, requests, goals, events. We note several issues in this review [48]: 1. The distinction amongst the definitions of state, event, goal outcome and value is unclear. 2. Different types of states address the same characteristic, i.e., there is unnecessary overlap or duplication. 3. There is inconsistency in abstraction, i.e., some types enu merate values that are too specific. 4. <p> These issues led to two questions: 1. Should states be modeled as a weak entity (that is only an attribute for other entities) and not as a primitive data type, as defined in the NGC Schema <ref> [48] </ref>? 2. Would the architecture be simpler and more useful if a unified hierarchy of states were established? We found that certain states of (automated) manufacturing equipment can be modeled in a generalization hierarchy, as mentioned by Rumbaugh [42, p. 94-98]. <p> Modify the model to fit within the limitations of the available tools. 6. Implement the prototype. 7. Perform the designed tests. 8. Analyze the experiences. 36 9. Document the results. 10. Plan further work. A Primitive entities in the NGC Schema The NGC Schema <ref> [48] </ref> starts with a number of primitive data types|some examples are shown in Figure 9. <p> B States, goal-outcomes, values and events in NGC Schema Following are extracts from the NGC Schema <ref> [48] </ref> that pertain to definitions of state, event, goal-outcome and value, along with our comments. <p> robot-hand-state: ENUMERATION OF (open, closed) 25 discrete-states: ENUMERATION OF (on-state, off-state, ... ) log-status: ENUMERATION OF (requesting-log, generating log, finished-log) 26 generic-state: (pertains to motion) 27 resource phenomenology 28 sensed-value units coordinate-system abs-rel position orientation system state: 29 ENUMERATION OF (quiescent, started, idle, running, suspended, halted) Next is an excerpt <ref> [48] </ref> showing types related to events and goal-outcomes. goal-status: ENUMERATION OF (ready, executing, halted, suspended, aborted, completed) (Comment: How is a goal-status different from the state of the task?) goal-outcome: ENUMERATION OF (success, failure) (Com ment: Why is outcome not simply one of the states of a task?) event-type: ENUMERATION OF <p> These user types were identified in the NGC Requirements Definition Document [36] and the NGC Schema <ref> [48] </ref>. The descriptions also refer to the Needs analysis document [44]. The descriptions are ordered by increasing scope of tasks and responsibilities. <p> WORLD MODEL. The system's estimate and evaluation of the history, current state and possible future states of the world, including the states of the system being controlled. (Some definitions have been adopted from the NGC Schema <ref> [48] </ref>). G Physical quantities and measure ment units The information shown in Tables 6|8 on page 42 corresponds to measurement-type and measurement-units-type in Appendix A.
Reference: [49] <author> G. </author> <title> Spur, "Model for computing quasi-static and dynamic displacements of turning centers," in Modeling of Machine Tools: Accuracy, Dynamics, and Control, </title> <booktitle> ASME, </booktitle> <address> 345 East 47th Street, New York, N.Y. 10017, </address> <year> 1990. </year>
Reference-contexts: The composed property of interest is the dynamics of the resultant system, generally, the dynamics model between the input at an actuator and the output motion at some reference point on the joint. Mathematical transformations are available <ref> [3, 49] </ref> to derive the dynamics model for joints having compositions of the type shown in Class-structure 7. As an example, the different types of joint components identified in Section 5.3 are shown assembled in a schematic in Figure 6.
Reference: [50] <author> T. J. Teorey, </author> <title> Database Modeling and Design: The Entity-Relationship Approach, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1990. </year>
Reference-contexts: The domain of manufacturing equipment requires a mix of all three dimensions. However, since this study is at the beginning stage of modeling this domain 12 , it is oriented toward data modeling|the dimension least dependent on applications. Entity-Relationship (ER) Diagrams <ref> [50] </ref> are used to represent entity classes and their inter-relationships. These diagrams have been extended with other modeling notation to suit the domain. Relationships shown are mostly aggregation or inheritance. In some cases it was convenient to identify the entities in a tabular form.
Reference: [51] <author> S. P. Timoshenko and J. N. Goodier, </author> <title> Theory of Elasticity, </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1970. </year>
Reference-contexts: Structural materials do not satisfy the above assumptions completely <ref> [51] </ref>. Yet they are a part of well-established engineering practice for limited specified purposes. Steels, high-quality cast irons, aluminum and aluminum alloys are examples of commonly used materials in machined products for which these assumptions can be made.
Reference: [52] <author> A. Todorov, </author> <title> "An integrated software system supporting a machining cell in mechanical engineering," </title> <booktitle> in Complex Machining and AI-Methods, </booktitle> <pages> pp. 90-98, </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <month> November </month> <year> 1991. </year> <booktitle> Proceedings of the IFIP TC5/WG5.3 Working Conference, </booktitle> <address> Gausssig, Germany, </address> <month> 27-29 November, </month> <year> 1991. </year>
Reference-contexts: The purpose of the equipment-models is to maximize the life-cycle economics of computer automation. This is to be accomplished by allowing the integration of knowledge available to perform these functions (the cellular manufacturing concept <ref> [52] </ref>), using available computer technology. <p> It is getting shorter. * Human skill is a constraining resource in the timely ex ploitation of such opportunities. * Flexibility or versatility or reusability of manufacturing resources is a key enabler. * Control software modification and integration <ref> [52] </ref> have become a major bottleneck in the creation of innovative computer-automated manufacturing systems. An appropriately-organized, reusable base of knowledge, available on-line, in an open architecture, is a key enabler in reducing the time and cost to engineer and integrate intelligent manufacturing automation [52]. <p> enabler. * Control software modification and integration <ref> [52] </ref> have become a major bottleneck in the creation of innovative computer-automated manufacturing systems. An appropriately-organized, reusable base of knowledge, available on-line, in an open architecture, is a key enabler in reducing the time and cost to engineer and integrate intelligent manufacturing automation [52]. This resource is identified as an "Information Base (IB)" in [48]. The acquisition and organization of the required knowledge is a well-recognized problem in the fields of Artificial Intelligence [35] and Software Engineering [41]. <p> The acquisition and organization of the required knowledge is a well-recognized problem in the fields of Artificial Intelligence [35] and Software Engineering [41]. This study addresses the issue of organizing an initial amount of knowledge in a way that it can be extended economically. Todorov and Levi <ref> [52] </ref> observe that the current state in practice (and, we add, in manufacturing research communities) is to interface different programs and packages, with great difficulty. They recommend a single integrated database. We focus on the element of conceptual integrity [11] implied in their recommendation.
Reference: [53] <author> H. G. Vogt and P. Zaring, </author> <title> "Planning of operation-sequences with an ai-based knowledge-acquisition tool," </title> <booktitle> in Complex Machining and AI-Methods, </booktitle> <pages> pp. 99-113, </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <month> November </month> <year> 1991. </year> <booktitle> Proceedings of the IFIP TC5/WG5.3 Working Conference, </booktitle> <address> Gausssig, Germany, </address> <month> 27-29 NOvember, </month> <year> 1991. </year>
Reference-contexts: For example, some factors for consideration could be the relationship of: "workpiece size to tolerances on machined surfaces", "manufactured-feature-size to accuracy", and "slenderness ratio of a bore to its accuracy". A taxonomy of these concepts is still evolving in European research using AI concepts in machining <ref> [53] </ref>, where the attributes identified for a hole are shown below. hole: nominal diameter tolerance grade tolerance position positional tolerance surface roughness type of material class-structure 3: Taxonomy of process 3.3 Scope of processes Machining operations used in blocks, heads, and cases fall in the mechanical-chip-peeling class, in Class-structure 3.
Reference: [54] <author> I. Yellowley and F. Barrow, </author> <title> "The stress-temperature method of assessing tool life," </title> <booktitle> in Proceedings of the 14th International MTDR Conference, </booktitle> <year> 1973. </year> <month> 44 </month>
Reference-contexts: The scope of our interest is in monitoring and limiting the temperature rise. Detect abnormality Excessive temperature rise or abnormal temperature distribution could also be monitored to yield prognostic and diagnostic information about the cutting tool and machine elements <ref> [47, 54] </ref>. The scope of our interest is in monitoring the temperature rise, distribution and trend. Class-structure 4 is a taxonomy of the different thermal processes of concern in the domain of manufacturing equipment for machining processes. Heat-generation processes are classified by their sources.
References-found: 54

