URL: http://ftp.eecs.umich.edu/techreports/cse/1991/cse-tr-84-91.ps.Z
Refering-URL: http://ftp.eecs.umich.edu/techreports/cse/1991/
Root-URL: http://www.eecs.umich.edu
Title: A Service Acquisition Mechanism for the Client/Service Model in Cygnus  
Author: Rong N. Chang and Chinya V. Ravishankar 
Address: Michigan-Ann Arbor Ann Arbor, MI 48109-2122  
Affiliation: Electrical Engineering Computer Science Department University of  
Abstract: Three of the most important issues in exploiting network servers in existing heterogeneous distributed systems concern (1) how to specify services so that service-server bindings can be changed dynamically without disturbing clients, (2) how to make clients resilient to network or server failure, and (3) how to accommodate server protocol heterogeneity to provide a single system view to the clients. This paper presents the design and implementation of a service acquisition mechanism for solving these issues. This mechanism is designed under a new service model which we call the client/service model. This approach, which we have fully implemented in the Cygnus Distributed System, extends the usual client/server model with a new abstract entity to make the notion of service a first-class concept. This new abstract entity appears to the client as a service provider, and to the server as a service requester. The service acquisition mechanism comprises (1) a service request mechanism for establishing client-service (and service-server) bindings, (2) a service access mechanism for invoking server interface operations, (3) a service reconfiguration mechanism for making the service access operations resilient to network or server failure, and (4) a service cancellation mechanism for terminating the services in use gracefully. Our preliminary results show that this mechanism is useful and feasible for acquiring the services supported by various network servers. 
Abstract-found: 1
Intro-found: 1
Reference: [Bershad87] <author> Bershad, B., D. Ching, E. Lazowska, J. Sanislo, and M. Schwartz, </author> <title> "A Remote Procedure Call Facility for Interconnecting Heterogeneous Computer Systems," </title> <journal> IEEE Transactions on Software Engineering SE-13:8 (August 1987), </journal> <pages> pp. 880-894. </pages>
Reference-contexts: Most solutions to the system integration issue are limited by the server access protocols considered. For example, the HCS RPC runtime <ref> [Bershad87] </ref> can emulate two different RPC protocols: Sun RPC [SUN89, SUN89b], and Xerox Courier RPC [XE-ROX81]. To this extent, it hides RPC protocol heterogeneity from the clients so that servers can be accessed by HCS RPC clients with no modifications.
Reference: [Birman87] <author> Birman, K. P. and T. Joseph, </author> <title> "Reliable Communication in an Unreliable Environment," </title> <journal> ACM Transactions on Computer Systems 5:1 (February 1987), </journal> <pages> pp. 47-76. </pages>
Reference-contexts: For example, the runtime support for a remote program execution 4 service like that in Marionette [Sullivan89] normally sends client requests to a new server if the current one crashes. The reliability of service access is usually enhanced by improving client-server communication protocols. For example, in the ISIS <ref> [Birman87] </ref> distributed system, an access request can be multicast to a group of servers so that access fails only when all the servers are inaccessible. Most solutions to the system integration issue are limited by the server access protocols considered.
Reference: [Black86] <author> Black, A., N. Hutchinson, E. Jul, and H. Levy, </author> <title> "Object Structure in the Emerald System," </title> <note> pp. 78-86 in Proc. OOPSLA'86, </note> <month> September </month> <year> 1986. </year>
Reference-contexts: When the service is an abstraction of a set of operations exported by language-level entities, both clients and servers are language-specific objects and clients obtain services by invoking servers' interface operations. For example, in the Emerald <ref> [Black86, Black87] </ref> distributed language, a service refers to an interface exported by some object, and every object is inherently the implementation of a set of services. The compiler type checks 2 service access invocations, and the distributed language runtime supports the invocation mechanism in a location-transparent fashion. <p> Specialized service acquisition systems like Marionette [Sullivan89] and RM [Summers87] cannot enhance the resilience of service access links like the Cygnus service acquisition subsystem does. Language-based distributed systems like Argus [Liskov83], Emerald <ref> [Black86, Black87] </ref>, and DEC HDS [Falcone87] requires an instance of the language runtime to run on each of the participating hosts.
Reference: [Black87] <author> Black, A., N. Hutchinson, E. Jul, H. Levy, and L. Carter, </author> <title> "Distribution and Abstract Types in Emerald," </title> <journal> IEEE Transactions on Software Engineering SE-13:1 (January 1987), </journal> <pages> pp. 65-76. 27 </pages>
Reference-contexts: When the service is an abstraction of a set of operations exported by language-level entities, both clients and servers are language-specific objects and clients obtain services by invoking servers' interface operations. For example, in the Emerald <ref> [Black86, Black87] </ref> distributed language, a service refers to an interface exported by some object, and every object is inherently the implementation of a set of services. The compiler type checks 2 service access invocations, and the distributed language runtime supports the invocation mechanism in a location-transparent fashion. <p> Specialized service acquisition systems like Marionette [Sullivan89] and RM [Summers87] cannot enhance the resilience of service access links like the Cygnus service acquisition subsystem does. Language-based distributed systems like Argus [Liskov83], Emerald <ref> [Black86, Black87] </ref>, and DEC HDS [Falcone87] requires an instance of the language runtime to run on each of the participating hosts.
Reference: [Cerf83] <author> Cerf, V. and E. Cain, </author> <title> "The DoD Internet Architecture Model," </title> <booktitle> Com--puter Networks 7 (1983). </booktitle>
Reference-contexts: For example, in the Mach/Mig environment [Jones86], a server may possess several kernel-protected communications channels to export different interfaces. On the DARPA Internet <ref> [Cerf83] </ref>, a server may support a set of operations through the connection-oriented transport protocol TCP [Postel81] or the unreliable datagram 8 protocol UDP [Postel80]. A one-to-many relation exists between clients and service types because a client can access more than one service.
Reference: [Chang90] <author> Chang, Rong, </author> <title> "A Network Service Acquisition Mechanism for the Client/Service Model," </title> <type> Ph.D. Thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of Michigan, </institution> <year> 1990. </year>
Reference-contexts: Section 7 describes the development of three Cygnus services. Finally, a conclusion is drawn in Section 8. 2 The service model in Cygnus The Cygnus project <ref> [Chang90, Ravishankar88] </ref> at the University of Michigan aims at developing a software package to facilitate the utilization of server programs in large heterogeneous distributed systems. <p> No special exception-handling or time-out mechanism is required. The message-passing control mechanism could have been implemented instead using semaphores, Unix-domain stream sockets, or Internet-domain stream sockets. FIFOs were chosen because they appear to perform better under normal loading conditions on our client host <ref> [Chang90] </ref>. We have exploited the shared memory mechanism even further to reduce message-processing overhead. Cygnus clients are required to initialize (or format) the shared memory segments they acquire for accessing Cygnus services. <p> Compared with the local and remote Sun RPC costs, the overhead incurred by the reconfiguration support never exceeds 25%, and declines when the message size increases. Our performance data also shows that the overhead incurred for accommodating different data representation protocols is negligible <ref> [Chang90] </ref>. <p> The service interface to the snake game service is defined in accordance with the interactions between those two modules. The snake client is programmed by making the user-interface routines invoke 25 the cursor-control code through the CygnusC <ref> [Chang90] </ref> service acquisition facilities. We have developed two versions of the snake program to try out our solution to the service specification, fault tolerance, and system integration problems. One version exports its interface through Sun RPC/XDR protocol, and the other uses the NCS RPC/NDR protocol.
Reference: [Cheriton85] <author> Cheriton, David R. and Willy Zwaenepoel, </author> <title> "Distributed Process Groups in the V Kernel," </title> <journal> ACM Transactions on Computer Systems 3:2 (May 1985), </journal> <pages> pp. 77-107. </pages>
Reference-contexts: An ISIS-like multicast mechanism does not work well in the presence of heterogeneity and would be costly to implement when clients and servers sit on different physical networks <ref> [Cheriton85] </ref>. Although most local area networks provide high-performance multicast mechanisms, their counterparts in the Internet environment are still under development [Deering90]. The HCS-like system integration approach requires changes to the RPC subsystems whenever a new server access protocol cannot be emulated well.
Reference: [Debray87] <author> Debray, Saumya and Larry L. Peterson, </author> <title> "Reasoning about Naming Systems," </title> <type> Technical Report TR-88-16, </type> <institution> University of Arizona, Tuc-son, Arizona, </institution> <year> 1987. </year>
Reference-contexts: A property comprises a character-string name, a value, and a binary type indicator for the value. Clients can obtain property lists for groups of objects by composing the property names in the queries with some special characters. Similarly, every Profile principal <ref> [Debray87, Peterson88] </ref> is bound to a set of labeled values. Clients can get sets of values registered for a group of principals by querying the Profile name servers with a set of character-string values with optional labels.
Reference: [Deering90] <author> Deering, Stephen E. and David R. Cheriton, </author> <title> "Multicast Routing in Datagram Internetworks and Extended LANs," </title> <journal> ACM Transactions on Computer Systems 8:2 (May 1990), </journal> <pages> pp. 85-110. </pages>
Reference-contexts: An ISIS-like multicast mechanism does not work well in the presence of heterogeneity and would be costly to implement when clients and servers sit on different physical networks [Cheriton85]. Although most local area networks provide high-performance multicast mechanisms, their counterparts in the Internet environment are still under development <ref> [Deering90] </ref>. The HCS-like system integration approach requires changes to the RPC subsystems whenever a new server access protocol cannot be emulated well.
Reference: [Eppinger89] <author> Eppinger, Jeffery L. and Alfred Z. Spector, </author> <title> "Transaction Processing in Unix: A Camelot Perspective," </title> <booktitle> Unix Review 7:1 (January 1989), </booktitle> <pages> pp. 58-67. </pages>
Reference-contexts: Finally, since the logging and replay algorithm is applied on the basis of non-shared bindings between clients and service types, it is far less complicated than those used in transaction-based systems such as Argus [Liskov83], Camelot <ref> [Eppinger89] </ref>, and Quicksilver [Haskin88]. The corresponding mechanisms in those systems are designed to optimize the throughput of updating shared persistent objects, and must be coupled with check pointing and rollback mechanisms.
Reference: [Falcone87] <author> Falcone, J., </author> <title> "A Programmable Interface Language for Heterogeneous Distributed Systems," </title> <journal> ACM Transactions on Computer Systems 5:4 (November 1987), </journal> <pages> pp. 330-351. </pages>
Reference-contexts: For example, Sun RPC servers use Sun's XDR representation scheme, while NCS RPC servers use the NDR (NCS Data Representation) protocol, and DEC HDS <ref> [Falcone87] </ref> servers understand NCL (Network Command Language) data types only. <p> Specialized service acquisition systems like Marionette [Sullivan89] and RM [Summers87] cannot enhance the resilience of service access links like the Cygnus service acquisition subsystem does. Language-based distributed systems like Argus [Liskov83], Emerald [Black86, Black87], and DEC HDS <ref> [Falcone87] </ref> requires an instance of the language runtime to run on each of the participating hosts.
Reference: [Haskin88] <author> Haskin, R., Y. Malachi, W. Sawdon, and G. Chan, </author> <title> "Recovery Management in QuickSilver," </title> <journal> ACM Transactions on Computer Systems 6:1 (February 1988), </journal> <pages> pp. 82-108. </pages>
Reference-contexts: Finally, since the logging and replay algorithm is applied on the basis of non-shared bindings between clients and service types, it is far less complicated than those used in transaction-based systems such as Argus [Liskov83], Camelot [Eppinger89], and Quicksilver <ref> [Haskin88] </ref>. The corresponding mechanisms in those systems are designed to optimize the throughput of updating shared persistent objects, and must be coupled with check pointing and rollback mechanisms.
Reference: [Hemmer86] <author> Hemmer, Frederic, </author> <title> "Networking with ORACLE," </title> <booktitle> in Proc. 4th Eu-ropean Oracle Users Group Conference, </booktitle> <year> 1986. </year>
Reference-contexts: First, since the Cygnus distributed database may comprise many specialized database servers, the agent processes may have to accommodate query protocol heterogeneity. For example, most relational database servers like Oracle <ref> [Hemmer86] </ref> support SQL queries, while most name servers like DEC's distributed name service [Lampson86] have their own query protocols to meet functional requirements such as access and/or update performance.
Reference: [ISO88] <author> ISO, </author> <title> "Information processing systems|Open systems interconnection: the directory-overview of concepts, models, and service," Draft International Standard ISO/CCITT DIS 95941, </title> <year> 1988. </year>
Reference-contexts: When the service is an abstraction of a message-exchange protocol between programs in execution, both clients and servers are usually user-level processes running on different machines. Services in this category include the X.500 directory service <ref> [ISO88] </ref> and the Internet DNS (Domain Name Server) [Mockapetris87]. The biggest advantage of this approach is that it requires neither changes to the underlying operating systems to provide new services, nor extensive distributed language runtime support. <p> This architecture is designed under the client/server model, and contains an authentication service, a directory service, and a remote procedure call (RPC) package. The authentication service [Steiner88] supports secure communication sessions. The directory service <ref> [ISO88] </ref> maintains information about the network resources needed by application programs. The RPC package [Kong90, Lampson86] hides the heterogeneity of network transport and data representation protocols. This architecture also requires that all interactions between clients and servers follow the RPC paradigm. <p> Clients can get sets of values registered for a group of principals by querying the Profile name servers with a set of character-string values with optional labels. Moreover, a specialized name resolution algorithm has also been implemented in the EAN X.500 <ref> [ISO88] </ref> Directory System such that a specific X.500 DIT (Directory Information Tree) node can be located by more than one attribute-based name [Neufeld89]. However, this naming technique is used differently in the Cygnus model.
Reference: [Jensen78] <author> Jensen, Kathleen and Niklaus Wirth, </author> <title> Pascal User Manual and Report, </title> <address> Spring-Verlag, </address> <year> 1978. </year>
Reference-contexts: This architecture also requires that all interactions between clients and servers follow the RPC paradigm. Under this paradigm, execution control is passed synchronously between service requester and provider as between caller and callee in procedural languages such as C [Kernighan88], Mesa [Mitchell79], and Pascal <ref> [Jensen78] </ref>. 3 1.1.2 The issues outstanding Although the DCE architecture helps reduce the heterogeneity of server access protocols, it is not helpful in solving three important issues: service specification, fault tolerance support, and system integration.
Reference: [Johnson88] <author> Johnson, David B. and Willy Zwaenepoel, </author> <title> "Recovery in Distributed Systems Using Optimistic Message Logging and Checkpointing," pp. </title> <booktitle> 171-181 in ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1988. </year> <month> 28 </month>
Reference-contexts: For example, an optimistic message logging and process checkpointing mechanism can be used by the service agents and servers to make the Cygnus services in use resilient to machine crashes <ref> [Strom85, Johnson88] </ref>. 4.4 Query agent operation A query agent assumes several responsibilities. First, it searches the Cygnus database for appropriate service entities. Second, it activates service agents on demand in accordance with the data encoded in those service entities.
Reference: [Jones86] <author> Jones, M. and R. Rashid, </author> <title> "Mach and Matchmaker: Kernel and Lan--guage Support for Object-Oriented Distributed Systems," </title> <note> pp. 67-77 in Proc. OOPSLA'86, </note> <month> September </month> <year> 1986. </year>
Reference-contexts: They capture the precise nature of service-server bindings in the client/service model because a server may be willing to export more than one interface to clients through several different access mechanisms. For example, in the Mach/Mig environment <ref> [Jones86] </ref>, a server may possess several kernel-protected communications channels to export different interfaces. On the DARPA Internet [Cerf83], a server may support a set of operations through the connection-oriented transport protocol TCP [Postel81] or the unreliable datagram 8 protocol UDP [Postel80].
Reference: [Joy86] <author> Joy, William and Mark Horton, </author> <title> "An Introduction to Display Editing with Vi," in Unix User's Supplementary Documents, </title> <institution> University of California at Berkeley, </institution> <year> 1986. </year>
Reference-contexts: The computer game snake is a well-known display-based chase game on BSD Unix machines. This program was written as monolithic software to help people familiarize themselves with text editor vi <ref> [Joy86] </ref>. To develop a distributed version of this game, we first split the original source code into two parts: one mainly contains user-interface routines and the other contains mainly cursor-control code. The service interface to the snake game service is defined in accordance with the interactions between those two modules.
Reference: [Kepecs85] <author> Kepecs, Jonathan, </author> <title> "Lightweight Processes for Unix Implementation and Applications," pp. </title> <booktitle> 299-308 in Proc. USENIX Summer Conf., </booktitle> <year> 1985. </year>
Reference-contexts: The programming language C [Kernighan88] was chosen as our implementation language because it had the richest set of IPC and network programming libraries. The client agents could have been implemented as heavy-weight processes with the loggers and query agents running as light-weight processes <ref> [Kepecs85] </ref>. They could also have been coded in an object-oriented language like C++ [Stroustrup86] instead of C.
Reference: [Kernighan88] <author> Kernighan, B. and D. Ritchie, </author> <title> The C Programming Language, </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: This architecture also requires that all interactions between clients and servers follow the RPC paradigm. Under this paradigm, execution control is passed synchronously between service requester and provider as between caller and callee in procedural languages such as C <ref> [Kernighan88] </ref>, Mesa [Mitchell79], and Pascal [Jensen78]. 3 1.1.2 The issues outstanding Although the DCE architecture helps reduce the heterogeneity of server access protocols, it is not helpful in solving three important issues: service specification, fault tolerance support, and system integration. <p> We also have implementations under SunOS 3.5 and Apollo's NCS. The client agent processes were implemented as user-level processes because we were more interested in the interfaces between them than in optimizing performance. The programming language C <ref> [Kernighan88] </ref> was chosen as our implementation language because it had the richest set of IPC and network programming libraries. The client agents could have been implemented as heavy-weight processes with the loggers and query agents running as light-weight processes [Kepecs85].
Reference: [Kong90] <author> Kong, M., T. H. Dineen, P. J. Leach, E. A. Martin, N. W. Mishkin, J. N. Pato, and G. L. Wyant, </author> <title> Network Computing System Reference Manual, </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: This architecture is designed under the client/server model, and contains an authentication service, a directory service, and a remote procedure call (RPC) package. The authentication service [Steiner88] supports secure communication sessions. The directory service [ISO88] maintains information about the network resources needed by application programs. The RPC package <ref> [Kong90, Lampson86] </ref> hides the heterogeneity of network transport and data representation protocols. This architecture also requires that all interactions between clients and servers follow the RPC paradigm. <p> The service specification issue concerns how to specify services so that service-server bindings can be changed dynamically without disturbing clients. This issue is not solved by the DCE architecture because its RPC package is based upon NCS RPC <ref> [Kong90] </ref>, which requires the clients to specify every service interface (or desired set of operations) with no more than three system-wide unique identifiers. The RPC subsystem uses these identifiers to bind the interface with a suitable server.
Reference: [Lampson79] <author> Lampson, B. and H. Sturgis, </author> <title> "Crash Recovery in a Distributed Storage System," </title> <note> Xerox PARC Technical Report, </note> <month> April </month> <year> 1979. </year>
Reference-contexts: This logging and replay mechanism can be implemented very efficiently for three reasons. First, the logs need not be stored on stable storage <ref> [Lampson79] </ref> when crash recovery support for the client is not available. Second, the service-server reconfiguration mechanism requires no more than one server to be available at any one time.
Reference: [Lampson86] <author> Lampson, B. W., </author> <title> "Designing a Global Name Service," pp. </title> <booktitle> 1-10 in ACM 5th Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1986. </year>
Reference-contexts: This architecture is designed under the client/server model, and contains an authentication service, a directory service, and a remote procedure call (RPC) package. The authentication service [Steiner88] supports secure communication sessions. The directory service [ISO88] maintains information about the network resources needed by application programs. The RPC package <ref> [Kong90, Lampson86] </ref> hides the heterogeneity of network transport and data representation protocols. This architecture also requires that all interactions between clients and servers follow the RPC paradigm. <p> First, since the Cygnus distributed database may comprise many specialized database servers, the agent processes may have to accommodate query protocol heterogeneity. For example, most relational database servers like Oracle [Hemmer86] support SQL queries, while most name servers like DEC's distributed name service <ref> [Lampson86] </ref> have their own query protocols to meet functional requirements such as access and/or update performance. Second, since different servers may use different data representation protocols, the agent processes must accommodate such protocol heterogeneity in converting service access operations to server operations.
Reference: [Liou90] <author> Liou, S. P. and R. Jain, </author> <title> "An Algorithm for Three-Dimensional Image Segmentation," pp. </title> <booktitle> 201-203 in Proc. of the 10th International Conference on Pattern Recognition, </booktitle> <year> 1990. </year>
Reference-contexts: Their interfaces to the Cygnus clients are the same. The logging descriptor for this service instructs the logger not to replay the operations for refreshing the screen. The computational vision service is designed to analyze two-dimensional or three-dimensional images using the generate-and-test [Winston84] (or hypothesize-and-test) approach <ref> [Liou90] </ref>. The service operations are presented to the client code as a set of reentrant library routines. The computations, however, are performed by remote servers which may run on Sun 4 workstations, Apollo DN4000 workstations, or Alliant FX-8 compute servers.
Reference: [Liskov83] <author> Liskov, B. and R. Scheiffer, </author> <title> "Guardians and Actions: Linguistic Support for Robust, Distributed Programs," </title> <journal> ACM Transactions on Programming Languages and Systems 5:3 (July 1983), </journal> <pages> pp. 381-404. </pages>
Reference-contexts: Finally, since the logging and replay algorithm is applied on the basis of non-shared bindings between clients and service types, it is far less complicated than those used in transaction-based systems such as Argus <ref> [Liskov83] </ref>, Camelot [Eppinger89], and Quicksilver [Haskin88]. The corresponding mechanisms in those systems are designed to optimize the throughput of updating shared persistent objects, and must be coupled with check pointing and rollback mechanisms. <p> For example, all the RPC-based distributed systems have problems in supporting fault tolerance and accommodating server protocol heterogeneity. Specialized service acquisition systems like Marionette [Sullivan89] and RM [Summers87] cannot enhance the resilience of service access links like the Cygnus service acquisition subsystem does. Language-based distributed systems like Argus <ref> [Liskov83] </ref>, Emerald [Black86, Black87], and DEC HDS [Falcone87] requires an instance of the language runtime to run on each of the participating hosts.
Reference: [Mitchell79] <author> Mitchell, J., W. Maybury, and R. Sweet, </author> <title> Mesa Language Manual, </title> <institution> Xerox Palo Alto Research Center, </institution> <year> 1979. </year>
Reference-contexts: This architecture also requires that all interactions between clients and servers follow the RPC paradigm. Under this paradigm, execution control is passed synchronously between service requester and provider as between caller and callee in procedural languages such as C [Kernighan88], Mesa <ref> [Mitchell79] </ref>, and Pascal [Jensen78]. 3 1.1.2 The issues outstanding Although the DCE architecture helps reduce the heterogeneity of server access protocols, it is not helpful in solving three important issues: service specification, fault tolerance support, and system integration.
Reference: [Mockapetris87] <author> Mockapetris, P., </author> <title> "Domain Names-Implementation and Specification," </title> <type> RFC 1035, </type> <institution> USC Information Sciences Institute, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: When the service is an abstraction of a message-exchange protocol between programs in execution, both clients and servers are usually user-level processes running on different machines. Services in this category include the X.500 directory service [ISO88] and the Internet DNS (Domain Name Server) <ref> [Mockapetris87] </ref>. The biggest advantage of this approach is that it requires neither changes to the underlying operating systems to provide new services, nor extensive distributed language runtime support.
Reference: [Neufeld89] <author> Neufeld, Gerald W., </author> <title> "Descriptive Names in X.500," pp. </title> <booktitle> 64-71 in Proc. SIGCOMM'89 Symposium on Communications Architectures and Protocols, </booktitle> <year> 1989. </year> <month> 29 </month>
Reference-contexts: Moreover, a specialized name resolution algorithm has also been implemented in the EAN X.500 [ISO88] Directory System such that a specific X.500 DIT (Directory Information Tree) node can be located by more than one attribute-based name <ref> [Neufeld89] </ref>. However, this naming technique is used differently in the Cygnus model. We use it to let the clients specify the services they want to access and to facilitate the establishment of bindings between service types and service entities.
Reference: [Oppen83] <author> Oppen, D. and Y. Dalal, </author> <title> "The Clearinghouse: A Decentralized Agent for Locating Named Objects in a Distributed Environment," </title> <journal> ACM Transactions on Office Information Systems 1:3 (July 1983), </journal> <pages> pp. 230-253. </pages>
Reference-contexts: We regard attribute-based naming as technically feasible because it has been used in several distributed name and/or directory services to help clients discover objects in the system. For example, each Clearinghouse <ref> [Oppen83] </ref> object is associated with a set of properties. A property comprises a character-string name, a value, and a binary type indicator for the value. Clients can obtain property lists for groups of objects by composing the property names in the queries with some special characters.
Reference: [OSF90] <author> OSF, </author> <title> OSF Distributed Computing Environment Rationale, Open Software Foundation, </title> <month> May </month> <year> 1990. </year>
Reference-contexts: Most leading computer companies have agreed on a vendor-neutral distributed computing environment (DCE) architecture proposed by OSF (Open Software Foundation) <ref> [OSF90] </ref>. This architecture is designed under the client/server model, and contains an authentication service, a directory service, and a remote procedure call (RPC) package. The authentication service [Steiner88] supports secure communication sessions. The directory service [ISO88] maintains information about the network resources needed by application programs.
Reference: [Peterson88] <author> Peterson, L., </author> <title> "The Profile Naming Service," </title> <journal> ACM Transactions on Computer Systems 6:4 (November 1988), </journal> <pages> pp. 341-364. </pages>
Reference-contexts: A property comprises a character-string name, a value, and a binary type indicator for the value. Clients can obtain property lists for groups of objects by composing the property names in the queries with some special characters. Similarly, every Profile principal <ref> [Debray87, Peterson88] </ref> is bound to a set of labeled values. Clients can get sets of values registered for a group of principals by querying the Profile name servers with a set of character-string values with optional labels. <p> Language-based distributed systems like Argus [Liskov83], Emerald [Black86, Black87], and DEC HDS [Falcone87] requires an instance of the language runtime to run on each of the participating hosts. Command-interpreter-based approaches like Profile shell <ref> [Peterson88] </ref> and the AT&T service shell [Wills89] have difficulty in providing the application routines with services like our computational vision service. 26 8 Conclusions The service specification, fault tolerance, and system integration issues are presently three of the most important and difficult problems in integrating heterogeneous distributed systems.
Reference: [Popek85] <author> Popek, G. and B. Walker, </author> <title> The LOCUS Distributed System Architecture, </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: When the service is an abstraction of a set of kernel calls, the servers are operating system kernels. Clients access services by invoking kernel calls. For example, Locus kernels <ref> [Popek85] </ref> running on different machines cooperatively support a Unix-compatible distributed file system and a location-transparent remote tasking facility. Although this approach gives the better control of networked resources, it does not scale well because it requires kernel changes to support new services.
Reference: [Postel80] <author> Postel, J., </author> <title> "User Datagram Protocol," </title> <institution> RFC-768, USC Information Sciences Institute, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: For example, in the Mach/Mig environment [Jones86], a server may possess several kernel-protected communications channels to export different interfaces. On the DARPA Internet [Cerf83], a server may support a set of operations through the connection-oriented transport protocol TCP [Postel81] or the unreliable datagram 8 protocol UDP <ref> [Postel80] </ref>. A one-to-many relation exists between clients and service types because a client can access more than one service.
Reference: [Postel81] <author> Postel, J., </author> <title> "Transmission Control Protocol," </title> <institution> RFC-793, USC Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: For example, in the Mach/Mig environment [Jones86], a server may possess several kernel-protected communications channels to export different interfaces. On the DARPA Internet [Cerf83], a server may support a set of operations through the connection-oriented transport protocol TCP <ref> [Postel81] </ref> or the unreliable datagram 8 protocol UDP [Postel80]. A one-to-many relation exists between clients and service types because a client can access more than one service.
Reference: [Ravishankar88] <author> Ravishankar, C. and R. Chang, </author> <title> "An Attribute-Based Service-Request Mechanism for Heterogeneous Distributed Systems," </title> <type> Technical Report CSE-TR-08-88, </type> <institution> Department of Electrical Engineering and Computer Science, </institution> <year> 1988. </year>
Reference-contexts: Section 7 describes the development of three Cygnus services. Finally, a conclusion is drawn in Section 8. 2 The service model in Cygnus The Cygnus project <ref> [Chang90, Ravishankar88] </ref> at the University of Michigan aims at developing a software package to facilitate the utilization of server programs in large heterogeneous distributed systems.
Reference: [Steiner88] <author> Steiner, J. G., C. Neuman, and J. L. Schiller, </author> <title> "Kerberos: An Authentication Server for Open Network Systems," pp. </title> <booktitle> 191-202 in Proc. USENIX Winter Conf., </booktitle> <year> 1988. </year>
Reference-contexts: Most leading computer companies have agreed on a vendor-neutral distributed computing environment (DCE) architecture proposed by OSF (Open Software Foundation) [OSF90]. This architecture is designed under the client/server model, and contains an authentication service, a directory service, and a remote procedure call (RPC) package. The authentication service <ref> [Steiner88] </ref> supports secure communication sessions. The directory service [ISO88] maintains information about the network resources needed by application programs. The RPC package [Kong90, Lampson86] hides the heterogeneity of network transport and data representation protocols. This architecture also requires that all interactions between clients and servers follow the RPC paradigm.
Reference: [Strom85] <author> Strom, Robert E. and Shaula Yemini, </author> <title> "Optimistic Recovery in Distributed Systems," </title> <journal> ACM Transactions on Computer Systems 3:3 (August 1985), </journal> <pages> pp. 204-226. </pages>
Reference-contexts: For example, an optimistic message logging and process checkpointing mechanism can be used by the service agents and servers to make the Cygnus services in use resilient to machine crashes <ref> [Strom85, Johnson88] </ref>. 4.4 Query agent operation A query agent assumes several responsibilities. First, it searches the Cygnus database for appropriate service entities. Second, it activates service agents on demand in accordance with the data encoded in those service entities.
Reference: [Stroustrup86] <author> Stroustrup, Bjarne, </author> <title> The C++ Programming Language, </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: The client agents could have been implemented as heavy-weight processes with the loggers and query agents running as light-weight processes [Kepecs85]. They could also have been coded in an object-oriented language like C++ <ref> [Stroustrup86] </ref> instead of C. Although these alternatives have their merits, they result in no better insights into the functionality of the client agents. 4.1 The four service acquisition phases We now briefly describe how these component processes interact with each other during service request, access, reconfiguration, and cancellation phases.
Reference: [Sullivan89] <author> Sullivan, Mark and D. Anderson, "Marionette: </author> <title> A System for Parallel Distributed Programming Using a Master/Slave Model," </title> <booktitle> in Proc. 9th Int. Conf. on Distributed Computing Systems, </booktitle> <year> 1989. </year>
Reference-contexts: As a partial solution to the service specification issue, generic names are sometimes assigned to atomic services so that service-server bindings can be changed between accesses to the servers. For example, the runtime support for a remote program execution 4 service like that in Marionette <ref> [Sullivan89] </ref> normally sends client requests to a new server if the current one crashes. The reliability of service access is usually enhanced by improving client-server communication protocols. <p> For example, all the RPC-based distributed systems have problems in supporting fault tolerance and accommodating server protocol heterogeneity. Specialized service acquisition systems like Marionette <ref> [Sullivan89] </ref> and RM [Summers87] cannot enhance the resilience of service access links like the Cygnus service acquisition subsystem does. Language-based distributed systems like Argus [Liskov83], Emerald [Black86, Black87], and DEC HDS [Falcone87] requires an instance of the language runtime to run on each of the participating hosts.
Reference: [Summers87] <author> Summers, R., </author> <title> "A Resource Sharing System for Personal Computers in a LAN: Concepts, Design, </title> <journal> and Experience," IEEE Transactions on Software Engineering SE-13:8 (August 1987), </journal> <pages> pp. 895-904. </pages>
Reference-contexts: For example, all the RPC-based distributed systems have problems in supporting fault tolerance and accommodating server protocol heterogeneity. Specialized service acquisition systems like Marionette [Sullivan89] and RM <ref> [Summers87] </ref> cannot enhance the resilience of service access links like the Cygnus service acquisition subsystem does. Language-based distributed systems like Argus [Liskov83], Emerald [Black86, Black87], and DEC HDS [Falcone87] requires an instance of the language runtime to run on each of the participating hosts.
Reference: [SUN89] <author> SUN, </author> <title> Sun Remote Procedure Call Specification, Sun Microsystems, </title> <publisher> Inc., </publisher> <year> 1989. </year> <month> 30 </month>
Reference-contexts: Most solutions to the system integration issue are limited by the server access protocols considered. For example, the HCS RPC runtime [Bershad87] can emulate two different RPC protocols: Sun RPC <ref> [SUN89, SUN89b] </ref>, and Xerox Courier RPC [XE-ROX81]. To this extent, it hides RPC protocol heterogeneity from the clients so that servers can be accessed by HCS RPC clients with no modifications. Although these approaches work well in several application domains, they are not suitable for large heterogeneous distributed systems.
Reference: [SUN89b] <author> SUN, </author> <title> Sun External Data Representation Specification, Sun Microsys--tems, </title> <publisher> Inc., </publisher> <year> 1989. </year>
Reference-contexts: Most solutions to the system integration issue are limited by the server access protocols considered. For example, the HCS RPC runtime [Bershad87] can emulate two different RPC protocols: Sun RPC <ref> [SUN89, SUN89b] </ref>, and Xerox Courier RPC [XE-ROX81]. To this extent, it hides RPC protocol heterogeneity from the clients so that servers can be accessed by HCS RPC clients with no modifications. Although these approaches work well in several application domains, they are not suitable for large heterogeneous distributed systems. <p> The representation scheme for 15 these data types depends on the IPC facility in use so that these processes can encode and decode messages efficiently. This data representation approach is different from structure-based ones like Sun's XDR <ref> [SUN89b] </ref>. These internal data types are useful to the implementation of the Cygnus model because the client agent component processes must accommodate three kinds of heterogeneity. First, since the Cygnus distributed database may comprise many specialized database servers, the agent processes may have to accommodate query protocol heterogeneity.
Reference: [Wills89] <author> Wills, Craig E., </author> <title> "A Service Execution Mechanism for a Distributed Environment," pp. </title> <booktitle> 326-334 in Proc. 9th Int. Conf. on Distributed Computing Systems, </booktitle> <year> 1989. </year>
Reference-contexts: Language-based distributed systems like Argus [Liskov83], Emerald [Black86, Black87], and DEC HDS [Falcone87] requires an instance of the language runtime to run on each of the participating hosts. Command-interpreter-based approaches like Profile shell [Peterson88] and the AT&T service shell <ref> [Wills89] </ref> have difficulty in providing the application routines with services like our computational vision service. 26 8 Conclusions The service specification, fault tolerance, and system integration issues are presently three of the most important and difficult problems in integrating heterogeneous distributed systems.
Reference: [Winston84] <author> Winston, Patrick, </author> <booktitle> Artificial Intelligence, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: Their interfaces to the Cygnus clients are the same. The logging descriptor for this service instructs the logger not to replay the operations for refreshing the screen. The computational vision service is designed to analyze two-dimensional or three-dimensional images using the generate-and-test <ref> [Winston84] </ref> (or hypothesize-and-test) approach [Liou90]. The service operations are presented to the client code as a set of reentrant library routines. The computations, however, are performed by remote servers which may run on Sun 4 workstations, Apollo DN4000 workstations, or Alliant FX-8 compute servers.
Reference: [XEROX81] <author> XEROX, "Courier: </author> <title> The Remote Procedural Call Protocol," </title> <type> Report XSIS 038112, </type> <institution> Xerox Corp., </institution> <month> December </month> <year> 1981. </year>
Reference: [XEROX85] <institution> XEROX, "Xerox Network Systems Architecture," </institution> <type> Tech. Rep. </type> <institution> XNSG 068504, Xerox Corp., </institution> <month> April </month> <year> 1985. </year> <month> 31 </month>
Reference-contexts: For example, on a Sun 4/60 running SunOS 4.1, a client agent may be a single heavy-weight process or a set of cooperating ones. Local messages may be passed through sockets or hardware-supported shared memory. Servers on the XNS <ref> [XEROX85] </ref> network would not be reachable directly if the client host sits only on the DARPA Internet. The client agent would not be able to access the Kerberos ticket granting service on behalf of its client if it is not privileged enough to hold the client owner's password.
References-found: 46

