URL: ftp://ftp.cs.ucla.edu/tech-report/97-reports/970022.ps.Z
Refering-URL: http://ficus-www.cs.ucla.edu/ficus-members/ratner/papers.html
Root-URL: http://www.cs.ucla.edu
Title: Dynamic Version Vector Maintenance  
Author: David Ratner Peter Reiher Gerald J. Popek 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract: Version vectors or variants thereof are used in many distributed file systems to track updates, and are the main data structure behind optimistic replication. Mobile computing, however, places new strains on the version vector. Decreased bandwidth and increased replication factors will exacerbate the scaling problems that version vectors have always suffered from, but until now have never been important enough to remedy. Here we present algorithms for dynamic version vector maintenance, which dramatically improves their scalability and therefore the scalability of the entire replication system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. G. Guy, G. J. Popek, and T. W. Page, Jr. </author> <title> Consistency algorithms for optimistic replication. </title> <booktitle> In Proceedings of the First International Conference on Network Protocols. IEEE, </booktitle> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: We use a one-phase bit vector to determine when consensus has occurred. In general, one phase is not enough to determine consensus <ref> [1] </ref>. However, in our case the actual b-value itself provides the effect of two phases, since consensus on the value stored in b acts as phase 1, and the bit vector itself actually functions as phase 2.
Reference: [2] <author> P. Honeyman, L. Huston, J. Rees, and D. Bachmann. </author> <title> The Little Work project. </title> <booktitle> In Proceedings of the Third Workshop on Workstation Operating Systems, </booktitle> <pages> pages 11-14. </pages> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: The authors can be reached at the Department of Computer Science, UCLA, Los Angeles, CA 90095, or by email to fratner,popek,reiherg@cs.ucla.edu. y Gerald Popek is also affiliated with Platinum technology. Little Work <ref> [2] </ref>, Rumor [9], and Bayou [13]. Optimistic strategies require a method of tracking updates to individual object replicas, allowing future comparisons between replicas, propagation of the latest version, and detection of conflicting versions. Most optimistic strategies base their update-tracking mechanism on the version vector [6] or some variant thereof.
Reference: [3] <author> L. </author> <type> Kleinrock. </type> <institution> Nomadicity. Presentation at the GloMo PI Meeting (February 4) at the University of California at Los Angeles, </institution> <year> 1997. </year>
Reference-contexts: Connectivity cannot be relied upon, and even when it does exist it is typically expensive and degraded. Each mobile user requires a local replica; in addition, replicas must also be stored on stationary machines for non-mobile personnel and system administration activties like back-ups. Finally, appliance mobility <ref> [3] </ref>, moving from device to device or system to system, could potentially lead to situations where users have multiple devices, each one of which is capable of storing and updating replicated data.
Reference: [4] <author> G. H. Kuenning, G. J. Popek, and P. Reiher. </author> <title> An analysis of trace data for predictive file caching in mobile computing. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 291-306. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: While the hot spots may change over time, it is rare to see a widely replicated object that is consistently updated by everyone. Simulation data by Wang supports the hot-spot notion. In studies of productivity environment data taken at Locus Computing <ref> [4] </ref>, Wang found that replicated objects tend to have only a small set of common writers at any one time [15].
Reference: [5] <author> P. Kumar and M. Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 66-70, </pages> <address> Napa, California, </address> <month> Oct. </month> <year> 1993. </year> <journal> IEEE. </journal> <volume> 6 </volume>
Reference-contexts: V 2 and V 3 are said to conflict, representing data versions that incorporate concurrent updates. Conflict resolution <ref> [5, 8] </ref> will resolve the conflict, resulting in one of the version vectors dominating the other. 3 Dynamic Maintenance As seen from the above example, as more and more replicas join the system, each replica's version vector increases in size. <p> Therefore, while the space overhead of the associative array may seem excessive when considered by itself, dynamic version vector management as a whole has the ability to dramatically decrease the size of the version vector. 5 Dynamic Vector Compression Studies of replicated file systems <ref> [5, 8] </ref> illustrate that conflict rates are generally quite low, meaning that concurrent writes rarely occur. Experience with replication systems like Ficus, Rumor, and Coda seems to expand upon this notion. Objects tend to have "hot spots" or small collections of writers within the large quantity of replicas.
Reference: [6] <author> D. S. Parker, Jr., G. Popek, G. Rudisin, A. Stoughton, B. J. Walker, E. Walton, J. M. Chow, D. Edwards, S. Kiser, and C. Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 9(3) </volume> <pages> 240-247, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Little Work [2], Rumor [9], and Bayou [13]. Optimistic strategies require a method of tracking updates to individual object replicas, allowing future comparisons between replicas, propagation of the latest version, and detection of conflicting versions. Most optimistic strategies base their update-tracking mechanism on the version vector <ref> [6] </ref> or some variant thereof. Version vectors are easy to use and have proven themselves as one of the main mechanisms behind optimistic replication, but are not without their problems. In brief, the version vector is an array of length equal to the number of replicas.
Reference: [7] <author> D. Ratner, G. J. Popek, and P. Reiher. </author> <title> The ward model: A scalable replication architecture for mobility. </title> <booktitle> In Workshop on Object Replication and Mobile Computing, </booktitle> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: We call these methods dynamic version vector expansion and compression. They are currently being implemented at UCLA as part of a replication system specifically aimed at mobility called Roam, built using the ward model <ref> [7] </ref>. We first provide an example of version vector use. We then present an overview of the ideas behind dynamic version vector maintenance, and delve into the 1 details of both expansion and compression.
Reference: [8] <author> P. Reiher, J. S. Heidemann, D. Ratner, G. Skinner, and G. J. Popek. </author> <title> Resolving file conflicts in the Fi-cus file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 183-195. </pages> <institution> University of California, Los Angeles, USENIX, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: V 2 and V 3 are said to conflict, representing data versions that incorporate concurrent updates. Conflict resolution <ref> [5, 8] </ref> will resolve the conflict, resulting in one of the version vectors dominating the other. 3 Dynamic Maintenance As seen from the above example, as more and more replicas join the system, each replica's version vector increases in size. <p> Therefore, while the space overhead of the associative array may seem excessive when considered by itself, dynamic version vector management as a whole has the ability to dramatically decrease the size of the version vector. 5 Dynamic Vector Compression Studies of replicated file systems <ref> [5, 8] </ref> illustrate that conflict rates are generally quite low, meaning that concurrent writes rarely occur. Experience with replication systems like Ficus, Rumor, and Coda seems to expand upon this notion. Objects tend to have "hot spots" or small collections of writers within the large quantity of replicas.
Reference: [9] <author> P. Reiher, J. Popek, M. Gunter, J. Salomone, and D. Ratner. </author> <title> Peer-to-peer reconciliation based replication for mobile computers. </title> <booktitle> In Proceedings of the ECOOP Workshop on Mobility and Replication, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: The authors can be reached at the Department of Computer Science, UCLA, Los Angeles, CA 90095, or by email to fratner,popek,reiherg@cs.ucla.edu. y Gerald Popek is also affiliated with Platinum technology. Little Work [2], Rumor <ref> [9] </ref>, and Bayou [13]. Optimistic strategies require a method of tracking updates to individual object replicas, allowing future comparisons between replicas, propagation of the latest version, and detection of conflicting versions. Most optimistic strategies base their update-tracking mechanism on the version vector [6] or some variant thereof.
Reference: [10] <author> M. Satyanarayanan. </author> <title> The influence of scale on distributed file system design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-18(1):1-8, </volume> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: The key problem is that version vectors are unbounded in size. Many have noted the scaling problems associated with version vectors, and partly for that reason have opined that wide-scale peer replication does not scale <ref> [10] </ref>. Additionally, simulations of Rumor [15] have demonstrated the scaling problems concretely.
Reference: [11] <author> M. Satyanarayanan, J. J. Kistler, P. Kumar, M. E. Okasaki, E. H. Siegel, and D. C. Steere. Coda: </author> <title> A highly available file system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 447-459, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Conservative replication strategies such as primary-site [12] or majority-vote [14] are generally not appropriate in mobile scenarios, due to communication restrictions. In contrast, optimistic strategies have proven themselves as the correct model in the mobile context, demonstrated by systems such as Coda <ref> [11] </ref>, fl This work was sponsored by the Advanced Research Projects Agency under contract DABT63-94-C-0080. The authors can be reached at the Department of Computer Science, UCLA, Los Angeles, CA 90095, or by email to fratner,popek,reiherg@cs.ucla.edu. y Gerald Popek is also affiliated with Platinum technology.
Reference: [12] <author> M. Stonebraker. </author> <title> Concurrency control and consistency of multiple copies of data in distributed IN-GRES. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 5(3), </volume> <month> May </month> <year> 1979. </year>
Reference-contexts: In the case of data shared between multiple mobile users or between mobile and stationary machines, replication is often the best and sometimes only viable approach. Conservative replication strategies such as primary-site <ref> [12] </ref> or majority-vote [14] are generally not appropriate in mobile scenarios, due to communication restrictions.
Reference: [13] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. De-mers, M. J. Spreitzer, and C. H. Hauser. </author> <title> Managing update conflicts in Bayou, a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> Dec. </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: The authors can be reached at the Department of Computer Science, UCLA, Los Angeles, CA 90095, or by email to fratner,popek,reiherg@cs.ucla.edu. y Gerald Popek is also affiliated with Platinum technology. Little Work [2], Rumor [9], and Bayou <ref> [13] </ref>. Optimistic strategies require a method of tracking updates to individual object replicas, allowing future comparisons between replicas, propagation of the latest version, and detection of conflicting versions. Most optimistic strategies base their update-tracking mechanism on the version vector [6] or some variant thereof.
Reference: [14] <author> R. H. Thomas. </author> <title> A solution to the concurrency control problem for multiple copy databases. </title> <booktitle> In Proceedings of the 16th IEEE Computer Society International Conference. IEEE, </booktitle> <month> Spring </month> <year> 1978. </year>
Reference-contexts: In the case of data shared between multiple mobile users or between mobile and stationary machines, replication is often the best and sometimes only viable approach. Conservative replication strategies such as primary-site [12] or majority-vote <ref> [14] </ref> are generally not appropriate in mobile scenarios, due to communication restrictions. In contrast, optimistic strategies have proven themselves as the correct model in the mobile context, demonstrated by systems such as Coda [11], fl This work was sponsored by the Advanced Research Projects Agency under contract DABT63-94-C-0080.
Reference: [15] <author> A. A. Wang, P. L. Reiher, and R. Bagrodia. </author> <title> A simulation framework for evaluating replicated filing environments. </title> <type> Technical Report CSD-970018, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> June </month> <year> 1997. </year> <month> 7 </month>
Reference-contexts: The key problem is that version vectors are unbounded in size. Many have noted the scaling problems associated with version vectors, and partly for that reason have opined that wide-scale peer replication does not scale [10]. Additionally, simulations of Rumor <ref> [15] </ref> have demonstrated the scaling problems concretely. <p> Simulation data by Wang supports the hot-spot notion. In studies of productivity environment data taken at Locus Computing [4], Wang found that replicated objects tend to have only a small set of common writers at any one time <ref> [15] </ref>. In short, while we must provide the ability for everyone to generate updates, it seems rare that a significant percentage of the replicas are simultaneously trying to do|an assertion we call the hot-spot hypothesis.
References-found: 15

