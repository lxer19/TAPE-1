URL: http://www.cs.wustl.edu/cs/techreports/1997/wucs-97-01.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Mobile UNITY: A Language and Logic for Concurrent Mobile Systems  
Author: Peter J. McCann Gruia-Catalin Roman 
Date: 19 December 1996  
Address: IN ST LOUIS  Saint Louis, MO 63130-4899 One Brookings Drive Campus Box 1045  
Affiliation: WASHINGTON UNIVERSITY  Washington School of Engineering Applied Science  Washington University Department of Computer Science  
Pubnum: WUCS-97-01  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport, </author> <title> An Old-fashioned Recipe for Real Time, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 16, no. 5, </volume> <pages> pp. 1543-71, </pages> <year> 1994. </year>
Reference-contexts: These expressions are similar to the MinTime and MaxTime predicates of <ref> [1] </ref>. Unlike [1], this mechanism for specifying real-time properties uses only local, discrete clocks instead of a continuous, global one. This contributes to more modular components that are capable of operating in isolation. <p> These expressions are similar to the MinTime and MaxTime predicates of <ref> [1] </ref>. Unlike [1], this mechanism for specifying real-time properties uses only local, discrete clocks instead of a continuous, global one. This contributes to more modular components that are capable of operating in isolation.
Reference: [2] <author> B. Alpern and F. B. Schneider, </author> <title> Defining Liveness, </title> <journal> Information Processing Letters, </journal> <volume> vol. 21, no. 4, </volume> <pages> pp. 181-5, </pages> <year> 1985. </year>
Reference: [3] <author> K. M. Chandy and J. Misra, </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference: [4] <author> E. D. Dijkstra, </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference: [5] <author> D. Dolev, C. Dwork, and L. Stockmeyer, </author> <title> On the Minimal Synchronism Needed for Distributed Consensus, </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> vol. 34, no. 1, </volume> <pages> pp. 77-97, </pages> <year> 1987. </year>
Reference-contexts: It also shows an important distinction between our notion of synchronization, which is the construction of new, atomic statements from two or more simpler atomic statements by executing them in parallel, and the notion of synchronous computing which is a system model characterized by bounded communication and computation delays <ref> [5] </ref>. While the latter is a very important component of current understanding of distributed systems, and in many circumstances is perhaps a prerequisite to implementation of the former, it is not our focus here.
Reference: [6] <author> M. J. Fischer, N. A. Lynch, and M. S. Paterson, </author> <title> Impossibility of Distributed Consensus with One Faulty Process, </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> vol. 32, no. 2, </volume> <pages> pp. 374-382, </pages> <year> 1985. </year>
Reference-contexts: Such a system would also be more robust against network failures not directly related to location. Because of well known results on the impossibility of distributed consensus in the presence of failures <ref> [6] </ref>, it would be impossible to implement (3), (4), (6), or (7) in this situation. Interestingly, the semantics of (5) are in fact implementable, because they embody at-most-once semantics for update of the remote variable.
Reference: [7] <author> G. H. Forman and J. Zahorjan, </author> <title> The Challenges of Mobile Computing, </title> <journal> IEEE Computer, </journal> <volume> vol. 27, no. 4, </volume> <pages> pp. 38-47, </pages> <year> 1994. </year>
Reference: [8] <author> C. G. Harrison, D. M. Chess, and A. Kershenbaum, </author> <title> Mobile Agents: Are they a good idea?, </title> <institution> IBM T.J. Watson Research Center RC 19887, </institution> <year> 1995. </year>
Reference: [9] <author> C. A. R. Hoare, </author> <title> An Axiomatic Basis for Computer Programming, </title> <journal> Communications of the ACM, </journal> <volume> vol. 12, no. 10, </volume> <pages> pp. </pages> <address> 576-580,583, </address> <year> 1969. </year>
Reference: [10] <author> C. A. R. Hoare, </author> <title> Communicating Sequential Processes, </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, no. 8, </volume> <pages> pp. 666-677, </pages> <year> 1978. </year>
Reference-contexts: However, synchronous execution of statements is also a central part of many models of distributed systems. In this section we investigate some new high-level constructs for synchronizing statements in a system of mobile components, trying to generalize the synchronization mechanisms of existing 26 nonmobile models. For example, CSP <ref> [10] </ref> provides a general model in which computation is carried out by a static set of sequential processes and communication (including pure synchronization) is accomplished via blocking, asymmetric, synchronous, two-party interactions called Input/Output Commands. <p> Therefore, we are free to make the distinction in Mobile UNITY between statement and parameters. Coordination under CSP <ref> [10] </ref> is very similar to I/O Automata, but here we are limited to passing one parameter between a single sender and a single receiver. Also, this model differs from I/O Automata in that the receive actions are not always enabled as is the case with input actions in I/O Automata.
Reference: [11] <author> T. Imielinski and B. R. Badrinath, </author> <title> Wireless Computing: Challenges in Data Management, </title> <journal> Communications of the ACM, </journal> <volume> vol. 37, no. 10, </volume> <pages> pp. 18-28, </pages> <year> 1994. </year>
Reference: [12] <author> D. B. Johnson, </author> <title> Routing in Ad Hoc Networks of Mobile Hosts, </title> <booktitle> Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 158-163, </pages> <year> 1994. </year>
Reference-contexts: Current plans for future work include the application of Mobile UNITY to formal reasoning about routing algorithms for mobile hosts both in the context of the Internet, i.e. Mobile IP [18], and in the context of ad-hoc networks <ref> [12] </ref>, where no fixed routing infrastructure is assumed. These problems have only recently received attention in the engineering and research community, and formal reasoning has an important role to play in communicating and understanding proposed solutions as well as the assumptions made by each.
Reference: [13] <author> A. D. Joseph, A. F. deLespinasse, J. A. Tauber, D. K. Gifford, and M. F. Kaashoek, </author> <title> Rover: a Toolkit for Mobile Information Access, </title> <journal> Operating Systems Review, </journal> <volume> vol. 29, no. 5, </volume> <pages> pp. 156-71, </pages> <year> 1995. </year>
Reference: [14] <author> N. A. Lynch and M. R. Tuttle, </author> <title> An Introduction to Input/Output Automata, </title> <journal> CWI Quaterly, </journal> <volume> vol. 2, no. 3, </volume> <pages> pp. 219-246, </pages> <year> 1989. </year> <month> 35 </month>
Reference-contexts: For example, CSP [10] provides a general model in which computation is carried out by a static set of sequential processes and communication (including pure synchronization) is accomplished via blocking, asymmetric, synchronous, two-party interactions called Input/Output Commands. The I/O Automata model <ref> [14] </ref> expresses communication via synchronization of a named output action with possibly many input actions of the same name. <p> These constructs could be used to build mobile variants of I/O Automata or CSP, the variation being that components may move and disconnect during execution of the model, which may cause a previously synchronized pair of statements to become decoupled. First we consider I/O Automata <ref> [14] </ref>, where a distributed system is modeled as a collection of state machines. Each machine has a set of input actions, a set of internal actions, and a set of output actions.
Reference: [15] <author> J. Misra, </author> <title> A Logic for Concurrent Programming: Progress, </title> <journal> Journal of Computer and Software Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 273-300, </pages> <year> 1995. </year>
Reference: [16] <author> J. Misra, </author> <title> A Logic for Concurrent Programming: Safety, </title> <journal> Journal of Computer and Software Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 239-72, </pages> <year> 1995. </year>
Reference: [17] <author> O. Nierstrasz and T. D. Meijler, </author> <title> Requirements for a Composition Language, </title> <booktitle> Proceedings of the ECOOP '94 Workshop on Models and Languages for Coordination of Parallelism and Distribution, </booktitle> <address> Bologna, Italy; 5 July 1994, </address> <pages> pp. 193, 147-61, </pages> <year> 1995. </year>
Reference: [18] <author> C. Perkins, </author> <title> IP Mobility Support, </title> <institution> Internet Engineering Task Force, ftp://ftp.ietf.cnri.reston.va.us/internet-drafts/draft-ietf-mobileip-protocol-16-txt, Internet draft draft-ietf-mobileip-16, </institution> <month> April 22 </month> <year> 1996. </year>
Reference-contexts: Current plans for future work include the application of Mobile UNITY to formal reasoning about routing algorithms for mobile hosts both in the context of the Internet, i.e. Mobile IP <ref> [18] </ref>, and in the context of ad-hoc networks [12], where no fixed routing infrastructure is assumed.
Reference: [19] <author> G.-C. Roman, J. Y. Plun, and C. D. Wilcox, </author> <title> Dynamic Synchrony Among Atomic Actions, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, no. 6, </volume> <pages> pp. 677-685, </pages> <year> 1993. </year>
Reference-contexts: Static forms of statement synchronization are more limited as discussed in <ref> [19] </ref>. Second, superposition is an asymmetric relationship that subsumes one program to another and disallows any communication from the superposed to the underlying program.
Reference: [20] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu, </author> <title> Experience with Disconnected Operation in a Mobile Computing Environment, </title> <booktitle> Proceedings of the USENIX Symposium on Mobile and Location-Indepedent Computing, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 11-28, </pages> <year> 1993. </year>
Reference-contexts: As soon as one is changed subsequent to the reconnection, propagation takes place and the other value is overwritten. Instead of wiping out these changes we would like to integrate them according to some programmer-specified policy. For inspiration we can look to filesystems and databases like <ref> [20] </ref> and [22] that operate in a disconnected mode. Here the program variables would be replicated files or records of a database, and update propagation is possible only when connectivity is available. <p> A.x reacts-to A.x A.x B.y r A.x B.y := A.x reacts-to A.x A.x B.y r A.x, B.y, status A.x, B.y := e, e, true reacts-to r status A.x, B.y A.x, B.y, status A.x, B.y := d 1 , d 2 , false reacts-to r status A.x, B.y (8) Systems like <ref> [20] </ref> and [22] have a definite notion of reintegration policies like engage values when a client reconnects to a fileserver or when two replicas come into contact. Specification of disengage values may be of less practical significance unless disconnection can be predicted in advance. <p> Specification of disengage values may be of less practical significance unless disconnection can be predicted in advance. Although this is not feasible for rapidly reconfiguring systems like mobile telephone networks, it may in fact be a good abstraction for the 24 file hoarding policies of <ref> [20] </ref>, which can be carried out as a user prepares to take his laptop home at the end of a workday, for instance. The transient sharing construct given above is a relationship between two variables. <p> Such an interface in fact exists in the Coda system <ref> [20] </ref>, which allows users to hoard needed files before disconnection. Of course this is not a valid assumption in every situation, for example when we try to model directly a mobile telephone system. Users travel between base stations at will and without warning.
Reference: [21] <author> B. N. Schilit, N. Adams, and R. </author> <title> Want, </title> <booktitle> Context-Aware Computing Applications, Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 85-90, </pages> <year> 1994. </year>
Reference: [22] <author> D. Terry, M. Theimer, K. Petersen, A. Demers, M. Spreitzer, and C. Hauser, </author> <title> Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System, </title> <journal> Operating Systems Review, </journal> <volume> vol. 29, no. 5, </volume> <pages> pp. 172-83, </pages> <year> 1995. </year>
Reference-contexts: As soon as one is changed subsequent to the reconnection, propagation takes place and the other value is overwritten. Instead of wiping out these changes we would like to integrate them according to some programmer-specified policy. For inspiration we can look to filesystems and databases like [20] and <ref> [22] </ref> that operate in a disconnected mode. Here the program variables would be replicated files or records of a database, and update propagation is possible only when connectivity is available. <p> A.x A.x B.y r A.x B.y := A.x reacts-to A.x A.x B.y r A.x, B.y, status A.x, B.y := e, e, true reacts-to r status A.x, B.y A.x, B.y, status A.x, B.y := d 1 , d 2 , false reacts-to r status A.x, B.y (8) Systems like [20] and <ref> [22] </ref> have a definite notion of reintegration policies like engage values when a client reconnects to a fileserver or when two replicas come into contact. Specification of disengage values may be of less practical significance unless disconnection can be predicted in advance.
Reference: [23] <author> G. M. Voelker and B. N. Bershad, Mobisaic: </author> <title> An Information System for a Mobile Wireless Computing Environment, </title> <booktitle> Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 185-90, </pages> <year> 1994. </year>
Reference: [24] <author> T. Watson, </author> <title> Application Design for Wireless Computing, </title> <booktitle> IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pp. 91-4, </pages> <year> 1994. </year> <month> 36 </month>
References-found: 24

