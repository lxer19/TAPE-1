URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1993/TR11.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Clustering and Intra-Processor Scheduling for Explicitly-Parallel Programs on Distributed-Memory Systems  
Author: Vibha A. Dixit-Radiya and Dhabaleswar K. Panda 
Date: Updated on February 7, 1994  
Pubnum: OSU-CISRC-3/93-TR11  
Abstract: A short version of this report will appear in International Parallel Processing Symposium, 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Wayne Bollinger and Scott F. Midkiff, </author> <title> "Heursitic Technique for Processor and Link Assignment in Multicomputers," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 40, No. 3, </volume> <month> Mar </month> <year> 1991. </year>
Reference-contexts: 1 Introduction The clustering problem is defined as mapping of tasks of a parallel program onto processors of a fully-connected host system such that the program executes with minimal time <ref> [1, 14] </ref>. The problem becomes difficult when the number of processors is bounded and less than the number of tasks. This forces more than one task to be mapped onto a single processor. <p> Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph [2, 9, 11, 17, 18, 19, 21] or a interaction graph <ref> [1, 3, 5, 7, 14, 15, 20] </ref>. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. The goal is to parallelize the sequential code. <p> Category III: Start with an explicitly-parallel program and model it as an interaction graph to solve the clustering and assignment problem. Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows. Bollinger <ref> [1] </ref>, Bokhari [3], Chaudhary and Aggarwal [5], Ercal [7], Lee and Aggarwal [14], Lo [15], and Shen [20]. The above discussion indicates that explicitly-parallel programs (either obtained as output of the partitioning problem or written by a user) have been modeled as interaction graphs.
Reference: [2] <author> Jeff Baxter and Janak H. Patel, </author> <title> "The LAST Algorithm: A Heuristic-based Static Task Allocation Algorithm," </title> <booktitle> International Conference on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <year> 1989, </year> <pages> pp. 217-222. </pages>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph <ref> [2, 9, 11, 17, 18, 19, 21] </ref> or a interaction graph [1, 3, 5, 7, 14, 15, 20]. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. <p> The clustering and assignment problems are then solved for the interaction graph. Representative work in this category are by Baxter <ref> [2] </ref>, Gerasoulis [9], Kim [11], and Sarkar [18]. Category II: Starts with a precedence graph for a sequential program and solve the partitioning, clustering, and assignment problems in a single step without generating partitions or task chains. Examples are Rewini [17], Sih and Lee [19], and Yang [21].
Reference: [3] <author> S. Bokhari, </author> <title> "On the Mapping problem," </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-30, </volume> <month> March </month> <year> 1981, </year> <pages> pp. 207-214. </pages>
Reference-contexts: Most previous work on mapping have ignored intra-processor scheduling problem. The clustering problem has received a lot of attention and is proven in literature to be NP-hard even for many restricted cases of host systems and/or parallel programs <ref> [3, 4, 18] </ref>. Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. <p> Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph [2, 9, 11, 17, 18, 19, 21] or a interaction graph <ref> [1, 3, 5, 7, 14, 15, 20] </ref>. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. The goal is to parallelize the sequential code. <p> Category III: Start with an explicitly-parallel program and model it as an interaction graph to solve the clustering and assignment problem. Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows. Bollinger [1], Bokhari <ref> [3] </ref>, Chaudhary and Aggarwal [5], Ercal [7], Lee and Aggarwal [14], Lo [15], and Shen [20]. The above discussion indicates that explicitly-parallel programs (either obtained as output of the partitioning problem or written by a user) have been modeled as interaction graphs.
Reference: [4] <author> D. Bernstein , M. Rodeh, and I. Gertner, </author> <title> "On the complexity of scheduling problems for parallel/pipelined machines," </title> <journal> IEEE Transactions on Computing, Sept. 1989, </journal> <volume> Vol. C-38, No. 9, </volume> <pages> pp. 1308-1313. </pages>
Reference-contexts: Most previous work on mapping have ignored intra-processor scheduling problem. The clustering problem has received a lot of attention and is proven in literature to be NP-hard even for many restricted cases of host systems and/or parallel programs <ref> [3, 4, 18] </ref>. Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions.
Reference: [5] <author> V. Chaudhary and J.K. Aggrawal, </author> <title> "A Generalized Scheme for Mapping Parallel Algorithms," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, March 1993, </journal> <volume> Vol. 4, No. 3, </volume> <pages> pp. 328-346. </pages>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph [2, 9, 11, 17, 18, 19, 21] or a interaction graph <ref> [1, 3, 5, 7, 14, 15, 20] </ref>. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. The goal is to parallelize the sequential code. <p> Results from simulation experiments performed on random task graphs with varying computation-communication ratio and average degree of parallelism are presented. The performance of the three heuristics are compared with that of a representative and most recent interaction graph-based heuristic proposed by Chaudhary, Lee, and Aggarwal in <ref> [5] </ref> and [14]. This paper is organized as follows. Section 2 establishes the relationship between the precedence graph, interaction graph, and the TCG models. Section 3 formally defines the TCG model and its attributes. Section 4 discusses the objectives and approach of the clustering and scheduling problems. <p> Category III: Start with an explicitly-parallel program and model it as an interaction graph to solve the clustering and assignment problem. Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows. Bollinger [1], Bokhari [3], Chaudhary and Aggarwal <ref> [5] </ref>, Ercal [7], Lee and Aggarwal [14], Lo [15], and Shen [20]. The above discussion indicates that explicitly-parallel programs (either obtained as output of the partitioning problem or written by a user) have been modeled as interaction graphs. <p> We compared the three clustering heuristics with that of a representative and most recent interaction graph-based heuristic proposed by Chaudhary, Lee, and Aggarwal (henceforth referred to as CLA) in <ref> [5, 14] </ref>. The simulations were performed on randomly generated task graphs. The (task, processor) configurations covered were (16,4), (32, 8), (128,32), and (256, 32). Four different classes of application task graphs were considered in each configuration: Computation-bound-Low-parallelism (CpLp), Computation-bound-High- parallelism (CpHp), Communication-bound-Low-parallelism (CmLp), and Communication-bound-High-parallelism (CmHp).
Reference: [6] <author> Vibha A. Dixit-Radiya and Dhabaleswar K. Panda, </author> <title> "Task Assignment on Distributed-Memory Systems with Adaptive Wormhole Routing," </title> <booktitle> To appear in Symposium on Parallel and Distributed Processing, </booktitle> <year> 1993. </year>
Reference-contexts: In this paper, we concentrate on the clustering and intra-processor task scheduling. In a separate paper <ref> [6] </ref>, we have solved task assignment problem with link contention using the TCG model. This paper proposes new clustering heuristics to group tasks with high critical communication and low parallelism between them. Communication steps 2 are critical if they cannot be overlapped with computation. <p> The clustering phase must be followed by assignment phase for mapping clusters onto processors of an architecture with specific topology and routing. We have solved this assignment problem using the TCG model in a separate paper <ref> [6] </ref>. Currently, the temporal communication graph models parallel programs with only forward flow. It is interesting to extend it to model programs with conditionals and loops. It is also challenging to see programs with dynamic structures which are predictable at compile time can be modeled using TCG representation.
Reference: [7] <author> F. Ercal, J. Ramanujam, and P. Sadayappan, </author> <title> "Task Allocation onto a Hypercube by Recursive Mincut Bipartitioning," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <month> Oct. </month> <year> 1990, </year> <pages> pp. 35-44. </pages>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph [2, 9, 11, 17, 18, 19, 21] or a interaction graph <ref> [1, 3, 5, 7, 14, 15, 20] </ref>. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. The goal is to parallelize the sequential code. <p> Hence the TCG model provides a better estimate of the completion time. This allows us to use completion time as an accurate measure of the goodness of a clustering as compared to either the minimax cost model [20] or the summed total cost model <ref> [7, 12] </ref> used by earlier researchers. In this paper, we concentrate on the clustering and intra-processor task scheduling. In a separate paper [6], we have solved task assignment problem with link contention using the TCG model. <p> Category III: Start with an explicitly-parallel program and model it as an interaction graph to solve the clustering and assignment problem. Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows. Bollinger [1], Bokhari [3], Chaudhary and Aggarwal [5], Ercal <ref> [7] </ref>, Lee and Aggarwal [14], Lo [15], and Shen [20]. The above discussion indicates that explicitly-parallel programs (either obtained as output of the partitioning problem or written by a user) have been modeled as interaction graphs. <p> The algorithm traces through a TCG by taking into account both communication dependencies and overlapping of computation with communication. Hence, this completion time is a better objective function compared to other non-temporal functions like minimax [20] or summed total cost <ref> [7, 12] </ref> functions. Fig. 6 gives the detailed pseudocode for the completion time algorithm. 4.3 Approach Used for the Clustering Problem The problem of determining the clustering with minimum completion time being NP-hard, heuristics are used to obtain near-optimal solutions.
Reference: [8] <author> H. A. Fencl and C. H. Huang, </author> <title> "On the Synthesis of Programs for Various Parallel Architectures," </title> <type> Technical Report, </type> <institution> The Ohio State University, </institution> <year> 1990. </year>
Reference-contexts: The mapping of tasks onto processors with a specific topology is defined as the assignment problem. The clustering, intra-processor scheduling, and assignment problem together constitute the mapping problem. Programs for distributed-memory systems are explicitly-parallel. They are either derived from a sequential program by automatic parallelization <ref> [8, 16] </ref> or written by a programmer directly. Explicitly-parallel programs comprise of a set of sequential tasks or processes that execute in parallel, communicate intermittently via message-passing, and exist throughout the lifetime of the parallel program.
Reference: [9] <author> A. Gerasoulis, S. Venugopal, and T. Yang, </author> <title> "Clustering Task Graphs for Message Passing Architectures," </title> <booktitle> International Conference on Supercomputing, </booktitle> <month> June </month> <year> 1990, </year> <pages> pp. 447-456. </pages>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph <ref> [2, 9, 11, 17, 18, 19, 21] </ref> or a interaction graph [1, 3, 5, 7, 14, 15, 20]. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. <p> The clustering and assignment problems are then solved for the interaction graph. Representative work in this category are by Baxter [2], Gerasoulis <ref> [9] </ref>, Kim [11], and Sarkar [18]. Category II: Starts with a precedence graph for a sequential program and solve the partitioning, clustering, and assignment problems in a single step without generating partitions or task chains. Examples are Rewini [17], Sih and Lee [19], and Yang [21].
Reference: [10] <author> A. Gerasoulis, and T. Yang, </author> <title> "A Comparison of Clustering Heuristics for Scheduling Directed Acyclic Graphs on Multiprocessors," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16, </volume> <year> 1992, </year> <pages> pp. 276-291. </pages>
Reference-contexts: Figure 3 shows application of four different partitioning 1 heuristics by Kim, Sarkar, 1 Proponents of precedence graph model use the term task for computation node and the term clustering to mean partitioning. 4 Wu-Gajski, and Yang-Gerasoulis for a sequential program <ref> [10] </ref>. Also shown are the corresponding possible TCGs and interaction graphs.
Reference: [11] <author> S.J. Kim and J.C. Browne, </author> <title> "A General Approach to Mapping of Parallel Compu tations upon Multiprocessor Architectures," </title> <booktitle> International Conference on Parallel Processing, 1988, </booktitle> <volume> Vol III, </volume> <pages> pp. 1-8. </pages>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph <ref> [2, 9, 11, 17, 18, 19, 21] </ref> or a interaction graph [1, 3, 5, 7, 14, 15, 20]. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. <p> The clustering and assignment problems are then solved for the interaction graph. Representative work in this category are by Baxter [2], Gerasoulis [9], Kim <ref> [11] </ref>, and Sarkar [18]. Category II: Starts with a precedence graph for a sequential program and solve the partitioning, clustering, and assignment problems in a single step without generating partitions or task chains. Examples are Rewini [17], Sih and Lee [19], and Yang [21].
Reference: [12] <author> O. Kramer and H Muhlenbein, </author> <title> "Mapping Strategies in Message-Based Multiprocessor Systems," </title> <booktitle> Proceedings PARLE 87, </booktitle> <volume> Vol. 1. </volume> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 258, </volume> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1987. </year>
Reference-contexts: Hence the TCG model provides a better estimate of the completion time. This allows us to use completion time as an accurate measure of the goodness of a clustering as compared to either the minimax cost model [20] or the summed total cost model <ref> [7, 12] </ref> used by earlier researchers. In this paper, we concentrate on the clustering and intra-processor task scheduling. In a separate paper [6], we have solved task assignment problem with link contention using the TCG model. <p> The algorithm traces through a TCG by taking into account both communication dependencies and overlapping of computation with communication. Hence, this completion time is a better objective function compared to other non-temporal functions like minimax [20] or summed total cost <ref> [7, 12] </ref> functions. Fig. 6 gives the detailed pseudocode for the completion time algorithm. 4.3 Approach Used for the Clustering Problem The problem of determining the clustering with minimum completion time being NP-hard, heuristics are used to obtain near-optimal solutions.
Reference: [13] <author> D.E. Knuth, </author> <booktitle> "The Art of Computer Programming," </booktitle> <volume> Vol 1: </volume> <booktitle> Fundamental Algorithms, </booktitle> <publisher> Addison-Wesley Pub. Co., </publisher> <year> 1973, </year> <pages> pp. 73. </pages>
Reference-contexts: The set D (m; n) is defined to be the Stirling numbers of the second kind <ref> [13] </ref>. Figure 7a shows the enumeration of D (4; 2) = 7 possible clustering solutions for the example TCG with m = 4 and n = 2.
Reference: [14] <author> Soo-Young Lee and J.K. Aggrawal, </author> <title> "A Mapping Strategy for Parallel Processing," </title> <journal> IEEE Transactions on Computers, April 1987, </journal> <volume> Vol. C-36, No. 4, </volume> <pages> pp. 433-441. 30 </pages>
Reference-contexts: 1 Introduction The clustering problem is defined as mapping of tasks of a parallel program onto processors of a fully-connected host system such that the program executes with minimal time <ref> [1, 14] </ref>. The problem becomes difficult when the number of processors is bounded and less than the number of tasks. This forces more than one task to be mapped onto a single processor. <p> Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph [2, 9, 11, 17, 18, 19, 21] or a interaction graph <ref> [1, 3, 5, 7, 14, 15, 20] </ref>. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. The goal is to parallelize the sequential code. <p> Results from simulation experiments performed on random task graphs with varying computation-communication ratio and average degree of parallelism are presented. The performance of the three heuristics are compared with that of a representative and most recent interaction graph-based heuristic proposed by Chaudhary, Lee, and Aggarwal in [5] and <ref> [14] </ref>. This paper is organized as follows. Section 2 establishes the relationship between the precedence graph, interaction graph, and the TCG models. Section 3 formally defines the TCG model and its attributes. Section 4 discusses the objectives and approach of the clustering and scheduling problems. <p> Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows. Bollinger [1], Bokhari [3], Chaudhary and Aggarwal [5], Ercal [7], Lee and Aggarwal <ref> [14] </ref>, Lo [15], and Shen [20]. The above discussion indicates that explicitly-parallel programs (either obtained as output of the partitioning problem or written by a user) have been modeled as interaction graphs. This model is devoid of temporal information which tasks send messages to whom and when. <p> We compared the three clustering heuristics with that of a representative and most recent interaction graph-based heuristic proposed by Chaudhary, Lee, and Aggarwal (henceforth referred to as CLA) in <ref> [5, 14] </ref>. The simulations were performed on randomly generated task graphs. The (task, processor) configurations covered were (16,4), (32, 8), (128,32), and (256, 32). Four different classes of application task graphs were considered in each configuration: Computation-bound-Low-parallelism (CpLp), Computation-bound-High- parallelism (CpHp), Communication-bound-Low-parallelism (CmLp), and Communication-bound-High-parallelism (CmHp).
Reference: [15] <author> Virginia M. Lo et al. "OREGAMI: </author> <title> Tools for Mapping Parallel Computations to Parallel Architectures," </title> <journal> Int'l Journal of Parallel Programming, </journal> <volume> Vol. 20, No. 3, </volume> <year> 1991. </year>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph [2, 9, 11, 17, 18, 19, 21] or a interaction graph <ref> [1, 3, 5, 7, 14, 15, 20] </ref>. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. The goal is to parallelize the sequential code. <p> Both the above models are thus insufficient for solving the clustering problem for explicitly-parallel programs. In this paper, we use a new Temporal Communication Graph (TCG) model for solving the clustering and scheduling problem for homogeneous multi-computer systems. The TCG model was recently introduced and used by Lo in <ref> [15] </ref>. However, the temporal information have been used only after the clustering and assignment phases to produce application-specific routing. In addition, only parallel programs exhibiting logically synchronous communication have been addressed. <p> Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows. Bollinger [1], Bokhari [3], Chaudhary and Aggarwal [5], Ercal [7], Lee and Aggarwal [14], Lo <ref> [15] </ref>, and Shen [20]. The above discussion indicates that explicitly-parallel programs (either obtained as output of the partitioning problem or written by a user) have been modeled as interaction graphs. This model is devoid of temporal information which tasks send messages to whom and when.
Reference: [16] <author> J. M. Ortega, </author> <title> Introduction to Parallel and Vector Solution of Linear Systems, </title> <publisher> Plenum Press, </publisher> <year> 1988. </year>
Reference-contexts: The mapping of tasks onto processors with a specific topology is defined as the assignment problem. The clustering, intra-processor scheduling, and assignment problem together constitute the mapping problem. Programs for distributed-memory systems are explicitly-parallel. They are either derived from a sequential program by automatic parallelization <ref> [8, 16] </ref> or written by a programmer directly. Explicitly-parallel programs comprise of a set of sequential tasks or processes that execute in parallel, communicate intermittently via message-passing, and exist throughout the lifetime of the parallel program.
Reference: [17] <author> Hesham El-Rewini and T.G. Lewis, </author> <title> "Scheduling Parallel Program Tasks onto Arbi trary Target Machines," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9, </volume> <year> 1990, </year> <pages> pp. 138-153. </pages>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph <ref> [2, 9, 11, 17, 18, 19, 21] </ref> or a interaction graph [1, 3, 5, 7, 14, 15, 20]. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. <p> Representative work in this category are by Baxter [2], Gerasoulis [9], Kim [11], and Sarkar [18]. Category II: Starts with a precedence graph for a sequential program and solve the partitioning, clustering, and assignment problems in a single step without generating partitions or task chains. Examples are Rewini <ref> [17] </ref>, Sih and Lee [19], and Yang [21]. Category III: Start with an explicitly-parallel program and model it as an interaction graph to solve the clustering and assignment problem. Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows.
Reference: [18] <author> Vivek Sarkar, </author> <title> "Partitioning and Scheduling Parallel Programs for Multiprocessors," </title> <booktitle> Research Monographs in Parallel and Distributed Computing, </booktitle> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Most previous work on mapping have ignored intra-processor scheduling problem. The clustering problem has received a lot of attention and is proven in literature to be NP-hard even for many restricted cases of host systems and/or parallel programs <ref> [3, 4, 18] </ref>. Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. <p> Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph <ref> [2, 9, 11, 17, 18, 19, 21] </ref> or a interaction graph [1, 3, 5, 7, 14, 15, 20]. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. <p> The clustering and assignment problems are then solved for the interaction graph. Representative work in this category are by Baxter [2], Gerasoulis [9], Kim [11], and Sarkar <ref> [18] </ref>. Category II: Starts with a precedence graph for a sequential program and solve the partitioning, clustering, and assignment problems in a single step without generating partitions or task chains. Examples are Rewini [17], Sih and Lee [19], and Yang [21].
Reference: [19] <author> Gilbert C. Sih and Edward A. Lee, </author> <title> "A Compile-time Scheduling Heuristic for Interconnection-contrained Heterogeneous Processor Architectures," </title> <note> Submitted for refreeing, </note> <year> 1991. </year>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph <ref> [2, 9, 11, 17, 18, 19, 21] </ref> or a interaction graph [1, 3, 5, 7, 14, 15, 20]. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. <p> Category II: Starts with a precedence graph for a sequential program and solve the partitioning, clustering, and assignment problems in a single step without generating partitions or task chains. Examples are Rewini [17], Sih and Lee <ref> [19] </ref>, and Yang [21]. Category III: Start with an explicitly-parallel program and model it as an interaction graph to solve the clustering and assignment problem. Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows.
Reference: [20] <author> Chien-Chung Shen and Wen-Hsiang Tsai, </author> <title> "A graph Matching Approach to Optimal Task Assignment in Distributed Computing Systems Using A Minimax Criterion," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-34, No. 3, </volume> <month> Mar. </month> <year> 1985, </year> <pages> pp. 197-203. </pages>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph [2, 9, 11, 17, 18, 19, 21] or a interaction graph <ref> [1, 3, 5, 7, 14, 15, 20] </ref>. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. The goal is to parallelize the sequential code. <p> These factors significantly affect the completion time of a parallel program. Hence the TCG model provides a better estimate of the completion time. This allows us to use completion time as an accurate measure of the goodness of a clustering as compared to either the minimax cost model <ref> [20] </ref> or the summed total cost model [7, 12] used by earlier researchers. In this paper, we concentrate on the clustering and intra-processor task scheduling. In a separate paper [6], we have solved task assignment problem with link contention using the TCG model. <p> Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows. Bollinger [1], Bokhari [3], Chaudhary and Aggarwal [5], Ercal [7], Lee and Aggarwal [14], Lo [15], and Shen <ref> [20] </ref>. The above discussion indicates that explicitly-parallel programs (either obtained as output of the partitioning problem or written by a user) have been modeled as interaction graphs. This model is devoid of temporal information which tasks send messages to whom and when. <p> The algorithm traces through a TCG by taking into account both communication dependencies and overlapping of computation with communication. Hence, this completion time is a better objective function compared to other non-temporal functions like minimax <ref> [20] </ref> or summed total cost [7, 12] functions. Fig. 6 gives the detailed pseudocode for the completion time algorithm. 4.3 Approach Used for the Clustering Problem The problem of determining the clustering with minimum completion time being NP-hard, heuristics are used to obtain near-optimal solutions.
Reference: [21] <author> Jiyuan Yang, Lubomir Bic, and Alexandru Nicolau, </author> <title> "A Mapping Strategy for MIMD Computers," </title> <booktitle> International Conference on Parallel Processing, </booktitle> <year> 1991. </year> <month> 31 </month>
Reference-contexts: Research has therefore been focused on designing tractable heuristics that generate efficient clustering solutions. Previous work related to the clustering problem has modeled a program as either a precedence graph <ref> [2, 9, 11, 17, 18, 19, 21] </ref> or a interaction graph [1, 3, 5, 7, 14, 15, 20]. The characteristics of these models are as follows: * The precedence graph models a sequential program and represents the data depen dencies among its computational units. <p> Category II: Starts with a precedence graph for a sequential program and solve the partitioning, clustering, and assignment problems in a single step without generating partitions or task chains. Examples are Rewini [17], Sih and Lee [19], and Yang <ref> [21] </ref>. Category III: Start with an explicitly-parallel program and model it as an interaction graph to solve the clustering and assignment problem. Examples in this category are 3 distributed-memory systems. Scope of this paper is shown by bold arrows.
References-found: 21

