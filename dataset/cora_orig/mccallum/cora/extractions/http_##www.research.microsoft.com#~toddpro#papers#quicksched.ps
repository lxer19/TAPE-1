URL: http://www.research.microsoft.com/~toddpro/papers/quicksched.ps
Refering-URL: http://www.research.microsoft.com/~toddpro/
Root-URL: http://www.research.microsoft.com
Title: Detecting Pipeline Structural Hazards Quickly  
Author: Todd A. Proebsting Christopher W. Fraser 
Affiliation: University of Arizona  AT&T Bell Laboratories  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Jean-Loup Baer. </author> <title> Computer Systems Architecture. </title> <publisher> Computer Science Press, </publisher> <year> 1980. </year>
Reference-contexts: The automaton could be represented as a single 3D table. The DSTP automaton has been underused. The literature includes few citations <ref> [12, 1, 7, 6, 10] </ref>|mostly surveys|and describes no implementations or measurements. One explanation is table size. For example, we implemented the method and found that it generates 6175 states for the MIPS R3000. <p> The adjacent 1 indicates that the two add.s's also collide if separated by exactly two cycles. Note that mov.s collides with nothing. If a machine is in state S, and S <ref> [I; 1] </ref> is 0, then instruction I may be issued immediately, with a transition to state S 0 . <p> Transitions for this automaton were labelled with both I and k.) The automaton is built as follows. Beginning with the empty start state (a matrix of all 0's), all instructions are issued, producing new states. For each state, S, an instruction I is issued if S <ref> [I; 1] </ref> = 0. The combining rule above forms a target state, S 0 . If S 0 has not been created before, it is added to the automaton, as is a transition from S to S 0 on I. <p> Otherwise, the previously created identical matrix (state) is the target of the transition. This process terminates when all possible instructions have been issued from all states. A state lacks a transition on a particular instruction (because S <ref> [I; 1] </ref> = 1) when a struc tural hazard exists. This algorithm yields the automaton in Figure 4 for the sample machine. The empty start state is on the left. <p> If t 1 nop's are issued to each state, the new states, S 0 x and S 0 y , will have the properties that S 0 x <ref> [I; 1] </ref> = 1 and S 0 cause the combining rule above simply shifts each state by one cycle and combines it with the nop's empty collision matrix. S 0 x [I; 1] = 1, so S 0 transition on I. <p> the new states, S 0 x and S 0 y , will have the properties that S 0 x <ref> [I; 1] </ref> = 1 and S 0 cause the combining rule above simply shifts each state by one cycle and combines it with the nop's empty collision matrix. S 0 x [I; 1] = 1, so S 0 transition on I. S 0 y does have a transition on I, so t 1 nops followed by instruction I distinguishes S x and S y .
Reference: [2] <author> Thomas Ball and James R. Larus. </author> <title> Optimally profiling and tracing programs. </title> <booktitle> Conference Record of the Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 59-70, </pages> <month> January </month> <year> 1992. </year>
Reference: [3] <author> David G. Bradlee, Robert R. Henry, and Susan J. Eggers. </author> <title> The Marion system for retargetable instruction scheduling. </title> <booktitle> Proceedings of the SIGPLAN'91 Conference on Programming Language Design and Implementation, SIGPLAN Notices, </booktitle> <volume> 26(6) </volume> <pages> 229-240, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Resources needed Vector 0 1 2 3 4 5 6 Previous state S+A A+R R+S ; ; ; ; add.s U S+A A+R R+S ; ; ; Combined vectors S+A+U hazard on A hazard on R R+S ; ; ; Other structural-hazard detectors use reservation tables [5] or resource vectors <ref> [3, 4] </ref> instead. The vector is indexed by a cycle number, and each element records the resources needed during that cycle. There is one resource vector for each distinct class of instructions and another that composes the vectors of all instructions already in the pipe.
Reference: [4] <author> David Gordon Bradlee. </author> <title> Retargetable Instruction Scheduling for Pipeline Processors. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1991. </year> <type> Technical report 91-08-07, </type> <institution> Department of Computer Science and Engineering. </institution>
Reference-contexts: Resources needed Vector 0 1 2 3 4 5 6 Previous state S+A A+R R+S ; ; ; ; add.s U S+A A+R R+S ; ; ; Combined vectors S+A+U hazard on A hazard on R R+S ; ; ; Other structural-hazard detectors use reservation tables [5] or resource vectors <ref> [3, 4] </ref> instead. The vector is indexed by a cycle number, and each element records the resources needed during that cycle. There is one resource vector for each distinct class of instructions and another that composes the vectors of all instructions already in the pipe.
Reference: [5] <author> Edward S. Davidson, Leonard E. Shar, A. Thampy Thomas, and Janak H. Pa-tel. </author> <title> Effective control for pipelined computers. </title> <booktitle> In Spring COMPCON75 Digest of Pa pers, </booktitle> <pages> pages 181-184. </pages> <institution> IEEE Computer Soci- ety, </institution> <month> February </month> <year> 1975. </year>
Reference-contexts: Such automata will speed up current instruction scheduling heuristics and allow compilers to try more schedules. Profilers that count cycles| like pixie [13] and qp [2]|could use it too. We use an algorithm described in 1975 <ref> [5] </ref>, but the prior literature describes neither implementations nor measurements, perhaps because the defining paper attacked a variant problem that needed much larger 3D tables. <p> ; ; ; Resource Resources needed Vector 0 1 2 3 4 5 6 Previous state S+A A+R R+S ; ; ; ; add.s U S+A A+R R+S ; ; ; Combined vectors S+A+U hazard on A hazard on R R+S ; ; ; Other structural-hazard detectors use reservation tables <ref> [5] </ref> or resource vectors [3, 4] instead. The vector is indexed by a cycle number, and each element records the resources needed during that cycle. There is one resource vector for each distinct class of instructions and another that composes the vectors of all instructions already in the pipe. <p> The second add.s needs A (and S) in its second cycle, which causes a hazard. There's another hazard on R one cycle later. 3 The "DSTP" Automaton In 1975, Davidson, Shar, Thomas, and Patel (here abbreviated "DSTP") <ref> [5] </ref> proposed to use resource vectors to compute an automaton. The automaton would accept integers representing an instruction class i, a cycle count c, and a pipeline state s.
Reference: [6] <author> Kai Hwang and Faye A. Briggs. </author> <title> Com puter Architecture and Parallel Processing. </title> <publisher> McGraw-Hill, </publisher> <year> 1985. </year>
Reference-contexts: The automaton could be represented as a single 3D table. The DSTP automaton has been underused. The literature includes few citations <ref> [12, 1, 7, 6, 10] </ref>|mostly surveys|and describes no implementations or measurements. One explanation is table size. For example, we implemented the method and found that it generates 6175 states for the MIPS R3000.
Reference: [7] <author> Kai Hwang, Shun-Piao Su, and Lionel M. Ni. </author> <title> Vector computer architecture and pro cessing techniques. </title> <booktitle> In Advances in Comput ers, </booktitle> <volume> volume 20, </volume> <pages> pages 115-197. </pages> <year> 1981. </year>
Reference-contexts: The automaton could be represented as a single 3D table. The DSTP automaton has been underused. The literature includes few citations <ref> [12, 1, 7, 6, 10] </ref>|mostly surveys|and describes no implementations or measurements. One explanation is table size. For example, we implemented the method and found that it generates 6175 states for the MIPS R3000.
Reference: [8] <author> Gerry Kane and Joe Heinrich. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: The automaton can be implemented with a two-dimensional array. An implementation of the method below generates practical automata quickly. For example, a 33mhz MIPS R3000 generates a 6175-state automaton for the MIPS R3000/R3010 <ref> [8] </ref> in five seconds. This architecture has only 14 distinct instruction classes with respect to creating structural hazards, so the automaton's table takes only 14 fi 6175 two-byte entries. Contrast this with the theoretical upper bound of 2 22fi37 states for the MIPS R3000/R3010. <p> For example, add.s requires exclusive access to the U (for "unpack") stage in cycle 0, the S (for "shift") and A (for "adder") stages in cycle 1, A and R (for "round") in cycle 2, and R and S in cycle 3. Tables 8-7 and 8-8 in Reference <ref> [8] </ref> elaborate. To illustrate resource vectors, we issue two add.s instructions into an empty pipe. The first causes no structural hazard. Combining the initial empty vector with add.s's and shifting it one cycle forward yields the next state's resource vector. Figure 2 demonstrates this combination. <p> Multiple instructions may share the same description. For example, U S+A A+R R+S. add.s describe the R4000 instruction classes that add.s and div.d exemplify. Text accompanying Figure 1 in Section 2 described some of the resources named above, and Tables 8-7 and 8-8 in Reference <ref> [8] </ref> describe them all. Appendices A and B contain specifications for the R4000 FPU and the R3000/R3010; they present only the material relevant to structural hazards.
Reference: [9] <author> James Larus. </author> <title> Assemblers, linkers, </title> <editor> and spim. In David Patterson and John Hen nessy, </editor> <booktitle> Computer Organization & Design: The Hardware/Software Interface, </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1993. </year>
Reference-contexts: We show that smaller 2D tables suffice for typical schedulers, we prove that the automata are minimal, and we describe an implementation and experiments. 2 Background Some schedulers detect structural hazards by recording the instructions in the pipe and when each was issued <ref> [9] </ref>. When the next instruction is proposed, the scheduler compares each instruction in the pipe with the proposed instruction and objects if there is a hazard. The comparison code is machine-specific. If the architecture is complex, so is the code.
Reference: [10] <author> H. F. Li and R. Jayakumar. </author> <title> Systolic struc tures: A notion and characterization. </title> <booktitle> Jour nal of Parallel and Distributed Computing, </booktitle> <pages> pages 373-397, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: The automaton could be represented as a single 3D table. The DSTP automaton has been underused. The literature includes few citations <ref> [12, 1, 7, 6, 10] </ref>|mostly surveys|and describes no implementations or measurements. One explanation is table size. For example, we implemented the method and found that it generates 6175 states for the MIPS R3000.
Reference: [11] <author> Thomas Muller. </author> <title> Employing finite automata for resource scheduling. </title> <booktitle> In The 26th An nual ACM/IEEE International Symposium on Microarchitecture, </booktitle> <month> December </month> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: Thus any two distinct states created by the DSTP algorithm are distinguishable, and the automaton must be minimal. An alternative automata generator has been described recently <ref> [11] </ref>. It generates minimal automata with heurisitics and a postpass minimizer.
Reference: [12] <author> C. V. Ramamoorthy and H. F. Li. </author> <title> Pipeline architecture. </title> <journal> ACM Computing Surveys, </journal> <volume> 9(1) </volume> <pages> 61-102, </pages> <month> March </month> <year> 1977. </year>
Reference-contexts: The automaton could be represented as a single 3D table. The DSTP automaton has been underused. The literature includes few citations <ref> [12, 1, 7, 6, 10] </ref>|mostly surveys|and describes no implementations or measurements. One explanation is table size. For example, we implemented the method and found that it generates 6175 states for the MIPS R3000.
Reference: [13] <institution> MIPS Computer Systems. RISCompiler Language Programmers Guide. MIPS Com puter Systems, </institution> <year> 1988. </year>
Reference-contexts: Contrast this with the theoretical upper bound of 2 22fi37 states for the MIPS R3000/R3010. Such automata will speed up current instruction scheduling heuristics and allow compilers to try more schedules. Profilers that count cycles| like pixie <ref> [13] </ref> and qp [2]|could use it too. We use an algorithm described in 1975 [5], but the prior literature describes neither implementations nor measurements, perhaps because the defining paper attacked a variant problem that needed much larger 3D tables.
References-found: 13

