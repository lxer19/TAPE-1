URL: http://www.cs.toronto.edu/~chl/papers/icde99.ps
Refering-URL: http://www.cs.toronto.edu/~chl/papers.html
Root-URL: http://www.cs.toronto.edu
Email: chl@db.toronto.edu mendel@db.toronto.edu av2n@dc.uba.ar  
Title: Maintaining Data Cubes under Dimension Updates  
Author: Carlos A. Hurtado Alberto O. Mendelzon Alejandro A. Vaisman 
Address: Buenos Aires  
Affiliation: University of Toronto University of Toronto Universidad de  
Abstract: OLAP systems support data analysis through a multidimensional data model, according to which data facts are viewed as points in a space of application-related "dimensions", organized into levels which conform a hierarchy. The usual assumption is that the data points reflect the dynamic aspect of the data warehouse, while dimensions are relatively static. However, in practice, dimension updates are often necessary to adapt the multidimensional database to changing requirements. Structural updates can also take place, like addition of categories or modification of the hierarchical structure. When these updates are performed, the materialized aggregate views that are typically stored in OLAP systems must be efficiently maintained. These updates are poorly supported (or not supported at all) in current commercial systems, and have received little attention in the research literature. We present a formal model of dimension updates in a multidimensional model, a collection of primitive operators to perform them, and a study of the effect of these updates on a class of materialized views, giving an algorithm to efficiently maintain them. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gupta A., I.S. Mumick, and D Subrahmanian. </author> <title> Maintaining views incrementally. </title> <booktitle> In Proceedings of the ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Washington D.C.,USA, </address> <year> 1993. </year>
Reference-contexts: We could therefore apply existing incremental maintenance algorithms for materialized relational views with aggregates <ref> [1, 15, 14] </ref>. However, we will see that we can do better by exploiting the special form of these updates. In particular, we will show how to improve on the "summary delta" method of Mumick et al. [14].
Reference: [2] <author> R. Agrawal, A. Gupta, S. Sarawagi, P Deshpande, S. Agarwal, J. Naughton, and R. Ramakrishnan. </author> <title> On the computation of multidimensional aggregates. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: 1 );:::l n =ffid (l n );m=m oe l=i f:, where l i are the levels of d, s.t. l i 6= l. case u= AddInstance (d; l; i; P ), choose a node GB 0 , immediately below GB, using one of the well-known methods for computing aggregates (v.g. <ref> [2] </ref>). As a default, the predecessor with the least estimated size could be used ([2]). * For each node N (GB) such that l 62 GB: choose as predecessor the node N (GB 0 ), immediately below (i.e., connected by a direct edge), s.t. that GB 0 n GB = fl <p> Our focus in this paper has been to introduce the problem and present a framework for it. Several multidimensional models have already been presented <ref> [9, 12, 2] </ref>. We chose the work by Cabibbo and Torlone [3] as a starting point for our model. We developed a set of operators for structural and instance updates over dimensions.
Reference: [3] <author> L. Cabibbo and R. Torlone. </author> <title> Querying multidimensional databases. </title> <booktitle> In Proceedings of the 6th International Workshop on Database Programming Languages, </booktitle> <pages> pages 253-269, </pages> <address> East Park, Colorado, USA, </address> <year> 1997. </year>
Reference-contexts: Our focus in this paper has been to introduce the problem and present a framework for it. Several multidimensional models have already been presented [9, 12, 2]. We chose the work by Cabibbo and Torlone <ref> [3] </ref> as a starting point for our model. We developed a set of operators for structural and instance updates over dimensions. We also presented algorithms to perform maintenance when using ROLAP storage of the data cube, under both structural and instance updates.
Reference: [4] <author> C. Faloutsos, H. Jagadish, and N. Sidiropoulos. </author> <title> Recovering information from summary data. </title> <booktitle> In Proceedings of the 23rd VLDB Conference, </booktitle> <address> Athens, Greece, </address> <year> 1997. </year>
Reference-contexts: We will not address in this paper the problem of finding an appropriate new base fact table, but it can be seen that one always exists. The determination of a new base fact table is related to the reconstruction problem <ref> [4] </ref>, which consists on the estimation and computation of a fact table based on an aggregate view of it. We can summarize our simple incremental maintenance algorithm for structural updates as follows. For the operators Relate, UnRelate, and Generalize, no maintenance is required.
Reference: [5] <author> J. Gray, A. Bosworth, A. Layman, and H. H. Pira-hesh. </author> <title> Data cube : A relational operator generalizing group-by, cross-tab and sub-totals. Data Mining and Knowledge Discovery 1, </title> <booktitle> pgs. </booktitle> <pages> 29-53, </pages> <year> 1997. </year>
Reference-contexts: We also define a base fact table as a fact table with schema (fname; GBottom D ; m). 2.2 Data Cubes Several classes of aggregate views have been used to fulfill different requirements in OLAP systems. Gray et al <ref> [5] </ref> introduced the data cube operator as a shorthand for a set of cube views that contains data from a base fact table, aggregated over all the possible groups of attributes in it.
Reference: [6] <author> A. Gupta, V. Harinarayan, and D Quass. </author> <title> Aggregate query processing in data warehousing environments. </title> <booktitle> In Proceedings of the 21st VLDB Conference, </booktitle> <address> Zurich, Switzerland, </address> <year> 1995. </year>
Reference-contexts: This implies that, whenever an update is performed over the underlying database, the corresponding changes should also be applied to these views, which constitutes the well-known problems of view maintenance and incremental view maintenance <ref> [13, 6, 14] </ref>. In this paper we address the dimension update problem.
Reference: [7] <author> A. Gupta, V. Harinarayan, and D Quass. </author> <title> Generalized projections:a powerful approach to aggregation. </title> <booktitle> In Proceedings of the 21st VLDB Conference, </booktitle> <address> Zurich, Switzerland, </address> <year> 1995. </year>
Reference: [8] <author> A. Gupta and I.S. Mumick. </author> <title> Maintenance of generalized views:problems, techniques and applications. </title> <journal> In Bulletin of the Technical Committee on Data Engineering, </journal> <volume> Vol 18, No 2, </volume> <year> 1995. </year>
Reference-contexts: This is done separately for every cube view in dc. Now, we can say that if the instance update is over a level that is not the bottom level, any cube view change is empty. These updates are called irrelevant updates <ref> [8] </ref> in the view maintenance literature.
Reference: [9] <author> M. Gyssens and L. Lakshmanan. </author> <title> A foundation for multi-dimensional databases. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <pages> pages 106-115, </pages> <address> Bombay, In-dia, </address> <year> 1996. </year>
Reference-contexts: Our focus in this paper has been to introduce the problem and present a framework for it. Several multidimensional models have already been presented <ref> [9, 12, 2] </ref>. We chose the work by Cabibbo and Torlone [3] as a starting point for our model. We developed a set of operators for structural and instance updates over dimensions.
Reference: [10] <author> V. Harinarayan, A. Rajaraman, and J. Ullman. </author> <title> Implementing data cubes efficiently. </title> <booktitle> In Proceedings of the ACM-SIGMOD Conference, </booktitle> <pages> pages 205 - 216, </pages> <address> Mon-treal, Canada, </address> <year> 1996. </year>
Reference-contexts: We will present an efficient algorithm for the cases of instance updates, by adapting the view lattice introduced by Harinarayan et al. <ref> [10] </ref>, and the summary delta method, to our specific needs.
Reference: [11] <author> R. Kimball. </author> <title> The Data Warehouse Toolkit. </title> <publisher> J.Wiley and Sons, Inc, </publisher> <year> 1996. </year>
Reference-contexts: However, changes in the data will often require updates to the dimension tables: new salespersons may be hired or fired, new kinds of coverage introduced or discontinued, etc. In addition, structural changes to the dimension hierarchies also occur: for example, regions may be reorganized or merged or split. Kimball <ref> [11] </ref> talks about slowly changing dimensions, covering only the first kind of change discussed above, not structural changes. An OLAP database usually stores materialized views which precompute aggregates in order to speed-up the complex queries often needed.
Reference: [12] <author> C. Li and S. Wang. </author> <title> A data model for supporting online analytical processing. </title> <booktitle> In Proceedings of the Conference on Information and Knowledge Management, </booktitle> <pages> pages 81-88, </pages> <year> 1996. </year>
Reference-contexts: Our focus in this paper has been to introduce the problem and present a framework for it. Several multidimensional models have already been presented <ref> [9, 12, 2] </ref>. We chose the work by Cabibbo and Torlone [3] as a starting point for our model. We developed a set of operators for structural and instance updates over dimensions.
Reference: [13] <author> D. Lomet and Editors Widom, </author> <title> J. </title> <journal> IEEE Data Engineering Bulletin. Special Issue on Materialized Views and Data Warehousing, </journal> <month> June </month> <year> 1995. </year>
Reference-contexts: This implies that, whenever an update is performed over the underlying database, the corresponding changes should also be applied to these views, which constitutes the well-known problems of view maintenance and incremental view maintenance <ref> [13, 6, 14] </ref>. In this paper we address the dimension update problem. <p> In the case of views with aggregations, this approach applies only if the aggregate functions are self maintainable <ref> [13] </ref>. We will assume in what follows that the aggregate operator Ag is SUM, and that we extend the tables and the cube views to store the count value required to make SUM self-maintainable with respect to insertions and deletions.
Reference: [14] <author> I. Mumick, D. Quass, and B. Mumick. </author> <title> Maintenance of data cubes and summary tables in a warehouse. </title> <booktitle> In Proceedings of the ACM - SIGMOD Conference, </booktitle> <address> Tuc-son, Arizona, </address> <year> 1997. </year>
Reference-contexts: This implies that, whenever an update is performed over the underlying database, the corresponding changes should also be applied to these views, which constitutes the well-known problems of view maintenance and incremental view maintenance <ref> [13, 6, 14] </ref>. In this paper we address the dimension update problem. <p> We could therefore apply existing incremental maintenance algorithms for materialized relational views with aggregates <ref> [1, 15, 14] </ref>. However, we will see that we can do better by exploiting the special form of these updates. In particular, we will show how to improve on the "summary delta" method of Mumick et al. [14]. <p> However, we will see that we can do better by exploiting the special form of these updates. In particular, we will show how to improve on the "summary delta" method of Mumick et al. <ref> [14] </ref>. In general, incremental maintenance involves (1) computing the set of changes, sometimes called the delta table (propagation phase), and (2) applying the changes represented in the delta table to the materialized view (refresh phase). <p> We developed a set of operators for structural and instance updates over dimensions. We also presented algorithms to perform maintenance when using ROLAP storage of the data cube, under both structural and instance updates. Mumick et al <ref> [14] </ref>, proposed the Summary Delta Method for incremental maintenance of a set of materialized aggregate views defined over the same base table. Their approach is applied to generalized cube views, which differ from our cube views in their aggregate functions and the joins they perform with dimension tables.
Reference: [15] <author> D. Quass. </author> <title> Maintenance expressions for views with aggregations. </title> <booktitle> In ACM Workshop on Materialized Views: Techniques and Applications, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: We could therefore apply existing incremental maintenance algorithms for materialized relational views with aggregates <ref> [1, 15, 14] </ref>. However, we will see that we can do better by exploiting the special form of these updates. In particular, we will show how to improve on the "summary delta" method of Mumick et al. [14]. <p> represents the cube view where GB = fAll ; StoreId ; Day g). 4.2.1 Maintaining Cube Views Independently Under instance updates in a dimension, we can proceed as in the summary delta method, i.e., separately compute for each cube view a maintenance expression, derived using the rules presented by Quass <ref> [15] </ref>. The maintenance expression produces the change to each cube view, which is then applied to the cube view using a refresh algorithm. Let Refresh (f; f ) be the result of applying the refresh algorithm for set of changes f to fact table f .
References-found: 15

