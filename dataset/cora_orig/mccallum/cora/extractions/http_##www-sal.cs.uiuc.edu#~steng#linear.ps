URL: http://www-sal.cs.uiuc.edu/~steng/linear.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~steng/newpaper.html
Root-URL: http://www.cs.uiuc.edu
Title: Partitioning Meshes with Lines and Planes  
Author: Feng Cao John R. Gilbert Shang-Hua Teng 
Keyword: finite element mesh, geometric methods, load balancing, partitioning, par allel scientific computing.  
Web: 05C50, 65F50, 68R10  
Note: AMS subject classifications.  
Date: September 19, 1995  
Abstract: We investigate several geometric methods for dividing an irregular mesh into pieces of roughly equal size with few interconnecting edges. All these methods are based on cutting a mesh with a line (in two dimensions) or a hyperplane (in any dimension). Line cuts have often been used in practice, but their quality varies widely. Until now, no theory has existed to predict the effectiveness of any line-cut algorithm. We make two main contributions: First, we give rigorous (and tight) bounds on the quality of line cuts for meshes of bounded aspect ratio in terms of a parameter we call trestle that measures the nonuniformity of the mesh. Our bound on line cut quality differs from the known bound on circle cut quality by a factor that grows only as the 1=d power of the logarithm of the mesh grading. Second, we give an upper bound on the quality of an exact 50:50 line cut. This is the first proof of a cut size guarantee for any exact bisection induced by a single geometric cut. We use these bounds to design simple and efficient algorithms that guarantee to find good line cuts. fl Department of Computer Science, University of Minnesota, Minneapolis, MN 55455 (cao@cs.umn.edu). y Xerox Corporation, Palo Alto Research Center, 3333 Coyote Hill Road, Palo Alto, CA 94304 (gilbert@parc.xerox.com). Copyright c fl 1995 by Xerox Corporation. All rights reserved. z Department of Computer Science, University of Minnesota, Minneapolis, MN 55455 (steng@cs.umn.edu). Supported in part by an NSF CAREER award (CCR-9502540) and an Intel research grant. Part of this work was done while the author was visiting Xerox Palo Alto Research Center. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bern, D. Eppstein and J. R. Gilbert. </author> <title> Provably good mesh generation. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, IEEE, </booktitle> <pages> 231-241, </pages> <year> 1990, </year> <note> (to appear JCSS). </note>
Reference-contexts: A d-dimensional simplicial complex is a collection of d-dimensional simplices that meet only at shared faces <ref> [1, 2] </ref>. For example, a 2-dimensional simplicial complex is a triangulation whose triangles intersect only at shared edges and vertices. <p> A common condition for finite element meshes is that the angles of each element should not be too small, or equivalently that the aspect ratio of each element should be bounded <ref> [1, 6] </ref>. Several other shape criteria exist. In some contexts, an upper bound on the largest angle is important.
Reference: [2] <author> M. Bern and D. Eppstein. </author> <title> Mesh generation and optimal triangulation. In Computing in Euclidean Geometry, </title> <editor> F. K. Hwang and D.-Z. Du editors, </editor> <publisher> World Scientific, </publisher> <year> 1992. </year>
Reference-contexts: A d-dimensional simplicial complex is a collection of d-dimensional simplices that meet only at shared faces <ref> [1, 2] </ref>. For example, a 2-dimensional simplicial complex is a triangulation whose triangles intersect only at shared edges and vertices.
Reference: [3] <author> K. Clarkson, D. Eppstein, G. L. Miller, C. Sturtivant, and S.-H. Teng. </author> <title> Approximating center points with and without linear programming. </title> <booktitle> In Proceedings of 9th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 91-98, </pages> <year> 1993. </year>
Reference-contexts: A d=(d + 1)-centerpoint is called a centerpoint of P . Every finite point set in IR d has a centerpoint, which can be found by linear programming [4, Section 4]. An efficient and practical constant-time algorithm to approximate a centerpoint can be found in <ref> [3] </ref>; see [8] for an implementation. We now describe a linear partitioning scheme that uses a centerpoint. Algorithm Centerpoint-Based Linear Partition Input A well-shaped mesh M = (G; xyz) Output A ffi-balanced hyperplane H 1. Find a ffi-centerpoint c of xyz; 2. Return a random hyperplane H that contains c.
Reference: [4] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1987. </year>
Reference-contexts: A d=(d + 1)-centerpoint is called a centerpoint of P . Every finite point set in IR d has a centerpoint, which can be found by linear programming <ref> [4, Section 4] </ref>. An efficient and practical constant-time algorithm to approximate a centerpoint can be found in [3]; see [8] for an implementation. We now describe a linear partitioning scheme that uses a centerpoint.
Reference: [5] <author> C. Farhat and M. Lesoinne. </author> <title> Automatic partitioning of unstructured meshes for the parallel solution of problems in computational mechanics. </title> <journal> Int. J. Num. Meth. Eng. </journal> <volume> 36 </volume> <month> 745-764 </month> <year> (1993). </year>
Reference-contexts: Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively.
Reference: [6] <author> I. Fried. </author> <title> Condition of finite element matrices generated from nonuniform meshes. </title> <journal> AIAA J. </journal> <volume> 10, </volume> <pages> pp 219-221, </pages> <year> 1972. </year>
Reference-contexts: A common condition for finite element meshes is that the angles of each element should not be too small, or equivalently that the aspect ratio of each element should be bounded <ref> [1, 6] </ref>. Several other shape criteria exist. In some contexts, an upper bound on the largest angle is important.
Reference: [7] <author> J. A. George and J. W. H. Liu. </author> <title> Computer Solution of Large Sparse Positive Definite Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: Edge separators are useful for partitioning meshes and sparse matrices among the processors of a parallel computer, particularly for explicit time-stepping methods and for iterative linear system solvers like conjugate gradients. Vertex separators have been used in direct methods such as nested dissection for solving sparse linear systems <ref> [7, 11] </ref>. Miller, Teng, Thurston, and Vavasis [13] showed that well-shaped meshes in d dimensions 6 have O (n 11=d )-separators. In a sense, this gives a natural extension of the planar separator theorem to higher dimensions.
Reference: [8] <author> J. R. Gilbert, G. L. Miller, and S.-H. Teng. </author> <title> Geometric mesh partitioning: Implementation and experiments. </title> <note> SIAM J. Sci. Comp., to appear 1995. 22 </note>
Reference-contexts: Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. <p> In particular, for each d-dimensional well-shaped mesh of n vertices, the algorithm finds a partition that cuts at most O (n 11=d ) edges. Gilbert, Miller, and Teng <ref> [8] </ref> refined this algorithm and experimented with it; they showed that it gives good partitions in practice for a wide variety of meshes. <p> A d=(d + 1)-centerpoint is called a centerpoint of P . Every finite point set in IR d has a centerpoint, which can be found by linear programming [4, Section 4]. An efficient and practical constant-time algorithm to approximate a centerpoint can be found in [3]; see <ref> [8] </ref> for an implementation. We now describe a linear partitioning scheme that uses a centerpoint. Algorithm Centerpoint-Based Linear Partition Input A well-shaped mesh M = (G; xyz) Output A ffi-balanced hyperplane H 1. Find a ffi-centerpoint c of xyz; 2. Return a random hyperplane H that contains c. <p> Then B j contains vertex k and hence B j must intersect H. This contradiction completes the proof. 2 Another way to get a vertex separator from an edge separator, which is often used in practice <ref> [8] </ref>, is as follows. Given an edge separator, consider the bipartite subgraph of G consisting of the separator edges and their endpoints. <p> The sphere-based geometric partitioner of Miller et al. [13] guarantees that the partition is at least 1 : (d + 1) balanced, that is, the larger of the two submeshes is no more than ((d + 1)=(d+2))n. Gilbert, Miller, and Teng <ref> [8] </ref> describe a heuristic modification to that algorithm that produces a 50:50 balanced sphere partition; however, although its performance is good in practice, the guarantee on cut size is lost. <p> Table 1 describes the meshes we used; see Gilbert et al. <ref> [8] </ref> for more details. <p> only). * Inertial bisection, using a single line or plane normal to the moment of inertia of the point set. * Coordinate bisection, using the best of the d cuts normal to the coordinate axes. * Circle cuts, using the more general (and more expensive) algorithm from Gilbert et al. <ref> [8] </ref>. <p> For example, the Matlab geometric partitioning toolbox of Gilbert and Teng <ref> [8] </ref> uses a hybrid procedure of the sphere based method, a moment of inertia enhanced random balanced linear method [9], and a moment of inertia enhanced random linear bisection. Gilbert et al. showed experimentally that the hybrid procedure gives better performance than the sphere-based method alone.
Reference: [9] <author> K. Gremban, G. L. Miller, and S.-H. Teng. </author> <title> Moment of inertia and graph separators. </title> <booktitle> In Fifth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <address> pp452-461, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. <p> For example, the Matlab geometric partitioning toolbox of Gilbert and Teng [8] uses a hybrid procedure of the sphere based method, a moment of inertia enhanced random balanced linear method <ref> [9] </ref>, and a moment of inertia enhanced random linear bisection. Gilbert et al. showed experimentally that the hybrid procedure gives better performance than the sphere-based method alone.
Reference: [10] <author> M. Heath and P. Raghavan. </author> <title> A cartesian parallel nested dissection algorithm. </title> <note> To appear in SIAM Journal on Matrix Analysis and Applications, </note> <year> 1994. </year>
Reference-contexts: Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. <p> What about line cuts? A line is a degenerate circle, and both the theoretical and practical versions of the Miller et al. algorithm sometimes produce a cutting line. Line cuts are used in practice in coordinate bisection <ref> [10] </ref> and in inertial bisection [21]. However, lines are not always good enough: Teng [19] gave an example of a class of well-shaped meshes for which every line cut has at least (n) edges. In practice, circle cuts seem to be often (but not always) better than line cuts. <p> Instead of choosing a median hyperplane, we can choose the best hyperplane normal to the axis that at least ffi-splits the mesh, for some choice of ffi. We will call this variant balanced coordinate partition. This is essentially the partitioning algorithm used by Heath and Raghavan <ref> [10] </ref>. Coordinate bisection or balanced coordinate partition does not come with a guarantee on the quality of the partition it computes. <p> All the line- and plane-based partitioning methods covered in this paper have "embarrassingly parallel" formulations. (The earliest parallel implementation of a line cut method that we know of is Heath and Raghavan <ref> [10] </ref>.) Some, like coordinate bisection, have been incorporated in standard scientific application packages; all are very easy to implement.
Reference: [11] <author> R. J. Lipton, D. J. Rose, and R. E. Tarjan. </author> <title> Generalized nested dissection. </title> <journal> SIAM J. on Numerical Analysis, </journal> <volume> 16 </volume> <pages> 346-358, </pages> <year> 1979. </year>
Reference-contexts: For example, Lipton and Tarjan's planar separator theorem <ref> [11] </ref> says that every planar graph has an O ( p n )-separator that 2=3-splits it. Edge separators are useful for partitioning meshes and sparse matrices among the processors of a parallel computer, particularly for explicit time-stepping methods and for iterative linear system solvers like conjugate gradients. <p> Edge separators are useful for partitioning meshes and sparse matrices among the processors of a parallel computer, particularly for explicit time-stepping methods and for iterative linear system solvers like conjugate gradients. Vertex separators have been used in direct methods such as nested dissection for solving sparse linear systems <ref> [7, 11] </ref>. Miller, Teng, Thurston, and Vavasis [13] showed that well-shaped meshes in d dimensions 6 have O (n 11=d )-separators. In a sense, this gives a natural extension of the planar separator theorem to higher dimensions.
Reference: [12] <author> G. L. Miller, S.-H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> Automatic mesh partitioning. </title> <editor> In A. George, J. Gilbert, and J. Liu, editors, </editor> <title> Graph Theory and Sparse Matrix Computation, volume 56 of IMA Volumes in Mathematics and its Applications. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The quality of the partition affects the speed of solution; a good partition divides the work up evenly and requires as little communication as possible. Graphs from large-scale problems in scientific computing are often defined geometrically <ref> [12] </ref>. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh [5, 8, 9, 12, 10, 17, 19, 21]. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. <p> Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. <p> These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. Our work is motivated by a theoretical study of Miller, Teng, Thurston, and Vava-sis <ref> [12, 13, 19] </ref>, which provides the mathematical foundation for a method of partitioning a d-dimensional mesh by finding a suitable sphere in d-space, and then dividing the vertices into those inside and outside the sphere. <p> We will analyze this scheme in Section 4 below; first, however, we must describe and analyze a more complicated linear partition scheme. 3.2 Linear Partition Around a Centerpoint Our first linear partitioning scheme is motivated by the sphere separator construction of Miller et al. <ref> [12] </ref>. A centerpoint, which is a sort of generalized median, plays a key role in that construction; we now review its definition. Suppose P is a finite set of points in IR d .
Reference: [13] <author> G. L. Miller, S.-H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> Finite element meshes and geometric separators. </title> <journal> SIAM J. Scientific Computing, </journal> <note> to appear, </note> <year> 1995. </year>
Reference-contexts: These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. Our work is motivated by a theoretical study of Miller, Teng, Thurston, and Vava-sis <ref> [12, 13, 19] </ref>, which provides the mathematical foundation for a method of partitioning a d-dimensional mesh by finding a suitable sphere in d-space, and then dividing the vertices into those inside and outside the sphere. <p> It has been shown that finite element meshes with bounded aspect ratio and Delaunay triangulations with bounded radius aspect ratio are well shaped by this definition <ref> [13, 14] </ref>. A well-shaped mesh can contain both regions of high refinement (or closely spaced points) and low refinement (or widely spaced points); its trestle can be arbitrarily large. <p> Vertex separators have been used in direct methods such as nested dissection for solving sparse linear systems [7, 11]. Miller, Teng, Thurston, and Vavasis <ref> [13] </ref> showed that well-shaped meshes in d dimensions 6 have O (n 11=d )-separators. In a sense, this gives a natural extension of the planar separator theorem to higher dimensions. Theorem 2.1 (Sphere Separator Theorem) Let M be an ff-well-shaped mesh in d dimensions. <p> Therefore Area () = O (ff d1 n 1=d ): Lemma 4.2 is now a direct consequence of the following theorem of Miller et al. <ref> [13] </ref>. We will be more specific after stating the theorem. Theorem 4.4 Let = fC 1 ; : : : ; C n g be a set of caps on a unit sphere S in IR d+1 . Let A d be the surface area of the unit sphere. <p> However, this is unattractive in the geometric setting because the final separator is induced by O (log n) different cuts. The sphere-based geometric partitioner of Miller et al. <ref> [13] </ref> guarantees that the partition is at least 1 : (d + 1) balanced, that is, the larger of the two submeshes is no more than ((d + 1)=(d+2))n.
Reference: [14] <author> G. L. Miller, D. Talmor, S.-H. Teng, and N. Walkington. </author> <title> Delaunay based numerical method for three dimensions: generation, formulation, and partition. </title> <booktitle> In the Proceedings of the 27th Annual ACM Symposium on Theory of Computing, ACM, </booktitle> <year> 1995 </year>
Reference-contexts: Several other shape criteria exist. In some contexts, an upper bound on the largest angle is important. Using Voronoi diagrams in the control volume method <ref> [14] </ref>, the ratio of the radius of the circumsphere to the shortest edge for and an element in the dual Delaunay triangulation must be bounded. (The latter condition is called bounded radius aspect ratio.) For our purposes, we will consider a mesh well-shaped if it satisfies a density condition as defined <p> It has been shown that finite element meshes with bounded aspect ratio and Delaunay triangulations with bounded radius aspect ratio are well shaped by this definition <ref> [13, 14] </ref>. A well-shaped mesh can contain both regions of high refinement (or closely spaced points) and low refinement (or widely spaced points); its trestle can be arbitrarily large.
Reference: [15] <author> G. L. Miller and S. A. Vavasis. </author> <title> Density graphs and separators. </title> <booktitle> In Second Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 331-336, </pages> <address> San Francisco, </address> <month> January </month> <year> 1991. </year> <pages> ACM-SIAM. </pages>
Reference-contexts: radius of the circumsphere to the shortest edge for and an element in the dual Delaunay triangulation must be bounded. (The latter condition is called bounded radius aspect ratio.) For our purposes, we will consider a mesh well-shaped if it satisfies a density condition as defined by Miller and Vavasis <ref> [15] </ref>. Meshes with bounded element aspect ratio satisfy a density condition. Let G be a graph and let xyz be an embedding of its vertices in IR d . We say xyz is an embedding of density ff if the following inequality holds for all vertices v in G.
Reference: [16] <author> S. A. Mitchell and S. A. Vavasis. </author> <title> Quality mesh generation in three dimensions. </title> <booktitle> Proc. ACM Symposium on Computational Geometry, </booktitle> <pages> pp 212-221, </pages> <year> 1992. </year>
Reference: [17] <author> H. D. Simon. </author> <title> Partitioning of unstructured problems for parallel processing. </title> <booktitle> Computing Systems in Engineering </booktitle> 2(2/3):135-148, 1991. 
Reference-contexts: Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively.
Reference: [18] <author> H. D. Simon and S.-H. Teng. </author> <title> How good is recursive bisection? SIAM J. </title> <journal> Scientific Computing, </journal> <note> to appear, </note> <year> 1995. </year>
Reference-contexts: However, since grading often changes fairly slowly across the mesh, after a few levels of partitioning the remaining fragments have much smaller trestles and the line cuts become more competitive. Our two-way partitioning bound can be extended to multi-way partitioning when the line and plane schemes are called recursively <ref> [18] </ref>.
Reference: [19] <author> S.-H. Teng. </author> <title> Points, Spheres, and Separators: a unified geometric approach to graph partitioning. </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, CMU-CS-91-184, </institution> <year> 1991 </year>
Reference-contexts: Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. <p> These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. Our work is motivated by a theoretical study of Miller, Teng, Thurston, and Vava-sis <ref> [12, 13, 19] </ref>, which provides the mathematical foundation for a method of partitioning a d-dimensional mesh by finding a suitable sphere in d-space, and then dividing the vertices into those inside and outside the sphere. <p> Line cuts are used in practice in coordinate bisection [10] and in inertial bisection [21]. However, lines are not always good enough: Teng <ref> [19] </ref> gave an example of a class of well-shaped meshes for which every line cut has at least (n) edges. In practice, circle cuts seem to be often (but not always) better than line cuts.
Reference: [20] <author> S. A. Vavasis. </author> <title> Automatic domain partitioning in three dimensions. </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> 12 </volume> <pages> 950-970, </pages> <year> 1991. </year> <month> 23 </month>
Reference-contexts: Therefore, the average separator size by a random hyperplane containing c is bounded by X ffn i = O (ff (n=) ) Our decomposition is based on local graphs, first introduced by Vavasis <ref> [20] </ref>. Define the smallest feature of a mesh M to be the shortest pairwise Euclidean distance between its vertices. A mesh M is an ff-local graph if the ratio of the longest edge to the smallest 10 feature of M is bounded by ff.
Reference: [21] <author> R. D. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations Concurrency: </title> <journal> Practice and Experience, </journal> <volume> 3(5): </volume> <pages> 457-481, </pages> <year> 1991. </year> <month> 24 </month>
Reference-contexts: Graphs from large-scale problems in scientific computing are often defined geometrically [12]. They are meshes of elements in d-dimensional Euclidean space (typically d = 2 or 3). Several partitioning algorithms exploit the geometric structure of a mesh <ref> [5, 8, 9, 12, 10, 17, 19, 21] </ref>. This paper presents theoretical, algorithmic, and experimental results on a family of geometric partitioning methods. These methods partition a d-dimensional mesh by a suitable hyperplane in d-space that divides the vertices into those above and below the hyperplane, respectively. <p> What about line cuts? A line is a degenerate circle, and both the theoretical and practical versions of the Miller et al. algorithm sometimes produce a cutting line. Line cuts are used in practice in coordinate bisection [10] and in inertial bisection <ref> [21] </ref>. However, lines are not always good enough: Teng [19] gave an example of a class of well-shaped meshes for which every line cut has at least (n) edges. In practice, circle cuts seem to be often (but not always) better than line cuts.
References-found: 21

