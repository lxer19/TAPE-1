URL: http://ftp.eecs.umich.edu/people/michaelm/osdi96.ps
Refering-URL: http://ftp.eecs.umich.edu/people/michaelm/
Root-URL: http://www.eecs.umich.edu
Title: The Prism file system: Getting more information into file names  
Author: Michael McClennen and Stuart Sechrest 
Affiliation: Software Systems Research Laboratory the University of Michigan  
Date: May 1, 1996 1  
Note: The Prism file system  
Abstract: Hierarchical naming, while deeply embedded in our conception of file systems, is a rather weak tool for storing information about files and their relationships. A consequence is that users of conventional file systems frequently have trouble locating the files they need. Under the Prism file system, file names can contain both components that represent hierarchical directories and components that represent auxiliary descriptive attributes. The latter can be specified in any order, and can be left out at will. This allows files to be characterized more extensively, and lets users choose among multiple organizational structures for their stored information. Because the system operates through the standard interface, it is compatible with existing programs and computing environments. 
Abstract-found: 1
Intro-found: 1
Reference: [GJS*91] <author> D. Gifford, P. Jouvelot, M. Sheldon., and J. OToole. </author> <title> Semantic File Systems. </title> <booktitle> In Proc. 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 16-25, </pages> <address> Pacific Grove CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: These systems have focused on different kinds of metadata and on different situations of use. Our own goal is two-fold: to develop an abstract framework by which to understand the problem, and to build a system that focuses on user interaction. Gifford et. al. <ref> [GJS*91] </ref> provide the most general treatment of this problem up to now. Their Semantic File System (SFS) is an experiment in the characterization of files based upon their contents. Under this system, a database is used to associate arbitrary collections of attribute/value pairs with files.
Reference: [Hen90] <author> D. Hendricks, </author> <title> A Filesystem for Software Development, </title> <booktitle> in Proc. USENIX Summer Conference, </booktitle> <pages> pp. 333-40, </pages> <address> Anaheim CA, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: No convenient mechanism is provided for users to add their own attributes, and for this reason the SFS is not well suited as a base on which to develop interactive tools. Other researchers have extended file system semantics in different ways. For example, ([KK90], <ref> [Hen90] </ref>, and [PPTT90]) all describe systems that include viewpathing or union directories . These terms refer to the construction of chains of directories in such a way that files from subsequent directories show through to the top one.
Reference: [KK90] <author> D. Korn and E. Krell. </author> <title> A New Dimension for the Unix File System. </title> <journal> SoftwarePractice and Experience 20(S1), </journal> <pages> pp. 19-34, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This kind work provides valuable insight into the ways in which file system The Prism file system May 1, 1996 4 semantics can be extended, and could be easily integrated with Prism. Similarly, <ref> [KK90] </ref> also introduce file versioning as an augmentation of existing semantics. Note that they took the same implementation approach as we have, putting their system into the kernel and making it available through the standard system call interface.
Reference: [Kle86] <author> S. Kleiman, Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX, </title> <booktitle> in Proc. USENIX Summer Conference, </booktitle> <pages> pp. 238-24, </pages> <address> Atlanta GA, </address> <month> June </month> <year> 1986. </year>
Reference-contexts: It also provides a framework within which other information management tools can be integrated with the file system. Examples range from configuration-management systems to WWW servers to content-based indexers for text and images. The Prism system works through the vnode interface <ref> [Kle86] </ref>, and should be easy to port to any operating system that allows modular file systems through this interface or an analog. Application programs can access most of the functions Prism through the standard system call interface, so that existing programs continue to work with no changes. <p> Included with Prism is a library which can be linked with application programs to enable them to access its full functionality. Prism takes advantage of the exibility provided by most modern operating systems in allowing multiple file system types. As described in <ref> [Kle86] </ref>, the Vnode interface of SunOS (which has made its way into most other versions of Unix) represents each file system type by a table of function pointers and a data structure known as a VFS (Virtual File System).
Reference: [Mog86] <author> J. C. Mogul, </author> <title> Representing Information about Files. </title> <type> Technical report STAN-CS-86-1103, </type> <institution> Stanford University, </institution> <month> March, </month> <year> 1986. </year>
Reference-contexts: Other examples of systems that demonstrate novel ways of organizing file metadata are the Inversion File System [Ols93], which by using a relational database to support a file system allows general queries on file metadata, and the Property-List Directory System <ref> [Mog86] </ref> which applies a global set of attribute names to a hierarchical directory structure. 2.3 Our view of the problem Just as with any other information system, the basic goal of a file system with respect to names is to facilitate two tasks: the characterization of files by storing descriptive information
Reference: [ND65] <author> P. G. Neumann and R. C. Daley. </author> <title> A General-Purpose File System for Secondary Storage. </title> <booktitle> In AFIPS Fall Joint Computer Conference, </booktitle> <pages> pp. 213-229, </pages> <year> 1965. </year>
Reference-contexts: Hierarchical naming was introduced into file systems thirty years ago <ref> [ND65] </ref> and was part of the design of Unix from its inception. It is therefore somewhat surprising how easy it is to add nonhierarchical elements to the conventional file naming scheme. Most applications are dependent on only the syntactical conventions of file naming.
Reference: [Ols93] <author> M. Olson, </author> <title> The Design and Implementation of the Inversion File System, </title> <booktitle> in Proc. USENIX Winter Conference, </booktitle> <pages> pp. 1-14, </pages> <address> San Diego CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Note that they took the same implementation approach as we have, putting their system into the kernel and making it available through the standard system call interface. Other examples of systems that demonstrate novel ways of organizing file metadata are the Inversion File System <ref> [Ols93] </ref>, which by using a relational database to support a file system allows general queries on file metadata, and the Property-List Directory System [Mog86] which applies a global set of attribute names to a hierarchical directory structure. 2.3 Our view of the problem Just as with any other information system, the
Reference: [PPTT90] <author> R. Pike, D. Presotto, K. Thompson, and H. Trickey. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> In Proc. </booktitle> <address> UK UUG, </address> <year> 1990 </year>
Reference-contexts: No convenient mechanism is provided for users to add their own attributes, and for this reason the SFS is not well suited as a base on which to develop interactive tools. Other researchers have extended file system semantics in different ways. For example, ([KK90], [Hen90], and <ref> [PPTT90] </ref>) all describe systems that include viewpathing or union directories . These terms refer to the construction of chains of directories in such a way that files from subsequent directories show through to the top one.
References-found: 8

