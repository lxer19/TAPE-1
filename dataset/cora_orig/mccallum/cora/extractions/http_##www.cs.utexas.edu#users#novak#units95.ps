URL: http://www.cs.utexas.edu/users/novak/units95.ps
Refering-URL: http://www.cs.utexas.edu/users/novak/units95.html
Root-URL: 
Title: Conversion of Units of Measurement  
Author: Gordon S. Novak Jr. 
Keyword: Index Terms unit conversion, unit of measurement, dimensional analysis, data type.  
Note: This article appears in IEEE Transactions on Software Engineering, vol. 21, no. 8, 1995, pp.  
Date: August 1, 1997  651-661.  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: Copyright c fl1995 by IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE. Abstract Algorithms are presented for converting units of measurement from a given form to a desired form. The algorithms are fast, are able to convert any combination of units to any equivalent combination, and perform dimensional analysis to ensure that the conversion is legitimate. Algorithms are also presented for simplification of symbolic combinations of units. Application of these techniques to perform automatic unit conversion and unit checking in a programming language is described. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abramowitz and I. A. Segun, </author> <title> Handbook of Mathematical Functions, </title> <institution> National Bureau of Standards, </institution> <address> 1964; New York: </address> <publisher> Dover, </publisher> <year> 1968. </year>
Reference-contexts: our 1 Treating abbreviations as synonyms, rather than giving them a conversion factor and dimension and treating them as units, avoids the possibility that slightly different numeric factors might be specified for the same unit under different names. 4 standard the SI (Systeme International d'Unites) system of units [18] [14] <ref> [1] </ref>; a different standard system could be chosen without affecting the algorithms described here. Thus, the conversion factor for meter is 1.0, while the conversion factor for foot is 0.3048 since 1 f oot = 0:3048 meter. The conversion factor for a numeric constant is just the constant itself. <p> The dimension of a constant is 0; this is also the case for units such as radian or nano 2 . The dimension of a base quantity is given by the corresponding value in the vector dimvals; for example, the dimension of time is dimvals <ref> [1] </ref> or 20. The dimension integer of a product of units is the sum of their dimension integers (using ordinary 32-bit integer arithmetic), and the dimension of a quotient of units is the difference of their dimensions.
Reference: [2] <author> R. A. Ackley, </author> <title> Physical Measurements and the International (SI) System of Units, </title> <address> San Diego, CA: </address> <publisher> Technical Publications, </publisher> <year> 1970. </year>
Reference-contexts: Failure to represent units explicitly within program code is a serious shortcoming in specification of the program, since later modification of the program might be performed under the assumption of the wrong units. Hundreds of units of measurement are in general use; entire books <ref> [2] </ref> [13] [25] [27] [29] are devoted to tables of unit conversions. This paper presents methods for symbolic representation of units of measurement. Efficient algorithms are presented that can convert any combination of units to any equivalent combination, while verifying the legitimacy of the conversion by dimensional analysis.
Reference: [3] <author> A. Aho, R. Sethi, and J. Ullman, </author> <booktitle> Compilers: Principles, Techniques, and Tools, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: The units used for intermediate results within an arithmetic expression may be somewhat unusual, but will always be converted to a programmer-specified unit upon assignment to a variable. Conversion of units may generate extra multiplication operations; however, if the compiler performs constant folding <ref> [3] </ref>, these operations and their conversion factors can often be combined with other constants. Human programmers usually write programs in such a way that intermediate results have reasonable units and reasonable numeric values.
Reference: [4] <institution> American National Standard for Metric Practice, ANSI/IEEE Standard 268-1992, </institution> <year> 1992. </year>
Reference-contexts: Applications of these techniques in programming languages and in data conversion are discussed. 2 Related Work 2.1 Units and Unit Conversion [18] and [14] describe the Systeme International or International System of Units, abbreviated SI; these are the definitive references on SI. <ref> [4] </ref> provides style guidelines for use of SI units and tables of conversion factors. Several books provide conversion factors and algorithms for use in unit conversion.
Reference: [5] <institution> IEEE Standard C/ATLAS, IEEE Standard 716-1982. </institution>
Reference-contexts: Their system can convert units, presumably by a process of logical deduction that would be significantly slower than the methods we describe. 2.2 Units in Programming Languages Units of measurement are allowed in the ATLAS language <ref> [5] </ref>, although ATLAS allows only a limited set of units and a limited language for constructing combinations of units. Cunis [8] describes Lisp programs for converting units. These programs combine units with numeric measurements at runtime and perform runtime conversion. <p> Some commonly used procedures have implicit requirements on the units of their arguments; for example, the system sin function may require that its argument be expressed in floating-point radians. Karr and Loveman [15] advocated the inclusion of units in programming languages; although the ATLAS language <ref> [5] </ref> incorporates units, to our knowledge no widely-used programming language does so. We have implemented the use of units in the GLISP language.
Reference: [6] <author> P. W. Bridgman, </author> <title> Dimensional Analysis, </title> <publisher> Yale Univ. Press, </publisher> <year> 1922. </year>
Reference-contexts: Correctness of unit conversion is verified by the long-established technique of dimensional analysis <ref> [6] </ref>: the source and goal units must have the same dimensions. Formally, we define a dimension as an 8-vector of integral powers of eight base quantities.
Reference: [7] <author> R.-J. Chang, </author> <title> "Cliche-Based Modeling for Expert Problem-Solving Systems", </title> <type> Ph.D. </type> <institution> diss., C.S. Dept., Univ. Texas at Austin, </institution> <year> 1992. </year>
Reference-contexts: The kelvin and the degree Rankine are linearly related and can be converted by our algorithms. Ruey-Juin Chang implemented an Analyst's Workbench <ref> [7] </ref> to aid in making analytical models. She included substance as an additional part of a quantity, along with numeric quantity and unit; for example, "10 gallons of gasoline" has gasoline as the substance.
Reference: [8] <author> R. Cunis, </author> <title> "A Package for Handling Units of Measure in Lisp", </title> <journal> ACM Lisp Pointers, </journal> <volume> vol. 5, no. 2, </volume> <year> 1992. </year>
Reference-contexts: Cunis <ref> [8] </ref> describes Lisp programs for converting units. These programs combine units with numeric measurements at runtime and perform runtime conversion. While this is consistent with the Lisp tradition of runtime type checking, it does not allow detection of conversion errors at compile time. <p> This is such an unlikely occurrence that we consider the use of the more efficient integer encoding to be justified. Note, however, that 8-vectors could be used for dimension checking instead if desired. Cunis <ref> [8] </ref> describes an alternative representation of dimensions. He represents dimensions as a rational number in Lisp, i.e., as a ratio of integers that represent the positive and negative powers of dimensions.
Reference: [9] <author> T. R. Gruber and G. R. Olsen, </author> <title> "An Ontology for Engineering Mathematics", </title> <booktitle> Proc. Fourth Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Schulz [26] describes COMET, an APL program for converting measurements from the English system used in the U.S. to the metric system. COMET focuses on conversion of machine part specifications that include allowable tolerances. Gruber and Olsen <ref> [9] </ref> describe an ontology for engineering mathematics, including representation of units of measurement as an Abelian group.
Reference: [10] <author> N. Gehani, </author> <title> "Units of Measure as a Data Attribute", </title> <journal> Computing Languages vol. </journal> <volume> 2, no. 3, </volume> <pages> pp. 93-111, </pages> <year> 1977. </year> <month> 24 </month>
Reference-contexts: Cunis [8] describes Lisp programs for converting units. These programs combine units with numeric measurements at runtime and perform runtime conversion. While this is consistent with the Lisp tradition of runtime type checking, it does not allow detection of conversion errors at compile time. Gehani <ref> [10] </ref> argues in favor of compile-time checking. Hilfinger [12] describes methods for including units with numeric data using Ada packages and discusses modifications of Ada compilers that would be required to make use of these packages efficient and allow compile-time checking of correctness of conversions.
Reference: [11] <author> M. Herlihy and B. Liskov, </author> <title> "A Value Transmission Method for Abstract Data Types", </title> <journal> ACM Trans. Programming Languages Syst., </journal> <volume> vol. 4, no. 4, </volume> <pages> pp. 527-551, </pages> <month> Oct. </month> <year> 1982. </year>
Reference-contexts: IDL (Interface Description Language) [16] allows exchange of large structured data, possibly including structure sharing, between separately written components of a large software system such as a compiler. Use of IDL requires that the user write precise specifications of the source and target data structures. Herlihy and Liskov <ref> [11] </ref> describe a method for transmission of structured data over a network, with a possibly different data representation at the destination.
Reference: [12] <author> P. N. Hilfinger, </author> <title> "An Ada Package for Dimensional Analysis". </title> <journal> ACM Trans. Programming Languages Syst., </journal> <volume> vol. 10, no. 2, </volume> <pages> pp. 189-203, </pages> <year> 1988. </year>
Reference-contexts: These programs combine units with numeric measurements at runtime and perform runtime conversion. While this is consistent with the Lisp tradition of runtime type checking, it does not allow detection of conversion errors at compile time. Gehani [10] argues in favor of compile-time checking. Hilfinger <ref> [12] </ref> describes methods for including units with numeric data using Ada packages and discusses modifications of Ada compilers that would be required to make use of these packages efficient and allow compile-time checking of correctness of conversions.
Reference: [13] <author> A. L. Horvath, </author> <title> Conversion Tables of Units in Science and Engineering, </title> <address> New York: </address> <publisher> Elsevier, </publisher> <year> 1986. </year>
Reference-contexts: Failure to represent units explicitly within program code is a serious shortcoming in specification of the program, since later modification of the program might be performed under the assumption of the wrong units. Hundreds of units of measurement are in general use; entire books [2] <ref> [13] </ref> [25] [27] [29] are devoted to tables of unit conversions. This paper presents methods for symbolic representation of units of measurement. Efficient algorithms are presented that can convert any combination of units to any equivalent combination, while verifying the legitimacy of the conversion by dimensional analysis. <p> Although one might think that unit conversion is easy and "everyone knows how to do it", the number of books and the variety of methodologies and algorithms they present suggest otherwise. Horvath <ref> [13] </ref> has an especially complete coverage of different units, as well as an extensive bibliography.
Reference: [14] <author> Quantities and Units, </author> <title> ISO Standards Handbook, 3rd ed., Geneva, Switzerland: International Organization for Standardization, </title> <year> 1993. </year>
Reference-contexts: Algorithms are also presented for simplification of combinations of symbolic units. Applications of these techniques in programming languages and in data conversion are discussed. 2 Related Work 2.1 Units and Unit Conversion [18] and <ref> [14] </ref> describe the Systeme International or International System of Units, abbreviated SI; these are the definitive references on SI. [4] provides style guidelines for use of SI units and tables of conversion factors. Several books provide conversion factors and algorithms for use in unit conversion. <p> as our 1 Treating abbreviations as synonyms, rather than giving them a conversion factor and dimension and treating them as units, avoids the possibility that slightly different numeric factors might be specified for the same unit under different names. 4 standard the SI (Systeme International d'Unites) system of units [18] <ref> [14] </ref> [1]; a different standard system could be chosen without affecting the algorithms described here. Thus, the conversion factor for meter is 1.0, while the conversion factor for foot is 0.3048 since 1 f oot = 0:3048 meter. The conversion factor for a numeric constant is just the constant itself. <p> Formally, we define a dimension as an 8-vector of integral powers of eight base quantities. The base quantities are shown in Fig. 3 together with the base unit that is used for each quantity in the SI system [18] <ref> [14] </ref>. We have added money, which is not part of the SI system, as a dimension.
Reference: [15] <author> M. Karr and D. B. Loveman, </author> <title> "Incorporation of Units into Programming Languages", </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, no. 5, </volume> <pages> pp. 385-391, </pages> <month> May </month> <year> 1978. </year>
Reference-contexts: Although this 2 technique presents many conversions together in a compact structure, its use involves many steps and thus many opportunities for error and loss of accuracy. Karr and Loveman <ref> [15] </ref> outline a computational method for finding conversion factors. Their method involves writing dimensional quantities and conversion factors in terms of logarithms, making a matrix of the equations in logarithmic form, and solving the matrix by linear algebra. <p> Gehani [10] argues in favor of compile-time checking. Hilfinger [12] describes methods for including units with numeric data using Ada packages and discusses modifications of Ada compilers that would be required to make use of these packages efficient and allow compile-time checking of correctness of conversions. Karr and Loveman <ref> [15] </ref> propose incorporation of units into programming languages; they discuss methods of unit conversion, dimensional analysis, and language syntax issues. <p> We believe that the unit conversion algorithms described in the present paper are simpler: our methods require only one scalar operation per unit for conversion and one scalar operation per unit for checking, whereas the methods of <ref> [15] </ref> are based on manipulation of matrices that could be large. 2.3 Data Translation Reusing an existing procedure may require that data be translated into the form expected by that procedure; we describe in [21] some methods for semi-automatic data translation. <p> This is unfortunate, since use of incorrect units must be considered to be a type error. Some commonly used procedures have implicit requirements on the units of their arguments; for example, the system sin function may require that its argument be expressed in floating-point radians. Karr and Loveman <ref> [15] </ref> advocated the inclusion of units in programming languages; although the ATLAS language [5] incorporates units, to our knowledge no widely-used programming language does so. We have implemented the use of units in the GLISP language. <p> GLISP is described only briefly here; for more detail, see [21] and [19]. In the sections below, we describe both the language features needed to include units in a programming language and the compiler operations necessary to perform unit checking and conversion. Karr and Loveman <ref> [15] </ref> suggested that units be implemented as reserved words that could be used as multipliers in arithmetic expressions. Instead, we have implemented units as part of data types. <p> These algorithms make it feasible to implement essentially all known units of measurement, so that users may use any units they find convenient. We agree with Karr and Loveman <ref> [15] </ref> that scientific programming languages should support the use of units; we hope that presentation of these algorithms will encourage such a trend. The ARPA Knowledge-Sharing Project [17] focuses on combining data from distributed databases and knowledge bases.
Reference: [16] <author> D. Lamb, </author> <title> "IDL: Sharing Intermediate Representations", </title> <journal> ACM Trans. Programming Languages Syst. </journal> <volume> vol. 9, no. 3, </volume> <pages> pp. 267-318, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: The unit conversion methods of this paper can be combined with the 3 methods of [21] to accomplish this. Unit conversion may also be required in preparing data for transmission to a remote site over a network, or for use in a remote procedure call. IDL (Interface Description Language) <ref> [16] </ref> allows exchange of large structured data, possibly including structure sharing, between separately written components of a large software system such as a compiler. Use of IDL requires that the user write precise specifications of the source and target data structures.
Reference: [17] <author> R. Neches et al., </author> <title> "Enabling Technology for Knowledge Sharing", </title> <journal> AI Magazine, </journal> <volume> vol. 12, no. 3, </volume> <pages> pp. 36-56, </pages> <month> Fall </month> <year> 1991. </year> <title> [18] "The International System of Units (SI)", </title> <institution> National Inst. Standards Tech. </institution> <note> Special Publication 330, </note> <institution> Washington, DC: Superintendent of Documents, U.S. Govt. Printing Office, </institution> <year> 1991. </year>
Reference-contexts: We agree with Karr and Loveman [15] that scientific programming languages should support the use of units; we hope that presentation of these algorithms will encourage such a trend. The ARPA Knowledge-Sharing Project <ref> [17] </ref> focuses on combining data from distributed databases and knowledge bases. The algorithms described in this paper can be used for conversion when these databases use different units.
Reference: [19] <author> G. Novak, </author> <title> "GLISP: A LISP-Based Programming System With Data Abstraction", </title> <journal> AI Magazine, </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 37-47, </pages> <month> Fall </month> <year> 1983. </year>
Reference-contexts: Karr and Loveman [15] advocated the inclusion of units in programming languages; although the ATLAS language [5] incorporates units, to our knowledge no widely-used programming language does so. We have implemented the use of units in the GLISP language. GLISP ("Generic Lisp") <ref> [19, 20] </ref> is a high-level language with abstract data types that is compiled into Lisp (or into C by an additional translation step); the GLISP compiler is implemented in Common Lisp [28]. GLISP has a data description language that can describe Lisp data structures or data structures in other languages. <p> GLISP has a data description language that can describe Lisp data structures or data structures in other languages. GLISP is described only briefly here; for more detail, see [21] and <ref> [19] </ref>. In the sections below, we describe both the language features needed to include units in a programming language and the compiler operations necessary to perform unit checking and conversion. <p> When the arguments of a generic procedure include units, automatic checking and conversion of units are essential for correct reuse. In the GLISP language <ref> [19] </ref> [21], it is not necessary to declare the type of every variable.
Reference: [20] <author> G. Novak, </author> <title> "GLISP User's Manual," </title> <type> Tech. Report STAN-CS-82-895, C.S. </type> <institution> Dept., Stanford Univ., 1982; TR-83-25, A.I. Lab, C.S. Dept., Univ. of Texas at Austin. </institution>
Reference-contexts: Karr and Loveman [15] advocated the inclusion of units in programming languages; although the ATLAS language [5] incorporates units, to our knowledge no widely-used programming language does so. We have implemented the use of units in the GLISP language. GLISP ("Generic Lisp") <ref> [19, 20] </ref> is a high-level language with abstract data types that is compiled into Lisp (or into C by an additional translation step); the GLISP compiler is implemented in Common Lisp [28]. GLISP has a data description language that can describe Lisp data structures or data structures in other languages.
Reference: [21] <author> G. Novak, F. Hill, M. Wan, and B. Sayrs, </author> <title> "Negotiated Interfaces for Software Reuse", </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 18, no. 7, </volume> <pages> pp. 646-653, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: per unit for conversion and one scalar operation per unit for checking, whereas the methods of [15] are based on manipulation of matrices that could be large. 2.3 Data Translation Reusing an existing procedure may require that data be translated into the form expected by that procedure; we describe in <ref> [21] </ref> some methods for semi-automatic data translation. If a procedure requires that its data be presented in particular units, then unit conversion may also be required. The unit conversion methods of this paper can be combined with the 3 methods of [21] to accomplish this. <p> the form expected by that procedure; we describe in <ref> [21] </ref> some methods for semi-automatic data translation. If a procedure requires that its data be presented in particular units, then unit conversion may also be required. The unit conversion methods of this paper can be combined with the 3 methods of [21] to accomplish this. Unit conversion may also be required in preparing data for transmission to a remote site over a network, or for use in a remote procedure call. <p> GLISP has a data description language that can describe Lisp data structures or data structures in other languages. GLISP is described only briefly here; for more detail, see <ref> [21] </ref> and [19]. In the sections below, we describe both the language features needed to include units in a programming language and the compiler operations necessary to perform unit checking and conversion. <p> When the arguments of a generic procedure include units, automatic checking and conversion of units are essential for correct reuse. In the GLISP language [19] <ref> [21] </ref>, it is not necessary to declare the type of every variable.
Reference: [22] <author> G. Novak, </author> <title> "Software Reuse through View Type Clusters", </title> <booktitle> Proc. 7th Knowledge-Based Software Eng. Conf., </booktitle> <publisher> IEEE Press, </publisher> <month> Sept. </month> <year> 1992, </year> <pages> pp. 70-79. </pages>
Reference-contexts: by collecting every other member of the input lists (checking to make sure the alternate member is identical) and making a new unit from these lists and the square root of the numeric factor. 19 6.5 Units and Generic Procedures We have done research on the reuse of generic procedures <ref> [22] </ref> [23]; a generic procedure is one that can be used for a variety of data types. When the arguments of a generic procedure include units, automatic checking and conversion of units are essential for correct reuse.
Reference: [23] <author> G. Novak, </author> <title> "Software Reuse by Specialization of Generic Procedures through Views", </title> <note> submitted for publication, </note> <year> 1994. </year>
Reference-contexts: collecting every other member of the input lists (checking to make sure the alternate member is identical) and making a new unit from these lists and the square root of the numeric factor. 19 6.5 Units and Generic Procedures We have done research on the reuse of generic procedures [22] <ref> [23] </ref>; a generic procedure is one that can be used for a variety of data types. When the arguments of a generic procedure include units, automatic checking and conversion of units are essential for correct reuse.
Reference: [24] <author> G. Novak, </author> <title> "Generating Programs from Connections of Physical Models", </title> <booktitle> Proc. 10th Conf. on Artificial Intelligence for Applications, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1994, </year> <pages> pp. 224-230. </pages>
Reference-contexts: Because the types of local variables are specified indirectly, a single generic procedure can be specialized for a variety of input types. This is especially useful in the case of types that include units. We have developed a system, called VIP <ref> [24] </ref> (for View Interactive Programming) that generates programs from graphical connections of physical and mathematical models. A 20 program is generated from equations associated with the physical models.
Reference: [25] <author> F. D. Rossini, </author> <title> Fundamental Measures and Constants for Science and Technology, </title> <address> Cleveland, OH: </address> <publisher> CRC Press, </publisher> <year> 1974. </year> <month> 25 </month>
Reference-contexts: Failure to represent units explicitly within program code is a serious shortcoming in specification of the program, since later modification of the program might be performed under the assumption of the wrong units. Hundreds of units of measurement are in general use; entire books [2] [13] <ref> [25] </ref> [27] [29] are devoted to tables of unit conversions. This paper presents methods for symbolic representation of units of measurement. Efficient algorithms are presented that can convert any combination of units to any equivalent combination, while verifying the legitimacy of the conversion by dimensional analysis.
Reference: [26] <author> C. A. Schulz, </author> <title> "Writing Applications for Uniform Operation on a Mainframe or PC: A Metric Conversion Program", </title> <journal> APL Quote Quad, </journal> <volume> vol. 20, no. 4, </volume> <pages> pp. 348-361, </pages> <publisher> ACM, </publisher> <month> July </month> <year> 1990. </year>
Reference-contexts: Since the size of the matrix is the number of units involved in the conversion multiplied by the number of units the system knows about, both the matrix and the time required to solve it could quickly become large. Schulz <ref> [26] </ref> describes COMET, an APL program for converting measurements from the English system used in the U.S. to the metric system. COMET focuses on conversion of machine part specifications that include allowable tolerances.
Reference: [27] <author> W. J. Semioli and P. B. Schubert,, </author> <title> Conversion Tables for SI Metrication, </title> <address> New York: </address> <publisher> Industrial Press, </publisher> <year> 1974. </year>
Reference-contexts: Failure to represent units explicitly within program code is a serious shortcoming in specification of the program, since later modification of the program might be performed under the assumption of the wrong units. Hundreds of units of measurement are in general use; entire books [2] [13] [25] <ref> [27] </ref> [29] are devoted to tables of unit conversions. This paper presents methods for symbolic representation of units of measurement. Efficient algorithms are presented that can convert any combination of units to any equivalent combination, while verifying the legitimacy of the conversion by dimensional analysis. <p> The tables in this book give conversion factors from a given unit to a single SI unit; this is similar to the approach taken in the present paper, although Horvath does not present conversion algorithms per se. Semioli and Schubert <ref> [27] </ref> present voluminous tables that combine multiplication of the conversion factor by the quantity of the source unit to be converted. They also present somewhat complex methods for obtaining additional accuracy and shifting the decimal place of the result.
Reference: [28] <author> Steele, G., </author> <title> Common Lisp, </title> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference-contexts: We have implemented the use of units in the GLISP language. GLISP ("Generic Lisp") [19, 20] is a high-level language with abstract data types that is compiled into Lisp (or into C by an additional translation step); the GLISP compiler is implemented in Common Lisp <ref> [28] </ref>. GLISP has a data description language that can describe Lisp data structures or data structures in other languages. GLISP is described only briefly here; for more detail, see [21] and [19].
Reference: [29] <author> T. Wildi, </author> <title> Metric Units and Conversion Charts: A Metrication Handbook for Engineers, </title> <editor> Technologists, and Scientists, 2nd ed., </editor> <address> Piscataway, NJ: </address> <publisher> IEEE Press, </publisher> <year> 1995. </year> <month> 26 </month>
Reference-contexts: Failure to represent units explicitly within program code is a serious shortcoming in specification of the program, since later modification of the program might be performed under the assumption of the wrong units. Hundreds of units of measurement are in general use; entire books [2] [13] [25] [27] <ref> [29] </ref> are devoted to tables of unit conversions. This paper presents methods for symbolic representation of units of measurement. Efficient algorithms are presented that can convert any combination of units to any equivalent combination, while verifying the legitimacy of the conversion by dimensional analysis. <p> They also present somewhat complex methods for obtaining additional accuracy and shifting the decimal place of the result. This book has the flavor of a book of logarithm tables, although it was published in 1974, when pocket calculators were available. Wildi <ref> [29] </ref> presents a series of directed acyclic graphs; each node of a graph is a unit, and arcs between nodes are labeled with conversion factors. The nodes are ordered by size of the unit.
References-found: 28

