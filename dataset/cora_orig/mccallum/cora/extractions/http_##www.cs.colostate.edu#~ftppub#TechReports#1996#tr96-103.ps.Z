URL: http://www.cs.colostate.edu/~ftppub/TechReports/1996/tr96-103.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Email: kang@cs.colostate.edu  bieman@cs.colostate.edu  
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Using Design Cohesion to Visualize, Quantify, and Restructure Software  
Author: Byung-Kyoo Kang James M. Bieman 
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523-1873  
Affiliation: Computer Science Department Colorado State University  
Note: Submitted for Publication Technical Report CS-96-103 Research partially supported by NASA Langley Research Center grant NAG1-1461.  
Date: January 22, 1996  
Abstract: Computer Science Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Albrecht and J. Gaffney. </author> <title> Software function, source lines of code, and development effort prediction. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-9(6):639-648, </volume> <month> June </month> <year> 1983. </year>
Reference-contexts: The principles of information hiding and data abstraction provide guidance for structuring a design, but do not give objective means for comparing alternative structures. Function points are used to predict the expected size of an implementation rather than to evaluate design structure <ref> [1] </ref>. The object-oriented design measures proposed by Chidamber and Kemerer provide a mechanism to gather quantitative information about classes in object-oriented software, but they do not provide guidance to help evaluate design alternatives [5].
Reference: [2] <author> A. Baker, J. Bieman, N. Fenton, D. Gustafson, A. Melton, and R. Whitty. </author> <title> A philosophy for software measurement. </title> <journal> J. Systems and Software, </journal> <volume> 12(3) </volume> <pages> 277-281, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: A clear understanding of an attribute like design-level cohesion is required before the attribute can be measured in a meaningful way [6, 7]. A model that captures the essence of the attribute is also needed <ref> [2] </ref>. A design model that can help make design attributes visible can be exceptionally valuable. 2 A Model for Visualizing Software Designs An input-output dependence graph (IODG) can model a design-level view of a module.
Reference: [3] <author> J. Bieman and B-K Kang. </author> <title> Cohesion and reuse in an object-oriented system. </title> <booktitle> Proc. ACM Symp. Software Reusability. (SSR'94), </booktitle> <pages> pp. 259-262, </pages> <month> April </month> <year> 1995. </year> <note> Reprinted in ACM Software Engineering Notes, </note> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: We are now implementing tools to generate IODG's from software designs and implementations, to graphically display IODG's, and to support the restructuring process. We have already developed class cohesion measures and measurement tools for object-oriented software <ref> [3] </ref>. We also plan to evaluate the effects of restructuring on external quality attributes such as testability, reusability, reliability, and maintainability.
Reference: [4] <author> J. Bieman and L. Ott. </author> <title> Measuring functional cohesion. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 20(8) </volume> <pages> 644-657, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: Objective criteria for evaluating design alternatives are needed. Many existing criteria are applicable to implementations, not designs. Examples of objective criteria for evaluating code structure include principles of structured programming, the cyclomatic number [11], functional cohesion <ref> [4] </ref>, and many others. The principles of information hiding and data abstraction provide guidance for structuring a design, but do not give objective means for comparing alternative structures. Function points are used to predict the expected size of an implementation rather than to evaluate design structure [1]. <p> It is defined in terms of "processing elements", which is processing that must be done in a module but may not yet be reduced to code. The DLC measure treats each output component as part of a module's functionality, which is how functional cohesion measures <ref> [4] </ref> and Lakhotia's rules to compute module cohesion [10] have been defined. The "processing element" of SMC Cohesion, therefore, corresponds to the output component of the DLC measure. association of SMC Cohesion because the DLC measure can not indicate temporal cohesion. <p> Thus, a tool can automatically perform the classification. However, the technique can be applied only after the coding stage since they are defined upon the implementation details. Bieman and Ott develop cohesion measures that indicate the extent to which a module approaches the ideal of functional cohesion <ref> [4] </ref>. They introduce three measures of functional cohesion based on "data slices" of a procedure. Bieman and Ott show that the measures satisfy the requirements of an ordinal scale.
Reference: [5] <author> S. Chidamber and C. Kemerer. </author> <title> A metrics suite for object oriented design. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 20(6) </volume> <pages> 476-493, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The object-oriented design measures proposed by Chidamber and Kemerer provide a mechanism to gather quantitative information about classes in object-oriented software, but they do not provide guidance to help evaluate design alternatives <ref> [5] </ref>. Gamma et al describe a set of structural design patterns for object-oriented software and objective, but not quantitative, criteria for choosing a particular pattern [8]. Visual displays of software designs and ordinal measures of design attributes are potential tools to identify and evaluate design alternatives.
Reference: [6] <author> N. Fenton. </author> <title> Software Metrics A Rigorous Approach. </title> <publisher> Chapman and Hall, </publisher> <address> London, </address> <year> 1991. </year>
Reference-contexts: Cohesive modules are difficult to split into separate components. Thus, the degree of cohesiveness should be an attribute that is useful for evaluating the structure of modules. A clear understanding of an attribute like design-level cohesion is required before the attribute can be measured in a meaningful way <ref> [6, 7] </ref>. A model that captures the essence of the attribute is also needed [2]. A design model that can help make design attributes visible can be exceptionally valuable. 2 A Model for Visualizing Software Designs An input-output dependence graph (IODG) can model a design-level view of a module. <p> We use the ordering imparted by SMC Cohesion on the set of all IODG's as an empirical relation system to show that our own automatable design-level cohesion measure 3 (DLC) satisfies the representation condition of measurement <ref> [6, 7] </ref>. That is, we show that the DLC measure is consistent with the intuition provided by SMC Cohesion. 3.1 SMC Cohesion as an Empirical Relation System Stevens, Myers and Constantine defined seven levels of cohesion on an ordinal scale [12].
Reference: [7] <author> N. Fenton. </author> <title> Software measurement: a necessary scientific basis. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 20(3) </volume> <pages> 199-206, </pages> <year> 1994. </year>
Reference-contexts: Cohesive modules are difficult to split into separate components. Thus, the degree of cohesiveness should be an attribute that is useful for evaluating the structure of modules. A clear understanding of an attribute like design-level cohesion is required before the attribute can be measured in a meaningful way <ref> [6, 7] </ref>. A model that captures the essence of the attribute is also needed [2]. A design model that can help make design attributes visible can be exceptionally valuable. 2 A Model for Visualizing Software Designs An input-output dependence graph (IODG) can model a design-level view of a module. <p> We use the ordering imparted by SMC Cohesion on the set of all IODG's as an empirical relation system to show that our own automatable design-level cohesion measure 3 (DLC) satisfies the representation condition of measurement <ref> [6, 7] </ref>. That is, we show that the DLC measure is consistent with the intuition provided by SMC Cohesion. 3.1 SMC Cohesion as an Empirical Relation System Stevens, Myers and Constantine defined seven levels of cohesion on an ordinal scale [12].
Reference: [8] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: Gamma et al describe a set of structural design patterns for object-oriented software and objective, but not quantitative, criteria for choosing a particular pattern <ref> [8] </ref>. Visual displays of software designs and ordinal measures of design attributes are potential tools to identify and evaluate design alternatives. A visual display of a design structure will increase the accuracy of decisions Research partially supported by NASA Langley Research Center grant NAG1-1461.
Reference: [9] <author> H-S Kim, Y-R Kwon, and I-S Chung. </author> <title> Restructuring programs through program slicing. </title> <journal> Int. J. Software Engineering and Knowledge Engineering, </journal> <volume> 4(3) </volume> <pages> 349-368, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Kim, Kwon, and Chung introduce restructuring methods where module strength (cohesion) is used as a criterion to restructure modules <ref> [9] </ref>. They define processing blocks which are similar to the `data slices' of Bieman and Ott. A processing block is a group of data tokens with data or control dependence relationship with an output variable. A rule recognizes `logically associated' module functions that are dependent together on an output.
Reference: [10] <author> A. Lakhotia. </author> <title> Rule-based approach to computing module cohsion. </title> <booktitle> Proc. 15th Int. Conf. Software Eng., </booktitle> <pages> pp. 35-44, </pages> <year> 1993. </year>
Reference-contexts: The DLC measure treats each output component as part of a module's functionality, which is how functional cohesion measures [4] and Lakhotia's rules to compute module cohesion <ref> [10] </ref> have been defined. The "processing element" of SMC Cohesion, therefore, corresponds to the output component of the DLC measure. association of SMC Cohesion because the DLC measure can not indicate temporal cohesion. For SMC Cohesion, procedurally associated processing elements are elements of the same procedural unit. <p> Lakhotia uses the output variables of a module as the processing elements of SMC Cohesion and defines rules for designating a cohesion level which preserve the intent of the SMC Cohesion <ref> [10] </ref>. The associative principles of SMC Cohesion are transformed to relate the output variables based on their data dependence relationships. A `variable dependence graph' models the control and data dependences between module variables.
Reference: [11] <author> T. McCabe. </author> <title> A complexity measure. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-2(4):308-320, </volume> <year> 1976. </year>
Reference-contexts: Objective criteria for evaluating design alternatives are needed. Many existing criteria are applicable to implementations, not designs. Examples of objective criteria for evaluating code structure include principles of structured programming, the cyclomatic number <ref> [11] </ref>, functional cohesion [4], and many others. The principles of information hiding and data abstraction provide guidance for structuring a design, but do not give objective means for comparing alternative structures. Function points are used to predict the expected size of an implementation rather than to evaluate design structure [1].
Reference: [12] <author> W. Stevens, G. Myers, and L. Constantine. </author> <title> Structured design. </title> <journal> IBM Systems J., </journal> <volume> 13(2) </volume> <pages> 115-139, </pages> <year> 1974. </year>
Reference-contexts: In the remainder of this paper we show that the concept of design-level cohesion can be used to visualize, quantify, and restructure software. The term "software cohesion," which was introduced more than 20 years ago <ref> [12] </ref>, refers to the relatedness of module components. A highly cohesive software module is a module whose components are tightly coupled. Cohesive modules are difficult to split into separate components. Thus, the degree of cohesiveness should be an attribute that is useful for evaluating the structure of modules. <p> This representation is used to define a design-level cohesion measure and is applied to the problem of restructuring software at design and maintenance stages. 3 Measuring Design Cohesion Software cohesion, as described by Stevens, Myers, and Constantine (SMC Cohesion) <ref> [12] </ref>, provides an intuitive mechanism for assessing the relatedness of the components in an individual module. It can be used to determine whether the components of a module actually belong together. <p> That is, we show that the DLC measure is consistent with the intuition provided by SMC Cohesion. 3.1 SMC Cohesion as an Empirical Relation System Stevens, Myers and Constantine defined seven levels of cohesion on an ordinal scale <ref> [12] </ref>. The SMC Cohesion of a module is determined by inspecting the association between all pairs of its processing elements. <p> We apply the notion of design cohesion to the problem of visualizing, quantifying, and restructuring a software system. Our method is based on the notion of cohesion developed by Stevens, Myers, and Constantine <ref> [12] </ref>. In this paper, we report the following progress towards improving the ability to make objective software design decisions: 1. We define the IODG, a graph model that represents a design-level view of a module.
Reference: [13] <author> M. Woodward. </author> <title> Difficulties using cohesion and coupling as quality indicators. </title> <journal> Software Quality J., </journal> <volume> 2(2) </volume> <pages> 109-127, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Because of its intuitive nature, the assessment of SMC Cohesion requires the judgment of human raters. As a result, SMC Cohesion cannot be readily applied to measure cohesion in practice <ref> [13] </ref>. Though not a measure, SMC Cohesion defines an intuitive notion of the cohesion attribute of design components.
Reference: [14] <author> H. Zima and B. Chapman. </author> <title> Supercompilers for Parallel and Vector Computers. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year> <month> 15 </month>
Reference-contexts: The term `component' refers to a static entity. An array, a linked list, a record, or a file is one component rather than a group of components. We define the data and control dependence informally; their formal definitions are given in compiler texts, for example, see reference <ref> [14] </ref>.
References-found: 14

