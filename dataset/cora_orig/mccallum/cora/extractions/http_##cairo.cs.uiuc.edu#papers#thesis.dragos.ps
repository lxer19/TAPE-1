URL: http://cairo.cs.uiuc.edu/papers/thesis.dragos.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Note: Copyright c 1997 Dragos-Anton Manolescu  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Sibel Adali, K. Sel~cuk Candan, Su-Shing Chen, Kutluhan Erol, and V. S. Subrahmanian. </author> <title> The Advanced Video Information System: data structures and query processing. </title> <journal> ACM-Springer Multimedia Systems Journal, </journal> <year> 1996. </year>
Reference-contexts: The user controls the presentation by clicking on different parts of an image. This determines the next image. The system handles just atemporal information, and the only possible type of transition is given in Figure 2.2. * The Advanced Video Information System (AVIS) <ref> [1] </ref> organizes video data to facilitate efficient querying. A video is first broken down into short sequences and several kinds of entities (objects, activities, and events) are associated with them. The system defines a 9-tuple 5 database [7] which supports different types of queries. <p> The advantage of using association maps to model links is twofold: * Association maps correspond exactly to line segments on the x-axis of the Cartesian plane. Therefore, from a database perspective, they can be efficiently stored by any method for storing collinear line segments <ref> [1] </ref>. * For any given object, the association map determines all the referencing strands. This allows discarding non-referenced objects with reference-based garbage collection mechanisms. The links (dynamic or static) model relationships between objects in a top-down manner.
Reference: [2] <author> Ingo Barth, Gabriel Dermler, Robert Erfle, Franz Fabian, Kurt Rothmerl, Johanner Ruckert, and Frank Sembach. </author> <title> Multimedia document handling|a survey of concepts and methods. </title> <type> Technical Report 43.9313, </type> <institution> IBM European Networking Center, </institution> <year> 1993. </year>
Reference-contexts: For this reason, there is no need to use the term "hyper-link.") 2. Content-based access. I use an object-oriented architecture which offers a high-level abstraction and is easy to integrate within existing hyper-media document standards, like MHEG <ref> [2, 20, 29] </ref>. The superclass of all document objects, multimedia object, is an abstract class. This is illustrated in Figure 2.1, where I use the notation from [10]. The two subclasses correspond to different requirements. The temporal subclass includes all objects which are intra-domain time dependent (e.g., audio, video, etc.).
Reference: [3] <author> Frank Buschman, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture|A System of Patterns. </title> <publisher> John Wiley & Sons, </publisher> <month> July </month> <year> 1996. </year> <note> ISBN 0-47195-869-7. </note>
Reference-contexts: In Section 4.2.2 I refine the system's architecture, and in Section 4.2.3 I cover the design. 4.2.2 Architectural Patterns Architectural patterns guide the selection of an architecture that is best suited for a specific application and set of requirements <ref> [3] </ref>. The objective is to find a good balance between the benefits and liabilities of the different architectural choices for a given context. Interactive multimedia applications are partitioned into in-band code that manipulates the time-sensitive data, and out-of-band code that performs event-driven functions [18].
Reference: [4] <author> Z. Chen, S. M. Tan, R. H. Campbell, and Y. Li. </author> <title> Real time video and audio in the World Wide Web. World Wide Web Journal, </title> <type> 1(1), </type> <year> 1996. </year>
Reference-contexts: These could be colors, textures, shapes, camera and object motions. The queries are then composed graphically and their features are extracted as well. A matching engine finds the videos or images with similar features from the database. This is illustrated in Figure 2.4. * Vosaic <ref> [4] </ref> is a World-Wide Web browsing system extended to support continuous video media. Although not a CBIR system, it introduces the notion of "video hyper-links" which allow a user to click on an image in a video stream and pull up another video stream. <p> Consequently, to implement and test dynamic links, I use just temporal objects. I restrict the verification to video information. Besides supporting dynamic links, this choice also allows testing video to video transitions, which only a few other systems support <ref> [4] </ref>. Restricting to one media type does not decrease the generality. Rather, it simplifies the implementation|the details associated with manipulating other types of media (e.g., audio, text, etc.) are left aside. 4.1.2 Object Partitioning In Section 3.2.1 I have shown how equivalence classes induce different partitions in the media space.
Reference: [5] <author> Ellie Cutler, Daniel Gilly, and Tim O'Reilly. </author> <title> The X Window System in a Nutshell. </title> <institution> O'Reilly & Associates, </institution> <note> second edition, 1992. ISBN 1-56592-017-1. </note>
Reference-contexts: Other software tools are the Standard Template Library [23, 21] and, for the out-of-band partition, the Xt <ref> [31, 5] </ref> and Motif [13] X Window System toolkits|the prototype system runs on UNIX workstations as a single-threaded application, at the same priority as other user processes. The strands are motion-JPEG (M-JPEG) compressed video sequences.
Reference: [6] <author> Andrzej Duda, Ron Weiss, and David Gifford. </author> <title> Content-based access to algebraic video. </title> <booktitle> In Proc. IEEE First International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Therefore, the binary operation used to construct high-level multimedia objects creates an algebraic structure. The algebraic model offers an adequate abstraction for representing the temporal information associated with high-level multimedia objects and allows proofs of properties which enable efficient access and management, and support content-based access <ref> [6] </ref>. 24 Chapter 4 Partial Verification The previous chapters describe the problem and introduce the framework. In this chapter I translate the abstract representations into a concrete form.
Reference: [7] <author> Ramez Elmasri and Shamkant Navathe. </author> <title> Fundamentals of Database Systems. Addison-Wesley, </title> <note> second edition, 1994. ISBN 0-8053-1748-1. </note>
Reference-contexts: A video is first broken down into short sequences and several kinds of entities (objects, activities, and events) are associated with them. The system defines a 9-tuple 5 database <ref> [7] </ref> which supports different types of queries. Possible transitions are from the atemporal domain (queries) to the temporal domain (video sequences)|Figure 2.3. * The Query by Image Content (QBIC) [8] is another content-based image retrieval system (CBIR) [12] that takes a different approach. <p> Applications allow operations such as creation, composition and presentation. A document (a set of objects and a set of links|relationships|between them) can also be regarded as a relational database <ref> [7] </ref>. Therefore, support for content-based access operations is intrinsic. The entity types correspond to each object's media data and the meta-data associated with it. <p> A query must first be scanned, parsed and verified, then passed to a runtime database processor which translates it into low-level operations to produce the query results <ref> [7] </ref>. Database processors are complex software systems, beyond the scope of this thesis.
Reference: [8] <editor> Myron Flickner et al. </editor> <title> Query by image and video content: </title> <booktitle> the QBIC system. IEEE Computer, </booktitle> <month> September </month> <year> 1995. </year> <month> 46 </month>
Reference-contexts: The system defines a 9-tuple 5 database [7] which supports different types of queries. Possible transitions are from the atemporal domain (queries) to the temporal domain (video sequences)|Figure 2.3. * The Query by Image Content (QBIC) <ref> [8] </ref> is another content-based image retrieval system (CBIR) [12] that takes a different approach. During an initial phase called "population," images and videos are processed to extract features describing their contents. These could be colors, textures, shapes, camera and object motions.
Reference: [9] <author> Brian Foote. </author> <title> Designing to facilitate change with object-oriented frameworks. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1988. </year>
Reference-contexts: The objective is to verify that the framework is viable and can be used in working systems. 4.1 Simplifications An object-oriented framework is a set of classes that provides the foundation for solutions to problems in a particular domain <ref> [9] </ref>. Individual solutions are created by extending existing classes and combining these extensions with other existing classes. The framework described in this thesis addresses issues from several domains: media processing, content-based operations and document management. Media processing involves handling various media types, atemporal and temporal. <p> In-band 29 code emphasizes performance and speed, while out-of-band code emphasizes ease of programming. The implementation of the prototype system follows these guidelines. 4.2.3 Design An essential framework attribute is a high degree of flexibility, such that the framework is usable for a wide range of applications <ref> [11, 9] </ref>. Design patterns [10] help to achieve this objective, emphasizing the reuse of successful designs and architectures. Design Pattern Overview The design patterns described in this section are Composite and Visitor. I begin with a brief overview of these patterns; a detailed discussion is available in [10].
Reference: [10] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns|Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <note> ISBN 0-201-63361-2. </note>
Reference-contexts: I use an object-oriented architecture which offers a high-level abstraction and is easy to integrate within existing hyper-media document standards, like MHEG [2, 20, 29]. The superclass of all document objects, multimedia object, is an abstract class. This is illustrated in Figure 2.1, where I use the notation from <ref> [10] </ref>. The two subclasses correspond to different requirements. The temporal subclass includes all objects which are intra-domain time dependent (e.g., audio, video, etc.). <p> The implementation of the prototype system follows these guidelines. 4.2.3 Design An essential framework attribute is a high degree of flexibility, such that the framework is usable for a wide range of applications [11, 9]. Design patterns <ref> [10] </ref> help to achieve this objective, emphasizing the reuse of successful designs and architectures. Design Pattern Overview The design patterns described in this section are Composite and Visitor. I begin with a brief overview of these patterns; a detailed discussion is available in [10]. <p> Design patterns <ref> [10] </ref> help to achieve this objective, emphasizing the reuse of successful designs and architectures. Design Pattern Overview The design patterns described in this section are Composite and Visitor. I begin with a brief overview of these patterns; a detailed discussion is available in [10]. Composite is a structural pattern which is concerned with how objects are organized to form larger structures. It describes how to build a class hierarchy made up of classes for two kinds of objects: primitive (e.g., a strand) and container (e.g., a ring). <p> Design Pattern Overview The design patterns mentioned in this section are Mediator, Command, Singleton and State|again, these patterns are described in great detail in <ref> [10] </ref>: Mediator is a behavioral pattern that ensures loose coupling between collaborating components. Collective behavior is encapsulated in a separate mediator object that coordinates the inter action between components, keeping them free from domain-specific code. <p> In case temporal prediction is used (e.g., MPEG), the granularity is higher (GOP for MPEG). Because the strands are immutable, this does not affect high-level objects. 31 Implementation Level Design Patterns The previously mentioned design patterns <ref> [10] </ref> increase the decoupling between the two partitions (Figure 4.3) and improve reusability: * The graphical user interface is an instance of the Mediator pattern: an object (the director, Gui) encapsulates how different graphical interface components (i.e., menu bar, file dialog box, etc.) interact, thus promoting a loose coupling between them. <p> On the other hand, whenever the document defines a dynamic link from a strand to another video object, it allows the user to perform different actions (e.g., Jump, Return, etc.). Therefore, I consider it to be a computer-participative application. Multimedia Patterns The publication of <ref> [10] </ref> has generated a lot of interest in the field of patterns. Since then, different authors have started to document patterns from various areas of computer science. However, to the best of my knowledge, no catalog of patterns specific to multimedia applications exists yet.
Reference: [11] <author> Simon J. Gibbs and Dionysios C. Tsichritzis. </author> <title> Multimedia Programming|Objects, Environments and Frameworks. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <note> ISBN 0-201-42282-4. </note>
Reference-contexts: In-band 29 code emphasizes performance and speed, while out-of-band code emphasizes ease of programming. The implementation of the prototype system follows these guidelines. 4.2.3 Design An essential framework attribute is a high degree of flexibility, such that the framework is usable for a wide range of applications <ref> [11, 9] </ref>. Design patterns [10] help to achieve this objective, emphasizing the reuse of successful designs and architectures. Design Pattern Overview The design patterns described in this section are Composite and Visitor. I begin with a brief overview of these patterns; a detailed discussion is available in [10].
Reference: [12] <author> Venkat Gudivada and Vijay Raghava. </author> <title> Content-based image retrieval systems. </title> <booktitle> IEEE Computer, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: The system defines a 9-tuple 5 database [7] which supports different types of queries. Possible transitions are from the atemporal domain (queries) to the temporal domain (video sequences)|Figure 2.3. * The Query by Image Content (QBIC) [8] is another content-based image retrieval system (CBIR) <ref> [12] </ref> that takes a different approach. During an initial phase called "population," images and videos are processed to extract features describing their contents. These could be colors, textures, shapes, camera and object motions. The queries are then composed graphically and their features are extracted as well. <p> One possible classification follows. Type of information involved in a query. Depending on their type, some queries require an additional processing step for all objects in a hierarchy, similar to the indexing stages described in <ref> [12] </ref>. * Queries on object information take into account just the information corresponding to each object. Unlike other systems [12], they do not require additional meta-data information and therefore work on any object hierarchy. <p> Depending on their type, some queries require an additional processing step for all objects in a hierarchy, similar to the indexing stages described in <ref> [12] </ref>. * Queries on object information take into account just the information corresponding to each object. Unlike other systems [12], they do not require additional meta-data information and therefore work on any object hierarchy. Query 1 Return all objects that contain a given strand * Queries on meta-data require objects to contain valid information (no NULL values 5 ) in the meta-data fields that are selected.
Reference: [13] <author> Dan Heller and Paula M. Ferguson. </author> <title> Motif Programming Manual. </title> <institution> O'Reilly & Associates, </institution> <note> second edition, 1994. ISBN 1-56592-016-3. </note>
Reference-contexts: Other software tools are the Standard Template Library [23, 21] and, for the out-of-band partition, the Xt [31, 5] and Motif <ref> [13] </ref> X Window System toolkits|the prototype system runs on UNIX workstations as a single-threaded application, at the same priority as other user processes. The strands are motion-JPEG (M-JPEG) compressed video sequences. <p> The corresponding class diagram is illustrated in Figure 4.4, and a screen-shot of the user interface in Figure 4.5. * The GUI contains several Motif menu widgets <ref> [13] </ref> which correspond to different application commands (e.g., "Open," "Quit," etc.) or to high-level operations|Table 3.4. With the Command pattern, the different requests corresponding to each of these widgets are encapsulated within objects.
Reference: [14] <author> Ralph E. Johnson. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Proc of OOPSLA, </booktitle> <address> Vancouver, BC, Canada, </address> <year> 1992. </year>
Reference-contexts: Ensures that the processing of video information (e.g., record a video frame or display a video frame) takes place in a timely manner. Video Document. Data structures containing all the information required by the presentation operations. One of the best ways to describe a framework is with software patterns <ref> [14] </ref>. In Section 4.2.2 I refine the system's architecture, and in Section 4.2.3 I cover the design. 4.2.2 Architectural Patterns Architectural patterns guide the selection of an architecture that is best suited for a specific application and set of requirements [3].
Reference: [15] <author> Ralph E. Johnson. </author> <title> Components, Frameworks, Patterns. </title> <type> Unpublished, </type> <month> February </month> <year> 1997. </year>
Reference-contexts: It is premature to estimate if they will have an impact on the multimedia community, but it is my belief that a careful study is worthwhile. 5.3 Future Work Framework development is an iterative process <ref> [15] </ref>. There are several reasons for iteration: Domain analysis. Unless the domain is mature, it is difficult to explain it. Mistakes in domain analysis are discovered when a system is built, which leads to iteration. Frameworks make explicit the parts of a design that are likely to change.
Reference: [16] <author> John R. Levine, Tony Mason, and Doug Brown. lex & yacc. O'Reilly & Associates, </author> <note> second edition, 1995. ISBN 1-56592-000-7. </note>
Reference-contexts: Rather, the video documents are 32 described in a generic meta-language. At runtime, the prototype system employs a lexical analyzer and a parser <ref> [16] </ref> to process the descriptions of composite video objects. This solution decouples creation from presentation, allowing the system to work with different document editing tools. The description of a video document contains the following information: 1. the root of the document; and 2. all the dynamic links.
Reference: [17] <author> Christopher J. Lindblad. </author> <title> A programming system for the dynamic manipulation of temporally sensitive data. </title> <type> Technical Report 637, </type> <institution> Massachutes Institute of Technology, </institution> <month> August </month> <year> 1994. </year> <institution> Laboratory for Computer Science. </institution>
Reference-contexts: The amounts of data processed by this partition are generally small and because it has to cover many possible situations, much of its code rarely executes in a given session. each partition illustrate the different requirements, which are summarized in Table 4.1. Successful multimedia applications <ref> [17] </ref> that adopt this partitioning scheme suggest different architectures and design solutions for each partition, tailored to their specific requirements. In-band 29 code emphasizes performance and speed, while out-of-band code emphasizes ease of programming. <p> For the scheduling solution I have chosen X timer callbacks 2 [13]|this choice is justified in Section 5.2. Although this approach is not optimal (i.e., it is not preemptive and does not offer guarantees), it is portable and has been adopted by other multimedia applications <ref> [17] </ref>. My implementation is also generic and could be easily modified to take into account real-time services, in case they are provided by the system. 4.3 Experiments and Results To verify the framework, I have performed a series of experiments with the system described in 4.2. <p> I suspect this behavior is due to the intrinsic coupling between the video compression/decompression hardware and the X Window system. Classes of Multimedia Applications Two different classes of multimedia applications have been identified in <ref> [17] </ref>: computer-mediated and computer-participative (with the latter being a subset of the former). In computer-mediated applications, the computer acts as a mediator between the media source and its destination. <p> A typical example is a surveillance system that employs motion analysis on the input video frames and records just the frames of interest <ref> [17] </ref>. The prototype system presented in Chapter 4 has the characteristics of both these classes. On one hand, it is a computer-mediated application that works with video data.
Reference: [18] <author> Drago~s-Anton Manolescu. </author> <title> Software patterns in multimedia systems. http://www.ncsa.uiuc.edu/People/daman/MmPatterns/, 1997. Semester project for Ralph Johnson's "Software Patterns". </title>
Reference-contexts: The objective is to find a good balance between the benefits and liabilities of the different architectural choices for a given context. Interactive multimedia applications are partitioned into in-band code that manipulates the time-sensitive data, and out-of-band code that performs event-driven functions <ref> [18] </ref>. The in-band partition is responsible for data processing. <p> Since then, different authors have started to document patterns from various areas of computer science. However, to the best of my knowledge, no catalog of patterns specific to multimedia applications exists yet. While I was working on this thesis, I started to identify and document several multimedia patterns <ref> [18] </ref>, some of which can be found in my prototype system as well|Section 4.2.2. It is premature to estimate if they will have an impact on the multimedia community, but it is my belief that a careful study is worthwhile. 5.3 Future Work Framework development is an iterative process [15].
Reference: [19] <author> Drago~s-Anton Manolescu and Klara Nahrstedt. </author> <title> Link management framework for hyper-media documents. </title> <booktitle> In Proc. IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> June </month> <year> 1997. </year> <month> 47 </month>
Reference: [20] <author> Thomas Meyer-Boudnik and Wolfgang Effelsberg. MHEG: </author> <title> An interchange format for interac-tive multimedia presentations. </title> <institution> Computer science technical report, University on Mannheim, </institution> <year> 1994. </year>
Reference-contexts: For this reason, there is no need to use the term "hyper-link.") 2. Content-based access. I use an object-oriented architecture which offers a high-level abstraction and is easy to integrate within existing hyper-media document standards, like MHEG <ref> [2, 20, 29] </ref>. The superclass of all document objects, multimedia object, is an abstract class. This is illustrated in Figure 2.1, where I use the notation from [10]. The two subclasses correspond to different requirements. The temporal subclass includes all objects which are intra-domain time dependent (e.g., audio, video, etc.).
Reference: [21] <author> Scott Meyers. </author> <title> More Effective C++. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <note> ISBN 0-201-63371-X. </note>
Reference-contexts: Other software tools are the Standard Template Library <ref> [23, 21] </ref> and, for the out-of-band partition, the Xt [31, 5] and Motif [13] X Window System toolkits|the prototype system runs on UNIX workstations as a single-threaded application, at the same priority as other user processes. The strands are motion-JPEG (M-JPEG) compressed video sequences.
Reference: [22] <author> Max Muhlhauser and Jan Gecsey. </author> <title> Services, frameworks, and paradigms for distributed multimedia applications. </title> <journal> IEEE Multimedia, </journal> <volume> 3(3), </volume> <month> Fall </month> <year> 1996. </year>
Reference-contexts: MHEG is intended for final-form (read-only) hyper-media documents. Although the standard has lately undergone radical changes in anticipation of interactive TV applications, the final-form concept and the high conceptual overload makes authoring MHEG documents cumbersome <ref> [22] </ref>. HyTime is an extension of the ISO Standard Graphics Markup Language (SGML) which does not include an object model or specific presentation rules, and the concepts of hyper-media document and node are connected together.
Reference: [23] <author> David Musser and Atul Saini. </author> <title> STL Tutorial and Reference Guide. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <note> ISBN 0-201-63398-1. </note>
Reference-contexts: Other software tools are the Standard Template Library <ref> [23, 21] </ref> and, for the out-of-band partition, the Xt [31, 5] and Motif [13] X Window System toolkits|the prototype system runs on UNIX workstations as a single-threaded application, at the same priority as other user processes. The strands are motion-JPEG (M-JPEG) compressed video sequences.
Reference: [24] <author> Parallax Graphics, Inc. </author> <title> Video Development Environment. </title> <note> Version 9.2. </note>
Reference-contexts: With the Command pattern, the different requests corresponding to each of these widgets are encapsulated within objects. Figure 4.6 shows a partial class diagram. * Several objects require exactly one instance (e.g., video document, M-JPEG Parallax widget <ref> [24] </ref>, video input widget [24], etc.). I use the Singleton pattern, which also allows control of the moment of object creation. * The state dependent application behavior is distributed across several objects with the State pattern. This is illustrated in Figure 4.7. <p> With the Command pattern, the different requests corresponding to each of these widgets are encapsulated within objects. Figure 4.6 shows a partial class diagram. * Several objects require exactly one instance (e.g., video document, M-JPEG Parallax widget <ref> [24] </ref>, video input widget [24], etc.). I use the Singleton pattern, which also allows control of the moment of object creation. * The state dependent application behavior is distributed across several objects with the State pattern. This is illustrated in Figure 4.7.
Reference: [25] <author> Roger S. Pressman. </author> <title> Software Engineering, A Practitioner's Approach. </title> <publisher> McGraw-Hill, </publisher> <address> third edition, </address> <year> 1992. </year> <note> ISBN 0-07-050814-3. </note>
Reference-contexts: During the development of the prototype system, I was able to modify various parts of the implementation without affecting the others. The design patterns mentioned in Section 4.2.4 helped to distribute the code within classes, thus decreasing the coupling <ref> [25] </ref> between different parts of the code. 38 Chapter 5 Conclusion 5.1 Contributions This thesis has presented a framework for hyper-media documents. The framework is based on an object-oriented document architecture and supports non-linear transitions between multimedia objects. The components of the inter-object transition model are contents and time.
Reference: [26] <author> P. Venkat Rangan and Harrick M. Vin. </author> <title> Designing file systems for digital video and audio. </title> <booktitle> In Proc. of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <year> 1991. </year>
Reference-contexts: File systems designed to support continuous media (digital video and audio) by providing facilities for creating, editing and retrieving multimedia objects <ref> [26] </ref> use an identical structure and therefore no intermediate conversion layer is required. 3.2 Transition Mechanism The framework allows transitions between different objects of heterogeneous media types within a hyper-media document. In this section I describe the inter-object transition mechanism| time.
Reference: [27] <author> William B. Robinson Romualdas Skvarcius. </author> <title> Discrete Mathematics with Computer Science Applications. </title> <publisher> The Benjamin/Cummings Publishing Company, </publisher> <year> 1986. </year> <note> ISBN 0-805-37044-7. </note>
Reference-contexts: Equivalence classes are formally defined in Appendix A.2. Given the set of media space elements corresponding to a hyper-media document object and an equivalence relation as described above, the following properties hold <ref> [27] </ref>: 1. Equivalence classes correspond to pairwise disjoint subsets of media space elements, i.e., 8a; b 2 A ) [a] = [b] _ [a] " [b] = f;g; spondence between media space elements and concepts. 2. <p> The goals are to provide a high-level abstraction that models the complex information associated with these objects and to show what properties are associated with each structure. Algebraic structures require a set of objects, operations on this set and a collection of axioms <ref> [27] </ref>. Concatenate (denoted by ffi) is a binary application-level operation which creates high-level multimedia objects.
Reference: [28] <author> Franc Solina, Andrej Lapajne, Bor Prihavec, Ziga Kranjec, and Aleksandar Ruben. </author> <title> Slovenian virtual gallery. </title> <address> http://razor.fri.uni-lj.si:8080/gal/welcome.html. </address>
Reference-contexts: Media types of entities the system operates with; and 2. Transitions between related entities. In each case, the behavior is illustrated in a transition diagram which represents different entities as filled circles and the transitions between them as arrows. * The Slovenian Virtual Gallery <ref> [28] </ref> offers a virtual walk through several galleries, organized as a hierarchy of images. The user controls the presentation by clicking on different parts of an image. This determines the next image.
Reference: [29] <author> Ralf Steinmetz and Klara Nahrstedt. </author> <title> Multimedia: Computing, Communications & Applications. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <note> ISBN 0-13-324435-0. </note>
Reference-contexts: For this reason, there is no need to use the term "hyper-link.") 2. Content-based access. I use an object-oriented architecture which offers a high-level abstraction and is easy to integrate within existing hyper-media document standards, like MHEG <ref> [2, 20, 29] </ref>. The superclass of all document objects, multimedia object, is an abstract class. This is illustrated in Figure 2.1, where I use the notation from [10]. The two subclasses correspond to different requirements. The temporal subclass includes all objects which are intra-domain time dependent (e.g., audio, video, etc.). <p> This is illustrated in Figure 2.6, where the dashed arrows represent transitions corresponding to this extended model. 2.2 Hyper-media Standards Several standards are already available for hyper-media documents, like MHEG and HyTime <ref> [29] </ref>. MHEG is intended for final-form (read-only) hyper-media documents. Although the standard has lately undergone radical changes in anticipation of interactive TV applications, the final-form concept and the high conceptual overload makes authoring MHEG documents cumbersome [22]. <p> ignored. # main.mjpg:root 35 main.mjpg : 10 20 one.mjpg 30 40 two.mjpg 50 60 three.mjpg one.mjpg : 100 200 un.mjpg 300 400 deux.mjpg Scheduling Processing of the media data associated with digital video has to take place in a timely manner, according to the soft deadlines typical to multimedia systems <ref> [29] </ref>. For the scheduling solution I have chosen X timer callbacks 2 [13]|this choice is justified in Section 5.2. Although this approach is not optimal (i.e., it is not preemptive and does not offer guarantees), it is portable and has been adopted by other multimedia applications [17].
Reference: [30] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. Addison-Wesley, </title> <note> second edition, 1991. ISBN 0-201-53992-6. </note>
Reference-contexts: Consequently, defining new operations (e.g., queries) does not require changes on the document side. This flexibility is important in the context of large document databases, where recreating the entire database is an expensive operation. 30 4.2.4 Implementation The in-band partition and the out-of-band partition are written in C++ <ref> [30] </ref>, an object-oriented programming language which allows a direct mapping between the framework's architecture and design (which are also object-oriented) and the concrete representation.
Reference: [31] <author> Douglas A. Young. </author> <title> The X Window System Programming and Applications with Xt. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year> <note> ISBN 0-13-497074-8. 48 </note>
Reference-contexts: Other software tools are the Standard Template Library [23, 21] and, for the out-of-band partition, the Xt <ref> [31, 5] </ref> and Motif [13] X Window System toolkits|the prototype system runs on UNIX workstations as a single-threaded application, at the same priority as other user processes. The strands are motion-JPEG (M-JPEG) compressed video sequences.
References-found: 31

