URL: http://nii.isi.edu/publications/sndss/1993/93sndss-erdos-pato.ps
Refering-URL: http://nii-server.isi.edu/info/kerberos/documentation.html
Root-URL: http://www.isi.edu
Title: 1 Extending the OSF DCE Authorization System to Support Practical Delegation  
Author: Marlena E. Erdos Joseph N. Pato 
Date: (Feb. 11-12, 1993)  
Note: To appear in: PSRG Workshop on Network and Distributed System Security.  
Address: Chelmsford, MA  
Affiliation: Hewlett-Packard Co.  
Abstract: In a simple client/server distributed environment, two principals are involved in most transactions - the initiator and the target of the operation. The target of the operation can reasonably make authorization decisions based on the identity of the initiator. This model is insufficient, however, when the server performs operations on other components on behalf of the initiator as is common in distributed object oriented environments. This paper will describe the need for a delegation facility in distributed object oriented systems and then present some elements of the delegation system we've proposed for inclusion in OSF's Distributed Computing Environment (DCE). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Pato, J. </author> <title> "Extending the DCE Authorization Model to Support Practical Delegation," </title> <type> OSF DCE SIG RFC 3, </type> <month> June </month> <year> 1992. </year> <title> 2. _____, "OSF DCE 1.0 Application Development Guide," Open Software Foundation, </title> <address> Cambridge, MA., </address> <year> 1992. </year> <title> 3. _____, "OSF DCE 1.0 Introduction to DCE," Open Software Foundation, </title> <address> Cambridge, MA., </address> <booktitle> 1992, </booktitle> <volume> Volume 2. </volume>
Reference-contexts: To solve this problem adequately, some form of delegation is required. We've have proposed a delegation architecture and design to OSF for inclusion in the DCE <ref> [1] </ref>. This system is described below. Delegation system Our delegation architecture has three major components: First, we allow an intermediary to operate on other objects in a manner that reflects the initiator's identity as well as its own.
Reference: 4. <author> Pato, J., </author> <title> "DCE Authorization Services - Privilege Server," OSF DCE Specifications, 1990. 5. _____, "Security in Open Systems: Security Frameworks for the Application Layer of Open Systems," ECMA TR/46. 6. _____, "Security in Open Systems: Data Elements and Service Definitions," </title> <publisher> ECMA-138. </publisher>
Reference-contexts: These PAs are limited to the unique identifiers representing the initiating principal and the set of groups to which the principal belongs. A trusted system component, the Privilege Server (PS) <ref> [4] </ref>, produces a tamper-proof privilege attribute certificate (PAC) that contains the PAs and is suitable for presentation by a client to a server. <p> Significant differences exist in the details of the design given that the DCE uses shared secret key authentication and uses the Privilege Server <ref> [4] </ref> as - 8 - a delegation server [14] while the Gasser and McDermott model uses public key authentication methods. Other workers have concerned themselves with mechanisms for trustworthy transmission of delegated identities. <p> Karen Sollins [13] provides a mechanism for nesting shared-secret key delegation tokens. Both of these mechanisms for shared-secret key delegation tokens require target servers to contact the authentication service. This is inconsistent with the design goals of the DCE (as argued in <ref> [4] </ref>) which strive to reduce total system overhead by moving to a push model for privileges thereby moving the collection of authorization data away from servers and to clients. Consequently we have developed our pushed token mechanism for nesting delegation information.
Reference: 7. <author> Gasser, M. and E. McDermott, </author> <title> "An Architecture for Practical Delegation in a Distributed System," </title> <booktitle> Proceedings of the 1990 IEEE Symposium on Security and Privacy, IEEE Computer Society, </booktitle> <year> 1990. </year>
Reference-contexts: the operation the PAs of each delegate the operation the delegation and extensible restrictions placed by each participant COMPARISON OF MODEL AND MECHANISM WITH OTHER WORK The model for delegation proposed here has been developed independently of, but bears a striking resemblance to, the model proposed by Gasser and McDermott <ref> [7] </ref>. In both models composition the privilege attributes for all principals involved in an operation is combined with extensions to the authorization model to allow the expression of the role of intermediaries in that operation.
Reference: 8. <author> Abadi M., M. Burrows, B. Lampson and G. Plotkin, </author> <title> "A Calculus for Access Control in Distributed Systems," </title> <institution> Digital Equipment Corporation Systems Research Center report No. </institution> <month> 70, February </month> <year> 1991. </year>
Reference: 9. <author> Lampson, B., M. Abadi, M. Burrows, and E. Wobber, </author> <title> "Authentication in Distributed Systems: Theory and Practice," </title> <booktitle> Proceedings of the 13'th ACM Symposium on Operating System Principles , October 1991. </booktitle>
Reference: 10. <author> Pato, J., </author> <title> "DCE Access Control Lists (ACL's)," OSF DCE Specifications, </title> <year> 1990. </year>
Reference-contexts: Authorization model at the target Each server has one or more access control lists (ACLs). ACLs, as found in Posix or DCE <ref> [10] </ref>, contain entries that identify the access rights granted to principals bearing certain PAs. To support delegation, the target server effectively grants one set of rights to initiators and another set to intermediaries.
Reference: 11. <author> Kohl, J. and B. C. Neuman, </author> <title> "The Kerberos Network Authentication Service," </title> <type> INTERNET-DRAFT RFC, revision 5, </type> <month> 17 April </month> <year> 1992. </year>
Reference-contexts: Note that the DCE is designed to allow a number of different authentication and key distribution protocols to be used. DCE 1.0, however, only includes a concrete specification and implementation using the Kerberos V5 <ref> [11] </ref> protocol suite. Consequently, we will restrict the following discussion to the mechanisms used for identity flow that are used by the DCE in conjunction with the Kerberos V5 protocols.
Reference: 12. <author> Project SESAME (Bull, </author> <title> ICL and SNI), "Proposed Security Enhancements for DCE," OSF DCE SIG, </title> <month> 4 July </month> <year> 1992. </year>
Reference-contexts: Encrypting this data may violate laws governing the export of encryption technology - and in some countries may violate laws controlling the transmission of encrypted data over public carriers. The solution we have chosen to address these various issues was proposed by the European Sesame project <ref> [12] </ref>. The contents of a EPAC need not be confidential therefore we have removed them from the authorization data field of the V5 ticket and simply placed a cryptographic hash of the EPAC in the PTGT.
Reference: 13. <author> Sollin s, </author> <title> K ., "Ca sca de d Aut he ntic ati on," </title> <booktitle> Proceedings of the 1988 IEEE Symposium on Security and Privacy, IEEE Computer Society, </booktitle> <year> 1988. </year>
Reference-contexts: The delegate does not possess proof can be presented to a third party that the incoming EPAC is legitimate. It needs some form of delegation token <ref> [13] </ref> that may be submitted to the Privilege Server when requesting a new chained EPAC. The extended PAC, obtained from the caller, contains all of the information needed by the Privilege Server to determine if a given principal should be allowed to chain its identity to that of the caller. <p> Other workers have concerned themselves with mechanisms for trustworthy transmission of delegated identities. Varadharajan et. al. [15] proposes a method for chaining certificates in a shared-secret key environment as well as a mechanism for nesting delegation tokens in a public key environment. Karen Sollins <ref> [13] </ref> provides a mechanism for nesting shared-secret key delegation tokens. Both of these mechanisms for shared-secret key delegation tokens require target servers to contact the authentication service.
Reference: 14. <author> Neuman, B. C., </author> <title> "Proxy-Based Authorization and Accounting for Distributed Systems," </title> <type> Technical Report 91-02-01, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1991. </year>
Reference-contexts: Significant differences exist in the details of the design given that the DCE uses shared secret key authentication and uses the Privilege Server [4] as - 8 - a delegation server <ref> [14] </ref> while the Gasser and McDermott model uses public key authentication methods. Other workers have concerned themselves with mechanisms for trustworthy transmission of delegated identities.
Reference: 15. <author> Varadharajan, V., P Allen, S. Black, </author> <title> "An Analysis of the Proxy Problem in Distributed Systems," </title> <booktitle> Proceedings of the 1991 IEEE Symposium on Security and Privacy, IEEE Computer Society, </booktitle> <year> 1991. </year>
Reference-contexts: Other workers have concerned themselves with mechanisms for trustworthy transmission of delegated identities. Varadharajan et. al. <ref> [15] </ref> proposes a method for chaining certificates in a shared-secret key environment as well as a mechanism for nesting delegation tokens in a public key environment. Karen Sollins [13] provides a mechanism for nesting shared-secret key delegation tokens.
References-found: 11

