URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/jicslp92.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/laks/papers.html
Root-URL: http://www.cs.concordia.ca
Title: Deductive Databases with Incomplete Information (Extended Abstract)  
Author: Fangqing Dong and Laks V.S. Lakshmanan 
Date: November 1992,  
Address: D.C., USA,  Montreal Quebec, Canada H3G 1M8  
Affiliation: Washington,  Dept. of Computer Science, Concordia University  
Note: Appears in: Joint Int. Conf. and Symp. on Logic Programming,  MIT Press.  
Abstract: We consider query processing in deductive databases with incomplete information in the form of null values. We motivate the problem of extracting the maximal information from a (deductive) database in response to queries, and formalize this in the form of conditional answers. We give a sound and complete top-down proof procedure for generating conditional answers. We also extend the well-known magic sets method to handle null values, and show that the transformed program executed by semi-naive evaluation (with minor extensions) is correct in the sense that it will generate all and only valid conditional answers w.r.t. the original program. 
Abstract-found: 1
Intro-found: 1
Reference: [AKG 91] <author> Abiteboul,S., Kanellakis,P. and Grahne,G.: </author> <title> "On the representation and querying of sets of possible worlds," </title> <booktitle> T heoretical Computer Science 78 (1991), </booktitle> <pages> 159-187. </pages>
Reference-contexts: For many applications available information is typically incomplete. One form of incomplete information that has been researched extensively in the context of relational databases is the well-known null values (see <ref> [AKG 91] </ref> for a survey). Of the many different types of null values, the kind most researched are the so-called "exists but unknown" type of null values. Both logical (e.g., Gallaire et al [GMN 84], Reiter [Re 86], Vardi [Va 86]) and algebraic (e.g., Abiteboul et al [AKG 91]) approaches have <p> null values (see <ref> [AKG 91] </ref> for a survey). Of the many different types of null values, the kind most researched are the so-called "exists but unknown" type of null values. Both logical (e.g., Gallaire et al [GMN 84], Reiter [Re 86], Vardi [Va 86]) and algebraic (e.g., Abiteboul et al [AKG 91]) approaches have been investigated in the literature. The main concerns have been completeness and complexity of query processing. <p> The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. Demolombe and Cerro [DC 88], Liu [Li 90], and Abiteboul et al <ref> [AKG 91] </ref> are the representative works (see Section 6 for more details). In this paper, we consider query processing in deductive databases in the presence of nulls. Firstly, we set out the objective of extracting the maximal amount 1 of information from the database in answering queries. <p> Thus, there was a need for a genuine extension to a method such as magic sets to deal with null values. Abiteboul et al <ref> [AKG 91] </ref> has shown that for their basic model of tables, the question of deciding whether a tuple is an answer to a datalog query in some possible world is NP-hard.
Reference: [BR 86] <author> Bancillion,F. and Ramakrishnan,R.: </author> <title> "An amateur's introduction to recursive query processing strategies," </title> <booktitle> Proc. ACM-SIGMOD Int. Conf. on Management of Data (1986), </booktitle> <pages> 16-52. </pages>
Reference-contexts: We then give a sound and complete proof procedure called SLD ? - refutation for query processing (Section 4). On the bottom-up side, we develop a rewriting method which is an extension of the well-known magic sets method (see <ref> [BR 86, BR 87] </ref>) to handle null values. We also propose a complementary evaluation procedure, which is a simple extension of semi-naive evaluation.
Reference: [BR 87] <author> Beeri,C. and Ramakrishnan,R.: </author> <title> "On the power of magic," P roc: </title> <booktitle> of 6 th ACM SIGM OD Symposium on P ODS (1987), </booktitle> <pages> 269-283. </pages>
Reference-contexts: We then give a sound and complete proof procedure called SLD ? - refutation for query processing (Section 4). On the bottom-up side, we develop a rewriting method which is an extension of the well-known magic sets method (see <ref> [BR 86, BR 87] </ref>) to handle null values. We also propose a complementary evaluation procedure, which is a simple extension of semi-naive evaluation.
Reference: [C*90] <editor> Chimenti, D. et al, </editor> <title> "The LDL system prototype" in IEEE Trans. </title> <journal> on Knowledge and Data Eng., </journal> <volume> Vol. 2. No. 1 (1990), </volume> <pages> pp. 76-90. </pages>
Reference-contexts: We are currently working on an implementation of the extended magic sets method and SN ? -evaluation on top of the LDL deductive DBMS <ref> [C*90] </ref>. In future research, we would like to characterize query classes and databases (based on their structure) for which conditional answers can be generated efficiently.
Reference: [DC 88] <author> Demolombe,R. and Cerro, L.F.D.: </author> <title> "An algebraic evaluation method for deduction in incomplete data bases," T he J ournal of Logic P rogramming, </title> <booktitle> No.5 (1988), </booktitle> <pages> 183-205. </pages>
Reference-contexts: The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. Demolombe and Cerro <ref> [DC 88] </ref>, Liu [Li 90], and Abiteboul et al [AKG 91] are the representative works (see Section 6 for more details). In this paper, we consider query processing in deductive databases in the presence of nulls. <p> Demolombe and Cerro <ref> [DC 88] </ref> has extended conventional relational algebra with the idea of making it available for bottom-up evaluation of queries. However, unlike here, they have not proposed any query rewriting strategies to precede evaluation. In the absence of such strategies, bottom-up evaluation (even using semi-naive) can be prohibitively expensive.
Reference: [DL 92] <author> Dong,F. and Lakshmanan,V.S.: </author> <title> "Deductive databases with incomplete information," </title> <type> Tech. Report, </type> <institution> Dept. of Computer Science, Concordia University (March 1992). </institution>
Reference-contexts: This reasoning is formalized in the next sections and we will eventually derive this conditional answer formally (Example 4.1). For lack of space, we suppress the proofs of our results in this extended abstract. Complete details are available in <ref> [DL 92] </ref> and will appear in the full paper as well. 2 Datalog ? Theories In this section, we formalize the intuition developed in the previous section. <p> Indeed, a straightforward approach would produce a program which is exponentially larger than the original program <ref> [DL 92] </ref>. Two well-known query rewriting strategies are generalized magic sets [Ra 88] and magic conditions [M* 90] which appear to be capable of handling "generalized" bindings corresponding to conditions. A natural question is whether these methods can be directly used to handle (conditions involving) null values.
Reference: [GMN 84] <author> Gallaire,H., Minker, J., And Nicolas,J.-M.: </author> <title> "Logic and databases:a deductive approach," </title> <journal> Computing Surveys, Vol.16, No.2 (June 1984), </journal> <pages> 151-185. </pages>
Reference-contexts: Of the many different types of null values, the kind most researched are the so-called "exists but unknown" type of null values. Both logical (e.g., Gallaire et al <ref> [GMN 84] </ref>, Reiter [Re 86], Vardi [Va 86]) and algebraic (e.g., Abiteboul et al [AKG 91]) approaches have been investigated in the literature. The main concerns have been completeness and complexity of query processing. <p> Minimality can be achieved by comparing condition sets and deleting redundant ones. 6 Comparison with Related Work Although null values in relational databases have been studied in the framework of the so-called logical databases <ref> [GMN 84, Re 86, Va 86] </ref>, it was only recently that deductive databases with null values have been considered. Demolombe and Cerro [DC 88] has extended conventional relational algebra with the idea of making it available for bottom-up evaluation of queries.
Reference: [La 89] <author> Lakshmanan, </author> <title> V.S.: "Query evaluation with null values: how complex is completeness?," </title> <booktitle> Proc. 9 th Int. Conf. Foundation of Software Technology and Theoretical Computer Science, </booktitle> <volume> LNCS vol. 405, </volume> <publisher> Springer-Verlag (1989), </publisher> <pages> 204-222. </pages>
Reference-contexts: It is well known that query processing in the presence of nulls is computationally intractable and tractability is achieved either by restricting the class of queries considered [Re 86, Va 86] or by sacrificing [Re 86, Va 86] or weakening <ref> [La 89] </ref> completeness. The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. <p> In future research, we would like to characterize query classes and databases (based on their structure) for which conditional answers can be generated efficiently. Another attractive direction is to identify weaker forms of completeness (as was done for first-order queries see <ref> [La 89] </ref>) w.r.t. which conditional answers for recursive queries can be generated efficiently. Acknowledgments The authors wish to thank V.S.Alagar for stimulating discussions. The research was supported by grants from NSERC (Canada) and FCAR (Quebec).
Reference: [Li 90] <author> Liu,Y.: </author> <title> "Null values in definite programs," P roc: </title> <booktitle> N orth American on Logic P rogramming Conf erence (1990), </booktitle> <pages> 273-288. </pages>
Reference-contexts: The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. Demolombe and Cerro [DC 88], Liu <ref> [Li 90] </ref>, and Abiteboul et al [AKG 91] are the representative works (see Section 6 for more details). In this paper, we consider query processing in deductive databases in the presence of nulls. <p> In the absence of such strategies, bottom-up evaluation (even using semi-naive) can be prohibitively expensive. Besides, their algebra is only complete for a restricted class of (first-order) queries. In some sense, the answers generated by Liu <ref> [Li 90] </ref> (also see section 1) are similar to conditional answers. However, there are important differences between his work and ours. Firstly, Liu's framework of S-constants corresponds to assuming that null values always assume the value of one of the known individuals, unlike our approach. Secondly, unlike us, [Li 90] does <p> by Liu <ref> [Li 90] </ref> (also see section 1) are similar to conditional answers. However, there are important differences between his work and ours. Firstly, Liu's framework of S-constants corresponds to assuming that null values always assume the value of one of the known individuals, unlike our approach. Secondly, unlike us, [Li 90] does not provide any optimization strategy for bottom-up query processing computation. For deductive databases, this is particularly important.
Reference: [Ll 87] <editor> Lloyd,J.W.: </editor> <booktitle> Foundations of Logic Programming, </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York (1987). </address>
Reference-contexts: We assume the reader is familiar with the general notions of deductive databases and logic programming, SLD-refutation, bottom-up evaluation and the magic sets query rewriting method <ref> [Ul 89, Ll 87] </ref>. Datalog, the language of function-free Horn clauses, is the vehicle query language for deductive databases [Ul 89]. <p> Let P and P be as above and Q j p ( X) be a query. Consider a computation rule (see Lloyd <ref> [Ll 87] </ref> for a definition) R which is fair w.r.t. all database predicates (i.e. those excluding map). We need a few definitions. A literal is a database (map) literal if it involves a database predicate (the predicate map).
Reference: [M* 90] <author> Mumick, I.S., Finkelstein, S.J., Pirahesh, H., and Ramakrishnan, R.: </author> <title> "Magic conditions," </title> <booktitle> Proc. of 9 th ACM SIGMOD Symposium on POPS (1990), </booktitle> <pages> 161-171. </pages>
Reference-contexts: Indeed, a straightforward approach would produce a program which is exponentially larger than the original program [DL 92]. Two well-known query rewriting strategies are generalized magic sets [Ra 88] and magic conditions <ref> [M* 90] </ref> which appear to be capable of handling "generalized" bindings corresponding to conditions. A natural question is whether these methods can be directly used to handle (conditions involving) null values.
Reference: [NR 90] <author> Naqvi,S.A. and Rossi,F.: </author> <title> "Reasoning in inconsistent databases," </title> <booktitle> Proc. North American on Logic Programming Conference (1990), </booktitle> <pages> 255-272. </pages>
Reference-contexts: Aside from the theoretical interest, we believe information extracted in this manner will find applications in hypothetical query answering (see Naqvi and Rossi <ref> [NR 90] </ref>) and in answering queries in the context of design databases where specifications are often incomplete and one may want to know what would be the eventual outcomes if various design alternatives were chosen. We formalize the notion of extracting maximal information from databases using conditional answers (Section 2).
Reference: [NR 91] <author> Naughton, J.F. and Ramakrishnan,R.: </author> <title> "Bottom-up evaluation of logic programs," T o appear in J ournal of Logic P rogramming. </title>
Reference-contexts: For more details on bottom-up query processing and comparison with top-down approaches, the reader is referred to Ullman [Ul 89a] and Naughton and Ramakrishnan <ref> [NR 91] </ref>. Since bottom-up query processing is a popular paradigm for deductive databases, it would be desirable to be able to handle nulls within this framework. The purpose of this section is to show how this can be achieved.
Reference: [Ra 88] <author> Ramakrishnan,R.: </author> <title> "Magic templates: a spellbinding approach to logic programs," </title> <booktitle> Proc. Int. Conf. and Symp. on Logic Programming (1988), </booktitle> <pages> 140-159. </pages>
Reference-contexts: Indeed, a straightforward approach would produce a program which is exponentially larger than the original program [DL 92]. Two well-known query rewriting strategies are generalized magic sets <ref> [Ra 88] </ref> and magic conditions [M* 90] which appear to be capable of handling "generalized" bindings corresponding to conditions. A natural question is whether these methods can be directly used to handle (conditions involving) null values.
Reference: [Re 86] <author> Reiter,R.: </author> <title> "A sound and sometimes complete query evaluation algorithm for relational databases with null values," </title> <journal> J ACM , Vol.33 No.2 (April 1986), </journal> <pages> 349-370. </pages>
Reference-contexts: Of the many different types of null values, the kind most researched are the so-called "exists but unknown" type of null values. Both logical (e.g., Gallaire et al [GMN 84], Reiter <ref> [Re 86] </ref>, Vardi [Va 86]) and algebraic (e.g., Abiteboul et al [AKG 91]) approaches have been investigated in the literature. The main concerns have been completeness and complexity of query processing. <p> The main concerns have been completeness and complexity of query processing. It is well known that query processing in the presence of nulls is computationally intractable and tractability is achieved either by restricting the class of queries considered <ref> [Re 86, Va 86] </ref> or by sacrificing [Re 86, Va 86] or weakening [La 89] completeness. The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. <p> The main concerns have been completeness and complexity of query processing. It is well known that query processing in the presence of nulls is computationally intractable and tractability is achieved either by restricting the class of queries considered <ref> [Re 86, Va 86] </ref> or by sacrificing [Re 86, Va 86] or weakening [La 89] completeness. The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. <p> In this paper, we restrict attention to "pure" datalog, in which only database (base/derived) predicates (and no arithmetic predicates) are allowed in the rules. We next extend datalog programs (whose EDB contains null values) to datalog ? theories, using an extension of Reiter's <ref> [Re 86] </ref> formulation of extended relational theories. Consider a first order language L, with a vocabulary consisting of finitely many constant symbols, denoted by D, finitely many predicate symbols p i ; q j , and infinitely many variables X i ; Y j ; Z k . <p> Minimality can be achieved by comparing condition sets and deleting redundant ones. 6 Comparison with Related Work Although null values in relational databases have been studied in the framework of the so-called logical databases <ref> [GMN 84, Re 86, Va 86] </ref>, it was only recently that deductive databases with null values have been considered. Demolombe and Cerro [DC 88] has extended conventional relational algebra with the idea of making it available for bottom-up evaluation of queries.
Reference: [St 90] <author> Stuckey, P.J.: </author> <title> "Constructive negation for constraint logic programming," </title> <type> manuscript (1991). </type>
Reference-contexts: Also, he does not explicitly handle constraints on nulls, although they are implicit in the value ranges of S-constants. Our approach in SLD ? -refutation was inspired by constraint logic programming (see Stuckey <ref> [St 90] </ref>). Since this paradigm concerns reasoning with and about constraints, an answer to a query from a constraint logic program is essentially the answer under any model of the program generated by instantiating any variables in the constraints by constants which satisfy them.
Reference: [Ul 89] <author> Ullman,J.D.: </author> <title> Principles of Database and Knowledge-Base Systems, vol. I & II, Comp. </title> <publisher> Sci. Press, </publisher> <address> MD (1989). </address>
Reference-contexts: We assume the reader is familiar with the general notions of deductive databases and logic programming, SLD-refutation, bottom-up evaluation and the magic sets query rewriting method <ref> [Ul 89, Ll 87] </ref>. Datalog, the language of function-free Horn clauses, is the vehicle query language for deductive databases [Ul 89]. <p> We assume the reader is familiar with the general notions of deductive databases and logic programming, SLD-refutation, bottom-up evaluation and the magic sets query rewriting method [Ul 89, Ll 87]. Datalog, the language of function-free Horn clauses, is the vehicle query language for deductive databases <ref> [Ul 89] </ref>. A datalog query program consists of (i) a finite set of unit clauses representing facts for the base (EDB) predicates, (ii) a finite set of Horn clause rules defining the derived (IDB) predicates, and (iii) a goal clause, representing the query. <p> For datalog ? programs, the issues of binding patterns and unique binding property for IDB predicates are identical to those for normal datalog programs. We shall henceforth assume without loss of generality that our adorned programs satisfy the unique binding property <ref> [Ul 89] </ref>. We extend magic sets transformation to deal with any datalog ? query program P in three phases. Firstly, we apply adornments to the datalog ? program P . We then transform the resulting program P a , incorporating SIP while respecting the semantics of nulls.
Reference: [Ul 89a] <author> Ullman,J.D.: </author> <title> "Bottom-up beats top-down for datalog," In P roc: </title> <booktitle> ACM Symposium on P ODS (1989). </booktitle>
Reference-contexts: For more details on bottom-up query processing and comparison with top-down approaches, the reader is referred to Ullman <ref> [Ul 89a] </ref> and Naughton and Ramakrishnan [NR 91]. Since bottom-up query processing is a popular paradigm for deductive databases, it would be desirable to be able to handle nulls within this framework. The purpose of this section is to show how this can be achieved.
Reference: [Va 86] <author> Vardi, M.Y.: </author> <title> "Querying logical databases," </title> <journal> J ournal of Computer and System Sciences, </journal> <month> No.33 </month> <year> (1986), </year> <pages> 142-160. </pages>
Reference-contexts: Of the many different types of null values, the kind most researched are the so-called "exists but unknown" type of null values. Both logical (e.g., Gallaire et al [GMN 84], Reiter [Re 86], Vardi <ref> [Va 86] </ref>) and algebraic (e.g., Abiteboul et al [AKG 91]) approaches have been investigated in the literature. The main concerns have been completeness and complexity of query processing. <p> The main concerns have been completeness and complexity of query processing. It is well known that query processing in the presence of nulls is computationally intractable and tractability is achieved either by restricting the class of queries considered <ref> [Re 86, Va 86] </ref> or by sacrificing [Re 86, Va 86] or weakening [La 89] completeness. The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. <p> The main concerns have been completeness and complexity of query processing. It is well known that query processing in the presence of nulls is computationally intractable and tractability is achieved either by restricting the class of queries considered <ref> [Re 86, Va 86] </ref> or by sacrificing [Re 86, Va 86] or weakening [La 89] completeness. The question of query processing in deductive databases in the presence of incomplete information (e.g., in the form of nulls) has received relatively little attention. <p> Minimality can be achieved by comparing condition sets and deleting redundant ones. 6 Comparison with Related Work Although null values in relational databases have been studied in the framework of the so-called logical databases <ref> [GMN 84, Re 86, Va 86] </ref>, it was only recently that deductive databases with null values have been considered. Demolombe and Cerro [DC 88] has extended conventional relational algebra with the idea of making it available for bottom-up evaluation of queries.
References-found: 19

