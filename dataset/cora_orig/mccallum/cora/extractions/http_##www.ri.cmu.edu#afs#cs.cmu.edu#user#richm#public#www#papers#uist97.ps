URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/richm/public/www/papers/uist97.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/richm/public/www/whois-richm.html
Root-URL: 
Keyword: End-User Programming, User Interface Software, Application Builders, Programming-by-Demonstration, Programming-by-Example, Inductive Learning, Gamut  
Abstract: Gamut is a new tool for building interactive, graphical software like games, simulations, and educational software. A developer can build entire applications in Gamuts domain using only programming-by-demonstration (PBD) and never has to look at or modify code to build any behavior. To accomplish this, we have developed a simple, streamlined interaction for demonstrating so that developers can create new examples quickly and can specify negative examples without confusion. Also, Gamut allows the developer to give hints to point out objects in a relationship that would be too time consuming to find by searching. Gamut automatically revises generated code using an efficient algorithm that recursively scans for the differences between a new example and the previous behavior. To correct the discovered differences, Gamut couples heuristic search with a decision tree learning algorithm allowing it to build more complicated behaviors than it could using heuristic search alone. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> G.L. Fisher, D.E. Busse, D. A. Wolber. </author> <title> Adding Rule-Based Reasoning to a Demonstrational Interface Builder. </title> <booktitle> Proceedings of UIST92, </booktitle> <pages> pp. 89-97. </pages>
Reference-contexts: In Figure 1, the developer uses four cards to make a monster move randomly. Guide Objects: Guide objects are objects that the developer can see but are made invisible when the application is run by a user. Guide objects originated in the Demo II system <ref> [1] </ref> and can be used to show alignments, directions, spacing, grouping, and other graphical relationships. Temporal Ghosts: Quite often, the recent past state of objects is relevant to the behavior that acts on those objects.
Reference: 2. <author> B.A. Myers, et al. </author> <title> The Amulet Environment: New Models for Effective UI Software Development, </title> <journal> IEEE Transactions on Software Engineering, </journal> <note> to appear. http://www.cs.cmu.edu/~amulet. </note>
Reference-contexts: Therefore, some of Gamuts code fragments use decision tree learning [3] to form generic conditional expressions. Using a generic induction algorithm like decision trees allows Gamut to build behaviors that would be difficult using heuristic search. IMPLEMENTATION We built Gamut using the Amulet environment <ref> [2] </ref> and it runs on X Windows, Windows NT and 95, and the Macintosh. The remaining work includes implementing a few extensions and usability testing.
Reference: 3. <author> J.R. Quinlan. </author> <title> Induction of Decision Trees. Machine Learning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <note> Vol. 1, </note> <year> 1986, </year> <pages> pp. </pages> <month> 81-106. </month> <title> through walls. The wall, the guide object arrow line the monster follows, and the temporal ghost of the monster are highlighted as hints. The four squares with arrow lines are cards which are put into the deck at the lower right to make the monster move randomly. The timer on the right causes the monster to move. Outside the window widget are prototype objects and an object to show the current players turn. </title>
Reference-contexts: We have developed interaction techniques that simplify the demonstration process and allow the developer to give the system hints. The interactions provide a faster way to create examples and allow negative examples to be specified as easily as positive ones. Also, we integrated a decision tree learning algorithm <ref> [3] </ref> along with heuristic search to increase the kinds of relationships that Gamut can infer. This allows Gamut to generate conditional behavior that other systems would need the developer to add to the code by hand. DOMAIN Gamut is designed to make graphical games similar to board games. <p> Once the differences are known, code generation can be applied to fix them. It is not possible to have a built-in rule for every possible behavior a developer might want in a game. Therefore, some of Gamuts code fragments use decision tree learning <ref> [3] </ref> to form generic conditional expressions. Using a generic induction algorithm like decision trees allows Gamut to build behaviors that would be difficult using heuristic search. IMPLEMENTATION We built Gamut using the Amulet environment [2] and it runs on X Windows, Windows NT and 95, and the Macintosh.
References-found: 3

