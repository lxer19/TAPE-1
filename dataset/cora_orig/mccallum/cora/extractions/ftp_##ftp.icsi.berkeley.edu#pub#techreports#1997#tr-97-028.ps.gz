URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1997/tr-97-028.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1997.html
Root-URL: http://www.icsi.berkeley.edu
Email: e-mail: alf@ifh.de  e-mail: wanka@icsi.berkeley.edu  
Title: Sorting on a Massively Parallel System Using a Library of Basic Primitives:  
Phone: (510) 643-9153 FAX (510) 643-7684  
Date: August 1997  ICSI, 1947  
Note: TR-97-028  This research was conducted while both authors were affiliated with the  It is supported by DFG-Sonderforschungsbereich 376 "Massive Parallelitat," by EU ESPRIT Long Term Research Project 20244 (ALCOM-IT), and by DFG Leibniz Grant Me 872/6-1. A shortened version has been accepted for presentation on the 3rd European Conference in Parallel Processing (Euro-Par), 1997. DESY-IfH, D-15738 Zeuthen, Germany.  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  Street, Berkeley, CA 94704, USA.  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Dept. of Mathematics and Computer Science and the Heinz Nixdorf Institute of the Paderborn University, Germany.  Center  
Abstract: Modeling and Experimental Results fl Abstract We present a comparative study of implementations of the following sorting algorithms on the Parsytec SC320 reconfigurable, asynchronous, massively parallel MIMD machine: Bitonic Sort, Odd-Even Merge Sort without and with guarded split&merge, Periodic Balanced Sort, Columnsort, and two variants of Samplesort. The experiments are performed on 2- up to 5-dimensional wrapped butterfly networks with 8 up to 160 processors. We make use of library functions that provide primitives for global variables and synchronization, and we show that it is possible to implement efficient and portable programs easily. We assume the time for accessing a global variable to be linear in the parameters s, d, and c, where s is the size of the variable, d the distance between the accessing processor and the processor holding the variable, and c the contention, i. e., the number of processors accessing the variable simultaneously. In order to predict the performance, we model the runtime of this access by a trilinear function. Similarly, the runtime of a synchronization is described by a bilinear function, depending on the number of processors involved and their maximum distance. Our experiments show that, in the context of parallel sorting, this model that can be applied easily is sufficiently detailed to give good runtime predictions. The experiments confirming the predictions point out that Odd-Even Merge Sort with guarded split&merge is the fastest method if the processors hold few keys. If there are many keys per processor, a variant of Samplesort that uses Odd-Even Merge Sort as a subroutine is the fastest method. Additionally, we show that the relative behavior of implementations of different algorithms is quite similar to their theoretical relation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Sorting in c log n parallel steps. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference: [2] <author> D. Bailey, E. Barszcz, J. Barton, D. Browning, R. Carter, L. Dagum, R. Fatoohi, S. Fineberg, P. Frederickson, T. Lasinski, R. Schreiber, H. Simon, V. Venkatakrishnan, and S. Weeratunga. </author> <title> The NAS parallel benchmarks. </title> <type> Technical Report RNR-94-007, </type> <institution> NASA Ames Research Center, Moffet Field, </institution> <month> Mar. </month> <year> 1994. </year>
Reference: [3] <author> D. H. Bailey, J. T. Barton, T. Lasinski, and H. D. Simon. </author> <title> NAS parallel benchmarks. </title> <type> Technical Report RNR-91-002, </type> <institution> NASA Ames Research Center, Moffet Field, </institution> <month> Jan. </month> <year> 1991. </year>
Reference: [4] <author> K. E. Batcher. </author> <title> Sorting networks and their applications. </title> <booktitle> In AFIPS Conf. Proc. </booktitle> <volume> 32, </volume> <pages> pages 307-314, </pages> <year> 1968. </year>
Reference: [5] <author> G. E. Blelloch, L. Dagum, S. J. Smith, K. Thearling, and M. Zagha. </author> <title> An evaluation of sorting as a supercomputer benchmark. </title> <type> Technical Report RNR-93-002, </type> <institution> NASA Ames Research Center, Moffet Field, </institution> <month> Jan. </month> <year> 1993. </year>
Reference: [6] <author> G. E. Blelloch, C. E. Leiserson, B. M. Maggs, C. G. Plaxton, S. J. Smith, and M. Zagha. </author> <title> A comparison of sorting algorithms for the Connection Machine CM-2. </title> <booktitle> In Proceedings of the 3rd ACM Symposium on Parallel Algorithms and Architectures (SPAA), </booktitle> <pages> pages 3-16, </pages> <year> 1991. </year>
Reference-contexts: In the second implementation (Samplesort II), the sample is sorted by applying Odd-Even Merge Sort with guarded S&M operation (see Section 4.1.2). Blelloch et al. <ref> [6] </ref> have implemented a Samplesort where the sample is sorted by a parallel Radixsort. After this sorting, each processor (except for one) holds one splitter.
Reference: [7] <author> K. Brockmann and R. Wanka. </author> <title> Efficient oblivious parallel sorting on the MasPar MP-1. </title> <booktitle> In Proceedings of the 30th Hawaii International Conference on System Sciences (HICSS), </booktitle> <volume> volume I, </volume> <pages> pages 200-208, </pages> <year> 1997. </year>
Reference: [8] <author> R. Cole. </author> <title> Parallel merge sort. </title> <editor> In J. H. Reif, editor, </editor> <booktitle> Synthesis of Parallel Algorithms, </booktitle> <pages> pages 453-495. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference: [9] <author> D. Culler, R. Karp, D. Patterson, A. Sahay, E. Santos, K. Schauser, R. Subramonian, and T. von Eicken. </author> <title> LogP: A practical model of parallel computation. </title> <journal> Commun. ACM, </journal> <volume> 39(11) </volume> <pages> 78-85, </pages> <year> 1996. </year>
Reference: [10] <author> D. E. Culler, A. Dusseau, R. Martin, and K. E. Schauser. </author> <title> Fast parallel sorting under LogP: from theory to practice. </title> <booktitle> In Portability and Performance for Parallel Processing, </booktitle> <pages> pages 71-98, </pages> <year> 1994. </year>
Reference: [11] <author> R. Diekmann, J. Gehring, R. Luling, B. Monien, M. Nubel, and R. Wanka. </author> <title> Sorting large data sets on a massively parallel system. </title> <booktitle> In Proceedings of the 6th IEEE Symposium on Parallel and Distributed Processing (SPDP), </booktitle> <pages> pages 2-9, </pages> <year> 1994. </year>
Reference: [12] <author> M. Dowd, Y. Perl, M. Saks, and L. Rudolph. </author> <title> The periodic balanced sorting network. </title> <journal> J. ACM, </journal> <volume> 36 </volume> <pages> 738-757, </pages> <year> 1989. </year>
Reference: [13] <author> A. C. Dusseau, D. E. Culler, K. E. Schauser, and R. P. Martin. </author> <title> Fast parallel sorting under LogP: Experience with the CM-5. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 7 </volume> <pages> 791-805, </pages> <year> 1996. </year>
Reference: [14] <author> M. Fischer, J. Rethmann, and A. Wachsmann. </author> <title> A realistic cost model for the communication time in parallel programs. </title> <booktitle> In Proceedings of the 3rd Workshop on Abstract Machine Models for Parallel and Distributed Computing (AMW), </booktitle> <pages> pages 13-27, </pages> <year> 1996. </year>
Reference: [15] <author> W. D. Frazer and A. C. McKellar. Samplesort: </author> <title> A sampling approach to minimal storage tree sorting. </title> <journal> J. ACM, </journal> <volume> 17 </volume> <pages> 496-507, </pages> <year> 1970. </year>
Reference: [16] <author> R. Funke, R. Luling, B. Monien, F. Lucking, and H. Blanke-Bohne. </author> <title> An optimized reconfigurable architecture for Transputer networks. </title> <booktitle> In Proceedings of the 25th Hawaii Int. Conf. on System Sciences (HICSS), </booktitle> <volume> volume I, </volume> <pages> pages 237-245, </pages> <year> 1992. </year>
Reference: [17] <author> A. V. Gerbessiotis and L. G. Valiant. </author> <title> Direct bulk-synchronous parallel algorithms. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 22 </volume> <pages> 251-267, </pages> <year> 1994. </year>
Reference: [18] <author> M. T. Goodrich. </author> <title> Communication-efficient parallel sorting. </title> <booktitle> In Proceedings of the 28th ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 247-256, </pages> <year> 1996. </year> <month> 17 </month>
Reference: [19] <author> D. E. Knuth. </author> <title> The Art of Computer Programming, Volume 3: Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference: [20] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference: [21] <author> T. Leighton. </author> <title> Tight bounds on the complexity of parallel sorting. </title> <journal> IEEE Trans. Comput., </journal> <volume> 34 </volume> <pages> 344-354, </pages> <year> 1985. </year>
Reference: [22] <institution> The NAS parallel benchmarks home page. </institution> <note> http://science.nas.nasa.gov/Software/NPB/. </note>
Reference: [23] <author> D. Richards. </author> <title> Parallel sorting A bibliography. </title> <journal> SIGACT News, </journal> <volume> 18(1) </volume> <pages> 28-48, </pages> <year> 1986. </year>
Reference: [24] <author> C. Rub. </author> <title> On the average running time of odd-even merge sort. </title> <booktitle> In Proceedings of the 12th Symposium on Theoretical Aspects of Computer Science (STACS), </booktitle> <pages> pages 491-502, </pages> <year> 1995. </year>
Reference: [25] <author> C. Rub. </author> <title> On the average running time of odd-even merge sort. </title> <journal> Journal of Algorithms, </journal> <volume> 22 </volume> <pages> 329-346, </pages> <year> 1997. </year>
Reference: [26] <author> D. Sanders, Y. Park, and V. Govindan. </author> <title> Parallel sorting on the NEC Cenju-3 and IBM SP2. </title> <booktitle> In Proceedings of the International Conference on High-Performance Computing in Asia (HPC Asia), </booktitle> <pages> pages 214-219, </pages> <year> 1997. </year>
Reference: [27] <author> T. M. Stricker. </author> <title> Supporting the hypercube programming model on mesh architectures (A fast sorter for iWarp tori). </title> <booktitle> In Proceedings of 4th ACM Symposium on Parallel Algorithms and Architectures (SPAA), </booktitle> <pages> pages 148-157, </pages> <year> 1992. </year>
Reference: [28] <author> L. G. Valiant. </author> <title> A bridging model for parallel computation. </title> <journal> Commun. ACM, </journal> <volume> 33(8) </volume> <pages> 103-111, </pages> <year> 1990. </year>
Reference: [29] <author> A. Wachsmann. </author> <title> Eine Bibliothek von Basisdiensten fur Parallelrechner: Routing, </title> <booktitle> Syn-chronisation, gemeinsamer Speicher. Dissertation, Universitat-GH Paderborn, </booktitle> <year> 1995. </year> <note> In German. </note>
Reference: [30] <author> A. Wachsmann and F. Wichmann. </author> <title> OCCAM-light | A multiparadigm programming language for Transputer networks. Forschungsbericht der Forschergruppe "Effiziente Nutzung massiv paralleler Systeme" Nr. </title> <type> 5, </type> <institution> Universitat-GH Paderborn, </institution> <month> April </month> <year> 1993. </year> <note> Available by anonymous ftp from ftp.uni-paderborn.de as file /doc/techreports/Informatik/tr-rf-93-005.ps.Z. 18 </note>
References-found: 30

