URL: http://fmg-www.cs.ucla.edu/classes/239_2.fall98/papers/opal.ps
Refering-URL: http://fmg-www.cs.ucla.edu/classes/239_2.fall98/weekly.html
Root-URL: http://www.cs.ucla.edu
Title: Opal: A Single Address Space System for 64-bit Architectures  
Author: Jeff Chase, Hank Levy, Miche Baker-Harvey, Ed Lazowska 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: The recent appearance of architectures with flat 64-bit virtual addressing opens an opportunity to reconsider the way our operating systems use virtual address spaces. We are building an operating system called Opal for these wide-address architectures. The key feature of Opal is a single global virtual address space that extends to data on long-term storage and across the network. In this paper we outline the case for the use of a single virtual address space, present the model of addressing and protection used in Opal, and discuss some of the problems and opportunities raised by our approach. 
Abstract-found: 1
Intro-found: 1
Reference: [Anderson et al. 91] <author> Anderson, T. E., Levy, H. M., Bershad, B. N., and Lazowska, E. D. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In Proceedings of the Fourth Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 108-121, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: This is important because the communication mechanisms popular today (e.g., RPC) are based on data copying and protection domain switches, which have increased in cost relative to integer performance on recent processors <ref> [Ousterhout 90, Anderson et al. 91] </ref>. * Hardware-based memory protection is cheaper and more flexible. Protection domains can be created more efficiently if the system is freed from setting up a new address space for each domain.
Reference: [Chase & Levy 91] <author> Chase, J. S. and Levy, H. M. </author> <title> Supporting cooperation on wide-address computers. </title> <institution> Department of Computer Science and Engineering Technical Report 91-03-10, University of Washington, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: Dynamic sharing patterns can be supported if the system (rather than the applications) coordinates address bindings. This solution buys some of the benefits of a single address space without sacrificing private address spaces. In fact, our original proposal for global addressing on 64-bit architectures suggested such a hybrid approach <ref> [Chase & Levy 91] </ref>. We have now abandoned the hybrid approach for two reasons: (1) the mix of shared and private regions introduces dangerous ambiguity, and (2) the virtual memory hardware and software must continue to support multiple sets of address translations.
Reference: [Chase et al. 92a] <author> Chase, J. S., Levy, H. M., Baker-Harvey, M., and Lazowska, E. D. </author> <title> How to use a 64-bit virtual address space. </title> <type> Technical Report 92-03-02, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: We are building a 64-bit operating system called Opal with a single virtual address space that maps all primary and secondary storage across a network <ref> [Chase et al. 92a, Chase et al. 92b] </ref>. This simply means that virtual address usage is coordinated so that any piece of shared data is named with a unique address by all programs that access it.
Reference: [Chase et al. 92b] <author> Chase, J. S., Levy, H. M., Baker-Harvey, M., and Lazowska, E. D. </author> <title> Lightweight shared objects in a 64-bit operating system. </title> <type> Technical Report 92-03-09, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: We are building a 64-bit operating system called Opal with a single virtual address space that maps all primary and secondary storage across a network <ref> [Chase et al. 92a, Chase et al. 92b] </ref>. This simply means that virtual address usage is coordinated so that any piece of shared data is named with a unique address by all programs that access it.
Reference: [Daley & Dennis 68] <author> Daley, R. C. and Dennis, J. B. </author> <title> Virtual memory, processes, and sharing in MULTICS. </title> <journal> Communications of the ACM, </journal> <volume> 11(5) </volume> <pages> 306-312, </pages> <month> May </month> <year> 1968. </year>
Reference-contexts: More importantly, we extend uniform addressing to encompass data on long-term storage and across multiple autonomous nodes in a network. However, most of the benefits claimed for context-independent addressing in Opal apply equally to non-persistent storage in Psyche. Segmented systems (e.g., Multics <ref> [Daley & Dennis 68] </ref>) support uniform sharing to some degree. The first phase of address translation on segmented architectures concatenates a global segment identifier with a segment offset, yielding a long-form address from a global virtual address space.
Reference: [Dobberpuhl et al. 92] <author> Dobberpuhl, D., Witek, R., Allmon, R., Anglin, R., Bertucci, D., Britton, S., Chao, L., Conrad, R., Dever, D., Gieseke, B., Hassoun, S., Hoeppner, G., Kowaleski, J., Kuchler, K., Ladd, M., Leary, M., Madden, L., McLellan, E., Meyer, D., Montanaro, J., Priore, D., Rajagopalan, V., Samudrala, S., and Santhanam, S. </author> <title> A 200mhz 64 bit dual issue CMOS microprocessor. </title> <booktitle> In International Solid-State Circuits Conference 1992, </booktitle> <month> February </month> <year> 1992. </year>
Reference-contexts: Our premise is that the next generation of workstations and servers will use processors with 64-bit data paths, and sparse, flat, 64-bit virtual addressing. The MIPS R4000 [MIP 91] and Digital's Alpha family <ref> [Dobberpuhl et al. 92] </ref> are recent examples of the trend to wider addresses. Our goal is to determine how software can best exploit the large virtual address spaces of these emerging architectures.
Reference: [Koldinger et al. 92] <author> Koldinger, E. J., Chase, J. S., and Eggers, S. J. </author> <title> Architectural support for single address space operating systems. </title> <type> Technical Report 92-03-10, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: No special hardware support for Opal is assumed or required. We believe that Opal could run efficiently on DEC Alpha and MIPS R4000 processors. However, single address space operating systems can benefit from hardware that is optimized for the way they use virtual memory <ref> [Koldinger et al. 92] </ref>. This work was supported in part by the National Science Foundation under Grants No.
Reference: [Lee 89] <author> Lee, R. B. </author> <title> Precision architecture. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 78-91, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: The Hewlett-Packard Precision <ref> [Lee 89] </ref> differs from other segmented architectures in that it allows applications to specify long-form virtual addresses directly. However, long-form pointer dereference is expensive, so most software uses segmented addressing. Most capability-based architectures [Organick 83, Levy 84] support uniform sharing of data structures.
Reference: [Levy 84] <author> Levy, H. M. </author> <title> Capability-Based Computer Systems. </title> <publisher> Digital Press, </publisher> <address> Bedford, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: The Hewlett-Packard Precision [Lee 89] differs from other segmented architectures in that it allows applications to specify long-form virtual addresses directly. However, long-form pointer dereference is expensive, so most software uses segmented addressing. Most capability-based architectures <ref> [Organick 83, Levy 84] </ref> support uniform sharing of data structures.
Reference: [MIP 91] <institution> MIPS Computer Systems, Inc., Sunnyvale, CA. </institution> <note> MIPS R4000 Microprocessor User's Manual, first edition, </note> <year> 1991. </year>
Reference-contexts: 1 Introduction The Opal project is an investigation into the effect of wide-address architectures on the structure of operating systems and applications. Our premise is that the next generation of workstations and servers will use processors with 64-bit data paths, and sparse, flat, 64-bit virtual addressing. The MIPS R4000 <ref> [MIP 91] </ref> and Digital's Alpha family [Dobberpuhl et al. 92] are recent examples of the trend to wider addresses. Our goal is to determine how software can best exploit the large virtual address spaces of these emerging architectures.
Reference: [Mullender & Tanenbaum 86] <author> Mullender, S. and Tanenbaum, A. </author> <title> The design of a capability-based operating system. </title> <journal> The Computer Journal, </journal> <volume> 29(4) </volume> <pages> 289-299, </pages> <year> 1986. </year>
Reference-contexts: Pointer structures can also span segments, so different access controls can be placed on different parts of a connected data structure. A domain must have special permission to attach a segment. Segments are named by capabilities (based on capabilities in the Amoeba system <ref> [Mullender & Tanenbaum 86] </ref>) that can be passed between protection domains through shared or persistent memory. A segment capability confers permission to its holder to attach the segment and address its contents directly with load and/or store instructions.
Reference: [Organick 83] <author> Organick, E. I. </author> <title> A Programmer's View of the Intel 432 System. </title> <publisher> McGraw-Hill, </publisher> <year> 1983. </year>
Reference-contexts: The Hewlett-Packard Precision [Lee 89] differs from other segmented architectures in that it allows applications to specify long-form virtual addresses directly. However, long-form pointer dereference is expensive, so most software uses segmented addressing. Most capability-based architectures <ref> [Organick 83, Levy 84] </ref> support uniform sharing of data structures.
Reference: [Ousterhout 90] <author> Ousterhout, J. K. </author> <booktitle> Why aren't operating systems getting faster as fast as hardware? In Proceedings of the Summer 1990 USENIX Conference, </booktitle> <pages> pages 247-256, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This is important because the communication mechanisms popular today (e.g., RPC) are based on data copying and protection domain switches, which have increased in cost relative to integer performance on recent processors <ref> [Ousterhout 90, Anderson et al. 91] </ref>. * Hardware-based memory protection is cheaper and more flexible. Protection domains can be created more efficiently if the system is freed from setting up a new address space for each domain.
Reference: [Redell et al. 80] <author> Redell, D., Dalal, Y., Horsley, T., Lauer, H., Lynch, W., McJones, P., Murray, H., and Purcell, S. </author> <title> Pilot: An operating system for a personal computer. </title> <journal> Communications of the ACM, </journal> <volume> 23(2) </volume> <pages> 81-92, </pages> <month> February </month> <year> 1980. </year>
Reference-contexts: space, e.g., how to handle private static data references in shared code, (3) implications of discarding the Unix fork primitive, which assumes private address spaces, and (4) effect on existing programs of losing the contiguous address space abstraction. 5 Related Work Cedar [Swinehart et al. 86] and its predecessor Pilot <ref> [Redell et al. 80] </ref> used a single virtual address space on hardware that supported only one protection domain. These systems had no hardware-based memory protection; both relied solely on defensive protection from the name scoping and type rules of a programming language.
Reference: [Scott et al. 90] <author> Scott, M. L., LeBlanc, T. J., and Marsh, B. D. </author> <booktitle> Multi-model parallel programming in Psyche. In Proceedings of the Second ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 70-78, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: These systems had no hardware-based memory protection; both relied solely on defensive protection from the name scoping and type rules of a programming language. Our proposal generalizes this model to multiple protection domains. The term "uniform addressing" was introduced in Psyche <ref> [Scott et al. 90] </ref>, which also has a single virtual address space shared by multiple protection domains. Psyche uses cooperating protection domains primarily as a means of separating different components of a single parallel application with different models of parallelism and different scheduling needs.
Reference: [Swinehart et al. 86] <author> Swinehart, D., Zellweger, P., Beach, R., and Hagmann, R. </author> <title> A structural view of the Cedar programming environment. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(8), </volume> <month> October </month> <year> 1986. </year>
Reference-contexts: address space, (2) linking in a shared address space, e.g., how to handle private static data references in shared code, (3) implications of discarding the Unix fork primitive, which assumes private address spaces, and (4) effect on existing programs of losing the contiguous address space abstraction. 5 Related Work Cedar <ref> [Swinehart et al. 86] </ref> and its predecessor Pilot [Redell et al. 80] used a single virtual address space on hardware that supported only one protection domain. These systems had no hardware-based memory protection; both relied solely on defensive protection from the name scoping and type rules of a programming language.
References-found: 16

