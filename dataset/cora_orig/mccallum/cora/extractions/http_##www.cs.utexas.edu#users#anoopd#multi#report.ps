URL: http://www.cs.utexas.edu/users/anoopd/multi/report.ps
Refering-URL: http://www.cs.utexas.edu/users/anoopd/multi/report.html
Root-URL: http://www.cs.utexas.edu
Title: Resource Discovery Exploring the Anycasting Paradigm  
Author: Manish Gupta and Anoopkumar Dawar 
Date: May 13, 1998  
Abstract: Due to the exponential growth in the use of the World-Wide Web the demands placed on web servers have increased significantly. The most popular approach for addressing this load problem is to introduce replicated servers. One of the important factors in efficient utilization of replicated servers is to be able to direct clients to the best server, according to some optimality criteria. We explore the use of anycasting for this resource discovery phase. Combining anycasting with suitable metric collection techniques can result in a 60% decrease in the mean of response times observed by the clients. An equally substantial decrease is observed in the standard deviation of response times.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Samrat Bhattacharjee, Mostafa Ammar et al. </author> <title> Application Layer Anycasting </title>
Reference-contexts: The anycasting communication paradigm is designed to support server replication by allowing applications to easily select and communicate with the best server, according to some optimality criteria. In this project we explore the anycasting mechanism <ref> [1] </ref> for this resource discovery. As originally defined [1], anycasting provides "a stateless besteffort delivery of an anycast datagram to atleast one host, and preferably one host, which serves the anycast address. <p> The anycasting communication paradigm is designed to support server replication by allowing applications to easily select and communicate with the best server, according to some optimality criteria. In this project we explore the anycasting mechanism <ref> [1] </ref> for this resource discovery. As originally defined [1], anycasting provides "a stateless besteffort delivery of an anycast datagram to atleast one host, and preferably one host, which serves the anycast address. In this definition IP Anycast address can be used to define a group of servers that provide the same service. <p> The push daemon checks for this change every one minute. So at a maximum, the server will push information every one minute. Otherwise the server doesn't push. <ref> [1] </ref> shows a graph which depicts the time of day variations experienced on the web. The conclusion is that the web is very heavily loaded in the noon and early evening and relatively lowly loaded in the mornings and late evenings and night. It is also mentioned in [1] that this <p> doesn't push. <ref> [1] </ref> shows a graph which depicts the time of day variations experienced on the web. The conclusion is that the web is very heavily loaded in the noon and early evening and relatively lowly loaded in the mornings and late evenings and night. It is also mentioned in [1] that this is not only due to the load on the specific server for which this statistics were collected but also for the network. This is so because most of the traffic on the internet share some common links, which become bottlenecks and cause this change.
Reference: [2] <author> C Partridge, </author> <title> T Mendez adn W Milliken RFC 1546 : Anycasting </title>
Reference: [3] <author> Chad Yoshikawa, </author> <title> B Chun , Mike Dahlin et al Using Smart Clients to build scalable services </title>
Reference-contexts: On server failure, the peer machine can transparently take over for the failed machine. However, it requires a dedicated backup machine to mirror the primary server and it does not address the problem of load balancing and of the front end becoming a bottleneck. Smart Clients <ref> [3] </ref> migrates certain server functionality to the client side. When a user wishes to use a service, a bootstrapping mechanism is used to retrieve a server specific applet designed to access the service.
Reference: [4] <author> Ron Daniel, </author> <title> Michael Mealling Resolution of Uniform Resource Identifiers using the Domain Name System </title>
Reference: [5] <institution> T Brisco DNS Support for Load Balancing, </institution> <note> RFC 1794 </note>
Reference-contexts: We will describe each of these existing architectures and comment on their limitations. A number of web servers use Domain Name Server <ref> [5] </ref> (DNS) aliasing to distribute load across a number of cooperating machines to provide a service. A single logical host name for the service is mapped onto multiple IP addresses representing each of the physical machines comprising the service.
Reference: [6] <institution> T Bernes-Lee Hypertext Transfer Protocol HTTP/1.0, October 1995, </institution> <note> Working Draft </note>
Reference-contexts: Also there are a number of disadvantages in using DNS aliasing. First, random load balancing will not work as well for requests demonstrating wide variance in processing time. Second, DNS aliasing cannot account for geographic load balancing since DNS does not posses knowledge of client location/server capabilities. HTTP redirect <ref> [6] </ref> allows a server to instruct the client to send the request to another location instead of returning the requested data. Thus a central server machine can perform load balancing among a set of slave machines. This approach also has some limitations.
Reference: [7] <author> I Goldstein and P Dale A Scalable, </author> <title> Fault Resilient Server for the WWW </title>
Reference-contexts: Magic routers also require special topologies which may not be feasible in all situations. Finally magic routers are now aware of the load metrics relevant to individual services. Fail-safe TCP <ref> [7] </ref> replicates TCP state across two independent machines. On server failure, the peer machine can transparently take over for the failed machine.
Reference: [8] <author> E Anderson, D Patterson and E Brewer The Magicrouter, </author> <title> an application of Fast Packet Interposing 9 </title>
Reference-contexts: Thirdly the servers can still be overloaded attempting to serve redirects. Also this mechanism is currently only available for HTTP, it does not work with legacy servers. The Magic Router <ref> [8] </ref> provides transparent access by placing a modified router on a separate subnet from the machines providing the service. The magic router inspects and possibly modifies all IP packets before routing the packets to their destination.
References-found: 8

