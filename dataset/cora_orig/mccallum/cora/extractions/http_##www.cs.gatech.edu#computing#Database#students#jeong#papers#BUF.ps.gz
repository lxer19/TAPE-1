URL: http://www.cs.gatech.edu/computing/Database/students/jeong/papers/BUF.ps.gz
Refering-URL: http://www.cs.gatech.edu/computing/Database/students/jeong/jeong.html
Root-URL: 
Email: E-mail jeong@cc.gatech.edu, edwardo@cc.gatech.edu  
Title: Buffer Allocation for Sequential I/O  
Author: Byeong-Soo Jeong and Edward Omiecinski 
Date: September 1995  
Address: Atlanta, Georgia 30332 USA  
Affiliation: College of Computing Georgia Institute of Technology  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Hong-Tai Chou and David J. DeWitt. </author> <title> An Evaluation of Buffer Management Startegies for Relational Database Systems. </title> <booktitle> In Proceedings of the Eleventh International Conference on Very Large Data Bases, </booktitle> <pages> pages 127-141, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction Buffer management is a component of database management systems (DBMSs) that has a big impact on system performance. Thus, it has received much attention over the years and several buffer management strategies <ref> [1, 2, 3] </ref> have been suggested in order to make the best use of limited buffer space. The functions of buffer management can be divided into three modules: buffer search, buffer allocation and buffer replacement. Buffer search is responsible for locating a specific page in the buffer.
Reference: [2] <author> Douglas W. Cornell and Philip S. Yu. </author> <title> Integration of Buffer Management and Query Optimization In Relational Database Environment. </title> <booktitle> In Proceedings of the Fifteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 247-255, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction Buffer management is a component of database management systems (DBMSs) that has a big impact on system performance. Thus, it has received much attention over the years and several buffer management strategies <ref> [1, 2, 3] </ref> have been suggested in order to make the best use of limited buffer space. The functions of buffer management can be divided into three modules: buffer search, buffer allocation and buffer replacement. Buffer search is responsible for locating a specific page in the buffer.
Reference: [3] <author> Robert B. Hagmann. </author> <title> An Observation on Database Buffering Performance Metrics. </title> <booktitle> In Proceedings of the Twelfth International Conference on Very Large Data Bases, </booktitle> <pages> pages 289-293, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Buffer management is a component of database management systems (DBMSs) that has a big impact on system performance. Thus, it has received much attention over the years and several buffer management strategies <ref> [1, 2, 3] </ref> have been suggested in order to make the best use of limited buffer space. The functions of buffer management can be divided into three modules: buffer search, buffer allocation and buffer replacement. Buffer search is responsible for locating a specific page in the buffer. <p> In the second step (Bucket Joining Step), the algorithm joins the respective matching buckets from relations R and S. Here, we investigate the problem of buffer allocation during the bucket partition for Grace Hash Join. A similar study was done by Hagmann <ref> [3] </ref>. However, he did not consider very large input relations which require recursive bucket partitioning. As for the bucket partitioning of Grace Hash Join, we list two methods, i.e., multi-phase and single-phase bucket partition (as like Figure 9).
Reference: [4] <author> Donald E. Knuth. </author> <title> The Art of Computer Programming : Sorting and Searching, volume 3. </title> <publisher> Addison-Wesley, </publisher> <year> 1973. </year> <month> 16 </month>
Reference-contexts: During the initial run generation phase, the file is first divided into R sorted runs. Each run is roughly the size of the available main memory. In <ref> [4, pages 254-258] </ref>, the expected size of an initial run is estimated as two times the size of the available main memory by using a replacement selection technique based on a heap structure. <p> pages, then B out = 12 pages and B i = 4 pages will be the optimal buffer allocation for input/output. 4.3 Optimal Merging Pattern There have already been enough studies for finding optimal merging patterns of external sorting, which considers the external memory device such as tape or disk <ref> [4] </ref>. Here, we briefly review them for the purpose of supplementing our study. The merging pattern of external sorting is described by a tree representation. In a merge tree, external nodes represent the initial runs and internal nodes represent new runs which were generated from their children's node. <p> The merging pattern of external sorting is described by a tree representation. In a merge tree, external nodes represent the initial runs and internal nodes represent new runs which were generated from their children's node. As mentioned in <ref> [4, 366-369] </ref>, the optimal tress for merging pattern are not unique, if we allow arbitrary degrees at each internal node of a tree.
References-found: 4

