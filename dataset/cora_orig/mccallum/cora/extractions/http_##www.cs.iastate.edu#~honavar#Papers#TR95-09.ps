URL: http://www.cs.iastate.edu/~honavar/Papers/TR95-09.ps
Refering-URL: http://www.cs.iastate.edu/~honavar/publist.html
Root-URL: 
Email: e-mail: miklerjwongjhonavar@cs.iastate.edu  
Title: An Object-Oriented Approach to Modeling and Simulation of Routing in Large Communication Networks  
Author: Armin R. Mikler, Johnny S.K. Wong, Vasant Honavar 
Keyword: Object-oriented simulation, discrete event simulation, commu nication networks, routing  
Address: Ames, Iowa 50011, USA  
Affiliation: Department of Computer Science Iowa State University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Alaettinnoglu, G., Shankar, A.U., Dussa-Zieger, K., et al. </author> <title> Design a nd Implementation of MaRS: a Routing Testbed. Internetworking: </title> <journal> Research a nd Experience Vol. </journal> <volume> 5, </volume> <year> (1994): </year> <pages> 17-41. </pages>
Reference-contexts: The system's dynamic behavior emerges from the interaction among individual entities. Their interaction is often designed to optimize global performance criteria. This makes it difficult to understand the behavior of such systems by purely analytical means. Various well designed simulation packages with a wide range of features are available <ref> [1, 20, 3] </ref>. Off the shelf simulation packages generally provide a large set of pre-defined functions implemented in various types of simulation modules that enable users to easily construct a variety of simulation models. In addition, they usually provide a graphical user interfaces, and a wide variety of analysis tools. <p> The underlying simulation environment must therefore be flexible enough to accommodate the various models. Some of the requirements of such simulation environments have been elaborated in <ref> [1, 20] </ref>. The simulation environment must provide for efficient instantiation of entities, such as network nodes, links, and messages. This enables the user to make appropriate changes without redesigning and reprogramming the entire model and hence allows for the reuse of available modules. <p> noted that our simulation testbed can be extended to facilitate the investigation of various functions performed by network nodes and links (such as admission policies, queueing disciplines, etc.). 2.2 Simulation Methodology We have chosen to base the underlying simulation driver on discrete event simulation, although process emulation has been considered <ref> [1, 3] </ref>.
Reference: [2] <author> Bertsekas, D. and Gallager, R. </author> <title> Data Networks. 2nd ed. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: The behavior of each node is determined by various parameters such as link bandwidth, service rate, the choice of a routing algorithm, as well as parameters which control the acquisition and representation of the network state. 2.1 The Model Routing <ref> [2, 19] </ref> is the task of propagating a message from its source node towards its destination node. The routing algorithm used in the network determines how an intermediate node selects one of its neighbors as the next node to which the message should be sent. <p> Since network nodes and links are based upon the implementation of a single queue, it is necessary to validate the behavior of these basic elements. Among other experiments, we have simulated the behavior of single M/M/1 queue and a single M/D/1 queue <ref> [2, 6, 7, 16] </ref>. A 1024-node network model is used to investigate the limitations and intricacies of simulating a large communication environment.
Reference: [3] <author> Cassandras, </author> <title> C.G. Discrete Event Systems Modeling and Perfor-man ce Analysis. </title> <editor> Richard D. Irwin, </editor> <publisher> Inc., and Aksen Associates, Inc., Boston.1993 </publisher> . 
Reference-contexts: The system's dynamic behavior emerges from the interaction among individual entities. Their interaction is often designed to optimize global performance criteria. This makes it difficult to understand the behavior of such systems by purely analytical means. Various well designed simulation packages with a wide range of features are available <ref> [1, 20, 3] </ref>. Off the shelf simulation packages generally provide a large set of pre-defined functions implemented in various types of simulation modules that enable users to easily construct a variety of simulation models. In addition, they usually provide a graphical user interfaces, and a wide variety of analysis tools. <p> noted that our simulation testbed can be extended to facilitate the investigation of various functions performed by network nodes and links (such as admission policies, queueing disciplines, etc.). 2.2 Simulation Methodology We have chosen to base the underlying simulation driver on discrete event simulation, although process emulation has been considered <ref> [1, 3] </ref>. <p> A new state can only be entered through the execution of an event that modifies one or more of these units. As each event, and hence state change, involves a specific number of discrete units, this type of simulation is generally referred to as Discrete Event Simulation (DES) <ref> [3, 5] </ref>. DES is further divided into two broad classes, namely, time driven simulation and event driven simulation. For time driven simulation, an event e is selected from an event set E at every tick of a global clock. <p> Event e x is then dispatched to the object ( network node, link, or service routine) which originally scheduled this event to be executed at time t. As mentioned above, the event driven simulation strategy mandates events to be executed in strict order of their event time <ref> [3] </ref>. The event-driven simulation cycle is shown in Figure 1. The implementation of this mechanism draws upon two object classes, namely a linked list and generic events.
Reference: [4] <author> Deitel, H.M. and Deitel, </author> <title> P.J.How to Program C++. </title> <publisher> Prentice-Hall, </publisher> <address> En-glewood Cliffs. </address> <year> 1994. </year> <month> 30 </month>
Reference-contexts: We refer to our design as an object oriented discrete event simulation (OODES), and we have chosen C++ as the implementation language <ref> [4, 9] </ref>. For the implementation of our OODES environment we distinguish the model under investigation from the simulation testbed which can be considered the host for the model. Clearly, model and testbed are interrelated as the model will determine the type of statistics which is to be collected.
Reference: [5] <author> Fujimoto, </author> <title> R.M. Parallel Discrete Event Simulation. </title> <journal> Communications of the ACM Vol.33, </journal> <volume> No.10 </volume> (1990):30-53 
Reference-contexts: A new state can only be entered through the execution of an event that modifies one or more of these units. As each event, and hence state change, involves a specific number of discrete units, this type of simulation is generally referred to as Discrete Event Simulation (DES) <ref> [3, 5] </ref>. DES is further divided into two broad classes, namely, time driven simulation and event driven simulation. For time driven simulation, an event e is selected from an event set E at every tick of a global clock.
Reference: [6] <author> Gross, D. and Harris, </author> <title> C.M. Fundamentals of Queueing Theory. 2nd ed. </title> <publisher> John Wiley & Sons, </publisher> <address> New York.1985. </address>
Reference-contexts: Upon generating a new message, node n i randomly determines the time ffit until the next generation. A new generate message event is then scheduled at T + ffit, where T represents the current simulation time. The time interval ffit is exponentially distributed with a mean of 1= g <ref> [6, 7, 16, 17] </ref>. <p> Since network nodes and links are based upon the implementation of a single queue, it is necessary to validate the behavior of these basic elements. Among other experiments, we have simulated the behavior of single M/M/1 queue and a single M/D/1 queue <ref> [2, 6, 7, 16] </ref>. A 1024-node network model is used to investigate the limitations and intricacies of simulating a large communication environment.
Reference: [7] <author> Jain, R. </author> <title> The Art of Computer Systems Performance Analysis. </title> <publisher> Wiley & Sons, Inc., </publisher> <address> New York: </address> <year> 1991. </year>
Reference-contexts: The influx of messages into a network node n i is assumed to be Poisson distributed with a mean of , the arrival rate. This Poisson stream, however, can be broken down into two sub-streams, S 1 and S 2 with means of 1 and 2 , respectively <ref> [7, 16] </ref>. S 1 consists of messages generated in n i and injected into the network. Stream S 2 consists of messages that were sent to n i by nodes in the neighborhood H i of n i . <p> Upon generating a new message, node n i randomly determines the time ffit until the next generation. A new generate message event is then scheduled at T + ffit, where T represents the current simulation time. The time interval ffit is exponentially distributed with a mean of 1= g <ref> [6, 7, 16, 17] </ref>. <p> Since network nodes and links are based upon the implementation of a single queue, it is necessary to validate the behavior of these basic elements. Among other experiments, we have simulated the behavior of single M/M/1 queue and a single M/D/1 queue <ref> [2, 6, 7, 16] </ref>. A 1024-node network model is used to investigate the limitations and intricacies of simulating a large communication environment.
Reference: [8] <author> Lehmann, F., Seising, R., and Walther-Klaus, E. </author> <title> Simulation of Learning in Communication Networks. Simulation Practice and Theory 1, </title> <booktitle> No.1 (1993): </booktitle> <pages> 41-48. </pages>
Reference-contexts: Section 4 concludes with a summary of the paper. 3 2 Framework for Simulating Large Network The issue of uncertainty in communication networks and the simulation of learning from observation in such an environment to enhance fault management has been discussed in <ref> [8] </ref>. Our efforts to design an object oriented simulation environment were driven by the need to evaluate heuristic routing strategies for large communication infrastructures [10, 11, 12, 14]. The network to be simulated may consist of hundreds or even thousands of nodes, connected by communication links [18].
Reference: [9] <author> Lippman, </author> <title> S.B. C++ Primer. 2nd ed. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA.1991. </address>
Reference-contexts: We refer to our design as an object oriented discrete event simulation (OODES), and we have chosen C++ as the implementation language <ref> [4, 9] </ref>. For the implementation of our OODES environment we distinguish the model under investigation from the simulation testbed which can be considered the host for the model. Clearly, model and testbed are interrelated as the model will determine the type of statistics which is to be collected.
Reference: [10] <author> Mikler, A.R., Honavar, V.G., and Wong, J.S.K. </author> <title> Simulating a Traveller: </title>
Reference-contexts: Our efforts to design an object oriented simulation environment were driven by the need to evaluate heuristic routing strategies for large communication infrastructures <ref> [10, 11, 12, 14] </ref>. The network to be simulated may consist of hundreds or even thousands of nodes, connected by communication links [18]. Network nodes (routers) and communication links are the basic entities that need to be modeled in simulation. <p> In our system, the network state is represented by a knowledge base consisting of local load measures that are supplemented by global summary information <ref> [10, 11, 12, 13, 14] </ref>. The functions associated with a network node are: message generation, message routing, network state acquisition, and network state representation. 2.1.2 Communication Links Two nodes, n i and n j communicate via a communication link l i;j . Links are assumed to be uni-directional.
References-found: 10

