URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9128.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-tools.html
Root-URL: http://www.cs.purdue.edu
Email: spaf@cs.purdue.edu  
Title: OPUS: Preventing Weak Password Choices  
Author: Eugene H. Spafford 
Date: June 1991  
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Sciences Purdue University  
Pubnum: Purdue Technical Report CSD-TR 92-028  
Abstract: A common problem with systems that use passwords for authentication is that users choose weak passwords. Weak passwords are passwords that are easy to guess, simple to derive, or likely to be found in a dictionary attack. Thus, the choice of weak passwords may lead to a compromised system. Methods exist to prevent users from selecting and using weak passwords. One common method is to compare user choices against a list of unacceptable words. The problem with this approach is the amount of space required to store even a modest-sized dictionary of prohibited password choices. This paper describes a space-efficient method of storing a dictionary of words that are not allowed as password choices. Lookups in the dictionary are O(1) (constant time) no matter how many words are in the dictionary. The mechanism described has other interesting features, a few of which are described here. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ana Maria De Alvar e. </author> <title> How crackers crack passwords, or what passwords to avoid. </title> <type> Technical Report UCID-21515, </type> <institution> Lawrence Liv-ermore National Laboratory, </institution> <year> 1988. </year>
Reference-contexts: Even a rich character set may not be sufficient to create secure passwords if the combination of characters is restricted to an arbitrary set of possibilities. Thus, good password choice should avoid common words and names (cf. <ref> [1, 6, 11, 13, 16] </ref>). As a commonly-used example, consider the UNIX 1 password system.[13] The current password mechanism is based on a cryptographic transformation of a fixed string of zero bits, using the user-supplied password as a key.
Reference: [2] <author> Ana Maria De Alvar e and Jr. E. Eugene Schultz. </author> <title> A framework for password selection. </title> <type> Technical Report UCRL-99382, </type> <institution> Lawrence Livermore National Laboratory, </institution> <year> 1988. </year> <month> 9 </month>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [3] <author> M. Bishop. </author> <title> An application of a fast data encryption standard im-plementation. </title> <journal> Computing Systems, </journal> <volume> 1(3) </volume> <pages> 221-254, </pages> <year> 1988. </year>
Reference: [4] <author> Burton H. Bloom. </author> <title> Space/time trade-offs in hash coding with allowable errors. </title> <journal> Communications of the ACM, </journal> <volume> 13(7) </volume> <pages> 422-426, </pages> <month> July </month> <year> 1970. </year>
Reference-contexts: In practice, a much smaller filter gives very good results. To be more exact, assume we have a hash table of N bits, and d independent, uniform hash functions. From <ref> [4] </ref>, with n words we have the proportion of bits left unset, , equal to = (1 N n A word will be falsely shown as present in the dictionary if and only if it hashes to a set of bits that are all set.
Reference: [5] <author> Daniel Farmer and Eugene H. Spafford. </author> <title> The COPS security checker system. </title> <booktitle> In Proceedings of the Summer Usenix Conference. Usenix Association, </booktitle> <month> June </month> <year> 1990. </year>
Reference: [6] <author> Simson Garfinkel and Gene Spafford. </author> <title> Practical Unix Security. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastapol, CA, </address> <year> 1991. </year>
Reference-contexts: Even a rich character set may not be sufficient to create secure passwords if the combination of characters is restricted to an arbitrary set of possibilities. Thus, good password choice should avoid common words and names (cf. <ref> [1, 6, 11, 13, 16] </ref>). As a commonly-used example, consider the UNIX 1 password system.[13] The current password mechanism is based on a cryptographic transformation of a fixed string of zero bits, using the user-supplied password as a key.
Reference: [7] <author> Harold Joseph Highland. </author> <title> How to prevent the use of weak passwords. </title> <journal> EDPACS Newsletter, </journal> <volume> XVIII(9), </volume> <month> March </month> <year> 1991. </year>
Reference: [8] <author> David L. Jobusch and Arthur E. Oldehoeft. </author> <title> A survey of password mechanisms: Weaknesses an potential improvements. part 2. </title> <journal> Computers & Security, </journal> <volume> 8(8) </volume> <pages> 675-689, </pages> <year> 1989. </year>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [9] <author> David L. Jobusch and Arthur E. Oldehoeft. </author> <title> A survey of password mechanisms: Weaknesses and potential improvements. part 1. </title> <journal> Computers & Security, </journal> <volume> 8(7) </volume> <pages> 587-603, </pages> <year> 1989. </year>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [10] <author> Daniel V. Klein. </author> <title> A survey of, and improvements to, password security. </title> <booktitle> In UNIX Security Workshop II, </booktitle> <pages> pages 5-14. </pages> <booktitle> The Usenix Association, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [11] <author> Belden Menkus. </author> <title> Understanding password compromise. </title> <journal> Computers & Security, </journal> <volume> 7(5) </volume> <pages> 475-481, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Even a rich character set may not be sufficient to create secure passwords if the combination of characters is restricted to an arbitrary set of possibilities. Thus, good password choice should avoid common words and names (cf. <ref> [1, 6, 11, 13, 16] </ref>). As a commonly-used example, consider the UNIX 1 password system.[13] The current password mechanism is based on a cryptographic transformation of a fixed string of zero bits, using the user-supplied password as a key. <p> Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [12] <author> Chris Mitchell and Michael Walker. </author> <title> The password predictor a training aid for raising security awareness. </title> <journal> Computers & Security, </journal> <volume> 7(5) </volume> <pages> 475-481, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [13] <author> Robert Morris and Ken Thompson. </author> <title> Password security: a case history. In Unix Programmer's Supplementary Documentation. </title> <journal> AT&T, </journal> <month> November </month> <year> 1979. </year>
Reference-contexts: Even a rich character set may not be sufficient to create secure passwords if the combination of characters is restricted to an arbitrary set of possibilities. Thus, good password choice should avoid common words and names (cf. <ref> [1, 6, 11, 13, 16] </ref>). As a commonly-used example, consider the UNIX 1 password system.[13] The current password mechanism is based on a cryptographic transformation of a fixed string of zero bits, using the user-supplied password as a key.
Reference: [14] <author> James K. Mullin. </author> <title> A second look at Bloom filters. </title> <journal> Communications of the ACM, </journal> <volume> 26(8) </volume> <pages> 570-571, </pages> <month> August </month> <year> 1983. </year> <month> 10 </month>
Reference: [15] <author> Neil Munro. </author> <title> Simple password opens navy computer to hacker. Government Computer News, </title> <address> 7(15):61, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: At 50,000 attempts per second, an exhaustive search of this keyspace would require over 27,480 years to complete. 2 This tendency to select weak 3 passwords has led to a number of system break-ins, some quite highly publicized: cf. <ref> [15, 19, 21, 22, 27] </ref>. Current technology is such that construction of a large pre-encrypted dictionary on-line using optical disks is easily done. By creating such a dictionary, a password search and attack may be easily conducted in a matter of seconds.
Reference: [16] <institution> National Computer Security Center. Password management guideline. </institution> <type> Technical Report CSC-STD-002-85, </type> <institution> US Department of Defense, </institution> <year> 1985. </year>
Reference-contexts: Even a rich character set may not be sufficient to create secure passwords if the combination of characters is restricted to an arbitrary set of possibilities. Thus, good password choice should avoid common words and names (cf. <ref> [1, 6, 11, 13, 16] </ref>). As a commonly-used example, consider the UNIX 1 password system.[13] The current password mechanism is based on a cryptographic transformation of a fixed string of zero bits, using the user-supplied password as a key. <p> Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [17] <author> Robert Nix. </author> <title> Experience with a space efficient way to store a dictionary. </title> <journal> Communications of the ACM, </journal> <volume> 24(5) </volume> <pages> 297-298, </pages> <month> May </month> <year> 1981. </year>
Reference: [18] <author> M. V. Ramakrishna. </author> <title> Practical performance of Bloom filters and parallel free-text searching. </title> <journal> Communications of the ACM, </journal> <volume> 32(10) </volume> <pages> 1237-1239, </pages> <month> October </month> <year> 1989. </year>
Reference: [19] <author> Brian Reid. </author> <title> Reflections on some recent computer break-ins. </title> <journal> Communications of the ACM, </journal> <volume> 30(2) </volume> <pages> 103-105, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: At 50,000 attempts per second, an exhaustive search of this keyspace would require over 27,480 years to complete. 2 This tendency to select weak 3 passwords has led to a number of system break-ins, some quite highly publicized: cf. <ref> [15, 19, 21, 22, 27] </ref>. Current technology is such that construction of a large pre-encrypted dictionary on-line using optical disks is easily done. By creating such a dictionary, a password search and attack may be easily conducted in a matter of seconds.
Reference: [20] <author> Bruce L. Riddle, Muray S. Miron, and Judith A. Semo. </author> <title> Passwords in use in a university timesharing environment. </title> <journal> Computers & Security, </journal> <volume> 8(7) </volume> <pages> 569-578, </pages> <year> 1989. </year>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [21] <author> Donn Seeley. </author> <title> Password cracking: A game of wits. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 700-703, </pages> <month> June </month> <year> 1989. 1989. </year>
Reference-contexts: At 50,000 attempts per second, an exhaustive search of this keyspace would require over 27,480 years to complete. 2 This tendency to select weak 3 passwords has led to a number of system break-ins, some quite highly publicized: cf. <ref> [15, 19, 21, 22, 27] </ref>. Current technology is such that construction of a large pre-encrypted dictionary on-line using optical disks is easily done. By creating such a dictionary, a password search and attack may be easily conducted in a matter of seconds.
Reference: [22] <author> Eugene H. Spafford. </author> <title> The Internet Worm: Crisis and aftermath. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 678-687, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: At 50,000 attempts per second, an exhaustive search of this keyspace would require over 27,480 years to complete. 2 This tendency to select weak 3 passwords has led to a number of system break-ins, some quite highly publicized: cf. <ref> [15, 19, 21, 22, 27] </ref>. Current technology is such that construction of a large pre-encrypted dictionary on-line using optical disks is easily done. By creating such a dictionary, a password search and attack may be easily conducted in a matter of seconds.
Reference: [23] <author> Eugene H. Spafford. </author> <title> Preventing weak password choices. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 446-455, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Reusable passwords are a commonly-used and well-studied method of authentication.[25] A unique sequence of characters is presented to the fl Versions of this paper have appeared as <ref> [23] </ref> and [24]. 1 system when identification is needed. This sequence is then compared with a stored sequence, perhaps after some transformation (e.g., encryption). A match provides the proof of identity.
Reference: [24] <author> Eugene H. Spafford. </author> <title> Opus: Preventing weak password choices. </title> <journal> Computers & Security, </journal> <volume> 11(3) </volume> <pages> 273-278, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Reusable passwords are a commonly-used and well-studied method of authentication.[25] A unique sequence of characters is presented to the fl Versions of this paper have appeared as [23] and <ref> [24] </ref>. 1 system when identification is needed. This sequence is then compared with a stored sequence, perhaps after some transformation (e.g., encryption). A match provides the proof of identity.
Reference: [25] <author> Eugene H. Spafford and Stephen A. Weeber. </author> <title> User authentication and related topics: An annotated bibliograph. </title> <type> Technical Report 91-086, </type> <institution> Purdue University, Department of Computer Sciences, </institution> <month> De-cember </month> <year> 1991. </year>
Reference: [26] <author> Cliff Stoll. </author> <title> How secure are computers in the U.S.A.? an analysis of a series of attacks on MilNet computers. </title> <journal> Computers & Security, </journal> <volume> 7(6) </volume> <pages> 543-547, </pages> <year> 1988. </year>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
Reference: [27] <author> Cliff Stoll. </author> <title> The Cuckoo's Egg. </title> <publisher> Doubleday, </publisher> <address> NY, NY, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: At 50,000 attempts per second, an exhaustive search of this keyspace would require over 27,480 years to complete. 2 This tendency to select weak 3 passwords has led to a number of system break-ins, some quite highly publicized: cf. <ref> [15, 19, 21, 22, 27] </ref>. Current technology is such that construction of a large pre-encrypted dictionary on-line using optical disks is easily done. By creating such a dictionary, a password search and attack may be easily conducted in a matter of seconds.
Reference: [28] <author> Patrick H. Wood and Stephen G. Kochan. </author> <title> Unix System Security. </title> <publisher> Hayden Book Company, </publisher> <year> 1987. </year> <month> 12 </month>
Reference-contexts: Despite wide-spread publication of good password policy and the risks inherent in bad passwords, users continue to select weak passwords. This is a continuing threat to the best-managed systems. (For example: <ref> [2, 8, 9, 10, 11, 12, 16, 20, 26, 28] </ref>.) There are four basic methods for a system administrator to enforce better reusable password security on a computer system: 1. Educate and encourage users to make better choices of passwords. 2.
References-found: 28

