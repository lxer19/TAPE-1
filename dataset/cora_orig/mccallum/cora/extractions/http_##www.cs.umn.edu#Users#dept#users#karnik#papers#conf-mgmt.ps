URL: http://www.cs.umn.edu/Users/dept/users/karnik/papers/conf-mgmt.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/karnik/papers/
Root-URL: http://www.cs.umn.edu
Title: Reliable Management of Distributed Computations in Nexus  
Author: Anand Tripathi Surya P. Koneru Clifton Nock Renu Tewari Neeran M. Karnik Vijay Bandi Khaled Day Terence Noonan 
Address: Minneapolis MN 55455  
Affiliation: Department of Computer Science University of Minnesota,  
Abstract: This paper describes the approach taken for configuration management in the Nexus distributed operating system. This approach uses kernel-level support for monitoring status of distributed components of an application. Periodic user-level messages are no longer required for status monitoring. Group and dependency relationships between such components can be defined by the programmer for the purpose of configuration monitoring and management. An object belonging to a distributed application can be monitored by its host kernel for some system-defined exception conditions. When any of these conditions arise, other objects are notified through signals or messages, as specified by the programmer. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory Andrews, Ronald Olsson, Michael Coffin, Irving Elshoff, Kelvin Nilsen, Titus Purdin, and Gregg Townsend. </author> <title> An overview of the SR language and implementation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(1) </volume> <pages> 51-86, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: For this reason such systems are easily portable. Some of the examples of systems in this category are PVM [18], Express [5], and Isis [2]. In the second category we have distributed programming languages and models such as Argus [8], SR <ref> [1] </ref>, and Conic [9]. In the third category we have distributed operating systems like Amoeba [6] Mach [11], Cronus [13], Clouds [12], and V system [4], which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing.
Reference: [2] <author> Kenneth Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <type> Technical Report TR-91-1216, </type> <institution> Cornell University, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Programming environments are generally implemented as user-level software using the available operating system facilities. For this reason such systems are easily portable. Some of the examples of systems in this category are PVM [18], Express [5], and Isis <ref> [2] </ref>. In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9]. In the third category we have distributed operating systems like Amoeba [6] Mach [11], Cronus [13], Clouds [12], and V system [4], which are kernel level implementations. <p> A process group in the V system is a set of processes identified by a single identifier, which can be distributed on various hosts in the network. The process group mechanism and multicast communication are used to implement distributed and replicated implementation of services. For reliable distributed computing Isis <ref> [2] </ref> provides process groups and group programming tools. Groups in Isis are viewed as a set of commu nication end points. Isis tools provide support for group communication, synchronization using locks, monitoring of group membership and site failures, and triggering of recovery.
Reference: [3] <author> Yih-Farn Chen, Atul Prakash, and C.V.Ramamoorthy. </author> <title> The Network Event Manager. </title> <booktitle> Proceedings of the Computer Networking symposium, </booktitle> <pages> pages 169-178, </pages> <year> 1986. </year>
Reference: [4] <author> David Cheriton. </author> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <month> March </month> <year> 1988. </year>
Reference-contexts: In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9]. In the third category we have distributed operating systems like Amoeba [6] Mach [11], Cronus [13], Clouds [12], and V system <ref> [4] </ref>, which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing. The foremost attractive feature of such systems is their portability to different computers because they do not require kernel modifications.
Reference: [5] <author> Parasoft Corporation. </author> <title> Express 3.2 Introductory Guide. </title> <publisher> Parasoft Corporation, </publisher> <address> 2500, E.Foothill Blvd, Pasadena, CA 91107, </address> <year> 1990. </year>
Reference-contexts: Programming environments are generally implemented as user-level software using the available operating system facilities. For this reason such systems are easily portable. Some of the examples of systems in this category are PVM [18], Express <ref> [5] </ref>, and Isis [2]. In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9].
Reference: [6] <author> A. S. Tanenbaum et al. </author> <title> Experiences with the Amoeba Distributed Operating System. </title> <journal> Communications of the ACM, </journal> <volume> 33(12), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Some of the examples of systems in this category are PVM [18], Express [5], and Isis [2]. In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9]. In the third category we have distributed operating systems like Amoeba <ref> [6] </ref> Mach [11], Cronus [13], Clouds [12], and V system [4], which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing.
Reference: [7] <author> Luping Liang, Samuel Chanson, and Gerald Neufeld. </author> <title> Process Groups and Group Communications: Classification and Requirements. </title> <address> IEEE-Computer, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: Distributed systems often deal with groups of objects or entities. Instead of a single resource in conventional systems, a group of servers or resources are fundamental in distributed systems <ref> [7] </ref>. A process group in the V system is a set of processes identified by a single identifier, which can be distributed on various hosts in the network. The process group mechanism and multicast communication are used to implement distributed and replicated implementation of services.
Reference: [8] <author> Barbara Liskov. </author> <title> Distributed Programming in Argus. </title> <journal> Communications of the ACM, </journal> <volume> 31(3), </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: For this reason such systems are easily portable. Some of the examples of systems in this category are PVM [18], Express [5], and Isis [2]. In the second category we have distributed programming languages and models such as Argus <ref> [8] </ref>, SR [1], and Conic [9]. In the third category we have distributed operating systems like Amoeba [6] Mach [11], Cronus [13], Clouds [12], and V system [4], which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing.
Reference: [9] <author> Jeff Magee, Jeff Kramer, and Morris Slo-man. </author> <title> Constructing distributed systems in conic. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6) </volume> <pages> 663-675, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: For this reason such systems are easily portable. Some of the examples of systems in this category are PVM [18], Express [5], and Isis [2]. In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic <ref> [9] </ref>. In the third category we have distributed operating systems like Amoeba [6] Mach [11], Cronus [13], Clouds [12], and V system [4], which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing.
Reference: [10] <author> Keith Marzullo, Robert Cooper, Mark Wood, and Kenneth Birman. </author> <title> Tools for distributed application management. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 42-51, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Most of the programming environments use periodic heartbeat messages for status monitoring. The group membership service in Isis supports facilities to monitor group membership and site failures and to trigger recoveries. Isis/Meta <ref> [10] </ref> uses rule-based specifications for configuration management. PVM and Express also support detection of process crashes, but do not support explicit mechanisms for reconfiguration. Both V system and Mach provide kernel-level support for exception handling.
Reference: [11] <author> M.Young, A.Tevanian, R.Rashid, D.Golub, J.Eppinger, J.Chew, W.Bolosky, D.Black, and R.Baron. </author> <title> The Duality of Memory and Communication in the Implementation of a Multiprocessor Operating System. </title> <booktitle> In Proceedings of the 11th Symposium on Operating System Principles, </booktitle> <month> November </month> <year> 1987. </year>
Reference-contexts: In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9]. In the third category we have distributed operating systems like Amoeba [6] Mach <ref> [11] </ref>, Cronus [13], Clouds [12], and V system [4], which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing. The foremost attractive feature of such systems is their portability to different computers because they do not require kernel modifications.
Reference: [12] <author> P.Dasgupta, R.LeBlanc, M.Ahamad, and U.Ramachandran. </author> <title> The Clouds Distributed Operating System. </title> <journal> Computer Magazine, </journal> <pages> pages 34-44, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9]. In the third category we have distributed operating systems like Amoeba [6] Mach [11], Cronus [13], Clouds <ref> [12] </ref>, and V system [4], which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing. The foremost attractive feature of such systems is their portability to different computers because they do not require kernel modifications.
Reference: [13] <author> Richard Schantz, Robert Thomas, and Girome Bono. </author> <booktitle> The Architecture of the Cronus Distributed Operating System. In Proc. of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 250-259, </pages> <year> 1986. </year>
Reference-contexts: In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9]. In the third category we have distributed operating systems like Amoeba [6] Mach [11], Cronus <ref> [13] </ref>, Clouds [12], and V system [4], which are kernel level implementations. Parallel programming environments are implemented at the user-level using the standard protocols available for message passing. The foremost attractive feature of such systems is their portability to different computers because they do not require kernel modifications.
Reference: [14] <author> J.F. Schoch and J.A. Hupp. </author> <title> The Worm Programs Early Experience with a Distributed Computation. </title> <journal> Communications of the ACM, </journal> <volume> 25(3), </volume> <month> March </month> <year> 1982. </year>
Reference-contexts: second option allows type-objects and their instances to be managed by one or more UNIX processes that execute the code defined by the programmer. 4 Primitives for Configuration Management To introduce the configuration management primitives of Nexus, we shall use a simple application example, the existential worm program described in <ref> [14] </ref>, since it exhibits many of the requirements of a typical distributed application. This application has a user interface (or manager) process and some n processes called worm segments, possibly running on different machines.
Reference: [15] <author> A. S. Tanenbaum and R. van Renesse. </author> <title> Distributed Operating systems. </title> <journal> Computing surveys, </journal> <month> December </month> <year> 1985. </year>
Reference: [16] <author> Anand Tripathi. </author> <title> An Overview of the Nexus Distributed Operating System Design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6), </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Workstation clusters connected by local-area networks offer great potential for high performance distributed computing by exploiting idle computing power for parallel processing. In this paper we discuss the facilities provided by the Nexus distributed operating system <ref> [16] </ref> for supporting configuration management of distributed computations. The objective of the Nexus design is to provide a set of simple, network-transparent abstractions to the programmer to utilize the distributed computing power and resources in such a cluster as a single monolithic computing facility.
Reference: [17] <author> Anand Tripathi and Terence Noonan. </author> <title> Design of a Remote Procedure Call system for Object-Oriented Distributed Programming. </title> <type> Technical Report 92-20, </type> <institution> University of Minnesota, Min-neapolis, </institution> <year> 1992. </year>
Reference-contexts: The programmer can also specify the DOMAIN, which is a set of preferred machines or architectures where the instances of the type are to be created. Tools such as the Nexus RPC compiler <ref> [17] </ref> and the Nexus Thread package are available to the programmer for building object managers. In defining a new type-object, the programmer has to specify how the class operations are to be implemented and how the instances are to be managed. There are two choices.
Reference: [18] <author> V.S.Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <journal> Concurrency: Practice & Experience, </journal> <volume> 2(4), </volume> <month> December </month> <year> 1990. </year> <pages> Page 8 </pages>
Reference-contexts: Programming environments are generally implemented as user-level software using the available operating system facilities. For this reason such systems are easily portable. Some of the examples of systems in this category are PVM <ref> [18] </ref>, Express [5], and Isis [2]. In the second category we have distributed programming languages and models such as Argus [8], SR [1], and Conic [9].
References-found: 18

