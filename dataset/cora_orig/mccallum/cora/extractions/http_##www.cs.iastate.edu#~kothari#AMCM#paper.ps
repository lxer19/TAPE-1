URL: http://www.cs.iastate.edu/~kothari/AMCM/paper.ps
Refering-URL: http://www.cs.iastate.edu/~kothari/kothari.html
Root-URL: http://www.cs.iastate.edu
Title: A Communication Library Using Active Messages to Improve Performance of PVM  
Author: Krishnan R Subramaniam, Suraj C Kothari Don Heller 
Address: Ames, Iowa 50011, USA  Ames, Iowa 50011, USA  
Affiliation: Department of Computer Science Iowa State University,  Ames Laboratory,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Adam Beguelin, Jack Dongarra, Al Geist, Robert Manchek, Steve Otto, and Jon Walpole. </author> <title> PVM: Experiences, current status and future direction. </title> <booktitle> Supercomputing '93 Proceedings, </booktitle> <year> 1993. </year>
Reference-contexts: To reduce the number of 3 situations where an application process gets blocked in a receive call, is all the more important in the current version of PVM as it does not support multi-threaded applications. The future versions of PVM are expected to support multi-threaded applications <ref> [1] </ref>. The PVM-AM communication library will be a complement to the threaded versions of PVM. In order to receive messages as soon as they arrive at the network interface, we need a notification mechanism to indicate the arrival of a new message.
Reference: [2] <author> G.A.Geist and V.S.Sunderam. </author> <title> Network based concurrent computing on the PVM system. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 4(4), </volume> <month> June </month> <year> 1992. </year>
Reference: [3] <author> K.E.Schauser and C.J.Scheiman. </author> <title> Active Messages implementations for the Meiko CS-2. </title> <type> Technical report, </type> <institution> Department of Computer Science, UC Santa Barbara, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Recent research has shown that communication using active messages has a lower message passing latency compared to other communication schemes [6, 11]. Implementations of active messages on different platforms including, a set of workstations connected by FDDI [6], CM-5 [5], and more recently on the Meiko-CS2 <ref> [3] </ref> have shown that AM has the potential to provide an order of magnitude reduction in message passing latency over the existing communication schemes. <p> In order to receive messages as soon as they arrive at the network interface, we need a notification mechanism to indicate the arrival of a new message. Typical implementations of AM use either interrupt based or polling based notification mechanisms <ref> [4, 3] </ref>. Unix signals can be used to develop an interrupt driven message notification scheme for PVM. To deal with the high cost of signal handling in Unix, our message notification scheme uses a combination of signal handling and polling. The signal handler receives the pending message.
Reference: [4] <author> Lok T. Liu and David E. Culler. </author> <title> Measurements of Active Messages performance on the CM-5. </title> <type> Technical report, </type> <institution> Department of Computer Science, UC Berkeley, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: In order to receive messages as soon as they arrive at the network interface, we need a notification mechanism to indicate the arrival of a new message. Typical implementations of AM use either interrupt based or polling based notification mechanisms <ref> [4, 3] </ref>. Unix signals can be used to develop an interrupt driven message notification scheme for PVM. To deal with the high cost of signal handling in Unix, our message notification scheme uses a combination of signal handling and polling. The signal handler receives the pending message. <p> The combination of signaling and polling mechanisms is particularly useful in applications that have a bursty communication pattern [8]. Usually polling is cheaper than signal handling <ref> [4] </ref>. In systems which allow efficient signal handling one may want to use the interrupt driven mode alone. Switching between the computation and the communication threads, requires us to save not only the processor context, but also the context of the communication functions in PVM.
Reference: [5] <author> L.W.Tucker and M.Mainwaring. </author> <title> CMMD:Active messages on the CM-5. </title> <journal> Parallel Computing, </journal> <volume> 20(4), </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: Recent research has shown that communication using active messages has a lower message passing latency compared to other communication schemes [6, 11]. Implementations of active messages on different platforms including, a set of workstations connected by FDDI [6], CM-5 <ref> [5] </ref>, and more recently on the Meiko-CS2 [3] have shown that AM has the potential to provide an order of magnitude reduction in message passing latency over the existing communication schemes.
Reference: [6] <author> Richard P. Martin. HPAM: </author> <title> An active message layer for a network of HP workstations. </title> <booktitle> Proceedings of Hot Interconnects II, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: The new communication library (PVM-AM) is based on the concept of Active Messages (AM ) [11]. Recent research has shown that communication using active messages has a lower message passing latency compared to other communication schemes <ref> [6, 11] </ref>. Implementations of active messages on different platforms including, a set of workstations connected by FDDI [6], CM-5 [5], and more recently on the Meiko-CS2 [3] have shown that AM has the potential to provide an order of magnitude reduction in message passing latency over the existing communication schemes. <p> Recent research has shown that communication using active messages has a lower message passing latency compared to other communication schemes [6, 11]. Implementations of active messages on different platforms including, a set of workstations connected by FDDI <ref> [6] </ref>, CM-5 [5], and more recently on the Meiko-CS2 [3] have shown that AM has the potential to provide an order of magnitude reduction in message passing latency over the existing communication schemes.
Reference: [7] <author> Philip J. Mucci and Jack Dongarra. </author> <title> Possibilities for Active Messaging in PVM. </title> <type> Technical report, </type> <institution> University of Tennessee, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: Implementations of active messages on different platforms including, a set of workstations connected by FDDI [6], CM-5 [5], and more recently on the Meiko-CS2 [3] have shown that AM has the potential to provide an order of magnitude reduction in message passing latency over the existing communication schemes. In <ref> [7] </ref> Dongarra examines the feasibility of adding an AM-layer to PVM, and concludes that a carefully implemented version of AM will provide an improvement over the existing communication primitives in the PVM. This paper describes an effective implementation of AM for reducing the communication latency in PVM environment. <p> Various solutions have been proposed to reduce the discrepancy between the network's physical latency and the actual message passing latency observed while using communication protocols. Some of the solutions proposed are, memory mapping of the network buffers directly into user-space <ref> [7] </ref>, using a DLPI (Data Link Provider Interface), writing a device driver for the network interface which can be controlled by the user [11]. These approaches either involve extensive patches to the existing kernel [11], or require root-level permissions for the user [7], or compromise the security of the network [7]. <p> mapping of the network buffers directly into user-space <ref> [7] </ref>, using a DLPI (Data Link Provider Interface), writing a device driver for the network interface which can be controlled by the user [11]. These approaches either involve extensive patches to the existing kernel [11], or require root-level permissions for the user [7], or compromise the security of the network [7]. Another problem which increases the message passing latency is that the sender may have to 5 queue up messages to be sent if the receiver is not ready to receive the messages [11]. <p> <ref> [7] </ref>, using a DLPI (Data Link Provider Interface), writing a device driver for the network interface which can be controlled by the user [11]. These approaches either involve extensive patches to the existing kernel [11], or require root-level permissions for the user [7], or compromise the security of the network [7]. Another problem which increases the message passing latency is that the sender may have to 5 queue up messages to be sent if the receiver is not ready to receive the messages [11].
Reference: [8] <author> W. Richard Stevens. </author> <title> Unix Network Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: PVM messages are tagged messages, i.e., each message is associated with a "tag" defined by the sender. Tagged messages enable a receiver to receive messages of a particular type. Communication between tasks is established using UDP sockets <ref> [8] </ref>. 4 The daemon process runs on each PVM host machine. The daemons communicate among them-selves to perform operations like starting up a user task, multicasting messages, finding the status of a particular task on a particular host. <p> In many cases the PVM communication library achieves only 15%- 20% of the network's theoretical capacity [9]. The extra latency is partially due to the overheads involved in TCP/IP communication <ref> [8] </ref>, e.g. the UDP protocol computes a checksum for every packet sent out. The complex message buffering scheme in PVM also lowers the performance. Various solutions have been proposed to reduce the discrepancy between the network's physical latency and the actual message passing latency observed while using communication protocols. <p> Most Unix systems do not give the user direct control of the machine level interrupts, they merely provide an interface to interrupts through Unix signals. Many Unix systems do not implement a "reliable" version of signals <ref> [8] </ref>, i.e., if two signals arrive in quick succession, one could lose one of the signals. This means that if we were to choose signals as a message notification mechanism we could lose some messages. <p> The problem now is how do we know when a message has arrived if we disable polling ? Our solution is to use a signaling mechanism to notify the arrival of a message on a socket, by setting up the sockets to generate a SIGIO signal <ref> [8] </ref> if there is a mes 7 sage to be read. The signal handler for SIGIO moves the flow of execution to the communication thread and also restarts the regular switching between the computation and communication threads (i.e. the polling mechanism). <p> If we set N poll very high then the system becomes almost a polling mechanism, and if we set N poll to zero then we make the system fully interrupt driven. The combination of signaling and polling mechanisms is particularly useful in applications that have a bursty communication pattern <ref> [8] </ref>. Usually polling is cheaper than signal handling [4]. In systems which allow efficient signal handling one may want to use the interrupt driven mode alone.
Reference: [9] <author> S.White, A.Alund, and V.S.Sunderam. </author> <title> Performance of the NAS parallel benchmarks on PVM-based networks. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 26(1), </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: In many cases the PVM communication library achieves only 15%- 20% of the network's theoretical capacity <ref> [9] </ref>. The extra latency is partially due to the overheads involved in TCP/IP communication [8], e.g. the UDP protocol computes a checksum for every packet sent out. The complex message buffering scheme in PVM also lowers the performance.
Reference: [10] <author> Thorsten von Eicken. </author> <title> Building parallel programming languages using active messages. </title> <type> Technical report, </type> <institution> Department of Computer Science, Cornell University, </institution> <year> 1994. </year>
Reference-contexts: Later, when the receiver executes a receive function call, the receiver may be blocked as the sender is yet to re-transmit the message. This type of blocking, encountered in PVM, is avoided by our communication scheme because the message is received the first time it is sent. In <ref> [10] </ref> it is shown that draining the network, i.e., receiving messages as quickly as possible when they arrive, is an important factor in reducing message passing latency.

References-found: 10

