URL: http://www.win.tue.nl/math/dw/pp/berry/papers/CS-R9413.ps.gz
Refering-URL: http://www.win.tue.nl/math/dw/pp/berry/papers.html
Root-URL: http://www.win.tue.nl
Title: REPORTRAPPORT Proofs of Partial Knowledge and Simplified Design of Witness Hiding Protocols  
Author: Ronald Cramer, Ivan Damgaard, Berry Schoenmakers 
Date: 1994  
Affiliation: Centrum voor Wiskunde en Informatica  Computer Science/Department of Algorithmics and  
Pubnum: Architecture CS-R9413  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> J. Benaloh and J. Leichter: </author> <title> Generalized Secret Sharing and Monotone Functions, </title> <booktitle> Proc. of Crypto 88, </booktitle> <publisher> Springer Verlag LNCS series, </publisher> <pages> 25-35. </pages>
Reference-contexts: However, the number of possible subsets is exponential in n, so for non-constant n this scheme will not necessarily be smooth. For non-constant n, it is an open question whether there are secret sharing schemes of the kind we need for any sequence of access structures. Benaloh and Leichter <ref> [1] </ref> have proposed secret sharing schemes for more general access structures defined by monotone formulae, i.e. Boolean formulae containing only AND and OR operators. Consider a monotone formula F with n variables. <p> Proposition 4 If F is monotone then F is also monotone. Conversely, for any monotone access structure , there is a monotone formula F , such that = F . We have that ( F ) fl = F fl . In <ref> [1] </ref>, a generic method is given that, based on any monotone formula F , builds a perfect secret sharing scheme for the access structure F . The formula F may contain general threshold operators, in addition to simple AND and OR operations. <p> The formula F may contain general threshold operators, in addition to simple AND and OR operations. For a polynomial size formula, it can be shown that the secret sharing scheme from <ref> [1] </ref> satisfies all of the above requirements except possibly requirement 5. This leads to: 4. Main Result 9 Proposition 5 Let f (k)g be a family of access structures such that (k) = F k for a family of polynomial size monotone formula fF k g. <p> The statement on the communication complexity follows from the fact that the shares of the secret sharing scheme constructed in <ref> [1] </ref> from F (k) have maximal size tM (k) bits, so that we have to use M (k) parallel executions of P in the construction of Theorem 1. 2 4.
Reference: 2. <author> D. Chaum and E. van Heyst: </author> <title> Group Signatures, </title> <booktitle> Proc. of EuroCrypt 91, </booktitle> <publisher> Springer Verlag LNCS series. </publisher>
Reference-contexts: By this method, a signature can be computed which will show that a qualified subset was present, without revealing which subset was involved. This may be seen as a generalization of the group signature concept, introduced by Chaum and Van Heyst <ref> [2] </ref>. One aspect of group signatures which is missing here, however, is that it is not possible later to "open" signatures to discover the identities of users involved. 6. Open Problems Two obvious open problems remain.
Reference: 3. <author> I. Damgard: </author> <title> Interactive Hashing can Simplify Zero-Knowledge Protocol Design Without Complexity Assumptions, </title> <booktitle> Proc. of Crypto 93, </booktitle> <publisher> Springer Verlag LNCS series. </publisher>
Reference-contexts: This was done using general zero-knowledge techniques and the assumption that one-way functions exist. Compared to [4], our result shows that if we start from a proof of knowledge with properties as described above, witness hiding protocols can be constructed much more efficiently and without using computational assumptions. In <ref> [3] </ref>, a transformation from honest verifier zero-knowledge proof was given for protocols including the type we consider. That transformation produced zero-knowledge protocols, but on the other hand greatly increased the communication and round complexity so that, contrary to ours, the practical value of that transformation is quite limited.
Reference: 4. <author> U. Feige and A. Shamir: </author> <title> Witness Indistinguishable and Witness Hiding Protocols, </title> <booktitle> Proc. of STOC 90. </booktitle>
Reference-contexts: In some recent independent work, De Santis et al. [11] apply techniques similar to ours to proofs of membership in random self-reducible languages. This leads to perfect zero-knowledge proofs for monotone Boolean operations over such languages. In <ref> [4] </ref>, Feige and Shamir introduce the concepts of witness indistinguishable and witness hiding protocols and prove the existence of witness hiding protocols for a large class of problems, including the ones we consider (Corollary 4.4). This was done using general zero-knowledge techniques and the assumption that one-way functions exist. <p> This was done using general zero-knowledge techniques and the assumption that one-way functions exist. Compared to <ref> [4] </ref>, our result shows that if we start from a proof of knowledge with properties as described above, witness hiding protocols can be constructed much more efficiently and without using computational assumptions. In [3], a transformation from honest verifier zero-knowledge proof was given for protocols including the type we consider. <p> If the target is zero-knowledge, however, the increased round complexity seems to be unavoidable. 2. Proofs of Knowledge Most of our formalism with respect to protocols follows Feige and Shamir <ref> [4] </ref>, but some of the technicalities have been omitted in this extended abstract. Our protocols take place between a prover P and a verifier V , both of which are interactive probabilistic polynomial time Turing machines. Both prover and verifier have private auxiliary input tapes. <p> We call this special honest verifier zero-knowledge. We will later need the concepts of witness indistinguishable (WI) and witness hiding (WH) protocols, which were introduced in <ref> [4] </ref>. Informally, a protocol is witness indistinguishable if conversations generated with the same x but different elements from w (x) have indistinguishable distributions, i.e. even a cheating verifier cannot tell which witness the prover is using. <p> A protocol is witness hiding over G, if it does not help even a cheating verifier to compute a witness for x with non-negligible probability when the x is generated by G. We refer to <ref> [4] </ref> for details. With respect to the witness hiding property, we can already now note the following: 3. Secret Sharing 5 Proposition 1 Let P be a three round public coin proof of knowledge for relation R. If P is honest verifier zero-knowledge, then P is witness indistinguishable. <p> The rest of the proof is therefore the same as for Theorem 1. 2 The witness indistinguishable property of the protocol from Theorem 1 leads us to a generalization of Theorem 4.3 of <ref> [4] </ref>. To state the result, we need to introduce the concept of an invulnerable generator G for a relation R. Such generators were first introduced in [6] and later used in slightly modified form in [4]. <p> of the protocol from Theorem 1 leads us to a generalization of Theorem 4.3 of <ref> [4] </ref>. To state the result, we need to introduce the concept of an invulnerable generator G for a relation R. Such generators were first introduced in [6] and later used in slightly modified form in [4]. Such a generator is a probabilistic polynomial time algorithm which outputs a pair (x; w) 2 R. <p> If for all k, (k) contains at least two different minimal qualified sets, and there is an invulnerable generator G for R, then P is witness hiding over G n (k) . Proof We follow the line of reasoning from Thm. 4.3 of <ref> [4] </ref>. Suppose we are given an probabilistic polynomial time enemy A that has non-negligible probability of computing a witness, using the honest prover in the scheme from Theorem 1 as a subroutine. <p> We show that A can be compiled into an algorithm that solves with non-negligible probability random instances x generated by G, thus contradicting the invulnerability of the generator (see <ref> [4] </ref>). From the assumption on (k) = (at least two minimal qualified sets) it follows that N n I must contain at least two elements, and that I is not qualified. Our compilation now works as follows: 1. Determine the set I . <p> For any generator G generating pairs in R, this protocol is witness hiding over G 2 . Proof Since protocols constructed from Theorem 1 are always witness indistinguishable, we can use Theorem 4.2 of Feige and Shamir <ref> [4] </ref>. 2 Note that for this corollary, we do not need the assumption that G is invulnerable, as in Theorem 3. To build the protocol of Corollary 3, we need a 2 out of 2 threshold scheme.
Reference: 5. <author> U. Feige, A. Fiat, and A. Shamir: </author> <title> Zero-Knowledge Proofs of Identity, </title> <note> Journal of Cryptology 1 (1988) 77-94. </note>
Reference-contexts: Open Problems 17 and the prover's first message (this technique was introduced in <ref> [5] </ref>). By this method, a signature can be computed which will show that a qualified subset was present, without revealing which subset was involved. This may be seen as a generalization of the group signature concept, introduced by Chaum and Van Heyst [2].
Reference: 6. <author> M. Abadi, E. Allender, A. Broder, J. Feigenbaum, and L. Hemachandra: </author> <title> On Generating Solved Instances of Computational Problems, </title> <booktitle> Proc. of Crypto 88, </booktitle> <publisher> Springer Verlag LNCS series. </publisher>
Reference-contexts: To state the result, we need to introduce the concept of an invulnerable generator G for a relation R. Such generators were first introduced in <ref> [6] </ref> and later used in slightly modified form in [4]. Such a generator is a probabilistic polynomial time algorithm which outputs a pair (x; w) 2 R.
Reference: 7. <author> S. Goldwasser, S. Micali, and C. Rackoff: </author> <title> The Knowledge Complexity of Interactive Proof Systems, </title> <note> SIAM Journal on Computing 18 (1989) 186-208. </note>
Reference-contexts: Numerous protocols are known to satisfy the conditions described above. Concrete examples are Schnorr's discrete log protocol [12] and Guillou-Quisquater's RSA root protocol [8]. None of these protocols are known to be zero-knowledge or even witness hiding. In general, a parallelization of a sequential zero-knowledge proof <ref> [7] </ref> will often satisfy the conditions. The second ingredient we need is a secret sharing scheme, i.e. a scheme for distributing a secret among a set of participants such that some subsets of them are qualified to reconstruct the secret while other subsets have no information about it.
Reference: 8. <author> L. Guillou and J.-J. Quisquater: </author> <title> A Practical Zero-Knowledge Protocol fitted to Security Microprocessor Minimizing both Transmission and Memory, </title> <booktitle> Proc. of Eu-roCrypt 88, </booktitle> <publisher> Springer Verlag LNCS series. </publisher>
Reference-contexts: Numerous protocols are known to satisfy the conditions described above. Concrete examples are Schnorr's discrete log protocol [12] and Guillou-Quisquater's RSA root protocol <ref> [8] </ref>. None of these protocols are known to be zero-knowledge or even witness hiding. In general, a parallelization of a sequential zero-knowledge proof [7] will often satisfy the conditions.
Reference: 9. <author> M. Ito, A. Saito, and T. Nishizeki: </author> <title> Secret Sharing Scheme Realizing any Access Structure, </title> <booktitle> Proc. </booktitle> <address> Glob.Com. </address> <year> (1987). </year> <note> References 18 </note>
Reference-contexts: For any minimal qualified set A, we do the following: choose s 1 ; : : : ; s jAj at random under the condition that s 1 s jAj = s, and give one s i to each participant in A. This scheme was first proposed in <ref> [9] </ref>. Any qualified set can reconstruct the secret since it must contain a minimal qualified set. By monotonicity, no non-qualified set contains a qualified one, so the secret cannot be reconstructed by a non-qualified set.
Reference: 10. <author> A. De Santis, G. Di Crescenzo, and G. Persiano: </author> <title> Secret Sharing and Perfect Zero-Knowledge, </title> <booktitle> Proc. of Crypto 93, </booktitle> <publisher> Springer Verlag LNCS series. </publisher>
Reference-contexts: Section 4 then contains the 2. Proofs of Knowledge 3 main result and corollaries, Section 4.1 gives some concrete examples, and Section 5 contains an example of an application. 1.1 Related Work Our techniques are to some extent related to those of De Santis et al. <ref> [10] </ref>. The models are quite different, however: [10] considers non-interactive zero-knowledge proofs of membership, while we consider interactive proofs of knowledge. Also, [10] considers variants of the quadratic residuosity problem, while we consider any problem that affords a protocol of the right form. <p> Proofs of Knowledge 3 main result and corollaries, Section 4.1 gives some concrete examples, and Section 5 contains an example of an application. 1.1 Related Work Our techniques are to some extent related to those of De Santis et al. <ref> [10] </ref>. The models are quite different, however: [10] considers non-interactive zero-knowledge proofs of membership, while we consider interactive proofs of knowledge. Also, [10] considers variants of the quadratic residuosity problem, while we consider any problem that affords a protocol of the right form. <p> concrete examples, and Section 5 contains an example of an application. 1.1 Related Work Our techniques are to some extent related to those of De Santis et al. <ref> [10] </ref>. The models are quite different, however: [10] considers non-interactive zero-knowledge proofs of membership, while we consider interactive proofs of knowledge. Also, [10] considers variants of the quadratic residuosity problem, while we consider any problem that affords a protocol of the right form. In some recent independent work, De Santis et al. [11] apply techniques similar to ours to proofs of membership in random self-reducible languages.
Reference: 11. <author> A. De Santis, G. Persiano, M. Yung: </author> <title> Formulae over Random Self-Reducible Languages: The Extended Power of Perfect Zero-Knowledge, </title> <type> manuscript. </type>
Reference-contexts: Also, [10] considers variants of the quadratic residuosity problem, while we consider any problem that affords a protocol of the right form. In some recent independent work, De Santis et al. <ref> [11] </ref> apply techniques similar to ours to proofs of membership in random self-reducible languages. This leads to perfect zero-knowledge proofs for monotone Boolean operations over such languages.
Reference: 12. <author> C.P. Schnorr: </author> <title> Efficient Signature Generation by Smart Cards, </title> <note> Journal of Cryptology 4 (1991) 161-174. </note>
Reference-contexts: Numerous protocols are known to satisfy the conditions described above. Concrete examples are Schnorr's discrete log protocol <ref> [12] </ref> and Guillou-Quisquater's RSA root protocol [8]. None of these protocols are known to be zero-knowledge or even witness hiding. In general, a parallelization of a sequential zero-knowledge proof [7] will often satisfy the conditions. <p> Nevertheless, Proposition 1 will be needed in the following for technical reasons. 2.1 An Example As a concrete example of a protocol with the properties we need, we present Schnorr's protocol from <ref> [12] </ref> for proving knowledge of a discrete log in a group G of prime order q. Let g 6= 1, and let x = g w be the common input. P is given w as private input.
Reference: 13. <author> A. Shamir: </author> <title> How to Share a Secret, </title> <booktitle> Communications of the ACM 22 (1979) 612-613. </booktitle>
Reference-contexts: The collection of qualified subsets is called the access structure. The secret sharing scheme has to satisfy some properties which will be made more precise below. Shamir's secret sharing scheme <ref> [13] </ref> has the properties we need. <p> It is natural to ask if for any family of monotone access structures there is a family of smooth secret sharing schemes. This question is easy to answer in case of threshold structures. In that case it is clear that Shamir's secret sharing scheme <ref> [13] </ref> can be used. This scheme is even ideal, i.e. the shares are of the same length as the secret. In Shamir's scheme, the secret is an element in a finite field GF (q).
Reference: 14. <author> G.J. Simmons, W.A. Jackson, and K. Martin: </author> <title> The Geometry of Shared Secret Schemes, </title> <journal> Bulletin of the Institute of Combinatorics and its Applications 1 (1991) 71-88. </journal>
Reference-contexts: An access structure with this property is called monotone. A special case of monotone access structures is structures containing all subsets larger than some threshold value. Such structures are called threshold structures. Any monotone access structure has a natural dual structure. This concept was first defined in <ref> [14] </ref>. Definition 1 Let be an access structure containing subsets of a set M . If A ae M , then A denotes the complement of A in M .
References-found: 14

