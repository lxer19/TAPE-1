URL: http://seclab.cs.ucdavis.edu/~devanbu/cikm93.ps.Z
Refering-URL: http://seclab.cs.ucdavis.edu/~devanbu/prem_papers.html
Root-URL: http://www.cs.ucdavis.edu
Email: prem@research.att.com  
Title: Translating Description Logics to Information Server Queries In Proceedings of Second Conference on Information and
Author: Premkumar T. Devanbu 
Address: Murray Hill, NJ 07974, USA  
Affiliation: Artificial Intelligence Principles Research Department, 2B417, AT&T Bell Laboratories,  
Abstract: Description Logic (DL) Systems can be useful as front-ends for databases, particularly in applications that involve browsing and exploring, such as data mining. Such use of DL systems raises some pragmatic and theoretical issues. In this paper, we adopt a general architecture for "loose coupling" DL systems with databases; in the context of this architecture, we have built a system called qindl that can generate, from a specification, a translator from a description logic to a database query language. qindl was used to generate translators from classic, a typical DL, to 3 different database query languages. We also present one view of safety of classic when it is used to query databases, and present a semantical basis for this view. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aho, A., Sethi, R., and Ullman, J., </author> <booktitle> Compilers: Principles, Techniques and Tools, </booktitle> <publisher> Addison-Wesley Press, </publisher> <year> 1991. </year>
Reference-contexts: Again, the main focus there is not the use of descriptions as queries. Finally, the design of the qindl specification language combines elements of both attribute grammar formalisms <ref> [1] </ref> and transformational methods [13]. The downward and upward attributes in qindl are similar to the inherited and synthesized attributes in attribute grammars 11 .
Reference: [2] <author> Anwar, T., Beck, H., and Navathe, S., </author> <title> Knowledge Mining by Imprecise Querying: A Classification Based Approach, </title> <booktitle> Proceedings of the Eighth International Conference on Data Engineering. </booktitle>
Reference-contexts: In this paper, we discuss some technical issues that arise in using Description logics (DLs) (also known as the KL-ONE family of languages [18]) as a "front end" for data ar-chaelogy (see, e.g., <ref> [4, 2] </ref>). We begin with a brief background description of DL's, and then recapitulate the architecture used to interface DL's to information servers (from [5]). <p> variety of different databases in use, we seek a general way of interfacing DL's with databases. 3 A Generic Interface Architecture We recapitulate here, (from [5]) the general architecture for integrating a DL knowledge base management system (DLMS) with a database management system (DBMS) (see 1 See Anwar et al <ref> [2] </ref> for a more detailed description of this use of description logics.
Reference: [3] <author> Borgida, A., Brachman, R. J., McGuinness, D. L., and Resnick, L. A., </author> <title> classic: A structural data model for objects, </title> <booktitle> Proceedings ACM SIGMOD-89, </booktitle> <address> Portland, Oregon (1989) 58-76. </address>
Reference-contexts: These are the main concern of this paper. 2 Description Logics Description Logics deal with descriptions of individuals, relationships between individuals, called roles, and concepts, which denote sets of individuals. All of these are represented in DL's with potentially complex descriptions (the classic system <ref> [3] </ref>, which we used in our work, is an example DL). * Individuals are specific named objects that occur in the domain of interest. In a marketing database, these may be individuals like JoeCustomer, Hoboken, Cheap-mart. <p> In classic <ref> [3] </ref>, one can use these and other similar constructors define new concepts, roles, and individuals; classic will compute IS-A (subsumption) relationships between defined concepts and individuals, and among defined concepts, based on the meanings of the descriptions; it can also detect inconsistent descriptions, and perform other operations. <p> Its query evaluation component typically also incorporates various optimization facilities. The DLMS is a knowledge management system based on a description logic; examples include classic <ref> [3] </ref>, back [14], and loom [11]. A knowledge engineer inserts descriptions of concepts, individuals and roles into the DLMS, which infers subsumption relationships between these descriptions, and builds a classification hierarchy of concepts, with the individuals at the bottom.
Reference: [4] <author> Brachman, R. J., Selfridge, P.G., Terveen, L.G., Alt-man, B., Borgida, A., Halper, F., Kirk, T., Lazar, A., McGuinness, D.L., and Resnick, L. A., </author> <title> Knowledge Representation Support for Data Archaeology, </title> <booktitle> ISMM International Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, MD, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: 1 Introduction There is currently a great deal of interest in "data mining" applications, where a large source of data is combed for useful knowledge [15]. Following <ref> [4] </ref>, we distinguish between data mining approaches, where autonomous tools run freely over databases to search for interesting general properties and categories of the data, and the interactive data archael-ogy approach, which (to quote the authors of [4]) is an "iterative, dialectic process that involves constant human intervention". <p> Following <ref> [4] </ref>, we distinguish between data mining approaches, where autonomous tools run freely over databases to search for interesting general properties and categories of the data, and the interactive data archael-ogy approach, which (to quote the authors of [4]) is an "iterative, dialectic process that involves constant human intervention". In the imacs [4] system, the authors use the example of marketeers searching a database of department store sales records for useful patterns. <p> we distinguish between data mining approaches, where autonomous tools run freely over databases to search for interesting general properties and categories of the data, and the interactive data archael-ogy approach, which (to quote the authors of <ref> [4] </ref>) is an "iterative, dialectic process that involves constant human intervention". In the imacs [4] system, the authors use the example of marketeers searching a database of department store sales records for useful patterns. Likewise, public health officials may wish to explore a medical records database to identify groups that could benefit from certain education campaigns. <p> In this paper, we discuss some technical issues that arise in using Description logics (DLs) (also known as the KL-ONE family of languages [18]) as a "front end" for data ar-chaelogy (see, e.g., <ref> [4, 2] </ref>). We begin with a brief background description of DL's, and then recapitulate the architecture used to interface DL's to information servers (from [5]).
Reference: [5] <author> Borgida, A., Brachman, R., </author> <title> Loading Data into Description Reasoners, </title> <booktitle> Proceedings, ACM SIGMOD '93 Washington, </booktitle> <address> DC, </address> <year> 1993. </year>
Reference-contexts: We begin with a brief background description of DL's, and then recapitulate the architecture used to interface DL's to information servers (from <ref> [5] </ref>). Two interesting issues arise in this use of description logics: translating DL expressions to database queries, and safety of DL expressions, when used as database queries. <p> Some concepts like PERSON cannot be described in terms of others, and are considered prim itive. The others are defined. A full range of description operators are available to form concept and individual descriptions. We present just one concept description, as an example (adapted from <ref> [5] </ref>) of the general syntactic structure of description, and to illustrate some of the constructs. (define-concept GOODCUSTOMER (and CUSTOMER (all purchased LUXURYITEM) (atleast 1 child) (fills works-for NJLaw) (same-as lives-in commutes-to) (all creditRating) (oneof Hi Very-Hi)))) denotes objects in the intersection of the following sets: * the set of individuals that <p> Since there are a variety of different databases in use, we seek a general way of interfacing DL's with databases. 3 A Generic Interface Architecture We recapitulate here, (from <ref> [5] </ref>) the general architecture for integrating a DL knowledge base management system (DLMS) with a database management system (DBMS) (see 1 See Anwar et al [2] for a more detailed description of this use of description logics. <p> Thus, we use the DBMS's query processing mechanism to "classify" an otherwise unmanageable number of individuals, and find the instances of the desired concept. Further details are omitted for brevity, and may be found in <ref> [5] </ref>. This architecture is quite general; it can be used to couple any DLMS and DBMS. <p> In case of a conflict, the qindl execution mechanism breaks the tie by simply choosing the first rule in the specification that matches the node being translated. There are also other considerations which impact on the efficiency of query evaluation. For example, we could define, as in <ref> [5] </ref>, the materialized view for primitive concepts to have extra columns, one for each single-valued role (functionally dependent attribute) having that concept as source (the fst domain). <p> This "user knows best" approach, though uniform and consistent, might present serious pragmatic difficulties in processing such open-ended queries. This issue has motivated a more pragmatic, if less formal, view of safety in the treatment of <ref> [5] </ref>: queries such as classic-thing are prohibited. All queries must be composed of primitive concepts and roles that correspond to real relations in the database.
Reference: [6] <author> Devanbu, P., Brachman, R., Selfridge, P., and Ballard, B., </author> <title> LaSSIE: A Knowledge-Based Software Information System, </title> <journal> Communications of the ACM, </journal> <volume> 34:5, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: First, description logics are designed for knowledge representation|they provide a natural and formal way for the user to accumulate the gleaned knowledge (for an example of the use of DLs as a mechanism for storing and retrieving knowledge about software, see <ref> [6] </ref>). Secondly, they can be used as query language for creating interesting queries, ones that can be reasoned with. Finally, the inference facility in DL systems is helpful in organizing the knowledge and queries (by classification) and detecting inconsistencies in them 1 .
Reference: [7] <author> Devanbu, P., </author> <title> genoa A language- and front-end independent code analyzer, </title> <booktitle> International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1992, </year> <institution> Melbourne, Aus-tralia. </institution>
Reference-contexts: correct (with respect to the given semantics) algorithm to perform a syntactic check for safety. 2 If there are too many, sampling techniques could be select a few "typical" ones for insertions into the DLMS. 3 In fact, our system has been used to generate translators from classic to genoa <ref> [7] </ref> which is an applications generator that creates analyzers that can extract information directly from source code; the classic-genoa combination can be used in a system such as codebase [16] to mine knowledge about software directly from the source code. <p> In this discussion, we have assumed the simplest possible schema, with one binary relation for each role, and a unary relation for each primitive concept. We have also implemented a translator from classic to genoa <ref> [7] </ref>, which is a very different language; briefly, it is a kind of query by example language for the parse trees of programs. genoa is actually a simpler language than SQL; the qindl specification for this translation is purely bottom up, and uses only upward attributes.
Reference: [8] <author> Elmasri, R., and Navathe, S., </author> <title> Fundamentals of Database Systems, </title> <publisher> Benjamin Cummings Publishing Company, Inc.,, </publisher> <year> 1989. </year>
Reference-contexts: The main difficulty lies in classifying individuals which are known to have several distinct unknown fillers; since these are generally not allowed in databases, the query languages are indeed powerful enough. 5 For an explanation of relational algebra, and SQL, see any standard database text, such as Navathe and Elmasri <ref> [8] </ref>. the examples, we use below, we show this correspon-dence by using the same names in lowercase form for the DLMS concept (e.g. worker) and Capitalized form for the DBMS unary relation (e.g. Worker). * All the binary relations (corresponding to roles) have two attributes (or columns). <p> For example, an expression like: (and worker (fills employer at&t) (same as (boss) (advisor))) is translated into the equivalent RA query 6 atleast, and atmost are handled with aggregate functions <ref> [8] </ref> in relational algebra. all restrictions are done with set differences, or "anti-joins". (and c1 (fills r1 b1) (fills r2 b2)) select x from C1 x R1 y R2 z where x = y.fst & y.snd = B1 & x = z.fst & z.snd = B2 those q W orker "
Reference: [9] <author> Fikes, R., Cutkosky, M. Gruber, T., Van Baalen, J., </author> <title> Knowledge Sharing Technology, </title> <type> Unpublished Manuscript, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: They are not concerned with treating descriptions as queries over a large collection of individuals from external information sources (such as a DBMS, or genoa). The Stanford Knowledge Sharing Technology project <ref> [9] </ref> is also concerned with translations; however the goal there is much more ambitious, to translate knowledge bases from one knowledge representation formalism to another, accounting for differences in expressive power, ontology of the KB, etc. <p> Full details of their translation language were not available at the time of writing, so a close comparison with qindl is not possible. Since using descriptions as queries for external data sources is not of primary concern, safety is not discussed in <ref> [9] </ref>. Illarramendi, et al, [10] describe the use of back [14] as a tool to facilitate the integration of schemas from different databases into one federated database. back's classification assists in this process. Again, the main focus there is not the use of descriptions as queries.
Reference: [10] <author> Illarramendi, A., Blanco, J., Go~ni, A., </author> <title> A Uniform Approach to Design A Federated System Using back, Terminological Logic Users Workshop Proceedings, </title> <type> KIT Report 95, </type> <institution> Technische Universitat Berlin, Octo-ber, </institution> <year> 1991. </year>
Reference-contexts: Full details of their translation language were not available at the time of writing, so a close comparison with qindl is not possible. Since using descriptions as queries for external data sources is not of primary concern, safety is not discussed in [9]. Illarramendi, et al, <ref> [10] </ref> describe the use of back [14] as a tool to facilitate the integration of schemas from different databases into one federated database. back's classification assists in this process. Again, the main focus there is not the use of descriptions as queries.
Reference: [11] <author> MacGregor., R. M. </author> <title> Inside the loom Description Classifier, </title> <journal> ACM SIGART Bulletin 2(3), </journal> <year> 1991 </year>
Reference-contexts: Its query evaluation component typically also incorporates various optimization facilities. The DLMS is a knowledge management system based on a description logic; examples include classic [3], back [14], and loom <ref> [11] </ref>. A knowledge engineer inserts descriptions of concepts, individuals and roles into the DLMS, which infers subsumption relationships between these descriptions, and builds a classification hierarchy of concepts, with the individuals at the bottom.
Reference: [12] <author> Mays, E., Lanka, S., Dionne, R., and Weida, R., </author> <title> A Persistent Store for Large Shared Knowledge Bases, </title> <journal> IEEE Transactions on knowledge and data engineering, </journal> <volume> Vol. 3, No. 1, </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: Development of a semantic model of this pragmatic notion of safety is an open issue. 6 Related Work The unique contribution of this work hinges on the use of a description logic as a query language for an external data source. Mays, et al, <ref> [12] </ref> have used an object-oriented database to provide persistence in their knowledge representation language, K-REP. Their primary interest is in storing large portions of their taxonomy in a database, and provide transaction control, versioning, etc., to enable many knowledge engineers to simultaneously make changes.
Reference: [13] <author> Partsch, H., and Steinbruggen, R., </author> <title> Program Transformation Systems, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol 15, No 3, </volume> <month> Sept </month> <year> 1993 </year>
Reference-contexts: Again, the main focus there is not the use of descriptions as queries. Finally, the design of the qindl specification language combines elements of both attribute grammar formalisms [1] and transformational methods <ref> [13] </ref>. The downward and upward attributes in qindl are similar to the inherited and synthesized attributes in attribute grammars 11 .
Reference: [14] <author> Peltason, C., </author> <title> The back system an overview ACM SIGART Bulletin, </title> <type> 2(3), </type> <month> June </month> <year> 1991. </year>
Reference-contexts: Its query evaluation component typically also incorporates various optimization facilities. The DLMS is a knowledge management system based on a description logic; examples include classic [3], back <ref> [14] </ref>, and loom [11]. A knowledge engineer inserts descriptions of concepts, individuals and roles into the DLMS, which infers subsumption relationships between these descriptions, and builds a classification hierarchy of concepts, with the individuals at the bottom. <p> Since using descriptions as queries for external data sources is not of primary concern, safety is not discussed in [9]. Illarramendi, et al, [10] describe the use of back <ref> [14] </ref> as a tool to facilitate the integration of schemas from different databases into one federated database. back's classification assists in this process. Again, the main focus there is not the use of descriptions as queries.
Reference: [15] <editor> Piatestsky-Shapiro, G., and Frawley, W. G., Eds., </editor> <title> Knowledge Discovery in Databases, </title> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction There is currently a great deal of interest in "data mining" applications, where a large source of data is combed for useful knowledge <ref> [15] </ref>. Following [4], we distinguish between data mining approaches, where autonomous tools run freely over databases to search for interesting general properties and categories of the data, and the interactive data archael-ogy approach, which (to quote the authors of [4]) is an "iterative, dialectic process that involves constant human intervention".
Reference: [16] <author> Selfridge, P.G., </author> <title> Knowledge Representation Support for a Software Information System, </title> <booktitle> Proceedings of the 7th IEEE Conference on AI Applications, </booktitle> <year> 1991, </year> <pages> pp. 134-140 </pages>
Reference-contexts: As a final example, consider programmers who, during software development, want to browse through the source code of a large software system, to develop a model of it. This could also be considered a kind of data archael-ogy, supported by systems such as codebase <ref> [16] </ref>. This process involves composing queries, retrieving answers, inspecting the answers, and formulating new queries. <p> ones for insertions into the DLMS. 3 In fact, our system has been used to generate translators from classic to genoa [7] which is an applications generator that creates analyzers that can extract information directly from source code; the classic-genoa combination can be used in a system such as codebase <ref> [16] </ref> to mine knowledge about software directly from the source code.
Reference: [17] <author> Ullman, J., </author> <booktitle> Principles of Database and Knowledge-base systems, </booktitle> <volume> Vol 1, </volume> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: As we shall see, this leads us to determine that in such databases, all and atmost queries are unsafe. We adopt the following standard definition of safety (See, for example Ullman <ref> [17] </ref>): Definition 2 A query ffi is safe if for any knowledge base KB, if Answer (ffi; KB) DOM (ffi; KB) i.e., the answer to the query is drawn from the elements in the domain. <p> Since the algorithm always terminates, it always decides. In this treatment of safety of DL queries, we adopt the view taken by Ullman <ref> [17] </ref> (pages 151 thru 156): a query is safe if it "pays attention only to the data it is given".
Reference: [18] <author> Woods, W. A., </author> <title> "KL-ONE languages: A Framework for Progress", in Principles of Semantic Networks: Explorations in the Representation of Knowledge, </title> <editor> Sowa. J, (Editor), Morgan-Kaufman, </editor> <year> 1990. </year>
Reference-contexts: This evolving view captures the state of the data archaeologist's knowledge as s/he explores the database and discovers useful facts. In this paper, we discuss some technical issues that arise in using Description logics (DLs) (also known as the KL-ONE family of languages <ref> [18] </ref>) as a "front end" for data ar-chaelogy (see, e.g., [4, 2]). We begin with a brief background description of DL's, and then recapitulate the architecture used to interface DL's to information servers (from [5]).
References-found: 18

