URL: http://www.cs.cmu.edu/afs/cs/usr/andrewt/papers/chile-strings/Journal.ver2/final.ps.gz
Refering-URL: http://www.cs.cmu.edu/~andrewt/papers.html
Root-URL: 
Email: dpl@research.panasonic.com andrewt@cs.cmu.edu  
Title: Block Edit Models for Approximate String Matching  
Author: Daniel Lopresti Andrew Tomkins 
Keyword: block edit distance, approximate string matching, sequence comparison, ap proximate ink matching, dynamic programming.  
Date: January 12, 1997  
Address: Way Princeton, NJ 08540 USA  
Affiliation: Matsushita Information Technology Laboratory Panasonic Technologies, Inc. Two Research  
Abstract: In this paper we examine string block edit distance, in which two strings A and B are compared by extracting collections of substrings and placing them into correspondence. This model accounts for certain phenomena encountered in important real-world applications, including pen computing and molecular biology. The basic problem admits a family of variations depending on whether the strings must be matched in their entireties, and whether overlap is permitted. We show that several variants are NP-complete, and give polynomial-time algorithms for solving the remainder. 
Abstract-found: 1
Intro-found: 1
Reference: [AGM + 90] <author> S. F. Altschul, W. Gish, W. Miller, E. W. Myers, and D. J. Lipman. </author> <title> Basic local alignment search tool. </title> <journal> Journal of Molecular Biology, </journal> <volume> 215 </volume> <pages> 403-410, </pages> <year> 1990. </year>
Reference-contexts: However, this is of limited value in applications where the flexibility of allowing the blocks to be edited to create a better correspondence is important. In another approach, a number of researchers have addressed the problem of finding good local alignments, or sets of alignments, that avoid unconserved regions <ref> [GK82, Sel84, HM88, AGM + 90] </ref>. Smith and Waterman [SW81] and later Waterman and Eggert [WE87] showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment.
Reference: [CL90] <author> W. I. Chang and E. L. Lawler. </author> <title> Approximate string matching in sublinear expected time. </title> <booktitle> In Proceedings of the Symposium on Foundations of Computer Science, </booktitle> <pages> pages 116-124, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison [Lev66, NW70, WF74] has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., <ref> [LL85, Ukk85, GG88, LV89, CL90, GP90] </ref>). For a recent survey, see [Ste94]. In a previous paper [LT94], we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [GD91] <author> M. Gribskov and J. Devereux. </author> <title> Sequence Analysis Primer. </title> <publisher> Stockton Press, </publisher> <year> 1991. </year>
Reference-contexts: Existing string matching algorithms are not flexible enough to capture these forms of block motion. Likewise, in genetic sequence alignment, some biologists suggest that comparisons based on simple edit distance may fail to account for certain common evolutionary processes <ref> [GD91] </ref>: Global dynamic programming alignments of such rearranged sequences yield unpredictable, evolutionarily confusing results. : : : Global alignment methods 2 are generally incapable of dealing with intrasequence rearrangements, yet this phenomenon is quite common among mosaic and repetitive sequence proteins. [pg. 96] Manual inspection of a "dot matrix" plot appears <p> Others have extended this approach, resulting in better time and space complexities [HHM90, HM91]. All of this earlier work shares the same strategy: find the optimal alignment, then find the best alignment that does not overlap this, then find the best alignment that does not 1 Also from <ref> [GD91] </ref>: "Dot matrix analysis is the only currently available tool that deals sensibly with this phenomenon." [pg. 96] 3 overlap the first two, etc.
Reference: [GG88] <author> Z. Galil and R. Giancarlo. </author> <title> Data structures and algorithms for approximate string matching. </title> <journal> Journal of Complexity, </journal> <volume> 4 </volume> <pages> 33-72, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison [Lev66, NW70, WF74] has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., <ref> [LL85, Ukk85, GG88, LV89, CL90, GP90] </ref>). For a recent survey, see [Ste94]. In a previous paper [LT94], we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: Theorem 1 CD-CD block edit distance is NP-complete. Proof. Membership in NP is trivial. We must show that the problem is NP-hard. The reduction is from uniprocessor scheduling. From Garey and Johnson <ref> [GJ79] </ref>: Sequencing With Release Times and Deadlines Instance: Set T of jobs and, for each Job j 2 T , a length l (j) 2 Z + , a release time r (j) 2 Z + 0 , and a deadline d (j) 2 Z + .
Reference: [GK82] <author> W. B. Goad and M. I. Kanehisa. </author> <title> Pattern recognition in nucleic acid sequences I: A general method for finding local homologies and symmetries. </title> <journal> Nucleic Acids Research, </journal> <volume> 10 </volume> <pages> 247-263, </pages> <year> 1982. </year>
Reference-contexts: However, this is of limited value in applications where the flexibility of allowing the blocks to be edited to create a better correspondence is important. In another approach, a number of researchers have addressed the problem of finding good local alignments, or sets of alignments, that avoid unconserved regions <ref> [GK82, Sel84, HM88, AGM + 90] </ref>. Smith and Waterman [SW81] and later Waterman and Eggert [WE87] showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment.
Reference: [Gol80] <author> M. C. Golumbic. </author> <title> Algorithmic Graph Theory and Perfect Graphs. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: Enforcing or relaxing these constraints (all relative to string A) results in different versions of the block edit distance problem. It is clear from Figure 7 that W 1 induces a complete interval graph, a well-studied class for which most known problems have efficient solutions <ref> [Rob78, Gol80] </ref>. We now present a series of dynamic programming recurrences for the variants of block edit distance that admit poly-time solutions, based on choosing intervals in a way that satisfies certain constraints.
Reference: [GP90] <author> Z. Galil and K. Park. </author> <title> An improved algorithm for approximate string matching. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(6) </volume> <pages> 989-999, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison [Lev66, NW70, WF74] has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., <ref> [LL85, Ukk85, GG88, LV89, CL90, GP90] </ref>). For a recent survey, see [Ste94]. In a previous paper [LT94], we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [HHM90] <author> X. Huang, R. C. Hardison, and W. Miller. </author> <title> A space-efficient algorithm for local similarities. </title> <journal> CABIOS, </journal> <volume> 6 </volume> <pages> 373-381, </pages> <year> 1990. </year>
Reference-contexts: Smith and Waterman [SW81] and later Waterman and Eggert [WE87] showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment. Others have extended this approach, resulting in better time and space complexities <ref> [HHM90, HM91] </ref>.
Reference: [HM88] <author> J. D. Hall and E. W. Myers. </author> <title> A software tool for finding locally optimal alignments in protein and nucleic acid sequence. </title> <journal> CABIOS, </journal> <volume> 4 </volume> <pages> 35-40, </pages> <year> 1988. </year> <month> 18 </month>
Reference-contexts: However, this is of limited value in applications where the flexibility of allowing the blocks to be edited to create a better correspondence is important. In another approach, a number of researchers have addressed the problem of finding good local alignments, or sets of alignments, that avoid unconserved regions <ref> [GK82, Sel84, HM88, AGM + 90] </ref>. Smith and Waterman [SW81] and later Waterman and Eggert [WE87] showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment.
Reference: [HM91] <author> X. Huang and W. Miller. </author> <title> A time-efficient, linear-space local similarity algorithm. </title> <booktitle> Advances in Applied Mathematics, </booktitle> <volume> 12 </volume> <pages> 337-357, </pages> <year> 1991. </year>
Reference-contexts: Smith and Waterman [SW81] and later Waterman and Eggert [WE87] showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment. Others have extended this approach, resulting in better time and space complexities <ref> [HHM90, HM91] </ref>.
Reference: [Lev66] <author> V. I. Levenshtein. </author> <title> Binay codes capable of correcting deletions, </title> <journal> insertions, and reversals. Cybernetics and Control Theory, </journal> <volume> 10(8) </volume> <pages> 707-710, </pages> <year> 1966. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison <ref> [Lev66, NW70, WF74] </ref> has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., [LL85, Ukk85, GG88, LV89, CL90, GP90]).
Reference: [LL85] <author> R. J. Lipton and D. P. Lopresti. </author> <title> A systolic array for rapid string comparison. </title> <editor> In H. Fuchs, editor, </editor> <booktitle> Proceedings of the 1985 Chapel Hill Conference on Very Large Scale Integration, </booktitle> <pages> pages 363-376. </pages> <publisher> Computer Science Press, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison [Lev66, NW70, WF74] has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., <ref> [LL85, Ukk85, GG88, LV89, CL90, GP90] </ref>). For a recent survey, see [Ste94]. In a previous paper [LT94], we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [LT94] <author> D. Lopresti and A. </author> <title> Tomkins. </title> <booktitle> On the searchability of electronic ink. In Proceedings of the Fourth International Workshop on Frontiers in Handwriting Recognition, </booktitle> <pages> pages 156-165, </pages> <address> Taipei, Taiwan, </address> <year> 1994. </year>
Reference-contexts: A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., [LL85, Ukk85, GG88, LV89, CL90, GP90]). For a recent survey, see [Ste94]. In a previous paper <ref> [LT94] </ref>, we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [LT95] <author> D. Lopresti and A. Tomkins. </author> <title> Temporal domain matching of hand-drawn pictorial queries. </title> <booktitle> In Proceedings of the Seventh Biennial Conference of the International Graphonomics Society, </booktitle> <pages> pages 98-99, </pages> <address> London, Ontario, </address> <year> 1995. </year> <note> Chapter-length version submitted for publication. </note>
Reference-contexts: Hence, although they are polynomial, the order of growth is sufficiently large that pruning of the search space is required for large problems. In our experimental efforts (see, for example, <ref> [LT95] </ref>), we have found that the algorithms below provide a general framework for block matching.
Reference: [LV89] <author> G. M. Landau and U. Vishkin. </author> <title> Fast parallel and serial approximate string matching. </title> <journal> Journal of Algorithms, </journal> <volume> 10 </volume> <pages> 157-169, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison [Lev66, NW70, WF74] has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., <ref> [LL85, Ukk85, GG88, LV89, CL90, GP90] </ref>). For a recent survey, see [Ste94]. In a previous paper [LT94], we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [NW70] <author> S. B. Needleman and C. D. Wunsch. </author> <title> A general method applicable to the search for similarities in the amino-acid sequences of two proteins. </title> <journal> Journal of Molecular Biology, </journal> <volume> 48 </volume> <pages> 443-453, </pages> <year> 1970. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison <ref> [Lev66, NW70, WF74] </ref> has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., [LL85, Ukk85, GG88, LV89, CL90, GP90]).
Reference: [Rob78] <author> F. S. Roberts. </author> <title> Graph Theory and Its Applications to Problems of Society. </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1978. </year>
Reference-contexts: Enforcing or relaxing these constraints (all relative to string A) results in different versions of the block edit distance problem. It is clear from Figure 7 that W 1 induces a complete interval graph, a well-studied class for which most known problems have efficient solutions <ref> [Rob78, Gol80] </ref>. We now present a series of dynamic programming recurrences for the variants of block edit distance that admit poly-time solutions, based on choosing intervals in a way that satisfies certain constraints.
Reference: [Sel84] <author> P. H. Sellers. </author> <title> Pattern recognition in genetic sequences by mismatch density. </title> <journal> Bulletin of Mathematical Biology, </journal> <volume> 46 </volume> <pages> 652-686, </pages> <year> 1984. </year>
Reference-contexts: However, this is of limited value in applications where the flexibility of allowing the blocks to be edited to create a better correspondence is important. In another approach, a number of researchers have addressed the problem of finding good local alignments, or sets of alignments, that avoid unconserved regions <ref> [GK82, Sel84, HM88, AGM + 90] </ref>. Smith and Waterman [SW81] and later Waterman and Eggert [WE87] showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment.
Reference: [SK83] <author> D. Sankoff and J. B. Kruskal, </author> <title> editors. Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: 1 Introduction The edit distance model for string comparison [Lev66, NW70, WF74] has found widespread application in fields ranging from molecular biology to bird song classification <ref> [SK83] </ref>. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., [LL85, Ukk85, GG88, LV89, CL90, GP90]). For a recent survey, see [Ste94].
Reference: [Ste94] <author> G. A. Stephen. </author> <title> String Searching Algorithms. </title> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1994. </year>
Reference-contexts: A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., [LL85, Ukk85, GG88, LV89, CL90, GP90]). For a recent survey, see <ref> [Ste94] </ref>. In a previous paper [LT94], we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [SW81] <author> T. F. Smith and M. S. Waterman. </author> <title> Identification of common molecular sequences. </title> <journal> Journal of Molecular Biology, </journal> <volume> 147 </volume> <pages> 195-197, </pages> <year> 1981. </year>
Reference-contexts: In another approach, a number of researchers have addressed the problem of finding good local alignments, or sets of alignments, that avoid unconserved regions [GK82, Sel84, HM88, AGM + 90]. Smith and Waterman <ref> [SW81] </ref> and later Waterman and Eggert [WE87] showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment. Others have extended this approach, resulting in better time and space complexities [HHM90, HM91].
Reference: [Tic84] <author> W. F. Tichy. </author> <title> The string-to-string correction problem with block moves. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(4) </volume> <pages> 309-321, </pages> <year> 1984. </year>
Reference-contexts: In our example, the window is 25 nucleotides and must contain at least 12 matches. The resulting plot is then examined visually for interesting similarities. Tichy has examined a special case of the problem where the blocks themselves must match exactly <ref> [Tic84] </ref>. However, this is of limited value in applications where the flexibility of allowing the blocks to be edited to create a better correspondence is important.
Reference: [Ukk85] <author> E. Ukkonen. </author> <title> Algorithms for approximate string matching. </title> <journal> Information and Control, </journal> <volume> 64 </volume> <pages> 100-118, </pages> <year> 1985. </year> <month> 19 </month>
Reference-contexts: 1 Introduction The edit distance model for string comparison [Lev66, NW70, WF74] has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., <ref> [LL85, Ukk85, GG88, LV89, CL90, GP90] </ref>). For a recent survey, see [Ste94]. In a previous paper [LT94], we introduced a new application of edit distance in the realm of pen computing. Approximate ink matching, or AIM, is the concept of matching handwritten/drawn queries against an existing ink database.
Reference: [WE87] <author> M. S. Waterman and M. Eggert. </author> <title> A new algorithm for best subsequence align-ments with application to tRNA-rRNA comparisons. </title> <journal> Journal of Molecular Biology, </journal> <volume> 197 </volume> <pages> 723-728, </pages> <year> 1987. </year>
Reference-contexts: In another approach, a number of researchers have addressed the problem of finding good local alignments, or sets of alignments, that avoid unconserved regions [GK82, Sel84, HM88, AGM + 90]. Smith and Waterman [SW81] and later Waterman and Eggert <ref> [WE87] </ref> showed how to locate the best local alignment, and then how to iterate the process to determine the next-best non-overlapping alignment. Others have extended this approach, resulting in better time and space complexities [HHM90, HM91].
Reference: [WF74] <author> R. A. Wagner and M. J. Fischer. </author> <title> The string-to-string correction problem. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 21 </volume> <pages> 168-173, </pages> <year> 1974. </year> <month> 20 </month>
Reference-contexts: 1 Introduction The edit distance model for string comparison <ref> [Lev66, NW70, WF74] </ref> has found widespread application in fields ranging from molecular biology to bird song classification [SK83]. A great deal of research has been devoted to this area, and numerous algorithms have been proposed for computing edit distance efficiently (e.g., [LL85, Ukk85, GG88, LV89, CL90, GP90]). <p> By overlooking the higher-level structure, the motion of the word "hello" from the beginning of the string to the end, traditional edit distance (e.g., <ref> [WF74] </ref>) produces an alignment that seems to miss the true relationship between the two strings.
References-found: 26

