URL: http://www.cs.brandeis.edu/~mairson/Papers/para.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/
Root-URL: http://www.cs.brandeis.edu
Title: Outline of a proof theory of parametricity  
Author: Harry G. Mairson 
Address: Waltham, Massachusetts 02254  
Affiliation: Department of Computer Science Brandeis University  
Abstract: Reynolds' Parametricity Theorem (also known as the Abstraction Theorem), a result concerning the model theory of the second order polymorphic typed -calculus (F 2 ), has recently been used by Wadler to prove some unusual and interesting properties of programs. We present a purely syntactic version of the Parametricity Theorem, showing that it is simply an example of formal theorem proving in second order minimal logic over a first order equivalence theory on -terms. We analyze the use of parametricity in proving program equivalences, and show that structural induction is still required: parametricity is not enough. As in Leivant's transparent presentation of Girard's Representation Theorem for F 2 , we show that algorithms can be extracted from the proofs, such that if a -term can be proven parametric, we can synthesize from the proof an "equivalent" parametric -term that is moreover F 2 -typable. Given that Leivant showed how proofs of termination, based on inductive data types and structural induction, had computational content, we show that inductive data types are indeed parametric, hence providing a connection between the two approaches.
Abstract-found: 1
Intro-found: 1
Reference: [BW88] <author> R. Bird and P. Wadler. </author> <title> Introduction to Functional Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: Furthermore, generations of computer scientists have been taught that the append function is associative, and that the reverse function computes an involution, all without recourse to model theory (see, for example, <ref> [BW88] </ref>): are these new theorems qualitatively different, and how so? In fact, proofs of the former theorems are standard examples of the use of structural induction.
Reference: [BB85] <author> C. Bohm and A. Berarducci. </author> <title> Automatic synthesis of typed -programs on term algebras. </title> <booktitle> Theoretical Computer Science 39, </booktitle> <pages> pp. 135-154. </pages>
Reference-contexts: Leivant showed how from the proof of M (map) we can extract an algorithm (-term) computing map which is 1 This result also appears in <ref> [BB85] </ref>. 2 We write 8A: : : :, using capital letters, to denote second-order quantification (respectively, quantification over type variables), and 8x: : : :, using small letters, to denote first-order quantification over terms. 2 F 2 -typable, such that substituting the -term for map satisfies the recursive equations used as
Reference: [BMM90] <author> K. Bruce, J. C. Mitchell, and A. R. Meyer. </author> <title> The semantics of second-order lambda-calculus. In Logical Foundations of Functional Programming, </title> <editor> ed. G. </editor> <booktitle> Huet, </booktitle> <pages> pp. 213-272. </pages> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: When a function is typable in the second-order polymorphic typed -calculus invented by Girard and Reynolds [Gir72, Rey74] (henceforth called F 2 ), Wadler showed that the interpretation of the function in the frame models of Bruce, Meyer, and Mitchell <ref> [BMM90] </ref> satisfies a technical condition called parametricity.
Reference: [vanD79] <author> D. van Daalen. </author> <title> Logic and Structure. </title> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: A not very surprising consequence is that types can be used to prove properties of programs. As background references, for a description of F 2 , we recommend [GLT89, PDM89, Sc90, Rey90]; for relevant ideas and notation from logic, especially sequent calculus and natural deduction, we recommend <ref> [vanD79] </ref>.
Reference: [Gir72] <author> J.-Y. Girard, </author> <title> Interpretation Fonctionelle et Elimination des Coupures de l'Arithmetique d'Ordre Superieur. </title> <institution> These de Doctorat d'Etat, Universite de Paris VII, </institution> <year> 1972. </year>
Reference-contexts: When a function is typable in the second-order polymorphic typed -calculus invented by Girard and Reynolds <ref> [Gir72, Rey74] </ref> (henceforth called F 2 ), Wadler showed that the interpretation of the function in the frame models of Bruce, Meyer, and Mitchell [BMM90] satisfies a technical condition called parametricity. <p> We relate the syntactic presentation of parametricity to work of Daniel Leivant, who has given particularly transparent and simple explanations and extensions of Girard's Representation Theorem for F 2 <ref> [Gir72] </ref> as well as Godel's Dialectica Theorem [God58]. In this framework, type inference for a term becomes merely the homomorphism of a proof in second order logic about the use of the term, in other words the familiar work of proving properties of programs.
Reference: [GLT89] <author> J.-Y. Girard, Y. Lafont, and P. Taylor. </author> <title> Proofs and Types. </title> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: The preference of the author for proof theory over model theory is merely a taking of sides in a longstanding philosophical debate about the nature and foundations of mathematics: for a short exposition of the two semantic traditions, sometimes ascribed to Tarski and Heyting, see <ref> [GLT89] </ref>. The reduction we give to logic we believe is primary, and has a long tradition including Boole (who reduced "laws of thought" to logic), Russell and Whitehead (who reduced mathematics to logic), and more recently Curry and Howard (who, unbeknownst to them, reduced computation to logic). <p> A not very surprising consequence is that types can be used to prove properties of programs. As background references, for a description of F 2 , we recommend <ref> [GLT89, PDM89, Sc90, Rey90] </ref>; for relevant ideas and notation from logic, especially sequent calculus and natural deduction, we recommend [vanD79].
Reference: [God58] <author> K. </author> <title> Godel. Uber eine bisher noch nict benute Erweiterung des finiten Standpunktes. </title> <booktitle> Dialectica 12 (1958), </booktitle> <pages> pp. </pages> <month> 280-287. </month> <title> Republished with English translation and explanatory notes by A. </title> <editor> S. Troelstra in Kurt Godel: </editor> <publisher> Collected Works (Oxford University Press, </publisher> <year> 1990), </year> <title> vol. II, </title> <editor> ed. S. </editor> <booktitle> Feferman. </booktitle>
Reference-contexts: We relate the syntactic presentation of parametricity to work of Daniel Leivant, who has given particularly transparent and simple explanations and extensions of Girard's Representation Theorem for F 2 [Gir72] as well as Godel's Dialectica Theorem <ref> [God58] </ref>. In this framework, type inference for a term becomes merely the homomorphism of a proof in second order logic about the use of the term, in other words the familiar work of proving properties of programs.
Reference: [How80] <author> W. Howard. </author> <title> The formulae-as-types notion of construction. In To H. </title> <editor> B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus, and Formalism, </booktitle> <editor> ed. J. Seldin and R. </editor> <booktitle> Hindley, </booktitle> <pages> pp. 479-490. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: The proof theory we develop is a straightforward syntactic rendition of logical relations, inspired by the Curry-Howard "propositions as types" analogy <ref> [How80] </ref>. The Curry-Howard analogy has been used in analysis of the constructive nature of logical calculi, where types are propositions, and -terms are proofs.
Reference: [Lei90] <author> D. Leivant. </author> <title> Contracting proofs to programs. </title> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P. </editor> <booktitle> Odifreddi, </booktitle> <pages> pp. 279-328. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: In his paper, "Contracting proofs to programs," Leivant shows that type inference in F 2 can be viewed as termination proofs for a programming language over inductive data types <ref> [Lei90] </ref>. 1 For instance, we can code map as map f nil = nil (2) map f (cons x `) = cons (f x) (map f `) (3) in the usual style, and we demonstrate map is a total function by proving the theorem 2 M (map) 8AB:8f:(8x:A (x) ! B <p> Proof. (sketch) We take the proof of ` R (E 0 ; E 00 ) and contract it by removing all first-order information, in the style of Leivant <ref> [Lei90] </ref>. For example, the axiom of induction for integers, Int (k) 8P:(8x:P (x) ! P (succ x)) ! P (zero) ! P (k); (10) contracts to 8P:(P ! P ) ! P ! P , the inductive type representation of integers.
Reference: [HM91] <author> F. Henglein and H. Mairson. </author> <title> The complexity of type inference for higher-order typed lambda calculi. </title> <booktitle> Proceedings of the 18-th ACM Symposium on the Principles of Programming Languages, </booktitle> <month> January </month> <year> 1991, </year> <pages> pp. 119-130. </pages>
Reference-contexts: In this sense, parametricity seems to be a more general notion, but not necessarily more powerful. There are indeed bizarre terms which are parametric, for example, the simulation of Turing Machines in <ref> [HM91] </ref>, employing a programming style com pletely orthogonal to the inductive-type style illustrated, for example, in [PDM89]; nonetheless, it seems unclear what program equivalences can be proven from them using parametricity.
Reference: [Mit91] <author> J. C. Mitchell. </author> <title> Type systems for programming languages. </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <editor> van Leeuwen et al., eds. </editor> <publisher> North-Holland, </publisher> <year> 1990, </year> <pages> pp. 365-458. </pages>
Reference-contexts: As background references, for a description of F 2 , we recommend [GLT89, PDM89, Sc90, Rey90]; for relevant ideas and notation from logic, especially sequent calculus and natural deduction, we recommend [vanD79]. A good introduction to logical relations can be found in <ref> [Sta85, Mit91] </ref>. 2 Constructing proofs of parametricity from type infer ences The slogan generally associated with parametricity is that "programs evaluated in related environments have related results." We now formalize this notion in a very straightforward manner, using binary relations and second-order logic. <p> Lemma 2.5 (Fundamental Theorem of Logical Relations <ref> [Sta85, Mit91] </ref>) If fl E: is a derivable type judgement, then ~ ` R (E 0 ; E 00 ) is a derivable sequent. Proof. By induction on the inference of the type judgement.
Reference: [PDM89] <author> B. Pierce, S. Dietzen, and S. Michaylov. </author> <title> Programming in higher-order typed lambda calculi. </title> <type> Technical Report CMU-CS-89-111, </type> <institution> Carnegie Mellon University, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: A not very surprising consequence is that types can be used to prove properties of programs. As background references, for a description of F 2 , we recommend <ref> [GLT89, PDM89, Sc90, Rey90] </ref>; for relevant ideas and notation from logic, especially sequent calculus and natural deduction, we recommend [vanD79]. <p> In this sense, parametricity seems to be a more general notion, but not necessarily more powerful. There are indeed bizarre terms which are parametric, for example, the simulation of Turing Machines in [HM91], employing a programming style com pletely orthogonal to the inductive-type style illustrated, for example, in <ref> [PDM89] </ref>; nonetheless, it seems unclear what program equivalences can be proven from them using parametricity. <p> The method is not new (see, for instance, <ref> [PDM89] </ref>), but how these functions work is easier to see for the first time if we ignore typing information.
Reference: [Rey74] <author> J. C. Reynolds. </author> <title> Towards a theory of type structure. </title> <booktitle> In Proceedings of the Paris Colloquium on Programming, Lecture Notes in Computer Science 19, </booktitle> <publisher> Springer Verlag, </publisher> <pages> pages 408-425, </pages> <year> 1974. </year>
Reference-contexts: When a function is typable in the second-order polymorphic typed -calculus invented by Girard and Reynolds <ref> [Gir72, Rey74] </ref> (henceforth called F 2 ), Wadler showed that the interpretation of the function in the frame models of Bruce, Meyer, and Mitchell [BMM90] satisfies a technical condition called parametricity.
Reference: [Rey90] <author> J. C. Reynolds. </author> <title> Introduction to polymorphic lambda-calculus. In Logical Foundations of Functional Programming, </title> <editor> ed. G. </editor> <booktitle> Huet, </booktitle> <pages> pp. 77-86. </pages> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: A not very surprising consequence is that types can be used to prove properties of programs. As background references, for a description of F 2 , we recommend <ref> [GLT89, PDM89, Sc90, Rey90] </ref>; for relevant ideas and notation from logic, especially sequent calculus and natural deduction, we recommend [vanD79].
Reference: [Rey83] <author> J. C. Reynolds. </author> <title> Types, abstraction, and parametric polymorphism. In Information Processing 83, </title> <editor> ed. R. E. A. </editor> <booktitle> Mason, </booktitle> <pages> pp. 513-523. </pages> <publisher> Elsevier, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction In a recent interesting and beguiling paper, "Theorems for free!" Philip Wadler showed how to use Reynolds' Abstraction Theorem <ref> [Rey83] </ref> to prove program equivalences. "Write down the definition of a polymorphic function on a piece of paper. Tell me its type, but be careful not to let me see the function's definition. <p> convert both sides of the equalities (for fixed f and `, with proper substitutions for the second-order variables) by performing cut elimination on the resultant proof. 11 3.5 An analysis of Reynolds' isomorphism Using parametricity, we can as well give a syntactic explanation of an isomorphism discussed by Reynolds in <ref> [Rey83] </ref> and later by Wadler. The syntactic analysis is interesting because it makes explicit an encoding of existential quantification. Let i x:g:gx and j h:h (x:x), with F 2 typings i: A ! ~ A and j: ~ A ! A, where ~ A 8X:(A ! X) ! X.
Reference: [Sc90] <author> A. Scedrov. </author> <title> A guide to polymorphic types. </title> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P. </editor> <booktitle> Odifreddi, </booktitle> <pages> pp. 387-420. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: A not very surprising consequence is that types can be used to prove properties of programs. As background references, for a description of F 2 , we recommend <ref> [GLT89, PDM89, Sc90, Rey90] </ref>; for relevant ideas and notation from logic, especially sequent calculus and natural deduction, we recommend [vanD79].
Reference: [Sta85] <author> R. Statman. </author> <title> Logical relations and the typed lambda calculus. </title> <booktitle> Information and Control 65 (1985), </booktitle> <pages> pp. 85-97. </pages>
Reference-contexts: As background references, for a description of F 2 , we recommend [GLT89, PDM89, Sc90, Rey90]; for relevant ideas and notation from logic, especially sequent calculus and natural deduction, we recommend [vanD79]. A good introduction to logical relations can be found in <ref> [Sta85, Mit91] </ref>. 2 Constructing proofs of parametricity from type infer ences The slogan generally associated with parametricity is that "programs evaluated in related environments have related results." We now formalize this notion in a very straightforward manner, using binary relations and second-order logic. <p> Lemma 2.5 (Fundamental Theorem of Logical Relations <ref> [Sta85, Mit91] </ref>) If fl E: is a derivable type judgement, then ~ ` R (E 0 ; E 00 ) is a derivable sequent. Proof. By induction on the inference of the type judgement.
Reference: [Wad89] <editor> P. Wadler. </editor> <booktitle> Theorems for free! In 4th International Symposium on Functional Programming Languages and Computer Architecture, </booktitle> <address> London, </address> <month> September </month> <year> 1989. </year> <month> 15 </month>
Reference-contexts: It is this logical statement which corresponds to Wadler's informal definition (in <ref> [Wad89] </ref>) of relations between lists; this informal definition is not precisely captured by the logical relation defined by the type of lists. Observe that if M (g) is provable in second order logic, so is M 2 (g).
References-found: 18

