URL: http://www.cs.wisc.edu/wpis/papers/ipl94.ps
Refering-URL: http://www.cs.wisc.edu/~reps/
Root-URL: 
Title: On competitive on-line algorithms for the dynamic priority-ordering problem  
Author: G. Ramalingam and Thomas Reps 
Keyword: Ke ywords: Analysis of algorithms, competitive ratio, dynamic priority-ordering problem, dynamic topological-sorting problem  
Address: 1210 West Dayton Street, Madison, WI 53706 USA  
Affiliation: Computer Sciences Department, University of Wisconsin-Madison,  
Abstract: Ramalingam, G. and Reps, T., On competitive on-line algorithms for the dynamic priority-ordering problem. The vertices of a directed acyclic graph (DAG) are said to be correctly prioritized if every vertex v in the graph is assigned a priority, denoted by priority(v), such that if there is an edge in the DAG from vertex v to vertex w then priority(v) &lt; priority(w). The dynamic priority-ordering problem is to maintain a correct prioritization of the graph as the DAG is m odified. Alpern et al. presented an algorithm for this problem. In this paper we show that the Alpern et al. algorithm does not have a constant competitive ratio, w here the cost of the algorithm is measured in terms of the number of primitive priority-manipulation operations. The proof also shows that there exists no algorithm for the problem that has a constant competitive ratio, as long as the allowed primitive priority-manipulation operations satisfy a simple property. The proof that we give also shows that there exists no algorithm for the problem of maintaining a topological-sort ordering that has a constant competitive ratio. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Alpern, B., Carle, A., Rosen, B., Sweeney, P., and Zadeck, K., </author> <title> Graph attribution as a specification paradigm, </title> <booktitle> Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> (Boston, MA, </address> <month> November 28-30, </month> <year> 1988), </year> <journal> ACM SIGPLAN Notices 24(2) pp. </journal> <month> 121-129 (February </month> <year> 1989). </year>
Reference-contexts: However, a generalized framework has been proposed by Alpern et al. that uses the annotation of graphs as a paradigm for specifying other classes of interactive systems, especially ones that cannot be encoded efficiently with attribute grammars <ref> [1] </ref>. Systems created using this paradigm can give rise to arbitrary circuits. Thus, the dynamic circuit-annotation problem is highly relevant to real-world systems. It is useful to identify two classes of algorithms for the dynamic circuit-annotation problem: conservative algorithms and speculative algorithms.
Reference: 2. <author> Alpern, B., Hoover, R., Rosen, B.K., Sweeney, P.F., and Zadeck, F.K., </author> <title> Incremental evaluation of computational circuits, pp. </title> <booktitle> 32-42 in Proceedings of the First Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <address> (San Fran-cisco, CA, </address> <month> Jan. </month> <pages> 22-24, </pages> <year> 1990), </year> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, PA (1990). </address>
Reference-contexts: Alpern et al. gave an a lgorithm allowing multiple, heterogeneous changes: between updates, the DAG is a llowed to be restructured by an arbitrary mixture of insertions and deletions <ref> [2] </ref>. In this paper, we address the question of how well an algorithm for the dynamic priority-ordering problem can perform as an on-line algorithm responding to a sequence of requests of two types: (i) requests to perform unit-size graph-modification operations, and (ii) requests to update priority values. <p> Motivation and relationship with previous work The dynamic circuit-annotation problem Our work was partly motivated by the possibility of using an algorithm for the dynamic priority-ordering problem as a subroutine in an algorithm for the dynamic circuit-annotation problem <ref> [2] </ref>. A circuit is a DAG where every vertex u is associated with a function F u . T he output value to be computed at any vertex u is obtained by applying function F u to the values computed at the predecessors of vertex u. <p> Speculative algorithms for the dynamic circuit-annotation problem have been given by Ramalingam and Reps [10,11]. A conservative update strategy, h owev er, is possible only if the updating algorithm has some information about the topological structure of the circuit. In <ref> [2] </ref>, Alpern et al. proposed the following algorithm for the dynamic circuit-annotation problem: In addition to maintaining the values that annotate the vertices of a circuit, the algorithm maintains a correct prioritization of the circuit's vertices. <p> many) edges from a prioritized DAG, computes a correct prioritization of the new DAG by r eassigning new priorities to only O (||d ||) vertices. 1 In other words, the number of priority re-assignments that 1 The priority-updating algorithm itself runs in time O (||d || 2 log ||d ||) <ref> [2] </ref>.
Reference: 3. <author> Bricklin, D. and Frankston, B., </author> <title> VisiCalc Computer Software Pro gram for the Apple II and II Plus, Personal Software, </title> <publisher> Inc., </publisher> <address> Sunnyvale, CA (1979). </address>
Reference: 4. <author> Dietz, P.F. and Sleator, D .D., </author> <title> Two algorithms for maintaining order in a list, pp. </title> <booktitle> 365-372 in Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, ACM, </booktitle> <address> New York, NY (May 1987). </address>
Reference-contexts: As explained in the introduction, the proof we present in this section applies to any algorithm that makes use of a priority space with a functional interface. The Alpern et al. algorithm makes use of a data structure developed by Dietz and Sleator that implements a densely-ordered priority space <ref> [4] </ref>. This data structure has the following interface: NextAfter (r): Return a priority value q, not previously in use, such that q &gt; r and for all p in use such that p &gt; r, p &gt; q.
Reference: 5. <author> Hoover, R., </author> <title> Incremental graph evaluation, </title> <type> Ph.D. dissertation and Tech. Rep. 87-836, </type> <institution> Dept. of Computer Science, Cornell University, </institution> <address> Ithaca, NY (May 1987). </address>
Reference-contexts: Previous work has addressed two versions of the problem. Hoover gav e an algorithm for the restricted version of the problem where each modification of the DAG consists of a unit change <ref> [5, pp. 19-23] </ref>. In this version of the problem, each modification to the DAG inv olves the insertion or deletion of exactly one edge, after which the DAG's priorities are updated so that the vertices are again correctly prioritized. Although restricted to unit changes, Hoover's method Correspondence to: T.
Reference: 6. <author> Karp, </author> <title> R.M., On-line algorithms versus off-line algorithms: How much is it worth to know the future?, pp. </title> <booktitle> 416-429 in Information Processing 92: Proceedings of the IFIP Twelfth World Computer Congress, </booktitle> <editor> ed. J. van Leeuwen, </editor> <publisher> North-Holland, </publisher> <address> Amsterdam (September 1992). </address>
Reference: 7. <author> Knuth, D.E., </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. 1: </volume> <booktitle> Fundamental Algorithms, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1968, </address> <note> Second Edition: </note> <year> 1973). </year>
Reference-contexts: a functional interface can have a constant competitive ratio. (We m easure the cost of the algorithm's actions in terms of the number of priority-space operations and priority assignments made.) The proof that we give also shows that there exists no algorithm for the dynamic version of the topological-sorting problem <ref> [7, pp. 258-268] </ref>i.e., the problem of maintaining a topological-sort ordering of the vertices of a DAG as t he DAG undergoes changesthat has a constant competitive ratio. The remainder of the paper consists of two sections. Section 2 discusses two issues that motivated the question addressed in the paper.
Reference: 8. <editor> McGeoch, L.A. and Sleator, D.D. (eds.), </editor> <title> On-Line Algorithms, </title> <publisher> American Mathematical Society, </publisher> <address> Providence, RI (1992). </address>
Reference: 9. <author> Pardo, R.K. and Landau, R., </author> <title> Process and apparatus for converting a source program into an object program, </title> <type> U.S. Patent No. </type> <institution> 4,398,249, United States Patent Office, </institution> <address> Washington, DC (August 9, </address> <year> 1983). </year>
Reference: 10. <author> Ramalingam, G. and Reps, T., </author> <title> On the computational complexity of incremental algorithms, </title> <institution> TR-1033, Computer Sciences Department, University of Wisconsin, Madison, </institution> <note> WI (August 1991). </note>
Reference: 11. <author> Ramalingam, G. and Reps, T., </author> <title> On the complexity of incremental computation, </title> <type> Unpublished report, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, </institution> <note> WI (October 1992). - 10 </note> - 
Reference: 12. <author> Ramalingam, G., </author> <title> Bounded incremental computation, </title> <type> Ph.D. dissertation and Tech. Rep. </type> <institution> TR-1172, Computer Sciences Department, University of Wisconsin, Madison, </institution> <note> WI (August 1993). </note>
Reference: 13. <author> Reps, T., Teitelbaum, T., and Demers, A., </author> <title> Incremental context-dependent analysis for language-based editors, </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <pages> 5(3) pp. </pages> <month> 449-477 (July </month> <year> 1983). </year>
Reference: 14. <author> Reps, T., </author> <title> Generating Language-Based Environments, </title> <publisher> The M.I.T. Press, </publisher> <address> Cambridge, MA (1984). </address>
Reference: 15. <author> Reps, T. and Teitelbaum, T., </author> <title> The Synthesizer Generator: A System for Constructing Language-Based Editors, </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY (1988). </address>
Reference-contexts: From a systems-building perspective, the dynamic circuit-annotation problem is important because it is at the heart of several important kinds of interactive systems, including the all-pervasive spreadsheet [3,9] as well as language-sensitive editors created from attribute-grammar specifications <ref> [15] </ref>. In the case of interactive systems based on attribute grammars, specialized algorithms have been devised that take a dvantage of the special structure of the problem - 4 - [13,14,17,15].
Reference: 16. <author> Sleator, D.D. and Tarjan, R.E., </author> <title> Amortized efficiency of list update and paging rules, </title> <journal> Commun. of the ACM 28(2) pp. </journal> <month> 202-208 (February </month> <year> 1985). </year>
Reference: 17. <author> Yeh, D., </author> <title> On incremental evaluation of ordered attributed grammars, </title> <note> BIT 23 pp. </note> <month> 308-320 </month> <year> (1983). </year>
References-found: 17

