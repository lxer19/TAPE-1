URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/papers/wpaper.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/bib-interactiveperformance.html
Root-URL: 
Email: dannenberg@cs.cmu.edu rubine@cs.cmu.edu  
Title: Toward Modular, Portable, Real-Time Software  
Author: Roger B. Dannenberg and Dean Rubine 
Keyword: programs combining graphics and MIDI.  
Address: 150 E. 58 St., 35th Floor Pittsburgh, PA 15213 USA New York, NY 10155 USA  
Affiliation: School of Computer Science Spark L.P. Carnegie Mellon University  
Abstract: W is a systematic approach toward the construction of event-driven, interactive, real-time software. W is driven by practical concerns, including the desire to reuse existing code wherever possible, the limited real-time software support in popular operating systems, and system cost. W provides a simple, efficient, software interconnection system, giving objects a uniform external interface based on setting attributes to values via asynchronous messages. An example shows how W is used to implement real-time computer music 
Abstract-found: 1
Intro-found: 1
Reference: <author> Anderson, D. P. and R. Kuivila. </author> <year> 1986. </year> <title> Accurately Timed Generation of Discrete Musical Events. Computer Music Journal Anderson, </title> <editor> D. P . and R. Kuivila. </editor> <year> 1990. </year> <title> A System for Computer Music Performance. </title> <journal> ACM Transactions on Computer Systems 8(1) </journal> <pages> 56-82, </pages> <institution> Febru-ary. Apple Computer , Inc. </institution> <year> 1990. </year> <title> MIDI Management Tools, V ersion 2.0 . Apple Programmers and Developers Association. </title>
Reference-contexts: In this case, messages are delivered slightly ahead of time so that computation can take place before the indicated time rather than after. The interpretation of timestamps is a property of a zone. By combining a precomputation zone with a real-time zone, event buffering <ref> (Anderson and Kuivila 1986) </ref> can be implemented (see Figure 3). The precompu-tation zone (A) runs ahead of real-time, producing output messages with future timestamps. These messages (e.g. MIDI events) are buf fered by the real-time zone (B) until the indicated timestamp.
Reference: <author> Dannenberg, R. B. </author> <year> 1986. </year> <title> The CMU MIDI Toolkit. </title> <booktitle> In Proceedings of the 1986 International Computer Music Confer ence , pages 53-56. International Computer Music Association, </booktitle> <address> San Francisco. </address>
Reference: <author> Dannenberg, Roger B. </author> <year> 1989. </year> <title> Real-T ime Scheduling and Computer Accompaniment. In System Development Foundation Benchmark Series. </title> <booktitle> Current Dir ections in Computer Music Research . Mathews, </booktitle> <editor> M. V. and J. R. Pierce, editors, </editor> <publisher> MIT Press, </publisher> <pages> pages 225-262. </pages>
Reference-contexts: These messages (e.g. MIDI events) are buf fered by the real-time zone (B) until the indicated timestamp. Message delivery according to timestamps is the responsibility of the W message system, so every zone must provide time-based scheduling and dis patch of messages <ref> (Dannenberg 1989) </ref>. 5. Implementation Details A receive function is required for each type of W object, and receive functions are error prone to implement. The receive function must decode the message type ( MIDI , etc.) and field names ( ISON RUNFLAG , etc.).
Reference: <author> Dannenberg, R. B. </author> <year> 1993. </year> <title> Software Support for Interactive Multimedia Performance. Interface Journal of New Music Resear ch August. </title>
Reference: <author> Fey, T. and M. J. Grey. </author> <year> 1989. </year> <title> Using Bars and Pipes Decatur, </title> <address> Georgia, </address> <year> 1989. </year>
Reference-contexts: Rather , they must hold references to message targets in internal variables. The boxes and wires approach is only the fi rst step toward modularity . Previous systems, such as MAX (Puckette and Zicarelli 1991), PCL (T eitel-baum 1985), and Bars and Pipes <ref> (Fey and Grey 1989) </ref>, require programmers to work within tightly constrained runtime environments. This makes it difficult to reuse preexisting software. In contrast, W places minimal restrictions on preexisting software. In effect, W is software glue that joins modules together .
Reference: <author> Hoare, C. A. R. </author> <year> 1974. </year> <title> Monitors: An Operating System Structuring Concept. </title> <journal> Communications of the ACM 17(10) </journal> <pages> 549-557, </pages> <note> October . Erratum in Communications of the ACM , 18(2) (Feb. 1975), page 95. </note>
Reference-contexts: First, tasks within a zone run to completion without preemption (each zone has one thread of control). Thus, there is never concurrent access to data structures and there is no need for locks, semaphores, and other safeguards. Each zone is ef fectively a monitor <ref> (Hoare 1974) </ref>. (At some implementation level, zones may communicate through shared memory buf fers and allocate from shared memory pools, so the implementation must use synchroniza tion operations.) Zones may preempt one another , but concurrent access to data structures is avoided even in this case.
Reference: <author> Myers, B. A., </author> <year> 1990. </year> <title> Garnet: Comprehensive Support for Graphical, Highly Interactive User Interfaces. </title> <journal> IEEE Computer November. </journal>
Reference-contexts: As a consequence, interactive music applications tend to be hard to develop and hard to port to new environments. We have developed a new software system called W to address these problems. W has roots in con straint-based systems <ref> (Myers, 1990) </ref>, object-oriented systems (Pope 1991), the CMU MIDI Toolkit (Dannenber g 1986), Formula (Anderson and Kuivila 1990), MAX (Puckette and Zicarelli 1991), and MIDI (Rothstein 1992), taking good ideas from each of these.
Reference: <author> Pope, S. T. (editor). </author> <year> 1991. </year> <title> The W ell-Tempered Object: Musical Applications of ObjectOri ented Software Technology . Boston: </title> <publisher> MIT Press. </publisher>
Reference-contexts: As a consequence, interactive music applications tend to be hard to develop and hard to port to new environments. We have developed a new software system called W to address these problems. W has roots in con straint-based systems (Myers, 1990), object-oriented systems <ref> (Pope 1991) </ref>, the CMU MIDI Toolkit (Dannenber g 1986), Formula (Anderson and Kuivila 1990), MAX (Puckette and Zicarelli 1991), and MIDI (Rothstein 1992), taking good ideas from each of these.
Reference: <author> Puckette, M. </author> <year> 1986. </year> <title> Interprocess Communication and Timing in Real-time Computer Music Per - formance. In P . Berg (editor), </title> <booktitle> Proceedings of the International Computer Music Confer ence 1986 , pages 43-46. International Computer Music Association. </booktitle>
Reference: <author> Puckette, M. and D. Zicarelli. </author> <year> 1991. </year> <institution> MAX Development Package . Palo Alto, CA.: Opcode Systems, Inc. </institution>
Reference-contexts: We have developed a new software system called W to address these problems. W has roots in con straint-based systems (Myers, 1990), object-oriented systems (Pope 1991), the CMU MIDI Toolkit (Dannenber g 1986), Formula (Anderson and Kuivila 1990), MAX <ref> (Puckette and Zicarelli 1991) </ref>, and MIDI (Rothstein 1992), taking good ideas from each of these. The goal of W is to simplify software development by incorporating existing software and by encouraging a modular approach to new software development. What is W? Ws primary function is to interconnect objects within programs. <p> In contrast, objectoriented systems do not have output ports or externally defi ned connections between objects. Rather , they must hold references to message targets in internal variables. The boxes and wires approach is only the fi rst step toward modularity . Previous systems, such as MAX <ref> (Puckette and Zicarelli 1991) </ref>, PCL (T eitel-baum 1985), and Bars and Pipes (Fey and Grey 1989), require programmers to work within tightly constrained runtime environments. This makes it difficult to reuse preexisting software. In contrast, W places minimal restrictions on preexisting software.
Reference: <author> Rothstein, J. </author> <year> 1992. </year> <institution> MIDI: A Comprehensive Intr o-duction . Madison, WI: </institution> <note> A-R Editions. </note>
Reference-contexts: We have developed a new software system called W to address these problems. W has roots in con straint-based systems (Myers, 1990), object-oriented systems (Pope 1991), the CMU MIDI Toolkit (Dannenber g 1986), Formula (Anderson and Kuivila 1990), MAX (Puckette and Zicarelli 1991), and MIDI <ref> (Rothstein 1992) </ref>, taking good ideas from each of these. The goal of W is to simplify software development by incorporating existing software and by encouraging a modular approach to new software development. What is W? Ws primary function is to interconnect objects within programs.
Reference: <author> Teitelbaum, R. </author> <year> 1985. </year> <title> The Digital Piano and the Patch Control Language System. </title> <editor> In W. Buxton (editor), </editor> <booktitle> Proceedings of the International Computer Music Confer ence 1984 , pages 213-216. International Computer Music Association. </booktitle>
References-found: 12

