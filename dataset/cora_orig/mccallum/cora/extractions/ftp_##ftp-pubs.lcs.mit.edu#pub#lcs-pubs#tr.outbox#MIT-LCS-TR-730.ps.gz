URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-730.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr700.html
Root-URL: 
Title: Formal Verification of Safety-Critical Hybrid Systems  
Author: Professor Arthur C. Smith 
Degree: by Carolos Livadas S.M. in Aeronautics and Astronautics, MIT (1996) S.B. in Computer Science and Engineering, MIT (1993) S.B. in Aeronautics and Astronautics, MIT (1993) Submitted to the Department of Electrical Engineering and Computer Science in Partial Fulfillment of the Requirements for the Degree of Master of Engineering in Electrical Engineering and Computer Science at the  c 1997 Carolos Livadas. All rights reserved. The author hereby grants to MIT permission to reproduce and distribute publicly paper and electronic copies of this thesis and to grant others the right to do so. Author  Certified by Professor Nancy A. Lynch Department of Electrical Engineering and Computer Science Thesis Supervisor Accepted by  Chairman, Department Committee on Graduate Theses  
Date: September 1997  September 5, 1997  
Affiliation: Massachusetts Institute of Technology  Department of Electrical Engineering and Computer Science  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> Jean-Raymond Abrial, Egon Borger, and Hans Langmaack. </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control. </title> <editor> In G. Goos, J. Hartmanis, and J. van Leeuwen, editors, </editor> <title> Methods for Semantics and Specification, </title> <booktitle> International Conference and Research Center for Computer Science, volume 1165 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1996. </year> <title> The Methods for Semantics and Specification, </title> <booktitle> International Conference and Research Center for Computer Science took place in Schloss, </booktitle> <address> Dagstuhl, Germany, </address> <note> in June 1995. </note>
Reference-contexts: In the realm of applications, the formal modeling techniques presented above have been used for the analysis of various problems. The railroad crossing problem [15] and the steam boiler problem <ref> [1, 21] </ref> comprise two commonly used benchmark problems. The former benchmark 3 problem considers the control of a railroad gate that prevents cars and pedestrians from crossing the railroad tracks while the train is in the vicinity of the crossing.
Reference: [2] <author> Rajeev Alur, Costas Courcoubetis, Nicolas Halbwachs, Thomas A. Henzinger, Pei-Hsin Ho, Xavier Nicollin, Alfredo Olivero, Joseph Sifakis, and Sergio Yovine. </author> <title> The Algorithmic Analysis of Hybrid Systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 3-34, </pages> <month> February </month> <year> 1995. </year> <note> Preliminary version appeared as Ref. 3. </note>
Reference-contexts: This model is an extension of the timed I/O automaton model [11, 34] and allows the explicit treatment of continuous behavior. The hybrid I/O automaton model is inspired by the phase transition models <ref> [2, 4, 35, 36] </ref>. The hybrid I/O automaton model is a (possibly) infinite state model of a system involving both discrete and continuous behavior. The states of a hybrid I/O automaton (HIOA) are the valuations of a set of variables. <p> Phase transition systems are analogous to hybrid I/O automata | the transitions and the activities of phase transition systems correspond to the discrete transitions and the trajectories of hybrid I/O automata. The hybrid system model <ref> [2, 4] </ref> is similar to the phase transition model with the distinction that, as in the hybrid I/O automaton model, discrete transitions are labeled, thus allowing the appropriate synchronization of composed automata. The distinction between the hybrid system model [2, 4] and the hybrid I/O automaton model lies in the latter's <p> The hybrid system model <ref> [2, 4] </ref> is similar to the phase transition model with the distinction that, as in the hybrid I/O automaton model, discrete transitions are labeled, thus allowing the appropriate synchronization of composed automata. The distinction between the hybrid system model [2, 4] and the hybrid I/O automaton model lies in the latter's classification of the discrete transitions and variables into input, internal, and output. In the realm of applications, the formal modeling techniques presented above have been used for the analysis of various problems.
Reference: [3] <author> Rajeev Alur, Costas Courcoubetis, Nicolas Halbwachs, Thomas A. Henzinger, Pei-Hsin Ho, Xavier Nicollin, Alfredo Olivero, Joseph Sifakis, and Sergio Yovine. </author> <title> The Algorithmic Analysis of Hybrid Systems. </title> <booktitle> In Proc. 11th International Conference on Analysis and Optimization of Systems, Discrete-Event Systems, volume 199 of Lecture Notes in Control and Information Sciences, </booktitle> <pages> pages 331-351. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [4] <author> Rajeev Alur, Costas Courcoubetis, Thomas A. Henzinger, and Pei-Hsin Ho. </author> <title> Hybrid Automata: An Algorithmic Approach to the Specification and Verification of Hybrid Systems. In Hybrid Systems, </title> <booktitle> volume 736 of Lecture Notes in Computer Science, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> Extended version appeared as Ref. 2. </note>
Reference-contexts: This model is an extension of the timed I/O automaton model [11, 34] and allows the explicit treatment of continuous behavior. The hybrid I/O automaton model is inspired by the phase transition models <ref> [2, 4, 35, 36] </ref>. The hybrid I/O automaton model is a (possibly) infinite state model of a system involving both discrete and continuous behavior. The states of a hybrid I/O automaton (HIOA) are the valuations of a set of variables. <p> Phase transition systems are analogous to hybrid I/O automata | the transitions and the activities of phase transition systems correspond to the discrete transitions and the trajectories of hybrid I/O automata. The hybrid system model <ref> [2, 4] </ref> is similar to the phase transition model with the distinction that, as in the hybrid I/O automaton model, discrete transitions are labeled, thus allowing the appropriate synchronization of composed automata. The distinction between the hybrid system model [2, 4] and the hybrid I/O automaton model lies in the latter's <p> The hybrid system model <ref> [2, 4] </ref> is similar to the phase transition model with the distinction that, as in the hybrid I/O automaton model, discrete transitions are labeled, thus allowing the appropriate synchronization of composed automata. The distinction between the hybrid system model [2, 4] and the hybrid I/O automaton model lies in the latter's classification of the discrete transitions and variables into input, internal, and output. In the realm of applications, the formal modeling techniques presented above have been used for the analysis of various problems.
Reference: [5] <author> Rajeev Alur and David L. Dill. </author> <title> Automata for Modeling Real-Time Systems. </title> <booktitle> In Proc. 17th International Colloquium on Automata, Languages and Programming (ICALP'90), volume 443 of Lecture Notes in Computer Science, </booktitle> <pages> pages 322-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [6] <author> Rajeev Alur and David L. Dill. </author> <title> A Theory of Timed Automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year> <note> Preliminary version appeared as Ref. 5. </note>
Reference-contexts: In particular, models that are analogous to the timed I/O automaton model [11, 34] are the models of Alur and Dill <ref> [6] </ref>, Lamport [20], and Henzinger, Manna, and Pnueli [18]. As is the case with the timed I/O automaton model, these models have also been extended to the hybrid setting; for instance, the timed transition model [18] has been extended to the phase transition model [35, 36].
Reference: [7] <author> Michael S. Branicky. </author> <title> Studies in Hybrid Systems: Modeling, Analysis, and Control. </title> <institution> Doctor of Science Thesis, Dept. of Electrical Engineering and Computer Science, Mas-sachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> June </month> <year> 1995. </year>
Reference: [8] <author> Ekaterina Dolginova and Nancy A. Lynch. </author> <title> Safety Verification for Automated Platoon Maneuvers: A Case Study. </title> <editor> In Oded Maler, editor, </editor> <booktitle> Proc. International Workshop on Hybrid and Real-Time Systems (HART'97), volume 1201 of Lecture Notes in Computer 163 Science, </booktitle> <pages> pages 154-170. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <booktitle> The International Workshop on Hybrid and Real-Time Systems took place in Grenoble, </booktitle> <address> France, </address> <month> in March </month> <year> 1997. </year>
Reference-contexts: Lygeros [22] and Lygeros et al. [26, 27] used a game theoretic approach to prove that all platoon maneuvers are safe. Recently, Dolginova and Lynch <ref> [8] </ref> have used hybrid I/O automata to model and verify the safety of the platoon join maneuver. On a similar note, Weinberg [43] has analyzed a deceleration maneuver in which a discrete controller slows a train down to a target velocity range within a given distance.
Reference: [9] <author> Jean-Marie Flaus and Ollagnon. Guy. </author> <title> Hybrid Flow Nets of Hybrid Processes Modeling and Control. </title> <editor> In Oded Maler, editor, </editor> <booktitle> Proc. International Workshop on Hybrid and Real-Time Systems (HART'97), volume 1201 of Lecture Notes in Computer Science, </booktitle> <pages> pages 213-227. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <booktitle> The International Workshop on Hybrid and Real-Time Systems took place in Grenoble, </booktitle> <address> France, </address> <month> in March </month> <year> 1997. </year>
Reference: [10] <author> Rainer Gawlick, Roberto Segala, Jtrgen Stgaard-Andersen, and Nancy A. Lynch. </author> <title> Live-ness in Timed and Untimed Systems. </title> <type> Technical Report MIT/LCS/TR-587, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, Mas-sachusetts, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: in Chapter 10 we give a summary of the thesis, an evaluation of the research presented, and directions in which such research could be extended or continued. 9 10 Chapter 2 Hybrid I/O Automata The hybrid I/O automaton (HIOA) model [29, 30] is based on the timed I/O automaton model <ref> [10, 11, 33, 34] </ref>, but includes explicit treatment of continuous behavior. To make this thesis self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters.
Reference: [11] <author> Rainer Gawlick, Roberto Segala, Jtrgen Stgaard-Andersen, and Nancy A. Lynch. </author> <title> Liveness in Timed and Untimed Systems. </title> <editor> In Serge Abiteboul and Eli Shamir, editors, </editor> <booktitle> Proc. 21st International Colloquium on Automata, Languages and Programming (ICALP'94), volume 820 of Lecture Notes in Computer Science, </booktitle> <pages> pages 166-177. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <booktitle> The 21st International Colloquium on Automata, Languages and Programming (ICALP'94) took place in Jerusalem, </booktitle> <address> Israel, </address> <note> in July 1994. Full version appeared as Ref. 10. </note>
Reference-contexts: This model is an extension of the timed I/O automaton model <ref> [11, 34] </ref> and allows the explicit treatment of continuous behavior. The hybrid I/O automaton model is inspired by the phase transition models [2, 4, 35, 36]. The hybrid I/O automaton model is a (possibly) infinite state model of a system involving both discrete and continuous behavior. <p> In particular, models that are analogous to the timed I/O automaton model <ref> [11, 34] </ref> are the models of Alur and Dill [6], Lamport [20], and Henzinger, Manna, and Pnueli [18]. <p> in Chapter 10 we give a summary of the thesis, an evaluation of the research presented, and directions in which such research could be extended or continued. 9 10 Chapter 2 Hybrid I/O Automata The hybrid I/O automaton (HIOA) model [29, 30] is based on the timed I/O automaton model <ref> [10, 11, 33, 34] </ref>, but includes explicit treatment of continuous behavior. To make this thesis self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. <p> Axiom D1, which is simply the hybrid extension of the input enabling axiom from the (untimed) I/O automaton model <ref> [11, 32, 34] </ref>, says that a HIOA should accept all input actions in all states. Axiom D2 postulates that an environment action that does not affect the input variables can not be "detected" by the automaton and, therefore, leaves the state unchanged.
Reference: [12] <author> Datta N. Godbole and John Lygeros. </author> <title> Longitudinal Control of a Lead Car of a Platoon. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> 43(4) </volume> <pages> 1125-1135, </pages> <month> November </month> <year> 1994. </year> <booktitle> Also appeared in Proc. 13th American Control Conference, </booktitle> <pages> pages 398-402, </pages> <address> Baltimore, Maryland, </address> <month> June/July </month> <year> 1994. </year>
Reference-contexts: The goal of PATH is to increase vehicle throughput by organizing traffic into platoons of closely spaced vehicles. Godbole, Lygeros, and Sastry <ref> [12, 13, 23, 25, 27] </ref> at U.C. Berkeley have studied various problems that arise in the control of the vehicle platoons.
Reference: [13] <author> Datta N. Godbole, John Lygeros, and Shankar Sastry. </author> <title> Hierarchical Hybrid Control: a Case Study. </title> <editor> In P. Antsaklis, W. Kohn, A. Nerode, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, volume 999 of Lecture Notes in Computer Science, </booktitle> <pages> pages 166-190. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <booktitle> Also appeared in Proc. 33rd IEEE Conference on Decision and Control, </booktitle> <pages> pages 1592-1597, </pages> <address> Orlando, Florida, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The goal of PATH is to increase vehicle throughput by organizing traffic into platoons of closely spaced vehicles. Godbole, Lygeros, and Sastry <ref> [12, 13, 23, 25, 27] </ref> at U.C. Berkeley have studied various problems that arise in the control of the vehicle platoons.
Reference: [14] <author> Robert L. Grossman, Anil Nerode, Anders P. Ravn, and Hans Rischel, </author> <title> editors. Hybrid Systems, </title> <booktitle> volume 736 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <title> This volume of LNCS was inspired by a workshop on the Theory of Hybrid Systems, held on Oct. </title> <type> 19-21, </type> <institution> 1992 at the Technical University, Lyngby, Denmark, </institution> <note> and by a prior Hybrid Systems Workshop, held on June 10-12, </note> <institution> 1991 at the Mathematical Sciences Institute, Cornell University. </institution>
Reference: [15] <author> Constance Heitmeyer and Nancy Lynch. </author> <title> The Generalized Railroad Crossing: A Case Study in Formal Verification of Real-Time Systems. </title> <booktitle> In Proc. 15th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 120-131, </pages> <address> San Juan, Puerto Rico, December 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In the realm of applications, the formal modeling techniques presented above have been used for the analysis of various problems. The railroad crossing problem <ref> [15] </ref> and the steam boiler problem [1, 21] comprise two commonly used benchmark problems. The former benchmark 3 problem considers the control of a railroad gate that prevents cars and pedestrians from crossing the railroad tracks while the train is in the vicinity of the crossing.
Reference: [16] <author> Thomas A. Henzinger, Zohar Manna, and Amir Pnueli. </author> <title> Temporal Proof Methodologies for Real-Time Systems. </title> <booktitle> In Proc. 18th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 353-366. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference: [17] <author> Thomas A. Henzinger, Zohar Manna, and Amir Pnueli. </author> <title> Timed Transition Systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proc. 164 REX Workshop "Real-Time: Theory in Practice", volume 600 of Lecture Notes in Computer Science, </booktitle> <pages> pages 226-251. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <title> The REX Workshop "Real-Time: Theory in Practice" took place in Mook, </title> <address> The Netherlands, </address> <note> in June 1991. </note>
Reference: [18] <author> Thomas A. Henzinger, Zohar Manna, and Amir Pnueli. </author> <title> Temporal Proof Methodologies for Timed Transition Systems. </title> <journal> Information and Computation, </journal> <volume> 112(2) </volume> <pages> 273-337, </pages> <month> August </month> <year> 1994. </year> <note> Preliminary versions of Part I and Part II appeared as Refs. 17 and 16, respectively. </note>
Reference-contexts: In particular, models that are analogous to the timed I/O automaton model [11, 34] are the models of Alur and Dill [6], Lamport [20], and Henzinger, Manna, and Pnueli <ref> [18] </ref>. As is the case with the timed I/O automaton model, these models have also been extended to the hybrid setting; for instance, the timed transition model [18] has been extended to the phase transition model [35, 36]. <p> to the timed I/O automaton model [11, 34] are the models of Alur and Dill [6], Lamport [20], and Henzinger, Manna, and Pnueli <ref> [18] </ref>. As is the case with the timed I/O automaton model, these models have also been extended to the hybrid setting; for instance, the timed transition model [18] has been extended to the phase transition model [35, 36]. Phase transition systems are analogous to hybrid I/O automata | the transitions and the activities of phase transition systems correspond to the discrete transitions and the trajectories of hybrid I/O automata.
Reference: [19] <author> Leslie Lamport. </author> <title> The Temporal Logic of Actions. </title> <type> Research Report 79, </type> <institution> Digital Equipment Corporation Systems Research Center, Palo Alto, California, </institution> <month> December </month> <year> 1991. </year>
Reference: [20] <author> Leslie Lamport. </author> <title> The Temporal Logic of Actions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <month> May </month> <year> 1994. </year> <note> Also appeared as Ref. 19. </note>
Reference-contexts: In particular, models that are analogous to the timed I/O automaton model [11, 34] are the models of Alur and Dill [6], Lamport <ref> [20] </ref>, and Henzinger, Manna, and Pnueli [18]. As is the case with the timed I/O automaton model, these models have also been extended to the hybrid setting; for instance, the timed transition model [18] has been extended to the phase transition model [35, 36].
Reference: [21] <author> Gunter Leeb and Nancy A. Lynch. </author> <title> Proving Safety Properties of the Steam Boiler Controller. </title> <editor> In J.R. Abrial, E. Borger, and H. Langmaack, editors, </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <booktitle> volume 1165 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1996. </year> <title> Preliminary version presented as "Using Timed Automata for the Steam Boiler Controller Problem" at the Methods for Semantics and Specification, </title> <booktitle> International Conference and Research Center for Computer Science in Schloss, </booktitle> <address> Dagstuhl, Germany in June 1995. </address>
Reference-contexts: In the realm of applications, the formal modeling techniques presented above have been used for the analysis of various problems. The railroad crossing problem [15] and the steam boiler problem <ref> [1, 21] </ref> comprise two commonly used benchmark problems. The former benchmark 3 problem considers the control of a railroad gate that prevents cars and pedestrians from crossing the railroad tracks while the train is in the vicinity of the crossing.
Reference: [22] <author> John Lygeros. </author> <title> Hierarchical, Hybrid Control of Large Scale Systems. </title> <institution> Doctor of Philosophy Thesis, Dept. of Electrical Engineering and Computer Sciences, University of California, Berkeley, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: The platoon maneuvers that have been addressed are the platoon join, in which two or more adjacent platoons join to form a single platoon, the platoon split, in which a platoon splits in two, and the platoon lane change. Lygeros <ref> [22] </ref> and Lygeros et al. [26, 27] used a game theoretic approach to prove that all platoon maneuvers are safe. Recently, Dolginova and Lynch [8] have used hybrid I/O automata to model and verify the safety of the platoon join maneuver.
Reference: [23] <author> John Lygeros and Datta N. Godbole. </author> <title> An Interface between Continuous and Discrete Event Controllers for Vehicle Automation. </title> <booktitle> In Proc. 13th American Control Conference, </booktitle> <pages> pages 801-805, </pages> <address> Baltimore, Maryland, </address> <month> June/July </month> <year> 1994. </year> <note> Also appeared as Ref. 24. </note>
Reference-contexts: The goal of PATH is to increase vehicle throughput by organizing traffic into platoons of closely spaced vehicles. Godbole, Lygeros, and Sastry <ref> [12, 13, 23, 25, 27] </ref> at U.C. Berkeley have studied various problems that arise in the control of the vehicle platoons.
Reference: [24] <author> John Lygeros and Datta N. Godbole. </author> <title> An Interface between Continuous and Discrete Event Controllers for Vehicle Automation. </title> <type> Technical Report UCB-ITS-PRR-94-12, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <month> April </month> <year> 1994. </year>
Reference: [25] <author> John Lygeros, Datta N. Godbole, and Shankar Sastry. </author> <title> A Verified Hybrid Controller for Automated Vehicles. </title> <booktitle> In 35th IEEE Conference on Decision and Control (CDC'96), </booktitle> <pages> pages 2289-2294, </pages> <address> Kobe, Japan, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: The goal of PATH is to increase vehicle throughput by organizing traffic into platoons of closely spaced vehicles. Godbole, Lygeros, and Sastry <ref> [12, 13, 23, 25, 27] </ref> at U.C. Berkeley have studied various problems that arise in the control of the vehicle platoons.
Reference: [26] <author> John Lygeros, Datta N. Godbole, and Shankar Sastry. </author> <title> A Verified Hybrid Controller for Automated Vehicles. </title> <type> Technical Report UCB-ITS-PRR-97-9, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1997. </year> <note> To appear in the Special Issue on Hybrid Systems of the IEEE Transactions on Automatic Control. Preliminary version appeared as Ref. 25. </note>
Reference-contexts: The platoon maneuvers that have been addressed are the platoon join, in which two or more adjacent platoons join to form a single platoon, the platoon split, in which a platoon splits in two, and the platoon lane change. Lygeros [22] and Lygeros et al. <ref> [26, 27] </ref> used a game theoretic approach to prove that all platoon maneuvers are safe. Recently, Dolginova and Lynch [8] have used hybrid I/O automata to model and verify the safety of the platoon join maneuver.
Reference: [27] <author> John Lygeros, Datta N. Godbole, and Sastry Shankar. </author> <title> A Game Theoretic Approach to Hybrid System Design. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Proc. DIMACS/SYCON Workshop on Verification and Control of Hybrid Systems, Hybrid Systems III: Verification and Control, volume 1066 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <title> The DIMACS/SYCON Workshop on Verification and Control of Hybrid Systems took place in New Brunswick, </title> <address> New Jersey, </address> <note> in October 1995. </note>
Reference-contexts: The goal of PATH is to increase vehicle throughput by organizing traffic into platoons of closely spaced vehicles. Godbole, Lygeros, and Sastry <ref> [12, 13, 23, 25, 27] </ref> at U.C. Berkeley have studied various problems that arise in the control of the vehicle platoons. <p> The platoon maneuvers that have been addressed are the platoon join, in which two or more adjacent platoons join to form a single platoon, the platoon split, in which a platoon splits in two, and the platoon lane change. Lygeros [22] and Lygeros et al. <ref> [26, 27] </ref> used a game theoretic approach to prove that all platoon maneuvers are safe. Recently, Dolginova and Lynch [8] have used hybrid I/O automata to model and verify the safety of the platoon join maneuver.
Reference: [28] <author> Nancy Lynch, Roberto Segala, Frits Vaandrager, and H. B. Weinberg. </author> <title> Hybrid I/O Automata. </title> <type> Technical Memo MIT/LCS/TM-544, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> December </month> <year> 1995. </year>
Reference: [29] <author> Nancy Lynch, Roberto Segala, Frits Vaandrager, and H. B. Weinberg. </author> <title> Hybrid I/O Automata. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Proc. DIMACS/SYCON Workshop on Verification and Control of Hybrid Systems, Hybrid Systems III: Verification and Control, volume 1066 of Lecture Notes in Computer Science, </booktitle> <pages> pages 496-510. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <title> The DIMACS/SYCON Workshop on Verification and Control of Hybrid Systems took place in New Brunswick, </title> <address> New Jersey, </address> <note> in October 1995. </note>
Reference-contexts: As a case study, the thesis focuses on the development of techniques that use hybrid I/O automata <ref> [29, 30] </ref> to model and analyze automated vehicle transportation systems and, in particular, their various protection subsystems | control systems that are used to ensure that the physical plant at hand does not violate its various safety requirements. The thesis is split into two major parts. <p> Finally, in Chapter 10 we give a summary of the thesis, an evaluation of the research presented, and directions in which such research could be extended or continued. 9 10 Chapter 2 Hybrid I/O Automata The hybrid I/O automaton (HIOA) model <ref> [29, 30] </ref> is based on the timed I/O automaton model [10, 11, 33, 34], but includes explicit treatment of continuous behavior. To make this thesis self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. <p> The Axiom Init and the Axioms D1-D3 that are presented here are slightly different from the respective axioms introduced in the preliminary version of the HIOA model <ref> [29] </ref>. The new axioms allow a HIOA to change the values of its internal variables if the environment modifies the input variables of the HIOA. Notation Let A be a HIOA as described above.
Reference: [30] <author> Nancy Lynch, Roberto Segala, Frits Vaandrager, and H. B. Weinberg. </author> <title> Hybrid I/O Automata. </title> <type> Preprint. </type> <note> Preliminary versions appeared as Refs. 28 and 29, </note> <month> June </month> <year> 1997. </year>
Reference-contexts: As a case study, the thesis focuses on the development of techniques that use hybrid I/O automata <ref> [29, 30] </ref> to model and analyze automated vehicle transportation systems and, in particular, their various protection subsystems | control systems that are used to ensure that the physical plant at hand does not violate its various safety requirements. The thesis is split into two major parts. <p> protectors and that their composition results in a protection system that guarantees that the vehicles neither exceed the speed limit, nor collide among themselves. 1.3 Thesis Overview In order for this thesis to be self contained, Chapter 2 gives a short and terse treatment of the hybrid I/O automaton model <ref> [30] </ref> and describes the conventions used in the specification of HIOA in this thesis. <p> Finally, in Chapter 10 we give a summary of the thesis, an evaluation of the research presented, and directions in which such research could be extended or continued. 9 10 Chapter 2 Hybrid I/O Automata The hybrid I/O automaton (HIOA) model <ref> [29, 30] </ref> is based on the timed I/O automaton model [10, 11, 33, 34], but includes explicit treatment of continuous behavior. To make this thesis self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. <p> To make this thesis self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. The presentation follows precisely that of Lynch, Segala, Vaandrager, and Weinberg <ref> [30] </ref>. The chapter is organized as follows. We begin by defining auxiliary concepts and notation pertaining to functions, time, variables, valuations, and trajectories. We proceed to define hybrid I/O automata, hybrid executions, and hybrid traces.
Reference: [31] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and Backward Simulations | Part I: </title> <journal> Untimed Systems. </journal> <note> Technical Memo MIT/LCS/TM-486, </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> May </month> <year> 1993. </year>
Reference: [32] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and Backward Simulations | Part I: </title> <journal> Untimed Systems. Information and Computation, </journal> <volume> 121(2) </volume> <pages> 214-233, </pages> <month> September </month> <year> 1995. </year> <note> Preliminary version appeared as Ref. 31. </note>
Reference-contexts: Axiom D1, which is simply the hybrid extension of the input enabling axiom from the (untimed) I/O automaton model <ref> [11, 32, 34] </ref>, says that a HIOA should accept all input actions in all states. Axiom D2 postulates that an environment action that does not affect the input variables can not be "detected" by the automaton and, therefore, leaves the state unchanged.
Reference: [33] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and Backward Simulations | Part II: </title> <journal> Timing-Based Systems. </journal> <note> Technical Memo MIT/LCS/TM-487.c, </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: in Chapter 10 we give a summary of the thesis, an evaluation of the research presented, and directions in which such research could be extended or continued. 9 10 Chapter 2 Hybrid I/O Automata The hybrid I/O automaton (HIOA) model [29, 30] is based on the timed I/O automaton model <ref> [10, 11, 33, 34] </ref>, but includes explicit treatment of continuous behavior. To make this thesis self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters.
Reference: [34] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and Backward Simulations | Part II: </title> <journal> Timing-Based Systems. Information and Computation, </journal> <volume> 128(1) </volume> <pages> 1-25, </pages> <month> July </month> <year> 1996. </year> <note> Preliminary version appeared as Ref. 33. </note>
Reference-contexts: This model is an extension of the timed I/O automaton model <ref> [11, 34] </ref> and allows the explicit treatment of continuous behavior. The hybrid I/O automaton model is inspired by the phase transition models [2, 4, 35, 36]. The hybrid I/O automaton model is a (possibly) infinite state model of a system involving both discrete and continuous behavior. <p> In particular, models that are analogous to the timed I/O automaton model <ref> [11, 34] </ref> are the models of Alur and Dill [6], Lamport [20], and Henzinger, Manna, and Pnueli [18]. <p> in Chapter 10 we give a summary of the thesis, an evaluation of the research presented, and directions in which such research could be extended or continued. 9 10 Chapter 2 Hybrid I/O Automata The hybrid I/O automaton (HIOA) model [29, 30] is based on the timed I/O automaton model <ref> [10, 11, 33, 34] </ref>, but includes explicit treatment of continuous behavior. To make this thesis self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. <p> Axiom D1, which is simply the hybrid extension of the input enabling axiom from the (untimed) I/O automaton model <ref> [11, 32, 34] </ref>, says that a HIOA should accept all input actions in all states. Axiom D2 postulates that an environment action that does not affect the input variables can not be "detected" by the automaton and, therefore, leaves the state unchanged.
Reference: [35] <author> Oded Maler, Zohar Manna, and Amir Pnueli. </author> <title> From Timed to Hybrid Systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proc. REX Workshop "Real-Time: Theory in Practice", volume 600 of Lecture Notes in Computer Science, </booktitle> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <title> The REX Workshop "Real-Time: Theory in Practice" took place in Mook, </title> <address> The Netherlands, </address> <note> in June 1991. </note>
Reference-contexts: This model is an extension of the timed I/O automaton model [11, 34] and allows the explicit treatment of continuous behavior. The hybrid I/O automaton model is inspired by the phase transition models <ref> [2, 4, 35, 36] </ref>. The hybrid I/O automaton model is a (possibly) infinite state model of a system involving both discrete and continuous behavior. The states of a hybrid I/O automaton (HIOA) are the valuations of a set of variables. <p> As is the case with the timed I/O automaton model, these models have also been extended to the hybrid setting; for instance, the timed transition model [18] has been extended to the phase transition model <ref> [35, 36] </ref>. Phase transition systems are analogous to hybrid I/O automata | the transitions and the activities of phase transition systems correspond to the discrete transitions and the trajectories of hybrid I/O automata.
Reference: [36] <author> Zohar Manna and Amir Pnueli. </author> <title> Verifying Hybrid Systems. </title> <editor> In Robert L. Grossman, Anil Nerode, Anders P. Ravn, and Hans Rischel, editors, </editor> <booktitle> Hybrid Systems, volume 736 of Lecture Notes in Computer Science, </booktitle> <pages> pages 4-35. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This model is an extension of the timed I/O automaton model [11, 34] and allows the explicit treatment of continuous behavior. The hybrid I/O automaton model is inspired by the phase transition models <ref> [2, 4, 35, 36] </ref>. The hybrid I/O automaton model is a (possibly) infinite state model of a system involving both discrete and continuous behavior. The states of a hybrid I/O automaton (HIOA) are the valuations of a set of variables. <p> As is the case with the timed I/O automaton model, these models have also been extended to the hybrid setting; for instance, the timed transition model [18] has been extended to the phase transition model <ref> [35, 36] </ref>. Phase transition systems are analogous to hybrid I/O automata | the transitions and the activities of phase transition systems correspond to the discrete transitions and the trajectories of hybrid I/O automata.
Reference: [37] <author> Amir Pnueli and Joseph Sifakis, </author> <title> editors. </title> <journal> Special Issue on Hybrid Systems, </journal> <volume> volume 138, </volume> <booktitle> part 1 of Theoretical Computer Science. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <month> February </month> <year> 1995. </year>
Reference: [38] <author> Thomas Stauner, Olaf Muller, and Max Fuchs. </author> <title> Using HyTech to Verify an Automotive Control System. </title> <editor> In Oded Maler, editor, </editor> <booktitle> Proc. International Workshop on Hybrid and Real-Time Systems (HART'97), volume 1201 of Lecture Notes in Computer Science, </booktitle> <pages> pages 139-153. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <booktitle> The International Workshop on Hybrid and Real-Time Systems took place in Grenoble, </booktitle> <address> France, </address> <month> in March </month> <year> 1997. </year>
Reference-contexts: The success in the modeling, analysis, and controller design for the above benchmark problems has encouraged the formal modeling of more complex hybrid systems; for example, automated transportation systems [41,42], industrial and chemical processes [9,40], rail-vehicle control [39], and complex automotive suspension systems <ref> [38] </ref>. The motivation behind such research lies mostly in the safety-critical nature of the systems at hand. In the case of automated transportation systems, the safety of the passengers has greatly encouraged the use of formal techniques.
Reference: [39] <author> Peter Terwiesch, Erich Scheiben, Anders Jenry Petersen, and Thomas Keller. </author> <title> A Digital Real-Time Simulator for Rail-Vehicle Control System Testing. </title> <editor> In Oded Maler, editor, </editor> <booktitle> 166 Proc. International Workshop on Hybrid and Real-Time Systems (HART'97), volume 1201 of Lecture Notes in Computer Science, </booktitle> <pages> pages 199-212. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <booktitle> The International Workshop on Hybrid and Real-Time Systems took place in Grenoble, </booktitle> <address> France, </address> <month> in March </month> <year> 1997. </year>
Reference-contexts: The success in the modeling, analysis, and controller design for the above benchmark problems has encouraged the formal modeling of more complex hybrid systems; for example, automated transportation systems [41,42], industrial and chemical processes [9,40], rail-vehicle control <ref> [39] </ref>, and complex automotive suspension systems [38]. The motivation behind such research lies mostly in the safety-critical nature of the systems at hand. In the case of automated transportation systems, the safety of the passengers has greatly encouraged the use of formal techniques.
Reference: [40] <author> Adam L. Turk, Scott T. Probst, and Gary J. </author> <title> Powers. Verification of Real Time Chemical Processing Systems. </title> <editor> In Oded Maler, editor, </editor> <booktitle> Proc. International Workshop on Hybrid and Real-Time Systems (HART'97), volume 1201 of Lecture Notes in Computer Science, </booktitle> <pages> pages 259-272. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <booktitle> The International Workshop on Hybrid and Real-Time Systems took place in Grenoble, </booktitle> <address> France, </address> <month> in March </month> <year> 1997. </year>
Reference: [41] <author> Pravin Varaiya. </author> <title> Smart Cars on Smart Roads: Problems of Control. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 38(2) </volume> <pages> 195-207, </pages> <year> 1993. </year>
Reference-contexts: In the case of automated transportation systems, the safety of the passengers has greatly encouraged the use of formal techniques. The recent interest in addressing safety concerns related to automated highway systems and, in particular, the California PATH project <ref> [41] </ref>, has resulted in a surge of hybrid system problems. The goal of PATH is to increase vehicle throughput by organizing traffic into platoons of closely spaced vehicles. Godbole, Lygeros, and Sastry [12, 13, 23, 25, 27] at U.C.
Reference: [42] <author> H. B. Weinberg, Nancy Lynch, and Norman Delisle. </author> <title> Verification of Automated Vehicle Protection Systems. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <title> Hybrid Systems III: Verification and Control, </title> <booktitle> volume 1066 of Lecture Notes in Computer Science, </booktitle> <pages> pages 101-113. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: On a similar note, Weinberg [43] has analyzed a deceleration maneuver in which a discrete controller slows a train down to a target velocity range within a given distance. In further research, Weinberg et al. <ref> [42] </ref> have modeled the personal rapid transit system (PRT 2000 TM ) under development at Raytheon Corporation and verified the correct operation of the emergency control components used to guarantee that the vehicles neither exceed a prespecified speed limit, nor collide among themselves. 1.2 Automated Transportation Systems Among the hybrid systems <p> However, their composition would constitute an overspeed protection system for all the vehicles. This thesis extends the work by Weinberg, Lynch, and Delisle <ref> [42] </ref> on modeling the AVPS of the personal rapid transit system (PRT 2000 TM ) under development at Raytheon Corpo 6 w / - w / Protector 1 Protector 2 Protector 3 Protector 4 Protector 5 Physical Plant ration. Weinberg et al. [42] model the PRT 2000 TM as a transportation <p> extends the work by Weinberg, Lynch, and Delisle <ref> [42] </ref> on modeling the AVPS of the personal rapid transit system (PRT 2000 TM ) under development at Raytheon Corpo 6 w / - w / Protector 1 Protector 2 Protector 3 Protector 4 Protector 5 Physical Plant ration. Weinberg et al. [42] model the PRT 2000 TM as a transportation system where: * vehicles are traveling on a single track, * vehicle velocities are non-negative, * vehicles can stop instantaneously, as if they could hit a brick wall, * collisions among vehicles are pairwise, * brakes are binary, i.e., the braking of <p> In addition to the above assumptions, the communication among the various subsystems of the PRT 2000 TM is assumed to be reliable, periodic, and timely. Weinberg et al. <ref> [42] </ref> verify the correctness of the overspeed and the collision protection subsystems. First, it is shown that the overspeed protector guarantees that none of the vehicles exceed the speed limit and that the collision protector prohibits vehicle collisions provided that none of the vehicles exceed the speed limit. <p> The disadvantage is that the simplified model might not be a truthful representation of the real physical plant. In this thesis, we extend the protector composition results of Weinberg et al. <ref> [42] </ref> and relax their modeling assumptions about the PRT 2000 TM .
Reference: [43] <author> Henri B. Weinberg. </author> <title> Correctness of Vehicle Control Systems: A Case Study. </title> <institution> Master of Science Thesis, Dept. of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> February </month> <year> 1996. </year> <pages> 167 168 </pages>
Reference-contexts: Lygeros [22] and Lygeros et al. [26, 27] used a game theoretic approach to prove that all platoon maneuvers are safe. Recently, Dolginova and Lynch [8] have used hybrid I/O automata to model and verify the safety of the platoon join maneuver. On a similar note, Weinberg <ref> [43] </ref> has analyzed a deceleration maneuver in which a discrete controller slows a train down to a target velocity range within a given distance.
References-found: 43

