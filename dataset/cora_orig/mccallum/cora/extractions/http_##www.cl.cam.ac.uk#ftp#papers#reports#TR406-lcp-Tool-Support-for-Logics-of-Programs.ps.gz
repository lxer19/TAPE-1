URL: http://www.cl.cam.ac.uk/ftp/papers/reports/TR406-lcp-Tool-Support-for-Logics-of-Programs.ps.gz
Refering-URL: ftp://ftp.cl.cam.ac.uk/ml/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Tool Support for Logics of Programs Key words: proof tools generic reasoning logic programming logical
Author: Lawrence C. Paulson 
Note: To appear in the proceedings Mathematical Methods in Program Development (Sum mer School Marktoberdorf 1996), Springer-Verlag.  
Date: November 1996  
Address: Cambridge  
Affiliation: Computer Laboratory, University of  
Abstract: Summary. Proof tools must be well designed if they are to be more eective than pen and paper. Isabelle supports a range of formalisms, two of which are described (higher-order logic and set theory). Isabelle's representation of logic is inuenced by logic programming: its logical variables can be used to implement step-wise retnement. Its automatic proof procedures are based on search primitives that are directly available to users. While emphasizing basic concepts, the article also discusses applications such as an approach to the analysis of security protocols. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Aczel, P., </author> <title> An introduction to inductive detnitions, In Handbook of Mathematical Logic, </title> <editor> J. Barwise, Ed. </editor> <publisher> North-Holland, </publisher> <year> 1977, </year> <pages> pp. 739782 </pages>
Reference: 2. <author> Anderson, P., Basin, D., </author> <title> Deriving and applying logic program transformers, </title> <booktitle> In Algorithms, Concurrency and Knowledge (1995 Asian Computing Science Conference) (Pathumthani, </booktitle> <address> Thailand, </address> <month> December </month> <year> 1995), </year> <title> LNCS 1023, </title> <publisher> Springer, </publisher> <pages> pp. 301318 </pages>
Reference-contexts: Let us consider a few of these. (Applications of inductive detnitions were presented in 6.4.) Isabelle's logical variables support interactive retnement, where a specitcation is transformed step-by-step into a proven implementation. Investigators at the Max Planck Institute, Saarbrcken have worked on deriving logic programs <ref> [2] </ref>, functional programs [4] and hardware [5]. Coen [8] has implemented a variant of Manna and Waldinger's approach [19] to retnement of functional programs. His Classical Computational Logic (CCL) extends trst-order logic with a functional language detned by an operational semantics. He derives programs in this language, not mathematical functions.
Reference: 3. <author> Anderson, R., Needham, R., </author> <booktitle> Programming Satan's computer, In Computer Science Today: Recent Trends and Developments, </booktitle> <editor> J. van Leeuwen, Ed., </editor> <publisher> LNCS 1000. Springer, </publisher> <year> 1995, </year> <pages> pp. 426440 </pages>
Reference-contexts: By including a fresh nonce in a message, and checking for its presence in the acknowledgement, an agent can reject old messages replayed by the spy. Many cryptographic protocols have been shown to be vulnerable, often in subtle ways <ref> [3] </ref>. Rigorous correctness proofs seem essential. One popular proof method is based upon logics of belief [7]. Security protocols can also be analyzed using Isabelle. In preliminary experiments, I have proved properties of several well-known protocols, and discovered a new attack on one of them.
Reference: 4. <author> Ayari, A., Basin, D., </author> <title> Generic system support for deductive program development, </title> <booktitle> In Second International Workshop on Tools and Algorithms for the Construction and Analysis of Systems (TACAS '96) (1996), </booktitle> <publisher> LNCS 1055, Springer, </publisher> <pages> pp. 313328 </pages>
Reference-contexts: Let us consider a few of these. (Applications of inductive detnitions were presented in 6.4.) Isabelle's logical variables support interactive retnement, where a specitcation is transformed step-by-step into a proven implementation. Investigators at the Max Planck Institute, Saarbrcken have worked on deriving logic programs [2], functional programs <ref> [4] </ref> and hardware [5]. Coen [8] has implemented a variant of Manna and Waldinger's approach [19] to retnement of functional programs. His Classical Computational Logic (CCL) extends trst-order logic with a functional language detned by an operational semantics. He derives programs in this language, not mathematical functions.
Reference: 5. <author> Basin, D., Friedrich, S., </author> <title> Modeling a hardware synthesis methodology in Isabelle, </title> <editor> In von Wright et al. </editor> <volume> [51], </volume> <pages> pp. 3350 </pages>
Reference-contexts: Investigators at the Max Planck Institute, Saarbrcken have worked on deriving logic programs [2], functional programs [4] and hardware <ref> [5] </ref>. Coen [8] has implemented a variant of Manna and Waldinger's approach [19] to retnement of functional programs. His Classical Computational Logic (CCL) extends trst-order logic with a functional language detned by an operational semantics. He derives programs in this language, not mathematical functions.
Reference: 6. <author> Basin, D., Matthews, S., Vigan, L., </author> <title> Labelled propositional modal logics: theory and practice, </title> <type> Tech. Rep. </type> <institution> MPI-I-96-2-002, Max-Planck-Institut fr Informatik, Saarbrcken, </institution> <year> 1996 </year>
Reference-contexts: Kolyang et al. [15] report a promising implementation of Z References 29 schemas. The TokiZ project [17] has built a prototype including a deductive system for Z and much of Z's mathematical library. Isabelle has been applied to studies in logic. Basin et al. <ref> [6] </ref> are applying Isabelle to study labelled deductive systems. As a trst example of modular presentation of logics, they have implemented a wide variety of modal logics. Matthews is using Isabelle to implement Feferman's theory of tnitary inductive detnitions, FS0 [21].
Reference: 7. <author> Burrows, M., Abadi, M., Needham, R. M., </author> <title> A logic of authentication, </title> <journal> Proceedings of the Royal Society of London 426 (1989), </journal> <volume> 233271 </volume>
Reference-contexts: Many cryptographic protocols have been shown to be vulnerable, often in subtle ways [3]. Rigorous correctness proofs seem essential. One popular proof method is based upon logics of belief <ref> [7] </ref>. Security protocols can also be analyzed using Isabelle. In preliminary experiments, I have proved properties of several well-known protocols, and discovered a new attack on one of them. Inductive detnitions are used to specify the elements of messages and possible traces of protocol runs. <p> From the empty list, each agent sees his initial state, which contains only the key shared with the server. The spy holds all the lost keys. Consider the Otway-Rees protocol, as simplited by Burrows et al. <ref> [7, page 247] </ref>. A protocol run starts with some agent A sending to B a message, requesting to start a secure conversation. Agent B forwards that message and further information to the server S.
Reference: 8. <author> Coen, M. D., </author> <title> Interactive Program Derivation, </title> <type> PhD thesis, </type> <institution> University of Cambridge, </institution> <month> Nov. </month> <year> 1992, </year> <note> Computer Laboratory Technical Report 272 </note>
Reference-contexts: Investigators at the Max Planck Institute, Saarbrcken have worked on deriving logic programs [2], functional programs [4] and hardware [5]. Coen <ref> [8] </ref> has implemented a variant of Manna and Waldinger's approach [19] to retnement of functional programs. His Classical Computational Logic (CCL) extends trst-order logic with a functional language detned by an operational semantics. He derives programs in this language, not mathematical functions.
Reference: 9. <author> Felty, A., </author> <title> Implementing tactics and tacticals in a higher-order logic programming language, </title> <note> Journal of Automated Reasoning 11, 1 (1993), 4382 </note>
Reference: 10. <author> Felty, A., Miller, D., </author> <title> Encoding a dependent-type -calculus in a logic programming language, </title> <booktitle> In 10th International Conference on Automated Deduction (1990), </booktitle> <editor> M. E. Stickel, Ed., </editor> <publisher> LNAI 449, Springer, </publisher> <pages> pp. 221235 </pages>
Reference: 11. <author> Frost, J., </author> <title> A case study of co-induction in Isabelle, </title> <type> Tech. Rep. 359, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <month> Feb. </month> <year> 1995 </year>
Reference-contexts: Using dierent techniques, Nipkow [30] and Rasmussen [45] have both proved the Church-Rosser theorem. A datatype specites the set of -terms, while inductive detnitions specify several reduction relations. To demonstrate coinductive detnitions, Frost <ref> [11] </ref> has proved the consistency of the dynamic and static semantics for a small functional language. The example, by Milner and Tofte [26], concerns a coinductively detned typing relation.
References-found: 11

