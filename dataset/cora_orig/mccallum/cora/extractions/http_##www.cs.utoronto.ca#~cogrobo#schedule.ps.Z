URL: http://www.cs.utoronto.ca/~cogrobo/schedule.ps.Z
Refering-URL: http://www.cs.utoronto.ca/~cogrobo/
Root-URL: 
Email: freiter,zyg@cs.toronto.edu  
Title: Scheduling in the Situation Calculus: A Case Study  
Author: Ray Reiter and Zheng Yuhua 
Keyword: GOLOG, a situation calculus-based logic programming language for dynamic domains.  
Web: http://www.cs.toronto.edu/~cogrobo/  
Address: Toronto, Canada M5S 3G4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: We illustrate the utility of the situation calculus for representing complex scheduling tasks by axiomatizing a deadline driven scheduler in the language. The actions arising in such a scheduler are examples of natural actions, as investigated in the concurrent situation calculus by Pinto [10], and later by Reiter [13]. Because the deadline driven scheduler is sequential, we must first suitably modify Reiter's approach to natural actions so it applies to the sequential case. Having done this, we then show how the situation calculus axiomatization of this scheduler yields a very simple simulator in 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. R. Haas. </author> <title> The case for domain-specific frame axioms. </title> <editor> In F. M. Brown, editor, </editor> <booktitle> The frame problem in artificial intelligence. Proceedings of the 1987 workshop, </booktitle> <pages> pages 343-348, </pages> <address> Los Altos, California, 1987. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: If possible, we also want a parsimonious representation for these frame axioms (because in their simplest form, there are too many of them). 3 2.4 A Simple Solution to the Frame Problem By appealing to earlier ideas of Haas <ref> [1] </ref>, Schubert [14] and Pednault [9], Reiter [11] proposes a simple solution to the frame problem, which we illustrate with an example.
Reference: [2] <author> Yves Lesperance, Hector Levesque, Fangzhen Lin, Daniel Marcu, Raymond Reiter, and Richard Scherl. </author> <title> A logical approach to high-level robot programming a progress report. In Control of the Physical World by Intelligent Systems, </title> <booktitle> Working Notes of the 1994 AAAI Fall Symposium, November, 1994. </booktitle> <address> New Orleans, LA. </address>
Reference-contexts: One of the few exceptions to this is the situation calculus-based programming language GOLOG (Levesque et al. [3]), and some of its applications to robotics (Lesperance et al. <ref> [2] </ref>) and agent programming (Marcu et al. [6]). The purpose of this paper is to explore the usefulness of the situation calculus for a new class of applications in dynamic modeling, namely temporal scheduling problems. <p> This is a major advantage for the purposes of the Cognitive Robotics Project at the University of Toronto, whose long term goal is to use GOLOG for high level control of dynamical systems, including robotic behaviors <ref> [2] </ref>. Since real time control is an essential component of such modeling tasks, the incorporation of schedulers into the systems' GOLOG behavioral descriptions is essential, and we are encouraged in this by our experience with the above deadline driven scheduler.
Reference: [3] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. </author> <title> GOLOG : A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming, </journal> <note> Special Issue on Actions, 1996. To appear. </note>
Reference-contexts: One of the few exceptions to this is the situation calculus-based programming language GOLOG (Levesque et al. <ref> [3] </ref>), and some of its applications to robotics (Lesperance et al. [2]) and agent programming (Marcu et al. [6]). The purpose of this paper is to explore the usefulness of the situation calculus for a new class of applications in dynamic modeling, namely temporal scheduling problems. <p> These describe the effects of a given action on the fluents the causal laws of the domain. For example, a robot dropping a 1 This section is borrowed from Levesque et al <ref> [3] </ref>. 2 In formulas, free variables are considered to be universally prenex quantified. <p> In other words, the finite schedules are precisely the legal situations, as defined in Section 4.1. 5 6 The Scheduler: An Implementation in GOLOG 6.1 GOLOG GOLOG (Levesque et al <ref> [3] </ref>) is a situation calculus-based logic programming language for defining complex actions using a repertoire of user specified primitive actions. <p> In fact, this can be done, and we have a proof of this, but the proof is not entirely trivial. 16 conditionals, recursive procedures) as well as three flavours of nondeterministic choice. Here we briefly describe the GOLOG control structures. For a precise description of their seman tics, see <ref> [3] </ref>. 1. Sequence: ff ; fi: Do action ff, followed by action fi. 2. Test actions: p? Test the truth value of expression p in the current situation. 3. While loops: while p do ff endWhile. 4. Conditionals: if p then ff else fi: 5. <p> Nondeterministic choice of arguments: ( x)ff. Nondeterministically pick a value for x, and for that value of x, do the action ff. 7. Nondeterministic repetition: ff fl . Do ff a nondeterministic number of times. 8. Procedures, including recursion. The semantics of a GOLOG program is defined (see <ref> [3] </ref>) by macro-expansion, using a ternary relation Do. Do (program; s; s 0 ) is an abbreviation for a situation calculus formula whose intuitive meaning is that s 0 is one of the situations reached by evaluating the GOLOG program, beginning in situation s. <p> In evaluating these conditions, the interpreter uses negation as failure to handle neg, and consults the user-supplied holds predicate to determine which fluents are true. 6 See <ref> [3] </ref> for the formal semantics of test conditions. 7 This interpreter, and indeed much of the material for this section, is taken from Levesque et al [3]. <p> conditions, the interpreter uses negation as failure to handle neg, and consults the user-supplied holds predicate to determine which fluents are true. 6 See <ref> [3] </ref> for the formal semantics of test conditions. 7 This interpreter, and indeed much of the material for this section, is taken from Levesque et al [3].
Reference: [4] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> J. of Logic and Computation, special issue on actions and processes, </journal> <volume> 4 </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: Such constraints sometimes implicitly contain effect axioms (so-called indirect effects), in which case the above completeness assumption will not be true. The assumption that there are no state constraints in the axiomatization of the domain will be made throughout this paper. In <ref> [4] </ref>, the approach discussed in this section is extended to deal with state constraints, by compiling their effects into the successor state axioms. 3 Formal Preliminaries 3.1 The Language of the Situation Calculus The language L of the situation calculus is many-sorted, second-order, with equality. <p> object: Finally, we need a finite number of function symbols of arity object n ! action, n 0, for actions, and a finite number of function symbols of arity object n ! object, n 0. 3.2 Axiomatizing the Situation Calculus We shall need the following foundational axioms (Lin and Reiter <ref> [4] </ref>, Reiter [12]) for the situation calculus: S 0 6= do (a; s); (8) (8P )[P (S 0 ) ^ (8a; s)(P (s) P (do (a; s))) (8s)P (s)]; (10) s &lt; do (a; s 0 ) (P oss (a; s 0 ) ^ s s 0 ): (12) Intuitively, the <p> (15) Axioms (8) - (15) are the foundational axioms for the sequential temporal situation calculus. 3.5 Action Precondition Axioms As in Section 2.2, we shall require action precondition axioms, but we must take into account that the global constraint (15) is a qualification constraint that "compiles" (see Lin and Reiter <ref> [4] </ref>) into assertions about P oss of the form: P oss (A (~x; t); s) start (s) t; for each action A. In view of the results in Lin and Reiter [4] on the qualification problem, this means that in the temporal situation calculus, action precondition axioms will all have the <p> must take into account that the global constraint (15) is a qualification constraint that "compiles" (see Lin and Reiter <ref> [4] </ref>) into assertions about P oss of the form: P oss (A (~x; t); s) start (s) t; for each action A. In view of the results in Lin and Reiter [4] on the qualification problem, this means that in the temporal situation calculus, action precondition axioms will all have the form: P oss (A (~x; t); s) start (s) t ^ (~x; t; s): (16) Here, (~x; t; s) is any first order formula with free variables among ~x; t and
Reference: [5] <author> C.L. Liu and J.W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: Specifically, in this paper, we axiomatize the deadline driven scheduler of Liu and Layland <ref> [5] </ref> in the situation calculus. Because this scheduler is sequential, we must fl Fellow of the Canadian Institute for Advanced Research 1 first suitably modify Reiter's concurrent approach to natural actions so it applies to the sequential case. <p> We now turn to this scheduler. 5 A Deadline Driven Scheduler 5.1 Informal Description A typical example of a scheduling algorithm for real time systems is the deadline driven scheduler of Liu and Layland <ref> [5] </ref>, first proposed in 1973. It supposes that we are given a finite number of tasks, all time-sharing a single processor. Each task p i requires a certain amount of processor time C i for its completion, and has a deadline T i &gt; C i for its completion. <p> Obviously, there are situations in which the scheduler won't be able to meet this scheduling requirement for all its tasks, for example, when two tasks have the same deadline of 2, and request the same execution time of 2. <ref> [5] </ref> established a necessary and sufficient condition for the deadline driven scheduler to meet its requirement when it serves multiple periodic tasks, i.e. when the task is to be 11 executed repeatedly, and the requests for execution are made at regular periodic intervals, as described above. <p> The following theorem provides necessary and sufficient conditions for the scheduling algorithm to meet the requirement that every task completes its running time before the end of its current period: Theorem (Liu/Layland <ref> [5] </ref>) For a given set of m tasks, the deadline driven scheduling algorithm is feasible if and only if , (C 1 =T 1 ) + (C 2 =T 2 ) + ::: + (C m =T m ) 1 where C i is the run time of task i, and
Reference: [6] <author> D. Marcu, Y. Lesperance, H. Levesque, F. Lin, R. Reiter, and R. Scherl. </author> <title> Foundations of a logical approach to agent programming. </title> <editor> In M. Wooldridge, J.P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents Volume II Proceedings of the 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), </booktitle> <pages> pages 331-346. </pages> <note> Springer-Verlag, Lecture Notes in Artificial Intelligence, 1996. To appear. </note>
Reference-contexts: One of the few exceptions to this is the situation calculus-based programming language GOLOG (Levesque et al. [3]), and some of its applications to robotics (Lesperance et al. [2]) and agent programming (Marcu et al. <ref> [6] </ref>). The purpose of this paper is to explore the usefulness of the situation calculus for a new class of applications in dynamic modeling, namely temporal scheduling problems.
Reference: [7] <author> J. McCarthy. </author> <title> Situations, actions and causal laws. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1963. </year> <note> Reprinted in Semantic Information Processing (M. </note> <editor> Minsky ed.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1968, </year> <pages> pp. 410-417. </pages>
Reference-contexts: 1 Introduction The situation calculus (McCarthy <ref> [7] </ref>) has long been the formalism of choice in artificial intelligence for theoretical investigations of properties of actions, but until very recently, it has not been taken seriously as a specification or implementation language for practical problems in dynamic world modeling. <p> Having done this, we show how the situation calculus axiomatization of this scheduler yields a very simple simulator in GOLOG. 2 An Informal Introduction to the Situation Calculus 1 2.1 Intuitive Ontology for the Situation Calculus The situation calculus (McCarthy <ref> [7] </ref>) is a first order language (with, as we shall see later, some second order features) specifically designed for representing dynamically changing worlds. All changes to the world are the result of named actions.
Reference: [8] <author> J. McCarthy and P. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <address> Scotland, </address> <year> 1969. </year> <month> 24 </month>
Reference-contexts: (b); s) ^ nexto (b; x; s) broken (x; do (explode (b); s)): (2) A robot repairing an object causes it to be not broken: P oss (repair (r; x); s) :broken (x; do (repair (r; x); s)): (3) 2.3 The Frame Problem As first observed by McCarthy and Hayes <ref> [8] </ref>, axiomatizing a dynamic world requires more than just action precondition and effect axioms. So-called frame axioms are also necessary. These specify the action invariants of the domain, namely, those fluents which remain unaffected by a given action.
Reference: [9] <author> E.P.D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In R.J. Brachman, H. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1989. </year>
Reference-contexts: If possible, we also want a parsimonious representation for these frame axioms (because in their simplest form, there are too many of them). 3 2.4 A Simple Solution to the Frame Problem By appealing to earlier ideas of Haas [1], Schubert [14] and Pednault <ref> [9] </ref>, Reiter [11] proposes a simple solution to the frame problem, which we illustrate with an example. Suppose that (1), (2), and (3) are all the effect axioms for the fluent broken, i.e. they describe all the ways that an action can change the truth value of broken.
Reference: [10] <author> J.A. Pinto. </author> <title> Temporal Reasoning in the Situation Calculus. </title> <type> PhD thesis, </type> <institution> University of Toronto, Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: Such problems differ from those "traditionally" considered in the literature on the situation calculus; they involve time, and the actions taken by the scheduler are natural actions (Pinto <ref> [10] </ref>, Reiter [13]), which are actions that must occur at their predetermined times, provided no earlier actions occur to prevent them. Specifically, in this paper, we axiomatize the deadline driven scheduler of Liu and Layland [5] in the situation calculus. <p> So, start meeting (person; t) might be the instantaneous action of person starting a meeting at time t. In this paper, we do not need to treat actions with durations. For a description of how to do this using instantaneous actions, see Pinto <ref> [10] </ref>. 2. A sort time ranging over the reals. 3. We need a function symbol time: time (a) denotes the time of the action a. So, we will have axioms like time (start meeting (person; t)) = t. 4. <p> This is any finite set of sentences which mention only the situation term S 0 , or which are situation independent. 5. The domain independent foundational axioms for the situation calculus. 7 4 Natural Actions 4 Our focus in this paper is on natural exogenous actions (Pinto <ref> [10] </ref>), namely those which occur in response to known laws of physics, like a ball bouncing at times determined by Newtonian equations of motion. These laws of physics will be embodied in the action precondition axioms, in the style of Pinto's PhD thesis [10], but in a somewhat more natural form: <p> paper is on natural exogenous actions (Pinto <ref> [10] </ref>), namely those which occur in response to known laws of physics, like a ball bouncing at times determined by Newtonian equations of motion. These laws of physics will be embodied in the action precondition axioms, in the style of Pinto's PhD thesis [10], but in a somewhat more natural form: P oss (bounce (t); s) t start (s) ^ is f alling (s) ^ height (s) + vel (s)[t start (s)] 1=2g [t start (s)] 2 = 0: Here, height (s) and vel (s) are the height and velocity, respectively, of the ball
Reference: [11] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: If possible, we also want a parsimonious representation for these frame axioms (because in their simplest form, there are too many of them). 3 2.4 A Simple Solution to the Frame Problem By appealing to earlier ideas of Haas [1], Schubert [14] and Pednault [9], Reiter <ref> [11] </ref> proposes a simple solution to the frame problem, which we illustrate with an example. Suppose that (1), (2), and (3) are all the effect axioms for the fluent broken, i.e. they describe all the ways that an action can change the truth value of broken. <p> The solution to the frame problem of <ref> [11] </ref> rests on a completeness assumption, which is that the causal axioms (6) and (7) characterize all the conditions under which action a can lead to a fluent F (~x) becoming true (respectively, false) in the successor situation. <p> Therefore, if action a is possible and F (~x)'s truth value changes from false to true as a result of doing a, then fl + F (~x; a; s) must be true and similarly for a change from true to false. Reiter <ref> [11] </ref> shows how to derive a successor state axiom of the following form from the causal axioms (6) and (7) and the completeness assumption.
Reference: [12] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: we need a finite number of function symbols of arity object n ! action, n 0, for actions, and a finite number of function symbols of arity object n ! object, n 0. 3.2 Axiomatizing the Situation Calculus We shall need the following foundational axioms (Lin and Reiter [4], Reiter <ref> [12] </ref>) for the situation calculus: S 0 6= do (a; s); (8) (8P )[P (S 0 ) ^ (8a; s)(P (s) P (do (a; s))) (8s)P (s)]; (10) s &lt; do (a; s 0 ) (P oss (a; s 0 ) ^ s s 0 ): (12) Intuitively, the first two <p> t) of our situation calculus language, we need an axiom: time (A (~x; t)) = t: (13) The start time of a situation is determined by: start (do (a; s)) = time (a): (14) 3 For a detailed discussion of the use of induction in the situation calculus, see (Reiter <ref> [12] </ref>). 6 We require the following global constraint: P oss (a; s) start (s) start (do (a; s)): (15) Axioms (8) - (15) are the foundational axioms for the sequential temporal situation calculus. 3.5 Action Precondition Axioms As in Section 2.2, we shall require action precondition axioms, but we must take
Reference: [13] <author> R. Reiter. </author> <title> Natural actions, concurrency and continuous time in the situation calculus. In Proc. Common Sense 96: </title> <booktitle> 3rd Symposium on Logical Formalizations of Commonsense Reasoning, </booktitle> <address> Stanford, CA, </address> <month> Jan. </month> <pages> 6-8, </pages> <year> 1996. </year>
Reference-contexts: Such problems differ from those "traditionally" considered in the literature on the situation calculus; they involve time, and the actions taken by the scheduler are natural actions (Pinto [10], Reiter <ref> [13] </ref>), which are actions that must occur at their predetermined times, provided no earlier actions occur to prevent them. Specifically, in this paper, we axiomatize the deadline driven scheduler of Liu and Layland [5] in the situation calculus. <p> (do (a; s)) legal (s) ^ P oss (a; s) ^ (8a 0 ):natural (a 0 ) ^ P oss (a 0 ; s) time (a) time (a 0 ): 4 This section is an adaptation, to the temporal sequential situation calculus, of the treatment of natural actions of (Reiter <ref> [13] </ref> for the concurrent situation calculus. 8 Proof: ) Straightforward. ( Use the induction axiom (10), with the definition (17) as induction hypothesis. 2 4.2 Least Natural Time Points The following definition plays a central role in theorizing about natural actions: lntp (s; t) (9a)[natural (a) ^ P oss (a; s)
Reference: [14] <author> L.K. Schubert. </author> <title> Monotonic solution of the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. In H.E. </title> <editor> Kyberg, R.P. Loui, and G.N. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: If possible, we also want a parsimonious representation for these frame axioms (because in their simplest form, there are too many of them). 3 2.4 A Simple Solution to the Frame Problem By appealing to earlier ideas of Haas [1], Schubert <ref> [14] </ref> and Pednault [9], Reiter [11] proposes a simple solution to the frame problem, which we illustrate with an example.
Reference: [15] <author> Zheng Yuhua and Zhou Chaochen. </author> <title> A formal proof of the deadline driven scheduler. </title> <editor> In H.Langmaak, W.-P. de Roever, and J.Vytopil, editors, </editor> <title> Formal Techniques in Real-Time and Fault Tolerant Systems, </title> <booktitle> Lecture Notes in Computer Science 863, </booktitle> <pages> pages 756-775. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 25 </month>
Reference-contexts: This is not the first such axiomatic proof of this result; using the duration calculus a propositional temporal logic - Zheng and Zhou <ref> [15] </ref> have also provided such a proof. The advantage of the situation calculus in such real time settings, apart from its greater generality it is first order is that it provides the foundations for GOLOG, and hence 23 the task specification leads simply, and naturally to a GOLOG implementation.
References-found: 15

