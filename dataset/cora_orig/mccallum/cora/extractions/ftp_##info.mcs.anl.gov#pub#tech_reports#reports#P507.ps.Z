URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P507.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts95.htm
Root-URL: http://www.mcs.anl.gov
Email: bischof@mcs.anl.gov  
Title: ON THE AUTOMATIC DIFFERENTIATION OF COMPUTER PROGRAMS AND AN APPLICATION TO MULTIBODY SYSTEMS  
Author: CHRISTIAN H. BISCHOF 
Address: 9700 S. Cass Avenue, Argonne, IL 60439  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  
Abstract: Automatic differentiation (AD) is a methodology for developing sensitivity-enhanced versions of arbitrary computer programs. In this paper, we provide some background information on AD and address some frequently asked questions. We introduce the ADIFOR and ADIC tools for the automatic differentiation of Fortran 77 and ANSI-C programs, respectively, and give an example of applying ADIFOR in the context of the optimization of multibody systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Dieter Bestle. </author> <title> Analyse und Optimierung von Mehrkorpersystemen. </title> <publisher> Springer, </publisher> <address> Berlin, </address> <note> 8 CHRISTIAN H. BISCHOF 1994. </note>
Reference-contexts: Optimization techniques can then be employed to improve the design of such a vehicle with respect to comfort, ride, and handling. For an overview of this field as well as the methods employed, see <ref> [1] </ref>.
Reference: 2. <author> Dieter Bestle and Peter Eberhard. </author> <title> Analyzing and optimizing multibody systems. </title> <journal> Mechanical Structures and Machinery, </journal> <volume> 20(1) </volume> <pages> 67-92, </pages> <year> 1992. </year>
Reference-contexts: An efficient method for optimizing a multibody system is the adjoint variable method developed by Bestle and Eberhard <ref> [2] </ref>, which requires the derivatives @ M mn @ t , @ M mn , @ M mn , @ y i @ (k m q m ) , and @ p k In [13], Hauermann applied the first version of ADIFOR [3] to several multibody systems and compared it with
Reference: 3. <author> Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hov-land. ADIFOR: </author> <title> Generating derivative codes from Fortran programs. </title> <journal> Scientific Programming, </journal> <volume> 1(1) </volume> <pages> 11-29, </pages> <year> 1992. </year>
Reference-contexts: adjoint variable method developed by Bestle and Eberhard [2], which requires the derivatives @ M mn @ t , @ M mn , @ M mn , @ y i @ (k m q m ) , and @ p k In [13], Hauermann applied the first version of ADIFOR <ref> [3] </ref> to several multibody systems and compared it with symbolic approaches and with approximations of derivatives via divided differences. However, application of ADIFOR 1.0 to the so-called Iltis problem, a benchmark problem modeling an all-terrain vehicle [15], proved to be somewhat laborious.
Reference: 4. <author> Christian Bischof, Alan Carle, Peyvand Khademi, and Andrew Mauer. </author> <title> The AD-IFOR 2.0 system for the automatic differentiation of Fortran 77 programs, 1994. </title> <type> Preprint MCS-P481-1194, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, and CRPC-TR94491, Center for Research on Parallel Computation, Rice University. </institution>
Reference-contexts: These modes are distinguished by how the chain rule is used to propagate derivatives through the computation. We briefly summarize the main points about these two approaches; a more detailed description can be found in <ref> [4] </ref> and the references therein. The forward mode propagates derivatives of intermediate variables with respect to the independent variables and follows the control flow of the original program. <p> Automatic Differentiation Tools We are involved in the development of the ADIFOR (jointly with Rice University) and ADIC tools, which provide automatic differentiation functionality for Fortran 77 and ANSI-C, respectively, The ADIFOR 2.0 system is mature, and reference <ref> [4] </ref> lists 25 references reporting on the use of ADI-FOR in various application domains, on codes of up to 60,000 lines. ADIC, in contrast, is in the prototype phase, but has been successfully applied to codes of up to 10,000 lines. <p> For references to other automatic differentiation tools, see <ref> [4] </ref>. ADIFOR and ADIC employ a hybrid forward/reverse-mode approach to generating derivatives. <p> We also mention that both ADIFOR and ADIC can transparently exploit sparsity in derivative computations by replacing the dense vector loop in Figure 1 with a call to a SparsLinC routine <ref> [4, 5] </ref>, which, as a byproduct of the computation, will automatically compute the sparsity pattern of large sparse Jacobians. None of these AD tools require any knowledge of the application domain. <p> This problem is further discussed in [9]. Question: How do you deal with intrinsics? Answer: Some intrinsics functions, such as abs () and sqrt (), are not differentiable in all points of their domain. At these points, ADIFOR invokes the ADIntrinsics system <ref> [4] </ref> to provide a (user customizable) default value, and prints a warning message. The ADIC prototype uses a similar, although less refined, mechanism. Question: What happens when you differentiate through iterative pro cesses? Answer: It depends.
Reference: 5. <author> Christian Bischof and Andrew Mauer. </author> <title> ADIC A tool for the automatic differentiation of C programs. </title> <type> Preprint MCS-P499-0295, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1995. </year>
Reference-contexts: We also mention that both ADIFOR and ADIC can transparently exploit sparsity in derivative computations by replacing the dense vector loop in Figure 1 with a call to a SparsLinC routine <ref> [4, 5] </ref>, which, as a byproduct of the computation, will automatically compute the sparsity pattern of large sparse Jacobians. None of these AD tools require any knowledge of the application domain.
Reference: 6. <author> Christian Bischof, Greg Whiffen, Christine Shoemaker, Alan Carle, and Aaron Ross. </author> <title> Application of automatic differentiation to groundwater transport models. </title> <editor> In Alexander Peters et al., editors, </editor> <booktitle> Computational Methods in Water Resources X, </booktitle> <pages> pages 173-182. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrehct, </address> <year> 1994. </year>
Reference-contexts: In most cases, however, ADIFOR-generated code outperforms one-sided divided-difference approximations, typically by a factor 1.5 to 3, and by a factor of 7.4 in the best case so far <ref> [6] </ref>. Code expansion is considerable because of the somewhat unusual AUTOMATIC DIFFERENTIATION OF COMPUTER PROGRAMS 7 TABLE 1.
Reference: 7. <author> Francois Bodin, Peter Beckman, Dennis Gannon, Jacob Goutwals, Srinivas Narayana, Suresh Srinivas, and Beata Winnicka. SAGE++: </author> <title> An object-oriented toolkit and class library for building Fortran and C++ restructuring tools. </title> <booktitle> In Proceedings of the Second Annual Object-Oriented Numerics Conference. IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: + r$2bar * g$x (g$i$,2) + r$4bar * g$x (g$i$,4) enddo 9 &gt; &gt; &gt; &gt; &gt; ; Forward Mode: Assembling ry from @ y and rx (i), y = r$3 * x (5) Computing function value considerable compiler infrastructure, and ADIFOR and ADIC employ the ParaScope [8] and Sage++ <ref> [7] </ref> compiler environments developed at Rice and Indiana University, respectively. For references to other automatic differentiation tools, see [4]. ADIFOR and ADIC employ a hybrid forward/reverse-mode approach to generating derivatives.
Reference: 8. <author> D. Callahan, K. Cooper, R. T. Hood, K. Kennedy, and L. M. Torczon. </author> <title> ParaScope: A parallel programming environment. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 2(4) </volume> <pages> 84-99, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: = 1, g$p$ + r$2bar * g$x (g$i$,2) + r$4bar * g$x (g$i$,4) enddo 9 &gt; &gt; &gt; &gt; &gt; ; Forward Mode: Assembling ry from @ y and rx (i), y = r$3 * x (5) Computing function value considerable compiler infrastructure, and ADIFOR and ADIC employ the ParaScope <ref> [8] </ref> and Sage++ [7] compiler environments developed at Rice and Indiana University, respectively. For references to other automatic differentiation tools, see [4]. ADIFOR and ADIC employ a hybrid forward/reverse-mode approach to generating derivatives.
Reference: 9. <author> Herbert Fischer. </author> <title> Special problems in automatic differentiation. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 43 - 50. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, Penn., </address> <year> 1991. </year>
Reference-contexts: AD computes the derivative defined by the sequence of assignment statements executed in the course of a function evaluation. Hence, for a branch (if-statement), which potentially introduces a nondifferentiability, AD will compute a one-sided directional deriva tive. This problem is further discussed in <ref> [9] </ref>. Question: How do you deal with intrinsics? Answer: Some intrinsics functions, such as abs () and sqrt (), are not differentiable in all points of their domain. At these points, ADIFOR invokes the ADIntrinsics system [4] to provide a (user customizable) default value, and prints a warning message.
Reference: 10. <author> Andreas Griewank. </author> <title> On automatic differentiation. </title> <booktitle> In Mathematical Programming: Recent Developments and Applications, </booktitle> <pages> pages 83-108. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: AD techniques rely on the fact that every function, no matter how complicated, is executed on a computer as a (potentially very long) sequence of elementary operations such as additions, multiplications, and elementary functions such as sin and cos (see, for example, <ref> [10, 16] </ref>. By applying the chain rule of derivative calculus over and over again to the composition of those elementary operations, one can compute, in a completely mechanical fashion, derivatives of f that are correct up to machine precision [12].
Reference: 11. <author> Andreas Griewank, Christian Bischof, George Corliss, Alan Carle, and Karen Williamson. </author> <title> Derivative convergence of iterative equation solvers. </title> <journal> Optimization Methods and Software, </journal> <volume> 2 </volume> <pages> 321-355, </pages> <year> 1993. </year>
Reference-contexts: However, derivative convergence may lag, or derivatives may diverge. For some commonly used approaches for solving nonlinear systems of equations, this issue is discussed in <ref> [11] </ref>. This problem clearly requires more re 6 CHRISTIAN H. BISCHOF search, but the emergence of robust AD tools has made it possible to tackle this problem for sophisticated numerical methods. 5.
Reference: 12. <author> Andreas Griewank and Shawn Reese. </author> <title> On the calculation of Jacobian matrices by the Markowitz rule. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 126-135. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: By applying the chain rule of derivative calculus over and over again to the composition of those elementary operations, one can compute, in a completely mechanical fashion, derivatives of f that are correct up to machine precision <ref> [12] </ref>. In the next section, we give a brief overview of automatic differentiation. Section 3 introduces the ADIFOR and ADIC AD tools for Fortran 77 and ANSI-C, respectively, and Section 4 answers some commonly asked questions. <p> The reverse mode is particularly attractive for the computation of long gradients, as its floating-point complexity does not depend on the number of independent variables. In either case, automatic differentiation produces code that computes derivatives accurate to machine precision <ref> [12] </ref>. The techniques of automatic differentiation are directly applicable to computer programs of arbitrary length containing branches, loops, and subroutines. 3.
Reference: 13. <author> Uli Hauermann. </author> <title> Automatische Differentiation zur Rekursiven Bestimmung von Partiellen Ableitungen. </title> <institution> STUD-102, Institut B fur Mechanik, Universitat Stuttgart, </institution> <year> 1993. </year>
Reference-contexts: method for optimizing a multibody system is the adjoint variable method developed by Bestle and Eberhard [2], which requires the derivatives @ M mn @ t , @ M mn , @ M mn , @ y i @ (k m q m ) , and @ p k In <ref> [13] </ref>, Hauermann applied the first version of ADIFOR [3] to several multibody systems and compared it with symbolic approaches and with approximations of derivatives via divided differences. However, application of ADIFOR 1.0 to the so-called Iltis problem, a benchmark problem modeling an all-terrain vehicle [15], proved to be somewhat laborious.
Reference: 14. <author> E. Kreuzer and G. Leister. </author> <title> Programmsystem NEWEUL'90. </title> <type> Technical Report An-leitung AN-24, </type> <institution> Institut B fur Mechanik, Universitat Stuttgart, </institution> <year> 1991. </year>
Reference-contexts: However, application of ADIFOR 1.0 to the so-called Iltis problem, a benchmark problem modeling an all-terrain vehicle [15], proved to be somewhat laborious. ADIFOR 1.0 was unable to process the subroutine of several thousand lines describing the equations of motion that had been generated with the NEWEUL <ref> [14] </ref> package. The problem had to be split by hand, a somewhat laborious and error-prone process. With the new ADIFOR 2.0 system, however, one can now process the code as is. Differentiating with respect to 20 parameters, one obtains the results shown in Table 1.
Reference: 15. <author> G. Leister and W. Schiehlen. </author> <title> Benchmark-beispiele des DFG-schwerpunktprogramms dynamic von mehrkorpersystemen. </title> <type> Technical Report Zwischenbericht ZB-64, Band 2, </type> <institution> Institut B fur Mechanik, Universitat Stuttgart, </institution> <year> 1991. </year>
Reference-contexts: However, application of ADIFOR 1.0 to the so-called Iltis problem, a benchmark problem modeling an all-terrain vehicle <ref> [15] </ref>, proved to be somewhat laborious. ADIFOR 1.0 was unable to process the subroutine of several thousand lines describing the equations of motion that had been generated with the NEWEUL [14] package. The problem had to be split by hand, a somewhat laborious and error-prone process.
Reference: 16. <author> Louis B. Rall. </author> <title> Automatic Differentiation: Techniques and Applications, </title> <booktitle> volume 120 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: AD techniques rely on the fact that every function, no matter how complicated, is executed on a computer as a (potentially very long) sequence of elementary operations such as additions, multiplications, and elementary functions such as sin and cos (see, for example, <ref> [10, 16] </ref>. By applying the chain rule of derivative calculus over and over again to the composition of those elementary operations, one can compute, in a completely mechanical fashion, derivatives of f that are correct up to machine precision [12].
References-found: 16

