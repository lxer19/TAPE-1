URL: http://www.cs.concordia.ca/~faculty/manas/papers/rtss96.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/manas/research/sel-pubs.html
Root-URL: http://www.cs.concordia.ca
Email: (sshong@redwood.snu.ac.kr)  
Title: Visual Assessment of a Real-Time System Design: A Case Study on a CNC Controller  
Author: Namyun Kim Minsoo Ryu Seongsoo Hong Manas Saksena Chong-Ho Choi and Heonshik Shin 
Address: 151-742, Korea.  PQ H3G 1M8, Canada.  
Affiliation: Dept. of Computer Engineering, Seoul National University, Seoul 151-742, Korea. School of Electrical Engineering and ERC-ACI, Seoul National University, Seoul  Dept. of Computer Science, Concordia University, Montreal,  
Date: December 1996  Abstract  
Note: Proceedings, IEEE Real-Time Systems Symposium,  
Abstract: In this paper we describe our experiments on a real-time system design, focusing on design alternatives such as scheduling jitter, sensor-to-output latency, in-tertask communication schemes and the system utilization. The prime objective of these experiments was to evaluate a real-time design produced using the period calibration method [2] and thus identify the limitations of the method. We chose a computerized numerical control (CNC) machine as our target real-time system and built a realistic controller and a plant simulator. Our results were extracted from a controlled series of more than hundred test controllers obtained by varying four test variables. This study unveils many interesting facts: (1) average sensor-to-output latency is one of the most dominating factors in determining control quality; (2) the effect of scheduling jitter appears only when the average sensor-to-output latency is sufficiently small; and (3) loop processing periods are another dominating factor of performance. Based on these results, we propose a new communication scheme and a new objective function for the period calibration method. fl The work reported in this paper was supported in part by Engineering Research Center for Advanced Control and Instrumentation (ERC-ACI) under Grant 96K3-0707-02-06-1, by KOSEF under Grant 96-2037, and by NSERC Operating Grant OGP0170345. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Baker and A. Shaw. </author> <title> The cyclic executive model and Ada. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 1(1) </volume> <pages> 7-25, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: The task execution times were determined through a timing measurement board having an independent clock source. Cyclic Executive Scheduling. An implication of harmonicity requirements on periods is that it makes cyclic executive scheduling <ref> [1] </ref> very attractive, thus incurring low run-time scheduling overheads. Cyclic executive scheduling divides the infinite timeline into uniform intervals called major cycles, and then sub-divides a major cycle into several minor cycles.
Reference: [2] <author> R. Gerber, S. Hong, and M. Saksena. </author> <title> Guaranteeing real-time requirements with resource-based calibration of periodic processes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(7) </volume> <pages> 579-592, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: As a result, it becomes extremely difficult, if not impossible, to reach the "right" system design, as the controller structure moves towards higher complexity. In recent work <ref> [2] </ref>, we have proposed a design Proceedings, IEEE Real-Time Systems Symposium, December 1996 methodology that partially addresses this problem by postponing assignment of task periods and deadlines. Instead, the design of a system uses timing constraints specification on "end-to-end" computations rather than individual tasks. <p> In addition, there is a disturbance estimation and monitoring subsystem, which issues a signal to the plant when the machine enters into either a large external torque or an over-cutting state. We represent a controller design using a graph model as described in <ref> [2] </ref>. In this model, the tasks and the data items passed between tasks are represented as vertices, while the edges correspond to read/write operations. Figure 3 (A) shows the task graph derived from the schematic diagram of Figure 2. <p> Subsequently, we give a brief overview of the period calibration method and show how the task attributes are derived using it. We then present a simple cyclic executive scheduling scheme which was used to schedule the controller tasks on our workbench. 3.1 End-to-End Timing Constraints Following <ref> [2] </ref>, we first proceed with the derivation of end-to-end timing constraints for our controller design. This step was done with the help of MATLAB [6] tools. <p> As shown in <ref> [2] </ref>, the synchronization constraint is easily guaranteed by transforming the task graph such that the synchronized inputs are read to gether by a common sampling server task. <p> Under such circumstances, task executions may get out of phase resulting in large latencies in communication. In order to achieve low latency communication, while still allowing tasks to run at different rates, we introduced a harmonicity constraint between the periods of any producer/consumer pair in the task graph <ref> [2] </ref>. The Proceedings, IEEE Real-Time Systems Symposium, December 1996 Sync. <p> In order to reduce the amount of computation needed for the optimization problem, we changed it into a decision problem in that users provide a cutoff utilization and our algorithm tries to quickly find a first feasible solution whose utilization is no greater than the cutoff value <ref> [2] </ref>. For the CNC controller, we chose a cut-off Proceedings, IEEE Real-Time Systems Symposium, December 1996 Task Exec. <p> The experimental results are given below. (1) Output Jitter versus Errors. We analyzed the experimental results to derive a relationship between output jitter and errors. Contrary to our thoughts we Proceedings, IEEE Real-Time Systems Symposium, December 1996 originally conceived in <ref> [2] </ref>, output jitter has virtually no impact on the errors. (See Figure 9.) This is mainly because the impact of the average sensor-to-output latency prevails over output jitter in producing errors. <p> However, this is not generalizable to all control systems, and it may be large in some systems. Thus, it will be necessary to carefully assess the impact of scheduling jitter on the controller's performance. Note that jitter control requires short deadlines, and sometimes large offsets, as discussed in <ref> [2] </ref>. This may well lead to reduced schedulability. Where it is important to minimize output jitter for control quality, we can also tighten up the task period. This scheme also has its down side, i.e., increased utilization.
Reference: [3] <author> C. Liu and J. Layland. </author> <title> Scheduling algorithm for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: After major and minor cycles are determined, a cyclic schedule is created in such a way that all task deadlines are satisfied. We scheduled our task set within the major cycle using the earliest deadline first strategy <ref> [3] </ref>. It leads to an optimal task schedule, since our tasks were made mutually independent. At run-time, the cyclic executive implementation consists of three major components, namely, (1) a master dispatcher, (2) minor cycle queues, and (3) an interval timer.
Reference: [4] <author> I. Na. </author> <title> Contour error analysis and gain tuning of position feedback controller for a CNC machining center. </title> <type> Master's thesis, </type> <institution> Department of Control and Instrumentation Engineering, Seoul National University, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: As its name implies, it is equipped with a computer-based digital control system, and offers consistent, accurate, and flexible production of machine workpieces. Nowadays CNC machines are found almost everywhere from a small rural job shop to a large manufacturing cell <ref> [4] </ref>. The most basic function of a CNC machine is motion control. A CNC machine controls several directions of motion, called axes. The CNC motion control subsystem should be able to position the cutter precisely and automatically along the reference trajectory of the machined workpiece. <p> As plants need multiple control variables and have a high degree of performance and robustness requirements, associated control algorithms tend to be complex. Moreover, a CNC controller possesses very stringent hard real-time requirements: the sampling frequencies are very high and missed deadlines may cause over-cutting of a workpiece <ref> [4] </ref>. CNC machines have been traditionally implemented with a dedicated DSP (digital signal processing) board for the motion control subsystem. The controller is designed in a very simple fashion; a single scanning task is created which does all input readings, control law execution, and output updates in one scan. <p> The block diagram of the control system is shown in Figure 2. Our implementation of the controller and the plant was based on the mathematical models developed in <ref> [4] </ref>. As shown in the figure, there are two inputs into the controller for each of the axes. These correspond to the elliptic reference position, and the actual cutter location which is sampled from the motors. The motion control is effected by a controller for each of the axes.
Reference: [5] <author> J. Ready. VRTX: </author> <title> A real-time operating system for embedded microprocessor applications. </title> <journal> IEEE Micro, </journal> <volume> 6(4) </volume> <pages> 8-17, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: One PC is used to model the plant behavior, while the other PC is used to run the controller on top of Mircotech's VRTX real-time operating system <ref> [5] </ref>. To conduct our experiments, we developed the software for the controller algorithms, as well as the simulation programs modeling the CNC plant. The end-to-end timing constraints were derived using the mathematical simulation package MATLAB [6]. <p> The plant simulator was implemented as an infinite loop and models the ser-vopacks and servo motors. The controller software runs on top of the VRTX real-time operating system <ref> [5] </ref>, and was developed using VRTX cross-development tools. We implemented two I/O boards, one for each PC, for communication between the plant and the controller.
Reference: [6] <author> The Math Works, Inc. </author> <title> MATLAB User's Guide. The Math Works, </title> <publisher> Inc., </publisher> <month> August </month> <year> 1992. </year>
Reference-contexts: To conduct our experiments, we developed the software for the controller algorithms, as well as the simulation programs modeling the CNC plant. The end-to-end timing constraints were derived using the mathematical simulation package MATLAB <ref> [6] </ref>. We used our period-calibration tool to assign periods and deadlines to tasks, scheduled them using earliest deadline scheduling, and finally created a cyclic executive structure for run-time dispatching. In our experiments, we wanted to study the impact of design and scheduling artifacts on the controller's performance. <p> We then present a simple cyclic executive scheduling scheme which was used to schedule the controller tasks on our workbench. 3.1 End-to-End Timing Constraints Following [2], we first proceed with the derivation of end-to-end timing constraints for our controller design. This step was done with the help of MATLAB <ref> [6] </ref> tools. We used three types of constraints as follows: (1) Synchronization constraint: When sampled data from multiple sensors are used to compute a controller output, a synchronization constraint restricts the time skew between those samples.
References-found: 6

