URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-031.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [ACL87] <author> Rakesh Agrawal, Michael J. Carey, and Miron Livny. </author> <title> Concurrency control performance modeling: Alternatives and implications. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 609-654, </pages> <year> 1987. </year>
Reference-contexts: The performances of these policies examined in [HCL90b, HLC91, HSRT91, LS93, LLH95]. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions <ref> [AD85, ACL87, CS84] </ref>. <p> Agrawal and DeWitt [AD85] showed that if the buffer space available to the transaction is large enough to hold all the pages updated by the transaction until the transaction is validated, the cost of making local copies global is not significant. Actually, most comparisons in <ref> [ACL87, CS84, HCL90b, HSRT91, LS93, LLH95] </ref> do not consider the effects of in-place or deferred update. <p> In this paper we did not compare the performance of AVCC to OCC variants directly because the performance of 2PL-HP and OCC changes with data contention for firm deadline transactions [HSRT91] and 2PL-HP is better than OCC for non real-time or soft deadline transactions <ref> [ACL87, HCL90a] </ref>.
Reference: [AD85] <author> Rakesh Agrawal and D. DeWitt. </author> <title> Integrated concurrency control and recovery mechanism: Design and performance evaluation. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(4) </volume> <pages> 529-564, </pages> <year> 1985. </year>
Reference-contexts: The performances of these policies examined in [HCL90b, HLC91, HSRT91, LS93, LLH95]. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions <ref> [AD85, ACL87, CS84] </ref>. <p> Agrawal and DeWitt <ref> [AD85] </ref> showed that if the buffer space available to the transaction is large enough to hold all the pages updated by the transaction until the transaction is validated, the cost of making local copies global is not significant.
Reference: [AGM88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions: a performance evaluation. </title> <booktitle> In Proceedings of the 14th VLDB, </booktitle> <pages> pages 1-12. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction Database applications that require time constrained (real-time) response to transactions are becoming quite common. Network Services Databases [SBSR93, Red86] and Stock market applications <ref> [AGM88, Voe87] </ref> are typical applications of real-time database systems (RTDBS). Real-time transactions are the basic unit of work for RTDBS and transactions with deadlines have been categorized into hard, soft, and firm real-time transactions. <p> In contrast to the above two, firm transactions are those which should not be considered once their deadlines are not met, as there is no value to completing the transactions after their deadlines. Typically, applications that have a definite window (e.g., stock market applications <ref> [Voe87, AGM88] </ref>) within which transactions need to be executed come under this category. There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. <p> The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88]. Among them several approaches <ref> [AGM88, HCL90b, HSRT91, LS93, LLH95] </ref> are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. However, 2PL and 2PL-HP yield better performance than OCC or OCC variants for non real-time and soft deadline transactions. <p> Based on our comparisons of different conflict resolution policies we devise a concurrency control algorithm, Alternative Version Concurrency Control (AVCC), which combines the features of different conflict resolution policies. 1.1 Related Work Two phase locking with High Priority (2PL-HP) <ref> [AGM88] </ref> uses blocking and immediate restarts to maintain the consistency of databases. When a lower priority transaction (LPT) tries to access the data that is already accessed by a higher priority transaction (HPT) in a conflicting mode, we block the LPT until the HPT releases the corresponding data. <p> In real applications such as Network Service Databases [SBSR93, Red86] or Stock market applications <ref> [AGM88, Voe87] </ref> incoming transactions are usually mixed load of non real-time, soft and firm transactions. 2PL-HP and AVCC can easily deal with those situations by assigning priorities so that all priorities of soft deadline transactions are lower than those of firm 16 deadline transactions and priorities of non real-time transactions are
Reference: [AGM89] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions with disk resident data. </title> <booktitle> In Proceedings of the 15th VLDB, </booktitle> <pages> pages 385-396. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. <p> The superiority of locking over OCC comes from its early stage blocking validation policy which does not waste valuable system resources. * For soft RTDBS, 2PL-HP adopted priority based High Priority (HP) conflict resolution method in locking algorithm and showed better performance than 2PL-Wait <ref> [AGM89] </ref>. 2PL-HP has been compared to OCC variants and 2PL-HP showed better performance than OCC for soft deadline systems with finite resources [HCL90a]. * For firm RTDBS, OCC always outperforms 2PL-HP in the simulation study of [HCL90a, LS93] while OCC performs better than 2PL-HP only when data contention is low in
Reference: [BMH89] <author> A. Buchmann, D.R. McCarthy, and M. Hsu. </author> <title> Time-critical database scheduling: A framework for integrating real-time scheduling and concurrency control. </title> <booktitle> In Proceedings of the Fifth Conference on Data Engineering, </booktitle> <pages> pages 470-480, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions.
Reference: [CS84] <author> Michael J. Carey and Michael R. Stonebraker. </author> <title> The performance of concurrency control algorithms for database management systems. </title> <booktitle> In Proceedings of the 10th VLDB, </booktitle> <pages> pages 107-118. </pages> <publisher> ACM, </publisher> <year> 1984. </year>
Reference-contexts: The performances of these policies examined in [HCL90b, HLC91, HSRT91, LS93, LLH95]. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions <ref> [AD85, ACL87, CS84] </ref>. <p> Agrawal and DeWitt [AD85] showed that if the buffer space available to the transaction is large enough to hold all the pages updated by the transaction until the transaction is validated, the cost of making local copies global is not significant. Actually, most comparisons in <ref> [ACL87, CS84, HCL90b, HSRT91, LS93, LLH95] </ref> do not consider the effects of in-place or deferred update.
Reference: [Fis92] <author> Paul A. Fishwick. </author> <title> SIMPACK:C-based Simulation Tool Package Version 2. </title> <institution> University of Florida, </institution> <year> 1992. </year>
Reference-contexts: Therefore no wait cycle can exist and thus our approach doesn't have deadlock. 2 4 Performance Evaluation In order to compare the performance of AVCC, simulations of a real-time transaction scheduler were implemented (using SIMPACK simulation package <ref> [Fis92] </ref>). In our simulations we are assuming multiple CPUs, which has a common queue for the CPUs and the service discipline is priority Preemptive-Resume and multiple disks environment with each of the disks with its own queue and the service discipline is priority Head-Of-Line (Non-preemptive).
Reference: [Gra92] <author> Marc H. Graham. </author> <title> Issues in real-time data management. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 4 </volume> <pages> 185-202, </pages> <year> 1992. </year>
Reference-contexts: Typically, applications that have a definite window (e.g., stock market applications [Voe87, AGM88]) within which transactions need to be executed come under this category. There are several research issues <ref> [Gra92] </ref> on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions.
Reference: [HCL90a] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Livny. </author> <title> Dynamic real-time optimistic concurrency control. </title> <booktitle> In Proceedings of Real-Time System Symposium, </booktitle> <pages> pages 94-103. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: not waste valuable system resources. * For soft RTDBS, 2PL-HP adopted priority based High Priority (HP) conflict resolution method in locking algorithm and showed better performance than 2PL-Wait [AGM89]. 2PL-HP has been compared to OCC variants and 2PL-HP showed better performance than OCC for soft deadline systems with finite resources <ref> [HCL90a] </ref>. * For firm RTDBS, OCC always outperforms 2PL-HP in the simulation study of [HCL90a, LS93] while OCC performs better than 2PL-HP only when data contention is low in the different study [HSRT91]. A major advantage of the locking algorithm over OCC is its update policy. <p> Priority (HP) conflict resolution method in locking algorithm and showed better performance than 2PL-Wait [AGM89]. 2PL-HP has been compared to OCC variants and 2PL-HP showed better performance than OCC for soft deadline systems with finite resources [HCL90a]. * For firm RTDBS, OCC always outperforms 2PL-HP in the simulation study of <ref> [HCL90a, LS93] </ref> while OCC performs better than 2PL-HP only when data contention is low in the different study [HSRT91]. A major advantage of the locking algorithm over OCC is its update policy. <p> These cases are depicted in Figures 1, 2, 3, and 4. For each case we evaluate 3 different restart methods, namely, OCC style deferred restart (DR-OCC), immediate restart (IR), and stop/resume deferred restart (DR-SR). DR-OCC This policy is exactly the one used by OCC-commit <ref> [HCL90a] </ref>. The validation and restart happen at commit time. IR This policy is exactly the one used by 2PL-HP. The validation and restart are done when data conflict occurs. DR-SR This policy uses early stage validation but commit time restart. <p> In this paper we did not compare the performance of AVCC to OCC variants directly because the performance of 2PL-HP and OCC changes with data contention for firm deadline transactions [HSRT91] and 2PL-HP is better than OCC for non real-time or soft deadline transactions <ref> [ACL87, HCL90a] </ref>.
Reference: [HCL90b] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Livny. </author> <title> On being optimistic about real-time constraints. </title> <booktitle> In Symposium of Principles of Database systems, </booktitle> <pages> pages 331-343. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. <p> The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88]. Among them several approaches <ref> [AGM88, HCL90b, HSRT91, LS93, LLH95] </ref> are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. However, 2PL and 2PL-HP yield better performance than OCC or OCC variants for non real-time and soft deadline transactions. <p> The performances of these policies examined in <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions [AD85, ACL87, CS84]. <p> Agrawal and DeWitt [AD85] showed that if the buffer space available to the transaction is large enough to hold all the pages updated by the transaction until the transaction is validated, the cost of making local copies global is not significant. Actually, most comparisons in <ref> [ACL87, CS84, HCL90b, HSRT91, LS93, LLH95] </ref> do not consider the effects of in-place or deferred update. <p> Section 4 shows performance evaluation through simulations on multiple CPUs and disks environment and section 5 concludes our paper. 2 Motivation for our approach People have showed some possibilities of OCC as a concurrency control mechanism for firm RTDBS <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>.
Reference: [HJC93] <author> D. Hong, T. Johnson, and S. Chakravarthy. </author> <title> Real-time transaction scheduling: A Cost-Conscious Approach. </title> <booktitle> In Proceedings of the 1993 ACM SIGMOD Int'l Conference on Management of Data, </booktitle> <pages> pages 197-206. </pages> <publisher> ACM, </publisher> <year> 1993. </year> <month> 17 </month>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities <ref> [HJC93, HSRT91, LL73, SZ88] </ref> and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88].
Reference: [HLC91] <author> Jayant R. Haritsa, Miron Livny, and Michael J. Carey. </author> <title> Earliest deadline scheduling for real-time database systems. </title> <booktitle> In Proceedings of Real-Time System Symposium, </booktitle> <pages> pages 232-242. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: The performances of these policies examined in <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions [AD85, ACL87, CS84]. <p> Section 4 shows performance evaluation through simulations on multiple CPUs and disks environment and section 5 concludes our paper. 2 Motivation for our approach People have showed some possibilities of OCC as a concurrency control mechanism for firm RTDBS <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>.
Reference: [HSRT91] <author> Jiandong Huang, John A. Stankovic, Krithi Ramamritham, and Don Towsley. </author> <title> Experimental evaluation of real-time optimistic concurrency control schemes. </title> <booktitle> In Proceedings of the 17th VLDB, </booktitle> <pages> pages 35-46. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities <ref> [HJC93, HSRT91, LL73, SZ88] </ref> and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88]. <p> The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88]. Among them several approaches <ref> [AGM88, HCL90b, HSRT91, LS93, LLH95] </ref> are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. However, 2PL and 2PL-HP yield better performance than OCC or OCC variants for non real-time and soft deadline transactions. <p> The performances of these policies examined in <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions [AD85, ACL87, CS84]. <p> compared to OCC variants and 2PL-HP showed better performance than OCC for soft deadline systems with finite resources [HCL90a]. * For firm RTDBS, OCC always outperforms 2PL-HP in the simulation study of [HCL90a, LS93] while OCC performs better than 2PL-HP only when data contention is low in the different study <ref> [HSRT91] </ref>. A major advantage of the locking algorithm over OCC is its update policy. <p> Agrawal and DeWitt [AD85] showed that if the buffer space available to the transaction is large enough to hold all the pages updated by the transaction until the transaction is validated, the cost of making local copies global is not significant. Actually, most comparisons in <ref> [ACL87, CS84, HCL90b, HSRT91, LS93, LLH95] </ref> do not consider the effects of in-place or deferred update. <p> Section 4 shows performance evaluation through simulations on multiple CPUs and disks environment and section 5 concludes our paper. 2 Motivation for our approach People have showed some possibilities of OCC as a concurrency control mechanism for firm RTDBS <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>. <p> If we consider the normal load, we can conclude that AVCC is very useful. In this paper we did not compare the performance of AVCC to OCC variants directly because the performance of 2PL-HP and OCC changes with data contention for firm deadline transactions <ref> [HSRT91] </ref> and 2PL-HP is better than OCC for non real-time or soft deadline transactions [ACL87, HCL90a].
Reference: [KM92] <author> Tei-Wei Kuo and Aloysius K. Mok. </author> <title> Application semantics and concurrency control of real-time data-intensive applications. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 35-45. </pages> <publisher> IEEE, </publisher> <year> 1992. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions.
Reference: [KM93] <author> Tei-Wei Kuo and Aloysius K. Mok. </author> <title> SSP: a semantics-based protocol for real-time data access. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 76-86. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions.
Reference: [KS91] <author> Woosaeng Kim and Jaideep Srivastava. </author> <title> Enhancing real-time DBMS performance with multiversion data and priority based disk scheduling. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 222-231. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions.
Reference: [LL73] <author> C.L. Liu and J.W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of ACM, </journal> <volume> 20 </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities <ref> [HJC93, HSRT91, LL73, SZ88] </ref> and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88].
Reference: [LLH95] <author> Kwokwa Lam, Kamyiu Lam, and Sheunglun Hung. </author> <title> An efficient real-time optimistic concurrency control protocol. </title> <booktitle> In Proceedings of ACM Workshop on Active and Real-Time database systems, </booktitle> <pages> pages 100-110. </pages> <publisher> ACM, </publisher> <year> 1995. </year>
Reference-contexts: The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88]. Among them several approaches <ref> [AGM88, HCL90b, HSRT91, LS93, LLH95] </ref> are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. However, 2PL and 2PL-HP yield better performance than OCC or OCC variants for non real-time and soft deadline transactions. <p> The performances of these policies examined in <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions [AD85, ACL87, CS84]. <p> Agrawal and DeWitt [AD85] showed that if the buffer space available to the transaction is large enough to hold all the pages updated by the transaction until the transaction is validated, the cost of making local copies global is not significant. Actually, most comparisons in <ref> [ACL87, CS84, HCL90b, HSRT91, LS93, LLH95] </ref> do not consider the effects of in-place or deferred update. <p> Section 4 shows performance evaluation through simulations on multiple CPUs and disks environment and section 5 concludes our paper. 2 Motivation for our approach People have showed some possibilities of OCC as a concurrency control mechanism for firm RTDBS <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>.
Reference: [LS90] <author> Yi Lin and Sang H. Son. </author> <title> Concurrency control in real-time databases by dynamic adjustment of serialization order. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 104-112. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions.
Reference: [LS93] <author> Juhnyoung Lee and Sang H. Son. </author> <title> Using dynamic adjustment of serialization order for real-time database systems. </title> <booktitle> In Proceedings of Real-Time Systems Symposium, </booktitle> <pages> pages 66-75. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. <p> The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88]. Among them several approaches <ref> [AGM88, HCL90b, HSRT91, LS93, LLH95] </ref> are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions. However, 2PL and 2PL-HP yield better performance than OCC or OCC variants for non real-time and soft deadline transactions. <p> The performances of these policies examined in <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>. Performance comparisons between locking and OCC have been made for conventional and real-time database systems and are summarized below: * Under most operating circumstances, locking algorithms outperform optimistic algorithms for non real-time transactions [AD85, ACL87, CS84]. <p> Priority (HP) conflict resolution method in locking algorithm and showed better performance than 2PL-Wait [AGM89]. 2PL-HP has been compared to OCC variants and 2PL-HP showed better performance than OCC for soft deadline systems with finite resources [HCL90a]. * For firm RTDBS, OCC always outperforms 2PL-HP in the simulation study of <ref> [HCL90a, LS93] </ref> while OCC performs better than 2PL-HP only when data contention is low in the different study [HSRT91]. A major advantage of the locking algorithm over OCC is its update policy. <p> Agrawal and DeWitt [AD85] showed that if the buffer space available to the transaction is large enough to hold all the pages updated by the transaction until the transaction is validated, the cost of making local copies global is not significant. Actually, most comparisons in <ref> [ACL87, CS84, HCL90b, HSRT91, LS93, LLH95] </ref> do not consider the effects of in-place or deferred update. <p> Section 4 shows performance evaluation through simulations on multiple CPUs and disks environment and section 5 concludes our paper. 2 Motivation for our approach People have showed some possibilities of OCC as a concurrency control mechanism for firm RTDBS <ref> [HCL90b, HLC91, HSRT91, LS93, LLH95] </ref>.
Reference: [Red86] <author> N. Redding. </author> <title> Network Services Databases. </title> <booktitle> In IEEE Global Telecommunications Conference, </booktitle> <volume> volume Vol. 3, </volume> <pages> pages 1336-1340. </pages> <publisher> IEEE, </publisher> <year> 1986. </year>
Reference-contexts: 1 Introduction Database applications that require time constrained (real-time) response to transactions are becoming quite common. Network Services Databases <ref> [SBSR93, Red86] </ref> and Stock market applications [AGM88, Voe87] are typical applications of real-time database systems (RTDBS). Real-time transactions are the basic unit of work for RTDBS and transactions with deadlines have been categorized into hard, soft, and firm real-time transactions. <p> In real applications such as Network Service Databases <ref> [SBSR93, Red86] </ref> or Stock market applications [AGM88, Voe87] incoming transactions are usually mixed load of non real-time, soft and firm transactions. 2PL-HP and AVCC can easily deal with those situations by assigning priorities so that all priorities of soft deadline transactions are lower than those of firm 16 deadline transactions and
Reference: [SBSR93] <author> R.M. Sivasankaran, B.Purimetla, J.A. Stankovic, and K. Ramamritham. </author> <title> Network services database a Distributed Active Real-Time Database (DARTDB) application. </title> <booktitle> In Proceedings of IEEE Workshop on Real-Time Applications, </booktitle> <pages> pages 184-187. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Database applications that require time constrained (real-time) response to transactions are becoming quite common. Network Services Databases <ref> [SBSR93, Red86] </ref> and Stock market applications [AGM88, Voe87] are typical applications of real-time database systems (RTDBS). Real-time transactions are the basic unit of work for RTDBS and transactions with deadlines have been categorized into hard, soft, and firm real-time transactions. <p> In real applications such as Network Service Databases <ref> [SBSR93, Red86] </ref> or Stock market applications [AGM88, Voe87] incoming transactions are usually mixed load of non real-time, soft and firm transactions. 2PL-HP and AVCC can easily deal with those situations by assigning priorities so that all priorities of soft deadline transactions are lower than those of firm 16 deadline transactions and
Reference: [Sha88] <author> Lui Sha. </author> <title> Concurrency control for distributed real-time databases. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 82-98, </pages> <year> 1988. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities [HJC93, HSRT91, LL73, SZ88] and resolving access conflicts among transactions based on 1 priorities <ref> [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88] </ref>. Among them several approaches [AGM88, HCL90b, HSRT91, LS93, LLH95] are specifically studied for firm RT-DBS and several OCC variants have been proposed, and showed the problems of 2PL-HP for firm deadline transactions.
Reference: [SZ88] <author> John A. Stankovic and Wei Zhao. </author> <title> On real-time transactions. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. The scheduler of a RTDBS is responsible for assigning priorities <ref> [HJC93, HSRT91, LL73, SZ88] </ref> and resolving access conflicts among transactions based on 1 priorities [AGM89, BMH89, HCL90b, KS91, KM92, KM93, LS93, LS90, Sha88].
Reference: [Voe87] <author> John Voelcker. </author> <title> How computers helped stampede the stock market. </title> <journal> IEEE Spectrum, </journal> <volume> 24 </volume> <pages> 30-33, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Database applications that require time constrained (real-time) response to transactions are becoming quite common. Network Services Databases [SBSR93, Red86] and Stock market applications <ref> [AGM88, Voe87] </ref> are typical applications of real-time database systems (RTDBS). Real-time transactions are the basic unit of work for RTDBS and transactions with deadlines have been categorized into hard, soft, and firm real-time transactions. <p> In contrast to the above two, firm transactions are those which should not be considered once their deadlines are not met, as there is no value to completing the transactions after their deadlines. Typically, applications that have a definite window (e.g., stock market applications <ref> [Voe87, AGM88] </ref>) within which transactions need to be executed come under this category. There are several research issues [Gra92] on RTDBS of which the most active is developing transaction scheduling algorithms for soft and firm real-time transactions. <p> In real applications such as Network Service Databases [SBSR93, Red86] or Stock market applications <ref> [AGM88, Voe87] </ref> incoming transactions are usually mixed load of non real-time, soft and firm transactions. 2PL-HP and AVCC can easily deal with those situations by assigning priorities so that all priorities of soft deadline transactions are lower than those of firm 16 deadline transactions and priorities of non real-time transactions are
References-found: 25

