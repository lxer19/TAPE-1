URL: ftp://ftp.csd.uu.se/pub/papers/reports/0100.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Title: a denotational formalism, that is, a collection of expressions each of which denotes some entity.
Phone: Phone: +481818 25 00 Fax: +461851 19 25  
Author: J. Alan Robinson Jonas Barklund 
Note: VESPER is  This work was partly supported by Goran Gustafssons Stiftelse and the Swedish Research Council for Engineering Sciences (TFR) under grants 93:38 and 94-939, respectively.  
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: VESPER  Syracuse University and Uppsala University Computing Science Department  
Abstract: UPMAIL Technical Report No. 100 10 May, 1995 (revised 30 January, 1996) ISSN 1100-0686 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Barklund. </author> <title> Parallel Unification. </title> <type> PhD thesis, </type> <institution> Comp. Sci. Dept., Uppsala Univ., Uppsala, </institution> <year> 1990. </year>
Reference-contexts: When rewritten in parallel, this computation of unification is similar to a parallel unification algorithm based on rewriting of equalities <ref> [1] </ref> and it might be possible to incorporate other parts of that algorithm as well. Example 5.
Reference: [2] <author> K. L. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: The potential for parallel computation was noted but not further pursued. VESPER is a much more fully worked-out version of SUPER, with particular emphasis placed on making completely explicit the logic of parallel reduction. Just as SUPER provided relational programming by exploiting Clark's `completion' idea <ref> [2] </ref> so also in VESPER the user can define relations as lambda abstractions whose bodies are disjunctions of existentially quantified conjunctions. It will be recalled that Clark's idea was to take such definitions as alternative characterizations of relations, obtaining them as translations of corresponding sets of Horn clauses.
Reference: [3] <author> J. W. Lloyd. </author> <title> Debugging for a declarative programming language. </title> <editor> In K. Furukawa, D. Michie, and S. Muggleton, editors, </editor> <booktitle> Machine Intelligence 15. </booktitle> <publisher> Oxford Univ. Press, </publisher> <year> 1995. </year>
Reference-contexts: We were pleased to discover that essentially the same ideas have been independently developed by John Lloyd, as indeed he describes in the present volume <ref> [3] </ref> and elsewhere [4]. Such a confluence of separate investigations tends to confirm one's sense of the naturalness and inevitability of the present approach. 4 The functions simplify and subsimplify Notation. The two functions simplify and subsimplify differ only in their behavior on abbreviations and non-redexes.
Reference: [4] <author> J. W. Lloyd. </author> <title> Declarative programming in Escher. </title> <type> Technical Report CSTR-95-013, </type> <institution> Dept. of Computer Science, Univ. of Bristol, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: We were pleased to discover that essentially the same ideas have been independently developed by John Lloyd, as indeed he describes in the present volume [3] and elsewhere <ref> [4] </ref>. Such a confluence of separate investigations tends to confirm one's sense of the naturalness and inevitability of the present approach. 4 The functions simplify and subsimplify Notation. The two functions simplify and subsimplify differ only in their behavior on abbreviations and non-redexes.
Reference: [5] <author> J. A. Robinson. </author> <title> Beyond LOGLISP: Combining functional and relational programming in a reduction setting. </title> <editor> In J. E. Hayes, D. Michie, and J. Richards, editors, </editor> <booktitle> Machine Intelligence 11, </booktitle> <pages> pages 57-68. </pages> <publisher> Ellis Hor-wood, </publisher> <address> Chichester, </address> <year> 1987. </year>
Reference-contexts: Although some useful applications were made of the resulting hybrid, the conceptual foundation was unduly complex and unnatural. Reflection on the shortcomings of the dualist LOGLISP approach provided the basis for the second experiment, in which the unified SUPER system <ref> [5] </ref> was formulated. The main idea of SUPER was to capture the logic common to both functional and relational programming within a single set of rewrite rules and then to make reduction to normal form the paradigm for all of logic programming.
Reference: [6] <author> J. A. Robinson and E. E. Sibert. LOGLISP: </author> <title> Motivation, design and implementation. </title> <editor> In K. L. Clark and S. A. Tarnlund, editors, </editor> <booktitle> Logic Programming, </booktitle> <pages> pages 299-313. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1982. </year> <month> 19 </month>
Reference-contexts: LOGLISP, SUPER and VESPER. VESPER is the third in a series of experiments aimed at exploring the problem of unifying the functional and relational styles of logic programming. The first experiment, LOGLISP, <ref> [6] </ref>, was a relatively crude attempt to link a functional system with a relational system while keeping their separate identities intact. Although some useful applications were made of the resulting hybrid, the conceptual foundation was unduly complex and unnatural.
References-found: 6

