URL: ftp://ftp.win.tue.nl/pub/techreports/sjouke/delsbwas.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/sjouke/publications.html
Root-URL: http://www.win.tue.nl
Title: Delayed choice for process algebra with  
Abstract: ion 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Aceto, B. Bloom, and F.W. Vaandrager. </author> <title> Turning SOS rules into equations. </title> <journal> Information and Computation, </journal> <volume> 111(1) </volume> <pages> 1-52, </pages> <year> 1994. </year>
Reference-contexts: However, as the rule system can be simply translated into one in GSOS format [7] by changing the predicate # into the action relation p ! as done in [12], we could follow the algorithm proposed by <ref> [1] </ref> in order to help us on finding a complete axiomatization starting from the rules. Table 4.
Reference: 2. <author> J.C.M. Baeten, J.A. Bergstra, and J.W. Klop. </author> <title> Syntax and defining equations for an interrupt mechanism in process algebra. </title> <type> Fund. </type> <institution> Inf., IX(2):127-168, </institution> <year> 1986. </year>
Reference-contexts: The unless operator / is quite similar to the one used in the axiomatization of the priority operator <ref> [2] </ref>, but our version filters according to equality instead of an ordering on observable actions.
Reference: 3. <author> J.C.M. Baeten and S. Mauw. </author> <title> Delayed choice: an operator for joining Message Sequence Charts. </title> <editor> In D. Hogrefe and S. Leue, editors, </editor> <booktitle> Formal Description Techniques, VII, </booktitle> <pages> pages 340-354. </pages> <publisher> Chapman & Hall, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction The delayed choice is an operator that allows one to express linear time aspects in a branching time process algebra. It was introduced in <ref> [3] </ref> for a basic process algebra without abstraction. The intuition behind this operator for alternative composition is the following. If two processes start with a common initial action, then the delayed choice between these alternatives consists of executing this common action before making the choice between the resulting processes. <p> The delayed choice is denoted by (for Trace-+) and the normal non-deterministic choice by +. ab ac = a (b + c) If the two alternatives have no initial action in common, the delayed choice and the non-deterministic choice coincide (a 6= c): ab cd = ab + cd In <ref> [3] </ref> soundness and completeness of the definition was proven and an application in the realm of Message Sequence Charts was given. In this paper we study the delayed choice operator in a process algebra theory extended with abstraction. <p> T = $ rb is a model for BPA o ffi" . BPA o ffi" is a complete axiomatization for T = $ rb . 3 The Delayed Choice 3.1 Equational Theory The delayed choice considered here is an extension of the operator introduced in <ref> [3] </ref>. The difference is that we also consider abstraction. The delayed choice () between processes x and y, is the process obtained by joining the observable common initial parts of x and y and continuing with a normal choice between the remaining parts. <p> Proof. ( $ ) The set of operational rules for BPA ffi" + DC satisfies the panth format of [18] and it is also well founded. It remains to prove that it is stratifiable. As in <ref> [3] </ref>, define the function S that, to each step t a !t 0 and termination option t #, assigns the number of symbols plus the number of / symbols in t. It is now easy to prove that S is a strict stratification. <p> For details we refer to [10]. ut We have already stated that is commutative, associative and has ffi as neutral element. However, the delayed choice presented here is not idempotent and it does not satisfy the several laws of distributivity, just as the delayed choice of <ref> [3] </ref> and the o -angelic choice [9]. We will not repeat the counter examples for the following fact given in [3]. <p> However, the delayed choice presented here is not idempotent and it does not satisfy the several laws of distributivity, just as the delayed choice of <ref> [3] </ref> and the o -angelic choice [9]. We will not repeat the counter examples for the following fact given in [3]. Fact 20 The following equations are not generally valid in the initial algebra: x x = x (x y) + z = (x + z) (y + z) z (x y) = zx zy 4 Examples In [3] the delayed choice operator was used for the composition of Message Sequence <p> will not repeat the counter examples for the following fact given in <ref> [3] </ref>. Fact 20 The following equations are not generally valid in the initial algebra: x x = x (x y) + z = (x + z) (y + z) z (x y) = zx zy 4 Examples In [3] the delayed choice operator was used for the composition of Message Sequence Charts. In this section, we will show two more examples of its application. 4.1 Scenario specification In communication protocols it is often the case that one can distinguish one main scenario and several alternative behaviours.
Reference: 4. <editor> J.C.M. Baeten and C. Verhoef. </editor> <booktitle> Concrete process algebra, </booktitle> <pages> pages 149-268. </pages> <booktitle> Handbook of logic in computer science (Vol 4, Semantic modelling), </booktitle> <editor> eds. S. Abramsky, Dov. M. Gabbay and T.S.E. Maibaum. </editor> <publisher> Clarendon press, Oxford, </publisher> <year> 1995. </year>
Reference-contexts: Because the axiomatizations of BPA ffi" and BPA o ffi" are sound and complete (Theorem 3), and the axiomatizations of BPA ffi" + DC and BPA o ffi" + DC are sound (Theorem 9), equational conservativ-ity follows from <ref> [19, 4] </ref>. ut Theorem 11 (Completeness). 1. BPA ffi" + DC is a complete axiomatization for T = $ . 2. BPA o ffi" + DC is a complete axiomatization for T = $ rb . Proof. Again, following [19, 4] and considering Theorem 6 and Corollary 7, this theorem is <p> ffi" + DC are sound (Theorem 9), equational conservativ-ity follows from <ref> [19, 4] </ref>. ut Theorem 11 (Completeness). 1. BPA ffi" + DC is a complete axiomatization for T = $ . 2. BPA o ffi" + DC is a complete axiomatization for T = $ rb . Proof. Again, following [19, 4] and considering Theorem 6 and Corollary 7, this theorem is a corollary of the previous one. ut 3.4 Properties In this section, we prove several properties that hold for the new operators.
Reference: 5. <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: Jan Joris Vereijken was very helpful in doing calculations on the examples. 2 Basic Process Algebra with Empty Process The aim of this section is to introduce the algebra of sequential processes <ref> [5] </ref>. <p> R = o i2ID o leader (i) where leader (i) denotes that entity i has become leader. Notice that we prepend a silent step o to represent some initial internal activity. The Paint Ball protocol is specified as the parallel composition (k, <ref> [5] </ref>) of all entities. The encapsulation operator @ H is applied to enforce successful communications only. It renames all atoms from the set H into ffi. S = @ H k i2ID E IDfig i Each entity E V i is indexed with a set V .
Reference: 6. <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information & Control, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference-contexts: Jan Joris Vereijken was very helpful in doing calculations on the examples. 2 Basic Process Algebra with Empty Process The aim of this section is to introduce the algebra of sequential processes [5]. We deal with the basic process algebra with empty process for concrete processes (BPA ffi" ) <ref> [6, 15] </ref> and with abstraction in the framework of branching bisimulation (BPA o 2.1 The Equational Theories The signature of the several theories is parameterized by a set of constants A = fa; b; : : :g called atomic actions. There are three distinguished constants not belonging to A.
Reference: 7. <author> B. Bloom, S. Istrail, and A.R. Meyer. </author> <title> Bisimulation can't be traced: preliminary report. </title> <booktitle> In Proc. 15th ACM symposium on Principles of Programming Languages, </booktitle> <pages> pages 229-239. </pages> <address> San Diego, California, </address> <year> 1988. </year>
Reference-contexts: Our choice was to formulate the equational theory and afterwards state the operational rules which we will prove sound and complete. However, as the rule system can be simply translated into one in GSOS format <ref> [7] </ref> by changing the predicate # into the action relation p ! as done in [12], we could follow the algorithm proposed by [1] in order to help us on finding a complete axiomatization starting from the rules. Table 4.
Reference: 8. <author> S.D. Brookes, C.A.R. Hoare, and A.W. Roscoe. </author> <title> A theory of communicating sequential processes. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <year> 1984. </year>
Reference-contexts: This property can be expressed as follows: o a b = o (a + b) The behaviour of the delayed choice operator with respect to internal steps compares well to the behaviour of the deterministic choice operator 2 from TCSP <ref> [8] </ref>. This operator was studied in a branching time setting in [9], where it was called o -angelic choice.
Reference: 9. <author> P. D'Argenio. </author> <title> o-angelic choice for process algebra. </title> <type> Technical report, </type> <institution> LIFIA, Dpto. de Informatica, Fac. Cs. Exactas, UNLP, </institution> <year> 1994. </year>
Reference-contexts: This operator was studied in a branching time setting in <ref> [9] </ref>, where it was called o -angelic choice. The main purpose of this paper is to show that the definition of the delayed choice operator can be combined with the definition of the o -angelic choice operator in order to obtain a delayed choice operator for process algebra with abstraction. <p> In case internal activity is performed, the choice is delayed in the same way the o -angelic choice <ref> [9] </ref> does. Thus, after executing an internal step of x the alternatives from y are still enabled, and vice versa. However, the nondeterministic choices which are internal to x or y, are not removed. This is expressed in the definition of the delayed choice in Table 3. <p> The unless operator / is quite similar to the one used in the axiomatization of the priority operator [2], but our version filters according to equality instead of an ordering on observable actions. The o -selecting operator works in a similar way as the left box of <ref> [9] </ref> when dealing with summands starting with o , but instead, our operator does not select summands having an initially observable action. Example 1. We give some simple examples in order to make clear the behaviour of the delayed choice. <p> However, the delayed choice presented here is not idempotent and it does not satisfy the several laws of distributivity, just as the delayed choice of [3] and the o -angelic choice <ref> [9] </ref>. We will not repeat the counter examples for the following fact given in [3].
Reference: 10. <author> P. D'Argenio and S. Mauw. </author> <title> Delayed choice for process algebra with abstraction. </title> <type> Report, </type> <institution> Department of Computer Science, Eindhoven University of Technology, </institution> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: We use branching bisimulation [11] as the semantics for the silent step. We consider divergence free processes only. The case of weak bisimulation is treated in <ref> [10] </ref>. Applications of this new operator can be found in the areas of specification and verification. Using the delayed choice it is possible to make so-called scenario specifications. A scenario specification consists of a collection of possible behaviours of a system. <p> TRS is strongly normalizing. Proof. This can be proved by applying the method of the lexicographical path ordering [13, 14]. The details can be found in <ref> [10] </ref>. ut Definition 5 (Basic Terms). <p> Properties (3), (4) and (5) are proved by mutual induction on the sum k of symbols of x, y and z. For details we refer to <ref> [10] </ref>. ut We have already stated that is commutative, associative and has ffi as neutral element. However, the delayed choice presented here is not idempotent and it does not satisfy the several laws of distributivity, just as the delayed choice of [3] and the o -angelic choice [9].
Reference: 11. <author> R.J. van Glabbeek and W.P. Weijland. </author> <title> Branching time and abstraction in bisimu-lation semantics (extended abstract). </title> <editor> In G.X. Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 613-618. </pages> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: The main purpose of this paper is to show that the definition of the delayed choice operator can be combined with the definition of the o -angelic choice operator in order to obtain a delayed choice operator for process algebra with abstraction. We use branching bisimulation <ref> [11] </ref> as the semantics for the silent step. We consider divergence free processes only. The case of weak bisimulation is treated in [10]. Applications of this new operator can be found in the areas of specification and verification. Using the delayed choice it is possible to make so-called scenario specifications. <p> Two processes p and q are bisimilar (notation p $ q), if there exists a bisimulation S with pSq. Definition 2 (Branching bisimulation). <ref> [11] </ref> A branching bisimulation is a symmetric relation S T fi T satisfying, for all a 2 A [ fo g: if pSq and p !p 0 , then ae 9q 00 ; q 0 2 T : q =)q 00 a if pSq and p #, then 9q 0 2
Reference: 12. <author> J.F. Groote and F.W. Vaandrager. </author> <title> Structured operational semantics and bisimu-lation as a congruence. </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 202-260, </pages> <year> 1992. </year>
Reference-contexts: However, as the rule system can be simply translated into one in GSOS format [7] by changing the predicate # into the action relation p ! as done in <ref> [12] </ref>, we could follow the algorithm proposed by [1] in order to help us on finding a complete axiomatization starting from the rules. Table 4.
Reference: 13. <author> S. Kamin and J.-J. Levy. </author> <title> Two generalizations of the recursive path ordering. </title> <type> Unpublished manuscript, </type> <year> 1980. </year>
Reference-contexts: TRS is strongly normalizing. Proof. This can be proved by applying the method of the lexicographical path ordering <ref> [13, 14] </ref>. The details can be found in [10]. ut Definition 5 (Basic Terms).
Reference: 14. <author> J.W. Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. Gabbay, and T. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume II, </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: TRS is strongly normalizing. Proof. This can be proved by applying the method of the lexicographical path ordering <ref> [13, 14] </ref>. The details can be found in [10]. ut Definition 5 (Basic Terms).
Reference: 15. <author> C.P.J. Koymans and J.L.M. Vrancken. </author> <title> Extending process algebra with the empty process. </title> <type> Report LGPS 1, </type> <institution> Dept. of Philosophy, University of Utrecht, </institution> <year> 1985. </year>
Reference-contexts: Jan Joris Vereijken was very helpful in doing calculations on the examples. 2 Basic Process Algebra with Empty Process The aim of this section is to introduce the algebra of sequential processes [5]. We deal with the basic process algebra with empty process for concrete processes (BPA ffi" ) <ref> [6, 15] </ref> and with abstraction in the framework of branching bisimulation (BPA o 2.1 The Equational Theories The signature of the several theories is parameterized by a set of constants A = fa; b; : : :g called atomic actions. There are three distinguished constants not belonging to A.
Reference: 16. <author> D.M.R. Park. </author> <title> Concurrency and automata on infinite sequence. </title> <editor> In P. Deussen, editor, </editor> <booktitle> Proc. 5th. GI Conference, </booktitle> <pages> pages 167-183. </pages> <publisher> LNCS 104, Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: This means that a process cannot perform an infinite sequence of o -steps. Let T be the set of all closed terms in the signature of BPA ffi" . Next, we define two well known equivalences over T . Definition 1 (Bisimulation). <ref> [16] </ref> A (strong) bisimulation is a symmetric relation S T fi T satisfying, for all a 2 A [ fo g: if pSq and p ! p 0 , then 9q 0 2 T : q a if pSq then p # iff q #.
Reference: 17. <author> G.D. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Report DAIMI-FN-19, </type> <institution> Computer Science Department, University of Arhus, </institution> <year> 1981. </year>
Reference-contexts: (x + y) + z = x + (y + z) A7 ffix = ffi A3 x + x = x A5 (xy)z = x (yz) A9 "x = x 2.2 Structured Operational Semantics and Equivalences Table 2 defines the operational semantics in a structured way following the style of <ref> [17] </ref>. In our system we consider two kinds of predicates, each one having its own meaning. Predicate # expresses that a process may terminate successfully.
Reference: 18. <author> C. Verhoef. </author> <title> A congruence theorem for structured operational semantics with predicates and negative premises. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> Proc. CONCUR '94, </booktitle> <pages> pages 433-448. </pages> <address> Uppsala, </address> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <note> LNCS 836. </note>
Reference-contexts: In some rules, we make use of negative premises (see <ref> [18] </ref>). Expression y 6 a means that process y cannot execute action a. Moreover, our system is in panth format [18], which introduces several good properties that are useful in proving completeness of equational theories. <p> In some rules, we make use of negative premises (see <ref> [18] </ref>). Expression y 6 a means that process y cannot execute action a. Moreover, our system is in panth format [18], which introduces several good properties that are useful in proving completeness of equational theories. Our choice was to formulate the equational theory and afterwards state the operational rules which we will prove sound and complete. <p> Now, we have the following results. Theorem 8 (Congruence). $ and $ rb are congruences for the , 1, / and operators. Proof. ( $ ) The set of operational rules for BPA ffi" + DC satisfies the panth format of <ref> [18] </ref> and it is also well founded. It remains to prove that it is stratifiable. As in [3], define the function S that, to each step t a !t 0 and termination option t #, assigns the number of symbols plus the number of / symbols in t.
Reference: 19. <author> C. Verhoef. </author> <title> A general conservative extension theorem in process algebra. </title> <editor> In E.-R. Olderog, editor, </editor> <booktitle> Proc. PROCOMET'94, IFIP 2 Working Conference, </booktitle> <pages> pages 149-168. </pages> <address> San Miniato, </address> <publisher> North-Holland, </publisher> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: BPA ffi" + DC is a conservative extension of BPA ffi" . 2. BPA o ffi" + DC is a conservative extension of BPA o ffi" . Proof. The operational conservativity follows since our rules are in panth format, and they are pure and well-founded (see <ref> [19] </ref>). This implies operational conservativity up to $ and up to $ rb . <p> Because the axiomatizations of BPA ffi" and BPA o ffi" are sound and complete (Theorem 3), and the axiomatizations of BPA ffi" + DC and BPA o ffi" + DC are sound (Theorem 9), equational conservativ-ity follows from <ref> [19, 4] </ref>. ut Theorem 11 (Completeness). 1. BPA ffi" + DC is a complete axiomatization for T = $ . 2. BPA o ffi" + DC is a complete axiomatization for T = $ rb . Proof. Again, following [19, 4] and considering Theorem 6 and Corollary 7, this theorem is <p> ffi" + DC are sound (Theorem 9), equational conservativ-ity follows from <ref> [19, 4] </ref>. ut Theorem 11 (Completeness). 1. BPA ffi" + DC is a complete axiomatization for T = $ . 2. BPA o ffi" + DC is a complete axiomatization for T = $ rb . Proof. Again, following [19, 4] and considering Theorem 6 and Corollary 7, this theorem is a corollary of the previous one. ut 3.4 Properties In this section, we prove several properties that hold for the new operators.
References-found: 19

