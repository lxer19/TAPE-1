URL: ftp://ftp.dcs.ex.ac.uk/pub/media/sv/asv.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/~lindsey/CV/index.htm
Root-URL: http://www.dcs.ex.ac.uk
Title: Automatic Software Visualization using Visual Arts Techniques  
Author: Lindsey Ford 
Keyword: Program visualization, algorithm animation, visual arts, film, theatre.  
Address: Exeter EX4 4PT U.K.  
Affiliation: Department of Computer Science University of Exeter  
Pubnum: Research Report 279  
Email: lindsey@dcs.ex.ac.uk  
Date: September 27, 1993  
Abstract: The problems of reconciling spatial and temporal dimensions of source code have been with us since the advent of programming. Although the notion of visually representing the internal states and actions of a computer is not new but for algorithm animation, at least, it involves a heavy time penalty on designing and implementing the animation. We have attempted to automate this process by providinga general mechanism for parsing and transforming source code in order to yield standard representations. General visualization mechanisms are then applied to these representations. The problems of space and time persist, however, and we have used techniques from the visual arts, particularly theatre and film, to address them. Our results encourage us to believe that techniques such as these are relevant for completely automating the visualization of very large programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M H Brown and J Hershberger. </author> <title> Color and sound in algorithm animation. </title> <booktitle> In Proceedings 1991 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 10-17. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Also jumps forward and backward in time are easily provided. These techniques translate readily to software visualization. Representations of variables and control constructs represent stage or screen actors and their actions can be conveyed by the use of colour, sound, and animation <ref> [1] </ref>. Camera movements are provided in Goofy/POLKA and these enable assignments to be provided in close-up followed by long shots to place them in context. In essence these provide the story-line.
Reference: [2] <author> B F Dick. </author> <title> Anatomy of film. </title> <publisher> St Martins Press, </publisher> <year> 1990. </year>
Reference-contexts: The many forms of visual arts provide a rich source of inspiration and techniques. In particular we have looked at theatre, film, comics, cartoons, and dance. In this paper we restrict our observations to the relevance of juat a few techniques of theatre, and film <ref> [2] </ref>. In theatre, the spatial problem of a fixed and relatively small stage is addressed by moving actors on and off stage only those relevant to a scene need be on the stage at one time.
Reference: [3] <author> Charles Babbage Esq. </author> <title> On a method of expressing by signs the action of machinery. </title> <journal> Philosophical Transactions of the Royal Society of London, Part II:250-265, MDCCCXXVI. </journal>
Reference-contexts: INTRODUCTION The notion of visually representing the internal states and actions of a computer is not new. As early as 1826 Charles Babbage <ref> [3] </ref> found the need to devise a notation for representing the internal workings of his Difference Engine.
Reference: [4] <author> L Ford. </author> <title> Goofy animation system. </title> <type> Research Report 266, </type> <institution> Department of Computer Science, University of Exeter, Exeter, U.K., </institution> <year> 1993. </year>
Reference-contexts: Both programs have three modules that are identical. The file processor merely reads the appropriate data file and makes it available in internal form to the visualization module. Two modules handle graphics and animation. Goofy <ref> [4] </ref> is a convenient interface that adds a few extra features to the POLKA system [10]. POLKA is a powerful animation system that provides smooth 2- and 3-dimensional graphics animation. Both Goofy and POLKA are entirely general mechanisms that have not been tailored for our visualization work.
Reference: [5] <author> L Ford. </author> <title> How programmers visualize programs. </title> <type> Research Report 271, </type> <institution> Department of Computer Science, University of Ex-eter, Exeter, U.K., </institution> <year> 1993. </year>
Reference-contexts: Student or trainee programmers can witness visualizations of case study programs. These visualizations can give an insight into the structure and dynamics of a program that are difficult for the teacher to convey with conventional teaching equipment such as an overhead projector <ref> [6, 5] </ref>. Also learners can apply the general mechanisms to their own programs. In both situations learners are afforded a picture-oriented view of software that is perhaps more appropriate and effective than the textual output of conventional editors and debuggers.
Reference: [6] <author> L Ford. </author> <title> Interactive learning and researching with visualization. </title> <type> Research Report 274, </type> <institution> Department of Computer Science, University of Exeter, Exeter, U.K., </institution> <year> 1993. </year>
Reference-contexts: Student or trainee programmers can witness visualizations of case study programs. These visualizations can give an insight into the structure and dynamics of a program that are difficult for the teacher to convey with conventional teaching equipment such as an overhead projector <ref> [6, 5] </ref>. Also learners can apply the general mechanisms to their own programs. In both situations learners are afforded a picture-oriented view of software that is perhaps more appropriate and effective than the textual output of conventional editors and debuggers.
Reference: [7] <author> L Ford and D Tallis. </author> <title> Interacting visual abstractions of programs. </title> <booktitle> In Proceedings 1993 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 93-97. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: To some extent we have addressed the new temporal and spatial problems however we recognise that the ultimate reconciliation of temporal and spatial dimensions of software will require us to link the views provided by the static and dynamic visualizations <ref> [7] </ref>. ACKNOWLEDGEMENTS My thanks to Dan Tallis who has developed cppinfo and for many helpful discussions. John Stasko provided the POLKA framework and has been an inspiration. My Masters students Zulikha Jamaludin, Darrel Manuel, Ken Chan, and Steve Cor-bett did most of the spadework and contributed many valuable ideas. 4
Reference: [8] <author> B A Price, R M Baecker, </author> <title> and I S Small. A principled taxonomy of software visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 4(3), </volume> <year> 1993. </year>
Reference-contexts: Software Visualization (a somewhat broader but more accurate term than Program Visualization <ref> [8] </ref>) encompasses visualizing static and dynamic aspects of software. 'Static' visualizations depict data structures and control structures, for example, of source code. 'Dynamic' visualizations typically provide animated representations of data flow.
Reference: [9] <author> J J Purtilo and J R Callahan. </author> <title> Parse-tree annotations. </title> <journal> Communications of the ACM, </journal> <volume> 32(12) </volume> <pages> 1467-1477, </pages> <year> 1989. </year>
Reference-contexts: In both situations learners are afforded a picture-oriented view of software that is perhaps more appropriate and effective than the textual output of conventional editors and debuggers. GENERAL MECHANISMS We have developed a program cppinfo that makes extensive use of newyacc <ref> [9] </ref> to provide two forms of information about a program: static data and dynamic data. Static data are derived from a parse and analysis of the source program (in C or C++) as shown in figure 1. The static data file serves as input to the visualization mechanism.
Reference: [10] <author> J T Stasko. </author> <title> Polka animation designer's package. </title> <type> Technical report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332-0280, </address> <year> 1992. </year> <month> 5 </month>
Reference-contexts: The file processor merely reads the appropriate data file and makes it available in internal form to the visualization module. Two modules handle graphics and animation. Goofy [4] is a convenient interface that adds a few extra features to the POLKA system <ref> [10] </ref>. POLKA is a powerful animation system that provides smooth 2- and 3-dimensional graphics animation. Both Goofy and POLKA are entirely general mechanisms that have not been tailored for our visualization work. The visualization modules provide a link between the file processor and the animation software. Both modules work similarly.
References-found: 10

