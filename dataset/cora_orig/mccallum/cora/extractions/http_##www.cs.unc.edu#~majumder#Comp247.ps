URL: http://www.cs.unc.edu/~majumder/Comp247.ps
Refering-URL: http://www.cs.unc.edu/~majumder/
Root-URL: http://www.cs.unc.edu
Title: Parallel and Distributed Graph Algorithms and their Applications  
Author: Aditi Majumder 
Keyword: Distributed Graph Algorithms, Parallel Graph Algorithms, ARPANET algorithms.  
Address: Chapel Hill  
Affiliation: Department of Computer Science University of North Carolina at  
Abstract: This paper surveys the advent of graph algorithms in the field of parallel and distributed computing, both because of the need for fast graph algorithms and also because of the applicability of graph algorithms in the distributed systems arena. A few parallel implementations of commonly used graph algorithms like minimum spanning tree, all pairs shortest path, and connected components, are discussed. A few applications in which these graph algorithms are critical, are also discussed. In the field of distributed systems, a few graph algorithms are used for effective communication in a wide/local area network. This paper also touches upon a few graph algorithms like connected components, and bi-connected components and elaborates on the use of distributed shortest path algorithm for routing techniques in ARPANET. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Vipin Kumar, Ananth Grama, </author> <title> Anshul Gupta and George Karypis Introduction to Parallel Computing, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc. </publisher> <year> 1994. </year>
Reference-contexts: In such cases a completely different approach is required to solve problems, and that is essentially the domain of distributed graph algorithms <ref> [1] </ref> [2]. The rest of the paper is organized as follows. Section 2 presents the parallel graph algorithms and their applications. Section 3 presents some frequently used distributed graph algorithms and their applications. <p> A parallel algorithm for finding the maximum flow in a weighted graph, has been proposed by Shiloach and Vishkin [8]. Detailed discussion on parallel graph algorithms can be found in <ref> [1] </ref>. This literature also discusses about the sparse graph algorithms which have orthogonal issues to be considered, when compared with dense graph algorithms in the parallel domain. Readers can find distributed algorithms for minimum spanning tree and maximum flow graph algorithms in [2].
Reference: [2] <author> Valmir C. </author> <title> Barbosa An Introduction to Distributed Algorithms, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, Lon-don, England. </address>
Reference-contexts: In such cases a completely different approach is required to solve problems, and that is essentially the domain of distributed graph algorithms [1] <ref> [2] </ref>. The rest of the paper is organized as follows. Section 2 presents the parallel graph algorithms and their applications. Section 3 presents some frequently used distributed graph algorithms and their applications. <p> This literature also discusses about the sparse graph algorithms which have orthogonal issues to be considered, when compared with dense graph algorithms in the parallel domain. Readers can find distributed algorithms for minimum spanning tree and maximum flow graph algorithms in <ref> [2] </ref>. More about the correctness proofs of the most recent loop-free routing algorithms used in ARPANET can be found in [7].
Reference: [3] <author> Bala Swaminathan and Kenneth J. </author> <title> Goldman An Incremental distributed Algorithm for Computing Biconnected Components, </title> <booktitle> Eighth International Workshop on Distributed Algorithms, </booktitle> <address> Terschelling, Netherlands, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: The actual implementation of this is very complex and an interested reader is referred to <ref> [3] </ref>. In the serial algorithm, assumption is made that the environment makes the requests one at a time and the processing of one request is complete before the next request is made. The nodes of the environment are numbered.
Reference: [4] <author> Mischa Schwartz and Thomas E. </author> <title> Stern Routing Techniques used in Computer Communication Networks, </title> <journal> IEEE Transactions on Communications, </journal> <volume> Vol. Com-28, No. 4, </volume> <month> April </month> <year> 1980. </year>
Reference: [5] <author> Jeffrey M. Jaffe and Franklin H. </author> <title> Moss An Responsive Distributed Routing Algorithm for Computer Networks, </title> <journal> IEEE Transactions on Communications, </journal> <volume> Vol Com-30, No. 7, </volume> <month> July </month> <year> 1982. </year>
Reference: [6] <author> John M. </author> <title> McQuillan and Ira Richer The New Routing Algorithm for ARPANET, </title> <journal> IEEE Transactions on Communications, </journal> <volume> Vol Com-28, No. </volume> <month> 5,May </month> <year> 1980. </year>
Reference: [7] <author> Chunhsiang Cheng, Ralph Riley and Srikanta P.R. </author> <note> Kumar </note>
Reference-contexts: Therefore, the events that the protocol can encounter are link failures and recoveries. 4.4.2 Properties The properties of this algorithm are presented here very briefly. An interested reader is referred to <ref> [7] </ref>. * At any moment in computation, the path extracted from any distance maintained at each node, say i, to any destination, say j, is a simple path and is equivalent to the path implicit in such distance. * This algorithm is without bouncing effect. * This does not have continuing-to-infinity <p> Readers can find distributed algorithms for minimum spanning tree and maximum flow graph algorithms in [2]. More about the correctness proofs of the most recent loop-free routing algorithms used in ARPANET can be found in <ref> [7] </ref>. The direction of development in this field points us towards the need for different algorithms for the same graph problems based on different application domains in the field of distributed computing, and various implementation domains in the field of parallel computing.
References-found: 7

