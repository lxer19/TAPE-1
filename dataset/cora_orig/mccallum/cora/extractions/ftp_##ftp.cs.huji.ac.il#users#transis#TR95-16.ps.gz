URL: ftp://ftp.cs.huji.ac.il/users/transis/TR95-16.ps.gz
Refering-URL: http://www.cs.huji.ac.il/~idish/Abstracts/tr95-16.html
Root-URL: http://www.cs.huji.ac.il
Email: Email: froy,keng@cs.cornell.edu  Email: fidish,dolevg@cs.huji.ac.il  Email: dalia@research.att.com  
Title: Deciding in Partitionable Networks  
Author: Roy Friedman Idit Keidar Dalia Malki Ken Birman Danny Dolev 
Address: University.  Jerusalem.  Murray Hill, NJ 07974.  
Affiliation: GTE Corporations Department of Computer Science, Cornell  Computer Science Institute, The Hebrew University of  AT&T Bell Laboratories,  
Note: This work was supported by ARPA/ONR grants N00014-92-J-1866 and F30602-95-1-0047, and by grants from IBM, Siemens, and  
Date: November 14, 1995  
Abstract: Motivated by Chandra and Toueg's work, we study decision protocols in a model that closely approximates "real" distributed systems. Our results show how the weakest failure detector and associated consensus algorithm can be adapted to a network in which omission failures can occur during periods when processes suspect one-another as faulty. For protocols in which a majority subset of the participants can reach decisions on behalf of the system as a whole, we also characterize a series of stages that necessarily arise during execution. Jointly, these findings establish a direct relationship between an extended version of the three-phase commit protocol, which makes progress even when a traditional three-phase commit would block, and the consensus protocol of Chandra and Toueg. Although we do not explore the linkage here, our results should also be applicable to other agreement protocols for systems of this sort, such as leader election and dynamic group membership. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Attiya. </author> <booktitle> Lecture Notes for Course #236357: Distributed Algorithms. </booktitle> <institution> Department for Computer Science, The Technion, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Claim 5.2 If there exists a decider in some consistent cut C, then the protocol is not k-decidable for any k &lt; n. The proof of Claim 5.2 is almost identical to the proof of Lemma 12.1.7 in <ref> [1] </ref>. We repeat the details for completeness. Proof: Assume, by way of contradiction, that there exists a decider p i in some consistent cut C of a k-decidable protocol A, for some k &lt; n.
Reference: [2] <author> T. D. Chandra, V. Hadzilacos, and S. Toueg. </author> <title> The Weakest Failure Detector for Solving Consensus. </title> <booktitle> In ACM Symp. on Prin. of Distributed Computing (PODC), </booktitle> <pages> pages 147-158, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction The literature contains various forms of distributed agreement protocols with many common points and subtle differences. Examples are Consensus, agreement on membership changes in a group, and atomic commitment decisions. Chandra and Toueg, in a seminal paper <ref> [2] </ref>, analyze the weakest conditions for reaching agreement in an asynchronous environment with crash failures. In the present paper, we consider the problem of reaching agreement decisions in an asynchronous environment with all possible benign failure types: crash and recovery, message omission failures, and network partitions and re-merges. <p> In Section 4.4 we present a d n+1 2 e-decidable protocol that requires bounded buffer space, and uses an eventually weak failure detector. Chandra, Hadzilacos, and Toueg showed that 3W is the weakest failure detector to achieve consensus in an asynchronous environment with crash failures <ref> [2] </ref>.
Reference: [3] <author> T. D. Chandra and S. Toueg. </author> <title> Unreliable Failure Detectors for Asynchronous Systems. </title> <journal> Journal of the ACM. </journal> <note> To appear, previous version in PODC 1991 pp. 325-340. </note>
Reference-contexts: In the present paper, we consider the problem of reaching agreement decisions in an asynchronous environment with all possible benign failure types: crash and recovery, message omission failures, and network partitions and re-merges. We extend the definitions of failure detectors given in <ref> [3] </ref> to such environments. By these definitions, correct processes are alive and incorrect processes are crashed. Thus, there may be two processes considered correct that are unable to exchange messages because of communication problems. The first part of the paper concludes that agreement is achievable if the following holds: 1. <p> Informally, the first condition states a majority-connected condition, and the second and third conditions characterize an eventually strong failure detector 1 . These conditions are defined formally in the paper. The eventually strong failure detector is analogous to 3S in <ref> [3] </ref> but is defined for the extended failure model. Similar but stronger conditions for reaching agreement on the membership of a group processes are given in the timed asynchronous model of Cristian and Schmuck [4]. <p> In our terminology, protocols that achieve agreement in such an environment are called majority-deciding protocols (more precisely, d n+1 2 e-deciding protocols, where the system contains n processes). For example, the consensus protocol of Chandra and Toueg <ref> [3] </ref> is in this category, since it reaches consensus among a majority in a crash-failure environment. We also provide an adaptation of their protocol for an omission-failure environment that is a majority-deciding protocol as well. <p> The requirement of an agreement protocol is that it decides on the initial value of one of the processes. Examples of d n+1 2 e-decidable protocols are the agreement protocol of Chandra and Toueg <ref> [3] </ref> and the atomic commitment protocol, E3PC, of Keidar and Dolev [7]. <p> However, in these executions, some important messages must always be too late, or lost. The d n+1 2 e-connected requirement characterizes an important class of executions in which this does not happen, and therefore all d n+1 2 e-connected executions of both <ref> [3] </ref> and [7] terminate. 4 Failure Detectors In Section 4.1 we define failure detectors in the model where messages may be lost and the network may partition. In Section 4.2 we show that 3W is reducible to 3S in our model. In Section 4.3 we show that the protocol in [3] <p> <ref> [3] </ref> and [7] terminate. 4 Failure Detectors In Section 4.1 we define failure detectors in the model where messages may be lost and the network may partition. In Section 4.2 we show that 3W is reducible to 3S in our model. In Section 4.3 we show that the protocol in [3] is d n+1 2 e-decidable with unbounded buffer space. In Section 4.4 we present a d n+1 2 e-decidable protocol that requires bounded buffer space, and uses an eventually weak failure detector. <p> Since our model is an extension of their model, 3W is also the weakest failure detector required for d n+1 2 e-decidable algorithms in our model. 4.1 Classes of Failure Detectors Chandra and Toueg <ref> [3] </ref> define classes of distributed failure detectors: Each process has access to a local failure detector module; each local module maintains a list of the processes that it currently suspects to have crashed. <p> Accuracy Completeness Eventual Strong Eventual Weak Strong Eventually Perfect Eventually Strong 3P 3S Weak Eventually Weak 3Q 3W As in <ref> [3] </ref>, we define four classes of eventual failure detectors; each failure detector is characterized by the strength of its completeness and eventual accuracy properties. <p> The failure detector classes are shown in Figure 1. 4.2 Reducing 3W to 3S We reduce 3W to 3S using the algorithm suggested by Chandra and Toueg <ref> [3] </ref>, described in the given (input) failure detector by W, and the resulting (output) failure detector by S. We denote by W p the suspects list of p with the failure detector W , and S p the suspects list with S. <p> The theorem follows: Theorem 4.3 The algorithm in Figure 2 reduces W 2 3W to S 2 3S. 4.3 Agreement with Unbounded Buffers and 3S Chandra and Toueg <ref> [3] </ref> suggested an algorithm that solves consensus with a failure detector S 2 3S if there are no more than b n 2 c failures. <p> Therefore, to the members of an d n+1 2 e-permanently connected component in this model the execution seems the same as to a group of d n+1 2 e correct processes in the crash-recovery model. Thus, the algorithm in <ref> [3] </ref> unchanged will reach a decision among members of the d n+1 2 e-permanently connected component P . Processes that are not members of P will never reach 7 contradicting decisions. So, the algorithm of [3] is d n+1 2 e-decidable in the partitionable model using unbounded buffers. 4.4 Agreement with <p> Thus, the algorithm in <ref> [3] </ref> unchanged will reach a decision among members of the d n+1 2 e-permanently connected component P . Processes that are not members of P will never reach 7 contradicting decisions. So, the algorithm of [3] is d n+1 2 e-decidable in the partitionable model using unbounded buffers. 4.4 Agreement with Bounded Buffers and 3S We suggest a d n+1 2 e-decidable algorithm that uses a failure detector S 2 3S. The algorithm is based on the algorithm suggested in [3], and is presented in Figure <p> So, the algorithm of <ref> [3] </ref> is d n+1 2 e-decidable in the partitionable model using unbounded buffers. 4.4 Agreement with Bounded Buffers and 3S We suggest a d n+1 2 e-decidable algorithm that uses a failure detector S 2 3S. The algorithm is based on the algorithm suggested in [3], and is presented in Figure 3. <p> Interestingly, the agreement protocol of Chandra and Toueg <ref> [3] </ref> and the Enhanced 3-phase commit protocol of Keidar and Dolev [7] exhibit precisely the structure needed to implement this policy. These things said, it should also be commented that our results contain few surprises.
Reference: [4] <author> F. Cristian and F. Schmuck. </author> <title> Agreeing on Process Group Membership in Asynchronous Distributed Systems. </title> <type> Technical Report CSE95-428, </type> <institution> Department of Conmputer Science and Engineering, University of California, </institution> <address> San Diego, </address> <year> 1995. </year>
Reference-contexts: The eventually strong failure detector is analogous to 3S in [3] but is defined for the extended failure model. Similar but stronger conditions for reaching agreement on the membership of a group processes are given in the timed asynchronous model of Cristian and Schmuck <ref> [4] </ref>. In our terminology, protocols that achieve agreement in such an environment are called majority-deciding protocols (more precisely, d n+1 2 e-deciding protocols, where the system contains n processes). <p> Although we do not pursue the linkage here, our findings are also relevant to protocols for primary-partition dynamic group membership problems in the asynchronous model, and in the timed asynchronous model of Cristian and Schmuck <ref> [4] </ref> (we refer to the majority group membership problem the strongest they define which guarantees total order of majority group views). The second part of the paper characterizes all such majority-deciding protocols, showing that: 1 We actually show that an eventually weak failure detector is sufficient.
Reference: [5] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: These protocols use failure detectors: E3PC uses an eventually perfect failure detector, and Chandra and Toueg's protocol uses an eventually weak failure detector, these failure detectors are defined in Section 4. 4 Note that as required by the FLP result <ref> [5] </ref>, there are executions of the above protocols which may never terminate in a real system. However, in these executions, some important messages must always be too late, or lost.
Reference: [6] <author> R. Guerraoui. </author> <title> Revisiting the Relationship between non-blocking Atomic Commitment and Consensus. </title> <booktitle> In International Workshop on Distributed Algorithms (WDAG), </booktitle> <pages> pages 87-100, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: For example, the requirements of an atomic commitment protocol are: The commit decision can only be reached if all sites voted Yes, and if there are no failures and no suspicions and all sites voted Yes, then the decision will be to commit <ref> [6] </ref>. The requirement of an agreement protocol is that it decides on the initial value of one of the processes. Examples of d n+1 2 e-decidable protocols are the agreement protocol of Chandra and Toueg [3] and the atomic commitment protocol, E3PC, of Keidar and Dolev [7].
Reference: [7] <author> I. Keidar and D Dolev. </author> <title> Increasing the Resilience of Atomic Commit, at No Additional Cost. </title> <booktitle> In ACM Symp. on Prin. of Database Systems (PODS), </booktitle> <pages> pages 245-254, </pages> <month> May </month> <year> 1995. </year> <note> Previous version available as Technical Report CS94-18, </note> <institution> The Hebrew University, Jerusalem, Isreal. </institution>
Reference-contexts: We also provide an adaptation of their protocol for an omission-failure environment that is a majority-deciding protocol as well. Another protocol is the enhanced three phase commit protocol (E3PC) of Keidar and Dolev <ref> [7] </ref>, that solves the atomic commitment problem in any majority-connected component. <p> The requirement of an agreement protocol is that it decides on the initial value of one of the processes. Examples of d n+1 2 e-decidable protocols are the agreement protocol of Chandra and Toueg [3] and the atomic commitment protocol, E3PC, of Keidar and Dolev <ref> [7] </ref>. <p> However, in these executions, some important messages must always be too late, or lost. The d n+1 2 e-connected requirement characterizes an important class of executions in which this does not happen, and therefore all d n+1 2 e-connected executions of both [3] and <ref> [7] </ref> terminate. 4 Failure Detectors In Section 4.1 we define failure detectors in the model where messages may be lost and the network may partition. In Section 4.2 we show that 3W is reducible to 3S in our model. <p> Interestingly, the agreement protocol of Chandra and Toueg [3] and the Enhanced 3-phase commit protocol of Keidar and Dolev <ref> [7] </ref> exhibit precisely the structure needed to implement this policy. These things said, it should also be commented that our results contain few surprises.
Reference: [8] <author> D. Skeen. </author> <title> A Quorum-Based Commit Protocol. </title> <type> Technical Report TR82-483, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> February </month> <year> 1982. </year> <month> 15 </month>
References-found: 8

