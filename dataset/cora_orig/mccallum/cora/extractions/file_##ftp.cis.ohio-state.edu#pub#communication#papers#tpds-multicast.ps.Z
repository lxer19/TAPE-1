URL: file://ftp.cis.ohio-state.edu/pub/communication/papers/tpds-multicast.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~panda/wormhole_pub.html
Root-URL: 
Title: A Trip-based Multicasting Model in Wormhole-routed Networks with Virtual Channels  
Author: Yu-Chee Tseng, Dhabaleswar K. Panda, Member, IEEE, and Ten-Hwang Lai, Member, IEEE 
Keyword: Routing algorithm, Interprocessor communication, Multicast, Virtual channel, Wormhole-routing, Path-based routing, Collective communication, and Fault tolerance.  
Date: 1999 1  
Note: IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. XX, NO. Y, MONTH  
Abstract: This paper focuses on efficient multicasting in wormhole-routed networks. A trip-based model is proposed to support adaptive, distributed, and deadlock-free multiple multicast on any network with arbitrary topology using at most two virtual channels per physical channel. This model significantly generalizes the path-based model proposed earlier [21], [22], which works only for Hamiltonian networks and can not be applicable to networks with arbitrary topology resulted due to system faults. Fundamentals of the trip-based model, including the necessary and sufficient condition to be deadlock-free, and the use of appropriate number of virtual channels to avoid deadlock are investigated. The potential of this model is illustrated by applying it to hyper-cubes with faulty nodes. Simulation results indicate that the proposed model can implement multiple multicast on faulty hypercubes with negligible performance degradation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> MPI: </author> <title> A message-passing interface standard. In Message Passing Interface Forum, </title> <month> March </month> <year> 1994. </year>
Reference: [2] <author> H. Abu-Amara. </author> <title> A fast topology maintainance algorithm for high-bandwidth networks. </title> <journal> IEEE/ACM Trans. on Networks, </journal> <volume> 1(3) </volume> <pages> 386-394, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: For load balance, let's choose fg; hg to be reached by an f-worm, and fb; cg by a b-worm. Thus, S f = [ f (d; g); f (d; h)] = [10; 11] and S b = [ b (d; c); b (d; b)] = <ref> [3; 2] </ref>. The f-worm will start from ^ d 4 and the b-worm from ^ d 8 . The real paths traversed by the f- and b-worms will dynamically depend on the traffic in the system. <p> Reconfiguration needs to collect global topology information. Such algorithms do exist <ref> [2] </ref>, [6]. As the network remaining connected is the minimum requirement to perform multicast, our algorithm has the maximum (static) fault-tolerant capability. It is also to be noted that a special case of our model is the Hamiltonian path model [21], [22], where the network is Hamiltonian.
Reference: [3] <author> D. P. Bertsekas, C. Ozveren, G. D. Stamoulis, P. Tseng, and J. N. Tsitsiklis. </author> <title> Optimal communication algorithms for hypercubes. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 11 </volume> <pages> 263-275, </pages> <year> 1991. </year>
Reference-contexts: For load balance, let's choose fg; hg to be reached by an f-worm, and fb; cg by a b-worm. Thus, S f = [ f (d; g); f (d; h)] = [10; 11] and S b = [ b (d; c); b (d; b)] = <ref> [3; 2] </ref>. The f-worm will start from ^ d 4 and the b-worm from ^ d 8 . The real paths traversed by the f- and b-worms will dynamically depend on the traffic in the system.
Reference: [4] <author> G. I. Chen and T. H. Lai. </author> <title> Constructing parallel paths between two subcubes. </title> <journal> IEEE Trans. on Comput., </journal> <volume> 41(1) </volume> <pages> 118-123, </pages> <month> Jan. </month> <year> 1992. </year>
Reference: [5] <author> A. A. Chien and J. H. Kim. </author> <title> Planar-adaptive routing: Low-cost adaptive networks for multiprocessors. </title> <booktitle> In Int'l Symp. on Computer Architecture, </booktitle> <pages> pages 268-277, </pages> <year> 1992. </year>
Reference-contexts: Unfortunately, finding that kind of trip in a given network is often difficult (if not impossible). Below we show how to solve this problem using virtual channels. Using virtual channels is a common technique to separate the resource dependency and thus avoid possible deadlock <ref> [5] </ref>, [10], [23]. Conceptually, a physical channel is separated into multiple virtual channels which share the physical channel in a time-multiplexing or demand-multiplexing manner. Messages are propagated in the network by grabbing one virtual channel after another.
Reference: [6] <author> I. Cidon, I. Gopal, and S. Kutten. </author> <title> New models and algorithms for future networks. </title> <booktitle> In Symp. on Principle of Distributed Computing, </booktitle> <pages> pages 75-89, </pages> <year> 1988. </year>
Reference-contexts: Reconfiguration needs to collect global topology information. Such algorithms do exist [2], <ref> [6] </ref>. As the network remaining connected is the minimum requirement to perform multicast, our algorithm has the maximum (static) fault-tolerant capability. It is also to be noted that a special case of our model is the Hamiltonian path model [21], [22], where the network is Hamiltonian.
Reference: [7] <author> Cray Research, Inc. </author> <title> Cray T3D System Architecture Overview, </title> <year> 1993. </year>
Reference-contexts: It is to be noted that such scheme involves routing table to be stored at the router interface. It has been shown in the current Cray T3D system <ref> [7] </ref> that such routing table approach leads to flexibility in providing easy system reconfigurability and fault-tolerance. B) Communication Overhead: The message initiation is dominated by the sorting operations and has complexity O (jDj log jDj), where D is the destination set.
Reference: [8] <author> W. J. Dally. </author> <title> Virtual-channel flow control. </title> <journal> IEEE Trans. on Paral. and Distrib. Sys., </journal> <volume> 3(2) </volume> <pages> 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference: [9] <author> W. J. Dally and C. L. Seitz. </author> <title> The torus routing chip. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 1(3) </volume> <pages> 187-196, </pages> <year> 1986. </year>
Reference: [10] <author> W. J. Dally and C. L. Seitz. </author> <title> Deadlock-free message routing in multiprocessor interconnection networks. </title> <journal> IEEE Trans. on Comput., </journal> <volume> C-36:547-553, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: One worm originating from s arriving at t is destined for u, one originating from t arriving at v is destined for w, and one origi nating from v arriving at s is destined for t. The deadlock problem can be reasoned in terms of the channel dependency relation <ref> [10] </ref>. If a message in channel c can be propagated to channel c 0 , then there is a resource dependency from c to c 0 , denoted as c 7! c 0 . <p> Unfortunately, finding that kind of trip in a given network is often difficult (if not impossible). Below we show how to solve this problem using virtual channels. Using virtual channels is a common technique to separate the resource dependency and thus avoid possible deadlock [5], <ref> [10] </ref>, [23]. Conceptually, a physical channel is separated into multiple virtual channels which share the physical channel in a time-multiplexing or demand-multiplexing manner. Messages are propagated in the network by grabbing one virtual channel after another. <p> A dependency c 7! c 0 is thus established when a message is sent from one virtual channel c to another c 0 . Similarly, a routing algorithm is deadlock-free if the dependency is acyclic. More details about virtual channels can be found in <ref> [10] </ref>, [26]. Let ff be any trip. Suppose that we assign a virtual channel to each edge h^x; ^yi in G f and G b . <p> For load balance, let's choose fg; hg to be reached by an f-worm, and fb; cg by a b-worm. Thus, S f = [ f (d; g); f (d; h)] = <ref> [10; 11] </ref> and S b = [ b (d; c); b (d; b)] = [3; 2]. The f-worm will start from ^ d 4 and the b-worm from ^ d 8 . The real paths traversed by the f- and b-worms will dynamically depend on the traffic in the system.
Reference: [11] <author> J. T. Draper and J. Ghosh. </author> <title> Multipath e-cube algorithm (MECA) for adaptive wormhole routing and broadcasting in k-ary n-cubes. </title> <booktitle> In Int'l Parallel Processing Symp., </booktitle> <pages> pages 407-410, </pages> <year> 1992. </year>
Reference-contexts: For load balance, let's choose fg; hg to be reached by an f-worm, and fb; cg by a b-worm. Thus, S f = [ f (d; g); f (d; h)] = <ref> [10; 11] </ref> and S b = [ b (d; c); b (d; b)] = [3; 2]. The f-worm will start from ^ d 4 and the b-worm from ^ d 8 . The real paths traversed by the f- and b-worms will dynamically depend on the traffic in the system.
Reference: [12] <author> J. Duato. </author> <title> A new theory of deadlock-free adaptive multicast routing in wormhole networks. </title> <booktitle> In Symp. on Parallel and Distri. Processing, </booktitle> <pages> pages 64-71, </pages> <year> 1993. </year>
Reference: [13] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: </title>
Reference-contexts: The above trip length is no more than two times the minimum, jVj. Note that finding a trip of a minimum length in any graph is no easier than deciding whether the graph is Hamiltonian, which is NP-complete <ref> [13] </ref>. Corollary 1: Let T be any spanning tree of G, and pchhx; yi any edge in G.
References-found: 13

