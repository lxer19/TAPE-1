URL: http://heather.cs.ucdavis.edu/~matloff/158/XiaoNi.PS
Refering-URL: http://heather.cs.ucdavis.edu/~matloff/158/
Root-URL: http://www.cs.ucdavis.edu
Email: xiaoxipe,ni-@cps.msu.edu  
Title: Parallel Routing Table Computation for Scalable IP Routers  
Author: Xipeng Xiao and Lionel M. Ni 
Keyword: tions. Keywords: Scalable Router, Parallel Routing Table Computation, OSPF, Within-Area-Routing Region, Circular-Accumulative-Broadcast  
Address: 3115 Engineering Building  East Lansing, MI 48824-1226  
Affiliation: Department of Computer Science  Michigan State University  
Abstract: The exponential growth of Internet traffic requires that routers be scalable. A generic scalable IP router is typically composed of a number of routing nodes interconnected by a scalable switching fabric, where each routing node has its own processor, memory, and external and internal network interfaces. A critical issue in the design of scalable IP routers is to provide a global and consistent routing table in such distributed-memory architectures. A parallel routing table computation approach is proposed in this paper. By dividing an OSPF area into a number of disjoint Within-Area-Routing-Regions (WARR), the computation required to calculate the routing table can be divided into multiple independent portions and done by different routing nodes (RN) in parallel. Each RN keeps topology information about its own WARR, and computes routes via its own WARR independently. Each RN also broadcasts the changed routing table entries to other RNs and receives the changes from other RNs. In this way each RN can merge other RNs routing table with its own to get the routing table of the whole router. An efficient scheme is designed for the RNs to broadcast their changed routing table entries, which effectively reduces the number of broadcast messages (n-1) times for a router with n RNs. Compared to the conventional approaches, our parallel routing table computation approach can have a speedup somewhere between n and n for within-area link state updates and n for outside-area link state updates in the best case. We also show that the average-case speedup is close to the best-case speedup. This parallel routing table computation algorithm can be obtained from OSPFs SPF algorithm with minor modifica 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Vibhavasu Vuppala and Lionel M. Ni, </author> <title> Design of A Scalable IP Router, </title> <booktitle> Proceedings of the 1997 IEEE Hot Interconnect, </booktitle> <month> Aug. </month> <year> 1997. </year>
Reference: [2] <author> Pluris Inc, </author> <title> Pluris Massively Parallel Routing, </title> <note> White Paper, http://www.pluris.com </note>
Reference: [3] <institution> Ascend Inc., </institution> <note> GRF IP Switch, http://www.ascend.com </note>
Reference: [4] <author> J. Moy, </author> <note> OSPF Version 2, RFC 1583, </note> <month> Mar. </month> <year> 1994 </year>
Reference-contexts: RN1s WARR consists of n2, n3, n4, RT2, RT3 and RT4. RN2s WARR consists of n3. Now assume that the link RT1-n1 changes. Since this is a within-area change, for the SPF algorithm, RT1 will have to recompute routes to all destinations including network n1, n6 and n9 <ref> [4] </ref>. Using our algorithm, since the WARRs of RN1 and RN2 are disjoint, RN1 and RN2 will compute their own 7 routing tables independently, using the topology information of WARR1 and WARR2, respectively. When link RT1-n1 changes, only RN2 will receive such link state advertisement and recompute its routing table. <p> Logically this has the effect of inheriting the topology information of WARR2 because RN1 will start considering router RT3 as its neighbor. Thus the link state advertisements about WARR2 will be used by RN1 to compute its routing table <ref> [4] </ref>. RN2 will stop running OSPF and just forwards the link state advertisements it receives to RN1. RN2 also receives the computed routing table from RN1. Lets assume that after adding link RT3-RT4, RN1 becomes the DRN of this WARR. <p> This has the effect of discarding the topology information of WARR2 for RN1, because RN1 will not consider router RT3 as its neighbor anymore. Those link state advertisements about WARR2 will never be used by RN1 again <ref> [4] </ref>. Besides, RN1 and RN2 dont forward link state advertisements to each other. RN1 will eventually flush the link state advertisements about WARR2 because they are refreshed.
Reference: [5] <author> C. Labovitz, G.R. Malan and F. Jahanian, </author> <title> Internet Routing Instability, </title> <institution> CSE-TR-332-97, Dept. of EECS, University of Michigan </institution>
Reference-contexts: They put a heavy computation load on the routers. Besides normal route updates that reflect network topology changes, it was reported that 99 percent of routing information is pathological and may not reflect real network topology changes <ref> [5] </ref>. Although a single pathological route update only requires some minimal CPU cycles and memory buffers, sufficiently high rate of pathological updates (300 updates per second) are enough to crash a widely deployed, high-end model of Internet router [5]. Internet routing has become less predictable in major ways [6]. <p> routing information is pathological and may not reflect real network topology changes <ref> [5] </ref>. Although a single pathological route update only requires some minimal CPU cycles and memory buffers, sufficiently high rate of pathological updates (300 updates per second) are enough to crash a widely deployed, high-end model of Internet router [5]. Internet routing has become less predictable in major ways [6]. Many reports on the increased instability of Internet routing can be found in [7]. Therefore, it is imperative to make the routing table computation faster and more robust. Both OSPF and BGP run as a monolithic process.
Reference: [6] <author> V. Paxson, </author> <title> End-to-End Routing Behavior in the Internet. </title> <booktitle> ACM SIGCOMM 96, </booktitle> <month> Aug. </month> <year> 1996 </year>
Reference-contexts: Although a single pathological route update only requires some minimal CPU cycles and memory buffers, sufficiently high rate of pathological updates (300 updates per second) are enough to crash a widely deployed, high-end model of Internet router [5]. Internet routing has become less predictable in major ways <ref> [6] </ref>. Many reports on the increased instability of Internet routing can be found in [7]. Therefore, it is imperative to make the routing table computation faster and more robust. Both OSPF and BGP run as a monolithic process.
Reference: [7] <institution> Internet Performance Measurement and Analysis Project (IPMA), </institution> <note> http://www.merit.edu/ipma </note>
Reference-contexts: The OSPF has many good features including fast convergence and light traffic overhead. But whenever the topology of the network changes, the router has to recompute part or the entire of its routing table. The Internet consists of more than 20 millions hosts and more than 1 million named-domains <ref> [7] </ref>. It was reported that there are more than 40 route flaps per second in the Internet backbone [7]. They put a heavy computation load on the routers. <p> The Internet consists of more than 20 millions hosts and more than 1 million named-domains <ref> [7] </ref>. It was reported that there are more than 40 route flaps per second in the Internet backbone [7]. They put a heavy computation load on the routers. Besides normal route updates that reflect network topology changes, it was reported that 99 percent of routing information is pathological and may not reflect real network topology changes [5]. <p> Internet routing has become less predictable in major ways [6]. Many reports on the increased instability of Internet routing can be found in <ref> [7] </ref>. Therefore, it is imperative to make the routing table computation faster and more robust. Both OSPF and BGP run as a monolithic process. This is because they were designed at a time when most of the routers only have a single processor. In scalable routers, there are multiple RNs.
Reference: [8] <author> K. Ishiguro, </author> <title> Zebra Project, </title> <note> ftp://ftp.zebra.org/pub/zebra [9] http://www-eecs.mit.edu/ [10] http://www.cisco.com/ </note>
Reference-contexts: To the best of the authors knowledge, there is no prior parallel routing table computation algorithm for any scalable router architectures. Some parallel processing ideas are expressed in the Zebra Project in Japan <ref> [8] </ref>. The key idea is to implement the popular routing daemon gated with multiple processes, not a traditional way of a single process. Thus, if a router has multiple RNs, these RNs can do the work simultaneously.
References-found: 8

