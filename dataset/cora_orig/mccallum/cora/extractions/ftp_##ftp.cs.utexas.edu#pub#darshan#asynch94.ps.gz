URL: ftp://ftp.cs.utexas.edu/pub/darshan/asynch94.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/darshan/abstracts/abstracts.html
Root-URL: 
Title: Efficient Building Blocks for Delay Insensitive Circuits  
Author: Priyadarsan Patra and Donald S. Fussell 
Address: Austin, TX 78712-1188, USA  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: We introduce a new set of primitive elements for delay-insensitive (DI) circuit design. This set is shown to be universal and minimal, that is, any DI circuit can be constructed using only these primitives, and no proper subset of them is sufficient for constructing all such circuits. We give area efficient, fast, and robust switch-level implementations of key primitives and show how to use them to construct other DI circuit elements commonly found in the literature. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. E. Sutherland, </author> <title> "Micropipelines," </title> <journal> Communications of the ACM, </journal> <volume> vol. 32, </volume> <pages> pp. 720-738, </pages> <month> June </month> <year> 1989. </year>
Reference: [2] <author> S. M. Burns and A. J. Martin, </author> <title> "Performance analysis and optimization of asynchronous circuits," </title> <booktitle> in Advanced Research in VLSI: Proceedings of the 1991 UC Santa Cruz Conference (C. </booktitle> <publisher> H. Sequin, ed.), </publisher> <pages> pp. 71-86, </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [3] <author> E. Brunvand, </author> <title> "A cell set for self-timed design using Actel FPGAs," </title> <type> Tech. Rep. </type> <institution> UUCS-91-013, Dept. of Comp. Science, Univ. of Utah, </institution> <address> Salt Lake City, </address> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: An automatic compiler in <ref> [3] </ref> applies some area optimization techniques to DI `control' modules built from a larger and more complex set of primitives than we propose. However, in each case, these methods are primarily concerned with correctness issues, and often ignore the cost and optimization of the resulting designs.
Reference: [4] <author> R. M. Keller, </author> <title> "Towards a theory of universal speed-independent modules," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-23, </volume> <pages> pp. 21-33, </pages> <month> Jan. </month> <year> 1974. </year>
Reference-contexts: Perhaps surprisingly, there is little existing work on systematic methods for optimizing the area, speed and energy requirements of asynchronous circuits. For instance, Keller <ref> [4] </ref> gave one of the first and best attempts to characterize the class of delay-insensitive (DI) circuits, and also provided a universal set of circuit primitives such that any circuit in this class is realizable as a delay-insensitive network of the primitives, i.e. a DI decomposition into primitives exists. <p> We also show that the set is minimal, i.e. that no subset of these primitives is universal. Moreover, our primitive set is shown to be optimal in its I/O modularity, a measure of DI element complexity introduced by Keller <ref> [4] </ref> in 1974. This is the first set of DI primitives we know of that is optimal in this sense. <p> We found M em to be the simplest module that can support storage of a boolean value, delay-insensitively. M em turns out to be identical to the "G module" described in <ref> [4] </ref>. Choosing a minimal set is more of theoretical significance than practical, although it helps as a starting point for building a library of VLSI delay-insensitive standard-cells. We have found certain other primitives to be very handy in many design situations and also while proving equivalences between sets. <p> Theorem 1: The set fF ork, M erge, T ria, M utexg is of I/O-modularity 6, cardinality 4, and is wbw-universal for Keller's class of DI modules. 2 <ref> [4] </ref> shows that any parallel module M may be realized by serializing the possibly concurrent inputs, and then feeding to an appropriate serial module M', the details of which are not important for the following discussion and for which the reader is directed to that paper. <p> Hence, Theorem 2: The set fF ork, M erge, Select, Sequencerg is wbw-universal for Keller's class of DI modules. 2 To the extent that low I/O-modularity and low car-dinality of a universal set signify simplicity, we have partially answered some pertinent philosophical questions raised in <ref> [4] </ref>, by discovering wbw-universal sets which have a lower I/O-modularity in comparison to Keller's wbw-universal sets with same cardinality. <p> M em is the only module capable of producing one of two events (viz, t0 and t1) each having exactly one and the same immediate predecessor event (viz, t). In other words, it exhibits memory. 2 A weaker version of the following was cited as open in <ref> [4] </ref>. Theorem 6: No finite set of primitives with I/O-modularity less than 5 is universal with respect to the class of serial modules. 2 Proof: A single boolean value cannot be distributed on more than one atomic DI module (i.e., the bit of information is `indivisible'). <p> The primitives are orthogonal in the sense that each one addresses a unique issue given in 2.2. (For a proof why T ria is not redundant in fFork, Merge, Mutex, Triag, see [20].) 3 Switch-level design <ref> [4, 8] </ref> show delay-sensitive implementations for a 2fi2-J oin that are too inefficient in transistor counts and/or require insertion of several delay-elements for a safe operation. Here we show significantly area and time efficient and, yet, robust transistor-design schemes by examples. <p> However, we find the Sequencer useful in some designs adopting 2-phase transition signalling. Similarly, 2fi2-Join serves well as a block for data processing circuits. The fundamental issues of minimality and universality of DI primitives to implement DI specifications are addressed which answer several questions left open in <ref> [4] </ref>. Our primitives allow concurrency as well as avoid arbitration when only a deterministic choice is called for unlike Keller's. Several new modules and constructions are introduced that are helpful in implementing larger modules.
Reference: [5] <author> J. T. Udding, </author> <title> Classification and Composition of Delay-Insensitive Circuits. </title> <type> PhD thesis, </type> <institution> Dept. of Math. and C.S., Eindhoven Univ. of Technology, </institution> <year> 1984. </year>
Reference-contexts: However, no even moderately efficient implementation strategy or methodology was provided for accomplishing this. More recently, <ref> [5] </ref> formalized classes of delay-insensitive circuits in Trace theory by defining closure properties of Trace structures representing delay-insensitive (DI) computations, but did not deal with the synthesis of efficient circuits using these elements. [6] and [7] have developed composition operators and algebras to model speed-independence and to verify equivalence of DI <p> Therefore, all causally unrelated events are concurrent, and there is no notion of simultaneity unlike in many synchronous systems. 4 This trace-structure is not delay-insensitive <ref> [5] </ref>, because it does not contain the trace ba, although ab is a valid trace, and both the symbols are inputs or outputs (hence, not causally related). Prefix-closure, a requirement for DI trace-structures, of S is f*; a; a b; a cg.
Reference: [6] <author> D. L. Dill, </author> <title> Trace Theory for Automatic Hierachical Verification of Speed-Independent Circuits. </title> <publisher> ACM Distinguished Dissertations, MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: However, no even moderately efficient implementation strategy or methodology was provided for accomplishing this. More recently, [5] formalized classes of delay-insensitive circuits in Trace theory by defining closure properties of Trace structures representing delay-insensitive (DI) computations, but did not deal with the synthesis of efficient circuits using these elements. <ref> [6] </ref> and [7] have developed composition operators and algebras to model speed-independence and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and
Reference: [7] <author> M. B. Josephs and J. T. Udding, </author> <title> "An algebra for delay-insensitive circuits," </title> <booktitle> in Proc. International Workshop on Computer Aided Verification (R. </booktitle> <editor> P. Kurshan and E. M. Clarke, eds.), </editor> <volume> vol. </volume> <booktitle> 531 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 343-352, </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: More recently, [5] formalized classes of delay-insensitive circuits in Trace theory by defining closure properties of Trace structures representing delay-insensitive (DI) computations, but did not deal with the synthesis of efficient circuits using these elements. [6] and <ref> [7] </ref> have developed composition operators and algebras to model speed-independence and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and some more
Reference: [8] <author> J. C. Ebergen, </author> <title> Translating Programs into Delay-Insensitive Circuits, </title> <type> vol. </type> <institution> 56 of CWI Tract. Centre for Mathematics and Computer Science, </institution> <year> 1989. </year>
Reference-contexts: of delay-insensitive circuits in Trace theory by defining closure properties of Trace structures representing delay-insensitive (DI) computations, but did not deal with the synthesis of efficient circuits using these elements. [6] and [7] have developed composition operators and algebras to model speed-independence and to verify equivalence of DI specifications, respectively. <ref> [8] </ref> has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and some more complex primitives to compile process algebras into DI circuits. [11, 12, 13, 14] have devised practical syn thesis <p> The primitives are orthogonal in the sense that each one addresses a unique issue given in 2.2. (For a proof why T ria is not redundant in fFork, Merge, Mutex, Triag, see [20].) 3 Switch-level design <ref> [4, 8] </ref> show delay-sensitive implementations for a 2fi2-J oin that are too inefficient in transistor counts and/or require insertion of several delay-elements for a safe operation. Here we show significantly area and time efficient and, yet, robust transistor-design schemes by examples.
Reference: [9] <author> S. Hauck, </author> <title> "Asynchronous design methodologies: An overview," </title> <type> Tech. Rep. TR 93-05-07, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, </address> <year> 1993. </year>
Reference-contexts: closure properties of Trace structures representing delay-insensitive (DI) computations, but did not deal with the synthesis of efficient circuits using these elements. [6] and [7] have developed composition operators and algebras to model speed-independence and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see <ref> [9] </ref>) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and some more complex primitives to compile process algebras into DI circuits. [11, 12, 13, 14] have devised practical syn thesis techniques, yet they impose several restrictions on the
Reference: [10] <author> G. M. Brown, </author> <title> "Towards truly delay-insensitive circuit realizations of process algebras," </title> <booktitle> in Proceedings of the Workshop on Designing Correct Circuits (G. </booktitle> <editor> Jones and M. Sheeran, </editor> <booktitle> eds.), </booktitle> <pages> pp. 120-131, </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: of efficient circuits using these elements. [6] and [7] have developed composition operators and algebras to model speed-independence and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. <ref> [10] </ref> uses most of Keller's primitives and some more complex primitives to compile process algebras into DI circuits. [11, 12, 13, 14] have devised practical syn thesis techniques, yet they impose several restrictions on the specification unrelated to delay-insensitivity or speed-independence and provide very limited means for composing and decomposing DI
Reference: [11] <author> T.-A. Chu, </author> <title> Synthesis of Self-Timed VLSI Circuits from Graph-Theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> June </month> <year> 1987. </year> <month> 9 </month>
Reference-contexts: and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and some more complex primitives to compile process algebras into DI circuits. <ref> [11, 12, 13, 14] </ref> have devised practical syn thesis techniques, yet they impose several restrictions on the specification unrelated to delay-insensitivity or speed-independence and provide very limited means for composing and decomposing DI modules.
Reference: [12] <author> T. H.-Y. Meng, </author> <title> Asynchronous Design for Digital Sig--nal Processing Architectures. </title> <type> PhD thesis, </type> <institution> UC Berkely, </institution> <year> 1988. </year>
Reference-contexts: and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and some more complex primitives to compile process algebras into DI circuits. <ref> [11, 12, 13, 14] </ref> have devised practical syn thesis techniques, yet they impose several restrictions on the specification unrelated to delay-insensitivity or speed-independence and provide very limited means for composing and decomposing DI modules.
Reference: [13] <author> L. Lavagno, C. Moon, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Solving the state assignment problem for signal transition graphs," </title> <booktitle> in Proc. ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 568-572, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and some more complex primitives to compile process algebras into DI circuits. <ref> [11, 12, 13, 14] </ref> have devised practical syn thesis techniques, yet they impose several restrictions on the specification unrelated to delay-insensitivity or speed-independence and provide very limited means for composing and decomposing DI modules.
Reference: [14] <author> S. M. Nowick, M. E. Dean, D. L. Dill, and M. Horowitz, </author> <title> "The design of a high-performance cache controller: a case study in asynchronous synthesis," </title> <booktitle> in Proc. Hawaii International Conf. System Sciences, </booktitle> <volume> vol. I, </volume> <pages> pp. 419-427, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: and to verify equivalence of DI specifications, respectively. [8] has developed grammars (not provably complete, see [9]) to specify DI circuits that induce a syntax-directed translation into a basic set of primitives. [10] uses most of Keller's primitives and some more complex primitives to compile process algebras into DI circuits. <ref> [11, 12, 13, 14] </ref> have devised practical syn thesis techniques, yet they impose several restrictions on the specification unrelated to delay-insensitivity or speed-independence and provide very limited means for composing and decomposing DI modules.
Reference: [15] <author> C. G. Huang, C. G. Jesshope, and I. M. Nedelchev, </author> <title> "Systematic method for synthesising purely delay-insensitive circuits," </title> <booktitle> IEE Proceedings, Part E, Computers and Digital Techniques, </booktitle> <volume> vol. 140, </volume> <pages> pp. 269-276, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: This is the first set of DI primitives we know of that is optimal in this sense. Finally, we demonstrate how to construct some larger DI circuit elements, commonly used in the literature, from our basic set of primitives. <ref> [15] </ref> was pointed out to us which is another attempt to build purely DI-circuits, but they use much more complex primitives (`Demultiplexors') that embody arbitration as well as decision-wait functions.
Reference: [16] <author> J. L. A. van de Snepscheut, </author> <title> Trace Theory and VLSI Design, </title> <booktitle> vol. 200 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference: [17] <author> C. A. R. Hoare, </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference: [18] <author> J. C. Ebergen, </author> <title> "A formal approach to designing delay-insensitive circuits," </title> <journal> Distributed Computing, </journal> <volume> vol. 5, no. 3, </volume> <pages> pp. 107-119, </pages> <year> 1991. </year>
Reference-contexts: For a good introduc tion to trace theory for specifying circuits, see <ref> [18] </ref>. 2 the behaviors in its argument set. The 2-place oper-ation `k' is more complex and denotes concurrency 3 between the two argument sets. The parallel composition of two argument sets of behaviors is the set of all behaviors satisfying the following: 1.
Reference: [19] <author> M. Josephs. </author> <title> Private communication, </title> <year> 1992. </year>
Reference-contexts: The recursive decomposition `terminates' when the present T join quadrant to be decomposed has only one or two ports in each dimension (row or column). In this case the T join is just the central J oin of appropriate type. <ref> [19] </ref> has a decomposition where in place of our BBD, Tree-Mux, T join quadrant, a simple Parity Tree, a pfi2-J oin or 2fip-J oin, and a Join quadrant are used respectively. We have log max (M; N ) sequentially ordered levels of signal flow before an output is produced. <p> At each level i, a (N=2 i )fi2-J oin responds in O (log N i) units of time, making the time complexity of the method of <ref> [19] </ref>, as described to us, equal to ((log max (M; N )) 2 ).) Moreover, since neither a Tree-Mux nor a T J oin uses M erges in their respective decompositions, our method has slightly better area complexity than in [19]. <p> of time, making the time complexity of the method of <ref> [19] </ref>, as described to us, equal to ((log max (M; N )) 2 ).) Moreover, since neither a Tree-Mux nor a T J oin uses M erges in their respective decompositions, our method has slightly better area complexity than in [19]. The (switching) energy expended in a module for a given computation is roughly proportional to the number of transitions made, during that computation, at the input and output ports of all the primitives constituting the module.

References-found: 19

