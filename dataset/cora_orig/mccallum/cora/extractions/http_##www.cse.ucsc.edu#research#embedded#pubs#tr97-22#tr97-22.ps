URL: http://www.cse.ucsc.edu/research/embedded/pubs/tr97-22/tr97-22.ps
Refering-URL: http://www.cse.ucsc.edu/~brucem/
Root-URL: http://www.cse.ucsc.edu
Title: Trimming Java Down to Size UCSC-CRL-97-22  
Author: C. E. McDowell M. R. Allen E. A. Baldwin B. R. Montague M. Montoreano 
Keyword: Java, class unloading, embedded systems, Internet device.  
Date: August 26, 1997  
Abstract: Java is both a programming language and a collection of libraries called packages. Much of the interest in Java is due to the large collection of existing packages which allow complex applications to be built quickly. Perhaps even more important, many programmers find the Java language to be a more desirable language than C or C++, Java's primary competitors. The advantages of Java apply to any application domain that previously used C or C++, including embedded systems. However, typical Java systems today require 4-8 Mbytes of RAM or more, including those Java systems supplied by traditional embedded systems companies. JavaCam is an embedded Java application that can operate with as little as 1 Mbyte of memory. In this paper we describe how we were able to build a system that runs applications that exercise all of the Java language features in as little as 1 Mbyte of memory. 
Abstract-found: 1
Intro-found: 1
Reference: [All97] <author> M. R. Allen. JavaCam: </author> <title> Java Enabled Internet Camera. </title> <institution> M.S. Thesis University of California, Santa Cruz, </institution> <year> 1997. </year>
Reference-contexts: We also made some changes in the handling of garbage collection and added class unloading as discussed below. 4 JavaCam Our first significant application was a network camera <ref> [All97] </ref>. We wanted an example sensor that would be accessible via the Internet and that would demonstrate Java's built in support for dynamically updating code running in the embedded system. Applications for such a device include security and traffic monitoring.
Reference: [Bal97] <author> E. A. Baldwin. </author> <title> Memory Management in Embedded Java. </title> <institution> M.S. Thesis University of California, Santa Cruz, </institution> <year> 1997. </year>
Reference-contexts: For long running or embedded systems without virtual memory, such as JavaCam, class unloading is necessary. We completed the addition of class unloading to our port of JDK1.0.1 about the same time the JDK1.1 was released <ref> [Bal97] </ref>. JDK1.1 now includes class unloading. Our implementation of class unloading behaves similarly to that of JDK1.1, however, we are a bit more conservative about unloading classes.
Reference: [GJS96] <author> J. Gosling, B. Joy, and G. Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year> <month> 6 </month>
Reference: [MB97] <author> C. E. McDowell and E. A. Baldwin. </author> <title> Unloading Java classes that contain static fields. </title> <type> Technical report, </type> <institution> U. of Calif. Santa Cruz, UCSC-CRL-97-18, </institution> <year> 1997. </year>
Reference-contexts: We believe the JDK1.1 implementation violates the requirement of the Java Language Specification which states that for static fields there exists exactly one incarnation of the field, no matter how many instances (possibly zero) of the class may eventually be created. This is discussed in detail in another paper <ref> [MB97] </ref>. 6 Conclusion We have implemented an embedded Internet device in which executing Java programs can be dynamically updated, that is, altered on-the-fly. We can build useful devices in this environment with as little as 1 Mbyte of memory.
Reference: [Mon97a] <author> B. R. Montague. </author> <title> JN external API. </title> <type> Technical report, </type> <institution> U. of Calif. Santa Cruz, UCSC-CRL-97-17, </institution> <year> 1997. </year>
Reference-contexts: The thread routines are such things as sysThreadCreate () and sysThreadResume (). The monitor routines include sysMonitorEnter () and sysMonitorExit (). File routines are the usual read, write, open, close, etc.. The others are equally predictable. The details of the JN API are available in a technical report <ref> [Mon97a] </ref>. JN does not support the dynamic loading and running of programs. Instead, JN is linked with the application as a single image, that is, we link JN with the JVM. The JVM is run by calling the main routine of the Java interpreter.
Reference: [Mon97b] <author> B. R. Montague. JN: </author> <title> OS for an embedded Java network computer. </title> <journal> IEEE Micro, </journal> <volume> 17(3):5460, </volume> <month> May/June </month> <year> 1997. </year>
Reference-contexts: As suggested above, this port includes the complete Java language and all of the core Java packages except java.awt. Our first significant application was a camera that is remotely programmable in Java and is Internet accessible. We call this system JavaCam. 2 JN JN <ref> [Mon97b] </ref> follows a classic soft-real-time architecture informally known as a Cutler kernel. Although he was not the first to use the architecture, David Cutler led teams that used this architecture to implement the kernels for RSX-11, VMS, and NT.
References-found: 6

