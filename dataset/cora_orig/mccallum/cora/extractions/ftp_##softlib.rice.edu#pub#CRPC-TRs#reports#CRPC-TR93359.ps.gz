URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR93359.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: T HE DYPAC SYSTEM A D YNAMIC P ROCESSOR A LLOCATION AND C OMMUNICATION S
Author: Erich Schikuta 
Note: The  
Address: P.O. Box 1892 Houston TX 77251-1892  
Affiliation: Center for Research on Parallel Computation Rice University  
Abstract: In this report a DYnamic Processor Allocation and Communication system (DYPAC system) is presented, which establishes a programming model for the development of parallel programs independently of the underlying parallel system architecture. Aim of the project was to create a programming tool for the development of parallel software systems with a high degree of portability. This was reached by a high level functional framework, which is independent of the underlying operating system and the physical hardware architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [Agnew86] <author> Agnew M., Ward R., </author> <title> The DB ++ relational database management system , Proc. </title> <booktitle> of the EUUG Spring Conf., </booktitle> <address> Italy, </address> <year> 1986 </year>
Reference-contexts: The calculated result tuples of an operation are transferred sequentially along the connection lines to the next operator nodes. The whole evaluation process is done pipelined starting from the leaf nodes in data-driven way (similar to the DB ++ system <ref> [Agnew86] </ref>). The final result is therefore the output of the root node. 6 5. Results and limitations The usage of the DYPAC system for the development of parallel software systems guarantees a high degree of portability between different physical hardware platforms.
Reference: [Cheng93] <author> Cheng D.Y., </author> <title> A survey of parallel programming languages and tools, </title> <type> Report RND-93-005, </type> <institution> NASA, Ames Research Center, Moffet Field CA, </institution> <month> March </month> <year> 1993 </year>
Reference-contexts: A number of packages exist (e.g. Express [Parasoft90], PVM [Dongarra91][Sunderam90], Zipcode [Skjellum92] or the MPI initiative [MPIF93]), which try to provide a common platform for different architectures; but generally they lack in availability, conciseness and simplicity. A quite comprehensive survey of parallel programming tools can be found in <ref> [Cheng93] </ref>. In this paper a dynamic processor allocation and communication system is proposed. It overcomes the mentioned problems and supplies a concise, simple and general process administration and data communication package for the development of highly portable parallel software systems. 2.
Reference: [Date86] <author> Date C., </author> <title> An introduction to database systems, </title> <journal> Vol. </journal> <volume> 1, </volume> <publisher> Addison Wesley, </publisher> <year> 1986 </year>
Reference-contexts: The GFDBS system The DYPAC-system was used for an early port of the Grid File Database System, the GFDBS [Schikuta91], to an Intel IPSC/2 hypercube system. The GFDBS is a specialized data base system <ref> [Date86] </ref>, which supports Gridfiles [Nievergelt84] as internal data structure. The original GFDBS was implemented on a one-processor, UNIX based, workstation.
Reference: [Dongarra91] <author> Dongarra J.J., Geist G.A., Manchek R., </author> <title> Sunderam V.S., A user's guide to PVM, </title> <type> Techn. Rep. </type> <institution> No. ORNL/TM-11826, Oak Ridge National Laboratory, </institution> <month> July </month> <year> 1991 </year>
Reference: [MPIF93] <author> Message Passing Interface Forum, </author> <title> Document for a standard Message-Passing Interface (Draft), </title> <note> to be presented at SCP 93, 1993 [Nievergelt84]Nievergelt J., </note> <author> Hinterberger H., Sevcik K.C., </author> <title> The Grid File: an adaptable, symmetric multikey file structure, </title> <journal> ACM Transactions on Database Systems 9, </journal> <pages> 38-71, </pages> <year> 1984 </year>
Reference-contexts: The frameworks of the proprietary message passing packages of the different parallel hardware architecures differ considerably. A number of packages exist (e.g. Express [Parasoft90], PVM [Dongarra91][Sunderam90], Zipcode [Skjellum92] or the MPI initiative <ref> [MPIF93] </ref>), which try to provide a common platform for different architectures; but generally they lack in availability, conciseness and simplicity. A quite comprehensive survey of parallel programming tools can be found in [Cheng93]. In this paper a dynamic processor allocation and communication system is proposed.
Reference: [Parasoft90] <institution> Parasoft Corp., </institution> <note> Express C user's guide, Version 3.0, </note> <year> 1990 </year>
Reference-contexts: The frameworks of the proprietary message passing packages of the different parallel hardware architecures differ considerably. A number of packages exist (e.g. Express <ref> [Parasoft90] </ref>, PVM [Dongarra91][Sunderam90], Zipcode [Skjellum92] or the MPI initiative [MPIF93]), which try to provide a common platform for different architectures; but generally they lack in availability, conciseness and simplicity. A quite comprehensive survey of parallel programming tools can be found in [Cheng93].
Reference: [Rochkind85] <author> Rochkind M., </author> <title> Advanced UNIX Programming, </title> <booktitle> Prentice-Hall 1985 7 </booktitle>
Reference-contexts: The DYPAC-system tries to guarantees an evenly distributed workload and tries to maximize the throughput of the system. 3.2. Installation of communication lines The interprocess communication interface of the REI is basically similar to the well know standardized communication protocol of UNIX systems <ref> [Rochkind85] </ref>. Each call to a message communication function returns a unique message identifier. These message identifiers allow to check the status of pending transfers. It is also possible to emulate signals with this construct. This provides the possibility to synchronize parallel processes.
Reference: [Schikuta91] <author> Schikuta E., </author> <title> A Grid File Based Highly Parallel Relational Data Base System, </title> <booktitle> Proc. 4th ISMM Int. Conf. Parallel and Distributed Computing and System, </booktitle> <address> Washington, D.C., </address> <year> 1991 </year>
Reference-contexts: The first example describes the implementation of the communication structure in a multiuser database system and the second the inherently parallel evaluation process of a database query. 4.1. The GFDBS system The DYPAC-system was used for an early port of the Grid File Database System, the GFDBS <ref> [Schikuta91] </ref>, to an Intel IPSC/2 hypercube system. The GFDBS is a specialized data base system [Date86], which supports Gridfiles [Nievergelt84] as internal data structure. The original GFDBS was implemented on a one-processor, UNIX based, workstation.
Reference: [Skjellum92] <author> Skejellum A., Smith S.G., Still C.H., </author> <title> The Zipcode systen user's guide - version 1.00, </title> <type> Techn. Rep., </type> <institution> Lawrence Livermore National Laboratory, </institution> <month> Oct. </month> <year> 1992 </year>
Reference-contexts: The frameworks of the proprietary message passing packages of the different parallel hardware architecures differ considerably. A number of packages exist (e.g. Express [Parasoft90], PVM [Dongarra91][Sunderam90], Zipcode <ref> [Skjellum92] </ref> or the MPI initiative [MPIF93]), which try to provide a common platform for different architectures; but generally they lack in availability, conciseness and simplicity. A quite comprehensive survey of parallel programming tools can be found in [Cheng93]. In this paper a dynamic processor allocation and communication system is proposed.

References-found: 9

