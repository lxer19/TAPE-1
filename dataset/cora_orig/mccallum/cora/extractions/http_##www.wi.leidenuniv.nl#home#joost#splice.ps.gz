URL: http://www.wi.leidenuniv.nl/home/joost/splice.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: marcello@cs.leidenuniv.nl and joost@cs.leidenuniv.nl  boasson@signaal.nl and edejong@signaal.nl  
Title: A software architecture for distributed control systems and its transition system semantics  
Author: Marcello M. Bonsangue and Joost N. Kok Maarten Boasson and Edwin de Jong 
Keyword: Coordination models, software architecture, SPLICE, control systems, shared data space, distributed data space, transition system semantics.  
Address: Netherlands  Netherlands  
Affiliation: Department of Computer Science, Leiden University, The  Hollandse Signaalapparaten B.V., The  
Abstract: A software architecture for distributed control systems is presented that is based on a shared data space coordination model. The architecture, named SPLICE, is introduced in two steps. First we give the general structure of the coordination model including the shared data space and the basic operations and we define its semantics by means of a transition system. Second we present a transition system for a refinement of the coordination model: data is distributed and replicated across a communication network using a publication-subscription protocol. We also discuss methods in SPLICE for fault-tolerance and the possibility for on-line system modification and extensions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-M. Andreoli, C.L. Hankin, and D. Le Metayer (eds.) </author> <title> Coordination Programming, mechanisms, models and semantics. </title> <publisher> Imperial College Press, </publisher> <address> London, </address> <year> 1996. </year>
Reference-contexts: Bonsangue was supported by the Stichting Informatica Onderzoek in Nederland within the context of the project no. 612-33-007 `Formal methods and refinement for Coordination Languages'. and static interfaces [17]. With the growing interest in coordination models <ref> [1, 13, 15] </ref>, more emphasis is placed on the organizational aspects of behavior and interaction. Coordination is the process of building programs by gluing together active pieces [11].
Reference: [2] <author> P.H.M. America and J.W. de Bakker. </author> <title> Designing equivalent semantic models for process creation. </title> <booktitle> In Theoretical Computer Science 60, </booktitle> <pages> pages 109-176, </pages> <year> 1988. </year>
Reference-contexts: The advantage is that SPLICE primitives can be embedded in several programming languages, possibly members of different classes of programming paradigms. The configuration of both transition systems represent a set of several concurrently executing processes. This representation, introduced for a transition system semantics of a parallel object oriented language <ref> [2, 3] </ref>, guarantees commu-tativity and associativity of the parallel composition. We used this representation because it allows for an easy description of dynamic process creation.
Reference: [3] <author> P.H.M. America, J.W. de Bakker, J.N. Kok, and J.J.M.M. Rutten. </author> <title> Operational semantics of a parallel object-oriented language. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 194-208, </pages> <year> 1986. </year>
Reference-contexts: The advantage is that SPLICE primitives can be embedded in several programming languages, possibly members of different classes of programming paradigms. The configuration of both transition systems represent a set of several concurrently executing processes. This representation, introduced for a transition system semantics of a parallel object oriented language <ref> [2, 3] </ref>, guarantees commu-tativity and associativity of the parallel composition. We used this representation because it allows for an easy description of dynamic process creation.
Reference: [4] <editor> F. Arbab, J.W. de Bakker, M.M. Bonsangue, J.J.M.M. Rutten, and A. Scutella. </editor> <title> A transition system semantics for a control-driven coordination language. </title> <note> In preparation. </note>
Reference-contexts: Both transition systems are defined independently from the host languages in which computations take place. We have used an approach similar to the one adopted in <ref> [4] </ref> and different from the the syntax-based approach in [14]. The advantage is that SPLICE primitives can be embedded in several programming languages, possibly members of different classes of programming paradigms. The configuration of both transition systems represent a set of several concurrently executing processes.
Reference: [5] <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> The Gamma model and its discipline of programming. </title> <booktitle> In Science of com-put&lt;er programming 15, </booktitle> <pages> pages 55-77, </pages> <year> 1990. </year>
Reference-contexts: The architecture, named SPLICE, employs a data-driven coordination model that is based on a shared data space; in this respect SPLICE bears close resemblance to coordination models and languages like Linda [10], Gamma <ref> [5] </ref>, Log [18] ImpUnity [16], and Swarm [21] (the last two being based on the UNITY language [12]). The semantics and implementation of the coordination primitives of SPLICE, however, are strongly tailored towards the specific requirements of distributed control systems.
Reference: [6] <author> M. </author> <title> Boasson. </title> <journal> Control systems software. In IEEE Transactions on Automatic Control 38:7, </journal> <pages> pages 1094-1107, </pages> <year> 1993. </year>
Reference-contexts: SPLICE has been applied in the development of commercially available command-and-control, and traffic management systems. These systems consist of some 1000 application processes running on close to 100 processors interconnected by a hybrid communication network <ref> [6] </ref>. We formally defined the behaviour of SPLICE using transition systems in the style of Plotkin [20] for the shared data space model and the distributed data space model. Both transition systems are defined independently from the host languages in which computations take place.
Reference: [7] <author> M. Boasson. </author> <title> Complexity may be our own fault. </title> <booktitle> In IEEE Software, </booktitle> <month> March </month> <year> 1993. </year>
Reference: [8] <author> M. Boasson (ed.). </author> <booktitle> Software Architecture. In IEEE Software, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: An architecture defines the overall structure of the system in terms of components and an organizational principle that defines possible interconnections between these components. In addition, an architecture prescribes a set of rules and constraints governing the behavior of components and their interaction <ref> [8] </ref>. Traditionally, software architectures have been primarily concerned with structural organization fl The research of Marcello M. Bonsangue was supported by the Stichting Informatica Onderzoek in Nederland within the context of the project no. 612-33-007 `Formal methods and refinement for Coordination Languages'. and static interfaces [17].
Reference: [9] <author> F.S. de Boer, J.N. Kok, C. Palamidessi, and J.J.M.M. Rutten. </author> <title> A paradigm for asynchronous communication and its application to concurrent constraint programming. </title> <editor> In K.R. Apt, J.W. de Bakker and J.J.M.M. Rutten, editors, </editor> <title> Logic programming languages: constraints, functions, and objects, </title> <booktitle> Logic Programming Series, </booktitle> <pages> pages 82-114, </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: There may be different ways to collect the information about the behaviour of a program from a transition system. Further work is needed to formalize an observational equivalence between SPLICE processes. The general semantic theory of asynchronous communication as formulated in <ref> [9] </ref> can be used to define an operational semantics which records the internal states of each active process. The semantics can abstract from finite repetition of states, that is, we can abstract from the concept of a global clock that is present in the transition system model.
Reference: [10] <author> N. Carriero and D. Gelernter. </author> <title> Linda in context. </title> <booktitle> In Communications of the ACM 32:4, </booktitle> <pages> pages 444-458, </pages> <year> 1989. </year>
Reference-contexts: The architecture, named SPLICE, employs a data-driven coordination model that is based on a shared data space; in this respect SPLICE bears close resemblance to coordination models and languages like Linda <ref> [10] </ref>, Gamma [5], Log [18] ImpUnity [16], and Swarm [21] (the last two being based on the UNITY language [12]). The semantics and implementation of the coordination primitives of SPLICE, however, are strongly tailored towards the specific requirements of distributed control systems. <p> Processes concurrently act on the shared data space. There is no direct interaction between processes; all communication takes place through the shared data space by reading and writing data elements. In this sense SPLICE bears strong resemblance to the coordination model Linda <ref> [10] </ref> where active entities are coordinated by means of a shared data space. However, in SPLICE, data is not treated as resource but as information, similarly to the view adopted by the concurrent constraint paradigm [22]. Thus a process cannot delete data elements from the shared data space.
Reference: [11] <author> N. Carriero and D. Gelernter. </author> <title> Coordination languages and their significance. </title> <booktitle> In Communications of the ACM 35:2, </booktitle> <pages> page 97-107, </pages> <year> 1992. </year>
Reference-contexts: With the growing interest in coordination models [1, 13, 15], more emphasis is placed on the organizational aspects of behavior and interaction. Coordination is the process of building programs by gluing together active pieces <ref> [11] </ref>. Coordination models can be classified as either data-driven or control-driven depending on how coordination is achieved: by manipulating data values shared among all active processes or by dynamically evolving the interconnections among the active processes as a consequence of observations of their state changes [19].
Reference: [12] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design: a Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The architecture, named SPLICE, employs a data-driven coordination model that is based on a shared data space; in this respect SPLICE bears close resemblance to coordination models and languages like Linda [10], Gamma [5], Log [18] ImpUnity [16], and Swarm [21] (the last two being based on the UNITY language <ref> [12] </ref>). The semantics and implementation of the coordination primitives of SPLICE, however, are strongly tailored towards the specific requirements of distributed control systems. In this paper we present the semantics of SPLICE by means of transition systems.
Reference: [13] <editor> P. Ciancarini and C. Hankin (eds.). </editor> <booktitle> Coordination Languages and Models, Proceedings of the first international conference COORDINATION'96, Volume 1061 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Bonsangue was supported by the Stichting Informatica Onderzoek in Nederland within the context of the project no. 612-33-007 `Formal methods and refinement for Coordination Languages'. and static interfaces [17]. With the growing interest in coordination models <ref> [1, 13, 15] </ref>, more emphasis is placed on the organizational aspects of behavior and interaction. Coordination is the process of building programs by gluing together active pieces [11].
Reference: [14] <author> P. Ciancarini, K. Jensen, and D. Yankelevich. </author> <title> On the operational semantics of a coordination language. </title> <editor> In P. Ciancarini, O.Nierstrasz, and A. Yonezawa, editors, </editor> <booktitle> Object-Based Models and Languages for Concurrent Systems, volume 924 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: More generally, if V does not contain data elements of the same sort and with the same key field then d V is a set with one element. We can now add the following rule which says that there may be as many control threads as processes <ref> [14] </ref>. If at the same time a process reads a data element from the shared data space and another process overwrites this data element, then the first has precedence over the second. <p> Both transition systems are defined independently from the host languages in which computations take place. We have used an approach similar to the one adopted in [4] and different from the the syntax-based approach in <ref> [14] </ref>. The advantage is that SPLICE primitives can be embedded in several programming languages, possibly members of different classes of programming paradigms. The configuration of both transition systems represent a set of several concurrently executing processes.
Reference: [15] <editor> D. Garlan and D. Le Metayer (eds.). </editor> <booktitle> Coordination Languages and Models, Proceedings of the second international conference COORDINATION'97, Volume 1282 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Bonsangue was supported by the Stichting Informatica Onderzoek in Nederland within the context of the project no. 612-33-007 `Formal methods and refinement for Coordination Languages'. and static interfaces [17]. With the growing interest in coordination models <ref> [1, 13, 15] </ref>, more emphasis is placed on the organizational aspects of behavior and interaction. Coordination is the process of building programs by gluing together active pieces [11].
Reference: [16] <author> H. Goeman, J.N. Kok, K. Sere and R. Udink. </author> <title> Coordination in the ImpUnity framework. </title> <booktitle> In [13], </booktitle> <pages> pages 215-230, </pages> <year> 1996. </year>
Reference-contexts: The architecture, named SPLICE, employs a data-driven coordination model that is based on a shared data space; in this respect SPLICE bears close resemblance to coordination models and languages like Linda [10], Gamma [5], Log [18] ImpUnity <ref> [16] </ref>, and Swarm [21] (the last two being based on the UNITY language [12]). The semantics and implementation of the coordination primitives of SPLICE, however, are strongly tailored towards the specific requirements of distributed control systems. In this paper we present the semantics of SPLICE by means of transition systems.
Reference: [17] <author> K. Jackson and M. Boasson. </author> <title> The importance of good architectural style. </title> <booktitle> In Proceedings of the workshop of the IEEE on Engineering of Computer Based Systems, </booktitle> <address> Tucson, </address> <year> 1995. </year>
Reference-contexts: Traditionally, software architectures have been primarily concerned with structural organization fl The research of Marcello M. Bonsangue was supported by the Stichting Informatica Onderzoek in Nederland within the context of the project no. 612-33-007 `Formal methods and refinement for Coordination Languages'. and static interfaces <ref> [17] </ref>. With the growing interest in coordination models [1, 13, 15], more emphasis is placed on the organizational aspects of behavior and interaction. Coordination is the process of building programs by gluing together active pieces [11].
Reference: [18] <author> J.-M. Jacquet and K. De Bosschere. </author> <title> On the semantics of Log. </title> <booktitle> In Future Generation Computer Systems, </booktitle> <year> 1994. </year>
Reference-contexts: The architecture, named SPLICE, employs a data-driven coordination model that is based on a shared data space; in this respect SPLICE bears close resemblance to coordination models and languages like Linda [10], Gamma [5], Log <ref> [18] </ref> ImpUnity [16], and Swarm [21] (the last two being based on the UNITY language [12]). The semantics and implementation of the coordination primitives of SPLICE, however, are strongly tailored towards the specific requirements of distributed control systems.
Reference: [19] <author> G.A. Papadopoulos and F. Arbab. </author> <title> Coordination models and languages. </title> <publisher> In Academic Press 48, </publisher> <year> 1998. </year>
Reference-contexts: Coordination models can be classified as either data-driven or control-driven depending on how coordination is achieved: by manipulating data values shared among all active processes or by dynamically evolving the interconnections among the active processes as a consequence of observations of their state changes <ref> [19] </ref>. Processes in a data-driven coordination model typically communicate via a shared data space. The structure of a data space strongly depends on how data is treated by the coordination model.
Reference: [20] <author> G.D. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: We will use a structural approach to the definition of transition systems, meaning that the transition relation will be described by induction on the structure of SPLICE processes <ref> [20] </ref>. The plan of the paper is as follows. First we define the general structure of the SPLICE coordination model, including the shared data space and the coordination primitives. A transition system is presented which formally describes the behaviour of a SPLICE process. <p> These systems consist of some 1000 application processes running on close to 100 processors interconnected by a hybrid communication network [6]. We formally defined the behaviour of SPLICE using transition systems in the style of Plotkin <ref> [20] </ref> for the shared data space model and the distributed data space model. Both transition systems are defined independently from the host languages in which computations take place. We have used an approach similar to the one adopted in [4] and different from the the syntax-based approach in [14].
Reference: [21] <author> G.-C. Roman and H.C. Cunningham. </author> <title> Mixed programming metaphors in a shared data space model of con-currency. </title> <journal> In IEEE Transactions of Software Engineering 16:12, </journal> <pages> pages 1361-1373, </pages> <year> 1990. </year>
Reference-contexts: The architecture, named SPLICE, employs a data-driven coordination model that is based on a shared data space; in this respect SPLICE bears close resemblance to coordination models and languages like Linda [10], Gamma [5], Log [18] ImpUnity [16], and Swarm <ref> [21] </ref> (the last two being based on the UNITY language [12]). The semantics and implementation of the coordination primitives of SPLICE, however, are strongly tailored towards the specific requirements of distributed control systems. In this paper we present the semantics of SPLICE by means of transition systems.

References-found: 21

