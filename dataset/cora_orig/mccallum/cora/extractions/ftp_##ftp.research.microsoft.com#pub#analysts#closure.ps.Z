URL: ftp://ftp.research.microsoft.com/pub/analysts/closure.ps.Z
Refering-URL: http://www.research.microsoft.com/~rusa/background.html
Root-URL: http://www.research.microsoft.com
Title: A Polyvariant Closure Analysis with Dynamic Widening  
Author: Bjarne Steensgaard Morten Marquard 
Note: Work done while both authors were  
Address: One Microsoft Way Oslo Plads 2 Redmond, WA 98052 Copenhagen, Denmark  
Affiliation: Microsoft Research Andersen Consulting  at Department of Computer Science, University of Copenhagen (DIKU).  
Abstract: Closure analyses (or call graph analyses) approximate for each call site the set of closures that may be applied at that call site. Most closure analyses suffer from the "false return problem" caused by conflating information from multiple call sites. Monovari-ant analyses conflates information from all call sites where a given (abstract) closure may be applied. Polyvariant analyses conflate less information than do the monovariant analyses, but typically still conflate more information than necessary to ensure termination. We present a polyvariant closure analysis algorithm that avoids conflating information from multiple call sites, when it can be shown that not conflating information does not jeopardize termination of the algorithm, thus improving the accurary of the analysis Termination of abstract interpretation analyses is usually ensured by using monotonic transfer functions over either finite domains or infinite domains without infinite ascending chains. The analysis we present uses domains with infinite ascending chains. We use widening in loops to ensure termination. Where to apply widening is normally determined a pri ori. Because the call graph is being built by the analysis, we show how to dynamically detect when to use widening and how to achieve the effect of widening. 
Abstract-found: 1
Intro-found: 1
Reference: [Aye93] <author> Andy Ayers. </author> <title> Abstract Analysis and Optimization of Scheme. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Section 8 lists our conclusions. 2 Related work Monovariant closure analysis algorithms based on abstract interpretation are commonplace now. The foundations were laid by Rozas [Roz84] and Sestoft [Ses88] (for a combinator 2 language, but modified for Scheme by Bondorf [Bon90]). Ayers has explored efficient implementation of such analyses <ref> [Aye93] </ref>. Henglein has developed a very efficient (almost linear complexity) but slightly less accurate mono-variant closure analysis based on unification techniques rather than abstract interpretation [Hen91]. There are a few examples of polyvariant closure analysis algorithms.
Reference: [Bon90] <author> A. Bondorf. </author> <title> Self-Applicable Partial Evaluation. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Copen-hagen, Denmark, </institution> <year> 1990. </year> <note> Revised version: DIKU Report 90/17. </note>
Reference-contexts: Section 8 lists our conclusions. 2 Related work Monovariant closure analysis algorithms based on abstract interpretation are commonplace now. The foundations were laid by Rozas [Roz84] and Sestoft [Ses88] (for a combinator 2 language, but modified for Scheme by Bondorf <ref> [Bon90] </ref>). Ayers has explored efficient implementation of such analyses [Aye93]. Henglein has developed a very efficient (almost linear complexity) but slightly less accurate mono-variant closure analysis based on unification techniques rather than abstract interpretation [Hen91]. There are a few examples of polyvariant closure analysis algorithms.
Reference: [CC77] <author> Patrick Cousot and Radhia Cousot. </author> <title> Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fix-points. </title> <booktitle> In Proceedings of the Fourth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 238-252, </pages> <address> Los Angeles, </address> <month> January </month> <year> 1977. </year>
Reference-contexts: Our algorithm uses monotonic functions over a domain with infinite ascending chains. Cousot and Cousot showed how to use a widening operator to ensure termination for analyses over domains with infinite ascending chains <ref> [CC77] </ref>. The widening operator maps the elements of an infinite chain of abstract values onto a finite number of elements. Before abstract interpretation is commenced, a number of edges are selected where the widening operation must be applied.
Reference: [Ce91] <editor> William Clinger and Jonathan Rees (editors). </editor> <title> Revised 4 report on the algorithmic language Scheme, </title> <month> November </month> <year> 1991. </year>
Reference-contexts: Dynamic detection of loops in call graphs to avoid divergence has also been used independently in the online partial evaluator FUSE [WCRS91] and an online partial evaluator developed by the authors [MS92]. 3 The Language We present the algorithm for a functional subset of Scheme <ref> [Ce91] </ref>.
Reference: [dB72] <author> N.G. de Bruijn. </author> <title> Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the church-rosser theorem. </title> <journal> Proc. of the Koninklijke Neder-landse Akademie van Wetenschappen, </journal> <volume> 75(5) </volume> <pages> 381-392, </pages> <year> 1972. </year>
Reference-contexts: Lookup in such environments are very easy when using de Bruijn indices <ref> [dB72] </ref>. The P operator is the Hoare power domain operator. The partial order on product domains is the usual extension of the partial order on the elements. Elements of the ResDescr domain describe approximations to the return values of function applications.
Reference: [Har89] <author> Williams Ludwell Harrison III. </author> <title> The in-terprocedural analysis and automatic parallelization of Scheme programs. </title> <journal> Lisp and Symbolic Computation, </journal> 2(3/4):179-396, 1989. 
Reference-contexts: Shivers' nCFA algorithms use a single abstract closure to represent all closures created from the same lambda expression but uses fixed-length call strings to disambiguate argument lists [Shi91]. Harrison developed a framework for performing analyses that was based on procedure strings (call strings) <ref> [Har89] </ref>. His framework can be considered to include a polyvariant closure analysis much like the one presented here. His method is however very different from ours and involves major changes to abstract values whenever they are propagated across call/lambda boundaries. Ayers', Shivers' and Harrison's work all handle side effects.
Reference: [Hen91] <author> Fritz Henglein. </author> <title> Efficient type inference for higher-order binding-time analysis. </title> <booktitle> In Functional Programming and Computer Architecture, </booktitle> <pages> pages 448-472, </pages> <year> 1991. </year>
Reference-contexts: Ayers has explored efficient implementation of such analyses [Aye93]. Henglein has developed a very efficient (almost linear complexity) but slightly less accurate mono-variant closure analysis based on unification techniques rather than abstract interpretation <ref> [Hen91] </ref>. There are a few examples of polyvariant closure analysis algorithms. Shivers' nCFA algorithms use a single abstract closure to represent all closures created from the same lambda expression but uses fixed-length call strings to disambiguate argument lists [Shi91].
Reference: [MS92] <author> Morten Marquard and Bjarne Steens-gaard. </author> <title> Partial evaluation of an object-oriented imperative language. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Copenhagen, Den-mark, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: We show how to dynamically determine where to apply a widening operation. Dynamic detection of loops in call graphs to avoid divergence has also been used independently in the online partial evaluator FUSE [WCRS91] and an online partial evaluator developed by the authors <ref> [MS92] </ref>. 3 The Language We present the algorithm for a functional subset of Scheme [Ce91].
Reference: [Roz84] <author> G. J. Rozas. </author> <title> Liar: an Algol-like compiler for Scheme. </title> <type> Bachelor's Thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1984. </year>
Reference-contexts: Section 6 describes extra mechanisms needed to ensure termination of the algorithm, and Section 7 describes the final closure analysis algorithm. Section 8 lists our conclusions. 2 Related work Monovariant closure analysis algorithms based on abstract interpretation are commonplace now. The foundations were laid by Rozas <ref> [Roz84] </ref> and Sestoft [Ses88] (for a combinator 2 language, but modified for Scheme by Bondorf [Bon90]). Ayers has explored efficient implementation of such analyses [Aye93]. Henglein has developed a very efficient (almost linear complexity) but slightly less accurate mono-variant closure analysis based on unification techniques rather than abstract interpretation [Hen91].
Reference: [Ses88] <author> Peter Sestoft. </author> <title> Replacing function parameters by global variables. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Copenhagen, Den-mark, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: Section 6 describes extra mechanisms needed to ensure termination of the algorithm, and Section 7 describes the final closure analysis algorithm. Section 8 lists our conclusions. 2 Related work Monovariant closure analysis algorithms based on abstract interpretation are commonplace now. The foundations were laid by Rozas [Roz84] and Sestoft <ref> [Ses88] </ref> (for a combinator 2 language, but modified for Scheme by Bondorf [Bon90]). Ayers has explored efficient implementation of such analyses [Aye93]. Henglein has developed a very efficient (almost linear complexity) but slightly less accurate mono-variant closure analysis based on unification techniques rather than abstract interpretation [Hen91].
Reference: [Shi91] <author> Olin Shivers. </author> <title> Control-Flow Analysis of Higher-Order Languages or Taming 12 Lambda. </title> <type> PhD thesis, </type> <institution> School of Com--puter Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> May </month> <year> 1991. </year> <month> CMU-CS-91-145. </month>
Reference-contexts: Polyvariant closure analyses conflate less information. An important class of polyvari-ant closure analyses is exemplified by Shivers' 1CFA (and 2CFA, 3CFA, ...) algorithm <ref> [Shi91] </ref>. These analyses still represent all closures created from the same lambda expression by a single abstract closure. However, information from all call sites is not necessarily conflated. <p> There are a few examples of polyvariant closure analysis algorithms. Shivers' nCFA algorithms use a single abstract closure to represent all closures created from the same lambda expression but uses fixed-length call strings to disambiguate argument lists <ref> [Shi91] </ref>. Harrison developed a framework for performing analyses that was based on procedure strings (call strings) [Har89]. His framework can be considered to include a polyvariant closure analysis much like the one presented here.
Reference: [WCRS91] <author> Daniel Weise, Roland Conybeare, Erik Ruf, and Scott Seligman. </author> <title> Automatic online partial evaluation. </title> <booktitle> Proceedings of the Conference on Functional Programming Languages and Computer Architecture. </booktitle> <month> June </month> <year> 1991. </year> <month> 13 </month>
Reference-contexts: We show how to dynamically determine where to apply a widening operation. Dynamic detection of loops in call graphs to avoid divergence has also been used independently in the online partial evaluator FUSE <ref> [WCRS91] </ref> and an online partial evaluator developed by the authors [MS92]. 3 The Language We present the algorithm for a functional subset of Scheme [Ce91].
References-found: 12

