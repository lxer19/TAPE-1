URL: http://www-ksl.stanford.edu/knowledge-sharing/papers/shade-cera.ps
Refering-URL: http://www-ksl.stanford.edu/knowledge-sharing/papers/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: kuokka@aic.lockheed.com, mcguire@aic.lockheed.com  weber@eitech.com, tenenbaum@eitech.com  gruber@sumex.stanford.edu, olsen@sunrise.stanford.edu  
Title: SHADE: Technology for Knowledge-Based Collaborative Engineering  
Author: James G. McGuire Daniel R. Kuokka Jay C. Weber Jay M. Tenenbaum Thomas R. Gruber Gregory R. Olsen 
Address: 3251 Hanover Street, O/96-20 B/254F Palo Alto, Ca. 94304-1191 USA  459 Hamilton Avenue Palo Alto, Ca. 94301 USA  Stanford, Ca. 94305 USA  
Affiliation: Lockheed Palo Alto Research Laboratories  Enterprise Integration Technologies  Stanford Knowledge Systems Laboratory  
Abstract: Effective information sharing and decision coordination are vital to collaborative product development and integrated manufacturing. However, typical special-purpose CAE systems tend to isolate information at tool boundaries, and typical integrated CAE systems tend to limit flexibility and process innovation. The SHADE (SHAred Dependency Engineering) project strikes a balance between these undesirable extremes by supporting reconfigurable exchange of engineering knowledge among special-purpose CAE systems. SHADE's approach has three main components: a shared knowledge representation (language and domain-specific vocabulary), protocols supporting information exchange for change notification and subscription, and facilitation services for content-directed routing and intelligent matching of information consumers and pro ducers.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Cutkosky and J. Tenenbaum, </author> <title> "Toward a Framework for Concurrent Design", </title> <journal> International Journal of Systems Automation: Research and Applications, </journal> <volume> Vol. 1, No. 3, </volume> <year> 1992. </year>
Reference-contexts: Each team was supported by its own computational environment linked via the PACT framework [7,24] over the Internet. Each team modeled a different aspect of the manipulator from a different engineering discipline: controller software (NVisage [26]), rigid body dynamics (NextCut <ref> [1] </ref>), circuitry (DesignWorld [6]), and sensors and power system modeling (DME [13]). Several collaborative design tasks were performed including dynamics model exchange between the controls agent and dynamics agent, fine-grained cooperative distributed simulation exercising each aspect supported by the four tools, and finally design modifications suggested by the simulation.
Reference: [2] <author> Cutkosky, Engelmore, Fikes, Gruber, Genesereth, Mark, Tenenbaum, and Weber, </author> <title> "PACT: An experiment in integrating concurrent engineering systems", </title> <journal> In IEEE Computer, </journal> <volume> Vol. 26, No. 1, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: This section describes the major applications supported. 4.1 PACT SHADE's initial application focus was on PACT (Palo Alto Collaborative Testbed), a set of experiments in exercising knowledge sharing techniques among existing concurrent engineering tools <ref> [2] </ref>. The challenge in PACT was to take four existing systems, each already a specialized framework, and to integrate them via a flexible, higher-level framework. To ground the experiments, design scenarios that would be thwarted by tool isolation were proposed.
Reference: [3] <author> M. Davis, R. Evans, G. Davis, and G. Jones, </author> <title> "Simulation Based Design for Submarines", </title> <booktitle> Proceedings of the Submarine Technology Symposium, </booktitle> <month> May 11-13 </month> <year> 1993. </year> <institution> JHU/APL, Columbia, Md. </institution>
Reference-contexts: The VT ontologies build upon the engineering math ontologies produced by the SHADE project for the exchange of behavior models and data. The design task adds the additional requirements of representing structure and design constraints declaratively. 4.4 Simulation Based Design for Submarines Simulation Based Design (SBD) <ref> [3] </ref> is an ARPA-sponsored initiative to develop and demonstrate major improvements in the design process for submarines and surface ships. This will result in dramatic changes in the handling of information and the process of design.
Reference: [4] <author> Finin, Weber, Wiederhold, Genesereth, Fritzson, McGuire, McKay, Shapiro, Pelavin, and Beck, </author> <title> "Specification of the KQML Agent Communication Language. Official Document of the DARPA Knowledge Sharing Initiative's External Interfaces Working Group", Enterprise Integration Technologies, Inc. </title> <type> Tech Report 92-04. </type> <year> 1992. </year>
Reference-contexts: For any standard to be successful, it must be widely accepted. Therefore, a major part of the SHADE effort is an ongoing contribution to the Knowledge Query and Manipulation Language (KQML) <ref> [4] </ref> being defined by the External Interfaces working group of the ARPA Knowledge Sharing Initiative. SHADE's contribution to the KQML effort was motivated by our experiments in concurrent engineering (CE).
Reference: [5] <author> M. Genesereth and N. Nilsson, </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers. </publisher> <year> 1987. </year> <month> 14 </month>
Reference-contexts: A conceptualization is defined by the objects, concepts, and other entities that are presumed to exist in some area of interest and the relationships that hold among them <ref> [5] </ref>. A conceptualization is an abstract, simplified view of the world that we wish to represent for some purpose. Since the set of objects and relationships in an agent are reflected in the representational vocabulary, an ontology can be given as a set of definitions for this shared vocabulary.
Reference: [6] <author> M. Genesereth, "Designworld", </author> <booktitle> Proceedings of the IEEE Conference on Robotics and Automation. </booktitle> <year> 1991. </year>
Reference-contexts: Each team was supported by its own computational environment linked via the PACT framework [7,24] over the Internet. Each team modeled a different aspect of the manipulator from a different engineering discipline: controller software (NVisage [26]), rigid body dynamics (NextCut [1]), circuitry (DesignWorld <ref> [6] </ref>), and sensors and power system modeling (DME [13]). Several collaborative design tasks were performed including dynamics model exchange between the controls agent and dynamics agent, fine-grained cooperative distributed simulation exercising each aspect supported by the four tools, and finally design modifications suggested by the simulation.
Reference: [7] <author> M. Genesereth, </author> <title> "An Agent-Based Framework for Software Interoperability", </title> <booktitle> Proceedings of the DARPA Software Technology Conference, </booktitle> <publisher> Meridian Corporation, </publisher> <address> Arling-ton, VA. </address> <year> 1992. </year> <institution> Also Computer Science Department, Stanford University Tech Report Logic-92-2. </institution>
Reference: [8] <author> M. Genesereth and R. Fikes, </author> <title> "Knowledge Interchange Format, Version 3.0 Reference Manual", </title> <institution> Computer Science Department, Stanford University, </institution> <note> Tech Report Logic-92-1. </note>
Reference-contexts: The common ontology, and the sentences using that ontology, must be representable in a implementation- and agent-independent format. The format used in SHADE is called KIF (Knowledge Interchange Format) <ref> [8] </ref>, which is a product of the ARPA Knowledge Sharing Initiative. KIF is a machine-readable version of first order predicate calculus, with extensions to enhance expressiveness. KIF is the content language for the SHADE framework.
Reference: [9] <author> T. Gruber, </author> <title> "A Translation Approach to Portable Ontology Specifications", </title> <editor> In R. Mizoguchi (editor), </editor> <booktitle> Proceedings of the Second Japanese Knowledge Acquisition for Knowledge-Based Systems Workshop, </booktitle> <address> Kobe, Japan. </address> <year> 1992. </year> <note> To appear in the Journal of Knowledge Acquisition. </note>
Reference-contexts: Since individual engineering tools have specialized internal formats, there is a need to maintain portable ontologies by providing translation mechanisms into and out of a shared representation. Consequently, SHADE is using the Ontolingua <ref> [9] </ref> system to develop and maintain its ontologies. Ontolingua provides a layer on top of KIF for writing definitions and translating them into implemented representation systems. Ontolingua can translate class, relation, function, and object definitions into several knowledge representation systems.
Reference: [10] <author> T. Gruber, J. Tenenbaum, and J. Weber, </author> <title> "Towards a knowledge medium for collaborative product development", </title> <editor> In J.S. Gero, editor, </editor> <booktitle> Proceedings of the Second International Conference on Artificial Intelligence in Design, </booktitle> <address> Pittsburgh, PA, </address> <pages> pages 413-432, </pages> <address> 1992. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference: [11] <author> T. Gruber and D. Russell, </author> <title> "Generative design rationale: Beyond the record and replay paradigm", </title> <type> Technical Report KSL 92-59, </type> <institution> Knowledge Systems Laboratory, Stanford University. </institution> <note> To appear in Thomas Moran and John H. </note> <editor> Carroll (editors), </editor> <title> Design Rationale, </title> <publisher> Lawrence Erlbaum. </publisher>
Reference: [12] <author> T. Gruber, </author> <title> "Toward Principles for the Design of Ontologies Used for Knowledge Sharing , International Workshop on Formal Ontology in Conceptual Analysis and Knowledge Representation, </title> <address> Padova, Italy. </address> <year> 1993. </year>
Reference: [13] <author> Y. Iwasaki and C. </author> <title> Low, "Model Generation and Simulation of Device Behavior with Continuous and Discrete Changes", </title> <journal> Intelligent Systems Engineering, </journal> <volume> Vol. 1 No. 2, </volume> <year> 1993. </year>
Reference-contexts: Each team modeled a different aspect of the manipulator from a different engineering discipline: controller software (NVisage [26]), rigid body dynamics (NextCut [1]), circuitry (DesignWorld [6]), and sensors and power system modeling (DME <ref> [13] </ref>). Several collaborative design tasks were performed including dynamics model exchange between the controls agent and dynamics agent, fine-grained cooperative distributed simulation exercising each aspect supported by the four tools, and finally design modifications suggested by the simulation.
Reference: [14] <author> Kuokka, Livezey, Simoudis, and Hood, </author> <title> "Knowledge-Centered Design", </title> <note> Lockheed Artificial Intelligence Center Technical Report, </note> <year> 1993. </year>
Reference: [15] <author> M. Linster, </author> <title> "Sisyphus '92: Models of Problem Solving", </title> <type> GMD-Arbeitspapiere 630. </type> <institution> GMD, </institution> <address> SchloB Birlinghoven, Postfach 13 16, W-5205, Sankt Augustin 1. ISSN 0723-0508. </address>
Reference-contexts: Even in this simple scenario, there is significant additional communication between agents before the results of the change reach quiescence. 4.3 VT SHADE technology for specification of formal ontologies of common conceptualizations has also been applied in an experiment by the knowledge acquisition community called Sisy-phus/VT <ref> [15] </ref>. Sisyphus is the name of an ongoing experiment in which participants &gt;from several research groups are building knowledge system architectures and knowledge acquisition tools for specific problems in order to compare their methods, architectures, and results.
Reference: [16] <author> D. Mostow, </author> <title> "Toward Better Models of the Design Process", </title> <journal> AI Magazine, </journal> <volume> Vol. 6, No. 1, </volume> <year> 1988. </year>
Reference: [17] <author> S. Marcus, J. Stout, and J. McDermott, </author> <title> "VT: An Expert Elevator Designer that Uses Knowledge-Based Backtracking", </title> <journal> AI Magazine, </journal> <pages> pp. 95-111. </pages> <year> 1988. </year>
Reference-contexts: The experiment has focused on two problems: a simple office-assignment task; and elevator design, a configuration problem with many parameters and constraints. The elevator domain is well understood, and has been the subject of research such as VT <ref> [17] </ref>, an expert system for elevator design, and the SALT system for knowledge acquisition [18]. The task and 12 domain have also been analyzed and a thorough English-language description has been pub-lished [27].
Reference: [18] <author> S. Marcus and J. McDermott, </author> <title> "SALT: A Knowledge Acquisition Language for Propose-and-Revise Systems", </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 39, No. 1, </volume> <pages> pp. 1-38, </pages> <year> 1989. </year>
Reference-contexts: The elevator domain is well understood, and has been the subject of research such as VT [17], an expert system for elevator design, and the SALT system for knowledge acquisition <ref> [18] </ref>. The task and 12 domain have also been analyzed and a thorough English-language description has been pub-lished [27]. For the purposes of the Sisyphus/VT experiment, the domain is complex and large enough to preclude simplistic approaches (brute-force search or simple optimization techniques).
Reference: [19] <author> Mark, Schlossberg, Ogata, MacGregor, Kuokka, Hyde, and Livezey, </author> <title> "The Cosmos System for Distributed Design Negotiation Support" Lockheed Artificial Intelligence Center Technical Report. 1993. 15 [20 J. Fulton. "Enterprise Integration Using the Semantic Unification Meta-Model". En--terprise Integration Modeling, </title> <editor> C. Petrie ed., </editor> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Analyst (based on Berkeley/CMU's MACHINIST) * Vender Database (University of Utah's PARTNET) The scenario is supported by several facilitation agents that perform functions like: name services and buffering, gateway services for communication between local agent networks, content-based routing of messages, and negotiation support based on agents from the Cosmos project <ref> [19] </ref>. In the scenario, a series of exchanges is precipitated by a change to the payload being supported by the satellite superstructure. The changes to specific shared elements of the ontology are propagated to those agents that previously expressed interest.
Reference: [21] <author> Neches, Fikes, Finin, Gruber, Patil, Senator, and Swartout, </author> <title> "Enabling technology for knowledge sharing", </title> <journal> AI Magazine, </journal> <volume> Vol. 12, No. 3, </volume> <pages> 16-36. </pages> <year> 1991. </year>
Reference: [22] <author> Patil, Fikes, Patel-Schneider, McKay, Finin, Gruber, and Neches, </author> <title> "The DARPA Knowledge Sharing Effort: Progress report", </title> <editor> In C. Rich, B. Nebel, and W. Swartout (editors), </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference, </booktitle> <address> Cambridge, MA, </address> <publisher> Morgan Kaufmann. </publisher> <year> 1992. </year>
Reference: [23] <author> C. Petrie, </author> <title> "A Minimalist Model for Coordination", </title> <booktitle> Proceedings of AAAI-92 Workshop on Design Rationale. To appear in Enterprise Modeling, </booktitle> <editor> C. Petrie (editor), </editor> <publisher> MIT Press. </publisher>
Reference: [24] <author> N. Singh and M. Genesereth, </author> <title> "Implementation Details for Agent Based Software Engineering Interoperation", </title> <institution> Internal Stanford University Logic Group Tech Report. </institution> <year> 1992. </year>
Reference: [25] <author> Toye, Cutkosky, Leifer, Tenenbaum, and Glicksman, </author> <title> "SHARE: A Methodology and Environment for Collaborative Product Development", </title> <institution> Stanford Center for Design Research Technical Report 1993-0420. </institution>
Reference: [26] <author> J. Weber, B. Livezey, J. McGuire, and R. Pelavin, </author> <title> "Spreadsheet-Like Design Through Knowledge-Based Tool Integration", </title> <journal> International Journal of Expert Systems: Research and Applications, </journal> <volume> Vol 5, No. 1. </volume> <year> 1992. </year>
Reference-contexts: Each team was supported by its own computational environment linked via the PACT framework [7,24] over the Internet. Each team modeled a different aspect of the manipulator from a different engineering discipline: controller software (NVisage <ref> [26] </ref>), rigid body dynamics (NextCut [1]), circuitry (DesignWorld [6]), and sensors and power system modeling (DME [13]).
Reference: [27] <author> G. Yost, </author> <title> "Configuring Elevator Systems", </title> <type> Technical Report, </type> <institution> Digital Equipment Corporation, </institution> <address> 111 Locke Drive (LMO2/K11), Marlboro, MA, 02172. </address> <year> 1992. </year>
Reference-contexts: The elevator domain is well understood, and has been the subject of research such as VT [17], an expert system for elevator design, and the SALT system for knowledge acquisition [18]. The task and 12 domain have also been analyzed and a thorough English-language description has been pub-lished <ref> [27] </ref>. For the purposes of the Sisyphus/VT experiment, the domain is complex and large enough to preclude simplistic approaches (brute-force search or simple optimization techniques).
Reference: [28] <author> S. Dessloch, C. Huebel, N. Mattos, B. Sutter, </author> <title> "Handling Functional Constraints of Technical Modeling Systems in a KBMS Environment", </title> <journal> International Journal of Systems Automation: Research and Applications, </journal> <volume> Vol. 1 No. 4, </volume> <year> 1991. </year>
Reference: [29] <author> E. Subrahmanian, A. Westerberg, G. Podnar, </author> <title> "Towards a shared information environment for engineering design", Computer-Aided Cooperative Product Development MIT-JSME Workshop, </title> <editor> D. Sriram, R. Logcher, S. Hukuda, eds., </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [30] <author> D. Ullman, T. Dietterich, and L. Stauffer, </author> <title> "A model of the mechanical design process based on empirical data", </title> <journal> AI EDAM, </journal> <volume> Vol. 2, No. 1, </volume> <pages> pp. 33-52, </pages> <year> 1988. </year>
References-found: 29

