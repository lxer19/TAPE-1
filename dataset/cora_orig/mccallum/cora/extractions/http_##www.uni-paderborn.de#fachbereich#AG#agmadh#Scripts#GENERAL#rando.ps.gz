URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/Scripts/GENERAL/rando.ps.gz
Refering-URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/WWW/english/scripts.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Lecture Notes on Probabilistic Algorithms and Pseudorandom Generators 1  
Address: Seattle, Washington, U.S.A. 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Date: 15, 1991  
Note: July  c Martin Tompa, 1991 CCR-9002891, and in part by IBM under Research Contract 16980043.  
Abstract: Martin Tompa Technical Report #91-07-05 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> L. Adleman. </author> <title> Two theorems on random polynomial time. </title> <booktitle> In 19th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 75-83, </pages> <address> Ann Arbor, MI, </address> <month> Oct. </month> <year> 1978. </year> <note> IEEE. </note>
Reference-contexts: Lecture 11 BPP PSIZE; Pseudorandom Generators February 6, 1991 Notes: Rakesh Kumar Sinha 11.1. Relating Circuits and Probabilistic Complexity Classes Theorem 10.1 showed that the class P is contained in PSIZE | the class of languages accepted by polynomial size circuits. Adleman <ref> [1] </ref> extended this result by showing that the class RP , which is a superset of P, is also contained in PSIZE .
Reference: [2] <author> L. M. Adleman and M.-D. A. Huang. </author> <title> Recognizing primes in random polynomial time. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 462-469, </pages> <address> New York, NY, </address> <month> May </month> <year> 1987. </year>
Reference: [3] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Deterministic simulation in LOGSPACE. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 132-140, </pages> <address> New York, NY, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Note that a decrease to O (log n) seed bits and O (log n) space would imply that BPLP is the same as deterministic O (log n) space. In fact, by a result of Ajtai, Komlos, and Szemeredi <ref> [3] </ref>, it suffices to decrease the number of random bits to O ((log 2 n)= log log n) and the space to O (log n).
Reference: [4] <author> R. Aleliunas, R. M. Karp, R. J. Lipton, L. Lovasz, and C. Rackoff. </author> <title> Random walks, universal traversal sequences, and the complexity of maze problems. </title> <booktitle> In 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-223, </pages> <address> San Juan, Puerto Rico, </address> <month> Oct. </month> <year> 1979. </year> <note> IEEE. </note>
Reference: [5] <author> E. Bach. </author> <title> Realistic analysis of some randomized algorithms. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 453-461, </pages> <address> New York, NY, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: The catch, of course, is that we do not know of any efficient way to generate g. LECTURE 11. BPP PSIZE; PSEUDORANDOM GENERATORS 33 Bach <ref> [5] </ref> was the first person to consider the effect of having pseudorandom generators on the performance of probabilistic algorithms. He confined himself to algorithms for number-theoretic problems such as compositeness testing.
Reference: [6] <author> C. H. Bennett and J. Gill. </author> <title> Relative to a random oracle A, P A 6= N P A 6= co N P A with probability 1. </title> <journal> SIAM Journal on Computing, </journal> <volume> 10(1) </volume> <pages> 96-112, </pages> <year> 1981. </year>
Reference-contexts: Since we have natural examples of problems in RP not known to be in P (for example, the set of composite integers [38]), Adleman's result was very surprising: it says such problems can be solved deterministically (though nonuniformly). Bennett and Gill <ref> [6] </ref> further strengthened this result by showing that the class BPP is also contained in PSIZE . Both these results exploit the nonuniformity of the circuit model in a strong way. <p> The general idea is to start with a probabilistic algorithm and reduce its error exponentially, after which a simple counting argument guarantees the existence of a nonuniform algorithm that never makes a mistake. Theorem 11.1 (Bennett and Gill <ref> [6] </ref>): BPP PSIZE. Proof: Let L 2 BPP be recognized by a probabilistic algorithm in time T (n) = n O (1) .
Reference: [7] <author> A. Borodin, S. Cook, and N. Pippenger. </author> <title> Parallel computation for well-endowed rings and space-bounded probabilistic machines. </title> <journal> Information and Control, </journal> <volume> 58 </volume> <pages> 113-136, </pages> <year> 1983. </year>
Reference-contexts: Corollary 25.3: If L 2 BPLP , then L is accepted by a deterministic algorithm that uses space O (log 2 n). Proof: Use the space to cycle through all possible seeds, keeping statistics on the number of acceptances. 2 Borodin, Cook, and Pippenger <ref> [7] </ref> and Jung [22] proved a result that is more general than Corollary 25.3. Open Problem 8: Find a generator for BPLP that uses o (log 2 n) seed bits.
Reference: [8] <author> A. Borodin, S. A. Cook, P. W. Dymond, W. L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <month> June </month> <year> 1989. </year> <note> See also 18(6): 1283, </note> <month> Dec. </month> <year> 1989. </year>
Reference: [9] <author> J. L. Carter and M. N. Wegman. </author> <title> Universal classes of hash functions. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18 </volume> <pages> 143-154, </pages> <year> 1979. </year>
Reference-contexts: In particular, a pseudorandom walk according to this generator solves USTCON with only O (log 2 n) random bits instead of (ne). 19.2. Universal Hash Functions Nisan's generator is built from universal hash functions, which were introduced by Carter and Wegman <ref> [9, 10] </ref>. Notation: Pr x2X (:::) and E x2X (:::) denote probability and expectation, respectively, when x is chosen randomly and uniformly from X.
Reference: [10] <author> J. L. Carter and M. N. Wegman. </author> <title> New hash functions and their use in authentication and set equality. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(3) </volume> <pages> 265-277, </pages> <year> 1981. </year>
Reference-contexts: In particular, a pseudorandom walk according to this generator solves USTCON with only O (log 2 n) random bits instead of (ne). 19.2. Universal Hash Functions Nisan's generator is built from universal hash functions, which were introduced by Carter and Wegman <ref> [9, 10] </ref>. Notation: Pr x2X (:::) and E x2X (:::) denote probability and expectation, respectively, when x is chosen randomly and uniformly from X.
Reference: [11] <author> A. K. Chandra, P. Raghavan, W. L. Ruzzo, R. Smolensky, and P. Tiwari. </author> <title> The electrical resistance of a graph captures its commute and cover times. </title> <booktitle> In Proceedings of the Twenty 77 BIBLIOGRAPHY 78 First Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 574-586, </pages> <address> Seattle, WA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: On the other hand, there are graphs for which this bound is not tight. A tighter upper bound in many cases is given by the following fascinating theorem: Theorem 9.1 (Chandra, Raghavan, Ruzzo, Smolensky, Tiwari <ref> [11] </ref>): Let the electri cal resistance R of a connected, undirected graph be the maximum effective resistance between any pair of vertices when a one ohm resistor is substituted for each edge. <p> Then for any starting vertex, the expected number of steps that a random walk needs in order to visit every vertex is O (eR log n): This bound is quite tight for all graphs, since for some starting vertex the expected number of steps must be at least eR <ref> [11] </ref>. 9.2. Boolean Circuits The last topic needed in order to understand the literature on pseudorandom generators is Boolean circuit complexity.
Reference: [12] <author> A. K. Chandra and L. J. Stockmeyer. </author> <title> Alternation. </title> <booktitle> In 17th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 98-108, </pages> <address> Houston, TX, </address> <month> Oct. </month> <year> 1976. </year> <note> IEEE. Preliminary Version. </note>
Reference: [13] <author> H. Chernoff. </author> <title> A measure of asymptotic efficiency for tests of a hypothesis based on the sum of observations. </title> <journal> Annals of Math. Stat., </journal> <volume> 23 </volume> <pages> 493-509, </pages> <year> 1952. </year>
Reference: [14] <author> Y. S. Chow and H. Teicher. </author> <title> Probability Theory. </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference: [15] <author> D. Coppersmith and S. Winograd. </author> <title> Matrix multiplication via arithmetic progressions. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-6, </pages> <address> New York, NY, </address> <month> May </month> <year> 1987. </year>
Reference: [16] <author> R. Freivalds. </author> <title> Fast probabilistic algorithms. </title> <booktitle> volume 74 of Lecture Notes in Computer Science, </booktitle> <pages> pages 57-69. </pages> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference: [17] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <month> Dec. </month> <year> 1977. </year>
Reference-contexts: R S ) = O (S 2 ) random bits. (R, S, and T also need to be "constructible", analogous to the discussion in Corollary 3.2.) (Note that, unlike the case of deterministic, nondeterministic, or alternating algorithms, the constraint R = O (S 2 S ) is not vacuous: Gill <ref> [17] </ref> gives natural examples of probabilistic algorithms that run usefully for time double exponential in their space bounds, using that many random bits as well.) Proof: Construction: Let t = 18S.
Reference: [18] <author> F. Gobel and A. A. Jagers. </author> <title> Random walks on graphs. Stochastic Processes and their Applications, </title> <booktitle> 2 </booktitle> <pages> 311-336, </pages> <year> 1974. </year>
Reference: [19] <author> J. Hartmanis and J. Simon. </author> <title> On the power of multiplication in random access machines. </title> <booktitle> In 15th Annual Symposium on Switching and Automata Theory, </booktitle> <pages> pages 13-23, </pages> <year> 1974. </year>
Reference-contexts: Although this only suggests that the simulation by circuits might need to be improved, in fact there are more inherent problems associated with charging unit time to the multiplication of large numbers <ref> [19] </ref>. One possible solution is to charge time log n for each operation, where n is the length of the greatest operand for that operation. A second solution is simply to restrict each register to hold only polynomially many bits. 10.3.3.
Reference: [20] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(5) </volume> <pages> 935-938, </pages> <month> Oct. </month> <year> 1988. </year>
Reference: [21] <author> R. Impagliazzo and D. Zuckerman. </author> <title> How to recycle random bits. </title> <booktitle> In 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 248-253, </pages> <address> Research Triangle Park, NC, </address> <month> Oct. </month> <year> 1989. </year> <note> IEEE. </note>
Reference-contexts: So the error probability of the constructed algorithm is at most 2 (r) + 2 S 2 (r) + 2 (r) = 2 (r) because 18S = t = (r). 2 Using different techniques, Impagliazzo and Zuckerman <ref> [21] </ref> achieve this error bound using only O (t + r) random bits. 72 Appendix A Assignment #1 Choose as many of the following problems as you care to work on, and take each as far as you can. There are a couple that I don't know how to solve.
Reference: [22] <author> H. Jung. </author> <title> Relationships between probabilistic and deterministic tape complexity. </title> <booktitle> In Mathematical Foundations of Computer Science: Proceedings, 10th Symposium, volume 118 of Lecture Notes in Computer Science, </booktitle> <address> Strbske Pleso, Czechoslovakia, Aug.-Sept. 1981. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Corollary 25.3: If L 2 BPLP , then L is accepted by a deterministic algorithm that uses space O (log 2 n). Proof: Use the space to cycle through all possible seeds, keeping statistics on the number of acceptances. 2 Borodin, Cook, and Pippenger [7] and Jung <ref> [22] </ref> proved a result that is more general than Corollary 25.3. Open Problem 8: Find a generator for BPLP that uses o (log 2 n) seed bits.
Reference: [23] <author> H. J. Karloff and P. Raghavan. </author> <title> Randomized algorithms and pseudorandom numbers. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 310-321, </pages> <address> Chicago, IL, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: LECTURE 11. BPP PSIZE; PSEUDORANDOM GENERATORS 33 Bach [5] was the first person to consider the effect of having pseudorandom generators on the performance of probabilistic algorithms. He confined himself to algorithms for number-theoretic problems such as compositeness testing. We will discuss subsequent results of Karloff and Raghavan <ref> [23] </ref>, who studied the effect of pseudorandom generators on more familiar algorithms such as Quicksort. We need the following definition before we can describe their first result. Definition: A linear congruential generator has three parameters m, a, and c. <p> Partition the L elements by the pivot element in cell hash (y; L), where y is the next pseudorandom number. This is the method advocated by Knuth [27] for converting a pseudorandom number in Z m to one in Z L . Theorem 12.1 (Karloff and Raghavan <ref> [23] </ref>): For implementations of Quicksort using a linear congruential generator satisfying Q1 - Q3, L1 - L4, and H1, there is an input permuta tion requiring m 2 + n log n expected time (averaged over all seeds X 0 ). <p> Theorem 12.1 shows that Quicksort with common linear congruen tial generators (that use only O (log n) bits of randomness) requires (n 4 =m 2 ) expected time. In contrast, Karloff and Raghavan <ref> [23] </ref> also showed that Quicksort can be implemented to run in O (n log n) expected time, using only O (log n) bits of randomness, by introducing a novel pseudorandom generator called the "5-way generator". <p> For this result, it will not matter whether the partition algorithm is stable. Note that the time used by any efficient partition algorithm is proportional to this definition of cost. Lecture 15 Quicksort with the 5-Way Generator, continued February 15, 1991 Notes: Jo~ao Setubal Theorem 15.1 (Karloff and Raghavan <ref> [23] </ref>): There is an implementation of Quicksort that, on every permutation of n distinct keys, uses O (log n) random bits and runs in O (n log n) expected time.
Reference: [24] <author> R. M. Karp and M. O. Rabin. </author> <title> Efficient randomized pattern-matching algorithms. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 31(2) </volume> <pages> 249-260, </pages> <month> Mar. </month> <year> 1987. </year>
Reference: [25] <author> D. E. Knuth. </author> <title> Fundamental Algorithms, </title> <booktitle> volume 1 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference-contexts: so the total expected cost of all executions of P1 is (n + 1) + i=1 i = O (n + n i=1 i = O (n log n): The last line follows because the Harmonic series up to n is bounded by ln n + O (1) (see Knuth <ref> [25, page 74] </ref>). 2. The total expected cost of all executions of P2 will be shown to be O (n).
Reference: [26] <author> D. E. Knuth. </author> <title> Sorting and Searching, </title> <booktitle> volume 3 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1973. </year> <note> BIBLIOGRAPHY 79 </note>
Reference-contexts: Q1 is a popular heuristic to minimize the height of the stack. Q2 and Q3 simplify the analysis. Although the usual in-place partitioning procedure is not stable (Q2), stability in sorting is a desirable feature that other sorting algorithms strive to achieve <ref> [26] </ref>. Although it is not particularly realistic to use a pseudorandom number on subproblems of size 1 (Q3), their result even with this assumption must make one suspicious of the combination of Quicksort and linear congruential generators.
Reference: [27] <author> D. E. Knuth. </author> <title> Seminumerical Algorithms, </title> <booktitle> volume 2 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1981. </year>
Reference-contexts: Linear congruential generators have been quite effective in practice, and are advocated by Knuth <ref> [27] </ref>. If one were implementing Quicksort, it would be most natural to use a linear congru-ential generator as the source of randomness, with m = fi (n) and a and c chosen so as to make the period of the linear congruential generator as close to m as possible. <p> Since Quicksort consumes n pseudorandom numbers (Q3), this seems desirable. Certainly the period cannot exceed m, so that L1 is necessary. A period of m is achieved only if gcd (a; m) = gcd (c; m) = 1 <ref> [27, Theorem A, page 16] </ref>; if instead c = 0 is chosen, gcd (a; m) = 1 is still necessary to maximize the period [27, Theorem B, page 19]. <p> A period of m is achieved only if gcd (a; m) = gcd (c; m) = 1 [27, Theorem A, page 16]; if instead c = 0 is chosen, gcd (a; m) = 1 is still necessary to maximize the period <ref> [27, Theorem B, page 19] </ref>. Although assumption L3 is chosen to make the analysis simpler, Karloff and Raghavan claim that the analysis when gcd (c; m) = 1 is similar. Assumption L4 says that the period of the generator is reasonably large. <p> Partition the L elements by the pivot element in cell hash (y; L), where y is the next pseudorandom number. This is the method advocated by Knuth <ref> [27] </ref> for converting a pseudorandom number in Z m to one in Z L .
Reference: [28] <author> R. Lidl and H. Niederreiter. </author> <title> Finite Fields. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: By naive algorithms, each of these can be done in O (t 2 ) time and O (t) space. (Because t is twice an integral power of 3, the polynomial m (x) = x t + x t=2 + 1 is irreducible over Z 2 <ref> [28, page 146, exercise 3.96] </ref>. Shoup [37] gives a more general deterministic polynomial time algorithm for constructing irreducible polynomials, but the space required is proportional to t 3 = fi (S 3 ).) 70 LECTURE 25.
Reference: [29] <author> J. D. Lipson. </author> <title> Elements of Algebra and Algebraic Computing. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1981. </year>
Reference-contexts: One way to show that they can is to select m to be prime, in which case (m1) values of a achieve 34 LECTURE 12. QUICKSORT WITH LINEAR CONGRUENTIAL GENERATORS 35 period m 1 for all m 1 seeds X 0 6= 0, where is Euler's totient function <ref> [29, page 305] </ref>. This is a large enough number of values of a that choosing a at random has a good chance of working. <p> : : : ; t 1g, a (ff i ) = a 0 + a 1 ff i + + a t1 ff t1 Since a (x) has t distinct zeros ff i , yet a (x) has degree at most t 1, a (x) must be the zero polynomial <ref> [29, IV.3.3, Theorem 2] </ref>. Summarizing this argument, V ~a = 0 implies ~a = 0. Hence V is invertible. 2 Lemma 16.3: Let F be finite field with n elements. Let t be any integer with 2 t n. <p> The elements of this field are all polynomials of degree at most t 1 with coefficients from Z 2 , and the field operations are the usual polynomial operations, but reduced modulo some fixed degree t polynomial. (For more detail see, for example, Lipson <ref> [29, Chapter VI] </ref>.) Thus, every a 2 F can be specified by t bits (the t coefficients) in such a way that the field operations are efficiently computable from this representation.
Reference: [30] <author> N. Nisan. </author> <title> Pseudorandom generators for space-bounded computation. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 204-212, </pages> <address> Baltimore, MD, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: In one sense this is not terribly surprising, since we know how to sort in O (n log n) time without any randomness at all. A more dramatic and general result, due to Nisan <ref> [30] </ref>, shows that there is a pseudorandom generator that can be used to decrease the randomness needed by any space-bounded probabilistic algorithm. <p> One can see a foreshadowing of pseudorandomness in this definition and the following theorem: given a random seed x, h (x) can be used in place of a random y. Theorem 20.2 (Nisan <ref> [30] </ref>): Let H be a universal family of hash functions h : E ! F . Let A E, B F , and * &gt; 0. <p> Nisan's Pseudorandomness Theorem Theorem 25.1 (Nisan <ref> [30] </ref>): If L is accepted by a probabilistic algorithm A with 2-sided (1-sided) error that uses space S, time T , and R random bits, where 2S R = O (S 2 S ), then L is accepted by a probabilistic algorithm B with 2-sided (respectively, 1-sided) error that uses space <p> Theorem 26.1 (Nisan <ref> [30] </ref>): Suppose a probabilistic algorithm A accepts L using t random bits and 2-sided (1-sided) error, but with no restriction on space. If r = O (t), then L can be accepted with 2-sided (respectively, 1-sided) error, error bound 2 (r) , and only O (t log r) random bits.
Reference: [31] <author> N. Pippenger and M. J. Fischer. </author> <title> Relations among complexity measures. </title> <journal> Journal of the ACM, </journal> <volume> 26(2) </volume> <pages> 361-381, </pages> <month> Apr. </month> <year> 1979. </year>
Reference-contexts: A careful proof requires defining what a polynomial time algorithm is, which we have studiously avoided. A clean way to do the proof carefully would be by simulating deterministic Turing machines by circuits. The best such simulation is given by Pippenger and Fischer <ref> [31] </ref>. In its place, we will give a sketch of the proof, highlighting the relevant issues. 10.3.1. Circuits, Algorithms, and Obliviousness In one sense circuits are weaker than algorithms: algorithms can adapt their behavior according to the particular values of their inputs.
Reference: [32] <author> M. O. Rabin. </author> <title> Probabilistic algorithm for testing primality. </title> <journal> Journal of Number Theory, </journal> <volume> 12 </volume> <pages> 128-138, </pages> <year> 1980. </year>
Reference: [33] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: Approximating packing integer programs. </title> <booktitle> In 27th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 10-18, </pages> <address> Toronto, Ontario, </address> <month> Oct. </month> <year> 1986. </year> <note> IEEE. </note>
Reference-contexts: Finally there is Chernoff's inequality (Theorem 2.1), which usually gives the tightest bound. It does so because it applies only to the binomial distribution, so that all moments are known. (For a more generally applicable form of Chernoff's inequality, see Raghavan <ref> [33, Theorems 1 and 2] </ref>.) 16.2. t-Way Independence of the t-Way Generator In Lecture 14 we defined both mutual and t-way independence.
Reference: [34] <author> J. B. Rosser and L. Schoenfeld. </author> <title> Approximate formulas for some functions of prime numbers. </title> <journal> Illinois Journal of Mathematics, </journal> <volume> 6 </volume> <pages> 64-94, </pages> <year> 1962. </year>
Reference: [35] <author> W. J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference: [36] <author> J. T. Schwartz. </author> <title> Probabilistic algorithms for verification of polynomial identities. </title> <journal> Journal of the ACM, </journal> <pages> pages 701-717, </pages> <year> 1980. </year>
Reference: [37] <author> V. Shoup. </author> <title> New algorithms for finding irreducible polynomials over finite fields. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 283-290, </pages> <address> White Plains, NY, </address> <month> Oct. </month> <year> 1988. </year> <note> IEEE. </note>
Reference-contexts: Shoup <ref> [37] </ref> gives a more general deterministic polynomial time algorithm for constructing irreducible polynomials, but the space required is proportional to t 3 = fi (S 3 ).) 70 LECTURE 25.
Reference: [38] <author> R. Solovay and V. Strassen. </author> <title> A fast Monte-Carlo test for primality. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(1) </volume> <pages> 84-85, </pages> <month> Mar. </month> <year> 1977. </year>
Reference-contexts: Adleman [1] extended this result by showing that the class RP , which is a superset of P, is also contained in PSIZE . Since we have natural examples of problems in RP not known to be in P (for example, the set of composite integers <ref> [38] </ref>), Adleman's result was very surprising: it says such problems can be solved deterministically (though nonuniformly). Bennett and Gill [6] further strengthened this result by showing that the class BPP is also contained in PSIZE . Both these results exploit the nonuniformity of the circuit model in a strong way.
Reference: [39] <author> R. Szelepcsenyi. </author> <title> The method of forcing for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference: [40] <author> S. Warshall. </author> <title> A theorem on Boolean matrices. </title> <journal> Journal of the ACM, </journal> <volume> 9 </volume> <pages> 11-12, </pages> <year> 1962. </year>
Reference: [41] <author> D. J. A. Welsh. </author> <title> Randomised algorithms. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5 </volume> <pages> 133-145, </pages> <year> 1983. </year>
References-found: 42

