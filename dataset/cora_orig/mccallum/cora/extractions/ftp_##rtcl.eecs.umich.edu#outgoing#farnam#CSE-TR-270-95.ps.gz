URL: ftp://rtcl.eecs.umich.edu/outgoing/farnam/CSE-TR-270-95.ps.gz
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.eecs.umich.edu
Phone: (313) 936-2974  
Title: The Publish/Subscribe Paradigm for Scalable Group Collaboration Systems  
Author: Amit G. Mathur, Robert W. Hall, Farnam Jahanian, Atul Prakash, and Craig Rasmussen 
Note: Contact Author: Farnam Jahanian CSE-TR-270-95  
Date: November 20, 1995  
Address: Ann Arbor, MI 48109.  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication Sub-System for High Availability. </title> <type> Technical Report TR CS91-13, </type> <institution> Computer Science Dept., Hebrew University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Further, Oki et al do not address aspects of fault-tolerance related to maintaining message delivery and membership atomicity. Rajkumar et alsha:95 have extended the publish/subscribe paradigm to support distributed real-time applications although they do not address fault-tolerance aspects. Systems such as Isis [3], Consul [9, 10], Transis <ref> [1] </ref>, and Horus [16] are based on the virtual synchrony model and are geared more towards a general class of fault-tolerant distributed applications.
Reference: [2] <author> O. Babaoglu and K. Marzullo. </author> <title> Distributed Systems, chapter Consistent Global States of Distributed Systems: Fundamental Concepts and Mechanisms. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: All our semantics requires is that messages get delivered eventually. 1 For a formal definition of stability see <ref> [2] </ref> and the references therein. 12 Distributor Distributor Distributor Distributor 1 3 m1 m2 X Crash during multicast View-changeView-change They could get delivered at two distributors that progressed from a given group to the next group in different views.
Reference: [3] <author> K. P. Birman and T. A. Joseph. </author> <title> Reliable Communication in the Presence of Failures. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> Feb. </month> <year> 1987. </year>
Reference-contexts: We then show that it is possible to use a weaker and less costly (in terms of scalability and latency) notion of synchrony in comparison to traditional work on group communication protocols, much of which is based on the virtual synchrony model <ref> [3] </ref>. The protocols presented are based on this 3 weaker synchrony model. The rest of this paper is organized as follows: Section 2 describes the architecture and details of the publish/subscribe paradigm to support dissemination of data in group collaboration systems. <p> This differs from typical flush protocols used by systems such as Isis and Transis which ensure the virtual synchrony property <ref> [3, 11] </ref>. Here we exploit the semantics of the publish/subscribe paradigm to give a weaker notion of synchrony as compared to virtual synchrony ([3]) and its variant, extended virtual synchrony ([11]). To illustrate this weaker synchrony, consider the scenario shown in Figure 6. <p> Further, Oki et al do not address aspects of fault-tolerance related to maintaining message delivery and membership atomicity. Rajkumar et alsha:95 have extended the publish/subscribe paradigm to support distributed real-time applications although they do not address fault-tolerance aspects. Systems such as Isis <ref> [3] </ref>, Consul [9, 10], Transis [1], and Horus [16] are based on the virtual synchrony model and are geared more towards a general class of fault-tolerant distributed applications.
Reference: [4] <author> C. R. Clauer, D. E. Atkins, T. E. Weymouth, G. M. Olson, R. Niciejewski, T. Finholt, A. Prakash, C. E. Rasmussen, T. J. Rosenberg, J. D. Kelly, Y. Zambre, P. Stauning, E. Friis-Christensen, and S. B. Mende. </author> <title> A Prototype Upper Atmospheric Research Collaboratory (UARC). </title> <journal> EOS, Trans. Amer. Geophys. Union, </journal> <volume> 74, </volume> <year> 1993. </year>
Reference-contexts: UARC is a multi-disciplinary effort linking research in computer science, behavioral science, and upper atmosphere and space physics <ref> [4] </ref>. We view a collab-oratory as an advanced information environment that provides (1) human-to-human communications using shared computer tools and work spaces; (2) group access and use of a network of information, data, and knowledge sources; and (3) remote access and control of instruments for data acquisition.
Reference: [5] <author> S. E. Deering and D. R. Cheriton. </author> <title> Multicast Routing in Datagram Internetworks and Extended LANs. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 8(2) </volume> <pages> 85-110, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The transport layer provides unreliable point-to-point transport of data packets provided by a datagram protocol such as UDP. A multicast can be a series of such point-to-point unicasts. It can also hide the exploitation of underlying multicast mechanisms such as IP multicasting <ref> [5] </ref> or hardware broadcasts available on local-area networks. 4 Local Subscriber View Distributor Group Distributor Subscriber Publisher Subscription Service Transport Process Group Groups Publish/ Subscribe Layer Layer Peer Groups 5 3 Semantics of the Publish/Subscribe Paradigm 3.1 Preliminaries The set of processes in the system is denoted P = fp 1
Reference: [6] <author> M. J. Fischer, N. A. Lynch, and M. S. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: This follows from the impossibility of distributed consensus in asynchronous 6 systems as it is impossible to distinguish with certainty between a slow and a failed process <ref> [6] </ref>. In order to formalize the properties of membership changes, we define the following predicates: J OI N ED p (q): The predicate J OI N ED p (q) is true if q 2 view p , false otherwise.
Reference: [7] <author> F. Jahanian, S. Fakhouri, and R. Rajkumar. </author> <title> Processor Group Membership Protocols: Specification, </title> <booktitle> Design, and Implementation. In Proc. of Symposium on Reliable Distributed Systems, </booktitle> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: We next define the following partial ordering on views (denoted &lt;) <ref> [7] </ref>: 1. Let view and view 0 be two views. <p> An execution of a membership protocol generates a set of views. The weak membership protocols, in <ref> [7] </ref> and [15], generate a set of views such that the views are partially ordered by the relation &lt; described above. <p> The weak membership protocols, in [7] and [15], generate a set of views such that the views are partially ordered by the relation &lt; described above. On the other hand, the set of views generated by the strong group membership protocols, such as those described in <ref> [14, 13, 7, 15] </ref>, satisfy the partial ordering &lt;, but in addition satisfy the following two properties: 1. Mutual Exclusion and Concurrent Views: If view 6&lt; view 0 , then 8p 2 view ) p 62 view 0 . 2. <p> Equivalently, a publisher p's view of the distributors is denoted view dist p . These views that publishers/subscribers maintain is not explicitly maintained by a membership protocol, but instead represents a core group of distributors that are likely to be up <ref> [7] </ref>, and can be obtained from a well-known located . This set of processes consists of a primary distributor and some other likely secondary distributors. <p> This ensures that membership changes to view dist d are totally ordered at each distributor. The protocol to achieve this is exactly the strong group membership protocol presented in the literature <ref> [14, 13, 7, 15] </ref>. Briefly, a common protocol for strong group membership operates by designating a distributor process as the coordinator of the set of distributor processes.
Reference: [8] <author> L. Lamport. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Comm. of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: A cut C is an n-tuple of process histories, and is denoted C =&lt; h K 1 1 ; h K 2 n &gt;. Events are partially ordered as defined by Lamport's happened before relation (denoted !) <ref> [8] </ref>: 1. If e k p 2 h p and k &lt; l, then e k p ! e l 2. If e p = send p (m; q) and e q = rcv q (m; p), then e p ! e q . 3.
Reference: [9] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A Membership Protocol Based on Partial Order. </title> <booktitle> In Proc. of the 2nd. Intl. Conf. on Dependable Computing for Critical Applications, </booktitle> <pages> pages 309-332, </pages> <address> Tucson, AZ, </address> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Further, Oki et al do not address aspects of fault-tolerance related to maintaining message delivery and membership atomicity. Rajkumar et alsha:95 have extended the publish/subscribe paradigm to support distributed real-time applications although they do not address fault-tolerance aspects. Systems such as Isis [3], Consul <ref> [9, 10] </ref>, Transis [1], and Horus [16] are based on the virtual synchrony model and are geared more towards a general class of fault-tolerant distributed applications.
Reference: [10] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <journal> Distributed Systems Engineeering Journal, </journal> <volume> 1(2) </volume> <pages> 87-103, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Further, Oki et al do not address aspects of fault-tolerance related to maintaining message delivery and membership atomicity. Rajkumar et alsha:95 have extended the publish/subscribe paradigm to support distributed real-time applications although they do not address fault-tolerance aspects. Systems such as Isis [3], Consul <ref> [9, 10] </ref>, Transis [1], and Horus [16] are based on the virtual synchrony model and are geared more towards a general class of fault-tolerant distributed applications.
Reference: [11] <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended Virtual Synchrony. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 56-65, </pages> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: This differs from typical flush protocols used by systems such as Isis and Transis which ensure the virtual synchrony property <ref> [3, 11] </ref>. Here we exploit the semantics of the publish/subscribe paradigm to give a weaker notion of synchrony as compared to virtual synchrony ([3]) and its variant, extended virtual synchrony ([11]). To illustrate this weaker synchrony, consider the scenario shown in Figure 6.
Reference: [12] <author> B. Oki, M. Pfluegl, A. Siegel, and D. Skeen. </author> <title> The Information Bus-An Architecture for Extensible Distributed Systems. </title> <booktitle> In Proc. of the ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 58-68, </pages> <address> North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Oki et al <ref> [12] </ref> use the paradigm to develop the notion of an Information Bus which acts as an intermediary between the publisher and subscriber. In our work, the hierarchy of distributors connects the publisher to the subscribers.
Reference: [13] <author> A. M. Ricciardi. </author> <title> The Group Membership Problem in Asynchronous Systems. </title> <type> Technical Report TR92-1313, </type> <institution> Computer Science Dept., Cornell University, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: The weak membership protocols, in [7] and [15], generate a set of views such that the views are partially ordered by the relation &lt; described above. On the other hand, the set of views generated by the strong group membership protocols, such as those described in <ref> [14, 13, 7, 15] </ref>, satisfy the partial ordering &lt;, but in addition satisfy the following two properties: 1. Mutual Exclusion and Concurrent Views: If view 6&lt; view 0 , then 8p 2 view ) p 62 view 0 . 2. <p> This ensures that membership changes to view dist d are totally ordered at each distributor. The protocol to achieve this is exactly the strong group membership protocol presented in the literature <ref> [14, 13, 7, 15] </ref>. Briefly, a common protocol for strong group membership operates by designating a distributor process as the coordinator of the set of distributor processes.
Reference: [14] <author> A. M. Ricciardi and K. P. Birman. </author> <title> Using Process Groups to Implement Failure Detection in Asynchronous Environments. </title> <booktitle> In Proc. of 10th. Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <month> Aug. </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: The weak membership protocols, in [7] and [15], generate a set of views such that the views are partially ordered by the relation &lt; described above. On the other hand, the set of views generated by the strong group membership protocols, such as those described in <ref> [14, 13, 7, 15] </ref>, satisfy the partial ordering &lt;, but in addition satisfy the following two properties: 1. Mutual Exclusion and Concurrent Views: If view 6&lt; view 0 , then 8p 2 view ) p 62 view 0 . 2. <p> This ensures that membership changes to view dist d are totally ordered at each distributor. The protocol to achieve this is exactly the strong group membership protocol presented in the literature <ref> [14, 13, 7, 15] </ref>. Briefly, a common protocol for strong group membership operates by designating a distributor process as the coordinator of the set of distributor processes.
Reference: [15] <author> A. Sch iper and A. Ricciardi. </author> <title> Virtually-Synchronous Communication Based on a Weak Failure Suspector. </title> <booktitle> In Proceedings on the 13th International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 534-568, </pages> <address> Toulouse,France, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: An execution of a membership protocol generates a set of views. The weak membership protocols, in [7] and <ref> [15] </ref>, generate a set of views such that the views are partially ordered by the relation &lt; described above. <p> The weak membership protocols, in [7] and [15], generate a set of views such that the views are partially ordered by the relation &lt; described above. On the other hand, the set of views generated by the strong group membership protocols, such as those described in <ref> [14, 13, 7, 15] </ref>, satisfy the partial ordering &lt;, but in addition satisfy the following two properties: 1. Mutual Exclusion and Concurrent Views: If view 6&lt; view 0 , then 8p 2 view ) p 62 view 0 . 2. <p> This ensures that membership changes to view dist d are totally ordered at each distributor. The protocol to achieve this is exactly the strong group membership protocol presented in the literature <ref> [14, 13, 7, 15] </ref>. Briefly, a common protocol for strong group membership operates by designating a distributor process as the coordinator of the set of distributor processes.
Reference: [16] <author> R. van Renesse, T. M. Hickey, and K. P. Birman. </author> <title> Design and Performance of Horus: A Lightweight Group Communications System. </title> <type> Technical Report TR94-1442, </type> <institution> Computer Science Dept., Cornell University, </institution> <month> Aug. </month> <year> 1994. </year> <month> 16 </month>
Reference-contexts: Rajkumar et alsha:95 have extended the publish/subscribe paradigm to support distributed real-time applications although they do not address fault-tolerance aspects. Systems such as Isis [3], Consul [9, 10], Transis [1], and Horus <ref> [16] </ref> are based on the virtual synchrony model and are geared more towards a general class of fault-tolerant distributed applications.
References-found: 16

