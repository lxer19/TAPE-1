URL: http://www.cs.brown.edu/people/pnk/sepshort.ps
Refering-URL: http://www.cs.brown.edu/people/pnk/
Root-URL: http://www.cs.brown.edu
Title: Faster shortest-path algorithms for planar graphs  
Author: Monika R. Henzinger Philip Klein Satish Rao Sairam Subramanian 
Affiliation: Department of Computer Science Cornell University  Department of Computer Science Brown University  NEC Research Institute  Bell Northern Research  
Abstract: We give a linear-time algorithm for single-source shortest paths in planar graphs with nonnegative edge-lengths. Our algorithm also yields a linear-time algorithm for maximum flow in a planar graph with the source and sink on the same face. For the case where negative edge-lengths are allowed, we give an algorithm requiring O(n 4=3 log(nL)) time, where L is the absolute value of the most negative length. This algorithm can be used to obtain similar bounds for computing a feasible flow in a planar network, for finding a perfect matching in a planar bipartite graph, and for finding a maximum flow in a planar graph when the source and sink are not on the same face. We also give parallel and dynamic versions of these algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [AMO] <author> R. Ahuja, K. Mehlhorn, J. Orlin & R. E. Tarjan, </author> <title> "Faster algorithms for the shortest path problem," </title> <journal> Journal of the Association for Computing Machinery 37 (1990), </journal> <pages> 213-223. </pages>
Reference-contexts: Institute. z Research partially supported by an NSF PYI award, CCR-9157620, together with PYI matching funds from Xerox Corporation and Honeywell Corporation. 1 In less restricted models, bounds of O (m + n log n= log log n) and O (m + n p log C) can be achieved using <ref> [AMO, FrW] </ref>. Here m is the number of edges, n is the number of nodes, and C is the maximum magnitude of an edge-length assuming edge-lengths are integers.
Reference: [AST] <author> N. Alon, P. Seymour & R. Thomas, </author> <title> "A Separator Theorem for Nonplanar Graphs," </title> <journal> Journal of the American Mathematical Society 3 (1990), </journal> <pages> 801-808. </pages>
Reference-contexts: Examples of graph classes that have been shown to be f -separable for sublinear functions f are planar graphs [LiT], bounded-genus graphs [GHT], d-dimensional overlap graphs [MTV], and graphs excluding a fixed graph as a minor <ref> [AST] </ref>. 3 Frederickson showed [Freb] that separators can be used to find a division of a graph, a special kind of partition of the edge-set into two or more subsets, called regions.
Reference: [Coh] <author> E. Cohen, </author> <title> "Efficient parallel shortest-paths in digraphs with a separator decomposition," </title> <booktitle> Proc. 5th Annual Symposium on Parallel Algorithms and Architectures (1993). </booktitle>
Reference-contexts: To obtain a parallel algorithm, we simply use a parallel algorithm to carry out each step. Finding the r-division can be done by repeated application of the parallel planar-separator algorithm of Gazit and Miller [GaM]. Cohen <ref> [Coh] </ref> gives a parallel version of the shortest-path algorithm of Lipton, Rose, and Tarjan. <p> In steps 2 and 4, we use a parallel algorithm due to Cohen <ref> [Coh] </ref> that takes polylog time and does O (r 3=2 ) work for an r-node graph. In step 3, instead of using Golberg's algorithm, we use an algorithm due to Gabow and Tarjan [GaT].
Reference: [Frea] <author> G.N. Frederickson, </author> <title> "Data structures for on-line updating of minimum spanning trees, with applications," </title> <journal> SIAM J. Computing 14 (1985), </journal> <pages> 781-798. </pages>
Reference-contexts: To obtain a dynamic algorithm, we use an approach used previously for dynamically approximating shortest paths in planar undirected graphs [KlS], an approach based in turn on that used in dynamic algorithms for a variety of problems in planar graphs <ref> [Frea, GaI, GIS, Sub] </ref>. To compute the shortest path from a given source to a given sink, one operates on the union of complete graphs with two of the complete graphs replaced by the regions they represent, one for the source and one for the sink. <p> We call the contraction operation Contract (G; z). This operation uses a 5 The top-level division consists of a single region, and the next division consists of regions of size roughly polynomial in log log n. procedure FindClusters from <ref> [Frea] </ref> to determine a decomposition of the graph G into at most n=z connected subgraphs each containing at most 3z nodes, and then contracts each subgraph to a single node. The time required by Contract on an n-node graph is O (n). <p> As with the sequential algorithm our dynamic algorithm also uses the division-based of Frederickson. We use the cluster-partitioning approach previously used by Frederickson, Galil and Italiano, and others <ref> [Frea, GaI, GIS, Sub] </ref>. The basic idea is to divide G into suitable sized pieces and precompute all-boundary pair shortest paths in each piece. These precomputed answers are used to answer any given query quickly.
Reference: [Freb] <author> G.N. Frederickson, </author> <title> "Fast algorithms for shortest paths in planar graphs, with applications," </title> <journal> SIAM Journal on Computing 16 (1987), </journal> <pages> 1004-1022. </pages>
Reference-contexts: No linear-time algorithm for shortest paths in planar graphs was previously known. For general graphs the best bounds known in the standard model, which forbids bit-manipulation of the lengths, is O (m + n log n) time, due to Fredman and Tarjan [FrT]. 1 For planar graphs, Frederickson <ref> [Freb] </ref> pioneered the use of separators to obtain faster shortest-path algorithms. His algorithm, the best known previously, runs in O (n p time on planar graphs. It depends on the fact that planar graphs have size-O ( p n) separators. The second algorithm handles negative edge-lengths. <p> Lipton and Tarjan showed [LiT] that given an n-node planar graph one can in linear time find a set of nodes of size O ( p n) whose removal breaks the graph into pieces each of size at most 2 3 n. Based on this result, Frederickson <ref> [Freb] </ref> developed the notion of an r-division of a graph, a division of the graph into regions of size fi (r) with boundaries of size O ( p r). <p> Examples of graph classes that have been shown to be f -separable for sublinear functions f are planar graphs [LiT], bounded-genus graphs [GHT], d-dimensional overlap graphs [MTV], and graphs excluding a fixed graph as a minor [AST]. 3 Frederickson showed <ref> [Freb] </ref> that separators can be used to find a division of a graph, a special kind of partition of the edge-set into two or more subsets, called regions. A node is said to be contained in a region if some edge of the region is incident to the node. <p> It is a strict (r; s)-division if each region has at most r nodes. A straightforward adaptation of Frederickson's algorithm <ref> [Freb] </ref> yields the following lemma. Lemma 2.1 Suppose f (n) = o (n). For any subgraph-closed f -separable class of graphs, there is a constant c such that every graph in the family has a strict (r; cf (r))-division for any r. <p> In fact, the algorithm can be modified to work for any minor-closed n 1* -separable family of graphs, where * is a positive constant. The recursive decomposition algorithm is based on an idea of Frederickson <ref> [Freb] </ref>. In his Lemma 4, Frederickson shows how to find an r-division of an n-node planar graph in O (n log r + (n= p time. The approach is as follows: decompose the graph into connected subgraphs all of roughly the same size. <p> The time required by Contract on an n-node graph is O (n). For a node v in the contracted graph, let expand (v) denote the set of nodes contracted to form v. The basic procedure for finding a division, which we call Divide, comes from <ref> [Freb] </ref>. Given an n-node graph G and a node-subset S, Divide (G; S; r) divides up the graph into regions each having at most r nodes. Call a node v a boundary node if (1) it lies in more than one region, or (2) it belongs to S. <p> Our approach may be seen as an adaption of the approach Frederickson used <ref> [Freb] </ref> for the non-negative length problem. Frederickson's approach, which we adopt, is essentially the following.
Reference: [Frec] <author> G.N. Frederickson, </author> <title> "An optimal algorithm for selection in a min-heap," </title> <booktitle> Information and Computation 104 (1993), </booktitle> <pages> 197-214. </pages>
Reference-contexts: We make this precise in Corollary 3.4. We use the fact that the regions are nested to help us maintain this property. This idea of maintaining priority queues for nested sets is not new, and has been used, e.g. in finding the k th smallest element in a heap <ref> [Frec] </ref>.
Reference: [FrW] <author> M. L. Fredman & D. E. Willard, </author> <title> "Trans-dichotomous algorithms for minimum spanning trees and shortest paths," </title> <booktitle> Proc. 31st Annual IEEE Symposium on Foundations of Computer Science (1990). </booktitle>
Reference-contexts: Institute. z Research partially supported by an NSF PYI award, CCR-9157620, together with PYI matching funds from Xerox Corporation and Honeywell Corporation. 1 In less restricted models, bounds of O (m + n log n= log log n) and O (m + n p log C) can be achieved using <ref> [AMO, FrW] </ref>. Here m is the number of edges, n is the number of nodes, and C is the maximum magnitude of an edge-length assuming edge-lengths are integers.
Reference: [FrT] <author> M.L. Fredman & R.E. Tarjan, </author> <title> "Fibonacci heaps and their uses in improved network optimization algorithms," </title> <journal> Journal of the Association for Computing Machinery 34 (1987), </journal> <pages> 596-615. </pages>
Reference-contexts: No linear-time algorithm for shortest paths in planar graphs was previously known. For general graphs the best bounds known in the standard model, which forbids bit-manipulation of the lengths, is O (m + n log n) time, due to Fredman and Tarjan <ref> [FrT] </ref>. 1 For planar graphs, Frederickson [Freb] pioneered the use of separators to obtain faster shortest-path algorithms. His algorithm, the best known previously, runs in O (n p time on planar graphs. It depends on the fact that planar graphs have size-O ( p n) separators.
Reference: [GaT] <author> H. N. Gabow & R. E. Tarjan, </author> <title> "Almost-optimum speed-ups of algorithms for bipartite matching and related problems," </title> <booktitle> Proc. 20th Annual ACM Symposim on Theory of Computing (1988). </booktitle>
Reference-contexts: In steps 2 and 4, we use a parallel algorithm due to Cohen [Coh] that takes polylog time and does O (r 3=2 ) work for an r-node graph. In step 3, instead of using Golberg's algorithm, we use an algorithm due to Gabow and Tarjan <ref> [GaT] </ref>. Given an x-node e-edge graph H with integral edge-lengths that are at most N in magnitude, the algorithm in [GaT] computes single-source shortest-paths in H in time O ( p xe log (xN )(log 2p)=p) using p e=( p x log 2 x) processors. <p> In step 3, instead of using Golberg's algorithm, we use an algorithm due to Gabow and Tarjan <ref> [GaT] </ref>. Given an x-node e-edge graph H with integral edge-lengths that are at most N in magnitude, the algorithm in [GaT] computes single-source shortest-paths in H in time O ( p xe log (xN )(log 2p)=p) using p e=( p x log 2 x) processors.
Reference: [GaI] <author> Z. Galil & G. F. </author> <title> Italiano, "Maintaining biconnected components of dynamic planar graphs," </title> <booktitle> Proc. 18th Int. Colloquium on Automata, Languages, and Programming. </booktitle> <year> (1991). </year>
Reference-contexts: To obtain a dynamic algorithm, we use an approach used previously for dynamically approximating shortest paths in planar undirected graphs [KlS], an approach based in turn on that used in dynamic algorithms for a variety of problems in planar graphs <ref> [Frea, GaI, GIS, Sub] </ref>. To compute the shortest path from a given source to a given sink, one operates on the union of complete graphs with two of the complete graphs replaced by the regions they represent, one for the source and one for the sink. <p> As with the sequential algorithm our dynamic algorithm also uses the division-based of Frederickson. We use the cluster-partitioning approach previously used by Frederickson, Galil and Italiano, and others <ref> [Frea, GaI, GIS, Sub] </ref>. The basic idea is to divide G into suitable sized pieces and precompute all-boundary pair shortest paths in each piece. These precomputed answers are used to answer any given query quickly.
Reference: [GIS] <author> Z. Galil, G.F. Italiano & N. Sarnak, </author> <title> "Fully dynamic planarity testing," </title> <booktitle> Proc. 24th Annual ACM Symposium on Theory of Computing (1992). </booktitle>
Reference-contexts: To obtain a dynamic algorithm, we use an approach used previously for dynamically approximating shortest paths in planar undirected graphs [KlS], an approach based in turn on that used in dynamic algorithms for a variety of problems in planar graphs <ref> [Frea, GaI, GIS, Sub] </ref>. To compute the shortest path from a given source to a given sink, one operates on the union of complete graphs with two of the complete graphs replaced by the regions they represent, one for the source and one for the sink. <p> As with the sequential algorithm our dynamic algorithm also uses the division-based of Frederickson. We use the cluster-partitioning approach previously used by Frederickson, Galil and Italiano, and others <ref> [Frea, GaI, GIS, Sub] </ref>. The basic idea is to divide G into suitable sized pieces and precompute all-boundary pair shortest paths in each piece. These precomputed answers are used to answer any given query quickly. <p> Throughout this section we assume that the edge-additions preserve planarity. This can be easily enforced within the same time and space bounds by running the dynamic planarity-testing algorithm by Galil, Italiano, and Sarnak <ref> [GIS] </ref> in the background and only allowing edge-additions that preserve planarity. The edge-additions need not preserve the specific planar embedding since planarity is only required in order to obtain the division, and every so often the algorithm recomputes the division from scratch.
Reference: [GaM] <author> H. Gazit & G. L. Miller, </author> <title> "A parallel algorithm for finding a separator in planar graphs," </title> <booktitle> Proc. 28th Annual IEEE Symposium on Foundations of Computer Science (1987). </booktitle>
Reference-contexts: To obtain a parallel algorithm, we simply use a parallel algorithm to carry out each step. Finding the r-division can be done by repeated application of the parallel planar-separator algorithm of Gazit and Miller <ref> [GaM] </ref>. Cohen [Coh] gives a parallel version of the shortest-path algorithm of Lipton, Rose, and Tarjan.
Reference: [GHT] <author> J. R. Gilbert, J. P. Hutchinson & R. E. Tarjan, </author> <title> "A separation theorem for graphs of bounded genus," </title> <journal> Journal of Algorithms, </journal> <year> 1984. </year>
Reference-contexts: Examples of graph classes that have been shown to be f -separable for sublinear functions f are planar graphs [LiT], bounded-genus graphs <ref> [GHT] </ref>, d-dimensional overlap graphs [MTV], and graphs excluding a fixed graph as a minor [AST]. 3 Frederickson showed [Freb] that separators can be used to find a division of a graph, a special kind of partition of the edge-set into two or more subsets, called regions.
Reference: [Gol] <author> A.V. Goldberg, </author> <title> "Scaling algorithms for the shortest path problem," </title> <journal> SIAM Journal on Computing 24 (1995), </journal> <pages> 494-504. </pages>
Reference-contexts: In work subsequent to that discussed here, Thorup has developed an algorithm that requires O (m log log m) time. [Tho]. 1 known is O (n 1=2 m log L) time, due to Goldberg <ref> [Gol] </ref>, which yields O (n 3=2 log L) time on sparse (e.g. planar) graphs. For planar graphs, Lipton, Rose, and Tarjan [LRT] showed how to solve the problem in O (n 3=2 ) time using planar separators. <p> The same bounds hold for the size of the auxiliary graph S as well. Therefore, running Goldberg's algorithm <ref> [Gol] </ref> on S will require O (n 9=7 log D) time to find the shortest u-to-v path. This shows that the query time is O (n 9=7 log D).
Reference: [Goo] <author> M. Goodrich, </author> <title> "Planar separators and parallel polygon triangulation," </title> <journal> Journal on Computer and System Sciences (1995). </journal>
Reference-contexts: Thus our algorithm can in principle be applied to a much broader class of graphs than just planar graphs. Of course, in order for the whole computation to take only linear time, it 2 Goodrich has since given <ref> [Goo] </ref> a linear-time algorithm to find a separator decomposition in a planar graph. However, we will not need this result. 2 must be possible to find the r-division in linear time.
Reference: [Has] <author> R. Hassin, </author> <title> "Maximum flow in (s; t) planar networks," </title> <note> Information Processing Letters 13 (1981), 107. </note>
Reference-contexts: Our algorithm overcomes this apparent barrier, improving the time by a (fractional) polynomial factor when the negative lengths are not too large in magnitude. For planar graphs, shortest-path computation is closely related to network flow. Hassin <ref> [Has] </ref> has shown that if a source s and a sink t are located on the same face of a planar graph, then a maximum st-flow can be found by computing single-source shortest-paths in the planar dual.
Reference: [HaJ] <author> R. Hassin & D. B. Johnson, </author> <title> "An O(n log 2 n) algorithm for maximum flow in undirected planar networks," </title> <journal> SIAM Journal on Computing 14 (1985), </journal> <pages> 612-624. </pages>
Reference: [Joh] <author> D.B. Johnson, </author> <title> "Parallel algorithms for minimum cuts and maximum flows in planar networks," </title> <journal> Journal of the Association for Computing Machinery 34 (1987), </journal> <pages> 950-967. </pages>
Reference: [JoV] <author> D.B. Johnson & S.M. Venkatesan, </author> <title> "Using divide and conquer to find flows in directed planar networks in O(n 1:5 log n) time," </title> <booktitle> Proc. 20th Annual Allerton Conf. on Communication, Control, and Computing (1982). </booktitle>
Reference-contexts: Thus using our linear-time algorithm, one obtains a linear-time algorithm for maximum st-flow in this case. In the case when s and t are not on the same face and the graph is directed, Miller and Naor [MiN] (see also Johnson and Venkatesan <ref> [JoV] </ref>) show how to solve max-flow by computing single-source shortest-path computation with negative lengths. They use this approach to find a maximum flow.
Reference: [KPS] <author> P. Klein, S. Plotkin, C. Stein & E. Tardos, </author> <title> "Faster Approximation Algorithms for the Unit Capacity Concurrent-Flow Problem With Applications to Routing and Finding Sparse Cuts," </title> <journal> SIAM Journal on Computing 23 (1994), </journal> <pages> 466-487. 30 </pages>
Reference-contexts: If this is not the case, our algorithm may still be useful if many shortest path computations are performed on the same graph, for in this case it may be worthwhile to precompute the decomposition. This is the case in various algorithms, e.g., approximate multicommodity flow computations. <ref> [KPS, PST] </ref>. The algorithm for arbitrary lengths first applies the shortest-path algorithm due to Lipton, Rose, and Tarjan [LRT] to each region, obtaining shortest-path distances between each pair of boundary nodes of the region.
Reference: [KlS] <author> P. N. Klein & S. Subramanian, </author> <title> "A fully dynamic approximation scheme for all-pairs shortest paths in planar graphs," </title> <booktitle> Proc. 1993 Workshop on Algorithms and Data Structures (1993 </booktitle> ). 
Reference-contexts: The same bounds hold for perfect matching; the bounds are higher by a logarithmic factor for max flow. To obtain a dynamic algorithm, we use an approach used previously for dynamically approximating shortest paths in planar undirected graphs <ref> [KlS] </ref>, an approach based in turn on that used in dynamic algorithms for a variety of problems in planar graphs [Frea, GaI, GIS, Sub].
Reference: [LRT] <author> R. Lipton, D. Rose & R.E. Tarjan, </author> <title> "Generalized nested dissection," </title> <note> SIAM J. Numerical Analysis 16 (1979), 346-358. </note>
Reference-contexts: For planar graphs, Lipton, Rose, and Tarjan <ref> [LRT] </ref> showed how to solve the problem in O (n 3=2 ) time using planar separators. Previously no algorithm handling negative lengths was known that ran faster than O (n 3=2 ). <p> This is the case in various algorithms, e.g., approximate multicommodity flow computations. [KPS, PST]. The algorithm for arbitrary lengths first applies the shortest-path algorithm due to Lipton, Rose, and Tarjan <ref> [LRT] </ref> to each region, obtaining shortest-path distances between each pair of boundary nodes of the region.
Reference: [LiT] <author> R.J. Lipton & R.E. Tarjan, </author> <title> "A separator theorem for planar graphs," </title> <journal> SIAM Journal of Applied Mathematics 36 (1979), </journal> <pages> 177-189. </pages>
Reference-contexts: The approach used in obtaining the shortest-path algorithm for arbitrary lengths also enables us to obtain parallel and dynamic algorithms for this problem. The key to both our shortest-path algorithms is our use of graph-decompositions based on separators. Lipton and Tarjan showed <ref> [LiT] </ref> that given an n-node planar graph one can in linear time find a set of nodes of size O ( p n) whose removal breaks the graph into pieces each of size at most 2 3 n. <p> Examples of graph classes that have been shown to be f -separable for sublinear functions f are planar graphs <ref> [LiT] </ref>, bounded-genus graphs [GHT], d-dimensional overlap graphs [MTV], and graphs excluding a fixed graph as a minor [AST]. 3 Frederickson showed [Freb] that separators can be used to find a division of a graph, a special kind of partition of the edge-set into two or more subsets, called regions.
Reference: [MiN] <author> G. L. Miller & J. Naor, </author> <title> "Flows in planar graphs with multiple sources and sinks," </title> <note> SIAM Journal on Computing (1995). </note>
Reference-contexts: Thus using our linear-time algorithm, one obtains a linear-time algorithm for maximum st-flow in this case. In the case when s and t are not on the same face and the graph is directed, Miller and Naor <ref> [MiN] </ref> (see also Johnson and Venkatesan [JoV]) show how to solve max-flow by computing single-source shortest-path computation with negative lengths. They use this approach to find a maximum flow. <p> Miller and Naor <ref> [MiN] </ref> show if the graph is planar the problem can be solved by doing a single-source shortest-path computation in the dual graph.
Reference: [MTV] <author> G. L. Miller, S. Teng & S. Vavasis, </author> <title> "A unified geometric approach to graph separators," </title> <booktitle> Proc. 31st Annual IEEE Symposium on Foundations of Computer Science (1991). </booktitle>
Reference-contexts: Examples of graph classes that have been shown to be f -separable for sublinear functions f are planar graphs [LiT], bounded-genus graphs [GHT], d-dimensional overlap graphs <ref> [MTV] </ref>, and graphs excluding a fixed graph as a minor [AST]. 3 Frederickson showed [Freb] that separators can be used to find a division of a graph, a special kind of partition of the edge-set into two or more subsets, called regions.
Reference: [PST] <author> S. A. Plotkin, D. B. Shmoys & E. Tardos, </author> <title> "Fast Approximation Algorithms for Fractional Packing and Covering Problems," </title> <booktitle> Proceedings of the 32nd IEEE Symposium on Foundations of Computer Science (1991). </booktitle>
Reference-contexts: If this is not the case, our algorithm may still be useful if many shortest path computations are performed on the same graph, for in this case it may be worthwhile to precompute the decomposition. This is the case in various algorithms, e.g., approximate multicommodity flow computations. <ref> [KPS, PST] </ref>. The algorithm for arbitrary lengths first applies the shortest-path algorithm due to Lipton, Rose, and Tarjan [LRT] to each region, obtaining shortest-path distances between each pair of boundary nodes of the region.
Reference: [Sub] <author> S. Subramanian, </author> <title> "A Fully Dynamic Data Structure For Reachability in Planar Digraphs," </title> <booktitle> Proc. 1993 European Symposium on Algorithms (1993). </booktitle>
Reference-contexts: To obtain a dynamic algorithm, we use an approach used previously for dynamically approximating shortest paths in planar undirected graphs [KlS], an approach based in turn on that used in dynamic algorithms for a variety of problems in planar graphs <ref> [Frea, GaI, GIS, Sub] </ref>. To compute the shortest path from a given source to a given sink, one operates on the union of complete graphs with two of the complete graphs replaced by the regions they represent, one for the source and one for the sink. <p> As with the sequential algorithm our dynamic algorithm also uses the division-based of Frederickson. We use the cluster-partitioning approach previously used by Frederickson, Galil and Italiano, and others <ref> [Frea, GaI, GIS, Sub] </ref>. The basic idea is to divide G into suitable sized pieces and precompute all-boundary pair shortest paths in each piece. These precomputed answers are used to answer any given query quickly.
Reference: [Tho] <author> M. </author> <title> Thorup, "On RAM priority queues," </title> <booktitle> Proceedings of the 7th ACM-SIAM Symposium on Discrete Algorithms (1996). </booktitle> <pages> 31 </pages>
Reference-contexts: Here m is the number of edges, n is the number of nodes, and C is the maximum magnitude of an edge-length assuming edge-lengths are integers. In work subsequent to that discussed here, Thorup has developed an algorithm that requires O (m log log m) time. <ref> [Tho] </ref>. 1 known is O (n 1=2 m log L) time, due to Goldberg [Gol], which yields O (n 3=2 log L) time on sparse (e.g. planar) graphs.
References-found: 28

