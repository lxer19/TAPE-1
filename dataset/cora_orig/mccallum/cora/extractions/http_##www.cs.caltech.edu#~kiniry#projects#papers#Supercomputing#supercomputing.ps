URL: http://www.cs.caltech.edu/~kiniry/projects/papers/Supercomputing/supercomputing.ps
Refering-URL: http://www.cs.caltech.edu/~kiniry/projects/index.html
Root-URL: http://www.cs.caltech.edu
Title: Webs of Archived Distributed Computations for Asynchronous Collaboration  
Author: K. MANI CHANDY JOSEPH KINIRY ADAM RIFKIN DANIEL ZIMMERMAN Editor: Salim Hariri 
Keyword: distributed systems, archiving, global snapshots, asynchronous collaboration, world wide web, computational experiments, infospheres, component technologies, composition  
Address: Pasadena, Califor-nia 91125 USA; http://www.infospheres.caltech.edu/  
Affiliation: Department of Computer Science 256-80, California Institute of Technology,  
Note: Journal of Supercomputing,  c 1997 Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Email: mani@cs.caltech.edu  kiniry@cs.caltech.edu  adam@cs.caltech.edu  dmz@cs.caltech.edu  
Date: 11, 1-18 (1997)  Received August 8, 1996 Revised April 15, 1997  
Abstract: We identify the mechanisms needed to construct archivable webs of distributed asynchronous collaborations and experiments. The distinguishing feature of our approach is that the component tools, software, data, and even participants are distributed over a worldwide network. We perform a requirements analysis of an infrastructure that supports such applications, and present the Caltech Infospheres Infrastructure as a prototype that satisfies the requirements identified. In describing this prototype, we highlight the useful mechanisms provided, present an algorithm for using the Infospheres Infrastructure to perform asynchronous global snapshots for archiving, and suggest future areas of exploration. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Arnold, D., Bond, A., Chilvers, M., and Taylor, R. </author> <year> (1996). </year> <title> Hector: distributed objects in Python. </title> <booktitle> In conference proceedings the Fourth International Python Conference (Livermore, </booktitle> <month> June). </month>
Reference-contexts: Hector is a Python-based distributed object framework that provides a communications transparency layer enabling negotiation of communication protocol qualities, comprehensive support services for application objects, and a four-tiered architecture for interaction <ref> (Arnold et al., 1996) </ref>. OpenDoc is a component software architecture that allows for the creation of compound documents (MacBride and Susser, 1996). 16 CHANDY, KINIRY, RIFKIN, AND ZIMMERMAN JavaBeans is a platform-neutral API and architecture for the creation and use of Java components (Java Beans, 1997).
Reference: <author> Cappello, P., Christiansen, B., Ionescu, M.F., Neary, M.O., Schauser, K.E., and Wu, D. </author> <year> (1997). </year> <title> Javelin: Internet-based parallel computing using Java. </title> <booktitle> Submitted the Sixth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming. </booktitle>
Reference: <author> Chandy, K.M., and Lamport, L. </author> <year> (1985). </year> <title> Distributed snapshots: determining the global states of distributed systems. </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> volume 3, number 1, </volume> <pages> pages 63-75. </pages>
Reference-contexts: Archiving Distributed States We have now described our prototype software infrastructure; next, we describe an algorithm that can be used by the infrastructure to archive distributed states. This is a variant of the global snapshot algorithm <ref> (Chandy and Lamport, 1985) </ref> in which a clock, or sequence number, is stored with the snapshot state. Within the snapshots, these logical clocks can be used for timestamping (Lamport, 1978). 3.5.1. The Global Snapshot Algorithm.
Reference: <author> Chandy, K.M., and Rifkin, A. </author> <year> (1997). </year> <title> Systematic composition of objects in distributed Internet applications: </title> <booktitle> processes and sessions. In conference proceedings the Thirtieth Hawaii International Conference on System Sciences (Maui, January), </booktitle> <volume> volume 1, </volume> <pages> pages 395-404. </pages>
Reference-contexts: We have developed a prototype infrastructure that supports composition of components with dynamic interfaces <ref> (Chandy et al., 1997) </ref>. In this paper, we consider components with dynamic interfaces in a dynamic environment, though the central ideas relating to archiving distributed computations are applicable to components with static interfaces as well. <p> This invalidation of mailbox references allows frozen processes to move and then be thawed, at which point the references to its mailboxes can be refreshed via a summons. 3.4. Conceptual Model: Sessions A session encapsulates a task carried out by (the processes in) a personal network <ref> (Chandy and Rifkin, 1997) </ref>. It is initiated by some process in the personal network, and is completed when the task has been accomplished. A later session with the same processes may carry out another task.
Reference: <author> Chandy, K.M., Kiniry, J., Rifkin, A., Zimmerman, D., Tanaka, W., and Weisman, L. </author> <year> (1997). </year> <title> A framework for structured distributed object computing. </title> <journal> Submitted Communications of the ACM, </journal> <volume> volume 40, number 8. </volume>
Reference-contexts: We have developed a prototype infrastructure that supports composition of components with dynamic interfaces <ref> (Chandy et al., 1997) </ref>. In this paper, we consider components with dynamic interfaces in a dynamic environment, though the central ideas relating to archiving distributed computations are applicable to components with static interfaces as well. <p> This invalidation of mailbox references allows frozen processes to move and then be thawed, at which point the references to its mailboxes can be refreshed via a summons. 3.4. Conceptual Model: Sessions A session encapsulates a task carried out by (the processes in) a personal network <ref> (Chandy and Rifkin, 1997) </ref>. It is initiated by some process in the personal network, and is completed when the task has been accomplished. A later session with the same processes may carry out another task.
Reference: <author> Chandy, K.M., Rifkin, A., Sivilotti, P.A.G., Mandelson, J., Richardson, M., Tanaka, W., and Weisman, L. </author> <year> (1996). </year> <title> A worldwide distributed sytem using Java and the Internet. </title> <booktitle> In conference proceedings the Fifth IEEE International Symposium on High Performance Distributed Computing (Syracuse, </booktitle> <month> August), </month> <pages> pages 11-18. </pages>
Reference-contexts: Components can be composed either through static linking at compile time, or through dynamic linking over a network at run time. Our focus is on systematic composition of components that have dynamic interfaces use asynchronous messages <ref> (Chandy et al., 1996) </ref>. There are several popular commercial component technologies, including CORBA (OMG, 1995), OpenDoc (MacBride and Susser, 1996), ActiveX (Chappell, 1996), and Java Beans (Java Beans, 1997). Software component technology offers the potential for building new applications quickly and reliably.
Reference: <author> Chappell, D. </author> <year> (1996). </year> <title> Understanding ActiveX and OLE, </title> <publisher> Microsoft Press. </publisher>
Reference-contexts: Our focus is on systematic composition of components that have dynamic interfaces use asynchronous messages (Chandy et al., 1996). There are several popular commercial component technologies, including CORBA (OMG, 1995), OpenDoc (MacBride and Susser, 1996), ActiveX <ref> (Chappell, 1996) </ref>, and Java Beans (Java Beans, 1997). Software component technology offers the potential for building new applications quickly and reliably. Rapid application development tools for creating component-based software are emerging. <p> Also, the use of resources at multiple distributed sites raises issues of security, resource allocation, and privacy. We will not focus on these issues in this paper, since some solutions to these problems exist, such as Java's sandbox model (Gosling, Joy, and Steele, 1996) and ActiveX's code signing model <ref> (Chappell, 1996) </ref>. 1.1.4. Modes of Collaboration.
Reference: <author> Floyd, S., Jacobson, V., Liu, C., McCanne, S., and Zhang, L. </author> <year> (1995). </year> <title> A reliable multicast framework for light-weight sessions and application level framing. </title> <booktitle> In conference proceedings ACM SIGCOMM (August), </booktitle> <pages> pages 342-356. </pages>
Reference-contexts: Collaborative Technologies. Many software products allow collaboration using the Internet. Synchronous collaboration includes teleconferencing, provided by applications such as Netscape CoolTalk, Internet Relay Chat, Internet Phone, and White Pine Software CU-SeeMe, and shared whiteboards, provided in applications such as CU-SeeMe, wb <ref> (Floyd et al., 1995) </ref>, and Microsoft NetMeeting. State of the art research in multicasting and agreement protocols (Shenker et al., 1994) has made synchronous collaborations more efficient, but much research remains to be done in asynchronous tools such as concurrent version control. 4.
Reference: <author> Foster, I.T., and Chandy, K.M. </author> <year> (1995). </year> <title> Fortran M: a language for modular parallel programming. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> volume 26, number 1, </volume> <pages> pages 24-35. </pages>
Reference-contexts: Communication Frameworks. The Communicating Sequential Processes (CSP) model keeps each process active for the entire duration of the computation (Hoare, 1978). As with the language Fortran M <ref> (Foster and Chandy, 1995) </ref>, we implement this model, adding such implementation artifacts as dealing with process setup and removal, and permitting prioritized waits to resolve resource contention.
Reference: <author> Foster, I.T., and Kesselman, C. </author> <year> (1996). </year> <title> Globus: a metacomputing infrastructure toolkit. </title> <booktitle> In conference proceedings theWorkshop on Environments and Tools for Parallel Scientific Computing, </booktitle> <publisher> SIAM (Lyon, </publisher> <month> August). </month>
Reference-contexts: A session can negotiate with the underlying communication layer to determine the most appropriate process-to-process mechanism. While the current framework supports only UDP, we plan in future releases to support a range of protocols such as TCP and communication layers such as Globus <ref> (Foster and Kesselman, 1996) </ref>. 3.5. Archiving Distributed States We have now described our prototype software infrastructure; next, we describe an algorithm that can be used by the infrastructure to archive distributed states. <p> Metacomputing Frameworks. Our framework efforts are similar to recent metacomputing endeavors in that we use the Internet as a resource for concurrent computations. Globus provides an infrastructure to create networked virtual supercomputers for running applications <ref> (Foster and Kesselman, 1996) </ref>. Similarly, NPAC at Syracuse seeks to perform High Performance Computing and Communications (HPCC) activities using a Web-enabled concurrent virtual machine (Fox and Furmanski, 1996).
Reference: <author> Fox, G., and Furmanski, W. </author> <year> (1996). </year> <title> Towards web/Java based high performance distributed computing an evolving virtual machine. </title> <booktitle> In conference proceedings the Fifth IEEE International Symposium on High Performance Distributed Computing (Syracuse, </booktitle> <month> August), </month> <pages> pages 308-317. </pages>
Reference-contexts: Globus provides an infrastructure to create networked virtual supercomputers for running applications (Foster and Kesselman, 1996). Similarly, NPAC at Syracuse seeks to perform High Performance Computing and Communications (HPCC) activities using a Web-enabled concurrent virtual machine <ref> (Fox and Furmanski, 1996) </ref>. Legion is a C++-based architecture and object model for providing the illusion of a single virtual machine to users for wide-area parallel processing (Grimshaw et al., 1996).
Reference: <author> Gosling, J., Joy, B., and Steele, G. </author> <title> (1996) The Java Language Specification, </title> <publisher> Addison-Wesley Developers Press, Sunsoft Java Series. </publisher>
Reference-contexts: Also, the use of resources at multiple distributed sites raises issues of security, resource allocation, and privacy. We will not focus on these issues in this paper, since some solutions to these problems exist, such as Java's sandbox model <ref> (Gosling, Joy, and Steele, 1996) </ref> and ActiveX's code signing model (Chappell, 1996). 1.1.4. Modes of Collaboration. <p> Opaque Distributed Software Components The only visible aspects of an opaque component are (i) its external interface, so that other components can connect, and (ii) a specification of the component. In a distributed system, the interface is specified in terms of remote method invocations <ref> (Gosling, Joy, and Steele, 1996) </ref>, object-request brokers (OMG, 1995), or messages (Hoare, 1978, Chandy et al., 1997). Each approach has advantages and disadvantages, but the specific form of the interface is less important than the fact that the component implementations are hidden.
Reference: <author> Grimshaw, </author> <title> A.S., Wulf, W.A., and the Legion team, The legion vision of a worldwide virtual computer. </title> <journal> Communications of the ACM, </journal> <volume> volume 40, number 1, </volume> <pages> pages 39-45. </pages>
Reference: <author> Hoare, </author> <title> C.A.R. (1978). Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> volume 21, number 8, </volume> <pages> pages 666-677. </pages> <editor> Infospheres Research Group, </editor> <title> The infospheres infrastructure user's guide. </title> <type> Technical report, </type> <institution> Cali-fornia Institute of Technology, </institution> <year> 1997. </year> <title> JavaSoft JavaBeans Team. (1997). JavaBeans, Sun Microsystems. JavaSoft Java RMI Team. (1997). Java RMI, Sun Microsystems. </title>
Reference-contexts: In a distributed system, the interface is specified in terms of remote method invocations (Gosling, Joy, and Steele, 1996), object-request brokers (OMG, 1995), or messages <ref> (Hoare, 1978, Chandy et al., 1997) </ref>. Each approach has advantages and disadvantages, but the specific form of the interface is less important than the fact that the component implementations are hidden. The infrastructure must support at least one of these methods of interface specification. 2.2. <p> Communication Frameworks. The Communicating Sequential Processes (CSP) model keeps each process active for the entire duration of the computation <ref> (Hoare, 1978) </ref>. As with the language Fortran M (Foster and Chandy, 1995), we implement this model, adding such implementation artifacts as dealing with process setup and removal, and permitting prioritized waits to resolve resource contention.
Reference: <author> Lamport, L. </author> <year> (1978). </year> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> volume 21, number 7, </volume> <pages> pages 558-565. </pages>
Reference-contexts: This is a variant of the global snapshot algorithm (Chandy and Lamport, 1985) in which a clock, or sequence number, is stored with the snapshot state. Within the snapshots, these logical clocks can be used for timestamping <ref> (Lamport, 1978) </ref>. 3.5.1. The Global Snapshot Algorithm. If all components recorded their complete states (including the states of their mailboxes) at a specified time T , then the collection of component states would be the state of the distributed system at time WEBS OF ARCHIVED DISTRIBUTED COMPUTATIONS 13 T .
Reference: <author> Lange, D.B., and Oshima, M. </author> <year> (1997). </year> <title> Programming Mobile Agents in Java | With the Java Aglet API, </title> <journal> IBM Research. </journal> <note> 18 CHANDY, </note> <author> KINIRY, RIFKIN, AND ZIMMERMAN MacBride, A., and Susser, J. </author> <year> (1996). </year> <title> Byte Guide to OpenDoc, </title> <publisher> Osborne McGraw-Hill. </publisher>
Reference-contexts: Aglets provide a Java-based framework for secure Internet agents that are mobile, moving state along with the program components themselves <ref> (Lange and Oshima, 1997) </ref>. We differ from these efforts because our emphasis is not on the implementation of the infrastructure itself; rather, it is on reasoning about global compositional distributed systems with opaque components that have dynamic interfaces and interact by using asynchronous messages. 3.6.3. Communication Frameworks.
Reference: <author> Mellor-Crummey, J. </author> <year> (1992). </year> <title> Compile-time support for efficient data race detection in shared-memory parallel programs. </title> <note> Technical report Center for Research on Parallel Computation CRPC-TR92232, </note> <institution> Rice University. Object Management Group (OMG). </institution> <year> (1995). </year> <title> The Common Object Request Broker: Architecture and Specification (CORBA), revision 2.0. </title>
Reference: <author> Peterson, L.L., and Davie, B.S. </author> <year> (1996). </year> <title> Computer Networks: A Systems Approach, </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: If the communication layer cannot deliver a message, it raises an exception in the sender containing the message, the destination inbox, and the specific error condition. The system uses a sliding window protocol <ref> (Peterson and Davie, 1996) </ref> to manage the messages in transit. WEBS OF ARCHIVED DISTRIBUTED COMPUTATIONS 11 The communication layer eventually handles every message at the head of an outbox.
Reference: <author> Roberts, D., and Johnson, R. </author> <year> (1996). </year> <title> Evolving frameworks: a pattern language for developing object-oriented frameworks. </title> <booktitle> In conference proceedings Pattern Languages of Programs (Allerton Park, </booktitle> <month> September). </month>
Reference-contexts: Our intent is to provide access to these archived components through a Web browser, using the standard summoning mechanism. 3.6. Related Work Frameworks are reusable designs for software system processes, described by a set of objects and how those objects can be used <ref> (Roberts and Johnson, 1996) </ref>. Our framework consists of some middleware APIs, a model for using them, and services and patterns that are helpful not only in inheriting from objects, but extending them as well.
Reference: <author> Sessions, R. </author> <year> (1996). </year> <title> Object Persistence Beyond Object-Oriented Databases, </title> <publisher> Prentice Hall. </publisher>

References-found: 20

