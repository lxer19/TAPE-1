URL: ftp://n1.sp.cs.cmu.edu/pub/hzhang/ICNP97.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/hzhang/WWW/publications.html
Root-URL: 
Email: jcrb@fore.com  donpaul,hzhang@cs.cmu.edu  
Title: High Speed, Scalable, and Accurate Implementation of Packet Fair Queueing Algorithms in ATM Networks  
Author: Jon C.R. Bennett Donpaul C. Stephens and Hui Zhang 
Affiliation: FORE Systems  Carnegie Mellon University  
Abstract: The fluid Generalized Processor Sharing (GPS) algorithm has desirable properties for integrated services networks and many Packet Fair Queueing (PFQ) algorithms have been proposed to approximate GPS. However, there have been few high speed implementations of PFQ algorithms that can support large number of sessions with diverse rate requirements and at the same time maintain all the important properties of GPS. The implementation cost of a PFQ algorithm is determined by two components: (1) computation of the system virtual time function and (2) maintaining the relative ordering of the packets via their timestamps in a priority queue mechanism. While most of the recently proposed PFQ algorithms reduce the complexity of computing the system virtual time function, the complexity of maintaining the priority queue, and therefore the overall complexity of implementing PFQ, is still a function of the number of active sessions. In addition, while reducing the algorithmic or asymptotic complexity has been the focus of most analysis, to run at high speed, it is also important to reduce the complexity of basic operations. In this paper, we develop techniques to reduce both types of complexities. In particular, we present a novel grouping architecture for implementing PFQ with an algorithmtic complexity that is a function of the number of distinct rates supported, but independent of the number of sessions in the system. A key advantage of the proposed scheme is that it introduces only minor inaccuracy in the implemented algorithm. To reduce the cost of basic operations, we propose a hardware implementation framework and several novel techniques that reduce the on-chip memory size, off-chip memory bandwidth, and off-chip access latency. We present a single chip implementation of WF 2 Q+, one of the most accurate Fair Queueing algorithms, that runs at 622 Mbps. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bennett and H. Zhang. </author> <title> Hierarchical packet fair queueing algorithms. </title> <booktitle> In Proceedings of the ACM-SIGCOMM 96, </booktitle> <pages> pages 143156, </pages> <address> Palo Alto, CA, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service <ref> [1] </ref>. <p> A number of PFQ algorithms have been proposed that have virtual time functions with complexity of O (1) or O (log N ) <ref> [1, 5, 6, 13] </ref>. While the algorithmtic complexity of implementing a pri-ority queue for N arbitrary numbers is O (logN ), it is possible to implement Fair Queueing with mechanisms of lower complexity by taking advantage of the properties of Fair Queueing algorithms [10]. <p> The resulted FBFQ algorithm can provide the same delay bound as WFQ. An even more accurate virtual time function, V W F 2 Q+ , is proposed in <ref> [1] </ref> and iteratively defined as follows: V W F 2 Q+ (t+t ) = max (V W F 2 Q+ (t)+t; min i2 ^ B (t) (S i (t))) where ^ B (t) is the set of sessions backlogged in the WF 2 Q+ system at time t. 2.2 Packet Selection <p> In [2], we introduced a metric called Worst-case Fair Index (WFI) to characterize the service discrepancy between a PFQ algorithm and the idealized GPS. We showed that large WFI's are detrimental to the performance of best-effort and link-sharing services <ref> [1, 2] </ref>. All PFQ algorithms using SFF policy have large WFI's. In [1, 2], we proposed two algorithms WF 2 Q and WF 2 Q+ that use a different packet selection policy. <p> We showed that large WFI's are detrimental to the performance of best-effort and link-sharing services <ref> [1, 2] </ref>. All PFQ algorithms using SFF policy have large WFI's. In [1, 2], we proposed two algorithms WF 2 Q and WF 2 Q+ that use a different packet selection policy. With these algorithms, when the server is picking the next packet transmit, it chooses, among all the eligible packets, the one with the smallest virtual finish time.
Reference: [2] <author> J. Bennett and H. Zhang. </author> <title> WF 2 Q: Worst-case fair weighted fair queueing. </title> <booktitle> In Proceedings of IEEE INFOCOM'96, </booktitle> <pages> pages 120128, </pages> <address> San Francisco, CA, </address> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: We call such a packet selection policy the Smallest virtual Finish time First or SFF policy. While PFQ algorithms using SFF policy can provide al-most identical delay bounds as GPS, they may still introduce large service discrepancies from GPS. In <ref> [2] </ref>, we introduced a metric called Worst-case Fair Index (WFI) to characterize the service discrepancy between a PFQ algorithm and the idealized GPS. We showed that large WFI's are detrimental to the performance of best-effort and link-sharing services [1, 2]. All PFQ algorithms using SFF policy have large WFI's. <p> In [2], we introduced a metric called Worst-case Fair Index (WFI) to characterize the service discrepancy between a PFQ algorithm and the idealized GPS. We showed that large WFI's are detrimental to the performance of best-effort and link-sharing services <ref> [1, 2] </ref>. All PFQ algorithms using SFF policy have large WFI's. In [1, 2], we proposed two algorithms WF 2 Q and WF 2 Q+ that use a different packet selection policy. <p> We showed that large WFI's are detrimental to the performance of best-effort and link-sharing services <ref> [1, 2] </ref>. All PFQ algorithms using SFF policy have large WFI's. In [1, 2], we proposed two algorithms WF 2 Q and WF 2 Q+ that use a different packet selection policy. With these algorithms, when the server is picking the next packet transmit, it chooses, among all the eligible packets, the one with the smallest virtual finish time.
Reference: [3] <author> H. Chao. </author> <title> Architecture design for regulating and scheduling user's traffic in ATM networks. </title> <booktitle> In Proceedings of ACM SIGCOMM'92, </booktitle> <pages> pages 7787, </pages> <address> Baltimore, Maryland, </address> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. While there are many PFQ algorithms proposed, with different tradeoffs between complexity and accuracy <ref> [3, 5, 6, 10, 12, 13, 14] </ref>, few real implementation exists that can achieve all of the three following goals: 1. support a large number of VCs with diverse band width requirements, 2. operate at very high speeds, OC-3 and higher, 3. maintain important properties of GPS (delay bound, fairness, worst-case <p> Therefore, even though SCFQ, SFQ, LFVC, FBFQ, and WF Q+ have simple virtual time functions, their overall implementation complexity still grows with the number of sessions sharing the link. While it has been demonstrated that sorting can be implemented at very high speed with several hundreds of connections <ref> [3] </ref>, it is unclear whether such implementations can scale to large networks with tens of thousands of sessions competing for a single link. 3 Implementation Architecture In this section, we present an architecture that can efficiently implement a class of PFQ algorithms in ATM networks where all cells have the same
Reference: [4] <author> A. Charny, K. Ramakrishnan, and A. G. Lauck. </author> <title> Scalability issues for distributed explicit rate allocation in atm networks. </title> <booktitle> In IEEE INFOCOM'96, </booktitle> <address> San Francisco, </address> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: In <ref> [4] </ref> it has been demonstrated in the context of the ABR service, that high network utilization can be achieved even with differences as large as a 10% between consecutive rates.
Reference: [5] <author> S. Golestani. </author> <title> A self-clocked fair queueing scheme for broadband applications. </title> <booktitle> In Proceedings of IEEE INFO-COM'94, </booktitle> <pages> pages 636646, </pages> <address> Toronto, CA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. While there are many PFQ algorithms proposed, with different tradeoffs between complexity and accuracy <ref> [3, 5, 6, 10, 12, 13, 14] </ref>, few real implementation exists that can achieve all of the three following goals: 1. support a large number of VCs with diverse band width requirements, 2. operate at very high speeds, OC-3 and higher, 3. maintain important properties of GPS (delay bound, fairness, worst-case <p> A number of PFQ algorithms have been proposed that have virtual time functions with complexity of O (1) or O (log N ) <ref> [1, 5, 6, 13] </ref>. While the algorithmtic complexity of implementing a pri-ority queue for N arbitrary numbers is O (logN ), it is possible to implement Fair Queueing with mechanisms of lower complexity by taking advantage of the properties of Fair Queueing algorithms [10].
Reference: [6] <author> P. Goyal, H. Vin, and H. Chen. </author> <title> Start-time Fair Queuing: A scheduling algorithm for integrated services. </title> <booktitle> In Proceedings of the ACM-SIGCOMM 96, </booktitle> <pages> pages 157168, </pages> <address> Palo Alto, CA, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. While there are many PFQ algorithms proposed, with different tradeoffs between complexity and accuracy <ref> [3, 5, 6, 10, 12, 13, 14] </ref>, few real implementation exists that can achieve all of the three following goals: 1. support a large number of VCs with diverse band width requirements, 2. operate at very high speeds, OC-3 and higher, 3. maintain important properties of GPS (delay bound, fairness, worst-case <p> A number of PFQ algorithms have been proposed that have virtual time functions with complexity of O (1) or O (log N ) <ref> [1, 5, 6, 13] </ref>. While the algorithmtic complexity of implementing a pri-ority queue for N arbitrary numbers is O (logN ), it is possible to implement Fair Queueing with mechanisms of lower complexity by taking advantage of the properties of Fair Queueing algorithms [10].
Reference: [7] <author> S. Keshav. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In Proceedings of ACM SIGCOMM'91, </booktitle> <pages> pages 315, </pages> <address> Zurich, Switzerland, </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic <ref> [7, 11] </ref> and hierarchical link-sharing service [1].
Reference: [8] <author> A. Parekh. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks. </title> <type> PhD dissertation, </type> <institution> Massachusetts Institute of Technology, </institution> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: Recently, a class of service disciplines called Packet Fair Queueing (PFQ) algorithms have received much attention. PFQ algorithms approximate the idealized Generalized Processor Sharing (GPS) policy <ref> [8] </ref>, which is proven to have two desirable properties: (a) it can guarantee an end-to-end delay to leaky bucket constrained session regardless the behavior of other sessions; (b) it can ensure instantaneous fair allocation of bandwidth among all backlogged sessions regardless of whether or not their traffic is constrained. <p> The former property is the basis for supporting guaranteed service traffic <ref> [8] </ref> while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. <p> By taking advantage of the globally bounded timestamp property, which bounds the difference between system virtual time and the virtual start time of all sessions, we can reduce the memory requirements by more than 50%. 2 Background: PFQ Algorithms PFQ are packet approximation algorithms for the GPS discipline <ref> [8] </ref>. A GPS server has N queues, each associated with a service share. During any time interval when there are exactly M non-empty queues, the server serves the M packets at the head of the queues simultaneously, in proportion to their service shares.
Reference: [9] <author> J. L. Rexford, A. G. Greenberg, and F. G. Bonomi. </author> <title> Hardware-efficient fair queueing architectures for high-speed networks. </title> <booktitle> In IEEE INFOCOM'96, </booktitle> <address> San Francisco, </address> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: Using modular arithmetic, timestamps represented by finite number of bits n can be compared without ambiguity if difference between them is is less than 2 n1 . Using this property it was suggested in <ref> [9] </ref> that the size of the times-tamps in the system only need to be a few bits larger than the number of bits needed to represent the smallest rate in the system, r min , as it has the largest service interval, L . <p> Since this can all be done in 500ns, the sched-uler is fully capable of OC-12 (622Mbps) operation. 5 Related Work The idea of scheduling among all rate groups instead of all sessions was first proposed by Rexford et. al <ref> [9] </ref>. With Rexford's algorithm, sessions with similar throughput parameters are placed into one of a small number of groups. Two levels of scheduling are then used to select the session. <p> Adjusting the weight according to the set of backlogged sessions in the packet system can result in large errors. This potential deficiency of the algorithm is briefly discussed in <ref> [9] </ref>. In contrast, our grouping technique is used solely to simplify the sorting of sessions. Scheduling is still performed among the sessions themselves.
Reference: [10] <author> S. Suri and G. Varghese and G. Chandranmenon. </author> <title> Leap Forward Virtual Clock. </title> <booktitle> In Proceedings of INFOCOM 97, </booktitle> <address> Kobe, Japan, </address> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. While there are many PFQ algorithms proposed, with different tradeoffs between complexity and accuracy <ref> [3, 5, 6, 10, 12, 13, 14] </ref>, few real implementation exists that can achieve all of the three following goals: 1. support a large number of VCs with diverse band width requirements, 2. operate at very high speeds, OC-3 and higher, 3. maintain important properties of GPS (delay bound, fairness, worst-case <p> While the algorithmtic complexity of implementing a pri-ority queue for N arbitrary numbers is O (logN ), it is possible to implement Fair Queueing with mechanisms of lower complexity by taking advantage of the properties of Fair Queueing algorithms <ref> [10] </ref>. However, as discussed in Section 5, there are a number of difficulties to apply this technique in a high speed implementation. <p> By observing that the range of virtual times of all sessions at any given time is bounded, Suri, Varghese, and Chandranmemon map the priority queue management problem to that of searching in a finite-universe <ref> [10] </ref>. In such a universe, a priority queue can be used that supports insert, delete, and successor in O (loglogN ) time, when the elements are in the range [0; N ].
Reference: [11] <author> S. Shenker. </author> <title> Making greed work in networks: A game theoretical analysis of switch service disciplines. </title> <booktitle> In Proceedings of ACM SIGCOMM'94, </booktitle> <pages> pages 4757, </pages> <address> London, UK, </address> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic <ref> [7, 11] </ref> and hierarchical link-sharing service [1].
Reference: [12] <author> M. Shreedhar and G. Varghese. </author> <title> Efficient fair queueing using deficit round robin. </title> <booktitle> In Proceedings of SIGCOMM'95, </booktitle> <pages> pages 231243, </pages> <address> Boston, MA, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. While there are many PFQ algorithms proposed, with different tradeoffs between complexity and accuracy <ref> [3, 5, 6, 10, 12, 13, 14] </ref>, few real implementation exists that can achieve all of the three following goals: 1. support a large number of VCs with diverse band width requirements, 2. operate at very high speeds, OC-3 and higher, 3. maintain important properties of GPS (delay bound, fairness, worst-case
Reference: [13] <author> D. Stilliadis and A. Verma. </author> <title> Design and analysis of frame-based fair queueing: A new traffic scheduling algorithm for packet-switched networks. </title> <booktitle> In Proceedings of ACM SIG-METRICS'96, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. While there are many PFQ algorithms proposed, with different tradeoffs between complexity and accuracy <ref> [3, 5, 6, 10, 12, 13, 14] </ref>, few real implementation exists that can achieve all of the three following goals: 1. support a large number of VCs with diverse band width requirements, 2. operate at very high speeds, OC-3 and higher, 3. maintain important properties of GPS (delay bound, fairness, worst-case <p> A number of PFQ algorithms have been proposed that have virtual time functions with complexity of O (1) or O (log N ) <ref> [1, 5, 6, 13] </ref>. While the algorithmtic complexity of implementing a pri-ority queue for N arbitrary numbers is O (logN ), it is possible to implement Fair Queueing with mechanisms of lower complexity by taking advantage of the properties of Fair Queueing algorithms [10]. <p> While V SCF Q (t) is quite simple to compute, the resulted SCFQ algorithm provides much larger delay bounds that WFQ. A more accurate virtual time function V F BF Q () that can also be computed directly from the packet system is proposed in <ref> [13] </ref>. The resulted FBFQ algorithm can provide the same delay bound as WFQ.
Reference: [14] <author> G. Xie and S. Lam. </author> <title> An efficient channel scheduler for real-time traffic. </title> <type> Technical Report TR-95-29, </type> <institution> University of Texas at Austin, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: The former property is the basis for supporting guaranteed service traffic [8] while the later property is important for supporting best-effort service traffic [7, 11] and hierarchical link-sharing service [1]. While there are many PFQ algorithms proposed, with different tradeoffs between complexity and accuracy <ref> [3, 5, 6, 10, 12, 13, 14] </ref>, few real implementation exists that can achieve all of the three following goals: 1. support a large number of VCs with diverse band width requirements, 2. operate at very high speeds, OC-3 and higher, 3. maintain important properties of GPS (delay bound, fairness, worst-case
Reference: [15] <author> H. Zhang and D. Ferrari. </author> <title> Rate-controlled service disciplines. Journal of High Speed Networks, </title> <address> 3(4):389412, </address> <year> 1994. </year>
Reference-contexts: This controller implements a rate controlled variation of WF 2 Q+ <ref> [15] </ref> to address the requirements of the service provider marketplace. It should be noted that a work conserving WF 2 Q+ scheduler could be implemented with the same complexity as the rate controlled variant. The implementation provides each port with up to 64 different rate groups.
References-found: 15

