URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr94/tr94-030.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr94-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Incorporating Flexible and Expressive Rule Control in a Graph-based Transaction Framework  
Abstract: Ramamohanrao Jawadi Stanley Y.W. Su Technical Report TR94-030 Database Systems Research and Development Center Department of Computer and Information Sciences University of Florida, Gainesville, FL 32611 rsj,su@cis.ufl.edu Abstract The need for user-defined execution orders (or control structures) for rules is well recognized by researchers of active database management systems. Priority-based approaches (e.g., numeric priorities) have been used to specify a desired control structure among rules. However, due to the fact that fixed priorities are assigned to rules, independent of different contexts in which they may be triggered, the existing approaches are not able to allow rules to be executed following different control structures when they are triggered by different events. More flexible and expressive control mechanisms are often needed for rules in advanced database applications such as CAD/CAM, CASE, CIM and flexible manufacturing systems. Since rules in database environments are executed in a transaction framework, an expressive transaction model is needed to model complex control structures among rules uniformly. In this work, we separate the event part from the condition-action parts of a rule and associate it with a rule graph which represents a set of rules (actually a set of condition-action pairs) sharing the same control structure. Different rule graphs can be defined under different event specifications thereby enabling a set of rules to follow different control structures when triggered by different events. We also use an expressive graph-based transaction model to incorporate the control structures of rule graphs uniformly in a transaction framework. The proposed rule and transaction modeling and execution techniques have been implemented and verified on a shared-nothing multiprocessor computer nCUBE2 which exploits the parallel execution properties of independent rules (tasks) in a rule graph (transaction graph). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, R. Cochrane, and B. Lindsay. </author> <title> On maintaining priorities in a production rule system. </title> <booktitle> In Proc. 17th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 479-487, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> September </month> <year> 1991. </year>
Reference-contexts: General diagnosis). In those existing active DBMSs in which fixed priorities are assigned to ECA rules (e.g. POSTGRES [33], HiPAC [11], Ariel [17], Alert <ref> [1] </ref> and Starburst [36]), different control structures for a single set of rules cannot be accommodated. Furthermore, ECA rules with fixed priorities (e.g., numeric priorities) cannot always accommodate a new rule with the desired priority. <p> In existing systems, control structure for multiple rules triggered by a single event is specified using rule priorities <ref> [33, 17, 1, 6] </ref>. In a priority-based approach, when a set of rules is triggered by an event, rules in that set have to follow the same control structure (which is derived from rule priorities) during their execution, independent of the event that triggered them. <p> We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert <ref> [1] </ref> support priorities to define complex control structures among rules. However, priority-based rule control is not flexible and expressive enough to support the control requirements of rules in advanced DB applications.
Reference: [2] <author> P. Attie, M. Singh, M. Rusinkiewicz, and A. Sheth. </author> <title> Specifying and enforcing intertask dependencies. </title> <booktitle> In Proc. 19th Int'l Conf. on Very Large Data Bases, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: The nested transaction model is a special case of the graph-based model, i.e., the case when triggered rules are not connected by a control structure. Several expressive transaction models have 20 been reported in <ref> [8, 35, 4, 2] </ref>. However, they do not focus on the uniform incorporation of rules, rule control and trigger times in the transaction framework. The majority of existing active DBMSs have been implemented in sequential and centralized environments.
Reference: [3] <author> C. Beeri and T. Milo. </author> <title> A model for active object oriented database. </title> <booktitle> In Proc. 17th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 337-349, </pages> <address> Barcelona, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules. <p> The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> In [18], Hsu, Ladin and McCarthy describe a more expressive model which is basically an extended nested transaction model to capture rules and nested triggerings of rules uniformly. Other significant works that use variants of the nested transaction model for modeling the execution of rules are <ref> [3, 5, 27] </ref>. However, the tree-based structure of the nested model is not expressive enough to capture graph-based control structures among rules in a uniform fashion.
Reference: [4] <author> A. Buchmann, M. T. Ozsu, M. Hornick, D. Georgakopoulos, and F. A. Manola. </author> <title> A transaction model for active distributed object systems. </title> <editor> In A. Elmagarmid, editor, </editor> <booktitle> Database transaction models for advanced applications, </booktitle> <pages> pages 123-158. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: In addition, using 3 rule graphs, new rules with desired control requirements can be inserted and independent rules can be explicitly specified. We also adopt the graph-based transaction model used in DOM <ref> [4] </ref>, ACTA [8] and ConTract [35] to model the control structure of operations which define a transaction. <p> The nested transaction model is a special case of the graph-based model, i.e., the case when triggered rules are not connected by a control structure. Several expressive transaction models have 20 been reported in <ref> [8, 35, 4, 2] </ref>. However, they do not focus on the uniform incorporation of rules, rule control and trigger times in the transaction framework. The majority of existing active DBMSs have been implemented in sequential and centralized environments.
Reference: [5] <author> S. Ceri and J. Widom. </author> <title> Production rules in parallel and distributed database environments. </title> <booktitle> In Proc. 18th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 339-352, </pages> <address> Vancouver, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> In [18], Hsu, Ladin and McCarthy describe a more expressive model which is basically an extended nested transaction model to capture rules and nested triggerings of rules uniformly. Other significant works that use variants of the nested transaction model for modeling the execution of rules are <ref> [3, 5, 27] </ref>. However, the tree-based structure of the nested model is not expressive enough to capture graph-based control structures among rules in a uniform fashion. <p> Therefore, it can be readily adapted for the execution of rules with complex events [15]. Furthermore, it is general enough to have rules 21 executed at arbitrary points 3 of a transaction's life time as suggested in <ref> [5] </ref>. Acknowledgments: The authors would like to thank Dr. Eric Hanson for the detailed comments on the previous version of this paper and Dr. Sharma Chakravarthy for several useful discussions on the graph-based transaction model. Thanks to Kurt Engel for his proof reading.
Reference: [6] <author> S. Chakravarthy, V. Krishnaprasad, E. Anwar, and S.-K. Kim. </author> <title> Composite events for active databases: Semantics, contexts and detection. </title> <booktitle> In to appear in Proc. of 20th Int'l Conf. on Very Large Data Bases, </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: In existing systems, control structure for multiple rules triggered by a single event is specified using rule priorities <ref> [33, 17, 1, 6] </ref>. In a priority-based approach, when a set of rules is triggered by an event, rules in that set have to follow the same control structure (which is derived from rule priorities) during their execution, independent of the event that triggered them.
Reference: [7] <author> P. V. Cherukuri. </author> <title> A task manager for parallel rule execution in multi-processor environments. </title> <type> Master's thesis, </type> <institution> Department of Electrical Engineering, University of Florida, </institution> <year> 1993. </year>
Reference-contexts: A detailed discussion of recovery techniques is out of the scope of this paper. 4 Parallel Implementation The proposed rule and transaction execution models have been implemented on an nCUBE2 computer as part of a parallel active OO knowledge base management system - OSAM*.KBMS/P 15 implementation <ref> [7, 23, 26] </ref>. The objective of this implementation is to test the implementability of the proposed models and demonstrate that the parallel execution property of graph structures can be exploited to achieve efficient transaction and rule execution.
Reference: [8] <author> P. K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: The SAGA continues. </title> <editor> In A. Elmagarmid, editor, </editor> <booktitle> Database transaction models for advanced applications, </booktitle> <pages> pages 349-398. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: In addition, using 3 rule graphs, new rules with desired control requirements can be inserted and independent rules can be explicitly specified. We also adopt the graph-based transaction model used in DOM [4], ACTA <ref> [8] </ref> and ConTract [35] to model the control structure of operations which define a transaction. <p> The nested transaction model is a special case of the graph-based model, i.e., the case when triggered rules are not connected by a control structure. Several expressive transaction models have 20 been reported in <ref> [8, 35, 4, 2] </ref>. However, they do not focus on the uniform incorporation of rules, rule control and trigger times in the transaction framework. The majority of existing active DBMSs have been implemented in sequential and centralized environments.
Reference: [9] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <booktitle> Introduction to Algorithms, </booktitle> <pages> pages 536-538. </pages> <publisher> McGraw Hill Book Company, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: To be more general, the concurrent execution of rules is correct when it is equivalent to some topological serial order <ref> [9] </ref> of rules.
Reference: [10] <author> C.T. Davies. </author> <title> Recovery semantics of a db/dc system. </title> <booktitle> In Proc. of ACM national conference, </booktitle> <year> 1973. </year>
Reference-contexts: In TGM, a transaction is viewed as a control graph of DB operations (or tasks) as shown in Figure 3.a. In this Figure, t1-t5 are different DB tasks. Boxes represent the spheres of control <ref> [10] </ref> and the directed edges represent the control structure. This can be shown in a tree form as 9 depicted in Figure 3.b, in which solid lines represent parent-child relationships and dashed lines represent the control structure among the tasks. Each task in turn can have a graph structure.
Reference: [11] <author> U. Dayal, B. Blaustein, A. Buchmann, S. Chakravarthy, et al. </author> <title> The HiPAC project: Combining active databases and timing constraints. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 17(1) </volume> <pages> 51-70, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules <ref> [11] </ref>, which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications [18, 33, 34, 17, 36, 3, 12, 31]. <p> General diagnosis). In those existing active DBMSs in which fixed priorities are assigned to ECA rules (e.g. POSTGRES [33], HiPAC <ref> [11] </ref>, Ariel [17], Alert [1] and Starburst [36]), different control structures for a single set of rules cannot be accommodated. Furthermore, ECA rules with fixed priorities (e.g., numeric priorities) cannot always accommodate a new rule with the desired priority. <p> The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC <ref> [11] </ref>, Starburst [36] and Alert [1] support priorities to define complex control structures among rules. However, priority-based rule control is not flexible and expressive enough to support the control requirements of rules in advanced DB applications.
Reference: [12] <author> O. Diaz, N. Paton, and P. Gray. </author> <title> Rule management in object oriented databases: A uniform approach. </title> <booktitle> In Proc. 17th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 317-326, </pages> <address> Barcelona, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules.
Reference: [13] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in database systems. </title> <journal> Communications of the ACM 19, </journal> <volume> 10(11), </volume> <month> Nov. </month> <year> 1976. </year>
Reference-contexts: define the correctness criterion for the concurrent execution of rules and tasks within a TG and discuss two scheduling algorithms and a locking scheme which are useful for maintaining correctness. 12 3.2.1 Correctness Criterion At the transaction-level, the correctness criterion for concurrent execution of several TGs is the standard serializability <ref> [13] </ref> which states that the interleaved (concurrent) execution of several TGs is correct when it is equivalent to some serial execution. Within a TG, the control structure among tasks and triggered rules plays a role in defining correctness.
Reference: [14] <author> O. Etzion. </author> <title> PARDES-a data-driven oriented active database model. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 22(1) </volume> <pages> 7-14, </pages> <year> 1993. </year>
Reference-contexts: The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules.
Reference: [15] <author> N. H. Gehani, H. V. Jagadish, and O. Shmueli. </author> <title> Event Specification in an Object-Oriented Database. </title> <booktitle> In Proc. ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year> <title> 3 That is before or after any task in the transaction. </title> <type> 22 </type>
Reference-contexts: It should be noted that the structure of a transaction graph models all the trigger times, and is independent of the complexity of an event specification. Therefore, it can be readily adapted for the execution of rules with complex events <ref> [15] </ref>. Furthermore, it is general enough to have rules 21 executed at arbitrary points 3 of a transaction's life time as suggested in [5]. Acknowledgments: The authors would like to thank Dr. Eric Hanson for the detailed comments on the previous version of this paper and Dr.
Reference: [16] <author> J. Gray and A. Reuter. </author> <title> Transaction processing: Concepts and technques. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: Although, the execution of rules having complex control structures can be supported by extended implementations of flat <ref> [16] </ref> or nested transaction models [24], these models are not expressive enough to model graph-based control structures among operations in a transaction and structured rules uniformly. To uniformly capture graph-based control structure among transaction operations and rules, a more expressive transaction model (e.g., a graph-based model) would be needed.
Reference: [17] <author> E. N. Hanson. </author> <title> An initial report on the design of Ariel: a DBMS with an integrated production rule system. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules. <p> General diagnosis). In those existing active DBMSs in which fixed priorities are assigned to ECA rules (e.g. POSTGRES [33], HiPAC [11], Ariel <ref> [17] </ref>, Alert [1] and Starburst [36]), different control structures for a single set of rules cannot be accommodated. Furthermore, ECA rules with fixed priorities (e.g., numeric priorities) cannot always accommodate a new rule with the desired priority. <p> In existing systems, control structure for multiple rules triggered by a single event is specified using rule priorities <ref> [33, 17, 1, 6] </ref>. In a priority-based approach, when a set of rules is triggered by an event, rules in that set have to follow the same control structure (which is derived from rule priorities) during their execution, independent of the event that triggered them. <p> The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel <ref> [17] </ref>, HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. However, priority-based rule control is not flexible and expressive enough to support the control requirements of rules in advanced DB applications.
Reference: [18] <author> M. Hsu, R. Ladin, and D. McCarthy. </author> <title> An execution model for active database management systems. </title> <booktitle> In Proceedings of the 3rd International Conference on Data and Knowledge Bases, </booktitle> <pages> pages 171-179, </pages> <address> Washington, DC, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules. <p> In this way, all the rule graphs whose execution is delayed until just before the commit time are executed in the same order in which they were triggered. It is important for some applications to maintain such order of execution <ref> [18] </ref>. 11 * In case of parallel as the trigger time, the triggered rule graph is executed as a separate TG in parallel with the triggering TG. It is completely detached from the triggering TG in all respects except a causal relationship. <p> The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> In an active DB environment, the rule execution must be uniformly incorporated into a transaction framework. In POSTGRES and Ariel, the execution of rules has been incorporated into a flat transaction model. In <ref> [18] </ref>, Hsu, Ladin and McCarthy describe a more expressive model which is basically an extended nested transaction model to capture rules and nested triggerings of rules uniformly. Other significant works that use variants of the nested transaction model for modeling the execution of rules are [3, 5, 27].
Reference: [19] <author> T. Ishida. </author> <title> Parallel rule firing in production systems. </title> <journal> IEEE Trans. Knowledge Data Eng., </journal> <volume> 3(1) </volume> <pages> 11-17, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: In these systems, a single rule is selected in the conflict resolution phase, although multiple rules can be executed (or fired) without violating priorities. In the field of Artificial Intelligence, a significant amount of research has focused on parallel rule execution and rule control <ref> [30, 19, 32, 21] </ref>. Similar to our system, RUBIC [21] and PARULEL [32] provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. <p> Similar to our system, RUBIC [21] and PARULEL [32] provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. Rule systems presented in <ref> [30, 19] </ref> guarantee serializability during the parallel execution of rules by the static analysis of rules. However, they do not provide any rule control constructs. Our system has been implemented on a shared-nothing parallel computer.
Reference: [20] <author> R.S. Jawadi. </author> <title> Graph-based rule and transaction execution in an Object-oriented knowledge base management system. </title> <type> Ph.D. dissertation, </type> <institution> Department of Computer and Information Sciences, University of Florida, </institution> <year> 1994. </year>
Reference-contexts: The theorems that prove the correctness of the above scheduling algorithms and locking rules are not given here because of the space limitation and the reader is referred to <ref> [20] </ref> for the proofs. The recovery of a transaction graph can be done using the variants of standard recovery methods used for the nested transaction model [25, 28].
Reference: [21] <author> S. Kuo and D. Moldovan. </author> <title> Implementation of multiple rule firing production systems on hypercube. </title> <journal> Journal on Parallel and Distributed Computing, </journal> <volume> 13(4) </volume> <pages> 383-394, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: In these systems, a single rule is selected in the conflict resolution phase, although multiple rules can be executed (or fired) without violating priorities. In the field of Artificial Intelligence, a significant amount of research has focused on parallel rule execution and rule control <ref> [30, 19, 32, 21] </ref>. Similar to our system, RUBIC [21] and PARULEL [32] provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. <p> In the field of Artificial Intelligence, a significant amount of research has focused on parallel rule execution and rule control [30, 19, 32, 21]. Similar to our system, RUBIC <ref> [21] </ref> and PARULEL [32] provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. Rule systems presented in [30, 19] guarantee serializability during the parallel execution of rules by the static analysis of rules.
Reference: [22] <author> H. Lam and S.Y.W. Su. GTOOLS: </author> <title> An active graphical user interface toolset for an object-oriented KBMS. </title> <journal> International Journal of Computer System Science and Engineering, </journal> <volume> 7(2) </volume> <pages> 69-85, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: The clients C1, C2,...Cn, each of which is running on a workstation connected to the server by an inter-connection network (Ethernet), each have an X-Motif graphical user interface (GUI) for editing and browsing TGs, rule graphs, queries and DB schemas <ref> [22] </ref>. A client translates a TG into an intermediate form and sends it to the server through the inter-connection network. For efficient processing of transaction and rule graphs, we have implemented the server on a 64-node nCUBE2. The server's architecture is designed to be scalable and asynchronous.
Reference: [23] <author> Q. Li. </author> <title> Design and Implementation of a Parallel Object-Oriented Query Processor for OSAM*.KBMS/P. </title> <type> Master's thesis, </type> <institution> Department of Electrical Engineering, University of Florida, </institution> <year> 1993. </year>
Reference-contexts: A detailed discussion of recovery techniques is out of the scope of this paper. 4 Parallel Implementation The proposed rule and transaction execution models have been implemented on an nCUBE2 computer as part of a parallel active OO knowledge base management system - OSAM*.KBMS/P 15 implementation <ref> [7, 23, 26] </ref>. The objective of this implementation is to test the implementability of the proposed models and demonstrate that the parallel execution property of graph structures can be exploited to achieve efficient transaction and rule execution.
Reference: [24] <author> E. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1985. </year>
Reference-contexts: Although, the execution of rules having complex control structures can be supported by extended implementations of flat [16] or nested transaction models <ref> [24] </ref>, these models are not expressive enough to model graph-based control structures among operations in a transaction and structured rules uniformly. To uniformly capture graph-based control structure among transaction operations and rules, a more expressive transaction model (e.g., a graph-based model) would be needed.
Reference: [25] <author> E. Moss. </author> <title> Log-based recovery for nested transactions. </title> <booktitle> In Proc. 13th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 427-432, </pages> <address> Brighton, England, </address> <month> September </month> <year> 1987. </year>
Reference-contexts: The recovery of a transaction graph can be done using the variants of standard recovery methods used for the nested transaction model <ref> [25, 28] </ref>. The only difference is that, when a set of rules (tasks) in a rule (transaction) graph are being undone, they need to follow reverse topological order.
Reference: [26] <author> R. Nartey. </author> <title> The design and implementatation of a global transaction server and a lock manager for a parallel knowledge base management system. </title> <type> Master's thesis, </type> <institution> Department of Electrical Engineering, University of Florida, </institution> <year> 1994. </year>
Reference-contexts: A detailed discussion of recovery techniques is out of the scope of this paper. 4 Parallel Implementation The proposed rule and transaction execution models have been implemented on an nCUBE2 computer as part of a parallel active OO knowledge base management system - OSAM*.KBMS/P 15 implementation <ref> [7, 23, 26] </ref>. The objective of this implementation is to test the implementability of the proposed models and demonstrate that the parallel execution property of graph structures can be exploited to achieve efficient transaction and rule execution.
Reference: [27] <author> L. Raschid, T. Sellis, and A. Delis. </author> <title> A simulation-based study on the concurrent execution of rules in a database environment. </title> <journal> Journal on Parallel and Distributed Computing, </journal> <volume> 20(1) </volume> <pages> 20-42, </pages> <month> Jan </month> <year> 1994. </year>
Reference-contexts: The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> In [18], Hsu, Ladin and McCarthy describe a more expressive model which is basically an extended nested transaction model to capture rules and nested triggerings of rules uniformly. Other significant works that use variants of the nested transaction model for modeling the execution of rules are <ref> [3, 5, 27] </ref>. However, the tree-based structure of the nested model is not expressive enough to capture graph-based control structures among rules in a uniform fashion.
Reference: [28] <author> K. Rothermal and C. Mohan. ARIES/NT: </author> <title> A recovery method based on write ahead logging for nested transactions. </title> <booktitle> In Proc. 15th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 337-346, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: The recovery of a transaction graph can be done using the variants of standard recovery methods used for the nested transaction model <ref> [25, 28] </ref>. The only difference is that, when a set of rules (tasks) in a rule (transaction) graph are being undone, they need to follow reverse topological order.
Reference: [29] <author> N. Roussopoulos and A. Delis. </author> <title> Modern client-server DBMS architectures. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 20(3) </volume> <pages> 52-61, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: and rules, helps maintain the atomicity of transactions and rules, and helps process lock requests efficiently, and (iii) dynamic launching of rule processors for processing dynamically triggered rules. 4.1 Client/server Architecture The overall architecture of OSAM*.KBMS/P, as shown in Figure 9, is based on the standard client/server architecture explained in <ref> [29] </ref>. The clients C1, C2,...Cn, each of which is running on a workstation connected to the server by an inter-connection network (Ethernet), each have an X-Motif graphical user interface (GUI) for editing and browsing TGs, rule graphs, queries and DB schemas [22].
Reference: [30] <author> J. G. Schmolze. </author> <title> Guaranteeing serializable results in synchronous parallel production systems. </title> <journal> Journal on Parallel and Distributed Computing, </journal> <volume> 13(4) </volume> <pages> 348-365, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> In these systems, a single rule is selected in the conflict resolution phase, although multiple rules can be executed (or fired) without violating priorities. In the field of Artificial Intelligence, a significant amount of research has focused on parallel rule execution and rule control <ref> [30, 19, 32, 21] </ref>. Similar to our system, RUBIC [21] and PARULEL [32] provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. <p> Similar to our system, RUBIC [21] and PARULEL [32] provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. Rule systems presented in <ref> [30, 19] </ref> guarantee serializability during the parallel execution of rules by the static analysis of rules. However, they do not provide any rule control constructs. Our system has been implemented on a shared-nothing parallel computer.
Reference: [31] <author> E. Simon, J. Kiernan, and C. deMaindreville. </author> <title> Implementing high level active rules on top of a relational DBMS. </title> <booktitle> In Proc. 18th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 315-326, </pages> <address> Vancouver, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules. <p> The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. However, priority-based rule control is not flexible and expressive enough to support the control requirements of rules in advanced DB applications. In <ref> [31] </ref>, RDL1 supports a set of control constructs namely 'sequence', 'disjunction' and 'saturate', for specifying the control structures among rules. In RDL1, rules are defined in modules.
Reference: [32] <author> S. J. Stolfo, O. Wolfson, P. K. Chan, H. M. Dewan, L. Woodbury, J. S. Glazier, and D. A. Ohsie. PARULEL: </author> <title> Parallel rule processing using meta-rules for redaction. </title> <journal> Journal on Parallel and Distributed Computing, </journal> <volume> 13(4) </volume> <pages> 366-382, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: In these systems, a single rule is selected in the conflict resolution phase, although multiple rules can be executed (or fired) without violating priorities. In the field of Artificial Intelligence, a significant amount of research has focused on parallel rule execution and rule control <ref> [30, 19, 32, 21] </ref>. Similar to our system, RUBIC [21] and PARULEL [32] provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. <p> In the field of Artificial Intelligence, a significant amount of research has focused on parallel rule execution and rule control [30, 19, 32, 21]. Similar to our system, RUBIC [21] and PARULEL <ref> [32] </ref> provide several control constructs to control the parallel execution of rules, nevertheless, they do not guarantee the serializable execution of rules. Rule systems presented in [30, 19] guarantee serializability during the parallel execution of rules by the static analysis of rules.
Reference: [33] <author> M. Stonebraker, E. Hanson, and S. Potamianos. </author> <title> The POSTGRES rule manager. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(7) </volume> <pages> 897-907, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules. <p> Second, different events may trigger the same set of rules but require the rules to follow different control structures during their execution due to different event semantics (e.g., Engine overheating vs. General diagnosis). In those existing active DBMSs in which fixed priorities are assigned to ECA rules (e.g. POSTGRES <ref> [33] </ref>, HiPAC [11], Ariel [17], Alert [1] and Starburst [36]), different control structures for a single set of rules cannot be accommodated. Furthermore, ECA rules with fixed priorities (e.g., numeric priorities) cannot always accommodate a new rule with the desired priority. <p> In existing systems, control structure for multiple rules triggered by a single event is specified using rule priorities <ref> [33, 17, 1, 6] </ref>. In a priority-based approach, when a set of rules is triggered by an event, rules in that set have to follow the same control structure (which is derived from rule priorities) during their execution, independent of the event that triggered them. <p> The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES <ref> [33] </ref>, Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. However, priority-based rule control is not flexible and expressive enough to support the control requirements of rules in advanced DB applications.
Reference: [34] <author> S. Y. W. Su, V. Krishnamurthy, and H. Lam. </author> <title> An object-oriented semantic association model (OSAM*). </title> <editor> In S. Kumara, A. L. Soyster, and R. L. Kashyap, editors, </editor> <booktitle> Artificial intelligence: Manufacturing theory and practice, </booktitle> <pages> pages 463-494. </pages> <institution> Institute of Industrial Engineers, Industrial Engineering and Management Press, </institution> <address> Norcross, GA, </address> <year> 1989. </year> <month> 23 </month>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules. <p> An example rule graph specification corresponding to Figure 1.b is given below. Rule_graph RG1 is Triggered: Before General_diagnosis () r5: r6: r3: r1: End RG1; In our object-oriented data model <ref> [34] </ref> and its extension, rule graphs applicable to instances of an object class are defined in the RULE GRAPHS section of the class definition. An example class definition is given in Figure 2. Rule graphs applicable to multiple classes are defined in the superclass of these classes.
Reference: [35] <author> H. Wachter and A. Reuter. </author> <title> The ConTract model. </title> <editor> In A. Elmagarmid, editor, </editor> <booktitle> Database transaction models for advanced applications, </booktitle> <pages> pages 219-264. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: In addition, using 3 rule graphs, new rules with desired control requirements can be inserted and independent rules can be explicitly specified. We also adopt the graph-based transaction model used in DOM [4], ACTA [8] and ConTract <ref> [35] </ref> to model the control structure of operations which define a transaction. The graph-based model not only has higher expressive power than the linear (flat) or tree-structured (nested) transaction models, but also allows rule graphs to be incorporated in the transaction framework in a natural and uniform fashion. <p> The nested transaction model is a special case of the graph-based model, i.e., the case when triggered rules are not connected by a control structure. Several expressive transaction models have 20 been reported in <ref> [8, 35, 4, 2] </ref>. However, they do not focus on the uniform incorporation of rules, rule control and trigger times in the transaction framework. The majority of existing active DBMSs have been implemented in sequential and centralized environments.
Reference: [36] <author> J. Widom, R. J. Cochrane, and B. G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proc. 17th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> September </month> <year> 1991. </year> <month> 24 </month>
Reference-contexts: 1 Introduction Database management systems (DBMSs) coupled with Event-Condition-Action (ECA) rules [11], which are known as active DBMSs, are becoming increasingly popular because of their added features for supporting a wide spectrum of applications <ref> [18, 33, 34, 17, 36, 3, 12, 31] </ref>. In contrast to the passive DBMSs, active systems monitor a variety of events (e.g., external events, user defined operations, DB operations) and react to them automatically by triggering and processing the condition and the action parts of ECA rules. <p> General diagnosis). In those existing active DBMSs in which fixed priorities are assigned to ECA rules (e.g. POSTGRES [33], HiPAC [11], Ariel [17], Alert [1] and Starburst <ref> [36] </ref>), different control structures for a single set of rules cannot be accommodated. Furthermore, ECA rules with fixed priorities (e.g., numeric priorities) cannot always accommodate a new rule with the desired priority. <p> The scaleup can be further improved by launching multiple GTMs to receive incoming transactions in parallel and to schedule them to the underlying LTMs. 6 Related Work There have been several research efforts on rules, rule control and transaction framework in both AI and DB areas <ref> [18, 33, 11, 17, 30, 36, 3, 31, 5, 14, 27] </ref>. We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst [36] and Alert [1] support priorities to define complex control structures among rules. <p> We shall relate our work on graph-based rule and transaction models to them. The rule subsystems of active DBMSs: POSTGRES [33], Ariel [17], HiPAC [11], Starburst <ref> [36] </ref> and Alert [1] support priorities to define complex control structures among rules. However, priority-based rule control is not flexible and expressive enough to support the control requirements of rules in advanced DB applications.
References-found: 36

