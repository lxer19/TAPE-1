URL: http://www.robotics.stanford.edu/~getoor/papers/aaai97ws.ps
Refering-URL: http://www.robotics.stanford.edu/~getoor/papers.html
Root-URL: http://www.robotics.stanford.edu
Email: fromherz@parc.xerox.com  getoor@cs.stanford.edu  
Title: Online Scheduling for Reprographic Machines  
Author: Markus Fromherz Lise Getoor 
Address: 3333 Coyote Hill Road Palo Alto, CA 94304  Stanford, CA 94305-9010  
Affiliation: Xerox PARC  CS Dept Stanford University  
Abstract-found: 0
Intro-found: 1
Reference: <author> Fromherz, M., and Carlson, B. </author> <year> 1994. </year> <title> Optimal incremental and anytime scheduling. </title> <editor> In Lim, P., and Jourdan, J., eds., </editor> <booktitle> Proc. Workshop on Constraint Languages/Systems and their Use in Problem Modeling at ILPS'94, </booktitle> <pages> 45-59. TR 94-38. </pages>
Reference-contexts: Note, however, that a scheduling decision for a sheet does impact the scheduling decisions for sheets arbitrarily far away from it in the input; thus there is no simple greedy algorithm that is guaranteed to find the optimal solution <ref> (Fromherz & Carlson 1994) </ref>. However, scheduling for the basic machine is not NP-hard; there is a pseudo-polynomial time algorithm for finding the optimal schedule (Fromherz & Carlson 1994). <p> decisions for sheets arbitrarily far away from it in the input; thus there is no simple greedy algorithm that is guaranteed to find the optimal solution <ref> (Fromherz & Carlson 1994) </ref>. However, scheduling for the basic machine is not NP-hard; there is a pseudo-polynomial time algorithm for finding the optimal schedule (Fromherz & Carlson 1994). Research Directions for Online Scheduling As mentioned, it is usually not possible to wait until the scheduler has received a complete job and generated a schedule for it. In addition, scheduling and schedule execution typically happen in parallel. <p> Thus, the question is: which online decision strategy leads to overall optimal productivity? In this context, experiments on the basic model have shown that a good strategy leading to overall optimal productivity for the type of machine shown above is full optimization with minimal commitment <ref> (Fromherz & Carlson 1994) </ref>: whenever the scheduler is interrupted, generate an optimal schedule for the job known at that time, but commit only to that part of the schedule that has to be returned for execution.
Reference: <author> Getoor, L.; Ottosson, G.; Fromherz, M.; and Carlson, B. </author> <year> 1997. </year> <title> Effective redundant constraints for online scheduling. </title> <booktitle> In Proc. </booktitle> <address> AAAI'97. </address>
Reference-contexts: Not only is it difficult to choose the right schedule without complete job information, but there may not even be enough time to find that schedule. This has motivated our work on heuristics for online scheduling <ref> (Getoor et al. 1997) </ref>. Here, we point out further research directions in this area. Reprographic Machine Scheduling The task of scheduling networked reprographic machines is defined as follows. A scheduler is given a machine description and a finite sequence of output sheets that are to be printed by the machine. <p> Inversion takes longer than bypassing; therefore inverted sheets cannot immediately be followed by non-inverted sheets at the entrance of the inverter. These are the constraints to be honored when scheduling an output sequence on the machine. (See <ref> (Getoor et al. 1997) </ref> for more details.) optimal (look-ahead) algorithm. This figure shows different arrangements for placing patterns for a single-sided (s) or double-sided (f b) sheet.
Reference: <author> Motwani, R.; Saraswat, V.; and Tong, E. </author> <year> 1993. </year> <note> Online printer scheduling. Xerox PARC, Research Note. </note>
Reference-contexts: We found that a competitive ratio of 1.05 between an online algorithm following this strategy and an o*ine algorithm generating optimal schedules for randomly generated jobs is typical. This is consistent with an earlier theoretical analysis of the basic model <ref> (Motwani, Saraswat, & Tong 1993) </ref>. These ideas have to be further explored for more complex machine models. In addition, we can also examine the use of such online strategies for o*ine algorithms. Figure 3 shows the overall run times of o*ine and online algorithms for the same jobs.
Reference: <author> Van Hentenryck, P. </author> <year> 1989. </year> <title> Constraint Satisfaction in Logic Programming. </title> <booktitle> Logic Programming Series. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: The make-span is usually taken as a measure of a machine's productivity. For high-end machines, productivity improvement often translates proportionally to an increase in perceived value. For expensive machines, even small improvements (e.g., by 5-10%) are significant. Constraint programming <ref> (Van Hentenryck 1989) </ref> and the large body of experience with constraint-based scheduling (Zweben & Fox 1994) provide a well-suited foundation for online scheduling. However, optimizing overall productivity is difficult in an online environment, and even more so with a real-time algorithm.
Reference: <author> Zweben, M., and Fox, M. S., eds. </author> <year> 1994. </year> <title> Intelligent Scheduling. </title> <address> San Francisco, Calif.: </address> <publisher> MK. </publisher>
Reference-contexts: For high-end machines, productivity improvement often translates proportionally to an increase in perceived value. For expensive machines, even small improvements (e.g., by 5-10%) are significant. Constraint programming (Van Hentenryck 1989) and the large body of experience with constraint-based scheduling <ref> (Zweben & Fox 1994) </ref> provide a well-suited foundation for online scheduling. However, optimizing overall productivity is difficult in an online environment, and even more so with a real-time algorithm.
References-found: 5

