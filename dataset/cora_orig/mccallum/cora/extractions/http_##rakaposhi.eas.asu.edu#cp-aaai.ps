URL: http://rakaposhi.eas.asu.edu/cp-aaai.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: rao@asu.edu  
Title: Using Disjunctive orderings instead of Conflict Resolution in Partial order planning  
Author: Subbarao Kambhampati 
Date: 96-002, January 1996  
Note: ASU CSE TR  
Address: Tempe, AZ 85287,  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: Resolving conflicts in partial order planning by means of promotion and demotion has been an standard idea in least commitment planning for over twenty years. Recent analyses of partial order planning show that promotion/demotion refinements are optional from the point of view of completeness. Furthermore, promotion/demotion refinements run counter to the idea of least-commitment since the planner is forced commit prematurely to one of the branches. This motivates the idea of avoiding promotion and demotion possibilities by using disjunctive orderings, which simply say that the threatening step needs to come either before or after the range where the threatened condition is protected. Disjunctive orderings have not been tried in planning until now as reasoning with them is in general NP-hard. In this paper, we describe an approach involving constraint propagation which allows incremental handling of disjunctive constraints. We show how this approach can be easily implemented on top of UCPOP planner and discuss empirical results demonstrating the utility of this idea. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Joslin and M. Pollack. </author> <title> Least-cost flaw repair: A plan refinement strategy for partial order planning. </title> <booktitle> Proceedings of AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: In the example in Figure 1, we recognized the infeasibility of s 3 as the contributor only after 2 we increased the branching factor due to conflict resolution. Because of this, a significant work in planning has been aimed towards developing strategies for intelligently postponing the conflict resolution <ref> [8, 1, 9] </ref>. These strategies typically postpone resolving a conflict until it becomes forced -- i.e, has only one resolution possibility, or until the plan has no open conditions left. In the latter case, they select conflicts that have the fewest number of resolution possibilities.
Reference: [2] <author> D. Joslin and M. Pollack. </author> <title> Passive and active decision postponement in plan generation. </title> <booktitle> In Proc. 3rd European Workshop on Planning, </booktitle> <year> 1995. </year>
Reference-contexts: In the latter case, they select conflicts that have the fewest number of resolution possibilities. These strategies usually result in reducing the branching factor at higher levels of the search tree, thereby avoiding premature commitment and a smaller overall search tree. 1 As Joslin and Pollack <ref> [2] </ref> point out, sometimes the postponed conflicts may together be unresolvable, and the planner may waste a lot of time attempting to refine implicitly inconsistent plans. A more direct way of handling conflicts, while avoiding the exponential increase in the search space, is to post disjunctive constraints on the plan. <p> Although constraint propagation has been widely studied in the constraint satisfaction community [11], and is understood as being capable of improving search performance synergistically with refinements, it has not been extensively used in planning systems. A notable exception is Joslin and Pollack's recent work on DESCARTES system <ref> [2] </ref> which models planning as a constraint satisfaction problem. Our work is both inspired by and is closely related to their work. <p> DESCARTES models every flaw in UCPOP as a CSP variable, with the resolution possibilities of the flaw as its domain, and uses both CSP techniques and planning techniques in parallel on the same problem. Initial results reported in <ref> [2] </ref> seem to suggest that this is a promising approach. In order to 10 provide a complete CSP formalization, DESCARTES's planning approach winds up departing from the UCPOP approach significantly, using temporally qualified assertions and dynamic CSP models.
Reference: [3] <author> S. Kambhampati. </author> <title> Multi-Contributor Causal Structures for Planning: A Formalization and Evaluation. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 69, </volume> <year> 1994. </year> <pages> pp. 235-278. </pages>
Reference-contexts: The ability to handle disjunctive orderings and bindings can also be of signifi 12 cant help in handling multi-contributor protection strategies. In <ref> [3] </ref>, Kambhampati shows that single contributor causal links, which reserve a specific step in the plan as the contributor of a specific goal condition, constitute a form of premature commitment. According to him, the best way of avoiding this premature commitment is to use disjunctive contributor lists.

Reference: [5] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction Although partial order planning has been around for over 20 years, it is only recently <ref> [5, 4, 6] </ref> that the foundations of the planning algorithms are becoming clearer. One of the aspects of partial order planning that has been clarified by the recent studies is the role of conflict resolution in planning.
Reference: [6] <author> S. Minton, J. Bresina and M. Drummond. </author> <title> Total Order and Partial Order Planning: a comparative analysis. </title> <note> Journal of Artificial Intelligence Research 2 (1994) 227-262. </note>
Reference-contexts: 1 Introduction Although partial order planning has been around for over 20 years, it is only recently <ref> [5, 4, 6] </ref> that the foundations of the planning algorithms are becoming clearer. One of the aspects of partial order planning that has been clarified by the recent studies is the role of conflict resolution in planning.
Reference: [7] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A Sound, Complete, Partial Order Planner for ADL. </title> <booktitle> In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: Notice that in this situation, we avoided the additional branching associated with conflict resolution entirely. The price we paid is the cost of propagating constraints. In the next section, we discuss how a partial order planner, UCPOP <ref> [7] </ref>, can be easily modified to handle disjunctive ordering constraints as described above. In Section 3, we provide empirical results that demonstrate the utility of this approach. In Section 4, we will discuss related work and also show how this approach subsumes and generalizes the existing techniques for conflict postponement. <p> Confrontation and separation possibilities, if applicable, remain unaffected. Figure 4 illustrates this. 3 Empirical Evaluation We implemented the changes described above on top of the standard UCPOP implementation from University of Washington <ref> [7] </ref>. For convenience, we will call this variant of UCPOP, UCPOP-D. The implementation required minimal changes to UCPOP and took approximately a person-week time. <p> 13265 3220 22951 22.3 93.1 90 16 0 0 UCPOP-D1 4473 13019 2434 23820 16.8 95.2 100 24 170 1157 UCPOP-D2 4457 12665 2425 23169 17.9 99.0 100 20 468 2662 Table 3: Average performance statistics from experiments in Prodigy Blocks World Domain part of the UCPOP 4.0 standard distribution <ref> [7] </ref>. Specifically, we compared the performance of UCPOP-D and UCPOP on the 43 pre-defined problems from 13 pre-defined domains in the UCPOP 4.0 distribution. The default best-first ranking function, as well as the default LIFO goal ordering function of UCPOP 4.0 were used.
Reference: [8] <author> M.A. Peot and D.E. Smith. </author> <title> Threat-Removal Strategies for Nonlinear Planning. </title> <booktitle> In Proc. Eleventh AAAI, </booktitle> <year> 1993. </year>
Reference-contexts: In the example in Figure 1, we recognized the infeasibility of s 3 as the contributor only after 2 we increased the branching factor due to conflict resolution. Because of this, a significant work in planning has been aimed towards developing strategies for intelligently postponing the conflict resolution <ref> [8, 1, 9] </ref>. These strategies typically postpone resolving a conflict until it becomes forced -- i.e, has only one resolution possibility, or until the plan has no open conditions left. In the latter case, they select conflicts that have the fewest number of resolution possibilities. <p> first is the handling of conflicts through promotion 4 and demotion, shown as procedure Handle-Unsafe-Link in Figure 2. 2 When the conflict is forced, i.e., only one of the promotion/demotion possibilities is feasible given the current ordering O on the plan, a refinement is generated corresponding to that resolution choice <ref> [9, 8] </ref>. When both promotion and demotion are possible, rather than generate two different refinements, a single disjunctive ordering is added to the plan. The disjunctive orderings are simplified whenever the planner adds non-disjunctive orderings to the plan (see the Add-Order procedure in Figure 2). <p> If disjunctive orderings are left unsimplified 2 Note that we only change the way promotion and demotion are done. The other conflict resolution possibilities, such as confrontation and separation (if used; see <ref> [8] </ref>) remain unchanged. 5 Procedure Handle-Unsafe-Link (hs p ; c; s c i, s t , P ) If s p P s t , return Add-ordering (P; (s c s t )) If s t P s c , return Add-ordering (P; (s t s p )) Otherwise, return P <p> The 13 problems in which disjunctive orderings help improve performance of UCPOP include the``Prodigy Blocks World'', ``Ferry World'', ``Monkey World'' and ``Molgen Domain.'' Similar results were also obtained when the *dsep* switch in UCPOP was turned off leading to more conflicts involving partially instantiated variables <ref> [8] </ref>. These results show that the approach to handling disjunctive orderings can be a useful addition to UCPOP. Table 1 summarizes the average performance statistics from all 43 problems, while Table 2 summarizes the statistics on the problems where UCPOP-D1 did better than UCPOP. <p> Our experiments in ART-# est -# clob domain showed that UCPOP-D does significantly better than UCPOP exactly in region where tractability refinements are supposed to help UCPOP. However, a closer analysis of the results revealed that the improvements was mostly because UCPOP-D commits to forced conflicts (c.f. DUNF <ref> [8] </ref>), and had little to do with constraint propagation. Specifically, very few new orderings were inferred by UCPOP-D in these experiments. <p> As mentioned earlier, our disjunctive orderings based approach for conflict resolution is related to the idea of conflict postponement. In particular, by posting disjunctive orderings only when both promotion and demotion possibilities are valid, our algorithm subsumes the ZLIFO [9] and D-UNF <ref> [8] </ref> strategies. Our approach is however more general than conflict postponement strategies. In fact, one can see ZLIFO, DUNF and our approach as logical progression of ideas in terms of the extent of constraint propagation used in planning.
Reference: [9] <author> L. Schubert and A. Gerevini. </author> <title> Accelerating Partial Order Planners by Improving Plan and Goal Choices. </title> <booktitle> Proc. of the Conference of Tools with Artificial Intelligence, </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: In the example in Figure 1, we recognized the infeasibility of s 3 as the contributor only after 2 we increased the branching factor due to conflict resolution. Because of this, a significant work in planning has been aimed towards developing strategies for intelligently postponing the conflict resolution <ref> [8, 1, 9] </ref>. These strategies typically postpone resolving a conflict until it becomes forced -- i.e, has only one resolution possibility, or until the plan has no open conditions left. In the latter case, they select conflicts that have the fewest number of resolution possibilities. <p> first is the handling of conflicts through promotion 4 and demotion, shown as procedure Handle-Unsafe-Link in Figure 2. 2 When the conflict is forced, i.e., only one of the promotion/demotion possibilities is feasible given the current ordering O on the plan, a refinement is generated corresponding to that resolution choice <ref> [9, 8] </ref>. When both promotion and demotion are possible, rather than generate two different refinements, a single disjunctive ordering is added to the plan. The disjunctive orderings are simplified whenever the planner adds non-disjunctive orderings to the plan (see the Add-Order procedure in Figure 2). <p> As mentioned earlier, our disjunctive orderings based approach for conflict resolution is related to the idea of conflict postponement. In particular, by posting disjunctive orderings only when both promotion and demotion possibilities are valid, our algorithm subsumes the ZLIFO <ref> [9] </ref> and D-UNF [8] strategies. Our approach is however more general than conflict postponement strategies. In fact, one can see ZLIFO, DUNF and our approach as logical progression of ideas in terms of the extent of constraint propagation used in planning.
Reference: [10] <author> E. Tsang. </author> <title> The consistent labeling problem in temporal reasoning. </title> <booktitle> In Proc. AAAI-87, </booktitle> <year> 1987. </year>
Reference-contexts: In particular, checking whether a set of disjunctive ordering constraints is consistent, as well as checking whether a step s can possibly precede another step s 0 (as will be done during simple establishment), are NP-hard <ref> [10] </ref>. This is the reason why disjunctive ordering-based solution has not been tried as a serious contender for conflict resolution until now.
Reference: [11] <author> E. Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> (Academic Press, </publisher> <address> San Diego, California, </address> <year> 1993). </year>
Reference-contexts: This can be seen as an incremental way of propagating constraints. In the example plan 1 This idea is similar to the variable section order heuristics used in constraint satisfaction problems <ref> [11] </ref> 3 in Figure 1, given the disjunctive orderings, and the explicit orderings among the steps (added by establishment operations), we can derive the ordering constraint (s 2 s 3 ) through constraint propagation, as soon as the ordering s 0 s 3 is added by the planner (presumably in the <p> Specifically, entails-1 and entails-2 procedures in Figure 2 can be formalized in terms of the familiar notions of k-consistency in CSP <ref> [11] </ref>. Although constraint propagation has been widely studied in the constraint satisfaction community [11], and is understood as being capable of improving search performance synergistically with refinements, it has not been extensively used in planning systems. <p> Specifically, entails-1 and entails-2 procedures in Figure 2 can be formalized in terms of the familiar notions of k-consistency in CSP <ref> [11] </ref>. Although constraint propagation has been widely studied in the constraint satisfaction community [11], and is understood as being capable of improving search performance synergistically with refinements, it has not been extensively used in planning systems. A notable exception is Joslin and Pollack's recent work on DESCARTES system [2] which models planning as a constraint satisfaction problem. <p> This sort of tradeoff is not new in constraint satisfaction <ref> [11] </ref>, where it is recognized that refinements and constraint propagation can help each other. As mentioned earlier, our disjunctive orderings based approach for conflict resolution is related to the idea of conflict postponement. <p> Thus, to figure out if a conflict is forced, we need to dynamically compute its resolution possibilities. This is like computing the live domain of a variable in CSP. Since the computation is often done considering each conflict in isolation, the more precise analogy is to ensuring 1-consistency <ref> [11] </ref>. Specifically, seeing conflicts as variables, and their resolutions possibilities as their domains, D-UNF and Z-LIFO can be seen as removing values from the domain of a conflict variable that are not even feasible with the 1-ary constrains on that conflict (imposed by current partial plan). <p> Overall, the situation here is not very different from the conventional wisdom about constraint propagation in the CSP community. Specifically, it is known that while 1-consistency is often too weak to lead to search improvements, enforcing k-consistency, for k &gt; 2 is not particularly useful in most CSP domains <ref> [11] </ref>. 5 Conclusion and Future Work In this paper, we described a way of avoiding conflict resolution in partial order planning by posting disjunctive orderings. Constraint propagation techniques are used to simplify and infer explicit orderings from the disjunctive orderings.
Reference: [12] <author> Q. Yang and A.Y.M. Chan. </author> <title> Delaying variable binding commitments in planning. </title> <booktitle> In Proc. </booktitle> <address> AIPS-94, </address> <year> 1994. </year> <month> 14 </month>
Reference-contexts: The work described here can be extended in many ways. To begin with, the idea of disjunctive constraints and constraint propagation can be adapted in a straightforward fashion to variable codesignation constraints. Such an approach can help in handling finite domain planning variables in an intelligent fashion <ref> [12] </ref>. In particular, all variables in realistic planning problems have finite domains. However, UCPOP and other planners make an implicit infinite-domain variable assumption in managing codesignation constraints.
References-found: 11

