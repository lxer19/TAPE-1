URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P262.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts91.htm
Root-URL: http://www.mcs.anl.gov
Title: FAST SOLUTION OF NONLINEAR POISSON-TYPE EQUATIONS  
Phone: 60439  
Author: Brett M. Averick and James M. Ortega 
Note: Army High Performance  55415. The research of this author was supported in part by the Army Research Office under grant DAALO3-89-C-0038.  22903. The research of this author was supported in part by the National Aeronautics and Space Administration under grants NAG-1-1112-FDP and NAG-1-1050.  
Date: August 1991  
Address: 9700 South Cass Avenue Argonne, Illinois  Preprint MCS-P262-0991  1100 Washington Avenue South, Minneapolis, MN  Charlottesville, VA  
Affiliation: ARGONNE NATIONAL LABORATORY  Mathematics and Computer Science Division  Computing Research Center, University of Minnesota,  Department of Computer Science, University of Virginia,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. Ashcraft and R. Grimes, </author> <title> On vectorizing incomplete factorization and SSOR preconditioners, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 9 (1988), </volume> <pages> pp. 122-151. </pages>
Reference-contexts: It is known (see, e.g., [6] and, for a recent review, [7]) that this ordering may seriously degrade the rate of convergence of ICCG, and it is quite likely that better results would be obtained by using the diagonal ordering, as, for example, in <ref> [1] </ref>. Also, more sophisticated versions of ICCG or the use of other methods might give better results.
Reference: [2] <author> B. Averick, </author> <title> Solution of Nonlinear Poisson-type Equations, </title> <type> Ph.D. Dissertation. </type> <institution> Dept. Applied Math., University of Virginia, </institution> <address> Charlottesville, VA., </address> <month> January </month> <year> 1991. </year>
Reference: [3] <author> B. Averick and J. Ortega, </author> <title> Solution of nonlinear Poisson-type equations, </title> <note> Applied Numerical Math, to appear. </note>
Reference-contexts: 1 Introduction In <ref> [3] </ref>, we considered methods for the numerical solution of nonlinear Poisson-type equations of the form r [K (u)ru] = f; (1:1) where K is a positive differentiable function. <p> The matrix B (u) in (1.4) is not symmetric, however, which would require using methods such as GMRES [8] for nonsymmetric systems. An alternative approach considered in <ref> [3] </ref> is based on the fact that kB (u) k is small compared with kA (u) k in many cases. <p> Results given in the next section show that for a small two-dimensional problem run on a Sun-3/60, this new method is considerably faster than the best method considered in <ref> [3] </ref>. On parallel and vector computers, the advantage is even greater since the solution of the nonlinear equations (1.10) has excellent parallelism (or vectorization) across the grid points. In the next section, we will give numerical results for a fairly large (250,000+ unknowns) three-dimensional problem considered in [3]. <p> method considered in <ref> [3] </ref>. On parallel and vector computers, the advantage is even greater since the solution of the nonlinear equations (1.10) has excellent parallelism (or vectorization) across the grid points. In the next section, we will give numerical results for a fairly large (250,000+ unknowns) three-dimensional problem considered in [3]. Comparison to the results in [3] on a CRAY 2 shows considerable superiority of the new method. The method does have limitations, however. <p> In the next section, we will give numerical results for a fairly large (250,000+ unknowns) three-dimensional problem considered in <ref> [3] </ref>. Comparison to the results in [3] on a CRAY 2 shows considerable superiority of the new method. The method does have limitations, however. <p> The second column gives times for the FPS. NL is the time for solving the nonlinear equations (1.10). For comparison, Table 1 also lists times for the same problem using the TANICCG method from <ref> [3] </ref>. <p> Newton systems (1.5) by ICCG (0), using truncation in the sense of [5] to determine the 4 Table 1: Times (seconds) for Two-Dimensional Problem on a Sun 3/60 N FPS NL Total TANICCG Speedup 31 4.2 1.7 5.9 79.8 13.6 number of inner iterations; further details may be found in <ref> [3] </ref>. The last column of Table 1 gives the ratios of the TANICCG times to those of the new method. We next consider a three-dimensional problem treated in [3] in which K (u) = 3 300 + 27u so that OE (u) = 209:6 tan 1 (:135u + :5) 2 + <p> N FPS NL Total TANICCG Speedup 31 4.2 1.7 5.9 79.8 13.6 number of inner iterations; further details may be found in <ref> [3] </ref>. The last column of Table 1 gives the ratios of the TANICCG times to those of the new method. We next consider a three-dimensional problem treated in [3] in which K (u) = 3 300 + 27u so that OE (u) = 209:6 tan 1 (:135u + :5) 2 + (3u + 11:1) 2 (2u 37): (2:3) The domain is the unit cube, and the forcing function f of (1.1) was chosen so that x 2 +y 2 <p> As in Table 1, the second column is the time for the FPS, and NL is the time for solving the nonlinear equations (1.10). These one-dimensional nonlinear equations were solved by Newton's method, vectorized across all the grid points. In <ref> [3] </ref>, we used for (1.5) the initial approximation u 0 j + z 2 which is a linear interpolation of the boundary values in the x-direction. <p> Of these two ways to choose u 0 i;j;k , (2.4) was the best and only these times are reported in Table 2. The next-to-last column gives times for the best version of the TANICGG method in <ref> [3] </ref>, and the last column again shows the ratios of the TANICCG times to those of the new method. (The times for TANICCG given in [3] were obtained on a CRAY 2 at the NASA-Langley Research Center and do not agree with those of Table 2, which were obtained on a <p> The next-to-last column gives times for the best version of the TANICGG method in <ref> [3] </ref>, and the last column again shows the ratios of the TANICCG times to those of the new method. (The times for TANICCG given in [3] were obtained on a CRAY 2 at the NASA-Langley Research Center and do not agree with those of Table 2, which were obtained on a CRAY 2 at the University of Minnesota Army High Performance Computing Research Center.) In [3] we used the convergence test kF (u k )k 2 <p> of the new method. (The times for TANICCG given in <ref> [3] </ref> were obtained on a CRAY 2 at the NASA-Langley Research Center and do not agree with those of Table 2, which were obtained on a CRAY 2 at the University of Minnesota Army High Performance Computing Research Center.) In [3] we used the convergence test kF (u k )k 2 kF (^u)k 2 ; (2:5) Table 2: Times (seconds) for Three-Dimensional Problem on a CRAY 2 N FPS NL Total TANICCG Speedup 31 .06 .05 .11 1.1 10 where F is the function (1.2), u k is the iterate of <p> The actual errors in the final iterates produced by the two methods differ by about 15%. The times in Table 2 for the TANICCG method are significantly worse than those of the new method, but some caveats are in order. The ICCG method in <ref> [3] </ref> was implemented by using the red/black ordering to obtain long vector lengths for the CRAY 2.
Reference: [4] <author> M. Crandall, </author> <title> Semigroups of nonlinear transformations in banach spaces, in Contributions to Nonlinear Functional Analysis, </title> <editor> E. Zarantonello, ed., </editor> <publisher> Academic Press, </publisher> <year> 1971, </year> <pages> pp. 157-179. </pages>
Reference-contexts: In the present paper, we consider an entirely different approach based on the formulation <ref> [4] </ref> of (1.1) as If OE is a function such that OE 0 (u) = K (u); (1:7) then r 2 OE (u) = r (OE 0 (u)ru) = r (K (u)ru); (1:8) and (1.6) is equivalent to (1.1). <p> For the new method, however, the only discretization error occurs in the Poisson equation and is 0 (h 2 ). Acknowledgments We are indebted to Professor Irena Lasiecka of the University of Virginia for reference <ref> [4] </ref> and to Barry F. Smith of Argonne National Laboratory for his assistance in using the VFFTPACK package.
Reference: [5] <author> R. Dembo, S. Eisenstat, and T. Steihaug, </author> <title> Inexact Newton methods, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 19 (1982), </volume> <pages> pp. 400-408. </pages>
Reference-contexts: NL is the time for solving the nonlinear equations (1.10). For comparison, Table 1 also lists times for the same problem using the TANICCG method from [3]. This method solves the approximate Newton systems (1.5) by ICCG (0), using truncation in the sense of <ref> [5] </ref> to determine the 4 Table 1: Times (seconds) for Two-Dimensional Problem on a Sun 3/60 N FPS NL Total TANICCG Speedup 31 4.2 1.7 5.9 79.8 13.6 number of inner iterations; further details may be found in [3].
Reference: [6] <author> I. Duff and G. Meurant, </author> <title> The effect of ordering on preconditioned conjugate gradients, </title> <journal> BIT, </journal> <volume> 29 (1989), </volume> <pages> pp. 635-657. </pages>
Reference-contexts: The ICCG method in [3] was implemented by using the red/black ordering to obtain long vector lengths for the CRAY 2. It is known (see, e.g., <ref> [6] </ref> and, for a recent review, [7]) that this ordering may seriously degrade the rate of convergence of ICCG, and it is quite likely that better results would be obtained by using the diagonal ordering, as, for example, in [1].
Reference: [7] <author> J. Ortega, </author> <title> Orderings for conjugate gradient preconditionings, </title> <note> SIAM J. Optimization, to appear. </note>
Reference-contexts: The ICCG method in [3] was implemented by using the red/black ordering to obtain long vector lengths for the CRAY 2. It is known (see, e.g., [6] and, for a recent review, <ref> [7] </ref>) that this ordering may seriously degrade the rate of convergence of ICCG, and it is quite likely that better results would be obtained by using the diagonal ordering, as, for example, in [1]. Also, more sophisticated versions of ICCG or the use of other methods might give better results.
Reference: [8] <author> Y. Saad and M. Schultz, </author> <title> GMRES: A generalized minimal residual algorithm for solving nonsymmetric linear systems, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 7 (1986), </volume> <pages> pp. 856-869. </pages>
Reference-contexts: The matrix B (u) in (1.4) is not symmetric, however, which would require using methods such as GMRES <ref> [8] </ref> for nonsymmetric systems. An alternative approach considered in [3] is based on the fact that kB (u) k is small compared with kA (u) k in many cases.
References-found: 8

