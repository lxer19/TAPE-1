URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1997/tr-97-029.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1997.html
Root-URL: http://www.icsi.berkeley.edu
Title: Playing Tetris on Meshes and Multi-Dimensional Shearsort  
Author: Miros law Kuty lowski Rolf Wanka 
Note: Accepted for presentation on the 8th International Symposium on Algorithms and Computation (ISAAC),  ICSI, 1947  Supported by DFG-SFB 376 "Massive Parallelitat," by EU ESPRIT Project 20244 (ALCOM-IT), and by DFG Leibniz Grant Me 872/6-1.  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  Street, Berkeley, CA 94704, USA.  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Center  
Pubnum: TR-97-029  
Email: e-mail: wanka@icsi.berkeley.edu.  
Phone: (510) 643-9153 FAX (510) 643-7684  
Date: August 1997  1997.  
Abstract: Shearsort is a classical sorting algorithm working in rounds on 2-dimensional meshes of processors. Its elementary and elegant runtime analysis can be found in various textbooks. There is a straightforward generalization of Shearsort to multi-dimensional meshes. As experiments turn out, it works fast. However, no method has yet been shown strong enough to provide a tight analysis of this algorithm. In this paper, we present an analysis of the 3-dimensional case and show that on the l fi l fi l-mesh, it suffices to perform 2 log l + 10 rounds while 2 log l + 1 rounds are necessary. Moreover, tools for analyzing multi-dimensional Shearsort are provided. y Department of Mathematics and Computer Science, Paderborn University, 33095 Paderborn, Germany. e-mail: mirekk@uni-paderborn.de. Supported by KBN grants 2 1197 91 01 and 8 S503 002 07, DFG grant Di 412/2-1, and by Volkswagen-Stiftung. A part of this work has been done when this author was affiliated with Computer Science Institute, University of Wroc law, Poland. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. E. Batcher. </author> <title> Sorting networks and their applications. </title> <booktitle> In AFIPS Conf. Proc. </booktitle> <volume> 32, </volume> <pages> pp. 307-314, </pages> <year> 1968. </year>
Reference-contexts: Moreover, the logical structures of these algorithms are complicated; the algorithms spend much time on routing. For these reasons, these algorithms are not well suited for practical implementations. On the other hand, there are simple algorithms like Batcher's Bitonic Sort <ref> [1] </ref> for the d-dimensional hypercube with runtime 1 2 d (d + 1) and a generalization of Bitonic Sort to arbitrary meshes by Corbett and Scherson [3]. Though the runtimes of these algorithms are not asymptotically optimal, the involved constants are very small. <p> Let the set of nodes fP <ref> [i 3 ; i 2 ; 1] </ref> : 1 i 3 ; i 2 2 blog lc g store 0's, and let all other nodes store 1's. Then the 3-dimensional Shearsort needs 2blog lc + 1 rounds to sort this input.
Reference: [2] <author> K. Brockmann and R. Wanka. </author> <title> Efficient oblivious parallel sorting on the MasPar MP-1. </title> <booktitle> In Proc. 30th Hawaii International Conference on System Sciences (HICSS), </booktitle> <volume> Vol. I, </volume> <pages> pp. 200-208, </pages> <year> 1997. </year>
Reference-contexts: These algorithms repeat sorting of rows in various dimensions until the contents of the network becomes sorted with respect to the snake-like order. In the worst case, both algorithms are slower only by a factor of about 2 than the simple non-periodic methods mentioned before. In <ref> [2] </ref>, an approach closely related to Shearsort has been implemented on the MasPar MP-1 parallel computer. Its practical performance is able even to beat Bitonic Sort under certain circumstances. This is an evidence that a theoretical approach must be sometimes 2 revised to adhere to the real world. Multi-Dimensional Shearsort.
Reference: [3] <author> P. F. Corbett and I. D. Scherson. </author> <title> Sorting in mesh connected multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 3 (1992) 626-632. </journal>
Reference-contexts: On the other hand, there are simple algorithms like Batcher's Bitonic Sort [1] for the d-dimensional hypercube with runtime 1 2 d (d + 1) and a generalization of Bitonic Sort to arbitrary meshes by Corbett and Scherson <ref> [3] </ref>. Though the runtimes of these algorithms are not asymptotically optimal, the involved constants are very small. So the algorithms are fast for realistic input sizes. The behavior of these algorithms is easy to analyze due to their recursive structure allowing elegant inductive proofs.
Reference: [4] <author> M. Dowd, Y. Perl, M. Saks, and L. Rudolph. </author> <title> The periodic balanced sorting network. </title> <note> Journal of the ACM 36 (1989) 738-757. </note>
Reference-contexts: A classical algorithm of this kind is Shearsort by Scherson, Sen, and Shamir [10, 9]. It runs on m 2 fi m 1 -meshes in time (m 2 + m 1 ) (dlog m 2 e + 1). In another classical paper, Dowd et al. <ref> [4] </ref> present the periodic balanced sorting algorithm running on the d-dimensional hypercube in d 2 steps. These algorithms repeat sorting of rows in various dimensions until the contents of the network becomes sorted with respect to the snake-like order.
Reference: [5] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Volume 3: </volume> <publisher> Sorting and Searching (Addison-Wesley, </publisher> <address> Reading, </address> <year> 1973). </year>
Reference-contexts: Shearsort consists of rounds: each round consists of stages 1; 2; : : : ; d 1; d. At stage i, i d, each row in dimension i is sorted using Odd-Even Transposition Sort <ref> [5, p. 241] </ref>. The direction in which a single row is sorted agrees with the order on the row induced by the snake of the mesh (for the 3-dimensional case see Fig. 2). The rounds are repeated until M is sorted according to the snake-like order. New Results. <p> In Section 3, we develop techniques of projecting the contents of the cube into two dimensions and bookkeeping of dirty rows that lead to a proof of Theorem 1. 3 2 Auxiliary Results on 2-Dimensional Shearsort 2.1 General Observations. Lemma 3 (0-1 Principle <ref> [5, p. 224] </ref>) If a compare-exchange algorithm sorts all inputs consisting solely of 0's and 1's, then it sorts arbitrary inputs. Due to the 0-1 Principle, we shall mainly consider inputs consisting of 0's and 1's only, also called 0-1 inputs.
Reference: [6] <author> M. Kunde. </author> <title> Optimal sorting on multi-dimensionally mesh-connected computers. </title> <booktitle> In Proc. 4th Symposium on Theoretical Aspects of Computer Science (STACS), </booktitle> <pages> pp. 408-419, </pages> <year> 1987. </year>
Reference-contexts: Previous Oblivious Sorting Algorithms on Meshes. Routing (besides compare-exchange steps) has been used by Schnorr and Shamir [11] to design an asymptotically time optimal algorithm that sorts l 2 keys on the l fi l-mesh in 3l + o (l) steps. For d-dimensional meshes (d being a constant), Kunde <ref> [6] </ref> presented an asymptotically time optimal algorithm: On the m d fi fi m 1 -mesh, it runs in time 2 P d1 P d i=1 m i ). One of the mesh architectures that has received special attention is the hypercube, i. e., the d-dimensional 2 fi fi 2-mesh.
Reference: [7] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, </title> <publisher> Hypercubes (Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1992). </year>
Reference-contexts: A variety of efficient algorithms has been designed to run on such an architecture, among them many algorithms for such a basic problem as sorting (e. g., see <ref> [7] </ref>). In this paper, we examine multi-dimensional Shearsort, a very simple, but hard to analyze sorting algorithm for higher-dimensional meshes that turns out to have a rich combinatorial structure. Mesh Architecture.
Reference: [8] <author> C. G. Plaxton. </author> <title> A hypercubic network with nearly logarithmic depth. </title> <booktitle> In Proc. 24th ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pp. 405-416, </pages> <year> 1992. </year>
Reference-contexts: One of the mesh architectures that has received special attention is the hypercube, i. e., the d-dimensional 2 fi fi 2-mesh. The asymptotically fastest oblivious algorithm for the d-dimensional hypercube by Plaxton <ref> [8] </ref> sorts 2 d keys in time O (2 O ( p log d) ). (Note that there are sorting algorithms that work asymptotically faster, but they are not oblivious.
Reference: [9] <author> I. D. Scherson and S. Sen. </author> <title> Parallel sorting in two-dimensional VLSI models of computation, </title> <journal> IEEE Transactions on Computers 38 (1989) 238-249. </journal> <volume> 10 </volume>
Reference-contexts: In order to ease the implementation, periodic sorting algorithms have been considered, i. e., algorithms repeating the same sequence of compare-exchange steps called a round. A classical algorithm of this kind is Shearsort by Scherson, Sen, and Shamir <ref> [10, 9] </ref>. It runs on m 2 fi m 1 -meshes in time (m 2 + m 1 ) (dlog m 2 e + 1). In another classical paper, Dowd et al. [4] present the periodic balanced sorting algorithm running on the d-dimensional hypercube in d 2 steps.
Reference: [10] <author> I. D. Scherson, S. Sen, and A. Shamir. Shear-sort: </author> <title> A true two-dimensional sorting tech-nique for VLSI networks, </title> <booktitle> in Proc. 15th IEEE International Conference on Parallel Processing (ICPP), </booktitle> <year> 1986, </year> <pages> pp. 903-908. </pages>
Reference-contexts: In order to ease the implementation, periodic sorting algorithms have been considered, i. e., algorithms repeating the same sequence of compare-exchange steps called a round. A classical algorithm of this kind is Shearsort by Scherson, Sen, and Shamir <ref> [10, 9] </ref>. It runs on m 2 fi m 1 -meshes in time (m 2 + m 1 ) (dlog m 2 e + 1). In another classical paper, Dowd et al. [4] present the periodic balanced sorting algorithm running on the d-dimensional hypercube in d 2 steps. <p> Then we may arbitrarily permute the keys inside each set T i prior to sorting them without influencing the outcome of sorting the sets T i . 2.2 Dirty Rows and the Classical Results. The analysis of 2-dimensional Shearsort in <ref> [10] </ref> is based on the following concept of clean and dirty rows: Definition 6 Let M be a (multi-dimensional) mesh. If every node of a row in dimension j of M contains the same key s, then we call this row a clean row or in more detail an s-row. <p> Then during sorting a column no 0 of the k lowest positions in a column can be moved. The rest follows immediately. 2 The upper bound on the runtime of the 2-dimensional Shearsort follows from the following lemma <ref> [10] </ref>: Lemma 9 ([10]) Let a 0-1 input be given to the l fi m-mesh M . Then after round t of Shearsort, M is dl=2 t e-clean. By Lemma 9, after round dlog le the mesh is 1-clean and by Lemma 8 it will remain 1-clean afterwards.
Reference: [11] <author> C. P. Schnorr and A. Shamir. </author> <title> An optimal sorting algorithm for mesh-connected computers. </title> <booktitle> In Proc. 18th ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pp. 255-263, </pages> <year> 1986. </year>
Reference-contexts: That means that these permutations do not depend on the sequence of keys to be sorted. Such algorithms are called oblivious sorting algorithms. Previous Oblivious Sorting Algorithms on Meshes. Routing (besides compare-exchange steps) has been used by Schnorr and Shamir <ref> [11] </ref> to design an asymptotically time optimal algorithm that sorts l 2 keys on the l fi l-mesh in 3l + o (l) steps.
References-found: 11

