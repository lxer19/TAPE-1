URL: ftp://ftp.ida.liu.se/pub/publications/techrep/1994/r-94-42.ps.gz
Refering-URL: http://www.ida.liu.se/labs/rkllab/groups/FF/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Author: Patrick Doherty and Witold. Lukaszewicz and Andrzej Sza las 
Note: Algorithm  
Abstract: IDA Technical Report 1994 LiTH-IDA-94-42 ISSN-0281-4250 Department of Computer and Information Science, Linkoping University, S-581 83 Linkoping, Sweden Computing Circumscription Revisited: A Reduction Abstract In recent years, a great deal of attention has been devoted to logics of "commonsense" reasoning. Among the candidates proposed, circumscription has been perceived as an elegant mathematical technique for modeling nonmonotonic reasoning, but difficult to apply in practice. The major reason for this is the 2nd-order nature of circumscription axioms and the difficulty in finding proper substitutions of predicate expressions for predicate variables. One solution to this problem is to compile, where possible, 2nd-order formulas into equivalent 1st-order formulas. Although some progress has been made using this approach, the results are not as strong as one might desire and they are isolated in nature. In this article, we provide a general method which can be used in an algorithmic manner to reduce circumscription axioms to 1st-order formulas. The algorithm takes as input an arbitrary 2nd-order formula and either returns as output an equivalent 1st-order formula, or terminates with failure. The class of 2nd-order formulas, and analogously the class of circumscriptive theories which can be reduced, provably subsumes those covered by existing results. We demonstrate the generality of the algorithm using circumscriptive theories with mixed quantifiers (some involving Skolemization), variable constants, non-separated formulas, and formulas with n-ary predicate variables. In addition, we analyze the strength of the algorithm and compare it with existing approaches providing formal subsumption results. The first author has been supported in part by the Swedish Council for the Engineering Sciences and ESPRIT Basic Research Action No. 6156 DRUMS II. The second and third authors have been supported in part by ESPRIT Basic Research Action No. 6156 DRUMS II and KBN grant 3 P406 019 06. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ackermann, W. </author> <title> (1935) Untersuchungen uber das Eliminationsproblem der mathematischen Logik, </title> <journal> Mathematische Annalen, </journal> <volume> 110, </volume> <pages> 390-413. </pages>
Reference-contexts: Its complete formulation can be found in the Appendix. The algorithm was originally formulated, in a weaker form, in [18] in the context of modal logics. It is based on Ackermann's techniques developed in connection with the elimination problem (see <ref> [1] </ref>). The elimination algorithm is based on the following lemma, proved by Ackermann in 1934 (see [1]). The proof can also be found in [18]. Lemma 3.1 (Ackermann Lemma) Let be a predicate variable and A (x), B () be formulas without second-order quantification. <p> The algorithm was originally formulated, in a weaker form, in [18] in the context of modal logics. It is based on Ackermann's techniques developed in connection with the elimination problem (see <ref> [1] </ref>). The elimination algorithm is based on the following lemma, proved by Ackermann in 1934 (see [1]). The proof can also be found in [18]. Lemma 3.1 (Ackermann Lemma) Let be a predicate variable and A (x), B () be formulas without second-order quantification. Let B () be positive w.r.t. and let A contain no occurrences of at all.
Reference: [2] <author> Ackermann, W. </author> <title> (1954) Solvable Cases of the Decision Problem, </title> <publisher> North-Holland, Amsterdam. </publisher>
Reference: [3] <author> Etherington, D., Kraus, S., Perlis, D. </author> <title> (1991) Nonmonotonicity and the Scope of Reasoning, </title> <booktitle> in: Artificial Intelligence 52(3), </booktitle> <pages> 221-262. </pages>
Reference-contexts: In other words, the only abnormal object is the block b1. 14 6.2 The Scope Example This example is due to Etherington, Kraus and Perlis <ref> [3] </ref>. It contains both an existentially and a universally quantified formula. The theory contains a counterexample axiom which asserts that there is an exception to a default rule stating that birds normally fly. <p> Of course, we do not know which one. Another of the advantages of the algorithmic approach to reducing circumscription axioms is the ease with which both a theory and its reduction proof can be modified. For example, Etherington et. al. <ref> [3] </ref> continue discussing the example by adding the assertion B (F red)^B (Opus)^Ab (Opus) (51) along with a unique names assumption.
Reference: [4] <author> Gabbay, D., Ohlbach, H. J. </author> <title> (1992) Quantifier Elimination in Second-Order Predicate Logic, </title> <institution> Report of the Max-Planck Institut fur Informatik, MPI-I-92-231, Saarbrucken, Germany. </institution>
Reference-contexts: Theorem 2.8 If T is a monadic second-order sentence, then T is equivalent to a first-order sentence T 0 . 2.5 The SCAN Algorithm The SCAN algorithm was introduced by D. Gabbay and H. J. Ohlbach in <ref> [4] </ref>. It is formulated as follows: Definition 2.1 Given a second-order formula 9 1 : : : n A, where A is a classical first-order formula perform the following steps: 1. Transform A into clause form using the equivalences given in Proposition (1.1).
Reference: [5] <author> Gelfond, M., Lifschitz, V. </author> <title> (1989) Compiling Circumscriptive Theories into Logic Programs, </title> <booktitle> in: Proc. 2nd Int'l Workshop on Non-Monotonic Reasoning, Lecture Notes in Artificial Intelligence, </booktitle> <volume> 346, </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 74-99. </pages>
Reference-contexts: In the literature, there are a number of approaches proposed for computing circumscription that attempt to deal with this inadequacy . These approaches can be classified into three broad groups: 1. Compiling circumscriptive theories into logic programs. A representative example of this approach is Gelfond <ref> [5] </ref>. 2. Developing specialized algorithms to compute preferential entailment. Some representative examples of this approach are a proposal for a theorem prover for circumscription by Gins berg [6], and the MILO method proposed by Przymusinski [15]. 3.
Reference: [6] <author> Ginsberg, M. L. </author> <title> (1989) A Circumscriptive Theorem Prover, in: </title> <journal> Artificial Intelligence, </journal> <volume> 39, </volume> <pages> 209-230. </pages>
Reference-contexts: Compiling circumscriptive theories into logic programs. A representative example of this approach is Gelfond [5]. 2. Developing specialized algorithms to compute preferential entailment. Some representative examples of this approach are a proposal for a theorem prover for circumscription by Gins berg <ref> [6] </ref>, and the MILO method proposed by Przymusinski [15]. 3. Compiling the second-order circumscription axiom into an equivalent first-order formula and then applying classical theorem-proving techniques to the resulting first-order theory.
Reference: [7] <author> Kolaitis, P., Papadimitriou, C. </author> <title> (1988) Some Computational Aspects of Circumscription, </title> <booktitle> in: Proc. AAAI-88, </booktitle> <address> St Paul, MN, </address> <pages> 465-469. </pages>
Reference-contexts: where R i (P ) stands for :M i (P "Q i )_Circ SO (M i (P ); P ; ()) if D i (P ) is n-simple, and for :N i (U i )_ :(U i &lt; P ) otherwise. 2.3 Kolaitis & Papadimitriou's result In Kolaitis & Papadimitriou <ref> [7] </ref> the following result was presented. Theorem 2.7 If T is a first-order existential sentence, then Circ SO (T ; P ; ()) is equivalent to a first-order sentence. 2.4 Second-Order Monadic Logic The following result is due to Lowenheim (see [13]). <p> If the input formula cannot be transformed into the form (8) then the algorithm fails. 4 On the Strength of the Algorithm Let us first prove that the algorithm subsumes, and is even stronger than the results given in <ref> [7, 9, 10, 16] </ref>. Recall that the formulation of those results is quoted in Section 2. Let us start with Rabinov's result (and thus the subsumed results of Lifschitz). In fact, the following theorem is stronger than the result of Rabinov. <p> second case, where D i is p-simple, it takes the form U i , i.e. 8x:(x)_:U i (x) and the Ackermann lemma can be applied directly. 4 Rabinov requires n-simplicity here 9 The following theorem shows that the algorithm eliminates second-order quantification in the case of existential theories considered in <ref> [7] </ref>. Theorem 4.2 If T is a first-order existential sentence, then the algorithm eliminates second-order quantification from Circ SO (T ; P ; ()). <p> Consequently, Circ SO (; P ; ()) ^[8y:P (y)]^8y [:P (b)_y = b_:P (y)]: (131) (130) can be simplified using some standard equivalences: [8y:P (y)]^8y [:P (b)_y = b_:P (y)] 8y::P (y): (132) 6.7 An Existential Example Kolaitis and Papadimitriou <ref> [7] </ref> show that the circumscription of any existential first-order formula is equivalent to a first-order formula. We have already shown that the algorithm we propose here generalizes Kolaitis and Papadimitriou's results. It is interesting to compare these reduction techniques in terms of complexity. Kolaitis and Papadimitriou [7] state We notice that <p> Example Kolaitis and Papadimitriou <ref> [7] </ref> show that the circumscription of any existential first-order formula is equivalent to a first-order formula. We have already shown that the algorithm we propose here generalizes Kolaitis and Papadimitriou's results. It is interesting to compare these reduction techniques in terms of complexity. Kolaitis and Papadimitriou [7] state We notice that computing a first-order sentence equivalent to the circumscription of P in an existential first-order formula (P ) seems to increase the size of (P ) exponentially, a phenomenon not observed in the other known cases of first-order circumscription studied in [Lif85].
Reference: [8] <author> Konolige, V. </author> <title> (1994) Autoepistemic Logic, </title> <booktitle> in: Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> vol. 3 (D.M. </volume> <editor> Gabbay, C.J. Hogger & J.A. Robinson, eds.), </editor> <publisher> Clarendon Press, Oxford. </publisher>
Reference-contexts: Among the candidates proposed, three in particular have been studied exhaustively in terms of formal properties and applicability to a variety of domains such as default reasoning, inheritance reasoning, and reasoning about action and change. The three candidates are * Default Logic [14], * Autoepistemic Logic <ref> [8] </ref>), * Circumscription [11]. The popularity of each of these formalisms has varied through the years as both positive and negative results concerning their respective expressibility and applicability to various domains have been investigated.
Reference: [9] <author> Lifschitz, V. </author> <title> (1985) Computing Circumscription, </title> <booktitle> in: Proc. 9th IJCAI, </booktitle> <address> Los Angeles, CA, </address> <pages> 121-127. </pages>
Reference-contexts: In this section, we provide the relevant results from the handbook, in addition to results by other authors pertaining to reduction results for circumscription and second-order logic. The original notations are slightly adjusted to agree with the notation used in this paper. 4 2.1 Lifschitz' Results In Lifschitz <ref> [9] </ref> we are presented with the following result concerning the reduction of second-order circumscription into first-order logic. <p> This limitation can often be avoided by applying the following result (Lifschitz <ref> [9] </ref>). Theorem 2.2 Circ SO (T (P ; S); P ; S) is equivalent to T (P ; S) ^ Circ SO (9: T (P ; ); P ; ()). <p> Although Theorem 2.2 allows us to transform any second-order circumscription into a circumscription without variable constants, the transformation introduces new second-order variables. These can often be eliminated as follows (Lifschitz <ref> [9] </ref>). Theorem 2.3 If T () is equivalent to (2) of Definition 1.5, then 9: T () is equivalent to W m i=1 B i (U i ): A different result concerning the reduction of second-order circumscription into first-order logic is presented in Lifschitz [10]. The details are these. <p> If the input formula cannot be transformed into the form (8) then the algorithm fails. 4 On the Strength of the Algorithm Let us first prove that the algorithm subsumes, and is even stronger than the results given in <ref> [7, 9, 10, 16] </ref>. Recall that the formulation of those results is quoted in Section 2. Let us start with Rabinov's result (and thus the subsumed results of Lifschitz). In fact, the following theorem is stronger than the result of Rabinov.
Reference: [10] <author> Lifschitz, V. </author> <title> (1988) Pointwise Circumscription, </title> <note> in: Readings in Non-Monotonic Reasoning, </note> <editor> M. Ginsberg (ed.), </editor> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Palo Alto, CA, </address> <pages> 179-193. </pages>
Reference-contexts: Theorem 2.3 If T () is equivalent to (2) of Definition 1.5, then 9: T () is equivalent to W m i=1 B i (U i ): A different result concerning the reduction of second-order circumscription into first-order logic is presented in Lifschitz <ref> [10] </ref>. The details are these. <p> If the input formula cannot be transformed into the form (8) then the algorithm fails. 4 On the Strength of the Algorithm Let us first prove that the algorithm subsumes, and is even stronger than the results given in <ref> [7, 9, 10, 16] </ref>. Recall that the formulation of those results is quoted in Section 2. Let us start with Rabinov's result (and thus the subsumed results of Lifschitz). In fact, the following theorem is stronger than the result of Rabinov.
Reference: [11] <author> Lifschitz, V. </author> <title> (1994) Circumscription, </title> <booktitle> in: Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> vol. 3 (D.M. </volume> <editor> Gabbay, C.J. Hogger & J.A. Robinson, eds.), </editor> <publisher> Clarendon Press, Oxford, </publisher> <pages> 297-352. </pages>
Reference-contexts: Among the candidates proposed, three in particular have been studied exhaustively in terms of formal properties and applicability to a variety of domains such as default reasoning, inheritance reasoning, and reasoning about action and change. The three candidates are * Default Logic [14], * Autoepistemic Logic [8]), * Circumscription <ref> [11] </ref>. The popularity of each of these formalisms has varied through the years as both positive and negative results concerning their respective expressibility and applicability to various domains have been investigated. <p> We call this equivalence second-order Skolemization. 2 Known Results about Reducing Second-Order Circum scription A collection of current results concerning the reduction of second-order circumscription axioms to the first-order case may be found in the handbook article on circumscription by Lifschitz <ref> [11] </ref>, in addition to references to reduction results of other authors not covered in the handbook. In this section, we provide the relevant results from the handbook, in addition to results by other authors pertaining to reduction results for circumscription and second-order logic. <p> occurrences of P = (P 1 ; : : : ; P n ) are positive, then Circ SO (T ; P ; ()) is equiv alent to n ^ [T (P i ) ^ 8x: : [P i (x) ^ T (y: (P (y) ^ y 6= x)]]: In <ref> [11] </ref> Lifschitz also formulated the following theorem. Theorem 2.5 If T (P ) is a first-order sentence separated w.r.t.
Reference: [12] <author> Lukaszewicz, W. </author> <title> (1990) Non-monotonic Reasoning. Formalization of Commonsense Reasoning, </title> <publisher> Ellis Horwood Ltd. </publisher> <pages> 25 </pages>
Reference: [13] <author> Lowenheim, L. </author> <title> (1915) Uber Moglichkeiten im Relativekalkul, </title> <journal> Mathematische Annalen, 137--148. </journal>
Reference-contexts: Theorem 2.7 If T is a first-order existential sentence, then Circ SO (T ; P ; ()) is equivalent to a first-order sentence. 2.4 Second-Order Monadic Logic The following result is due to Lowenheim (see <ref> [13] </ref>). Theorem 2.8 If T is a monadic second-order sentence, then T is equivalent to a first-order sentence T 0 . 2.5 The SCAN Algorithm The SCAN algorithm was introduced by D. Gabbay and H. J. Ohlbach in [4].
Reference: [14] <author> Poole, D. </author> <title> (1994) Default Logic, </title> <booktitle> in: Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> vol. 3 (D.M. </volume> <editor> Gabbay, C.J. Hogger & J.A. Robinson, eds.), </editor> <publisher> Clarendon Press, Oxford. </publisher>
Reference-contexts: Among the candidates proposed, three in particular have been studied exhaustively in terms of formal properties and applicability to a variety of domains such as default reasoning, inheritance reasoning, and reasoning about action and change. The three candidates are * Default Logic <ref> [14] </ref>, * Autoepistemic Logic [8]), * Circumscription [11]. The popularity of each of these formalisms has varied through the years as both positive and negative results concerning their respective expressibility and applicability to various domains have been investigated.
Reference: [15] <author> Przymusinski, T. </author> <title> (1991) An Algorithm to Compute Circumscription, </title> <booktitle> in: Artificial Intelligence 38, </booktitle> <pages> 49-73. </pages>
Reference-contexts: Compiling circumscriptive theories into logic programs. A representative example of this approach is Gelfond [5]. 2. Developing specialized algorithms to compute preferential entailment. Some representative examples of this approach are a proposal for a theorem prover for circumscription by Gins berg [6], and the MILO method proposed by Przymusinski <ref> [15] </ref>. 3. Compiling the second-order circumscription axiom into an equivalent first-order formula and then applying classical theorem-proving techniques to the resulting first-order theory.
Reference: [16] <author> Rabinov, A. </author> <title> (1989) A Generalization of Collapsible Cases of Circumscription (Research Note), </title> <booktitle> Artificial Intelligence 38, </booktitle> <pages> 111-117. </pages>
Reference-contexts: Theorem 2.5 If T (P ) is a first-order sentence separated w.r.t. P then Circ SO (T (P ); P ; ()) is equivalent to a first-order sentence. 2.2 Rabinov's Result Rabinov <ref> [16] </ref> provides the following result which subsumes the earlier results of Lifschitz (excluding Theorem 2.5). If U and V are predicate expressions, then U " V stands for x: (U (x) ^ V (x)). <p> If the input formula cannot be transformed into the form (8) then the algorithm fails. 4 On the Strength of the Algorithm Let us first prove that the algorithm subsumes, and is even stronger than the results given in <ref> [7, 9, 10, 16] </ref>. Recall that the formulation of those results is quoted in Section 2. Let us start with Rabinov's result (and thus the subsumed results of Lifschitz). In fact, the following theorem is stronger than the result of Rabinov.
Reference: [17] <author> Reiter, R. </author> <title> (1980) A Logic for Default Reasoning, </title> <booktitle> Artificial Intelligence 13, </booktitle> <pages> 81-131. </pages>
Reference-contexts: Consequently, Circ SO (; Ab; H) ^8s8t::Ab (s; t): (90) which implies 8x9yH (x; y): (91) 6.5 The Vancouver Example This is a variant of an example from Reiter <ref> [17] </ref>. Rather than using the function city as Reiter does, we will use a relation C (x; y) with suitable axioms. Example 6.5 (Vancouver Example) We begin by defining the binary relation C with the intention that C (x; y) holds iff the city of x is y.
Reference: [18] <author> Sza las, A. </author> <title> (1993) On the Correspondence Between Modal and Classical Logic: an Automated Approach, </title> <journal> Journal of Logic and Computation, </journal> <volume> 3, </volume> <pages> 605-620. </pages>
Reference-contexts: In what follows we shall not compare SCAN with our algorithm since no syntactic characterization of formulas accepted by SCAN is known. Observe that some examples where SCAN was better than the algorithm given in <ref> [18] </ref> were known. On the other hand, in the present paper we strengthen the algorithm of [18] by adding the equivalence (16) of Proposition 1.1. <p> Observe that some examples where SCAN was better than the algorithm given in <ref> [18] </ref> were known. On the other hand, in the present paper we strengthen the algorithm of [18] by adding the equivalence (16) of Proposition 1.1. After this modification we conjecture that both approaches are successful for the same class of formulas. 6 However, the additional advantage of our algorithm is that it always terminates, while SCAN may loop. <p> Its complete formulation can be found in the Appendix. The algorithm was originally formulated, in a weaker form, in <ref> [18] </ref> in the context of modal logics. It is based on Ackermann's techniques developed in connection with the elimination problem (see [1]). The elimination algorithm is based on the following lemma, proved by Ackermann in 1934 (see [1]). The proof can also be found in [18]. <p> in a weaker form, in <ref> [18] </ref> in the context of modal logics. It is based on Ackermann's techniques developed in connection with the elimination problem (see [1]). The elimination algorithm is based on the following lemma, proved by Ackermann in 1934 (see [1]). The proof can also be found in [18]. Lemma 3.1 (Ackermann Lemma) Let be a predicate variable and A (x), B () be formulas without second-order quantification. Let B () be positive w.r.t. and let A contain no occurrences of at all. <p> Proof See <ref> [18] </ref>. 3.1 Outline of the Elimination Algorithm We are now ready to outline the elimination algorithm. The algorithm takes a formula of the form 9:A, where A is a first-order formula, as an input and returns its first-order equivalent or reports failure 1 . <p> On the other hand, it is well known that second-order quantifiers can sometimes be eliminated when additional information is given. One good illustrative example originates from the area of modal logics. Namely, McKinsey's axiom is not equivalent to any first-order formula. Accordingly, our algorithm fails (see <ref> [18] </ref>). However, when one assumes that the accessibility relation is transitive, the elimination is possible, since McKinsey together with transitivity is first-order definable (see [21]). The same situation may occur when one computes circumscription. Consider the theorem of Lifschitz (Theorem 2.5 above).
Reference: [19] <author> Sza las, A. </author> <title> (1994) On an Automated Translation of Modal Proof Rules into Formulas of the Classical Logic, </title> <journal> Journal of Applied Non-classical Logics, </journal> <volume> 4, </volume> <pages> 119-128. </pages>
Reference: [20] <author> Van Benthem, J. </author> <title> (1983) Modal Logic and Classical Logic, </title> <publisher> Bibliopolis, Napoli. </publisher>
Reference-contexts: We extend the method by adding the equivalence (16). It makes the technique work in the case of clauses containing more than one positive (or negative) occurrence of the eliminated predicate. This essentially generalizes the Ackermann technique. The equivalence (17) is a second-order formulation of the Skolem reduction (see <ref> [20] </ref>). It allows us to perform Skolemization (i.e. elimination of existential quantifiers) and unskolemization (i.e. elimination of Skolem functions) in such a way that equivalence is preserved.
Reference: [21] <author> Van Benthem, J. </author> <year> (1984): </year> <title> Correspondence Theory, </title> <booktitle> in: Handbook of Philosophical Logic, </booktitle> <volume> Vol. 2 (D. </volume> <editor> Gabbay and F. Guenthner, eds.), D. </editor> <publisher> Reidel Pub. Co., </publisher> <pages> 167-247. </pages>
Reference-contexts: The problem we are dealing with is not even partially decidable, for first-order definability of the formulas we consider is not an arithmetical notion (see, for instance, <ref> [21] </ref>). 7 (1) Preprocessing. The purpose of this phase is to transform the formula 9:A into a form that separates positive and negative occurrences of the quantified predicate variable . <p> Namely, McKinsey's axiom is not equivalent to any first-order formula. Accordingly, our algorithm fails (see [18]). However, when one assumes that the accessibility relation is transitive, the elimination is possible, since McKinsey together with transitivity is first-order definable (see <ref> [21] </ref>). The same situation may occur when one computes circumscription. Consider the theorem of Lifschitz (Theorem 2.5 above). It permits us to deal with any sequences of first-order quantifiers 11 provided that the formula is separated.
References-found: 21

