URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/jsac96.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/publications/publications_sorted_by_subject.html
Root-URL: http://www.cse.ucsc.edu
Title: ARIES: A Rearrangeable Inexpensive Edge-based On-line Steiner Algorithm  
Author: Fred Bauer Anujan Varma 
Date: August 10, 1995  
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering Department University of California  
Abstract: This research is supported by the Advanced Research Projects Agency (ARPA) under Contract No. F19628-93-C-0175 and by the NSF Young Investigator Award No. MIP-9257103. This paper was presented in part at INFOCOM '96, San Francisco, March 1996. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Ballardie, P. Francis, and J. Crowcroft. </author> <title> "Core Based Trees (CBT): An architecture for scalable inter-domain multicast routing", </title> <booktitle> in Proc. ACM SIGCOMM, </booktitle> <address> San Francisco, </address> <pages> pp. 85-95, </pages> <year> 1993. </year>
Reference-contexts: Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees <ref> [1] </ref>. These approaches are appropriate for datagram environments such as the Internet in which the routes taken by multicast packets may vary and low algorithm overhead is more important than multicast tree cost (sum of tree edge weights as defined below).
Reference: [2] <author> F. Bauer and A. Varma. </author> <title> "Degree-constrained multicasting in point-to-point networks", </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Boston, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 369-376. </pages>
Reference-contexts: Supporting such applications requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static mul-ticast tree in point-to-point networks <ref> [2, 5, 13] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Multicast update algorithms to update the multicast tree quickly already exist. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1]. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (K-SPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [2, 14, 19] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation [3]. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations [2, 3]. Using K-SPH, the rearrangement algorithm proceeds as follows. <p> Second, the algorithm lends itself to distributed, asynchronous implementation [3]. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations <ref> [2, 3] </ref>. Using K-SPH, the rearrangement algorithm proceeds as follows. If R j is the region in which the rearrangement was triggered, the algorithm removes all the D-nodes and edges in R j . The fragments left behind are then combined into a new multicast tree by the K-SPH algorithm. <p> While our worst-case competitiveness bound was c times optimal, these simulation results show average case competitiveness much better than the bound. These results for competitiveness are consistent with our experience with Steiner tree heuristics both in this paper and previous research <ref> [2, 3] </ref>. While maximum and minimum values for competitiveness were relatively random between cases, they seemed to vary most for small graphs.
Reference: [3] <author> F. Bauer and A. Varma. </author> <title> "Distributed algorithms for multicast path setup in data networks", </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 181-191, </pages> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: First, it is naturally suited to constructing multicast trees by combining fragments of the tree [2, 14, 19]. Second, the algorithm lends itself to distributed, asynchronous implementation <ref> [3] </ref>. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations [2, 3]. Using K-SPH, the rearrangement algorithm proceeds as follows. <p> Second, the algorithm lends itself to distributed, asynchronous implementation [3]. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations <ref> [2, 3] </ref>. Using K-SPH, the rearrangement algorithm proceeds as follows. If R j is the region in which the rearrangement was triggered, the algorithm removes all the D-nodes and edges in R j . The fragments left behind are then combined into a new multicast tree by the K-SPH algorithm. <p> To be practical, however, the algorithm must have a distributed implementation. The rearrangement heuristic we have chosen, heuristic K-SPH, already has a published distributed implementation <ref> [3] </ref>. The remaining portion of ARIES may be implemented as shown by the finite state machine in Figure 7. 12 In the following description of the distributed version of ARIES, each multicast tree node executes the finite state machine shown in Figure 7. <p> Addition and deletion of members, as well as the generation of update messages, can be performed by the rearrangement algorithm since distributed Steiner algorithms such as that described in <ref> [3] </ref> already provide mechanisms to connect nodes by their shortest path and propagate messages in a distributed fashion. Note that we did not describe the additional provisions necessary in an environment in which update messages do not arrive reliably. <p> While our worst-case competitiveness bound was c times optimal, these simulation results show average case competitiveness much better than the bound. These results for competitiveness are consistent with our experience with Steiner tree heuristics both in this paper and previous research <ref> [2, 3] </ref>. While maximum and minimum values for competitiveness were relatively random between cases, they seemed to vary most for small graphs.
Reference: [4] <author> J. Beasley. </author> <title> "An SST-based algorithm for the Steiner problem in graphs", </title> <journal> Networks, </journal> <volume> vol. 19, </volume> <pages> pp. 1-16, </pages> <year> 1989. </year>
Reference-contexts: This paper presents a new, low-cost heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [4, 5, 6, 10, 19] </ref>. Consequently. its explicit solutions are prohibitively expensive.
Reference: [5] <author> L. Berry. </author> <title> "Graph theoretic models for multicast communications", in Traffic theories for new telecommunications services, </title> <booktitle> ITC Specialists Seminar, </booktitle> <address> Adelaide, Australia, </address> <month> Sep. </month> <year> 1989, </year> <pages> pp. 95-99. </pages>
Reference-contexts: Supporting such applications requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static mul-ticast tree in point-to-point networks <ref> [2, 5, 13] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Multicast update algorithms to update the multicast tree quickly already exist. <p> This paper presents a new, low-cost heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [4, 5, 6, 10, 19] </ref>. Consequently. its explicit solutions are prohibitively expensive.
Reference: [6] <author> K. Bharath-Kumar and Jaffe. </author> <title> "Routing to multiple destinations in computer networks", </title> <journal> IEEE Transactions on Communications, </journal> <volume> vol. COM-31, no. 3, </volume> <pages> pp. 343-351, </pages> <month> Mar. </month> <year> 1983. </year> <month> 25 </month>
Reference-contexts: This paper presents a new, low-cost heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [4, 5, 6, 10, 19] </ref>. Consequently. its explicit solutions are prohibitively expensive. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1].
Reference: [7] <author> S. Deering and D. Cheriton. </author> <title> "Multicast routing in datagram internetworks and extended LANs," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 8, no. 2, </volume> <pages> pp. 85-110, </pages> <year> 1990. </year>
Reference-contexts: Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP <ref> [7] </ref>, PIM [8], and core-based trees [1]. These approaches are appropriate for datagram environments such as the Internet in which the routes taken by multicast packets may vary and low algorithm overhead is more important than multicast tree cost (sum of tree edge weights as defined below).
Reference: [8] <author> S. Deering, et al. </author> <title> "The PIM architecture for wide-area multicast routing", </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 153-162, </pages> <year> 1996. </year>
Reference-contexts: Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM <ref> [8] </ref>, and core-based trees [1]. These approaches are appropriate for datagram environments such as the Internet in which the routes taken by multicast packets may vary and low algorithm overhead is more important than multicast tree cost (sum of tree edge weights as defined below).
Reference: [9] <author> M. Doar and I. Leslie. </author> <title> "How bad is naive multicast routing?", </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Apr. </month> <year> 1993, </year> <pages> pp. 82-89. </pages>
Reference-contexts: In our simulations, each request was presented to the network only after the previous request was completely serviced. The 50 test graphs were generated to resemble real networks in a manner similar to that of Doar <ref> [9] </ref>. Each of the 200 nodes is distributed across a Cartesian coordinate plane with minimum and maximum coordinates (0; 0) and (400; 400), creating a forest of 200 nodes spread across this plane. The nodes are then connected by a random spanning tree. <p> Each edge's distance is its rectilinear distance. We used the probability function P (x; y) = fie 400ff ; where d x;y is the rectilinear distance between nodes x and y <ref> [9] </ref>. The parameters ff and fi govern the density of the graph. Increasing ff increases the number of connections to nodes far away and increasing fi increases the number of edges from each node.
Reference: [10] <author> F. Hwang and D. Richards. </author> <title> "Steiner tree problems", </title> <journal> Networks, </journal> <volume> vol. 22, </volume> <pages> pp. 55-89, </pages> <year> 1992. </year>
Reference-contexts: This paper presents a new, low-cost heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [4, 5, 6, 10, 19] </ref>. Consequently. its explicit solutions are prohibitively expensive. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1].
Reference: [11] <author> M. Imase and B. Waxman. </author> <title> "Dynamic Steiner tree problem", </title> <journal> SIAM J. Disc. Math., </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 369-384, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman [17] and has received little attention since <ref> [11, 12, 18] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [11, 17] </ref>. We summarize both heuristics below for the reader's convenience. 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [11, 17] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [11, 17] </ref>. We summarize both heuristics below for the reader's convenience. 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [11, 17] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. <p> For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. This continues until no non-member leaves remain. 2.2 The Edge-Bounded Algorithm (EBA) The rearrangement heuristic EBA (the edge-bounded algorithm) <ref> [11] </ref> enforces bounds on the distance between nodes in the tree after each change, and performs rearrangements when the distance exceeds a set bound. EBA starts by converting the original graph to a corresponding distance graph. <p> The cost of the latter, in turn, is no more than twice that of an optimal Steiner tree. Since Imase and Waxman chose a value of 2 for the constant ffi in <ref> [11] </ref>, we also use ffi = 2 in our simulations. This ensures that the cost of the multicast tree found by EBA is always within 4ffi = 8 times that of an optimal Steiner tree for the multicast group. <p> If more than one cheapest alternative exists, GSDM chooses the one with greatest geographic spread [12]. For each delete request, GSDM behaves exactly as GREEDY does. 2.4 Bounds for On-Line Heuristics Waxman and Imase <ref> [11] </ref> provide bounds for the competitiveness of all non-rearrangement heuristics in general and GREEDY in specific when only add requests are honored. Here competitiveness is defined as the ratio between the cost of a multicast tree found by the heuristic and that of an optimal tree. <p> Imase and Waxman have shown that no such finite bound exists if delete requests are also honored <ref> [11] </ref>. A rearrangeable heuristic, however, can have a finite bound for competitiveness for both add and delete requests. For example, heuristic EBA's upper bound is 4ffi where ffi is EBA's constant as described in Section 2.2. <p> For example, heuristic EBA's upper bound is 4ffi where ffi is EBA's constant as described in Section 2.2. In both our simulations and Imase and Waxman's paper, ffi = 2 and the upper bound is therefore 8 <ref> [11] </ref>. <p> Our primary objective is to derive an upper bound on its competitiveness between rearrangements. Between rearrangements, ARIES behaves similar to GREEDY and shares its bounds. From Imase and Waxman <ref> [11] </ref>, we know that the upper bound considering only add requests is log 2 (n i ), where n i is the number of nodes in the tree T i after request r i . However, no such finite bounds exist for GREEDY with respect to delete requests.
Reference: [12] <author> J. Kadirire. </author> <title> "Comparison of dynamic multicast routing algorithms for wide-area packet switched (asynchronous transfer mode) networks", </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Boston, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 212-219. </pages>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman [17] and has received little attention since <ref> [11, 12, 18] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> This is repeated until no non-member nodes with degree 2 remain in ^ T . 2.3 The Geographic-Spread Dynamic Multicast Heuristic A second rearrangement heuristic is Kadirire's GSDM, the geographic-spread dynamic multicast routing algorithm <ref> [12] </ref>. When adding nodes, this heuristic relies on exploring four explicit connection configurations between the new member and three nearby nodes in the existing tree. For each add request, it identifies the tree node closest to the new member and its two closest multicast neighbors in the tree. <p> The heuristic then chooses the least-cost configuration among four possible ways to connect the new member to the three identified nodes. If more than one cheapest alternative exists, GSDM chooses the one with greatest geographic spread <ref> [12] </ref>. For each delete request, GSDM behaves exactly as GREEDY does. 2.4 Bounds for On-Line Heuristics Waxman and Imase [11] provide bounds for the competitiveness of all non-rearrangement heuristics in general and GREEDY in specific when only add requests are honored.
Reference: [13] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Multicasting for multimedia applications", </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> New York, </address> <month> May </month> <year> 1992, </year> <pages> pp. 2078-2085. </pages>
Reference-contexts: Supporting such applications requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static mul-ticast tree in point-to-point networks <ref> [2, 5, 13] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Multicast update algorithms to update the multicast tree quickly already exist. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1].
Reference: [14] <author> M. Smith and P. Winter. </author> <title> "Path-distance heuristics for the Steiner problem in undirected networks", </title> <journal> Algorithmica, </journal> <volume> vol. 7, no. </volume> <pages> 2-3, pp. 309-327, </pages> <year> 1992. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1]. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (K-SPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [2, 14, 19] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation [3]. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations [2, 3]. Using K-SPH, the rearrangement algorithm proceeds as follows.
Reference: [15] <author> H. Takahashi and A. </author> <title> Matsuyama. "An approximate solution for the Steiner problem in graphs", </title> <journal> Math. Japonica, </journal> <volume> vol. 24, no. 6, </volume> <pages> pp. 573-577, </pages> <year> 1980. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1].
Reference: [16] <author> S. Voss. </author> <title> "Steiner's problem in graphs: Heuristic methods", </title> <journal> Discrete Applied Mathematics, </journal> <volume> vol. 40, </volume> <pages> pp. 45-72, </pages> <year> 1992. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1]. <p> This is because of the use of distance graphs in EBA. A Steiner trees produced by EBA resembles a merged shortest path tree when translated back to its real-world equivalent and we know merged shortest-path trees to be sub-optimal <ref> [16] </ref>. This disadvantage is exaggerated because EBA requires internal, non-member nodes to have degree greater than two. EBA's competitiveness distribution becomes superior to that of GREEDY for competitiveness greater than 1.05 because the former the tree when additions or deletions violate its constraints.
Reference: [17] <author> B. Waxman. </author> <title> "Routing of multipoint connections", </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 6, no. 9, </volume> <pages> pp. 1617-1622, </pages> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman <ref> [17] </ref> and has received little attention since [11, 12, 18]. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> In his original paper on the on-line multicast problem (referred to as the dynamic multipoint problem), Waxman divides on-line heuristics into two types: those that allow rearrangement of the tree and those that do not <ref> [17] </ref>. In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type [11, 17]. We summarize both heuristics below for the reader's convenience. 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [11, 17] perturbs the existing tree as little as possible. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [11, 17] </ref>. We summarize both heuristics below for the reader's convenience. 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [11, 17] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [11, 17] </ref>. We summarize both heuristics below for the reader's convenience. 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic GREEDY [11, 17] perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. <p> Each heuristic received 100 requests to add or delete a multicast member for each test network. The probability of an add request is related to N t , the number of nodes in the tree, by the function <ref> [17] </ref>: fl (200 N t ) : The value of fl determines the equilibrium point at which the probability of an add or delete is equally likely. In our simulations fl was set to 0:3, the fraction of multicast members.
Reference: [18] <author> J. Westbrook and D. Yan. </author> <title> "Greedy algorithms for the on-line Steiner tree and generalized Steiner problems", in Algorithms and data structures. </title> <booktitle> Third Workshop, WADS '93., </booktitle> <address> Montreal, Quebec, Canada, </address> <month> Aug. </month> <year> 1993, </year> <pages> pp. 621-633. </pages>
Reference-contexts: The problem of updating the multicast tree after each addition and deletion is known as the on-line multicast problem in networks. This paper focuses on its Steiner equivalent, the on-line Steiner problem in networks <ref> [18] </ref>. <p> We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists that runs in polynomial time. The on-line multicast problem was first presented by Waxman [17] and has received little attention since <ref> [11, 12, 18] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> These bounds are shown in Figure 1. Westbrook <ref> [18] </ref> provides a tighter upper bound for heuristic GREEDY when only add requests are honored.
Reference: [19] <author> P. Winter. </author> <title> "Steiner problem in networks: A survey", </title> <journal> Networks, </journal> <volume> vol. 17, no. 2, </volume> <pages> pp. 129-167, </pages> <year> 1987. </year> <month> 26 </month>
Reference-contexts: This paper presents a new, low-cost heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [4, 5, 6, 10, 19] </ref>. Consequently. its explicit solutions are prohibitively expensive. <p> Consequently. its explicit solutions are prohibitively expensive. For example, two popular explicit algorithms, the spanning tree enumeration algorithm and the dynamic programming algorithm <ref> [19] </ref>, have algorithmic complexities of O (p 2 2 (np) + n 3 ) and O (n3 p + n 2 2 p + n 3 ), respectively, where n is the number of nodes in the graph and p the number of multicast members. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [2, 6, 10, 13, 14, 15, 16, 19] </ref>. Approaches to creating multicast trees that do not use Steiner tree heuristics have been proposed elsewhere. Three notable papers of alternative approaches include DVMRP [7], PIM [8], and core-based trees [1]. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (K-SPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [2, 14, 19] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation [3]. Finally, K-SPH has been shown to be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations [2, 3]. Using K-SPH, the rearrangement algorithm proceeds as follows.
References-found: 19

