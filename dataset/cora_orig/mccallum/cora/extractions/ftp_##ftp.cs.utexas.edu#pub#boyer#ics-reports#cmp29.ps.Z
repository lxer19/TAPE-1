URL: ftp://ftp.cs.utexas.edu/pub/boyer/ics-reports/cmp29.ps.Z
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/ics-reports/index.html
Root-URL: http://www.cs.utexas.edu
Title: THE USE OF A FORMAL SIMULATOR TO VERIFY A SIMPLE REAL TIME CONTROL PROGRAM  
Author: Robert S. Boyer Milton W. Green J Strother Moore 
Address: Austin, Texas 78712  
Affiliation: Institute for Computing Science and Computer Applications The University of Texas at Austin  
Note: (512) 471-1901 Texas 78712. This research was supported in part by NASA Contract NAS1-15528, NSF Grant MCS-7904081, and ONR Contract N00014-75-C-0816.  
Date: July 1982  
Pubnum: ICSCA-CMP-29  
Abstract: Institute for Computing Science 2100 Main Building The University of Texas at Austin The work reported here was performed while the authors were in the Computer Science Laboratory, SRI International, Menlo Park, California 94025, where Green may be reached. The present address of Boyer and Austin, Texas 78712 Moore is Institute for Computer Science and Computer Applications, University of Texas at Austin, Austin, 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. B. Anderson. </author> <title> Proving Programs Correct. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, New York, </address> <year> 1979. </year>
Reference-contexts: In the first step, the code and its mathematical specifications are transformed into a set of formulas to be proved. In the second step the formulas are proved using the usual laws of logic, algebra, number theory, etc. For an introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program 1 V. Kahan, of U.C. Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed.
Reference: 2. <institution> American National Standards Institute, Inc. American National Standard Programming Language FORTRAN. ANSI X3.9-1978, American National Standards Institute, Inc., </institution> <address> 1430 Broadway, N.Y. 10018, </address> <month> April, </month> <year> 1978. </year>
Reference-contexts: ISQRT)) RETURN ISQRT = ((ISQRT + (I / ISQRT)) / 2) GOTO 200 END It is possible to prove, mathematically, that the program satisfies the following (informally stated) specification: If the program is executed on a machine implementing ANSI FORTRAN 66 or 77 <ref> [13, 2] </ref>, and the input to the program is a nonnegative integer representable on the host machine, then the program terminates, causes no arithmetic overflow or other run time error, and the output is the largest integer whose square is less than or equal to the input.
Reference: 3. <author> A. M. Ballantyne and W. W. Bledsoe. </author> <title> Automatic Proofs of Theorems in Analysis using Non-Standard Techniques. </title> <institution> ATP-23, Department of Mathematics, University of Texas at Austin, </institution> <month> July, </month> <year> 1975. </year>
Reference-contexts: Thus, our model more accurately represents a one-dimensional control problem, such as maintaining constant temperature in an 2 Honeywell Systems and Research Center, 2600 Ridgway Parkway, Minneapolis, Minnesota 55413 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 3 environment where the outside temperature varies, or maintaining constant speed, as in an automobile's "cruise control." We measure the wind speed, w, in terms of the number of units in the y-direction the wind would blow a passive
Reference: 4. <author> W. Bledsoe, R. Boyer, and W. Henneman. </author> <title> "Computer Proofs of Limit Theorems". </title> <booktitle> Artificial Intelligence 3 (1972), </booktitle> <pages> 27-60. </pages>
Reference-contexts: Thus, our model more accurately represents a one-dimensional control problem, such as maintaining constant temperature in an 2 Honeywell Systems and Research Center, 2600 Ridgway Parkway, Minneapolis, Minnesota 55413 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 3 environment where the outside temperature varies, or maintaining constant speed, as in an automobile's "cruise control." We measure the wind speed, w, in terms of the number of units in the y-direction the wind would blow a passive
Reference: 5. <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system [6]. The logic and a mechanical theorem-prover for it are completely described in <ref> [5] </ref>. The syntax of the logic is akin to that of Church's lambda-calculus. If f is a function in the logic and e1 and e2 are two expressions in the logic, then we write (f e1 e2) to denote the value of f on the two arguments e1 and e2. <p> Then the y-position of the vehicle in that final STATE is 0. 5. Proving the Conjectures The foregoing conjectures can be proved mathematically. Indeed, they have been proved by the mechanical theorem-prover described in <ref> [5] </ref>. The key to the proof is that the state space of the vehicle can be partitioned into a small finite number of classes.
Reference: 6. <author> R. S. Boyer and J S. Moore. </author> <title> A Verification Condition Generator for FORTRAN. In The Correctness Problem in Computer Science, </title> <editor> R. S. Boyer and J S. Moore, Eds., </editor> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1981. </year>
Reference-contexts: Because the mathematics involved in program verification is often tedious and elementary, mechanical program 1 V. Kahan, of U.C. Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed. One such system is described in <ref> [6] </ref>. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program [7], among others. To admit mechanical proof, the specifications must be written in a completely formal notation. <p> Formalizing the Model To state the conjectures formally we must formalize the model of the control program and its environment. We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system <ref> [6] </ref>. The logic and a mechanical theorem-prover for it are completely described in [5]. The syntax of the logic is akin to that of Church's lambda-calculus.
Reference: 7. <author> R. S. Boyer and J S. Moore. </author> <title> The Mechanical Verification of a FORTRAN Square Root Program. </title> <booktitle> SRI International, </booktitle> <year> 1981. </year>
Reference-contexts: Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed. One such system is described in [6]. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program <ref> [7] </ref>, among others. To admit mechanical proof, the specifications must be written in a completely formal notation.
Reference: 8. <author> R. S. Boyer and J S. Moore. </author> <title> MJRTY - A Fast Majority Vote Algorithm. </title> <type> Technical Report ICSCA-CMP-32, </type> <institution> Institute for Computing Science and Computer Applications, University of Texas at Austin, </institution> <year> 1982. </year>
Reference-contexts: Allowance for noise in the sensors can be handled by existing program verification technology. For example, if one provides redundant sensors and employs a signal select algorithm based on software majority voting, DELTAV can be rewritten to use an algorithm such as that verified in <ref> [8] </ref> to compute the majority sensor reading (if any). The proof that the vehicle stays on course can then be carried over directly if one is willing to assume that at each sampling interval a majority of the sensors agree.
Reference: 9. <author> R. Floyd. </author> <title> Assigning Meanings to Programs. </title> <booktitle> In Mathematical Aspects of Computer Science, Proceedings of Symposia in Applied Mathematics, </booktitle> <publisher> American Mathematical Society, </publisher> <address> Providence, Rhode Island, </address> <year> 1967, </year> <pages> pp. 19-32. </pages>
Reference-contexts: In the first step, the code and its mathematical specifications are transformed into a set of formulas to be proved. In the second step the formulas are proved using the usual laws of logic, algebra, number theory, etc. For an introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program 1 V. Kahan, of U.C. Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed.
Reference: 10. <author> J. C. King. </author> <title> A Program Verifier. </title> <type> Ph.D. </type> <institution> Th., Carnegie-Mellon University, </institution> <year> 1969. </year>
Reference-contexts: In the first step, the code and its mathematical specifications are transformed into a set of formulas to be proved. In the second step the formulas are proved using the usual laws of logic, algebra, number theory, etc. For an introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program 1 V. Kahan, of U.C. Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed.
Reference: 11. <author> Z. Manna. </author> <title> Mathematical Theory of Computation. </title> <publisher> McGraw-Hill Book Company, </publisher> <address> New York, New York, </address> <year> 1974. </year>
Reference-contexts: In the first step, the code and its mathematical specifications are transformed into a set of formulas to be proved. In the second step the formulas are proved using the usual laws of logic, algebra, number theory, etc. For an introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program 1 V. Kahan, of U.C. Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed.
Reference: 12. <author> J. Moses. </author> <title> Algebraic Simplification: A Guide for the Perplexed. </title> <booktitle> 2nd Symposium on Symbolic and Algebraic Manipulation, ACM, </booktitle> <year> 1971. </year>
Reference-contexts: Several existing mechanical theorem-provers, e.g., those of Bledsoe's school [4, 3], and the MAXSYMA symbolic manipulation system <ref> [12] </ref>, provide analytic capability. 3 environment where the outside temperature varies, or maintaining constant speed, as in an automobile's "cruise control." We measure the wind speed, w, in terms of the number of units in the y-direction the wind would blow a passive vehicle in one sampling interval.
Reference: 13. <institution> United States of America Standards Institute. USA Standard FORTRAN. USAS X3.9-1966, United States of America Standards Institute, </institution> <address> 10 East 40th Street, New York, New York 10016, </address> <year> 1966. </year> <title> Table of Contents </title>
Reference-contexts: ISQRT)) RETURN ISQRT = ((ISQRT + (I / ISQRT)) / 2) GOTO 200 END It is possible to prove, mathematically, that the program satisfies the following (informally stated) specification: If the program is executed on a machine implementing ANSI FORTRAN 66 or 77 <ref> [13, 2] </ref>, and the input to the program is a nonnegative integer representable on the host machine, then the program terminates, causes no arithmetic overflow or other run time error, and the output is the largest integer whose square is less than or equal to the input.

Reference: 2. <institution> The Informal Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 </institution>
Reference-contexts: ISQRT)) RETURN ISQRT = ((ISQRT + (I / ISQRT)) / 2) GOTO 200 END It is possible to prove, mathematically, that the program satisfies the following (informally stated) specification: If the program is executed on a machine implementing ANSI FORTRAN 66 or 77 <ref> [13, 2] </ref>, and the input to the program is a nonnegative integer representable on the host machine, then the program terminates, causes no arithmetic overflow or other run time error, and the output is the largest integer whose square is less than or equal to the input.
Reference: 3. <institution> The Control Program . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 </institution>
Reference-contexts: Thus, our model more accurately represents a one-dimensional control problem, such as maintaining constant temperature in an 2 Honeywell Systems and Research Center, 2600 Ridgway Parkway, Minneapolis, Minnesota 55413 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 3 environment where the outside temperature varies, or maintaining constant speed, as in an automobile's "cruise control." We measure the wind speed, w, in terms of the number of units in the y-direction the wind would blow a passive
Reference: 4. <institution> Formalizing the Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 </institution>
Reference-contexts: Thus, our model more accurately represents a one-dimensional control problem, such as maintaining constant temperature in an 2 Honeywell Systems and Research Center, 2600 Ridgway Parkway, Minneapolis, Minnesota 55413 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 3 environment where the outside temperature varies, or maintaining constant speed, as in an automobile's "cruise control." We measure the wind speed, w, in terms of the number of units in the y-direction the wind would blow a passive
Reference: 5. <institution> Proving the Conjectures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 </institution>
Reference-contexts: We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system [6]. The logic and a mechanical theorem-prover for it are completely described in <ref> [5] </ref>. The syntax of the logic is akin to that of Church's lambda-calculus. If f is a function in the logic and e1 and e2 are two expressions in the logic, then we write (f e1 e2) to denote the value of f on the two arguments e1 and e2. <p> Then the y-position of the vehicle in that final STATE is 0. 5. Proving the Conjectures The foregoing conjectures can be proved mathematically. Indeed, they have been proved by the mechanical theorem-prover described in <ref> [5] </ref>. The key to the proof is that the state space of the vehicle can be partitioned into a small finite number of classes.
Reference: 6. <institution> Comments on the Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 </institution>
Reference-contexts: Because the mathematics involved in program verification is often tedious and elementary, mechanical program 1 V. Kahan, of U.C. Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed. One such system is described in <ref> [6] </ref>. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program [7], among others. To admit mechanical proof, the specifications must be written in a completely formal notation. <p> Formalizing the Model To state the conjectures formally we must formalize the model of the control program and its environment. We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system <ref> [6] </ref>. The logic and a mechanical theorem-prover for it are completely described in [5]. The syntax of the logic is akin to that of Church's lambda-calculus.
Reference: 7. <institution> Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 i </institution>
Reference-contexts: Berkeley, reports that the algorithm was in fact advocated by Heron of Alexandria before 400 A.D. 2 verification systems have been developed. One such system is described in [6]. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program <ref> [7] </ref>, among others. To admit mechanical proof, the specifications must be written in a completely formal notation.
References-found: 19

