URL: http://www.isi.edu/~valente/papers/valente-94e.ps.gz
Refering-URL: http://www.isi.edu/~valente/papers/valente-94e.html
Root-URL: http://www.isi.edu
Email: E-mail: andre@swi.psy.uva.nl  
Title: Knowledge-Level Analysis of Planning Systems  
Author: Andre Valente 
Address: Roeterstraat 15, 1018 WB Amsterdam, the Netherlands  
Affiliation: University of Amsterdam, Dept. of Social Science Informatics (SWI)  
Abstract: This article explores the idea that a perspective based on Newell's knowledge level can be useful for this task. We present a knowledge-level analysis of classical planning systems in terms of models of the problem-solving methods they used. Rather than reengineering these systems in detail, however, our goal is to show how this type of analysis can help define which roles knowledge may play in planning tasks, and how these roles can be used to compare planning methods in terms of (i) which types of knowledge are used, (ii) how they are structured in what we call domain models. As a tool to analyze and represent planning methods we use the KADS methodology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Aben. </author> <title> Formally Specifying Re-usable Knowledge Model Components. </title> <journal> Knowledge Acquisition Journal, </journal> <volume> 5(2) </volume> <pages> 119-141, </pages> <month> June </month> <year> 1993. </year> <title> Special Issue: </title> <booktitle> Current issues in Knowledge Modeling. </booktitle>
Reference-contexts: The terminology used is defined in section 3. Note that links between roles indicate a part-subpart relation. Note also that functions may have subscripts that refer to their meaning in terms of a for mal typology of canonical inferences (see <ref> [1] </ref>). Planning Agents SIGART Bulletin, Vol. 6, No. 1 Control Structures are basically a group of control state-ments that express what is the control regime of a certain function structure: in which order the functions will be executed, etc.
Reference: [2] <author> V. R. </author> <title> Benjamins. Problem Solving Methods for Diagnosis. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: As a tool to represent models of planning methods we use the modeling framework of the KADS methodology [25,4]. KADS has been used for precisely these purposes for a variety of tasks and Planning Agents SIGART Bulletin, Vol. 6, No. 1 problems, for example diagnosis <ref> [2] </ref>, qualitative reasoning [3] and assessment [37]. This article is structured as follows. In section 2 we present the KADS modeling framework. In section 3 we provide a definition of a planning task, and identify which roles knowledge may play in planning.
Reference: [3] <author> B. Bredeweg and B. J. Wielinga. </author> <title> Integrating qualitative reasoning approaches. </title> <booktitle> In Proceedings of ECAI-88, </booktitle> <pages> pages 195-201, </pages> <address> Munich, Germany, </address> <year> 1988. </year>
Reference-contexts: As a tool to represent models of planning methods we use the modeling framework of the KADS methodology [25,4]. KADS has been used for precisely these purposes for a variety of tasks and Planning Agents SIGART Bulletin, Vol. 6, No. 1 problems, for example diagnosis [2], qualitative reasoning <ref> [3] </ref> and assessment [37]. This article is structured as follows. In section 2 we present the KADS modeling framework. In section 3 we provide a definition of a planning task, and identify which roles knowledge may play in planning.
Reference: [4] <author> Joost Breuker and Walter van de Velde, </author> <title> editors. Reusable Problem Solving Components: the CommonKADS Library for Expertise Modelling. </title> <publisher> IOS Press, </publisher> <address> Amsterdam, </address> <month> September </month> <year> 1994. </year> <note> In press. </note>
Reference-contexts: In this paper we will use the methodology as defined in its most recent version, called CommonKADS, which is the product of the ESPRIT P5248 project. The research reported here is in fact part of that effort; more specifically, it is part of the CommonKADS Library <ref> [4] </ref>. The main purpose of this library is to support knowledge engineers in the construction of knowledge-level models by storing reusable problem-solving methods for the major types of tasks (planning, design, diagnosis, etc.). <p> Accordingly, the knowledge modeling framework and language we will present below is the one used in the library. We will present it only in its main lines in order to explain the terminology and representation used in the rest of the paper; the interested reader can find details in <ref> [4] </ref>. In the CommonKADS Library, problem-solving methods are described in terms of a set of modeling components, namely functions, function structures, control structures, domain models and domain ontologies.
Reference: [5] <author> B. Chandrasekaran. </author> <title> Towards a functional architecture for intelligence based on generic information processing tasks. </title> <journal> Planning Agents SIGART Bulletin, </journal> <volume> Vol. 6, No. </volume> <booktitle> 1 In Proceedings of the 10th IJCAI, </booktitle> <pages> pages 1183-1192, </pages> <address> Milano, </address> <year> 1987. </year>
Reference-contexts: From this proposal stem a group of approaches that proposed using knowledge-level models of the reasoning process in the analysis and engineering of AI systems, defining the area we presently call knowledge modeling. Approaches to knowledge-level analysis and modeling include Generic Tasks <ref> [5] </ref>, Role-limiting Methods [18], Components of Expertise [27] and KADS [25]. Their common trace is to identify of a set of high-level knowledge primitives from which problem solving knowledge is built.
Reference: [6] <author> L. Console and P. Torasso. </author> <title> A spectrum of definitions of model based diagnosis. </title> <journal> Computational Intelligence, </journal> <volume> 7(3):133 - 141, </volume> <year> 1991. </year>
Reference-contexts: Second, the analysis we performed was limited to a class of planning problems (albeit a kernel one), namely that of planners. Third, the framework we have used is an informal one. It is possible to elaborate a more formal version of it, similar to the formalization proposed in <ref> [6] </ref> for model-based diagnosis. Acknowledgements Andre Valente was supported by scholarship number 203182/90.1 of Conselho Nacional de Desenvolvimento Cientfico e Tecnologico, Brazil. The research reported here was developed within the KADS-II Esprit P5248 project, and is partially funded by the European Commission.
Reference: [7] <author> K. Currie and A. Tate. O-plan: </author> <title> the open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52(1) </volume> <pages> 49-86, </pages> <year> 1991. </year>
Reference-contexts: MOLGEN introduced the use of several strategies de fined in terms of four basic planning operators and their con trol in the planning process. Planning control knowledge is frequently used in planning architectures and systems which use replanning. For instance, the O-Plan <ref> [7] </ref> architecture used knowledge sources (similar but improved with relation to MOLGEN's planning operators) as the primitive building blocks of the planning process. These are controlled dynam ically by an agenda. <p> This is, however, rather a feature than a bug. Planning Agents SIGART Bulletin, Vol. 6, No. 1 System/ Technique Role Domain Model Description MOLGEN [28] planning control knowledge strategies Control strategies described in terms of planning operators planning control knowledge planning operators Basic steps in plan synthesis O-Plan <ref> [7] </ref> planning control knowledge knowledge sources Improved set of planning control primi tives planning control knowledge agenda Agenda of pending issues in the planning process Table 3: Domain models to perform planning control knowledge. <p> Some reflective planners, however, do not fit in the definition we have proposed for planning problem, because they involve replanning. Examples of this category are Stefik's MOLGEN, [40]'s planning model and O-Plan <ref> [7] </ref>. * hierarchical planners are the ones in which the state changes (actions, operators) are represented in an abstraction hierarchy in which the leaves are executable plan steps.
Reference: [8] <author> T. Dean, R. J. Firby, and D. Miller. </author> <title> Hierarchical planning involving deadlines, travel time, and resources. </title> <editor> In J. Allen, J. Hendler, and A. Tate, editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 369-386. </pages> <publisher> Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: Classical examples are NOAH, NONLIN, SIPE, TWEAK. * planners that deal with resources are the ones that fill the state change data role. Examples of systems from this family: NONLIN+, DEVISER [38], ISIS [13], O-Plan, FORBIN <ref> [8] </ref>. * reflective planners use knowledge about the planing process itself (i.e. reflective knowledge). These planners can be basically characterized by their use of planning control knowledge, but they normally use heavily plan assessment knowledge, since the reflection is usually based on an assessment of the plan being constructed.
Reference: [9] <author> B. Drabble. Excalibur: </author> <title> a program for planning and reasoning with processes. </title> <journal> Artificial Intelligence, </journal> <volume> 62 </volume> <pages> 1-40, </pages> <year> 1993. </year>
Reference-contexts: plans expressed as QLISP pro cedures MOLGEN [28] state changes MARS operators Operators organized in a class hierarchy NONLIN [31] state changes skeletal plans Library of pre-defined skeletal plans Ginsberg's formalism state description possible worlds States as possible world descriptions [15] state changes possible worlds Changes in possible worlds EXCALIBUR <ref> [9] </ref> state description process theory Sets of processes related by causal influ ences Table 1: Domain models to perform sub-roles of world de scription. 4.2 Domain Models for plan descriptions Domain models for representing plans come in several va rieties, and several degrees of expressiveness.
Reference: [10] <author> K. Erol, J. Hendler, and D. Nau. </author> <title> HTN planning: Complexity and expressivity. </title> <booktitle> In Proc. of AAAI-94, </booktitle> <pages> pages 1123-1128, </pages> <address> Seattle, </address> <year> 1994. </year>
Reference-contexts: In the first case, this type of research has shed light on what exactly are the assumptions hidden in the representation of actions and time used in planning. In the second case, it has been used to analyze and compare the performances of classes of planning systems (see e.g. <ref> [10] </ref>, [17]). However, the results achieved so far with this approach are quite limited. Because this approach demands very detailed description in order to be able to formalize and compare algorithms, it has been difficult to push it beyond the comparison of a few specific systems or classes of algorithms.
Reference: [11] <author> R. E. Fikes, P. E. Hart, and N. J. Nilsson. </author> <title> Learning and executing generalized robot plans. </title> <journal> Artificial Intelligence, </journal> <volume> 3 </volume> <pages> 251-288, </pages> <year> 1972. </year>
Reference-contexts: According to [14] most systems have used representations for actions and events that are based in one way or another on either the STRIPS representation of operators <ref> [11] </ref> or the representation of state changes based on Mc-Carthy's Situation Calculus [19] (the first being itself strongly related to the second).
Reference: [12] <author> R.E. Fikes and N.J. Nilsson. </author> <title> Strips: a new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2, </volume> <year> 1971. </year>
Reference-contexts: Each function in a function structure can be expanded again, creating a layered function structure. Function structures provide a knowledge-flow view of reasoning, but they are not an algorithm flowchart. There is no commitment to control, e.g. which function should be executed first. graph, representing the knowledge-flow in STRIPS <ref> [12] </ref>. This is how STRIPS expands (decomposes) the function that represents the general planning task in figure 1. The terminology used is defined in section 3. Note that links between roles indicate a part-subpart relation. <p> We included most of the classical ones (where they first appeared) and a few more recent ones that inno vate more noticeably. System/ Technique Role Domain Model Description Situation Calculus [19] state description situations Described by holds predicates state changes result predicates Described by Result predicates STRIPS <ref> [12] </ref> state description FOL atomic wffs Set of atomic first or der wffs state changes STRIPS operators Add- and delete-lists plus preconditions ABSTRIPS [23] state changes ABSTRIPS operators Variant of STRIPS operators with preconditions ordered by level of criticality NOAH [24] state changes SOUP procedures Partial plans expressed as QLISP pro <p> Later came planners that took care of state change data such as resources and time constraints. In table 2 we present a table of some domain models of a number of classical planning systems that play sub-roles of plan description. System/ Technique Role Domain Model Description STRIPS <ref> [12] </ref> plan composition list of operators Completely instantiated, totally or dered, linear HACKER [29] plan assessment knowledge critics Patterns of `bugs' in the plan INTERPLAN [30] plan assessment knowledge protections Goal protections to assess problems in the plan WARPLAN [39] plan assessment knowledge domain validity constraints Determine which state changes are
Reference: [13] <author> M. Fox and S. F. Smith. </author> <title> Isis a knowledge-based system for factory scheduling. </title> <editor> In J. Allen, J. Hendler, and A. Tate, editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 336-360. </pages> <publisher> Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: Express dependencies between sub-plans MOLGEN [28] plan assessment knowledge constraints Express interdependencies between sub-plans DEVISER [38] state change data time constraints Time handled as a limited resource NONLIN+ [35] state change data consumable resources Consumable resources represented explicitly SIPE [41] state change data unit resources Single unit resource handling ISIS <ref> [13] </ref> state change data resources Resource treatment in a scheduling prob lem O-Plan2 [32] state change data authority Authority requirements modeled explicitly Table 2: Domain models to perform sub-roles of plan descrip tion. 4.3 Domain Models for planning control knowledge Meta-knowledge in planning (i.e. knowledge that will play the role of <p> Classical examples are NOAH, NONLIN, SIPE, TWEAK. * planners that deal with resources are the ones that fill the state change data role. Examples of systems from this family: NONLIN+, DEVISER [38], ISIS <ref> [13] </ref>, O-Plan, FORBIN [8]. * reflective planners use knowledge about the planing process itself (i.e. reflective knowledge).
Reference: [14] <author> M. P. Georgeff. </author> <title> Planning. </title> <booktitle> Annual Review of Computer Science, </booktitle> <volume> 2 </volume> <pages> 359-400, </pages> <year> 1987. </year>
Reference-contexts: According to <ref> [14] </ref> most systems have used representations for actions and events that are based in one way or another on either the STRIPS representation of operators [11] or the representation of state changes based on Mc-Carthy's Situation Calculus [19] (the first being itself strongly related to the second).
Reference: [15] <author> M. L. Ginsberg. </author> <title> Possible worlds planning. </title> <editor> In J. Allen et. al., editor, </editor> <booktitle> Reasoning About Plans, </booktitle> <pages> pages 213-243. </pages> <publisher> Morgan Kauffman, </publisher> <year> 1991. </year>
Reference-contexts: of state changes (actions and events) is always based on the representation of the world itself. 2 For instance, the STRIPS representation assumes that the state of the world is represented by a set of first order predicates; the situation calculus assumes it is represented by a set of fluents; <ref> [15] </ref> uses possible worlds; Excalibur uses qualitative process theory. These are the representations (in fact, the ontologies) on top of which the domain models for state changes are built. For these, however, the variety is much more significant. Not only we may have actions and events of several types (e.g. <p> level of criticality NOAH [24] state changes SOUP procedures Partial plans expressed as QLISP pro cedures MOLGEN [28] state changes MARS operators Operators organized in a class hierarchy NONLIN [31] state changes skeletal plans Library of pre-defined skeletal plans Ginsberg's formalism state description possible worlds States as possible world descriptions <ref> [15] </ref> state changes possible worlds Changes in possible worlds EXCALIBUR [9] state description process theory Sets of processes related by causal influ ences Table 1: Domain models to perform sub-roles of world de scription. 4.2 Domain Models for plan descriptions Domain models for representing plans come in several va rieties, and
Reference: [16] <author> P.J. Hayes. </author> <title> A representation for robot plans. </title> <booktitle> In Proceedings of IJCAI'75, </booktitle> <pages> pages 181-188, </pages> <year> 1975. </year>
Reference-contexts: list of operators Completely instantiated, totally or dered, linear HACKER [29] plan assessment knowledge critics Patterns of `bugs' in the plan INTERPLAN [30] plan assessment knowledge protections Goal protections to assess problems in the plan WARPLAN [39] plan assessment knowledge domain validity constraints Determine which state changes are valid Hayes' <ref> [16] </ref> formalism plan composition sub-plan hierarchy Hierarchy of sub-plans (leaves are ac tions) plan assessment knowledge intended goals Intended goals of the sub-plans NOAH [24] plan composition procedural networks Partially ordered, hierarchical plans NONLIN [31] state change data typed conditions Express dependencies between sub-plans MOLGEN [28] plan assessment knowledge constraints Express
Reference: [17] <author> S. Kambhampati. </author> <title> Comparing partial order and task reduction planning. </title> <journal> Sigart Bulletin, </journal> <volume> 6(1), </volume> <year> 1994. </year>
Reference-contexts: In the second case, it has been used to analyze and compare the performances of classes of planning systems (see e.g. [10], <ref> [17] </ref>). However, the results achieved so far with this approach are quite limited. Because this approach demands very detailed description in order to be able to formalize and compare algorithms, it has been difficult to push it beyond the comparison of a few specific systems or classes of algorithms. <p> In fact, the term hierarchical Planning Agents SIGART Bulletin, Vol. 6, No. 1 task-network planning refers today to a variant of non-linear planners in which this type of representation is used (see e.g. <ref> [17] </ref>). Other classifications in the literature are less precise.
Reference: [18] <author> S. Marcus, </author> <title> editor. Automatic knowledge acquisition for expert systems. </title> <publisher> Kluwer, </publisher> <year> 1988. </year>
Reference-contexts: From this proposal stem a group of approaches that proposed using knowledge-level models of the reasoning process in the analysis and engineering of AI systems, defining the area we presently call knowledge modeling. Approaches to knowledge-level analysis and modeling include Generic Tasks [5], Role-limiting Methods <ref> [18] </ref>, Components of Expertise [27] and KADS [25]. Their common trace is to identify of a set of high-level knowledge primitives from which problem solving knowledge is built.
Reference: [19] <author> J. McCarthy and P. J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <booktitle> In Machine Intelligence 4, </booktitle> <year> 1969. </year>
Reference-contexts: According to [14] most systems have used representations for actions and events that are based in one way or another on either the STRIPS representation of operators [11] or the representation of state changes based on Mc-Carthy's Situation Calculus <ref> [19] </ref> (the first being itself strongly related to the second). <p> Table 1 summarizes a number of the major generic domain models for world descriptions (including short informal de scriptions). We included most of the classical ones (where they first appeared) and a few more recent ones that inno vate more noticeably. System/ Technique Role Domain Model Description Situation Calculus <ref> [19] </ref> state description situations Described by holds predicates state changes result predicates Described by Result predicates STRIPS [12] state description FOL atomic wffs Set of atomic first or der wffs state changes STRIPS operators Add- and delete-lists plus preconditions ABSTRIPS [23] state changes ABSTRIPS operators Variant of STRIPS operators with preconditions
Reference: [20] <author> M.A. Musen. </author> <title> Automated Generation of Model-Based Knowledge Acquisition Tools. </title> <publisher> Pitman Publishing, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: This has been recognized elsewhere; for instance, difficulties in acquiring knowledge for reusing the planner of the ONCOCIN system [26] have led to the development of a series of specialized knowledge acquisi tion tools such as OPAL and PROT EG E <ref> [20] </ref>. We should stress an aspect of the framework we have proposed: there is a gap between planning methods (what we are describing) and planning systems. A more powerful method has potential to be more efficient in action, but part of that depends on how well it will be implemented.
Reference: [21] <author> A. Newell. </author> <title> The knowledge level. </title> <journal> Artificial Intelligence, </journal> 1982 87-127, 1982. 
Reference-contexts: The framework proposed in this article is intended to be an initial step in this direction. Newell introduced the concept of the knowledge level (as opposed to the symbol level) as a way to represent problem solving behavior independent of how this behavior is realized in a machine <ref> [21] </ref>. One of his motivations was to provide a means to drive out the (excessive) attention to implementation details.
Reference: [22] <editor> E. Rich. </editor> <booktitle> Artificial Intelligence. </booktitle> <publisher> McGraw-Hill, </publisher> <address> Singapore, Lon-don, </address> <year> 1983. </year>
Reference-contexts: Despite the practical importance and historical significance of search methods, however, it has been observed that they are weak methods <ref> [22] </ref>: while they are highly general since they are independent of both the problem and the application domain they are applied to, this very characteristic precludes them making use of the domain and task-specific knowledge that could help them handle the problem more efficiently.
Reference: [23] <author> E. D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> AI, </journal> <volume> 5 </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference-contexts: System/ Technique Role Domain Model Description Situation Calculus [19] state description situations Described by holds predicates state changes result predicates Described by Result predicates STRIPS [12] state description FOL atomic wffs Set of atomic first or der wffs state changes STRIPS operators Add- and delete-lists plus preconditions ABSTRIPS <ref> [23] </ref> state changes ABSTRIPS operators Variant of STRIPS operators with preconditions ordered by level of criticality NOAH [24] state changes SOUP procedures Partial plans expressed as QLISP pro cedures MOLGEN [28] state changes MARS operators Operators organized in a class hierarchy NONLIN [31] state changes skeletal plans Library of pre-defined skeletal
Reference: [24] <author> E. D. Sacerdoti. </author> <title> Planning in a hierarchie of abstraction spaces. </title> <booktitle> In Proceedings IJCAI-75, </booktitle> <year> 1975. </year>
Reference-contexts: predicates state changes result predicates Described by Result predicates STRIPS [12] state description FOL atomic wffs Set of atomic first or der wffs state changes STRIPS operators Add- and delete-lists plus preconditions ABSTRIPS [23] state changes ABSTRIPS operators Variant of STRIPS operators with preconditions ordered by level of criticality NOAH <ref> [24] </ref> state changes SOUP procedures Partial plans expressed as QLISP pro cedures MOLGEN [28] state changes MARS operators Operators organized in a class hierarchy NONLIN [31] state changes skeletal plans Library of pre-defined skeletal plans Ginsberg's formalism state description possible worlds States as possible world descriptions [15] state changes possible worlds <p> assessment knowledge protections Goal protections to assess problems in the plan WARPLAN [39] plan assessment knowledge domain validity constraints Determine which state changes are valid Hayes' [16] formalism plan composition sub-plan hierarchy Hierarchy of sub-plans (leaves are ac tions) plan assessment knowledge intended goals Intended goals of the sub-plans NOAH <ref> [24] </ref> plan composition procedural networks Partially ordered, hierarchical plans NONLIN [31] state change data typed conditions Express dependencies between sub-plans MOLGEN [28] plan assessment knowledge constraints Express interdependencies between sub-plans DEVISER [38] state change data time constraints Time handled as a limited resource NONLIN+ [35] state change data consumable resources Consumable
Reference: [25] <author> A. Th. Schreiber. </author> <title> The KADS approach to knowledge engineering. </title> <journal> editorial special issue. Knowledge Acquisition, </journal> <volume> 4(1) </volume> <pages> 1-4, </pages> <year> 1992. </year>
Reference-contexts: Approaches to knowledge-level analysis and modeling include Generic Tasks [5], Role-limiting Methods [18], Components of Expertise [27] and KADS <ref> [25] </ref>. Their common trace is to identify of a set of high-level knowledge primitives from which problem solving knowledge is built. Based on this view about what problem solving is (made of), they propose methods, languages and tools to represent, analyze and acquire problem solving knowledge.
Reference: [26] <author> E. H. Shortliffe, A. C. Scott, M. B. Bischoff, A. B. Cambell, W. van Melle, and C. D. Jacobs. ONCOCIN: </author> <title> An expert system for oncology protocol management. </title> <booktitle> In IJCAI-81, </booktitle> <pages> pages 876-881, </pages> <year> 1981. </year>
Reference-contexts: This has been recognized elsewhere; for instance, difficulties in acquiring knowledge for reusing the planner of the ONCOCIN system <ref> [26] </ref> have led to the development of a series of specialized knowledge acquisi tion tools such as OPAL and PROT EG E [20]. We should stress an aspect of the framework we have proposed: there is a gap between planning methods (what we are describing) and planning systems. <p> Examples of members of this family: NONLIN, Friedland's MOLGEN, ONCOCIN <ref> [26] </ref>. * linear planners are the ones that use a domain model for plan composition that assumes a linear plan (i.e. completely ordered).
Reference: [27] <author> L. Steels. </author> <title> Components of expertise. </title> <journal> AI Magazine, </journal> <month> summer </month> <year> 1990. </year>
Reference-contexts: From this proposal stem a group of approaches that proposed using knowledge-level models of the reasoning process in the analysis and engineering of AI systems, defining the area we presently call knowledge modeling. Approaches to knowledge-level analysis and modeling include Generic Tasks [5], Role-limiting Methods [18], Components of Expertise <ref> [27] </ref> and KADS [25]. Their common trace is to identify of a set of high-level knowledge primitives from which problem solving knowledge is built. Based on this view about what problem solving is (made of), they propose methods, languages and tools to represent, analyze and acquire problem solving knowledge.
Reference: [28] <author> M. Stefik. </author> <title> Planning with constraints (molgen: part 1). </title> <journal> Artificial Intelligence, </journal> <volume> 16, </volume> <year> 1981. </year>
Reference-contexts: FOL atomic wffs Set of atomic first or der wffs state changes STRIPS operators Add- and delete-lists plus preconditions ABSTRIPS [23] state changes ABSTRIPS operators Variant of STRIPS operators with preconditions ordered by level of criticality NOAH [24] state changes SOUP procedures Partial plans expressed as QLISP pro cedures MOLGEN <ref> [28] </ref> state changes MARS operators Operators organized in a class hierarchy NONLIN [31] state changes skeletal plans Library of pre-defined skeletal plans Ginsberg's formalism state description possible worlds States as possible world descriptions [15] state changes possible worlds Changes in possible worlds EXCALIBUR [9] state description process theory Sets of processes <p> state changes are valid Hayes' [16] formalism plan composition sub-plan hierarchy Hierarchy of sub-plans (leaves are ac tions) plan assessment knowledge intended goals Intended goals of the sub-plans NOAH [24] plan composition procedural networks Partially ordered, hierarchical plans NONLIN [31] state change data typed conditions Express dependencies between sub-plans MOLGEN <ref> [28] </ref> plan assessment knowledge constraints Express interdependencies between sub-plans DEVISER [38] state change data time constraints Time handled as a limited resource NONLIN+ [35] state change data consumable resources Consumable resources represented explicitly SIPE [41] state change data unit resources Single unit resource handling ISIS [13] state change data resources Resource <p> The missing step is a clear definition of what is a `good' planner. This is, however, rather a feature than a bug. Planning Agents SIGART Bulletin, Vol. 6, No. 1 System/ Technique Role Domain Model Description MOLGEN <ref> [28] </ref> planning control knowledge strategies Control strategies described in terms of planning operators planning control knowledge planning operators Basic steps in plan synthesis O-Plan [7] planning control knowledge knowledge sources Improved set of planning control primi tives planning control knowledge agenda Agenda of pending issues in the planning process Table 3:
Reference: [29] <author> G. J. Sussman. </author> <title> A Computer Model of Skill Acquisition, </title> <booktitle> volume 1 of Artificial Intelligence Series. </booktitle> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: In table 2 we present a table of some domain models of a number of classical planning systems that play sub-roles of plan description. System/ Technique Role Domain Model Description STRIPS [12] plan composition list of operators Completely instantiated, totally or dered, linear HACKER <ref> [29] </ref> plan assessment knowledge critics Patterns of `bugs' in the plan INTERPLAN [30] plan assessment knowledge protections Goal protections to assess problems in the plan WARPLAN [39] plan assessment knowledge domain validity constraints Determine which state changes are valid Hayes' [16] formalism plan composition sub-plan hierarchy Hierarchy of sub-plans (leaves are <p> For instance, the main advance introduced by HACKER <ref> [29] </ref> can be seen as the use of plan assessment knowledge in the form of critics. The flexibility of the domain models.
Reference: [30] <author> A. Tate. INTERPLAN: </author> <title> A plan generation system which can deal with interactions between goals. </title> <type> Technical Report MIP-R-109, </type> <institution> University of Edinburgh, Edinburgh, </institution> <year> 1974. </year>
Reference-contexts: Advances in early planners happened more on the plan com position. There followed proposals for adding plan assessment knowledge, starting with HACKER and INTERPLAN <ref> [30] </ref>. Later came planners that took care of state change data such as resources and time constraints. In table 2 we present a table of some domain models of a number of classical planning systems that play sub-roles of plan description. <p> System/ Technique Role Domain Model Description STRIPS [12] plan composition list of operators Completely instantiated, totally or dered, linear HACKER [29] plan assessment knowledge critics Patterns of `bugs' in the plan INTERPLAN <ref> [30] </ref> plan assessment knowledge protections Goal protections to assess problems in the plan WARPLAN [39] plan assessment knowledge domain validity constraints Determine which state changes are valid Hayes' [16] formalism plan composition sub-plan hierarchy Hierarchy of sub-plans (leaves are ac tions) plan assessment knowledge intended goals Intended goals of the sub-plans
Reference: [31] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings IJCAI-77, </booktitle> <address> Paris, </address> <year> 1977. </year>
Reference-contexts: These are the representations (in fact, the ontologies) on top of which the domain models for state changes are built. For these, however, the variety is much more significant. Not only we may have actions and events of several types (e.g. STRIPS operators), but also causal relations (e.g. NONLIN <ref> [31] </ref>), partial plans (e.g. NOAH's SOUP procedures) and skeletal plans (e.g. Friedland's MOLGEN and NONLIN). <p> STRIPS operators Add- and delete-lists plus preconditions ABSTRIPS [23] state changes ABSTRIPS operators Variant of STRIPS operators with preconditions ordered by level of criticality NOAH [24] state changes SOUP procedures Partial plans expressed as QLISP pro cedures MOLGEN [28] state changes MARS operators Operators organized in a class hierarchy NONLIN <ref> [31] </ref> state changes skeletal plans Library of pre-defined skeletal plans Ginsberg's formalism state description possible worlds States as possible world descriptions [15] state changes possible worlds Changes in possible worlds EXCALIBUR [9] state description process theory Sets of processes related by causal influ ences Table 1: Domain models to perform sub-roles <p> plan WARPLAN [39] plan assessment knowledge domain validity constraints Determine which state changes are valid Hayes' [16] formalism plan composition sub-plan hierarchy Hierarchy of sub-plans (leaves are ac tions) plan assessment knowledge intended goals Intended goals of the sub-plans NOAH [24] plan composition procedural networks Partially ordered, hierarchical plans NONLIN <ref> [31] </ref> state change data typed conditions Express dependencies between sub-plans MOLGEN [28] plan assessment knowledge constraints Express interdependencies between sub-plans DEVISER [38] state change data time constraints Time handled as a limited resource NONLIN+ [35] state change data consumable resources Consumable resources represented explicitly SIPE [41] state change data unit resources
Reference: [32] <author> A. Tate. </author> <title> Authority management coordination between planning, scheduling and control. </title> <booktitle> In Proc. of the IJCAI-93 Workshop on Knowledge-based Production Planning, Scheduling and Control, </booktitle> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: sub-plans DEVISER [38] state change data time constraints Time handled as a limited resource NONLIN+ [35] state change data consumable resources Consumable resources represented explicitly SIPE [41] state change data unit resources Single unit resource handling ISIS [13] state change data resources Resource treatment in a scheduling prob lem O-Plan2 <ref> [32] </ref> state change data authority Authority requirements modeled explicitly Table 2: Domain models to perform sub-roles of plan descrip tion. 4.3 Domain Models for planning control knowledge Meta-knowledge in planning (i.e. knowledge that will play the role of planning control knowledge) was introduced with Stefik's MOLGEN, and has been used in
Reference: [33] <author> A. Tate. </author> <title> Representing plans as a set of constraints | the &lt;IN-OVA&gt; model. </title> <type> Technical report, </type> <institution> University of Edinburgh, Edinburgh, </institution> <year> 1994. </year>
Reference-contexts: For instance, the O-Plan [7] architecture used knowledge sources (similar but improved with relation to MOLGEN's planning operators) as the primitive building blocks of the planning process. These are controlled dynam ically by an agenda. Recent work by the same group in the &lt;I-N-OVA&gt; model <ref> [33] </ref> also uses a planning agenda, in this case represented as constraints.
Reference: [34] <editor> A. Tate, J. Hendler, and M. </editor> <title> Drummond. A review of ai planning techniques. </title> <editor> In J. Allen, J. Hendler, and A. Tate, editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 26-49. </pages> <publisher> Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: We do not propose this is a new claim; most surveys about planning do give attention to this aspect. The problem is that there is no clear scheme to help this analysis. For instance, <ref> [34] </ref> organizes its exposition of planning domain models by the research problems they solve: using hierarchy or abstraction levels, goal ordering and interaction, planning with conditionals, etc.
Reference: [35] <author> A. Tate and A. Whiter. </author> <title> Planning with multiple resource constraints and an application to a naval planning problem. </title> <booktitle> In Proceedings of the First Conference on Artifical Intelligence Applications, </booktitle> <pages> pages 410-416. </pages> <publisher> AAAI, </publisher> <year> 1984. </year>
Reference-contexts: Intended goals of the sub-plans NOAH [24] plan composition procedural networks Partially ordered, hierarchical plans NONLIN [31] state change data typed conditions Express dependencies between sub-plans MOLGEN [28] plan assessment knowledge constraints Express interdependencies between sub-plans DEVISER [38] state change data time constraints Time handled as a limited resource NONLIN+ <ref> [35] </ref> state change data consumable resources Consumable resources represented explicitly SIPE [41] state change data unit resources Single unit resource handling ISIS [13] state change data resources Resource treatment in a scheduling prob lem O-Plan2 [32] state change data authority Authority requirements modeled explicitly Table 2: Domain models to perform sub-roles
Reference: [36] <author> A. Valente. </author> <title> Planning. </title> <editor> In Joost Breuker and Walter van de Velde, editors, </editor> <title> Reusable Problem Solving Components: the CommonKADS Library for Expertise Modelling, </title> <booktitle> chapter 10, </booktitle> <pages> pages 213-230. </pages> <publisher> IOS Press, </publisher> <address> Amsterdam, </address> <month> September </month> <year> 1994. </year> <note> In press. </note>
Reference-contexts: The framework for analysis and classification of planning methods we will present in this paper is the basis for structuring the part of the library that contains problem-solving methods for planning tasks <ref> [36] </ref>. Accordingly, the knowledge modeling framework and language we will present below is the one used in the library. <p> In fact, we have already started such an effort by defining typical function structures for some main types of planning methods; this work is presented elsewhere <ref> [36] </ref>. We believe that exploring the connection between the domain models and roles used in planning and the methods use to reason about them is an important problem to be solved if we want to understand and compare planning methods and systems. The work we have shown has several limitations.
Reference: [37] <author> A. Valente and C. Lockenhoff. </author> <title> Organization as guidance: A library of assessment models. </title> <booktitle> In Proceedings of the Seventh Eu-ropean Knowledge Acquisition Workshop (EKAW'93), </booktitle> <pages> pages 243-262, </pages> <year> 1993. </year>
Reference-contexts: KADS has been used for precisely these purposes for a variety of tasks and Planning Agents SIGART Bulletin, Vol. 6, No. 1 problems, for example diagnosis [2], qualitative reasoning [3] and assessment <ref> [37] </ref>. This article is structured as follows. In section 2 we present the KADS modeling framework. In section 3 we provide a definition of a planning task, and identify which roles knowledge may play in planning.
Reference: [38] <author> S. A. Vere. </author> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Transactions on Pattern Analysis & Machine Intelligence, </journal> <volume> 5, </volume> <year> 1983. </year>
Reference-contexts: hierarchy Hierarchy of sub-plans (leaves are ac tions) plan assessment knowledge intended goals Intended goals of the sub-plans NOAH [24] plan composition procedural networks Partially ordered, hierarchical plans NONLIN [31] state change data typed conditions Express dependencies between sub-plans MOLGEN [28] plan assessment knowledge constraints Express interdependencies between sub-plans DEVISER <ref> [38] </ref> state change data time constraints Time handled as a limited resource NONLIN+ [35] state change data consumable resources Consumable resources represented explicitly SIPE [41] state change data unit resources Single unit resource handling ISIS [13] state change data resources Resource treatment in a scheduling prob lem O-Plan2 [32] state change <p> Classical examples are NOAH, NONLIN, SIPE, TWEAK. * planners that deal with resources are the ones that fill the state change data role. Examples of systems from this family: NONLIN+, DEVISER <ref> [38] </ref>, ISIS [13], O-Plan, FORBIN [8]. * reflective planners use knowledge about the planing process itself (i.e. reflective knowledge).
Reference: [39] <author> D.H.D. Warren. WARPLAN: </author> <title> a system for generating plans. </title> <note> Department of Computational Logic Memo 76, </note> <institution> Edinburgh University, Edinburgh, UK, </institution> <year> 1974. </year>
Reference-contexts: System/ Technique Role Domain Model Description STRIPS [12] plan composition list of operators Completely instantiated, totally or dered, linear HACKER [29] plan assessment knowledge critics Patterns of `bugs' in the plan INTERPLAN [30] plan assessment knowledge protections Goal protections to assess problems in the plan WARPLAN <ref> [39] </ref> plan assessment knowledge domain validity constraints Determine which state changes are valid Hayes' [16] formalism plan composition sub-plan hierarchy Hierarchy of sub-plans (leaves are ac tions) plan assessment knowledge intended goals Intended goals of the sub-plans NOAH [24] plan composition procedural networks Partially ordered, hierarchical plans NONLIN [31] state change
Reference: [40] <author> R. Wilenski. </author> <title> A model for planning in complex situations. </title> <journal> Cognition and Brain Theory, </journal> <volume> 4(4), </volume> <year> 1991. </year>
Reference: [41] <author> D. E. Wilkins. </author> <title> Domain independent planning: Representation and plan generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22, </volume> <year> 1984. </year> <journal> Planning Agents SIGART Bulletin, </journal> <volume> Vol. 6, No. </volume> <pages> 1 </pages>
Reference-contexts: Partially ordered, hierarchical plans NONLIN [31] state change data typed conditions Express dependencies between sub-plans MOLGEN [28] plan assessment knowledge constraints Express interdependencies between sub-plans DEVISER [38] state change data time constraints Time handled as a limited resource NONLIN+ [35] state change data consumable resources Consumable resources represented explicitly SIPE <ref> [41] </ref> state change data unit resources Single unit resource handling ISIS [13] state change data resources Resource treatment in a scheduling prob lem O-Plan2 [32] state change data authority Authority requirements modeled explicitly Table 2: Domain models to perform sub-roles of plan descrip tion. 4.3 Domain Models for planning control knowledge
References-found: 41

