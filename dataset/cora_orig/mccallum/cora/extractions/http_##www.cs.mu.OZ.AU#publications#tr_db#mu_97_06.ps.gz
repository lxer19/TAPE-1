URL: http://www.cs.mu.OZ.AU/publications/tr_db/mu_97_06.ps.gz
Refering-URL: http://www.cs.washington.edu/research/constraints/solvers/cp97.html
Root-URL: 
Email: (fwarwick,pjs,borningg@cs.mu.oz.au)  borning@cs.washington.edu  
Title: Compiling Constraint Solving Using Projection  
Author: Warwick Harvey Peter J. Stuckey Alan Borning 
Note: Permanent address:  
Address: Parkville, VIC 3052, AUSTRALIA  Box 352350, Seattle, Washington 98195, USA;  
Affiliation: Department of Computer Science University of Melbourne  Department of Computer Science Engineering, University of Washington,  
Pubnum: Technical Report 97/6  
Abstract: Linear equality and inequality constraints arise naturally in specifying many aspects of user interfaces, such as requiring that one window be to the left of another, requiring that a pane occupy the leftmost 1/3 of a window, or preferring that an object be contained within a rectangle if possible. For interactive use, we need to solve similar constraint satisfaction problems repeatedly for each screen refresh, with each successive problem differing from the previous one only in the position of an input device and the previous state of the system. We present an algorithm for solving such systems of constraints using projection. The solution is compiled into very efficient, constraint-free code, which is parameterized by the new inputs. Producing straight-line, constraint-free code of this sort is important in a number of applications: for example, to provide predictable performance in real-time systems, to allow companies to ship products without including a runtime constraint solver, to compile Java applets that can be downloaded and run remotely (again without having to include a runtime solver), or for applications where runtime efficiency is particularly important. Even for less time-critical user interface applications, the smooth performance of the resulting code is more pleasing than that of code produced using other current techniques. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Borning. </author> <title> The programming language aspects of ThingLab, a constraint-oriented simulation laboratory. </title> <journal> ACM TOPLAS, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <year> 1981. </year>
Reference-contexts: times is to compile a constraint satisfaction plan: a block of code that can be executed repeatedly to re-solve the constraints with different input parameters. (We can view this as a kind of partial evaluation of the constraint solving algorithm.) This has long been done for local propagation solvers (e.g. <ref> [1] </ref>), and more recently for simultaneous linear equations [3] and for acyclic sets of inequality constraints [2]. However, there have not been any systems that can compile plans for systems of constraints including both simultaneous equalities and inequalities. That lack is addressed by the research reported here.
Reference: 2. <author> A. Borning, R. Anderson, and B. Freeman-Benson. Indigo: </author> <title> A local propagation algorithm for inequality constraints. </title> <booktitle> In Procs. ACM Symp. on User Interface Software and Technology, </booktitle> <pages> 129-136, </pages> <address> Seattle, </address> <year> 1996. </year> <month> 17 </month>
Reference-contexts: repeatedly to re-solve the constraints with different input parameters. (We can view this as a kind of partial evaluation of the constraint solving algorithm.) This has long been done for local propagation solvers (e.g. [1]), and more recently for simultaneous linear equations [3] and for acyclic sets of inequality constraints <ref> [2] </ref>. However, there have not been any systems that can compile plans for systems of constraints including both simultaneous equalities and inequalities. That lack is addressed by the research reported here. In brief, our algorithm works as follows. <p> Indigo <ref> [2] </ref> handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet [3]. UI systems that handle simultaneous linear inequalities as well with reasonable efficiency are QOCA [7] and Cassowary [6].
Reference: 3. <author> A. Borning and B. Freeman-Benson. </author> <title> The OTI constraint solver: A constraint library for constructing interactive graphical user interfaces. </title> <booktitle> In Procs. of CP95, </booktitle> <pages> 624-628, </pages> <address> Cassis, France, </address> <year> 1995. </year>
Reference-contexts: a block of code that can be executed repeatedly to re-solve the constraints with different input parameters. (We can view this as a kind of partial evaluation of the constraint solving algorithm.) This has long been done for local propagation solvers (e.g. [1]), and more recently for simultaneous linear equations <ref> [3] </ref> and for acyclic sets of inequality constraints [2]. However, there have not been any systems that can compile plans for systems of constraints including both simultaneous equalities and inequalities. That lack is addressed by the research reported here. In brief, our algorithm works as follows. <p> Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet <ref> [3] </ref>. UI systems that handle simultaneous linear inequalities as well with reasonable efficiency are QOCA [7] and Cassowary [6]. Both of these algorithms are based on the simplex algorithm. <p> Finally, some of our previous work has involved hybrid constraint solving algorithms, which partition a set of constraints into regions that can then be turned over to an appropriate sub-solver for that class of constraint and constraint topology <ref> [3] </ref>. Compilation based on Fourier elimination is a promising candidate for use in this architecture, to handle collections of simultaneous linear equality and inequality constraints. Acknowledgments This project has been funded in part by the National Science Foundation under Grants IRI-9302249 and CCR-9402551 and by Object Technology International.
Reference: 4. <author> A. Borning, B. Freeman-Benson, and M. Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <year> 1992. </year>
Reference-contexts: We use constraint hierarchies <ref> [4] </ref> for specifying the desired solutions to a collection of required and preferential constraints independent of the particular algorithm involved. A labeled primitive constraint is a primitive constraint labeled with a strength, written sc, where s is a strength and c is a primitive constraint. Strengths are non-negative integers.
Reference: 5. <author> A. Borning, R. Lin, and K. Marriott. </author> <title> Constraints for the web. </title> <booktitle> In Proceedings of ACM MULTIMEDIA'97, </booktitle> <month> November </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: We have done some preliminary work on such an application <ref> [5] </ref>, and have used the constraint compiler to produce Java code for applets for an interactive demonstration of a geometric theorem and for an abacus simulation, which were then included in web documents.
Reference: 6. <author> A. Borning, K. Marriott, P. Stuckey, and Y. Xiao. </author> <title> Solving linear arithmetic constraints for user interface applications. </title> <booktitle> In Proceedings of the 1997 ACM Conference on User Interface Software and Technology, </booktitle> <month> October </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet [3]. UI systems that handle simultaneous linear inequalities as well with reasonable efficiency are QOCA [7] and Cassowary <ref> [6] </ref>. Both of these algorithms are based on the simplex algorithm. We provide timing comparisons between Cassowary and our Fourier compilation algorithm in Section 5. 2 Solving Constraints Using Projection In this section we briefly illustrate how projection can be used to find solutions to linear equality and inequality constraints. <p> Runtime statistics the Cassowary constraint solver <ref> [6] </ref>, which uses an efficient simplex-based algorithm specifically adapted for repeatedly solving constraints arising in interactive graphics applications. All timings were done using OTI Smalltalk Version 4.0, running on an IBM Thinkpad 760EL laptop computer.
Reference: 7. <author> R. Helm, T. Huynh, C. Lassez, and K. Marriott. </author> <title> A linear constraint technology for interactive graphic systems. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> 301-309, </pages> <year> 1992. </year>
Reference-contexts: Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet [3]. UI systems that handle simultaneous linear inequalities as well with reasonable efficiency are QOCA <ref> [7] </ref> and Cassowary [6]. Both of these algorithms are based on the simplex algorithm.
Reference: 8. <author> H. Hosobe, S. Matsuoka, and A. Yonezawa. </author> <title> Generalized local propagation: A framework for solving constraint hierarchies. </title> <booktitle> In Procs. of the CP96, </booktitle> <address> Boston, </address> <year> 1996. </year>
Reference-contexts: Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL <ref> [8] </ref> and Ultraviolet [3]. UI systems that handle simultaneous linear inequalities as well with reasonable efficiency are QOCA [7] and Cassowary [6]. Both of these algorithms are based on the simplex algorithm.
Reference: 9. <author> S. E. Hudson and I. Smith. </author> <title> SubArctic UI toolkit user's manual. </title> <type> Tech. report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: to be run on a slower processor. 1.2 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [14]. 1 Bjorn Freeman-Benson, Object Technology International, Personal Communication. 3 Most of the current systems use one-way constraints (e.g. <ref> [9, 10] </ref>), or local prop-agation algorithms for acyclic collections of multi-way constraints (e.g. [12, 15]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet [3].
Reference: 10. <author> B. A. Myers. </author> <title> The Amulet user interface development environment. </title> <booktitle> In CHI'96 Conference Companion: Human Factors in Computing Systems, </booktitle> <address> Vancouver, B.C., </address> <month> April </month> <year> 1996. </year> <note> ACM SIGCHI. </note>
Reference-contexts: to be run on a slower processor. 1.2 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [14]. 1 Bjorn Freeman-Benson, Object Technology International, Personal Communication. 3 Most of the current systems use one-way constraints (e.g. <ref> [9, 10] </ref>), or local prop-agation algorithms for acyclic collections of multi-way constraints (e.g. [12, 15]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet [3].
Reference: 11. <author> C.G. Nelson. </author> <title> An n log n algorithm for the two-variable-per-constraint linear programming satisfiability problem. </title> <type> Report STAN-CS-78-689, </type> <institution> Stanford, </institution> <year> 1978. </year>
Reference-contexts: There are also a number of restricted cases that do have much more reasonable worst case complexities. One such restricted case is when each constraint involves at most 2 variables. The grid benchmark above falls into this category. Theorem 2 (Nelson <ref> [11] </ref>). Let C be a set of m inequalities involving n variables where each inequality involves at most 2 variables. Fourier elimination is O (mn d2 log ne+3 log n). fl Another example where the worst case phenomena cannot occur is when almost all of the constraints are equations.
Reference: 12. <author> M. Sannella, J. Maloney, B. Freeman-Benson, and A. Borning. </author> <title> Multi-way versus one-way constraints in user interfaces: Experience with the DeltaBlue algorithm. </title> <journal> Software|Practice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <year> 1993. </year>
Reference-contexts: long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [14]. 1 Bjorn Freeman-Benson, Object Technology International, Personal Communication. 3 Most of the current systems use one-way constraints (e.g. [9, 10]), or local prop-agation algorithms for acyclic collections of multi-way constraints (e.g. <ref> [12, 15] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet [3]. UI systems that handle simultaneous linear inequalities as well with reasonable efficiency are QOCA [7] and Cassowary [6].
Reference: 13. <author> Z. Somogyi, F. Henderson, and T. Conway. </author> <title> Mercury: an efficient purely declarative logic programming language. </title> <booktitle> In Procs. of the ACSC95, </booktitle> <pages> 499-512, </pages> <address> Glenelg, Australia, </address> <year> 1995. </year>
Reference-contexts: Code for the example constraints 5 Empirical Evaluation The projection-based compilation algorithm has been implemented and tested. Our prototype implementation is in Mercury <ref> [13] </ref>, and includes a module that is easily adapted to generate code for different target languages. The current implementation produces Smalltalk code, which is stored in a file. Then, in the Smalltalk environment, the code is loaded and incorporated into a graphics application for execution.
Reference: 14. <author> I. Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <pages> 329-346. IFIPS, </pages> <year> 1963. </year>
Reference-contexts: ones.) The additional speed could be important in other cases as well, for example when the compiled code is to be run on a slower processor. 1.2 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system <ref> [14] </ref>. 1 Bjorn Freeman-Benson, Object Technology International, Personal Communication. 3 Most of the current systems use one-way constraints (e.g. [9, 10]), or local prop-agation algorithms for acyclic collections of multi-way constraints (e.g. [12, 15]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles.
Reference: 15. <author> B. Vander Zanden. </author> <title> An incremental algorithm for satisfying hierarchies of multi-way dataflow constraints. </title> <journal> ACM TOPLAS, </journal> <volume> 18(1) </volume> <pages> 30-72, </pages> <year> 1996. </year> <month> 18 </month>
Reference-contexts: long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [14]. 1 Bjorn Freeman-Benson, Object Technology International, Personal Communication. 3 Most of the current systems use one-way constraints (e.g. [9, 10]), or local prop-agation algorithms for acyclic collections of multi-way constraints (e.g. <ref> [12, 15] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles. UI systems that handle simultaneous (cyclic) linear equations include DETAIL [8] and Ultraviolet [3]. UI systems that handle simultaneous linear inequalities as well with reasonable efficiency are QOCA [7] and Cassowary [6].
References-found: 15

