URL: http://www.cs.ucla.edu/~lidu/coca/wacc99.ps.gz
Refering-URL: http://www.cs.ucla.edu/~lidu/coca/
Root-URL: http://www.cs.ucla.edu
Email: flidu, zwang, muntzg@cs.ucla.edu  
Title: "Got COCA?" A New Perspective in Building Electronic Meeting Systems  
Author: Du Li, Zhenghao Wang, and Richard R. Muntz 
Date: September 21, 1998  
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract: In a previous paper[10], we presented COCA (Collaborative Objects Coordination Architecture) as a generic framework for developing collaborative systems. COCA advocates separation of coordination policies from general-purpose computations in collaborative systems so that the former can be modeled in a high-level specification language. Reuse of both coordination policies and collaboration tools can be achieved. This paper overviews the COCA model and focuses on the application of COCA in building real-life systems. We prototyped a modest set of tools for electronic meeting systems (EMSs) to show how they can be used to support both unstructured and structured meetings, with only changes in the coordination policies and no changes to the tools themselves. A subset of Robert's Rules of Order[20] was formalized and specified as an example of control of formal structured meetings. Finally the current status and the future directions are summarized. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Abdel-Wahab and M. Feit, XTV: </author> <title> A Framework for Sharing X Window Clients in Remote Synchronous Collaboration. </title> <booktitle> In Proceedings of IEEE Tricomm '91, </booktitle> <address> Chapel Hill, NC, </address> <month> April </month> <year> 1991 </year>
Reference-contexts: This is not always feasible or economical in many practical situations. In collaboration-transparent environments such as SharedX [8] and XTV <ref> [1] </ref>, mouse and keyboard events are intercepted and distributed among all copies of the shared application. As the runtime environments support collaboration transparency, legacy single-user applications can be directly used collaboratively without extension.
Reference: [2] <author> Milam W. Aiken, Olivia L. Sheng, and Douglas R. Vogel, </author> <title> Integrating Expert Systems With Group Decision Support Systems. </title> <journal> ACM Transactions on Information Systems, Vol.9, </journal> <volume> No.1, </volume> <month> Jan. </month> <year> 1991, </year> <note> p.75-95 18 </note>
Reference-contexts: This is not a big problem in small face-to-face meetings, especially if people are familiar with each other. In large-scale distributed meetings, however, social protocols without a well-designed enforcement mechanism are neither sufficient nor efficient to guarantee that everything is in the right course. Aiken, et al. <ref> [2] </ref> recognized such a problem in previous EMSs and attempted to integrate expert systems to provide advice to the meeting facilitators on organizational protocols, choice of appropriate tools, etc. <p> In electronic meetings, especially in a distributed large-scale one, the situation tends to get worse as the participants often can neither immediately observe nor respond to procedural events that are taking place, communication can be delayed, and messages could arrive out of order, etc. Authors of [9] and <ref> [2] </ref> recognized the needs for a more rigid control over large-scale electronic meetings to maintain order. Aiken, et al [2] proposed to integrate expert systems into EMSs to provide advice to meeting facilitators on meeting procedures, etc. But expert systems are by no means an enforcement mechanism. <p> Authors of [9] and <ref> [2] </ref> recognized the needs for a more rigid control over large-scale electronic meetings to maintain order. Aiken, et al [2] proposed to integrate expert systems into EMSs to provide advice to meeting facilitators on meeting procedures, etc. But expert systems are by no means an enforcement mechanism.
Reference: [3] <author> J. Begole and C. A. Shaffer, </author> <title> Flexible Collaboration Transparency. </title> <type> Virginia Tech., </type> <institution> Department of Computer Science, </institution> <note> Technical Report TR-98-11 </note>
Reference-contexts: However, these systems enforced a strict What-You-See-Is-What-I-See (WYSIWIS) style of sharing, and there was little concurrent work since the participants must take turns to work in the shared application. The centralized architectures of these systems are likely to become a performance bottleneck in large-scale collaborations. JAMM <ref> [3] </ref> employed a 3 replicated architecture and advanced previous collaboration-transparent approaches by introducing more concurrent work. Nevertheless, the coordination policies, if any, are embedded in the runtime environment although no longer in the collaboration tools.
Reference: [4] <author> Mauricio Cortes, DCWPL: </author> <title> A Programming Language For Describing Collaborative Work, </title> <booktitle> ACM CSCW'96, </booktitle> <address> Boston, Nov.96 </address>
Reference-contexts: Intermezzo [6] used the concepts of roles and policies, but their use were limited to access control. We take a more radical approach in which policies include concurrency control, floor control, etc. in addition to access control. DCWPL <ref> [4] </ref> adopted a similar architecture, but the specification language they proposed is limited in expressive power. The logic-based language we propose is much more flexible and expressive. COCA brings a new perspective into building EMSs as well as general collaborative systems.
Reference: [5] <author> S. Deering, </author> <title> Multicast Routing in a Datagram Internetwork. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Dec. </month> <year> 1991 </year>
Reference: [6] <author> W. Keith Edwards, </author> <title> Policies and Roles in Collaborative Applications, </title> <booktitle> ACM CSCW'96, </booktitle> <address> Cam-bridge, MA, USA </address>
Reference-contexts: We explicitly classify participants in a collaboration by roles, and define logic rules for each role to guard its interactions with other collaborators. These policies are interpreted at runtime by the COCA virtual machines, a copy of which runs on each participant site. Intermezzo <ref> [6] </ref> used the concepts of roles and policies, but their use were limited to access control. We take a more radical approach in which policies include concurrency control, floor control, etc. in addition to access control.
Reference: [7] <author> S. Floyd, V. Jacobson, C. Liu, S. McCanne and L. Zhang, </author> <title> A Reliable Multicast Framework for Lightweight Sessions and Application-Level Framing, </title> <booktitle> ACM SIGCOMM'95 Proceedings, </booktitle> <address> Boston, </address> <year> 1995 </year>
Reference-contexts: Early meeting support systems, such as CoLab [22], Capture Lab [13] and GroupSystems [17], focused on support of small face-to-face meetings. Later systems such as Tivoli [18], We-Met [24] and Dolphin [23] were extended to support remote meetings. More recently, MBone tools, such as wb <ref> [7] </ref>, vic [14], and qb [12] 1 have been used by many people to hold multimedia teleconferences over the Internet. These previous systems typically provide a number of tools to support different phases of meetings, such as those for group drawing and voting. <p> Each participant periodically sends out a liveness report. A participant is removed from the roster if no such report has been received for a certain amount of time. This algorithm has been adopted in several systems, e.g. wb <ref> [7] </ref>. The difference here is that we treat it as part of the collaboration semantics and specify it in COCA (see [11] for a complete specification). <p> Only if it does, is this delete performed at both the local and the remote coboards. Otherwise, a warning message will be displayed through the alert tool and the delete operation will be discarded. This is actually the strategy hardcoded into wb <ref> [7] </ref>. With this restriction, the above problems are avoided. But this kind of control policy often discourages participants from contributing: people are not free to modify objects on the screen. However, we can relax this constraint a bit by allowing a special participant to delete any objects. <p> Technically, however, a summary of what operations have been performed so far can be sent to a new comer from a centralized server in many systems. A more scalable algorithm as found in the implementation of wb <ref> [7] </ref> is to elect a nearest participant to help. Our observation is that this kind of action, as part of the collaboration semantics, should be decided and performed in the COCA layer.
Reference: [8] <author> D. Garfinkel, B. C. Welti and T. W. Yip, </author> <title> HP SharedX: A Tool for Reat-Time Collaboration. </title> <journal> HP Journal, </journal> <month> April </month> <year> 1994 </year>
Reference-contexts: This is not always feasible or economical in many practical situations. In collaboration-transparent environments such as SharedX <ref> [8] </ref> and XTV [1], mouse and keyboard events are intercepted and distributed among all copies of the shared application. As the runtime environments support collaboration transparency, legacy single-user applications can be directly used collaboratively without extension.
Reference: [9] <author> Thomas Gordon, Nikos Karacapilidis, </author> <title> The Zeno Argumentation Framework. </title> <booktitle> In Proceedings of the International Conference on Artificial Intelligence and Law, </booktitle> <institution> University of Melbourne, </institution> <address> Austrailia, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: In electronic meetings, especially in a distributed large-scale one, the situation tends to get worse as the participants often can neither immediately observe nor respond to procedural events that are taking place, communication can be delayed, and messages could arrive out of order, etc. Authors of <ref> [9] </ref> and [2] recognized the needs for a more rigid control over large-scale electronic meetings to maintain order. Aiken, et al [2] proposed to integrate expert systems into EMSs to provide advice to meeting facilitators on meeting procedures, etc. But expert systems are by no means an enforcement mechanism. <p> But expert systems are by no means an enforcement mechanism. Prakken [19] tried to formalize RRO in first-order predicate logic to assist the human mediator in maintaining order in the ZENO <ref> [9] </ref> discussion forum. However, this work is only partly completed and no runnable system has been implemented yet.
Reference: [10] <author> Du Li and Richard R. Muntz, COCA: </author> <title> Collaborative Objects Coordination Architecture, </title> <booktitle> to appear in the Preceedings of ACM CSCW'98, </booktitle> <address> Seattle, </address> <month> Nov. </month> <year> 1998. </year>
Reference-contexts: This kind of difficulty is reflected in the design of meeting support systems, since those requirements must be somehow translated into a set of mechanical rules which a computer system can accept. We termed this kind of mechanical rules as coordination policies in <ref> [10] </ref>. More specifically, the following considerations are included: data distribution, access control, concurrency control, floor control, collaboration structure and agenda, exception handling, the way to organize and process meeting minutes, etc. Coordination policies are usually sensitive to the work style and organization structure of individual groups. <p> Nevertheless, the coordination policies, if any, are embedded in the runtime environment although no longer in the collaboration tools. Whenever there are changes to the policies, the environment has to be rebuilt and redeployed in all involved sites. COCA <ref> [10] </ref> and similar systems advocate separation of coordination from general computation in developing collaborative systems. COCA provides groupware developers a dual-bus collaboration architecture and a logic-based specification language. <p> Since we expect that this policy will be used in many situations, we provide it in a reusable policy library. 3.3 Floor Control Tools In a centralized floor control policy, which was described in <ref> [10] </ref>, participants are divided into two distinct roles, i.e., a floor moderator role and a floor aspirant role. Only one participant can take the floor moderator role in a collaboration. <p> For example, in a centralized control policy, a participant can take the floor moderator role and other members take the floor aspirant role. Aspirants need to request the floor from the moderator to make changes. This policy was specified in <ref> [10] </ref>. To encourage even more collaboration, we can leave all objects open to deletion, but one who wishes to delete an object needs to ask for permission from the owner. One can only delete another person's notation after it is explicitly authorized.
Reference: [11] <author> Du Li, COCA: </author> <title> Runtime Support and Example Applications, </title> <address> http://www.cs.ucla.edu/~lidu/coca/ </address>
Reference-contexts: This algorithm has been adopted in several systems, e.g. wb [7]. The difference here is that we treat it as part of the collaboration semantics and specify it in COCA (see <ref> [11] </ref> for a complete specification). <p> One is to let COCA say "no" to the coboard of Mr. X first so that he can proceed with other tasks, meanwhile tell X that COCA is contacting the owner of this slide for permission. 14 A policy has been specified for this case <ref> [11] </ref>. Another way is to delete that slide immediately optimistically presuming that Y is agreeable, but undo this operation later if it turns out that Y disagrees. Then tell X of this event with the alert tool. <p> We take a less ambitious step in formalizing RRO and only attempt to specify a subset (actually the main loop) of it in the COCA framework as an example of control of formal structured meetings. In our specification <ref> [11] </ref>, two roles are defined, namely, a chairperson role and a normal member role. All participants are in the member role, with one and only one of them can enact the chairperson role at the same time. <p> A complete specification would be rather tedious. Interested readers can refer to [19]. A specification of the above main loop can be found in <ref> [11] </ref>. 6 Conclusions The benefits expected of COCA in building collaborative systems have been confirmed by our experience. First is that separation of coordination policies from general computation greatly simplified developing of collaboration tools.
Reference: [12] <author> Radhika Malpani and Lawrence A. Rowe, </author> <title> Floor Control for Large-Scale MBone Seminars. </title> <booktitle> ACM Multimedia 1997 </booktitle>
Reference-contexts: Later systems such as Tivoli [18], We-Met [24] and Dolphin [23] were extended to support remote meetings. More recently, MBone tools, such as wb [7], vic [14], and qb <ref> [12] </ref> 1 have been used by many people to hold multimedia teleconferences over the Internet. These previous systems typically provide a number of tools to support different phases of meetings, such as those for group drawing and voting.
Reference: [13] <author> Marilyn M. Mantei, </author> <title> Observation of executives using a computerized supported meeting environment. </title> <booktitle> International Journal of Decision Support Systems, </booktitle> <address> p.153-166, June 1989 Vol.5 No.2, </address> <publisher> North-Holland </publisher>
Reference-contexts: Other benefits of EMSs include electronic organization to facilitate meeting preparation and minutes generation, anonymous participation to avoid individual domination, etc. A plethora of meeting support systems have been developed and deployed in the past decade. Early meeting support systems, such as CoLab [22], Capture Lab <ref> [13] </ref> and GroupSystems [17], focused on support of small face-to-face meetings. Later systems such as Tivoli [18], We-Met [24] and Dolphin [23] were extended to support remote meetings.
Reference: [14] <author> Steven McCanne, Van Jacobson, </author> <title> vic: A Flexible Framework for Packet Video. </title> <booktitle> ACM Multimedia 1995 19 </booktitle>
Reference-contexts: Early meeting support systems, such as CoLab [22], Capture Lab [13] and GroupSystems [17], focused on support of small face-to-face meetings. Later systems such as Tivoli [18], We-Met [24] and Dolphin [23] were extended to support remote meetings. More recently, MBone tools, such as wb [7], vic <ref> [14] </ref>, and qb [12] 1 have been used by many people to hold multimedia teleconferences over the Internet. These previous systems typically provide a number of tools to support different phases of meetings, such as those for group drawing and voting.
Reference: [15] <author> Steven McCanne, Eric Brewer, Randy Katz, </author> <title> etc., Toward a Common Infrastructure for Multi--media Networking Middleware. </title> <booktitle> In Proc. 7th Intl. Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> St. Louis, MI, </address> <month> May </month> <year> 1997 </year>
Reference-contexts: Among other possible reasons that earlier systems totally left control to social protocols may be that there was no easier way to bring the diverse requirements of different groups into the design of a single tool. Groupware toolkits such as GroupKit [21] and MASH <ref> [15] </ref> can ease the development of groupware but not solve the above problems. Those toolkits, however powerful, do not tell people how to more efficiently model coordination policies.
Reference: [16] <author> David L. Mills, </author> <title> Internet Time Synchronization: the Network Time Protocol. </title> <journal> IEEE Trans. Communications, </journal> <volume> 39, 10, </volume> <month> Oct. </month> <year> 1991 </year>
Reference-contexts: On rendering a page, coboard draws the graphic objects on the page at the granularity of graphic elements, sorting them according to their elmstamps, i.e., &lt;timestamp, actorid, seqnr&gt;. Note that we do not need a perfectly accurate global time here; utilities such as NTP <ref> [16] </ref> should provide sufficient timing accuracy. Commands fall into three categories. The first category creates new graphic elements, including line, rectangle, oval, character, image, etc. Coboard processes commands in this category by generating corresponding elements and inserting them into the graphic objects they belong to.
Reference: [17] <author> J. F. Nunamaker, A. R. Dennis, J. S. Valacich, D. Vogel and J. F. George, </author> <title> Electonic Meeting Systems to Support Group Work. </title> <journal> Communications of the ACM, </journal> <volume> 34, 7, p.40-61, </volume> <month> July </month> <year> 1991 </year>
Reference-contexts: Other benefits of EMSs include electronic organization to facilitate meeting preparation and minutes generation, anonymous participation to avoid individual domination, etc. A plethora of meeting support systems have been developed and deployed in the past decade. Early meeting support systems, such as CoLab [22], Capture Lab [13] and GroupSystems <ref> [17] </ref>, focused on support of small face-to-face meetings. Later systems such as Tivoli [18], We-Met [24] and Dolphin [23] were extended to support remote meetings.
Reference: [18] <author> Elin R. Pedersen, Kim McCall, Thomas P. Moran, Frank G. Halasz, Tivoli: </author> <title> An Electronic Whiteboard for informal Workgroup Meetings. </title> <booktitle> In Proceedings of the InterCHI'93 Conference, </booktitle> <address> p.391-398, April 1993, Amsterdam </address>
Reference-contexts: A plethora of meeting support systems have been developed and deployed in the past decade. Early meeting support systems, such as CoLab [22], Capture Lab [13] and GroupSystems [17], focused on support of small face-to-face meetings. Later systems such as Tivoli <ref> [18] </ref>, We-Met [24] and Dolphin [23] were extended to support remote meetings. More recently, MBone tools, such as wb [7], vic [14], and qb [12] 1 have been used by many people to hold multimedia teleconferences over the Internet.
Reference: [19] <author> Henry Prakken, </author> <title> Formalizing Robert's Rules of Order: An Experiment in Automating Mediation of Group Decision Making. </title> <type> Technique Report, </type> <institution> German National Research Center for Information Technology, Germany, </institution> <month> December </month> <year> 1997 </year>
Reference-contexts: Aiken, et al [2] proposed to integrate expert systems into EMSs to provide advice to meeting facilitators on meeting procedures, etc. But expert systems are by no means an enforcement mechanism. Prakken <ref> [19] </ref> tried to formalize RRO in first-order predicate logic to assist the human mediator in maintaining order in the ZENO [9] discussion forum. However, this work is only partly completed and no runnable system has been implemented yet. <p> In addition to the above main loop, RRO regulates handling of exceptional cases, precedence ordering, the way debate and vote are conducted, the rights and duties of members, the minutes, etc. A complete specification would be rather tedious. Interested readers can refer to <ref> [19] </ref>. A specification of the above main loop can be found in [11]. 6 Conclusions The benefits expected of COCA in building collaborative systems have been confirmed by our experience. First is that separation of coordination policies from general computation greatly simplified developing of collaboration tools.
Reference: [20] <author> Henry M. Robert, </author> <year> 1837-1923. </year> <title> The Scott, Foresman Robert's Rules of order newly revised. </title> <editor> 1990 ed. (9th ed.), a new and enl. ed. </editor> <title> by Sarah Corbin Robert, with the assistance of Henry M. </title> <editor> Robert III, William J. </editor> <publisher> Evans </publisher>
Reference-contexts: Decisions must be made within a fixed time period. A meeting will lead to nowhere if there is not a well-established formalism to maintain order. Robert's Rules of Order (RRO) <ref> [20] </ref> serves as such a standard formalism for deliberative societies of all kinds in the United States. It is well-known, precisely formulated and well-tested in practice.
Reference: [21] <author> Mark Roseman and Saul Greenberg, </author> <title> Building Real-time Groupware with GroupKit, A Group-ware Toolkit. </title> <booktitle> ACM CHI, Vol.3, </booktitle> <address> No.1, </address> <month> March </month> <year> 1996 </year>
Reference-contexts: Among other possible reasons that earlier systems totally left control to social protocols may be that there was no easier way to bring the diverse requirements of different groups into the design of a single tool. Groupware toolkits such as GroupKit <ref> [21] </ref> and MASH [15] can ease the development of groupware but not solve the above problems. Those toolkits, however powerful, do not tell people how to more efficiently model coordination policies.
Reference: [22] <author> Mark Stefik, Greg Foster, Danny Bobrow, Ken Kahn, Stan Lanning, Lucy Suchman, </author> <title> Beyond the Chalkboard: Computer Support for Collaboration and Problem Solving in Meetings, </title> <journal> Communications of the ACM, Vol.1, No.1, </journal> <volume> p.32-47, </volume> <year> 1987 </year>
Reference-contexts: Other benefits of EMSs include electronic organization to facilitate meeting preparation and minutes generation, anonymous participation to avoid individual domination, etc. A plethora of meeting support systems have been developed and deployed in the past decade. Early meeting support systems, such as CoLab <ref> [22] </ref>, Capture Lab [13] and GroupSystems [17], focused on support of small face-to-face meetings. Later systems such as Tivoli [18], We-Met [24] and Dolphin [23] were extended to support remote meetings.
Reference: [23] <author> Norbert A. Streitz, Jorg Greissler, Jorg M. Haake, </author> <title> and Jeroen Hol, Dolphin: Integrated Meeting Support Across Local and Remote Desktop Environments and Liveboards, </title> <booktitle> ACM CSCW 1994 </booktitle>
Reference-contexts: A plethora of meeting support systems have been developed and deployed in the past decade. Early meeting support systems, such as CoLab [22], Capture Lab [13] and GroupSystems [17], focused on support of small face-to-face meetings. Later systems such as Tivoli [18], We-Met [24] and Dolphin <ref> [23] </ref> were extended to support remote meetings. More recently, MBone tools, such as wb [7], vic [14], and qb [12] 1 have been used by many people to hold multimedia teleconferences over the Internet.
Reference: [24] <author> Catherine G. Wolf and James R. Rhyne, </author> <title> Communication and Information Retrieval with a Pen-based Meeting Support Tool. </title> <booktitle> ACM CSCW 1992 20 </booktitle>
Reference-contexts: A plethora of meeting support systems have been developed and deployed in the past decade. Early meeting support systems, such as CoLab [22], Capture Lab [13] and GroupSystems [17], focused on support of small face-to-face meetings. Later systems such as Tivoli [18], We-Met <ref> [24] </ref> and Dolphin [23] were extended to support remote meetings. More recently, MBone tools, such as wb [7], vic [14], and qb [12] 1 have been used by many people to hold multimedia teleconferences over the Internet.
References-found: 24

