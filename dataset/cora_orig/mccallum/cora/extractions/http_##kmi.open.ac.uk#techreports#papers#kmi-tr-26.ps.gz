URL: http://kmi.open.ac.uk/techreports/papers/kmi-tr-26.ps.gz
Refering-URL: http://kmi.open.ac.uk/techreports/kmi-tr-list.html
Root-URL: 
Email: -e.motta, .zdrahal-@open.ac.uk  
Title: Parametric Design Problem Solving  
Author: Enrico Motta, Zdenek Zdrahal 
Note: 1 INTRODUCTION  
Address: Walton Hall, Milton Keynes, MK7 6AA United Kingdom  
Affiliation: Knowledge Media Institute The Open University  
Abstract: The aim of this paper is to understand what is involved in parametric design problem solving. In order to achieve this goal, in this paper i) we identify and detail the conceptual elements defining a parametric design task specification; ii) we illustrate how these elements are interpreted and operationalised during the design process; and iii) we formulate a generic model of parametric design problem solving. We then redescribe a number of problem solving methods in terms of the proposed generic model and we show that such a redescription enables us to provide a more precise account of the different competence behaviours expressed by the methods in Design is about constructing artifacts. This means that, broadly speaking, any design process is 'creative', in the sense that a design process produces a 'new solution', as opposed to selecting a solution from a predefined set. While recognizing the essential creative elements present in any design process, researchers, e.g. Gero (1990), restrict the use of the term 'creative design' to those design applications where the design elements of the target artifact cannot be selected from a predefined set. For instance, when designing a new car model it is normally the case that some design innovations are included, which were not present in previous car designs. In other words it is not (always) possible to characterise the process of designing a new car as one in which components are assembled and configured from a predefined set. Nevertheless, in a large number of real-world applications it is possible to assume that the target artifact is going to be designed in terms of predefined design elements. In such a scenario the design process consists of assembling and configuring these preexisting design elements in a way which satisfies the design requirements and constraints, and approximates some, typically cost-related, optimization criterion. This class of design tasks takes the name of configuration design (Stefik, 1995). In many cases, typically when the problem in hand does not exhibit complex spatial requirements and all possible solutions adhere to a common solution template, it is possible to simplify the configuration design problem even further, by modelling the target artifact as a set of parameters and characterizing design problem solving as the process of assigning values to parameters in accordance with the given design requirements, constraints, and optimization criterion. When this assumption is true for a particular task, we say that this is a parametric design task. The VT application (Marcus et al., 1988; Yost and Rothenfluh, 1996) provides a well-known example of a parametric design task. The aim of this paper is to understand what is involved in parametric design problem solving. In order to achieve this goal, in this paper i) we identify and detail the conceptual elements defining a parametric design task specification; ii) we illustrate how these elements are interpreted and operationalised during the design process; and iii) we produce a generic model of parametric design problem solving, characterised at the knowledge level, which generalizes from existing methods for parametric design. We then redescribe a number of problem solving methods in terms of the question.
Abstract-found: 1
Intro-found: 1
Reference: <author> Balkany A., Birmingham W.P. and Tommelein J. </author> <year> (1993). </year> <title> An Analysis of Several Configuration Design Systems. </title> <booktitle> Artificial Intelligence in Engineering, Design, and Manufacturing, </booktitle> <volume> 7(1), </volume> <pages> pp. 1-17. </pages>
Reference-contexts: On the contrary, in this paper we have also analysed, in a method-independent way, the structure of parametric design applications, and discussed the relationship between this structure and the generic problem solving model. In a separate paper <ref> (Balkany et al., 1993) </ref> the DIDS researchers analyse a number of configuration design systems, and try to classify the various mechanisms used by these systems into a number of generic categories: select design extension, make design extension, detect constraint violation, select fix mechanisms, make fix mechanisms, and test if-done.
Reference: <author> Balkany A., Birmingham W.P. and Runkel J. </author> <year> (1994). </year> <title> Solving Sisyphus by Design. </title> <booktitle> Int.J.Human-Computer Studies (1994) 40. </booktitle> <pages> pp. 221-241 Benjamins, </pages> <editor> R. and Pierret-Golbreich, C. </editor> <year> (1996). </year> <title> Assumptions of Problem Solving Methods. </title> <booktitle> Proceedings of the 6th Workshop on Knowledge Engineering Methods and Languages. </booktitle> <address> Gif-sur-Yvette, France, </address> <month> January 15-16. </month>
Reference: <author> Chandrasekaran, B. </author> <year> (1990). </year> <title> Design Problem Solving: A Task Analysis. </title> <journal> AI Magazine, </journal> <volume> 11(4), </volume> <pages> pp. 59-71. </pages>
Reference: <author> Dechter, R., and Meiri, I. </author> <year> (1994). </year> <title> Experimental Evaluation of Preprocessing Algorithms in Constraint Satisfaction Problems. </title> <journal> Artificial Intelligence Journal, </journal> <volume> Vol. 68, </volume> <pages> pp. 211-241. </pages>
Reference-contexts: However, even with more flexible search mechanisms, selecting the right focus is very important to minimize unnecessary backtracking. This problem has been extensively analysed in the constraint satisfaction literature and various heuristics have been devised to improve the efficiency of variable (in our case, focus) selection <ref> (Dechter and Meiri, 1994) </ref>. Because parametric design is about finding optimal or suboptimal solutions, the relevant preference knowledge is used to drive the selection of a design operator.
Reference: <author> Fensel, D. </author> <year> (1995). </year> <title> Assumptions and Limitations of a Problem Solving Method: a Case Study. </title> <editor> In Gaines and Musen (Eds.), </editor> <booktitle> Proceedings of the 9th Banff Knowledge Acquisition Workshop. </booktitle>
Reference: <author> Gero, J. S. </author> <year> (1990). </year> <title> Design Prototypes: A Knowledge Representation Schema for Design. </title> <journal> AI Magazine, </journal> <volume> 11(4), </volume> <pages> pp. 26-36. </pages> <month> Linster M </month> <year> (1994). </year> <title> Problem statement for Sisyphus: models of problem solving. </title> <booktitle> Int.J.Human-Computer Studies (1994) 40. </booktitle> <pages> pp. 187-192 Marcus, </pages> <editor> S, Stout, J., and McDermott, J. </editor> <year> (1988). </year> <title> VT: An Expert Elevator Designer that uses Knowledge-Based Backtracking. </title> <journal> AI Magazine, </journal> <volume> 9(1), </volume> <pages> pp. 95-112, </pages> <month> Spring </month> <year> 1988. </year>
Reference: <author> Motta, E. </author> <year> (1995). </year> <title> KBS Modelling in OCML. </title> <booktitle> Proceedings on the Workshop on Modelling Languages for Knowledge-Based Systems, </booktitle> <publisher> Vrije Universiteit Amsterdam, </publisher> <month> January 30-31, </month> <year> 1995. </year>
Reference-contexts: For instance, we can represent our preference for allocation models which minimize the distance between secretaries and the head of group in the Sisyphus-I example by means of the following rule, expressed in the OCML language <ref> (Motta, 1995) </ref>. ((prefer ?d1 ?d2) if (secretary ?sec) (head-of-group ?head) (member (?sec . ?sec-room1) ?d1) (member (?head . ?head-room1) ?d1) (member (?sec . ?sec-room2) ?d2) (member (?head . ?head-room2) ?d2) (&lt; (compute-distance ?sec-room1 ?head-room1) (compute-distance ?sec-room1 ?head-room1))) 2.2.2. Global cost function. <p> Other examples of cost functions can be found in an earlier paper of ours, <ref> (Zdrahal & Motta, 1995) </ref>, in which we discuss a number of cost functions for the VT application, which attempt to model the revision-oriented cost model used by the domain experts. <p> We can characterise the design strategy used by EMR as 'consistency-first'. 4 . 2 . Complete-Model-then-Revise (CMR) CMR uses the same revision strategy as EMR. The difference between EMR and CMR is that the latter begins the revision process only after all parameters have been assigned values <ref> (Zdrahal & Motta, 1995) </ref>. Hence, we can characterize the CMR strategy as 'completeness-first'. 4 . 3 . Hill Climbing (CMR-HC) CMR-HC also follows a 'completeness-first' strategy, which means that constraint violations are rectified only after an initial complete model has been produced. <p> As a consequence, CMR-HC can be applied only to constraints for which the concept the amount by which the constraint is violated makes sense. A more detailed analysis of CMR-HC can be found in <ref> (Zdrahal & Motta, 1995) </ref>. 4 . 4 . CMR-A* This is a version of the CMR method, which uses an A*-style search during the revision phase (Zdrahal & Motta, 1995). Thus, the design model is completed and constraints are evaluated as in a 'normal' CMR approach. <p> A more detailed analysis of CMR-HC can be found in <ref> (Zdrahal & Motta, 1995) </ref>. 4 . 4 . CMR-A* This is a version of the CMR method, which uses an A*-style search during the revision phase (Zdrahal & Motta, 1995). Thus, the design model is completed and constraints are evaluated as in a 'normal' CMR approach. Initially the design state associated with this complete design model is the only state which can be revised. Typically this design model will violate some constraints. <p> CONCLUSIONS In a number of related papers we have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise <ref> (Zdrahal & Motta, 1995) </ref>, iii) the ontological issues associated with design problems (Motta & Zdrahal, 1995), and iv) the different competence patterns expressed by different methods (Zdrahal & Motta, 1996). <p> CONCLUSIONS In a number of related papers we have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise (Zdrahal & Motta, 1995), iii) the ontological issues associated with design problems <ref> (Motta & Zdrahal, 1995) </ref>, and iv) the different competence patterns expressed by different methods (Zdrahal & Motta, 1996).
Reference: <author> Motta E., Zdrahal Z. </author> <year> (1995). </year> <title> The Trouble with What: Issues in method-independent task specifications. </title> <booktitle> In Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop (B.R.Gaines and M.Musen eds.). </booktitle> <pages> pp. 30-1 - 30- 17. </pages>
Reference-contexts: For instance, we can represent our preference for allocation models which minimize the distance between secretaries and the head of group in the Sisyphus-I example by means of the following rule, expressed in the OCML language <ref> (Motta, 1995) </ref>. ((prefer ?d1 ?d2) if (secretary ?sec) (head-of-group ?head) (member (?sec . ?sec-room1) ?d1) (member (?head . ?head-room1) ?d1) (member (?sec . ?sec-room2) ?d2) (member (?head . ?head-room2) ?d2) (&lt; (compute-distance ?sec-room1 ?head-room1) (compute-distance ?sec-room1 ?head-room1))) 2.2.2. Global cost function. <p> Other examples of cost functions can be found in an earlier paper of ours, <ref> (Zdrahal & Motta, 1995) </ref>, in which we discuss a number of cost functions for the VT application, which attempt to model the revision-oriented cost model used by the domain experts. <p> We can characterise the design strategy used by EMR as 'consistency-first'. 4 . 2 . Complete-Model-then-Revise (CMR) CMR uses the same revision strategy as EMR. The difference between EMR and CMR is that the latter begins the revision process only after all parameters have been assigned values <ref> (Zdrahal & Motta, 1995) </ref>. Hence, we can characterize the CMR strategy as 'completeness-first'. 4 . 3 . Hill Climbing (CMR-HC) CMR-HC also follows a 'completeness-first' strategy, which means that constraint violations are rectified only after an initial complete model has been produced. <p> As a consequence, CMR-HC can be applied only to constraints for which the concept the amount by which the constraint is violated makes sense. A more detailed analysis of CMR-HC can be found in <ref> (Zdrahal & Motta, 1995) </ref>. 4 . 4 . CMR-A* This is a version of the CMR method, which uses an A*-style search during the revision phase (Zdrahal & Motta, 1995). Thus, the design model is completed and constraints are evaluated as in a 'normal' CMR approach. <p> A more detailed analysis of CMR-HC can be found in <ref> (Zdrahal & Motta, 1995) </ref>. 4 . 4 . CMR-A* This is a version of the CMR method, which uses an A*-style search during the revision phase (Zdrahal & Motta, 1995). Thus, the design model is completed and constraints are evaluated as in a 'normal' CMR approach. Initially the design state associated with this complete design model is the only state which can be revised. Typically this design model will violate some constraints. <p> CONCLUSIONS In a number of related papers we have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise <ref> (Zdrahal & Motta, 1995) </ref>, iii) the ontological issues associated with design problems (Motta & Zdrahal, 1995), and iv) the different competence patterns expressed by different methods (Zdrahal & Motta, 1996). <p> CONCLUSIONS In a number of related papers we have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise (Zdrahal & Motta, 1995), iii) the ontological issues associated with design problems <ref> (Motta & Zdrahal, 1995) </ref>, and iv) the different competence patterns expressed by different methods (Zdrahal & Motta, 1996).
Reference: <author> Motta E., Stutt A., Zdrahal Z., O'Hara K.and Shadbolt N.(1996). </author> <title> Solving VT in VITAL: a study in model construction and knowledge reuse. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 44(3/4), </volume> <pages> pp. 333-371. </pages>
Reference-contexts: This modification normally results in new constraint violations which are fixed by an adaptation mechanism. This can be one of the three revision strategies discussed above, i.e. CMR, CMR-HC, and CMR-A* <ref> (Zdrahal & Motta, 1996) </ref>. 4 . 6 . Pros and cons of sample problem solving methods The problem solving methods described here have all been tested on the VT problem and exhibit very different behaviours, both in terms of competence and in terms of performance. <p> CMR-A* <ref> (Zdrahal & Motta, 1996) </ref>. 4 . 6 . Pros and cons of sample problem solving methods The problem solving methods described here have all been tested on the VT problem and exhibit very different behaviours, both in terms of competence and in terms of performance. In particular, experimental tests (Zdrahal & Motta, 1996) showed that when applied to the VT domain, CMR and EMR can solve less than half of the input specifications which can be solved by CMR-A*. Unfortunately, the latter is a much more expensive method. <p> For example, an intelligent parametric design problem solver could employ a number of different state selection strategies and use them in different moments of the design process <ref> (Zdrahal & Motta, 1996) </ref>. Moreover, the selection of a design operator goes normally through a number of 'important' decision-making activities, which include the selection of a design context (e.g. extend-design vs revisedesign) and the selection of a design focus. <p> However, human designers are of course capable of reusing past designs and the same applies to problem solvers which make use of case-based reasoning techniques when solving design applications <ref> (Zdrahal & Motta, 1996) </ref>. <p> Select the state from S2 with the maximum cost. CBR. There is no single strategy for design state selection which is applicable to all CBR design methods. Each method is characterised by its own technique. Some possibilities are presented in <ref> (Zdrahal & Motta, 1996) </ref>. The criteria used by the different methods for selecting design states are summarised in table 1. Design Model Violated Constraints Cost CMR, EMR max min min CMR-A* max not applied min CBR method dependent method dependent method dependent Table 1. <p> Criteria for state selection in problem solving methods We have already mentioned that our experimental results with the VT domain show that CMR-A* is able to find solution designs in cases where EMR, CMR and CMR-HC fail <ref> (Zdrahal & Motta, 1996) </ref>. Our analysis of the state selection strategies employed by these methods enables us to explain why they exhibit different competence patterns. All four methods focus on maximal design states i.e. states whose design model comprise the highest number of assigned parameters. <p> have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise (Zdrahal & Motta, 1995), iii) the ontological issues associated with design problems (Motta & Zdrahal, 1995), and iv) the different competence patterns expressed by different methods <ref> (Zdrahal & Motta, 1996) </ref>. In this paper we have tried to pull together the various threads of our recent research and answer questions concerning the structure of a parametric design task specification and the knowledge-level organisation of a generic parametric design problem solver. <p> There are no good methods and bad methods. EMR and CMR do perfectly well for most parts of the VT domain. However, the assumptions on which these methods are based do not hold for the machinery component of the VT model - see also <ref> (Zdrahal and Motta, 1996) </ref>. From a problem solving point of view this means that research into problem solving methods should produce control architectures which can opportunistically switch to a different problem solving regime when the current one fails.
Reference: <author> Newell A. </author> <year> (1980). </year> <title> Reasoning, Problem Solving, and Decision Processes: The Problem Space as a Fundamental Category. In R.S. Nickerson (Ed.), Attention and Performance VIII, </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, New Jersey. </address>
Reference-contexts: The paper is organised as follows: in the next section we formally describe the structure of parametric design applications; in section 3 we present a problem space view <ref> (Newell, 1980) </ref> of parametric design problem solving, and we reinterpret task knowledge for parametric design in terms of the problem space framework. In section 4 we describe a number of problem solving methods for parametric design. In section 5 we illustrate a generic model of parametric design problem solving.
Reference: <author> Newell A. </author> <year> (1982). </year> <title> The knowledge level. </title> <journal> Artificial Intelligence. </journal> <volume> Vol. 18, 1. </volume> <pages> pp. 87-127 Newell A. </pages> <year> (1990). </year> <title> Unified Theories of Cognition. </title> <publisher> Harvard University Press. </publisher>
Reference: <author> Poeck, K. and Puppe, F. </author> <year> (1992). </year> <title> COKE: Efficient Solving of Complex Assignment Problems with the Propose-and-Exchange Method. </title> <booktitle> 5th International Conference on Tools with Artificial Intelligence. </booktitle> <address> Arlington, Virginia. </address>
Reference-contexts: Because parametric design is about finding optimal or suboptimal solutions, the relevant preference knowledge is used to drive the selection of a design operator. This is often called local preference knowledge <ref> (Poeck and Puppe, 1992) </ref> and it is defined as preference knowledge which can be used to make locally optimal decisons, i.e. to perform best-first search.
Reference: <author> Runkel, J. T. and Birmingham, W. B. </author> <year> (1994). </year> <title> Solving VT by Reuse. </title> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition Workshop, </booktitle> <address> Banff, Canada, </address> <year> 1994. </year>
Reference: <author> Stefik M.(1995). </author> <title> Introduction to Knowledge Systems. </title> <publisher> Morgan Kaufmann. </publisher> <year> 1995. </year>
Reference-contexts: In such a scenario the design process consists of assembling and configuring these preexisting design elements in a way which satisfies the design requirements and constraints, and approximates some, typically cost-related, optimization criterion. This class of design tasks takes the name of configuration design <ref> (Stefik, 1995) </ref>.
Reference: <author> Van de Velde, W. </author> <year> (1994). </year> <title> Issues in Knowledge Level Modelling. </title> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition Workshop, </booktitle> <volume> Vol 2, </volume> <year> 1994a. </year> <pages> 38-1 - 38-11. </pages>
Reference: <author> Van de Velde, W. </author> <year> (1988). </year> <title> Inference structure as a basis for problem solving. </title> <booktitle> Proceedings of the 8th European Conference on Artificial Intelligence, </booktitle> <pages> pp 202-207, </pages> <address> London, </address> <publisher> Pitman. </publisher>
Reference-contexts: DISCUSSION OF RELATED WORK Parametric design is formally analysed in (Wielinga et al., 1995). In this paper the authors define a parametric design task specification and refine the associated competence theory <ref> (Van de Velde, 1988) </ref> to derive properties of a CMR problem solving method. Such an approach succeeds in highlighting a number of assumptions underlying CMR, but it only produces limited results with respect to assessing its competence.
Reference: <author> Wielinga B. J., Schreiber A.Th. and Breuker J., </author> <year> (1992) </year> <month> KADS: </month> <title> A Modelling Approach to Knowledge Engineering. </title> <journal> Knowledge Acquisition 4(1) pp.5-53. </journal>
Reference-contexts: For instance, the task Selectstate-selection-strategy could be modelled in different ways, as a metalevel control task, or 'hardwired' in alternative formulations of task Select-design-state, depending on the adopted modelling approach and/or language. In figure 4 we show a KADS-style inference structure <ref> (Wielinga et al., 1992) </ref>, showing the input/output behaviour of the subtasks in the first four layers of the tasksubtask decomposition given in figure 3. Italicized labels indicate repeated occurrences of a knowledge role.
Reference: <author> Wielinga B.J., Akkermans J.M. and Schreiber A.Th. </author> <year> (1995). </year> <title> A Formal Analysis of Parametric Design Problem Solving. </title> <editor> In Gaines and Musen (Eds.), </editor> <booktitle> Proceedings of the 9th Banff Knowledge Acquisition Workshop, </booktitle> <pages> pp. 37-1 - 37- 15. </pages>
Reference-contexts: We then redescribe a number of problem solving methods in terms of the proposed generic model and we show that such a redescription enables us to provide a more precise account of the different competence behaviours expressed by the methods in question. Many authors - e.g. <ref> (Wielinga et al., 1995) </ref> - distinguish between an analysis and a synthesis phase in the design process. <p> Constraints and requirements. A constraint specifies a condition which has to be satisfied by an admissible design. For instance, the VT elevator design application includes constraints such as "The cab height must be between 84 and 240 inches, inclusive". Requirements are also constraints and, as discussed in <ref> (Wielinga et al., 1995) </ref>, the difference between requirements and constraints is conceptual rather than formal. <p> More specifically, there is no difference between the approach used by CMR-A* and the others. We can therefore conclude that the superior competence of CMR-A* is only a result of the state selection strategy it employs. 7 . DISCUSSION OF RELATED WORK Parametric design is formally analysed in <ref> (Wielinga et al., 1995) </ref>. In this paper the authors define a parametric design task specification and refine the associated competence theory (Van de Velde, 1988) to derive properties of a CMR problem solving method.
Reference: <author> Yost G.R., Rothenfluh T.R. </author> <year> (1996). </year> <title> Configuring elevator systems. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 44(3/4), </volume> <pages> pp 521-568. </pages>
Reference-contexts: This is the case when the possible value of a parameter is functionally determined by a constraint or requirement. For example, the value of the parameter door-operator-weight in the VT domain <ref> (Yost & Rothenfluh, 1996) </ref> is calculated as the sum of the door operator engine weight and the door operator header weight. <p> From a theoretical point of view the counterweight can be positioned anywhere in the space defined by the distance between the platform and the rear of the hoistway (this space is called "counterweight space"). However, the description of the VT application <ref> (Yost & Rothenfluh, 1996) </ref> indicates that only two options are ever considered by the VT domain experts, when deciding on the position of the counterweight. The preferred solution locates the counterweight half way between the platform and the U-bracket.
Reference: <author> Zdrahal Z., Motta E. </author> <year> (1995). </year> <title> An In-Depth Analysis of Propose & Revise Problem Solving Methods. </title> <editor> In Gaines and Musen (Eds.), </editor> <booktitle> Proceedings of the 9th Banff Knowledge Acquisition Workshop, </booktitle> <pages> pp. 38-1 - 38- 20. </pages>
Reference-contexts: Other examples of cost functions can be found in an earlier paper of ours, <ref> (Zdrahal & Motta, 1995) </ref>, in which we discuss a number of cost functions for the VT application, which attempt to model the revision-oriented cost model used by the domain experts. <p> We can characterise the design strategy used by EMR as 'consistency-first'. 4 . 2 . Complete-Model-then-Revise (CMR) CMR uses the same revision strategy as EMR. The difference between EMR and CMR is that the latter begins the revision process only after all parameters have been assigned values <ref> (Zdrahal & Motta, 1995) </ref>. Hence, we can characterize the CMR strategy as 'completeness-first'. 4 . 3 . Hill Climbing (CMR-HC) CMR-HC also follows a 'completeness-first' strategy, which means that constraint violations are rectified only after an initial complete model has been produced. <p> As a consequence, CMR-HC can be applied only to constraints for which the concept the amount by which the constraint is violated makes sense. A more detailed analysis of CMR-HC can be found in <ref> (Zdrahal & Motta, 1995) </ref>. 4 . 4 . CMR-A* This is a version of the CMR method, which uses an A*-style search during the revision phase (Zdrahal & Motta, 1995). Thus, the design model is completed and constraints are evaluated as in a 'normal' CMR approach. <p> A more detailed analysis of CMR-HC can be found in <ref> (Zdrahal & Motta, 1995) </ref>. 4 . 4 . CMR-A* This is a version of the CMR method, which uses an A*-style search during the revision phase (Zdrahal & Motta, 1995). Thus, the design model is completed and constraints are evaluated as in a 'normal' CMR approach. Initially the design state associated with this complete design model is the only state which can be revised. Typically this design model will violate some constraints. <p> CONCLUSIONS In a number of related papers we have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise <ref> (Zdrahal & Motta, 1995) </ref>, iii) the ontological issues associated with design problems (Motta & Zdrahal, 1995), and iv) the different competence patterns expressed by different methods (Zdrahal & Motta, 1996). <p> CONCLUSIONS In a number of related papers we have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise (Zdrahal & Motta, 1995), iii) the ontological issues associated with design problems <ref> (Motta & Zdrahal, 1995) </ref>, and iv) the different competence patterns expressed by different methods (Zdrahal & Motta, 1996).
Reference: <author> Zdrahal Z., Motta E. </author> <year> (1996). </year> <title> Improving Competence by Integrating Case-Based Reasoning and Heuristic Search. </title> <booktitle> Proceedings of the 10th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop. </booktitle>
Reference-contexts: This modification normally results in new constraint violations which are fixed by an adaptation mechanism. This can be one of the three revision strategies discussed above, i.e. CMR, CMR-HC, and CMR-A* <ref> (Zdrahal & Motta, 1996) </ref>. 4 . 6 . Pros and cons of sample problem solving methods The problem solving methods described here have all been tested on the VT problem and exhibit very different behaviours, both in terms of competence and in terms of performance. <p> CMR-A* <ref> (Zdrahal & Motta, 1996) </ref>. 4 . 6 . Pros and cons of sample problem solving methods The problem solving methods described here have all been tested on the VT problem and exhibit very different behaviours, both in terms of competence and in terms of performance. In particular, experimental tests (Zdrahal & Motta, 1996) showed that when applied to the VT domain, CMR and EMR can solve less than half of the input specifications which can be solved by CMR-A*. Unfortunately, the latter is a much more expensive method. <p> For example, an intelligent parametric design problem solver could employ a number of different state selection strategies and use them in different moments of the design process <ref> (Zdrahal & Motta, 1996) </ref>. Moreover, the selection of a design operator goes normally through a number of 'important' decision-making activities, which include the selection of a design context (e.g. extend-design vs revisedesign) and the selection of a design focus. <p> However, human designers are of course capable of reusing past designs and the same applies to problem solvers which make use of case-based reasoning techniques when solving design applications <ref> (Zdrahal & Motta, 1996) </ref>. <p> Select the state from S2 with the maximum cost. CBR. There is no single strategy for design state selection which is applicable to all CBR design methods. Each method is characterised by its own technique. Some possibilities are presented in <ref> (Zdrahal & Motta, 1996) </ref>. The criteria used by the different methods for selecting design states are summarised in table 1. Design Model Violated Constraints Cost CMR, EMR max min min CMR-A* max not applied min CBR method dependent method dependent method dependent Table 1. <p> Criteria for state selection in problem solving methods We have already mentioned that our experimental results with the VT domain show that CMR-A* is able to find solution designs in cases where EMR, CMR and CMR-HC fail <ref> (Zdrahal & Motta, 1996) </ref>. Our analysis of the state selection strategies employed by these methods enables us to explain why they exhibit different competence patterns. All four methods focus on maximal design states i.e. states whose design model comprise the highest number of assigned parameters. <p> have investigated i) the optimisation aspects of design applications (Motta & Zdrahal, 1995; Zdrahal & Motta, 1995), ii) several architectures for Propose & Revise (Zdrahal & Motta, 1995), iii) the ontological issues associated with design problems (Motta & Zdrahal, 1995), and iv) the different competence patterns expressed by different methods <ref> (Zdrahal & Motta, 1996) </ref>. In this paper we have tried to pull together the various threads of our recent research and answer questions concerning the structure of a parametric design task specification and the knowledge-level organisation of a generic parametric design problem solver. <p> There are no good methods and bad methods. EMR and CMR do perfectly well for most parts of the VT domain. However, the assumptions on which these methods are based do not hold for the machinery component of the VT model - see also <ref> (Zdrahal and Motta, 1996) </ref>. From a problem solving point of view this means that research into problem solving methods should produce control architectures which can opportunistically switch to a different problem solving regime when the current one fails.
References-found: 21

