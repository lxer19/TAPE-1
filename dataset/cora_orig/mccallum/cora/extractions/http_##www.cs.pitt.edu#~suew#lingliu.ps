URL: http://www.cs.pitt.edu/~suew/lingliu.ps
Refering-URL: http://www.cs.pitt.edu/~suew/
Root-URL: http://www.cs.pitt.edu
Email: flingliu,caltong@cse.ogi.edu  
Title: Methodical Restructuring of Complex Workflow Activities  
Author: Ling Liu and Calton Pu 
Address: P.O.Box 91000 Portland, OR 97291-1000 USA  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute  
Abstract: We describe a family of activity-split and activity-join operations with a notion of validity. The key idea of introducing the set of activity-split and activity-join operations is to allow users to restructure ongoing activities in anticipation of uncertainty so that any significant performance loss due to unexpected unavailablity or delay of shared resources can be avoided or reduced through release of early committed resources or transferring ownership of uncommitted resources. To guarantee the correctness of new activities generated by activity-split or activity- join operations, we define the notion of validity of activity restructuring operations and identify the cases where the correctness is ensured and the cases where activity-split or activity-join are illegal due to the inconsistency incurred. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Bancilhon, W. Kim, and H. Korth. </author> <title> A model for cad transactions. </title> <booktitle> In Proceeding of the 11th International Conference on Very Large Databases, </booktitle> <pages> pages 25-33. </pages> <publisher> Morgan Kauffman, </publisher> <year> 1985. </year>
Reference-contexts: Similarly, AJoin operations are specialized into join-by-group and join-by-merge. Comparing with the early research on split-transactions [18] and Cooperative Transactions <ref> [1, 17] </ref>, these activity restructuring meta operations are novel in at least two aspects. First, a formal notion of the validity of activity restructuring operations is introduced to guarantee the correctness of new activities generated by activity-split or activity-join operations. <p> Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3]. <p> The TAM development is mostly inspired by the early work on split-transactions [18], Cooperative Transactions <ref> [1] </ref>, and Transaction Groups [17]. <p> The TAM development is mostly inspired by the early work on split-transactions [18], Cooperative Transactions [1], and Transaction Groups [17]. Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups <ref> [1, 18, 17] </ref>, the interactions among siblings are either limited to static and one-shot design of transaction groups [17, 1], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [18]. <p> Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups [1, 18, 17], the interactions among siblings are either limited to static and one-shot design of transaction groups <ref> [17, 1] </ref>, or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [18].
Reference: [2] <author> R. Barga and C. Pu. </author> <title> A practical and modular implementation technique of extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: On the practical side, we are looking into possibilities of building value-added adapters to support TAM on top of existing on-line transaction processing systems <ref> [2, 21] </ref> or other activity-based operational systems.
Reference: [3] <author> P. Chrysanthis and K. Ramamritham. </author> <title> Acta: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <year> 1990. </year>
Reference-contexts: Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions <ref> [3] </ref>. Furthermore, most of the ETMs proposed so far are system supporting built-in ETMs, rather than system supporting user-defined ETMs, and thus not appropriate for supporting a variety of workflow applications with diverse or possibly conflicting business requirements [10, 15].
Reference: [4] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing long-running activities with triggers and transactions. </title> <booktitle> In Proceedings of the ACM SIGMOD, </booktitle> <year> 1991. </year>
Reference-contexts: To demonstrate the usefulness of the proposed framework, we have applied this activity restructuring framework to a number of example applications drawn from the real world domains. See [14] for further detail. 4 Related Work and Conclusion Several activity models have been proposed <ref> [5, 4, 19] </ref> to support declarative specification of control flows within activities. Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities. <p> See [14] for further detail. 4 Related Work and Conclusion Several activity models have been proposed [5, 4, 19] to support declarative specification of control flows within activities. Features of long running activities <ref> [5, 4] </ref> include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. <p> Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., <ref> [5, 4, 19] </ref>) and workflow systems (e.g., [9, 10, 15]) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities.
Reference: [5] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transactional model for long-running activities. </title> <booktitle> In Proceedings of the 17th Very Large Databases, </booktitle> <pages> pages 113-122, </pages> <year> 1991. </year>
Reference-contexts: To demonstrate the usefulness of the proposed framework, we have applied this activity restructuring framework to a number of example applications drawn from the real world domains. See [14] for further detail. 4 Related Work and Conclusion Several activity models have been proposed <ref> [5, 4, 19] </ref> to support declarative specification of control flows within activities. Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities. <p> See [14] for further detail. 4 Related Work and Conclusion Several activity models have been proposed [5, 4, 19] to support declarative specification of control flows within activities. Features of long running activities <ref> [5, 4] </ref> include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. <p> Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., <ref> [5, 4, 19] </ref>) and workflow systems (e.g., [9, 10, 15]) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities.
Reference: [6] <author> A. Deacon, H. Schek, and G. Weikum. </author> <title> Semantic-based multilevel transaction management in federated systems. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <pages> pages 452-461, </pages> <year> 1994. </year>
Reference-contexts: Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3].
Reference: [7] <author> A. Elmagarmid. </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Calif.), </address> <year> 1992. </year>
Reference-contexts: Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3].
Reference: [8] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of ACM SIGMOD Int. Conference on Management of Data, </booktitle> <pages> pages 462-473, </pages> <year> 1987. </year>
Reference-contexts: In other words, the activity T may commit even if one of its component activities is aborted. Similar to the saga transactions <ref> [8] </ref>, the commit of a subactivity in TAM is independent of the commit of its parent activity. If an activity aborts, then all its children that are in begin state are aborted; and its committed children, however, are compensated for. <p> Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3].
Reference: [9] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings of the 1994 IEEE Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., [5, 4, 19]) and workflow systems (e.g., <ref> [9, 10, 15] </ref>) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities.
Reference: [10] <author> D. Georgakopoulos, M. Hornick, and A. Sheth. </author> <title> An overview of workflow management: From process modeling to workflow automation infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> (2):119-153, 1995. 
Reference-contexts: The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., [5, 4, 19]) and workflow systems (e.g., <ref> [9, 10, 15] </ref>) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities. <p> Furthermore, most of the ETMs proposed so far are system supporting built-in ETMs, rather than system supporting user-defined ETMs, and thus not appropriate for supporting a variety of workflow applications with diverse or possibly conflicting business requirements <ref> [10, 15] </ref>. The TAM development is mostly inspired by the early work on split-transactions [18], Cooperative Transactions [1], and Transaction Groups [17].
Reference: [11] <author> L. Liu and R. Meersman. </author> <title> The basic building blocks for modeling communication behavior of complex objects: an activity-driven approach. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 21(3) </volume> <pages> 157-207, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: An activity pattern describes concrete activities occurring in a particular organization. Each concrete activity is seen as an instantiation of its activity pattern. Informally, an activity pattern consists of objects, messages, message exchange constraints, preconditions, postconditions, and trigger conditions <ref> [11] </ref>. TAM distinguishes two types of activity patterns: elementary activity patterns and composite activity patterns. An elementary activity pattern is a program that consists of transaction operations such as Begin, a sequence of Read and Write operations, and Commit or Abort.
Reference: [12] <author> L. Liu and C. Pu. </author> <title> A transactional activity model for organizing open-edned cooperative activities. </title> <type> Technical Report TR96-21, </type> <institution> Department of Computer Science, University of Alberta, </institution> <note> An extended abstract in the Proceedings of the 31st Hawaii International Conference on Systen Sciences (HICSS-31) - Workflow Systems Track, </note> <month> Jan. </month> <year> 1998. </year>
Reference-contexts: They capture complex interaction dependencies between activities that have no hierarchical composition relationship with each other. Examples include constraints on the occurrence of a subactivity execution and temporal precedence of the execution of subactivities at the same abstraction level or across different levels in the activity composition hierarchy <ref> [12] </ref>. TAM provides four constructs for specification of user-defined activity dependencies. They are precede, enable, disable, and compatible. The construct precede is designed to capture the temporary precedence dependencies and the existence dependencies between two activities.
Reference: [13] <author> L. Liu and C. Pu. </author> <title> Correctness issues for composition and restructuring of activities, Manuscript in Preparation, </title> <address> Oct. </address> <year> 1997. </year>
Reference-contexts: A formal proof of this proposition is omitted in this paper due to the space restriction. Readers may refer to our technical report <ref> [13] </ref> for detail. 3.3 Activity-join Operations The inverse operation of activity-split, called activity-join, can combine results of several ongoing subactivities together and release them atomically, as if they had always been a single activity. <p> To ensure the correctness criteria of activity-join operations, the merged or grouped activities must preserve all application-specific activity dependencies, such as subac-tivity execution dependencies, subactivity interleaving dependencies and user-defined state dependency dependencies. Due to the space limitation, we here omit the algorithms <ref> [13] </ref> for correctness ensurance of activity-join operations. In summary, activity-split and join-activity can be combined in any formation.
Reference: [14] <author> L. Liu and C. Pu. </author> <title> Methodical restructuring of complex workflow activities. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: In TAM, we use the multiple object version scheme to implement the notion of visibility in the presence of concurrent execution of activities <ref> [14] </ref>. 2.4 Specification of Activity Dependencies In TAM application-specific activity dependencies are user-defined. They capture complex interaction dependencies between activities that have no hierarchical composition relationship with each other. <p> For simplicity of presentation, we describe two-way activity-split operations in this section. To split an activity n ways, we can apply the two-way split n 1 times in succession <ref> [14] </ref>. 3.2.1 Two-way Activity-split Operations An activity-split operation on an ongoing activity C, denoted by ASplit (C; '; C 1 ; C 2 ), produces two new activities C 1 and C 2 with a synchronization constraint '(C 1 ; C 2 ). <p> To demonstrate the usefulness of the proposed framework, we have applied this activity restructuring framework to a number of example applications drawn from the real world domains. See <ref> [14] </ref> for further detail. 4 Related Work and Conclusion Several activity models have been proposed [5, 4, 19] to support declarative specification of control flows within activities. Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities.
Reference: [15] <author> C. Mohan. </author> <title> Advanced Transaction Models Survey and Critique. </title> <booktitle> Tutorial presented at the ACM SIGMOD international conference, </booktitle> <year> 1994. </year>
Reference-contexts: The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., [5, 4, 19]) and workflow systems (e.g., <ref> [9, 10, 15] </ref>) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities. <p> Furthermore, most of the ETMs proposed so far are system supporting built-in ETMs, rather than system supporting user-defined ETMs, and thus not appropriate for supporting a variety of workflow applications with diverse or possibly conflicting business requirements <ref> [10, 15] </ref>. The TAM development is mostly inspired by the early work on split-transactions [18], Cooperative Transactions [1], and Transaction Groups [17].
Reference: [16] <author> C. Mohan, G. Alonso, R. Gunthor, and M. Kamath. Exotica: </author> <title> A research prespective on workflow management systems. </title> <journal> In IEEE Bulletin of the Technical Committee on Data Engineering, </journal> <pages> pages 19-26, </pages> <month> March </month> <year> 1995, </year> <note> Vol.18, No.1. </note>
Reference-contexts: Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3].
Reference: [17] <author> M. Nodine and S. Zdonik. </author> <title> Cooperative transaction hierarchies: a transaction model to support design applications. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <pages> pages 83-94, </pages> <year> 1990. </year>
Reference-contexts: Similarly, AJoin operations are specialized into join-by-group and join-by-merge. Comparing with the early research on split-transactions [18] and Cooperative Transactions <ref> [1, 17] </ref>, these activity restructuring meta operations are novel in at least two aspects. First, a formal notion of the validity of activity restructuring operations is introduced to guarantee the correctness of new activities generated by activity-split or activity-join operations. <p> Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3]. <p> The TAM development is mostly inspired by the early work on split-transactions [18], Cooperative Transactions [1], and Transaction Groups <ref> [17] </ref>. <p> The TAM development is mostly inspired by the early work on split-transactions [18], Cooperative Transactions [1], and Transaction Groups [17]. Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups <ref> [1, 18, 17] </ref>, the interactions among siblings are either limited to static and one-shot design of transaction groups [17, 1], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [18]. <p> Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups [1, 18, 17], the interactions among siblings are either limited to static and one-shot design of transaction groups <ref> [17, 1] </ref>, or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [18].
Reference: [18] <author> C. Pu, G. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: AS-plit operations are specialized into: (1) a serial split by a precede dependency, which requires a serial execution, (2) a parallel split by a compatible dependency, and (3) an unnesting split otherwise. Similarly, AJoin operations are specialized into join-by-group and join-by-merge. Comparing with the early research on split-transactions <ref> [18] </ref> and Cooperative Transactions [1, 17], these activity restructuring meta operations are novel in at least two aspects. First, a formal notion of the validity of activity restructuring operations is introduced to guarantee the correctness of new activities generated by activity-split or activity-join operations. <p> Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3]. <p> The TAM development is mostly inspired by the early work on split-transactions <ref> [18] </ref>, Cooperative Transactions [1], and Transaction Groups [17]. <p> The TAM development is mostly inspired by the early work on split-transactions [18], Cooperative Transactions [1], and Transaction Groups [17]. Although cooperation among sibling transactions is supported by Cooperative Transactions or transaction groups <ref> [1, 18, 17] </ref>, the interactions among siblings are either limited to static and one-shot design of transaction groups [17, 1], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call [18]. <p> is supported by Cooperative Transactions or transaction groups [1, 18, 17], the interactions among siblings are either limited to static and one-shot design of transaction groups [17, 1], or restricted to leaf node transactions in order to support the isolation-based serializable split-transactions using read-sets and write-sets in a split call <ref> [18] </ref>. TAM differs from these models by three distinct features: (1) TAM activity specification language allows the users to specify activity composition hierarchy and activity dependencies declaratively and incrementally.
Reference: [19] <author> M. Rusinkiewicz, W. Klas, T. Tesch, J. Wasch, and P.Muth. </author> <title> Towards a cooperative activity model the coopertive activity model. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <pages> pages 194-205, </pages> <year> 1995. </year>
Reference-contexts: To demonstrate the usefulness of the proposed framework, we have applied this activity restructuring framework to a number of example applications drawn from the real world domains. See [14] for further detail. 4 Related Work and Conclusion Several activity models have been proposed <ref> [5, 4, 19] </ref> to support declarative specification of control flows within activities. Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities. <p> Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model <ref> [19] </ref> achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. <p> Features of long running activities [5, 4] include an automatic compensation capability and the use of ECA-rules for monitoring activities. The cooperative model [19] achieves cooperation through controlled data exchanges in private workspaces and controlled sharing of a common database among users. Although previous activity models (e.g., <ref> [5, 4, 19] </ref>) and workflow systems (e.g., [9, 10, 15]) have been successful in capturing the business processes, they have limitations in the prediction of correctness of concurrent activities.
Reference: [20] <author> J. Wasch and A. Reuter. </author> <title> The contract model. </title> <booktitle> In Elmagarmid [7], </booktitle> <pages> pages 219-264, </pages> <note> Chapter 7, </note> <year> 1992. </year>
Reference-contexts: Moreover, very few activity models or workflow systems proposed so far, to our knowledge, provide the adequate support for dynamic split and join of activities of deeply nested structures, ensuring the correctness of resulting activities. A number of extended transaction models (ETMs) <ref> [6, 7, 8, 1, 16, 17, 18, 20] </ref> have been proposed, each targeting at a particular subset of the whole spectrum of interactions possible in advanced application environments. Therefore, an ETM alone is not sufficient for organizing complex cooperative activities that may require the whole spectrum of interactions [3].
Reference: [21] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> A practical method to implement the restructuring of transactional activities. </title> <type> Technical Report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> July, </month> <year> 1997. </year>
Reference-contexts: On the practical side, we are looking into possibilities of building value-added adapters to support TAM on top of existing on-line transaction processing systems <ref> [2, 21] </ref> or other activity-based operational systems.
References-found: 21

