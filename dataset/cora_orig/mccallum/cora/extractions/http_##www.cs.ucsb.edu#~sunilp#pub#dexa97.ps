URL: http://www.cs.ucsb.edu/~sunilp/pub/dexa97.ps
Refering-URL: http://www.cs.ucsb.edu/~sunilp/tertiary.html
Root-URL: http://www.cs.ucsb.edu
Title: Scheduling Tertiary I/O in Database Applications  
Author: Sunil Prabhakar Divyakant Agrawal Amr El Abbadi Ambuj Singh 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California  
Abstract: We study the problem of scheduling I/O requests for tertiary storage libraries to improve performance. The focus is on scheduling policies that process all requests on a loaded medium before unloading it. For single drive settings an efficient algorithm that produces optimal schedules is developed. For multiple drives the problem is shown to be NP-Complete. Efficient and effective heuristics are presented for the multiple drives case. The scheduling policies developed achieve significant performance gains over more naive first come first server policies. The study is general enough to be applicable to any storage library handling removable media, such as tapes or optical disks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Andrews, M. A. Bender, and L. Zhang. </author> <title> New algorithms for the disk scheduling problem. </title> <booktitle> In Foundations of Computer Science, </booktitle> <year> 1996. </year>
Reference-contexts: Further, it can be assumed that these requests arrive together, and thus the problem can be viewed as off-line scheduling with requests arriving together rather than online scheduling with requests arriving continuously. This technique has also been used for studying disk scheduling policies <ref> [1] </ref>.
Reference: [2] <author> EXABYTE. </author> <title> Products. </title> <address> http://www.Exabyte.CO M:80/Products/, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: The values of the model parameters used for the experiments are shown in Table 1. These are based on the Exabyte EXB-480 Tape Library configured with Exabyte EXB Mammoth drives <ref> [2] </ref>. 5.2 Validation of Full Medium scheduling In order to validate our hypothesis that Full Medium scheduling is beneficial, we conducted experiments to compare the performance of variants of the naive First Come First Serve (FCFS) policy. Three versions of FCFS algorithms were examined.
Reference: [3] <author> B. K. Hillyer and A. Silberschatz. </author> <title> Random I/O scheduling in online tertiary storage. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <address> Canada, </address> <year> 1996. </year>
Reference-contexts: However, this is not the case when considering the average waiting time, as in our problem. Recent work on tape scheduling <ref> [3, 4] </ref> has studied efficient processing schedules for I/O requests for single tapes. In [3], Hillyer and Silberschatz have analyzed algorithms for scheduling batched requests for a single serpentine tape that is loaded on the drive. Li and Orji [4] have studied efficient scheduling policies for linear tapes. <p> However, this is not the case when considering the average waiting time, as in our problem. Recent work on tape scheduling [3, 4] has studied efficient processing schedules for I/O requests for single tapes. In <ref> [3] </ref>, Hillyer and Silberschatz have analyzed algorithms for scheduling batched requests for a single serpentine tape that is loaded on the drive. Li and Orji [4] have studied efficient scheduling policies for linear tapes. Both these studies do not consider scheduling requests for more than one medium. <p> This order can be as simple as the order of the block numbers for linear tapes or more complex such as those suggested by Hillyer and Silberschatz in <ref> [3] </ref> for serpentine tapes or any disk scheduling policy for optical disks. For medium scheduling it is necessary only to be able to determine the seek and transfer times for each request.
Reference: [4] <author> J. Li and C. Orji. </author> <title> I/O scheduling in tape-based tertiary systems. </title> <journal> Journal of Mathematical Modelling and Scientific Computing, </journal> <volume> 6, </volume> <year> 1996. </year>
Reference-contexts: However, this is not the case when considering the average waiting time, as in our problem. Recent work on tape scheduling <ref> [3, 4] </ref> has studied efficient processing schedules for I/O requests for single tapes. In [3], Hillyer and Silberschatz have analyzed algorithms for scheduling batched requests for a single serpentine tape that is loaded on the drive. Li and Orji [4] have studied efficient scheduling policies for linear tapes. <p> Recent work on tape scheduling [3, 4] has studied efficient processing schedules for I/O requests for single tapes. In [3], Hillyer and Silberschatz have analyzed algorithms for scheduling batched requests for a single serpentine tape that is loaded on the drive. Li and Orji <ref> [4] </ref> have studied efficient scheduling policies for linear tapes. Both these studies do not consider scheduling requests for more than one medium. Work has also been done on optimizing the performance of relational database management systems that incorporate tertiary storage [7, 12].
Reference: [5] <author> R. Moore. </author> <title> Private Communication, </title> <year> 1996. </year>
Reference-contexts: It is interesting to note that despite the inefficiency of the naive FCFS policy, it is used in commercial systems <ref> [5] </ref>. 6 Conclusion We have investigated the problem of efficient I/O scheduling for tertiary libraries. The focus of the study has been on scheduling policies that do not switch media before servicing all requests for the loaded medium, (Full Medium scheduling policies).
Reference: [6] <author> T. E. Morton and D. W. Pentico. </author> <title> Heuristic Scheduling Systems with applications to Production Systems and Project Management. </title> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1993. </year>
Reference-contexts: It is assumed that requests do not span more than one medium. Such requests can be broken into multiple independent requests for single media. The problem of task or job scheduling has been extensively studied in the literature <ref> [6, 8] </ref>. The problem of robotic library scheduling however, is not addressed by any of the existing studies. If the optimization function considered is the makespan or total time to service all requests, then the scheduling problem is very similar to the well known Traveling Salesperson Problem.
Reference: [7] <author> J. Myllymaki and M. Livny. </author> <title> Disk-tape joins: Synchronizing disk and tape access. </title> <booktitle> In Joint International Conference on Measurement and Modeling of Com-puterSystems. SIGMETRICS '95/PERFORMANCE '95, </booktitle> <pages> pages 279-90, </pages> <address> Ottawa, Canada, </address> <year> 1995. </year>
Reference-contexts: Li and Orji [4] have studied efficient scheduling policies for linear tapes. Both these studies do not consider scheduling requests for more than one medium. Work has also been done on optimizing the performance of relational database management systems that incorporate tertiary storage <ref> [7, 12] </ref>. It has been shown that I/O traffic is bursty [11], i.e. a large number of requests arrive together followed by a long period during which no more requests arrive. Under these settings, the scheduling problem can be simplified by considering the requests in each burst independently.
Reference: [8] <author> M. Pinedo. </author> <title> Scheduling Theory, </title> <booktitle> Algorithms and Systems. Prentice-Hall International Series in Industrial and Systems Engineering. </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1995. </year>
Reference-contexts: Note that there are many options for the choice of the optimization function <ref> [8] </ref>. We have chosen the average waiting time because the major concern for tertiary library performance is the high access latency. Thus reducing the latency (waiting time) seen by each request is important. It is assumed that requests do not span more than one medium. <p> It is assumed that requests do not span more than one medium. Such requests can be broken into multiple independent requests for single media. The problem of task or job scheduling has been extensively studied in the literature <ref> [6, 8] </ref>. The problem of robotic library scheduling however, is not addressed by any of the existing studies. If the optimization function considered is the makespan or total time to service all requests, then the scheduling problem is very similar to the well known Traveling Salesperson Problem. <p> An analogous algorithm for the minimum weighted completion time problem (M W CT ) is guaranteed to produce a solution that is within (1+ p 2)=2 (approximately within 20%) of the optimal <ref> [8] </ref>. This bound does not necessarily hold for the multiple drive problem due to the other constant factors in the cost. Given its good performance guarantee for the M W CT problem, we evaluated this algorithm for the multiple drive problem.
Reference: [9] <author> S. Prabhakar, D. Agrawal, and A. El Abbadi. </author> <title> Impact of media exchanges on robotic libraries. </title> <type> Technical Report TRCS97-07, </type> <institution> Dept. of Computer Science, Univ. of Calilfornia, Santa Barbara, </institution> <year> 1997. </year> <note> http://www.cs.ucsb.edu/TRs /TRCS97-07.ps. </note>
Reference-contexts: The second, which we call Partial Medium scheduling, considers schedules that may unload a medium without servicing all the requests for the medium and then reloading the same medium to service the remaining requests after servicing requests on other media. In <ref> [9] </ref>, we show that minimal gains are achieved by allowing extra media switching. In this paper we perform a complete study of the Full Medium scheduling problem. 3 Scheduling on a single drive We begin by studying the problem of Full Medium scheduling for a single drive.
Reference: [10] <author> S. Prabhakar, D. Agrawal, A. El Abbadi, and A. Singh. </author> <title> Efficient I/O scheduling in tertiary libraries. </title> <type> Technical Report TRCS96-26, </type> <institution> Dept. of Computer Science, Univ. of Calilfornia, Santa Barbara, </institution> <year> 1996. </year> <note> http://www.cs.ucsb.edu/TRs /TRCS96-26.ps. </note>
Reference-contexts: The proof of opti mality of this schedule is available in <ref> [10] </ref>. <p> Theorem 2 The problem of multidrive full medium scheduling is NP-Complete. The proof of Theorem 2 is presented in <ref> [10] </ref>. 5 Heuristics and simulation results In this section we present simulation results to validate the theoretical results discussed in the earlier sections. We begin by describing the experimental setup used for the simulations. Next the benefits of Full Medium scheduling are presented. <p> Figure 1 shows the performance of the three FCFS policies with the hot-cold request patterns. The results for the random distribution were very similar and are there 4 fore not shown <ref> [10] </ref>. It can be observed that the algo-rithms that service all requests for the loaded medium before those for other media (FCFS II and FCFS III) reduce the average waiting time for requests significantly. <p> Several experiments were conducted to evaluate the effectiveness of this heuristic. It was observed that the heuris tic performs very well and is within 1% of the optimal <ref> [10] </ref>. It should also be noted that OPT and Number perform better than FCFS III which does not reorder the media. For multiple drive scheduling no efficient optimal solution was found. Given the difficulty of scheduling on multiple drives, we look for approximate solutions that give reasonable performance.
Reference: [11] <author> C. Ruemmler and J. Wilkes. </author> <title> UNIX disk access patterns. </title> <booktitle> In USENIX, </booktitle> <pages> pages 405-420, </pages> <month> Winter </month> <year> 1993. </year>
Reference-contexts: Both these studies do not consider scheduling requests for more than one medium. Work has also been done on optimizing the performance of relational database management systems that incorporate tertiary storage [7, 12]. It has been shown that I/O traffic is bursty <ref> [11] </ref>, i.e. a large number of requests arrive together followed by a long period during which no more requests arrive. Under these settings, the scheduling problem can be simplified by considering the requests in each burst independently.
Reference: [12] <author> S. Sarawagi. </author> <title> Query processing in tertiary memory databases. </title> <booktitle> In Proc. of the 21st Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 585-596, </pages> <address> San Francisco, Cal-ifornia, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Li and Orji [4] have studied efficient scheduling policies for linear tapes. Both these studies do not consider scheduling requests for more than one medium. Work has also been done on optimizing the performance of relational database management systems that incorporate tertiary storage <ref> [7, 12] </ref>. It has been shown that I/O traffic is bursty [11], i.e. a large number of requests arrive together followed by a long period during which no more requests arrive. Under these settings, the scheduling problem can be simplified by considering the requests in each burst independently.
Reference: [13] <author> H. D. Schwetman. CSIM: </author> <title> A C-based, process-oriented simulation language. </title> <booktitle> In Proceedings of the 1986 Winter Simulation Conference, </booktitle> <pages> pages 387-396, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Next the benefits of Full Medium scheduling are presented. These are followed by the experiments with single and multiple drive settings. 5.1 Experimental setup The algorithms were evaluated using an event driven simulator for robotic libraries developed using CSIM <ref> [13] </ref>, a simulation library package. A simulation model of a general robotic library consisting of a variable number of drives, robot arms and media has been developed. The numbers of each of these is configurable.
References-found: 13

