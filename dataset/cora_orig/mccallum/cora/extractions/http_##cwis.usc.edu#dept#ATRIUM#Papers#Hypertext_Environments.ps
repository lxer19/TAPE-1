URL: http://cwis.usc.edu/dept/ATRIUM/Papers/Hypertext_Environments.ps
Refering-URL: http://cwis.usc.edu/dept/ATRIUM/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: 213-740-4782, 213-740-8494 (fax)  
Title: On the Power of Domain-Specific Hypertext Environments 1 focussing attention to a domaim-specific view of
Author: Walt Scacchi 
Note: answer by  along which the power of DSHE can be defined, experienced, and accumulated. I also address the organizational costs that may be borne to realize this power. I conclude  2  
Address: Los Angeles, CA 90089-1421  
Affiliation: ATRIUM Laboratory Information and Operations Management Dept. University of Southern California  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> L. Applegate, B. Konsynski, and J. Nunamaker. </editor> <title> A Group Decision Support System for Idea Generation and Issue Analysis in Organizational Planning. </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <address> MCC, Austin, TX, </address> <year> 1986, </year> <pages> pp. 16-34. </pages>
Reference-contexts: This may be especially true in domains where hypertext technology serves as a groupwork support system where such systems have been found to increase the participation of "writers" and increase the quality of decisions for action by "readers" <ref> [1] </ref>. Similarly, standardized content structures streamline the composition and binding of multi-contribution documents. In turn, interactive readers of such documents can acquire skills or processing mechanisms that exploit available structured (or restructurable) contents. <p> Enrichment of information processing skill and work: For some people, the use of DSHE for text searching, browsing, query processing and other actions intrinsically motivating or stimulating <ref> [1, 24] </ref>. When groups of these people use DSHE in their collective work, they may then learn how to more effectively coordinate the production of multi-author documents.
Reference: 2. <author> R. Balzer, T. Cheatham, and C. Green. </author> <title> "Software Technology in the 1990's: Using a New Paradigm". </title> <booktitle> Computer 16, </booktitle> <month> 11 </month> <year> (1983), </year> <month> 39-46. </month> <title> 13 For example, is a DSHE for computer-aided design of VLSI devices similar to that for software engineering? Would a DSHE for Banking be similar to one for Insurance? 16 </title>
Reference-contexts: Electronic mail and bulletin boards are increasingly essential, but usually lack knowledge of the software development products, processes, workplaces, and their interrelationships. However, a new generation of knowledge based software engineering technologies are beginning to appear that represent and manipulate these kinds of knowledge <ref> [2, 14] </ref>. Similarly, to increase the rate and quality of software system production, other technologies including intelligent message management systems [19, 24] and online catalogs of reusable software components [11] are being investigated.
Reference: 3. <author> S. Bendifallah and W. Scacchi. </author> <title> "Understanding Software Maintenance Work". </title> <journal> IEEE Trans. Software Engineering 13, </journal> <volume> 3 (1987), </volume> <pages> 311-323. </pages>
Reference-contexts: This choice is preferred since if the processing mechanisms are inappropriate for the application domain, they will fit poorly causing the system to be more troublesome to use, more costly to maintain, more likely to be resisted, and most likely to fail <ref> [20, 16, 3] </ref>. Thus, what makes a hypertext domain-specific is the codification and configuration of the application domain's agents, objects, attributes, relations, constraints, tasks/processes, transaction event rules, mechanisms, and resources into the information structures that are woven together to form a hypertext. 2.2. <p> This meta-task description is needed for organizing tasks, specifying their interrelationships, and assigning them to appropriate partitions. Meta-task descriptions must be maintained since the content and structure of task descriptions may evolve in open system workplaces in unexpected ways <ref> [18, 16, 17, 3] </ref>. Second, there are two classes of document tasks for which many subtypes can be identified. <p> Engineering tasks are performed by individual or small groups of engineers who create, manipulate, and interchange component documents assigned to them among other things <ref> [35, 3] </ref>. These tasks include analyzing system requirements, developing system functional specifications and designs, program development and test, maintaing existing systems, and so forth. We should recognize that the management and engineering tasks are interrelated in many ways. <p> But the complexity of system artifacts emerging from the development effort within an embedding environment requires that the successful performance of the management and engineering tasks will be interdependent <ref> [20, 35, 16, 17, 3] </ref>. All tasks, regardless of level of description, describe a potentially non-linear sequence of actions 10 These actions affect some concrete or abstract transformation of a software BT, form, composition or partition. <p> As before, the sequences of primitive actions are also non-linear [14]. Overall, primitive actions, actions, tasks, and meta-tasks must be articulated, aligned, and coalesced 10 In other places, these are called task chains <ref> [20, 16, 3] </ref>. 11 vis-a-vis one another when a system of software life cycle documents are produced. This can become an emerging, open-ended activity that we seek to structure, control, and close so that we can assure its consistency and completeness. <p> But on most projects this will be uncommon. 12 existing software object descriptions, informal conversations with others, or direct experience. One frequent problem here is that the existing descriptions (source code versus system design) are typically inconsistent, incomplete, or otherwise inadequate <ref> [3] </ref>. Thus, software maintainers are often at quite a disadvanage in keeping operational systems viable, unless there are automated maintenance support systems to assist them [27, 28], or else unless the available software object descriptions were engineered and maintained throughout the project up to this point. <p> As a result, the success of the maintainers tasks depends on their ability to accomodate or negotiate alternative definitions of their tasks or work arrangements <ref> [3] </ref>. As such, I can identify four classes of participants for CASE projects--managers, engineers, customers, and maintainers--which can be further decomposed into task specialtists that are interrelated and interdependent. <p> However, this could decrease "hidden" pockets of discretionary (slack) staff resources which are considered inefficient but are potentially very effective in mitigating workflow failures or breakdowns <ref> [3] </ref>. Second, the potential of hypertext systems as a coordination mechanism depends on the continuity of staff participation in its use.
Reference: 4. <author> J. Bolter and Michael Joyce. </author> <title> Hypertext and Creative Writing. </title> <booktitle> Proc. Hypertext '87, ACM, </booktitle> <institution> Univ. North Carolina, </institution> <year> 1987, </year> <pages> pp. 41-50. </pages>
Reference-contexts: The migration to the electronic medium removes the restrictions imposed by the linear printed medium and therefore allows new experiments in literary structure <ref> [4] </ref>. Such experiments might eventually include reflexive narrative forms such as "war stories" that tell of hypertext system malfunctions, their cooperative diagnosis, repair or modification (cf. [30]).
Reference: 5. <author> M. Chignell and R. Lacy. </author> <title> "Integrating Research and Instruction: Project Jefferson". </title> <publisher> Academic Computing 3, </publisher> <month> (September </month> <year> 1988), </year> <note> (to appear). </note>
Reference-contexts: publication process, writers also seek to access online reference services and catalog/archive holdings maintained by libraries and similar institutions. 7 The Jefferson Project at USC seeks to develop a writing environment for use by individual students in introductory humanties and social science courses that incorporate access to these library services <ref> [5] </ref>. Their purpose is to improve basic "freshman writing" skills of these students as well as increasing the students awareness and routine use of online library services for research and writing purposes.
Reference: 6. <author> A. Clement and C.C. Gottleib. </author> <title> "Evolution of an Organizational Interface: The New Business Department at a Large Insurance Firm". </title> <journal> ACM Trans. Office Info. Systems 5, </journal> <volume> 4 (1987), </volume> <pages> 328-339. </pages>
Reference-contexts: Insurance Policy Management It seems that the use of information systems in insurance organizations is one of the more widely studied forms of information work <ref> [20, 17, 10, 6] </ref>. Perhaps, this is because the insurance industry is one of the most computerized of all. This may be due to the fact that most insurance office work entails processing and verification of a high-volume of form-based transactions, such insurance policy premium payins and claim payouts. <p> Accordingly, the textual information or documents embed multiple simultaneous viewpoints for coding, review, and interpretation. This means that no piece of insurance form information is simple, nor will the organizational interfaces to the insurance information system be singular or simple <ref> [6, 24] </ref>. Similarly, this means that not all viewpoints will be represented completely in any one representation. Subsequently, insurance information systems must deal with multiple competing, possibly irreconcilable codings and data processing requirements across different actors [17].
Reference: 7. <author> J. Conklin. </author> <title> "Hypertext: An Introduction and Survey". </title> <booktitle> Computer 20, 9 (1987), </booktitle> <pages> 17-41. </pages>
Reference-contexts: Since then, interest in the development and use of hypertext systems has exploded. Conklin reviews most of what might be called the first generation of hypertext systems in his survey published in 1987 <ref> [7] </ref>. He identifies a dozen features that characterize the 18 hypertext systems he surveys. The Hypertext '87, Computer-Supported Cooperative Work, Office Information Systems, and Hypermedia '88 conferences have been showcases for the more recent progress in the research and development of hypertext systems.
Reference: 8. <author> G. Crane. </author> <title> From the Old to the New: Integrating Hypertext into Traditional Scholarship. </title> <booktitle> Proc. Hypertext '87, ACM, </booktitle> <institution> Univ. North Carolina, </institution> <year> 1987, </year> <pages> pp. 51-56. </pages>
Reference-contexts: Such studies of the History of Greek Religion, Aristotle, the Trojan Women and the like seek to identify and interrelate (link) key literary passages, rhetorical structures, and themata evolution found in the literature <ref> [8, 21] </ref>. Some of these studies further employ automated processing mechanisms such as concordance preparation, cross-reference distributions, and co-word/co-term frequency analysis for quantitative support [33]. Hypertext systems in use at Brown University have been demonstrated to provide highly interactive navigation, viewing, and linking mechanisms for classical studies applications. <p> Thus, Crane argues that hypertext systems for scholarly studies in the humanties require conventions for linking and classifying text passages within standardized text base formats before widespread adoption and routine use occur <ref> [8] </ref>. 3.2. Creative Writing and Interactive Fiction The development of computer-supported "writers' workbenches" seeks to employ a variety of automated mechanisms to support the production of literary works. The visionary potential of this emerging literary medium has been foretold by Ted Nelson [29] among others.
Reference: 9. <author> N. Delisle and M. Schwartz. </author> <title> "Contexts--A Partitioning Concept for Hypertext". </title> <journal> ACM Trans. Office Info. Systems 5, </journal> <volume> 2 (1987), </volume> <pages> 168-186. </pages>
Reference-contexts: Partitions for Projects and Teams: Partitions provide a structuring mechanism whereby collection of hierarchical forms of BTs can be composed, standardized, and shared by classes of users. For example, in the System Factory Project, partitions can organized by work group, project, or project site [36]. Partitions represent contexts <ref> [9] </ref> for structuring access to a hypertext of software object descriptions. Thus individual form or BT instances cannot appear in more than one partition class. However, people working within a partition may browse, link, or compose across multiple partitions.
Reference: 10. <author> R. Dunham, B. Johnson, G. McGonagill, M. Olsen, G. Weaver. </author> <title> Using a Computer Based Tool to Support Collaboration: A Field Experiment. </title> <booktitle> Proc. Conf. Computer-Supported Cooperative Work, ACM, </booktitle> <address> Austin, TX, </address> <year> 1986, </year> <pages> pp. 343-352. </pages>
Reference-contexts: Insurance Policy Management It seems that the use of information systems in insurance organizations is one of the more widely studied forms of information work <ref> [20, 17, 10, 6] </ref>. Perhaps, this is because the insurance industry is one of the most computerized of all. This may be due to the fact that most insurance office work entails processing and verification of a high-volume of form-based transactions, such insurance policy premium payins and claim payouts. <p> Resolving the conflicts and anomalies that subsequently emerge hinges on developing local closures to these information coordination problems. Elsewhere, Dunham and associates describe their experience in evaluating the experimental use of a coordination system 9 to discuss and seek (or force) resolution to similar kinds of problems <ref> [10] </ref>. 3.5.
Reference: 11. <author> W. Frakes and B. Nejmeh. </author> <title> Software Reuse through Information Systems. </title> <booktitle> Proc. COMPCON '87, IEEE Computer Society, </booktitle> <address> San Francisco, CA, </address> <year> 1987, </year> <pages> pp. 380-384. </pages>
Reference-contexts: Similarly, to increase the rate and quality of software system production, other technologies including intelligent message management systems [19, 24] and online catalogs of reusable software components <ref> [11] </ref> are being investigated. Finally, it is interesting to observe that the kinds of information structures and processing mechanisms used for a CASE hypertext are generally a superset of those appearing in the other domains described above.
Reference: 12. <author> M. Frisse. </author> <title> "Searching for Information in a Hypertext Medical Handbook". </title> <journal> Communications ACM 31, </journal> <volume> 7 (1988), </volume> <pages> 880-886. </pages>
Reference-contexts: Frisse describes an effort at Washington University to utilize information about the structure of a dynamic medical therapeutics textbook to propagate weights to neighboring texts to produce a ranked list of potential retrieval starting points for browsing <ref> [12] </ref>. Similarly, Rada and Martin seek to connect heterogeneous information from different medical information systems where terminological differences pervade the user community [32].
Reference: 13. <author> P.K. Garg and W. Scacchi. </author> <title> A Hypertext Environment for Managing Software Life Cycle Documents. </title> <booktitle> Proc. 21st. Hawaii Intern. Conf. Systems Sciences, </booktitle> <volume> Vol. 2, </volume> <publisher> IEEE Computer Society, </publisher> <address> Kona, Hawaii, </address> <year> 1988, </year> <pages> pp. 337-346. </pages>
Reference-contexts: Software systems are documented using fully structured descriptions (functional specifications, designs, and source code) whose syntax and semantics can be formally defined and automatically analyzed, and weakly structured descriptions (narrative requirements, user manuals, maintenance guides) whose content can text-processed and understood by people, but may be ambiguous and incomplete <ref> [13] </ref>. As such, automated mechanisms must be provided to identify and trace relationships across multiple semi-structured descriptions of the same system in order to configure, validate, and maintain the consistency of interrelated software descriptions as they evolve [27, 28]. <p> In the remainder of this section, I elaborate the information structures highlighted in the preceding paragraph based upon our experiences with a CASE hypertext environment in the System Factory Project at USC <ref> [36, 13, 14] </ref>. 4.1. CASE Hypertext Information Structures Links: Links represent typed relations that identify specific associations within or between software descriptions. Keywords and annotations are special kinds of links that are supported with predefined processing mechanisms. <p> Overall, as all links indicate some kind of relation, they can be stored and managed by a relational data base management system (rdbms) <ref> [13, 28] </ref>. In this way, linked software object descriptions can be indexed, browsed, and relationally queried through the mechanisms of the rdbms including query processors, report generators, pattern matchers, and fourth generation languages. Basic Templates: BTs denote semi-structured object descriptions of various length and substructure [24, 13]. <p> In this way, linked software object descriptions can be indexed, browsed, and relationally queried through the mechanisms of the rdbms including query processors, report generators, pattern matchers, and fourth generation languages. Basic Templates: BTs denote semi-structured object descriptions of various length and substructure <ref> [24, 13] </ref>. Semi-structured indicates that object descriptions are structured to some degree--that is, all objects possess descriptive attributes which characterize the structure, content, and purpose of the object. <p> However, the presence and formalization of these attributes determines the degree to which the descriptions can be parsed, analyzed, and interpreted by processing mechanisms such as language-directed editors, application generators, specification and design analyzers, and compilers to determine their consistency and completeness <ref> [13, 36] </ref>. Subsequently, BTs and forms provide a common, persistently typed substrate for representing and managing software descriptions in ways that facilitate engineering tool integration. Forms: In simple terms, forms represent aggregations of BTs. <p> Thus individual form or BT instances cannot appear in more than one partition class. However, people working within a partition may browse, link, or compose across multiple partitions. This supports the assignment of standard BT/form processing mechanisms to designated types of software descriptions <ref> [13, 14] </ref>. Similarly, it helps to minimize getting lost in a software information hyperspace since a user always works within a known context with defined forms and BTs. <p> The sequence of their invocation is mostly non-deterministic and non-procedural, but easily tracked by individual software engineers for small programs. However, if the programs being developed are large, built by teams developing multi-version program components according to an elaborate life cycle engineering methodology <ref> [36, 13] </ref>, then the program writing task becomes complex and costly if not well-coordinated. The description of software object/document processing tasks can be decomposed at many levels of detail and interrelationship. First, there must be support for specifying the task of task specification.
Reference: 14. <author> P.K. Garg and W. Scacchi. </author> <title> "The Design of an Intelligent Software Hypertext System". </title> <booktitle> IEEE Software 5, </booktitle> <year> (1988), </year> <note> to appear. </note>
Reference-contexts: Electronic mail and bulletin boards are increasingly essential, but usually lack knowledge of the software development products, processes, workplaces, and their interrelationships. However, a new generation of knowledge based software engineering technologies are beginning to appear that represent and manipulate these kinds of knowledge <ref> [2, 14] </ref>. Similarly, to increase the rate and quality of software system production, other technologies including intelligent message management systems [19, 24] and online catalogs of reusable software components [11] are being investigated. <p> In the remainder of this section, I elaborate the information structures highlighted in the preceding paragraph based upon our experiences with a CASE hypertext environment in the System Factory Project at USC <ref> [36, 13, 14] </ref>. 4.1. CASE Hypertext Information Structures Links: Links represent typed relations that identify specific associations within or between software descriptions. Keywords and annotations are special kinds of links that are supported with predefined processing mechanisms. <p> Thus individual form or BT instances cannot appear in more than one partition class. However, people working within a partition may browse, link, or compose across multiple partitions. This supports the assignment of standard BT/form processing mechanisms to designated types of software descriptions <ref> [13, 14] </ref>. Similarly, it helps to minimize getting lost in a software information hyperspace since a user always works within a known context with defined forms and BTs. <p> As before, the sequences of primitive actions are also non-linear <ref> [14] </ref>. Overall, primitive actions, actions, tasks, and meta-tasks must be articulated, aligned, and coalesced 10 In other places, these are called task chains [20, 16, 3]. 11 vis-a-vis one another when a system of software life cycle documents are produced. <p> Hence the need arises for viewing the creation and manipulation of CASE process tasks as structured descriptions that should be managed as domain-specific hypertext <ref> [14] </ref>. Organizational Settings for CASE: As previously noted, the workplaces for using domain-specific hypertext include people with different skills, processing mechanisms, and various shares of organizational resources. Thus, this information should also be described and linked into the CASE hypertext work environment. <p> However, the task-skill combinations are constrained by the limits of the organizational resources and automated processing mechanisms allocated to their interlinked project partitions. Thus, the structure, content, and flow of project participants' task-skill organization should be described and managed as evolving software object descriptions <ref> [14] </ref>. Last, we should also delineate the structure of processing mechanisms and organizational resources in terms of their compositions or class-subclass hierarchies as well as their links to other setting, process, and software object description structures. These are discussed elsewhere [36, 14]. 5. <p> Last, we should also delineate the structure of processing mechanisms and organizational resources in terms of their compositions or class-subclass hierarchies as well as their links to other setting, process, and software object description structures. These are discussed elsewhere <ref> [36, 14] </ref>. 5. The Power of Domain-Specific Hypertext Technology Given this examination of different DSHE, I can identify seven dimensions along which the potential power of DSHE can be realized. In addition, we should recognize the the acquisition, exercise, and accumlation of such power comes with varying costs. <p> use, and the workplaces where such documents and processes are articulated can be acquired through interaction with system users-- through system-directed queries, inferential analysis of gathered information, and reuse of analogous knowledge bases--then DSHE will move toward becoming active agents capable of producing and using hypertextual information content and structure <ref> [14] </ref>. Reinforcing biases and structured perspectives: Structured views of large bodies of textual information enable the the view developer to try to focus the attention of the reader to particular "points of interest" or connections within the text.
Reference: 15. <author> P.K. Garg. </author> <title> "Abstraction Mechanisms for Hypertext". </title> <journal> Communications ACM 31, </journal> <volume> 7 (1988), </volume> <pages> 862-870. </pages>
Reference-contexts: Last, the structure of information within the domain of CASE defined in these terms thus accomodates a rigorous formalization of the underlying abstract relationships that are embedded in a CASE hypertext <ref> [15] </ref>. In the remainder of this section, I elaborate the information structures highlighted in the preceding paragraph based upon our experiences with a CASE hypertext environment in the System Factory Project at USC [36, 13, 14]. 4.1.
Reference: 16. <author> L. Gasser. </author> <title> "The Integration of Computing and Routine Work". </title> <journal> ACM Trans. Office Info. Sys. </journal> <volume> 4, 3 (1986), </volume> <pages> 205-225. </pages>
Reference-contexts: This choice is preferred since if the processing mechanisms are inappropriate for the application domain, they will fit poorly causing the system to be more troublesome to use, more costly to maintain, more likely to be resisted, and most likely to fail <ref> [20, 16, 3] </ref>. Thus, what makes a hypertext domain-specific is the codification and configuration of the application domain's agents, objects, attributes, relations, constraints, tasks/processes, transaction event rules, mechanisms, and resources into the information structures that are woven together to form a hypertext. 2.2. <p> This meta-task description is needed for organizing tasks, specifying their interrelationships, and assigning them to appropriate partitions. Meta-task descriptions must be maintained since the content and structure of task descriptions may evolve in open system workplaces in unexpected ways <ref> [18, 16, 17, 3] </ref>. Second, there are two classes of document tasks for which many subtypes can be identified. <p> But the complexity of system artifacts emerging from the development effort within an embedding environment requires that the successful performance of the management and engineering tasks will be interdependent <ref> [20, 35, 16, 17, 3] </ref>. All tasks, regardless of level of description, describe a potentially non-linear sequence of actions 10 These actions affect some concrete or abstract transformation of a software BT, form, composition or partition. <p> As before, the sequences of primitive actions are also non-linear [14]. Overall, primitive actions, actions, tasks, and meta-tasks must be articulated, aligned, and coalesced 10 In other places, these are called task chains <ref> [20, 16, 3] </ref>. 11 vis-a-vis one another when a system of software life cycle documents are produced. This can become an emerging, open-ended activity that we seek to structure, control, and close so that we can assure its consistency and completeness.
Reference: 17. <author> E.M. </author> <title> Gerson and S.L. Star. "Analyzing Due Process in the Workplace". </title> <journal> ACM Trans. Office Info. Systems 4, </journal> <volume> 3 (1986), </volume> <pages> 257-270. </pages>
Reference-contexts: Insurance Policy Management It seems that the use of information systems in insurance organizations is one of the more widely studied forms of information work <ref> [20, 17, 10, 6] </ref>. Perhaps, this is because the insurance industry is one of the most computerized of all. This may be due to the fact that most insurance office work entails processing and verification of a high-volume of form-based transactions, such insurance policy premium payins and claim payouts. <p> Much of this information work is often considered routine, so that automated procedural scripts for information and document flow through the organization can be developed and operationalized [37]. However, insurance offices, like other information processing offices, are open systems <ref> [18, 17] </ref>. As an open system, various kinds of information forms are processed by different actors including clerks, actuaries, data base administrators, document controllers, portfolio investors, work supervisors, clients, insurance agents, etc. Accordingly, the textual information or documents embed multiple simultaneous viewpoints for coding, review, and interpretation. <p> Similarly, this means that not all viewpoints will be represented completely in any one representation. Subsequently, insurance information systems must deal with multiple competing, possibly irreconcilable codings and data processing requirements across different actors <ref> [17] </ref>. Resolving the conflicts and anomalies that subsequently emerge hinges on developing local closures to these information coordination problems. Elsewhere, Dunham and associates describe their experience in evaluating the experimental use of a coordination system 9 to discuss and seek (or force) resolution to similar kinds of problems [10]. 3.5. <p> This meta-task description is needed for organizing tasks, specifying their interrelationships, and assigning them to appropriate partitions. Meta-task descriptions must be maintained since the content and structure of task descriptions may evolve in open system workplaces in unexpected ways <ref> [18, 16, 17, 3] </ref>. Second, there are two classes of document tasks for which many subtypes can be identified. <p> But the complexity of system artifacts emerging from the development effort within an embedding environment requires that the successful performance of the management and engineering tasks will be interdependent <ref> [20, 35, 16, 17, 3] </ref>. All tasks, regardless of level of description, describe a potentially non-linear sequence of actions 10 These actions affect some concrete or abstract transformation of a software BT, form, composition or partition.
Reference: 18. <author> C. Hewitt. </author> <title> "Offices are Open Systems". </title> <journal> ACM Trans. Office Info. Sys. </journal> <volume> 4, 3 (1986), </volume> <pages> 271-285. </pages>
Reference-contexts: Much of this information work is often considered routine, so that automated procedural scripts for information and document flow through the organization can be developed and operationalized [37]. However, insurance offices, like other information processing offices, are open systems <ref> [18, 17] </ref>. As an open system, various kinds of information forms are processed by different actors including clerks, actuaries, data base administrators, document controllers, portfolio investors, work supervisors, clients, insurance agents, etc. Accordingly, the textual information or documents embed multiple simultaneous viewpoints for coding, review, and interpretation. <p> This meta-task description is needed for organizing tasks, specifying their interrelationships, and assigning them to appropriate partitions. Meta-task descriptions must be maintained since the content and structure of task descriptions may evolve in open system workplaces in unexpected ways <ref> [18, 16, 17, 3] </ref>. Second, there are two classes of document tasks for which many subtypes can be identified.
Reference: 19. <author> B.I. Kedzierski. </author> <title> Knowledge-Based Project Management and Communication Support in a System Development Environment. </title> <booktitle> Proc. 4th. Jerusalem Conf. Info. Techology, ACM, </booktitle> <year> 1984, </year> <pages> pp. 444-451. </pages>
Reference-contexts: However, a new generation of knowledge based software engineering technologies are beginning to appear that represent and manipulate these kinds of knowledge [2, 14]. Similarly, to increase the rate and quality of software system production, other technologies including intelligent message management systems <ref> [19, 24] </ref> and online catalogs of reusable software components [11] are being investigated. Finally, it is interesting to observe that the kinds of information structures and processing mechanisms used for a CASE hypertext are generally a superset of those appearing in the other domains described above.
Reference: 20. <author> R. Kling and W. Scacchi. </author> <title> "The Web of Computing: Computer Technology as Social Organization". </title> <booktitle> Advances in Computers 21 (1982), </booktitle> <pages> 1-90. </pages> <publisher> Academic Press, </publisher> <address> New York. </address>
Reference-contexts: This choice is preferred since if the processing mechanisms are inappropriate for the application domain, they will fit poorly causing the system to be more troublesome to use, more costly to maintain, more likely to be resisted, and most likely to fail <ref> [20, 16, 3] </ref>. Thus, what makes a hypertext domain-specific is the codification and configuration of the application domain's agents, objects, attributes, relations, constraints, tasks/processes, transaction event rules, mechanisms, and resources into the information structures that are woven together to form a hypertext. 2.2. <p> Insurance Policy Management It seems that the use of information systems in insurance organizations is one of the more widely studied forms of information work <ref> [20, 17, 10, 6] </ref>. Perhaps, this is because the insurance industry is one of the most computerized of all. This may be due to the fact that most insurance office work entails processing and verification of a high-volume of form-based transactions, such insurance policy premium payins and claim payouts. <p> But the complexity of system artifacts emerging from the development effort within an embedding environment requires that the successful performance of the management and engineering tasks will be interdependent <ref> [20, 35, 16, 17, 3] </ref>. All tasks, regardless of level of description, describe a potentially non-linear sequence of actions 10 These actions affect some concrete or abstract transformation of a software BT, form, composition or partition. <p> As before, the sequences of primitive actions are also non-linear [14]. Overall, primitive actions, actions, tasks, and meta-tasks must be articulated, aligned, and coalesced 10 In other places, these are called task chains <ref> [20, 16, 3] </ref>. 11 vis-a-vis one another when a system of software life cycle documents are produced. This can become an emerging, open-ended activity that we seek to structure, control, and close so that we can assure its consistency and completeness. <p> In addition, we should recognize the the acquisition, exercise, and accumlation of such power comes with varying costs. Similarly, we recognize that it is often the case for information systems that their benefits are overestimated, while their costs are underestimated <ref> [20] </ref>. Thus, I turn to examine these benefits and costs. Productivity enhancement: DSHE pose many opportunities for enhancing the productivity of their users in different domains. For example, DSHE support explicit articulation of an application domain in terms of hypertext content structures. <p> Unless these requirements are adequately satisfied and sustained, then the power of DSHE wiil not be realized to its full potential. Thus, I refer to these organizational requirements as the hypertext package (cf. <ref> [20] </ref>). The potential power of DSHE comes at a price. The cost can be expressed or evaluated in terms of the technological and social resources that get consumed, allocated, or displaced to accomodate the use of DSHE.
Reference: 21. <author> G. Landow. </author> <title> Relationally Encoded Links and the Rhetoric of Hypertext. </title> <booktitle> Proc. Hypertext '87, ACM, </booktitle> <institution> Univ. North Carolina, </institution> <year> 1987, </year> <pages> pp. 331-344. </pages>
Reference-contexts: Such studies of the History of Greek Religion, Aristotle, the Trojan Women and the like seek to identify and interrelate (link) key literary passages, rhetorical structures, and themata evolution found in the literature <ref> [8, 21] </ref>. Some of these studies further employ automated processing mechanisms such as concordance preparation, cross-reference distributions, and co-word/co-term frequency analysis for quantitative support [33]. Hypertext systems in use at Brown University have been demonstrated to provide highly interactive navigation, viewing, and linking mechanisms for classical studies applications.
Reference: 22. <author> D. Lenat, M. Prakash, and M. Shepard. </author> <title> "CYC: Using Common Sense Knowledge to Oversome Brittleness and Knowledge Acquisition Bottlenecks". </title> <journal> AI Magazine VI, </journal> <volume> 4 (1986), </volume> <pages> 65-85. </pages>
Reference-contexts: At MCC in Austin, the CYC project headed by Doug Lenat seeks to develop a large-scale intelligent system with encyclopedic knowledge <ref> [22] </ref>. Their plan is to carefully represent approximately 400 articles from a one-volume desk encyclopedia, as well as a number of hueristics for interpreting this knowledge within the same knowledge hypertext base.
Reference: 23. <author> B. Lewis and J. Hodges. </author> <title> Shared Books: Collaborative Publication for an Office Information System. </title> <booktitle> Proc. Conf. Office Info. Systems, ACM, </booktitle> <address> Palo Alto, CA, </address> <year> 1988, </year> <pages> pp. 197-204. 17 </pages>
Reference-contexts: The degree and extent of editorial staff participation will vary depending on the type of periodical--archival journal, magazine, newsletter, newspaper, or electronic data base. The primary functions of journal or book publication activity include (a) manuscript storage and retrieval, (b) document binding, and (c) job management <ref> [23] </ref>. The document storage and retrieval system must manage all information necessary to produce the document. This includes publication style rules (standard document format markup), spelling dictionaries, contracts, specifications, production schedules, and accounting data.
Reference: 24. <author> T. Malone, K. Grant, K. Lai, R. Rao, and D. Rosenblitt. </author> <title> "Semi-structured Messages are Suprisingly Useful for Computer-Supported Coordination". </title> <journal> ACM Trans. Office Info. Systems 5, </journal> <volume> 2 (1987), </volume> <pages> 115-131. </pages>
Reference-contexts: Accordingly, the textual information or documents embed multiple simultaneous viewpoints for coding, review, and interpretation. This means that no piece of insurance form information is simple, nor will the organizational interfaces to the insurance information system be singular or simple <ref> [6, 24] </ref>. Similarly, this means that not all viewpoints will be represented completely in any one representation. Subsequently, insurance information systems must deal with multiple competing, possibly irreconcilable codings and data processing requirements across different actors [17]. <p> However, a new generation of knowledge based software engineering technologies are beginning to appear that represent and manipulate these kinds of knowledge [2, 14]. Similarly, to increase the rate and quality of software system production, other technologies including intelligent message management systems <ref> [19, 24] </ref> and online catalogs of reusable software components [11] are being investigated. Finally, it is interesting to observe that the kinds of information structures and processing mechanisms used for a CASE hypertext are generally a superset of those appearing in the other domains described above. <p> In this way, linked software object descriptions can be indexed, browsed, and relationally queried through the mechanisms of the rdbms including query processors, report generators, pattern matchers, and fourth generation languages. Basic Templates: BTs denote semi-structured object descriptions of various length and substructure <ref> [24, 13] </ref>. Semi-structured indicates that object descriptions are structured to some degree--that is, all objects possess descriptive attributes which characterize the structure, content, and purpose of the object. <p> Enrichment of information processing skill and work: For some people, the use of DSHE for text searching, browsing, query processing and other actions intrinsically motivating or stimulating <ref> [1, 24] </ref>. When groups of these people use DSHE in their collective work, they may then learn how to more effectively coordinate the production of multi-author documents.
Reference: 25. <author> G. Marchionini and B. Schneiderman. </author> <title> "Finding Facts vs. Browsing Knowledge in Hypertext Systems". </title> <booktitle> Computer 21, 1 (1988), </booktitle> <pages> 70-80. </pages>
Reference-contexts: He employed a version of Grolier`s Electronic Encyclopedia 6 to demonstrate the basic concepts, mechanisms, and potential of an electronic encyclopedia. In another effort, elementary school students using the Hyperties system from the University of Maryland <ref> [25] </ref>, searched the Grolier's hypertextual encyclopedia to locate information with queries formed with interest words and Boolean connectives (AND, OR, NOT).
Reference: 26. <author> G. Marchionini. </author> <title> "Information-Seeking Strategies of Novices Using a Full-Text Electronic Encyclopedia". </title> <journal> J. Am. Society Info. </journal> <note> Sciences , (1988), </note> . 
Reference-contexts: An accompanying empirical study demonstrated the children's tendency to use low cognitive load browsing strategies <ref> [26] </ref>; that is, the students did not (or were not able to) put much effort into forming succinct queries for finding the information they sought. But user query retrievals in Hyperties are staged as alphabetically sorted lists of article titles within the proximity of the query fragment.
Reference: 27. <author> K. Narayanaswamy and W. Scacchi. </author> <title> "Maintaining Configurations of Evolving Software Systems". </title> <journal> IEEE Trans. Soft. Engr. </journal> <volume> 13, 3 (1987), </volume> <pages> 324-334. </pages>
Reference-contexts: As such, automated mechanisms must be provided to identify and trace relationships across multiple semi-structured descriptions of the same system in order to configure, validate, and maintain the consistency of interrelated software descriptions as they evolve <ref> [27, 28] </ref>. Large software engineering projects produce encyclopedic volumes of semi-structured and interrelated descriptions. As such, the production of system life cycle documentation can represent a substantial fraction of the system's development cost. <p> In multi-authored documents such as large software systems, this is a particularly useful feature that facilitates coordination and project status monitoring. Similarly, compositions allow linked software descriptions to be managed, viewed, or evolved in ways that approach the rigors of software configuration management <ref> [27, 28] </ref>. Partitions for Projects and Teams: Partitions provide a structuring mechanism whereby collection of hierarchical forms of BTs can be composed, standardized, and shared by classes of users. For example, in the System Factory Project, partitions can organized by work group, project, or project site [36]. <p> One frequent problem here is that the existing descriptions (source code versus system design) are typically inconsistent, incomplete, or otherwise inadequate [3]. Thus, software maintainers are often at quite a disadvanage in keeping operational systems viable, unless there are automated maintenance support systems to assist them <ref> [27, 28] </ref>, or else unless the available software object descriptions were engineered and maintained throughout the project up to this point. As a result, the success of the maintainers tasks depends on their ability to accomodate or negotiate alternative definitions of their tasks or work arrangements [3].
Reference: 28. <author> K. Narayanaswamy and W. Scacchi. </author> <title> "A Database Foundation to Support Software System Evolution". </title> <editor> J. </editor> <booktitle> Systems and Software 7 (1987), </booktitle> <pages> 37-49. </pages>
Reference-contexts: As such, automated mechanisms must be provided to identify and trace relationships across multiple semi-structured descriptions of the same system in order to configure, validate, and maintain the consistency of interrelated software descriptions as they evolve <ref> [27, 28] </ref>. Large software engineering projects produce encyclopedic volumes of semi-structured and interrelated descriptions. As such, the production of system life cycle documentation can represent a substantial fraction of the system's development cost. <p> Overall, as all links indicate some kind of relation, they can be stored and managed by a relational data base management system (rdbms) <ref> [13, 28] </ref>. In this way, linked software object descriptions can be indexed, browsed, and relationally queried through the mechanisms of the rdbms including query processors, report generators, pattern matchers, and fourth generation languages. Basic Templates: BTs denote semi-structured object descriptions of various length and substructure [24, 13]. <p> In multi-authored documents such as large software systems, this is a particularly useful feature that facilitates coordination and project status monitoring. Similarly, compositions allow linked software descriptions to be managed, viewed, or evolved in ways that approach the rigors of software configuration management <ref> [27, 28] </ref>. Partitions for Projects and Teams: Partitions provide a structuring mechanism whereby collection of hierarchical forms of BTs can be composed, standardized, and shared by classes of users. For example, in the System Factory Project, partitions can organized by work group, project, or project site [36]. <p> One frequent problem here is that the existing descriptions (source code versus system design) are typically inconsistent, incomplete, or otherwise inadequate [3]. Thus, software maintainers are often at quite a disadvanage in keeping operational systems viable, unless there are automated maintenance support systems to assist them <ref> [27, 28] </ref>, or else unless the available software object descriptions were engineered and maintained throughout the project up to this point. As a result, the success of the maintainers tasks depends on their ability to accomodate or negotiate alternative definitions of their tasks or work arrangements [3].
Reference: 29. <author> T. Nelson. </author> <title> Literary Machines. (available from the author), </title> <year> 1981. </year>
Reference-contexts: Creative Writing and Interactive Fiction The development of computer-supported "writers' workbenches" seeks to employ a variety of automated mechanisms to support the production of literary works. The visionary potential of this emerging literary medium has been foretold by Ted Nelson <ref> [29] </ref> among others. The basic idea is to combine conventional text processing systems--text editors, outline processors, online dictionaries and thesauri, spelling checkers, document formatters, page layout utilities, and the like--with hypertext mechanisms similar to those used for literary studies to create a new electronic literature.
Reference: 30. <author> J. Orr. </author> <title> Narratives at Work: Story Telling as Cooperative Diagnostic Activity. </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <address> MCC, Austin, TX, </address> <year> 1986, </year> <pages> pp. 62-72. </pages>
Reference-contexts: The migration to the electronic medium removes the restrictions imposed by the linear printed medium and therefore allows new experiments in literary structure [4]. Such experiments might eventually include reflexive narrative forms such as "war stories" that tell of hypertext system malfunctions, their cooperative diagnosis, repair or modification (cf. <ref> [30] </ref>). This reflexive literature in turn might aid in constructing deeper understandings of how hypertexts are created, and how the supporting hypertext environment mitigates their evolution. 3.3. Journal and Book Publication Professional journals are often produced and disseminated at regular intervals.
Reference: 31. <author> M. Porter. </author> <title> Competitive Advantage. </title> <publisher> Free Press, </publisher> <year> 1985. </year>
Reference-contexts: Competitive advantage through technological innovation: Employing hypertext systems in particular application domains may realize a competitive advantage to its organizational users <ref> [31, 42] </ref>. For example, the use of new technologies in academic disciplines to study either established research problems in alternative ways or to open up new problem domains is a frequent subject of scholarly research publication.
Reference: 32. <author> R. Rada and B. Martin. </author> <title> "Augmenting Thesauri for Information Systems". </title> <journal> ACM Trans. Office Info. Systems 5, </journal> <volume> 4 (1987), </volume> <pages> 378-392. </pages>
Reference-contexts: Similarly, Rada and Martin seek to connect heterogeneous information from different medical information systems where terminological differences pervade the user community <ref> [32] </ref>. Accordingly, they discuss their experience in connecting diagnosis and treatment information, patient records, and current medical bibliographies through augmenting and merging the concept thesauri used in each system for more effective medical information search and retrieval.
Reference: 33. <author> D. Raymond and F. Tompa. </author> <title> "Hypertext and the New Oxford English Dictionary". </title> <journal> Communications ACM 31, </journal> <volume> 7 (1988), </volume> <pages> 871-879. </pages>
Reference-contexts: Some of these studies further employ automated processing mechanisms such as concordance preparation, cross-reference distributions, and co-word/co-term frequency analysis for quantitative support <ref> [33] </ref>. Hypertext systems in use at Brown University have been demonstrated to provide highly interactive navigation, viewing, and linking mechanisms for classical studies applications.
Reference: 34. <author> B.K. Reid. </author> <title> "USENET Cookbook: An Experiment in Electronic Publication". </title> <publisher> Electronic Publishing 1, </publisher> <month> 1 (May </month> <year> 1988), </year> . 
Reference-contexts: journals, documents for publication and dissemination are composed, formatted, submitted, revised, distributed, 8 The July 1988 issue of the COMMUNICATIONS OF THE ACM is one of the first professional journals serving the Computer Science community to be widely distributed as an electronic hypertext edition on diskettes. 6 and criticized online <ref> [34] </ref>. Electronic bulletin boards are the most widespread form of this embryonic literary medium. In addition, a small but growing number of book publication companies are beginning to establish electronic communication channels such as those for handling book manuscripts destined for printed production.
Reference: 35. <author> W. Scacchi. </author> <title> "Managing Software Engineering Projects: A Social Analysis". </title> <journal> IEEE Trans. Soft. Engr. </journal> <volume> SE-10, </volume> <month> 1 (January </month> <year> 1984), </year> <pages> 49-59. </pages>
Reference-contexts: processing mechanisms, scheduling and budgeting subsystem description development, monitoring project progress and productivity, acquiring and maintaining an adequate supply of staff and computing resources, assuring the quality of the integrated and validated final product document assembly, and redoing any of these when things breakdown, foul-up, or when external conditions dictate <ref> [35] </ref>. Engineering tasks are performed by individual or small groups of engineers who create, manipulate, and interchange component documents assigned to them among other things [35, 3]. These tasks include analyzing system requirements, developing system functional specifications and designs, program development and test, maintaing existing systems, and so forth. <p> Engineering tasks are performed by individual or small groups of engineers who create, manipulate, and interchange component documents assigned to them among other things <ref> [35, 3] </ref>. These tasks include analyzing system requirements, developing system functional specifications and designs, program development and test, maintaing existing systems, and so forth. We should recognize that the management and engineering tasks are interrelated in many ways. <p> But the complexity of system artifacts emerging from the development effort within an embedding environment requires that the successful performance of the management and engineering tasks will be interdependent <ref> [20, 35, 16, 17, 3] </ref>. All tasks, regardless of level of description, describe a potentially non-linear sequence of actions 10 These actions affect some concrete or abstract transformation of a software BT, form, composition or partition.
Reference: 36. <author> W. Scacchi. </author> <title> The USC System Factory Project. </title> <booktitle> Proc. Software Symposium '88, Japan Software Engineers Association, </booktitle> <address> Tokyo, Japan, </address> <year> 1988, </year> <pages> pp. 11-37. </pages>
Reference-contexts: The focus then shifts to describe the structure of information to evolve within a DSHE in terms of product, task, and setting information for the domain of computer-aided software engineering (CASE) as used in the System Factory Project at USC <ref> [36] </ref>. Together, these sections then set the final stage for a discussion of the power of DSHE. In particular, I identify seven ways the power of DSHE can be realized, followed by an examination of the costs that are borne in order to realize this power. 2. <p> In the remainder of this section, I elaborate the information structures highlighted in the preceding paragraph based upon our experiences with a CASE hypertext environment in the System Factory Project at USC <ref> [36, 13, 14] </ref>. 4.1. CASE Hypertext Information Structures Links: Links represent typed relations that identify specific associations within or between software descriptions. Keywords and annotations are special kinds of links that are supported with predefined processing mechanisms. <p> However, the presence and formalization of these attributes determines the degree to which the descriptions can be parsed, analyzed, and interpreted by processing mechanisms such as language-directed editors, application generators, specification and design analyzers, and compilers to determine their consistency and completeness <ref> [13, 36] </ref>. Subsequently, BTs and forms provide a common, persistently typed substrate for representing and managing software descriptions in ways that facilitate engineering tool integration. Forms: In simple terms, forms represent aggregations of BTs. <p> Partitions for Projects and Teams: Partitions provide a structuring mechanism whereby collection of hierarchical forms of BTs can be composed, standardized, and shared by classes of users. For example, in the System Factory Project, partitions can organized by work group, project, or project site <ref> [36] </ref>. Partitions represent contexts [9] for structuring access to a hypertext of software object descriptions. Thus individual form or BT instances cannot appear in more than one partition class. However, people working within a partition may browse, link, or compose across multiple partitions. <p> The sequence of their invocation is mostly non-deterministic and non-procedural, but easily tracked by individual software engineers for small programs. However, if the programs being developed are large, built by teams developing multi-version program components according to an elaborate life cycle engineering methodology <ref> [36, 13] </ref>, then the program writing task becomes complex and costly if not well-coordinated. The description of software object/document processing tasks can be decomposed at many levels of detail and interrelationship. First, there must be support for specifying the task of task specification. <p> Last, we should also delineate the structure of processing mechanisms and organizational resources in terms of their compositions or class-subclass hierarchies as well as their links to other setting, process, and software object description structures. These are discussed elsewhere <ref> [36, 14] </ref>. 5. The Power of Domain-Specific Hypertext Technology Given this examination of different DSHE, I can identify seven dimensions along which the potential power of DSHE can be realized. In addition, we should recognize the the acquisition, exercise, and accumlation of such power comes with varying costs.
Reference: 37. <author> A. Sen and L. Kerschberg. </author> <title> "Enterprise Modeling for Database Specification and Design". </title> <journal> Data and Knowledge Engineering 2, </journal> <volume> 1 (1987), </volume> <pages> 31-58. </pages>
Reference-contexts: Much of this information work is often considered routine, so that automated procedural scripts for information and document flow through the organization can be developed and operationalized <ref> [37] </ref>. However, insurance offices, like other information processing offices, are open systems [18, 17]. As an open system, various kinds of information forms are processed by different actors including clerks, actuaries, data base administrators, document controllers, portfolio investors, work supervisors, clients, insurance agents, etc.
Reference: 38. <author> R.F. Simmons. </author> <title> "A Text Knowledge Base from the AI Handbook". Info. </title> <booktitle> Processing and Management 23, </booktitle> <year> (1987), </year> <pages> 321-339. </pages>
Reference-contexts: At University of Texas in Austin, Simmons has taken the three-volume Handbook of Articifical Intelligence research survey, and augmented it with semantic networks that identify linked relations between concepts appearing in the text <ref> [38] </ref>. At MCC in Austin, the CYC project headed by Doug Lenat seeks to develop a large-scale intelligent system with encyclopedic knowledge [22].
Reference: 39. <author> J. Smith, S. Weiss and G. Ferguson. </author> <title> A Hypertext Writing Environment and its Cognitive Basis. </title> <booktitle> Proc. Hypertext '87, ACM, </booktitle> <institution> Univ. North Carolina, </institution> <year> 1987, </year> <pages> pp. 195-214. </pages>
Reference-contexts: An automated writing environment under development at University of North Carolina to support the technical writing needs of professionals who work within a network of computer workstations is an example effort along these lines <ref> [39] </ref>.
Reference: 40. <author> S. Weyer and A. Borning. </author> <title> "A Prototype Electronic Encyclopedia". </title> <journal> ACM Trans. Office Info. Sys. </journal> <volume> 3, 1 (1985), </volume> <pages> 63-88. </pages>
Reference-contexts: The user does not act as a writer, linker, or editor of these hypertexts. A number of example applications have appeared, and a sample set is described next. Weyer was among the first to describe to development of a prototype electronic encyclopedia for historical studies <ref> [40] </ref>. He employed a version of Grolier`s Electronic Encyclopedia 6 to demonstrate the basic concepts, mechanisms, and potential of an electronic encyclopedia.
Reference: 41. <author> T, Winograd and F. Flores. </author> <title> Understanding Computers and Cognition: A New Foundation for Design. </title> <publisher> Ablex, </publisher> <year> 1986. </year>
Reference-contexts: See <ref> [41] </ref> for additional details on coordination systems. 7 cycle--the requirements, functional specifications, designs, test plans, implementations, user manuals, and maintenance guides--for the system being developed. These documents often represent 5-10 times the volume of the source code.
Reference: 42. <author> C. Wiseman. </author> <title> Strategy and Computers: Information Systems as Competitive Weapons. Dow Jones-Irwin, 1986. i Table of Contents </title>
Reference-contexts: Competitive advantage through technological innovation: Employing hypertext systems in particular application domains may realize a competitive advantage to its organizational users <ref> [31, 42] </ref>. For example, the use of new technologies in academic disciplines to study either established research problems in alternative ways or to open up new problem domains is a frequent subject of scholarly research publication.
Reference: 1. <institution> Introduction 1 </institution>
Reference-contexts: This may be especially true in domains where hypertext technology serves as a groupwork support system where such systems have been found to increase the participation of "writers" and increase the quality of decisions for action by "readers" <ref> [1] </ref>. Similarly, standardized content structures streamline the composition and binding of multi-contribution documents. In turn, interactive readers of such documents can acquire skills or processing mechanisms that exploit available structured (or restructurable) contents. <p> Enrichment of information processing skill and work: For some people, the use of DSHE for text searching, browsing, query processing and other actions intrinsically motivating or stimulating <ref> [1, 24] </ref>. When groups of these people use DSHE in their collective work, they may then learn how to more effectively coordinate the production of multi-author documents.
Reference: 2. <author> Domain-Specific Hypertext Environments (DSHE) 1 2.1. </author> <title> Domain-Specific Hypertext 2 2.2. Hypertext Environments 2 </title>
Reference-contexts: Electronic mail and bulletin boards are increasingly essential, but usually lack knowledge of the software development products, processes, workplaces, and their interrelationships. However, a new generation of knowledge based software engineering technologies are beginning to appear that represent and manipulate these kinds of knowledge <ref> [2, 14] </ref>. Similarly, to increase the rate and quality of software system production, other technologies including intelligent message management systems [19, 24] and online catalogs of reusable software components [11] are being investigated.
Reference: 3. <institution> Application Domains for Hypertext Environments 2 3.1. Encyclopedic and Classical Studies 3 3.2. </institution> <note> Creative Writing and Interactive Fiction 4 3.3. Journal and Book Publication 5 3.4. </note> <institution> Insurance Policy Management 6 3.5. Computer-Aided Software Engineering 6 </institution>
Reference-contexts: This choice is preferred since if the processing mechanisms are inappropriate for the application domain, they will fit poorly causing the system to be more troublesome to use, more costly to maintain, more likely to be resisted, and most likely to fail <ref> [20, 16, 3] </ref>. Thus, what makes a hypertext domain-specific is the codification and configuration of the application domain's agents, objects, attributes, relations, constraints, tasks/processes, transaction event rules, mechanisms, and resources into the information structures that are woven together to form a hypertext. 2.2. <p> This meta-task description is needed for organizing tasks, specifying their interrelationships, and assigning them to appropriate partitions. Meta-task descriptions must be maintained since the content and structure of task descriptions may evolve in open system workplaces in unexpected ways <ref> [18, 16, 17, 3] </ref>. Second, there are two classes of document tasks for which many subtypes can be identified. <p> Engineering tasks are performed by individual or small groups of engineers who create, manipulate, and interchange component documents assigned to them among other things <ref> [35, 3] </ref>. These tasks include analyzing system requirements, developing system functional specifications and designs, program development and test, maintaing existing systems, and so forth. We should recognize that the management and engineering tasks are interrelated in many ways. <p> But the complexity of system artifacts emerging from the development effort within an embedding environment requires that the successful performance of the management and engineering tasks will be interdependent <ref> [20, 35, 16, 17, 3] </ref>. All tasks, regardless of level of description, describe a potentially non-linear sequence of actions 10 These actions affect some concrete or abstract transformation of a software BT, form, composition or partition. <p> As before, the sequences of primitive actions are also non-linear [14]. Overall, primitive actions, actions, tasks, and meta-tasks must be articulated, aligned, and coalesced 10 In other places, these are called task chains <ref> [20, 16, 3] </ref>. 11 vis-a-vis one another when a system of software life cycle documents are produced. This can become an emerging, open-ended activity that we seek to structure, control, and close so that we can assure its consistency and completeness. <p> But on most projects this will be uncommon. 12 existing software object descriptions, informal conversations with others, or direct experience. One frequent problem here is that the existing descriptions (source code versus system design) are typically inconsistent, incomplete, or otherwise inadequate <ref> [3] </ref>. Thus, software maintainers are often at quite a disadvanage in keeping operational systems viable, unless there are automated maintenance support systems to assist them [27, 28], or else unless the available software object descriptions were engineered and maintained throughout the project up to this point. <p> As a result, the success of the maintainers tasks depends on their ability to accomodate or negotiate alternative definitions of their tasks or work arrangements <ref> [3] </ref>. As such, I can identify four classes of participants for CASE projects--managers, engineers, customers, and maintainers--which can be further decomposed into task specialtists that are interrelated and interdependent. <p> However, this could decrease "hidden" pockets of discretionary (slack) staff resources which are considered inefficient but are potentially very effective in mitigating workflow failures or breakdowns <ref> [3] </ref>. Second, the potential of hypertext systems as a coordination mechanism depends on the continuity of staff participation in its use.
Reference: 4. <institution> The Structure of Information in CASE 7 4.1. </institution> <note> CASE Hypertext Information Structures 8 </note>
Reference-contexts: The migration to the electronic medium removes the restrictions imposed by the linear printed medium and therefore allows new experiments in literary structure <ref> [4] </ref>. Such experiments might eventually include reflexive narrative forms such as "war stories" that tell of hypertext system malfunctions, their cooperative diagnosis, repair or modification (cf. [30]).
Reference: 5. <institution> The Power of Domain-Specific Hypertext Technology 12 5.1. </institution> <note> The Cost of Power: The Hypertext Package 14 </note>
Reference-contexts: publication process, writers also seek to access online reference services and catalog/archive holdings maintained by libraries and similar institutions. 7 The Jefferson Project at USC seeks to develop a writing environment for use by individual students in introductory humanties and social science courses that incorporate access to these library services <ref> [5] </ref>. Their purpose is to improve basic "freshman writing" skills of these students as well as increasing the students awareness and routine use of online library services for research and writing purposes.
Reference: 6. <institution> Conclusions 15 </institution>
Reference-contexts: Insurance Policy Management It seems that the use of information systems in insurance organizations is one of the more widely studied forms of information work <ref> [20, 17, 10, 6] </ref>. Perhaps, this is because the insurance industry is one of the most computerized of all. This may be due to the fact that most insurance office work entails processing and verification of a high-volume of form-based transactions, such insurance policy premium payins and claim payouts. <p> Accordingly, the textual information or documents embed multiple simultaneous viewpoints for coding, review, and interpretation. This means that no piece of insurance form information is simple, nor will the organizational interfaces to the insurance information system be singular or simple <ref> [6, 24] </ref>. Similarly, this means that not all viewpoints will be represented completely in any one representation. Subsequently, insurance information systems must deal with multiple competing, possibly irreconcilable codings and data processing requirements across different actors [17].
Reference: 7. <institution> References 15 </institution>
Reference-contexts: Since then, interest in the development and use of hypertext systems has exploded. Conklin reviews most of what might be called the first generation of hypertext systems in his survey published in 1987 <ref> [7] </ref>. He identifies a dozen features that characterize the 18 hypertext systems he surveys. The Hypertext '87, Computer-Supported Cooperative Work, Office Information Systems, and Hypermedia '88 conferences have been showcases for the more recent progress in the research and development of hypertext systems.
References-found: 49

