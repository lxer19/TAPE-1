URL: http://www.cs.bu.edu/techreports/93-012-tra-responsive.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Title: CLEOPATRA Building Responsive Systems from Physically-correct Specifications system developers through the CLEOPATRA programming language. CLEOPATRA
Author: Azer Bestavros 
Note: The TRA model is presented to  This research was partially conducted while the author was at Harvard University and was partially supported by DARPA N00039-88C-0163.  
Address: Boston, MA 02215  
Affiliation: Department of Computer Science Boston University  
Abstract: Predictability the ability to foretell that an implementation will not violate a set of specified reliability and timeliness requirements is a crucial, highly desirable property of responsive embedded systems. This paper overviews a development methodology for responsive systems, which enhances predictability by eliminating potential hazards resulting from physically-unsound specifications. The backbone of our methodology is the Time-constrained Reactive Automaton (TRA) formalism, which adopts a fundamental notion of space and time that restricts expressiveness in a way that allows the specification of only reactive, spontaneous, and causal computation. Using the TRA model, unrealistic systems possessing properties such as clairvoyance, caprice, infinite capacity, or perfect timing cannot even be specified. We argue that this "ounce of prevention" at the specification level is likely to spare a lot of time and energy in the development cycle of responsive systems not to mention the elimination of potential hazards that would have gone, otherwise, unnoticed. 
Abstract-found: 1
Intro-found: 1
Reference: [Alur90] <author> Rajeev Alur, Costas Courcoubetis, and David Dill. </author> <title> "Model-checking for real-time systems." </title> <booktitle> In Proceedings of the 5th annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, Pensylvania, June 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This distinction between real time and perceived time is important when dealing with embedded applications where time properties are stated with respect to real time, but have to be preserved relying on perceived time. 2.2 Basic definitions We adopt a continuous model of time similar to that used in <ref> [Alur90, Lewi90] </ref>. We represent any point in time by a nonnegative real t 2 &lt;. Time intervals are defined by specifying their end-points which are drawn from the set of nonnegative rationals Q &lt;. A time interval is viewed as a traditional set over nonnegative real numbers.
Reference: [Best90a] <author> Azer Bestavros. </author> <title> "The IOTA: A model for real-time parallel computation." </title> <booktitle> In Proceedings of TAU'90: The 1990 ACM International Workshop on Timing issues in the Specification and Synthesis of Digital Systems, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: In Section 5, we conclude with current and future research directions. 1 A C-based Language for the Event-driven Object-oriented Prototyping of Asynchronous T ime-constrained Reactive Automata. 3 2 The TRA Model The TRA model has evolved from our earlier work in <ref> [Best90a] </ref> extending Lynch's IOA model [Lync88b, Lync88a] to suit embedded and time-constrained computation. 2.1 Novelties Previous studies in modeling real-time computing have focussed on adding the notion of time without regard to physical properties of the modeled systems. <p> This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in <ref> [Best90a] </ref>. Lynch and Vaandrager [Lync91] followed suit in their recent modification of the model proposed in [Tutt88]. In the TRA model we use system components to represent what can be termed as spacial locality. <p> Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [Lync88b, Tutt88, Best90a] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [Best90b] <author> Azer Bestavros. </author> <title> "TRA-based real-time executable specification using CLEOPATRA." </title> <booktitle> In Proceedings of the 10th Annual Rochester Forth Conference on Embedded Systems, </booktitle> <address> Rochester, NY, </address> <month> June </month> <year> 1990. </year> <month> (revised May </month> <year> 1991). </year>
Reference-contexts: Our experience with CLEOPATRA confirms its suitability as a vehicle for the specification and validation of many embedded and time-critical applications. In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers <ref> [Best91a, Best90c, Best90b] </ref>. A compiler that allows the execution of CLEOPATRA specifications has been developed [Best92], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [Best91b, Best91c].
Reference: [Best90c] <author> Azer Bestavros, James Clark, and Nicola Ferrier. </author> <title> "Management of sensori-motor activity in mobile robots." </title> <booktitle> In Proceedings of the 1990 IEEE International Conference on Robotics & Automation, </booktitle> <address> Cincinati, Ohio, May 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Our experience with CLEOPATRA confirms its suitability as a vehicle for the specification and validation of many embedded and time-critical applications. In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers <ref> [Best91a, Best90c, Best90b] </ref>. A compiler that allows the execution of CLEOPATRA specifications has been developed [Best92], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [Best91b, Best91c]. <p> We have used the CLEOPATRA compiler to simulate a variety of systems. In particular, we used it extensively to specify and analyze sensori-motor robotics applications <ref> [Best90c] </ref> and to simulate complex behaviors of autonomous creatures [Best91a]. Figure 7 shows the different stages involved in the compilation and execution of specifications written in CLEOPATRA.
Reference: [Best91a] <author> Azer Bestavros. </author> <title> "Planning for embedded systems: A real-time prospective." </title> <booktitle> In Proceedings of AIRTC-91: The 3rd IFAC Workshop on Artificial Intelligence in Real Time Control, Napa/Sonoma Region, </booktitle> <address> CA, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Our experience with CLEOPATRA confirms its suitability as a vehicle for the specification and validation of many embedded and time-critical applications. In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers <ref> [Best91a, Best90c, Best90b] </ref>. A compiler that allows the execution of CLEOPATRA specifications has been developed [Best92], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [Best91b, Best91c]. <p> We have used the CLEOPATRA compiler to simulate a variety of systems. In particular, we used it extensively to specify and analyze sensori-motor robotics applications [Best90c] and to simulate complex behaviors of autonomous creatures <ref> [Best91a] </ref>. Figure 7 shows the different stages involved in the compilation and execution of specifications written in CLEOPATRA.
Reference: [Best91b] <author> Azer Bestavros. </author> <title> "Specification and verification or real-time embedded systems using the Time-constrained Reactive Automata." </title> <booktitle> In Proceedings of the 12th IEEE Real-time Systems Symposium, </booktitle> <pages> pages 244-253, </pages> <address> San Antonio, Texas, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: A compiler that allows the execution of CLEOPATRA specifications has been developed [Best92], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism <ref> [Best91b, Best91c] </ref>. Using the TRA formalism, an embedded system is viewed as a set of asynchronously interacting automata (TRAs), each representing an autonomous system entity.
Reference: [Best91c] <author> Azer Bestavros. </author> <title> Time-constrained Reactive Automata: A novel development methodology for embedded real-time systems. </title> <type> PhD thesis, </type> <institution> Harvard University, Division of Applied Sciences (Department of Computer Science), Cambridge, Massachusetts, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: A compiler that allows the execution of CLEOPATRA specifications has been developed [Best92], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism <ref> [Best91b, Best91c] </ref>. Using the TRA formalism, an embedded system is viewed as a set of asynchronously interacting automata (TRAs), each representing an autonomous system entity. <p> In this section we examine such an operation, namely composition. Other operations (for example hiding and renaming) were presented in <ref> [Best91c] </ref>. The composition of a countable collection of compatible TRAs, fA i : i 2 Ig, is a new TRA A = A 0 fi A 1 fi : : : fi A i fi : : : = i2I A i . <p> A computational step of the composed TRA is necessarily a step of one of its components. Similarily the time-constrained causal relationships of the composed TRA are exactly those of the component TRAs. In <ref> [Best91c] </ref>, the formal construction of the sextuple representation of a composition is given. Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. <p> The behavior of a TRA object is described using TETs. TRA objects can be composed together to specify more complex TRAs. The correspondence between CLEOPATRA and the TRA formalism is straightforward. Every object in CLEOPATRA corresponds to a TRA sextuple. In <ref> [Best91c] </ref>, the construction of a TRA sextuple, given a CLEOPATRA object, is detailed. 7 Without loss of generality, we assume that TRA to be A 0 . 13 3.1 Classes and Objects A TRA object specification in CLEOPATRA consists of two components: a header and a body. <p> To avoid such a malignant behavior, the environment must wait for an acknowledgment ack () 12 or else, must wait for at least DLY MIN before signaling a new input. Such correctness (safety) conditions can be verified using TRA-based verification techniques <ref> [Best91c] </ref>. We argue that any finite implementation of a fifo object (discrete-event delay element) must have a finite capacity, which must not be exceeded for a correct behavior. Using CLEOPATRA, it is impossible to specify a fifo class that behaves correctly independent of its environment's behavior.
Reference: [Best92] <author> Azer Bestavros, Devora Reich, and Robert Popp. </author> <title> "Cleopatra compiler design and implementation." </title> <type> Technical Report TR-92-019, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers [Best91a, Best90c, Best90b]. A compiler that allows the execution of CLEOPATRA specifications has been developed <ref> [Best92] </ref>, and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [Best91b, Best91c]. Using the TRA formalism, an embedded system is viewed as a set of asynchronously interacting automata (TRAs), each representing an autonomous system entity.
Reference: [Burn90] <author> Alan Burns and Andy Wellings. </author> <title> Real-time systems and their programming languages. </title> <publisher> Addison Wesley Co. (International Computer Science Series), </publisher> <year> 1990. </year>
Reference-contexts: In addition to timeliness, embedded systems are also required to meet stringent reliability constraints, which are usually stated as behavioral safety and liveness invariants. For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [Stan88b, Burn90, Tilb91a, Tilb91b] </ref>. The absence of a unified suitable formal framework that addresses the aforementioned issues severely limits the usefulness of these studies. This situation is further exacerbated considering the range of disciplines employed in developing the various components of an embedded application.
Reference: [Chun90] <author> Jen-Yao Chung, Jane Liu, and Kwei-Jay Lin. </author> <title> "Scheduling periodic jobs that allow imprecise results." </title> <journal> IEEE Transaction on Computers, </journal> <volume> 19(9) </volume> <pages> 1156-1173, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: It can be enhanced by restricting expressiveness as was done in Real-Time Euclid [Klig86], by sacrificing accuracy as was done in the Flex system <ref> [Chun90] </ref>, or by abstracting segmented resources as was done in the Spring kernel [Stan89]. The TRA-development methodology we are advocating here introduces one more way of improving predictability, that of allowing only physically-sound specifications.
Reference: [Clar91] <author> James Clark, Nicola Ferrier, and Lei Wang. </author> <title> "A robotics system for manipulation using directed vision feedback." </title> <type> Internal report, </type> <institution> Robotics laboratory, Harvard University, </institution> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: The absence of a unified suitable formal framework that addresses the aforementioned issues severely limits the usefulness of these studies. This situation is further exacerbated considering the range of disciplines employed in developing the various components of an embedded application. For example, in a simple sensori-motor robotic application <ref> [Clar91] </ref>, algorithms from various disciplines like low-level imaging, active vision, tactile sensing, path planning, compliant motion control, and non-linear dynamics may be utilized [Fu87].
Reference: [Fu87] <author> K. S. Fu, R. C. Gonzalez, and C. S. G. Lee. </author> <title> Robotics: Control, </title> <booktitle> sensing, vision, and intelligence. </booktitle> <publisher> McGraw-Hill Book Company, </publisher> <year> 1987. </year>
Reference-contexts: For example, in a simple sensori-motor robotic application [Clar91], algorithms from various disciplines like low-level imaging, active vision, tactile sensing, path planning, compliant motion control, and non-linear dynamics may be utilized <ref> [Fu87] </ref>. Not only are these disciplines different in their abstractions and programming styles, but also they differ in their computational requirements, which range from single-board dedicated processors to massively parallel general-purpose computers. Current embedded systems are expensive to build and their properties are verified with ad hoc techniques [Stan88a].
Reference: [Hawk88] <author> Stephen W. Hawking. </author> <title> A brief history of Time: From the Big Bang to Black Holes. </title> <publisher> Bantam Books, </publisher> <month> April </month> <year> 1988. </year>
Reference-contexts: This spares our formalism from dealing with clairvoyant and capricious behaviors [Stua91]. Spontaneity is a notion closely related to causality. 2 A system is spontaneous if its output 2 Actually both spontaneity and causality are directly related to the past and future light cones of an event in space-time <ref> [Hawk88] </ref>. 4 actions at any given point in time t cannot depend on actions occuring at or after time t. In particular, if an output occurs simultaneously with (say) an input transition, the same output could have been produced without the simultaneous input transition [Sree90]. <p> Local events are under the TRA's control; they are time constrained, and could be disabled. 5 Such executions were called admissible in [Lync91] 6 This intuition is inspired from physical systems, where events are characterized and distinguishable by their time-space coordinates <ref> [Hawk88] </ref>. 9 Consider the time constraint i = ( i ; 0 i ; ffi i ; fi i ) 2 . i identifies a time-constrained causal relationship between the events signaled on i and those signaled on 0 i .
Reference: [Klig86] <author> Eugene Kligerman and Alexander Stoyenko. </author> <title> "Real-time Euclid: A language for reliable real-time systems." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(9) </volume> <pages> 941-949, </pages> <month> September </month> <year> 1986. </year> <month> 25 </month>
Reference-contexts: The performance of the simulator degrades considerably when extensive I/O and tracing operations are performed. 17 5 Conclusion Predictability can be enhanced in a variety of ways. It can be enhanced by restricting expressiveness as was done in Real-Time Euclid <ref> [Klig86] </ref>, by sacrificing accuracy as was done in the Flex system [Chun90], or by abstracting segmented resources as was done in the Spring kernel [Stan89]. The TRA-development methodology we are advocating here introduces one more way of improving predictability, that of allowing only physically-sound specifications.
Reference: [Lewi90] <author> Harry Lewis. </author> <title> "A logic of concrete time intervals." </title> <booktitle> In Proceedings of the 5th annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, PA, June 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This distinction between real time and perceived time is important when dealing with embedded applications where time properties are stated with respect to real time, but have to be preserved relying on perceived time. 2.2 Basic definitions We adopt a continuous model of time similar to that used in <ref> [Alur90, Lewi90] </ref>. We represent any point in time by a nonnegative real t 2 &lt;. Time intervals are defined by specifying their end-points which are drawn from the set of nonnegative rationals Q &lt;. A time interval is viewed as a traditional set over nonnegative real numbers.
Reference: [Lync88a] <author> Nancy Lynch and Kenneth Goldman. </author> <title> "6.852 distributed algorithms lecture notes: The I/O Automata." </title> <type> Technical report, </type> <institution> Laboratory of Computer Science, MIT, </institution> <address> Cambridge, MA, </address> <month> Fall </month> <year> 1988. </year>
Reference-contexts: In Section 5, we conclude with current and future research directions. 1 A C-based Language for the Event-driven Object-oriented Prototyping of Asynchronous T ime-constrained Reactive Automata. 3 2 The TRA Model The TRA model has evolved from our earlier work in [Best90a] extending Lynch's IOA model <ref> [Lync88b, Lync88a] </ref> to suit embedded and time-constrained computation. 2.1 Novelties Previous studies in modeling real-time computing have focussed on adding the notion of time without regard to physical properties of the modeled systems. This makes it possible to specify systems that do not abide by principles like causality and spontaneity.
Reference: [Lync88b] <author> Nancy Lynch and Mark Tuttle. </author> <title> "An introduction to Input/Output Automata." </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT, Cambridge, Massachusetts, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [Best91b, Best91c]. Using the TRA formalism, an embedded system is viewed as a set of asynchronously interacting automata (TRAs), each representing an autonomous system entity. TRAs are reactive in that they abide by Lynch's input enabling property <ref> [Lync88b] </ref>; they communicate by signaling events on their output channels and by reacting to events signaled on their input channels. The behavior of a TRA is governed by time-constrained causal relationships between computation-triggering events. The TRA model is compositional and allows only benign time, control, and computation non-determinism. <p> In Section 5, we conclude with current and future research directions. 1 A C-based Language for the Event-driven Object-oriented Prototyping of Asynchronous T ime-constrained Reactive Automata. 3 2 The TRA Model The TRA model has evolved from our earlier work in [Best90a] extending Lynch's IOA model <ref> [Lync88b, Lync88a] </ref> to suit embedded and time-constrained computation. 2.1 Novelties Previous studies in modeling real-time computing have focussed on adding the notion of time without regard to physical properties of the modeled systems. This makes it possible to specify systems that do not abide by principles like causality and spontaneity. <p> A system is reactive if it cannot block the occurence of events not under its control. This property is crucial for accurate and realistic modeling of embedded and real-time systems. A sufficient condition for reactivity is the input enabling property proposed in <ref> [Lync88b] </ref>. The TRA model is input enabled. It distinguishes clearly between environment-controlled actions, which cannot be restricted or constrained, and locally-controlled actions, which can be scheduled and disabled. <p> For the remainder of this paper, it will be assumed that any TRA is proper unless otherwise stated. The notion of system components we are presenting here is novel and entirely different from that used in untimed models to express fairness <ref> [Lync88b] </ref> by requiring that, in an infinite execution, each of the system's components gets infinitely many chances to perform its locally-controlled actions. In timed systems, the major concern is safe and not necessarily fair executions [Schn88]. <p> We follow an approach similar to that adopted in <ref> [Lync88b] </ref> by defining fi to be a behavior of a TRA A, if it consists of all the external events appearing in some execution e of A. We denote the set of all the possible behaviors of a TRA A by behs (A). <p> Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [Lync88b, Tutt88, Best90a] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [Lync91] <author> Nancy Lynch and Frits Vaandrager. </author> <title> "Forward and backward simulations for timing-based systems." Unpublished notes, </title> <institution> Massachusetts Institute of Technology Laboratory for Computer Science, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in [Best90a]. Lynch and Vaandrager <ref> [Lync91] </ref> followed suit in their recent modification of the model proposed in [Tutt88]. In the TRA model we use system components to represent what can be termed as spacial locality. <p> Input events are not under the TRA's control; they cannot be blocked or delayed. Local events are under the TRA's control; they are time constrained, and could be disabled. 5 Such executions were called admissible in <ref> [Lync91] </ref> 6 This intuition is inspired from physical systems, where events are characterized and distinguishable by their time-space coordinates [Hawk88]. 9 Consider the time constraint i = ( i ; 0 i ; ffi i ; fi i ) 2 . i identifies a time-constrained causal relationship between the events signaled
Reference: [Lyon89] <author> Damian Lyons and Michael Arbib. </author> <title> "A formal model of computation for sensory-based robotics." </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 5(3) </volume> <pages> 280-293, </pages> <year> 1989. </year>
Reference-contexts: Through appropriate composition, our model is capable of representing all of the composition operations in <ref> [Lyon89] </ref>. 3 CLEOPATRA: A TRA-based Specification Language In CLEOPATRA, systems are specified as interconnections of TRA objects. Each TRA object has a set of state variables and a set of channels.
Reference: [Schn88] <author> Fred Schneider. </author> <title> "Critical (of) issues in real-time systems: A position paper." </title> <type> Technical Report 88-914, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, NY, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: Not only are these disciplines different in their abstractions and programming styles, but also they differ in their computational requirements, which range from single-board dedicated processors to massively parallel general-purpose computers. Current embedded systems are expensive to build and their properties are verified with ad hoc techniques [Stan88a]. Schneider <ref> [Schn88] </ref> portrays the situation aptly by saying that "Unlike other engineering disciplines, our methods are not founded on science. Real-time systems are built one way or another because that was the way the `last one' was built. <p> In timed systems, the major concern is safe and not necessarily fair executions <ref> [Schn88] </ref>. Even if required, fairness can be enforced by treating it as a safety property; liveness properties can be handled in infinite execution by requiring time to grow unboundedly. 5 .
Reference: [Sree90] <author> Ramavarapu Sreenivas. </author> <title> Towards a system theory for interconnected Condition/Event systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: In particular, if an output occurs simultaneously with (say) an input transition, the same output could have been produced without the simultaneous input transition <ref> [Sree90] </ref>. Simultaneity is, thus, a mere coincidence; the output event could have occured spontaneously even if the input transition was delayed. The TRA model enforces spontaneity by requiring that simultaneously occuring events be independent; time has to necessarily advance to observe dependencies.
Reference: [Stan88a] <author> John Stankovic. </author> <title> "Misconceptions about real-time computing." </title> <booktitle> IEEE Computer, </booktitle> <month> October </month> <year> 1988. </year>
Reference-contexts: Not only are these disciplines different in their abstractions and programming styles, but also they differ in their computational requirements, which range from single-board dedicated processors to massively parallel general-purpose computers. Current embedded systems are expensive to build and their properties are verified with ad hoc techniques <ref> [Stan88a] </ref>. Schneider [Schn88] portrays the situation aptly by saying that "Unlike other engineering disciplines, our methods are not founded on science. Real-time systems are built one way or another because that was the way the `last one' was built.
Reference: [Stan88b] <author> John Stankovic and Krithi Ramamritham, </author> <title> editors. Hard Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: In addition to timeliness, embedded systems are also required to meet stringent reliability constraints, which are usually stated as behavioral safety and liveness invariants. For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [Stan88b, Burn90, Tilb91a, Tilb91b] </ref>. The absence of a unified suitable formal framework that addresses the aforementioned issues severely limits the usefulness of these studies. This situation is further exacerbated considering the range of disciplines employed in developing the various components of an embedded application.
Reference: [Stan89] <author> John Stankovic and Krithi Ramamritham. </author> <title> "The Spring Kernel: A new paradigm for real-time operating systems." </title> <journal> ACM Operating Systems Review, </journal> <volume> 23(3) </volume> <pages> 54-71, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: It can be enhanced by restricting expressiveness as was done in Real-Time Euclid [Klig86], by sacrificing accuracy as was done in the Flex system [Chun90], or by abstracting segmented resources as was done in the Spring kernel <ref> [Stan89] </ref>. The TRA-development methodology we are advocating here introduces one more way of improving predictability, that of allowing only physically-sound specifications. Pursuing the ideas presented in this paper will undoubtedly provide us with one more handle in our persistent quest for predictable systems.
Reference: [Stua91] <author> D.A. Stuart and P.C. Clements. "Clairvoyance, </author> <title> capricious timing faults, causality, and real-time specifications." </title> <booktitle> In Proceedings of the 12th IEEE Real-time Systems Symposium, </booktitle> <pages> pages 254-263, </pages> <address> San Antonio, Texas, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: In our work, a clear distinction is made between causality and dependency. An event occurs as a result of exactly one earlier event but may depend on many others as reflected in the state of the system. This spares our formalism from dealing with clairvoyant and capricious behaviors <ref> [Stua91] </ref>.
Reference: [Tilb91a] <author> Andre M. van Tilborg and Gary M. Koob, </author> <title> editors. Foundations of Real-Time Computing: Formal Specifications and Methods. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: In addition to timeliness, embedded systems are also required to meet stringent reliability constraints, which are usually stated as behavioral safety and liveness invariants. For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [Stan88b, Burn90, Tilb91a, Tilb91b] </ref>. The absence of a unified suitable formal framework that addresses the aforementioned issues severely limits the usefulness of these studies. This situation is further exacerbated considering the range of disciplines employed in developing the various components of an embedded application.
Reference: [Tilb91b] <author> Andre M. van Tilborg and Gary M. Koob, </author> <title> editors. Foundations of Real-Time Computing: Scheduling and resource management. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: In addition to timeliness, embedded systems are also required to meet stringent reliability constraints, which are usually stated as behavioral safety and liveness invariants. For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [Stan88b, Burn90, Tilb91a, Tilb91b] </ref>. The absence of a unified suitable formal framework that addresses the aforementioned issues severely limits the usefulness of these studies. This situation is further exacerbated considering the range of disciplines employed in developing the various components of an embedded application.
Reference: [Tutt88] <author> Mark Tuttle, Michael Meritt, and Francesmary Modugno. </author> <title> "Time constrained automata." </title> <address> MIT/LCS, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in [Best90a]. Lynch and Vaandrager [Lync91] followed suit in their recent modification of the model proposed in <ref> [Tutt88] </ref>. In the TRA model we use system components to represent what can be termed as spacial locality. <p> Also, the relationships between the behaviors and spacial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [Lync88b, Tutt88, Best90a] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [Wirt77] <author> Niklaus Wirth. </author> <title> "Toward a discipline of real-time programming." </title> <journal> Communications of the ACM, </journal> <volume> 20(8), </volume> <month> August </month> <year> 1977. </year> <month> 26 </month>
Reference-contexts: The sustained demands of the environments in which such systems operate pose relatively rigid and urgent performance requirements. These requirements are usually stated as timing constraints on their behaviors. Wirth <ref> [Wirt77] </ref> singled out this processing-time dependency as the one aspect that differentiates real-time from other sequential and parallel systems. This led to a body of research on real-time computing, which encompasses issues of specification techniques, validation and prototyp-ing, formal verification, safety analysis, programming languages, development tools, scheduling, and operating systems.
References-found: 29

