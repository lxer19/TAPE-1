URL: http://www.cs.berkeley.edu/~jmh/miscpapers/qrwrs.ps
Refering-URL: http://www.cs.berkeley.edu/~jmh/papers.html
Root-URL: 
Email: pirahesh@almaden.ibm.com, joey@cs.berkeley.edu, hasan@hpl.hp.com  
Title: Extensible/Rule Based Query Rewrite Optimization in Starburst  
Author: Hamid Pirahesh Joseph M. Hellerstein Waqar Hasan 
Address: San Jose, CA 95120, USA  
Affiliation: IBM Almaden Research Center  
Abstract: This paper describes the Query Rewrite facility of the Starburst extensible database system, a novel phase of query optimization. We present a suite of rewrite rules used in Starburst to transform queries into equivalent queries for faster execution, and also describe the production rule engine which is used by Starburst to choose and execute these rules. Examples are provided demonstrating that these Query Rewrite transformations lead to query execution time improvements of orders of magnitude, suggesting that Query Rewrite in general and these rewrite rules in particular are an essential step in query optimization for modern database systems. 
Abstract-found: 1
Intro-found: 1
Reference: [ABC + 76] <author> M. Astrahan, M. Blasgen, D. Chamberlin, K. Eswaran, J. Gray, P. Griffiths, W. King, R. Lorie, P. McJones, J. Mehl, G. Putzolu, I. Traiger, B. Wade, and V. Wat-son. </author> <title> System R: Relational Approach to Database Management. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(2) </volume> <pages> 97-137, </pages> <month> June </month> <year> 1976. </year>
Reference-contexts: Our extensible Query Rewrite system is designed with this in mind, and we expect to continue adding transformations to it. 1.3 Related Work Designers of early RDBMSs such as System R <ref> [ABC + 76] </ref> and IN- GRES [SWK76] recognized the importance of merging views, and achieved this under limited circumstances. In spite of the acknowledged importance of such transformations, few systems have expanded upon these early transformation designs.
Reference: [Anf89] <author> Ole Jirgen Anfindsen. </author> <title> A Study of Access Path Selection in DB2. </title> <type> Technical report, </type> <institution> Norwegian Telecommunications Administration and University of Oslo, Norway, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: The work mentioned above does not deal with these more complicated subqueries. Furthermore, our rules guarantee the merge of existential subquery conjuncts consisting of restriction, projection and join. This is partially due to our careful treatment of duplicates. Anfindsen <ref> [Anf89] </ref> also has done a study of subquery transformations using IBM's DB2 RDBMS for performance measurements. Like us, Anfindsen reports orders of magnitude improvement in performance. However, [Anf89] restricts itself to those transformations which result in a SQL query that can be handled by DB2. <p> This is partially due to our careful treatment of duplicates. Anfindsen <ref> [Anf89] </ref> also has done a study of subquery transformations using IBM's DB2 RDBMS for performance measurements. Like us, Anfindsen reports orders of magnitude improvement in performance. However, [Anf89] restricts itself to those transformations which result in a SQL query that can be handled by DB2. In contrast, our approach is an internal and integrated part of an RDBMS, taking advantage of a richer internal language, and hence allowing for considerably more optimization. <p> In practice this happens only to simple queries which require no optimization. 5 Conclusions: Engine and Rules We have built an extensible Query Rewrite system for Starburst, and shown that it can provide query execution improvements of orders of magnitude. Others have proposed query transformations before ( <ref> [Kim82, GW87, Day87, Anf89] </ref>) but our work subsumes many of these transformations, and is the first system implementation (to our knowledge) to organically incorporate query transformation schemes into a full RDBMS.
Reference: [BFKM85] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1985. </year>
Reference-contexts: Existing rule engines did not appear to be appropriate for our needs, and thus we designed our own. As will become apparent in the following discussion, we required numerous capabilities not available in typical rule systems (such as OPS5 <ref> [BFKM85] </ref>). Starburst's Query Rewrite rule engine incorporates the following features: 1.
Reference: [BTA90] <author> Jose Blakeley, Craig Thompson, and Abdallah Alashqur. </author> <title> Strawman reference model for object query language. </title> <booktitle> In First OODB Standardization Workshop, </booktitle> <address> X3/SPARC/DBSSG/OODBTG, Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: it further ensures that the expression of the query will be insignificant with respect to its performance. 1.1 Queries with Path Expressions The goals of Query Rewrite explained above are even more significant in Object Oriented applications, which typically generate complicated queries with path expressions connecting various collections of objects <ref> [BTA90, LLOW91, LLPS91] </ref>. In such applications, both the complexity of the logic and the volume of the data are far greater than in traditional DBMS applications [HSS88]. As a result, query optimization becomes increasingly important. <p> As a result, query optimization becomes increasingly important. The following is an example of a query involving path expressions, using the Object SQL syntax defined in <ref> [BTA90] </ref>. 1 This query is a small variation of an example presented in [BTA90]. The example database contains records of patients. Medical records are set attributes of patients. All accesses to data are via methods. Given a patient's record, the medical records are returned by the function get medical records. <p> As a result, query optimization becomes increasingly important. The following is an example of a query involving path expressions, using the Object SQL syntax defined in <ref> [BTA90] </ref>. 1 This query is a small variation of an example presented in [BTA90]. The example database contains records of patients. Medical records are set attributes of patients. All accesses to data are via methods. Given a patient's record, the medical records are returned by the function get medical records.
Reference: [Day87] <author> Umeshwar Dayal. </author> <title> Of Nests and Trees: A Unified Approach to Processing Queries that Contain Nested Subqueries, Aggregates, and Quantifiers. </title> <booktitle> In Proc. 13th International Conference on Very Large Data Bases, </booktitle> <pages> pages 197-208, </pages> <address> Brighton, </address> <month> September </month> <year> 1987. </year>
Reference-contexts: In spite of the acknowledged importance of such transformations, few systems have expanded upon these early transformation designs. Kim [Kim82] originally studied the question of when quantified subqueries could be replaced by joins (or anti-joins). Ganski and Wong [GW87] and Dayal <ref> [Day87] </ref> did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. [Kim82, GW87] also deal with subqueries containing aggregation. We have reported our set of rules that deal with such subqueries in [MFPR90a, MPR90, MFPR90b]. <p> As noted above, converting a subquery to a table expression (and hence a member of a join) increases possible orders of join execution. It may also allow for additional merging, if the subquery is another SELECT box. This rule is the QGM equivalent of a rule proven correct in <ref> [Day87] </ref>. 5 We do not prove its correctness here, but an intuition of 5 The exact rule is Semijoin (R; S; J ) = Delta-Project (Join if ( in a SELECT box there is a quantifier of type E forming a Boolean factor AND ( head.distinct = TRUE OR body.distinct = <p> In practice this happens only to simple queries which require no optimization. 5 Conclusions: Engine and Rules We have built an extensible Query Rewrite system for Starburst, and shown that it can provide query execution improvements of orders of magnitude. Others have proposed query transformations before ( <ref> [Kim82, GW87, Day87, Anf89] </ref>) but our work subsumes many of these transformations, and is the first system implementation (to our knowledge) to organically incorporate query transformation schemes into a full RDBMS.
Reference: [GW87] <author> Richard A. Ganski and Harry K. T. Wong. </author> <title> Optimization of Nested SQL Queries Revisited. </title> <booktitle> In Proc. ACMSIGMOD International Conference on Management of Data, </booktitle> <pages> pages 23-33, </pages> <address> San Francisco, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: In spite of the acknowledged importance of such transformations, few systems have expanded upon these early transformation designs. Kim [Kim82] originally studied the question of when quantified subqueries could be replaced by joins (or anti-joins). Ganski and Wong <ref> [GW87] </ref> and Dayal [Day87] did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. [Kim82, GW87] also deal with subqueries containing aggregation. We have reported our set of rules that deal with such subqueries in [MFPR90a, MPR90, MFPR90b]. <p> Kim [Kim82] originally studied the question of when quantified subqueries could be replaced by joins (or anti-joins). Ganski and Wong [GW87] and Dayal [Day87] did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. <ref> [Kim82, GW87] </ref> also deal with subqueries containing aggregation. We have reported our set of rules that deal with such subqueries in [MFPR90a, MPR90, MFPR90b]. Ganski's paper illustrates the complexity of query rewrite, since it has to emend some previous transformations which were incorrect. <p> In practice this happens only to simple queries which require no optimization. 5 Conclusions: Engine and Rules We have built an extensible Query Rewrite system for Starburst, and shown that it can provide query execution improvements of orders of magnitude. Others have proposed query transformations before ( <ref> [Kim82, GW87, Day87, Anf89] </ref>) but our work subsumes many of these transformations, and is the first system implementation (to our knowledge) to organically incorporate query transformation schemes into a full RDBMS.
Reference: [HCL + 90] <author> L.M. Haas, W. Chang, G.M. Lohman, J. McPherson, P.F. Wilms, G. Lapis, B. Lindsay, H. Pirahesh, M. Carey, and E. Shekita. </author> <title> Starburst Mid-Flight: As the Dust Clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <pages> pages 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: We refer to this phase as plan optimization. In this paper we present a distinct phase of query optimization, Query Rewrite, which has been implemented in the Starburst DBMS <ref> [HCL + 90] </ref> to precede plan optimization in the processing of a query. The goal of Query Rewrite is twofold: 1. <p> system is key it allows new functionality to be added easily both to the query language and the underlying technology (e.g. faster and cheaper memory), and should also allow plan optimizers to be taught to avoid their shortcomings, which may only be discovered when the system is used in production <ref> [Pir89, HCL + 90] </ref>. Our extensible Query Rewrite system addresses both of these issues. 6 Acknowledgments As usual, George Lapis was a great help in numerous implementation details for many of the rules.
Reference: [HH91] <author> Joseph M. Hellerstein and Meichun Hsu. </author> <title> Determinism in Partially Ordered Production Systems. </title> <type> Research Report RJ 8089, </type> <institution> IBM Almaden Research Center, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: First, the rule system paradigm has made it easy for us to exploit the complicated triggering interactions between rewrite rules, saving us from the task of explicitly laying out the flow of control between rules. This is often cited as a dangerous complexity of rule systems ([ZH90], [Ras90], <ref> [HH91] </ref>, etc.) but in our experience has been not only manageable but inherently useful. Second, a rule system is an excellent platform for extensibility, one of the key goals of Starburst's design.
Reference: [HP88] <author> Waqar Hasan and Hamid Pirahesh. </author> <title> Query Rewrite Optimization in Starburst. </title> <institution> Research Report RJ 6367 , IBM Almaden Research Center, </institution> <month> August </month> <year> 1988. </year>
Reference-contexts: For example, POSTGRES's rewrite may be used to implement user-defined semantics for update of views. In contrast, our emphasis is on transformation for the purpose of optimizing query execution. An earlier design of the Starburst Query Rewrite rule system is reported in <ref> [HP88] </ref>. 1.4 Structure of the Paper Section 2 presents the abstract representation of queries used by the rewrite rules. The rules themselves are presented in Section 3. Section 4 describes the rule engine designed for Query Rewrite. <p> We have chosen a relatively simple query to measure the effect of the above rule in the performance environment explained in Sec- tion 2. In practice, queries are typically more complicated, and the 3 As noted in <ref> [HP88] </ref>, the importance of triggering this rule is emphasized when we remember that early relational systems such as System R supported only mergable views.
Reference: [HSS88] <author> T. Haerder, H. Schoning, and A. Sikeler. </author> <title> Parallelism in Processing Queries on Complex Object. </title> <booktitle> In Proc. International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <address> Austin, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: In such applications, both the complexity of the logic and the volume of the data are far greater than in traditional DBMS applications <ref> [HSS88] </ref>. As a result, query optimization becomes increasingly important. The following is an example of a query involving path expressions, using the Object SQL syntax defined in [BTA90]. 1 This query is a small variation of an example presented in [BTA90]. The example database contains records of patients.
Reference: [ISO91] <author> ISO ANSI. </author> <title> Database Language SQL ISO/IEC 9075:1992, </title> <year> 1991. </year>
Reference-contexts: Duplicates may occur even without query transformations. Du- plicate records frequently appear in base or intermediate results in applications, and are of great significance to queries involving aggregate functions, such as a query requesting an average of values of some column. Duplicates are part of SQL <ref> [ISO91] </ref> and OO models such as [LLOW91] (as bags of objects). The need and importance of having duplicates in a realistic implementation is widely recognized, particularly in relational DBMSs (RDBMSs). <p> We have paid particular attention to language orthogonality. Hence, operations such as UNION, INTERSECT, and EXCEPT (SQL's equivalent of set difference) may appear in subqueries, as is required by the SQL2 standard <ref> [ISO91] </ref>. The work mentioned above does not deal with these more complicated subqueries. Furthermore, our rules guarantee the merge of existential subquery conjuncts consisting of restriction, projection and join. This is partially due to our careful treatment of duplicates. <p> The DISTINCT set operators are defined as removing duplicates from all their inputs before any further processing <ref> [ISO91] </ref>. Thus these boxes will disregard any duplicates produced by boxes below them, and can safely signal this by pushing DISTINCT down along their quantifiers. In the case of a SELECT box with body.distinct = PERMIT, we do not worry about the issue of duplicates.
Reference: [Kim82] <author> W. Kim. </author> <title> On Optimizing an SQL-like Nested Query. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7(3), </volume> <month> September </month> <year> 1982. </year>
Reference-contexts: In spite of the acknowledged importance of such transformations, few systems have expanded upon these early transformation designs. Kim <ref> [Kim82] </ref> originally studied the question of when quantified subqueries could be replaced by joins (or anti-joins). Ganski and Wong [GW87] and Dayal [Day87] did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. [Kim82, GW87] also deal with subqueries containing aggregation. <p> Kim [Kim82] originally studied the question of when quantified subqueries could be replaced by joins (or anti-joins). Ganski and Wong [GW87] and Dayal [Day87] did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. <ref> [Kim82, GW87] </ref> also deal with subqueries containing aggregation. We have reported our set of rules that deal with such subqueries in [MFPR90a, MPR90, MFPR90b]. Ganski's paper illustrates the complexity of query rewrite, since it has to emend some previous transformations which were incorrect. <p> In practice this happens only to simple queries which require no optimization. 5 Conclusions: Engine and Rules We have built an extensible Query Rewrite system for Starburst, and shown that it can provide query execution improvements of orders of magnitude. Others have proposed query transformations before ( <ref> [Kim82, GW87, Day87, Anf89] </ref>) but our work subsumes many of these transformations, and is the first system implementation (to our knowledge) to organically incorporate query transformation schemes into a full RDBMS.
Reference: [LLOW91] <author> Chares Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The Objectstore Database System. </title> <journal> Communications of the ACM, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: it further ensures that the expression of the query will be insignificant with respect to its performance. 1.1 Queries with Path Expressions The goals of Query Rewrite explained above are even more significant in Object Oriented applications, which typically generate complicated queries with path expressions connecting various collections of objects <ref> [BTA90, LLOW91, LLPS91] </ref>. In such applications, both the complexity of the logic and the volume of the data are far greater than in traditional DBMS applications [HSS88]. As a result, query optimization becomes increasingly important. <p> Du- plicate records frequently appear in base or intermediate results in applications, and are of great significance to queries involving aggregate functions, such as a query requesting an average of values of some column. Duplicates are part of SQL [ISO91] and OO models such as <ref> [LLOW91] </ref> (as bags of objects). The need and importance of having duplicates in a realistic implementation is widely recognized, particularly in relational DBMSs (RDBMSs).
Reference: [LLPS91] <author> Guy Lohman, Bruce Lindsay, Hamid Pirahesh, and Bernhard Schiefer. </author> <title> Extensions to Starburst: Objects, Types, Functions, and Rules. </title> <journal> Communications of the ACM, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: it further ensures that the expression of the query will be insignificant with respect to its performance. 1.1 Queries with Path Expressions The goals of Query Rewrite explained above are even more significant in Object Oriented applications, which typically generate complicated queries with path expressions connecting various collections of objects <ref> [BTA90, LLOW91, LLPS91] </ref>. In such applications, both the complexity of the logic and the volume of the data are far greater than in traditional DBMS applications [HSS88]. As a result, query optimization becomes increasingly important. <p> Anfindsen defines a concept similar to our one-tuple-condition, explained below, and gives sufficient conditions for which it is satisfied. Many extensions have been added to Starburst <ref> [LLPS91] </ref>, including XNF, a system supporting complex object queries which often generates extremely complicated SQL queries. Our Query Rewrite system has withstood the test of being used by these extensions, and in fact is key to making some of them work efficiently. <p> We have put considerable effort into designing the system to address the problems faced by comprehensive research prototypes and industrial grade RDBMSs, particularly in handling of complex queries, and queries associated with complex objects <ref> [LLPS91] </ref>. The capabilities of our Query Rewrite system surpass by a significant margin those of current RDBMSs, commercial systems included. Among the query transformations presented in this paper, we generalize previous work to handle duplicates correctly, and thus are able to guarantee the merge of existential subquery conjuncts.
Reference: [Loo86] <author> Chris Loosley. </author> <title> Measuring IBM Database 2 Release 2 The Benchmark Game. </title> <journal> InfoDB, </journal> <volume> 1(2), </volume> <year> 1986. </year>
Reference-contexts: performance effect of the rewrite rules, we employ a Table Tuple Size #Tuples #4K Pgs #Indices itm 34 170 000 1 850 1 itp 43 339 440 4 250 3 wor 119 120 000 4 000 1 Table 1: Benchmark Database version of the IBM DB2 benchmark database described in <ref> [Loo86] </ref>, scaled up by a factor of 10. The DB2 benchmark database is based on an inventory tracking and stock control application. Workcenters have locations (locatn). Items (itm) are worked on at locations within workcenters, and the table itl captures this relationship.
Reference: [MF78] <author> J. McDermott and C. Forgy. </author> <title> Production System Conflict Resolution Strategies. In D.A. </title> <editor> Waterman and Fredrick Hayes-Roth, editors, </editor> <booktitle> Pattern Directed Inference Systems, </booktitle> <pages> pages 177-199. </pages> <publisher> Academic Press, </publisher> <year> 1978. </year>
Reference-contexts: Second, since rules are arbitrary C procedures, a rule can invoke another rule class as a subroutine. This results in better modularity and increased comprehensibility. Finally, different rule sets can have different conflict resolution schemes <ref> [MF78] </ref> for choosing the next rule to fire. Starburst currently supports two schemes, a sequential scheme which cycles through a set of ordered rules, and a priority scheme, which always fires the highest order rule that has its condition satisfied.
Reference: [MFPR90a] <author> Inderpal Singh Mumick, Sheldon J. Finkelstein, Hamid Pirahesh, and Raghu Ramakrishnan. </author> <title> Magic is Relevant. </title> <booktitle> In Proc. SIGMOD 90 [Pro90], </booktitle> <pages> pages 247-258. </pages>
Reference-contexts: Second, a rule system is an excellent platform for extensibility, one of the key goals of Starburst's design. This extensibility has allowed us to write and test dozens of query transformations over the past two years, including those presented in this paper, magic sets transformations <ref> [MFPR90a, MPR90, MFPR90b] </ref>, and numerous others. As we shall see, the rules presented in this paper demonstrate that Query Rewrite can often speed up query execution by orders of magnitude, suggesting that query transformation schemes form a ripe area of research. <p> Ganski and Wong [GW87] and Dayal [Day87] did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. [Kim82, GW87] also deal with subqueries containing aggregation. We have reported our set of rules that deal with such subqueries in <ref> [MFPR90a, MPR90, MFPR90b] </ref>. Ganski's paper illustrates the complexity of query rewrite, since it has to emend some previous transformations which were incorrect. This complexity supports our approach of decomposing transformations into an extensible set of distinct rules, such that each rule can be shown to be correct separately.
Reference: [MFPR90b] <author> Inderpal Singh Mumick, Sheldon J. Finkelstein, Hamid Pirahesh, and Raghu Ramakrishnan. </author> <title> Magic Conditions. </title> <booktitle> In Proc. 9th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 314-330, </pages> <address> Nashville, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Second, a rule system is an excellent platform for extensibility, one of the key goals of Starburst's design. This extensibility has allowed us to write and test dozens of query transformations over the past two years, including those presented in this paper, magic sets transformations <ref> [MFPR90a, MPR90, MFPR90b] </ref>, and numerous others. As we shall see, the rules presented in this paper demonstrate that Query Rewrite can often speed up query execution by orders of magnitude, suggesting that query transformation schemes form a ripe area of research. <p> Ganski and Wong [GW87] and Dayal [Day87] did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. [Kim82, GW87] also deal with subqueries containing aggregation. We have reported our set of rules that deal with such subqueries in <ref> [MFPR90a, MPR90, MFPR90b] </ref>. Ganski's paper illustrates the complexity of query rewrite, since it has to emend some previous transformations which were incorrect. This complexity supports our approach of decomposing transformations into an extensible set of distinct rules, such that each rule can be shown to be correct separately.
Reference: [MPR90] <author> Inderpal Singh Mumick, Hamid Pirahesh, and Raghu Ramakrishnan. </author> <title> The Magic of Duplicates and Aggregates. </title> <booktitle> In Proc. 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Second, a rule system is an excellent platform for extensibility, one of the key goals of Starburst's design. This extensibility has allowed us to write and test dozens of query transformations over the past two years, including those presented in this paper, magic sets transformations <ref> [MFPR90a, MPR90, MFPR90b] </ref>, and numerous others. As we shall see, the rules presented in this paper demonstrate that Query Rewrite can often speed up query execution by orders of magnitude, suggesting that query transformation schemes form a ripe area of research. <p> Ganski and Wong [GW87] and Dayal [Day87] did additional work on eliminat <p>- ing nested subqueries. These papers recognize the importance of merging of subqueries. [Kim82, GW87] also deal with subqueries containing aggregation. We have reported our set of rules that deal with such subqueries in <ref> [MFPR90a, MPR90, MFPR90b] </ref>. Ganski's paper illustrates the complexity of query rewrite, since it has to emend some previous transformations which were incorrect. This complexity supports our approach of decomposing transformations into an extensible set of distinct rules, such that each rule can be shown to be correct separately.
Reference: [O'N89] <author> P. O'Neil. </author> <title> Revisiting DBMS Benchmarks. </title> <journal> Datamation, </journal> <pages> pages 47-54, </pages> <month> September 15, </month> <year> 1989. </year>
Reference: [Pir89] <author> Hamid Pirahesh. </author> <title> Early Experience with Rule-Based Query Rewrite Optimization. </title> <editor> In G. Graefe, edi-tor, </editor> <title> Workshop on Database Query Optimization, </title> <type> CSE Technical Report 89-005. </type> <institution> Oregon Graduate Center, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: system is key it allows new functionality to be added easily both to the query language and the underlying technology (e.g. faster and cheaper memory), and should also allow plan optimizers to be taught to avoid their shortcomings, which may only be discovered when the system is used in production <ref> [Pir89, HCL + 90] </ref>. Our extensible Query Rewrite system addresses both of these issues. 6 Acknowledgments As usual, George Lapis was a great help in numerous implementation details for many of the rules.
Reference: [Pro90] <editor> Proc. </editor> <booktitle> ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Atlantic City, </address> <month> May </month> <year> 1990. </year>
Reference: [Ras90] <author> Louiqa Raschid. </author> <title> Maintaining Consistency in a Stratified Production System Program. </title> <booktitle> In Proc. AAAI National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: First, the rule system paradigm has made it easy for us to exploit the complicated triggering interactions between rewrite rules, saving us from the task of explicitly laying out the flow of control between rules. This is often cited as a dangerous complexity of rule systems ([ZH90], <ref> [Ras90] </ref>, [HH91], etc.) but in our experience has been not only manageable but inherently useful. Second, a rule system is an excellent platform for extensibility, one of the key goals of Starburst's design.
Reference: [RGL90] <author> Arnon Rosenthal and Cesar Galindo-Legaria. </author> <title> Query graphs, implementing trees, and freely-reorderable outerjoins. </title> <booktitle> In Proc. SIGMOD 90 [Pro90]. </booktitle>
Reference-contexts: For example, Rosenthal <ref> [RGL90] </ref> defines a set of such transformations for outer join. In this section we will describe the set of rules in Starburst which lead up to the merger of SELECT boxes.
Reference: [SAC + 79] <author> Patricia G. Selinger, M. Astrahan, D. Chamberlin, Raymond Lorie, and T. Price. </author> <title> Access Path Selection in a Relational Database Management System. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Boston, </address> <month> June </month> <year> 1979. </year>
Reference-contexts: In fact, each inter-quantifier edge represents a conjunct of the WHERE clause in the query block the conjuncts being represented in the diagram by the labelled rectangle along the edge. Such edges are also referred to as Boolean factors <ref> [SAC + 79] </ref>. Quantifier 3 is a universal quantifier, associated with the ALL subquery in the WHERE clause. This represents that for all tuples associated with q4, the predicate represented by the edge between q2 and q4 is true.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, Jeffrey Goh, and Spyros Potamianos. </author> <title> On rules, procedures, caching and views in data base systems. </title> <booktitle> In Proc. SIGMOD 90 [Pro90]. </booktitle>
Reference-contexts: Our Query Rewrite system has withstood the test of being used by these extensions, and in fact is key to making some of them work efficiently. The work presented here should not be confused with the query rewrite facility of POSTGRES <ref> [SJGP90] </ref>. POSTGRES's query rewrite is part of an implementation for an active database. In POST- GRES, one can define a rule stating that certain incoming queries should perform additional or entirely different actions from what the user has specified.
Reference: [SWK76] <author> M.R. Stonebraker, E. Wong, and P. Kreps. </author> <title> The design and implementation of ingres. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(3) </volume> <pages> 189-222, </pages> <month> September </month> <year> 1976. </year>
Reference-contexts: Our extensible Query Rewrite system is designed with this in mind, and we expect to continue adding transformations to it. 1.3 Related Work Designers of early RDBMSs such as System R [ABC + 76] and IN- GRES <ref> [SWK76] </ref> recognized the importance of merging views, and achieved this under limited circumstances. In spite of the acknowledged importance of such transformations, few systems have expanded upon these early transformation designs. Kim [Kim82] originally studied the question of when quantified subqueries could be replaced by joins (or anti-joins).
Reference: [TOB89] <author> C. Turbyfill, C. Orji, and Dina Bitton. </author> <title> AS3AP A Comparative Relational Database Benchmark. </title> <booktitle> In Proc. IEEE Compcon Spring '89, </booktitle> <month> February </month> <year> 1989. </year>
Reference: [ZH90] <author> Yuli Zhou and Meichun Hsu. </author> <title> A Theory for Rule Triggering Systems. </title> <editor> In Francois Bancilhon, Costantino Thanos, and Dennis Tsichritzis, editors, </editor> <booktitle> Proc. International Conference on Extending Data Base Technology, Advances in Database Technology - EDBT '90. Lecture Notes in Computer Science, </booktitle> <volume> Volume 416, </volume> <pages> Venice, </pages> <address> March 1990. </address> <publisher> Springer-Verlag. </publisher>
References-found: 29

