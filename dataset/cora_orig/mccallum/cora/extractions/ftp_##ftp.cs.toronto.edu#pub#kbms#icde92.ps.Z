URL: ftp://ftp.cs.toronto.edu/pub/kbms/icde92.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/kbms/readme.html
Root-URL: 
Title: Query Optimization for KBMSs: Temporal, Syntactic and Semantic Transformations  
Author: Thodoros Topaloglou Arantza Illarramandi Licia Sbattella 
Address: Toronto, M5S 1A4, Canada 20080 San Sebastian, Spain 20129 Milano, Italy  
Affiliation: Dept. of Computer Science Facultad de Informatica Dipartimento di Elettronica University of Toronto Universidad del Pais Vasco Politechnico di Milano  
Abstract: This paper describes a framework for query optimization for KBMSs based on the knowledge representation language Telos. The developed framework involves temporal and syntactic simplifications and semantic modification of the queries. Temporal simplification attempts to select parts of a knowledge base that are relevant to a query from a temporal viewpoint. Syntactic simplification exploits structural properties of the data model and attempts to transform the query into an equivalent and more efficient one. Semantic transformation uses knowledge specific to the application domain i.e, integrity constraints and rules, in order to transform a user specified query into another form which gets the same answer and it is processed efficiently. The above three steps are integrated into a global algorithm for query optimization, that utilizes all features of the considered KBMS. 
Abstract-found: 1
Intro-found: 1
Reference: [Ahn86] <author> I. Ahn. </author> <title> Towards an Implementation of Database Management Systems with Temporal Support. </title> <booktitle> In Proc. of Data Engineering '86, </booktitle> <pages> pp. 374-381, </pages> <year> 1986. </year>
Reference-contexts: Although temporal databases have been studied extensively (e.g., [Sno87]) the issue of temporal optimization has not received as much attention. The few existing work dealing with this problem (e.g., <ref> [Ahn86] </ref>, [SG89]), focuses on storage level issues.
Reference: [All83] <author> J.F. Allen. </author> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: Telos adopts a modified case of Allen's time framework <ref> [All83] </ref> in order to represent historical knowledge about the domain. Te-los also records the progression of system's beliefs about the history of the domain. <p> The temporal simplification component detects such cases and eliminates the redundancies. Computationally, the checking for contradiction or implication between two temporal constraints of this form is a cheap operation. This is done using the addition operation that is defined in <ref> [All83] </ref> for the interval representation and redefined in [VK86] for the equivalent point representation.
Reference: [BGL85] <author> R.J. Brachman, V.P. Gilbert, and H.J. Levesque. </author> <title> An Essential Hybrid Reasoning System: Knowledge and Symbol Level Accounts of KRYPTON. </title> <booktitle> In Proc. of IJCAI-85, </booktitle> <pages> pp. 532-539, </pages> <year> 1985. </year>
Reference-contexts: This concept is known both in the artificial intelligence community in the context of reasoning (reasoning with specialists [MS88], theory resolution [Sti85], hybrid reasoning <ref> [BGL85] </ref>) and in the database community with the specialized query processors in the next generation DBMSs such as PROBE [DBG + 85] or application specific interfaces in the extensible DBMS architectures such as DASDBMS [PPS + 87].
Reference: [BM86] <editor> M. Brodie and J. Mylopoulos, editors. </editor> <booktitle> On Knowledge Base Management Systems: Integrating Artificial Intelligence and Database Technologies. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1986. </year>
Reference-contexts: 1 Introduction As the number and size of deployed knowledge bases grows, so will the need for management tools, techniques and methodologies. Knowledge Base Management Systems (hereafter KBMSs) have been proposed as generic systems offering facilities for building, accessing and managing large knowledge bases <ref> [BM86] </ref>, [ST89]. KBMSs are expected to support a state-of-the-art knowledge representation scheme, inference mechanisms for deductive as well as non-deductive reasoning, knowledge management tools for knowledge acquisition, validation and documentation.
Reference: [CDRS86] <author> M. Carey, D. DeWitt, J. Richardson, and E. Shekita. </author> <title> The Architecture of the EXODUS Extensible DBMS. </title> <booktitle> In Proc. of the Asilomar Workshop on Object-Oriented Database Systems, </booktitle> <year> 1986. </year>
Reference: [CGM88] <author> V.S. Chakravarthy, J. Grant, and J. Minker. </author> <title> Foundations of Semantic Query Optimization for Deductive Databases. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pp. 243-273. </pages> <publisher> Morgan-Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: There are two approaches to the semantic query optimization problem for databases. The first one is motivated by database theory (e.g., functional dependencies and inclusion dependencies) [Jar86]. The second approach applies resolution methods in order to transform the query [HZ80], [Kin81], <ref> [CGM88] </ref>, [DIB88], (using integrity constraints and rules). Our method combines both of them and enhances them taking into account the new features offered by the KBMSs.
Reference: [DBG + 85] <author> U. Dayal, A. Buchmann, D. Goldhirsch, S. Heiler, F. A. Manola, J.A. Orenstein, and A.S. Rosenthal. </author> <title> PROBE A Research Project in Knowledge-Oriented Database Systems: Preliminary Analysis. </title> <type> Technical Report CCA-85-03, </type> <institution> CCA, </institution> <year> 1985. </year>
Reference-contexts: This concept is known both in the artificial intelligence community in the context of reasoning (reasoning with specialists [MS88], theory resolution [Sti85], hybrid reasoning [BGL85]) and in the database community with the specialized query processors in the next generation DBMSs such as PROBE <ref> [DBG + 85] </ref> or application specific interfaces in the extensible DBMS architectures such as DASDBMS [PPS + 87]. The basic idea is to break down the query optimization task into subtasks which can be carried out either sequentially or in parallel by dedicated procedures.
Reference: [DIB88] <author> R. Demolombe, A. Illarramendi, and J.M. Blanco. </author> <booktitle> Semantic Optimization in Data Bases Using Artificial Intelligence Techniques. In Proc. of the IFIP Working Conf. on Data and Knowledge Bases, </booktitle> <year> 1988. </year>
Reference-contexts: There are two approaches to the semantic query optimization problem for databases. The first one is motivated by database theory (e.g., functional dependencies and inclusion dependencies) [Jar86]. The second approach applies resolution methods in order to transform the query [HZ80], [Kin81], [CGM88], <ref> [DIB88] </ref>, (using integrity constraints and rules). Our method combines both of them and enhances them taking into account the new features offered by the KBMSs.
Reference: [DST80] <author> J. Downey, R. Sethi, and R.E. Tarjan. </author> <title> Variations of the Common Subexpression Problem. </title> <journal> Journal of ACM, </journal> <volume> 27(4), </volume> <year> 1980. </year>
Reference-contexts: At the beginning of the syntactic simplification process the query have to be: (a) safe 3 , (b) correctly typed, (c) expressed in Prenex Disjunctive Normal Form and (d) simplified with respect to the idempotency rules involving logical expressions [JK84], <ref> [DST80] </ref> and to the 3 A temporal query is unsafe with respect to time if it contains a temporal constraint of the form [ t] and t is unbound. rules involving set expressions and arithmetic expressions appearing in terms.
Reference: [Fre89] <author> J.C. Freytag. </author> <title> The Basic Principles of Query Optimization in Relational Database Management Systems. </title> <booktitle> In Proc. of IFIP-89, </booktitle> <pages> pp. 801-807, </pages> <year> 1989. </year>
Reference-contexts: Query optimization problems have been extensively fl Supported by the Dept. of Computer Science, University of Toronto, and the Ontario ITRC y Supported by the Spanish Goverment Grant PF 88 15939031, and the Ontario ITRC z Supported by the Grant 203.07.16, Consiglio Nazionale delle Ricerche, Italy studied in databases [JK84], <ref> [Fre89] </ref>. There is virtually no corresponding work for KBMSs. In general, query processing is considered a highly complex task requiring two main phases. Initially, the submitted query is specified in a non-procedural language describing the conditions that its answer must satisfy.
Reference: [GN87] <author> Michael R. Genesereth and Nils J. Nilsson. </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1987. </year>
Reference-contexts: A low cost query obtained during the above optimization process is: Q": return x: address (UofT,x,t3)^during (t3,1989). Note that, at any elimination step four elements are employed i.e., fliteral, temp constraint1, :literal, temp constraint2g, fliteral, :literalg are eliminated by subsumption elimination <ref> [GN87] </ref>, while ftemp constraint1, temp constraint2g are eliminated only if they imply each other. Implicitly, two resolution steps are performed at once, the one is handled by the resolution procedure and the other by the temporal reasoner.
Reference: [Gut84] <author> Antonin Guttman. R-Trees: </author> <title> A Dynamic Index Structure For Spatial Searching. </title> <booktitle> In Proc. of ACM SIGMOD-84, </booktitle> <pages> pp. 47-57, </pages> <year> 1984. </year>
Reference-contexts: This allows us to index rules and constraints with respect to history and belief time using a spatial access method such as the R-tree <ref> [Gut84] </ref>. The query's history and belief time define a search window. The spatial search which is performed by the R-tree returns all the DRs and ICs whose rectangle intersects with the query window.
Reference: [HZ80] <author> M. Hammer and S. Zdonik. </author> <title> Knowledge Based Query Processing. </title> <booktitle> In Proc. of VLDB-80, </booktitle> <pages> pp. 137-147, </pages> <year> 1980. </year>
Reference-contexts: There are two approaches to the semantic query optimization problem for databases. The first one is motivated by database theory (e.g., functional dependencies and inclusion dependencies) [Jar86]. The second approach applies resolution methods in order to transform the query <ref> [HZ80] </ref>, [Kin81], [CGM88], [DIB88], (using integrity constraints and rules). Our method combines both of them and enhances them taking into account the new features offered by the KBMSs. <p> Then it transforms the query using (a) resolution techniques and (b) database theory based transformations exploiting the attribute restrictions. The rule base which is produced by the temporal simplification is small in size and depends on the query being optimized. Earlier semantic optimizers in databases <ref> [HZ80] </ref>, [Kin81] work with larger rule bases which in fact are the same for all queries. The small size of rule base affects the performance of the next steps of the algorithm because the search space for the query transformations is seriously reduced.
Reference: [IB90] <author> A. Illarramendi and J.M. Blanco. </author> <title> Semantic Query Optimization: From DBMS To KBMS. </title> <booktitle> In Proc. of Int. Workshop on the Deductive Approach to Information Systems and Databases, </booktitle> <year> 1990. </year>
Reference-contexts: Level Saturation means that at each step it derives all the information of level I before deriving any from level I+1. This strategy is not complete, 5 but performs better when compared to other variants of the saturation resolution. For more details see <ref> [IB90] </ref>. The semantic transformation algorithm takes as input the DDRB (i.e. a set of deductive rules and integrity constraints selected during temporal simplification) and a query Q, and returns either "empty answer" or a set of equivalent queries.
Reference: [IS90] <author> A. Illarramendi and L. Sbattella. </author> <title> Syntactic Query Processing: Dealing with Structure and Time. </title> <booktitle> In Proc. of Int. Workshop on the Deductive Approach to Information Systems and Databases, </booktitle> <year> 1990. </year>
Reference-contexts: Lastly, 4 See <ref> [IS90] </ref> for details about the graphical notation of the queries. 5 t k = t i fl t j is defined as the common time interval between two time intervals t i ; t j in case they overlap, and it is undefined if they are disjoint. <p> Rules R12-14 detect inconsistencies with respect to these constraints. A description of rules R12-14 is presented in <ref> [IS90] </ref>. 5.1.3 Syntactic Simplification Algorithm The syntactic simplification algorithm takes as input the user submitted query Q and either aborts the query if a contradiction is found or returns as output an equivalent query Q' (Q' returns same answer as Q).
Reference: [Jar86] <author> M. Jarke. </author> <title> External Semantic Query Simplification:A Graph Theoretic Approach and its implementation in PROLOG. </title> <booktitle> In Proc. from the 1st Int. Workshop on Expert Database Systems, </booktitle> <pages> pp. 675-696, </pages> <year> 1986. </year>
Reference-contexts: There are two approaches to the semantic query optimization problem for databases. The first one is motivated by database theory (e.g., functional dependencies and inclusion dependencies) <ref> [Jar86] </ref>. The second approach applies resolution methods in order to transform the query [HZ80], [Kin81], [CGM88], [DIB88], (using integrity constraints and rules). Our method combines both of them and enhances them taking into account the new features offered by the KBMSs. <p> Our method for semantic transformation combines the two different approaches used in databases, so far, for semantic query optimization (i.e., [Kin81], <ref> [Jar86] </ref>), although this paper discusses only the artificial intelligence based transformations. The innovation in our algorithm is the theory resolution based strategy for searching for semantically equivalent queries. Moreover, our algorithm attempts to minimize the cost of the optimization procedure in two ways.
Reference: [Jar91] <author> M. Jarke. </author> <title> ConceptBase V3.0 User Manual. </title> <type> Technical Report MIP-9106, </type> <institution> University of Passau, </institution> <year> 1991. </year>
Reference-contexts: This method is partially implemented but has not yet been integrated with one of the Telos implementations that we have [TK89], <ref> [Jar91] </ref>. Therefore, the experiments reported below are based on simulated execution of the derived access plan over a cost model. The cost model assumes a secondary storage knowledge base whereas all existing Telos implementations are main memory resident. <p> The cost model assumes a secondary storage knowledge base whereas all existing Telos implementations are main memory resident. The set-up of the experiments include the following components: knowledge base: The knowledge base is taken form the ConceptBase implementation <ref> [Jar91] </ref> and consists of three classes (namely Employee, Manager and Department with 200, 20 and 10 instances respectively), four attribute relations (boss, dept, salary, head with 400, 400, 600 and 40 tuples respectively) and four rules/constraints The knowledge base contains historical knowledge for a ten years period, e.g. 1..Now, Now=10. assumptions:
Reference: [JK84] <author> M. Jarke and J. Koch. </author> <title> Query Optimization in Database Systems. </title> <journal> Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 111-143, </pages> <year> 1984. </year>
Reference-contexts: Query optimization problems have been extensively fl Supported by the Dept. of Computer Science, University of Toronto, and the Ontario ITRC y Supported by the Spanish Goverment Grant PF 88 15939031, and the Ontario ITRC z Supported by the Grant 203.07.16, Consiglio Nazionale delle Ricerche, Italy studied in databases <ref> [JK84] </ref>, [Fre89]. There is virtually no corresponding work for KBMSs. In general, query processing is considered a highly complex task requiring two main phases. Initially, the submitted query is specified in a non-procedural language describing the conditions that its answer must satisfy. <p> At the beginning of the syntactic simplification process the query have to be: (a) safe 3 , (b) correctly typed, (c) expressed in Prenex Disjunctive Normal Form and (d) simplified with respect to the idempotency rules involving logical expressions <ref> [JK84] </ref>, [DST80] and to the 3 A temporal query is unsafe with respect to time if it contains a temporal constraint of the form [ t] and t is unbound. rules involving set expressions and arithmetic expressions appearing in terms. <p> The rule based syntactic transformation we presented here is a step forward from the syntactic transformation defined in the database context <ref> [JK84] </ref>. We added new rules which deal with built-in predicates corresponding to the instantiation, specialization and aggregation concepts.
Reference: [JK89] <author> M. Jarke and M. Koubarakis. </author> <title> Query Optimization in KBMS: Overview, Research Issues, and Concepts for a Telos Implementation. </title> <type> Technical Report KRR-TR-89-6, </type> <institution> Dept. of Computer Science, University of Toronto, </institution> <year> 1989. </year>
Reference-contexts: W at the historical interval which is over t 1 using only the part of the KB which is believed over the interval t 2 . 4 Temporal Simplification Temporal simplification attempts to identify those parts of a knowledge base that are relevant to a query from a temporal viewpoint <ref> [JK89] </ref>. Temporal simplification consists of the following three steps: 1. Check for inconsistent or redundant temporal constraints in the query expression; 2. Check whether there are available data for all the target variables of the query, for the historical and the belief period that the query refers to; 3.
Reference: [Kin81] <author> J.J. King. </author> <title> Query Optimization by Semantic Reasoning. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1981. </year>
Reference-contexts: There are two approaches to the semantic query optimization problem for databases. The first one is motivated by database theory (e.g., functional dependencies and inclusion dependencies) [Jar86]. The second approach applies resolution methods in order to transform the query [HZ80], <ref> [Kin81] </ref>, [CGM88], [DIB88], (using integrity constraints and rules). Our method combines both of them and enhances them taking into account the new features offered by the KBMSs. <p> Then it transforms the query using (a) resolution techniques and (b) database theory based transformations exploiting the attribute restrictions. The rule base which is produced by the temporal simplification is small in size and depends on the query being optimized. Earlier semantic optimizers in databases [HZ80], <ref> [Kin81] </ref> work with larger rule bases which in fact are the same for all queries. The small size of rule base affects the performance of the next steps of the algorithm because the search space for the query transformations is seriously reduced. <p> Our method for semantic transformation combines the two different approaches used in databases, so far, for semantic query optimization (i.e., <ref> [Kin81] </ref>, [Jar86]), although this paper discusses only the artificial intelligence based transformations. The innovation in our algorithm is the theory resolution based strategy for searching for semantically equivalent queries. Moreover, our algorithm attempts to minimize the cost of the optimization procedure in two ways.
Reference: [KRB85] <author> W. Kim, S. Reiner, and S. Batory, </author> <title> editors. Query Processing in Database Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The procedure search-R-tree returns those rules and constraints whose temporal validity rectangle overlaps with the query window. 5 Syntactic Simplification Syntactic query optimization exploits special properties of query languages to transform a query into another one which has the same answer and can be processed more efficiently <ref> [KRB85] </ref>. These properties are expressed usually by rules. In our case, the properties of the query language that we base the syntactic simplification are related to the structural features of Telos.
Reference: [MBJK91] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: A Language for Representing Knowledge About Information Systems. </title> <journal> ACM TOIS, </journal> <note> (to appear) 1991. </note>
Reference-contexts: In KBMSs the nature and basic structure of query optimization remain the same. However, the differences between knowledge representation schemes such as BACK [PSKQ89], or Telos <ref> [MBJK91] </ref> and data models introduce new intricacies to the problem and new requirements for its solution. Firstly, the contents of the knowledge base may include (deductive) rules as well as complex object descriptions. <p> To make the discussion more concrete, the paper only addresses the query modification phase and offers a framework for accomplishing it for a KBMS based on the knowledge representation language Telos <ref> [MBJK91] </ref>. The features of the language include structuring facilities for knowledge bases (including generalization, classification, aggregation), deductive rules and declarative integrity constraints, facilities for representing and reasoning with temporal knowledge, classification facilities extended to attributes as well as the ability to define attribute meta-classes. <p> A detailed description of the Telos knowledge representa tion language appears in <ref> [MBJK91] </ref>. 2 The following TELL statements define the sim-ple classes Person, Professor, GStudent, Tutor, School and Address. The classes Professor and GStudent are specializations of class Person, and Tutor specalization of GStudent. Persons have name, age and address as attributes.
Reference: [MS88] <author> S. Miller and L. Schubert. </author> <title> Using Specialists to Accelerate General Reasoning. </title> <booktitle> In Proc. of AAAI-88, </booktitle> <pages> pp. 161-165, </pages> <year> 1988. </year>
Reference-contexts: Section 8 summarizes the presentation and discusses further research. 2 The Approach The approach for query optimization that is taken here is based on the principle of specializers. This concept is known both in the artificial intelligence community in the context of reasoning (reasoning with specialists <ref> [MS88] </ref>, theory resolution [Sti85], hybrid reasoning [BGL85]) and in the database community with the specialized query processors in the next generation DBMSs such as PROBE [DBG + 85] or application specific interfaces in the extensible DBMS architectures such as DASDBMS [PPS + 87].
Reference: [PSKQ89] <author> C. Peltason, A. Schmiedel, C. Kindermann, and J. Quantz. </author> <title> The BACK System Revisited. </title> <type> Technical Report KIT-Report 75, </type> <institution> Tech-nische Universitat Berlin, </institution> <year> 1989. </year> <month> 10 </month>
Reference-contexts: In KBMSs the nature and basic structure of query optimization remain the same. However, the differences between knowledge representation schemes such as BACK <ref> [PSKQ89] </ref>, or Telos [MBJK91] and data models introduce new intricacies to the problem and new requirements for its solution. Firstly, the contents of the knowledge base may include (deductive) rules as well as complex object descriptions.
Reference: [PSS + 87] <author> H.-B. Paul, H.-J. Schek, M.H. Scholl, G. Weikum, and U. Deppish. </author> <title> Architecture and Implementation of a Darmstadt Database Kernel System. </title> <booktitle> In Proc. of ACM SIGMOD-87, </booktitle> <pages> pp. 196-207, </pages> <year> 1987. </year>
Reference: [RH80] <author> D.J. Rosenkrantz and M.B. Hunt. </author> <title> Processing Conjunctive Predicates and Queries. </title> <booktitle> In Proc. of VLDB-80, </booktitle> <pages> pp. 64-74, </pages> <year> 1980. </year>
Reference-contexts: Inconsistencies can be detected using the algorithm proposed by <ref> [RH80] </ref>. <p> The goal of this reasoning procedure is to prove that the query's inequality subexpression either contradicts with or implies the inequality subexpressions of the rules and the constraints. The algorithm that we use is similar to the algorithm in <ref> [RH80] </ref>. Procedure for Temporal Information. The problem here is to check the compatibility between the temporal predicates appearing in the rules and the ones appearing in the query.
Reference: [Sch86] <author> P. Schwarz. </author> <title> Extensibility in the Starburst Database System. </title> <booktitle> In Proc. of the Asilomar Workshop on Object-Oriented Database Systems, </booktitle> <year> 1986. </year>
Reference: [Sel88] <author> T.K. Sellis. </author> <title> Multiple Query Optimization. </title> <journal> ACM TODS, </journal> <volume> 3(1), </volume> <year> 1988. </year>
Reference-contexts: As the experiments suggested, many queries share "similar" parts and eventually receive "similar" execution plans. Cost reduction in such cases can be achieved through multiple query optimization. Some 9 ideas developed in the multiple query optimization re-search area <ref> [Sel88] </ref> can be considered for the KBMS query processing too. Acknowledgements Special thanks are due to prof. J. Mylopoulos for providing us his guidance and the research environment to work. We also thank prof. R. Demolombe, B. Nixon, M. Koubarakis, V. Chaudhri, D. Plexousakis for their help.
Reference: [SG89] <author> A. Segev and H. Gunadhi. </author> <title> Event-Join Optimization in Temporal Relational Databases. </title> <booktitle> In Proc. of VLDB-89, </booktitle> <pages> pp. 205-215, </pages> <year> 1989. </year>
Reference-contexts: Although temporal databases have been studied extensively (e.g., [Sno87]) the issue of temporal optimization has not received as much attention. The few existing work dealing with this problem (e.g., [Ahn86], <ref> [SG89] </ref>), focuses on storage level issues.
Reference: [Sno87] <author> R. Snodgrass. </author> <title> The Temporal Query Language TQuel. </title> <journal> ACM TODS, </journal> <volume> 12(2) </volume> <pages> 247-298, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: This becomes feasible when the knowledge representation language supported by the KBMS integrates several different sub-theories (e.g., one for generalization, one for time) for which reasoning can be achieved through specialized inference engines. The queries that we intend to process are (a) temporal queries (both historical and rollback <ref> [Sno87] </ref>), (b) queries about the structure and the data of the knowledge base and (c) queries about the world that the knowledge base models. The above classes of queries make use of the temporal, structural and assertional components of Te-los. Obviously, each class of queries needs a different treatment. <p> t3) ^ over (t3;1987) ^ memberOf (x;age:Person;t1) ^ during (t1;1980) ^ over (t1; 1987) This means that the same event, i.e. the membership of x in age.Person set is constrained by two different 1 Recently, this feature has received considerable attention in the area of temporal and deductive relational databases <ref> [Sno87] </ref>, [Spi88]. temporal constraints, which in fact contradict each other (e.g., [during, 1980] and [over,1987]). Another case is the one where two (or more) constraints do not contradict but the one implies the other, e.g. C1=[over,1987] and C2=[over, 1980..1990]. <p> The contributions of the paper, are: (a) the definition of temporal simplification, (b) the reformulation of syntactic simplification and (c) advances in semantic transformation. Although temporal databases have been studied extensively (e.g., <ref> [Sno87] </ref>) the issue of temporal optimization has not received as much attention. The few existing work dealing with this problem (e.g., [Ahn86], [SG89]), focuses on storage level issues.
Reference: [Sri88] <author> S.M. Sripada. </author> <title> A logical framework for temporal deductive databases. </title> <booktitle> In Proc. of VLDB-88, </booktitle> <pages> pp. 171-182, </pages> <year> 1988. </year>
Reference: [SSD88] <author> S. Shekhar, J. Srivastava, and S. Dutta. </author> <title> A formal model of trade off between optimization and execution costs in semantic query optimization. </title> <booktitle> In Proc. of VLDB-88, </booktitle> <year> 1988. </year>
Reference-contexts: First, it selects a rule base which is small in size and depends on the query. Second, it uses theory resolution which reduces substantially the number of inference steps during query transformation. A different approach to control the cost of semantic query optimization is taken in <ref> [SSD88] </ref>. The main focus in this work is the query modification phase of query optimization. The preliminary performance results are very encouraging. The next step is to extend our experiments for various distributions of the temporal data and rules and investigate the access planning phase.
Reference: [ST89] <editor> J.W. Schmidt and C. Thanos, editors. </editor> <booktitle> Foundations of Knowledge Base Management: Contributions from Logic, Databases, and Artificial Intelligence Applications. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction As the number and size of deployed knowledge bases grows, so will the need for management tools, techniques and methodologies. Knowledge Base Management Systems (hereafter KBMSs) have been proposed as generic systems offering facilities for building, accessing and managing large knowledge bases [BM86], <ref> [ST89] </ref>. KBMSs are expected to support a state-of-the-art knowledge representation scheme, inference mechanisms for deductive as well as non-deductive reasoning, knowledge management tools for knowledge acquisition, validation and documentation. In addition, KBMS are supposed to be efficient to the point of supporting large knowledge bases concurrently accessed by multiple users.
Reference: [Sti85] <author> M.E. Stickel. </author> <title> Automated Deduction by Theory Resolution. </title> <booktitle> In Proc. of IJCAI-85, </booktitle> <pages> pp. 455-458, </pages> <address> Los Angeles, CA, </address> <year> 1985. </year>
Reference-contexts: Section 8 summarizes the presentation and discusses further research. 2 The Approach The approach for query optimization that is taken here is based on the principle of specializers. This concept is known both in the artificial intelligence community in the context of reasoning (reasoning with specialists [MS88], theory resolution <ref> [Sti85] </ref>, hybrid reasoning [BGL85]) and in the database community with the specialized query processors in the next generation DBMSs such as PROBE [DBG + 85] or application specific interfaces in the extensible DBMS architectures such as DASDBMS [PPS + 87]. <p> The resolution method that we use is a variation of Stickel's theory resolution. 6.1 Theory Resolution based Search Strat egy The goal is to obtain a set of queries which are semantically equivalent to the given query using partial narrow theory resolution. Theory resolution <ref> [Sti85] </ref> is a method which integrates specialized reasoning procedures in a resolution theorem prover.
Reference: [TK89a] <author> T. Topaloglou and M. Koubarakis. </author> <title> An Implementation of Telos. </title> <type> Technical Report KRR-TR-89-8, </type> <institution> Dept. of Computer Science, University of Toronto, </institution> <year> 1989. </year>
Reference: [VK86] <author> M. Vilain and H. Kautz. </author> <title> Constraint Propagation Algorithms for Temporal Reasoning. </title> <booktitle> In Proc. of AAAI-86, </booktitle> <pages> pp. 377-382, </pages> <year> 1986. </year> <month> 11 </month>
Reference-contexts: The temporal simplification component detects such cases and eliminates the redundancies. Computationally, the checking for contradiction or implication between two temporal constraints of this form is a cheap operation. This is done using the addition operation that is defined in [All83] for the interval representation and redefined in <ref> [VK86] </ref> for the equivalent point representation.
References-found: 36

