URL: http://www.icsi.berkeley.edu/~nikki/papers/cs283_lisp.ps
Refering-URL: http://www.icsi.berkeley.edu/~nikki/papers/
Root-URL: http://www.icsi.berkeley.edu
Title: Interval Arithmetic in CLOS  
Author: Naghmeh (Nikki) Mirghafori 
Date: December 1992  
Pubnum: CS283 Class Project  
Abstract: Although interval arithmetic is important in applications involving symbolic math and statistics, Common Lisp does not currently support intervals. This paper describes the issues involved in design and implementation of such a system in CLOS.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Guy L. Steele, Jr. </author> <title> Common Lisp the Language, 2nd ed., </title> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference-contexts: We have based our coercion rules on the decision of ANSI standard subcommittee X3J13 <ref> [1] </ref> on applying floating-point contagion rules in case of combining rational and floating point numbers.
Reference: [2] <author> Peter Norvig. </author> <title> Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp, </title> <publisher> Morgan Kaufmann Publishers, Inc, </publisher> <year> 1992. </year>
Reference-contexts: Currently, rounding up and down are done in a somewhat ad-hoc manner using single-float-epsilon and double-float-epsilon, by multiplying the upper-bound by (1 + *) and the lower-bound by (1 *); with the provision that 0 will be rounded up (down) to least-positive-double-float (least-negative-double-float). 7 Why CLOS? Peter Norvig <ref> [2] </ref> cites five reasons for the merits of CLOS.
Reference: [3] <author> W. Kahan. </author> <title> A More Complete Interval Arithmetic. Unpublished lecture notes for a summer course at the Univ. </title> <institution> of Michigan, </institution> <address> Ann Arbor, </address> <year> 1968. </year>
Reference-contexts: We can also represent 0 by [0; +0] or [+0; +0], +1 by [1=0; 1=0], 1 by [1=0; 1=0], and N aN (empty interval) by [N aN; N aN ]. (For a more information on intervals, the interested reader is referred to W. Kahan's discussion of this topic <ref> [3] </ref>.) Our package only supports interior intervals. Also, it requires both endpoints of the interval to be of the same type.
Reference: [4] <institution> New Features in Mathematica version 2.2, </institution> <note> Dec 1992 Testing Release Notes. </note>
Reference-contexts: A future extension might include changing the last bits of accuracy by directly accessing the floating-bits in memory. * Development of Interval-Union and Interval-Intersection <ref> [4] </ref>. In order to accomodate this development, one should create a new class, say extended-interval, based on the existing class interval to allow union of intervals to be represented; for example: [(1 4) (9 23)] is an interval from 1 to 4 and from 9 to 23. <p> The existing arithmetic operations should be extended to accomodate operations in the new class. Note that representing exterior intervals will be possible using the extended-interval class, e.g., [(1 10) (10 1)]. * Development of arithmetic operations allowing mixture of numbers and intervals <ref> [4] </ref>. * Developing extremal functions and interval comparison functions [4]: Interval-Max and Interval-Min which should return the greatest (least) lower (uppor) bound of the input interval; and interval com parisons such as &lt;; &gt;; ; . 7 * Other elementry functions on intervals [4], e.g., sin, cos, abs, ... <p> Note that representing exterior intervals will be possible using the extended-interval class, e.g., [(1 10) (10 1)]. * Development of arithmetic operations allowing mixture of numbers and intervals <ref> [4] </ref>. * Developing extremal functions and interval comparison functions [4]: Interval-Max and Interval-Min which should return the greatest (least) lower (uppor) bound of the input interval; and interval com parisons such as &lt;; &gt;; ; . 7 * Other elementry functions on intervals [4], e.g., sin, cos, abs, ... <p> operations allowing mixture of numbers and intervals <ref> [4] </ref>. * Developing extremal functions and interval comparison functions [4]: Interval-Max and Interval-Min which should return the greatest (least) lower (uppor) bound of the input interval; and interval com parisons such as &lt;; &gt;; ; . 7 * Other elementry functions on intervals [4], e.g., sin, cos, abs, ...
Reference: [5] <author> Richard J. Fateman, and Tak W. Yan. </author> <title> Computation with the Extended Rational Numbers and an Application to Interval Arithmetic, </title> <type> unpublished, </type> <year> 1992. </year>
Reference-contexts: A package for arithmetic operations on extended-rationals and extended-rational intervals has been designed and implemented by R. Fateman, and T. Yan <ref> [5] </ref>. Furthermore, a package for floating-point interval arithmetic has been devised by R. Fateman and C. Ruan [6]. In contrast to the previous work done in this area, our package supports different types of intervals (i.e., float, extended-rational, and integer). <p> This is the main reason that any package involving rational interval arithmetic should rely so heavily on extended-rationals. Of course, there are other justifications <ref> [5] </ref> for extended rationals in their own right, regardless of their utility in interval 2 arithmetic. Two of these reasons are utility and aesthetics.
Reference: [6] <author> Richard J. Fateman, and Cindy Ruan. </author> <title> Floating-point interval arithmetic and plotting, LISP Package, </title> <year> 1992. </year>
Reference-contexts: A package for arithmetic operations on extended-rationals and extended-rational intervals has been designed and implemented by R. Fateman, and T. Yan [5]. Furthermore, a package for floating-point interval arithmetic has been devised by R. Fateman and C. Ruan <ref> [6] </ref>. In contrast to the previous work done in this area, our package supports different types of intervals (i.e., float, extended-rational, and integer). Moreover, intervals of these types can be freely intermixed as operands of arithmetic operations.
Reference: [7] <author> W. Kahan. </author> <title> Branch Cuts for Complex Elementary Functions. in The State of the Art of Numerical Analysis, </title> <editor> A. Iserles and M. J. D. Powell (eds.) </editor> <publisher> Oxford Univ. Press, </publisher> <year> 1987. </year> <month> 8 </month>
References-found: 7

