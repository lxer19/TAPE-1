URL: ftp://ftp.cs.brown.edu/pub/techreports/95/cs95-14.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-95-14.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> David B. Baskerville, </author> <title> Graphic presentation of data structures in the DBX debugger, </title> <address> UC Berkeley UCB/CSD 86/260 (1985). </address>
Reference-contexts: Early work in this area by Brad Myers allowed the user to program a display using a graphics library to code the display for each type [14]. Later work by Baskerville attempted to integrate simple displays into a debugger <ref> [1] </ref>. Recent efforts along these line include VIPS [9], and the commercial data structure display facilities provided by Centerlines C environment and by SGIs Codevision. This work is all fairly specialized in that it attempts to provide standard displays of data structures.
Reference: 2. <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis, </author> <title> Algorithms for drawing graphs: an annotated bibliography, </title> <journal> Comput. Geom. Theory Appl Vol. </journal> <pages> 4 pp. </pages> <month> 235-282 </month> <year> (1994). </year>
Reference-contexts: These methods allow arbitrary nodes and arcs and simply attempt to do graph layout in 3D, typically while presenting a 2D view from the front of the display. Graph layout has been extensively studied in two dimensions <ref> [2] </ref>. The problem is one of placing nodes and arcs to produce an aesthetically pleasing graph. This is generally translated into more specific problems such as reducing arc length and the number of crossings or of emphasizing symmetry.
Reference: 3. <author> Marc H. Brown and Robert Sedgewick, </author> <title> Techniques for algorithm animation, </title> <booktitle> IEEE Software Vol. </booktitle> <pages> 2(1) pp. </pages> <month> 28-39 </month> <year> (1985). </year>
Reference-contexts: Another area in which a general display mechanism supports a variety of applications is algorithm animation. The BALSA system provided a high-level graphics library where different animations could be easily coded <ref> [3] </ref>. The TANGO system followed this up by providing a formal framework consisting of an animation algebra where the animations could either be coded procedurally or by demonstration [27]. More recent work on ZEUS added color and sound and is now incorporating 3D visualizations [4,5].
Reference: 4. <author> Marc H. Brown and John Hershberger, </author> <title> Color and sound in algorithm animation, </title> <booktitle> Computer Vol. </booktitle> <pages> 25(12) pp. </pages> <month> 52-63 (December </month> <year> 1992). </year>
Reference: 5. <author> Marc H. Brown and Marc A. Nojork, </author> <title> Algorithm animation using 3D interactive graphics, </title> <note> DEC Systems Research Center (1992). </note>
Reference: 6. <author> Jacques Davy, </author> <title> GoPATH programmers guide, Bull Imaging and Office Solutions (December 1992). </title>
Reference-contexts: One of the earliest such editors was Unidraw developed as part of Interviews [12]. This editor used object-orientation to provide an extensible framework for editing somewhat similar to that we provide in PLUM. Later examples include Go <ref> [6] </ref> and a variety of graph drawing widgets for Motif.
Reference: 7. <author> Stephen G. Eick, Joseph L. Steffen, and Eric E. Sumner, Jr., </author> <title> Seesoft - a tool for visualizing software, </title> <institution> AT&T Bell Laboratories (1991). </institution>
Reference-contexts: While this work is related to abstraction visualization, their graphical displays are quite limited. The SeeSoft work at Bell laboratories has applied a single file visualization technique to a variety of different applications <ref> [7] </ref>. We have incorporated their ideas on file display into our system as one of the presentation mechanisms we provide. 3.
Reference: 8. <author> Belinda B. Flynn and David Maier, </author> <title> Specification and generation of displays for complex database objects, </title> <institution> Oregon Graduate Institute of Science and Technology (1992). </institution>
Reference-contexts: There have been other efforts aimed at providing generic display facilities for a variety of applications. Flynn and Maier have worked on the specification of displays for objects from an object-oriented database <ref> [8] </ref>. While this work is related to abstraction visualization, their graphical displays are quite limited. The SeeSoft work at Bell laboratories has applied a single file visualization technique to a variety of different applications [7].
Reference: 9. <author> Sadahiro Isoda, Takao Shimonmura, and Yuji Ono, </author> <title> VIPS: a visual debugger, </title> <booktitle> IEEE Software Vol. </booktitle> <pages> 4(3) pp. </pages> <month> 8-19 (May </month> <year> 1987). </year>
Reference-contexts: Early work in this area by Brad Myers allowed the user to program a display using a graphics library to code the display for each type [14]. Later work by Baskerville attempted to integrate simple displays into a debugger [1]. Recent efforts along these line include VIPS <ref> [9] </ref>, and the commercial data structure display facilities provided by Centerlines C environment and by SGIs Codevision. This work is all fairly specialized in that it attempts to provide standard displays of data structures.
Reference: 10. <author> Clinton Lewis Jeffrey, </author> <title> A framework for monitoring program execution, </title> <type> U. Arizona Technical Report TR 93-21 (July 1993). </type>
Reference-contexts: Other limited work involving non-graphs includes the file viewers from Bell Laboratories and some of the work of Jeffrey on visualizing ICON execution <ref> [10] </ref>. Most of the solutions that we and others have devised for utilizing 3D for data visualization involve extending what is normally a 2D representation into a 3D one.
Reference: 11. <author> Hideki Koike, </author> <title> The role of another spatial dimension in software visualization, </title> <journal> ACM Trans. on Info. Sys. </journal> <volume> Vol. </volume> <pages> 11(3) pp. </pages> <month> 266-286 (July </month> <year> 1993). </year>
Reference-contexts: Here the different lines of the file can have an associated height and the result of the display is a surface in three dimensions. Similar methods have been used in the ZEUS algorithm animation system and in the VOGUE performance monitoring visualizations <ref> [11] </ref> Another method for extending a 2D layout into three dimensions is to allow the user to select a set of nodes and to place these at the front.
Reference: 12. <author> Mark A. Linton and John M. Vlissides, Unidraw: </author> <title> a framework for building domain-specific graphical editors, </title> <booktitle> Proc. UIST 89, </booktitle> <pages> pp. </pages> <month> 158-167 (November </month> <year> 1989). </year>
Reference-contexts: This has also been recognized by a number of other groups and there have been a variety of generic graphical editors that can display abstract program data. One of the earliest such editors was Unidraw developed as part of Interviews <ref> [12] </ref>. This editor used object-orientation to provide an extensible framework for editing somewhat similar to that we provide in PLUM. Later examples include Go [6] and a variety of graph drawing widgets for Motif.
Reference: 13. <author> Jock D. Mackinlay, George G. Robertson, and Stuart K. Card, </author> <title> The perspective wall: detail and context smoothly integrated, </title> <booktitle> Proc. CHI91, </booktitle> <pages> pp. </pages> <month> 173-179 (April </month> <year> 1991). </year>
Reference-contexts: For example, cone trees or cam trees, developed at Xerox, provide a 3D representation of a traditionally 2D tree structure [23]. Similarly, the perspective wall provides a perspective, 3D view of a 2D elongated graph layout <ref> [13] </ref>. Other layout methods that have been developed at Xerox that work similarly include an extension of the perspective wall to a perspective cone and a spiral layout where components are placed on a spiral moving away from the viewer.
Reference: 14. <author> Brad A. Myers, Incense: </author> <title> a system for displaying data structures, </title> <booktitle> Computer Graphics Vol. </booktitle> <pages> 17(3) pp. </pages> <month> 115-125 (July </month> <year> 1983). </year>
Reference-contexts: GELO was not the first system that attempted to display user data structures. Early work in this area by Brad Myers allowed the user to program a display using a graphics library to code the display for each type <ref> [14] </ref>. Later work by Baskerville attempted to integrate simple displays into a debugger [1]. Recent efforts along these line include VIPS [9], and the commercial data structure display facilities provided by Centerlines C environment and by SGIs Codevision.
Reference: 15. <author> Brad A. Myers, Dario A. Guise, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie, Edward Pervin, Andrew Mickish, and Philippe Marchal, Garnet: </author> <title> comprehensive support for graphical, highly interactive user interfaces, </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. </pages> <month> 71-85 (November </month> <year> 1990). </year>
Reference-contexts: Later examples include Go [6] and a variety of graph drawing widgets for Motif. The Garnet An Engine for the 3D Visualization of Program Information May 5, 1995 4 environment provides a slightly different basis for editing <ref> [15] </ref>, a powerful low-level environment based on constraints that can be used to build a higher level graphical editor. Another area in which a general display mechanism supports a variety of applications is algorithm animation.
Reference: 16. <author> Michael L. Powell and Mark A. Linton, </author> <title> Visual abstraction in an interactive programming environment, </title> <journal> SIGPLAN Notices Vol. </journal> <pages> 18(6) pp. </pages> <month> 14-21 (June </month> <year> 1983). </year> <title> An Engine for the 3D Visualization of Program Information May 5, </title> <year> 1995 </year> <month> 30 </month>
Reference-contexts: A practical program visualization system can be achieved by focusing on abstractions [22]. Abstractions can be specified as queries on a heterogeneous object-oriented database. The basic idea of looking at programs through a database was explored by Powell and Linton <ref> [16] </ref>. This work assumed a single relational database of program information. We start with program information from various sources. These are united using an extensible object-oriented database schema and a federated database. Both textual and visual query languages are provided for this schema.
Reference: 17. <author> B. A. Price, I. S. Small, and R. M. Baecker, </author> <title> A taxonomy of software visualization, </title> <journal> Journal of Visual Languages, </journal> <month> (Dec. </month> <year> 1993). </year>
Reference-contexts: We expect the next version of the system will increase this by an order of magnitude. 2. Background While there has been substantial work on program or software visualization <ref> [17] </ref>, most of this work has been directed toward providing specific visualizations such as a call graph or a class browser, and little has been directed toward a generic framework.
Reference: 18. <author> Steven P. Reiss and Joseph N. Pato, </author> <title> Displaying program and data structures, </title> <booktitle> Proc. 20th Hawaii Intl. Conf. System Sciences, </booktitle> <month> (January </month> <year> 1987). </year>
Reference: 19. <author> Steven P. Reiss, </author> <title> Working in the Garden environment for conceptual programming, </title> <booktitle> IEEE Software Vol. </booktitle> <pages> 4(6) pp. </pages> <month> 16-27 (November </month> <year> 1987). </year>
Reference-contexts: Our previous work addressed the issue of 2D visualization of abstract data [18,20]. This work supported our work on visual languages in the GARDEN system <ref> [19] </ref>. It was used to display a variety of different visual languages including Petri nets, stat-echarts, finite automata, ow charts, and data ow diagrams, as well as arbitrary user data structures.
Reference: 20. <author> Steven P. Reiss, Scott Meyers, and Carolyn Duby, </author> <title> Using GELO to visualize software systems, </title> <booktitle> Proc. UIST 89, </booktitle> <pages> pp. </pages> <month> 149-157 (November </month> <year> 1989). </year>
Reference: 21. <author> Steven P. Reiss, </author> <title> Connecting tools using message passing in the FIELD environment, </title> <booktitle> IEEE Software Vol. </booktitle> <pages> 7(4) pp. </pages> <month> 57-67 (July </month> <year> 1990). </year>
Reference-contexts: The package was later used in the FIELD environment to support browsers for call graphs, class hierarchies, and make dependencies <ref> [21] </ref>. The package had three parts. The first, GELO, provided a framework for abstract 2D displays. The second package, APPLE, provided an automatic mapping facility from user data structures into GELO graphic objects. The final component, PEAR, provided graphical editing capabilities.
Reference: 22. <author> Steven P. Reiss and Manojit Sarkar, </author> <title> Generating program abstractions using an object-oriented database, </title> <institution> Brown University Department of Computer Science (1992). </institution>
Reference-contexts: These latter criteria are what we have attempted to achieve in PLUM. A practical program visualization system can be achieved by focusing on abstractions <ref> [22] </ref>. Abstractions can be specified as queries on a heterogeneous object-oriented database. The basic idea of looking at programs through a database was explored by Powell and Linton [16]. This work assumed a single relational database of program information. We start with program information from various sources.
Reference: 23. <author> George G. Robertson, Jock D. Mackinlay, and Stuart K. Card, </author> <title> Cone trees: animated 3D visualizations of hierarchical information, </title> <booktitle> Proc. CHI91, </booktitle> <pages> pp. </pages> <month> 189-194 (April </month> <year> 1991). </year>
Reference-contexts: Other methods take the 2D layout and provide a 3D organization of the information. For example, cone trees or cam trees, developed at Xerox, provide a 3D representation of a traditionally 2D tree structure <ref> [23] </ref>. Similarly, the perspective wall provides a perspective, 3D view of a 2D elongated graph layout [13].
Reference: 24. <author> L. A. Rowe, M. Davis, E. Messinger, C. Meyer, C. Spirakis, and A. Tuan, </author> <title> A browser for directed graphs, </title> <journal> Software Practice and Experience Vol. </journal> <pages> 17(1) pp. </pages> <month> 61-76 </month> <year> (1987). </year>
Reference-contexts: This is generally translated into more specific problems such as reducing arc length and the number of crossings or of emphasizing symmetry. While we provide a variety of approaches in our 2D layout packages, the algorithm of choice for program data has been one based on level graphs <ref> [24] </ref> since it tends to emphasize hierarchy and since it generally produces a reasonable looking result. Moving graph layout algorithms from two to three dimensions is not trivial. The first problem is determining what looks good in three dimensions.
Reference: 25. <author> Manojit Sarkar, Scott S. Snibbe, Oren J. Tversky, and Steven P. Reiss, </author> <title> Stretching the rubber sheet: a metaphor for viewing large layouts on small screens, </title> <booktitle> Proc. ACM SIGGRAPH UIST, </booktitle> <pages> pp. </pages> <month> 81-91 (November </month> <year> 1993). </year>
Reference: 26. <author> Manojit Sarkar and Marc H. Brown, </author> <title> Graphical Fisheye Views, </title> <journal> CACM Vol. </journal> <pages> 37(12) pp. </pages> <month> 73-84 (December </month> <year> 1994). </year>
Reference: 27. <author> John T. Stasko, </author> <title> TANGO: a framework and system for algorithm animation, </title> <booktitle> IEEE Computer Vol. </booktitle> <pages> 23(9) pp. </pages> <month> 27-39 (September </month> <year> 1990). </year>
Reference-contexts: The BALSA system provided a high-level graphics library where different animations could be easily coded [3]. The TANGO system followed this up by providing a formal framework consisting of an animation algebra where the animations could either be coded procedurally or by demonstration <ref> [27] </ref>. More recent work on ZEUS added color and sound and is now incorporating 3D visualizations [4,5].
Reference: 28. <author> James Wen, </author> <title> A three dimensional browser for visualizing orthogonal hierarchies, </title> <institution> Brown University (1992). </institution>
Reference-contexts: For a call graph, function nodes are grouped by the file they appear in and thus all nodes from a single file are placed at the same Z coordinate. A third method we have employed involves tagged layouts. Based on work of Wen <ref> [28] </ref>, we draw the contents of a file as a tag node with the file name and then a graph of the nodes within the file that is angled off the tag node at an appropriate angle.
References-found: 28

