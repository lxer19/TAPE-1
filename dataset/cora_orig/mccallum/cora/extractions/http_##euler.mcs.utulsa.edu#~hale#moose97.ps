URL: http://euler.mcs.utulsa.edu/~hale/moose97.ps
Refering-URL: http://euler.mcs.utulsa.edu/~hale/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Capability-Based Primitives for Access Control in Object-Oriented Systems  
Author: John Hale Jody Threet Sujeet Shenoi 
Address: Keplinger Hall,  74104-3189, USA  
Affiliation: Department of Computer Science  University of Tulsa Tulsa, Oklahoma  
Abstract: Access control is the cornerstone of information security and integrity, but the semantic diversity of object models makes it difficult to provide a common foundation for access control in object-oriented systems. This paper presents a primitive capability-based access control architecture that can model a variety of authorization policies for object-oriented systems. Developed within the framework of the Meta-Object Operating System Environment (MOOSE), the architecture integrates access control mechanisms at the meta-object level to provide a foundation for access control in heterogeneous object models.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G.A. Agha. </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: The underlying principles of ROC, e.g., encapsulation and tuple-based communication, 6 Method Interface 1 Message Handler Msg Object Registry Method Interface 2 Method Arbiter 2 Method Body 2 Access Control List Object A have facilitated the formal design of MOM. The design of MOM is influenced by ACTORS <ref> [1] </ref> and Concurrent Aggregates [7]. MOM supports core object functionality, including persistence, method invocation, asynchronous message-passing, delegation and aggregation. Virtually any object model can be constructed from this core functionality. Access control policies are modeled in MOM systems with object access control lists (OACLs) and message filters. <p> This obviates the use of message filters and OACLs for each and every object in MOM, resulting in a flexible and potentially lightweight access control system. 12 5 Related Work The approach taken by this work is motivated by the object systems LOOPS [27] and ACTORS <ref> [1] </ref>. Both systems probed the foundations of the object paradigm and developed sophisticated meta-object models. The meta-level access control mechanisms embedded in the Meta-Object Model (MOM) described in this paper support multipolicy access control in heterogeneous object systems. The additional consideration of decentralized authorization is geared toward distributed objects.
Reference: [2] <author> D. Bell. </author> <booktitle> Modeling the "multipolicy machine". In Proceedings of the New Security Paradigms Workshop, </booktitle> <pages> pages 2-9, </pages> <year> 1994. </year>
Reference-contexts: MOM stipulates that access always occurs through a method invocation; for example, reads and writes are implemented using specialized accessor methods. This facilitates policy specifications that are emergent from meta-level access control primitives and MOM. Multipolicy access control is becoming an important area of research <ref> [2, 4, 17] </ref>. The mechanisms and models provided by multipolicy systems enable users to protect each object according to a different policy. The architecture described in [4] employs flexible access control mechanisms and mediators [30].
Reference: [3] <author> E. Bertino, S. Jajodia, and P. Samarati. </author> <title> Access control in object-oriented database systems: Some approaches and issues. </title> <editor> In N. Adam and B. Bhargava, editors, </editor> <booktitle> Advanced Database Concepts and Research Issues, </booktitle> <pages> pages 17-44. </pages> <publisher> LNCS 759, Springer - Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Integrating these features in a meta-object model results in a rich framework for expressing a variety of authorization models for object-oriented systems. Research efforts in object-oriented database systems and in database security have also influenced our work <ref> [3, 8, 9, 11, 16, 28] </ref>. The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations [23]. The model is based on four fundamental access types and also incorporates roles.
Reference: [4] <author> E. Bertino, S. Jajodia, and P. Samarati. </author> <title> Supporting multiple access control policies in databases systems. </title> <booktitle> In Proceedings of the IEEE Computer Society Symposium on Security and Privacy, </booktitle> <pages> pages 94-109, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: MOM stipulates that access always occurs through a method invocation; for example, reads and writes are implemented using specialized accessor methods. This facilitates policy specifications that are emergent from meta-level access control primitives and MOM. Multipolicy access control is becoming an important area of research <ref> [2, 4, 17] </ref>. The mechanisms and models provided by multipolicy systems enable users to protect each object according to a different policy. The architecture described in [4] employs flexible access control mechanisms and mediators [30]. <p> Multipolicy access control is becoming an important area of research [2, 4, 17]. The mechanisms and models provided by multipolicy systems enable users to protect each object according to a different policy. The architecture described in <ref> [4] </ref> employs flexible access control mechanisms and mediators [30]. Mediators are used to shape the access control mechanism so that it can enforce user-specified access control policies.
Reference: [5] <author> E. Bertino, F. Origgi, and P. Samarati. </author> <title> A new authorization model for object-oriented databases. </title> <editor> In J. Biskup, M. Morgenstern, and C. Landwehr, editors, </editor> <title> Database Security VIII, Status and Prospects: </title> <booktitle> Proceedings of the Eighth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 199-222, </pages> <year> 1994. </year>
Reference-contexts: While object-oriented technology has become a touchstone for developing modern distributed systems, the full potential of access control mechanisms for objects has yet to be realized. Most of the advances and successful applications of object access control have been confined to the area of database security <ref> [5, 6, 12, 18, 19, 25] </ref>. Several factors have limited the incorporation of access control mechanisms in mainstream distributed object systems technology. Object models are heterogeneous in nature with tremendous semantic diversity. <p> The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations [23]. The model is based on four fundamental access types and also incorporates roles. An extension to this model described in <ref> [5] </ref> supports additional access types and the modeling of type dependencies. The extended model also clarifies the semantics of subject groups and considers object versions and the potential for distributed authorization control.
Reference: [6] <author> H.H. Bruggemann. </author> <title> Rights in an object-oriented environment. </title> <editor> In C. Landwehr and S. Jajodia, editors, </editor> <title> Database Security V, Status and Prospects: </title> <booktitle> Proceedings of the Fifth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 99-115, </pages> <year> 1992. </year>
Reference-contexts: While object-oriented technology has become a touchstone for developing modern distributed systems, the full potential of access control mechanisms for objects has yet to be realized. Most of the advances and successful applications of object access control have been confined to the area of database security <ref> [5, 6, 12, 18, 19, 25] </ref>. Several factors have limited the incorporation of access control mechanisms in mainstream distributed object systems technology. Object models are heterogeneous in nature with tremendous semantic diversity.
Reference: [7] <author> A.A. Chien. </author> <title> Concurrent Aggregates. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1993. </year>
Reference-contexts: The design of MOM is influenced by ACTORS [1] and Concurrent Aggregates <ref> [7] </ref>. MOM supports core object functionality, including persistence, method invocation, asynchronous message-passing, delegation and aggregation. Virtually any object model can be constructed from this core functionality. Access control policies are modeled in MOM systems with object access control lists (OACLs) and message filters.
Reference: [8] <author> F. Cuppens and A. Gabillon. </author> <title> A logical approach to model a multilevel object oriented database. </title> <booktitle> In Proceedings of the Tenth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 116-139, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Integrating these features in a meta-object model results in a rich framework for expressing a variety of authorization models for object-oriented systems. Research efforts in object-oriented database systems and in database security have also influenced our work <ref> [3, 8, 9, 11, 16, 28] </ref>. The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations [23]. The model is based on four fundamental access types and also incorporates roles.
Reference: [9] <author> K. Ditttrich, M. Hartig, and H. Pfefferle. </author> <title> Discretionary access control in structurally object-oriented database systems. </title> <editor> In C. Landwehr, editor, </editor> <title> Database Security II, Status and Prospects: </title> <booktitle> Proceedings of the Second IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 105-121, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Integrating these features in a meta-object model results in a rich framework for expressing a variety of authorization models for object-oriented systems. Research efforts in object-oriented database systems and in database security have also influenced our work <ref> [3, 8, 9, 11, 16, 28] </ref>. The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations [23]. The model is based on four fundamental access types and also incorporates roles.
Reference: [10] <author> R. Fabry. </author> <title> Capability-based addressing. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 403-412, </pages> <year> 1974. </year>
Reference-contexts: Submitted to The 11th IFIP WG 11.3 Workshop on Database Security, Lake Tahoe, California, August 11-13, 1997. 1 Capabilities provide a useful mechanism for reconciling the inherent differences between identity-based DAC, label-based MAC and RBAC. Capabilities are unforgeable tokens that give the possessor certain rights to an object <ref> [10, 20, 21] </ref>. Traditionally, they have been used to keep track of access rights at runtime. The similarities between runtime environments and distributed object systems suggest the use of capabilities as a meta-model of access control for concurrent objects operating in distributed environments. <p> Meta-objects that can spawn other meta-objects (using a method called NewObject ()) model classes. Furthermore, meta-objects capable of spawning "class" meta-objects are meta-classes. MetaClass and Class are both meta-classes. keys:-a,c SUBJECT1 keys:-d,e SUBJECT2 Access Granted Access Denied -a OBJECT locks:-a:read, b:write read read -- This model uses capabilities <ref> [10, 20, 21] </ref> to provide method-based access control for meta-objects. A capability is an unforgeable token that a subject uses as a ticket for object access.
Reference: [11] <author> E.B. Fernandez, R.B. France, and D. Wei. </author> <title> User group structures in object-oriented databases. In Database Security VIII, Status and Prospects: </title> <booktitle> Proceedings of the Ninth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 57-76, </pages> <month> August </month> <year> 1994. </year> <month> 14 </month>
Reference-contexts: Integrating these features in a meta-object model results in a rich framework for expressing a variety of authorization models for object-oriented systems. Research efforts in object-oriented database systems and in database security have also influenced our work <ref> [3, 8, 9, 11, 16, 28] </ref>. The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations [23]. The model is based on four fundamental access types and also incorporates roles.
Reference: [12] <author> E.B. Fernandez, R.B. France, and D. Wei. </author> <title> A formal specification of an authorization model for object--oriented databases. </title> <editor> In D. Spooner, S. Demurjian, and J. Dobson, editors, </editor> <title> Database Security IX, Status and Prospects: </title> <booktitle> Proceedings of the Ninth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 95-110, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: While object-oriented technology has become a touchstone for developing modern distributed systems, the full potential of access control mechanisms for objects has yet to be realized. Most of the advances and successful applications of object access control have been confined to the area of database security <ref> [5, 6, 12, 18, 19, 25] </ref>. Several factors have limited the incorporation of access control mechanisms in mainstream distributed object systems technology. Object models are heterogeneous in nature with tremendous semantic diversity.
Reference: [13] <author> Open Systems Foundation. </author> <title> Security in a distributed environment. </title> <type> Technical Report OSF-O-WP11-1090-3, </type> <institution> Open Systems Foundation, Cambridge, Massachusetts, </institution> <year> 1992. </year>
Reference-contexts: The Distributed Computing Environment (DCE) requires decentralized authorization services to cope with the difficulties inherent in open distributed environments. DCE's authorization service associates access control lists with servers, files and records, specifying legal operations for each user <ref> [13, 24] </ref>. Principals (subjects) are registered in a database and assigned group and organization membership. A member's name, group and organization information define the member's privilege attributes. The authorization service works in concert with DCE's authentication service.
Reference: [14] <author> N. Gal-Oz, E. Guhed, and E.B. Fernandez. </author> <title> A model of methods access authorization in object-oriented databases. </title> <booktitle> In Proceedings of the Nineteenth International Conference on Very Large Databases, </booktitle> <pages> pages 52-61, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The execute type for method-based access control was proposed by Fernandez et al. <ref> [14] </ref>. Implicit authorization is a convenient way of propagating permissions and protections in a large environment. The idea is that permissions/protections can be given to an entire class of subjects/objects using one authorization rule. <p> An important advantage of our model is that semantic-based forms of implicit authorization emerge in any object-oriented system designed using MOM. Fernandez introduced method-based access control for object-oriented systems <ref> [14] </ref>. By using methods as a basis for access control, first-order access types (e.g., read and write) are reduced to a single execute type. We have chosen method-based access control because it complements MOM nicely.
Reference: [15] <author> J. Hale, J. Threet, and S. Shenoi. </author> <title> A framework for high assurance security of distributed objects. </title> <booktitle> In Proceedings of the Tenth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 76-91, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Moreover, most access control mechanisms are brittle, incapable of supporting multiple policies. The Meta-Object Operating System Environment (MOOSE) being developed at the University of Tulsa addresses the secure interoperability of heterogeneous distributed object systems through the "meta-level integration" of primitive security mechanisms <ref> [15] </ref>. Object-oriented systems share a common theoretical underpinning the notion of a meta-object. MOOSE uses the meta-object concept to model diverse object-oriented systems and provide a foundation for secure interoperability. The Meta-Object Model (MOM) in MOOSE expresses diverse object-oriented features using a few core mechanisms.
Reference: [16] <author> W. </author> <title> Herndon. An interpretation of Clark-Wilson for object-oriented database management systems. </title> <editor> In T. Keefe and C. Landwehr, editors, </editor> <title> Database Security VII, Status and Prospects: </title> <booktitle> Proceedings of the Seventh IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 65-85, </pages> <year> 1994. </year>
Reference-contexts: Integrating these features in a meta-object model results in a rich framework for expressing a variety of authorization models for object-oriented systems. Research efforts in object-oriented database systems and in database security have also influenced our work <ref> [3, 8, 9, 11, 16, 28] </ref>. The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations [23]. The model is based on four fundamental access types and also incorporates roles.
Reference: [17] <author> H. Hosmer. </author> <title> Multipolicy paradigm II. </title> <booktitle> In Proceedings of the New Security Paradigms Workshop, </booktitle> <year> 1992. </year>
Reference-contexts: MOM stipulates that access always occurs through a method invocation; for example, reads and writes are implemented using specialized accessor methods. This facilitates policy specifications that are emergent from meta-level access control primitives and MOM. Multipolicy access control is becoming an important area of research <ref> [2, 4, 17] </ref>. The mechanisms and models provided by multipolicy systems enable users to protect each object according to a different policy. The architecture described in [4] employs flexible access control mechanisms and mediators [30].
Reference: [18] <author> S. Jajodia and B. Kogan. </author> <title> Integrating an object-oriented data model with multilevel security. </title> <booktitle> In Proceedings of the IEEE Computer Society Symposium on Security and Privacy, </booktitle> <pages> pages 76-85, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: While object-oriented technology has become a touchstone for developing modern distributed systems, the full potential of access control mechanisms for objects has yet to be realized. Most of the advances and successful applications of object access control have been confined to the area of database security <ref> [5, 6, 12, 18, 19, 25] </ref>. Several factors have limited the incorporation of access control mechanisms in mainstream distributed object systems technology. Object models are heterogeneous in nature with tremendous semantic diversity. <p> Strong rules cannot be overriden by weak ones. While the presence of such rules make it difficult to derive an authorization rule for a particular event, they allow for highly expressive authorization models. Messages are the principal medium of communication in object-oriented systems. Jajodia et al. <ref> [18] </ref> were the first to propose that messages be used as the focus of access control mechanisms in object systems.
Reference: [19] <author> D. Jonscher and K.R. Dittrich. </author> <title> Argos a configurable access control system for interoperable environment. </title> <editor> In D. Spooner, S. Demurjian, and J. Dobson, editors, </editor> <title> Database Security IX, Status and Prospects: </title> <booktitle> Proceedings of the Ninth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 43-60, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: While object-oriented technology has become a touchstone for developing modern distributed systems, the full potential of access control mechanisms for objects has yet to be realized. Most of the advances and successful applications of object access control have been confined to the area of database security <ref> [5, 6, 12, 18, 19, 25] </ref>. Several factors have limited the incorporation of access control mechanisms in mainstream distributed object systems technology. Object models are heterogeneous in nature with tremendous semantic diversity. <p> Mediators are used to shape the access control mechanism so that it can enforce user-specified access control policies. Our work in the area of multipolicy systems seeks a common ground for access control mechanisms that can support the interoperation of disparate authorization policies. The Argos access control system <ref> [19] </ref> also shares a goal with the work presented here that of developing a unified view of heterogeneous access control models in open distributed environments. Argos achieves this goal by incorporating features of various identity-based authorization models.
Reference: [20] <author> P. Karger. </author> <title> An augmented capability architecture to support lattice security. </title> <booktitle> In Proceedings of the IEEE Computer Society Symposium on Security and Privacy, </booktitle> <pages> pages 2-12, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Submitted to The 11th IFIP WG 11.3 Workshop on Database Security, Lake Tahoe, California, August 11-13, 1997. 1 Capabilities provide a useful mechanism for reconciling the inherent differences between identity-based DAC, label-based MAC and RBAC. Capabilities are unforgeable tokens that give the possessor certain rights to an object <ref> [10, 20, 21] </ref>. Traditionally, they have been used to keep track of access rights at runtime. The similarities between runtime environments and distributed object systems suggest the use of capabilities as a meta-model of access control for concurrent objects operating in distributed environments. <p> Meta-objects that can spawn other meta-objects (using a method called NewObject ()) model classes. Furthermore, meta-objects capable of spawning "class" meta-objects are meta-classes. MetaClass and Class are both meta-classes. keys:-a,c SUBJECT1 keys:-d,e SUBJECT2 Access Granted Access Denied -a OBJECT locks:-a:read, b:write read read -- This model uses capabilities <ref> [10, 20, 21] </ref> to provide method-based access control for meta-objects. A capability is an unforgeable token that a subject uses as a ticket for object access.
Reference: [21] <author> P. Karger. </author> <title> Implementing commercial data integrity with secure capabilities. </title> <booktitle> In Proceedings of the IEEE Computer Society Symposium on Security and Privacy, </booktitle> <pages> pages 130-139, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Submitted to The 11th IFIP WG 11.3 Workshop on Database Security, Lake Tahoe, California, August 11-13, 1997. 1 Capabilities provide a useful mechanism for reconciling the inherent differences between identity-based DAC, label-based MAC and RBAC. Capabilities are unforgeable tokens that give the possessor certain rights to an object <ref> [10, 20, 21] </ref>. Traditionally, they have been used to keep track of access rights at runtime. The similarities between runtime environments and distributed object systems suggest the use of capabilities as a meta-model of access control for concurrent objects operating in distributed environments. <p> Meta-objects that can spawn other meta-objects (using a method called NewObject ()) model classes. Furthermore, meta-objects capable of spawning "class" meta-objects are meta-classes. MetaClass and Class are both meta-classes. keys:-a,c SUBJECT1 keys:-d,e SUBJECT2 Access Granted Access Denied -a OBJECT locks:-a:read, b:write read read -- This model uses capabilities <ref> [10, 20, 21] </ref> to provide method-based access control for meta-objects. A capability is an unforgeable token that a subject uses as a ticket for object access.
Reference: [22] <author> T.F. Keefe, W.T. Tsai, and M.B. Thuraisingham. </author> <title> Soda: A secure object-oriented database system. </title> <journal> Computers & Security, </journal> <volume> 8(6) </volume> <pages> 517-533, </pages> <year> 1989. </year>
Reference-contexts: Also, it defines rules for implicit authorization and specifies a set of commands to take systems from one authorization state to another. Although access control is fundamental to information security and integrity, authorization models in object-oriented database management systems (OODBMSs) <ref> [22, 23, 26] </ref> lack a common perspective compared with those for relational database management systems (RDBMSs). In fact, many OODBMSs do not provide any type of access control. The semantic diversity of object models is partly to blame. For example, some object models support multiple inheritance, while others do not.
Reference: [23] <author> F. Rabitti, E. Bertino, W. Kim, and D. Woelk. </author> <title> A model of authorization for next-generation database systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(1) </volume> <pages> 88-1331, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Also, it defines rules for implicit authorization and specifies a set of commands to take systems from one authorization state to another. Although access control is fundamental to information security and integrity, authorization models in object-oriented database management systems (OODBMSs) <ref> [22, 23, 26] </ref> lack a common perspective compared with those for relational database management systems (RDBMSs). In fact, many OODBMSs do not provide any type of access control. The semantic diversity of object models is partly to blame. For example, some object models support multiple inheritance, while others do not. <p> Research efforts in object-oriented database systems and in database security have also influenced our work [3, 8, 9, 11, 16, 28]. The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations <ref> [23] </ref>. The model is based on four fundamental access types and also incorporates roles. An extension to this model described in [5] supports additional access types and the modeling of type dependencies.
Reference: [24] <author> W. Rosenberry, D. Kenney, and G. Fisher. </author> <title> Understanding DCE. </title> <publisher> O'Reilly and Associates, Inc., </publisher> <address> Se-bastopal, California, </address> <year> 1993. </year>
Reference-contexts: The Distributed Computing Environment (DCE) requires decentralized authorization services to cope with the difficulties inherent in open distributed environments. DCE's authorization service associates access control lists with servers, files and records, specifying legal operations for each user <ref> [13, 24] </ref>. Principals (subjects) are registered in a database and assigned group and organization membership. A member's name, group and organization information define the member's privilege attributes. The authorization service works in concert with DCE's authentication service.
Reference: [25] <author> A. Rosenthal, J. Williams, W. Herndon, and B. Thuraisingham. </author> <title> A fine grained access control model for object-oriented dbms. </title> <editor> In J. Biskup, M. Morgenstern, and C. Landwehr, editors, </editor> <title> Database Security VIII, Status and Prospects: </title> <booktitle> Proceedings of the Eighth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 319-334, </pages> <year> 1994. </year>
Reference-contexts: While object-oriented technology has become a touchstone for developing modern distributed systems, the full potential of access control mechanisms for objects has yet to be realized. Most of the advances and successful applications of object access control have been confined to the area of database security <ref> [5, 6, 12, 18, 19, 25] </ref>. Several factors have limited the incorporation of access control mechanisms in mainstream distributed object systems technology. Object models are heterogeneous in nature with tremendous semantic diversity.
Reference: [26] <author> M. Schaefer, P. Martel, T. Kanawati, and V. Lyons. </author> <title> Multilevel data model for the trusted ontos prototype. </title> <editor> In D. Spooner, S. Demurjian, and J. Dobson, editors, </editor> <title> Database Security IX, Status and Prospects: </title> <booktitle> Proceedings of the Ninth IFIP WG 11.3 Workshop on Database Security, </booktitle> <pages> pages 117-126, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Also, it defines rules for implicit authorization and specifies a set of commands to take systems from one authorization state to another. Although access control is fundamental to information security and integrity, authorization models in object-oriented database management systems (OODBMSs) <ref> [22, 23, 26] </ref> lack a common perspective compared with those for relational database management systems (RDBMSs). In fact, many OODBMSs do not provide any type of access control. The semantic diversity of object models is partly to blame. For example, some object models support multiple inheritance, while others do not.
Reference: [27] <author> M. Stefik and G. Bobrow. </author> <title> Object-oriented programming: Themes and variations. </title> <journal> AI Magazine, </journal> <month> De-cember </month> <year> 1985. </year>
Reference-contexts: It is designed to be integrated at the meta-object level to permit a unified treatment of meta-classes, classes and objects <ref> [27] </ref>. The main requirement of the meta-level access control model is that it be flexible enough to support multiple access control policies in distributed computing environments. <p> This obviates the use of message filters and OACLs for each and every object in MOM, resulting in a flexible and potentially lightweight access control system. 12 5 Related Work The approach taken by this work is motivated by the object systems LOOPS <ref> [27] </ref> and ACTORS [1]. Both systems probed the foundations of the object paradigm and developed sophisticated meta-object models. The meta-level access control mechanisms embedded in the Meta-Object Model (MOM) described in this paper support multipolicy access control in heterogeneous object systems.
Reference: [28] <author> R.K. Thomas and R. Sandhu. </author> <title> Discretionary access control in object-oriented databases: </title> <booktitle> issues and research directions. In Proceedings of the Sixteenth National Computer Security Conference, </booktitle> <pages> pages 63-74, </pages> <month> September </month> <year> 1993. </year> <month> 15 </month>
Reference-contexts: Integrating these features in a meta-object model results in a rich framework for expressing a variety of authorization models for object-oriented systems. Research efforts in object-oriented database systems and in database security have also influenced our work <ref> [3, 8, 9, 11, 16, 28] </ref>. The ORION/ITASCA system adopts a model of discretionary access control for objects that embraces notions of explicit/implicit, positive/negative and weak/strong authorizations [23]. The model is based on four fundamental access types and also incorporates roles.
Reference: [29] <author> J. Threet, J. Hale, and S. Shenoi. </author> <title> A process calculus for distributed objects. </title> <type> Technical Report UTULSA--MCS-96-7, </type> <institution> The University of Tulsa, Tulsa, Oklahoma, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: MOM will permit developers to construct and analyze secure object-oriented programming languages and database management systems. This section describes MOM and the integration of capability-based access control primitives in MOM. MOM is defined with the Robust Object Calculus (ROC), a process calculus tailored to modeling distributed objects <ref> [29] </ref>. The underlying principles of ROC, e.g., encapsulation and tuple-based communication, 6 Method Interface 1 Message Handler Msg Object Registry Method Interface 2 Method Arbiter 2 Method Body 2 Access Control List Object A have facilitated the formal design of MOM.
Reference: [30] <author> G. Wiederhold. </author> <title> Mediators in the architecture of future information systems: A new approach. </title> <journal> IEEE Computer, </journal> <volume> 25 </volume> <pages> 38-49, </pages> <year> 1992. </year> <month> 16 </month>
Reference-contexts: Multipolicy access control is becoming an important area of research [2, 4, 17]. The mechanisms and models provided by multipolicy systems enable users to protect each object according to a different policy. The architecture described in [4] employs flexible access control mechanisms and mediators <ref> [30] </ref>. Mediators are used to shape the access control mechanism so that it can enforce user-specified access control policies. Our work in the area of multipolicy systems seeks a common ground for access control mechanisms that can support the interoperation of disparate authorization policies.
References-found: 30

