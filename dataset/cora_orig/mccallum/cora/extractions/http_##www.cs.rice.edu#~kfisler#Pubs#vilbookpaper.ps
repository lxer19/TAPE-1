URL: http://www.cs.rice.edu/~kfisler/Pubs/vilbookpaper.ps
Refering-URL: http://www.cs.rice.edu/~kfisler/publications.html
Root-URL: 
Email: kfisler@cs.indiana.edu  
Title: Exploiting the Potential of Diagrams in Guiding Hardware Reasoning  
Author: Kathi Fisler 
Date: August 26, 1997  
Address: Lindley Hall 215  Bloomington, IN 47405  
Affiliation: Department of Computer Science  Indiana University  
Abstract: Formal methods promises designers increased assurance in and understanding of their designs. Assurance is gained via proof; understanding is gained via the construction of proof. Researchers have developed powerful proof techniques; they have not focused sufficiently on creating tools to support reasoning. As a result, formal methods fails to attain its full potential. We argue that by formalizing the notations provided by diagrammatic representations, we can build tools that provide support for both proof and reasoning, thereby making formal methods more widely applicable by designers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jon Barwise and John Etchemendy. </author> <title> Information, Infons, and Inference. </title> <editor> In Robin Cooper, Kuniaki Mukai, and John Perry, editors. </editor> <title> Situation Theory and Its Applications. </title> <publisher> Stanford University Press, </publisher> <year> 1990. </year>
Reference-contexts: written D j= E if for all assignments i, hD; ii j= E. 3.6 Rules of Inference and Methods of Proof Although a general discussion of the theory of heterogeneous inference is out of the scope of this paper, our presentation is motivated by the work of Barwise and Etchemendy <ref> [1] </ref>. When stating these rules, we use the term representation as opposed to the more traditional term formula to avoid the sentential connotations associated with the latter.
Reference: [2] <editor> Jon Barwise and John Etchemendy. Hyperproof. </editor> <publisher> CSLI Lecture Notes, University of Chicago Press, </publisher> <year> 1994. </year>
Reference: [3] <author> Jon Barwise and John Etchemendy. </author> <title> Logic, Proof, and Reasoning. </title> <editor> In Alan Makinowski, editor, </editor> <title> Companion to Logic. Blackwell, </title> <note> to appear. </note>
Reference-contexts: Tools that are not supportive of reasoning therefore fail to provide the full benefits of formal methods. We can augment our current methodologies to address this problem, but we first need to understand reasoning and its role in hardware design. Barwise and Etchemendy <ref> [3] </ref> view valid reasoning as "the exploration of a space of possibilities" defined by the given information and the desired reasoning task. Under this definition, the more clearly a representation system allows for the exploration of this space, the more naturally reasoning can be conducted within this representation.
Reference: [4] <author> Jon Barwise and John Etchemendy. </author> <title> Visual Information and Valid Reasoning. This volume. </title>
Reference-contexts: The key to using diagrammatic representations effectively is to use different styles simultaneously. Multiple representations of information interact formally in heterogeneous logics, an introduction to which appears in Barwise and Etchemendy's paper in this volume <ref> [4] </ref>. We have developed a heterogeneous hardware logic that encompasses diagrammatic and sentential representations. Section 2 develops a simple example to illustrate hardware reasoning with diagrams. Section 3 defines our proposed logic; it supports circuit diagrams, timing diagrams, a variant of state machines, and second-order logic.
Reference: [5] <author> L.K. Dillon, G. Kutty, L.E. Moser, P.M. Melliar-Smith, and Y.S. Ramakrishna. </author> <title> A Graphical Interval Logic for Specifying Concurrent Systems. </title> <type> Technical Report, </type> <institution> UCSB, </institution> <year> 1993. </year>
Reference-contexts: Other researchers have explored formal usage of diagrams in limited situations in hardware reasoning. Timing diagrams have received the most attention, being cited as a more natural formalism for use in place of temporal logic [17] [10]. Other systems have employed more general usage of diagrammatic representations <ref> [5] </ref> [18] [6]. All of these systems formalize diagrams by translating them into known sentential logics; proofs in these systems are carried out in the sentential logic, with the diagrams serving as interface tools. The translation approach is reasonable when using a single diagrammatic notation.
Reference: [6] <author> Simon Finn, Michael P. Fourman, Michael Francis, and Robert Harris. </author> <title> Formal System Design | Interactive Synthesis on Computer-Assisted Formal Reasoning. </title> <editor> In Luc Claesen, editor, </editor> <title> Formal VLSI Specification and Synthesis: VLSI Design-Methods-I. </title> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Other researchers have explored formal usage of diagrams in limited situations in hardware reasoning. Timing diagrams have received the most attention, being cited as a more natural formalism for use in place of temporal logic [17] [10]. Other systems have employed more general usage of diagrammatic representations [5] [18] <ref> [6] </ref>. All of these systems formalize diagrams by translating them into known sentential logics; proofs in these systems are carried out in the sentential logic, with the diagrams serving as interface tools. The translation approach is reasonable when using a single diagrammatic notation.
Reference: [7] <author> Kathi Fisler. </author> <title> A Canonical Form for Circuit Diagrams. </title> <institution> Indiana University Department of Com puter Science Technical Report TR432, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: The soundness of these rules, established but not proven here, is sufficient to assure us that the two circuits are behaviorally equivalent. We are in the process of proving a completeness result based on a canonical form for circuit diagrams <ref> [7] </ref>; this would enable us to transform any two behaviorally equivalent circuit diagrams into one another using the inference rules. Given implementations of the three controllers, all that remains is to design the components necessary to interface the three implementations.
Reference: [8] <author> Kathi Fisler. </author> <title> A Logical Formalization of Hardware Design Diagrams. </title> <institution> Indiana University De partment of Computer Science Technical Report TR416, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: The diagrammatic portion of heterogeneous hardware logic was first presented in <ref> [8] </ref>. This paper redefines the syntax and semantics for timing diagrams originally presented in [8]; in addition, the sentential portion of the logic is formally presented for the first time. The circuit diagram and ASM portions of the logic are unchanged from [8], but are provided here for reference. <p> The diagrammatic portion of heterogeneous hardware logic was first presented in <ref> [8] </ref>. This paper redefines the syntax and semantics for timing diagrams originally presented in [8]; in addition, the sentential portion of the logic is formally presented for the first time. The circuit diagram and ASM portions of the logic are unchanged from [8], but are provided here for reference. <p> of heterogeneous hardware logic was first presented in <ref> [8] </ref>. This paper redefines the syntax and semantics for timing diagrams originally presented in [8]; in addition, the sentential portion of the logic is formally presented for the first time. The circuit diagram and ASM portions of the logic are unchanged from [8], but are provided here for reference. We first define a model of physical devices, which will serve as a common semantic basis for the four syntactic representations. The syntax and semantics of each representation is presented in turn in subsections 3.2 through 3.5. <p> A wire w = hp a ; p b i is branch-free iff w is the unique wire with p a as its first component; 1 The proof of uniqueness appears in <ref> [8] </ref>. 7 otherwise w is a branching wire. We use the term circuit sketch as opposed to circuit diagram so that we may reserve the latter term for only those diagrams which are well-formed. A formal definition of this term will be presented shortly. <p> D is a behavioral implementation of g if D is behaviorally equivalent to some device D 0 which is a structural implementation of g. This is written D j= b g. 3.4 Timing Diagrams The timing diagram syntax and semantics originally presented in <ref> [8] </ref> is too restricted to be able to represent general timing relationships. We have updated our syntax and semantics to follow the much more flexible system of Schlor and Damm [17].
Reference: [9] <author> M.J.C. Gordon. </author> <title> Why higher order logic is a good formalism for specifying and verifying hard ware. </title> <editor> In G.J. Milne and P.A. Subrahmanyam, editors. </editor> <booktitle> Formal Aspects of VLSI Design: Proceedings of the 1985 Edinburgh Conference on VLSI. </booktitle> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: Our heterogeneous logic approach has been criticized as being unnecessarily complex [15]; traditional, sentential logics are argued to be simpler and more flexible because they can model many properties using a single notation <ref> [9] </ref>. Such generality comes at a cost with respect to natural reasoning. We feel that complexity in the underlying system is a suitable tradeoff for greater usability. Other researchers have explored formal usage of diagrams in limited situations in hardware reasoning.
Reference: [10] <author> K. Khordoc, M. Dufresne, E. Cerny, P. Babkine, and A. Silburt. </author> <title> Integrating Behavior and Tim ing in Executable Specifications. </title> <booktitle> In Proceedings, Computer Hardware Description Languages and their Applications, </booktitle> <pages> pp. 385-402, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: This is a very small example, yet it illustrates our point nicely: using diagrams for reasoning about circuit and value problems is advantageous. Diagrams can also play a role in the specification and verification of systems. Timing diagrams are becoming a more popular notation for expressing behavioral specifications [17] <ref> [10] </ref>, presumably because people find them clearer to use than formalisms such as temporal logic. To contrast methods, we present the behavioral specification of the single pulser in three representations: second-order logic, temporal logic, and timing diagrams. <p> Other researchers have explored formal usage of diagrams in limited situations in hardware reasoning. Timing diagrams have received the most attention, being cited as a more natural formalism for use in place of temporal logic [17] <ref> [10] </ref>. Other systems have employed more general usage of diagrammatic representations [5] [18] [6]. All of these systems formalize diagrams by translating them into known sentential logics; proofs in these systems are carried out in the sentential logic, with the diagrams serving as interface tools.
Reference: [11] <author> Thomas Frederick Melham. </author> <title> Formalizing Abstraction Mechanisms for Hardware Verification in Higher Order Logic. </title> <institution> University of Cambridge Computer Laboratory, </institution> <type> Technical Report 201, </type> <month> August </month> <year> 1990. </year>
Reference-contexts: Our approach is also highly modular; adding a new representation does not involve integration of additional underlying logics. Additional research is required before we can construct a tool based upon our logic. We need to extend it with support for making abstractions <ref> [11] </ref> and with better support for automatic verification methods. Automatic methods are required for handling large examples. One might question why, if we intend to automate the logic, we are concerned with how well the logic supports human reasoning.
Reference: [12] <institution> NASA Langley Formal Methods Workshop. Panel Sessions and Discussions. </institution> <month> May, </month> <year> 1995. </year>
Reference-contexts: Most designers, not having been trained as logicians, find the methodologies and notations very unnatural. Industrial sites starting out with formal methods must often rely on external verification professionals to help them use these tools effectively <ref> [12] </ref>. Tools that are not supportive of reasoning therefore fail to provide the full benefits of formal methods. We can augment our current methodologies to address this problem, but we first need to understand reasoning and its role in hardware design.
Reference: [13] <institution> National Semiconductor Corporation. LS/S/TTL Logic Databook, </institution> <year> 1987. </year>
Reference-contexts: As an example, consider the logic required to interface to the counter TC that records how many cars are currently in the tunnel. Assume we have chosen to use a LS191 up-down counter <ref> [13] </ref> in our implementation. This counter has an enable signal and a single signal for indicating whether the counter should count up or count down.
Reference: [14] <author> Franklin P. Prosser and David E. Winkel. </author> <title> The Art of Digital Design, 2nd edition. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: Each conditional oval contains one or more variable names to be assigned T when control reaches the oval. Examples of ASM charts appear in figure 4 (page 17) and more extensive 8 discussion appears in <ref> [14] </ref>. As in the section on circuit diagrams, we will reserve the term ASM chart for what we wish to consider well-formed diagrams, using the term ASM graph for the general case. <p> This too can be done using the inference rules of the logic. There are several algorithms for converting a state machine into physical hardware <ref> [14] </ref>; for this example we will take a state-encoded approach to the design. The circuit diagrams provided in figure 6 for 20 using a state-encoding of green=00, entering=01, exiting=10, and red=11.
Reference: [15] <institution> Reviewers' Comments on papers submitted to Theorem Provers and Circuit Design 1994 and Computer Hardware Description Languages and Their Applications, </institution> <year> 1995. </year>
Reference-contexts: Combining specialized representations within a heterogeneous logic provides a powerful paradigm for supporting reasoning in addition to proof. A heterogeneous hardware logic that includes diagrams therefore suggests a possible solution to the usability problem in formal methods. Our heterogeneous logic approach has been criticized as being unnecessarily complex <ref> [15] </ref>; traditional, sentential logics are argued to be simpler and more flexible because they can model many properties using a single notation [9]. Such generality comes at a cost with respect to natural reasoning. We feel that complexity in the underlying system is a suitable tradeoff for greater usability.
Reference: [16] <author> John Rushby. </author> <title> Formal Methods and Digital Systems Validation for Airborne Systems. </title> <type> NASA Langley Contractor Report 4551, </type> <month> December </month> <year> 1993. </year>
Reference-contexts: Many of the problems in software and hardware design are due to imprecision, ambiguity, incompleteness, misunderstanding, and just plain mistakes in the statement of top-level requirements, in the description of intermediate designs, or in the specification of components and interfaces. John Rushby <ref> [16] </ref> Desire for proofs of correctness of systems spawned the research area known as "formal methods". Today's systems are of sufficient complexity that testing is infeasible, both computationally and financially. <p> Techniques used can range from writing system descriptions in a formal notation to verification that the designed system satisfies a particular behavioral specification. A good general introduction to formal methods appears in <ref> [16] </ref>. Ideally, using formal methods increases our assurance in and understanding of our designs. Assurance results from proof, while understanding results from the process of producing the proof. Successful use of formal methods therefore requires powerful proof techniques and clear logical notations.
Reference: [17] <author> Rainer Schlor and Werner Damm. </author> <title> Specification and Verification of System-Level Hardware Designs using Timing Diagrams. </title> <booktitle> In Proceedings of the European Conference on Design and Automation. </booktitle> <month> February </month> <year> 1993. </year>
Reference-contexts: This is a very small example, yet it illustrates our point nicely: using diagrams for reasoning about circuit and value problems is advantageous. Diagrams can also play a role in the specification and verification of systems. Timing diagrams are becoming a more popular notation for expressing behavioral specifications <ref> [17] </ref> [10], presumably because people find them clearer to use than formalisms such as temporal logic. To contrast methods, we present the behavioral specification of the single pulser in three representations: second-order logic, temporal logic, and timing diagrams. <p> Combined edges are used when safe and live edges are needed between the same two events. Simultaneous edges require the events to happen concurrently, while conflict edges do not permit the events to occur simultaneously. These notations and definitions are taken from the work of Schlor and Damm <ref> [17] </ref>. In order to draw simultaneous edges, it is often necessary to cross events that should not be synchronized. In the event that a synchronization line applies to only some of the events it crosses, those events it relates will be attached to the line using a dark circle. <p> This is written D j= b g. 3.4 Timing Diagrams The timing diagram syntax and semantics originally presented in [8] is too restricted to be able to represent general timing relationships. We have updated our syntax and semantics to follow the much more flexible system of Schlor and Damm <ref> [17] </ref>. A timing diagram is a collection of individual waveforms whose events are related by a series of edges between them. The types and notations 10 for edges are given in figure 1 and include notations for safety requirements, liveness requirements, and coincidence requirements. <p> Other researchers have explored formal usage of diagrams in limited situations in hardware reasoning. Timing diagrams have received the most attention, being cited as a more natural formalism for use in place of temporal logic <ref> [17] </ref> [10]. Other systems have employed more general usage of diagrammatic representations [5] [18] [6]. All of these systems formalize diagrams by translating them into known sentential logics; proofs in these systems are carried out in the sentential logic, with the diagrams serving as interface tools.
Reference: [18] <author> Mandayam Srivas and Mark Bickford. SPECTOOL: </author> <title> A Computer-Aided Verification Tool for Hardware Designs, Vol I. </title> <institution> Rome Laboratory Technical Report RL-TR-91-339, Griffiss Air Force Base, </institution> <address> NY, </address> <month> December </month> <year> 1991. </year> <month> 25 </month>
Reference-contexts: Other researchers have explored formal usage of diagrams in limited situations in hardware reasoning. Timing diagrams have received the most attention, being cited as a more natural formalism for use in place of temporal logic [17] [10]. Other systems have employed more general usage of diagrammatic representations [5] <ref> [18] </ref> [6]. All of these systems formalize diagrams by translating them into known sentential logics; proofs in these systems are carried out in the sentential logic, with the diagrams serving as interface tools. The translation approach is reasonable when using a single diagrammatic notation.
References-found: 18

