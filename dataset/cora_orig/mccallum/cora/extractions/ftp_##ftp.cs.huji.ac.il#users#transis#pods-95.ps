URL: ftp://ftp.cs.huji.ac.il/users/transis/pods-95.ps
Refering-URL: http://www.cs.huji.ac.il/~idish/Abstracts/pods95.html
Root-URL: http://www.cs.huji.ac.il
Email: idish@cs.huji.ac.il  dolev@cs.huji.ac.il  
Title: Increasing the Resilience of Atomic Commit, at No Additional Cost  
Author: Idit Keidar Danny Dolev 
Address: Jerusalem  Jerusalem  
Affiliation: Computer Science Institute The Hebrew University of  Computer Science Institute The Hebrew University of  
Abstract: This paper presents a new atomic commitment protocol, Enhanced Three Phase Commit (E3PC ), that always allows a quorum in the system to make progress. Previously suggested quorum-based protocols (e.g. the quorum-based Three Phase Commit (3PC) [Ske82]) allow a quorum to make progress in case of one failure. If failures cascade, however, and the quorum in the system is "lost" (i.e. at a given time no quorum component exists, e.g. because of a total crash), a quorum can later become connected and still remain blocked. With our protocol, a connected quorum never blocks. E3PC is based on the quorum-based 3PC [Ske82], and it does not require more time or communication than 3PC. The principles demonstrated in this paper can be used to increase the resilience of a variety of distributed services, e.g. replicated database systems, by ensuring that a quorum will always be able to make progress. 
Abstract-found: 1
Intro-found: 1
Reference: [BHG87] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: In order to ensure that all the sub-transactions are consistently committed or aborted, the sites run an atomic commitment protocol (ACP ) such as two phase commit (2PC ). The requirements of atomic commitment (as defined in Chapter 7 of <ref> [BHG87] </ref>) are: * All the sites that reach a decision reach the same one. * A site cannot reverse its decision after it has reached one. * The commit decision can only be reached if all sites voted Yes. * If there are no failures and all sites voted Yes, then
Reference: [CK85] <author> D. Cheung and T. Kameda. </author> <title> Site Optimal Termination Protocols for a Distributed Database under Network Partitioning. </title> <booktitle> In ACM Symp. on Prin. of Distributed Computing (PODC), </booktitle> <volume> number 4, </volume> <pages> pages 111-121, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: If failures cascade, however, and the quorum in the system is "lost" (i.e. at a certain time no quorum component exists, e.g. because of a total crash), a quorum of sites can become connected and still remain blocked. Other previously suggested quorum-based protocols (e.g. <ref> [CR83, CK85] </ref>) also allow a quorum to make progress in case of one failure, while if failures cascade, a quorum can later become connected and still remain blocked.
Reference: [CR83] <author> F. Chin and K. V. S. Ramarao. </author> <title> Optimal Termination Protocols for Network Partitioning. </title> <booktitle> In ACM SIGACT-SIGMOD Symp. on Prin. of Database Systems, </booktitle> <pages> pages 25-35, </pages> <month> March </month> <year> 1983. </year>
Reference-contexts: If failures cascade, however, and the quorum in the system is "lost" (i.e. at a certain time no quorum component exists, e.g. because of a total crash), a quorum of sites can become connected and still remain blocked. Other previously suggested quorum-based protocols (e.g. <ref> [CR83, CK85] </ref>) also allow a quorum to make progress in case of one failure, while if failures cascade, a quorum can later become connected and still remain blocked. <p> Skeen's quorum-based commit protocol is described in Section 4. Since completely non-blocking recovery is impossible to achieve, further research in this area concentrated on minimizing the number of blocked sites when partitions occur. Chin et al. <ref> [CR83] </ref> define optimal termination protocols (recovery procedures) in terms of the average number of sites that are blocked when a partition occurs. The average is over all the possible partitions, and all the possible states in the protocol in which the partitions occurs.
Reference: [EASC85] <author> A. El Abbadi, D. Skeen, and F. Christian. </author> <title> An Efficient Fault-Tolerant Algorithm for Replicated Data Management. </title> <booktitle> In ACM SIGACT-SIGMOD Symp. on Prin. of Database Systems, </booktitle> <pages> pages 215-229, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: A common way to increase the availability of data and services is replication. If data is replicated in several sites, it can still be available despite site and communication-link failures. Numerous replication schemes that are based on quorums were suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atom-icity of transactions, these algorithms use an ACP, and therefore are bound to block when the ACP they use blocks. <p> The technique uses two counters to impose a linear order on the quorums formed in the system, and guarantees that the decisions made by each quorum will be consistent with the decisions of the previous ones. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. The same Quorum System should be used to determine when the data is accessible to a group of sites as for the atomic commitment protocol. <p> Therefore, these sites need to recover the database state from other sites during the merge, and before taking part in the recovery procedure. In the Virtual Partitions protocol <ref> [EASC85, EAT89] </ref>, this is done every time the view changes. In this case, we suggest to use the view change as a "fault detector" for E3PC; thus, the recovery procedure is always invoked following a view change, after all the participating sites have reached an up-to-date state.
Reference: [EAT89] <author> A. El Abbadi and S. Toueg. </author> <title> Maintaining Availability in Partitioned Replicated Databases. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 14(2) </volume> <pages> 264-290, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: A common way to increase the availability of data and services is replication. If data is replicated in several sites, it can still be available despite site and communication-link failures. Numerous replication schemes that are based on quorums were suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atom-icity of transactions, these algorithms use an ACP, and therefore are bound to block when the ACP they use blocks. <p> The technique uses two counters to impose a linear order on the quorums formed in the system, and guarantees that the decisions made by each quorum will be consistent with the decisions of the previous ones. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. The same Quorum System should be used to determine when the data is accessible to a group of sites as for the atomic commitment protocol. <p> Therefore, these sites need to recover the database state from other sites during the merge, and before taking part in the recovery procedure. In the Virtual Partitions protocol <ref> [EASC85, EAT89] </ref>, this is done every time the view changes. In this case, we suggest to use the view change as a "fault detector" for E3PC; thus, the recovery procedure is always invoked following a view change, after all the participating sites have reached an up-to-date state.
Reference: [Gif79] <author> D.K Gifford. </author> <title> Weighted Voting for Replicated Data. </title> <booktitle> In ACM SIGOPS Symp. on Operating Systems Principles, </booktitle> <month> December </month> <year> 1979. </year>
Reference-contexts: A common way to increase the availability of data and services is replication. If data is replicated in several sites, it can still be available despite site and communication-link failures. Numerous replication schemes that are based on quorums were suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atom-icity of transactions, these algorithms use an ACP, and therefore are bound to block when the ACP they use blocks. <p> The technique uses two counters to impose a linear order on the quorums formed in the system, and guarantees that the decisions made by each quorum will be consistent with the decisions of the previous ones. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. The same Quorum System should be used to determine when the data is accessible to a group of sites as for the atomic commitment protocol.
Reference: [GM82] <author> H. Garcia-Molina. </author> <title> Elections in a Distributed Computing System. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31, NO.1:48-59, </volume> <month> Jan. </month> <year> 1982. </year>
Reference-contexts: The recovery procedure consists of two phases: first elect a new coordinator, and next attempt to form a quorum that can resolve the transaction. A new coordinator may be elected in different ways (e.g. <ref> [GM82] </ref>). In the course of the election, the coordinator hears from all the other participating sites.
Reference: [Gra78] <editor> J.N. Gray. </editor> <booktitle> Notes on Database Operating Systems. In Operating Systems: An Advanced Course,Lecture Notes in Computer Science, </booktitle> <volume> volume 60, </volume> <pages> pages 393-481. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1978. </year>
Reference-contexts: To this end an atomic commitment protocol (ACP), such as two phase commit (2PC ) <ref> [Gra78] </ref> is invoked. The atomic commit problem and the two phase commit protocol are described in Section 3. Two phase commit is a blocking protocol: if the coordinator fails, all the sites may remain blocked indefinitely, unable to resolve the transaction. <p> to commit. * At any point in the execution of the protocol, if all existing failures are repaired and no new failures occur for sufficiently long, then all sites will eventually reach a decision. 3.2 Two Phase Commit The simplest and most renowned ACP is two phase commit (2PC ) <ref> [Gra78] </ref>. Several variations of 2PC were suggested, the simplest version is centralized one of the sites is designated as the coordinator. The coordinator sends a transaction (or request to prepare to commit) to all the participants.
Reference: [Her86] <author> M. Herlihy. </author> <title> A Quorum-Consensus Replication Method for Abstract Data Types. </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> 4(1) </volume> <pages> 32-53, </pages> <month> February </month> <year> 1986. </year>
Reference-contexts: A common way to increase the availability of data and services is replication. If data is replicated in several sites, it can still be available despite site and communication-link failures. Numerous replication schemes that are based on quorums were suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atom-icity of transactions, these algorithms use an ACP, and therefore are bound to block when the ACP they use blocks. <p> The technique uses two counters to impose a linear order on the quorums formed in the system, and guarantees that the decisions made by each quorum will be consistent with the decisions of the previous ones. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. The same Quorum System should be used to determine when the data is accessible to a group of sites as for the atomic commitment protocol.
Reference: [Her87] <author> M. Herlihy. </author> <title> Concurrency versus Availability: Atomicity Mechanisms for Replicated Data. </title> <journal> 9 ACM Trans. Comp. Syst., </journal> <volume> 5(3) </volume> <pages> 249-274, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: A common way to increase the availability of data and services is replication. If data is replicated in several sites, it can still be available despite site and communication-link failures. Numerous replication schemes that are based on quorums were suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atom-icity of transactions, these algorithms use an ACP, and therefore are bound to block when the ACP they use blocks. <p> The technique uses two counters to impose a linear order on the quorums formed in the system, and guarantees that the decisions made by each quorum will be consistent with the decisions of the previous ones. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. The same Quorum System should be used to determine when the data is accessible to a group of sites as for the atomic commitment protocol.
Reference: [KD94] <author> I. Keidar and D Dolev. </author> <title> Increasing the Resilience of Atomic Commit, at No Additional Cost. </title> <type> Technical Report CS94-18, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: If now, p 1 and p 3 become connected, then, according to the decision rule, they decide to pre-abort the transaction, and they do not remain blocked. 5.4 Correctness of E3PC In <ref> [KD94] </ref> we formally prove that E3PC fulfills the requirements of atomic commitment described in Section 3.1. In this section we describe the proof's outline. We first prove that two contradicting attempts (i.e. pre-commit and pre-abort), cannot be made with the same value of Last Attempt.
Reference: [Kei94] <author> I. Keidar. </author> <title> A Highly Available Paradigm for Consistent Object Replication. </title> <type> Master's thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year> <note> Also available as Technical Report CS95-5. </note>
Reference-contexts: To our knowledge, the only previously suggested ACP that always allows a quorum to make progress is the ACP that we construct in <ref> [Kei94] </ref>. The protocol in [Kei94] is not straightforward; it uses a replication service as a building block, while the protocol presented in this paper is easy to follow and self-contained. In [Kei94] we studied the problem of allowing an asynchronous system to make progress every time a quorum becomes connected, and <p> To our knowledge, the only previously suggested ACP that always allows a quorum to make progress is the ACP that we construct in <ref> [Kei94] </ref>. The protocol in [Kei94] is not straightforward; it uses a replication service as a building block, while the protocol presented in this paper is easy to follow and self-contained. In [Kei94] we studied the problem of allowing an asynchronous system to make progress every time a quorum becomes connected, and we have developed a <p> only previously suggested ACP that always allows a quorum to make progress is the ACP that we construct in <ref> [Kei94] </ref>. The protocol in [Kei94] is not straightforward; it uses a replication service as a building block, while the protocol presented in this paper is easy to follow and self-contained. In [Kei94] we studied the problem of allowing an asynchronous system to make progress every time a quorum becomes connected, and we have developed a solution for it. In this paper we apply the principles of the solution suggested in [Kei94] to the quorum-based 3PC. <p> In <ref> [Kei94] </ref> we studied the problem of allowing an asynchronous system to make progress every time a quorum becomes connected, and we have developed a solution for it. In this paper we apply the principles of the solution suggested in [Kei94] to the quorum-based 3PC. The solution imposes a linear order on the quorums formed in the system, and sequentially numbers them using two counters maintained in two phases. <p> The analysis deals only with states in the basic commit protocol, and ignores the possibility for cascading failures (failures that occur during the recovery procedure). It is proved that any ACP with optimal recovery procedures takes at least three phases, and that the quorum-based recovery procedures are optimal. In <ref> [Kei94] </ref> we construct an ACP that always allows a connected majority to proceed, regardless of past failures. To our knowledge, no other ACP with this feature was suggested. The ACP suggested in [Kei94] uses a reliable replication service as a building block, and is mainly suitable for replicated database systems. <p> In <ref> [Kei94] </ref> we construct an ACP that always allows a connected majority to proceed, regardless of past failures. To our knowledge, no other ACP with this feature was suggested. The ACP suggested in [Kei94] uses a reliable replication service as a building block, and is mainly suitable for replicated database systems. In this paper, we present a novel commitment protocol, Enhanced Three Phase Commit (E3PC ), that always allows a connected majority to resolve the transaction (if it remains connected for sufficiently long). <p> In this paper, we present a novel commitment protocol, Enhanced Three Phase Commit (E3PC ), that always allows a connected majority to resolve the transaction (if it remains connected for sufficiently long). E3PC does not require complex building blocks such as the one in <ref> [Kei94] </ref>, and is more adequate for partially replicated, or non-replicated distributed database systems; it is based on the quorum-based three phase commit [Ske82]. 4 Quorum-Based Three Phase Commit In this section we describe Skeen's quorum-based commit protocol [Ske82]. <p> The technique demonstrated here may be used to make other algorithms more resilient, e.g. an algorithm for maintaining a primary component in the network, to support processing of sequences of distributed transactions, as well as for replication <ref> [Kei94] </ref>. The same principle may be combined with a dynamic voting scheme for replication (cf. Section 7 in [Kei94]). <p> be used to make other algorithms more resilient, e.g. an algorithm for maintaining a primary component in the network, to support processing of sequences of distributed transactions, as well as for replication <ref> [Kei94] </ref>. The same principle may be combined with a dynamic voting scheme for replication (cf. Section 7 in [Kei94]).
Reference: [Ske82] <author> D. Skeen. </author> <title> A Quorum-Based Commit Protocol. </title> <booktitle> In Berkeley Workshop on Distributed Data Management and Computer Networks, </booktitle> <volume> number 6, </volume> <pages> pages 69-80, </pages> <month> Feb. </month> <year> 1982. </year>
Reference-contexts: Two phase commit is a blocking protocol: if the coordinator fails, all the sites may remain blocked indefinitely, unable to resolve the transaction. To reduce the extent of blocking, Skeen suggested the quorum-based three phase commit (3PC) protocol, that maintains consistency in spite of network partitions <ref> [Ske82] </ref>. In case of failures, the algorithm uses a quorum (or majority) based recovery procedure, that allows a quorum to resolve the transaction. <p> The solution imposes a linear order on the quorums formed in the system, and sequentially numbers them using two counters maintained in two phases. In this paper we present the Enhanced Three Phase Commit (E3PC ) protocol, which is an enhancement of the quorum-based 3PC <ref> [Ske82] </ref>. E3PC always allows a quorum to make progress. It achieves higher availability than 3PC, simply by maintaining two additional 1 counters, and with no additional communication. <p> The rest of this paper is organized as follows: Section 2 presents the computation model. Section 3 provides general background on the atomic commitment problem. The quorum-based three phase commit (3PC) protocol <ref> [Ske82] </ref> is described in Section 4, and enhanced three phase commit (E3PC), in Section 5. Section 6 concludes the paper. 2 The Model We assume that the set of sites running the protocol is fixed, and is known to all the sites. <p> Skeen suggested the quorum-based three phase commit protocol, that maintains consistency in spite of network partitions <ref> [Ske82] </ref>. This protocol is blocking; it is possible for an operational site to be blocked until a failure is mended. In case of failures, the algorithm uses a quorum (or majority) based recovery procedure, that allows a quorum to resolve the transaction. <p> E3PC does not require complex building blocks such as the one in [Kei94], and is more adequate for partially replicated, or non-replicated distributed database systems; it is based on the quorum-based three phase commit <ref> [Ske82] </ref>. 4 Quorum-Based Three Phase Commit In this section we describe Skeen's quorum-based commit protocol [Ske82]. E3PC is a refinement of 3PC, and therefore we elaborate on 3PC before presenting E3PC. <p> E3PC does not require complex building blocks such as the one in [Kei94], and is more adequate for partially replicated, or non-replicated distributed database systems; it is based on the quorum-based three phase commit <ref> [Ske82] </ref>. 4 Quorum-Based Three Phase Commit In this section we describe Skeen's quorum-based commit protocol [Ske82]. E3PC is a refinement of 3PC, and therefore we elaborate on 3PC before presenting E3PC. The basic three phase commit (3PC ) is described in Section 4.1, and the recovery procedure is described in Section 4.2. <p> The protocol is based on the quorum-based three phase commit protocol <ref> [Ske82] </ref>. E3PC does not require more communication or time than 3PC; the improved resilience is achieved simply by maintaining two additional counters. In Section 5.1 we describe how E3PC enhances 3PC. The recovery procedure for E3PC is described in Section 5.2. <p> We conclude that if some site running the protocol commits the transaction, then no other site aborts the transaction. 8 6 Conclusions In this paper we demonstrated how the three phase commit (3PC) <ref> [Ske82] </ref> protocol can be made more resilient simply by maintaining two additional counters, and by changing the decision rule.
Reference: [SS83] <author> D. Skeen and M. Stonebraker. </author> <title> A Formal Model of Crash Recovery in a Distributed System. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-9 NO.3, </volume> <month> May </month> <year> 1983. </year> <month> 10 </month>
Reference-contexts: This is undesirable but cannot be avoided; Skeen proved that every protocol that tolerates network partitions is bound to be blocking in certain scenarios <ref> [SS83] </ref>. The rest of this paper is organized as follows: Section 2 presents the computation model. Section 3 provides general background on the atomic commitment problem. The quorum-based three phase commit (3PC) protocol [Ske82] is described in Section 4, and enhanced three phase commit (E3PC), in Section 5. <p> Coordinator Slave Transaction is received: Send sub-transactions. Sub-transaction is received: Send reply Yes or No. If all sites respond Yes: Send commit. If some site voted No: Send abort. commit or abort is received: Process accordingly. Commit protocols may also be described using state diagrams <ref> [SS83] </ref>. The state diagram for 2PC is shown in Figure 2. The circles denote states; final states are double-circled. The arcs represent state transitions, and the action taken (e.g. message sent) by the site is indicated next to each arc. <p> Consequently, the availability of data stored in reliable sites can be limited by the availability of the weakest component in the distributed system. Skeen et al. proved <ref> [SS83] </ref> that there exists no non-blocking protocol resilient to network partitioning. 3 When a partition occurs, the best protocols allow no more than one group of sites to continue while the remaining groups block.
References-found: 14

