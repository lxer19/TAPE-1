URL: http://www.cs.utexas.edu/users/novak/caia94.ps
Refering-URL: http://www.cs.utexas.edu/users/novak/caia94.html
Root-URL: 
Email: novak@cs.utexas.edu  
Title: Generating Programs from Connections of Physical Models  
Author: Gordon S. Novak Jr. 
Note: This article appears in Proceedings of the Tenth Conference on Artificial Intelligence for Applications, San Antonio, Texas, March 1-4, 1994, pp. 224-230. IEEE Computer Society Press Order No.  
Date: October 27, 1997  5550-02.  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: Copyright c fl1994 by IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE. Abstract We describe a system that constructs a computer program from a graphical specification provided by the user. The specification consists of diagrams that represent physical and mathematical models; connections between diagram ports signify that corresponding quantities must be equal. A program (in Lisp or C) is generated from the graphical specification by data flow analysis and algebraic manipulation of equations associated with the physical models. Equations, algebraic manipulations, and unit conversions are hidden from the user and are performed automatically. This system allows more rapid generation of programs than would be possible with hand coding. fl Computer equipment used in this research was furnished by Hewlett Packard.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chang, Ruey-Juin, </author> <title> "Cliche-Based Modeling for Expert Problem-Solving Systems", </title> <type> Ph.D. dissertation, </type> <institution> Department of Computer Sciences, Univ. of Texas at Austin, </institution> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Larkin et al. [9] and others have investigated the physical intuition that underlies the choice of physical models. With Kook [5], Lee [8], and Chang <ref> [1] </ref>, we have examined computational representations of physical models and their use in understanding and solving problems. VIP allows the user to specify a problem directly in terms of physical principles, rather than in terms of the equations associated with those principles.
Reference: [2] <author> Gieck, Kurt, </author> <title> Engineering Formulas (5th ed.), </title> <publisher> McGraw-Hill, </publisher> <year> 1986. </year>
Reference-contexts: With Bulko [13] [16], we have investigated the use of diagrams together with English text as a means of specifying physics problems. Diagrams are heavily used together with equations in books of standard formulas such as that of Gieck <ref> [2] </ref>. The use of circuit diagrams has a long history in electrical engineering. Related kinds of diagrams have also been used to specify programs.
Reference: [3] <author> Kant, E., </author> <title> "Synthesis of Mathematical-Modeling Software", </title> <journal> IEEE Software, </journal> <volume> vol. 10, no. </volume> <month> 3 (May </month> <year> 1993), </year> <pages> pp. 30-41. 12 </pages>
Reference-contexts: Finally, SIGMA is interpretive: it produces a queue of equations whose inputs are known and that are therefore ready for solution. VIP, in contrast, produces a program, making VIP useful both for quick calculations and for generating application programs. The Sinapse system <ref> [3] </ref> synthesizes programs that solve differential equations by finite difference methods. This system is notable for generating programs that are moderately large (hundreds to thousands of lines) that deal with large spatial arrays and must therefore be efficient.
Reference: [4] <author> Keller, R. M. and M. Rimon, </author> <title> "A Knowledge-based Software Development Environment for Scientific Model-building", </title> <booktitle> Proc. 7th Knowledge-Based Software Engineering Conference (KBSE-92), </booktitle> <address> McLean, VA, Sept. 1992, </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 192-201. </pages>
Reference-contexts: These results are an encouraging indication that this kind of programming interface and program generation may lead to increased programmer productivity. 2 Related Work The SIGMA system <ref> [4] </ref> has a goal similar to ours: helping scientists to perform calculations based on a knowledge base of physical models. SIGMA differs from VIP in several ways. First, SIGMA is based on direct use and connection of equations. <p> SIGMA differs from VIP in several ways. First, SIGMA is based on direct use and connection of equations. VIP is based on connections of physical principles, each of which may involve multiple equations. SIGMA, as reported in <ref> [4] </ref>, did not yet have a graphical interface, although one was planned. In SIGMA, the user must specify directionality of data flow; we prefer to let the system determine data flow, removing this burden from the user. <p> Manipulation of equations by humans is recognized as a source of difficulty and error. By abstracting away the algebra and unit conversions normally associated with scientific programming, VIP makes it significantly faster and easier to write the kinds of programs illustrated by our examples. Other systems, notably SIGMA <ref> [4] </ref>, are based directly on equations. VIP's models often involve multiple equations; packaging together all of the equations associated with a single model gives the user fewer objects to deal with and facilitates the solution of multiple equations within the same model. <p> The lack of directionality in VIP diagrams is important for reuse, since reuse of a subset of a diagram might involve different data flow directions than the original use. VIP itself needs to be improved in several ways, including more thorough type checking such as that performed by SIGMA <ref> [4] </ref> (type errors currently are caught by GLISP, but should be detected earlier by VIP) and an ability to solve simultaneous equations. We also plan to investigate the use of VIP's user interface for specification of other kinds of programs.
Reference: [5] <author> Kook, H. J. and Novak, G., </author> <title> "Representation of Models for Expert Problem Solving in Physics, </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 3:1, </volume> <pages> pp. 48-54, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Larkin et al. [9] and others have investigated the physical intuition that underlies the choice of physical models. With Kook <ref> [5] </ref>, Lee [8], and Chang [1], we have examined computational representations of physical models and their use in understanding and solving problems. VIP allows the user to specify a problem directly in terms of physical principles, rather than in terms of the equations associated with those principles.
Reference: [6] <author> Jagadeesh, J. M. and Y. Wang, </author> <title> "LabView" (product review), </title> <journal> IEEE Computer, </journal> <volume> vol. 26, no. </volume> <month> 2 (Feb. </month> <year> 1993), </year> <pages> pp. 100-103. </pages>
Reference-contexts: Diagrams are heavily used together with equations in books of standard formulas such as that of Gieck [2]. The use of circuit diagrams has a long history in electrical engineering. Related kinds of diagrams have also been used to specify programs. The LabView system <ref> [6] </ref> allows the creation of "virtual instrument" programs for measurement, display, and control by making graphical connections of computational modules; the connections represent data flow. Data flow graphs have also been used to specify parallel computations [10]. There have been many approaches to visual or graphical programming environments.
Reference: [7] <author> Larkin, J. and Simon, H. A., </author> <title> "Why a Diagram is (Sometimes) Worth 10,000 Words", </title> <journal> Cognitive Science, </journal> <volume> 11 </volume> <pages> 65-99, </pages> <note> 1987; also in [18]. </note>
Reference-contexts: The use of diagrams as a means of communication and as a reasoning aid is common in science and 2 engineering; Larkin and Simon <ref> [7] </ref> consider psycho-logical benefits of diagrams. With Bulko [13] [16], we have investigated the use of diagrams together with English text as a means of specifying physics problems. Diagrams are heavily used together with equations in books of standard formulas such as that of Gieck [2].
Reference: [8] <author> Lee, Xiang-Seng, </author> <title> "Temporal and Spatial Analysis in Knowledge-Based Physics Problem Solving", </title> <type> Ph.D. Dissertation, Tech. Report AI-93-205, </type> <institution> A.I. Lab, C.S. Dept., Univ. of Texas at Austin, </institution> <year> 1993. </year>
Reference-contexts: Larkin et al. [9] and others have investigated the physical intuition that underlies the choice of physical models. With Kook [5], Lee <ref> [8] </ref>, and Chang [1], we have examined computational representations of physical models and their use in understanding and solving problems. VIP allows the user to specify a problem directly in terms of physical principles, rather than in terms of the equations associated with those principles.
Reference: [9] <author> Larkin, J., J. McDermott, D. Simon, and H. A. Simon, </author> <title> "Expert and Novice Performance in Solving Physics Problems", </title> <journal> Science, </journal> <volume> vol. </volume> <month> 208 (20 June </month> <year> 1980), </year> <pages> pp. 1335-1342. </pages>
Reference-contexts: However, our study of the process of solving physics problems [12] indicates that equations are not the most fundamental representation of a problem: choice of the correct equations is based on a representation of a problem in terms of physical principles. Larkin et al. <ref> [9] </ref> and others have investigated the physical intuition that underlies the choice of physical models. With Kook [5], Lee [8], and Chang [1], we have examined computational representations of physical models and their use in understanding and solving problems.
Reference: [10] <author> Newton, P. and J. C. Browne, </author> <title> "The Code 2.0 Graphical Parallel Programming Language", </title> <booktitle> Proc. ACM Int. Conf. on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: The LabView system [6] allows the creation of "virtual instrument" programs for measurement, display, and control by making graphical connections of computational modules; the connections represent data flow. Data flow graphs have also been used to specify parallel computations <ref> [10] </ref>. There have been many approaches to visual or graphical programming environments. Shu [17] contains a good selection of representative papers. 3 An Example We begin with a simple example to illustrate the use of VIP.
Reference: [11] <author> Novak, G., </author> <title> "GLISP: A LISP-Based Programming System With Data Abstraction", </title> <journal> AI Magazine, </journal> <volume> vol. 4, no. 3, </volume> <month> Fall </month> <year> 1983, </year> <pages> pp. 37-47. </pages>
Reference-contexts: Each principle has a set of equations associated with it. When a specification is complete, a program is generated from the graphical specification by data flow and by symbolic manipulation of equations. The resulting program, in the GLISP language <ref> [11] </ref>, can then be compiled into Lisp or, with an additional mechanical translation step, into readable C. The compilation process performs automatic conversion and checking of units of measurement. <p> When failure to solve simultaneous equations occurs, it is generally because multiple models are connected by multiple ports simultaneously. Clearly, VIP should be extended to be able to solve simultaneous equations. The result of the program derivation process is a program expressed in the GLISP language. GLISP <ref> [11] </ref> is a high-level language with abstract data types that is compiled into Common Lisp; with an additional mechanical translation step, the Lisp output of GLISP can be translated into readable C. Several features of GLISP facilitate the production of programs by VIP.
Reference: [12] <author> Novak, G., </author> <title> "Representations of Knowledge in a Program for Solving Physics Problems", </title> <booktitle> Proc. 5th International Joint Conf. on Artificial Intelligence (IJCAI-77), </booktitle> <year> 1977, </year> <pages> pp. 286-291. </pages>
Reference-contexts: Equations are powerful in the sense that, by algebraic manipulation, a small set of equations can represent a large set of problems. However, our study of the process of solving physics problems <ref> [12] </ref> indicates that equations are not the most fundamental representation of a problem: choice of the correct equations is based on a representation of a problem in terms of physical principles. Larkin et al. [9] and others have investigated the physical intuition that underlies the choice of physical models.
Reference: [13] <author> Novak, G. and W. Bulko, </author> <title> "Understanding Natural Language with Diagrams", </title> <booktitle> Proc. Eighth National Conference on Artificial Intelligence (AAAI-90), </booktitle> <year> 1990, </year> <pages> pp. 465-470. </pages>
Reference-contexts: The use of diagrams as a means of communication and as a reasoning aid is common in science and 2 engineering; Larkin and Simon [7] consider psycho-logical benefits of diagrams. With Bulko <ref> [13] </ref> [16], we have investigated the use of diagrams together with English text as a means of specifying physics problems. Diagrams are heavily used together with equations in books of standard formulas such as that of Gieck [2]. The use of circuit diagrams has a long history in electrical engineering.
Reference: [14] <author> Novak, G., F. Hill, M. Wan, and B. Sayrs, </author> <title> "Negotiated Interfaces for Software Reuse", </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. 18, no. </volume> <month> 7 (July </month> <year> 1992). </year>
Reference-contexts: GLISP translates structure accesses and code that creates data structures into appropriate code for the implementation of the data structures; this allows VIP simply to refer to the components of structures without any concern for their implementations. We have investigated the creation of interfaces to subroutines <ref> [14] </ref> and the use of views of data as different types [15]; it would be useful to integrate these capabilities with VIP. 7 6 Larger Examples In this section, we consider some larger examples that have been solved using VIP.
Reference: [15] <author> Novak, G., </author> <title> "Software Reuse through View Type Clusters", </title> <booktitle> Proc. 7th Knowledge-Based Software Engineering Conference, </booktitle> <address> McLean, VA, </address> <month> Sept. </month> <year> 1992, </year> <pages> pp. </pages> <publisher> 70-79 (IEEE Press). </publisher>
Reference-contexts: We have investigated the creation of interfaces to subroutines [14] and the use of views of data as different types <ref> [15] </ref>; it would be useful to integrate these capabilities with VIP. 7 6 Larger Examples In this section, we consider some larger examples that have been solved using VIP. The first example, shown in Fig. 2, is a physics problem: calculation of the mass of the sun.
Reference: [16] <author> Novak, G. and Bulko, W., </author> <title> "Diagrams and Text as Computer Input", </title> <journal> Journal of Visual Languages and Computing, </journal> <note> vol. 4 (June 1993) pp. 161-175. </note>
Reference-contexts: The use of diagrams as a means of communication and as a reasoning aid is common in science and 2 engineering; Larkin and Simon [7] consider psycho-logical benefits of diagrams. With Bulko [13] <ref> [16] </ref>, we have investigated the use of diagrams together with English text as a means of specifying physics problems. Diagrams are heavily used together with equations in books of standard formulas such as that of Gieck [2]. The use of circuit diagrams has a long history in electrical engineering.
Reference: [17] <author> Shu, Nan C., </author> <title> Visual Programming, </title> <address> New York: </address> <publisher> Van Nostrand Reinhold, </publisher> <year> 1988. </year>
Reference-contexts: Data flow graphs have also been used to specify parallel computations [10]. There have been many approaches to visual or graphical programming environments. Shu <ref> [17] </ref> contains a good selection of representative papers. 3 An Example We begin with a simple example to illustrate the use of VIP. The problem could be stated as follows: An object is dropped and hits the ground with velocity vel (in meters/second).
Reference: [18] <editor> Simon, H. A., </editor> <booktitle> Models of Thought, </booktitle> <volume> vol. 2, </volume> <publisher> Yale Univ. Press, </publisher> <year> 1989. </year>
Reference: [19] <author> Wolfram, S., </author> <title> Mathematica: a System for Doing Mathematics by Computer, </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year> <month> 13 </month>
Reference-contexts: It usually requires the programmer to select appropriate equations to model the physics and mathematics of the problem, manually manipulate the equations to compute the desired quantities, and convert units of measurement. Although powerful algebraic manipulation packages such as Mathematica <ref> [19] </ref> exist, they are not well integrated with the programming process. There are few machine checks of the correctness of equations or unit conversions, making it possible for errors to be overlooked. In this paper, we describe a system called VIP (for View Interactive Programming).
References-found: 19

