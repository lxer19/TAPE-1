URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P466A.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/preprints.htm
Root-URL: http://www.mcs.anl.gov
Title: PARALLEL ALGORITHMS FOR UNSTRUCTURED MESH COMPUTATION  
Author: LORI A. FREITAG, MARK T. JONES, AND PAUL E. PLASSMANN 
Abstract: The efficient solution of many large-scale scientific calculations depends on unstructured mesh strategies. For example, problems where the solution changes rapidly in small regions of the domain require an adaptive mesh strategy. In this paper we discuss the main algorithmic issues to be addressed with an integrated approach to solving these problems on massively parallel architectures. We review new parallel algorithms to solve two significant problems that arise in this context: the generation of the adaptive mesh and the mesh partitioning. The gist of our refinement algorithm is the identification of independent sets of elements that can be refined in parallel. The objective of our partitioning heuristic is to construct partitions with good aspect ratios. We present running time bounds and computational results obtained on the Intel DELTA for these algorithms used in solving an optimization problem to determine the vortex structure in a high-temperature superconductor. These results demonstrate that the algorithms exhibit scalable performance and have runtimes small in comparison with other aspects of the computation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Babu ska and A. K. Aziz, </author> <title> On the angle condition in the finite element method, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 13 (1976), </volume> <pages> pp. 214-226. </pages>
Reference-contexts: Finally, we require that all angles in the mesh be bounded away from 0 and . The latter requirement is necessary because the discretization error in a finite element approximation has been shown to grow as the maximum angle approaches <ref> [1] </ref>. We would like to avoid small angles because the condition number of the matrices arising from mesh elements has been shown to grow as O ( 1 min ), where min is the smallest angle in the mesh [7]. 3.1. A parallel bisection algorithm.
Reference: [2] <author> M. Berger and S. Bokhari, </author> <title> A partitioning strategy for nonuniform problems on multiprocessors, </title> <journal> IEEE Transactions on Computers, </journal> <note> C-36 (1987). </note>
Reference-contexts: Although the eigenvectors generally do not need to be found to great accuracy, spectral methods fail to utilize the geometric information inherent to the mesh, which may be used to significant advantage. This geometric information is used in bisection partitioning algorithms such as the orthogonal recursive bisection (ORB) algorithm <ref> [2] </ref>. This algorithm makes an initial geometric cut to divide the grid points in half. Orthogonal cuts are then made recursively in the new subdomains until the grid points are evenly distributed among the processors. Although this algorithm obtains good load balancing, it ignores the communication minimization problem.
Reference: [3] <author> C. Bischof, A. Carle, G. Corliss, A. Griewank, and P. Hovland, ADIFOR: </author> <title> Generating derivative codes from Fortran programs, </title> <booktitle> Scientific Programming, 11 (1992), </booktitle> <pages> pp. 11-29. </pages>
Reference-contexts: We have found that an effective approach to computing a minimizer of the free-energy functional is a damped Newton's method [8]. Each iteration of the nonlinear method requires computation of the gradient vector and Hessian matrix. We have used the automated differentiation package ADIFOR <ref> [3] </ref> to compute these derivatives for the element function. The contributions from the elements are assembled to obtain the total gradient and Hessian. The computational kernel of this technique is the solution of the damped Newton system | a large, sparse linear system of equations.
Reference: [4] <author> J. E. Castillo, </author> <title> Mathematical Aspects of Grid Generation, </title> <institution> Society for Industrial and Applied Mathematics, Philadel-phia, </institution> <year> 1991. </year>
Reference-contexts: In spite of the fact that there is a tremendous amount of interest in this area, very little work has been done in the development of parallel algorithms to solve this problem. Possible approaches to parallel unstructured mesh generation include conformal mappings of regular meshes to more complicated domains <ref> [4] </ref> and the use of coarse background grids to partition the domain across processors [13]. However, this work fails to address the manner by which many geometric models (upon which the finite element mesh is defined) are specified.
Reference: [5] <author> L. A. Freitag, M. T. Jones, and P. E. Plassmann, </author> <booktitle> New advances in the modeling of high-temperature supercon-ductors, in 1994 International Simulation Conference Grand Challenges in Computer Simulation, </booktitle> <address> La Jolla, California, </address> <month> April 11-15, </month> <year> 1994. </year> <title> [6] , Parallel algorithms for adaptive mesh refinement, </title> <type> Preprint MCS-P421-0394, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1994. </year>
Reference-contexts: The problem is to determine the minimum energy configuration of the Ginzburg-Landau free energy functional, a phenomenological model for high-temperature superconductivity. The problem and methods used are described in [12]. A complete description of the finite-element formulation used and the refinement criteria are given in <ref> [5] </ref>. We note that this problem is complicated by the invariance of the free-energy functional under gauge transformations; thus a local minimizer is not unique. This degeneracy (the singularity of the Hessian at a solution) significantly complicates the computation of such a minimizer.
Reference: [7] <author> I. Fried, </author> <title> Condition of finite element matrices generated from nonuniform meshes, </title> <journal> AIAA Journal, </journal> <volume> 10 (1972), </volume> <pages> pp. 219-221. </pages>
Reference-contexts: We would like to avoid small angles because the condition number of the matrices arising from mesh elements has been shown to grow as O ( 1 min ), where min is the smallest angle in the mesh <ref> [7] </ref>. 3.1. A parallel bisection algorithm. The bisection algorithm bisects triangles across the largest edge (dividing the largest angle) with selective divisions across a smaller edge (termed simple bisection).
Reference: [8] <author> J. Garner, M. Spanbauer, R. Benedek, K. Strandburg, S. Wright, and P. Plassmann, </author> <title> Critical fields of Josephson-coupled superconducting multilayers, </title> <journal> Physical Review B, </journal> <volume> 45 (1992), </volume> <pages> pp. 7973-7983. </pages>
Reference-contexts: This degeneracy (the singularity of the Hessian at a solution) significantly complicates the computation of such a minimizer. We have found that an effective approach to computing a minimizer of the free-energy functional is a damped Newton's method <ref> [8] </ref>. Each iteration of the nonlinear method requires computation of the gradient vector and Hessian matrix. We have used the automated differentiation package ADIFOR [3] to compute these derivatives for the element function. The contributions from the elements are assembled to obtain the total gradient and Hessian.
Reference: [9] <author> W. D. Gropp and B. F. Smith, </author> <title> Simplified Linear Equation Solvers Users Manual, </title> <type> Tech. Rep. </type> <institution> ANL-93/8, Argonne National Laboratory, </institution> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: For example, the BlockSolve package has been developed for the iterative solution of symmetric systems [11], the CAPSS project has developed software for direct methods [10], and PETSc contains parallel iterative methods for nonsymmetric systems <ref> [9] </ref>. However, the nonnumeric phases of generating, refining, and partitioning unstructured meshes must be addressed to use massively parallel machines in a coherent manner.
Reference: [10] <author> M. T. Heath and P. Raghavan, </author> <title> Distributed solution of sparse linear systems, </title> <type> Tech. Rep. </type> <institution> UIUCDCS-R-93-1793, University of Illinois, </institution> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: For this reason, much effort has been invested in developing the parallel algorithms and software for general, sparse linear systems. For example, the BlockSolve package has been developed for the iterative solution of symmetric systems [11], the CAPSS project has developed software for direct methods <ref> [10] </ref>, and PETSc contains parallel iterative methods for nonsymmetric systems [9]. However, the nonnumeric phases of generating, refining, and partitioning unstructured meshes must be addressed to use massively parallel machines in a coherent manner.
Reference: [11] <author> M. T. Jones and P. E. Plassmann, </author> <title> BlockSolve v1.0: Scalable library software for the parallel solution of sparse linear systems, </title> <type> ANL Report ANL-92/46, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1992. </year> <title> [12] , Computation of equilibrium vortex structures for type-II superconductors, </title> <journal> The International Journal of Supercomputer Applications, </journal> <volume> 7 (1993), </volume> <pages> pp. 129-143. </pages>
Reference-contexts: For this reason, much effort has been invested in developing the parallel algorithms and software for general, sparse linear systems. For example, the BlockSolve package has been developed for the iterative solution of symmetric systems <ref> [11] </ref>, the CAPSS project has developed software for direct methods [10], and PETSc contains parallel iterative methods for nonsymmetric systems [9]. However, the nonnumeric phases of generating, refining, and partitioning unstructured meshes must be addressed to use massively parallel machines in a coherent manner. <p> The computational kernel of this technique is the solution of the damped Newton system | a large, sparse linear system of equations. We do not explicitly invert this system but use the iterative solver from the BlockSolve package <ref> [11] </ref> to obtain an approximate (inexact) solution. To demonstrate the efficiency and scalability of the refinement and partitioning algorithms for the superconductivity problem, we have increased the problem sizes in proportion to the number of processors used.
Reference: [13] <author> R. L ohner, J. Camberos, and M. Merriam, </author> <title> Parallel unstructured grid generation, </title> <booktitle> Computer Methods in Applied Mechanics and Engineering, 95 (1992), </booktitle> <pages> pp. 343-357. </pages>
Reference-contexts: Possible approaches to parallel unstructured mesh generation include conformal mappings of regular meshes to more complicated domains [4] and the use of coarse background grids to partition the domain across processors <ref> [13] </ref>. However, this work fails to address the manner by which many geometric models (upon which the finite element mesh is defined) are specified. Most geometric models are defined implicitly by parametric descriptions, and only very preliminary work with parallel implementations have been done in this area.
Reference: [14] <author> W. F. Mitchell, </author> <title> A comparison of adaptive refinement techniques for elliptic problems, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 15 (1989), </volume> <pages> pp. 326-347. </pages>
Reference-contexts: 1. Introduction. Unstructured mesh strategies have proven to be very successful in reducing the computation and storage requirements for many scientific and engineering calculations <ref> [14] </ref>. Massively parallel computers offer a cost-effective tool for solving such problems. However, many difficult algorithmic and implementation issues must be addressed to make effective use of this resource.
Reference: [15] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning sparse matrices with eigenvectors of graphs, </title> <journal> SIAM Journal on Matrix Analysis, </journal> <volume> 11 (1990), </volume> <pages> pp. 430-452. </pages>
Reference-contexts: However, for unstructured, adaptive meshes the partitioning cannot be predetermined because it changes with each new refinement of the mesh. 3 Several interesting techniques have been proposed to determine partitionings of unstructured meshes. Spectral methods <ref> [15] </ref> have the advantage of global access to information about the graph to find good separators at the cost of eigenvalue/eigenvector computations.
Reference: [16] <author> M.-C. Rivara, </author> <title> Mesh refinement processes based on the generalized bisection of simplices, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 21 (1984), </volume> <pages> pp. 604-613. </pages>
Reference-contexts: The bisection algorithm Obviously, the refinement could propagate through many initially unmarked triangles before finishing. Rivara, however, has shown that this loop will terminate in a finite number of iterations, say L P iterations <ref> [16] </ref>. Rivara also shows that each triangle in the resulting compatible mesh, T i+1 , embeds 1, 2, 3, or 4 triangles of T i . We show the possible 2, 3, or 4 triangle results in Figure 2.
Reference: [17] <author> I. G. Rosenberg and F. Stenger, </author> <title> A lower bound on the agnles of triangles constructed by bisecting the longest side, </title> <journal> Mathematics of Computation, </journal> <volume> 29 (1975), </volume> <pages> pp. 390-395. </pages>
Reference-contexts: The bisection algorithm bisects triangles across the largest edge (dividing the largest angle) with selective divisions across a smaller edge (termed simple bisection). This has been shown to yield triangulations whose smallest angle is bounded by at worst one half the smallest angle in the inital mesh <ref> [17] </ref>.
Reference: [18] <author> M. S. Shephard and M. K. Gorges, </author> <title> Automatic three-dimensional mesh generation by finite octree technique, </title> <type> Tech. Rep. </type> <institution> SCOREC #1-1991, Scientific Computation Research Center, Rensselaer Polytechnic Institute, </institution> <year> 1991. </year> <month> 5 </month>
Reference-contexts: The address of the second author is Computer Science Department, University of Tennessee, Knoxville, TN 37996. 1 seems to be quadtree/octree mesh generation methods <ref> [18] </ref>, but this topic remains an open area for future research. 3. Adaptive mesh refinement. Rather than using a structured mesh with grid points evenly spaced on a domain, adaptive mesh refinement techniques place more grid points in areas where the solution is changing rapidly.
References-found: 16

