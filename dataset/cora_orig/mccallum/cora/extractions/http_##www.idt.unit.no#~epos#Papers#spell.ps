URL: http://www.idt.unit.no/~epos/Papers/spell.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Design, Use and Implementation of SPELL, a language for Software Process Modeling and Evolution  
Author: Reidar Conradi M. Letizia Jaccheri Cristina Mazzi Minh Ngoc Nguyen, Amund Aarsten 
Date: 27 April 1992 (rev. 3 May 1992)  
Note: Submitted to 2nd European Workshop on Software Process Technology (EWSPT'92), 7-8 September 1992, Trondheim, Norway EPOS TR 164  
Address: Trondheim, Norway.  
Affiliation: Norwegian Institute of Technology,  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [BEM91] <author> N. Belkhatir, J. Estublier, and W. L. Melo. Adele2: </author> <title> A Support to Large Software Development Process. </title> <booktitle> In Proc. 1st Conference on Software Process (ICSP1), </booktitle> <address> Redondo Beach, CA, </address> <pages> pages 159-170, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: A process model and associated formalisms have at least four submodels: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KF87] and ADELE2 <ref> [BEM91] </ref>). Network-based (MELMAC [DG90], Extended Petri Nets [GMMP91]), Imperative or programmmatic Process Modeling Language, PML, usually interpreted (APPL/A [JHO90], IPSE 2.5 [War89]). Hybrids (EPOS [C + 89]). All the corresponding formalisms are rather low-level, with insufficient facilities for design, structuring and customization/evolution of models and their rule bases.
Reference: [C + 89] <editor> Reidar Conradi et al. </editor> <booktitle> Design of the Kernel EPOS Software Engineering Environment. In [MSW90], </booktitle> <month> May </month> <year> 1989. </year> <note> Also as DCST TR 8/89 | STF14-A89004 ISBN 82-595-5322-8 | EPOS TR 74, 17 p. </note> <institution> Trondheim, Norway. </institution>
Reference-contexts: The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KF87] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], Extended Petri Nets [GMMP91]), Imperative or programmmatic Process Modeling Language, PML, usually interpreted (APPL/A [JHO90], IPSE 2.5 [War89]). Hybrids (EPOS <ref> [C + 89] </ref>). All the corresponding formalisms are rather low-level, with insufficient facilities for design, structuring and customization/evolution of models and their rule bases. The last point involves meta-processes, see below. * A product model to express (passive) data, being manipulated by activities. An object-oriented ER model is often used.
Reference: [CM91] <author> Reidar Conradi and Carl Chr. Malm. </author> <title> Cooperating Transactions and Workspaces in EPOS: Design and Preliminary Implementation. </title> <editor> In Rudolf Andersen, Janis A. Bubenko jr., and Arne Stlvberg, editors, </editor> <booktitle> Proc. of CAiSE'91, the 3rd International Conference on Advanced Information Systems, </booktitle> <address> Trondheim, Norway, </address> <month> 13-15 May </month> <year> 1991, </year> <pages> pages 375-392. </pages> <publisher> LNCS 498, Springer Verlag, </publisher> <address> 578 p., </address> <year> 1991. </year> <note> Also as DCST TR 47/90, EPOS TR 119. </note>
Reference-contexts: Projects are special tasks coupled to database transactions. They control general cooperation within and between teams. E.g. the propagation rules between cooperating transactions is regulated by instrumentable task types <ref> [CM91] </ref>. A subproject can change old information "inherited" from the superproject (e.g. type versioning), as well as add new information (e.g. by subtyping). There are p.t. no sub-schemas, so the normal version mechanism must be used. Thus, EPOS has powerful basic mechanisms for structuring knowledge bases.
Reference: [COWL91] <author> Reidar Conradi, Espen Osjord, Per H. Westby, and Chunnian Liu. </author> <title> Initial Software Process Management in EPOS. </title> <journal> Software Engineering Journal (Special Issue on Software process and its support), </journal> <volume> 6(5) </volume> <pages> 275-284, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In fact, redefinition of type-level properties in pre-defined types are not infrequent. Thus, i convert selectively considers the redefinition of such properties. 6 Conclusion and Future Work SPELL is an extension of a former EPOS PML <ref> [COWL91] </ref>, and object-oriented paradigms have provided a sound platform here. We can mention subtype extensibility, procedures as part of types, dynamic binding, declarable type-properties, explicit (meta-)types for model customization/versioning and extensibility (reflection).
Reference: [CPA + 91] <author> Reidar Conradi, Algirdas Pakstas, Amund Aarsten, Cristina Mazzi, Jens-Otto Larsen, M .Letizia Jaccheri, Ngoc Minh Nguyen, and Bjtrn P. Munch. </author> <title> The Revised EPOS PM Requirements and Design (DRAFT, </title> <address> V3.0), </address> <month> December </month> <year> 1991. </year> <note> Rev. 5 April 1992, 224 p. EPOS TR 145. </note>
Reference-contexts: Triggers react to events, being calls of an ON-PROC procedure. The detailed semantics of trigger binding will not be described here <ref> [CPA + 91] </ref>. In Figure 1, each Upd E call will be instrumented by a tailing trigger.
Reference: [DG90] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing Software Processes in the Environment MELMAC. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <address> Irvine, California. </address> <booktitle> In ACM SIGPLAN Notices, </booktitle> <month> Dec. </month> <year> 1990, </year> <pages> pages 193-205, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: A process model and associated formalisms have at least four submodels: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KF87] and ADELE2 [BEM91]). Network-based (MELMAC <ref> [DG90] </ref>, Extended Petri Nets [GMMP91]), Imperative or programmmatic Process Modeling Language, PML, usually interpreted (APPL/A [JHO90], IPSE 2.5 [War89]). Hybrids (EPOS [C + 89]). All the corresponding formalisms are rather low-level, with insufficient facilities for design, structuring and customization/evolution of models and their rule bases.
Reference: [FH92] <author> Peter H. Feiler and Watts Humphrey. </author> <title> Software Process Development and Enactment: Concepts and Definitions, </title> <month> January </month> <year> 1992. </year> <note> 12 pages (Second version). </note>
Reference-contexts: Execution/monitoring of processes, plus feedback. This mainly consists of guided or enforced use of application tools, interpreting a specific process model. In PM systems with dynamic binding, like EPOS, the meta-process phases 3-6 are incremental and never-ending. Note, that SEI have introduced a somewhat different taxonomy for meta-processes <ref> [FH92] </ref>. 3 The EPOS System and its SPELL We present the EPOS system layering and EPOS PM rationale, and then the object-oriented SPELL (Software Process EvoLutionary Language) for defining, interpreting and evolving process models. 3.1 EPOS System Layering The EPOS system is layered as follows: 1.
Reference: [GMMP91] <author> Carlo Ghezzi, D. Mandrioli, S. Morasca, and M. Pezze. </author> <title> A Unified High-Level Petri Net Model for Time Critical Systems. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 17(2) </volume> <pages> 160-173, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: A process model and associated formalisms have at least four submodels: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KF87] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], Extended Petri Nets <ref> [GMMP91] </ref>), Imperative or programmmatic Process Modeling Language, PML, usually interpreted (APPL/A [JHO90], IPSE 2.5 [War89]). Hybrids (EPOS [C + 89]). All the corresponding formalisms are rather low-level, with insufficient facilities for design, structuring and customization/evolution of models and their rule bases.
Reference: [JHO90] <author> Stanley M. Sutton Jr., Dennis Heimbigner, and Leon Osterweil. </author> <title> Language Constructs for Managing Change in Process-Centered Environments. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <address> Irvine, California. </address> <booktitle> In ACM SIGPLAN Notices, </booktitle> <month> Dec. </month> <year> 1990, </year> <pages> pages 206-217, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KF87] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], Extended Petri Nets [GMMP91]), Imperative or programmmatic Process Modeling Language, PML, usually interpreted (APPL/A <ref> [JHO90] </ref>, IPSE 2.5 [War89]). Hybrids (EPOS [C + 89]). All the corresponding formalisms are rather low-level, with insufficient facilities for design, structuring and customization/evolution of models and their rule bases. The last point involves meta-processes, see below. * A product model to express (passive) data, being manipulated by activities.
Reference: [JLC92] <author> Letizia Jaccheri, Jens-Otto Larsen, and Reidar Conradi. </author> <title> Software Process Modeling and Evolution in EPOS. </title> <booktitle> In Proc. IEEE Fourth International Conference on Software Engineering and Knowledge Engineering (SEKE), Capri, Italy. </booktitle> <pages> 13 pages, </pages> <month> June </month> <year> 1992. </year> <note> Also as EPOS TR 159. </note>
Reference-contexts: Thus, a process model may cover an entire application, not only its "active parts". The following six meta-process phases can be identified, and need to be supported by methods, formalisms and tools <ref> [JLC92] </ref>: 1. Establishing a PM Framework. This consists of formalisms, pre-defined models, methods and tools. 2. Eliciting/designing an informal process model. This is done with input from the application domain (s). 2 3. Establishing/analyzing a formal, generic process model.
Reference: [Kee89] <author> Sonya E. Keene. </author> <title> Object-Oriented Programming in Common Lisp. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year> <note> 266 p. </note>
Reference-contexts: CODE, dynamic PRE/POST-CONDITIONs, FORMALS, or procedures. Some delicate conversions and synchronizations may have to be performed. The i convert rule attempts to convert an active task to a modified type definition, see the update instance for redefined class in CLOS <ref> [Kee89] </ref>. A task must be treated with regard to its state. The core of i convert does not depend on whether the type change has been done by subtyping or by versioning. In fact, redefinition of type-level properties in pre-defined types are not infrequent.
Reference: [KF87] <author> Gail E. Kaiser and Peter H. Feiler. </author> <title> An Architecture for Intelligent Assistance in Software Development. </title> <booktitle> In Proc. of the 9th Int'l ACM-SIGSOFT/IEEE-CS Conference on Software Engineering, </booktitle> <address> Monterey, CA, </address> <pages> pages 180-188, </pages> <month> April </month> <year> 1987. </year> <note> (on MARVEL). </note>
Reference-contexts: A process model and associated formalisms have at least four submodels: * An executable activity model (or task model), to express both simple and aggregate activities. The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL <ref> [KF87] </ref> and ADELE2 [BEM91]). Network-based (MELMAC [DG90], Extended Petri Nets [GMMP91]), Imperative or programmmatic Process Modeling Language, PML, usually interpreted (APPL/A [JHO90], IPSE 2.5 [War89]). Hybrids (EPOS [C + 89]).
Reference: [LB85] <author> M. M. Lehman and L. A. Belady. </author> <title> Program Evolution | Processes of Software Change. </title> <publisher> Academic Press, </publisher> <address> 538 p., </address> <year> 1985. </year>
Reference-contexts: PMi phases below). * Evolution and Customization: A useful model must evolve to reflect changes in the business and to absorb improve ments, and it must be customisible <ref> [LB85] </ref>. * Formalization, and thus support for automated analysis and assessment. * Monitoring and feedback mechanisms, to assist above assessment and evolution. * Clarity and Orthogonality, so that a small set of well-defined concepts can be freely combined. * Understandability by humans, e.g. through an external graphical notation.
Reference: [LCD + 89] <author> Anund Lie, Reidar Conradi, Tor M. Didriksen, Even-Andre Karlsson, Svein O. Hall-steinsen, and Per Holager. </author> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In Walter F. Tichy (Ed.): </editor> <booktitle> Proc. of the 2nd International Workshop on Software Configuration Management, </booktitle> <address> Princeton, USA, 25-27 Oct. </address> <year> 1989, </year> <title> 178 p. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 14 (7), </volume> <pages> pages 56-65, </pages> <month> November </month> <year> 1989. </year> <month> 14 </month>
Reference-contexts: A client-server EPOSDB, with uniform ("change-oriented") versioning <ref> [LCD + 89] </ref>. It offers a structurally object-oriented EPOS-OOER data model and its DDL to define entity and (binary) relation types 1 . Entities have a unique identity (OID), and both entities and relationships can have scalar attributes with Simula-like inheritance.
Reference: [MSW90] <author> N. Madhavji, W. Schaefer, and H. Weber, </author> <title> editors. </title> <booktitle> Proc. of the First International Conference on System Development Environments and Factories | SDEF'89, </booktitle> <address> 9-11 May 1989, Berlin, London, March 1990. </address> <publisher> Pitman Publishing, </publisher> <address> 241 p. </address>
Reference: [omg90] <institution> Object Management Group. </institution> <note> Object Services/Data Model Request for Information, </note> <month> September </month> <year> 1990. </year>
Reference-contexts: The type-level information is used to assist type evolution. Before this layer 2 was defined (spring 1992), layer 3 below had to rely on ad-hoc semantics to define PM-specific type information. 1 The EPOS-OOER entity types are close to classes in OMG terminology <ref> [omg90] </ref>. 3 SPELL is implemented by a Translator/Editor and Code Interpreter, using the un- derlying EPOSDB. 3. An EPOS PM tasking framework, using SPELL. This consists of special type-attributes and type-procedures in a pre-defined TaskEntity type to facilitate tasking, and thus to define activity models.
Reference: [War89] <author> Brian Warboys. </author> <title> The IPSE 2.5 Project: Process Modelling as the basis for a Support Environment. </title> <booktitle> In [MSW90], </booktitle> <address> 26 p., </address> <month> May </month> <year> 1989. </year> <note> epos/papers/spell.tex, EPOS TR 164, February 17, 1993 15 </note>
Reference-contexts: The available activity formalisms fall into four main categories: Descriptive or rule/trigger-based (MARVEL [KF87] and ADELE2 [BEM91]). Network-based (MELMAC [DG90], Extended Petri Nets [GMMP91]), Imperative or programmmatic Process Modeling Language, PML, usually interpreted (APPL/A [JHO90], IPSE 2.5 <ref> [War89] </ref>). Hybrids (EPOS [C + 89]). All the corresponding formalisms are rather low-level, with insufficient facilities for design, structuring and customization/evolution of models and their rule bases. The last point involves meta-processes, see below. * A product model to express (passive) data, being manipulated by activities.
References-found: 17

