URL: http://www.geom.umn.edu/software/cglist/GeomDir/ptloc96.ps.gz
Refering-URL: http://www.geom.umn.edu/software/cglist/GeomDir/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Fast Randomized Point Location Without Preprocessing in Two- and Three-dimensional Delaunay Triangulations  
Author: Ernst P. Mucke Isaac Saias Binhai Zhu 
Address: Los Alamos, New Mexico  
Affiliation: Los Alamos National Laboratory,  
Abstract: This paper studies the point location problem in Delau-nay triangulations without preprocessing and additional storage. The proposed procedure finds the query point simply by "walking through" the triangulation, after selecting a "good starting point" by random sampling. The analysis generalizes and extends a recent result for d = 2 dimensions by proving this procedure to take expected time close to O(n 1=(d+1) ) for point location in Delaunay triangulations of n random points in d = 3 dimensions. Empirical results in both two and three dimensions show that this procedure is efficient in practice. 
Abstract-found: 1
Intro-found: 1
Reference: [AEI + 85] <author> T. Asano, M. Edahiro, H. Imai, M. Iri, and K. Murota. </author> <title> Practical use of bucketing techniques in computational geometry. </title> <editor> In G. T. Toussaint, editor, </editor> <booktitle> Computational Geometry, </booktitle> <pages> pages 153-195. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1985. </year>
Reference-contexts: K987, Los Alamos, NM 87545, USA. To appear in the Proceedings of the 12th Annual Symposium on Computational Geometry, 1996. Version: March 7, 1996 The best known practical algorithm uses "bucketing" and is due to Asano et al. <ref> [AEI + 85] </ref>. It achieves optimal logarithmic time complexity; however, it, too, requires some extra preprocessing, especially within each bucket, and additional storage. Actual engineering implementations also often use tree structures to guide the point location, e.g., the "alternating digital tree" described in Bonet and Peraire [BP91]. <p> 2 n. 0 10 20 30 40 0 10000 20000 30000 40000 50000 for each data set of size n. 0 1 2 3 4 0 1 2 3 4 It should be noted that it might be difficult to compare our algorithm with that of the bucketing algorithm of <ref> [AEI + 85] </ref>. Although the latter algorithm takes an average constant query time, the constant depends on the size of the buckets, hence depends on the amount of preprocessing performed in the buckets.
Reference: [BP91] <author> J. Bonet and J. Peraire. </author> <title> An alternating digital tree (ADT) algorithm for 3D geometric searching and intersection problems. </title> <journal> International Journal for Numerical Methods in Engineering, </journal> <volume> 31 </volume> <pages> 1-17, </pages> <year> 1991. </year>
Reference-contexts: It achieves optimal logarithmic time complexity; however, it, too, requires some extra preprocessing, especially within each bucket, and additional storage. Actual engineering implementations also often use tree structures to guide the point location, e.g., the "alternating digital tree" described in Bonet and Peraire <ref> [BP91] </ref>. Obviously they, as well, require building and maintaining additional data structures. Here, we will discuss a technique that is efficient in practice, uses no preprocessing time, no additional storage, and, as a bonus, could not be easier to implement.
Reference: [BD95] <author> P. Bose and L. Devroye. </author> <title> Intersections with random geometric objects. </title> <type> manuscript, </type> <institution> School of Computer Science, McGill University, </institution> <year> 1995. </year>
Reference-contexts: This result, in turn, builds on the work of Bose and Devroye <ref> [BD95] </ref> who prove that for any line segment L the expected number of intersected triangles in proportional to jLjn 1=2 . <p> Here, we provide a specific estimate of the range of this perturbation. Our methods seem well suited to bring even more precise results. Outline. The paper is organized as follows. In Sections 2 and 3, we first generalize the result of <ref> [BD95] </ref> regarding the intersection of a line segment with a random Delaunay triangulation to 3D. Then, we generalize the proof of [DMZ95] to 3D. In Sections 4 and 5, we present empirical results over randomly generated point sets ranging from n = 1000 to 50000. <p> One of the advantages of our more general notion is that it allows for a probability measure charging only points with rational coordinates: this is the case for most computer simulations. This probabilistic model was introduced in <ref> [BD95] </ref>. The Poisson model of [BEY91] is related to ours in the sense that, conditioned on the number n of points observed over a finite volume, the probability distribution is uniform, i.e., an (ff; ff)-measure. <p> We then have E N fi B c 5 1 + E [ jLj fi B ] n 1=3 log n= log log n. In Section 3, we first prove Theorem 2 following the same ideas as <ref> [BD95] </ref>; however, we would like to point out that the technical details are quite different in 3D and more difficult.
Reference: [BEY91] <author> M. Bern, D. Eppstein, and F. Yao. </author> <title> The expected extremes in a Delaunay triangulation. </title> <journal> International Journal of Computational Geometry & Applications, </journal> <volume> 1 </volume> <pages> 79-91, </pages> <year> 1991. </year>
Reference-contexts: In the following, we extend both results to IR 3 , showing that jump-and-walk point location in spatial Delaunay triangulations of n random points has an expected running time of O , where ffi (n) denotes the expected degree of a Delaunay vertex. A result of Bern et al. <ref> [BEY91] </ref> on the expected maximum degree would give ffi (n) = O (log n= log log n). On the other hand, Dwyer [Dwy91] shows that ffi (n) = O (1) for any fixed dimension d, assuming that the points are chosen uniformly at random in a d-dimensional ball. <p> One must be careful though to define (as much as possible) these volumes independently from the vertices. We achieve this difficult task in 3D. Second, the perturbing effect of the boundary is very well-known. The probabilistic model of <ref> [BEY91] </ref>, for instance, was designed to analyze typical properties of Delaunay triangulations away from the boundary. Here, we provide a specific estimate of the range of this perturbation. Our methods seem well suited to bring even more precise results. Outline. The paper is organized as follows. <p> One of the advantages of our more general notion is that it allows for a probability measure charging only points with rational coordinates: this is the case for most computer simulations. This probabilistic model was introduced in [BD95]. The Poisson model of <ref> [BEY91] </ref> is related to ours in the sense that, conditioned on the number n of points observed over a finite volume, the probability distribution is uniform, i.e., an (ff; ff)-measure. <p> To prove this, we need the following result, very similar to the result derived by <ref> [BEY91] </ref> in their Theorem 7. Lemma 8. There exists a constant c 00 such that P [d o (X 1 ) &gt; c 00 log n= log log n] 1=n 4 . <p> Therefore P [9i; d o (X i ) &gt; c 00 log n= log log n] 1=n 3 : Proof: The proof of this result follows very closely the proof for the Poisson model given in Lemmas 8 and 9 of <ref> [BEY91] </ref>. The only technical difference is that they bound the first probability by 1=n 2 instead of 1=n 4 . We show here that 1=n 4 is similarly valid. <p> with E [N 2 ; B 2 ]: E [ N 2 ; B 2 ] Kc 00 P [B 2 ] E [ N 1 j B 2 ] log n= log log n Kc 00 E [N 1 ] log n= log log n 5 Theorem 1 of <ref> [BEY91] </ref> establishes that the maximum edge length is at most O with high probability. Our additional factor 1=n 1=3 comes from the fact that they consider a cube of variable side length 1=n 1=3 .
Reference: [Bow81] <author> A. Bowyer. </author> <title> Computing Dirichlet tessellations. </title> <journal> The Computer Journal, </journal> <volume> 24 </volume> <pages> 162-166, </pages> <year> 1981. </year>
Reference-contexts: Simple walk-through. The basic idea is straightforward and not at all new; it goes back to early papers on constructing Delaunay triangulations in 2D and 3D <ref> [GS78; Bow81] </ref>. The underlying assumption is that the Delaunay triangulation D of a set X 2 IR d of n points is given by an internal representation such that constant-time access between neighboring simplices (i.e., triangles for d = 2, tetrahedra for d = 3) is possible. <p> This method has been ignored by most theoreticians in computational geometry since not much can be said about its performance theoretically, other than it is "expected" to take time proportional to n 1=d when the points are randomly distributed <ref> [GS78; Bow81] </ref>. However, because of its exceptional simplicity, the method is 1 indeed used by practitioners in the geometric computing community, in particular, in FEA, e.g., [GH92]. Improved jump-and-walk.
Reference: [Bri93] <author> E. Brisson. </author> <title> Representing Geometric Structures in d Dimensions: Topology and Order. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 9(4) </volume> <pages> 387-426, </pages> <year> 1993. </year>
Reference-contexts: This can be achieved by using, e.g., the 2D quad-edge data structure [GS85], the edge-facet structure in 3D [DL89], its specialization and compactification to the domain of 3D triangulations [E93], or its generalization to d dimensions <ref> [Bri93] </ref>. Now, in order to locate a query point q, select some simplex of D, consider the line segment L, from a vertex of the initial simplex to the query point q, and simply "walk towards" q by traversing all simplices intersected by L.
Reference: [DL89] <author> D. P. Dobkin and M. J. Laszlo. </author> <title> Primitives for the Manipulation of Three-Dimensional Subdivisions. </title> <journal> Al-gorithmica, </journal> <volume> 4(1) </volume> <pages> 3-32, </pages> <year> 1989. </year>
Reference-contexts: This can be achieved by using, e.g., the 2D quad-edge data structure [GS85], the edge-facet structure in 3D <ref> [DL89] </ref>, its specialization and compactification to the domain of 3D triangulations [E93], or its generalization to d dimensions [Bri93].
Reference: [DL76] <author> D. P. Dobkin and R. J. Lipton. </author> <title> Multidimensional searching problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 5 </volume> <pages> 181-186, </pages> <year> 1976. </year>
Reference-contexts: Since fi (log n) is the best known theoretical bound for planar point locations, see, e.g., [PS85], Figure 9 plots the ratio M n = log 2 n to give a measure for the efficiency of the method. Note that the best known planar point location algorithm <ref> [DL76] </ref> is obtained by two binary searches, one horizontally and one vertically, thus has at least a constant of 2 in front of the log 2 n. 0 10 20 30 40 0 10000 20000 30000 40000 50000 for each data set of size n. 0 1 2 3 4 0
Reference: [DMZ95] <author> L. Devroye, E. P. Mucke, and B. Zhu. </author> <title> A note on point location in Delaunay triangulations of random points. </title> <note> 1995. Submitted to Information Processing Letters. </note>
Reference-contexts: positive empirical results of [E93], where the jump-and-walk is used to implement the randomized incremental flip algorithm to construct 3D De-launay triangulations, this procedure was recently analyzed for IR 2 , with the result that the expected query time is O (n 1=3 ) when the points are randomly distributed <ref> [DMZ95] </ref>. This result, in turn, builds on the work of Bose and Devroye [BD95] who prove that for any line segment L the expected number of intersected triangles in proportional to jLjn 1=2 . <p> Outline. The paper is organized as follows. In Sections 2 and 3, we first generalize the result of [BD95] regarding the intersection of a line segment with a random Delaunay triangulation to 3D. Then, we generalize the proof of <ref> [DMZ95] </ref> to 3D. In Sections 4 and 5, we present empirical results over randomly generated point sets ranging from n = 1000 to 50000. <p> In Section 3, we first prove Theorem 2 following the same ideas as [BD95]; however, we would like to point out that the technical details are quite different in 3D and more difficult. Given Theorem 2, it is easy to generalize the result of <ref> [DMZ95] </ref> to obtain Theorem 1. 3 Probabilistic Analysis For every bounded domain D of IR 3 let B (D) denote the smallest 3-dimensional ball containing D; we will say that B (D) is the canonical ball circumscribed to D. <p> jB 3 ], implies that: E [ N j B 3 ] Hence, E [N ; B 3 ] c 5 (1 + E [ d (Y; q) ]) n 1=3 log n= log log n : The estimation of E [ d (Y; q) ] is done as in <ref> [DMZ95] </ref>. The beginning of the argument is similar to the estimation of P [ B 3 ] above. Lemma 5 is then used. We let diam (C) denote the diameter of C.
Reference: [Dwy91] <author> R. A. Dwyer. </author> <title> Higher-dimensional Voronoi diagrams in linear expected time. </title> <journal> Discrete & Computational Geometry, </journal> <volume> 6 </volume> <pages> 343-367, </pages> <year> 1991. </year>
Reference-contexts: A result of Bern et al. [BEY91] on the expected maximum degree would give ffi (n) = O (log n= log log n). On the other hand, Dwyer <ref> [Dwy91] </ref> shows that ffi (n) = O (1) for any fixed dimension d, assuming that the points are chosen uniformly at random in a d-dimensional ball.
Reference: [GH92] <author> P. L. George and F. Hermeline. </author> <title> Delaunay's Mesh of a Convex Polyhedron in Dimension d. Application to Arbitrary Polyhedra. </title> <journal> International Journal for Numerical Methods in Engineering, </journal> <volume> 33(5) </volume> <pages> 975-995, </pages> <year> 1992. </year>
Reference-contexts: However, because of its exceptional simplicity, the method is 1 indeed used by practitioners in the geometric computing community, in particular, in FEA, e.g., <ref> [GH92] </ref>. Improved jump-and-walk. We can improve the simple walk-through by "jumping" to a "good starting point" via random sampling on the point set fX 1 ; X 2 ; : : : ; X n g.
Reference: [GS78] <author> P. J. Green and R. Sibson. </author> <title> Computing Dirichlet tessellations in the plane. </title> <journal> The Computer Journal, </journal> <volume> 21 </volume> <pages> 168-173, </pages> <year> 1978. </year>
Reference-contexts: Simple walk-through. The basic idea is straightforward and not at all new; it goes back to early papers on constructing Delaunay triangulations in 2D and 3D <ref> [GS78; Bow81] </ref>. The underlying assumption is that the Delaunay triangulation D of a set X 2 IR d of n points is given by an internal representation such that constant-time access between neighboring simplices (i.e., triangles for d = 2, tetrahedra for d = 3) is possible. <p> This method has been ignored by most theoreticians in computational geometry since not much can be said about its performance theoretically, other than it is "expected" to take time proportional to n 1=d when the points are randomly distributed <ref> [GS78; Bow81] </ref>. However, because of its exceptional simplicity, the method is 1 indeed used by practitioners in the geometric computing community, in particular, in FEA, e.g., [GH92]. Improved jump-and-walk.
Reference: [GS85] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the Manipulation of General Subdivisions and the Computation of Voronoi Diagrams. </title> <journal> Transactions on Graphics, </journal> <volume> 4(2) </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: This can be achieved by using, e.g., the 2D quad-edge data structure <ref> [GS85] </ref>, the edge-facet structure in 3D [DL89], its specialization and compactification to the domain of 3D triangulations [E93], or its generalization to d dimensions [Bri93].
Reference: [E93] <author> E. P. Mucke. </author> <title> Shapes and Implementations in Three-Dimensional Geometry. </title> <type> PhD thesis, Technical report UIUCDCS-R-93-1836. </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Ur-bana, Illinois, </institution> <year> 1993. </year>
Reference-contexts: This can be achieved by using, e.g., the 2D quad-edge data structure [GS85], the edge-facet structure in 3D [DL89], its specialization and compactification to the domain of 3D triangulations <ref> [E93] </ref>, or its generalization to d dimensions [Bri93]. <p> Step (3), i.e., the simple walk-through, can be implemented in constant time per simplex visited, once the initial simplex, intersected by L and incident to "starting point" Y , is determined. Motivated by the positive empirical results of <ref> [E93] </ref>, where the jump-and-walk is used to implement the randomized incremental flip algorithm to construct 3D De-launay triangulations, this procedure was recently analyzed for IR 2 , with the result that the expected query time is O (n 1=3 ) when the points are randomly distributed [DMZ95]. <p> In any case, remember that bucketing requires preprocessing and additional data structures. 5 Empirical Results in 3D Let us now see how well the jump-and-walk performs in 3D. For convenience, we again implement only a slight variation of the original procedure; cf. <ref> [E93] </ref>. First, we sample triangles rather than vertices. The size of the sample is set to m = 2n 1=4 , for Delaunay triangulations of n points. The "distance" of a triangle to the query point q is calculated simply as the minimum distance of its three vertices to q.
Reference: [PS85] <author> F. P. Preparata and M.I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year> <month> 10 </month>
Reference-contexts: Thus, M n corresponds to the E [N total ] in the analysis. Since fi (log n) is the best known theoretical bound for planar point locations, see, e.g., <ref> [PS85] </ref>, Figure 9 plots the ratio M n = log 2 n to give a measure for the efficiency of the method.
References-found: 15

