URL: http://www.almaden.ibm.com/cs/k53/papers/soda98.ps
Refering-URL: http://www.cs.berkeley.edu/~soumen/pub.html
Root-URL: http://www.cs.berkeley.edu/~soumen/pub.html
Title: Flow and Stretch Metrics for Scheduling Continuous Job Streams  
Author: Michael A. Bender Soumen Chakrabarti S. Muthukrishnan 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ 07632, USA, </address> <year> 1986. </year>
Reference-contexts: We aim to schedule these jobs with a guaranteed quality of service (QoS). QoS is interpreted in many ways (e.g., throughput, avoiding jitter or delay, etc.). Here we adopt the widely-accepted requirement that the schedule be responsive to each job and avoid starvation of any job <ref> [1] </ref>. In this paper, we propose two novel scheduling metrics, namely, max-stretch and max-flow. These metrics gauge the responsiveness of the scheduler to each job. Surprisingly, despite the extensive research on scheduling algorithms in the past few decades, these metrics seem to be new.
Reference: [2] <author> K. R. Baker. </author> <title> Introduction to Sequencing and Scheduling. </title> <publisher> Wiley, </publisher> <year> 1974. </year>
Reference-contexts: For over two decades <ref> [2] </ref>, the sum-flow, P j F j , has been considered the suitable metric to optimize for continuous job arrivals. The Shortest Remaining Processing Time (SRPT) heuristic produces a schedule with optimum sum-flow [15] when there is a single processor.
Reference: [3] <author> K. P. Brown, M. Mehta, M. J. Carey, and M. Livny. </author> <title> Towards automated performance tuning for complex workloads. </title> <type> Technical Report TR 1247, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, WI, </institution> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Our Metrics. From the discussion above, it is natural to conclude that in order to avoid starvation, one should bound the flow time of each job. This motivates our first metric max-flow, max j F j . Our second metric, max-stretch, is motivated by the database literature <ref> [3, 19] </ref>. <p> Database server scheduling is another promising area to apply our heuristics based on the new metric since the issue of fairness across diverse job mixes (e.g., transactions vs. decision support; see <ref> [3] </ref> is relevant. There, too, the entire systems solution involves other considerations such as buffer management, I/O, locking, etc. We are currently running further experiments and evaluating how to integrate the scheduling heuristics into the existing systems in the most effective manner. Map.
Reference: [4] <author> M. J. Carey, M. Livny, and H. Lu. </author> <title> Dynamic task allocation in a distributed database system. </title> <type> CS TR. </type>
Reference: [5] <author> S. Chakrabarti, C. Phillips, A. Schulz, D. Shmoys, C. Stein, and J. Wein. </author> <title> Improved scheduling algorithms for minsum criteria. </title> <booktitle> In ICALP: Annual International Colloquium on Automata, Languages and Programming, </booktitle> <year> 1996. </year>
Reference: [6] <author> C. Chekuri, R. Johnson, R. Motwani, B. Natarajan, B. R. Rau, and M. Schlansker. </author> <title> Profile-driven instruction level parallel scheduling with application to super blocks. </title> <booktitle> In Proceedings of the 29th Annual International Symposium on Microarchitecture, </booktitle> <pages> pages 58-67, </pages> <address> Paris, France, </address> <month> Dec. </month> <pages> 2-4, </pages> <year> 1996. </year> <journal> IEEE Computer Society TC-MICRO and ACM SIGMICRO. </journal>
Reference-contexts: This motivates our second metric, max-stretch, defined as max j F j Both our metrics seem natural and complement ex 1 The makespan is a suitable measure for batched jobs, and average completion time is useful in some compiler optimization settings <ref> [6] </ref>. 2 Typical HTTP server responses vary over three orders of magnitude. It is unreasonable to get the same average response time (of say 10 minutes) for a 300 byte GIF file and also a 6 MBytes tarfile.
Reference: [7] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <booktitle> In Proc. ACM SIGCOMM '89, </booktitle> <pages> pages 1-12, </pages> <address> Austin, TX, </address> <month> Sept. </month> <year> 1989. </year>
Reference: [8] <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: We show that the max-stretch metric is much harder to approximate. To show this, we use the fact that the following problem is N P -complete in the strong sense <ref> [8] </ref>. 3-Partition: Given set A of 3m integers, a positive integer bound B, such that B 4 &lt; a &lt; B a2A a = mB, can A be partitioned into m disjoint sets A 1 ; : : :; A m such that P Theorem 4.1.
Reference: [9] <author> S. J. Golestani. </author> <title> A seli-clocked fair queueing scheme for broadband applications. </title> <booktitle> In Proceedings of the 13th Annual Joint Conference of the IEEE Computer and Communications Societies on Networking for Global Com-munciation. </booktitle> <volume> Volume 2, </volume> <pages> pages 636-646, </pages> <address> Los Alamitos, CA, USA, June 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [10] <author> P. Goyal, X. Guo, and H. M. Vin. </author> <title> A hierarchical CPU scheduler for multimedia operating systems. </title> <type> Technical Report CS-TR-96-12, </type> <institution> The University of Texas at Austin, Department of Computer Sciences. </institution>
Reference: [11] <author> R. L. Graham. </author> <title> Bounds on multiprocessor timing anomalies. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 17(2) </volume> <pages> 416-429, </pages> <month> March </month> <year> 1969. </year>
Reference-contexts: University, 33 Oxford Street, Cambridge, MA 02138. bender@das.harvard.edu. y IBM Almaden Research Center, 650 Harry Road, San Jose, CA 95120. soumen@almaden.ibm.com. z Information Sciences Center, Bell Labs, 700 Mountain Avenue, Murray Hill, NJ 07974. muthu@research.bell-labs.com. measures can be approximated well under various scenarios. (For example, see the classical results in <ref> [11] </ref> for makespan and the recent developments [12] for average completion time.) However, neither is a suitable measure when jobs arrive in continuous streams. 1 For jobs arriving continuously, a relevant parameter is the time a job j spends in the system, namely, the flow time defined as F j =
Reference: [12] <author> L. Hall, D. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and online algorithms. </title> <booktitle> In Symposium on Discrete Algorithms (SODA). ACM-SIAM, </booktitle> <year> 1996. </year>
Reference-contexts: bender@das.harvard.edu. y IBM Almaden Research Center, 650 Harry Road, San Jose, CA 95120. soumen@almaden.ibm.com. z Information Sciences Center, Bell Labs, 700 Mountain Avenue, Murray Hill, NJ 07974. muthu@research.bell-labs.com. measures can be approximated well under various scenarios. (For example, see the classical results in [11] for makespan and the recent developments <ref> [12] </ref> for average completion time.) However, neither is a suitable measure when jobs arrive in continuous streams. 1 For jobs arriving continuously, a relevant parameter is the time a job j spends in the system, namely, the flow time defined as F j = C j a j for job j.
Reference: [13] <author> L. A. Hall. </author> <title> Approximation Algorithms for N P-Hard Problems, chapter Approximation Algorithms for Scheduling. </title> <publisher> PWS Publishing Company, </publisher> <address> Boston, MA, </address> <year> 1996. </year>
Reference: [14] <author> L. A. Hall, A. S. Schulz, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: offline and online algorithms. </title> <journal> Math of OR, </journal> <note> 1997. To appear. </note>
Reference: [15] <author> D. Karger, C. Stein, and J. Wein. </author> <title> Scheduling algorithms. </title> <booktitle> In CRC Handbook of Computer Science, </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: For over two decades [2], the sum-flow, P j F j , has been considered the suitable metric to optimize for continuous job arrivals. The Shortest Remaining Processing Time (SRPT) heuristic produces a schedule with optimum sum-flow <ref> [15] </ref> when there is a single processor. Unfortunately, this heuristic has the well-known drawback that it leads to starvation. That is, some jobs may be delayed to an unbounded extent. Inducing starvation is an inherent property of the sum-flow metric.
Reference: [16] <author> H. Kellerer, T. Tautenhahn, and G. J. Woeginger. </author> <title> Ap-proximability and nonapproximability results for minimizing total flow time on a single maching. </title> <booktitle> In Proceedings of the Twenty-Eighth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 418-426, </pages> <address> Philadelphia, Pennsylvania, </address> <month> 22-24 May </month> <year> 1996. </year>
Reference-contexts: Thus, preemption is necessary to achieve efficient algorithms that guarantee jobs do not starve. Although the sum-flow metric is similarly hard to approximate <ref> [16] </ref>, sum-flow and max-stretch differ in following crucial way: Although approximations for nonpreemptive sum-flow may be obtained by massaging an optimal/approximate preemptive sum-flow schedule, this technique is unlikely to work for max-stretch. <p> At time zero, two jobs of length 1 are released. If the algorithm decides to put them on the same processor, the adversary stops. Otherwise, the adversary submits a job of length two at time * for some * &gt; 0. 4 O*ine Max-flow and Max-stretch In <ref> [16] </ref>, it was shown that no polynomial time algorithm can approximate the sum-flow to a factor O (n 1=2* ) for any * &gt; 0 in the o*ine nonpreemptive case unless P = N P (they also gave a scheduling algorithm with performance guarantee of O (n 1=2 ) for sum-flow).
Reference: [17] <author> E. L. Lawler, J. K. Lenstra, A. H. R. Kan, and D. B. Shmoys. </author> <title> Sequencing and scheduling: </title> <booktitle> Algorithms and complexity. </booktitle> <pages> pages 445-522, </pages> <year> 1993. </year>
Reference: [18] <author> S. Leonardi and D. Raz. </author> <title> Approximating total flow time on parallel machines. </title> <booktitle> In Proceedings of the Twenty-Ninth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 110-119, </pages> <address> El Paso, Texas, </address> <month> 4-6 May </month> <year> 1997. </year>
Reference: [19] <author> M. Mehta and D. J. DeWitt. </author> <title> Dynamic memory allocation for multiple-query workloads. </title> <editor> In R. Agrawal, S. Baker, and D. Bell, editors, </editor> <booktitle> Very large data bases, VLDB '93: proceedings of the 19th International Conference on Very Large Data Bases, </booktitle> <month> August 24-27, </month> <year> 1993, </year> <title> Dublin, </title> <booktitle> Ireland, </booktitle> <pages> pages 354-367, </pages> <address> Palo Alto, Calif., USA, 1993. </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: Our Metrics. From the discussion above, it is natural to conclude that in order to avoid starvation, one should bound the flow time of each job. This motivates our first metric max-flow, max j F j . Our second metric, max-stretch, is motivated by the database literature <ref> [3, 19] </ref>.
Reference: [20] <author> M. Mehta and D. J. DeWitt. </author> <title> Dynamic memory allocation for multiple-query workloads. </title> <type> Technical Report TR 1151, </type> <institution> Computer Science Department, University of Wisconsin-Madison, </institution> <month> June </month> <year> 1993. </year>
Reference: [21] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Scheduling jobs that arrive over time. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> 955:86, </address> <year> 1995. </year>
Reference: [22] <author> C. A. Phillips, C. Stein, E. Torng, and J. Wein. </author> <title> Optimal time-critical scheduling via resource augmentation (extended abstract). </title> <booktitle> In Proceedings of the Twenty-Ninth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 140-149, </pages> <address> El Paso, Texas, </address> <month> 4-6 May </month> <year> 1997. </year>
Reference-contexts: This is because there can be a large gap between the optimum max-stretch of the preemptive and nonpreemptive schedules (see Lemma 2.2). 3 In <ref> [22] </ref>, for weight w j of job j, the authors consider minimizing P j w j F j under a nonstandard model. Clearly, setting w j = 1=t j reduces this expression to the sum of the stretches (denoted sum-stretch) metric.
Reference: [23] <author> M. Pinedo. </author> <title> On-Line Algorithms, </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference: [24] <author> J. Sgall. </author> <title> On-line algorithms, </title> <booktitle> lecture notes in computer science. </booktitle> <editor> In A. Fiat and G. Woeginger, editors, </editor> <title> On-Line Scheduling A survey, </title> <address> Berlin, 1997. Springer Verlag. </address> <note> To appear. </note>
Reference: [25] <author> C. A. Waldspurger, T. Hogg, B. A. Huberman, J. O. Kephart, and W. S. Stornetta. Spawn: </author> <title> A distributed computational economy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(2) </volume> <pages> 103-117, </pages> <month> Feb. </month> <year> 1992. </year>
Reference: [26] <author> L. Zhang. </author> <title> Virtual clock: A new traffic control algorithm for packet switching networks. </title> <booktitle> SIGCOMM 90, </booktitle> <pages> pages 19-29, </pages> <year> 1990. </year>
References-found: 26

