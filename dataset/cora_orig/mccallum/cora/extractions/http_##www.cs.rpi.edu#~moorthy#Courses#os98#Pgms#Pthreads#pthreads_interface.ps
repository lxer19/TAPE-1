URL: http://www.cs.rpi.edu/~moorthy/Courses/os98/Pgms/Pthreads/pthreads_interface.ps
Refering-URL: http://www.cs.rpi.edu/~moorthy/Courses/os98/notes.html
Root-URL: http://www.cs.rpi.edu
Title: Pthreads Library Interface modify it under the terms of the GNU Library General Public License
Author: Frank Mueller 
Keyword: GNU Library General Public License.  
Note: (C)OPYRIGHT NOTICE: Copyright (C) 1992, the Florida State University Distributed by the Florida State University under the terms of the  This file is part of Pthreads. Pthreads is free software; you can redistribute it and/or  as published by the Free Software Foundation (version 2). Pthreads is distributed "AS IS" in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied  Foundation, 675  Report problems and direct all questions to:  
Address: Tallahassee, Florida 32306-4019  Mass Ave, Cambridge, MA 02139, USA.  
Affiliation: Department of Computer Science Florida State University  
Email: e-mail: mueller@cs.fsu.edu  pthreads-bugs@ada.cs.fsu.edu  
Phone: phone: (904) 644-3441,  
Date: April 18, 1996  
Abstract: This document describes the interface of the Pthreads library developed at Florida State University. The implementation is based on the standard proposal "POSIX 1003.4a Threads Extension, Draft 6". The implementation is currently limited to the Sun SPARC architecture and the SunOS 4.1.x or Solaris 2.x operating systems. The package should be portable under other BSD, SVR4, or POSIX compliant UNIX systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. P. Baker, F. Mueller, and Viresh Rustagi. </author> <title> Experience with a prototype of the POSIX "minimal realtime system profile". </title> <booktitle> In IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 12-16, </pages> <year> 1994. </year>
Reference-contexts: Box 1331 445 Hoes Lane Piscataway, NJ 08854-1331 phone (201) 981-0060 If you need more specific information about certain topics (e.g., signal handling or some programming examples), you may want to read the papers available by anonymous ftp from ftp.cs.fsu.edu (128.186.121.2) in /pub/PART <ref> [3, 4, 1] </ref> or check out the page http://www.cs.fsu.edu/~mueller under WWW.
Reference: [2] <author> T.P. Baker. </author> <title> Stack-based scheduling of realtime processes. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 3(1) </volume> <pages> 67-99, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Furthermore, implementations can use stacks and should be more efficient that priority inheritance.) A more detailed description of the two protocols is given in [4]. The current implementation of the priority ceiling protocol is based on the stack resource policy <ref> [2] </ref>. Under this policy, mutexes have to unlocked in the opposite order in which they were locked (LIFO like a stack). int pthread_mutex_setprio_ceiling (pthread_mutex_t *__mutex, int __prio_ceiling); int pthread_mutex_getprio_ceiling (pthread_mutex_t __mutex); These primitives allow the direct manipulation of the priority ceiling level of a mutex.
Reference: [3] <author> Frank Mueller. </author> <title> Implementing POSIX threads under UNIX: Description of work in progress. </title> <booktitle> In Proceedings of the Second Software Engineering Research Forum, </booktitle> <pages> pages 253-261, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Box 1331 445 Hoes Lane Piscataway, NJ 08854-1331 phone (201) 981-0060 If you need more specific information about certain topics (e.g., signal handling or some programming examples), you may want to read the papers available by anonymous ftp from ftp.cs.fsu.edu (128.186.121.2) in /pub/PART <ref> [3, 4, 1] </ref> or check out the page http://www.cs.fsu.edu/~mueller under WWW.
Reference: [4] <author> Frank Mueller. </author> <title> A library implementation of POSIX threads under UNIX. </title> <booktitle> In Proceedings of the USENIX Conference, </booktitle> <pages> pages 29-41, </pages> <month> January </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Box 1331 445 Hoes Lane Piscataway, NJ 08854-1331 phone (201) 981-0060 If you need more specific information about certain topics (e.g., signal handling or some programming examples), you may want to read the papers available by anonymous ftp from ftp.cs.fsu.edu (128.186.121.2) in /pub/PART <ref> [3, 4, 1] </ref> or check out the page http://www.cs.fsu.edu/~mueller under WWW. <p> Under SCHED RR, the current thread is preempted after his time slice expires (if he is still executing). The preempted thread is then requeued at the tail of his priority level in the ready queue (also see <ref> [4] </ref>). The third policy, SCHED OTHER, is implementation defined and not supported by this implementation. <p> Furthermore, implementations can use stacks and should be more efficient that priority inheritance.) A more detailed description of the two protocols is given in <ref> [4] </ref>. The current implementation of the priority ceiling protocol is based on the stack resource policy [2]. <p> Signals may pend on a thread (when the thread has the signal masked) or on the process (when all threads have the signal masked). Default actions (if applicable) are performed with respect to the process (also see <ref> [4] </ref>). int sigwait (sigset_t *__set); Atomically clears the signals defined in set from the thread's signal mask. If one of the signals in set is pending, sigwait return immediately. Otherwise the current thread suspends until a signal in set is received.
References-found: 4

