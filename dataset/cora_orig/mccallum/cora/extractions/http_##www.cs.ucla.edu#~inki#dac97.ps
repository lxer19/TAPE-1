URL: http://www.cs.ucla.edu/~inki/dac97.ps
Refering-URL: http://www.cs.ucla.edu/~inki/publications.html
Root-URL: http://www.cs.ucla.edu
Title: Potential-Driven Statistical Ordering of Transformations  
Author: Inki Hong, Darko Kirovski, and Miodrag Potkonjak 
Address: Los Angeles, CA 90095-1596 USA  
Affiliation: UCLA Computer Science Department,  
Abstract: Successive, well organized application of transformations has been widely recognized as an exceptionally effective, but complex and difficult CAD task. We introduce a new potential-driven statistical approach for ordering transformations. Two new synthesis ideas are the backbone of the approach. The first idea is to quantify the characteristics of all transformations and the relationship between them based on their potential to reorganize a computation such that the complexity of the corresponding implementation is reduced. The second one is based on the observation that transformations may disable each other not only because they prevent the application of the other transformation, but also because both transformations target the same potential of the computation. These two observations drastically reduce the search space to find efficient and effective scripts for ordering transformations. A key algorithmic novelty is that both conceptual and optimization insights as well as all optimization algorithms are automatically derived by organized experimentation and statistical methods. On a large set of diverse real-life examples improvements in throughput, area, and power by large factors have been obtained. Both qualitative and quantitative statistical analysis indicate effectiveness, high robustness, and consistency of the new approach for ordering transformations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.F. Bacon, S.L. Graham, and O.J. Sharp. </author> <title> Compiler transformations for high performance computing. </title> <journal> ACM Computing Surveys, </journal> <volume> 26(4):345420, </volume> <year> 1994. </year>
Reference-contexts: 1 Introduction 1.1 Motivation Transformations are alternations in the structure of a computation such that the initial input/output specification is completely maintained <ref> [1] </ref>. Transformations have been recognized as the high-level synthesis and compilation step with the highest impact on design metrics.
Reference: [2] <author> R.K. Brayton, G.D. Hachtel, C.T. McMullen, and A.L. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1984. </year>
Reference-contexts: Finally, the effectiveness and efficiency of the scripts are validated and analyzed on a large set of examples and conclusion and directions for future work are outlined. 2 Related Work The approaches for transformation ordering can be classified in 7 groups: peephole optimization [9], manually-derived static scripts <ref> [2] </ref>, exhaustive search-based generate and test methods [8], algebraic ordering of linear loop-control flow transformations [13], probabilistic search techniques [3], bottleneck removal methods [4], and microscopic and special-domain enabling-effect based techniques [11].
Reference: [3] <author> A.P. Chandrakasan, M. Potkonjak, R. Mehra, J. Rabaey, and R. Brodersen. </author> <title> Optimizing power using transformations. </title> <journal> IEEE Transactions on CAD, </journal> <volume> 14(1):12, </volume> <year> 1995. </year>
Reference-contexts: of examples and conclusion and directions for future work are outlined. 2 Related Work The approaches for transformation ordering can be classified in 7 groups: peephole optimization [9], manually-derived static scripts [2], exhaustive search-based generate and test methods [8], algebraic ordering of linear loop-control flow transformations [13], probabilistic search techniques <ref> [3] </ref>, bottleneck removal methods [4], and microscopic and special-domain enabling-effect based techniques [11]. <p> The area is estimated after hardware mapping using the Hyper system. This estimator has been statistically validated to produce results within less than 20% of error in more than 95% of the cases. Finally, the power is estimated using the Hyper-LP <ref> [3] </ref> estimation tools which was also statistically validated to be within 20% of the real power consumption in more than 95% of the instances. 4 Development of Transformation Scripts 4.1 Potentials of Computations Potentials for improvement of a computation using transformations can be defined as a combination of the degrees of <p> Finally, during power optimization the goal is to minimize the number of switching events through the minimization of the number of operations and data transfers and through minimizing the length of interconnects as well as to minimize the critical path, so that the throughput-voltage trade-off can be explored <ref> [3] </ref>. It has been shown that there is a very strong correlation between the area and the length of the interconnects. Therefore, power minimization can be seen as simultaneous throughput and area optimization, with additional degree of freedom for the minimization of the number of operations.
Reference: [4] <author> S. Dey, M. Potkonjak, and S. Rothweiler. </author> <title> Performance optimization of sequential circuits by eliminating retiming bottlenecks. </title> <booktitle> In International Conference on Computer-Aided Design, </booktitle> <pages> pages 504509, </pages> <year> 1992. </year>
Reference-contexts: and directions for future work are outlined. 2 Related Work The approaches for transformation ordering can be classified in 7 groups: peephole optimization [9], manually-derived static scripts [2], exhaustive search-based generate and test methods [8], algebraic ordering of linear loop-control flow transformations [13], probabilistic search techniques [3], bottleneck removal methods <ref> [4] </ref>, and microscopic and special-domain enabling-effect based techniques [11].
Reference: [5] <author> S. Dey, M. Potkonjak, and R. Roy. </author> <title> Exploiting hardware-sharing in high level synthesis for partial scan optimization. </title> <booktitle> In International Conference on Computer-Aided Design, pages 2025, </booktitle> <year> 1993. </year>
Reference-contexts: Therefore, we use the synchronous data flow model of computations and the dedicated register file model [12]. To eliminate coupling effects between transformations and scheduling, we also use the BETS scheduler in the mode that only area optimization is considered <ref> [5] </ref>. 3.2 Transformations We consider the following transformations: direct and inverse associativity, direct and inverse distributivity, inverse element law, common subexpression replication, time loop unfolding by an arbitrary factor k, The Leiserson-Saxe retiming for critical path, pipelining for critical path with k pipeline stages, maximal pipelining for critical path, and substitution
Reference: [6] <author> B. Efron and R.J. Tibashirani. </author> <title> An introduction to the bootstrap. </title> <publisher> Chapman & Hall, </publisher> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: The typical run times for throughput, area, and power scripts were respectively 0.5, 3, and 10 minutes on a SUN Sparcstation 5. All results have been statistically validated using the bootstrap methods <ref> [6] </ref>. Our experiments also showed that the random ordering of transformations has a very low benefit.
Reference: [7] <author> S. Kirkpatrick, C. Gelatt, and M. Vecchi. </author> <title> Optimization by simulated annealing. </title> <booktitle> Science, </booktitle> <address> 220(4598):671680, </address> <year> 1983. </year>
Reference-contexts: If the goal is to select as few scripts as possible, when it is sufficient to include for each example at least one script which provides at least kth-best solution, the problem is NP-complete [10]. In this case, we used simulated annealing <ref> [7] </ref> to select the smallest set of scripts. We set k = 3 and used a geometric cooling schedule and standard stopping criteria [7]. <p> In this case, we used simulated annealing <ref> [7] </ref> to select the smallest set of scripts. We set k = 3 and used a geometric cooling schedule and standard stopping criteria [7].
Reference: [8] <author> H. Massalin. Superoptimizer: </author> <title> A look at the smallest program. </title> <booktitle> In International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 122126, </pages> <year> 1987. </year>
Reference-contexts: efficiency of the scripts are validated and analyzed on a large set of examples and conclusion and directions for future work are outlined. 2 Related Work The approaches for transformation ordering can be classified in 7 groups: peephole optimization [9], manually-derived static scripts [2], exhaustive search-based generate and test methods <ref> [8] </ref>, algebraic ordering of linear loop-control flow transformations [13], probabilistic search techniques [3], bottleneck removal methods [4], and microscopic and special-domain enabling-effect based techniques [11].
Reference: [9] <author> W.M. McKeeman. </author> <title> Peephole optimization. </title> <journal> Communications of the ACM, </journal> <volume> 8(7):443444, </volume> <year> 1965. </year>
Reference-contexts: Finally, the effectiveness and efficiency of the scripts are validated and analyzed on a large set of examples and conclusion and directions for future work are outlined. 2 Related Work The approaches for transformation ordering can be classified in 7 groups: peephole optimization <ref> [9] </ref>, manually-derived static scripts [2], exhaustive search-based generate and test methods [8], algebraic ordering of linear loop-control flow transformations [13], probabilistic search techniques [3], bottleneck removal methods [4], and microscopic and special-domain enabling-effect based techniques [11].
Reference: [10] <author> C.H. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1982. </year>
Reference-contexts: Unfortunately, this results in including too many scripts. The second option is to select the smallest number of scripts, so that either the best or the second best script is selected for each example. This combinatorial problem can be solved in polynomial using the standard matching algorithms <ref> [10] </ref>. If the goal is to select as few scripts as possible, when it is sufficient to include for each example at least one script which provides at least kth-best solution, the problem is NP-complete [10]. <p> This combinatorial problem can be solved in polynomial using the standard matching algorithms <ref> [10] </ref>. If the goal is to select as few scripts as possible, when it is sufficient to include for each example at least one script which provides at least kth-best solution, the problem is NP-complete [10]. In this case, we used simulated annealing [7] to select the smallest set of scripts. We set k = 3 and used a geometric cooling schedule and standard stopping criteria [7].
Reference: [11] <author> M. Potkonjak and J. Rabaey. </author> <title> Maximally fast and arbitrarily fast implementation of linear computations. </title> <booktitle> In International Conference on Computer-Aided Design, </booktitle> <pages> pages 304 308, </pages> <year> 1992. </year>
Reference-contexts: Related Work The approaches for transformation ordering can be classified in 7 groups: peephole optimization [9], manually-derived static scripts [2], exhaustive search-based generate and test methods [8], algebraic ordering of linear loop-control flow transformations [13], probabilistic search techniques [3], bottleneck removal methods [4], and microscopic and special-domain enabling-effect based techniques <ref> [11] </ref>. <p> for iter ation bound (ACSI) 5. retiming for critical path (R) 6. pipelining with k-pipeline stages for critical path (P) 7. loop unfolding by a factor k (U) 8. constant multiplication substitution with additions/subtractions and shift (CM) All transformations subroutines which use associativity also use integrated inverse element law transformation <ref> [11, 12] </ref>. The initial selection of transformations was mainly influenced by the availability of robust software implementations capable of handling numerous real-life designs. <p> First all selected transformations are characterized according to their optimization potential and enabling effectiveness. This is done using exhaustive manual enumeration of all small computational structures. This step is explained at several references for a variety of transformations (for example, see <ref> [11] </ref>). Figure 3 summarizes this information for the selected set of transformations. (a) (b) transformations considered. Once the information about optimization potential and enabling effectiveness of the transformations is obtained, a set of scripts is generated using the procedure presented in Section 1.3. The results are recorded and statistically processed.
Reference: [12] <author> J. Rabaey, C. Chu, P. Hoang, and M. Potkonjak. </author> <title> Fast proto-typing of data path intensive architectures. </title> <booktitle> IEEE Design & Test of Computers, </booktitle> <address> 8(2):4051, </address> <year> 1991. </year>
Reference-contexts: The software platform on which we tested our ideas was mainly the Hyper high level synthesis system <ref> [12] </ref> from University of California, Berkeley. <p> Therefore, we use the synchronous data flow model of computations and the dedicated register file model <ref> [12] </ref>. <p> for iter ation bound (ACSI) 5. retiming for critical path (R) 6. pipelining with k-pipeline stages for critical path (P) 7. loop unfolding by a factor k (U) 8. constant multiplication substitution with additions/subtractions and shift (CM) All transformations subroutines which use associativity also use integrated inverse element law transformation <ref> [11, 12] </ref>. The initial selection of transformations was mainly influenced by the availability of robust software implementations capable of handling numerous real-life designs. <p> The metrics are measured in the following way. The critical path is directly calculated using the dynamic programming-based subroutine. The cycle length time is estimated using the cycle time estimation program of the Hyper system <ref> [12] </ref> which takes into account both gate and interconnect delays. The area is estimated after hardware mapping using the Hyper system. This estimator has been statistically validated to produce results within less than 20% of error in more than 95% of the cases.
Reference: [13] <author> M.E. Wolf and M.S. Lam. </author> <title> A loop transformation theory and an algorithm to maximize parallelism. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(4):452471, </volume> <year> 1991. </year>
Reference-contexts: on a large set of examples and conclusion and directions for future work are outlined. 2 Related Work The approaches for transformation ordering can be classified in 7 groups: peephole optimization [9], manually-derived static scripts [2], exhaustive search-based generate and test methods [8], algebraic ordering of linear loop-control flow transformations <ref> [13] </ref>, probabilistic search techniques [3], bottleneck removal methods [4], and microscopic and special-domain enabling-effect based techniques [11].
References-found: 13

