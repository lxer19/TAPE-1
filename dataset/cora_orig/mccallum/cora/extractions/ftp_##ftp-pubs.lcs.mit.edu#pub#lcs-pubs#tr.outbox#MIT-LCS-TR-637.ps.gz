URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-637.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Title: MIT/LCS/TR-637 A PROGRAMMING SYSTEM FOR THE DYNAMIC MANIPULATION OF TEMPORALLY SENSITIVE DATA  
Author: Christopher J. Lindblad 
Affiliation: MIT Laboratory for Computer Science.  
Note: This document has been made available free of charge via ftp from the  
Date: August, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. J. Lindblad, D. J. Wetherall, D. L. Tennenhouse, </author> <title> "The VuSystem: A Programming System for Visual Processing of Digital Video," </title> <booktitle> Proceedings of ACM Multimedia 94, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: file descriptor for the file; and pathname, the name of the file. 72 int SimpleFileSourceSourcePathnameCmd (ClientData cd, Tcl_Interp* in, int argc, char* argv []) - SimpleFileSource* src = (SimpleFileSource*)cd; if (argc &gt; 2) return VsTclErrArgCnt (in, argv [0], "?pathname?"); if (argc &gt; 1) - char* pathname; if (VsGetString (in, argv <ref> [1] </ref>, &pathname) != TCL_OK) return TCL_ERROR; if (src-&gt;fd &gt;= 0) - VsErrRec rec; VsPushErrRec (&rec); src-&gt;Stop (False); delete src-&gt;pathname; src-&gt;pathname = strcpy (new char [strlen (pathname)+1],pathname); src-&gt;Start (True); if (VsPopErrRec (&rec)) return VsErrRecToTclErr (in, &rec); else if (src-&gt;pathname != 0) delete src-&gt;pathname; src-&gt;pathname = strcpy (new char [strlen (pathname)+1],pathname); - return <p> This string is used in the error message. value The actual parameter value. This string is used in the error message. Example: int VsPuzzlePositionCmd (ClientData cd,Tcl_Interp* in,int argc,char* argv [])- ... if (argc == 2) - int x, y; if (VsGetIntPair (in, argv <ref> [1] </ref>, &x, &y) != TCL_OK) return TCL_ERROR; if (x &gt;= p-&gt;dim || x &lt; 0) return VsTclErrBadVal (in, "x position within range", argv [1]); if (y &gt;= p-&gt;dim || y &lt; 0) return VsTclErrBadVal (in, "y position within range", argv [2]); if (x-p-&gt;x != 1 && x-p-&gt;x != -1 && y-p-&gt;y <p> Example: int VsPuzzlePositionCmd (ClientData cd,Tcl_Interp* in,int argc,char* argv [])- ... if (argc == 2) - int x, y; if (VsGetIntPair (in, argv <ref> [1] </ref>, &x, &y) != TCL_OK) return TCL_ERROR; if (x &gt;= p-&gt;dim || x &lt; 0) return VsTclErrBadVal (in, "x position within range", argv [1]); if (y &gt;= p-&gt;dim || y &lt; 0) return VsTclErrBadVal (in, "y position within range", argv [2]); if (x-p-&gt;x != 1 && x-p-&gt;x != -1 && y-p-&gt;y != 1 && y-p-&gt;y != -1) return VsTclErrBadVal (in, "x or y adjacent", "none"); if (x-p-&gt;x != 0 && y-p-&gt;y != 0) return <p> VsPuzzle* p = (VsPuzzle*)cd; /* Check parameter count */ if (argc &gt; 2 || argc &lt; 1) return VsTclErrArgCnt (in, argv [0], "?position?"); /* Set new position if supplied */ if (argc == 2) - /* Get position parameter and check it */ int x, y; if (VsGetIntPair (in, argv <ref> [1] </ref>, &x, &y) != TCL_OK) return TCL_ERROR; if (x &gt;= p-&gt;dim || x &lt; 0) return VsTclErrBadVal (in, "x position within range", argv [1]); if (y &gt;= p-&gt;dim || y &lt; 0) return VsTclErrBadVal (in, "y position within range", argv [2]); if (x-p-&gt;x != 1 && x-p-&gt;x != -1 && y-p-&gt;y <p> /* Set new position if supplied */ if (argc == 2) - /* Get position parameter and check it */ int x, y; if (VsGetIntPair (in, argv <ref> [1] </ref>, &x, &y) != TCL_OK) return TCL_ERROR; if (x &gt;= p-&gt;dim || x &lt; 0) return VsTclErrBadVal (in, "x position within range", argv [1]); if (y &gt;= p-&gt;dim || y &lt; 0) return VsTclErrBadVal (in, "y position within range", argv [2]); if (x-p-&gt;x != 1 && x-p-&gt;x != -1 && y-p-&gt;y != 1 && y-p-&gt;y != -1) return VsTclErrBadVal (in, "x or y adjacent", "none"); if (x-p-&gt;x != 0 && y-p-&gt;y != 0) return <p> (int k=0; k&lt;p-&gt;dim*p-&gt;dim; k++) if (p-&gt;config [k/p-&gt;dim][k%p-&gt;dim]!=k) p-&gt;solved = False; - return VsReturnIntPair (in, p-&gt;x, p-&gt;y); - VsPuzzleScrambleCmd (ClientData cd,Tcl_Interp* in,int argc,char* argv [])- VsPuzzle* p = (VsPuzzle*)cd; /* Get the dimemsion parameter */ int dim; if (argc != 2) return VsTclErrArgCnt (in, argv [0], "dimension"); if (VsGetInt (in, argv <ref> [1] </ref>, &dim) != TCL_OK) return TCL_ERROR; 248 if (dim &gt; 6 || dim &lt; 3) return VsTclErrBadVal (in, "integer from 3 to 6", argv [1]); /* Change dimensions if necessary */ if (p-&gt;dim != dim) - p-&gt;x = 0; - /* Initialize The configuration matrix */ for (int k = 0; <p> VsPuzzle* p = (VsPuzzle*)cd; /* Get the dimemsion parameter */ int dim; if (argc != 2) return VsTclErrArgCnt (in, argv [0], "dimension"); if (VsGetInt (in, argv <ref> [1] </ref>, &dim) != TCL_OK) return TCL_ERROR; 248 if (dim &gt; 6 || dim &lt; 3) return VsTclErrBadVal (in, "integer from 3 to 6", argv [1]); /* Change dimensions if necessary */ if (p-&gt;dim != dim) - p-&gt;x = 0; - /* Initialize The configuration matrix */ for (int k = 0; k &lt; dim*dim; k++) p-&gt;config [k/dim][k%dim] = k; /* Scramble the puzzle */ for (k = 0; k &lt; dim*dim; k++) - int x
Reference: [2] <author> C. J. Lindblad, D. J. Wetherall, W. F. Stasior, J. F. Adam, H. H. Houh, M. Ismert, D. R. Bacher, B. M. Phillips, D. L. Tennenhouse, </author> <title> "ViewStation Applications: Intelligent Video Processing Over a Broadband Local Area Network," </title> <booktitle> Proceedings of the 1994 USENIX Symposium on High Speed Networking, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: == 2) - int x, y; if (VsGetIntPair (in, argv [1], &x, &y) != TCL_OK) return TCL_ERROR; if (x &gt;= p-&gt;dim || x &lt; 0) return VsTclErrBadVal (in, "x position within range", argv [1]); if (y &gt;= p-&gt;dim || y &lt; 0) return VsTclErrBadVal (in, "y position within range", argv <ref> [2] </ref>); if (x-p-&gt;x != 1 && x-p-&gt;x != -1 && y-p-&gt;y != 1 && y-p-&gt;y != -1) return VsTclErrBadVal (in, "x or y adjacent", "none"); if (x-p-&gt;x != 0 && y-p-&gt;y != 0) return VsTclErrBadVal (in, "x or y adjacent", "both"); ... ... <p> check it */ int x, y; if (VsGetIntPair (in, argv [1], &x, &y) != TCL_OK) return TCL_ERROR; if (x &gt;= p-&gt;dim || x &lt; 0) return VsTclErrBadVal (in, "x position within range", argv [1]); if (y &gt;= p-&gt;dim || y &lt; 0) return VsTclErrBadVal (in, "y position within range", argv <ref> [2] </ref>); if (x-p-&gt;x != 1 && x-p-&gt;x != -1 && y-p-&gt;y != 1 && y-p-&gt;y != -1) return VsTclErrBadVal (in, "x or y adjacent", "none"); if (x-p-&gt;x != 0 && y-p-&gt;y != 0) return VsTclErrBadVal (in, "x or y adjacent", "both"); /* Change the position */ p-&gt;config [p-&gt;y][p-&gt;x] = p-&gt;config [y][x];
Reference: [3] <author> D. Bacher, </author> <title> "Content-Based Indexing of Captioned Video," </title> <type> SB Thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: A text search specification supplied by the user causes the browser to jump to stories with captions that match. 12 television programs. The Joke Browser David Bacher has developed The Joke Browser, which further demonstrates the potential of content-based media processing using closed-captions <ref> [3] </ref>. It records late-night talk show monologues, and segments them into jokes by processing the closed-captioned text. A special browser program (Figure 1.3), is queried to select all the jokes on a certain topic that have been made in the last week.
Reference: [4] <author> D. L. Tennenhouse, J. Adam, D. Carver, H. Houh, M. Ismert, C. Lindblad, W. Sta-sior, D. Weatherall, D. Bacher, and T. Chang, </author> <title> "A Software-Oriented Approach to the Design of Media Processing Environments," </title> <booktitle> Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The VuSystem's design makes it particularly well suited as an application toolkit for distributed multimedia systems. In particular, the VuSystem is used as the application environment for the ViewStation hardware platform, a set of computers and programmable digital video processing devices connected together by a personal local-area network <ref> [4] </ref>. Because the VuSystem provides a rich environment of media processing modules linked together with a high-level scripting language, it is a particularly good foundation for the development of applications that require intelligent processing of media data. <p> A joke parsing module groups captions into jokes. This module is program specific, as it uses knowledge of the format of a particular program to make its grouping decisions. 1.3 The ViewStation The ViewStation project <ref> [4] </ref> integrates the technologies of broadband networking and distributed computing with those of digital video to produce systems for video-intensive computing. The ViewStation platform is composed of a set of computers and programmable digital video processing devices connected together in a personal local-area network.
Reference: [5] <author> J. F. Adam, H. H. Houh, M. Ismert, and D. L. Tennenhouse, </author> <title> "A Network Architecture for Distributed Multimedia Systems," </title> <booktitle> Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference: [6] <author> B. Phillips, </author> <title> "A Distributed Programming System for Media Applications," </title> <type> SM Thesis Proposal, </type> <institution> Department of Electrical Engineering and Computer Science, Mas-sachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The environment shows that VuSystem applications can examine and modify themselves while they run. 8.3.3 Distributed Programming with VuDP Brent Phillips is developing a distributed programming system for media-based applications that provides enough support to make distributed VuSystem programs more simple and powerful <ref> [6] </ref>. Currently, all modules of a standard VuSystem program must execute in the same local environment on a single host. Applications split across the network must be realized as a set of co-operating programs, making them difficult to write.
Reference: [7] <author> D. Wetherall, </author> <title> "A Visual Programming System for Media Computation," </title> <type> SM Thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Operations on an object can be performed by invoking its Tcl command, with the first argument to the command specifying the operation, and the rest of the arguments specifying the arguments to the operation. VuSystem object commands are implemented using Object Tcl <ref> [7] </ref>, a dynamic object-oriented extension to Tcl developed for this purpose. Object commands are used by the VuSystem to represent modules and ports. They provide a Tcl command name for each module and port, so that the module or port can be named and manipulated in Tcl. <p> The Tcl program would, therefore, be responsible for determining how to use this information. 8.3.2 A Visual Programming System for Media Computation David Wetherall is completing a visual programming system for application users <ref> [7] </ref>. Users interact with the system through a flow graph representation of the running program to control its media processing component. A "flow graph" perspective emphasizes the computation that occurs, rather than a "hypermedia" perspective, which may view the media in terms of a database to be navigated.
Reference: [8] <author> W. Stasior, </author> <title> "Visual Processing for Seamless Interactive Computing," The ViewSta-tion Collected Papers, </title> <type> MIT/LCS/TR 590, </type> <institution> MIT Laboratory for Computer Science, </institution> <address> Cambridge, MA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: One user, William Stasior, is developing a prototype "Computerized Office Multimedia Assistant" (COMMA) with the VuSystem. COMMA assists its user by performing various tasks that require the analysis of live video <ref> [8] </ref>. The Room Monitor Stasior has written The Room Monitor, which processes continuous video from a stationary camera in a room. It processes the live video to determine if the room is occupied or empty, and records video only when activity is detected above some threshold. <p> The VsPuzzle filter module is the module used as an example throughout this report. It scrambles a video frame to form a video puzzle. The VvEdge filter module is part of Stasior's library of vision service modules <ref> [8] </ref>. It performs edge detection on video frames. Both of these modules are based on the VsFilter module, and contain Work C++ class member functions that perform a substantial amount of computation. <p> It is used as an example in Chapter 4. It scrambles a video frame to form a video puzzle. The vvdemo application demonstrates several features of Stasior's library of vision service modules <ref> [8] </ref>. It was used to run the VvEdge filter module. Figure 7.12 shows 87 the in-band modules used in both programs. In both programs, the VsVidboardSource (page 119) captured a sequence of live grayscale video frame payloads. In the vspuzzle program, these frames were processed through the VsPuzzle module. <p> visual programming system for media computation, a distributed programming system for media applications, and a media server acessible through the World Wide Web. 8.3.1 Visual Processing For Seamless Interactive Computing William Stasior is investigating concrete ways that computers may become more responsive and thus less visible to their human users <ref> [8] </ref>. He is developing a prototype "Computerized Office Multimedia Assistant", which will be capable of assisting its user by performing various tasks which require the analysis of time varying imagery. Stasior is studying the role of visual processing within the framework of seamless interactive computing.
Reference: [9] <author> J. F. Adam, </author> <title> "The Vidboard: A Video Capture and Processing Peripheral for a Distributed Multimedia System," </title> <booktitle> Proceedings of the ACM Multimedia Conference, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: News stories that are closed-captioned can be retrieved based on their content. Many broadcast television programs are closed-captioned for the hearing-imparied. Closed-captions provide a text translation of the audio component of the program | a significant amount of information. Closed-caption capturing code runs in the Vidboard <ref> [9] </ref>. The caption information is extracted from the digitized video signal and converted into a common format so that modules capable of processing it can be constructed. The news browser makes direct use of the closed-captioned annotations. <p> The VuSys-tem is uniquely suited for rapid development of applications that perform intelligent processing of live media on the ViewStation. It runs on Unix workstations connected to the VuNet, and is used to build applications that use VuNet peripherals. In particular, VuSystem applications make use of the Vidboard <ref> [9] </ref>, a video capture device that resides on the VuNet. 1.4 Statement Of Claims I have identified a class of multimedia applications in which the computer performs tasks requiring the direct processing of multimedia data, as well as the capture, storage, retrieval, and display tasks of traditional multimedia applications. <p> On the Sun SPARCsta-tion, the Sun VideoPix was used for video capture, and a standard X server for video output. Sun's audio hardware and software was used for audio input and output. On the Digital DEC 3000/400, the Vidboard <ref> [9] </ref>, a LAN-based video capture subsystem, was used for video capture. The standard X server was used for video display, and DEC's audio hardware and AudioFile [10] software was used for audio input and output. <p> VsAudioFileSource Interfaces to an AudioFile [10] server typically running on a Digital Alpha workstation. VsSunVfcSource Interfaces to the VideoPix video capture card on Sun workstations. VsXVideoSource Interfaces to video display adapters that have video capture capability through the XVideo X extension. VsVidboardSource Interfaces to the Vidboard <ref> [9] </ref>, a LAN-based video capture subsystem. VsFileSource Interfaces to files stored using the native VuSystem file format. VsQtimeSource Interfaces to Quicktime [12] files. VsMpegSource Interfaces to MPEG [21] files. VsCaptionSource Interfaces to a closed-caption decoder through a serial line. VsExternalSource Assembles separate image files into a sequence of video frames. <p> For many of the configurations shown in Table 7.2, the system throughput was constrained not by the VuSystem, but by the Vidboard <ref> [9] </ref>, the video capture hardware used. For frame sizes of 640x480, 320x240, and 160x120, the Vidboard can capture video at a maximum rate of 30 frames per second. For frame size 212x160, the Vidboard can capture video at a maximum rate of 15 frames per second 1 . <p> It takes: timeBase (real or virtual) A new time base. It returns: timeBase (real or virtual) The current time base. A.9.13 The VsVidboardSource Module The VsVidboardSource module provides a video source interface to the Vidboard <ref> [9] </ref>, a ATM-based video capture device. It is basd on the VsEntity module. The feOff VsVidboardSource Subcommand &lt;vsVidboardSource&gt; feOff The feOff VsVidboardSource subcommand sends a front-end off command cell to the vidboard.
Reference: [10] <author> T. M. Levergood, A. C. Payne, J. Gettys, G. W. Treese, and L. C. Stewart, "Au-dioFile: </author> <title> A Network-Transparent System for Distributed Audio Applications," </title> <booktitle> Proceedings of the USENIX Summer Conference, </booktitle> <month> June </month> <year> 1993 </year>
Reference-contexts: Sun's audio hardware and software was used for audio input and output. On the Digital DEC 3000/400, the Vidboard [9], a LAN-based video capture subsystem, was used for video capture. The standard X server was used for video display, and DEC's audio hardware and AudioFile <ref> [10] </ref> software was used for audio input and output. The toolkit is implemented as a program that works as a command shell, interpreting an extended version of the Tool Command Language (Tcl) [26]. Out-of-band code is written in Tcl, and in-band code is written in C++. <p> Each subcommand specifies a different operation that can be performed on the object. Object command names follow a hierarchical convention so that the possibility of name collisions is reduced. 36 Source Function VsSunAudioSource Interfaces directly to the audio device on Sun workstations. VsAudioFileSource Interfaces to an AudioFile <ref> [10] </ref> server typically running on a Digital Alpha workstation. VsSunVfcSource Interfaces to the VideoPix video capture card on Sun workstations. VsXVideoSource Interfaces to video display adapters that have video capture capability through the XVideo X extension. VsVidboardSource Interfaces to the Vidboard [9], a LAN-based video capture subsystem. <p> Audio sources interface to audio capture hardware. Video sources interface to video capture hardware. File sources interface to 37 Sink Function VsSunAudioSink Interfaces directly to the audio device on Sun workstations. VsAudioFileSink Interfaces to an AudioFile <ref> [10] </ref> server typically running on a Digital Alpha workstation. VsWindowSink Interfaces to video display adapters through the X Window System. VsFileSink Interfaces to files stored using the native VuSystem file format. VsQtimeSink Interfaces to Quicktime [12] files. <p> Video files can be viewed by many clients simultaneously, but live video sources are restricted to one client at a time. The video itself is distributed using the X Window System, and audio is distributed with AudioFile <ref> [10] </ref>. This approach provides wide-area accessibility at the cost of reduced performance. 8.4 Future Work Some directions for the future exploration of computer-participative multimedia can be explored with the VuSystem: integration with commercial multimedia application environments, the application of artificial intelligence techniques, and the use of advanced operating system interfaces. <p> A.9 Primitive Source Modules Source modules have no input ports and only one output port. The output port is always named output. Source modules are usually media capture device interface modules. A.9.1 The VsAudioFileSource Module The VsAudioFileSource module provides an audio source interface to the AudioFile <ref> [10] </ref> protocol. It is based on the VsEntity module. The server VsAudioFileSource Subcommand &lt;vsAudioFileSource&gt; server [&lt;server&gt;] ==&gt; &lt;server&gt; The server VsAudioFileSource subcommand provides access to the AudioFile server specifier for a VsAudioFileSource module. It takes: server (String) A new AudioFile server specification. <p> A.10 Primitive Sink Modules Sink modules have one onput port and no output ports. The input port is always named input. Sink modules are usually media playback device interface modules. A.10.1 The VsAudioFileSink Module The VsAudioFileSink module provides an audio sink interface to the AudioFile <ref> [10] </ref> protocol. It is based on the VsEntity module. The server VsAudioFileSink Subcommand &lt;vsAudioFileSink&gt; server [&lt;server&gt;] ==&gt; &lt;server&gt; The server VsAudioFileSink subcommand provides access to the AudioFile server specifier for a VsAudioFileSink module. It takes: server (String) A new AudioFile server specifier.
Reference: [11] <institution> Apple Computer Inc., "Hypercard (Version 2.2)," Apple Computer Inc., </institution> <year> 1993. </year>
Reference: [12] <author> Apple Computer Inc., </author> <title> "Inside Macintosh: Quicktime, Inside Macintosh: Quicktime Components," </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year> <month> 253 </month>
Reference-contexts: Out-of-band processing is the processing that performs the event-driven functions of a program. In-band processing is the processing performed on every video frame and audio fragment. In-band code is more elaborate in the VuSystem than in traditional multimedia systems <ref> [12, 17] </ref> because VuSystem applications perform sophisticated analysis of their input media data. In the VuSystem, the in-band processing component is arranged into processing modules that pass dynamically-typed data payloads through input and output ports. <p> These systems are optimized for the efficient display of pre-recorded video sequences. They do not adequately support the direct processing of live video. 2.1.1 Apple Quicktime Apple Computer has developed Quicktime, a tool kit for the manipulation of time-based data within the Macintosh environment <ref> [12] </ref>. It is the most popular system for multimedia applications today. In Quicktime, time-based data is referred to as movies. Applications allow users to display, edit, copy and paste movies and movie data. These applications manipulate Quicktime components (Table 2.1) through managers (Table 2.2). <p> VsXVideoSource Interfaces to video display adapters that have video capture capability through the XVideo X extension. VsVidboardSource Interfaces to the Vidboard [9], a LAN-based video capture subsystem. VsFileSource Interfaces to files stored using the native VuSystem file format. VsQtimeSource Interfaces to Quicktime <ref> [12] </ref> files. VsMpegSource Interfaces to MPEG [21] files. VsCaptionSource Interfaces to a closed-caption decoder through a serial line. VsExternalSource Assembles separate image files into a sequence of video frames. Table 4.1: Some VuSystem sources. <p> VsAudioFileSink Interfaces to an AudioFile [10] server typically running on a Digital Alpha workstation. VsWindowSink Interfaces to video display adapters through the X Window System. VsFileSink Interfaces to files stored using the native VuSystem file format. VsQtimeSink Interfaces to Quicktime <ref> [12] </ref> files. VsExternalSink Causes a sequence of video frames to be written to several image files. Table 4.2: Some VuSystem sinks. files. More exotic sources exist as well. Some sources provided with the VuSystem are listed in Table 4.1. <p> It returns: pathname (Pathname) The current pathname. A.9.7 The VsNullSource Module The VsNullSource module provides a null source. It is based on the VsEntity module. A.9.8 The VsQtimeSource Module The VsQtimeSource module provides a video source interface to files in the Apple Quick-time <ref> [12] </ref> file format. It is based on the VsEntity module. The pathname VsQtimeSource Subcommand &lt;vsQtimeSource&gt; pathname [&lt;pathname&gt;] ==&gt; &lt;pathname&gt; The pathname VsQtimeSource subcommand provides access to the pathname parameter for a VsQtimeSource module. It takes: pathname (Pathname) A new pathname. <p> A.10.7 The VsQtimeSink Module The VsQtimeSink module provide a video sink interface to files in the Apple Quicktime <ref> [12] </ref> file format. It is based on the VsEntity module. The VsQtimeSink module indicates through its callback that it has received a VsFinish payload.
Reference: [13] <institution> SMPTE Task Force on Headers/Descriptors, "SMPTE Header/Descriptor Task Force: </institution> <note> Final Report," SMPTE Journal, 101:6(411-429), June 1992 [14] </note> "Extensions to the IEEE Standard Portable Operating System Interface for Computer Environments for the Support of Realtime Applications," IEEE Std 1003.4-1993. 
Reference: [15] <author> N. Abramson and W. Bender, </author> <title> "Context-Sensitive Multimedia," </title> <booktitle> Proceedings of the SPIE, </booktitle> <volume> Vol. 1785, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: Applications of this type have been implemented in the past. Bender and Chenais have developed a system that digests television news broadcasts and annotates them with 14 newspaper articles [33]. Abramson and Bender have developed a system in which self--aware multimedia objects alter their content to fit user preferences <ref> [15] </ref>. In this report I build on this work by establishing a framework for investigating computer-participative multimedia applications as a class.
Reference: [16] <author> ISO/IEC JTC1/SC2/W10, </author> <title> "Digital Compression and Coding of Continuous-Tone Still Images," IEC Draft International Standard 10918-1, </title> <year> 1992. </year>
Reference-contexts: Table 4.4 lists some VuSystem modules with more than one input and output port. 38 Filter Function VsJpegC Compresses video frames using the JPEG <ref> [16] </ref> video compression standard. VsJpegD Decompresses video frames using the JPEG [16] video compression standard. VsCCCC Compresses 8-bit color video frames using a color cell compression algorithm. VsCCCD Decompresses 8-bit color video frames using a color cell compression algorithm. VsQRLC Compresses grayscale video frames using a simple run-length coding scheme. <p> Table 4.4 lists some VuSystem modules with more than one input and output port. 38 Filter Function VsJpegC Compresses video frames using the JPEG <ref> [16] </ref> video compression standard. VsJpegD Decompresses video frames using the JPEG [16] video compression standard. VsCCCC Compresses 8-bit color video frames using a color cell compression algorithm. VsCCCD Decompresses 8-bit color video frames using a color cell compression algorithm. VsQRLC Compresses grayscale video frames using a simple run-length coding scheme. VsQRLD Decompresses grayscale video frames using a simple run-length coding scheme. <p> A rich set of modules has been developed. Over fifty modules have been written, including filters that perform image processing and machine vision functions as well as JPEG compression and decompression <ref> [16] </ref>. A Tcl library for user-interface programming with over fifty script files has also been developed by the users. I have found it easy to reuse these modules and Tcl scripts in new applications.
Reference: [17] <author> Microsoft Corporation, </author> <title> "Microsoft Video For Windows Users Guide," </title> <publisher> Microsoft Corporation, </publisher> <address> Redmond, WA, </address> <year> 1992. </year>
Reference-contexts: Out-of-band processing is the processing that performs the event-driven functions of a program. In-band processing is the processing performed on every video frame and audio fragment. In-band code is more elaborate in the VuSystem than in traditional multimedia systems <ref> [12, 17] </ref> because VuSystem applications perform sophisticated analysis of their input media data. In the VuSystem, the in-band processing component is arranged into processing modules that pass dynamically-typed data payloads through input and output ports. <p> Its component architecture provides the extensibility necessary for direct media processing programs, but it is poorly documented and only works within the Macintosh environment. 2.1.2 Microsoft Video For Windows Microsoft Video For Windows enables users of Microsoft Windows to capture, edit and play back video sequences without specialized hardware <ref> [17] </ref>. It provides efficient playback of video sequences from hard disk or CD-ROM, regardless of the capabilities of the PC. Video For Windows is based on the multimedia features of Windows 3.1. Media data is stored in the resource interchange audio video interleaved file format, or AVI.
Reference: [18] <author> J. K. Ousterhout, </author> <title> "Tk: An X11 Toolkit Based on the Tcl Language," </title> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <address> CA, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: The toolkit includes a Tcl interface to the X Window System Toolkit and the Athena Widget Set for the graphical user-interface code. I chose to use the Xt intrinsics and the Athena widget set over the Tk <ref> [18] </ref> widget set provided with the Tcl distribution. The Xt intrinsics and Athena widget set were more robust and complete, and also had built-in features for scheduling in large applications. <p> These components enable the Tcl programmer to construct graphical user interfaces based on the Xt toolkit and the Athena widget set. They provide an interface to the Athena widget set that is similar to Tk <ref> [18] </ref>: * Widget instances are created by invoking a WidgetClass command. For 40 Condition Modules Indication caption VsWindowSink, A caption was received. <p> Application scripts control the graphical user-interface of the application, through TclXt and TclXaw, a powerful and complete Tcl interface to the Xt intrinsics and the Athena widget set. The interface presented by the toolkits is similar to that of Tk <ref> [18] </ref> but are to a more standard set of widgets. By convention, application scripts are written to contain a module creation procedure and a main procedure. The module creation procedure creates all the in-band media processing and graphical user interface components for the application. <p> Tcl's extensibility and simple interface to C is used to a great extent in the VuSystem through object commands. Finally, the introspective features of Tcl and the VuSystem ease the development of interactive visual media programming systems. Graphical User-Interface Toolkits and Tcl Claims have been made that the Tk <ref> [18] </ref> graphical user-interface toolkit provides capabilities to the Tcl programmer that cannot be provided through the X Window System Toolkit [30] and the Athena widget set.
Reference: [19] <author> D. P. Anderson, P. Chan, "Comet: </author> <title> A Toolkit for Multiuser Audio/Video Applications," </title> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <address> CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: ACME provides no in-band processing extensibility. No new in-band data manipulations can be implemented by the application programmer. Any new in-band functionality can only be introduced through modification of an ACME server. 2.2.2 Comet Anderson et al address some of the limitations of ACME with Comet <ref> [19] </ref>. Comet provides a high-level distributed application programming interface to ACME. In Comet, applications exist as processing nodes interconnected by data streams. Comet maps the abstract description of a processing network into a network with physical components.
Reference: [20] <author> J. Escobar, D. Deutsch, C. Partridge, </author> <title> "A Multi-Service Flow Synchronization Protocol," BBN Systems and Technologies Division, </title> <address> Cambridge, MA, </address> <month> March </month> <year> 1991. </year>
Reference: [21] <author> ISO/IEC JTC1/SC29, </author> <title> "Coded Representation of Picture, Audio, and Multimedia/Hypermedia Information," Committee Draft of Standard ISO/IEC 11172, </title> <year> 1991. </year>
Reference-contexts: VsXVideoSource Interfaces to video display adapters that have video capture capability through the XVideo X extension. VsVidboardSource Interfaces to the Vidboard [9], a LAN-based video capture subsystem. VsFileSource Interfaces to files stored using the native VuSystem file format. VsQtimeSource Interfaces to Quicktime [12] files. VsMpegSource Interfaces to MPEG <ref> [21] </ref> files. VsCaptionSource Interfaces to a closed-caption decoder through a serial line. VsExternalSource Assembles separate image files into a sequence of video frames. Table 4.1: Some VuSystem sources. <p> If the reverse parameter is true, the file is read in reverse direction. It takes: reverse (Boolean) A new reverse. It returns: reverse (Boolean) The current reverse. A.9.6 The VsMpegSource Module The VsMpegSource module provides a video source interface to files in the MPEG <ref> [21] </ref> file format. It is based on the VsEntity module. The VsMpegSource module indicates through its callback that it has reached end-of-file on its input. The callback command string is evaluated with the following keyword parameter appended: -sourceEnd (Boolean) The module has reached end-of-file on its input.
Reference: [22] <editor> J. Rees and W. Clinger, eds., </editor> <title> "The Revised"4 Report on the Algorithmic Language Scheme," Lisp Pointers, </title> <booktitle> 4(3), ACM, </booktitle> <month> July-September </month> <year> 1991. </year>
Reference-contexts: It has a simple and efficient interpreter, and a simple interface to C. I chose Tcl over Common Lisp [28] or Scheme <ref> [22] </ref> because Tcl has a better interface to C and C++ and Tcl does not require a garbage collector. Tcl is designed from the start to have a simple and efficient interface to C.
Reference: [23] <author> R. G. Herrtwich, </author> <title> "Time Capsules: An Abstraction for Access to Continuous-Media Data," </title> <booktitle> Proceedings of the 11th Real-Time Systems Symposium, IEEE Computer Society, </booktitle> <pages> 11-20, </pages> <month> December </month> <year> 1990. </year>
Reference: [24] <author> D. P. Anderson, R. Govindan, and G. Homsy, </author> <title> "Abstractions For Continuous Media In A Network Window System," </title> <type> Technical Report No. </type> <institution> UCB/CSD 90/596, Computer Science Division (EECS), University of California, Berkeley, </institution> <address> CA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: These guarantees cannot be met by traditional Unix services. 18 2.2.1 Abstractions for Continuous Media Anderson et al describe a set of Abstractions for Continuous Media (ACME) in <ref> [24] </ref>. The ACME system provides shared network-transparent access to real-time audio and video hardware. The system provides mechanisms for resource management and scheduling for audio and video applications. In the ACME system, each workstation runs an ACME server, in which all the processing of real-time data is performed.
Reference: [25] <author> A. Hopper, </author> <title> "Pandora an Experimental System for Multimedia Applications," </title> <journal> Operating Systems Review, </journal> <volume> 24(2) </volume> <pages> 19-34, </pages> <month> April </month> <year> 1990. </year>
Reference: [26] <author> J. K. Ousterhout, </author> <title> "Tcl: An Embedded Command Language," </title> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <address> CA, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: In the VuSystem, the in-band processing component is arranged into processing modules that pass dynamically-typed data payloads through input and output ports. The out-of-band component of the VuSystem is programmed in the Tool Command Language, or Tcl <ref> [26] </ref>, an interpreted scripting language. Application code written in Tcl is responsible for creating and controlling the network of in-band media-processing modules, and controlling the graphical user-interface of the application. The VuSystem is implemented on Unix workstations as a program that interprets an extended version of Tcl. <p> The out-of-band partition of the VuSystem has more relaxed performance constraints, since it is designed to handle relatively infrequent events. An interpreted scripting language, such as the Tool Command Language, or Tcl <ref> [26] </ref>, is an appropriate programming language for the out-of-band partition. Out-of-band VuSystem application code written in Tcl is responsible for creating and controlling the network of in-band media-processing modules, as well as controlling the graphical user-interface. <p> Application code written in this scripting language is responsible for creating and controlling the network of in-band media-processing modules, and controlling the graphical user-interface of the application. 3.3.1 The Scripting Language The scripting language used in the VuSystem is the Tool Command Language, or Tcl <ref> [26] </ref>, developed by John Ousterhout at the University of California at Berkeley. Tcl is designed as a simple but extensible command language. <p> The standard X server was used for video display, and DEC's audio hardware and AudioFile [10] software was used for audio input and output. The toolkit is implemented as a program that works as a command shell, interpreting an extended version of the Tool Command Language (Tcl) <ref> [26] </ref>. Out-of-band code is written in Tcl, and in-band code is written in C++. The toolkit includes a Tcl interface to the X Window System Toolkit and the Athena Widget Set for the graphical user-interface code. <p> It provides a ready/not-ready protocol that propagates timing constraints through back-pressure, does not require buffering between modules, and provides a cheap non-blocking scheduling mechanism that does not require multi-threading. The out-of-band partition of the VuSystem is programmed in the Tool Command Language, or Tcl <ref> [26] </ref>, an interpreted scripting language. Application code written in Tcl is responsible for creating and controlling the network of in-band media-processing modules, and controlling the graphical user-interface of the application. <p> written to contain a module creation procedure, which creates the media processing and graphical user interface components; and a main procedure, which performs initializations and runs the application event loop. 35 4.1 The Tool Command Language The scripting language used in the VuSystem is the Tool Command Language, or Tcl <ref> [26] </ref>, developed by John Ousterhout at the University of California at Berkeley. It is an excellent programming language for assembling modules into flexible applications. Tcl is designed as a simple but extensible command language. <p> This is an acceptable level of performance for today, and will improve with advances in workstation technology since the system is portable. The out-of-band partition of the VuSystem is programmed in the Tool Command Language, or Tcl <ref> [26] </ref>, an interpreted scripting language. Application code written in Tcl is responsible for creating and controlling the network of in-band media-processing modules, and controlling the graphical user-interface of the application. In-band modules are manipulated with object commands, and in-band events are handled with asynchronous callbacks.
Reference: [27] <author> D. L. Mills, </author> <title> "On the Accuracy and Stability of Clocks Synchronized by the Network Time Protocol in the Internet System," </title> <journal> ACM Computer Communication Review, </journal> <volume> 20(1) </volume> <pages> 65-75, </pages> <month> January </month> <year> 1990. </year>
Reference: [28] <author> G. L. Steel Jr., </author> <title> "Common Lisp the Language," </title> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference-contexts: It has a simple and efficient interpreter, and a simple interface to C. I chose Tcl over Common Lisp <ref> [28] </ref> or Scheme [22] because Tcl has a better interface to C and C++ and Tcl does not require a garbage collector. Tcl is designed from the start to have a simple and efficient interface to C.
Reference: [29] <author> C. Williams and J. Rasure, </author> <title> "A visual language for image processing," </title> <booktitle> IEEE Computer Society Workshop on Visual Languages, </booktitle> <address> Skokie, Illinois, </address> <year> 1990. </year>
Reference-contexts: More complicated applications leverage customized modules that are linked into the shell. VuSystem programs have a media-flow architecture: code that directly processes temporally sensitive data is divided into processing modules arranged in data processing pipelines. This architecture is similar to that of some visualization systems <ref> [29, 31] </ref>, but is unique in that all data is held in dynamically-typed time-stamped payloads, and programs can be reconfigured while they run. Timestamps allow for media synchronization, and dynamic typing and reconfiguration allows programs to change their behavior based on the data being fed into them. <p> Since it has no basis in real time, apE does not provide for any resource scheduling based on real time. 19 2.3.2 Khoros Developed at the University of New Mexico, Khoros is an integrated software development environment for information processing and data visualization <ref> [29] </ref>. It includes extensive data display and processing libraries, and a visual programming language. It runs on Unix workstations. Khoros includes extensive application specific data display and processing libraries, providing support for image processing, digital signal processing, numerical analysis, data and file conversion, graphics display, and image display. <p> In this chapter, I describe this approach. VuSystem programs have what can be called a media-flow architecture: code that directly processes temporally sensitive data is divided into processing modules arranged in data processing pipelines. This architecture is similar to that of some visualization systems <ref> [29, 31] </ref>, but is unique in that all data is held in dynamically-typed time-stamped payloads, and programs can be reconfigured while they run. <p> VuSystem programs have what can be called a media-flow architecture: code that directly processes temporally sensitive data is divided into processing modules arranged in data processing pipelines. This architecture is similar to that of some visualization systems <ref> [29, 31] </ref>, but is unique in that all data is held in dynamically-typed time-stamped payloads, and programs can be reconfigured while they run. Timestamps allow for media synchronization, and dynamic typing and reconfiguration allows programs to change their behavior based on the data being fed into them.
Reference: [30] <author> P. J. Asenta and R. R. Swick, </author> <title> "X Window System Toolkit: The Complete Programmer's Guide and Specification," </title> <publisher> Digital Press, </publisher> <year> 1990. </year> <month> 254 </month>
Reference-contexts: These modules define the temporal critical paths of VuSystem applications. 29 scheduling support to in-band code. 3.4.3 Communication with the Unix Scheduler VuSystem scheduler services are largely supported through the user-mode application scheduler provided by the X Window System Toolkit, or Xt <ref> [30] </ref> (Figure 3.3). The Xt library includes all the algorithms, data structures, and interfaces for scheduling input, output, timeout, and work procedures. <p> Graphical User-Interface Toolkits and Tcl Claims have been made that the Tk [18] graphical user-interface toolkit provides capabilities to the Tcl programmer that cannot be provided through the X Window System Toolkit <ref> [30] </ref> and the Athena widget set.
Reference: [31] <author> C. Upson, T. Faulhaber, Jr., D. Kamins, D. Laidlaw, D. Schlegel, J. Vroom, R. Gurwitz, A. van Dam, </author> <title> "The Application Visualization System: A computational environment for scientific visualization," </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> 30-42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: More complicated applications leverage customized modules that are linked into the shell. VuSystem programs have a media-flow architecture: code that directly processes temporally sensitive data is divided into processing modules arranged in data processing pipelines. This architecture is similar to that of some visualization systems <ref> [29, 31] </ref>, but is unique in that all data is held in dynamically-typed time-stamped payloads, and programs can be reconfigured while they run. Timestamps allow for media synchronization, and dynamic typing and reconfiguration allows programs to change their behavior based on the data being fed into them. <p> Khoros programs cannot easily reconfigure themselves dynamically based upon their input. It is designed primarity for data processing and visualization, not for media-based intelligence. 2.3.3 The Application Visualization System The Application Visualization System (AVS) is a suite of tools for the visualization and analysis of large computer-generated data sets <ref> [31] </ref>. AVS includes support for 2D plots and graphs, image processing, and interactive 3D rendering and volume visualization. It works on many major Unix workstations, supporting the full range of graphics hardware available on these platforms. <p> In this chapter, I describe this approach. VuSystem programs have what can be called a media-flow architecture: code that directly processes temporally sensitive data is divided into processing modules arranged in data processing pipelines. This architecture is similar to that of some visualization systems <ref> [29, 31] </ref>, but is unique in that all data is held in dynamically-typed time-stamped payloads, and programs can be reconfigured while they run. <p> VuSystem programs have what can be called a media-flow architecture: code that directly processes temporally sensitive data is divided into processing modules arranged in data processing pipelines. This architecture is similar to that of some visualization systems <ref> [29, 31] </ref>, but is unique in that all data is held in dynamically-typed time-stamped payloads, and programs can be reconfigured while they run. Timestamps allow for media synchronization, and dynamic typing and reconfiguration allows programs to change their behavior based on the data being fed into them. <p> A "flow graph" perspective emphasizes the computation that occurs, rather than a "hypermedia" perspective, which may view the media in terms of a database to be navigated. Flow graph, or dataflow, representations have been used with success in prior visual languages <ref> [31] </ref>. The visual environment is suited to tasks such as customization, rapid prototyping and experimentation, as well as more general program development. It provides a programming ability (rather than a limited set of configuration options) to users, allowing them to re-program previously developed applications.
Reference: [32] <author> J. F. Bartlett, "Scheme-&gt;C: </author> <title> a Portable Scheme-to-C Compiler," </title> <note> Digital WRL Research Report 89/1, </note> <month> January </month> <year> 1989 </year>
Reference-contexts: I chose Tcl over Common Lisp [28] or Scheme [22] because Tcl has a better interface to C and C++ and Tcl does not require a garbage collector. Tcl is designed from the start to have a simple and efficient interface to C. Scheme-to-C <ref> [32] </ref> is designed to have an efficient interface to C, but is not as good as Tcl in this respect. Through its interface to C, Tcl can easily support graphical user interfaces such as TclXt and TclXaw.
Reference: [33] <author> W. Bender and P. Chesnais, </author> <title> "Network Plus," </title> <booktitle> Proceedings of the SPIE Electronic Image Devices and Systems Symposium, </booktitle> <volume> 900 </volume> <pages> 81-86, </pages> <address> Los Angeles, CA, </address> <month> January </month> <year> 1988. </year>
Reference-contexts: These applications require more support than is provided by traditional multimedia toolkits. Applications of this type have been implemented in the past. Bender and Chenais have developed a system that digests television news broadcasts and annotates them with 14 newspaper articles <ref> [33] </ref>. Abramson and Bender have developed a system in which self--aware multimedia objects alter their content to fit user preferences [15]. In this report I build on this work by establishing a framework for investigating computer-participative multimedia applications as a class.
Reference: [34] <author> C. A. Csuri, S. Dyer, J. Faust, and R. Marshall, </author> <title> "A Flexible Integrated Graphics Environment for Supercomputers and Workstations," Science and Engineering on Cray Supercomputers, Cray Research, </title> <publisher> Inc., </publisher> <pages> 533-548, </pages> <year> 1987. </year>
Reference-contexts: They also provide a graphical programming system that can be used to combine processing modules into programs. 2.3.1 The Animation Production Environment The Animation Production Environment (apE) is a flexible integrated graphics environment for the production and manipulation of computer graphic images <ref> [34] </ref>. Built for the Ohio Supercomputer Project, apE is designed for the manipulation of large scientific data sets through visualization. The apE programming model is similar to Comet's | applications are constructed through the assembling of processing modules with data and control connections.
Reference: [35] <author> D. Ritchie, </author> <title> "A Stream Input-Output System," </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1897-1910, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: Idle on the upstream module would then send any waiting data to the downstream module. 3.2.4 Similarity to Streams The architecture of the in-band partition is similar to that of the Unix Stream Input-Output System <ref> [35] </ref>. Streams provide a mechanism where a process can dynamically insert processing modules between processes and terminals or networks.

References-found: 34

