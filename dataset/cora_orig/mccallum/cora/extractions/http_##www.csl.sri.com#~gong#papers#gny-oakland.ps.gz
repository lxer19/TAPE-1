URL: http://www.csl.sri.com/~gong/papers/gny-oakland.ps.gz
Refering-URL: http://www.csl.sri.com/~gong/papers/pubs90.html
Root-URL: 
Title: Reasoning about Belief in Cryptographic Protocols  
Author: Li Gong, Roger Needham, and Raphael Yahalom 
Date: February 11, 1990  
Address: Cambridge CB2 3QG, England  
Affiliation: University of Cambridge Computer Laboratory  
Abstract: Abstract. Analysis methods for cryptographic protocols have often focused on information leakage rather than on seeing whether a protocol meets its goals. Many protocols, however, fall far short of meeting their goals, sometimes for quite subtle reasons. We introduce a mechanism for reasoning about belief as a systematic way to understand the working of cryptographic protocols. Our mechanism captures more features of such protocols than that given in a recent work [1], to which our proposals are a substantial extension. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Burrows, M. Abadi, and R. Needham, </author> <title> "A Logic of Authentication", </title> <booktitle> in Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <address> Litch-field Park, Arizona, </address> <month> December, </month> <year> 1989. </year> <note> Published as ACM Operating System Review, Vol.23, No.5, pp.1-13, December, 1989. A fuller version was published as DEC System Research Center Report No.39, </note> <institution> Palo Alto, California, </institution> <month> February, </month> <year> 1989. </year>
Reference-contexts: In this paper we propose a method for reasoning about cryptographic protocols in a distributed environment. The work described was inspired by the recent development of a modal logic to reason about authentication protocols <ref> [1] </ref>, which we refer to as the BAN logic. Indeed our work can be seen as a new approach within the framework proposed there. Like BAN, we aim to analyze a protocol step by step, make explicit any assumptions required, and draw conclusions about the final position it attains. <p> An annotation for a protocol consists of a sequence of assertions, conjunctions of statements, inserted before the first told-statement and after each told-statement. The first assertion contains the assumptions and the last contains the conclusions. They can be understood as formulae in Hoare logic [3]. As in BAN <ref> [1] </ref>, if the assumptions hold, each assertion should hold after the execution of its respective protocol prefix. The assertions are derived by the syntactic application of the above postulates to statements. <p> We choose this protocol as an example because it influenced the design of a significant number of existing systems and published protocols, and because it serves as one of the examples in the BAN logic paper <ref> [1] </ref>. Our analysis below can thus provide insight to some of the differences between the approaches, and to the advantages that ours offers. <p> In the rest of this section we describe the protocol, analyze it, and finally investigate how modifications to the protocol affect the final position of the participants. 7.1 Protocol Description The general goal of the protocol is for two principals P and Q to be provided with a shared secret <ref> [6, 1] </ref>. That secret can consequently be used as a session key. There exists a trusted authentication server S, which shares common secrets with all potential participants and can generate good quality sessions keys. Different authentication protocols may differ in the final positions which the principals attain. <p> We note that the Yahalom protocol <ref> [1] </ref> can attain the same final position with five rather than seven messages. 8 Conclusions We presented a new approach to reasoning about cryptographic protocols. Our work, which was inspired by the BAN logic work, offers significant advantages. Some of the main differences between the two approaches are summarized below.
Reference: [2] <author> J.Y. Halpern and Y. Moses, </author> <title> "Knowledge and Common Knowledge in a Distributed Environment", </title> <booktitle> in Proceedings of the 3rd ACM Symposium on Principles of Distributed Computing, </booktitle> <address> pp.50-61, Vancou-ver, British Columbia, </address> <month> August, </month> <year> 1984. </year>
Reference-contexts: Finally, in section 8 we discuss our conclusions. 2 The Model of Computation Our model of computation is similar to that used in the BAN work and possesses some characteristics of models used in other knowledge-theoretic work (e.g. <ref> [2] </ref>). We outline the significant aspects of the model. A more formal presentation is given in appendix C. A distributed environment consists of principals, essentially state-machines, which are connected by communication links. Messages on these links constitute the only means of communication between principals.
Reference: [3] <author> C.A.R. Hoare, </author> <title> "An Axiomatic Basis for Com--puter Programming", </title> <journal> Communications of the ACM, Vol.12, No.10, pp.576-580 and p.583, </journal> <month> October, </month> <year> 1969. </year>
Reference-contexts: An annotation for a protocol consists of a sequence of assertions, conjunctions of statements, inserted before the first told-statement and after each told-statement. The first assertion contains the assumptions and the last contains the conclusions. They can be understood as formulae in Hoare logic <ref> [3] </ref>. As in BAN [1], if the assumptions hold, each assertion should hold after the execution of its respective protocol prefix. The assertions are derived by the syntactic application of the above postulates to statements.
Reference: [4] <author> T.M.A. Lomas, L. Gong, J.H. Saltzer, and R.M. Needham, </author> <title> "Reducing Risks from Poorly Chosen Keys", </title> <booktitle> in Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <address> Litchfield Park, Arizona, </address> <month> December, </month> <year> 1989. </year> <note> Published as ACM Operating System Review, Vol.23, No.5, pp.14-18, De-cember, </note> <year> 1989. </year>
Reference-contexts: With this notion, it is possible to express the ability of a recipient to identify the messages he expects. The BAN logic assumes that the encryption component always provides enough redundancy, which may not always be necessary. In fact, it is sometimes rather undesirable <ref> [4] </ref>. The not-originated-here notion allows us to determine that certain messages are not replays of a recipient's own previous messages in a session. BAN assumes that the encryption always provides information that identifies the sender.
Reference: [5] <author> R.C. Merkle, </author> <title> "One Way Hash Functions and DES", </title> <booktitle> in Advances of Cryptology, Proceedings of Crypto '89, </booktitle> <address> Santa Barbara, California, </address> <month> October, </month> <year> 1989. </year>
Reference-contexts: It is required that given X it is computationally feasible to compute H (X); given H (X) it is infeasible to compute X; it is infeasible to compute X and X 0 such that X 6= X 0 but H (X) = H (X 0 ) <ref> [5] </ref>.
Reference: [6] <author> R.M. Needham and M.D. Schroeder, </author> <title> "Using Encryption For Authentication in Large Networks of Computers", </title> <journal> Communications of the ACM, Vol.21, No.12, </journal> <volume> pp.993-999, </volume> <month> December, </month> <year> 1978. </year>
Reference-contexts: That is, X has not been used for the same purpose at any time before the current run of the protocol. For example, a counter or a random number generator (of sufficient quality) can serve to produce formulae that a principal believes to be fresh (called nonces <ref> [6] </ref>). P j (X): P believes, or is entitled to believe, that formula X is recognizable. That is, P would recognize X if P has certain expectations about the contents of X before actually receiving X. <p> able to include in any message he sends, a formula he possesses; belief consistency, i.e. a message extension should include only beliefs held by the sender at the time the message is sent. 7 The Needham-Schroeder Protocol In this section we apply the reasoning process to the Needham-Schroeder authentication protocol <ref> [6] </ref>. We choose this protocol as an example because it influenced the design of a significant number of existing systems and published protocols, and because it serves as one of the examples in the BAN logic paper [1]. <p> In the rest of this section we describe the protocol, analyze it, and finally investigate how modifications to the protocol affect the final position of the participants. 7.1 Protocol Description The general goal of the protocol is for two principals P and Q to be provided with a shared secret <ref> [6, 1] </ref>. That secret can consequently be used as a session key. There exists a trusted authentication server S, which shares common secrets with all potential participants and can generate good quality sessions keys. Different authentication protocols may differ in the final positions which the principals attain.
Reference: [7] <author> R.M. Needham and M.D. Schroeder, </author> <title> "Authentication Revisited", Operating Systems Review, </title> <address> Vol.21, No.1, p.7, </address> <month> January, </month> <year> 1987. </year>
Reference-contexts: However some modifications enable the derivation of the much improved final position that was originally intended by the protocol authors. 7.3 The Enhanced Needham-Schroeder Protocol Recently, Needham and Schroeder suggested the following modification to their original protocol <ref> [7] </ref>: 1. P ! Q: P 3. P ! S: P; Q; N p , fP; N q1 g K qs 5. P ! Q: fK; N q1 ; P g K qs 7. P ! Q: fN q 1g K Q believes his nonce N q1 to be fresh.
Reference: [8] <author> R.L. Rivest, A. Shamir, and L. Adleman, </author> <title> "A Method for Obtaining Digital Signatures and Public-key Cryptosystems", </title> <journal> Communications of the ACM, Vol.21, No.2, </journal> <volume> pp.120-126, </volume> <month> February, </month> <year> 1978. </year>
Reference-contexts: In addition to the requirements stated for conven tional cryptosystems, they satisfy ffXg +K g K = X. Some public-key schemes (e.g. RSA <ref> [8] </ref>) also satisfy that ffXg K g +K = X. H (X): a one-way function of X.
References-found: 8

