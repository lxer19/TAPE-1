URL: http://www.cs.umn.edu/Research/ibm-cluster/refs/WGPP_Users_Manual.ps.Z
Refering-URL: http://www.cs.umn.edu/Research/ibm-cluster/new_sware.html
Root-URL: http://www.cs.umn.edu
Title: WGPP: Watson Graph Partitioning (and sparse matrix ordering) Package Users Manual: Version 1.0  
Author: Anshul Gupta P. O. Box 
Address: Heights, New York 10598  
Affiliation: Mathematical Sciences IBM Research  IBM Research Division T.J. Watson Research Center  Yorktown  IBM Research Division Almaden Beijing Haifa T.J. Watson Tokyo Zurich  
Note: RC 20453  
Pubnum: Report  
Email: anshul@watson.ibm.com  
Date: (May 6, 1996)  
Abstract: LIMITED DISTRIBUTION NOTICE This report has been submitted for publication outside of IBM and will probably be copyrighted if accepted for publication. It has been issued as a Research Report for early dissemination of its contents. In view of the transfer of copyright to the outside publisher, its distribution outside of IBM prior to publication should be limited to peer communications and specific requests. After outside publication, requests should be filled only by reprints or legally obtained copies of the article (e.g., payment of royalties). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cleve Ashcraft. </author> <title> Compressed graphs and the minimum degree algorithm. </title> <journal> SIAM Journal of Scientific Computing, </journal> <volume> 16 </volume> <pages> 1404-1411, </pages> <year> 1995. </year>
Reference-contexts: This problem can be overcome by increasing NAUX. 6 Acknowledgments Details of the algorithms implemented in WGPP can be found in [5, 6]. Many algorithms implemented in WGPP are adapted from or improved upon the ones discussed in <ref> [8, 10, 1, 3] </ref>.
Reference: [2] <author> Cleve Ashcraft and Joseph W.-H. Liu. </author> <title> Robust ordering of sparse matrices using multisection. </title> <type> Technical Report CS 96-01, </type> <institution> Department of Computer Science, York University, </institution> <address> Ontario, Canada, </address> <year> 1996. </year>
Reference-contexts: WMMRB is better than Metis in both ordering time and quality for most matrices. A recent report by Ashcraft and Liu <ref> [2] </ref> suggests that their ordering algorithm DDSEP, may generate competitive orderings for certain types of finite-difference and finite-element matrices. DDSEP code is not yet available for extensive comparison. <p> WMMRB's implementation of * * multisection is much faster than multiple * * recursive bisection, but yields poorer quality * * orderings. * * NOTE: Multisection is *not recommended* in * * WMMRB, although Ashcraft and Liu have used * * it successfully in <ref> [2] </ref>. * * * * OPTIONS (NUMBERING+3) = random number seed. * * One can use different values of the seed to * * force WGPP to generate a different initial * * permutation of the graph.
Reference: [3] <author> Cleve Ashcraft and Joseph W.-H. Liu. </author> <title> Generalized nested dissection: Some recent progress. </title> <booktitle> In Proceedings of Fifth SIAM Conference on Applied Linear Algebra, </booktitle> <address> Snowbird, Utah, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: This problem can be overcome by increasing NAUX. 6 Acknowledgments Details of the algorithms implemented in WGPP can be found in [5, 6]. Many algorithms implemented in WGPP are adapted from or improved upon the ones discussed in <ref> [8, 10, 1, 3] </ref>.
Reference: [4] <author> Timothy A. Davis, Patrick Amestoy, and Iain S. Duff. </author> <title> An approximate minimum degree ordering algorithm. </title> <type> Technical Report TR-94-039, </type> <institution> Computer and Information Sciences Department, University of Florida, </institution> <address> Gainesville, FL, </address> <year> 1994. </year>
Reference-contexts: To the best of our knowledge, two of the current overall best codes available for computing fill-reducing ordering for sparse matrices are that of Harwell MC47B/BD routine based on the approximate minimum degree (AMD) algorithm <ref> [4] </ref> (if both ordering time and quality are taken into account) and the one in Metis (if only ordering quality is considered). In many practical applications, sparse matrices with the same structure need to be factored more than once. <p> Many algorithms implemented in WGPP are adapted from or improved upon the ones discussed in [8, 10, 1, 3]. WMMRB uses the AMD code written by Amestoy, Davis, and Duff <ref> [4] </ref> to label small subgraphs containing about 100 nodes. 7 Notice: Terms and Conditions for Use of WGPP The WGPP library may be used solely for educational, research, and benchmarking purposes by nonprofit organizations and the U.S. government.
Reference: [5] <author> Anshul Gupta. </author> <title> Fast and effective algorithms for graph partitioning and sparse matrix reordering. </title> <type> Technical Report (Under Preparation), </type> <institution> IBM T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <year> 1996. </year>
Reference-contexts: On very rare occasions, a routine might crash due to insufficient memory without generating the appropriate error message. This problem can be overcome by increasing NAUX. 6 Acknowledgments Details of the algorithms implemented in WGPP can be found in <ref> [5, 6] </ref>. Many algorithms implemented in WGPP are adapted from or improved upon the ones discussed in [8, 10, 1, 3].
Reference: [6] <author> Anshul Gupta. </author> <title> Graph partitioning based sparse matrix ordering algorithms for interior-point methods. </title> <type> Technical report, </type> <institution> IBM T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <year> 1996. </year> <note> Submitted for publication in SIAM Journal on Optimization. </note>
Reference-contexts: However, for sparse matrices arising from highly irregular graphs, such as those in linear programming problems, WMMRB significantly outperforms AMD, both in terms of ordering time and quality. In <ref> [6] </ref>, we present extensive experimental results that show that replacing the minimum degree based ordering in the IBM Optimization Subroutine Library (OSL) by WMMRB reduces the total time for solving a suite of 53 medium to large problems by a factor of 2.3. <p> On very rare occasions, a routine might crash due to insufficient memory without generating the appropriate error message. This problem can be overcome by increasing NAUX. 6 Acknowledgments Details of the algorithms implemented in WGPP can be found in <ref> [5, 6] </ref>. Many algorithms implemented in WGPP are adapted from or improved upon the ones discussed in [8, 10, 1, 3].
Reference: [7] <author> Bruce Hendrickson and Robert Leland. </author> <title> Chaco users guide. </title> <type> Technical report, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: the author. 1 2 Performance, Quality, and Usability Comparisons At the time of its release, WGGP is either faster or generates graph partitions with a smaller edgecut (for small number of partitions, it is both faster and better) than the other state-of-the art graph partitioning packages available, such as, Chaco <ref> [7] </ref> and Metis [9].
Reference: [8] <author> G. Karypis and V. Kumar. </author> <title> A fast and high quality multilevel scheme for partitioning irregular graphs. </title> <type> Technical Report TR 95-035, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year>
Reference-contexts: This problem can be overcome by increasing NAUX. 6 Acknowledgments Details of the algorithms implemented in WGPP can be found in [5, 6]. Many algorithms implemented in WGPP are adapted from or improved upon the ones discussed in <ref> [8, 10, 1, 3] </ref>.
Reference: [9] <author> G. Karypis and V. Kumar. METIS: </author> <title> Unstructured graph partitioning and sparse matrix ordering system. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year>
Reference-contexts: 2 Performance, Quality, and Usability Comparisons At the time of its release, WGGP is either faster or generates graph partitions with a smaller edgecut (for small number of partitions, it is both faster and better) than the other state-of-the art graph partitioning packages available, such as, Chaco [7] and Metis <ref> [9] </ref>.
Reference: [10] <author> George Karypis and Vipin Kumar. </author> <title> Multilevel k-way partitioning scheme for irregular graphs. </title> <type> Technical Report TR 95-064, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year> <month> 15 </month>
Reference-contexts: This problem can be overcome by increasing NAUX. 6 Acknowledgments Details of the algorithms implemented in WGPP can be found in [5, 6]. Many algorithms implemented in WGPP are adapted from or improved upon the ones discussed in <ref> [8, 10, 1, 3] </ref>.
References-found: 10

