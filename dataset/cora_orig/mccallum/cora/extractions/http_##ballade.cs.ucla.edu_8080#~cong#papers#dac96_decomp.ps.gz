URL: http://ballade.cs.ucla.edu:8080/~cong/papers/dac96_decomp.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: Structural Gate Decomposition for Depth-Optimal Technology Mapping in LUT-based FPGA  
Author: Jason Cong and Yean-Yow Hwang 
Address: Los Angeles Los Angeles, CA 90024  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper, we study the problem of decomposing gates in fanin-unbounded or K-bounded networks such that the mapping solutions computed by a depth-optimal mapper have minimum depth. We present several theoretical results: (1) any further decomposition of a K-bounded network will lead to an optimal mapping depth smaller than or equal to that of the original network, regardless of the decomposition algorithm used, and (2) the problem of gate decomposition for depth-optimal technology mapping is NP-hard for fanin-unbounded networks when K 3 and remains NP-hard for K-bounded networks when K 5. We propose a novel gate decomposition algorithm, named DOGMA, which combines level-driven node packing technique (Chortle-d) and the network flow based optimal labeling technique (FlowMap) for depth-optimal technology mapping. Experimental results show that the networks produced by DOGMA allow depth-optimal technology mappers to improve the mapping solutions by up to 11% in depth and up to 35% in area comparing to the mapping results of networks decomposed by other existing decomposition algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [BrRS87] <author> Brayton, R. K., R. Rudell, and A. L. Sangiovanni-Vincentelli, </author> <title> ``MIS: A Multiple-Level Logic Optimization,'' </title> <journal> IEEE Transactions on CAD, </journal> <pages> pp. 1062-1081, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: AND, OR, NAND, NOR, XOR). Figure 1 and Figure 2 show examples of this type. On the other hand, Boolean decomposition decomposes a complex gate according to its functionality and representation. Examples of Boolean decomposition includes AND-OR decomposition <ref> [BrRS87] </ref>, co-factoring [SaTh92], cube-packing [MuSB91a], and functional decomposition [LaPP94, WuEA95].
Reference: [ChCD92] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, ``DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization,'' </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pp. 7-20, </pages> <month> Sep. </month> <year> 1992. </year>
Reference-contexts: The delay of a network can be estimated by the number of levels (i.e. depth) under the unit delay model before placement and routing are performed. Several LUT-mapping algorithms have been proposed for depth minimization <ref> [FrRV91c, MuSB91a, SaTh93, ChCD92, CoDi94a] </ref> and reported good results. In particular, the FlowMap algorithm [CoDi94a] guarantees a depth-optimal mapping solution for any K-bounded network. <p> Several gate decomposition routines have been used for LUT-mapping. The tech_decomp routine in SIS [SeSL92] produces a height-balanced fanin tree for each decomposed gate to minimize the height of the fanin tree. The dmig routine <ref> [Wa89, ChCD92] </ref> uses a Huffman coding tree to minimize the level of the decomposed node in the resulting network. It guarantees a minimum level in the decomposed network but does not guarantee the optimal depth in the final LUT network. <p> Because MC-FFD is faster than other three methods, the DOGMA algorithm employs the MC-FFD heuristic to solve the min-height K-feasible bin packing problem. We now compare the DOGMA algorithm with two other decomposition routines: the tech_decomp (td) routine in the SIS package and the dmig routine developed in DAG-Map <ref> [ChCD92] </ref>. The tech_decomp routine is based on a balanced-tree heuristic which only minimizes the gate level locally. The dmig routine minimizes the gate level of the decomposed networks. In this experiment, the flattened 2-level MCNC circuits are decomposed and then fed to CutMap (CM) [CoHw95] to obtain final LUT networks.
Reference: [CoDi94a] <author> Cong, J. and Y. Ding, </author> <title> ``An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs,'' </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> Vol. 13, </volume> <pages> pp. 1-12, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: The delay of a network can be estimated by the number of levels (i.e. depth) under the unit delay model before placement and routing are performed. Several LUT-mapping algorithms have been proposed for depth minimization <ref> [FrRV91c, MuSB91a, SaTh93, ChCD92, CoDi94a] </ref> and reported good results. In particular, the FlowMap algorithm [CoDi94a] guarantees a depth-optimal mapping solution for any K-bounded network. <p> The delay of a network can be estimated by the number of levels (i.e. depth) under the unit delay model before placement and routing are performed. Several LUT-mapping algorithms have been proposed for depth minimization [FrRV91c, MuSB91a, SaTh93, ChCD92, CoDi94a] and reported good results. In particular, the FlowMap algorithm <ref> [CoDi94a] </ref> guarantees a depth-optimal mapping solution for any K-bounded network. However, it can not be applied directly to a fanin-unbounded network and depth-optimal result may not hold when further gate decomposition of a K-bounded network is allowed prior to the mapping. <p> Experimental results are presented in Section 5 and Section 6 concludes the paper. Since we use the concepts and techniques in <ref> [CoDi94a] </ref> extensively, it is beneficial for the reader to be familiar with the results in [CoDi94a]. 2. Problem Formulation 2.1. <p> Experimental results are presented in Section 5 and Section 6 concludes the paper. Since we use the concepts and techniques in <ref> [CoDi94a] </ref> extensively, it is beneficial for the reader to be familiar with the results in [CoDi94a]. 2. Problem Formulation 2.1. Notations and Preliminaries A combinational Boolean network can be represented by a directed acyclic graph (DAG) where a node represents a logic gate and a directed edge (u,v) represents a connection from the output of node u to the input of node v. <p> PI nodes have a mapping depth of 0. The minimum mapping depth of a network N, denoted MMD (N), is the maximum mapping depth among all PO nodes. Given a K-bounded network N, the FlowMap <ref> [CoDi94a] </ref> algorithm computes MMD N (v) for every node v N in polynomial time. The computation is based on the max-flow min-cut computation. <p> The height of a cut, denoted height (X v ,X hh v ), is the maximum mapping depth for nodes in n (X v ,X hh v ). We have the following lemmas based on results in <ref> [CoDi94a] </ref>. Lemma 1 A node v has MMD N (v) = p if there is a K-feasible cut of height of p - 1 in N v but no K-feasible cut of height of p - 2 or smaller exists. <p> We present two properties of the structural decomposition. (1) Any decomposition method will not increase the minimum mapping depth of a network. It can only decrease the depth. This phenomena has been observed in <ref> [CoDi94a] </ref> without an explanation. (2) Under certain circumstance, further decomposition of a gate will not decrease the minimum mapping depth. Under this circumstance, it is irrelevant which decomposition algorithm is used for those gates. The circumstance occurs in the packing-based decomposition methods. <p> Therefore, depth (M N ) = depth (M N ). This implies the best integrated approach and the best 2-step approach result in the same optimal depth. In this paper, we take the 2-step approach, i.e., gates are decomposed before a depth-optimal mapping algorithm (such as FlowMap <ref> [CoDi94a] </ref> or its enhancement CutMap [CoHw95]) is applied to obtain an LUT mapping solution. <p> Our approach is optimal in computing mapping depth (using FlowMap algorithm) while Chortle-d computes the node mapping depth based on the partially generated LUT network of the node. Since the fanin constraint is not a monotone clustering constraint <ref> [CoDi94a] </ref>, Chortle-d might obtain inaccurate labels for nodes. Secondly, Chortle-d uses bin-packing heuristics together with enumerative consideration for nodes on reconvergent paths, while we use network flow based min-cut packing methods (to be described in details in Section 4.2) for packing nodes into min-height K-feasible bins. <p> To determine if there is a K-feasible cut of height p - 1 for a set of nodes in S = - v 1 ,v 2 , . . . , v m with label p, we construct the flow network and apply the max-flow algorithm <ref> [CoDi94a] </ref> as follows. (1) We introduce a sink node t with fanins from every node in S. (2) We introduce a source node s connected to all PIs in the network rooted at t. (3) Every edge is given an infinite flow capacity. (4) Every node u i in the flow <p> Otherwise, e i is assigned a unit flow capacity. (5) Finally, we compute a max-flow to obtain a min-cut in the flow network, which can be shown to be a cut of height p - 1 <ref> [CoDi94a] </ref>. By examining the size of this cut, we can determine if there is a K-feasible cut of height p - 1 for nodes in S. The third heuristic is the network flow based maximal-sharing-decreasing (MC-MSD) heuristic which emphasizes on sharing nodes among cuts. <p> These benchmarks, after decomposed by the SIS speed_up routine or the dmig routine, are used by Chortle-d [FrRV91c], FlowMap <ref> [CoDi94a] </ref> and CutMap [CoHw95] as inputs to obtain LUT networks. MIS-pga-delay [MuSB91a] and TechMap-D [SaTh93] also start with area-optimized MCNC benchmarks (different 16 from those used by Chortle-crf) followed by a delay reduction script and the speed_up routine to get input networks in their experiments. <p> Both MIS-pga-delay and TechMap-D combine logic synthesis with technology mapping in their approaches. In our experiments, we take the benchmarks used by Chortle-crf as initial networks, which are subsequently decomposed by DOGMA and then fed to CutMap to obtain LUT networks. It has been shown in <ref> [CoDi94a] </ref> that FlowMap outperforms Chortle-d and MIS-pga-delay by 5% to 7% in depth and 9% to 50% in area. Therefore we compare our results with results by FlowMap, TechMap-D and CutMap respectively in Table 3. <p> However, 15% less LUTs are generated by CutMap for circuits decomposed by DOGMA than by speed_up. It indicates DOGMA is an area-efficient gate decomposition algorithm for depth-optimal technology mapping. Comparing with the results in <ref> [CoDi94a] </ref>, we see dmig performs fairly well even though its decomposition goal is to minimize the level in the decomposed network rather than the final LUT network. <p> Among four data sets in Table 3, TechMap-D obtains the smallest overall depth (partly due to resynthesis) at an expense of a large area overhead. On average, speed_up + TechMap-D generates 35% more LUTs than DOGMA + CM. iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii [SaTh93] [CoHw95] <ref> [CoDi94a] </ref> Ours iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii speed_up+TM-D speed_up+CM dmig+FM DOGMA+CM iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT depth LUT depth LUT depth LUT depth iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 17 2 23 3 22 3 24 3 9symml 9 3 58 5 55 5 50 4 C499 148 4 143 5 68 4 68 4 alu2 197 8 144 8 155
Reference: [CoHw95] <author> Cong, J. and Y.-Y. Hwang, </author> <title> ``Simultaneous Depth and Area Minimization in LUT-Based FPGA Mapping,'' </title> <booktitle> Proc. ACM 3rd Int'l Symp. on Field Programmable Gate Arrays, </booktitle> <pages> pp. 68-74, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: This implies the best integrated approach and the best 2-step approach result in the same optimal depth. In this paper, we take the 2-step approach, i.e., gates are decomposed before a depth-optimal mapping algorithm (such as FlowMap [CoDi94a] or its enhancement CutMap <ref> [CoHw95] </ref>) is applied to obtain an LUT mapping solution. <p> The tech_decomp routine is based on a balanced-tree heuristic which only minimizes the gate level locally. The dmig routine minimizes the gate level of the decomposed networks. In this experiment, the flattened 2-level MCNC circuits are decomposed and then fed to CutMap (CM) <ref> [CoHw95] </ref> to obtain final LUT networks. The mapping results are shown in Table 2. From the results, we see CutMap produces the same or better depth when circuits are decomposed by the DOGMA algorithm. On average, DOGMA achieves 10% and 4% depth reduction compared to tech_decomp and dmig, respectively. <p> These benchmarks, after decomposed by the SIS speed_up routine or the dmig routine, are used by Chortle-d [FrRV91c], FlowMap [CoDi94a] and CutMap <ref> [CoHw95] </ref> as inputs to obtain LUT networks. MIS-pga-delay [MuSB91a] and TechMap-D [SaTh93] also start with area-optimized MCNC benchmarks (different 16 from those used by Chortle-crf) followed by a delay reduction script and the speed_up routine to get input networks in their experiments. <p> Therefore we compare our results with results by FlowMap, TechMap-D and CutMap respectively in Table 3. The corresponding gate decomposition and technology mapping methods taken by these approaches are listed in the second row. Comparing our results with results in <ref> [CoHw95] </ref>, we can see that speed_up and DOGMA decompose gates equally well in terms of depth. However, 15% less LUTs are generated by CutMap for circuits decomposed by DOGMA than by speed_up. It indicates DOGMA is an area-efficient gate decomposition algorithm for depth-optimal technology mapping. <p> Among four data sets in Table 3, TechMap-D obtains the smallest overall depth (partly due to resynthesis) at an expense of a large area overhead. On average, speed_up + TechMap-D generates 35% more LUTs than DOGMA + CM. iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii [SaTh93] <ref> [CoHw95] </ref> [CoDi94a] Ours iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii speed_up+TM-D speed_up+CM dmig+FM DOGMA+CM iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT depth LUT depth LUT depth LUT depth iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 17 2 23 3 22 3 24 3 9symml 9 3 58 5 55 5 50 4 C499 148 4 143 5 68 4 68 4 alu2 197 8 144 8
Reference: [FrRV91a] <author> Francis, R. J., J. Rose, and Z. Vranesic, ``Chortle-crf: </author> <title> Fast Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1991. </year> <month> 18 </month>
Reference-contexts: We believe the smaller area in mapping solutions of circuits decomposed by DOGMA is from the additional timing slacks created by DOGMA and then exploited by CutMap. We now compare our mapping solutions with previous results by various gate decomposition and technology mapping algorithms. Chortle-crf <ref> [FrRV91a] </ref> uses a set of (multi-level) area 15 iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii MC-FFD+FM MC-BFD+FM MC-MSD+FM MC-DP+FM iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT depth LUT depth LUT depth LUT depth iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 25 3 25 3 25 3 25 3 apex2 157 5 157 5 157 5 156 5 apex4 771 5 771 5 770 5 - clip
Reference: [FrRV91c] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping of Lookup Table-Based FPGAs for Performance,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 568-571, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The delay of a network can be estimated by the number of levels (i.e. depth) under the unit delay model before placement and routing are performed. Several LUT-mapping algorithms have been proposed for depth minimization <ref> [FrRV91c, MuSB91a, SaTh93, ChCD92, CoDi94a] </ref> and reported good results. In particular, the FlowMap algorithm [CoDi94a] guarantees a depth-optimal mapping solution for any K-bounded network. <p> MIS-pga-delay [MuSB91a] and TechMap-D [SaTh93] used speed_up as well as other logic synthesis techniques to obtain delay-minimized mapping solutions. These decomposition methods, although effective to some extent, are not designed to minimize the depth of LUT networks directly. Chortle-d <ref> [FrRV91c] </ref> is the first algorithm which computes a depth-optimal gate decomposition and mapping solution based on a bin packing approach when the input network is a tree (may be unbounded). <p> These benchmarks, after decomposed by the SIS speed_up routine or the dmig routine, are used by Chortle-d <ref> [FrRV91c] </ref>, FlowMap [CoDi94a] and CutMap [CoHw95] as inputs to obtain LUT networks. MIS-pga-delay [MuSB91a] and TechMap-D [SaTh93] also start with area-optimized MCNC benchmarks (different 16 from those used by Chortle-crf) followed by a delay reduction script and the speed_up routine to get input networks in their experiments.
Reference: [GaJo79] <author> Garey, M. and D. Johnson, </author> <title> Computer and Intractability: A Guide to the Theory of NP-Completeness, </title> <publisher> Freeman, </publisher> <address> San Francisco (1979). </address>
Reference-contexts: Our proof is based on polynomial time transformations from the 3SAT problem to the decision version of the SGD/K problem and the K-SGD/K problem. We first define the 3SAT problem, which is a well-known NP-Complete problem <ref> [GaJo79] </ref>. <p> In the number partitioning problem we want to find a way to divide an integer set into two subsets of equal sum. This problem is NP-complete but can be solved in pseudo-polynomial time <ref> [GaJo79] </ref>. We first formulate a general number partitioning problem and an analogous node partitioning problem. Then we give an algorithm for the number partitioning problem. The method for the node partitioning problem is similar and hence skipped.
Reference: [HoSa78] <author> Horowitz, E. and S. Sahni, </author> <title> Fundamentals of Computer Algorithms, </title> <publisher> Computer Science Press, </publisher> <address> Potomac, Maryland (1978). </address>
Reference-contexts: Such a bin is called a min-height K-feasible bin. Our heuristics are based on the max-flow min-cut algorithm and bin-packing heuristics. The first-fit-decreasing (FFD) and best-fit-decreasing (BFD) are two heuristics for the bin packing problem <ref> [HoSa78] </ref>. Items are sorted into a decreasing order according to their size and then assigned to bins. FFD assigns each item in the sorted order to the first-fit bin while BFD assigns items to the the best-fit bin (i.e. the bin with the least residual capacity after assignment).
Reference: [LaPP94] <author> Lai, Y.-T., K.-R. R. Pan, and M. Pedram, </author> <title> ``FPGA Synthesis using Function Decomposition,'' </title> <booktitle> Proc. Int'l Conf. on Computer Design: VLSI in Computers, </booktitle> <pages> pp. 30-35, </pages> <month> Oct. </month> <year> 1994. </year> <note> [MuSB91a] Murgai, </note> <author> R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Performance Directed Synthesis for Table Look Up Programmable Gate Arrays,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 572-575, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: AND, OR, NAND, NOR, XOR). Figure 1 and Figure 2 show examples of this type. On the other hand, Boolean decomposition decomposes a complex gate according to its functionality and representation. Examples of Boolean decomposition includes AND-OR decomposition [BrRS87], co-factoring [SaTh92], cube-packing [MuSB91a], and functional decomposition <ref> [LaPP94, WuEA95] </ref>.
Reference: [SaTh92] <author> Sawkar, P. and D. Thomas, </author> <title> ``Technology Mapping for Table-Look-Up Based Field Programmable Gate Arrays,'' </title> <booktitle> ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 83-88, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: AND, OR, NAND, NOR, XOR). Figure 1 and Figure 2 show examples of this type. On the other hand, Boolean decomposition decomposes a complex gate according to its functionality and representation. Examples of Boolean decomposition includes AND-OR decomposition [BrRS87], co-factoring <ref> [SaTh92] </ref>, cube-packing [MuSB91a], and functional decomposition [LaPP94, WuEA95].
Reference: [SaTh93] <author> Sawkar, P. and D. Thomas, </author> <title> ``Performance Directed Technology Mapping for Look-Up Table Based FPGAs,'' </title> <booktitle> Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 208-212, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The delay of a network can be estimated by the number of levels (i.e. depth) under the unit delay model before placement and routing are performed. Several LUT-mapping algorithms have been proposed for depth minimization <ref> [FrRV91c, MuSB91a, SaTh93, ChCD92, CoDi94a] </ref> and reported good results. In particular, the FlowMap algorithm [CoDi94a] guarantees a depth-optimal mapping solution for any K-bounded network. <p> The SIS routine speed_up is often used to obtain delay-optimized 2-input networks for technology mapping. It uses Boolean decomposition based on repeated node collapsing and decomposition to speed-up the critical path. MIS-pga-delay [MuSB91a] and TechMap-D <ref> [SaTh93] </ref> used speed_up as well as other logic synthesis techniques to obtain delay-minimized mapping solutions. These decomposition methods, although effective to some extent, are not designed to minimize the depth of LUT networks directly. <p> These benchmarks, after decomposed by the SIS speed_up routine or the dmig routine, are used by Chortle-d [FrRV91c], FlowMap [CoDi94a] and CutMap [CoHw95] as inputs to obtain LUT networks. MIS-pga-delay [MuSB91a] and TechMap-D <ref> [SaTh93] </ref> also start with area-optimized MCNC benchmarks (different 16 from those used by Chortle-crf) followed by a delay reduction script and the speed_up routine to get input networks in their experiments. Both MIS-pga-delay and TechMap-D combine logic synthesis with technology mapping in their approaches. <p> Among four data sets in Table 3, TechMap-D obtains the smallest overall depth (partly due to resynthesis) at an expense of a large area overhead. On average, speed_up + TechMap-D generates 35% more LUTs than DOGMA + CM. iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii <ref> [SaTh93] </ref> [CoHw95] [CoDi94a] Ours iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii speed_up+TM-D speed_up+CM dmig+FM DOGMA+CM iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT depth LUT depth LUT depth LUT depth iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 17 2 23 3 22 3 24 3 9symml 9 3 58 5 55 5 50 4 C499 148 4 143 5 68 4 68 4 alu2 197 8 144
Reference: [SeSL92] <author> Sentovich, E., K. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. Stephen, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``SIS: A System for Sequential Circuit Synthesis,'' </title> <note> U.C.Berkeley Technical Report UCB/ERL M92/41, </note> <month> May, </month> <year> 1992. </year>
Reference-contexts: Several gate decomposition routines have been used for LUT-mapping. The tech_decomp routine in SIS <ref> [SeSL92] </ref> produces a height-balanced fanin tree for each decomposed gate to minimize the height of the fanin tree. The dmig routine [Wa89, ChCD92] uses a Huffman coding tree to minimize the level of the decomposed node in the resulting network. <p> We refer to this algorithm as the MC-DP algorithm. 5. Experimental Results We have implemented the DOGMA algorithm with MC-FFD, MC-BFD, MC-MSD heuristics and the optimal MC-DP method using the C language and incorporated our implementation into the SIS package <ref> [SeSL92] </ref>. We apply the DOGMA algorithm on MCNC combinational benchmarks in our experiments. These benchmark circuits are first optimized for area and then decomposed into simple-gate networks using standard SIS routines.
Reference: [Wa89] <author> Wang, A., </author> <title> ``Algorithms for Multi-level Logic Optimization,'' </title> <note> U.C.Berkeley Memorandum No. UCB/ERL M89/50, </note> <month> April </month> <year> 1989. </year>
Reference-contexts: Several gate decomposition routines have been used for LUT-mapping. The tech_decomp routine in SIS [SeSL92] produces a height-balanced fanin tree for each decomposed gate to minimize the height of the fanin tree. The dmig routine <ref> [Wa89, ChCD92] </ref> uses a Huffman coding tree to minimize the level of the decomposed node in the resulting network. It guarantees a minimum level in the decomposed network but does not guarantee the optimal depth in the final LUT network.
Reference: [WuEA95] <author> Wurth, B., K. Eckl, and K. Antreich, </author> <title> ``Functional Multiple-Output Decomposition: Theory and an Implicit Algorithm,'' </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. </pages> <address> 54--59, </address> <month> Jun. </month> <year> 1995. </year> <month> 19 </month>
Reference-contexts: AND, OR, NAND, NOR, XOR). Figure 1 and Figure 2 show examples of this type. On the other hand, Boolean decomposition decomposes a complex gate according to its functionality and representation. Examples of Boolean decomposition includes AND-OR decomposition [BrRS87], co-factoring [SaTh92], cube-packing [MuSB91a], and functional decomposition <ref> [LaPP94, WuEA95] </ref>.
References-found: 14

