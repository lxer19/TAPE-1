URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-90-11.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: INTERACTIVE PROOF SYSTEMS AND ALTERNATING TIME-SPACE COMPLEXITY interactive proofs with a log-space polynomial-time public-coin verifier
Author: Lance Fortnow Carsten Lund public-coin polynomial-space exponential-time verifiers. 
Note: ffi All of NC has  
Address: 1100 E. 58th Street Chicago, IL 60637  
Affiliation: University of Chicago Dept. of Computer Science  
Abstract: We show a rough equivalence between alternating time-space complexity and a public-coin interactive proof system with the verifier having a polynomial related time-space complexity. Special cases include To achieve better bounds, we show how to reduce a k-tape alternating Turing machine to a 1-tape alternating Turing machine with only a constant factor increase in time and space. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In Proc. of the 17th ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 421-429, </pages> <year> 1985. </year> <note> 22 Fortnow & Lund </note>
Reference-contexts: In 1985, Goldwasser, Micali and Rackoff [10] and Babai <ref> [1] </ref> introduced interactive proof systems, an extension of nondeterministic computation consisting of two players, an infinitely powerful prover and a probabilistic polynomial-time verifier. The prover will try to convince the verifier of the validity of some statement. <p> If x 2 L then Pr (P$V (x) accepts) 2 3 2. If x 62 L then for all P fl ; Pr (P fl $V (x) accepts) 1 3 Goldwasser, Micali and Rackoff [10] and Babai <ref> [1] </ref> require the verifier computes in probabilistic polynomial time and space. Lund, Fortnow, Karloff and Nisan [14] showed an interactive proof system for every language in the polynomial-time hierarchy.
Reference: [2] <author> L. Babai and L. Fortnow. Arithmetization: </author> <title> a new method in structural complexity theory. </title> <journal> Computational Complexity, </journal> <volume> 1 </volume> <pages> 41-66, </pages> <year> 1991. </year>
Reference-contexts: If N = dt (n)=2e and I 0 is the ID describing the start configuration then clearly ' N (I 0 ; x) = 1 () M accepts x. We will extend the ideas by Shamir [17] and Babai-Fortnow <ref> [2] </ref> to arithme-tize ' N (I 0 ; x). The technique is polynomial extrapolation of truth values. We will given a Boolean ' expression construct an arithmetic expression A ' .
Reference: [3] <author> A. R. Bruss and A. R. Meyer. </author> <title> On time-space classes and their relation to the theory of real addition. </title> <journal> Theoretical Computer Science, </journal> <volume> 11 </volume> <pages> 59-69, </pages> <year> 1980. </year>
Reference-contexts: Note most "natural" functions fulfill these conditions. We also assume all inputs are elements of f0; 1g fl . We say that (t; s) is time-space constructible. We define the following time and space classes generalizing the TISP terminology introduced by Bruss and Meyer <ref> [3] </ref> to describe deterministic computation bounded in both time and space: A language L is in ATISP (t (n); s (n)) if some alternating Turing machine M accepts L and M runs in time O (t (n)) and space O (s (n)) on every computation path.
Reference: [4] <author> A. Chandra, D. Kozen, and L. Stockmeyer. </author> <title> Alternation. </title> <journal> J. of the ACM, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: 1. Introduction In 1981, Chandra, Kozen and Stockmeyer <ref> [4] </ref> introduced alternating Tur-ing machines, an extension of nondeterministic computation where the Turing 1 Supported by NSF Grant CCR-9009936 2 Supported by a fellowship from the University of -Arhus. 2 Fortnow & Lund machine can make both existential and universal moves. <p> A series of results by Lund, Fortnow, Karloff and Nisan [14] and Shamir [17] show that the set of languages accepted by an interactive proof system equals the class of languages accepted in deterministic polynomial space. Since Chandra, Kozen and Stockmeyer <ref> [4] </ref> have shown PSPACE equivalent to the languages accepted by a polynomial-time alternating Turing machine, in this case alternating Turing machine and interactive proof systems have identical power. We generalize the work of [14, 17] to show a broader equivalence between alternating Turing machines and interactive proof systems. <p> Interactive Proofs 3 We also use these theorems to get strong relationships between interactive proof systems and deterministic computation similar to the relationships between alternating Turing machine and deterministic computation found in <ref> [4] </ref>. With the notable exception of Theorem 6.1, most of the results in this paper do not relativize. Fortnow and Sipser [8] have shown an oracle A such that some language in coNP A does not have interactive proofs relative to A. <p> In this paper we study the complexity of the public-coin interactive proof system model. In this paper we contrast the power of interactive proof systems with alternating Turing machines as developed by Chandra, Kozen and Stockmeyer <ref> [4] </ref>. An alternating Turing machine is a generalization of a nondeterministic machine where the machine may make both existential and universal choices. <p> A string is accepted by an alternating Turing machine M if there exists a first existential choice such that for all first universal choices there exists a second existential choice : : : such that M accepts. See <ref> [4] </ref> for a complete technical definition. Let n represent the length of the input string. Let ATIME (t (n)) be the set of languages accepted by an alternating Turing machine running in time O (t (n)). Let ASPACE (s (n)) be the analogous class for space. Chandra, Kozen and Stockmeyer [4] <p> <ref> [4] </ref> for a complete technical definition. Let n represent the length of the input string. Let ATIME (t (n)) be the set of languages accepted by an alternating Turing machine running in time O (t (n)). Let ASPACE (s (n)) be the analogous class for space. Chandra, Kozen and Stockmeyer [4] show the following relationships: ffi For s (n) log n; ASPACE (s (n)) = S c&gt;0 DTIME (c s (n) ). ffi For t (n) n; ATIME (t (n)) DSPACE (t (n)) ATIME (t (n) 2 ). <p> Every language in P has a public-coin interactive proof sys tem with a polynomial-time verifier using O (log 2 (n)= log log (n)) space. Proof. Let L be a language in P . Chandra, Kozen and Stockmeyer <ref> [4] </ref> prove the existence of an alternating polynomial-time log-space Turing machine M that accepts L. 2 Corollary 5.4. Every language in NC = S k NC k has a public-coin interac tive proof system with a verifier using O (log (n)) space and O (n log 2 n) time. Proof. <p> Interactive Proofs 19 Corollary 6.2. A deterministic polynomial-time Turing machine can recognize any language accepted by a public-coin interactive proof system with a verifier using logarithmic space and polynomial time. Proof. S k&gt;0 ATISP (n k ; log n) = ASPACE (log n) = P <ref> [4] </ref> 2 7. A Hierarchy for IPTISP (t; s) Theorem 3.2 gives a tight hierarchy for ATISP (t; s). Theorem 7.1. <p> Interactive Proof Systems for Deterministic Computation Corollaries 5.3 and 5.4 exhibit interactive proof systems with verifiers having low time-space complexity for P and NC. We can use Theorem 6.1 and Corollary 5.5 combined with the relationships in <ref> [4] </ref> described in Section 2 to prove more general relationships. Corollary 8.1.
Reference: [5] <author> A. Condon. </author> <title> Space bounded probabilistic game automata. </title> <booktitle> In Proc. of the 3rd Conference on Structure in Complexity Theory, </booktitle> <pages> pages 162-174, </pages> <year> 1988. </year>
Reference-contexts: We generalize the work of [14, 17] to show a broader equivalence between alternating Turing machines and interactive proof systems. We look at time-space complexity, first studied for alternating Turing machines by Ruzzo [16] and for interactive proof systems by Condon <ref> [5] </ref>. We show a general relationship between time and space bounded alternating Turing machines and time and space bounded verifiers. <p> Goldwasser and Sipser [11] show the class of languages accepted by interactive proofs with a polynomial-time verifier does not depend on whether the verifier uses public or private coins. However, a difference between private and public coins does seem to hold for time and space bounded verifiers. Condon <ref> [5] </ref> show that interactive proof systems with private coins and polynomial-time log-space verifiers can simulate any standard interactive protocol and thus accept any PSPACE language. 4 Fortnow & Lund However, a deterministic polynomial-time Turing machine can simulate any public-coin interactive proof system with a polynomial-time log-space verifier ([5, 7], Corollary 6.2). <p> Condon first studied the complexity class IPTISP (t; s) under the name BC-TIME,SPACE. In <ref> [5] </ref> she showed that IPTISP (poly (t (n)); log t (n)) DTIME (poly (t (n))): Fortnow and Sipser [7] studied the class BPNL = S k&gt;0 IPTISP (n k ; log n). <p> By a result by Ruzzo [16] an alternating Turing machine can evaluate each bit of the value of the initial configuration in time O (t (n) log t (n)) and space O (s (n)). 2 Condon <ref> [5] </ref> and Fortnow and Sipser [7] independently proved the following fact, which follows from Theorem 6.1. Interactive Proofs 19 Corollary 6.2. A deterministic polynomial-time Turing machine can recognize any language accepted by a public-coin interactive proof system with a verifier using logarithmic space and polynomial time. Proof.
Reference: [6] <author> L. Fortnow. </author> <title> Complexity-theoretic aspects of interactive proof systems. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, Laboratory for Computer Science, </institution> <year> 1989. </year> <note> Tech Report MIT/LCS/TR-447. </note>
Reference: [7] <author> L. Fortnow and M. Sipser. </author> <title> Interactive proof systems with a log-space verifier. </title> <type> Manuscript. </type> <note> Later version appears in [6]. </note>
Reference-contexts: The previous best known result by Fortnow and Sipser <ref> [7] </ref> shows LOGCFL has a public-coin interactive proof system with a polynomial-time log-space verifier. LOGCFL consists of all languages log-space reducible to context-free languages and is known to lie in NC 2 [19, 20, 16]. <p> Condon first studied the complexity class IPTISP (t; s) under the name BC-TIME,SPACE. In [5] she showed that IPTISP (poly (t (n)); log t (n)) DTIME (poly (t (n))): Fortnow and Sipser <ref> [7] </ref> studied the class BPNL = S k&gt;0 IPTISP (n k ; log n). They show LOGCFL BPNL P where LOGCFL NC 2 is the class of languages log-space reducible to context-free languages [19, 20]. 3. <p> By a result by Ruzzo [16] an alternating Turing machine can evaluate each bit of the value of the initial configuration in time O (t (n) log t (n)) and space O (s (n)). 2 Condon [5] and Fortnow and Sipser <ref> [7] </ref> independently proved the following fact, which follows from Theorem 6.1. Interactive Proofs 19 Corollary 6.2. A deterministic polynomial-time Turing machine can recognize any language accepted by a public-coin interactive proof system with a verifier using logarithmic space and polynomial time. Proof.
Reference: [8] <author> L. Fortnow and M. Sipser. </author> <title> Are there interactive protocols for co-NP languages? Information Processing Letters, </title> <booktitle> 28 </booktitle> <pages> 249-251, </pages> <year> 1988. </year>
Reference-contexts: With the notable exception of Theorem 6.1, most of the results in this paper do not relativize. Fortnow and Sipser <ref> [8] </ref> have shown an oracle A such that some language in coNP A does not have interactive proofs relative to A. However our result implies every language in PSPACE has interactive proofs. 2. Background and Definitions An interactive proof system consists of a prover-verifier pair P $V .
Reference: [9] <author> L. Fortnow and M. Sipser. </author> <title> Probabilistic computation and linear time. </title> <booktitle> In Proc. of the 21st ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 148-156, </pages> <year> 1989. </year>
Reference-contexts: This should be contrasted with the result by Fortnow and Sipser <ref> [9] </ref> that for probabilistic computation there exists an oracle A such that BPTIME (n) A contains BPP A . Furthermore, Theorem 7.2 gives a tighter hierarchy for time and space. Corollary 7.3.
Reference: [10] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof-systems. </title> <journal> SIAM J. on Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <year> 1989. </year>
Reference-contexts: In 1985, Goldwasser, Micali and Rackoff <ref> [10] </ref> and Babai [1] introduced interactive proof systems, an extension of nondeterministic computation consisting of two players, an infinitely powerful prover and a probabilistic polynomial-time verifier. The prover will try to convince the verifier of the validity of some statement. <p> P and V form an interactive protocol for a language L if: 1. If x 2 L then Pr (P$V (x) accepts) 2 3 2. If x 62 L then for all P fl ; Pr (P fl $V (x) accepts) 1 3 Goldwasser, Micali and Rackoff <ref> [10] </ref> and Babai [1] require the verifier computes in probabilistic polynomial time and space. Lund, Fortnow, Karloff and Nisan [14] showed an interactive proof system for every language in the polynomial-time hierarchy.
Reference: [11] <author> S. Goldwasser and M. Sipser. </author> <title> Private coins versus public coins in interactive proof systems. </title> <editor> In S. Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <pages> pages 73-90. </pages> <publisher> JAI Press, </publisher> <year> 1989. </year>
Reference-contexts: However, the verifier does not trust the prover and will only accept if the prover manages to convince the verifier of the validity of the statement. There are some obvious similarities between alternating Turing machines and interactive proof systems. In fact, Goldwasser and Sipser <ref> [11] </ref> show the equivalence of interactive proof systems to a Turing machine alternating between nondeterministic and probabilistic moves. However, until recently computer scientists generally believed that alternating Turing machines had far more power than the interactive proof systems. <p> A public-coin interactive proof system allows the prover access to the verifier's coin. Equivalently, we require the verifier's messages to consist of exactly the verifier's coin tosses since the previous round. Goldwasser and Sipser <ref> [11] </ref> show the class of languages accepted by interactive proofs with a polynomial-time verifier does not depend on whether the verifier uses public or private coins. However, a difference between private and public coins does seem to hold for time and space bounded verifiers.
Reference: [12] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1979. </year>
Reference-contexts: Given Theorem 7.2 the proof is similar to the proof of similar results for NSPACE (s) by Ibarra [13] (see Theorem 12.12 in <ref> [12] </ref>). 2 8. Interactive Proof Systems for Deterministic Computation Corollaries 5.3 and 5.4 exhibit interactive proof systems with verifiers having low time-space complexity for P and NC. We can use Theorem 6.1 and Corollary 5.5 combined with the relationships in [4] described in Section 2 to prove more general relationships.
Reference: [13] <author> O. H. Ibarra. </author> <title> A note concerning nondeterministic tape complexities. </title> <journal> J. ACM, </journal> <volume> 19(4) </volume> <pages> 608-612, </pages> <year> 1972. </year>
Reference-contexts: Given Theorem 7.2 the proof is similar to the proof of similar results for NSPACE (s) by Ibarra <ref> [13] </ref> (see Theorem 12.12 in [12]). 2 8. Interactive Proof Systems for Deterministic Computation Corollaries 5.3 and 5.4 exhibit interactive proof systems with verifiers having low time-space complexity for P and NC.
Reference: [14] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <journal> J. of the ACM, </journal> <volume> 39(4) </volume> <pages> 859-868, </pages> <month> October </month> <year> 1992. </year> <title> Interactive Proofs 23 </title>
Reference-contexts: However, until recently computer scientists generally believed that alternating Turing machines had far more power than the interactive proof systems. A series of results by Lund, Fortnow, Karloff and Nisan <ref> [14] </ref> and Shamir [17] show that the set of languages accepted by an interactive proof system equals the class of languages accepted in deterministic polynomial space. <p> Since Chandra, Kozen and Stockmeyer [4] have shown PSPACE equivalent to the languages accepted by a polynomial-time alternating Turing machine, in this case alternating Turing machine and interactive proof systems have identical power. We generalize the work of <ref> [14, 17] </ref> to show a broader equivalence between alternating Turing machines and interactive proof systems. We look at time-space complexity, first studied for alternating Turing machines by Ruzzo [16] and for interactive proof systems by Condon [5]. <p> If x 62 L then for all P fl ; Pr (P fl $V (x) accepts) 1 3 Goldwasser, Micali and Rackoff [10] and Babai [1] require the verifier computes in probabilistic polynomial time and space. Lund, Fortnow, Karloff and Nisan <ref> [14] </ref> showed an interactive proof system for every language in the polynomial-time hierarchy. Using their techniques, Shamir [17] showed that the set of languages accepted by these interactive proof systems coincides with the class of languages decidable in deterministic polynomial space. <p> Arithmetization of Alternating Computation The proof of our main result extends the algebraic techniques, which was used in the recent results on the power of interactive proof systems <ref> [14, 17] </ref>. Let L 2 ATISP (t; s) and let M be a restricted ATM such that L (M ) = L. We will assume without loss of generality that M works in time t (n) and uses s (n) space. <p> The verifier can simplify the arithmetic expression A N (I 0 ; x) by the technique of Lund-Fortnow-Karloff-Nisan <ref> [14] </ref>. The verifier will be working over the Interactive Proofs 15 finite field F p with p elements.
Reference: [15] <author> W. J. Paul, E. J. Prau, and R. Reischuk. </author> <title> On alternation. </title> <journal> Acta Informat-ica, </journal> <volume> 14 </volume> <pages> 243-255, </pages> <year> 1980. </year>
Reference-contexts: First we will restrict the number of tapes to one and we prove that this does not decrease the computational power. Paul, Prauss and Reischuk in <ref> [15] </ref> proved such a theorem for ATIME (t). 6 Fortnow & Lund Theorem 3.1. (Paul, Prauss and Reischuk [15].) Let L be a language in ATIME (t (n)). <p> First we will restrict the number of tapes to one and we prove that this does not decrease the computational power. Paul, Prauss and Reischuk in <ref> [15] </ref> proved such a theorem for ATIME (t). 6 Fortnow & Lund Theorem 3.1. (Paul, Prauss and Reischuk [15].) Let L be a language in ATIME (t (n)). There exists a 1-tape alternating turing machine M such that M works in time O (t (n)) and L (M ) = L. We need to extend their result to ATISP (t; s).
Reference: [16] <author> W. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 22 </volume> <pages> 365-381, </pages> <year> 1981. </year>
Reference-contexts: We generalize the work of [14, 17] to show a broader equivalence between alternating Turing machines and interactive proof systems. We look at time-space complexity, first studied for alternating Turing machines by Ruzzo <ref> [16] </ref> and for interactive proof systems by Condon [5]. We show a general relationship between time and space bounded alternating Turing machines and time and space bounded verifiers. <p> The previous best known result by Fortnow and Sipser [7] shows LOGCFL has a public-coin interactive proof system with a polynomial-time log-space verifier. LOGCFL consists of all languages log-space reducible to context-free languages and is known to lie in NC 2 <ref> [19, 20, 16] </ref>. Interactive Proofs 3 We also use these theorems to get strong relationships between interactive proof systems and deterministic computation similar to the relationships between alternating Turing machine and deterministic computation found in [4]. <p> For IPSPACE (s (n)) we restrict the interactive proofs systems to having finite computation paths. If an alternating Turing machine or a verifier ever enters the same configuration twice then it will have an infinite computation path. Thus we may always assume s (n) = (log t (n)). Ruzzo <ref> [16] </ref> first studied time and space bounded alternating Turing machine complexity showing ATISP (log k n; log n) = NC k for all k &gt; 1 where NC k is the set of languages accepted by a log-space uniform circuit family of polynomial size and log k n depth. <p> They show LOGCFL BPNL P where LOGCFL NC 2 is the class of languages log-space reducible to context-free languages [19, 20]. 3. Restricted Alternating Turing Machines We will use the "random access input" model for an alternating Turing machine (ATM) similar to the one described by Ruzzo <ref> [16] </ref>. This will allow us to study ATMs which use sublinear time. In our model, the alternating machine M has two special states, q 0 and q 1 . <p> Every language in NC = S k NC k has a public-coin interac tive proof system with a verifier using O (log (n)) space and O (n log 2 n) time. Proof. Ruzzo <ref> [16] </ref> shows that any language in NC can be accepted by an alternating Turing machine using poly-log time and log space. <p> So the value of the initial configuration can be calculated by a uniform (space O (s (n))) circuit of depth O (t (n) log t (n)). By a result by Ruzzo <ref> [16] </ref> an alternating Turing machine can evaluate each bit of the value of the initial configuration in time O (t (n) log t (n)) and space O (s (n)). 2 Condon [5] and Fortnow and Sipser [7] independently proved the following fact, which follows from Theorem 6.1.
Reference: [17] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <journal> J. of the ACM, </journal> <volume> 39(4) </volume> <pages> 869-877, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: However, until recently computer scientists generally believed that alternating Turing machines had far more power than the interactive proof systems. A series of results by Lund, Fortnow, Karloff and Nisan [14] and Shamir <ref> [17] </ref> show that the set of languages accepted by an interactive proof system equals the class of languages accepted in deterministic polynomial space. <p> Since Chandra, Kozen and Stockmeyer [4] have shown PSPACE equivalent to the languages accepted by a polynomial-time alternating Turing machine, in this case alternating Turing machine and interactive proof systems have identical power. We generalize the work of <ref> [14, 17] </ref> to show a broader equivalence between alternating Turing machines and interactive proof systems. We look at time-space complexity, first studied for alternating Turing machines by Ruzzo [16] and for interactive proof systems by Condon [5]. <p> Lund, Fortnow, Karloff and Nisan [14] showed an interactive proof system for every language in the polynomial-time hierarchy. Using their techniques, Shamir <ref> [17] </ref> showed that the set of languages accepted by these interactive proof systems coincides with the class of languages decidable in deterministic polynomial space. In this paper we will examine the complexity of interactive proof systems with verifiers having differing restrictions on time and space. <p> Arithmetization of Alternating Computation The proof of our main result extends the algebraic techniques, which was used in the recent results on the power of interactive proof systems <ref> [14, 17] </ref>. Let L 2 ATISP (t; s) and let M be a restricted ATM such that L (M ) = L. We will assume without loss of generality that M works in time t (n) and uses s (n) space. <p> If N = dt (n)=2e and I 0 is the ID describing the start configuration then clearly ' N (I 0 ; x) = 1 () M accepts x. We will extend the ideas by Shamir <ref> [17] </ref> and Babai-Fortnow [2] to arithme-tize ' N (I 0 ; x). The technique is polynomial extrapolation of truth values. We will given a Boolean ' expression construct an arithmetic expression A ' .
Reference: [18] <author> R. Solovay and V. Strassen. </author> <title> A fast Monte-Carlo test for primality. </title> <journal> SIAM J. of Computing, </journal> <volume> 6 </volume> <pages> 84-85, </pages> <year> 1977. </year> <note> See also erratum 7:118, </note> <year> 1978. </year>
Reference-contexts: The verifier thereafter tests that the number the prover sent is indeed a prime using the primality test of Solovay-Strassen <ref> [18] </ref>, such that the verifier will catch the prover with probability at least 1=6 if the prover tries to cheat in this initial stage of the protocol. The verifier can simplify the arithmetic expression A N (I 0 ; x) by the technique of Lund-Fortnow-Karloff-Nisan [14].
Reference: [19] <author> I. Sudborough. </author> <title> Time and tape bounded auxiliary pushdown automata. </title> <booktitle> Mathematical Foundations of Computer Science, </booktitle> <pages> pages 493-503, </pages> <year> 1977. </year>
Reference-contexts: The previous best known result by Fortnow and Sipser [7] shows LOGCFL has a public-coin interactive proof system with a polynomial-time log-space verifier. LOGCFL consists of all languages log-space reducible to context-free languages and is known to lie in NC 2 <ref> [19, 20, 16] </ref>. Interactive Proofs 3 We also use these theorems to get strong relationships between interactive proof systems and deterministic computation similar to the relationships between alternating Turing machine and deterministic computation found in [4]. <p> They show LOGCFL BPNL P where LOGCFL NC 2 is the class of languages log-space reducible to context-free languages <ref> [19, 20] </ref>. 3. Restricted Alternating Turing Machines We will use the "random access input" model for an alternating Turing machine (ATM) similar to the one described by Ruzzo [16]. This will allow us to study ATMs which use sublinear time.
Reference: [20] <author> I. Sudborough. </author> <title> On the tape complexity of deterministic context free languages. </title> <journal> J. of the ACM, </journal> <volume> 25(3) </volume> <pages> 405-414, </pages> <year> 1978. </year>
Reference-contexts: The previous best known result by Fortnow and Sipser [7] shows LOGCFL has a public-coin interactive proof system with a polynomial-time log-space verifier. LOGCFL consists of all languages log-space reducible to context-free languages and is known to lie in NC 2 <ref> [19, 20, 16] </ref>. Interactive Proofs 3 We also use these theorems to get strong relationships between interactive proof systems and deterministic computation similar to the relationships between alternating Turing machine and deterministic computation found in [4]. <p> They show LOGCFL BPNL P where LOGCFL NC 2 is the class of languages log-space reducible to context-free languages <ref> [19, 20] </ref>. 3. Restricted Alternating Turing Machines We will use the "random access input" model for an alternating Turing machine (ATM) similar to the one described by Ruzzo [16]. This will allow us to study ATMs which use sublinear time.
References-found: 20

