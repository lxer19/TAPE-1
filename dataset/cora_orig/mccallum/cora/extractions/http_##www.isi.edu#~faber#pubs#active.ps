URL: http://www.isi.edu/~faber/pubs/active.ps
Refering-URL: http://www.isi.edu/~faber/
Root-URL: http://www.isi.edu
Email: faber@isi.edu  
Phone: Phone: 310-821-1511 x190 FAX: 310-823-6714  
Title: ACC: Using Active Networking to Enhance Feedback Congestion Control Mechanisms  
Author: Theodore Faber 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: University of Southern California/Information Sciences Institute  
Abstract: Active Congestion Control (ACC) uses Active Networking (AN) technology to make feedback congestion control more responsive to network congestion. Current end-to-end feedback congestion control systems detect and relieve congestion only at endpoints. ACC includes programs in each data packet that tell routers how to react to congestion without incurring the round trip delay that reduces feedback's effectiveness in wide area networks. The congested router also sends the new state of the congestion control algorithm to the endpoints to ensure that the distributed state becomes consistent. We present a model for extending feedback congestion control into an Active Network, apply that model to TCP congestion control, and present simulations that show that the resulting system exhibits up to 18% better throughput than TCP under bursty traffic. In simulations without bursty traffic, the systems behaved comparably. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J-C Bolot and A. Shankar, </author> <title> Dynamical Behavior of Rate Based Flow Control Systems, </title> <journal> Computer Communications Review, </journal> <volume> vol. 20, no. 2, </volume> <booktitle> ACM SIGCOMM (Apr. </booktitle> <year> 1990). </year>
Reference-contexts: Bolot and Shankar have shown that under feedback-based congestion control, the duration of congestion at the bottleneck of a connection is directly related to the bandwidth-delay product <ref> [1] </ref>. High Speed Networks are an example of a class of networks with a large bandwidth-delay product. Active Networking, the idea of reprogramming routers with data packets [2], offers an opportunity to address this shortcoming of feedback control.
Reference: 2. <author> David L. Tennenhouse and David J. Wetherall, </author> <title> Tow ards an Active Network Architecture, </title> <journal> Computer Communication Review, </journal> <volume> vol. 26, no. 2, </volume> <pages> pp. 5-18, </pages> <note> ACM SIGCOMM (April 1996). </note>
Reference-contexts: High Speed Networks are an example of a class of networks with a large bandwidth-delay product. Active Networking, the idea of reprogramming routers with data packets <ref> [2] </ref>, offers an opportunity to address this shortcoming of feedback control. AN has been proposed to proposed address many network problems, for example, to configure networks dynamically [3], or to perform application-specific tasks in the network [2]. <p> Active Networking, the idea of reprogramming routers with data packets <ref> [2] </ref>, offers an opportunity to address this shortcoming of feedback control. AN has been proposed to proposed address many network problems, for example, to configure networks dynamically [3], or to perform application-specific tasks in the network [2]. Work by Bhattachar-jee et al. has applied AN ideas to non-feedback ATM congestion control [4]. ACC applies those ideas to feedback congestion control. ACC moves the endpoint congestion control algorithms into the network where they can immediately react to congestion.
Reference: 3. <author> Y. Yemini and S. de Silva, </author> <title> Tow ards Programmable Networks, </title> <booktitle> IFIP/IEEE International Workshop on Distributed Systems Operations and Management, </booktitle> <address> L'Aquila, </address> <note> Italy (October 1996), available electronically from http://www.cs.columbia.edu/~dasilva/content/netscript/. </note>
Reference-contexts: Active Networking, the idea of reprogramming routers with data packets [2], offers an opportunity to address this shortcoming of feedback control. AN has been proposed to proposed address many network problems, for example, to configure networks dynamically <ref> [3] </ref>, or to perform application-specific tasks in the network [2]. Work by Bhattachar-jee et al. has applied AN ideas to non-feedback ATM congestion control [4]. ACC applies those ideas to feedback congestion control. ACC moves the endpoint congestion control algorithms into the network where they can immediately react to congestion.
Reference: 4. <author> Samrat Bhattacharjee, Ken Calvert, and Ellen Zegura, </author> <title> On Active Networking and Congestion, </title> <type> Technical Report GIT-CC-96-02, </type> <institution> College of Computing, Georgia Tech, </institution> <address> Atlanta, GA (1996). </address>
Reference-contexts: AN has been proposed to proposed address many network problems, for example, to configure networks dynamically [3], or to perform application-specific tasks in the network [2]. Work by Bhattachar-jee et al. has applied AN ideas to non-feedback ATM congestion control <ref> [4] </ref>. ACC applies those ideas to feedback congestion control. ACC moves the endpoint congestion control algorithms into the network where they can immediately react to congestion. The current state of the endpoint's feedback algorithm is included in every packet.
Reference: 5. <author> Van Jacobson, </author> <title> Congestion Avoidance and Control, </title> <booktitle> Proc. SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <pages> pp. 314-329, </pages> <publisher> ACM SIGCOMM, Stamford, </publisher> <address> CA (Aug 16-19 1988), </address> <note> available electronically from ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z. </note>
Reference-contexts: ACC for TCP As a test of the ACC principles outlined above, we hav e defined an active congestion control based on TCP. TCP contains a classic, well-understood feedback control system: the congestion avoidance mechanisms defined by Jacobson <ref> [5] </ref>. Endpoint sending rate is controlled by a sliding window which is advanced by packet acknowledgments. The size of the window is modulated in response to congestion along the connection's path. The window modulation algorithm in TCP is a classic linear increase/multiplicative decrease algorithm. <p> This is due to synchronization effects in the network caused by simultaneous losses from several endpoints. As the endpoints execute the Slow-Start algorithm <ref> [5] </ref>, they are sending more packets back to back. These back to back packets are more likely to be lost, which perpetuates the cycle. The result is that some endpoints experience very few losses, and some experience many. Similar bimodal distributions observed in TCP simulation with DropTail queues [11].
Reference: 6. <author> Sally Floyd, </author> <title> TCP and Explicit Congestion Notification, </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 10-23, </pages> <note> ACM (October 1994), available electronically from ftp://ftp.ee.lbl.gov/papers/tcp_ecn.4.ps.gz. </note>
Reference: 7. <author> Van Jacobson, </author> <title> Berkeley TCP Evolution from 4.3-Tahoe to 4.3-Reno, </title> <booktitle> Proceedings of the Eighteenth Internet Engineering Task Force, </booktitle> <pages> pp. 363-366, </pages> <institution> University of British Columbia, </institution> <address> Vancouver (Septem-ber 1990). -13- </address>
Reference-contexts: This is in contrast to TCP with Explicit Congestion Notification (ECN)[6], which uses routers to notify endpoints of congestion, but applies the corrective action from the endpoint. Thus ACC will react more quickly to congestion than TCP with ECN. -6- TCP Reno <ref> [7] </ref> and TCP Veg as [8] are examples of variations on TCP congestion control that we do not implement here; there are others. They differ from the basic Jacobson TCP algorithm that we study by using different congestion detection mechanisms.
Reference: 8. <author> Lawrence S. Brakmo, Sean W. O'Malley, and L. Peterson, </author> <title> TCP Veg as: New techniques for congestion detection and avoidance, </title> <booktitle> Proceedings of ACM SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <pages> pp. 24-35, </pages> <publisher> ACM, </publisher> <address> London, </address> <note> UK (August 1994), available electronically from ftp://cs.arizona.edu/xkernel/Papers/vegas.ps. </note>
Reference-contexts: This is in contrast to TCP with Explicit Congestion Notification (ECN)[6], which uses routers to notify endpoints of congestion, but applies the corrective action from the endpoint. Thus ACC will react more quickly to congestion than TCP with ECN. -6- TCP Reno [7] and TCP Veg as <ref> [8] </ref> are examples of variations on TCP congestion control that we do not implement here; there are others. They differ from the basic Jacobson TCP algorithm that we study by using different congestion detection mechanisms.
Reference: 9. <author> Steve McCanne, Sally Floyd, and Kevin Fall, </author> <title> UCB/LBL Network Simulator NS (1996,), </title> <note> available electronically from http://www-mash.cs.berkeley.edu/ns/ns.html. </note>
Reference-contexts: The bandwidth-delay product was varied by increasing the delay on an uncongested link. All simulations were made using ns, a simulator produced by the University of Cali-fornia Berkeley, the Lawrence Berkeley National Labs, and the Virtual InterNet Testbed (VINT) project <ref> [9] </ref>. The simulator was extended to implement the ACC algorithms in the routers and endpoints, but not to allow full AN programmability. The modified simulator does not compile or interpret code from simulated packets.
Reference: 10. <author> Sally Floyd and Van Jacobson, </author> <title> Random Early Detection gateways for Congestion Avoidance, </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, no. 4, </volume> <pages> pp. </pages> <month> 397-413 (August </month> <year> 1993), </year> <note> available electronically from ftp://ftp.lbl.gov/papers/early.ps.gz. </note>
Reference-contexts: A DropTail router drops the last packet it receives when its buffer is full, like a glass overowing; A RED router picks a random packet to discard <ref> [10] </ref>. A RED router also discards packets before it queue is full. The probability that an arriving packet causes a discard is proportional to the amount that the router's current queue length exceeds a -7- configured minimum. <p> The losses to synchronized throughput offset gains in unsynchronized throughput keeping the av erage nearly constant. The distribution is still bimodal. The Random Early Detection (RED) system reduces this unfairness by dropping random packets before the queue becomes full <ref> [10] </ref>. This reduces the correlation between burstiness and packet loss, and therefore between slow-starting and packet loss. RED also provides feedback before router buffers overrun. ACC works transparently across RED gateways, which greatly reduces this intrinsic unfairness.
Reference: 11. <author> S. Floyd and Van Jacobson, </author> <title> Traffic Phase Effects in Packet Switched Gateways, </title> <journal> Computer Communications Review, </journal> <volume> vol. 21, no. 2, </volume> <pages> pp. 26-42, </pages> <booktitle> ACM SIGCOMM (Apr. </booktitle> <year> 1991). </year>
Reference-contexts: These back to back packets are more likely to be lost, which perpetuates the cycle. The result is that some endpoints experience very few losses, and some experience many. Similar bimodal distributions observed in TCP simulation with DropTail queues <ref> [11] </ref>. The bimodal distribution of throughputs reects the presence of two groups of endpoints, synchronized and unsynchronized. Endpoints become synchronized by simultaneous packet loss, which results in simultaneous retransmission. These endpoints enter the Slow Start phase of TCP congestion avoidance, in which two packets being sent for ev ery acknowledgment.
Reference: 12. <author> T. Faber, L. Landweber, and A. Mukherjee, </author> <title> Dynamic Time Windows: Packet Admission Control with Feedback, </title> <booktitle> Proc. ACM Symposium on Communications Architectures and Protocols, </booktitle> <pages> pp. 124-135, </pages> <publisher> ACM, </publisher> <address> Baltimore, MD (August 17-20, </address> <year> 1992). </year>
Reference-contexts: This work is preliminary in the sense that it has only shown the benefits of augmenting an existing feedback system. We intend to adapt other feedback congestion controls to the ACC model, such as Dynamic Time Windows <ref> [12] </ref> and more complicated TCP variants like Veg as. These different systems will allow us to evaluate how ACC performs relative to other congestion control methods.
References-found: 12

