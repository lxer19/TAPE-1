URL: ftp://ftp.cse.ucsc.edu/pub/reinas/papers/ifs_fractal_int.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/slvg/ifs.html
Root-URL: http://www.cse.ucsc.edu
Title: IFS Fractal Interpolation for 2D and 3D Visualization  
Author: Craig M. Wittenbrink 
Keyword: Key Words and Phrases: uncertainty visualization, volume rendering, surface interpolation, collages.  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Abstract: Reconstruction is used frequently in visualization of one, two, and three-dimensional data. Data uncertainty is typically ignored, and a deficiency of many interpolation schemes is smoothing which may indicate features or characteristics of the data that are not there. In this paper I investigate the use of iterated function systems (IFS's) for interpolation. I show new derivations for fractal interpolation in two and three-dimensional scalar data, and new point and polytope rendering algorithms with tremendous speed advantages over ray tracing. The interpolations may be used to give an indication of the uncertainty of the data, statistically represent the data at a variety of scales, allow tunability from the data, and may allow more accurate data analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. F. </author> <title> Barnsley. Fractals Everywhere. </title> <publisher> Acad. Press, </publisher> <year> 1988. </year>
Reference-contexts: In essence the reconstruction can be controlled by the uncertainty data allowing additional data to be incorporated. lation. fractal interpolant interpolating several points. Fractals have been applied to modelling [2, 5] and to analysis. There have been two main approaches in analysis: fractional Brownian motion (fBm) and IFS's <ref> [1, 10] </ref>. Self similar or fractal functions have been used to represent digital elevation maps, time series data [9], seepage in settling tanks, radar returns, and atmospheric turbulence. <p> Self similar or fractal functions have been used to represent digital elevation maps, time series data [9], seepage in settling tanks, radar returns, and atmospheric turbulence. The majority of this work has been for one-dimensional functions (IFS's) <ref> [1, 14] </ref>, for two dimensional height surfaces (fBm), and for fractal interpolation of images [12, 17]. I recently discovered IFS research similar to my own. Massopust [8] has investigated two-dimensional fractal interpolation and continuity conditions. <p> By constraining a function to the data points, insuring that the set of affine maps that define the IFS are contractive and tile the domain, a deterministic fractal function results. Barns-ley demonstrates IFS fractal interpolation with one dimensional functions <ref> [1] </ref>, and also shows how to provide more free parameters, several ways to render them, and gives hints that further special conditions may be imposed. The one-dimensional function fractal inter-polant with one free parameter per affine map has been widely used [1, 8, 9, 14, 17]. <p> The one-dimensional function fractal inter-polant with one free parameter per affine map has been widely used <ref> [1, 8, 9, 14, 17] </ref>. An affine transformation is defined as a transformation which preserves ratios of distances, and parallel lines remain parallel. Affine transformations are the basis for much of computer graphics. I show here a two dimensional homogeneous coordinate transformation, T . <p> T = 6 4 a 21 a 22 t y 3 7 The a's perform shears and scales, and the t's perform translations. Now, a two dimensional affine transformation may be applied to two dimensional points. I denote a two-dimensional point by p = <ref> [x; y; 1] </ref> T , and a three-dimensional point by p = [x; y; z; 1] T . To apply the transformation simply post multiply the matrix by the point , p 0 = T p. <p> Now, a two dimensional affine transformation may be applied to two dimensional points. I denote a two-dimensional point by p = [x; y; 1] T , and a three-dimensional point by p = <ref> [x; y; z; 1] </ref> T . To apply the transformation simply post multiply the matrix by the point , p 0 = T p. Define y as the function value and x as the domain of the function, y = f (x). <p> To apply the transformation simply post multiply the matrix by the point , p 0 = T p. Define y as the function value and x as the domain of the function, y = f (x). An IFS is defined <ref> [1] </ref> as a complete metric space (X; d), (we can find well defined distances between points), and a finite set of contraction mappings, T n : R 2 ! R 2 with respective contractivity factors s n , for n = 0; 1; :::; N 1. <p> The points to be interpolated are transformed to other points to be interpolated, and the contractivity is insured by appropriate choice of free parameters. With a 12 = 0 and choosing a 22 as the free, "scaling" parameter, the classic fractal interpolation results <ref> [1, 17] </ref>. As an example, look at the fractal interpolation in Figure 1, where a 22 is :23, 0:3, and :31 for intervals T 0 , T 1 , and T 2 . Setting a 22 = 0 gives a linear interpolant. <p> For many applications, in one-dimensional interpolation, users have attempted to tie the free parameters to some statistical aspect of the data. One approach is to set the scaling parameter, a 22 for one-dimensional IFS interpolants, by using the fractal dimension of the sample points <ref> [1] </ref>. Because the fractal interpolant is self similar the fractal dimension of the input points, can help choose the scaling parameter. Even with a fixed fractal dimension there can be a large variability in the scaling parameters chosen. <p> The space in which the fractal lives may be discretized, and a discrete IFS computed <ref> [1] </ref>; the space can be ray traced by approaching the fractal with incremental sample points along view rays [6, 7], ray traced in a reduced complexity two-dimensional algorithm [10]; ray traced by crawling around the fractal [11]; or geometric primitives can be created from the IFS. <p> I have been rendering IFS using the latter approach. I build up the IFS and give the result to the graphics hardware (currently using Iris GL). Initially I experimented with rendering using only points, using a random IFS algorithm <ref> [1] </ref>. For surfaces and volumes this at least gives a quick method for testing if the IFS converges, and with animation/spinning of the data, one can visualize the three-dimensional nature of the data. <p> For example, a 0 dimensional polytope is a point, a 1 dimensional polytope is a line, and a two dimensional polytope is a planar polygon. The deterministic approach to using points is also well presented in <ref> [1] </ref>, where the deterministic algorithm takes a discrete set of pixels, and then iterates on them until they converge towards the IFS. I could take the same approach for the higher dimensional rendering, but the difficulty is in storing and rendering the resulting multi-dimensional array.
Reference: [2] <editor> M. F. Barnsley et al. </editor> <title> Harnassing chaos for image synthesis. </title> <booktitle> In Proc. SIGGRAPH, </booktitle> <pages> pages 131-140, </pages> <address> Atlanta, GA, </address> <month> Aug </month> <year> 1988. </year> <note> ACM. </note>
Reference-contexts: A choice of interpolant allows one more method of overloading. In essence the reconstruction can be controlled by the uncertainty data allowing additional data to be incorporated. lation. fractal interpolant interpolating several points. Fractals have been applied to modelling <ref> [2, 5] </ref> and to analysis. There have been two main approaches in analysis: fractional Brownian motion (fBm) and IFS's [1, 10]. Self similar or fractal functions have been used to represent digital elevation maps, time series data [9], seepage in settling tanks, radar returns, and atmospheric turbulence.
Reference: [3] <author> C. C. Barton and P. R. L. Pointe, </author> <title> editors. </title> <booktitle> Fractals in the Earth Sciences. </booktitle> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: The choice of the scale parameter from the data remains to be done, and is application dependent. In geology, for example, there are numerous methods for computing the fractal dimension <ref> [3] </ref> which could be used to choose the free parameters. Other approaches are to select both the interpolation points and the free parameters to fit the data in some fashion [14].
Reference: [4] <author> M. A. Berger. </author> <title> IFS algorithms for wavelet transforms, curves and surfaces, and image compression. </title> <editor> In P. Barone et al., editors, </editor> <title> Stochastic Models, </title> <booktitle> Statistical Methods and Algorithms in Image Analysis, </booktitle> <pages> pages 89-100. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1992. </year>
Reference-contexts: I recently discovered IFS research similar to my own. Massopust [8] has investigated two-dimensional fractal interpolation and continuity conditions. Tong et al. [15] developed a system of equations to interpolate a two-dimensional function, and a recursive algorithm similar to the iterative one I present. Berger <ref> [4] </ref> developed a triangular collage of a regular grid for images and surface extrapolation. I present fractal interpolation functions using IFS's for two and three dimensions. I also apply these solutions to some illustrative examples. <p> I have therefore used triangulations, which fit naturally using three points, and do not require least squares fitting as is done with IFS fractal image compression algorithms <ref> [4, 17] </ref>. A direct solutions of the linear system is described below.
Reference: [5] <editor> S. Demko et al. </editor> <title> Construction of fractal objects with iterated function systems. </title> <booktitle> In Proc. SIGGRAPH, </booktitle> <pages> pages 271-278, </pages> <address> San Francisco, CA, </address> <month> July </month> <year> 1985. </year> <title> ACM. dering, iteration 1. dering, iteration 2. dering, iteration 2. dering, top view, iteration 1. dering, top view, iteration 2. rendering, top view, iteration 2. </title>
Reference-contexts: A choice of interpolant allows one more method of overloading. In essence the reconstruction can be controlled by the uncertainty data allowing additional data to be incorporated. lation. fractal interpolant interpolating several points. Fractals have been applied to modelling <ref> [2, 5] </ref> and to analysis. There have been two main approaches in analysis: fractional Brownian motion (fBm) and IFS's [1, 10]. Self similar or fractal functions have been used to represent digital elevation maps, time series data [9], seepage in settling tanks, radar returns, and atmospheric turbulence.
Reference: [6] <author> J. C. Hart and T. DeFanti. </author> <title> Efficient antialiased rendering of 3-d linear fractals. </title> <booktitle> In Proc. SIGGRAPH, </booktitle> <pages> pages 91-100, </pages> <address> Las Vegas, NV, </address> <month> July </month> <year> 1991. </year> <note> ACM. </note>
Reference-contexts: The space in which the fractal lives may be discretized, and a discrete IFS computed [1]; the space can be ray traced by approaching the fractal with incremental sample points along view rays <ref> [6, 7] </ref>, ray traced in a reduced complexity two-dimensional algorithm [10]; ray traced by crawling around the fractal [11]; or geometric primitives can be created from the IFS. I have been rendering IFS using the latter approach.
Reference: [7] <author> J. C. Hart et al. </author> <title> Ray tracing deterministic 3-D fractals. </title> <booktitle> In Proc. SIGGRAPH, </booktitle> <pages> pages 289-296, </pages> <address> Chicago, IL, </address> <month> July </month> <year> 1989. </year> <note> ACM. </note>
Reference-contexts: The space in which the fractal lives may be discretized, and a discrete IFS computed [1]; the space can be ray traced by approaching the fractal with incremental sample points along view rays <ref> [6, 7] </ref>, ray traced in a reduced complexity two-dimensional algorithm [10]; ray traced by crawling around the fractal [11]; or geometric primitives can be created from the IFS. I have been rendering IFS using the latter approach.
Reference: [8] <author> P. R. Massopust. </author> <title> Fractal Functions, Fractal Surfaces, and Wavelets. </title> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: The majority of this work has been for one-dimensional functions (IFS's) [1, 14], for two dimensional height surfaces (fBm), and for fractal interpolation of images [12, 17]. I recently discovered IFS research similar to my own. Massopust <ref> [8] </ref> has investigated two-dimensional fractal interpolation and continuity conditions. Tong et al. [15] developed a system of equations to interpolate a two-dimensional function, and a recursive algorithm similar to the iterative one I present. Berger [4] developed a triangular collage of a regular grid for images and surface extrapolation. <p> The one-dimensional function fractal inter-polant with one free parameter per affine map has been widely used <ref> [1, 8, 9, 14, 17] </ref>. An affine transformation is defined as a transformation which preserves ratios of distances, and parallel lines remain parallel. Affine transformations are the basis for much of computer graphics. I show here a two dimensional homogeneous coordinate transformation, T .
Reference: [9] <author> D. S. Mazel and M. H. H. III. </author> <title> Fractal modeling of time-series data. </title> <booktitle> In Asilomar Conference on Sig., Sys., & Comp., </booktitle> <pages> pages 182-186, </pages> <address> Pacific Grove, CA, Oct. 1989. </address> <publisher> IEEE, Maple Press. </publisher>
Reference-contexts: Fractals have been applied to modelling [2, 5] and to analysis. There have been two main approaches in analysis: fractional Brownian motion (fBm) and IFS's [1, 10]. Self similar or fractal functions have been used to represent digital elevation maps, time series data <ref> [9] </ref>, seepage in settling tanks, radar returns, and atmospheric turbulence. The majority of this work has been for one-dimensional functions (IFS's) [1, 14], for two dimensional height surfaces (fBm), and for fractal interpolation of images [12, 17]. I recently discovered IFS research similar to my own. <p> The one-dimensional function fractal inter-polant with one free parameter per affine map has been widely used <ref> [1, 8, 9, 14, 17] </ref>. An affine transformation is defined as a transformation which preserves ratios of distances, and parallel lines remain parallel. Affine transformations are the basis for much of computer graphics. I show here a two dimensional homogeneous coordinate transformation, T .
Reference: [10] <author> G. S. P. Miller. </author> <title> The definition and rendering of terrain maps. </title> <booktitle> In Proc. SIGGRAPH, </booktitle> <pages> pages 39-48, </pages> <address> Dallas, TX, </address> <month> Aug </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: In essence the reconstruction can be controlled by the uncertainty data allowing additional data to be incorporated. lation. fractal interpolant interpolating several points. Fractals have been applied to modelling [2, 5] and to analysis. There have been two main approaches in analysis: fractional Brownian motion (fBm) and IFS's <ref> [1, 10] </ref>. Self similar or fractal functions have been used to represent digital elevation maps, time series data [9], seepage in settling tanks, radar returns, and atmospheric turbulence. <p> The space in which the fractal lives may be discretized, and a discrete IFS computed [1]; the space can be ray traced by approaching the fractal with incremental sample points along view rays [6, 7], ray traced in a reduced complexity two-dimensional algorithm <ref> [10] </ref>; ray traced by crawling around the fractal [11]; or geometric primitives can be created from the IFS. I have been rendering IFS using the latter approach. I build up the IFS and give the result to the graphics hardware (currently using Iris GL).
Reference: [11] <author> A. Norton. </author> <title> Generation and display of geometric fractals in 3-d. </title> <booktitle> In Proc. SIGGRAPH, </booktitle> <pages> pages 61-67. </pages> <publisher> ACM, </publisher> <month> July </month> <year> 1982. </year>
Reference-contexts: space in which the fractal lives may be discretized, and a discrete IFS computed [1]; the space can be ray traced by approaching the fractal with incremental sample points along view rays [6, 7], ray traced in a reduced complexity two-dimensional algorithm [10]; ray traced by crawling around the fractal <ref> [11] </ref>; or geometric primitives can be created from the IFS. I have been rendering IFS using the latter approach. I build up the IFS and give the result to the graphics hardware (currently using Iris GL). Initially I experimented with rendering using only points, using a random IFS algorithm [1].
Reference: [12] <author> D. Saupe and R. Hamzaoui. </author> <title> A review of the fractal image compression literature. </title> <journal> Computer Graphics, </journal> <volume> 28(4) </volume> <pages> 268-279, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: The majority of this work has been for one-dimensional functions (IFS's) [1, 14], for two dimensional height surfaces (fBm), and for fractal interpolation of images <ref> [12, 17] </ref>. I recently discovered IFS research similar to my own. Massopust [8] has investigated two-dimensional fractal interpolation and continuity conditions. Tong et al. [15] developed a system of equations to interpolate a two-dimensional function, and a recursive algorithm similar to the iterative one I present.
Reference: [13] <author> P. Shirley and A. Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <booktitle> In 1990 Workshop on Volume Visualization, </booktitle> <pages> pages 63-70, </pages> <address> San Diego, CA, </address> <month> Dec </month> <year> 1990. </year>
Reference-contexts: In three dimensions, the same approach can be applied, and while I have not attempted it I believe that the volume rendering approach of Shirley and Tuch-man <ref> [13] </ref>, could directly take the tetrahedra that result from the deterministic algorithm. The same algorithm is used, only the polytopes stored in the lists are tetrahedrons instead of triangles.
Reference: [14] <author> W. C. Strahle. </author> <title> Turbulent combustion data analysis using fractals. </title> <journal> AIAA Journal, </journal> <volume> 29(3) </volume> <pages> 409-417, </pages> <year> 1991. </year>
Reference-contexts: Self similar or fractal functions have been used to represent digital elevation maps, time series data [9], seepage in settling tanks, radar returns, and atmospheric turbulence. The majority of this work has been for one-dimensional functions (IFS's) <ref> [1, 14] </ref>, for two dimensional height surfaces (fBm), and for fractal interpolation of images [12, 17]. I recently discovered IFS research similar to my own. Massopust [8] has investigated two-dimensional fractal interpolation and continuity conditions. <p> The one-dimensional function fractal inter-polant with one free parameter per affine map has been widely used <ref> [1, 8, 9, 14, 17] </ref>. An affine transformation is defined as a transformation which preserves ratios of distances, and parallel lines remain parallel. Affine transformations are the basis for much of computer graphics. I show here a two dimensional homogeneous coordinate transformation, T . <p> In geology, for example, there are numerous methods for computing the fractal dimension [3] which could be used to choose the free parameters. Other approaches are to select both the interpolation points and the free parameters to fit the data in some fashion <ref> [14] </ref>. These issues have been examined somewhat for the one-dimensional in terpolants, and further work needs to be done for the higher dimensional interpolants. 4 Rendering IFS Fractal Interpolants Rendering of fractals involves computing a lighting simulation of how light may interact with the fractal.
Reference: [15] <author> H. Tong et al. </author> <title> Natural mountain simulation based on 3-D IFS. </title> <booktitle> In Proc. of the Third Int. Conf. on CAD and Comp. Graph., </booktitle> <pages> pages 101-105. </pages> <institution> Chinese Comput. Fed., Int. Acad. Publishers, </institution> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: The majority of this work has been for one-dimensional functions (IFS's) [1, 14], for two dimensional height surfaces (fBm), and for fractal interpolation of images [12, 17]. I recently discovered IFS research similar to my own. Massopust [8] has investigated two-dimensional fractal interpolation and continuity conditions. Tong et al. <ref> [15] </ref> developed a system of equations to interpolate a two-dimensional function, and a recursive algorithm similar to the iterative one I present. Berger [4] developed a triangular collage of a regular grid for images and surface extrapolation. I present fractal interpolation functions using IFS's for two and three dimensions.
Reference: [16] <author> S. Uselton et al. </author> <title> Panel: Validation, verification, and evaluation. </title> <booktitle> In Proceedings of Visualization 94, </booktitle> <pages> pages 414-418. </pages> <publisher> IEEE, </publisher> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: If linear interpolation (or cubic or polynomial, etc.) is used an 1 This project is supported by ONR grant N00014-92-J-1807 and NSF grant IRI-9423881 un-implied smoothness results. These shortcomings have been well noted in the visualization community <ref> [16] </ref>. We are actively investigating displaying uncertainty in visualizations [18, 19]. Uncertainty visualization is challenging, because of the difficulty in combining more variables into a graphic. One method of combining uncertainty is overloading- or tying a free parameter, such as color, to the uncertainty.
Reference: [17] <author> G. Vines. </author> <title> Signal Modeling with Iterated Function Systems. </title> <type> PhD thesis, </type> <institution> Georgia Inst. of Tech., </institution> <year> 1993. </year>
Reference-contexts: The majority of this work has been for one-dimensional functions (IFS's) [1, 14], for two dimensional height surfaces (fBm), and for fractal interpolation of images <ref> [12, 17] </ref>. I recently discovered IFS research similar to my own. Massopust [8] has investigated two-dimensional fractal interpolation and continuity conditions. Tong et al. [15] developed a system of equations to interpolate a two-dimensional function, and a recursive algorithm similar to the iterative one I present. <p> The one-dimensional function fractal inter-polant with one free parameter per affine map has been widely used <ref> [1, 8, 9, 14, 17] </ref>. An affine transformation is defined as a transformation which preserves ratios of distances, and parallel lines remain parallel. Affine transformations are the basis for much of computer graphics. I show here a two dimensional homogeneous coordinate transformation, T . <p> The points to be interpolated are transformed to other points to be interpolated, and the contractivity is insured by appropriate choice of free parameters. With a 12 = 0 and choosing a 22 as the free, "scaling" parameter, the classic fractal interpolation results <ref> [1, 17] </ref>. As an example, look at the fractal interpolation in Figure 1, where a 22 is :23, 0:3, and :31 for intervals T 0 , T 1 , and T 2 . Setting a 22 = 0 gives a linear interpolant. <p> I have therefore used triangulations, which fit naturally using three points, and do not require least squares fitting as is done with IFS fractal image compression algorithms <ref> [4, 17] </ref>. A direct solutions of the linear system is described below.
Reference: [18] <author> C. M. Wittenbrink et al. </author> <title> Glyphs for visualizing uncertainty in environmental vector fields. </title> <booktitle> In SPIE & IS&T Conf. Proc. on Elec. Imag.: Visual Data Exploration and Analysis, </booktitle> <pages> pages 87-100, </pages> <address> color plate 206, </address> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: If linear interpolation (or cubic or polynomial, etc.) is used an 1 This project is supported by ONR grant N00014-92-J-1807 and NSF grant IRI-9423881 un-implied smoothness results. These shortcomings have been well noted in the visualization community [16]. We are actively investigating displaying uncertainty in visualizations <ref> [18, 19] </ref>. Uncertainty visualization is challenging, because of the difficulty in combining more variables into a graphic. One method of combining uncertainty is overloading- or tying a free parameter, such as color, to the uncertainty. <p> Uncertainty visualization is challenging, because of the difficulty in combining more variables into a graphic. One method of combining uncertainty is overloading- or tying a free parameter, such as color, to the uncertainty. We have researched the use of glyphs for visualizing uncertainty in vector fields <ref> [18] </ref> and in surfaces and animations [19]. A choice of interpolant allows one more method of overloading. In essence the reconstruction can be controlled by the uncertainty data allowing additional data to be incorporated. lation. fractal interpolant interpolating several points.
Reference: [19] <author> C. M. Wittenbrink, A. T. Pang, and S. Lodha. </author> <title> Verity visualization: Visual mappings. </title> <type> Technical report, </type> <institution> Univ. of Cal. Santa Cruz, </institution> <year> 1995. </year> <title> a 33 = 0. a 33 = 0:3. a 33 = 0:6. polygon rendering a 33 = 0. polygon rendering a 33 = 0:3. polygon rendering a 33 = 0:6. IFS scale a 33 = 0:00. IFS scale a 33 = 0:01. IFS scale a 33 = 0:02. </title>
Reference-contexts: If linear interpolation (or cubic or polynomial, etc.) is used an 1 This project is supported by ONR grant N00014-92-J-1807 and NSF grant IRI-9423881 un-implied smoothness results. These shortcomings have been well noted in the visualization community [16]. We are actively investigating displaying uncertainty in visualizations <ref> [18, 19] </ref>. Uncertainty visualization is challenging, because of the difficulty in combining more variables into a graphic. One method of combining uncertainty is overloading- or tying a free parameter, such as color, to the uncertainty. <p> One method of combining uncertainty is overloading- or tying a free parameter, such as color, to the uncertainty. We have researched the use of glyphs for visualizing uncertainty in vector fields [18] and in surfaces and animations <ref> [19] </ref>. A choice of interpolant allows one more method of overloading. In essence the reconstruction can be controlled by the uncertainty data allowing additional data to be incorporated. lation. fractal interpolant interpolating several points. Fractals have been applied to modelling [2, 5] and to analysis.
References-found: 19

