URL: http://www-sal.cs.uiuc.edu/~kamin/fpic/doc/fpic-paper.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/pubs/index.html
Root-URL: http://www.cs.uiuc.edu
Email: fs-kamin,d-hyattg@uiuc.edu  
Title: A Special-Purpose Language for Picture-Drawing  
Author: Samuel N. Kamin David Hyatt 
Address: Urbana, Illinois 61801  
Affiliation: Computer Science Department University of Illinois at Urbana-Champaign  
Date: Oct. 1997, 297-310  
Note: Proc. USENIX Conf. on Domain-specific Languages, Santa Barbara,  
Abstract: Special purpose languages are typically characterized by a type of primitive data and domain-specific operations on this data. One approach to special purpose language design is to embed the data and operations of the language within an existing functional language. The data can be defined using the type constructions provided by the functional language, and the special purpose language then inherits all of the features of the more general language. In this paper we outline a domain-specific language, FPIC, for the representation of two-dimensional pictures. The primitive data and operations are defined in ML. We outline the operations provided by the language, illustrate the power of the language with examples, and discuss the design process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Adobe Systems Inc. </institution> <note> PostScript Language Reference Manual. Addison Wesley, second edition, </note> <year> 1990. </year>
Reference-contexts: In any case, FPIC consists of about 160 functions, amounting to about 1200 lines of ML code. In Appendix B, we list all the FPIC primitives that are used in the examples in this paper. 2 PostScript <ref> [1] </ref> has a similar notion of "graphics context." Proc. USENIX Conf. on Domain-specific Languages, Santa Barbara, Oct. 1997, 297-310 6 5 FPIC Examples The examples of this section show how the features of Standard ML, when combined with the primitives of FPIC, create a powerful language for constructing pictures. <p> The size of the text will still be calculated correctly: 10 100 10000 100000000 hseqlist (map (fn i =&gt; frame (text (Int.toString (pow 10 i)))) <ref> [1, 2, 4, 8] </ref>); 7 Packages The real point, of course, is that FPIC can do more. That is, it is not merely a special purpose language for one type of picture, but is infinitely extensible to a variety of picture-drawing domains.
Reference: [2] <author> Emmanuel Chailloux and Ascander Suarez. </author> <title> mlPicT E X, a picture environment for LaT E X. </title>
Reference-contexts: We adopt a solution to this problem similar, in essence, to that used by Chailloux and Suarez in mlPicTeX <ref> [2] </ref>. When FPIC is first run, it produces L A T E X code that causes L A T E X to write the size of the text to its intermediate Proc. <p> The size of the text will still be calculated correctly: 10 100 10000 100000000 hseqlist (map (fn i =&gt; frame (text (Int.toString (pow 10 i)))) <ref> [1, 2, 4, 8] </ref>); 7 Packages The real point, of course, is that FPIC can do more. That is, it is not merely a special purpose language for one type of picture, but is infinitely extensible to a variety of picture-drawing domains. <p> We should particularly mention Timothy Van Zandt's PSTricks [9], a collection of TeX macros, because FPIC is implemented using them (a BitMap is actually just a sequence of PSTricks macro calls). Another is Kristoffer Rose's xyPic [8] package. The closest relatives of this work are Chailloux and Suarez's mlPicTeX <ref> [2] </ref> and Simon Peyton Jones and Sigbjorn Finne's "simple structured graphics model" [7]. Both are embeddings of picture-drawing primitives in a functional language (ML and Haskell, respectively).
Reference: [3] <editor> P. Hudak, S. Peyton Jones, and P. Wadler (eds.), </editor> <title> Report on the Programming Language Haskell (Version 1.2), </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: Neither problem would exist, as far as we can see, if FPIC were designed as a new language. (In fact, the first problem is already partially solved in the functional language Haskell <ref> [3] </ref>, in that literals and built-in operations can be "lifted" in the way that we require). Our second observation is that the technical problem described in this section should not be considered to imply that the language design is a failure.
Reference: [4] <author> B.W. Kernighan. </author> <title> PIC: A crude graphics language for typesetting. </title> <institution> Bell Laboratory, </institution> <year> 1981. </year>
Reference-contexts: Our emphasis throughout is on the advantages obtained by having the functional language superstructure of Standard ML as part of FPIC. 2 Simple FPIC Examples PIC <ref> [4] </ref> is a language for drawing simple pictures, such as trees and block diagrams. It has primitives for drawing boxes, circles, and other shapes, with or without labels, and for drawing lines and arrows between them. <p> The size of the text will still be calculated correctly: 10 100 10000 100000000 hseqlist (map (fn i =&gt; frame (text (Int.toString (pow 10 i)))) <ref> [1, 2, 4, 8] </ref>); 7 Packages The real point, of course, is that FPIC can do more. That is, it is not merely a special purpose language for one type of picture, but is infinitely extensible to a variety of picture-drawing domains. <p> Our second observation is that the technical problem described in this section should not be considered to imply that the language design is a failure. We still consider that our original thesis has been substantially borne out. 9 Related Work We have acknowledged our debt to Kernighan's PIC <ref> [4] </ref>, and hopefully made clear how FPIC differs. There are quite a few languages for specifying pictures. We should particularly mention Timothy Van Zandt's PSTricks [9], a collection of TeX macros, because FPIC is implemented using them (a BitMap is actually just a sequence of PSTricks macro calls).
Reference: [5] <author> Donald E. Knuth. </author> <title> The T E Xbook. </title> <publisher> Addison-Wesley Co., Inc., </publisher> <address> Reading, MA, </address> <year> 1984 </year>
Reference: [6] <author> Robin Milner, Mads Tofte, and Robert Harpert, </author> <title> The Definition of Standard ML, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction FPIC is a special-purpose language for drawing simple pictures. It was built by defining types and functions in the functional language Standard ML <ref> [6] </ref>. This method of construction is easy and results in a language with many useful features. In addition to being concise for small examples, FPIC is powerful enough to allow the programming of large programs and program libraries, an area in which many special-purpose languages are weak.
Reference: [7] <author> Simon Peyton Jones and Sigbjorn Finne. </author> <title> Pictures: A Simple Structured Graphics Model. </title>
Reference-contexts: Another is Kristoffer Rose's xyPic [8] package. The closest relatives of this work are Chailloux and Suarez's mlPicTeX [2] and Simon Peyton Jones and Sigbjorn Finne's "simple structured graphics model" <ref> [7] </ref>. Both are embeddings of picture-drawing primitives in a functional language (ML and Haskell, respectively). In Peyton Jones and Finne's work, the type Picture contains abstract syntax trees of picture primitives; a program produces such a tree, and then a renderer traverses this tree and produces the picture.
Reference: [8] <author> Kristoffer H. Rose. </author> <title> XyPic User's Guide. </title> <year> 1995. </year>
Reference-contexts: The size of the text will still be calculated correctly: 10 100 10000 100000000 hseqlist (map (fn i =&gt; frame (text (Int.toString (pow 10 i)))) <ref> [1, 2, 4, 8] </ref>); 7 Packages The real point, of course, is that FPIC can do more. That is, it is not merely a special purpose language for one type of picture, but is infinitely extensible to a variety of picture-drawing domains. <p> There are quite a few languages for specifying pictures. We should particularly mention Timothy Van Zandt's PSTricks [9], a collection of TeX macros, because FPIC is implemented using them (a BitMap is actually just a sequence of PSTricks macro calls). Another is Kristoffer Rose's xyPic <ref> [8] </ref> package. The closest relatives of this work are Chailloux and Suarez's mlPicTeX [2] and Simon Peyton Jones and Sigbjorn Finne's "simple structured graphics model" [7]. Both are embeddings of picture-drawing primitives in a functional language (ML and Haskell, respectively).
Reference: [9] <author> Timothy Van Zandt. PSTricks: </author> <title> PostScript macros for Generic T E X. </title> <year> 1993. </year>
Reference-contexts: We still consider that our original thesis has been substantially borne out. 9 Related Work We have acknowledged our debt to Kernighan's PIC [4], and hopefully made clear how FPIC differs. There are quite a few languages for specifying pictures. We should particularly mention Timothy Van Zandt's PSTricks <ref> [9] </ref>, a collection of TeX macros, because FPIC is implemented using them (a BitMap is actually just a sequence of PSTricks macro calls). Another is Kristoffer Rose's xyPic [8] package.
References-found: 9

