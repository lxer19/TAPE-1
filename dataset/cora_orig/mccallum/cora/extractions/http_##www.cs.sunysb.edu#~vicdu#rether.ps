URL: http://www.cs.sunysb.edu/~vicdu/rether.ps
Refering-URL: http://www.cs.sunysb.edu/~vicdu/
Root-URL: http://www.cs.sunysb.edu
Title: Software Design, Specification, and Verification: Lessons Learned from the Rether Case Study  
Author: Xiaoqun Du, Kevin T. McDonnell, Evangelos Nanos, Y.S. Ramakrishna, Scott A. Smolka 
Address: NY 11794-4400, USA  
Affiliation: Department of Computer Science SUNY at Stony Brook Stony Brook,  
Abstract: Rether is a software-based real-time ethernet protocol developed at SUNY Stony Brook. The purpose of this protocol is to provide guaranteed bandwidth and deterministic, periodic network access to multimedia applications over commodity ethernet hardware. It has been implemented in the FreeBSD 2.1.0 operating system, and is now being used to support the Stony Brook Video Server (SBVS), a low-cost, ethernet LAN-based server providing real-time delivery of video to end-users from the server's disk subsystem. Using local model checking, as provided by the Concurrency Factory specification and verification environment, we showed (for a particular network configuration) that Rether indeed makes good on its bandwidth guarantees to real-time nodes without exposing non-real-time nodes to the possibility of starvation. In the course of specifying and verifying Rether, we identified an alternative design of the protocol that warranted further study due to potential efficiency gains. Again using model checking, we showed that this alternative design also possesses the properties of interest. 
Abstract-found: 1
Intro-found: 1
Reference: [AD94] <author> R. Alur and D. Dill. </author> <title> The theory of timed automata. </title> <journal> TCS, </journal> <volume> 126(2), </volume> <year> 1994. </year>
Reference-contexts: An alternative software design may lead to a smaller state space, thereby facil itating model checking and other forms of verification. 4. Interesting properties of real-time protocols can be verified without the use of real-time formalisms, such as timed automata <ref> [AD94] </ref> or real-time logic [Mok91]. For our Rether case study, we abstracted real time into "time slots" and, in this context, it sufficed to use an untimed value-passing language (VPL) along with a non-real-time temporal logic (the modal mu-calculus [Koz83]).
Reference: [CE81] <author> E. M. Clarke and E. A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <editor> In D. Kozen, editor, </editor> <booktitle> Proceedings of the Workshop on Logic of Programs, </booktitle> <address> Yorktown Heights, </address> <booktitle> volume 131 of Lecture Notes in Computer Science, </booktitle> <pages> pages 52-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: One of the main analysis routines supported by the Factory is model checking <ref> [CE81, QS82, CES86] </ref>, a verification technique for determining whether a system specification possesses a property expressed as a temporal logic formula. Model checking has enjoyed wide success in verifying, or finding design errors in, real-life systems.
Reference: [CES86] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM TOPLAS, </journal> <volume> 8(2), </volume> <year> 1986. </year>
Reference-contexts: One of the main analysis routines supported by the Factory is model checking <ref> [CE81, QS82, CES86] </ref>, a verification technique for determining whether a system specification possesses a property expressed as a temporal logic formula. Model checking has enjoyed wide success in verifying, or finding design errors in, real-life systems.
Reference: [CLSS96] <author> R. Cleaveland, P. M. Lewis, S. A. Smolka, and O. Sokolsky. </author> <title> The Concurrency Factory: A development environment for concurrent systems. </title> <editor> In R. Alur and T. A. Henzinger, editors, </editor> <booktitle> Computer Aided Verification (CAV '96), volume 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pages 398-401, </pages> <address> New Brunswick, New Jersey, July 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: To this end, we set out to formally verify these properties of Rether using the Concurrency Factory specification and verification environment <ref> [CLSS96] </ref>. The primary features of the Factory are its graphical user interface for specification and simulation of hierarchical networks of communicating state machines; its VPL textual specification language for describing protocols involving complex data structures and value passing; and its suite of analysis routines for verifying properties of specifications. <p> Section 5 describes how we specified the protocol in VPL, both for RTF and SQO. Our model checking results are presented in Section 6, and conclusions and directions for future work in Section 7. 2 The Concurrency Factory The Concurrency Factory <ref> [CLSS96] </ref> is an integrated toolset for the specification, verification, and implementation of concurrent and distributed real-time systems such as communication protocols and process control systems.
Reference: [CV95] <author> T. Chiueh and C. Venkatramani. </author> <title> The design, implementation and evaluation of a software-based real-time ethernet protocol. </title> <booktitle> In Proceedings of ACM SIG-COMM '95, </booktitle> <pages> pages 27-37, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Rether is a software-based real-time ethernet protocol developed at SUNY Stony Brook by Tzi-cker Chiueh and Chitra Venkatramani <ref> [CV95] </ref>. The purpose of this protocol is to provide guaranteed bandwidth and deterministic, periodic network access to multimedia applications over commodity ethernet hardware.
Reference: [CW96] <author> E. M. Clarke and J. M. Wing. </author> <title> Formal methods: State of the art and future directions. </title> <journal> ACM Computing Surveys, </journal> <volume> 28(4), </volume> <month> December </month> <year> 1996. </year>
Reference-contexts: Model checking has enjoyed wide success in verifying, or finding design errors in, real-life systems. An interesting account of a number of these success stories can be found in <ref> [CW96] </ref>. A distinguishing aspect of the Factory's model checker is its use of local model checking, a technique aimed at combating state explosion by performing state space search in a need-driven fashion.
Reference: [KMM + 97] <author> Y. Kesten, O. Maler, M. Marcus, A. Pnueli, and E. Shahar. </author> <title> Symbolic model checking with rich assertional languages. </title> <booktitle> In Proceedings of the 9th International Conference on Computer-Aided Verification, </booktitle> <address> Haifa, Israel, July 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Another research direction is to prove Rether correct for an arbitrary number of nodes and cycle time slots. This will require induction-based techniques, e.g. [MK95], symbolic techniques for parameterized systems, e.g. <ref> [KMM + 97] </ref>, or more general theorem-proving techniques, e.g. [RSS95].
Reference: [Koz83] <author> D. Kozen. </author> <title> Results on the propositional -calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 27 </volume> <pages> 333-354, </pages> <year> 1983. </year>
Reference-contexts: For our Rether case study, we abstracted real time into "time slots" and, in this context, it sufficed to use an untimed value-passing language (VPL) along with a non-real-time temporal logic (the modal mu-calculus <ref> [Koz83] </ref>). Our use of the time-slots abstraction to model the real-time behavior of the Rether protocol is discussed in greater detail in Section 5. The structure of the rest of the paper is as follows. Sections 2 and 3 provide overviews of the Concurrency Factory and Rether protocol, respectively.
Reference: [MK95] <author> K. L. McMillan and R. Kurshan. </author> <title> A structural induction theorem for processes. </title> <journal> Information and Computation, </journal> <volume> 117 </volume> <pages> 1-11, </pages> <year> 1995. </year>
Reference-contexts: It would also be interesting to observe its relative impact on the quality of service (e.g. jitter) in video applications. Another research direction is to prove Rether correct for an arbitrary number of nodes and cycle time slots. This will require induction-based techniques, e.g. <ref> [MK95] </ref>, symbolic techniques for parameterized systems, e.g. [KMM + 97], or more general theorem-proving techniques, e.g. [RSS95].
Reference: [Mok91] <author> A. K. Mok. </author> <title> Toward mechanization of real-time system design. </title> <editor> In A. van Tilborg and G. Koob, editors, </editor> <booktitle> Foundations of Real-Time Computing: Formal Specifications and Methods, </booktitle> <pages> pages 1-38. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: An alternative software design may lead to a smaller state space, thereby facil itating model checking and other forms of verification. 4. Interesting properties of real-time protocols can be verified without the use of real-time formalisms, such as timed automata [AD94] or real-time logic <ref> [Mok91] </ref>. For our Rether case study, we abstracted real time into "time slots" and, in this context, it sufficed to use an untimed value-passing language (VPL) along with a non-real-time temporal logic (the modal mu-calculus [Koz83]).
Reference: [Par96] <author> D. L. Parnas. </author> <title> Why software jewels are rare. </title> <journal> IEEE Computer, </journal> <volume> 29(2) </volume> <pages> 57-61, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: In our case, this was the discovery of the SQO node servicing policy. We believe this phenomenon is primarily one of being able to see the forest through the trees once an abstract specification is in hand. This view is consistent with that of Parnas in <ref> [Par96] </ref>, who wrote on the topic of software jewels: [These] Programs were not just written; they had been planned, often in some pseudocode or a language other than the actual programming language. 2. Alternative software designs can be shown "equivalent" through verification. 3.
Reference: [QS82] <author> J. P. Queille and J. Sifakis. </author> <title> Specification and verification of concurrent systems in Cesar. </title> <booktitle> In Proceedings of the International Symposium in Programming, volume 137 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1982. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: One of the main analysis routines supported by the Factory is model checking <ref> [CE81, QS82, CES86] </ref>, a verification technique for determining whether a system specification possesses a property expressed as a temporal logic formula. Model checking has enjoyed wide success in verifying, or finding design errors in, real-life systems.
Reference: [RS97] <author> Y. S. Ramakrishna and S. A. Smolka. </author> <title> Partial-order reduction in the weak modal mu-calculus. </title> <booktitle> In Proceedings of the Eighth International Conference on Concurrency Theory (CONCUR '97). </booktitle> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1997. </year>
Reference-contexts: The main features of the Factory are: a graphical user interface that allows the non-expert to design and simulate concurrent systems using GCCS, a graphical process algebra; a textual user interface for VPL; a suite of verification routines that currently includes a local model checker with partial-order reduction <ref> [RS97] </ref> for the modal mu-calculus, a very expressive temporal logic, and a local model checker for a real-time extension of the modal mu-calculus [SS95]; and a graphical compiler that transforms GCCS and VPL specifications into executable Facile [TLK96] code.
Reference: [RSS95] <author> S. Rajan, N. Shankar, and M. K. Srivas. </author> <title> An integration of model checking with automated proof checking. </title> <editor> In P. Wolper, editor, </editor> <booktitle> Computer Aided Verification (CAV '95), volume 939 of Lecture Notes in Computer Science, </booktitle> <pages> pages 84-97, </pages> <address> Liege, Belgium, July 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Another research direction is to prove Rether correct for an arbitrary number of nodes and cycle time slots. This will require induction-based techniques, e.g. [MK95], symbolic techniques for parameterized systems, e.g. [KMM + 97], or more general theorem-proving techniques, e.g. <ref> [RSS95] </ref>.
Reference: [SS95] <author> O. Sokolsky and S. A. Smolka. </author> <title> Local model checking for real-time systems. </title> <booktitle> In Proceedings of the 7th International Conference on Computer-Aided Verification. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1995. </year>
Reference-contexts: using GCCS, a graphical process algebra; a textual user interface for VPL; a suite of verification routines that currently includes a local model checker with partial-order reduction [RS97] for the modal mu-calculus, a very expressive temporal logic, and a local model checker for a real-time extension of the modal mu-calculus <ref> [SS95] </ref>; and a graphical compiler that transforms GCCS and VPL specifications into executable Facile [TLK96] code. We briefly describe here the components of the Factory that are most germane to our verification of the Rether protocol: VPL and the local model checker for the modal mu-calculus.
Reference: [TLK96] <author> B. Thomsen, L. Leth, and T.-M. Kuo. </author> <title> A Facile tutorial. </title> <booktitle> In Proceedings of the Seventh International Conference on Concurrency Theory (CONCUR '96), Vol. 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 278-298. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: of verification routines that currently includes a local model checker with partial-order reduction [RS97] for the modal mu-calculus, a very expressive temporal logic, and a local model checker for a real-time extension of the modal mu-calculus [SS95]; and a graphical compiler that transforms GCCS and VPL specifications into executable Facile <ref> [TLK96] </ref> code. We briefly describe here the components of the Factory that are most germane to our verification of the Rether protocol: VPL and the local model checker for the modal mu-calculus.
References-found: 16

