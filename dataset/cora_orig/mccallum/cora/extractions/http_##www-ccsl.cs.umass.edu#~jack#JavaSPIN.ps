URL: http://www-ccsl.cs.umass.edu/~jack/JavaSPIN.ps
Refering-URL: http://www-ccsl.cs.umass.edu/~jack/
Root-URL: 
Email: fkaplan,gmyrest,ridgway,wiledeng@cs.umass.edu  
Phone: Phone: (413) 545-0289 Fax: (413) 545-1249  
Title: JavaSPIN Approach  
Author: Alan Kaplan Geir A. Myrestrand John V. E. Ridgway Jack C. Wileden 
Address: Amherst, Massachusetts 01003 USA  
Affiliation: Convergent Computing Systems Laboratory Department of Computer Science University of Massachusetts  of Sun Microsystems, Inc.  
Note: The  Java is a Trademark  
Abstract: Our SPIN on Persistent Java TM : Abstract The SPIN (Support for Persistence, Interoperability and Naming) framework was developed as a unifying conceptual foundation for integrating extended features in software systems. SPIN has previously been used as a basis for seamlessly integrating persistence, interoperability and naming capabilities in extended versions of the C++ and CLOS APIs of the TI/Arpa Open Object-Oriented Database (Open OODB). We are currently developing JavaSPIN, a seamless integration of persistence, interoperability and naming with Java. The foundations for JavaSPIN are the SPIN framework, the Open OODB kernel and Java itself. To minimize barriers to adoption, JavaSPIN will impose no modifications on the Java language or the Java Virtual Machine. To maximize opportunities for interoperability, JavaSPIN will have a persistence model and language-independent name management mechanism in common with the Persistent C++ and Persistent CLOS APIs of Open OODB. In this paper we discuss our goals for JavaSPIN, outline the JavaSPIN approach and sketch our plans for longer-term development related to JavaSPIN. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. J. Barrett, A. Kaplan, and J. C. Wileden. </author> <title> Automated support for seamless interoperability in polylingual software systems. </title> <booktitle> In Proceedings of the Fourth Symposium on the Foundations of Software Engineering, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1996. </year> <note> (to appear). </note>
Reference-contexts: In the longer term, we will undertake a variety of enhancements, extensions, improvements and experimentation based on JavaSPIN. For example, we plan to investigate various transaction models by replacing the initial model implemented in our JavaSPIN.Store class with richer alternative models. We also intend to extend our PolySPINner toolset <ref> [1] </ref> to automate polylingual interoperability support among Java, C++ and CLOS, thereby com 8 plementing our existing support for polylingual interoperability between C++ and CLOS [5]. Another topic that we expect to explore using JavaSPIN is evolution of type definitions in the presence of persistent instances of the evolving types.
Reference: [2] <author> R. Cattell. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Like PGraphite and R&R, however, and unlike most approaches to persistence for C++ (e.g., the ODMG C++ binding <ref> [2] </ref>), the Open OODB persistence extensions are seamless and transparent. The Open OODB approach also resembles the PGraphite/R&R approach in that it is implemented via source-language-level modifications.
Reference: [3] <author> A. Kaplan. </author> <title> Name Management: Models, Mechanisms and Applications. </title> <type> PhD thesis, </type> <institution> The University of Massachusetts, </institution> <address> Amherst, MA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: We then discuss our goals for JavaSPIN, outline the JavaSPIN approach and sketch our plans for longer-term development related to JavaSPIN. 2 Background The SPIN (Support for Persistence, Interoperability and Naming) framework <ref> [3] </ref> was developed as a unifying conceptual foundation for integrating extended features in software systems. SPIN has previously been used as a basis for seamlessly integrating persistence, interoperability and naming capabilities in extended versions of the C++ and CLOS APIs of the Open OODB.
Reference: [4] <author> A. Kaplan and J. Wileden. Conch: </author> <title> Experimenting with enhanced name management for persistent object systems. </title> <editor> In M. Atkinson, D. Maier, and V. Banzaken, editors, </editor> <booktitle> Sixth International Workshop on Persistent Object Systems, Workshops in Computing, </booktitle> <pages> pages 318-331, </pages> <address> Tarascon, Provence, France, Sept. 1994. </address> <publisher> Springer. </publisher>
Reference-contexts: Enhanced name management: Independent of (that is, orthogonally to) persistence, JavaSPIN will provide a set of extended name management capabilities, based on the Piccolo model [6] and therefore suitable for use with Conch-style tools <ref> [4] </ref>. As a result, this enhanced approach to name management will be uni formly applicable to C++, CLOS, and Java objects.
Reference: [5] <author> A. Kaplan and J. Wileden. </author> <title> Toward painless polylingual persistence. </title> <booktitle> In Seventh International Workshop on Persistent Object Systems, </booktitle> <address> Cape May, NJ, </address> <month> May </month> <year> 1996. </year> <note> (To appear). </note>
Reference-contexts: three main objectives: * To produce a seamlessly extended version of Java having valuable capabilities beyond those provided in the basic Java language but with minimal barriers to adoption; * To complement similar extensions to C++ and CLOS, thereby providing a convenient basis for extending our work on polylingual interoperability <ref> [5] </ref>; and * To demonstrate the usefulness and generality of our previously-developed approaches to providing persistence, interoperability and name management. In the remainder of this paper, we first provide some background on our previously-developed approaches to providing persistence, interoperability and name management. <p> As part of that collaboration, we extended Open OODB (both APIs) with enhanced, language-neutral, name management support. This in turn enabled some novel, name-based persistence mechanisms and polylingual interoperability of persistent C++ and CLOS objects <ref> [5] </ref>. The combination of support for persistence, interoperability and name management rests on the foundation that we call the SPIN framework. When extended with automated support for polylingual persistence, we refer to the framework as PolySPIN. <p> A Basis for polylingual interoperabilty among C++, CLOS, and Java: The extensions provided by JavaSPIN will transparently incorporate the necessary information into Java objects to support polylingual interoperability among C++, CLOS, and Java <ref> [5] </ref>. Minimal Barriers to Adoption: Our next highest priority is to make it as easy as possible for Java users to adopt our extensions. As always, we wish to minimize the impact of the extensions on programmers, especially those who might not be (direct) users of the extended capabilities. <p> We also intend to extend our PolySPINner toolset [1] to automate polylingual interoperability support among Java, C++ and CLOS, thereby com 8 plementing our existing support for polylingual interoperability between C++ and CLOS <ref> [5] </ref>. Another topic that we expect to explore using JavaSPIN is evolution of type definitions in the presence of persistent instances of the evolving types. Performance improvements, possibly based on modifying or replacing the underlying object store utilized by the Open OODB kernel, will also be investigated.
Reference: [6] <author> A. Kaplan and J. C. Wileden. </author> <title> Formalization and application of a unifying model for name management. </title> <booktitle> In The Third Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 161-172, </pages> <address> Washington, D.C., </address> <month> Oct </month> <year> 1995. </year>
Reference-contexts: Enhanced name management: Independent of (that is, orthogonally to) persistence, JavaSPIN will provide a set of extended name management capabilities, based on the Piccolo model <ref> [6] </ref> and therefore suitable for use with Conch-style tools [4]. As a result, this enhanced approach to name management will be uni formly applicable to C++, CLOS, and Java objects.
Reference: [7] <author> P. L. Tarr, J. C. Wileden, and L. A. Clarke. </author> <title> Extending and limiting PGraphite-style persistence. </title> <booktitle> In Proceedings of the Fourth International Workshop on Persistent Object Systems, </booktitle> <pages> pages 74-86, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The SPIN framework itself evolved out of our earlier work on persistence, interoperability and name management. Our work on persistence began with the development of the PGraphite [8, 10] and R&R <ref> [7] </ref> persistence extensions to Ada 83. At the time, PGraphite and R&R were novel in that they added orthogonal, reachability-based persistence to (a subset of) an existing language by exploiting its data abstraction features.
Reference: [8] <author> P. L. Tarr, J. C. Wileden, and A. L. Wolf. </author> <title> A different tack to providing persistence in a language. </title> <booktitle> In Proceedings of the Second International Workshop on Database Programming Languages, </booktitle> <pages> pages 41-60, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The SPIN framework itself evolved out of our earlier work on persistence, interoperability and name management. Our work on persistence began with the development of the PGraphite <ref> [8, 10] </ref> and R&R [7] persistence extensions to Ada 83. At the time, PGraphite and R&R were novel in that they added orthogonal, reachability-based persistence to (a subset of) an existing language by exploiting its data abstraction features.
Reference: [9] <author> D. L. Wells, J. A. Blakely, and C. W. Thompson. </author> <title> Architecture of an open object-oriented management system. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 74-82, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Our work on this topic, like our work on persistence, emphasized minimizing the 2 impact of the extended capability. In particular, we sought to make any decisions regard-ing interoperation transparent to code that wasn't directly involved in or dependent upon interoperation. The TI/Arpa Open OODB project <ref> [9] </ref> subsequently adopted a perspective very similar to that which we had taken in PGraphite and R&R. The Open OODB project produced both a Persistent C++ and a Persistent CLOS without introducing any new syntax in either language or any modifications to either language system.
Reference: [10] <author> J. C. Wileden, A. L. Wolf, C. D. Fisher, and P. L. Tarr. PGraphite: </author> <title> An experiment in persistent typed object management. </title> <booktitle> In Proceedings of SIGSOFT '88: Third Symposium on Software Development Environments, </booktitle> <pages> pages 130-142, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The SPIN framework itself evolved out of our earlier work on persistence, interoperability and name management. Our work on persistence began with the development of the PGraphite <ref> [8, 10] </ref> and R&R [7] persistence extensions to Ada 83. At the time, PGraphite and R&R were novel in that they added orthogonal, reachability-based persistence to (a subset of) an existing language by exploiting its data abstraction features.
Reference: [11] <author> J. C. Wileden, A. L. Wolf, W. R. Rosenblatt, and P. L. Tarr. </author> <title> Specification level interoperability. </title> <journal> Communications of the ACM, </journal> <volume> 34(5) </volume> <pages> 73-87, </pages> <month> May </month> <year> 1991. </year> <month> 11 </month>
Reference-contexts: At about the same time, we were also beginning to investigate approaches to interoperability <ref> [11] </ref>. Our work on this topic, like our work on persistence, emphasized minimizing the 2 impact of the extended capability. In particular, we sought to make any decisions regard-ing interoperation transparent to code that wasn't directly involved in or dependent upon interoperation.
References-found: 11

