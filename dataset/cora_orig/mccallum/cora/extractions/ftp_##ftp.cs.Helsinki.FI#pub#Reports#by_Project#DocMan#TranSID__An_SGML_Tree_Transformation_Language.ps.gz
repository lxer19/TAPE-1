URL: ftp://ftp.cs.Helsinki.FI/pub/Reports/by_Project/DocMan/TranSID:_An_SGML_Tree_Transformation_Language.ps.gz
Refering-URL: http://www.cs.helsinki.fi/~kilpelai/
Root-URL: 
Title: TranSID: An SGML Tree Transformation Language  
Author: Jani Jaakkola, Pekka Kilpelinen, and Greger Lindn 
Address: P.O.Box 26 (Teollisuuskatu 23) FIN-00014 University of Helsinki, Finland  
Date: Helsinki, May 1997  
Note: Series of Publications C, No. C-1997-36  
Affiliation: University of Helsinki Department of Computer Science  University of Helsinki Department of Computer Science  
Pubnum: Report C199736  
Abstract-found: 0
Intro-found: 1
Reference: [AHH + 96a] <author> Helena Ahonen, Barbara Heikkinen, Oskari Heinonen, Jani Jaakkola, Pekka Kilpelinen, Greger Lindn, and Heikki Mannila. </author> <title> Intelligent assembly of structured documents. </title> <type> Technical Report C-1996-40, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: TranSID has been successfully used for transforming its own documentation from an SGML form into L A T E X and HTML. We are developing and experimenting TranSID further in a project dealing with intelligent document assembly <ref> [AHH + 96a, AHH + 96b] </ref>. In document assembly, new documents are constructed from a pool of documents. For this purpose, we have developed a server version of TranSID, which is able to respond to queries on a collection of structured documents.
Reference: [AHH + 96b] <author> Helena Ahonen, Barbara Heikkinen, Oskari Heinonen, Jani Jaakkola, Pekka Kilpelinen, Greger Lindn, and Heikki Mannila. </author> <title> Constructing tailored SGML documents. </title> <editor> In Janne Saarela, editor, </editor> <booktitle> Proceedings of SGML Finland 1996, </booktitle> <pages> pages 106116, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: TranSID has been successfully used for transforming its own documentation from an SGML form into L A T E X and HTML. We are developing and experimenting TranSID further in a project dealing with intelligent document assembly <ref> [AHH + 96a, AHH + 96b] </ref>. In document assembly, new documents are constructed from a pool of documents. For this purpose, we have developed a server version of TranSID, which is able to respond to queries on a collection of structured documents.
Reference: [AIS96] <author> AIS Berger-Levrault. </author> <title> Balise Reference Manual, </title> <type> Release 3, </type> <year> 1996. </year>
Reference-contexts: There are several translation engines targeted specitcally at SGML applications on the market today. We distinguish between conversion tools for transforming documents into SGML documents (aka up-translation), and transformation tools for transforming SGML documents into SGML or other formats (aka cross-translation and down-translation). Transformation tools, such as Balise <ref> [AIS96] </ref>, MetaMorphosis [MID95], OmniMark [Exo93], and CoST [Har93], use as their front end an SGML parser that reads and checks the SGML document before it is transformed. We divide transformation tools into two categories. Event-based transformers (e.g., Om-niMark) use a sequential evaluation strategy.
Reference: [Cla96a] <author> James Clark. Jade James' DSSSL engine, </author> <month> November </month> <year> 1996. </year> <note> http://www.jclark.com/jade/. </note>
Reference-contexts: TranSID is mainly concerned with tree transformation even if some simple formatting is possible. Also, no complete implementations of DSSSL exist yet only a partial implementation of the DSSSL style language has been developed <ref> [Cla96a] </ref>. In the rest of this paper we present the TranSID language and its implementation. We start by giving a short explanation of the data model and by detning the semantics of the transformation language. We then go on to show some extensive examples of its use.
Reference: [Cla96b] <author> James Clark. </author> <title> An SGML System contning to International Standard ISO 8879 Standard Generalized Markup Language, </title> <note> 1996. url: http//www.jclark.com/sp/. </note>
Reference-contexts: The basic environment consists of an SGML parser, a TranSID parser, a transformer and a linearizer (Figure 1). A TranSID transformation starts by parsing an SGML document and constructing an internal document tree. We use the SP parser <ref> [Cla96b] </ref> for parsing the document. The tree transformation is specited in a TranSID program that is parsed by its own parser. An internal rule base is formed of the TranSID program. It may contain rules for transformation and linearization as well as some import declarations. <p> The environment consists of the SP SGML parser <ref> [Cla96b] </ref>, a TranSID parser implemented with yacc and lex, and an evaluator and a linearizer both implemented in C. TranSID uses lazy type conversions. Type conversions are performed implicitly when a certain type is needed. TranSID maintains an internal tree database for managing SGML trees.
Reference: [Exo93] <author> Exoterica Corporation. </author> <title> OmniMark Programmer's Guide, </title> <year> 1993. </year>
Reference-contexts: We distinguish between conversion tools for transforming documents into SGML documents (aka up-translation), and transformation tools for transforming SGML documents into SGML or other formats (aka cross-translation and down-translation). Transformation tools, such as Balise [AIS96], MetaMorphosis [MID95], OmniMark <ref> [Exo93] </ref>, and CoST [Har93], use as their front end an SGML parser that reads and checks the SGML document before it is transformed. We divide transformation tools into two categories. Event-based transformers (e.g., Om-niMark) use a sequential evaluation strategy.
Reference: [Gol90] <author> Charles F. Goldfarb. </author> <title> The SGML Handbook. </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year>
Reference-contexts: Event-based transformers (e.g., Om-niMark) use a sequential evaluation strategy. They transform the SGML document at the same time when it is entered and parsed. This strategy is usually ecient, at least memory-wise, as the document never has to be entirely read into main memory. Event-based transformers use the ESIS <ref> [Gol90] </ref> output of an SGML parser as their input. The ESIS output consists of all `events' or structural parts in the document, such as the start and end tags as well as the content between tags.
Reference: [Har93] <author> Klaus Harbo. </author> <title> CoST version 0.2 Copenhagen SGML Tool. </title> <type> Technical report, </type> <institution> Department of Computer Science & Euromath Center, University of Copenhagen, </institution> <year> 1993. </year> <month> 13 </month>
Reference-contexts: We distinguish between conversion tools for transforming documents into SGML documents (aka up-translation), and transformation tools for transforming SGML documents into SGML or other formats (aka cross-translation and down-translation). Transformation tools, such as Balise [AIS96], MetaMorphosis [MID95], OmniMark [Exo93], and CoST <ref> [Har93] </ref>, use as their front end an SGML parser that reads and checks the SGML document before it is transformed. We divide transformation tools into two categories. Event-based transformers (e.g., Om-niMark) use a sequential evaluation strategy.
Reference: [ISO86] <author> ISO. </author> <title> Information Processing Text and Oce Systems Standard Gen--eralized Markup Language (SGML), </title> <type> ISO 8879, </type> <year> 1986. </year>
Reference-contexts: It would be sucient to update only one particular master document and then propagate the changes to all other representations of the same document. Such a processing framework is supported by the Standard Generalized Markup Language (SGML) <ref> [ISO86] </ref>. The idea of SGML is to mark the structure of documents explicitly. Main recognizable components called elements impose a hierarchical (or tree-like) structure on documents. The contents of elements, which may contain further elements, are surrounded in the document text by a start tag and an end tag.
Reference: [ISO92] <author> ISO and IEC. </author> <title> Information technology Hypermedia Time-based Structuring Language (HyTime), </title> <address> ISO/IEC 10744, </address> <year> 1992. </year>
Reference-contexts: The locator sublist (n;m) returns a specited subset of nodes from a node list. The parameters of sublist are interpreted similarly to the dimension specitcations in the HyTime standard <ref> [ISO92] </ref>, which allows nodes to be located relative to either end of the list. TranSID includes also powerful list moditcation operators. The operator map (Condition; Replacement) replaces each node that satistes expression Condition by the value of the expression Replacement.
Reference: [ISO96] <author> ISO and IEC. </author> <title> Information technology Processing Languages Document Style Semantics and Specitcation Language (DSSSL) ISO/IEC 10179, </title> <year> 1996. </year>
Reference-contexts: We have implemented an interpreter and an evaluator for Tran-SID which are fully operational in Unix environments [JKL96a, JKL96b]. TranSID has been developed in a research project called Strcutured and Intelligent Documents (SID) 1 . The Document Style Semantics and Specitcation Language Standard (DSSSL, <ref> [ISO96] </ref>) detnes a related transformation language. DSSSL is, however, in its entirety quite complex as it covers both tree transformation and document formatting. TranSID is mainly concerned with tree transformation even if some simple formatting is possible. <p> We conclude by giving an overview of the implementation and planned extensions to the language. 2 Overall control and data model A transformation engine for the TranSID language has been implemented. The transformation process is similar to the grove transformation process of the DSSSL standard <ref> [ISO96] </ref>. The basic environment consists of an SGML parser, a TranSID parser, a transformer and a linearizer (Figure 1). A TranSID transformation starts by parsing an SGML document and constructing an internal document tree. We use the SP parser [Cla96b] for parsing the document.
Reference: [JKL96a] <author> Jani Jaakkola, Pekka Kilpelinen, and Greger Lindn. TranSID: </author> <title> A language for transforming SGML documents. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: We have implemented an interpreter and an evaluator for Tran-SID which are fully operational in Unix environments <ref> [JKL96a, JKL96b] </ref>. TranSID has been developed in a research project called Strcutured and Intelligent Documents (SID) 1 . The Document Style Semantics and Specitcation Language Standard (DSSSL, [ISO96]) detnes a related transformation language. DSSSL is, however, in its entirety quite complex as it covers both tree transformation and document formatting.
Reference: [JKL96b] <author> Jani Jaakkola, Pekka Kilpelinen, and Greger Lindn. </author> <title> TranSID reference manual. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: We have implemented an interpreter and an evaluator for Tran-SID which are fully operational in Unix environments <ref> [JKL96a, JKL96b] </ref>. TranSID has been developed in a research project called Strcutured and Intelligent Documents (SID) 1 . The Document Style Semantics and Specitcation Language Standard (DSSSL, [ISO96]) detnes a related transformation language. DSSSL is, however, in its entirety quite complex as it covers both tree transformation and document formatting.
Reference: [KPPM84] <author> S. E. Keller, John A. Perkins, Teri F. Payton, and Susan P. Mardinly. </author> <title> Tree transformation techniques and experiences. </title> <booktitle> In Proceedings of the ACM SIG-PLAN '84 Symposium on Compiler Construction, SIGPLAN Notices 19(6), </booktitle> <address> Montreal, Canada, pages 190201, New York, </address> <month> June </month> <year> 1984. </year> <note> ACM, ACM. </note>
Reference-contexts: The ESIS output consists of all `events' or structural parts in the document, such as the start and end tags as well as the content between tags. Tree-based transformers (e.g., MetaMorphosis) construct an internal representation, usually a tree, of the SGML document. A tree-based transformation (see, e.g., <ref> [KPPM84] </ref>) lets the user refer to any part of the document (tree) at any time during the transformation. This strategy is more powerful than the event-based one, e.g., it is easier to reorder document parts or to handle forward and backward references.
Reference: [MID95] <institution> MID/Information Logistics Group GmbH. MetaMorphosis Refence Manual, </institution> <year> 1995. </year>
Reference-contexts: We distinguish between conversion tools for transforming documents into SGML documents (aka up-translation), and transformation tools for transforming SGML documents into SGML or other formats (aka cross-translation and down-translation). Transformation tools, such as Balise [AIS96], MetaMorphosis <ref> [MID95] </ref>, OmniMark [Exo93], and CoST [Har93], use as their front end an SGML parser that reads and checks the SGML document before it is transformed. We divide transformation tools into two categories. Event-based transformers (e.g., Om-niMark) use a sequential evaluation strategy.
Reference: [MPP + 97] <author> Olli-Pekka Mahlamki, Kimmo Paasiala, Santeri Pienimki, Tomi Sarajisto, and Juha Sievnen. </author> <title> Implementation of an SGML transformation language (in Finnish). Project work report, </title> <institution> Department of Computer Science, University of Helsinki, </institution> <month> February </month> <year> 1997. </year> <month> 14 </month>
Reference-contexts: The operator count returns the length of a list. Several other operations have been included into the TranSID language. String operations and regular expressions were implemented as a student project work <ref> [MPP + 97] </ref>. These operations include ordinary string operations such as comparison, catenation and search, as well as more sophisticated operations for string matching and replacement based on regular expressions. As an example consider the following rule.
References-found: 16

