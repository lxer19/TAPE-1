URL: http://www.cs.mtu.edu/~shene/edu/curve.ps.gz
Refering-URL: http://www.cs.mtu.edu/~shene/NSF-2/index.html
Root-URL: http://www.cs.mtu.edu
Email: Email: [yzhao|john|shene]@mtu.edu  
Title: A Tool for Teaching Curve Design  
Author: Yuan Zhao, John L. Lowther and Ching-Kuang Shene 
Address: Houghton, MI 49931-1295  
Affiliation: Department of Computer Science Michigan Technological University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Gerald Farin, </author> <title> NURB Curves and Surfaces, A K Peters, </title> <year> 1995. </year>
Reference-contexts: The third author was also partially supported by the National Science Foundation under grant CCR-9696084 (formerly CCR-9410707). y Communicating author Section 6 is our conclusion. Interested readers should consult <ref> [1, 2, 5] </ref> for mathematical background details. 2 System Design Issues 2.1 Design Goal The goal of this project is to design a tool for students to learn fundamental curve concepts, gain hands-on experience in curve design, and acquire curve design skills without getting into deep and involved mathematics. <p> To better show this effect, our tool displays a curve and uses a special mark that follows the curve (Figure 1 and 4). For B-spline and NURBS curves, knots (i.e., u 0 u 1 u m ) are restricted to <ref> [0; 1] </ref>. The point on the curve that corresponds to u is p (u) = P n n X w i N i;p (u)p i ; u 2 [0; 1] where w i is the weight of control point p i and N i;p (u) is the B-spline basis function defined <p> For B-spline and NURBS curves, knots (i.e., u 0 u 1 u m ) are restricted to <ref> [0; 1] </ref>. The point on the curve that corresponds to u is p (u) = P n n X w i N i;p (u)p i ; u 2 [0; 1] where w i is the weight of control point p i and N i;p (u) is the B-spline basis function defined recursively as follows: N i;0 (u) = &lt; 1 u 2 [u i ; u i+1 ) 0 otherwise N i;p (u) = u i+p u i u <p> The left NURBS curve in Figure 2 has all w i = 1 while the right one increases w 6 to 10. 4.2 Partition of Unity The sum of all coefficients of control points is 1. If the weights are non-negative, all coefficients are in <ref> [0; 1] </ref>. As a result, interval [0; 1] is "partitioned" by these coefficients. Note that the way of partitioning [0; 1] depends on the value of u. <p> If the weights are non-negative, all coefficients are in <ref> [0; 1] </ref>. As a result, interval [0; 1] is "partitioned" by these coefficients. Note that the way of partitioning [0; 1] depends on the value of u. Partition of unity can be considered as a weighted average of the control points and provides a way of modifying the shape of a curve. <p> If the weights are non-negative, all coefficients are in <ref> [0; 1] </ref>. As a result, interval [0; 1] is "partitioned" by these coefficients. Note that the way of partitioning [0; 1] depends on the value of u. Partition of unity can be considered as a weighted average of the control points and provides a way of modifying the shape of a curve. <p> For B-spline and NURBS curves, part of the curve lies in the convex hull defined by those control points whose corresponding basis functions are non-zero (Figure 4). Furthermore, as u moves in <ref> [0; 1] </ref>, the convex hull that corresponds to non-zero basis functions at u will also change. Our tool can show the change of convex hull. 4.4 De Casteljau's Algorithm De Casteljau's algorithm provides a beautiful geometric treatment to computing a point on a Bezier curve. <p> Our tool can show the change of convex hull. 4.4 De Casteljau's Algorithm De Casteljau's algorithm provides a beautiful geometric treatment to computing a point on a Bezier curve. Given a set of n + 1 control points p 0 0 , p 0 n and u 2 <ref> [0; 1] </ref>, de Casteljau's algorithm successively computes a set of polylines until a polyline contains only one point which is the point p (u) on the curve. <p> For a Bezier curve, a user can choose a u 2 <ref> [0; 1] </ref> and subdivide the curve at p (u) into two segments, each of which is a Bezier curve of the same degree with a new set of control points. <p> Our tool allows students to choose a u 2 <ref> [0; 1] </ref> to perform a subdivision for a Bezier curve. After subdivision, each curve segment is reparameterized so that the domain is always [0; 1]. Students can select the the segment they wish to work on. In the current version, students must maintain the collinearity condition at joining control points. <p> Our tool allows students to choose a u 2 <ref> [0; 1] </ref> to perform a subdivision for a Bezier curve. After subdivision, each curve segment is reparameterized so that the domain is always [0; 1]. Students can select the the segment they wish to work on. In the current version, students must maintain the collinearity condition at joining control points. In future versions, we plan to add an option so that all three collinear points are moved and rotated as a single unit.
Reference: [2] <author> Gerald Farin, </author> <title> Curves and Surfaces for CAGD: A Practical Guide, forth edition, </title> <publisher> Academic Press, </publisher> <year> 1997. </year>
Reference-contexts: The third author was also partially supported by the National Science Foundation under grant CCR-9696084 (formerly CCR-9410707). y Communicating author Section 6 is our conclusion. Interested readers should consult <ref> [1, 2, 5] </ref> for mathematical background details. 2 System Design Issues 2.1 Design Goal The goal of this project is to design a tool for students to learn fundamental curve concepts, gain hands-on experience in curve design, and acquire curve design skills without getting into deep and involved mathematics.
Reference: [3] <editor> John L. Lowther and Ching-Kuang Shene, </editor> <booktitle> Geometric Computing in the Undergraduate Computer Science Curricula, to appear in Fourth Annual Consortium for Computing in Small Colleges: Midwest Conference, </booktitle> <month> September 26-27, </month> <year> 1997. </year>
Reference-contexts: 1 Introduction This paper describes a tool for teaching curve design. This tool is a component of the software tools to be used in a computing with geometry course <ref> [3, 4] </ref> that is being developed under the support of National Science Foundation. Curve design is important in computer graphics, animation, and computer aided design. Unfortunately, curve design requires very involved mathematics even though many curve design concepts are intuitive.
Reference: [4] <author> John L. Lowther, Ching-Kuang Shene and Yuan Zhao, </author> <note> Computing with Geometry as an Undergraduate Course, submitted for publication, </note> <year> 1997. </year>
Reference-contexts: 1 Introduction This paper describes a tool for teaching curve design. This tool is a component of the software tools to be used in a computing with geometry course <ref> [3, 4] </ref> that is being developed under the support of National Science Foundation. Curve design is important in computer graphics, animation, and computer aided design. Unfortunately, curve design requires very involved mathematics even though many curve design concepts are intuitive.
Reference: [5] <author> Les Piegl and Wayne Tiller, </author> <title> The NURBS Book, </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The third author was also partially supported by the National Science Foundation under grant CCR-9696084 (formerly CCR-9410707). y Communicating author Section 6 is our conclusion. Interested readers should consult <ref> [1, 2, 5] </ref> for mathematical background details. 2 System Design Issues 2.1 Design Goal The goal of this project is to design a tool for students to learn fundamental curve concepts, gain hands-on experience in curve design, and acquire curve design skills without getting into deep and involved mathematics.
Reference: [6] <author> Alyn Rockwood and Peter Chambers, </author> <title> Interactive Curves and Surfaces: A Multimedia Tutorial on CAGD, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference-contexts: During past years, there have not been very many efforts dedicated to curve design tool development. Yen [7] produced a well-received video program explaining important concepts of B-spline curves and surfaces and Rockwood and Chambers <ref> [6] </ref> published a multimedia tutorial on computer aided geometric design. The former only provides a one-way communication, while the latter restricts users to a predefined environment with very limited interaction for users to carry out experiments.
Reference: [7] <author> Jonathan Yen, Knotty: </author> <title> A B-Spline Visualization Program, Part I and II, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, </address> <year> 1993. </year> <month> 5 </month>
Reference-contexts: As a result, it has been a challenging job for instructors teaching curves and surfaces in computer graphics, computer aided design, and other related courses. During past years, there have not been very many efforts dedicated to curve design tool development. Yen <ref> [7] </ref> produced a well-received video program explaining important concepts of B-spline curves and surfaces and Rockwood and Chambers [6] published a multimedia tutorial on computer aided geometric design.
References-found: 7

