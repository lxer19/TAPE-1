URL: ftp://ftp.ifad.dk/pub/papers/iptes2.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Email: E-mail: ppm@tko.vtt.fi  E-mail: rene@ifad.dk  
Title: IPTES Incremental Prototyping Technology for Embedded real-time Systems  
Author: Petri Pulli, VTT and Rene Elmstrtm, IFAD 
Address: P.O. Box 201, SF-90571 Oulu, Finland,  Forskerparken 10, DK-5230 Odense M, Denmark,  
Affiliation: Technical Research Centre of Finland (VTT), Computer Technology Laboratory,  The Institute of Applied Computer Science (IFAD)  
Abstract: The constantly increasing complexity and risk associated with the industrial development of embedded computer systems has been approached in different ways in resent years. One of the most promising approaches to managing risks in software development projects is the Boehm's spiral principle. In ESPRIT project no. EP5570 called IPTES a methodology and a supporting environment to support the Boehm's spiral principles are being developed. The prototyping environment will enable the specification and verification of executable system models so that different parts of the system may represent different modeling levels, and yet they can be executed as a total system.
Abstract-found: 1
Intro-found: 1
Reference: [Agresti86] <author> W. </author> <title> Agresti (editor). New Paradigms for Software Development. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year> <pages> 295 pages. </pages>
Reference-contexts: However, none of the tools supports incremental prototyping 3 . 3 The Spiral Model and Prototyping Over the last few years more and more attention has been paid to alternative software development models that could both overcome deficiencies <ref> [Agresti86] </ref> of the tra 2 [Harel&90] mentions plans to make the prototype code generation more adjustable. This can be interpreted as an indication of interest to support more physical abstraction levels. 3 To better understand the difference between "makes possible" and "supports", consider the case of object-orientation.
Reference: [Athena89] <author> Athena Systems Inc. Foresight: </author> <title> Modeling and Simulation Toolset for Real-Time System Development, User's Manual. </title> <month> March </month> <year> 1989. </year>
Reference-contexts: Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], [Reilly&87], [Coomber&90], <ref> [Athena89] </ref>. Some of the surveyed tools can be used for execution of heterogeneous models and in that sense they make incremental proto-typing possible.
Reference: [Blumofe&88] <author> Blumofe, R., Hecht, A. </author> <title> Executing Real-Time Structured Analysis specifications. </title> <booktitle> ACM Sigsoft Software Engineering Notes, </booktitle> <pages> 32-40, 13, </pages> <month> 3 </month> <year> 1989. </year>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], [Coleman&90]. <ref> [Blumofe&88] </ref> and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Boehm81] <author> B. Boehm. </author> <booktitle> Software Engineering Economics. Prentice-Hall International, </booktitle> <year> 1981. </year> <pages> 767 pages. </pages>
Reference-contexts: Any programming language can be used object orientedly, however, the benefits of object orientation were first realised with proper environments like Smalltalk and C++ ditional waterfall model <ref> [Boehm81] </ref>, and accommodate activities such as prototy-ping, reuse, and automatic coding as part of the process. The spiral model proposed by Boehm [Boehm88] (Figure 1) is a major step into this direction. The risk-driven nature of the spiral model makes it particularly applicable to complex embedded systems. software development process.
Reference: [Boehm88] <author> B. Boehm. </author> <title> A Spiral Model of Software Development and Enhancement. </title> <journal> IEEE Computer, </journal> <volume> 21(5) </volume> <pages> 61-72, </pages> <year> 1988. </year>
Reference-contexts: Any programming language can be used object orientedly, however, the benefits of object orientation were first realised with proper environments like Smalltalk and C++ ditional waterfall model [Boehm81], and accommodate activities such as prototy-ping, reuse, and automatic coding as part of the process. The spiral model proposed by Boehm <ref> [Boehm88] </ref> (Figure 1) is a major step into this direction. The risk-driven nature of the spiral model makes it particularly applicable to complex embedded systems. software development process. <p> The concurrent threads may be organised around levels of risk <ref> [Boehm88] </ref>. Figure 2 gives an example of concurrent development threads [TRW89]. In Figure 2, the horizontal axis represents elapsed time. The vertical axis represents the level of abstraction at which a representation or an understanding of the system is being developed.
Reference: [Boehm91] <author> Barry W. Boehm. </author> <title> Software Risk Management: </title> <booktitle> Principles and Practices. IEEE Software, </booktitle> <pages> 32-41, </pages> <month> January </month> <year> 1991. </year> <pages> 10 pages. </pages>
Reference-contexts: The spiral model may incorporate prototyping as a risk reduction option at any stage of development and explicitly calls for suitable risk assessment and risk control activities throughout major portions of the development process. Risk management involves the following steps <ref> [Boehm91] </ref>: * Risk assessment techniques Risk identification produces lists of the project specific risk items likely to compromise a project's success. Risk analysis quantifies the loss probability and loss magnitude for each identified risk item, and it assesses compound risks in risk item interactions.
Reference: [Cadre90] <institution> Cadre Technologies Inc. Teamwork/SIM. </institution> <note> User's Guide. Release 4.0. </note> <month> December </month> <year> 1990. </year> <title> Part Number D048XX4A. </title>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], [Coleman&90]. [Blumofe&88] and <ref> [Cadre90] </ref> describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Coleman&90] <author> Coleman, G.L., Ellison, C.P., Gardner, G.G., Sandini, D.L., Brackett, J.W. </author> <title> Experience in modelling a concurrent software system using State-mate. </title> <booktitle> In Proceedings of the Compeuro'90 Conference. </booktitle> <address> Tel Aviv, </address> <publisher> Isreal, </publisher> <pages> pages 104-108, </pages> <publisher> Washington D.C.IEEE Computer Society Press, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C [Harel&90], <ref> [Coleman&90] </ref>. [Blumofe&88] and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT.
Reference: [Coomber&90] <author> Coomber, C., Childs, R. </author> <title> A graphical tool for prototyping of real-time systems. </title> <booktitle> ACM Sigsoft Software Engineering Notes, </booktitle> <pages> 70-82, 15, </pages> <month> 2 </month> <year> 1990. </year>
Reference-contexts: Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], [Reilly&87], <ref> [Coomber&90] </ref>, [Athena89]. Some of the surveyed tools can be used for execution of heterogeneous models and in that sense they make incremental proto-typing possible.
Reference: [DOD-STD-2167A] <institution> Defence System Software Development. Department of Defence (US), </institution> <month> February </month> <year> 1988. </year> <pages> 51 pages. </pages>
Reference-contexts: The spiral has to be customised on a company or project basis. [Royce90] presents a derivative of the spiral model which explicitly defines milestones according to the US military standard <ref> [DOD-STD-2167A] </ref>. embedded system development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method [Ward&85]. These abstraction levels are described using the same modeling languages: data flow diagrams (DFD), state transition diagrams (STD), and entity relationship diagrams (ERD).
Reference: [Gabriel89] <author> Gabriel. </author> <title> Software Risk Management: Principles and Practices. </title> <journal> ACM Sigplan Notices, </journal> <volume> 24(3) </volume> <pages> 93-165, </pages> <year> 1989. </year>
Reference-contexts: In section 4 we will intro duce the general approach of the IPTES project including the different types of system models supported in the IPTES environment and finally we give some concluding remarks. 2 Related work Gabriel presents the requirements for a future prototyping environment in <ref> [Gabriel89] </ref>. Gabriel foresees the need for heterogeneous prototyping by requiring that elements from behavioural and structural prototypes can be combined and during the development process this mix may change as the requirements to the prototype change. <p> Over the lifetime of the prototype the mix of abstraction levels may change <ref> [Gabriel89] </ref>. Figures 4 and 5 [Mortensen90] illustrate the concept of the heterogeneous prototype. 4.3 Distributed Prototype Embedded systems are often highly concurrent in nature. For very complex embedded systems, the implementation of the concur-rency may require distribution of the system activities to several hardware processors that are loosely coupled.
Reference: [Harel87] <author> D. Harel. StateCharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: The abstraction level supported is roughly equivalent to the software environment model of SA/RT 1 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate [Harel&90], that has pro-totyping features. It is possible to automatically generate prototype code from the activity-chart and statechart <ref> [Harel87] </ref> specifications. Currently translations into 1 One can argue that there are in fact two abstraction levels: the Software Environment Model level and the code level. This is because Luqi's system does not have a mini-spec language, instead Ada is used. Ada and C code are supported.
Reference: [Harel&90] <author> David Harel, Hagi Lachover, Amnon Naamad, Amir Pnueli, Michal Politi, Rivi Sher-man, Ahron Shtull-Trauring and Mark Trakhtenbrot. STATEMATE: </author> <title> A Working Environment for the Development of Complex Reactive Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(4) </volume> <pages> 403-414, </pages> <month> April </month> <year> 1990. </year> <pages> 12 pages. </pages>
Reference-contexts: A limitation of Luqi's system is that it does not support multiple abstraction levels. The abstraction level supported is roughly equivalent to the software environment model of SA/RT 1 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate <ref> [Harel&90] </ref>, that has pro-totyping features. It is possible to automatically generate prototype code from the activity-chart and statechart [Harel87] specifications. Currently translations into 1 One can argue that there are in fact two abstraction levels: the Software Environment Model level and the code level. <p> Currently, an abstraction level equivalent to the logical model of SA/RT is supported 2 . However, it is possible to combine the prototype code generated out of Statemate models with user-written programs in Ada or C <ref> [Harel&90] </ref>, [Coleman&90]. [Blumofe&88] and [Cadre90] describe a commercial, graphical executable specification tool, Teamwork/SIM. This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. <p> However, none of the tools supports incremental prototyping 3 . 3 The Spiral Model and Prototyping Over the last few years more and more attention has been paid to alternative software development models that could both overcome deficiencies [Agresti86] of the tra 2 <ref> [Harel&90] </ref> mentions plans to make the prototype code generation more adjustable. This can be interpreted as an indication of interest to support more physical abstraction levels. 3 To better understand the difference between "makes possible" and "supports", consider the case of object-orientation.
Reference: [Luqi86] <author> Luqi. </author> <title> Rapid prototyping for large software system design. </title> <type> PhD Thesis, </type> <institution> University of Minnesota, </institution> <year> 1986. </year>
Reference-contexts: Luqi has presented a prototyping environment for large software system designs based on reusable Ada software components <ref> [Luqi86] </ref>, [Luqi&88], [Luqi89]. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in [Luqi86]. A limitation of Luqi's system is that it does not support multiple abstraction levels. <p> presented a prototyping environment for large software system designs based on reusable Ada software components <ref> [Luqi86] </ref>, [Luqi&88], [Luqi89]. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in [Luqi86]. A limitation of Luqi's system is that it does not support multiple abstraction levels. The abstraction level supported is roughly equivalent to the software environment model of SA/RT 1 . Harel et al. have produced a commercial, graphical executable specification tool, Statemate [Harel&90], that has pro-totyping features.
Reference: [Luqi&88] <author> Luqi & Katebchi, M. </author> <title> A computer aided prototyping system. </title> <journal> IEEE Software, </journal> <volume> 5(2):66 - 72, </volume> <year> 1991. </year>
Reference-contexts: Luqi has presented a prototyping environment for large software system designs based on reusable Ada software components [Luqi86], <ref> [Luqi&88] </ref>, [Luqi89]. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in [Luqi86]. A limitation of Luqi's system is that it does not support multiple abstraction levels.
Reference: [Luqi89] <author> Luqi. </author> <title> Software evulution through rapid prototyping. </title> <journal> IEEE Software, </journal> <volume> 22(5):13 - 25, </volume> <year> 1991. </year> <title> [Mortensen90] Benny Graff Mortensen (Coordinating Proposer). IPTES: Incremental Proto-typing Technology for Embedded Real-Time Systems. Part II. Project Description. </title> <type> Technical Report, </type> <address> IFAD, Odense, Denmark, </address> <month> January 8, </month> <year> 1990. </year>
Reference-contexts: Luqi has presented a prototyping environment for large software system designs based on reusable Ada software components [Luqi86], [Luqi&88], <ref> [Luqi89] </ref>. The computational model is based on data flow under semantically unified control and timing constraints. Luqi has presented the importance of the computational model for a prototyping tool, language and method in [Luqi86]. A limitation of Luqi's system is that it does not support multiple abstraction levels.
Reference: [Reilly&87] <author> Reilly, E.L., Brackett, J.W. </author> <title> An experimental system for executing Real-Time Structured Analysis models. </title> <editor> In , editor, </editor> <booktitle> Proceedings of the XII Structure Methods Conference. </booktitle> <address> Chicago, </address> <publisher> Illi-nois., </publisher> <pages> pages 301-313, </pages> <address> Chicago, </address> <booktitle> Structured Techniques Association, </booktitle> <month> May </month> <year> 1987. </year>
Reference-contexts: This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution [Webb&86], <ref> [Reilly&87] </ref>, [Coomber&90], [Athena89]. Some of the surveyed tools can be used for execution of heterogeneous models and in that sense they make incremental proto-typing possible.
Reference: [Royce90] <author> Walker Royce. </author> <title> TRW's Ada Process Model for Incremental Development of Large Software Systems. </title> <booktitle> In 12th International Conference on Software Engineering, </booktitle> <pages> pages 2-11, </pages> <year> 1990. </year>
Reference-contexts: The spiral model is a generic model, so it does not explicitly define the milestones to be produced for each cycle. The spiral has to be customised on a company or project basis. <ref> [Royce90] </ref> presents a derivative of the spiral model which explicitly defines milestones according to the US military standard [DOD-STD-2167A]. embedded system development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method [Ward&85].
Reference: [TRW89] <author> Ann Marmor-Squires. </author> <title> Process Model for High Performance Trusted Systems in Ada. </title> <type> Technical Report, </type> <institution> TRW Systems Division, Fairfax, Virginia, </institution> <month> August </month> <year> 1989. </year> <pages> 76 pages. </pages>
Reference-contexts: The concurrent threads may be organised around levels of risk [Boehm88]. Figure 2 gives an example of concurrent development threads <ref> [TRW89] </ref>. In Figure 2, the horizontal axis represents elapsed time. The vertical axis represents the level of abstraction at which a representation or an understanding of the system is being developed. The development process is depicted by three traces through the two dimensional space.
Reference: [Ward&85] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems. Volume 1-3, </title> <publisher> Yourdon Press, </publisher> <address> New York, </address> <pages> 1985-1986. </pages>
Reference-contexts: The spiral has to be customised on a company or project basis. [Royce90] presents a derivative of the spiral model which explicitly defines milestones according to the US military standard [DOD-STD-2167A]. embedded system development method, Ward & Mellor's Structured Analysis for Real-Time Systems (SA/RT) method <ref> [Ward&85] </ref>. These abstraction levels are described using the same modeling languages: data flow diagrams (DFD), state transition diagrams (STD), and entity relationship diagrams (ERD). The Logical Model (LM) consists of an environmental model and a behavioural model.
Reference: [Webb&86] <author> Webb,M.,Ward,P. </author> <title> Executable Data Flow Diagrams: An Experimental Implementation. </title> <booktitle> Proceedings of the Structured Development Forum VIII. </booktitle> <address> Chicago, </address> <publisher> Illinois, </publisher> <pages> 1-21, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: This tool supports a limited form of execution, capable of expressing only control and timing issues. Computations and data have been omitted. However, Teamwork/SIM supports several abstraction levels equivalent to the LM, PEM and SEM from SA/RT. There are a number of tools for SA/RT logical model execution <ref> [Webb&86] </ref>, [Reilly&87], [Coomber&90], [Athena89]. Some of the surveyed tools can be used for execution of heterogeneous models and in that sense they make incremental proto-typing possible.
References-found: 21

