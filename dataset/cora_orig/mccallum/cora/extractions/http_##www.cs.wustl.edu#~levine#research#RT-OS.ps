URL: http://www.cs.wustl.edu/~levine/research/RT-OS.ps
Refering-URL: http://www.cs.wustl.edu/~levine/research/cv.html
Root-URL: 
Email: fsergio,levine,schmidtg@cs.wustl.edu  
Title: An Empirical Evaluation of OS Support for Real-time CORBA Object Request Brokers  
Author: Sergio Flores-Gaitan, David L. Levine, and Douglas C. Schmidt 
Keyword: Real-time CORBA Object Request Broker, QoS-enabled OO Middleware, Performance Measurements  
Note: This work was supported in part by Boeing, CDI/GDIS, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and US Sprint.  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: This paper will be submitted to the International Journal of Time-Critical computing Systems, Special Issue on Real-time Middleware, edited by Wei Zhao. Abstract There is increasing demand to extend Object Request Broker (ORB) middleware to support distributed applications with stringent real-time requirements. However, lack of proper OS support can yield substantial ineffiency and unpredictability for ORB middleware. This paper provides the two contributions to the study of OS support for real-time ORBs. First, we empirically compare and evaluate the suitability of real-time operating systems, VxWorks and LynxOS, and general-purpose operating systems with real-time extensions, Windows NT and Solaris, for real-time ORB middleware. While holding the ORB constant, we vary these operating systems and measure platform-specific variations, such as context switching, priority inversions, predictability, and ORB/OS CPU processing overhead. Second, we describe key areas where these operating systems must improve to support deterministic and responsive ORBs. Our findings illustrate that general-purpose operating systems like Windows NT and Solaris are not yet suited to meet the demands of applications with stringent QoS requirements. However, LynxOS did enable predictable and efficient ORB performance, thereby making it a compelling OS platform for real-time CORBA applications. Surprisingly, VxWorks does not scale uniformly. In general, our results underscore the efficacy for a measure-driven methodology to pinpoint sources of overhead and non-determinism in ORB end-systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Gopalakrishnan and G. Parulkar, </author> <title> Bringing Real-time Scheduling Theory and Practice Closer for Multimedia Computing, </title> <booktitle> in SIGMETRICS Conference, </booktitle> <address> (Philadelphia, PA), </address> <publisher> ACM, </publisher> <month> May </month> <year> 1996. </year> <month> 17 </month>
Reference-contexts: 1 Introduction Next-generation distributed and real-time applications, such as video-on-demand, teleconferencing, and avionics, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency <ref> [1] </ref>, bandwidth, and reliability [2].
Reference: [2] <author> S. Landis and S. Maffeis, </author> <title> Building Reliable Distributed Sys--tems with CORBA, </title> <booktitle> Theory and Practice of Object Systems, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Next-generation distributed and real-time applications, such as video-on-demand, teleconferencing, and avionics, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency [1], bandwidth, and reliability <ref> [2] </ref>.
Reference: [3] <author> R. Johnson, </author> <title> Frameworks = Patterns + Components, </title> <journal> Communications of the ACM, </journal> <volume> vol. 40, </volume> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: trends are shaping the evolution of software development techniques for these distributed real-time applications and endsystems: Increased focus on middleware and integration frameworks: There is a trend in the real-time systems industry away from programming real-time applications from scratch to integrating applications using reusable components based on object-oriented (OO) middleware <ref> [3] </ref>. The objective of middleware is to decrease development cycle time by supporting the integration of reusable components implemented by different suppliers.
Reference: [4] <author> Z. Deng and J. W.-S. Liu, </author> <title> Scheduling Real-Time Applications in an Open Environment, </title> <booktitle> in Proceedings of the 18th IEEE Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: The objective of middleware is to decrease development cycle time by supporting the integration of reusable components implemented by different suppliers. Increased focus on QoS-enabled components and open systems: There is increasing demand for remote method invocation and messaging technology to simplify the collaboration of open distributed application components <ref> [4] </ref> that possess deterministic and statistical QoS requirements. These components must be customizable to meet the functionality and QoS requirements of applications developed in various contexts.
Reference: [5] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: Several international standardization efforts are currently addressing QoS-related issues associated with COTS hardware and software. One particularly noteworthy standardization effort is the OMG CORBA specification <ref> [5] </ref>. CORBA is OO middleware software that allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run 1 on, or what communication protocols and networks are used to interconnect distributed objects [6]. <p> The TAO ORB endsystem contains the network interface, operating system, communication protocol, and CORBA middleware components and features shown in Figure 1. TAO supports the standard OMG CORBA reference model <ref> [5] </ref>, with the following enhancements designed to overcome the shortcomings of conventional ORBs [17] for high-performance and real-time applications: Real-time IDL Stubs and Skeletons: TAO's IDL stubs and skeletons efficiently marshal and demarshal operation parameters, respectively [18]. <p> Likewise, lack of proper I/O subsystem integration yields excessive data copying, fragmentation, reassembly, context switching, synchronization, checksumming, demultiplexing, marshaling, and demarshaling overhead [25]. 3. ORB transport protocol implementations: Inefficient implementations of ORB transport protocols such as the CORBA Internet inter-ORB protocol (IIOP) <ref> [5] </ref> and Simple Flow Protocol (SFP) [26] can cause performance overhead and priority inversion. Specific factors responsible for these inversions include improper connection management strategies, inefficient sharing of endsystem resources, and excessive synchronization overhead in ORB protocol implementations. 4. <p> The results in Section 4 illustrate the extent to which the priority inversion and non-determinism in an OS affect ORB performance and predictability. 3.2.2 The ORB Core A CORBA ORB Core implements the General Inter-ORB Protocol (GIOP) <ref> [5] </ref>, which defines a standard format for interop-erating between (potentially heterogeneous) ORBs. The ORB Core establishes connections and implements concurrency architectures that process GIOP requests. The following discussion outlines common sources of priority inversion and non-determinism in conventional ORB Core implementations.
Reference: [6] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: CORBA is OO middleware software that allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run 1 on, or what communication protocols and networks are used to interconnect distributed objects <ref> [6] </ref>. There has been recent progress towards standardizing CORBA for real-time [7] and embedded [8] systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications.
Reference: [7] <institution> Object Management Group, Realtime CORBA 1.0 Request for Proposals, OMG Document orbos/97-09-31 ed., </institution> <month> September </month> <year> 1997. </year>
Reference-contexts: There has been recent progress towards standardizing CORBA for real-time <ref> [7] </ref> and embedded [8] systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications.
Reference: [8] <author> Object Management Group, </author> <title> Minimum CORBA Request for Proposal, </title> <editor> OMG Document orbos/97-06-14 ed., </editor> <month> June </month> <year> 1997. </year>
Reference-contexts: There has been recent progress towards standardizing CORBA for real-time [7] and embedded <ref> [8] </ref> systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications. The goal of standardizing real-time CORBA is to enable real-time applications to interwork throughout embedded systems and heterogeneous distributed environments, such as the Internet.
Reference: [9] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: In general, conventional CORBA ORBs are not well suited for performance-sensitive, distributed real-time applications due to (1) lack of QoS specification interfaces, (2) lack of QoS enforcement, (3) lack of real-time programming features, and (4) overall lack of performance and predictability <ref> [9] </ref>. Although some operating systems, networks, and protocols now support real-time scheduling, they do not provide integrated end-to-end solutions [10]. Moreover, relatively little systems research has focused on strategies and tactics for real-time ORB endsystems.
References-found: 9

