URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-003.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: A Simulation Environment for Multimodeling  
Author: Paul A. Fishwick 
Keyword: Simulation, Phase Transitions, Simulation Environment]  
Affiliation: University of Florida  
Abstract: Large scale systems are typically quite difficult to model. Hierarchical decomposition has proven to be one successful method in managing model complexity, by refining model components into models of the same type as the lumped model. Many systems, however, cannot be modeled using this approach since each abstraction level is best defined using a different modeling technique. We present a multimodel approach which overcomes this limitation, and we illustrate the technique using a fairly simple scenario: boiling water. State and phase trajectories are presented along with an implementation using the SimPack simulation toolkit. Multimodeling has provided us with a mechanism for building models that are capable of producing answers over a wide range of fidelity. [Key Words: Multimodeling, Process Abstraction, Combined 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Francois E. </author> <title> Cellier. Combined Continuous System Simulation by Use of Digital Computers: Techniques and Tools. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology Zurich, </institution> <year> 1979. </year>
Reference-contexts: The idea of a multimodel has its roots within the work in combined simulation modeling. Combined modeling has traditionally referred to a integration of discrete event and continuous modeling within the same system description. Pritsker [19, 20] first implemented combined modeling in the GASP modeling language. Cellier <ref> [1] </ref> developed an approach to combined continuous/discrete event models implemented in a GASP language extension. Praehofer [18] extended the Discrete Event System Specification (DEVS) [25] to provide a formalism and a simulation environment for specifying combined continuous/discrete event models.
Reference: [2] <author> Francois E. </author> <title> Cellier. Continuous System Modeling. </title> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Classic discrete event simulation languages such as GPSS [21], SLAM [20], SIMSCRIPT [12] and SIMAN [16] have been used extensively over the past decade, while continuous languages such as CSMP, DESIRE [11] and continuous system language derivatives provide adequate support for modeling continuous systems <ref> [2] </ref> in the form of block models. As systems become large and complex, the analyst will require simulation software that can support a wide variety of model types. One solution to modeling complex systems in simulation languages is to convert all models into that language.
Reference: [3] <author> Paul A. Fishwick. </author> <title> Hierarchical Reasoning: Simulating Complex Processes over Multiple Levels of Abstraction. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1986. </year>
Reference-contexts: To enlarge our class of answerable questions, we must combine models together in some seamless fashion. Recent simulation methodology has developed concepts to model complex systems over multiple levels of abstraction <ref> [3, 4, 5] </ref>. Oren [14] defined a concept of multimodel to formalize models containing several submodels, only one of which is put into effect at any given time. The idea of a multimodel has its roots within the work in combined simulation modeling.
Reference: [4] <author> Paul A. Fishwick. </author> <title> The Role of Process Abstraction in Simulation. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 18(1):18 - 39, </volume> <month> January/February </month> <year> 1988. </year>
Reference-contexts: To enlarge our class of answerable questions, we must combine models together in some seamless fashion. Recent simulation methodology has developed concepts to model complex systems over multiple levels of abstraction <ref> [3, 4, 5] </ref>. Oren [14] defined a concept of multimodel to formalize models containing several submodels, only one of which is put into effect at any given time. The idea of a multimodel has its roots within the work in combined simulation modeling.
Reference: [5] <author> Paul A. Fishwick. </author> <title> Abstraction Level Traversal in Hierarchical Modeling. </title> <editor> In Bernard. P. Zeigler, Maurice Elzas, and Tuncer Oren, editors, </editor> <booktitle> Modelling and Simulation Methodology: Knowledge Systems Paradigms, </booktitle> <pages> pages 393 - 429. </pages> <publisher> Elsevier North Holland, </publisher> <year> 1989. </year>
Reference-contexts: To enlarge our class of answerable questions, we must combine models together in some seamless fashion. Recent simulation methodology has developed concepts to model complex systems over multiple levels of abstraction <ref> [3, 4, 5] </ref>. Oren [14] defined a concept of multimodel to formalize models containing several submodels, only one of which is put into effect at any given time. The idea of a multimodel has its roots within the work in combined simulation modeling.
Reference: [6] <author> Paul A. Fishwick. SimPack: </author> <title> Getting Started with Simulation Programming in C and C++. </title> <booktitle> In 1992 Winter Simulation Conference, </booktitle> <pages> pages 154 - 162, </pages> <address> Arlington, VA, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: We do not subscribe to the idea that, in order to model ever increasingly complicated systems, one must continue to extend a singular modeling CIS TR93-003 TBP: J. Discrete Event Dynamic Systems 3 approach. Instead, a blending of approaches is warranted. The multimodel approach uses SimPack <ref> [6] </ref> tools depending on the model types present in the abstraction hierarchy. SimPack is a collection of C and C++ libraries and executable programs for computer simulation. In this collection, several different simulation algorithms are supported including discrete event simulation, continuous simulation and multimodel simulation.
Reference: [7] <author> Paul A. Fishwick. </author> <title> An Integrated Approach to System Modelling using a Synthesis of Artificial Intelligence, </title> <booktitle> Software Engineering and Simulation Methodologies. ACM Transactions on Modeling and Computer Simulation, </booktitle> <volume> 2(3), </volume> <year> 1993. </year>
Reference-contexts: Our approach multimodeling advocates the use of existing, well known model types (such as Petri networks, automata, Markov models and block models) within the same model structure: a multimodel. Multimodeling <ref> [9, 7] </ref> is the process of engineering a model by combining different model types to form an abstraction network or hierarchy.
Reference: [8] <author> Paul A. Fishwick. </author> <title> Simulation Model Design and Execution: Building Digital Worlds. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <note> (to be published as a textbook). </note>
Reference-contexts: Discrete Event Dynamic Systems 20 CIS TR93-003 TBP: J. Discrete Event Dynamic Systems 21 was demonstrated in section 4. SimPack is available and may be freely obtained by contacting the author. An accompanying text, including SimPack and multimodeling examples is nearing completion <ref> [8] </ref>. Although we have demonstrated our multimodel approach on the system of boiling water, we believe our method to be applicable to many more scenarios where different levels of abstraction are coded in the model form most appropriate for those levels.
Reference: [9] <author> Paul A. Fishwick and Bernard P. Zeigler. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 2(1):52 - 81, </volume> <year> 1992. </year>
Reference-contexts: Our approach multimodeling advocates the use of existing, well known model types (such as Petri networks, automata, Markov models and block models) within the same model structure: a multimodel. Multimodeling <ref> [9, 7] </ref> is the process of engineering a model by combining different model types to form an abstraction network or hierarchy.
Reference: [10] <author> R. E. Kalman, P. L. Falb, and M. A. Arbib. </author> <title> Topics in Mathematical Systems Theory. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1962. </year> <note> CIS TR93-003 TBP: J. Discrete Event Dynamic Systems 22 </note>
Reference-contexts: Even though classical system theory <ref> [10, 15] </ref> provides strong definitions for individual systems and system networks there is little concentration on the concept of an event. Events were not critical to the study of systems within the classical theory.
Reference: [11] <author> Granino A. Korn. </author> <title> Interactive Dynamic System Simulation. </title> <publisher> McGraw Hill, </publisher> <year> 1989. </year>
Reference-contexts: Classic discrete event simulation languages such as GPSS [21], SLAM [20], SIMSCRIPT [12] and SIMAN [16] have been used extensively over the past decade, while continuous languages such as CSMP, DESIRE <ref> [11] </ref> and continuous system language derivatives provide adequate support for modeling continuous systems [2] in the form of block models. As systems become large and complex, the analyst will require simulation software that can support a wide variety of model types.
Reference: [12] <author> H. M. Markowitz, P. J. Kiviat, and R. Villaneuva. </author> <title> Simscript II.5 Programming Language. </title> <publisher> CACI, Inc., </publisher> <address> Los Angeles, CA, </address> <year> 1987. </year>
Reference-contexts: Continuous methods are normally associated with block diagram methods for control and system engineering. Some available software can perform both types of simulation; however, bulk support is usually available in only one form. Classic discrete event simulation languages such as GPSS [21], SLAM [20], SIMSCRIPT <ref> [12] </ref> and SIMAN [16] have been used extensively over the past decade, while continuous languages such as CSMP, DESIRE [11] and continuous system language derivatives provide adequate support for modeling continuous systems [2] in the form of block models.
Reference: [13] <author> Richard E. Nance. </author> <title> The Time and State Relationships in Simulation Modeling. </title> <journal> Communications of the ACM, </journal> <volume> 24(4):173 - 179, </volume> <month> April </month> <year> 1981. </year>
Reference-contexts: Even though classical system theory [10, 15] provides strong definitions for individual systems and system networks there is little concentration on the concept of an event. Events were not critical to the study of systems within the classical theory. Simulation researchers such as Zeigler [22] and Nance <ref> [13] </ref> extended the classical theory to formally specify discrete event models and the roles of events, state and time within simulation models. We now present a brief review of the resulting DEVS formalism as a prelude to mapping the FSA-controlled multimodel into a DEVS equivalent [22].
Reference: [14] <author> Tuncer I. Oren. </author> <title> Dynamic Templates and Semantic Rules for Simulation Advisors and Certifiers. </title> <editor> In Paul Fishwick and Richard Modjeski, editors, </editor> <title> Knowledge Based Simulation: </title> <booktitle> Methodology and Application, </booktitle> <pages> pages 53 - 76. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: To enlarge our class of answerable questions, we must combine models together in some seamless fashion. Recent simulation methodology has developed concepts to model complex systems over multiple levels of abstraction [3, 4, 5]. Oren <ref> [14] </ref> defined a concept of multimodel to formalize models containing several submodels, only one of which is put into effect at any given time. The idea of a multimodel has its roots within the work in combined simulation modeling.
Reference: [15] <author> Louis Padulo and Michael A. Arbib. </author> <title> Systems Theory: A Unified State Space Approach to Continuous and Discrete Systems. </title> <editor> W. B. </editor> <publisher> Saunders, </publisher> <address> Philadelphia, PA, </address> <year> 1974. </year>
Reference-contexts: Even though classical system theory <ref> [10, 15] </ref> provides strong definitions for individual systems and system networks there is little concentration on the concept of an event. Events were not critical to the study of systems within the classical theory.
Reference: [16] <author> C. D. Pegden, R. P. Sadowski, and R. E. Shannon. </author> <title> Introduction to Simulation using SIMAN. Systems Modeling Corporation, </title> <address> Sewickley, PA., </address> <year> 1990. </year>
Reference-contexts: Continuous methods are normally associated with block diagram methods for control and system engineering. Some available software can perform both types of simulation; however, bulk support is usually available in only one form. Classic discrete event simulation languages such as GPSS [21], SLAM [20], SIMSCRIPT [12] and SIMAN <ref> [16] </ref> have been used extensively over the past decade, while continuous languages such as CSMP, DESIRE [11] and continuous system language derivatives provide adequate support for modeling continuous systems [2] in the form of block models.
Reference: [17] <author> James L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: Figure 5 shows a Petri net controller for this purpose. The Petri net, P N , is defined as follows <ref> [17] </ref>: * P N ET =&lt; P; T; I; O &gt; CIS TR93-003 TBP: J.
Reference: [18] <author> Herbert Praehofer. </author> <title> Systems Theoretic Formalisms for Combined Discrete Continuous System Simulation. </title> <journal> International Journal of General Systems, </journal> <volume> 19(3) </volume> <pages> 219-240, </pages> <year> 1991. </year>
Reference-contexts: Combined modeling has traditionally referred to a integration of discrete event and continuous modeling within the same system description. Pritsker [19, 20] first implemented combined modeling in the GASP modeling language. Cellier [1] developed an approach to combined continuous/discrete event models implemented in a GASP language extension. Praehofer <ref> [18] </ref> extended the Discrete Event System Specification (DEVS) [25] to provide a formalism and a simulation environment for specifying combined continuous/discrete event models.
Reference: [19] <author> A. A. B. Pritsker. </author> <title> The GASP IV Simulation Language. </title> <publisher> John Wiley and Sons, </publisher> <year> 1974. </year>
Reference-contexts: The idea of a multimodel has its roots within the work in combined simulation modeling. Combined modeling has traditionally referred to a integration of discrete event and continuous modeling within the same system description. Pritsker <ref> [19, 20] </ref> first implemented combined modeling in the GASP modeling language. Cellier [1] developed an approach to combined continuous/discrete event models implemented in a GASP language extension.
Reference: [20] <author> A. A. B. Pritsker. </author> <title> Introduction to Simulation and SLAM II. </title> <publisher> Halsted Press, </publisher> <year> 1986. </year>
Reference-contexts: The idea of a multimodel has its roots within the work in combined simulation modeling. Combined modeling has traditionally referred to a integration of discrete event and continuous modeling within the same system description. Pritsker <ref> [19, 20] </ref> first implemented combined modeling in the GASP modeling language. Cellier [1] developed an approach to combined continuous/discrete event models implemented in a GASP language extension. <p> Continuous methods are normally associated with block diagram methods for control and system engineering. Some available software can perform both types of simulation; however, bulk support is usually available in only one form. Classic discrete event simulation languages such as GPSS [21], SLAM <ref> [20] </ref>, SIMSCRIPT [12] and SIMAN [16] have been used extensively over the past decade, while continuous languages such as CSMP, DESIRE [11] and continuous system language derivatives provide adequate support for modeling continuous systems [2] in the form of block models.
Reference: [21] <author> Thomas J. Schriber. </author> <title> An Introduction to Simulation using GPSS/H. </title> <publisher> John Wiley, </publisher> <year> 1991. </year>
Reference-contexts: Continuous methods are normally associated with block diagram methods for control and system engineering. Some available software can perform both types of simulation; however, bulk support is usually available in only one form. Classic discrete event simulation languages such as GPSS <ref> [21] </ref>, SLAM [20], SIMSCRIPT [12] and SIMAN [16] have been used extensively over the past decade, while continuous languages such as CSMP, DESIRE [11] and continuous system language derivatives provide adequate support for modeling continuous systems [2] in the form of block models.
Reference: [22] <author> Bernard P. Zeigler. </author> <title> Theory of Modelling and Simulation. </title> <publisher> John Wiley and Sons, </publisher> <year> 1976. </year>
Reference-contexts: Alternatively, the modeller may decide to terminate the refinement process leaving the transition non-deterministically specified. The decision whether to continue refinement should be based on the modeling objectives, the accuracy required, and the computational resources available <ref> [22, 23] </ref>. 2.3 Heterogeneous Refinement Heterogeneous refinement takes homogeneous refinement a step further by loosening the restriction of equivalent model types. <p> Even though classical system theory [10, 15] provides strong definitions for individual systems and system networks there is little concentration on the concept of an event. Events were not critical to the study of systems within the classical theory. Simulation researchers such as Zeigler <ref> [22] </ref> and Nance [13] extended the classical theory to formally specify discrete event models and the roles of events, state and time within simulation models. We now present a brief review of the resulting DEVS formalism as a prelude to mapping the FSA-controlled multimodel into a DEVS equivalent [22]. <p> as Zeigler <ref> [22] </ref> and Nance [13] extended the classical theory to formally specify discrete event models and the roles of events, state and time within simulation models. We now present a brief review of the resulting DEVS formalism as a prelude to mapping the FSA-controlled multimodel into a DEVS equivalent [22]. Time, in discrete event systems, is assumed to be real-valued (T = R + 0 ).
Reference: [23] <author> Bernard P. Zeigler. </author> <title> Multi-Facetted Modelling and Discrete Event Simulation. </title> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: Alternatively, the modeller may decide to terminate the refinement process leaving the transition non-deterministically specified. The decision whether to continue refinement should be based on the modeling objectives, the accuracy required, and the computational resources available <ref> [22, 23] </ref>. 2.3 Heterogeneous Refinement Heterogeneous refinement takes homogeneous refinement a step further by loosening the restriction of equivalent model types.
Reference: [24] <author> Bernard P. Zeigler. </author> <title> DEVS Representation of Dynamical Systems: Event-Based Intelligent Control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1):72 - 80, </volume> <month> January </month> <year> 1989. </year>
Reference-contexts: We now present a brief review of the resulting DEVS formalism as a prelude to mapping the FSA-controlled multimodel into a DEVS equivalent [22]. Time, in discrete event systems, is assumed to be real-valued (T = R + 0 ). The DEVS structure <ref> [24] </ref> &lt; U; Y; S; ffi; ; ta &gt; is as follows: * U is the input event set. * Y is the output set. * S is the sequential state set. * ffi ext : QfiU ! S is the external transition function.
Reference: [25] <author> Bernard P. Zeigler. </author> <title> Object Oriented Simulation with Hierarchical, Modular Models: Intelligent Agents and Endomorphic Systems. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Pritsker [19, 20] first implemented combined modeling in the GASP modeling language. Cellier [1] developed an approach to combined continuous/discrete event models implemented in a GASP language extension. Praehofer [18] extended the Discrete Event System Specification (DEVS) <ref> [25] </ref> to provide a formalism and a simulation environment for specifying combined continuous/discrete event models.
References-found: 25

