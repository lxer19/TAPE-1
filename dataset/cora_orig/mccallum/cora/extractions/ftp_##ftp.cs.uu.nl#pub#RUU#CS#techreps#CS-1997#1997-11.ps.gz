URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-11.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: richard@win.tue.nl  Remco.Veltkamp@cs.ruu.nl  e-mail: edwin@cs.uct.ac.za  
Title: Constraints on Objects, Conceptual Model and Implementation  
Author: Richard H. M. C. Kelleners Remco C. Veltkamp Edwin H. Blake 
Address: Kruislaan 413, 1098 SJ Amsterdam, The Netherlands, and  Den Dolech 2, 5612 AZ, Eindhoven, The Netherlands  Padualaan 14, 3584 CH Utrecht, The Netherlands  Rondebosch 7700, South Africa  
Affiliation: CWI,  University of Eindhoven, Dept. Computing Science  Utrecht University, Dept. Computing Science  University of Cape Town, Dept. Computer Science  
Pubnum: Technical  
Abstract: This paper presents the design and implementation of a model for combining object oriented programming and constraint programming. This model aims to be an aid in the development of computer graphics applications that use these two programming paradigms. We first identify the typical aspects of the paradigms and how they conflict with each other. Next, we show how these conflicts are solved in the model by radically separating the object oriented paradigm from the constraint paradigm. The communication between these two systems is then managed by a third party. A prototype of the model was implemented, based on a coordination language a language for managing concurrent, independent processes. This allows us to build an ideal implementation. Although this ideal implementation does not yield the necessary performance in speed, it clearly demonstrates that the model provides an appropriate way for setting up an application that incorporates object oriented programming as well as constraints.
Abstract-found: 1
Intro-found: 1
Reference: [AHS93] <author> F. Arbab, I. Herman, and P. </author> <title> Spilling. An overview of Manifold and its implementation. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 5(1):23 - 70, </volume> <month> February </month> <year> 1993. </year>
Reference: [Arb96] <author> Farhad Arbab. </author> <title> The iwim model for coordiantion of concurrent activities. In Coordination Languages and Models, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> volume 1061, </volume> <pages> pages 34-56. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: The general outline of the Communication Server was inspired by the language 3 via events (zigzag arrows) and data flows (double arrow), which are provided by the Communication Server. MANIFOLD and its underlying concepts (see section 3.1 and <ref> [Arb96] </ref>). The two most important notions are event and data flow. event An event is an asynchronous, non-decomposable (atomic) message, broadcasted by the Communication Server or by a constrainable, constraint, solver, or coordinator entity. * Raising an event means that it is broadcasted to the environment.
Reference: [CBL91] <author> Eric Cournarie and Michel Beaudouin-Lafon. </author> <title> Alien: a prototype-based constraint system. </title> <editor> In Laffra et al. </editor> <booktitle> [LBdMP95], </booktitle> <pages> pages 92-110. </pages>
Reference-contexts: Another approach is to limit access to private data to constraint-objects or the constraint solver-objects only. For example, C ++ provides 2 the `friend' declaration to grant functions access to the private part of objects. This is also comparable to the approach taken by <ref> [CBL91] </ref>, where special variables (slots) are accessible by constraints only. However, encapsulation is still violated, and the C ++ friend construct could be easily misused. On the other hand, under strict information hiding, constraint satisfaction on objects cannot be guaranteed [VK95].
Reference: [Dav91] <author> Jacques Davy. </author> <title> Go, a graphical and interactive C++ toolkit for application data presentation and editing. </title> <booktitle> In Proceedings 5th Annual Technical Conference on the X Window System, </booktitle> <year> 1991. </year>
Reference-contexts: Some methods are completely based on message passing. In [LvdB91], the methods of an object that may violate constraints are guarded by so-called propagators. The propagators send messages to other objects to maintain the constraints. This technique is similar to the pre- and postcon-dition facilities in Go <ref> [Dav91] </ref> [GoP93]. This approach is limited to constraint maintenance, starting with a consistent situation. Equate [Wil91] uses term rewriting as a guide to find solutions. Constraints are specified as equations, and rewrite rules convert equations into equivalent sets of equations that can be solved by messages to an object.
Reference: [FBB92] <author> Bjorn N. Freeman-Benson and Alan Borning. </author> <title> Integrating constraints with an object-oriented language. </title> <editor> In O. Lehrmann Madsen, editor, </editor> <booktitle> Proceedings ECOOP'92-European Conference on Object-Oriented Programming, Utrecht, 1992, Lecture Notes in Computer Science 615, </booktitle> <pages> pages 268-286. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [GoP93] <author> Bull-Imaging and Office Solutions. </author> <title> GoPATH 1.2.0 | A Path To Object Oriented 19 Graphics, a public domain environment for graphical and interactive application development, </title> <year> 1993. </year>
Reference-contexts: Some methods are completely based on message passing. In [LvdB91], the methods of an object that may violate constraints are guarded by so-called propagators. The propagators send messages to other objects to maintain the constraints. This technique is similar to the pre- and postcon-dition facilities in Go [Dav91] <ref> [GoP93] </ref>. This approach is limited to constraint maintenance, starting with a consistent situation. Equate [Wil91] uses term rewriting as a guide to find solutions. Constraints are specified as equations, and rewrite rules convert equations into equivalent sets of equations that can be solved by messages to an object.
Reference: [HB94] <author> Quinton Hoole and Edwin Blake. </author> <title> OOCS constraints in an object oriented environment. </title> <booktitle> In Proceedings 4th Eurographics Workshop on Object-Oriented Graphics, Sintra, Portugal, </booktitle> <pages> pages 215-230, </pages> <month> 9 - 11 May </month> <year> 1994. </year>
Reference-contexts: The rewrite rules which rewrite the equations are provided by the classes and are similar to the program clauses of logic programs. The Object-Oriented Constraint System (OOCS) <ref> [HB94] </ref> is similar, does not use term rewriting. Instead, an object supplies a set of solution program segments for each constraint that has been imposed upon it. The object guarantees that execution of any of these segments will leave the object in a state which satisfies the constraint.
Reference: [LBdMP95] <author> C. Laffra, E. H. Blake, V. de Mey, and X. Pintado, </author> <title> editors. Object Oriented Programming for Graphics, Focus on Computer Graphics. </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference: [LvdB91] <author> Chris Laffra and Jan van den Bos. </author> <title> Propagators and concurrent constraints. </title> <journal> OOPS Messenger, </journal> <volume> 2(2) </volume> <pages> 68-72, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: A number of ways have been described to combine objects and constraints. Some methods are completely based on message passing. In <ref> [LvdB91] </ref>, the methods of an object that may violate constraints are guarded by so-called propagators. The propagators send messages to other objects to maintain the constraints. This technique is similar to the pre- and postcon-dition facilities in Go [Dav91] [GoP93].
Reference: [Ran91] <author> John R. Rankin. </author> <title> A graphics object oriented constraint solver. </title> <editor> In Laffra et al. </editor> <booktitle> [LBdMP95], </booktitle> <pages> pages 71-91. </pages>
Reference-contexts: This however, allows every other object to get and set these values, which is clearly against the object-oriented philosophy. One way to restrict this, is to have an object allow value setting only when its internal constraints remain satisfied (see <ref> [Ran91] </ref>). A constraint could be made internal by constructing a `container object', which contains the constraint and the operand objects, but this does not solve the basic problem. Another approach is to limit access to private data to constraint-objects or the constraint solver-objects only.
Reference: [Sut63] <author> Ivan E. Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <address> Detroit, Michigan, </address> <month> May 21-23 </month> <year> 1963, </year> <pages> pages 329-345. </pages> <publisher> AFIPS Press, </publisher> <year> 1963. </year>
Reference: [VK95] <author> Remco C. Veltkamp and Richard H. M. C. Kelleners. </author> <title> Information hiding and the complexity of constraint satisfaction. </title> <editor> In Remco C. Veltkamp and Edwin H. Blake (eds), </editor> <booktitle> Programming Paradigms in Graphics, </booktitle> <pages> pages 49-66. </pages> <publisher> Springer-Verlag, </publisher> <address> ISBN 3-211-82788-9, </address> <year> 1995. </year>
Reference-contexts: This is also comparable to the approach taken by [CBL91], where special variables (slots) are accessible by constraints only. However, encapsulation is still violated, and the C ++ friend construct could be easily misused. On the other hand, under strict information hiding, constraint satisfaction on objects cannot be guaranteed <ref> [VK95] </ref>. If one is to sacrifice strict information hiding in order to facilitate constraint satisfaction, care should be taken not to allow abuse.
Reference: [Wil91] <author> Michael Wilk. Equate: </author> <title> an object-oriented constraint solver. </title> <booktitle> In Proceedings OOPSLA'91, </booktitle> <pages> pages 286-298, </pages> <year> 1991. </year> <month> 20 </month>
Reference-contexts: The propagators send messages to other objects to maintain the constraints. This technique is similar to the pre- and postcon-dition facilities in Go [Dav91] [GoP93]. This approach is limited to constraint maintenance, starting with a consistent situation. Equate <ref> [Wil91] </ref> uses term rewriting as a guide to find solutions. Constraints are specified as equations, and rewrite rules convert equations into equivalent sets of equations that can be solved by messages to an object.
References-found: 13

