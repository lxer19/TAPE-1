URL: http://www.cs.utoronto.ca/~cogrobo/jpThesis.ps.Z
Refering-URL: http://www.cs.utoronto.ca/~cogrobo/
Root-URL: 
Title: Temporal Reasoning in the Situation Calculus  
Author: by Javier Andres Pinto 
Degree: A thesis submitted in conformity with the requirements for the degree of Doctor of Philosophy  
Note: c Copyright by Javier Andres Pinto 1994  
Address: Toronto  
Affiliation: Graduate Department of Computer Science University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Allen, J., and Ferguson, G. </author> <title> Action in interval temporal logic. </title> <booktitle> In The Second Symposium on Logical Formalizations of Commonsense Reasoning (Jan. </booktitle> <year> 1993), </year> <pages> pp. 12-22. </pages>
Reference-contexts: We also make use of the notion of natural process, which corresponds to a set of occurring natural actions. In chapter 7, we look at three other approaches to temporal reasoning and study their relationship to the situation calculus. First, we look at the interval temporal logic <ref> [2, 3, 4, 5, 1] </ref>, and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events [25, 24, 56], and argue that its formulation as a logic program has certain drawbacks. <p> Therefore, event occurrences may coincide, overlap, be one after the other, etc. Most of the work on this temporal logic concentrates on the logical specification of events, and provides a mechanism to specify the effects that events have on the world. However, until very recently <ref> [1] </ref>, the frame problem had not been addressed. In [1], Allen and Ferguson address the frame problem by appealing to Schubert's explanation closure axioms. However, they do not offer, as Reiter does [47], a general mechanism to automatically generate frame axioms. Also, they do not address the ramification problem. <p> Most of the work on this temporal logic concentrates on the logical specification of events, and provides a mechanism to specify the effects that events have on the world. However, until very recently <ref> [1] </ref>, the frame problem had not been addressed. In [1], Allen and Ferguson address the frame problem by appealing to Schubert's explanation closure axioms. However, they do not offer, as Reiter does [47], a general mechanism to automatically generate frame axioms. Also, they do not address the ramification problem.
Reference: [2] <author> Allen, J. F. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the ACM 26, </journal> <volume> 11 (1983), </volume> <pages> 832-843. </pages>
Reference-contexts: We also make use of the notion of natural process, which corresponds to a set of occurring natural actions. In chapter 7, we look at three other approaches to temporal reasoning and study their relationship to the situation calculus. First, we look at the interval temporal logic <ref> [2, 3, 4, 5, 1] </ref>, and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events [25, 24, 56], and argue that its formulation as a logic program has certain drawbacks. <p> We study three different temporal logics, chosen because they represent the most widely utilized frameworks for reasoning about action and time in Knowledge Representation. First, we discuss the Interval Temporal Logic proposed by James Allen <ref> [2, 3] </ref>. Basically, we discuss the issues that were the primary motivation for the development of the interval logic, and how their treatment contrasts with the approach used in this work. <p> This embedding suggests that much of the expressiveness of temporal logics of time is present in the situation calculus. 86 7.2. INTERVAL TEMPORAL LOGIC. 87 7.2 Interval Temporal Logic. In <ref> [2, 3] </ref>, James Allen proposed a linear temporal logic in which the structure of time is based on intervals. Thus, the primitive temporal element is an interval. Allen introduces a set of 13 binary relations that are possible among temporal intervals (e.g., equal, before, during, etc.). <p> In this framework, moments are nonzero length intervals without internal structure. Thus, aside from moments, all other intervals can be subdivided into smaller subintervals. Allen argues that "the formal notion of a time point, which would not be decomposable, is not useful " <ref> [2, p. 834] </ref>.
Reference: [3] <author> Allen, J. F. </author> <title> Towards a general theory of action and time. </title> <booktitle> Artificial Intelligence 23 (1984), </booktitle> <pages> 123-154. </pages>
Reference-contexts: We also make use of the notion of natural process, which corresponds to a set of occurring natural actions. In chapter 7, we look at three other approaches to temporal reasoning and study their relationship to the situation calculus. First, we look at the interval temporal logic <ref> [2, 3, 4, 5, 1] </ref>, and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events [25, 24, 56], and argue that its formulation as a logic program has certain drawbacks. <p> In fact, as we analyze in chapter 7, we can realize most of the representational features of some well known temporal logics based on a linear view of time. For example, Kowalski and Sergot's [25] Logic Programming based Calculus of Events and Allen's interval temporal logic <ref> [3] </ref>. 4.3 What Occurs? 4.3.1 Motivation. Adding the occurs predicate to the language does not introduce any complications in the case in which all the events that occur are completely determined. However, problems do arise when this is not the case. <p> This taxonomic division of properties of the world is not new. In fact, Galton [14] proposes a similar distinction within the framework of Allen's theory of time <ref> [3] </ref>. Galton uses the terminology state of motion and state of position for properties that correspond to our discrete fluents and continuous parameters respectively. Also, related ideas are explored by Shanahan in the framework of the event calculus in logic programming [55]. <p> We study three different temporal logics, chosen because they represent the most widely utilized frameworks for reasoning about action and time in Knowledge Representation. First, we discuss the Interval Temporal Logic proposed by James Allen <ref> [2, 3] </ref>. Basically, we discuss the issues that were the primary motivation for the development of the interval logic, and how their treatment contrasts with the approach used in this work. <p> This embedding suggests that much of the expressiveness of temporal logics of time is present in the situation calculus. 86 7.2. INTERVAL TEMPORAL LOGIC. 87 7.2 Interval Temporal Logic. In <ref> [2, 3] </ref>, James Allen proposed a linear temporal logic in which the structure of time is based on intervals. Thus, the primitive temporal element is an interval. Allen introduces a set of 13 binary relations that are possible among temporal intervals (e.g., equal, before, during, etc.). <p> So far, our discussion has been centered on the characteristics of the structure of time in the interval temporal logic. Another important aspect of the logic has to do with the notions of events and actions. In <ref> [3] </ref>, Allen discusses the issue of integrating a notion of event with the logic's temporal structure. Naturally, given the interval based structure of time of the logic, events have duration. Therefore, event occurrences may coincide, overlap, be one after the other, etc.
Reference: [4] <author> Allen, J. F., and Hayes, P. J. </author> <title> A common-sense theory of time. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence (IJCAI-85) (1985), </booktitle> <pages> pp. 528-531. </pages>
Reference-contexts: We also make use of the notion of natural process, which corresponds to a set of occurring natural actions. In chapter 7, we look at three other approaches to temporal reasoning and study their relationship to the situation calculus. First, we look at the interval temporal logic <ref> [2, 3, 4, 5, 1] </ref>, and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events [25, 24, 56], and argue that its formulation as a logic program has certain drawbacks.
Reference: [5] <author> Allen, J. F., and Hayes, P. J. </author> <title> Moments and points in an interval-based temporal logic. </title> <note> Computational Intelligence 5 (Dec. </note> <year> 1989), </year> <pages> 225-238. </pages>
Reference-contexts: We also make use of the notion of natural process, which corresponds to a set of occurring natural actions. In chapter 7, we look at three other approaches to temporal reasoning and study their relationship to the situation calculus. First, we look at the interval temporal logic <ref> [2, 3, 4, 5, 1] </ref>, and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events [25, 24, 56], and argue that its formulation as a logic program has certain drawbacks. <p> Thus, aside from moments, all other intervals can be subdivided into smaller subintervals. Allen argues that "the formal notion of a time point, which would not be decomposable, is not useful " [2, p. 834]. In later work, Allen and Hayes <ref> [5] </ref> argue that the difference between interval based and point based temporal structures is motivated by "different sources for intuitions." While the interval temporal logic is meant to model time as used in natural language, point-based time is used in the realm of classical physics. <p> Obviously, this requires that time be modeled as isomorphic to the non-negative real numbers. Thus, we must impose a point based temporal structure in our logic. Naturally, the question arises as to whether there is some loss of expressive power when choosing one structure of time over another. In <ref> [5] </ref>, Allen and Hayes show that their logic accepts models in which the structure of time is such that intervals are modeled as ordered binary tuples of real numbers. Unfortunately, due to the properties of the reals, moments cannot be appropriately modeled, thus they cannot exist.
Reference: [6] <author> Allen, J. F., and Koomen, J. A. </author> <title> Planning using a temporal world model. </title> <booktitle> In Proceedings of the Eighth International Joint Conference on Artificial Intelligence (IJCAI-83) (1983), </booktitle> <pages> pp. 741-747. </pages>
Reference-contexts: First, they offer interesting taxonomies of actions (e.g., pushbutton actions, maintenance actions, etc.[1]). They utilize the notion of trying to perform an action, as opposed to a simple execution of the action. Another interesting development is the study of planning algorithms within the interval temporal logic <ref> [6] </ref>. Unfortunately, this latter work seems to lack a careful analysis of soundness and completeness with respect to the underlying theory. It seems, however, that it would be very beneficial to study these issues in the realm of the situation calculus. 7.3 Calculus of Events. 7.3.1 A Critique.
Reference: [7] <author> Apt, K., and Bezem, M. </author> <title> Acyclic programs. </title> <booktitle> In Logic Programming: Proceedings of the Seventh International Conference. </booktitle> <year> (1990), </year> <editor> D. Warren and P. Szeredi, </editor> <booktitle> Eds., </booktitle> <pages> pp. 617-633. </pages>
Reference-contexts: The proof of this proposition is in the appendix. This proof is inductive and shows the completeness of the program relative to the ground literals of the program. An alternative is to appeal to a more general result due to Apt and Bezem <ref> [7] </ref>. It can be proven that the logic program presented in this section falls in the category of acyclic logic programs defined by Apt and Bezem [7]. <p> An alternative is to appeal to a more general result due to Apt and Bezem <ref> [7] </ref>. It can be proven that the logic program presented in this section falls in the category of acyclic logic programs defined by Apt and Bezem [7]. Acyclic logic programs are defined in the following manner: Let P be a program and M be a mapping from the elements of the Herbrand Base of the program to the natural numbers.
Reference: [8] <author> Bacchus, F., Tenenberg, J., and Koomen, J. </author> <title> A Non-Reified Temporal Logic. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (Toronto, </booktitle> <address> Ontario, Canada, </address> <month> May </month> <year> 1989), </year> <editor> R. Brachman, H. Levesque, and R. Reiter, Eds., </editor> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 2-10. </pages>
Reference-contexts: In Shoham's logic, it is not possible to take properties as objects and predicate about them or quantify over them. This ability seems to be the major advantage of using reified logics. Adding to the confusion created by Shoham's unorthodox use of the term "reify", Bacchus et al. <ref> [8] </ref> developed a non-reified temporal logic and proved that it subsumed the "reified" logic of Shoham's. Their paper can be seen as a strong argument against reification. However, it does not seem to apply to the more standard notion of reification [17].
Reference: [9] <author> Baker, A. </author> <title> A Simple Solution to the Yale Shooting Problem. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (May 1989), </booktitle> <editor> H. L. R. Brachman and R. Reiter, Eds., </editor> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 11-20. </pages>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> Many non-monotonic approaches to the frame problem are based on the minimization of this predicate (e.g., <ref> [9, 29] </ref>); however, we introduce it only as a shorthand. In particular, we use it to simplify the presentation of the following proposition: 3 All proofs are in the appendix. 2.1. <p> An important difference between this and other versions of the situation calculus (e.g., McCarthy and Hayes [38], Reiter [47]), is that we include a fluent sort. In other words, our fluents are reified. The use of situation calculus with reified fluents is also very common (e.g., <ref> [27, 9, 32] </ref> and others). In non-reified formulations of the situation calculus, fluents correspond to predicates that take one or more arguments. The last argument is the only one of sort situation. For instance, let L nr denote a classic situation calculus language with non-reified fluents. <p> Furthermore, several approaches to deal with the frame problem appeal to the minimization of the predicate ab (defined in (2.20)). For instance, Baker's solution to the frame problem <ref> [9, 10] </ref> uses a circumscription policy in which the predicate ab is minimized with the interpretation of the function symbol do allowed to vary. Such a policy cannot be expressed without reifying fluents. <p> For example, we extend the sort of fluents, as some other researchers do (e.g., <ref> [9] </ref>), with functions from fluents to fluents that mimic propositional operators.
Reference: [10] <author> Baker, A. </author> <title> Nonmonotonic Reasoning in the Framework of the Situation Calculus. </title> <booktitle> Artificial Intelligence 49 (1991). </booktitle>
Reference-contexts: Furthermore, several approaches to deal with the frame problem appeal to the minimization of the predicate ab (defined in (2.20)). For instance, Baker's solution to the frame problem <ref> [9, 10] </ref> uses a circumscription policy in which the predicate ab is minimized with the interpretation of the function symbol do allowed to vary. Such a policy cannot be expressed without reifying fluents. <p> Narratives are conceptually similar to ordered sets of actions that are known to have occurred. In their work, they present an approach related to the one discussed here. They solve the first problem mentioned above by appealing to Baker's circumscriptive solution to the frame problem <ref> [10] </ref>. The second problem is also solved using a circumscriptive policy. They choose to minimize a predicate Happens, which plays a conceptually similar role to the predicate occurs T . 4.3.2 The Preferential Policy.
Reference: [11] <author> Clark, K. </author> <title> Negation as Failure. In Logic and Databases, </title> <editor> H. Gallaire and J. Minker, Eds. </editor> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978, </year> <pages> pp. 293-322. </pages>
Reference-contexts: THE SITUATION CALCULUS AND OTHER TEMPORAL LOGICS. 7.3.5 A Logic Programming Implementation and a Soundness Argument. In this section we describe a logic programming implementation of a fragment of our extended situation calculus axiomatization, and show its soundness with respect to Clark's completion semantics <ref> [11] </ref>, under suitable circumstances. The program exhibits much of the functionality of the event calculus, but in view of its soundness, is on firmer ground.
Reference: [12] <author> Davis, E. </author> <title> Infinite loops in finite time: Some observations. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning (KR'92) (1992), </booktitle> <editor> C. R. B. Nebel and W. Swartout, Eds., </editor> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <pages> pp. 47-58. </pages>
Reference-contexts: For example, consider the problem of modeling the bouncing of a rubber ball. If the behavior of the ball is modeled in such a way that Zeno's paradox arises <ref> [12] </ref>, we may face a contradictory theory.
Reference: [13] <author> Etherington, D. W. </author> <title> Reasoning with Incomplete Information, Investigations of Non-Monotonic Reasoning. </title> <type> PhD thesis, </type> <institution> The University of British Columbia, </institution> <month> Apr. </month> <year> 1986. </year> <note> 117 118 BIBLIOGRAPHY </note>
Reference-contexts: P &lt; P 0 stands for P P 0 ^ :P 0 P. Here, we describe the model theoretic meaning of this circumscription. For a more comprehensive discussion refer to <ref> [36, 37, 26, 46, 13] </ref>. Let M 1 and M 2 be two arbitrary models of the theory in the language L with the tuples P and Z as before. We write M 1 P;Z M 2 if: 1. kM 1 k = kM 2 k. <p> B.2 Circumscribing Skolemized Theories It is well understood that existential theories are not logically equivalent to their skolemized versions. One of the consequences of this fact is that skolemization may change the set of minimal models of a theory <ref> [13] </ref>. On the positive side, we know that skolemization preserves satisfiability. Now, we would like to know if it is possible to retain this property by changing the circumscription policy. Thus, can we define a skolemized circumscription? In this appendix we show that this is indeed possible. <p> Furthermore, it is well known that if the constants are not allowed to vary the previous result does not hold <ref> [13] </ref>. Before we present a proof of the theorem, we state the basic properties of skolemization in the following lemma: Lemma B.2.1 Using the notation of the statement of the theorem B.2.1, the following holds: 1.
Reference: [14] <author> Galton, A. </author> <title> A critical examination of Allen's theory of action and time. </title> <booktitle> Artificial Intelligence 42, </booktitle> <month> 2-3 </month> <year> (1990), </year> <pages> 159-188. </pages>
Reference-contexts: A further distinction between discrete fluents and continuous parameters is that the former hold or do not hold throughout situations, whereas continuous parameters may change their value continuously within a situation. This taxonomic division of properties of the world is not new. In fact, Galton <ref> [14] </ref> proposes a similar distinction within the framework of Allen's theory of time [3]. Galton uses the terminology state of motion and state of position for properties that correspond to our discrete fluents and continuous parameters respectively.
Reference: [15] <author> Gelfond, M., and Lifschitz, V. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <booktitle> New Generation Computing 9 (1991), </booktitle> <pages> 365-385. </pages>
Reference-contexts: Therefore, nobody owns the book after John gave it to somebody. It is well known that logic programming is inappropriate for reasoning with non-categorical theories. In fact, the extension of the logic programming paradigm to work with such theories is a very active area of research <ref> [15] </ref>. Therefore, it should not be surprising that the examples 90 CHAPTER 7. THE SITUATION CALCULUS AND OTHER TEMPORAL LOGICS. of overcommitment mentioned above arise.
Reference: [16] <author> Gelfond, M., Lifschitz, V., and Rabinov, A. </author> <title> What are the Limitations of the Situation Calculus? In Working Notes, </title> <booktitle> AAAI Spring Symposium Series. Symposium:Logical Formalization of Commonsense Reasoning. </booktitle> <month> (Mar. </month> <year> 1991), </year> <pages> pp. 59-69. </pages>
Reference-contexts: So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. Unfortunately, as has been pointed out elsewhere (e.g., <ref> [16, 23, 55] </ref>), the original situation calculus is a limited language that has several shortcomings. Nevertheless, as Gelfond, Lifschitz and Rabinov argue [16], these limitations can be overcome. The objective of this thesis is twofold. <p> Unfortunately, as has been pointed out elsewhere (e.g., [16, 23, 55]), the original situation calculus is a limited language that has several shortcomings. Nevertheless, as Gelfond, Lifschitz and Rabinov argue <ref> [16] </ref>, these limitations can be overcome. The objective of this thesis is twofold. On the one hand, we want to extend the expressiveness of the situation calculus to deal with several of its limitations. <p> That is, how to represent, within the situation calculus, properties that vary continuously with time; for example, the position of a moving ball. Gelfond, Lifschitz and Rabinov <ref> [16] </ref> proposed an extension to the situation calculus in which there is a continuum of situations. As discussed in chapter 2, the situation calculus that we use requires that the set of situations be enumerable. Therefore, a continuum of situations is incompatible with this view. <p> This time, we propose to extend the language of the situation calculus with operators among actions that denote new concurrent actions. 5.1 Complex Actions. Until recently, the problem of using complex actions within the situation calculus had not been addressed. Gelfond, Lifschitz and Rabinov <ref> [16] </ref>, proposed an approach for a situation calculus in which situations form a continuum. In that context, they proposed a way to deal with complex actions. Unfortunately, their work is not directly applicable to a discrete situation calculus. <p> In the same manner as CR's approach to complex actions, we want a way of dealing with concurrent actions that inherits the solution to the frame problem. In order to introduce concurrency, we extend the language in a manner similar to <ref> [16] </ref>. Thus, we introduce the function + : A fi A ! A, so that a 1 + a 2 denotes the action of performing a 1 and a 2 concurrently. <p> We view these two phenomena as ramifications of the individual actions, which are derived from state constraints. To illustrate this, we use Lifschitz' bowl of soup example <ref> [16] </ref>. In this example we have a bowl of soup and the actions Lif tLef t and Lif tRight, which represent the actions of lifting the left and right side of the bowl respectively.
Reference: [17] <author> Genesereth, M. R., and Nilsson, N. J. </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Palo Alto, California, U.S.A., </address> <year> 1988. </year>
Reference-contexts: Their paper can be seen as a strong argument against reification. However, it does not seem to apply to the more standard notion of reification <ref> [17] </ref>. Actually, as was argued before, a reified language is in general more expressive than its unreified counterpart. Now, what is the price that one has to pay for the conveniences of having reification of fluents? One drawback is that one has to add the new holds predicate.
Reference: [18] <author> Georgeff, M. P. </author> <title> Many agents are better than one. </title> <booktitle> In The Frame Problem in Artificial Intelligence (Los Altos, </booktitle> <address> California, </address> <month> Apr. </month> <year> 1987), </year> <editor> F. M. Brown, Ed., </editor> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 58-76. </pages>
Reference-contexts: One of the hardest problems encountered in reasoning about actions has been the so called frame problem. This problem has attracted much interest in the AI community and many solutions for it have been proposed (e.g., <ref> [18, 20, 27, 58, 47, 54, 33] </ref>). Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics.
Reference: [19] <author> Goldblatt, R. </author> <title> Logics of Time and Computation. </title> <publisher> CSLI, </publisher> <year> 1987. </year>
Reference-contexts: We analyze the correctness and completeness of the implementation with respect to a logical specification written in the language of the situation calculus extended with the notion of occurrences. Third, we discuss the so called modal logic of concurrency <ref> [19] </ref>. This logic deals with pseudo-concurrent actions, thus no true concurrency is possible. This logic, exemplifies the family of logics in which modal operators are utilized to model notions of propositions being true now, true all times in the future, true in the next state, etc. <p> This logic, exemplifies the family of logics in which modal operators are utilized to model notions of propositions being true now, true all times in the future, true in the next state, etc. We show that the particular logic presented in <ref> [19] </ref> can be embedded within the extended situation calculus. Finally, in chapter 8, we present the conclusions and discuss some of the avenues along which this research can be extended. We also summarize what we believe are the main contributions of this work. Chapter 2 Formal Framework. <p> Finally, we discuss the relationship between modal temporal logics of time and our version of the situation calculus. In particular, we show that the propositional modal temporal logic presented in <ref> [19] </ref> can be embedded within the situation calculus. This embedding suggests that much of the expressiveness of temporal logics of time is present in the situation calculus. 86 7.2. INTERVAL TEMPORAL LOGIC. 87 7.2 Interval Temporal Logic. <p> Thus, the fact that our program is acyclic provides a stronger foundation to our approach to temporal reasoning in logic programming. 7.4 The Situation Calculus and Modal Temporal Logics. In this section, we show how the modal temporal logic of concurrency <ref> [19] </ref> can be embedded in the situation calculus. This embedding shows that this modal logic is strictly less expressive than the extended situation calculus we propose in chapter 4. <p> THE SITUATION CALCULUS AND OTHER TEMPORAL LOGICS. 7.4.1 The Temporal Logic. The Temporal Logic of Concurrency (TL for short) <ref> [19] </ref> is a propositional modal logic, in which the "possible worlds" are temporally ordered states. <p> M j= i A means that A is true in the state i ; M j= A means that A is true in every state. For a complete definition of the j= i relation see <ref> [19, p.72] </ref>. Axiom Schemata of TL: 2 (A ! B) ! (2A ! 2B); fl:A $ : fl A; 2 (A ! flA) ! (A ! 2A); (7.20) A U B $ B _ (A ^ fl (A U B)): TL also includes all tautologies.
Reference: [20] <author> Haas, A. R. </author> <title> The Case for Domain-Specific Frame Axioms. </title> <booktitle> In The Frame Problem in Artificial Intelligence, Proceedings of the 1987 Workshop (Los Altos, </booktitle> <address> CA, </address> <year> 1987), </year> <editor> F. M. Brown, Ed., </editor> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 343-348. </pages>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> One of the hardest problems encountered in reasoning about actions has been the so called frame problem. This problem has attracted much interest in the AI community and many solutions for it have been proposed (e.g., <ref> [18, 20, 27, 58, 47, 54, 33] </ref>). Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. <p> Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. Lately, there has been interest in the development of solutions based on standard monotonic logics. In particular, we appeal to the solution proposed by Reiter [47], which is based on the work of Haas <ref> [20] </ref>, Pednault [40], and Schubert [54]. In this section, we present Reiter's monotonic solution to the frame problem. This presentation is slightly different from the original due to the differences between our language and Reiter's.
Reference: [21] <author> Hanks, S., and McDermott, D. </author> <title> Nonmonotonic logic and temporal projection. </title> <booktitle> Artificial Intelligence 33, 3 (1987), </booktitle> <pages> 379-412. </pages>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> Adding the occurs predicate to the language does not introduce any complications in the case in which all the events that occur are completely determined. However, problems do arise when this is not the case. For instance, consider the Yale Shooting Problem <ref> [21] </ref>; it is common to pose it as the problem of determining the truth value of the literal: holds (Alive; do (Shoot; do (W ait; do (Load; S 0 )))): That is, we want to know whether a fluent holds in a completely determined situation. <p> Each problem is formalized as a circumscriptive theory (4.23) and differs in the domain axioms that are specified with each example. 4.4.1 The YSP. The Yale Shooting problem <ref> [21] </ref> was presented in the previous section.
Reference: [22] <author> Kautz, H. </author> <title> The logic of persistence. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence (AAAI-86) (1986), </booktitle> <pages> pp. 401-405. </pages>
Reference-contexts: So, in one class of axioms the shooting is done with the bullet aligned and the other with the bullet not aligned. 4.4.6 The Stolen Car Problem. The stolen car problem was proposed by Kautz <ref> [22] </ref> to illustrate problems that arise when an incomplete set of events is provided in a reasoning task. The basic idea is that an individual parks a car in the street.
Reference: [23] <author> Kowalski, R. </author> <title> Database Updates in the Event Calculus. </title> <type> Tech. Rep. Doc 86/12, </type> <institution> Imperial College, </institution> <month> July </month> <year> 1986. </year>
Reference-contexts: So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. Unfortunately, as has been pointed out elsewhere (e.g., <ref> [16, 23, 55] </ref>), the original situation calculus is a limited language that has several shortcomings. Nevertheless, as Gelfond, Lifschitz and Rabinov argue [16], these limitations can be overcome. The objective of this thesis is twofold.
Reference: [24] <author> Kowalski, R. </author> <title> Database Updates in the Event Calculus. </title> <booktitle> The Journal of Logic Programming 12 (1992), </booktitle> <pages> 121-146. </pages>
Reference-contexts: First, we look at the interval temporal logic [2, 3, 4, 5, 1], and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events <ref> [25, 24, 56] </ref>, and argue that its formulation as a logic program has certain drawbacks. Also, we show that the functionality of the event calculus can be realized within the situation calculus. Furthermore, we present a logic program as an alternative to the logic programming formulation of the situation calculus. <p> We conclude that Holds (after (E1,R)) must be true, which is clearly unintended. This problem stems from the choice of ontology, and seems to be caused by the Holds predicate, which states that time periods hold. In <ref> [24, p. 142] </ref>, Kowalski suggests that for a very specific class of problems "time periods can be eliminated altogether." This is suggested for computational, rather than representational reasons. However, it seems that time periods should be eliminated from the ontology for the proposal to work. <p> It is also worth noting that with the introduction of terminations and initiations (term, init and maximal) we can use an efficient algorithm for dealing with the frame problem in the cases in which complete information is at hand. Following Kowalski's proposal <ref> [24, pp.138-142] </ref>, we can 92 CHAPTER 7. THE SITUATION CALCULUS AND OTHER TEMPORAL LOGICS. define an algorithm to answer queries of the form holds (F; S), in which S is a completely determined situation.
Reference: [25] <author> Kowalski, R., and Sergot, M. </author> <title> A logic-based calculus of events. </title> <booktitle> New Generation Computing 4 (1986), </booktitle> <pages> 67-95. </pages>
Reference-contexts: First, we look at the interval temporal logic [2, 3, 4, 5, 1], and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events <ref> [25, 24, 56] </ref>, and argue that its formulation as a logic program has certain drawbacks. Also, we show that the functionality of the event calculus can be realized within the situation calculus. Furthermore, we present a logic program as an alternative to the logic programming formulation of the situation calculus. <p> AN ACTUAL PATH OF SITUATIONS. 29 We also introduce a notion of time, which allows us to establish a direct relationship between the situation calculus and linear temporal logics (e.g., the calculus of events <ref> [25] </ref>). Intuitively, each situation has a starting time and an ending time. During the time span of a situation no fluents change truth values 1 . We incorporate the sort T , interpreted as a continuous time line, into our language. <p> In fact, as we analyze in chapter 7, we can realize most of the representational features of some well known temporal logics based on a linear view of time. For example, Kowalski and Sergot's <ref> [25] </ref> Logic Programming based Calculus of Events and Allen's interval temporal logic [3]. 4.3 What Occurs? 4.3.1 Motivation. Adding the occurs predicate to the language does not introduce any complications in the case in which all the events that occur are completely determined. <p> Basically, we discuss the issues that were the primary motivation for the development of the interval logic, and how their treatment contrasts with the approach used in this work. Secondly, we carefully analyze Kowalski and Sergot's calculus of events <ref> [25] </ref>, which is a theory of time based on logic programming. We argue that this approach has certain technical flaws when interpreted as a first order theory. Furthermore, we present a situation calculus based logic program as an alternative to the one based on the calculus of events. <p> It seems, however, that it would be very beneficial to study these issues in the realm of the situation calculus. 7.3 Calculus of Events. 7.3.1 A Critique. The calculus of events was proposed as a general temporal logic framework. It was originally presented as a logic program <ref> [25] </ref> in which negation as failure plays an essential role. We have found it very difficult to ascribe a semantics to the calculus of events. In this section we point out some of the difficulties we have encountered with this proposal as a formal theory of time. <p> Both are two-place functions that take an action and a fluent as arguments. According to Kowalski, a term of the form after (a; f) "names" a time period. Furthermore, according to Kowalski and Sergot <ref> [25, p.87] </ref>, the sentence: Holds (p) (7.1) "expresses that the relationship associated with p holds for the time period p." For example, we can write: Holds (after (paint (Green); colour (Green))) that can be taken to mean that paint (Green) is an event that starts a time period in which the <p> CALCULUS OF EVENTS. 89 Among others, the time period after (E1,D) holds; this is the same as the time periods hT1 T3i and before (E3,D). Now, from rule G3 in Kowalski and Sergot's program <ref> [25, p.88] </ref> we know that: start (after (e; u); e): (7.2) Therefore, we may infer that the time period after (E1,R) is started by E1 at time T1. Now, we can easily provide axioms that make event E2 terminate only B and nothing else. <p> We have been unable to ascertain whether F holds or not because of lack of information. It is simple to imagine examples of the first case. The second possibility arises, for example, with case 3 in <ref> [25, p.90] </ref>, where two events e and e 0 are known, the first one initiates a fluent u and the second one terminates a fluent u 0 , with u and u 0 mutually exclusive. <p> &lt; s 0 ) ^ (7.13) maximal (s; s 1 ; f ) ^ maximal (s 2 ; s 0 ; f 0 ): The definition of maximal (axiom (7.8)) and theorems (7.10)-(7.10) capture the intuitions be hind the cases of start and end points of intervals as discussed in <ref> [25, pp. 90-93] </ref>. It is important to note that the predicates introduced in this subsection do not depend on the definition of actual. However, by integrating the notion of an interval with the notion of an actual time line we gain the same representational features claimed for the event calculus. <p> The assertion occurs T (E; T ) is an implicit assertion that, in addition, P oss (E; S) is true, where S is the state which includes time T (see axiom (4.1)). This perspective is problematic in the logic programming setting (see Kowalski <ref> [25] </ref> for an example). 2. The preconditions of the event E are known to be true at time T .
Reference: [26] <author> Lifschitz, V. </author> <title> Computing Circumscription. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence (IJCAI-85) (1985), </booktitle> <pages> pp. 121-127. </pages>
Reference-contexts: Thus, if it is consistent to make Shanahan's assumption, then our policy yields the same results when the chronological ordering of the actions is known. In order to formalize the minimization, we use Circumscription <ref> [36, 37, 26] </ref>. To simplify the presentation of the circumscription policy, we consider the predicates occurs, holds T , during, and occursBet and the function end to be abbreviations (as defined by (4.7), (4.9), (4.9), (4.11) and (4.4)), which are not part of the extended language of the situation calculus. <p> That is, the minimization of the actions does not directly depend on the situations in which the actions are performed. In the examples that follow, we make use of model-theoretic arguments to justify our conclusions. Therefore, based on Lifschitz's results <ref> [26] </ref>, we present the model-theoretic meaning of the above circumscription. Let M 1 and M 2 be two arbitrary models of a theory of action occ . <p> It follows directly from the induction axiom and the translation rules. Appendix B Circumscription. B.1 Parallel Circumscription. The discussion in this section is based on <ref> [26] </ref>. In [36, 37] McCarthy proposed to base non-monotonic reasoning on the notion of truth in a set of most preferred models of a logical theory. Preferred models are selected based on the minimization of the extension of some predicate or predicates. Assume that L is a second order language. <p> P &lt; P 0 stands for P P 0 ^ :P 0 P. Here, we describe the model theoretic meaning of this circumscription. For a more comprehensive discussion refer to <ref> [36, 37, 26, 46, 13] </ref>. Let M 1 and M 2 be two arbitrary models of the theory in the language L with the tuples P and Z as before. We write M 1 P;Z M 2 if: 1. kM 1 k = kM 2 k.
Reference: [27] <author> Lifschitz, V. </author> <title> Formal Theories of Action. </title> <booktitle> In The Frame Problem in Artificial Intelligence (Los Altos, </booktitle> <address> California, </address> <month> Apr. </month> <year> 1987), </year> <editor> F. M. Brown, Ed., </editor> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 35-57. </pages>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> An important difference between this and other versions of the situation calculus (e.g., McCarthy and Hayes [38], Reiter [47]), is that we include a fluent sort. In other words, our fluents are reified. The use of situation calculus with reified fluents is also very common (e.g., <ref> [27, 9, 32] </ref> and others). In non-reified formulations of the situation calculus, fluents correspond to predicates that take one or more arguments. The last argument is the only one of sort situation. For instance, let L nr denote a classic situation calculus language with non-reified fluents. <p> One of the hardest problems encountered in reasoning about actions has been the so called frame problem. This problem has attracted much interest in the AI community and many solutions for it have been proposed (e.g., <ref> [18, 20, 27, 58, 47, 54, 33] </ref>). Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. <p> Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., <ref> [58, 27, 33] </ref>) are based on non-monotonic logics. Lately, there has been interest in the development of solutions based on standard monotonic logics. In particular, we appeal to the solution proposed by Reiter [47], which is based on the work of Haas [20], Pednault [40], and Schubert [54].
Reference: [28] <author> Lifschitz, V. </author> <title> Toward a metatheory of action. </title> <booktitle> In Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning (1991), </booktitle> <editor> J. Allen, R. Fikes, and E. Sandewall", Eds., </editor> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 376-386. </pages>
Reference-contexts: Therefore, there are important reasons why ternary constraints are difficult. Unless the set of ternary constraints was equivalent to a set of binary constraints they introduce ambiguity. Having ambiguity precludes the use of Reiter's monotonic solution to the frame problem. Furthermore, reasoning with ternary constraints is intractable. In <ref> [28] </ref>, Vladimir Lifschitz presented a nonmonotonic solution to the frame problem in the presence of ramifications. Lifschitz uses a reified situation calculus and circumscription to formalize his approach. <p> Treating complex actions as objects in the language would allow to write general properties about them. * Relationship to other approaches. As discussed in section 3.1, our approach to solve the frame problem in the presence of binary state constraints is related to Vladimir Lifschitz's approach <ref> [28] </ref>. We are interested in establishing a formal relationship between both approaches. Also, we are interested in establishing a relationship between Shanahan's work on the representation of continuous change in the circumscriptive event calculus and our approach presented in chapter 6.
Reference: [29] <author> Lifschitz, V., and Rabinov, A. </author> <title> Miracles in Formal Theories of Action. </title> <booktitle> Artificial Intelligence 38 (1989), </booktitle> <pages> 225-237. </pages>
Reference-contexts: Notice that the branching factor of the tree of situations rooted at S 0 equals the number of distinct actions that exist. In this section, we discuss a version of the situation calculus 1 which has evolved through a sequence of refinements <ref> [29, 47, 41, 31] </ref>. The situation calculus is a sorted second order language with equality. We use the standard operators conjunction, disjunction, implication and equivalence (^, _, and respectively), and standard universal and existential quantifiers. <p> It has been pointed out (e.g., <ref> [29, 47] </ref>) that the sort of situations in the situation calculus can be formalized in much the same way as the sort of numbers is formalized in Peano's axioms in number theory. The formalization that we present here originates on Reiter's formalization that appears in [47]. <p> Many non-monotonic approaches to the frame problem are based on the minimization of this predicate (e.g., <ref> [9, 29] </ref>); however, we introduce it only as a shorthand. In particular, we use it to simplify the presentation of the following proposition: 3 All proofs are in the appendix. 2.1.
Reference: [30] <author> Lin, F., Levesque, H., Reiter, R., and Scherl, R. </author> <title> Complex events in the situation calculus. </title> <publisher> Forthcoming, </publisher> <year> 1993. </year> <note> BIBLIOGRAPHY 119 </note>
Reference-contexts: In particular, we use circumscriptive semantics to identify the actual branch. In chapter 5, we study how to augment the types of actions that can be used. There are two types of extensions that we consider. First, we take the notion of complex events, as proposed in <ref> [30] </ref>, and study how it can be integrated with the actual line of situations. In particular, we show that, by appealing to the notion of occurrences, there is a natural way to specify complex actions, when they are built from primitive actions. <p> In that context, they proposed a way to deal with complex actions. Unfortunately, their work is not directly applicable to a discrete situation calculus. On the other hand, Lin, Lesperance, Levesque, Reiter and Scherl propose a mechanism to integrate complex actions into the more standard discrete situation calculus <ref> [30] </ref> (in the future we refer to this as CR's approach, for Cognitive Robotics). Their work is based on Reiter's solution to the frame problem in the situation calculus.
Reference: [31] <author> Lin, F., and Reiter, R. </author> <title> State constraints revisited. </title> <booktitle> In The Second Symposium on Logical Formalizations of Commonsense Reasoning (Jan. </booktitle> <year> 1993), </year> <pages> pp. 114-121. </pages>
Reference-contexts: Throughout this work, we will use this approach to deal with the frame problem. It is well understood that with Reiter's original framework, we cannot deal with state constraints, which are responsible for the ramifications. However, as discussed in chapter 2, Lin and Reiter <ref> [31] </ref> have studied the problem of dealing with theories of action that include state constraints. Their main result establishes that, under certain conditions, a set of successor state axioms can be used to replace the set of effect axioms and the state constraints. <p> Notice that the branching factor of the tree of situations rooted at S 0 equals the number of distinct actions that exist. In this section, we discuss a version of the situation calculus 1 which has evolved through a sequence of refinements <ref> [29, 47, 41, 31] </ref>. The situation calculus is a sorted second order language with equality. We use the standard operators conjunction, disjunction, implication and equivalence (^, _, and respectively), and standard universal and existential quantifiers. <p> In a later chapter, we use this alternative notion. Therefore, we introduce this second notion as a new relation S fi S and with the abbreviation such that: s s 0 s s 0 _ s = s 0 : (2.6) Based on Lin and Reiter <ref> [31] </ref> is axiomatized as: :s S 0 ; (2.7) In what follows b will denote the axioms (2.1)-(2.1) and (2.7)-(2.7). <p> Interestingly, Reiter's monotonic solution to the frame problem is equivalent to the solution of Lin and Shoham's [32] in the absence of state constraints. More precisely, as shown in <ref> [31] </ref> and in [57], the models of bd [ T ss (T ef ) [ T pos [ T S 0 [ T una correspond to the minimal models of bd [ T ef [ T pos [ T S 0 [ T una given by Lin and Shoham's minimality criterion, <p> In this case the length of the frame axiom would be proportional to the number of fluent function symbols in the language. 2.3 The Ramification Problem. In <ref> [31] </ref>, Lin and Reiter studied the problem of extending Reiter's approach to the frame problem to theories that include a set of state constraints. <p> The notion of correctness of the solution is understood in terms of its equivalence to a specific non-monotonic solution to the frame problem. In this section, we summarize the definitions and results of <ref> [31] </ref> that we will use later. Our presentation deviates from the original in several minor ways. This is so since we need to accommodate the linguistic differences. <p> FORMAL FRAMEWORK. Finally, M is minimal if there is no M 0 such that M 0 &lt; M. For further details, the reader is referred to <ref> [32, 31] </ref>. <p> This evidence would be strengthened if Lifschitz's belief 7 , that under certain circumstances all solutions to the frame problem based on model minimality are equivalent, were to be confirmed. Also, we will need the following: 7 As quoted in <ref> [31] </ref> 2.3. <p> We also have a natural notion of prevention. To prevent F from ever becoming false: actual (s) holds (F; s): Interestingly, this could also be modeled as: holds (F; s); which could be interpreted as a precondition oriented state constraint in the terminology of Lin and Reiter <ref> [31] </ref>.
Reference: [32] <author> Lin, F., and Shoham, Y. </author> <title> Provably Correct Theories of Action (preliminary report). </title> <booktitle> In Proceedings of the ninth National Conference on Artificial Intelligence (AAAI-91) (1991), </booktitle> <pages> pp. 349-354. </pages>
Reference-contexts: An important difference between this and other versions of the situation calculus (e.g., McCarthy and Hayes [38], Reiter [47]), is that we include a fluent sort. In other words, our fluents are reified. The use of situation calculus with reified fluents is also very common (e.g., <ref> [27, 9, 32] </ref> and others). In non-reified formulations of the situation calculus, fluents correspond to predicates that take one or more arguments. The last argument is the only one of sort situation. For instance, let L nr denote a classic situation calculus language with non-reified fluents. <p> Interestingly, Reiter's monotonic solution to the frame problem is equivalent to the solution of Lin and Shoham's <ref> [32] </ref> in the absence of state constraints. <p> of bd [ T ss (T ef ) [ T pos [ T S 0 [ T una correspond to the minimal models of bd [ T ef [ T pos [ T S 0 [ T una given by Lin and Shoham's minimality criterion, based on minimization of change <ref> [32] </ref>. The minimality criterion is discussed in more detail in the next section. Reiter's proposal solves the frame problem by providing an axiomatization that requires a number of axioms proportional to the sum of fluent and action function symbols plus the number of actions. <p> Lin and Reiter's key result states that the minimal models of sc are exactly the models of sc 0 conjoined with the state constraints applied to the initial situation and the impossible situations 6 . The notion of minimality is based on Lin and Shoham's <ref> [32] </ref>. In order to define the minimality criterion more formally, let s, a, a 0 , f and f 0 denote variables of sorts S, A, F (according to our convention). <p> FORMAL FRAMEWORK. Finally, M is minimal if there is no M 0 such that M 0 &lt; M. For further details, the reader is referred to <ref> [32, 31] </ref>.
Reference: [33] <author> Lin, F., and Shoham, Y. </author> <title> Provably correct theories of action. </title> <type> Tech. rep., </type> <institution> University of Toronto, </institution> <year> 1992. </year>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> One of the hardest problems encountered in reasoning about actions has been the so called frame problem. This problem has attracted much interest in the AI community and many solutions for it have been proposed (e.g., <ref> [18, 20, 27, 58, 47, 54, 33] </ref>). Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. <p> Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., <ref> [58, 27, 33] </ref>) are based on non-monotonic logics. Lately, there has been interest in the development of solutions based on standard monotonic logics. In particular, we appeal to the solution proposed by Reiter [47], which is based on the work of Haas [20], Pednault [40], and Schubert [54].
Reference: [34] <author> Maruyama, F., and Fujita, M. </author> <title> Hardware Verification. </title> <booktitle> IEEE Computer (February 1985), </booktitle> <pages> 22-32. </pages>
Reference-contexts: Second, it shows that the situation calculus is suitable for modeling knowledge in a domain in which the formal framework of choice seems to be some form of modal temporal logic <ref> [34] </ref>. Thus, it serves to illustrate the fact that the expressive power of the situation calculus makes it an alternative to modal logics of time. To illustrate our approach, we first present a general theory used to model sequential circuits of a restricted class.
Reference: [35] <author> McCarthy, J. </author> <title> Programs with common sense. In Semantic Information Processing, </title> <editor> M. Min-sky, Ed. </editor> <publisher> The MIT Press, </publisher> <year> 1968, </year> <journal> ch. </journal> <volume> 7, </volume> <pages> pp. 403-418. </pages>
Reference-contexts: The research we rely upon has been carried out within the field of Computer Science and deals with issues that are relevant to Databases, Programming Languages, Software Engineering and Artificial Intelligence. Our work is based on the situation calculus, which was originally conceived by John McCarthy <ref> [35] </ref>. McCarthy's objective was to provide a logical language to model the behavior of a single agent in a world that changes solely as consequence of the agent's actions. The original situation calculus is a first order theory that is based on the notion of situation. <p> The situation calculus is a logical language designed to represent theories of action and change. The language has its origins in the early work of John McCarthy <ref> [35] </ref>. The intuition behind the situation calculus language is that there is an initial situation, called S 0 , and that the world changes from one situation to another when actions are performed.
Reference: [36] <author> McCarthy, J. </author> <title> Circumscription a form of non-monotonic reasoning. </title> <booktitle> Artificial Intelligence 13 (1980), </booktitle> <pages> 27-39. </pages>
Reference-contexts: Thus, if it is consistent to make Shanahan's assumption, then our policy yields the same results when the chronological ordering of the actions is known. In order to formalize the minimization, we use Circumscription <ref> [36, 37, 26] </ref>. To simplify the presentation of the circumscription policy, we consider the predicates occurs, holds T , during, and occursBet and the function end to be abbreviations (as defined by (4.7), (4.9), (4.9), (4.11) and (4.4)), which are not part of the extended language of the situation calculus. <p> It follows directly from the induction axiom and the translation rules. Appendix B Circumscription. B.1 Parallel Circumscription. The discussion in this section is based on [26]. In <ref> [36, 37] </ref> McCarthy proposed to base non-monotonic reasoning on the notion of truth in a set of most preferred models of a logical theory. Preferred models are selected based on the minimization of the extension of some predicate or predicates. Assume that L is a second order language. <p> P &lt; P 0 stands for P P 0 ^ :P 0 P. Here, we describe the model theoretic meaning of this circumscription. For a more comprehensive discussion refer to <ref> [36, 37, 26, 46, 13] </ref>. Let M 1 and M 2 be two arbitrary models of the theory in the language L with the tuples P and Z as before. We write M 1 P;Z M 2 if: 1. kM 1 k = kM 2 k.
Reference: [37] <author> McCarthy, J. </author> <title> Applications of circumscription to formalizing commonsense knowledge. </title> <booktitle> Artificial Intelligence 28 (1986), </booktitle> <pages> 89-116. </pages>
Reference-contexts: Thus, if it is consistent to make Shanahan's assumption, then our policy yields the same results when the chronological ordering of the actions is known. In order to formalize the minimization, we use Circumscription <ref> [36, 37, 26] </ref>. To simplify the presentation of the circumscription policy, we consider the predicates occurs, holds T , during, and occursBet and the function end to be abbreviations (as defined by (4.7), (4.9), (4.9), (4.11) and (4.4)), which are not part of the extended language of the situation calculus. <p> It follows directly from the induction axiom and the translation rules. Appendix B Circumscription. B.1 Parallel Circumscription. The discussion in this section is based on [26]. In <ref> [36, 37] </ref> McCarthy proposed to base non-monotonic reasoning on the notion of truth in a set of most preferred models of a logical theory. Preferred models are selected based on the minimization of the extension of some predicate or predicates. Assume that L is a second order language. <p> P &lt; P 0 stands for P P 0 ^ :P 0 P. Here, we describe the model theoretic meaning of this circumscription. For a more comprehensive discussion refer to <ref> [36, 37, 26, 46, 13] </ref>. Let M 1 and M 2 be two arbitrary models of the theory in the language L with the tuples P and Z as before. We write M 1 P;Z M 2 if: 1. kM 1 k = kM 2 k.
Reference: [38] <author> McCarthy, J., and Hayes, P. J. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <booktitle> In Machine Intelligence 4, </booktitle> <editor> B. Meltzer and D. Michie, Eds. </editor> <publisher> Edinburgh University Press, Edinburgh, </publisher> <address> Scotland, </address> <year> 1969, </year> <pages> pp. 463-502. </pages>
Reference-contexts: This document is organized as follows. In chapter 2, we present the formalization of the discrete situation calculus. This language has the same expressive power as early specifications of the situation calculus (e.g., McCarthy and Hayes <ref> [38] </ref>), with the notable exception that it restricts the set of existing situations to those that are reachable by performing finite sequences of actions from an initial situation. Also, we present the solution to the frame problem that was proposed by Reiter [47]. <p> also include a sort D of domain objects, which may be further subdivided in subsorts depending on 1 In the future, the term discrete situation calculus or simply situation calculus will refer to the language presented in this chapter. 2 The term propositional fluent was used by McCarthy and Hayes <ref> [38] </ref> to mean a function of situations that would have as a range the set ftrue; f alseg. In the same spirit, we take a fluent to be a property of the world that may or may not hold at each situation in the tree. 4 2.1. <p> Furthermore, a situation s must exist such that both, s and do (a; s) lie in the path between s 1 and s 2 . 2.1.3 Reification. An important difference between this and other versions of the situation calculus (e.g., McCarthy and Hayes <ref> [38] </ref>, Reiter [47]), is that we include a fluent sort. In other words, our fluents are reified. The use of situation calculus with reified fluents is also very common (e.g., [27, 9, 32] and others). <p> Of particular interest is the fact that none of the modal logics of which we are aware give first class status to events and their occurrences, which is a major asset of the situation calculus. In <ref> [38] </ref>, McCarthy and Hayes argue, without proof, that the expressive power of modal logics can be gained without the use of modalities using an ordinary truth-functional logic. The proposal is to identify each "possible world" with a situation in a situation calculus language.
Reference: [39] <author> Miller, R., and Shanahan, M. </author> <title> Narratives in the situation calculus. </title> <type> Tech. rep., </type> <institution> Imperial College, Department of Computing, </institution> <year> 1993. </year>
Reference-contexts: Thus, we choose models that contain minimal sets of occurring actions. This is formalized using circumscrip tion. Interestingly, Miller and Shanahan <ref> [39] </ref> study the formalization of narratives within the situation calculus. Narratives are conceptually similar to ordered sets of actions that are known to have occurred. In their work, they present an approach related to the one discussed here.
Reference: [40] <author> Pednault, E. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <booktitle> Computational Intelligence 4 (1988), </booktitle> <pages> 356-372. </pages>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> Lately, there has been interest in the development of solutions based on standard monotonic logics. In particular, we appeal to the solution proposed by Reiter [47], which is based on the work of Haas [20], Pednault <ref> [40] </ref>, and Schubert [54]. In this section, we present Reiter's monotonic solution to the frame problem. This presentation is slightly different from the original due to the differences between our language and Reiter's.
Reference: [41] <author> Pinto, J., and Reiter, R. </author> <title> Adding a time line to the situation calculus. </title> <booktitle> In The Second Symposium on Logical Formalizations of Commonsense Reasoning (Jan. </booktitle> <year> 1993), </year> <pages> pp. 172-177. </pages>
Reference-contexts: Notice that the branching factor of the tree of situations rooted at S 0 equals the number of distinct actions that exist. In this section, we discuss a version of the situation calculus 1 which has evolved through a sequence of refinements <ref> [29, 47, 41, 31] </ref>. The situation calculus is a sorted second order language with equality. We use the standard operators conjunction, disjunction, implication and equivalence (^, _, and respectively), and standard universal and existential quantifiers. <p> Here, we utilize the notion of actual line of situations axiomatized in chapter 4, along with the notion of occurrences and argue that the extended situation calculus subsumes the expressivity that is wanted for the calculus of events. We use our extended version of the situation calculus <ref> [41] </ref> to derive a logic program for temporal reasoning. The program is based on the language we presented in chapters 2 and 4 along with the addition of some defined predicates. These defined predicates are added to facilitate the derivation of the logic program. 7.3.4 Basis for the Logic Program.
Reference: [42] <author> Przymusinski, T. C. </author> <title> On the declarative semantics of deductive databases and logic programs. </title> <journal> ch. </journal> <volume> 5, </volume> <pages> pp. 193-216. </pages>
Reference-contexts: Thus, if we have an effect axiom like: P oss (a; s) ^ fl + F (a; s) holds (F; do (a; s)); (3.8) 6 The term stratified is used in the same spirit as the notion of stratification applied to logic programs and deductive databases <ref> [42] </ref>. 7 Fluent terms may only appear as a first argument of a holds predicate. 3.2. STRATIFIED DEFINITIONS. 23 then F must be a primitive fluent. We are interested in finding a solution to the frame and ramification problems for a theory def .
Reference: [43] <author> Rayner, M. </author> <title> On the applicability of nonmonotonic logic to formal reasoning in continuous time. </title> <booktitle> Artificial Intelligence 49 (1991), </booktitle> <pages> 345-360. </pages>
Reference-contexts: In fact, the problem of determining what paramters are discontinuous at a breakpoint is a special form of the frame problem. Sandewall's solution to the frame problem is a variant of Yoav Shoham's chronological minimization [58] which is called Chronological Minimization of Discontinuities. Unfortunately, as shown by Rayner <ref> [43] </ref>, Sandewall's approach fails to sanction the intuitively correct answers in some simple problems.
Reference: [44] <author> R.C.Holt, G.S.Graham, E.D.Lazowska, and M.A.Scott. </author> <title> Structured Concurrent Programming with Operating Systems Applications. </title> <publisher> Addison-Wesley, </publisher> <year> 1978. </year>
Reference-contexts: This is illustrated in the example that follows. 5.2.4 An Example. Here we consider the traditional Producer/Consumer problem, which is the example of choice in Computer Science to illustrate the problem of concurrent execution of actions <ref> [44] </ref>. Specifically, it is said that two processes are in a Producer/Consumer relationship when one of these processes generates output that is the input to the other process.
Reference: [45] <author> Reichgelt, H. </author> <title> A comparison of first order and modal logics of time. In Logic-Based Knowledge Representation. </title> <publisher> The MIT Press, </publisher> <year> 1989, </year> <pages> pp. 143-76. </pages>
Reference-contexts: In the past, there has been some confusion over what reification is and is not. In particular, Shoham [58] calls his logic a "reified logic", and, as argued in <ref> [45] </ref>, it is unclear in which sense his logic is reified. In Shoham's logic, it is not possible to take properties as objects and predicate about them or quantify over them. This ability seems to be the major advantage of using reified logics.
Reference: [46] <author> Reiter, R. </author> <title> Nonmonotonic Reasoning, </title> <booktitle> vol. 2 of Annual Review of Computer Science. </booktitle> <publisher> Annual Reviews Inc., </publisher> <year> 1987, </year> <pages> pp. 147-86. </pages>
Reference-contexts: P &lt; P 0 stands for P P 0 ^ :P 0 P. Here, we describe the model theoretic meaning of this circumscription. For a more comprehensive discussion refer to <ref> [36, 37, 26, 46, 13] </ref>. Let M 1 and M 2 be two arbitrary models of the theory in the language L with the tuples P and Z as before. We write M 1 P;Z M 2 if: 1. kM 1 k = kM 2 k.
Reference: [47] <author> Reiter, R. </author> <title> The Frame Problem in the Situation Calculus: A Simple Solution (sometimes) and a completeness result for goal regression. </title> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy. </booktitle> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991, </year> <pages> pp. 359-380. 120 BIBLIOGRAPHY </pages>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> Also, we present the solution to the frame problem that was proposed by Reiter <ref> [47] </ref>. Reiter's approach is based on the derivation of a set of successor state axioms. Each 1 2 CHAPTER 1. INTRODUCTION AND MOTIVATION. successor state axiom specifies necessary and sufficient conditions to determine whether a property of the world holds after performing an action. <p> Notice that the branching factor of the tree of situations rooted at S 0 equals the number of distinct actions that exist. In this section, we discuss a version of the situation calculus 1 which has evolved through a sequence of refinements <ref> [29, 47, 41, 31] </ref>. The situation calculus is a sorted second order language with equality. We use the standard operators conjunction, disjunction, implication and equivalence (^, _, and respectively), and standard universal and existential quantifiers. <p> It has been pointed out (e.g., <ref> [29, 47] </ref>) that the sort of situations in the situation calculus can be formalized in much the same way as the sort of numbers is formalized in Peano's axioms in number theory. The formalization that we present here originates on Reiter's formalization that appears in [47]. <p> The formalization that we present here originates on Reiter's formalization that appears in <ref> [47] </ref>. <p> This is a predicate that has to be axiomatized as part of the background axioms of any application domain. Our notion of &lt; differs from the one used by Reiter <ref> [47] </ref> in an important way. <p> Furthermore, a situation s must exist such that both, s and do (a; s) lie in the path between s 1 and s 2 . 2.1.3 Reification. An important difference between this and other versions of the situation calculus (e.g., McCarthy and Hayes [38], Reiter <ref> [47] </ref>), is that we include a fluent sort. In other words, our fluents are reified. The use of situation calculus with reified fluents is also very common (e.g., [27, 9, 32] and others). In non-reified formulations of the situation calculus, fluents correspond to predicates that take one or more arguments. <p> One of the hardest problems encountered in reasoning about actions has been the so called frame problem. This problem has attracted much interest in the AI community and many solutions for it have been proposed (e.g., <ref> [18, 20, 27, 58, 47, 54, 33] </ref>). Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. <p> Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. Lately, there has been interest in the development of solutions based on standard monotonic logics. In particular, we appeal to the solution proposed by Reiter <ref> [47] </ref>, which is based on the work of Haas [20], Pednault [40], and Schubert [54]. In this section, we present Reiter's monotonic solution to the frame problem. This presentation is slightly different from the original due to the differences between our language and Reiter's. <p> In order to justify the correctness of the approach, we make use of theorem 2.3.1. Chapter 3 State Constraints and Successor State Axioms. In the previous chapter we noted that Reiter's original proposal to deal with the frame problem <ref> [47] </ref> was not general enough to deal with theories that include a set of state constraints. Then, we briefly outlined Lin and Reiter's results to deal with state constraints and solve the so called ramification problem. <p> We show that a simple syntactic manipulation can be used to generate a suitable set of successor state axioms. We also show that, in general, such a procedure cannot exist for theories that include clauses with more than two holds literals. In <ref> [47] </ref>, Reiter taught us how to derive successor state axioms from theories that expressed the effects of actions in the so called effect axioms. <p> However, until very recently [1], the frame problem had not been addressed. In [1], Allen and Ferguson address the frame problem by appealing to Schubert's explanation closure axioms. However, they do not offer, as Reiter does <ref> [47] </ref>, a general mechanism to automatically generate frame axioms. Also, they do not address the ramification problem. Furthermore, for their approach to work, they require a complete list of the 88 CHAPTER 7. THE SITUATION CALCULUS AND OTHER TEMPORAL LOGICS. actions that are attempted.
Reference: [48] <author> Reiter, R. </author> <title> On specifying database updates. </title> <type> Tech. Rep. </type> <institution> KRR-TR-92-3, University of Toronto, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: That is, a simple formula is a first order formula which does not mention the predicate symbols P oss, or (nor &lt; or ), that mentions a unique situation variable (e.g. s) and no other situation terms, and which does not quantify over variables of sort state (S) <ref> [48] </ref>. Furthermore, we require that s not appear outside the scope of a holds predicate (as its second argument). In this work, we assume that all the necessary conditions for the execution of an action are known. <p> To do so, we take the set T ss (T T def (T ef )) (from (3.9)) which are successor state axioms for the primitive fluents. We obtain a set T ss def of successor state axioms for the defined fluents by applying regression, as defined in <ref> [48] </ref>, to the primitive fluents in each definition. <p> f n ; x; s); where fluents f 1 ; : : : ; f n are primitive, then: holds (f 0 (x); do (a; s)) 0 (f 1 ; : : : ; f n ; x; do (a; s)); (3.10) Now, we may use Reiter's regression operator R <ref> [48] </ref>, which is meant to reduce the depth of nesting of the function symbol do.
Reference: [49] <author> Reiter, R. </author> <title> Proving Properties of States in the Situation Calculus. </title> <note> Submitted for publication, </note> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: See Reiter <ref> [49] </ref> for examples of the need for, and use of, induction in the situation calculus.
Reference: [50] <author> Sandewall, E. </author> <title> Combining Logic and Differential Equations for Describing Real-World Systems. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (Toronto, </booktitle> <address> Ontario, Canada, </address> <month> May </month> <year> 1989), </year> <editor> H. L. R. Brachman and R. Reiter, Eds., </editor> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 412-420. </pages>
Reference-contexts: On the other hand, if some other event occurs, the behavior of the ball may be unaffected. Thus, in the 1 In <ref> [50] </ref>, Sandewall proposes a similar approach to deal with functions of time. 6.2. EXTENSIONS TO THE LANGUAGE. 71 same manner as with traditional fluents, we need to describe how actions affect the behavior of parameters. This is addressed in the following section. <p> To illustrate the approach, we make use of the ball in the shaft example, originally proposed by Erik Sandewall <ref> [50] </ref>. In this example, a ball is moving along a horizontal surface at a positive speed towards a shaft (see figure 6.3). If the ball reaches the edge of the shaft, it will fall into it with acceleration G. <p> This is trivial to show by using the effect axioms and appealing to the Oracle. 2 6.3.4 Relationship to Sandewall's approach. Conceptually, the work presented in this chapter is related to Sandewall's <ref> [50, 51] </ref>. Sandewall proposes to combine logic and differential equations for describing real world systems. <p> In Sandewall's words: The method applies to piecewise continuous physical systems, i.e. systems whose possible histories over time may contain a number of significant time-points called breakpoints, and where all parameters of the system are assumed to be continuous in the intervals between breakpoints. <ref> [50, p.412] </ref> 6.4. CONCURRENCY, CONTINUITY AND NATURAL PROCESSES. 81 Sandewall's significant time-points correspond to the times at which events occur. However, in our approach we do not require all parameters to be continuous in the intervals between breakpoints. <p> Problems of these nature are analyzed by Sandewall <ref> [50] </ref> in the framework of another temporal logic. A problem that arises is that we might need to introduce inter-state constraints, which we have not considered.
Reference: [51] <author> Sandewall, E. </author> <title> Filter preferential entailment for the logic of action in almost continuous worlds. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence (IJCAI-89) (Detroit, </booktitle> <address> MI, </address> <year> 1989), </year> <pages> pp. 894-899. </pages>
Reference-contexts: This is trivial to show by using the effect axioms and appealing to the Oracle. 2 6.3.4 Relationship to Sandewall's approach. Conceptually, the work presented in this chapter is related to Sandewall's <ref> [50, 51] </ref>. Sandewall proposes to combine logic and differential equations for describing real world systems.
Reference: [52] <author> Sandewall, E. </author> <title> Features and Fluents. </title> <type> Tech. Rep. </type> <institution> LiTH-IDA-R-91-29, Linkoping University, </institution> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: It follows that in all the models of the circumscription, Alive does not hold in S 4 . 4.4.2 The Hiding Turkey. The Hiding Turkey Problem is a simple variation of the YSP and was proposed by Sandewall <ref> [52] </ref> as a test for theories whose initial state is incompletely specified. The variation is that the turkey that is being shot may or may not be deaf. If the turkey is not deaf, then it will go on hiding if 40 CHAPTER 4. <p> If we were to adopt this policy, then the second solution would be preferred to the first one. Nevertheless, we argue that both types of models for this problem should be "intended." 4.4.4 Ferryboat Connection Scenario. This example was first proposed in <ref> [52] </ref>. It is as follows: "A motorcycle is initially driving along a road on island Fyen, in the direction of a ferryboat landing. The ferryboat departs at time 100. If the motorcycle reaches the ferryboat landing before time 100, it will be in Jutland from time 110, otherwise it stays.
Reference: [53] <author> Sandewall, E. </author> <title> Features and Fluents, second review version. </title> <type> Tech. Rep. </type> <institution> LiTH-IDA-R-92-30, Linkoping University, </institution> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: These examples are taken from the literature in temporal reasoning in Artificial Intelligence. Most of these are used as benchmarks to test various 38 CHAPTER 4. ADDING A TIME LINE TO THE SITUATION CALCULUS. theoretical proposals for reasoning about actions and change, and were compiled by Sandewall in <ref> [53] </ref>. Each problem is formalized as a circumscriptive theory (4.23) and differs in the domain axioms that are specified with each example. 4.4.1 The YSP. The Yale Shooting problem [21] was presented in the previous section.
Reference: [54] <author> Schubert, L. </author> <title> Monotonic solution of the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. In Knowledge Representation and Defeasible Reasoning, </title> <editor> H. Kyberg, R. Loui, and G. Carlson, Eds. </editor> <publisher> Kluwer Academic Press, </publisher> <year> 1990, </year> <pages> pp. 23-67. </pages>
Reference-contexts: The situation calculus is a very appealing language which has been used to investigate many problems related to formal reasoning about change. For example, the language has been the formalism of choice for a great number of researchers interested in the so called frame problem (e.g., <ref> [40, 20, 21, 27, 54, 33, 9, 47] </ref>). So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. <p> One of the hardest problems encountered in reasoning about actions has been the so called frame problem. This problem has attracted much interest in the AI community and many solutions for it have been proposed (e.g., <ref> [18, 20, 27, 58, 47, 54, 33] </ref>). Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. <p> Lately, there has been interest in the development of solutions based on standard monotonic logics. In particular, we appeal to the solution proposed by Reiter [47], which is based on the work of Haas [20], Pednault [40], and Schubert <ref> [54] </ref>. In this section, we present Reiter's monotonic solution to the frame problem. This presentation is slightly different from the original due to the differences between our language and Reiter's. <p> In the future we will consider these unique names axioms to be part of the set d of domain specific axioms. Following Schubert <ref> [54] </ref>, the assumption that the general (positive or negative) effect axioms characterize all the conditions for a state s under which action a makes holds (R; do (a; s)) true can be formalized with an explanation closure axiom of the form: P oss (a; s) ^ :holds (R; s) ^ holds
Reference: [55] <author> Shanahan, M. </author> <title> Representing continuous change in the event calculus. </title> <booktitle> In Proceedings ECAI (1990). </booktitle>
Reference-contexts: So much so, that some researchers identify the frame problem as characteristic of theories based on the situation calculus, instead of as a problem inherent to the formalization of dynamic systems. Unfortunately, as has been pointed out elsewhere (e.g., <ref> [16, 23, 55] </ref>), the original situation calculus is a limited language that has several shortcomings. Nevertheless, as Gelfond, Lifschitz and Rabinov argue [16], these limitations can be overcome. The objective of this thesis is twofold. <p> Galton uses the terminology state of motion and state of position for properties that correspond to our discrete fluents and continuous parameters respectively. Also, related ideas are explored by Shanahan in the framework of the event calculus in logic programming <ref> [55] </ref>. The majority of the problems that deal with properties that vary continuously with time are problems in the domain of physics. Since physics is concerned with building mathematical models for natural phenomena, we have to model actions or events that are considered natural. <p> In doing so, we shall appeal to the extension of the situation calculus, enriched with time and event occurrences, as described in chapter 4. With this specification in hand, we shall be in a position to derive a logic program which is sound with respect to it. Murray Shanahan <ref> [55, 56] </ref> has extended the calculus of events in several interesting ways. However, he bases his research on an event calculus which loosely corresponds to the original calculus of events.
Reference: [56] <author> Shanahan, M. </author> <title> A circumscriptive calculus of events. </title> <type> Tech. rep., </type> <institution> Imperial College, Department of Computing, </institution> <year> 1992. </year>
Reference-contexts: First, we look at the interval temporal logic [2, 3, 4, 5, 1], and discuss how its view of time can be, in most cases, modeled within the situation calculus. Second, we study in much greater detail the calculus of events <ref> [25, 24, 56] </ref>, and argue that its formulation as a logic program has certain drawbacks. Also, we show that the functionality of the event calculus can be realized within the situation calculus. Furthermore, we present a logic program as an alternative to the logic programming formulation of the situation calculus. <p> Furthermore, in some cases this policy subsumes the policies stated by other researchers in the area. For example, Shanahan's assumption "that the only events which occur are those which are known to occur" <ref> [56] </ref> is subsumed by our policy when the chronological ordering between the actions is known. Thus, if it is consistent to make Shanahan's assumption, then our policy yields the same results when the chronological ordering of the actions is known. <p> In doing so, we shall appeal to the extension of the situation calculus, enriched with time and event occurrences, as described in chapter 4. With this specification in hand, we shall be in a position to derive a logic program which is sound with respect to it. Murray Shanahan <ref> [55, 56] </ref> has extended the calculus of events in several interesting ways. However, he bases his research on an event calculus which loosely corresponds to the original calculus of events. <p> In fact, Shanahan's calculus of events avoids the problems we describe in this section by eliminating the notion of temporal interval from the logical language altogether. His departure from the original calculus is more extreme in his later work <ref> [56] </ref> in which he does not rely on negation-as-failure as the non-monotonic approach to deal with the frame problem. It would be interesting to study the logic programming implementation of Shanahan's event calculus and how it relates to our proposal. 7.3.2 Defining an Interval Based Ontology.
Reference: [57] <author> Shapiro, S. </author> <title> First-order Solutions to the Frame Problem. </title> <type> Master's thesis, </type> <institution> University of Toronto, </institution> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Interestingly, Reiter's monotonic solution to the frame problem is equivalent to the solution of Lin and Shoham's [32] in the absence of state constraints. More precisely, as shown in [31] and in <ref> [57] </ref>, the models of bd [ T ss (T ef ) [ T pos [ T S 0 [ T una correspond to the minimal models of bd [ T ef [ T pos [ T S 0 [ T una given by Lin and Shoham's minimality criterion, based on minimization
Reference: [58] <author> Shoham, Y. </author> <title> Reasoning about Change. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year>
Reference-contexts: Therefore, what is left is the technical advantage of being able to write general truths about fluents, without having to write them as some sort of schemata. In the past, there has been some confusion over what reification is and is not. In particular, Shoham <ref> [58] </ref> calls his logic a "reified logic", and, as argued in [45], it is unclear in which sense his logic is reified. In Shoham's logic, it is not possible to take properties as objects and predicate about them or quantify over them. <p> One of the hardest problems encountered in reasoning about actions has been the so called frame problem. This problem has attracted much interest in the AI community and many solutions for it have been proposed (e.g., <ref> [18, 20, 27, 58, 47, 54, 33] </ref>). Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., [58, 27, 33]) are based on non-monotonic logics. <p> Basically, the problem is understood as one of finding a way to succinctly specify the effects of actions, given the situations in which they are performed. Most solutions to the frame problem (e.g., <ref> [58, 27, 33] </ref>) are based on non-monotonic logics. Lately, there has been interest in the development of solutions based on standard monotonic logics. In particular, we appeal to the solution proposed by Reiter [47], which is based on the work of Haas [20], Pednault [40], and Schubert [54]. <p> In fact, the problem of determining what paramters are discontinuous at a breakpoint is a special form of the frame problem. Sandewall's solution to the frame problem is a variant of Yoav Shoham's chronological minimization <ref> [58] </ref> which is called Chronological Minimization of Discontinuities. Unfortunately, as shown by Rayner [43], Sandewall's approach fails to sanction the intuitively correct answers in some simple problems.
References-found: 58

