URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/summer98/papers/drechsler2.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/summer98/abstract/drechsler.html
Root-URL: http://www.cs.berkeley.edu
Title: BDD Minimization by Linear Transformations  
Author: Wolfgang Gunther Rolf Drechsler 
Date: 104, May 1998  
Address: Am Flughafen 17 79110 Freiburg im Breisgau, Germany  
Affiliation: Institute of Computer Science Albert-Ludwigs-University  
Pubnum: Report  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D.P. Appenzeller and A. Kuehlmann. </author> <title> Formal verification of a PowerPC microprocessor. </title> <booktitle> In Int'l Conf. on Comp. Design, </booktitle> <pages> pages 79-84, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Binary Decision Diagrams (BDDs) are the state-of-the-art data structure in VLSI CAD and in the meantime are integrated in many commercial tools. They are widely used in applications, like synthesis [10, 5] and verification <ref> [11, 1, 4] </ref>.
Reference: [2] <author> R.E. Bryant. </author> <title> Graph based algorithms for Boolean function manipulation. </title> <journal> IEEE Trans. on Comp., </journal> <volume> 35(8) </volume> <pages> 677-691, </pages> <year> 1986. </year>
Reference-contexts: The order of the variables is fixed over all G j s. For functions represented by reduced, ordered BDDs efficient manipulations are possible <ref> [2] </ref>.
Reference: [3] <author> R.E. Bryant. </author> <title> On the complexity of VLSI implementations and graph representations of Boolean functions with application to integer multiplication. </title> <journal> IEEE Trans. on Comp., </journal> <volume> 40 </volume> <pages> 205-213, </pages> <year> 1991. </year>
Reference-contexts: The major drawback of all BDD based systems is that the underlying data structure is very sensitive to a chosen variable ordering, and for some functions even no efficient representation exists, like for the Boolean multiplication <ref> [3] </ref>. 1 For this, several extensions of the basic BDD structure have been proposed in the last few years. <p> For the proof an argument of lower bound computation from <ref> [3] </ref> is needed that is briefly reviewed. Let f : B n ! B be a Boolean function and let (L; R) be a partition of X n .
Reference: [4] <author> R.E. Bryant. </author> <title> Binary decision diagrams and beyond: Enabeling techniques for formal verification. </title> <booktitle> In Int'l Conf. on CAD, </booktitle> <pages> pages 236-243, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Binary Decision Diagrams (BDDs) are the state-of-the-art data structure in VLSI CAD and in the meantime are integrated in many commercial tools. They are widely used in applications, like synthesis [10, 5] and verification <ref> [11, 1, 4] </ref>.
Reference: [5] <author> P. Buch, A. Narayan, A.R. Newton, and A.L. Sangiovanni-Vincentelli. </author> <title> Logic synthesis for large pass transistor circuits. </title> <booktitle> In Int'l Conf. on CAD, </booktitle> <pages> pages 663-670, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction Binary Decision Diagrams (BDDs) are the state-of-the-art data structure in VLSI CAD and in the meantime are integrated in many commercial tools. They are widely used in applications, like synthesis <ref> [10, 5] </ref> and verification [11, 1, 4].
Reference: [6] <author> R. Drechsler, N. Drechsler, and W. Gunther. </author> <title> Fast exact minimization of BDDs. </title> <booktitle> In Design Automation Conf., </booktitle> <year> 1998. </year>
Reference-contexts: Recently, an exact algorithm for BDD minimization under linear transformations has been proposed [8], by which the size of the BDDs could be reduced significantly in comparison to linear sifting. But although an efficient branch&bound technique known from BDD minimization <ref> [6] </ref> is used, this approach is only applicable to small functions with up to 7 variables.
Reference: [7] <author> M. Fujita, Y. Matsunaga, and T. Kakuda. </author> <title> On variable ordering of binary decision diagrams for the application of multi-level synthesis. </title> <booktitle> In European Conf. on Design Automation, </booktitle> <pages> pages 50-54, </pages> <year> 1991. </year>
Reference-contexts: The widely used sifting algorithm [14] for dynamic BDD minimization has been extended by an effective linear operator which combines neighboring variables of the BDD. The algorithm runs very fast, since the basic operation is (very similar to variable reordering <ref> [7] </ref>) a local operation. By this, it is possible to obtain much smaller BDD sizes than with sifting alone. Recently, an exact algorithm for BDD minimization under linear transformations has been proposed [8], by which the size of the BDDs could be reduced significantly in comparison to linear sifting.
Reference: [8] <author> W. Gunther and R. Drechsler. </author> <title> Linear transformations and exact minimization of BDDs. </title> <booktitle> In Great Lakes Symp. VLSI, </booktitle> <pages> pages 325-330, </pages> <year> 1998. </year>
Reference-contexts: The algorithm runs very fast, since the basic operation is (very similar to variable reordering [7]) a local operation. By this, it is possible to obtain much smaller BDD sizes than with sifting alone. Recently, an exact algorithm for BDD minimization under linear transformations has been proposed <ref> [8] </ref>, by which the size of the BDDs could be reduced significantly in comparison to linear sifting. But although an efficient branch&bound technique known from BDD minimization [6] is used, this approach is only applicable to small functions with up to 7 variables. <p> An algorithm for exact minimization has been presented in <ref> [8] </ref>. <p> For this, in the following we optimize the BDD with respect to linear transformations within a window of m variables exactly using the algorithm from <ref> [8] </ref> 2 . The larger m is chosen the more time 2 The underlying principle is similar to the one suggested for BDD reordering in [9, 14]. 8 consuming does the algorithm become, but also the quality of the final result improves.
Reference: [9] <author> N. Ishiura, H. Sawada, and S. Yajima. </author> <title> Minimization of binary decision diagrams based on exchange of variables. </title> <booktitle> In Int'l Conf. on CAD, </booktitle> <pages> pages 472-475, </pages> <year> 1991. </year> <month> 13 </month>
Reference-contexts: Then, a new heuristic for BDD minimization based on linear transformations is presented. It can be seen as an extension of the window permutation algorithm <ref> [9, 14] </ref> to linear transformations. Small windows of neighboring variables are optimized exactly, and these windows are shifted over the BDD. Our approach is based on a combination of the linear sifting algorithm and the window optimization algorithm which optimizes the windows under linear transformations. <p> The larger m is chosen the more time 2 The underlying principle is similar to the one suggested for BDD reordering in <ref> [9, 14] </ref>. 8 consuming does the algorithm become, but also the quality of the final result improves.
Reference: [10] <author> L. Lavagno, P. McGeer, A. Saldanha, and A.L. Sangiovanni-Vincentelli. </author> <title> Timed shannon circuits: A power-efficient design style and synthesis tool. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 254-260, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Binary Decision Diagrams (BDDs) are the state-of-the-art data structure in VLSI CAD and in the meantime are integrated in many commercial tools. They are widely used in applications, like synthesis <ref> [10, 5] </ref> and verification [11, 1, 4].
Reference: [11] <author> S. Malik, A.R. Wang, R.K. Brayton, and A.L. Sangiovanni-Vincentelli. </author> <title> Logic verification using binary decision diagrams in a logic synthesis environment. </title> <booktitle> In Int'l Conf. on CAD, </booktitle> <pages> pages 6-9, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Binary Decision Diagrams (BDDs) are the state-of-the-art data structure in VLSI CAD and in the meantime are integrated in many commercial tools. They are widely used in applications, like synthesis [10, 5] and verification <ref> [11, 1, 4] </ref>.
Reference: [12] <author> C. Meinel, F. Somenzi, and T. Theobald. </author> <title> Linear sifting of decision diagrams. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 202-207, </pages> <year> 1997. </year>
Reference-contexts: In contrast to spectral methods that operate with 2 n fi 2 n -matrices, for linear transformations n fi n-matrices are sufficient. An efficient heuristic for BDD minimization under linear transformations has been presented in <ref> [12] </ref>, which is called "linear sifting". The widely used sifting algorithm [14] for dynamic BDD minimization has been extended by an effective linear operator which combines neighboring variables of the BDD. The algorithm runs very fast, since the basic operation is (very similar to variable reordering [7]) a local operation. <p> However, due to the huge search space, the algorithm is only applicable to functions with up to 7 input variables. 4.2 Linear Sifting An effective heuristic approach has been presented in <ref> [12] </ref>. It can be seen as an extension of sifting [14] by a linear operator: instead of only considering level exchanges, linear sifting also considers the effect of the linear combination of adjacent levels. <p> Especially, in applications, like synthesis, a reduction of more than a factor of two tremendously improves the 11 circuit in out Reordering Linear Sifting <ref> [12] </ref> Window Optimization alu4 14 8 350 350 305 c1908 33 25 5526 1822 696 c499 41 32 25866 520 356 c3540 50 22 23828 23823 23358 dalu 75 16 689 594 588 s1423 91 79 1796 1477 1365 c7552 207 108 2212 1921 1001 i10 257 224 20660 19295 19298 <p> Finally, we compared the best-ever values from [15] for pure reordering to the best-ever values of linear sifting <ref> [12] </ref> and to window optimization presented above (see Table 4). Window optimization clearly outperforms the results of both other approaches. In some cases an improvement of nearly a factor of three is possible (see c1908).
Reference: [13] <author> C. Meinel and T. Theobald. </author> <title> Local encoding transformations for optimizing OBDD-representations of finite state machines. </title> <booktitle> In FMCAD, </booktitle> <volume> volume 1166, </volume> <pages> pages 404-418, </pages> <year> 1996. </year>
Reference-contexts: Definition 2 A linear transformation is a linear re-encoding of the set of input variables, i.e. a re-encoding which can be represented by a n fi n-matrix over the Galois field (B; ; ). As shown in <ref> [13] </ref>, the number of possible linear transformations is n1 Y (2 n 2 i ); which is much larger than n!, the number of possible variable orderings, but much smaller than 2 n !, the number of all possible automorphisms.
Reference: [14] <author> R. Rudell. </author> <title> Dynamic variable ordering for ordered binary decision diagrams. </title> <booktitle> In Int'l Conf. on CAD, </booktitle> <pages> pages 42-47, </pages> <year> 1993. </year>
Reference-contexts: In contrast to spectral methods that operate with 2 n fi 2 n -matrices, for linear transformations n fi n-matrices are sufficient. An efficient heuristic for BDD minimization under linear transformations has been presented in [12], which is called "linear sifting". The widely used sifting algorithm <ref> [14] </ref> for dynamic BDD minimization has been extended by an effective linear operator which combines neighboring variables of the BDD. The algorithm runs very fast, since the basic operation is (very similar to variable reordering [7]) a local operation. <p> Then, a new heuristic for BDD minimization based on linear transformations is presented. It can be seen as an extension of the window permutation algorithm <ref> [9, 14] </ref> to linear transformations. Small windows of neighboring variables are optimized exactly, and these windows are shifted over the BDD. Our approach is based on a combination of the linear sifting algorithm and the window optimization algorithm which optimizes the windows under linear transformations. <p> However, due to the huge search space, the algorithm is only applicable to functions with up to 7 input variables. 4.2 Linear Sifting An effective heuristic approach has been presented in [12]. It can be seen as an extension of sifting <ref> [14] </ref> by a linear operator: instead of only considering level exchanges, linear sifting also considers the effect of the linear combination of adjacent levels. By this, significant reductions of the BDD sizes are possible, and the algorithm is also applicable to large functions. <p> The larger m is chosen the more time 2 The underlying principle is similar to the one suggested for BDD reordering in <ref> [9, 14] </ref>. 8 consuming does the algorithm become, but also the quality of the final result improves.
Reference: [15] <author> F. Somenzi. CUDD: </author> <title> CU Decision Diagram Package Release 2.1.2. </title> <institution> University of Colorado at Boulder, </institution> <year> 1997. </year> <month> 14 </month>
Reference-contexts: For all our experiments we used an upper memory limit of 100 MBytes. Our algorithm has been integrated in the CUDD package <ref> [15] </ref>. In a first series of experiments, we studied the size of the BDD and the linearly transformed BDD for function f from Theorem 1. The results in Table 1 clearly demonstrate the exponential growth for the BDD sizes (in terms of the square root of the number of variables). <p> In a third series of experiments, we compared the sifting algorithm, the linear sifting algorithm and our window optimization algorithm (see Table 3). For sifting and linear sifting, we used the implementation of the CUDD package <ref> [15] </ref>. Since linear sifting does not optimize the cost needed for the EXOR realization, from now on we explicitly give both the BDD node count (column nodes) and the cost for the realization of the linear transformation (column EXOR). <p> Finally, we compared the best-ever values from <ref> [15] </ref> for pure reordering to the best-ever values of linear sifting [12] and to window optimization presented above (see Table 4). Window optimization clearly outperforms the results of both other approaches. In some cases an improvement of nearly a factor of three is possible (see c1908).
References-found: 15

