URL: ftp://ftp.cs.dartmouth.edu/pub/kotz/papers/kotay:agents.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~agent/papers/index.html
Root-URL: http://www.cs.dartmouth.edu
Email: kotay@cs.dartmouth.edu dfk@cs.dartmouth.edu  
Title: Transportable Agents  
Author: Keith D. Kotay and David Kotz 
Date: November 10, 1994  
Address: Hanover, NH 03755-3510  
Affiliation: Department of Computer Science Dartmouth College  
Abstract: As network information resources grow in size, it is often most efficient to process queries and updates at the site where the data is located. This processing can be accomplished by using a traditional clientserver network interface, which constrains the client to the set of queries supported by the server, or requires the server to send all data to the client for processing. The former is inflexible; the latter is inefficient. Transportable agents, which support the movement of the client computation to the location of the remote resource, have the potential to be more flexible and more efficient. Transportable agents are capable of suspending their execution, transporting themselves to another host on a network, and resuming execution from the point at which they were suspended. Transportable agents consume fewer network resources and can support systems that do not have permanent network connections, such as mobile computers and personal digital assistants. We describe a prototype transportable-agent implementation that facilitates research in this area. Agents are written in a script language that supports agent relocation, and the language is processed at each host by an agent interpreter. Electronic mail and UNIX remote shell (rsh) are the two current transport mechanisms and we plan to explore others. We present a technical-report searching agent as a demonstration of the capabilities of our prototype implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [AKW88] <author> Aho, A. V., Kernighan, B. W., and Weinberger, P. J. </author> <title> The AWK Programming Language. </title> <address> New York: </address> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Ultimately, we plan to adopt or design a more appropriate transportable-agent language. The script language was designed to be parsed easily, so it includes many syntactic restrictions (for example, whitespace between all tokens). It supports many features of the AWK <ref> [AKW88] </ref> language, such as dynamic types, associative arrays, and regular expressions. Most of the operators are identical to the operators of AWK.
Reference: [BN84] <author> Birrell, A. D., and Nelson, B. J. </author> <title> "Implementing remote procedure calls." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, no. </volume> <month> 1 (Feb. </month> <year> 1984), </year> <pages> pp. 39-59. </pages>
Reference-contexts: Finally, we discuss our conclusions and future work in sections 5 and 6. 2 Background Although little has been published on transportable agents, much work has been done concerning the general concept of remote computation. Remote Procedure Call (RPC) <ref> [BN84] </ref> was an early form of remote clientserver processing. Although this mechanism did not allow for the remote processing of arbitrary client code, it did allow for specific services to be performed remotely. Later work extended RPC to allow for more general forms of remote processing.
Reference: [Fal87] <author> Falcone, J. R. </author> <title> "A programmable interface language for heterogeneous distributed systems." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 5, no. </volume> <month> 4 (Nov. </month> <year> 1987), </year> <pages> pp. 330-351. </pages>
Reference-contexts: Although this mechanism did not allow for the remote processing of arbitrary client code, it did allow for specific services to be performed remotely. Later work extended RPC to allow for more general forms of remote processing. Falcone <ref> [Fal87] </ref> discusses a heterogeneous distributed system environment in which a programming language is used to provide the remote service interface as an alternative to RPC calls.
Reference: [SG90] <author> Stamos, J. W., and Gifford, D. K. </author> <title> "Remote Evaluation." </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 12, no. </volume> <month> 4 (Oct. </month> <year> 1990), </year> <pages> pp. 537-565. </pages>
Reference-contexts: NCL is based on the LISP programming language and a NCL server essentially executes what resembles a LISP read-eval-print loop to process client programs. Stamos and Gifford <ref> [SG90] </ref> introduces the concept of Remote Evaluation (REV) in which servers are viewed as programmable processors, increasing their flexibility and decreasing the amount of communication necessary to accomplish a given task.
Reference: [Sto94] <author> Stoyenko, A. D. "SUPRA-RPC: </author> <title> SUbprogram PaRAmeters in Remote Procedure Calls." </title> <journal> SoftwarePractice and Experience, </journal> <volume> vol. 24, no. </volume> <month> 1 (Jan. </month> <year> 1994), </year> <pages> pp. 27-49. </pages>
Reference-contexts: In the prototype implementation, the remote programs are a compressed form of list structure executed by a dialect of LISP. Remote procedures must be self-contained in that the only external references allowed are to procedures explicitly supported at the remote processing site. Stoyenko <ref> [Sto94] </ref> describes SUPRA-RPC, an extension to RPC which allows subprograms to be passed as RPC parameters. The SUPRA-RPC subprograms are allowed to access variables and procedures external to the passed subprogram. These external references are implemented by out-of-scope access stubs and callback-handling stubs.

References-found: 5

