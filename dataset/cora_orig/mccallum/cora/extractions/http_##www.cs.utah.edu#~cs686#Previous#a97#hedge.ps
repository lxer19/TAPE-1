URL: http://www.cs.utah.edu/~cs686/Previous/a97/hedge.ps
Refering-URL: http://www.cs.utah.edu/~cs686/Previous/a97/
Root-URL: 
Email: briand,hwu@crhc.uiuc.edu  
Title: Speculative Hedge: Regulating Compile-Time Speculation Against Profile Variations code performance in the presence of execution
Author: Brian L. Deitrich Wen-mei W. Hwu 
Note: put  
Address: IL 61801  
Affiliation: Center for Reliable and High-Performance Computing University of Illinois Urbana-Champaign,  
Abstract: Path-oriented scheduling methods, such as trace scheduling and hyperblock scheduling, use speculation to extract instruction-level parallelism from control-intensive programs. These methods predict important execution paths in the current scheduling scope using execution profiling or frequency estimation. Aggressive speculation is then applied to the important execution paths, possibly at the cost of degraded performance along other paths. Therefore, the speed of the output code can be sensitive to the compiler's ability to accurately predict the important execution paths. Prior work in this area has utilized the speculative yield function by Fisher, coupled with dependence height, to distribute instruction priority among execution paths in the scheduling scope. While this technique provides more stability of performance by paying attention to the needs of all paths, it does not directly address the problem of mismatch between compile-time prediction and run-time behavior. The work presented in this paper extends the speculative yield and dependence height heuristic to explicitly minimize the penalty suffered by other paths when instructions are speculated along a path. Since the execution time of a path is determined by the number of cycles spent between a path's entrance and exit in the scheduling scope, the heuristic attempts to eliminate unnecessary speculation that delays any path's exit. Such control of speculation makes the performance much less sensitive to the actual path taken at run time. The proposed method has a strong emphasis on achieving minimal delay to all exits. Thus the name, speculative hedge, is used. This paper presents the speculative hedge heuristic, and shows how it controls over-speculation in a superblock/hyperblock scheduler. The stability of out Copyright 1996 IEEE. Published in the Proceedings of the 29th Annual International Symposium on Microarchitecture, De-cember 2-4, 1996, Paris, France. Personal use of this material is permitted. However, permission to reprint/republish this material for resale or redistribution purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works, must be obtained from the IEEE. Contact: Manager, Copyrights and Permissions / IEEE Service Center / 445 Hoes Lane / P.O. Box 1331 / Piscataway, NJ 08855-1331, USA. Telephone: + Intl. 908-562-3966 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aho, R. Sethi, and J. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: IMPACT uses a standard, iterative data-flow algorithm for the analysis which has a worst-case run time of O (b 2 ), where b = number of basic blocks <ref> [1] </ref>. For the benchmarks used in this paper, prepass scheduling took 26% to 49% longer for speculative hedge than it did for DHASY. 5. Conclusion 5.1.
Reference: [2] <author> R. A. Bringmann. </author> <title> Compiler-Controlled Speculation. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <year> 1995. </year>
Reference-contexts: It is the probability that an operation scheduled in basic block i produces useful work (meaning that its original basic block j executes when basic block i executes). Its use with dependence height has been shown to account for the needs of all paths during the scheduling process <ref> [2] </ref>. Speculative yield, coupled with dependence height, provides a good heuristic for path-oriented schedulers, but it does not address the problem of mismatches between compile-time prediction and run-time behavior. <p> The appeal is that dependence height is commonly used as the priority function, and speculative yield allows it to take into account the probability of taken branches. Bringmann utilized this concept in a list scheduler for superblocks <ref> [2] </ref>. In his method, a static heuristic utilizes the exit probabilities 2 and an operation's late times to generate the priority for that operation. The operations are then scheduled greedily, so that the highest priority operation that is available gets scheduled.
Reference: [3] <author> P. P. Chang, S. A. Mahlke, W. Y. Chen, N. J. Warter, and W. W. Hwu. </author> <title> IMPACT: An architectural framework for multiple-instruction-issue processors. </title> <booktitle> In Proceedings of the 18th International Symposium on Computer Architecture, </booktitle> <pages> pages 266-275, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Finally, the compilation-time implications of speculative hedge's dynamic priority scheme are addressed. 4.1. Methodology The speculative hedge, dependence height and speculative yield, and successive retirement heuristics have been implemented in the IMPACT compiler <ref> [3] </ref>. This compiler inlined, coalesced into superblocks, and fully ILP optimized the six SPEC CINT92 benchmarks used in this testing. The benchmarks used are espresso, li, eqntott, compress, sc, and cc1. <p> An enhanced version of the HP PA-RISC processor instruction set is used with a non-trapping version of instructions added, so speculative instructions cannot cause program termination. This allows the general speculation model to be utilized by the scheduler <ref> [3] </ref>. This model gives the scheduler the freedom and choices during scheduling to help differentiate the performance of the heuristics. The analysis focuses on prepass scheduling, and the effect that the compile-time predicted behavior has on the quality of the schedules produced.
Reference: [4] <author> C. Chekuri, R. Motwani, R. Johnson, B. Natarajan, B. R. Rau, and M. Schlansker. </author> <title> Profile-driven instruction level parallel scheduling with applications to super blocks. </title> <booktitle> In Proceedings of the 29th Annual International Symposium on Microarchitecture, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: SUCCESSIVE RETIREMENT Successive retirement is another profile-independent scheduling heuristic which attempts to retire each exit in-order, as early as possible <ref> [4, 16] </ref>. This heuristic minimizes speculation, so that it only speculates when there are no non-speculative instructions available. This scheduling method works well for narrow-issue processors, where speculation is not very important. However, it can potentially lose performance by not speculating enough for wide-issue processors.
Reference: [5] <author> T. M. Conte, B. A. Patel, K. N. Menezes, and J. S. Cox. </author> <title> Hardware-based profiling: An effective technique for profile-driven optimization. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 24(2) </volume> <pages> 187-206, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Speculative hedge does not address the problem of determining what paths should be scheduled together. A poor selection of paths to schedule together will limit the amount of ILP that can be generated for a program, and cause a profile-dependence problem <ref> [5] </ref>. Speculative hedge limits the damage associated with a poor selection by ensuring that paths are not delayed unnecessarily. This property is especially important for any compiler which uses static analysis instead of profile information to determine which paths should be scheduled together [9].
Reference: [6] <author> S. Davidson, D. Landskov, B. D. Shriver, and P. W. Mallett. </author> <title> Some experiments in local microcode compaction for horizontal machines. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30:460-477, </volume> <month> July </month> <year> 1981. </year>
Reference-contexts: This case illustrates the main concept behind speculative hedge|account for processor resources so exits are not delayed unnecessarily. a problem. CRITICAL PATH Critical path is a profile-independent scheduling heuristic that has been used in many types of schedulers <ref> [13, 6, 11] </ref>. Its application to superblock scheduling consists of using the dependence height associated with the last exit in a superblock.
Reference: [7] <author> J. A. Fisher. </author> <title> Trace scheduling: A technique for global microcode compaction. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30:478-490, </volume> <month> July </month> <year> 1981. </year>
Reference-contexts: 1. Introduction Path-oriented scheduling methods, such as trace scheduling <ref> [7] </ref> and superblock/hyperblock scheduling [10, 12], extract instruction-level parallelism from control-intensive programs by using speculation. Profile information or frequency estimation guides aggressive speculation, so that important execution paths can have their run time minimized.
Reference: [8] <author> J. A. Fisher. </author> <title> Global code generation for instruction-level parallelism: Trace scheduling-2. </title> <type> Technical Report HPL-93-43, </type> <institution> Hewlett-Packard Laboratory, 1501 Page Mill Road, </institution> <address> Palo Alto, CA 94304, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: However, with limited execution resources, situations arise where one path will execute faster, only if another path gets delayed. Fisher proposed the use of speculative yield to determine the profitability of speculating an instruction <ref> [8] </ref>. The speculative yield is an expected value function which is defined between basic blocks. It is the probability that an operation scheduled in basic block i produces useful work (meaning that its original basic block j executes when basic block i executes). <p> Previous Work and Other Heuristics DEPENDENCE HEIGHT AND SPECULATIVE YIELD Fisher suggests that the multiplication of dependence height by speculative yield is a good candidate for the scheduling priority function <ref> [8] </ref>. The appeal is that dependence height is commonly used as the priority function, and speculative yield allows it to take into account the probability of taken branches. Bringmann utilized this concept in a list scheduler for superblocks [2].
Reference: [9] <author> R. E. Hank, S. A. Mahlke, R. A. Bringmann, J. C. Gyllenhaal, and W. W. Hwu. </author> <title> Superblock formation using static program analysis. </title> <booktitle> In Proceedings of the 26th Annual International Symposium on Microarchi-tecture, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Speculative hedge limits the damage associated with a poor selection by ensuring that paths are not delayed unnecessarily. This property is especially important for any compiler which uses static analysis instead of profile information to determine which paths should be scheduled together <ref> [9] </ref>. The usefulness of the speculative hedge heuristic is demonstrated in a superblock/hyperblock scheduler. The remainder of the paper describes the heuristic, its implementation in the superblock/hyperblock scheduler, and the results obtained when the heuristic is applied to six SPEC CINT92 benchmarks.
Reference: [10] <author> W. W. Hwu, S. A. Mahlke, W. Y. Chen, P. P. Chang, N. J. Warter, R. A. Bringmann, R. G. Ouellette, R. E. Hank, T. Kiyohara, G. E. Haab, J. G. Holm, and D. M. Lavery. </author> <title> The Superblock: An effective technique for VLIW and superscalar compilation. </title> <journal> The Journal of Supercomputing, </journal> <volume> 7(1) </volume> <pages> 229-248, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: 1. Introduction Path-oriented scheduling methods, such as trace scheduling [7] and superblock/hyperblock scheduling <ref> [10, 12] </ref>, extract instruction-level parallelism from control-intensive programs by using speculation. Profile information or frequency estimation guides aggressive speculation, so that important execution paths can have their run time minimized. However, with limited execution resources, situations arise where one path will execute faster, only if another path gets delayed.
Reference: [11] <author> W. H. Kohler. </author> <title> A preliminary evaluation of the critical path method for scheduling tasks on multiprocessor systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-24:1235-1238, </volume> <month> December </month> <year> 1975. </year>
Reference-contexts: This case illustrates the main concept behind speculative hedge|account for processor resources so exits are not delayed unnecessarily. a problem. CRITICAL PATH Critical path is a profile-independent scheduling heuristic that has been used in many types of schedulers <ref> [13, 6, 11] </ref>. Its application to superblock scheduling consists of using the dependence height associated with the last exit in a superblock.
Reference: [12] <author> S. A. Mahlke, D. C. Lin, W. Y. Chen, R. E. Hank, and R. A. Bringmann. </author> <title> Effective compiler support for predicated execution using the hyperblock. </title> <booktitle> In Proceedings of the 25th International Symposium on Microarchitec-ture, </booktitle> <pages> pages 45-54, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: 1. Introduction Path-oriented scheduling methods, such as trace scheduling [7] and superblock/hyperblock scheduling <ref> [10, 12] </ref>, extract instruction-level parallelism from control-intensive programs by using speculation. Profile information or frequency estimation guides aggressive speculation, so that important execution paths can have their run time minimized. However, with limited execution resources, situations arise where one path will execute faster, only if another path gets delayed.
Reference: [13] <author> C. V. Ramamoorthy and M. Tsuchiya. </author> <title> A high level language for horizontal microprogramming. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-23:791-802, </volume> <month> August </month> <year> 1974. </year>
Reference-contexts: This case illustrates the main concept behind speculative hedge|account for processor resources so exits are not delayed unnecessarily. a problem. CRITICAL PATH Critical path is a profile-independent scheduling heuristic that has been used in many types of schedulers <ref> [13, 6, 11] </ref>. Its application to superblock scheduling consists of using the dependence height associated with the last exit in a superblock.
Reference: [14] <author> B. R. Rau. </author> <title> Iterative modulo scheduling: An algorithm for software pipelining loops. </title> <booktitle> In Proceedings of the 27th International Symposium on Microarchitecture, </booktitle> <pages> pages 63-74, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: As with 4 the priority calculation, this information is recomputed dy-namically during the scheduling process. In speculative hedge, the estimation of when an exit can be retired is optimistic. It is a lower bound on how quickly an exit can be retired <ref> [14] </ref>. An estimate may change during the course of scheduling because conflicting needs between different exits force some exits to delay. It is the dynamic priority function's responsibility to effectively deal with the trade-offs that must be made during the scheduling process.
Reference: [15] <author> M. Schlansker and V. Kathail. </author> <title> Critical path reduction for scalar programs. </title> <booktitle> In Proceedings of the 28th International Symposium on Microarchitecture, </booktitle> <pages> pages 57-69, </pages> <month> December </month> <year> 1995. </year> <month> 10 </month>
Reference-contexts: Future Work Future work includes fixing the speculative hedge heuristic so it can account for multiple, independent paths of control. This problem must be fixed so fully-resolved predicates <ref> [15] </ref> can be dealt with effectively. In addition, some of the potential problem areas discussed earlier may be tackled if new applications show that they are more of an issue than they were in SPEC CINT92.
Reference: [16] <author> M. D. Smith. </author> <title> Architectural support for compile-time speculation. </title> <editor> In D. Lilja and P. Bird, editors, </editor> <booktitle> The Interaction of Compilation Technology and Computer Architecture, </booktitle> <pages> pages 13-49. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1994. </year> <month> 11 </month>
Reference-contexts: SUCCESSIVE RETIREMENT Successive retirement is another profile-independent scheduling heuristic which attempts to retire each exit in-order, as early as possible <ref> [4, 16] </ref>. This heuristic minimizes speculation, so that it only speculates when there are no non-speculative instructions available. This scheduling method works well for narrow-issue processors, where speculation is not very important. However, it can potentially lose performance by not speculating enough for wide-issue processors.
References-found: 16

