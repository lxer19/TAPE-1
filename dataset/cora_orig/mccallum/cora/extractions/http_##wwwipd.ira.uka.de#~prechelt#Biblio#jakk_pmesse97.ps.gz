URL: http://wwwipd.ira.uka.de/~prechelt/Biblio/jakk_pmesse97.ps.gz
Refering-URL: 
Root-URL: 
Email: (prechelt,unger,phlipp@ira.uka.de)  
Title: Documenting Design Patterns in Code Eases Program Maintenance  
Author: Lutz Prechelt, Barbara Unger, Michael Philippsen 
Address: D-76128 Karlsruhe, Germany  
Affiliation: Fakultat fur Informatik, Universitat Karlsruhe  
Date: May 18, 1997.  
Note: Appeared in "Proc. ICSE Workshop on Process Modeling and Empirical Studies of Software Evolution" pp. 72-76, Boston, MA,  
Abstract: We consider the case of programmers using design pattern documentation (in the form of comments in the source program) during maintenance. Is such pattern documentation (PD) helpful for understanding a program more quickly and designing better solutions for given maintenance tasks? We describe a controlled experiment for investigating this question, present its results, and conclude that design pattern documentation can speed up program changes as well as improve their quality.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Beck, J.O. Coplien, R. Crocker, L. Dominick, G. Meszaros, F. Paulisch, and J. Vlissides. </author> <title> Industrial experience with design patterns. </title> <booktitle> In 18th Intl. Conf. on Software Engineering, </booktitle> <pages> pages 103-114, </pages> <address> Berlin, March 1996. </address> <publisher> IEEE CS press. </publisher>
Reference-contexts: The idea of design patterns is appealing and practitioners report subjectively that design patterns (1) simplify communication between designers by providing a concise common vocabulary, (2) can be used to record and reuse best practices, and (3) "capture the essential parts of a design in compact form" <ref> [1] </ref>. However, no rigorous test has yet been presented that design patterns are useful. This paper is a report on the first controlled experiment that investigates the benefits obtained from explicit use (here: documentation) of design patterns. We shortly describe our experiment and its main results.
Reference: [2] <author> Larry B. Christensen. </author> <title> Experimental Methodology. </title> <publisher> Allyn and Bacon, </publisher> <address> Needham Heights, MA, 6th edition, </address> <year> 1994. </year>
Reference-contexts: We balanced across the subjects the order of the two programs, the order of having and not having PD, 2 and the combination of both, i.e., we used a counterbalanced experiment design <ref> [2] </ref>. 1 Furthermore, we also balanced the four resulting groups for expected subject ability, measured by the number of points each subject received in the lab course, using stratified random sampling.
Reference: [3] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: 1 Background Design patterns <ref> [3] </ref> are a promising approach to simplifying the design and construction as well as the understanding and evolution of software systems. Design patterns are prepackaged design solutions on the level of a few classes ("micro architectures"). They provide a solution approach for a class of problems. <p> Program 1 (Element ) was a library for handling And/Or-trees of strings and a toy application of it. It had 7 classes, spanned 7 printed pages (362 source lines, 133 of which were comments), and used the Composite and the Visitor design pattern <ref> [3] </ref>. Program 2 (Tuple) was a GUI program for reading tuples (name, first name, phone number) entered by the user and showing them in different views on the screen, see the screenshot on the right. <p> It had 11 classes, spanned 10 printed pages (565 source lines, 197 of which were comments), and used the Observer and the Template Method design pattern <ref> [3] </ref>. 2.4 Independent Variable and Experiment Controls The independent variable in this experiment was the presence or absence of design pattern documentation (PD) in the comments of the source programs.
Reference: [4] <author> Lutz Prechelt. </author> <title> An experiment on the usefulness of design patterns: Detailed description and evaluation. </title> <type> Technical Report 9/1997, </type> <institution> Fakultat fur Informatik, Universitat Karlsruhe, </institution> <address> Germany, April/May 1997. ftp.ira.uka.de/pub/techreports. </address>
Reference-contexts: This paper is a report on the first controlled experiment that investigates the benefits obtained from explicit use (here: documentation) of design patterns. We shortly describe our experiment and its main results. You will find an extensive description and evaluation of the experiment in <ref> [4] </ref>. 1 2 Our Experiment 2.1 Hypothesis and Approach The purpose of the experiment was to test whether well-documented programs could benefit (during program evolution) from additional documentation of the design patterns used.
Reference: [5] <author> Julien L. Simon. </author> <title> Resampling: The new statistics. </title> <publisher> Duxbury Press, </publisher> <address> Belmont, CA, </address> <year> 1992. </year> <title> http://www.statistics.com. Biography Lutz Prechelt is a research associate with research interests in empirical software engineering (in particular design patterns and personal process improvement), benchmarking and quantitative methods, and compiler construction for parallel processing. Barbara Unger is a Ph.D. student whose interests are in empirical software engineering. Michael Philippsen is a research associate with interests in compiler construction, in particular optimizations for object-oriented parallel and distributed programming, and in software engineering, in particular design patterns. </title> <type> 5 </type>
Reference-contexts: As neither the time nor the point distributions were normal, I and p were computed using resampling statistics with 10000 trials <ref> [5] </ref>. 4. Due to the small program size, the pattern density in the programs was quite large. Therefore one could find the patterns quickly even if they were not documented. 5.
References-found: 5

