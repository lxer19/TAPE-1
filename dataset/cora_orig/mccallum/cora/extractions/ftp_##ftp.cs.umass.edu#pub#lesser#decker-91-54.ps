URL: ftp://ftp.cs.umass.edu/pub/lesser/decker-91-54.ps
Refering-URL: http://www-ccs.cs.umass.edu/~humphrey/home.html
Root-URL: 
Email: Email: DECKER@CS.UMASS.EDU  
Phone: Phone: (413)545-3444 Fax: (413)545-1249  
Title: Control Heuristics for Scheduling in a Parallel Blackboard System  
Author: Keith Decker, Alan Garvey, Marty Humphrey and Victor Lesser 
Keyword: Blackboard Systems, Parallelism, Control Knowledge  
Date: 11, 1993  
Note: March  
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: This paper investigates the effects of parallelism on blackboard system scheduling heuristics. A parallel blackboard system is described that allows multiple knowledge source instantiations (KSIs) to execute in parallel using a shared-memory blackboard approach. New classes of control knowledge are defined that order the agenda by using information about the relationships between the goals of the KSIs. This control knowledge is implemented and tested in the DVMT application on a Sequent multiprocessor using BB1-style control heuristics. The usefulness of the heuristics is examined by comparing the effectiveness of problem-solving with and without the heuristics (as a group and individually). Problem solving with the new control knowledge results in improved system performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference-contexts: The competes relation is used to produce KSI invalidation constraints. These relations also produce KSI bottlenecking information. Temporal Relations: From Allen <ref> [1] </ref>, these include before, equal, meets, overlaps, during, starts, finishes, and their inverses. They can arise from domain relations, or depend on the scheduled timing of goals their start and finish times, estimates of these, and real and estimated durations.
Reference: [2] <author> Roberto Bisiani and A. Forin. </author> <title> Parallelization of blackboard architectures and the Agora system. </title> <editor> In V. Jagannathan, Rajendra Dodhiawala, and Lawrence S. Baum, editors, </editor> <title> Blackboard Architectures and Applications. </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: This was the case primarily because of the primitive nature of existing parallel hardware and the lack of sophisticated software development environments. Only recently have hardware and software capabilities come together to allow the actual implementation of parallel blackboard systems <ref> [2] </ref>. Useful parallel 1 programming environments now exist, including parallel implementations of Lisp. <p> We believe that other systems that share this characteristic will find that simple locking mechanisms are adequate. For example, the AGORA system uses write-once memory management where a blackboard element cannot be updated in place, but rather a copy is made <ref> [2] </ref>. Several types of locks were used in the implementation. Each blackboard level (space) is divided into a set of buckets. A blackboard data unit is stored in a small number of buckets based on its characteristics. Each bucket is given its own lock.
Reference: [3] <author> Norman Carver and Victor Lesser. </author> <title> A new framework for sensor interpretation: Planning to resolve sources of uncertainty. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 724-731, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Without this more knowledgeable scheduler, the parallel heuristics could not be more fully exploited. The RESUN <ref> [3] </ref> architecture for interpretation problems possesses this high-level representation. Termination criteria are explicit, as is a complete representation of how the primitive actions impact the termination criteria. We believe future work in a parallel version of this architecture will provide valuable insights on a parallel scheduling theory.
Reference: [4] <author> Daniel D. Corkill. </author> <title> Design alternatives for parallel and distributed blackboard systems. </title> <editor> In V. Jagannathan, Rajendra Dodhiawala, and Lawrence S. Baum, editors, </editor> <title> Blackboard Architectures and Applications. </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: The concept of independent Knowledge Sources (KSs) that communicate only through a shared blackboard is a model that inherently encourages parallel execution. There are many alternatives for parallelizing a blackboard system at the knowledge source execution level. Corkill <ref> [4] </ref> analyzes three (see Figure 1): a distributed blackboard approach with multiple Knowledge Source Instantiation (KSI) queues and multiple blackboards, a blackboard server approach with multiple KSI queues and a single blackboard located at one processor, and a shared memory approach, with all processors sharing a single blackboard and a single
Reference: [5] <author> Daniel D. Corkill, Victor R. Lesser, and Eva Hudlick a. </author> <title> Unifying data-directed and goal-directed control: An example and experiments. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 143-147, </pages> <address> Pittsburgh, Pennsylvania, </address> <month> August </month> <year> 1982. </year>
Reference-contexts: For example, avoiding access collisions requires knowledge about the input/output characteristics of a KSI (i.e., what parts of the blackboard it accesses and modifies.) KSI ordering requires knowledge about KSI interactions. Often this knowledge is best captured through relationships among the goals of particular KSIs <ref> [5, 24] </ref>. Avoiding KSI bottlenecking requires knowledge about the probable outcomes of KSIs, again often expressed through goal relationships. KSI invalidation uses knowledge about supergoal and subgoal relationships to understand the effect of KSI executions on other KSIs' goals.
Reference: [6] <author> Keith S. Decker, Alan J. Garvey, Marty A. Humphrey, and Victor R. Lesser. </author> <title> A real-time control architecture for an approximate processing blackboard system. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 7(2), </volume> <year> 1993. </year>
Reference-contexts: Unimportant channels can be ignored if deemed necessary. A channelized version version of the uniprocessor DVMT was implemented and 16 used for experiments in real-time problem solving <ref> [6, 17] </ref>. Our intent is to eventually create a parallel version of this channelized architecture in which one or more processors are devoted to each channel. The allocation of processors to channels would be dynamic and controlled according to the system goals.
Reference: [7] <author> Keith S. Decker, Marty A. Humphrey, and Victor R. Lesser. </author> <title> Experimenting with control in the DVMT. </title> <booktitle> In Proceedings of the Third Annual AAAI Workshop on Blackboard Systems, </booktitle> <address> Detroit, </address> <month> August </month> <year> 1989. </year> <note> Also COINS TR-89-85. </note>
Reference-contexts: In Section 2.2 we discuss how the uniprocessor architecture was made into a multiprocessor architecture. Section 2.3 presents details of the blackboard locking mechanisms. 2.1 Uniprocessor Architecture The low-level control loop of our uniprocessor blackboard architecture is depicted in Figure 2 and described in more detail in <ref> [7, 11] </ref>. In this architecture the processor selects the currently top rated KSI from the executable agenda and executes the KSI action, which creates and modifies blackboard hypotheses. These hypotheses stimulate goals, which trigger new KSs for execution. A scheduler orders the executable agenda and the loop begins again.
Reference: [8] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Analyzing a quantitative coordination relationship. </title> <type> COINS Technical Report 91-83, </type> <institution> University of Massachusetts, </institution> <month> November </month> <year> 1991. </year> <note> To appear in the journal Group Decision and Negotiation, </note> <year> 1993. </year>
Reference-contexts: We are developing an abstract task generator capable of capturing all the interactions of KSIs in any domain [10]. We have also worked on quantifying these interactions (called coordination relationships) for distributed and parallel processing <ref> [8] </ref>. Work developing a parallel scheduling theory in this abstract environment has begun [20] with the hopes of providing general results with wider applicability. Acknowledgments We thank Kevin Q. Gallagher for his work in creating a shared memory parallel processing version of GBB 2.0.
Reference: [9] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Generalizing the partial global planning algorithm. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(2), </volume> <month> June </month> <year> 1992. </year> <month> 18 </month>
Reference-contexts: KSI invalidation uses knowledge about supergoal and subgoal relationships to understand the effect of KSI executions on other KSIs' goals. There are four general categories of goal relationships that can be used (via KSI rating heuristic functions) to schedule domain KSIs <ref> [9] </ref>: Domain Relations: This set of relations is generic in that they apply to multiple domains and domain dependent in that they can be evaluated only with respect to a particular domain.
Reference: [10] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task envi-ronments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Finally, we are attempting to formalize and generalize the results from these studies. The 17 results discussed in this paper are important though limited by a single-instance experimental methodology. We are developing an abstract task generator capable of capturing all the interactions of KSIs in any domain <ref> [10] </ref>. We have also worked on quantifying these interactions (called coordination relationships) for distributed and parallel processing [8]. Work developing a parallel scheduling theory in this abstract environment has begun [20] with the hopes of providing general results with wider applicability. Acknowledgments We thank Kevin Q.
Reference: [11] <author> Keith S. Decker, Victor R. Lesser, and Robert C. Whitehair. </author> <title> Extending a blackboard architecture for approximate processing. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):47-79, 1990. 
Reference-contexts: In Section 2.2 we discuss how the uniprocessor architecture was made into a multiprocessor architecture. Section 2.3 presents details of the blackboard locking mechanisms. 2.1 Uniprocessor Architecture The low-level control loop of our uniprocessor blackboard architecture is depicted in Figure 2 and described in more detail in <ref> [7, 11] </ref>. In this architecture the processor selects the currently top rated KSI from the executable agenda and executes the KSI action, which creates and modifies blackboard hypotheses. These hypotheses stimulate goals, which trigger new KSs for execution. A scheduler orders the executable agenda and the loop begins again. <p> However, this may not always be the best course to takeeven our own system is being expanded to include multiple methods of achieving the same result by trading off some of the characteristics (such as precision and certainty) for time <ref> [11] </ref>. This may result in more potentially obviatable KSIs on the agenda. We test this hypothesis in Section 4.2.1. The access collision heuristic is also relatively weak.
Reference: [12] <author> Rajendra T. Dodhiawala, N. S. Sridharan, and Cynthia Pickering. </author> <title> A real-time blackboard architecture. </title> <editor> In V. Jagannathan, Rajendra Dodhiawala, and Lawrence S. Baum, editors, </editor> <booktitle> Blackboard Architectures and Applications, </booktitle> <pages> pages 219-237. </pages> <publisher> Academic Press, Inc., </publisher> <year> 1989. </year>
Reference-contexts: But what if the vehicle does not appear until time 5? In this case, instead of processing all of the data in a phase, we would like to establish channels for each vehicle (or, more abstractly, groups of data, regions in the XY plane, etc.) <ref> [12] </ref>. Channels are created as vehicles appear and allow different data to be in different phases of problem solving simultaneously. A channelized architecture permits real-time problem solving, which often requires being able to separate and work on certain KSIs to the exclusion of others.
Reference: [13] <author> E.H. Durfee and V.R. Lesser. </author> <title> Partial global planning: A coordination framework for distributed hypothesis formation. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(5) </volume> <pages> 1167-1183, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: New control heuristics need to be added for effective parallelism. Early work on Partial Global Planning <ref> [13] </ref> showed that constructing schedules using a high-level view of the solution space (derived by distributed agents from task relationships) improved the utilization and effectiveness of distributed processors. This leads to the intuition that task relationships may be helpful for scheduling in a single agent, parallel-processing environment.
Reference: [14] <author> J. Robert Ensor and John D. Gabbe. </author> <title> Transactional blackboards. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 340-344, </pages> <month> August </month> <year> 1985. </year> <note> Also published in Readings in Distributed Artificial Intelligence, </note> <editor> Alan H. Bond and Les Gasser, editors, p. </editor> <address> 557-561, </address> <publisher> Morgan Kaufman, </publisher> <year> 1988. </year>
Reference-contexts: This assures that a KSI will have exclusive access to the parts of the blackboard that it needs in order to execute. An alternative method for enforcing data consistency is the use of transactions as described by Ensor and Gabbe <ref> [14] </ref>. We have found that a much simpler locking mechanism is sufficient for our system. The only locking mechanism we provide is atomic read/write locks for blackboard writes. This mechanism is invoked when a blackboard write is done.
Reference: [15] <author> L. D. Erman, F. Hayes-Roth, V. R. Lesser, and D. R. Reddy. </author> <title> The Hearsay-II speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: The focus of this work is knowledge source parallelism using the shared memory blackboard approach, which has been discussed in several places in the literature. Early work by Fennell and Lesser [16] studied the effects of parallelism on the Hearsay II speech understanding system <ref> [15] </ref>. One major contribution of that project is a detailed study of blackboard locking mechanisms. More recently, the CAGE architecture has been developed that takes the existing AGE blackboard architecture and extends it to execute concurrently at several different granularities, including that of knowledge source parallelism [25].
Reference: [16] <author> R. D Fennell and V. R. Lesser. </author> <title> Parallelism in AI problem solving: A case study of Hearsay-II. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-26(2):98-111, </volume> <month> February </month> <year> 1977. </year>
Reference-contexts: The focus of this work is knowledge source parallelism using the shared memory blackboard approach, which has been discussed in several places in the literature. Early work by Fennell and Lesser <ref> [16] </ref> studied the effects of parallelism on the Hearsay II speech understanding system [15]. One major contribution of that project is a detailed study of blackboard locking mechanisms. <p> The most detailed is that presented by Fennell and Lesser, who describe a method for locking blackboards that assures data integrity <ref> [16] </ref>. Their method provides two kinds of mechanisms for accomplishing this: various locking mechanisms that provide exclusive access to blackboard objects and regions, and a data-tagging facility that allows processors to state their assumptions about data values and receive messages when those assumptions are violated. <p> This heuristic implements the general access collision control knowledge described in Section 3. In our case, only blackboard write operations need to be locked. This heuristic will be more applicable in systems such as those described by <ref> [16] </ref> that do more elaborate locking. This is a numeric preference heuristic. Obviously this heuristic is not needed in the single processor case because only one KSI is being executed, so there cannot be any blackboard access collisions. Prefer Many Output Hypotheses.
Reference: [17] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 23(6), </volume> <year> 1993. </year> <note> Special Issue on Scheduling, Planning, and Control. </note>
Reference-contexts: Unimportant channels can be ignored if deemed necessary. A channelized version version of the uniprocessor DVMT was implemented and 16 used for experiments in real-time problem solving <ref> [6, 17] </ref>. Our intent is to eventually create a parallel version of this channelized architecture in which one or more processors are devoted to each channel. The allocation of processors to channels would be dynamic and controlled according to the system goals.
Reference: [18] <author> Barbara Hayes-Roth. </author> <title> A blackboard architecture for control. </title> <journal> Artificial Intelligence, </journal> <volume> 26 </volume> <pages> 251-321, </pages> <year> 1985. </year>
Reference-contexts: These goals generate new KSIs as well. The next phase commences with the execution of the highest-rated KSI on the new agenda. The values of the parameters of the low-level control loop are set by BB1-style control knowledge sources <ref> [18] </ref>. The control KSs can conceptually run asynchronously with the domain processingit could exist as a separate process running concurrently with the domain processing, or it could be activated at a particular point in the low-level control loop. For simplicity, we make the latter choice. <p> However, from the discussion in Section 3 we should be able to do better than just taking the top (single processor) rated KSI off of the agenda. Four new scheduling heuristics were added to incorporate knowledge of parallelism. In our system, a BB1-style controller <ref> [18] </ref> rates each KSI with a set of active heuristics. In the parallel system, we defined two types of heuristicsnumeric and pass/fail. Numeric heuristics are summed to produce a rating; pass/fail heuristics must pass a KSI or it will not be executed.
Reference: [19] <author> Frederick Hayes-Roth and Victor R. Lesser. </author> <title> Focus of attention in the Hearsay-II speech understanding system. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 27-35, </pages> <month> August </month> <year> 1977. </year>
Reference-contexts: KSI A should be performed as soon as possible, because it will allow more parallelism later. KSI Invalidation: This is based on the Competition Principle in Hearsay-II <ref> [19] </ref>: the results of some KSIs may completely remove the need to execute other KSIs. A KSI should not be selected for immediate execution if it will be obviated by the successful completion of a currently-executing KSI.
Reference: [20] <author> Marty A. Humphrey and Victor R. Lesser. </author> <title> Parallel scheduling based on abstract task models. Working Paper, Cooperative Distributed Problem Solving Laboratory, </title> <year> 1992. </year>
Reference-contexts: We are developing an abstract task generator capable of capturing all the interactions of KSIs in any domain [10]. We have also worked on quantifying these interactions (called coordination relationships) for distributed and parallel processing [8]. Work developing a parallel scheduling theory in this abstract environment has begun <ref> [20] </ref> with the hopes of providing general results with wider applicability. Acknowledgments We thank Kevin Q. Gallagher for his work in creating a shared memory parallel processing version of GBB 2.0.
Reference: [21] <author> V. R. Lesser, R. D. Fennell, L. D. Erman, and D. R. Reddy. </author> <title> Organization of the HEARSAY II speech understanding system. </title> <journal> IEEE Transactions on Acoustics, Speech, and Signal Processing, </journal> <volume> ASSP-23:11-23, </volume> <month> February </month> <year> 1975. </year>
Reference-contexts: 1 Introduction From the beginning the blackboard paradigm has been developed with parallelism in mind <ref> [21] </ref>. The concept of independent Knowledge Sources (KSs) that communicate only through a shared blackboard is a model that inherently encourages parallel execution. There are many alternatives for parallelizing a blackboard system at the knowledge source execution level.
Reference: [22] <author> Victor R. Lesser and Daniel D. Corkill. </author> <title> Functionally accurate, cooperative distributed systems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-11(1):81-96, </volume> <month> January </month> <year> 1981. </year>
Reference-contexts: Thus, no KSI will have to wait for very long. Since only one lock is ever acquired at a time, deadlock is impossible. The operating system scheduler prevents starvation. This simple mechanism is sufficient because the system can build several, possibly conflicting, partial solutions to a problem <ref> [22] </ref>. It does not require exactly one consistent working solution, so it does not return to and delete objects that cause inconsistencies. Because hypotheses are never deleted, the structure of the hypotheses on the blackboard never changes; only the beliefs in existing hypotheses may change.
Reference: [23] <author> Victor R. Lesser and Daniel D. Corkill. </author> <title> The distributed vehicle monitoring testbed. </title> <journal> AI Magazine, </journal> <volume> 4(3) </volume> <pages> 63-109, </pages> <month> Fall </month> <year> 1983. </year>
Reference: [24] <author> Victor R. Lesser, Daniel D. Corkill, Robert C. Whitehair, and John A. Hernandez. </author> <title> Focus of control through goal relationships. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, </address> <month> August </month> <year> 1989. </year> <month> 19 </month>
Reference-contexts: For example, avoiding access collisions requires knowledge about the input/output characteristics of a KSI (i.e., what parts of the blackboard it accesses and modifies.) KSI ordering requires knowledge about KSI interactions. Often this knowledge is best captured through relationships among the goals of particular KSIs <ref> [5, 24] </ref>. Avoiding KSI bottlenecking requires knowledge about the probable outcomes of KSIs, again often expressed through goal relationships. KSI invalidation uses knowledge about supergoal and subgoal relationships to understand the effect of KSI executions on other KSIs' goals.
Reference: [25] <author> H. Penny Nii, Nelleke Aiello, and James Rice. </author> <title> Experiments on Cage and Poligon: Measuring the performance of parallel blackboard systems. </title> <editor> In M. N. Huhns and L. Gasser, editors, </editor> <booktitle> Distributed Artificial Intelligence, </booktitle> <volume> Vol. II. </volume> <publisher> Morgan Kaufman Publishers, Inc., </publisher> <year> 1989. </year>
Reference-contexts: One major contribution of that project is a detailed study of blackboard locking mechanisms. More recently, the CAGE architecture has been developed that takes the existing AGE blackboard architecture and extends it to execute concurrently at several different granularities, including that of knowledge source parallelism <ref> [25] </ref>. Another similar parallel blackboard system was built by Velthuijsen, et al. [27]. One distinguishing feature of these studies of parallelism in blackboard systems is that they used simulated parallelism. Concurrently executing processes and interprocess communication were simulated using models of parallel environments.
Reference: [26] <author> James Rice, Nelleke Aiello, and H. Penny Nii. </author> <title> See how they run... the architecture and performance of two concurrent blackboard systems. </title> <editor> In V. Jagannathan, Rajendra Dodhiawala, and Lawrence S. Baum, editors, </editor> <title> Blackboard Architectures and Applications. </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: The agenda, the blackboard, and the values of the parameters of the low-level control loop are the only shared data structures. This basic architecture is similar to the architecture of the Cage simulation that utilized KS-level parallelism and asynchronous control <ref> [26] </ref>. In our implementation of the meta-control for the application described later, there was generally only one control knowledge source on the agenda at any one time. <p> The overall speedup of 3.8 affirms the intuition behind the design of our parallel architecture. By running the low-level control loop in parallel we avoided the control bottleneck observed by Rice et al. in their first Cage experiment, where a set of KSs was executed synchronously by the controller <ref> [26] </ref>. The most important numbers in the table are the speedups in the phases (the speedups in the phase changes are included only for completeness). Phase 1 showed a speedup of 3.6, primarily due to data parallelism.
Reference: [27] <author> H. Velthuijsen, B.J. Lippolt, and J. C. Vonk. </author> <title> A parallel blackboard system for robot control. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1157-1159, </pages> <month> August </month> <year> 1987. </year> <month> 20 </month>
Reference-contexts: More recently, the CAGE architecture has been developed that takes the existing AGE blackboard architecture and extends it to execute concurrently at several different granularities, including that of knowledge source parallelism [25]. Another similar parallel blackboard system was built by Velthuijsen, et al. <ref> [27] </ref>. One distinguishing feature of these studies of parallelism in blackboard systems is that they used simulated parallelism. Concurrently executing processes and interprocess communication were simulated using models of parallel environments.
References-found: 27

