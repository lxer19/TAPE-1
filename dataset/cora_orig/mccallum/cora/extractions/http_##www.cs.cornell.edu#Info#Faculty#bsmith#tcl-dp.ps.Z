URL: http://www.cs.cornell.edu/Info/Faculty/bsmith/tcl-dp.ps.Z
Refering-URL: http://www.cs.cornell.edu/Info/Faculty/Brian_Smith.html
Root-URL: http://www.cs.cornell.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ousterhout, J. </author> <title> Tcl: An Embeddable Command Language. </title> <booktitle> Proc. USENIX Winter Conference, </booktitle> <month> January </month> <year> 1990. </year>
Reference: [2] <author> Ousterhout, J. </author> <title> An X1 1 Toolkit Based on the Tcl Language. </title> <booktitle> Proc. USENIX Winter Conference, </booktitle> <month> January </month> <year> 1991. </year>
Reference: [3] <author> Scheifler, R., and Gettys, J., with Flowers, J., Newman, R., and Rosenthal, D. </author> <title> X Window System: The Complete Guide to Xlib, X Protocol, </title> <journal> ICCCM, </journal> <note> XLFD (Second Edition) . Digital Press, </note> <year> 1990. </year>
Reference-contexts: Tcl-DP also provides triggers. A trigger is a Tcl expression that is evaluated when a field in a distributed object changes. 4. Implementation The Tk send command uses the X ICCCM protocol <ref> [3] </ref>. Processes connected by send use the X Server to pass messages. Since Tcl-DP uses TCP/IP, communicating processes in Tcl-DP do not need to share an X Server connection. This has advantages. First non-X clients need not connect to an X server to exchange messages.
Reference: [4] <author> Rowe, L., and Smith, B. </author> <title> A Continuous Media Player. Third International Workshop on Network and Operation System Support for Digital Audio and Video. </title> <booktitle> 1992, </booktitle> <pages> pp. 334-344. </pages>
Reference-contexts: Among these have been a network name server and a distributed continuous media system <ref> [4] </ref>.
Reference: [5] <author> Kochun, S., and W ood, P. </author> <title> UNIX Networking. Hayden Book, 1989. On zonker.cs.Berkeley.EDU: MakeRPCServer 4545 set lastId 0 proc GetId -- - global lastId; incr lastId; return $lastId - On linus.cs.Berkeley.EDU: set server [MakeRPCClient zonker 4545] set id [RPC $server GetId] (a) (b) </title>
Reference-contexts: A Client-Server Example An id server can be built using Tcl-DP. The Tcl code shown in Figure 1a initializes the id server. The MakeRPCServer call of Figure 1a creates a socket on port 4545 that will accept client connections. A socket is an endpoint of network communication in UNIX <ref> [5] </ref>. The Tcl code for client processes is shown in Figure 1b. The MakeRPCClient call of Figure 1b connects to the id server and returns a handle to represent a socket.
References-found: 5

