URL: http://www.cs.utah.edu/~ack/publications/other/ieeedt_crossarbiter.ps.Z
Refering-URL: http://www.cs.utah.edu/~ack/publications/other.html
Root-URL: 
Email: (ganesh@cs.utah.edu)  
Title: Micropipeline Wavefront Arbiters using Lockable C-elements  
Author: GANESH GOPALAKRISHNAN 
Keyword: Self-timed/Asynchronous Circuits, Micropipelines, Wavefront array processors, Arbiters, Lockable C element  
Address: Salt Lake City, Utah 84112, USA  
Affiliation: University of Utah Dept. of Computer Science  
Abstract: We develop asynchronous circuit realizations of symmetric crossbar arbiters. Our circuits are based on the paradigm of intercepting moving wavefronts in a two-dimensional micropipeline-like structure. The movement of wavefronts in the array, as well as the ability to intercept wavefronts asynchronously are both supported by a component called LockC, which a hybrid of a Muller C-element and a Q-flop. Preliminary data obtained from a VLSI layout of our arbiters is presented. Formal verification of the arbiters using model checking is summarized. These arbiters may find use in multiprocessor routing networks whose characteristics are better matched with the capabilities of asynchronous circuits than those of synchronous circuits. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Laxmi N. Bhuyan. </author> <title> Analysis of interconnection networks with different arbiter designs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 4 </volume> <pages> 384-403, </pages> <year> 1987. </year>
Reference-contexts: In this paper, we examine the problem of building arbiters that control the operation of crossbar switches. Crossbar switches have been widely studied. Arbiters for crossbar switches have been studied in Bhuyan <ref> [1] </ref> and recently by Tamir and Chi [2] who introduce the problem of symmetric crossbar arbitration.
Reference: 2. <author> Yuval Tamir and Hsin-Chou Chi. </author> <title> Symmetric crossbar arbitration. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(1) </volume> <pages> 13-27, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: In this paper, we examine the problem of building arbiters that control the operation of crossbar switches. Crossbar switches have been widely studied. Arbiters for crossbar switches have been studied in Bhuyan [1] and recently by Tamir and Chi <ref> [2] </ref> who introduce the problem of symmetric crossbar arbitration. <p> This is achieved through the wrap-around resetting connections. One attractive feature of the wrapped diagonal arbiter in Figure 9 is that it does not require global wiring that distributes priority values to form the wrapped diagonals, as in Tamir and Chi's scheme <ref> [2] </ref>. Instead, our solution is based on minimal sets of constraints that makes the array self-managing in terms of where it forms diagonals. <p> When both these steps are over, the external acknowledge signal is generated. Compared to the arbiter in Figure 8, this arbiter allows connections "even within the umbra", although it takes more area. This arbiter does not achieve the same performance as the hypothetical statistically optimal arbiter <ref> [2] </ref>, however, as it avoids exhaustive search over all possible switching possibilities. 8 Experimental Results We have written high-level specifications of many of the arbiter circuits presented in this paper in the Symbolic Model-checking Verification (SMV) language [16].
Reference: 3. <author> Bill Coates, Alan Davis, and Ken Stevens. </author> <title> The post-office experience: Designing a large asynchronous chip. </title> <journal> INTEGRATION, </journal> <volume> 15(3) </volume> <pages> 341-366, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: In general, operations such as buffering, arbitration, and flow-control have variable- and data-dependent timings that are natural to handle in an asynchronous framework. For several reasons, asynchronous circuits are better matched with the characteristics of multiprocessor interconnection networks in general <ref> [3, 4] </ref>, and crossbar arbiters in particular. Because of their use of completion signals, asynchronous circuits can easily handle variable timings, and modularly interface with the rest of the system. <p> Related Work As the circuits chosen for our arbiters are slightly non-traditional, we first discuss reasons for our choice, as well as related styles. There are many different styles of asynchronous circuits|the macromodule style [5], the burst-mode style <ref> [3] </ref>, various precharged design styles [6], and design styles that use both gates and macromodules [7]. Most existing asynchronous circuit design styles are geared towards request/acknowledge protocols in which a request arrives when expected by a module, and an acknowledge is generated when expected by the environment.
Reference: 4. <author> Charles L. Seitz and Wen-King Su. </author> <title> A family of routing and communication chips based on the mosaic. </title> <editor> In Gaetano Borriello and Carl Ebeling, editors, </editor> <booktitle> Proceedings of the Research on Integrated Systems, </booktitle> <pages> pages 320-337. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: In general, operations such as buffering, arbitration, and flow-control have variable- and data-dependent timings that are natural to handle in an asynchronous framework. For several reasons, asynchronous circuits are better matched with the characteristics of multiprocessor interconnection networks in general <ref> [3, 4] </ref>, and crossbar arbiters in particular. Because of their use of completion signals, asynchronous circuits can easily handle variable timings, and modularly interface with the rest of the system.
Reference: 5. <author> Ivan Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1989. </year> <note> The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: A study of the resulting arbiters is the subject of this paper. Related Work As the circuits chosen for our arbiters are slightly non-traditional, we first discuss reasons for our choice, as well as related styles. There are many different styles of asynchronous circuits|the macromodule style <ref> [5] </ref>, the burst-mode style [3], various precharged design styles [6], and design styles that use both gates and macromodules [7]. <p> Because of the two-dimensional nature of crossbar arbiters, a generalization of the above idea to two dimensions was called for. The required insight is present in Sutherland's work on micropipelines <ref> [5] </ref>, where the author presents an analogy between one dimensional micropipelines and one-dimensional elastic wave propagation. Using this 2 insight, we generalize micropipelines to two dimensions, resulting in the circuits shown in Figures 1 and 2. <p> Such a circuit, called LockC, has already been proposed in a different context [10]. LockC is similar to a normal C-element except it has an additional input, lock, and an additional output, lack. While the a, b, and c signals of a LockC obey a two-phase <ref> [5] </ref> protocol, its lock and lack signals obey a four-phase [5] protocol. <p> LockC is similar to a normal C-element except it has an additional input, lock, and an additional output, lack. While the a, b, and c signals of a LockC obey a two-phase <ref> [5] </ref> protocol, its lock and lack signals obey a four-phase [5] protocol. So long as the lock input is kept deasserted, a LockC element behaves exactly like a Muller C-element with respect to inputs a and b and output c| namely, whenever the c output is different from both a and b, it eventually changes. <p> Let i denote row numbers and j denote column numbers. Let a C-element with index i; j be said to occupy position i + j. Let a "token" denote a signal transition, either high-going or low-going <ref> [5] </ref>. Also, define a wavefront to be the collection of tokens on the outputs of the C-elements that have the same sequence number.
Reference: 6. <author> Anthony J. McAuley. </author> <title> Dynamic asynchronous logic for high-speed cmos systems. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 27(3) </volume> <pages> 382-388, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Related Work As the circuits chosen for our arbiters are slightly non-traditional, we first discuss reasons for our choice, as well as related styles. There are many different styles of asynchronous circuits|the macromodule style [5], the burst-mode style [3], various precharged design styles <ref> [6] </ref>, and design styles that use both gates and macromodules [7]. Most existing asynchronous circuit design styles are geared towards request/acknowledge protocols in which a request arrives when expected by a module, and an acknowledge is generated when expected by the environment.
Reference: 7. <author> Alain J. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <editor> In editor C.A.R. Hoare, editor, </editor> <booktitle> UT Year of Programming Institute on Concurrent Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: There are many different styles of asynchronous circuits|the macromodule style [5], the burst-mode style [3], various precharged design styles [6], and design styles that use both gates and macromodules <ref> [7] </ref>. Most existing asynchronous circuit design styles are geared towards request/acknowledge protocols in which a request arrives when expected by a module, and an acknowledge is generated when expected by the environment.
Reference: 8. <author> C. A. Mead and L. Conway. </author> <title> An Introduction to VLSI Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1980. </year> <note> Chapter 7, entitled "System Timing". </note>
Reference-contexts: Most existing asynchronous circuit design styles are geared towards request/acknowledge protocols in which a request arrives when expected by a module, and an acknowledge is generated when expected by the environment. Unplanned (or unsynchronized) interactions occur in many practical asynchronous circuits, for example during arbitration of asynchronously arriving requests <ref> [8, 9] </ref>, during exception handling (e.g., stalling or reordering of pipelines [10]), and in interfacing synchronous circuits with asynchronous circuits [11]. These circuits include provisions to deal with metastability, and are often concerned with asynchronously stopping computations that are already in progress. Our arbiter circuits belong to this category.
Reference: 9. <author> Erik Brunvand. Parts-r-us. </author> <title> a chip aparts(s): </title> : :. <type> Technical Report CMU-CS-87-119, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: Most existing asynchronous circuit design styles are geared towards request/acknowledge protocols in which a request arrives when expected by a module, and an acknowledge is generated when expected by the environment. Unplanned (or unsynchronized) interactions occur in many practical asynchronous circuits, for example during arbitration of asynchronously arriving requests <ref> [8, 9] </ref>, during exception handling (e.g., stalling or reordering of pipelines [10]), and in interfacing synchronous circuits with asynchronous circuits [11]. These circuits include provisions to deal with metastability, and are often concerned with asynchronously stopping computations that are already in progress. Our arbiter circuits belong to this category. <p> These circuits include provisions to deal with metastability, and are often concerned with asynchronously stopping computations that are already in progress. Our arbiter circuits belong to this category. We based our arbiter circuit design on the token-ring style proposed by Brunvand <ref> [9] </ref> which uses a ring of Q-flops [9, 11] to trap circulating tokens. Because of the two-dimensional nature of crossbar arbiters, a generalization of the above idea to two dimensions was called for. <p> These circuits include provisions to deal with metastability, and are often concerned with asynchronously stopping computations that are already in progress. Our arbiter circuits belong to this category. We based our arbiter circuit design on the token-ring style proposed by Brunvand [9] which uses a ring of Q-flops <ref> [9, 11] </ref> to trap circulating tokens. Because of the two-dimensional nature of crossbar arbiters, a generalization of the above idea to two dimensions was called for.
Reference: 10. <author> Armin Liebchen and Ganesh Gopalakrishnan. </author> <title> Dynamic reordering of high latency transactions in time warp simulation using a modified micropipeline. </title> <booktitle> In International Conference on Computer Design (ICCD), </booktitle> <pages> pages 336-340, </pages> <year> 1992. </year> <month> 15 </month>
Reference-contexts: Unplanned (or unsynchronized) interactions occur in many practical asynchronous circuits, for example during arbitration of asynchronously arriving requests [8, 9], during exception handling (e.g., stalling or reordering of pipelines <ref> [10] </ref>), and in interfacing synchronous circuits with asynchronous circuits [11]. These circuits include provisions to deal with metastability, and are often concerned with asynchronously stopping computations that are already in progress. Our arbiter circuits belong to this category. <p> In a two-dimensional micropipeline, a Muller C-element is required to propagate wavefronts diagonally. Putting these facts together, it became clear that we need a hybrid of a Muller C-element and a Q-flop. Such a circuit, called LockC, has already been proposed in a different context <ref> [10] </ref>. LockC is similar to a normal C-element except it has an additional input, lock, and an additional output, lack. While the a, b, and c signals of a LockC obey a two-phase [5] protocol, its lock and lack signals obey a four-phase [5] protocol. <p> The custom LockC circuit developed in Section 3 is also immune to changes, or even glitches, on its a and b inputs while in the locked state|a valuable property in some applications (e.g. <ref> [10] </ref>). Another reason to view LockC as a primitive is that the paradigm of asynchronously locking computational elements is more general than exploited here, and may be useful in exception handling structures in asynchronous processors where it is often necessary to obtain globally consistent state snapshots.
Reference: 11. <author> Fred U. Rosenberger, Charles E. Molnar, Thomas J. Chaney, and Ting-Pein Fang. Q-modules: </author> <title> Internally clocked delay-insensitive modules. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(9) </volume> <pages> 1005-1018, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: Unplanned (or unsynchronized) interactions occur in many practical asynchronous circuits, for example during arbitration of asynchronously arriving requests [8, 9], during exception handling (e.g., stalling or reordering of pipelines [10]), and in interfacing synchronous circuits with asynchronous circuits <ref> [11] </ref>. These circuits include provisions to deal with metastability, and are often concerned with asynchronously stopping computations that are already in progress. Our arbiter circuits belong to this category. <p> These circuits include provisions to deal with metastability, and are often concerned with asynchronously stopping computations that are already in progress. Our arbiter circuits belong to this category. We based our arbiter circuit design on the token-ring style proposed by Brunvand [9] which uses a ring of Q-flops <ref> [9, 11] </ref> to trap circulating tokens. Because of the two-dimensional nature of crossbar arbiters, a generalization of the above idea to two dimensions was called for.
Reference: 12. <author> Ahmed El-Amawy. </author> <title> Clocking arbitrarily large computing structures under constant skew bound. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(3) </volume> <pages> 241-255, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: The two-dimensional micropipeline-like topology is also suggested by Amawy's work on clocking rectangular arrays under constant skew bound <ref> [12] </ref>, although the details are completely different. The connection with wavefront arrays [13] (Figure 3) was also immediately apparent. The next problem to be solved was that of trapping diagonally moving wavefronts.
Reference: 13. <author> S.Y. Kung, S.C. Lo, S.N. Jean, and J.N.Hwang. </author> <title> Wavefront array processor|concept to implementation. </title> <journal> IEEE Computer, </journal> <volume> 20(7) </volume> <pages> 18-35, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: The two-dimensional micropipeline-like topology is also suggested by Amawy's work on clocking rectangular arrays under constant skew bound [12], although the details are completely different. The connection with wavefront arrays <ref> [13] </ref> (Figure 3) was also immediately apparent. The next problem to be solved was that of trapping diagonally moving wavefronts. In the token-ring arbiter of Brunvand (which is a single-dimensional special case of our design), a Q-flop is employed. <p> Two wavefronts are at least one position apart in this micropipeline. When examined row-wise or column-wise, this micropipeline resembles a standard single-dimensional micropipeline. Two-dimensional micropipelines propagate diagonally moving waves similar to the circuits used in S.-Y.Kung <ref> [13] </ref>, with the exception that the wavefronts defined by two-dimensional micropipelines can warp, and adapt to time-varying characteristics of the underlying computation. For the sake of illustration, consider the wavefront array algorithm of matrix multiplication in the setting of two-dimensional micropipelines, as shown in Figure 3.
Reference: 14. <author> James L. Peterson. </author> <title> Petri Net Theory and The Modeling Of Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference: 15. <author> A. Martin. </author> <title> Distributed Mutual Exclusion on a Ring of Processes. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 5 </volume> <pages> 265-276, </pages> <year> 1985. </year>
Reference-contexts: This is because as soon as a i is raised, the user is free to assert l i once again. Please note that all these timing constraints are local in nature. The communications between various stations is delay insensitive. Martin <ref> [15] </ref> has proposed another widely studied asynchronous token-ring arbiter. In Martin's arbiter, the token resides in the station that last used it until another station makes a request. When that happens, the request is sent around the token-ring till it encounters the station containing the token.
Reference: 16. <author> Kenneth L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1993. </year> <month> 16 </month>
Reference-contexts: arbiter does not achieve the same performance as the hypothetical statistically optimal arbiter [2], however, as it avoids exhaustive search over all possible switching possibilities. 8 Experimental Results We have written high-level specifications of many of the arbiter circuits presented in this paper in the Symbolic Model-checking Verification (SMV) language <ref> [16] </ref>. Several safety- and liveness conditions were stated and verified using symbolic model checking. Due to state explosion, the size of the largest array that could be verified was 3x3. An informal ("paper and pencil") inductive proof of correctness for arbitrary sizes is easy to provide. <p> Due to state explosion, the size of the largest array that could be verified was 3x3. An informal ("paper and pencil") inductive proof of correctness for arbitrary sizes is easy to provide. Carrying out induction in the framework of SMV (through the use of a suitable network invariant <ref> [16] </ref>) is presently being looked into. A MOSIS 2 micron CMOS tiny-chip containing the wavefront arbiter of Figure 9 has been laid out, successfully simulated, and is being readied for fabrication. The chip dimensions are 1053 x 953 micrometers.
References-found: 16

