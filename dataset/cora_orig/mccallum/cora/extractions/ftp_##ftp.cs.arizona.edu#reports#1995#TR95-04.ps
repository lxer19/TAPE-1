URL: ftp://ftp.cs.arizona.edu/reports/1995/TR95-04.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Towards High Performance Cryptographic Software  
Author: Erich Nahum Sean O'Malley Hilarie Orman and Richard Schroeppel 
Date: TR 95 04  
Address: Amherst, MA 01003 Tucson, AZ 85721  Tucson, AZ 85721  
Affiliation: Department of Computer Science 1 Department of Computer Science 2 University of Massachusetts University of Arizona  Department of Computer Science The University of Arizona  
Abstract: Current software implementations of current cryptographic algorithms are orders of magnitude slower than required to secure a gigabit network. This paper examines three different approaches to improving the performance of cryptographic software: new algorithm design, parallelization, and algorithm independent hardware support. We believe that in combination these approaches could go a long way to improving cryptographic protocol performance without the inflexibility required for the current generation of cryptographic hardware support. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. N. S. I. </author> <title> (ANSI). American national standard data encryption standard. </title> <type> Technical report ANSI X3.92-1981, </type> <month> Dec. </month> <year> 1980. </year>
Reference-contexts: 1 Introduction A great deal of effort is currently being expended to provide some level of Internet security. An important question is whether security can be provided at gigabit speeds. The standard set of algorithms required to secure a connection includes a bulk encryption algorithm such as DES <ref> [1] </ref>, a cryptographic checksum such as MD5 [14], a key exchange algorithm (such as Diffie-Hellman key exchange) to securely distribute the DES key, and some form of digital signature algorithm to authenticate the parties (e.g., RSA [15]).
Reference: [2] <author> M. Bjorkman and P. Gunningberg. </author> <title> Locking effects in multiprocessor implementations of protocols. </title> <booktitle> In ACM SIGCOMM Symposium on Communications Architectures and Protocols. </booktitle>
Reference-contexts: This is because the encryption protocols are compute-bound, overshadowing any locking cost, and the encryption is done outside the scope of any locks. Similar linear speedups were observed for cryptographic UDP-based stacks, not shown due to space limitations. Previous work <ref> [2, 11] </ref> has shown limited packet-level parallelism using a single TCP connection, barring any other protocol processing.
Reference: [3] <author> E. Brickell, D. Gordon, K. McCurley, and D. Wilson. </author> <title> Fast exponentiation with precomputation (extended abstract). </title> <booktitle> In Lecture Notes in Computer Science 658, </booktitle> <pages> pages 200-207, </pages> <year> 1993. </year>
Reference-contexts: A further increase in performance (about a factor of 2.5) can be achieved by precomputing a table of generator powers <ref> [3] </ref>. The resulting table size is small (in the low kilobytes) and as such is well worth the time-space trade off. What is more important than the results on any specific algorithm is the approach. One can choose from a variety of algorithms in the literature.
Reference: [4] <author> W. Diffie and M. E. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 22(6) </volume> <pages> 644-654, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: An example of this approach is a set of modifications to the Diffie-Hellman key exchange algorithm (DHKX) that we (and others) have implemented. The DHKX algorithm <ref> [4] </ref> is a secure method for initiating a conversation between two previously un-introduced parties. It relies on exponentiation in a large group, and the software implementation of the group operation is usually computationally intensive.
Reference: [5] <author> H. Eberle. </author> <title> A high-speed DES implementation for network applications. </title> <type> Technical Report 90, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: A straightforward approach to improving cryptographic performance is to implement cryptographic algorithms in hardware. This approach has been shown to improve cryptographic performance of single algorithms (e.g., DEC has demonstrated a 1 Gbit/sec DES chip <ref> [5] </ref>). Unfortunately there are several problems with this approach. First, a secure network system requires the efficient implementation of a suite of algorithms, not just DES. Hosts clearly need to be able to run both DES and MD5 efficiently, and servers, at least, need to run them all efficiently.
Reference: [6] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Although each block cannot be encrypted in parallel with DES CBC mode, they can be decrypted in parallel. To examine the impact of parallelism on cryptographic software, we used a version of the x-kernel <ref> [6] </ref> augmented to support packet-level parallelism [11]. The system runs in user space on Silicon Graphics R4400-based shared-memory multiprocessors. We ran a set of send-side throughput tests with DES and MD5 to see how well encryption protocols scale using packet-level parallelism.
Reference: [7] <author> N. Jouppi and S. Wilton. </author> <title> Tradeoffs in two-level on-chip caching. </title> <type> Technical Report Research Report 93/3, </type> <institution> DEC WRL, </institution> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Is it practical to add instructions to a RISC processor? We think so. First, there is no real shortage of chip area on most modern RISC processors <ref> [7] </ref>, and second, many modern super-scalar processors have more ALU's than are needed for the amount of instruction level parallelism found in most applications [18]. The real problem is the cost of the design work required to implement these instructions in very high clock-rate technologies.
Reference: [8] <author> L. Kohn, G. Maturana, A. Prabhu, and G. Zyner. </author> <title> The visual instruction set (VIS) in UltraSPARC. </title> <booktitle> In Compcon Spring 95, </booktitle> <pages> pages 462-469, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: The UltraSPARC design contains a set of special purpose instructions to speed up pixel operations and MPEG play <ref> [8] </ref>; a similar technique is used in the PA-7100LC chips [9]. This increases the performance of multimedia applications and reduces cost by eliminating the necessity of providing special purpose graphics hardware off chip. The market for crypto hardware may reach a size where this approach is profitable.
Reference: [9] <author> R. B. Lee. </author> <title> Accelerating multimedia with enhanced microprocessors. </title> <journal> IEEE Micro, </journal> <volume> 15(2) </volume> <pages> 22-32, </pages> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: The UltraSPARC design contains a set of special purpose instructions to speed up pixel operations and MPEG play [8]; a similar technique is used in the PA-7100LC chips <ref> [9] </ref>. This increases the performance of multimedia applications and reduces cost by eliminating the necessity of providing special purpose graphics hardware off chip. The market for crypto hardware may reach a size where this approach is profitable.
Reference: [10] <author> A. J. Menezes. </author> <title> Elliptic Curve Public Key Cryptosystems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: However, the DHKX algorithm can also be implemented with the same level of security using the group of points on an elliptic curve over the Galois field F 2 155 <ref> [10] </ref>. By choosing an appropriate mapping from elliptic curve operations to the F 2 155 operations to the host machine instructions, one can gain significant improvements.
Reference: [11] <author> E. M. Nahum, D. J. Yates, J. F. Kurose, and D. Towsley. </author> <title> Performance issues in parallelized network protocols. </title> <booktitle> In First USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <address> Monterey, CA, </address> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Although each block cannot be encrypted in parallel with DES CBC mode, they can be decrypted in parallel. To examine the impact of parallelism on cryptographic software, we used a version of the x-kernel [6] augmented to support packet-level parallelism <ref> [11] </ref>. The system runs in user space on Silicon Graphics R4400-based shared-memory multiprocessors. We ran a set of send-side throughput tests with DES and MD5 to see how well encryption protocols scale using packet-level parallelism. <p> Figure 2 shows the corresponding relative speedup for the three TCP stacks, where speedup is normalized relative to the appropriate stack's uniprocessor throughput. Each data point is the average of 10 runs, and throughput graphs include 90 percent confidence intervals. More details can be found in <ref> [11] </ref>. 1 For purposes of this study, we ignore for the moment that TCP does not preserve packet boundaries on the receive side. In this case, on the send side, packet boundaries are preserved. order of magnitude in performance, and DES roughly two orders of magnitude. <p> This is because the encryption protocols are compute-bound, overshadowing any locking cost, and the encryption is done outside the scope of any locks. Similar linear speedups were observed for cryptographic UDP-based stacks, not shown due to space limitations. Previous work <ref> [2, 11] </ref> has shown limited packet-level parallelism using a single TCP connection, barring any other protocol processing.
Reference: [12] <author> T. I. E. T. F. W. G. </author> <title> on Security for IPv4. </title> <type> Ipsec draft. Technical report, </type> <year> 1995. </year>
Reference-contexts: The DHKX algorithm [4] is a secure method for initiating a conversation between two previously un-introduced parties. It relies on exponentiation in a large group, and the software implementation of the group operation is usually computationally intensive. The algorithm has been proposed as an Internet standard <ref> [12] </ref>, and as such its performance is of great importance. A straightforward implementation of DHKX uses the multiplication group of integers modulo p, where p is a prime on the order of 2 512 (this is the implementation timed in Table 1).
Reference: [13] <author> H. Orman, S. O'Malley, R. Schroeppel, and D. Schwartz. </author> <title> Paving the road to network security, or the value of small cobblestones. </title> <booktitle> In Proceedings of the 1994 Internet Society Symposium on Network and Distributed System Security, </booktitle> <month> Feb. </month> <year> 1994. </year>
Reference: [14] <author> R. Rivest. </author> <title> The MD5 message-digest algorithm. </title> <booktitle> In Network Information Center RFC 1321, </booktitle> <pages> pages 1-21, </pages> <address> Menlo Park, CA, </address> <month> Apr. </month> <year> 1992. </year> <note> SRI International. </note>
Reference-contexts: An important question is whether security can be provided at gigabit speeds. The standard set of algorithms required to secure a connection includes a bulk encryption algorithm such as DES [1], a cryptographic checksum such as MD5 <ref> [14] </ref>, a key exchange algorithm (such as Diffie-Hellman key exchange) to securely distribute the DES key, and some form of digital signature algorithm to authenticate the parties (e.g., RSA [15]).
Reference: [15] <author> R. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryposystems. </title> <journal> Communications of the ACM, </journal> <pages> pages 120-126, </pages> <month> Feb. </month> <year> 1978. </year>
Reference-contexts: algorithms required to secure a connection includes a bulk encryption algorithm such as DES [1], a cryptographic checksum such as MD5 [14], a key exchange algorithm (such as Diffie-Hellman key exchange) to securely distribute the DES key, and some form of digital signature algorithm to authenticate the parties (e.g., RSA <ref> [15] </ref>). The encryption and checksum algorithm must be applied to every packet going across a secure link, and therefore the performance of these algorithms directly affects the achievable bandwidth.
Reference: [16] <author> D. C. Schmidt and T. Suda. </author> <title> Measuring the performance of parallel message-based process architectures. </title> <booktitle> In Proceedings of the Conference on Computer Communications (IEEE Infocomm), </booktitle> <address> Boston, MA, </address> <month> Apr. </month> <year> 1995. </year>
Reference: [17] <author> R. Schroeppel, H. Orman, and S. O'Malley. </author> <title> Fast key exchange with elliptic curve systems. </title> <type> Technical Report 95-03, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: By choosing an appropriate mapping from elliptic curve operations to the F 2 155 operations to the host machine instructions, one can gain significant improvements. In <ref> [17] </ref> we showed an improved method of computing reciprocals in F 2 155 which increases the overall performance of the DHKX algorithm by a factor of 6, bringing it down to 30 milliseconds per key exchange.
Reference: [18] <author> M. D. Smith, M. Johnson, and M. A. Howowitz. </author> <title> Limits on multiple instruction issue. </title> <booktitle> In Proceedings Third International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS III), </booktitle> <pages> pages 290-302, </pages> <address> Boston MA, </address> <month> April </month> <year> 1989. </year>
Reference-contexts: First, there is no real shortage of chip area on most modern RISC processors [7], and second, many modern super-scalar processors have more ALU's than are needed for the amount of instruction level parallelism found in most applications <ref> [18] </ref>. The real problem is the cost of the design work required to implement these instructions in very high clock-rate technologies.
Reference: [19] <author> J. </author> <title> Touch. Performance analysis of md5. </title> <type> Technical report, </type> <note> Submitted To ACM Sigcomm '95, </note> <year> 1995. </year>
Reference-contexts: It is clear that adding more than one (and some people would say any) piece of cryptographic hardware to a given host is unlikely, if only for these reasons. Finally, implementing certain cryptographic algorithms (e.g. MD5) in hardware provides only limited increases in performance <ref> [19] </ref>. Thus we question whether the traditional approach of implementing cryptographic hardware is suitable for the current Internet environment. Thus we need cryptographic software. Therefore let us consider the performance of a set of cryptographic algorithms when implemented in software.
References-found: 19

