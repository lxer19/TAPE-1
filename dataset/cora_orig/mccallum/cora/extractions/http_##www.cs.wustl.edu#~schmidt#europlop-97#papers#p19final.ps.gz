URL: http://www.cs.wustl.edu/~schmidt/europlop-97/papers/p19final.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html
Root-URL: 
Email: ftsg,arsg@albertina.inesc.pt  
Phone: Tel: +351-1-3100287, Fax: +351-1-3145843  
Title: Passive Replicator: A Design Pattern for Object Replication  
Author: Teresa Gon~calves and Antonio Rito Silva R. Alves Redol n o 
Address: Lisbon  9, 1000 Lisboa, PORTUGAL  
Affiliation: INESC/IST Technical University of  
Abstract: This paper describes a pattern for passive object replication in distributed systems. The pattern provides support for the representation of replicated objects, the management of replicated objects and the implementation of several replication policies. It decouples replication from functionality and distribution. It supports different replica consistency criteria. 
Abstract-found: 1
Intro-found: 1
Reference: [AAH96] <author> Bharat B. Bhargava Abdelsalam A. Helal, Adbelsalam A. Heddaya. </author> <title> Replication Techniques in Distributed Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1996. </year>
Reference-contexts: Replication is a technique widely used in distributed systems for increasing availability, performance and fault-tolerance <ref> [AAH96] </ref>. Replication in object-oriented systems is used in application areas such as: * Replicated data management. * Management of replicated computations. * Distributed shared memory.
Reference: [Booch 94] <author> Grady Booch. </author> <title> Object-Oriented Analyis and Design with Applications. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: For example the user can decided to restore replicas consistency only when executing a particular operation. 4 Structure and Participants The structure of the pattern is illustrated in Figure 3 as a Booch class diagram using the notation referred in <ref> [Booch 94] </ref>.
Reference: [Budhiraja 93a] <author> N. Budhiraja, K. Marzullo, F. Schneider, and S. Toueg. </author> <title> The primary-backup approach. </title> <editor> In S.J. Mullender, editor, </editor> <booktitle> Distributed Systems, 2nd Edition, ACM-Press, chapter 8. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: Execution replication models enhance availability, tolerate Fail-stop failures and if the execution is replicated and occurs in parallel it also provides guarantees of correct request processing because it can offers guarantees against Byzantine-failures, also called arbitrary fails. Execution replication models can be classified into passive replication (Primary-backup approach) <ref> [Budhiraja 93a] </ref> and active replication (State-machine approach) [Budhiraja 93b]. In passive replication, methods are executed by one object at one node. The state of the object is mirrored to other object replicas at certain execution points (checkpointing). A usual checkpoint is the the end of the method execution.
Reference: [Budhiraja 93b] <author> N. Budhiraja, K. Marzullo, F. Schneider, and S. Toueg. </author> <title> Replication management using the state machine approach. </title> <editor> In S.J. Mullender, editor, </editor> <booktitle> Distributed Systems, 2nd Edition, ACM-Press, chapter 7. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: Execution replication models can be classified into passive replication (Primary-backup approach) [Budhiraja 93a] and active replication (State-machine approach) <ref> [Budhiraja 93b] </ref>. In passive replication, methods are executed by one object at one node. The state of the object is mirrored to other object replicas at certain execution points (checkpointing). A usual checkpoint is the the end of the method execution.
Reference: [Gamma 95] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The Passive Replicator pattern allows, besides the primary-copy policy the use of other replication policies that vary according to data consistency/access performance that they offer. * Observer Pattern <ref> [Gamma 95] </ref> is a pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated independently. <p> This pattern does not decouple subject functionality from observer notification. The Passive Replicator pattern allows besides the implementation of the primary copy policy the use of other replication policies and the consideration of the distribution concern. * Command Pattern <ref> [Gamma 95] </ref> is used to implement the Operation class as an abstract class which declares an interface for executing the Operation methods. It is used to decouple the invocation from the knowledge to perform the execution. * Singleton Pattern [Gamma 95] is used in the implementation of the Replicated Objects Registry <p> policies and the consideration of the distribution concern. * Command Pattern <ref> [Gamma 95] </ref> is used to implement the Operation class as an abstract class which declares an interface for executing the Operation methods. It is used to decouple the invocation from the knowledge to perform the execution. * Singleton Pattern [Gamma 95] is used in the implementation of the Replicated Objects Registry class. 11 Acknowledgments The authors would like to thank Neil Harrison for his valuable comments during the shepherding process.
Reference: [MCL] <author> Santosh K. Shrivastava Mark C. Little. </author> <title> Replicated K-Resilent Objects in Arjuna. </title> <publisher> IEEE. </publisher>
Reference-contexts: Most of the solutions provided in these systems restrict the use of replication policies to a set of policies that can be supported by the policy-specific level of this pattern. Arjuna <ref> [MCL] </ref> is an example of an object-oriented programming system that supports object replication to tolerate fails. The Arjuna supports the pessimistic data replication model and the passive and active execution models. This pattern was developed in the DASCo [Silva 95] scope.
Reference: [Ott 96] <author> Robert Ott. </author> <title> Simple shared object. Object Currents, </title> <type> 1(3), </type> <month> March </month> <year> 1996. </year>
Reference-contexts: The Arjuna supports the pessimistic data replication model and the passive and active execution models. This pattern was developed in the DASCo [Silva 95] scope. The replication concern is considered with DASCo concerns of synchronization, distribution and naming. 10 Related Patterns * Simple Shared Object Pattern <ref> [Ott 96] </ref> is a pattern for object replication across different address spaces using the primary-copy policy for replicating the objects with immediate update (strong consistency). This pattern allows the use of the primary-copy replication policy decoupled from application's functionality and distribution.
Reference: [Silva 95] <author> Antonio Rito Silva, Pedro Sousa, and Jose Alves Marques. </author> <title> Development of Distributed Applications with Separation of Concerns. </title> <booktitle> In Proceedings of the 1995 Asia-Pacific Software Engineering Conference, </booktitle> <pages> pages 168-177, </pages> <address> Brisbane, Australia, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Arjuna [MCL] is an example of an object-oriented programming system that supports object replication to tolerate fails. The Arjuna supports the pessimistic data replication model and the passive and active execution models. This pattern was developed in the DASCo <ref> [Silva 95] </ref> scope. The replication concern is considered with DASCo concerns of synchronization, distribution and naming. 10 Related Patterns * Simple Shared Object Pattern [Ott 96] is a pattern for object replication across different address spaces using the primary-copy policy for replicating the objects with immediate update (strong consistency).
Reference: [Silva 96] <author> Antonio Rito Silva, Jo~ao Pereira, and Jose Alves Marques. </author> <title> Customizable Object Synchronization Pattern. </title> <booktitle> In The 1 st European Conference on Pattern Languages of Programming, </booktitle> <institution> EuroPLoP '96 (Washington University technical report #WUCS-97-07), Kloster Irsee, Germany, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: This can be done by using a framework that supports concurrency mechanisms such as locks or time stamps or by using the Customizable Object Synchronization pattern <ref> [Silva 96] </ref>. 8 Sample Code 8.1 Shared Agenda Application In the Shared Agenda Application, replication will be applied to the agenda meetings.
Reference: [Silva 97] <author> Antonio Rito Silva, Francisco Assis Rosa, and Teresa Gon~calves. </author> <title> Distributed Proxy: A Design Pattern for Distributed Object Communication, September 1997. </title> <booktitle> Submitted to the Fourth Conference on Pattern Languages of Programs, </booktitle> <address> PLoP '97. </address>
Reference-contexts: The Replica Manager class can be instrumented in order to support distribution of replicated objects. This instrumentation consists of combining the Replica Manager class with distributed proxies <ref> [Silva 97] </ref> such that the communication between distributed Replica Managers is done through distributed proxies. There are two possible ways for adding the distribution concern to the replication concern: * by using delegation. The Replica Manager class will reference a distributed proxy.
References-found: 10

