URL: http://rakaposhi.eas.asu.edu/planning-as-refinement-search-tr.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: rao@asuvax.asu.edu  
Title: Planning as Refinement Search: A unified framework for comparative analysis of Search Space Size and Performance  
Author: Subbarao Kambhampati 
Note: This research is supported in part by National Science Foundation under grant IRI-9210997, and ARPA/Rome Laboratory planning initiative under grant F30602-93-C-0039.  
Address: Tempe, AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: ASU CSE Technical Report 93-004 June, 1993 Abstract In spite of the long history of classical planning, there has been very little comparative analysis of the search space characteristics of the multitude of existing planning algorithms. This has seriously inhibited efforts to fruitfully intergrate various approaches. In this paper we show that viewing planning as a general refinement search provides a unified framework for comparing the search spaces of various planning strategies, and in predicting their performance. We will provide a generic refinement search algorithm for planning, and show that all planners that search in the space of plans are special cases of this algorithm. In this process, we will provide a rational reconstruction of main ideas of refinement planning algorithms. We will then develop a model for estimating search space size of a refinement planner, and use this model to analyze a variety of tradeoffs between search space size, refinement cost and performance in refinement planning. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: The subset of this representation where all three formulas can be represented as conjunctions of function-less first order literals, and all the variables have infinite domains, will be referred to as TWEAK representation (c.f. <ref> [1, 9] </ref>). <p> In either case, establishment introduces new subgoals (in the form of the preconditions and secondary preconditions of the steps taking part in establishment; see below), as well as new ordering and binding constraints. The process continues until all open goals are established. First formalizations of refinement planning (e.g. <ref> [27, 1] </ref>) assumed that goal establishment requires ability to check the truth of arbitrary conditions in partial order plans. The Q&A procedure in Tate's Nonlin [27], provided the first formal specification of necessary and sufficient conditions for ensuring the truth of a proposition in a ground partially ordered plan. <p> The Q&A procedure in Tate's Nonlin [27], provided the first formal specification of necessary and sufficient conditions for ensuring the truth of a proposition in a ground partially ordered plan. Later work by Chapman's TWEAK <ref> [1] </ref>, extended this truth criterion to partially ordered partially instantiated plans. (see [1, 9] for more details). The truth criteria provide a way of checking the executability of a plan (and, for goals of attainment, also provide a way of checking goal satisfaction). <p> The Q&A procedure in Tate's Nonlin [27], provided the first formal specification of necessary and sufficient conditions for ensuring the truth of a proposition in a ground partially ordered plan. Later work by Chapman's TWEAK [1], extended this truth criterion to partially ordered partially instantiated plans. (see <ref> [1, 9] </ref> for more details). The truth criteria provide a way of checking the executability of a plan (and, for goals of attainment, also provide a way of checking goal satisfaction). <p> For example, there is no reason why SNLP cannot use an MTC based goal selection strategy. 4.2 Book Keeping and Posting of Auxiliary Constraints 4.2.1 Motivation It is possible to limit refinement to establishment operations alone and still get a sound and complete planner. Chapman's Tweak <ref> [1] </ref> is such a planner. It continues the establishment cycle until all the goals and preconditions are necessarily true. Unfortunately, TWEAK turns out to have a lot of redundancy in its search space. <p> Notice that in order to be able to use the protection-based termination check, the planner must establish each plan precondition individually. In contrast, the MTC based termination check may 21 Planner Termination Check Goal Selection Book-keeping Strategy used to make consistency check tractable Tweak <ref> [1] </ref> MTC-based Pick if not nec. true None None (O (n 4 ) for TWEAK rep; (O (n 4 ) for TWEAK rep; NP-hard with Cond. Eff) NP-hard with Cond.
Reference: [2] <author> T. Dean, R.J. Firby, and D. Miller. </author> <title> Hierarchical planning involving deadlines, </title> <journal> travel time and resources Computational Intelligence, </journal> <volume> Vol. 4, </volume> <month> 381-398 </month> <year> (1988). </year>
Reference-contexts: This latter is best seen as a look-ahead computation. Few classical refinement planners employ this type of pruning. An example is the FORBIN planner <ref> [2] </ref>, which does a significant amount of look-ahead scheduling before allowing a partial plan to enter the search queue and expanded.
Reference: [3] <author> S. Hanks and D. Weld. </author> <title> Systematic Adaptation for Case-Based Planning. </title> <booktitle> In Proc. 1st Intl. Conf. on AI Planning Systems, </booktitle> <year> 1992. </year>
Reference-contexts: If such planners are systematic, then no two plans in different branches in their search space will have overlapping ground linearizations. Conflicting interpretations of Systematicity: There have been several conflicting interpretations of ``systematicity'' of partial-order planning in the literature. Some researchers (c.f. <ref> [3] </ref>) have interpreted McAllester's systematicity claim to mean that even though the same operator sequence may appear in more than one branch, it will never have the same causal structure.
Reference: [4] <author> W.D. Harvey and M.L. Ginsberg and D.E. Smith. </author> <title> Deferring Conflict Resolution Retains Systematicity. </title> <note> Submitted to AAAI-93. </note>
Reference-contexts: A more practical option involves ensuring that individual refinements are systematic: 20 Other researchers (e.g. <ref> [4] </ref>), have used this latter notion of solution systematicity as the definition of systematicity. This definition turns out to be problematic since for unsolvable problems, there are no potential solutions and thus any search strategy would be considered systematic by it. Our formulation of systematicity avoids this problem. <p> resolution strategies discussed in Section 4 all have this property, thus ensuring the systematicity of the overall algorithm. 28 Systematicity and overlapping linearizations: In the past, there has been a tendency to identify the redundancy in the search space with overlapping linearizations of partial plans in the search space (e.g. <ref> [15, 7, 4] </ref>). From the formulation in this section, we note that systematicity implies only that no two partial plans in different branches of the search can share a safe ground linearization. <p> This point is illustrated in a telling fashion by the example in Figure 6, which compares complete search space generated by systematic SNLP with that generated by a variant called SNLP 0 that postpones +ve threats, for the same planning problem. 23 Although Harvey et. al. also make this point <ref> [4] </ref>, our formulation of systematicity in Section 5.2.1 makes it self evident. 32 case search space size The planner on the left is strongly systematic, while the one on the later is systematic but not strongly systematic. Clearly, SNLP 0 has a larger search space than that of SNLP.
Reference: [5] <author> J. Jaffar and J. L. Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of POPL-87, </booktitle> <pages> pages 111--119, </pages> <year> 1987. </year>
Reference-contexts: Instead, the candidate set is typically implicitly represented as a generalized constraint set (c.f. <ref> [5] </ref> such that every potential candidate that is consistent with the constraints in that set is taken to belong to the candidate set of the search node. (Because of this, search nodes in refinement search are often seen also as ``partial solutions''.) 3.1 Semantics of Partial Plans In the case of
Reference: [6] <author> S. Kambhampati. </author> <title> Multi-Contributor Causal Structures for Planning: A Formalization and Evaluation. </title> <institution> Arizona State University Technical Report, CS TR-92-019, </institution> <month> July </month> <year> 1992. </year> <note> (To appear in Artificial Intelligence. A preliminary version appears in the Proc. of First Intl. Conf. on AI Planning Systems, </note> <year> 1992). </year>
Reference-contexts: Causal links with these semantics are called exhaustive causal links (c.f. <ref> [6] </ref>). Seen as an auxiliary constraint, an exhaustive causal link fsg p ! w has the semantics that no candidate of the partial plan shall have an operator adding or deleting p between the operators corresponding to s and w. <p> In <ref> [6, 7] </ref>, we provided empirical support to the hypothesis that better approaches to this tradeoff may lie in the middle of these two extremes. In particular, we showed that planners using multi-contributor causal structures may out-perform both TWEAK and SNLP under certain circumstances.
Reference: [7] <author> S. Kambhampati. </author> <title> On the Utility of Systematicity: Understanding tradeoffs between redundancy and commitment in partial order planning In Proceedings of IJCAI-93, </title> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: resolution strategies discussed in Section 4 all have this property, thus ensuring the systematicity of the overall algorithm. 28 Systematicity and overlapping linearizations: In the past, there has been a tendency to identify the redundancy in the search space with overlapping linearizations of partial plans in the search space (e.g. <ref> [15, 7, 4] </ref>). From the formulation in this section, we note that systematicity implies only that no two partial plans in different branches of the search can share a safe ground linearization. <p> In <ref> [6, 7] </ref>, we provided empirical support to the hypothesis that better approaches to this tradeoff may lie in the middle of these two extremes. In particular, we showed that planners using multi-contributor causal structures may out-perform both TWEAK and SNLP under certain circumstances.
Reference: [8] <author> S. Kambhampati and E. Cohen. </author> <title> On the utility of minimality-based pruning algorithms in partial order planning. </title> <note> ASU CSE Technical Report (In Preparation). </note>
Reference-contexts: Once again, there is a tradeoff between the cost of the pruning strategy and the extent to which it can reduce the search space size <ref> [8] </ref>. 35 5.5 Effect of pre-ordering and Conflict Resolution Strategies under Depth-first regimes In the previous sections, we noted that pre-ordering and conflict resolution strategies, while providing tractable consistency check, also further refine the refinements provided by the establishment step. They thus increase the search space size by reducing ~.
Reference: [9] <author> S. Kambhampati and D.S. Nau. </author> <title> On the Nature and Role of Modal Truth Criteria in Planning Tech. </title> <type> Report. </type> <institution> ISR-TR-93-30, Inst. for Systems Research, University of Maryland, </institution> <month> March, </month> <year> 1993. </year>
Reference-contexts: The subset of this representation where all three formulas can be represented as conjunctions of function-less first order literals, and all the variables have infinite domains, will be referred to as TWEAK representation (c.f. <ref> [1, 9] </ref>). <p> The primary motivation behind partial order planning is efficiency -- by deferring orderings among operators, partial order planners avoid premature commitment and the consequent unnecessary backtracking, thereby improving performance <ref> [24, 9] </ref>. It is important to note that while partial order and total order planners use different representation constraints on the partial plans, the main goal of planning in either case still remains finding a ground operator sequence that is executable and satisfies goal criteria. <p> Just because a condition hC; ni is necessarily true, it doesn't mean that some ground linearization of P can be executed to produce C before n. See <ref> [9] </ref> for further discussion on this distinction. 8 Algorithm: Refinement Search (sol; R) 1. Initialize Search queue with , the node with null constraint set Begin Loop 2. If search queue is empty, terminate with failure 3. Else, non-deterministically pick a node n from the search queue 4. <p> The Q&A procedure in Tate's Nonlin [27], provided the first formal specification of necessary and sufficient conditions for ensuring the truth of a proposition in a ground partially ordered plan. Later work by Chapman's TWEAK [1], extended this truth criterion to partially ordered partially instantiated plans. (see <ref> [1, 9] </ref> for more details). The truth criteria provide a way of checking the executability of a plan (and, for goals of attainment, also provide a way of checking goal satisfaction).
Reference: [10] <author> C. Knoblock and Q. Yang. </author> <title> A Comparison of the SNLP and TWEAK planning algorithms. </title> <booktitle> In Proc. of AAAI Spring Symp. on Foundations of Automatic Planning: The Classical Approach and Beyond. </booktitle> <month> March, </month> <year> 1993. </year>
Reference-contexts: For example, it has been claimed ( e.g. <ref> [10] </ref>) that use of causal links and systematicity increases the effective depth of the solution both because it works on +ve as well as -ve threats, and because it forces the planner to work on each precondition of the plan individually. <p> Our work also has important implications to the research on comparative analyses of partial order planning techniques. In the past, such comparative analyses tended to focus on a wholistic ``black-box'' view brand-name planning algorithms, such as TWEAK and SNLP (c.f. <ref> [10] </ref>). We 38 believe that it is hard to draw meaningful conclusions from such comparisons since when seen as instantiations of our Refine-Plan algorithm, they differ in a variety of dimensions (see Table 1).
Reference: [11] <author> P. Langley. </author> <title> Systematic and Nonsystematic search strategies. </title> <booktitle> In Proc. 1st Intl. Conference on AI Planning Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Like other forms of systematic search (c.f <ref> [11] </ref>), systematicity (or elimination of redundancy) in refinement planning is achieved at the expense of increased commitment -- in this case to particular establishment structures (or contributors).
Reference: [12] <author> D. McDermott. </author> <title> Regression Planning. </title> <journal> Intl. Jour. Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year> <month> 40 </month>
Reference-contexts: 1 Introduction [...] Search is usually given little attention in this field, relegated to a footnote about how ``Backtracking was used when the heuristics didn't work.'' Drew McDermott, <ref> [12, p. 413] </ref> The idea of generating plans by searching in the space of (partially ordered or totally ordered) plans has been around for almost twenty years, and has received a lot of formalization in the past few years. <p> A specific type of non-minimal solutions, called ``bloated solutions,'' are of particular interest (see below): Definition 3 (Bloated Solutions) A solution S is said to be bloated (c.f. <ref> [12] </ref>) if the operator sequence S 0 obtained by deleting some operator o 2 S, is also a solution. <p> Many planners described in the literature are in fact complete for the larger class of unbloated solutions <ref> [23, 12] </ref>. Despite the statement of completeness results in terms of minimal plans, the search spaces of most classical planners do however contain bloated solutions; the extent of bloated plan generation does vary from planner to planner. <p> It merely implies that hC; ni has been worked on once and the planner will ensure that it is not violated within this branch. 13 4.2.3 Goal Protection by Protection Intervals Although Nonlin does not use causal links as protection intervals, there have however been other planners, such as Pedestal <ref> [12] </ref>, UCPOP [23], which do interpret a causal link fn 0 g C protection interval and consider any step s that can possibly intervene between n 0 and n and delete C as a threat (or conflict) that needs to be resolved by adding additional constraints to the partial plan. <p> In this case, either we can order s to not come in the interval hn 0 ; ni, or let it come but add the preservation preconditions Q C s to the plan. This is the strategy followed by planners such as Pedestal <ref> [12] </ref> and UCPOP [23]. 15 This strategy effectively shifts the complexity of consistency check from refinement to search space size. 4.2.4 Redundancy elimination through Contributor Protection Although goal protection avoids working on the same goal more than once within the same branch, it does not completely remove redundancy from the search <p> For book keeping based on goal protection (e.g., NONLIN [27]), the auxiliary constraint requires that every candidate of the partial plan must have P true before the operator corresponding to step 18 n. For book keeping based on protection intervals (e.g., PEDESTAL <ref> [12] </ref>), the auxiliary constraint requires that no candidate of the partial plan can have P deleted between operators corresponding to n 0 and n. <p> UA [16] MTC-based Pick if nec.false None Unambiguous ordering O (n 4 ) always O (n 4 ) always Nonlin [27] Q&A based Arbitrary Goal Protection via Q&A Conflict Resolution O (1) (aided by Causal links) TOCL [24] Protection based Arbitrary Contributor protection Total ordering O (1) O (1) Pedestal <ref> [12] </ref> Protection based Arbitrary Goal Protection by Total ordering O (1) O (1) protection intervals; SNLP [14] Protection based Arbitrary Contributor protection Conflict resolution O (1) O (1) UA-SNLP Protection based O (1)/ Arbitrary O (1)/ Contributor protection Unambiguous Ordering (Section 4.5) MTC based/O (n 4 ) Pick if nec. false. <p> For example, it is easy to show that a planner which completely ignores +ve threats (such as Pedestal <ref> [12] </ref>), is un-systematic (i.e., contains overlapping candidate sets). However, it would stop before resolving the positive threats, and thus would generate a smaller search space than SNLP 0 . (Notice also that the search space of SNLP 0 contains partial plans with overlapping linearizations.
Reference: [13] <author> D. McDermott. </author> <title> Transformational planning of reactive behavior. </title> <institution> Yale University TR CSD RR-941, </institution> <month> December, </month> <year> 1992. </year>
Reference-contexts: While refinement search provides a unified framework for many classical planning algorithms, it is by no means the sole model of planning in town. The so called transformational approaches to planning <ref> [13] </ref> provide an important alternative approach. <p> Discussions with Bulusu Gopi Kumar helped significantly in clarifying my thinking on a variety of issues; most notably on the material in Section 5.5. Thanks are also due to 26 Similar views are expressed by McDermott. In <ref> [13] </ref>, he suggests that the plan-fragments used by hierarchical planners ought to be written in such a way that even with no further planning at all they can be conjoined with other plans (although the result may be suboptimal).
Reference: [14] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: Specifically, the same candidate plan may be looked at in many different search branches. McAllester and Rosenblitt <ref> [14] </ref> were the first to point out that by using causal links as strong commitments to contributors, rather than as protection intervals or as support structures for goal protection, it is possible to make the planner systematic in the sense that no two search nodes in different branches will have overlapping <p> 4 ) always Nonlin [27] Q&A based Arbitrary Goal Protection via Q&A Conflict Resolution O (1) (aided by Causal links) TOCL [24] Protection based Arbitrary Contributor protection Total ordering O (1) O (1) Pedestal [12] Protection based Arbitrary Goal Protection by Total ordering O (1) O (1) protection intervals; SNLP <ref> [14] </ref> Protection based Arbitrary Contributor protection Conflict resolution O (1) O (1) UA-SNLP Protection based O (1)/ Arbitrary O (1)/ Contributor protection Unambiguous Ordering (Section 4.5) MTC based/O (n 4 ) Pick if nec. false. /O (n 4 ) Table 1: Characterization of several existing planning algorithms in terms of the <p> The important point to note however is that the choice of termination test is to some extent independent of the way the rest of the algorithm is instantiated. For example, even though SNLP algorithm given in <ref> [14] </ref> used a protection-based termination test, it can be easily replaced by the MTC based termination check, with its attendant tradeoffs. It is also important to remember that the two solution constructor functions discussed above are by no means the only alternatives. <p> As we saw, book-keeping step is used to avoid undoing and/or repeating previous establishment decisions. establishment refinement adds auxiliary constraints. For the establishment refinement to be systematic, the auxiliary constraints must ensure that the candidate sets of the refinements will not overlap. McAllester and Rosenblitt <ref> [14] </ref> noted that adding exhaustive causal links as auxiliary constraints provides sufficient constraint on the candidate sets of the nodes to ensure non-overlapping candidate sets. <p> Different refinements of P generated on the basis of the subgoal hC; ni will have different exhaustive causal links supporting hC; ni. With this restriction, it can be shown that establishment refinement operation always splits the candidate set of a node into non-overlapping subsets. As McAllester points out in <ref> [14] </ref>, this property follows from the fact that exhaustive causal links provide a way of uniquely naming steps independent of step names. <p> The question is whether or not s should be treated as a conflict (threat) by SNLP. McAllester <ref> [14] </ref> avoids this problem by using an independent lifting transformation -- the question of whether P (x; y) is equal to P (u; v) is left to the lifting transformer, which will nondeterministically return either ``yes'' with binding constraints [x u; y v] or ``no'' with one of the bindings [x
Reference: [15] <author> S. Minton, J. Bresina and M. Drummond. </author> <title> Commitment Strategies in Planning: A Comparative Analysis. </title> <booktitle> In Proc. 12th IJCAI, </booktitle> <year> 1991. </year>
Reference-contexts: In Section 4, this generic algorithm is used as a backdrop to provide a rational reconstruction of the main ideas of existing refinement planners. Particular attention is paid to the variety of techniques 1 The work of Barrett and Weld [24] as well as Minton et. al. <ref> [15, 16] </ref> are certainly steps in the right direction. However, they do not tell the full story since the comparison there was between a specific partial order and total order planner. <p> For unrestricted partially ordered plans containing actions with conditional effects, this goal selection strategy is NP-hard. For planners that maintain restricted types of partial orderings, such as total orderings, or unambiguous orderings (c.f. <ref> [15] </ref>; also see Section 4.3.1), this cost can be tractable. <p> Chapman's Tweak [1] is such a planner. It continues the establishment cycle until all the goals and preconditions are necessarily true. Unfortunately, TWEAK turns out to have a lot of redundancy in its search space. In particular, the example (a) in Figure 4 (originally from <ref> [15] </ref>) shows that TWEAK may find the same solution candidate in multiple different search branches. (That is, the candidate sets of the search nodes in different branches overlap.) Furthermore, since TWEAK does not keep track of which goals it already achieved and which it is yet to achieve, it may achieve <p> One well-known pre-ordering approach is to introduce orderings into the partial plan until it becomes totally ordered. In this case, the consistency check can be done in polynomial time since there is only one linearization to worry about. A more interesting approach, proposed by Minton et. al. <ref> [16, 15] </ref>, is to introduce orderings until the plan becomes unambiguous. Definition 11 (Unambiguous Plan) A ground partial plan P is said to be unambiguous , if every precondition hC; ni of the plan is either true in all completions (ground linearizations) or false in all completions. <p> resolution strategies discussed in Section 4 all have this property, thus ensuring the systematicity of the overall algorithm. 28 Systematicity and overlapping linearizations: In the past, there has been a tendency to identify the redundancy in the search space with overlapping linearizations of partial plans in the search space (e.g. <ref> [15, 7, 4] </ref>). From the formulation in this section, we note that systematicity implies only that no two partial plans in different branches of the search can share a safe ground linearization.
Reference: [16] <author> S. Minton, M. Drummond, J. Bresina and A. Philips. </author> <title> Total Order vs. Partial Order Planning: </title> <booktitle> Factors Influencing Performance In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: In Section 4, this generic algorithm is used as a backdrop to provide a rational reconstruction of the main ideas of existing refinement planners. Particular attention is paid to the variety of techniques 1 The work of Barrett and Weld [24] as well as Minton et. al. <ref> [15, 16] </ref> are certainly steps in the right direction. However, they do not tell the full story since the comparison there was between a specific partial order and total order planner. <p> One well-known pre-ordering approach is to introduce orderings into the partial plan until it becomes totally ordered. In this case, the consistency check can be done in polynomial time since there is only one linearization to worry about. A more interesting approach, proposed by Minton et. al. <ref> [16, 15] </ref>, is to introduce orderings until the plan becomes unambiguous. Definition 11 (Unambiguous Plan) A ground partial plan P is said to be unambiguous , if every precondition hC; ni of the plan is either true in all completions (ground linearizations) or false in all completions. <p> For example, unambiguous plans also allow polynomial check for necessary truth of any condition in the plan. Polynomial necessary truth check can be useful in goal selection and termination tests. In fact, unambiguous plans were originally used in UA <ref> [16] </ref> for this purpose. 4.3.2 Conflict Resolution As discussed in the beginning of Section 4.3, conflict resolution step can be seen as a method to resolve all possible violations of auxiliary constraints one by one, so that the consistency of the resulting plan can be checked by a polynomial time order <p> At the end of this process, enough ordering constraints 17 would have been added to the plan to resolve all conflicts. At this point, the consistency of the partial plan just depends on its order 16 Note that in the description of UA in <ref> [16] </ref>, Minton et. al. assume an action representation in which each delete list literal is included in the precondition list. Because of this, they define interaction solely in terms of overlap between effects of t 1 and preconditions of t 2 . <p> Eff) NP-hard with Cond. Eff) UA <ref> [16] </ref> MTC-based Pick if nec.false None Unambiguous ordering O (n 4 ) always O (n 4 ) always Nonlin [27] Q&A based Arbitrary Goal Protection via Q&A Conflict Resolution O (1) (aided by Causal links) TOCL [24] Protection based Arbitrary Contributor protection Total ordering O (1) O (1) Pedestal [12] Protection <p> The addition of this last case provides a sufficient (rather than necessary) grounds for ensuring systematicity of the overall algorithm. The polynomial conflict resolution can be retained for more expressive action representations containing conditional effects by making the definition of interaction more conservative (as described in <ref> [16] </ref>). UA-SNLP presents an interesting contrast to SNLP -- both are systematic and provide tractable consistency check. While SNLP achieves tractable consistency check by conflict resolution, UA achieves it by a pre-ordering strategy that depends on interactions between steps. <p> For example, in <ref> [16] </ref>, it is shown that even though TWEAK avoids pre-ordering step used by UA, TWEAK can nevertheless have a larger search space size.
Reference: [17] <author> D.S. Nau, V. Kumar and L. Kanal. </author> <title> General Branch and Bound, and its relation to A fl and AO fl Artificial Intelligence, </title> <journal> Vol. </journal> <volume> 23, </volume> <year> 1984, </year> <pages> pp. 29-58. </pages>
Reference-contexts: In particular, they describe a generic refiment-planning algorithm, which can be specific instantiations of which cover the complete gamut of refinement planners, including partial ordering, total ordering, unambiguous, 8 While there are several similarities between this algorithm and classical branch and bound search algorithm <ref> [17] </ref>, there is one important difference worth noting: Branch and bound search typically assumes that all the candidates are solutions, and searches for an optimal solution candidate. <p> Thus, the pruning part in line 7 of the refinement search algorithm in Figure 1 is similar to, but weaker than the pruning criteria used in branch and bound algorithms <ref> [17] </ref>. By replacing line 7 with a pruning criterion that prunes nodes such that the cost of the best possible solution candidate in their denotation is provably larger than the cost of best possible solution candidates in other nodes, we get branch and bound algorithm. 9 causal-link based, systematic, etc.
Reference: [18] <author> N.J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publishers, </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year>
Reference: [19] <author> J. Pearl. </author> <title> Heuristics: Intelligent Search Strategies for Computer Problem Solving. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <month> Massachusettes </month> <year> (1984). </year>
Reference-contexts: A refinement search (or split-and-prune search <ref> [19] </ref>) can be visualized either as a process of starting with a partial solution and adding detail to the partial solutions until it satisfies the solution constraints, or equivalently, as a process of starting with the set of all potential candidates, and splitting the set repeatedly until a solution candidate can
Reference: [20] <author> E.P.D. Pednault. </author> <title> Synthesizing Plans that contain actions with Context-Dependent Effects Computational Intelligence, </title> <journal> Vol. </journal> <volume> 4, </volume> <month> 356-372 </month> <year> (1988). </year>
Reference-contexts: Pednault's secondary preconditions based theory of establishment <ref> [20, 21] </ref> was the first to formally advocate this approach.
Reference: [21] <author> E.P.D. Pednault. </author> <title> Generalizing nonlinear planning to handle complex goals and actions with context dependent effects. </title> <booktitle> In Proc. IJCAI-91. </booktitle>
Reference-contexts: Pednault's secondary preconditions based theory of establishment <ref> [20, 21] </ref> was the first to formally advocate this approach.
Reference: [22] <author> M.A. Peot and D.E. Smith. </author> <title> Threat-Removal Strategies for Nonlinear Planning. </title> <booktitle> In Proc. AAAI-93 </booktitle>
Reference-contexts: The latter makes the deferment check intractable. This type of scenario does not occur for TWEAK representation which assumes variables with infinite domains, because for infinite domain variables, a set of non-codesignation constraints will never entail a codesignation constraint. (In <ref> [22] </ref> Peot and Smith describe a planner called DSep which is a variant of SNLP that defers threats until they are ``unseparable'', i.e., necessarily codesignating, and provide a proof that DSep search space is no larger than that of SNLP which folds conflict resolution into establishment.
Reference: [23] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A Sound, Complete, Partial Order Planner for ADL. </title> <booktitle> In Proc. </booktitle> <address> KR-92, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Many planners described in the literature are in fact complete for the larger class of unbloated solutions <ref> [23, 12] </ref>. Despite the statement of completeness results in terms of minimal plans, the search spaces of most classical planners do however contain bloated solutions; the extent of bloated plan generation does vary from planner to planner. <p> implies that hC; ni has been worked on once and the planner will ensure that it is not violated within this branch. 13 4.2.3 Goal Protection by Protection Intervals Although Nonlin does not use causal links as protection intervals, there have however been other planners, such as Pedestal [12], UCPOP <ref> [23] </ref>, which do interpret a causal link fn 0 g C protection interval and consider any step s that can possibly intervene between n 0 and n and delete C as a threat (or conflict) that needs to be resolved by adding additional constraints to the partial plan. <p> In this case, either we can order s to not come in the interval hn 0 ; ni, or let it come but add the preservation preconditions Q C s to the plan. This is the strategy followed by planners such as Pedestal [12] and UCPOP <ref> [23] </ref>. 15 This strategy effectively shifts the complexity of consistency check from refinement to search space size. 4.2.4 Redundancy elimination through Contributor Protection Although goal protection avoids working on the same goal more than once within the same branch, it does not completely remove redundancy from the search space.
Reference: [24] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: </title> <type> Evaluating Possible Efficiency Gains Technical Report 92-05-01, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: In Section 4, this generic algorithm is used as a backdrop to provide a rational reconstruction of the main ideas of existing refinement planners. Particular attention is paid to the variety of techniques 1 The work of Barrett and Weld <ref> [24] </ref> as well as Minton et. al. [15, 16] are certainly steps in the right direction. However, they do not tell the full story since the comparison there was between a specific partial order and total order planner. <p> The primary motivation behind partial order planning is efficiency -- by deferring orderings among operators, partial order planners avoid premature commitment and the consequent unnecessary backtracking, thereby improving performance <ref> [24, 9] </ref>. It is important to note that while partial order and total order planners use different representation constraints on the partial plans, the main goal of planning in either case still remains finding a ground operator sequence that is executable and satisfies goal criteria. <p> Eff) NP-hard with Cond. Eff) UA [16] MTC-based Pick if nec.false None Unambiguous ordering O (n 4 ) always O (n 4 ) always Nonlin [27] Q&A based Arbitrary Goal Protection via Q&A Conflict Resolution O (1) (aided by Causal links) TOCL <ref> [24] </ref> Protection based Arbitrary Contributor protection Total ordering O (1) O (1) Pedestal [12] Protection based Arbitrary Goal Protection by Total ordering O (1) O (1) protection intervals; SNLP [14] Protection based Arbitrary Contributor protection Conflict resolution O (1) O (1) UA-SNLP Protection based O (1)/ Arbitrary O (1)/ Contributor protection
Reference: [25] <author> D.E. Smith and M.A. Peot. </author> <title> Postponing Simple Conflicts in Nonlinear Planning. </title> <booktitle> In Working notes of AAAI Spring Symp. on Foundations of Automatic Planning: The classical approach and Beyond. </booktitle>
Reference-contexts: Here, once again, we see a tradeoff between search space size and cost of refinement: As we discussed in Section 4.3, checking consistency of general partial orderings against a set of exhaustive causal links is NP-hard <ref> [25] </ref>. The alternative of using pre-ordering or conflict resolution strategies to make consistency check tractable involves considerable amount of additional refinement over and above that required for establishment, and thus reduces ~, there by increasing the search space size. <p> However, it is often intractable to check dynamically whether an conflict is of this type; thus increasing the refinement cost. Smith and Peot <ref> [25] </ref> propose an attractive alternative that relies on a tractable pre-processing step to recognize some of the conflicts that are provably resolvable. Our discussion above shows that deferring conflicts based on such an analysis clearly preserves strong systematicity.
Reference: [26] <author> G.J. Sussman. </author> <title> A Computer Model of Skill Acquisition. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1975 </year>
Reference: [27] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, pages 888--893, </booktitle> <address> Boston, MA, </address> <year> 1977. </year>
Reference-contexts: In either case, establishment introduces new subgoals (in the form of the preconditions and secondary preconditions of the steps taking part in establishment; see below), as well as new ordering and binding constraints. The process continues until all open goals are established. First formalizations of refinement planning (e.g. <ref> [27, 1] </ref>) assumed that goal establishment requires ability to check the truth of arbitrary conditions in partial order plans. The Q&A procedure in Tate's Nonlin [27], provided the first formal specification of necessary and sufficient conditions for ensuring the truth of a proposition in a ground partially ordered plan. <p> The process continues until all open goals are established. First formalizations of refinement planning (e.g. [27, 1]) assumed that goal establishment requires ability to check the truth of arbitrary conditions in partial order plans. The Q&A procedure in Tate's Nonlin <ref> [27] </ref>, provided the first formal specification of necessary and sufficient conditions for ensuring the truth of a proposition in a ground partially ordered plan. Later work by Chapman's TWEAK [1], extended this truth criterion to partially ordered partially instantiated plans. (see [1, 9] for more details). <p> The semantics of the auxiliary constraint however depend on the particular book keeping strategy. For book keeping based on goal protection (e.g., NONLIN <ref> [27] </ref>), the auxiliary constraint requires that every candidate of the partial plan must have P true before the operator corresponding to step 18 n. <p> Eff) NP-hard with Cond. Eff) UA [16] MTC-based Pick if nec.false None Unambiguous ordering O (n 4 ) always O (n 4 ) always Nonlin <ref> [27] </ref> Q&A based Arbitrary Goal Protection via Q&A Conflict Resolution O (1) (aided by Causal links) TOCL [24] Protection based Arbitrary Contributor protection Total ordering O (1) O (1) Pedestal [12] Protection based Arbitrary Goal Protection by Total ordering O (1) O (1) protection intervals; SNLP [14] Protection based Arbitrary Contributor
Reference: [28] <author> Q. Yang, J. Tenenberg and S. Woods. </author> <title> Abstraction in nonlinear planning University of Waterloo Technical Report CS-91-65, </title> <booktitle> 1991. </booktitle> <pages> 41 </pages>
References-found: 28

