URL: http://www.cs.wisc.edu/~suhui/publications/sigm94.ps.gz
Refering-URL: http://www.cs.wisc.edu/~suhui/suhui.html
Root-URL: 
Email: email: -suhui, vernon-@cs.wisc.edu  email: mansha@research.trddc.ernet.in  
Title: Use of Application Characteristics and Limited Preemption for Run-To-Completion Parallel Processor Scheduling Policies  
Author: Su-Hui Chiang Rajesh K. Mansharamani and Mary K. Vernon 
Address: Madison, WI 53706.  1 Mangaldas Road Pune 411 050, India.  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  TRDDC  
Abstract: The performance potential of run-to-completion (RTC) parallel processor scheduling policies is investigated by examining whether (1) application execution rate characteristics such as average parallelism (avg) and processor working set (pws) and/or (2) limited preemption can be used to improve the performance of these policies. We address the first question by comparing policies (previous as well as new) that differ only in whether or not they use execution rate characteristics and by examining a wider range of the workload parameter space than previous studies. We address the second question by comparing a simple two-level queueing policy with RTC scheduling in the second level queue against RTC policies that don't allow any preemption and against dynamic equiallocation (EQ). Using simulation to estimate mean response times we find that for promising RTC policies such as adaptive static partitioning (ASP) and shortest demand first (SDF), a maximum allocation constraint that is for all practical purposes independent of avg and pws provides greater and more consistent improvement in policy performance than using avg or pws. Also, under the assumption that job demand information is unavailable to the scheduler we show that the ASP-max policy outperforms all previous high performance RTC policies for workloads with coefficient of variation in processing requirement greater than one. Furthermore, a two-level queue that allows at most one preemption per job outperforms ASP-max but is not competitive with EQ. 
Abstract-found: 1
Intro-found: 1
Reference: [AMV93] <author> R. Agrawal, R. Mansharamani, M. Vernon. </author> <title> Response Time Bounds for Parallel Processor Allocation Policies. </title> <type> Technical Report 1152, </type> <institution> Computer Sciences Dept., University of Wisconsin-Madison, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Unification of Previous Results The experiments in sections 4.1-4.5 indicate that, for C v &gt; 1 application execution rate characteristics are not very useful for determining processor allocations in RTC policies. This is also true for exponential demands <ref> [AMV93] </ref>. In retrospect, the intuition behind this result is that policy performance degrades when jobs with long execution times are allocated too many processors. Since execution rate characteristics have not been shown or assumed to be correlated with demand, they are poor predictors of this behavior.
Reference: [Cr91] <institution> Cray Research, </institution> <type> private communication, </type> <year> 1991. </year>
Reference-contexts: Moreover, measurements of Cray YMP sites have re ported C D to be in the range of 30-70 <ref> [Cr91] </ref>. 3. Processor Scheduling Policies In this section we give the definitions for several previous processor scheduling policies as well as several new policies that will be compared in section 4. The previous policies have been shown to have high performance for various workloads.
Reference: [Do88] <author> L. Dowdy. </author> <title> On the Partitioning of Multiprocessor Systems. </title> <type> Technical Report, </type> <institution> Vanderbilt University, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: We use the following functional form derived from <ref> [Do88] </ref> for g: g (k )= (1+b)k hhhhhhh , k =1,2,..., P. g As in [MEB88], two extremes of correlation between job demand and parallelism are considered: no correlation (r = 0), in which case D and N are independent, and full correlation (r = 1), in which mean demand is
Reference: [EZL89] <author> D. Eager, J. Zahorjan, and E. Lazowska. </author> <title> Speedup Versus Efficiency in Parallel Systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38, </volume> <month> 3 (Mar. </month> <year> 1989), </year> <pages> 408-423. </pages>
Reference-contexts: NSS93b, ST93]. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies <ref> [EZL89, Se89, MEB91, GST91] </ref> have concluded that using execution rate characteristics is beneficial, other studies have assumed that using these characteristics leads to better performance (e.g., [ZM90]), and still other studies [ST93, SRDS93] have reached the opposite con clusion. (2) The benefit of application characteristics for dynamic policies is also an <p> The parallelism parameter N is known to the scheduler. Some schedulers are also given the average parallelism (avg) or processor working set (pws), each of which is a function of N and b as follows. Since avg is the speedup of the job on an unbounded number of processors <ref> [EZL89] </ref>, it follows that avg = g (N ) for N &lt; P. For N = P we let avg = g (P ). The pws measure [GST91], coincides with the knee of the execution-time efficiency profile [EZL89,MEB91]. <p> As shown in sections 4.1-4.2, [ST93] reached similar conclusions by comparing the PWS and ASP policies for workloads with constant available parallelism and exponential job demands. Four studies have reached the opposite conclusions <ref> [EZL89, Se89, MEB91, and GST91] </ref>, based on the following detailed results. Sevcik [Se89] shows that policies that use application characteristics and adapt to load (i.e., A+&mM and a simpler policy A+) are superior to policies that do neither.
Reference: [GST91] <author> D. Ghosal, G. Serazzi, and S. Tripathi. </author> <title> The Processor Working Set and Its Use in Scheduling Multiprocessor Systems. </title> <journal> IEEE Transactions on Software Engineering 17, </journal> <month> 5 (May </month> <year> 1991), </year> <pages> 443-453. </pages>
Reference-contexts: As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases <ref> [Se89, GST91, NSS93a, NSS93b, ST93] </ref>. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? <p> NSS93b, ST93]. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies <ref> [EZL89, Se89, MEB91, GST91] </ref> have concluded that using execution rate characteristics is beneficial, other studies have assumed that using these characteristics leads to better performance (e.g., [ZM90]), and still other studies [ST93, SRDS93] have reached the opposite con clusion. (2) The benefit of application characteristics for dynamic policies is also an <p> Since avg is the speedup of the job on an unbounded number of processors [EZL89], it follows that avg = g (N ) for N &lt; P. For N = P we let avg = g (P ). The pws measure <ref> [GST91] </ref>, coincides with the knee of the execution-time efficiency profile [EZL89,MEB91]. For the specific ERF g (k )=(1+b)k / (k +b) it can be verified that the pws = min (N, b). <p> This policy was first defined in [ST91]. PWS: A FCFS policy in which each job is allocated the minimum of pws and the number of idle processors. This is equivalent to the FF+FIFO policy defined in <ref> [GST91] </ref> and renamed PWS in [ST93], with window size equal to one. AVG: The same as PWS except the measure avg is used in place of pws. <p> The AVG and PWS policies, which have been widely studied under specific workload assumptions <ref> [Se89, MEB91, GST91, ST93, SRDS93] </ref>, serve as starting points for understanding whether execution rate characteristics are beneficial. In section 4.1 we compare the performance of ASP against AVG and PWS policies under similar workload assumptions as in [ST93], as well as under new workloads. <p> Note that in this case neither policy decreases the processor allocations when instantaneous load increases, but both policies have a maximum allocation constraint. Finally, Ghosal et. al. <ref> [GST91] </ref> compare four pws-based policies, and show that the two policies that have a maximum allocation constraint equal to pws outperform the two policies that have no maximum. Each of these detailed results makes sense in the context of the experiments presented in sections 4.1-4.5.
Reference: [Kl76] <author> L. Kleinrock. </author> <title> Queueing Systems, </title> <booktitle> Volume II: Computer Applications. </booktitle> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: In this section we investigate this alternative by defining an appropriate class of policies, discussing choice of policy parame ters, and evaluating policy performance with respect to EQ. 5.1. The Two-level, FCFS/ASP-max Policy One way to implement limited preemption is to use a multilevel (ML) queueing discipline <ref> [Kl76] </ref> in which arriving jobs join the highest priority queue and thereby quickly receive a small amount of service. Leutenegger [Le90] has studied the behavior of two-level queues for specific dynamic parallel processor policies.
Reference: [Le90] <author> S. </author> <title> Leutenegger. Issues in Multiprogrammed Multiprocessor Sharing. </title> <type> Ph.D. Thesis, Technical Report #954, </type> <institution> Computer Sciences Dept., University of Wisconsin-Madison, </institution> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: The Two-level, FCFS/ASP-max Policy One way to implement limited preemption is to use a multilevel (ML) queueing discipline [Kl76] in which arriving jobs join the highest priority queue and thereby quickly receive a small amount of service. Leutenegger <ref> [Le90] </ref> has studied the behavior of two-level queues for specific dynamic parallel processor policies. Here we consider a two level queue with FCFS scheduling in the first queue and ASP-max scheduling in the second level queue. Thus, each job is preempted at most once during it's execution.
Reference: [LN91] <author> S. Leutenegger, and R. Nelson. </author> <title> Analysis of Spatial and Temporal Scheduling Policies for Semi-Static and Dynamic Multiprocessor Environments. </title> <type> IBM RC #75594, </type> <institution> IBM T.J. Watson Research Center, </institution> <month> Aug. </month> <year> 1991. </year>
Reference: [LV90] <author> S. Leutenegger, and M. Vernon. </author> <title> The Performance of Mul-tiprogrammed Multiprocessor Scheduling Policies. </title> <booktitle> Proc. 1990 ACM SIGMETRICS Conf. on Measurement and Modeling of Computer Systems, </booktitle> <address> Boulder, CO, </address> <month> (May </month> <year> 1990), </year> <pages> 226-236. </pages>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one <ref> [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b] </ref>. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies [ZM90, MEB91, ST91, NSS93b]. <p> in the experiments: g Three distributions of N are considered: (1) the constant distribution, i.e., N=k for a fixed k -1,...,P -, (2) a 2-point distribution, where N =1 with probability p 1 and N =P with probability 1-p 1 , and (3) the spread N distribution, a bounded-geometric distribution <ref> [LV90] </ref> given by N = min (X,P ), where X = Geometric (p ), 0 p 1. C N denotes the coefficient of variation of N. <p> The EQ policy simulations spatially partition the processors (with temporal sharing for the fractional part of processing power if any). Spatial equi-allocation policies have been considered in [TG89, MVZ93] and temporal versions in <ref> [LV90, LN91,MV93b] </ref>. 3.2. New Policies Adaptive-AVG: Upon an arrival, the job is allocated the lesser of its avg and the number of idle processors in the system. If no free processors are available, the job joins the end of the queue.
Reference: [MEB88] <author> S. Majumdar, D. Eager, and R. Bunt. </author> <title> Scheduling in multiprogrammed parallel systems. </title> <booktitle> Proc. 1988 ACM SIGMETRICS Conf. on Measurement and Modeling of Computer Systems, </booktitle> <address> Santa Fe, NM. </address> <month> (May </month> <year> 1988), </year> <pages> 104-113. </pages>
Reference-contexts: We use the following functional form derived from [Do88] for g: g (k )= (1+b)k hhhhhhh , k =1,2,..., P. g As in <ref> [MEB88] </ref>, two extremes of correlation between job demand and parallelism are considered: no correlation (r = 0), in which case D and N are independent, and full correlation (r = 1), in which mean demand is linearly correlated with N. 3 0 20 40 60 80 100 0 20 40 60 <p> It can be verified that the unconditional mean demand D = cN and thus c = D hh hh g As in <ref> [MEB88] </ref> we assume a two-stage hyperexponential distribution (H 2 ) for job demand with mean as explained above (for r =0 and r =1) and coefficient of variation C v . When r =0, the overall coefficient of variation in demand C D equals C v .
Reference: [MEB91] <author> S. Majumdar, D. Eager, and R. Bunt. </author> <title> Characterisation of Programs for Scheduling in Multiprogrammed Parallel Systems. Performance Evaluation 13, </title> <booktitle> (1991), </booktitle> <pages> 109-130. </pages>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b]. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies <ref> [ZM90, MEB91, ST91, NSS93b] </ref>. <p> As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases [Se89, GST91, NSS93a, NSS93b, ST93]. (The data in <ref> [ZM90, MEB91, RSDS93, SRDS93] </ref> also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies [EZL89, Se89, MEB91, GST91] have concluded <p> NSS93b, ST93]. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies <ref> [EZL89, Se89, MEB91, GST91] </ref> have concluded that using execution rate characteristics is beneficial, other studies have assumed that using these characteristics leads to better performance (e.g., [ZM90]), and still other studies [ST93, SRDS93] have reached the opposite con clusion. (2) The benefit of application characteristics for dynamic policies is also an <p> The AVG and PWS policies, which have been widely studied under specific workload assumptions <ref> [Se89, MEB91, GST91, ST93, SRDS93] </ref>, serve as starting points for understanding whether execution rate characteristics are beneficial. In section 4.1 we compare the performance of ASP against AVG and PWS policies under similar workload assumptions as in [ST93], as well as under new workloads. <p> As shown in sections 4.1-4.2, [ST93] reached similar conclusions by comparing the PWS and ASP policies for workloads with constant available parallelism and exponential job demands. Four studies have reached the opposite conclusions <ref> [EZL89, Se89, MEB91, and GST91] </ref>, based on the following detailed results. Sevcik [Se89] shows that policies that use application characteristics and adapt to load (i.e., A+&mM and a simpler policy A+) are superior to policies that do neither. <p> Sevcik [Se89] shows that policies that use application characteristics and adapt to load (i.e., A+&mM and a simpler policy A+) are superior to policies that do neither. Sevcik [Se89] and Majumdar et. al. <ref> [MEB91] </ref> show that AVG is nearly as good as the load-dependent optimal fixed partitioning policy at low to moderate load. Note that in this case neither policy decreases the processor allocations when instantaneous load increases, but both policies have a maximum allocation constraint.
Reference: [MV93a] <author> R. Mansharamani, and M. Vernon. </author> <title> Approximate Analysis of Parallel Processor Allocation Policies. </title> <type> Technical Report 1187, </type> <institution> Computer Sciences Dept., University of Wisconsin-Madison, </institution> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Finally, section 6 summarizes the conclusions of this paper. 2. System and Workload Model To study the behavior of scheduling policies with respect to workload parameters over a wide range of workloads, we use the system and workload model of <ref> [MV93a] </ref>, reviewed below. 2.1. System Model We consider an open system with P identical processors and a central job queue. Jobs arrive to the system according to a Poisson process with rate l as shown in Figure 2.1. <p> When r =1 it can be verified that (2.1)C D 2 )(1+C v The hyperexponential distribution allows us to test the sensitivity of policy performance to C D . The performance of many policies is sensitive to C D (cf. <ref> [MEB88,LV90, MV93a] </ref>). Furthermore, computer system workloads often have C D &gt; 1. 2 2.3. Comments on the Workload Model The ERF is assumed to be nondecreasing since the user is unlikely to request more processors (either explicitly or by forking more processes) if this will increase program execution time.
Reference: [MV93b] <author> R. Mansharamani, and M. Vernon. </author> <title> Properties of the EQS Parallel Processor Allocation Policy. </title> <type> Technical Report 1192, </type> <institution> Computer Sciences Dept., University of Wisconsin-Madison, </institution> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one <ref> [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b] </ref>. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies [ZM90, MEB91, ST91, NSS93b]. <p> Related work shows that limiting the maximum allocation under EQ degrades performance <ref> [MV93b] </ref>. This motivated us to use avg for EQ in a way that the allocation to jobs should increase beyond their avg if processors are idle, which led to the EQ-AVG policy defined in section 3.2.
Reference: [MVZ93] <author> C. McCann, R. Vaswani, and J. Zahorjan. </author> <title> A Dynamic Processor Allocation Policy for Multiprogrammed, Shared Memory Multiprocessors. </title> <journal> ACM Transactions on Computer Systems 11, </journal> <month> 2 (May </month> <year> 1993), </year> <pages> 146-178. </pages>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one <ref> [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b] </ref>. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies [ZM90, MEB91, ST91, NSS93b]. <p> The EQ policy simulations spatially partition the processors (with temporal sharing for the fractional part of processing power if any). Spatial equi-allocation policies have been considered in <ref> [TG89, MVZ93] </ref> and temporal versions in [LV90, LN91,MV93b]. 3.2. New Policies Adaptive-AVG: Upon an arrival, the job is allocated the lesser of its avg and the number of idle processors in the system. If no free processors are available, the job joins the end of the queue.
Reference: [NSS93a] <author> V. Naik, S. Setia, and M. Squillante. </author> <title> Scheduling of Large Scientific Applications on Distributed Memory Multiprocessor Systems. </title> <booktitle> Proc. of the 6th SIAM Conference on Parallel Processing for Scientific Computation, </booktitle> <year> 1993. </year>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one <ref> [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b] </ref>. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies [ZM90, MEB91, ST91, NSS93b]. <p> As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases <ref> [Se89, GST91, NSS93a, NSS93b, ST93] </ref>. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? <p> We also note that efficient implementations of dynamic policies can reduce preemption frequency such that preemption overhead is a small fraction (i.e., &lt;5%) of response time <ref> [NSS93a, NSS93b] </ref>. 2.2. Workload Model The following workload model attempts to capture in a few parameters the essential features of parallel applications with respect to relative scheduling discipline performance. <p> Use of avg and pws in Processor Scheduling In this section we examine the use of avg and pws in processor scheduling. The ASP policy, which has been studied in several papers <ref> [ST91, ST93, NSS93a, NSS93b, RSDS93] </ref> 3 and is among the most promising RTC policies to date [ST93], decreases processor allocations as instantaneous load increases but does not use job demand or execution rate characteristics. <p> In spite of the improved performance of the TL-FCFS/ASP-max policy relative to ASP-max, this simple limited preemption policy is not competitive with EQ. Thus, it appears likely that the EQ policy with a lower bound on the time between preemptions <ref> [NSS93a, NSS93b] </ref> has higher performance than is achievable with policies that allow at most one preemption per job. Further experimentation is needed to confirm this conjecture. 6.
Reference: [NSS93b] <author> V.Naik, S. Setia, and M. Squillante. </author> <title> Performance Analysis of Job Scheduling Policies in Parallel Supercomputing Environments. </title> <booktitle> Proc. of Supercomputing'93, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one <ref> [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b] </ref>. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies [ZM90, MEB91, ST91, NSS93b]. <p> EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b]. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies <ref> [ZM90, MEB91, ST91, NSS93b] </ref>. <p> As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases <ref> [Se89, GST91, NSS93a, NSS93b, ST93] </ref>. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? <p> We also note that efficient implementations of dynamic policies can reduce preemption frequency such that preemption overhead is a small fraction (i.e., &lt;5%) of response time <ref> [NSS93a, NSS93b] </ref>. 2.2. Workload Model The following workload model attempts to capture in a few parameters the essential features of parallel applications with respect to relative scheduling discipline performance. <p> Use of avg and pws in Processor Scheduling In this section we examine the use of avg and pws in processor scheduling. The ASP policy, which has been studied in several papers <ref> [ST91, ST93, NSS93a, NSS93b, RSDS93] </ref> 3 and is among the most promising RTC policies to date [ST93], decreases processor allocations as instantaneous load increases but does not use job demand or execution rate characteristics. <p> We have verified that the performance of ASP-max lies within this envelope for exponential demands. However, for C v =5 the ASP-max policy has better performance than the envelope at moderate to high loads (r0.5). Also, Naik et al. <ref> [NSS93b] </ref> have observed that for a workload with high C v , ASP performs as well as the envelope of best fixed partitioning policy performance. <p> In spite of the improved performance of the TL-FCFS/ASP-max policy relative to ASP-max, this simple limited preemption policy is not competitive with EQ. Thus, it appears likely that the EQ policy with a lower bound on the time between preemptions <ref> [NSS93a, NSS93b] </ref> has higher performance than is achievable with policies that allow at most one preemption per job. Further experimentation is needed to confirm this conjecture. 6.
Reference: [RSDS93] <author> E. Rosti, E. Smirni, L. Dowdy, G. Serazzi, and B. Carl-son. </author> <title> Robust Partitioning Policies of Multiprocessor Systems. To appear in Performance Evaluation, </title> <booktitle> special issue on the performance modeling of parallel processing systems. </booktitle>
Reference-contexts: As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases [Se89, GST91, NSS93a, NSS93b, ST93]. (The data in <ref> [ZM90, MEB91, RSDS93, SRDS93] </ref> also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies [EZL89, Se89, MEB91, GST91] have concluded <p> Use of avg and pws in Processor Scheduling In this section we examine the use of avg and pws in processor scheduling. The ASP policy, which has been studied in several papers <ref> [ST91, ST93, NSS93a, NSS93b, RSDS93] </ref> 3 and is among the most promising RTC policies to date [ST93], decreases processor allocations as instantaneous load increases but does not use job demand or execution rate characteristics. <p> Section 4.2 compares ASP with Adaptive-AVG. Finally, to enable an unbiased comparison of ASP and Adaptive-AVG we extend ASP to include a maximum allocation constraint as in <ref> [RSDS93] </ref>. Sections 4.3 and 4.4 evaluate whether the maximum allocation constraint improves the performance of ASP and provide a simple rule of thumb for the "max" value. A policy that uses a load-adaptive formula for "max", ASP-max+, is also considered and is compared against the A+&mM policy [Se89]. <p> In most experiments we set C v =5. Initially results are provided for exponential demands (C v =1), whereas section 4.5 provides results for C v = 30. Two ERFs in hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 3 Under the workload assumptions of <ref> [RSDS93] </ref> their EPM policy with maximum allocation equal to number of system processors reduces to the ASP policy. figure 2.2 are used in most of the experiments: the highly sublinear ERF b = 70, or the more nearly linear execution rate b = 300. <p> The EPM policy in <ref> [RSDS93] </ref> is very similar and has the same mean response time as ASP-max. 5 hh hh hh processor system and the same workloads as in figures 4.2 and 4.3. <p> Finally, we ran a small number of experiments for P = 16 under constant N as in <ref> [RSDS93] </ref> and found that when C v = 5, the ASP3 and ASP4 policies have high performance. <p> In any case, the ASP20+ policy which allocates processors independently of b, performs at least as well as the A+&mM policy which requires knowledge of avg (i.e., b) and m. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 5 The experimental data in <ref> [RSDS93] </ref> (figure 4) show that the EPM4 policy (max = 0.25 P) is close to the optimal EPM policy at moderate to high loads for sublinear ERFs and at high loads for close to linear ERFs. <p> Each of these detailed results makes sense in the context of the experiments presented in sections 4.1-4.5. Rosti et al. <ref> [RSDS93] </ref> give experimental data under exponential demands (C v =1) to show that an adaptive partitioning policy named AP that does not have a maximum allocation constraint performs almost as well as the optimal EPM (i.e., ASP-max) policy.
Reference: [Se89] <author> K. Sevcik. </author> <title> Characterization of Parallelism in Applications and Their Use in Scheduling. </title> <booktitle> Proc. 1989 ACM SIG-METRICS and Peroformance '89 Int'l. Conf. on Measurement and Modeling of Computer Systems, </booktitle> <address> Berkeley, CA, </address> <month> (May </month> <year> 1989), </year> <pages> 171-180. </pages>
Reference-contexts: As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases <ref> [Se89, GST91, NSS93a, NSS93b, ST93] </ref>. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? <p> NSS93b, ST93]. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies <ref> [EZL89, Se89, MEB91, GST91] </ref> have concluded that using execution rate characteristics is beneficial, other studies have assumed that using these characteristics leads to better performance (e.g., [ZM90]), and still other studies [ST93, SRDS93] have reached the opposite con clusion. (2) The benefit of application characteristics for dynamic policies is also an <p> A+&mM: Jobs are scheduled in FCFS order. A job is allocated the minimum of a and the number of free processors if there is any. The parameter a is a function of the system load and the job's average (avg), minimum (m), and maximum (M = N) parallelism <ref> [Se89] </ref>. <p> = 1) and fully parallel phases, a is computed as follows : (3.1) a = J J 1 + (1 - r)( avg - 1 hhhhhhh ) if r p N - r (N - avg ) hhhhhhhhh if r &lt; p where p is set to be 0.25 in <ref> [Se89] </ref>. SDF (Smallest Demand First): Jobs are scheduled in order of increasing demand (D), without preemption. A job is allocated the minimum of its parallelism (N) and the number of idle processors. <p> The AVG and PWS policies, which have been widely studied under specific workload assumptions <ref> [Se89, MEB91, GST91, ST93, SRDS93] </ref>, serve as starting points for understanding whether execution rate characteristics are beneficial. In section 4.1 we compare the performance of ASP against AVG and PWS policies under similar workload assumptions as in [ST93], as well as under new workloads. <p> Sections 4.3 and 4.4 evaluate whether the maximum allocation constraint improves the performance of ASP and provide a simple rule of thumb for the "max" value. A policy that uses a load-adaptive formula for "max", ASP-max+, is also considered and is compared against the A+&mM policy <ref> [Se89] </ref>. Section 4.5 provides results for additional workloads not considered in sections 4.1-4.4. Section 4.6 discusses how the results in sections 4.1-4.5 can be used to explain apparent discrepancies in the previous literature. <p> To investigate this approach, the ASP-max+ policy uses equation (3.1) with avg replaced by 0.2 P (and p = 0.5) to compute a load-dependent value for "max". Note that this policy can be compared against the A+&mM policy <ref> [Se89] </ref> reviewed in section 3.1 to determine the benefits of using application execution rate characteristics in a new context. The performance of the ASP20+ and the A+&mM policies are shown with dashed and dotted curves, respectively in Figure 4.5. <p> As shown in sections 4.1-4.2, [ST93] reached similar conclusions by comparing the PWS and ASP policies for workloads with constant available parallelism and exponential job demands. Four studies have reached the opposite conclusions <ref> [EZL89, Se89, MEB91, and GST91] </ref>, based on the following detailed results. Sevcik [Se89] shows that policies that use application characteristics and adapt to load (i.e., A+&mM and a simpler policy A+) are superior to policies that do neither. <p> As shown in sections 4.1-4.2, [ST93] reached similar conclusions by comparing the PWS and ASP policies for workloads with constant available parallelism and exponential job demands. Four studies have reached the opposite conclusions [EZL89, Se89, MEB91, and GST91], based on the following detailed results. Sevcik <ref> [Se89] </ref> shows that policies that use application characteristics and adapt to load (i.e., A+&mM and a simpler policy A+) are superior to policies that do neither. Sevcik [Se89] and Majumdar et. al. [MEB91] show that AVG is nearly as good as the load-dependent optimal fixed partitioning policy at low to moderate <p> Four studies have reached the opposite conclusions [EZL89, Se89, MEB91, and GST91], based on the following detailed results. Sevcik <ref> [Se89] </ref> shows that policies that use application characteristics and adapt to load (i.e., A+&mM and a simpler policy A+) are superior to policies that do neither. Sevcik [Se89] and Majumdar et. al. [MEB91] show that AVG is nearly as good as the load-dependent optimal fixed partitioning policy at low to moderate load. Note that in this case neither policy decreases the processor allocations when instantaneous load increases, but both policies have a maximum allocation constraint. <p> However, their data for non-exponential demands (C v = 3) shows that the AP policy performs worse than ASP-max (EPM in their paper) as C v increases. We note the A+ policy of <ref> [Se89] </ref> was shown to have poor performance by Smirni et al. [SRDS93]. Under their workload assumption that the maximium and minimum parallelisms are P and 1, respectively, for all jobs, A+ is equivalent to A+&mM.
Reference: [Se93] <author> K. Sevcik. </author> <title> Application Scheduling and Processor Allocation in Multiprogrammed Parallel Processing Systems. To appear in Performance Evaluation, </title> <booktitle> special issue on the performance modeling of parallel processing systems. </booktitle>
Reference: [SRDS93] <author> E. Smirni, E. Rosti, L. Dowdy, and G. </author> <title> Serazzi. Evaluation of Multiprocessor Allocation Policies. </title> <type> Technical Report, </type> <institution> Vanderbilt University, </institution> <year> 1993. </year>
Reference-contexts: As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases [Se89, GST91, NSS93a, NSS93b, ST93]. (The data in <ref> [ZM90, MEB91, RSDS93, SRDS93] </ref> also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies [EZL89, Se89, MEB91, GST91] have concluded <p> as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies [EZL89, Se89, MEB91, GST91] have concluded that using execution rate characteristics is beneficial, other studies have assumed that using these characteristics leads to better performance (e.g., [ZM90]), and still other studies <ref> [ST93, SRDS93] </ref> have reached the opposite con clusion. (2) The benefit of application characteristics for dynamic policies is also an open question that to the authors' knowledge has not been studied before. (3) Another possible approach to improving the performance of RTC policies is to use limited preemption of executing jobs. <p> The AVG and PWS policies, which have been widely studied under specific workload assumptions <ref> [Se89, MEB91, GST91, ST93, SRDS93] </ref>, serve as starting points for understanding whether execution rate characteristics are beneficial. In section 4.1 we compare the performance of ASP against AVG and PWS policies under similar workload assumptions as in [ST93], as well as under new workloads. <p> However, their data for non-exponential demands (C v = 3) shows that the AP policy performs worse than ASP-max (EPM in their paper) as C v increases. We note the A+ policy of [Se89] was shown to have poor performance by Smirni et al. <ref> [SRDS93] </ref>. Under their workload assumption that the maximium and minimum parallelisms are P and 1, respectively, for all jobs, A+ is equivalent to A+&mM. We remark that our implementation of A+&mM is work-conserving, while their implementation of A+ is not. <p> We remark that our implementation of A+&mM is work-conserving, while their implementation of A+ is not. Smirni et al. proposed a heuristic estimate of the lower bound on the performance of RTC policies <ref> [SRDS93] </ref>. The lower bound estimate is derived by using the best fixed partitioning policy with equal size partitions and FCFS scheduling at each value of system load. We have verified that the performance of ASP-max lies within this envelope for exponential demands.
Reference: [ST91] <author> S. Setia and S. Tripathi. </author> <title> An Analysis of Several Processor Partitioning Policies for Parallel Computers. </title> <type> Technical Report CS-TR-2684, </type> <institution> University of Maryland, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one <ref> [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b] </ref>. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies [ZM90, MEB91, ST91, NSS93b]. <p> EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b]. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies <ref> [ZM90, MEB91, ST91, NSS93b] </ref>. <p> When a job completes, the released processors are allocated one at a time to the waiting jobs in round robin order (starting from the first waiting job), under the constraint that no job is allocated more processors than its available parallelism. This policy was first defined in <ref> [ST91] </ref>. PWS: A FCFS policy in which each job is allocated the minimum of pws and the number of idle processors. This is equivalent to the FF+FIFO policy defined in [GST91] and renamed PWS in [ST93], with window size equal to one. <p> Use of avg and pws in Processor Scheduling In this section we examine the use of avg and pws in processor scheduling. The ASP policy, which has been studied in several papers <ref> [ST91, ST93, NSS93a, NSS93b, RSDS93] </ref> 3 and is among the most promising RTC policies to date [ST93], decreases processor allocations as instantaneous load increases but does not use job demand or execution rate characteristics.
Reference: [ST93] <author> S. Setia and S. Tripathi. </author> <title> A Comparative Analysis of Static Processor Partitioning Policies for Parallel Computers. </title> <booktitle> Proc. of the International Workshop on Modeling and Simulation of Computer and Telecommunication Systems (MASCOTS), </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases <ref> [Se89, GST91, NSS93a, NSS93b, ST93] </ref>. (The data in [ZM90, MEB91, RSDS93, SRDS93] also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? <p> as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies [EZL89, Se89, MEB91, GST91] have concluded that using execution rate characteristics is beneficial, other studies have assumed that using these characteristics leads to better performance (e.g., [ZM90]), and still other studies <ref> [ST93, SRDS93] </ref> have reached the opposite con clusion. (2) The benefit of application characteristics for dynamic policies is also an open question that to the authors' knowledge has not been studied before. (3) Another possible approach to improving the performance of RTC policies is to use limited preemption of executing jobs. <p> This policy was first defined in [ST91]. PWS: A FCFS policy in which each job is allocated the minimum of pws and the number of idle processors. This is equivalent to the FF+FIFO policy defined in [GST91] and renamed PWS in <ref> [ST93] </ref>, with window size equal to one. AVG: The same as PWS except the measure avg is used in place of pws. <p> Use of avg and pws in Processor Scheduling In this section we examine the use of avg and pws in processor scheduling. The ASP policy, which has been studied in several papers <ref> [ST91, ST93, NSS93a, NSS93b, RSDS93] </ref> 3 and is among the most promising RTC policies to date [ST93], decreases processor allocations as instantaneous load increases but does not use job demand or execution rate characteristics. <p> Use of avg and pws in Processor Scheduling In this section we examine the use of avg and pws in processor scheduling. The ASP policy, which has been studied in several papers [ST91, ST93, NSS93a, NSS93b, RSDS93] 3 and is among the most promising RTC policies to date <ref> [ST93] </ref>, decreases processor allocations as instantaneous load increases but does not use job demand or execution rate characteristics. The AVG and PWS policies, which have been widely studied under specific workload assumptions [Se89, MEB91, GST91, ST93, SRDS93], serve as starting points for understanding whether execution rate characteristics are beneficial. <p> The AVG and PWS policies, which have been widely studied under specific workload assumptions <ref> [Se89, MEB91, GST91, ST93, SRDS93] </ref>, serve as starting points for understanding whether execution rate characteristics are beneficial. In section 4.1 we compare the performance of ASP against AVG and PWS policies under similar workload assumptions as in [ST93], as well as under new workloads. <p> In section 4.1 we compare the performance of ASP against AVG and PWS policies under similar workload assumptions as in <ref> [ST93] </ref>, as well as under new workloads. We then modify AVG to decrease processor allocations as queue length increases (i.e., Adaptive-AVG), in order to compare policies that do and do not use execution rate characteristics on a more equitable basis. Section 4.2 compares ASP with Adaptive-AVG. <p> Workloads that allow different classes of jobs to have different ERFs are defined in section 4.5. 4.1. ASP versus PWS and AVG Setia and Tripathi <ref> [ST93] </ref> show that ASP outperforms PWS at moderate to high loads for a two-class workload with exponential demands per class, constant available parallelism N =P =7 in each class, with one class having close to linear ERF and the other class having a highly sublinear ERF. <p> The data in figure 4.1a is in agreement with the results in <ref> [ST93] </ref>, namely that for a work load with C D close to 1, N =P, and a sublinear ERF, ASP outperforms PWS at moderate to high load, and the PWS system saturates before ASP. We also note that AVG outperforms PWS for the given workload, but has similar saturation behavior. <p> Figures 4.2a and b show that the relative performance of AVG and ASP is sensitive to the distribution of N. In fact, for the constant N distribution (considered in <ref> [ST93] </ref>), ASP outperforms AVG and PWS for all N . However for the 2-point N workload ASP and AVG are roughly equivalent for N hh &lt; 0.5 P, and for the spread N distribution AVG has higher performance than ASP for a large range of N hh . <p> Since execution rate characteristics have not been shown or assumed to be correlated with demand, they are poor predictors of this behavior. As shown in sections 4.1-4.2, <ref> [ST93] </ref> reached similar conclusions by comparing the PWS and ASP policies for workloads with constant available parallelism and exponential job demands. Four studies have reached the opposite conclusions [EZL89, Se89, MEB91, and GST91], based on the following detailed results.
Reference: [TG89] <author> A. Tucker and A. Gupta. </author> <title> Process Control and Scheduling Issues for Multiprogrammed Shared-Memory Multiprocessors. </title> <booktitle> Proc. of the 12th ACM Symposium on Operating System Principles, </booktitle> <month> Dec. </month> <year> 1989, </year> <pages> 159-166. </pages>
Reference-contexts: The EQ policy simulations spatially partition the processors (with temporal sharing for the fractional part of processing power if any). Spatial equi-allocation policies have been considered in <ref> [TG89, MVZ93] </ref> and temporal versions in [LV90, LN91,MV93b]. 3.2. New Policies Adaptive-AVG: Upon an arrival, the job is allocated the lesser of its avg and the number of idle processors in the system. If no free processors are available, the job joins the end of the queue.
Reference: [ZM90] <author> J. Zahorjan and C. McCann. </author> <title> Processor Scheduling in Shared Memory Multiprocessors. </title> <booktitle> Proc. 1990 ACM SIG-METRICS Conf. on Measurement and Modeling of Computer Systems, </booktitle> <address> Boulder, CO, </address> <month> (May </month> <year> 1990), </year> <pages> 214-225. </pages>
Reference-contexts: EQ policies) have high performance when the coefficient of variation, C D , in cumulative job processing requirement is greater than one [LV90, ST91, NSS93a, NSS93b, MVZ93, MV93b]. Also, several studies have shown that particular RTC policies have poorer performance than particular dynamic policies <ref> [ZM90, MEB91, ST91, NSS93b] </ref>. <p> As a third example, there is consensus in the literature that RTC policies have higher performance if they allocate fewer processors to a job as (instantaneous or average) system load increases [Se89, GST91, NSS93a, NSS93b, ST93]. (The data in <ref> [ZM90, MEB91, RSDS93, SRDS93] </ref> also support this conclusion.) Questions that remain unresolved in the literature include: (1) Should RTC policies use application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies [EZL89, Se89, MEB91, GST91] have concluded <p> application execution rate characteristics, such as average parallelism (avg) or processor working set (pws) (defined in section 2) in determining processor allocations? Several studies [EZL89, Se89, MEB91, GST91] have concluded that using execution rate characteristics is beneficial, other studies have assumed that using these characteristics leads to better performance (e.g., <ref> [ZM90] </ref>), and still other studies [ST93, SRDS93] have reached the opposite con clusion. (2) The benefit of application characteristics for dynamic policies is also an open question that to the authors' knowledge has not been studied before. (3) Another possible approach to improving the performance of RTC policies is to use
References-found: 24

