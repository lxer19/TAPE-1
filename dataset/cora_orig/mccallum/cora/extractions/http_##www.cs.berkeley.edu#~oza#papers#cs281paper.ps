URL: http://www.cs.berkeley.edu/~oza/papers/cs281paper.ps
Refering-URL: http://www.cs.berkeley.edu/~oza/papers.html
Root-URL: 
Email: Email: oza@cs.berkeley.edu  
Title: The Expected Outcome Method in Chess  
Author: Nikunj C. Oza 
Address: Berkeley, CA 94720-1776  
Affiliation: Computer Science Division University of California  
Abstract: In this paper, we examine the use of the expected-outcome model of two-player evaluators with the assumption of random play [AK87] in chess. Unlike the experiments performed in [A88], in our experiments, the expected-outcome is used directly to choose a move rather than to provide data to an evaluation function learner. This reveals some difficulties with the expected-outcome model: prohibitive computational intensity and poor quality of play. We present a variation on the expected-outcome model that uses reasonable play instead of random play. We present experiments showing that the reasonable player requires far less computation and produces a quality of play superior to the random player, making it more suitable for use in learning evaluation functions.
Abstract-found: 1
Intro-found: 1
Reference: [AK87] <author> B. Abramson and R. Korf, </author> <title> A model of two-player evaluation functions, </title> <booktitle> in: Proc. 6th National Conf. on Artificial Intelligence (1987) pp. </booktitle> <pages> 90-94 </pages>
Reference-contexts: They then minimax those scores up to the top of the tree and choose the move with the best score (maximum or minimum depending on the side that the machine is playing). In <ref> [AK87] </ref>, Abramson and Korf describe the expected-outcome model of two-player evaluators. In their model, instead of assuming perfect play when evaluating positions, they assume random play. That is, they sample random games below the nodes at the maximum search depth. <p> It produces better quality play even though it considers many fewer games than the original random player and, therefore, takes much less time to choose moves. In Section 2, we describe the expected-outcome model with the random play assumption briefly (for a more detailed description, see <ref> [AK87] </ref>) and discuss the results obtained through our implementation. In Section 3, we discuss the assumption of reasonable play and the results we obtained by implementing two reasonable players. <p> The expected outcome for each possible move is calculated as a weighted average of the expected outcomes of the nodes below that move in the game tree. The move with the best expected outcome is chosen. More details on the expected-outcome model can be found in <ref> [AK87] </ref>. 2.2 The Implementation and Results We implemented this random player and played a match between it and GNUchess (version 3), a publicly available chess program. Computation time proved to be the most severe limiting factor in our implementation. We were unable to allow any search before calculating expected outcomes. <p> Although sampling a much larger fraction of the games beneath a node may improve the expected outcome calculation and produce a better player <ref> [AK87] </ref>, doing so would make the random player even more computationally prohibitive. Also, most of the calculation performed would be wasteful because many unrealistic lines of play would be considered. <p> Perhaps considering more than one reasonable line of play would lead to better expected-outcome calculations. 6 Acknowledgments The author gratefully acknowledges Stuart Russell for giving pointers to the paper <ref> [AK87] </ref> that led to this research, as well as Tim Huang for his help with GNUchess.
Reference: [A88] <author> B. Abramson, </author> <title> Learning expected-outcome evaluators in chess, </title> <booktitle> in: Proc. AAAI 1988 Spring Symp. Series: Computer Game Playing (1988) pp. </booktitle> <pages> 26-28. </pages>
References-found: 2

