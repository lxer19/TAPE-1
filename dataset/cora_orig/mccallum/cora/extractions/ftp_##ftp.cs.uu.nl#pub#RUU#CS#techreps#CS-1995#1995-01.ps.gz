URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-01.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: hansb@cs.ruu.nl  downey@math.vuw.ac.nz  mfellows@csr.uvic.ca  harold@sanjuan.uvic.ca  
Title: The Parameterized Complexity of Sequence Alignment and Consensus  
Author: Hans L. Bodlaender Rodney G. Downey Michael R. Fellows Harold T. Wareham 
Note: Research partially supported by the ESPRIT Basic Research Actions of the EC under contract 7141 (project ALCOM II).  Research supported in part by a grant from Victoria University IGC, by the United States New Zealand Cooperative Science Foundation under grant INT 90-20558.  Research supported in part by the National Science and Engineering Council of Canada and by the United States National Science Foundation under grant MIP-8919312.  
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands.  P.O. Box 600, Wellington, New Zealand.  Victoria, Victoria, British Columbia V8W 3P6, Canada.  Victoria, Victoria, British Columbia V8W 3P6, Canada.  
Affiliation: Computer Science Department, Utrecht University,  Mathematics Department, Victoria University,  Computer Science Department, University of  Computer Science Department, University of  
Abstract: The Longest common subsequence problem is examined from the point of view of parameterized computational complexity. There are several different ways in which parameters enter the problem, such as the number of sequences to be analyzed, the length of the common subsequence, and the size of the alphabet. Lower bounds on the complexity of this basic problem imply lower bounds on a number of other sequence alignment and consensus problems. At issue in the theory of parameterized complexity is whether a problem which takes input (x; k) can be solved in time f (k) n ff where ff is independent of k (termed fixed-parameter tractability). It can be argued that this is the appropriate asymptotic model of feasible computability for problems for which a small range of parameter values covers important applications | a situation which certainly holds for many problems in biological sequence analysis. Our main results show that: (1) The Longest Common Subsequence (LCS) parameterized by the number of sequences to be analyzed is hard for W [t] for all t. (2) The LCS problem problem, parameterized by the length of the common subsequence, belongs to W [P ] and is hard for W [2]. (3) The LCS problem parameterized both by the number of sequences and the length of the common subsequence, is complete for W [1]. All of the above results are obtained for unrestricted alphabet sizes. For alphabets of a fixed size, problems (2) and (3) are fixed-parameter tractable. We conjecture that (1) remains hard. 
Abstract-found: 1
Intro-found: 1
Reference: [Bae91] <author> R. A. Baeza-Yates. </author> <title> Searching subsequences. </title> <booktitle> Theoretical Computer Science 78 (1991), </booktitle> <pages> 363-376. </pages>
Reference-contexts: the k-unrestricted LCS problem is NP-complete [Mai78], certain of the algorithms for the k = 2 case have been extended to yield algorithms that require O (n (k1) ) time and space, where n is the length of the longest of the k strings (see [IF92] and references; see also <ref> [Bae91] </ref>). In this paper, we analyze the Longest common subsequence problem from the point of view of parameterized complexity theory introduced in [DF92]. The parameterizations of the Longest Common Subsequence problem that we consider are defined as follows.
Reference: [BFH94] <author> H. Bodlaender, M. Fellows and M. Hallett. </author> <title> Beyond NP-completeness for problems of bounded width: hardness for the W hierarchy. </title> <booktitle> Proceedings of the 26th ACM Symposium on the Theory of Computing (1994), </booktitle> <pages> 449-458. 24 </pages>
Reference-contexts: Our theorem for LCS-1, interestingly, provides the starting point for a number of other hardness reductions in parameterized complexity theory, such as the results that Triangulating Colored Graphs, Intervalizing Colored Graphs and Bandwidth are hard for W [t] for all t <ref> [BFH94] </ref>. Theorem 2 LCS-1 is hard for W [t] for all t. Proof. By the results of [DF92] we may take the source instance of the reduction to be a t-normalized expression E and a positive integer k, where t is even and E is monotone.
Reference: [CCDF93] <author> L. Cai, J. Chen, R. Downey and M. Fellows. </author> <title> The parameterized complexity of short computations and factorization. </title> <institution> University of Victoria, </institution> <type> Technical Report, </type> <institution> Department of Computer Science, </institution> <month> July, </month> <year> 1993. </year>
Reference: [DEF93] <author> R. Downey, P. Evans and M. Fellows. </author> <title> Parameterized learning complexity. </title> <booktitle> Proc. Sixth ACM Workshop on Computational Learning Theory (COLT), </booktitle> <pages> pp. 51-57, </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference: [DF92] <author> R. Downey and M. Fellows. </author> <title> Fixed-parameter intractability (extended abstract). </title> <booktitle> In Proceedings of the Seventh Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pp. 36-49, </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1992. </year>
Reference-contexts: In this paper, we analyze the Longest common subsequence problem from the point of view of parameterized complexity theory introduced in <ref> [DF92] </ref>. The parameterizations of the Longest Common Subsequence problem that we consider are defined as follows. Longest common subsequence (LCS-1, LCS-2 and LCS-3) Input: A set of k strings X 1 , ..., X k over an alphabet , and a positive integer m. <p> We designate the class of fixed-parameter tractable problems F P T . The framework above describes a hierarchy of parameterized complexity classes F P T W [1] W [2] W [P ] for which there are many natural hard or complete problems <ref> [DF92] </ref>. For example, all of the following problems are now known to be complete for W [1] : Square tiling, Independent set, Clique, and Bounded post correspondence problem, k-Step derivation for context-sensitive grammars, Vapnik-Chervonenkis dimension, and the k-Step halting problem for nondeterministic Turing machines [CCDF93,DEF93,DFKHW93]. <p> Thus, any one of these problems is fixed-parameter tractable if and only if all of the others are; and none of the problems for which we here prove W hardness results are fixed-parameter tractable unless all of these are also. Dominating set is complete for W [2] <ref> [DF92] </ref>. <p> Theorem 2 LCS-1 is hard for W [t] for all t. Proof. By the results of <ref> [DF92] </ref> we may take the source instance of the reduction to be a t-normalized expression E and a positive integer k, where t is even and E is monotone. Let n denote the number of variables of E.
Reference: [DFKHW93] <author> R. Downey, M. Fellows, B. Kapron, M. Hallett and H.T. Wareham. </author> <title> The parameterized complexity of some problems in logic and linguistics. </title> <booktitle> Proceedings of the Symposium on the Logical Foundations of Computer Science, Springer Verlag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 813 (1994), </volume> <pages> 89-100. </pages>
Reference: [DM93a] <author> W. H. E. Day and F. R. McMorris. </author> <title> Discovering consensus molecular sequences. </title> <editor> In O. Opitz, B. Lausen, and R. Klar (eds.) </editor> <title> Information and Classification Concepts, Methods, </title> <booktitle> and Applications, </booktitle> <pages> pp. 393-402, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference: [DM93b] <author> W. H. E. Day and F. R. McMorris. </author> <title> The computation of consensus patterns in DNA sequences. </title> <booktitle> Mathematical and Computer Modelling 17 (1993), </booktitle> <pages> 49-52. </pages>
Reference-contexts: The LCS problem is shown to be a restriction of the consensus subsequence problem in Section 3 of <ref> [DM93b] </ref>. By the results of this paper, the general multiple sequence alignment (consensus subsequence discovery) problem is W [t]-hard for all t (W [2]-hard), and hence unlikely to be fixed-parameter tractable, when the number of sequences and the cost of the alignment (length of the consensus subsequence) are fixed.
Reference: [Gus93] <author> D. Gusfield. </author> <title> Efficient methods for multiple sequence alignment with guaranteed error bounds. </title> <journal> Bulletin of Mathematical Biology 55 (1993), </journal> <pages> 141-154. </pages>
Reference: [Hir83] <author> D. S. Hirschberg. </author> <title> Recent results on the complexity of common subsequence problems. </title> <editor> In D. Sankoff and J. B. Kruskal (eds.) </editor> <title> Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison, </title> <journal> pp. </journal> <pages> 325-330, </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference: [IF92] <author> R. W. Irving and C. B. Fraser. </author> <title> Two algorithms for the longest common subsequence of three (or more) strings. </title> <editor> In A. Apostolico, M. Crochemore, Z. Galil, and U. Manber (eds.) </editor> <booktitle> Proceedings of the Third Annual Symposium on Combinatorial Pattern Matching, </booktitle> <pages> pp. 214-229, </pages> <booktitle> Lecture Notes in Computer Science no. </booktitle> <volume> 644, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: Though the k-unrestricted LCS problem is NP-complete [Mai78], certain of the algorithms for the k = 2 case have been extended to yield algorithms that require O (n (k1) ) time and space, where n is the length of the longest of the k strings (see <ref> [IF92] </ref> and references; see also [Bae91]). In this paper, we analyze the Longest common subsequence problem from the point of view of parameterized complexity theory introduced in [DF92]. The parameterizations of the Longest Common Subsequence problem that we consider are defined as follows.
Reference: [KS83] <author> J. B. Kruskal and D. Sankoff. </author> <title> An anthology of algorithms and concepts for sequence comparison. </title> <editor> In D. Sankoff and J. B. Kruskal (eds.) </editor> <title> Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison, </title> <journal> pp. </journal> <pages> 265-310, </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference: [LF78] <author> S. Y. Lu and K. S. Fu. </author> <title> A sentence-to-sentence clustering procedure for pattern analysis. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 8 (1978), </journal> <pages> 381-389. 25 </pages>
Reference: [Mai78] <author> D. Maier. </author> <title> The complexity of some problems on subsequences and supersequences. </title> <journal> Journal of the ACM 25 (1978), </journal> <pages> 322-336. </pages>
Reference-contexts: When k = 2, the longest common subsequence is a measure of the similarity of two strings and is thus useful in in molecular biology, pattern recognition, and text compression [San72,LF78,Mai78]. The version of LCS in which the number of strings is unrestricted is also useful in text compression <ref> [Mai78] </ref>, and is a special case of the multiple sequence alignment and consensus subsequence discovery problems in molecular biology [Pev92,DM93a,DM93b]. To date, most research has focused on deriving efficient algorithms for the LCS problem when k = 2 (see [Hir83,IF92] and references). <p> To date, most research has focused on deriving efficient algorithms for the LCS problem when k = 2 (see [Hir83,IF92] and references). Most of these algorithms are based on the dynamic programming approach [PM92], and require quadratic time. Though the k-unrestricted LCS problem is NP-complete <ref> [Mai78] </ref>, certain of the algorithms for the k = 2 case have been extended to yield algorithms that require O (n (k1) ) time and space, where n is the length of the longest of the k strings (see [IF92] and references; see also [Bae91]).
Reference: [PM92] <author> W. R. Pearson and W. Miller. </author> <title> Dynamic programming algorithms for biological sequence comparison. </title> <booktitle> Methods in Enzymology 183 (1992), </booktitle> <pages> 575-601. </pages>
Reference-contexts: To date, most research has focused on deriving efficient algorithms for the LCS problem when k = 2 (see [Hir83,IF92] and references). Most of these algorithms are based on the dynamic programming approach <ref> [PM92] </ref>, and require quadratic time.
Reference: [Pev92] <author> P. A. Pevzner. </author> <title> Multiple alignment, communication cost, and graph matching. </title> <note> SIAM Journal on Applied Mathematics 52 (1992), 1763-1779. </note>
Reference-contexts: This is so because the LCS problem is a special case of each of these problems. The problem of aligning k sequences is often re-stated as that of finding a minimal-cost path between two vertices in a particular type of edge-weighted k-dimensional graph <ref> [Pev92] </ref>. The LCS problem can be stated in this form using the edge-weighting in Section 3 of [Pev92], and is hence a restriction of the multiple sequence alignment problem (albeit, that version of the problem which allows arbitrary alignment evaluation functions). <p> The problem of aligning k sequences is often re-stated as that of finding a minimal-cost path between two vertices in a particular type of edge-weighted k-dimensional graph <ref> [Pev92] </ref>. The LCS problem can be stated in this form using the edge-weighting in Section 3 of [Pev92], and is hence a restriction of the multiple sequence alignment problem (albeit, that version of the problem which allows arbitrary alignment evaluation functions). The LCS problem is shown to be a restriction of the consensus subsequence problem in Section 3 of [DM93b]. <p> are known either to be NP-complete in general, e.g. evolutionary tree estimation by parsimony, character compatibility and distance-matrix fitting criteria (see [War93] and references), or to require time O (n k ) when k is fixed, such as multiple sequence alignment using the SP or evolutionary tree alignment evaluation functions <ref> [Pev92] </ref>. To solve such problems in practice, investigators must often settle for suboptimal solutions obtained by algorithms that are fast but are either approximate or solution-constrained [KS83,San85,Pev92,Gus93,War93].
Reference: [San72] <author> D. Sankoff. </author> <title> Matching comparisons under deletion/insertion constraints. </title> <booktitle> PNAS 69 (1972), </booktitle> <pages> 4-6. </pages>
Reference: [San85] <author> D. Sankoff. </author> <title> Simultaneous solution of the RNA folding, alignment, and protosequence problems. </title> <note> SIAM Journal on Applied Mathematics 45 (1985), 810-825. </note>
Reference: [War93] <author> H. T. Wareham. </author> <title> On the Computational Complexity of Inferring Evolutionary Trees, M.Sc. </title> <type> Thesis, Technical Report no. 9301, </type> <institution> Department of Computer Science, Memorial University of Newfoundland, </institution> <year> 1993. </year> <month> 26 </month>
Reference-contexts: Fixed-parameter complexity analysis may be relevant to many computational problems in biology. Many of these problems are known either to be NP-complete in general, e.g. evolutionary tree estimation by parsimony, character compatibility and distance-matrix fitting criteria (see <ref> [War93] </ref> and references), or to require time O (n k ) when k is fixed, such as multiple sequence alignment using the SP or evolutionary tree alignment evaluation functions [Pev92].
References-found: 19

