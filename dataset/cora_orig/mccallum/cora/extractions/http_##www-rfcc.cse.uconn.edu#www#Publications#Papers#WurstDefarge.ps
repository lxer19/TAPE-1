URL: http://www-rfcc.cse.uconn.edu/www/Publications/Papers/WurstDefarge.ps
Refering-URL: http://www-rfcc.cse.uconn.edu/www/Cookie.html
Root-URL: 
Title: DEFARGE A REAL-TIME EXECUTION MONITOR FOR CASE-BASED PLANNING  
Author: Karl R. Wurst 
Degree: 1986 A Thesis Submitted in Partial Fulfillment of the Requirements for the Degree of Master of Science at  
Date: 1991  
Affiliation: B.S., Central Connecticut State University,  The University of Connecticut  
Abstract-found: 0
Intro-found: 1
Reference: [Abelson and Sussman, 1985] <author> Harold Abelson and Gerald Jay Sussman. </author> <title> Structure and interpretation of computer programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: Notably, this would not be possible using a singly-linked structure with front and end pointers (as in <ref> [Abelson and Sussman, 1985] </ref> Section 3.3.2, for example), since arbitrary deletions would require linear time to traverse to the point of deletion. For the pending queue object, a modified priority queue is used with priorities corresponding to the expected time for the record.
Reference: [Aho et al., 1974] <author> Alfred V. Aho, John E. Hopcroft, and Jeffrey D. </author> <title> Ullmann. The design and analysis of computer algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: The structure used could be called a "random-access adjustable priority queue"|one that supports the necessary functions as well as increasing or decreasing the priority of an arbitrary node. The algorithms are an extension of the algorithms given in <ref> [Aho et al., 1974] </ref>, which support insert and delete-min.
Reference: [Ambros-Ingerson and Steel, 1988] <author> Jose Ambros-Ingerson and Sam Steel. </author> <title> Integrating planning execution and monitoring. </title> <booktitle> In Proceedings of the AAAI-88, </booktitle> <pages> pages 83-88, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: This problem is dealt with using a modified version of reactive-planning. Also notable in the trucker approach is the combination of many kinds of planning, each used where it is strongest. The ipem system <ref> [Ambros-Ingerson and Steel, 1988] </ref>, extends the hierarchical planning model to include monitoring and execution. However, because it is heirarchical model its performance suffers. noah [Sacerdoti, 1977] uses a human agent to execute its plans.
Reference: [Broverman and Croft, 1987] <author> Carol A. Broverman and W. Bruce Croft. </author> <title> Reasoning about exceptions during plan execution monitoring. </title> <booktitle> In Proceedings of the AAAI-87, </booktitle> <pages> pages 190-195, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: However, Firby's system is completely reactive, meaning that it plans only at execution time, doing no advance planning. Broverman and Croft have done some work on reasoning about expectation failures during execution <ref> [Broverman and Croft, 1987] </ref> Their system uses an architecture quite similar to cookie with an exception classifier that determines whether actions are unexpected actions or out-of-order actions before passing them to the replanner.
Reference: [DARPA, 1989] <author> DARPA. </author> <title> Case-based reasoning from DARPA: machine learning program plan. </title> <booktitle> In Proceedings of the DARPA Workshop on Case-Based Reasoning, </booktitle> <pages> pages 1-13, </pages> <address> Pensacola Beach, FL, </address> <year> 1989. </year>
Reference: [Dickens, 1859] <author> Charles Dickens. </author> <title> A Tale of Two Cities. </title> <publisher> Oxford University Press, Oxford, </publisher> <pages> 1859. </pages>
Reference-contexts: In the case of defarge the task is to present the actions and monitor the human cook performing the actions. If all of the actions are performed as expected, the task is 1 Named for the notorious Mme. Defarge, who monitored quite a few executions <ref> [Dickens, 1859] </ref>. 3 simple. However, it is likely that the actions will differ from the expectations, and the planner will have to be invoked to repair the plan to meet these expectation failures.
Reference: [Firby, 1987] <author> R. James Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the AAAI-87, </booktitle> <pages> pages 202-206, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: In addition, chef uses a large amount of domain knowledge in producing and simulating its plans, something that has been consciously avoided in cookie and defarge. Firby's robot planner <ref> [Firby, 1987] </ref> has a structure similar to defarge, using a queue to hold actions, and selecting those actions by temporal deadlines and ordering constraints. However, Firby's system is completely reactive, meaning that it plans only at execution time, doing no advance planning.
Reference: [Georgeff and Lansky, 1987] <author> Michael P. Georgeff and Amy L. Lansky. </author> <title> Reactive reasoning and planning. </title> <booktitle> In Proceedings of the AAAI-87, </booktitle> <pages> pages 677-682, </pages> <address> Seattle, WA, </address> <month> July </month> <year> 1987. </year>
Reference: [Hammond, 1989] <author> Kristian J. Hammond. </author> <title> Case-based planning: Viewing Planning as a memory task. </title> <booktitle> Perspectives in Artificial Intelligence Series, </booktitle> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1989. </year> <pages> 56 57 </pages>
Reference-contexts: This is where the execution monitor comes in. A case-based execution monitor executes 1 2 the prepared plan. This may be done in simulation (as in chef <ref> [Hammond, 1989] </ref>) or actually performed by a human, as is the case in cookie [McCartney, 1990]. In human-based execution, the system must present the actions to the human, and record the performance of those actions. This thesis describes defarge, 1 a real-time execution monitor for the case-based cooking system cookie. <p> This will include allowing more actions to appear on the screen than is possible in the current version. 1 Macintosh is a trademark of Apple Computer, Inc. Chapter 9 Related Work There has been quite a lot of activity recently in monitoring execution in planning systems. chef's simulator <ref> [Hammond, 1989] </ref> executes its cooking plans, but does it completely in simulation. In addition, chef uses a large amount of domain knowledge in producing and simulating its plans, something that has been consciously avoided in cookie and defarge.
Reference: [Marks et al., 1989] <author> Mitchell Marks, Kristian Hammond, and Tim Converse. </author> <title> Planning in an open world: a pluralistic approach. </title> <booktitle> In Proceedings of the 11th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 749-756, </pages> <address> Ann Arbor, MI, </address> <year> 1989. </year>
Reference-contexts: While this may lead to efficiency, the complexity is high, and a lot depends on the procedural encodings. The trucker system <ref> [Marks et al., 1989] </ref> attempts to solve many problems with past planning systems. Most relevant to defarge is their work on solving The Planning/Execution Crowding Problem, i.e. the problem of not depleting execution time with excessive planning time and vice-versa.
Reference: [McCartney, 1990] <author> Robert McCartney. </author> <title> Reasoning directly from cases in a case-based planner. </title> <booktitle> In Proceedings of the 12th annual conference of the Cognitive Science Society, </booktitle> <pages> pages 101-108, </pages> <address> Cambridge, MA, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: This is where the execution monitor comes in. A case-based execution monitor executes 1 2 the prepared plan. This may be done in simulation (as in chef [Hammond, 1989]) or actually performed by a human, as is the case in cookie <ref> [McCartney, 1990] </ref>. In human-based execution, the system must present the actions to the human, and record the performance of those actions. This thesis describes defarge, 1 a real-time execution monitor for the case-based cooking system cookie. <p> The execution of a plan produces an episode to be added to the knowledge base. Plan generation and execution can be considered as mappings: from episode to expected behavior and from actual behavior to episode <ref> [McCartney, 1990] </ref>. defarge performs the task in between, that is, the transformation from expected behavior to actual behavior. The act of executing a plan involves breaking the plan down into actions to be performed, and performing them.
Reference: [McCartney and Sanders, 1990] <author> Robert McCartney and Kathryn E. Sanders. </author> <title> The case for cases: a call for purity in case-based reasoning. </title> <booktitle> In Proceedings of the AAAI Spring Symposium on Case-Based Reasoning, </booktitle> <pages> pages 12-16, </pages> <year> 1990. </year>
Reference: [McCartney and Wurst, 1991] <author> Robert McCartney and Karl R. Wurst. Defarge: </author> <title> a real-time execution monitor for a case-based-planner. </title> <booktitle> In Proceedings of the DARPA Workshop on Case-Based Reasoning, </booktitle> <pages> pages 233-244, </pages> <address> Washington, DC, </address> <year> 1991. </year>
Reference-contexts: Unless this level of utility is reached, the execution portion of the case-based 4 planning process will not be used, and the associated planning system will not be evaluated. <ref> [McCartney and Wurst, 1991] </ref> A primary concern in defarge is efficiency because real-time operation is computationally demanding, especially if execution time plan repairs will be performed. <p> This is accomplished by having efficient algorithms for the internal queues, efficient strategies for display allocation, and a efficient methods for dealing with temporal dependencies. 30 5.4.1 Queue Algorithms The queues are implemented using highly efficient algorithms written by Robert McCartney. The following descriptions are from <ref> [McCartney and Wurst, 1991] </ref>. There are two kinds of structures (referred to as "queues" and "priority queues" ) used internally in queue objects to store sets of action records. For each, required operations can be examined, then we discuss the implementation of each and its performance.
Reference: [Riesbeck and Schank, 1989] <author> Christopher K. Riesbeck and Roger C. Schank. </author> <title> Inside Case-Based Reasoning. </title> <booktitle> Artificial Intelligence Series, </booktitle> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ, </address> <year> 1989. </year>
Reference: [Sacerdoti, 1977] <author> Earl D. Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <booktitle> Artificial Intelligence Series, </booktitle> <publisher> Elsevier North-Holland, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Also notable in the trucker approach is the combination of many kinds of planning, each used where it is strongest. The ipem system [Ambros-Ingerson and Steel, 1988], extends the hierarchical planning model to include monitoring and execution. However, because it is heirarchical model its performance suffers. noah <ref> [Sacerdoti, 1977] </ref> uses a human agent to execute its plans. Its plans are heirarchical, but the capability to remember useful plans exists, adding some learning ability. sipe [Wilkins, 1988] does not monitor execution itself, but can receive information about changes in the world from other agents, and can replan accordingly.
Reference: [Wilkins, 1988] <author> David E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. The MORGAN KAUFMAN Series in Representation and Reasoning, </title> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: However, because it is heirarchical model its performance suffers. noah [Sacerdoti, 1977] uses a human agent to execute its plans. Its plans are heirarchical, but the capability to remember useful plans exists, adding some learning ability. sipe <ref> [Wilkins, 1988] </ref> does not monitor execution itself, but can receive information about changes in the world from other agents, and can replan accordingly.
References-found: 16

