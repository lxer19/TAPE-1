URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-241.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Lattice Frameworks for Multisource and Bidirectional Data Flow Problems  
Author: STEPHEN P. MASTICOLA THOMAS J. MARLOWE BARBARA G. RYDER 
Keyword: Categories and Subject Descriptors: D.3.1 [Programming Languages]: Formal Definitions and Theory; D.3.4 [Programming Languages]: Processors; F.3.2 [Logics and Meanings of Programs]: Semantics of Programming Languages General Terms: Languages Additional Key Words and Phrases: Data flow analysis, lattice frameworks |Program Analysis Tool (PAT) project; |Fortran Maintenance Environments (FME) project; |Program Maintenance Environments (PME) project.  
Address: Hall University  
Affiliation: Siemens Corporate Research  Seton  Rutgers University  
Abstract: Multisource data flow problems involve information which may enter nodes independently through different classes of edges. In some cases, dissimilar meet operations appear to be used for different types of nodes. These problems include bidirectional [MR79; DRZ92] and flow sensitive [Cal88; SL93] problems as well as many static analyses of concurrent programs with synchronization[CS88; DS91; MR93]. K-tuple frameworks, a subset of standard data flow frameworks [MR90; Hec77], provide a natural encoding for multisource problems using a single meet operator. Previously, the solution of these problems has been described as the fixed point of a set of data flow equations. Using our k-tuple representation, we can access the general results of standard data flow frameworks concerning convergence time and solution precision for these problems. We demonstrate this for the bidirectional component of partial redundancy suppression and two problems on the program summary graph. An interesting subclass of k-tuple frameworks, the join-of-meets frameworks, are useful for reachability problems, especially those stemming from analyses of explicitly parallel programs. We give results on function space properties for join-of-meets frameworks that indicate precise solutions for most of them will be difficult to obtain. Authors' addresses: Stephen P. Masticola, Siemens Corporate Research, 755 College Road East, Princeton, NJ 08540 USA. Phone: (609) 734-6594. Email: masticol@scr.siemens.com. Thomas J. Marlowe, Department of Mathematics and Computer Science, Seton Hall University, South Orange, NJ 07079. Email: marlowe@cs.rutgers.edu. Barbara G. Ryder, Department of Computer Science, Rutgers University, Hill Center, Busch Campus, Piscataway, NJ 08855. Email: ryder@cs.rutgers.edu. This research was supported, in part, by National Science Foundation grants CCR90-23628 and CCR92-08632. This work is relevant to data flow analysis research being conducted within the following ongoing projects within the Software Engineering department at Siemens Corporate Research: Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
Abstract-found: 1
Intro-found: 1
Reference: <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference: <author> D. Callahan. </author> <title> The program summary graph and flow-sensitive interprocedural data flow analysis. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 47-56, </pages> <month> June </month> <year> 1988. </year>
Reference: <author> D. Callahan and J. Subhlok. </author> <title> Static analysis of low-level synchronization. </title> <booktitle> In Proceedings of the ACM SIGPLAN and SIGOPS Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 100-111, </pages> <year> 1988. </year>
Reference: <author> E. W. Dijkstra. </author> <title> Co-operating sequential processes. </title> <editor> In F. Genuys, editor, </editor> <booktitle> Programming Languages; NATO Advanced Study Institute, </booktitle> <pages> pages 43-112. </pages> <publisher> Academic Press, </publisher> <address> Lon-don, </address> <year> 1968. </year>
Reference: <author> D. M. Dhamdhere, B. K. Rosen, and F. K. Zadeck. </author> <title> How to analyze large programs efficiently and informatively. </title> <booktitle> In Proceedings of the SIGPLAN '92 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 212-223, </pages> <year> 1992. </year>
Reference: <author> E. Duesterwald and M. L. Soffa. </author> <title> Concurrency analysis in the presence of procedures using a data flow framework. </title> <booktitle> In Proceedings of the ACM SIGSOFT '91 Fourth Symposium on Testing, Analysis, and Verification (TAV4), </booktitle> <pages> pages 36-48, </pages> <month> October </month> <year> 1991. </year>
Reference: <author> D. Grunwald and H. Srinivasan. </author> <title> Data flow equations for explicitly parallel programs. </title> <booktitle> In Proceedings of the Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPOPP), </booktitle> <pages> pages 159-168, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference: <author> S. Graham and M. Wegman. </author> <title> A fast and usually linear algorithm for global flow analysis. </title> <journal> Journal of the ACM, </journal> <volume> 23(1) </volume> <pages> 172-202, </pages> <month> January </month> <year> 1976. </year>
Reference: <author> M. S. Hecht. </author> <title> Flow Analysis of Computer Programs. </title> <publisher> Elsevier North-Holland, </publisher> <year> 1977. </year>
Reference: <author> J. B. Kam and J. D. Ullman. </author> <title> Global flow analysis and iterative algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 23(1) </volume> <pages> 158-171, </pages> <year> 1976. </year>
Reference: <author> D. L. Long and L. A. Clarke. </author> <title> Data flow analysis of concurrent systems that use the rendezvous model of synchronization. </title> <booktitle> In Proceedings of the ACM SIGSOFT '91 Fourth Symposium on Testing, Analysis, and Verification (TAV4), </booktitle> <pages> pages 21-35, </pages> <address> Vancouver, BC, </address> <month> October </month> <year> 1991. </year>
Reference: <author> W. Landi and B. G. Ryder. </author> <title> A safe approximation algorithm for interprocedural pointer aliasing. </title> <booktitle> In Proceedings of the SIGPLAN '92 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 235-248, </pages> <month> June </month> <year> 1992. </year>
Reference: <author> S. P. Masticola. </author> <title> Static detection of deadlocks in polynomial time. </title> <type> PhD thesis, </type> <institution> Rutgers University, </institution> <address> New Brunswick, NJ, </address> <month> April </month> <year> 1993. </year>
Reference: <author> E. Morel and C. </author> <title> Renvoise. Global optimization by suppression of partial redundancies. </title> <journal> Communications of the ACM, </journal> <volume> 22(2) </volume> <pages> 96-103, </pages> <month> February </month> <year> 1979. </year>
Reference: <author> T. J. Marlowe and B. G. Ryder. </author> <title> Properties of data flow frameworks: a unified model. </title> <journal> Acta Informatica, </journal> <volume> 28 </volume> <pages> 121-163, </pages> <year> 1990. </year> <note> 26 Masticola, </note> <author> Marlowe, Ryder S. Masticola and B. G. Ryder. </author> <title> A model of ada programs for static deadlock detection. </title> <booktitle> In Proceedings of 1991 ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <address> Santa Cruz, CA, </address> <pages> pages 91-102, </pages> <month> May </month> <year> 1991. </year> <journal> published as ACM SIGPLAN Notices, </journal> <volume> vol 26, no 12, </volume> <month> December </month> <year> 1991. </year>
Reference: <author> S. P. Masticola and B. G. Ryder. </author> <title> Non-concurrency analysis. </title> <booktitle> In Proceedings of the 4th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 129-138, </pages> <month> May </month> <year> 1993. </year>
Reference: <author> B. G. Ryder and M. C. Paull. </author> <title> Elimination algorithms for data flow analysis. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(3) </volume> <pages> 277-316, </pages> <month> September </month> <year> 1986. </year>
Reference: <author> B. Sloman and T. </author> <title> Lake. Scalar renaming, rescoping and optimising liveness analysis in the presence of pointer induced aliasing and side-effecting expressions. </title> <booktitle> In Proceedings of the Fourth International Workshop on Compilers for Paralel Computers, </booktitle> <month> December </month> <year> 1993. </year>
Reference: <author> R. E. Tarjan. </author> <title> Fast algorithms for solving path problems. </title> <journal> Journal of the ACM, </journal> <volume> 28(3) </volume> <pages> 594-614, </pages> <year> 1981. </year>
Reference: <author> R. E. Tarjan. </author> <title> A unified approach to path problems. </title> <journal> Journal of the ACM, </journal> <volume> 28(3) </volume> <pages> 577-593, </pages> <year> 1981. </year>
Reference: <author> F. K. Zadeck. </author> <title> Incremental Data Flow Analysis in a Structured Program Editor. </title> <type> PhD thesis, </type> <institution> Department of Mathematical Sciences, Rice University, </institution> <year> 1983. </year>
Reference: <author> F. K. Zadeck. </author> <title> Incremental data flow analysis in a structured program editor. </title> <booktitle> In Proceedings of the ACM SIGPLAN '84 Symposium on Compiler Construction, </booktitle> <pages> pages 132-143, </pages> <month> June </month> <year> 1984. </year>
References-found: 22

