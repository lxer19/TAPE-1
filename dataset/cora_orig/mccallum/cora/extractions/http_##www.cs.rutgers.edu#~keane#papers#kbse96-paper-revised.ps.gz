URL: http://www.cs.rutgers.edu/~keane/papers/kbse96-paper-revised.ps.gz
Refering-URL: http://www.cs.rutgers.edu/hpcd/Area_III.1/index.html
Root-URL: 
Email: keane@cs.rutgers.edu  ellman@cs.rutgers.edu  
Title: Knowledge-Based Re-engineering of Legacy Programs for Robustness in Automated Design  
Author: John Keane Thomas Ellman 
Address: New Brunswick, NJ  New Brunswick, NJ  
Affiliation: Department of Computer Science Rutgers University  Department of Computer Science Rutgers University  
Abstract: Systems for automated design optimization of complex real-world objects can, in principle, be constructed by combining domain-independent numerical routines with existing domain-specific analysis and simulation programs. Unfortunately, such legacy analysis codes are frequently unsuitable for use in automated design. They may crash for large classes of input, be numerically unstable or locally non-smooth, or be highly sensitive to control parameters. To be useful, analysis programs must be modified to reduce or eliminate only the undesired behaviors, without altering the desired computation. To do this by direct modification of the programs is labor-intensive, and necessitates costly revalidation. We have implemented a high-level language and run-time environment that allow failure-handling strategies to be incorporated into existing Fortran and C analysis programs while preserving their computational integrity. Our approach relies on globally managing the execution of these programs at the level of discretely callable functions so that the computation is only affected when problems are detected. Problem handling procedures are constructed from a knowledge base of generic problem management strategies. We show that our approach is effective in improving analysis program robustness and design optimization performance in the domain of conceptual design of jet engine nozzles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Boisvert, et. al. </author> <title> GAMS: A framework for the management of scientific software. </title> <journal> ACM Transactions on Mathematical Software, </journal> <pages> pages 313 - 355, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Management of numerical software Several systems have been developed to assist users in selecting the appropriate numerical software from large libraries of subroutines. Systems like SAIVS [11] ODEX-PERT [7] and GAMS <ref> [1] </ref> rely primarily on eliciting information from the user about the problem to be solved to select the correct routines from the knowledge base.
Reference: [2] <author> Y. Chen and N. Warsi. </author> <title> Applying experiences of organiz ing large-scale knowledge bases to industry-sized software reuse. </title> <booktitle> In Working Notes, Third Workshop on AI and Software Engineering: Breaking the Toy Mold. IJCAI, </booktitle> <year> 1995. </year>
Reference-contexts: Our work differs in its focus on, and utilization of knowledge about, problems specific to automated design systems. 11.4. Automated re-engineering and re-use of legacy systems Legacy systems are of considerable interest at present, as evidenced by several papers [10] <ref> [2] </ref> [3] [8] presented on this topic at the 1995 IJCAI workshop on AI and Software Engineering.
Reference: [3] <author> R. Filman. </author> <title> Applying AI to software renovation. </title> <booktitle> In Work ing Notes, Third Workshop on AI and Software Engineering: Breaking the Toy Mold. IJCAI, </booktitle> <year> 1995. </year>
Reference-contexts: Our work differs in its focus on, and utilization of knowledge about, problems specific to automated design systems. 11.4. Automated re-engineering and re-use of legacy systems Legacy systems are of considerable interest at present, as evidenced by several papers [10] [2] <ref> [3] </ref> [8] presented on this topic at the 1995 IJCAI workshop on AI and Software Engineering.
Reference: [4] <author> A. Gelsey and D. Smith. </author> <title> A computational environment for exhaust nozzle design. </title> <booktitle> In Proceedings, Computing in Aerospace 10, </booktitle> <address> San Antonio, TX, </address> <month> Mar. </month> <year> 1995. </year> <note> AIAA. AIAA-95-1016. </note>
Reference-contexts: Our work is quite closely related to other research in automated design taking place at Rutgers University, particularly that of Andrew Gelsey, Don Smith, and Mark Schwabacher <ref> [4] </ref>. In developing our schema, we have drawn on their experiences in developing the Nozzle Design Associate (NDA), and the Modeling and Simulation Associate (MSA), and used them as a basis for generalization. 11.2.
Reference: [5] <author> Hull, et. al. </author> <title> Exception handling in scientific computing. </title> <journal> ACM Transactions on Mathematical Software, </journal> <pages> pages 201 -217, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: ODEX-PERT is significant in that it has additional capabilities to automatically test (by numerical experimentation) the input problem to determine some important characteristics; this requires utilizing exception handling in some cases. A potentially useful proposed set of extensions to scientific programming languages to handle computational exceptions is given in <ref> [5] </ref>. If such exception handler use became widely accepted in numerical software tools, the need for the kind of problem handling system described in this paper might be much reduced. 11.3.
Reference: [6] <author> R. Hull and R. King. </author> <title> Reference architecture for the in telligent integration of information, </title> <month> May </month> <year> 1995. </year> <note> &lt;URL http://isse.gmu.edu/I3 Arch/X0001 0.TitleTOC.html &gt;. </note>
Reference-contexts: If such exception handler use became widely accepted in numerical software tools, the need for the kind of problem handling system described in this paper might be much reduced. 11.3. Software systems architectures The ARPA Intelligent Integration of Information (I 3) Reference Architecture <ref> [6] </ref> is concerned with similar issues in the use of legacy information sources in new contexts. They define a broad 5-level architecture, with five primary families of services: Coordination, Management, Semantic Integration and Transformation, Functional Extensions, and Wrapping.
Reference: [7] <author> Kamel, et. al. </author> <title> ODEXPERT An expert system to select nu merical solvers for initial value ODE sytems. </title> <journal> ACM Transactions on Mathematical Software, </journal> <pages> pages 44 -62, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Management of numerical software Several systems have been developed to assist users in selecting the appropriate numerical software from large libraries of subroutines. Systems like SAIVS [11] ODEX-PERT <ref> [7] </ref> and GAMS [1] rely primarily on eliciting information from the user about the problem to be solved to select the correct routines from the knowledge base.
Reference: [8] <author> J. Keane and T. </author> <title> Ellman. Intelligent dynamic mediators in real-world analysis codes for automated design. </title> <booktitle> In Working Notes, Third Workshop on AI and Software Engineering: Breaking the Toy Mold. IJCAI, </booktitle> <year> 1995. </year>
Reference-contexts: Our work differs in its focus on, and utilization of knowledge about, problems specific to automated design systems. 11.4. Automated re-engineering and re-use of legacy systems Legacy systems are of considerable interest at present, as evidenced by several papers [10] [2] [3] <ref> [8] </ref> presented on this topic at the 1995 IJCAI workshop on AI and Software Engineering.
Reference: [9] <author> C. Lawrence, J. Zhou, and A. </author> <title> Tits. CFSQP version 2.1 (re leased November 1994); Copyright (C) 1993 1994, all rights reserved, </title> <booktitle> 1994. Program. </booktitle>
Reference-contexts: It is constructed around the problem domain-specific simulation programs, Acceleration and EngineModel, and domain independent routines from the Numerical Recipes in C library [15]. The top level of the strategy is the CFSQP constrained sequential quadratic programming optimization routine <ref> [9] </ref>. It calls TakeOffMass as the evaluation function to minimize, and a library routine Jacobian-function-1 to compute numerical gradients. TakeOffMass takes three parameters describing the lengths of the nozzle flaps, a goal mission to simulate, and returns the total fuel mass required to fly the mission.
Reference: [10] <author> M. Lowry. </author> <title> Automating software reuse. </title> <booktitle> In Working Notes, Third Workshop on AI and Software Engineering: Breaking the Toy Mold. IJCAI, </booktitle> <year> 1995. </year>
Reference-contexts: Our work differs in its focus on, and utilization of knowledge about, problems specific to automated design systems. 11.4. Automated re-engineering and re-use of legacy systems Legacy systems are of considerable interest at present, as evidenced by several papers <ref> [10] </ref> [2] [3] [8] presented on this topic at the 1995 IJCAI workshop on AI and Software Engineering.
Reference: [11] <author> M. Lucks and I. Gladwell. </author> <title> Automated selection of mathe matical software. </title> <journal> ACM Transactions on Mathematical Software, </journal> <pages> pages 11 - 34, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Management of numerical software Several systems have been developed to assist users in selecting the appropriate numerical software from large libraries of subroutines. Systems like SAIVS <ref> [11] </ref> ODEX-PERT [7] and GAMS [1] rely primarily on eliciting information from the user about the problem to be solved to select the correct routines from the knowledge base.
Reference: [12] <author> L. Miller and A. Quilici. </author> <title> A knowledge-based approach to encouraging reuse of simulation and modeling programs. </title> <booktitle> In Proceedings, 4th International Conference on Software Engineering and Knowledge Engineering. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: We also claim that our approach is scalable to a real industry application. A system that used a knowledge base to automate wrapping of legacy programs was described in <ref> [12] </ref>. This system was primarily concerned with handling interface problems with the legacy routines, and making it easier for users to employ legacy simulation programs for new purposes. The system did not specifically address issues of handling failure in the legacy codes. 12.
Reference: [13] <author> N. Minsky. </author> <title> Law-governed systems. </title> <booktitle> Software Engineering, </booktitle> <pages> pages 285 - 302, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Our work appears to be an instance of the class of Wrapping Services, involving mediation. The I 3 architecture provides us with a useful reference framework for placing our work in relation to other efforts in the field. Naftaly Minsky has originated the concept of Law-governed Systems <ref> [13] </ref>, where global rules can constrain the interactions between components of a system. There are many philosophical similarities in in our ideas, including using non-local information in controlling module interactions, and imposing controls by means of an external execution framework.
Reference: [14] <author> M. F. Orelup, J. R. Dixon, P. R. Cohen, and M. K. Sim mons. Dominic II: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: It includes the ability to bring in external code as part of an analysis program, and a framework for execution that provides some exception-handling. Our work provides a more robust and general approach to the problem of recognizing and handling exceptions in analysis codes. The DOMINIC II system <ref> [14] </ref> is a design system that applies a strategy of using multiple optimization methods to obtain robust optimization. Schema can be similarly applied at the level of the optimizer function in an design system, but are general enough to be applied to other classes of function.
Reference: [15] <author> W. Press, B. Flannery, S. Teukolsky, and W. Vetterling. </author> <title> Nu merical Recipes in C, 2d ed. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1986. </year>
Reference-contexts: Problem The calling structure of an optimization strategy for this problem is shown (in somewhat simplified form) in Figure 2. It is constructed around the problem domain-specific simulation programs, Acceleration and EngineModel, and domain independent routines from the Numerical Recipes in C library <ref> [15] </ref>. The top level of the strategy is the CFSQP constrained sequential quadratic programming optimization routine [9]. It calls TakeOffMass as the evaluation function to minimize, and a library routine Jacobian-function-1 to compute numerical gradients.
Reference: [16] <author> S. S. Tong. </author> <title> Coupling symbolic manipulation and numeri cal simulation for complex engineering designs. </title> <booktitle> In International Association of Mathematics and Computers in Simulation Conference on Expert Systems for Numerical Computing, </booktitle> <institution> Purdue University, </institution> <year> 1988. </year>
Reference-contexts: If presented with an opportunity to develop a new design optimization system based on an existing legacy simulation program, we would ourselves choose to use the system, particularly if implementation time were a consideration. 11. Related work 11.1. AI systems for optimizing design The ENGINEOUS system <ref> [16] </ref> is a system for assisting design engineers in real-world scale problems that was developed for General Electric. It includes the ability to bring in external code as part of an analysis program, and a framework for execution that provides some exception-handling.
References-found: 16

