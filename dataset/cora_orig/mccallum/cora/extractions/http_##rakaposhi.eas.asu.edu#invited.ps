URL: http://rakaposhi.eas.asu.edu/invited.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: rao@asu.edu  
Title: Refinement Planning: Status and Prospectus  
Author: Subbarao Kambhampati 
Address: Tempe, AZ 85287,  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: Most current-day AI planning systems operate by iteratively refining a partial plan until it meets the goal requirements. In the past five years, significant progress has been made in our understanding of the spectrum and capabilities of such refinement planners. In this talk, I will summarize this understanding in terms of a unified framework for refinement planning and discuss several current research directions. 
Abstract-found: 1
Intro-found: 1
Reference: [ 1 ] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 67, No. 1, </volume> <year> 1994. </year>
Reference-contexts: For example, it is known that the plan-space refinements can be more efficient compared to state-space refinements in domains where the ordering of steps cannot be guessed with reasonable accuracy a priori <ref> [ 1; 16 ] </ref> .
Reference: [ 2 ] <author> F. Bachus and F. Kabanza. </author> <title> Using Temporal Logic to Control Search in a forward chaining planner. </title> <booktitle> In Proc European Planning Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: On the other hand, state-space refinements provide a good sense of the state of the world corresponding to the partial plan, and can thus be useful to agents who need to do non-trivial reasoning about the world state to focus their planning and execution efforts <ref> [ 2; 14 ] </ref> . Finally, task-reduction refinements facilitate user control of planner's access to the primitive actions, and are thus the method of choice in any domain where the user has preferences among the solution plans [ 9 ] .
Reference: [ 3 ] <author> A. Blum and M. Furst. </author> <title> Fast planning throug planning graph analysis. </title> <booktitle> In Proc. IJCAI-95, </booktitle> <year> 1995. </year>
Reference-contexts: The conventional wisdom in refinement planning has been to keep the solution construction function tractable by pushing the complexity into the search space [ 8 ] . Some recent work by Blum and Furst <ref> [ 3 ] </ref> shows that partial plan representations that push all the complexity into the solution construction function may actu refinement planner using progression refinement. To the right is the partial plan representation, called plan graph, used in Graphplan [ 3 ] . <p> Some recent work by Blum and Furst <ref> [ 3 ] </ref> shows that partial plan representations that push all the complexity into the solution construction function may actu refinement planner using progression refinement. To the right is the partial plan representation, called plan graph, used in Graphplan [ 3 ] . Each candidate plan of the plan graph must have some subset of the actions in i th level coming immediately before some subset of actions in the i + 1 th level (for all i). <p> In CSP problems [ 18 ] , refinement is used hand-in-hand with local consistency enforcement through constraint propagation to improve search performance. Although most refinement planning systems ignored the use of constraint propagation in planning, the situation is changing slowly. In addition to Graphplan <ref> [ 3 ] </ref> , which uses the constraint propagation process in both the partial plan construction, and solution construction phase, there are also systems such as Descartes [ 6 ] , which attempt to incorporate constraint propagation techniques directly into existing refinement planners.
Reference: [ 4 ] <author> K. Currie and A. Tate. O-Plan: </author> <title> The open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1):49--86, </volume> <year> 1991. </year>
Reference-contexts: The plan-space refinements also allow separation of action selection and establishment phases from the ``scheduling'' phase of the planning, thus facilitating easier adaptation of the plan to more situations [ 7 ] , and to more closely integrate the planning and scheduling phases <ref> [ 4 ] </ref> .
Reference: [ 5 ] <author> R. Fikes and N. Nilsson. </author> <title> Strips: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2:189--208, </volume> <year> 1971. </year>
Reference: [ 6 ] <author> D. Joslin and M. Pollack. </author> <title> Passive and active decision postponement in plan generation. </title> <booktitle> In Proc. 3rd European Workshop on Planning, </booktitle> <year> 1995. </year>
Reference-contexts: Although most refinement planning systems ignored the use of constraint propagation in planning, the situation is changing slowly. In addition to Graphplan [ 3 ] , which uses the constraint propagation process in both the partial plan construction, and solution construction phase, there are also systems such as Descartes <ref> [ 6 ] </ref> , which attempt to incorporate constraint propagation techniques directly into existing refinement planners.
Reference: [ 7 ] <author> L. Ihrig and S. Kambhampati. </author> <title> Derivational replay for partial order planning. </title> <booktitle> In Proc. AAAI-94. </booktitle>
Reference-contexts: The plan-space refinements also allow separation of action selection and establishment phases from the ``scheduling'' phase of the planning, thus facilitating easier adaptation of the plan to more situations <ref> [ 7 ] </ref> , and to more closely integrate the planning and scheduling phases [ 4 ] .
Reference: [ 8 ] <author> S. Kambhampati, C. Knoblock, and Q. Yang. </author> <title> Refinement search as a unifying framework for evaluating design tradeoffs in partial order planning. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 76(1-2), </pages> <year> 1995. </year>
Reference-contexts: Semantic picture of Refinement Planning Refinement planners <ref> [ 8 ] </ref> attempt to solve a planning problem by navigating the space of sets of potential solutions (action sequences). The potential solution sets are represented and manipulated in the form of ``partial plans.'' Syntactically, a partial plan can be seen as a set of constraints (see below). <p> The set of such action sequences is called the set of candidates (or candidate set) of the partial plan. We define a generic refinement planning procedure, Refine (), as follows <ref> [ 8 ] </ref> . 1. If an action sequence hff 1 ; ff 2 ; : : : ; ff n i is a candidate of and also solves the planning problem, terminate and return the action sequence. 2. <p> We shall see later that the solution constructor function checks only on the minimal candidates of the plan, since the candidate set of a partial plan can be infinitely large <ref> [ 8 ] </ref> . The second step is closely related to the first, and attempts to prune the plan from further refinement if it can be shown not to contain any solutions. <p> This last option, called confrontation, can be carried out by posting :P as a (secondary) precondition of Step 1. Depending on whether protection strategies are used, and what tractability refinements are used, we can get a very large spectrum of plan-space refinements <ref> [ 8 ] </ref> . The effectiveness of plan space refinement in controlling the search is determined by a variety of factors, including (a) the order in which the various preconditions are selected for establishment (b) the manner in which tractability refinements are applied during search. See [ 8 ] for a <p> spectrum of plan-space refinements <ref> [ 8 ] </ref> . The effectiveness of plan space refinement in controlling the search is determined by a variety of factors, including (a) the order in which the various preconditions are selected for establishment (b) the manner in which tractability refinements are applied during search. See [ 8 ] for a discussion of some of the trade-offs. <p> By doing this, we can allow a single partial plan to stand for a larger number of minimal candidates. The conventional wisdom in refinement planning has been to keep the solution construction function tractable by pushing the complexity into the search space <ref> [ 8 ] </ref> . Some recent work by Blum and Furst [ 3 ] shows that partial plan representations that push all the complexity into the solution construction function may actu refinement planner using progression refinement.
Reference: [ 9 ] <author> S. Kambhampati. </author> <title> A comparative analysis of partial-order planning and task-reduction planning. </title> <journal> ACM SIGART Bulletin, </journal> <volume> 6(1), </volume> <year> 1995. </year>
Reference-contexts: Finally, task-reduction refinements facilitate user control of planner's access to the primitive actions, and are thus the method of choice in any domain where the user has preferences among the solution plans <ref> [ 9 ] </ref> . Prospectus Although early refinement planning systems tended to subscribe exclusively to a single refinement strategy, our unifying treatment of refinement planning demonstrates that it is possible to use multiple refinement strategies.
Reference: [ 10 ] <author> S. Kambhampati and B. Srivastava. </author> <title> Universal Classical Planner: An algorithm for unifying state space and plan space approaches. </title> <booktitle> In Proc European Planning Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: Finally, if the operator ff 4 is a non-primitive operator, we can also use task reduction refinement to replace ff 4 with its reduction schema. There is some evidence that planners using multiple refinement strategies intelligently can outperform those using single refinement strategies <ref> [ 10 ] </ref> . However, the question as to which refinement strategy should be preferred when is still largely open. We can be even more ambitious however. Most existing refinement planners have trouble scaling up to larger problems, because of the very large search spaces they generate.
Reference: [ 11 ] <author> S. Kambhampati. </author> <title> Planning Methods in AI (Notes from ASU Planning Seminar). </title> <type> ASU CSE TR 96-004. </type> <note> http://rakaposhi.eas.asu.edu:8001/yochan.html </note>
Reference-contexts: They describe a system called Graphplan in which the partial plan representation, called plan graph, corresponds to a disjunctive representation of the search space of a progression planner (see Figure 5) <ref> [ 11 ] </ref> . The Graphplan refinement process (i.e., the process of growing the plan-graph) does not introduce any branching into the search space. Thus, all the complexity is transferred to the solution construction process which has to search the plan graph structure for minimal candidates that are solutions.
Reference: [ 12 ] <author> H. Kautz and B. Selman. </author> <title> Pushing the Envelope: Planning, Propositional Logic, and Stochastic Search In Proc. </title> <booktitle> AAAI-96. </booktitle>
Reference-contexts: Solution construction process can also be represented as an instance of propositional satisfiability problem, and there is some recent evidence <ref> [ 12 ] </ref> that nonsystematic search techniques such as GSAT can give very good performance on such SAT instances. Summary In this talk, I described the current state of refinement planning algorithms using a unified framework for refinement plan ning.
Reference: [ 13 ] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: Finally, we can protect the establishment of precondition Q by adding the constraint 3 Q 2. If we also want to ensure that 3 remains the sole establisher of Q in the final solution, we can add another auxiliary constraint 3 :Q In <ref> [ 13 ] </ref> , McAllester shows that adding these two auxiliary constraints ensures systematicity of plan-space refinement. Tractability Refinements: Since the position of the steps reduced to obtain a new partial plan shown on the right.
Reference: [ 14 ] <author> D. McDermott. </author> <title> A heuristic estimator for means-ends analysis in planning. </title> <booktitle> In Proc. </booktitle> <address> AIPS-96, </address> <year> 1996. </year>
Reference-contexts: This type of recursive analysis can be continued to find the set of relevant operators, and focus progression refinement <ref> [ 14 ] </ref> . We can also define a refinement strategy based on regression, which involves regressing the tail state of a plan through an operator. <p> On the other hand, state-space refinements provide a good sense of the state of the world corresponding to the partial plan, and can thus be useful to agents who need to do non-trivial reasoning about the world state to focus their planning and execution efforts <ref> [ 2; 14 ] </ref> . Finally, task-reduction refinements facilitate user control of planner's access to the primitive actions, and are thus the method of choice in any domain where the user has preferences among the solution plans [ 9 ] .
Reference: [ 15 ] <author> Steve Minton, </author> <title> editor. Machine Learning Methods for Planning and Scheduling. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: We can be even more ambitious however. Most existing refinement planners have trouble scaling up to larger problems, because of the very large search spaces they generate. While application of machine learning techniques to planning <ref> [ 15 ] </ref> hold a significant promise, we can also do better by improving the planning algorithms. One way of controlling the search space blow-up is to introduce appropriate forms of disjunction into the partial plan representation.
Reference: [ 16 ] <author> S. Minton, J. Bresina and M. Drummond. </author> <title> Total Order and Partial Order Planning: a comparative analysis. </title> <note> Journal of Artificial Intelligence Research 2 (1994) 227-262. </note>
Reference-contexts: For example, it is known that the plan-space refinements can be more efficient compared to state-space refinements in domains where the ordering of steps cannot be guessed with reasonable accuracy a priori <ref> [ 1; 16 ] </ref> .
Reference: [ 17 ] <author> E.P.D. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <booktitle> Computational Intelligence, </booktitle> <address> 4(4):356--372, </address> <year> 1988. </year>
Reference-contexts: If the preconditions are not satisfied, then there is no change in state. Several syntactic extensions can be added on top of this basic operator representation, facilitating conditional effects and effects quantified over finite universes. Pednault <ref> [ 17 ] </ref> shows that this action representation is semantically equivalent to the largest subset of situation calculus for which we can get by without writing frame axioms explicitly. Goals are represented as state-variable assignments that assign values to subsets of the set of all state variables. <p> This can be done by posting R as a precondition of Step 3. Since R is not a normal precondition of ff 3 , and is being posted only to guarantee one of its conditional effects, it is called a secondary precondition <ref> [ 17 ] </ref> . Finally, we can protect the establishment of precondition Q by adding the constraint 3 Q 2.
Reference: [ 18 ] <author> E. Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press, </publisher> <address> San Diego, California, </address> <year> 1993. </year>
Reference-contexts: One of the tricks in increasing least commitment without worsening the overall performance significantly seems to be to use constraint propagation techniques to enforce local consistency among the partial plan constraints. In CSP problems <ref> [ 18 ] </ref> , refinement is used hand-in-hand with local consistency enforcement through constraint propagation to improve search performance. Although most refinement planning systems ignored the use of constraint propagation in planning, the situation is changing slowly.
Reference: [ 19 ] <author> D.E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [ 20 ] <editor> M. Zweben and M.S. Fox, editors. </editor> <title> Intelligent Scheduling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, California, </address> <year> 1994. </year>
Reference-contexts: The output or solution is one or more courses of action that satisfy the specified requirements for performance. A planning problem thus involves deciding ``what'' actions to do, and ``when'' to do them. The ``when'' part of the problem has traditionally been called the ``scheduling'' problem <ref> [ 20 ] </ref> . The simplest case of the planning problem, where the environment is static and deterministic, and the planner has complete information about the current state of the world, has come to be known as the classical planning problem.
References-found: 20

