URL: ftp://ftp.cs.indiana.edu/pub/sdiwan/hpdc-paper.ps.gz
Refering-URL: http://www.cs.indiana.edu/hyplan/sdiwan.html
Root-URL: http://www.cs.indiana.edu
Email: f sdiwan, gannong @cs.indiana.edu  
Title: Adaptive Utilization of Communication and Computational Resources in High-Performance Distributed Systems: The EMOP Approach  
Author: Shridhar Diwan, Dennis Gannon 
Address: Bloomington, IN 47401  
Affiliation: Department of Computer Science Indiana University  
Abstract: Development of high-performance distributed applications can be extremely challenging because of their complex runtime environment coupled with their requirement of high-performance. Such applications typically run on a set of heterogeneous machines with dynamically varying loads, connected by heterogeneous networks possibly supporting a wide variety of communication protocols. In spite of the size and complexity of such applications, they must provide the required high-performance mandated by their users. In order to achieve this goal, they need to adaptively utilize their computational and communication resources. This paper describes EMOP, a programming environment for building high-performance distributed systems. EMOP is designed on the lines of CORBA and uses an Object Request Broker (ORB) to support seamless communication between distributed application components. In order to provide adaptive utilization of communication resources, it uses the principle of Open Implementation to open up the communication mechanisms of its ORB. By virtue of its open architecture, the ORB supports multiple, possibly custom, communication protocols, along with automatic and user controlled protocol selection at run-time. In order to support adaptive utilization of computational resources, EMOP also provides a flexible and powerful set of load-balancing mechanisms that can be used to implement custom load-balancing strategies. This paper describes EMOP's Open ORB architecture and load balancing mechanisms, and uses a set of simple experiments to demonstrate 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Arabe, A. Beguelin, B. Lowekamp, E. Seligman, M. Starkey, and P. Stephan. Dome: </author> <title> Parallel programming in a heterogeneous multi-user environment. </title> <type> Technical Report CMU-CS-95-13730786, </type> <institution> Computer Science Dept., Carnegie Mellon University, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Many dynamic load balancing techniques have been proposed in the literature <ref> [3, 17, 1] </ref>. It has also been observed that different schemes are best for different applications under varying program and system parameters [17]. Hence, the LSA needs to implement customized load-balancing schemes to attain good performance. <p> Our focus is to experiment with the network heterogeneity and load-balancing aspects of such environments. EMOP could be used as a substrate for developing such environments. In the area of load-balancing, many systems provide pre-cooked load-balancing schemes [3]. For example, Dome <ref> [1] </ref> implements a global central and local distributed scheme. These approaches may not be suitable for high-performance distributed applications, as these applications need customized schemes to achieve high-performance. 6. Current Status and Future Work EMOP is implemented for C++ and partially for Java.
Reference: [2] <author> H. Bal, J. Steiner, and A. Tanenbaum. </author> <title> Programming languages for distributed computing systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3):261322, </volume> <year> 1989. </year>
Reference-contexts: Similar schemes could be implemented using Pseudo Migration and DOI. on Proxy Server Duality. 5. Related Work The traditional way to support network heterogeneity has been to hide it under the communication subsystem <ref> [2, 14, 13] </ref>; e.g. CORBA supports such heterogeneity by providing a uniform user-level interface rather than exploiting and exposing the heterogeneous nature of the underlying communication substrate. Nexus 4.0 communication library [7] allows multiple communication methods, with either automatic or user-specified selection criteria.
Reference: [3] <author> R. Blumofe and D. Park. </author> <title> Scheduling large scale parallel computations on NOWs. </title> <booktitle> In Proceedings of the Third International Symposium on HPDC, </booktitle> <pages> pages 96105, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: Many dynamic load balancing techniques have been proposed in the literature <ref> [3, 17, 1] </ref>. It has also been observed that different schemes are best for different applications under varying program and system parameters [17]. Hence, the LSA needs to implement customized load-balancing schemes to attain good performance. <p> Our focus is to experiment with the network heterogeneity and load-balancing aspects of such environments. EMOP could be used as a substrate for developing such environments. In the area of load-balancing, many systems provide pre-cooked load-balancing schemes <ref> [3] </ref>. For example, Dome [1] implements a global central and local distributed scheme. These approaches may not be suitable for high-performance distributed applications, as these applications need customized schemes to achieve high-performance. 6. Current Status and Future Work EMOP is implemented for C++ and partially for Java.
Reference: [4] <author> F. Breg, S. Diwan, J. Villacis, J. Balasubramanian, E. Ak-man, and D. Gannon. </author> <title> Java RMI Performance and Object Model Interoperability: Experiments with Java/HPC++ Distributed Components. </title> <booktitle> In Proceedings of ACM 1998 Workshop on Java for High-Performance Network Computing, </booktitle> <pages> pages 91 100, </pages> <month> Feb </month> <year> 1998. </year>
Reference-contexts: It also provides a Java RMI [16] based meta-class for communication between Java and HPC++ objects. The Java RMI meta-class also addresses Java - HPC++ object model inter-operability issues such as mapping exceptions from one model to another <ref> [4] </ref>. A version of the LSA system has been implemented on top of Open HPC++. This LSA implementation currently utilizes the communication adaptivity features of Open HPC++. Future development of EMOP will continue through the work on Open HPC++.
Reference: [5] <author> K. Dincer and G. Fox. </author> <title> Building a world-wide virtual machine based on web and HPCC technologies. </title> <booktitle> In Proceedings of Supercomputing, </booktitle> <month> November </month> <year> 1996. </year> <note> http://www.supercomp.org/sc96/ proceedings/ SC96PROC/ TOCPROC.HTM. </note>
Reference-contexts: Many meta-computing environments such as Legion [11], Globus [6] or WWVM <ref> [5] </ref> have been implemented for the development of heterogeneous, distributed, high-performance applications. Although EMOP can be considered as a meta-computing environment, we are not trying to provide a complete meta-computing environment. Our focus is to experiment with the network heterogeneity and load-balancing aspects of such environments.
Reference: [6] <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <booktitle> The International Journal of Supercomputing Applications and High Performance Computing, </booktitle> <address> 11(2):115128, </address> <month> Summer </month> <year> 1997. </year>
Reference-contexts: For example, it is possible to implement a meta-class for the CORBA IIOP protocol [14] to communicate with CORBA objects, or even a DCOM [15] based meta-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion [11], Globus <ref> [6] </ref> or WWVM [5] have been implemented for the development of heterogeneous, distributed, high-performance applications. Although EMOP can be considered as a meta-computing environment, we are not trying to provide a complete meta-computing environment. Our focus is to experiment with the network heterogeneity and load-balancing aspects of such environments.
Reference: [7] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> Multimethod communication for high-performance metacomputing applications. </title> <booktitle> In Proceedings of Supercomputing, </booktitle> <month> November </month> <year> 1996. </year> <note> http://www.supercomp.org/sc96/ proceedings/ SC96PROC/ TOCPROC.HTM. </note>
Reference-contexts: Related Work The traditional way to support network heterogeneity has been to hide it under the communication subsystem [2, 14, 13]; e.g. CORBA supports such heterogeneity by providing a uniform user-level interface rather than exploiting and exposing the heterogeneous nature of the underlying communication substrate. Nexus 4.0 communication library <ref> [7] </ref> allows multiple communication methods, with either automatic or user-specified selection criteria. But unlike EMOP, it is not directly suitable for use at the application level because of the low-level nature of the facilities.
Reference: [8] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The nexus approach to integrating multithreading and communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 37:7082, </volume> <year> 1996. </year>
Reference-contexts: These meta-classes are based on the Nexus 3.0 <ref> [8] </ref> communication library and provide support for communication over Ethernet and ATM networks. 3. Meta-Object Pool (mpool): An mpool is a repository of meta-objects. Just like in an OR, the meta-objects in an mpool are arranged in order of preference.
Reference: [9] <author> D. Gannon, P. Beckman, E. Johnson, and T. Green. </author> <title> Compilation Issues on Distributed Memory Systems, chapter 3: HPC++ and the HPC++Lib Toolkit. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: It currently provides meta-classes based on the Nexus 3.0 run-time system that can be used to communicate using TCP/IP over either Ethernet or ATM. The work on EMOP has been followed by the development of Open HPC++, an implementation of High Performance C++ (HPC++) <ref> [9] </ref> using the principles of EMOP (HPC++ is a C++ library and language extension framework that is being developed by the HPC++ consortium as a standard model for portable parallel and distributed C++ programming). Open HPC++ provide Nexus and shared memory based meta-classes for communication between HPC++ objects.
Reference: [10] <author> D. Gannon, R. Bramley, T. Stuckey, J. Villacis, J. Balasub-ramanian, E. Akman, F. Breg, S. Diwan, and M. Govin-daraju. </author> <title> Component architectures for distributed scientific problem solving. </title> <journal> IEEE Computational Science and Engineering, </journal> <volume> 5(2), </volume> <year> 1998. </year>
Reference-contexts: The machines are in turn connected by a set of heterogeneous networks comprising of LANs, WANs, high-performance custom networks or a combination of these. Consider for example an application such as the Linear System Analyzer (LSA) <ref> [10] </ref>. LSA is a high-performance distributed system used to build fast prototypes for linear system analyzers. Programming the LSA consists of using the LSA GUI to select application components from a toolbox of matrix analysis modules, re-ordering and preconditioning methods, and direct and iterative solvers.
Reference: [11] <author> A. Grimshaw, W. Wulf, J. French, A. Weaver, and P. Reynolds, Jr. </author> <title> A Synopsis of the Legion Project. </title> <type> Technical Report CS-94-20, </type> <institution> Department of Computer Science, University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: For example, it is possible to implement a meta-class for the CORBA IIOP protocol [14] to communicate with CORBA objects, or even a DCOM [15] based meta-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion <ref> [11] </ref>, Globus [6] or WWVM [5] have been implemented for the development of heterogeneous, distributed, high-performance applications. Although EMOP can be considered as a meta-computing environment, we are not trying to provide a complete meta-computing environment.
Reference: [12] <author> G. Kiczales. </author> <title> Open implementation home page, </title> <month> May </month> <year> 1997. </year> <note> http://www.parc.xerox.com/spl/projects/oi/. </note>
Reference-contexts: But unlike the CORBA ORB, the EMOP ORB does not completely hide its communication mechanism from its applications. It uses the principle of Open Implementation <ref> [12] </ref> to let its applications (or high-level systems such as the LSA) control its critical communication protocol decisions without getting them involved in the details of the communication mechanism. EMOP supports multiple, possible user defined (custom), communication protocols with automatic and user controlled protocol selection at run-time.
Reference: [13] <author> D. Notkin, A. Black, E. Lazowska, H. Levy, J. Sanislo, and J. Zahorjan. </author> <title> Interconnecting heterogeneous computer systems. </title> <journal> Communications of the ACM, </journal> <volume> 31(3):259273, </volume> <year> 1988. </year>
Reference-contexts: Similar schemes could be implemented using Pseudo Migration and DOI. on Proxy Server Duality. 5. Related Work The traditional way to support network heterogeneity has been to hide it under the communication subsystem <ref> [2, 14, 13] </ref>; e.g. CORBA supports such heterogeneity by providing a uniform user-level interface rather than exploiting and exposing the heterogeneous nature of the underlying communication substrate. Nexus 4.0 communication library [7] allows multiple communication methods, with either automatic or user-specified selection criteria.
Reference: [14] <institution> Object Management Group. CORBA/IIOP 2.2 Specification, </institution> <month> February </month> <year> 1998. </year>
Reference-contexts: Hence, the LSA needs to implement customized load-balancing schemes to attain good performance. In this paper we describe our initial experiments with EMOP, a programming environment for building high-performance distributed systems such as the LSA. EMOP is modeled on the lines of CORBA <ref> [14] </ref> to implement seamless communication between distributed heterogeneous components. Like CORBA, it provides inter-operability between communicating components by specifying their interfaces in a meta-language, the Interface Definition Language (IDL), which is translated into the language of interacting components by a stub compiler. <p> Similar schemes could be implemented using Pseudo Migration and DOI. on Proxy Server Duality. 5. Related Work The traditional way to support network heterogeneity has been to hide it under the communication subsystem <ref> [2, 14, 13] </ref>; e.g. CORBA supports such heterogeneity by providing a uniform user-level interface rather than exploiting and exposing the heterogeneous nature of the underlying communication substrate. Nexus 4.0 communication library [7] allows multiple communication methods, with either automatic or user-specified selection criteria. <p> Also, as EMOP's open implementation is built at the application level, it can switch not only between low-level communication protocols, but also between complete communication systems at run-time. For example, it is possible to implement a meta-class for the CORBA IIOP protocol <ref> [14] </ref> to communicate with CORBA objects, or even a DCOM [15] based meta-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion [11], Globus [6] or WWVM [5] have been implemented for the development of heterogeneous, distributed, high-performance applications. <p> A version of the LSA system has been implemented on top of Open HPC++. This LSA implementation currently utilizes the communication adaptivity features of Open HPC++. Future development of EMOP will continue through the work on Open HPC++. We are thinking about the possibility of implementing an IIOP <ref> [14] </ref> meta-class to support communication with CORBA objects. The concepts and mechanisms developed will be tested through the LSA application. 7.
Reference: [15] <author> R. </author> <title> Sessions. COM and DCOM: Microsoft's Vision for Distributed Objects. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, </address> <year> 1997. </year>
Reference-contexts: For example, it is possible to implement a meta-class for the CORBA IIOP protocol [14] to communicate with CORBA objects, or even a DCOM <ref> [15] </ref> based meta-class for communication with (and between) objects distributed across a cluster of NT workstations. Many meta-computing environments such as Legion [11], Globus [6] or WWVM [5] have been implemented for the development of heterogeneous, distributed, high-performance applications.
Reference: [16] <author> Sun Microsystems. </author> <title> Java RMI Home Page, </title> <month> March </month> <year> 1998. </year> <note> http://java.sun.com/products/jdk/rmi/index.html. </note>
Reference-contexts: The EMOP Registry allows application components to register and look up server objects. (The EMOP Registry is similar in functionality to the Java RMI Registry <ref> [16] </ref>) EMOP application components use a registry interface to communicate with the Registry. Most of the registry interface functions take an mpool as an optional argument which is used to determine the communication protocols available to the operation. <p> Open HPC++ provide Nexus and shared memory based meta-classes for communication between HPC++ objects. It also provides a Java RMI <ref> [16] </ref> based meta-class for communication between Java and HPC++ objects. The Java RMI meta-class also addresses Java - HPC++ object model inter-operability issues such as mapping exceptions from one model to another [4]. A version of the LSA system has been implemented on top of Open HPC++.
Reference: [17] <author> M. Zaki, W. Li, and S. Parthasarathy. </author> <title> Customized dynamic load balancing for NOW. </title> <type> Technical Report TR602, </type> <institution> Computer Science Dept., University of Rochester, </institution> <month> Decem-ber </month> <year> 1995. </year>
Reference-contexts: Many dynamic load balancing techniques have been proposed in the literature <ref> [3, 17, 1] </ref>. It has also been observed that different schemes are best for different applications under varying program and system parameters [17]. Hence, the LSA needs to implement customized load-balancing schemes to attain good performance. <p> Many dynamic load balancing techniques have been proposed in the literature [3, 17, 1]. It has also been observed that different schemes are best for different applications under varying program and system parameters <ref> [17] </ref>. Hence, the LSA needs to implement customized load-balancing schemes to attain good performance. In this paper we describe our initial experiments with EMOP, a programming environment for building high-performance distributed systems such as the LSA.
References-found: 17

