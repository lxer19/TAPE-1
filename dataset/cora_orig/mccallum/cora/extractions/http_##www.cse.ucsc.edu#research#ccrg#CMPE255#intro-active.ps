URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/intro-active.ps
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/
Root-URL: http://www.cse.ucsc.edu
Title: A Survey of Active Network Research  
Author: David L. Tennenhouse, Jonathan M. Smith, W. David Sincoskie, Bell Communications Research David J. Wetherall, Gary J. Minden, 
Affiliation: Massachusetts Institute of Technology  University of Pennsylvania  Massachusetts Institute of Technology  University of Kansas  
Abstract: Active networks are a novel approach to network archi tecture in which the switches of the network perform customized computations on the m essages flowing through them. This approach is motivated by both lead user applications, which perform user-driven computation at nodes within the network today, and the emergence of mobile code technologies t hat make dynamic network service innovation attainable. In this paper , we discuss two approaches to the realization of active networks and provide a snapshot of the current research issues and activities. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Greenwald, M., et al. </author> <title> Designing an Academic Firewall: Policy, Practice and Experience with SURF. </title> <booktitle> in Proc. of the 1996 Symp. on Network and Distributed Systems Security. 1996. </booktitle> <address> San Diego, CA. </address>
Reference-contexts: CATEGORY DESCRIPTION Firewalls Firewalls implement filters that determine which packets should be passed transparently and which should be blocked. Although they have a peer relationship to other routers, they implement application and userspecific functions in addition to packet routing <ref> [1] </ref>. The need to update the firewall to enable the use of new protocols is an impedi ment to their adoption. In an active n etwork, this process could be automated by allowing applications from approved vendors to authenticate themselves to the firewall and inject the appropriate modules into it.
Reference: 2. <author> Chankhuntod, A., P.B. Danzig, and C. Neerdaels. </author> <title> A Hierarchical Internet Object Cache. </title> <booktitle> in Proceedings of 1996 USENIX. </booktitle> <year> 1996. </year>
Reference-contexts: In an active n etwork, this process could be automated by allowing applications from approved vendors to authenticate themselves to the firewall and inject the appropriate modules into it. Web Proxies Web proxies provide a user-transparent service that is tailored to the serving and caching of Web pages. Harvest <ref> [2] </ref> employs a hierarchical scheme in which cache nodes are located near the edges of the network, i.e. within end user organizations. This system could be extended by allowing nodes of the hierarchy to be located at strategic points within the network. <p> Similarly, userspecific multicast services within the network reduce the load on the sensors and on the network backbone. Web proxies that cache pages of information, are another example of a multiuser service that could benefit from network-based computation and storage. Harvest <ref> [2] </ref> employs a hierarchical caching scheme that can reduce the latencies experienced by individual users and the aggregate bandwidth that is consumed. The cache nodes are presently located near the edges of the network, i.e., at nodes within the end user organizations.
Reference: 3. <author> Kleinrock, L. </author> <booktitle> Nomadic Computing (Keynote Address) . in Intl. Conf. on Mobile Computing and Networking. 1995. </booktitle> <address> Berkeley, CA: </address> <publisher> ACM. </publisher>
Reference-contexts: This system could be extended by allowing nodes of the hierarchy to be located at strategic points within the network. Nomadic Routers Kleinrock describes a nomadic router <ref> [3] </ref> that is interposed between an end system and the network. This module observes and adapts to the means by which the end system is connected to the network, e.g., through a phone line in a hotel room versus through the LAN in the home office.
Reference: 4. <author> Balakrishnan, H., et al. </author> <title> Improving TCP/IP Performance over Wireless Networks . in Intl. </title> <booktitle> Conf. on Mobile Computing and Networking. 1995. </booktitle> <address> Berkeley, CA. </address>
Reference-contexts: Transport Gateways Transport gateways are nodes located at strategic points that bridge networks with vastly different bandwidth and reliability characteristics, e.g., at the junctions between wired and wireless networks . To support mobile access to wired networks, TCP snooping <ref> [4] </ref> retains per-connection state information at wireless base stations. Application Services Applicationspecific gateways support services such as the transcoding of images [5] among video conference users with differing bandwidth constraints. Similarly, InfoPad [6] instantiates userspecific pad servers , supporting applications such as voice and handwriting recognition, at intermediate nodes.
Reference: 5. <author> Amir, E., S. McCanne, and H. Zhang. </author> <title> An Application Level Video Gateway. </title> <booktitle> in ACM Multimedia '95. 1995. </booktitle> <address> San Francisco, CA. </address>
Reference-contexts: To support mobile access to wired networks, TCP snooping [4] retains per-connection state information at wireless base stations. Application Services Applicationspecific gateways support services such as the transcoding of images <ref> [5] </ref> among video conference users with differing bandwidth constraints. Similarly, InfoPad [6] instantiates userspecific pad servers , supporting applications such as voice and handwriting recognition, at intermediate nodes. Table 1.
Reference: 6. <author> Le, </author> <title> M.T., </title> <editor> F. Burghardt, and J. Rabaey. </editor> <booktitle> Software Architecture of the Infopad System. in Mobidata Workshop on Mobile and Wireless Information Systems . 1994. </booktitle> <address> New Brunswick, NJ. </address>
Reference-contexts: To support mobile access to wired networks, TCP snooping [4] retains per-connection state information at wireless base stations. Application Services Applicationspecific gateways support services such as the transcoding of images [5] among video conference users with differing bandwidth constraints. Similarly, InfoPad <ref> [6] </ref> instantiates userspecific pad servers , supporting applications such as voice and handwriting recognition, at intermediate nodes. Table 1.
Reference: 7. <author> Tennenhouse, D., et al., </author> <title> Virtual Infrastructure: Putting Information Infrastructure on the Technology Curve. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 26, No. 13. </volume> <month> (October </month> <year> 1996) </year>
Reference-contexts: Active networks present an opportunity to change the structure of the networking industry, from a mainframe mindset, in which hardware and software are bundled together, to a virtualized approach in which hardware and software innovation are decoupled <ref> [7] </ref>. The network programming abstraction provides a powerful platform for user-driven customization of the infrastructure, allowing new services to be deployed at a faster pace than can be sustained by vendor driven consensus and standardization activities.
Reference: 8. <author> Borenstein, N. </author> <title> Email with a Mind of its Own: The Safe-Tcl Language for Enabled Mail. </title> <booktitle> in IFIP International Conference. 1994. </booktitle> <address> Barcelona, Spain. </address>
Reference-contexts: The execution of a capsule results in the scheduling of zero or more capsules for transmission on the outgoing links and may change the no n-transient state of the node. PROJECT M S E DESCRIPTION Safe-Tcl <ref> [8] </ref> (source) X X Safe-Tcl (based on Tcl) is a scripting language that provides safety through interpretation of a source program and closure of its namespace. It depends on the restricted closure and correctness of the interpreter to prevent programs from deliberately or accidentally straying beyond their permitted execution environment.
Reference: 9. <author> Gosling, J. and H. McGilton, </author> <title> The Java Language Environment: A White Paper . 1995, Sun Microsystems: </title> <address> Mountain View, CA. </address> <note> page 13 </note>
Reference-contexts: It depends on the restricted closure and correctness of the interpreter to prevent programs from deliberately or accidentally straying beyond their permitted execution environment. Java <ref> [9] </ref> (intermediate) X X x Java uses an intermediate instruction set to achieve mobility. Traditionally, the safe execution of intermediate code has relied on its careful interpretation.
Reference: 10. <editor> Adl-Tabatabai, A., et al. </editor> <booktitle> Efficient and Language-Independent Mobile Programs . in ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '96). 1996. </booktitle> <address> Philadelphia, PA: </address> <publisher> ACM. </publisher>
Reference-contexts: Work at the University of Arizona and elsewhere seeks to further boost efficiency through the use of compilation techniques. Omniware <ref> [10] </ref> (object-code) x X X Omniware portable object-code depends on software-based fault isolation (SFI) to enforce safety efficiently. It prescribes a set of rules that instruction sequences must adhere to, e.g. restrictions on how address arithmetic is performed.
Reference: 11. <author> Necula, G. and P. Lee. </author> <title> Safe Kernel Extensions Without RunTime Checking . in Second Symp. </title> <booktitle> on Operating System Design and Implementation (OSDI '96) . 1996. </booktitle> <address> Seattle, WA. </address>
Reference-contexts: It prescribes a set of rules that instruction sequences must adhere to, e.g. restrictions on how address arithmetic is performed. In conjunction with runtime support, these rules define a sandbox within which the program can do what it likes, but that it may not escape. Proof-Carrying Code <ref> [11] </ref> (object-code) X X PCC uses a novel approach to achieve safety: it attaches a formal proof of the properties of a binary program. The recipient can check that the proof is valid, a process that is much simpler than constructing it from scratch.
Reference: 12. <author> Wetherall, D. and D. </author> <title> Tennenhouse. </title> <booktitle> The ACTIVE IP Option . in 7th ACM SIGOPS European Workshop. 1996. </booktitle> <address> Connemara, Ireland. </address>
Reference-contexts: Operating system support for more specific strategies, such as path-based scheduling, protocol code reorganization, and low-level extensibility should also prove useful. Table 3 describes some of these compilation and operating systems technologies. Common primitives. The services built-in to each node m ight include several categories of operations <ref> [12] </ref>: primitives that allow the packet itself to be manipulated, e.g., by changing its header, payload, length, etc.; primitives that provide access to the nodes environment, e.g., the node address, time-of-day, link status, etc.; and primitives for controlling packet flow, such as forwarding, copying, discarding.
Reference: 13. <author> Mosberger, D. and L. Peterson, </author> <title> Making Paths Explicit in the Scout Operating System. 1996, </title> <type> Technical Report 96-05, </type> <institution> Dept. of Computer Science, University of Arizona. </institution>
Reference-contexts: Demand loading allows capsules to reference components rather than carry them; and caching implies that recently used components need not be reloaded and verified for safety. PROJECT DESCRIPTION Scout <ref> [13] </ref> Scout is designed to support communication-oriented tasks. It allocates and schedules resources on a path basis and applies a number of optim - izations intended to increase throughput and decrease latency. Many of the techniques may be applicable to programs loaded into network nodes.
Reference: 14. <author> Engler, D.R., M.F. Kaashoek, and J. OToole, Jr. Exokernel: </author> <booktitle> An Operating System Architecture for Application-Level Resource Management . in 15th ACM Symp. on Operating Systems Principles. </booktitle> <year> 1995. </year>
Reference-contexts: A reference platform that demonstrates the capsule architecture is being implemented on Linux using a Java-based capsule encoding. Additional enabling technologies, including advanced operating system techniques <ref> [14] </ref> and on-the-fly compilation [16] are also under investigation. Capsules use the built-in constructs of a programming language to perform packet processing. <p> PROJECT DESCRIPTION Scout [13] Scout is designed to support communication-oriented tasks. It allocates and schedules resources on a path basis and applies a number of optim - izations intended to increase throughput and decrease latency. Many of the techniques may be applicable to programs loaded into network nodes. Exokernel <ref> [14] </ref> The exokernel enables programs to safely share low-level access to system resources. It implements a thin veneer that securely multiplexes the raw hardware. This in turn allows programs to tailor their own abstractions of operating system services, e.g., access to the active node environment.
Reference: 15. <author> Bershad, B., et al. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> in 15th ACM Symp. on Operating Systems Principles. </booktitle> <year> 1995. </year>
Reference-contexts: Exokernel [14] The exokernel enables programs to safely share low-level access to system resources. It implements a thin veneer that securely multiplexes the raw hardware. This in turn allows programs to tailor their own abstractions of operating system services, e.g., access to the active node environment. SPIN <ref> [15] </ref> SPIN relies on the properties of the Modula 3 language and a trustworthy compiler to generate programs that will not stray beyond a restricted environment. Programs signed by the compiler may be dynamically loaded into the operating system. C [16] C and VCODE enable on-the-fly code generation .
Reference: 16. <author> Engler, D.R., W.C. Hsieh, and M.F. Kaashoek. </author> <title> `C: A Language for High-Level, Efficient, </title> <booktitle> and Machine-Independent Dynamic Code Generation . in 23rd Annual ACM Symp. on Principles of Programming Languages (POPL '96). 1996. </booktitle> <address> St. Petersburg, FL. </address>
Reference-contexts: A reference platform that demonstrates the capsule architecture is being implemented on Linux using a Java-based capsule encoding. Additional enabling technologies, including advanced operating system techniques [14] and on-the-fly compilation <ref> [16] </ref> are also under investigation. Capsules use the built-in constructs of a programming language to perform packet processing. <p> SPIN [15] SPIN relies on the properties of the Modula 3 language and a trustworthy compiler to generate programs that will not stray beyond a restricted environment. Programs signed by the compiler may be dynamically loaded into the operating system. C <ref> [16] </ref> C and VCODE enable on-the-fly code generation . This allows source programs to be automatically tailored, or even wholly generated, at runtime. These technologies could allow active nodes to translate commonly-used programs to binary encodings. Table 3.
Reference: 17. <author> Tennenhouse, D. and D . Wetherall. </author> <title> Towards an Active Network Architecture . in Multimedia Computing and Networking (MMCN 96) . Jan 1996. </title> <address> San Jose, CA: </address> <note> SPIE. A revised version of this paper appears in Computer Communication Review, Vol. 26, No. 2 (April 96). </note>
Reference-contexts: Massachusetts Institute of Technology The MIT team is prototyping an architecture based on the capsule approach <ref> [17] </ref> and studying issues related to component specification, active storage , multicast NACK fusion, and network-based traffic filtering. A reference platform that demonstrates the capsule architecture is being implemented on Linux using a Java-based capsule encoding.
Reference: 18. <author> Smith, J., et al. , SwitchWare: </author> <title> Accelerating Network Evolution . 1996, </title> <type> Technical Report MS-CIS-96-38, </type> <institution> CIS Department, University of Pennsylvania. </institution> <note> Also available as http://www.cis.upenn.edu/~jms/white-paper.ps. </note>
Reference-contexts: A more persistent form of active storage, workflow state, is being developed to support loosely synchronized activities and to track dependencies. University of Pennsylvania The SwitchWare project <ref> [18] </ref> is developing a programmable switch approach that allows digitally signed type-checked modules to be loaded into the nodes of a network. The basic idea is to raise the level of abstraction of the switch functionality to be closer to that of a Turing machine.
Reference: 19. <author> Feldmeier, D., A. McAuley, and J. Smith, </author> <title> Protocol Boosters . 1997. </title> <journal> Submitted to IEEE Journal on Selected Areas of Communication. </journal> <month> Jan </month> <year> 1997. </year>
Reference-contexts: Bellcores interest in active networks is related to its previous work on : protocol boosters <ref> [19] </ref>, which dynamically optimize protocol components on an end-to-end basis; and the Advanced Intelligent Network (AIN), which separated the implementation of value added services from switching, by moving the service control functions to adjunct processors.
Reference: 20. <author> Yemini, Y., and da Silva, S. </author> <title> Towards Programmable Networks . 1996. </title> <booktitle> in FIP/IEEE International Workshop on Distributed Systems. </booktitle> <month> Oct </month> <year> 1996. </year>
Reference-contexts: Columbia University The NetScript project, led by Yemini and da Silva <ref> [20] </ref> , consists of a programming language and execution environment. The language provides a means to script the processing of packet streams. I t is particularly suit ed to the implementation of routing, packet analysis, signaling and management functions.
Reference: 21. <author> Bhattacharjee, B., K. Calvert, and E. Zegura, </author> <title> An Architecture for Active Networking , 1996. </title> <type> Technical Report GIT-CC-96-20, </type> <institution> College of Computing, Georgia Institute of Technology. </institution>
Reference-contexts: At the Georgia Institute of Technology, active network concepts are being applied to network congestion by allowing applications to request that specific node algorithms (e.g. lossless compression, selective discard, transcoding) be invoked during periods of congestion <ref> [21] </ref>. At the University of Kansas, Frost and Minden are considering the application of active technologies to rapidly deployable radio networks.
Reference: 22. <author> Hartman, J., et al., </author> <title> Liquid Software: A New Paradigm for Networked Systems. . 1996, </title> <type> Technical Report 96-11, </type> <institution> Dept. of Computer Science, University of Arizona. </institution>
Reference-contexts: At the University of Kansas, Frost and Minden are considering the application of active technologies to rapidly deployable radio networks. At the University of Arizona , Peterson is developing liquid software, a suite of mobile code technologies that includes rapid compilation of intermediate code, i.e., at network link rates <ref> [22] </ref>. At the University of Cincinatti, Alexander is investigating techniques for the formal specification of network elements and behavior. page 12 Summary We realize that suggestions for software-intensive approaches to networking surface every ten years or so.
Reference: 23. <author> Zander, J. and R. Forchheimer. </author> <title> SOFTNET - An approach to high level packet communication. </title> <booktitle> in Proc. of AMRAD Conf. 1983. </booktitle> <address> San Francisco, CA. </address>
Reference-contexts: At the University of Cincinatti, Alexander is investigating techniques for the formal specification of network elements and behavior. page 12 Summary We realize that suggestions for software-intensive approaches to networking surface every ten years or so. For example, Zander <ref> [23] </ref> describes an experimental system in which packets of FORTH code were interpreted by network elements. Nonetheless, we are convinced that recent improvements in the safety and efficiency of active technologies, and the demand created by lead applications, present new research opportunities.

References-found: 23

