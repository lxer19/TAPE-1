URL: http://www.cs.tamu.edu/faculty/rabi/321/deb/paper1.ps
Refering-URL: http://www.cs.tamu.edu/faculty/rabi/321/deb/
Root-URL: http://www.cs.tamu.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P.-J. Chuang and N.-F. Tzeng, </author> <title> "An Efficient Submesh Allocation Strategy for Mesh Computer Systems", </title> <booktitle> Proc. 11th Int'l Conf. on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1991, </year> <pages> pp. 256-262. </pages>
Reference-contexts: The submesh allocator then tries to find a free submesh, if available, to be assigned to that job. A number of submesh allocation schemes have been proposed in the literature <ref> [1, 17, 2, 3, 5, 12] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay by 20 to 50% [12]. <p> Efficient job scheduling principles were shown to improve the performance in hypercube systems, while the various subcube allocation algorithms exhibited similar performance [7, 10, 11, 15, 9]. Although for meshes, efficient 1 submesh allocation algorithms exhibit improvement in performance <ref> [1, 17, 5, 12] </ref>, further performance improvements of even higher magnitude may be obtained by using an efficient scheduler instead of the FCFS scheduler. <p> Thus, it is applicable to any general-purpose mesh system supporting a multi-user environment. This paper deals with the issue of dynamic scheduling only. Although a lot of research has been devoted to submesh allocation in meshes <ref> [2, 3, 1, 5, 12, 13, 17] </ref>, the issue of dynamic job scheduling in meshes has been neglected. All the existing approaches assume a FCFS scheduling discipline. The FCFS scheduling discipline suffers from the drawback that it is blocking in nature. <p> For example, if we use any of the bit-mapping allocation strategy such as the ones proposed in <ref> [1, 5, 17] </ref>, we have to maintain a 10 bit map indicating whether a processor has been reserved or not in addition to the bit map indicating whether a processor has been allocated to a task or not. <p> The performance parameters of interest are the the average waiting time of jobs, the standard deviation in waiting time, and the average allocation time. The following assumptions are made; most of them similar to the ones made by others <ref> [1, 5, 12, 17] </ref>. * Exponential Interarrival Time. * Exponential and Hyper-exponential Service Time. 16 * Uniform distribution for the the length and width of submeshes requested by incoming tasks; the distributions for lengths and widths assumed to be independent.
Reference: [2] <author> K. Li and K. H. Cheng, </author> <title> "A Two Dimensional Buddy System for Dynamic Resource Allocation in </title>
Reference-contexts: The submesh allocator then tries to find a free submesh, if available, to be assigned to that job. A number of submesh allocation schemes have been proposed in the literature <ref> [1, 17, 2, 3, 5, 12] </ref>. Comparison of the various allocation algorithms indicate that a `good' allocation scheme can improve the average waiting delay by 20 to 50% [12]. <p> Thus, it is applicable to any general-purpose mesh system supporting a multi-user environment. This paper deals with the issue of dynamic scheduling only. Although a lot of research has been devoted to submesh allocation in meshes <ref> [2, 3, 1, 5, 12, 13, 17] </ref>, the issue of dynamic job scheduling in meshes has been neglected. All the existing approaches assume a FCFS scheduling discipline. The FCFS scheduling discipline suffers from the drawback that it is blocking in nature. <p> The reservation list consists of all the submeshes reserved for individual tasks. For example, in Fig. 1, the reservation list will be <ref> [f&lt; 0; 0 &gt;; &lt; 2; 6 &gt;g] </ref>.
References-found: 2

