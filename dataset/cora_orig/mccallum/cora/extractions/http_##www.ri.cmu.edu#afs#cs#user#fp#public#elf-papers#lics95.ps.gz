URL: http://www.ri.cmu.edu/afs/cs/user/fp/public/elf-papers/lics95.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs/user/fp/public/elf-papers/
Root-URL: 
Email: fp@cs.cmu.edu  
Title: Structural Cut Elimination  
Author: Frank Pfenning 
Address: Pittsburgh, PA 15213-3891  
Affiliation: Department of Computer Science Carnegie Mellon University  
Abstract: We present new proofs of cut elimination for intu-itionistic, classical, and linear sequent calculi. In all cases the proofs proceed by three nested structural inductions, avoiding the explicit use of multi-sets and termination measures on sequent derivations. This makes them amenable to elegant and concise implementations in Elf, a constraint logic programming language based on the LF logical framework. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr93] <author> Samson Abramsky. </author> <title> Computational interpretations of linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 111 </volume> <pages> 3-57, </pages> <year> 1993. </year>
Reference-contexts: The algorithm for cut elimination may be interpreted computationally, similarly to the way normalization for natural deduction may be viewed as functional computation. For the case of linear logic, this point was made by Girard [Gir87] and later elaborated by Abramsky <ref> [Abr93] </ref>; see also [BTKP93] and [Gal93]. The study of various cut elimination properties and procedures thus plays an important role in theoretical computer science. <p> We therefore endow sequent derivations with proof terms that resolve such ambiguities. Proof terms also play an important role in the study of computational properties of the sequent calculus (see <ref> [Abr93, BTKP93, Gal93] </ref>), and form a natural intermediate step toward the representation of the rules in LF. The first step is to label hypotheses. The second is to record a proof term d on the right of the sequent arrow.
Reference: [And92] <author> Jean-Marc Andreoli. </author> <title> Logic programming with focusing proofs in linear logic. </title> <journal> Journal of Logic and Computation, </journal> <volume> 2(3) </volume> <pages> 197-347, </pages> <year> 1992. </year>
Reference-contexts: Ro-orda [Roo91] gives a different proof of cut elimination by generalizing the cut rule to multiple occurrences of modal formulas. The main challenge is to isolate the non-linear reasoning and the associated structural rules. Our solution is close to Andreoli's 2 <ref> [And92] </ref> and Girard's LU [Gir93] in that we divide a sequent into linear and non-linear zones, and that we have several forms of cut. The structural aspects of non-linear reasoning are treated in the manner of the earlier sections.
Reference: [BTKP93] <author> Val Breazu-Tannen, Delia Kesner, and Lau-rence Puel. </author> <title> A typed pattern calculus. </title> <editor> In Moshe Y. Vardi, editor, </editor> <booktitle> Proceedings of the Eight Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 262-274, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The algorithm for cut elimination may be interpreted computationally, similarly to the way normalization for natural deduction may be viewed as functional computation. For the case of linear logic, this point was made by Girard [Gir87] and later elaborated by Abramsky [Abr93]; see also <ref> [BTKP93] </ref> and [Gal93]. The study of various cut elimination properties and procedures thus plays an important role in theoretical computer science. <p> We therefore endow sequent derivations with proof terms that resolve such ambiguities. Proof terms also play an important role in the study of computational properties of the sequent calculus (see <ref> [Abr93, BTKP93, Gal93] </ref>), and form a natural intermediate step toward the representation of the rules in LF. The first step is to label hypotheses. The second is to record a proof term d on the right of the sequent arrow.
Reference: [DFH + 93] <author> Gilles Dowek, Amy Felty, Hugo Herbelin, Gerard Huet, Chet Murthy, Catherine Parent, Christine Paulin-Mohring, and Benjamin Werner. </author> <title> The Coq proof assistant user's guide. Rapport Techniques 154, </title> <publisher> INRIA, </publisher> <address> Rocquen-court, France, </address> <year> 1993. </year> <note> Version 5.8. </note>
Reference-contexts: Once the structural proof of admissibility has been found and implemented, it is natural to ask if it can also be encoded in stronger frameworks such as Coq <ref> [DFH + 93] </ref> so that structural inductions are made explicit and the proof is fully formally verified. There are several aspects of our proof which make this difficult.
Reference: [Dra87] <author> A. G. Dragalin. </author> <title> Mathematical Intuitionism: Introduction to Proof Theory, volume 67 of Translations of Mathematical Monographs. </title> <publisher> American Mathematical Society, </publisher> <address> Providence, Rhode Island, </address> <year> 1987. </year>
Reference-contexts: A proof along these general lines, but on a different sequent calculus and with a different rule of cut was given by Dragalin <ref> [Dra87] </ref>. However, such a proof is not well-suited for implementation. The first difficulty is the encoding of the sequent calculus itself and the notion of multi-set it requires. The second difficulty is that most proof checkers or theorem provers use structural induction more effectively than proofs with termination measures.
Reference: [Gal93] <author> Jean Gallier. </author> <title> Constructive logics Part I: A tutorial on proof systems and typed -calculi. </title> <journal> Theoretical Computer Science, </journal> <volume> 110 </volume> <pages> 249-339, </pages> <year> 1993. </year>
Reference-contexts: The algorithm for cut elimination may be interpreted computationally, similarly to the way normalization for natural deduction may be viewed as functional computation. For the case of linear logic, this point was made by Girard [Gir87] and later elaborated by Abramsky [Abr93]; see also [BTKP93] and <ref> [Gal93] </ref>. The study of various cut elimination properties and procedures thus plays an important role in theoretical computer science. <p> We therefore endow sequent derivations with proof terms that resolve such ambiguities. Proof terms also play an important role in the study of computational properties of the sequent calculus (see <ref> [Abr93, BTKP93, Gal93] </ref>), and form a natural intermediate step toward the representation of the rules in LF. The first step is to label hypotheses. The second is to record a proof term d on the right of the sequent arrow. <p> Then there is a proof term f and a (cut-free) sequent derivation of F :: ( f Girard's notion of a cross-cut <ref> [Gal93] </ref>, though without unwieldy multiplicities, surfaces naturally in this proof: Since formulas are never discarded they must be eliminated explicitly from both premises of a cut in a cross-cut fashion before the essential cut reduction can take place. <p> This means that our cut conversions do not identify intuitively unrelated sequent derivations, which has been a problem in other systems as noted by Lafont (see <ref> [Gal93] </ref>). Finally, the representation of the linear sequent calculus and its cut elimination algorithm could be made 8 even more concise by using a linear logical frame-work as sketched in Section 7. In joint work with I.
Reference: [Gen35] <author> Gerhard Gentzen. </author> <title> Untersuchungen uber das logische Schlieen. </title> <journal> Mathematische Zeitschrift, </journal> <volume> 39 </volume> <pages> 176-210, 405-431, </pages> <year> 1935. </year> <title> English translation in M. </title> <editor> E. Szabo, editor, </editor> <booktitle> The Collected Papers of Gerhard Gentzen, </booktitle> <pages> pages 68-131, </pages> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: 1 Introduction Gentzen's sequent calculi <ref> [Gen35] </ref> for intuitionistic and classical logic have been the central tool in many proof-theoretical investigations and applications of logic in computer science such as logic programming or automated theorem proving. The central property of sequent calculi is cut elimination (Gentzen's Haupt-satz) which yields consistency of the logic as a corollary.
Reference: [Gir87] <author> Jean-Yves Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: The algorithm for cut elimination may be interpreted computationally, similarly to the way normalization for natural deduction may be viewed as functional computation. For the case of linear logic, this point was made by Girard <ref> [Gir87] </ref> and later elaborated by Abramsky [Abr93]; see also [BTKP93] and [Gal93]. The study of various cut elimination properties and procedures thus plays an important role in theoretical computer science. <p> Constructive cut elimination in a sequent formulation is significantly harder here, since structural rules are more difficult to eliminate than in the classical and in-tuitionistic cases. Girard <ref> [Gir87] </ref> uses proof nets (instead of a sequent calculus) partly for that reason. Galmiche and Perrier [GP94] give a syntactic analysis of permutabilities of rules and apply it to cut elimination; our own analysis does not go quite as far, but we have a simpler proof of cut elimination.
Reference: [Gir93] <author> Jean-Yves Girard. </author> <title> On the unity of logic. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 59 </volume> <pages> 201-217, </pages> <year> 1993. </year>
Reference-contexts: Critical is the elimination of structural rules, both for the informal proofs and their formalizations, which leads us quite naturally to Kleene's sequent system G 3 [Kle52] for intuitionistic and classical logic and a variant of LU <ref> [Gir93] </ref> for linear logic. These formulations can easily be seen to be equivalent to more traditional sequent calculi. The reader interested in structural cut elimination for intuitionistic, classical, or linear logic, but not in its formalization, should be able to follow this paper by ignoring the material regarding implementation. <p> Ro-orda [Roo91] gives a different proof of cut elimination by generalizing the cut rule to multiple occurrences of modal formulas. The main challenge is to isolate the non-linear reasoning and the associated structural rules. Our solution is close to Andreoli's 2 [And92] and Girard's LU <ref> [Gir93] </ref> in that we divide a sequent into linear and non-linear zones, and that we have several forms of cut. The structural aspects of non-linear reasoning are treated in the manner of the earlier sections.
Reference: [GP94] <author> Didier Galmiche and Guy Perrier. </author> <title> On proof normalization in linear logic. </title> <note> Theoretical Computer Science. To appear. Available as Technical Report CRIN 94-R-113, </note> <institution> Nancy, France. </institution>
Reference-contexts: Constructive cut elimination in a sequent formulation is significantly harder here, since structural rules are more difficult to eliminate than in the classical and in-tuitionistic cases. Girard [Gir87] uses proof nets (instead of a sequent calculus) partly for that reason. Galmiche and Perrier <ref> [GP94] </ref> give a syntactic analysis of permutabilities of rules and apply it to cut elimination; our own analysis does not go quite as far, but we have a simpler proof of cut elimination. We conjec ture that their presentation could be streamlined using our presentation of the linear sequent calculus.
Reference: [HHP93] <author> Robert Harper, Furio Honsell, and Gordon Plotkin. </author> <title> A framework for defining logics. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40(1) </volume> <pages> 143-184, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: They also involve global conditions on occurrences of parameters in sequent derivations. In this paper we present new proofs of cut elimination for intuitionistic, classical, and linear sequent calculi and sketch their implementations in the Elf system [Pfe91] which is based on the LF Logical Framework <ref> [HHP93] </ref>. Multi-sets are avoided altogether in these proofs, and termination measures are replaced by three nested structural inductions. Parameters are treated as variables bound in derivations, thus naturally capturing occurrence conditions. <p> In order to understand and appreciate the representation of the sequent calculus and the proof of cut elimination the reader should have a basic knowledge of the representation methodology of LF and the Elf meta-language; the interested reader is referred to <ref> [HHP93] </ref> and [Pfe91]. <p> Readers interested primarily in the proof of cut elimination may safely skip this section. For the sake of brevity we show the actual code in Elf [Pfe91], an implementation of LF which permits type declarations with implicit quantifiers. The representation of formulas follows <ref> [HHP93] </ref>: Object language variables are represented by meta-language variables. This technique is central for this particular encoding; it is not available in systems based on explicit inductive definitions.
Reference: [HM94] <author> Joshua Hodas and Dale Miller. </author> <title> Logic programming in a fragment of intuitionistic linear logic. </title> <journal> Information and Computation, </journal> <volume> 110(2) </volume> <pages> 327-365, </pages> <year> 1994. </year> <booktitle> A preliminary version appeared in the Proceedings of the Sixth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 32-42, </pages> <address> Amsterdam, The Netherlands, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: For our purposes, proof terms for the Lolli fragment of linear logic <ref> [HM94] </ref> are sufficient, which is important since it satisfies a stronger normal form theorem than the full calculus. In this fragment, we have linear (-o) and intuitionistic (-&gt;) implication, additive conjunction (&), and top (T) and corresponding proof constructors.
Reference: [Hod94] <author> Joshua S. Hodas. </author> <title> Logic Programming in In-tuitionistic Linear Logic: Theory, Design, and Implementation. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, Department of Computer and Information Science, </institution> <year> 1994. </year>
Reference-contexts: This leaves a version of dereliction as the only structural rule, and it can be handled directly by the structural induction proving admissibility of cut. A proof along similar lines, but using explicit termination measures instead of structural induction over proof terms has been given by Hodas <ref> [Hod94] </ref> for L, a fragment of intuitionistic linear logic. 6 The following fragment is complete for classical propo-sitional linear logic; the extension to include first-order quantifiers and the remaining linear connectives (which are all definable) is straightforward, both in the proof and its implementation in Elf.
Reference: [Kle52] <author> Stephen Cole Kleene. </author> <title> Introduction to Meta-mathematics. </title> <publisher> North-Holland, </publisher> <year> 1952. </year>
Reference-contexts: Parameters are treated as variables bound in derivations, thus naturally capturing occurrence conditions. Critical is the elimination of structural rules, both for the informal proofs and their formalizations, which leads us quite naturally to Kleene's sequent system G 3 <ref> [Kle52] </ref> for intuitionistic and classical logic and a variant of LU [Gir93] for linear logic. These formulations can easily be seen to be equivalent to more traditional sequent calculi. <p> The proximity to natural deduction then allows a high-level encoding of sequent derivations in LF. The resulting sequent calculus is basically Kleene's system G 3 <ref> [Kle52] </ref> which he introduced to obtain a simple decidability proof for its propositional fragment. In [Pfe94a] we consider a complete set of logical connectives and quantifiers (^, , _, :, &gt;, ?, 8, and 9). Here we restrict ourselves to and 9 for the sake of brevity.
Reference: [Mat94] <author> Sean Matthews. </author> <title> A theory and its metatheory in F S 0 . In Dov Gabbay and Franz Guenth-ner, editors, What is a Logical System? Oxford University Press, </title> <note> 1994. To appear. </note>
Reference-contexts: The study of various cut elimination properties and procedures thus plays an important role in theoretical computer science. Many proofs of cut elimination have been given in the literature yet, to our knowledge, none of them have been formalized even though this is clearly possible in principle (see Matthews <ref> [Mat94] </ref> for a pencil-and-paper analysis of cut elimination for the (_; :) fragment of classical propositional logic in F S 0 ). They are difficult to mechanize for a number of reasons which in combination are quite intimidating.
Reference: [MPP92] <author> Dale Miller, Gordon Plotkin, and David Pym. </author> <title> A relevant analysis of natural deduction. Talk given at the Workshop on Logical Frameworks, </title> <address> B-astad, Sweden, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: In joint work with I. Cervesato, we are currently designing such a linear refinement of LF following ideas of Miller, Plotkin and Pym <ref> [MPP92] </ref>. Acknowledgments. I would like to thank Iliano Cervesato, Jean Gallier, Dale Miller, Richard Statman and Roberto Virga for discussions regarding the topic of this paper and David Basin, Sean Matthews, Ekke-hard Rohwedder and Anne Troelstra for comments on a draft.
Reference: [Nip91] <author> Tobias Nipkow. </author> <title> Higher-order critical pairs. </title> <editor> In G. Kahn, editor, </editor> <booktitle> Sixth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 342-349, </pages> <address> Amsterdam, The Netherlands, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: In other future work we plan to reexamine the connection between normalization and cut elimination in the same framework. Another direction is to study cut elimination in a formulation as a higher-order rewrite system along the lines of Nip-kow <ref> [Nip91] </ref>, but using dependent types. We first note that our system of rules is terminating (note that we cannot permute adjacent cuts). Assuming the completeness of a critical pair criterion for the dependently typed calculus, the system is confluent modulo Kleene's permutations of adjacent inference rules in the cut-free system.
Reference: [Pfe91] <author> Frank Pfenning. </author> <title> Logic programming in the LF logical framework. </title> <editor> In Gerard Huet and Gordon Plotkin, editors, </editor> <booktitle> Logical Frameworks, </booktitle> <pages> pages 149-181. </pages> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: They also involve global conditions on occurrences of parameters in sequent derivations. In this paper we present new proofs of cut elimination for intuitionistic, classical, and linear sequent calculi and sketch their implementations in the Elf system <ref> [Pfe91] </ref> which is based on the LF Logical Framework [HHP93]. Multi-sets are avoided altogether in these proofs, and termination measures are replaced by three nested structural inductions. Parameters are treated as variables bound in derivations, thus naturally capturing occurrence conditions. <p> In order to understand and appreciate the representation of the sequent calculus and the proof of cut elimination the reader should have a basic knowledge of the representation methodology of LF and the Elf meta-language; the interested reader is referred to [HHP93] and <ref> [Pfe91] </ref>. <p> Readers interested primarily in the proof of cut elimination may safely skip this section. For the sake of brevity we show the actual code in Elf <ref> [Pfe91] </ref>, an implementation of LF which permits type declarations with implicit quantifiers. The representation of formulas follows [HHP93]: Object language variables are represented by meta-language variables. This technique is central for this particular encoding; it is not available in systems based on explicit inductive definitions.
Reference: [Pfe94a] <author> Frank Pfenning. </author> <title> A structural proof of cut elimination and its representation in a logical framework. </title> <type> Technical Report CMU-CS-94-218, </type> <institution> Department of Computer Science, Carnegie Mel-lon University, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: In Section 6 we extend these results to a classical sequent calculus and in Section 7 to a linear sequent calculus. We conclude with an assessment and some remarks about future work in Section 8. Full details for the intuitionistic and classical systems may be found in <ref> [Pfe94a] </ref>; the linear system is given in [Pfe94b]. 2 Intuitionistic Sequent Calculus In this section we develop a formulation of the sequent calculus for intuitionistic logic by transcribing the process of searching for a natural deduction into an inference system. <p> The proximity to natural deduction then allows a high-level encoding of sequent derivations in LF. The resulting sequent calculus is basically Kleene's system G 3 [Kle52] which he introduced to obtain a simple decidability proof for its propositional fragment. In <ref> [Pfe94a] </ref> we consider a complete set of logical connectives and quantifiers (^, , _, :, &gt;, ?, 8, and 9). Here we restrict ourselves to and 9 for the sake of brevity. The notions of free and bound variable are defined as usual. <p> From this, cut elimination in the sense of Gentzen follows by a simple induction on the structure of a derivation possibly containing Cut (see <ref> [Pfe94a] </ref>). Our formulation of the sequent calculus has the elementary properties of weakening (if ! C then ; A ! C), contraction (if ; A; A ! C then ; A ! C), and permits substitution for parameters. <p> We again use and the idea of higher-order abstract syntax to delimit scope. Due to space constraints we only show the fragment with _ and : in Figure 2; the development for a full complement of connectives including quantifiers may be found in <ref> [Pfe94a] </ref>. Substitution, weakening and contraction work as in the intuitionistic case, but now apply to both sides of a sequent. We elide the classical analog of Lemma 1. <p> The proof representation is extremely concise and much shorter than an informal proof of the same argument. We have written a program to generate LaTeX source for an informal version of each case in the proof of admissibility. These "informalized" versions are given in full detail in <ref> [Pfe94a] </ref>. In the case of linear logic the implementation of cut elimination captures less of the informal reasoning by ignoring linearity constraints, but is nonetheless operationally adequate in the sense that, given valid linear sequent derivations, it will generate valid linear sequent derivations.
Reference: [Pfe94b] <author> Frank Pfenning. </author> <title> Structural cut elimination in linear logic. </title> <type> Technical Report CMU-CS-94-222, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: We conclude with an assessment and some remarks about future work in Section 8. Full details for the intuitionistic and classical systems may be found in [Pfe94a]; the linear system is given in <ref> [Pfe94b] </ref>. 2 Intuitionistic Sequent Calculus In this section we develop a formulation of the sequent calculus for intuitionistic logic by transcribing the process of searching for a natural deduction into an inference system. The proximity to natural deduction then allows a high-level encoding of sequent derivations in LF. <p> The resulting representation of derivations is a compositional bijection between between LF objects of type lin in an appropriate context and linear sequent derivations in LV (a precise formulation of this theorem may be found in <ref> [Pfe94b] </ref>). We can prove admissibility of cut by nested structural inductions as before. Theorem 5 (Admissibility of Cut in LV) The three rules of cut for the linear sequent calculus are admissible.
Reference: [Roh94] <author> Ekkehard Rohwedder. </author> <title> Verifying the meta-theory of deductive systems. </title> <type> Thesis Proposal, </type> <month> February </month> <year> 1994. </year>
Reference-contexts: We conclude that a similarly elegant representation of cut elimination in other systems is a non-trivial challenge which, we hope, others will take up. In future work we plan to verify mechanically that the given signatures indeed implement proofs. The prototype implementation of the schema-checker sketched in <ref> [Roh94] </ref> currently accepts them, but the (meta-meta-)theoretical analysis of the schema-checker itself is not yet complete. In other future work we plan to reexamine the connection between normalization and cut elimination in the same framework.

References-found: 21

