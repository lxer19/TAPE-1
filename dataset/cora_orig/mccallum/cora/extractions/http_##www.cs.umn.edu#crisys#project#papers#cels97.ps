URL: http://www.cs.umn.edu/crisys/project/papers/cels97.ps
Refering-URL: http://www.cs.umn.edu/crisys/project/currwor.htm
Root-URL: http://www.cs.umn.edu
Email: fjdreese,levesong@cs.washington.edu  
Title: Software Deviation Analysis: A "Safeware" Technique  
Author: Jon Damon Reese and Nancy G. Leveson 
Note: This work was partly funded by NASA/Langley Grant NAG-1-1495, NSF Grant CCR-9396181, and the California PATH Program of the University of California, in cooperation with the California Department of Transportation and the U.S. Department of Transportation.  
Date: fjdreese,levesong@safeware-eng.com  
Address: Box 352350 Everett, WA 98203, U.S.A. Seattle, WA 98195, U.S.A.  
Affiliation: Dept. of C.S.E. Safeware Engineering Corp. University of Washington 7200 Lower Ridge, Unit B  
Abstract: Standard safety analysis techniques are often ineffective when computers and digital devices are integrated into plant control. The Safeware methodology and its set of supporting safety analysis techniques (and prototype tools) includes modeling and hazard analysis of complex systems where the components may be a mixture of humans, hardware, and software. This paper describes one of the Safeware hazard analysis techniques, Software Deviation Analysis, that incorporates the beneficial features of HAZOP (such as guidewords, deviations, exploratory analysis, and a systems engineering approach) into an automated procedure that is capable of handling the complexity and logical nature of computer software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Leveson, M. Heimdahl, H. Hildreth, and J. Reese. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-20(9), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: The automated highway system (AHS) directs automobiles to form groups within a lane, called platoons. Each automobile has a software controller that directs the movement of the car relative to the platoons. Figure 5 shows a page from the AHS specification, written in Requirements State Machine Language (RSML) <ref> [1] </ref>. The relevant parts will be explained shortly. Next, the analyst identifies the safety-critical outputs. For simplicity, in this example we will assume that all outputs are critical. The next step is to define the initial input deviations.
Reference: [2] <author> N. G. Leveson. Safeware: </author> <title> System Safety and Computers. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1995. </year>
Reference-contexts: This work has resulted in an approach, called Safeware, to enhance safety in systems composed of electromechanical, computer, and human components. The basic methodology involves applying software hazard analysis and hazard control procedures throughout software development, based on the identified system hazards <ref> [2] </ref>. These efforts are closely tied to the system level hazard analysis and control. Early and continuing analysis procedures guide and direct the software as it is developed instead of simply attempting to verify safety after the software is completed. <p> First, it is time- and labor-intensive <ref> [2] </ref>, in large part due to its reliance on group discussions and manual analysis procedures.
Reference: [3] <author> J. D. Reese. </author> <title> Software Deviation Analysis. </title> <type> PhD thesis, </type> <institution> University of California, Irvine, </institution> <year> 1996. </year>
Reference-contexts: A deviation formula is the way by which the deviations of a function may be determined from the deviations and actual values of its inputs. A complete set of deviation formulas and their derivations can be found in <ref> [3] </ref>. The augmented causality diagram of the tank example is rather larger than the original diagram, and the reader will not be burdened with a complete example, but the fragment representing Pressure d is shown in Figure 4. 1 Note that the deviation could be calculated in other ways. <p> With the new constraint the output is now either too high or too low. The backward definite function is essentially the inverse relation of a node's operator. See Reese <ref> [3] </ref> for definitions of these relations. The augmented causality diagram, input deviations, and list of safety-critical variables is passed to the search algorithm, which constructs a tree of states. The state formed by the input deviations is the root of the search tree.
Reference: [4] <author> J. Suokas. </author> <title> The role of safety analysis in accident prevention. </title> <journal> Accident Analysis and Prevention, </journal> <volume> 20(1) </volume> <pages> 67-85, </pages> <year> 1988. </year> <month> 14 </month>
Reference-contexts: A third limitation arises from the fact that HAZOP is a flow-based analysis. Deviations from within components or processes are not inspected directly; instead, a deviation within a component (as well as a human error or other environmental disturbance) is assumed to be manifested as a disturbed flow <ref> [4] </ref>. A purely flow-oriented approach may cause the analyst to neglect process-related malfunctions and hazards in favor of pipe-related causes and effects. Because HAZOP concentrates on physical properties of the system [4], it is not directly applicable to analyzing computer input and output. <p> (as well as a human error or other environmental disturbance) is assumed to be manifested as a disturbed flow <ref> [4] </ref>. A purely flow-oriented approach may cause the analyst to neglect process-related malfunctions and hazards in favor of pipe-related causes and effects. Because HAZOP concentrates on physical properties of the system [4], it is not directly applicable to analyzing computer input and output. Several manual techniques have been suggested to extend HAZOP to incorporate inspection of computer hardware and software.
References-found: 4

