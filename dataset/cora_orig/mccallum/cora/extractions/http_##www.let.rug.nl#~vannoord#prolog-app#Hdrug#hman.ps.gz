URL: http://www.let.rug.nl/~vannoord/prolog-app/Hdrug/hman.ps.gz
Refering-URL: http://www.let.rug.nl/~vannoord/prolog-app/Hdrug/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: HDRUG: a Graphical User Environment for Natural Language Processing in Prolog  
Author: Gertjan van Noord Alfa-informatica and BCN 
Affiliation: University of Groningen  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Gosse Bouma and Gertjan van Noord. </author> <title> Head-driven parsing for lexicalist grammars: Experimental results. </title> <booktitle> In Sixth Conference of the European Chapter of the Association for Computational Linguistics, </booktitle> <address> Utrecht, </address> <year> 1993. </year>
Reference-contexts: TG : DCG for Dutch, originally used as illustration for semantic-head-driven generation ([12, 11]. Furthermore, some of the parsers were used for the timings of the paper co-authored with G. Bouma on the potential efficiency of head-driven parsing <ref> [1] </ref>. 4 The examples involving L A T E X and trees are only available if Treemaker is installed. 5 In order for TreeMaker to adjust the vertical distances between nodes, we first have to set the nodeskip flag to an appropriate value. <p> Furthermore, an optional argument of `0' or `1' indicates whether the shell should be stolen upon restart. This could be defined as follows: :- del_command (mycmd). mycmd (restart_x (Arg)) --&gt; [rx], rxarg (Arg). rxarg (1) --&gt; <ref> [1] </ref>. rxarg (0) --&gt; [0]. rxarg (0) --&gt; []. :- add_command (mycmd). 24 3.9 Viewing Prolog Definitions If you want to use Hdrug's built-in facilities to view Prolog clauses, then it is neccessary that these clauses are accessible via the predicate user clause/2. <p> Furthermore, lists of typed objects will be shown appropriately. For example: [-user]. | list_type (h,t). | -user consulted, 20 msec 48 bytes ^D | ?- X:t:h:cat =&gt; verb. X = [_A,sign (_K,cat (verb (_J,_I,_H,_G),_F,_E),_D,_C,_B)|_L] ? yes | ?- X:t:h:cat =&gt; verb, latex_fs (fs (X)). <ref> [1] </ref> 6835 X = [_A,sign (_K,cat (verb (_J,_I,_H,_G),_F,_E),_D,_C,_B)|_L] ? produces: h ; sign cat : verb 4.5.5 Extensionality Direct subtypes of type `top' are represented using an extra variable position. This is to make sure that objects are only identical if they have been unified.
Reference: [2] <author> Gosse Bouma and Gertjan van Noord. </author> <title> Constraint-based categorial grammar. </title> <booktitle> In 31th Annual Meeting of the Association for Computational Linguistics, </booktitle> <address> New Mexico, </address> <year> 1994. </year>
Reference-contexts: TL : HPSG grammar for Dutch using delayed evaluation techniques to implement recursive lexical rules (directory LexRules). Cf. <ref> [14, 2, 3] </ref>. TT : Small Tree Adjoining Grammar + 9 related head-corner parsing algorithms for headed Lexicalized and Feature-based TAG's (based on my paper on TAGs [13]). TG : DCG for Dutch, originally used as illustration for semantic-head-driven generation ([12, 11]. <p> For this example the value of this flag has been set to `off' in order for all attributes to appear. 11 TC : Constraint-based Categorial Grammar for Dutch written by G.Bouma, slightly adopted by G. van Noord for Hdrug. <ref> [2] </ref>. TD : The smallest possible DCG. Illustration what you need to do minimally to adapt a grammar / parser to Hdrug. TX : Extraposition grammar based on the paper by Pereira.
Reference: [3] <author> Gosse Bouma and Gertjan van Noord. </author> <title> A lexicalist account of the dutch verb cluster. </title> <editor> In Gosse Bouma and Gertjan van Noord, editors, </editor> <booktitle> CLIN IV, Papers from the Fourth Clin Meeting, </booktitle> <address> Groningen, </address> <year> 1994. </year>
Reference-contexts: TL : HPSG grammar for Dutch using delayed evaluation techniques to implement recursive lexical rules (directory LexRules). Cf. <ref> [14, 2, 3] </ref>. TT : Small Tree Adjoining Grammar + 9 related head-corner parsing algorithms for headed Lexicalized and Feature-based TAG's (based on my paper on TAGs [13]). TG : DCG for Dutch, originally used as illustration for semantic-head-driven generation ([12, 11].
Reference: [4] <author> Bob Carpenter. </author> <title> The attribute logic engine user guide. </title> <type> Technical report, </type> <institution> Laboratory for Computatonal Linguistics, Carnegie Mellon University, Pittsburgh, </institution> <year> 1992. </year>
Reference-contexts: Let's assume we select the lexical entry `krant' (newspaper). This produces the output given here in figure 1.10. 1.2 What example grammars/parsers/generators are pro vided? Currently the following scripts are built: TA : Ale 2.0 HPSG grammar, written by Bob Carpenter and Gerald Penn. <ref> [4] </ref>, [5]. TL : HPSG grammar for Dutch using delayed evaluation techniques to implement recursive lexical rules (directory LexRules). Cf. [14, 2, 3]. TT : Small Tree Adjoining Grammar + 9 related head-corner parsing algorithms for headed Lexicalized and Feature-based TAG's (based on my paper on TAGs [13]).
Reference: [5] <author> Bob Carpenter. </author> <title> The Logic of Typed Feature Structures. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Let's assume we select the lexical entry `krant' (newspaper). This produces the output given here in figure 1.10. 1.2 What example grammars/parsers/generators are pro vided? Currently the following scripts are built: TA : Ale 2.0 HPSG grammar, written by Bob Carpenter and Gerald Penn. [4], <ref> [5] </ref>. TL : HPSG grammar for Dutch using delayed evaluation techniques to implement recursive lexical rules (directory LexRules). Cf. [14, 2, 3]. TT : Small Tree Adjoining Grammar + 9 related head-corner parsing algorithms for headed Lexicalized and Feature-based TAG's (based on my paper on TAGs [13]).
Reference: [6] <author> C.S. Mellish. </author> <title> Implementing systemic classification by unification. </title> <journal> Computational Linguistics, </journal> <volume> 14(1), </volume> <year> 1988. </year>
Reference-contexts: The motivation for such an approach might be that you want feature structures for readability on the one hand, but Prolog terms and Prolog unification of such terms for effiency reasons internally. The package is heavily influenced by the work of Chris Mellish <ref> [6] </ref>. 4.5.1 Types Before feature structures can be compiled into terms, a number of type declarations need to be specified. The declarations that need to be defined are top/1, type/3 and at/1. These three definitions define a type hierarchy. This hierarchy has the shape of a tree. <p> This is useful because disjunction and negation can be handled by ordinary unification in this way <ref> [6] </ref>. Luckily the pretty printing routines will turn such complex turns back into something more readible: | ?- X: agr =&gt; (sg & mas ; ~2 & neut), latex_fs (fs (X)). produces: agr : 1&neut;sg&mas;3&neut 4.6 The lex string library This library provides the predicate lex string/1.
Reference: [7] <author> Richard A. O'Keefe. </author> <title> The Craft of Prolog. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: For some discussion and techniques that are defined in this library refer to <ref> [7] </ref>. The library provides two predicates: add linking clause/3 and del linking clause/3. <p> Because we want to be able to have multiple tree formats around, we cannot simply define a tree format in an application using Prolog predicates, as this would erase the existing tree formats. Therefore, we use a `link-clause' technique from <ref> [7] </ref> to add definitions to existing definitions. In the case at hand, this is done using two directives.
Reference: [8] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This example is taken from the TD application. The predicate simply sources an application specific Tcl/Tk file. gram_startup_hook_end :- tcl_eval ('source $hdrug_library/SP_dcg.tcl'). The file `SP dcg.tcl' is a Tcl/Tk source. If you're not familiar with Tcl/Tk, read Ousterhout's excellent introductory book <ref> [8] </ref>. N.B. Note that Tcl/Tk commands should only be issued if the Tcl/Tk interpreter is actually running, i.e. after the x/0 command has been issued. 3.8 Extending the Command Interpreter It is possible to add commands to the command interpreter using the linking technique described in section 4.2.
Reference: [9] <author> Fernando C.N. Pereira. </author> <title> Extraposition grammars. </title> <journal> Computational Linguistics, </journal> <volume> 7(4), </volume> <year> 1981. </year>
Reference-contexts: TD : The smallest possible DCG. Illustration what you need to do minimally to adapt a grammar / parser to Hdrug. TX : Extraposition grammar based on the paper by Pereira. Can also be used to find out what you need to do to include a grammar into Hdrug. <ref> [9] </ref>. 1.3 Comparison This package might be compared with Pleuk (by Jo Calder et al). One of the things of Pleuk that I didn't like was the use of the GM interface to Interviews (that comes standard with the Sicstus library).
Reference: [10] <author> Peter Ross. </author> <title> Advanced Prolog. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: This library is based on <ref> [10] </ref>. A flag consists of a ground key (the `global variable') and a value (arbitrary Prolog term). The most important predicates are: flag (?Flag) is true if Flag is a flag.
Reference: [11] <author> Stuart M. Shieber, Gertjan van Noord, Robert C. Moore, and Fernando C.N. Pereira. </author> <title> Semantic-head-driven generation. </title> <journal> Computational Linguistics, </journal> <volume> 16(1), </volume> <year> 1990. </year>
Reference: [12] <author> Gertjan van Noord. </author> <title> An overview of head-driven bottom-up generation. </title> <editor> In Robert Dale, Chris Mellish, and Michael Zock, editors, </editor> <booktitle> Current Research in Natural Language Generation. </booktitle> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference: [13] <author> Gertjan van Noord. </author> <title> Head corner parsing for tag. </title> <journal> Computational Intelligence, </journal> <volume> 10(4), </volume> <year> 1994. </year>
Reference-contexts: TL : HPSG grammar for Dutch using delayed evaluation techniques to implement recursive lexical rules (directory LexRules). Cf. [14, 2, 3]. TT : Small Tree Adjoining Grammar + 9 related head-corner parsing algorithms for headed Lexicalized and Feature-based TAG's (based on my paper on TAGs <ref> [13] </ref>). TG : DCG for Dutch, originally used as illustration for semantic-head-driven generation ([12, 11]. Furthermore, some of the parsers were used for the timings of the paper co-authored with G.
Reference: [14] <author> Gertjan van Noord and Gosse Bouma. </author> <title> Adjuncts and the processing of lexical rules. </title> <booktitle> In Proceedings of the 15th International Conference on Computational Linguistics (COLING), </booktitle> <address> Kyoto, </address> <year> 1994. </year> <month> 41 </month>
Reference-contexts: TL is a small experimental parsing/generation system for Dutch. Some of the underlying motivations for this system are described in <ref> [14] </ref>. This application is started by the UNIX shell command TL. After a short delay this results in the appearance of the Hdrug widget. The Hdrug widget for TL is presented in figure 1.1. At the top of the widget we find a row of menu buttons (the MenuBar). <p> TL : HPSG grammar for Dutch using delayed evaluation techniques to implement recursive lexical rules (directory LexRules). Cf. <ref> [14, 2, 3] </ref>. TT : Small Tree Adjoining Grammar + 9 related head-corner parsing algorithms for headed Lexicalized and Feature-based TAG's (based on my paper on TAGs [13]). TG : DCG for Dutch, originally used as illustration for semantic-head-driven generation ([12, 11].
References-found: 14

