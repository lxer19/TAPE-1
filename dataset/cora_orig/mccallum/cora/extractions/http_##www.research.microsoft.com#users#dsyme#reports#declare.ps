URL: http://www.research.microsoft.com/users/dsyme/reports/declare.ps
Refering-URL: http://www.research.microsoft.com/users/dsyme/projects.html
Root-URL: http://www.research.microsoft.com
Title: DECLARE: A Prototype Declarative Proof System for Higher Order Logic  
Author: Donald Syme 
Date: February 6, 1997  
Abstract: This report describes DECLARE, a prototype implementation of a declarative proof system for simple higher order logic. The purpose of DECLARE is to explore mechanisms of specification and proof that may be incorporated into other theorem provers. It has been developed to aid with reasoning about operational descriptions of systems and languages. Proofs in DECLARE are expressed as proof outlines, in a language that approximates written mathematics. The proof language includes specialised constructs for (co-)inductive types and relations. The system includes an abstract/article mechanism that provides a way of isolating the process of formalization from what results, and simultaneously allow the efficient separate processing of work units. After describing the system we discuss our approach to two subsidiary issues: automation and the interactive environment provided to the user. 
Abstract-found: 1
Intro-found: 1
Reference: [Bun91] <author> A. Bundy. </author> <title> A science of reasoning. </title> <editor> In J-L. Lassez and G. Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson, </booktitle> <pages> pages 178-198. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: The choice would be recorded as an entry in the proof document. * Presenting the user with expansions and simplifications of existing formu lae, again recording the results in the proof document. * Performing proof planning <ref> [Bun91] </ref> and inserting the resulting proof plan as a part of the proof outline.
Reference: [CM92] <author> J. Camilleri and T.F Melham. </author> <title> Reasoning with inductively defined relations in the HOL theorem prover. </title> <type> Technical Report 265, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: Next we define the evaluation relation for the language as the least fixed point of a set of rules. The declaration is shown below. Relations defined by least fixed points also have a well-known interpretation in higher order logic <ref> [Pau94, CM92] </ref>. relation EVAL = lfp (Lam) Lam (x,e1) --&gt; Lam (x,e1) & e2 --&gt; v1 & subst (M,x,v1) --&gt; v2 ------------------------------- Note that what we are constructing is a document, rather than a script, something along the lines of an Isabelle theory file.
Reference: [GM93] <author> M.J.C Gordon and T.F Melham. </author> <title> Introduction to HOL: A Theorem Proving Assistant for Higher Order Logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: We expand on portability issues in Section 7.2. DECLARE is not a polished or complete system. The aim of DECLARE is not to supplant theorem provers such as Isabelle, PVS or HOL <ref> [Pau90, ORR + 96, GM93] </ref>, but to explore mechanisms of specification and proof that may eventually get incorporated into those systems. These mechanisms can complement rather than compete with existing methodology.
Reference: [Har96] <author> J. R. Harrison. </author> <title> A Mizar Mode for HOL. </title> <editor> In J. Grundy J. von Wright and J. Harrison, editors, </editor> <title> Theorem Proving in Higher Order Logics: </title> <booktitle> 9th International Conference, Lecture Notes in Computer Science, </booktitle> <pages> pages 203-230. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: Proofs in DECLARE are expressed as proof outlines, written in a language that approximates written mathematics. As such, DECLARE proofs are meant to express a declarative intent, and not a program. This builds on work done with similar languages by the Mizar group [Muz93] and Harrison <ref> [Har96] </ref>. Our language is similar to the Mizar language, but has been enhanced with constructs that makes certain kinds of proofs more succinct. We describe the proof language by example in Sections 2 and 3.
Reference: [Har97] <author> J. R. Harrison. </author> <title> Proof style. </title> <type> Technical Report 410, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: Besides abstracts and articles, the key feature of DECLARE is the language used to express proofs. Before we discuss this language, we must be clear what we mean by a `proof' in this context. Harrison <ref> [Har97] </ref> describes several different uses of the word in the field of automated reasoning. Three of these are of interest here: 1. What is found in a mathematical text book, i.e. a sketch given in a mixture of natural, symbolic and formal languages, sufficient to convince the reader. 2. <p> We describe the proof language by example in Sections 2 and 3. The distinction between declarative and procedural descriptions of proofs has been explored in some detail by Harrison <ref> [Har97] </ref>, where he rightly points out that the distinction is very hard to make precise. Along with him we believe that the distinction is useful one, even if only understood in a weak way. <p> We look toward future work in Section 7. 1.2 The Advantages of DECLARE Some of the advantages of using a proof language like DECLARE's have been outlined by Harrison <ref> [Har97] </ref>.
Reference: [Mel89] <author> T.F Melham. </author> <title> Automating recursive type definitions in higher-order logic. </title> <editor> In G. Birtwhistle and P.A. Subrahmanyam, editors, </editor> <booktitle> Current Trends in Hardware Verification and Automated Theorem Proving, </booktitle> <pages> pages 341-386. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: (Name: string) | Lam of (Bvar: string) * (Body: exp) | App of (Rator: exp) * (Rand: exp); const subst : exp * string * exp -&gt; exp; Datatypes have a simple, well-understood interpretation in higher order logic and they represent a conservative (i.e. soundness preserving) extension to the logic <ref> [Mel89] </ref>. All definitional mechanisms in DECLARE are conservative, up to various proof obligations. DECLARE supports mutually recursive datatypes with nested recursion and possibly infinite branching, though in this case we just have a simple datatype.
Reference: [Muz93] <author> M. Muzalewski. </author> <title> An Outline of PC Mizar. </title> <editor> Foundation Philippe le Hodey, </editor> <year> 1993. </year>
Reference-contexts: Proofs in DECLARE are expressed as proof outlines, written in a language that approximates written mathematics. As such, DECLARE proofs are meant to express a declarative intent, and not a program. This builds on work done with similar languages by the Mizar group <ref> [Muz93] </ref> and Harrison [Har96]. Our language is similar to the Mizar language, but has been enhanced with constructs that makes certain kinds of proofs more succinct. We describe the proof language by example in Sections 2 and 3. <p> Section 2 This terminology comes from the Mizar system <ref> [Muz93] </ref> 2 2 describes a short example of the use of DECLARE's proof language. In Section 3 we give more details of the proof language, in particular specialised constructs for induction and co-induction. <p> We encourage developers and users of other theorem provers to consider the ideas contained in DECLARE with a view to incorporating them in the systems they use. 3 1.3 Related Work We have already mentioned that DECLARE is inspired by the Mizar system <ref> [Muz93] </ref>, and Harrison's `Mizar Mode' work. While Mizar is a far more complete and established system, it is particularly limited by the amount of automation that is supported. <p> For example, we provide (co-)induction and case analysis constructs suited for reasoning about (co-)inductive types and relations. In Mizar such reasoning is possible, but clumsy (for instance see the Mizar development of the syntax of ZF terms <ref> [Muz93] </ref>). Also, DECLARE proofs are `backward', in the sense that the goal to be proved is always fully specified. Mizar proofs are normally `forward', though a small backward element is possible through the use of the keyword thesis.
Reference: [ORR + 96] <author> S. Owre, S. Rajan, J.M. Rushby, N. Shankar, and M.K. Srivas. PVS: </author> <title> Combining specification, proof checking, and model checking. </title> <editor> In Ra-jeev Alur and Thomas A. Henzinger, editors, </editor> <booktitle> Computer-Aided Verification, CAV '96, volume 1102 of Lecture Notes in Computer Science, </booktitle> <pages> 24 pages 411-414, </pages> <address> New Brunswick, NJ, July/August 1996. </address> <publisher> Springer--Verlag. </publisher>
Reference-contexts: We expand on portability issues in Section 7.2. DECLARE is not a polished or complete system. The aim of DECLARE is not to supplant theorem provers such as Isabelle, PVS or HOL <ref> [Pau90, ORR + 96, GM93] </ref>, but to explore mechanisms of specification and proof that may eventually get incorporated into those systems. These mechanisms can complement rather than compete with existing methodology. <p> Induction and co-induction are good examples of constructs that require special treatment in the proof language if an acceptable level of declarative proof is to be reached. 3.3 Enhancing the language for the PVS logic A prototype implementation of the DECLARE proof language has been performed for the PVS <ref> [ORR + 96] </ref> proof system. Although we will not give full details here, it is worth noting how the proof language must change when we move to a more powerful logic. <p> Actually building such an environment would need significant investment of resources, and is beyond the scope of this present report, but methodically considering the options is the first step to take. The PVS <ref> [ORR + 96] </ref> project has demonstrated that a superior interactive environment is achieved when a document processing style of interaction is adopted in a theorem prover.
Reference: [Pau90] <author> L. C. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 361-385. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: We expand on portability issues in Section 7.2. DECLARE is not a polished or complete system. The aim of DECLARE is not to supplant theorem provers such as Isabelle, PVS or HOL <ref> [Pau90, ORR + 96, GM93] </ref>, but to explore mechanisms of specification and proof that may eventually get incorporated into those systems. These mechanisms can complement rather than compete with existing methodology. <p> Potential case splits are specified by higher-order case splitting theorems like those used in the Isabelle simplifier <ref> [Pau90] </ref>. * Finally, when simplification and case-splitting has run its course, a simple tableau prover is called on the resulting goals. The default proof checker of DECLARE is hard-coded into the system.
Reference: [Pau94] <author> L. C. Paulson. </author> <title> A fixed point approach to implementing (co)inductive definitions. </title> <editor> In A. Bundy, editor, </editor> <booktitle> 12th International Conference on Automated Deduction, </booktitle> <pages> pages 148-161. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Next we define the evaluation relation for the language as the least fixed point of a set of rules. The declaration is shown below. Relations defined by least fixed points also have a well-known interpretation in higher order logic <ref> [Pau94, CM92] </ref>. relation EVAL = lfp (Lam) Lam (x,e1) --&gt; Lam (x,e1) & e2 --&gt; v1 & subst (M,x,v1) --&gt; v2 ------------------------------- Note that what we are constructing is a document, rather than a script, something along the lines of an Isabelle theory file.
Reference: [Sym95] <author> D. R. Syme. </author> <title> A new interface for HOL ideas, issues and implementation. </title> <editor> In J. Alves-Foss, editor, </editor> <title> Higher Order Logic Theorem Proving and its Applications, </title> <publisher> LNCS, </publisher> <pages> pages 17-31. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: However, templates are a `dumb' mechanism, but CAPW actions depend on interpreting the logical 20 content of a document. The computer cannot sensibly layout the cases of an induction without interpreting the document to the point of interest. Some instances of CAPW have been implemented in CHOL and TkHOL <ref> [The92, Sym95] </ref>, where fragments of tactic scripts are produced by interaction in a structure editor. Dropping tactics, and moving to a declarative proof language greatly improves the possibilities for CAPW. 7 Summary and Future Work In this report we have presented a prototype declarative proof system for higher order logic.
Reference: [The92] <author> Laurent Thery. </author> <title> Real theorem provers deserve real interfaces. </title> <booktitle> In Software Engineering Notes, </booktitle> <volume> volume 17. </volume> <publisher> ACM Press, </publisher> <year> 1992. </year> <month> 25 </month>
Reference-contexts: However, templates are a `dumb' mechanism, but CAPW actions depend on interpreting the logical 20 content of a document. The computer cannot sensibly layout the cases of an induction without interpreting the document to the point of interest. Some instances of CAPW have been implemented in CHOL and TkHOL <ref> [The92, Sym95] </ref>, where fragments of tactic scripts are produced by interaction in a structure editor. Dropping tactics, and moving to a declarative proof language greatly improves the possibilities for CAPW. 7 Summary and Future Work In this report we have presented a prototype declarative proof system for higher order logic.
References-found: 12

