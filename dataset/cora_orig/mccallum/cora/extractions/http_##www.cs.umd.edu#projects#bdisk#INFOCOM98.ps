URL: http://www.cs.umd.edu/projects/bdisk/INFOCOM98.ps
Refering-URL: http://www.cs.umd.edu/projects/bdisk/papers.html
Root-URL: 
Email: demet@cs.umd.edu, franklin@cs.umd.edu  
Title: Scheduling for Large-Scale On-Demand Data Broadcasting  
Author: Demet Aksoy, Michael Franklin 
Address: College Park MD  
Affiliation: Computer Science Department and UMIACS University of Maryland,  
Abstract: THIS PAPER APPEARS IN THE 1998 IEEE INFOCOM CONFERENCE, SAN FRANCISCO, CA, 1998 1 Abstract| Recent advances in telecommunications have enabled the deployment of broadcast-based wide-area information services that provide on-demand data access to very large client populations. In order to effectively utilize a broadcast medium for such a service, it is necessary to have efficient, on-line scheduling algorithms that can balance individual and overall performance, and can scale in terms of data set sizes, client populations, and broadcast bandwidth. In this study we introduce a parameterized algorithm that provides good performance across all of these criteria and can be tuned to emphasize either average or worst case waiting time. Unlike previous work on low overhead scheduling, the algorithm is not based on estimates of the access probabilities of items, but rather, it makes scheduling decisions based on the current queue state, allowing it to easily adapt to changes in the intensity and distribution of the workload. We examine the performance of the algorithm using a simulation model. 
Abstract-found: 1
Intro-found: 1
Reference: [Acha95a] <author> S. Acharya, R.Alonso, M. Franklin, S. Zdonik, </author> <title> "Broadcast Disks: Data Management for Asymmetric Communication Environments", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <year> 1995. </year>
Reference-contexts: Recently, scheduling techniques from the real-time community have been applied to data broadcast by Baruah and Bestavros [Baru96]. The Broadcast Disks project [Acha95b] has investigated a number of aspects of data broadcast using periodic push including scheduling and client caching <ref> [Acha95a] </ref>, prefetching [Acha96] and integrating push and pull over a broadcast channel [Acha97]. The issue of combining broadcast push and unicast pull is addressed in [Stath97]. The mobility group at Rutgers [Imie94] has done significant work on data broadcasting in mobile environments.
Reference: [Acha95b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Dissemination-based Data Delivery Using Broadcast Disks", </title> <journal> IEEE Personal Communications, </journal> <volume> 2(6), </volume> <year> 1995. </year>
Reference-contexts: BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Recently, scheduling techniques from the real-time community have been applied to data broadcast by Baruah and Bestavros [Baru96]. The Broadcast Disks project <ref> [Acha95b] </ref> has investigated a number of aspects of data broadcast using periodic push including scheduling and client caching [Acha95a], prefetching [Acha96] and integrating push and pull over a broadcast channel [Acha97]. The issue of combining broadcast push and unicast pull is addressed in [Stath97].
Reference: [Acha96] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Prefetching from a Broadcast Disk". </title> <booktitle> Proceedings of the International Conference on Data Engineering, </booktitle> <address> New Orleans, LA, </address> <month> Feb </month> <year> 1996. </year>
Reference-contexts: Recently, scheduling techniques from the real-time community have been applied to data broadcast by Baruah and Bestavros [Baru96]. The Broadcast Disks project [Acha95b] has investigated a number of aspects of data broadcast using periodic push including scheduling and client caching [Acha95a], prefetching <ref> [Acha96] </ref> and integrating push and pull over a broadcast channel [Acha97]. The issue of combining broadcast push and unicast pull is addressed in [Stath97]. The mobility group at Rutgers [Imie94] has done significant work on data broadcasting in mobile environments.
Reference: [Acha97] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Balancing Push and Pull for Data Broadcast", </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: The client population model generates non-blocking requests with exponential inter-arrival times to 1 results in the approximate algorithm behaving identically to the regular pruning-based RxW algorithm. 5 The cost of back-channel requests becomes more important when trading off between server push and client pull over the broadcast as in <ref> [Acha97] </ref>. with mean . We use an open system model since our work is aimed at supporting extremely large, highly dynamic client populations, and such client populations cannot be realistically modeled with a closed simulation system. The request pattern is shaped with a Zipf distribution [Knuth81]. <p> The Broadcast Disks project [Acha95b] has investigated a number of aspects of data broadcast using periodic push including scheduling and client caching [Acha95a], prefetching [Acha96] and integrating push and pull over a broadcast channel <ref> [Acha97] </ref>. The issue of combining broadcast push and unicast pull is addressed in [Stath97]. The mobility group at Rutgers [Imie94] has done significant work on data broadcasting in mobile environments. A main focus has been on indexing in order to reduce power consumption at the mobile clients.
Reference: [Aksoy97] <author> D.Aksoy, M.Franklin. </author> <title> "On-Demand Broadcast Scheduling", </title> <type> Technical Report, </type> <institution> CS-TR-3854, University of Maryland, </institution> <year> 1997. </year>
Reference-contexts: Note however, that RxW makes decisions based only on the current state of outstanding requests, and does not depend on estimates of page access probabilities. A detailed analytical study of the average waiting time and the limiting behavior of RxW is provided in <ref> [Aksoy97] </ref>. B.2 The Pruning Algorithm As with other O (N) scheduling algorithms, the overhead of RxW scheduling can be reduced by performing more work during request processing in order to keep the request information better organized. <p> The approximations, however, do use a threshold value that is dependent on previous performance. To test the robustness of the RxW variants, we performed a detailed sensitivity analysis. Due to space constraints, we briefly summarize the results of that analysis here. The results are reported in more detail in <ref> [Aksoy97] </ref>. In one set of experiments, the skewness of the access pattern (i.e., ) was varied between 1 (default) and 0 (a uniform distribution). As the skew is reduced, all of the algorithms converge to the same average waiting time (at = 0).
Reference: [Baru96] <author> S.Baruah, A.Bestavros, </author> <title> "Pinwheel Scheduling for Fault-tolerant Broadcast Disks in Real-time Database Systems", </title> <type> Technical Report TR-96-023, </type> <institution> Boston University, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Recently, scheduling techniques from the real-time community have been applied to data broadcast by Baruah and Bestavros <ref> [Baru96] </ref>. The Broadcast Disks project [Acha95b] has investigated a number of aspects of data broadcast using periodic push including scheduling and client caching [Acha95a], prefetching [Acha96] and integrating push and pull over a broadcast channel [Acha97]. The issue of combining broadcast push and unicast pull is addressed in [Stath97].
Reference: [Best96] <author> A.Bestavros,,C.Cunha, </author> <title> "Server-initiated Document Dissemination for the WWW", IEEE Data Engineering Bulletin, </title> <year> 1996 </year>
Reference-contexts: A taxonomy of data delivery mechanisms (including various 8 forms of broadcast) along with a framework for describing dissemination-based systems is provided in [Fran97]. Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan96], <ref> [Best96] </ref>, Advanced Traveler Information Systems [Shekhar96] and dissemination using satellite networks [Dao96]. The Datacycle Project [Herm87], [Bowen92] at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing. An other early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Bowen92] <author> T. Bowen, G. Gopal, K. Lee, A. </author> <title> Weinrib, </title> <booktitle> "The Datacycle Architecture", </booktitle> <volume> CACM Vol 32, No 12, </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan96], [Best96], Advanced Traveler Information Systems [Shekhar96] and dissemination using satellite networks [Dao96]. The Datacycle Project [Herm87], <ref> [Bowen92] </ref> at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing. An other early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Dao96] <author> S. Dao and B. Perry, </author> <title> "Information Dissemination in Hybrid Satellite/Terrestrial Networks", </title> <booktitle> Data Engineering, </booktitle> <month> 19(13), </month> <year> 1996. </year>
Reference-contexts: A taxonomy of data delivery mechanisms (including various 8 forms of broadcast) along with a framework for describing dissemination-based systems is provided in [Fran97]. Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan96], [Best96], Advanced Traveler Information Systems [Shekhar96] and dissemination using satellite networks <ref> [Dao96] </ref>. The Datacycle Project [Herm87], [Bowen92] at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing. An other early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [DirecPC] <institution> Hughes Network Systems, </institution> <note> http://www.direcpc.com, July 97. </note>
Reference: [Dyke86] <author> H.D. Dykeman, M. Ammar, J.W. Wong, </author> <title> "Scheduling Algorithms for Videotex Systems Under Broadcast Delivery", </title> <booktitle> IEEE International Conference on Communications, </booktitle> <address> Toronto, Canada, </address> <year> 1986. </year>
Reference-contexts: C. Previous Algorithms As stated in the Introduction, several algorithms for on-demand broadcast scheduling have been proposed previously. In this section, we describe existing algorithms and discuss their limitations with respect to the criteria that were outlined in the preceding section. Dykeman et al. <ref> [Dyke86] </ref> studied on-line scheduling algorithms, and were the first to point out that traditional FCFS scheduling would provide poor average wait time for a broadcast environment when the access distribution for data items was non-uniform. They proposed several algorithms aimed at providing improved performance. The algorithms studied in [Dyke86] (and later <p> et al. <ref> [Dyke86] </ref> studied on-line scheduling algorithms, and were the first to point out that traditional FCFS scheduling would provide poor average wait time for a broadcast environment when the access distribution for data items was non-uniform. They proposed several algorithms aimed at providing improved performance. The algorithms studied in [Dyke86] (and later described in [Wong88]) are the following: * First Come First Served (FCFS): broadcasts the pages in the order they are requested. * Most Requests First (MRF): broadcasts the page with the maximum number of pending requests. * Most Requests First Lowest (MRFL): is essentially same as MRF, but <p> Client requests for pages are generated using a Zipf distribution of maximum skewness (parameter =1). The results were generated using the simulation environment and default parameters that we will describe in Section IV. As in <ref> [Dyke86] </ref>, the overheads associated with running the scheduling algorithm at the server are not modeled here. Fig. 2. Average Wait Time for Algorithms of Dykeman et al. As can be seen in the figure, the best performance overall in this case is provided by LWF. <p> For a high-bandwidth system with a large database, such a scheduling algorithm would likely become a bottleneck. 2 MRF and MRFL algorithms were introduced as lower-overhead alternatives. The results of Figure 2 agree with those of <ref> [Dyke86] </ref>, [Wong88] except for two key points. First, the earlier work did not investigate the performance of the algorithms under very high loads, so it did not identify the flattening of the performance curves for all of the algorithms under high load. <p> The results showed that the number of request queue entries scanned by RxW and its approximations still remained far below that of LWF. V. Related Work In this paper we have presented a new on-demand scheduling algorithm for large-scale data broadcast. The directly relevant previous work on scheduling algorithms <ref> [Dyke86] </ref>, [Wong88], [Vaidya96], [Su97] has been addressed in detail in Section II. In addition to this directly related work, there has been much recent interest in other areas of data broadcasting.
Reference: [Fran97] <author> M. Franklin, S. Zdonik, </author> <title> "A Framework for Scalable Dissemination-Based Systems", </title> <booktitle> Proc. ACM OOPSLA Conf., </booktitle> <year> 1997. </year>
Reference-contexts: In addition to this directly related work, there has been much recent interest in other areas of data broadcasting. A taxonomy of data delivery mechanisms (including various 8 forms of broadcast) along with a framework for describing dissemination-based systems is provided in <ref> [Fran97] </ref>. Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan96], [Best96], Advanced Traveler Information Systems [Shekhar96] and dissemination using satellite networks [Dao96]. The Datacycle Project [Herm87], [Bowen92] at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing. <p> In terms of future work, we plan to integrate the on-demand scheduling described here, with push-based and other forms of data delivery as part of a larger Dissemination Based Information Systems (DBIS) framework as described in <ref> [Fran97] </ref>. We also plan to investigate the scheduling of broadcast for hierarchical broadcast environments. Acknowledgements The authors would like to thank to Ugur Cetintemel, Bjorn Thor Jonsson and Mustafa Uysal for their helpful comments on an earlier draft of this paper.
Reference: [Giff90] <author> D. Gifford, </author> <title> "Polychannel Systems for Mass Digital Communication", </title> <journal> CACM, </journal> <volume> 37(10), </volume> <year> 1994. </year>
Reference-contexts: The Datacycle Project [Herm87], [Bowen92] at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing. An other early effort in information broadcasting, the Boston Community Information System (BCIS) is described in <ref> [Giff90] </ref>. BCIS broadcast news articles and information over an FM channel to clients with personal computers specially equipped with radio receivers. Recently, scheduling techniques from the real-time community have been applied to data broadcast by Baruah and Bestavros [Baru96].
Reference: [Herm87] <author> G.Herman, G.Gopal K.Lee, A.Weinrib, </author> <title> "The Datacycle Architecture for Very High Throughput Database Systems", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan96], [Best96], Advanced Traveler Information Systems [Shekhar96] and dissemination using satellite networks [Dao96]. The Datacycle Project <ref> [Herm87] </ref>, [Bowen92] at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing. An other early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Hybrid] <institution> High-Speed Data Access for Teleworkers, </institution> <note> http://www.hybrid.com. </note>
Reference: [Imie94] <author> T. Imeilenski, B.R. Badrinath, </author> <title> "Energy Efficient Indexing On Air", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The issue of combining broadcast push and unicast pull is addressed in [Stath97]. The mobility group at Rutgers <ref> [Imie94] </ref> has done significant work on data broadcasting in mobile environments. A main focus has been on indexing in order to reduce power consumption at the mobile clients. Viswanathan [Vis94] has studied integrating push and pull for a mobile broadcast environment. VI.
Reference: [Intel94] <institution> Intel Corporation. </institution> <note> Introduction to Intercast Technology, http://www.intercast.com, 1994. </note>
Reference: [Knuth81] <author> D. Knuth, </author> <booktitle> "The art of Computer Programming Volume II", </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: We use an open system model since our work is aimed at supporting extremely large, highly dynamic client populations, and such client populations cannot be realistically modeled with a closed simulation system. The request pattern is shaped with a Zipf distribution <ref> [Knuth81] </ref>. This is a frequently used distribution for non-uniform data access. It produces access patterns that become increasingly skewed as its parameter increases from 0 (uniform access probability) to 1 (highly skewed).
Reference: [Schw86] <author> H.D. Schewtman, "CSIM: </author> <title> A C-based Process Oriented Simulation Language", </title> <booktitle> Proc. of the Winter Simulation Conf., </booktitle> <year> 1986. </year>
Reference-contexts: IV. Experimental Results A. Simulation Environment Our experiments were performed using a simple simulation model of the system using CSIM <ref> [Schw86] </ref>. As with previous studies, the model is intended to capture only the quality of the schedule produced by the given scheduling algorithms. As such, it does not include the overheads of scheduling and request processing at the server.
Reference: [Shekhar96] <author> S. Shekhar, A. Fetterer and D.R. Liu, </author> <title> "Genesis: An Approach to Data Dissemination in Advanced Traveler Information Sytems", </title> <journal> Data Engineering, </journal> <volume> 19(3), </volume> <year> 1996. </year>
Reference-contexts: A taxonomy of data delivery mechanisms (including various 8 forms of broadcast) along with a framework for describing dissemination-based systems is provided in [Fran97]. Some recent applications of dissemination-based systems include information dissemination on the Internet [Yan96], [Best96], Advanced Traveler Information Systems <ref> [Shekhar96] </ref> and dissemination using satellite networks [Dao96]. The Datacycle Project [Herm87], [Bowen92] at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing. An other early effort in information broadcasting, the Boston Community Information System (BCIS) is described in [Giff90].
Reference: [Stath97] <author> K. Stathatos, N. Roussopoulos, and J.S. Baras, </author> <title> Adaptive Data Broadcast in Hybrid Networks, </title> <booktitle> in Proc. VLDB, </booktitle> <year> 1997. </year>
Reference-contexts: The Broadcast Disks project [Acha95b] has investigated a number of aspects of data broadcast using periodic push including scheduling and client caching [Acha95a], prefetching [Acha96] and integrating push and pull over a broadcast channel [Acha97]. The issue of combining broadcast push and unicast pull is addressed in <ref> [Stath97] </ref>. The mobility group at Rutgers [Imie94] has done significant work on data broadcasting in mobile environments. A main focus has been on indexing in order to reduce power consumption at the mobile clients. Viswanathan [Vis94] has studied integrating push and pull for a mobile broadcast environment. VI.
Reference: [Su97] <author> C.J. Su, L.Tassiulas. </author> <title> "Broadcast Scheduling for Information Distribution", </title> <booktitle> Proc. IEEE INFOCOM, </booktitle> <year> 1997. </year> <title> [Teledesic] "Application of Teledesic Corporation for a Low Earth Satellite System in the Domestic and International Fixed Satellite Services," filed by Teledesic Corporation with the Federal Communications Commission, </title> <address> March 21, </address> <year> 1994. </year>
Reference-contexts: The proper trade-off between these costs is dictated by the types of scalability that are important for a particular environment. 1 The fixed length assumption simplifies the algorithm descriptions and analysis. Recent work in broadcast scheduling has shown how to extend scheduling algorithms to incorporate variable-length items [Vaidya96], <ref> [Su97] </ref>. 2 B.3 Robustness In order to achieve the goals of responsiveness and scalability, a scheduling algorithm will typically employ approximations and/or heuristics. Such heuristics must not be based on static information that will cause the algorithm to perform poorly if the workload or the environment changes. C. <p> As the size of the database increases, the probability of having a tie for the largest number of requests diminishes. Without ties, MRFL degenerates to MRF, and has relatively poor performance. The poor performance of MRFL for larger systems has also recently been shown by Su and Tassiulas <ref> [Su97] </ref>. In that paper, they propose an alternative algorithm, called PIP-0.5 (Priority Index Policy), that performs as well as LWF in average wait time. Unlike LWF, PIP-0.5 can be implemented with an O (1) complexity for choosing the next page to broadcast. <p> V. Related Work In this paper we have presented a new on-demand scheduling algorithm for large-scale data broadcast. The directly relevant previous work on scheduling algorithms [Dyke86], [Wong88], [Vaidya96], <ref> [Su97] </ref> has been addressed in detail in Section II. In addition to this directly related work, there has been much recent interest in other areas of data broadcasting.
Reference: [Vaidya96] <author> N.H. Vaidya and S. Hameed. </author> <title> "Data Broadcast in Asymmetric Wireless Environments". </title> <booktitle> Proc. of Workshop on Satellite-based Information Services (WOSBIS), </booktitle> <address> New York, </address> <month> November, </month> <year> 1996. </year>
Reference-contexts: The proper trade-off between these costs is dictated by the types of scalability that are important for a particular environment. 1 The fixed length assumption simplifies the algorithm descriptions and analysis. Recent work in broadcast scheduling has shown how to extend scheduling algorithms to incorporate variable-length items <ref> [Vaidya96] </ref>, [Su97]. 2 B.3 Robustness In order to achieve the goals of responsiveness and scalability, a scheduling algorithm will typically employ approximations and/or heuristics. Such heuristics must not be based on static information that will cause the algorithm to perform poorly if the workload or the environment changes. C. <p> Furthermore, the history mechanism that must be employed to obtain such probability estimates can result in additional overhead, particularly for very large data sets. Algorithms based on access probabilities and broadcast histories have also been proposed by Vaidya and Hameed <ref> [Vaidya96] </ref>. These algorithms have similar performance to the PIP-0.5 algorithm, and also share that algorithm's limitations in terms of robustness to changing workloads. III. <p> Note that the queue size is limited by N, the number of pages in the database. Thus, the exhaustive RxW algorithm is similar in overhead to other proposed O (N) algorithms, such as <ref> [Vaidya96] </ref>. Note however, that RxW makes decisions based only on the current state of outstanding requests, and does not depend on estimates of page access probabilities. A detailed analytical study of the average waiting time and the limiting behavior of RxW is provided in [Aksoy97]. <p> V. Related Work In this paper we have presented a new on-demand scheduling algorithm for large-scale data broadcast. The directly relevant previous work on scheduling algorithms [Dyke86], [Wong88], <ref> [Vaidya96] </ref>, [Su97] has been addressed in detail in Section II. In addition to this directly related work, there has been much recent interest in other areas of data broadcasting.
Reference: [Vis94] <author> S.R.Viswanathan, </author> <title> "Publishing in Wireless and Wireline Environments", </title> <type> PhD Thesis, </type> <institution> Rutgers University, </institution> <year> 1994. </year>
Reference-contexts: The issue of combining broadcast push and unicast pull is addressed in [Stath97]. The mobility group at Rutgers [Imie94] has done significant work on data broadcasting in mobile environments. A main focus has been on indexing in order to reduce power consumption at the mobile clients. Viswanathan <ref> [Vis94] </ref> has studied integrating push and pull for a mobile broadcast environment. VI. Conclusions In this paper we focused on the challenges of large-scale on-demand data broadcast introduced by high bandwidth broadcasting media such as satellite or cable networks.
Reference: [Wong88] <author> J.W. Wong, </author> <title> "Broadcast Delivery", </title> <booktitle> in Proceedings of IEEE,pp. </booktitle> <pages> 1566-1577, </pages> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: They proposed several algorithms aimed at providing improved performance. The algorithms studied in [Dyke86] (and later described in <ref> [Wong88] </ref>) are the following: * First Come First Served (FCFS): broadcasts the pages in the order they are requested. * Most Requests First (MRF): broadcasts the page with the maximum number of pending requests. * Most Requests First Lowest (MRFL): is essentially same as MRF, but breaks ties in favor of <p> For a high-bandwidth system with a large database, such a scheduling algorithm would likely become a bottleneck. 2 MRF and MRFL algorithms were introduced as lower-overhead alternatives. The results of Figure 2 agree with those of [Dyke86], <ref> [Wong88] </ref> except for two key points. First, the earlier work did not investigate the performance of the algorithms under very high loads, so it did not identify the flattening of the performance curves for all of the algorithms under high load. <p> V. Related Work In this paper we have presented a new on-demand scheduling algorithm for large-scale data broadcast. The directly relevant previous work on scheduling algorithms [Dyke86], <ref> [Wong88] </ref>, [Vaidya96], [Su97] has been addressed in detail in Section II. In addition to this directly related work, there has been much recent interest in other areas of data broadcasting.
Reference: [Yan96] <author> T. Yan and H. Garcia-Molina, </author> <title> "Efficient Dissemination of Information on the Internet", </title> <booktitle> Data Engineering, </booktitle> <month> 19(13), </month> <year> 1996. </year> <month> 9 </month>
Reference-contexts: A taxonomy of data delivery mechanisms (including various 8 forms of broadcast) along with a framework for describing dissemination-based systems is provided in [Fran97]. Some recent applications of dissemination-based systems include information dissemination on the Internet <ref> [Yan96] </ref>, [Best96], Advanced Traveler Information Systems [Shekhar96] and dissemination using satellite networks [Dao96]. The Datacycle Project [Herm87], [Bowen92] at Bellcore investigated the use of a repetitive broadcast medium for database storage and query processing.
References-found: 26

