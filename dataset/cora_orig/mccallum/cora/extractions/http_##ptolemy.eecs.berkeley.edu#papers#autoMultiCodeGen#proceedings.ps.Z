URL: http://ptolemy.eecs.berkeley.edu/papers/autoMultiCodeGen/proceedings.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/autoMultiCodeGen/www/proceedings_1.html
Root-URL: 
Title: Ptolemy: A Framework for Simulating and Prototyping Heterogeneous Systems, International Journal of Computer Simulation spe
Author: J. Buck, S. Ha, E.A. Lee, and D.G. Messerschmitt, [] E.A. Lee and S. Ha, - vol.. [] D.G. Powell, E. A.Lee, and W.C. Newman, p. -. [] S. Ritz, M. Pankert, and H. Meyr p. -. [] E.A. Lee and D.G. Messerschmitt, [] G.C. Sih and E.A. Lee, p. -. [] J.T. Buck and E.A. Lee, [] J.L. Pino, S. Ha, E.A. Lee, and J.T Buck, [] J.L. Pino, [] S. Sriram and E.A. Lee, [] P.K. Murthy, S.S. Bhattacharyya, and E.A. Lee, [] M. Pankert, S. Ritz, and H. Meyr, p. -. 
Address: Berkeley, 1991.  Berkeley, 1993.  Adelaide, South Australia, 1994.  
Affiliation: University of California at  University of California at  
Note: CONCLUSIONS AND FUTURE WORK REFERENCES [1]  ICASSP, vol. 5, San Francisco, CA, IEEE, 1992,  Berkeley, CA, USA, IEEE Comput. Soc. Press, 1992,  Proceedings of the IEEE vol. 75, no. 9, 1987, p. 1235-1245. [6] S.S. Bhattacharyya,  IEEE Transactions on Parallel and Distributed Systems vol. 4, no. 6, 1993,  ICASSP,  
Pubnum: Memorandum UCB/ERL M93/35,  
Abstract: In this paper, we have presented an extensible framework to generate code for heterogeneous systems. This environment promotes code reuse in the form of actor and target libraries. The send and receive actors def ined for a particular target can be used to construct any of the interfaces described. The first type of interface is one in which pairs of send and receive actors are spliced into the graph as specified by an SDF parallel scheduler. Allowing the scheduler to fully partition the graph exposes maximal parallelism and will not introduce deadlock. However, this configuration is inappropriate in systems with high sample rate changes. The next type of interface, a CGW ormhole, mixes scheduling algorithms in a code generation application. For example, in a multiprocessor system where we would like to use dynamic constructs with minimal runtime over head, we could specify that the BDF scheduler be used for a particular subgraph and an SDF parallel scheduler for the remainder of the graph. The last type of interface allows code generation applications to communicate with simulations in Ptolemy . With this interface, an actual hardware implementation can be used within a high level simulation. These interfaces can be used in conjunction with one another . For example, a uniprocessor boolean dataow scheduler could be used on the outside of a CGWormhole, and a multiprocessor SDF scheduler could be used on the inside to parallelize the inner subgraph. The major focus for future work will be in deciding how to partition the processors for multiple CGWormholes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Buck, S. Ha, E.A. Lee, and D.G. Messerschmitt, Ptolemy: </author> <title> A Framework for Simulating and Prototyping Heterogeneous Systems, </title> <journal> International Journal of Computer Simulation , spe cia l issue on Simulation Software Development, </journal> <note> to appear 1994. </note>
Reference: [2] <author> E.A. Lee and S. Ha, </author> <title> Scheduling strategies for multi-processor real-time DSP., </title> <booktitle> GLOBECOM '89, 1989, p. </booktitle> <pages> 1279-83 vol.2. </pages>
Reference: [3] <author> D.G. Powell, E. A.Lee, and W.C. Newman, </author> <title> Direct Synthesis of Optimized DSP Assembly Code from Signal Flow Block Diagrams, </title> <booktitle> ICASSP, </booktitle> <volume> vol. </volume> <pages> 5, </pages> <address> San Francisco, CA, </address> <publisher> IEEE, </publisher> <year> 1992, </year> <pages> p. 553-556. </pages>
Reference: [4] <author> S. Ritz, M. Pankert, and H. </author> <title> Meyr , High level soft-ware synthesis for signal processing systems, Proc e e d in g s o f th e I n t e rn a t io n a l C on f e r e n c e o n Application Specific Array Processors, </title> <address> Berkeley, CA, USA, </address> <publisher> IEEE Comput. Soc. Press, </publisher> <year> 1992, </year> <pages> p. 679-693. </pages>
Reference: [5] <author> E.A. Lee and D.G. Messerschmitt, </author> <title> Synchronous data flow, </title> <booktitle> Proceedings of the IEEE , vol. </booktitle> <volume> 75, no. 9, </volume> <year> 1987, </year> <pages> p. 1235-1245. </pages>
Reference: [6] <author> S.S. Bhattacharyya, </author> <title> Scheduling synchronous dataflow graphs for efficient iteration, </title> <type> Master's Thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1991. </year>
Reference: [7] <author> G.C. Sih and E.A. Lee, </author> <title> Declustering: A New Multiprocessor Scheduling Technique, </title> <journal> IEEE Transactions on Parallel and Distributed Systems , vol. </journal> <volume> 4, no. 6, </volume> <year> 1993, </year> <pages> p. 625-637. </pages>
Reference: [8] <author> J.T. Buck and E.A. Lee, </author> <title> Scheduling Dynamic Dataow Graphs with Bounded Memory Using the Token Flow Model, </title> <booktitle> ICASSP, </booktitle> <address> Minneapolis, </address> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference: [9] <author> J.L. Pino, S. Ha, E.A. Lee, and J.T . Buck, </author> <title> Software Synthesis for DSP Using Ptolemy, Journal of VLSI Signal Processing, Synthesis for DSP, </title> <note> 1993, to appear. </note>
Reference: [10] <author> J.L. Pino, </author> <title> Software Synthesis for Single-Processor DSP Systems Using Ptolemy, </title> <type> Master's Thesis Memorandum UCB/ERL M93/35, </type> <institution> University of California at Berkeley, </institution> <year> 1993. </year>
Reference: [11] <author> S. Sriram and E.A. Lee, </author> <title> Design and Implementation of an Ordered Memory Access Architecture, </title> <booktitle> ICASSP, </booktitle> <address> Minneapolis, MN, </address> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference: [12] <author> P.K. Murthy, S.S. Bhattacharyya, and E.A. Lee, </author> <title> Minimizing Memory Requirements for Chain-Structured Synchronous Dataflow Programs, </title> <booktitle> ICASSP, </booktitle> <address> Adelaide, South Australia, </address> <year> 1994. </year>

References-found: 12

