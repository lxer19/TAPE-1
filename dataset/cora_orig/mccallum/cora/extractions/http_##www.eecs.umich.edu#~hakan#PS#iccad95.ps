URL: http://www.eecs.umich.edu/~hakan/PS/iccad95.ps
Refering-URL: http://www.eecs.umich.edu/~hakan/research.html
Root-URL: http://www.cs.umich.edu
Note: This research was supported by the Semiconductor Research Corporation under Contract #93-DJ-338. Abstract  
Abstract: We present a novel method to perform timing analysis of hierarchical circuits. It is based on the representation of circuit modules by conditional delay matrices (CDMs) which combine module delays with event propagation conditions. The CDM model is independent of module complexity and allows automatic identification of false paths. We exploit hierarchy information to perform efficient delay computation. The effectiveness of the method is demonstrated on a high-level model of the ISCAS-85 circuit c6288, which is difficult to analyze using traditional approaches. The method has been implemented in a symbolic timing analysis program called CAT. The application of CAT to carry-skip adders shows that hierarchical timing analysis is faster by an order of magnitude than gate-level analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. C. Hansen and J. P. Hayes, </author> <title> High-level test generation using physically induced faults, </title> <booktitle> Proc. VLSI Test Symposium, </booktitle> <year> 1995, </year> <pages> pp. 20-28. </pages>
Reference-contexts: In the next section, we define conditional delays, CDMs, and operations on them. Section 3 describes a CDM-based timing analysis method that exploits the design hierarchy; it also eliminates false paths automatically. Next, the method is applied to the high-level model of the c6288 circuit provided in <ref> [1] </ref>. We have implemented the CDM method in a program called CAT that performs symbolic timing analysis using binary decision diagrams (BDDs). <p> While the methods that work on a path-by-path basis often take too long [3], those that use BDDs or similar structures tend to run out of memory [3,4,6,10]. We use the high-level model for c6288 provided in <ref> [1] </ref> to compute the longest delay.
Reference: [2] <editor> P.C. McGeer, et al., </editor> <title> Delay models and exact timing analysis, In Logic Synthesis and Optimization, </title> <editor> Tsutomu Sasao (ed.), </editor> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1993. </year>
Reference: [3] <author> A. Saldanha, </author> <title> Performance and Testability Interactions in Logic Synthesis, </title> <type> Ph.D. Thesis, </type> <institution> UC, Berkeley, </institution> <year> 1991. </year>
Reference-contexts: While the methods that work on a path-by-path basis often take too long <ref> [3] </ref>, those that use BDDs or similar structures tend to run out of memory [3,4,6,10]. We use the high-level model for c6288 provided in [1] to compute the longest delay. <p> There is, in fact, an input vector that makes it true, namely , . The corresponding values are shown in Fig. 8. The final result is that the delay of c6288 is 123, as reported by previous methods <ref> [3] </ref>. For an N-bit multiplier, the delay is . <p> CAT is a symbolic timing analysis tool that performs the HCD analysis described in Section 3. Currently, it supports six PCs including static, oating mode, and viability; it is also easy to incorporate new PC. Like some of the methods presented in <ref> [3] </ref>, BDDs are used to represent PCs. Given high and low threshold s s 14 0, s s 14 0, A13 0 A14 (14,14) (13,14) FA ... ... . . . B15 FA A0 (0,1) B1 FA A13 0 A14 (14,14) (13,14) FA ... ... . . .
Reference: [4] <author> R.I. Bahar, et al., </author> <title> Timing analysis of combinational circuits using ADDs, </title> <booktitle> Proc. European Design and Test Conf., </booktitle> <year> 1994, </year> <pages> pp. 625-629. </pages>
Reference-contexts: Thus, like the ADD method <ref> [4] </ref>, CAT computes circuit delays for all possible input vectors, in contrast to most existing methods, which only find a single input vector responsible for the longest delay. The experiments were carried out on a DEC/5000 workstation assuming unit gate delays throughout. <p> Note that no threshold was used. These results compare very favorably with those reported by existing methods [2,3,7,8] which just compute the longest delay and a single input vector associated with that delay. Although block sizes were not reported in <ref> [4] </ref>, which uses oating mode, the CPU times for CAT with oating mode are shorter than those of [4] for all block sizes. These very short CPU times are due to the fact that functional BDDs as well as condition BDDs for CSAs grow only linearly with the circuit size. <p> Although block sizes were not reported in <ref> [4] </ref>, which uses oating mode, the CPU times for CAT with oating mode are shorter than those of [4] for all block sizes. These very short CPU times are due to the fact that functional BDDs as well as condition BDDs for CSAs grow only linearly with the circuit size. Table 3 compares the CPU times for CSAs modeled at the gate level with those modeled hierarchically.
Reference: [5] <author> S.-T. Huang, et al., </author> <title> Timed boolean calculus and its applications in timing analysis, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 13, </volume> <month> March </month> <year> 1994, </year> <pages> pp. 318-337. </pages>
Reference: [6] <author> W.K.C. Lam, et al., </author> <title> Circuit delay models and their exact computation using timed boolean functions, </title> <booktitle> Proc. 30th Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 128-134. </pages>
Reference: [7] <author> J.P.M. Silva and K.A. Sakallah, </author> <title> Efficient and robust test generation-based timing analysis, </title> <booktitle> Proc. Int. Symp. Circuits and Systems, </booktitle> <year> 1994, </year> <pages> pp. 303-306. </pages>
Reference: [8] <author> S. Devadas, et al., </author> <title> Computation of floating mode delay in combinational circuits: theory and algorithms, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 12, </volume> <month> Dec. </month> <year> 1993, </year> <pages> pp. 1913-1923. </pages>
Reference: [9] <author> S. Devadas, et al., </author> <title> Certified timing verification and the transition delay of a logic circuit, </title> <booktitle> Proc. 29th Design Automation Conf., </booktitle> <year> 1992, </year> <pages> pp. 549-555. </pages>
Reference: [10] <editor> P.C. McGeer, et al., </editor> <title> Integrating Functional and Temporal Domains in Logic Design: The False Path Problem and its Implications, </title> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: The false path elimination algorithm given in [12] can also significantly increase the size of the event graph. Further, the propagation conditions used in [12,13] are based on static sensitization, which can underestimate the circuit delay <ref> [10] </ref>; so the reliability of this method is limited. The main obstacle to extending tim ing analysis to higher levels appears to be describing the timing behavior of circuit modules in a consistent and concise manner regardless of their complexity level. <p> Any PC (static sensitization, oating mode [11], viability <ref> [10] </ref>, etc.) can be used in CDMs. The sensitizability of paths is then defined with respect to the PC being used. In this paper, we do not deal with the correctness or robustness of the PCs; we are only concerned with how to incorporate PCs into our analysis framework.
Reference: [11] <author> H.-C. Chen and D.H.-C. Du, </author> <title> Path sensitization in critical path problem, </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 12, </volume> <month> Feb. </month> <year> 1994, </year> <pages> pp. 196-207. </pages>
Reference-contexts: Any PC (static sensitization, oating mode <ref> [11] </ref>, viability [10], etc.) can be used in CDMs. The sensitizability of paths is then defined with respect to the PC being used. <p> The sensitizability of paths is then defined with respect to the PC being used. In this paper, we do not deal with the correctness or robustness of the PCs; we are only concerned with how to incorporate PCs into our analysis framework. We will now use oating mode <ref> [11] </ref> as an example of a PC. Consider a 2-input AND gate with inputs and , output , and transport delay d. Let the CT sets of the inputs be and , respectively.
Reference: [12] <author> P. Johannes, et al., </author> <title> Performance through hierarchy in static timing verification, </title> <booktitle> Proc. of the 12th World Computer Congress, Madrid, Spain; 1992, </booktitle> <volume> vol. 1, </volume> <pages> pp. 703-709. </pages>
Reference-contexts: Although their method benefits from the design hierarchy, the event graph associated with a circuit is not much different from a gate-level model of the circuit itself. The false path elimination algorithm given in <ref> [12] </ref> can also significantly increase the size of the event graph. Further, the propagation conditions used in [12,13] are based on static sensitization, which can underestimate the circuit delay [10]; so the reliability of this method is limited. <p> Thus, the analysis of gate-level circuits is a special case where only the last step is performed. The use of the same procedure for building the timing models of subcircuits and for computing the circuit delays at the top level contrasts with the approach of <ref> [12] </ref>, where two different methods are employed. 4 Case Study: c6288 Multiplier Exhibiting a huge number of (false) longest paths, this 2406-gate circuit, a 16-bit multiplier, has been particularly difficult for most gate-level methods [3,4,7,10,13] to analyze.
Reference: [13] <author> P. Johannes, et al., </author> <title> On the use of reconvergence analysis for efficient hierarchical static sensitizable path analysis, </title> <booktitle> Proc. ACM Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <year> 1993. </year>
Reference: [14] <author> K. Roy and J.A. Abraham, </author> <title> The use of RTL descriptions in accurate timing verification and test generation, </title> <journal> IEEE J. Solid-State Circuits, </journal> <volume> vol. 26, </volume> <month> Sept. </month> <year> 1991, </year> <pages> pp. 1230-1239. </pages>
Reference-contexts: For example, one can express the PCs only in terms of controls signals and ignore data signals, which can yield simple PCs since the number of control signals is usually small, especially in datapath circuits. This idea is employed in <ref> [14] </ref> and [15], which use control signals available in register-level descriptions. Another important feature of this representation is that there is no conceptual difference between a simple gate and a high-level module. Therefore, the CDM model is consistent at all descriptive levels.
Reference: [15] <author> C. Safinia, et al., </author> <title> Taking advantage of high level functional information to refine timing analysis and timing modeling, </title> <booktitle> Proc. European Design and Test Conf., </booktitle> <year> 1994, </year> <pages> pp. 349-353. </pages>
Reference-contexts: For example, one can express the PCs only in terms of controls signals and ignore data signals, which can yield simple PCs since the number of control signals is usually small, especially in datapath circuits. This idea is employed in [14] and <ref> [15] </ref>, which use control signals available in register-level descriptions. Another important feature of this representation is that there is no conceptual difference between a simple gate and a high-level module. Therefore, the CDM model is consistent at all descriptive levels.
Reference: [16] <author> D.E. </author> <title> Long, </title> <type> Personal communication, </type> <year> 1994. </year>
Reference-contexts: The CPU times are very sensitive to the ordering of the primary inputs for the BDDs. We used the dynamic variable reordering feature of the BDD package <ref> [16] </ref> to obtain good orderings. BDDs for multipliers, on the other hand, are known to be exponential in circuit size under any input ordering.
References-found: 16

