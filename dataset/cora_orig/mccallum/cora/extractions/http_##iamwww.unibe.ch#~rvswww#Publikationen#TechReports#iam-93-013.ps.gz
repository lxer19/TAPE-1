URL: http://iamwww.unibe.ch/~rvswww/Publikationen/TechReports/iam-93-013.ps.gz
Refering-URL: http://iamwww.unibe.ch/~rvswww/Publikationen/index.html
Root-URL: 
Date: June 1993  
Note: IAM-93-013  
Abstract: Test Case Generation for Temporal Properties (This report has also been submitted to the FORTE'93 conference.) Robert Nahm Jens Grabowski Dieter Hogrefe Institut fur Informatik, Universitat Bern Langgassstr. 51, CH-3012 Bern 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Alpern and F.B. Schneider. </author> <title> Recognizing Safety and Liveness. </title> <journal> Distributed Computing, </journal> <volume> 2 </volume> <pages> 117-126, </pages> <year> 1987. </year>
Reference-contexts: The obligation and reactivity properties are closed under union, intersection and comple ment. 3 The informal expression good and bad thing are taken from <ref> [1] </ref> 3 Hierarchy. According to Figure 1 the Borel Hierarchy consists of six classes of properties. The class of obligation properties contain the class of safety and guarantee properties. The obligation properties are strictly contained in the recurrence and persistence properties.
Reference: [2] <author> Ferenc Belina, Dieter Hogrefe, and Sarma Amardeo. </author> <title> SDL with Applications from Protocol Specification. </title> <publisher> Prentice Hall International, </publisher> <year> 1991. </year>
Reference-contexts: Within this project an SDL description <ref> [2, 4] </ref> is used to specify a safety property and a Message Sequence Chart (MSC) [5, 6] is used to specify a guarantee property 7 .
Reference: [3] <author> Daniel Brand and Pitro Zafiropulo. </author> <title> On Communicating Finite State Machines. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 30(2) </volume> <pages> 323-342, </pages> <month> April </month> <year> 1983. </year>
Reference-contexts: However, there can not exist test methods which guarantee behavioral equivalence for systems with an infinite state space. Even finite state machines which communicate by means of unbounded FIFO buffers (i.e. the base model of SDL) are as powerful as Turing Machines <ref> [3] </ref> for which the behavioral equivalence is undecidable [12]. As a consequence the behavioral equivalence can not be used as conformance relation to derive reachability criteria for generating test cases. Practical testing. <p> For finite automata the reachability problem is solved and there exist efficient algorithms to calculate shortest traces, which lead to a certain state or contain a certain event [12]. But the decidability of the reachability problem of the labeled transition system depends heavily on its design. In <ref> [3] </ref> it is proved, that the reachability problem for communicating finite state machines which communicate by means of unbounded FIFO buffers is undecidable. Subsequently, the reachability problem for a labeled transition system which represents asynchronously communicating processes (i.e. the base model of SDL) is undecidable.
Reference: [4] <author> SG X CCITT. </author> <title> Recommendation Z.100: Specification and Description Language (SDL), </title> <booktitle> 1992. </booktitle> <address> Geneva. </address>
Reference-contexts: Within this project an SDL description <ref> [2, 4] </ref> is used to specify a safety property and a Message Sequence Chart (MSC) [5, 6] is used to specify a guarantee property 7 .
Reference: [5] <author> SG X CCITT. </author> <title> Recommendation Z.120: Message Sequence Chart (MSC), </title> <booktitle> 1992. </booktitle> <address> Geneva. </address>
Reference-contexts: Within this project an SDL description [2, 4] is used to specify a safety property and a Message Sequence Chart (MSC) <ref> [5, 6] </ref> is used to specify a guarantee property 7 . The output is a test case in TTCN notation (cf. part 3 of [13]). 6.1 Specification and Description Language (SDL) An SDL specification can be interpreted as a labeled transition system.
Reference: [6] <author> Jens Grabowski, Peter Graubmann, and Ekkart Rudolph. </author> <title> The Standardisation of Message Sequence Charts. </title> <booktitle> Proceedings of the IEEE Software Engineering Standards Symposium 1993. </booktitle> <pages> 13 </pages>
Reference-contexts: Within this project an SDL description [2, 4] is used to specify a safety property and a Message Sequence Chart (MSC) <ref> [5, 6] </ref> is used to specify a guarantee property 7 . The output is a test case in TTCN notation (cf. part 3 of [13]). 6.1 Specification and Description Language (SDL) An SDL specification can be interpreted as a labeled transition system.
Reference: [7] <author> Jens Grabowski, Dieter Hogrefe, Peter Ladkin, Stefan Leue, and Robert Nahm. </author> <title> Con--formance Testing ATool for the Generation of Test Cases. Interim Report of the F & E project contract no. </title> <type> 233, </type> <institution> funded by Swiss PTT, </institution> <year> 1992. </year>
Reference-contexts: One way for the translation of an MSC into a finite automaton is described in <ref> [7] </ref>. MSC 1 consists of two instances P1 and P2, which exchange the signal CR two times. It describes a partial ordered set of communication events, which allows the traces &lt;P1!CR,P1!CR,P2?CR,P2?CR&gt; and &lt;P1!CR,P2?CR,P1!CR,P2?CR&gt;.
Reference: [8] <author> Jens Grabowski, Dieter Hogrefe, and Robert Nahm. </author> <title> A Method for the Generation of Test Cases Based on SDL and MSCs. </title> <type> Technical Report IAM 93-010, </type> <institution> University of Berne, Switzerland,1993. </institution>
Reference-contexts: Furthermore, the fail observables have to be added by means of a TTCN default behavior description. Further information on the project and a complete example for our approach can be found in <ref> [8] </ref> and [9]. Summary and Outlook The presented paper deals with the automatic generation of test cases for temporal properties. Temporal properties are classified by means of the Borel Hierarchy. The safety and the guarantee property are identified to be testable temporal properties.
Reference: [9] <author> Jens Grabowski, Dieter Hogrefe, and Robert Nahm. </author> <title> Test Case Generation with Test Purpose Specification by MSCs. </title> <booktitle> Proceedings of the 6th SDL Forum, </booktitle> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: Furthermore, the fail observables have to be added by means of a TTCN default behavior description. Further information on the project and a complete example for our approach can be found in [8] and <ref> [9] </ref>. Summary and Outlook The presented paper deals with the automatic generation of test cases for temporal properties. Temporal properties are classified by means of the Borel Hierarchy. The safety and the guarantee property are identified to be testable temporal properties.
Reference: [10] <author> Dieter Hogrefe. </author> <title> Automatic Generation of Test Cases from SDL-Specifications. </title> <journal> SDL-Newsletters, </journal> <volume> 12, </volume> <year> 1988. </year>
Reference-contexts: The events E describe the actions of the SDL processes (e.g. inputs, outputs, tasks, decisions, etc.). Since there exist different approaches to derive a labeled transition system from an SDL specification <ref> [17, 10] </ref>, we do not want to go into details here. 7 According to ISO/IEC IS 9646 [13] the guarantee property (i.e. the MSC) can be interpreted as the test purpose of the test case. 10 6.2 Message Sequence Chart (MSC) An MSC (e.g.
Reference: [11] <author> Gerard J. </author> <title> Holzman. Design and Validation of Computer Protocols. </title> <publisher> Prentice-Hall International, Inc., </publisher> <year> 1991. </year>
Reference-contexts: One way to do this is to define for every test verdict an own reachability criterion. In theoretical and practical approaches the definition of reachability criteria and the assignment of test verdicts is solved differently. Theoretical approaches. Approaches coming from research like UIO <ref> [11] </ref> or the W-method concentrate on the test case generation for finite state machines. The reachability criteria are determined by the used conformance relation (e.g. behavioral equivalence), by fault coverage, or by assumptions about the implementation (e.g. the implementation behaves like a finite automaton with a certain number of states).
Reference: [12] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison Wesley, </publisher> <year> 1979. </year>
Reference-contexts: Even finite state machines which communicate by means of unbounded FIFO buffers (i.e. the base model of SDL) are as powerful as Turing Machines [3] for which the behavioral equivalence is undecidable <ref> [12] </ref>. As a consequence the behavioral equivalence can not be used as conformance relation to derive reachability criteria for generating test cases. Practical testing. The goal of practical testing is to show certain properties and not to prove a behavioral equivalence between a specification and an implementation. <p> For finite automata the reachability problem is solved and there exist efficient algorithms to calculate shortest traces, which lead to a certain state or contain a certain event <ref> [12] </ref>. But the decidability of the reachability problem of the labeled transition system depends heavily on its design. In [3] it is proved, that the reachability problem for communicating finite state machines which communicate by means of unbounded FIFO buffers is undecidable.
Reference: [13] <author> ISO/IEC JTC 1/SC 21 N. </author> <title> Information Technology Open System Interconnection - Conformance Testing Methodology and Framework - Part1-5. International Standard 9646, </title> <address> ISO/IEC, </address> <year> 1991. </year>
Reference-contexts: We define * OI = [ m i=1 I i to be the observable inputs, * OO = [ m i=1 O i to be the observable outputs, and * OE = OI [ OO to be the observable events. 5 According to ISO/IEC IS 9646 <ref> [13] </ref> a system under test is controlled by so-called upper and lower tester. 6 Traces and observables of a labeled transition system. A trace is a sequence of events E and an observable is a sequence of observable events OE. <p> Alternatively, the guarantee property is defined by: E (Tr (F A; fs 0 g; F )) A complete treatment of the dependency between automata and temporal properties can be found in [16] or [14]. 4 Representation of a test case A test case <ref> [13] </ref> describes a tree where the nodes are observable events. We express a tree as a set of observables. The observables of a test case can be grouped into three disjoint sets the observables which cause a PASS, a FAIL or an INCONCLUSIVE verdict. <p> Within this project an SDL description [2, 4] is used to specify a safety property and a Message Sequence Chart (MSC) [5, 6] is used to specify a guarantee property 7 . The output is a test case in TTCN notation (cf. part 3 of <ref> [13] </ref>). 6.1 Specification and Description Language (SDL) An SDL specification can be interpreted as a labeled transition system. The relation between an SDL description and a labeled transition system (Q; E; R; q 0 ) can be described in the following way. <p> The events E describe the actions of the SDL processes (e.g. inputs, outputs, tasks, decisions, etc.). Since there exist different approaches to derive a labeled transition system from an SDL specification [17, 10], we do not want to go into details here. 7 According to ISO/IEC IS 9646 <ref> [13] </ref> the guarantee property (i.e. the MSC) can be interpreted as the test purpose of the test case. 10 6.2 Message Sequence Chart (MSC) An MSC (e.g. Figure 3 (a)) describes a partially ordered set of events. It can be interpreted as a finite automaton. <p> In the start state s 0 and in the final state f all possible communication events E are valid. 9 8 This restriction may be weakened to allow optional signals or abstractions in the MSC description. 9 According to the test case definition in ISO/IEC IS 9646 <ref> [13] </ref> these events can be interpreted as the preamble and the postamble of the test case. 11 6.3 Calculation of a test case Within section 5.2 a test case for a given labeled transition system (representing a safety property) and a given finite automaton (representing a guarantee property) is defined, but
Reference: [14] <author> M. Kaminski. </author> <title> A Classification of !-regular Languages. </title> <journal> Theoretical Computer Science, </journal> <volume> 36 </volume> <pages> 217-229, </pages> <year> 1985. </year>
Reference-contexts: Alternatively, the guarantee property is defined by: E (Tr (F A; fs 0 g; F )) A complete treatment of the dependency between automata and temporal properties can be found in [16] or <ref> [14] </ref>. 4 Representation of a test case A test case [13] describes a tree where the nodes are observable events. We express a tree as a set of observables.
Reference: [15] <author> Gunther Karjoth. </author> <title> Generating Transition Graphs from LOTOS Specifications. </title> <editor> In Michel Diaz and Roland Groz, editors, </editor> <booktitle> FORTE'92, </booktitle> <pages> pages 275-287, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Our way to search for observables with the required properties is to simulate the labeled transition system and the finite automaton in parallel (i.e. a kind of 'on the fly validation' <ref> [15] </ref>). There are different search methods, like depth search and breadth search. Breadth search is not usable, since it is impossible to store all states 10 . Also depth search is not applicable, since it is not possible to guarantee termination.
Reference: [16] <author> Zohar Manna and Amir Pnueli. </author> <title> A Hierarchy of Temporal Properties. </title> <booktitle> Proceedings of the 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 377-408. </pages> <publisher> ACM Press, </publisher> <year> 1990. 1990 </year> <month> ACM-0-89791-404-X/90/0008/3777. </month>
Reference-contexts: In general liveness properties are not testable, since one has to observe a complete trace to show, that a liveness property is violated. Therefore, we present a finer classification of the non-safety properties by the so-called Borel Hierarchy <ref> [16] </ref>. This classification enables us to distinguish between properties stating, that a certain good thing 3 occurs at least once or occurs infinitely many times in a trace. We characterize the different properties of the Borel Hierarchy by the way they are constructed from languages over finite sequences. <p> The class of obligation properties contain the class of safety and guarantee properties. The obligation properties are strictly contained in the recurrence and persistence properties. Per definition the class of reactivity properties strictly contains the class of recurrence and persistence properties. For the proofs we refer the reader to <ref> [16] </ref>. In the sequel we only regard properties of the four basic classes. 2.2 Testability In testing we are interested in the relation between the sets of traces, which are executed by the implementation Tr (I ) and which belong to the temporal property . <p> All infinite traces, where the automaton cycles infinitely often in an end state, belong to the guarantee property. Alternatively, the guarantee property is defined by: E (Tr (F A; fs 0 g; F )) A complete treatment of the dependency between automata and temporal properties can be found in <ref> [16] </ref> or [14]. 4 Representation of a test case A test case [13] describes a tree where the nodes are observable events. We express a tree as a set of observables.
Reference: [17] <author> Robert Nahm. </author> <title> Semantics of Simple SDL. </title> <booktitle> Proceedings of the GI/ITG workschop on formal description techniques for distributed systems in Magdeburg (Germany), </booktitle> <year> 1993. </year> <month> 14 </month>
Reference-contexts: The events E describe the actions of the SDL processes (e.g. inputs, outputs, tasks, decisions, etc.). Since there exist different approaches to derive a labeled transition system from an SDL specification <ref> [17, 10] </ref>, we do not want to go into details here. 7 According to ISO/IEC IS 9646 [13] the guarantee property (i.e. the MSC) can be interpreted as the test purpose of the test case. 10 6.2 Message Sequence Chart (MSC) An MSC (e.g.
References-found: 17

