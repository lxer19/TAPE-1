URL: http://www.idt.unit.no/IDT/grupper/DB-grp/tech_papers/iwdm89.ps
Refering-URL: http://www.idt.unit.no/IDT/grupper/DB-grp/tech_papers/tech_papers.html
Root-URL: 
Title: Sorting Large Data Files on the HC16 Parallel Database Computer  
Author: r r r r r r r r l l l l l l l l l l l l l l l l l l l l l l l l l l l by Bjtrn Arild W. Baugstt and Jarle Fredrik Greipsland 
Address: N-7034 Trondheim, Norway  
Affiliation: Division of Computer Systems and Telematics The Norwegian Institute of Technology University of Trondheim  
Abstract: Sorting is one of the basic operations in any database system. In this paper we present two external sorting algorithms for hypercube database computers. The methods are based on partitioning of data according to partition values obtained through sampling of the data. One of the algorithms which is implemented at the HC16 database computer designed at The Norwegian Institute of Technology, is described in detail together with a performance evaluation and a presentation of some test results. 
Abstract-found: 1
Intro-found: 1
Reference: [Aho83] <author> Alfred V. Aho, John E. Hopcroft and Jeffrey D. Ullman: </author> <title> Data Structures and Algorithms, </title> <publisher> Addison Wesley Publishing Company, Inc. </publisher> <year> 1983. </year>
Reference-contexts: Using this number, a balanced tree of real and empty imaginary runs can be derived. The runs are then merged according to this tree. This family of singleprocessor algorithms is thoroughly described by several authors, e.g. in [Knuth73] and <ref> [Aho83] </ref>. The same principles can be used for external sorting on a multiprocessor as well (see below). Unsorted file - Splitting into subfiles Subfile Subfile . . .
Reference: [Akl85] <author> Selim G. Akl: </author> <title> Parallell Sorting Algorithms, </title> <publisher> Academic Press, Inc. </publisher> <year> 1985. </year> <note> length of 100 bytes. </note>
Reference: [Anon85] <editor> Anon. et al.: </editor> <title> A Measure of Transaction Processing Power, </title> <journal> Datamation, </journal> <month> April </month> <year> 1985. </year>
Reference-contexts: We would like to emphasize one particular result from figure 5, namely the sort of 1 million 100 byte records (10 byte key), i.e. 100 MB. This is the sort benchmark as defined by Anon. et al. in <ref> [Anon85] </ref>. Our sorting algorithm ran this benchmark in 3 minutes, which we think is a good result compared to the relatively low cost of our hypercube database computer.
Reference: [Baru87] <author> C. K. Baru, O. Frieder, D. Kandlur and M. Segal: </author> <title> Join on a Cube: Analysis, Simulation and Implementation, </title> <booktitle> Fifth International Workshop on Database Machines, </booktitle> <address> Karuizawa, </address> <year> 1987. </year>
Reference: [Baug89] <institution> Bjtrn Arild Wangenstein Baugstt: Parallelle Sorteringsmetoder for Store Datamengder i en Hyperkubisk Databasemaskin, Division of Computer Systems and Telematics, The Norwegian Institute of Technology, University of Trondheim, (diploma thesis, in Norwegian). </institution>
Reference-contexts: This paper which is based on a project work done by the authors [Greip88] and a diploma thesis by one of the authors <ref> [Baug89] </ref>, describes various sorting algorithms for a parallel database computer designed at The Norwegian Institute of Technology. 2 The topology of hypercubes Initially we review some basic concepts of hypercubes. For a more thorough treatment of the subject, the readers will have to turn elsewhere. <p> In other words this means we have to sample more keys to achieve an acceptable level of accuracy, when records are not sorted prior to the sampling. In both [Greip88] and <ref> [Baug89] </ref> there is a more extensive discussion of the sampling technique.
Reference: [Brat80] <author> Kjell Bratbergsengen, Rune Larsen, Oddvar Risnes and Terje Aandalen: </author> <title> A Neighbor Connected Processor Network for Performing Relational Algebra Operations, </title> <booktitle> The Fifth Workshop on Computer Architecture for Non-numeric Processing, </booktitle> <address> Pacific Grove, Ca, </address> <month> March </month> <year> 1980, </year> <journal> SIGMOD Vol. </journal> <volume> X No. </volume> <pages> 4. </pages>
Reference-contexts: This is the price we have to pay for not having a fully connected network. The latter communication scheme, however, is not feasible for a large number of nodes. As described in <ref> [Brat80] </ref> the hypercubic interconnection scheme is a satisfactory compromise. 3 The HC16-186 parallel database computer The advent of powerful inexpensive microprocessors and hard disks has made it economically feasible to get super high performance tying many of these components together.
Reference: [Brat84] <author> Kjell Bratbergsengen: </author> <title> Hashing Methods and Relational Algebra Operations, </title> <booktitle> The 10th Conference on Very Large Data Bases, </booktitle> <month> Singapore August </month> <year> 1984. </year>
Reference: [Brat87] <author> Kjell Bratbergsengen: </author> <title> Algebra Operations on a Parallel Computer Performance Evaluation, </title> <booktitle> Fifth International Workshop on Database Machines, </booktitle> <address> Karuizawa, </address> <year> 1987. </year>
Reference: [Brat88] <institution> Kjell Bratbergsengen: Hyperkuben Division of Computer Systems and Telem-atics, The Norwegian Institute of Technology, </institution> <address> N-7034 Trondheim. March 1988 (in Norwegian). </address>
Reference-contexts: This process of estimating the median and partitioning the records is continued recursively for a total of D steps, keeping the records sorted locally at each node. The description above is based on <ref> [Brat88] </ref>. Similar algorithms are given elsewhere (under varying names) [Seid88], so it is perhaps more appropriate to talk about a class of algorithms.
Reference: [Brat89] <author> Kjell Bratbergsengen and Torgrim Gjelsvik: </author> <title> The Development of the CROSS8 and HC16-186 Parallel (Database) Computers, </title> <institution> Division of Computer Systems and Telematics, The Norwegian Institute of Technology, </institution> <address> N-7034 Trondheim. </address>
Reference-contexts: Positioning to a neighbouring cylinder takes 8 ms and rotation time is 16.67 ms. With the SCSI-port and SCSI-controller we are able to run the disk with an interleave factor of 1:1. For more details about HC16-186 see <ref> [Brat89] </ref>. 4 Sorting records in a relational database The sorting algorithms described in this paper are designed to sort tuples or records in a relational database, but could obviously be used for other purposes as well. <p> During lost rotations and between sectors the bus is free for other activities. With asynchronous file system calls we are thus able to overlap the disk operations with the other operations. In the analysis, which follows the principles of Bratbergsengen's analysis of the relational algebra operations ([Brat87], <ref> [Brat89] </ref>), we estimate T bus , the time consumption for the operations requiring bus access, and T disk , the disk time, to determine which is the bottleneck.
Reference: [DeWi85] <author> David DeWitt and Robert Gerber: </author> <title> Multiprocessor Hash-Based Join Algorithms, </title> <booktitle> The 11th Conference on Very Large Data Bases, </booktitle> <address> Stockholm Aug. </address> <year> 1985. </year>
Reference-contexts: The sort is supposed to work in connection with other relational database operations like join, selection, projection, division, union, difference and intersection. The implementation of these operations on a parallel computer are described in [Baru87],[Brat87] and <ref> [DeWi85] </ref> The relation to be sorted is horizontally partitioned into P subrelations (one subrelation pr. node). Normally, we are dealing with approximately equal partitions, but the sorting algorithm should work with uneven partitions as well.
Reference: [Greip88] <author> Jarle F. Greipsland og Bjtrn Arild W. Baugstt: Sortering i hyperkuber, </author> <title> Project work during spring 1988, May 1988 (in Norwegian), </title> <institution> Division of Computer Systems and Telematics, The Norwegian Institute of Technology, University of Trondheim. </institution>
Reference-contexts: For the last decade a lot of attention has been paid to parallel computers and parallel algorithms, and consequently parallel sorting schemes for different parallel architectures have appeared. This paper which is based on a project work done by the authors <ref> [Greip88] </ref> and a diploma thesis by one of the authors [Baug89], describes various sorting algorithms for a parallel database computer designed at The Norwegian Institute of Technology. 2 The topology of hypercubes Initially we review some basic concepts of hypercubes. <p> Obviously, there has to be a trade-off between the time consumption and the desired accuracy of the partitioning values. In our original work <ref> [Greip88] </ref> we assessed several methods for estimating partitioning keys. We concluded that a technique based on sampling was the best choice. <p> As might be expected, the two former alternative yields better estimates than the latter using the same sampling percentage. In other words this means we have to sample more keys to achieve an acceptable level of accuracy, when records are not sorted prior to the sampling. In both <ref> [Greip88] </ref> and [Baug89] there is a more extensive discussion of the sampling technique.
Reference: [Gudm88] <author> Kjetil Gudmundsen: </author> <title> Strategies for Making a Fault Tolerant Database Management System on HC-16, </title> <institution> Division of Computer Systems and Telematics, The Norwegian Institute of Technology, University of Trondheim, </institution> <year> 1988. </year>
Reference-contexts: These problems are examined in <ref> [Gudm88] </ref>, a distribution strategy based on duplication of data is suggested. This means that data must be stored in at least two copies on the disks of two different nodes. When an error occurs, the failing node must be isolated and the data existing in only one copy reduplicated.
Reference: [Knuth73] <author> Donald E. Knuth: </author> <title> Sorting and Searching. </title> <booktitle> The Art of Computer Programming, </booktitle> <publisher> Addison-Wesley Publishing Company, Inc. </publisher> <year> 1973. </year>
Reference-contexts: Using this number, a balanced tree of real and empty imaginary runs can be derived. The runs are then merged according to this tree. This family of singleprocessor algorithms is thoroughly described by several authors, e.g. in <ref> [Knuth73] </ref> and [Aho83]. The same principles can be used for external sorting on a multiprocessor as well (see below). Unsorted file - Splitting into subfiles Subfile Subfile . . . <p> P fi) t c comparisons during search + log 2 (N fi) [4 L ff + 12] P ( D 2 + 3) t b moving data + log 2 (N fi) 4 P ( D 2 + 3) t ovh communication overhead For the factor of 12 7 see <ref> [Knuth73] </ref>.
Reference: [Meno86] <author> Jai Menon: </author> <title> Sorting and Join Algorithms for Multiprocessor Database Machines, Database Machines, Modern Trends and Applications, </title> <publisher> Springer Verlag. </publisher>
Reference: [Seid88] <author> Steven R. Seidel and William L. George: </author> <title> Binsorting on Hypercubes with d-Port Communication, </title> <institution> Department of Computer Science, Michigan Technological University, Houghton, </institution> <note> ACM 1988. [Torb88a] ystein Torbjtrnsen: Turbo-C for the HC-16 Computer, Working paper no. 43, </note> <institution> Division of Computing Systems and Telematics, The Norwegian Institute of Technology, </institution> <month> August </month> <year> 1988. </year> <title> [Torb88b] ystein Torbjtrnsen: Communication in a Failsoft Hypercube Database Ma--chine, </title> <institution> Division of Computer Systems and Telematics, The Norwegian Institute of Technology, University of Trondheim, </institution> <year> 1988. </year>
Reference-contexts: required to yield a perfect distribution (equal partition), but should come close to it since an uneven distribution will lead to varying execution times among the nodes for the operations following the sort. 5 Internal sorting on hypercubes Several internal sorting schemes for hypercubes are described in the literature ([Brat88], <ref> [Seid88] </ref>, [Yaman87]). So far, however, we have found no paper dealing with external sorting on hypercubes (i.e. hypercubes where there is a disk at each node). <p> This process of estimating the median and partitioning the records is continued recursively for a total of D steps, keeping the records sorted locally at each node. The description above is based on [Brat88]. Similar algorithms are given elsewhere (under varying names) <ref> [Seid88] </ref>, so it is perhaps more appropriate to talk about a class of algorithms.
Reference: [Yaman87] <author> Y. Yamane and R. </author> <title> Take: Parallell Partition Sort for Database Machines, </title> <booktitle> Fifth International Workshop on Database Machines, </booktitle> <address> Karuizawa, </address> <year> 1987. </year>
Reference-contexts: to yield a perfect distribution (equal partition), but should come close to it since an uneven distribution will lead to varying execution times among the nodes for the operations following the sort. 5 Internal sorting on hypercubes Several internal sorting schemes for hypercubes are described in the literature ([Brat88], [Seid88], <ref> [Yaman87] </ref>). So far, however, we have found no paper dealing with external sorting on hypercubes (i.e. hypercubes where there is a disk at each node). <p> P 1 search processes run in parallel to establish all the partitioning values. For the details see <ref> [Yaman87] </ref>. The above method is constructed with internal sorting in mind. For external sorting where all keys can not be loaded into main memory, we would have a lot of disk activity making the method rather inefficient. <p> The analysis is based upon the one given in <ref> [Yaman87] </ref>, adopting it to our particular model. We shall not examine the details here, just bring the result. The running time of this phase constitutes a small part of the total running time, and we have chosen to concentrate on phase 2 and 3 where the actual sorting takes place.
References-found: 17

