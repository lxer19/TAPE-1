URL: http://www.cs.utexas.edu/users/yau/papers/acmmm96.ps
Refering-URL: http://www.cs.utexas.edu/users/yau/research.html
Root-URL: 
Email: fyau,lamg@cs.utexas.edu  
Title: Adaptive Rate-Controlled Scheduling for Multimedia Applications  
Author: David K.Y. Yau and Simon S. Lam 
Keyword: Continuous media, CPU scheduling, adaptive rate control, rate reservation, QoS guarantee, firewall property  
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: We present a framework for integrated scheduling of continuous media (CM) and other applications. The framework consists of a rate-controlled on-line CPU scheduler, an admission control interface, a monitoring module and a rate adaptation interface. Rate-controlled scheduling allows processes to reserve CPU time to achieve progress guarantees. It provides firewall protection between processes such that the progress guarantee to a process is independent of how other processes actually make scheduling requests. Rate adaptation allows a CM application to adapt its rate to changes in its execution environment. We have implemented the scheduling framework as an extension to Solaris 2.3. We present experimental results which show that our framework is highly effective in scheduling CM and various other applications in a general purpose workstation environment. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Bennett and H. Zhang. </author> <title> WF 2 Q: Worst-case fair weighted fair queueing. </title> <booktitle> In Proc. INFOCOM '96, </booktitle> <pages> pages 120128, </pages> <address> San Francisco, CA, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Several other packet scheduling algorithms have been designed to achieve various notions of fairness <ref> [1, 2] </ref>. These algorithms can also be used for ARC scheduling, with fairness achieved at the expense of more implementation overhead. However, our experimental results show that real-time video and audio applications are not greedy, and the notions of fairness as defined in [1, 2] is not an important concern for <p> designed to achieve various notions of fairness <ref> [1, 2] </ref>. These algorithms can also be used for ARC scheduling, with fairness achieved at the expense of more implementation overhead. However, our experimental results show that real-time video and audio applications are not greedy, and the notions of fairness as defined in [1, 2] is not an important concern for these applications. 1.3 Organization of this paper In section 2, we discuss the classical rate-monotonic and earliest deadline first scheduling algorithms, and illustrate how a straightforward implementation of these algorithms in a general purpose workstation may lead to unsatisfactory results. <p> After the initial gap, video continued to run with a lower frame rate <ref> (see Fig. 12b, a magnified view of Fig. 12a) </ref>. av-g3 We ran all of audio, video and greedy together in this experiment.
Reference: 2. <author> Alan Demers, Srinivasan Keshav, and Scott Shenker. </author> <title> Analysis and simulation of a fair queuing algorithm. </title> <booktitle> In Proceedings of ACM SIGCOMM '89, </booktitle> <pages> pages 312, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Several other packet scheduling algorithms have been designed to achieve various notions of fairness <ref> [1, 2] </ref>. These algorithms can also be used for ARC scheduling, with fairness achieved at the expense of more implementation overhead. However, our experimental results show that real-time video and audio applications are not greedy, and the notions of fairness as defined in [1, 2] is not an important concern for <p> designed to achieve various notions of fairness <ref> [1, 2] </ref>. These algorithms can also be used for ARC scheduling, with fairness achieved at the expense of more implementation overhead. However, our experimental results show that real-time video and audio applications are not greedy, and the notions of fairness as defined in [1, 2] is not an important concern for these applications. 1.3 Organization of this paper In section 2, we discuss the classical rate-monotonic and earliest deadline first scheduling algorithms, and illustrate how a straightforward implementation of these algorithms in a general purpose workstation may lead to unsatisfactory results.
Reference: 3. <author> K.K. Ramakrishnan et al. </author> <title> Operating system support for a video-on-demand service. </title> <journal> Multimedia Systems, </journal> <volume> 1995(3):53 65, </volume> <year> 1995. </year>
Reference-contexts: 1 INTRODUCTION Advances in digital and networking technologies have enabled the integration of continuous media (CM) data, such as video and audio, with traditional discrete data types, such as graphics and text, in packet switching networks and general purpose workstations. System support for CM applications has recently received much attention <ref> [3, 7, 10] </ref>. CM applications require certain real-time constraints. They may interface with a media device (such as an audio codec or a video capture board) or with a network that transports media packets. <p> However, not enough details of the algorithm are given in [6] for comparison with our approach. Rather than integrated scheduling, a three level hierarchical scheduler for a video-on-demand service has been proposed in <ref> [3] </ref>. The implementation of our scheduling framework is based on extending an existing operating system to support real- time scheduling. This is similar to the work of RT-Mach [8], which is an extension of the Mach operating system.
Reference: 4. <author> C.L. Liu and J.W. Layland. </author> <title> Scheduling algorithms for mul-tiprogramming in a hard real time environment. </title> <journal> JACM, </journal> <volume> 20(1):4661, </volume> <year> 1973. </year>
Reference-contexts: Two algorithms that are generally believed to be suitable for scheduling CM applications are the rate-monotonic (RM) algorithm and the earliest deadline first (EDF) algorithm. We briefly review each of these algorithms <ref> [4] </ref>. Analysis of RM and EDF scheduling has made use of the following periodic specification for the execution of a process, say i. The specification has two parameters: a period, P i (in seconds), and a computation time requirement per period, C i (in seconds). <p> This model of execution is illustrated in Fig. 3. The RM algorithm assigns the period P i as a static priority value of process i. This priority value is interpreted such that the lower the value, the higher is the RM priority of the process. Liu and Layland <ref> [4] </ref> show that if i C i =P i n (2 1=n 1), where the summation is over all processes in scheduling. the system, then each process gets the following progress guarantee: For all i, the process will be scheduled to run for C i within period P i . <p> A process with an earlier deadline value has a higher EDF priority. For EDF scheduling, it is proved that if i C i =P i 1, then each process gets the same progress guarantee as RM scheduling <ref> [4] </ref>. Hence, unlike RM, full processor utilization is in general achievable with EDF. Clearly, the progress guarantee by RM and EDF is useful in scheduling CM applications.
Reference: 5. <author> C.W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor capacity reserves: Operating system support for multimedia applica-tions. </title> <booktitle> In Proc. IEEE Int'l Conf on Multimedia Computing and Systems, </booktitle> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year> <title> (a) for video with rate adaptation from an initial rate of 0.9. </title>
Reference-contexts: This is similar to the work of RT-Mach [8], which is an extension of the Mach operating system. Our requirement that a process's progress guarantee be protected from the execution behavior of other processes is similar in objective to the processor capacity reserves abstraction in <ref> [5] </ref>. There is, however, a key difference between processor capacity reserves and our solution, i.e., only scheduling algorithms with the firewall property are considered in our approach, thereby eliminating the need for an explicit monitoring mechanism to enforce firewall protection from interference.
Reference: 6. <author> Jason Nieh and Monica S. Lam. </author> <title> Integrated processor schedul-ing for multimedia. </title> <booktitle> In Proc. 5th International Worshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 215218, </pages> <address> Durham, NH, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: CM and other applications, and 4) support for rate adaptation whereby the workstation kernel helps a user application adapt its current reserved rate by providing it with feedback information. 1.2 Related work The case for an integrated scheduling policy for diverse applications has been advocated by other researchers, for example, <ref> [6] </ref>. However, not enough details of the algorithm are given in [6] for comparison with our approach. Rather than integrated scheduling, a three level hierarchical scheduler for a video-on-demand service has been proposed in [3]. <p> the workstation kernel helps a user application adapt its current reserved rate by providing it with feedback information. 1.2 Related work The case for an integrated scheduling policy for diverse applications has been advocated by other researchers, for example, <ref> [6] </ref>. However, not enough details of the algorithm are given in [6] for comparison with our approach. Rather than integrated scheduling, a three level hierarchical scheduler for a video-on-demand service has been proposed in [3]. The implementation of our scheduling framework is based on extending an existing operating system to support real- time scheduling.
Reference: 7. <author> Ralf Steinmetz. </author> <title> Multimedia operating systems. </title> <journal> IEEE Multimedia Magazine, </journal> <year> 1995. </year>
Reference-contexts: 1 INTRODUCTION Advances in digital and networking technologies have enabled the integration of continuous media (CM) data, such as video and audio, with traditional discrete data types, such as graphics and text, in packet switching networks and general purpose workstations. System support for CM applications has recently received much attention <ref> [3, 7, 10] </ref>. CM applications require certain real-time constraints. They may interface with a media device (such as an audio codec or a video capture board) or with a network that transports media packets. <p> Section 6 reports our experience in implementing the CPU scheduler in Solaris 2.3. Experimental results reported in section 7 show the effectiveness of our implementation for many test cases. 2 CLASSICAL REAL-TIME SCHEDULING Many classical real-time scheduling techniques have been applied in multimedia operating systems <ref> [7] </ref>. Two algorithms that are generally believed to be suitable for scheduling CM applications are the rate-monotonic (RM) algorithm and the earliest deadline first (EDF) algorithm. We briefly review each of these algorithms [4].
Reference: 8. <author> H. Tokuda, T. Nakajima, and P. Rao. </author> <title> Real-time Mach: Toward a predictable real-time system. </title> <booktitle> In Proc. USENIX Mach Workshop, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: Rather than integrated scheduling, a three level hierarchical scheduler for a video-on-demand service has been proposed in [3]. The implementation of our scheduling framework is based on extending an existing operating system to support real- time scheduling. This is similar to the work of RT-Mach <ref> [8] </ref>, which is an extension of the Mach operating system. Our requirement that a process's progress guarantee be protected from the execution behavior of other processes is similar in objective to the processor capacity reserves abstraction in [5].
Reference: 9. <author> Geoffrey G. Xie and Simon S. Lam. </author> <title> Delay guarantee of Virtual Clock server. </title> <journal> IEEE/ACM Trans. on Networking, </journal> <volume> 3(6):683689, </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: ARC scheduling in our system is based upon a uniform class of dynamically computed priority values, one for each process. Several rate-based algorithms with the firewall property have been proposed for scheduling packets in a network switch. Our algorithm is conceptually similar to the VC algorithm <ref> [9, 11] </ref> but with two differences needed for CPU scheduling: (1) a period parameter is introduced, and (2) in computing the priority value of a process, the expected finishing time of the previous work executed by the process is used instead of the expected finishing time of the work to be
Reference: 10. <author> David K.Y. Yau and Simon S. Lam. </author> <title> An architecture towards efficient OS support for distributed multimedia. </title> <booktitle> In Proc. IS&T/SPIE Multimedia Computing and Networking Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: 1 INTRODUCTION Advances in digital and networking technologies have enabled the integration of continuous media (CM) data, such as video and audio, with traditional discrete data types, such as graphics and text, in packet switching networks and general purpose workstations. System support for CM applications has recently received much attention <ref> [3, 7, 10] </ref>. CM applications require certain real-time constraints. They may interface with a media device (such as an audio codec or a video capture board) or with a network that transports media packets. <p> Firewall protection is achieved by a form of rate control that will be made clear in section 5. 3 OS ARCHITECTURE OVERVIEW We previously proposed an operating system architecture for supporting distributed multimedia <ref> [10] </ref>. The architecture makes use of I/O efficient buffers and a fast write () system call to reduce the end-to-end latency of network data transfers. It also makes use of kernel threads for reduced system calls and rate-based flow control. <p> This prevents a high priority process from being blocked indefinitely by lower priority processes because of lock contention. Third, in our prototype system, a lightweight kernel thread can be used to multiplex a shared network connection among multiple user processes <ref> [10] </ref>. Specifically, a user process with packets to send enqueues the packets to a send control queue. A kernel thread is then responsible for moving packets from the send control queue to a network interface queue at a reserved bit rate (see Figure 6). <p> As described in <ref> [10] </ref>, the timeliness condition for a kernel thread means that the kernel thread will be periodically scheduled with a maximum CPU time per period. <p> Such an assignment is admittedly ad-hoc and user applications cannot rely on it for performance guarantees. Of particular concern are system threads used in the stream subsystem, since networking access is an integral part of any distributed CM application. In the system architecture proposed in <ref> [10] </ref>, however, we assume that network protocols are implemented in user space, rather than as stream modules, and the kernel thread used for flow control has well- defined scheduling parameters (i.e. period of execution and computation requirement per period). 7 EXPERIMENTAL RESULTS We have performed a large number of experiments to
Reference: 11. <author> Lixia Zhang. VirtualClock: </author> <title> A new traffic control algorithm for packet switching networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2):101124, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: ARC scheduling in our system is based upon a uniform class of dynamically computed priority values, one for each process. Several rate-based algorithms with the firewall property have been proposed for scheduling packets in a network switch. Our algorithm is conceptually similar to the VC algorithm <ref> [9, 11] </ref> but with two differences needed for CPU scheduling: (1) a period parameter is introduced, and (2) in computing the priority value of a process, the expected finishing time of the previous work executed by the process is used instead of the expected finishing time of the work to be
References-found: 11

