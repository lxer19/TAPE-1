URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/concur98-web.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/papers.html
Root-URL: http://www.cs.berkeley.edu
Email: dealfaro@eecs.berkeley.edu  
Title: Stochastic Transition Systems  
Author: Luca de Alfaro 
Address: Berkeley  
Affiliation: University of California at  
Note: In Proceedings of CONCUR'98, LNCS, Springer-Verlag, 1998. c flSpringer Verlag, 1998.  
Abstract: Traditional methods for the analysis of system performance and reliability generally assume a precise knowledge of the system and its workload. Here, we present methods that are suited for the analysis of systems that contain partly unknown or unspecified components, such as systems in their early design stages. We introduce stochastic transition systems, a high-level formalism for the modeling of timed probabilistic systems. Stochastic transition systems extend current modeling capabilities by enabling the representation of transitions having unknown delay distributions, alongside transitions with zero or exponentially-distributed delay. We show how these various types of transitions can be uniformly represented in terms of nondeter-minism, probability, fairness and time, yielding efficient algorithms for system analysis. Finally, we present methods for the specification and verification of long-run average properties of STSs. These properties include many relevant performance and reliability indices, such as system throughput, average response time, and mean time between failures.
Abstract-found: 1
Intro-found: 1
Reference: [ABC84] <author> M. Ajmone Marsan, G. Balbo, and G. Conte. </author> <title> A class of generalized stochastic Petri nets for the performance analysis of multiprocessor systems. </title> <journal> ACM Trans. Comp. Sys., </journal> <volume> 2(2) </volume> <pages> 93-122, </pages> <year> 1984. </year> <month> 15 </month>
Reference-contexts: partially supported by the NSF grant CCR-95-27927, by DARPA under the NASA grant NAG2-892, by the ARO grant DAAH04-95-1-0317, by ARO under the MURI grant DAAH04-96-1-0341, by Army contract DABT63-96-C-0096 (DARPA), by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, and by the NSF grant CCR-9504469. nets <ref> [ABC84] </ref> and of stochastic process algebras such as TIPP [GHR93], PEPA [Hil96] and EMPA [BG96] with the introduction of nondeterminism and of transitions with unspecified delay distribution. <p> The choice of considering only closed intervals is arbitrary. Note that point intervals are permitted: they represent transitory states in which an immediate transition is taken before time advances. These transitory states are very similar to the vanishing markings of generalized stochastic Petri nets (GSPNs) <ref> [ABC84] </ref>. The initial state s 0 of a timed trace must satisfy s 0 j= fi. For k 0, state s k determines the expected duration of I k and the next state s k+1 as follows: Some immediate transition enabled. <p> The execution model of STSs is related to that of generalized stochastic Petri nets (GSPNs) <ref> [ABC84] </ref>. In particular, STSs generalize GSPNs by introducing transitions with unspecified delay distributions, and by introducing the possibility of nondeterministic choice among enabled immediate transitions. STSs extend in a similar way also the probabilistic finite-state programs of [PZ86] and the real-time probabilistic processes of [ACD92].
Reference: [ACD92] <author> R. Alur, C. Courcoubetis, and D. Dill. </author> <title> Verifying automata specifications of probabilistic real-time systems. In Real Time: </title> <booktitle> Theory in Practice, volume 600 of LNCS, </booktitle> <pages> pages 28-44. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: notion of probabilistic fairness yields the same verification algorithms as the weak fairness of [KB96], showing that the two notions are equivalent in this context. 2 Stochastic Transition Systems Stochastic transition systems (STSs) have been inspired by the fair transition systems of [MP91] and by the real-time probabilistic processes of <ref> [ACD92] </ref>. A stochastic transition system (STS) is a triple S = (V; fi; T ), where: Visa finite set of typed state variables, each with finite domain. The (finite) state space S consists of all type-consistent interpretations of the variables in V. <p> In particular, STSs generalize GSPNs by introducing transitions with unspecified delay distributions, and by introducing the possibility of nondeterministic choice among enabled immediate transitions. STSs extend in a similar way also the probabilistic finite-state programs of [PZ86] and the real-time probabilistic processes of <ref> [ACD92] </ref>. The introduction of nonde-terminism and of transitions with unspecified delay distributions, and the capability to deal with these features in the verification process, also represents an innovation with respects to probabilistic process algebras for performance modeling, such as TIPP [GHR93], PEPA [Hil96] and EMPA [BG96].
Reference: [Ber97] <author> M. Bernardo. </author> <title> An algebra-based method to associate rewards with EMPA terms. </title> <booktitle> In Proc. ICALP'97, volume 1256 of LNCS, </booktitle> <pages> pages 358-368. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: expected time spent at system states, weighted by a function ff; the "cost" associated to system transitions, expressed by fi; or a combination of the two. 10 In GSPN reward models [CMT91] it is possible to associate a reward rate to the places and transitions of the net; [Cla96] and <ref> [Ber97] </ref> propose methods for associating a reward with each state of the Markov chain generated from a PEPA or EMPA model. The r labeling discussed above serves a similar purpose; however, we also introduce the notion of task, and the corresponding w labeling.
Reference: [BG96] <author> M. Bernardo and R. Gorrieri. </author> <title> Extended Markovian process algebra. </title> <booktitle> In Proc. CONCUR'96, volume 1119 of LNCS, </booktitle> <pages> pages 315-330. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: by the ARO grant DAAH04-95-1-0317, by ARO under the MURI grant DAAH04-96-1-0341, by Army contract DABT63-96-C-0096 (DARPA), by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, and by the NSF grant CCR-9504469. nets [ABC84] and of stochastic process algebras such as TIPP [GHR93], PEPA [Hil96] and EMPA <ref> [BG96] </ref> with the introduction of nondeterminism and of transitions with unspecified delay distribution. These features enable the modeling of unknown (or imprecisely known) arrival rates and transition probabilities, as well as the modeling of schedulers with unspecified behavior. We provide two semantics for STSs. <p> The introduction of nonde-terminism and of transitions with unspecified delay distributions, and the capability to deal with these features in the verification process, also represents an innovation with respects to probabilistic process algebras for performance modeling, such as TIPP [GHR93], PEPA [Hil96] and EMPA <ref> [BG96] </ref>. Probabilistic automata [SL94, Seg95] are another model that has been proposed for probabilistic real-time systems.
Reference: [CMT91] <author> G. Ciardo, J.K. Muppala, </author> <title> and K.S. Trivedi. On the solution of GSPN reward models. Performance Evaluation, </title> <booktitle> 12 </booktitle> <pages> 237-253, </pages> <year> 1991. </year>
Reference-contexts: Thus, the labeling r can be used to measure the expected time spent at system states, weighted by a function ff; the "cost" associated to system transitions, expressed by fi; or a combination of the two. 10 In GSPN reward models <ref> [CMT91] </ref> it is possible to associate a reward rate to the places and transitions of the net; [Cla96] and [Ber97] propose methods for associating a reward with each state of the Markov chain generated from a PEPA or EMPA model.
Reference: [Cla96] <author> G. Clark. </author> <title> Formalising the specification of rewards with PEPA. </title> <booktitle> In Proc. 4th Workshop on Process Algebras and Performance Modelling, </booktitle> <pages> pages 139-160. </pages> <address> CLUT, Torino, Italy, </address> <year> 1996. </year>
Reference-contexts: measure the expected time spent at system states, weighted by a function ff; the "cost" associated to system transitions, expressed by fi; or a combination of the two. 10 In GSPN reward models [CMT91] it is possible to associate a reward rate to the places and transitions of the net; <ref> [Cla96] </ref> and [Ber97] propose methods for associating a reward with each state of the Markov chain generated from a PEPA or EMPA model. The r labeling discussed above serves a similar purpose; however, we also introduce the notion of task, and the corresponding w labeling.
Reference: [dA97a] <author> L. de Alfaro. </author> <title> Formal Verification of Probabilistic Systems. </title> <type> PhD thesis, </type> <institution> Stan-ford University, </institution> <year> 1997. </year> <note> Technical Report STAN-CS-TR-98-1601. </note>
Reference-contexts: A timed probabilistic system (TPS) = (S; A; p; S in ; time) consists of an MDP (S; A; p), and of the following additional components <ref> [dA97a, dA98] </ref>: A subset S in S of initial states. Each behavior of must begin with a state in S in . <p> A method to do this is presented in Section 6. A more sophisticated approach to the problem of time divergence, inspired by [Seg95], is discussed in <ref> [dA97a] </ref>. 4 Translation and Informal Semantics Even though the formal semantics of STSs is defined by translation into fair TPSs, there is a correspondence between the proposed translation and the informal semantics presented in Section 2.1. <p> The long-run average outcome of this task is equal to the long-run average fraction of messages that are acknowledged. In <ref> [dA97a] </ref>, tasks were specified using labeled graphs called experiments. <p> We do not consider behaviors on which I is false, since these behaviors after a certain position cease to complete tasks or to produce outcome, and the long-run average outcome is consequently not well-defined: this point is discussed in detail in <ref> [dA97a, dA98] </ref>. <p> Algorithms that solve this verification problem for the case without fairness conditions have been presented in <ref> [dA97a, dA98] </ref>. To solve the model-checking problem in presence of fairness conditions, we first decompose the fair TPS into the components where a behavior can reside forever under a fair policy. These components are called fair end components, and are presented below. <p> Given a fairness condition F for , we say that sub-MDP (C; D) is a fair end component (FEC) if the following conditions hold <ref> [dA97a] </ref>: Closure: for all s 2 C, a 2 D (s), and t 2 S, if p st (a) &gt; 0 then t 2 C. Connectivity: Let E = fi . The graph (C; E) is strongly connected. Fairness: For all s 2 C, we have F (s) D (s). <p> We denote by MFEC (; F ) the set of maximal FECs of . The set MFEC (; F) can be computed in time polynomial in P using simple graph algorithms; an algorithm to do so is given in <ref> [dA97a, x8] </ref>. 12 Intuitively, a fair end component is a portion of MDP consisting of the states and actions that can be visited infinitely often by a behavior with positive probability, under some fair policy. <p> In a purely probabilistic system, fair end components correspond to the closed recurrent classes of the Markov chain underlying the system [KSK66]. Fair end components are the fair counterpart of the end components of <ref> [dA97a, dA98] </ref>, and are related to sets used in [KB96] to solve the model-checking problem for PBTL*. As our first application of the above theorem, we obtain a criterion to decide whether a fair TPS is non-Zeno. <p> We say that a state of P is surely recurrent if the Markov chain corresponding to P has only one closed recurrent class, and if the state belongs to that class. The following result can be proved by linear algebra arguments <ref> [dA97a, x8] </ref>. Theorem 3 (continuity of steady-state distributions) Consider a family P (x) = [p st (x)] s;t2S of substochastic matrices parameterized by x 2 I, where I IR is an interval of real numbers. Assume that the coefficients of P (x) depend continuously on x for x 2 I. <p> By definition, maximal FECs are strongly connected 13 sub-MDPs. Denote by ; = s:; the empty fairness condition. The following theorem summarizes several results of <ref> [dA97a, x5] </ref> for strongly connected MDPs without fairness conditions. Theorem 4 Consider a strongly connected TPS = (S; A; p; r; w). The following assertions hold. The value of H ;; (s) does not depend on s 2 S.
Reference: [dA97b] <author> L. de Alfaro. </author> <title> Temporal logics for the specification of performance and reliability. </title> <booktitle> In Proc. STACS'97, volume 1200 of LNCS, </booktitle> <pages> pages 165-176. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference: [dA98] <author> L. de Alfaro. </author> <title> How to specify and verify the long-run average behavior of probabilistic systems. </title> <booktitle> In Proc. </booktitle> <address> LICS'98, </address> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: In a purely probabilistic system, these properties are related to the steady-state distribution of the Markov chain corresponding to the system. We specify long-run average properties of systems by attaching labels to the system states and transitions, following a simplified version of the approach of <ref> [dA98] </ref>. The labels specify system tasks, whose long-run average outcome or duration can be measured. This enables the specification of several reliability and performance indices, such as throughput, average response time, and mean time between failures. <p> The verification process is based on an adaptation of the algorithms presented in <ref> [dA98] </ref> to systems that include fairness. We show that the presence of fairness does not increase the complexity of the verification problem, which can again be solved in polynomial time in the size of the fair TPS. <p> A timed probabilistic system (TPS) = (S; A; p; S in ; time) consists of an MDP (S; A; p), and of the following additional components <ref> [dA97a, dA98] </ref>: A subset S in S of initial states. Each behavior of must begin with a state in S in . <p> We do not consider behaviors on which I is false, since these behaviors after a certain position cease to complete tasks or to produce outcome, and the long-run average outcome is consequently not well-defined: this point is discussed in detail in <ref> [dA97a, dA98] </ref>. <p> Algorithms that solve this verification problem for the case without fairness conditions have been presented in <ref> [dA97a, dA98] </ref>. To solve the model-checking problem in presence of fairness conditions, we first decompose the fair TPS into the components where a behavior can reside forever under a fair policy. These components are called fair end components, and are presented below. <p> These components are called fair end components, and are presented below. Once the TPS has been decomposed, we apply to each component the algorithm of <ref> [dA98] </ref> to compute the maximal and minimal long-run average outcome for the component, disregarding the fairness conditions. These maximal and minimal values correspond to optimal and pes-simal policies, which need not be fair. <p> In a purely probabilistic system, fair end components correspond to the closed recurrent classes of the Markov chain underlying the system [KSK66]. Fair end components are the fair counterpart of the end components of <ref> [dA97a, dA98] </ref>, and are related to sets used in [KB96] to solve the model-checking problem for PBTL*. As our first application of the above theorem, we obtain a criterion to decide whether a fair TPS is non-Zeno.
Reference: [Der70] <author> C. Derman. </author> <title> Finite State Markovian Decision Processes. </title> <publisher> Acedemic Press, </publisher> <year> 1970. </year>
Reference-contexts: To each state-action pair is associated a probability distribution, used to select the successor state <ref> [Der70] </ref>. We consider a fixed set of typed state variables V, coinciding with the variables of the STS. An MDP = (S; A; p) consists of the following components: A finite set S of states, where each s 2 S assigns value s [[x]] to each x 2 V. <p> To be able to assign probabilities to sets of behaviors, we need to specify the criteria used to choose the actions. To this end, we use the concept of policy <ref> [Der70] </ref>, closely related to the adversaries of [SL94, Seg95] and to the schedulers of [Var85, PZ86]. <p> A policy gives rise to a probability distribution over the set of behaviors <ref> [Der70] </ref>. We write Pr s (A) to denote the probability of event A when policy is used from the initial state s. We also let X i and Y i be the random variables representing the i-th state and the i-th action along a behavior, respectively.
Reference: [GHR93] <author> H.N. Gotz, U. Herzog, and M. Rettelbach. </author> <title> Multiprocessor and distributed system design: the integration of functional specification and performance analysis using stochastic process algebras. </title> <booktitle> In PERFORMANCE'93, volume 729 of LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: under the NASA grant NAG2-892, by the ARO grant DAAH04-95-1-0317, by ARO under the MURI grant DAAH04-96-1-0341, by Army contract DABT63-96-C-0096 (DARPA), by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, and by the NSF grant CCR-9504469. nets [ABC84] and of stochastic process algebras such as TIPP <ref> [GHR93] </ref>, PEPA [Hil96] and EMPA [BG96] with the introduction of nondeterminism and of transitions with unspecified delay distribution. These features enable the modeling of unknown (or imprecisely known) arrival rates and transition probabilities, as well as the modeling of schedulers with unspecified behavior. We provide two semantics for STSs. <p> The introduction of nonde-terminism and of transitions with unspecified delay distributions, and the capability to deal with these features in the verification process, also represents an innovation with respects to probabilistic process algebras for performance modeling, such as TIPP <ref> [GHR93] </ref>, PEPA [Hil96] and EMPA [BG96]. Probabilistic automata [SL94, Seg95] are another model that has been proposed for probabilistic real-time systems.
Reference: [Hil96] <author> J. Hillston. </author> <title> A Compositional Approach to Performance Modelling. </title> <booktitle> Distinguished Dissertations Series. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1996. </year>
Reference-contexts: NASA grant NAG2-892, by the ARO grant DAAH04-95-1-0317, by ARO under the MURI grant DAAH04-96-1-0341, by Army contract DABT63-96-C-0096 (DARPA), by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, and by the NSF grant CCR-9504469. nets [ABC84] and of stochastic process algebras such as TIPP [GHR93], PEPA <ref> [Hil96] </ref> and EMPA [BG96] with the introduction of nondeterminism and of transitions with unspecified delay distribution. These features enable the modeling of unknown (or imprecisely known) arrival rates and transition probabilities, as well as the modeling of schedulers with unspecified behavior. We provide two semantics for STSs. <p> The introduction of nonde-terminism and of transitions with unspecified delay distributions, and the capability to deal with these features in the verification process, also represents an innovation with respects to probabilistic process algebras for performance modeling, such as TIPP [GHR93], PEPA <ref> [Hil96] </ref> and EMPA [BG96]. Probabilistic automata [SL94, Seg95] are another model that has been proposed for probabilistic real-time systems.
Reference: [HSP83] <author> S. Hart, M. Sharir, and A. Pnueli. </author> <title> Termination of probabilistic concurrent programs. </title> <journal> ACM Trans. Prog. Lang. Sys., </journal> <volume> 5(3) </volume> <pages> 356-380, </pages> <year> 1983. </year>
Reference-contexts: Notions of fairness for probabilistic systems have been studied in <ref> [HSP83, Var85] </ref> and more recently in [KB96], which also present model-checking algorithms for probabilistic systems with fairness. Given an MDP = (S; A; p), a fairness condition F for is a mapping F that associates to each s 2 S a subset F (s) A (s).
Reference: [KB96] <author> M. Kwiatkowska and C. Baier. </author> <title> Model checking for a probabilistic branching time logic with fairness. </title> <note> To appear in Distributed Computing. Preliminary version in Technical Report CSR-96-12, </note> <institution> University of Birmingham, </institution> <year> 1996. </year>
Reference-contexts: The translation relies on a new notion of fairness for probabilistic systems, called probabilistic fairness. Unlike previous notions of fairness, which refer to the transitions that are enabled and taken along system behaviors <ref> [Var85, MP91, KB96] </ref>, probabilistic fairness is a structural condition on the policies that govern the resolution of nondeterministic choices. The condition states that, for every policy, there must be a fixed " &gt; 0 such that every fair alternative is selected with probability at least ". <p> The analysis of the verification algorithms also shows that, when consider 2 ing long-run average properties of finite-state systems, our notion of probabilistic fairness yields the same verification algorithms as the weak fairness of <ref> [KB96] </ref>, showing that the two notions are equivalent in this context. 2 Stochastic Transition Systems Stochastic transition systems (STSs) have been inspired by the fair transition systems of [MP91] and by the real-time probabilistic processes of [ACD92]. <p> Notions of fairness for probabilistic systems have been studied in [HSP83, Var85] and more recently in <ref> [KB96] </ref>, which also present model-checking algorithms for probabilistic systems with fairness. Given an MDP = (S; A; p), a fairness condition F for is a mapping F that associates to each s 2 S a subset F (s) A (s). <p> The intended meaning is that the choice at s among actions in F (s) should be "fair." The various notions of fairness differ in the way in which this "fairness" is defined. According to <ref> [KB96] </ref>, a policy is said to be strictly fair (resp. almost, or weakly, fair) if the behaviors that arise under all satisfy (resp. satisfy with probability 1) the following condition: whenever a behavior visits infinitely often a state s, each action in F (s) is chosen infinitely often at s. <p> In a purely probabilistic system, fair end components correspond to the closed recurrent classes of the Markov chain underlying the system [KSK66]. Fair end components are the fair counterpart of the end components of [dA97a, dA98], and are related to sets used in <ref> [KB96] </ref> to solve the model-checking problem for PBTL*. As our first application of the above theorem, we obtain a criterion to decide whether a fair TPS is non-Zeno. <p> We conclude by showing that the notions of weak fairness and probabilistic fairness coincide for finite TPSs and long-run average properties. Theorem 7 Let ~ H (s), where ~ (F ) is the set of weakly fair policies, defined according to <ref> [KB96] </ref>. Then, H F (s). A similar result holds for H + Proof. The result follows from an analysis of the proof of Theorem 5, together with the observation that probabilistically fair policies are also weakly fair. Acknowledgments.
Reference: [KSK66] <author> J.G. Kemeny, J.L. Snell, and A.W. Knapp. </author> <title> Denumerable Markov Chains. </title> <address> D. </address> <publisher> Van Nostrand Company, </publisher> <year> 1966. </year>
Reference-contexts: Theorem 1 For any s 2 S and 2 F , we have P r s (inft (!) is a FEC ) = 1. In a purely probabilistic system, fair end components correspond to the closed recurrent classes of the Markov chain underlying the system <ref> [KSK66] </ref>. Fair end components are the fair counterpart of the end components of [dA97a, dA98], and are related to sets used in [KB96] to solve the model-checking problem for PBTL*. As our first application of the above theorem, we obtain a criterion to decide whether a fair TPS is non-Zeno. <p> Given a sub-stochastic matrix P , the steady-state distribution matrix is defined by P fl = lim n!1 n 1 P n1 k=0 P k <ref> [KSK66] </ref>. We say that a state of P is surely recurrent if the Markov chain corresponding to P has only one closed recurrent class, and if the state belongs to that class. The following result can be proved by linear algebra arguments [dA97a, x8].
Reference: [MP91] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: The translation relies on a new notion of fairness for probabilistic systems, called probabilistic fairness. Unlike previous notions of fairness, which refer to the transitions that are enabled and taken along system behaviors <ref> [Var85, MP91, KB96] </ref>, probabilistic fairness is a structural condition on the policies that govern the resolution of nondeterministic choices. The condition states that, for every policy, there must be a fixed " &gt; 0 such that every fair alternative is selected with probability at least ". <p> ing long-run average properties of finite-state systems, our notion of probabilistic fairness yields the same verification algorithms as the weak fairness of [KB96], showing that the two notions are equivalent in this context. 2 Stochastic Transition Systems Stochastic transition systems (STSs) have been inspired by the fair transition systems of <ref> [MP91] </ref> and by the real-time probabilistic processes of [ACD92]. A stochastic transition system (STS) is a triple S = (V; fi; T ), where: Visa finite set of typed state variables, each with finite domain. The (finite) state space S consists of all type-consistent interpretations of the variables in V.
Reference: [PZ86] <author> A. Pnueli and L. Zuck. </author> <title> Probabilistic verification by tableaux. </title> <booktitle> In Proc. LICS'86, </booktitle> <pages> pages 322-331, </pages> <year> 1986. </year>
Reference-contexts: In particular, STSs generalize GSPNs by introducing transitions with unspecified delay distributions, and by introducing the possibility of nondeterministic choice among enabled immediate transitions. STSs extend in a similar way also the probabilistic finite-state programs of <ref> [PZ86] </ref> and the real-time probabilistic processes of [ACD92]. <p> To be able to assign probabilities to sets of behaviors, we need to specify the criteria used to choose the actions. To this end, we use the concept of policy [Der70], closely related to the adversaries of [SL94, Seg95] and to the schedulers of <ref> [Var85, PZ86] </ref>. A policy is a set of conditional probabilities Q (a j s 0 s 1 s n ), for all sequences of states s 0 s 1 s n 2 S + and all a 2 A (s n ).
Reference: [Seg95] <author> R. Segala. </author> <title> Modeling and Verification of Randomized Distributed Real-Time Systems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1995. </year> <note> Technical Report MIT/LCS/TR-676. </note>
Reference-contexts: The introduction of nonde-terminism and of transitions with unspecified delay distributions, and the capability to deal with these features in the verification process, also represents an innovation with respects to probabilistic process algebras for performance modeling, such as TIPP [GHR93], PEPA [Hil96] and EMPA [BG96]. Probabilistic automata <ref> [SL94, Seg95] </ref> are another model that has been proposed for probabilistic real-time systems. <p> To be able to assign probabilities to sets of behaviors, we need to specify the criteria used to choose the actions. To this end, we use the concept of policy [Der70], closely related to the adversaries of <ref> [SL94, Seg95] </ref> and to the schedulers of [Var85, PZ86]. A policy is a set of conditional probabilities Q (a j s 0 s 1 s n ), for all sequences of states s 0 s 1 s n 2 S + and all a 2 A (s n ). <p> A method to do this is presented in Section 6. A more sophisticated approach to the problem of time divergence, inspired by <ref> [Seg95] </ref>, is discussed in [dA97a]. 4 Translation and Informal Semantics Even though the formal semantics of STSs is defined by translation into fair TPSs, there is a correspondence between the proposed translation and the informal semantics presented in Section 2.1.
Reference: [SL94] <author> R. Segala and N.A. Lynch. </author> <title> Probabilistic simulations for probabilistic processes. </title> <booktitle> In Proc. CONCUR'94, volume 836 of LNCS, </booktitle> <pages> pages 481-496. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The introduction of nonde-terminism and of transitions with unspecified delay distributions, and the capability to deal with these features in the verification process, also represents an innovation with respects to probabilistic process algebras for performance modeling, such as TIPP [GHR93], PEPA [Hil96] and EMPA [BG96]. Probabilistic automata <ref> [SL94, Seg95] </ref> are another model that has been proposed for probabilistic real-time systems. <p> To be able to assign probabilities to sets of behaviors, we need to specify the criteria used to choose the actions. To this end, we use the concept of policy [Der70], closely related to the adversaries of <ref> [SL94, Seg95] </ref> and to the schedulers of [Var85, PZ86]. A policy is a set of conditional probabilities Q (a j s 0 s 1 s n ), for all sequences of states s 0 s 1 s n 2 S + and all a 2 A (s n ).
Reference: [Var85] <author> M.Y. Vardi. </author> <title> Automatic verification of probabilistic concurrent finite-state systems. </title> <booktitle> In Proc. FOCS'85, </booktitle> <pages> pages 327-338, </pages> <year> 1985. </year> <month> 16 </month>
Reference-contexts: The translation relies on a new notion of fairness for probabilistic systems, called probabilistic fairness. Unlike previous notions of fairness, which refer to the transitions that are enabled and taken along system behaviors <ref> [Var85, MP91, KB96] </ref>, probabilistic fairness is a structural condition on the policies that govern the resolution of nondeterministic choices. The condition states that, for every policy, there must be a fixed " &gt; 0 such that every fair alternative is selected with probability at least ". <p> To be able to assign probabilities to sets of behaviors, we need to specify the criteria used to choose the actions. To this end, we use the concept of policy [Der70], closely related to the adversaries of [SL94, Seg95] and to the schedulers of <ref> [Var85, PZ86] </ref>. A policy is a set of conditional probabilities Q (a j s 0 s 1 s n ), for all sequences of states s 0 s 1 s n 2 S + and all a 2 A (s n ). <p> Notions of fairness for probabilistic systems have been studied in <ref> [HSP83, Var85] </ref> and more recently in [KB96], which also present model-checking algorithms for probabilistic systems with fairness. Given an MDP = (S; A; p), a fairness condition F for is a mapping F that associates to each s 2 S a subset F (s) A (s).
References-found: 20

