URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/lindstrom.ps.Z
Refering-URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/
Root-URL: http://www.daimi.aau.dk
Email: E-mail: fblind,wellsg@daimi.aau.dk  
Title: Simulation Based Performance Analysis in Design/CPN  
Author: Bo Lindstrom and Lisa Wells 
Keyword: Performance analysis, Coloured Petri Nets, simulation, random distributions, networks and multiaccess protocol.  
Address: Ny Munkegade, Bldg. 540 DK-8000 Aarhus C Denmark  
Affiliation: Department of Computer Science University of Aarhus  
Abstract: This paper describes the design of facilities for doing simulation based performance analysis. The performance facilities have three main components: functions for generating random numbers from different distributions, statistical variables for collecting different data while simulating, and reporting facilities for generating output from the statistical variables. We also describe the integration of the performance facilities into the Design/CPN tool. To illustrate the usability of the performance facilities, we give a nontrivial example of simulation based performance analysis by analysing a multiaccess protocol. 
Abstract-found: 1
Intro-found: 1
Reference: [AM91] <author> Appel, A.W. and MacQueen, </author> <title> D.B. Standard ML of New Jersey. </title> <editor> In J. Maluszynski and M. Wirsing, editors, </editor> <booktitle> Third International Symposium on Programming Languages Implementation and Logic Programming, volume 528 ofLecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In this way a Performance Report gives a more abstract view of the observed values than the view of an Observation Log file. The performance facilities are mainly implemented in Standard ML <ref> [AM91] </ref>. The graphical interface is currently being implemented in C. 3 Example: Multiaccess Protocol This section contains a non-trivial example of a CPN model that uses the performance facilities of Design/CPN. The example is a model of a protocol from one layer of a network architecture.
Reference: [BG92] <author> Bertsekas, D., Gallager, R.: </author> <title> Data Networks. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: The example is a model of a protocol from one layer of a network architecture. The model presented here will be used in the following sections to illustrate how the performance facilities can be used. A detailed description of the protocol can be found in <ref> [BG92] </ref>, and a brief outline of the protocol follows in Sect. 3.1. Section 3.2 contains detailed description of the model. 3.1 Aloha Protocol The protocol to be modelled is the Aloha protocol which is a multiaccess protocol from the medium access control (MAC) layer of a network architecture.
Reference: [CJ97] <author> Christensen, S. and Jorgensen, J.B. </author> <title> Analysing Bang & Olufsen's BeoLink Audio/Video System Using Coloured Petri Nets. </title> <editor> In P. Azema and G. Balbo, editors, </editor> <booktitle> Proceedings of the 18th Inter national Conference on Application and Theory of Petri Nets, Toulouse, France, volume 1248 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The global clock advances when none of the colour enabled binding elements are ready. See Chap. 5 in [Jen94] for further details. While the Design/CPN tool [Jena] supports state space analysis [CK97], timed simulations and functional analysis <ref> [CJ97] </ref>, it lacked integrated support for performance analysis of a CPN model. Previously, all collection of data had to be explicitly defined and coded by the user. This, in turn, meant that the user had to be familiar with untimed statistical variables 1 and the use of code segments.
Reference: [CK97] <author> Christensen, S. and Kristensen, L.M. </author> <title> State Space Analysis of Hierarchical Coloured Petri Nets. </title> <editor> In: B. Farwer, D. Moldt and M-O. Stehr (Eds): </editor> <booktitle> Proceedings of Workshop on Petri Nets in System Engineering (PNSE'97) Modelling, Verification, and Validation, </booktitle> <address> Hamburg, Germany, </address> <note> Publication No. 205, </note> <institution> University Hamburg, </institution> <address> Fachberich Informatik, </address> <pages> pp. 32-43, </pages> <year> 1997. </year>
Reference-contexts: A binding element is enabled if it is colour enabled (enabled in an ordinary CP-net) and ready. The global clock advances when none of the colour enabled binding elements are ready. See Chap. 5 in [Jen94] for further details. While the Design/CPN tool [Jena] supports state space analysis <ref> [CK97] </ref>, timed simulations and functional analysis [CJ97], it lacked integrated support for performance analysis of a CPN model. Previously, all collection of data had to be explicitly defined and coded by the user.
Reference: [CJK97] <author> Christensen, S., Jorgensen, J.B. and Kristensen, L.M. </author> <title> Design/CPN A Computer Tool for Coloured Petri Nets. </title> <editor> In E. Brinksma, editor, </editor> <booktitle> Proceedings of the Third International Workshop on Tools and Algorithms for the Construction and Analysis of Systems, Twente, The Netherlands volume 1217 of Lecture Notes in Computer Science pages 209-223. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> Also available as DAIMI PB-511, ISSN 0105-8517, </note> <month> February </month> <year> 1997. </year>
Reference: [Dri] <author> Drimmelen, T. </author> <title> Implementation of Statistical Functions in Design/CPN. </title> <note> Online: http://www.daimi.aau.dk/designCPN/libs/pdf/ </note>
Reference-contexts: An example of a phenomenon which we know has such a specific behaviour can be the delay between busses arriving at a bus stop. While analysing the built-in random number generator in Design/CPN, it became clear that this random number generator is not completely satisfactory. It is shown in <ref> [Dri] </ref> that this random number generator produces numbers that can not be considered especially random. This lead to constructing a new random number generator which has been proven to be better than the old one. The distribution functions have then been implemented on top of the new random function. <p> The implemented distribution functions are: Bernoulli, binomial, chi-square, discrete uniform, Erlang, exponential, normal, student and Poisson distribution. See [Rip87] for further information about the distributions. A detailed description of the analysis, implementation and interface can be found in <ref> [Dri] </ref>. To illustrate the use of the distribution functions we refer to the example model in Sect. 3.2, where two distribution functions have been used to generate random values. The first one is used to generate the packets from the DLC layer arriving at the nodes. <p> Sect. 3.1). fun generate packets 0 = empty j generate packets node = let val num = poisson ((!lambda)/(real (!m))) in num'(node, (pack,time ())) + generate packets (node-1) end; 4 This function can be found on the arc from Check Feedback to States in Fig. 2. 5 Theo van Drimmelen <ref> [Dri] </ref> is solely responsible for the design and implementation of the distribution functions presented in this section.
Reference: [Gnuplot] <author> Online: </author> <note> http://www.cs.dartmouth.edu/gnuplot info.html </note>
Reference-contexts: The current observation log file format can be plotted by Gnuplot <ref> [Gnuplot] </ref>. Figure 6 is a Gnuplot graph created from observation log files produced when tracking buffer length for nodes 1 and 2 in the model.
Reference: [Jena] <author> Jensen, K. </author> <note> et al Design/CPN Online, </note> <institution> Department of Computer Science, University of Aarhus, Denmark. </institution> <note> Online: http://www.daimi.aau.dk/designCPN/. </note>
Reference-contexts: A binding element is enabled if it is colour enabled (enabled in an ordinary CP-net) and ready. The global clock advances when none of the colour enabled binding elements are ready. See Chap. 5 in [Jen94] for further details. While the Design/CPN tool <ref> [Jena] </ref> supports state space analysis [CK97], timed simulations and functional analysis [CJ97], it lacked integrated support for performance analysis of a CPN model. Previously, all collection of data had to be explicitly defined and coded by the user.
Reference: [Jenb] <author> Jensen, K. </author> <title> et al Design/CPN Reference Manual, </title> <institution> Department of Computer Science, University of Aarhus, Denmark. </institution> <note> Online: http://www.daimi.aau.dk/designCPN/man/ </note>
Reference-contexts: An untimed statistical variable is a data type with which it is possible to collect some values and later on extract different statistical information such as sum or average <ref> [Jenb] </ref>. Examples of CPN models with explicitly coded performance analysis can be found in Chap. 2, 4, 12 and 15 in [Jen97]. <p> The values accumulated in a statistical variable can be integers or reals. Two types of statistical variables with different behaviour are available: timed and untimed. The original implementation and design of untimed statistical variables was done by Alain Karsenty (see <ref> [Jenb] </ref>). We have modified the implementation of the untimed statistical variables to be more time-effective. Furthermore, we have added the timed statistical variables.
Reference: [Jen92] <author> Jensen, K. </author> <title> Coloured Petri Nets Basic Concepts, Analysis Methods and Practical Use. Vol. 1, Basic Concepts. </title> <booktitle> Monographs in Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [Jen94] <author> Jensen, K. </author> <title> Coloured Petri Nets Basic Concepts, Analysis Methods and Practical Use. Vol. 2, Analysis Methods. </title> <booktitle> Monographs in Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A binding element is enabled if it is colour enabled (enabled in an ordinary CP-net) and ready. The global clock advances when none of the colour enabled binding elements are ready. See Chap. 5 in <ref> [Jen94] </ref> for further details. While the Design/CPN tool [Jena] supports state space analysis [CK97], timed simulations and functional analysis [CJ97], it lacked integrated support for performance analysis of a CPN model. Previously, all collection of data had to be explicitly defined and coded by the user.
Reference: [Jen97] <author> Jensen, K. </author> <title> Coloured Petri Nets Basic Concepts, Analysis Methods and Practical Use. Vol. 3, Practical Use. </title> <booktitle> Monographs in Theoretical Computer Science, chapter 2, </booktitle> <pages> pages 21-37. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Examples of CPN models with explicitly coded performance analysis can be found in Chap. 2, 4, 12 and 15 in <ref> [Jen97] </ref>. The aim of this paper is to present the performance facilities [LWb] which have been integrated into the Design/CPN tool and which remedy the above shortcomings of the tool. These performance facilities provide distribution functions 2 for generating random numbers and high-level support for collecting statistics during simulation.
Reference: [LWa] <author> Lindstrom B., Wells, L. </author> <title> The Design/CPN Statistical Variable Library, </title> <institution> Department of Computer Science, University of Aarhus, Denmark. </institution> <note> Online: http://www.daimi.aau.dk/designCPN/libs/ </note>
Reference-contexts: Updates and accesses of a statistical variable can be freely intermixed. A statistical variable may also be reinitialised at any time, allowing a new set of values to be accumulated. In our implementation of statistical variables <ref> [LWa] </ref>, we do not save all the individual values but instead only calculate the values needed to be able to access the above mentioned statistics. This approach saves a lot of memory compared to accumulating all the values used for calculating the statistics.
Reference: [LWb] <author> Lindstrom B., Wells, L. </author> <title> User Manual for the Performance Analysis Package, </title> <institution> Department of Computer Science, University of Aarhus, Denmark. </institution> <note> Online: http://www.daimi.aau.dk/designCPN/ </note>
Reference-contexts: Examples of CPN models with explicitly coded performance analysis can be found in Chap. 2, 4, 12 and 15 in [Jen97]. The aim of this paper is to present the performance facilities <ref> [LWb] </ref> which have been integrated into the Design/CPN tool and which remedy the above shortcomings of the tool. These performance facilities provide distribution functions 2 for generating random numbers and high-level support for collecting statistics during simulation. <p> These figures contain the models of the node and the receiver parts of the protocol, respectively. These are the most interesting pages of the model for the purpose of this paper because they use the performance facilities found in Design/CPN <ref> [LWb] </ref>. A complete model of the protocol was used to generate the performance results which will be presented in Sect. 6, but only these two pages of the model will be discussed in some detail.
Reference: [Rip87] <author> Ripley, </author> <title> B.D. Stochastic Simulation. </title> <journal> Wiley series in probability and mathematical statistics. Applied probability and statistics, </journal> <year> 1987. </year>
Reference-contexts: This random function gives samples from a standard uniform distribution. The different distribution functions are then implemented by applying different procedures to this random function. The implemented distribution functions are: Bernoulli, binomial, chi-square, discrete uniform, Erlang, exponential, normal, student and Poisson distribution. See <ref> [Rip87] </ref> for further information about the distributions. A detailed description of the analysis, implementation and interface can be found in [Dri]. To illustrate the use of the distribution functions we refer to the example model in Sect. 3.2, where two distribution functions have been used to generate random values.
References-found: 15

