URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iccad92.CS.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~shiple/publications/index.html
Root-URL: 
Title: Automatic Compositional Minimization in CTL Model Checking  
Author: Massimiliano Chiodo Thomas R. Shiple, Alberto L. Sangiovanni-Vincentelli, Robert K. Brayton 
Address: Marelli, Pavia, Italy  Berkeley, CA 94720  
Affiliation: Magneti  Department of EECS, University of California,  
Abstract: We describe a method for reducing the complexity of CTL model checking on a system of interacting finite state machines. The method consists essentially of reducing each component machine with respect to the property we want to verify, and then verifying the property on the composition of the reduced components. The procedure is fully automatic and produces an exact result. We assess the potential of our approach on real-world examples, and demonstrate the method on a circuit. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Arnett, </author> <title> A High Performance Solution for In-Vehicle Networking - `Controller Area Network (CAN),' </title> <type> SAE Technical Paper Series, 870823, </type> <month> Apr. </month> <year> 1987. </year>
Reference-contexts: The assertion s 0 j= F says that for all states that can be reached from s 0 , if req is true, then ack will eventually follow sometime in the future. To understand the applicability of CTL to system design, consider as an example a network of CAN <ref> [1] </ref> controllers. The CAN (Controller Area Network) protocol is a serial protocol designed for automotive applications, and is a candidate for the European standard for in-vehicle networking. The CAN architecture consists of a number of nodes that communicate with each other by broadcasting messages on a serial bus.
Reference: [2] <author> R. E. Bryant, </author> <title> Graph-Based Algorithms for Boolean Function Manipulation, </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-35(8), </volume> <pages> pp. 677-691, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: Traditionally, the size of a system is identified with the number of states, and hence the issue is referred to as the state-explosion problem. The introduction of symbolic representations, based on binary decision diagrams (BDDs) <ref> [2] </ref>, and symbolic verification procedures [9, 18, 3], made it possible to verify complex systems that could not be handled by techniques based on explicit representations. However, just as with explicit representations, the size of the parallel composition may still be too large to handle.
Reference: [3] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, and D. L. Dill, </author> <title> Sequential Circuit Verification Using Symbolic Model Checking, </title> <booktitle> in Proc. of 27th Design Automation Conference, </booktitle> <pages> pp. 46-51, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Traditionally, the size of a system is identified with the number of states, and hence the issue is referred to as the state-explosion problem. The introduction of symbolic representations, based on binary decision diagrams (BDDs) [2], and symbolic verification procedures <ref> [9, 18, 3] </ref>, made it possible to verify complex systems that could not be handled by techniques based on explicit representations. However, just as with explicit representations, the size of the parallel composition may still be too large to handle.
Reference: [4] <author> J. R. Burch, E. M. Clarke, and D. E. </author> <title> Long, Representing Circuits More Efficiently in Symbolic Model Checking, </title> <booktitle> in Proc. of 28th Design Automation Conference, </booktitle> <pages> pp. 403-407, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: This reduction is property independent in that the reduction is valid for any property on the main machine. The main limitation of this approach is that it cannot handle CTL formulas which specify properties of multiple interacting machines. Finally, Burch <ref> [4] </ref> describes a technique for efficiently computing the existential quantification of variables from a product of component transition relations, a central computation in symbolic model checking.
Reference: [5] <author> M. Chiodo, T. R. Shiple, A. Sangiovanni-Vincentelli, and R. K. Brayton, </author> <title> Automatic Reduction in CTL Compositional Model Checking, </title> <note> Memorandum No. </note> <institution> UCB/ERL M92/55, Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: In this paper we focus on assessing the potential of our technique on real systems. A more formal description of the method and detailed proofs of the theorems presented in this paper are given in <ref> [5] </ref>. Section 2 gives definitions that will be used in the paper and introduces CTL. In Section 3 we summarize our technique. In Section 4 we apply our method to a circuit and discuss the results.
Reference: [6] <author> E. M. Clarke, E. A. Emerson, and P. Sistla, </author> <title> Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications, </title> <journal> ACM Trans. Prog. Lang. Syst., </journal> <volume> 8(2), </volume> <pages> pp. 244-263, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Temporal logic model checking procedures are potentially powerful verification tools for finite state systems <ref> [16, 6] </ref>. However, when the system under examination consists of several communicating parallel machines, the potential arises for an explosion in the size of the representation of the composition. <p> Note that every set of transitions, be it a transition relation or a path, is denoted by its characteristic function implemented as a BDD. 2.3 Computation Tree Logic We use Computation Tree Logic, or CTL <ref> [6] </ref>, to specify properties of FSMs. The set of all CTL formulas can be defined inductively in terms of a subset of CTL formulas, which we call the base formulas. The choice of this subset is not unique, although the choice for us is not arbitrary (see Section 3.2.3).
Reference: [7] <author> E. M. Clarke, D. E. Long, and K. L. McMillan, </author> <title> Compositional Model Checking, </title> <booktitle> in Proc. of the 4th Annual Symposium on Logic in Computer Science, Asilomar, </booktitle> <address> CA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: The !-regular properties he wants to verify are preserved under such user-provided reductions. As another example of compositional minimization, the model checking algorithm based on the interface rule, proposed by Clarke et al. <ref> [7] </ref>, is a fully automatic technique that allows verification of properties of a single (main) machine within a system of interacting machines. Here, the other (side) machines are minimized [13] by hiding those output variables of the side machines which the main machine cannot observe.
Reference: [8] <author> E. M. Clarke, O. Grumberg and D. E. </author> <title> Long, Model Checking and Abstraction, </title> <booktitle> in Proc. of Principles of Programming Languages, </booktitle> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: Kurshan and McMillan have attempted a similar approach [14]. As another example of compositional verification, Grumberg et al. <ref> [12, 8] </ref> define subsets of the logics CTL fl and CTL, namely 8CTL fl and 8CTL, where only universal path quantification is allowed. For these logics, if all the component machines satisfy a given property, then the composition also satisfies that property.
Reference: [9] <author> O. Coudert, C. Berthet, and J. C. Madre, </author> <title> Verification of Synchronous Sequential Machines Based on Symbolic Execution, </title> <booktitle> in Lecture Notes in Computer Science: Automatic Verification Methods for Finite State Systems, </booktitle> <volume> vol. 407, </volume> <editor> editor J. Sifakis, </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 365-373, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Traditionally, the size of a system is identified with the number of states, and hence the issue is referred to as the state-explosion problem. The introduction of symbolic representations, based on binary decision diagrams (BDDs) [2], and symbolic verification procedures <ref> [9, 18, 3] </ref>, made it possible to verify complex systems that could not be handled by techniques based on explicit representations. However, just as with explicit representations, the size of the parallel composition may still be too large to handle. <p> Thus, we treat the set difference A i A fl i as a don't care set which we can use to minimize the size of the BDD for A i . Currently, we use the restrict operator <ref> [9] </ref> as a heuristic for finding A i . Proposition 6 assures us that we can use any transition relation between A i and A fl i and not upset the final result.
Reference: [10] <author> E. A. Emerson, </author> <title> Temporal and Modal Logic, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <editor> editor J. van Leeuwen, </editor> <publisher> Elsevier Science Publishers B.V., </publisher> <pages> pp. 995-1072, </pages> <year> 1990. </year>
Reference-contexts: (SentM sg 1 + RecM sg 1 )) 3 Model Checking 3.1 Model Checking on a Single FSM The model checking problem for CTL is: given a transition relation T for a synchronous finite state machine, and a CTL formula F , find all the states in T satisfying F <ref> [10] </ref>. The single machine model checker is an integral part of our procedure for model checking on a system of FSMs. The input to our single machine model checker is a transition relation T and a (non-nested) CTL base formula F . <p> We create a fresh atomic proposition to represent the set of states that satisfy a given subformula. In this way, we reduce the problem of checking an arbitrary CTL formula to one of checking a series of non-nested, base formulas. This formulation follows that presented in <ref> [10] </ref>. 4 Experiments and Discussion In this section, we demonstrate our compositional technique on a real circuit. The system described here implements the part of ID transmission and arbitration for two CAN nodes. The circuit for one node is shown in Figure 5.
Reference: [11] <author> S. Graf and B. Steffen, </author> <title> Compositional Minimization of Finite State Systems, </title> <booktitle> in Lecture Notes in Computer Science: Proc. of the 1990 Workshop on Computer-Aided Verification, </booktitle> <volume> vol. 531, </volume> <editor> editors R. P. Kurshan and E. M. Clarke, </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 186-196, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: However, just as with explicit representations, the size of the parallel composition may still be too large to handle. Methods proposed to avoid the construction of the complete state graph, and therefore to avoid the representation explosion, can be split into two categories, compositional verification and compositional minimization <ref> [11] </ref>. In the first category, one tries to deduce properties of a composition of processes by reasoning on the individual components and their interactions, without ever building the composed system.
Reference: [12] <author> O. Grumberg and D. E. </author> <title> Long, Model Checking and Modular Verification, </title> <booktitle> in Lecture Notes in Computer Science: Proc. CONCUR '91: 2nd Inter. Conf. on Concurrency Theory, </booktitle> <volume> vol. 527, </volume> <editor> editors J. C. M. Baeten and J. F. Groote, </editor> <publisher> Springer-Verlag, </publisher> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Kurshan and McMillan have attempted a similar approach [14]. As another example of compositional verification, Grumberg et al. <ref> [12, 8] </ref> define subsets of the logics CTL fl and CTL, namely 8CTL fl and 8CTL, where only universal path quantification is allowed. For these logics, if all the component machines satisfy a given property, then the composition also satisfies that property.
Reference: [13] <author> J. E. Hopcroft, </author> <title> An n log n Algorithm for Minimizing the States in a Finite Automaton, </title> <booktitle> in The Theory of Machines and Computation, </booktitle> <address> New York: </address> <publisher> Academic Press, </publisher> <pages> pp. 189-196, </pages> <year> 1971. </year>
Reference-contexts: As another example of compositional minimization, the model checking algorithm based on the interface rule, proposed by Clarke et al. [7], is a fully automatic technique that allows verification of properties of a single (main) machine within a system of interacting machines. Here, the other (side) machines are minimized <ref> [13] </ref> by hiding those output variables of the side machines which the main machine cannot observe. This reduction is property independent in that the reduction is valid for any property on the main machine.
Reference: [14] <author> R. P. Kurshan and K. L. McMillan, </author> <title> A Structural Induction Theorem for Processes, </title> <booktitle> in Proc. of 8th ACM Symp. on Principles of Distributed Computing, </booktitle> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Kurshan and McMillan have attempted a similar approach <ref> [14] </ref>. As another example of compositional verification, Grumberg et al. [12, 8] define subsets of the logics CTL fl and CTL, namely 8CTL fl and 8CTL, where only universal path quantification is allowed.
Reference: [15] <author> R. P. Kurshan, </author> <title> Analysis of Discrete Event Coordination, </title> <booktitle> in Lecture Notes in Computer Science: Proc. REX Workshop on Stepwise Refinement of Distributed Systems, Models, Formalisms, Correctness, </booktitle> <volume> vol. 430, </volume> <editor> editors J. W. de Bakker, W. -P. de Roever, and G. Rozenberg, </editor> <publisher> Springer-Verlag, </publisher> <month> May </month> <year> 1989. </year>
Reference-contexts: For these logics, if all the component machines satisfy a given property, then the composition also satisfies that property. However, these logics are strictly less expressive than CTL fl and CTL, respectively. As for compositional minimization, Kurshan <ref> [15] </ref> uses property-dependent homomorphic reductions, which relax the behavior of the component machines, to produce component machines that have fewer states than the original ones. The !-regular properties he wants to verify are preserved under such user-provided reductions. <p> Note that in our work, reduction of a machine means reducing the size of the representation of the machine by removing irrelevant behavior. This differs, for example, from the usage of the term in COSPAN <ref> [15] </ref>, where reduction means making a machine smaller by adding behavior. In this paper we focus on assessing the potential of our technique on real systems. A more formal description of the method and detailed proofs of the theorems presented in this paper are given in [5].
Reference: [16] <author> Z. Manna and A. Pneuli, </author> <title> Verification of Concurrent Programs: The Temporal Framework, in The Correctness Problem in Computer Science, </title> <editor> editors R. S. Boyer and J. Strother Moore, </editor> <booktitle> Int. Lecture Series in Computer Science, </booktitle> <address> London: </address> <publisher> Academic Press, </publisher> <pages> pp. 215-273, </pages> <year> 1981. </year>
Reference-contexts: 1 Introduction Temporal logic model checking procedures are potentially powerful verification tools for finite state systems <ref> [16, 6] </ref>. However, when the system under examination consists of several communicating parallel machines, the potential arises for an explosion in the size of the representation of the composition.
Reference: [17] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> Sequential Circuit Design Using Synthesis and Optimization, </title> <booktitle> in Proc. of International Conference on Computer Design, </booktitle> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The core of the compositional model checker has been implemented. It will be part of the verification system being developed at UC Berkeley, a system that will be tightly linked with the Sequential Interactive Synthesis sys-tem <ref> [17] </ref>. Once a viable user interface to the model checker is completed, we plan to test thoroughly the effectiveness of our method on a variety of examples. Several ideas to increase the power of our approach deserve investigation.
Reference: [18] <author> H. J. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> Implicit State Enumeration of Finite State Machines using BDDs, </title> <booktitle> in Proc. of IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pp. 130-133, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Traditionally, the size of a system is identified with the number of states, and hence the issue is referred to as the state-explosion problem. The introduction of symbolic representations, based on binary decision diagrams (BDDs) [2], and symbolic verification procedures <ref> [9, 18, 3] </ref>, made it possible to verify complex systems that could not be handled by techniques based on explicit representations. However, just as with explicit representations, the size of the parallel composition may still be too large to handle.
Reference: [19] <author> P. Wolper and V. Lovinfosse, </author> <title> Verifying Properties of Large Sets of Processes with Network Invariants, </title> <booktitle> in Lecture Notes in Computer Science: Automatic Verification Methods for Finite State Systems, </booktitle> <volume> vol. 407, </volume> <editor> editor J. Sifakis, </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 68-80, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: In the second category, one tries to reduce or minimize the components in such a way that their composition yields a smaller, yet semantically equivalent, model of the total system. As an example of the first category, Wolper <ref> [19] </ref> inductively verifies complex systems by looking for network invariants, that is properties that, if satisfied by a network of n identical processes, will be satisfied by a network of n + 1 processes. Kurshan and McMillan have attempted a similar approach [14].
References-found: 19

