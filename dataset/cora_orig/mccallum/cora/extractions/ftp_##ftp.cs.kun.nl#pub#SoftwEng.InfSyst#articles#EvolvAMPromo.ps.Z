URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EvolvAMPromo.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: ferikp,tvdwg@cs.kun.nl  
Title: Towards a General Theory for the Evolution of Application Domains Towards a General Theory for
Author: H.A. Proper, Th.P. van der Weide H.A. Proper and Th.P. van der Weide. 
Date: February 1993.  
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands  
Affiliation: Department of Information Systems, University of Nijmegen  
Note: Version of May 3, 1993 at 17:51  Published as:  In M.E. Or-lowska and M. Papazoglou, editors, Proceedings of the Fourth Australian Database Conference, Advances in Database Research, pages 346-362. World Scientific, Brisbane, Australia,  
Abstract: In this article we focus on evolving information systems. First a delimitation of the concept of evolution is discussed. The main result is a first attempt to a general theory for such evolution. In this theory, the underlying data model is a parameter, making the theory applicable for a wide range of modelling techniques. 
Abstract-found: 1
Intro-found: 1
Reference: [All84] <author> J.F. Allen. </author> <title> Towards a General Theory of Action and Time. </title> <journal> Artificial Intelligence, </journal> 1984(23) 123-154, 1984. Page <volume> 8 </volume> ~ ~ L ~ O ~ ~ ~ ' $ AMH ' $ H type ' $ H constr ' $ H meth ' $ H pop ' $ H dom ' $ AME ' $ ' $ R ' $ M : y 6 HasTypes - , , , Dom - a a a a a a a ! ! ! ! ! ! ! AME-Evol - ? ? 
Reference-contexts: In this paper, the time axis is regarded as an abstract data type. Several ways of defining a time axis exist, see e.g. [CR87], [WJL91] or <ref> [All84] </ref>. The time axis is the axis along which the application model evolves (through the application model universe).
Reference: [BW89] <author> P.D. Bruza and Th.P. van der Weide. </author> <title> The Semantics of Data Flow Diagrams. </title> <booktitle> In Proceedings of the International Con ference on Management of Data, Hyder abad, </booktitle> <address> India, </address> <year> 1989. </year>
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [CR87] <author> J. Clifford and A. Rao. </author> <title> A sim ple, general structure for Temporal Do mains. </title> <editor> In C. Rolland, F. Bodart, and M. Leonard, editors, </editor> <booktitle> Temporal Aspects in Information Systems, </booktitle> <pages> pages 17-28. </pages> <address> North-Holland/IFIP, </address> <year> 1987. </year>
Reference-contexts: In this paper, the time axis is regarded as an abstract data type. Several ways of defining a time axis exist, see e.g. <ref> [CR87] </ref>, [WJL91] or [All84]. The time axis is the axis along which the application model evolves (through the application model universe).
Reference: [FOP92a] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A Conceptual Framework for Evolving Information Systems. </title> <editor> In H.G. Sol and R.L. Crosslin, editors, </editor> <booktitle> Dynamic Modelling of Information Systems II, </booktitle> <pages> pages 353-375. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference: [FOP92b] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> Evolving Information Systems: Beyond Temporal Information Systems. </title> <editor> In A.M. Tjoa and I. Ramos, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 92), </booktitle> <pages> pages 282-287, </pages> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction As has been argued in [Rod91] and <ref> [FOP92b] </ref>, there is a growing demand for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects). In case of snapshot databases structure modifications lead to costly data conversions and reprogramming. <p> The world model encompasses the combination of information structure, constraints and the population. A conceptual specification of a universe of discourse, containing both the action and world model, is called an application model ([FOP92a], <ref> [FOP92b] </ref>). The resulting hierarchy of models is depicted in figure 1. 2.2 An example of evolution Traditionally, a world model consists of a fixed data model according to some data modelling technique, and a population conforming to this data model.
Reference: [Gri82] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference-contexts: From this identification, the difference between a traditional information system, Page 1 and its evolving counterpart, will become clear. This is followed by a discussion on how the evolution of an information system is modelled. 2.1 A hierarchy of models According to <ref> [Gri82] </ref>, a conceptual (i.e. complete and minimal) specification of a universe of discourse consists of the following components: 1. an information structure, a set of constraints and a population conforming to these requirements. 2. a set of action specifications describing the tran sitions that can be performed by the system.
Reference: [HPW92a] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Data Mod-elling in Complex Application Domains. </title> <editor> In P. Loucopoulos, editor, </editor> <booktitle> Proceedings of the Fourth International Conference CAiSE'92 on Advanced Information Systems Engineering, volume 593 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-377, </pages> <address> Manchester, United Kingdom, May 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [HPW92b] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal Definition of a Conceptual Language for the Description and Manipulation of Information Models. </title> <type> Technical Report 92/10, </type> <institution> Page 9 SERC, Software Engineering Research Centre, </institution> <address> Utrecht, The Netherlands, </address> <month> July </month> <year> 1992. </year>
Reference: [HSV89] <author> K.M. van Hee, L.J. Somers, and M. Voorhoeve. </author> <title> Executable Specifications for Distributed Information Systems. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information System Concepts: An In-depth Analysis, </booktitle> <pages> pages 139-156. </pages> <address> North-Holland/IFIP, Amsterdam, The Nether-lands, </address> <year> 1989. </year>
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The example of figure 2 contains nine object types: three entity types Record, Song and Frequency, two relation types Recording and Lending-frequency, and four label types Title, Artist, Author and Times. 3.1.2 Type Relatedness For object types, the (reflexive and symmetrical) relation ~ expresses type relatedness between object types (see <ref> [HW93] </ref>). Object types x and y are termed type related (x ~ y) iff populations of object types x and y may have values in common. Type relatedness corresponds to mode equivalence in programming languages ([WMP + 76]).
Reference: [JMSV92] <author> M. Jarke, J. Mylopoulos, J.W. Schmidt, and Y. Vassiliou. DAIDA: </author> <title> An Environment for Evolving Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 20(1) </volume> <pages> 1-50, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Version modelling in engineering databases can be seen as a restricted form of evolving information systems ([Kat90], <ref> [JMSV92] </ref>). An important requirement for evolving information systems, not covered by version modelling systems, is that changes to the structure can be made on-line. In version modelling, a structural change requires the replacement of the old system by a new system.
Reference: [Kat90] <author> R.H. Katz. </author> <title> Toward a Unified Framework for Version Modelling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <year> 1990. </year>
Reference: [MS90] <author> E. McKenzie and R. Snodgrass. </author> <title> Schema Evolution and the Relational Algebra. </title> <journal> Information Systems, </journal> <volume> 15(2) </volume> <pages> 207-232, </pages> <year> 1990. </year>
Reference-contexts: In version modelling, a structural change requires the replacement of the old system by a new system. Other research regarding evolving information systems can be found in <ref> [MS90] </ref>, in which an algebra is presented that allows relational tables to evolve by changing their arity. The structure of the paper is as follows. In section 2 we describe the approach that has been taken to the concept of evolution. We will not focus on a particular modelling technique.
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference: [PW92] <author> H.A. Proper and Th.P. van der Weide. </author> <title> A General Theory for the Evolution of Application Models. </title> <type> Technical Report 92-26, </type> <institution> Department of Information Systems, University of Nijmegen, The Nether-lands, </institution> <year> 1992. </year>
Reference-contexts: Furthermore, type relatedness of roots implies type relatedness of object types: Theorem 3.1 (type relatedness propagation) 9 z 1 ;z 2 [z 1 ~ z 2 ^ z 1 RootOf x ^ z 2 RootOf y] () x ~ y These properties have been proven in <ref> [PW92] </ref>. 4 Secondary elements of Ap plication Models The hierarchy of models (see figure 1) describes how an application model is constructed from other (sub)models. However, this hierarchy disregards relations that must hold between these submodels, for example, the relation between a population and the information structure. <p> Every application model version must adhere to some rules of wellformedness. Some of these rules are modelling technique dependent. Nonetheless, some general rules about application model versions can be stated. In <ref> [PW92] </ref> a formalisation of these rules is provided. An object type x is called alive at a certain point of time t, if it is part of the application model version at that point of time (x 2 O t ). <p> Furthermore, object types that own the same constraint or method, have to be type related. Finally, due to inheritance, if a constraint is defined for a parent object type, it must be defined for its children as well. For populations some interesting properties have been proven <ref> [PW92] </ref>. An first example states: every instance of an object type is also an instance of one of its roots. <p> This rule can be generalised to all object types, leading to: Lemma 4.2 x 6~ y ) 8 t;u [Pop t (x) " Pop u (y) = ?] For the proofs of these properties, refer to <ref> [PW92] </ref>. 5 Evolution of Application Models The basis of the theory for evolving application models is formed by the concept of evolution continuum, capturing both dimensions of evolution of application models, being the universe of application model and time.
Reference: [Rod91] <author> J.F. Roddick. </author> <title> Dynamically changing schemas within database models. </title> <journal> The Australian Computer Journal, </journal> <volume> 23(3) </volume> <pages> 105-109, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: 1 Introduction As has been argued in <ref> [Rod91] </ref> and [FOP92b], there is a growing demand for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects). In case of snapshot databases structure modifications lead to costly data conversions and reprogramming.
Reference: [SA85] <author> R. Snodgrass and I. Ahn. </author> <title> A Taxonomy of Time in Databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 236-246, </pages> <address> Austin, </address> <year> 1985. </year>
Reference: [Tro91] <author> O.M.F. de Troyer. </author> <title> The OO-Binary Relationship Model: A Truly Object Oriented Conceptual Model. </title> <editor> In R. An-dersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, </booktitle> <pages> pages 561-578, </pages> <address> Trondheim, Norway, </address> <month> May </month> <year> 1991. </year> <note> Lecture Notes in Computer Science 498. </note>
Reference-contexts: Constraints are inherited via the identification hierarchy. However, as in object oriented data modelling techniques, overriding of constraint definition in identification hierarchies is possible (see for instance <ref> [Tro91] </ref>). As an illustration of the assignment of constraints to object types, consider figure 4. The depicted data model is conforming to NIAM, while the subtype defining rules have been formulated in LISA-D. The modelled universe of discourse is concerned with the administration of airplanes.
Reference: [WHO92] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 167 - 223. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference: [WJL91] <author> G. Wiederhold, S. Jajodia, and W. Lit-win. </author> <title> Dealing with the Granularity of Time in Temporal Databases. </title> <editor> In R. An-dersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 124-140, </pages> <address> Trond-heim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In this paper, the time axis is regarded as an abstract data type. Several ways of defining a time axis exist, see e.g. [CR87], <ref> [WJL91] </ref> or [All84]. The time axis is the axis along which the application model evolves (through the application model universe).
Reference: [WMP + 76] <author> A. van Wijngaarden, B.J. Mailloux, J.E.L. Peck, C.H.A. Koster, M. Sint-zoff, C.H. Lindsey, L.T. Meertens, and R.G. Fisker. </author> <title> Revised Report on the Algorithmic Language ALGOL 68. </title> <publisher> Springer-Verlag, </publisher> <year> 1976. </year>
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year> <pages> Page 10 </pages>
Reference-contexts: In order to keep track of the wear and tear of LP's, the number of times an LP has been lent is registered. The information structure and constraints of this universe of discourse are modelled in figure 2 in the style of ER, according to the conventions of <ref> [You89] </ref>. Note the special notation of attributes (Title) using a mark symbol (#) followed by the attribute (# Title).
References-found: 23

