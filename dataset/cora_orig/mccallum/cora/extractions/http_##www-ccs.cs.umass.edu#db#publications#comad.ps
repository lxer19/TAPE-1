URL: http://www-ccs.cs.umass.edu/db/publications/comad.ps
Refering-URL: http://www-ccs.cs.umass.edu/db/publications/
Root-URL: 
Title: Autonomy Requirements in Heterogeneous Distributed Database Systems 1  
Author: Panos K. Chrysanthis Krithi Ramamritham flfl 
Address: Pittsburgh, Pittsburgh, PA 15260  Amherst, MA 01003  
Affiliation: Dept. of Computer Science, University of  flfl Dept. of Computer Science, University of Massachusetts,  
Abstract: In the context of multidatabase systems and heterogeneous distributed database systems, it has been observed that autonomy of the component databases has to be violated in order to maintain traditional database and transaction properties. However, very little work exists that systematically analyzes (a) the semantics of autonomy and (b) the implications of autonomy vis a vis correctness specifications and database protocols. Hence, this paper is aimed at characterizing the different types of autonomy by focusing on transaction management and showing the relationships between autonomy requirements and database protocols. As a case-study, we investigate the autonomy implications of the two-phase commit protocol and its multidatabase variants. Our analysis shows that these protocols involve tradeoffs between the autonomy of the transactions, with respect to accessing the data objects, and the autonomy of the transaction management system, with respect to responding to the transaction management primitives. As a result, this paper brings out the practical considerations involved in selecting between alternative protocols.
Abstract-found: 1
Intro-found: 1
Reference: [BHG87] <author> Bernstein P. A., V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: Whereas consistency entails control over all data across the multiple databases, autonomy implies lack of any such global control. In traditional distributed databases, full consistency is ensured by serial-izability in conjunction with failure atomicity at the cost of autonomy <ref> [BHG87] </ref>. In the context of MDBS, it has been observed that autonomy of individual nodes or database systems has to be violated in order to maintain traditional database and transaction properties. In fact, different, and quite often inconsistent, names have been associated with different types of autonomy requirements. <p> We analyze the standard two-phase commit (2PC) protocol used in traditional distributed database systems <ref> [BHG87] </ref> and a variation of this protocol, called emulated 2PC (E2PC) [SKS91, MR + 92], explicitly designed to meet the needs of autonomy requirements in multidatabases.
Reference: [BS88] <author> Breitbart Y. and A. Silberschatz. </author> <title> Multidatabase Update Issues. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1988. </year> <month> 12 </month>
Reference: [BST90] <author> Breitbart Y., A. Silberschatz and G. Thompson. </author> <title> Reliable Transaction Management in a Multidatabase System. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> 215-224, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: effect of database protocols on autonomy, and * identifying the tradeoffs between different types of autonomy. 1 This material is based upon work supported by the National Science Foundation under grants IRI-9109210 and IRI-9210588 and a grant from University of Pittsburgh. 1 Because of its extensive treatment in the literature <ref> [BST90, WV90, SKS91, MR + 92] </ref>, we have chosen the standard two-phase commit protocol and its multidatabase variants to serve as a detailed case study in our analysis. We also examine protocols designed to maintain consistency in multidatabases. <p> The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion [DE89, WV90, Pu88, PV88, GRS91]. This approach also includes proposals for commit protocols suitable for MDBSs <ref> [BST90, GRS91, SKS91] </ref>. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments. In most cases, these correctness criteria are relaxations of seri-alizability, such as, quasi-serializability [DE89] and cooperative serializability [Ch91]. <p> We consider additional axioms for achieving M-serializability by examining these possibilities. The first scheme, termed MSR-E2PC (I), prevents subtransactions from accessing any objects that are accessed by local transactions <ref> [BST90] </ref>. Let GT be the set of subtransactions at a node. Let LT be the set of local transactions at a node. Let L ob be the set of objects accessed only by local transactions at a node.
Reference: [BGS92] <author> Breitbart Y., H. Garcia-Molina, and A. Silberschatz. </author> <title> Overview of Multidatabase Transaction Management. </title> <journal> VLDB Journal Vol.1, No.2, </journal> <year> 1992. </year>
Reference-contexts: In this paper, we are focusing on what is usually termed execution autonomy <ref> [DE89, VE91, SL90, SKS91, BGS92] </ref> which refers to the ability of a local DBMS to execute operations and transaction management primitives submitted directly to it without any external interference.
Reference: [Ch91] <author> Chrysanthis P. K. </author> <title> ACTA, A Framework for Modeling and Reasoning about Extended Transactions. </title> <type> Ph.D. Thesis. </type> <institution> Department of Computer and Information Science, University of Massachusetts, Amherst, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments. In most cases, these correctness criteria are relaxations of seri-alizability, such as, quasi-serializability [DE89] and cooperative serializability <ref> [Ch91] </ref>. <p> The above specification of M-serializability reveals that a pair is an instance of two cooperative transactions which maintain some consistency properties and M-serializability is a form of Cooperative serializability (CoSR) <ref> [Ch91, RP92] </ref>.
Reference: [CR91] <author> Chrysanthis, P. K. and Ramamritham, K. </author> <title> A Formalism for Extended Transaction Models. </title> <booktitle> In Proceedings of the seventeenth International Conference on Very Large Databases, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: Begin, Commit, Abort, and Restart belong to this set. The first three are executed, respectively, in response to the inv (Begin), inv (Commit), and inv (Abort) events associated with transactions. We will be using ACTA formalism <ref> [CR91] </ref>, a first-order logic based formalism, to precisely state transaction properties, correctness requirements, as well as the behavior of transaction processing mechanisms. In ACTA, these three aspects of a database system can be expressed as constraints on histories generated by the execution of transactions.
Reference: [DE89] <author> Du W. and A. K. Elmagarmid. </author> <title> Quasi Serializability: a Correctness Criterion for Global Concurrency Control in InterBase. </title> <booktitle> In Proceedings of the Fifteenth International Conference on Very Large Databases, </booktitle> <pages> pages 347-355, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: In this paper, we are focusing on what is usually termed execution autonomy <ref> [DE89, VE91, SL90, SKS91, BGS92] </ref> which refers to the ability of a local DBMS to execute operations and transaction management primitives submitted directly to it without any external interference. <p> The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion <ref> [DE89, WV90, Pu88, PV88, GRS91] </ref>. This approach also includes proposals for commit protocols suitable for MDBSs [BST90, GRS91, SKS91]. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments. <p> This approach also includes proposals for commit protocols suitable for MDBSs [BST90, GRS91, SKS91]. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments. In most cases, these correctness criteria are relaxations of seri-alizability, such as, quasi-serializability <ref> [DE89] </ref> and cooperative serializability [Ch91]. <p> Local transactions cannot access the ticket. Hence, the ticket scheme violates data access autonomy in a way similar to the E2PC protocols. Another example is the notion of quasi-serializability <ref> [DE89] </ref> which is a relaxation of serializability.
Reference: [Elm91] <editor> Elmagarmid A. K. (Editor). </editor> <title> Database Transaction Models for Advanced Applications, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: In most cases, these correctness criteria are relaxations of seri-alizability, such as, quasi-serializability [DE89] and cooperative serializability [Ch91]. The third approach re-defines or extends the traditional transaction model to a transaction model more suitable for MDBSs with different correctness properties (See <ref> [Elm91] </ref> for a description of other extended transaction models proposed for different systems.) In this paper we confine ourselves to the traditional transaction model and so study the interplay between correctness criteria and autonomy in the context of this model.
Reference: [GRS91] <author> Georgakopoulos D., M. Rusinkiewicz and A. Sheth. </author> <title> On Serializability of Multi-database Transactions through Forced Local Conflicts. </title> <booktitle> In Proceedings of the IEEE Seventh International Conference on Data Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion <ref> [DE89, WV90, Pu88, PV88, GRS91] </ref>. This approach also includes proposals for commit protocols suitable for MDBSs [BST90, GRS91, SKS91]. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments. <p> The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion [DE89, WV90, Pu88, PV88, GRS91]. This approach also includes proposals for commit protocols suitable for MDBSs <ref> [BST90, GRS91, SKS91] </ref>. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments. In most cases, these correctness criteria are relaxations of seri-alizability, such as, quasi-serializability [DE89] and cooperative serializability [Ch91]. <p> But, just as we analyzed these protocols designed to ensure failure atomicity, other multidatabase protocols designed to maintain data consistency in MDBSs can be analyzed in terms of their autonomy properties. For example, in the ticket scheme <ref> [GRS91] </ref>, global serializability in a MDBS is achieved by forcing all sub-transactions executing on a node to read and write a special object, called the ticket. Local transactions cannot access the ticket. Hence, the ticket scheme violates data access autonomy in a way similar to the E2PC protocols.
Reference: [MR + 92] <author> Mehrotra S., R. Rastogi, Y. Breitbart, H. Korth, and A. Silberschatz. </author> <title> Ensuring Transaction Atomicity in Multidatabase Systems. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: effect of database protocols on autonomy, and * identifying the tradeoffs between different types of autonomy. 1 This material is based upon work supported by the National Science Foundation under grants IRI-9109210 and IRI-9210588 and a grant from University of Pittsburgh. 1 Because of its extensive treatment in the literature <ref> [BST90, WV90, SKS91, MR + 92] </ref>, we have chosen the standard two-phase commit protocol and its multidatabase variants to serve as a detailed case study in our analysis. We also examine protocols designed to maintain consistency in multidatabases. <p> We analyze the standard two-phase commit (2PC) protocol used in traditional distributed database systems [BHG87] and a variation of this protocol, called emulated 2PC (E2PC) <ref> [SKS91, MR + 92] </ref>, explicitly designed to meet the needs of autonomy requirements in multidatabases. <p> In the rest of this section, we will discuss the autonomy ramifications of three schemes. * In the first two schemes, which we refer to as MSR-based E2PC, are based on a correctness criterion called M-serializability <ref> [MR + 92] </ref> rather than serializability. * The third scheme, which we refer to as abort-based E2PC protocol, achieves consistency of redo transactions by aborting all the (active) transactions that conflict with the aborted subtransactions and hence, the redo of the subtransaction observes the same database state as the one seen <p> We would like to note that for ease of discussion, throughout this section we assume that all transactions perform updates, that is, there are no read-only transactions. 7 4.2.1 MSR-based E2PC The MSR-based E2PC protocol is based on the notion of Multidatabase serializability (M-serializability) <ref> [MR + 92] </ref>.
Reference: [PV88] <author> Pons J. and J. Vilarem. </author> <title> Mixed Concurrency Control: Dealing with Heterogeneity in Distributed Database Systems. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Databases, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion <ref> [DE89, WV90, Pu88, PV88, GRS91] </ref>. This approach also includes proposals for commit protocols suitable for MDBSs [BST90, GRS91, SKS91]. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments.
Reference: [Pu88] <author> Pu C. </author> <title> Superdatabases for Composition of Heterogeneous Databases. </title> <booktitle> In Proceedings of the IEEE Fourth International Conference on Data Engineering 1988. </booktitle>
Reference-contexts: The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion <ref> [DE89, WV90, Pu88, PV88, GRS91] </ref>. This approach also includes proposals for commit protocols suitable for MDBSs [BST90, GRS91, SKS91]. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments.
Reference: [RP92] <author> Ramamritham K. and P. K. Chrysanthis. </author> <title> In Search of Acceptability Criteria: Database Consistency Requirements and Transaction Correctness Properties. In Distributed Object Management, </title> <editor> Ozsu, Dayal, and Valduriez Ed., </editor> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: We mentioned in the introduction the conflict between consistency requirements and autonomy. Before we deal with these conflicts in Section 4, it is important to note that three main approaches have emerged to address the issue of data consistency in MDBSs, each preserving different aspects of local autonomy <ref> [RP92] </ref>. The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion [DE89, WV90, Pu88, PV88, GRS91]. This approach also includes proposals for commit protocols suitable for MDBSs [BST90, GRS91, SKS91]. <p> The above specification of M-serializability reveals that a pair is an instance of two cooperative transactions which maintain some consistency properties and M-serializability is a form of Cooperative serializability (CoSR) <ref> [Ch91, RP92] </ref>.
Reference: [RSK91] <author> Rusinkiewicz M., A. Sheth, and G. Karabatis, </author> <title> Specification of Dependencies for the Management of Interdependent Data. </title> <journal> IEEE Computer, </journal> <volume> 12(12) </volume> <pages> 46-54, </pages> <month> December </month> <year> 1991. </year>
Reference: [SL90] <author> Sheth A. and J. Larson. </author> <title> Federated Database Systems for Managing Distributed, Heterogeneous, and Autonomous Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In this paper, we are focusing on what is usually termed execution autonomy <ref> [DE89, VE91, SL90, SKS91, BGS92] </ref> which refers to the ability of a local DBMS to execute operations and transaction management primitives submitted directly to it without any external interference.
Reference: [SKS91] <author> Soparkar N., H. Korth and A. Silberschatz. </author> <title> Failure-Resilient Transaction Management in Multidatabases. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: effect of database protocols on autonomy, and * identifying the tradeoffs between different types of autonomy. 1 This material is based upon work supported by the National Science Foundation under grants IRI-9109210 and IRI-9210588 and a grant from University of Pittsburgh. 1 Because of its extensive treatment in the literature <ref> [BST90, WV90, SKS91, MR + 92] </ref>, we have chosen the standard two-phase commit protocol and its multidatabase variants to serve as a detailed case study in our analysis. We also examine protocols designed to maintain consistency in multidatabases. <p> In this paper, we are focusing on what is usually termed execution autonomy <ref> [DE89, VE91, SL90, SKS91, BGS92] </ref> which refers to the ability of a local DBMS to execute operations and transaction management primitives submitted directly to it without any external interference. <p> The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion [DE89, WV90, Pu88, PV88, GRS91]. This approach also includes proposals for commit protocols suitable for MDBSs <ref> [BST90, GRS91, SKS91] </ref>. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments. In most cases, these correctness criteria are relaxations of seri-alizability, such as, quasi-serializability [DE89] and cooperative serializability [Ch91]. <p> We analyze the standard two-phase commit (2PC) protocol used in traditional distributed database systems [BHG87] and a variation of this protocol, called emulated 2PC (E2PC) <ref> [SKS91, MR + 92] </ref>, explicitly designed to meet the needs of autonomy requirements in multidatabases. <p> That is, it emulates an execution where the subtransaction is not aborted but instead the other transactions suffer an internal abort <ref> [SKS91] </ref>. We would like to note that for ease of discussion, throughout this section we assume that all transactions perform updates, that is, there are no read-only transactions. 7 4.2.1 MSR-based E2PC The MSR-based E2PC protocol is based on the notion of Multidatabase serializability (M-serializability) [MR + 92].
Reference: [WV90] <author> Wolski A. and J. Veijalainen. </author> <title> 2PC Agent Method: Achieving Serializability in Presence of Failures in a Heterogeneous Multidatabase. </title> <booktitle> In Proceedings of PARBASE-90 Conference, </booktitle> <month> February </month> <year> 1990. </year>
Reference-contexts: effect of database protocols on autonomy, and * identifying the tradeoffs between different types of autonomy. 1 This material is based upon work supported by the National Science Foundation under grants IRI-9109210 and IRI-9210588 and a grant from University of Pittsburgh. 1 Because of its extensive treatment in the literature <ref> [BST90, WV90, SKS91, MR + 92] </ref>, we have chosen the standard two-phase commit protocol and its multidatabase variants to serve as a detailed case study in our analysis. We also examine protocols designed to maintain consistency in multidatabases. <p> The first approach attempts to guarantee multidatabase global serializability since serializability is a widely used correctness criterion <ref> [DE89, WV90, Pu88, PV88, GRS91] </ref>. This approach also includes proposals for commit protocols suitable for MDBSs [BST90, GRS91, SKS91]. The second approach replaces serializability with other correctness criteria since serializability is considered very constraining when applied to multidatabase environments.
Reference: [VE91] <author> Veijalaine J. and F. Eliassen. </author> <title> The S-transaction Model. </title> <journal> Bulletin of the IEEE Technical Committee on Data Engineering, </journal> <volume> 14(1) </volume> <pages> 55-59, </pages> <month> March </month> <year> 1991. </year> <month> 13 </month>
Reference-contexts: In this paper, we are focusing on what is usually termed execution autonomy <ref> [DE89, VE91, SL90, SKS91, BGS92] </ref> which refers to the ability of a local DBMS to execute operations and transaction management primitives submitted directly to it without any external interference.
References-found: 18

