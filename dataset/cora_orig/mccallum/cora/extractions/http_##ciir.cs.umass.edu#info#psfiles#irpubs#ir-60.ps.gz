URL: http://ciir.cs.umass.edu/info/psfiles/irpubs/ir-60.ps.gz
Refering-URL: http://ciir.cs.umass.edu/info/psfiles/irpubs/irnew.html
Root-URL: 
Title: Performance Analysis of Distributed Information Retrieval Architectures  
Author: Brendon Cahoon Kathryn McKinley 
Date: June 7, 1995  
Address: Amherst, MA 01003, USA  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Large document collections are increasingly available over the network. In order for users to access these collections, information retrieval systems must provide coordinated, concurrent, and distributed access. Since even unified information retrieval (IR) systems place heavy demands on system resources, it is unclear how performance will be affected as user demand increases and the distributed IR systems grow in size. In this paper, we present the implementation of a simulator and a prototype system, and the design for experiments to study the performance of distributed IR systems. The prototype distributed information retrieval system is based on Inquery, an existing, unified IR system. We have implemented a flexible simulation model to serve as a platform for analyzing performance issues given a wide variety of system parameters and configurations. We validate the accuracy of our simulation model using the prototype. We present a series of experiments that are designed to measure system utilization and identify bottlenecks. We vary numerous system parameters, such as the number of users and text collections, number of terms per query, response time, and system load to generalize our results for other distributed IR systems. 
Abstract-found: 1
Intro-found: 1
Reference: [BMC88] <author> Jeffrey A. Brumfield, Janet Lynn Miller, and Hong-Tai Chou. </author> <title> Performance modelling of distributed object-oriented database systems. </title> <booktitle> In 1988 International Symposium On Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 22-32, </pages> <address> Austin, TX, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: Another advantage of our distributed system is that it is based upon proven, effective retrieval model rather than a new model developed to expose parallelism. Brumfield et al. also create a detailed simulation to measure the performance of different configurations and workloads <ref> [BMC88] </ref>. However, the application is a distributed object-oriented database system which is quite different than an IR system. The paper is relevant since it presents a model for using a simulation to examine the performance of a distributed system.
Reference: [Bur90] <author> Forbes J. Burkowski. </author> <title> Retrieval performance of a distributed text database utilizing a parallel process document server. </title> <booktitle> In 1990 International Symposium On Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 71-79, </pages> <address> Trinity College, Dublin, Ireland, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: Burkowski reports on a simulation study for a distributed text retrieval system which uses a local area network to connect a set of clients (i.e. users) to a set of servers (i.e. text collections) <ref> [Bur90] </ref>. The operations modeled in the system involve both query evaluation and text retrieval. The experiments performed explore two strategies for distributing the workload across the servers. The first equally distributes the text collection among all the servers.
Reference: [CCH92] <author> James P. Callan, W. Bruce Croft, and Stephan M. Harding. </author> <title> The INQUERY retrieval system. </title> <booktitle> In Proceedings of the 3rd International Conference on Database and Expert System Applications, </booktitle> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: We also briefly describe future experiments that we will base upon our initial results. Finally, in Section 5, we discuss related work. 2 A Distributed Information Retrieval System We have implemented a prototype distributed information retrieval system that is based on Inquery; an inference network, full-text information retrieval model <ref> [CCH92] </ref>. The system adopts a variation of the client-server paradigm consisting of a set of clients connected to a set of retrieval engines through a central administration process, as illustrated in Figure 1. The client is the user interface to the retrieval engine. <p> For example, the model generates new queries and retrieves different documents for each iteration. The following sections describe each of these operations in detail. 3.2.1 Query Evaluation In Inquery, a query consists of natural language words and structured query operators <ref> [CCH92] </ref>. Our simulator only models queries consisting of words and ignores structured query operators, such as #phrase or #sum. Either the simulator generates queries or the user supplies queries in a separate file. Instead of using words, we represent queries as a list of collection term frequencies.
Reference: [CCW95] <author> W. Bruce Croft, Robert Cook, and Dean Wilder. </author> <title> Providing government information on the Internet: Experiences with THOMAS. </title> <booktitle> In The Second International Conference on the Theory and Practice of Digital Libraries, </booktitle> <address> Austin, TX, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: of Terms TIPSTER 1 1198 510887 2.3 109571494 554658 50 27.1 CACM 2.1 3204 0.5 115967 2208 50 10.7 103rd CR 500 43378 11.7 48078407 714849 5141 2 Table 1: Collection and Query Set Statistics The legislative information collection contains the text of the Congressional Record for the 103rd Congress <ref> [CCW95] </ref>. The documents in the collection summarize of the day's events from Congress. The size of the documents range from 1K to 700K and the average document size is large.
Reference: [CEMW90] <author> Janey K. Cringean, Roger England, Gordon A. Mason, and Peter Willett. </author> <title> Parallel text searching in serial files using a processor farm. </title> <booktitle> In Proceedings of the 13th International Conference on Research and Development in Information Retrieval, </booktitle> <address> Brussels, Belgium, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: However, this decision is based on cost factors and the assumption that users are not primarily interested in speed. Cringean et al. report on the implementation of a retrieval system, based on signature files, built for a transputer based M40 Meiko Computing Surface <ref> [CEMW90] </ref>. This paper is an initial study and uses a small document collection and a small number of queries. Rather than studying a real distributed system, we have created a simulation to examine the performance of different system architectures. This 20 environment is more flexible for analyzing different systems.
Reference: [CLC95] <author> James P. Callan, Zhihong Lu, and W. Bruce Croft. </author> <title> Searching distributed collections with inference networks. </title> <booktitle> In Proceedings of the 18th International Conference on Research and Development in Inforamtion Retrieval, </booktitle> <address> Seattle, WA, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: The work on data partitioning only examines systems that distribute a single text 18 collection. Furthermore, no one has considered the tradeoff between performance and effectiveness when distributing a text collection. These issues have only been considered in isolation. Callen et al. <ref> [CLC95] </ref> and Viles and French [VF95] present recent studies on retrieval effectiveness for distributed collections. Tomasic and Garcia-Molina investigate the performance of various inverted file organizations in a distributed shared-nothing text retrieval system [Tom94, TGM93].
Reference: [Fox83] <author> E. A. Fox. </author> <title> Characterization of two new experimental collections in computer and information science containing textual and bibliographic concepts. </title> <type> Technical Report 83-561, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> September </month> <year> 1983. </year> <month> 21 </month>
Reference-contexts: Interestingly, people searching the database typically enter small queries, usually only 1 or 2 words and never more than 9 words. This contrasts with the other query sets that contain long queries. The CACM document collection consists of small abstracts from the Communications of the ACM <ref> [Fox83] </ref>. This collection is an older test collection consisting of a small number of homogeneous documents. The collection is only 2MB and the average size of the documents is small. The CACM collection also includes a set of 50 English text queries.
Reference: [Har92] <editor> D. Harman, editor. </editor> <booktitle> The First Text REtrieval Conference (TREC1). National Institute of Standards and Technology Special Publication 200-217, </booktitle> <address> Gaithersburg, MD, </address> <year> 1992. </year>
Reference-contexts: The text collections are * TIPSTER 1 * CACM * Legislative Information (103rd CR) Table 1 lists statistics about the text collections and query sets. TIPSTER 1 is a large heterogeneous collection of full-text articles and abstracts used in the TREC-1 evaluations <ref> [Har92] </ref>. The documents in the collection come from a variety of sources including newspapers, magazines, and government announcements. The average document size is not large but the sizes of the documents vary from 100 bytes to 1 MB.
Reference: [JO92] <author> Byeong-Soo Jeong and Edward Omiecinski. </author> <title> Inverted file partitioning schemes for a shared-everything multiprocessor. </title> <type> Technical Report GIT-CS-92/39, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: The paper does not discuss the effect of varying simulation parameters, such as terms per query and query term frequency, on performance. Jeong and Omiecinski study the performance of two different inverted file partitioning schemes in a shared-everything multiprocessor <ref> [JO92] </ref>. In the shared-everything model, memory and secondary storage is common to all processors. The first scheme partitions by term id while the second scheme partitions by document id. They use a simulation model to compare the performance of the two strategies.
Reference: [Jum93] <author> J. Robert Jump. </author> <title> YACSIM Reference Manual. </title> <institution> Rice University, </institution> <note> version 2.1.1 edition, </note> <year> 1993. </year>
Reference-contexts: The following sections describe the simulator toolkit used to implement the simulation model, the workload model, simulation parameters, and the simulation configuration procedure. 3.1 Simulation Library Toolkit Our simulator is built upon the YACSIM simulation library. YACSIM is a process-oriented discrete-event simulation language based on the C programming language <ref> [Jum93] </ref>. The process-oriented nature of the simulation language allows the structure of the simulator to closely reflect the actual system. YACSIM contains a set of data structures and library routines that manage user-created simulation objects.
Reference: [LZ93] <author> Z. Lin and S. Zhou. </author> <title> Parallelizing I/O intensive applications for a workstation cluster: a case study. </title> <journal> Computer Architecture News, </journal> <volume> 21(5) </volume> <pages> 15-22, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Another difference is that our system architecture includes a middle component between the clients and servers. Our experiments will identify the advantages and disadvantages of this architecture. The implementation and analysis of a distributed IR system is studied by Lin and Zhou <ref> [LZ93] </ref>. They implement the retrieval system on a network of DEC5000 workstations. The PVM (Parallel Virtual Machine) software manages the distributed system by coordinating work and communication over the network.
Reference: [MMNP87] <author> Ian A. Macleod, T. Patrick Martin, Brent Nordin, and John R. Phillips. </author> <title> Strategies for building distributed information retrieval systems. </title> <booktitle> Information Processing & Management, </booktitle> <volume> 23(6) </volume> <pages> 511-528, </pages> <year> 1987. </year>
Reference-contexts: That is, the experiments ignore the effects of document retrieval operations and user think time. Macleod et al. present an implementation of a prototype distributed IR system based upon Fulcrum FUL/Text, an existing unified system that uses inverted files <ref> [MMNP87] </ref>. They describe and test four data distribution strategies that partition and replicate data. They implement a distributed simulation that is physically distributed across a network to test the performance of the data distribution strategies. The hardware includes five personal computers connected by IBM's PC Network. <p> Martin et al. [MMR + 90], and Martin and Russell [MR91] investigate several strategies for caching data in a distributed IR system. These studies are a continuation of the work performed by Maclead et 19 al. <ref> [MMNP87] </ref>. Again, they use a simulation model of an existing system, called Ful/Text, to evaluate the caching strategies. The system architecture consists of a single server, which maintains the text collection, and several clients which access the text collection over 9600 baud communication lines.
Reference: [MMR + 90] <author> T. Patrick Martin, Ian A. Macleod, Jody I. Russell, Ken Lesse, and Brett Foster. </author> <title> A case study of caching strategies for a distributed full text retrieval system. </title> <booktitle> Information Processing & Management, </booktitle> <volume> 26(2) </volume> <pages> 227-247, </pages> <year> 1990. </year>
Reference-contexts: Furthermore, certain caching schemes (e.g. caching data at the client) would require a different retrieval engine. Our work focuses on using a existing and proven retrieval system. The Inquery retrieval engine actually performs a small amount of caching to improve the speed of query evaluation. Martin et al. <ref> [MMR + 90] </ref>, and Martin and Russell [MR91] investigate several strategies for caching data in a distributed IR system. These studies are a continuation of the work performed by Maclead et 19 al. [MMNP87].
Reference: [MR91] <author> T. Patrick Martin and Jody I. Russell. </author> <title> Data caching strategies for distributed full text retrieval systems. </title> <journal> Information Systems, </journal> <volume> 16(1) </volume> <pages> 1-11, </pages> <year> 1991. </year>
Reference-contexts: Our work focuses on using a existing and proven retrieval system. The Inquery retrieval engine actually performs a small amount of caching to improve the speed of query evaluation. Martin et al. [MMR + 90], and Martin and Russell <ref> [MR91] </ref> investigate several strategies for caching data in a distributed IR system. These studies are a continuation of the work performed by Maclead et 19 al. [MMNP87]. Again, they use a simulation model of an existing system, called Ful/Text, to evaluate the caching strategies.
Reference: [PW87] <author> Cristine A. Pogue and Peter Willett. </author> <title> Use of text signatures for document retrieval in a highly parallel environment. </title> <journal> Parallel Computing, </journal> <volume> 4 </volume> <pages> 259-268, </pages> <year> 1987. </year>
Reference-contexts: Also, we use a simulation to perform our experiments. In the future, we will investigate distributed IR systems based on the shared-everything model. Pogue and Willett use the ICL Distributed Array Processor to implement an IR system based on signature files <ref> [PW87] </ref>. They designed this system as a batch system although they suggest how an interactive system may be constructed. Stanfill and Kahle use the CM-2 system to implement and IR system which uses signature files [SK86].
Reference: [SA87] <author> Patricia Simpson and Rafael Alonso. </author> <title> Data caching in information retrieval systems. </title> <booktitle> In Proceedings of the Tenth Annual International ACMSIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 296-305, </pages> <address> New Orleans, LA, </address> <year> 1987. </year>
Reference-contexts: These studies do not discuss more complex system architectures using multiple servers. Furthermore, the communication lines in the network are limited to 9600 baud lines. Simpson and Alonso investigate the effect of adding caching to personal computers that access a single information retrieval system over a network <ref> [SA87] </ref>. For example, a sophisticated caching scheme retains any data that is necessary to reevaluate a query on the PC after it is downloaded from the central retrieval system. They create a detailed simulation to study the performance of different caching strategies.
Reference: [SB88] <author> Gerard Salton and Chris Buckley. </author> <title> Parallel text search methods. </title> <journal> Communications of the ACM, </journal> <volume> 32(2) </volume> <pages> 202-215, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Later Stanfill et al. propose an IR system on the CM-2 based on inverted files rather than signature files [STW89]. They conclude that cost-effective interactive access to 100-1000 GB collections is possible. Salton and Buckley implement the Smart retrieval system, a vector processing model, on a Connection Machine <ref> [SB88] </ref>. They suggest that parallel methods do not provide large enough gains in effectiveness or efficiently. However, this decision is based on cost factors and the assumption that users are not primarily interested in speed.
Reference: [SK86] <author> Craig Stanfill and Brewster Kahle. </author> <title> Parallel free-text search on the connection machine system. </title> <journal> Communications of the ACM, </journal> <volume> 29(12) </volume> <pages> 1229-1239, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: They designed this system as a batch system although they suggest how an interactive system may be constructed. Stanfill and Kahle use the CM-2 system to implement and IR system which uses signature files <ref> [SK86] </ref>. They report on a batch system and an interactive system which exploits the CM-2 hardware. Later Stanfill et al. propose an IR system on the CM-2 based on inverted files rather than signature files [STW89]. They conclude that cost-effective interactive access to 100-1000 GB collections is possible.
Reference: [STW89] <author> Craig Stanfill, Robert Thau, and David Waltz. </author> <title> A parallel indexed algorithm for information retrieval. </title> <booktitle> In Proceedings of the Twelfth Annual International Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 88-97, </pages> <address> Cambridge, MA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: They report on a batch system and an interactive system which exploits the CM-2 hardware. Later Stanfill et al. propose an IR system on the CM-2 based on inverted files rather than signature files <ref> [STW89] </ref>. They conclude that cost-effective interactive access to 100-1000 GB collections is possible. Salton and Buckley implement the Smart retrieval system, a vector processing model, on a Connection Machine [SB88]. They suggest that parallel methods do not provide large enough gains in effectiveness or efficiently.
Reference: [TGM92] <author> Anthony Tomasic and Hector Garcia-Molina. </author> <title> Caching and database scaling in distributed shared-nothing information retrieval systems. </title> <type> Technical Report STAN-CS-92-1456, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Also, their study only examines caching on a system connected by very slow communication lines. Continuing the work performed in a previous study [TGM93], Tomasic and Garcia-Molina also perform experiments on caching <ref> [TGM92] </ref>. The main difference between this paper and their previous work is that they use real traces from FOLIO, an existing IR system that provides access to an abstracts database. As well as studying caching, they also report on data partitioning strategies and database scaling.
Reference: [TGM93] <author> Antony Tomasic and Hector Garcia-Molina. </author> <title> Performance of inverted indices in shared-nothing distributed text document information retrieval systems. </title> <booktitle> In Proceedings of the Second International Conference on Parallel and Distributed Information System, </booktitle> <address> San Diego, CA, </address> <year> 1993. </year>
Reference-contexts: These issues have only been considered in isolation. Callen et al. [CLC95] and Viles and French [VF95] present recent studies on retrieval effectiveness for distributed collections. Tomasic and Garcia-Molina investigate the performance of various inverted file organizations in a distributed shared-nothing text retrieval system <ref> [Tom94, TGM93] </ref>. A shared-nothing model is a system in which each processor has its own memory and secondary storage. Three index organizations are studied. The system organization evenly spreads the inverted file across all disks in the system. <p> They present a general model of an information retrieval system but do not discuss the details (e.g., the retrieval model). Also, their study only examines caching on a system connected by very slow communication lines. Continuing the work performed in a previous study <ref> [TGM93] </ref>, Tomasic and Garcia-Molina also perform experiments on caching [TGM92]. The main difference between this paper and their previous work is that they use real traces from FOLIO, an existing IR system that provides access to an abstracts database.
Reference: [Tom94] <author> Anthony Tomasic. </author> <title> Distributed Queries and Incremental Updates In Information Retrieval Systems. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: These issues have only been considered in isolation. Callen et al. [CLC95] and Viles and French [VF95] present recent studies on retrieval effectiveness for distributed collections. Tomasic and Garcia-Molina investigate the performance of various inverted file organizations in a distributed shared-nothing text retrieval system <ref> [Tom94, TGM93] </ref>. A shared-nothing model is a system in which each processor has its own memory and secondary storage. Three index organizations are studied. The system organization evenly spreads the inverted file across all disks in the system.
Reference: [VF95] <author> Charles L. Viles and James C. </author> <title> French. Dissemination of collection wide information in a distributed information retrieval system. </title> <booktitle> In Proceedings of the 18th International Conference on Research and Development in Inforamtion Retrieval, </booktitle> <address> Seattle, WA, </address> <year> 1995. </year> <month> 22 </month>
Reference-contexts: The work on data partitioning only examines systems that distribute a single text 18 collection. Furthermore, no one has considered the tradeoff between performance and effectiveness when distributing a text collection. These issues have only been considered in isolation. Callen et al. [CLC95] and Viles and French <ref> [VF95] </ref> present recent studies on retrieval effectiveness for distributed collections. Tomasic and Garcia-Molina investigate the performance of various inverted file organizations in a distributed shared-nothing text retrieval system [Tom94, TGM93]. A shared-nothing model is a system in which each processor has its own memory and secondary storage.
Reference: [Wol92] <author> Dietmar Wolfram. </author> <title> Applying informetric characteristics of databases to IR system file design, part i: Informetric models. </title> <booktitle> Information Processing & Management, </booktitle> <volume> 28(1) </volume> <pages> 121-133, </pages> <year> 1992. </year>
Reference-contexts: In contrast, the distribution of term frequencies in queries is more difficult to characterize and researchers do not agree on a commonly accepted distribution <ref> [Wol92] </ref>. Figure 6 shows the query term frequency distributions for our query sets. The shapes of the distributions for the three query sets are very similar. The difference between the three distributions is due to the size of the text collections.
Reference: [Zip49] <author> G.K. Zipf. </author> <title> Human Behavior and the Principle of Least Effort. </title> <publisher> Addison-Wesley Press, </publisher> <year> 1949. </year> <month> 23 </month>
Reference-contexts: We will experiment with returning the top 1000 and top 100 documents. 14 Query Term Frequency Distribution Zipf documented the widely accepted distribution of term frequencies in text collections based upon empirical measurements <ref> [Zip49] </ref>. In contrast, the distribution of term frequencies in queries is more difficult to characterize and researchers do not agree on a commonly accepted distribution [Wol92]. Figure 6 shows the query term frequency distributions for our query sets.
References-found: 25

