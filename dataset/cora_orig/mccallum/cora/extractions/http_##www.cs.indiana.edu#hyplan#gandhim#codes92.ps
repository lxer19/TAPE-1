URL: http://www.cs.indiana.edu/hyplan/gandhim/codes92.ps
Refering-URL: http://www.cs.indiana.edu/hyplan/gandhim.html
Root-URL: http://www.cs.indiana.edu
Title: SBDM as a Model for Codesign Data  
Author: Munish Gandhi Edward L. Robertson 
Address: Bloomington, IN 47405-4101  
Affiliation: Computer Science Department, Indiana University,  
Abstract: The Specification-based Data Model (SBDM) is a unifying framework to model configurations of systems which contain components from differing engineering disciplines. SBDM views the hierarchy of components as layers of alternating specification and implementation. This allows the system to be designed without presupposing a specific type of implementation for its components. The design phase is followed by a configuration phase where a choice mechanism picks those implementations which are most suitable for assembling the system. Finally, a manifestation phase materializes the chosen implementations for each component in the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Ahmed and S. B. Navathe. </author> <title> Version Management of Composite Objects in CAD Databases. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 218-227, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Finally, section 3.3 demonstrates the applicability of SBDM as an organizing tool for codesign components. 3.1 Hardware Design We model a CAD application using a toy example similar to that used in <ref> [1] </ref>. Consider the design of an adder which outputs the sum of two 2-bit numbers.
Reference: [2] <author> D. Batory and W. Kim. </author> <title> Modeling concepts for VLSI CAD objects. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(3) </volume> <pages> 322-346, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: A configuration simply selects desired implementations from the required functionalities. This mechanism allows for concurrent development of alternative implementations, and thus a choice between hardware/software need be made only at configuration time. Furthermore, we do not make any real distinction between static and dynamic configurations <ref> [2, 7] </ref>. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies [2, 9]. <p> Furthermore, we do not make any real distinction between static and dynamic configurations [2, 7]. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies <ref> [2, 9] </ref>. This paper's presentation of the SBDM model has concentrated on conceptual aspects, but effective use of such a model requires a perspicuous user interface and implementation.
Reference: [3] <author> G. Booch. </author> <title> Object Oriented Design with Applications. </title> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1991. </year>
Reference-contexts: These may be completed any time after the specifications for the adder slices have been finalized. 3.2 Software Design In this subsection, we suggest how SBDM could be used to model data in object oriented software systems. We use principles represented in the design approaches of Booch <ref> [3] </ref> and Meyer [10]. A specification for a family of objects in SBDM is very close to the notion of a class interface in object-oriented systems. It defines the communication protocol used to interact with the objects, the behavior expected of the objects, and other important information regarding the objects.
Reference: [4] <author> P. P. Chen. </author> <title> The Entity-Relationship Model Toward a unified view of data. </title> <journal> ACM Transactions in Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: Communication A carefully expressed data model is a concise way to communicate the "architecture" of the data. And because a data model is only conceptual, the communication does not get clouded with implementation details. A data modeling approach is a formalism to specify data models. The Entity-Relationship (ER) <ref> [4] </ref> approach is a popular data modeling formalism. An ER model classifies the real world into entities and relationships between entities. Both entities and relationships may have attributes. As an example (Figure 1), consider the ER schema to model project assignments in a company.
Reference: [5] <author> H. T. Chou and W. Kim. </author> <title> A Unifying Framework for Version Control in a CAD Environment. </title> <booktitle> In Proceedings of the 12th VLDB conference, </booktitle> <address> Kyoto, Japan, </address> <pages> pages 336-346, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: The same holds true for the ImpC G y x . Of course, it may not be necessary to explicitly create ConfCs and link them to get the desired configuration. A method of defaults may derive the configuration hierarchy automatically. The idea here subsumes that used in <ref> [5] </ref>. For each specification one may designate a distinguished object from its design set as current. To configure an object, we recursively construct it using the current versions of each functionality linked by the needs link. An atomic ImpC is configured using the ImpC itself.
Reference: [6] <author> K. R. Dittrich, W. Gotthard, and P. C. Lockemann. </author> <title> DAMOKLES A Database Systems for Software Engineering Environments. </title> <booktitle> In Proceedings of an International Workshop on Advanced Programming Environments, Trondheim, Norway, </booktitle> <pages> pages 353-371, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Rather, it fl Partially supported by the Indiana Business Modernization and Technology Corporation. y gandhim@cs.indiana.edu z edrbtsn@cs.indiana.edu 1 produced a generic model which excluded implementation issues [13]. Another work which has objectives similar to ours is the data model (DODM) in the DAMOKLES project <ref> [6] </ref>. The presented model considers the specification for each component of a product as being closely linked to its implementation. The need for such an integration has been felt before.
Reference: [7] <author> R. H. Katz. </author> <title> Information Management for Engineering Design. </title> <publisher> Springer-Verlag Computer Science Survey Series, </publisher> <address> Heidelberg, Germany, </address> <year> 1985. </year>
Reference-contexts: A configuration simply selects desired implementations from the required functionalities. This mechanism allows for concurrent development of alternative implementations, and thus a choice between hardware/software need be made only at configuration time. Furthermore, we do not make any real distinction between static and dynamic configurations <ref> [2, 7] </ref>. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies [2, 9].
Reference: [8] <author> R. H. Katz. </author> <title> Toward a Unified Framework for Version Modeling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: An atomic ImpC is configured using the ImpC itself. Obviously, configurations resulting from this method depend on the designations of current versions at configuration time 3 . 2.5 Manifestation Component <ref> [8] </ref> refers to the need for distinguishing an instance hierarchy and a definition hierarchy. The Manifestation Component (ManC) entity in SBDM together with the contains relationship enables us to explicitly create an instance hierarchy.
Reference: [9] <author> D. McLeod, K. Narayanaswamy, and K. BapaRao. </author> <title> An approach to information management for CAD/VLST applications. </title> <booktitle> In Proceedings of the SIGMOD conference on Databases for Engineering Applications, </booktitle> <address> San Jose, California, </address> <pages> pages 39-50, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Furthermore, we do not make any real distinction between static and dynamic configurations [2, 7]. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies <ref> [2, 9] </ref>. This paper's presentation of the SBDM model has concentrated on conceptual aspects, but effective use of such a model requires a perspicuous user interface and implementation.
Reference: [10] <author> B. Meyer. </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall International (UK) Ltd., </publisher> <address> Hertfordshire, HP2 4RG, </address> <year> 1988. </year>
Reference-contexts: We use principles represented in the design approaches of Booch [3] and Meyer <ref> [10] </ref>. A specification for a family of objects in SBDM is very close to the notion of a class interface in object-oriented systems. It defines the communication protocol used to interact with the objects, the behavior expected of the objects, and other important information regarding the objects.
Reference: [11] <author> K. D. Mueller-Glaser, J. Bortolazzi, and Y. Tanhuran. </author> <title> Towards a Requirements Definition, Specification, and System Design Environment. </title> <note> In EURO-DAC Proceedings (to appear), </note> <year> 1992. </year>
Reference-contexts: In other words, as software evolves both specifications and implementations undergo change. In fact, systems that integrate specifications in the design process are being developed currently. For example, the DEBYS (DEsign BY Specification) project intends to develop an integrated design and test environment for the design of electronic systems <ref> [11] </ref>. Our effort has been guided by a few general objectives. We explicate these as the following principles: P1 The model should be general and flexible. P2 Both the modeling notation and the model itself should be minimal. P3 The model should represent designed objects.
Reference: [12] <author> M. H. Penedo and E. D. Stuckle. </author> <title> Integrated Project Master Database IR&D Final Report. </title> <type> Technical Report TRW-84-SS-22, </type> <institution> TRW, </institution> <month> December </month> <year> 1984. </year>
Reference-contexts: We present a minimal model that unifies mechanisms for system design, system configuration and system instantiation. We regard the model as an "engineering asset" which may be appropriately extended for purposes of a specific design environment. For example, the PMDB Project <ref> [12] </ref> has modeled the data relating to software development life cycle process used at TRW. Though the scope of the PMDB Project was much larger, it too attempted to develop a model that was not tied to specific methodologies and techniques.
Reference: [13] <author> M. H. Penedo and E. D. Stuckle. </author> <title> TRW's SEE Saga. </title> <booktitle> In Software Engineering Environments International Workshop on Environments, Chi-non, France, </booktitle> <pages> pages 25-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Rather, it fl Partially supported by the Indiana Business Modernization and Technology Corporation. y gandhim@cs.indiana.edu z edrbtsn@cs.indiana.edu 1 produced a generic model which excluded implementation issues <ref> [13] </ref>. Another work which has objectives similar to ours is the data model (DODM) in the DAMOKLES project [6]. The presented model considers the specification for each component of a product as being closely linked to its implementation. The need for such an integration has been felt before.
Reference: [14] <author> W. Swartout and R. Balzer. </author> <title> On the inevitable intertwining of specification and implementation. </title> <journal> Communications of the ACM, </journal> <volume> 25(7) </volume> <pages> 438-440, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: The presented model considers the specification for each component of a product as being closely linked to its implementation. The need for such an integration has been felt before. Swartout and Balzer <ref> [14] </ref> argue that even though software process models view specification and implementation as successive steps, in reality they influence one another. In other words, as software evolves both specifications and implementations undergo change. In fact, systems that integrate specifications in the design process are being developed currently.
References-found: 14

