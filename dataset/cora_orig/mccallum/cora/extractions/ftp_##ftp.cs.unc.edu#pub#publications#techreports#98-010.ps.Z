URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/98-010.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Email: stuerzl@cs.unc.edu  
Title: 1 Imaging all Visible Surfaces Or How many Reference Images are needed for Image Based Modeling?  
Author: Wolfgang Strzlinger 
Address: Chapel Hill  
Affiliation: Dept. of Computer Science, University of North Carolina at  
Abstract: Today many systems exist to generate geometric models of existing scenes and objects. However, no accurate data about surface appearance such as colors and textures is stored in this process. Such data can be captured as a series of images that, collectively, capture all surfaces of the object. This work introduces a method to compute a minimal set of camera positions for this purpose. Taking images from the computed positions can then be used to derive a complete set of surface appearance data. A slightly different application of the presented method is the computation of a minimal set of viewpoints for reference images to be used in image-based rendering methods. First a method to determine an optimal set of viewpoint regions for a given scene is introduced. It uses a hierarchical visibility method to preprocess the scene. Then a technique to find an optimal set of viewpoint regions is presented and the solution is used to derive an optimal set of viewpoints. Results and visualizations of the computed solutions are presented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bekaert P., de Laet F. S., Dutre, P., RenderPark: </author> <title> A Photorealistic Rendering Tool, </title> <note> http://www.cs.kuleuven.ac.be/cwis/research/graphics/RENDERPARK, 1997. </note>
Reference-contexts: Shaft culling [9] is used to speed the refinement process. Note that shaft culling can be optimized in the recursive refinement by temporarily storing the current list of potential occluders during recursive subdivision and using this list during further refinement of the link <ref> [1] </ref>, [6]. For each link created the list of potential occluders is stored for later use. Figure 4 shows pseudo-code. <p> If there is one occluder that occludes the whole shaft, the nodes are mutually invisible and subdivision stops. This test is a simple addition to the shaft-culling test <ref> [1] </ref>. Often there is no single polygon that blocks the shaft completely. This causes unnecessary subdivision and potentially false results - some areas are falsely classified as partially visible. To evaluate the visibility for each shaft exactly, a different method such as the visibility skeleton [14] has to be used. <p> Therefore, the generalization to three-dimensional viewing regions is considered to be relatively straightforward. The hierarchical visibility preprocessing was implemented by modifying a public domain radiosity package <ref> [1] </ref>. Ray tracing is used if there is more than one potential occluder between a viewing region (or - 6 - viewpoint) and an element. If all random rays are occluded our implementation (falsely) concludes that the shaft is occluded.
Reference: [2] <author> Cazals, F., G. Drettakis, C. Puech, </author> <title> Filtering, Clustering and Hierarchy Construction: a New Solution for Ray-Tracing Complex Scenes, </title> <booktitle> Proceedings of EUROGRAPHICS 95, </booktitle> <pages> pp. 371-382, </pages> <year> 1995. </year>
Reference-contexts: The interior nodes of this hierarchy are bounding volumes (also known as clusters) and the leaves are surfaces that are subdivided further into elements on demand. The hierarchy can be constructed during modeling or automatically by clustering nearby surfaces together (e.g. <ref> [2] </ref>). A hierarchical visibility method subdivides this scene hierarchy depending on the relative visibility of objects. The hierarchical visibility algorithm used in this method starts with two nodes. One is the top level bounding box enclosing the whole scene. The other is the global viewing region.
Reference: [3] <author> Chen, S. E., L. Williams, </author> <title> View Interpolation for Image Synthesis, </title> <booktitle> Proceedings of SIGGRAPH 93, </booktitle> <pages> pp. 270-288, </pages> <year> 1993. </year>
Reference-contexts: One possibility is to warp each pixel of the reference images into the destination view. For more detailed explanations of image warping see <ref> [3] </ref>, [12].
Reference: [4] <author> Chen, S. E., </author> <title> QuickTime VR- An Image-Based Approach to Virtual Environment Navigation, </title> <booktitle> Proceedings of SIGGRAPH 95, </booktitle> <pages> pp. 29-38, </pages> <year> 1995 </year>
Reference-contexts: Taking photographs from all the computed viewpoints will guarantee that every part of every surface is visible in at least one image. Furthermore, the method assumes that potentially a spherical image can be obtained from every viewpoint. Compositing multiple images to a spherical image <ref> [4] </ref> can be used to generate such images. Note that this work addresses the visibility issues of the problem only.
Reference: [5] <author> Debevec, P. E., C. J. Taylor, J. Malik, </author> <title> Modeling and Rendering Architecture from Photographs: A Hybrid Geometry and Image-Based Approach, </title> <booktitle> Proceedings of SIGGRAPH 96, </booktitle> <pages> pp. 11-21, </pages> <year> 1996. </year>
Reference-contexts: Therefore, a visualization of the object will only show the geometric structure but will not match the appearance of surfaces. For objects with known geometry but unknown surface appearance, methods to derive textures from prerecorded images (see e.g. <ref> [5] </ref>) can be used. This is the case when visualizing existing structures from unreachable viewpoints, visualizing modifications to a real scene, or generating realistic textures for virtual training systems. <p> For objects with unknown geometry it is possible to reconstruct the geometry from prerecorded images with image-based modeling methods. One successful approach <ref> [5] </ref> helps the user to construct an approximate geometric model. It is hard to judge for a human if a set of prerecorded images is complete in the sense that every part of every surface and object is visible in at least one of the images.
Reference: [6] <author> Drettakis, G., F. X. Sillion, </author> <title> Interactive Update Of Global Illumination Using A LineSpace Hierarchy, </title> <booktitle> Proceedings of SIGGRAPH 97, </booktitle> <pages> pp. 57-64, </pages> <year> 1997. </year>
Reference-contexts: A similar idea was introduced previously in the context of hierarchical radiosity [10]. Most recently, Drettakis and Sillion <ref> [6] </ref> exploited a similar method (termed linespace hierarchy) to store visibility information in a scene. In the hierarchical radiosity literature the (smaller) parts of a subdivided surface are called elements, and this convention is used here, too. 2. <p> Shaft culling [9] is used to speed the refinement process. Note that shaft culling can be optimized in the recursive refinement by temporarily storing the current list of potential occluders during recursive subdivision and using this list during further refinement of the link [1], <ref> [6] </ref>. For each link created the list of potential occluders is stored for later use. Figure 4 shows pseudo-code.
Reference: [7] <author> Glover, F., </author> <title> Tabu Search - part I, </title> <journal> ORSA Journal on Computing 1(3), </journal> <pages> pp. 190-206, </pages> <year> 1989. </year>
Reference-contexts: It might well be that a significant speedup is possible if the parameters of the global optimization algorithm are tuned appropriately. Another option is to experiment with alternative search algorithms for the combinatorial optimization problem (e.g. Tabu search <ref> [7] </ref>, [8]). The sampling issues and other issues related to real images and photographs (image resolution, field of view, depth of field, highlights, and reflections) need to be handled before the results can be applied (and experimentally verified) in a real system.
Reference: [8] <author> Glover, F., </author> <title> Tabu Search - part II, </title> <journal> ORSA Journal on Computing 2(1), </journal> <pages> pp. 4-32, </pages> <year> 1990. </year>
Reference-contexts: It might well be that a significant speedup is possible if the parameters of the global optimization algorithm are tuned appropriately. Another option is to experiment with alternative search algorithms for the combinatorial optimization problem (e.g. Tabu search [7], <ref> [8] </ref>). The sampling issues and other issues related to real images and photographs (image resolution, field of view, depth of field, highlights, and reflections) need to be handled before the results can be applied (and experimentally verified) in a real system.
Reference: [9] <author> Haines, E. A., </author> <title> Shaft Culling for Efficient Ray-Traced Radiosity, </title> <editor> In Brunet and Jansen, editors, </editor> <booktitle> Photorealistic Rendering in Computer Graphics, </booktitle> <publisher> Springer Verlag, </publisher> <pages> pp. 122-138, </pages> <year> 1993. </year>
Reference-contexts: Otherwise the larger node is subdivided and the process is applied recursively. Shaft culling <ref> [9] </ref> is used to speed the refinement process. Note that shaft culling can be optimized in the recursive refinement by temporarily storing the current list of potential occluders during recursive subdivision and using this list during further refinement of the link [1], [6].
Reference: [10] <author> Hanrahan, P., D. Saltzman, L. Aupperle, </author> <title> A Rapid Hierarchical Radiosity Algorithm, </title> <booktitle> Proceedings of SIGGRAPH 91, </booktitle> <pages> pp. 197-206, </pages> <year> 1991. </year>
Reference-contexts: A similar idea was introduced previously in the context of hierarchical radiosity <ref> [10] </ref>. Most recently, Drettakis and Sillion [6] exploited a similar method (termed linespace hierarchy) to store visibility information in a scene. In the hierarchical radiosity literature the (smaller) parts of a subdivided surface are called elements, and this convention is used here, too. 2.
Reference: [11] <author> Ingber, L., </author> <title> Adaptive Simulated Annealing (ASA), </title> <note> http://www.ingber.com/#ASA-CODE and http://www.ingber.com/asa_papers, 1989. - 11 </note> - 
Reference-contexts: While it cannot be guaranteed that simulated annealing will find the global optimum it consistently finds at least values very close to the optimum in reasonable time (see e.g. <ref> [11] </ref>). The interested reader is referred to the literature for further details (see e.g. [11], [13]). One consequence of using simulated annealing is that our implementation cannot guarantee that it finds the globally optimal solution. In other words the set of viewing regions and/or viewpoints might be larger than necessary. <p> While it cannot be guaranteed that simulated annealing will find the global optimum it consistently finds at least values very close to the optimum in reasonable time (see e.g. <ref> [11] </ref>). The interested reader is referred to the literature for further details (see e.g. [11], [13]). One consequence of using simulated annealing is that our implementation cannot guarantee that it finds the globally optimal solution. In other words the set of viewing regions and/or viewpoints might be larger than necessary. <p> The last entry in Table 1 emphasizes that the optimization times grow more than linearly with the number of viewing regions due to the exponential growth in possible combinations. This is also known as the curse of dimensionality in the optimization literature (e.g. <ref> [11] </ref>).
Reference: [12] <author> McMillan, L., G. Bishop, </author> <title> Plenoptic Modeling: An Image-Based Rendering System, </title> <booktitle> Proceedings of SIGGRAPH 95, </booktitle> <pages> pp. 39-46, </pages> <year> 1995. </year>
Reference-contexts: One possibility is to warp each pixel of the reference images into the destination view. For more detailed explanations of image warping see [3], <ref> [12] </ref>.
Reference: [13] <author> Press, W. H., B. P. Flannery, S. A. Teukolsky, W. T. Vetterling, </author> <title> Numerical Recipes in C, </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: While it cannot be guaranteed that simulated annealing will find the global optimum it consistently finds at least values very close to the optimum in reasonable time (see e.g. [11]). The interested reader is referred to the literature for further details (see e.g. [11], <ref> [13] </ref>). One consequence of using simulated annealing is that our implementation cannot guarantee that it finds the globally optimal solution. In other words the set of viewing regions and/or viewpoints might be larger than necessary.
Reference: [14] <author> Durand, F., G. Drettakis, C. Puech, </author> <title> The Visibility Skeleton: A Powerful And Efficient MultiPurpose Global Visibility Tool, </title> <booktitle> Proceedings of SIGGRAPH 97, </booktitle> <pages> pp. 89-100, </pages> <year> 1997. </year>
Reference-contexts: Often there is no single polygon that blocks the shaft completely. This causes unnecessary subdivision and potentially false results - some areas are falsely classified as partially visible. To evaluate the visibility for each shaft exactly, a different method such as the visibility skeleton <ref> [14] </ref> has to be used. A different description of the above algorithm is to imagine a hierarchical radiosity algorithm that ignores all energy values when refining links and refines only based on visibility. The presented algorithm is then equivalent to refining one shooting interaction of a hierarchical radiosity system. <p> If all random rays are occluded our implementation (falsely) concludes that the shaft is occluded. We considered replacing this part with an implementation of an exact visibility method (e.g. <ref> [14] </ref>), but the additional implementation effort is substantial. For efficiency the table encoding the mutual visibility of the viewing regions and elements was realized as an array of bitvectors. All needed operations can then be expressed as efficient Boolean operations. <p> In our experiments we observed that the computed number of viewpoints is equal to the number of viewing regions, therefore we conclude that our implementation indeed computes an optimal set of viewpoints under the given limitation. If the visibility were evaluated exactly (e.g. with <ref> [14] </ref>) the method would indeed produce optimal results. The results are not directly applicable to real applications such as photographing and generating textures for scenes with known geometry as the computed solution relies on the ability to generate (potentially) a spherical image with high enough resolution at each viewpoint.
References-found: 14

