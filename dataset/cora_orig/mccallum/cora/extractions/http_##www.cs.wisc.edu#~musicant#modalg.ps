URL: http://www.cs.wisc.edu/~musicant/modalg.ps
Refering-URL: http://www.cs.wisc.edu/~musicant/
Root-URL: 
Title: Modification Algorithms for Rollback Databases: An Implementation and Evaluation  
Author: Dave Musicant and Mihaela Patricia Dabu 
Date: May 13, 1998  
Affiliation: Computer Sciences Department University of Wisconsin|Madison  
Abstract: Our previous theoretical work on rollback databases is followed by implementing our algorithms in Oracle using the PL/SQL language. Changes to some of our algorithms have been developed, partially due to constraints imposed by Oracle. We discuss empirical results, as well as insights and frustrations gleaned from working with an actual RDBMS.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bobrowski, S., Chin-Lee, C., Closkey, C., Frazzini, J., and Sokolsky, D. </author> <title> Oracle7 Server Concepts. Oracle Corporation: </title> <address> Redwood Shores, CA, </address> <year> 1996. </year>
Reference-contexts: A programmer writing in C++ could use OCI to pass data in and out of Oracle, and also to direct Oracle to evaluate SQL queries <ref> [1] </ref>. OCI is a common tool used in industry for performing tasks which are more complicated than Oracle can do natively. Data can be retrieved from Oracle via an SQL query, and entered into a data structure in a C++ environment.
Reference: [2] <author> Boeheim, C., Duarte, T., and Johnson, M. </author> <title> ORACLE for UNIX Performance Tuning Tips. Oracle Corporation: </title> <address> Redwood Shores, CA, </address> <year> 1994. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [3] <author> Durbin, J. </author> <title> Oracle 7 Server Utilities. Oracle Corporation: </title> <address> Redwood Shores, CA, </address> <year> 1996. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [4] <author> Frazzini, J. </author> <title> Oracle7 Server Tuning. Oracle Corporation: </title> <address> Redwood Shores, CA, </address> <year> 1996. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [5] <author> Jensen, C.S., Mark, L., Roussopoulos, and Sellis, T. </author> <title> Using differential techniques to efficiently support transaction time. </title> <journal> VLDB Journal, </journal> <volume> 2(1) </volume> <pages> 75-111, </pages> <year> 1993. </year>
Reference-contexts: Data warehousing environments often update data on a regular basis, but users performing complex analytical tasks often need to work with data as it existed at some point in the past. We discuss herein our implementation of rollback algorithms, described in <ref> [5, 8] </ref>. Methods for dealing with rollback databases have been extensively dealt with in the literature [5, 8, 11]. In particular, the DM/T-IM/T system proposed in [5] comes closest to satisfying the needs for our problem. We discussed the theory in detail in [8]. <p> We discuss herein our implementation of rollback algorithms, described in [5, 8]. Methods for dealing with rollback databases have been extensively dealt with in the literature <ref> [5, 8, 11] </ref>. In particular, the DM/T-IM/T system proposed in [5] comes closest to satisfying the needs for our problem. We discussed the theory in detail in [8]. To briefly resummarize: differential relations are stored which keep track of changes over time. <p> We discuss herein our implementation of rollback algorithms, described in [5, 8]. Methods for dealing with rollback databases have been extensively dealt with in the literature [5, 8, 11]. In particular, the DM/T-IM/T system proposed in <ref> [5] </ref> comes closest to satisfying the needs for our problem. We discussed the theory in detail in [8]. To briefly resummarize: differential relations are stored which keep track of changes over time. These differentials can be applied to the current version of the relation to rollback to a previous state. <p> These differentials can be applied to the current version of the relation to rollback to a previous state. We proposed an improvement over IM/T where we use modification differentials in addition to the insertion and deletion differentials that were proposed in <ref> [5] </ref>. In this paper, we consider the implementational side. Can our method be implemented in an RDBMS? Does it perform more efficiently than IM/T? We therefore coded some of our algorithms in Oracle to demonstrate the feasibility of our extensions to IM/T. <p> Section 2 of this paper contains a detailed example in order to demonstrate the utility of rollback databases. Section 3 highlights some differences between our approach and <ref> [5] </ref>, and addresses which of these differences are important for our development here. Section 4 contains updates to algorithms since our last paper. In Section 5, we discuss the tools we used and the data we generated in order to perform tests. <p> Why would a user wish to roll forward, one might ask? Jensen in <ref> [5] </ref> explains the relevance of this by supposing that a cached query has effectively materialized a snapshot of a relation at some past point in time.
Reference: [6] <author> Koch, G. and Loney, K. </author> <title> Oracle: The Complete Reference, </title> <booktitle> 3rd edition. </booktitle> <address> Osborne/McGraw-Hill: Berkeley, CA, </address> <year> 1995. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [7] <author> Linden, B. </author> <title> Oracle7 Server SQL Reference. Oracle Corporation: </title> <address> Redwood Shores, CA, </address> <year> 1996. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [8] <author> Musicant, D. and Dabu, M. </author> <title> Efficient storage of temporal data in a data warehousing context. </title> <address> http://www.cs.wisc.edu/~ musicant, </address> <year> 1997. </year>
Reference-contexts: Data warehousing environments often update data on a regular basis, but users performing complex analytical tasks often need to work with data as it existed at some point in the past. We discuss herein our implementation of rollback algorithms, described in <ref> [5, 8] </ref>. Methods for dealing with rollback databases have been extensively dealt with in the literature [5, 8, 11]. In particular, the DM/T-IM/T system proposed in [5] comes closest to satisfying the needs for our problem. We discussed the theory in detail in [8]. <p> We discuss herein our implementation of rollback algorithms, described in [5, 8]. Methods for dealing with rollback databases have been extensively dealt with in the literature <ref> [5, 8, 11] </ref>. In particular, the DM/T-IM/T system proposed in [5] comes closest to satisfying the needs for our problem. We discussed the theory in detail in [8]. To briefly resummarize: differential relations are stored which keep track of changes over time. <p> Methods for dealing with rollback databases have been extensively dealt with in the literature [5, 8, 11]. In particular, the DM/T-IM/T system proposed in [5] comes closest to satisfying the needs for our problem. We discussed the theory in detail in <ref> [8] </ref>. To briefly resummarize: differential relations are stored which keep track of changes over time. These differentials can be applied to the current version of the relation to rollback to a previous state.
Reference: [9] <institution> Oracle7 Server Reference Manual. Oracle Corporation: </institution> <address> Redwood Shores, CA, </address> <year> 1996. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [10] <author> Portfolio, T. </author> <title> PL/SQL User's Guide and Reference. Oracle Corporation: </title> <address> Redwood Shores, CA, </address> <year> 1998. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [11] <author> Snodgrass, R. </author> <title> Temporal databases: Status and research directions. </title> <journal> ACM SIGMOD Record, </journal> <volume> 19(4) </volume> <pages> 83-89, </pages> <year> 1990. </year>
Reference-contexts: We discuss herein our implementation of rollback algorithms, described in [5, 8]. Methods for dealing with rollback databases have been extensively dealt with in the literature <ref> [5, 8, 11] </ref>. In particular, the DM/T-IM/T system proposed in [5] comes closest to satisfying the needs for our problem. We discussed the theory in detail in [8]. To briefly resummarize: differential relations are stored which keep track of changes over time.
Reference: [12] <author> Urman, S. </author> <booktitle> PL/SQL Programming. </booktitle> <address> Osborne/McGraw-Hill: Berkeley, CA, </address> <year> 1997. </year>
Reference-contexts: This system was installed on "blondie," an x86 PC worksta tion running the Solaris operating system. 2. SQL*Plus the standard Oracle SQL inter face. 3. SQL*Loader loads data from external files into Oracle tables. Learning the ins and outs of Oracle took some doing <ref> [2, 3, 4, 6, 7, 9, 10, 12] </ref>. We also utilized resources on the Internet such as DejaNews to answer difficult questions. Our first primary task was in determining an appropriate environment to implement our algorithms.
Reference: [13] <author> Zien, J. and Walters, S. </author> <title> "BAMINA errors, oracle web agent." </title> <note> Online posting. May 8, 1996. http://www.dejanews.com. 19 </note>
Reference-contexts: We also found Oracle to be frustrating with regard to memory issues. It does not seem to handle data fragmentation well, and occasionally reports cryptic error messages which go away on a second attempt at the same command. Research on the Internet <ref> [13] </ref> suggests that Oracle poorly manages shared memory space, and takes considerable tweaking when "large" amounts of data are man 9 aged. We will next describe our various levels of implementation of the algorithms. We document what we constructed, and what issues we faced.
References-found: 13

