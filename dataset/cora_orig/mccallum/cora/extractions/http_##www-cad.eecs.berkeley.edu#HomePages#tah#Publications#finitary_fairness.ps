URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/finitary_fairness.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/finitary_fairness.html
Root-URL: http://www.cs.berkeley.edu
Email: Email: alur@cis.upenn.edu.  Email: tah@eecs.berkeley.edu.  
Title: Finitary Fairness benefits of finitary fairness are twofold. First, the proof rules for verifying liveness
Author: RAJEEV ALUR THOMAS A. HENZINGER Thomas A. Henzinger, 
Keyword: Categories and Subject Descriptors: D.1.3 [Programming Techniques]: Concurrent programming; D.2.4 [Software Engineering]: Software/program verification; F.3.1 [Logics and Meanings of Programs]: Specifying and verifying and reasoning about programs General Terms: Formal verification, Distributed computing Additional Key Words and Phrases: Modeling of asynchronous systems, Fairness, Program verification, Distributed consensus  
Web: URL: http://www.cis.upenn.edu/~alur  URL: http://www.eecs.berkeley.edu/~tah  
Note: The  fairness.  Authors' addresses: Rajeev Alur,  This research was supported in part by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, by the NSF grant CCR-9504469, by the AFOSR contract F49620-93-1-0056, by the DARPA contract NAG2-892, and by the SRC contract 95-DC-324A.  
Address: Berkeley  33rd Street, University of Pennsylvania, Philadelphia, PA 19104.  519 Cory Hall, University of California, Berkeley, CA 94720-1770.  
Affiliation: University of Pennsylvania and Bell Labs and  University of California at  Department of Computer and Information Science, 200 South  Department of Electrical Engineering and Computer Sciences,  
Abstract: Fairness is a mathematical abstraction: in a multiprogramming environment, fairness abstracts the details of admissible ("fair") schedulers; in a distributed environment, fairness abstracts the relative speeds of processors. We argue that the standard definition of fairness often is unnecessarily weak and can be replaced by the stronger, yet still abstract, notion of finitary fairness. While standard weak fairness requires that no enabled transition is postponed forever, finitary weak fairness requires that for every computation of a system there is an unknown bound k such that no enabled transition is postponed more than k consecutive times. In general, the finitary restriction fin(F ) of any given fairness requirement F is the union of all !-regular safety properties contained in F . The adequacy of the proposed abstraction is shown in two ways. Suppose we prove a program property under the assumption of finitary fairness. In a multiprogramming environment, the program then satisfies the property for all fair finite-state schedulers. In a distributed environment, the program then satisfies the property for all choices of lower and upper bounds on the speeds (or timings) of processors. A preliminary version of this paper appeared in the Proceedings of the Ninth IEEE Symposium on Logic in Computer Science (LICS), pp. 52-61, 1994. An extended version will appear in the ACM Transactions on Programming Languages and Systems (TOPLAS). 
Abstract-found: 1
Intro-found: 1
Reference: <author> Alpern, B., Demers, A., and Schneider, F. </author> <year> 1986. </year> <title> Safety without stuttering. </title> <journal> Information Processing Letters 23, </journal> <pages> 177-180. </pages>
Reference: <author> Alpern, B. and Schneider, F. </author> <year> 1985. </year> <title> Defining liveness. </title> <journal> Information Processing Letters 21, </journal> <pages> 181-185. </pages>
Reference: <author> Alur, R., Attiya, H., and Taubenfeld, G. </author> <year> 1997. </year> <title> Time-adaptive algorithms for synchronization. </title> <journal> SIAM Journal on Computing 26, </journal> <pages> 539-556. </pages>
Reference: <author> Alur, R. and Dill, D. </author> <year> 1994. </year> <title> A theory of timed automata. </title> <booktitle> Theoretical Computer Science 126, </booktitle> <pages> 183-235. </pages>
Reference: <author> Alur, R., Henzinger, T., and Vardi, M. </author> <year> 1993. </year> <title> Parametric real-time reasoning. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing. </booktitle> <pages> 592-601. </pages>
Reference: <author> Apt, K., Francez, N., and Katz, S. </author> <year> 1988. </year> <title> Appraising fairness in languages for distributed programming. </title> <booktitle> Distributed Computing 2, </booktitle> <pages> 226-241. </pages>
Reference: <author> Apt, K., Pnueli, A., and Stavi, J. </author> <year> 1984. </year> <title> Fair termination revisited with delay. </title> <booktitle> Theoretical Computer Science 33, </booktitle> <pages> 65-84. </pages>
Reference: <author> B uchi, J. </author> <year> 1962. </year> <title> On a decision method in restricted second-order arithmetic. </title> <booktitle> In Proceedings of the International Congress on Logic, Methodology, and Philosophy of Science 1960. </booktitle> <publisher> Stanford University Press, </publisher> <pages> 1-12. </pages>
Reference: <author> Clarke, E. and Emerson, E. </author> <year> 1981. </year> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <booktitle> In Proceedings of the Workshop on Logic of Programs. Lecture Notes in Computer Science 131. </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 52-71. </pages>
Reference: <author> Clarke, E. and Kurshan, R. </author> <year> 1996. </year> <title> Computer-aided verification. </title> <journal> IEEE Spectrum 33, </journal> <pages> 61-67. </pages> <note> 24 R. </note> <author> Alur and T. Henzinger Clarke, E. and Wing, J. </author> <year> 1996. </year> <title> Formal methods: State of the art and future directions. </title> <journal> ACM Computing Surveys 28, </journal> <pages> 626-643. </pages>
Reference: <author> Dwork, C., Lynch, N., and Stockmeyer, L. </author> <year> 1988. </year> <title> Consensus in the presence of partial synchrony. </title> <journal> Journal of the ACM 35, </journal> <pages> 288-323. </pages>
Reference: <author> Fischer, M., Lynch, N., and Paterson, M. </author> <year> 1985. </year> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM 32, </journal> <pages> 374-382. </pages>
Reference: <author> Francez, N. </author> <year> 1986. </year> <title> Fairness. </title> <publisher> Springer-Verlag. </publisher>
Reference: <author> Gabbay, D., Pnueli, A., Shelah, S., and Stavi, J. </author> <year> 1980. </year> <title> On the temporal analysis of fairness. </title> <booktitle> In Proceedings of the Seventh ACM Symposium on Principles of Programming Languages. </booktitle> <pages> 163-173. </pages>
Reference: <author> Henzinger, T., Manna, Z., and Pnueli, A. </author> <year> 1994. </year> <title> Temporal proof methodologies for timed transition systems. </title> <booktitle> Information and Computation 112, </booktitle> <pages> 273-337. </pages>
Reference: <author> Jayasimha, D. </author> <year> 1988. </year> <title> Communication and Synchronization in Parallel Computation. </title> <type> Ph.D. Thesis, </type> <institution> University of Illinois at Urbana-Champaign. </institution>
Reference: <author> Lehman, D., Pnueli, A., and Stavi, J. </author> <year> 1982. </year> <title> Impartiality, justice, and fairness: The ethics of concurrent termination. </title> <booktitle> In Proceedings of the Ninth International Colloquium on Automata, Languages, and Programming. Lecture Notes in Computer Science 115. </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 264-277. </pages>
Reference: <author> Loui, M. and Abu-Amara, H. </author> <year> 1987. </year> <title> Memory requirements for agreement among unreliable asynchronous processes. </title> <booktitle> Advances in Computing Research 4, </booktitle> <pages> 163-183. </pages>
Reference: <author> Manna, Z. and Pnueli, A. </author> <year> 1990. </year> <title> A hierarchy of temporal properties. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Principles of Distributed Computing. </booktitle> <pages> 377-408. </pages>
Reference: <author> Manna, Z. and Pnueli, A. </author> <year> 1991. </year> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag. </publisher>
Reference: <author> Merritt, M., Modugno, F., and Tuttle, M. </author> <year> 1991. </year> <title> Time-constrained automata. </title> <booktitle> In Proceedings of the Workshop on Theories of Concurrency. Lecture Notes in Computer Science 527. </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 408-423. </pages>
Reference: <author> Pease, M., Shostak, R., and Lamport, L. </author> <year> 1980. </year> <title> Reaching agreement in the presence of faults. </title> <journal> Journal of the ACM 27, </journal> <pages> 228-234. </pages>
Reference: <author> Rhee, I. and Welch, J. </author> <year> 1992. </year> <title> The impact of time on the session problem. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Principles of Distributed Computing. </booktitle> <pages> 191-201. </pages>
Reference: <author> Thomas, W. </author> <year> 1990. </year> <title> Automata on infinite objects. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, Ed. </editor> <volume> Vol. </volume> <publisher> B. Elsevier Science Publishers, </publisher> <pages> 133-191. </pages>
Reference: <author> Vardi, M. </author> <year> 1987. </year> <title> Verification of concurrent programs: The automata-theoretic framework. </title> <booktitle> In Proceedings of the Second IEEE Symposium on Logic in Computer Science. </booktitle> <pages> 167-176. </pages>
References-found: 25

