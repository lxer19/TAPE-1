URL: http://www.cs.caltech.edu/~ps/papers/joy/siggraph96.ps.Z
Refering-URL: http://www.cs.caltech.edu/~ps/papers/joy/
Root-URL: http://www.cs.caltech.edu
Title: Free-Form Deformations With Lattices of Arbitrary Topology  
Author: Ron MacCracken Kenneth I. Joy 
Address: 1  
Affiliation: Computer Graphics Research Laboratory Department of Computer Science University of California, Davis  
Abstract: A new free-form deformation technique is presented that generalizes previous methods by allowing 3-dimensional deformation lattices of arbitrary topology. The technique uses an extension of the Catmull-Clark subdivision methodology that successively refines a 3-dimensional lattice into a sequence of lattices that converge uniformly to a region of 3-dimensional space. Deformation of the lattice then implicitly defines a deformation of the space. An underlying model can be deformed by establishing positions of the points of the model within the converging sequence of lattices and then tracking the new positions of these points within the deformed sequence of lattices. This technique allows a greater variety of deformable regions to be defined, and thus a broader range of shape deformations can be generated. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alan H. Barr. </author> <title> Global and local deformations of solid primitives. </title> <booktitle> In Computer Graphics (SIGGRAPH '84 Proceedings), </booktitle> <volume> volume 18, </volume> <pages> pages 21-30, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Email: fmaccrack,joyg@cs.ucdavis.edu the number in the surface model, then complex models comprised of thousands of control points can be deformed in many interesting ways with very little user-interaction. Barr <ref> [1] </ref> first introduced deformations by creating operations for stretching, twisting, bending and tapering surfaces around a central axis (x, y, or z). Operations that involved moving many control points could now be accomplished with the altering of as little as one parameter. <p> This method has been found to be quite intuitive for the designer and dramatically increases the inventory of lattices that can be considered in a free-form deformation. The twists and bends of Barr <ref> [1] </ref> and the cylindrical lattices of Coquillart [5] can be easily simulated. By allowing meshes of arbitrary topology, the continuity problems of adjoining lattices virtually disappear. In section 2, we give an overview of the subdivision methods that are used to define the deformable space from the lattice.
Reference: [2] <author> E. Catmull and J. Clark. </author> <title> Recursively generated B-spline surfaces on arbitrary topological meshes. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 10 </volume> <pages> 350-355, </pages> <month> September </month> <year> 1978. </year>
Reference-contexts: This paper introduces a further extension to these techniques by establishing deformation methods defined on lattices of arbitrary topology. In this case, the deformable space is defined by using a volume analogy of subdivision surfaces <ref> [2, 7, 8] </ref>. In these subdivision methods, the lattice is repeatedly refined, creating a sequence of lattices that converge to a region in three-dimensional space. This refinement procedure is used to define a pseudo-parameterization of an embedded point. <p> In section 2, we give an overview of the subdivision methods that are used to define the deformable space from the lattice. In our case these methods are based upon an extension of the Catmull-Clark refinement rules for surfaces <ref> [2] </ref>. In section 3, we modify the Catmull-Clark procedure to control the boundary surfaces and curves of the deformable region. This produces a deformable region that can be intuitively defined from the lattice. <p> Riesenfeld [18] proceeded to show that Chaikin's curves were uniform quadratic B-spline curves. Doo and Sabin [7, 8] extended Chaikin's method to uniform quadratic B-spline surfaces and then extended the refinement rules for the quadratic case to meshes of an arbitrary topology. Catmull and Clark <ref> [2] </ref> developed a similar technique for the uniform cubic B-spline case. These methods have now come into widespread use in geometric modeling. They have been used for interpolation and fairing [10], approximation [12], and multireso-lution design [16]. <p> Each new edge point is connected to the two vertex points defining the original edge. figures/fig3.tif 2.2 Catmull-Clark Volumes Extension of the above rules to lattices of arbitrary topology is straightforward, using an extension of the bivariate Catmull-Clark subdivision strategy <ref> [2] </ref>. <p> The edge and vertex points along the sharp edges of the lattice are calculated according to subdivision rules for uniform cubic B-spline curves [13]. * All other vertex, edge, and face points on the boundary are generated according to the Catmull-Clark rules for surfaces <ref> [2] </ref>. * All internal points are calculated using the Catmull-Clark rules for volumes. Given a lattice based on a cube, these methods will generate a region of space that is the cube. <p> It was our purpose to use this refinement to generate a partitioning of the deformable space by its cells, and for this purpose, this calculation appears to work very well. A detailed theoretical analysis of the continuity of the derivatives of these volumes at the extraordinary points <ref> [2, 8] </ref>. will have to be addressed in a future paper. 9 Acknowledgments We are very grateful to the anonymous referees for their many helpful comments on the first version of this paper.
Reference: [3] <author> G. Chaikin. </author> <title> An algorithm for high speed curve generation. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 3 </volume> <pages> 346-349, </pages> <year> 1974. </year>
Reference-contexts: The uniform B-spline curves, surfaces and volumes can be defined by subdivision methods. In the curve case, the refinement rules were first presented by George Chaikin <ref> [3] </ref>. Riesenfeld [18] proceeded to show that Chaikin's curves were uniform quadratic B-spline curves. Doo and Sabin [7, 8] extended Chaikin's method to uniform quadratic B-spline surfaces and then extended the refinement rules for the quadratic case to meshes of an arbitrary topology.
Reference: [4] <author> Yu-Kuang Chang and Alyn P. Rockwood. </author> <title> A generalized de Casteljau approach to 3D free-Form deformation. </title> <booktitle> In Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 257-260. </pages>
Reference-contexts: A recent deformation technique developed by Chang and Rock-wood <ref> [4] </ref> generalizes Barr's technique in a different manner. Instead of defining the space in a free-form manner, Chang's approach deals with increasing the flexibility of an axis-based approach by allowing modifications to the axis during the deformation.
Reference: [5] <author> Sabine Coquillart. </author> <title> Extended free-form deformation: A sculpturing tool for 3D geometric modeling. </title> <booktitle> In Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> volume 24, </volume> <pages> pages 187-196, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The free-form deformations <ref> [5, 6, 9, 19] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> In order to generate free-form deformations for a more general lattice structure, Coquillart introduced Extended Free-Form Deformations (EFFD) <ref> [5, 6] </ref>. This method uses the initial lattice points to define an arbitrary trivariate Bezier volume, and allows the combining of many lattices to form arbitrary shaped spaces. Modifying the points of the defining lattice creates a deformation of space where one trivariate volume is deformed into another. <p> This method has been found to be quite intuitive for the designer and dramatically increases the inventory of lattices that can be considered in a free-form deformation. The twists and bends of Barr [1] and the cylindrical lattices of Coquillart <ref> [5] </ref> can be easily simulated. By allowing meshes of arbitrary topology, the continuity problems of adjoining lattices virtually disappear. In section 2, we give an overview of the subdivision methods that are used to define the deformable space from the lattice. <p> The location of the point under the deformation is calculated by substituting these local coordinate values into the defining equation for the trivariate Bezier volume. Coquil-lart <ref> [5] </ref> uses a similar method, but numerical iteration is required to calculate the local coordinate, as her initial lattices are not formed as parallelepipeds. In both these cases, the cells of the lattice are hex-ahedral. <p> In the type-n case, we can calculate a piecewise trilinear approximation, by partitioning the cell into tetrahedra, and use this to adjust the position in the deformed cell. 5 The Deformation Process To deform an object, we follow the 4-step procedure outlined by Co-quillart in <ref> [5] </ref>. First, the user must construct the lattice. This is normally done by utilizing an inventory of lattices and a set of tools to merge and build new lattices from this inventory. <p> With this implementation, we have found that the algorithm executes in real time on an SGI Indigo 2 Extreme. 7 Results The primary motivation for moving from the hexahedral topological lattices of the trivariate Bezier and B-spline representations of <ref> [5, 9, 19] </ref> was to increase the inventory of available lattices and thus the number of possible deformations. Figures 7 through 9 show the results of this algorithm with a variety of meshes and shapes. in a surface deformation in the form of a star.
Reference: [6] <author> Sabine Coquillart and Pierre Jancene. </author> <title> Animated free-form deformation: An interactive animation technique. </title> <booktitle> In Computer Graphics (SIGGRAPH '91 Proceedings), </booktitle> <volume> volume 25, </volume> <pages> pages 23-26, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The free-form deformations <ref> [5, 6, 9, 19] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> In order to generate free-form deformations for a more general lattice structure, Coquillart introduced Extended Free-Form Deformations (EFFD) <ref> [5, 6] </ref>. This method uses the initial lattice points to define an arbitrary trivariate Bezier volume, and allows the combining of many lattices to form arbitrary shaped spaces. Modifying the points of the defining lattice creates a deformation of space where one trivariate volume is deformed into another.
Reference: [7] <author> D. Doo. </author> <title> A subdivision algorithm for smoothing down irregularly shaped polyhedrons. </title> <booktitle> In Proceedings of the Int'l Conf. Interactive Techniques in Computer Aided Design, </booktitle> <pages> pages 157-165, </pages> <year> 1978. </year>
Reference-contexts: This paper introduces a further extension to these techniques by establishing deformation methods defined on lattices of arbitrary topology. In this case, the deformable space is defined by using a volume analogy of subdivision surfaces <ref> [2, 7, 8] </ref>. In these subdivision methods, the lattice is repeatedly refined, creating a sequence of lattices that converge to a region in three-dimensional space. This refinement procedure is used to define a pseudo-parameterization of an embedded point. <p> The uniform B-spline curves, surfaces and volumes can be defined by subdivision methods. In the curve case, the refinement rules were first presented by George Chaikin [3]. Riesenfeld [18] proceeded to show that Chaikin's curves were uniform quadratic B-spline curves. Doo and Sabin <ref> [7, 8] </ref> extended Chaikin's method to uniform quadratic B-spline surfaces and then extended the refinement rules for the quadratic case to meshes of an arbitrary topology. Catmull and Clark [2] developed a similar technique for the uniform cubic B-spline case.
Reference: [8] <author> D. Doo and M. Sabin. </author> <title> Behaviour of recursive division surfaces near extraordinary points. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 10 </volume> <pages> 356-360, </pages> <month> September </month> <year> 1978. </year>
Reference-contexts: This paper introduces a further extension to these techniques by establishing deformation methods defined on lattices of arbitrary topology. In this case, the deformable space is defined by using a volume analogy of subdivision surfaces <ref> [2, 7, 8] </ref>. In these subdivision methods, the lattice is repeatedly refined, creating a sequence of lattices that converge to a region in three-dimensional space. This refinement procedure is used to define a pseudo-parameterization of an embedded point. <p> The uniform B-spline curves, surfaces and volumes can be defined by subdivision methods. In the curve case, the refinement rules were first presented by George Chaikin [3]. Riesenfeld [18] proceeded to show that Chaikin's curves were uniform quadratic B-spline curves. Doo and Sabin <ref> [7, 8] </ref> extended Chaikin's method to uniform quadratic B-spline surfaces and then extended the refinement rules for the quadratic case to meshes of an arbitrary topology. Catmull and Clark [2] developed a similar technique for the uniform cubic B-spline case. <p> It was our purpose to use this refinement to generate a partitioning of the deformable space by its cells, and for this purpose, this calculation appears to work very well. A detailed theoretical analysis of the continuity of the derivatives of these volumes at the extraordinary points <ref> [2, 8] </ref>. will have to be addressed in a future paper. 9 Acknowledgments We are very grateful to the anonymous referees for their many helpful comments on the first version of this paper.
Reference: [9] <author> Josef Griessmair and Werner Purgathofer. </author> <title> Deformation of solids with trivariate B-splines. </title> <booktitle> In Eurographics '89, </booktitle> <pages> pages 137-148. </pages> <publisher> North-Holland, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The free-form deformations <ref> [5, 6, 9, 19] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> This method is widely used because of its ease of use and power to create many types of deformations with little user-interaction. Griessmair and Purgathofer <ref> [9] </ref> extended this technique by utilizing a trivari-ate B-Spline representation. Although both methods give the user many controls to alter the deformable space, both Sederberg and Parry's FFDs and Griessmair and Purgathofer's deformation techniques handle only a specific type of space definition, that defined initially by a parallelepiped lattice. <p> With this implementation, we have found that the algorithm executes in real time on an SGI Indigo 2 Extreme. 7 Results The primary motivation for moving from the hexahedral topological lattices of the trivariate Bezier and B-spline representations of <ref> [5, 9, 19] </ref> was to increase the inventory of available lattices and thus the number of possible deformations. Figures 7 through 9 show the results of this algorithm with a variety of meshes and shapes. in a surface deformation in the form of a star.
Reference: [10] <author> Mark Halstead, Michael Kass, and Tony DeRose. </author> <title> Efficient, fair interpolation using Catmull-Clark surfaces. </title> <booktitle> In Computer Graphics (SIGGRAPH '93 Proceedings), </booktitle> <volume> volume 27, </volume> <pages> pages 35-44, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Catmull and Clark [2] developed a similar technique for the uniform cubic B-spline case. These methods have now come into widespread use in geometric modeling. They have been used for interpolation and fairing <ref> [10] </ref>, approximation [12], and multireso-lution design [16]. In this paper, we consider lattices of arbitrary topology and develop a set of refinement rules that subdivide this lattice to generate a deformable region in three-dimensional space.
Reference: [11] <author> Bernd Hamann, Donghua Wu, and Robert J. </author> <title> Moorhead II. On particle path generation based on quadrilinear interpolation and Bernstein-Bezier polynomials. </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> 1(3) </volume> <pages> 210-217, </pages> <year> 1995. </year>
Reference-contexts: Many numerical algorithms exist to generate the trilinear approximation of a point in a type-3 cell. We have utilized an adaptation of an algorithm presented by Hamann, et al. <ref> [11] </ref>. Given a point P in a cell, we generate a point P 0 as the trilinear point defined by ( 1 2 ; 1 2 ).
Reference: [12] <author> Hugues Hoppe, Tony DeRose, Tom Duchamp, Mark Halstead, Hubert Jin, John McDonald, Jean Schweitzer, and Werner Stuetzle. </author> <title> Piecewise smooth surface reconstruction. </title> <booktitle> In Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 295-302. </pages>
Reference-contexts: Catmull and Clark [2] developed a similar technique for the uniform cubic B-spline case. These methods have now come into widespread use in geometric modeling. They have been used for interpolation and fairing [10], approximation <ref> [12] </ref>, and multireso-lution design [16]. In this paper, we consider lattices of arbitrary topology and develop a set of refinement rules that subdivide this lattice to generate a deformable region in three-dimensional space. To generate the deformable regions, we utilize an extension of the Catmull-Clark subdivision method to volumes. <p> The corner vertices are yellow, the sharp edges are red, the boundary edges are green and the internal edges are blue. These techniques have been previously used by Nasri [17] for Doo-Sabin surfaces, and are similar to the techniques used by Hoppe et al. <ref> [12] </ref> in defining edges, creases, corners and darts on Loop Surfaces [15].
Reference: [13] <author> Kenneth I. Joy and Ron MacCracken. </author> <title> The refinement rules for Catmull-Clark solids. </title> <type> Technical Report CSE-96-1, </type> <institution> Department of Computer Science, University of California, Davis, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: In the following sections, we summarize the Catmull-Clark refinement rules for the uniform B-spline volume, along with the extensions of these methods to lattices of arbitrary topology. The complete details of the development of these refinement rules can be found in <ref> [13] </ref>. 2.1 Subdivision Methods for Trivariate Cubic Uni form B-Spline Volumes Given a control lattice L that defines a trivariate uniform B-spline volume, the subdivision method generates a new control lattice L 1 which consists of the union of all the vertices generated by a binary figures/fig2.tif subdivision of the trivariate <p> The edge and vertex points along the sharp edges of the lattice are calculated according to subdivision rules for uniform cubic B-spline curves <ref> [13] </ref>. * All other vertex, edge, and face points on the boundary are generated according to the Catmull-Clark rules for surfaces [2]. * All internal points are calculated using the Catmull-Clark rules for volumes.
Reference: [14] <author> David N. Kenwright and Davis A. Lane. </author> <title> Optimization of time-dependent particle tracing using tetrahedral decomposition. </title> <booktitle> In Proceedings of Visualization '95, </booktitle> <pages> pages 321-328. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1985. </year>
Reference-contexts: This can be put into matrix form and solved directly <ref> [14] </ref>.
Reference: [15] <author> Charles Loop. </author> <title> Smooth subdivision surfaces based on triangles. </title> <type> Master's thesis, </type> <institution> Department of Mathematics, University of Utah, </institution> <month> August </month> <year> 1987. </year>
Reference-contexts: These techniques have been previously used by Nasri [17] for Doo-Sabin surfaces, and are similar to the techniques used by Hoppe et al. [12] in defining edges, creases, corners and darts on Loop Surfaces <ref> [15] </ref>.
Reference: [16] <author> Mike Lounsbery. </author> <title> Multiresolution Analysis for Surfaces of Arbitrary Topological Type. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Catmull and Clark [2] developed a similar technique for the uniform cubic B-spline case. These methods have now come into widespread use in geometric modeling. They have been used for interpolation and fairing [10], approximation [12], and multireso-lution design <ref> [16] </ref>. In this paper, we consider lattices of arbitrary topology and develop a set of refinement rules that subdivide this lattice to generate a deformable region in three-dimensional space. To generate the deformable regions, we utilize an extension of the Catmull-Clark subdivision method to volumes.
Reference: [17] <author> A. Nasri. </author> <title> Polyhedral subdivision methods for free-form surfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 6 </volume> <pages> 29-73, </pages> <year> 1987. </year>
Reference-contexts: These are shown in figure 5. The corner vertices are yellow, the sharp edges are red, the boundary edges are green and the internal edges are blue. These techniques have been previously used by Nasri <ref> [17] </ref> for Doo-Sabin surfaces, and are similar to the techniques used by Hoppe et al. [12] in defining edges, creases, corners and darts on Loop Surfaces [15].
Reference: [18] <author> R. Riesenfeld. </author> <title> On Chaikin's algorithm. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 4(3) </volume> <pages> 304-310, </pages> <year> 1975. </year>
Reference-contexts: The uniform B-spline curves, surfaces and volumes can be defined by subdivision methods. In the curve case, the refinement rules were first presented by George Chaikin [3]. Riesenfeld <ref> [18] </ref> proceeded to show that Chaikin's curves were uniform quadratic B-spline curves. Doo and Sabin [7, 8] extended Chaikin's method to uniform quadratic B-spline surfaces and then extended the refinement rules for the quadratic case to meshes of an arbitrary topology.
Reference: [19] <author> Thomas W. Sederberg and Scott R. Parry. </author> <title> Free-form deformation of solid geometric models. </title> <booktitle> In Computer Graphics (SIG-GRAPH '86 Proceedings), </booktitle> <volume> volume 20, </volume> <pages> pages 151-160, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The free-form deformations <ref> [5, 6, 9, 19] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> Barr's deformations were followed by a more generalized approach to the problem, the Free-Form Deformations (FFDs) of Sederberg and Parry <ref> [19] </ref>. This method imposes an initial deformation lattice on a parallelepiped, and defines the deformable space as the trivariate Bezier volume defined by the lattice points. <p> The free-form deformations of Sederberg and Parry <ref> [19] </ref> were based upon an initial lattice that was formed on a parallelepiped, with the deformable space filling the lattice completely. <p> When added to the subdivision procedure, these new rules generate deformable regions of space that closely represent their lattice. 4 Calculating the Location of Vertices Embedded in the Deformable Space Sederberg and Parry <ref> [19] </ref> impose the initial lattice on a parallelepiped in space and calculate the parameterization of a point within the deformable space by using the local coordinates of a point within the parallelepiped. <p> With this implementation, we have found that the algorithm executes in real time on an SGI Indigo 2 Extreme. 7 Results The primary motivation for moving from the hexahedral topological lattices of the trivariate Bezier and B-spline representations of <ref> [5, 9, 19] </ref> was to increase the inventory of available lattices and thus the number of possible deformations. Figures 7 through 9 show the results of this algorithm with a variety of meshes and shapes. in a surface deformation in the form of a star.
Reference: [20] <author> Kevin J. Weiler. </author> <title> Topological structures for geometric modeling. </title> <type> PhD thesis, </type> <institution> Rensselaer Polytechnic Institute, </institution> <month> August </month> <year> 1986. </year> <note> figures/fig7a.tif figures/fig7b.tif figures/fig7c.tif figures/fig8a.tif figures/fig8b.tif figures/fig8c.tif figures/fig9a.tif figures/fig9b.tif figures/fig9c.tif </note>
Reference-contexts: The blue edges are generated by the tetrahedral partition. 6 Implementation Details The data structure holding the lattice is implemented as an extension of the half-edge data structure for surfaces much like the radial-edge structure of Weiler <ref> [20] </ref>. The primary difference between halfedge structure for a mesh representing a surface and a lattice representing a volume is that the lattice structure may have several faces that contain each edge the mesh structure will have at most two.
References-found: 20

