URL: ftp://ftp.cs.rpi.edu/pub/goldberg/1part-soda-proc.ps.gz
Refering-URL: http://www.cs.rpi.edu/~goldberg/papers/
Root-URL: http://www.cs.rpi.edu
Title: Path Optimization and Near-Greedy Analysis for Graph Partitioning: An Empirical Study  
Author: Jonathan Berry Mark Goldberg 
Abstract: This paper presents the results of an experimental study of graph partitioning. We describe a new heuristic technique, path optimization, and its application to two variations of graph partitioning: the max cut problem and the min quotient cut problem. We present the results of computational comparisons between this technique and the Kernighan-Lin algorithm, the simulated annealing algorithm, the FLOW-algorithm of [17], the multilevel spectral algorithm of [14], and the recent 0.878-approximation algorithm of [7]. The experiments were conducted on two classes of graphs that have become standard for such tests: random and random geometric. They show that for both classes of inputs and both variations of the problem, the new heuristic is competitive with the other algorithms, and holds a advantage for min quotient cut when applied to very large, sparse geometric graphs (10,000 - 100,000 vertices, average degree 10). In the last part of the paper, we describe an approach to analyzing graph partitioning algorithms from the statistical point of view. Every partitioning of a graph is viewed as a result achieved by a "near greedy" partitioning algorithm. The experiments show that for "good" partitionings, the number of non-greedy steps needed to obtain them is quite small; moreover, it is "statistically" smaller for better partitionings. This led us to conjecture that there exists an "optimal" distribution of the non-greedy steps that 0 the classes of graphs that we studied. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S.N. Bhatt and F.T. Leighton. </author> <title> A framework for solving vlsi graph layout problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 20(2), </volume> <year> 1984. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see <ref> [1] </ref>), and their potential usefulness for many other optimization problems ([3], [15], [7], [4], [20], [16], [17], [10], [5]).
Reference: [2] <author> Bruce L. Bowerman, Richard T. O'Connell, and David A. Dickey. </author> <title> Linear Statistical Models: An Applied Approach. </title> <publisher> Duxbury Press, </publisher> <address> Boston, MA, </address> <year> 1986. </year>
Reference-contexts: The sample mean and standard deviation of this set of observations were then computed, as well as a 99% confidence interval for the true mean solution. For a discussion of 100 (1 ff)% confidence intervals, see <ref> [2] </ref>. In standard statistical practice, a confidence interval derived from a sample size of more than thirty trials allows an appeal to The Central Limit Theorem and an argument that, with a given confidence, the true mean lies somewhere in the interval, regardless of the distribution of the individual trials. <p> The R 2 value shows the goodness of fit, i.e. how much of the variation (see <ref> [2] </ref>) of the dependent variable is explained by the independent variable. 5 * F R 500;:05 (i) = :0292 + :3991 p , R 2 = :7645, stderr = :0490 * F R 500;0:5 (i) = :0369 + :4540 p , R 2 = :9542, stderr = :0253 * F R
Reference: [3] <author> T. N. Bui. </author> <title> Graph Bisection Algorithms. </title> <type> PhD thesis, </type> <institution> Massachussetts Institute of Technology, </institution> <year> 1986. </year>
Reference-contexts: More trials would likely narrow the confidence intervals. An unanswered question is whether W-KL and W-SA can compete with W-PO. The idea of partitioning large graphs by performing a series of graph contractions has been explored in [9], <ref> [3] </ref>, [15], and [14]. In [3] and [15], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [3] finds an advantage for regular graphs of a special class only if the degree <p> More trials would likely narrow the confidence intervals. An unanswered question is whether W-KL and W-SA can compete with W-PO. The idea of partitioning large graphs by performing a series of graph contractions has been explored in [9], <ref> [3] </ref>, [15], and [14]. In [3] and [15], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [3] finds an advantage for regular graphs of a special class only if the degree is four or less. <p> large graphs by performing a series of graph contractions has been explored in [9], <ref> [3] </ref>, [15], and [14]. In [3] and [15], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [3] finds an advantage for regular graphs of a special class only if the degree is four or less. In [14], Hendrickson and Leland give a multilevel algorithm which uses weighted intermediate graphs to preserve good partitionings as the graph is uncontracted.
Reference: [4] <author> L.H. Clark, F. Shahrokhi, and L.A. Szekely. </author> <title> A linear time algorithm for graph partition problems. </title> <type> Technical report, </type> <institution> University of New Mexico, Department of Mathematics and Statistics, </institution> <year> 1991. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], [7], <ref> [4] </ref>, [20], [16], [17], [10], [5]). <p> In max-diff/max-degree selection, next vertex is drawn at random from M 2 , while min-diff selects one at random from M min . A similar vertex reordering technique is used and analyzed in <ref> [4] </ref>. Thus, each process is randomized, and the initial partitionings of PO are generated by random walks down the implicit backtracking tree.
Reference: [5] <author> C.M. Fiduccia and R.M. Mattheyses. </author> <title> A linear-time heuristic for improving network partitions. </title> <booktitle> In Proceedings of the 19 th IEEE Design Automation Conference, </booktitle> <year> 1982. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], [7], [4], [20], [16], [17], [10], <ref> [5] </ref>). <p> In turn, we use these statistics to derive a probabilistic greedy algorithm, pg-procedure, which produces the output based solely on the statistics. The experiments show that the 2 Our implementation uses the version of Fiduccia and Mattheyses (FM) <ref> [5] </ref> 1 2 Berry,Goldberg partitionings produced by such a simplified procedure are reasonably close to the best partitioning constructed by other algorithms. 2 Path Optimization Many applications of partitioning concern hypergraphs rather than graphs. <p> After five iterations terminate without an improvement to the objective function, the best partitioning is stored and the next initial partitioning is obtained. The cost of updating cell gains for all vertices is shown to be linear in the number of edges in <ref> [5] </ref>. The time complexity of an iteration of PO is thus O (m), assuming that the degree and edge size are bounded by constants. However, each iteration is much faster in practice. The average path Path Optizimation 3 length is usually less than 3 for very sparse graphs.
Reference: [6] <author> Jim Fox. </author> <title> A near-greedy approach to graph partitioning. </title> <type> Master's Project, </type> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Given a partitioning (S; S) of a graph G, the 8 Berry,Goldberg postprocessing is accomplished by a constructive algorithm which places vertices into partitions determined by KL, and marks them "greedy," or "non-greedy." Our code descends from a postprocessing system developed by Goldberg and Fox <ref> [6] </ref>. Our experiments showed that the choice of the selection procedure has a dramatic effect on the data. When using no reordering (random reordering), approximately 20% of the placements are marked as non-greedy.
Reference: [7] <author> M. Goemans and D. Williamson. </author> <title> .878-approximation algorithms for max cut and max 2sat. </title> <booktitle> In Proceedings of the 26 nd ACM Symposium on Theory of Computing, </booktitle> <year> 1994. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], <ref> [7] </ref>, [4], [20], [16], [17], [10], [5]). <p> cut, one with fl Resselaer Polytechnic Institute y Rensselaer Polytechnic Institute; the work of this author was supported in part by NSF Grant #CCR-9214487. 1 The technique described in this paper can be easily expanded to graphs with weighted edges. a provable approximation ratio of .878, was recently described in <ref> [7] </ref>. In x2, x3, and x4, we describe a new heuristic technique and its application to max cut and min quotient cut. <p> We present empirical comparisons between the new algorithm and the Kernighan-Lin 2 algorithm [16] (KL), the simulated annealing algorithm of [15] (SA), the FLOW-algorithm described in [17], and the 0.878-approximation algorithm given in <ref> [7] </ref>. The experiments suggest that the new algorithm is competitive with those algorithms, and that it is superior to them for certain classes of inputs. A description of an approach to analyzing graph partitioning algorithms from a statistical point of view is contained in x5. <p> Additional comparisons were made with the FLOW heuristic described in [17], the multilevel spectral algorithm of [14], and the .878-approximation algorithm for max cut <ref> [7] </ref>. The types of inputs studied were random graphs and random geometric graphs. The latter are created by laying out n random points on the unit square and connecting only those whose Euclidean distance is less than a given threshold d.
Reference: [8] <author> M. Goemans and D. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <journal> Journal of the ACM, </journal> <note> submitted. </note>
Reference-contexts: Note that obtaining upper bounds for larger sparse graphs is at the moment com-putationally infeasible. See the journal version of Geo-mans and Williamson's paper for details <ref> [8] </ref>. Random (n; p) Geom (n; d) (500,.05) (500,. 5) (500,.5) KL .9528 .9844 .9801 SA .9540 .9852 .9801 Table 1: max cut bounds, 3 specific graphs 4.2 Min Quotient Cut This section presents the results of our experiments with the min quotient cut problem.
Reference: [9] <author> M. Goldberg and M. Burstein. </author> <title> Heuristic improvement technique for bisection of VLSI networks. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design: VLSI in Computers (ICCD '83), </booktitle> <year> 1983. </year>
Reference-contexts: More trials would likely narrow the confidence intervals. An unanswered question is whether W-KL and W-SA can compete with W-PO. The idea of partitioning large graphs by performing a series of graph contractions has been explored in <ref> [9] </ref>, [3], [15], and [14]. In [3] and [15], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse.
Reference: [10] <author> M. K. Goldberg, S. Lath, and J. Roberts. </author> <title> Heuristics for the graph bisection problem. </title> <type> Technical Report 86-8, </type> <institution> Rensselaer Polytechnic Institute, Department of Computer Science, </institution> <year> 1986. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], [7], [4], [20], [16], [17], <ref> [10] </ref>, [5]). <p> '500' '1000' '1500' functions of n and p in absolute terms, but show a small increase in slope with increases in size or vertex degree. 5.2 Probabilistic-Greedy Heuristic The experiments with postprocessing the partitionings constructed by KL, led us to experiment with a "probabilistic greedy", PG, algorithmic strategy (see also, <ref> [10] </ref> and [11]). Under this paradigm, a solution is constructed successively, and for every step, the algorithm decides probabilistically if the step must be greedy or non-greedy.
Reference: [11] <author> M. K. Goldberg and R. Rivenburgh. </author> <title> Constructing cliques using the near greedy algorithm. </title> <booktitle> In Proceedings of the 2nd Computational Challenge, </booktitle> <year> 1993, </year> <note> submitted. </note>
Reference-contexts: '1500' functions of n and p in absolute terms, but show a small increase in slope with increases in size or vertex degree. 5.2 Probabilistic-Greedy Heuristic The experiments with postprocessing the partitionings constructed by KL, led us to experiment with a "probabilistic greedy", PG, algorithmic strategy (see also, [10] and <ref> [11] </ref>). Under this paradigm, a solution is constructed successively, and for every step, the algorithm decides probabilistically if the step must be greedy or non-greedy. The decision is based on the ng-function which is supposed to be developed based on the previous experiments with the inputs of the specific class.
Reference: [12] <author> B. Hendrickson and R. Leland. </author> <title> An improved spectral graph partitioning algorithm for mapping parallel computations. </title> <type> Technical Report SAND92-1460, </type> <institution> San-dia National Laboratories, </institution> <year> 1992. </year>
Reference-contexts: In [14], Hendrickson and Leland give a multilevel algorithm which uses weighted intermediate graphs to preserve good partitionings as the graph is uncontracted. The contractions are obtained by finding maximal matchings and identifying endpoints of matching edges. After the resultant graph is partitioned using the spectral method of <ref> [12] </ref>, the original graph is restored through a series of uncontractions, with KL (FM) occasionally cleaning the partitioning. Results are presented indicating that for bisection of large, sparse graphs, this algorithm performs significantly better than spectral partitioning alone.
Reference: [13] <author> B. Hendrickson and R. Leland. </author> <note> The chaco users guide, 10 Berry,Goldberg version 1.0. Technical Report SAND93-2339, </note> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: Results are presented indicating that for bisection of large, sparse graphs, this algorithm performs significantly better than spectral partitioning alone. Using Chaco <ref> [13] </ref>, a partitioning system due to Hen-drickson and Leland which implements several spectral partitioning methods and the multilevel algorithm described above, we were able to make limited comparisons with W-PO, line-KL, and line-SA.
Reference: [14] <author> B. Hendrickson and R. Leland. </author> <title> A multilevel algorithm for partitioning graphs. </title> <type> Technical Report SAND93-1301, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: Additional comparisons were made with the FLOW heuristic described in [17], the multilevel spectral algorithm of <ref> [14] </ref>, and the .878-approximation algorithm for max cut [7]. The types of inputs studied were random graphs and random geometric graphs. The latter are created by laying out n random points on the unit square and connecting only those whose Euclidean distance is less than a given threshold d. <p> A brief summary of the experimental results on large, sparse geometric graphs follows: * The multilevel spectral algorithm of <ref> [14] </ref> is significantly faster than the others. Given equal time, it comes to dominate them as graph size increases (see Table 4). <p> 3: 99% Confidence Intervals for Expected # Cuts, Geometric Graphs, average degree 7.6 (data from vertices time W-PO line-KL line-SA ML 12,500 4sec 104.97,133.16 139.14,155.77 139.08,159.70 100.96,122.98 50,000 17sec 282.49,354.48 275.52,308.74 275.40,311.57 184.54,214.49 200,000 90sec 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4: Very short runs: (ML is the multilevel algorithm of <ref> [14] </ref>) Expected # Cuts (data from Figure 6) 20% in some cases. This advantage is determined by measuring the smallest interval between respective confidence intervals, and appears to decrease as graph size increases. <p> More trials would likely narrow the confidence intervals. An unanswered question is whether W-KL and W-SA can compete with W-PO. The idea of partitioning large graphs by performing a series of graph contractions has been explored in [9], [3], [15], and <ref> [14] </ref>. In [3] and [15], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. <p> Bui [3] finds an advantage for regular graphs of a special class only if the degree is four or less. In <ref> [14] </ref>, Hendrickson and Leland give a multilevel algorithm which uses weighted intermediate graphs to preserve good partitionings as the graph is uncontracted. The contractions are obtained by finding maximal matchings and identifying endpoints of matching edges.
Reference: [15] <author> D.S. Johnson, C.R. Aragon, L.A. McGeoch, and C. Schevon. </author> <title> Optimization by simulated annealing; part I, graph partitioning. </title> <journal> Operations Research, </journal> <volume> 37 </volume> <pages> 865-892, </pages> <year> 1989. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], <ref> [15] </ref>, [7], [4], [20], [16], [17], [10], [5]). <p> In x2, x3, and x4, we describe a new heuristic technique and its application to max cut and min quotient cut. We present empirical comparisons between the new algorithm and the Kernighan-Lin 2 algorithm [16] (KL), the simulated annealing algorithm of <ref> [15] </ref> (SA), the FLOW-algorithm described in [17], and the 0.878-approximation algorithm given in [7]. The experiments suggest that the new algorithm is competitive with those algorithms, and that it is superior to them for certain classes of inputs. <p> We refer to this initial partitioning generator as the W algorithm. 3 Algorithm Implementations and Setup of Experiments Path Optimization was compared extensively with the Kernighan-Lin (FM version) algorithm and the simulated annealing algorithm as described in <ref> [15] </ref>. Additional comparisons were made with the FLOW heuristic described in [17], the multilevel spectral algorithm of [14], and the .878-approximation algorithm for max cut [7]. The types of inputs studied were random graphs and random geometric graphs. <p> The PO initial partitioning generation is described in x2. The KL and SA algorithms start from random par-titionings, except when applied to the min quotient cut problem on geometric graphs. Here, initial partition-ings are generated by the line heuristic described in <ref> [15] </ref>. The line heuristic uses geometric information to split the vertex set of a geometric graph into two equal sized halves with a line of randomly chosen slope. It has been demonstrated that such initial partitionings dramatically improve the performance of KL and SA [15, 17]. <p> The line heuristic uses geometric information to split the vertex set of a geometric graph into two equal sized halves with a line of randomly chosen slope. It has been demonstrated that such initial partitionings dramatically improve the performance of KL and SA <ref> [15, 17] </ref>. Our implementation of SA follows that of Johnson, et al. with one important exception: for max cut on random graphs, better results are obtained if the running time is spread over one long annealing run instead of several shorter ones. <p> However, for max cut on geometric graphs and min quotient cut on both graph types, the cooling ratio is set as in <ref> [15] </ref> and iterations are performed until the time is up. Our implementations of the algorithms support various objective functions, including those of max cut and min quotient cut. The modifications to achieve this are small. <p> The modifications to achieve this are small. Our version of KL was tested on the set of geometric graphs from [17], and it reported results comparable to those of their KL implementation, which in turn had been tested against that of <ref> [15] </ref>. SA was not tested against any previous data sets, but our implementation is based directly on [15] and reports similar results when run on similar inputs. For each algorithm, we computed the running time spent in the main loop only. The input and initialization times were not included. <p> version of KL was tested on the set of geometric graphs from [17], and it reported results comparable to those of their KL implementation, which in turn had been tested against that of <ref> [15] </ref>. SA was not tested against any previous data sets, but our implementation is based directly on [15] and reports similar results when run on similar inputs. For each algorithm, we computed the running time spent in the main loop only. The input and initialization times were not included. <p> In all of these figures, the vertical axis has no significance. Table 3 presents the same results as Figure 6, showing the number of cut edges instead of the quotient cost. 4.1 Max Cut The results of Johnson et al. <ref> [15] </ref>, which concerned Graph Bisection, a minimization problem, suggested that simulated annealing was slightly better than KL for random graphs and clearly worse for geometric graphs. Our results show that this is not the case in general, even for minimization of the cut for geometric graphs (see x4.2). <p> The modification needed to switch KL and PO to solve min quotient cut are straightforward. For SA, the balancing is achieved through a penalty function as in <ref> [15] </ref>. Our experiments with annealing based directly on changes in quotient cut offer no improvement in solution quality. When applied to min quotient cut on geometric graphs, our implementations of KL and SA employ the line heuristic described in x2. <p> More trials would likely narrow the confidence intervals. An unanswered question is whether W-KL and W-SA can compete with W-PO. The idea of partitioning large graphs by performing a series of graph contractions has been explored in [9], [3], <ref> [15] </ref>, and [14]. In [3] and [15], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. <p> More trials would likely narrow the confidence intervals. An unanswered question is whether W-KL and W-SA can compete with W-PO. The idea of partitioning large graphs by performing a series of graph contractions has been explored in [9], [3], <ref> [15] </ref>, and [14]. In [3] and [15], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [3] finds an advantage for regular graphs of a special class only if the degree is four or less.
Reference: [16] <author> Brian W. Kernighan and S. Lin. </author> <title> An efficient heuristic procedure for partitioning graphs. </title> <journal> Bell System Technical Journal, </journal> <volume> 49 </volume> <pages> 291-307, </pages> <year> 1970. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], [7], [4], [20], <ref> [16] </ref>, [17], [10], [5]). <p> In x2, x3, and x4, we describe a new heuristic technique and its application to max cut and min quotient cut. We present empirical comparisons between the new algorithm and the Kernighan-Lin 2 algorithm <ref> [16] </ref> (KL), the simulated annealing algorithm of [15] (SA), the FLOW-algorithm described in [17], and the 0.878-approximation algorithm given in [7]. The experiments suggest that the new algorithm is competitive with those algorithms, and that it is superior to them for certain classes of inputs.
Reference: [17] <author> K. Lang and S. Rao. </author> <title> Finding near-optimal cuts: an empirical evaluation. </title> <booktitle> In Proceedings of the 4th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <month> Jan-uary </month> <year> 1993. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], [7], [4], [20], [16], <ref> [17] </ref>, [10], [5]). An experimental study of a heuristic algorithm for min quotient cut based on the multicommodity flow technique was done in [17]; the best approximation algorithm for max cut, one with fl Resselaer Polytechnic Institute y Rensselaer Polytechnic Institute; the work of this author was supported in part by <p> attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], [7], [4], [20], [16], <ref> [17] </ref>, [10], [5]). An experimental study of a heuristic algorithm for min quotient cut based on the multicommodity flow technique was done in [17]; the best approximation algorithm for max cut, one with fl Resselaer Polytechnic Institute y Rensselaer Polytechnic Institute; the work of this author was supported in part by NSF Grant #CCR-9214487. 1 The technique described in this paper can be easily expanded to graphs with weighted edges. a provable approximation ratio <p> In x2, x3, and x4, we describe a new heuristic technique and its application to max cut and min quotient cut. We present empirical comparisons between the new algorithm and the Kernighan-Lin 2 algorithm [16] (KL), the simulated annealing algorithm of [15] (SA), the FLOW-algorithm described in <ref> [17] </ref>, and the 0.878-approximation algorithm given in [7]. The experiments suggest that the new algorithm is competitive with those algorithms, and that it is superior to them for certain classes of inputs. <p> We refer to this initial partitioning generator as the W algorithm. 3 Algorithm Implementations and Setup of Experiments Path Optimization was compared extensively with the Kernighan-Lin (FM version) algorithm and the simulated annealing algorithm as described in [15]. Additional comparisons were made with the FLOW heuristic described in <ref> [17] </ref>, the multilevel spectral algorithm of [14], and the .878-approximation algorithm for max cut [7]. The types of inputs studied were random graphs and random geometric graphs. <p> The line heuristic uses geometric information to split the vertex set of a geometric graph into two equal sized halves with a line of randomly chosen slope. It has been demonstrated that such initial partitionings dramatically improve the performance of KL and SA <ref> [15, 17] </ref>. Our implementation of SA follows that of Johnson, et al. with one important exception: for max cut on random graphs, better results are obtained if the running time is spread over one long annealing run instead of several shorter ones. <p> Our implementations of the algorithms support various objective functions, including those of max cut and min quotient cut. The modifications to achieve this are small. Our version of KL was tested on the set of geometric graphs from <ref> [17] </ref>, and it reported results comparable to those of their KL implementation, which in turn had been tested against that of [15]. SA was not tested against any previous data sets, but our implementation is based directly on [15] and reports similar results when run on similar inputs. <p> Again, all results which are presented in 6 Berry,Goldberg Size Ave. Deg. #graphs line-KL FLOW-KL W-PO #times W-PO best 1000 10.94 10 .1175 .1134 .1154 1 10000 12.02 5 .0448 .0406 .0412 2 Table 2: min quotient cut Testbed of <ref> [17] </ref> a given plot are taken from runs on the same type of machine. Since has improved relative to ae such that the confidence intervals overlap, we cannot say with 99% confidence that the true mean solution of either algorithm is better. <p> However, the sample mean ae is still better than , and more trials tend to narrow the intervals. 0.017 0.018 0.019 0.02 0.021 0.022 0.023 m s 100,000, Ave Deg: 13.7, Runs of 10 Hours In <ref> [17] </ref>, Lang and Rao described a heuristic, called FLOW, which uses the multicommodity flow approach to partitioning (see [18], [20]). They present the results of the empirical comparison of FLOW with variations of KL (FM) applied to sparse random and geometric random graphs. <p> Although the average quotient cuts of FLOW-KL are slightly better, PO produced the best quotient cut five out of twenty times. In Figure 5, we considered a testbed of 10 geometric graphs of 100,000 vertices with average degree 13.7. In <ref> [17] </ref>, FLOW-KL was run on one such graph. After 3 days of running on a 36 MHz silicon graphics machine, it produced a quotient cut of .014 ( 700 cuts).
Reference: [18] <author> F. Thomas Leighton and Satish Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommod-ity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29 th IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: ae is still better than , and more trials tend to narrow the intervals. 0.017 0.018 0.019 0.02 0.021 0.022 0.023 m s 100,000, Ave Deg: 13.7, Runs of 10 Hours In [17], Lang and Rao described a heuristic, called FLOW, which uses the multicommodity flow approach to partitioning (see <ref> [18] </ref>, [20]). They present the results of the empirical comparison of FLOW with variations of KL (FM) applied to sparse random and geometric random graphs.
Reference: [19] <author> F. Rendl, R.J. Vanderbei, and H. Wolkowicz. </author> <title> Interior point methods for max-min eigenvalue problems. </title> <type> Report 264, </type> <institution> Technische Universitat Graz, </institution> <year> 1993. </year>
Reference-contexts: attempts to use these correlations so far have not yielded a substantial improvement in the quality of the PG heuristic. 6 Acknowledgments We would like to thank Michael Goemans and David Williamson for providing us with a C-code of their .878 approximation algorithm (based on the code of Robert Vanderbei <ref> [19] </ref>), Bruce Hendrickson and Robert Leland for the Chaco system, and Satish Rao for sharing his test graphs. We are grateful to David Johnson for useful comments on Simulated Annealing, and to Vance Faber of Los Alamos National Laboratory for his support.
Reference: [20] <author> F. Shahrokhi and D.W. Matula. </author> <title> The maximum concurrent flow problem. </title> <journal> Journal of the ACM, </journal> <volume> 37, </volume> <year> 1990. </year>
Reference-contexts: Both problems are known to be NP-hard. The problems have received a great deal of attention because of their applications, most notably in VLSI design (see [1]), and their potential usefulness for many other optimization problems ([3], [15], [7], [4], <ref> [20] </ref>, [16], [17], [10], [5]). <p> is still better than , and more trials tend to narrow the intervals. 0.017 0.018 0.019 0.02 0.021 0.022 0.023 m s 100,000, Ave Deg: 13.7, Runs of 10 Hours In [17], Lang and Rao described a heuristic, called FLOW, which uses the multicommodity flow approach to partitioning (see [18], <ref> [20] </ref>). They present the results of the empirical comparison of FLOW with variations of KL (FM) applied to sparse random and geometric random graphs.
References-found: 20

