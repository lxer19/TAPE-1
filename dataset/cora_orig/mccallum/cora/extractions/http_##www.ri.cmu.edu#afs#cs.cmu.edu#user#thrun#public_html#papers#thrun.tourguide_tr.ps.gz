URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/thrun/public_html/papers/thrun.tourguide_tr.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/thrun/public_html/papers/thrun.tourguide_tr.html
Root-URL: 
Title: EXPERIENCES WITH AN INTERACTIVE MUSEUM TOUR-GUIDE ROBOT  
Author: Wolfram Burgard, Armin B. Cremers, Dieter Fox, Dirk Hahnel, Gerhard Lakemeyer, Dirk Schulz Walter Steiner, Sebastian Thrun 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: June 1998  
Pubnum: CMU-CS-98-139  
Abstract: This article describes the software architecture of an autonomous, interactive tour-guide robot. It presents a modular, distributed software architecture, which integrates localization, mapping, collision avoidance, planning, and various modules concerned with user interaction. The approach does not require any modifications to the environment. To cope with the various challenges in dynamic and ill-structured environments, the software relies on probabilistic computation, on-line learning, any-time algorithms, and distributed control. Special emphasis has been placed on the design of interactive capabilities that appeal to people's intuition. In mid-1997, the robot was successfully deployed in a densely populated museum, demonstrating reliable operation in hazardous public environments, and raising the museum's attendance by more than 50%. In addition, people all over the world controlled the robot through the Web. Authors' affiliations: W. Burgard, A.B. Cremers, D. Fox, D. Hahnel, D. Schulz, and W. Steiner are with the Computer Science Department III at the University of Bonn. G. Lakemeyer is with the Computer Science Department V at the Technological University of Aachen, both Germany. S. Thrun is with CMU. This research is sponsored in part by DARPA via AFMSC (contract number F04701-97-C-0022), TACOM (contract number DAAE07-98-C-L032), and Rome Labs (contract number F30602-98-2-0137), and also by the EC (contract number ERBFMRX-CT96-0049) under the TMR programme. The views and conclusions contained in this document are those of the author and should not be interpreted as necessarily representing official policies or endorsements, either expressed or implied, of DARPA, AFMSC, TACOM, Rome Labs, the United States Government, or the EC. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> I. Asimov. Runaround. Faucett Crest, </editor> <address> New York, </address> <year> 1942. </year>
Reference-contexts: 1 Introduction Ever since novelist Karel Capek and science fiction author Isaak Asimov invented the term robot <ref> [1, 2, 18] </ref>, the dream of building robotswilling, intelligent and human-like machines that make life pleasant by doing the type work we don't like to dohas been an active dream in people's minds.
Reference: [2] <author> I. Asimov. </author> <title> I, Robot. </title> <publisher> Doubleday, </publisher> <year> 1950. </year>
Reference-contexts: 1 Introduction Ever since novelist Karel Capek and science fiction author Isaak Asimov invented the term robot <ref> [1, 2, 18] </ref>, the dream of building robotswilling, intelligent and human-like machines that make life pleasant by doing the type work we don't like to dohas been an active dream in people's minds.
Reference: [3] <author> H. Asoh, S. Hayamizu, I. Hara, Y. Motomura, S. Akaho, and T. Matsui. </author> <title> Socially embedded learning of office-conversant robot jijo-2. </title> <booktitle> In Proceedings of IJCAI-97. IJCAI, </booktitle> <publisher> Inc., </publisher> <year> 1997. </year>
Reference-contexts: Due to the lack of a speech recognition system, his interface still required the user to operate a keyboard; however, the natural language component made instructing the robot significantly easier. More recently, Asoh and colleagues <ref> [3] </ref> developed an interface that integrates a speech recognition system into a phrase-based natural language interface. They successfully instructed their office-conversant robot to navigate to office doors and other significant places in their environment, using verbal commands.
Reference: [4] <author> R.E. Bellman. </author> <title> Dynamic Programming. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1957. </year>
Reference-contexts: The cost for traversing a grid cell hx; yi is proportional to its occupancy value P (c int xy ) (cf. Equation (23)). The minimum-cost path is computed using a modified version of value iteration, a popular dynamic programming algorithm <ref> [4, 61] </ref>: 1. Initialization.
Reference: [5] <author> M. Betke and L. Gurvits. </author> <title> Mobile robot localization using landmarks. </title> <type> Technical Report SCR-94-TR-474, </type> <institution> Siemens Corporate Research, Princeton, </institution> <month> December </month> <year> 1993. </year> <note> will also appear in the IEEE Transactions on Robotics and Automation. </note>
Reference-contexts: While some localization approaches, such as those described in [60, 78, 120] localize the robot relative to some landmarks in a topological map, RHINO's approach localizes the robot in a metric space, just like those methods proposed in <ref> [5, 125, 128] </ref>. The vast majority of approaches is incapable of localizing a robot globally; instead, Experiences with an Interactive Museum Tour-Guide Robot 37 they are designed to track the robot's position by compensating small odometric errors.
Reference: [6] <author> C.M. Bishop. </author> <title> Neural Networks for Pattern Recognition. </title> <publisher> Oxford University Press, Oxford, </publisher> <address> UK, </address> <year> 1994. </year>
Reference-contexts: The coefficients of these distribution are learned from data, using the maximum likelihood estimator <ref> [6] </ref>. shown in Figure 5a. Figure 5b shows, for each position ~, the likelihood P (o j ~) of this specific range scan in a pre-supplied map (projected into 2D).
Reference: [7] <author> J. Borenstein. </author> <title> The Nursing Robot System. </title> <type> PhD thesis, </type> <institution> Technion, Haifa, Israel, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: As a result, the robot blew its horn whenever humans blocked its path; an effect, that most visitors found highly entertaining. 3.2 Mapping The problem of mapping is the problem of estimating the occupancy of all hx; yi locations in the environment <ref> [7, 34, 96, 127] </ref> from sensor data. Mapping is essential if the environment changes over time, specifically if entire passages can be blocked. In the museum, stools or people often blocked certain regions or passages for extended durations of time. <p> Many approaches reviewed in [8], a recent book on this topic, are limited in that they require modifications of the environment. Some require artificial landmarks such as bar-code reflectors [38], reflecting tape, ultrasonic beacons, or visual patterns that are easy to recognize, such as black rectangles with white dots <ref> [7] </ref>. Of course, modifying the environment is not an option in many application domains. Some of the more advanced approaches use more natural landmarks that do not require modifications of the environment.
Reference: [8] <author> J. Borenstein, B. Everett, and L. Feng. </author> <title> Navigating Mobile Robots: Systems and Techniques. </title> <editor> A. K. Peters, </editor> <publisher> Ltd., </publisher> <address> Wellesley, MA, </address> <year> 1996. </year>
Reference-contexts: Cox [30] noted that Using sensory information to locate the robot in its environment is the most fundamental problem to providing a mobile robot with autonomous capabilities. A recent book by Borenstein, Everett, and Feng <ref> [8] </ref> provides an excellent overview of the state-of-the-art in localization. Localization plays a key role in various successful mobile robot architectures [28, 46, 58, 72, 83, 84, 98, 104, 107, 110, 120, 119, 134] and various chapters in [75]. <p> The results obtained in the museum illustrate that it is capable of reliably localizing a robot even if more than 50% of all sensor readings are corrupted by people (see also [45]). Finally, most existing approaches are restricted in the type features that they consider. Many approaches reviewed in <ref> [8] </ref>, a recent book on this topic, are limited in that they require modifications of the environment. Some require artificial landmarks such as bar-code reflectors [38], reflecting tape, ultrasonic beacons, or visual patterns that are easy to recognize, such as black rectangles with white dots [7].
Reference: [9] <author> J. Borenstein and Y. Koren. </author> <title> Real-time obstacle avoidance for fast mobile robots in cluttered environments. </title> <booktitle> In Proc. of the IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 572577, </pages> <year> 1990. </year> <title> 48 Experiences with an Interactive Museum Tour-Guide Robot </title>
Reference-contexts: By modifying the potential function the motion of the robot becomes more efficient and different behaviors such as wall following and tracking can be achieved. 40 Experiences with an Interactive Museum Tour-Guide Robot The virtual force field histogram algorithm <ref> [9] </ref>, which closely resembles potential field methods, uses occupancy grids to represent information about obstacles close to the robot. This grid is generated and updated continuously using ultrasonic proximity sensors. Boren-stein later extended this approach to the vector field histogram [10].
Reference: [10] <author> J. Borenstein and Y. Koren. </author> <title> The vector field histogram fast obstacle avoidance for mobile robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(3):278288, </volume> <year> 1991. </year>
Reference-contexts: Inability to handle invisible obstacles. Virtually all existing methods for collision avoidance are purely sensor-based, i.e., they only consult the robot's sensors to determine collision-free motion <ref> [10, 42, 62, 68, 69, 118] </ref>. If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics. <p> Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., <ref> [10, 12, 53, 112, 136, 137] </ref>). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition. <p> This grid is generated and updated continuously using ultrasonic proximity sensors. Boren-stein later extended this approach to the vector field histogram <ref> [10] </ref>. In this algorithm. occupancy information is transformed into a histogram description of the free space around the robot, which is used to compute the motion direction and velocity for the robot.
Reference: [11] <author> R.A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <type> Technical Report AI memo 864, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: Typical examples of such a situations are show in Figure 25. Luckily none of these attempts succeeded. We attribute this robustness to the extensive use of methods that are non-reactive, in the sense that they did not base their decisions on the most sensor readings only, as advocated elsewhere <ref> [11, 27] </ref>. RHINO's ability to react to people proved to be one of the most entertaining aspects, which contributed enormously to its popularity.
Reference: [12] <author> J. Buhmann, W. Burgard, A.B. Cremers, D. Fox, T. Hofmann, F. Schneider, J. Strikos, and S. Thrun. </author> <title> The mobile robot RHINO. </title> <journal> AI Magazine, </journal> <volume> 16(2):3138, </volume> <month> Summer </month> <year> 1995. </year>
Reference-contexts: Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., <ref> [10, 12, 53, 112, 136, 137] </ref>). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition. <p> However, to operate robots safely at higher speeds (such as walking speed), it is necessary to take the robot dynamics into account. Both the dynamic window approach <ref> [12, 41] </ref> and the curvature velocity method [118], which despite their similarity were developed independently, are designed to deal with the dynamics of mobile robots. To deal with obstacles that cannot be detected by the robot's sensors it is necessary to integrate model-based information into reactive collision avoidance.
Reference: [13] <author> W. Burgard, A.B. Cremers, D. Fox, G. Lakemeyer, D. Hahnel, D. Schulz, W. Steiner, and S. Thrun. </author> <title> The interactive museum tour-guide robot. </title> <booktitle> In Proc.of the Fifteenth National Conference on Artificial Intelligence, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: The ability of RHINO to decelerate in the presence of people and to ask for clearance proved to be one of the most entertaining aspects of the entire systems. 6 Statistics The results of the six day deployment are summarized in Table 5 <ref> [13] </ref>. RHINO operated for approximately 47 hours without any significant downtime. Over this period of time, the robot traveled approximately 18.6km. More than 2,000 real visitors and over 2,000 virtual Web-based visitors were guided by RHINO. We counted over 200,000 accesses to RHINO's Web site.
Reference: [14] <author> W. Burgard, A. Derr, D. Fox, </author> <title> and A.B. Cremers. Integrating global position estimation and position tracking for mobile robots: The dynamic markov localization approach. </title> <booktitle> In Proc. of the IEEE/RSJ International Conference ond Intelligent Robots and Systems (IROS'98), </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: In RHINO's localization algorithm, grid cells whose probability are smaller than a threshold are not updated. Instead, they are represented by a single value, which uniformly represents the probability of all non-updated grid cells <ref> [14] </ref>. In the museum exhibit, the threshold was set to 0.1% of the a priori position probability. This led to an average savings of two orders of magnitude while not reducing the accuracy of the localization algorithm in any noticeable way. Bonn.
Reference: [15] <author> W. Burgard, D. Fox, D. Hennig, and T. Schmidt. </author> <title> Estimating the absolute position of a mobile robot using position probability grids. </title> <booktitle> In Proc. of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 896901, </pages> <year> 1996. </year>
Reference-contexts: In addition, probability theory provides nice and elegant ways to integrate evidence from multiple sources over time, and to make optimal decisions under uncertainty. Recently, probabilistic methods have been employed in a variety of successful mobile robots <ref> [15, 57, 65, 100, 120] </ref>, for reasons similar to the ones given here. 2. Resource flexibility. Most of RHINO's software can adapt to the available computational resources. <p> RHINO employs a variant of Markov localization, which is a probabilistic method for robot localization <ref> [15, 65, 100, 120, 125] </ref>. Its input is a stream of sensor readings from the robot's proximity sensors, interleaved with a sequence of action commands. <p> Since the motion model does not depend on t, we will henceforth denote it by P (~ j ~ 0 ; o). In our implementation, P (~ j ~ 0 ; o) is realized using a mixture of two independent, zero-centered distributions, which model rotational and translational error, respectively <ref> [15, 128] </ref>. The width of these distributions are proportional to the length of the Experiences with an Interactive Museum Tour-Guide Robot 9 1. Initialization: P (~) Bel pri (~ (0) ) 2. <p> Here the time index is omitted, to emphasize the incremental nature of the algorithm. In experimental tests this method has been demonstrated to localize the robot reliably in static environ ments even if it does not have any prior knowledge about the robot's position <ref> [15, 16, 43] </ref>. Recently, different variants of Markov localization have been developed [15, 65, 100, 120]. These methods can be roughly distinguished by the nature of the state space representation. <p> In experimental tests this method has been demonstrated to localize the robot reliably in static environ ments even if it does not have any prior knowledge about the robot's position [15, 16, 43]. Recently, different variants of Markov localization have been developed <ref> [15, 65, 100, 120] </ref>. These methods can be roughly distinguished by the nature of the state space representation. Virtually all published implementations of Markov localization are based on coarse-grained representations of space, often with a spatial resolution of less than one meter and an angular resolution of 90 degrees. <p> Unfortunately, coarse-grained, topological representations are insufficient for navigating in the close vicinity of invisible (but known) obstacles, such as the glass cages described above. Thus, RHINO's localization algorithm differs from previous approaches in that it employs a fine-grained, grid-based decomposition of the state space <ref> [15] </ref>. In all our experiments reported here, the spatial resolution was 15cm and the angular distribution was 2 ffi . The advantage of this approach is that it provides a high accuracy with respect to the position and orientation of the robot. <p> These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty <ref> [15, 65, 100, 120] </ref>. Global approaches have two important advantages over local ones: First, the initial location of the robot does not have to be specified and, second, they provide an additional level of robustness, due to their ability to recover from localization failures.
Reference: [16] <author> W. Burgard, D. Fox, and S. Thrun. </author> <title> Active mobile robot localization. </title> <booktitle> In Proc. of the Fifteenth International Conference on Artificial Intelligence (IJCAI-97), </booktitle> <year> 1997. </year>
Reference-contexts: Here the time index is omitted, to emphasize the incremental nature of the algorithm. In experimental tests this method has been demonstrated to localize the robot reliably in static environ ments even if it does not have any prior knowledge about the robot's position <ref> [15, 16, 43] </ref>. Recently, different variants of Markov localization have been developed [15, 65, 100, 120]. These methods can be roughly distinguished by the nature of the state space representation.
Reference: [17] <author> J. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: Motion planning for holonomic mobile robots is usually performed in 2D, ignoring costs of rotation and the dynamics of the robot. Such a methodology yields only sub-optimal results, but greatly reduces the complexity of motion planning, which is known to be exponential in the number of degrees of freedom <ref> [17, 106] </ref>. A popular algorithm for robot motion planning is A* [99], which bears close resemblance to the value iteration approach proposed here (see [71]).
Reference: [18] <author> K. Capek. R.U.R. </author> <title> (Rossum's Universal Robots). Out of print, </title> <year> 1921. </year>
Reference-contexts: 1 Introduction Ever since novelist Karel Capek and science fiction author Isaak Asimov invented the term robot <ref> [1, 2, 18] </ref>, the dream of building robotswilling, intelligent and human-like machines that make life pleasant by doing the type work we don't like to dohas been an active dream in people's minds.
Reference: [19] <author> J.G. Carbonell, C.A. Knoblock, and S. Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. Van Lehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <year> 1990. </year>
Reference-contexts: While SHAKEY was a milestone in the history of mobile robotics, it suffered from a lack of robustness on the low-level side, making it too brittle to operate in domains as dynamic as the one considered in this paper. More recently, Haigh integrated PRODIGY <ref> [19] </ref> with a suite of low-level software developed for CMU's XAVIER project [119]. Her system, called ROUGE [55], uses PRODIGY to generate cost-optimal motion plans for XAVIER, a robot navigating in the corridors of an office building.
Reference: [20] <author> G.C. Casella and R.L. Berger. </author> <title> Statistical Inference. </title> <publisher> Wadsworth & Brooks, </publisher> <address> Pacific Grove, CA, </address> <year> 1990. </year>
Reference-contexts: The specific filter used in our implementation is called entropy gain filter and works as follows. The entropy H (P ) of a distribution P is defined by <ref> [20] </ref> H (P ) = P (~) log P (~) d~: (12) Entropy is a measure of uncertainty: The larger the entropy, the higher the robot's uncertainty as to where it is. Entropy gain measures the relative change of entropy upon incorporating a sensor reading into P .
Reference: [21] <author> R. Chatila and J.-P. Laumond. </author> <title> Position referencing and consistent world modeling for mobile robots. </title> <booktitle> In Proceedings of the 1985 IEEE International Conference on Robotics and Automation, </booktitle> <year> 1985. </year>
Reference-contexts: Occupancy grids, however, are not the only approach to mobile robot mapping. Chatila and Laumond <ref> [21] </ref> proposed to represent objects by polyhedra in a global coordinate frame. Cox [29] proposed to construct probabilistic trees to represent different, alternative models of the environment. In his work, Kalman filters and Bayesian methods are used for handling uncertainty.
Reference: [22] <author> H. Choset. </author> <title> Sensor Based Motion Planning: The Hierarchical Generalized Voronoi Graph. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: In their approach, topological places are defined as points that maximize the number of equidistant obstacles (a similar idea can be found in Choset's work, who refers to such points as Experiences with an Interactive Museum Tour-Guide Robot 39 meetpoints <ref> [22, 23, 24] </ref>). Topological places are connected by arcs, which contain metric information for locally moving from one place to another. The approach disambiguates different places by local sensor information (taken at a single node or, if necessary, at a small number of neighboring nodes).
Reference: [23] <author> H. Choset, I. Konuksven, and J.W. Burdick. </author> <title> Sensor Based Planning for a Planar Rod Robot. </title> <booktitle> In Proc. IEEE/SICE/RSJ Int. Conf. on Multisensor Fusion on Multisensor Fusion and Integration for Intelligent Systems, </booktitle> <address> Washington, DC, </address> <year> 1996. </year>
Reference-contexts: In their approach, topological places are defined as points that maximize the number of equidistant obstacles (a similar idea can be found in Choset's work, who refers to such points as Experiences with an Interactive Museum Tour-Guide Robot 39 meetpoints <ref> [22, 23, 24] </ref>). Topological places are connected by arcs, which contain metric information for locally moving from one place to another. The approach disambiguates different places by local sensor information (taken at a single node or, if necessary, at a small number of neighboring nodes).
Reference: [24] <author> H. Choset, I. Konuksven, and A. Rizzi. </author> <title> Sensor Based Planning: A Control Law for Generating the Generalized Voronoi Graph. </title> <booktitle> In Submitted to Proc. IEEE Int. Advanced Robotics, </booktitle> <address> Washington, DC, </address> <year> 1996. </year>
Reference-contexts: In their approach, topological places are defined as points that maximize the number of equidistant obstacles (a similar idea can be found in Choset's work, who refers to such points as Experiences with an Interactive Museum Tour-Guide Robot 39 meetpoints <ref> [22, 23, 24] </ref>). Topological places are connected by arcs, which contain metric information for locally moving from one place to another. The approach disambiguates different places by local sensor information (taken at a single node or, if necessary, at a small number of neighboring nodes).
Reference: [25] <author> E. Chown, S. Kaplan, and D. Kortenkamp. </author> <title> Prototypes, location, and associative networks (plan): Towards a unified theory of cognitive mapping. </title> <booktitle> Cognitive Science, </booktitle> <address> 19:151, </address> <year> 1995. </year>
Reference-contexts: As a result, their approach has built fairly large topological maps. Their work also predates the work reported in [128, 130], which also employs the Baum-Welsh algorithm to interleave mapping and localization. Other topological approaches can be found in <ref> [25, 97, 131, 138] </ref>. 7.3 Collision Avoidance In the field of collision avoidance for mobile robots, potential field methods [69] are highly popular.
Reference: [26] <author> T.S. Collet and B.A. Cartwright. </author> <note> Landmark learning in bees. Journal of Comparative Physiology, </note> <month> January </month> <year> 1985. </year>
Reference-contexts: For example, the approaches of Kortenkamp and Weymouth [78] and Mataric [91] use gateways, doors, walls, and other vertical objects to determine the robot's position. The Helpmate robot uses ceiling lights to position itself [70]. Dark/bright regions and vertical edges are used in <ref> [26, 135] </ref>, and hallways, openings and doors are used by the approach described in [72, 116, 119]. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location [49, 101, 125, 126].
Reference: [27] <author> J. Connell. </author> <title> Minimalist Mobile Robotics. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1990. </year>
Reference-contexts: Typical examples of such a situations are show in Figure 25. Luckily none of these attempts succeeded. We attribute this robustness to the extensive use of methods that are non-reactive, in the sense that they did not base their decisions on the most sensor readings only, as advocated elsewhere <ref> [11, 27] </ref>. RHINO's ability to react to people proved to be one of the most entertaining aspects, which contributed enormously to its popularity.
Reference: [28] <author> I.J. Cox. </author> <title> Blanchean experiment in guidance and navigation of an autonomous robot vehicle. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(2):193204, </volume> <year> 1991. </year>
Reference: [29] <author> I.J. Cox. </author> <title> Modeling a dynamic environment using a bayesian multiple hypothesis approach. </title> <journal> Artificial Intelligence, </journal> <volume> 66:311344, </volume> <year> 1994. </year>
Reference-contexts: Occupancy grids, however, are not the only approach to mobile robot mapping. Chatila and Laumond [21] proposed to represent objects by polyhedra in a global coordinate frame. Cox <ref> [29] </ref> proposed to construct probabilistic trees to represent different, alternative models of the environment. In his work, Kalman filters and Bayesian methods are used for handling uncertainty.
Reference: [30] <author> I.J. Cox and G.T. Wilfong, </author> <title> editors. Autonomous Robot Vehicles. </title> <publisher> Springer Verlag, </publisher> <year> 1990. </year> <title> Experiences with an Interactive Museum Tour-Guide Robot 49 </title>
Reference-contexts: Kids often followed the robot for more than an hour. According to the director of the museum, RHINO raised the overall attendance by at least 50%. 7 Related Work 7.1 Localization Mobile robot localization has frequently been recognized as a key problem in robotics with significant practical importance. Cox <ref> [30] </ref> noted that Using sensory information to locate the robot in its environment is the most fundamental problem to providing a mobile robot with autonomous capabilities. A recent book by Borenstein, Everett, and Feng [8] provides an excellent overview of the state-of-the-art in localization.
Reference: [31] <author> G. de Giacomo and H. J. Levesque. </author> <title> An incremental interpreter for high-level programs with sensing. </title> <booktitle> In AAAI 1998 Fall Symposium on Cognitive Robotics, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: For example, the action goto (exhibit) involves a collection of low-level control directives, such as setting track-points for the cameras, setting target locations for the motion planner, turning 2 In recent work, which was not available when RHINO's software was developed, extensions of GOLOG were proposed which address these shortcomings <ref> [31, 32, 81] </ref>. Experiences with an Interactive Museum Tour-Guide Robot 29 the robot towards the exhibit after arrival, etc. While in principle, GOLOG can cope with any granularity, dealing with low-level action sequencing at the most abstract level would make GOLOG programs cumbersome and difficult to understand.
Reference: [32] <author> G. De Giacomo, R. Reiter, and M. Soutchanski. </author> <title> Execution monitoring of high-level robot programs. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proceedings of the Sixth International Conference (KR'98), </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: For example, the action goto (exhibit) involves a collection of low-level control directives, such as setting track-points for the cameras, setting target locations for the motion planner, turning 2 In recent work, which was not available when RHINO's software was developed, extensions of GOLOG were proposed which address these shortcomings <ref> [31, 32, 81] </ref>. Experiences with an Interactive Museum Tour-Guide Robot 29 the robot towards the exhibit after arrival, etc. While in principle, GOLOG can cope with any granularity, dealing with low-level action sequencing at the most abstract level would make GOLOG programs cumbersome and difficult to understand.
Reference: [33] <author> T. L. Dean and M. Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceeding of Seventh National Conference on Artificial Intelligence AAAI-92, </booktitle> <pages> pages 4954, </pages> <address> Menlo Park, CA, 1988. </address> <publisher> AAAI, AAAI Press/The MIT Press. </publisher>
Reference-contexts: The more processing cycles are available, however, the more accurate, or optimal, the result. In RHINO's software, resource flexibility is achieved by two mechanisms: selective data processing and any-time algorithms <ref> [33] </ref>. Some modules consider only a subset of the available data, such as the localization routine. Other modules, such as the motion planning module, can quickly draft initial solutions which are then refined incrementally, so that an answer is available when needed. 3. Distributed, asynchronous processing with decentralized decision making. <p> Notice that the bounding box bears similarity to prioritized sweeping [95]. Value iteration is a very general procedure, which has several properties that make it attrac tive for real-time mobile robot navigation: * Any-time algorithm. Value iteration can be understood as an any-time planner <ref> [33] </ref>, since it allows the generation of a robot action at (almost) any time, long before value iteration has converged. It allows the robot to move in real-time, even though some of its motion commands might be sub-optimal. * Full exception handling. Value iteration pre-plans for arbitrary robot locations.
Reference: [34] <author> A. Elfes. </author> <title> Sonar-based real-world mapping and navigation. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-3(3):249265, </volume> <month> June </month> <year> 1987. </year>
Reference-contexts: As a result, the robot blew its horn whenever humans blocked its path; an effect, that most visitors found highly entertaining. 3.2 Mapping The problem of mapping is the problem of estimating the occupancy of all hx; yi locations in the environment <ref> [7, 34, 96, 127] </ref> from sensor data. Mapping is essential if the environment changes over time, specifically if entire passages can be blocked. In the museum, stools or people often blocked certain regions or passages for extended durations of time. <p> Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec <ref> [34, 35, 96] </ref> and since been adopted in numerous robotic systems (e.g., [10, 12, 53, 112, 136, 137]). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition.
Reference: [35] <author> A. Elfes. </author> <title> Occupancy Grids: A Probabilistic Framework for Robot Perception and Navigation. </title> <type> PhD thesis, </type> <institution> Department of Electrical and Computer Engineering, Carnegie Mellon University, </institution> <year> 1989. </year>
Reference-contexts: Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec <ref> [34, 35, 96] </ref> and since been adopted in numerous robotic systems (e.g., [10, 12, 53, 112, 136, 137]). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition.
Reference: [36] <author> H. Endres, W. Feiten, and G. Lawitzky. </author> <title> Field test of a navigation system: </title> <booktitle> Autonomous cleaning in supermarkets. In Proc. of the 1998 IEEE International Conference on Robotics & Automation (ICRA 98), </booktitle> <year> 1998. </year>
Reference-contexts: A good survey of fielded systems is provided in a recent book by Schraft and Schmierer [113]. For example, Siemens Corp. (Germany) has recently developed a mobile cleaning robot, which it successfully deployed in a supermarket <ref> [36] </ref>. Unfortunately, much of their technology is proprietary. The robot differs from RHINO in that does not interact with people; it also moves at much lower speed.
Reference: [37] <author> S. Engelson. </author> <title> Passive Map Learning and Visual Place Recognition. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Yale University, </institution> <year> 1994. </year>
Reference-contexts: Of particular interest in this paper is the latter case, since the robot was often placed somewhere in the museum without initial knowledge of its position. Thus, the robot had to localize itself under global uncertainty, a problem also known as global localization or the kidnaped robot problem <ref> [37] </ref>. 3.1.2 Robot Perception Suppose at time t, the robot receives a sensor measurement o (t) . In RHINO's localization module, o (t) is either a laser scan or a sonar scan. <p> Probably the most popular method for tracking a robot's position is Kalman filtering [51, 52, 88, 92, 110, 121], which represent uncertainty by single-modal distributions. These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem <ref> [37] </ref>. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty [15, 65, 100, 120].
Reference: [38] <author> H.R. Everett, D.W. Gage, G.A. Gilbreth, R.T. Laird, and R.P. Smurlo. </author> <title> Real-world issues in warehouse navigation. </title> <booktitle> In Proceedings of the SPIE Conference on Mobile Robots IX, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1994. </year> <note> Volume 2352. </note>
Reference-contexts: Finally, most existing approaches are restricted in the type features that they consider. Many approaches reviewed in [8], a recent book on this topic, are limited in that they require modifications of the environment. Some require artificial landmarks such as bar-code reflectors <ref> [38] </ref>, reflecting tape, ultrasonic beacons, or visual patterns that are easy to recognize, such as black rectangles with white dots [7]. Of course, modifying the environment is not an option in many application domains.
Reference: [39] <author> C. Fedor. TCX. </author> <title> An interprocess communication system for building robotic architectures. Programmer's guide to version 10.xx. </title> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> 12 </month> <year> 1993. </year>
Reference-contexts: The software modules communicate using TCX <ref> [39] </ref>, a decentralized communication protocol for point-to-point socket communication. Figure 3 shows the overall software architecture along with the major software modules and the flow of information between them.
Reference: [40] <author> R.J. Firby, R.E. Kahn, P.N. Prokopowicz, and M.J. Swain. </author> <title> An architecture for active vision and action. </title> <booktitle> In Proceedings of IJCAI-95, </booktitle> <pages> pages 7279, </pages> <year> 1995. </year>
Reference-contexts: Unfortunately, the complexity of the domain does not permit efficient planning even if today's best POMDP algorithms were employed. 7.5 Task Planning and Control Recent research has produced a variety of frameworks for task-level control (see e.g., <ref> [40, 117] </ref> and various chapters in [75]). To our knowledge, GOLOG is unique in its seamless integration of a programming language and a powerful theorem prover for planning. Other special-purpose programming languages for mobile robots, such as COLBERT [73], do not feature built-in problem solvers. <p> In a similar effort, Kahn and colleagues [67] developed a gesture-based interface which has been demonstrated to reliably recognize static arm poses (pose gestures) such as pointing. This interface was successfully integrated into Firby's reactive plan-execution system RAP <ref> [40] </ref>, where it enabled people to instruct a robot to pick up free-standing objects. A recent paper by Waldherr and colleagues [133] extends these approaches to dynamic gestures, i.e., gestures which are defined through motion, not just poses.
Reference: [41] <author> D. Fox, W. Burgard, and S. Thrun. </author> <title> Controlling synchro-drive robots with the dynamic window approach to collision avoidance. </title> <booktitle> In Proc. of the IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <year> 1996. </year>
Reference-contexts: However, to operate robots safely at higher speeds (such as walking speed), it is necessary to take the robot dynamics into account. Both the dynamic window approach <ref> [12, 41] </ref> and the curvature velocity method [118], which despite their similarity were developed independently, are designed to deal with the dynamics of mobile robots. To deal with obstacles that cannot be detected by the robot's sensors it is necessary to integrate model-based information into reactive collision avoidance.
Reference: [42] <author> D. Fox, W. Burgard, and S. Thrun. </author> <title> The dynamic window approach to collision avoidance. </title> <journal> IEEE Robotics and Automation Magazine, </journal> <year> 1997. </year>
Reference-contexts: Inability to handle invisible obstacles. Virtually all existing methods for collision avoidance are purely sensor-based, i.e., they only consult the robot's sensors to determine collision-free motion <ref> [10, 42, 62, 68, 69, 118] </ref>. If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics. <p> If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics. With few exceptions <ref> [42, 118] </ref>, existing approaches model only the kinematics of the robot and ignore dynamic effects such as inertia. At lower speeds (such as 20 cm/sec), the dynamics of mobile robots can safely be ignored. <p> To ensure safe motion at high speed, constraints imposed by the robot's dynamics are explicitly considered. 4.1.1 The Dynamic Window Algorithm The key idea of DWA is to choose control directly in the velocity space of the robot, that is the translational and rotational velocity. As shown in <ref> [42] </ref>, robots with fixed velocity always travel on a circular trajectory whose diameter is determined by the ratio of translational and rotational velocity.
Reference: [43] <author> D. Fox, W. Burgard, and S. Thrun. </author> <title> Active markov localization for mobile robots. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <year> 1998. </year> <note> Accepted for publication. </note>
Reference-contexts: Here the time index is omitted, to emphasize the incremental nature of the algorithm. In experimental tests this method has been demonstrated to localize the robot reliably in static environ ments even if it does not have any prior knowledge about the robot's position <ref> [15, 16, 43] </ref>. Recently, different variants of Markov localization have been developed [15, 65, 100, 120]. These methods can be roughly distinguished by the nature of the state space representation.
Reference: [44] <author> D. Fox, W. Burgard, S. Thrun, </author> <title> and A.B. Cremers. A hybrid collision avoidance method for mobile robots. </title> <booktitle> In Proc. of the IEEE International Conference on Robotics and Automation, </booktitle> <address> Leuven, Belgium, </address> <year> 1998. </year>
Reference-contexts: Since one of the requirements in the museum was to operate at walking speed, it was essential that the robot's dynamics were taken into account. RHINO's collision avoidance module, which is called DWA (short for: model-based dynamic window algorithm), specifically addresses these limitations <ref> [44] </ref>. DWA consults a hand-supplied map of the environment to avoid collisions with obstacles that cannot be sensed. The map is also used to bound the area in which the robot operates.
Reference: [45] <author> D. Fox, W. Burgard, S. Thrun, </author> <title> and A.B. Cremers. Position estimation for mobile robots in dynamic environments. </title> <booktitle> In Proc.of the Fifteenth National Conference on Artificial Intelligence, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Throughout the complete deployment period, the robot incorporated sufficiently many sensor readings to never lose track of its position. Using the data gathered in the museum, we evaluated the accuracy of our localization algorithm systematically using 118 reference positions, whose coordinates were determined manually <ref> [45] </ref>. <p> In this data set, more than 50% of all sensor readings were corrupted by people for longer periods of time. The average localization error was found to be smaller than 10cm <ref> [45] </ref>. In only one case did we observe some noticeable error. Here the robot's internal belief deviated approximately 30cm from the real position. As a result, the robot touched a large, invisible metal plate in the center of the museum. <p> A successor of the entropy gain filter, which combines the advantages of entropy gain filters while still retaining the ability to globally localize the robot, is described in <ref> [45] </ref>. <p> RHINO's approach, by filtering out sensor data, has been demonstrated to function even in highly dynamic environments. The results obtained in the museum illustrate that it is capable of reliably localizing a robot even if more than 50% of all sensor readings are corrupted by people (see also <ref> [45] </ref>). Finally, most existing approaches are restricted in the type features that they consider. Many approaches reviewed in [8], a recent book on this topic, are limited in that they require modifications of the environment. <p> Unfortunately, the authors do not discuss the problem of robot dynamics and uncertain position estimation. Furthermore it is not clear how the static model of the environment is combined with the fast-changing information obtained on-the-fly. RHINO's current method, called DWA <ref> [45] </ref>, is specifically designed for environments where not all obstacles can be perceived, guaranteeing safe navigation with high probability even if the robot is not certain as to where it is. <p> As noted above, once the robot has lost track of its position entirelywhich luckily never happened in the museum, the entropy gain filter may filter out all authentic sensor readings, making it impossible for the robot to re-localize itself. Recently, we proposed novelty filters <ref> [45] </ref>, an extension of entropy gain filters that takes into account the nature of the surprise in a sensor reading.
Reference: [46] <author> T. Fukuda, S. Ito, N. Oota, F. Arai, Y. Abe, K. Tanake, and Y. Tanaka. </author> <title> Navigation system based on ceiling landmark recognition for autonomous mobile robot. </title> <booktitle> In Proc. Int'l Conference on Industrial Electronics Control and Instrumentation (IECON'93), </booktitle> <volume> volume 1, </volume> <pages> pages 1466 1471, </pages> <year> 1993. </year>
Reference: [47] <author> K. Goldberg, M. Mascha, S. Gentner, N. Rothenberg, C. Sutter, and J. Wiegley. </author> <title> Desktop tele-operation via the world wide web. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <year> 1995. </year>
Reference-contexts: Users command both robots at an abstract level, and the low-level navigation software ensures the robot's safety. Others have designed interfaces for the control of robot arms. The MERCURY system <ref> [47] </ref>, which started its operation in 1994, was one of the first tele-operated manipulators on the Web. It enabled Web users to excavate artifacts buried in a sand-filled terrarium. This system required users to assume exclusive control over the manipulator.
Reference: [48] <author> K. Goldberg, J. Santarromana, G. Bekey, S. Gentner, R. Morris, J. Wiegley, and E. Berger. </author> <booktitle> The telegarden. In Proc. of ACM SIGGRAPH, </booktitle> <year> 1995. </year> <title> 50 Experiences with an Interactive Museum Tour-Guide Robot </title>
Reference-contexts: It enabled Web users to excavate artifacts buried in a sand-filled terrarium. This system required users to assume exclusive control over the manipulator. The TELE-GARDEN, successor of MERCURY, enabled people to plant flowers <ref> [48] </ref>. Just like RHINO, this system was able to coordinate requests by multiple users. The Mechanical Gaze Project [102] enables visitors of a museum to examine exhibits from various viewpoints, and with different distances.
Reference: [49] <author> R. Greiner and R. Isukapalli. </author> <title> Learning to select useful landmarks. </title> <booktitle> In Proceedings of 1994 AAAI Conference, </booktitle> <pages> pages 12511256, </pages> <address> Menlo Park, CA, 1994. </address> <publisher> AAAI Press / The MIT Press. </publisher>
Reference-contexts: Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in [72, 116, 119]. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location <ref> [49, 101, 125, 126] </ref>. These are just a few representative examples of many different features used for localization. 38 Experiences with an Interactive Museum Tour-Guide Robot RHINO's approach differs from all these approaches in that it does not extract predefined features from the sensor values.
Reference: [50] <author> J.-S. Gutmann. </author> <title> Vergleich von Algorithmen zur Selbstlokalisierung eines mobilen Roboters. </title> <type> Master's thesis, </type> <institution> University of Ulm, Ulm, Germany, </institution> <year> 1996. </year> <note> In German. </note>
Reference-contexts: After appropriate training [90, 94, 127], the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. In conjunction with any of the approaches presented in <ref> [50, 51, 88, 123, 127, 128, 130] </ref>, the mapping algorithm is powerful enough to generate consistent maps from scratch. Two example maps are shown in Figure 11. <p> Chatila and Laumond [21] proposed to represent objects by polyhedra in a global coordinate frame. Cox [29] proposed to construct probabilistic trees to represent different, alternative models of the environment. In his work, Kalman filters and Bayesian methods are used for handling uncertainty. Lu, Milios and Gutmann <ref> [50, 88, 89] </ref> presented an approach that memorizes raw proximity sensor data in a metric coordinate system, using an alignment procedure that extracts lines from laser range finer data.
Reference: [51] <author> J.-S. Gutmann and B. Nebel. </author> <title> Navigation mobiler Roboter mit Laserscans. In Autonome Mobile Sys-teme. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1997. </year> <note> In German. </note>
Reference-contexts: After appropriate training [90, 94, 127], the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. In conjunction with any of the approaches presented in <ref> [50, 51, 88, 123, 127, 128, 130] </ref>, the mapping algorithm is powerful enough to generate consistent maps from scratch. Two example maps are shown in Figure 11. <p> Thus, they differ from the approach described here in that they require knowledge of the robot's initial position; and they are not able to recover from global localizing failures. Probably the most popular method for tracking a robot's position is Kalman filtering <ref> [51, 52, 88, 92, 110, 121] </ref>, which represent uncertainty by single-modal distributions. These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty [15, 65, 100, 120]. <p> Such an approach has two key advantages: First, it is more universally applicable since fewer assumptions are made on the nature of the environment; and second, it can utilize all sensor information, typically yielding more accurate results. Other approaches that process raw sensor data can be found in <ref> [51, 52, 88] </ref>. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., [10, 12, 53, 112, 136, 137]).
Reference: [52] <author> J.-S. Gutmann and C. Schlegel. AMOS: </author> <title> Comparison of scan matching approaches for self-localization in indoor environments. </title> <booktitle> In Proceedings of the 1st Euromicro Workshop on Advanced Mobile Robots. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Thus, they differ from the approach described here in that they require knowledge of the robot's initial position; and they are not able to recover from global localizing failures. Probably the most popular method for tracking a robot's position is Kalman filtering <ref> [51, 52, 88, 92, 110, 121] </ref>, which represent uncertainty by single-modal distributions. These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty [15, 65, 100, 120]. <p> Such an approach has two key advantages: First, it is more universally applicable since fewer assumptions are made on the nature of the environment; and second, it can utilize all sensor information, typically yielding more accurate results. Other approaches that process raw sensor data can be found in <ref> [51, 52, 88] </ref>. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., [10, 12, 53, 112, 136, 137]).
Reference: [53] <author> D. Guzzoni, A. Cheyer, L. Julia, and K. Konolige. </author> <title> Many robots make short work. </title> <journal> AI Magazine, </journal> <volume> 18(1):5564, </volume> <year> 1997. </year>
Reference-contexts: Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., <ref> [10, 12, 53, 112, 136, 137] </ref>). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition.
Reference: [54] <author> D. Hahnel, W. Burgard, and G. Lakemeyer. </author> <title> GOLEX bridging the gap between logic (GOLOG) and a real robot. </title> <booktitle> In Proc. of the 22nd German Conference on Artificial Intelligence (KI'98), </booktitle> <publisher> LNCS. Springer Verlag, </publisher> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: While in principle, GOLOG can cope with any granularity, dealing with low-level action sequencing at the most abstract level would make GOLOG programs cumbersome and difficult to understand. These difficulties are overcome by an intermediate software layer, called GOLEX <ref> [54] </ref>, a runtime and execution monitoring system for GOLOG, which extends GOLOG in three aspects: * GOLEX integrates sensing and user interaction capabilities into GOLOG. It enables the programmer to formulate conditional programs.
Reference: [55] <author> K.Z. Haigh and M.M. Veloso. </author> <title> High-level planning and low-level execution: towards a complete robotic agent. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents, </booktitle> <address> Marina del Rey, CA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: More recently, Haigh integrated PRODIGY [19] with a suite of low-level software developed for CMU's XAVIER project [119]. Her system, called ROUGE <ref> [55] </ref>, uses PRODIGY to generate cost-optimal motion plans for XAVIER, a robot navigating in the corridors of an office building.
Reference: [56] <author> J. Hertz, A. Krogh, and R.G. Palmer. </author> <title> Introduction to the theory of neural computation. </title> <publisher> Addison-Wesley Pub. Co., </publisher> <address> Redwood City, California, </address> <year> 1991. </year>
Reference-contexts: In traditional approaches to mobile robot mapping, P (c xy j o) is usually crafted by hand, based on knowledge of the characteristics of the respective sensor. In our approach, which is described in more detail in [127], an artificial neural network is trained with BackPropagation <ref> [56, 108] </ref> to approximate P (c xy j o) from data. This interpretation network, which is shown in Figure 10a, accepts as input an encoding of a specific hx; yi-location, encoded in polar coordinates, relative to the robot's local coordinate system.
Reference: [57] <editor> J. Hertzberg and F. Kirchner. </editor> <booktitle> Landmark-based autonomous navigation in sewerage pipes. In Proc. of the First Euromicro Workshop on Advanced Mobile Robots, </booktitle> <pages> pages 6873. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: In addition, probability theory provides nice and elegant ways to integrate evidence from multiple sources over time, and to make optimal decisions under uncertainty. Recently, probabilistic methods have been employed in a variety of successful mobile robots <ref> [15, 57, 65, 100, 120] </ref>, for reasons similar to the ones given here. 2. Resource flexibility. Most of RHINO's software can adapt to the available computational resources.
Reference: [58] <author> R. Hinkel and T. Knieriemen. </author> <title> Environment perception with a laser radar in a fast moving robot. </title> <booktitle> In Proceedings of Symposium on Robot Control, pages 68.168.7, </booktitle> <address> Karlsruhe, Germany, </address> <month> October </month> <year> 1988. </year>
Reference: [59] <author> I. Horswill. Polly: </author> <title> A vision-based artificial agent. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence (AAAI-93). </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The Helpmate does not interact with people either, but it features an easy-to-use interface which enables nurses to tell the robot where to go. To the best of our knowledge, the concept of a tour-guide robot was first proposed by Horswill <ref> [59, 60] </ref>, who built a robot that guided visitors through the AI Lab at MIT. This robot, designed to demonstrate Horswill's fast vision routines, did not require modifications of the environment, just like RHINO.
Reference: [60] <author> I. Horswill. </author> <title> Specialization of perceptual processes. </title> <type> Technical Report AI TR-1511, </type> <institution> MIT, AI Lab, </institution> <address> Cambridge, MA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Localization plays a key role in various successful mobile robot architectures [28, 46, 58, 72, 83, 84, 98, 104, 107, 110, 120, 119, 134] and various chapters in [75]. While some localization approaches, such as those described in <ref> [60, 78, 120] </ref> localize the robot relative to some landmarks in a topological map, RHINO's approach localizes the robot in a metric space, just like those methods proposed in [5, 125, 128]. <p> The Helpmate does not interact with people either, but it features an easy-to-use interface which enables nurses to tell the robot where to go. To the best of our knowledge, the concept of a tour-guide robot was first proposed by Horswill <ref> [59, 60] </ref>, who built a robot that guided visitors through the AI Lab at MIT. This robot, designed to demonstrate Horswill's fast vision routines, did not require modifications of the environment, just like RHINO.
Reference: [61] <author> R. A. Howard. </author> <title> Dynamic Programming and Markov Processes. </title> <publisher> MIT Press and Wiley, </publisher> <year> 1960. </year>
Reference-contexts: The cost for traversing a grid cell hx; yi is proportional to its occupancy value P (c int xy ) (cf. Equation (23)). The minimum-cost path is computed using a modified version of value iteration, a popular dynamic programming algorithm <ref> [4, 61] </ref>: 1. Initialization.
Reference: [62] <author> H. Hu and M. Brady. </author> <title> A Bayesian approach to real-time obstacle avoidance for a mobile robot. </title> <booktitle> In Autonomous Robots, </booktitle> <volume> volume 1, </volume> <pages> pages 6992. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: Inability to handle invisible obstacles. Virtually all existing methods for collision avoidance are purely sensor-based, i.e., they only consult the robot's sensors to determine collision-free motion <ref> [10, 42, 62, 68, 69, 118] </ref>. If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics.
Reference: [63] <author> E. Huber and D. Kortenkamp. </author> <title> Using stereo vision to pursue moving agents with a mobile robot. </title> <booktitle> In Proceedings of IEEE International Conference on Robotics and Automation, </booktitle> <year> 1995. </year>
Reference-contexts: Here more than half of all sensor readings were corrupted by people; yet the robot managed to keep its average localization error below 10 cm. approaches in the literature on people detection <ref> [63, 67] </ref> in that it can find people who do not move, and even while the robot itself is in motion.
Reference: [64] <author> T. Jaakkola95a, S.P. Singh, and M.I. Jordan. </author> <title> Reinforcement learning algorithm for partially observable decision problems. </title> <editor> In G. Tesauro, D. Touretzky, and T. Leen, editors, </editor> <booktitle> Advances in Neural Information Processing Systems 7, </booktitle> <address> Cambridge, MA, 1995. </address> <publisher> MIT Press. </publisher>
Reference-contexts: This work usually does not exploit the highly geometric nature of robot motion planning, and is therefore not directly applicable. State-based representations, such as the one used here, are commonly used in the literature on partially observable Markov decision processes (POMDPs) <ref> [64, 66, 87] </ref>. POMDPs are the mathematically the most appropriate framework to formulate the motion planning problem, since they can encompass uncertainty both in the map and the robot's location.
Reference: [65] <author> L.P. Kaelbling, A.R. Cassandra, and J.A. Kurien. </author> <title> Acting under uncertainty: Discrete Bayesian models for mobile-robot navigation. </title> <booktitle> In Proc. of the IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <year> 1996. </year>
Reference-contexts: In addition, probability theory provides nice and elegant ways to integrate evidence from multiple sources over time, and to make optimal decisions under uncertainty. Recently, probabilistic methods have been employed in a variety of successful mobile robots <ref> [15, 57, 65, 100, 120] </ref>, for reasons similar to the ones given here. 2. Resource flexibility. Most of RHINO's software can adapt to the available computational resources. <p> RHINO employs a variant of Markov localization, which is a probabilistic method for robot localization <ref> [15, 65, 100, 120, 125] </ref>. Its input is a stream of sensor readings from the robot's proximity sensors, interleaved with a sequence of action commands. <p> In experimental tests this method has been demonstrated to localize the robot reliably in static environ ments even if it does not have any prior knowledge about the robot's position [15, 16, 43]. Recently, different variants of Markov localization have been developed <ref> [15, 65, 100, 120] </ref>. These methods can be roughly distinguished by the nature of the state space representation. Virtually all published implementations of Markov localization are based on coarse-grained representations of space, often with a spatial resolution of less than one meter and an angular resolution of 90 degrees. <p> These methods can be roughly distinguished by the nature of the state space representation. Virtually all published implementations of Markov localization are based on coarse-grained representations of space, often with a spatial resolution of less than one meter and an angular resolution of 90 degrees. For example, in <ref> [65, 100, 120] </ref> Markov localization is used for landmark-based corridor navigation and the state space is organized according to the topological structure of the environment. Unfortunately, coarse-grained, topological representations are insufficient for navigating in the close vicinity of invisible (but known) obstacles, such as the glass cages described above. <p> These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty <ref> [15, 65, 100, 120] </ref>. Global approaches have two important advantages over local ones: First, the initial location of the robot does not have to be specified and, second, they provide an additional level of robustness, due to their ability to recover from localization failures.
Reference: [66] <author> L.P. Kaelbling, </author> <title> M.L. Littman, and A.R. Cassandra. Planning and acting in partially observable stochastic domains. </title> <year> 1996. </year>
Reference-contexts: This work usually does not exploit the highly geometric nature of robot motion planning, and is therefore not directly applicable. State-based representations, such as the one used here, are commonly used in the literature on partially observable Markov decision processes (POMDPs) <ref> [64, 66, 87] </ref>. POMDPs are the mathematically the most appropriate framework to formulate the motion planning problem, since they can encompass uncertainty both in the map and the robot's location.
Reference: [67] <author> R.E. Kahn, M.J. Swain, </author> <title> P.N. Prokopowicz, and R.J. Firby. Gesture recognition using the perseus architecture. </title> <booktitle> In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, </booktitle> <pages> pages 734741, </pages> <address> San Francisco, CA, </address> <year> 1996. </year> <title> Experiences with an Interactive Museum Tour-Guide Robot 51 </title>
Reference-contexts: Here more than half of all sensor readings were corrupted by people; yet the robot managed to keep its average localization error below 10 cm. approaches in the literature on people detection <ref> [63, 67] </ref> in that it can find people who do not move, and even while the robot itself is in motion. <p> For example, Kortenkamp and colleagues [76] recently developed a gesture-based interface, which is capable of recognizing arm poses such as pointing towards a location on the ground. In a similar effort, Kahn and colleagues <ref> [67] </ref> developed a gesture-based interface which has been demonstrated to reliably recognize static arm poses (pose gestures) such as pointing. This interface was successfully integrated into Firby's reactive plan-execution system RAP [40], where it enabled people to instruct a robot to pick up free-standing objects.
Reference: [68] <author> M. Khatib and R. Chatila. </author> <title> An extended potential field approach for mobile robot sensor-based motions. </title> <booktitle> In Proc. International Conference on Intelligent Autonomous Systems (IAS'4), </booktitle> <year> 1995. </year>
Reference-contexts: Inability to handle invisible obstacles. Virtually all existing methods for collision avoidance are purely sensor-based, i.e., they only consult the robot's sensors to determine collision-free motion <ref> [10, 42, 62, 68, 69, 118] </ref>. If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics. <p> An extended version of the potential field approach is introduced in <ref> [68] </ref>.
Reference: [69] <author> O. Khatib. </author> <title> Real-time obstacle avoidance for robot manipulator and mobile robots. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 5(1):9098, </volume> <year> 1986. </year>
Reference-contexts: Inability to handle invisible obstacles. Virtually all existing methods for collision avoidance are purely sensor-based, i.e., they only consult the robot's sensors to determine collision-free motion <ref> [10, 42, 62, 68, 69, 118] </ref>. If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics. <p> Their work also predates the work reported in [128, 130], which also employs the Baum-Welsh algorithm to interleave mapping and localization. Other topological approaches can be found in [25, 97, 131, 138]. 7.3 Collision Avoidance In the field of collision avoidance for mobile robots, potential field methods <ref> [69] </ref> are highly popular. They determine the steering direction of the robot by (hypothetically) assuming that obstacles assert negative forces on the robot and that the target location asserts a positive force.
Reference: [70] <author> S. King and C. Weiman. </author> <title> Helpmate autonomous mobile robot navigation system. </title> <booktitle> In Proceedings of the SPIE Conference on Mobile Robots, pages 190198, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1990. </year> <note> Volume 2352. </note>
Reference-contexts: In addition, the vast majority of approaches differ from the method described here in that they can only cope with static environments, that is, environments that do not possess measurable state other than the robot's location. These approaches are typically brittle in dynamic environments. The approach described in <ref> [70] </ref> uses cameras pointed towards the ceiling and thus cannot perceive most of the changes that occur in typical office environments. Unfortunately, such an approach is only applicable if the ceiling contains enough structure for accurate position estimation. <p> For example, the approaches of Kortenkamp and Weymouth [78] and Mataric [91] use gateways, doors, walls, and other vertical objects to determine the robot's position. The Helpmate robot uses ceiling lights to position itself <ref> [70] </ref>. Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in [72, 116, 119]. <p> We suspect that the basic soft Experiences with an Interactive Museum Tour-Guide Robot 43 ware architecture is similar to the one used by RHINO. A second, prominent example of a successfully deployed robot is Helpmate Inc.'s Helpmate robot <ref> [70] </ref>. This robot has been deployed at dozens of hospitals worldwide, where it carries food and other items through hospital corridors. The Helpmate does not interact with people either, but it features an easy-to-use interface which enables nurses to tell the robot where to go.
Reference: [71] <author> S. Koenig. </author> <title> The complexity of real-time search. </title> <type> Technical Report CMU-CS-92-145, </type> <institution> Carnegie Mellon University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: A popular algorithm for robot motion planning is A* [99], which bears close resemblance to the value iteration approach proposed here (see <ref> [71] </ref>). Both approaches can be Experiences with an Interactive Museum Tour-Guide Robot 41 used to find shortest paths to multiple goals, and they also generate values for arbitrary locations, facilitating rapid replanning in the face of unexpected events.
Reference: [72] <author> S. Koenig and R. Simmons. </author> <title> Passive distance learning for robot navigation. </title> <editor> In L. Saitta, editor, </editor> <booktitle> Proceedings of the Thirteenth International Conference on Machine Learning, </booktitle> <year> 1996. </year>
Reference-contexts: The Helpmate robot uses ceiling lights to position itself [70]. Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in <ref> [72, 116, 119] </ref>. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location [49, 101, 125, 126]. <p> Shatkay and Kaelbling proposed a method that learns topological map from landmark observations [115]. Their work extends work by Koenig and Simmons <ref> [72] </ref>, who investigated the problem of learning topological maps if a topological sketch of the environment is readily available. In Shatkay and Kaelbling's work, no such assumption is made. Their approach considers local topological information along with landmark label information (which is assumed to be observable), to disambiguate different locations.
Reference: [73] <author> K. Konolige. Colbert: </author> <title> A language for reactive control in saphira. </title> <booktitle> In KI-97: Advances in Artificial Intelligence, </booktitle> <publisher> LNAI, </publisher> <pages> pages 3152. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: To our knowledge, GOLOG is unique in its seamless integration of a programming language and a powerful theorem prover for planning. Other special-purpose programming languages for mobile robots, such as COLBERT <ref> [73] </ref>, do not feature built-in problem solvers. COLBERT also stays below the level of abstraction of GOLOG in that it is designed to deal with raw sensor input and motor commands.
Reference: [74] <author> Y. Koren and J. Borenstein. </author> <title> Potential field methods and their inherent limitations for mobile robot navigation. </title> <booktitle> In Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: By restricting the field of view to the close vicinity of the robot, these methods are computationally highly efficient. While the physical analogy of considering the robot as a free-flying object is attractive, Borenstein and Koren <ref> [74] </ref> identified that in practice, such methods often fail to find trajectories between narrowly spaced obstacles; they also can produce oscillatory behavior in narrow corridors. An extended version of the potential field approach is introduced in [68].
Reference: [75] <author> D. Kortenkamp, R.P. Bonassi, and R. Murphy, </author> <title> editors. AI-based Mobile Robots: Case studies of successful robot systems, </title> <address> Cambridge, MA, 1998. </address> <publisher> MIT Press. </publisher>
Reference-contexts: The task control module coordinates the various robot activities related to motion and interaction. For example, it determines the sequence at which exhibits are visited during a tour, and it also determines the sequence of steps involved in the dialogue with the user. The hierarchical organization is fairly classical <ref> [75] </ref>. Each module has its own way to monitor the execution and react accordingly. <p> A recent book by Borenstein, Everett, and Feng [8] provides an excellent overview of the state-of-the-art in localization. Localization plays a key role in various successful mobile robot architectures [28, 46, 58, 72, 83, 84, 98, 104, 107, 110, 120, 119, 134] and various chapters in <ref> [75] </ref>. While some localization approaches, such as those described in [60, 78, 120] localize the robot relative to some landmarks in a topological map, RHINO's approach localizes the robot in a metric space, just like those methods proposed in [5, 125, 128]. <p> Unfortunately, the complexity of the domain does not permit efficient planning even if today's best POMDP algorithms were employed. 7.5 Task Planning and Control Recent research has produced a variety of frameworks for task-level control (see e.g., [40, 117] and various chapters in <ref> [75] </ref>). To our knowledge, GOLOG is unique in its seamless integration of a programming language and a powerful theorem prover for planning. Other special-purpose programming languages for mobile robots, such as COLBERT [73], do not feature built-in problem solvers. <p> We believe that we currently lack a convincing methodology for intuitive human robot interaction. 7.7 Integrations and Applications Various researchers have devised integrated systems similar to the one described here <ref> [75, 113] </ref>. A good survey of fielded systems is provided in a recent book by Schraft and Schmierer [113]. For example, Siemens Corp. (Germany) has recently developed a mobile cleaning robot, which it successfully deployed in a supermarket [36]. Unfortunately, much of their technology is proprietary.
Reference: [76] <author> D. Kortenkamp, E. Huber, and P. Bonassi. </author> <title> Recognizing and interpreting gestures on a mobile robot. </title> <booktitle> In Proceedings of AAAI-96, </booktitle> <pages> pages 915921. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: They successfully instructed their office-conversant robot to navigate to office doors and other significant places in their environment, using verbal commands. Other researchers have proposed vision-based interfaces that allow people to instruct mobile robots via arm gestures. For example, Kortenkamp and colleagues <ref> [76] </ref> recently developed a gesture-based interface, which is capable of recognizing arm poses such as pointing towards a location on the ground. In a similar effort, Kahn and colleagues [67] developed a gesture-based interface which has been demonstrated to reliably recognize static arm poses (pose gestures) such as pointing.
Reference: [77] <author> D. Kortenkamp, I. Nourbakhsh, and D. Hinkle. </author> <title> The 1996 AAAI mobile robot competition and exhibition. </title> <journal> AI Magazine, </journal> <volume> 18(1):2532, </volume> <year> 1997. </year>
Reference-contexts: Lu, Milios and Gutmann [50, 88, 89] presented an approach that memorizes raw proximity sensor data in a metric coordinate system, using an alignment procedure that extracts lines from laser range finer data. Jeeves [124], an award-winning robot at the 1996 AAAI mobile robot competition <ref> [77] </ref>, constructs geometric maps incrementally by concatenating wall segments detected in temporal sequences of sonar measurements. Jeeves's design was strongly inspired by the work presented here; its inability to handle dynamic environments and its strong commitment to parallel/orthogonal walls make its software approach more brittle than the approach described here.
Reference: [78] <author> D. Kortenkamp and T. Weymouth. </author> <title> Topological mapping for mobile robots using a combination of sonar and vision sensing. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 979984, </pages> <address> Menlo Park, July 1994. </address> <publisher> AAAI, AAAI Press/MIT Press. </publisher>
Reference-contexts: Localization plays a key role in various successful mobile robot architectures [28, 46, 58, 72, 83, 84, 98, 104, 107, 110, 120, 119, 134] and various chapters in [75]. While some localization approaches, such as those described in <ref> [60, 78, 120] </ref> localize the robot relative to some landmarks in a topological map, RHINO's approach localizes the robot in a metric space, just like those methods proposed in [5, 125, 128]. <p> Of course, modifying the environment is not an option in many application domains. Some of the more advanced approaches use more natural landmarks that do not require modifications of the environment. For example, the approaches of Kortenkamp and Weymouth <ref> [78] </ref> and Mataric [91] use gateways, doors, walls, and other vertical objects to determine the robot's position. The Helpmate robot uses ceiling lights to position itself [70].
Reference: [79] <author> B. Kuipers and Y.-T. Byun. </author> <title> A robust qualitative method for spatial learning in unknown environments. </title> <booktitle> In Proceeding of Eighth National Conference on Artificial Intelligence AAAI-88, </booktitle> <address> Menlo Park, Cambridge, 1988. </address> <publisher> AAAI Press / The MIT Press. </publisher>
Reference-contexts: Often, topological graphs are enriched by local metric information to facilitate the navigation from one place to another. Among the earliest successful work in this field is an approach by Kuipers and Byun <ref> [79, 80] </ref>. In their approach, topological places are defined as points that maximize the number of equidistant obstacles (a similar idea can be found in Choset's work, who refers to such points as Experiences with an Interactive Museum Tour-Guide Robot 39 meetpoints [22, 23, 24]).
Reference: [80] <author> B. Kuipers and Y.-T. Byun. </author> <title> A robot exploration and mapping strategy based on a semantic hierarchy of spatial representations. </title> <journal> Journal of Robotics and Autonomous Systems, </journal> <volume> 8:4763, </volume> <year> 1991. </year>
Reference-contexts: Often, topological graphs are enriched by local metric information to facilitate the navigation from one place to another. Among the earliest successful work in this field is an approach by Kuipers and Byun <ref> [79, 80] </ref>. In their approach, topological places are defined as points that maximize the number of equidistant obstacles (a similar idea can be found in Choset's work, who refers to such points as Experiences with an Interactive Museum Tour-Guide Robot 39 meetpoints [22, 23, 24]).
Reference: [81] <author> G. Lakemeyer. </author> <title> On sensing and off-line interpreting in golog. </title> <booktitle> In AAAI 1998 Fall Symposium on Cognitive Robotics, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: For example, the action goto (exhibit) involves a collection of low-level control directives, such as setting track-points for the cameras, setting target locations for the motion planner, turning 2 In recent work, which was not available when RHINO's software was developed, extensions of GOLOG were proposed which address these shortcomings <ref> [31, 32, 81] </ref>. Experiences with an Interactive Museum Tour-Guide Robot 29 the robot towards the exhibit after arrival, etc. While in principle, GOLOG can cope with any granularity, dealing with low-level action sequencing at the most abstract level would make GOLOG programs cumbersome and difficult to understand.
Reference: [82] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: To the best of our knowledge, this feature is unique in the literature on mobile robot collision avoidance. 7.4 Motion Planning Robot motion planning has been subject to intense research, as documented by a large body of literature on this topic (see e.g., <ref> [82, 114] </ref>). The majority of work addresses more complicated problems than the one addressed in this article, such as motion planning in higher-dimensional and continuous space. Motion planning for holonomic mobile robots is usually performed in 2D, ignoring costs of rotation and the dynamics of the robot.
Reference: [83] <author> J.J. Leonard and H.F. Durrant-Whyte. </author> <title> Directed Sonar Sensing for Mobile Robot Navigation. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference: [84] <author> J.J. Leonard, H.F. Durrant-Whyte, and I.J. Cox. </author> <title> Dynamic map building for an autonomous mobile robot. </title> <journal> International Journal of Robotics Research, </journal> <volume> 11(4):8996, </volume> <year> 1992. </year>
Reference: [85] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming, </journal> <volume> 31:5984, </volume> <year> 1997. </year>
Reference-contexts: Internet users were able to compose tours by selecting individual tour items. Since multiple Internet users often sent commands at the same time, there was a combinatorial problem of sequencing exhibits appropriately. RHINO's task control monitor is an augmented version of GOLOG, which has been described in depth elsewhere <ref> [85] </ref>. GOLOG is a first-order logical language that represents knowledge in the situation calculus [86]. It uses a built-in theorem prover to generate plans and to verify their correctness [93]. <p> ; explain (exhibit) endWhile goto (parking-position) endProc proc goto (loc) if robotLocation (robotloc) ^ robotloc 6= loc then drive (loc) endIf endProc Table 3: Fraction of the GOLOG program for the Internet tour-guide robot of GOLOG is that it facilitates designing high-level controllers by seamlessly integrating programming and problem solving <ref> [85, 86] </ref>. Table 3 depicts an example GOLOG program for scheduling requests by Internet users. It basically specifies that the robot shall serve all pending requests by moving to the corresponding position and explaining it, and return to its homing position thereafter.
Reference: [86] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, special issue on actions and processes, </journal> <volume> 4:665678, </volume> <year> 1994. </year>
Reference-contexts: RHINO's task control monitor is an augmented version of GOLOG, which has been described in depth elsewhere [85]. GOLOG is a first-order logical language that represents knowledge in the situation calculus <ref> [86] </ref>. It uses a built-in theorem prover to generate plans and to verify their correctness [93]. Programs (and plans) in GOLOG are sequences of elemental actions expressed in a logical language using if-then-else rules and recursive procedures. <p> ; explain (exhibit) endWhile goto (parking-position) endProc proc goto (loc) if robotLocation (robotloc) ^ robotloc 6= loc then drive (loc) endIf endProc Table 3: Fraction of the GOLOG program for the Internet tour-guide robot of GOLOG is that it facilitates designing high-level controllers by seamlessly integrating programming and problem solving <ref> [85, 86] </ref>. Table 3 depicts an example GOLOG program for scheduling requests by Internet users. It basically specifies that the robot shall serve all pending requests by moving to the corresponding position and explaining it, and return to its homing position thereafter.
Reference: [87] <author> M.L. Littman, A.R. Cassandra, </author> <title> and L.P. Kaelbling. Learning policies for partially observable environments: Scaling up. </title> <editor> In A. Prieditis and S. Russell, editors, </editor> <booktitle> Proceedings of the Twelfth International Conference on Machine Learning, </booktitle> <year> 1995. </year> <title> 52 Experiences with an Interactive Museum Tour-Guide Robot </title>
Reference-contexts: This work usually does not exploit the highly geometric nature of robot motion planning, and is therefore not directly applicable. State-based representations, such as the one used here, are commonly used in the literature on partially observable Markov decision processes (POMDPs) <ref> [64, 66, 87] </ref>. POMDPs are the mathematically the most appropriate framework to formulate the motion planning problem, since they can encompass uncertainty both in the map and the robot's location.
Reference: [88] <author> F. Lu and E. Milios. </author> <title> Globally consistent range scan alignment for environment mapping. </title> <booktitle> Autonomous Robots, </booktitle> <address> 4:333349, </address> <year> 1997. </year>
Reference-contexts: After appropriate training [90, 94, 127], the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. In conjunction with any of the approaches presented in <ref> [50, 51, 88, 123, 127, 128, 130] </ref>, the mapping algorithm is powerful enough to generate consistent maps from scratch. Two example maps are shown in Figure 11. <p> Thus, they differ from the approach described here in that they require knowledge of the robot's initial position; and they are not able to recover from global localizing failures. Probably the most popular method for tracking a robot's position is Kalman filtering <ref> [51, 52, 88, 92, 110, 121] </ref>, which represent uncertainty by single-modal distributions. These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty [15, 65, 100, 120]. <p> Such an approach has two key advantages: First, it is more universally applicable since fewer assumptions are made on the nature of the environment; and second, it can utilize all sensor information, typically yielding more accurate results. Other approaches that process raw sensor data can be found in <ref> [51, 52, 88] </ref>. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., [10, 12, 53, 112, 136, 137]). <p> Chatila and Laumond [21] proposed to represent objects by polyhedra in a global coordinate frame. Cox [29] proposed to construct probabilistic trees to represent different, alternative models of the environment. In his work, Kalman filters and Bayesian methods are used for handling uncertainty. Lu, Milios and Gutmann <ref> [50, 88, 89] </ref> presented an approach that memorizes raw proximity sensor data in a metric coordinate system, using an alignment procedure that extracts lines from laser range finer data.
Reference: [89] <author> F. Lu and E. Milios. </author> <title> Robot pose estimation in unknown environments by matching 2d range scans. </title> <journal> Journal of Intelligent and Robotic Systems, </journal> <note> 1998. To appear. </note>
Reference-contexts: Chatila and Laumond [21] proposed to represent objects by polyhedra in a global coordinate frame. Cox [29] proposed to construct probabilistic trees to represent different, alternative models of the environment. In his work, Kalman filters and Bayesian methods are used for handling uncertainty. Lu, Milios and Gutmann <ref> [50, 88, 89] </ref> presented an approach that memorizes raw proximity sensor data in a metric coordinate system, using an alignment procedure that extracts lines from laser range finer data.
Reference: [90] <author> D.J.C. MacKay. </author> <title> Bayesian Methods for Adaptive Models. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, Pasadena, California, </institution> <year> 1992. </year>
Reference-contexts: For each hx; yi within the robot's perceptual range (which in our implementation is between 3 and 5 meters), a training pattern is generated, whose label reflects whether or not the hx; yi is occupied. After appropriate training <ref> [90, 94, 127] </ref>, the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network.
Reference: [91] <author> M.J. Mataric. </author> <title> A distributed model for mobile robot environment-learning and navigation. </title> <type> Master's thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> January </month> <year> 1990. </year> <note> also available as MIT AI Lab Tech Report AITR-1228. </note>
Reference-contexts: Of course, modifying the environment is not an option in many application domains. Some of the more advanced approaches use more natural landmarks that do not require modifications of the environment. For example, the approaches of Kortenkamp and Weymouth [78] and Mataric <ref> [91] </ref> use gateways, doors, walls, and other vertical objects to determine the robot's position. The Helpmate robot uses ceiling lights to position itself [70]. Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in [72, 116, 119]. <p> In systematic simulations, this approach has been found to reliably learn large maps of indoor environments, even if sensor data is noisy. However, in these experiments the robot was equipped with a compass, which simplifies the localization problem significantly. A similar approach was proposed by Mataric <ref> [91] </ref>. Her algorithm acquires topological maps of the environment in which nodes correspond to pre-defined landmarks such as straight wall segments. Neighboring topological entities are connected by links. The topological representation is enriched by distance information to help keeping track of the location of the robot.
Reference: [92] <author> P.S. Maybeck. </author> <title> The Kalman filter: An introduction to concepts. </title> <note> In Cox and Wilfong [30]. </note>
Reference-contexts: Thus, they differ from the approach described here in that they require knowledge of the robot's initial position; and they are not able to recover from global localizing failures. Probably the most popular method for tracking a robot's position is Kalman filtering <ref> [51, 52, 88, 92, 110, 121] </ref>, which represent uncertainty by single-modal distributions. These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty [15, 65, 100, 120].
Reference: [93] <author> J. McCarthy. </author> <title> Situations, actions and causal laws. </title> <booktitle> In Semantic Information Processing, </booktitle> <pages> pages 410417. </pages> <publisher> MIT Press, </publisher> <year> 1968. </year>
Reference-contexts: RHINO's task control monitor is an augmented version of GOLOG, which has been described in depth elsewhere [85]. GOLOG is a first-order logical language that represents knowledge in the situation calculus [86]. It uses a built-in theorem prover to generate plans and to verify their correctness <ref> [93] </ref>. Programs (and plans) in GOLOG are sequences of elemental actions expressed in a logical language using if-then-else rules and recursive procedures. GOLOG also requires the programmer to provide an abstract model of the robot's environment (a domain theory), describing the effects of its actions.
Reference: [94] <author> T.M. Mitchell. </author> <title> Machine Learning. </title> <publisher> McGraw-Hill, </publisher> <year> 1997. </year>
Reference-contexts: For each hx; yi within the robot's perceptual range (which in our implementation is between 3 and 5 meters), a training pattern is generated, whose label reflects whether or not the hx; yi is occupied. After appropriate training <ref> [90, 94, 127] </ref>, the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network.
Reference: [95] <author> A.W. Moore and C.G. Atkeson. </author> <title> Prioritized sweeping: Reinforcement learning with less data and less time. </title> <booktitle> Machine Learning, </booktitle> <address> 13:103130, </address> <year> 1993. </year>
Reference-contexts: This box is easily determined in the value iteration update. As a result, value iteration focuses on a small fraction of the grid only, hence converges much faster. Notice that the bounding box bears similarity to prioritized sweeping <ref> [95] </ref>. Value iteration is a very general procedure, which has several properties that make it attrac tive for real-time mobile robot navigation: * Any-time algorithm.
Reference: [96] <author> H. P. Moravec. </author> <title> Sensor fusion in certainty grids for mobile robots. </title> <journal> AI Magazine, </journal> <pages> pages 6174, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: As a result, the robot blew its horn whenever humans blocked its path; an effect, that most visitors found highly entertaining. 3.2 Mapping The problem of mapping is the problem of estimating the occupancy of all hx; yi locations in the environment <ref> [7, 34, 96, 127] </ref> from sensor data. Mapping is essential if the environment changes over time, specifically if entire passages can be blocked. In the museum, stools or people often blocked certain regions or passages for extended durations of time. <p> Since the variables to be estimatedthe mapis usually extremely high-dimensional (many of our maps contain 10 6 or more grid cells), it is common practice to treat the occupancy estimation problem independently for each location hx; yi <ref> [96, 127] </ref>. <p> The binary nature of occupancya location hx; yi is either occupied or notcan be exploited to derive a slightly more compact update equation than in the real-valued case of position estimation <ref> [96] </ref>. <p> Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec <ref> [34, 35, 96] </ref> and since been adopted in numerous robotic systems (e.g., [10, 12, 53, 112, 136, 137]). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition.
Reference: [97] <author> U. Nehmzow, T. Smithers, and J. Hallam. </author> <title> Location recognition in a mobile robot using self-organizing feature maps. </title> <editor> In G. Schmidt, editor, </editor> <booktitle> Information Processing in Autonomous Mobile Robots. </booktitle> <publisher> springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: As a result, their approach has built fairly large topological maps. Their work also predates the work reported in [128, 130], which also employs the Baum-Welsh algorithm to interleave mapping and localization. Other topological approaches can be found in <ref> [25, 97, 131, 138] </ref>. 7.3 Collision Avoidance In the field of collision avoidance for mobile robots, potential field methods [69] are highly popular.
Reference: [98] <author> H. Neven and G. Schoner. </author> <title> Dynamics parametrically controlled by image correlations organize robot navigation. </title> <journal> Biological Cybernetics, </journal> <volume> 75:293307, </volume> <year> 1996. </year>
Reference: [99] <author> N.J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Springer Publisher, </publisher> <address> Berlin, New York, </address> <year> 1982. </year>
Reference-contexts: Update loop. For all non-target grid cells hx; yi do: V x;y min y=1;0;1 Value iteration updates the value of all grid cells by the value of their best neighbors, plus the costs of moving to this neighbor (just like A* <ref> [99] </ref>). Cost is here equivalent to the probability P (c x;y ) that a grid cell hx; yi is occupied. The update rule is iterated. When the update converges, each value V x;y measures the cumulative cost for moving to the nearest goal. <p> Such a methodology yields only sub-optimal results, but greatly reduces the complexity of motion planning, which is known to be exponential in the number of degrees of freedom [17, 106]. A popular algorithm for robot motion planning is A* <ref> [99] </ref>, which bears close resemblance to the value iteration approach proposed here (see [71]). <p> A recent textbook [109] provides a collection of references to the most important work in this field. Almost all of the work here is focused on domains where the model is specified by a collection of logical axioms, often expressed as STRIPS-like operators <ref> [99] </ref>. This work usually does not exploit the highly geometric nature of robot motion planning, and is therefore not directly applicable. State-based representations, such as the one used here, are commonly used in the literature on partially observable Markov decision processes (POMDPs) [64, 66, 87].
Reference: [100] <author> I. Nourbakhsh, R. Powers, and S. Birchfield. </author> <title> DERVISH an office-navigating robot. </title> <journal> AI Magazine, </journal> <volume> 16(2):5360, </volume> <month> Summer </month> <year> 1995. </year>
Reference-contexts: In addition, probability theory provides nice and elegant ways to integrate evidence from multiple sources over time, and to make optimal decisions under uncertainty. Recently, probabilistic methods have been employed in a variety of successful mobile robots <ref> [15, 57, 65, 100, 120] </ref>, for reasons similar to the ones given here. 2. Resource flexibility. Most of RHINO's software can adapt to the available computational resources. <p> RHINO employs a variant of Markov localization, which is a probabilistic method for robot localization <ref> [15, 65, 100, 120, 125] </ref>. Its input is a stream of sensor readings from the robot's proximity sensors, interleaved with a sequence of action commands. <p> In experimental tests this method has been demonstrated to localize the robot reliably in static environ ments even if it does not have any prior knowledge about the robot's position [15, 16, 43]. Recently, different variants of Markov localization have been developed <ref> [15, 65, 100, 120] </ref>. These methods can be roughly distinguished by the nature of the state space representation. Virtually all published implementations of Markov localization are based on coarse-grained representations of space, often with a spatial resolution of less than one meter and an angular resolution of 90 degrees. <p> These methods can be roughly distinguished by the nature of the state space representation. Virtually all published implementations of Markov localization are based on coarse-grained representations of space, often with a spatial resolution of less than one meter and an angular resolution of 90 degrees. For example, in <ref> [65, 100, 120] </ref> Markov localization is used for landmark-based corridor navigation and the state space is organized according to the topological structure of the environment. Unfortunately, coarse-grained, topological representations are insufficient for navigating in the close vicinity of invisible (but known) obstacles, such as the glass cages described above. <p> These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty <ref> [15, 65, 100, 120] </ref>. Global approaches have two important advantages over local ones: First, the initial location of the robot does not have to be specified and, second, they provide an additional level of robustness, due to their ability to recover from localization failures.
Reference: [101] <author> S. Oore, G.E. Hinton, and G. Dudek. </author> <title> A mobile robot that learns its place. </title> <booktitle> Neural Computation, </booktitle> <address> 9:683699, </address> <year> 1997. </year>
Reference-contexts: Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in [72, 116, 119]. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location <ref> [49, 101, 125, 126] </ref>. These are just a few representative examples of many different features used for localization. 38 Experiences with an Interactive Museum Tour-Guide Robot RHINO's approach differs from all these approaches in that it does not extract predefined features from the sensor values.
Reference: [102] <author> E. Paulos and J. Canny. </author> <title> Delivering real reality to the world wide web via telerobotics. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <year> 1996. </year>
Reference-contexts: This system required users to assume exclusive control over the manipulator. The TELE-GARDEN, successor of MERCURY, enabled people to plant flowers [48]. Just like RHINO, this system was able to coordinate requests by multiple users. The Mechanical Gaze Project <ref> [102] </ref> enables visitors of a museum to examine exhibits from various viewpoints, and with different distances.
Reference: [103] <author> J. Pearl. </author> <title> Probabilistic reasoning in intelligent systems: networks of plausible inference. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: o (1) ; : : : ; o (t) ) = P (:c xy ) P (o (t) j o (1) ; : : : ; o (t1) ) Dividing (19) by (20) yields the following expression, which is often referred to as the odds of hx; yi being occupied <ref> [103] </ref>: P (c xy j o (1) ; : : : ; o (t) ) = P (:c xy j o (t) ) P (c xy ) P (:c xy j o (1) ; : : :; o (t1) ) it follows that the desired probability is given by P (c
Reference: [104] <author> L. Peters, H. Surmann, S. Guo, K. Beck, and J. </author> <title> Huser. </title> <journal> Moria fuzzy logik gesteuertes, autonomes fahrzeug. </journal> <year> 1994. </year>
Reference: [105] <author> L. R. Rabiner. </author> <title> A tutorial on hidden markov models and selected applications in speech recognition. </title> <booktitle> In Proceedings of the IEEE. IEEE, 1989. IEEE Log Number 8825949. </booktitle>
Reference-contexts: In Shatkay and Kaelbling's work, no such assumption is made. Their approach considers local topological information along with landmark label information (which is assumed to be observable), to disambiguate different locations. A key feature of their approach is the use of a recursive estimation routine (the Baum-Welsh algorithm <ref> [105] </ref>) that enables the topological mapper to refine position estimates backwards in time. As a result, their approach has built fairly large topological maps. Their work also predates the work reported in [128, 130], which also employs the Baum-Welsh algorithm to interleave mapping and localization.
Reference: [106] <author> J.H. Reif. </author> <title> Complexity of the mover's problem and generalizations. </title> <booktitle> In Proceesings of the 20th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 421427, </pages> <year> 1979. </year>
Reference-contexts: Motion planning for holonomic mobile robots is usually performed in 2D, ignoring costs of rotation and the dynamics of the robot. Such a methodology yields only sub-optimal results, but greatly reduces the complexity of motion planning, which is known to be exponential in the number of degrees of freedom <ref> [17, 106] </ref>. A popular algorithm for robot motion planning is A* [99], which bears close resemblance to the value iteration approach proposed here (see [71]).
Reference: [107] <author> W.D. Rencken. </author> <title> Concurrent localisation and map building for mobile robots using ultrasonic sensors. </title> <booktitle> In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <pages> pages 21292197, </pages> <address> Yokohama, Japan, </address> <month> July </month> <year> 1993. </year>
Reference: [108] <author> D.E. Rumelhart, G.E. Hinton, and R.J. Williams. </author> <title> Learning internal representations by error propagation. </title> <editor> In D.E. Rumelhart and J.L. McClelland, editors, </editor> <booktitle> Parallel Distributed Processing. </booktitle> <volume> Vol. I + II. </volume> <publisher> MIT Press, </publisher> <year> 1986. </year> <title> Experiences with an Interactive Museum Tour-Guide Robot 53 </title>
Reference-contexts: In traditional approaches to mobile robot mapping, P (c xy j o) is usually crafted by hand, based on knowledge of the characteristics of the respective sensor. In our approach, which is described in more detail in [127], an artificial neural network is trained with BackPropagation <ref> [56, 108] </ref> to approximate P (c xy j o) from data. This interpretation network, which is shown in Figure 10a, accepts as input an encoding of a specific hx; yi-location, encoded in polar coordinates, relative to the robot's local coordinate system.
Reference: [109] <author> S. Russell and P. Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1995. </year>
Reference-contexts: RHINO's motion planner does the same; given sufficient computation time, it is guaranteed to generate optimal plans with respect to the underlying representation. In the AI community, conditional planning has also been a subject of intense research. A recent textbook <ref> [109] </ref> provides a collection of references to the most important work in this field. Almost all of the work here is focused on domains where the model is specified by a collection of logical axioms, often expressed as STRIPS-like operators [99]. <p> However, since the expressive power of the situation calculus exceeds that of STRIPS-like planners (which rely on an implicit close-world assumption), GOLOG is less efficient than most existing planning algorithms (see <ref> [109] </ref>). Historically, Nilsson's SHAKEY robot was the first, successful demonstration of the synthesis of symbolic, AI-type problem solving and low-level control.
Reference: [110] <author> B. Schiele and J.L. Crowley. </author> <title> A comparison of position estimation techniques using occupancy grids. </title> <booktitle> In Proc. of the IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 16281634, </pages> <year> 1994. </year>
Reference-contexts: Thus, they differ from the approach described here in that they require knowledge of the robot's initial position; and they are not able to recover from global localizing failures. Probably the most popular method for tracking a robot's position is Kalman filtering <ref> [51, 52, 88, 92, 110, 121] </ref>, which represent uncertainty by single-modal distributions. These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty [15, 65, 100, 120].
Reference: [111] <author> K. Schmidt and K. Azarm. </author> <title> Mobile robot navigation in a dynamic world using an unsteady diffusion equation strategy. </title> <booktitle> In Proc. of the IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <year> 1992. </year>
Reference-contexts: To deal with obstacles that cannot be detected by the robot's sensors it is necessary to integrate model-based information into reactive collision avoidance. Only considerably small attention has been payed to this problem in the literature. In <ref> [111] </ref>, an approach to motion planning is proposed which in principle could solve this problem. The emphasis of their work lies in the combination of global path planning and local collision avoidance.
Reference: [112] <institution> F.E. Schneider. Sensorinterpretation und Kartenerstellung fur mobile Roboter. </institution> <type> Master's thesis, </type> <institution> Dept. of Computer Science III, University of Bonn, </institution> <address> 53117 Bonn, </address> <month> December </month> <year> 1994. </year> <note> In German. </note>
Reference-contexts: Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., <ref> [10, 12, 53, 112, 136, 137] </ref>). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition.
Reference: [113] <editor> R.D. Schraft and G. Schmierer. Serviceroboter. </editor> <publisher> Springer Verlag, </publisher> <year> 1998. </year> <note> In German. </note>
Reference-contexts: We believe that we currently lack a convincing methodology for intuitive human robot interaction. 7.7 Integrations and Applications Various researchers have devised integrated systems similar to the one described here <ref> [75, 113] </ref>. A good survey of fielded systems is provided in a recent book by Schraft and Schmierer [113]. For example, Siemens Corp. (Germany) has recently developed a mobile cleaning robot, which it successfully deployed in a supermarket [36]. Unfortunately, much of their technology is proprietary. <p> We believe that we currently lack a convincing methodology for intuitive human robot interaction. 7.7 Integrations and Applications Various researchers have devised integrated systems similar to the one described here [75, 113]. A good survey of fielded systems is provided in a recent book by Schraft and Schmierer <ref> [113] </ref>. For example, Siemens Corp. (Germany) has recently developed a mobile cleaning robot, which it successfully deployed in a supermarket [36]. Unfortunately, much of their technology is proprietary. The robot differs from RHINO in that does not interact with people; it also moves at much lower speed. <p> We envision that this new filter will lead to more robust behavior in highly dynamic environments. RHINO is just one out of a series of recent successful mobile robots <ref> [113] </ref>. Recent research in the field of mobile robotics has led to significant progress along various dimensions. <p> Applications such as robots that guide blind or mentally handicapped people, robots that clean large office buildings and department stores, robots that assist people in recreational activities, etc., are clearly in reach, and for many of those target domains prototypes are readily available <ref> [113] </ref>. This recent, ongoing revolution has been triggered by advances along various dimensions. Robotic hardware has steadily become cheaper and more reliable. Robotic software has matured, reaching critical levels of reliability, robustness, and flexibility.
Reference: [114] <author> J.T. Schwartz, M. Scharir, and J. Hopcroft. </author> <title> Planning, Geometry and Complexity of Robot Motion. </title> <publisher> Ablex Publishing Corporation, </publisher> <address> Norwood, NJ, </address> <year> 1987. </year>
Reference-contexts: To the best of our knowledge, this feature is unique in the literature on mobile robot collision avoidance. 7.4 Motion Planning Robot motion planning has been subject to intense research, as documented by a large body of literature on this topic (see e.g., <ref> [82, 114] </ref>). The majority of work addresses more complicated problems than the one addressed in this article, such as motion planning in higher-dimensional and continuous space. Motion planning for holonomic mobile robots is usually performed in 2D, ignoring costs of rotation and the dynamics of the robot.
Reference: [115] <author> H Shatkay and L. Kaelbling. </author> <title> Learning topological maps with weak local odometric information. </title> <booktitle> In Proceedings of IJCAI-97. IJCAI, </booktitle> <publisher> Inc., </publisher> <year> 1997. </year>
Reference-contexts: Moreover, since the recognition of landmarks in this approach involve robot motion, the approach might have severe difficulties in recognizing previously visited locations when approaching them from different directions (e.g., T-junctions). Shatkay and Kaelbling proposed a method that learns topological map from landmark observations <ref> [115] </ref>. Their work extends work by Koenig and Simmons [72], who investigated the problem of learning topological maps if a topological sketch of the environment is readily available. In Shatkay and Kaelbling's work, no such assumption is made.
Reference: [116] <author> H. </author> <title> Shatkay and L.P. Kaelbling. Learning hidden markov models with geometric information. </title> <type> Technical Report CS-97-04, </type> <institution> Computer Science Department, Brown University, Providence, RI, </institution> <month> April </month> <year> 1997. </year>
Reference-contexts: The Helpmate robot uses ceiling lights to position itself [70]. Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in <ref> [72, 116, 119] </ref>. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location [49, 101, 125, 126].
Reference: [117] <author> R. Simmons. </author> <title> Concurrent planning and execution for autonomous robots. </title> <journal> IEEE Control Systems, </journal> <volume> 12(1):4650, </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: Unfortunately, the complexity of the domain does not permit efficient planning even if today's best POMDP algorithms were employed. 7.5 Task Planning and Control Recent research has produced a variety of frameworks for task-level control (see e.g., <ref> [40, 117] </ref> and various chapters in [75]). To our knowledge, GOLOG is unique in its seamless integration of a programming language and a powerful theorem prover for planning. Other special-purpose programming languages for mobile robots, such as COLBERT [73], do not feature built-in problem solvers.
Reference: [118] <author> R. Simmons. </author> <title> The curvature-velocity method for local obstacle avoidance. </title> <booktitle> In Proc. of the IEEE International Conference on Robotics and Au tomation, </booktitle> <year> 1996. </year>
Reference-contexts: Inability to handle invisible obstacles. Virtually all existing methods for collision avoidance are purely sensor-based, i.e., they only consult the robot's sensors to determine collision-free motion <ref> [10, 42, 62, 68, 69, 118] </ref>. If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics. <p> If all obstacles can be sensed, such strategies suffice. However, since some of the obstacles in the museum were invisible, a purely sensor-based approach would have been likely to fail. 2. Inability to consider dynamics. With few exceptions <ref> [42, 118] </ref>, existing approaches model only the kinematics of the robot and ignore dynamic effects such as inertia. At lower speeds (such as 20 cm/sec), the dynamics of mobile robots can safely be ignored. <p> However, to operate robots safely at higher speeds (such as walking speed), it is necessary to take the robot dynamics into account. Both the dynamic window approach [12, 41] and the curvature velocity method <ref> [118] </ref>, which despite their similarity were developed independently, are designed to deal with the dynamics of mobile robots. To deal with obstacles that cannot be detected by the robot's sensors it is necessary to integrate model-based information into reactive collision avoidance.
Reference: [119] <author> R. Simmons, R. Goodwin, K. Haigh, S. Koenig, and J. O'Sullivan. </author> <title> A layered architecture for office delivery robots. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents, </booktitle> <address> Marina del Rey, CA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: The Helpmate robot uses ceiling lights to position itself [70]. Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in <ref> [72, 116, 119] </ref>. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location [49, 101, 125, 126]. <p> More recently, Haigh integrated PRODIGY [19] with a suite of low-level software developed for CMU's XAVIER project <ref> [119] </ref>. Her system, called ROUGE [55], uses PRODIGY to generate cost-optimal motion plans for XAVIER, a robot navigating in the corridors of an office building. <p> One of the most prominent examples is CMU's XAVIER robot <ref> [119] </ref>, which predates the work reported here. XAVIER is equipped with an interface similar to the one described here. Web-users can schedule requests for moving to pre-specified locations where the robot tells a user-selected joke, and they can watch camera images recorded in regular time intervals.
Reference: [120] <author> R. Simmons and S. Koenig. </author> <title> Probabilistic robot navigation in partially observable environments. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence, </booktitle> <year> 1995. </year>
Reference-contexts: In addition, probability theory provides nice and elegant ways to integrate evidence from multiple sources over time, and to make optimal decisions under uncertainty. Recently, probabilistic methods have been employed in a variety of successful mobile robots <ref> [15, 57, 65, 100, 120] </ref>, for reasons similar to the ones given here. 2. Resource flexibility. Most of RHINO's software can adapt to the available computational resources. <p> RHINO employs a variant of Markov localization, which is a probabilistic method for robot localization <ref> [15, 65, 100, 120, 125] </ref>. Its input is a stream of sensor readings from the robot's proximity sensors, interleaved with a sequence of action commands. <p> In experimental tests this method has been demonstrated to localize the robot reliably in static environ ments even if it does not have any prior knowledge about the robot's position [15, 16, 43]. Recently, different variants of Markov localization have been developed <ref> [15, 65, 100, 120] </ref>. These methods can be roughly distinguished by the nature of the state space representation. Virtually all published implementations of Markov localization are based on coarse-grained representations of space, often with a spatial resolution of less than one meter and an angular resolution of 90 degrees. <p> These methods can be roughly distinguished by the nature of the state space representation. Virtually all published implementations of Markov localization are based on coarse-grained representations of space, often with a spatial resolution of less than one meter and an angular resolution of 90 degrees. For example, in <ref> [65, 100, 120] </ref> Markov localization is used for landmark-based corridor navigation and the state space is organized according to the topological structure of the environment. Unfortunately, coarse-grained, topological representations are insufficient for navigating in the close vicinity of invisible (but known) obstacles, such as the glass cages described above. <p> Localization plays a key role in various successful mobile robot architectures [28, 46, 58, 72, 83, 84, 98, 104, 107, 110, 120, 119, 134] and various chapters in [75]. While some localization approaches, such as those described in <ref> [60, 78, 120] </ref> localize the robot relative to some landmarks in a topological map, RHINO's approach localizes the robot in a metric space, just like those methods proposed in [5, 125, 128]. <p> These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty <ref> [15, 65, 100, 120] </ref>. Global approaches have two important advantages over local ones: First, the initial location of the robot does not have to be specified and, second, they provide an additional level of robustness, due to their ability to recover from localization failures.
Reference: [121] <author> R. Smith, M. Self, and P. Cheeseman. </author> <title> Estimating uncertain spatial realtionships in robotics. </title> <editor> In I. Cox and G. Wilfong, editors, </editor> <booktitle> Autonomous Robot Vehicles, </booktitle> <pages> pages 167193. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Thus, they differ from the approach described here in that they require knowledge of the robot's initial position; and they are not able to recover from global localizing failures. Probably the most popular method for tracking a robot's position is Kalman filtering <ref> [51, 52, 88, 92, 110, 121] </ref>, which represent uncertainty by single-modal distributions. These approaches are unable to localize robots under global uncertaintya problem which Engelson called the kidnaped robot problem [37]. Recently, several researchers proposed Markov localization, which enables robots to localize themselves under global uncertainty [15, 65, 100, 120].
Reference: [122] <author> A. Stentz. </author> <title> The focussed D* algorithm for real-time replanning. </title> <booktitle> In Proceedings of IJCAI-95, </booktitle> <year> 1995. </year>
Reference-contexts: Both approaches can be Experiences with an Interactive Museum Tour-Guide Robot 41 used to find shortest paths to multiple goals, and they also generate values for arbitrary locations, facilitating rapid replanning in the face of unexpected events. The issue of efficient re-planning has previously been addressed by Stentz <ref> [122] </ref>, whose D* (dynamic A*) planning algorithm is designed to quickly repair motion plans if the map is updated. RHINO's motion planner does the same; given sufficient computation time, it is guaranteed to generate optimal plans with respect to the underlying representation.
Reference: [123] <author> S. Thrun. </author> <title> Exploration and model building in mobile robot domains. </title> <booktitle> In Proceedings of the ICNN-93, </booktitle> <pages> pages 175180, </pages> <year> 1993. </year>
Reference-contexts: After appropriate training [90, 94, 127], the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. In conjunction with any of the approaches presented in <ref> [50, 51, 88, 123, 127, 128, 130] </ref>, the mapping algorithm is powerful enough to generate consistent maps from scratch. Two example maps are shown in Figure 11. <p> This is because when the cost function increases, previously adjusted values V might become too small. While value iteration quickly decreases values that are too large, increasing too small a value can be arbitrarily slow <ref> [123, 127] </ref>. Consequently, the basic value iteration algorithm requires that the value function be initialized completely (Step 1) whenever the mapand thus the cost functionis updated. This is very inefficient, since the map is updated almost constantly. <p> Our approach differs from previous ones in that neural networks are used to learn the mapping from sensors to occupancy values; as a result, sensor readings are interpreted in the context of their neighbors, which increases the accuracy of the resulting maps <ref> [123, 127] </ref>. Occupancy grids, however, are not the only approach to mobile robot mapping. Chatila and Laumond [21] proposed to represent objects by polyhedra in a global coordinate frame. Cox [29] proposed to construct probabilistic trees to represent different, alternative models of the environment.
Reference: [124] <author> S. Thrun. </author> <title> To know or not to know: On the utility of models in mobile robotics. </title> <journal> AI Magazine, </journal> <volume> 18(1):47 54, </volume> <year> 1997. </year>
Reference-contexts: In his work, Kalman filters and Bayesian methods are used for handling uncertainty. Lu, Milios and Gutmann [50, 88, 89] presented an approach that memorizes raw proximity sensor data in a metric coordinate system, using an alignment procedure that extracts lines from laser range finer data. Jeeves <ref> [124] </ref>, an award-winning robot at the 1996 AAAI mobile robot competition [77], constructs geometric maps incrementally by concatenating wall segments detected in temporal sequences of sonar measurements.
Reference: [125] <author> S. Thrun. </author> <title> Bayesian landmark learning for mobile robot localization. </title> <booktitle> Machine Learning, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: RHINO employs a variant of Markov localization, which is a probabilistic method for robot localization <ref> [15, 65, 100, 120, 125] </ref>. Its input is a stream of sensor readings from the robot's proximity sensors, interleaved with a sequence of action commands. <p> While some localization approaches, such as those described in [60, 78, 120] localize the robot relative to some landmarks in a topological map, RHINO's approach localizes the robot in a metric space, just like those methods proposed in <ref> [5, 125, 128] </ref>. The vast majority of approaches is incapable of localizing a robot globally; instead, Experiences with an Interactive Museum Tour-Guide Robot 37 they are designed to track the robot's position by compensating small odometric errors. <p> Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in [72, 116, 119]. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location <ref> [49, 101, 125, 126] </ref>. These are just a few representative examples of many different features used for localization. 38 Experiences with an Interactive Museum Tour-Guide Robot RHINO's approach differs from all these approaches in that it does not extract predefined features from the sensor values.
Reference: [126] <author> S. Thrun. </author> <title> Finding landmarks for mobile robot navigation. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA), </booktitle> <year> 1998. </year>
Reference-contexts: Dark/bright regions and vertical edges are used in [26, 135], and hallways, openings and doors are used by the approach described in [72, 116, 119]. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location <ref> [49, 101, 125, 126] </ref>. These are just a few representative examples of many different features used for localization. 38 Experiences with an Interactive Museum Tour-Guide Robot RHINO's approach differs from all these approaches in that it does not extract predefined features from the sensor values.
Reference: [127] <author> S. Thrun. </author> <title> Learning metric-topological maps for indoor mobile robot navigation. </title> <journal> Artificial Intelligence, </journal> <volume> 99(1):2171, </volume> <year> 1998. </year>
Reference-contexts: As a result, the robot blew its horn whenever humans blocked its path; an effect, that most visitors found highly entertaining. 3.2 Mapping The problem of mapping is the problem of estimating the occupancy of all hx; yi locations in the environment <ref> [7, 34, 96, 127] </ref> from sensor data. Mapping is essential if the environment changes over time, specifically if entire passages can be blocked. In the museum, stools or people often blocked certain regions or passages for extended durations of time. <p> Since the variables to be estimatedthe mapis usually extremely high-dimensional (many of our maps contain 10 6 or more grid cells), it is common practice to treat the occupancy estimation problem independently for each location hx; yi <ref> [96, 127] </ref>. <p> In traditional approaches to mobile robot mapping, P (c xy j o) is usually crafted by hand, based on knowledge of the characteristics of the respective sensor. In our approach, which is described in more detail in <ref> [127] </ref>, an artificial neural network is trained with BackPropagation [56, 108] to approximate P (c xy j o) from data. This interpretation network, which is shown in Figure 10a, accepts as input an encoding of a specific hx; yi-location, encoded in polar coordinates, relative to the robot's local coordinate system. <p> For each hx; yi within the robot's perceptual range (which in our implementation is between 3 and 5 meters), a training pattern is generated, whose label reflects whether or not the hx; yi is occupied. After appropriate training <ref> [90, 94, 127] </ref>, the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. <p> After appropriate training [90, 94, 127], the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. In conjunction with any of the approaches presented in <ref> [50, 51, 88, 123, 127, 128, 130] </ref>, the mapping algorithm is powerful enough to generate consistent maps from scratch. Two example maps are shown in Figure 11. <p> This is because when the cost function increases, previously adjusted values V might become too small. While value iteration quickly decreases values that are too large, increasing too small a value can be arbitrarily slow <ref> [123, 127] </ref>. Consequently, the basic value iteration algorithm requires that the value function be initialized completely (Step 1) whenever the mapand thus the cost functionis updated. This is very inefficient, since the map is updated almost constantly. <p> Our approach differs from previous ones in that neural networks are used to learn the mapping from sensors to occupancy values; as a result, sensor readings are interpreted in the context of their neighbors, which increases the accuracy of the resulting maps <ref> [123, 127] </ref>. Occupancy grids, however, are not the only approach to mobile robot mapping. Chatila and Laumond [21] proposed to represent objects by polyhedra in a global coordinate frame. Cox [29] proposed to construct probabilistic trees to represent different, alternative models of the environment. <p> In the current application, this is not an issue, as an initial map of the environment is readily available. All approaches discussed thus far fall into the metric paradigm <ref> [127] </ref>. There exists a second, major paradigm to mapping, called topological methods. This family of algorithms represents environments by graphs, where nodes correspond to places and arcs correspond to actions for moving from one place to another. <p> The robot inherits its mapping algorithm from the decade-old literature on occupancy grid maps. It employs artificial neural networks for sensor interpretation, which allow it to interpret sensor readings in the context of its neighbors. As argued elsewhere <ref> [127] </ref>, such an approach improves the robustness of the mapping algorithm to noise (such as spectral reflection). RHINO also integrates maps from different sensor modalities. RHINO employs a hybrid collision avoidance method (DWA), specifically designed to operate in environments where not all obstacles can be sensed reliably.
Reference: [128] <author> S. Thrun, D. Fox, and W. Burgard. </author> <title> A probabilistic approach to concurrent mapping and localization for mobile robots. </title> <booktitle> Machine Learning, </booktitle> <address> 31:2953, </address> <year> 1998. </year> <note> Also appeard in Autonomous Robots 5, pp. 253271, joint issue. </note>
Reference-contexts: Since the motion model does not depend on t, we will henceforth denote it by P (~ j ~ 0 ; o). In our implementation, P (~ j ~ 0 ; o) is realized using a mixture of two independent, zero-centered distributions, which model rotational and translational error, respectively <ref> [15, 128] </ref>. The width of these distributions are proportional to the length of the Experiences with an Interactive Museum Tour-Guide Robot 9 1. Initialization: P (~) Bel pri (~ (0) ) 2. <p> ; : : : ; o (t1) ) P (o (t) j c xy ) P (c xy j o (1) ; : : : ; o (t1) ) = P (c xy ) P (o (t) j o (1) ; : : : ; o (t1) ) 1 See <ref> [128] </ref> for an approach to concurrent localization and mapping that relaxes these assumption and esti mates both the robot's location and the location of the obstacles using a single, mathematical approach. 16 Experiences with an Interactive Museum Tour-Guide Robot 1. Initialization: P (c xy ) 0:5 2. <p> After appropriate training [90, 94, 127], the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. In conjunction with any of the approaches presented in <ref> [50, 51, 88, 123, 127, 128, 130] </ref>, the mapping algorithm is powerful enough to generate consistent maps from scratch. Two example maps are shown in Figure 11. <p> While some localization approaches, such as those described in [60, 78, 120] localize the robot relative to some landmarks in a topological map, RHINO's approach localizes the robot in a metric space, just like those methods proposed in <ref> [5, 125, 128] </ref>. The vast majority of approaches is incapable of localizing a robot globally; instead, Experiences with an Interactive Museum Tour-Guide Robot 37 they are designed to track the robot's position by compensating small odometric errors. <p> A statistical approach, which addresses both mobile robot localization and metric mapping, has been proposed in <ref> [128, 129, 130] </ref>. This approach uses efficient statistical estimators to interleave localization and mapping. It is specifically tailored towards building maps of large, indoor environments, where the natural drift of the robot makes it difficult to maintain an accurate sense of a robot's position. <p> A key feature of their approach is the use of a recursive estimation routine (the Baum-Welsh algorithm [105]) that enables the topological mapper to refine position estimates backwards in time. As a result, their approach has built fairly large topological maps. Their work also predates the work reported in <ref> [128, 130] </ref>, which also employs the Baum-Welsh algorithm to interleave mapping and localization. Other topological approaches can be found in [25, 97, 131, 138]. 7.3 Collision Avoidance In the field of collision avoidance for mobile robots, potential field methods [69] are highly popular. <p> In the Deutsches Museum Bonn, it took us about a week to manually acquire the map, partially because of the non-orthogonal arrangement of exhibits and walls. To remedy this problem, we recently devised a family of more powerful mapping techniques <ref> [128, 130] </ref>. These techniques make it possible to acquire maps of large-scale, cyclic environments from raw sensor data, collected while joy-sticking the robot through its environments (see also Section 7.2 and Figure 11). <p> In most aspects, such robots can now be installed in new sites within days, without having to modify the environment (see also <ref> [128] </ref>). We also learned that human robot interfaces are key prerequisites if robots are to become part of people's everyday lives.
Reference: [129] <author> S. Thrun, D. Fox, and W. Burgard. </author> <title> Probabilistic mapping of an environment by a mobile robot. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA), </booktitle> <year> 1998. </year> <title> 54 Experiences with an Interactive Museum Tour-Guide Robot </title>
Reference-contexts: A statistical approach, which addresses both mobile robot localization and metric mapping, has been proposed in <ref> [128, 129, 130] </ref>. This approach uses efficient statistical estimators to interleave localization and mapping. It is specifically tailored towards building maps of large, indoor environments, where the natural drift of the robot makes it difficult to maintain an accurate sense of a robot's position.
Reference: [130] <author> S. Thrun, J.-S. Gutmann, D. Fox, W. Burgard, and B. Kuipers. </author> <title> Integrating topological and metric maps for mobile robot navigation: A statistical approach. </title> <booktitle> In Proceedings of AAAI-98. </booktitle> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: After appropriate training [90, 94, 127], the output of the network can be interpreted as the desired conditional probability P (c xy j o). generated by the trained neural network. In conjunction with any of the approaches presented in <ref> [50, 51, 88, 123, 127, 128, 130] </ref>, the mapping algorithm is powerful enough to generate consistent maps from scratch. Two example maps are shown in Figure 11. <p> A statistical approach, which addresses both mobile robot localization and metric mapping, has been proposed in <ref> [128, 129, 130] </ref>. This approach uses efficient statistical estimators to interleave localization and mapping. It is specifically tailored towards building maps of large, indoor environments, where the natural drift of the robot makes it difficult to maintain an accurate sense of a robot's position. <p> A key feature of their approach is the use of a recursive estimation routine (the Baum-Welsh algorithm [105]) that enables the topological mapper to refine position estimates backwards in time. As a result, their approach has built fairly large topological maps. Their work also predates the work reported in <ref> [128, 130] </ref>, which also employs the Baum-Welsh algorithm to interleave mapping and localization. Other topological approaches can be found in [25, 97, 131, 138]. 7.3 Collision Avoidance In the field of collision avoidance for mobile robots, potential field methods [69] are highly popular. <p> In the Deutsches Museum Bonn, it took us about a week to manually acquire the map, partially because of the non-orthogonal arrangement of exhibits and walls. To remedy this problem, we recently devised a family of more powerful mapping techniques <ref> [128, 130] </ref>. These techniques make it possible to acquire maps of large-scale, cyclic environments from raw sensor data, collected while joy-sticking the robot through its environments (see also Section 7.2 and Figure 11).
Reference: [131] <author> M. C. Torrance. </author> <title> Natural communication with robots. </title> <type> Master's thesis, </type> <institution> MIT Department of Electrical Engineering and Computer Science, </institution> <address> Cambridge, MA, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: As a result, their approach has built fairly large topological maps. Their work also predates the work reported in [128, 130], which also employs the Baum-Welsh algorithm to interleave mapping and localization. Other topological approaches can be found in <ref> [25, 97, 131, 138] </ref>. 7.3 Collision Avoidance In the field of collision avoidance for mobile robots, potential field methods [69] are highly popular. <p> Nevertheless, the need for more effective human robot interfaces has clearly been recognized. For example, in his M.Sc. thesis, Torrance developed a natural language interface for teaching mobile robots names of places in an indoor environment <ref> [131] </ref>. Due to the lack of a speech recognition system, his interface still required the user to operate a keyboard; however, the natural language component made instructing the robot significantly easier.
Reference: [132] <editor> G. von Randow. Roboter: Unsere Nachsten Verwandten. </editor> <publisher> Rohwolt Verlag, </publisher> <address> Reinbek, Germany, </address> <year> 1997. </year>
Reference-contexts: With universal personal robots still far beyond reach, we are currently witnessing a rapid revolution in robots that directly interact with people and affect their lives <ref> [132] </ref>. This paper describes one such robot, which is really just a step in this direction. Presented here is the software architecture of an interactive robot named RHINO, which has been built to assist and entertain people in public places, such as museums. RHINO is shown in Figure 1.
Reference: [133] <author> S. Waldherr, S. Thrun, R. Romero, and D. Margaritis. </author> <title> Template-based recognition of pose and motion gestures on a mobile robot. </title> <booktitle> In Proceedings of AAAI-98. </booktitle> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: This interface was successfully integrated into Firby's reactive plan-execution system RAP [40], where it enabled people to instruct a robot to pick up free-standing objects. A recent paper by Waldherr and colleagues <ref> [133] </ref> extends these approaches to dynamic gestures, i.e., gestures which are defined through motion, not just poses. Motion gestures, which are commonly used for communication among people, provide additional freedom in the design of gestures.
Reference: [134] <author> G. Wei, C. Wetzler, and E. von Puttkamer. </author> <title> Keeping track of position and orientation of moving indoor systems by correlation of range-finder scans. </title> <booktitle> In Proceedings of the International Conference on Intelligent Robots and Systems, </booktitle> <pages> pages 595601, </pages> <year> 1994. </year>
Reference: [135] <author> E. Wolfart, R.B. Fisher, and A. Walker. </author> <title> Position refinement for a navigating robot using motion information based on honey bee strategies. </title> <booktitle> In Proceesings of the International Symposium on Robotic Systems (SIR 95), </booktitle> <address> Pisa, Italy, </address> <year> 1995. </year> <note> also appeared as DAI Research Paper No 751, </note> <institution> University of Edinburgh, Department of Artificial Intelligence, U.K. </institution>
Reference-contexts: For example, the approaches of Kortenkamp and Weymouth [78] and Mataric [91] use gateways, doors, walls, and other vertical objects to determine the robot's position. The Helpmate robot uses ceiling lights to position itself [70]. Dark/bright regions and vertical edges are used in <ref> [26, 135] </ref>, and hallways, openings and doors are used by the approach described in [72, 116, 119]. Others have proposed methods for learning what feature to extract, through a training phase in which the robot it told its location [49, 101, 125, 126].
Reference: [136] <author> B. Yamauchi and P. Langley. </author> <title> Place recognition in dynamic environments. </title> <journal> Journal of Robotic Systems, Special Issue on Mobile Robots, </journal> <note> To appear. </note>
Reference-contexts: Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., <ref> [10, 12, 53, 112, 136, 137] </ref>). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition.
Reference: [137] <author> B. Yamauchi, P. Langley, A. C. Schultz, J. Grefenstette, and W. Adams. Magellan: </author> <title> An integrated adaptive architecture for mobile robots. </title> <type> Technical Report 98-2, </type> <institution> Institute for the Study of Learning and Expertise (ISLE), </institution> <address> Palo Alto, CA, </address> <month> May </month> <year> 1998. </year>
Reference-contexts: Other approaches that process raw sensor data can be found in [51, 52, 88]. 7.2 Mapping RHINO's mapping approach is a variant of the occupancy grid method. Occupancy grids have originally been proposed by Elfes and Moravec [34, 35, 96] and since been adopted in numerous robotic systems (e.g., <ref> [10, 12, 53, 112, 136, 137] </ref>). To date, occupancy grids have become the most successful metric approach to mobile robot map acquisition.
Reference: [138] <author> U.R. Zimmer. </author> <title> Robust world-modeling and navigation in a real world. </title> <journal> Neurocomputing, </journal> <volume> 13(24), </volume> <year> 1996. </year>
Reference-contexts: As a result, their approach has built fairly large topological maps. Their work also predates the work reported in [128, 130], which also employs the Baum-Welsh algorithm to interleave mapping and localization. Other topological approaches can be found in <ref> [25, 97, 131, 138] </ref>. 7.3 Collision Avoidance In the field of collision avoidance for mobile robots, potential field methods [69] are highly popular.
References-found: 138

