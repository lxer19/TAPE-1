URL: http://dimacs.rutgers.edu/techps/1993/93-56.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1993.html
Root-URL: http://www.cs.rutgers.edu
Title: A Pedestrian Approach to Ray Shooting: Shoot a Ray, Take a Walk  
Author: John Hershberger Subhash Suri 
Keyword: triangles.  
Date: August 16, 1993  
Abstract: We propose a very simple ray shooting algorithm, whose only data structure is a triangulation. The query algorithm, after locating the triangle containing the origin of the ray, walks along the ray, advancing from one triangle to a neighboring one until the polygon boundary is reached. The key result of the paper is a Steiner triangulation of a simple polygon with the property that a ray can intersect at most O(log n) triangles before reaching the polygon boundary. We are able to compute such a triangulation in linear sequential time, or in O(log n) parallel time using O(n= log n) processors. This gives a simple, yet optimal, ray shooting algorithm for a simple polygon. Using a well-known technique, we can extend our triangulation procedure to a multi-connected polygon with k components and n vertices, so that a ray intersects at most O( fl A preliminary version of this paper appears in the proceedings of the 4th ACM-SIAM Symposium on Discrete Algorithms, 1993. y DEC Systems Research Center, 130 Lytton Avenue, Palo Alto, California 94301 z Bell Communications Research, 445 South Street, Morristown, New Jersey 07960 p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Chazelle. </author> <title> Triangulating a simple polygon in linear time. </title> <journal> Discr. Comput. Geom., </journal> <volume> 6 </volume> <pages> 485-524, </pages> <year> 1991. </year>
Reference-contexts: For example, at the top level we find the splitting weight w i as follows: Initialize j := 0; while 2 j &lt; i &lt; k 2 j do j := j + 1; Find i by binary search in <ref> [1; 2 j ] </ref> or [k 2 j ; k], as appropriate. The construction time obeys the recurrence f (k) = f (i 1) + f (k i) + log (min (i; k i)), which solves to f (k) = O (k). <p> We sketch only the main idea behind this algorithm. We start with an arbitrary triangulation of the polygon, without Steiner points; such a triangulation can be computed in O (n) time using a recent algorithm of Chazelle <ref> [1] </ref>. We then preprocess the polygon in linear additional time to build the shortest path data structure of Guibas and Hershberger [11, 13].
Reference: [2] <author> B. Chazelle, H. Edelsbrunner, M. Grigni, L. Guibas, J. Hershberger, M. Sharir, and J. Snoeyink. </author> <title> Ray shooting in polygons using geodesic triangulations. </title> <booktitle> In Proc. of the 18th ICALP, </booktitle> <pages> pages 661-673. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The preprocessing step of Chazelle and Guibas's algorithm required O (n log n) time, but it was later improved to O (n) for pre-triangulated polygons by Guibas et al. [12]. Another optimal algorithm for ray shooting was recently proposed by Chazelle et al. <ref> [2] </ref>; their algorithm is based on a balanced hierarchical decomposition of the input polygon into geodesic triangles. (A geodesic triangle is a region of a simple polygon bounded by shortest paths between three points.) A key property of this geodesic triangulation is that a ray intersects O (log n) geodesic triangles. <p> This leads to an O (log 2 n) time algorithm for the original ray shooting problem. At this point, Chazelle et al. <ref> [2] </ref> apply weight-balanced trees and an advanced data structuring technique called fractional cascading [4, 5] to bring the query cost down to O (log n), albeit at the expense of complicating the algorithm. We should mention, though, that despite the use of fractional cascading, the algorithm of [2] is 2 vastly <p> Chazelle et al. <ref> [2] </ref> apply weight-balanced trees and an advanced data structuring technique called fractional cascading [4, 5] to bring the query cost down to O (log n), albeit at the expense of complicating the algorithm. We should mention, though, that despite the use of fractional cascading, the algorithm of [2] is 2 vastly simpler than the earlier algorithm [3, 12]. Our paper follows the geodesic triangulation approach, but develops it further to obtain a decomposition of the polygon into ordinary triangles|not geodesic triangles|that still has the property that a ray intersects only O (log n) triangles. <p> Our paper follows the geodesic triangulation approach, but develops it further to obtain a decomposition of the polygon into ordinary triangles|not geodesic triangles|that still has the property that a ray intersects only O (log n) triangles. This settles a key open problem posed in <ref> [2] </ref>. Our result is based on a careful triangulation of each geodesic triangle in the balanced geodesic triangulation of P . It is relatively easy to triangulate a geodesic triangle t of size m so that a ray intersects O (log m) triangles in t . <p> Finally, we conclude in Section 8. 2 The Balanced Geodesic Triangulation Our starting point is a balanced geodesic triangulation of the polygon, which was proposed by Chazelle et al. <ref> [2] </ref>, but also by Clarkson [6] in another context. This triangulation is obtained by computing a hierarchy of shortest (also called geodesic) paths inside the polygon between pairs of polygon vertices. <p> The key to this construction is a linear time algorithm for building a balanced geodesic triangulation of the polygon, which was presented by Chazelle et al. <ref> [2] </ref>. We sketch only the main idea behind this algorithm. We start with an arbitrary triangulation of the polygon, without Steiner points; such a triangulation can be computed in O (n) time using a recent algorithm of Chazelle [1]. <p> This extension is based on the technique of using a spanning tree of small stabbing number; Chazelle et al. <ref> [2] </ref> utilized this technique to perform ray shooting among k polygons in O ( p k log n) time.
Reference: [3] <author> B. Chazelle and L. Guibas. </author> <title> Visibility and intersection problems in plane geometry. </title> <journal> Discr. Comput. Geom., </journal> <volume> 4 </volume> <pages> 551-581, </pages> <year> 1989. </year>
Reference-contexts: The triangulation can be computed in O (n) preprocessing time. A parallel implementation of our preprocessing algorithm runs in optimal time O (log n) with O (n= log n) processors in the concurrent-read exclusive-write PRAM model. Chazelle and Guibas first achieved an optimal query time for the ray-shooting problem <ref> [3] </ref>. Their technique is quite complicated and relies on several sophisticated data structures. The preprocessing step of Chazelle and Guibas's algorithm required O (n log n) time, but it was later improved to O (n) for pre-triangulated polygons by Guibas et al. [12]. <p> We should mention, though, that despite the use of fractional cascading, the algorithm of [2] is 2 vastly simpler than the earlier algorithm <ref> [3, 12] </ref>. Our paper follows the geodesic triangulation approach, but develops it further to obtain a decomposition of the polygon into ordinary triangles|not geodesic triangles|that still has the property that a ray intersects only O (log n) triangles. This settles a key open problem posed in [2].
Reference: [4] <author> B. Chazelle and L. J. Guibas. Fractional cascading: I. </author> <title> A data structuring technique. </title> <journal> Algorithmica, </journal> <volume> 1 </volume> <pages> 133-162, </pages> <year> 1986. </year>
Reference-contexts: This leads to an O (log 2 n) time algorithm for the original ray shooting problem. At this point, Chazelle et al. [2] apply weight-balanced trees and an advanced data structuring technique called fractional cascading <ref> [4, 5] </ref> to bring the query cost down to O (log n), albeit at the expense of complicating the algorithm. We should mention, though, that despite the use of fractional cascading, the algorithm of [2] is 2 vastly simpler than the earlier algorithm [3, 12].
Reference: [5] <author> B. Chazelle and L. J. Guibas. </author> <title> Fractional cascading: II. </title> <journal> Applications. Algorithmica, </journal> <volume> 1 </volume> <pages> 163-191, </pages> <year> 1986. </year>
Reference-contexts: This leads to an O (log 2 n) time algorithm for the original ray shooting problem. At this point, Chazelle et al. [2] apply weight-balanced trees and an advanced data structuring technique called fractional cascading <ref> [4, 5] </ref> to bring the query cost down to O (log n), albeit at the expense of complicating the algorithm. We should mention, though, that despite the use of fractional cascading, the algorithm of [2] is 2 vastly simpler than the earlier algorithm [3, 12].
Reference: [6] <author> K. Clarkson. </author> <title> Approximation algorithms for planar traveling salesman tours and minimum length triangulations. </title> <booktitle> In Proceedings of the Second Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 17-23, </pages> <year> 1991. </year>
Reference-contexts: Finally, we conclude in Section 8. 2 The Balanced Geodesic Triangulation Our starting point is a balanced geodesic triangulation of the polygon, which was proposed by Chazelle et al. [2], but also by Clarkson <ref> [6] </ref> in another context. This triangulation is obtained by computing a hierarchy of shortest (also called geodesic) paths inside the polygon between pairs of polygon vertices. We organize the triangulation process in O (log n) stages; the first stage differs slightly from all the subsequent ones.
Reference: [7] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Fast detection of polyhedral intersections. </title> <journal> Theoretical Comput. Sci., </journal> <volume> 27 </volume> <pages> 241-253, </pages> <year> 1983. </year>
Reference-contexts: The procedure terminates when each chain consists of a singleton edge. Remark. The balanced geodesic triangulation of a convex polygon is the familiar hierarchical decomposition of a convex polygon used by Dobkin and Kirkpatrick <ref> [7] </ref> in their intersection-detection algorithms. In the case of the convex polygon, each geodesic path is 3 a straight line segment and the regions they define are ordinary triangles. Let us now consider the geometric structure of these geodesic paths.
Reference: [8] <author> H. Edelsbrunner, L. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: The first triangle can be found also in O (log n) time, using any of the well-known data structures for point location in a planar subdivision <ref> [8, 15] </ref>. Except for the point-location structure, our algorithm for ray shooting requires no other data structure besides an adjacency graph of the Steiner triangulation. In applications in which the starting triangle is always known, the point-location structure can be dispensed with.
Reference: [9] <author> M. Goodrich. </author> <title> Planar separators and parallel polygon triangulation. </title> <booktitle> In Proceedings of the 24th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 507-516, </pages> <year> 1992. </year>
Reference-contexts: The sequential algorithm can be extended to run in O (log n) parallel time using O (n= log n) processors. We compute an initial triangulation of the polygon with Goodrich's algorithm <ref> [9] </ref>, which runs in O (log n) time with O (n= log n) processors in the CRCW (concurrent-read, concurrent-write) PRAM model. The rest of our algorithm runs under the less powerful CREW (concurrent-read, exclusive-write) model. The parallel algorithm uses the same building blocks as the sequential algorithm.
Reference: [10] <author> M. T. Goodrich, S. B. Shauck, and S. Guha. </author> <title> Parallel methods for visibility and shortest path problems in simple polygons. </title> <booktitle> In Proceedings of the 6th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 73-82, </pages> <year> 1990. </year>
Reference-contexts: To compute the up-tangent and down-tangent weights, the algorithm builds O (n= log n) shortest paths, as in the sequential case. It uses Goodrich, Shauck, and Guha's shortest path query structure to find the shortest paths in O (log n) time apiece <ref> [10] </ref>. Each processor determines in parallel whether the shortest path between two chains contains an admissible common tangent. There are only O (log n) up-tangents per chain, so it is easy to add the up-tangent weights to the appropriate bay-size weights in O (log n) time.
Reference: [11] <author> L. Guibas and J. Hershberger. </author> <title> Optimal shortest path queries in a simple polygon. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39(2) </volume> <pages> 126-152, </pages> <year> 1989. </year>
Reference-contexts: We start with an arbitrary triangulation of the polygon, without Steiner points; such a triangulation can be computed in O (n) time using a recent algorithm of Chazelle [1]. We then preprocess the polygon in linear additional time to build the shortest path data structure of Guibas and Hershberger <ref> [11, 13] </ref>.
Reference: [12] <author> L. Guibas, J. Hershberger, D. Leven, M. Sharir, and R. Tarjan. </author> <title> Linear time algorithms for visibility and shortest path problems inside triangulated simple polygons. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 209-233, </pages> <year> 1987. </year>
Reference-contexts: Their technique is quite complicated and relies on several sophisticated data structures. The preprocessing step of Chazelle and Guibas's algorithm required O (n log n) time, but it was later improved to O (n) for pre-triangulated polygons by Guibas et al. <ref> [12] </ref>. <p> We should mention, though, that despite the use of fractional cascading, the algorithm of [2] is 2 vastly simpler than the earlier algorithm <ref> [3, 12] </ref>. Our paper follows the geodesic triangulation approach, but develops it further to obtain a decomposition of the polygon into ordinary triangles|not geodesic triangles|that still has the property that a ray intersects only O (log n) triangles. This settles a key open problem posed in [2].
Reference: [13] <author> J. Hershberger. </author> <title> A new data structure for shortest path queries in a simple polygon. </title> <journal> Inf. Process. Lett., </journal> <volume> 38 </volume> <pages> 231-235, </pages> <year> 1991. </year>
Reference-contexts: We start with an arbitrary triangulation of the polygon, without Steiner points; such a triangulation can be computed in O (n) time using a recent algorithm of Chazelle [1]. We then preprocess the polygon in linear additional time to build the shortest path data structure of Guibas and Hershberger <ref> [11, 13] </ref>.
Reference: [14] <author> J. Hershberger. </author> <title> Optimal parallel algorithms for triangulated simple polygons. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 33-42, </pages> <year> 1992. </year>
Reference-contexts: The rest of our algorithm runs under the less powerful CREW (concurrent-read, exclusive-write) model. The parallel algorithm uses the same building blocks as the sequential algorithm. After triangulating the polygon, it builds a geodesic triangulation with Hershberger's algorithm <ref> [14] </ref>. Once the edge weights are known, the algorithm computes weight-balanced trees [14], builds boomerangs, and triangulates each boomerang based on its weight-balanced tree. <p> The parallel algorithm uses the same building blocks as the sequential algorithm. After triangulating the polygon, it builds a geodesic triangulation with Hershberger's algorithm <ref> [14] </ref>. Once the edge weights are known, the algorithm computes weight-balanced trees [14], builds boomerangs, and triangulates each boomerang based on its weight-balanced tree. To triangulate a boomerang with k sides in O (log n) time with O (k= log n) processors, the algorithm walks down the tree in levels, performing the obvious parallel recursive construction.
Reference: [15] <author> D. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Comput., </journal> <volume> 12 </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: The first triangle can be found also in O (log n) time, using any of the well-known data structures for point location in a planar subdivision <ref> [8, 15] </ref>. Except for the point-location structure, our algorithm for ray shooting requires no other data structure besides an adjacency graph of the Steiner triangulation. In applications in which the starting triangle is always known, the point-location structure can be dispensed with.
Reference: [16] <author> J. Matousek. </author> <title> More on cutting arrangements and spanning trees with low stabbing number. </title> <type> Technical Report B-90-2, </type> <institution> Freie Universitat Berlin, </institution> <year> 1990. </year>
Reference-contexts: A spanning tree with this property can be found in O (k 3=2 log k) time, using an algorithm by Matousek <ref> [16] </ref>. Although the edges of T do not cross each other, they may be intersected by the boundaries of input polygons, causing the edges of T to be subdivided into smaller segments.
Reference: [17] <author> D. M. Mount. </author> <title> Intersection detection and separators for simple polygons. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 303-311, </pages> <year> 1992. </year> <month> 26 </month>
Reference-contexts: We suspect that this property of our triangulation may find other applications, for example in mesh generation for the finite element method. Our triangulation has already been applied by Mount to answer intersection queries for translates of preprocessed polygons <ref> [17] </ref>. The triangulation is also the basis of an output-sensitive construction of an arrangement clipped to the interior of a simple polygon.
References-found: 17

