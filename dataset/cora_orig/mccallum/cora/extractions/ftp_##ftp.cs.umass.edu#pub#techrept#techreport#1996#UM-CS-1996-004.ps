URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-004.ps
Refering-URL: http://www.cs.umass.edu/~potter/LC/spring96.doc.html
Root-URL: 
Email: fkaplan,wiledeng@cs.umass.edu  
Title: PolySPIN: Support for Polylingual Persistence, Interoperability and Naming in Object-Oriented Databases  
Author: Alan Kaplan Jack C. Wileden 
Note: This material is based upon work sponsored by Texas Instruments Inc. under grant SRA-2837024. The content does not necessarily reflect the position or policy of Texas Instruments and no official endorsement should be inferred.  
Address: Amherst, Massachusetts 01003  
Affiliation: Convergent Computing Systems Laboratory Computer Science Department University of Massachusetts  
Abstract: CMPSCI Technical Report 96-4 January 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Banerjee, W. Kim, H.-J. Kim, and H. K. </author> <title> Forth. Semantics and implementation of schema evolution in object-oriented languages. </title> <booktitle> In Proceedings of the ACM SIGMOD Annual Conference, </booktitle> <pages> pages 311-322, </pages> <address> San Francisco, CA, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: The addition of other languages will allow us to continue our experimentation with PolySPIN, in an effort to further confirm, or find ways to extend, its generality and applicability. An important problem closely related to interoperability is the problem of type evolution in persistent object systems <ref> [2, 1, 15, 17, 18] </ref>. Indeed, the type evolution problem can be seen as a special case of interoperability, one in which the need for interoperation arises due to changes in the definitions of one or more data types that have existing persistent instances.
Reference: [2] <author> G. Barbedette. </author> <title> Schema modifications in the LISPO 2 persistent object-oriented language. </title> <booktitle> In Proceedings of the Fifth European Conference on Object-Oriented Programming, number 512 in Lecture Notes in Computer Science, </booktitle> <address> Geneva, Switzerland, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: The addition of other languages will allow us to continue our experimentation with PolySPIN, in an effort to further confirm, or find ways to extend, its generality and applicability. An important problem closely related to interoperability is the problem of type evolution in persistent object systems <ref> [2, 1, 15, 17, 18] </ref>. Indeed, the type evolution problem can be seen as a special case of interoperability, one in which the need for interoperation arises due to changes in the definitions of one or more data types that have existing persistent instances.
Reference: [3] <author> L. Blaine and A. Goldberg. </author> <title> Interoperability of abstract data values. Technical Note 6, DARPA Module Interconnection Formalism Working Group, </title> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Subsequently, we plan to investigate richer forms of type compatibility, based on deeper, semantics-based analyses of the relationships between types. Zaremski and Wing's work on specification matching [25] and Blaine and Goldberg's work on axiomatic approaches <ref> [3] </ref> represent two valuable points of departure for our research in this area. In addition, we are currently exploring augmenting Open OODB with other languages, such as Ada95.
Reference: [4] <author> M. Bright, A. Hurson, and S. Pakzad. </author> <title> A taxonomy and current issues in multidatabase systems. </title> <journal> IEEE Computer, </journal> <volume> 25(3) </volume> <pages> 50-60, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Because the multiple database integration problem, in its most general form, requires determination of semantic equivalence among different data type definitions, no single satisfactory solution to this interoperability problem exists. Nevertheless, a number of useful interoperability approaches have been proposed <ref> [4] </ref>, such as various kinds of multidatabases [12] or federated databases [8].
Reference: [5] <author> P. Butterworth, A. Otis, and J. Stein. </author> <title> The GemStone object database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: We term this interoperability problem the polylingual access problem. Existing interoperability approaches provide little or no support for polylingual access, so new approaches must evolve to provide such support. While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore [11], GemStone <ref> [5] </ref>), none provide transparent polylingual access to persistent data.
Reference: [6] <author> L. Cardelli and P. Wegner. </author> <title> On understanding types, data abstraction and polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> Dec. </month> <year> 1985. </year>
Reference-contexts: In type systems research, a similar goal of making differences in data types transparent to code that processes instances of the types is referred to as polymorphism (e.g., <ref> [6] </ref>).
Reference: [7] <author> R. Cattell. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore [11], GemStone [5]), none provide transparent polylingual access to persistent data. Instead, present day interoperability mechanisms generally rely on external data definition languages (such as ODMG's ODL <ref> [7] </ref> or CORBA's IDL [16]), thus reintroducing impedance mismatch and forcing developers to anticipate heterogeneity in their applications, or depend upon direct use of such low-level constructs as the foreign language interface mechanisms provided in individual programming languages. <p> At various points in this paper we have alluded to other approaches to supporting heterogeneity in OODBs that have been proposed, primarily those advanced by the Object Management Group (OMG) and the Object Data Management Group (ODMG). Each group has proposed an object-oriented type model (IDL [16] and ODL <ref> [7] </ref>, respectively) that could be used, in effect, to re-introduce some of the dichotomy between the type models of application programming languages and those of object-oriented databases (as discussed in Section 2.).
Reference: [8] <author> D. Heimbigner and D. McLeod. </author> <title> A federated architecture for information management. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 3(3) </volume> <pages> 253-278, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Nevertheless, a number of useful interoperability approaches have been proposed [4], such as various kinds of multidatabases [12] or federated databases <ref> [8] </ref>.
Reference: [9] <author> A. Kaplan and J. C. Wileden. PolySPINner 1.0: </author> <title> Automating support for interoperability in polylingual software systems. </title> <note> In Preparation. </note>
Reference-contexts: As a step toward automating this process, we have developed a tool called PolySPINner. (A more detailed description of PolySPINner can be found in <ref> [9] </ref>.) The overall objective of PolySPINner is to provide transparent polylingual access to objects with minimal programmer intervention as well as minimal re-engineering of existing source code. The current prototype uses an exact signature matching rule in determining the compatibility between C++ and CLOS classes.
Reference: [10] <author> A. Kaplan and J. C. Wileden. </author> <title> Name management and object technology for advanced software. </title> <booktitle> In International Symposium on Object Technologies for Advanced Software, number 742 in Lecture Notes in Computer Science, </booktitle> <pages> pages 371-392, </pages> <address> Kanazawa, Japan, </address> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Typically provided by a name management mechanism, existing approaches in OODBs can be characterized as being relatively ad hoc and weak <ref> [10] </ref>. PolySPIN addresses these various shortcomings by providing a uniform, flexible and powerful approach to name management.
Reference: [11] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: We term this interoperability problem the polylingual access problem. Existing interoperability approaches provide little or no support for polylingual access, so new approaches must evolve to provide such support. While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore <ref> [11] </ref>, GemStone [5]), none provide transparent polylingual access to persistent data.
Reference: [12] <author> W. Litwin and A. Abdellatif. </author> <title> Multidatabase interoperability. </title> <journal> IEEE Computer, </journal> 19(12) 10-18, Dec. 1986. 
Reference-contexts: Because the multiple database integration problem, in its most general form, requires determination of semantic equivalence among different data type definitions, no single satisfactory solution to this interoperability problem exists. Nevertheless, a number of useful interoperability approaches have been proposed [4], such as various kinds of multidatabases <ref> [12] </ref> or federated databases [8].
Reference: [13] <institution> Lucid, Inc., </institution> <address> Menlo Park, CA. </address> <note> Lucid Common Lisp/Sun: Advanced User's Guide, version 4.0 edition. </note>
Reference-contexts: We also note that the example described here has been implemented as extensions to the TI/Arpa Open Object-Oriented Database [21], using Sun C++ [19] and the Lucid Common Lisp Object System (CLOS) <ref> [13] </ref>. 3.1 Name Management and Persistence in PolySPIN While the benefits of orthogonal persistence capabilities offered by OODBs are widely known, relatively little attention has been to paid to how persistent objects should be organized (from an application's perspective) in an OODB.
Reference: [14] <author> R. Neches, R. Fikes, T. Finin, T. Gruber, R. Patil, T. Senator, and W. R. Swartout. </author> <title> Enabling technology for knowledge sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 36-56, </pages> <month> Fall </month> <year> 1991. </year>
Reference-contexts: Related work that addresses essentially the same set of concerns from a perspective influenced by the AI view of information (or knowledge) and its processing has proposed such notions as mediators [22] or enabling technology for knowledge sharing <ref> [14] </ref> to address the schema, model and internal-representation reconciliation facets of the multiple database integration problem. With the advent of OODBs (which have largely removed the dichotomous treatment of persistent and transient data), the traditional interoperability problems multilingual access and multiple database integration remain, but become somewhat more complex.
Reference: [15] <author> E. Odberg. MultiPerspectives: </author> <title> The classification dimension of schema modification management for object-oriented databases. </title> <booktitle> In Proceedings of TOOLS USA, </booktitle> <address> Santa Barbara, CA, </address> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The addition of other languages will allow us to continue our experimentation with PolySPIN, in an effort to further confirm, or find ways to extend, its generality and applicability. An important problem closely related to interoperability is the problem of type evolution in persistent object systems <ref> [2, 1, 15, 17, 18] </ref>. Indeed, the type evolution problem can be seen as a special case of interoperability, one in which the need for interoperation arises due to changes in the definitions of one or more data types that have existing persistent instances.
Reference: [16] <author> OMG. </author> <title> Object management architecture guide, revision 2.0. OMG TC Document 92.11.1, Object Management Group, Framingham, </title> <address> MA, </address> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore [11], GemStone [5]), none provide transparent polylingual access to persistent data. Instead, present day interoperability mechanisms generally rely on external data definition languages (such as ODMG's ODL [7] or CORBA's IDL <ref> [16] </ref>), thus reintroducing impedance mismatch and forcing developers to anticipate heterogeneity in their applications, or depend upon direct use of such low-level constructs as the foreign language interface mechanisms provided in individual programming languages. In this paper we focus on the polylingual access problem for object-oriented databases. <p> At various points in this paper we have alluded to other approaches to supporting heterogeneity in OODBs that have been proposed, primarily those advanced by the Object Management Group (OMG) and the Object Data Management Group (ODMG). Each group has proposed an object-oriented type model (IDL <ref> [16] </ref> and ODL [7], respectively) that could be used, in effect, to re-introduce some of the dichotomy between the type models of application programming languages and those of object-oriented databases (as discussed in Section 2.).
Reference: [17] <author> D. J. Penney and J. Stein. </author> <title> Class modification in the GemStone object-oriented DBMS. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 111-117, </pages> <address> Orlando, FL, </address> <month> Oct. </month> <year> 1987. </year>
Reference-contexts: The addition of other languages will allow us to continue our experimentation with PolySPIN, in an effort to further confirm, or find ways to extend, its generality and applicability. An important problem closely related to interoperability is the problem of type evolution in persistent object systems <ref> [2, 1, 15, 17, 18] </ref>. Indeed, the type evolution problem can be seen as a special case of interoperability, one in which the need for interoperation arises due to changes in the definitions of one or more data types that have existing persistent instances.
Reference: [18] <author> A. H. Skarra and S. B. Zdonik. </author> <title> The management of changing types in an object-oriented database. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 483-495, </pages> <address> Portland, OR, </address> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: The addition of other languages will allow us to continue our experimentation with PolySPIN, in an effort to further confirm, or find ways to extend, its generality and applicability. An important problem closely related to interoperability is the problem of type evolution in persistent object systems <ref> [2, 1, 15, 17, 18] </ref>. Indeed, the type evolution problem can be seen as a special case of interoperability, one in which the need for interoperation arises due to changes in the definitions of one or more data types that have existing persistent instances.
Reference: [19] <author> Sun Microsystems, Inc., </author> <title> Mountain View, CA. SPARCompiler C++ 3.0.1 Programmer's Guide, revision a edition, </title> <address> Oct. </address> <year> 1992. </year>
Reference-contexts: Throughout this section, we will refer to the scenario presented in Section 2.1 as a means of explicating various aspects of PolySPIN. We also note that the example described here has been implemented as extensions to the TI/Arpa Open Object-Oriented Database [21], using Sun C++ <ref> [19] </ref> and the Lucid Common Lisp Object System (CLOS) [13]. 3.1 Name Management and Persistence in PolySPIN While the benefits of orthogonal persistence capabilities offered by OODBs are widely known, relatively little attention has been to paid to how persistent objects should be organized (from an application's perspective) in an OODB.
Reference: [20] <institution> Texas Instruments, Inc., Dallas, </institution> <month> TX. </month> <title> Open OODB Query Language User Manual, release 0.2 (alpha) edition, </title> <year> 1993. </year>
Reference-contexts: They would also like to be able to employ either navigational access or associative access in processing the personnel information from the various colleges. An example of an OQL-style query (based on <ref> [20] </ref>) that might be part of a C++ application, in this case seeking candidates for early retirement incentives, is shown in Figure 3.
Reference: [21] <author> D. L. Wells, J. A. Blakely, and C. W. Thompson. </author> <title> Architecture of an open object-oriented management system. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 74-82, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: We then describe PolySPIN, a framework supporting persistence, interoperability and naming for polylingual object-oriented databases, and its current realization as extensions to the TI/Arpa Open Object-Oriented Database <ref> [21] </ref>. In addition, we show how PolySPIN can facilitate aspects of interoperability in polylingual object-oriented databases, returning to our earlier example to illustrate PolySPIN's capabilities. The paper concludes with a summary, an assessment of our results to date and suggestions of future directions for this research. 2. <p> The TI/Arpa Open Object-Oriented Database (Open OODB) <ref> [21] </ref>, for instance, provides both a C++ and a Common Lisp Object System (CLOS) API. Moreover, type definitions in an object-oriented model include a set of operations for manipulating instances of the types, so the OODB may well contain operations that are defined and implemented in different programming languages. <p> Throughout this section, we will refer to the scenario presented in Section 2.1 as a means of explicating various aspects of PolySPIN. We also note that the example described here has been implemented as extensions to the TI/Arpa Open Object-Oriented Database <ref> [21] </ref>, using Sun C++ [19] and the Lucid Common Lisp Object System (CLOS) [13]. 3.1 Name Management and Persistence in PolySPIN While the benefits of orthogonal persistence capabilities offered by OODBs are widely known, relatively little attention has been to paid to how persistent objects should be organized (from an application's
Reference: [22] <author> G. Wiederhold. </author> <title> Mediators in the architecture of future information systems. </title> <journal> IEEE Computer, </journal> <volume> 25(3) </volume> <pages> 38-49, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Related work that addresses essentially the same set of concerns from a perspective influenced by the AI view of information (or knowledge) and its processing has proposed such notions as mediators <ref> [22] </ref> or enabling technology for knowledge sharing [14] to address the schema, model and internal-representation reconciliation facets of the multiple database integration problem.
Reference: [23] <author> J. C. Wileden, A. L. Wolf, W. R. Rosenblatt, and P. L. Tarr. </author> <title> Specification level interoperability. </title> <journal> Communications of the ACM, </journal> <volume> 34(5) </volume> <pages> 73-87, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: By analogy, we term this interoperability problem the polylingual access problem. 1 Although techniques for determining type equivalence or compatibility are a challenging research topic in their own right (e.g., <ref> [23, 24, 25] </ref>), for purposes of this paper we presume such determinations can be made, in at least some interesting cases. We discuss this issue further in Section 4.. The remainder of this section is organized as follows. Section 2.1 presents a hypothetical interoperability scenario illustrating the polylingual access problem. <p> We first briefly discuss interoperability goals and issues in general, then specifically consider the approaches to polylingual interoperability that are necessitated by existing OODB interoperability support. 2.2 Interoperability Goals and Issues Our work on interoperability is, and has been for several years <ref> [23] </ref>, motivated by a primary concern for the impact of an interoperability approach on applications developers. In our view, among the most important objectives for any approach to interoperability are the following: * Developers should have maximum freedom to define types of objects that their programs manipulate. <p> For object-oriented database technology, most approaches to addressing this question have been based on use of a unifying type model <ref> [23] </ref>, such as the ODMG ODL. While such approaches may suffice for the easiest and common interoperability scenarios, however, they are inadequate for the megaprogramming case.
Reference: [24] <author> A. M. Zaremski and J. M. Wing. </author> <title> Signature matching, a tool for using software libraries. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(2), </volume> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: By analogy, we term this interoperability problem the polylingual access problem. 1 Although techniques for determining type equivalence or compatibility are a challenging research topic in their own right (e.g., <ref> [23, 24, 25] </ref>), for purposes of this paper we presume such determinations can be made, in at least some interesting cases. We discuss this issue further in Section 4.. The remainder of this section is organized as follows. Section 2.1 presents a hypothetical interoperability scenario illustrating the polylingual access problem. <p> Specifically, the determination of type compatibility embedded in PolySPINner is essentially an instance of exact signature matching, the most restrictive category in the Zaremski and Wing classification of signature matching approaches <ref> [24] </ref>.
Reference: [25] <author> A. M. Zaremski and J. M. Wing. </author> <title> Specification matching of software components. </title> <booktitle> In The Third Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 6-17, </pages> <address> Washington, D.C., </address> <month> Oct </month> <year> 1995. </year>
Reference-contexts: By analogy, we term this interoperability problem the polylingual access problem. 1 Although techniques for determining type equivalence or compatibility are a challenging research topic in their own right (e.g., <ref> [23, 24, 25] </ref>), for purposes of this paper we presume such determinations can be made, in at least some interesting cases. We discuss this issue further in Section 4.. The remainder of this section is organized as follows. Section 2.1 presents a hypothetical interoperability scenario illustrating the polylingual access problem. <p> Subsequently, we plan to investigate richer forms of type compatibility, based on deeper, semantics-based analyses of the relationships between types. Zaremski and Wing's work on specification matching <ref> [25] </ref> and Blaine and Goldberg's work on axiomatic approaches [3] represent two valuable points of departure for our research in this area. In addition, we are currently exploring augmenting Open OODB with other languages, such as Ada95.
References-found: 25

