URL: http://www.cs.tamu.edu/research/robotics/Amato/Papers/dmlp-tr.ps.gz
Refering-URL: http://www.cs.tamu.edu/faculty/amato/dsmft/publications.html
Root-URL: http://www.cs.tamu.edu
Title: Choosing Good Distance Metrics and Local Planners for Probabilistic Roadmap Methods  
Author: Nancy M. Amato O. Burchan Bayazit Lucia K. Dale Christopher Jones Daniel Vallejo 
Date: May 12, 1998  
Affiliation: Department of Computer Science Texas A&M University  
Pubnum: Technical Report 98-010  
Abstract: This paper presents a comparative evaluation of different distance metrics and local planners within the context of probabilistic roadmap methods for motion planning. Both C-space and Workspace distance metrics and local planners are considered. The study concentrates on cluttered three-dimensional Workspaces typical, e.g., of mechanical designs. Our results include recommendations for selecting appropriate combinations of distance metrics and local planners for use in motion planning methods, particularly probabilistic roadmap methods. Our study of distance metrics showed that the importance of the translational distance increased relative to the rotational distance as the environment become more crowded. We find that each local planner makes some connections than none of the others do indicating that better connected roadmaps will be constructed using multiple local planners. We propose a new local planning method we call rotate-at-s that outperforms the common straight-line in C-space method in crowded environments. fl A preliminary version of this paper appeared in the Proc. of the IEEE International Conference on Robotics and Automation [2]. This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. Bayazit is supported in part by the Turkish Ministry of Education, Dale is supported in part by a GE Foundation Graduate Fellowship, and Vallejo is on leave from Universidad de las Americas-Puebla, Mexico, and is supported in part by a Fulbright-CONACYT scholarship. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. M. Ahuactzin and K. Gupta. </author> <title> A motion planning based approach for inverse kinematics of redundant robots: The kinematic roadmap. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 36093614, </pages> <year> 1997. </year>
Reference-contexts: The metric used in [22] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. In <ref> [1] </ref>, a distance is computed based on the differences between unit vectors on the object's local reference frame in the two configurations. A way to define the distance between two configurations is to find the minimum distance between any point on robot in both configurations. <p> Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 19, 20, 38] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times. <p> STRAIGHT-LINE (c 1 ; c 2 ) INPUT: c 1 , c 2 OUTPUT:YES/NO nsteps := no. intermediate configs I <ref> [1; 6] </ref> := increment for each coord c := c 1 for step := 1 to nsteps c := c + I if (c in collision) return NO endfor return YES end ROTATE-AT-S (c 1 ; c 2 ; s;) INPUT: c 1 , c 2 , s OUTPUT:YES/NO (x 0
Reference: [2] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. </author> <title> Choosing good distance metrics and local planners for probabilistic roadmap methods. </title> <booktitle> In Proc. IEEE Internat. Conf. </booktitle> <institution> Robot. Autom. (ICRA), </institution> <year> 1998. </year>
Reference: [3] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. OBPRM: </author> <title> An obstacle-based PRM for 3D workspaces. </title> <booktitle> In Proc. Intern. Workshop on Algorithmic Foundations of Robotics (WAFR), </booktitle> <year> 1998. </year>
Reference-contexts: FIND PATH IN ROADMAP BETWEEN CONNECTION NODES PRMs have been shown to perform well in practice. In particular, after the roadmap is constructed during preprocessing, many difficult planning queries can be answered very quickly (in fractions of seconds) <ref> [3, 4, 32] </ref>. Although these methods are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap [22, 43]. <p> The first PRM methods [32] generate nodes by uniformly sampling C-space (retaining collision-free configurations); roadmaps are enhanced by further sampling in `difficult' regions. Some methods use information about the environment 1 to guide node generation. For example, the obstacle-based PRM, or OBPRM <ref> [3, 4] </ref>, samples points near C--obstacle surfaces, the method in [20] employs random reflections at C-obstacle surfaces, and a technique called geometric node adding is used in [43] to generate robot configurations near obstacle boundaries. <p> However, most of these analyzes make simplifying assumptions regarding the nature of the C-space and/or the PRM components (e.g., local planner), and therefore are not applicable to all PRMs (e.g., they cannot be applied to OBPRM <ref> [3, 4] </ref>.) 1.2 Outline of the paper We describe the various distance metrics and local planners evaluated, including relevant previous work, in Sections 2 and 3, respectively. <p> The rings were intertwined in all RdmpCfgs and TestCfgs. RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., <ref> [3, 4, 7, 20, 28, 32, 42] </ref>). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes. <p> RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., [3, 4, 7, 20, 28, 32, 42]). We used the method described in <ref> [3, 4] </ref> to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes. Next, for each local planner, we tried to connect each configuration in TestCfgs to every configuration in RdmpCfgs. 12 LOCAL Successful Failed PLANNER Time (sec) Coll.
Reference: [4] <author> N. M. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 113120, </pages> <address> Minneapolis, MN, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: FIND PATH IN ROADMAP BETWEEN CONNECTION NODES PRMs have been shown to perform well in practice. In particular, after the roadmap is constructed during preprocessing, many difficult planning queries can be answered very quickly (in fractions of seconds) <ref> [3, 4, 32] </ref>. Although these methods are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap [22, 43]. <p> The first PRM methods [32] generate nodes by uniformly sampling C-space (retaining collision-free configurations); roadmaps are enhanced by further sampling in `difficult' regions. Some methods use information about the environment 1 to guide node generation. For example, the obstacle-based PRM, or OBPRM <ref> [3, 4] </ref>, samples points near C--obstacle surfaces, the method in [20] employs random reflections at C-obstacle surfaces, and a technique called geometric node adding is used in [43] to generate robot configurations near obstacle boundaries. <p> However, most of these analyzes make simplifying assumptions regarding the nature of the C-space and/or the PRM components (e.g., local planner), and therefore are not applicable to all PRMs (e.g., they cannot be applied to OBPRM <ref> [3, 4] </ref>.) 1.2 Outline of the paper We describe the various distance metrics and local planners evaluated, including relevant previous work, in Sections 2 and 3, respectively. <p> Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., <ref> [4, 22, 29] </ref>). Similar, but slightly more sophisticated approaches use weighted Euclidean distances, that is, Euclidean distances where each coordinate is given a `suitable' weight (see, e.g., [17, 34]); this is a common approach for articulated robots, where links closer to the base are given larger weights. <p> The rings were intertwined in all RdmpCfgs and TestCfgs. RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., <ref> [3, 4, 7, 20, 28, 32, 42] </ref>). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes. <p> RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., [3, 4, 7, 20, 28, 32, 42]). We used the method described in <ref> [3, 4] </ref> to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes. Next, for each local planner, we tried to connect each configuration in TestCfgs to every configuration in RdmpCfgs. 12 LOCAL Successful Failed PLANNER Time (sec) Coll.
Reference: [5] <author> J. Barraquand, L.E. Kavraki, J.C. Latombe, T.Y. Li, R. Motwani, and P. Raghavan. </author> <title> A random sampling scheme for path planning. </title> <institution> Int. J. of Rob. Res, 16(6):759774, </institution> <year> 1997. </year>
Reference-contexts: Recently, some good efforts have been made in this direction, e.g., * goodness <ref> [5, 31] </ref> and expansiveness [22]. Briefly, an environment is *good if every configuration can see (i.e. be connected to using the chosen local planner) an * f raction of the free C-space. The larger an environment's *, the easier it is. Expansiveness is a related, slightly more complex characterization.
Reference: [6] <author> J. Barraquand, B. Langlois, and J.-C. Latombe. </author> <title> Numerical potential field techniques for robot path planning. </title> <journal> IEEE Trans. Sys., Man, Cybern., </journal> <volume> 22(2):224241, </volume> <year> 1992. </year>
Reference-contexts: The Randomized Path Planner (RPP) [7] uses random walks to attempt to escape local minima; it often works well for many dof robots, but there are simple situations in which it performs poorly [10, 30]. Researchers have proposed various potential functions (e.g., <ref> [6] </ref>) and other techniques, such as learning [15], for escaping local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist common situations in which they can fail [10, 30]. PRMs: Probabilistic Roadmap Methods. <p> STRAIGHT-LINE (c 1 ; c 2 ) INPUT: c 1 , c 2 OUTPUT:YES/NO nsteps := no. intermediate configs I <ref> [1; 6] </ref> := increment for each coord c := c 1 for step := 1 to nsteps c := c + I if (c in collision) return NO endfor return YES end ROTATE-AT-S (c 1 ; c 2 ; s;) INPUT: c 1 , c 2 , s OUTPUT:YES/NO (x 0
Reference: [7] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <type> Internat. </type> <institution> J. Robot. Res., 10(6):628649, </institution> <year> 1991. </year>
Reference-contexts: For this reason, attention has focused on randomized or probabilistic motion planning methods. Notable among these are randomized potential field methods. The Randomized Path Planner (RPP) <ref> [7] </ref> uses random walks to attempt to escape local minima; it often works well for many dof robots, but there are simple situations in which it performs poorly [10, 30]. Researchers have proposed various potential functions (e.g., [6]) and other techniques, such as learning [15], for escaping local minima. <p> The rings were intertwined in all RdmpCfgs and TestCfgs. RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., <ref> [3, 4, 7, 20, 28, 32, 42] </ref>). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes.
Reference: [8] <author> P. Bessiere, J. M.Ahuactzin, E.-G. Talbi, and E. Mazer. </author> <title> The Ariadne's Clew Algorithm: Global planning with local methods. </title> <booktitle> In Proc. IEEE Internat. Conf. Intel. Rob. Syst. (IROS), </booktitle> <volume> volume 2, </volume> <pages> pages 13731380, </pages> <year> 1993. </year>
Reference-contexts: Although our study is motivated by our interest in PRMs, we believe our conclusions will be useful for other motion planning approaches as well particularly those employing `local planners' (e.g., <ref> [8, 38, 50] </ref>). 2 We remark that the goal of our study is to provide empirical evidence that certain combinations of distance metrics and local planners perform well for PRMs for certain types of problems.

Reference: [10] <author> D. J. Challou, M. Gini, and V. Kumar. </author> <title> Parallel search algorithms for robot motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 2, </volume> <pages> pages 4651, </pages> <year> 1993. </year>
Reference-contexts: Notable among these are randomized potential field methods. The Randomized Path Planner (RPP) [7] uses random walks to attempt to escape local minima; it often works well for many dof robots, but there are simple situations in which it performs poorly <ref> [10, 30] </ref>. Researchers have proposed various potential functions (e.g., [6]) and other techniques, such as learning [15], for escaping local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist common situations in which they can fail [10, 30]. <p> it performs poorly <ref> [10, 30] </ref>. Researchers have proposed various potential functions (e.g., [6]) and other techniques, such as learning [15], for escaping local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist common situations in which they can fail [10, 30]. PRMs: Probabilistic Roadmap Methods. Recently, a new class of randomized motion planning methods has gained much attention [1, 3, 4, 7, 5, 20, 21, 22, 28, 30, 32, 42, 43].
Reference: [11] <author> H. Chang and T. Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 10121019, </pages> <year> 1995. </year>
Reference-contexts: In particular, we present a comparative evaluation of distance metrics and local planners. We consider both C-space and Workspace distance metrics and local planners. Our study concentrates on cluttered three-dimensional Workspaces typical, e.g., of mechanical designs <ref> [11] </ref>. The moving objects (robots) are rigid, non-articulated objects yielding six-dimensional C-spaces. The results of our study include recommendations for selecting appropriate combinations of distance metrics and local planners for use in PRMs.
Reference: [12] <author> P. C. Chen and Y. K. Hwang. SANDROS: </author> <title> A motion planner with performance proportional to task difficulty. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 23462353, </pages> <year> 1992. </year>
Reference-contexts: Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [12, 17, 24, 25, 50] </ref>), iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance from obstacles.
Reference: [13] <author> D.P. Dobkin, J. Hershberger, D.G. Kirkpatrick, and S. Suri. </author> <title> Computing the intersection depth of polyhedra. </title> <journal> Algorithmica, </journal> <volume> 9:518533, </volume> <year> 1993. </year>
Reference-contexts: In [16], a fast algorithm to find the minimum distance between two convex objects is given. In [46] a similar distance metric is defined for non-convex objects that can be computed using a hierarchical bounding representation. Other approaches to minimum distance can be found in <ref> [13, 27, 36, 37, 40] </ref> Many metrics have been defined that have not (yet) been used with PRMs. For example, Hausdorff distance [18] which is a Euclidean based metric.
Reference: [14] <author> B. R. Donald. </author> <title> A search algorithm for motion planning with six degrees of freedom. </title> <booktitle> Artif. Intell., </booktitle> <address> 31(3):295353, </address> <year> 1987. </year>
Reference-contexts: A related idea is to use a sample of free points to specify promising subgoals for planning <ref> [14, 17] </ref>. PRMs can differ according to the high-level strategy decisions used during roadmap construction, that is, how nodes are generated and connected, and how the initial roadmaps are improved.
Reference: [15] <author> B. Faverjon and P. Tournassoud. </author> <title> A practical approach to motion-planning for manipulators with many degrees of freedom. </title> <editor> In H. Miura and S. Arimoto, editors, </editor> <booktitle> Robotics Research 5. </booktitle> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The Randomized Path Planner (RPP) [7] uses random walks to attempt to escape local minima; it often works well for many dof robots, but there are simple situations in which it performs poorly [10, 30]. Researchers have proposed various potential functions (e.g., [6]) and other techniques, such as learning <ref> [15] </ref>, for escaping local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist common situations in which they can fail [10, 30]. PRMs: Probabilistic Roadmap Methods.
Reference: [16] <author> E.G. Gilbert, D.W. Johnson, and S.S. Keerthi. </author> <title> A fast procedure for computing the distance between complex robots in three-dimensional space. </title> <journal> IEEE Trans. Rob. and Aut., </journal> <volume> (4):193203, </volume> <year> 1988. </year>
Reference-contexts: In [1], a distance is computed based on the differences between unit vectors on the object's local reference frame in the two configurations. A way to define the distance between two configurations is to find the minimum distance between any point on robot in both configurations. In <ref> [16] </ref>, a fast algorithm to find the minimum distance between two convex objects is given. In [46] a similar distance metric is defined for non-convex objects that can be computed using a hierarchical bounding representation.
Reference: [17] <author> B. Glavina. </author> <title> Solving findpath by combination of directed and randomized search. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 17181723, </pages> <year> 1990. </year>
Reference-contexts: A related idea is to use a sample of free points to specify promising subgoals for planning <ref> [14, 17] </ref>. PRMs can differ according to the high-level strategy decisions used during roadmap construction, that is, how nodes are generated and connected, and how the initial roadmaps are improved. <p> Similar, but slightly more sophisticated approaches use weighted Euclidean distances, that is, Euclidean distances where each coordinate is given a `suitable' weight (see, e.g., <ref> [17, 34] </ref>); this is a common approach for articulated robots, where links closer to the base are given larger weights. The metric used in [22] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. <p> Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [12, 17, 24, 25, 50] </ref>), iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance from obstacles.
Reference: [18] <author> B. Grunbaum. Convex Poyltopes. Wiley-Intersciences, </author> <year> 1967. </year>
Reference-contexts: Other approaches to minimum distance can be found in [13, 27, 36, 37, 40] Many metrics have been defined that have not (yet) been used with PRMs. For example, Hausdorff distance <ref> [18] </ref> which is a Euclidean based metric. Given two objects in contact but not collision, the rotation distance [52] is defined as the shortest contact-constrained rotation of the first object that collides with the second. <p> Although there are many other types of metrics, such as Rieman-nian [48], we did not select them since they require expensive computations and are not suitable for PRMs. Similarly, for efficiency considerations, we did not use any of the more sophisticated Euclidean-based met-rics, such as the Hausdorff distance <ref> [18] </ref> (its complexity depends on the number of vertices). 5 The first Workspace metric we studied is the Euclidean distance between the center of mass of the robot in the two configurations; the center of mass is approximated by averaging all object vertices.
Reference: [19] <author> K. K. Gupta and Z. Guo. </author> <title> Motion planning for many degrees of freedom: Sequential search with backtracking. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 11(6):897906, </volume> <year> 1995. </year>
Reference-contexts: Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 19, 20, 38] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times.
Reference: [20] <author> T. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion planning for many degrees of freedom random reflections at c-space obstacles. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 33183323, </pages> <year> 1994. </year>
Reference-contexts: Some methods use information about the environment 1 to guide node generation. For example, the obstacle-based PRM, or OBPRM [3, 4], samples points near C--obstacle surfaces, the method in <ref> [20] </ref> employs random reflections at C-obstacle surfaces, and a technique called geometric node adding is used in [43] to generate robot configurations near obstacle boundaries. In [21], a roadmap is first built in a dilated free-space, and then efforts are made to push it into the true free-space by resampling. <p> Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 19, 20, 38] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times. <p> The rings were intertwined in all RdmpCfgs and TestCfgs. RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., <ref> [3, 4, 7, 20, 28, 32, 42] </ref>). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes.
Reference: [21] <author> D. Hsu, L.E. Kavraki, J.C. Latombe, R. Motwani, and S. Sorkin. </author> <title> On finding narrow passages with probabilistic roadmap planners. </title> <booktitle> In Proc. Intern. Workshop on Algorithmic Foundations of Robotics (WAFR), </booktitle> <year> 1998. </year>
Reference-contexts: For example, the obstacle-based PRM, or OBPRM [3, 4], samples points near C--obstacle surfaces, the method in [20] employs random reflections at C-obstacle surfaces, and a technique called geometric node adding is used in [43] to generate robot configurations near obstacle boundaries. In <ref> [21] </ref>, a roadmap is first built in a dilated free-space, and then efforts are made to push it into the true free-space by resampling.

Reference: [23] <author> Y. Hwang and N. Ahuja. </author> <title> Gross motion planning a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3):219291, </volume> <year> 1992. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [23, 35] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [47]. For this reason, attention has focused on randomized or probabilistic motion planning methods.
Reference: [24] <author> Y. K. Hwang and N. Ahuja. </author> <title> A potential field approach to path planning. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 8(1):2332, </volume> <year> 1992. </year>
Reference-contexts: Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [12, 17, 24, 25, 50] </ref>), iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance from obstacles.
Reference: [25] <author> Y. K. Hwang and P. C. Chen. </author> <title> A heuristic and complete planner for the classical mover's problem. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 729736, </pages> <year> 1995. </year>
Reference-contexts: Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [12, 17, 24, 25, 50] </ref>), iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance from obstacles.
Reference: [26] <author> Yong K. Hwang and Pang C. Chen. </author> <title> A heuristic and compete planner for the classical mover's problem. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 729736, </pages> <year> 1995. </year>
Reference-contexts: Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 19, 20, 38]). Many planners have been based on the A fl search strategy (see, e.g., <ref> [26, 33, 39] </ref>). These methods are not always suitable for use as dumb planners since they may have large running times. <p> can have unbounded running times, planning is often halted after some set maximum number of iterations. (See Figures 2 (c) and 3 (c).) 7 Most A fl -like planning methods are `stand-alone' planners that are too slow to be used as a dumb local planner in a PRM (see, e.g., <ref> [26, 33, 39] </ref>). However, they can be made faster by decreasing the number of neighbors checked and/or the maximum number of steps in the search. Our A fl -like methods do both.
Reference: [27] <author> P. Jimenez, F. Thomas, and C. Torras. </author> <title> Collision Detection algorithms for Motion Planning. Robot Motion Planning and Control. </title> <editor> (ed.) J.P. Laumond. </editor> <booktitle> Lecture Notes in Control and Info. </booktitle> <address> Sc., 229, </address> <publisher> Springer, </publisher> <address> New York, NY, </address> <year> 1998. </year>
Reference-contexts: In [16], a fast algorithm to find the minimum distance between two convex objects is given. In [46] a similar distance metric is defined for non-convex objects that can be computed using a hierarchical bounding representation. Other approaches to minimum distance can be found in <ref> [13, 27, 36, 37, 40] </ref> Many metrics have been defined that have not (yet) been used with PRMs. For example, Hausdorff distance [18] which is a Euclidean based metric.
Reference: [28] <author> L. Kavraki. </author> <title> Random Networks in Configuration Space for Fast Path Planning. </title> <type> PhD thesis, </type> <institution> Stanfort Univ, Comp.Sc.Dept., </institution> <year> 1995. </year>
Reference-contexts: The rings were intertwined in all RdmpCfgs and TestCfgs. RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., <ref> [3, 4, 7, 20, 28, 32, 42] </ref>). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes.
Reference: [29] <author> L. Kavraki, M. Kolountzakis, and J.-C. Latombe. </author> <title> Analysis of probabilistic roadmaps for path planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 4, </volume> <pages> pages 30203025, </pages> <year> 1996. </year>
Reference-contexts: We seek empirical evidence due to the randomized nature of PRMs, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of PRMs (see, e.g., <ref> [22, 29, 31] </ref>). <p> Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., <ref> [4, 22, 29] </ref>). Similar, but slightly more sophisticated approaches use weighted Euclidean distances, that is, Euclidean distances where each coordinate is given a `suitable' weight (see, e.g., [17, 34]); this is a common approach for articulated robots, where links closer to the base are given larger weights. <p> Perhaps the most used local planner is the straight-line in C-space which tests configurations (at a sufficient resolution) along that line for collision (see, e.g., <ref> [22, 29, 49] </ref>). Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 19, 20, 38]).
Reference: [30] <author> L. Kavraki and J. C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 21382145, </pages> <year> 1994. </year>
Reference-contexts: Notable among these are randomized potential field methods. The Randomized Path Planner (RPP) [7] uses random walks to attempt to escape local minima; it often works well for many dof robots, but there are simple situations in which it performs poorly <ref> [10, 30] </ref>. Researchers have proposed various potential functions (e.g., [6]) and other techniques, such as learning [15], for escaping local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist common situations in which they can fail [10, 30]. <p> it performs poorly <ref> [10, 30] </ref>. Researchers have proposed various potential functions (e.g., [6]) and other techniques, such as learning [15], for escaping local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist common situations in which they can fail [10, 30]. PRMs: Probabilistic Roadmap Methods. Recently, a new class of randomized motion planning methods has gained much attention [1, 3, 4, 7, 5, 20, 21, 22, 28, 30, 32, 42, 43].
Reference: [31] <author> L. Kavraki, J. C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Randomized query preprocessing in robot path planning. </title> <booktitle> In Proc. ACM Symp. Theory of Computing (STOC), </booktitle> <pages> pages 353362, </pages> <year> 1995. </year>
Reference-contexts: We seek empirical evidence due to the randomized nature of PRMs, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of PRMs (see, e.g., <ref> [22, 29, 31] </ref>). <p> Recently, some good efforts have been made in this direction, e.g., * goodness <ref> [5, 31] </ref> and expansiveness [22]. Briefly, an environment is *good if every configuration can see (i.e. be connected to using the chosen local planner) an * f raction of the free C-space. The larger an environment's *, the easier it is. Expansiveness is a related, slightly more complex characterization.
Reference: [32] <author> L. Kavraki, P. Svestka, J. C. Latombe, and M. Overmars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration spaces. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 12(4):566580, </volume> <month> August </month> <year> 1996. </year>
Reference-contexts: FIND PATH IN ROADMAP BETWEEN CONNECTION NODES PRMs have been shown to perform well in practice. In particular, after the roadmap is constructed during preprocessing, many difficult planning queries can be answered very quickly (in fractions of seconds) <ref> [3, 4, 32] </ref>. Although these methods are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap [22, 43]. <p> PRMs can differ according to the high-level strategy decisions used during roadmap construction, that is, how nodes are generated and connected, and how the initial roadmaps are improved. The first PRM methods <ref> [32] </ref> generate nodes by uniformly sampling C-space (retaining collision-free configurations); roadmaps are enhanced by further sampling in `difficult' regions. Some methods use information about the environment 1 to guide node generation. <p> The rings were intertwined in all RdmpCfgs and TestCfgs. RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., <ref> [3, 4, 7, 20, 28, 32, 42] </ref>). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes. <p> There are a number of roadmap node generation strategies (e.g., [3, 4, 7, 20, 28, 32, 42]). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in <ref> [32] </ref> for free space nodes. Next, for each local planner, we tried to connect each configuration in TestCfgs to every configuration in RdmpCfgs. 12 LOCAL Successful Failed PLANNER Time (sec) Coll. Checks Time (sec) Coll.
Reference: [33] <author> K. Kondo. </author> <title> Motion planning with six degrees of freedom by multistrategic bidirectional heuristic free space enumeration. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 7(3):267277, </volume> <year> 1992. </year>
Reference-contexts: Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 19, 20, 38]). Many planners have been based on the A fl search strategy (see, e.g., <ref> [26, 33, 39] </ref>). These methods are not always suitable for use as dumb planners since they may have large running times. <p> can have unbounded running times, planning is often halted after some set maximum number of iterations. (See Figures 2 (c) and 3 (c).) 7 Most A fl -like planning methods are `stand-alone' planners that are too slow to be used as a dumb local planner in a PRM (see, e.g., <ref> [26, 33, 39] </ref>). However, they can be made faster by decreasing the number of neighbors checked and/or the maximum number of steps in the search. Our A fl -like methods do both.
Reference: [34] <author> E. Kruse, R. Gutsche, and F. Wahl. </author> <title> Efficient, iterative, sensor based 3-d map building using rating functions in configuration space. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 2, </volume> <pages> pages 10671072, </pages> <year> 1996. </year>
Reference-contexts: Similar, but slightly more sophisticated approaches use weighted Euclidean distances, that is, Euclidean distances where each coordinate is given a `suitable' weight (see, e.g., <ref> [17, 34] </ref>); this is a common approach for articulated robots, where links closer to the base are given larger weights. The metric used in [22] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations.
Reference: [35] <author> J. C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [23, 35] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [47]. For this reason, attention has focused on randomized or probabilistic motion planning methods. <p> mentioned in Section 1, a full PRM will also need a smart local planner to enhance the roadmap and for use during query processing. 3.1 Previous work We mention here just a few of the many methods that could potentially be used as (dumb) local planners in PRMs (see, e.g., <ref> [35] </ref>). Perhaps the most used local planner is the straight-line in C-space which tests configurations (at a sufficient resolution) along that line for collision (see, e.g., [22, 29, 49]).
Reference: [36] <author> M. Lin and J. Canny. </author> <title> A fast algorithm for incremental distance computation. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 602608, </pages> <year> 1994. </year>
Reference-contexts: In [16], a fast algorithm to find the minimum distance between two convex objects is given. In [46] a similar distance metric is defined for non-convex objects that can be computed using a hierarchical bounding representation. Other approaches to minimum distance can be found in <ref> [13, 27, 36, 37, 40] </ref> Many metrics have been defined that have not (yet) been used with PRMs. For example, Hausdorff distance [18] which is a Euclidean based metric.
Reference: [37] <author> M. Lin, D. Manocha, J. Cohen, and S. Gottschalk. </author> <title> Collision Detection: Algorithms and Applications. Algorithmic foundations of Robotics, </title> <editor> Goldberg et al. (Eds.), A K Peters, </editor> <publisher> Ltd., </publisher> <year> 1995. </year>
Reference-contexts: In [16], a fast algorithm to find the minimum distance between two convex objects is given. In [46] a similar distance metric is defined for non-convex objects that can be computed using a hierarchical bounding representation. Other approaches to minimum distance can be found in <ref> [13, 27, 36, 37, 40] </ref> Many metrics have been defined that have not (yet) been used with PRMs. For example, Hausdorff distance [18] which is a Euclidean based metric.
Reference: [38] <author> A. McLean and I. Mazon. </author> <title> Incremental roadmaps and global path planning in evolving industrial environments. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 101107, </pages> <year> 1996. </year>
Reference-contexts: Although our study is motivated by our interest in PRMs, we believe our conclusions will be useful for other motion planning approaches as well particularly those employing `local planners' (e.g., <ref> [8, 38, 50] </ref>). 2 We remark that the goal of our study is to provide empirical evidence that certain combinations of distance metrics and local planners perform well for PRMs for certain types of problems. <p> Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 19, 20, 38] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times.
Reference: [39] <author> C. Mirolo and E. Pagello. </author> <title> A practical motion planning strategy based on plane-sweep approach. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 27052712, </pages> <year> 1997. </year>
Reference-contexts: Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 19, 20, 38]). Many planners have been based on the A fl search strategy (see, e.g., <ref> [26, 33, 39] </ref>). These methods are not always suitable for use as dumb planners since they may have large running times. <p> can have unbounded running times, planning is often halted after some set maximum number of iterations. (See Figures 2 (c) and 3 (c).) 7 Most A fl -like planning methods are `stand-alone' planners that are too slow to be used as a dumb local planner in a PRM (see, e.g., <ref> [26, 33, 39] </ref>). However, they can be made faster by decreasing the number of neighbors checked and/or the maximum number of steps in the search. Our A fl -like methods do both.
Reference: [40] <author> B. Mirtich. V-clip: </author> <title> A fast and robust polyhedral collision detection. </title> <type> Technical Report TR97-05, </type> <institution> Mitsubishi El. Res. Lab., </institution> <address> Cambridge, MA, </address> <year> 1997. </year>
Reference-contexts: In [16], a fast algorithm to find the minimum distance between two convex objects is given. In [46] a similar distance metric is defined for non-convex objects that can be computed using a hierarchical bounding representation. Other approaches to minimum distance can be found in <ref> [13, 27, 36, 37, 40] </ref> Many metrics have been defined that have not (yet) been used with PRMs. For example, Hausdorff distance [18] which is a Euclidean based metric.
Reference: [41] <author> C. J. Ong and E. G. Gilbert. </author> <title> Growth distances: New measures for object separation and penetration. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 12(6):888903, </volume> <year> 1996. </year>
Reference-contexts: Given two objects in contact but not collision, the rotation distance [52] is defined as the shortest contact-constrained rotation of the first object that collides with the second. Another interesting example is the growth distance defined for convex polyhedra in <ref> [41] </ref> which is the amount objects must be grown from their internal seed points until their surfaces touch.
Reference: [42] <author> M. Overmars. </author> <title> A random approach to path planning. </title> <type> Technical Report RUU-CS-92-32, </type> <institution> Computer Science, Utrecht University, </institution> <address> The Netherlands, </address> <year> 1992. </year> <month> 27 </month>
Reference-contexts: The rings were intertwined in all RdmpCfgs and TestCfgs. RdmpCfgs and the 50 surface TestCfgswere uniformly distributed around, but contacting, each edge. The free TestCfgs were also intertwined but contact was not required. There are a number of roadmap node generation strategies (e.g., <ref> [3, 4, 7, 20, 28, 32, 42] </ref>). We used the method described in [3, 4] to generate configurations near the surfaces of C-Space obstacles, and the method described in [32] for free space nodes.
Reference: [43] <author> M. Overmars and P. Svestka. </author> <title> A probabilistic learning approach to motion planning. </title> <booktitle> In Proc. Workshop on Algorithmic Foundations of Robotics, pages 1937, </booktitle> <year> 1994. </year>
Reference-contexts: Although these methods are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap <ref> [22, 43] </ref>. A related idea is to use a sample of free points to specify promising subgoals for planning [14, 17]. PRMs can differ according to the high-level strategy decisions used during roadmap construction, that is, how nodes are generated and connected, and how the initial roadmaps are improved. <p> Some methods use information about the environment 1 to guide node generation. For example, the obstacle-based PRM, or OBPRM [3, 4], samples points near C--obstacle surfaces, the method in [20] employs random reflections at C-obstacle surfaces, and a technique called geometric node adding is used in <ref> [43] </ref> to generate robot configurations near obstacle boundaries. In [21], a roadmap is first built in a dilated free-space, and then efforts are made to push it into the true free-space by resampling.
Reference: [44] <author> F.C. Park. </author> <title> Distance metrics on the rigid-body motions with applications to mechanism design. </title> <journal> ASME Journal of Mechanical Design, </journal> <volume> 117(1):4854, </volume> <year> 1995. </year>
Reference-contexts: In [48], C-Space is viewed as a Riemannian manifold by defining an inner product on every tangent space in C-space. In general, Riemannian metrics can be seen as the means by which familiar Euclidean concepts like lengths, angles and volumes can be extended to abstract differentiable manifolds. In <ref> [44, 45] </ref>, the concept of metrics invariant with respect to the choice of coordinate axis for the Euclidean group in three-dimensions (SE (3)) is investigated, and a left invariant Riemannian metric is suggested. A Riemannian metric provides a notion of the length of a curve on a manifold.
Reference: [45] <author> F.C. Park and R.W. Brockett. </author> <title> Kinematic dexterity of robotic mechanisms. </title> <type> Internat. </type> <institution> J. Robot. Res., 13(1):115, </institution> <year> 1994. </year>
Reference-contexts: In [48], C-Space is viewed as a Riemannian manifold by defining an inner product on every tangent space in C-space. In general, Riemannian metrics can be seen as the means by which familiar Euclidean concepts like lengths, angles and volumes can be extended to abstract differentiable manifolds. In <ref> [44, 45] </ref>, the concept of metrics invariant with respect to the choice of coordinate axis for the Euclidean group in three-dimensions (SE (3)) is investigated, and a left invariant Riemannian metric is suggested. A Riemannian metric provides a notion of the length of a curve on a manifold.
Reference: [46] <author> S. Quinlan. </author> <title> Efficient distance computation between non-convex objects. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 33243330, </pages> <year> 1994. </year>
Reference-contexts: A way to define the distance between two configurations is to find the minimum distance between any point on robot in both configurations. In [16], a fast algorithm to find the minimum distance between two convex objects is given. In <ref> [46] </ref> a similar distance metric is defined for non-convex objects that can be computed using a hierarchical bounding representation. Other approaches to minimum distance can be found in [13, 27, 36, 37, 40] Many metrics have been defined that have not (yet) been used with PRMs.
Reference: [47] <author> J. Reif. </author> <title> Complexity of the piano mover's problem and generalizations. </title> <booktitle> In Proc. IEEE Symp. Foundations of Computer Science (FOCS), </booktitle> <pages> pages 421427, </pages> <year> 1979. </year>
Reference-contexts: Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot <ref> [47] </ref>. For this reason, attention has focused on randomized or probabilistic motion planning methods. Notable among these are randomized potential field methods.
Reference: [48] <author> M. Spivak. </author> <title> Comprehensive Introduction to Differential Geometry. </title> <address> Publish or Perish, Wilmington, DE, </address> <year> 1979. </year>
Reference-contexts: Another common metric used for rigid body kinematic analysis and robot trajectory planning is the Riemannian metric. In <ref> [48] </ref>, C-Space is viewed as a Riemannian manifold by defining an inner product on every tangent space in C-space. In general, Riemannian metrics can be seen as the means by which familiar Euclidean concepts like lengths, angles and volumes can be extended to abstract differentiable manifolds. <p> Workspace metrics. The Workspace metrics we chose to study are all simple metrics based on Euclidean distances in the Workspace (see Table 1). Although there are many other types of metrics, such as Rieman-nian <ref> [48] </ref>, we did not select them since they require expensive computations and are not suitable for PRMs.
Reference: [49] <author> M. Tarokh. </author> <title> Implementation of a fast path planner on an industrial manipulator. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 436441, </pages> <year> 1996. </year>
Reference-contexts: Perhaps the most used local planner is the straight-line in C-space which tests configurations (at a sufficient resolution) along that line for collision (see, e.g., <ref> [22, 29, 49] </ref>). Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 19, 20, 38]).
Reference: [50] <author> P. Watterberg, P. Xavier, and Y. Hwang. </author> <title> Path planning for everyday robotics with sandros. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 11701175, </pages> <year> 1997. </year>
Reference-contexts: Although our study is motivated by our interest in PRMs, we believe our conclusions will be useful for other motion planning approaches as well particularly those employing `local planners' (e.g., <ref> [8, 38, 50] </ref>). 2 We remark that the goal of our study is to provide empirical evidence that certain combinations of distance metrics and local planners perform well for PRMs for certain types of problems. <p> Many planners have been based on the A fl search strategy (see, e.g., [26, 33, 39]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [12, 17, 24, 25, 50] </ref>), iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance from obstacles.
Reference: [51] <author> P. Xavier. </author> <title> Fast swept-volume distance for robust collision detection. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 11621169, </pages> <year> 1997. </year>
Reference-contexts: that C-space is not a Euclidean space, and thus our intuitive notions of closeness are not necessarily meaningful. 2.1 Previous work Intuitively, a good measure of the distance between two configurations is a measure of the workspace region swept by the robot as it moves between them (the swept volume <ref> [51] </ref>). Unfortunately, the computation of such a metric would be prohibitively expensive for a PRM (and would also rely explicitly on the local planner).
Reference: [52] <author> J. Xiao and L. Zhang. </author> <title> Computing rotation distance between contacting polyhedra. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 791797, </pages> <year> 1996. </year>
Reference-contexts: Other approaches to minimum distance can be found in [13, 27, 36, 37, 40] Many metrics have been defined that have not (yet) been used with PRMs. For example, Hausdorff distance [18] which is a Euclidean based metric. Given two objects in contact but not collision, the rotation distance <ref> [52] </ref> is defined as the shortest contact-constrained rotation of the first object that collides with the second. Another interesting example is the growth distance defined for convex polyhedra in [41] which is the amount objects must be grown from their internal seed points until their surfaces touch.
Reference: [53] <author> M. Zefran, V. Kumar, and C. Croke. </author> <title> Metrics and connections for rigit body kinematics. </title> <note> Submitted to Internat. J. </note> <institution> Robot. Res., </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Curves that minimize the energy between two points are called geodesics. Geodesics can be considered a generalization of straight lines in Euclidean space to Riemannian manifolds. The existence of a Riemannian metric whose geodesics is screw motions are further investigated in <ref> [53, 54] </ref>. 2.2 Distance metrics evaluated The moving objects (robots) considered in our study were rigid objects in three-space. We represent configurations using six-tuples (x; y; z; ff; fi; fl), where the first three coordinates define the position and the last three the orientation.

References-found: 51

