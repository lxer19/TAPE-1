URL: http://www.ai.univie.ac.at/%7Epaolo/lva/vu-sa/ps/mobagtibm.ps.gz
Refering-URL: http://www.ai.univie.ac.at/%7Epaolo/lva/vu-sa/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Mobile Agents: Are They a Good Idea?  
Author: David Chess, Colin Harrison, Aaron Kershenbaum 
Keyword: LIMITED DISTRIBUTION NOTICE  
Affiliation: IBM Research Division T.J. Watson Research Center  IBM Research Division Almaden T.J. Watson Tokyo Zurich  
Address: 19887 (88465) (12/21/94) Declassified 3/16/95  Yorktown Heights, New York  
Note: RC  Subject Area: Computer Science/Mathematics 23 pages IBM Research Report  
Abstract: This report has been submitted for publication outside of IBM and will probably be copyrighted if accepted for publication. It has been issued as a Research Report for early dissemination of its contents. In view of the transfer of copyright to the outside publisher, its distribution outside of IBM prior to publication should be limited to peer communications and specific requests. After outside publication, requests should be filled only by reprints or legally obtained copies of the article (e.g., payment of royalties). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Selected Examples of distributed Applications. Number GG24-4167-00. IBM Corporation, </institution> <address> Armonk, NY, </address> <year> 1994. </year>
Reference-contexts: The client application composes a message, typically composed of tagged or structured text, which is to be delivered to an appropriate software processor for the type of message. Messaging systems may employ a message transport service provided by by an electronic mail service, for example, Message Queuing Series <ref> [1] </ref>, Simple Mail Transport Protocol [18], Vendor Independent Messaging [2]. The required processor type is indicated in the message header. The message is generally addressed indirectly, that is, the client may not know the explicit network address or even the identity of the destination server.
Reference: [2] <author> No author given. </author> <title> VIM Functional Specification Version 1.0. Lotus Development Corporation, </title> <year> 1992. </year>
Reference-contexts: Messaging systems may employ a message transport service provided by by an electronic mail service, for example, Message Queuing Series [1], Simple Mail Transport Protocol [18], Vendor Independent Messaging <ref> [2] </ref>. The required processor type is indicated in the message header. The message is generally addressed indirectly, that is, the client may not know the explicit network address or even the identity of the destination server.
Reference: [3] <author> No author given. </author> <title> Oracle in Motion. </title> <publisher> Oracle Corporation, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: However, we have seen that this is a property of any message-based system, and does not require in itself programmable agents. Message buffering on the client device (inbound) and on the communication server (outbound) are well known features <ref> [3] </ref>. * Remote searching and filtering. If all information were stored in structured databases, it would suffice to send a message to the server containing SQL statements and perhaps perform backend filtering on the search results.
Reference: [4] <author> Paula Bernier. </author> <title> Telescript's agents do the job. Telephony, </title> <address> 226(3):16, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: This is effectively a form of semantic routing. In the AT&T Personalink service <ref> [4] </ref>. is transported by courier agents, which are programmed in Telescript.
Reference: [5] <author> A. Birrell and B. J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems 2 </journal> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: The dominant methods are messaging [9]., simple datagrams [21], sockets [19], remote procedure call <ref> [5] </ref>, and conversations [8]. The primary distinction among these is between asynchronous protocols, for example, messaging, and synchronous protocols, for example, RPC. Mobile agents employ messaging frameworks for transport, and hence are asynchronous.
Reference: [6] <author> J. K. Boggs. </author> <title> IBM Remote Job Entry Facility: Generalized Subsystem Remote Job Entry Facility. </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 752, </volume> <month> August </month> <year> 1973. </year>
Reference-contexts: Mobile agent-based computing may be viewed as an extension of well-known methods of remote dispatch of script programs [10]. or remote submission of batch jobs <ref> [6] </ref>. The most significant of the extensions lie in the area of security, since an important goal of this work is to enable spontaneous electronic commerce; that is commerce which does not require the prior conclusion of a trading contract between the two parties.
Reference: [7] <author> F. Cohen. </author> <title> Computer Viruses: Theory and Experiment. </title> <booktitle> Computers and Security 6 </booktitle> <pages> 22-35, </pages> <year> 1987. </year>
Reference-contexts: a file system, in this language, and there could be virtual viruses within that system, but that is not of practical relevance.) Turing completeness only comes in very slightly: if you have a language that includes the ability to implement the "spread" operation, and the language is Turing-complete, then Cohen <ref> [7] </ref>. has shown that perfect virus detection is impossible.
Reference: [8] <author> R. J. Cypser. </author> <booktitle> Communications for cooperating systems, </booktitle> <pages> pages 232-241. </pages> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: The dominant methods are messaging [9]., simple datagrams [21], sockets [19], remote procedure call [5], and conversations <ref> [8] </ref>. The primary distinction among these is between asynchronous protocols, for example, messaging, and synchronous protocols, for example, RPC. Mobile agents employ messaging frameworks for transport, and hence are asynchronous.
Reference: [9] <author> R. J. Cypser. </author> <booktitle> Communications for cooperating systems, </booktitle> <pages> pages 244-245. </pages> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: The dominant methods are messaging <ref> [9] </ref>., simple datagrams [21], sockets [19], remote procedure call [5], and conversations [8]. The primary distinction among these is between asynchronous protocols, for example, messaging, and synchronous protocols, for example, RPC. Mobile agents employ messaging frameworks for transport, and hence are asynchronous.
Reference: [10] <author> M. Crowley-Milling et al. </author> <title> The Nodal System for the SPS. </title> <publisher> CERN, </publisher> <pages> 78-87, </pages> <year> 1978. </year>
Reference-contexts: Mobile agent-based computing may be viewed as an extension of well-known methods of remote dispatch of script programs <ref> [10] </ref>. or remote submission of batch jobs [6].
Reference: [11] <author> T. Finin, R. Fritzson, D. McKay, and R. McEntire. </author> <title> KQML as an Agent Communication Language. </title> <booktitle> In The Proceedings of the Third International Conference on Information and Knowledge Management (CIKM '94), </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: In less simple cases, the alternate server may have more or less the same information or transaction service, but require the request to be expressed in a different form. Techniques to permit this kind of transformation are being developed using the Knowledge and Query Manipulation Language (KQML) <ref> [11] </ref>. If this aspect of robustness is important, and it probably is, then RPC-based client (or server) applications can be made more robust in exactly the same way.
Reference: [12] <author> C. G. Harrison. </author> <title> Smart Networks and Intelligent Agents. </title> <booktitle> Proceedings of Media-Com'95, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Architecturally one would prefer to solve this problem at the edge of the network and make mobile clients as robust as non-mobile clients by providing proxy clients at the edge of the network <ref> [12] </ref>. 5.2 Agents facilitate semantic information retrieval We should look at remote searching and filtering further, since it is one of the central issues in agent programming. Consider a more sophisticated information retrieval system based on Semantic Retrieval. <p> the flexibility gained from this approach. 16 5.13 Mobile agents enable intelligent mail handling Intelligent mail handling is the capability of the method and timing of mail delivery being determined by the semantic content of the mail item under the control of rules established by the recipient of the mail <ref> [12] </ref>. This is effectively a form of semantic routing. In the AT&T Personalink service [4]. is transported by courier agents, which are programmed in Telescript. <p> As with the semantic routing discussion above, there is nothing in this function which is intrinsic to mobile agents. The courier agent serves as the transport mechanism; the intelligent handling comes from the actions resulting at the intelligent agent from the mail arrival event. In ICS <ref> [12] </ref> the recipient is in control; the rules will be set up to reflect the recipient's handling preferences for certain events. In principle though, the recipient could enter a rule which says in effect: Respect the sender's preferences.
Reference: [13] <author> Barron Housel. Anywhere. IBM NSD/RTP, </author> <year> 1993. </year>
Reference-contexts: Although mobile agents certainly facilitate several aspects of this process, there is again nothing here that can be performed exclusively by agents or indeed significantly better than by other means. The query routing process is in fact very similar to the AnyWhere proposal for semantic routing of messages <ref> [13] </ref>. The query reformulation process is purely a natural language activity that could equally well be applied to messages and could in principle be performed directly at the client rather than by a separate consultant.
Reference: [14] <author> T. Berners Lee, R. Cailliau, A. Luotonen, H. Frystyk Nielsen, and A. </author> <title> Secret. The World Wide Web. </title> <journal> Communications of the ACM, </journal> <volume> 37(8) </volume> <pages> 76-82, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: We may expect see numerous experiments in this area during 1994-95, particularly in the area of extensions to World-Wide Web servers <ref> [14] </ref>. The third possibility further extends the world of electronic commerce and its analogy with the 'real' world of commerce. We may anticipate a wide range of secondary commercial or quasi-legal services in support of electronic consumerism.
Reference: [15] <editor> Patty Maes and R. Brooks, editors. </editor> <title> A Biologically Inspired Immune System for Computers. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Nor are viruses the only epidemic threat to network services, other effects such as mail broadcast storms are at least as likely and equally hard to deal with. J. Kephart <ref> [15] </ref>. has been studying the propagation of viruses in networks and will soon complete an initial architecture for the detection and confinement of these and other abherent behaviors of network-based services. 3.3 Issues The use of mobile agents appears to offer certain advantages for client-server computing, but as we have noted
Reference: [16] <author> Gerald Neufeld and Son Vuong. </author> <title> Overview of ASN.1. </title> <booktitle> Computer Networks and ISDN Systems 23(5) </booktitle> <pages> 393-415, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: in the agent execution environ ment, or a new agent daughter process is created. * The suspended process or the new process, including its process state, stack, heap and all external references is collected and processed into a message expressed in a machine-independent form, for example Abstract Syntax Notation 1 <ref> [16] </ref>. This step is facilitated if the agent is built from object classes and in an interpreted language. In particular, if it is known that the identical classes are resident at the destination, the agent may be reduced to object references, instance data and process state data.
Reference: [17] <author> J. K. Ousterhout. </author> <title> TcL and the Tk toolkit. </title> <publisher> Addison-Wesley Publication Company, </publisher> <year> 1994. </year>
Reference-contexts: Introduction The idea of performing client-server computing by the transmission of executable programs between clients and servers has been popularized in recent years by researchers and developers interested in intelligent network services, most notably by White & Miller at General Magic, Inc. [23], but also by the developers of TCL <ref> [17] </ref>. Mobile agent-based computing may be viewed as an extension of well-known methods of remote dispatch of script programs [10]. or remote submission of batch jobs [6].
Reference: [18] <author> J. Postel. </author> <title> Simple Mail Transfer Protocol, Request for Comments 821. </title> <month> August </month> <year> 1982. </year>
Reference-contexts: Messaging systems may employ a message transport service provided by by an electronic mail service, for example, Message Queuing Series [1], Simple Mail Transport Protocol <ref> [18] </ref>, Vendor Independent Messaging [2]. The required processor type is indicated in the message header. The message is generally addressed indirectly, that is, the client may not know the explicit network address or even the identity of the destination server.
Reference: [19] <author> D. L. Presotto and D. M. Ritchie. </author> <title> Interprocessor Communication in the Eighth Edition UNIX System. </title> <booktitle> Proceedings of the 1992 USENIX conference, </booktitle> <month> June </month> <year> 1985. </year>
Reference-contexts: The dominant methods are messaging [9]., simple datagrams [21], sockets <ref> [19] </ref>, remote procedure call [5], and conversations [8]. The primary distinction among these is between asynchronous protocols, for example, messaging, and synchronous protocols, for example, RPC. Mobile agents employ messaging frameworks for transport, and hence are asynchronous.
Reference: [20] <author> M. Sherman. </author> <title> Architecture of the Encina distributed transaction processing family. </title> <booktitle> ACM SIGMOD, International Conference on Management of Data, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: The client application should, for example be able to re-create a 'lost' agent, which rises the question of how to detect that an agent has been lost. The usual sorts of protocols for distributed transaction processing seem relevant <ref> [20] </ref>. Assessment: There is an advantage here in the use of mobile agents in terms of the robustness of client-server operations, but it raises also an overhead question and also challenges for the efficient design of mobile agents per se.
Reference: [21] <author> A. Tannenbaum. </author> <title> Computer Networks, 2nd ed. </title> <publisher> Prentice-Hall Publishing, </publisher> <year> 1988. </year>
Reference-contexts: The dominant methods are messaging [9]., simple datagrams <ref> [21] </ref>, sockets [19], remote procedure call [5], and conversations [8]. The primary distinction among these is between asynchronous protocols, for example, messaging, and synchronous protocols, for example, RPC. Mobile agents employ messaging frameworks for transport, and hence are asynchronous.
Reference: [22] <author> Chii Ren Tsai and V. D. Gligor. </author> <title> Distributed Systems and Security Management with Centralized Control. </title> <booktitle> Proceedings of the Spring 1992 EurOpen/USENIX Workshop, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: Like the local procedure call, the RPC is synchronous; the client process suspends, maintaining the entire process state, until it receives the return RPC from the server. Secure RPCs add authentication and encryption facilities to the client-server communication, but introduce significant overhead <ref> [22] </ref>. Messaging is emerging as a popular alternative to RPC for client-server communication. It is an outgrowth of both electronic mail systems and earlier distributed computing schemes in which applications communicated via files or pipes.
Reference: [23] <author> J. E. White. </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace. </title> <publisher> General Magic Inc., </publisher> <address> Mountain View, CA, </address> <year> 1994. </year>
Reference-contexts: large number of network services and applications. 2 Introduction The idea of performing client-server computing by the transmission of executable programs between clients and servers has been popularized in recent years by researchers and developers interested in intelligent network services, most notably by White & Miller at General Magic, Inc. <ref> [23] </ref>, but also by the developers of TCL [17]. Mobile agent-based computing may be viewed as an extension of well-known methods of remote dispatch of script programs [10]. or remote submission of batch jobs [6].
Reference: [24] <author> James White. </author> <title> RPC over WANs. General Magic, Inc., </title> <type> private communication, </type> <month> August </month> <year> 1992. </year> <month> 23 </month>
Reference-contexts: Experience shows that when these client-server applications are extended over wide-area networks, they become less reliable. It seems likely that this problem was responsible in part for GMI's introduction of mobile agents <ref> [24] </ref>. Mobile agents offer two areas of advantage here: * The messaging aspect, which provides reliable transport between client and server, without requiring reliable communication.
References-found: 24

