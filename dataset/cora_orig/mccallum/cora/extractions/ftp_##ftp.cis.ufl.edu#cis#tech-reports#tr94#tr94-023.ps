URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr94/tr94-023.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr94-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A New Perspective on Rule Support for Object-Oriented Databases. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <address> Washing-ton, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: In this paper, we propose extensions to an object-oriented DBMS (the Open OODB Toolkit from Texas Instruments, Dallas [18]) and indicate the functionality supported by the extended architecture. The implementation of composite event detection and nested transactions for rule execution using the design proposed in <ref> [1, 6] </ref> is the main contribution of this paper. The environment/model into which ECA rules are incorporated has a bearing on the implementation of the above. Event detection is considerably complex in an object-oriented environment as compile time and runtime issues need to be taken into account. <p> The control flow for supporting the above features are further elaborated in Figure 3 and are described below. 4 Our primitive event detection is based on the design proposed in <ref> [1] </ref>. Primitive events are signaled by adding a notify procedure call in the wrapper method by the Sentinel post-processor. Also, appropriate calls for the parameter collection are added at this stage. Appendix shows the details of the original program and the transformed program that includes these calls.
Reference: [2] <author> R. Badani. </author> <title> Nested transactions for concurrent execution of rules: Design and implementation. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Concurrent execution of several rules can be provided using a concurrency control strategy for an implementation of the nested transaction model. We have implemented a lock-based algorithm for supporting nested transaction model in Sentinel. <ref> [2] </ref> discusses nested transaction implementation in detail. The limitations of the Open OODB architecture for implementing nested execution of rules are: * The underlying storage manager (Exodus) does not support nested transaction calls. <p> We assume the basic locking rules proposed in [10]. Enforcement of the basic locking rules requires maintaining retain mode and lockmodes as a minimum. However, to efficiently implement distributed nested spheres of control and distributed disjoint spheres of control <ref> [10, 2] </ref>, it is necessary to search the entire tree to make sure locks can be granted in an appropriate mode. To avoid an exhaustive search of the transaction tree, we have additional information in each node of the transaction tree.
Reference: [3] <author> S. Chakravarthy et al. HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Final Report. Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Actions specify the operations to be performed when an event has occurred and the condition evaluates to true. Although event specification has received considerable attention <ref> [3, 19, 9, 14, 7, 8] </ref>, other aspects of active databases, such as techniques suited for supporting ECA rules, architectures for incorporating rules/events in an existing passive DBMS, and implementation issues have received very little attention.
Reference: [4] <author> S. Chakravarthy, V. Krishnaprasad, E. Anwar, and S.-K. Kim. </author> <title> Anatomy of a composite event detector. </title> <type> Technical Report UF-CIS-TR-93-039, </type> <institution> University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> December </month> <year> 1993. </year> <note> (Submitted for publication.). 18 </note>
Reference: [5] <author> S. Chakravarthy, V. Krishnaprasad, E. Anwar, and S.-K. Kim. </author> <title> Composite Events for Active Databases: Semantics, Contexts, and Detection. </title> <booktitle> In Proceedings, International Conference on Very arge Data Bases, </booktitle> <month> August </month> <year> 1994. </year> <note> (To appear.). </note>
Reference-contexts: Open OODB provides a wrapper method into which this notification is added by the Sentinel post-processor, * Implementation of a local composite event detector for detecting composite events (within an application) and parameter computation in various contexts <ref> [13, 5] </ref>. There is a local composite event detector for each open OODB application or client (each application of Open OODB is a client to the Exodus server), * Implementation of a transaction manager for supporting nested transactions used for concurrent execution of rules. <p> The local composite event detector and the application share the same address space and our event detector uses an event graph similar to operator trees <ref> [5] </ref>. Parameter computation for composite events raises additional problems in the object-oriented framework. The lack of a single data structure (such as a relation) makes it extremely difficult to 5 identify and manage parameter computation even within an application. <p> Once a primitive event node is notified it checks the method signature with the one 11 that has been sent. If it matches, it notifies all its subscribers. Similarly once a complex event node is notified, it is activated based on the operator semantics <ref> [5] </ref>, and notifies subscribers in its list. A rule node, in addition to notification, creates a thread with the condition and action function as a unit to be executed when the thread is scheduled. The local event detector schedules these threads.
Reference: [6] <author> S. Chakravarthy and D. Mishra. Snoop: </author> <title> An Expressive Event Specification Language for Active Databases. </title> <journal> Data and Knowledge Engineering, </journal> <note> 1994. (To appear). </note>
Reference-contexts: In this paper, we propose extensions to an object-oriented DBMS (the Open OODB Toolkit from Texas Instruments, Dallas [18]) and indicate the functionality supported by the extended architecture. The implementation of composite event detection and nested transactions for rule execution using the design proposed in <ref> [1, 6] </ref> is the main contribution of this paper. The environment/model into which ECA rules are incorporated has a bearing on the implementation of the above. Event detection is considerably complex in an object-oriented environment as compile time and runtime issues need to be taken into account. <p> Optimization of condition and action components are currently not done as they are C++ functions. A rule specified to be executed in the deferred mode is rewritten at the source code level into a rule in immediate mode by the Sentinel pre-processor. Our event specification language Snoop <ref> [6] </ref> supports a number of operators of which A fl monitors the cumulative effect of an event occurrence within a specified interval. For example, if we need to accumulate all insert events in a transaction, we can specify the event as A fl (begin transaction, insert, end transaction). <p> end (e3) void set price (float price); int get price (); event e4 = e1 ^ e2; /* AND operator */ rule R1 [e4, cond1, action1, CUMULATIVE, DEFERRED, 10, NOW]; g; /* class level rule */ Event expressions specify primitive and composite events using the event specification language described in <ref> [6] </ref> which supports a number of event operators (e.g., and, or, sequence, aperiodic). The BNF of the event specification language can be found in [14]. We allow an optional eventName to be specified within the event/rule definition to allow the users to name an event expression for subsequent usage.
Reference: [7] <author> S. Gatziu and K. R. Dittrich. </author> <title> Events in an Object-Oriented Database System. </title> <booktitle> In Proc. of the 1st International Conference on Rules in Database Systems, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: Actions specify the operations to be performed when an event has occurred and the condition evaluates to true. Although event specification has received considerable attention <ref> [3, 19, 9, 14, 7, 8] </ref>, other aspects of active databases, such as techniques suited for supporting ECA rules, architectures for incorporating rules/events in an existing passive DBMS, and implementation issues have received very little attention.
Reference: [8] <author> S. Gatziu and K. R. Dittrich. </author> <title> Detecting Composite Events in Active Databases Using Petri Nets. </title> <booktitle> In Proc. of the 4th International Workshop on Research Issues in data Engineering: Active Database Systems, </booktitle> <pages> pages 2-9, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Actions specify the operations to be performed when an event has occurred and the condition evaluates to true. Although event specification has received considerable attention <ref> [3, 19, 9, 14, 7, 8] </ref>, other aspects of active databases, such as techniques suited for supporting ECA rules, architectures for incorporating rules/events in an existing passive DBMS, and implementation issues have received very little attention.
Reference: [9] <author> N. H. Gehani, H. V. Jagadish, and O. Shmueli. </author> <title> Event Specification in an Object-Oriented Database. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Actions specify the operations to be performed when an event has occurred and the condition evaluates to true. Although event specification has received considerable attention <ref> [3, 19, 9, 14, 7, 8] </ref>, other aspects of active databases, such as techniques suited for supporting ECA rules, architectures for incorporating rules/events in an existing passive DBMS, and implementation issues have received very little attention.
Reference: [10] <author> T. Haerder and K. Rothermel. </author> <title> Concurrency Control Issues in Nested Transactions. </title> <institution> IBM Research Report RJ5803, </institution> <month> Aug. </month> <year> 1983. </year>
Reference-contexts: level are shown: class STOCK : public REACTIVE f public: event end (e1) int sell stock (int qty); /* end primitive event */ event begin (e2) && end (e3) void set price (float price); int get price (); event e4 = e1 ^ e2; /* AND operator */ rule R1 <ref> [e4, cond1, action1, CUMULATIVE, DEFERRED, 10, NOW] </ref>; g; /* class level rule */ Event expressions specify primitive and composite events using the event specification language described in [6] which supports a number of event operators (e.g., and, or, sequence, aperiodic). <p> We assume the basic locking rules proposed in <ref> [10] </ref>. Enforcement of the basic locking rules requires maintaining retain mode and lockmodes as a minimum. <p> We assume the basic locking rules proposed in [10]. Enforcement of the basic locking rules requires maintaining retain mode and lockmodes as a minimum. However, to efficiently implement distributed nested spheres of control and distributed disjoint spheres of control <ref> [10, 2] </ref>, it is necessary to search the entire tree to make sure locks can be granted in an appropriate mode. To avoid an exhaustive search of the transaction tree, we have additional information in each node of the transaction tree.
Reference: [11] <author> M. Hsu, R. Ladin, and D. McCarthy. </author> <title> An Execution Model for Active Data Base Management Systems. </title> <booktitle> In Proceedings 3rd International Conference on Data and Knowledge Bases, </booktitle> <address> Washington, D.C., </address> <month> Jun. </month> <year> 1988. </year>
Reference-contexts: Subtransactions follow all the ACID properties of a flat transaction except durability, due to the fact that the commit of a subtransaction is conditional upon its parent's commit. As shown in <ref> [11] </ref>, the nested transaction concept fits well with the semantics of rule execution in immediate mode and some extensions are necessary to model other coupling modes. Concurrent execution of several rules can be provided using a concurrency control strategy for an implementation of the nested transaction model.
Reference: [12] <author> Texas Instruments. </author> <title> Open OODB Toolkit, Release 0.2 (Alpha) Document, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: For some of the requirements that are being implemented, we discuss the available alternatives and the rationale for our choice. 2.3 Architecture The Sentinel architecture proposed in this section extends the passive Open OODB system <ref> [12] </ref>. Concurrency control and recovery for top-level transactions are provided by the Exodus storage manager. A full C++ pre-processor is used by the Open OODB for transforming the user class definitions as well as the application code. make it active.
Reference: [13] <author> V. Krishnaprasad. </author> <title> Event Detection for Supporting Active Capability in an OODBMS: Semantics, Architecture, and Implementation. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Open OODB provides a wrapper method into which this notification is added by the Sentinel post-processor, * Implementation of a local composite event detector for detecting composite events (within an application) and parameter computation in various contexts <ref> [13, 5] </ref>. There is a local composite event detector for each open OODB application or client (each application of Open OODB is a client to the Exodus server), * Implementation of a transaction manager for supporting nested transactions used for concurrent execution of rules.
Reference: [14] <author> D. Mishra. SNOOP: </author> <title> An Event Specification Language for Active Databases. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: Actions specify the operations to be performed when an event has occurred and the condition evaluates to true. Although event specification has received considerable attention <ref> [3, 19, 9, 14, 7, 8] </ref>, other aspects of active databases, such as techniques suited for supporting ECA rules, architectures for incorporating rules/events in an existing passive DBMS, and implementation issues have received very little attention. <p> The BNF of the event specification language can be found in <ref> [14] </ref>. We allow an optional eventName to be specified within the event/rule definition to allow the users to name an event expression for subsequent usage. When an event expression is processed, calls for creating the event graph for that event expression are added to application code.
Reference: [15] <author> J. Moss. </author> <title> Nested Transactions: An Approach To Reliable Distributed Computing. </title> <institution> MIT Laboratory for Computer Science, MIT/LCS/TR-260, </institution> <year> 1981. </year>
Reference-contexts: Furthermore the unit of recovery will be the entire triggering transaction. We have taken the approach of executing rules as subtransactions. To support nested execution of rules as subtransactions we have adopted the Nested transaction model <ref> [15] </ref>. In nested transactions, flat transactions are enhanced by a hierarchical control structure. Each nested transaction consists of either primitive actions or some nested transactions (called subtransactions of the containing transaction).
Reference: [16] <author> Z. Tamizuddin. </author> <title> Rule execution and visualization in active oodbms. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Light weight processes are used both for prioritized and concurrent rule execution. * Implementation of a rule debugger for visualizing the interaction among: rules, events and rules, and rules and database objects. This will not be discussed further in this paper. See <ref> [16] </ref> for details. the dotted box have been introduced for providing active capability. This figure also shows the kernel level enhancements to the Open OODB modules to accommodate nested subtransactions.
Reference: [17] <author> S. Vinoski. </author> <title> Distributed object computing with corba. </title> <type> C++ Report, </type> <pages> pages 33-38, </pages> <month> July-August </month> <year> 1993. </year>
Reference-contexts: In the object-oriented model, interoperability across applications is extremely complicated on account of the component objects, pointers, and virtual functions. These issues are currently being addressed by OMG and Corba <ref> [17] </ref>. We envision each application having a thread (a global event-handler thread shown in Figure 3) that handles the execution of rules with global events (whose events span applications or transactions).
Reference: [18] <author> D. Wells, J. A. Blakeley, and C. W. Thompson. </author> <title> Architecture of an open object-oriented database management system. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 74-81, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In this paper, we propose extensions to an object-oriented DBMS (the Open OODB Toolkit from Texas Instruments, Dallas <ref> [18] </ref>) and indicate the functionality supported by the extended architecture. The implementation of composite event detection and nested transactions for rule execution using the design proposed in [1, 6] is the main contribution of this paper.
Reference: [19] <author> J. Widom and S. Finkelstein. </author> <title> Set-Oriented Production Rules in Relational Database Systems. </title> <booktitle> In Proc. of ACM-SIGMOD, </booktitle> <pages> pages 259-270, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Actions specify the operations to be performed when an event has occurred and the condition evaluates to true. Although event specification has received considerable attention <ref> [3, 19, 9, 14, 7, 8] </ref>, other aspects of active databases, such as techniques suited for supporting ECA rules, architectures for incorporating rules/events in an existing passive DBMS, and implementation issues have received very little attention.
References-found: 19

