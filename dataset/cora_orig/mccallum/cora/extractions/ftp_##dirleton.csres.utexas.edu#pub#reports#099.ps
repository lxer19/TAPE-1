URL: ftp://dirleton.csres.utexas.edu/pub/reports/099.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Specification and Verification of Gate-Level VHDL Models of Synchronous and Asynchronous Circuits  
Author: David M. Russinoff 
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Pubnum: Technical Report  
Email: EMAIL: russ@cli.com  
Phone: TEL: +1 512 322 9951  
Date: 99 May 10, 1994  
Abstract: This work was sponsored in part at Computational Logic, Inc. by National Aeronautics and Space Administration Langley Research Center (NAS1-18878). The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., NASA Langley Research Center or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Boyer, R. S. and Moore, J S., </author> <title> A Computational Logic Handbook, </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Specification and Verification of VHDL Models Technical Report #99 3 The syntax and semantics of our language are both based on the S-expressions of LISP. This decision was motivated by our desire to support its analysis with the use of the Nqthm system of Boyer and Moore <ref> [1] </ref>. Nqthm is based on a constructive formal logic for which the intended model is the domain of S-expressions. Thus, there is a correspondence between the formulas of this logic and informal propositions about S-expressions. <p> All of the functions involved in the construction of our language, which we describe informally, meet the computability requirement for encoding as Nqthm definitions <ref> [1] </ref>. In fact, we have developed an Nqthm theory that formalizes these functions, including the module recognizers that form the syntax of the language, the interpreter that constitutes its semantics, and various procedures for deriving behavioral specifications of its programs.
Reference: [2] <institution> Institute of Electrical and Electronic Engineers, </institution> <note> Draft Standard VHDL Language Reference Manual, </note> <year> 1993. </year>
Reference: [3] <author> Kaufmann, M., </author> <title> A Translator from an HDL of David Russinoff to VHDL, Internal Note 278, Computational Logic, </title> <publisher> Inc., </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: Another benefit of the Nqthm formalization is that it provides a basis for a LISP implementation of the translator from our language to VHDL <ref> [3] </ref>. This potentially allows commercial VHDL synthesis tools to be used to implement our programs in silicon. As another application of more immediate interest, we have executed the translations of many of our programs using the Vantage VHDL simulator.
Reference: [4] <author> Moore, J S., </author> <title> "A Formal model of asynchronous communication and its use in mechanically verifying a biphase mark protocol", </title> <journal> Formal Aspects of Computing 6, </journal> <volume> no. 1 </volume> (1994):60-91. 
Reference-contexts: The circuit design and the proof are both based on Moore's work on asynchrony <ref> [4] </ref>, which includes a formal model of asynchronous communication and a rigorous formulation of the protocol. Specification and Verification of VHDL Models Technical Report #99 3 The syntax and semantics of our language are both based on the S-expressions of LISP. <p> In this section, we shall examine the asynchronous case, in which the two clock inputs have different periods. Our treatment of this problem is based on Moore's model of asynchrony <ref> [4] </ref>. In this model, the behavior of a signal is characterized abstractly by three quantities: a base time, a period, and a bit vector (representing the values assumed on successive cycles). <p> Thus, v 2 = u. Moreover, Subcases 2b and 2c, in which ^w assumes the value not1 (v 2 ) at some point in this interval, are eliminated. In the remaining cases, v = v 2 = u. 2 In order to avail ourselves of the results of <ref> [4] </ref>, we must restate Lemma 4.4 in terms of Moore's function det. <p> setup (SIN; rcvr), value list det (warp (smooth (T ; U ); t s ; t r ; s ; r ); oracle) = asynch (U; t s ; t r ; s ; r ; oracle)); for some oracle, and period r . 2 5 Biphase Mark Moore's formulation <ref> [4] </ref> of the biphase mark protocol is based on two functions, send and recv, which represent the computations performed by the sender and the receiver, respectively. After presenting the definitions of these functions, we shall implement them in the design of the sequential modules sndr and rcvr.
Reference: [5] <author> Roden, M. S., </author> <title> Digital Communication Systems Design, </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year> <month> 54 </month>
Reference-contexts: In fact, we shall present the definition of a circuit in our language that consists of two independently clocked sequential modules, and prove that communication between them is achieved by means of the well known biphase mark protocol <ref> [5] </ref>. The circuit design and the proof are both based on Moore's work on asynchrony [4], which includes a formal model of asynchronous communication and a rigorous formulation of the protocol.
Reference: [6] <author> Russinoff, D. M., </author> <title> A Formalization of a Subset of VHDL, </title> <type> Technical Report 98, </type> <institution> Computational Logic, Inc., </institution> <month> April, </month> <year> 1994. </year>
Reference-contexts: In particular, it includes the VHDL "delta-delay" mechanism, which complicates its definition considerably. Since this mechanism is irrelevant to our present purpose, we shall present here a simplified version of the language, in which all delays are required to be positive. The full language definition may be found in <ref> [6] </ref>. 2 The language that we shall describe includes behavioral modules as primitives, which we use to model gates, and structural modules, with which we represent hierarchically constructed circuits. Our goal is to derive and verify abstract specifications of these gate-level models. <p> Its proof (which appears in <ref> [6] </ref>) depends on the two properties of step that are stated in Lemmas 2.6 and 2.7, namely that module execution is neither predictive (with respect to input) nor retroactive (with respect to output): Lemma 2.9 Let p be an input packet for a structural module M with S (M ) =
Reference: [7] <author> Taub, H. and Schilling, D., </author> <title> Digital Integrated Electronics, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: A precise behavioral specification of dff is given by the following lemma, the proof of which is an elaboration of the informal argument found in <ref> [7] </ref>: Lemma 3.3 Let t 1 +4000 t , t +6000 t 2 , and t 1 t f .
References-found: 7

