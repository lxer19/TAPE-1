URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/wisr7-design-deltas.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Email: Email: gregb@cs.concordia.ca  
Phone: Tel: (514) 848-3031 Fax: (514) 848-2830  
Title: Design Deltas in Reusable Object-Oriented Design opens a discussion on "design deltas" to describe increments
Author: Greg Butler with Peter Grogono, Li Li, Rajjan Shinghal, Ono Tjandra 
Note: This position paper  
Address: Montreal, Quebec, H3G 1M8 Canada  Montreal, Quebec, H3G 1M8 Canada  
Affiliation: Centre Interuniversitaire en Calcul Mathematique Algebrique Department of Computer Science Concordia University  Department of Computer Science Concordia University  
Abstract: Reusable object-oriented design aims to describe and classify designs and design fragments so that designers may learn from other peoples' experience. Thus, it provides leverage for the design process. The field includes software architectures, application frameworks, design patterns, and the design of class libraries. The field is young with many open problems that still need to be researched. 
Abstract-found: 1
Intro-found: 1
Reference: [Butl93] <author> G. Butler, </author> <title> Reusable reliable software components for computer algebra. Position paper for the 6th Annual Workshop on Software Reuse to be held in Owego, </title> <month> November 2-4, </month> <year> 1993. </year>
Reference-contexts: 1 Background My background in computer algebra systems is described in my WISR6 position paper <ref> [Butl93] </ref>. These experiences convinced me that a more flexible environment, using a single language, C++, is needed to research the issues of software architectures and their integration for computer algebra systems. Also, there is a great need from researchers in algebraic algorithms for a software library.
Reference: [Butl94] <author> G. Butler, </author> <title> Datalog and TwoGroups and C++, </title> <booktitle> to appear in Proceedings of the Second International Conference on Artificial Intelligence and Symbolic Mathematical Computing, </booktitle> <address> Cambridge, UK, </address> <month> August 3-5, </month> <year> 1994. </year> <month> 5 </month>
Reference-contexts: I also teach a course on object-oriented design based on OMT [RBPEL91] that also includes material on reuse. On the research side there is ongoing work on application frameworks for combinatorial enumeration [BL94] and deductive databases <ref> [Butl94] </ref> are in preliminary stage of construction with the help of students: we are still learning how to develop and document frameworks | much more practical implementation needs to be done; use of design patterns for development and documenting software (especially frameworks) is the focus of several student projects, and the
Reference: [Butl95] <author> G. Butler, </author> <title> Technical trends in industrial software engineering: Quality, reuse, modelling, </title> <note> submitted. </note>
Reference-contexts: the discussion group on object-oriented design; survey of reusable object-oriented design looked at reuse of design artifacts: how they were developed, how they were reused, and how they were described/documented/specified and classified [BLT95]; trends in software engineering for which there was documented empirical evidence for their cost benefits were surveyed <ref> [Butl95] </ref>: this included improvements in process quality and product quality, software reuse at the level of code component, frameworks, and applica tion generators, and the use of formal methods and other modelling notations; document understanding for reverse engineering was investigated with colleagues [BGST95b, BGST95a] to consider whether reverse engineering of legacy
Reference: [BGST95a] <author> G. Butler, P. Grogono, R. Shinghal, I.A. Tjandra, </author> <title> Analyzing the logical structure of data flow diagrams in software documents, </title> <booktitle> to appear in Proceedings of Third International Conference on Document Analysis and Recognition, </booktitle> <address> Montreal, Canada, </address> <month> August 14-16, </month> <year> 1995. </year>
Reference-contexts: empirical evidence for their cost benefits were surveyed [Butl95]: this included improvements in process quality and product quality, software reuse at the level of code component, frameworks, and applica tion generators, and the use of formal methods and other modelling notations; document understanding for reverse engineering was investigated with colleagues <ref> [BGST95b, BGST95a] </ref> to consider whether reverse engineering of legacy systems could benefit from knowledge extracted automatically from paper documents: we are concentrating on data flow diagrams.
Reference: [BGST95b] <author> G. Butler, P. Grogono, R. Shinghal, I.A. Tjandra, </author> <title> Knowledge and the recognition and understanding of software documents, </title> <note> submitted. </note>
Reference-contexts: empirical evidence for their cost benefits were surveyed [Butl95]: this included improvements in process quality and product quality, software reuse at the level of code component, frameworks, and applica tion generators, and the use of formal methods and other modelling notations; document understanding for reverse engineering was investigated with colleagues <ref> [BGST95b, BGST95a] </ref> to consider whether reverse engineering of legacy systems could benefit from knowledge extracted automatically from paper documents: we are concentrating on data flow diagrams.
Reference: [BL94] <author> G. Butler and C.W.H. Lam, </author> <title> The preliminary design of an object-oriented framework for combinatorial enumeration, </title> <booktitle> to appear in proceedings of the Colloquium on Object Orientation in Databases and Software Engineering, 62nd Congress of ACFAS, </booktitle> <address> May 16-17, 1994, Montreal. </address>
Reference-contexts: These have recently split into two discussion groups, the latter concentrating on design patterns. I also teach a course on object-oriented design based on OMT [RBPEL91] that also includes material on reuse. On the research side there is ongoing work on application frameworks for combinatorial enumeration <ref> [BL94] </ref> and deductive databases [Butl94] are in preliminary stage of construction with the help of students: we are still learning how to develop and document frameworks | much more practical implementation needs to be done; use of design patterns for development and documenting software (especially frameworks) is the focus of several
Reference: [BLT95] <author> G. Butler, L. Li and I.A. Tjandra, </author> <title> Reusable object-oriented design, </title> <note> submitted. </note>
Reference-contexts: of design patterns for development and documenting software (especially frameworks) is the focus of several student projects, and the discussion group on object-oriented design; survey of reusable object-oriented design looked at reuse of design artifacts: how they were developed, how they were reused, and how they were described/documented/specified and classified <ref> [BLT95] </ref>; trends in software engineering for which there was documented empirical evidence for their cost benefits were surveyed [Butl95]: this included improvements in process quality and product quality, software reuse at the level of code component, frameworks, and applica tion generators, and the use of formal methods and other modelling notations; <p> In recognition of the importance of software evolution, at the WISR7 workshop I wish to focus on how to describe design increments and clarify the notion of what is a "design delta". 2 Position The conclusions from <ref> [BLT95] </ref> contain my position on research directions in reusable object-oriented design: " One clear conclusion is that reusable design artifacts are the result of evolution and iteration.
Reference: [JF88] <author> R.E. Johnson and B. Foote, </author> <title> Designing reusable classes, </title> <note> Journal of Object-Oriented Programming 1 (1988) 22-35. </note>
Reference-contexts: Each of which might help us clarify a precise definition of the notion. Refactoring describes a reorganisation of the class hierarchy for an object-oriented system <ref> [JF88] </ref> as a means of identifying reusable classes or frameworks. Johnson and Opdyke [OJ90, Opdy92] have catalogued several refactorings as transformations on the class hierarchy. 4 Programming-by-difference constructs a design increment by specialisation of a superclass.
Reference: [Karl93] <author> Even-Andre Karlsson, </author> <title> Reuse and cleanroom, </title> <booktitle> 1st European Industrial Symposium on Cleanroom Software Engineering, </booktitle> <month> 26-27 October, </month> <year> 1993, </year> <institution> Copenhagen. </institution>
Reference-contexts: Each vertical increment describes a working system, though with a subset of the behavior, and should correspond to a part of the top-level black box and a part of the usage model and usage profile <ref> [Karl93] </ref>. Change management in the PRISM software process model [Madh92] documents changes in staff, policies, laws, processes or systems on sheets that record dependency, resource, and status information.
Reference: [Madh92] <author> N.H. Madhavji, </author> <title> Environment evolution: The PRISM model of changes, </title> <journal> IEEE Trans. Software Eng. </journal> <volume> 18, </volume> <month> 5 (May </month> <year> 1992) </year> <month> 380-392. </month>
Reference-contexts: Each vertical increment describes a working system, though with a subset of the behavior, and should correspond to a part of the top-level black box and a part of the usage model and usage profile [Karl93]. Change management in the PRISM software process model <ref> [Madh92] </ref> documents changes in staff, policies, laws, processes or systems on sheets that record dependency, resource, and status information. Design steps are the actions taken during design in response to the identification of issues and their resolution via arguments for and against in the model of Potts and Bruns [PB88].
Reference: [Opdy92] <author> William F. Opdyke, </author> <title> Refactoring Object-Oriented Frameworks, </title> <type> Ph.D. Thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1992. </year>
Reference-contexts: Each of which might help us clarify a precise definition of the notion. Refactoring describes a reorganisation of the class hierarchy for an object-oriented system [JF88] as a means of identifying reusable classes or frameworks. Johnson and Opdyke <ref> [OJ90, Opdy92] </ref> have catalogued several refactorings as transformations on the class hierarchy. 4 Programming-by-difference constructs a design increment by specialisation of a superclass. So the equation design = subclass n superclass or one can view the subclass definition alone as the "design delta". Mixins are a purer form of programming-by-difference.
Reference: [OJ90] <author> W.F. Opdyke ad R.E. Johnson, </author> <title> Refactoring: An aid in designing application frameworks and evolving object-oriented systems, </title> <booktitle> Proceedings of the Symposium on Object-Oriented Programming Emphasizing Practical Applications (SOPPA), </booktitle> <month> September </month> <year> 1990. </year>
Reference-contexts: Each of which might help us clarify a precise definition of the notion. Refactoring describes a reorganisation of the class hierarchy for an object-oriented system [JF88] as a means of identifying reusable classes or frameworks. Johnson and Opdyke <ref> [OJ90, Opdy92] </ref> have catalogued several refactorings as transformations on the class hierarchy. 4 Programming-by-difference constructs a design increment by specialisation of a superclass. So the equation design = subclass n superclass or one can view the subclass definition alone as the "design delta". Mixins are a purer form of programming-by-difference.
Reference: [PB88] <author> C. Potts and G. Bruns, </author> <title> Recording the reasons for design decisions, </title> <booktitle> Proceedings of the 10th International Conference on Software Engineering, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1988, </year> <pages> pp. 418-427. </pages>
Reference-contexts: Design steps are the actions taken during design in response to the identification of issues and their resolution via arguments for and against in the model of Potts and Bruns <ref> [PB88] </ref>. Design increments are implicit in the model as paths (sequences of arcs) relating two design artifacts.
Reference: [RBPEL91] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, W. Lorenson, </author> <title> Object-Oriented Modelling and Design, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: In the past two years I have been actively leading a discussion group at Concordia on C++ programming and object-oriented design. These have recently split into two discussion groups, the latter concentrating on design patterns. I also teach a course on object-oriented design based on OMT <ref> [RBPEL91] </ref> that also includes material on reuse.
Reference: [Spiv92] <author> J.M. Spivey, </author> <title> The Z Notation: A Reference Manual, </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Composition operators such as in Z schema calculus <ref> [Spiv92] </ref> can describe increments of change in specifications as specifications. It is common Z practice to separate the specification of typical behaviour (the AddBirthday schema) from error-handling described in terms of successful execution (the Success schema) and error-type (the AlreadyKnown schema). RobustAddBirthday b=(AddBirthday ^ Success) _ AlreadyKnown:

References-found: 15

