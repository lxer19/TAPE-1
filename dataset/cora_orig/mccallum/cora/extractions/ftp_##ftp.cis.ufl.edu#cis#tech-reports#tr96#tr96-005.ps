URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr96/tr96-005.ps
Refering-URL: http://www.cis.ufl.edu/~fishwick/tr/tr96-005.html
Root-URL: http://www.cis.ufl.edu
Title: Toward a Convergence of Systems and Software Engineering  
Author: Paul A. Fishwick 
Affiliation: Computer Information Science and Engineering Department University of Florida  
Abstract: Recent trends in software engineering, especially within the object-oriented community, reflect a clear trend toward systems engineering methods. Object oriented designs, meant for programming design, often take on the distinct appearance of system models of physical networks and devices. It is not immediately apparent how the areas of "modeling" and "programming" relate to one another, and why the convergence is taking place. To explore the convergence in depth, we discuss common concepts between models and programs, and discuss future trends in computer science which are forging a steady convergence between models and programs. The convergence is spawned by increased emphasis on object oriented design, distributed systems, complex systems, new forms of analog computation, and abstraction methodology. We close with a discussion of MOOSE, which provides a comprehensive modeling environment for both programmers and modelers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Leonard L. Adleman. </author> <title> Molecular Computation of Solutions to Combinatorial Problems. </title> <journal> Science, </journal> <volume> 266 </volume> <pages> 1021-1024, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Many other analog computations are possible [14] including those associated with DNA-based computing <ref> [1] </ref>. 4 Program + Metaphor = Model: From Programs to Models Now, that we can claim that any program is a model of the underlying physical structure of the computer, let's consider the conversion of algorithms or programs to models through the liberal use of metaphor.
Reference: [2] <author> Michael A. Arbib. </author> <title> Brains, Machines and Mathematics. </title> <publisher> Springer Verlag, </publisher> <address> second edition, </address> <year> 1987. </year>
Reference-contexts: When we say "control," we are referring to a combination of the system property controllability [27] and the concept effective procedure <ref> [2] </ref> which embody what we normally think of with a modern "program." Suppose now, that we change the ants so that they always move in a two-dimensional, random fashion (random walk) and that we now have the ability to move or stop an an ant at our discretion.
Reference: [3] <author> W. Ross Ashby. </author> <title> An Introduction to Cybernetics. </title> <publisher> John Wiley and Sons, </publisher> <year> 1963. </year>
Reference-contexts: With this new level of control and computability, we can program the ants to behave as we prefer. The movement from Fig. 3 (a) to Fig. 3 (c) can be seen in either direction: gradually gaining ant control or losing control. Ashby <ref> [3] </ref> refers to the loss or gain in regulation (control) of a system as a change in requisite variety. <p> The electronic analog computer contained patch panel programs which we classify as constraint models in the form of differential equations. Programs were constructed physically by patching together processing elements via coated wires on perforated boards. Areas such as automata theory and cybernetics <ref> [3] </ref> paid special attention to the relations of model to program. Today, a program is generally considered to be a tool with a certain degree of freedom. Chomsky's hierarchy of language complexity|which can be shown equivalent to levels of computational complexity|provides us with the power we normally associate with programs.
Reference: [4] <author> J. Robert Ashley. </author> <title> Introduction to Analog Computation. </title> <publisher> John Wiley and Sons, </publisher> <year> 1963. </year>
Reference-contexts: Analog computation enjoys a much richer history than digital computing and also serves to make the idea of model and program one and the same. Electronic analog computers <ref> [4] </ref> were constructed to solve differential equations much like Babbage's engine was built to solve polynomials through differencing. The programs for these computers are models in every sense since the program was built to model physical phenomena.
Reference: [5] <editor> Osman Balci and Richard E. Nance. </editor> <title> Simulation Model Development Environments: A Research Prototype. </title> <journal> Journal of the Operational Research Society, </journal> <volume> 38(8):753 - 763, </volume> <year> 1987. </year>
Reference-contexts: We achieve this goal by discussing the relationship between models and programs. The effort of tying models and programs closer together has been studied by a number of researchers. In the simulation community, Nance, Balci and Overstreet <ref> [35, 5, 39] </ref> have focused their modeling studies in the bridge area of software engineering and simulation modeling. Oren [38], Zeigler [57, 58], Cellier [12] and Fishwick [16] espouse modeling methods and formalisms which can be cross-referenced in either simulation or computer science-based systems.
Reference: [6] <author> Ludwig von Bertalanffy. </author> <title> General System Theory. </title> <address> George Braziller, New York, </address> <year> 1968. </year>
Reference-contexts: Hardware and software are integral system components and both need to be modeled under a unified theme of system modeling. The common formal base of all systems is systems theory <ref> [6, 40] </ref>, which leads to systems science [21] and engineer ing [49]. 2. Object-Oriented Design: The OO philosophy promotes a clean interface between real world objects and computer programs, and this is one of the key reasons why the OO paradigm is successful.
Reference: [7] <author> G. M. Birtwistle. </author> <title> Discrete Event Modelling on SIMULA. </title> <publisher> Macmillan, </publisher> <year> 1979. </year>
Reference-contexts: Objects are created as instances of classes, classes are joined together in a tree-like fashion to form class hierarchies, and classes are subsequently endowed with attributes and methods. The implementation of Simula <ref> [7] </ref> (an early simulation language which is still thriving, especially in Europe) is considered the first language which fully exploited the benefits of OO programming.
Reference: [8] <author> Grady Booch. </author> <title> Object-Oriented Development. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(2):211 - 221, </volume> <month> February </month> <year> 1986. </year> <month> 12 </month>
Reference-contexts: It could be argued that, while a focus on real world objects is perfect for simulation applications, software applications present a different story. However, given this issue, consider a sample of recent literature on software design using OO principles <ref> [8, 10, 47, 51, 52] </ref>. This OO emphasis is on models of physical systems such as ATM machines and air conditioning control, and elicits the following question: "Are software engineers doing system engineering?" The OO designs described are of physical systems.
Reference: [9] <author> Grady Booch. </author> <title> On the Concepts of Object-Oriented Design. </title> <editor> In Peter A. Ng and Ray--mond T. Yeh, editors, </editor> <booktitle> Modern Software Engineering, chapter 6, </booktitle> <pages> pages 165 - 204. </pages> <publisher> Van Nostrand Reinhold, </publisher> <year> 1990. </year>
Reference-contexts: Models are patterns of behavior and structure in physical systems. By creating a model of a system, a scientist is able economically record and abstract the behavior and geometry of a physical system at various abstraction levels. While the use of modeling has been utilized in software <ref> [42, 9, 13] </ref> and systems engineering [49], modeling requires a stronger base in software engineering. Our purpose is to relate the use of model to program and to justify the need for increased attention to modeling in software systems.
Reference: [10] <author> Grady Booch. </author> <title> Object Oriented Design. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: It could be argued that, while a focus on real world objects is perfect for simulation applications, software applications present a different story. However, given this issue, consider a sample of recent literature on software design using OO principles <ref> [8, 10, 47, 51, 52] </ref>. This OO emphasis is on models of physical systems such as ATM machines and air conditioning control, and elicits the following question: "Are software engineers doing system engineering?" The OO designs described are of physical systems. <p> All static and dynamic knowledge about the physical system must be encoded in some form which allows specification of interaction without necessarily specifying the dynamics in quantitative terms. Semantic networks [56] present one way of encoding conceptual semantics; however, we have chosen object-oriented design networks <ref> [10, 47] </ref> which have more formal treatment. The ultimate conceptual model is one based on database technology, such as an object-oriented database, capturing all facets of the physical system. Declarative models permit dynamics to be encoded as state-to-state or event-to-event transitions.
Reference: [11] <author> Peter C. Breedveld. </author> <title> A Systematic Method to Derive Bond Graph Models. </title> <booktitle> In Second European Simulation Congress, </booktitle> <address> Antwerp, Belgium, </address> <year> 1986. </year>
Reference-contexts: In such a case, an equation is often the best characterization of the model since a directional approach such as functional modeling is insufficient. Equational systems include difference models, ordinary differential equations, and delay differential equations. Graphical models such as bond graphs <ref> [11, 28] </ref> and electrical network graphs [44] are also constraint based. If a system is spatially decomposed as for cellular automata [55, 54, 24], Ising systems, PDE-based solutions or finite element models, then the system is being modeled using a spatial modeling technique.
Reference: [12] <author> Francois E. </author> <title> Cellier. Continuous System Modeling. </title> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The effort of tying models and programs closer together has been studied by a number of researchers. In the simulation community, Nance, Balci and Overstreet [35, 5, 39] have focused their modeling studies in the bridge area of software engineering and simulation modeling. Oren [38], Zeigler [57, 58], Cellier <ref> [12] </ref> and Fishwick [16] espouse modeling methods and formalisms which can be cross-referenced in either simulation or computer science-based systems.
Reference: [13] <author> Peter Coad, David North, and Mark Mayfield. </author> <title> Object Models, Strategies, Patterns & Applications. </title> <publisher> Yourdon Press Computing Series. Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Models are patterns of behavior and structure in physical systems. By creating a model of a system, a scientist is able economically record and abstract the behavior and geometry of a physical system at various abstraction levels. While the use of modeling has been utilized in software <ref> [42, 9, 13] </ref> and systems engineering [49], modeling requires a stronger base in software engineering. Our purpose is to relate the use of model to program and to justify the need for increased attention to modeling in software systems. <p> There are counter-examples to this trend, such as the work in visual programming languages and recent OO program visualizations <ref> [23, 13] </ref>, but overall the field of modeling has always focused heavily on visual formalisms. To a great extent, the topology in models correlate to the distinct geometric structures in natural and artificial systems: we construct icons where we see physical pieces in the real-world system.
Reference: [14] <author> A. K. Dewdney. </author> <title> The Tinkertoy Computer and Other Machinations. </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <year> 1993. </year>
Reference-contexts: In our terminology, "computer" is a very general concept and could refer to the Babbage differential analyzer, a computer created from tinkertoys <ref> [14] </ref> or a modern digital computer. Sometimes, the terms "model" and "program" are used interchangeably. In a formal sense, models and programs can be interpreted as equivalent, but the terms are quite overloaded and so we will need to examine them more carefully. <p> Recent work in analog computing falls into the category of analog VLSI computation [33] where programs are constructed to manipulate the parameters for neural networks, which perform a useful function, such as emulating biological sensors, when executed. Many other analog computations are possible <ref> [14] </ref> including those associated with DNA-based computing [1]. 4 Program + Metaphor = Model: From Programs to Models Now, that we can claim that any program is a model of the underlying physical structure of the computer, let's consider the conversion of algorithms or programs to models through the liberal use
Reference: [15] <author> Richard C. Dorf. </author> <title> Modern Control Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: When the system is seen as a set of boxes communicating with messages or signals, the functional paradigm takes hold. A "data flow model" is a functional model. The use of functional models is found in control engineering <ref> [37, 15] </ref> (with continuous signals) as well as queuing networks for computer system model design [32]. Some functional systems focus not so much on the functions, but more on the variables. Such models include signal flow graphs, compartmental models [26], and Systems Dynamics [46].
Reference: [16] <author> Paul A. Fishwick. </author> <title> An Integrated Approach to System Modelling using a Synthesis of Artificial Intelligence, </title> <booktitle> Software Engineering and Simulation Methodologies. ACM Transactions on Modeling and Computer Simulation, </booktitle> <year> 1992. </year> <note> (submitted for review). </note>
Reference-contexts: In the simulation community, Nance, Balci and Overstreet [35, 5, 39] have focused their modeling studies in the bridge area of software engineering and simulation modeling. Oren [38], Zeigler [57, 58], Cellier [12] and Fishwick <ref> [16] </ref> espouse modeling methods and formalisms which can be cross-referenced in either simulation or computer science-based systems. <p> The lowest level of abstraction for a system will probably use a spatial model whereas the highest level may use a declarative finite state machine. Intermediate levels will often use functional and constraint techniques. Models which are composed of other models are termed multimodels <ref> [20, 16, 18] </ref>. By utilizing abstraction levels, we can switch levels during the simulation and use the abstraction most appropriate at that given time.
Reference: [17] <author> Paul A. Fishwick. Simpack: </author> <title> Getting Started with Simulation Programming in C and C++. </title> <booktitle> In 1992 Winter Simulation Conference, </booktitle> <pages> pages 154-162, </pages> <address> Arlington, VA, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: The GUI is developed using Tk/Tcl and serves to interface with the user via three windows: experiment,modeling,scenario. It is possible to construct multimod-els interactively. These models allow a heterogeneous model construction capability. The Blocks language is used as an intermediate "assembly language" and SimPack <ref> [17] </ref> serves as the base simulation library toolkit which executes all Blocks models. SimPack currently has over 180 users worldwide and is documented in http://www.cis.ufl.edu/~fishwick under "SimPack Simulation Toolkit." Other simulation information on MOOSE is located at this URL as well.
Reference: [18] <author> Paul A. Fishwick. </author> <title> A Simulation Environment for Multimodeling. Discrete Event Dynamic Systems: </title> <journal> Theory and Applications, </journal> <volume> 3 </volume> <pages> 151-171, </pages> <year> 1993. </year>
Reference-contexts: The lowest level of abstraction for a system will probably use a spatial model whereas the highest level may use a declarative finite state machine. Intermediate levels will often use functional and constraint techniques. Models which are composed of other models are termed multimodels <ref> [20, 16, 18] </ref>. By utilizing abstraction levels, we can switch levels during the simulation and use the abstraction most appropriate at that given time.
Reference: [19] <author> Paul A. Fishwick. </author> <title> Simulation Model Design and Execution: Building Digital Worlds. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Models can be constructed as visual or textual artifacts. Sample model types include finite state and event automata, Petri nets, logic/production-rule systems, functional block models, equation sets and spatial models <ref> [19] </ref>. The model serves as a mental device for reasoning about the system without necessarily performing all experiments on the full system. Moreover, the model is generally cheaper to construct and maintain and serves as a pattern used for archiving and disseminating system knowledge. <p> We will briefly discuss the model types in Fig. 4. A more complete written treatment is provided in <ref> [19] </ref>. There are five basic model types, and one complex model type which includes abstraction levels, each composed of one of the basic types. Conceptual models represent the first phase in any modeling endeavor.
Reference: [20] <author> Paul A. Fishwick and Bernard P. Zeigler. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 2(1) </volume> <pages> 52-81, </pages> <year> 1992. </year>
Reference-contexts: The lowest level of abstraction for a system will probably use a spatial model whereas the highest level may use a declarative finite state machine. Intermediate levels will often use functional and constraint techniques. Models which are composed of other models are termed multimodels <ref> [20, 16, 18] </ref>. By utilizing abstraction levels, we can switch levels during the simulation and use the abstraction most appropriate at that given time.
Reference: [21] <author> Robert L. Flood and Ewart R. Carson. </author> <title> Dealing with Complexity: An Introduction to the Theory and Application of Systems Science. </title> <publisher> Plenum Press, </publisher> <year> 1988. </year>
Reference-contexts: Hardware and software are integral system components and both need to be modeled under a unified theme of system modeling. The common formal base of all systems is systems theory [6, 40], which leads to systems science <ref> [21] </ref> and engineer ing [49]. 2. Object-Oriented Design: The OO philosophy promotes a clean interface between real world objects and computer programs, and this is one of the key reasons why the OO paradigm is successful.
Reference: [22] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Programs can be looked at like models with embedded control so that if we want to build a program to solve problem X, we use an optimization approach (in conjunction with genetic algorithms <ref> [22, 29] </ref> or neural networks) to "evolve" the program. The program becomes a model of biologically evolutionary behavior.
Reference: [23] <author> David Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5):514 - 530, </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: There are counter-examples to this trend, such as the work in visual programming languages and recent OO program visualizations <ref> [23, 13] </ref>, but overall the field of modeling has always focused heavily on visual formalisms. To a great extent, the topology in models correlate to the distinct geometric structures in natural and artificial systems: we construct icons where we see physical pieces in the real-world system.
Reference: [24] <author> Brosl Hasslacher. </author> <title> Parallel Billiards and Monster Systems. </title> <editor> In N. Metropolis and Gian-Carlo Rota, editors, </editor> <booktitle> A New Era in Computation, </booktitle> <pages> pages 53-65. </pages> <publisher> MIT Press, </publisher> <year> 1992. </year> <month> 13 </month>
Reference-contexts: Equational systems include difference models, ordinary differential equations, and delay differential equations. Graphical models such as bond graphs [11, 28] and electrical network graphs [44] are also constraint based. If a system is spatially decomposed as for cellular automata <ref> [55, 54, 24] </ref>, Ising systems, PDE-based solutions or finite element models, then the system is being modeled using a spatial modeling technique. Spatial models are used to model systems in great detail, where individual pieces of physical phenomena are modeled by discretizing the geometry of the system.
Reference: [25] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison Wesley, </publisher> <year> 1979. </year>
Reference-contexts: Declarative models permit dynamics to be encoded as state-to-state or event-to-event transitions. The idea behind declarative modeling is to focus on the structure of state (or event) from one time period to the next, while de-emphasizing functions or constraints which define the transition. Models such as finite state automata <ref> [25] </ref>, Markov models, event graphs [50] and temporal logic models [34] fall into the declarative category. Declarative models are state-based (FSAs), event-based (event graphs) or a hybrid (Petri nets [41]). Functional models represent a directional flow of signal (discrete or continuous) among 10 transfer functions (boxes).
Reference: [26] <author> John A. Jacquez. </author> <title> Compartmental Analysis in Biology and Medicine. </title> <publisher> University of Michigan Press, </publisher> <address> 2nd edition, </address> <year> 1985. </year>
Reference-contexts: The use of functional models is found in control engineering [37, 15] (with continuous signals) as well as queuing networks for computer system model design [32]. Some functional systems focus not so much on the functions, but more on the variables. Such models include signal flow graphs, compartmental models <ref> [26] </ref>, and Systems Dynamics [46]. There are two types of constraint models: equational and graph-based. Constraint models are models where a balance (or constraint) is at the heart of the model design.
Reference: [27] <author> R. E. Kalman, P. L. Falb, and M. A. Arbib. </author> <title> Topics in Mathematical Systems Theory. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1962. </year>
Reference-contexts: When we say "control," we are referring to a combination of the system property controllability <ref> [27] </ref> and the concept effective procedure [2] which embody what we normally think of with a modern "program." Suppose now, that we change the ants so that they always move in a two-dimensional, random fashion (random walk) and that we now have the ability to move or stop an an ant
Reference: [28] <author> Dean C. Karnopp, Donald L. Margolis, and Ronald C. Rosenberg. </author> <title> System Dynamics. </title> <publisher> John Wiley and Sons, </publisher> <year> 1990. </year>
Reference-contexts: In such a case, an equation is often the best characterization of the model since a directional approach such as functional modeling is insufficient. Equational systems include difference models, ordinary differential equations, and delay differential equations. Graphical models such as bond graphs <ref> [11, 28] </ref> and electrical network graphs [44] are also constraint based. If a system is spatially decomposed as for cellular automata [55, 54, 24], Ising systems, PDE-based solutions or finite element models, then the system is being modeled using a spatial modeling technique.
Reference: [29] <editor> John Koza. </editor> <booktitle> Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Programs can be looked at like models with embedded control so that if we want to build a program to solve problem X, we use an optimization approach (in conjunction with genetic algorithms <ref> [22, 29] </ref> or neural networks) to "evolve" the program. The program becomes a model of biologically evolutionary behavior.
Reference: [30] <editor> Christopher Langton, editor. </editor> <booktitle> Artificial Life. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: The program becomes a model of biologically evolutionary behavior. The work in artificial life <ref> [30] </ref> capitalizes on these modeling techniques. 6 Computer Scientists as Model Builders The overlaps between modeling and programming suggest that computer scientists take a pro-active role in learning and applying the technique of modeling.
Reference: [31] <author> Harry R. Lewis and Christos H. Papadimitriou. </author> <title> Elements of the Theory of Computation. </title> <publisher> Prentice Hall, </publisher> <year> 1981. </year>
Reference-contexts: Ants move around or over obstacles they find in their way. This physical system might not make a good computer on which to run a program since (1) the dynamics of the ant colony does not exhibit Turing equivalence <ref> [31] </ref>, but more generally, (2) we are not in sufficient control of the ants.
Reference: [32] <author> M. H. MacDougall. </author> <title> Simulating Computer Systems: Techniques and Tools. </title> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: A "data flow model" is a functional model. The use of functional models is found in control engineering [37, 15] (with continuous signals) as well as queuing networks for computer system model design <ref> [32] </ref>. Some functional systems focus not so much on the functions, but more on the variables. Such models include signal flow graphs, compartmental models [26], and Systems Dynamics [46]. There are two types of constraint models: equational and graph-based.
Reference: [33] <author> Carver Mead. </author> <title> Analog VLSI and Neural Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The programs for these computers are models in every sense since the program was built to model physical phenomena. Recent work in analog computing falls into the category of analog VLSI computation <ref> [33] </ref> where programs are constructed to manipulate the parameters for neural networks, which perform a useful function, such as emulating biological sensors, when executed. <p> The old patch panel method of programming has given way to better user interfaces with computers which have higher degrees of reliability. The analog VLSI approaches now being used <ref> [33] </ref> are more reliable than the operational amplifiers used on the original analog systems. * Distributed Computation: With a mainframe system, a program runs on a single central processing unit (CPU).
Reference: [34] <author> Ben Moszkowski. </author> <title> Executing Temporal Logic Programs. </title> <publisher> Cambridge Press, </publisher> <address> Cambridge, </address> <year> 1986". </year>
Reference-contexts: The idea behind declarative modeling is to focus on the structure of state (or event) from one time period to the next, while de-emphasizing functions or constraints which define the transition. Models such as finite state automata [25], Markov models, event graphs [50] and temporal logic models <ref> [34] </ref> fall into the declarative category. Declarative models are state-based (FSAs), event-based (event graphs) or a hybrid (Petri nets [41]). Functional models represent a directional flow of signal (discrete or continuous) among 10 transfer functions (boxes).
Reference: [35] <author> Richard E. Nance. </author> <title> Modeling and Programming: An Evolutionary Convergence, </title> <month> April </month> <year> 1988. </year> <note> Unpublished overheads requested from author. </note>
Reference-contexts: We achieve this goal by discussing the relationship between models and programs. The effort of tying models and programs closer together has been studied by a number of researchers. In the simulation community, Nance, Balci and Overstreet <ref> [35, 5, 39] </ref> have focused their modeling studies in the bridge area of software engineering and simulation modeling. Oren [38], Zeigler [57, 58], Cellier [12] and Fishwick [16] espouse modeling methods and formalisms which can be cross-referenced in either simulation or computer science-based systems.
Reference: [36] <author> Nicholas Negroponte. </author> <title> Being Digital. </title> <address> Knopf, </address> <year> 1995. </year>
Reference-contexts: Now that systems are becoming increasingly distributed, we are finding that computing elements are literally in every physical system, including car engines, traffic lights, keyless entry systems, and even doors. Negroponte, in his recent book <ref> [36] </ref>, expounds upon this trend from a computer-human interface perspective. Distributed hardware implies that software must be distributed as well.
Reference: [37] <author> Katsuhiko Ogata. </author> <title> Modern Control Engineering. </title> <publisher> Prentice Hall, </publisher> <year> 1970. </year>
Reference-contexts: When the system is seen as a set of boxes communicating with messages or signals, the functional paradigm takes hold. A "data flow model" is a functional model. The use of functional models is found in control engineering <ref> [37, 15] </ref> (with continuous signals) as well as queuing networks for computer system model design [32]. Some functional systems focus not so much on the functions, but more on the variables. Such models include signal flow graphs, compartmental models [26], and Systems Dynamics [46].
Reference: [38] <author> Tuncer I. Oren. </author> <title> Model-Based Activities: A Paradigm Shift. </title> <editor> In T. I. Oren, B. P. Zeigler, and Elzas M. S., editors, </editor> <booktitle> Simulation and Model-Based Methodologies: An Integrative View, </booktitle> <pages> pages 3 - 40. </pages> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: The effort of tying models and programs closer together has been studied by a number of researchers. In the simulation community, Nance, Balci and Overstreet [35, 5, 39] have focused their modeling studies in the bridge area of software engineering and simulation modeling. Oren <ref> [38] </ref>, Zeigler [57, 58], Cellier [12] and Fishwick [16] espouse modeling methods and formalisms which can be cross-referenced in either simulation or computer science-based systems.
Reference: [39] <author> C. Michael Overstreet and Richard E. Nance. </author> <title> A Specification Language to Assist in Analysis of Discrete Event Simulation Models. </title> <journal> Communications of the ACM, </journal> <volume> 28(2):190 - 201, </volume> <month> February </month> <year> 1985. </year>
Reference-contexts: We achieve this goal by discussing the relationship between models and programs. The effort of tying models and programs closer together has been studied by a number of researchers. In the simulation community, Nance, Balci and Overstreet <ref> [35, 5, 39] </ref> have focused their modeling studies in the bridge area of software engineering and simulation modeling. Oren [38], Zeigler [57, 58], Cellier [12] and Fishwick [16] espouse modeling methods and formalisms which can be cross-referenced in either simulation or computer science-based systems.
Reference: [40] <author> Louis Padulo and Michael A. Arbib. </author> <title> Systems Theory: A Unified State Space Approach to Continuous and Discrete Systems. </title> <editor> W. B. </editor> <publisher> Saunders, </publisher> <address> Philadelphia, PA, </address> <year> 1974. </year>
Reference-contexts: Hardware and software are integral system components and both need to be modeled under a unified theme of system modeling. The common formal base of all systems is systems theory <ref> [6, 40] </ref>, which leads to systems science [21] and engineer ing [49]. 2. Object-Oriented Design: The OO philosophy promotes a clean interface between real world objects and computer programs, and this is one of the key reasons why the OO paradigm is successful.
Reference: [41] <author> James L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: Models such as finite state automata [25], Markov models, event graphs [50] and temporal logic models [34] fall into the declarative category. Declarative models are state-based (FSAs), event-based (event graphs) or a hybrid (Petri nets <ref> [41] </ref>). Functional models represent a directional flow of signal (discrete or continuous) among 10 transfer functions (boxes). When the system is seen as a set of boxes communicating with messages or signals, the functional paradigm takes hold. A "data flow model" is a functional model.
Reference: [42] <author> Roger S. Pressman. </author> <title> Software Engineering: A Practitioner's Approach. </title> <publisher> McGraw Hill, </publisher> <year> 1992. </year>
Reference-contexts: Models are patterns of behavior and structure in physical systems. By creating a model of a system, a scientist is able economically record and abstract the behavior and geometry of a physical system at various abstraction levels. While the use of modeling has been utilized in software <ref> [42, 9, 13] </ref> and systems engineering [49], modeling requires a stronger base in software engineering. Our purpose is to relate the use of model to program and to justify the need for increased attention to modeling in software systems.
Reference: [43] <author> Przemyslaw Prusinkiewicz and Aristid Lindenmeyer. </author> <title> The Algorithmic Beauty of Plants. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: PDEs are space-based where the template defines the integration method. L-Systems <ref> [43] </ref> are entity-based since the dynamics are based on how the organism grows over a fixed space. Large scale models [48] are built from one or more abstraction levels, each level being designed using one of the aforementioned primitive model types.
Reference: [44] <author> R. Raghuram. </author> <title> Computer Simulation of Electronic Circuits. </title> <publisher> John Wiley, </publisher> <year> 1989. </year>
Reference-contexts: In such a case, an equation is often the best characterization of the model since a directional approach such as functional modeling is insufficient. Equational systems include difference models, ordinary differential equations, and delay differential equations. Graphical models such as bond graphs [11, 28] and electrical network graphs <ref> [44] </ref> are also constraint based. If a system is spatially decomposed as for cellular automata [55, 54, 24], Ising systems, PDE-based solutions or finite element models, then the system is being modeled using a spatial modeling technique.
Reference: [45] <author> John R. Rice. </author> <booktitle> Computational Science and the Future of Computing Research. IEEE Computational Science & Engineering, </booktitle> <pages> pages 35-45, </pages> <month> Winter </month> <year> 1995. </year>
Reference-contexts: Courses should put more stress on modeling, computer simulation and systems theory (a unified view of systems). The use of interdisciplinary approaches in solving systems problems should be highly encouraged. A healthy trend toward this interdisciplinary view is taken in computational science and engineering (CSE) <ref> [45] </ref>. Modeling should be introduced in core computer science classes. 8 7 Abstraction Models come in all flavors, and most model types are adept at describing system dynamics at some specific abstraction level.
Reference: [46] <author> Nancy Roberts, David Andersen, Ralph Deal, Michael Garet, and William Shaffer. </author> <title> Introduction to Computer Simulation: A Systems Dynamics Approach. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Some functional systems focus not so much on the functions, but more on the variables. Such models include signal flow graphs, compartmental models [26], and Systems Dynamics <ref> [46] </ref>. There are two types of constraint models: equational and graph-based. Constraint models are models where a balance (or constraint) is at the heart of the model design.
Reference: [47] <author> James Rumbaugh, Michael Blaha, William Premerlani, Eddy Frederick, and William Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: It could be argued that, while a focus on real world objects is perfect for simulation applications, software applications present a different story. However, given this issue, consider a sample of recent literature on software design using OO principles <ref> [8, 10, 47, 51, 52] </ref>. This OO emphasis is on models of physical systems such as ATM machines and air conditioning control, and elicits the following question: "Are software engineers doing system engineering?" The OO designs described are of physical systems. <p> All static and dynamic knowledge about the physical system must be encoded in some form which allows specification of interaction without necessarily specifying the dynamics in quantitative terms. Semantic networks [56] present one way of encoding conceptual semantics; however, we have chosen object-oriented design networks <ref> [10, 47] </ref> which have more formal treatment. The ultimate conceptual model is one based on database technology, such as an object-oriented database, capturing all facets of the physical system. Declarative models permit dynamics to be encoded as state-to-state or event-to-event transitions.
Reference: [48] <author> Andrew P. Sage. </author> <title> Methodology for Large Scale Systems. </title> <publisher> McGraw-Hill, </publisher> <year> 1977. </year>
Reference-contexts: PDEs are space-based where the template defines the integration method. L-Systems [43] are entity-based since the dynamics are based on how the organism grows over a fixed space. Large scale models <ref> [48] </ref> are built from one or more abstraction levels, each level being designed using one of the aforementioned primitive model types. The lowest level of abstraction for a system will probably use a spatial model whereas the highest level may use a declarative finite state machine.
Reference: [49] <author> Andrew P. Sage. </author> <title> Systems Engineering. </title> <publisher> John Wiley and Sons, </publisher> <year> 1992. </year>
Reference-contexts: By creating a model of a system, a scientist is able economically record and abstract the behavior and geometry of a physical system at various abstraction levels. While the use of modeling has been utilized in software [42, 9, 13] and systems engineering <ref> [49] </ref>, modeling requires a stronger base in software engineering. Our purpose is to relate the use of model to program and to justify the need for increased attention to modeling in software systems. We achieve this goal by discussing the relationship between models and programs. <p> Hardware and software are integral system components and both need to be modeled under a unified theme of system modeling. The common formal base of all systems is systems theory [6, 40], which leads to systems science [21] and engineer ing <ref> [49] </ref>. 2. Object-Oriented Design: The OO philosophy promotes a clean interface between real world objects and computer programs, and this is one of the key reasons why the OO paradigm is successful.
Reference: [50] <author> Lee W. Schruben. </author> <title> Simulation Modeling with Event Graphs. </title> <journal> Communications of the ACM, </journal> <volume> 26(11), </volume> <year> 1983. </year>
Reference-contexts: The idea behind declarative modeling is to focus on the structure of state (or event) from one time period to the next, while de-emphasizing functions or constraints which define the transition. Models such as finite state automata [25], Markov models, event graphs <ref> [50] </ref> and temporal logic models [34] fall into the declarative category. Declarative models are state-based (FSAs), event-based (event graphs) or a hybrid (Petri nets [41]). Functional models represent a directional flow of signal (discrete or continuous) among 10 transfer functions (boxes).
Reference: [51] <author> Sally Shlaer and Stephen J. Mellor. </author> <title> Object Oriented Systems Analysis: Modeling the World in Data. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: It could be argued that, while a focus on real world objects is perfect for simulation applications, software applications present a different story. However, given this issue, consider a sample of recent literature on software design using OO principles <ref> [8, 10, 47, 51, 52] </ref>. This OO emphasis is on models of physical systems such as ATM machines and air conditioning control, and elicits the following question: "Are software engineers doing system engineering?" The OO designs described are of physical systems.
Reference: [52] <author> Sally Shlaer and Stephen J. Mellor. </author> <title> Object Lifecycles: Modeling the World in States. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: It could be argued that, while a focus on real world objects is perfect for simulation applications, software applications present a different story. However, given this issue, consider a sample of recent literature on software design using OO principles <ref> [8, 10, 47, 51, 52] </ref>. This OO emphasis is on models of physical systems such as ATM machines and air conditioning control, and elicits the following question: "Are software engineers doing system engineering?" The OO designs described are of physical systems.
Reference: [53] <editor> Francoise F. Soulie, Yves Robert, and Maurice Tchuente, editors. </editor> <booktitle> Automata Networks in Computer Science. </booktitle> <publisher> Princeton University Press, </publisher> <year> 1987. </year>
Reference-contexts: The ants are in one of two states: up (1) or down (0), so we achieve a binary encoding. A partially bounded 2D CA can be shown to have Turing equivalence since it can be divided into a finite number of 1D CAs <ref> [53] </ref>, thereby making the ants as computationally powerful as the modern general purpose computer. With this new level of control and computability, we can program the ants to behave as we prefer.
Reference: [54] <author> Tommaso Toffoli and Norman Margolus. </author> <title> Cellular Automata Machines: A New Environment for Modeling. </title> <publisher> MIT Press, </publisher> <address> 2 edition, </address> <year> 1987. </year>
Reference-contexts: Equational systems include difference models, ordinary differential equations, and delay differential equations. Graphical models such as bond graphs [11, 28] and electrical network graphs [44] are also constraint based. If a system is spatially decomposed as for cellular automata <ref> [55, 54, 24] </ref>, Ising systems, PDE-based solutions or finite element models, then the system is being modeled using a spatial modeling technique. Spatial models are used to model systems in great detail, where individual pieces of physical phenomena are modeled by discretizing the geometry of the system.
Reference: [55] <author> Stephen Wolfram. </author> <title> Theory and Applications of Cellular Automata. </title> <publisher> World Scientific Publishing, </publisher> <address> Singapore, </address> <year> 1986. </year> <note> (includes selected papers from 1983 - 1986). </note>
Reference-contexts: Equational systems include difference models, ordinary differential equations, and delay differential equations. Graphical models such as bond graphs [11, 28] and electrical network graphs [44] are also constraint based. If a system is spatially decomposed as for cellular automata <ref> [55, 54, 24] </ref>, Ising systems, PDE-based solutions or finite element models, then the system is being modeled using a spatial modeling technique. Spatial models are used to model systems in great detail, where individual pieces of physical phenomena are modeled by discretizing the geometry of the system.
Reference: [56] <author> William A. Woods. </author> <title> What's in a Link: Foundations for Semantic Networks. </title> <editor> In Daniel Bobrow and Allan Collins, editors, </editor> <booktitle> Representation and Understanding, </booktitle> <pages> pages 35 - 82. </pages> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: Conceptual models represent the first phase in any modeling endeavor. All static and dynamic knowledge about the physical system must be encoded in some form which allows specification of interaction without necessarily specifying the dynamics in quantitative terms. Semantic networks <ref> [56] </ref> present one way of encoding conceptual semantics; however, we have chosen object-oriented design networks [10, 47] which have more formal treatment. The ultimate conceptual model is one based on database technology, such as an object-oriented database, capturing all facets of the physical system.
Reference: [57] <author> Bernard P. Zeigler. </author> <title> Multi-Facetted Modelling and Discrete Event Simulation. </title> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: The effort of tying models and programs closer together has been studied by a number of researchers. In the simulation community, Nance, Balci and Overstreet [35, 5, 39] have focused their modeling studies in the bridge area of software engineering and simulation modeling. Oren [38], Zeigler <ref> [57, 58] </ref>, Cellier [12] and Fishwick [16] espouse modeling methods and formalisms which can be cross-referenced in either simulation or computer science-based systems.

References-found: 57

