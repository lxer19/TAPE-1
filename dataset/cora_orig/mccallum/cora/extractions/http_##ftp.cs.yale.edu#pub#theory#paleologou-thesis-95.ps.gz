URL: http://ftp.cs.yale.edu/pub/theory/paleologou-thesis-95.ps.gz
Refering-URL: http://ftp.cs.yale.edu/pub/theory/
Root-URL: http://www.cs.yale.edu
Title: Abstract Probabilistic Decision Making in Games and Cryptographic Protocols  
Author: Sophia A. Paleologou 
Date: 1995  
Affiliation: Yale University  
Abstract: In an attempt to circumvent the obvious barriers of deterministic computation, computer scientists added randomization to their traditional models. Probabilistic algorithms, numerous cryptographic protocols and various complexity theoretic results sprang out of this innovation. In this work, we initiate a rigorous and systematic study of probabilistic functions and computations with emphasis on the properties that are most relevant to games and cryptographic protocols. In the theory of pseudorandom number generators, probabilistic encryption and zero-knowledge, the notion of indistinguishability between two probabilistic functions plays a central role. Extending the standard notions of perfect, statistical and computational indistinguishability, we define judge indistinguishability parametrized by the judges (distinguishers), the number of independent samples with which they are presented and the tolerance on their distinguishing error. We compare different judge indistinguishabilities against statistical as well as against each other. We show that recursively presentable classes of judges have limited distinguishing power. For every such class, there exist "pseudorandom" probabilistic functions of arbitrarily small (but growing) support that cannot be distinguished from the 
Abstract-found: 1
Intro-found: 1
Reference: [Bach, 1987] <author> E. Bach. </author> <title> Realistic Analysis of Some Randomized Algorithms. </title> <booktitle> In Proc. of 19th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 453-461, </pages> <year> 1987. </year>
Reference-contexts: How can they be applied to randomized algorithms, pseudorandom number generators, zero-knowledge interactive proofs, etc. and what kind of results do they produce? Along these lines, probabilistic algorithms were used in the past as judges to evaluate the quality of pseudorandom number generators in [Karloff and Raghavan, 1988], <ref> [Bach, 1987] </ref>, and auxiliary-input zero-knowledge was shown to be a stronger notion of zero-knowledge than original zero-knowledge [Goldreich and Krawczyk, 1992].
Reference: [Balcazar et al., 1988] <author> J. L. Balcazar, J. D., and J. Gabarro. </author> <title> Structural Complexity I. </title> <publisher> Springer-Verlag, </publisher> <address> Germany, </address> <year> 1988. </year>
Reference-contexts: A systematic study of similarity among probabilistic functions was slow to develop because of our so-far limited view of probabilistic algorithms as means for approximating ordinary deterministic functions <ref> [Balcazar et al., 1988] </ref>. Standard notions of approximation|where a probabilistic function is compared against a deterministic function|seemed to be adequate. <p> Lemma 6.3 For every family T ft : N ! N g of time-constructible functions with recursively presentable clocks, J T is a recursively presentable class of total judges. Proof: See section 2.4, Time and Space Constructibility, p. 46 of <ref> [Balcazar et al., 1988] </ref>. Corollary 6.4 Let T ft : N ! N g be a family of time-constructible functions with recursively presentable clocks.
Reference: [Beigel, 1994] <author> R. Beigel, </author> <month> February </month> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: Our proof of theorem 4.18 is largely based on the Borsuk-Ulam theorem of algebraic topology. It was pointed out to us that simpler methods, rather common in the literature of complexity theory, can also be utilized here to derive indistinguishability results of similar flavor <ref> [Beigel, 1994] </ref>. The use of a theorem as powerful as the Borsuk-Ulam, however, buys us two advantages: it allows us to minimize the assumptions on the relative values of our parameters and, most importantly, solve our equations CHAPTER 4.
Reference: [Bellare et al., 1990] <author> M. Bellare, S. Micali, and R. Ostrovsky. </author> <title> The (True) Complexity of Statistical Zero Knowledge. </title> <booktitle> In Proc. of 22nd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 494-502, </pages> <year> 1990. </year>
Reference-contexts: From the vast literature of zero-knowledge, it is worth pointing out the proof under cryptographic assumptions that all languages in IP have zero-knowledge interactive proofs [Impagli-azzo and Yung, 1987], [BenOr et al., 1988]. Other interesting results can be found in [Fortnow, 1987], <ref> [Bellare et al., 1990] </ref> and [Ostrovsky and Wigderson, 1993]. 1.2 A Notion of Similarity In the previous section, we saw four topics from cryptography and complexity theory that combine randomization with computation.
Reference: [BenOr et al., 1988] <author> M. BenOr, O. Goldreich, S. Goldwasser, J. Has-tad, J. Kilian, S. Micali, and P. Rogaway. </author> <title> Everything Provable is Provable in Zero Knowledge. </title> <editor> In Shafi Goldwasser, editor, </editor> <booktitle> Lecture Notes in Computer Science: Advances in Cryptology| Crypto88, </booktitle> <pages> pages 37-56. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: A brief survey of interactive proofs and zero knowledge can be found in [Feigenbaum, 1992]. From the vast literature of zero-knowledge, it is worth pointing out the proof under cryptographic assumptions that all languages in IP have zero-knowledge interactive proofs [Impagli-azzo and Yung, 1987], <ref> [BenOr et al., 1988] </ref>. Other interesting results can be found in [Fortnow, 1987], [Bellare et al., 1990] and [Ostrovsky and Wigderson, 1993]. 1.2 A Notion of Similarity In the previous section, we saw four topics from cryptography and complexity theory that combine randomization with computation.
Reference: [Bernstein and Vazirani, 1993] <author> E. Bernstein and U. Vazirani. </author> <title> Quantum Complexity Theory. </title> <booktitle> In Proc. of 25nd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 11-20, </pages> <year> 1993. </year>
Reference-contexts: Secret key cryptography, probabilistic algorithms, pseudorandom number generators and zero knowledge, they all involve a model of computation and a source of randomness. The field of quantum complexity theory <ref> [Bernstein and Vazirani, 1993] </ref> and numerous other topics from cryptography and complexity theory also share this property. Our four examples, however, have more in common than simply randomization and computation. They all involve a notion of similarity among probabilistic functions as well.
Reference: [Blum and Micali, 1984] <author> M. Blum and S. Micali. </author> <title> How to Generate Cryptographically Strong Sequences of PseudoRandom Bits. </title> <journal> SIAM Journal of Computing, </journal> <volume> 13(4) </volume> <pages> 850-864, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: The notion of a pseudorandom number generator was introduced as a means for reducing randomness in polynomial-time computations <ref> [Blum and Micali, 1984] </ref>, [Yao, 1982]. A pseudorandom number generator is a deterministic polynomial-time algorithm which expands short random inputs into longer sequences of unpredictable pseudorandom bits. Pseudorandom sequences and truly random sequences of the same length are "indistinguishable" by all families of polynomial-size circuits [Yao, 1982]. <p> This property allows us to substitute the output of a pseudorandom number generator for the unbiased coin flips of a polynomial-time algorithm without notably affecting the behavior of the algorithm. Blum and Micali constructed pseudorandom number generators under cryptographic assumptions such as the intractability of the discrete logarithm problem <ref> [Blum and Micali, 1984] </ref>. Their generators are, however, extremely slow in practice. On the other hand, fast and popular methods for generating "pseudorandom" bits, like the linear congruence method, have now been proven very insecure, in the sense that predicting the next "pseudorandom" bit is easy [Plumstead, 1982].
Reference: [DeGroot, 1986] <author> M. H. </author> <title> DeGroot. </title> <journal> Probability and Statistics. </journal> <note> Addison-Wesley, second edition, 1986. 127 BIBLIOGRAPHY 128 </note>
Reference-contexts: We solve our systems using techniques from linear algebra [Hoffman and Kunze, 1971] and algebraic topology [Massey, 1989]. In this way, methods from continuous mathematics find applications in an inherently discrete domain. Under some basic computability restrictions, all our constructions are shown to be computable. Tools from probability theory <ref> [DeGroot, 1986] </ref> and statistics [Pollard, 1984] are naturally of great use when dealing with probabilistic functions. 1.4 Overview of the Thesis In this section, we give a brief overview of the material covered in each one of the remaining chapters.
Reference: [Feigenbaum, 1992] <editor> J. Feigenbaum. </editor> <booktitle> Contemporary Cryptology, the Science of Information Integrity, chapter 8. </booktitle> <publisher> IEEE Press, </publisher> <address> Piscataway, NJ, </address> <year> 1992. </year>
Reference-contexts: Interactive proof systems and zero knowledge constitute another very popular topic in the areas of cryptography and complexity theory. A brief survey of interactive proofs and zero knowledge can be found in <ref> [Feigenbaum, 1992] </ref>. From the vast literature of zero-knowledge, it is worth pointing out the proof under cryptographic assumptions that all languages in IP have zero-knowledge interactive proofs [Impagli-azzo and Yung, 1987], [BenOr et al., 1988].
Reference: [Fortnow, 1987] <author> L. Fortnow. </author> <title> The Complexity of Perfect Zero-Knowledge. </title> <booktitle> In Proc. of 19th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 204-209, </pages> <year> 1987. </year>
Reference-contexts: From the vast literature of zero-knowledge, it is worth pointing out the proof under cryptographic assumptions that all languages in IP have zero-knowledge interactive proofs [Impagli-azzo and Yung, 1987], [BenOr et al., 1988]. Other interesting results can be found in <ref> [Fortnow, 1987] </ref>, [Bellare et al., 1990] and [Ostrovsky and Wigderson, 1993]. 1.2 A Notion of Similarity In the previous section, we saw four topics from cryptography and complexity theory that combine randomization with computation.
Reference: [Garey and Johnson, 1979] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: Formally, we have: Pr [u (x) = y] = &gt; &lt; 1 0 otherwise (2.2) We call u the uniform function. Obviously, u is total, computable, and polynomially-bounded. Example 2: Heuristic Algorithms for TSP Consider the traveling salesman optimization problem (TSP), <ref> [Garey and Johnson, 1979] </ref>. Given a finite set C = f1; 2; : : : ; mg and a distance function d : C fi C ! N , compute a permutation of the elements in C of minimum total length.
Reference: [Geanakoplos and Gray, 1991a] <author> J. Geanakoplos and L. Gray, </author> <month> June </month> <year> 1991. </year> <type> Personal communication. </type>
Reference-contexts: In other words, we assume that exactly one leaf is labeled 1. However, the techniques we use in this work to analyze Games I and II can be extended so as to handle arbitrary probability distributions <ref> [Geanakoplos and Gray, 1991a] </ref>. Let X be a subtree of T and let L and R be the left and right subtrees of X.
Reference: [Geanakoplos and Gray, 1991b] <author> J. Geanakoplos and L. Gray. </author> <title> When seeing further is not seeing better. </title> <type> Manuscript, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: at the Santa Fe Institute, John Geanakoplos and Larry Gray presented examples of simple one-person games in which the Shannon algorithm was provably non-optimal and in which its performance actually deteriorated as the amount of permitted look-ahead (and hence the amount of data upon which to base one's decision) increased <ref> [Geanakoplos and Gray, 1991b] </ref>. Judea Pearl also noted such phenomena in chess and gave probabilistic game models in which reaching deeper consistently degrades the quality of the Shannon algorithm's decision [Pearl, 1983]. 33 CHAPTER 3.
Reference: [Gill, 1977] <author> J. Gill. </author> <title> Computational Complexity of Probabilistic Turing Machines. </title> <journal> SIAM Journal of Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <year> 1977. </year>
Reference-contexts: However, computable probabilistic functions are only a special case of probabilistic functions. Just as there exist non-computable deterministic functions, there also exist non-computable probabilistic functions. The formal model of probabilistic computation that we use is the probabilistic Turing machine defined and studied in <ref> [Gill, 1977] </ref>. It is obtained from the usual Turing machine when given access to an unbiased coin or, equivalently, to a random tape containing an infinite sequence of bits independently and uniformly distributed in f0; 1g.
Reference: [Goldreich and Krawczyk, 1992] <author> O. Goldreich and H. Krawczyk. </author> <title> Sparse Pseudorandom Distributions. Random Structures and Algorithms, </title> <booktitle> 3(2) </booktitle> <pages> 163-174, </pages> <year> 1992. </year>
Reference-contexts: involving recursively enumerable classes of judges apply not only to strictly time-bounded but to expected time-bounded Turing machines as well. 1.5 Related Work In related work, Goldreich and Krawczyk prove the existence of sparse pseudorandom probabilistic functions that are not statistically close to any distribution induced by probabilistic polynomial-time algorithms <ref> [Goldreich and Krawczyk, 1992] </ref>. By applying their results to zero-knowledge interactive proofs, they show that there exist protocols that are zero-knowledge in the original sense of the term, but not auxiliary-input zero-knowledge. <p> and what kind of results do they produce? Along these lines, probabilistic algorithms were used in the past as judges to evaluate the quality of pseudorandom number generators in [Karloff and Raghavan, 1988], [Bach, 1987], and auxiliary-input zero-knowledge was shown to be a stronger notion of zero-knowledge than original zero-knowledge <ref> [Goldreich and Krawczyk, 1992] </ref>. Similarly, it is conceivable that our results and formal methods can be used to explain the need for expected time-bounded simulators in zero-knowledge interactive proofs or show conditions under which two different indistinguishabilities give rise to the same zero-knowledge classes.
Reference: [Goldreich et al., 1986] <author> O. Goldreich, S. Goldwasser, and S. Micali. </author> <title> How to Construct Random Functions. </title> <journal> Journal of the Assotiation of Computing Machinery, </journal> <volume> 33(4) </volume> <pages> 792-807, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: In the following years, several other researchers further developed their ideas. Most importantly, the existence of pseudorandom number generators was related to the existence of one-way functions and zero-knowledge interactive CHAPTER 1. INTRODUCTION 6 proofs. Some of the most interesting results can be found in [Shamir, 1983], <ref> [Goldreich et al., 1986] </ref>, [Levin, 1987], [Goldreich et al., 1988], [Nisan and Wigderson, 1988], [Impagliazzo et al., 1989], [Kharitonov et al., 1989] and [Hastad, 1990]. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Goldreich et al., 1988] <author> O. Goldreich, H. Krawczyk, and M. Luby. </author> <title> On the Existence of Pseudorandom Generators. </title> <booktitle> In Proc. of 29th Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pages 12-24, </pages> <year> 1988. </year>
Reference-contexts: Most importantly, the existence of pseudorandom number generators was related to the existence of one-way functions and zero-knowledge interactive CHAPTER 1. INTRODUCTION 6 proofs. Some of the most interesting results can be found in [Shamir, 1983], [Goldreich et al., 1986], [Levin, 1987], <ref> [Goldreich et al., 1988] </ref>, [Nisan and Wigderson, 1988], [Impagliazzo et al., 1989], [Kharitonov et al., 1989] and [Hastad, 1990]. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Goldreich et al., 1991] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that Yield Nothing But Their Validity or All Languages in NP Have Zero-Knowledge Proof Systems. </title> <journal> Journal of the Association of Computing Machinery, </journal> <volume> 38(1) </volume> <pages> 691-729, </pages> <month> July </month> <year> 1991. </year> <note> BIBLIOGRAPHY 129 </note>
Reference-contexts: In many cryptographic scenarios, it is desirable that the verifier learns nothing from this interaction. The formalization of this idea gave rise to the notion of zero knowledge [Goldwasser and Micali, 1984], [Goldwasser et al., 1985] (later published as [Goldwasser et al., 1989]) and <ref> [Goldreich et al., 1991] </ref>. Informally, an interactive proof system is zero-knowledge, if the verifier can generate his conversation with the prover all by himself. In other words, the actual conversation between the CHAPTER 1. <p> The case of statistical indistinguishability is a little bit more interesting. As it was already argued in <ref> [Goldreich et al., 1991] </ref>, we can derive an alternative definition CHAPTER 2. THE FORMAL FRAMEWORK 23 of standard statistical indistinguishability as polynomial indistinguishability with the restriction on the running time of the Turing-machine judges omitted. <p> In the sequel, we show that for some special classes of judges the opposite is also true, and the two indistinguishabilities give rise to the same equivalence classes. In this way, we generalize the observation of <ref> [Goldreich et al., 1991] </ref> that statistical indistinguishability at polynomial tolerance can be derived as a J -indistinguishability from one sample at the same tolerance, where J is the class of all judges. 4.2.1 Statistical refine Judge Indistinguishabilities Theorem 4.1 Let " : fl ! (0; 1) be a tolerance function.
Reference: [Goldwasser and Micali, 1984] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic Encryption. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28 </volume> <pages> 270-299, </pages> <year> 1984. </year>
Reference-contexts: In many cryptographic scenarios, it is desirable that the verifier learns nothing from this interaction. The formalization of this idea gave rise to the notion of zero knowledge <ref> [Goldwasser and Micali, 1984] </ref>, [Goldwasser et al., 1985] (later published as [Goldwasser et al., 1989]) and [Goldreich et al., 1991]. Informally, an interactive proof system is zero-knowledge, if the verifier can generate his conversation with the prover all by himself. In other words, the actual conversation between the CHAPTER 1. <p> In this section, we briefly present the four standard notions of indistinguishability studied in the literature of pseudo-random number generators [Yao, 1982,Blum and Micali, 1984], probabilistic encryption <ref> [Goldwasser and Micali, 1984] </ref>, and zero-knowledge interactive proofs [Goldwasser et al., 1989,Goldreich et al., 1991].
Reference: [Goldwasser et al., 1985] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proof Systems. </title> <booktitle> In Proc. of 27th Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pages 291-304, </pages> <year> 1985. </year>
Reference-contexts: In many cryptographic scenarios, it is desirable that the verifier learns nothing from this interaction. The formalization of this idea gave rise to the notion of zero knowledge [Goldwasser and Micali, 1984], <ref> [Goldwasser et al., 1985] </ref> (later published as [Goldwasser et al., 1989]) and [Goldreich et al., 1991]. Informally, an interactive proof system is zero-knowledge, if the verifier can generate his conversation with the prover all by himself. In other words, the actual conversation between the CHAPTER 1.
Reference: [Goldwasser et al., 1989] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proof Systems. </title> <journal> SIAM Journal of Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: In many cryptographic scenarios, it is desirable that the verifier learns nothing from this interaction. The formalization of this idea gave rise to the notion of zero knowledge [Goldwasser and Micali, 1984], [Goldwasser et al., 1985] (later published as <ref> [Goldwasser et al., 1989] </ref>) and [Goldreich et al., 1991]. Informally, an interactive proof system is zero-knowledge, if the verifier can generate his conversation with the prover all by himself. In other words, the actual conversation between the CHAPTER 1. <p> Although the indistinguishability results of chapters 4 and 5 involving recursively presentable judges apparently do not apply to those circuit judges, we can still use them to derive some interesting corollaries. We start by generalizing an interesting observation from the literature of zero-knowledge interactive proofs <ref> [Goldwasser et al., 1989] </ref> that characterizes families of size-bounded circuits as judges and differentiates them from time-bounded Turing machines. The indistinguishability results of this section hold over the domain F tot of total probabilistic functions. F tot = f : fl ! fl [ f?g total o CHAPTER 6. <p> SOME SPECIAL CLASSES OF JUDGES 120 6.3.1 Sample Size in Circuit Indistinguishabilities Variations in the size of the sample set, from a single sample to polynomially many samples, do not affect the distinguishing power of families of polynomial-size circuits <ref> [Goldwasser et al., 1989] </ref>. Here, we state and prove this theorem in a more general form as it applies to our generalized indistinguishability framework. The proof is based on a simple averaging argument.
Reference: [Hastad, 1990] <author> J. Hastad. </author> <title> Pseudorandom Generators under Uniform Assumptions. </title> <booktitle> In Proc. of 22nd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 395-404, </pages> <year> 1990. </year>
Reference-contexts: INTRODUCTION 6 proofs. Some of the most interesting results can be found in [Shamir, 1983], [Goldreich et al., 1986], [Levin, 1987], [Goldreich et al., 1988], [Nisan and Wigderson, 1988], [Impagliazzo et al., 1989], [Kharitonov et al., 1989] and <ref> [Hastad, 1990] </ref>. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Hoeffding, 1963] <author> W. Hoeffding. </author> <title> Probability Inequalities for Sums of Bounded Random Variables. </title> <journal> Journal of the American Statistical Association, </journal> <volume> 58 </volume> <pages> 13-30, </pages> <year> 1963. </year>
Reference-contexts: Starting from a pair of probabilistic functions of small statistical difference, we construct a judge J d suff with arbitrarily big distinguishing power, potentially much bigger than the statistical difference of the two functions. In our analysis, we make use of Hoffding's inequality <ref> [Hoeffding, 1963] </ref>.
Reference: [Hoffman and Kunze, 1971] <author> K. Hoffman and R. Kunze. </author> <title> Linear Algebra. </title> <publisher> Prentice Hall, </publisher> <year> 1971. </year>
Reference-contexts: As a result of the probabilistic aspect of our subject, diagonalization gives rise to a system of equations taking values in the real interval (0; 1). We solve our systems using techniques from linear algebra <ref> [Hoffman and Kunze, 1971] </ref> and algebraic topology [Massey, 1989]. In this way, methods from continuous mathematics find applications in an inherently discrete domain. Under some basic computability restrictions, all our constructions are shown to be computable.
Reference: [Impagliazzo and Yung, 1987] <author> R. Impagliazzo and M. Yung. </author> <title> Direct Minimum-Knowledge Computations. </title> <editor> In C. Pomerance, editor, </editor> <booktitle> Lecture Notes in Computer Science: Advances in Cryptology|Crypto87, </booktitle> <pages> pages 40-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: [Impagliazzo et al., 1989] <author> R. Impagliazzo, L. A. Levin, and M. Luby. </author> <title> Pseudorandom Generation from One-Way Functions. </title> <booktitle> In Proc. of 21st ACM Symp. on Theory of Computing, </booktitle> <pages> pages 12-24, </pages> <year> 1989. </year>
Reference-contexts: INTRODUCTION 6 proofs. Some of the most interesting results can be found in [Shamir, 1983], [Goldreich et al., 1986], [Levin, 1987], [Goldreich et al., 1988], [Nisan and Wigderson, 1988], <ref> [Impagliazzo et al., 1989] </ref>, [Kharitonov et al., 1989] and [Hastad, 1990]. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Karloff and Raghavan, 1988] <author> H.J. Karloff and Prabhakar Raghavan. </author> <title> Randomized Algorithms and Pseudorandom Numbers. </title> <booktitle> In Proc. of 20th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 310-321, </pages> <year> 1988. </year>
Reference-contexts: How can they be applied to randomized algorithms, pseudorandom number generators, zero-knowledge interactive proofs, etc. and what kind of results do they produce? Along these lines, probabilistic algorithms were used in the past as judges to evaluate the quality of pseudorandom number generators in <ref> [Karloff and Raghavan, 1988] </ref>, [Bach, 1987], and auxiliary-input zero-knowledge was shown to be a stronger notion of zero-knowledge than original zero-knowledge [Goldreich and Krawczyk, 1992].
Reference: [Kharitonov et al., 1989] <author> M. Kharitonov, A. Goldberg, and M. Yung. </author> <title> Lower Bounds for Pseudorandom Generators. </title> <booktitle> In BIBLIOGRAPHY 130 Proc. of 30th Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pages 242-247, </pages> <year> 1989. </year>
Reference-contexts: INTRODUCTION 6 proofs. Some of the most interesting results can be found in [Shamir, 1983], [Goldreich et al., 1986], [Levin, 1987], [Goldreich et al., 1988], [Nisan and Wigderson, 1988], [Impagliazzo et al., 1989], <ref> [Kharitonov et al., 1989] </ref> and [Hastad, 1990]. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Levin, 1987] <author> L. Levin. </author> <title> One Way Functions and Pseudorandom Generators. </title> <journal> Combinatorica, </journal> <volume> 7(4) </volume> <pages> 357-363, </pages> <year> 1987. </year>
Reference-contexts: Most importantly, the existence of pseudorandom number generators was related to the existence of one-way functions and zero-knowledge interactive CHAPTER 1. INTRODUCTION 6 proofs. Some of the most interesting results can be found in [Shamir, 1983], [Goldreich et al., 1986], <ref> [Levin, 1987] </ref>, [Goldreich et al., 1988], [Nisan and Wigderson, 1988], [Impagliazzo et al., 1989], [Kharitonov et al., 1989] and [Hastad, 1990]. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Massey, 1989] <author> W. S. Massey. </author> <title> Algebraic Topology: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: As a result of the probabilistic aspect of our subject, diagonalization gives rise to a system of equations taking values in the real interval (0; 1). We solve our systems using techniques from linear algebra [Hoffman and Kunze, 1971] and algebraic topology <ref> [Massey, 1989] </ref>. In this way, methods from continuous mathematics find applications in an inherently discrete domain. Under some basic computability restrictions, all our constructions are shown to be computable. <p> Moreover, for any (possibly growing) number of samples, there exist pairs of statistically different probabilistic functions that are, nevertheless, perfectly indistinguishable to enumerable classes of judges. The proof of this last result is based on the powerful Borsuk-Ulam theorem from algebraic topology <ref> [Massey, 1989] </ref>. We close the chapter with a proof that statistically different probabilistic functions can be distinguished at any arbitrary tolerance given a sufficient number of samples. 62 CHAPTER 4. INDISTINGUISHABILITY OF PROBABILISTIC FUNCTIONS 63 Most of the proofs in this chapter are based on existential arguments. <p> The Borsuk-Ulam theorem from algebraic topology <ref> [Massey, 1989] </ref> shows that any continuous mapping on the unit sphere has two antipodal points mapped to the same value. The formal statement of the theorem follows. CHAPTER 4.
Reference: [Meyer, 1994] <author> B. Meyer. </author> <title> Constructive separation of classes of indistinguishable ensembles. </title> <booktitle> In Proc. of Structures, </booktitle> <year> 1994. </year>
Reference-contexts: They conclude that zero-knowledge is trivial under this assumption, as only languages in BPP can have zero-knowledge proofs. Meyer separates the four standard indistinguishabilities from the zero-knowledge literature by constructing appropriate pairs of computable probabilistic functions <ref> [Meyer, 1994] </ref>. His separation proofs make use of a method for deterministically simulating in space S 2 an S space-bounded probabilistic Turing machine with running time bounded by 2 S .
Reference: [Miller, 1976] <author> G.L. Miller. </author> <title> Riemann's Hypothesis and Tests for Primality. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 13 </volume> <pages> 300-317, </pages> <year> 1976. </year>
Reference-contexts: One of the first and most famous examples of a seemingly intractable problem with elegant and efficient probabilistic solutions is primality testing. Probabilistic tests that recognize prime numbers in polynomial time with a small probability of error were presented in [Rabin, 1976], [Rabin, 1980], <ref> [Miller, 1976] </ref> and [Solovay and Strassen, 1977]. The primality test of Solovay and Strassen 2 is shown in figure 1.2.
Reference: [Nisan and Wigderson, 1988] <author> N. Nisan and A. Wigderson. </author> <title> Hardness vs. Randomness. </title> <booktitle> In Proc. of 29th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 2-10, </pages> <year> 1988. </year>
Reference-contexts: Most importantly, the existence of pseudorandom number generators was related to the existence of one-way functions and zero-knowledge interactive CHAPTER 1. INTRODUCTION 6 proofs. Some of the most interesting results can be found in [Shamir, 1983], [Goldreich et al., 1986], [Levin, 1987], [Goldreich et al., 1988], <ref> [Nisan and Wigderson, 1988] </ref>, [Impagliazzo et al., 1989], [Kharitonov et al., 1989] and [Hastad, 1990]. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Ostrovsky and Wigderson, 1993] <author> R. Ostrovsky and A. Wigderson. </author> <title> One-Way Functions are Essential for Non-Trivial Zero-Knowledge. </title> <booktitle> In Proc. of 34th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 3-17, </pages> <year> 1993. </year>
Reference-contexts: From the vast literature of zero-knowledge, it is worth pointing out the proof under cryptographic assumptions that all languages in IP have zero-knowledge interactive proofs [Impagli-azzo and Yung, 1987], [BenOr et al., 1988]. Other interesting results can be found in [Fortnow, 1987], [Bellare et al., 1990] and <ref> [Ostrovsky and Wigderson, 1993] </ref>. 1.2 A Notion of Similarity In the previous section, we saw four topics from cryptography and complexity theory that combine randomization with computation. Secret key cryptography, probabilistic algorithms, pseudorandom number generators and zero knowledge, they all involve a model of computation and a source of randomness. <p> By applying their results to zero-knowledge interactive proofs, they show that there exist protocols that are zero-knowledge in the original sense of the term, but not auxiliary-input zero-knowledge. Ostrovsky and Wigderson compare the notions of statistical and polynomial indistinguishability under the assumption that one-way functions do not exist <ref> [Ostrovsky and Wigderson, 1993] </ref>. They conclude that zero-knowledge is trivial under this assumption, as only languages in BPP can have zero-knowledge proofs. Meyer separates the four standard indistinguishabilities from the zero-knowledge literature by constructing appropriate pairs of computable probabilistic functions [Meyer, 1994].
Reference: [Papadimitriou and Steiglitz, 1982] <author> C. H. Papadimitriou and Kenneth Steiglitz. </author> <title> Combinatorial Optimization, Algorithms and Complexity. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference-contexts: It is also undercon strained, since k (x) &gt; m (x). Thus, it has a basic feasible solution q 2 [0; 1] k (x) with at most m (x) non-zero coordinates; see section 2.2, Basic Feasible Solutions, of <ref> [Papadimitriou and Steiglitz, 1982] </ref>. Such a q can be thought of as a probability distribution over the s j 's, j = 1; 2; : : : ; k (x). <p> It is also underconstrained, since k (x) &gt; m (x). Thus, it has a basic feasible solution q 0 2 [0; 1] k (x) with at most m (x) non-zero coordinates; see section 2.2, Basic Feasible Solutions, of <ref> [Papadimitriou and Steiglitz, 1982] </ref>. We compute such a solution q 0 by cycling through the Basic Solutions of 5.12 and testing for feasibility. At every step, we set (k (x) m (x)) variables to 0 and use Gaussian elimination to solve the resulting system exactly.
Reference: [Papadimitriou, 1993] <author> C. H. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: CHAPTER 1. INTRODUCTION 5 For a general introduction to probabilistic algorithms and pointers to the most significant results in the literature, consult any modern textbook in algorithms or complexity theory, like <ref> [Papadimitriou, 1993] </ref>. 1.1.3 Pseudorandom Number Generators As randomness was increasingly used in areas of computer science like algorithm design, complexity and cryptography, it very quickly became a computational resource in itself and saving on the amount of randomness required by a computation became a natural concern.
Reference: [Pearl, 1983] <author> J. Pearl. </author> <title> On the nature of pathology in game searching. </title> <journal> Artificial Intelligence, </journal> <volume> 20 </volume> <pages> 427-453, </pages> <year> 1983. </year>
Reference-contexts: Judea Pearl also noted such phenomena in chess and gave probabilistic game models in which reaching deeper consistently degrades the quality of the Shannon algorithm's decision <ref> [Pearl, 1983] </ref>. 33 CHAPTER 3. SOME SIMPLE PROBABILISTIC GAMES 34 In this chapter, we provide a formal probabilistic analysis of the tree games of Geanakoplos and Gray. Rather surprisingly, the optimal decision rules for those games can be expressed by compact, closed-form formulas of low computational complexity.
Reference: [Plumstead, 1982] <author> J. B. Plumstead. </author> <title> Inferring a Sequence Generated by a Linear Congruence. </title> <booktitle> In Proc. 23nd IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 153-159, </pages> <year> 1982. </year> <note> BIBLIOGRAPHY 131 </note>
Reference-contexts: Their generators are, however, extremely slow in practice. On the other hand, fast and popular methods for generating "pseudorandom" bits, like the linear congruence method, have now been proven very insecure, in the sense that predicting the next "pseudorandom" bit is easy <ref> [Plumstead, 1982] </ref>. The work of Blum and Micali stirred a lot of interest in the field of pseudorandom number generators. In the following years, several other researchers further developed their ideas.
Reference: [Pollard, 1984] <author> D. Pollard. </author> <title> Convergence of Stochastic Processes. </title> <booktitle> Springer Series in Statistics. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: In this way, methods from continuous mathematics find applications in an inherently discrete domain. Under some basic computability restrictions, all our constructions are shown to be computable. Tools from probability theory [DeGroot, 1986] and statistics <ref> [Pollard, 1984] </ref> are naturally of great use when dealing with probabilistic functions. 1.4 Overview of the Thesis In this section, we give a brief overview of the material covered in each one of the remaining chapters. <p> In our analysis, we make use of Hoffding's inequality [Hoeffding, 1963]. For a modern treatment of the subject, see <ref> [Pollard, 1984] </ref>. 4.4.1 Hoffding's Inequality Theorem 4.19 (Hoffding's Inequality) Let Y 1 , Y 2 , : : :, Y t be independent random variables with zero means and bounded ranges: a i Y i b i , i = 1; 2; : : : ; t.
Reference: [Rabin, 1976] <author> M. O. Rabin. </author> <title> Probabilistic Algorithms. </title> <editor> In J. F. Traub, editor, </editor> <booktitle> Algorithms and Complexity: New Directions and Recent Results, </booktitle> <pages> pages 21-39. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1976. </year>
Reference-contexts: One of the first and most famous examples of a seemingly intractable problem with elegant and efficient probabilistic solutions is primality testing. Probabilistic tests that recognize prime numbers in polynomial time with a small probability of error were presented in <ref> [Rabin, 1976] </ref>, [Rabin, 1980], [Miller, 1976] and [Solovay and Strassen, 1977]. The primality test of Solovay and Strassen 2 is shown in figure 1.2.
Reference: [Rabin, 1980] <author> M. O. Rabin. </author> <title> Probabilistic Algorithm for Testing Primality. </title> <journal> Journal of Number Theory, </journal> <volume> 12 </volume> <pages> 128-138, </pages> <year> 1980. </year>
Reference-contexts: One of the first and most famous examples of a seemingly intractable problem with elegant and efficient probabilistic solutions is primality testing. Probabilistic tests that recognize prime numbers in polynomial time with a small probability of error were presented in [Rabin, 1976], <ref> [Rabin, 1980] </ref>, [Miller, 1976] and [Solovay and Strassen, 1977]. The primality test of Solovay and Strassen 2 is shown in figure 1.2.
Reference: [Rogers, 1967] <author> H. Rogers. </author> <title> Theory of Recursive Functions and Effective Computability. </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1967. </year>
Reference-contexts: At the heart of many of our indistinguishability results lies a standard diagonal-ization, a rather basic tool that we borrow from the realm of recursive function theory <ref> [Rogers, 1967] </ref>. As a result of the probabilistic aspect of our subject, diagonalization gives rise to a system of equations taking values in the real interval (0; 1). We solve our systems using techniques from linear algebra [Hoffman and Kunze, 1971] and algebraic topology [Massey, 1989]. <p> SOME SPECIAL CLASSES OF JUDGES 109 presentable total judges apply also to Turing machines that are time-bounded only in an expected sense. We prove the recursive presentability of expected time-bounded Turing machines using a standard method from recursive function theory <ref> [Rogers, 1967] </ref> to clock arbitrary probabilistic Turing machines and force bounds on their expected running time. 6.2.1 Forcing Expected Time Bounds Let M be an arbitrary probabilistic Turing machine. For every x 2 fl , let T M (x) denote the running time of machine M on input x.
Reference: [Ross, 1976] <author> S. Ross. </author> <title> A first course in Probability. </title> <publisher> Macmillan, </publisher> <address> New York, NY, </address> <year> 1976. </year>
Reference-contexts: More advanced tools, like Hoffding's inequality, whenever needed in the proof of a theorem, are sufficiently explained and accompanied by references. For a general introduction to probability theory, see <ref> [Ross, 1976] </ref>. Before we proceed with the definitions of probabilistic functions and their properties, we introduce a couple of notations and simplifying notational conventions. Definition 2.1 Let P be a probability distribution over a set B, and let Z be a random variable distributed according to P .
Reference: [Shamir, 1983] <author> A. Shamir. </author> <title> On the Generation of Cryptographically Strong Pseudorandom Sequences. </title> <journal> ACM Trans. on Comp. Syst., </journal> <volume> 1(1) </volume> <pages> 38-44, </pages> <year> 1983. </year>
Reference-contexts: In the following years, several other researchers further developed their ideas. Most importantly, the existence of pseudorandom number generators was related to the existence of one-way functions and zero-knowledge interactive CHAPTER 1. INTRODUCTION 6 proofs. Some of the most interesting results can be found in <ref> [Shamir, 1983] </ref>, [Goldreich et al., 1986], [Levin, 1987], [Goldreich et al., 1988], [Nisan and Wigderson, 1988], [Impagliazzo et al., 1989], [Kharitonov et al., 1989] and [Hastad, 1990]. 1.1.4 Zero Knowledge NP was defined as the class of languages that can be recognized in non-deterministic polynomial time.
Reference: [Shamir, 1990] <author> A. Shamir. IP=PSPACE. </author> <booktitle> In Proc. of 30th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference-contexts: It can be easily seen that the new class IP contains both NP and BPP, the class of languages recognized in probabilistic polynomial time with bounded error probability. It is believed to be strictly larger than both NP and BPP as it has been shown to be exactly PSPACE <ref> [Shamir, 1990] </ref>. A natural concern that arises when dealing with interactive proof systems is restricting the amount of knowledge released by the prover during his interaction with the verifier. In many cryptographic scenarios, it is desirable that the verifier learns nothing from this interaction.
Reference: [Shannon, 1948] <author> C. E. Shannon. </author> <title> A Mathematical Theory of Communication. </title> <journal> Bell System Technical Journal, </journal> <volume> 27 </volume> <pages> 379-423, 623-656, </pages> <month> July and October </month> <year> 1948. </year>
Reference-contexts: Shannon's paper provides a comprehensive theory of secrecy systems largely based on his information theory paper of the year before <ref> [Shannon, 1948] </ref>. We summarize the "general secrecy system" of [Shannon, 1949] in the block diagram of figure 1.1. . .
Reference: [Shannon, 1949] <author> C. E. Shannon. </author> <title> Communication Theory of Secrecy Systems. </title> <journal> Bell System Technical Journal, </journal> <volume> 28 </volume> <pages> 656-715, </pages> <month> October </month> <year> 1949. </year>
Reference-contexts: INTRODUCTION 2 Secret key cryptography became the subject of scientific research (in the open literature) for the first time in 1949 with the publication of Shannon's paper "Communication Theory of Secrecy Systems" <ref> [Shannon, 1949] </ref>. Shannon's paper provides a comprehensive theory of secrecy systems largely based on his information theory paper of the year before [Shannon, 1948]. We summarize the "general secrecy system" of [Shannon, 1949] in the block diagram of figure 1.1. . . <p> open literature) for the first time in 1949 with the publication of Shannon's paper "Communication Theory of Secrecy Systems" <ref> [Shannon, 1949] </ref>. Shannon's paper provides a comprehensive theory of secrecy systems largely based on his information theory paper of the year before [Shannon, 1948]. We summarize the "general secrecy system" of [Shannon, 1949] in the block diagram of figure 1.1. . .
Reference: [Shubik, 1982] <author> Martin Shubik. </author> <title> Game Theory in the social sciences. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1982. </year>
Reference-contexts: This recursive node-labeling process is widely known in game theory as backward induction <ref> [Shubik, 1982] </ref>. An example of a MaxTree of uniform depth k = 3 is given in Figure 3.1. In this work, we generally consider MaxTrees with exactly one leaf labeled 1 and all other leaves labeled 0.
Reference: [Simmons, 1992] <author> G. J. Simmons. </author> <booktitle> Contemporary Cryptology, the Science of Information Integrity. </booktitle> <publisher> IEEE Press, </publisher> <address> Piscataway, NJ, </address> <year> 1992. </year> <note> BIBLIOGRAPHY 132 </note>
Reference-contexts: It is randomization, in the form of secret random keys, that guarantees the security of Shannon's secret key cryptosystem. For a general introduction to contemporary cryptography, see <ref> [Simmons, 1992] </ref>. 1.1.2 Probabilistic Algorithms A probabilistic or randomized algorithm behaves like a standard deterministic algorithm with the extra ability of the algorithm to "flip unbiased coins" and incorporate their outcome into its computation.
Reference: [Solovay and Strassen, 1977] <author> R. Solovay and V. Strassen. </author> <title> A fast Monte-Carlo Test for Primality. </title> <journal> SIAM Journal of Computing, </journal> <volume> 6 </volume> <pages> 84-85, </pages> <year> 1977. </year>
Reference-contexts: One of the first and most famous examples of a seemingly intractable problem with elegant and efficient probabilistic solutions is primality testing. Probabilistic tests that recognize prime numbers in polynomial time with a small probability of error were presented in [Rabin, 1976], [Rabin, 1980], [Miller, 1976] and <ref> [Solovay and Strassen, 1977] </ref>. The primality test of Solovay and Strassen 2 is shown in figure 1.2.
Reference: [Yao, 1982] <author> A. C. Yao. </author> <title> Theory and Applications of Trapdoor Functions. </title> <booktitle> In Proc. of 23th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 80-91, </pages> <year> 1982. </year>
Reference-contexts: The notion of a pseudorandom number generator was introduced as a means for reducing randomness in polynomial-time computations [Blum and Micali, 1984], <ref> [Yao, 1982] </ref>. A pseudorandom number generator is a deterministic polynomial-time algorithm which expands short random inputs into longer sequences of unpredictable pseudorandom bits. Pseudorandom sequences and truly random sequences of the same length are "indistinguishable" by all families of polynomial-size circuits [Yao, 1982]. <p> reducing randomness in polynomial-time computations [Blum and Micali, 1984], <ref> [Yao, 1982] </ref>. A pseudorandom number generator is a deterministic polynomial-time algorithm which expands short random inputs into longer sequences of unpredictable pseudorandom bits. Pseudorandom sequences and truly random sequences of the same length are "indistinguishable" by all families of polynomial-size circuits [Yao, 1982]. This property allows us to substitute the output of a pseudorandom number generator for the unbiased coin flips of a polynomial-time algorithm without notably affecting the behavior of the algorithm.
References-found: 51

