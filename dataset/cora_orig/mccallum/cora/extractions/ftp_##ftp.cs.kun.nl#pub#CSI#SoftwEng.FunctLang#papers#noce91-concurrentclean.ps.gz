URL: ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/noce91-concurrentclean.ps.gz
Refering-URL: http://www.cs.kun.nl/~clean/Clean.Papers.html
Root-URL: 
Title: aaaaaaa Concurrent Clean  
Author: Eric Nocker, Sjaak Smetsers, Marko van Eekelen, Rinus Plasmeijer 
Affiliation: University of Nijmegen  
Abstract: Concurrent Clean is an experimental, lazy, higher-order parallel functional programming language based on term graph rewriting. An important difference with other languages is that in Clean graphs are manipulated and not terms. This can be used by the programmer to control communication and sharing of computation. Cyclic structures can be defined. Concurrent Clean furthermore allows to control the (parallel) order of evaluation to make efficient evaluation possible. With help of sequential annotations the default lazy evaluation can be locally changed into eager evaluation. The language enables the definition of partially strict data structures which make a whole new class of algorithms feasible in a functional language. A powerful and fast strictness analyser is incorporated in the system. The quality of the code generated by the Clean compiler has been greatly improved such that it is one of the best code generators for a lazy functional language. Two very powerful parallel annotations enable the programmer to define concurrent functional programs with arbitrary process topologies. Concurrent Clean is set up in such a way that the efficiency achieved for the sequential case can largely be maintained for a parallel implementation on loosely coupled parallel machine architectures.
Abstract-found: 1
Intro-found: 1
Reference: <author> Augustsson, L. and T. </author> <note> Johnsson (1989). The chalmers lazy-ml compiler, The Computer Journal </note> . 
Reference: <author> Barendregt, H.P., M.C.J.D. van Eekelen, J.R.W. Glauert, J.R. Kennaway, M.J. </author> <title> Plas-meijer and M.R. Sleep (1987a). Term graph reduction, </title> <booktitle> Proc. of Parallel Architectures and Languages Europe (PARLE), </booktitle> <address> Eindhoven, The Netherlands, </address> <publisher> Springer Verlag, LNCS 259 II, </publisher> <pages> pp. 141-158. </pages>
Reference: <author> Barendregt, H.P., M.C.J.D. van Eekelen, J.R.W. Glauert, J.R. Kennaway, M.J. </author> <title> Plas-meijer and M.R. Sleep (1987b). Towards an intermediate language based on graph rewriting, </title> <booktitle> Proc. of Parallel Architectures and Languages Europe (PARLE), </booktitle> <address> Eind-hoven, The Netherlands, </address> <publisher> Springer Verlag, LNCS 259 II, </publisher> <pages> pp. 159-175. </pages>
Reference: <author> Barendregt, H.P., M.C.J.D. van Eekelen, J.R.W. Glauert, J.R. Kennaway, M.J. </author> <title> Plas-meijer and M.R. Sleep (1988). Towards an intermediate language based on graph 22 rewriting, </title> <booktitle> selected papers of the conference on Parallel Architectures and Lan--guages Europe (PARLE). </booktitle>
Reference: <author> Barendregt, H.P., M.C.J.D. van Eekelen, M.J. Plasmeijer, P.H. Hartel, </author> <note> L.O. </note>
Reference: <author> Hertzberger and W.G. </author> <title> Vree (1987). The dutch parallel reduction machine project, </title> <booktitle> Proc. of Intern. Conf. on Frontiers in Computing, </booktitle> <address> Amsterdam, the Netherlands. </address>
Reference: <author> Barendsen, Erik and Sjaak Smetsers (1992). </author> <title> Graph rewriting and copying, </title> <institution> Technical Report 92-20 , University of Nijmegen. </institution>
Reference: <author> Brus, T., M.C.J.D. van Eekelen, M. van Leer, M.J. </author> <title> Plasmeijer and H.P. Barendregt (1987). Clean a language for functional graph rewriting, </title> <booktitle> Proc. of Conference on Functional Programming Languages and Computer Architecture (FPCA '87), </booktitle> <address> Portland, Oregon, USA, </address> <publisher> Springer Verlag, LNCS 274, </publisher> <pages> pp. 364-384. </pages>
Reference: <author> Burstall, R.M., D.B. MacQueen and D.T. </author> <month> Sanella </month> <year> (1980). </year> <title> Hope: An experimental applicative language, </title> <booktitle> Proc. of The 1980 LISP Conference, </booktitle> <pages> pp. 136-143. </pages>
Reference: <author> Eekelen, M.C.J.D. </author> <title> van (1988). Parallel Graph Rewriting, Some Contributions to its Theory, its Implementation and its Application, </title> <type> Dissertation, </type> <institution> University of Ni-jmegen. </institution>
Reference: <author> Eekelen, M.C.J.D. van and M.J. </author> <title> Plasmeijer (1990). </title> <booktitle> Concurrent functional programming, Proc. of Conference on Unix & Parallelism, </booktitle> <pages> pp. 75-98. </pages>
Reference: <author> Eekelen, M.C.J.D. van, E.G.J.M.H. Nocker, M.J. Plasmeijer and J.E.W. </author> <month> Smetsers </month> <year> (1990). </year> <note> Concurrent clean, version 0.6, Technical Report 90-21 , University of Ni-jmegen. </note>
Reference: <author> Eekelen, M.C.J.D. van, M.J. Plasmeijer and J.E.W. </author> <month> Smetsers </month> <year> (1991). </year> <title> Parallel graph rewriting on loosely coupled machine architectures, </title> <editor> in: Kaplan and Okada (eds.), </editor> <booktitle> Proc. of Conditional and Typed Rewriting Systems (CTRS'90), </booktitle> <address> Montreal, Canada, </address> <publisher> Springer Verlag, LNCS 516, </publisher> <pages> pp. 354-369. </pages>
Reference: <author> Glauert, J.R.W., J.R. </author> <title> Kennaway and M.R. Sleep (1987). Dactl: A computational model and compiler target language based on graph reduction, </title> <note> ICL Technical Journal </note> . 
Reference: <author> Groningen, J.H.G. </author> <title> van (1990). Implementing the abc-machine on m680x0 based architectures, </title> <type> Master's thesis, </type> <institution> University of Nijmegen. </institution>
Reference: <author> Johnsson, Th. </author> <year> (1987). </year> <title> Compiling Lazy Functional Programming Languages, </title> <type> Dissertation, </type> <institution> Chalmers University, Goteborg, Sweden. </institution>
Reference: <author> Kesseler, M. </author> <year> (1990). </year> <title> Concurrent clean on transputers. </title>
Reference: <author> Koopman, P.W.M. and E.G.J.M.H. </author> <month> Nocker </month> <year> (1988). </year> <title> Compiling functional languages to term graph rewriting systems, </title> <institution> Technical Report 88-1 , University of Nijmegen. </institution>
Reference: <author> Koopman, P.W.M., M.C.J.D. van Eekelen, E.G.J.M.H. Nocker, M.J. Plasmeijer and J.E.W. </author> <month> Smetsers </month> <year> (1990). </year> <title> The abc-machine: A sequential stack-based abstract machine for graph rewriting, </title> <institution> Technical Report 90-22 , University of Nijmegen, The Netherlands. </institution> <note> 23 McBurney, </note> <editor> D. and R. </editor> <booktitle> Sleep (1990). Concurrent clean on zapp, Proc. of Second Inter--national Workshop on Implementation of Functional Languages on Parallel Architectures, </booktitle> <institution> University of Nijmegen, the Netherlands, </institution> <type> Technical Report 90-16. </type>
Reference: <author> Milner, R.A. </author> <year> (1978). </year> <title> Theory of type polymorphism in programming, </title> <journal> Journal of Computer and System Sciences. </journal>
Reference: <author> Mycroft, A. </author> <year> (1984). </year> <title> Polymorphic type schemes and recursive definitions, </title> <booktitle> Proc. of 6th Int. Conf. on Programming, </booktitle> <address> Eindhoven, The Netherlands, </address> <publisher> Springer Verlag, LNCS 167, </publisher> <pages> pp. 217-239. </pages>
Reference: <author> Nocker, E.G.J.M.H. </author> <year> (1989). </year> <title> The pabc simulator, v0.5. implementation manual, </title> <institution> Technical Report 89-19 , University of Nijmegen. </institution>
Reference: <author> Nocker, E.G.J.M.H. </author> <year> (1990). </year> <title> Strictness analysis based on abstract reduction, </title> <booktitle> Proc. of Second International Workshop on Implementation of Functional Languages on Parallel Architectures, </booktitle> <institution> University of Nijmegen, the Netherlands, </institution> <type> Technical Report 90-16, </type> <pages> pp. 297-321. </pages>
Reference: <author> Nocker, E.G.J.M.H. and J.E.W. </author> <month> Smetsers </month> <year> (1990). </year> <title> Partially strict data types, </title> <booktitle> Proc. of Second International Workshop on Implementation of Functional Languages on Parallel Architectures, </booktitle> <institution> University of Nijmegen, the Netherlands, </institution> <type> Technical Report 90-16, </type> <pages> pp. 237-255. </pages>
Reference: <editor> Peyton Jones, S.L. and J. </editor> <booktitle> Salkild (1989). The spineless tagless g-machine, Proc. of Conference on Functional Programming Languages and Computer Architecture (FPCA'89), </booktitle> <address> London, UK, </address> <publisher> Addison Wesley, </publisher> <pages> pp. 184-201. </pages>
Reference: <author> Smetsers, J.E.W. </author> <year> (1989). </year> <title> Compiling clean to abstract abc-machine code, </title> <institution> Technical Report 89-20 , University of Nijmegen. </institution> <month> 24 </month>
References-found: 26

