URL: http://www.cs.twsu.edu/~haynes/tr_duplicate.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: haynes@euler.mcs.utulsa.edu  
Title: Duplication of Coding Segments in Genetic Programming  
Author: Thomas Haynes 
Address: 600 South College Avenue Tulsa, OK 74104-3189  
Affiliation: Department of Mathematical Computer Sciences The University of Tulsa  
Abstract: Research into the utility of non-coding segments, or introns, in genetic-based encodings has shown that they expedite the evolution of solutions in domains by protecting building blocks against destructive crossover. We consider a genetic programming system where non-coding segments can be removed, and the resultant chromosomes returned into the population. This parsimonious repair leads to premature convergence, since as we remove the naturally occurring non-coding segments, we strip away their protective backup feature. We then duplicate the coding segments in the repaired chromosomes, and place the modified chromosomes into the population. The duplication method significantly improves the learning rate in the domain we have considered. We also show that this method can be applied to other domains.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bruce Alberts, Dennis Bray, Julian Lewis, Martin Raff, Keith Roberts, and James D. Watson. </author> <title> Molecular Biology of the Cell. </title> <publisher> Garland Publishing, Inc., </publisher> <year> 1989. </year>
Reference-contexts: Section 4 reveals how the clique detector facilitates our research into non-coding segments. Section 5 presents our experimental results. Section 6 ties everything together. Section 7 shows how this work can be extended. 2 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature <ref> [1, 8, 11] </ref> and are the intron segments seen in genetic-based encoding literature [24, 35]. The non-coding sequences account for a large fraction of the DNA [11, 35]. It is hypothesized that these segments are backup material for the coding segments. <p> During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule. As the gene can be spliced in a variety of ways, the non-coding sequence for one mRNA could be a coding sequence for another <ref> [1] </ref>. <p> Indeed each candidate clique can be thought of as a building block from which "better" chromosomes can be constructed. This method of paring down the chromosome is similar to the RNA splicing, mentioned earlier, in that non-coding segments are stripped out of the RNA transcript from DNA <ref> [1] </ref>. In GA research, if there are invalid bits in a chromosome and some algorithm exists to translate those bits into valid bits, then they can be repaired and the resultant chromosome evaluated to determine the fitness of the original chromosome.
Reference: [2] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> He also suggests that parsimony may be of interest not only because of aesthetic considerations, but because of a natural bound on the "appropriate size" of a solution tree for a given problem. Altenberg <ref> [2] </ref> has a different stance on why duplications appear inside GP chromosomes: there are two selection forces which add blocks of code to the population.
Reference: [3] <author> P. J. Angeline and J. B. Pollack. </author> <title> Coevolving high-level representations. </title> <editor> In C. G. Langton, editor, </editor> <booktitle> Artificial Life III, SFI Studies in the Sciences of Complexity, </booktitle> <volume> volume XVII. </volume> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [4] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The genetic operators spread a block to different chromosomes, and an emergent selection pressure, which he calls "constructional selection" causes the formation of duplication within a chromosome. The duplication is a result of the fitness of the block being replicated. Angeline <ref> [4] </ref> reports that while there is redundancy in chromosomes, the benefit of these semantically extraneous components is in the prevention of destructive crossover. He also highlights a difference between GAs and GPs with regards to non-coding segments: in GAs, they are added by design, whereas in GPs they evolve naturally. <p> The tree could be pruned, leaving only the middle subtree. The IFTE 7 function can be used to add a duplicate of the coding segment. This is shown in Figure 11 (b). The utility of the IFTE function in creating duplication is discussed in Angeline <ref> [4] </ref>. subtree of the IFTE node is non-coding. (b) A duplicate of the coding segment from (a) has been created. Note that whether the first argument evaluates to either True or False is immaterial. 7 Future Work This research can be extended in several fronts.
Reference: [5] <author> Tobias Blickle and Lothar Thiele. </author> <title> Genetic programming and redundancy. </title> <editor> In J. Hopf, editor, </editor> <booktitle> Genetic Algorithms within the Framework of Evolutionary Computation (Workshop at KI-94, Saarbrucken), </booktitle> <pages> pages 33-38. </pages> <institution> Max-Planck-Institut fur Informatik (MPI-I-94-241), </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains.
Reference: [6] <author> Thang Nguyen Bui and Paul H. Eppley. </author> <title> A hybrid genetic algorithm for the maximum clique problem. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 478-484, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: Figure 2 is a 10 node graph, with cliques: C = f f0; 3; 4g; f0; 1; 4g; f1; 4; 5g; f1; 2; 5g; f2; 5; 6g; Finding the maximum clique of a graph has been addressed within the genetic algorithm community <ref> [6, 7, 22] </ref>. The problem of finding the set of all cliques has not been addressed within the GA community.
Reference: [7] <author> R. Chandraasekharam, S. Subhramanian, and S. Chaudhury. </author> <title> Genetic algorithm for node partioning problem and applications in VLSI design. </title> <booktitle> IEE Proceedings, Part E: Computers and Digital Techniques, </booktitle> <volume> 140(5) </volume> <pages> 255-260, </pages> <month> Sep </month> <year> 1993. </year>
Reference-contexts: Figure 2 is a 10 node graph, with cliques: C = f f0; 3; 4g; f0; 1; 4g; f1; 4; 5g; f1; 2; 5g; f2; 5; 6g; Finding the maximum clique of a graph has been addressed within the genetic algorithm community <ref> [6, 7, 22] </ref>. The problem of finding the set of all cliques has not been addressed within the GA community.
Reference: [8] <author> James Darnell, Harvey Lodish, and David Baltimore. </author> <title> Molecular Cell Biology. </title> <publisher> Scientific American Books, </publisher> <year> 1990. </year> <month> 15 </month>
Reference-contexts: Section 4 reveals how the clique detector facilitates our research into non-coding segments. Section 5 presents our experimental results. Section 6 ties everything together. Section 7 shows how this work can be extended. 2 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature <ref> [1, 8, 11] </ref> and are the intron segments seen in genetic-based encoding literature [24, 35]. The non-coding sequences account for a large fraction of the DNA [11, 35]. It is hypothesized that these segments are backup material for the coding segments. <p> It was our conjecture that the genotypes of chromosomes which succinctly capture the phenotype of the chromosome were more elegant and natural. It should be noted that non-coding segments can be inserted and deleted by evolution in DNA <ref> [8] </ref>. For all our experiments, we utilize a population size of 2000, and each run consists of 600 generations. The graph, for which cliques are detected, is the 10 node graph shown in Figure 2.
Reference: [9] <author> Lawrence Davis, David Orvosh, Anthony Cox, and Yuping Qiu. </author> <title> A genetic algorithm for survivable network design. </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pages 408-415, </pages> <address> Champaign, IL, 1993. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: Some issues are whether or not to return the repaired chromosome into the population and at what rate of return <ref> [9, 28] </ref>. The repair operation is done at chromosome evaluation, not during the reproduction stage; there is no assurance that the repaired chromosome will even be selected for reproduction. The evaluation function transforms chromosomes from GP space to clique set space, i.e. genotype to phenotype.
Reference: [10] <editor> Stephanie Forrest and Melanie Mitchell. </editor> <title> Relative building block fitness and the building block hypothesis. </title> <editor> In D. Whitley, editor, </editor> <booktitle> Foundations of Genetic Algorithms 2, </booktitle> <pages> pages 109-126. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> It is shown in [19] that adding non-coding segments to chromosomes, to separate building blocks, protects those building blocks from being sliced by crossover. Wu et. al. [36, 37] have applied Levenick's work on the Royal Road functions <ref> [10] </ref>, which are designed as testbeds for studying building blocks. In GA research, chromosomes are typically represented as fixed length bit strings.
Reference: [11] <author> Douglas J. Futuyma. </author> <title> Evolutionary Biology. </title> <publisher> Sinauer Associate, </publisher> <address> Sunderland, MA, </address> <year> 1986. </year>
Reference-contexts: Section 4 reveals how the clique detector facilitates our research into non-coding segments. Section 5 presents our experimental results. Section 6 ties everything together. Section 7 shows how this work can be extended. 2 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature <ref> [1, 8, 11] </ref> and are the intron segments seen in genetic-based encoding literature [24, 35]. The non-coding sequences account for a large fraction of the DNA [11, 35]. It is hypothesized that these segments are backup material for the coding segments. <p> Section 7 shows how this work can be extended. 2 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature [1, 8, 11] and are the intron segments seen in genetic-based encoding literature [24, 35]. The non-coding sequences account for a large fraction of the DNA <ref> [11, 35] </ref>. It is hypothesized that these segments are backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA and 24,000 copies of the gene for 5S rRNA [11]. <p> It is hypothesized that these segments are backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA and 24,000 copies of the gene for 5S rRNA <ref> [11] </ref>. Another conjecture is that the non-coding sequences can act as a library for adaptation. During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule. <p> Thus the non-coding segment material is meaningless, and in particular, selection pressure does not drive it to be backup material. 2 From our understanding of the biological interactions of transcription of DNA to mRNA <ref> [11] </ref>, natural selection has determined that certain regions are triggered to be transcription points based on the appearance of certain sequences of nucleotides. 3 Wu and Lindsay [36] also point out that there is a drawback to inserting non-coding segments: they retard the growth of building blocks.
Reference: [12] <author> David Goldberg, Kalyanmoy Deb, and Bradley Korb. </author> <title> Messy genetic algorithms: Moti-ation, analysis, and first results. </title> <journal> Complex Systems, </journal> <volume> 3 </volume> <pages> 493-530, </pages> <year> 1989. </year>
Reference-contexts: The variable length nature of the GP chromosome combined with the position independence imparted by the fitness function provides us with an approximation of a messy GA <ref> [12, 13] </ref>. We have seen that the duplication of three or more copies of the coding segments significantly speeds up the learning process for the clique detection problem.
Reference: [13] <author> David Goldberg, Kalyanmoy Deb, and Bradley Korb. </author> <title> Messy genetic algorithms revisited: Studies in mixed size and scale. </title> <journal> Complex Systems, </journal> <volume> 4 </volume> <pages> 415-444, </pages> <year> 1990. </year>
Reference-contexts: The variable length nature of the GP chromosome combined with the position independence imparted by the fitness function provides us with an approximation of a messy GA <ref> [12, 13] </ref>. We have seen that the duplication of three or more copies of the coding segments significantly speeds up the learning process for the clique detection problem.
Reference: [14] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: Building blocks have a small defining length and are highly fit. They are integral to the schema theorem, which defines how the implicit parallel search of a genetic algorithm "builds" better solutions over time. The interested reader is referred to Goldberg <ref> [14] </ref> for an introduction to the basics of GA theory. It is shown in [19] that adding non-coding segments to chromosomes, to separate building blocks, protects those building blocks from being sliced by crossover. <p> In GA research, chromosomes are typically represented as fixed length bit strings. With a string of length l, and a building block of defining length ffi, any 2 crossover operation has a probability, P l = l 1 of destroying a building block <ref> [14] </ref>.
Reference: [15] <author> Thomas Haynes. </author> <title> Clique detection via genetic programming. </title> <type> Technical Report UTULSA-MCS-95-02, </type> <institution> The University of Tulsa, </institution> <month> April 24, </month> <year> 1995. </year>
Reference-contexts: This is due in part to the fact that a variable length structure is needed to find all the cliques, while a fixed length chromosome can be used to find the maximum clique. Our preliminary research on the clique detection problem is found in <ref> [15] </ref>. A variable length chromosome is necessary because in general there will be an unknown number of cliques per graph. Potential cliques are denoted as candidate cliques, which need to be evaluated to determine if they actually form a clique. The chromosome will then be a collection of candidate cliques.
Reference: [16] <author> Thomas Haynes, Dale Schoenefeld, and Roger Wainwright. </author> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr. and Peter J. Angeline, editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: 2; 4g; f1; 3; 4g; f2; 3; 4gg: The genetic search should favor C 4 over C 3 , and the proper choice of fi will allow this. 6 3.2 Role of Strong Typing We utilize a strongly typed genetic programming (STGP) [21] system to investigate research into clique detection <ref> [16] </ref>. We use a STGP system instead of a canonical GP system to force type inheritance. <p> This constraint forces all functions to return values that can be used as arguments for any other function. STGP allows for an additional level of typing to be added. We have extended STGP by adding type inheritance to allow for more than two levels of typing <ref> [16] </ref>. In the context of the clique detection domain, they are in essence forcing the chromosome to evolve "lists" of nodes. 4 Approach An interesting observation is that the fitness function for the clique detector pares the chromosome down to the coding segments.
Reference: [17] <author> Kenneth Kalmanson. </author> <title> An Introduction to Discrete Mathematics and its Applications. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: The goal is to find all cliques of G. Since the subgraph of G induced by any subset of the vertices of a complete subgraph of G is also complete, it is sufficient to find all maximal complete subgraphs of G <ref> [17] </ref>. A maximal complete subgraph of G is referred to as a maximal clique.
Reference: [18] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: The canonical GP chromosome representation is a parse tree, and is quite often called a S-expression. The interested reader is referred to Koza <ref> [18] </ref> for an introduction to the basics of GP theory. The differences between GA and GP are more than the fixed versus variable genotype representation. In GA, due to the fixed length of chromosomes, there is a close relationship between the genotype and phenotype structure of a chromosome 3 . <p> The duplication of subtrees has been mentioned in passing within the GP literature (see Section 2.2) and discussed informally within the GP 13 mailing list. Some analysis will show that this method can work for any GP domain. Simple editing rules for GP chromosomes have been identified <ref> [18] </ref>. The methods used by compiler writers to optimize code are also applicable to "optimizing" the GP chromosome, which is after all a parse tree in canonical form. An example of the repair and duplication process for other domains is shown in Figure 11.
Reference: [19] <author> James R. Levenick. </author> <title> Inserting introns improves genetic algorithm success rate: Taking a clue from biology. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 123-127. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> They are integral to the schema theorem, which defines how the implicit parallel search of a genetic algorithm "builds" better solutions over time. The interested reader is referred to Goldberg [14] for an introduction to the basics of GA theory. It is shown in <ref> [19] </ref> that adding non-coding segments to chromosomes, to separate building blocks, protects those building blocks from being sliced by crossover. Wu et. al. [36, 37] have applied Levenick's work on the Royal Road functions [10], which are designed as testbeds for studying building blocks.
Reference: [20] <author> Nicholas Freitag McPhee and Justin Darwin Miller. </author> <title> Accurate replication in genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 303-309. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> Another such function could generate two children: one by straight selection, and the other by the repair process. We are planning to investigate this extension in a propositional inference domain. Our preliminary research shows that linear non-coding segments, similar to those reported by McPhee and Miller <ref> [20] </ref> naturally appear in this domain. Furthermore, building blocks are not as easy to identify in this domain as in the clique detection, and the optimal solution should have no duplicates of the coding segment.
Reference: [21] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year>
Reference-contexts: three: C 3 = ff1; 2; 3g; f1; 2; 4g; f1; 3; 4g; f2; 3; 4gg: The genetic search should favor C 4 over C 3 , and the proper choice of fi will allow this. 6 3.2 Role of Strong Typing We utilize a strongly typed genetic programming (STGP) <ref> [21] </ref> system to investigate research into clique detection [16]. We use a STGP system instead of a canonical GP system to force type inheritance.
Reference: [22] <author> Ammanamanchi Srinivasa Murthy, Guturu Parthasarthy, and V. U. K. Sastry. </author> <title> Clique finding a genetic approach. </title> <booktitle> In Proceedings of the First IEEE Conference on Evolutionary Computation, </booktitle> <pages> pages 18-21, </pages> <address> Piscataway, NJ, 1995. </address> <publisher> IEEE. </publisher>
Reference-contexts: While their chromosome representation is nonstandard, they report some promising preliminary results with the more traditional representation. 3 Clique Detection Given a graph G = (V; E), a subgraph G0 of G is a clique if <ref> [22] </ref> G0 = (V 0; E0) where V 0 V; E0 E; and Less formally, a clique of G is a complete subgraph of G. A clique is denoted by the set of vertices in the complete subgraph. The goal is to find all cliques of G. <p> Figure 2 is a 10 node graph, with cliques: C = f f0; 3; 4g; f0; 1; 4g; f1; 4; 5g; f1; 2; 5g; f2; 5; 6g; Finding the maximum clique of a graph has been addressed within the genetic algorithm community <ref> [6, 7, 22] </ref>. The problem of finding the set of all cliques has not been addressed within the GA community.
Reference: [23] <author> Peter Nordin. </author> <title> A compiling genetic programming system that directly manipulates the machine code. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year> <month> 16 </month>
Reference-contexts: Nordin et. al. [24, 25, 26] investigate the dynamics of non-coding segments in GP evolution. Unlike the typical tree representation, Nordin et. al. utilize chromosomes comprised of linear genomes which are 32 bit strings and represent binary code for a SUN-4 <ref> [23] </ref>. Non-coding bits are defined to be those that when replaced by a NOP instruction, i.e. perform no operation, do not change the semantics or phenotype of the chromosome.
Reference: [24] <author> Peter Nordin. </author> <title> Explictly defined introns and destructive crossover in genetic program-ming. </title> <editor> In P. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> Section 5 presents our experimental results. Section 6 ties everything together. Section 7 shows how this work can be extended. 2 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature [1, 8, 11] and are the intron segments seen in genetic-based encoding literature <ref> [24, 35] </ref>. The non-coding sequences account for a large fraction of the DNA [11, 35]. It is hypothesized that these segments are backup material for the coding segments. <p> He also highlights a difference between GAs and GPs with regards to non-coding segments: in GAs, they are added by design, whereas in GPs they evolve naturally. Nordin et. al. <ref> [24, 25, 26] </ref> investigate the dynamics of non-coding segments in GP evolution. Unlike the typical tree representation, Nordin et. al. utilize chromosomes comprised of linear genomes which are 32 bit strings and represent binary code for a SUN-4 [23].
Reference: [25] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 310-317, </pages> <address> San Francisco, CA., USA, July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> He also highlights a difference between GAs and GPs with regards to non-coding segments: in GAs, they are added by design, whereas in GPs they evolve naturally. Nordin et. al. <ref> [24, 25, 26] </ref> investigate the dynamics of non-coding segments in GP evolution. Unlike the typical tree representation, Nordin et. al. utilize chromosomes comprised of linear genomes which are 32 bit strings and represent binary code for a SUN-4 [23].
Reference: [26] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceeedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 6-22, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> He also highlights a difference between GAs and GPs with regards to non-coding segments: in GAs, they are added by design, whereas in GPs they evolve naturally. Nordin et. al. <ref> [24, 25, 26] </ref> investigate the dynamics of non-coding segments in GP evolution. Unlike the typical tree representation, Nordin et. al. utilize chromosomes comprised of linear genomes which are 32 bit strings and represent binary code for a SUN-4 [23].
Reference: [27] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carelton University, Ottawa-Carleton Institute for Computer Science, </institution> <address> Ottawa, Ontario, Canada, </address> <month> 22 September </month> <year> 1995. </year>
Reference-contexts: This duplication is found in GP chromosomes, and is conjectured to be the building blocks for GP [32]. Multiple appearances of these building blocks increase the probability that the building block will survive reproduction. A difficulty in GP research is in identifying the building blocks for a domain <ref> [27, 29] </ref>. We have implemented a domain in which all building blocks can easily 1 Non-coding segments are computational models of intragenic regions or introns. 1 be enumerated. This capability allows us to investigate the effects of duplication of building blocks within chromosomes. <p> Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [27, 29, 30, 33] </ref>. The canonical GP chromosome representation is a parse tree, and is quite often called a S-expression. The interested reader is referred to Koza [18] for an introduction to the basics of GP theory.
Reference: [28] <author> David Orvosh and Lawrence Davis. </author> <title> Shall we repair? Genetic algorithms, combinatorial optimization, and feasibilty constraints. </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> page 650. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1993. </year>
Reference-contexts: Some issues are whether or not to return the repaired chromosome into the population and at what rate of return <ref> [9, 28] </ref>. The repair operation is done at chromosome evaluation, not during the reproduction stage; there is no assurance that the repaired chromosome will even be selected for reproduction. The evaluation function transforms chromosomes from GP space to clique set space, i.e. genotype to phenotype. <p> Or perhaps the repair process is actually damaging the chromosome instead of fixing it up. Exactly what is it that the repair process is doing? It is removing "dead" or non-coding 4 We know from Orvosh and Davis <ref> [28] </ref> that small repair rates are desirable. 9 bits from the chromosome, i.e. those bits which do not contribute, either positively or negatively, to the calculation of the fitness of the chromosome. Whereas in GA research, the repair process does not remove any bits. <p> This contradicts the findings reported by Orvosh and Davis <ref> [28] </ref>. 6 Conclusions We are in effect utilizing the tree structure of GP chromosomes to conduct experimentation into variable length GA chromosomes. Our function and terminal sets, presented in Section 3.1, are not programming structures, but rather connectors for data structures.
Reference: [29] <author> Justinian Rosca. </author> <title> Towards automatic discovery of building blocks in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 78-85, </pages> <address> Menlo Park, CA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: This duplication is found in GP chromosomes, and is conjectured to be the building blocks for GP [32]. Multiple appearances of these building blocks increase the probability that the building block will survive reproduction. A difficulty in GP research is in identifying the building blocks for a domain <ref> [27, 29] </ref>. We have implemented a domain in which all building blocks can easily 1 Non-coding segments are computational models of intragenic regions or introns. 1 be enumerated. This capability allows us to investigate the effects of duplication of building blocks within chromosomes. <p> Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [27, 29, 30, 33] </ref>. The canonical GP chromosome representation is a parse tree, and is quite often called a S-expression. The interested reader is referred to Koza [18] for an introduction to the basics of GP theory. <p> Another research thread is to investigate the utility of duplicated chromosomes as a library for evolution as discussed in Section 2. Some preliminary work in utilizing already evolved code can be found in Seront [31]. Rosca <ref> [29, 30] </ref> also utilizes evolved code in the form of 7 IFTE is short for IfThenElse, i.e. if the first argument is True, then evaluate the second argument, else evaluate the third argument. 14 evolved subroutines in his adaptive representation through learning (ARL) mechanism, which allows him to automatically detect building
Reference: [30] <author> Justinian Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In P. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [27, 29, 30, 33] </ref>. The canonical GP chromosome representation is a parse tree, and is quite often called a S-expression. The interested reader is referred to Koza [18] for an introduction to the basics of GP theory. <p> Another research thread is to investigate the utility of duplicated chromosomes as a library for evolution as discussed in Section 2. Some preliminary work in utilizing already evolved code can be found in Seront [31]. Rosca <ref> [29, 30] </ref> also utilizes evolved code in the form of 7 IFTE is short for IfThenElse, i.e. if the first argument is True, then evaluate the second argument, else evaluate the third argument. 14 evolved subroutines in his adaptive representation through learning (ARL) mechanism, which allows him to automatically detect building
Reference: [31] <author> Gregory Seront. </author> <title> External concepts reuse in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 94-98, </pages> <address> Menlo Park, CA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Another research thread is to investigate the utility of duplicated chromosomes as a library for evolution as discussed in Section 2. Some preliminary work in utilizing already evolved code can be found in Seront <ref> [31] </ref>.
Reference: [32] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <booktitle> In Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: We investigate the effect of duplication of coding segments in the chromosome on the evolutionary process. This duplication is found in GP chromosomes, and is conjectured to be the building blocks for GP <ref> [32] </ref>. Multiple appearances of these building blocks increase the probability that the building block will survive reproduction. A difficulty in GP research is in identifying the building blocks for a domain [27, 29]. <p> With the GP, building blocks are at the phenotype or semantical level. As such, they are difficult to represent, detect, and capture. Also, there can be a duplication of building blocks in a GP chromosome, whereas there may not be any such duplication in a GA chromosome. Tackett <ref> [32] </ref> compares the difficulty in researching building blocks between GP and GA: different notations of schemata and a non-binary alphabet. His conjecture is that "small" subtrees which appear frequently in S-expressions are GP's building blocks.
Reference: [33] <author> Walter Alden Tackett. </author> <title> Mining the genetic program. </title> <journal> IEEE Expert, </journal> <volume> 10(3) </volume> <pages> 28-38, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [27, 29, 30, 33] </ref>. The canonical GP chromosome representation is a parse tree, and is quite often called a S-expression. The interested reader is referred to Koza [18] for an introduction to the basics of GP theory.
Reference: [34] <author> Annie S. Wu. </author> <title> http://netq.rowland.org/wu/p.html. (NetQ is a question/answer forum for authors of Evolutionary Computation papers), </title> <year> 1995. </year>
Reference-contexts: It should be noted that while adding the non-coding segment at the tail of the chromosome decreases the probability of destructive crossover, it does not aid the recombination of building blocks as much as placing the non-coding segments between the building blocks <ref> [34] </ref>. to prevent destructive crossover. (a) Without the non-coding segment. (b) With the non-coding segment. Note that multiple segments could be added anywhere but between the start and end of any building block.
Reference: [35] <author> Annie S. Wu. </author> <title> Non-coding segments and floating building blocks for the genetic algorithm. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> Section 5 presents our experimental results. Section 6 ties everything together. Section 7 shows how this work can be extended. 2 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature [1, 8, 11] and are the intron segments seen in genetic-based encoding literature <ref> [24, 35] </ref>. The non-coding sequences account for a large fraction of the DNA [11, 35]. It is hypothesized that these segments are backup material for the coding segments. <p> Section 7 shows how this work can be extended. 2 Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature [1, 8, 11] and are the intron segments seen in genetic-based encoding literature [24, 35]. The non-coding sequences account for a large fraction of the DNA <ref> [11, 35] </ref>. It is hypothesized that these segments are backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA and 24,000 copies of the gene for 5S rRNA [11]. <p> A final thread is how to incorporate explicit duplication of building blocks into GA chromosomes. Wu <ref> [35] </ref> has investigated floating building blocks inside GA chromosomes, and has reported the duplication of building blocks inside the chromosome. Acknowledgements I want to thank Cory Hoelting for some discussions on this research.
Reference: [36] <author> Annie S. Wu and Robert K. Lindsay. </author> <title> Empirical studies of the genetic algorithm with non-coding segments. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2), </volume> <year> 1995. </year> <month> 17 </month>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> The interested reader is referred to Goldberg [14] for an introduction to the basics of GA theory. It is shown in [19] that adding non-coding segments to chromosomes, to separate building blocks, protects those building blocks from being sliced by crossover. Wu et. al. <ref> [36, 37] </ref> have applied Levenick's work on the Royal Road functions [10], which are designed as testbeds for studying building blocks. In GA research, chromosomes are typically represented as fixed length bit strings. <p> pressure does not drive it to be backup material. 2 From our understanding of the biological interactions of transcription of DNA to mRNA [11], natural selection has determined that certain regions are triggered to be transcription points based on the appearance of certain sequences of nucleotides. 3 Wu and Lindsay <ref> [36] </ref> also point out that there is a drawback to inserting non-coding segments: they retard the growth of building blocks. A little thought will show that it will be hard for evolution to recombine the building blocks if non-coding segments are there to prevent destructive crossover.
Reference: [37] <author> Annie S. Wu, Robert K. Lindsay, and Michael D. Smith. </author> <title> Studies on the effect of non--coding segments on the genetic algorithm. </title> <booktitle> In Proceedings of the 6th IEEE International Conference on Tools with Artificial Intelligence, </booktitle> <address> New Orleans, LA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Researchers in both genetic algorithms (GA) and genetic programming (GP) have recently begun to examine the utility of non-coding segments 1 in chromosomes <ref> [2, 5, 10, 19, 20, 24, 25, 26, 35, 36, 37] </ref>. The research into the utility of non-coding segments in genetic-based encodings has shown that they facilitate the evolution of solutions in domains. <p> The interested reader is referred to Goldberg [14] for an introduction to the basics of GA theory. It is shown in [19] that adding non-coding segments to chromosomes, to separate building blocks, protects those building blocks from being sliced by crossover. Wu et. al. <ref> [36, 37] </ref> have applied Levenick's work on the Royal Road functions [10], which are designed as testbeds for studying building blocks. In GA research, chromosomes are typically represented as fixed length bit strings.
Reference: [38] <author> Byoung-Tak Zhang and Heinz Muehlenbein. </author> <title> Balancing accuracy and parsimony in genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(1) </volume> <pages> 17-38, </pages> <year> 1995. </year> <month> 18 </month>
References-found: 38

