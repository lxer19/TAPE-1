URL: http://www-formal.stanford.edu/jsierra/heuristics-ac.ps
Refering-URL: 
Root-URL: 
Email: E-mail: jsierra@cs.stanford.edu  
Phone: Phone: (650) 7234910  
Title: Declarative Formalization of Strategies for Action Selection  
Author: Josefina Sierra-Santiba~nez 
Address: Stanford, CA 94305  
Affiliation: Computer Science Department Stanford University  
Abstract: We propose a representation scheme for the declarative formalization of strategies based on the situation calculus and circumscription. The formalism is applied to represent a number of heuristics for moving blocks in order to solve planning problems in the blocks world. It is demonstrated that circumscription solves the problem of projecting the strategies formalized in the paper, and that it allows us to derive useful conclusions about their computability, correctness, redundancy, inconsistency, and the quality of their solutions. Finally, an advice taking scenario is presented to illustrate how a program capable of reasoning non-monotonically about declarative formalizations of strategies can have interesting reflective behavior. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Davis, E. </author> <year> 1990. </year> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kaufmann Publishers, Inc. </publisher> <address> San Mateo, California. </address>
Reference-contexts: But these formulas are strong enough for deriving both positive and negative ground instances of Holds (Above (x,y),s) and Holds (Final (x,S g ),s) from the positive and negative ground instances of Holds (On (x,y),s) that can be derived from axioms 7 to 17. <ref> (Davis 1990) </ref> points out that it is possible to define on in terms of beneath (beneath (y; x) above (x; y)), but it is not possible to fully define beneath in terms of on in a first order theory.
Reference: <author> Fikes, R., and Nilsson, N. </author> <year> 1971. </year> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <booktitle> Artificial Intelligence 2 </booktitle> <pages> 189-208. </pages>
Reference-contexts: In (McCarthy 1985), John McCarthy proposes a very simple formalization of STRIPS <ref> (Fikes & Nils-son 1971) </ref> in the situation calculus. The formalization is as follows. STRIPS is a planning system that uses a database of logical formulas to represent information about a state. Each action has a precondition, an add list, and a delete list.
Reference: <author> Genesereth, M. R., and Hsu, J. </author> <year> 1989. </year> <title> Partial programs. </title> <type> Technical Report Logic Group 89-20, </type> <institution> Department of Computer Science, Stanford University. </institution>
Reference-contexts: This paper proposes a representation scheme for the declarative formalization of strategies for action selection based on the situation calculus (McCarthy & Hayes 1969) and circumscription (McCarthy 1980) (Mc-Carthy 1986). The idea of representing strategies as sets of action selection rules <ref> (Genesereth & Hsu 1989) </ref> is explored.
Reference: <author> Gupta, N., and Nau, D. </author> <year> 1991. </year> <title> Complexity results for blocks-world planning. </title> <booktitle> In Proceedings of AAAI-91. </booktitle>
Reference-contexts: The strategies formalized in the paper describe different algorithms for solving planning problems in the elementary blocks world domain <ref> (Gupta & Nau 1991) </ref>. First, we summarize a very elegant and simple formalization of STRIPS in the situation calculus, and its application to reasoning about action in the blocks world, described in (Mc-Carthy 1985).
Reference: <author> Harel, D. </author> <year> 1984. </year> <title> Dynamic logic. In Handbook of Philosophical Logic, volume II: Extensions of Classical Logic, </title> <editor> D. Gabbay and F. Guenthner, Ed., </editor> <address> 497-604. Dordrecht, the Netherlands: </address> <publisher> Reidel Publishing Company. </publisher>
Reference-contexts: Introduction Strategic knowledge has traditionally been specified using procedural programming languages or dynamic logic <ref> (Harel 1984) </ref> (Harmelen & Balder 1992). This paper proposes a representation scheme for the declarative formalization of strategies for action selection based on the situation calculus (McCarthy & Hayes 1969) and circumscription (McCarthy 1980) (Mc-Carthy 1986).
Reference: <author> Harmelen, F., and Balder, J. </author> <year> 1992. </year> <title> (ML) 2 : a formal language for KADS models of expertise. </title> <journal> Knowledge Acquisition 4(1) </journal> <pages> 127-161. </pages> <note> Special issue: The KADS approach to knowledge engineering. </note>
Reference-contexts: Introduction Strategic knowledge has traditionally been specified using procedural programming languages or dynamic logic (Harel 1984) <ref> (Harmelen & Balder 1992) </ref>. This paper proposes a representation scheme for the declarative formalization of strategies for action selection based on the situation calculus (McCarthy & Hayes 1969) and circumscription (McCarthy 1980) (Mc-Carthy 1986).
Reference: <author> Lifschitz, V. </author> <year> 1990. </year> <title> Frames in the space of situations. </title> <booktitle> Artificial Intelligence 46 </booktitle> <pages> 365-376. </pages>
Reference-contexts: The databases in the formalization of the blocks world presented above contain only propositional flu-ents of the form On (x; y) for x, y 2 fA,B,C,D,E,F,Tg. These propositional fluents are called frame fluents (McCarthy & Hayes 1969) <ref> (Lifschitz 1990) </ref>, since any configuration of the blocks A,B,C,D,E, and F can be described by combinations of their values 9 .
Reference: <author> Lifschitz, V. </author> <year> 1993. </year> <title> Circumscription. </title> <booktitle> In Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <editor> D. Gabbay and C.J. Hogger, Ed., </editor> <volume> volume 3: </volume> <booktitle> Non-monotonic Reasoning and Uncertain Reasoning. </booktitle> <publisher> Oxford University Press. </publisher>
Reference-contexts: the following axiom sets 12 . ; fBetter; min Bad : 5; fmin Good : 1; : : : ; 4gg ; CIRC (5 0 ; CIRC (1 0 ; : : : ; 4 0 ; Good); Bad; Better) Now, we use several rules for computing circumscription described in <ref> (Lifschitz 1993) </ref>. The first equivalence below can be proved using formula (19) and proposition 2 in (Lifschitz 1993). <p> : : : ; 4gg ; CIRC (5 0 ; CIRC (1 0 ; : : : ; 4 0 ; Good); Bad; Better) Now, we use several rules for computing circumscription described in <ref> (Lifschitz 1993) </ref>. The first equivalence below can be proved using formula (19) and proposition 2 in (Lifschitz 1993). <p> is equivalent to the following formula, which does not depend on better. y 6= T ^ :Holds (F inal (x; S g ); s)^(28) :9zHolds (F inal (x; S g ); Result (M ove (x; z); s)) ! Bad (M ove (x; y); S g ; s) Finally, predicate completion <ref> (Lifschitz 1993) </ref> give us the result of the theorem. ; 26 0 ; CIRC (3 0 ; 28 0 ; Bad) ; 26 0 ; 27 0 Theorem 1 shows that the nested abnormality theory described by 25 is equivalent to the second order theory whose axioms are , 26 and
Reference: <author> Lifschitz, V. </author> <year> 1995. </year> <title> Nested abnormality theories. </title> <booktitle> Artificial Intelligence 74 </booktitle> <pages> 1262-1277. </pages>
Reference-contexts: First, we summarize a very elegant and simple formalization of STRIPS in the situation calculus, and its application to reasoning about action in the blocks world, described in (Mc-Carthy 1985). Then, we propose a nested abnormality theory (NAT) <ref> (Lifschitz 1995) </ref> that solves the problem of projecting the strategy described by axioms 1 to 4.
Reference: <author> Lin, F. </author> <year> 1997. </year> <title> Applications of the situation calculus to formalizing control and strategic information: The prolog cut operator. </title> <booktitle> In Proceedings of IJCAI-97, </booktitle> <pages> 1412-1418. </pages>
Reference-contexts: We have formalized only state-based strategies. An important number of strategies depend on chronological information, such as whether an action has been selected at a particular situation. The related problem of formalizing control information in the situation calculus is addressed by <ref> (Lin 1997) </ref>. Derivations in logic programming are identified with situations, and a fluent accessible is defined in order to characterize those situations which correspond to derivations of Prolog programs including cut. Our work differs from (Lin 1997) in two aspects: (1) the emphasis on representation, in particular, on proposing a representation <p> The related problem of formalizing control information in the situation calculus is addressed by <ref> (Lin 1997) </ref>. Derivations in logic programming are identified with situations, and a fluent accessible is defined in order to characterize those situations which correspond to derivations of Prolog programs including cut. Our work differs from (Lin 1997) in two aspects: (1) the emphasis on representation, in particular, on proposing a representation scheme for the declarative formalization of strategies; and (2) the use of non-monotonic reasoning to achieve elaboration tolerance and reflection. Planning is one of the most challenging problems.
Reference: <author> McCarthy, J., and Hayes, P. </author> <year> 1969. </year> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <booktitle> Machine Intelligence 4 </booktitle> <pages> 463-502. </pages>
Reference-contexts: Introduction Strategic knowledge has traditionally been specified using procedural programming languages or dynamic logic (Harel 1984) (Harmelen & Balder 1992). This paper proposes a representation scheme for the declarative formalization of strategies for action selection based on the situation calculus <ref> (McCarthy & Hayes 1969) </ref> and circumscription (McCarthy 1980) (Mc-Carthy 1986). The idea of representing strategies as sets of action selection rules (Genesereth & Hsu 1989) is explored. <p> The databases in the formalization of the blocks world presented above contain only propositional flu-ents of the form On (x; y) for x, y 2 fA,B,C,D,E,F,Tg. These propositional fluents are called frame fluents <ref> (McCarthy & Hayes 1969) </ref> (Lifschitz 1990), since any configuration of the blocks A,B,C,D,E, and F can be described by combinations of their values 9 .
Reference: <author> McCarthy, J. </author> <year> 1959. </year> <title> Programs with common sense. </title> <booktitle> In Mechanization of Thought Processes, Proceedings of the Symposium of the National Physics Laboratory, </booktitle> <pages> 77-84. </pages>
Reference-contexts: It can improve its problem solving strategy, accordingly, by adding and substituting action selection rules and axioms. It can avoid inconsistencies, which may cause it to have an arbitrary behavior. It can learn by taking advice <ref> (McCarthy 1959) </ref>, and reflecting on it. Initially, the advisor suggests to use the following heuristic: If a block can be moved to final position, this should be done right away. The program constructs Strategy-1, which is described by axiom 1.
Reference: <author> McCarthy, J. </author> <year> 1980. </year> <title> Circumscription -a form of non-monotonic reasoning. </title> <booktitle> Artificial Intelligence 13 </booktitle> <pages> 27-39. </pages>
Reference-contexts: Introduction Strategic knowledge has traditionally been specified using procedural programming languages or dynamic logic (Harel 1984) (Harmelen & Balder 1992). This paper proposes a representation scheme for the declarative formalization of strategies for action selection based on the situation calculus (McCarthy & Hayes 1969) and circumscription <ref> (McCarthy 1980) </ref> (Mc-Carthy 1986). The idea of representing strategies as sets of action selection rules (Genesereth & Hsu 1989) is explored.
Reference: <author> McCarthy, J. </author> <year> 1985. </year> <title> Formalization of STRIPS in situation calculus. Technical Report Formal Reasoning Group, </title> <institution> Department of Computer Science, Stanford University. </institution>
Reference-contexts: In section 3, this theory is generalized into a class of NAT's which apply circumscription in a particular way that is useful for studying the projections of declarative formalizations of strategies of the sort described in this paper. In <ref> (McCarthy 1985) </ref>, John McCarthy proposes a very simple formalization of STRIPS (Fikes & Nils-son 1971) in the situation calculus. The formalization is as follows. STRIPS is a planning system that uses a database of logical formulas to represent information about a state. <p> STRIPS has the single axiom DB (p; Result (a; s)) $(7) (P rec (a; s) ^ (Add (p; a; s)_ (DB (p; s) ^ :Delete (p; a; s))))_ (:P rec (a; s) ^ DB (p; s)) In <ref> (McCarthy 1985) </ref>, an example of how to use this formalization of STRIPS to reason about action in the blocks world is given. The example is as follows (we have modified the initial conditions, and added a uniqueness of names axiom). The variables x, y and z range over blocks. <p> Acknowledgments This paper was inspired by a challenge problem proposed in (McCarthy 1997). The formalization of STRIPS in the situation calculus and its application to reason about action in the blocks world are fully developed in <ref> (McCarthy 1985) </ref>. In addition to this, I'm particularly indebted to John McCarthy for encouraging, supporting, and enriching the writing of this work with many interesting ideas, some of which I have not been able to develop yet.
Reference: <author> McCarthy, J. </author> <year> 1986. </year> <title> Applications of circumscription to formalizing common sense knowledge. </title> <booktitle> Artificial Intelligence 28 </booktitle> <pages> 89-116. </pages>
Reference: <author> McCarthy, J. </author> <year> 1988. </year> <journal> Mathematical logic in artificial intelligence. </journal> <volume> Daedalus 117 </volume> <pages> 297-311. </pages>
Reference: <author> McCarthy, J. </author> <year> 1990a. </year> <title> Coloring maps and the Kowalski doctrine. In Formalizing common sense: papers by John McCarthy. Edited by Vladimir Lifschitz, </title> <publisher> Ablex, </publisher> <address> Norwood, NJ. </address>
Reference-contexts: Planning is one of the most challenging problems. Humans are sometimes able to come up with heuristics such as those formalized here. A deeper understanding of a domain may allow programs to come up with them as well. Issues such as the safeness and postpon-ability <ref> (McCarthy 1990a) </ref> of certain actions and situations, with respect to the achievement of certain goals, underly the design of the heuristics formalized for the blocks world.
Reference: <author> McCarthy, J. </author> <year> 1990b. </year> <title> Formalizing common sense: papers by John McCarthy. Edited by Vladimir Lifschitz, </title> <publisher> Ablex, </publisher> <address> Norwood, NJ. </address>
Reference-contexts: As different heuristics are suggested by the adviser, the program considers how they may affect its problem solving behavior, and reacts accordingly. The scenario tries to illustrate the idea that a program capable of reasoning non-monotonically about declarative formalizations of strategies can have interesting reflective behavior <ref> (McCarthy 1990b) </ref> (Mc-Carthy 1995) (Steels 1996) (Sierra 1996). For example, it can save computational resources by detecting un-computable or incorrect strategies. It can determine which of the heuristics is told improve, are redundant, partially redundant, or inconsistent with its current strategy.
Reference: <author> McCarthy, J. </author> <year> 1995. </year> <title> Making robots conscious of their mental states. Technical Report Formal Reasoning Group, </title> <institution> Department of Computer Science, Stanford University. </institution>
Reference: <author> McCarthy, J. </author> <year> 1997. </year> <title> Course on formalization of common sense - non-monotonic reasoning. </title> <booktitle> Lecture notes of CS323, </booktitle> <institution> Department of Computer Science, Stanford University. </institution>
Reference-contexts: Our hypothesis is that these issues may play a crucial role in the problem of automating the design of heuristics, which we have only begun to investigate. Acknowledgments This paper was inspired by a challenge problem proposed in <ref> (McCarthy 1997) </ref>. The formalization of STRIPS in the situation calculus and its application to reason about action in the blocks world are fully developed in (McCarthy 1985).
Reference: <author> Reiter, R. </author> <year> 1993. </year> <title> Proving properties of states in the situation calculus. </title> <booktitle> Artificial Intelligence 64 </booktitle> <pages> 337-351. </pages>
Reference-contexts: F rame (p) ! (Holds (p; s) $ DB (p; s))(14) The expression s &lt; s 1 means that s 1 can be reached <ref> (Reiter 1993) </ref> from s by executing a nonempty sequence 8 We use the following notation to abbreviate the description of situations Result (fg; s) = s, and Result (fajlg; s) = Result (l; Result (a; s)), where l is a sequence of actions (i.e., sequences of actions are applied from left
Reference: <author> Sierra, J. </author> <year> 1996. </year> <title> Software agents require formal knowledge level models. </title> <type> Ph.D. Dissertation, </type> <institution> Free University of Brussels. </institution>
Reference-contexts: The scenario tries to illustrate the idea that a program capable of reasoning non-monotonically about declarative formalizations of strategies can have interesting reflective behavior (McCarthy 1990b) (Mc-Carthy 1995) (Steels 1996) <ref> (Sierra 1996) </ref>. For example, it can save computational resources by detecting un-computable or incorrect strategies. It can determine which of the heuristics is told improve, are redundant, partially redundant, or inconsistent with its current strategy.
Reference: <author> Steels, L. </author> <year> 1996. </year> <title> The spontaneous self-organization of an adaptive language. </title> <booktitle> Machine Intelligence 15. </booktitle>
Reference-contexts: The scenario tries to illustrate the idea that a program capable of reasoning non-monotonically about declarative formalizations of strategies can have interesting reflective behavior (McCarthy 1990b) (Mc-Carthy 1995) <ref> (Steels 1996) </ref> (Sierra 1996). For example, it can save computational resources by detecting un-computable or incorrect strategies. It can determine which of the heuristics is told improve, are redundant, partially redundant, or inconsistent with its current strategy.
References-found: 23

