URL: http://choices.cs.uiuc.edu/2k/papers/reflective2k.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Email: -f-kon,singhai,roy,dcarvalh,rbmoore-@cs.uiuc.edu  nemo@gsyc.inf.uc3m.es  
Title: 2K A Reflective, Component-Based Operating System for Rapidly Changing Environments  
Author: Fabio Kon Ashish Singhai Roy H. Campbell Dulcineia Carvalho Robert Moore Francisco Ballesteros 
Address: Madrid  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  Universidad Carlos III  
Abstract: Modern computing environments face both low-frequency infrastructural changes, such as software and hardware upgrades, and frequent changes, such as fluctuations in the network bandwidth and CPU load. However, existing operating systems are not designed to cope with rapidly changing environments. They provide no mechanism to permit the insertion of self-adapting components that can optimize system performance according to diversity, software and hardware changes, and variations in the environment. They are not designed to accommodate dynamic updates of software, or to deal with component inter-dependence. This paper describes the philosophy behind 2K , a reflective, component-based operating system, and shows how it can be used to manage dynamism. In 2K , adaptation is driven by architectural awareness: the system software includes models of its own structure, state, and behavior. To implement adaptation, 2K incorporates a reflective middleware layer that admits on-the-fly customization through dynamic loading of new components. Our research investigates the deployment, within this framework, of dynamic policies and mechanisms for security, mobility, load balancing, fault tolerance, and quality of service for multimedia and real-time applications.
Abstract-found: 1
Intro-found: 1
Reference: [And92] <author> T. Anderson. </author> <title> The case for application-specific operating systems. </title> <booktitle> In Third Workshop on Workstation Operating Systems, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: Research has demonstrated that adapting an operating system to the behavior of an application can significantly enhance its performance <ref> [And92, BSP + 95] </ref>. The need for application-specific customization is further demonstrated by research showing that it is unlikely that a fixed set of general purpose mechanisms can provide the best performance for a wide range of applications [And92]. Typically, commercially available operating systems and middleware offer only limited adaptability. <p> The need for application-specific customization is further demonstrated by research showing that it is unlikely that a fixed set of general purpose mechanisms can provide the best performance for a wide range of applications <ref> [And92] </ref>. Typically, commercially available operating systems and middleware offer only limited adaptability. Several customizable or reconfigurable operating systems have been built. Choices [CIMR93] allows building a new instance of the OS by specifying, at compile or link time, the mechanisms implementing system services.
Reference: [BKC97] <author> Francisco J. Ballesteros, Fabio Kon, and Roy H. Campbell. </author> <title> A Detailed Description of Off++, a Distributed Adaptable Microkernel. </title> <type> Technical Report UIUCDCS-R-97-2035, </type> <institution> University of Illinois at Urabana-Champaign, </institution> <month> August </month> <year> 1997. </year> <note> Also available at http://choices.cs.uiuc.edu/2k/off++. </note>
Reference-contexts: For example, addition of a new network controller will be reflected in the reified system structure. It may trigger the networking component to reevaluate its decisions, possibly leading to adaptation in other components, such as network buffer sizes and timeout parameters. 5 Architectural awareness is demonstrated in the Off++ <ref> [BKC97] </ref> object-oriented microkernel, which is one of the platforms on which we are implementing 2K . The dependence structure of Off++ components is reified as SystemStructure. One can reason about it using two interfaces implemented by each system component: Navigator and Inspector . <p> For each page, one can use the Inspector to query attributes like persistence, ownership, mean access time, and backing store. Using this information, one can implement various memory management algorithms. For more details, see <ref> [BKC97] </ref>. A single navigation interface is being implemented across all layers of the 2K operating system. In the future, applications will be able to browse and inspect every single system component, from high-level, coarse-grain components like a file service, to low-level kernel objects like page frames.
Reference: [BSP + 95] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fiuczynski, D. Becker, bers C.Cha, and S. Eggers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Research has demonstrated that adapting an operating system to the behavior of an application can significantly enhance its performance <ref> [And92, BSP + 95] </ref>. The need for application-specific customization is further demonstrated by research showing that it is unlikely that a fixed set of general purpose mechanisms can provide the best performance for a wide range of applications [And92]. Typically, commercially available operating systems and middleware offer only limited adaptability. <p> Choices [CIMR93] allows building a new instance of the OS by specifying, at compile or link time, the mechanisms implementing system services. MicroChoices [LTC96] can dynamically import a new module written in Java. The code is then run by a kernel resident Java interpreter. Similarly, SPIN <ref> [BSP + 95] </ref> can import Modula-3 modules compiled by a trusted compiler. Exoker-nel [EK95, KEG + 97] demonstrated that support for dynamic reconfiguration could be achieved by means of a minimal kernel multiplexing hardware resources and user-level libraries.
Reference: [CIMR93] <author> Roy Campbell, Nayeem Islam, Peter Madany, and David Raila. </author> <title> Designing and Implementing Choices: an Object-Oriented System in C++. </title> <journal> Communications of the ACM, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: Typically, commercially available operating systems and middleware offer only limited adaptability. Several customizable or reconfigurable operating systems have been built. Choices <ref> [CIMR93] </ref> allows building a new instance of the OS by specifying, at compile or link time, the mechanisms implementing system services. MicroChoices [LTC96] can dynamically import a new module written in Java. The code is then run by a kernel resident Java interpreter.
Reference: [CMQ + 97] <author> Roy H. Campbell, Dennis Mickunas, Tin Qian, Chuck Willis, and Zhaoyu Liu. Cherubim: </author> <title> A Mobile Agent Based Security Architecture. </title> <institution> Project home page: </institution> <note> http://choices.cs.uiuc.edu/Security/DARPA/, 1997. </note>
Reference-contexts: This architectural framework combines recently developed techniques in middleware and operating systems to achieve its goal. The specific techniques we use include distributed objects and reflective middleware [SSC98b], architectural awareness [SSC96b], customization [LTC96], dynamic security <ref> [CMQ + 97] </ref> the study of optimization techniques [SSC98a], and code and data mobility [KZ97]. <p> As a result, clients and servers will not be encumbered by details of mobility management, the interaction between the ORB and the mobile system will be transparent to clients. Security As part of our research on the Cherubim security framework <ref> [CQ98, CMQ + 97] </ref>, we have developed an extension to the OMG IDL that enables the specification of dynamic security policies and mechanisms associated with CORBA-like objects. The framework provides hooks at strategic points of the interaction between clients and servers.
Reference: [Coi96] <author> Pierre Cointe. </author> <title> Reflective languages and metalevel architectures. </title> <journal> ACM Computing Surveys, </journal> <volume> 28(4es):151, </volume> <month> December </month> <year> 1996. </year>
Reference-contexts: Rather than concentrating on how to implement reflection, our goal is to further extend their research by focusing on what to do with a system that supports reflection. Various programming languages support reflection explicitly <ref> [Coi96] </ref>. Iguana, for example, is an extension to C++ that reifies several features of this language, allowing dynamic modification of their implementations [GC96]. One of 2K 's major goals is to provide interoperability among a large number of existing hardware platforms, operating systems, and programming languages.
Reference: [CQ98] <author> Roy Campbell and Tin Qian. </author> <title> Dynamic agent-based security architecture for mobile computers. </title> <note> Submitted to IEEE Internet Computing Magzine, </note> <year> 1998. </year>
Reference-contexts: As a result, clients and servers will not be encumbered by details of mobility management, the interaction between the ORB and the mobile system will be transparent to clients. Security As part of our research on the Cherubim security framework <ref> [CQ98, CMQ + 97] </ref>, we have developed an extension to the OMG IDL that enables the specification of dynamic security policies and mechanisms associated with CORBA-like objects. The framework provides hooks at strategic points of the interaction between clients and servers.
Reference: [DPP + 96] <author> Sean Dorward, Rob Pike, Dave Presotto, Howard Trickey, and Phil Winterbottom. </author> <title> Inferno: </title> <booktitle> La commedia Interattiva. In Proceedings of the OSDI'96 (WIP). USENIX, </booktitle> <year> 1996. </year>
Reference-contexts: Many groups have investigated the issues related to the distribution of system services. Spring [Mea94] introduced the idea of using IDL descriptions for building distributed operating system services. WebOS [VEY + 97] provides a set of tools for building distributed services and 9 applications. Inferno <ref> [DPP + 96] </ref> extends the Plan9 operating system to provide a portable virtual machine that can run programs written in Limbo.
Reference: [EK95] <author> Dawson Engler and Frans Kaashoek. </author> <title> Exterminate All Operating System Abstractions. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, WA, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: MicroChoices [LTC96] can dynamically import a new module written in Java. The code is then run by a kernel resident Java interpreter. Similarly, SPIN [BSP + 95] can import Modula-3 modules compiled by a trusted compiler. Exoker-nel <ref> [EK95, KEG + 97] </ref> demonstrated that support for dynamic reconfiguration could be achieved by means of a minimal kernel multiplexing hardware resources and user-level libraries. Unfortunately, implementing a new module in any of these systems requires intimate knowledge of system internals and conventions.
Reference: [GC96] <author> Brendan Gowing and Vinny Cahill. </author> <title> Meta-object protocols for C++: The iguana approach. </title> <booktitle> In Proceedings of Reflection '96, </booktitle> <pages> pages 137-152, </pages> <address> San Francisco, USA, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Various programming languages support reflection explicitly [Coi96]. Iguana, for example, is an extension to C++ that reifies several features of this language, allowing dynamic modification of their implementations <ref> [GC96] </ref>. One of 2K 's major goals is to provide interoperability among a large number of existing hardware platforms, operating systems, and programming languages. Therefore, we opted for providing reflective facilities via a library API, and not in the programming language level.
Reference: [GWea97] <author> Andrew S. Grimshaw, Wm. A. Wulf, and et al. </author> <title> The Legion Vision of a Worldwide Virtual Computer. </title> <journal> Communications of the ACM, </journal> <volume> 40(1), </volume> <month> January </month> <year> 1997. </year>
Reference-contexts: Most of the research efforts in these areas are confined to a specific computational environment and cannot be used in conjunction with existing systems. Legion <ref> [GWea97] </ref> and Globe [vSHT97] share similar goals as ours, in that they also support wide-area distributed objects and dynamic configurability. However, 2K also focuses on easing system administration, providing QoS guarantees, and automated adaptation.
Reference: [KCT + 98] <author> Fabio Kon, Roy H. Campbell, See-Mong Tan, Miguel Valdez, Zhigang Chen, and Jim Wong. </author> <title> A Component-Based Architecture for Scalable Distributed Multimedia. </title> <booktitle> In Proceedings of the 14th International Conference on Advanced Science and Technology (ICAST'98), </booktitle> <pages> pages 121-135, </pages> <institution> Lucent Technologies, Naperville, </institution> <month> April </month> <year> 1998. </year>
Reference-contexts: We present a number of improvements to the multimedia distribution system that 2K would enable. 7 5.1 System Overview In order to provide efficient multimedia distribution to millions of clients, we have developed a scalable distribution framework for real-time data <ref> [KCT + 98] </ref>. We achieve distribution using a network of Reflector s 1 distributed across a wide-area network. Each Reflector works as a relay, receiving input data packets from a list of trusted sources and forwarding these packets to other reflectors or to end-user clients. <p> Here, we describe some of these problems: * For a particular world-wide broadcast <ref> [KCT + 98] </ref> lasting several months, we built a network of more than 30 Reflectors spread across five continents. During this period, we developed new versions of the Reflector and the client visualization program.
Reference: [KEG + 97] <author> M. Frans Kaashoek, Dawson R. Engler, Gregory R. Ganger, Hector Brice~no, Russell Hunt, David Mazieres, Tom Pinckney, Robert Grimm, John Janotti, and Kenneth 11 Mackenzie. </author> <title> Application Performance and Flexibility on Exokernel Systems. </title> <booktitle> In Pro--ceedings of the Sixteenth Symposium on Operating Systems Principles, </booktitle> <address> Saint Malo, FR, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: MicroChoices [LTC96] can dynamically import a new module written in Java. The code is then run by a kernel resident Java interpreter. Similarly, SPIN [BSP + 95] can import Modula-3 modules compiled by a trusted compiler. Exoker-nel <ref> [EK95, KEG + 97] </ref> demonstrated that support for dynamic reconfiguration could be achieved by means of a minimal kernel multiplexing hardware resources and user-level libraries. Unfortunately, implementing a new module in any of these systems requires intimate knowledge of system internals and conventions.
Reference: [KZ97] <author> Joseph Kiniry and Daniel Zimmerman. </author> <title> A hands-on look at java mobile agents. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(4), </volume> <month> August </month> <year> 1997. </year>
Reference-contexts: This architectural framework combines recently developed techniques in middleware and operating systems to achieve its goal. The specific techniques we use include distributed objects and reflective middleware [SSC98b], architectural awareness [SSC96b], customization [LTC96], dynamic security [CMQ + 97] the study of optimization techniques [SSC98a], and code and data mobility <ref> [KZ97] </ref>. Our work complements these techniques by providing a reflective environment on which these technologies can be implemented, tested, and deployed. 1.1 Supporting Adaptation In 2K , we build an integrated architecture for adaptability where change is the fundamental premise, and adaptability is the fundamental goal. <p> maintenance; (2) provide the basis for automated software updates, (3) enable the implementation of "users" as network-centric entities, and (4) support a WYNIWYG model in which minimal optimized configurations are assembled. 2.2 Code Distribution The difficulty of evolving existing Internet networking technology and the recent popularity of mobile agent systems <ref> [KZ97] </ref> has motivated a novel approach to network architecture called active networking [TSS + 97]. In an active network, new protocols and services can be injected into the network using smart packets to carry customized software components which are executed by network routers.
Reference: [LTC96] <author> W. S. Liao, S. Tan, and R. H. Campbell. </author> <title> Fine-grained, Dynamic User Customization of Operating Systems. </title> <booktitle> In Proceedings Fifth International Workshop on Object-Orientation in Operating Systems, </booktitle> <pages> pages 62-66, </pages> <address> Seattle, Washington USA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: This architectural framework combines recently developed techniques in middleware and operating systems to achieve its goal. The specific techniques we use include distributed objects and reflective middleware [SSC98b], architectural awareness [SSC96b], customization <ref> [LTC96] </ref>, dynamic security [CMQ + 97] the study of optimization techniques [SSC98a], and code and data mobility [KZ97]. <p> Typically, commercially available operating systems and middleware offer only limited adaptability. Several customizable or reconfigurable operating systems have been built. Choices [CIMR93] allows building a new instance of the OS by specifying, at compile or link time, the mechanisms implementing system services. MicroChoices <ref> [LTC96] </ref> can dynamically import a new module written in Java. The code is then run by a kernel resident Java interpreter. Similarly, SPIN [BSP + 95] can import Modula-3 modules compiled by a trusted compiler.
Reference: [Maf95] <author> Silvano Maffeis. </author> <title> Adding group communication and fault-tolerance to corba. </title> <booktitle> In Proceedings of the 1995 USENIX Conference on Object-Oriented Technologies. The USENIX Association, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: TAO extends the CORBA model to support real-time applications [Sch97]. Since TAO mainly targets static real-time applications (such as avionics), it does not provide dynamic run-time adaptability. Other extensions to the CORBA model include support for group communication [MS97], fault-tolerance <ref> [Maf95] </ref>, and quality of service for objects [ZBS97]. Our research seeks the creation of a generic, reflective framework for dynamic customization of distributed object services.
Reference: [MBW97] <author> S. E. Mitchell, A. Burns, and A. J. Wellings. </author> <title> Adaptive Scheduling using Reflection. </title> <booktitle> In Proceedings of the ECOOP'97 Workshop on Reflective Real-Time Object-Oriented Programming and Systems, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: For example, as part of setting up a video-on-demand session object, the ORB will check available resources for admission control. If the session is admitted, it will reserve network bandwidth and CPU time for it. QoS support must also include real-time scheduling and networking <ref> [SSC97, MBW97] </ref>. These policies can be implemented in the method invocation and execution mechanisms and selected via reflection. 5 Application Example In this section, we describe a multimedia distribution system and show how it would benefit from the dynamic management features of 2K .
Reference: [Mea94] <author> J. Mitchell and et al. </author> <title> An Overview of the Spring System. </title> <booktitle> In Proceedings of Compcon 'Spring 1994, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Therefore, we opted for providing reflective facilities via a library API, and not in the programming language level. Many groups have investigated the issues related to the distribution of system services. Spring <ref> [Mea94] </ref> introduced the idea of using IDL descriptions for building distributed operating system services. WebOS [VEY + 97] provides a set of tools for building distributed services and 9 applications.
Reference: [MS97] <author> Silvano Maffeis and Douglas C. Schmidt. </author> <title> Constructing reliable distributed communication systems with CORBA. </title> <journal> IEEE Communications Magazine, </journal> <volume> 14(2), </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: These limitations have also been identified by other research groups. TAO extends the CORBA model to support real-time applications [Sch97]. Since TAO mainly targets static real-time applications (such as avionics), it does not provide dynamic run-time adaptability. Other extensions to the CORBA model include support for group communication <ref> [MS97] </ref>, fault-tolerance [Maf95], and quality of service for objects [ZBS97]. Our research seeks the creation of a generic, reflective framework for dynamic customization of distributed object services.
Reference: [NS95] <author> K. Nahrstedt and J. M. Smith. </author> <title> The QoS Broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2(1) </volume> <pages> 53-67, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: Using the reflective interface, a large variety of authentication and encryption algorithms can be associated dynamically with those hooks in order to customize the client/server interaction with respect to security. Quality of Service for Continuous Media QoS for applications requires resource allocation and admission control <ref> [NS95] </ref> according to application requirements. The reflective ORB will allow the object creation phase to perform these operations. For example, as part of setting up a video-on-demand session object, the ORB will check available resources for admission control.
Reference: [Sch97] <author> Douglas C. Schmidt. </author> <title> Principles and patterns of high-performance and real-time distributed object computing. </title> <booktitle> In Proceedings of the Sixteenth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> page 11, </pages> <address> Santa Barbara, California, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: However, they present serious limitations in flexibility, adaptation, and support for application-specific customizations. These limitations have also been identified by other research groups. TAO extends the CORBA model to support real-time applications <ref> [Sch97] </ref>. Since TAO mainly targets static real-time applications (such as avionics), it does not provide dynamic run-time adaptability. Other extensions to the CORBA model include support for group communication [MS97], fault-tolerance [Maf95], and quality of service for objects [ZBS97].
Reference: [SRC84] <author> J. H. Saltzer, D. P. Reed, and D. D. Clark. </author> <title> End-to-end arguments in system design. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(4) </volume> <pages> 277-288, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: We now describe how the reification of the system structure enables optimizations. 3.2 Dynamic Optimizations It has been suggested in the literature that system performance is an end-to-end property which cannot always be implemented in isolation <ref> [SRC84] </ref>. In other words, besides optimized components, system performance also depends upon optimized interaction among components [SSC98a]. The explicit representation of system structure allows reasoning about inter-component interactions and provides guidelines for optimizations. For example, reified object interactions (call chains) can help optimize data transfer and synchronization across objects.
Reference: [SSC96a] <author> M. Sefika, Aamod Sane, and Roy H. Campbell. </author> <title> Monitoring Compliance of a Software System With Its High-Level Design Models. </title> <booktitle> In 18th International Conference on Software Engineering, </booktitle> <address> Berlin, Germany, </address> <month> March 25-26 </month> <year> 1996. </year>
Reference-contexts: It may transmit low-quality images to get higher compression ratio if the available bandwidth is low and/or use a computationally intensive algorithm if the CPU load is low. 3.1 Architectural Awareness 2K extends our earlier research <ref> [SSC96a, SSC96b] </ref> on architectural awareness. These works - which deal with design conformance testing and dynamic visualization have shown the benefits of providing, to a system, access to its own structure.
Reference: [SSC96b] <author> Mohlalefi Sefika, Aamod Sane, and Roy H. Campbell. </author> <title> Architecture-oriented visualization. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), volume 31(10) of ACM SIGPLAN Notices, </booktitle> <pages> pages 389-405, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: This architectural framework combines recently developed techniques in middleware and operating systems to achieve its goal. The specific techniques we use include distributed objects and reflective middleware [SSC98b], architectural awareness <ref> [SSC96b] </ref>, customization [LTC96], dynamic security [CMQ + 97] the study of optimization techniques [SSC98a], and code and data mobility [KZ97]. <p> It may transmit low-quality images to get higher compression ratio if the available bandwidth is low and/or use a computationally intensive algorithm if the CPU load is low. 3.1 Architectural Awareness 2K extends our earlier research <ref> [SSC96a, SSC96b] </ref> on architectural awareness. These works - which deal with design conformance testing and dynamic visualization have shown the benefits of providing, to a system, access to its own structure.
Reference: [SSC97] <author> Ashish Singhai, Aamod Sane, and Roy Campbell. </author> <title> Reflective ORBs: Support for Robust, Time-Critical Distribution. </title> <booktitle> In Proceedings of the ECOOP'97 Workshop on Reflective Real-Time Object-Oriented Programming and Systems, </booktitle> <month> June </month> <year> 1997. </year> <month> 12 </month>
Reference-contexts: Components can access the system state to determine if they need to adapt. Alternatively, changes in the system state can trigger automatic adaptation. 3. How to adapt? A Reflective Object Request Broker (ORB) and mechanisms for code distribution support the adaptation process. In the reflective ORB <ref> [SSC97] </ref>, components encapsulate ORB mechanisms and policies for method invocation, marshaling, concurrency, and the like. <p> Object mechanisms that are subject to reflection include object creation and destruction, method invocation, concurrency, request demultiplexing and dispatching, data marshaling, network transport protocol, inter-ORB protocol, object references, naming, etc. We have implemented a prototype reflective ORB [SSC98b] and have extended it for real-time invocations 6 <ref> [SSC97] </ref>, fault-tolerance and replication, parallel computing, and to interoperate with Java RMI. The reflective ORB provides a natural mechanism for implementing a number of desirable features in a modern distributed operating system: Load Balancing The reflective ORB allows application-specific object creation and method invocation policies. <p> This provides tolerance against network and server failures. Our preliminary results for fault tolerance using reflective ORBs are available in <ref> [SSC97] </ref>. Mobile Computing A reflective ORB can support mobile computing by specializing method invocation. The specialized method invocation will include interaction with a location service for mobile hosts and will route the invocation to the target host. <p> For example, as part of setting up a video-on-demand session object, the ORB will check available resources for admission control. If the session is admitted, it will reserve network bandwidth and CPU time for it. QoS support must also include real-time scheduling and networking <ref> [SSC97, MBW97] </ref>. These policies can be implemented in the method invocation and execution mechanisms and selected via reflection. 5 Application Example In this section, we describe a multimedia distribution system and show how it would benefit from the dynamic management features of 2K .
Reference: [SSC98a] <author> Aamod Sane, Ashish Singhai, and Roy Campbell. </author> <title> End-to-end considerations in framework design. </title> <booktitle> In Proceedings of the 12th European Conference on Object-Oriented Programming (ECOOP), Lecture Notes in Computer Science, page (to appear). </booktitle> <publisher> Springer Verlag, </publisher> <month> July </month> <year> 1998. </year>
Reference-contexts: This architectural framework combines recently developed techniques in middleware and operating systems to achieve its goal. The specific techniques we use include distributed objects and reflective middleware [SSC98b], architectural awareness [SSC96b], customization [LTC96], dynamic security [CMQ + 97] the study of optimization techniques <ref> [SSC98a] </ref>, and code and data mobility [KZ97]. <p> In other words, besides optimized components, system performance also depends upon optimized interaction among components <ref> [SSC98a] </ref>. The explicit representation of system structure allows reasoning about inter-component interactions and provides guidelines for optimizations. For example, reified object interactions (call chains) can help optimize data transfer and synchronization across objects.
Reference: [SSC98b] <author> Ashish Singhai, Aamod Sane, and Roy Campbell. </author> <title> Quarterware for middleware. </title> <booktitle> In Proceddings of the 18th International Conference on Distributed Computing Systems (ICDCS). IEEE, </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: Our approach to handling these changes is to build a generic framework to support change management in a network-centric computing environment. This architectural framework combines recently developed techniques in middleware and operating systems to achieve its goal. The specific techniques we use include distributed objects and reflective middleware <ref> [SSC98b] </ref>, architectural awareness [SSC96b], customization [LTC96], dynamic security [CMQ + 97] the study of optimization techniques [SSC98a], and code and data mobility [KZ97]. <p> Object mechanisms that are subject to reflection include object creation and destruction, method invocation, concurrency, request demultiplexing and dispatching, data marshaling, network transport protocol, inter-ORB protocol, object references, naming, etc. We have implemented a prototype reflective ORB <ref> [SSC98b] </ref> and have extended it for real-time invocations 6 [SSC97], fault-tolerance and replication, parallel computing, and to interoperate with Java RMI.
Reference: [Sun97] <author> Sun Microsystems. </author> <title> Linker and Libraries, </title> <note> 1997. On-line document available at http: //docs.sun.com. </note>
Reference-contexts: An internet browser, for example, could specify that it depends upon components implementing an X-Window system, a local file service, the TCP/IP protocol, and the Java virtual machine version 1.0.2 or later. 2K extends the models for representing dependencies among shared libraries in traditional systems. In Solaris <ref> [Sun97] </ref>, for example, the system keeps track of the dependencies among shared libraries that run within one process. 2K manages dependencies between arbitrary components executing in different processes, under different users, and even in different machines. Inter-component dependence characterizes exactly the requirements for a service.
Reference: [TCC + 96] <author> S. Tan, R. Campbell, Z. Chen, W. Liao, D. K. Raila, F. Kon, and M. Valdez. </author> <title> Adaptation and Synchronization in Low-Bandwidth Internet Video. In World Wide Web Consortium Workshop on Real Time Multimedia and the Web (RTMW '96), </title> <institution> INRIA Sophia Antipolis, France, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: Using 2K 's reflection and reification, the multimedia system would also be able to perform other kinds of dynamic optimizations. For example, it could select or adapt decoding algorithms according to the available computational power, or adapt the frame rate for video <ref> [TCC + 96] </ref> and the sampling rate for audio according to the bandwidth utilization. 6 Related Work Work related to 2K falls in two categories: (1) adaptive, customizable, and reflective systems; and (2) distributed operating systems and distributed object systems.
Reference: [TSS + 97] <author> David L. Tennenhouse, Jonathan M. Smith, W. David Sincoskie, David J. Wetherall, and Gary J. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: implementation of "users" as network-centric entities, and (4) support a WYNIWYG model in which minimal optimized configurations are assembled. 2.2 Code Distribution The difficulty of evolving existing Internet networking technology and the recent popularity of mobile agent systems [KZ97] has motivated a novel approach to network architecture called active networking <ref> [TSS + 97] </ref>. In an active network, new protocols and services can be injected into the network using smart packets to carry customized software components which are executed by network routers.
Reference: [VEY + 97] <author> Amin Vahdat, Paul Eastham, Chad Yoshikawa, Eshwar Belani, Thomas Anderson, David Culler, and Michael Dahlin. WebOS: </author> <title> Operating System Services For Wide Area Applications. </title> <type> Technical Report 97-938, </type> <institution> UCB-CSD, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: Therefore, we opted for providing reflective facilities via a library API, and not in the programming language level. Many groups have investigated the issues related to the distribution of system services. Spring [Mea94] introduced the idea of using IDL descriptions for building distributed operating system services. WebOS <ref> [VEY + 97] </ref> provides a set of tools for building distributed services and 9 applications. Inferno [DPP + 96] extends the Plan9 operating system to provide a portable virtual machine that can run programs written in Limbo.
Reference: [vSHT97] <author> Maarten van Steen, Philip Homburg, and Andrew Tanenbaum. </author> <title> The architectural design of globe: A wide-area distributed system. </title> <type> Technical Report Internal Report IR-422, </type> <institution> Faculty of Mathematics and Computer Science. Vrije Universiteit, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: Most of the research efforts in these areas are confined to a specific computational environment and cannot be used in conjunction with existing systems. Legion [GWea97] and Globe <ref> [vSHT97] </ref> share similar goals as ours, in that they also support wide-area distributed objects and dynamic configurability. However, 2K also focuses on easing system administration, providing QoS guarantees, and automated adaptation. Distributed object models such as CORBA, Java RMI, and DCOM aim at facilitating the development of distributed applications.
Reference: [Yok92] <author> Yasuhiko Yokote. </author> <title> The Apertos Reflecive Operating System: The Concept and Its Implementation. </title> <booktitle> In Proceedings of the 1992 International Conference on Object-Oriented Programming, Systems, Languages, and Applications, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: Unfortunately, implementing a new module in any of these systems requires intimate knowledge of system internals and conventions. As a result, writing a system extension is extremely difficult. Operating systems such as Apertos <ref> [Yok92] </ref>, provide explicit low-level support for reflection and reification of system objects. Rather than concentrating on how to implement reflection, our goal is to further extend their research by focusing on what to do with a system that supports reflection. Various programming languages support reflection explicitly [Coi96].
Reference: [ZBS97] <author> John A. Zinky, David E. Bakken, and Richard E. Schantz. </author> <title> Architectural Support for Quality of Service for CORBA Objects. </title> <booktitle> Theory and Practice of Object Systems, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: TAO extends the CORBA model to support real-time applications [Sch97]. Since TAO mainly targets static real-time applications (such as avionics), it does not provide dynamic run-time adaptability. Other extensions to the CORBA model include support for group communication [MS97], fault-tolerance [Maf95], and quality of service for objects <ref> [ZBS97] </ref>. Our research seeks the creation of a generic, reflective framework for dynamic customization of distributed object services.
Reference: [ZF97] <author> Stanley Zdonik and Michael Franklin. </author> <title> A framework for scalable dissemination based systems. </title> <booktitle> In Proceedings of the 12th Conference on Object-Oriented Programming, Systems, Languages, and Applications, Sigplan Notices:32(10), </booktitle> <pages> pages 94-105. </pages> <booktitle> ACM Sigplan, </booktitle> <month> October </month> <year> 1997. </year> <month> 13 </month>
Reference-contexts: Several research groups are investigating the use of active networking, mobile agents, and push and pull technologies to improve performance, provide intelligent resource management, fault tolerance, and reduce bandwidth requirements on distributed and mobile environments. In particular, by transforming push and pull <ref> [ZF97] </ref> into each other as needed, by utilizing combinations of multicast and unicast, and with the aid of mobile agents, we can optimize bandwidth utilization and response time of network-wide operations.
References-found: 35

