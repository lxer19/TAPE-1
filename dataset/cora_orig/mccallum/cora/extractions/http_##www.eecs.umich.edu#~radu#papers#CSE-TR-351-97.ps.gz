URL: http://www.eecs.umich.edu/~radu/papers/CSE-TR-351-97.ps.gz
Refering-URL: http://www.eecs.umich.edu/~radu/private/resume.html
Root-URL: http://www.eecs.umich.edu
Email: E-mail: hyongsop,rhall,radu,aprakash@eecs.umich.edu  
Title: Stateful Multicast Services for Supporting Collaborative Applications  
Author: Hyong Sop Shim, Robert W. Hall, Radu Litiu and Atul Prakash 
Address: Ann Arbor, MI 48109-2122 USA  
Affiliation: Department of Electrical Engineering and Computer Science, University of Michigan,  
Abstract: Collaborative, multi-user applications require group multicast services with ordering guarantees for maintaining consistency of replicated shared state among collaborating processes. In traditional group multicast services (such as Isis), the group's shared state is maintained only by the clients and the multicast service facilitates atomic state transfer from existing clients to new members. In this paper, we argue that, in order to support collaborative applications in Internet-type environments, a copy of the group's state should also be maintained by the multicast service. We show that by maintaining a copy of group's state, the multicast service can provide consistently fast group-join and state transfer time when both slow and fast clients are present or when clients are unreliable | a crucial requirement in collaborative, multi-user applications where users may dynamically join and leave a collaborative session and expect predictable join times and interactive response time even in the presence of slow or unreliable clients. We show that the overheads incurred by a multicast service in managing each group's shared state can be made minimal and that the multicast service does not have to be aware of the semantics of the group's state. We present the design of such a multicast service, present performance results, and discuss how it meets the various needs of collaborative applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Amir, Y. Amir, and D. Dolev. </author> <title> A Highly Available Application in the Transis Environment. </title> <booktitle> In Proc. of the Workshop on Hardware and Software Architectures for Fault Tolerance, Lecture Notes in Computer Science 774), </booktitle> <address> month=June, year=1993,. </address>
Reference-contexts: Transis, like ISIS, provides a transport layer with a variety of multicast ordering and delivery semantics. Transis has been used to support distributed replicated database systems. By having replicated Transis processes, a higher level of fault-tolerance that a single single server can achieve has been realized. One Transis-based approach <ref> [1] </ref> to achieve consistent replication suffers from the inefficiency of using global total ordering with Lamport clocks. Corel [8] addresses this and also addresses fault-tolerance. However, these approaches require consistent membership views and require end-to-end acknowledgments for each message.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication Sub-System for High Availability. </title> <type> Technical Report TR CS91-13, </type> <institution> Computer Science Dept., Hebrew University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: The system should make this information available to client applications, via queries to the server or notifications of membership changes. 4 Related Work As transport layer subsystems, ISIS [5, 4], and Transis <ref> [2, 3] </ref> support the notion of process groups, notification of membership changes, and group multicast and may be could be used to build services such as our build our group awareness and group notification services. Both support a fully replicated architecture with individual members maintaining replicated state.
Reference: [3] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Robust and Efficient Replication using Group Communication. </title> <type> Technical Report TR CS94-20, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: The system should make this information available to client applications, via queries to the server or notifications of membership changes. 4 Related Work As transport layer subsystems, ISIS [5, 4], and Transis <ref> [2, 3] </ref> support the notion of process groups, notification of membership changes, and group multicast and may be could be used to build services such as our build our group awareness and group notification services. Both support a fully replicated architecture with individual members maintaining replicated state.
Reference: [4] <author> K. P. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <journal> Comm. of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: A developer should take into account such considerations when designing a collaborative system. Critical issues concerning a collaborative system design include: * Support for Group Communication Services: A collaborative system should provide support for group communication <ref> [4] </ref>. Processes should be able to create, join, and leave groups. A process in a group should be able to communicate with the other members of the group without the knowledge of the full membership of the group. <p> The system should make this information available to client applications, via queries to the server or notifications of membership changes. 4 Related Work As transport layer subsystems, ISIS <ref> [5, 4] </ref>, and Transis [2, 3] support the notion of process groups, notification of membership changes, and group multicast and may be could be used to build services such as our build our group awareness and group notification services.
Reference: [5] <author> K. P. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight Causal and Atomic Group Multicast. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: The system should make this information available to client applications, via queries to the server or notifications of membership changes. 4 Related Work As transport layer subsystems, ISIS <ref> [5, 4] </ref>, and Transis [2, 3] support the notion of process groups, notification of membership changes, and group multicast and may be could be used to build services such as our build our group awareness and group notification services.
Reference: [6] <author> C. A. DellaFera and M. W. Eichin. </author> <title> The Zephyr Notification Service. </title> <booktitle> In Proc. of the USENIX WInter Conference, </booktitle> <address> Dallas, Tx, 1988. </address> <publisher> USENIX Association. </publisher>
Reference-contexts: On the other hand, the Corona server does not support the Facade-like capabilities for viewing the shared states of groups before actually joining the groups. Many other systems also provide administrative services similar in part to the services provided by the Corona server. Both IRC [9] and Zephyr <ref> [6] </ref> provide centralized messaging and notification services, which are similar to our group awareness and multicast services.
Reference: [7] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Groupware: Some Issues and Experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 38-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: However, traditional distributed systems strive to provide the illusion of working alone, and thus the data sharing is provided as transparently as possible <ref> [7] </ref>. The goal of a collaborative system is to empower geographically dispersed users to effectively work together over distance. Thus the sharing of data is made apparent in collaborative systems, and the mechanics of data sharing often dictates the overall effectiveness of collaboration.
Reference: [8] <author> I. Keidar. </author> <title> A Highly Available Paradigm for Consistent Object Replication. </title> <type> In Master's Thesis, </type> <institution> Institute for Computer Science, The Hebrew University of Jerusalem, </institution> <year> 1994. </year>
Reference-contexts: By having replicated Transis processes, a higher level of fault-tolerance that a single single server can achieve has been realized. One Transis-based approach [1] to achieve consistent replication suffers from the inefficiency of using global total ordering with Lamport clocks. Corel <ref> [8] </ref> addresses this and also addresses fault-tolerance. However, these approaches require consistent membership views and require end-to-end acknowledgments for each message. In its goals, Lotus' NSTP [10] closely resembles our Corona server with regard to shared state management.
Reference: [9] <author> J. Oikarinen and D. Reed. </author> <title> Internet Relay Chat Protocol. </title> <type> RFC 1459, </type> <year> 1993. </year> <note> Available at ftp://ds.intenic.net/rfc/rfc/1459.txt. </note>
Reference-contexts: On the other hand, the Corona server does not support the Facade-like capabilities for viewing the shared states of groups before actually joining the groups. Many other systems also provide administrative services similar in part to the services provided by the Corona server. Both IRC <ref> [9] </ref> and Zephyr [6] provide centralized messaging and notification services, which are similar to our group awareness and multicast services.
Reference: [10] <author> J. F. Patterson, M. Day, and J. Kucan. </author> <title> Notification Servers for Synchronous Groupware. </title> <booktitle> In Proc. of the Sixth ACM Conference on Computer-Supported Cooperative Work. </booktitle> <publisher> ACM Press, </publisher> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: One Transis-based approach [1] to achieve consistent replication suffers from the inefficiency of using global total ordering with Lamport clocks. Corel [8] addresses this and also addresses fault-tolerance. However, these approaches require consistent membership views and require end-to-end acknowledgments for each message. In its goals, Lotus' NSTP <ref> [10] </ref> closely resembles our Corona server with regard to shared state management. Both advocate centralized management of shared state and provide similar administrative services in its support. The semantics of shared state is client-based in both systems so that their services are generalized to a wide range of applications.
Reference: [11] <author> A. Prakash and H. Shim. DistView: </author> <title> Support for Building Efficient Collaborative Applications using Replicated Objects. </title> <booktitle> In Proc. of the Fifth ACM Conf. on Computer Supported Cooperative Work, </booktitle> <pages> pages 153-164, </pages> <address> Chapel-Hill, NC, </address> <month> Oct. </month> <year> 1994. </year> <month> 13 </month>
Reference-contexts: The identifier of a shared object is used to uniquely identify the object in S and may be automatically generated by a support system for building collaborative applications such as the DistView toolkit <ref> [11] </ref>. Note that the state of a shared object is type-independent. This is consistent with the requirement of the client-based semantics in Section 3.
References-found: 11

