URL: http://www.cs.gatech.edu/computing/Database/students/jeong/papers/IEEE95.ps.gz
Refering-URL: http://www.cs.gatech.edu/computing/Database/students/jeong/jeong.html
Root-URL: 
Email: E-mail jeong@cc.gatech.edu, edwardo@cc.gatech.edu  
Title: Inverted File Partitioning Schemes in Multiple Disk Systems  
Author: Byeong-Soo Jeong and Edward Omiecinski 
Date: Oct. 1993  
Address: Atlanta, Georgia 30332 USA  
Affiliation: College of Computing Georgia Institute of Technology  
Abstract: Multiple-disk I/O systems (Disk Arrays) have been an attractive approach to meet high performance I/O demands in data intensive applications such as information retrieval systems. When we partition and distribute files across multiple disks to exploit the potential for I/O parallelism, a balanced I/O workload distribution becomes important for good performance. Naturally, the performance of a parallel information retrieval system using an inverted file structure is affected by the partitioning scheme of the inverted file. In this paper, we propose two different partitioning schemes for an inverted file system for a shared-everything multiprocessor machine with multiple disks. We study the performance of these schemes by simulation under a number of workloads where the term frequencies in the documents are varied, the term frequencies in the queries are varied, the number of disks are varied and the multiprogramming level is varied.
Abstract-found: 1
Intro-found: 1
Reference: [BF87] <author> C. Baru and O. Frieder, </author> <title> "Implementing Relational Database Operations in a Cube-Connected Multicomputer," </title> <booktitle> Proc. of IEEE Data Engineering Conference, </booktitle> <year> 1987, </year> <pages> 36-43. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research [CEMW90, PW87, PRW88, Ras91, SB88]. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years <ref> [BF87, DGGHKM86, KTM83, Omi91, OL89] </ref>. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. The two basic parallel architectures that have emerged from the parallel database area work are the shared-nothing model and the shared-everything model [Bhi88]. Both models capitalize on parallel I/O features.
Reference: [Bhi88] <author> A. Bhide, </author> <title> "An Analysis of Three Transaction Processing Architectures," </title> <booktitle> Proc. of the Very Large Database Conference, </booktitle> <year> 1988, </year> <pages> 339-350. </pages>
Reference-contexts: Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. The two basic parallel architectures that have emerged from the parallel database area work are the shared-nothing model and the shared-everything model <ref> [Bhi88] </ref>. Both models capitalize on parallel I/O features. With the shared-nothing model, each processor has its own memory and its own secondary storage. Processors communicate via message passing. The main advantage of such a system is its scalability. <p> We examine the effect that different u values (0.2% - 2%) have on our two partitioning schemes under both query models. 4.3 Simulation Queueing Model Our queueing model for the simulation of a shared-everything multiprocessor architecture is similar to the one in <ref> [Bhi88] </ref>. Figure 5 (a) shows our simulation queueing model while Figure 5 (b) shows the steps in processing a query.
Reference: [CABK88] <author> G. Copeland, W. Alexander, E. Boughter and T. Keller, </author> <title> "Data Placement in Bubba," </title> <booktitle> Proc. of ACM SIGMOD Conference, </booktitle> <month> May </month> <year> 1988, </year> <pages> 99-108. </pages>
Reference: [CEMW90] <author> J. Cringean, R. England, G. Manson and P. Willett, </author> <title> "Parallel Text Searching in Serial Files Using a Processor Farm," </title> <booktitle> Proc. of ACM SIGIR Conference, </booktitle> <year> 1990, </year> <pages> 413-428. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research <ref> [CEMW90, PW87, PRW88, Ras91, SB88] </ref>. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years [BF87, DGGHKM86, KTM83, Omi91, OL89]. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. <p> In section 5, we discuss the performance results from our simulation under a variety of parameter values and make some concluding remarks in section 6. 2 Previous work There have been a number of papers dealing with multiprocessor systems for information retrieval <ref> [CEMW90, SB88, PW87, PRW88] </ref>, which have typically followed the shared-nothing architecture approach. Some have included work on the Connection Machine [Sta90, STW89], on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89].
Reference: [DGGHKM86] <author> D. DeWitt, R. Gerber, G. Graefe, M. Heytens, K. Kumar and M. Muralikrishna, </author> <title> "GAMMA A High Performance Dataflow Database Machine," </title> <booktitle> Proc. of Very Large Database Conference, </booktitle> <year> 1986, </year> <pages> 228-237. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research [CEMW90, PW87, PRW88, Ras91, SB88]. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years <ref> [BF87, DGGHKM86, KTM83, Omi91, OL89] </ref>. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. The two basic parallel architectures that have emerged from the parallel database area work are the shared-nothing model and the shared-everything model [Bhi88]. Both models capitalize on parallel I/O features.
Reference: [Fed87] <author> J. Fedorowicz, </author> <title> "Database Performance Evaluation in an Indexed File Environment," </title> <journal> ACM TODS, </journal> <volume> 12, 1, </volume> <month> March </month> <year> 1987, </year> <pages> 85-110. </pages>
Reference-contexts: It is also recognized that inverted files will be necessary for multiprocessor implementations of information retrieval systems [Sto87]. The typical inverted file system consists of three files: the Index File, the Posting File and the Document File <ref> [Fed87] </ref>. The Index File is an ordered list of all the terms (or keywords) that have been used to index a collection of documents. In other words these terms provide access to the Document File records. An entry in the Index File consists of one access term and two fields.
Reference: [FS91] <author> O. Frieder and H. Siegelmann, </author> <title> "On the Allocation of Documents in Multiprocessor Information Retrieval Systems," </title> <booktitle> Proc. of ACM SIGIR Conference, </booktitle> <year> 1991, </year> <pages> 230-239. </pages>
Reference-contexts: They also present companion search and retrieval algorithms for their partitioning schemes. They provide timing equations to evaluate their schemes. The use of inverted files is not discussed in this work. In <ref> [FS91] </ref>, the authors consider a shared-nothing architecture as well and are concerned with data placement in the context of reducing the total processing time. They discuss the problem of document allocation for a multiprocessor information retrieval system.
Reference: [GD90] <author> S. Ghandeharizadeh and D. J. DeWitt, </author> <title> "A Multiuser Performance Analysis of Alternative Declustering Strategies," </title> <booktitle> Proc. of IEEE Data Engineering Conference, </booktitle> <year> 1990, </year> <pages> 466-475. </pages>
Reference: [KGP89] <author> R. H. Katz, G. A. Gibson and D. A. Patterson, </author> <title> "Disk System Architectures for High Performance Computing", </title> <journal> Proc. of the IEEE, </journal> <volume> Vol. 77, No. 12, </volume> <year> 1989, </year> <pages> 1842-1858. </pages>
Reference-contexts: Multiple-disk I/O systems (also called Disk Arrays) can be distinguished by arm movement and rotation synchronization and degree of interleaving <ref> [KGP89] </ref>. There are three possible ways to structure a mutiple-disk I/O system, i.e., a synchronous disk array, an asynchronous disk array, and an independent disk array. In a synchronous disk array, all disks are synchronized with respect to spindle rotation and arm movement.
Reference: [KTM83] <author> M. Kitsuregawa, H. Tanaka and T. Moto-Oka, </author> <title> "Application of Hash to Database Machine and its Architecture," </title> <journal> New Generation Computing, </journal> <volume> 1, 1, </volume> <year> 1983, </year> <pages> 63-74. 21 </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research [CEMW90, PW87, PRW88, Ras91, SB88]. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years <ref> [BF87, DGGHKM86, KTM83, Omi91, OL89] </ref>. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. The two basic parallel architectures that have emerged from the parallel database area work are the shared-nothing model and the shared-everything model [Bhi88]. Both models capitalize on parallel I/O features.
Reference: [Omi91] <author> E. Omiecinski, </author> <title> "Performance Analysis of a Load Balancing Hash-Join Algorithm for a Shared Memory Multiprocessor," </title> <booktitle> Proc. of Very Large Database Conference, </booktitle> <month> September </month> <year> 1991, </year> <pages> 375-385. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research [CEMW90, PW87, PRW88, Ras91, SB88]. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years <ref> [BF87, DGGHKM86, KTM83, Omi91, OL89] </ref>. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. The two basic parallel architectures that have emerged from the parallel database area work are the shared-nothing model and the shared-everything model [Bhi88]. Both models capitalize on parallel I/O features.
Reference: [OL89] <author> E. Omiecinski and E. Lin, </author> <title> "Hash-Based and Index-Based Join Algorithms for Cube and Ring Connected Multicomputers," </title> <journal> IEEE Trans. on Knowledge and Data Eng., </journal> <volume> 1, 3, </volume> <month> Septem-ber </month> <year> 1989, </year> <pages> 329-342. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research [CEMW90, PW87, PRW88, Ras91, SB88]. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years <ref> [BF87, DGGHKM86, KTM83, Omi91, OL89] </ref>. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. The two basic parallel architectures that have emerged from the parallel database area work are the shared-nothing model and the shared-everything model [Bhi88]. Both models capitalize on parallel I/O features.
Reference: [PW87] <author> C. Pogue and P. Willett, </author> <title> "Use of Text Signatures for Document Retrieval in a Highly Parallel Environment," </title> <journal> Parallel Computing, </journal> <volume> 4, </volume> <month> June </month> <year> 1987, </year> <pages> 259-268. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research <ref> [CEMW90, PW87, PRW88, Ras91, SB88] </ref>. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years [BF87, DGGHKM86, KTM83, Omi91, OL89]. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. <p> In section 5, we discuss the performance results from our simulation under a variety of parameter values and make some concluding remarks in section 6. 2 Previous work There have been a number of papers dealing with multiprocessor systems for information retrieval <ref> [CEMW90, SB88, PW87, PRW88] </ref>, which have typically followed the shared-nothing architecture approach. Some have included work on the Connection Machine [Sta90, STW89], on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89]. <p> Some have included work on the Connection Machine [Sta90, STW89], on the Distributed Array Processor <ref> [PW87, PRW88] </ref> and on hypercube systems [Sha89]. The organization of the data and in some cases its placement on disk were the prime concern in order to reduce retrieval time. With regard to the Connection Machine, we will look at two previous efforts [Sta90, STW89].
Reference: [PRW88] <author> C. Pogue, E. Rasmussen and P. Willett, </author> <title> "Searching and Clustering of Databases Using the ICL Distributed Array Processor," </title> <journal> Parallel Computing, </journal> <volume> 8, </volume> <month> October </month> <year> 1988, </year> <pages> 399-407. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research <ref> [CEMW90, PW87, PRW88, Ras91, SB88] </ref>. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years [BF87, DGGHKM86, KTM83, Omi91, OL89]. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. <p> In section 5, we discuss the performance results from our simulation under a variety of parameter values and make some concluding remarks in section 6. 2 Previous work There have been a number of papers dealing with multiprocessor systems for information retrieval <ref> [CEMW90, SB88, PW87, PRW88] </ref>, which have typically followed the shared-nothing architecture approach. Some have included work on the Connection Machine [Sta90, STW89], on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89]. <p> Some have included work on the Connection Machine [Sta90, STW89], on the Distributed Array Processor <ref> [PW87, PRW88] </ref> and on hypercube systems [Sha89]. The organization of the data and in some cases its placement on disk were the prime concern in order to reduce retrieval time. With regard to the Connection Machine, we will look at two previous efforts [Sta90, STW89].
Reference: [Ras91] <author> E. M. Rasmussen, </author> <title> "Introduction: </title> <booktitle> Parallel Processing and Information Retrieval", Information Processing and Management, </booktitle> <publisher> Pergamin Press, </publisher> <pages> 27, 4, </pages> <year> 1991, </year> <pages> 255-263. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research <ref> [CEMW90, PW87, PRW88, Ras91, SB88] </ref>. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years [BF87, DGGHKM86, KTM83, Omi91, OL89]. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability.
Reference: [RB89] <author> A. L. Narasimha Reddy and P Banerjee, </author> <title> "An Evaluation of Multiple-Disk I/O Systems", </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. 38, No. 12, </volume> <month> December </month> <year> 1989, </year> <pages> 1680-1690. </pages>
Reference-contexts: Thus, I/O parallelism of the independent disk array is obtained from application level software. It is also known to be appropriate for application domains with large numbers of small independent I/O requests, such as on-line transaction processing <ref> [RB89] </ref>. In our work, we consider the independent multiple-disk I/O system since it might be well suited for an information retrieval system. As previously mentioned, multiprocessor systems are utilizing multiple disks that can be accessed in parallel for a high performance I/O capability.
Reference: [SB88] <author> G. Salton and C. Buckley, </author> <title> "Parallel Text Search Methods," </title> <journal> CACM, </journal> <volume> 31, 2, </volume> <month> February </month> <year> 1988, </year> <pages> 202-215. </pages>
Reference-contexts: 1 Introduction Applying multiprocessor machines to the information retrieval area has become an active topic of research <ref> [CEMW90, PW87, PRW88, Ras91, SB88] </ref>. The use of multiprocessor machines in the database research area has produced considerable results within the last ten years [BF87, DGGHKM86, KTM83, Omi91, OL89]. Besides having parallel CPUs it is also paramount to provide a parallel I/O capability. <p> In section 5, we discuss the performance results from our simulation under a variety of parameter values and make some concluding remarks in section 6. 2 Previous work There have been a number of papers dealing with multiprocessor systems for information retrieval <ref> [CEMW90, SB88, PW87, PRW88] </ref>, which have typically followed the shared-nothing architecture approach. Some have included work on the Connection Machine [Sta90, STW89], on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89].
Reference: [SM83] <author> G. Salton and M. McGill, </author> <title> Introduction to Modern Information Retrieval, </title> <publisher> McGraw Hill, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: The shared-everything system is advocated because of its 1 adaptability to processor load balancing. For a variation to the shared-nothing system, we might use a shared-everything machine for each node. It is typical for an information retrieval system on a serial machine to use an inverted file system <ref> [SM83] </ref>. It is also recognized that inverted files will be necessary for multiprocessor implementations of information retrieval systems [Sto87]. The typical inverted file system consists of three files: the Index File, the Posting File and the Document File [Fed87]. <p> constant The effect of these heuristic load balancing schemes will be observed in our simulation. 4 Simulation Model 4.1 Database Model When the contents of the indexed file consists of natural-language text or terms (keywords), the distribution of postings per access term has been shown to approximately follow Zipf's law <ref> [SM83] </ref>. That is, there are a few access terms (with low ranks) that are used more frequently in a document record, and many terms (with high ranks) that are assigned to only a few document records.
Reference: [Sha89] <author> R. Sharma, </author> <title> "A Generic Machine for Parallel Information Retrieval," </title> <booktitle> Information Processing and Management, </booktitle> <publisher> Pergamon Press, </publisher> <pages> 25, 3, </pages> <year> 1989, </year> <pages> 223-235. </pages>
Reference-contexts: Some have included work on the Connection Machine [Sta90, STW89], on the Distributed Array Processor [PW87, PRW88] and on hypercube systems <ref> [Sha89] </ref>. The organization of the data and in some cases its placement on disk were the prime concern in order to reduce retrieval time. With regard to the Connection Machine, we will look at two previous efforts [Sta90, STW89]. The Connection Machine is an example of a distributed memory architecture. <p> The performance results of their approach, i.e., building the file and data retrieval, are quite good but they only consider a main memory resident file system. Hence no I/O cost is included. In <ref> [Sha89] </ref>, a shared-nothing architecture is proposed, based on a hypercube network interconnection scheme, for information retrieval. It is assumed that the data is clustered by some method and the clusters are partitioned across the nodes, i.e., processors.
Reference: [Sta90] <author> C. Stanfill, </author> <title> "Partitioned Posting Files: A Parallel Inverted File Structure for Information Retrieval," </title> <booktitle> Proc. of ACM SIGIR Conference, </booktitle> <year> 1990, </year> <pages> 413-428. </pages>
Reference-contexts: Some have included work on the Connection Machine <ref> [Sta90, STW89] </ref>, on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89]. The organization of the data and in some cases its placement on disk were the prime concern in order to reduce retrieval time. <p> <ref> [Sta90, STW89] </ref>, on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89]. The organization of the data and in some cases its placement on disk were the prime concern in order to reduce retrieval time. With regard to the Connection Machine, we will look at two previous efforts [Sta90, STW89]. The Connection Machine is an example of a distributed memory architecture. It is not quite a shared-nothing system since a disk is not assigned to a single processor. It also falls within the SIMD category, i.e., single instruction stream and multiple data stream. <p> The problem encountered is an I/O load imbalance that can decrease the disk utilization dramatically. The use of shared disk queues is suggested but only a brief comment is made as to the effectiveness of such an approach. In <ref> [Sta90] </ref>, the authors improve on their previous approach by partitioning the Posting File in order to reduce the amount of interprocessor communication at query execution time. <p> The score of documents is determined by the weight assigned to the terms in their documents. Since this mailbox is stored in the memory of only one processor, incrementing the mailbox most typically incurs interprocessor communication, which is costly for their algorithm <ref> [Sta90] </ref>. One way to eliminate the interprocessor communication is to store the 3 posting file by document id. With this approach, the mailbox for a document and its posting entries will be on the same processor. <p> Thus, additional I/O may be performed. To control this problem, they present the idea of Segmented Posting Files <ref> [Sta90] </ref>. In a Segmented Posting File the entries are partitioned by term id across the processors. This helps remedy the misalignment problem. Efficiently updating such a structure does pose some problems since sorting and merging is used.
Reference: [STW89] <author> C. Stanfil, R Thau and D. Waltz, </author> <title> "A Parallel Indexed Algorithm for Information Retrieval," </title> <booktitle> Proc. of ACM SIGIR Conference, </booktitle> <year> 1989, </year> <pages> 88-97. </pages>
Reference-contexts: Some have included work on the Connection Machine <ref> [Sta90, STW89] </ref>, on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89]. The organization of the data and in some cases its placement on disk were the prime concern in order to reduce retrieval time. <p> <ref> [Sta90, STW89] </ref>, on the Distributed Array Processor [PW87, PRW88] and on hypercube systems [Sha89]. The organization of the data and in some cases its placement on disk were the prime concern in order to reduce retrieval time. With regard to the Connection Machine, we will look at two previous efforts [Sta90, STW89]. The Connection Machine is an example of a distributed memory architecture. It is not quite a shared-nothing system since a disk is not assigned to a single processor. It also falls within the SIMD category, i.e., single instruction stream and multiple data stream. <p> It also falls within the SIMD category, i.e., single instruction stream and multiple data stream. So, all processors (unless they are inhibited) will execute the same instruction at the same time but on different data. In <ref> [STW89] </ref>, the authors propose a parallel document ranking algorithm based on inverted indexes. The algorithm is evaluated via analytical and simulation techniques. In [STW89], the authors are mainly concerned with a main memory resident database but do present brief results about a disk resident database. <p> So, all processors (unless they are inhibited) will execute the same instruction at the same time but on different data. In <ref> [STW89] </ref>, the authors propose a parallel document ranking algorithm based on inverted indexes. The algorithm is evaluated via analytical and simulation techniques. In [STW89], the authors are mainly concerned with a main memory resident database but do present brief results about a disk resident database. The conclusion is that within the Posting File, the entries for a word should be stored on disk blocks of consecutive disk drives. <p> With the partitioned Posting File, the interprocessor communication is performed when the database is constructed, so that no data movement is needed at query execution time. In their previous scheme <ref> [STW89] </ref>, adjacent entries in the Posting File are stored in the memory of adjacent processors. In addition, a mailbox is assigned to each document, which accumulates the score of a document in order to rank selected documents. <p> In [TG93], the authors assume the uniform term distribution with the fraction parameter for the query model, but <ref> [STW89] </ref> models it by assuming that the probability of a term occuring in a query is proportional to that term's frequency in the database as a whole. In our simulation, we use these two different query models, i.e., a uniform query model and a skew query model.
Reference: [Sto87] <author> H. Stone, </author> <title> "Parallel Querying of Large Databases: A Case Study," </title> <journal> IEEE Computer, </journal> <volume> 20, 10, </volume> <month> October </month> <year> 1987, </year> <pages> 11-21. </pages>
Reference-contexts: It is typical for an information retrieval system on a serial machine to use an inverted file system [SM83]. It is also recognized that inverted files will be necessary for multiprocessor implementations of information retrieval systems <ref> [Sto87] </ref>. The typical inverted file system consists of three files: the Index File, the Posting File and the Document File [Fed87]. The Index File is an ordered list of all the terms (or keywords) that have been used to index a collection of documents.
Reference: [TG93] <author> A. Tomasic and H. Garcia-Molina, </author> <title> "Performance of Inverted Indices in Distributed Text Document Retrieval Systems", </title> <note> to appear in Proc. of Parallel and Distributed Information Systems, 1993. 22 </note>
Reference-contexts: They try to distribute the data as evenly as possible among the processors and at the same time they try to minimize the interprocessor communication time. They analyze the performance of their algorithms via simulation. In <ref> [TG93] </ref>, the performance impact on parallel query processing of various distributed index organizations is studied while varying the physical hardware configuration and several parameter values, such as disk bandwidth, I/O bus bandwidth, and network bandwidth. They discuss parallel query processing strategies and propose some optimization heuristics in query processing. <p> These different levels of data skew will show the effect that the skew has on the I/O load of each disk which holds the partitioned inverted file. 4.2 Query Model To the best of our knowledge, there is no agreement about the term distribution in user queries. In <ref> [TG93] </ref>, the authors assume the uniform term distribution with the fraction parameter for the query model, but [STW89] models it by assuming that the probability of a term occuring in a query is proportional to that term's frequency in the database as a whole.
References-found: 23

