URL: http://www.cs.iastate.edu/~rlutz/publications/icre96.ps
Refering-URL: http://www.cs.iastate.edu/~rlutz/homepage.html
Root-URL: http://www.cs.iastate.edu
Author: R. Lutz and Robert M. Woodhouse 
Keyword: Analysis  
Address: Pasadena, CA 91109  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  
Note: Robyn  
Abstract: Experience Report: Contributions of SFMEA to Requirements Abstract This experience report describes the lessons learned from the use of Software Failure Modes and Effects Analysis (SFMEA) for requirements analysis of critical spacecraft software. The SFMEA process was found to be successful in identifying some ambiguous, inconsistent, and missing requirements. More importantly, the SFMEA process, followed by a backward analysis somewhat similar to Fault Tree Analysis (FTA), identified four significant, unresolved requirements issues. These issues involved complex system interfaces and unanticipated dependencies. Our results challenge some current views on the limitations of SFMEA and suggest that recent efforts by researchers to integrate SFMEA with a broader FTA approach have merit. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. S. Cha, N. G. Leveson, and T. J. Shimeall, </author> <title> "Safety Verification in Murphy Using Fault Tree Analysis," </title> <booktitle> Proc 10th Int Conf on S/W Eng, Apr 1988, Singapore, </booktitle> <pages> 377-386. </pages>
Reference-contexts: A Fault Tree Analysis, on the other hand, takes a known fault or hazard as its root and works backward to determine the possible causes <ref> [1] </ref>. Another difference between our backward search and FTA is that Software FTA is usually applied to code, whereas the backward search here is applied to software requirements. Since Fault Tree Analysis has been previously documented in detail, no further description is provided here [6].
Reference: [2] <author> P. Fenelon and J. A. McDermid, </author> <title> "An Integrated Tool Set for Software Safety Analysis," </title> <journal> JSS, </journal> <volume> 1993; 21: </volume> <pages> 279-290. </pages>
Reference-contexts: software?") then identified a combination of events or unexpected interactions that could lead to the failure mode postulated in the SFMEA. 2 Our results indicate that recent work to integrate the forward search for effects (typical of SFMEA) and the backward search for contributing causes (typical of FTA) has merit <ref> [2, 8, 9] </ref>. For example, a recent paper by Maier describes the use of a fault-tree based hazard analysis to derive safety requirements for a robot's control software. FMECA (Failure Modes, Effect, and Criticality Analysis) is performed on the documented software requirements.
Reference: [3] <author> J. R. Fragola and J. F. Spahn, </author> <title> "The Software Error Effects Analyis; A Qualitative Design Tool," </title> <booktitle> IEEE Symp on Comp S/W Rel , 1973, </booktitle> <pages> 90-93. </pages>
Reference-contexts: Software Failure Modes and Effects Analysis is an extension of the hardware Failure Modes and Effects Analysis (FMEA). The procedure for performing hardware FMEA has been standardized [10]. There is no comparable standard for performing SFMEA, although its use is well-documented <ref> [3, 11] </ref>. For ex 1 ample, a technique similar to SFMEA, called Soft--ware Error Effects Analysis (SEEA), was used in the development of the rendezvous and berthing software for the Columbus Free Flyer. For critical software, a SEEA was required [14].
Reference: [4] <institution> IEEE Std Glossary of S/W Eng Terminology, IEEE Std 610.12-1990. </institution>
Reference-contexts: A fault is given the standard definition here of being either "a defect in a hardware device or component" or "an incorrect step, process, or data definition in a computer program" <ref> [4] </ref>. Those faults which can cause power loss, excessive temperature, propellant tank overpres-sure, interruption of uplink commandability, or loss of downlinked scientific and engineering telemetry are detected and handled by onboard software. <p> A failure mode is defined to be "the physical or functional manifestation of a failure." A failure is defined to be "the inability of a system or component to perform its required functions within specified performance requirements limits" <ref> [4] </ref>. Software Failure Modes and Effects Analysis is an extension of the hardware Failure Modes and Effects Analysis (FMEA). The procedure for performing hardware FMEA has been standardized [10]. There is no comparable standard for performing SFMEA, although its use is well-documented [3, 11].
Reference: [5] <author> L. Lamport and N. Lynch, </author> <title> "Distributed Computing Models and Methods," Formal Models and Semantics, Vol. B, </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: Additional description is available in [12]. Detailed descriptions of backward search are available in [6]. In a message-passing model of a distributed system, two kinds of failures are generally represented: communication failures and process failures <ref> [5] </ref>. In accordance with this model, two kinds of failures are analyzed in a SFMEA for each software process. To assist in the analysis of any possible failures of the software, two tables are constructed: a Data Table and an Events Table. A Data Table involves communication failures.
Reference: [6] <author> N. Leveson, Safeware, </author> <title> System Safety and Computers, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Another difference between our backward search and FTA is that Software FTA is usually applied to code, whereas the backward search here is applied to software requirements. Since Fault Tree Analysis has been previously documented in detail, no further description is provided here <ref> [6] </ref>. Note also that the backward search in this requirements analysis evaluates only the "possibility" of occurrence, not the likelihood. At the requirements phase of development there is insufficient knowledge to provide any numerical measurement of the probability of occurrence. 2.1. <p> A recent paper by McDermid and Pumfrey describes a technique for software safety analysis based on a structured approach to the "imaginative anticipation of hazards" [9]. Based on the HAZOP approach <ref> [6] </ref>, their work concentrates on information flows and develops sets of guide words to prompt consideration of hypothetical failures. <p> The SFMEA Process This section describes the process by which the SFMEA (the "Forward Search" in Fig. 1) was performed on the spacecraft software modules. Additional description is available in [12]. Detailed descriptions of backward search are available in <ref> [6] </ref>. In a message-passing model of a distributed system, two kinds of failures are generally represented: communication failures and process failures [5]. In accordance with this model, two kinds of failures are analyzed in a SFMEA for each software process.
Reference: [7] <author> R. Lutz, </author> <title> "Analyzing Software Requirements Errors in Safety-Critical, Embedded Systems," </title> <journal> JSS, </journal> <note> to appear. </note>
Reference-contexts: A clear, unambiguous, and complete document minimizes the possibility of misunderstanding at this juncture. The SFMEA assisted in this effort. 3. Error removal. Requirements errors, especially interface requirements errors, have historically been a source of persistent errors during spacecraft development (sometimes escaping detection until system testing) <ref> [7] </ref>. Often these requirements errors involve unanticipated failure modes or interface dependencies that are difficult to detect. The SFMEA was able to identify some such errors prior to design decisions being made, saving subsequent time and effort. SFMEA has some well-known limitations and disadvantages that were confirmed by our experience.
Reference: [8] <author> T. Maier, </author> <title> "FMEA and FTA To Support Safe Design of Embedded Software in Safety-Critical Systems," CSR 12th Annual Wkshp on Safety and Rel of S/W Based Sys, </title> <booktitle> 1995, </booktitle> <address> Bruge, Belgium. </address>
Reference-contexts: software?") then identified a combination of events or unexpected interactions that could lead to the failure mode postulated in the SFMEA. 2 Our results indicate that recent work to integrate the forward search for effects (typical of SFMEA) and the backward search for contributing causes (typical of FTA) has merit <ref> [2, 8, 9] </ref>. For example, a recent paper by Maier describes the use of a fault-tree based hazard analysis to derive safety requirements for a robot's control software. FMECA (Failure Modes, Effect, and Criticality Analysis) is performed on the documented software requirements. <p> FMECA (Failure Modes, Effect, and Criticality Analysis) is performed on the documented software requirements. Maier finds that the major benefit of the FMECA lies in its being a preparatory activity to fault tree construction. <ref> [8] </ref>. A recent paper by McDermid and Pumfrey describes a technique for software safety analysis based on a structured approach to the "imaginative anticipation of hazards" [9].
Reference: [9] <author> J. A. McDermid and D. J. Pumfrey, </author> <title> "A Development of Hazard Analysis To Aid Software Design," </title> <booktitle> Proc of COMPASS '94 , Jun 27-30, 1994, </booktitle> <address> Gaithers-burg, MD, </address> <pages> pp. 17-25. </pages>
Reference-contexts: software?") then identified a combination of events or unexpected interactions that could lead to the failure mode postulated in the SFMEA. 2 Our results indicate that recent work to integrate the forward search for effects (typical of SFMEA) and the backward search for contributing causes (typical of FTA) has merit <ref> [2, 8, 9] </ref>. For example, a recent paper by Maier describes the use of a fault-tree based hazard analysis to derive safety requirements for a robot's control software. FMECA (Failure Modes, Effect, and Criticality Analysis) is performed on the documented software requirements. <p> Maier finds that the major benefit of the FMECA lies in its being a preparatory activity to fault tree construction. [8]. A recent paper by McDermid and Pumfrey describes a technique for software safety analysis based on a structured approach to the "imaginative anticipation of hazards" <ref> [9] </ref>. Based on the HAZOP approach [6], their work concentrates on information flows and develops sets of guide words to prompt consideration of hypothetical failures.
Reference: [10] <editor> Procedures for Performing a Failure Mode, </editor> <title> Effects and Criticality Analysis, </title> <address> MIL-STD-1629A, </address> <month> 24 Nov </month> <year> 1980. </year>
Reference-contexts: Software Failure Modes and Effects Analysis is an extension of the hardware Failure Modes and Effects Analysis (FMEA). The procedure for performing hardware FMEA has been standardized <ref> [10] </ref>. There is no comparable standard for performing SFMEA, although its use is well-documented [3, 11]. For ex 1 ample, a technique similar to SFMEA, called Soft--ware Error Effects Analysis (SEEA), was used in the development of the rendezvous and berthing software for the Columbus Free Flyer.
Reference: [11] <author> D. J. Reifer, </author> <title> "Software Failure Modes and Effects Analysis," </title> <journal> IEEE Trans on Rel , R-28, </journal> <volume> 3, </volume> <month> Aug </month> <year> 1979, </year> <month> 247-249. </month> <title> [12] "Software Failure Modes & Effects Analysis," Software Product Assurance Handbook . JPL D-8642, </title> <year> 1995. </year>
Reference-contexts: Software Failure Modes and Effects Analysis is an extension of the hardware Failure Modes and Effects Analysis (FMEA). The procedure for performing hardware FMEA has been standardized [10]. There is no comparable standard for performing SFMEA, although its use is well-documented <ref> [3, 11] </ref>. For ex 1 ample, a technique similar to SFMEA, called Soft--ware Error Effects Analysis (SEEA), was used in the development of the rendezvous and berthing software for the Columbus Free Flyer. For critical software, a SEEA was required [14].
Reference: [13] <institution> System Safety Society, </institution> <note> System Safety Analysis Handbook , July 1993. </note>
Reference-contexts: For critical software, a SEEA was required [14]. The System Safety Analysis Handbook provides a brief, non-procedural description of SFMEA <ref> [13] </ref>. A more detailed description of the SFMEA process as applied to our project appears in Section 3. We embedded the SFMEA in a two-step requirements analysis process (Fig. 1): 1.
Reference: [14] <author> J. Wunram, </author> <title> "A Strategy for Identification and Development of Safety Critical Software Embedded in Complex Space Systems," </title> <address> IAA 90-557, </address> <pages> pp. 35-51. 8 </pages>
Reference-contexts: For ex 1 ample, a technique similar to SFMEA, called Soft--ware Error Effects Analysis (SEEA), was used in the development of the rendezvous and berthing software for the Columbus Free Flyer. For critical software, a SEEA was required <ref> [14] </ref>. The System Safety Analysis Handbook provides a brief, non-procedural description of SFMEA [13]. A more detailed description of the SFMEA process as applied to our project appears in Section 3. We embedded the SFMEA in a two-step requirements analysis process (Fig. 1): 1.
References-found: 13

