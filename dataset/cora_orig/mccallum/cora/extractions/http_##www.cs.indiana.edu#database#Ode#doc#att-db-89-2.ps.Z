URL: http://www.cs.indiana.edu/database/Ode/doc/att-db-89-2.ps.Z
Refering-URL: http://www.cs.indiana.edu/database/Ode/doc/
Root-URL: http://www.cs.indiana.edu
Title: ODE (Object Database and Environment): The Language and the Data Model  
Author: R. Agrawal N. H. Gehani 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract: ODE is a database system and environment based on the object paradigm. It offers one integrated data model for both database and general purpose manipulation. The database is defined, queried and manipulated in the database programming language O++ which is based on C++. O++ borrows and extends the object definition facility of C++, called the class. Classes support data encapsulation and multiple inheritance. We provide facilities for creating persistent and versioned objects, defining sets, and iterating over sets and clusters of persistent objects. We also provide facilities to associate constraints and triggers with objects. This paper presents the linguistic facilities provided in O++ and the data model it supports. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ANSI C, </author> <title> American National Standard for Information SystemsProgramming Language C, </title> , <year> 1989. </year>
Reference-contexts: of a persistent object is syntactically similar to the creation of a volatile object: stockitem *sip; ... sip = new stockitem ("512 dram", 0.05, 7500, 15000, 5.00, 15, "at&t", "berkeley hts, nj"); - 6 - syntactically the keyword persistent is a type qualifier (like const and volatile in ANSI C <ref> [1] </ref>) and not a storage specifier, even though it refers to a type of storage. Also, psip is allocated on stack (not in the persistent store), but pnew allocates the stockitem object in persistent store and its id (returned by pnew) is saved in psip.
Reference: [2] <author> R. Agrawal, </author> <title> ``Alpha: An Extension of Relational Algebra to Express a Class of Recursive Queries'', </title> <booktitle> Proc. IEEE 3rd Int'l Conf. Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> Feb. </month> <year> 1987, </year> <pages> 580-590. </pages>
Reference-contexts: O++ alleviates these problems by providing iterators that allow sets of objects to be manipulated almost as declaratively as the database query languages based on relational calculus. The set iteration facility of O++ also allows the expression of recursive queries <ref> [2, 9] </ref>, a major concern in deductive databases. The iterators can be qualified with clauses that specify iteration subsets and order, which can be used to advantage in query optimization. Many of the O++ facilities can be found in other languages and systems. <p> %g"n", incomep/np, incomed/nd, incomef/nf); 3.2 Fixpoint Queries Aho and Ullman [5] have shown that the least fixpoint operator is an essential addition to the relational query languages, and considerable research has been devoted to developing notations for expressing least fixpoint queries and designing algorithms for evaluating them (see, for example, <ref> [2, 9] </ref>). When iterating over a set or a cluster, we allow iteration to also be performed over the elements that are added during the iteration, which allows the expression of recursive queries [5].
Reference: [3] <author> R. Agrawal and N. H. Gehani, </author> <title> ``Rationale for the Design of Persistence and Query Processing Facilities in the Database Programming Language O++'', </title> <booktitle> 2nd Int'l Workshop on Database Programming Languages, </booktitle> <address> Portland, OR, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Although we will occasionally refer to transactions, we do not discuss them in this paper. For the purpose of this paper, any O++ program that interacts with the database will be considered to be a single transaction. The rationale behind the design of O++ is discussed in <ref> [3] </ref>. The organization of the rest of the paper is as follows. Section 2 describes the data structuring facilities provided in O++. <p> This paper presented the linguistic facilities for specifying and accessing data provided in O++. As mentioned, the rationale for our design decisions is discussed in <ref> [3] </ref>. We have begun a prototype implementation of O++, and we hope to report on the implementation strategies and experiences in the near future. 8. ACKNOWLEDGMENTS The persistence model was influenced by discussions we had with Steve Buroff and Mike Carey.
Reference: [4] <author> R. Agrawal, S. J. Buroff, N. H. Gehani and D. Shasha, </author> <title> ``Object Versioning in Ode'', </title> <booktitle> Proc. IEEE 7th Int'l Conf. Data Engineering, </booktitle> <address> Tokyo, Japan, </address> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Consequently, constraints can be used to specialize classes, as in __________________ 15. In this paper, we will only describe the linear versioning mechanism. O++ allows the version graph of an object to be a tree; see <ref> [4] </ref> for details. 16. Implementations may choose not to allow the deletion of specific versions. 17.
Reference: [5] <author> A. V. Aho and J. D. Ullman, </author> <title> ``Universality of Data Retrieval Languages'', </title> <booktitle> Proc. 6th ACM Symp. Principles of Programming Languages, </booktitle> <address> San-Antonio, Texas, </address> <month> Jan. </month> <year> 1979, </year> <pages> 110-120. </pages>
Reference-contexts: 0; forall p in person - incomep += p-&gt;income (); np++; if (p is persistent student *) - incomes += p-&gt;income (); ns++;- else if (p is persistent faculty *) - incomef += p-&gt;income (); nf++;- - printf ("%g %g %g"n", incomep/np, incomed/nd, incomef/nf); 3.2 Fixpoint Queries Aho and Ullman <ref> [5] </ref> have shown that the least fixpoint operator is an essential addition to the relational query languages, and considerable research has been devoted to developing notations for expressing least fixpoint queries and designing algorithms for evaluating them (see, for example, [2, 9]). <p> When iterating over a set or a cluster, we allow iteration to also be performed over the elements that are added during the iteration, which allows the expression of recursive queries <ref> [5] </ref>.
Reference: [6] <author> A. Albano, L. Cardelli and R. Orsini, </author> <title> ``Galileo: A Strongly Typed Interactive Conceptual Language'', </title> <journal> ACM Trans. Database Syst. </journal> <volume> 10, </volume> <month> 2 (June </month> <year> 1985), </year> <pages> 230-260. </pages>
Reference-contexts: O++ also shares the concerns of the persistent programming languages, such as <ref> [6, 16, 38, 40-42] </ref>; persistence is a property of object instances and not types, and persistent objects are accessed and manipulated in much the same way as volatile objects.
Reference: [7] <author> T. Andrews and C. Harris, </author> <title> ``Combining Language and Database Advances in an Object-Oriented development Environment'', </title> <booktitle> Proc. OOPSLA '87, </booktitle> <address> Orlando, Florida, </address> <month> Oct. </month> <year> 1987, </year> <pages> 430-440. </pages>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19]. <p> O++ is related to the language E [41, 42] in that O++, like E, also uses the C++ object model and adds persistence to it. Vbase <ref> [7] </ref> and O2 [32] also seek to blend an object-oriented data model with C. In this paper, we concentrate on the data modeling and the query processing aspects of O++. We do not cover concurrency issues and some systems-oriented features such as schema evolution, authorization, security, etc. <p> Objects of such types can be volatile or persistent. Persistent objects can be allocated statically by using the storage class persistent in object definitions or they can be allocated dynamically by using the predefined db class file. Other features of E include generic classes and iterators. Vbase <ref> [7] </ref> combines an object model with C. It presents to the user two languages: the type definition language TDL for specifying classes and operations, and the C superset COP for writing methods to implement the operations. The O2 system [32] also integrates an object model with C. <p> The square brackets [ and ] indicate an optional item. The suchthat and by clauses are based on similar clauses in SQL [18] and Concurrent C [27]. Similar for loops have been provided, among others, in Pascal/R [47], Rigel [43], Plain [52] and Trellis/Owl [38] and Vbase <ref> [7] </ref>. - 9 - 3.1.1 Iterating Over Cluster Hierarchies Clusters mirror the hierarchy relationship of the corresponding types. If type x is derived from type y, then the corresponding clusters also have the same relationship. <p> When trigger conditions become true, the associated trigger action is executed. Triggers are necessary for supporting active databases, such as those used in computer integrated manufacturing, power distribution network management, air-traffic control, etc. and are found in many database systems such as POSTGRES [50], HiPAC [21], Sybase [20], Vbase <ref> [7] </ref>, and OOPS [46]. Triggers are associated with objects. There are two types of triggers: once-only (default) and perpetual (specified using the keyword perpetual). 18 A once-only trigger is automatically deactivated after the trigger has ``fired'', and it must then be reactivated explicitly if desired.
Reference: [8] <author> T. M. Atwood, </author> <title> ``An Object-Oriented DBMS for Design Support Applications'', </title> <booktitle> Proc. IEEE 1st Int'l Conf. Computer-Aided Technologies, </booktitle> <address> Montreal, Canada, </address> <month> Sept. </month> <year> 1985, </year> <pages> 299-307. </pages>
Reference-contexts: For example, database objects persist beyond the lifetime of the program creating them. Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications, that must access the past states of the database [19, 44]. <p> VERSIONING Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications that require accesses to the past states of the database [19, 44].
Reference: [9] <author> F. Bancilhon and R. Ramakrishnan, </author> <title> ``An Amateur's Introduction to Recursive Query Processing Strategies'', </title> <booktitle> Proc. ACM-SIGMOD 1986 Int'l Conf. on Management of Data, </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1986, </year> <pages> 16-52. </pages>
Reference-contexts: O++ alleviates these problems by providing iterators that allow sets of objects to be manipulated almost as declaratively as the database query languages based on relational calculus. The set iteration facility of O++ also allows the expression of recursive queries <ref> [2, 9] </ref>, a major concern in deductive databases. The iterators can be qualified with clauses that specify iteration subsets and order, which can be used to advantage in query optimization. Many of the O++ facilities can be found in other languages and systems. <p> %g"n", incomep/np, incomed/nd, incomef/nf); 3.2 Fixpoint Queries Aho and Ullman [5] have shown that the least fixpoint operator is an essential addition to the relational query languages, and considerable research has been devoted to developing notations for expressing least fixpoint queries and designing algorithms for evaluating them (see, for example, <ref> [2, 9] </ref>). When iterating over a set or a cluster, we allow iteration to also be performed over the elements that are added during the iteration, which allows the expression of recursive queries [5].
Reference: [10] <author> F. Bancilhon, T. Briggs, S. Khoshafian and P. Valduriez, </author> <title> ``FAD, a Powerful and Simple Database Language'', </title> <booktitle> Proc. 13th Int'l Conf. Very Large Data Bases, </booktitle> <address> Brighton, England, </address> <month> Sept. </month> <year> 1987, </year> <pages> 97-105. </pages>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19].
Reference: [11] <author> J. Banerjee, H. T. Chou, J. F. Garza, W. Kim, D. Woelk and N. Ballou, </author> <title> ``Data Model Issues for Object-Oriented Applications'', </title> <journal> ACM Trans. Office Information Systems 5, </journal> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 3-26. </pages>
Reference-contexts: Many of the O++ facilities can be found in other languages and systems. Our major contribution lies in providing a clean fusion of the advances in both database and programming language research within an object-oriented framework. Virtues of object-oriented database systems have been extolled elsewhere (see, for example, <ref> [11, 22, 24-26, 28, 29, 32-34] </ref>). O++ shares with these systems the goals of providing a rich type system to model complex and composite objects. <p> Here is the code to perform the above computation: 12 __________________ 10. POSTQUEL [44] allows a * to be specified after the relation name to retrieve tuples from the named relation and all relations that inherit attributes from it. Orion <ref> [11] </ref> also provides similar functionality. 11. Rigel [43] also allows multiple loop variables in its for loop. 12. One can simulate this task using C++ virtual functions, but this may require modification of existing class definitions to add appropriate functions. <p> We are assuming that we have a large, if not infinite, persistent store. Persistent store may be hierarchically organized and old versions may be flushed out to a slower medium. An implementation may impose a limit on the number of versions that can be created. 14. Orion <ref> [11] </ref> and Iris [13] also provide facilities for specific reference to a particular version and generic reference to a versioned object. - 11 - Updating a persistent object does not automatically create a new version. A new version is created explicitly by calling the macro newversion.
Reference: [12] <author> D. Batory, J. Barnett, J. Garza, K. Smith, K. Tsukuda, B. Twitchell and T. Wise, </author> <title> ``GENESIS: An Extensible Database Management System'', </title> <journal> IEEE Trans. Software Eng., </journal> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: Some extensible database projects, such as - 2 - <ref> [12, 17, 39, 44, 45, 48] </ref> also have similar goals.
Reference: [13] <author> D. Beech and B. Mahbod, </author> <title> ``Generalized Version Control in an Object-Oriented Database'', </title> <booktitle> Proc. IEEE 4th Int'l Conf. Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> Feb. </month> <year> 1988, </year> <pages> 14-22. </pages>
Reference-contexts: Persistent store may be hierarchically organized and old versions may be flushed out to a slower medium. An implementation may impose a limit on the number of versions that can be created. 14. Orion [11] and Iris <ref> [13] </ref> also provide facilities for specific reference to a particular version and generic reference to a versioned object. - 11 - Updating a persistent object does not automatically create a new version. A new version is created explicitly by calling the macro newversion.
Reference: [14] <editor> R. J. Brachman and H. J. Levesque, (ed.), </editor> <booktitle> Readings in Knowledge Representation, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1985. </year>
Reference-contexts: mechanisms which will allow the class designer or the user to respond to the violation of a constraint. - 12 - class female: public person - public: ... constraint: sex == 'f' || sex == 'F'; Such constraint-based specializations are useful in many applications, e.g., in frame-based knowledge representation systems <ref> [14] </ref>. 6. Triggers Triggers (also called alerters or monitors), like integrity constraints, monitor the database for some conditions, except that these conditions do not represent consistency violations [36]. When trigger conditions become true, the associated trigger action is executed.
Reference: [15] <author> P. Buneman and M. Atkinson, </author> <title> ``Inheritance and Persistence in Database Programming Languages'', </title> <booktitle> Proc. ACM-SIGMOD 1986 Int'l Conf. on Management of Data, </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1986, </year> <pages> 4-15. </pages>
Reference-contexts: in volatile store*/ ... proot = proot-&gt;add (p); vroot = vroot-&gt;add (v); 2.5 Clusters of Persistent Objects All persistent objects of the same type are grouped together into a cluster; the name of a cluster is the same as that of the corresponding type, that is, clusters are type extents <ref> [15] </ref>. Before creating a persistent object, the corresponding cluster must exist; it is created by invoking the create macro 6 in this program or in another program: __________________ 6.
Reference: [16] <author> L. Cardelli, </author> <title> ``Amber'', </title> <publisher> LNCS 242, </publisher> <year> 1986. </year>
Reference-contexts: O++ also shares the concerns of the persistent programming languages, such as <ref> [6, 16, 38, 40-42] </ref>; persistence is a property of object instances and not types, and persistent objects are accessed and manipulated in much the same way as volatile objects.
Reference: [17] <author> M. J. Carey, D. J. DeWitt, G. Graefe, D. M. Haight, J. E. Richardson, D. H. Schuh, E. J. Shekita and S. L. Vandenberg, </author> <title> ``The EXODUS Extensible DBMS Project: An Overview'', in Readings in Object-Oriented Database Systems, </title> <editor> S. Zdonik and D. Maier (ed.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: Some extensible database projects, such as - 2 - <ref> [12, 17, 39, 44, 45, 48] </ref> also have similar goals.
Reference: [18] <author> D. D. Chamberlin, M. M. Astrahan, K. P. Eswaran, P. P. Griffiths, R. A. Lorie, J. W. Mehl, P. Reisner and B. W. Wade, </author> <title> ``SEQUEL 2: A Unified Approach To Data Definition, Manipulation, and Control'', </title> <address> RJ 1978, </address> <institution> IBM, </institution> <month> June </month> <year> 1976. </year>
Reference-contexts: The square brackets [ and ] indicate an optional item. The suchthat and by clauses are based on similar clauses in SQL <ref> [18] </ref> and Concurrent C [27]. Similar for loops have been provided, among others, in Pascal/R [47], Rigel [43], Plain [52] and Trellis/Owl [38] and Vbase [7]. - 9 - 3.1.1 Iterating Over Cluster Hierarchies Clusters mirror the hierarchy relationship of the corresponding types.
Reference: [19] <author> G. Copeland and D. Maier, </author> <title> ``Making Smalltalk a Database System'', </title> <booktitle> Proceedings of the 1984 ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <address> Boston, Massachusetts, </address> <month> June </month> <year> 1984, </year> <pages> 316-325. </pages>
Reference-contexts: Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications, that must access the past states of the database <ref> [19, 44] </ref>. Support for active databases, such as those used in computer integrated manufacturing, power distribution network management, and air-traffic control, requires the capability to attach with objects conditions and actions that are triggered when the conditions are satisfied [21, 50]. <p> Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19]. <p> O++ is in the same spirit as the work done in designing database programming languages, such as [7, 10, 19, 37, 43, 46, 47, 49, 52]; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' <ref> [19] </ref>. O++ also shares the concerns of the persistent programming languages, such as [6, 16, 38, 40-42]; persistence is a property of object instances and not types, and persistent objects are accessed and manipulated in much the same way as volatile objects. <p> Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications that require accesses to the past states of the database <ref> [19, 44] </ref>. In ODE, all persistent objects can have versions and there is no pre-defined limit on the number of versions that an object can have. 13 The current version of an object is updatable, but old versions may be read-only depending upon the implementation.
Reference: [20] <author> M. Darnovsky and G. Bowman, </author> <title> ``TRANSACT-SQL USER'S GUIDE'', Document 3231-2.1, Sybase, </title> <publisher> Inc., </publisher> <year> 1987. </year>
Reference-contexts: When trigger conditions become true, the associated trigger action is executed. Triggers are necessary for supporting active databases, such as those used in computer integrated manufacturing, power distribution network management, air-traffic control, etc. and are found in many database systems such as POSTGRES [50], HiPAC [21], Sybase <ref> [20] </ref>, Vbase [7], and OOPS [46]. Triggers are associated with objects. There are two types of triggers: once-only (default) and perpetual (specified using the keyword perpetual). 18 A once-only trigger is automatically deactivated after the trigger has ``fired'', and it must then be reactivated explicitly if desired.
Reference: [21] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ladin, D. McCarthy, A. Rosenthal and S. Sarin, </author> <title> ``The HiPAC Project: Combining Active Databases and Timing Constraints'', </title> <booktitle> ACM-SIGMOD Record 17, </booktitle> <month> 1 (March </month> <year> 1988), </year> <pages> 51-70. </pages>
Reference-contexts: Support for active databases, such as those used in computer integrated manufacturing, power distribution network management, and air-traffic control, requires the capability to attach with objects conditions and actions that are triggered when the conditions are satisfied <ref> [21, 50] </ref>. Finally, the ability to associate constraints with objects is necessary to ensure database integrity [36]. Programming languages typically do not support persistent objects (with the exception of files) or multiple object versions, nor do they provide facilities for associating constraints and triggers with objects. <p> When trigger conditions become true, the associated trigger action is executed. Triggers are necessary for supporting active databases, such as those used in computer integrated manufacturing, power distribution network management, air-traffic control, etc. and are found in many database systems such as POSTGRES [50], HiPAC <ref> [21] </ref>, Sybase [20], Vbase [7], and OOPS [46]. Triggers are associated with objects. There are two types of triggers: once-only (default) and perpetual (specified using the keyword perpetual). 18 A once-only trigger is automatically deactivated after the trigger has ``fired'', and it must then be reactivated explicitly if desired. <p> Conceptually, trigger conditions are evaluated at the end of each transaction. Transactions representing trigger actions are executed after (but not necessarily immediately after) the triggering transaction, i.e., there is ``weak coupling'' <ref> [21] </ref> between the triggering transaction and the trigger action. If the triggering transaction is aborted, the trigger actions generated by it are aborted. __________________ 18.
Reference: [22] <author> J. Diederich and J. Milton, ``ODDESSY: </author> <title> An Object-Oriented Database Design System'', </title> <booktitle> Proc. IEEE 3rd Int'l Conf. Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> Feb. </month> <year> 1987, </year> <pages> 235-244. </pages>
Reference-contexts: Many of the O++ facilities can be found in other languages and systems. Our major contribution lies in providing a clean fusion of the advances in both database and programming language research within an object-oriented framework. Virtues of object-oriented database systems have been extolled elsewhere (see, for example, <ref> [11, 22, 24-26, 28, 29, 32-34] </ref>). O++ shares with these systems the goals of providing a rich type system to model complex and composite objects.
Reference: [23] <author> K. Dittrich and R. Lorie, </author> <title> ``Version Support for Engineering Database Systems'', </title> <type> Rep. </type> <institution> RJ4769, IBM Research Lab., </institution> <address> San Jose, California, </address> <month> July </month> <year> 1985. </year>
Reference-contexts: For example, database objects persist beyond the lifetime of the program creating them. Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications, that must access the past states of the database [19, 44]. <p> VERSIONING Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications that require accesses to the past states of the database [19, 44].
Reference: [24] <author> K. R. Dittrich, W. Gotthard and P. C. Lockemann, </author> <title> ``DAMOKLES - A Database System for Software Engineering Environments'', </title> <publisher> LNCS 244, </publisher> <year> 1987. </year>
Reference: [25] <author> A. Ege and C. A. Ellis, </author> <title> ``Design and Implementation of GORDION, an Object Base Management System'', </title> <booktitle> Proc. IEEE 3rd Int'l Conf. Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> Feb. </month> <year> 1987, </year> <pages> 226-234. </pages>
Reference: [26] <author> D. H. Fishman, D. Beech, H. P. Cate, E. C. Chow, T. Connors, J. W. Davis, N. Derrett, C. G. Hoch, W. Kent, P. Lyngbaek, B. Mahbod, M. A. Neimat, T. A. Ryan and M. C. Shan, </author> <title> ``Iris: An Object-Oriented Database System'', </title> <journal> ACM Trans. Office Information Systems 5, </journal> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 48-69. </pages>
Reference: [27] <author> N. H. Gehani and W. D. Roome, </author> <title> ``Concurrent C'', </title> <journal> SoftwarePractice & Experience 16, </journal> <volume> 9 (1986), </volume> <pages> 821-844. </pages>
Reference-contexts: The square brackets [ and ] indicate an optional item. The suchthat and by clauses are based on similar clauses in SQL [18] and Concurrent C <ref> [27] </ref>. Similar for loops have been provided, among others, in Pascal/R [47], Rigel [43], Plain [52] and Trellis/Owl [38] and Vbase [7]. - 9 - 3.1.1 Iterating Over Cluster Hierarchies Clusters mirror the hierarchy relationship of the corresponding types.
Reference: [28] <author> M. F. Hornick and S. B. Zdonik, </author> <title> ``A Shared Segmented Memory System for an Object-Oriented Database'', </title> <journal> ACM Trans. Office Information Systems 5, </journal> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 70-95. </pages>
Reference-contexts: Many of the O++ facilities can be found in other languages and systems. Our major contribution lies in providing a clean fusion of the advances in both database and programming language research within an object-oriented framework. Virtues of object-oriented database systems have been extolled elsewhere (see, for example, <ref> [11, 22, 24-26, 28, 29, 32-34] </ref>). O++ shares with these systems the goals of providing a rich type system to model complex and composite objects.
Reference: [29] <author> S. E. Hudson and R. King, </author> <title> ``Object-Oriented Database Support for Software Environments'', </title> <booktitle> Proc. ACM-SIGMOD 1987 Int'l Conf. on Management of Data, </booktitle> <address> San Fransisco, California, </address> <month> May </month> <year> 1987, </year> <pages> 491-503. </pages>
Reference-contexts: Many of the O++ facilities can be found in other languages and systems. Our major contribution lies in providing a clean fusion of the advances in both database and programming language research within an object-oriented framework. Virtues of object-oriented database systems have been extolled elsewhere (see, for example, <ref> [11, 22, 24-26, 28, 29, 32-34] </ref>). O++ shares with these systems the goals of providing a rich type system to model complex and composite objects. <p> Implementations may choose not to allow the deletion of specific versions. 17. Violation of a constraint will cause the transaction of which this access is a part of to be aborted and rolled back as in Cactis <ref> [29] </ref>; at a later time, we may provide additional exception handling mechanisms which will allow the class designer or the user to respond to the violation of a constraint. - 12 - class female: public person - public: ... constraint: sex == 'f' || sex == 'F'; Such constraint-based specializations are
Reference: [30] <author> R. Katz, E. Chang and E. Bhateja, </author> <title> ``Version Modeling Concepts for Computer-Aided Design Databases'', </title> <booktitle> Proc. ACM-SIGMOD 1986 Int'l Conf. on Management of Data, </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1986. </year>
Reference-contexts: For example, database objects persist beyond the lifetime of the program creating them. Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications, that must access the past states of the database [19, 44]. <p> VERSIONING Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications that require accesses to the past states of the database [19, 44].
Reference: [31] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> ``Object Identity'', </title> <booktitle> Proc. OOPSLA '86, </booktitle> <address> Portland, Oregon, </address> <month> Sept. </month> <year> 1986, </year> <pages> 406-416. </pages>
Reference-contexts: Our conclusions are presented in Section 7. 2. DATA STRUCTURING CONSTRUCTS A database is a collection of persistent objects, each identified by a unique identifier, called the object identifier (id) that is its identity <ref> [31] </ref>. We shall also refer to this object id as a pointer to a persistent object. We visualize memory as consisting of two parts: volatile and persistent. Volatile objects are allocated in volatile memory and are the same as those created in ordinary programs.
Reference: [32] <author> C. Lecluse, P. Richard and F. Velez, </author> <title> ``O 2 , an Object-Oriented Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1988 Int'l Conf. on Management of Data, </booktitle> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988, </year> <pages> 424-433. </pages>
Reference-contexts: O++ is related to the language E [41, 42] in that O++, like E, also uses the C++ object model and adds persistence to it. Vbase [7] and O2 <ref> [32] </ref> also seek to blend an object-oriented data model with C. In this paper, we concentrate on the data modeling and the query processing aspects of O++. We do not cover concurrency issues and some systems-oriented features such as schema evolution, authorization, security, etc. <p> Other features of E include generic classes and iterators. Vbase [7] combines an object model with C. It presents to the user two languages: the type definition language TDL for specifying classes and operations, and the C superset COP for writing methods to implement the operations. The O2 system <ref> [32] </ref> also integrates an object model with C. Type definitions are written in one language and methods are written in the C superset CO2. A class in O2 implicitly owns a persistent collection of objects of the class. __________________ 7.
Reference: [33] <author> D. Maier, J. Stein, A. Otis and A. Purdy, </author> <title> ``Development of an Object-Oriented DBMS'', </title> <booktitle> Proc. OOPSLA '86, </booktitle> <address> Portland, Oregon, </address> <month> Sept. </month> <year> 1986, </year> <pages> 472-486. </pages>
Reference: [34] <author> F. Manola and U. Dayal, ``PDM: </author> <title> An Object-Oriented Data Model'', </title> <booktitle> Proc. Int'l Workshop Object-Oriented Database Systems, Asilomar, </booktitle> <address> California, </address> <month> Sept. </month> <year> 1986. </year>
Reference: [35] <author> E. Neuhold and M. Stonebraker, </author> <title> ``Future Directions in DBMS Research'', </title> <type> Tech. </type> <institution> Rep.-88-001, Int'l Computer Science Inst., Berkeley, California, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: A major criticism of the current object-oriented databases and languages is that they lack the capability to pose arbitrary ``join'' queries, and that query processing ``smells'' of pointer chasing as in CODASYL database systems <ref> [35] </ref>. O++ alleviates these problems by providing iterators that allow sets of objects to be manipulated almost as declaratively as the database query languages based on relational calculus. The set iteration facility of O++ also allows the expression of recursive queries [2, 9], a major concern in deductive databases. <p> QUERY PROCESSING CONSTRUCTS One misgiving researchers have with the current object-oriented databases is that they may take us back to the days of CODASYL databases in which data is accessed by ``using pointers to navigate through the database'' <ref> [35] </ref>. In object-oriented databases, the pointers are the object ids. By introducing clusters, sets, and high-level iteration facilities for accessing objects in clusters and sets, O++ provides an alternative to using object ids to navigate through the database. <p> By introducing clusters, sets, and high-level iteration facilities for accessing objects in clusters and sets, O++ provides an alternative to using object ids to navigate through the database. Another criticism of object-oriented databases is that they lack the capability to express arbitrary ``join'' queries <ref> [35] </ref>.
Reference: [36] <author> R. S. Nikhil, </author> <title> ``Functional Databases, Functional Languages'', in Data Types and Persistence, M.P. </title> <editor> Atkinson, P. Buneman and R. Morrison (ed.), </editor> <publisher> Springer Verlag, </publisher> <year> 1988, </year> <pages> 51-67. </pages>
Reference-contexts: Finally, the ability to associate constraints with objects is necessary to ensure database integrity <ref> [36] </ref>. Programming languages typically do not support persistent objects (with the exception of files) or multiple object versions, nor do they provide facilities for associating constraints and triggers with objects. <p> Given a version pointer, pdelete deletes the specified version. 16 5. CONSTRAINTS Constraints are used to maintain a notion of consistency beyond what is typically expressible using the type system <ref> [36] </ref>. Updates that violate the specified constraints should not be permitted. Interpretations of consistency are usually application specific and may be arbitrarily complex. Constraints, which are Boolean conditions, can be associated with classes. Objects must satisfy all the constraints associated with the corresponding class. <p> Triggers Triggers (also called alerters or monitors), like integrity constraints, monitor the database for some conditions, except that these conditions do not represent consistency violations <ref> [36] </ref>. When trigger conditions become true, the associated trigger action is executed.
Reference: [37] <author> B. Nixon, L. Chung, D. Lauzon, A. Borgida, J. Mylopoulis and M. Stanley, </author> <title> ``Implementation of a Compiler for a Semantic Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1987 Int'l Conf. on Management of Data, </booktitle> <address> San Fransisco, California, </address> <month> May </month> <year> 1987, </year> <pages> 118-131. </pages>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19].
Reference: [38] <author> P. O'Brien, P. Bullis and C. Schaffert, </author> <title> ``Persistent and Shared Objects in Trellis/Owl'', </title> <booktitle> Proc. Int'l Workshop Object-Oriented Database Systems, Asilomar, </booktitle> <address> California, </address> <month> Sept. </month> <year> 1986, </year> <pages> 113-123. </pages>
Reference-contexts: O++ also shares the concerns of the persistent programming languages, such as <ref> [6, 16, 38, 40-42] </ref>; persistence is a property of object instances and not types, and persistent objects are accessed and manipulated in much the same way as volatile objects. <p> The square brackets [ and ] indicate an optional item. The suchthat and by clauses are based on similar clauses in SQL [18] and Concurrent C [27]. Similar for loops have been provided, among others, in Pascal/R [47], Rigel [43], Plain [52] and Trellis/Owl <ref> [38] </ref> and Vbase [7]. - 9 - 3.1.1 Iterating Over Cluster Hierarchies Clusters mirror the hierarchy relationship of the corresponding types. If type x is derived from type y, then the corresponding clusters also have the same relationship.
Reference: [39] <author> H. B. Paul, H. J. Schek, M. H. Scholl, G. Weikum and U. Deppisch, </author> <title> ``Architecture and Implementation of the Darmstadt Database Kernel System'', </title> <booktitle> Proc. ACM-SIGMOD 1987 Int'l Conf. on Management of Data, </booktitle> <address> San Fransisco, California, </address> <month> May </month> <year> 1987, </year> <pages> 196-207. </pages>
Reference-contexts: Some extensible database projects, such as - 2 - <ref> [12, 17, 39, 44, 45, 48] </ref> also have similar goals.
Reference: [40] <author> Persistent Programming Research Group, </author> <title> ``The PS-Algol Reference Manual, 2d ed.'', </title> <type> Tech. Rep. </type> <institution> PPR-12-85, Computing Science Dept., Univ. </institution> <address> Glasgow, Glasgow, Scotland, </address> <year> 1985. </year>
Reference: [41] <author> J. E. Richardson, M. J. Carey and D. H. Schuh, </author> <title> ``The Design of the E Programming Language'', </title> <institution> Computer Sciences Tech. </institution> <type> Rep. #824, </type> <institution> Univ. Wisconsin, Madison, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: O++ also shares the concerns of the persistent programming languages, such as [6, 16, 38, 40-42]; persistence is a property of object instances and not types, and persistent objects are accessed and manipulated in much the same way as volatile objects. O++ is related to the language E <ref> [41, 42] </ref> in that O++, like E, also uses the C++ object model and adds persistence to it. Vbase [7] and O2 [32] also seek to blend an object-oriented data model with C. In this paper, we concentrate on the data modeling and the query processing aspects of O++. <p> Set elements are accessed by using the set iteration facility (discussed later). 2.7 Related C-based Approaches The database implementation language E <ref> [41, 42] </ref> also started with C++ and added persistence to it. In E, persistent objects must be of special types called ``db'' types. Objects of such types can be volatile or persistent.
Reference: [42] <author> J. E. Richardson and M. J. Carey, </author> <title> ``Persistence in the E Language: Issues and Implementation'', </title> <note> SoftwarePractice & Experience 19, 12 (Dec. </note> <year> 1989), </year> <pages> 1115-1150. </pages>
Reference-contexts: O++ also shares the concerns of the persistent programming languages, such as [6, 16, 38, 40-42]; persistence is a property of object instances and not types, and persistent objects are accessed and manipulated in much the same way as volatile objects. O++ is related to the language E <ref> [41, 42] </ref> in that O++, like E, also uses the C++ object model and adds persistence to it. Vbase [7] and O2 [32] also seek to blend an object-oriented data model with C. In this paper, we concentrate on the data modeling and the query processing aspects of O++. <p> Set elements are accessed by using the set iteration facility (discussed later). 2.7 Related C-based Approaches The database implementation language E <ref> [41, 42] </ref> also started with C++ and added persistence to it. In E, persistent objects must be of special types called ``db'' types. Objects of such types can be volatile or persistent.
Reference: [43] <author> L. Rowe and K. Shoens, </author> <title> ``Data Abstraction, Views and Updates in RIGEL'', </title> <booktitle> Proc. ACM-SIGMOD 1979 Int'l Conf. on Management of Data, </booktitle> <address> Boston, Massachusetts, </address> <month> May-June </month> <year> 1979, </year> <pages> 77-81. </pages>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19]. <p> The square brackets [ and ] indicate an optional item. The suchthat and by clauses are based on similar clauses in SQL [18] and Concurrent C [27]. Similar for loops have been provided, among others, in Pascal/R [47], Rigel <ref> [43] </ref>, Plain [52] and Trellis/Owl [38] and Vbase [7]. - 9 - 3.1.1 Iterating Over Cluster Hierarchies Clusters mirror the hierarchy relationship of the corresponding types. If type x is derived from type y, then the corresponding clusters also have the same relationship. <p> Here is the code to perform the above computation: 12 __________________ 10. POSTQUEL [44] allows a * to be specified after the relation name to retrieve tuples from the named relation and all relations that inherit attributes from it. Orion [11] also provides similar functionality. 11. Rigel <ref> [43] </ref> also allows multiple loop variables in its for loop. 12. One can simulate this task using C++ virtual functions, but this may require modification of existing class definitions to add appropriate functions.
Reference: [44] <author> L. A. Rowe and M. R. Stonebraker, </author> <title> ``The POSTGRES Data Model'', </title> <booktitle> Proc. 13th Int'l Conf. Very Large Data Bases, </booktitle> <address> Brighton, England, </address> <month> Sept. </month> <year> 1987, </year> <pages> 83-96. </pages>
Reference-contexts: Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications, that must access the past states of the database <ref> [19, 44] </ref>. Support for active databases, such as those used in computer integrated manufacturing, power distribution network management, and air-traffic control, requires the capability to attach with objects conditions and actions that are triggered when the conditions are satisfied [21, 50]. <p> Some extensible database projects, such as - 2 - <ref> [12, 17, 39, 44, 45, 48] </ref> also have similar goals. <p> Class person has the member function income, and classes student and faculty have been derived from it. Here is the code to perform the above computation: 12 __________________ 10. POSTQUEL <ref> [44] </ref> allows a * to be specified after the relation name to retrieve tuples from the named relation and all relations that inherit attributes from it. Orion [11] also provides similar functionality. 11. Rigel [43] also allows multiple loop variables in its for loop. 12. <p> Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications that require accesses to the past states of the database <ref> [19, 44] </ref>. In ODE, all persistent objects can have versions and there is no pre-defined limit on the number of versions that an object can have. 13 The current version of an object is updatable, but old versions may be read-only depending upon the implementation.
Reference: [45] <author> H. J. Schek and M. Scholl, </author> <title> ``The Relation Model with Relation-Valued Attributes'', </title> <journal> Information Sys. </journal> <volume> 11, </volume> <month> 2 </month> <year> (1986), </year> . 
Reference-contexts: Some extensible database projects, such as - 2 - <ref> [12, 17, 39, 44, 45, 48] </ref> also have similar goals.
Reference: [46] <author> G. Schlageter, R. Unland, W. Wilkes, R. Zieschang, G. Maul, M. Nagl and R. Meyer, </author> <title> ``OOPS - An Object Oriented Programming System with Integrated Data Management Facility'', </title> <booktitle> Proc. IEEE 4th Int'l Conf. Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> Feb. </month> <year> 1988, </year> <pages> 118-125. </pages>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19]. <p> Triggers are necessary for supporting active databases, such as those used in computer integrated manufacturing, power distribution network management, air-traffic control, etc. and are found in many database systems such as POSTGRES [50], HiPAC [21], Sybase [20], Vbase [7], and OOPS <ref> [46] </ref>. Triggers are associated with objects. There are two types of triggers: once-only (default) and perpetual (specified using the keyword perpetual). 18 A once-only trigger is automatically deactivated after the trigger has ``fired'', and it must then be reactivated explicitly if desired.
Reference: [47] <author> J. W. Schmidt, </author> <title> ``Some High Level Language Constructs for Data of Type Relation'', </title> <journal> ACM Trans. Database Syst. </journal> <volume> 2, </volume> <month> 3 (Sept. </month> <year> 1977), </year> <pages> 247-261. </pages>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19]. <p> The square brackets [ and ] indicate an optional item. The suchthat and by clauses are based on similar clauses in SQL [18] and Concurrent C [27]. Similar for loops have been provided, among others, in Pascal/R <ref> [47] </ref>, Rigel [43], Plain [52] and Trellis/Owl [38] and Vbase [7]. - 9 - 3.1.1 Iterating Over Cluster Hierarchies Clusters mirror the hierarchy relationship of the corresponding types. If type x is derived from type y, then the corresponding clusters also have the same relationship.
Reference: [48] <author> P. M. Schwarz, W. Chang, J. C. Freytag, G. M. Lohman, J. McPherson, C. Mohan and H. Pirahesh, </author> <title> ``Extensibility in the Starburst Database System'', </title> <booktitle> Proc. Int'l Workshop Object-Oriented Database Systems, Asilomar, </booktitle> <address> California, </address> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: Some extensible database projects, such as - 2 - <ref> [12, 17, 39, 44, 45, 48] </ref> also have similar goals.
Reference: [49] <author> J. M. Smith, S. Fox and T. Landers, ADAPLEX: </author> <title> Rationale and Reference Manual, 2nd ed., </title> <institution> Computer Corp. America, </institution> <address> Cambridge, Mass., </address> <year> 1983. </year>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19].
Reference: [50] <author> M. Stonebraker, E. N. Hanson and S. Potamianos, </author> <title> ``The POSTGRES Rule Manager'', </title> <journal> IEEE Trans. Software Eng. </journal> <volume> 14, </volume> <month> 7 (July </month> <year> 1988), </year> <pages> 897-907. </pages>
Reference-contexts: Support for active databases, such as those used in computer integrated manufacturing, power distribution network management, and air-traffic control, requires the capability to attach with objects conditions and actions that are triggered when the conditions are satisfied <ref> [21, 50] </ref>. Finally, the ability to associate constraints with objects is necessary to ensure database integrity [36]. Programming languages typically do not support persistent objects (with the exception of files) or multiple object versions, nor do they provide facilities for associating constraints and triggers with objects. <p> When trigger conditions become true, the associated trigger action is executed. Triggers are necessary for supporting active databases, such as those used in computer integrated manufacturing, power distribution network management, air-traffic control, etc. and are found in many database systems such as POSTGRES <ref> [50] </ref>, HiPAC [21], Sybase [20], Vbase [7], and OOPS [46]. Triggers are associated with objects. <p> Note that there can be more than one activation of a trigger in effect. An active trigger fires when its condition becomes true. Firing means that the action associated with the trigger is ``scheduled'' for action. Unlike <ref> [50] </ref>, a trigger action is not considered part of the transaction that causes the trigger to be fired (triggering transaction). Each trigger firing results in the creation of an independent transaction with the trigger action being the transaction body. Conceptually, trigger conditions are evaluated at the end of each transaction. <p> Transactions representing trigger actions are executed after (but not necessarily immediately after) the triggering transaction, i.e., there is ``weak coupling'' [21] between the triggering transaction and the trigger action. If the triggering transaction is aborted, the trigger actions generated by it are aborted. __________________ 18. POSTGRES <ref> [50] </ref> has similar triggers. - 13 - Triggers may be deactivated explicitly before they have fired as follows: trigger-id object-id-&gt;T i (arguments) The first form deactivates a trigger whose trigger id is specified as the argument (this trigger id must have been returned by a successful trigger activation).
Reference: [51] <author> W. Tichy, ``RCS: </author> <title> A System for Version Control'', </title> <journal> Software Practice and Experience 15, </journal> <month> 7 (July </month> <year> 1986), </year> <pages> 637-654. </pages>
Reference-contexts: For example, database objects persist beyond the lifetime of the program creating them. Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications, that must access the past states of the database [19, 44]. <p> VERSIONING Many database applications, such as computer-aided design and software management, require the capability to create and access multiple versions of an object <ref> [8, 23, 30, 51] </ref>. Object versions are also important for historical databases, such as those used in accounting, legal, and financial applications that require accesses to the past states of the database [19, 44].
Reference: [52] <author> A. Wasserman, </author> <title> ``The Data Management Facilities of PLAIN'', </title> <booktitle> Proc. ACM-SIGMOD 1979 Int'l Conf. on Management of Data, </booktitle> <address> Boston, Massachusetts, </address> <month> May-June </month> <year> 1979. </year>
Reference-contexts: Some extensible database projects, such as - 2 - [12, 17, 39, 44, 45, 48] also have similar goals. O++ is in the same spirit as the work done in designing database programming languages, such as <ref> [7, 10, 19, 37, 43, 46, 47, 49, 52] </ref>; it strives to be the single language for data definition, data manipulation and general computation to avoid the problems arising out of ``impedance mismatch'' [19]. <p> The square brackets [ and ] indicate an optional item. The suchthat and by clauses are based on similar clauses in SQL [18] and Concurrent C [27]. Similar for loops have been provided, among others, in Pascal/R [47], Rigel [43], Plain <ref> [52] </ref> and Trellis/Owl [38] and Vbase [7]. - 9 - 3.1.1 Iterating Over Cluster Hierarchies Clusters mirror the hierarchy relationship of the corresponding types. If type x is derived from type y, then the corresponding clusters also have the same relationship.
References-found: 52

