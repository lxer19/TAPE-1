URL: http://www.cs.bu.edu/~best/res/papers/rtss94.ps
Refering-URL: http://cs-www.bu.edu/faculty/best/res/Home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (best@cs.bu.edu)  (sb@cs.bu.edu)  
Title: Timeliness via Speculation for Real-Time Databases  
Author: Azer Bestavros Spyridon Braoudakis 
Address: Boston University  
Affiliation: Department of Computer Science  
Date: Dec 1994.  
Note: In Proceedings of RTSS'94: The 14th IEEEReal-Time System Symposium, San Juan, Puerto Rico,  
Abstract: Various concurrency control algorithms differ in the time when conflicts are detected, and in the way they are resolved. Pessimistic (PCC) protocols detect conflicts as soon as they occur and resolve them using blocking. Optimistic (OCC) protocols detect conflicts at transaction commit time and resolve them using rollbacks. For real-time databases, blockages and rollbacks are hazards that increase the likelihood of transactions missing their deadlines. We propose a Speculative Concurrency Control (SCC) technique that minimizes the impact of blockages and rollbacks. SCC relies on added system resources to speculate on potential serialization orders, ensuring that if such serialization orders materialize, the hazards of blockages and roll-backs are minimized. We present a number of SCC-based algorithms that differ in the level of speculation they introduce, and the amount of system resources (mainly memory) they require. We show the performance gains (in terms of number of satisfied timing constraints) to be expected when a representative SCC algorithm (SCC-2S) is adopted. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions: A performance evaluation. </title> <booktitle> In Prooceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: Most real-time concurrency control schemes considered in the literature and used in commercial systems combine Two-Phase Locking (2PL), which is a PCC strategy, with a priority scheme to guarantee that the more urgent transactions are not blocked out waiting for less urgent ones <ref> [1, 26, 15, 24, 22, 23] </ref>. Despite its widespread use, 2PL has some properties such as the possibility of deadlocks and long and unpredictable blocking times that damage its appeal for real-time environments.
Reference: [2] <author> R. Agrawal, M. Carey, and M. Linvy. </author> <title> Concurency control performance modeling: Alternatives and implications. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(4), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: For DataBase Management Systems (DBMS) with limited resources, performance studies concluded that PCC blocking-based policies result in throughputs higher than those achievable by OCC restart-based policies <ref> [2] </ref>. For Real-Time DataBase Systems (RTDBS) throughput (or maximum concurrency) ceases to be an appropriate measure of performance. Rather, the number of transactions completed before their deadlines becomes the decisive performance measure [9].
Reference: [3] <author> A. Bernstein, A. Philip, V. Hadzilacos, and N. Good-man. </author> <title> Concurrency Control And Recovery In Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: Each transaction in the system is assumed to preserve the consistency of the shared database. Therefore, any sequential (or seri-alizable) execution of any collection of transactions will also preserve the consistency of the database <ref> [20, 3] </ref>. <p> Write-write conflicts are treated using the Thomas' Write Rule (TWR). At validation, when all database updates are made permanent, all write requests are buffered by the data manager and serialized according to transaction validation order <ref> [3] </ref>. SCC algorithms allow several processes to coexist on behalf of the same transaction. Each of these processes makes different assumptions regarding the Speculated Order of Serialization (SOS). For a transaction T i , we call each one of these processes a shadow of T i .
Reference: [4] <author> Azer Bestavros. </author> <title> Speculative Concurrency Control: A position statement. </title> <type> Technical Report TR-92-016, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: However, like the classical OCC approach, it is not sensitive to transactions' priorities or deadlines. This has been partially remedied by introducing waiting [12] and blocking [18, 25] to OCC-based algorithms. Recently Bestavros proposed a categorically different approach to concurrency control for RTDBS <ref> [4] </ref>. His approach relies on the use of standby processes to speculate on alternative schedules (serialization order of transactions), once conflicts that threaten the consistency of the database are detected. These alternative schedules are adopted only if suspected inconsistencies materialize; otherwise, they are abandoned.
Reference: [5] <author> Azer Bestavros. </author> <title> Speculative Concurrency Control. </title> <type> Technical Report TR-93-002, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Such shadows are blocked at appropriate points in time so as to be ready to resume execution, if needed. Figure 2 demonstrates this concept by showing all shadows and SOS's for a transaction T 3 , which conflicts with two other transactions T 1 and T 2 . In <ref> [5] </ref>, an Order-Based SCC (SCC-OB) algorithm, which generalizes this idea, is proposed. The SCC-OB algorithm requires an exponential number of shadows, namely P n (n1)! to account for all the possible orderings of any n uncommitted, conflicting transactions.
Reference: [6] <author> Azer Bestavros and Spyridon Braoudakis. SCC-nS: </author> <title> A family of Speculative Concurrency Control Algorithms for Real-Time Databases. </title> <booktitle> In Proceedings of the Third International Workshop on Responsive Computer Systems, </booktitle> <address> Lincoln, NH, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: This is because the conflict is detected on some other transaction's write operation. Therefore, since its optimistic shadow already read that database object, we must either create a new copy of this transaction or choose another point during its execution from which we can fork it off <ref> [6] </ref>. When the new conflict implicates transactions that already conflict with each other, some adjustments may be necessary.
Reference: [7] <author> C. Boksenbaum, M. Cart, J. Ferrie, and J. Francois. </author> <title> Concurrent certifications by intervals of timestamps in distributed database systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 409-419, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be classified broadly as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms [10, 11] avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Optimistic Concurrency Control (OCC) algorithms <ref> [7, 17] </ref> allow such transactions to proceed at the risk of having to restart them in case these potential conflicts materialize.
Reference: [8] <author> Spyridon Braoudakis. </author> <title> Concurrency Control Protocols for Real-Time Databases. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA 02215, expected June 1994. </address>
Reference-contexts: This reduction in complexity can be achieved by observing that standby shadows do not read dirty data, and thus transactions need not consider their relative position in the different serialization orders. The Conflict-Based SCC (SCC-CB) variant presented in <ref> [8] </ref> makes use of the aforementioned improvements over the SCC-OB algorithm. 3 The SCC-kS Class of Algorithms In this section, we describe a class of SCC algorithms that operates under a limited resources assumption. This assumption restricts to k the number of shadows alloted for each uncommitted transaction. <p> This assumption restricts to k the number of shadows alloted for each uncommitted transaction. A formal description of the algorithm as well as a proof of its correctness can be found in <ref> [8] </ref>. 3.1 Algorithm Overview Shadows executing on behalf of a transaction are either optimistic or speculative. Optimistic shadows execute unhindered, whereas speculative shadows are kept ready to replace defunct optimistic shadows, if necessary. <p> LBFO is one of several policies that could be adopted. We are currently investigating alternatives to this policy, which utilize information about deadlines and priorities of the conflicting transactions to account for the most probable serialization orders <ref> [8] </ref>. policy when only two speculative shadows are alloted for transaction T 1 . The presumption that the first two con flicts in which T 1 participated (by accessing objects Y and Z), is revised when transaction T 2 writes object X. <p> The objective of this scheme is to maximize the expected value-added to the system, and not necessarily the number of satisfied timing constraints <ref> [8] </ref>. 5 Conclusion SCC allows several shadow transactions to coexist on behalf of a given uncommitted transaction so as to protect against the hazards of blockages and restarts, which are characteristics of PCC-based and OCC-based algorithms, respectively.
Reference: [9] <author> A. P. Buchmann, D. C. McCarthy, M. Hsu, and U. Dayal. </author> <title> Time-critical database scheduling: A framework for integrating real-time scheduling and concur-rency controls. </title> <booktitle> In Proceedings of the 5th International Conference on Data Engineering, </booktitle> <address> Los Angeles, Califor-nia, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: For Real-Time DataBase Systems (RTDBS) throughput (or maximum concurrency) ceases to be an appropriate measure of performance. Rather, the number of transactions completed before their deadlines becomes the decisive performance measure <ref> [9] </ref>. Haritsa et al. [13] investigated the behavior of both PCC and OCC schemes in a real-time environment and showed that for a RTDBS with firm deadlines (where late transactions are discarded immediately) OCC outperforms PCC, especially when resource contention is low.
Reference: [10] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, November 1976. 
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be classified broadly as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms <ref> [10, 11] </ref> avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Optimistic Concurrency Control (OCC) algorithms [7, 17] allow such transactions to proceed at the risk of having to restart them in case these potential conflicts materialize.
Reference: [11] <author> J. N. Gray, R. A. Lorie, G. R. Putzolu, and I. L. Traiger. </author> <title> Granularity of locks and degrees of consistensy in a shared data base. </title> <editor> In G. M. Nijssen, editor, </editor> <booktitle> Modeling in Data Base Management Systems, </booktitle> <pages> pages 365-395. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1976. </year>
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be classified broadly as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms <ref> [10, 11] </ref> avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Optimistic Concurrency Control (OCC) algorithms [7, 17] allow such transactions to proceed at the risk of having to restart them in case these potential conflicts materialize.
Reference: [12] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> On being optimistic about real-time constraints. </title> <booktitle> In Prooceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts. However, like the classical OCC approach, it is not sensitive to transactions' priorities or deadlines. This has been partially remedied by introducing waiting <ref> [12] </ref> and blocking [18, 25] to OCC-based algorithms. Recently Bestavros proposed a categorically different approach to concurrency control for RTDBS [4]. His approach relies on the use of standby processes to speculate on alternative schedules (serialization order of transactions), once conflicts that threaten the consistency of the database are detected. <p> The database consisted of 1,000 pages from which each transaction accessed 20 pages randomly. The probability of a page been updated was set at 25%. These parameter settings are comparable to those used in similar studies <ref> [12] </ref>. Figures 9-a and 9-b depict the performance of SCC-2S and OCC-BC under the baseline model. The performance of both algorithms is identical when the number of transactions in the system is small. But, as the multiprogramming level increases, the superiority of the SCC-2S becomes evident. <p> We have developed an extension of SCC-2S that uses information about transaction deadlines to decide whether a validating transaction should be committed immediately, or whether its commitment should be delayed in favor of more urgent, conflicting transactions. This delay is similar to the waiting introduced in the Wait-50 heuristic <ref> [12] </ref>, except that we apply it to SCC-2S instead of OCC-BC. Initial investigation of this heuristic suggests only minor improvement over the original SCC-2S.
Reference: [13] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> Data access scehduling in firm real-time database systems. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 4 </volume> <pages> 203-241, </pages> <year> 1992. </year>
Reference-contexts: For Real-Time DataBase Systems (RTDBS) throughput (or maximum concurrency) ceases to be an appropriate measure of performance. Rather, the number of transactions completed before their deadlines becomes the decisive performance measure [9]. Haritsa et al. <ref> [13] </ref> investigated the behavior of both PCC and OCC schemes in a real-time environment and showed that for a RTDBS with firm deadlines (where late transactions are discarded immediately) OCC outperforms PCC, especially when resource contention is low.
Reference: [14] <author> J. Huang, J. A. Stankovic, D. Towsley, and K. Ramam-ritham. </author> <title> Experimental evaluation of real-time transaction processing. </title> <booktitle> In Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: This results in a smaller payoff if delayed commitment is adopted. We are currently investigating other heuristics that combine deadline and priority information into value functions (similar to those suggested in <ref> [14] </ref>) to be used in an integrated probabilistic scheme for shadow allocation and delayed commitment.
Reference: [15] <author> Jiandong Huang, John A. Stankovic, Krithi Ramam-ritham, and Don Towsley. </author> <title> Priority inheritance in soft real-time databases. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 4 </volume> <pages> 243-268, </pages> <year> 1992. </year>
Reference-contexts: Most real-time concurrency control schemes considered in the literature and used in commercial systems combine Two-Phase Locking (2PL), which is a PCC strategy, with a priority scheme to guarantee that the more urgent transactions are not blocked out waiting for less urgent ones <ref> [1, 26, 15, 24, 22, 23] </ref>. Despite its widespread use, 2PL has some properties such as the possibility of deadlocks and long and unpredictable blocking times that damage its appeal for real-time environments.
Reference: [16] <author> Jiandong Huang, John A. Stankovic, Krithi Ramam-ritham, and Don Towslwy. </author> <title> Experimental evaluation of real-time optimistic concurrency control schemes. </title> <booktitle> In Prooceedings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Despite its widespread use, 2PL has some properties such as the possibility of deadlocks and long and unpredictable blocking times that damage its appeal for real-time environments. This led to a large body of research on alternatives to 2PL for RTDBS <ref> [16] </ref>. fl This work has been partially supported by GTE Labs (fund number 3658-3) and by NSF (grant CCR-9308344). For DataBase Management Systems (DBMS) with limited resources, performance studies concluded that PCC blocking-based policies result in throughputs higher than those achievable by OCC restart-based policies [2].
Reference: [17] <author> H. Kung and John Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: 1 Introduction Traditional concurrency control algorithms can be classified broadly as either pessimistic or optimistic. Pessimistic Concurrency Control (PCC) algorithms [10, 11] avoid any concurrent execution of transactions as soon as potential conflicts between these transactions are detected. Optimistic Concurrency Control (OCC) algorithms <ref> [7, 17] </ref> allow such transactions to proceed at the risk of having to restart them in case these potential conflicts materialize. <p> Haritsa et al. [13] investigated the behavior of both PCC and OCC schemes in a real-time environment and showed that for a RTDBS with firm deadlines (where late transactions are discarded immediately) OCC outperforms PCC, especially when resource contention is low. The main disadvantage of classical OCC <ref> [17] </ref> is that transaction conflicts are not detected until the validation phase, at which time it may be too late to restart.
Reference: [18] <author> Yi Lin and Sang Son. </author> <title> Concurrency control in real-time databases by dynamic adjustment of serialization order. </title> <booktitle> In Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts. However, like the classical OCC approach, it is not sensitive to transactions' priorities or deadlines. This has been partially remedied by introducing waiting [12] and blocking <ref> [18, 25] </ref> to OCC-based algorithms. Recently Bestavros proposed a categorically different approach to concurrency control for RTDBS [4]. His approach relies on the use of standby processes to speculate on alternative schedules (serialization order of transactions), once conflicts that threaten the consistency of the database are detected.
Reference: [19] <author> D. Menasce and T. Nakanishi. </author> <title> Optimistic versus pessimistic concurrency control mechanisms in database management systems. </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: The main disadvantage of classical OCC [17] is that transaction conflicts are not detected until the validation phase, at which time it may be too late to restart. The Broadcast Commit variant of the classical OCC (OCC-BC) <ref> [19, 21] </ref> attempts to solve this problem by requiring that a committing transaction notifies all uncommitted, conflicting transactions for an immediate restart. OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts.
Reference: [20] <author> Christos Papadimitriou. </author> <title> The serializability of concurrent database updates. </title> <journal> Journal of the ACM, </journal> <volume> 26(4) </volume> <pages> 631-653, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: Each transaction in the system is assumed to preserve the consistency of the shared database. Therefore, any sequential (or seri-alizable) execution of any collection of transactions will also preserve the consistency of the database <ref> [20, 3] </ref>.
Reference: [21] <author> John Robinson. </author> <title> Design of Concurrency Controls for Transaction Processing Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1982. </year>
Reference-contexts: The main disadvantage of classical OCC [17] is that transaction conflicts are not detected until the validation phase, at which time it may be too late to restart. The Broadcast Commit variant of the classical OCC (OCC-BC) <ref> [19, 21] </ref> attempts to solve this problem by requiring that a committing transaction notifies all uncommitted, conflicting transactions for an immediate restart. OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts.
Reference: [22] <author> Lui Sha, R. Rajkumar, and J. Lehoczky. </author> <title> Concurrency control for distributed real-time databases. </title> <journal> ACM, SIG-MOD Record, </journal> <volume> 17(1) </volume> <pages> 82-98, </pages> <year> 1988. </year>
Reference-contexts: Most real-time concurrency control schemes considered in the literature and used in commercial systems combine Two-Phase Locking (2PL), which is a PCC strategy, with a priority scheme to guarantee that the more urgent transactions are not blocked out waiting for less urgent ones <ref> [1, 26, 15, 24, 22, 23] </ref>. Despite its widespread use, 2PL has some properties such as the possibility of deadlocks and long and unpredictable blocking times that damage its appeal for real-time environments.
Reference: [23] <author> Lui Sha, R. Rajkumar, Sang Son, and Chun-Hyon Chang. </author> <title> A real-time locking protocol. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: Most real-time concurrency control schemes considered in the literature and used in commercial systems combine Two-Phase Locking (2PL), which is a PCC strategy, with a priority scheme to guarantee that the more urgent transactions are not blocked out waiting for less urgent ones <ref> [1, 26, 15, 24, 22, 23] </ref>. Despite its widespread use, 2PL has some properties such as the possibility of deadlocks and long and unpredictable blocking times that damage its appeal for real-time environments.
Reference: [24] <author> Mukesh Singhal. </author> <title> Issues and approaches to design real-time database systems. </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 19-33, </pages> <year> 1988. </year>
Reference-contexts: Most real-time concurrency control schemes considered in the literature and used in commercial systems combine Two-Phase Locking (2PL), which is a PCC strategy, with a priority scheme to guarantee that the more urgent transactions are not blocked out waiting for less urgent ones <ref> [1, 26, 15, 24, 22, 23] </ref>. Despite its widespread use, 2PL has some properties such as the possibility of deadlocks and long and unpredictable blocking times that damage its appeal for real-time environments.
Reference: [25] <author> Sang H. Son, Juhnyoung Lee, and Yi Lin. </author> <title> Hybrid protocols using dynamic adjustment of serialization order for real-time concurrency control. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 4 </volume> <pages> 269-276, </pages> <year> 1992. </year>
Reference-contexts: OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts. However, like the classical OCC approach, it is not sensitive to transactions' priorities or deadlines. This has been partially remedied by introducing waiting [12] and blocking <ref> [18, 25] </ref> to OCC-based algorithms. Recently Bestavros proposed a categorically different approach to concurrency control for RTDBS [4]. His approach relies on the use of standby processes to speculate on alternative schedules (serialization order of transactions), once conflicts that threaten the consistency of the database are detected.
Reference: [26] <author> John Stankovic and Wei Zhao. </author> <title> On real-time transactions. </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: Most real-time concurrency control schemes considered in the literature and used in commercial systems combine Two-Phase Locking (2PL), which is a PCC strategy, with a priority scheme to guarantee that the more urgent transactions are not blocked out waiting for less urgent ones <ref> [1, 26, 15, 24, 22, 23] </ref>. Despite its widespread use, 2PL has some properties such as the possibility of deadlocks and long and unpredictable blocking times that damage its appeal for real-time environments.
References-found: 26

