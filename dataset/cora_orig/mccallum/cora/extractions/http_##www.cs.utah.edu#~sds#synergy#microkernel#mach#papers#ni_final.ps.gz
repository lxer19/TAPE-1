URL: http://www.cs.utah.edu/~sds/synergy/microkernel/mach/papers/ni_final.ps.gz
Refering-URL: http://www.cs.utah.edu/~sds/synergy/microkernel/mach/papers.html
Root-URL: 
Email: Email: fine@sctc.com  
Title: Defining Noninterference in the Temporal Logic of Actions  
Author: Todd Fine 
Address: 2675 Long Lake Road, Roseville, Minnesota 55113-2536  
Affiliation: Secure Computing Corporation  
Abstract: Covert channels are a critical concern for multilevel secure (MLS) systems. Due to their subtlety, it is desirable to use formal methods to analyze MLS systems for the presence of covert channels. This paper describes an approach for using Lamport's TLA to specify noninterference properties. In addition to providing a more intuitive definition of noninterference than previous attempts, this approach also supports analysis of systems that do contain covert channels to demonstrate limitations on their exploitations. In relating the definition of noninterference given here to prior definitions of noninterference, this paper discusses ways in which other definitions of noninterference can be formalized in TLA, too. Finally, this paper discusses how prior work on specification refinement and composition might be applied to the noninterference problem within the framework provided by TLA. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport. </author> <title> Conjoining specifications. </title> <type> Technical Report 118, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Another advantage of the definition provided here is that it is couched in Lamport's Temporal Logic of Actions (TLA) <ref> [1] </ref>. Lamport's TLA work is widely known and provides a well-accepted model of computing. <p> In addition, we discuss how prior definitions of noninterference can be incorporated into the framework of TLA. 2. TLA and Composition This section provides a brief overview of TLA and composition theory <ref> [1] </ref>. The presentation here is a slight refinement of the standard presentation of TLA with the differences noted here. The TLA specification language is based on state transitions. A state is a representation of a snap shot of the system at some point in time. <p> We now describe an operation for composing components. The composition operator described here is essentially that described in reference <ref> [1] </ref> where composition of systems involves simply intersecting their sets of behaviors. In other words, a behavior is accepted for the system if it is accepted by each of the components in isolation.
Reference: [2] <author> T. </author> <title> Fine. Constructively Using Noninterference to Analyze Systems. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 162-169, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: There has been much prior work investigating techniques to formalize the definition of a covert channel and use formal methods to analyze a system model to identify covert channels <ref> [2, 9, 3, 4, 7] </ref>. This paper proposes a definition of noninterference that while similar to prior definitions is more intuitive. <p> Descriptions of this class of approach can be found in references [9] and <ref> [2] </ref>. Another class of approach is characterized by Thayer and Johnson's notion of correctability [3]. <p> Furthermore, if the definition of noninterference can be reduced to a collection of unwinding conditions, the unwinding conditions can often be addressed using TLA proof rules. For example, the definitions in references <ref> [2, 9] </ref> can also be formalized in TLA as properties of properties. These definitions of noninterference have associated unwinding theorems that allow verification of the noninterference policy to be reduced to verification of conditions on individual instructions.
Reference: [3] <author> D. Johnson and F. Thayer. </author> <title> Security and the composition of machines. </title> <booktitle> In Proceedings of the Workshop on the Foundations of Computer Security. IEEE, </booktitle> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: There has been much prior work investigating techniques to formalize the definition of a covert channel and use formal methods to analyze a system model to identify covert channels <ref> [2, 9, 3, 4, 7] </ref>. This paper proposes a definition of noninterference that while similar to prior definitions is more intuitive. <p> Descriptions of this class of approach can be found in references [9] and [2]. Another class of approach is characterized by Thayer and Johnson's notion of correctability <ref> [3] </ref>. <p> However, there are many subtleties involved. For example, although correctability is somewhat intuitive, it actually is a flawed statement of noninterference that Thayer and Johnson fixed in a variant called forward correctability <ref> [3] </ref>. The final class of statements provides more design guidance through the explicit restrictions on transitions, but does not provide an abstract statement of the resulting noninterference property. Consequently, it is difficult to determinine what the security requirement really means in this approach.
Reference: [4] <author> D. McCullough. </author> <title> Noninterference and the composability of security properties. </title> <booktitle> In Proceedings of the 1988 Symposium on Security and Privacy, </booktitle> <pages> pages 177-186. </pages> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1988. </year>
Reference-contexts: There has been much prior work investigating techniques to formalize the definition of a covert channel and use formal methods to analyze a system model to identify covert channels <ref> [2, 9, 3, 4, 7] </ref>. This paper proposes a definition of noninterference that while similar to prior definitions is more intuitive. <p> Then, a read operation performed by a high-level process on a low-level file violates the first of the above restrictions by changing the access time of the low-level file. Reference <ref> [4] </ref> describes an example of this class of approach. Of the various definitions, the ones stated in terms of sequences of events or operations are the most intuitive. However, there are many subtleties involved. <p> To use another variant of noninterference, it is not necessary to abandon TLA; it is simply necessary to translate into TLA. 7. Composition and Refinement A recent area of research regarding noninterference statements is their composability. Early work in this area includes McCullough's statement of restrictiveness <ref> [4] </ref>. More recent work includes that described in references [5] and [8]. Essentially, the question is whether the composition of two secure components results in a secure composite system (where secure means satisfies noninterference). The motivator for this research is the desire to use a divide-and-conquer approach to analyzing systems. <p> This type of composability result holds for policies such as those in references <ref> [4] </ref>, [5], [10], and [7]. We have not spent much time considering the composability of the definition of noninterference given here, so it is clearly an area for future research. We simply make some initial observations here.
Reference: [5] <author> J. McLean. </author> <title> A General Theory of Composition for Trace Sets Closed Under Selective Interleaving Functions. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Earlier work has suggested that TLA is an inappropriate formalism for studying the noninterference problem <ref> [5] </ref>. We discuss here why TLA is an appropriate formalism for studying noninterference even though the specific issues identified in reference [5] is correct. In addition, we discuss how prior definitions of noninterference can be incorporated into the framework of TLA. 2. <p> Earlier work has suggested that TLA is an inappropriate formalism for studying the noninterference problem <ref> [5] </ref>. We discuss here why TLA is an appropriate formalism for studying noninterference even though the specific issues identified in reference [5] is correct. In addition, we discuss how prior definitions of noninterference can be incorporated into the framework of TLA. 2. TLA and Composition This section provides a brief overview of TLA and composition theory [1]. <p> Then, the transition outputs data from a high-level file to a low-level process. Since noninterference is not preserved by refinement, it cannot be a property in the Abadi-Lamport sense. This has led others to reject the use of the Abadi-Lamport theory for exploring noninterference properties. For example, reference <ref> [5] </ref> mentions that noninterference is not a property in the Abadi-Lamport theory and then proceeds to study noninterference within a different formalism. However, it is still possible to state noninterference in the temporal logic of actions as we have done in the previous sections. As pointed out in reference [5], the <p> reference <ref> [5] </ref> mentions that noninterference is not a property in the Abadi-Lamport theory and then proceeds to study noninterference within a different formalism. However, it is still possible to state noninterference in the temporal logic of actions as we have done in the previous sections. As pointed out in reference [5], the definition is technically a property of Abadi- Lamport properties rather than an Abadi-Lamport property itself. This means the TLA proof rules do not necessarily apply to noninterference. However, they do apply to safety properties such as the Simple Security Property and the fl-Property. <p> Composition and Refinement A recent area of research regarding noninterference statements is their composability. Early work in this area includes McCullough's statement of restrictiveness [4]. More recent work includes that described in references <ref> [5] </ref> and [8]. Essentially, the question is whether the composition of two secure components results in a secure composite system (where secure means satisfies noninterference). The motivator for this research is the desire to use a divide-and-conquer approach to analyzing systems. <p> This type of composability result holds for policies such as those in references [4], <ref> [5] </ref>, [10], and [7]. We have not spent much time considering the composability of the definition of noninterference given here, so it is clearly an area for future research. We simply make some initial observations here.
Reference: [6] <author> NCSC. </author> <title> Trusted Computer Systems Evaluation Criteria. Standard, </title> <institution> DOD 5200.28-STD, US National Computer Security Center, Fort George G. Meade, Maryland 20755-6000, </institution> <month> Dec. </month> <year> 1985. </year>
Reference-contexts: The fl-Property addresses this concern by preventing the process running at level SECRET from writing files with level UNCLASSIFIED <ref> [6] </ref>. Unfortunately, the satisfaction of the Simple Security and fl properties does not ensure that low-level processes cannot obtain data from high-level files. The term covert channel is used to denote a mechanism by which a high-level process can communicate data to a low-level process [6]. <p> writing files with level UNCLASSIFIED <ref> [6] </ref>. Unfortunately, the satisfaction of the Simple Security and fl properties does not ensure that low-level processes cannot obtain data from high-level files. The term covert channel is used to denote a mechanism by which a high-level process can communicate data to a low-level process [6]. The Simple Security and fl properties can be circumvented by a high-level process reading data from a file at its level and communicating it to a low-level process via a covert channel.
Reference: [7] <author> A. W. Roscoe. </author> <title> CSP and determinism in security modelling. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 114-127, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: There has been much prior work investigating techniques to formalize the definition of a covert channel and use formal methods to analyze a system model to identify covert channels <ref> [2, 9, 3, 4, 7] </ref>. This paper proposes a definition of noninterference that while similar to prior definitions is more intuitive. <p> For simplicity, we ignore L in the following and assume every component can be specified as a pair (I; N ). Consequently, the definition of noninterference provided in Section 4 does not address liveness. Some prior definitions of noninterference such as those in references [10] and <ref> [7] </ref> do address liveness, so the definition provided here is currently deficient in this area by comparison. We expect that once we extend our representation of TLA to address liveness, the extension of our definition of noninterference to address liveness will be straightforward. <p> Then, the low-level event returning the current time in response to a stat call is accepted after seq but is not accepted after seq l when the stat call would have to return the previous access time for the file. A similar policy was presented in reference <ref> [7] </ref>. The approach there was to define noninterference in terms of determinism. The system under consideration is merged with arbitrary high-level behavior. Then, all of the high-level 2 In this approach, requests processes make of the system are viewed as system inputs. behavior is hidden. <p> Once this is done, countermeasures can be inserted to address intolerable exploitations. In these cases it is desirable to use a conditional noninterference policy which states that the system contains no covert channels except for certain exceptional cases. Of the policies described previously, only reference <ref> [7] </ref> provides a statement of such a noninterference policy. This policy requires there be no signaling from a high-level process to low-level processes as long as the high-level process is constrained to a specified behavior [7]. <p> Of the policies described previously, only reference <ref> [7] </ref> provides a statement of such a noninterference policy. This policy requires there be no signaling from a high-level process to low-level processes as long as the high-level process is constrained to a specified behavior [7]. However, even this statement of noninterference is not quite general enough since it is sometimes necessary to restrict the behavior of the low-level processes, too. For example, it might be acceptable for arbitrary high-level processes to signal to certain trusted low-level processes. 4. <p> Note, however, that the definition of noninterference provided in reference <ref> [7] </ref> is similar in this regard. Before stating the proposed definition of noninterference, it is first necessary to define a couple more concepts. First, we need to represent a process cmp executing on a system sys. We view each as peers cooperating to perform a task. <p> Note that other conditional noninterference policies have also allowed for exceptions to pure noninterference to be identified. Typically, these policies have only allowed for restrictions to be placed on the sending subject. For example, the conditional noninterference policy in reference <ref> [7] </ref> provides a means for stating that there is no flow of information to the receiver as long as the sender behaves in a specified fashion. The noninterference policy described here is a further generalization that allows restrictions to be placed on the receiving process, too. <p> However, this system does allow the sending process to signal to the receiving process. Roscoe discusses the difficulties of analyzing noninterference in nondeterminism systems in reference <ref> [7] </ref>. A similar concern with the definition of noninterference given in the previous section is that even though a system might prevent a sending process from interfering with a receiving process, it might not prevent a refinement of the sending process from interfering with a refinement of a receiving process. <p> As an example of applying a CSP version of noninterference to a system specified in TLA, consider the definition in reference <ref> [7] </ref> which requires that the system obtained by hiding sender events is deterministic when viewed by the receiver. The above sequences of events show that the system specified in TLA can perform two different outputs to the receiver as the result of the same input by the receiver. <p> The above sequences of events show that the system specified in TLA can perform two different outputs to the receiver as the result of the same input by the receiver. Consequently, the system appears nondeterministic to the receiver and does not satisfy the definition of noninterference in reference <ref> [7] </ref>. By translating existing theories of noninterference into TLA, it is possible to apply those theories to systems specified in TLA. This allows prior definitions to be used in TLA just as easily as the definition proposed here. <p> This type of composability result holds for policies such as those in references [4], [5], [10], and <ref> [7] </ref>. We have not spent much time considering the composability of the definition of noninterference given here, so it is clearly an area for future research. We simply make some initial observations here.
Reference: [8] <author> A. W. Roscoe and L. Wulf. </author> <title> Composing and Decomposing Systems under Security Properties. </title> <booktitle> In Proceedings of the IEEE Computer Security Foundations Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: Composition and Refinement A recent area of research regarding noninterference statements is their composability. Early work in this area includes McCullough's statement of restrictiveness [4]. More recent work includes that described in references [5] and <ref> [8] </ref>. Essentially, the question is whether the composition of two secure components results in a secure composite system (where secure means satisfies noninterference). The motivator for this research is the desire to use a divide-and-conquer approach to analyzing systems.
Reference: [9] <author> J. Rushby. Noninterference, </author> <title> Transitivity, and Channel-Control Security Policies. </title> <type> Technical report, </type> <institution> SRI International, </institution> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: There has been much prior work investigating techniques to formalize the definition of a covert channel and use formal methods to analyze a system model to identify covert channels <ref> [2, 9, 3, 4, 7] </ref>. This paper proposes a definition of noninterference that while similar to prior definitions is more intuitive. <p> Descriptions of this class of approach can be found in references <ref> [9] </ref> and [2]. Another class of approach is characterized by Thayer and Johnson's notion of correctability [3]. <p> The final class of statements provides more design guidance through the explicit restrictions on transitions, but does not provide an abstract statement of the resulting noninterference property. Consequently, it is difficult to determinine what the security requirement really means in this approach. Ideally, an unwinding theorem <ref> [9] </ref> can be proved demonstrating that the conditions on individual transitions are sufficient conditions to establish a more intuitive definition of noninterference in terms of system behaviors. Another disadvantage of most of the prior definitions is that they are absolute statements; a system satisfies them or it does not. <p> For example, this definition appears similar to that used by Rushby in reference <ref> [9] </ref>. However, there is a significant difference. In prior definitions, cmp 1 and cmp 2 would be either the identity of a process or a security attribute of a process. <p> Furthermore, if the definition of noninterference can be reduced to a collection of unwinding conditions, the unwinding conditions can often be addressed using TLA proof rules. For example, the definitions in references <ref> [2, 9] </ref> can also be formalized in TLA as properties of properties. These definitions of noninterference have associated unwinding theorems that allow verification of the noninterference policy to be reduced to verification of conditions on individual instructions. <p> Finally, the range of policies that can be supported by the proposed statement of noninterference should be considered. In addition to allowing for the statement of policies prohibiting components from interfering even though a covert channel is present, the generality might be useful in areas such as intransitive noninterference <ref> [9] </ref>.
Reference: [10] <author> P. Ryan. </author> <title> A CSP Approach to Noninterference and Unwinding. </title> <journal> IEEE Cipher, </journal> <year> 1990. </year>
Reference-contexts: For simplicity, we ignore L in the following and assume every component can be specified as a pair (I; N ). Consequently, the definition of noninterference provided in Section 4 does not address liveness. Some prior definitions of noninterference such as those in references <ref> [10] </ref> and [7] do address liveness, so the definition provided here is currently deficient in this area by comparison. We expect that once we extend our representation of TLA to address liveness, the extension of our definition of noninterference to address liveness will be straightforward. <p> In other words, it is not required that there be a unique new state for each operation and starting state. There are several other approaches based on considering sequences of events. For example, reference <ref> [10] </ref> defines noninterference in terms of sequences of events accepted by the system. <p> This type of composability result holds for policies such as those in references [4], [5], <ref> [10] </ref>, and [7]. We have not spent much time considering the composability of the definition of noninterference given here, so it is clearly an area for future research. We simply make some initial observations here.
Reference: [11] <author> N. Shankar. </author> <title> A lazy approach to compositional verification. </title> <type> Technical Report TSL-93-08, </type> <institution> SRI International, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: The attribute init corresponds to TLA's I. The attributes guar and rely provide a partitioning of TLA's N based on whether the agent is within the component or an environment agent. This partitioning and the terminology guarantee and rely are based on earlier work by Shankar <ref> [11] </ref>. We refer to the above as the component form of a system and use terms such as cmp, cmp 1 , and cmp 2 to denote specific instances.
References-found: 11

