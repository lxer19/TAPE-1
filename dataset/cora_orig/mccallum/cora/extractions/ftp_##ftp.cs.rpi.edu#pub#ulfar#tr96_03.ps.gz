URL: ftp://ftp.cs.rpi.edu/pub/ulfar/tr96_03.ps.gz
Refering-URL: http://www.cs.rpi.edu/~ulfar/stl2ada.html
Root-URL: http://www.cs.rpi.edu
Email: Email: fulfar,akonstang@cs.rpi.edu  
Title: Implementing the C Standard Template Library in Ada 95  
Date: April 18, 1996  
Address: NY 12180  
Affiliation: Troy,  Institute.  
Abstract: Preliminary Report) Ulfar Erlingsson Alexander V. Konstantinou Computer Science Department fl Rensselaer Polytechnic Institute Abstract The Standard Template Library (STL), a recent addition to the ANSI C ++ standard, "provides a set of well structured generic C ++ components that work together in a seamless way" [SL94]. The popularity of STL stems from its combination of an orthogonal design, solid theoretical foundation, and strong emphasis on efficiency. This paper presents a design scheme for implementing the C ++ STL library components in Ada, using features introduced in the 1995 Ada standard [Ada95a]. Discussion is based on a prototype Ada 95 implementation, segments of which illustrate the paper. This work was prepared under the supervision of Dr. David Musser at Rensselaer Polytechnic 
Abstract-found: 1
Intro-found: 1
Reference: [Ada95a] <institution> Ada 95 language reference manual. Technical Report ISO/IEC 8652:1995, AD A293760, Intermetrics, Inc., </institution> <year> 1995. </year>
Reference-contexts: The next section, on iterators, expands on this feature. There are numerous other changes, notably those involving object oriented programming features, which are not used by this Ada STL implementation. Interested readers are referred to <ref> [Ada95a] </ref> and [Ada95b]. 4 Iterators In C ++ STL, container iterators are objects providing a certain functionality imported from their container. Depending on this functionality five iterator categories are defined: input, output, forward, bidirectional, and random access iterators.
Reference: [Ada95b] <author> Ada 95 rationale : The language, </author> <title> the standard libraries. </title> <type> Technical Report AD A293708, </type> <institution> Intermetrics, Inc., </institution> <month> January </month> <year> 1995. </year> <month> 13 </month>
Reference-contexts: The next section, on iterators, expands on this feature. There are numerous other changes, notably those involving object oriented programming features, which are not used by this Ada STL implementation. Interested readers are referred to [Ada95a] and <ref> [Ada95b] </ref>. 4 Iterators In C ++ STL, container iterators are objects providing a certain functionality imported from their container. Depending on this functionality five iterator categories are defined: input, output, forward, bidirectional, and random access iterators.
Reference: [DWP] <institution> Working paper for draft proposed international standard for information systems programming language C ++ . Technical Report X3J16/95-0185 WG21/N0785, American National Standards Institute. </institution>
Reference-contexts: 1 Introduction The C ++ Standard Template Library (STL), a recent addition to the draft ANSI language standard <ref> [DWP] </ref>, "provides a set of well structured generic C ++ components that work together in a seamless way" [SL94]. The design of the library emphasizes component decomposition, orthogonality, and strict semantic and complexity requirements.
Reference: [MS89] <author> David R. Musser and Alexander Stepanov. </author> <title> The Ada generic library : linear list processing packages. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: This paper will present an implementation scheme for porting the the C ++ Standard Template Library to Ada 95. The availability of generics in Ada, as early as 1983, has long attracted researchers of generic library components, including the designers of the C ++ Standard Template Library <ref> [MS89] </ref>. Language restrictions in the 1983 standard, however, prevented the implementation of some of the main STL components. Now that the long awaited revised 9X standard for Ada has been finalized into Ada 95, many of the earlier restrictions have been lifted, making it appropriate to re-examine the issue.
Reference: [SL94] <author> Alexander Stepanov and Meng Lee. </author> <title> The standard template library. </title> <type> Technical Report HPL-94-34, </type> <institution> Hewlett-Packard Laboratories, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The C ++ Standard Template Library (STL), a recent addition to the draft ANSI language standard [DWP], "provides a set of well structured generic C ++ components that work together in a seamless way" <ref> [SL94] </ref>. The design of the library emphasizes component decomposition, orthogonality, and strict semantic and complexity requirements. Efficiency is another important consideration, and the library components closely exploit the C ++ template mechanism to minimize run time overhead. <p> In this sense, little attention had been paid to important details such as run-time exceptions and efficient memory allocation. Details concerning this prototype implementation can be found in the appendix. 2 C ++ STL Overview The C ++ Standard Template Library, see <ref> [SL94] </ref>, provides a set of generic components and a consistent interface between them. <p> Following is a brief listing and discussion of each category. Interested readers should refer to <ref> [SL94] </ref> for a more detailed discussion. Containers Containers in STL are generic in their element types; associative containers are also generic in an ordered key type. STL provides vectors, lists and deques as sequence containers, and sets, multisets, maps and multimaps as sorted associative containers.
Reference: [STL94] <institution> The hewlett packard standard template library reference implementation, </institution> <month> August </month> <year> 1994. </year> <note> Revised October 31, 1995. ftp://butler.hpl.hp.com/stl. 14 </note>
Reference-contexts: The user need only pass the correct subpackage to an algorithms package to instantiate the algorithms for a container. 6.1 Lists The Ada implementation of lists is modeled very closely on the C ++ reference implementation in <ref> [STL94] </ref>. Lists are doubly linked and circular with a sentinel node before the beginning and after the end. In order to keep the Ada implementation as simple as possible, only a subset of the member functions of lists were implemented. These functions are empty, size, push back and pop back. <p> In fact, the Put operation need not operate only on streams, but can be a simple file operation, since the values placed are all of the same type. In accordance with the C ++ STL reference implementation <ref> [STL94] </ref>, the output stream iterator increment operator is implemented as a null operation.
References-found: 6

