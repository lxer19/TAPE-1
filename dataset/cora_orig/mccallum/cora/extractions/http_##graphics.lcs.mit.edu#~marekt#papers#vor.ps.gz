URL: http://graphics.lcs.mit.edu/~marekt/papers/vor.ps.gz
Refering-URL: http://graphics.lcs.mit.edu/~marekt/publications.html
Root-URL: 
Title: CG19 Polygonal Approximation of Voronoi Diagrams of Triangles in Three Dimensions  
Author: Marek Teichmann Seth Teller 
Affiliation: MIT Graphics Group  
Abstract: We describe a robust adaptive marching tetrahedra type algorithm for constructing a polygonal approximation of the Voronoi Diagram of an arbitrary set of triangles in three dimensions. Space is adaptively subdivided into a set of tetrahedral cells, and the set of Voronoi regions which intersect each cell is determined exactly using a simple primitive we introduce. We obtain a small number of different types of cells in which we then construct the polygonal approximation. This has applications in the visualization of geometric structures, and in Solid Modeling, for example mesh generation and offset surface computation. Our algorithm can also be used to compute the exact Distance Transform of a three dimensional image, of interest in Visualization, and as a preprocessing step for answering nearest triangle queries. We also present an exact method for computing the Voronoi Diagram (Medial Axis) of a convex polytope in three dimensions with worst case running time of O(n 2 ) based on a reduction to convex hull in four dimensions. The practical advantage of this method over previous algorithms is that several robust implementations exist for computing the convex hull.
Abstract-found: 1
Intro-found: 1
Reference: [BF95] <author> Jules Bloomenthal and Keith Ferguson. </author> <title> Polygonization of Non-Manifold implicit surfaces. </title> <editor> In Robert Cook, editor, </editor> <booktitle> SIGGRAPH 95 Conference Proceedings, </booktitle> <pages> pages 309-316. </pages> <publisher> ACM SIGGRAPH, Addison Wesley, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Our approximation algorithm in effect polygonizes the non manifold surfaces that occur in the Voronoi diagram, inside each cell of a hierarchical adaptive tiling of three dimensional space. In this respect, it generalizes the algorithm of Bloomenthal <ref> [BF95] </ref> to be adaptive. This adaptive nature simplifies the cases that occur when examining a given tetrahedron, and improves handling of surface intersections, at the cost of increasing the number of triangles produced. <p> The most recent published available algorithm is due to Bloomenthal <ref> [BF95] </ref>, but does not deal with more than one vertex of the surface in a given (tetrahedral) cell, or on a given cell face. <p> Further subdivision will take place only for complex cells, such as cells containing Voronoi vertices. Our algorithm is an adaptive version of the algorithm of Bloomenthal <ref> [BF95] </ref>, that is specialized for Voronoi surfaces. It is complete in the sense that using subdivision, we are not limited to a single Voronoi vertices and edges in each initial cell, and correctly identify them, up to a requested resolution. <p> If successful, and if the edge does not stray out of the cell (as verified by FindVEdgeOnFace), approximating triangles are created according to case a) in the Figure. Subdivision occurs otherwise. Four labels. If FindVVertexInCell locates a vertex, and if jV (C)j = 4, we create triangles as in <ref> [BF95] </ref>, see Figure 3a). If jV (C)j 6= 4, we do a subdivision with the vertex as apex of 4 sub-tetrahedra, as in Figure 4c).
Reference: [Blo94] <author> Jules Bloomenthal. </author> <title> An implicit surface polygonizer. </title> <editor> In Paul Heckbert, editor, </editor> <booktitle> Graphics Gems IV, </booktitle> <pages> pages 324-349. </pages> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: fl Supported by an NSERC postdoctoral fellowship. 1 located exactly (up to numerical precision.) The advantage of tetrahedral cells is that the number of different labelings of their vertices is much smaller than for a cube, the same reason for which cubes are divided into tetrahedra in isosurface polygonizing algorithms <ref> [Blo94] </ref>. Medial Axis of a polytope. For the important special case of a convex polytope, we also present a simple, easily implementable, exact algorithm to compute the Voronoi Diagram (Medial Axis) of a convex polytope. <p> For example we could start with the approximation mentioned above, and apply an algorithm for polygonizing non-manifold implicit surfaces, which is a generalization of an isosurface extraction algorithm such as Marching Cubes [LC87] or a tetrahedral version of it such as <ref> [Blo94] </ref>. The most recent published available algorithm is due to Bloomenthal [BF95], but does not deal with more than one vertex of the surface in a given (tetrahedral) cell, or on a given cell face. <p> In our implementation each cube is subdivided into 6 tetrahedra (also called Kuhn simplices), which are similar, up to their mirror image, as in <ref> [Blo94] </ref> and others. This subdivision has the advantage of being compatible with a similar subdivision with half the cell size. We will refer to cell vertices of cells as corners. <p> In the two label case, we take the intersection of the cell edges with the bisector whose generators are the cell corner labels. Then we construct the 2 or 3 triangles with vertices at these intersections that approximate the surface, as in <ref> [Blo94] </ref>. In the three label case, one can find the intersection of the Voronoi edge with the cell, (see Section 6.3) or appropriate points on two faces (with three labels) if none are found. <p> If there are two labels, then a Voronoi surface must intersect the cell. If jV (C)j = 2, we use FindBisector on the cell edges having 2 labels to determine where the surface intersects each cell edge and create a two or three triangles, approximating the surface as in <ref> [Blo94] </ref>. In the case where the surface exits through another face, subdivision occurs. This is easily tested using TestLabel on the face. Some of this information is already available since TestLabel has been used to find L (C), and is cached.
Reference: [CHL91] <author> C.S. Chiang, C. M. Hoffman, and R. E. Lynch. </author> <title> How to compute offsets without self-intersection. </title> <booktitle> In Curves and Surfaces in Computer Vision and Graphics II, </booktitle> <volume> volume 1610, </volume> <pages> pages 76-87. SPIE, </pages> <year> 1991. </year>
Reference-contexts: It can be used for example for hexahedral mesh generation for finite element applications [GP92, STG + 97] and offset surface generation <ref> [CHL91] </ref>. Voronoi diagrams of triangles are also an fundamental structure in Computational Geometry, and it is interesting to be able to visualize such structures.
Reference: [Ede87] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: Hence y is on a (min (4; 4 jIj))-face of the Medial Axis of P (barring a degeneracy). The computation of the intersection can be done by taking the polar dual of the planes g i and computing the convex hull of the resulting points <ref> [Ede87] </ref>. This gives an algorithm of time complexity O (n 2 ) [Ede87] for computing the Medial Axis of an n-sided polytope. 9 Concluding remarks We have presented a simple algorithm at the intersection of Computational Geometry and Visualization for approximating the Voronoi diagram of a set of triangles or polyhedra. <p> The computation of the intersection can be done by taking the polar dual of the planes g i and computing the convex hull of the resulting points <ref> [Ede87] </ref>. This gives an algorithm of time complexity O (n 2 ) [Ede87] for computing the Medial Axis of an n-sided polytope. 9 Concluding remarks We have presented a simple algorithm at the intersection of Computational Geometry and Visualization for approximating the Voronoi diagram of a set of triangles or polyhedra.
Reference: [GO97] <author> J. E. Goodman and J. O'Rourke, </author> <title> editors. Handbook of Discrete and Computational Geometry. </title> <publisher> CRC Press LLC, </publisher> <year> 1997. </year>
Reference-contexts: While slower than the O (n log n) algorithm of [Hel94], this algorithm relies on the computation of a convex hull in 4 dimensions, for which several implementations, both in exact and floating point arithmetic are available <ref> [GO97, chapter 52] </ref>. 2 Related Work There are several ways of approximating Voronoi diagrams. The first was introduced in a paper by Vleugels and Overmars [VO95].
Reference: [GP92] <author> H. N. Gursoy and N. M. Patrikalakis. </author> <title> An automatic coarse and fine surface mesh generation scheme based on medial axis transform: Part I algorithm. </title> <journal> Engineering with Computers, </journal> <volume> 8 </volume> <pages> 121-137, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Computing the Voronoi Diagram of a set of polygons or of a polyhedron, of which the Medial Axis is a subset, is an important problem in Solid Modeling. It can be used for example for hexahedral mesh generation for finite element applications <ref> [GP92, STG + 97] </ref> and offset surface generation [CHL91]. Voronoi diagrams of triangles are also an fundamental structure in Computational Geometry, and it is interesting to be able to visualize such structures.
Reference: [Hel91] <author> M. </author> <title> Held. On the Computational Geometry of Pocket Machining, </title> <booktitle> volume 500 of Lecture Notes Comput. </booktitle> <publisher> Sci. Springer-Verlag, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: Note that, by including triangle vertices and edges as sites, we guarantee that for every point p 2 R 3 in the interior of a Voronoi region, there is exactly one site closest to p. See for example <ref> [Hel91] </ref> for a similar approach in the plane. Furthermore every bisector has two generator sites associated with it and hence each bisector has one algebraic formula. 4 The wavefront We consider a wavefront propagating at constant speed from T . A prairie fire analogy has also been used [Hel91]. <p> for example <ref> [Hel91] </ref> for a similar approach in the plane. Furthermore every bisector has two generator sites associated with it and hence each bisector has one algebraic formula. 4 The wavefront We consider a wavefront propagating at constant speed from T . A prairie fire analogy has also been used [Hel91]. The wavefront is the set of points at a given distance to T , also called an offset surface [Hel94], (Figure 1).
Reference: [Hel94] <author> M. </author> <title> Held. On computing Voronoi diagrams of convex polyhedra by means of wavefront propagation. </title> <booktitle> In Proc. 6th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 128-133, </pages> <year> 1994. </year>
Reference-contexts: The worst-case running time is O (n 2 ), for n input bounding planes. While slower than the O (n log n) algorithm of <ref> [Hel94] </ref>, this algorithm relies on the computation of a convex hull in 4 dimensions, for which several implementations, both in exact and floating point arithmetic are available [GO97, chapter 52]. 2 Related Work There are several ways of approximating Voronoi diagrams. <p> A prairie fire analogy has also been used [Hel91]. The wavefront is the set of points at a given distance to T , also called an offset surface <ref> [Hel94] </ref>, (Figure 1). For t 0, let the wavefront F t be the (set of) surface (s) defined by F t = fp 2 R 3 : d (p; T ) = tg: We note that F t is composed of planar, cylindrical and spherical sections.
Reference: [LC87] <author> William E. Lorensen and Harvey E. Cline. </author> <title> Marching cubes: A high resolution 3D surface construction algorithm. </title> <editor> In Maureen C. Stone, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '87 Proceedings), </booktitle> <volume> volume 21, </volume> <pages> pages 163-169, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Another method is to approximate Voronoi region boundaries with polygons. For example we could start with the approximation mentioned above, and apply an algorithm for polygonizing non-manifold implicit surfaces, which is a generalization of an isosurface extraction algorithm such as Marching Cubes <ref> [LC87] </ref> or a tetrahedral version of it such as [Blo94]. The most recent published available algorithm is due to Bloomenthal [BF95], but does not deal with more than one vertex of the surface in a given (tetrahedral) cell, or on a given cell face.
Reference: [Mil93] <author> V. Milenkovic. </author> <title> Robust construction of the Voronoi diagram of a polyhedron. </title> <booktitle> In Proc. 5th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 473-478, </pages> <year> 1993. </year>
Reference-contexts: Next, we numerically find their common intersection (s) and test if the result is actually equidistant to the sites. The precision of the answer affects only the precision of the resulting approximating polygonal surface. See also <ref> [Mil93] </ref> for an alternative. 6.4 Processing one tetrahedron In phase 2 of the algorithm, to polygonize the content of a cell C, we distinguish cases according to the number of labels in L (C).
Reference: [Moo92] <editor> Douglas Moore. Subdividing simplices. In David Kirk, editor, </editor> <title> Graphics Gems III. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Neighbors at a lower subdivision level are triangulated. The tetrahedral cells are subdivided with planes parallel to the cell sides and through edge midpoints as in <ref> [Moo92] </ref>, see Figure 4a), unless degeneracies occur (Section 6.4). Phase 3. In the last phase, triangles approximating the surface are created, as described in Section 6.4. 6.3 Primitives We first describe the additional primitive operations that we will need and their implementation.
Reference: [Sam90] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: It adaptively subdivides the region of interest into tetrahedral cells, with vertices on a hierarchical grid, such that each cell has a number of labels sufficiently small to allow for efficient propagation. This number must be determined experimentally. We insert input triangles into a standard octree <ref> [Sam90] </ref>. Octree nodes are subdivided until we achieve the same size for nodes that contain input triangles (to simplify the propagation), and no node has more than the required number of triangles. In addition, we require that each cell contains at most one input vertex.
Reference: [SP95] <author> E. C. Sherbrooke and N. M. Patrikalakis. </author> <title> Computation of medial axis transforms of 3d polyhedra. </title> <editor> In J. R. Rossignac and C. M. Hoffmann, editors, </editor> <booktitle> Proc. Third ACM Solid Modeling Conference, </booktitle> <year> 1995. </year>
Reference-contexts: There is also an extensive literature in the Solid modeling field on computing or approximating the Medial Axis. A recent survey can be found in the paper by Sherbrooke and Patrikalakis <ref> [SP95] </ref>.
Reference: [STG + 97] <author> D.W. Storti, G. M. Turkiyyah, M. A. Ganter, C. T. Lim, and D. M. </author> <title> Stal. </title> <booktitle> Skeleton-based modeling operations on solids. In Proc. Third ACM Solid Modeling Conference, </booktitle> <year> 1997. </year>
Reference-contexts: 1 Introduction Computing the Voronoi Diagram of a set of polygons or of a polyhedron, of which the Medial Axis is a subset, is an important problem in Solid Modeling. It can be used for example for hexahedral mesh generation for finite element applications <ref> [GP92, STG + 97] </ref> and offset surface generation [CHL91]. Voronoi diagrams of triangles are also an fundamental structure in Computational Geometry, and it is interesting to be able to visualize such structures.
Reference: [VO95] <author> J. Vleugels and M. Overmars. </author> <title> Approximating generalized Voronoi diagrams in any dimension. </title> <type> Report UU-CS-95-14, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, Netherlands, </address> <year> 1995. </year> <month> 10 </month>
Reference-contexts: The error in the approximation is bounded due to the cell size and bounds on the curvature of the surfaces involved <ref> [VO95] </ref>. <p> The first was introduced in a paper by Vleugels and Overmars <ref> [VO95] </ref>. The paper describes the algorithm for any dimension and objects more general than triangles, but we shall specialize to 3 dimensions, and a set of possibly vertex or edge-adjacent, but otherwise disjoint triangles T . In [VO95], space is divided into axial cells of fixed size, and the Voronoi diagram <p> The first was introduced in a paper by Vleugels and Overmars <ref> [VO95] </ref>. The paper describes the algorithm for any dimension and objects more general than triangles, but we shall specialize to 3 dimensions, and a set of possibly vertex or edge-adjacent, but otherwise disjoint triangles T . In [VO95], space is divided into axial cells of fixed size, and the Voronoi diagram is approximated by the set of cells intersected by the diagram (with a caveat, see below.) This approximation labels each cube corner with the triangle of T closest to that corner and marks those cells with more <p> For example, no practical method for doing this is given in <ref> [VO95] </ref>. In our algorithm, such computations are ordered in such a way as to take advantage of coherence in the Voronoi diagram, that is the queries can be answered definitely "during construction". There is also an extensive literature in the Solid modeling field on computing or approximating the Medial Axis. <p> We are given a set of triangles, possibly sharing edges or vertices. We will define the set of Voronoi sites T to be the set of relatively open triangular faces, along with their open edges, and vertices. Following <ref> [VO95] </ref>, we define the bisector of two Voronoi sites S; T as bis (S; T ) = fp 2 R 3 : d (p; S) = d (p; T )g: The bisector is be a portion of either a plane, a paraboloid, a parabolic cylinder or cone or a hyperboloid. <p> Of course, there are other cell types: a simple example can be seen on the left in Figure 2 where two Voronoi edges (thin lines) cross a cell without intersecting. However, if we consider only labels at cell corners as in <ref> [VO95] </ref>, it is possible to produce a first approximation, which is consistent in the sense that the boundary of each region produced contains no holes, also shown in with grey lines on the left in Figure 2. <p> Finally, if jV (C)j = 1, a portion of the surface enters the face without crossing three edges. In this case, we subdivide the cell, as in Figure 4a). Note that since bisector curvature is bounded subdivision will stop eventually <ref> [VO95] </ref>. Our implementation limits subdivision to a predetermined level. Three labels. Refer to Figure 3. If jL (C)j = 3, and two faces have 3 different vertex labels (3 label canonical case), we attempt to find the intersections of a Voronoi edge with them using FindVEdgeOnFace on each cell face.
References-found: 15

