URL: http://www.cs.rutgers.edu/~uli/LCSR-TR283.ps
Refering-URL: http://www.cs.rutgers.edu/~uli/pubs.html
Root-URL: http://www.cs.rutgers.edu
Title: Automatic Data Layout With Read-Only Replication and Memory Constraints  
Author: Ulrich Kremer 
Affiliation: Department of Computer Science Rutgers University  
Abstract: TECHICAL REPORT LCSR-TR283 December 1996 
Abstract-found: 1
Intro-found: 1
Reference: [AG94] <author> R. Govindarajan E. R. Altman and G. R. Gao. </author> <title> Minimizing register requirements under resource-constrained rate-optimal software pipelining. </title> <booktitle> In Proceedings of the 27th Annual International Symposium on Microarchitecture, </booktitle> <address> San Jose, CA, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout [GAL95, Phi95] Using integer programming for instruction scheduling under resource constraints for super-scalar machines has been discussed by Feautrier [Fea94] and Ning, Govindarajan, Altman and Gao <ref> [NG93, AG94, AGG95] </ref>. 12 6 Conclusion and Future Work Read-only replication is an important technique to reduce communication costs by avoiding otherwise necessary global communication such as an array transpose. However, if not applied selectively, read-only replication may result in an executable that no longer fits onto the parallel machine.
Reference: [AGG + 94] <author> E. Ayguade, J. Garcia, M. Girones, J. Labarta, J. Torres, and M. Valero. </author> <title> Detecting and using affinity in an automatic data distribution tool. </title> <booktitle> In Proceedings of the Seventh Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Tor-res and Valero at the Polytechnic University of Catalunya in Barcelona, <ref> [AGG + 94, GAL95] </ref>, and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95]. The notion of glacial variables has been introduced by Autrey and Wolfe at the Oregon Graduate Institute in the context of program specialization and run-time code generation [AW96].
Reference: [AGG95] <author> E. R. Altman, R. Govindarajan, and G. R. Gao. </author> <title> Scheduling and mapping: Software pipelining in the presence of structural hazards. </title> <booktitle> In Proceedings of the SIGPLAN '95 Conference on Programming Language Design and Implementation, </booktitle> <address> La Jolla, CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout [GAL95, Phi95] Using integer programming for instruction scheduling under resource constraints for super-scalar machines has been discussed by Feautrier [Fea94] and Ning, Govindarajan, Altman and Gao <ref> [NG93, AG94, AGG95] </ref>. 12 6 Conclusion and Future Work Read-only replication is an important technique to reduce communication costs by avoiding otherwise necessary global communication such as an array transpose. However, if not applied selectively, read-only replication may result in an executable that no longer fits onto the parallel machine.
Reference: [AL93] <author> J. Anderson and M. Lam. </author> <title> Global optimizations for parallelism and locality on scalable parallel machines. </title> <booktitle> In Proceedings of the SIGPLAN '93 Conference on Programming Language Design and Implementation, </booktitle> <address> Albuquerque, NM, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The presented solutions differ significantly in the assumptions that are made about the input language, the possible set of data layouts, the compilation system, and the target machine architecture. Our work is similar in nature to the recent work done by Anderson and Lam at Stanford University <ref> [AL93] </ref>, Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Tor-res and Valero at the Polytechnic University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95].
Reference: [AW96] <author> T. Autrey and M. Wolfe. </author> <title> Initial results for glacial variable analysis. </title> <booktitle> In Proceedings of the Nineth Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> San Jose, CA, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Read-only copies with appropriate life times and data mappings avoid otherwise necessary communication. However, read-only replication may not always be possible due to the increase in the program's memory requirements. Many scientific applications contain array variables that are much less frequently modified than they are referenced (glacial variables <ref> [AW96] </ref>). A read-only region of an array variable is a program region where the array is not modified and all references to the array within the region refer to the same array value. <p> The notion of glacial variables has been introduced by Autrey and Wolfe at the Oregon Graduate Institute in the context of program specialization and run-time code generation <ref> [AW96] </ref>. They showed that a significant number of glacial array variables can be found in ten of the PERFECT benchmark programs [Clu89]. In contrast to previous work, we are the first to consider read-only replication and memory constraints in a unified framework.
Reference: [Bix92] <author> R. Bixby. </author> <title> Implementing the Simplex method: The initial basis. </title> <journal> ORSA Journal on Computing, </journal> <volume> 4(3), </volume> <year> 1992. </year>
Reference-contexts: For the example program, seven resource constraints over the crossing edges are needed to express the memory restrictions, three for outside&first and four for outside&follow. The problem instances were solved using CPLEX 1 V4.0, a linear integer programming tool and library, partly developed by Robert Bixby at Rice University <ref> [Bix92] </ref>, running on a SUN UltraSparc1 (143MHz/64Mbyte). The reported numbers are for a solution strategy that uses a dual simplex instead of the default primal simplex for the initial relaxation 2 . The timing routine had a granularity of 10 milliseconds.
Reference: [BKK + 94a] <author> D. Bau, I. Kodukula, V. Kotlyar, K. Pingali, and P. Stodghill. </author> <title> Solving alignment using elementary linear algebra. </title> <booktitle> In Proceedings of the Seventh Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York, </address> <month> August </month> <year> 1994. </year> <month> 13 </month>
Reference: [BKK94b] <author> R. Bixby, K. Kennedy, and U. Kremer. </author> <title> Automatic data layout using 0-1 integer programming. </title> <booktitle> In Proceedings of the International Conference on Parallel Architectures and Compilation Techniques (PACT94), </booktitle> <pages> pages 111-122, </pages> <address> Montreal, Canada, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: A PCFG is a compacted version of a control flow graph where all CFG nodes associated with a phase are represented by a single node in the PCFG, and edges are annotated with control flow information such as branch probabilities or frequency of execution <ref> [BKK94b, Kre95] </ref>. A node in the DLG represents a candidate data layout in the data layout search space of a phase. The edges represent possible remappings between candidate layouts. Nodes and edges are weighted with their estimated execution times. <p> The following discussion concentrates on the impact of read-only arrays on the DLG construction and 0-1 integer programming formulation of the data layout selection problem. For arrays that are not read-only, the standard DLG representation and 0-1 formulation is used as discussed in <ref> [BKK94b, Kre95] </ref>. 8 3.1.1 DLG Edges New edges for read-only arrays are introduced into the DLG as follows: 1.
Reference: [Bri92] <author> P. Briggs. </author> <title> Register Allocation via Graph Coloring. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: The read-only region associated with the definition of a read-only array is the part of the program for which the read-only value is life, i.e., is its life range <ref> [Bri92] </ref>. The definition of a read-only array dominates all uses of the array in the PCFG. Read-only regions of different arrays may overlap, resulting in potential conflicts where not all desired copies may fit into the available memory.
Reference: [CGS93] <author> S. Chatterjee, J.R. Gilbert, and R. Schreiber. </author> <title> The alignment-distribution graph. </title> <booktitle> In Proceedings of the Sixth Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1993. </year>
Reference: [CGSS94] <author> S. Chatterjee, J. R. Gilbert, R. Schreiber, and T. She*er. </author> <title> Array distribution in data-parallel programs. </title> <booktitle> In Proceedings of the Seventh Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Our work is similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland <ref> [CGSS94, SSP + 95] </ref>, Ayguade, Garcia, Girones, Labarta, Tor-res and Valero at the Polytechnic University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95].
Reference: [CGST93] <author> S. Chatterjee, J.R. Gilbert, R. Schreiber, and S-H. Teng. </author> <title> Automatic array alignment in data-parallel programs. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <address> Albuquerque, NM, </address> <month> January </month> <year> 1993. </year>
Reference: [Clu89] <author> The Perfect Club. </author> <title> The Perfect Club benchmarks: efficient performance evaluation of supercomputers. </title> <journal> Int. J. Supercomp. Appl., </journal> <volume> 3(3) </volume> <pages> 5-40, </pages> <year> 1989. </year>
Reference-contexts: The notion of glacial variables has been introduced by Autrey and Wolfe at the Oregon Graduate Institute in the context of program specialization and run-time code generation [AW96]. They showed that a significant number of glacial array variables can be found in ten of the PERFECT benchmark programs <ref> [Clu89] </ref>. In contrast to previous work, we are the first to consider read-only replication and memory constraints in a unified framework.
Reference: [Fea94] <author> P. Feautrier. </author> <title> Fine-grain scheduling under resource constraints. </title> <booktitle> In Proceedings of the Seventh Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout [GAL95, Phi95] Using integer programming for instruction scheduling under resource constraints for super-scalar machines has been discussed by Feautrier <ref> [Fea94] </ref> and Ning, Govindarajan, Altman and Gao [NG93, AG94, AGG95]. 12 6 Conclusion and Future Work Read-only replication is an important technique to reduce communication costs by avoiding otherwise necessary global communication such as an array transpose.
Reference: [GAL95] <author> J. Garcia, E. Ayguade, and J. Labarta. </author> <title> A novel approach towards automatic data distribution. In Proceedings of the Workshop on Automatic Data Layout and Performance Prediction (AP'95), </title> <address> Houston, TX, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Tor-res and Valero at the Polytechnic University of Catalunya in Barcelona, <ref> [AGG + 94, GAL95] </ref>, and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95]. The notion of glacial variables has been introduced by Autrey and Wolfe at the Oregon Graduate Institute in the context of program specialization and run-time code generation [AW96]. <p> In contrast to previous work, we are the first to consider read-only replication and memory constraints in a unified framework. More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout <ref> [GAL95, Phi95] </ref> Using integer programming for instruction scheduling under resource constraints for super-scalar machines has been discussed by Feautrier [Fea94] and Ning, Govindarajan, Altman and Gao [NG93, AG94, AGG95]. 12 6 Conclusion and Future Work Read-only replication is an important technique to reduce communication costs by avoiding otherwise necessary global communication
Reference: [Gup92] <author> M. Gupta. </author> <title> Automatic Data Partitioning on Distributed Memory Multicomputers. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> September </month> <year> 1992. </year>
Reference: [HA90] <author> D. Hudak and S. Abraham. </author> <title> Compiler techniques for data partitioning of sequentially iterated parallel loops. </title> <booktitle> In Proceedings of the 1990 ACM International Conference on Supercomputing, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1990. </year>
Reference: [KLD92] <author> K. Knobe, J.D. Lukas, and W.J. Dally. </author> <title> Dynamic alignment on distributed memory systems. </title> <booktitle> In Proceedings of the Third Workshop on Compilers for Parallel Computers, </booktitle> <address> Vienna, Austria, </address> <month> July </month> <year> 1992. </year>
Reference: [KLS90] <author> K. Knobe, J. Lukas, and G. Steele, Jr. </author> <title> Data optimization: Allocation of arrays to reduce communication on SIMD machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 8(2) </volume> <pages> 102-118, </pages> <month> February </month> <year> 1990. </year>
Reference: [Kre95] <author> U. Kremer. </author> <title> Automatic Data Layout for Distributed Memory Machines. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> October </month> <year> 1995. </year> <note> Available as CRPC-TR95-559-S. </note>
Reference-contexts: A PCFG is a compacted version of a control flow graph where all CFG nodes associated with a phase are represented by a single node in the PCFG, and edges are annotated with control flow information such as branch probabilities or frequency of execution <ref> [BKK94b, Kre95] </ref>. A node in the DLG represents a candidate data layout in the data layout search space of a phase. The edges represent possible remappings between candidate layouts. Nodes and edges are weighted with their estimated execution times. <p> Node weights are not shown. Unlabeled edges have zero weight. "T" is the cost of performing a single array transpose, and "max" is the number of iterations of the outermost loop of the ADI integration kernel. The DLG construction as described in <ref> [Kre95] </ref> uses the assumption that only a single copy of an array can exist at any time during program execution. <p> The following discussion concentrates on the impact of read-only arrays on the DLG construction and 0-1 integer programming formulation of the data layout selection problem. For arrays that are not read-only, the standard DLG representation and 0-1 formulation is used as discussed in <ref> [BKK94b, Kre95] </ref>. 8 3.1.1 DLG Edges New edges for read-only arrays are introduced into the DLG as follows: 1.
Reference: [LC90] <author> J. Li and M. Chen. </author> <title> Index domain alignment: Minimizing cost of cross-referencing between distributed arrays. </title> <booktitle> In Frontiers90: The 3rd Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <address> College Park, MD, </address> <month> October </month> <year> 1990. </year> <month> 14 </month>
Reference: [LT93] <author> P. Lee and T-B. Tsai. </author> <title> Compiling efficient programs for tightly-coupled distributed memory computers. </title> <booktitle> In Proceedings of the 1993 International Conference on Parallel Processing, </booktitle> <address> St. Charles, IL, </address> <month> August </month> <year> 1993. </year>
Reference: [NDG95] <author> Q. Ning, V. V. Dongen, and G. R. Gao. </author> <title> Automatic data and computation decomposition for distributed memory machines. </title> <booktitle> In Proceedings of the 28th Annual Hawaii International Conference on System Sciences, </booktitle> <address> Maui, Hawaii, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Tor-res and Valero at the Polytechnic University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University <ref> [NDG95] </ref>. The notion of glacial variables has been introduced by Autrey and Wolfe at the Oregon Graduate Institute in the context of program specialization and run-time code generation [AW96]. They showed that a significant number of glacial array variables can be found in ten of the PERFECT benchmark programs [Clu89].
Reference: [NG93] <author> Q. Ning and G. R. Gao. </author> <title> A novel framework of register allocation for software pipelin-ing. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <address> Albuquerque, NM, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout [GAL95, Phi95] Using integer programming for instruction scheduling under resource constraints for super-scalar machines has been discussed by Feautrier [Fea94] and Ning, Govindarajan, Altman and Gao <ref> [NG93, AG94, AGG95] </ref>. 12 6 Conclusion and Future Work Read-only replication is an important technique to reduce communication costs by avoiding otherwise necessary global communication such as an array transpose. However, if not applied selectively, read-only replication may result in an executable that no longer fits onto the parallel machine.
Reference: [Phi95] <author> M. Philippsen. </author> <title> Automatic alignment of array data and processes to reduce communication time on DMPPs. </title> <booktitle> In Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <address> Santa Barbara, CA, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: In contrast to previous work, we are the first to consider read-only replication and memory constraints in a unified framework. More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout <ref> [GAL95, Phi95] </ref> Using integer programming for instruction scheduling under resource constraints for super-scalar machines has been discussed by Feautrier [Fea94] and Ning, Govindarajan, Altman and Gao [NG93, AG94, AGG95]. 12 6 Conclusion and Future Work Read-only replication is an important technique to reduce communication costs by avoiding otherwise necessary global communication
Reference: [RS89] <author> J. Ramanujam and P. Sadayappan. </author> <title> A methodology for parallelizing programs for mul-ticomputers and complex memory multiprocessors. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <address> Reno, NV, </address> <month> November </month> <year> 1989. </year>
Reference: [SSP + 95] <author> T. J. She*er, R. Schreiber, W. Pugh, J. R. Gilbert, and S. Chatterjee. </author> <title> Efficient distribution analysis via graph contraction. In Proceedings of the Workshop on Automatic Data Layout and Performance Prediction (AP'95), </title> <address> Houston, TX, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Our work is similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland <ref> [CGSS94, SSP + 95] </ref>, Ayguade, Garcia, Girones, Labarta, Tor-res and Valero at the Polytechnic University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95].
Reference: [TA96] <author> S. Tandri and T.S. Abdelrahman. </author> <title> Automatic data and computation partitioning on scalable shared-memory multiprocessors. </title> <booktitle> In Proceedings of the Nineth Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> San Jose, CA, </address> <month> August </month> <year> 1996. </year>
Reference: [WH95] <author> D. Wood and M. Hill. </author> <title> Cost-effective parallel computing. </title> <booktitle> IEEE Computer, </booktitle> <month> Feb </month> <year> 1995. </year>
Reference-contexts: Using a parallel machine instead of a uniprocessor is often the only choice for running memory intensive applications. In fact, some researchers argue that machines with a large main memory should always have multiple processors in order to make cost-effective use of the memory's capacity and bandwidth <ref> [WH95] </ref>. To run an application on a parallel architecture, the program's data and computation has to be mapped onto the different processors.
Reference: [Who91] <author> S. Wholey. </author> <title> Automatic Data Mapping for Distributed-Memory Parallel Computers. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1991. </year> <month> 15 </month>
References-found: 30

