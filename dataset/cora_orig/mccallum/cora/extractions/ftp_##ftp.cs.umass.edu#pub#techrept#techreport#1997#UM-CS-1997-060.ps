URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1997/UM-CS-1997-060.ps
Refering-URL: http://dis.cs.umass.edu/~wagner/pubs.html
Root-URL: 
Email: Email: fvincent,bhorling,wagner,lesserg@cs.umass.edu  
Title: Survivability Simulator for Multi-Agent Adaptive Coordination flyz  
Author: Regis Vincent, Bryan Horling, Thomas Wagner and Victor Lesser 
Date: October 16, 1997  
Affiliation: University of Massachusetts Computer Science Department  UMass Computer Science  
Pubnum: Technical Report 1997-60  
Abstract: The growth of a distributed processing system can increase both the number and likelihood of attacks it may be subject to over its lifetime [14, 7]. This fact, in addition to the complexity inherent in such an environment, makes the survivability of large heterogeneous systems one of the most challenging research areas currently being investigated[1]. Our goal is to create a distributed simulation system to test various coordination mechanisms allowing the elements of the system to detect, react and adapt in the face of adverse working conditions. Our assumption is that the system is composed of a group of autonomous agents. Each agent has its own local view of the world and its own goals, but is capable of coordinating these goals with respect to remote agents. To simulate these complex systems, an environment is needed which permits the simulation of an agent's method execution. To this end, we are developing a distributed event-based simulator capable of simulating the effects directed attacks or a capricious environment have on agent method execution and recovery. Keywords: Multi-agent systems, discrete simulation, simulator fl A version of this paper appears in the Proceedings of the First International Conference on Web-Based Modeling and Simulation, 1998. y Effort sponsored by the Defense Advanced Research Projects Agency (DARPA) and Rome Laboratory, Air Force Materiel Command, USAF, under agreement number F30602-97-1-0249. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation thereon. Disclaimer: The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Defense Advanced Research Projects Agency (DARPA), Rome Laboratory or the U.S. Government. z The effort depicted is partially sponsored by the Dept. of the Navy, Office of the Chief of Naval Research, under Grant No. N00014-97-1-0591 and the content of the information does not necessarily reflect the position or the policy of the Government, and no official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> DARPA. </author> <note> http://www.ito.darpa.mil/ResearchAreas/Information Survivability.html, </note> <year> 1996. </year>
Reference: [2] <author> Keith S. Decker. </author> <title> Environment Centered Analysis and Design of Coordination Mechanisms. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: The distributed system architecture must adapt dynamically, perhaps finding different routings for communications or other component applications to fulfill a particular set of needs. Our research focus is on building such survivable, dynamic, heterogeneous distributed systems. We use an agent coordination control scheme, called generalized-partial-global-planning (GPGP) <ref> [2] </ref>, to organize the agent members of a distributed application. In GPGP, agents exchange their local views of the group problem solving context and negotiate to determine which agent is to perform which task (s) at what time (s).
Reference: [3] <author> Keith S. Decker. </author> <title> TMS: A framework for analysis and design of coordination mechanisms. </title> <editor> In G. O'Hare and N. Jennings, editors, </editor> <booktitle> Foundations of Distributed Artificial Intelligence, chapter 16. </booktitle> <publisher> Wiley Inter-Science, </publisher> <year> 1995. </year>
Reference-contexts: Thus agents consist of two main control problem solving components, the scheduler and the coordination module, and one main domain problem solving component. Agents represent and reason about 2 problem solving processes using the TMS task modeling framework <ref> [3, 4] </ref>. In TMS tasks are hierarchically decomposed into subtasks and finally into primitive actions. TMS differs from most traditional modeling frameworks in that it represents both hard and soft interactions between tasks, e.g., enabling or facilitating relationships, and alternative ways to perform tasks.
Reference: [4] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex environments. </title> <journal> International Journal of Intelligent Systems in Accounting, Finance, and Management, </journal> <volume> 2(4) </volume> <pages> 215-234, </pages> <month> December </month> <year> 1993. </year> <title> Special issue on "Mathematical and Computational Models of Organizations: Models and Characteristics of Agent Behavior". </title>
Reference-contexts: Thus agents consist of two main control problem solving components, the scheduler and the coordination module, and one main domain problem solving component. Agents represent and reason about 2 problem solving processes using the TMS task modeling framework <ref> [3, 4] </ref>. In TMS tasks are hierarchically decomposed into subtasks and finally into primitive actions. TMS differs from most traditional modeling frameworks in that it represents both hard and soft interactions between tasks, e.g., enabling or facilitating relationships, and alternative ways to perform tasks.
Reference: [5] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 73-80, </pages> <address> San Francisco, </address> <month> June </month> <year> 1995. </year> <note> AAAI Press. Longer version available as UMass CS-TR 94-14. </note>
Reference-contexts: lends itself to this integration task because it enables designers to explicitly represent agent goals, where agents may have multiple goals and goals for different client applications, and to reason about the benefits or relative importance of these goals from a self-interested perspective [8, 9, 12], a wholly cooperative perspective <ref> [6, 5] </ref>, or a market-driven economic perspective [13].
Reference: [6] <author> E. H. Durfee, V. R. Lesser, and D. D. Corkill. </author> <title> Cooperative distributed problem solving. </title> <editor> In A. B. Barr, P. Cohen, and E. Feigenbaum, editors, </editor> <booktitle> The Handbook of Artificial Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 83-147. </pages> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: lends itself to this integration task because it enables designers to explicitly represent agent goals, where agents may have multiple goals and goals for different client applications, and to reason about the benefits or relative importance of these goals from a self-interested perspective [8, 9, 12], a wholly cooperative perspective <ref> [6, 5] </ref>, or a market-driven economic perspective [13].
Reference: [7] <author> M. Eichin and J. Rochis. </author> <title> With microscope and tweezers: An analysis of the internet worm of november 1988. </title> <booktitle> In IEEE symposium on Research in Securiry and Privacy, </booktitle> <year> 1989. </year>
Reference-contexts: While this highly networked and distributed environment is giving rise to the next generation of powerful applications, the same decentralized networked characteristics that serve as the growth catalyst also create the greatest hazard to these applications, that is the vulnerability of these applications to attack from outside sources <ref> [14, 7] </ref>. Applications that are open, or built from individual components that are themselves open systems, are susceptible to virus style attacks and to attacks that disable the network, block communication, or disable member applications.
Reference: [8] <author> Terry M. Moe. </author> <title> The new economics of organization. </title> <journal> American Journal of Political Science, </journal> <volume> 28(4) </volume> <pages> 739-777, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: The agent-style control methodology lends itself to this integration task because it enables designers to explicitly represent agent goals, where agents may have multiple goals and goals for different client applications, and to reason about the benefits or relative importance of these goals from a self-interested perspective <ref> [8, 9, 12] </ref>, a wholly cooperative perspective [6, 5], or a market-driven economic perspective [13].
Reference: [9] <author> Charles Perrow. </author> <title> Complex Organizations. Random House, </title> <address> New York, </address> <year> 1986. </year>
Reference-contexts: The agent-style control methodology lends itself to this integration task because it enables designers to explicitly represent agent goals, where agents may have multiple goals and goals for different client applications, and to reason about the benefits or relative importance of these goals from a self-interested perspective <ref> [8, 9, 12] </ref>, a wholly cooperative perspective [6, 5], or a market-driven economic perspective [13].
Reference: [10] <author> M. V. Nagendra Prasad and Victor R. Lesser. </author> <title> Learning problem solving control in cooperative multi-agent systems. </title> <booktitle> In Workshop on Multi-Agent Learning, </booktitle> <address> AAAI-97, Providence, Rhode Island, </address> <year> 1997. </year>
Reference-contexts: However, given more time and money, the agents may be able to explore more information resources and produce a higher-quality report. One major thrust of our current work is on studying and improving the flexibility and adaptability aspects of our agent coordination mechanisms. Recent work in learning coordination mechanisms <ref> [10, 11] </ref> has shown that it is more effective to learn situation specific coordination strategies rather than using a single strategy for all situations.
Reference: [11] <author> M. V. Nagendra Prasad and Victor R. Lesser. </author> <title> The use of meta-level information in learning situation specific coordination. </title> <booktitle> In IJCAI-97, </booktitle> <address> Nagoya (Japan), </address> <year> 1997. </year>
Reference-contexts: However, given more time and money, the agents may be able to explore more information resources and produce a higher-quality report. One major thrust of our current work is on studying and improving the flexibility and adaptability aspects of our agent coordination mechanisms. Recent work in learning coordination mechanisms <ref> [10, 11] </ref> has shown that it is more effective to learn situation specific coordination strategies rather than using a single strategy for all situations.
Reference: [12] <author> J. S. Rosenschein and J. S. Breese. </author> <title> Communication-free interactions among rational agents: A probabilistic approach. </title> <editor> In L. Gasser and M. N. Huhns, editors, </editor> <booktitle> Distributed Artificial Intelligence, </booktitle> <volume> Vol. II. </volume> <publisher> Pitman Publishing Ltd., </publisher> <year> 1989. </year>
Reference-contexts: The agent-style control methodology lends itself to this integration task because it enables designers to explicitly represent agent goals, where agents may have multiple goals and goals for different client applications, and to reason about the benefits or relative importance of these goals from a self-interested perspective <ref> [8, 9, 12] </ref>, a wholly cooperative perspective [6, 5], or a market-driven economic perspective [13].
Reference: [13] <author> Tuomas Sandholm and Victor Lesser. </author> <title> Issues in automated negotiation and electronic commerce: Extending the contract net framework. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems (ICMAS-95), </booktitle> <pages> pages 328-335, </pages> <year> 1995. </year>
Reference-contexts: it enables designers to explicitly represent agent goals, where agents may have multiple goals and goals for different client applications, and to reason about the benefits or relative importance of these goals from a self-interested perspective [8, 9, 12], a wholly cooperative perspective [6, 5], or a market-driven economic perspective <ref> [13] </ref>.
Reference: [14] <author> S. Staniford-Chen, S. Cheung, R. Crawford, M. Dilger, J. Frank, Hoagland J., K. Levitt, C. Wee, R. Yip, and D. Zerkle. </author> <title> Grids-a graph based intrusion detection system for large networks. </title> <type> Technical report, </type> <institution> NISSC, </institution> <year> 1996. </year> <note> http://seclab.cs.ucdavis.edu/arpa/- grids/welcome.html. 8 </note>
Reference-contexts: While this highly networked and distributed environment is giving rise to the next generation of powerful applications, the same decentralized networked characteristics that serve as the growth catalyst also create the greatest hazard to these applications, that is the vulnerability of these applications to attack from outside sources <ref> [14, 7] </ref>. Applications that are open, or built from individual components that are themselves open systems, are susceptible to virus style attacks and to attacks that disable the network, block communication, or disable member applications.
Reference: [15] <author> Thomas Wagner, Alan Garvey, and Victor Lesser. </author> <title> Complex Goal Criteria and Its Applica--tion in Design-to-Criteria Scheduling. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <month> July </month> <year> 1997. </year> <note> Also available as UMASS Department of Computer Science Technical Report TR-1997-10. </note>
Reference-contexts: Individual agents are comprised of three primary modules: 1) the GPGP coordination module, which is responsible for interacting with other agents and maintaining a cohesive distributed application; 2) the local real-time scheduler <ref> [16, 15] </ref> that performs trade-off analysis of different possible courses of action and decides, in conjunction with the GPGP module, which actions to perform and at what times; 3) the domain problem solver that performs the domain (application) actions.
Reference: [16] <author> Thomas Wagner, Alan Garvey, and Victor Lesser. </author> <title> Criteria-Directed Heuristic Task Scheduling. </title> <journal> International Journal of Approximate Reasoning, Special Issue on Scheduling, </journal> <note> To appear 1997. Also available as UMASS Department of Computer Science Technical Report TR-97-59. 9 </note>
Reference-contexts: Individual agents are comprised of three primary modules: 1) the GPGP coordination module, which is responsible for interacting with other agents and maintaining a cohesive distributed application; 2) the local real-time scheduler <ref> [16, 15] </ref> that performs trade-off analysis of different possible courses of action and decides, in conjunction with the GPGP module, which actions to perform and at what times; 3) the domain problem solver that performs the domain (application) actions.
References-found: 16

