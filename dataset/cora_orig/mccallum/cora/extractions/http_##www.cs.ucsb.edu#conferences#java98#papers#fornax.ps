URL: http://www.cs.ucsb.edu/conferences/java98/papers/fornax.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: fberry,bjog@wins.uva.nl  
Title: Fornax: Web-based Distributed Discrete Event Simulation in Java  
Author: Berry A. W. van Halderen Benno J. Overeinder 
Address: Kruislaan 403, 1098 SJ Amsterdam, the Netherlands  
Affiliation: Department of Computer Science, University of Amsterdam  
Abstract: In this paper we present an environment for the development of Java-based discrete event simulations. An integrated approach is taken that combines discrete event semantics with Java and exceeds the expressiveness of discrete event libraries. The environment supports advanced techniques including distributed evaluation with conservative or optimistic event execution using the Time Warp protocol. We present some preliminary performance results for the sequential implementation and discuss the difficulties encountered with Parallel Discrete Event Simulation. Keywords: Java, Discrete Event Simulation, Distributed Computing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> BUSS, A. H., AND STORK, K. A. </author> <title> Discrete event simulation on the world wide web using Java. </title> <booktitle> In Proceedings of the 1996 Winter Simulation Conference (Coro-nado, </booktitle> <address> CA, </address> <month> Dec. </month> <year> 1996), </year> <pages> pp. 780-785. </pages>
Reference-contexts: Apart from the modeling flexibility and the ease of model development, Java provides versatile primitives for animation to monitor the dynamics of a simulation. The suitability of Java for discrete event simulation has been recognized in a number of projects, which resulted in various simulation environments <ref> [1, 5, 6] </ref>. Our approach differs from the other initiatives in its aim to support an integral conceptual framework for discrete event modeling, while the simulation engine efficiently manages and executes the events in the simulation. <p> code for generating entities is shown in figure 1. public void main (String args []) f Fornax fornax = new Fornax (); Client clt = new Client (fornax, 10); Server svr = new Server (fornax, 1.0); Entity peers []; peers = new Entity [0]; svr.start (peers); peers = new Entity <ref> [1] </ref>; peers [0] = svr; clt.start (peers); fornax.start (); System.out.println (fornax.getTime ()); g simulation time control object. When all simulation entities are created, an initialization routine provided by the superclass of the entity is executed. <p> The send method (provided by the super public class Server extends ServerEntity f public void Prefetch (int nbytes, Client peer) f if (externalUse ()) f Object args [] = new Object [2]; args [0] = new Integer (nbytes); args <ref> [1] </ref> = peer; send (Prefetch, args); g else super.Prefetch (nbytes, peer); g second phase compilation.
Reference: [2] <author> CARPENTER, B., CHANG, Y.-J., FOX, G., LESKIW, D., AND LI, X. </author> <title> Experiments with `HP Java'. </title> <journal> Con-currency: Practice and Experience 9, </journal> <month> 6 (June </month> <year> 1997), </year> <pages> 633-648. </pages>
Reference-contexts: In different studies that evaluate the potential of Java as a high-performance computing language, it is indicated that certain improvements are necessary for successful usage <ref> [2, 3] </ref>. On the other hand, Java offers an efficient and flexible simulation engine for DES with its complex control of the computational process. <p> If the Client entity calls a Server event method then the objects are marshalled into an array. The send method (provided by the super public class Server extends ServerEntity f public void Prefetch (int nbytes, Client peer) f if (externalUse ()) f Object args [] = new Object <ref> [2] </ref>; args [0] = new Integer (nbytes); args [1] = peer; send (Prefetch, args); g else super.Prefetch (nbytes, peer); g second phase compilation.
Reference: [3] <author> FLYNN HUMMEL, S., NGO, T., AND SRINIVASAN, H. </author> <title> SPMD programming in Java. </title> <journal> Concurrency: Practice and Experience 9, </journal> <month> 6 (June </month> <year> 1997), </year> <pages> 621-631. </pages>
Reference-contexts: In different studies that evaluate the potential of Java as a high-performance computing language, it is indicated that certain improvements are necessary for successful usage <ref> [2, 3] </ref>. On the other hand, Java offers an efficient and flexible simulation engine for DES with its complex control of the computational process.
Reference: [4] <author> FUJIMOTO, R. M. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM 33, </journal> <month> 10 (Oct. </month> <year> 1990), </year> <pages> 30-53. </pages>
Reference-contexts: There are basically two approaches to impose the correct temporal order of the asynchronous event execution: conservative and optimistic methods <ref> [4] </ref>. The basic problem conservative mechanisms must address is to determine which event is safe to process. Processes that do not contain any safe event must block. This behavior can result in deadlock situations if no appropriate precautions are taken (e.g., deadlock avoidance or detection and recovery).
Reference: [5] <author> MCNAB, R., AND HOWELL, F. W. </author> <title> Using Java for discrete event simulation. </title> <booktitle> In Proceedings of the Twelfth UK Computer and Telecommunications Performance Engineering Workshop (UKPEW) (Ed-inburgh, </booktitle> <address> UK, </address> <year> 1996), </year> <pages> pp. 219-228. </pages>
Reference-contexts: Apart from the modeling flexibility and the ease of model development, Java provides versatile primitives for animation to monitor the dynamics of a simulation. The suitability of Java for discrete event simulation has been recognized in a number of projects, which resulted in various simulation environments <ref> [1, 5, 6] </ref>. Our approach differs from the other initiatives in its aim to support an integral conceptual framework for discrete event modeling, while the simulation engine efficiently manages and executes the events in the simulation.
Reference: [6] <author> MILLER, J. A., NAIR, R. S., ZHANG, Z., AND ZHAO, H. JSIM: </author> <title> a Java-based simulation and animation environment. </title> <booktitle> In Proceedings of the 30th Annual Simulation Symposium (Atlanta, </booktitle> <address> Georgia, </address> <month> Apr. </month> <year> 1997). </year>
Reference-contexts: Apart from the modeling flexibility and the ease of model development, Java provides versatile primitives for animation to monitor the dynamics of a simulation. The suitability of Java for discrete event simulation has been recognized in a number of projects, which resulted in various simulation environments <ref> [1, 5, 6] </ref>. Our approach differs from the other initiatives in its aim to support an integral conceptual framework for discrete event modeling, while the simulation engine efficiently manages and executes the events in the simulation.
Reference: [7] <author> MULLER, H. </author> <title> Simulating Computer Architectures. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Amsterdam, </institution> <address> Amsterdam, The Netherlands, </address> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: On the other hand, Java offers an efficient and flexible simulation engine for DES with its complex control of the computational process. In general, simulation studies and experiments are pursued with specific simulation languages such as MOD-SIM III, SIMULA 67 or Pearl <ref> [7] </ref>, or with general purpose languages such as C or Fortran that are extended with simulation libraries. Both approaches have their pros and cons. <p> In this article we will first describe the conceptual modeling framework for DES as used within the Pearl simulation language <ref> [7] </ref>. Next, we show how this framework is incorporated by a natural extension of the Java language. Here, we also discuss the aspects of the different levels of concurrency in the Java execution model, and the potential exploitation of concurrency by parallel and distributed execution of the simulation.
Reference: [8] <author> NANCE, R. E. </author> <title> A history of discrete event simulation programming languages. </title> <journal> ACM SIGPLAN Notices 28, </journal> <month> 3 (Mar. </month> <year> 1993), </year> <pages> 149-175. </pages>
Reference-contexts: Three different approaches are in vogue for the modeling of discrete event systems, the so-called world views. The differences between the world views lie in the way in which manner the model processes the events. The differentiation among world views is best captured using the concept of locality <ref> [8] </ref>: Event scheduling provides locality in time: each event routine in a model specification describes related ac tions that may all occur in a single instant.
References-found: 8

