URL: http://www.icsi.berkeley.edu/~yairb/pubs/B-phd-thesis.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Title: Competitive Analysis of Distributed On-line Problems Distributed Paging  
Author: Yair Bartal 
Degree: Thesis submitted for the degree of "Doctor of Philosophy" by  Submitted to the Senate of Tel-Aviv University  
Date: September 1994  
Abstract-found: 0
Intro-found: 1
Reference: [AA92] <author> N. Alon and Y. Azar. </author> <title> On-line Steiner Trees in the Euclidean Plane. </title> <booktitle> In Proc. 8th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 337-343, </pages> <year> 1992. </year>
Reference-contexts: Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92]. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition [FKT89], on-line Steiner tree and generalizations <ref> [IW91, CV92, AA92, ABF93a, WY93, AAB94] </ref>, and on-line graph coloring [Vishwa90, Irani90, HS92]. Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in [ST85b, BM85, HM92]. <p> That potential function proof gives the intuition behind our more complex file allocation algorithm proof. Analysis of the greedy Steiner tree algorithm was also independently made by <ref> [AA92] </ref>, [CV92] and [WY93] giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 2.3.2 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. Proof. <p> In the following paragraph we consider the greedy strategy for the Steiner tree problem and give a simple potential function proof for the competitiveness of the greedy on-line Steiner tree algorithm, and thus to read-only replication. (Alternative non potential function proofs given by <ref> [AA92, CV92, IW91, WY93] </ref>, and in Section 2.3.2.) Although this is not essential for the proofs of competitiveness of our file-allocation algorithms, the intuition behind this potential function serves as a basis to the more complex potential function used to prove our deterministic file-allocation algorithm, and we believe that it gives
Reference: [AAB94] <author> B. Awerbuch, Y. Azar, and Y. Bartal. </author> <title> On-line Generalized Steiner Tree with Application to Leasing in Networks. </title> <booktitle> To appear in Proc. of the 7th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92]. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition [FKT89], on-line Steiner tree and generalizations <ref> [IW91, CV92, AA92, ABF93a, WY93, AAB94] </ref>, and on-line graph coloring [Vishwa90, Irani90, HS92]. Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in [ST85b, BM85, HM92]. <p> Applications of this theorem are in file replication (by a reduction to on-line Steiner tree), network connectivity leasing <ref> [AAB94] </ref> (by a reduction to on-line generalized Steiner tree), file migration (by a reduction to the trivial 1-server problem), and k-copy migration (by a reduction to the k-server problem). 1.4 Competitive Distributed Algorithms Tech niques The need to deal with partial information about the state of the network, and lack of
Reference: [AB86] <author> J. Archibald and J. Baer. </author> <title> An Evaluation of Cache Coherence Solutions in Shared-Bus Multiprocessor . In ACM Transactions on Computer Systems, </title> <booktitle> 4, </booktitle> <pages> 4 , pages 273-298, </pages> <month> November </month> <year> 1986. </year>
Reference: [AADW94] <author> M. Ajtai, J. Aspnes, C. Dwork, and O. Waarts. </author> <title> A Theory of Competitive Analysis for Distributed Algorithms. </title> <booktitle> In Proc. of the 35th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 401-411, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. Ajtai et. al. <ref> [AADW94] </ref> and [AW94] deal with the cooperative collect problem in shared memory. Another question that arises when on-line problems in distributed networks are considered, is that of providing with competitive distributed algorithms. Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. <p> Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. Other work on these lines has been made in <ref> [AKP92, BR92, ABF93a, ABF93b, AADW94, AW94, ABF94] </ref>. 10 1.2 Competitive Analysis of Distributed Algo rithms A network is modeled by an undirected weighted graph G = (V; E), where processors are represented by vertices, and edge weights the length or cost of a bidirectional link between the two corresponding adjacent processors. <p> However, since a distributed on-line algorithm cannot possibly know if another processor has written the file or not, then communication to the nearest copy must be made. This fact has been also noticed by Ajtai, Aspens, Dwork and Waarts <ref> [AADW94] </ref> in the context of a problem, arising in shared-memory applications, of providing cooperative collect primitive. Processors repeatedly collect values of a set of registers, were values collected must be fresh. A similar argument as given above for the file allocation problem applies to this case as well. <p> Processors repeatedly collect values of a set of registers, were values collected must be fresh. A similar argument as given above for the file allocation problem applies to this case as well. Ajtai et. al. <ref> [AADW94] </ref> suggest a general way of defining which adversaries are eligible to compete against, as adversaries that solve the distributed problem correctly on all possible request sequences.
Reference: [AAFPW93] <author> J. Aspens, Y. Azar, A. Fiat, S. Plotkin, and O. Waarts. </author> <title> On-line Load Balancing with Applications to Machine Scheduling and Virtual Circuit Routing. </title> <booktitle> In Proc. of the 25th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 623-631, </pages> <month> May </month> <year> 1993. </year> <note> 253 254 BIBLIOGRAPHY </note>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. <p> Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. <ref> [AAFPW93] </ref> also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [AAP93] <author> B. Awerbuch, Y. Azar, S. Plotkin. </author> <title> Throughput-Competitive Online Routing. </title> <booktitle> In Proc. of the 34th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 32-41, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in <ref> [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94] </ref>. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [AAPW94] <author> B. Awerbuch, Y. Azar, S. Plotkin and O. Waarts. </author> <title> Competitive Routing of Virtual Circuits with Unknown Duration. </title> <booktitle> In Proc. of 5th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 321-327, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in <ref> [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94] </ref>. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [ABCRSS94] <author> A. Aggarwal, A. Bar-Noy, D. Coppersmith, R. Ramaswani, B. Schieber, and M. Sudan. </author> <title> Efficient Routing and Scheduling Algorithms for Optical Networks. </title> <booktitle> In Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 412-423, </pages> <year> 1994. </year>
Reference-contexts: Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. <ref> [ABCRSS94] </ref> analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [ABF93a] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Competitive Distributed File Allocation. </title> <booktitle> In Proc. of the 25th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 164-173, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In this thesis we deal with the competitive analysis of on-line distributed algorithms [BFR92]. The total communication cost of a distributed algorithm including costs expended for acquiring information about the input events, is compared to that of a prescient global-control adversary. Distributed paging <ref> [BFR92, ABF93a, ABF93b, ABF94] </ref>, is one of the basic utilization problems in distributed systems (see [DF81, GS90] for surveys). Where different files are maintained at various nodes in a distributed shared database, are read and written by arbitrary network processors. <p> We give competitive algorithms to minimize the total communication costs for serving the requests. The problem limited to a single file, where multiple copies of the file are allowed, is called distributed file allocation <ref> [BFR92, ABF93a] </ref>. The thesis contains a comprehensive study of these two problems, and also an 3 other example for competitive analysis of distributed algorithms in context of the related distributed k-server problem [BR92]. <p> Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92]. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition [FKT89], on-line Steiner tree and generalizations <ref> [IW91, CV92, AA92, ABF93a, WY93, AAB94] </ref>, and on-line graph coloring [Vishwa90, Irani90, HS92]. Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in [ST85b, BM85, HM92]. <p> Karlin et. al., [KMRS88] studied Snoopy caching, and in [KLMO91] the problem of spinning in shared memory was analyzed. Black and Sleator [BS89] introduced the file migration and file replication problems. These problems where later studied in <ref> [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. <p> Black and Sleator [BS89] introduced the file migration and file replication problems. These problems where later studied in [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in <ref> [ABF93a, LRWY94, ABF93b, ABF94] </ref>. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. Ajtai et. al. [AADW94] and [AW94] deal with the cooperative collect problem in shared memory. <p> Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. Other work on these lines has been made in <ref> [AKP92, BR92, ABF93a, ABF93b, AADW94, AW94, ABF94] </ref>. 10 1.2 Competitive Analysis of Distributed Algo rithms A network is modeled by an undirected weighted graph G = (V; E), where processors are represented by vertices, and edge weights the length or cost of a bidirectional link between the two corresponding adjacent processors. <p> In [BR92] the goal is to give a general translator to turn a global-control algorithm into a distributed one. The data management problems: file allocation and distributed paging of [BFR92] have been given more distributed algorithms by Awerbuch, Bartal and Fiat <ref> [ABF93a, ABF94] </ref>, presented in Chapter 4 and Chapter 5 of this thesis. <p> In these papers they obtain nonconstructive O (n 1=2 log 2 n) and constructive O (n 3=4 log 2 n) competitive algorithms both in terms of number of invoked operations (latency) and number of completed tasks (throughput). In the papers <ref> [BFR92, BR92, ABF93a, ABF94] </ref> some general tools for the analysis of distributed on-line algorithms have been developed and demonstrated, such as: the use of simulation sequences, and graph-decompositions and the data tracking mechanism. <p> The distributed paging algorithms of Awerbuch, Bartal and Fiat, Heat & Dump [ABF93b] and Hierarchical Paging [ABF94] are using the simulation of uniprocessor algorithms. The algorithm of [ABF94] also uses a version of the file allocation algorithm in <ref> [ABF93a] </ref> in the solution for the distributed paging problem. Also, the cover problem [BFR92] is used in the solution for the data tracking mechanism [BFR92]. <p> In every level, we use each cluster to gather information on the activity (I.e., requests) happening in their area, that is, at the processors contained in it. This is the basic idea behind our distributed deterministic file allocation algorithm <ref> [ABF93a] </ref>, were read requests are counted by cluster leaders, and the distributed Hierarchical Paging algorithm for the distributed paging problem [ABF94], were uniprocessor paging algorithms are run by the cluster leaders using the entire memory of the cluster as if it were a single cache. <p> It is bounded by O (1) if no space limitations are given. With having only memory per processor be only polylogarithmic in the diameter, we get an approximation factor equal to O (log n= log D). The distributed data tracking mechanism is used in all distributed data management algorithms <ref> [BFR92, ABF93a, ABF94] </ref>, and also used to provide k-server tracking mechanisms in [BR92]. 1.5 The File Allocation Problem The management of data in a distributed network is an important and extensively studied problem in management science, engineering, and computer systems. <p> Chrobak et. al. [CLRW93] also prove a lower bound greater than 3 in some network topology, specifically 85=27. We present first explicit file migration deterministic algorithm, Move-To-Min (MTM), for arbitrary network topologies, due to Awerbuch, Bartal and Fiat <ref> [ABF93a] </ref>. The basic idea is that every successive D requests cause a migration to a "center of gravity" location. We prove MTM is 7-competitive, the best known result for file migration. Black and Sleator also consider the file replication problem, which is the file allocation problem with writes disallowed. <p> The second O (minflog n; log (Diam)g)-competitive file allocation algorithm <ref> [ABF93a] </ref>, is deterministic and somewhat more complex. The basic idea is that when a sphere contains D read requests a file should be replicated to that sphere area. <p> Bartal, Fiat and Rabani [BFR92], show that for uniform, trees, and ring there are O (1)-competitive distributed algorithms. Using the data tracking mechanism they get a distributed version of the Steiner-Based algorithm (Distributed-SB), which is polylog (n)-competitive. Awerbuch, Bartal and Fiat <ref> [ABF93a] </ref> give a deterministic distributed polylog (n)- competitive file allocation algorithm. The basic idea behind the distributed algorithm is to use the sparse graph decompositions of [AP90] to count the read requests. <p> This reduction is based on a version of the distributed file allocation algorithm of <ref> [ABF93a] </ref> that works also for dynamic networks.
Reference: [ABF93b] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Heat & Dump: Competitive Distributed Paging. </title> <booktitle> In Proc. of the 34th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 22-31, </pages> <month> Octo-ber </month> <year> 1993. </year>
Reference-contexts: In this thesis we deal with the competitive analysis of on-line distributed algorithms [BFR92]. The total communication cost of a distributed algorithm including costs expended for acquiring information about the input events, is compared to that of a prescient global-control adversary. Distributed paging <ref> [BFR92, ABF93a, ABF93b, ABF94] </ref>, is one of the basic utilization problems in distributed systems (see [DF81, GS90] for surveys). Where different files are maintained at various nodes in a distributed shared database, are read and written by arbitrary network processors. <p> Randomization against oblivious adversaries is very powerful. In the context of many problems such as task systems [BLS87], paging [FKLMSY91], routing [ABFR94] and distributed paging <ref> [ABF93b] </ref>, it has been demonstrated that the competitive ratio may drop dramatically when randomization against oblivious 1.1 On-line Problems and Competitive Analysis 7 adversaries is considered. <p> Black and Sleator [BS89] introduced the file migration and file replication problems. These problems where later studied in [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in <ref> [ABF93a, LRWY94, ABF93b, ABF94] </ref>. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. Ajtai et. al. [AADW94] and [AW94] deal with the cooperative collect problem in shared memory. <p> Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. Other work on these lines has been made in <ref> [AKP92, BR92, ABF93a, ABF93b, AADW94, AW94, ABF94] </ref>. 10 1.2 Competitive Analysis of Distributed Algo rithms A network is modeled by an undirected weighted graph G = (V; E), where processors are represented by vertices, and edge weights the length or cost of a bidirectional link between the two corresponding adjacent processors. <p> Many of the solutions presented in this thesis have this property. The "Steiner-Based" file allocation algorithm of Bartal,Fiat and Rabani [BFR92] is obtained using a reduction to the on-line Steiner tree problem [IW91]. The distributed paging algorithms of Awerbuch, Bartal and Fiat, Heat & Dump <ref> [ABF93b] </ref> and Hierarchical Paging [ABF94] are using the simulation of uniprocessor algorithms. The algorithm of [ABF94] also uses a version of the file allocation algorithm in [ABF93a] in the solution for the distributed paging problem. <p> It may happen that some activity done in combination with the simulation 1.3 Using On-line Algorithms to Solve Different Problems 15 interacts with it and interferes with the simulated configuration. This happens in <ref> [ABF93b, BR92] </ref>. <p> This setting also corresponds to that of a homogeneous distributed file server, comprised of a collection of diskless workstations. Some systems work in a related setting has been reported in [LH86]. 1.6 The Distributed Paging Problem 29 We fully analyze the distributed paging problem in the uniform network topology <ref> [BFR92, ABF93b] </ref>. This type of networks is of special interest as a model for a LAN network. <p> We give an O (m) competitive deterministic algorithm, Distributed Flush-When-Full [BFR92], for the distributed paging problem on uniform networks. We also give a lower bound of (m) on the competitive ratio for any network. Randomized distributed paging algorithms are discussed by Awerbuch, Bartal and Fiat in <ref> [ABF93b] </ref>. We present algorithm Heat & Dump, that is O (log m)- competitive for uniform networks against oblivious adversaries. A matching lower bound for the problem is achieved by a reduction from the k-server problem. The results above can be compared with previously known results for uniprocessor paging. <p> Gaps are especially high in the distributed setting, where the upper bound is O (log 4 n), while the best lower bound known, which follows from the global-control setting, is (log n). Chapter 5 Distributed Paging In this section we study the distributed paging problem <ref> [BFR92, ABF93b, ABF94] </ref>. Distributed paging is the solution of multiple file allocation problems, constrained by the local memory of the processors. Let F denote the set of files and P denote the set of processors. <p> competitive ratio of any randomized distributed paging algorithm is (maxflog (m f ); log kg) for uniform networks. 5.2.2 O (log m) Upper Bound for Uniform Networks: Heat & Dump In this section we give a radomized algorithm called Heat & Dump for distributed paging in a uniform network topology <ref> [ABF93b] </ref>. The competitive ratio of the algorithm is O (maxflog (m f ); log kg) matching the lower bound up to a constant factor. The algorithm and the analysis are quite complex. <p> e ) + A (t e )): It now follows from Section 5.2.2.2.2 that the proof of Theorem 5.2.4 is complete. 5.3 Discussion and Open Problems Motivated by the famous [MMS88] conjecture, we conjecture that the distributed paging problem has a deterministic competitive ratio of O (m) on arbitrary topologies. <ref> [ABF93b] </ref> give an O (log m)-competitive randomized algorithm for the distributed paging problem on the uniform network. We hazard the guess that similar results can be obtained by randomized algorithms against oblivious adversaries for other network topologies as well.
Reference: [ABF94] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Distributed Paging for General Networks. </title> <booktitle> To appear in Proc. of the 7th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: In this thesis we deal with the competitive analysis of on-line distributed algorithms [BFR92]. The total communication cost of a distributed algorithm including costs expended for acquiring information about the input events, is compared to that of a prescient global-control adversary. Distributed paging <ref> [BFR92, ABF93a, ABF93b, ABF94] </ref>, is one of the basic utilization problems in distributed systems (see [DF81, GS90] for surveys). Where different files are maintained at various nodes in a distributed shared database, are read and written by arbitrary network processors. <p> This chapter should be used as a reference manual. For most tools, only definitions and theorems are given, while proofs are left for latter chapters. Here, one can find descriptions for the following: the distributed data tracking mechanism [BFR92], the cover problem [BFR92], and vertex inclusion-exclusion problem <ref> [ABF94] </ref>. Also the properties of the sparse graph partition of [AP90] are listed, and the on-line Steiner tree problem of [IW91] is described along with a very simple new proof. Formal definitions of configuration problems, a general model, and another tool, the natural potential function are presented in Chapter 3. <p> Black and Sleator [BS89] introduced the file migration and file replication problems. These problems where later studied in [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in <ref> [ABF93a, LRWY94, ABF93b, ABF94] </ref>. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. Ajtai et. al. [AADW94] and [AW94] deal with the cooperative collect problem in shared memory. <p> Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. Other work on these lines has been made in <ref> [AKP92, BR92, ABF93a, ABF93b, AADW94, AW94, ABF94] </ref>. 10 1.2 Competitive Analysis of Distributed Algo rithms A network is modeled by an undirected weighted graph G = (V; E), where processors are represented by vertices, and edge weights the length or cost of a bidirectional link between the two corresponding adjacent processors. <p> In [BR92] the goal is to give a general translator to turn a global-control algorithm into a distributed one. The data management problems: file allocation and distributed paging of [BFR92] have been given more distributed algorithms by Awerbuch, Bartal and Fiat <ref> [ABF93a, ABF94] </ref>, presented in Chapter 4 and Chapter 5 of this thesis. <p> In these papers they obtain nonconstructive O (n 1=2 log 2 n) and constructive O (n 3=4 log 2 n) competitive algorithms both in terms of number of invoked operations (latency) and number of completed tasks (throughput). In the papers <ref> [BFR92, BR92, ABF93a, ABF94] </ref> some general tools for the analysis of distributed on-line algorithms have been developed and demonstrated, such as: the use of simulation sequences, and graph-decompositions and the data tracking mechanism. <p> Many of the solutions presented in this thesis have this property. The "Steiner-Based" file allocation algorithm of Bartal,Fiat and Rabani [BFR92] is obtained using a reduction to the on-line Steiner tree problem [IW91]. The distributed paging algorithms of Awerbuch, Bartal and Fiat, Heat & Dump [ABF93b] and Hierarchical Paging <ref> [ABF94] </ref> are using the simulation of uniprocessor algorithms. The algorithm of [ABF94] also uses a version of the file allocation algorithm in [ABF93a] in the solution for the distributed paging problem. Also, the cover problem [BFR92] is used in the solution for the data tracking mechanism [BFR92]. <p> The "Steiner-Based" file allocation algorithm of Bartal,Fiat and Rabani [BFR92] is obtained using a reduction to the on-line Steiner tree problem [IW91]. The distributed paging algorithms of Awerbuch, Bartal and Fiat, Heat & Dump [ABF93b] and Hierarchical Paging <ref> [ABF94] </ref> are using the simulation of uniprocessor algorithms. The algorithm of [ABF94] also uses a version of the file allocation algorithm in [ABF93a] in the solution for the distributed paging problem. Also, the cover problem [BFR92] is used in the solution for the data tracking mechanism [BFR92]. <p> This type of problem arises in the translator of [BR92]. Therefore, the request sequence generated for the simulated algorithm is carefully chosen so that the cost incurred by that algorithm will be large enough with respect to the cost incurred by the main algorithm <ref> [BFR92, BR92, ABF94] </ref>. It may happen that some activity done in combination with the simulation 1.3 Using On-line Algorithms to Solve Different Problems 15 interacts with it and interferes with the simulated configuration. This happens in [ABF93b, BR92]. <p> This is the basic idea behind our distributed deterministic file allocation algorithm [ABF93a], were read requests are counted by cluster leaders, and the distributed Hierarchical Paging algorithm for the distributed paging problem <ref> [ABF94] </ref>, were uniprocessor paging algorithms are run by the cluster leaders using the entire memory of the cluster as if it were a single cache. Similar techniques have also been used by [AKP92] in the solution for the distributed scheduling problem. <p> It is bounded by O (1) if no space limitations are given. With having only memory per processor be only polylogarithmic in the diameter, we get an approximation factor equal to O (log n= log D). The distributed data tracking mechanism is used in all distributed data management algorithms <ref> [BFR92, ABF93a, ABF94] </ref>, and also used to provide k-server tracking mechanisms in [BR92]. 1.5 The File Allocation Problem The management of data in a distributed network is an important and extensively studied problem in management science, engineering, and computer systems. <p> That is, the results for distributed paging generalize the results for uniprocessor paging in a natural way. 30 For arbitrary network topologies, Awerbuch, Bartal, and Fiat <ref> [ABF94] </ref> gives a reduction for distributed paging to the read-only case. This reduction is based on a version of the distributed file allocation algorithm of [ABF93a] that works also for dynamic networks. <p> This assumption on the adversary reduces the competitive ratio dramatically. They prove 2-competitive paging algorithms against adversaries with only 1=2 the cache size. Analogously, <ref> [ABF94] </ref> prove it is possible to reduce the competitive ratio for the distributed paging problem on arbitrary network topologies to be polylogarithmic in n and the diameter, if the adversary has at most 1= log (n) log (Diam) memory capacity compared to on-line. The [ABF94] Hierarchical Paging algorithm uses the graph <p> Analogously, <ref> [ABF94] </ref> prove it is possible to reduce the competitive ratio for the distributed paging problem on arbitrary network topologies to be polylogarithmic in n and the diameter, if the adversary has at most 1= log (n) log (Diam) memory capacity compared to on-line. The [ABF94] Hierarchical Paging algorithm uses the graph decompositions of [AP90]. In every cluster in the graph partition, it simulates a uniprocessor algorithm when D requests for a file are initiated in an inner part of the cluster. <p> The topics covered in this chapter are graph decompositions [AP90], distributed data tracking mechanisms [BFR92], and some basic combinatorial problems: the cover problem [BFR92], the on-line Steiner tree problem [IW91] and the vertex inclusion-exclusion problem <ref> [ABF94] </ref>. Therefore, this chapter should be regarded as a reference for these topics, and used to recall their definitions. 2.1 Graph Decompositions The hierarchical network decomposition [AP90] defines the notion of clusters, partitions, and a hierarchy of partitions. <p> Thus we get that greedy's cost is at most dlog ne times the weight of the minimum Steiner tree A. 2.3.3 The Vertex Inclusion-Exclusion Problem In this section we consider a new natural combinatorial problem we call the vertex inclusion-exclusion problem <ref> [ABF94] </ref>. The theorem presented here is useful in analyzing problems in a dynamic network as demonstrated in Section 5.1.4. Let G be an underlying weighted graph. <p> Gaps are especially high in the distributed setting, where the upper bound is O (log 4 n), while the best lower bound known, which follows from the global-control setting, is (log n). Chapter 5 Distributed Paging In this section we study the distributed paging problem <ref> [BFR92, ABF93b, ABF94] </ref>. Distributed paging is the solution of multiple file allocation problems, constrained by the local memory of the processors. Let F denote the set of files and P denote the set of processors.
Reference: [ABFR94] <author> B. Awerbuch, Y. Bartal, A. Fiat, and A. Rosen. </author> <title> Competitive Non-Preemptive Call-Control. </title> <booktitle> In Proc. of the 5th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 312-320, </pages> <month> January </month> <year> 1994. </year> <note> BIBLIOGRAPHY 255 </note>
Reference-contexts: Randomization against oblivious adversaries is very powerful. In the context of many problems such as task systems [BLS87], paging [FKLMSY91], routing <ref> [ABFR94] </ref> and distributed paging [ABF93b], it has been demonstrated that the competitive ratio may drop dramatically when randomization against oblivious 1.1 On-line Problems and Competitive Analysis 7 adversaries is considered. <p> Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in <ref> [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94] </ref>. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [ABK92] <author> Y. Azar, A. Broder and A.R. Karlin. </author> <title> On-line Load Balancing. </title> <booktitle> In Proc. of the 33rd IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 218-225, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested.
Reference: [ABM93] <author> Y. Azar, A. Z. Broder, </author> <title> and M.S. Mannase. On-line Choice of Online Algorithms. </title> <booktitle> In Proc. of the 4th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 432-440, </pages> <month> January </month> <year> 1993. </year>
Reference: [AF77] <author> J.E. Ames, and D. Foster. </author> <title> Dynamic File Assignment in a Star Network. </title> <booktitle> In Proc. of Computer Networks Symp. </booktitle> <address> (Gathersburg Md.), </address> <pages> pages 36-40, </pages> <year> 1977. </year>
Reference-contexts: Dynamic file assignment, where the locations of file copies may be dynamically changed over time, has recently received considerable research effort. The 1990 survey paper of Gavish and Sheng [GS90], gives a summary of research on this problem. Papers dealing with dynamic file allocation and migration include <ref> [AF77, LM78, SS79, Levin82, Porcar82, YSLC85, Hac86, Sheng86] </ref>. Implementa 20 tion of dynamic file allocation operations was done in distributed systems such as [PWCEK + 81, EF83, PT83, TZ84]. All of these models rely heavily on prior knowledge regarding potential usage patterns of the system databases.
Reference: [AGLR94] <author> B. Awerbuch, R. Gawlick, F.T. Leighton, and Y. Rabani. </author> <title> Online Admission Control and Circuit Routing for High Performance Computing and Communication. </title> <booktitle> In Proc. of the 35th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <month> Octo-ber </month> <year> 1994. </year>
Reference-contexts: Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in <ref> [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94] </ref>. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [AK94] <author> S. Albers and H. Koga. </author> <title> New On-line Algorithms for the Page Replication Problem. </title> <booktitle> In Proc. of the 4th Scandinavian Workshop on Algorithmic Theory, </booktitle> <address> Aarhus, Denmark, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: Karlin et. al., [KMRS88] studied Snoopy caching, and in [KLMO91] the problem of spinning in shared memory was analyzed. Black and Sleator [BS89] introduced the file migration and file replication problems. These problems where later studied in <ref> [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. <p> They give an optimal 2-competitive algorithm for the replication problem when the network is a tree, or a uniform graph. In recent work of Lund, Reingold, Westbrook and Yan [LRWY94], and Albers and Koga <ref> [AK94] </ref> give optimal randomized algorithms for the same network topologies. The competitive ratio of these algorithms approach e=(e 1) for large D. Albers and Koga [AK94, Koga93] also consider the problem of rings and give deterministic 4-competitive and randomized 3:16-competitive replication algorithms. <p> In recent work of Lund, Reingold, Westbrook and Yan [LRWY94], and Albers and Koga [AK94] give optimal randomized algorithms for the same network topologies. The competitive ratio of these algorithms approach e=(e 1) for large D. Albers and Koga <ref> [AK94, Koga93] </ref> also consider the problem of rings and give deterministic 4-competitive and randomized 3:16-competitive replication algorithms. The off-line file replication problem and file allocation problems are NP-complete (Follows from a reduction to the NP-complete minimum Steiner tree problem [Karp72, GJ77]).
Reference: [AKP92] <author> B. Awerbuch, S. Kutten, and D. Peleg. </author> <title> Competitive Distributed Job Scheduling. </title> <booktitle> In Proc. of the 24th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 571-580, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. <p> These problems where later studied in [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. <ref> [AKP92] </ref>, deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. Ajtai et. al. [AADW94] and [AW94] deal with the cooperative collect problem in shared memory. Another question that arises when on-line problems in distributed networks are considered, is that of providing with competitive distributed algorithms. <p> Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. Other work on these lines has been made in <ref> [AKP92, BR92, ABF93a, ABF93b, AADW94, AW94, ABF94] </ref>. 10 1.2 Competitive Analysis of Distributed Algo rithms A network is modeled by an undirected weighted graph G = (V; E), where processors are represented by vertices, and edge weights the length or cost of a bidirectional link between the two corresponding adjacent processors. <p> Awerbuch, Kutten and Peleg <ref> [AKP92] </ref>, have considered distributed scheduling, where jobs are issued at the processors for execution at different times. Jobs can be transmitted from one processor to another, and also may be executed in parts. <p> Similar techniques have also been used by <ref> [AKP92] </ref> in the solution for the distributed scheduling problem. In [BR92] a different kind of partition is used for the distributed k-server al 18 gorithm.
Reference: [AKPPW93] <author> Y.Azar., B.Kalyanasundaram, S.Plotkin, K.Pruhs and O.Waarts. </author> <title> On-line Load Balancing of Temporary Tasks. </title> <booktitle> In Proc. 3rd Workshop on Algorithms and Data Structures. </booktitle> <pages> pages 119-130, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in <ref> [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94] </ref>. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [AKPW91] <author> N. Alon, R.M. Karp, D. Peleg, </author> <title> and D.B. West. Graph-Theoretic Game, and its Applications to the k-Server Problem. </title> <booktitle> In Proc. of DIMACS Workshop on On-line Algorithms, </booktitle> <year> 1991. </year> <note> 256 BIBLIOGRAPHY </note>
Reference: [ANR92] <author> Y. Azar, J. Naor, and R. </author> <title> Rom. The Competitiveness of Online Assignments. </title> <booktitle> In Proc. 3rd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 203-210, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested.
Reference: [AKRS92] <author> N. Alon, G. Kalai, M. Ricklin and L. Stockmeyer. </author> <title> Lower Bounds on the Competitive Ratio for Mobile User Tracking and Distributed Job Scheduling. </title> <booktitle> In Proc. of the 33rd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 334-343, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Their model deviates from ours in that they measure the average (or maximum) job execution delay time (in place of messages) but otherwise the same in methodology. The competitive ratios of their algorithm is polylogarithmic in n, Diam, and the maximal job size. Alon, Kalai, Ricklin and Stockmeyer <ref> [AKRS92] </ref> gave lower bounds for this problem (in the maximum delay version) and for the mobile user tracking problem of (log n= log log n). Bartal and Rosen [BR92] have considered the distributed k-server problem, presented in Chapter 6 of this thesis. <p> We derive this lower bound by a reduction from the mobile user problem [AP89, AP91], and a lower bound to this problem <ref> [AKRS92] </ref>. We also study the problem of devising a distributed version of the Harmonic k 34 server algorithm, proposed by Raghavan and Snir [RS89]. <p> Since in the distributed setting at least one message has to be sent over the distance between the requesting processor and the server that serves it (to "find" the server), this observation follows from a lower bound <ref> [AKRS92] </ref> for the mobile user problem [AP91], and a reduction from this problem to the distributed k-server problem that preserves the competitive ratio up to a factor of O (D). <p> But T is the inherent mobile user cost of , and therefore the generated on-line mobile user algorithm is O (cD) competitive. From a lower bound of (log n= log log n) for the mobile user problem <ref> [AKRS92] </ref> 232 The Distributed k-Server Problem we get, Theorem 6.1.1 For all n there is a network topology of n processors, such that the competitive ratio of any distributed k-server algorithm is (maxfk; 1 D (log n= log log n)g) against adaptive on-line adversaries. 6.2 Distributed k-Server Tracking Definition.
Reference: [AP89] <author> B. Awerbuch and D. Peleg. </author> <title> On-line Tracking of Mobile Users. </title> <type> Technical Report MIT/LCS/TM-410, </type> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Another question that arises when on-line problems in distributed networks are considered, is that of providing with competitive distributed algorithms. Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in <ref> [AP89, AP91] </ref> for algorithms for tracking mobile users. <p> c-competitive iff there exists a constant a, such that for any global-control adversary Adv, and any request 12 sequence : Cost Alg () c Cost Adv () + a: This methodology of analysis and competitive measure was also implicitly done in the mobile user tracking mechanism of Awerbuch and Peleg <ref> [AP89, AP91] </ref> (generalized to data tracking in [BFR92]), and has been studied in other subsequent work. Awerbuch, Kutten and Peleg [AKP92], have considered distributed scheduling, where jobs are issued at the processors for execution at different times. <p> We manage a distributed data structure that allows fast access to the closest copy of a file, while the cost of managing the data structure is amortized against the cost of the data movement itself. Awerbuch and Peleg <ref> [AP89, AP91] </ref> solve a special case of this problem, they call the mobile user problem. They allow a Move operation to be applied to the mobile user, and provide a Find operation that return the location of the mobile user. However, they do not efficiently support birth and death. <p> O (log 2 n= log 2 D) times the inherent cost for these 1.5 The File Allocation Problem 19 operations, where D represents the ratio between data movement over an edge, and sending a message through the same edge (truncated to [2,n]). (This is also a slight improvement on the <ref> [AP89, AP91] </ref> result, were competitive ratio depends on the diameter of the network.) The path length traversed per each Find is O (log 2 n= log 2 D) times the length of the shortest path to a processor holding data. <p> The problem is also related to problems of data management, such as k-copy migration, and distributed paging, and mentioned in the context of the mobile user problem <ref> [AP89, AP91] </ref>. 32 Since in the distributed setting a k-server algorithm incurs some cost for the transmission of any message, such competitive algorithms cannot always inform all the processors, and even not all the servers, about every request. <p> We also use a mechanism that we call k-server tracking in order to find a specific server when needed and to find a close server to a specific point at any time. This mechanism is a slight modification of the techniques used for the mobile user tracking mechanism <ref> [AP89, AP91] </ref> and for the data-tracking mechanism [BFR92]. Manasse, McGeoch and Sleator [MMS88] proved a lower bound of k on the competitive ratio of any k-server algorithm in any metric space. This bound is conjectured to be the correct ratio. <p> We derive this lower bound by a reduction from the mobile user problem <ref> [AP89, AP91] </ref>, and a lower bound to this problem [AKRS92]. We also study the problem of devising a distributed version of the Harmonic k 34 server algorithm, proposed by Raghavan and Snir [RS89]. <p> For the case k = log n we have deg (P) 2 log n and stretch (P) 2 log n. 2.2 Distributed Data Tracking In this section we give a description of the distributed data tracking mechanisms of <ref> [AP89, AP91] </ref> and [BFR92], and their properties. These mechanisms are useful for the construction of competitive distributed algorithms as demonstrated in Section 4.6, Section 5.1.4, Section 5.1.3 and in Chapter 6. 38 Preliminaries 2.2.1 Mobile User Tracking The mobile user tracking mechanism of [AP89, AP91], allows to distributively track a single <p> of the distributed data tracking mechanisms of <ref> [AP89, AP91] </ref> and [BFR92], and their properties. These mechanisms are useful for the construction of competitive distributed algorithms as demonstrated in Section 4.6, Section 5.1.4, Section 5.1.3 and in Chapter 6. 38 Preliminaries 2.2.1 Mobile User Tracking The mobile user tracking mechanism of [AP89, AP91], allows to distributively track a single user moving in a network of processors. Given a network over a set P of n processors. Let u be current location of the mobile user. <p> The optimal cost of Find (v) is the cost of sending a message from v to the mobile user location, u; i.e., d (u; v) The following theorem is a slight improvement of the results of <ref> [AP89, AP91] </ref> obtained as a consequence of the data tracking results described in Section 2.2.2. Theorem 2.2.1 There is a mobile user tracking mechanism with the following properties: For every n-processor network, for every sequence of operations , 1. <p> The memory needed for the algorithm is O (log 2 (Diam)) per processor. 2.2.2 Data Tracking The data tracking mechanism of [BFR92] is a generalization of the mobile user tracking mechanism of <ref> [AP89, AP91] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q. <p> If no memory considerations are made then the approximation factor can be reduced to O (1). The Data Tracking Solution In the solution to the data tracking problem (Section 2.2.2), we make use two tools. One is a graph-theoretic structure of regional matchings, given by <ref> [AP89] </ref>, an application of the sparse graph partitions [AP90] described in Section 2.1. <p> The degree of a read-set or a write-set of p is the number of processors in the set. The read-radius, read-degree, write-radius and write-degree of an m-regional matching are defined as the maximum over all processors p of the corresponding parameter for p. <ref> [AP89] </ref> show how to construct for every m and `, 2 ` 2 log n, an m-regional matching with the following parameters: read-radius at most `, read-degree at most 2` + 1, write-radius at most 2` + 1, and write-degree at most n 2=` .
Reference: [AP90] <author> B. Awerbuch and D. Peleg. </author> <title> Sparse Partitions. </title> <booktitle> In Proc. of the 31st Ann. Symp. on Foundations of Computer science, </booktitle> <pages> pages 503-513, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: For most tools, only definitions and theorems are given, while proofs are left for latter chapters. Here, one can find descriptions for the following: the distributed data tracking mechanism [BFR92], the cover problem [BFR92], and vertex inclusion-exclusion problem [ABF94]. Also the properties of the sparse graph partition of <ref> [AP90] </ref> are listed, and the on-line Steiner tree problem of [IW91] is described along with a very simple new proof. Formal definitions of configuration problems, a general model, and another tool, the natural potential function are presented in Chapter 3. The file allocation problem is the subject of Chapter 4. <p> This has indeed been done in many papers dealing with distributed computation. Awerbuch and Peleg <ref> [AP90] </ref> have given algorithms for the construction of "sparse partitions" of a network. <p> Using the data tracking mechanism they get a distributed version of the Steiner-Based algorithm (Distributed-SB), which is polylog (n)-competitive. Awerbuch, Bartal and Fiat [ABF93a] give a deterministic distributed polylog (n)- competitive file allocation algorithm. The basic idea behind the distributed algorithm is to use the sparse graph decompositions of <ref> [AP90] </ref> to count the read requests. Each request is associated with some clusters that contain the processor issuing the request but do not contain the nearest file copy. A replication is invoked when the read counter reaches D. <p> The [ABF94] Hierarchical Paging algorithm uses the graph decompositions of <ref> [AP90] </ref>. In every cluster in the graph partition, it simulates a uniprocessor algorithm when D requests for a file are initiated in an inner part of the cluster. <p> Chapter 2 Preliminaries This chapter contains the description and definitions of several basic data structures, problems and tools that are necessary for the understanding of the various subjects in the thesis. The topics covered in this chapter are graph decompositions <ref> [AP90] </ref>, distributed data tracking mechanisms [BFR92], and some basic combinatorial problems: the cover problem [BFR92], the on-line Steiner tree problem [IW91] and the vertex inclusion-exclusion problem [ABF94]. <p> Therefore, this chapter should be regarded as a reference for these topics, and used to recall their definitions. 2.1 Graph Decompositions The hierarchical network decomposition <ref> [AP90] </ref> defines the notion of clusters, partitions, and a hierarchy of partitions. All these definitions are a function of some parameter k. (Usually k = log n.) A cluster C is a set of vertices. 35 36 Preliminaries A partition is a set of (possibly overlapping) clusters. <p> The Data Tracking Solution In the solution to the data tracking problem (Section 2.2.2), we make use two tools. One is a graph-theoretic structure of regional matchings, given by [AP89], an application of the sparse graph partitions <ref> [AP90] </ref> described in Section 2.1. <p> The major idea is to use uni-processor paging on "areas of activity". These areas are defined using the sparse partitions of <ref> [AP90] </ref>. After sufficiently many accesses to a file have been issued by processors within such an "area of activity", a copy of the file is fetched into this area. <p> We show next that a similar theorem holds for the distributed paging problem. We give a distributed paging algorithm, HP (Hierarchical Paging), which uses the hierarchical graph decomposition of <ref> [AP90] </ref>, and runs in every cluster of the decomposition a simulation of some uniprocessor paging algorithm, U.
Reference: [AP91] <author> B. Awerbuch and D. Peleg. </author> <title> Concurrent On-line Tracking of Mobile Users, </title> <booktitle> Proc. SIGCOMM. </booktitle> <address> Zurich, </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Another question that arises when on-line problems in distributed networks are considered, is that of providing with competitive distributed algorithms. Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in <ref> [AP89, AP91] </ref> for algorithms for tracking mobile users. <p> c-competitive iff there exists a constant a, such that for any global-control adversary Adv, and any request 12 sequence : Cost Alg () c Cost Adv () + a: This methodology of analysis and competitive measure was also implicitly done in the mobile user tracking mechanism of Awerbuch and Peleg <ref> [AP89, AP91] </ref> (generalized to data tracking in [BFR92]), and has been studied in other subsequent work. Awerbuch, Kutten and Peleg [AKP92], have considered distributed scheduling, where jobs are issued at the processors for execution at different times. <p> We manage a distributed data structure that allows fast access to the closest copy of a file, while the cost of managing the data structure is amortized against the cost of the data movement itself. Awerbuch and Peleg <ref> [AP89, AP91] </ref> solve a special case of this problem, they call the mobile user problem. They allow a Move operation to be applied to the mobile user, and provide a Find operation that return the location of the mobile user. However, they do not efficiently support birth and death. <p> O (log 2 n= log 2 D) times the inherent cost for these 1.5 The File Allocation Problem 19 operations, where D represents the ratio between data movement over an edge, and sending a message through the same edge (truncated to [2,n]). (This is also a slight improvement on the <ref> [AP89, AP91] </ref> result, were competitive ratio depends on the diameter of the network.) The path length traversed per each Find is O (log 2 n= log 2 D) times the length of the shortest path to a processor holding data. <p> The problem is also related to problems of data management, such as k-copy migration, and distributed paging, and mentioned in the context of the mobile user problem <ref> [AP89, AP91] </ref>. 32 Since in the distributed setting a k-server algorithm incurs some cost for the transmission of any message, such competitive algorithms cannot always inform all the processors, and even not all the servers, about every request. <p> We also use a mechanism that we call k-server tracking in order to find a specific server when needed and to find a close server to a specific point at any time. This mechanism is a slight modification of the techniques used for the mobile user tracking mechanism <ref> [AP89, AP91] </ref> and for the data-tracking mechanism [BFR92]. Manasse, McGeoch and Sleator [MMS88] proved a lower bound of k on the competitive ratio of any k-server algorithm in any metric space. This bound is conjectured to be the correct ratio. <p> We derive this lower bound by a reduction from the mobile user problem <ref> [AP89, AP91] </ref>, and a lower bound to this problem [AKRS92]. We also study the problem of devising a distributed version of the Harmonic k 34 server algorithm, proposed by Raghavan and Snir [RS89]. <p> For the case k = log n we have deg (P) 2 log n and stretch (P) 2 log n. 2.2 Distributed Data Tracking In this section we give a description of the distributed data tracking mechanisms of <ref> [AP89, AP91] </ref> and [BFR92], and their properties. These mechanisms are useful for the construction of competitive distributed algorithms as demonstrated in Section 4.6, Section 5.1.4, Section 5.1.3 and in Chapter 6. 38 Preliminaries 2.2.1 Mobile User Tracking The mobile user tracking mechanism of [AP89, AP91], allows to distributively track a single <p> of the distributed data tracking mechanisms of <ref> [AP89, AP91] </ref> and [BFR92], and their properties. These mechanisms are useful for the construction of competitive distributed algorithms as demonstrated in Section 4.6, Section 5.1.4, Section 5.1.3 and in Chapter 6. 38 Preliminaries 2.2.1 Mobile User Tracking The mobile user tracking mechanism of [AP89, AP91], allows to distributively track a single user moving in a network of processors. Given a network over a set P of n processors. Let u be current location of the mobile user. <p> The optimal cost of Find (v) is the cost of sending a message from v to the mobile user location, u; i.e., d (u; v) The following theorem is a slight improvement of the results of <ref> [AP89, AP91] </ref> obtained as a consequence of the data tracking results described in Section 2.2.2. Theorem 2.2.1 There is a mobile user tracking mechanism with the following properties: For every n-processor network, for every sequence of operations , 1. <p> The memory needed for the algorithm is O (log 2 (Diam)) per processor. 2.2.2 Data Tracking The data tracking mechanism of [BFR92] is a generalization of the mobile user tracking mechanism of <ref> [AP89, AP91] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q. <p> Since in the distributed setting at least one message has to be sent over the distance between the requesting processor and the server that serves it (to "find" the server), this observation follows from a lower bound [AKRS92] for the mobile user problem <ref> [AP91] </ref>, and a reduction from this problem to the distributed k-server problem that preserves the competitive ratio up to a factor of O (D). <p> The first two operations are the operations of the mobile user mechanism <ref> [AP91] </ref>, and the last one is the data tracking [BFR92] operation. Henceforth, let T N;k be the best competitive ratio for a k-server tracking mechanism on network N . <p> Henceforth, let T N;k be the best competitive ratio for a k-server tracking mechanism on network N . If a processor is allowed to have O (kffi log n) bits of memory, then it follows from the constructions of <ref> [AP91, BFR92] </ref> that for every N and k, T N ;k = O ( log n) and ff is O (1). <p> Let ~ T N;k be the best competitive ratio for a generalized k-server tracking algorithm on network N . One can use the constructions of <ref> [AP91, BFR92] </ref> to get this mechanism for every network N such that ~ T N;k = O (maxfk; g log n). 6.3 Translator to Make k-Server Algorithms Dis tributed In this section we give a general translator to transform any global-control deterministic competitive k-server algorithm into a distributed one. <p> Using results on the mobile user and data tracking problems <ref> [AP91, BFR92] </ref> we get: Corollary 6.4.2 The Distributed-Harmonic k-server algorithm is O (c H (1 + 1 D maxfk; gffi log n))-competitive, against adaptive on-line adversaries, for arbitrary network topologies. 6.5 Discussion and Open Problems 249 Using similar techniques we get the following: Theorem 6.4.3 There is a randomized O (k
Reference: [AW94] <author> J. Aspnes and O. Waarts. </author> <title> A Modular Measure of Competitive Performance for Distributed Algorithms. </title> <type> Manuscript. </type>
Reference-contexts: Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. Ajtai et. al. [AADW94] and <ref> [AW94] </ref> deal with the cooperative collect problem in shared memory. Another question that arises when on-line problems in distributed networks are considered, is that of providing with competitive distributed algorithms. Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. <p> Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. Other work on these lines has been made in <ref> [AKP92, BR92, ABF93a, ABF93b, AADW94, AW94, ABF94] </ref>. 10 1.2 Competitive Analysis of Distributed Algo rithms A network is modeled by an undirected weighted graph G = (V; E), where processors are represented by vertices, and edge weights the length or cost of a bidirectional link between the two corresponding adjacent processors. <p> In other words, the lower bound for any distributed algorithm, given that current request sequence, can be used to define the "inherent" cost of that sequence. The work of Ajtai et. al. in the context of cooperative collect has been further developed by Aspens and Waarts <ref> [AW94] </ref>. In these papers they obtain nonconstructive O (n 1=2 log 2 n) and constructive O (n 3=4 log 2 n) competitive algorithms both in terms of number of invoked operations (latency) and number of completed tasks (throughput).
Reference: [Bartal92] <author> Y. Bartal. </author> <title> A Fast Memoryless 2-Server Algorithm in Euclidean Spaces. </title> <year> 1992. </year>
Reference: [Bartal93] <author> Y. Bartal. </author> <title> The Harmonic 2-Server Algorithm is 3-Competitive. </title> <year> 1993. </year>
Reference: [Bartal94] <author> Y. Bartal. </author> <title> On the k-Server Work-Function Algorithm. </title> <year> 1994. </year>
Reference-contexts: This bound is conjectured to be the correct ratio. In contrast to the global-control case where there are algorithms with competitive ratio that depends only on k (and not on n) for any metric space <ref> [FRR90, Grove91, BG92, KP94, Bartal94] </ref>, (Koutsoupias and Papadimitriou [KP94] proved an upper bound of 2k 1) this is not the case in the distributed setting.
Reference: [Bell92] <author> Gordon Bell. </author> <title> Ultracomputers: A Teraflop before its time. </title> <journal> In Communications of the ACM, </journal> <volume> 35(8), </volume> <year> 1992. </year>
Reference-contexts: In the context of parallel multiprocessors, this setting is referred to as Cache-Only Memory Architecture (COMA) [HALH91], and it has has been employed in a number of recently developed parallel machines such as the Data Diffusion Machine [HALH91] and in the new KSR1 machine <ref> [Bell92] </ref>, where it is referred to as AllCache Engine. This setting also corresponds to that of a homogeneous distributed file server, comprised of a collection of diskless workstations.
Reference: [Burley93] <author> W.R. Burley. </author> <title> Traversing Layered Graphs Using the Work Function Algorithm. </title> <type> Technical Report CS93-319, </type> <institution> Department of BIBLIOGRAPHY 257 Computer Science and Engineering, University of California, </institution> <address> San Diego, La Jolla, California 92093-0114, </address> <year> 1993. </year>
Reference-contexts: Fiat et. al. [FFKRRV91], deal with layered graph traversal, the general case being equivalent to metrical service systems, also studied by <ref> [Burley93] </ref>. Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92].
Reference: [BBFY92] <author> E. Bar-Eli, P. Berman, A. Fiat, and P. Yan. </author> <title> On-Line Navigation in a Room. </title> <booktitle> In Proc. of the 3rd Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 237-249, </pages> <month> January </month> <year> 1992. </year>
Reference: [BBKTW90] <author> S. Ben-David, A. Borodin, R.M. Karp, G. Tardos, and A. Wigderson. </author> <title> On the Power of Randomization in On-line Algorithms. </title> <booktitle> In Proc. of the 22nd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 379-386, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Its cost is the expectation taken over its own coin tosses. An on-line algorithm selects the configuration for a request r independent of the suffix of the sequence after r. As a class of problems it is equivalent to the request-answer games of Ben-David et. al. <ref> [BBKTW90] </ref>. In general a configuration can be chosen to include the entire history of requests and answers, but many on-line problems (including server problems [MMS88], task systems [BLS87] and data management problems [BFR92] discussed here) have a more natural definition of configuration. <p> For randomized algorithms, the power given to the adversary must be made precise. Ben-David et. al. <ref> [BBKTW90] </ref> (following Raghavan and Snir [RS89]) distinguish between three types of adversaries: An oblivious adversary must commit to the sequence of events while knowing neither the coin tosses nor the actions taken by the on-line algorithm. <p> In contrast the power of adaptive adversaries is limited, as expressed by the following theorems of Ben-David et. al. <ref> [BBKTW90] </ref>: Theorem 1.1.1 ([BBKTW90]) If there exists a c-competitive randomized online algorithm against adaptive off-line adversaries, then there is a deterministic c-competitive algorithm. Theorem 1.1.2 ([BBKTW90]) If there exists a c-competitive randomized online algorithm against the adaptive on-line adversary, and a d-competitive randomized on-line algorithm against the oblivious adversary, then there <p> One of the most useful tools for proving the competitiveness of algorithms are potential functions, and most of the proofs in this thesis are potential function based. <ref> [BBKTW90] </ref> also give a constructive version of Theorem 1.1.3 if a certain augmented potential function they define is computable for the on-line algorithm. In this thesis, we give a constructive proof that the competitiveness of an algorithm against adaptive on-line adversaries implies the existence of the natural potential function. <p> Fiat et. al. [FFKRRV91], deal with layered graph traversal, the general case being equivalent to metrical service systems, also studied by [Burley93]. Ben-David et. al. <ref> [BBKTW90] </ref>, define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92]. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition [FKT89], on-line Steiner tree and generalizations [IW91, CV92, AA92, ABF93a, WY93, AAB94], and on-line graph coloring [Vishwa90, Irani90, HS92]. <p> Applying our translator to the known k-server algorithms for general metric spaces ([FRR90], [Grove91, BG92] via <ref> [BBKTW90] </ref>, and [KP94]) is, of course, possible; however, due to the large number of memory states of these algorithms, this yields a distributed algorithm with a competitive ratio which is greater than that of the application of an algorithm for trees to a minimum spanning tree (as previously suggested [CL91a]). <p> We conclude that DEL 2 O (minflog n; log (Diam)g) INS: Chapter 3 Configuration Problems and the Natural Potential Function 3.1 Configuration Problems and Potential Func tions We define on-line configuration problems. As a class of problems it is equivalent to the request-answer games of <ref> [BBKTW90] </ref>. Most of the previously studied on-line problems (including server problems and metrical task systems, and including the problems dealt with in this thesis) are naturally described in the context of this model. Definition. <p> So, if the on-line algorithm is randomized, the sequence generated by this type of adversary is randomized as well. Ben-David et al. <ref> [BBKTW90] </ref> elaborate on this and other types of adversaries. 3.1 Configuration Problems and Potential Functions 53 Notation. Fix a time n. The request sequence at time n, is denoted n = r 1 r 2 r n . Let Alg be an on-line algorithm, and let Adv be an adversary. <p> It is O (1)-competitive for processors on a ring, for trees, and for uniform networks. Finally, the result of <ref> [BBKTW90] </ref> implies the following corollary. Corollary 4.5.7 For every network on n processors, if there exists a strictly c-competitive Steiner tree algorithm against adaptive on-line adversaries on N , then there exists a computable deterministic O (c 2 )-competitive algorithm for the file allocation problem.
Reference: [BC93] <author> A. Blum and P. Chalasani. </author> <title> An On-line Algorithm for Improving Performance in Navigation. </title> <booktitle> In Proc. of the 34th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 2-11, </pages> <month> Octo-ber </month> <year> 1993. </year>
Reference: [BCR87] <author> R.A. Baeza-Yates, J.C. Culberson, and G.J.E. Rawlins. </author> <title> Searching with Uncertainty. </title> <type> Technical Report, </type> <institution> University of Waterloo, </institution> <month> October </month> <year> 1987. </year>
Reference-contexts: Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in [ST85b, BM85, HM92]. The competitive measure is particularly useful in graph and terrain exploration problems, and first used in this context by Baeza-Yates, Culberson, and Rawlings <ref> [BCR87] </ref>. Many other exploration and motion planning problems were studied in [PY89, Klein91, KRR91, BRS91, FFKRRV91, DP90, BBFY92, BC93, DKP91, ABM93, KRT93, Kleinb94]. Financial problems have been considered by El-Yaniv et. al. [EFKT92], in the context of stock exchange policies, later discussed in [CCEKL94]. <p> for the line and the ring T N;k = O (1), and for trees T N;k = O (k), (even with O (1) memory per processor) since when servers move they can leave track of their direction from each processor, and then can be found by a disjoint path traversal <ref> [BCR87] </ref>. 6.3 Translator to Make k-Server Algorithms Distributed 233 Definition. A c-competitive generalized k-server tracking mechanism is a k-server tracking mechanism that also allows every processor p to find all servers at distance at most d from it, at an amortized cost of at most c d.
Reference: [BFR92] <author> Y. Bartal, A. Fiat, and Y. Rabani. </author> <title> Competitive Algorithms for Distributed Data Management. </title> <booktitle> In Proc. of the 24th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 39-50, </pages> <month> May </month> <year> 1992. </year> <note> Also in the STOC 92 special issue Journal of Computer and Systems Sciences, </note> <year> 1994. </year>
Reference-contexts: They rephrase the question as: "How well is the algorithm performing with respect to an optimal prescient adversary ?". That is, the algorithm is measured by how well it copes with the lack of complete information. In this thesis we deal with the competitive analysis of on-line distributed algorithms <ref> [BFR92] </ref>. The total communication cost of a distributed algorithm including costs expended for acquiring information about the input events, is compared to that of a prescient global-control adversary. Distributed paging [BFR92, ABF93a, ABF93b, ABF94], is one of the basic utilization problems in distributed systems (see [DF81, GS90] for surveys). <p> In this thesis we deal with the competitive analysis of on-line distributed algorithms [BFR92]. The total communication cost of a distributed algorithm including costs expended for acquiring information about the input events, is compared to that of a prescient global-control adversary. Distributed paging <ref> [BFR92, ABF93a, ABF93b, ABF94] </ref>, is one of the basic utilization problems in distributed systems (see [DF81, GS90] for surveys). Where different files are maintained at various nodes in a distributed shared database, are read and written by arbitrary network processors. <p> We give competitive algorithms to minimize the total communication costs for serving the requests. The problem limited to a single file, where multiple copies of the file are allowed, is called distributed file allocation <ref> [BFR92, ABF93a] </ref>. The thesis contains a comprehensive study of these two problems, and also an 3 other example for competitive analysis of distributed algorithms in context of the related distributed k-server problem [BR92]. <p> This chapter should be used as a reference manual. For most tools, only definitions and theorems are given, while proofs are left for latter chapters. Here, one can find descriptions for the following: the distributed data tracking mechanism <ref> [BFR92] </ref>, the cover problem [BFR92], and vertex inclusion-exclusion problem [ABF94]. Also the properties of the sparse graph partition of [AP90] are listed, and the on-line Steiner tree problem of [IW91] is described along with a very simple new proof. <p> This chapter should be used as a reference manual. For most tools, only definitions and theorems are given, while proofs are left for latter chapters. Here, one can find descriptions for the following: the distributed data tracking mechanism <ref> [BFR92] </ref>, the cover problem [BFR92], and vertex inclusion-exclusion problem [ABF94]. Also the properties of the sparse graph partition of [AP90] are listed, and the on-line Steiner tree problem of [IW91] is described along with a very simple new proof. <p> We study on-line algorithms in the general model of configuration problems <ref> [BFR92] </ref>. <p> As a class of problems it is equivalent to the request-answer games of Ben-David et. al. [BBKTW90]. In general a configuration can be chosen to include the entire history of requests and answers, but many on-line problems (including server problems [MMS88], task systems [BLS87] and data management problems <ref> [BFR92] </ref> discussed here) have a more natural definition of configuration. For randomized algorithms, the power given to the adversary must be made precise. <p> Fiat et. al. [FFKRRV91], deal with layered graph traversal, the general case being equivalent to metrical service systems, also studied by [Burley93]. Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in <ref> [DM92, BFR92] </ref>. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition [FKT89], on-line Steiner tree and generalizations [IW91, CV92, AA92, ABF93a, WY93, AAB94], and on-line graph coloring [Vishwa90, Irani90, HS92]. <p> Karlin et. al., [KMRS88] studied Snoopy caching, and in [KLMO91] the problem of spinning in shared memory was analyzed. Black and Sleator [BS89] introduced the file migration and file replication problems. These problems where later studied in [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]. Bartal et. al. <ref> [BFR92] </ref>, defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. <p> Bartal and Rosen [BR92] study the distributed k-server problem. Ajtai et. al. [AADW94] and [AW94] deal with the cooperative collect problem in shared memory. Another question that arises when on-line problems in distributed networks are considered, is that of providing with competitive distributed algorithms. Bartal et. al. <ref> [BFR92] </ref> have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. <p> Naturally, a distributed algorithm will have to make a wise decision before gathering information about events taking place at remote processors, since the communication cost it incurs for such an operation is very large. Bartal, Fiat and Rabani <ref> [BFR92] </ref> have suggested the competitive analysis of distributed on-line problem in the context of the distributed data management problems, where files reside in a network and being read and written by the processors, and the configuration of files should be determined on-line as to minimize communication costs. <p> The basic methodology in <ref> [BFR92] </ref> is based on formulating the distributed problem, as a global-control problem, where costs associated with events are defined as to reflect the inherent lower bounds for any distributed on-line algorithm. <p> such that for any global-control adversary Adv, and any request 12 sequence : Cost Alg () c Cost Adv () + a: This methodology of analysis and competitive measure was also implicitly done in the mobile user tracking mechanism of Awerbuch and Peleg [AP89, AP91] (generalized to data tracking in <ref> [BFR92] </ref>), and has been studied in other subsequent work. Awerbuch, Kutten and Peleg [AKP92], have considered distributed scheduling, where jobs are issued at the processors for execution at different times. Jobs can be transmitted from one processor to another, and also may be executed in parts. <p> A natural question is weather competitive distributed algorithms exist for this problem. In [BR92] the goal is to give a general translator to turn a global-control algorithm into a distributed one. The data management problems: file allocation and distributed paging of <ref> [BFR92] </ref> have been given more distributed algorithms by Awerbuch, Bartal and Fiat [ABF93a, ABF94], presented in Chapter 4 and Chapter 5 of this thesis. <p> In these papers they obtain nonconstructive O (n 1=2 log 2 n) and constructive O (n 3=4 log 2 n) competitive algorithms both in terms of number of invoked operations (latency) and number of completed tasks (throughput). In the papers <ref> [BFR92, BR92, ABF93a, ABF94] </ref> some general tools for the analysis of distributed on-line algorithms have been developed and demonstrated, such as: the use of simulation sequences, and graph-decompositions and the data tracking mechanism. <p> Many of the solutions presented in this thesis have this property. The "Steiner-Based" file allocation algorithm of Bartal,Fiat and Rabani <ref> [BFR92] </ref> is obtained using a reduction to the on-line Steiner tree problem [IW91]. The distributed paging algorithms of Awerbuch, Bartal and Fiat, Heat & Dump [ABF93b] and Hierarchical Paging [ABF94] are using the simulation of uniprocessor algorithms. <p> The algorithm of [ABF94] also uses a version of the file allocation algorithm in [ABF93a] in the solution for the distributed paging problem. Also, the cover problem <ref> [BFR92] </ref> is used in the solution for the data tracking mechanism [BFR92]. <p> The algorithm of [ABF94] also uses a version of the file allocation algorithm in [ABF93a] in the solution for the distributed paging problem. Also, the cover problem <ref> [BFR92] </ref> is used in the solution for the data tracking mechanism [BFR92]. <p> This type of problem arises in the translator of [BR92]. Therefore, the request sequence generated for the simulated algorithm is carefully chosen so that the cost incurred by that algorithm will be large enough with respect to the cost incurred by the main algorithm <ref> [BFR92, BR92, ABF94] </ref>. It may happen that some activity done in combination with the simulation 1.3 Using On-line Algorithms to Solve Different Problems 15 interacts with it and interferes with the simulated configuration. This happens in [ABF93b, BR92]. <p> We say the potential function is strict if initially it equals 0. If there exists such a potential function for an on-line algorithm then it is c-competitive against adaptive on-line adversaries (see [ST85a]). 16 In this thesis we prove the other direction. We define the natural potential function <ref> [BFR92] </ref> and prove the following in the context of configuration problems: Theorem 1.3.1 An on-line algorithm Alg is c-competitive against adaptive online adversaries iff Alg has a two-step potential function (for c). Alg is strictly competitive iff the potential function is strict. <p> This implies that if communication is necessary from one part of the tree to the other we might as well cross the whole tree multiplying the cost by at most the number of servers. Sparse partitions and its consequences are also the basis for the data tracking mechanism <ref> [BFR92] </ref>. 1.4.2 Distributed Data Tracking Mechanisms One of the basic problems for a distributed file allocation algorithm is the fact that it does not have full information of the network, and thus does not know even where a copy of the file exists. <p> It is therefore not at all clear that its cost for reading a file is proportional to the distance to the nearest copy of the file. The distributed data tracking mechanism of Bartal, Fiat and Rabani <ref> [BFR92] </ref> justifies this assumption, for arbitrary network topologies. Where a subset Q of processors are holding data, we seek to access a processor in Q, while passing through a path of length not much larger than the shortest path to one. <p> It is bounded by O (1) if no space limitations are given. With having only memory per processor be only polylogarithmic in the diameter, we get an approximation factor equal to O (log n= log D). The distributed data tracking mechanism is used in all distributed data management algorithms <ref> [BFR92, ABF93a, ABF94] </ref>, and also used to provide k-server tracking mechanisms in [BR92]. 1.5 The File Allocation Problem The management of data in a distributed network is an important and extensively studied problem in management science, engineering, and computer systems. <p> We also prove that (log n) is the best competitive ratio one can obtain for general networks, even for randomized algorithms against an oblivious adversary. We present two different algorithms, one of Bartal, Fiat and Rabani <ref> [BFR92] </ref> is a very simple randomized algorithm based on the greedy Steiner tree ([IW91]) algorithm. The Steiner-Based (SB) algorithm is also memoryless [RS89] (I.e., its decisions depend only on its current configuration and the current request). In fact, algorithm SB can use any on-line Steiner tree algorithm. <p> Lund et. al.[LRWY94] have obtained an optimal deterministic 3-competitive, and optimal randomized (2 + 1=D)-competitive algorithm for tree networks. Next, we consider the question of providing with competitive distributed algorithms for the file allocation problem. Bartal, Fiat and Rabani <ref> [BFR92] </ref>, show that for uniform, trees, and ring there are O (1)-competitive distributed algorithms. Using the data tracking mechanism they get a distributed version of the Steiner-Based algorithm (Distributed-SB), which is polylog (n)-competitive. Awerbuch, Bartal and Fiat [ABF93a] give a deterministic distributed polylog (n)- competitive file allocation algorithm. <p> Clearly, this game of hot potato may continue. The distributed paging problem, due to Bartal, Fiat and Rabani <ref> [BFR92] </ref> (also referred to as constrained file allocation), attempts to solve many individual file allocation problems simultaneously, while considering the actual memory capacity of the processors. The point is that the different file allocation problems may interfere with each other if there is insufficient memory. <p> This setting also corresponds to that of a homogeneous distributed file server, comprised of a collection of diskless workstations. Some systems work in a related setting has been reported in [LH86]. 1.6 The Distributed Paging Problem 29 We fully analyze the distributed paging problem in the uniform network topology <ref> [BFR92, ABF93b] </ref>. This type of networks is of special interest as a model for a LAN network. <p> Given that processor i can accommodate k i files, all files equal in size, let m = i=1 k i . We give an O (m) competitive deterministic algorithm, Distributed Flush-When-Full <ref> [BFR92] </ref>, for the distributed paging problem on uniform networks. We also give a lower bound of (m) on the competitive ratio for any network. Randomized distributed paging algorithms are discussed by Awerbuch, Bartal and Fiat in [ABF93b]. <p> This mechanism is a slight modification of the techniques used for the mobile user tracking mechanism [AP89, AP91] and for the data-tracking mechanism <ref> [BFR92] </ref>. Manasse, McGeoch and Sleator [MMS88] proved a lower bound of k on the competitive ratio of any k-server algorithm in any metric space. This bound is conjectured to be the correct ratio. <p> Chapter 2 Preliminaries This chapter contains the description and definitions of several basic data structures, problems and tools that are necessary for the understanding of the various subjects in the thesis. The topics covered in this chapter are graph decompositions [AP90], distributed data tracking mechanisms <ref> [BFR92] </ref>, and some basic combinatorial problems: the cover problem [BFR92], the on-line Steiner tree problem [IW91] and the vertex inclusion-exclusion problem [ABF94]. <p> The topics covered in this chapter are graph decompositions [AP90], distributed data tracking mechanisms <ref> [BFR92] </ref>, and some basic combinatorial problems: the cover problem [BFR92], the on-line Steiner tree problem [IW91] and the vertex inclusion-exclusion problem [ABF94]. Therefore, this chapter should be regarded as a reference for these topics, and used to recall their definitions. 2.1 Graph Decompositions The hierarchical network decomposition [AP90] defines the notion of clusters, partitions, and a hierarchy of partitions. <p> For the case k = log n we have deg (P) 2 log n and stretch (P) 2 log n. 2.2 Distributed Data Tracking In this section we give a description of the distributed data tracking mechanisms of [AP89, AP91] and <ref> [BFR92] </ref>, and their properties. <p> The cost on each Find in is O (log 2 n) times the optimal cost of that Find. The memory needed for the algorithm is O (log 2 (Diam)) per processor. 2.2.2 Data Tracking The data tracking mechanism of <ref> [BFR92] </ref> is a generalization of the mobile user tracking mechanism of [AP89, AP91]. <p> cost associated is O (d (p; L (p))). * Scan | Scan the entire list, at a cost proportional to the sum of communi cation costs between p and every processor in L (p). 2.3 Basic Combinatorial Problems 2.3.1 The Cover Problem The Cover Problem Definition The on-line cover problem <ref> [BFR92] </ref> is the problem of maintaining a covering of small number of small diameter subsets of a dynamically changing set in a weighted graph. Let G be a weighted graph. Let Q be a subset of nodes of G. <p> Then s (i) c (i). Let the communication cost expended by the distributed i-level algorithm be denoted Cost CP i . The following theorem is a stronger version of the theorem of <ref> [BFR92] </ref>: Theorem 2.3.1 The hierarchical cover algorithm has the following properties: * The following bound holds for the number of created covering sets. log (Diam) X i=0 log (Diam) X i=0 O (minflog n; log (Diam)g) UPD: * The total communication cost expended by the hierarchical cover algorithm is log (Diam) <p> As described in Section 2.3.1 the tree cover problem is a restriction of the cover problem of <ref> [BFR92] </ref>. In fact we use the hierarchical cover problem, defined in Section 2.3.1, to obtain a hierarchy of tree covers. The analysis of the Steiner tree potential function is somewhat different than the usual one-step analysis. <p> Gaps are especially high in the distributed setting, where the upper bound is O (log 4 n), while the best lower bound known, which follows from the global-control setting, is (log n). Chapter 5 Distributed Paging In this section we study the distributed paging problem <ref> [BFR92, ABF93b, ABF94] </ref>. Distributed paging is the solution of multiple file allocation problems, constrained by the local memory of the processors. Let F denote the set of files and P denote the set of processors. <p> The first two operations are the operations of the mobile user mechanism [AP91], and the last one is the data tracking <ref> [BFR92] </ref> operation. Henceforth, let T N;k be the best competitive ratio for a k-server tracking mechanism on network N . <p> Henceforth, let T N;k be the best competitive ratio for a k-server tracking mechanism on network N . If a processor is allowed to have O (kffi log n) bits of memory, then it follows from the constructions of <ref> [AP91, BFR92] </ref> that for every N and k, T N ;k = O ( log n) and ff is O (1). <p> Let ~ T N;k be the best competitive ratio for a generalized k-server tracking algorithm on network N . One can use the constructions of <ref> [AP91, BFR92] </ref> to get this mechanism for every network N such that ~ T N;k = O (maxfk; g log n). 6.3 Translator to Make k-Server Algorithms Dis tributed In this section we give a general translator to transform any global-control deterministic competitive k-server algorithm into a distributed one. <p> Using results on the mobile user and data tracking problems <ref> [AP91, BFR92] </ref> we get: Corollary 6.4.2 The Distributed-Harmonic k-server algorithm is O (c H (1 + 1 D maxfk; gffi log n))-competitive, against adaptive on-line adversaries, for arbitrary network topologies. 6.5 Discussion and Open Problems 249 Using similar techniques we get the following: Theorem 6.4.3 There is a randomized O (k
Reference: [BFKV92] <author> Y. Bartal, A. Fiat, H. Karloff, and R. Vohra. </author> <title> New Algorithms for an Ancient Scheduling Problem. </title> <booktitle> In Proc. of the 24th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 51-58, </pages> <month> May </month> <year> 1992. </year> <note> Also in the STOC 92 special issue Journal of Computer and Systems Sciences, </note> <year> 1994. </year>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested.
Reference: [BG92] <author> Y. Bartal and E. Grove. </author> <title> The Harmonic k-Server Algorithm is Competitive, </title> <note> 1992. Accepted for publication in the JACM. 258 BIBLIOGRAPHY </note>
Reference-contexts: Applying our translator to the known k-server algorithms for general metric spaces ([FRR90], <ref> [Grove91, BG92] </ref> via [BBKTW90], and [KP94]) is, of course, possible; however, due to the large number of memory states of these algorithms, this yields a distributed algorithm with a competitive ratio which is greater than that of the application of an algorithm for trees to a minimum spanning tree (as previously <p> This bound is conjectured to be the correct ratio. In contrast to the global-control case where there are algorithms with competitive ratio that depends only on k (and not on n) for any metric space <ref> [FRR90, Grove91, BG92, KP94, Bartal94] </ref>, (Koutsoupias and Papadimitriou [KP94] proved an upper bound of 2k 1) this is not the case in the distributed setting. <p> We derive this lower bound by a reduction from the mobile user problem [AP89, AP91], and a lower bound to this problem [AKRS92]. We also study the problem of devising a distributed version of the Harmonic k 34 server algorithm, proposed by Raghavan and Snir [RS89]. Bartal and Grove <ref> [BG92] </ref> proved that Harmonic is O (2 k log k)-competitive (improving the competitiveness proof given by [Grove91]), but it is believed that the correct competitive ratio is O (k 2 ) (see [RS89, BKT90]). <p> Henceforth let ffi = dlog (Diam)e, and = maxfdlog ne; dlog (Diam)eg. 6.1 Lower Bound In contrast to the global-control case, where k-server algorithms with competitive ratio that depends solely on k exist for all metric spaces ([FRR90], [Grove91], <ref> [BG92] </ref>, [KP94]), this is not the case in the distributed setting. <p> We show in <ref> [BG92] </ref> that the competitive ratio of Harmonic is O (2 k log k). It has been conjectured ([RS89, BKT90]) that the correct competitive ratio is O (k 2 ). Let c H denote the competitive ratio of Harmonic.
Reference: [BGR93] <author> M. Bern, D.H. Greene, A. Raghunathan. </author> <title> On-line Algorithms for Cache Sharing. </title> <booktitle> In Proc. 25rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 402-411, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: We elaborate more on these issues in the sequel. Since first suggested many different problems were analyzed using the competitive measure. Sleator and Tarjan [ST85a] have introduced competitive analysis in the context of uniprocessor paging and list ranking. Paging was studied 8 also in <ref> [KMRS88, RS89, CKPV90, FKLMSY91, MS91, Young91, BIRS91, IKP92, BGR93] </ref>. A somewhat different model was considered by Karlin et. al. [KPR92], where requests are generated by a Markov source. A similar approach was used to analyze prefetching by Vitter et. al. [VK91, KV94].
Reference: [BGRS90] <author> M. Bern, D.H. Greene, A. Raghunathan, and M. Sudan. </author> <title> On-line Algorithms for Locating Checkpoints. </title> <booktitle> In Proc. of the 22rd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 359-368, </pages> <month> May </month> <year> 1990. </year>
Reference: [BIRS91] <author> A. Borodin, S. Irani, P. Raghavan, and B. Schieber. </author> <title> Competitive Paging with Locality of Reference. </title> <booktitle> In Proc.of the 23rd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: We elaborate more on these issues in the sequel. Since first suggested many different problems were analyzed using the competitive measure. Sleator and Tarjan [ST85a] have introduced competitive analysis in the context of uniprocessor paging and list ranking. Paging was studied 8 also in <ref> [KMRS88, RS89, CKPV90, FKLMSY91, MS91, Young91, BIRS91, IKP92, BGR93] </ref>. A somewhat different model was considered by Karlin et. al. [KPR92], where requests are generated by a Markov source. A similar approach was used to analyze prefetching by Vitter et. al. [VK91, KV94].
Reference: [BKMRRS91] <author> S. Baruah, G. Koren, B. Mishra, A. Raghunathan, L. Rosier, and D. Shasha. </author> <title> On-Line Scheduling in the Presence of Overload. </title> <booktitle> In Proc. of the 32nd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 100-110, </pages> <month> October </month> <year> 1991. </year>
Reference: [BKR94] <author> Y. Bartal, H. Karloff, and Y. Rabani. </author> <title> A New Lower Bound for m-Machine Scheduling. </title> <booktitle> Information Processing Letters 50 (1994), </booktitle> <pages> 113-116. </pages>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested.
Reference: [BKRS92] <author> A. Blum, H. Karloff, Y. Rabani, and M. Saks. </author> <title> A Decomposition Theorem and Lower Bounds for Randomized Server Problems. </title> <booktitle> In Proc. of the 33rd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 197-207, </pages> <month> October </month> <year> 1992. </year>
Reference: [BKT90] <author> P. Berman, H. Karloff, and G. Tardos. </author> <title> A Competitive 3-Server Algorithm. </title> <booktitle> In Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 280-290, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Bartal and Grove [BG92] proved that Harmonic is O (2 k log k)-competitive (improving the competitiveness proof given by [Grove91]), but it is believed that the correct competitive ratio is O (k 2 ) (see <ref> [RS89, BKT90] </ref>). We give a distributed version of the Harmonic k-server algorithm with competitive ratio not much larger than in the "global-control" case. The Harmonic algorithm is of practical interest because of its simplicity and the fact that it is memoryless.
Reference: [BLS87] <author> A. Borodin, N. Linial, and M. Saks. </author> <title> An Optimal On-Line Algorithm for Metrical Task Systems. </title> <booktitle> In Proc. of the 19th Ann. ACM Symp on Theory of Computing, </booktitle> <pages> pages 373-382, </pages> <month> May </month> <year> 1987. </year> <note> BIBLIOGRAPHY 259 </note>
Reference-contexts: As a class of problems it is equivalent to the request-answer games of Ben-David et. al. [BBKTW90]. In general a configuration can be chosen to include the entire history of requests and answers, but many on-line problems (including server problems [MMS88], task systems <ref> [BLS87] </ref> and data management problems [BFR92] discussed here) have a more natural definition of configuration. For randomized algorithms, the power given to the adversary must be made precise. <p> Randomization against oblivious adversaries is very powerful. In the context of many problems such as task systems <ref> [BLS87] </ref>, paging [FKLMSY91], routing [ABFR94] and distributed paging [ABF93b], it has been demonstrated that the competitive ratio may drop dramatically when randomization against oblivious 1.1 On-line Problems and Competitive Analysis 7 adversaries is considered. <p> Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks <ref> [BLS87] </ref>. McGeoch, Manasse, and Sleator [MMS88], introduced the k-server problem, studied in a great many papers [RS89, Turpin89, BKT90, CKPV90, CDRS90, BGRS90, CL90, CR90, IR93, FRR90, KMMO90, CL91a, CL91b, FKLMSY91, MS91, KRR91, CL92a, CL92b, AKPW91, Grove91, FR92, BKRS92, Bartal92, Bartal93, BR92, Tetali94, BG92, KP94, Bartal94]. <p> The natural potential function is used in Section 4.5.1 to prove the reduction from the file allocation problem to the on-line Steiner tree problem. In Section 4.5.2 we use the natural potential function to obtain a theorem in the general framework of task systems <ref> [BLS87] </ref>, which shows how to extract algorithms for a family of task systems, given algorithms for a simpler special case of these task systems. <p> one can transform global-control deterministic algorithms (e.g. [KMRS88, ST85a]) to distributed ones, by choosing a leader that will run the global-control algorithm, while ignoring requests on covered points; for the case of k = n 1, one can use the algorithm of Borodin, Linial and Saks for metrical task systems <ref> [BLS87] </ref> which defines a fixed traversal sequence for the single point which is uncovered at any specific time; only a single message of O (1) bits has to be sent to the new uncovered point. <p> An on-line algorithm selects the configuration for a request r independent of the suffix of the sequence after r. The index of a request in an input sequence is called the stage or the time. A task system (see <ref> [BLS87] </ref>) is an on-line configuration problem where the cost function has the following structure. Define the cost of a move between configurations in Con, denoted dist (C 1 ; C 2 ) (where C 1 ; C 2 2 Con) (this is the move cost).
Reference: [BM85] <author> J.L. Bentley and C. McGeoch. </author> <title> Amortized Analysis of Self-Organizing Sequential Search Heuristics. </title> <journal> In Communications of the ACM, </journal> <volume> 28(4) </volume> <pages> 404-411, </pages> <year> 1985. </year>
Reference-contexts: Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in <ref> [ST85b, BM85, HM92] </ref>. The competitive measure is particularly useful in graph and terrain exploration problems, and first used in this context by Baeza-Yates, Culberson, and Rawlings [BCR87]. Many other exploration and motion planning problems were studied in [PY89, Klein91, KRR91, BRS91, FFKRRV91, DP90, BBFY92, BC93, DKP91, ABM93, KRT93, Kleinb94].
Reference: [BS89] <author> D.L. Black and D.D. Sleator. </author> <title> Competitive Algorithms for Replication and Migration Problems. </title> <type> Technical Report CMU-CS-89-201, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1989. </year>
Reference-contexts: The mortgage problem was considered in [EK93]. Another instance where competitive analysis naturally applies is for problems in distributed networks. Karlin et. al., [KMRS88] studied Snoopy caching, and in [KLMO91] the problem of spinning in shared memory was analyzed. Black and Sleator <ref> [BS89] </ref> introduced the file migration and file replication problems. These problems where later studied in [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. <p> Thus, read and write requests issued by other processors in the network must all access the processor that holds the copy. Black and Sleator <ref> [BS89] </ref> call this problem the file migration problem. The data migration problem can also be considered as a special case of the 1-server with excursion problem defined in [MMS88]. Black and Sleator [BS89] give an optimal 3-competitive ratio for this problem on the uniform network topology and for trees. <p> Black and Sleator <ref> [BS89] </ref> call this problem the file migration problem. The data migration problem can also be considered as a special case of the 1-server with excursion problem defined in [MMS88]. Black and Sleator [BS89] give an optimal 3-competitive ratio for this problem on the uniform network topology and for trees. <p> We therefore conclude that over the entire sequence of events the online cost is equal to the cost of the 3 adversaries up to an additive term, implying the lower bound. Black and Sleator <ref> [BS89] </ref> used a result of Karlin et al. [KMRS88] to get a lower bound of 3 for deterministic data migration algorithms. If requests are limited to write requests only, the file allocation problem collapses to the data migration problem, and therefore for deterministic algorithms the result in [BS89] can be used <p> Black and Sleator <ref> [BS89] </ref> used a result of Karlin et al. [KMRS88] to get a lower bound of 3 for deterministic data migration algorithms. If requests are limited to write requests only, the file allocation problem collapses to the data migration problem, and therefore for deterministic algorithms the result in [BS89] can be used to get the lower bound above. 62 File Allocation 4.1.2 (log n) Lower Bound on Arbitrary Network Topolo gies We now proceed to show, that in certain networks, the lower bound can be as bad as (log n), where n is the number of processors in the
Reference: [BR92] <author> Y. Bartal and A. Rosen. </author> <title> The Distributed k-Server Problem | A Competitive Distributed Translator for k-Server Algorithms. </title> <booktitle> In Proc. of the 33rd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 344-353, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The thesis contains a comprehensive study of these two problems, and also an 3 other example for competitive analysis of distributed algorithms in context of the related distributed k-server problem <ref> [BR92] </ref>. The rest of this chapter contains a more detailed description of the background and the problems discussed in the thesis. We describe the contributions of this thesis as well as a summary of previous and recent results. <p> These problems where later studied in [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen <ref> [BR92] </ref> study the distributed k-server problem. Ajtai et. al. [AADW94] and [AW94] deal with the cooperative collect problem in shared memory. Another question that arises when on-line problems in distributed networks are considered, is that of providing with competitive distributed algorithms. <p> Bartal et. al. [BFR92] have given such algorithms in the context of distributed data management. This has been also implicitly done in [AP89, AP91] for algorithms for tracking mobile users. Other work on these lines has been made in <ref> [AKP92, BR92, ABF93a, ABF93b, AADW94, AW94, ABF94] </ref>. 10 1.2 Competitive Analysis of Distributed Algo rithms A network is modeled by an undirected weighted graph G = (V; E), where processors are represented by vertices, and edge weights the length or cost of a bidirectional link between the two corresponding adjacent processors. <p> The competitive ratios of their algorithm is polylogarithmic in n, Diam, and the maximal job size. Alon, Kalai, Ricklin and Stockmeyer [AKRS92] gave lower bounds for this problem (in the maximum delay version) and for the mobile user tracking problem of (log n= log log n). Bartal and Rosen <ref> [BR92] </ref> have considered the distributed k-server problem, presented in Chapter 6 of this thesis. The problem deals with the scheduling of k-identical mobile resources over sequences of requests of demand for service by different processors. The k-server problem [MMS88],the related global-control problem, was studied in many papers. <p> The problem deals with the scheduling of k-identical mobile resources over sequences of requests of demand for service by different processors. The k-server problem [MMS88],the related global-control problem, was studied in many papers. A natural question is weather competitive distributed algorithms exist for this problem. In <ref> [BR92] </ref> the goal is to give a general translator to turn a global-control algorithm into a distributed one. <p> In these papers they obtain nonconstructive O (n 1=2 log 2 n) and constructive O (n 3=4 log 2 n) competitive algorithms both in terms of number of invoked operations (latency) and number of completed tasks (throughput). In the papers <ref> [BFR92, BR92, ABF93a, ABF94] </ref> some general tools for the analysis of distributed on-line algorithms have been developed and demonstrated, such as: the use of simulation sequences, and graph-decompositions and the data tracking mechanism. <p> The algorithm of [ABF94] also uses a version of the file allocation algorithm in [ABF93a] in the solution for the distributed paging problem. Also, the cover problem [BFR92] is used in the solution for the data tracking mechanism [BFR92]. In Bartal and Rosen <ref> [BR92] </ref>, the goal is to obtain a translator, that given a competitive global-control k-server [MMS88] algorithm, will produce a competitive distributed k-server algorithm. 1.3.1 Simulation Sequences In all cases mentioned above, the on-line algorithm for the main problem, runs simulations of algorithms for some other problem. <p> In particular, in the distributed setting, if we attempt to simulate a global-control algorithm, we are obliged to use only the requests issued locally. This type of problem arises in the translator of <ref> [BR92] </ref>. Therefore, the request sequence generated for the simulated algorithm is carefully chosen so that the cost incurred by that algorithm will be large enough with respect to the cost incurred by the main algorithm [BFR92, BR92, ABF94]. <p> This type of problem arises in the translator of [BR92]. Therefore, the request sequence generated for the simulated algorithm is carefully chosen so that the cost incurred by that algorithm will be large enough with respect to the cost incurred by the main algorithm <ref> [BFR92, BR92, ABF94] </ref>. It may happen that some activity done in combination with the simulation 1.3 Using On-line Algorithms to Solve Different Problems 15 interacts with it and interferes with the simulated configuration. This happens in [ABF93b, BR92]. <p> It may happen that some activity done in combination with the simulation 1.3 Using On-line Algorithms to Solve Different Problems 15 interacts with it and interferes with the simulated configuration. This happens in <ref> [ABF93b, BR92] </ref>. <p> Similar techniques have also been used by [AKP92] in the solution for the distributed scheduling problem. In <ref> [BR92] </ref> a different kind of partition is used for the distributed k-server al 18 gorithm. Instead of having a fixed partition of the graph, we let the locations of the servers to determine the partition, updating it from time to time, when communication costs allow. <p> With having only memory per processor be only polylogarithmic in the diameter, we get an approximation factor equal to O (log n= log D). The distributed data tracking mechanism is used in all distributed data management algorithms [BFR92, ABF93a, ABF94], and also used to provide k-server tracking mechanisms in <ref> [BR92] </ref>. 1.5 The File Allocation Problem The management of data in a distributed network is an important and extensively studied problem in management science, engineering, and computer systems. Dowdy and Foster [DF81], 1981, give a comprehensive survey of this field of research. <p> We hazard the guess that similar results can be obtained by randomized algorithms against oblivious adversaries for other network topologies as well. Chapter 6 The Distributed k-Server Problem In this section we consider the distributed k-server problem <ref> [BR92] </ref>. The k-server problem [MMS88] is that of scheduling the motion of k identical servers in a metric space as to serve requests for service at the points of the metric space.
Reference: [BRS91] <author> A. Blum, P. Raghavan, and B. Schieber. </author> <title> Navigating in Unfamiliar Geometric Terrain. </title> <booktitle> In Proc. of the 23rd Ann. ACM Symp. on Theory of Computing, </booktitle> <month> May </month> <year> 1991. </year>
Reference: [Casey72] <author> R.G. Casey. </author> <title> Allocations of Copies of a File in an Information Network. </title> <booktitle> In Proc. of the Spring Joint Computer Conference IP-IFS, </booktitle> <pages> pages 617-625, </pages> <year> 1972. </year>
Reference: [Chu69] <author> W.W. Chu. </author> <title> Optimal File Allocation in a Multiple Computer System. </title> <journal> In IEEE Transactions of Computers, </journal> <volume> 18(10), </volume> <month> October </month> <year> 1969. </year>
Reference-contexts: Dowdy and Foster [DF81], 1981, give a comprehensive survey of this field of research. Static file assignment problems, where the goal is to find fixed locations for file copies in the network, begun by Chu <ref> [Chu69] </ref>, and studied later in a variety of models in many papers, including [Casey72, Eswara74, Loomis75, Gosh76, MR76, GB77, RW79, CA80, FH80, TWS80, Wah80, FDA81, ML77, CMP82, GP82, IK82, Jenny82, LL83, MKK83, RW83, Wah84, Gavish85, GP86, LH86, Gavish87, HR88].
Reference: [CA80] <author> P.P. Chen and J. Akoka, </author> <title> Optimal Design of Distributed Information Systems. </title> <journal> In IEEE Transactions of Computers, </journal> <volume> 29(12), </volume> <month> December </month> <year> 1980. </year>
Reference: [CCEKL94] <author> A. Chou, J.R. Cooperstock, R. El-Yaniv, M. Klugerman, and T. Leighton. </author> <title> The Statistical Adversary Allows Optimal Money-Making Trading Strategies. </title> <type> Manuscript, </type> <year> 1994. </year> <note> 260 BIBLIOGRAPHY </note>
Reference-contexts: Many other exploration and motion planning problems were studied in [PY89, Klein91, KRR91, BRS91, FFKRRV91, DP90, BBFY92, BC93, DKP91, ABM93, KRT93, Kleinb94]. Financial problems have been considered by El-Yaniv et. al. [EFKT92], in the context of stock exchange policies, later discussed in <ref> [CCEKL94] </ref>. The mortgage problem was considered in [EK93]. Another instance where competitive analysis naturally applies is for problems in distributed networks. Karlin et. al., [KMRS88] studied Snoopy caching, and in [KLMO91] the problem of spinning in shared memory was analyzed.
Reference: [CDRS90] <author> D. Coppersmith, P. Doyle, P. Raghavan, and M. Snir. </author> <title> Random Walks on weighted Graphs and Applications to On-line Algorithms. </title> <booktitle> In Proc. of the 22nd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 369-378, </pages> <month> May </month> <year> 1990. </year>
Reference: [CKPSE + 93] <author> D. Culler, R. Karp, D. Patterson, A. Sahay, K. Erik Schauser, Eunice Santos, Ramesh Subramonian, and Thorsten von Eiken. </author> <title> Logp: Towards a realistic model of parallel computation. </title> <booktitle> In Proc. of Fourth ACM SIGPLAN Symp. on PPOPP, </booktitle> <pages> pages 1-12, </pages> <address> San Diego, </address> <year> 1993. </year>
Reference-contexts: This type of networks is of special interest as a model for a LAN network. This may be of special importance if we are only distinguishing between local and remote (over-the-network) data accesses, in effect assuming "flat" communication cost between any pair of processors, as in LogP model <ref> [CKPSE + 93] </ref>. This assumption indicates that the communication bottleneck is in transmitting and processing the message rather than in delivering it thru the network. In other words, there is plenty of network bandwidth, but not enough processing power; this assumption is considered reasonable in existing multiprocessors [CKPSE + 93]. <p> in LogP model <ref> [CKPSE + 93] </ref>. This assumption indicates that the communication bottleneck is in transmitting and processing the message rather than in delivering it thru the network. In other words, there is plenty of network bandwidth, but not enough processing power; this assumption is considered reasonable in existing multiprocessors [CKPSE + 93]. Given that processor i can accommodate k i files, all files equal in size, let m = i=1 k i . We give an O (m) competitive deterministic algorithm, Distributed Flush-When-Full [BFR92], for the distributed paging problem on uniform networks.
Reference: [CKPV90] <author> M. Chrobak, H. Karloff, T. Payne, and S. Vishwanathan. </author> <title> New Results on Server Problems. </title> <booktitle> In Proc. 1st ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 291-300, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: We elaborate more on these issues in the sequel. Since first suggested many different problems were analyzed using the competitive measure. Sleator and Tarjan [ST85a] have introduced competitive analysis in the context of uniprocessor paging and list ranking. Paging was studied 8 also in <ref> [KMRS88, RS89, CKPV90, FKLMSY91, MS91, Young91, BIRS91, IKP92, BGR93] </ref>. A somewhat different model was considered by Karlin et. al. [KPR92], where requests are generated by a Markov source. A similar approach was used to analyze prefetching by Vitter et. al. [VK91, KV94]. <p> The results above can be compared with previously known results for uniprocessor paging. For deterministic algorithms, Sleator and Tarjan [ST85a] have proved that the competitive ratio for uniprocessor paging equals the cache size k. Other k-competitive algorithms have been studied in <ref> [KMRS88, RS89, CKPV90] </ref>. Similarly, Fiat et. al. [FKLMSY91] and Mannase and Sleator [MS91] proved that the competitive ratio for randomized algorithms against oblivious adversaries is H k , the kth harmonic number (H k = P k 1 i = fi (log k)). <p> As applications we get poly (k)-competitive distributed k-server algorithms for the line, trees and the ring, by applying our general result to the k-competitive global-control algorithms for the line and trees <ref> [CKPV90, CL91a] </ref> and the O (k 3 )- competitive algorithm for the ring [FRRS91]. <p> 0 ) Cost Adv (), and therefore we conclude that DS A (k) is O (c k k 2 (1 + 1 D maxfk; T N;k ; log jM j=g))-competitive. 6.4 The Distributed Harmonic k-Server Algorithm 245 6.3.3 Applications We use discrete versions of the Double-Coverage algorithm for the line <ref> [CKPV90] </ref>, the algorithm for trees [CL91a], and the algorithm for the ring [FRRS91]. In these discrete versions a modified metric space is created by adding points at distance of one unit apart along the edges of the metric space, rounding their lengths upwards.
Reference: [CL90] <author> M. Chrobak and L. Larmore. </author> <title> On Fast Algorithms for Two Servers. </title> <booktitle> In Proc. Mathematical Foundations of Computer Science, </booktitle> <address> Banska Bystrica, </address> <year> 1990. </year> <note> Also in Journal of Algorithms. </note>
Reference-contexts: Applying it to the O (1)-competitive algorithms for the case of k = 2 <ref> [CL90, IR93] </ref>, gives O (log 2 n=D)-competitive distributed algorithms, where D is the ratio between the cost of moving a server 1.7 The Distributed k-Server Problem 33 and of sending a message across the same distance. <p> Using the known algorithms for the case of 2 servers <ref> [CL90, IR93] </ref> we get: Corollary 6.3.9 There are competitive distributed 2-server algorithms with competitive ratio O (T N ;2 =D). 6.4 The Distributed Harmonic k-Server Algo rithm The Harmonic k-server algorithm, proposed by Raghavan and Snir [RS89], is the algorithm that given a request at point r, chooses each server to
Reference: [CL91a] <author> M. Chrobak and L. Larmore. </author> <title> An Optimal On-Line k-Server Algorithm for Trees. </title> <journal> SIAM Journal of Computing, </journal> <volume> 20 </volume> <pages> 144-148, </pages> <year> 1991. </year>
Reference-contexts: As applications we get poly (k)-competitive distributed k-server algorithms for the line, trees and the ring, by applying our general result to the k-competitive global-control algorithms for the line and trees <ref> [CKPV90, CL91a] </ref> and the O (k 3 )- competitive algorithm for the ring [FRRS91]. <p> via [BBKTW90], and [KP94]) is, of course, possible; however, due to the large number of memory states of these algorithms, this yields a distributed algorithm with a competitive ratio which is greater than that of the application of an algorithm for trees to a minimum spanning tree (as previously suggested <ref> [CL91a] </ref>). To build the translator we recursively divide the servers into sets according to the distances between them, and proceed in phases to apply a recursively defined distributed algorithm to these sets, while the base of the recursion is the global-control algorithm. <p> and therefore we conclude that DS A (k) is O (c k k 2 (1 + 1 D maxfk; T N;k ; log jM j=g))-competitive. 6.4 The Distributed Harmonic k-Server Algorithm 245 6.3.3 Applications We use discrete versions of the Double-Coverage algorithm for the line [CKPV90], the algorithm for trees <ref> [CL91a] </ref>, and the algorithm for the ring [FRRS91]. In these discrete versions a modified metric space is created by adding points at distance of one unit apart along the edges of the metric space, rounding their lengths upwards.
Reference: [CL91b] <author> M. Chrobak, L. Larmore, </author> <title> The Server Problem and On-line Games, in On-Line Algorithms. </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> vol. 7, </volume> <year> 1991, </year> <pages> 11-64. </pages>
Reference: [CL92a] <author> M. Chrobak and L.L. Larmore. </author> <title> Generosity Helps, or, An 11-Competitive Algorithm for Three Servers. </title> <booktitle> In Proc. of the 3rd Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 196-202, </pages> <month> January </month> <year> 1992. </year> <note> BIBLIOGRAPHY 261 </note>
Reference: [CL92b] <author> M. Chrobak and L.L. Larmore. </author> <title> Harmonic is 3-Competitive for Two Servers. </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 98, </volume> <pages> pp. 339-346, </pages> <year> 1992. </year>
Reference: [CLR90] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Potential functions are a useful tool in the analysis of amortized computational complexity. Tarjan [Tarjan85] attributes the potential method to D.D. Sleator. See Cormen, Leiserson and Rivest <ref> [CLR90, chapter 18] </ref> for a detailed tutorial on the potential method. The use of potential functions for competitive analysis was first introduced in [ST85a]. Since then, it was adopted for use in numerous papers. In the on-line context, potential functions are useful when considering competitiveness against the adaptive on-line adversary.
Reference: [CLRW93] <author> M. Chrobak, L. Larmore, N. Reingold, and J. Westbrook. </author> <title> Optimal Multiprocessor Migration Algorithms Using Work Functions. </title> <booktitle> In Proc. of the 4th International Symp. on Algorithms and Computation. Also Lecture Notes in Computer Science, </booktitle> <volume> vol. 762, </volume> <pages> pages 406-415, </pages> <address> Hong Kong, 1993, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Karlin et. al., [KMRS88] studied Snoopy caching, and in [KLMO91] the problem of spinning in shared memory was analyzed. Black and Sleator [BS89] introduced the file migration and file replication problems. These problems where later studied in <ref> [Westbr91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>. Bartal et. al. [BFR92], defined generalizations of these problems: the file allocation and distributed paging, studied also in [ABF93a, LRWY94, ABF93b, ABF94]. Awerbuch et. al. [AKP92], deal with distributed scheduling. Bartal and Rosen [BR92] study the distributed k-server problem. <p> Optimal 2 + 1=(2D) randomized file migration algorithms for uniform networks are given in [LRWY94] and for trees in <ref> [CLRW93] </ref>. Chrobak et. al. [CLRW93] also prove a lower bound greater than 3 in some network topology, specifically 85=27. We present first explicit file migration deterministic algorithm, Move-To-Min (MTM), for arbitrary network topologies, due to Awerbuch, Bartal and Fiat [ABF93a]. <p> Optimal 2 + 1=(2D) randomized file migration algorithms for uniform networks are given in [LRWY94] and for trees in <ref> [CLRW93] </ref>. Chrobak et. al. [CLRW93] also prove a lower bound greater than 3 in some network topology, specifically 85=27. We present first explicit file migration deterministic algorithm, Move-To-Min (MTM), for arbitrary network topologies, due to Awerbuch, Bartal and Fiat [ABF93a].
Reference: [CMP82] <author> S. Ceri, G. Martella, G. Pellagat. </author> <title> Optimal File Allocation in a Computer Network: A Solution Method Based on the Knapsack Problem. </title> <booktitle> In Computer Networks, </booktitle> <volume> 6, </volume> <pages> pages 345-357, </pages> <year> 1982. </year>
Reference: [CR90] <author> R. Cole and A. Raghunathan. </author> <title> On-line Algorithms for Finger Searching. </title> <booktitle> In Proc. of the 31st Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 480-489, </pages> <month> October </month> <year> 1990. </year>
Reference: [CV92] <author> B. Chandra and S. Vishwanathan. </author> <title> Constructing Reliable Communication Networks of Small Weight On-line. </title> <journal> Journal of Algorithms, </journal> <year> 1992. </year>
Reference-contexts: Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92]. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition [FKT89], on-line Steiner tree and generalizations <ref> [IW91, CV92, AA92, ABF93a, WY93, AAB94] </ref>, and on-line graph coloring [Vishwa90, Irani90, HS92]. Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in [ST85b, BM85, HM92]. <p> That potential function proof gives the intuition behind our more complex file allocation algorithm proof. Analysis of the greedy Steiner tree algorithm was also independently made by [AA92], <ref> [CV92] </ref> and [WY93] giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 2.3.2 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. Proof. <p> In the following paragraph we consider the greedy strategy for the Steiner tree problem and give a simple potential function proof for the competitiveness of the greedy on-line Steiner tree algorithm, and thus to read-only replication. (Alternative non potential function proofs given by <ref> [AA92, CV92, IW91, WY93] </ref>, and in Section 2.3.2.) Although this is not essential for the proofs of competitiveness of our file-allocation algorithms, the intuition behind this potential function serves as a basis to the more complex potential function used to prove our deterministic file-allocation algorithm, and we believe that it gives
Reference: [DF81] <author> D. Dowdy and D. Foster. </author> <title> Comparative Models of The File Assignment Problem. </title> <journal> Computing Surveys, </journal> <volume> 14(2), </volume> <month> June </month> <year> 1982. </year>
Reference-contexts: The total communication cost of a distributed algorithm including costs expended for acquiring information about the input events, is compared to that of a prescient global-control adversary. Distributed paging [BFR92, ABF93a, ABF93b, ABF94], is one of the basic utilization problems in distributed systems (see <ref> [DF81, GS90] </ref> for surveys). Where different files are maintained at various nodes in a distributed shared database, are read and written by arbitrary network processors. System operations, invisible for the users, may be invoked to determine the placement of the files over the network. <p> Dowdy and Foster <ref> [DF81] </ref>, 1981, give a comprehensive survey of this field of research.
Reference: [DKP91] <author> X. Deng, T. Kameda, and C.H. Papadimitriou. </author> <title> How to Learn An Unknown Environment. </title> <booktitle> In Proc. of the 32nd Ann. Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 298-303, </pages> <month> October </month> <year> 1991. </year>
Reference: [DM92] <author> X. Deng and S. Mahajan. </author> <title> Randomization Overpowers Determinism in On-line Algorithms, 1992. 262 BIBLIOGRAPHY </title>
Reference-contexts: Fiat et. al. [FFKRRV91], deal with layered graph traversal, the general case being equivalent to metrical service systems, also studied by [Burley93]. Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in <ref> [DM92, BFR92] </ref>. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition [FKT89], on-line Steiner tree and generalizations [IW91, CV92, AA92, ABF93a, WY93, AAB94], and on-line graph coloring [Vishwa90, Irani90, HS92].
Reference: [DP90] <author> X. Deng and C.H. Papadimitriou. </author> <title> Exploring an unknown graph. </title> <booktitle> In Proc. of the 31st Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 355-361, </pages> <month> October </month> <year> 1990. </year>
Reference: [DS80] <author> W. Dijkstra, C. S. Scholten. </author> <title> Termination Detection for Diffusing Computations. In Information Processing Letters, </title> <address> 11-1:1-4, </address> <year> 1980. </year>
Reference: [Eswara74] <author> K.P. Eswaran. </author> <title> Placement of Records in a File and File Allocation in a Computer Network. </title> <booktitle> In Information Processing 74, IFIPS, </booktitle> <year> 1974. </year>
Reference: [EF83] <author> C. Ellis and R. Floyd. </author> <title> The ROE File System. </title> <booktitle> In Proc. of the 3rd Symp. on Reliability in Distributed Software Systems, </booktitle> <pages> pages 175-181, </pages> <year> 1983. </year>
Reference-contexts: The 1990 survey paper of Gavish and Sheng [GS90], gives a summary of research on this problem. Papers dealing with dynamic file allocation and migration include [AF77, LM78, SS79, Levin82, Porcar82, YSLC85, Hac86, Sheng86]. Implementa 20 tion of dynamic file allocation operations was done in distributed systems such as <ref> [PWCEK + 81, EF83, PT83, TZ84] </ref>. All of these models rely heavily on prior knowledge regarding potential usage patterns of the system databases. In addition existing heuristics and algorithms are centralized in nature in that they assume global knowledge of status information.
Reference: [EFKT92] <author> R. El-Yaniv, A. Fiat, R. Karp, and G. Turpin. </author> <title> Competitive Analysis of Financial Games. </title> <booktitle> In Proc. of the 33th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 327-333, </pages> <month> Oc-tober </month> <year> 1992. </year>
Reference-contexts: Many other exploration and motion planning problems were studied in [PY89, Klein91, KRR91, BRS91, FFKRRV91, DP90, BBFY92, BC93, DKP91, ABM93, KRT93, Kleinb94]. Financial problems have been considered by El-Yaniv et. al. <ref> [EFKT92] </ref>, in the context of stock exchange policies, later discussed in [CCEKL94]. The mortgage problem was considered in [EK93]. Another instance where competitive analysis naturally applies is for problems in distributed networks.
Reference: [EK93] <author> R. El-Yaniv and R. Karp. </author> <title> The Mortgage Problem. </title> <booktitle> In Proc. of the 2nd Ann. Israel Symp. on Theory of Computing and Systems, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: Many other exploration and motion planning problems were studied in [PY89, Klein91, KRR91, BRS91, FFKRRV91, DP90, BBFY92, BC93, DKP91, ABM93, KRT93, Kleinb94]. Financial problems have been considered by El-Yaniv et. al. [EFKT92], in the context of stock exchange policies, later discussed in [CCEKL94]. The mortgage problem was considered in <ref> [EK93] </ref>. Another instance where competitive analysis naturally applies is for problems in distributed networks. Karlin et. al., [KMRS88] studied Snoopy caching, and in [KLMO91] the problem of spinning in shared memory was analyzed. Black and Sleator [BS89] introduced the file migration and file replication problems.
Reference: [FDA81] <author> D.V. Foster, L.W. Dowdy, J.E. Ames. </author> <title> File Assignment in a Computer Network. </title> <booktitle> In Computer Networks, </booktitle> <volume> 5, </volume> <pages> pages 341-349, </pages> <year> 1981. </year>
Reference: [FFKRRV91] <author> A. Fiat, D.P. Foster, H.J. Karloff, Y. Rabani, Y. Ravid, and S. Vishwanathan. </author> <title> Competitive Algorithms for Layered Graph Traversal. </title> <booktitle> In Proc. of the 32nd Ann. Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 288-297, </pages> <month> October </month> <year> 1991. </year> <note> BIBLIOGRAPHY 263 </note>
Reference-contexts: McGeoch, Manasse, and Sleator [MMS88], introduced the k-server problem, studied in a great many papers [RS89, Turpin89, BKT90, CKPV90, CDRS90, BGRS90, CL90, CR90, IR93, FRR90, KMMO90, CL91a, CL91b, FKLMSY91, MS91, KRR91, CL92a, CL92b, AKPW91, Grove91, FR92, BKRS92, Bartal92, Bartal93, BR92, Tetali94, BG92, KP94, Bartal94]. Fiat et. al. <ref> [FFKRRV91] </ref>, deal with layered graph traversal, the general case being equivalent to metrical service systems, also studied by [Burley93]. Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92].
Reference: [FH80] <author> M.L. Fisher and D.S. Hochbaum. </author> <title> Database Location in a Computer Network. </title> <journal> In Journal of the ACM, </journal> <volume> 27(4), </volume> <pages> pages 718-735, </pages> <year> 1980. </year>
Reference: [FKLMSY91] <author> A. Fiat, R.M. Karp, M. Luby, L.A. McGeoch, D.D. Sleator , and N.E. Young. </author> <title> Competitive Paging Algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 12(4), </volume> <pages> pages 685-699, </pages> <year> 1991. </year>
Reference-contexts: Randomization against oblivious adversaries is very powerful. In the context of many problems such as task systems [BLS87], paging <ref> [FKLMSY91] </ref>, routing [ABFR94] and distributed paging [ABF93b], it has been demonstrated that the competitive ratio may drop dramatically when randomization against oblivious 1.1 On-line Problems and Competitive Analysis 7 adversaries is considered. <p> We elaborate more on these issues in the sequel. Since first suggested many different problems were analyzed using the competitive measure. Sleator and Tarjan [ST85a] have introduced competitive analysis in the context of uniprocessor paging and list ranking. Paging was studied 8 also in <ref> [KMRS88, RS89, CKPV90, FKLMSY91, MS91, Young91, BIRS91, IKP92, BGR93] </ref>. A somewhat different model was considered by Karlin et. al. [KPR92], where requests are generated by a Markov source. A similar approach was used to analyze prefetching by Vitter et. al. [VK91, KV94]. <p> In this case the problem is reduced to the problem of achieving efficient uni-processor paging algorithm, for which efficient solutions have been proposed <ref> [ST85a, KMRS88, MS91, FKLMSY91] </ref>. <p> The results above can be compared with previously known results for uniprocessor paging. For deterministic algorithms, Sleator and Tarjan [ST85a] have proved that the competitive ratio for uniprocessor paging equals the cache size k. Other k-competitive algorithms have been studied in [KMRS88, RS89, CKPV90]. Similarly, Fiat et. al. <ref> [FKLMSY91] </ref> and Mannase and Sleator [MS91] proved that the competitive ratio for randomized algorithms against oblivious adversaries is H k , the kth harmonic number (H k = P k 1 i = fi (log k)). <p> Proof. The corollary follows from Theorem 5.2.1 using ` = n 1 if f m n + 1 and ` = m + 1 f otherwise. The (log k) lower bound follows from a lower bound of <ref> [FKLMSY91] </ref> for uni-processor paging. It also follows from the result of [FKLMSY91] that S (U ; m+1f ) = (log (m f )). <p> Proof. The corollary follows from Theorem 5.2.1 using ` = n 1 if f m n + 1 and ` = m + 1 f otherwise. The (log k) lower bound follows from a lower bound of <ref> [FKLMSY91] </ref> for uni-processor paging. It also follows from the result of [FKLMSY91] that S (U ; m+1f ) = (log (m f )). <p> The main theorem we prove is the following: Theorem 5.2.4 Algorithm Heat & Dump is O (maxflog (m f ); cg)-competitive against oblivious adversaries, where c is the maximal competitive ratio for any of the local paging algorithms in the network. In particular by using local paging algorithms of <ref> [MS91, FKLMSY91] </ref> in all processors we get: 206 Distributed Paging Corollary 5.2.5 Algorithm Heat & Dump is O (maxflog (mf ); log kg)-competitive against oblivious adversaries. 5.2.2.2 Competitive Analysis of | Heat & Dump This section gives the proof that Heat & Dump is O (maxflog (m f ); cg) competitive.
Reference: [FKST93] <author> A. Feldmann, M. Kao, J. Sgall, S. Teng. </author> <title> Optimal On-line Scheduling of Parallel Jobs with Dependencies. </title> <booktitle> In Proc. of the 25th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 642-651, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested.
Reference: [FKT89] <author> U. Faigle, W. Kern and Gyorgy Turan. </author> <title> On the Performance of On-Line Algorithms for Partition Problems. </title> <journal> Acta Cybernetica 9, </journal> <pages> pages 107-119, </pages> <year> 1989. </year>
Reference-contexts: Ben-David et. al. [BBKTW90], define request-answer games, equivalent to configuration problems discussed above, and considered in [DM92, BFR92]. Many combinatorial theoretical problems have also been studied in an on-line setting: on-line matching [KVV90], partition <ref> [FKT89] </ref>, on-line Steiner tree and generalizations [IW91, CV92, AA92, ABF93a, WY93, AAB94], and on-line graph coloring [Vishwa90, Irani90, HS92]. Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in [ST85b, BM85, HM92].
Reference: [FR92] <author> A. Fiat and M. Ricklin. </author> <title> Competitive Algorithms for the Weighted Server Problem, </title> <note> 1992. In TCS Special Issue on Online Algorithms. </note>
Reference: [FRR90] <author> A. Fiat, Y. Rabani, and Y. Ravid. </author> <title> Competitive k-Server Algorithms. </title> <booktitle> In Proc. of the 31st Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 454-463, </pages> <month> October </month> <year> 1990. </year> <note> Also in JCSS Special FOCS Issue. </note>
Reference-contexts: This bound is conjectured to be the correct ratio. In contrast to the global-control case where there are algorithms with competitive ratio that depends only on k (and not on n) for any metric space <ref> [FRR90, Grove91, BG92, KP94, Bartal94] </ref>, (Koutsoupias and Papadimitriou [KP94] proved an upper bound of 2k 1) this is not the case in the distributed setting.
Reference: [FRRS91] <author> A. Fiat, Y. Rabani, Y. Ravid, and B. Schieber. </author> <title> A Deterministic O(k 3 )-Competitive k-Server Algorithm for the Circle, </title> <note> 1991. Submitted to Algorithmica. </note>
Reference-contexts: As applications we get poly (k)-competitive distributed k-server algorithms for the line, trees and the ring, by applying our general result to the k-competitive global-control algorithms for the line and trees [CKPV90, CL91a] and the O (k 3 )- competitive algorithm for the ring <ref> [FRRS91] </ref>. <p> (k) is O (c k k 2 (1 + 1 D maxfk; T N;k ; log jM j=g))-competitive. 6.4 The Distributed Harmonic k-Server Algorithm 245 6.3.3 Applications We use discrete versions of the Double-Coverage algorithm for the line [CKPV90], the algorithm for trees [CL91a], and the algorithm for the ring <ref> [FRRS91] </ref>. In these discrete versions a modified metric space is created by adding points at distance of one unit apart along the edges of the metric space, rounding their lengths upwards.
Reference: [FST91] <author> A. Feldmann, J. Sgall, and S.H. Teng. </author> <title> Dynamic Scheduling of Parallel Machines. </title> <booktitle> In Proc. of the 32st Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 111-120, </pages> <month> October </month> <year> 1991. </year> <note> 264 BIBLIOGRAPHY </note>
Reference: [Gavish85] <author> B. Gavish. </author> <title> Models for Configuring Large Scale Distributed Computing Systems. </title> <journal> In AT&T Technical Journal, </journal> <volume> 64(2), </volume> <pages> pages 491-532, </pages> <year> 1985. </year>
Reference: [Gavish87] <author> B. Gavish. </author> <title> Optimization Models for Configuring Distributed Computer Systems. </title> <journal> In IEEE Transactions of Computers, </journal> <volume> 36(7), </volume> <pages> pages 773-793, </pages> <year> 1987. </year>
Reference: [Gosh76] <author> S.P. Gosh. </author> <title> Distributing a Database with Logical Associations on a Computer Network for Parallel Searching. </title> <journal> In IEEE Transactions on Software Engineering, </journal> <volume> 2(2), </volume> <year> 1976. </year>
Reference: [Graham66] <author> R.L. Graham. </author> <title> Bounds for Certain Multiprocessing Anomalies. </title> <journal> Bell System Technical Journal 45 </journal> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference-contexts: A similar approach was used to analyze prefetching by Vitter et. al. [VK91, KV94]. List ranking was considered also in by Irani [Irani91] and in [IRSW91]. Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 <ref> [Graham66] </ref> (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing.
Reference: [Grove91] <author> E. Grove. </author> <title> The Harmonic k-Server Algorithm is Competitive. </title> <booktitle> In Proc. of the 23rd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 260-266, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Applying our translator to the known k-server algorithms for general metric spaces ([FRR90], <ref> [Grove91, BG92] </ref> via [BBKTW90], and [KP94]) is, of course, possible; however, due to the large number of memory states of these algorithms, this yields a distributed algorithm with a competitive ratio which is greater than that of the application of an algorithm for trees to a minimum spanning tree (as previously <p> This bound is conjectured to be the correct ratio. In contrast to the global-control case where there are algorithms with competitive ratio that depends only on k (and not on n) for any metric space <ref> [FRR90, Grove91, BG92, KP94, Bartal94] </ref>, (Koutsoupias and Papadimitriou [KP94] proved an upper bound of 2k 1) this is not the case in the distributed setting. <p> We also study the problem of devising a distributed version of the Harmonic k 34 server algorithm, proposed by Raghavan and Snir [RS89]. Bartal and Grove [BG92] proved that Harmonic is O (2 k log k)-competitive (improving the competitiveness proof given by <ref> [Grove91] </ref>), but it is believed that the correct competitive ratio is O (k 2 ) (see [RS89, BKT90]). We give a distributed version of the Harmonic k-server algorithm with competitive ratio not much larger than in the "global-control" case. <p> Henceforth let ffi = dlog (Diam)e, and = maxfdlog ne; dlog (Diam)eg. 6.1 Lower Bound In contrast to the global-control case, where k-server algorithms with competitive ratio that depends solely on k exist for all metric spaces ([FRR90], <ref> [Grove91] </ref>, [BG92], [KP94]), this is not the case in the distributed setting. <p> locations of the on-line servers are s 1 ; s 2 ; : : : ; s k , and N = P k 1 d (s i ;r) , then server s i is moved with probability 1 d (s i ;r) =N. 246 The Distributed k-Server Problem Grove <ref> [Grove91] </ref> showed that Harmonic is competitive. We show in [BG92] that the competitive ratio of Harmonic is O (2 k log k). It has been conjectured ([RS89, BKT90]) that the correct competitive ratio is O (k 2 ). Let c H denote the competitive ratio of Harmonic.
Reference: [GB77] <author> E. Grapa and G.G. Bellford. </author> <title> Some Theorems to Aid in Solving the File Allocation Problem. </title> <booktitle> In Communication of the ACM, </booktitle> <month> 20(11), </month> <pages> pages 878-882, </pages> <month> November </month> <year> 1977. </year>
Reference: [GGKMY93] <author> J.Garay, I.S.Gopel, S.Kutten, Y.Mansour, and M.Yung. </author> <title> Efficient on-line call control algorithms. </title> <booktitle> In Proc. 2nd Israel Symposium on Theory of Computing and Systems, </booktitle> <pages> pages 285-293, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in <ref> [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94] </ref>. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested. Task systems are due to Borodin, Linial, and Saks [BLS87].
Reference: [GJ77] <author> M.R. Garey and D.S. Johnson. </author> <title> The Rectilinear Steiner Tree problem is NP-complete. </title> <journal> In SIAM Journal on Applied Math., </journal> <volume> 32 </volume> <pages> 826-834, </pages> <year> 1977. </year>
Reference-contexts: Albers and Koga [AK94, Koga93] also consider the problem of rings and give deterministic 4-competitive and randomized 3:16-competitive replication algorithms. The off-line file replication problem and file allocation problems are NP-complete (Follows from a reduction to the NP-complete minimum Steiner tree problem <ref> [Karp72, GJ77] </ref>). The file allocation problem is of course a generalization of the file replication and migration, and limiting the request sequences to a specific type of requests (reads or writes, respectively) would yield algorithms for the appropriate problem.
Reference: [GLLR79] <author> R.L. Graham, E.L. Lawler, J.K. Lenstra, and A.H.G. Rin-nooy Kan. </author> <title> Optimization and Approximation in Deterministic BIBLIOGRAPHY 265 Sequencing and Scheduling: a Survey. </title> <journal> Annals of Discrete Mathematics 5 </journal> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: A similar approach was used to analyze prefetching by Vitter et. al. [VK91, KV94]. List ranking was considered also in by Irani [Irani91] and in [IRSW91]. Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. <ref> [GLLR79] </ref> gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94]. Aspens et. al. [AAFPW93] also deal with virtual circuit routing.
Reference: [GP82] <author> B. Gavish and H. Pirkul. </author> <title> Allocation of Database in Distributed Computing Systems. </title> <editor> In J.Akoka, Ed., </editor> <booktitle> Management of Distributed Data Processing, </booktitle> <pages> pages 215-231, </pages> <address> North-Halland, </address> <year> 1982. </year>
Reference: [GP86] <author> B. Gavish and H. Pirkul. </author> <title> Computer and Database Location in Distributed Computer Systems. </title> <journal> In IEEE Transactions of Computers, </journal> <volume> 35(7), </volume> <pages> 583-590, </pages> <year> 1986. </year>
Reference: [GS90] <author> B. Gavish and O.R.L. Sheng. </author> <title> Dynamic File Migration in Distributed Computer Systems. </title> <journal> In Communications of the ACM, </journal> <volume> 33(2) </volume> <pages> 177-189, </pages> <year> 1990. </year>
Reference-contexts: The total communication cost of a distributed algorithm including costs expended for acquiring information about the input events, is compared to that of a prescient global-control adversary. Distributed paging [BFR92, ABF93a, ABF93b, ABF94], is one of the basic utilization problems in distributed systems (see <ref> [DF81, GS90] </ref> for surveys). Where different files are maintained at various nodes in a distributed shared database, are read and written by arbitrary network processors. System operations, invisible for the users, may be invoked to determine the placement of the files over the network. <p> Dynamic file assignment, where the locations of file copies may be dynamically changed over time, has recently received considerable research effort. The 1990 survey paper of Gavish and Sheng <ref> [GS90] </ref>, gives a summary of research on this problem. Papers dealing with dynamic file allocation and migration include [AF77, LM78, SS79, Levin82, Porcar82, YSLC85, Hac86, Sheng86]. Implementa 20 tion of dynamic file allocation operations was done in distributed systems such as [PWCEK + 81, EF83, PT83, TZ84].
Reference: [GW89] <author> G. Galambos and G. Woeginger. </author> <title> An On-Line Scheduling Heuristic with Better Worst Case Ratio than Graham's List Scheduling. </title> <type> Manuscript, </type> <institution> Jozsef Attila University, </institution> <address> Szeged, Hungary, </address> <year> 1989. </year>
Reference-contexts: Job scheduling, a classical computer systems problem, have been first considered by Graham in 1966 [Graham66] (implicitly giving competitiveness proofs). Graham et. al. [GLLR79] gives a survey on classic scheduling results. Scheduling and load-balancing has been studied in many different variants in <ref> [GW89, NC91, SWW91, ANR92, ABK92, BFKV92, AKP92, AAFPW93, PW93, FKST93, BKR94] </ref>. Aspens et. al. [AAFPW93] also deal with virtual circuit routing. Subsequent work appears in [GGKMY93, AAP93, AKPPW93, LT94, ABFR94, AAPW94, AGLR94]. Aggarwal et. al. [ABCRSS94] analyze routing in optical networks. A few models for on-line problems were suggested.
Reference: [Hac86] <editor> File Migration and Process Migration in a Local Area Network. </editor> <booktitle> In Proc. of INFOCOM86, </booktitle> <pages> pages 488-495, </pages> <year> 1986. </year>
Reference-contexts: Dynamic file assignment, where the locations of file copies may be dynamically changed over time, has recently received considerable research effort. The 1990 survey paper of Gavish and Sheng [GS90], gives a summary of research on this problem. Papers dealing with dynamic file allocation and migration include <ref> [AF77, LM78, SS79, Levin82, Porcar82, YSLC85, Hac86, Sheng86] </ref>. Implementa 20 tion of dynamic file allocation operations was done in distributed systems such as [PWCEK + 81, EF83, PT83, TZ84]. All of these models rely heavily on prior knowledge regarding potential usage patterns of the system databases.
Reference: [HALH91] <author> E. Hagersten, P. Andersson, A. Landin, and S. Haridi. </author> <title> Performance study of the DDM a cache-only memory architecture. </title> <type> Technical Report R91:17, </type> <institution> Swedish Institute of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: The file server is thus replaced by the "aggregate cache", i.e. the conjunction of the local caches. In the context of parallel multiprocessors, this setting is referred to as Cache-Only Memory Architecture (COMA) <ref> [HALH91] </ref>, and it has has been employed in a number of recently developed parallel machines such as the Data Diffusion Machine [HALH91] and in the new KSR1 machine [Bell92], where it is referred to as AllCache Engine. <p> In the context of parallel multiprocessors, this setting is referred to as Cache-Only Memory Architecture (COMA) <ref> [HALH91] </ref>, and it has has been employed in a number of recently developed parallel machines such as the Data Diffusion Machine [HALH91] and in the new KSR1 machine [Bell92], where it is referred to as AllCache Engine. This setting also corresponds to that of a homogeneous distributed file server, comprised of a collection of diskless workstations.
Reference: [HM92] <author> L.C.K. Hui and C. Martel. </author> <title> On Efficient Unsuccessful search. </title> <booktitle> In Proc. of the 3rd Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 217-227, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Amortized analysis has been traditionally used for self-adjusting data struc 1.1 On-line Problems and Competitive Analysis 9 tures. Examples can be found in <ref> [ST85b, BM85, HM92] </ref>. The competitive measure is particularly useful in graph and terrain exploration problems, and first used in this context by Baeza-Yates, Culberson, and Rawlings [BCR87]. Many other exploration and motion planning problems were studied in [PY89, Klein91, KRR91, BRS91, FFKRRV91, DP90, BBFY92, BC93, DKP91, ABM93, KRT93, Kleinb94].
Reference: [HP90] <author> J.L. Hennessy and D.A. Patterson. </author> <booktitle> Computer Architecture: </booktitle>
References-found: 103

