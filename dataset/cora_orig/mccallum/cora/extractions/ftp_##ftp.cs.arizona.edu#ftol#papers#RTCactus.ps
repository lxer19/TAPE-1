URL: ftp://ftp.cs.arizona.edu/ftol/papers/RTCactus.ps
Refering-URL: http://www.cs.arizona.edu/people/hiltunen/hiltunen.html
Root-URL: http://www.cs.arizona.edu
Title: Real-Time Issues in Cactus  
Author: Matti A. Hiltunen, Xiaonan Han, and Richard D. Schlichting 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science The University of Arizona  
Abstract: Services that provide real-time guarantees are important for many applications in distributed systems. While many such services have been implemented, most are targeted for specific application areas and are correspondingly difficult to adapt to differing requirements. This paper presents an approach to building configurable real-time services based on software modules called micro-protocols. Each micro-protocol implements a different semantic property or property variant, and interacts with other micro-protocols using an event-driven model provided by a runtime system supporting real-time guarantees. The programming model is presented, together with an implementation design based on the x-kernel model for building network subsystems. The design of a highly-configurable real-time channel abstraction built using this approach is also given. This work is part of the Cactus project the goal of which is to support fine-grained customization of QoS attributes related to dependability, real-time, and security. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Adelstein and M. Singhal. </author> <title> Real-time causal message ordering in multimedia systems. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 36-43, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Note also that the ordering definitions are orthogonal to latency and reliability. This means, for example, that the only guarantee for FIFO channels with P D &lt; 1:0 is that any messages delivered are in order, i.e., there may be gaps in the message delivery sequence <ref> [1] </ref>. The set of properties that can be provided by a channel is intricately related to its shape. For example, with a UDPP channel, the only ordering guarantee that can be defined is FIFO, while total order can only be defined for multi-target channels. <p> Any one of three ordering micro-protocols can also be configured into the composite protocol to enforce FIFO, causal, or total ordering, respectively. The ordering micro-protocols are designed so that a message will be delivered out of order if waiting any longer would result in missing the delivery deadline <ref> [1] </ref>. This forced unordered delivery is implemented as an event handler, so the service can easily be configured without this behavior if ordering is more important than the delivery deadline for a particular channel. A number of different events are used in our composite protocol.
Reference: [2] <author> T. Abdelzaher, A. Shaikh, F. Jahanian, and K. Shin. RTCAST: </author> <title> Lightweight multicast for real-time process groups. </title> <booktitle> In Proceedings of the IEEE Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 250-259, </pages> <month> Jun </month> <year> 1996. </year>
Reference-contexts: For example, safety critical systems usually require hard guarantees on system response time to avoid catastrophe, while multimedia applications perform better with at least soft guarantees. Numerous different types of real-time services and systems have been developed <ref> [2, 3, 8, 9, 14, 20] </ref>. However, most such systems are targeted for specific applications, which makes them rigid and unable to accommodate the different requirements of a variety of application types. <p> While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas. Two exceptions are <ref> [2] </ref> and [19], which have adopted principles from the x-kernel to add coarse-grain modularity and a limited degree of configurability to certain real-time communication services. Real-time channel abstractions similar to the one described in section 3 have been developed elsewhere as well. <p> The latest Tenet suite also provides multicast channels and resource sharing between related channels. An atomic real-time multicast protocol ensuring total ordering of messages is introduced in <ref> [2] </ref>. This protocol uses a logical token ring, and integrates multicast and membership services, but without explicitly introducing a real-time channel abstraction. 5 Conclusions This paper addresses the problem of providing customized real-time communication services for different types of applications.
Reference: [3] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. Verma, and H. Zhang. </author> <title> The Tenet real-time protocol suite: Design, implementation, and experiences. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 4(1), </volume> <month> Feb </month> <year> 1996. </year>
Reference-contexts: For example, safety critical systems usually require hard guarantees on system response time to avoid catastrophe, while multimedia applications perform better with at least soft guarantees. Numerous different types of real-time services and systems have been developed <ref> [2, 3, 8, 9, 14, 20] </ref>. However, most such systems are targeted for specific applications, which makes them rigid and unable to accommodate the different requirements of a variety of application types. <p> Similarly, Tenet provides real-time channels over heterogeneous inter-networks, as well as a real-time network layer protocol RTIP and two real-time transport layer protocols RMTP and CMTP <ref> [3] </ref>. The latest Tenet suite also provides multicast channels and resource sharing between related channels. An atomic real-time multicast protocol ensuring total ordering of messages is introduced in [2].
Reference: [4] <author> N. Bhatti. </author> <title> A System for Constructing Configurable High-Level Protocols. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, Tuc-son, AZ, </institution> <month> Nov </month> <year> 1996. </year>
Reference-contexts: since the maximum sizes of the EHQ and other data structures are determined by the set of micro-protocols included in each configuration and application characteristics such as message rate. 2.3 Discussion The event-driven model presented above is based on an earlier version for constructing configurable distributed services without real-time constraints <ref> [4, 6] </ref>. This version of the system, called Coyote, has been used to develop highly-configurable versions of communication services, including group RPC, membership, and atomic multicast. The proposed Cactus version extends and refines the original model to accommodate the additional requirements that arise in real-time distributed systems. <p> For example, in the original model handlers are executed logically in parallel with no relative priority ordering between them, which can lead to undesirable behavior such as unnecessary message retransmission <ref> [4] </ref>. Furthermore, the logically concurrent model of handler execution has been modified to the atomic sequential execution model that requires less synchronization.
Reference: [5] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multi-cast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Other properties not considered here include bounded jitter, atomic-ity, stability [13], security, and properties related to changes in the set of processes using the channel, such as virtual synchrony <ref> [5] </ref>. For latency, real-time services often not only specify the deadlines but also specify the importance of the service meeting its timeliness constraints, often stated using the phrases "hard real-time" or "soft real-time".
Reference: [6] <author> M. Hiltunen. </author> <title> Configurable Distributed Fault-Tolerant Services. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> Jul </month> <year> 1996. </year>
Reference-contexts: However, the approach is independent of the x-kernel and can be implemented using any number of suitable substrates. For example, a prototype of the previous non-real-time version of Cactus has been done using C++ on the Solaris OS <ref> [6] </ref>. 2.1 Approach Our approach is based on implementing different semantic properties and functional components of a real-time service as separate modules that interact using an event-driven execution model. <p> since the maximum sizes of the EHQ and other data structures are determined by the set of micro-protocols included in each configuration and application characteristics such as message rate. 2.3 Discussion The event-driven model presented above is based on an earlier version for constructing configurable distributed services without real-time constraints <ref> [4, 6] </ref>. This version of the system, called Coyote, has been used to develop highly-configurable versions of communication services, including group RPC, membership, and atomic multicast. The proposed Cactus version extends and refines the original model to accommodate the additional requirements that arise in real-time distributed systems.
Reference: [7] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Thus, even this relatively small set of micro-protocols can be used to build channels with properties suitable for a variety of different applications. 4 Related Work A number of systems support configurability and customization of communication services in distributed systems, including Adaptive [17], Horus [15], and the x-kernel <ref> [7] </ref>. However, only Adaptive and the configurable control system in [18] address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [8] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger. </author> <title> Distributed fault-tolerant real-time systems: The Mars approach. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 25-40, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: For example, safety critical systems usually require hard guarantees on system response time to avoid catastrophe, while multimedia applications perform better with at least soft guarantees. Numerous different types of real-time services and systems have been developed <ref> [2, 3, 8, 9, 14, 20] </ref>. However, most such systems are targeted for specific applications, which makes them rigid and unable to accommodate the different requirements of a variety of application types. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [18], Delta-4 [14], HARTS [10], Mars <ref> [8] </ref>, MK [16, 19], RT-Mach [20], and TTP [9]. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas.
Reference: [9] <author> H. Kopetz and G. Grunsteidl. </author> <title> TTP A protocol for fault-tolerant real-time systems. </title> <journal> Computer, </journal> <volume> 27(1) </volume> <pages> 14-23, </pages> <month> Jan </month> <year> 1994. </year>
Reference-contexts: For example, safety critical systems usually require hard guarantees on system response time to avoid catastrophe, while multimedia applications perform better with at least soft guarantees. Numerous different types of real-time services and systems have been developed <ref> [2, 3, 8, 9, 14, 20] </ref>. However, most such systems are targeted for specific applications, which makes them rigid and unable to accommodate the different requirements of a variety of application types. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [18], Delta-4 [14], HARTS [10], Mars [8], MK [16, 19], RT-Mach [20], and TTP <ref> [9] </ref>. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas.
Reference: [10] <author> D. Kandlur and K. Shin. </author> <title> Design of a communication subsystem for HARTS. </title> <type> Technical Report CSE-TR-109-91, </type> <institution> University of Michigan, </institution> <month> Oct </month> <year> 1991. </year>
Reference-contexts: As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [18], Delta-4 [14], HARTS <ref> [10] </ref>, Mars [8], MK [16, 19], RT-Mach [20], and TTP [9]. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas. <p> Real-time channel abstractions similar to the one described in section 3 have been developed elsewhere as well. In some cases, these channels address real-time communication at the network level; for example, a type of real-time channel that is established across multiple point-to-point network links is introduced in <ref> [10, 11] </ref>. Similarly, Tenet provides real-time channels over heterogeneous inter-networks, as well as a real-time network layer protocol RTIP and two real-time transport layer protocols RMTP and CMTP [3]. The latest Tenet suite also provides multicast channels and resource sharing between related channels.
Reference: [11] <author> D. Kandlur, K. Shin, and D. Ferrari. </author> <title> Real-time communication in multi-hop networks. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <pages> pages 1044-1056, </pages> <month> Oct </month> <year> 1994. </year>
Reference-contexts: Real-time channel abstractions similar to the one described in section 3 have been developed elsewhere as well. In some cases, these channels address real-time communication at the network level; for example, a type of real-time channel that is established across multiple point-to-point network links is introduced in <ref> [10, 11] </ref>. Similarly, Tenet provides real-time channels over heterogeneous inter-networks, as well as a real-time network layer protocol RTIP and two real-time transport layer protocols RMTP and CMTP [3]. The latest Tenet suite also provides multicast channels and resource sharing between related channels.
Reference: [12] <author> A. Mauthe, D. Hutchison, G. Coulson, and S. Na--muye. </author> <title> Multimedia group communications: towards new services. </title> <journal> Distributed Systems Engineering, </journal> <volume> 3(3) </volume> <pages> 197-210, </pages> <month> Sep </month> <year> 1996. </year>
Reference-contexts: For example, multimedia applications can often tolerate the loss of a few packets or missed deadlines, so P D and P R can be relatively low|on the order of 0.9 to 0.99 for audio and a minimum of 0.999 for video <ref> [12] </ref>. On the other hand, distributed financial systems such as automatic teller machines would likely require a value of P R very close to 1.0, but could tolerate a somewhat smaller value of P D .
Reference: [13] <author> L. Peterson, N. Buchholz, and R. Schlichting. </author> <title> Preserving and using context information in in-terprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: In particular, we consider latency|i.e., the maximum delivery delay, which affects whether a transmitted message meets a specified deadline or not, reliability|i.e., whether each message sent on a channel reaches its destination (s), and ordering properties between messages. Other properties not considered here include bounded jitter, atomic-ity, stability <ref> [13] </ref>, security, and properties related to changes in the set of processes using the channel, such as virtual synchrony [5].
Reference: [14] <editor> D. Powell, editor. Delta-4: </editor> <title> A Generic Architecture for Dependable Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: For example, safety critical systems usually require hard guarantees on system response time to avoid catastrophe, while multimedia applications perform better with at least soft guarantees. Numerous different types of real-time services and systems have been developed <ref> [2, 3, 8, 9, 14, 20] </ref>. However, most such systems are targeted for specific applications, which makes them rigid and unable to accommodate the different requirements of a variety of application types. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [18], Delta-4 <ref> [14] </ref>, HARTS [10], Mars [8], MK [16, 19], RT-Mach [20], and TTP [9]. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas.
Reference: [15] <author> R. van Renesse, K. Birman, and S Maffeis. Horus, </author> <title> a flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: Our approach is based on implementation of QoS attributes and service properties as configurable modules. Our emphasis on integrating attributes and on providing a high degree of flexibility distinguishes the approach from other real-time and configurable systems that support a degree of customization <ref> [15, 17, 18, 19] </ref>. <p> Thus, even this relatively small set of micro-protocols can be used to build channels with properties suitable for a variety of different applications. 4 Related Work A number of systems support configurability and customization of communication services in distributed systems, including Adaptive [17], Horus <ref> [15] </ref>, and the x-kernel [7]. However, only Adaptive and the configurable control system in [18] address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [16] <author> F. Reynolds. </author> <title> The OSF real-time micro-kernel. </title> <type> Technical report, </type> <institution> OSF Research Institute, </institution> <year> 1995. </year>
Reference-contexts: An implementation of the model is currently underway using the Open Group RI MK 7.2 real-time operating system <ref> [16] </ref> on a cluster of Pentium PCs. 2 Configurable Real-Time Services The focus of the Cactus project is on customizable middleware services for distributed systems, especially those related to interprocess communication. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [18], Delta-4 [14], HARTS [10], Mars [8], MK <ref> [16, 19] </ref>, RT-Mach [20], and TTP [9]. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas.
Reference: [17] <author> D. Schmidt, D. Box, and T. Suda. </author> <title> ADAPTIVE: A dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Con-currency: Practice and Experience, </journal> <volume> 5(4) </volume> <pages> 269-286, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: Our approach is based on implementation of QoS attributes and service properties as configurable modules. Our emphasis on integrating attributes and on providing a high degree of flexibility distinguishes the approach from other real-time and configurable systems that support a degree of customization <ref> [15, 17, 18, 19] </ref>. <p> Thus, even this relatively small set of micro-protocols can be used to build channels with properties suitable for a variety of different applications. 4 Related Work A number of systems support configurability and customization of communication services in distributed systems, including Adaptive <ref> [17] </ref>, Horus [15], and the x-kernel [7]. However, only Adaptive and the configurable control system in [18] address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications.
Reference: [18] <author> D. Stewart, R. Volpe, and P. Khosla. </author> <title> Design of dynamically reconfigurable real-time software using port-based objects. </title> <type> Technical Report CMU-RI-TR-93-11, </type> <institution> Carnegie Mellon University, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Our approach is based on implementation of QoS attributes and service properties as configurable modules. Our emphasis on integrating attributes and on providing a high degree of flexibility distinguishes the approach from other real-time and configurable systems that support a degree of customization <ref> [15, 17, 18, 19] </ref>. <p> However, only Adaptive and the configurable control system in <ref> [18] </ref> address issues related to real time. Adaptive introduces an approach to building protocols that employs a collection of reusable `building-block' protocol mechanisms that can be composed automatically based on functional specifications. The objects are tightly coupled in the sense that interactions between objects are fixed a priori. <p> f delivered = 0; SendOK [BasicChannel] = false; DeliverOK [BasicChannel] = false; bind (MsgFromNet,msg from net,5); bind (RtMsgToNet,rt msg to net,5); bind (MsgFromApp,msg from app,2); bind (RtMsgToApp,rt msg to app,2); bind (RtMsgFromNet,rt msg from net,2); bind (DataMsgFromNet,data msg from net,5); g g A reconfigurable real-time software system is intro-duced in <ref> [18] </ref>. The target application domain is sensor-based control systems, rather than real-time communication as is the case here. The port-based object model used in this system is suitable for combining existing software components, but lacks the degree of flexibility and fine-grain control found in the Cactus approach. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera <ref> [18] </ref>, Delta-4 [14], HARTS [10], Mars [8], MK [16, 19], RT-Mach [20], and TTP [9]. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas.
Reference: [19] <author> F. Travostino, E. Menze, and F. Reynolds. </author> <title> Paths: Programming with system resources in support of real-time distributed applications. </title> <booktitle> In Proceedings of the IEEE Workshop on Object-Oriented Real-Time Dependable Systems, </booktitle> <month> Feb </month> <year> 1996. </year>
Reference-contexts: Our approach is based on implementation of QoS attributes and service properties as configurable modules. Our emphasis on integrating attributes and on providing a high degree of flexibility distinguishes the approach from other real-time and configurable systems that support a degree of customization <ref> [15, 17, 18, 19] </ref>. <p> handlers minimizes the need for synchronization between handlers, and thus, reduces the well-known problems of synchronization, such as priority inversion. 2.2 Implementation Our prototype implementation of the real-time event-driven model is designed for the Open Group RI MK 7.2 operating system, which includes real-time support and the CORDS communication subsystem <ref> [19] </ref>. CORDS is essentially identical to the x-kernel, but with an additional path abstraction to support reservation of resources such as buffers and threads. We utilize paths and thread priorities provided by the system to give services and tasks with tighter deadlines higher priorities. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [18], Delta-4 [14], HARTS [10], Mars [8], MK <ref> [16, 19] </ref>, RT-Mach [20], and TTP [9]. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas. <p> While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas. Two exceptions are [2] and <ref> [19] </ref>, which have adopted principles from the x-kernel to add coarse-grain modularity and a limited degree of configurability to certain real-time communication services. Real-time channel abstractions similar to the one described in section 3 have been developed elsewhere as well.
Reference: [20] <author> H. Tokuda, T. Nakajima, and P. Rao. </author> <title> Real-time Mach: Toward a predictable real-time system. </title> <booktitle> In Proceedings of USENIX Mach Workshop, </booktitle> <pages> pages 73-82, </pages> <month> Oct </month> <year> 1990. </year>
Reference-contexts: For example, safety critical systems usually require hard guarantees on system response time to avoid catastrophe, while multimedia applications perform better with at least soft guarantees. Numerous different types of real-time services and systems have been developed <ref> [2, 3, 8, 9, 14, 20] </ref>. However, most such systems are targeted for specific applications, which makes them rigid and unable to accommodate the different requirements of a variety of application types. <p> As such, it would be difficult to use this model to construct the same type of configurable services. A large number of real-time systems have been designed and implemented, including Chimera [18], Delta-4 [14], HARTS [10], Mars [8], MK [16, 19], RT-Mach <ref> [20] </ref>, and TTP [9]. While suitable for their target application areas, the lack of support for configurabil-ity and customization in such systems typically limits their applicability to new areas.
References-found: 20

