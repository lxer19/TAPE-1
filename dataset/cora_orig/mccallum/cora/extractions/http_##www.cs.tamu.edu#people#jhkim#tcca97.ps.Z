URL: http://www.cs.tamu.edu/people/jhkim/tcca97.ps.Z
Refering-URL: http://www.cs.tamu.edu/people/jhkim/publications.html
Root-URL: http://www.cs.tamu.edu
Email: E-mail: fjhkim,vaidyag@cs.tamu.edu  
Title: Research on Adaptive and Recoverable Distributed Shared Memory  
Author: Jai-Hoon Kim Nitin H. Vaidya 
Web: Web: http://www.cs.tamu.edu/faculty/vaidya/  
Address: College Station, TX, 77843-3112  
Affiliation: Department of Computer Science Texas A&M University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Carter, D. Khandekar, and L. Kamb, </author> <title> Distributed shared memory: Where we are and where we should be headed, </title> <booktitle> in Proc. of the Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <pages> pp. 119-122, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Results Experiments are performed to evaluate the performance of the adaptive protocol, by running applications on an implementation of the adaptive protocol. We implemented the adaptive protocol by modifying another DSM, named Quarks (Beta release 0.8) <ref> [1, 6] </ref>. Experimental results show that our adaptive scheme performs well. This results suggest that our adaptive scheme can predict the optimal consistency protocol accurately when memory access patterns do not change frequently. Further measurements are presented in [9]. <p> We also present a mechanism that maintains consistency between shared data and process local state after recovery, by updating shared data and process local state atomically. We implemented recoverable DSM by modifying Quarks <ref> [1, 6] </ref> on a network of workstations. Experimental results indicate that the proposed scheme does not significantly increase the number or size of messages required in many applications. Further experiments are necessary to evaluate the execution time for our recoverable scheme.
Reference: [2] <author> J. B. Carter, </author> <title> Efficient Distributed Shared Memory Based On Multi-Protocol Release Consistency. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Many applications programmed for a multiprocessor system with shared memory can be executed on a software DSM system without significant modifications. This paper summarizes our research on DSM. 2 Adaptive Protocol Many approaches have been proposed to implement distributed shared memory (e.g., <ref> [2] </ref>). The DSM implementations are based on variations of write-invalidate and/or write-update protocols. Recent implementations of software DSM use relaxed memory consistency models such as release consistency. As no single protocol is optimal for all applications, researchers have proposed DSM implementations that provide a choice of multiple consistency protocols. <p> As no single protocol is optimal for all applications, researchers have proposed DSM implementations that provide a choice of multiple consistency protocols. The programmer may specify the appropriate protocol to be used for each shared memory object (or page) <ref> [2] </ref>. Other schemes are also proposed for programmer to use explicit communication [10] or user-level mechanism [11] that is appropriate to a particular program or data structure. While these approaches have the potential for achieving good performance, it imposes undue burden on the programmer. <p> Similarly, (d) node A starts segment 3 by local access at time 11 following remote updates by nodes B and C at time 9 and 10, respectively. Our analysis assumes that the DSM uses release consistency and dynamic distributed ownership analogous to Munin <ref> [2] </ref> and Quarks [6]. In the following, let c (m) denote cost of sending a message of size m. In general, the cost may be an arbitrary function. For instance, the cost may be some function of the message size. <p> how the recoverable scheme affects on computing a critical value of the number of updates, U critical , where L = 0 and L = 1 require the same cost. 5 Analysis for the Optimal Update Limit Competitive update protocols [4] (or other similar selective update protocols such as Munin <ref> [2] </ref> and Quarks [6]) are proposed. However, they select update limit (or selective update policy) based on experience by running many applications (or empirical evidence). We are working on new cost analysis model for competitive update protocol for DSM. This approach is based on the segment model.
Reference: [3] <author> A. Cox and R. Fowler, </author> <title> Adaptive cache coherency for detecting migratory shared data, </title> <booktitle> in Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 98-108, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: An adaptive migratory algorithm should eliminates the overhead for invalidation by self-invalidation on sending a copy of a page to the remote node <ref> [3, 12] </ref>. The adaptive scheme presented in section 2 is modified to include the migratory protocol as one of the protocol choices.
Reference: [4] <author> H. Grahn, P. Stenstrom, and M. Dubois, </author> <title> Implementation and evaluation of update-based cache protocols under relaxed memory consistency models, </title> <journal> Future Generation Computer Systems, </journal> <volume> vol. 11, </volume> <pages> pp. 247-271, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Our objective is to implement an adaptive DSM that can adapt to the time-varying memory access patterns of an application. Our initial goal was to design a heuristic to dynamically choose between the invalidate and the update protocols. Because competitive update protocol <ref> [4, 5] </ref> performs better than conventional update protocol in most cases, the proposed adaptive scheme actually chooses between the invalidate and competitive update protocols. The competitive update protocol is defined using a threshold or an update limit parameter. <p> We need to analyze how the recoverable scheme affects on computing a critical value of the number of updates, U critical , where L = 0 and L = 1 require the same cost. 5 Analysis for the Optimal Update Limit Competitive update protocols <ref> [4] </ref> (or other similar selective update protocols such as Munin [2] and Quarks [6]) are proposed. However, they select update limit (or selective update policy) based on experience by running many applications (or empirical evidence). We are working on new cost analysis model for competitive update protocol for DSM.
Reference: [5] <author> A. Karlin, M. Manasse, L. Rudolph, and D. Sleator, </author> <title> Competitive snoopy caching, </title> <booktitle> in Proc. of the 27'th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 244-254, </pages> <year> 1986. </year>
Reference-contexts: Our objective is to implement an adaptive DSM that can adapt to the time-varying memory access patterns of an application. Our initial goal was to design a heuristic to dynamically choose between the invalidate and the update protocols. Because competitive update protocol <ref> [4, 5] </ref> performs better than conventional update protocol in most cases, the proposed adaptive scheme actually chooses between the invalidate and competitive update protocols. The competitive update protocol is defined using a threshold or an update limit parameter.
Reference: [6] <author> D. Khandekar, </author> <title> Quarks: Portable dsm on unix, </title> <type> tech. rep., </type> <institution> University of Utah. </institution>
Reference-contexts: Similarly, (d) node A starts segment 3 by local access at time 11 following remote updates by nodes B and C at time 9 and 10, respectively. Our analysis assumes that the DSM uses release consistency and dynamic distributed ownership analogous to Munin [2] and Quarks <ref> [6] </ref>. In the following, let c (m) denote cost of sending a message of size m. In general, the cost may be an arbitrary function. For instance, the cost may be some function of the message size. <p> Results Experiments are performed to evaluate the performance of the adaptive protocol, by running applications on an implementation of the adaptive protocol. We implemented the adaptive protocol by modifying another DSM, named Quarks (Beta release 0.8) <ref> [1, 6] </ref>. Experimental results show that our adaptive scheme performs well. This results suggest that our adaptive scheme can predict the optimal consistency protocol accurately when memory access patterns do not change frequently. Further measurements are presented in [9]. <p> We also present a mechanism that maintains consistency between shared data and process local state after recovery, by updating shared data and process local state atomically. We implemented recoverable DSM by modifying Quarks <ref> [1, 6] </ref> on a network of workstations. Experimental results indicate that the proposed scheme does not significantly increase the number or size of messages required in many applications. Further experiments are necessary to evaluate the execution time for our recoverable scheme. <p> scheme affects on computing a critical value of the number of updates, U critical , where L = 0 and L = 1 require the same cost. 5 Analysis for the Optimal Update Limit Competitive update protocols [4] (or other similar selective update protocols such as Munin [2] and Quarks <ref> [6] </ref>) are proposed. However, they select update limit (or selective update policy) based on experience by running many applications (or empirical evidence). We are working on new cost analysis model for competitive update protocol for DSM. This approach is based on the segment model.
Reference: [7] <author> J.-H. Kim and N. H. Vaidya, </author> <title> Recoverable distributed shared memory using the competitive update protocol, </title> <booktitle> in 1995 Pacific Rim International Symposium on Fault-Tolerant Systems, </booktitle> <pages> pp. 152-157, </pages> <year> 1995. </year>
Reference-contexts: is at least U critical . (This condition is used to determine if migratory protocol is likely to incur least cost.) Experimental results from the implementation [8] suggest that the proposed adaptive migratory approach can reduce the cost for some applications. 4 Recoverable DSM We have proposed a recoverable DSM <ref> [7] </ref> that uses a competitive update protocol. With the competitive update protocol, multiple copies of each page may be maintained at different nodes. However, it is also possible for a page to exist in only one node, as some copies of the page may be invalidated.
Reference: [8] <author> J.-H. Kim and N. H. Vaidya, </author> <title> Adaptive migratory scheme for distributed shared memory, </title> <type> Tech. Rep. 96-023, </type> <institution> Texas A&M University, College Station, </institution> <year> 1996. </year>
Reference-contexts: Number of remote updates to page P in each segment is at least U critical . (This condition is used to determine if migratory protocol is likely to incur least cost.) Experimental results from the implementation <ref> [8] </ref> suggest that the proposed adaptive migratory approach can reduce the cost for some applications. 4 Recoverable DSM We have proposed a recoverable DSM [7] that uses a competitive update protocol. With the competitive update protocol, multiple copies of each page may be maintained at different nodes.
Reference: [9] <author> J.-H. Kim and N. H. Vaidya, </author> <title> A cost-comparison approach for adaptive distributed shared memory, </title> <booktitle> in ACM International Conference on Supercomputing (ICS), </booktitle> <pages> pp. 44-51, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: An adaptive implementation that automatically chooses the appropriate protocol (at run-time) for each shared memory page will ease the task of programming for DSM. We have developed a simple but effective approach for implementing adaptive DSM <ref> [9] </ref>. This approach is similar to adaptive mechanisms used to solve many other problems. fl This work is supported in part by the National Science Foundation under grant MIP-9502563. Our scheme can be summarized as follows: 1. <p> Experimental results show that our adaptive scheme performs well. This results suggest that our adaptive scheme can predict the optimal consistency protocol accurately when memory access patterns do not change frequently. Further measurements are presented in <ref> [9] </ref>.
Reference: [10] <author> U. Ramachandran, G. Shah, A. Sivasubramaniam, A. Singla, and I. Yanasak, </author> <title> Architectural mechanisms for explicit communication in shared memory multiproccessors, </title> <booktitle> in Supercomputing `95, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: The programmer may specify the appropriate protocol to be used for each shared memory object (or page) [2]. Other schemes are also proposed for programmer to use explicit communication <ref> [10] </ref> or user-level mechanism [11] that is appropriate to a particular program or data structure. While these approaches have the potential for achieving good performance, it imposes undue burden on the programmer.
Reference: [11] <author> S. Reinhardt, J. Larus, and D. Wood, Tempest and typhoon: </author> <title> User-level shared memory, </title> <booktitle> in Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 325-336, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: The programmer may specify the appropriate protocol to be used for each shared memory object (or page) [2]. Other schemes are also proposed for programmer to use explicit communication [10] or user-level mechanism <ref> [11] </ref> that is appropriate to a particular program or data structure. While these approaches have the potential for achieving good performance, it imposes undue burden on the programmer.
Reference: [12] <author> P. Stenstrom, M. Brorsson, and L. Sandberg, </author> <title> An adaptive cache coherence protocol optimized for migratory sharing, </title> <booktitle> in Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 109-118, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: An adaptive migratory algorithm should eliminates the overhead for invalidation by self-invalidation on sending a copy of a page to the remote node <ref> [3, 12] </ref>. The adaptive scheme presented in section 2 is modified to include the migratory protocol as one of the protocol choices.
References-found: 12

