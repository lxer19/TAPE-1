URL: http://www.cs.rpi.edu/~scorec/papers/98/dundee/dundee.ps
Refering-URL: http://www.cs.rpi.edu/~scorec/papers/98/papers.html
Root-URL: http://www.cs.rpi.edu
Title: Abstract  
Abstract: We describe predictive load balancing schemes for use with parallel adaptive finite element methods. We provide an overview of an infrastructure suitable for distributed storage of finite element mesh data as well as software designed for mesh adaptation and load balancing. The predictive load balancing methods improve enrichment efficiency and reduce total balancing time by using a priori estimates of work needed for adaptive refinement and subsequent computation. Analysis codes developed with these components for solving compressible flow problems are used to obtain predictive load balancing results on an IBM SP2 computer. Our three-dimensional test problems involve compressible steady flow about a rotor blade and transient flow in a perforated shock tube. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. T. Barnard. PMRSB: </author> <title> parallel multilevel recursive spectral bisection. </title> <editor> In F. Baker and J. Wehmer, eds., </editor> <booktitle> Proc. Supercomputing '95, </booktitle> <address> San Diego, </address> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection (RSB) [20] and, more recently, the multilevel partitioning algorithms included within the MeTiS system [16], are generally regarded as good static partitioners. Enhancements to RSB <ref> [1, 26, 28, 29] </ref> may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow. The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS [22]) make them worthy of consideration in this context.
Reference: [2] <author> M. W. Beall and M. S. Shephard. </author> <title> A general topology-based mesh data structure. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 40(9) </volume> <pages> 1573-1596, </pages> <year> 1997. </year>
Reference-contexts: A set of such tools which facilitate implementation of reusable parallel adaptive software have been developed for parallel mesh generation, adaptive mesh enrichment, and dynamic load balancing. 2.1 Mesh Data Structures Mesh data is stored using the SCOREC (Scientific Computation Research Center) Mesh Database (MDB) <ref> [2] </ref>, which provides operators to build, query and update hierarchical finite element data structures. The entity hierarchy consists of three-dimensional regions (which serve as elements for calculations here), their bounding faces, edges, and vertices, with bidirectional links between mesh entities of consecutive dimensional order.
Reference: [3] <author> R. Biswas, K. D. Devine, and J. E. Flaherty. </author> <title> Parallel, adaptive finite element methods for conservation laws. </title> <journal> Appl. Numer. Math., </journal> <volume> 14 </volume> <pages> 255-283, </pages> <year> 1994. </year>
Reference-contexts: The simulation begins with an initial mesh of 69,572 tetrahedral elements distributed across 16 processors of an IBM SP2 computer. The software used is a Parallel Adaptive Euler Solver in which three-dimensional conservation laws are discretized using a discontinuous Galerkin finite element method <ref> [3, 7, 8] </ref> with explicit integration. The software uses both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed [14]. in the simulation. Flow features compare favorably with experimental and numerical results of Nagamatsu et al. [17].
Reference: [4] <author> C. L. Bottasso, H. L. de Cougny, M. Dindar, J. E. Flaherty, C. Ozturan, Z. Rusak, and M. S. Shephard. </author> <title> Compressible aerodynamics using a parallel adaptive time-discontinuous Galerkin least-squares finite element method. </title> <booktitle> In Proc. 12th AIAA Appl. Aero. Conf., num. </booktitle> <pages> 94-1888, </pages> <address> Colorado Springs, </address> <year> 1994. </year>
Reference-contexts: Dynamic repartitioning is needed to correct for load imbalance introduced by adaptive enrichment. We describe reusable tools that facilitate the development and use of parallel adaptive finite element software (Section 2) in many applications, including steady <ref> [4] </ref> and unsteady [14] compressible three-dimensional fluid flow. Parallel mesh enrichment routines are used for spatial h-refinement [24]; however, h-refinement may also performed in time both to accelerate convergence to a steady state [4] and to improve the ef-ficiency of transient computations [14]. <p> the development and use of parallel adaptive finite element software (Section 2) in many applications, including steady <ref> [4] </ref> and unsteady [14] compressible three-dimensional fluid flow. Parallel mesh enrichment routines are used for spatial h-refinement [24]; however, h-refinement may also performed in time both to accelerate convergence to a steady state [4] and to improve the ef-ficiency of transient computations [14]. The consideration of heterogeneous element weights allows us to balance processor loads based on both the temporal and spatial enrichment. Typically, processor load balancing follows an h-refinement step. <p> balance the LRM almost as accurately as an a posteriori weighted partitioner while migrating less data and improving combined balancing and enrichment time. 5.1 Steady Rotorcraft Flow The UP method has been applied to a steady flow problem using a parallel adaptive FEM program called Fluid Analysis in Space-Time (FAST) <ref> [4] </ref>. FAST uses the tools of Section 2 to analyze compressible fluid flows by the time discontinuous Galerkin/least-squares method [23] with a Generalized Minimum Residual (GMRES) [21] algorithm employed to solve linear algebraic systems. We use FAST to study the steady flow of a Caradonna-Tung rotor blade [6].
Reference: [5] <author> C. L. Bottasso, J. E. Flaherty, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> The quality of partitions produced by an iterative load balancer. </title> <editor> In B. K. Szymanski and B. Sinharoy, eds., </editor> <booktitle> Proc. Third Workshop on Languages, Compilers, and Runtime Systems, </booktitle> <pages> pp. 265-277, </pages> <address> Troy, </address> <year> 1996. </year>
Reference-contexts: Flow features compare favorably with experimental and numerical results of Nagamatsu et al. [17]. Iterative balancing methods like ITB tend to have low per-iteration costs. However, global repartitioners generally maintain better partition quality than ITB <ref> [5] </ref>. Thus, the standard nonpredictive method executes a few iterations of ITB between spatial enrichment stages to maintain some balance, followed by a global repartitioning after enrichment to achieve better partition quality.
Reference: [6] <author> F. Caradonna and C. Tung. </author> <title> Experimental and analytical studies of a model helicopter rotor in hover. </title> <type> Tech. Report 81232, </type> <institution> NASA, </institution> <year> 1980. </year>
Reference-contexts: FAST uses the tools of Section 2 to analyze compressible fluid flows by the time discontinuous Galerkin/least-squares method [23] with a Generalized Minimum Residual (GMRES) [21] algorithm employed to solve linear algebraic systems. We use FAST to study the steady flow of a Caradonna-Tung rotor blade <ref> [6] </ref>. This two-bladed rotor is untwisted and untapered with an aspect ratio of 6 and has a NACA 0012 airfoil section. The case analyzed has a tip Mach number of 0.439, a collective setting of 8 o and a rotor speed of 1250 rpm.
Reference: [7] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws III: One-Dimensional systems. </title> <journal> J. Comput. Phys., </journal> <volume> 84 </volume> <pages> 90-113, </pages> <year> 1989. </year>
Reference-contexts: The simulation begins with an initial mesh of 69,572 tetrahedral elements distributed across 16 processors of an IBM SP2 computer. The software used is a Parallel Adaptive Euler Solver in which three-dimensional conservation laws are discretized using a discontinuous Galerkin finite element method <ref> [3, 7, 8] </ref> with explicit integration. The software uses both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed [14]. in the simulation. Flow features compare favorably with experimental and numerical results of Nagamatsu et al. [17].
Reference: [8] <author> B. Cockburn and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws II: General framework. </title> <journal> Math. Comp., </journal> <volume> 52 </volume> <pages> 411-435, </pages> <year> 1989. </year>
Reference-contexts: The simulation begins with an initial mesh of 69,572 tetrahedral elements distributed across 16 processors of an IBM SP2 computer. The software used is a Parallel Adaptive Euler Solver in which three-dimensional conservation laws are discretized using a discontinuous Galerkin finite element method <ref> [3, 7, 8] </ref> with explicit integration. The software uses both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed [14]. in the simulation. Flow features compare favorably with experimental and numerical results of Nagamatsu et al. [17].
Reference: [9] <author> K. D. Devine, J. E. Flaherty, R. Loy, and S. Wheat. </author> <title> Parallel partitioning strategies for the adaptive solution of conservation laws. </title> <editor> In I. Babuska, J. E. Flaherty, W. D. Henshaw, J. E. Hopcroft, J. E. Oliger, and T. Tezduyar, eds., </editor> <title> Modeling, Mesh Generation, and Adaptive Numerical Methods for Partial Differential Equations, </title> <journal> vol. </journal> <volume> 75, </volume> <pages> pp. 215-242, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin-Heidelberg, </address> <year> 1995. </year>
Reference-contexts: However, a global partitioner is used with VP (VPOCT) in order to maintain good partition quality even with repeated application. We use two important and accurate measures of computational imbalance to gauge the effectiveness of a technique in balancing the LRM <ref> [9, 14] </ref>. Time-step imbalance is defined as the maximum number of elements time stepped on a processor normalized by the average number stepped on all processors.
Reference: [10] <author> R. E. Dillon Jr. </author> <title> A parametric study of perforated muzzle brakes. </title> <type> ARDC Tech. Report ARLCB-TR-84015, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1984. </year>
Reference-contexts: This problem is motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [10] </ref>. Simulation flow parameters match those of shock tube studies of Dillon [10] and Nagamatsu et al. [17]. The larger cylinder (the shock tube) initially contains air moving at Mach 1.23 while the smaller cylinder (the vent) is quiescent. A Mach 1.23 flow is prescribed at the tube's inlet. <p> This problem is motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [10] </ref>. Simulation flow parameters match those of shock tube studies of Dillon [10] and Nagamatsu et al. [17]. The larger cylinder (the shock tube) initially contains air moving at Mach 1.23 while the smaller cylinder (the vent) is quiescent. A Mach 1.23 flow is prescribed at the tube's inlet.
Reference: [11] <author> M. Dindar, A. Lemnios, and M. Shephard. </author> <title> Adaptive solution procedures for rotorcraft aerodynamics. </title> <note> Submitted for publication, </note> <year> 1997. </year>
Reference-contexts: The surface of the blade is shown in gray. The most important flow feature of a hovering rotor blade is the "tip vortex." A vortex tube is a cylinder where the velocity re-circulates around a "vortex core" <ref> [11] </ref>. Vortex tubes are shed from the tip of each blade and significantly influence the lift and drag characteristics of the blade. <p> Shaded areas near the blade tip (lower left in each plot) indicate the presence of tip vortices. Elements that a vortex tube might contain are identified and subsequently refined to enrich the solution <ref> [11] </ref>. Thus, vortex tubes serve as a refinement indicator to concentrate computation near the tip vortices. Level 0 Level 2 Level 4 refinement. Level 2 solution after two additional refinement steps. Level 4 solution after four additional refinement steps (beyond Level 0).
Reference: [12] <author> J. E. Flaherty, R. M. Loy, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Parallel structures and dynamic load balancing for adaptive finite element computation. </title> <type> SCOREC Report 22-1996, </type> <institution> Scientific Computation Research Center, Rensselaer Polytechnic Institute, Troy, </institution> <year> 1996. </year> <note> To appear Appl. Num. Math. </note>
Reference-contexts: This geometric model is used to maintain appropriate domain geometry as the mesh is generated and subsequently enriched, through explicit classification of mesh entities onto the model. A Parallel Mesh Database (PMDB) <ref> [12, 24] </ref> is built on top of MDB to create and manipulate distributed mesh data. The Message Passing Interface (MPI) is used for interprocessor communication. Each processor holds MDB data associated with a subset of the complete mesh. <p> The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS [22]) make them worthy of consideration in this context. The JOSTLE package [30] provides an iterative partition optimization process which may also be useful for balancing adaptive computation. Iterative Tree Balancing <ref> [12, 24] </ref> (ITB) is a diffusive algorithm based on repeated local migration. Each processor requests load from its most heavily loaded neighbor, and these requests are used to create a forest of trees. <p> This form of predictive balancing is called Uniform element workload Predictive balancing (UP). UP was effective in balancing a transient flow problem solved using an explicit parallel adaptive Euler solution technique with time steps determined by the MOL <ref> [12] </ref>. Since the workload per element in the computation phase was homogeneous in this case, this technique also balanced the numerical calculations subsequent to each adaptive step.
Reference: [13] <author> J. E. Flaherty, R. M. Loy, P. C. Scully, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Load balancing and communication optimization for parallel adaptive finite element computation. </title> <note> To appear, Proc. SCCC '97, </note> <year> 1997. </year>
Reference-contexts: Thus, while WOCT maintains the best load balance of the three, VPOCT produces nearly the same level of computational efficiency. In addition, it has been shown to reduce data migration by 55-83% and combined enrichment and balancing times by 38-71% for this same problem <ref> [13] </ref>. 6 Conclusions One measure of load balance during refinement is the number of edges marked for refinement on each processor. For the steady rotor problem (Section 5.1), the UP method is able to reduce imbalance in marked edges by 80% relative to nonpredictive balancing for a representative mesh. <p> Overall, VPOCT reduces flux imbalance by 22% and time--step imbalance by 23% relative to OCT. It differs from WOCT's results by only 4.0% and 2.6%, respectively. When combined with previous results <ref> [13] </ref> indicating a 72% average improvement in data migrated and a 62% reduction in combined enrichment and balancing times relative to nonpredictive balancing with ITB during enrichment and WOCT after, VPOCT shows promise in balancing transient computations with LRMs.
Reference: [14] <author> J. E. Flaherty, R. M. Loy, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Adaptive local refinement with octree load-balancing for the parallel solution of three-dimensional conservation laws. </title> <type> IMA Preprint Series 1483, </type> <institution> Institute for Mathematics and its Applications, University of Minnesota, </institution> <year> 1997. </year> <note> Submitted for publication. </note>
Reference-contexts: Dynamic repartitioning is needed to correct for load imbalance introduced by adaptive enrichment. We describe reusable tools that facilitate the development and use of parallel adaptive finite element software (Section 2) in many applications, including steady [4] and unsteady <ref> [14] </ref> compressible three-dimensional fluid flow. Parallel mesh enrichment routines are used for spatial h-refinement [24]; however, h-refinement may also performed in time both to accelerate convergence to a steady state [4] and to improve the ef-ficiency of transient computations [14]. <p> software (Section 2) in many applications, including steady [4] and unsteady <ref> [14] </ref> compressible three-dimensional fluid flow. Parallel mesh enrichment routines are used for spatial h-refinement [24]; however, h-refinement may also performed in time both to accelerate convergence to a steady state [4] and to improve the ef-ficiency of transient computations [14]. The consideration of heterogeneous element weights allows us to balance processor loads based on both the temporal and spatial enrichment. Typically, processor load balancing follows an h-refinement step. <p> Parallel Sort Inertial Recursive Bisection [24] (PSIRB) is an implementation of inertial bisection. The domain is recursively bisected in a direction orthogonal to its principal axis of inertia. Inertial coordinates are sorted in parallel, allowing operation on a distributed mesh. Octree Partitioning <ref> [14] </ref> (OCT) uses a one-dimensional ordering of the nodes of an octree structure underlying the mesh. The ordered list of nodes is divided into segments corresponding to nearly equal load. <p> With a small per-iteration cost, ITB is often executed for a few iterations between stages of mesh enrichment to improve balance without a large time penalty. 3.2 Temporal Refinement In a time-dependent calculation (see Section 5.2), we use the Local Refinement Method (LRM) <ref> [14] </ref>, in which elements choose spatially-dependent time steps based upon a Courant stability condition for explicit time integration. <p> The software uses both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed <ref> [14] </ref>. in the simulation. Flow features compare favorably with experimental and numerical results of Nagamatsu et al. [17]. Iterative balancing methods like ITB tend to have low per-iteration costs. However, global repartitioners generally maintain better partition quality than ITB [5]. <p> However, a global partitioner is used with VP (VPOCT) in order to maintain good partition quality even with repeated application. We use two important and accurate measures of computational imbalance to gauge the effectiveness of a technique in balancing the LRM <ref> [9, 14] </ref>. Time-step imbalance is defined as the maximum number of elements time stepped on a processor normalized by the average number stepped on all processors.
Reference: [15] <author> J. E. Flaherty, R. M. Loy, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Predictive load balancing for parallel adaptive finite element computation. </title> <editor> In H. R. Arabnia, ed., </editor> <booktitle> Proc. </booktitle> <volume> PDPTA '97, vol. I, </volume> <pages> pp. 460-469, </pages> <year> 1997. </year>
Reference-contexts: UP has also been used in tests with two different balancing algorithms to improve enrichment and balancing times for a nonuniform workload per element solution technique <ref> [15] </ref>. The goal was to balance refinement using UP. The heterogeneous computational workload was balanced by a standard weighted partitioner. Predictive balancing can be applied more directly to problems with nonuniform workload per element.
Reference: [16] <author> G. Karypis and V. Kumar. Metis: </author> <title> Unstructured graph partitioning and sparse matrix ordering system. </title> <type> Tech. Report, </type> <institution> University of Minnesota, Department of Computer Science, Minneapolis, MN, </institution> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection (RSB) [20] and, more recently, the multilevel partitioning algorithms included within the MeTiS system <ref> [16] </ref>, are generally regarded as good static partitioners. Enhancements to RSB [1, 26, 28, 29] may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow.
Reference: [17] <author> H. T. Nagamatsu, K. Y. Choi, R. E. Duffy, and G. C. Carofano. </author> <title> An experimental and numerical study of the flow through a vent hole in a perforated muzzle brake. </title> <type> ARDEC Tech. Report ARCCB-TR-87016, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1987. </year>
Reference-contexts: This problem is motivated by flow studies in perforated muzzle brakes for large calibre guns [10]. Simulation flow parameters match those of shock tube studies of Dillon [10] and Nagamatsu et al. <ref> [17] </ref>. The larger cylinder (the shock tube) initially contains air moving at Mach 1.23 while the smaller cylinder (the vent) is quiescent. A Mach 1.23 flow is prescribed at the tube's inlet. <p> The software uses both spatial and temporal refinement to concentrate computational effort in areas of the problem domain where it is most needed [14]. in the simulation. Flow features compare favorably with experimental and numerical results of Nagamatsu et al. <ref> [17] </ref>. Iterative balancing methods like ITB tend to have low per-iteration costs. However, global repartitioners generally maintain better partition quality than ITB [5].
Reference: [18] <author> L. Oliker, R. Biswas, and R. C. Strawn. </author> <title> Parallel implementaion of an adaptive scheme for 3D unstructured grids on the SP2. </title> <booktitle> In Proc. 3rd International Workshop on Parallel Algorithms for Irregularly Structured Problems, </booktitle> <address> Santa Barbara, </address> <year> 1996. </year>
Reference-contexts: An element with no edges marked for refinement is assigned a unit weight factor. Partition loads are then recomputed using these assignments, and a weighted load balancing is performed. Any algorithm that supports weighted elements may be used. A similar technique has been developed by Oliker, Biswas, and Strawn <ref> [18] </ref>. 1-edge 2-edge 3-edge 4-edge 5-edge 6-edge (3) (6) (6) (8) (4) (2) Several factors may lead to small imbalances during refinement even with predictive balancing. An element is an atomic unit so it cannot be subdivided to achieve an exact balance.
Reference: [19] <author> A. Patra and J. T. Oden. </author> <title> Problem decomposition for adaptive hp finite element methods. </title> <journal> Comp. Sys. Engng., </journal> <volume> 6(2):97, </volume> <year> 1995. </year>
Reference-contexts: The ordered list of nodes is divided into segments corresponding to nearly equal load. Octants adjacent to one another in the ordered list tend to be spatially adjacent and, thus, form a nearly contiguous partition. The use of space-filling curves <ref> [19] </ref> produces similar results, keeping neighboring elements of the ordering in close spatial proximity. Our software includes implementations of ITB, PSIRB, and OCT which operate directly on distributed PMDB meshes, and an interface to convert our data structures into a format usable by the ParMeTiS package.
Reference: [20] <author> A. Pothen, H. Simon, and K.-P. Liou. </author> <title> Partitioning sparse matrices with eigen-vectors of graphs. </title> <journal> SIAM J. Mat. Anal. Appl., </journal> <volume> 11(3) </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: Partition boundary structures are updated during migration using an owner-updates rule, allowing the migration to scale with the number of processors. 2.2 Dynamic Load Balancing To be useful in a parallel adaptive environment, a dynamic load balancing procedure must operate on distributed mesh data. Recursive spectral bisection (RSB) <ref> [20] </ref> and, more recently, the multilevel partitioning algorithms included within the MeTiS system [16], are generally regarded as good static partitioners. Enhancements to RSB [1, 26, 28, 29] may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow.
Reference: [21] <author> Y. Saad and M. Schultz. </author> <title> GMRES: A generalized minimum residual algorithm for solving nonsymmetric linear systems. </title> <journal> SIAM J. Scien. Stat. Comput., </journal> <volume> 7 </volume> <pages> 856-869, </pages> <year> 1986. </year>
Reference-contexts: FAST uses the tools of Section 2 to analyze compressible fluid flows by the time discontinuous Galerkin/least-squares method [23] with a Generalized Minimum Residual (GMRES) <ref> [21] </ref> algorithm employed to solve linear algebraic systems. We use FAST to study the steady flow of a Caradonna-Tung rotor blade [6]. This two-bladed rotor is untwisted and untapered with an aspect ratio of 6 and has a NACA 0012 airfoil section.
Reference: [22] <author> K. Schloegel, G. Karypis, and V. Kumar. </author> <title> Parallel multilevel diffusion algorithms for repartitioning of adaptive meshes. </title> <type> Tech. Report 97-014, </type> <institution> University of Min-nesota, Department of Computer Science and Army HPC Center, Minneapolis, MN, </institution> <year> 1997. </year>
Reference-contexts: Enhancements to RSB [1, 26, 28, 29] may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow. The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS <ref> [22] </ref>) make them worthy of consideration in this context. The JOSTLE package [30] provides an iterative partition optimization process which may also be useful for balancing adaptive computation. Iterative Tree Balancing [12, 24] (ITB) is a diffusive algorithm based on repeated local migration.
Reference: [23] <author> F. Shakib. </author> <title> Finite Element Analysis of the Compressible Euler and Navier-Stokes Equations. </title> <type> PhD thesis, </type> <institution> Dept. of Mechanical Engineering, Stanford University, </institution> <address> CA, </address> <year> 1988. </year>
Reference-contexts: FAST uses the tools of Section 2 to analyze compressible fluid flows by the time discontinuous Galerkin/least-squares method <ref> [23] </ref> with a Generalized Minimum Residual (GMRES) [21] algorithm employed to solve linear algebraic systems. We use FAST to study the steady flow of a Caradonna-Tung rotor blade [6]. This two-bladed rotor is untwisted and untapered with an aspect ratio of 6 and has a NACA 0012 airfoil section.
Reference: [24] <author> M. S. Shephard, J. E. Flaherty, H. L. de Cougny, C. Ozturan, C. L. Bottasso, and M. W. Beall. </author> <title> Parallel automated adaptive procedures for unstructured meshes. In Parallel Comput. in CFD, </title> <journal> num. </journal> <volume> R-807, </volume> <pages> pp. </pages> <address> 6.1-6.49. Agard, Neuilly-Sur-Seine, </address> <year> 1995. </year>
Reference-contexts: We describe reusable tools that facilitate the development and use of parallel adaptive finite element software (Section 2) in many applications, including steady [4] and unsteady [14] compressible three-dimensional fluid flow. Parallel mesh enrichment routines are used for spatial h-refinement <ref> [24] </ref>; however, h-refinement may also performed in time both to accelerate convergence to a steady state [4] and to improve the ef-ficiency of transient computations [14]. The consideration of heterogeneous element weights allows us to balance processor loads based on both the temporal and spatial enrichment. <p> This geometric model is used to maintain appropriate domain geometry as the mesh is generated and subsequently enriched, through explicit classification of mesh entities onto the model. A Parallel Mesh Database (PMDB) <ref> [12, 24] </ref> is built on top of MDB to create and manipulate distributed mesh data. The Message Passing Interface (MPI) is used for interprocessor communication. Each processor holds MDB data associated with a subset of the complete mesh. <p> The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS [22]) make them worthy of consideration in this context. The JOSTLE package [30] provides an iterative partition optimization process which may also be useful for balancing adaptive computation. Iterative Tree Balancing <ref> [12, 24] </ref> (ITB) is a diffusive algorithm based on repeated local migration. Each processor requests load from its most heavily loaded neighbor, and these requests are used to create a forest of trees. <p> Load flows are computed, and elements on interproces-sor boundaries are moved from heavily loaded to lightly loaded processors to balance each tree. This process may be iterated to a global balance. Parallel Sort Inertial Recursive Bisection <ref> [24] </ref> (PSIRB) is an implementation of inertial bisection. The domain is recursively bisected in a direction orthogonal to its principal axis of inertia. Inertial coordinates are sorted in parallel, allowing operation on a distributed mesh. <p> In this context, load balancing consists of balancing these weights across the processors. ITB, PSIRB, and OCT each allow such weighting when determining partitions. 3 Adaptive Techniques 3.1 Spatial Refinement Spatial h-refinement is performed on distributed meshes using the SCOREC mesh enrichment procedure <ref> [24] </ref>. Mesh edges are marked to be coarsened, refined, or to remain unchanged using error indicator information and threshold values provided by the analysis code.
Reference: [25] <author> M. S. Shephard and M. K. Georges. </author> <title> Automatic three-dimensional mesh generation by the Finite Octree technique. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 32(4) </volume> <pages> 709-749, </pages> <year> 1991. </year>
Reference-contexts: The entity hierarchy consists of three-dimensional regions (which serve as elements for calculations here), their bounding faces, edges, and vertices, with bidirectional links between mesh entities of consecutive dimensional order. The Finite Octree Automatic Mesh Generator <ref> [25] </ref> creates initial meshes from a geometric (CAD) model of the problem domain. This geometric model is used to maintain appropriate domain geometry as the mesh is generated and subsequently enriched, through explicit classification of mesh entities onto the model.
Reference: [26] <author> A. Sohn, R. Biswas, and H. D. Simon. </author> <title> Impact of load balancing on unstructured adaptive computations for distributed-memory multiprocessors. </title> <booktitle> In Proc. Eighth IEEE Symp. on Parallel and Distrib. Proc., </booktitle> <pages> pp. 26-33, </pages> <address> New Orleans, LA, </address> <year> 1996. </year>
Reference-contexts: Recursive spectral bisection (RSB) [20] and, more recently, the multilevel partitioning algorithms included within the MeTiS system [16], are generally regarded as good static partitioners. Enhancements to RSB <ref> [1, 26, 28, 29] </ref> may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow. The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS [22]) make them worthy of consideration in this context.
Reference: [27] <author> G. Srinivasen, V. Raghavan, and E. Duque. </author> <title> Flowfield analysis of modern helicopter rotors in hover by Navier-Stokes method. </title> <booktitle> In Proc. Int. Specialist Meeting on Rotorcraft Acoustics and Rotor Fluid Dynamics, </booktitle> <address> Philadelphia, PA, </address> <year> 1991. </year>
Reference-contexts: For computational efficiency, only one blade is modeled, resulting in a half-cylinder domain. The initial mesh contains 255,203 tetrahedral elements with a piecewise linear finite element basis. The inflow and outflow boundary conditions of a hovering blade are applied as in <ref> [27] </ref>. sizes increased, the number of processors needed increased, and the computation was continued using the IBM SP computer at the Cornell Theory Center. Predictive load balancing was used throughout the computation.
Reference: [28] <author> R. Van Driessche and D. Roose. </author> <title> An improved spectral bisection algorithm and its application to dynamic load balancing. </title> <journal> Parallel Comput., </journal> <volume> 21 </volume> <pages> 29-48, </pages> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection (RSB) [20] and, more recently, the multilevel partitioning algorithms included within the MeTiS system [16], are generally regarded as good static partitioners. Enhancements to RSB <ref> [1, 26, 28, 29] </ref> may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow. The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS [22]) make them worthy of consideration in this context.
Reference: [29] <author> C. H. Walshaw and M. Berzins. </author> <title> Dynamic load balancing for PDE solvers on adaptive unstructured meshes. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 7(1) </volume> <pages> 17-28, </pages> <year> 1995. </year>
Reference-contexts: Recursive spectral bisection (RSB) [20] and, more recently, the multilevel partitioning algorithms included within the MeTiS system [16], are generally regarded as good static partitioners. Enhancements to RSB <ref> [1, 26, 28, 29] </ref> may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow. The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS [22]) make them worthy of consideration in this context.
Reference: [30] <author> C. H. Walshaw, M. Cross, and M. Everett. </author> <title> Mesh partitioning and load-balancing for distributed memory parallel systems. </title> <booktitle> In Proc. Par. Dist. </booktitle> <institution> Comput. for Comput. Mech., </institution> <address> Lochinver, Scotland, </address> <year> 1997. </year> <note> Author contact information J. </note> <author> E. Flaherty y (flaherje@cs.rpi.edu), R. M. Loy (loyr@cs.rpi.edu), M. Dindar (mdin-dar@scorec.rpi.edu), M. S. Shephard (shephard@scorec.rpi.edu), B. K. Szymanski (szy-mansk@cs.rpi.edu), J. D. Teresco (terescoj@cs.rpi.edu), and L. H. </author> <note> Ziantz (ziantzl@- cs.rpi.edu). </note> <institution> Computer Science Department and Scientific Computation Research Center, Rensselaer Polytechnic Institute, Troy, NY, U.S.A. y primary author for correspondence </institution>
Reference-contexts: Enhancements to RSB [1, 26, 28, 29] may make it more useful as a dynamic repartitioner, but it is generally regarded as being too slow. The recent extension of the MeTiS algorithms to operate in parallel (ParMeTiS [22]) make them worthy of consideration in this context. The JOSTLE package <ref> [30] </ref> provides an iterative partition optimization process which may also be useful for balancing adaptive computation. Iterative Tree Balancing [12, 24] (ITB) is a diffusive algorithm based on repeated local migration.
References-found: 30

