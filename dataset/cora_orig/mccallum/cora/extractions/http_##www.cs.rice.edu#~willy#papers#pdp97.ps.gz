URL: http://www.cs.rice.edu/~willy/papers/pdp97.ps.gz
Refering-URL: http://www.cs.rice.edu/~willy/TreadMarks/papers.html
Root-URL: 
Title: Execution replay for TreadMarks  
Author: Michiel Ronsse Willy Zwaenepoel 
Keyword: (ROLT) for TreadMarks, a DSM (Distributed Shared Memory) system.  
Address: Belgium  Houston, TX USA  
Affiliation: Department of Electronics and Information Systems Universiteit Gent  Department of Computer Science Rice University  
Abstract: As most parallel programs are non-deterministic, the execution path of a parallel program can vary from one execution to another. When such a program contains an error, we can no longer guarantee that consecutive runs with the same input will result in the same error. As a consequence, cyclic debugging techniques as such become unusable. However, if we can force re-executions to be `equivalent' to the faulty one, we can still use those techniques. This can be accomplished using a replay method. Such a method traces a particular program execution. Using those traces, the method forces subsequent executions to be equivalent to the traced one. This paper presents an implementation of a recently introduced method 
Abstract-found: 1
Intro-found: 1
Reference: [KCDZ] <author> Pete Keleher, Alan L. Cox, Sandhy Dwarkadas, and Willy Zwaenepoel. Treadmarks: </author> <title> Distributed shared memory on standard workstations and operating systems. </title> <institution> department of computer science, rice university, houston (tx). </institution>
Reference-contexts: Operations on the same lock are denoted by the same symbol. 3 TreadMarks TreadMarks <ref> [KCDZ] </ref> is a Distributed Shared Memory system: it enables programmers to use a shared memory paradigm to program a network of workstations. Using multiple-writer protocols and lazy release consistency [KCZ92], a good performance is obtained.
Reference: [KCZ92] <author> Pete Keleher, Alan L. Cox, and Willy Zwaenepoel. </author> <title> Lazy Release Consistency for Software Distributed Shared Memory. </title> <booktitle> In Proceedings of the 19th International Symposium of Computer Architecture, </booktitle> <pages> pages 13-21, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Operations on the same lock are denoted by the same symbol. 3 TreadMarks TreadMarks [KCDZ] is a Distributed Shared Memory system: it enables programmers to use a shared memory paradigm to program a network of workstations. Using multiple-writer protocols and lazy release consistency <ref> [KCZ92] </ref>, a good performance is obtained. As this paper discusses an implementation of ROLT for TreadMarks enforcing 'equivalent' executions on the highest abstraction level (the shared memory level), we will only discuss TreadMarks topics that are relevant to the implementation of ROLT.
Reference: [Lam78] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: As there is no synchronization, no information will be stored during the record phase. Therefore, the replay method will be unable to force the accesses to occur in the same order as in the record phase. The ROLT method uses Lamport clocks <ref> [Lam78] </ref> to attach logical timestamps to synchronization operations (see Fig. 1.a). Logical timestamps may not reflect the actual real-time order of the operations.
Reference: [LAV94] <author> Luk J. Levrouw, Koenraad M. Audenaert, and Jan M. Van Campenhout. </author> <title> A new trace and replay system for shared memory programs based on Lamport Clocks. </title> <booktitle> In Proceedings of the Second Euromicro Workshop on Parallel and Distributed Processing, </booktitle> <pages> pages 471-478. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1994. </year>
Reference-contexts: Instant Replay was introduced. This method makes it possible to obtain large reductions of the trace files. In contrast with [LM87] this method was presented considering fine-grained operations: the order of individual memory accesses is replayed. Recently, a new replay method called ROLT (Reconstruction Of Lamport Timestamps) was introduced <ref> [LAV94] </ref>. The advantage of this method is that it produces smaller trace files and is much less intrusive than Netzer's. In [LAV94] the ROLT method was shown to be better than [Net93]. <p> Recently, a new replay method called ROLT (Reconstruction Of Lamport Timestamps) was introduced <ref> [LAV94] </ref>. The advantage of this method is that it produces smaller trace files and is much less intrusive than Netzer's. In [LAV94] the ROLT method was shown to be better than [Net93]. Originally, the ROLT method was implemented for operations with large granularity (monitor operations) and in [RLB95] the method was tested for individual memory accesses. This was done by simulating the ROLT method with a multiprocessor simulator.
Reference: [LM87] <author> Thomas J. LeBlanc and John M. Mellor-Crummey. </author> <title> Debugging parallel programs with Instant Replay. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(4):471-482, </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: As the first approach isn't feasible because it leads to huge trace files, we use the second approach. Instant Replay <ref> [LM87] </ref> introduced a widely accepted replay method. It records the order of coarse grained accesses by the different processors to the shared objects. In [Net93] a new method based on vector clocks producing smaller trace files w.r.t. Instant Replay was introduced. <p> In [Net93] a new method based on vector clocks producing smaller trace files w.r.t. Instant Replay was introduced. This method makes it possible to obtain large reductions of the trace files. In contrast with <ref> [LM87] </ref> this method was presented considering fine-grained operations: the order of individual memory accesses is replayed. Recently, a new replay method called ROLT (Reconstruction Of Lamport Timestamps) was introduced [LAV94]. The advantage of this method is that it produces smaller trace files and is much less intrusive than Netzer's.
Reference: [Net93] <author> Robert H.B. Netzer. </author> <title> Optimal tracing and replay for debugging shared-memory parallel programs. </title> <booktitle> In Proceedings ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 1-11, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: As the first approach isn't feasible because it leads to huge trace files, we use the second approach. Instant Replay [LM87] introduced a widely accepted replay method. It records the order of coarse grained accesses by the different processors to the shared objects. In <ref> [Net93] </ref> a new method based on vector clocks producing smaller trace files w.r.t. Instant Replay was introduced. This method makes it possible to obtain large reductions of the trace files. In contrast with [LM87] this method was presented considering fine-grained operations: the order of individual memory accesses is replayed. <p> Recently, a new replay method called ROLT (Reconstruction Of Lamport Timestamps) was introduced [LAV94]. The advantage of this method is that it produces smaller trace files and is much less intrusive than Netzer's. In [LAV94] the ROLT method was shown to be better than <ref> [Net93] </ref>. Originally, the ROLT method was implemented for operations with large granularity (monitor operations) and in [RLB95] the method was tested for individual memory accesses. This was done by simulating the ROLT method with a multiprocessor simulator.
Reference: [RLB95] <author> M.A. Ronsse, L.J. Levrouw, and K. Bastiaens. </author> <title> Efficient coding of execution-traces of parallel programs. </title> <editor> In J. P. Veen, editor, </editor> <booktitle> Proceedings of the ProRISC / IEEE Benelux Workshop on Circuits, Systems and Signal Processing, </booktitle> <pages> pages 251-258. </pages> <address> STW, Utrecht, </address> <month> March </month> <year> 1995. </year> <month> 8 </month>
Reference-contexts: The advantage of this method is that it produces smaller trace files and is much less intrusive than Netzer's. In [LAV94] the ROLT method was shown to be better than [Net93]. Originally, the ROLT method was implemented for operations with large granularity (monitor operations) and in <ref> [RLB95] </ref> the method was tested for individual memory accesses. This was done by simulating the ROLT method with a multiprocessor simulator. To enforce a faithful replay, we have to trace the accesses to all shared resources (memory, disks, screen, network, ...) during the record phase.
References-found: 7

