URL: http://www.win.tue.nl/cs/tt/jaco/papers/brp.ps.Z
Refering-URL: http://www.win.tue.nl/cs/tt/jaco/papers/
Root-URL: http://www.win.tue.nl
Email: e-mail: jfg@phil.ruu.nl, jaco@phil.ruu.nl  
Title: A Bounded Retransmission Protocol for Large Data Packets A Case Study in Computer Checked Algebraic Verification  
Author: Jan Friso Groote Jaco van de Pol 
Address: Netherlands  
Affiliation: Dept. of Philosophy, Utrecht University, The  
Abstract: A protocol is described for the transmission of large data packets over unreliable channels. The protocol splits each data packet and broadcasts it in parts. In case of failure of transmission, only a limited number of retries are allowed (bounded retransmission), hence the protocol may give up the delivery of a part of the packet. Both the sending and the receiving client are informed adequately. This protocol is used in one of Philips' products. We used CRL as formal framework, a combination of process algebra and abstract data types. The protocol and its external behaviour are specified in CRL. The correspondence between these is shown using the proof theory of CRL. The whole proof of this correspondence has been computer checked using the proof checker Coq. This provides an example showing that proof checking of realistic protocols is feasible within the setting of process algebras. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: It is our belief that such hints can steer the theory towards a situation where it can effectively be used at acceptable cost. Therefore, we have started to specify and verify instances of simple distributed systems, using process algebra. Around 1990 it was realised that process algebraic languages <ref> [1, 14] </ref> lack a sufficiently precise treatment of data. Up till that moment it seemed sufficient for verification purposes to use standard data types and the generally accepted common sense knowledge about them. <p> These two results imply the theorem. fi 5 Calculations In this section we give the calculations that were needed in the correctness proof. All calculations fall within the proof theory developed in [7] including the branching o -laws mentioned in <ref> [1] </ref>. Lemma 5.1 establishes the link between the process equations (I) and the BRP protocol. Items 1 and 2 are explained in the previous section. The goals are item 17 and 18; all other items are needed in the proof. The proof is in fact by unfolding the equations. <p> These axioms form the basic theory that has been provided to the theorem prover Coq. We do not explain the axioms (see <ref> [1, 7] </ref>) but only include them to give an exact and complete overview of the axioms that we used. 12 The axiom SC4 is a direct consequence of SC3 and Handshaking. Axiom CD2 is implied by CD1 and SC3.
Reference: [2] <author> M. Bezem, R. Bol, and J.F. Groote. </author> <title> Formalizing process algebraic verifications in the calculus of constructions. </title> <type> Technical Report 95-02, </type> <institution> Eindhoven University of Technology, </institution> <month> January </month> <year> 1995. </year> <note> To appear in Formal Aspects of Computing. </note>
Reference-contexts: The next step was to define a proof theory that enabled to prove distributed systems correct [7]. From this point on CRL was ready for its usability test. Several distributed systems have now been proved correct <ref> [2, 3, 5, 12] </ref>. These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct. <p> These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct. Therefore, we think it necessary to check the correctness proofs with automated proof checkers <ref> [15, 16, 12, 2] </ref>. Verification of the BRP. The Bounded Retransmission Protocol of Philips is an example of a distributed system which relies heavily on data. It is a simplified variant of a telecommunication protocol that is used in one of Philips' products. <p> As we will show, this part lends itself very naturally to term rewriting and hence to automated proof checking. Finally, the whole correctness proof has been proof checked using the system Coq [4] along the lines set out in [15, 16] (see also <ref> [2] </ref>). This guarantees the highest degree of correctness that can be reached nowadays. We think that we can safely claim that all lemmas and theorems in this document are correct and that they can be proved correct using only the axioms mentioned in this document. <p> So the RSP axiom is a fourth order object in Coq. Reusable part of the verification. We refer to [15] for a detailed explanation how the syntax, axioms and rules of CRL can be incorporated in Coq. We reused vernacular code from <ref> [2] </ref> for a lot of standard facts of process algebra. The files with vernacular commands are available and can be obtained by contacting the second author. Recursive processes are defined by adding a constant for the process and putting the defining equation as an axiom.
Reference: [3] <author> M.A. Bezem and J.F. Groote. </author> <title> A correctness proof of a one-bit sliding window protocol in CRL. </title> <journal> The Computer Journal, </journal> <volume> 37(4) </volume> <pages> 289-307, </pages> <year> 1994. </year>
Reference-contexts: The next step was to define a proof theory that enabled to prove distributed systems correct [7]. From this point on CRL was ready for its usability test. Several distributed systems have now been proved correct <ref> [2, 3, 5, 12] </ref>. These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct.
Reference: [4] <author> G. Dowek, A. Felty, H. Herbelin, G. Huet, C. Murthy, C. Parent, C. Paulin-Mohring, and B. Werner. </author> <title> The Coq proof assistant user's guide. Version 5.8. </title> <type> Technical report, </type> <institution> INRIA - Roc-quencourt, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: As we will show, this part lends itself very naturally to term rewriting and hence to automated proof checking. Finally, the whole correctness proof has been proof checked using the system Coq <ref> [4] </ref> along the lines set out in [15, 16] (see also [2]). This guarantees the highest degree of correctness that can be reached nowadays. <p> Furthermore, both cases use 9 or 12, depending on whether last (l) holds or not. fi 6 Mechanical Proof Checking using Coq V5.8.2 About Coq. The verification of the correctness proof has been carried out in the theorem prover Coq V5.8.2 <ref> [4] </ref>. This system is designed as a proof checker and is not an automated theorem prover. The user can enter tactics (called vernacular code), which enable Coq to reproduce the proof.
Reference: [5] <author> J.F. </author> <title> Groote and H.P. Korver. A correctness proof of the bakery protocol in CRL. </title> <editor> In A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors, </editor> <booktitle> Proc. 1st Workshop on the Algebra of Communicating Processes (ACP'94), Utrecht, Workshops in Computing, </booktitle> <pages> pages 63-86. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The next step was to define a proof theory that enabled to prove distributed systems correct [7]. From this point on CRL was ready for its usability test. Several distributed systems have now been proved correct <ref> [2, 3, 5, 12] </ref>. These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct.
Reference: [6] <author> J.F. Groote and A. Ponse. </author> <title> The syntax and semantics of CRL. </title> <type> Technical Report CS-R9076, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Given the additional requirement that specifications in such a language should be suited for handling by computer based tools, the language CRL (micro Common Representation Language) was born. This is a simple, semantically clear and completely formally defined language based on process algebra that incorporates data <ref> [6] </ref>. The next step was to define a proof theory that enabled to prove distributed systems correct [7]. From this point on CRL was ready for its usability test. Several distributed systems have now been proved correct [2, 3, 5, 12]. These experiments have revealed several problems.
Reference: [7] <author> J.F. Groote and A. Ponse. </author> <title> Proof theory for CRL: a language for processes with data. In D.J. Andrews, </title> <editor> J.F. Groote, and C.A. Middelburg, editors, </editor> <booktitle> Proc. of the Int. Workshop on Semantics of Specification Languages, </booktitle> <pages> pages 232-251. </pages> <booktitle> Workshops in Computing, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This is a simple, semantically clear and completely formally defined language based on process algebra that incorporates data [6]. The next step was to define a proof theory that enabled to prove distributed systems correct <ref> [7] </ref>. From this point on CRL was ready for its usability test. Several distributed systems have now been proved correct [2, 3, 5, 12]. These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. <p> These two results imply the theorem. fi 5 Calculations In this section we give the calculations that were needed in the correctness proof. All calculations fall within the proof theory developed in <ref> [7] </ref> including the branching o -laws mentioned in [1]. Lemma 5.1 establishes the link between the process equations (I) and the BRP protocol. Items 1 and 2 are explained in the previous section. The goals are item 17 and 18; all other items are needed in the proof. <p> These axioms form the basic theory that has been provided to the theorem prover Coq. We do not explain the axioms (see <ref> [1, 7] </ref>) but only include them to give an exact and complete overview of the axioms that we used. 12 The axiom SC4 is a direct consequence of SC3 and Handshaking. Axiom CD2 is implied by CD1 and SC3.
Reference: [8] <author> J.F. Groote and J.C. van de Pol. </author> <title> A bounded retransmission protocol for large data packets. </title> <type> Technical Report Logic Group Preprint Series No. 100, </type> <institution> Utrecht University, </institution> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Parts of these proofs are machine checked. A more recent approach can be found in [9]. Here an abstract interpretation is given, with the help of a theorem prover. The abstract protocol, which has a finite state space, could be verified by a model checker. Our work <ref> [8] </ref> precedes these two approaches. We feel that our approach has several merits. The description of the protocol is very compact (it fits in one page, instead of eleven pages in [9]) and completely formal. Furthermore, we give a compact, perspicuous and intuitive correctness proof.
Reference: [9] <author> K. Havelund and N. Shankar. </author> <title> Experiments in theorem priving and model checking for protocol verification. </title> <note> Obtainable via http://www.csl.sri.com/shankar/shankar.html, 1995. </note>
Reference-contexts: Large parts of the verification can be reused for other protocols. Discussion. The same protocol has been studied in the setting of I/O-automata [10]. Several invariants, safety, deadlock freeness and liveness results are proven. Parts of these proofs are machine checked. A more recent approach can be found in <ref> [9] </ref>. Here an abstract interpretation is given, with the help of a theorem prover. The abstract protocol, which has a finite state space, could be verified by a model checker. Our work [8] precedes these two approaches. We feel that our approach has several merits. <p> The abstract protocol, which has a finite state space, could be verified by a model checker. Our work [8] precedes these two approaches. We feel that our approach has several merits. The description of the protocol is very compact (it fits in one page, instead of eleven pages in <ref> [9] </ref>) and completely formal. Furthermore, we give a compact, perspicuous and intuitive correctness proof. Finally, the correctness criterion is highly informative, because the protocol is proved equivalent to a straightforward description, representing the external behaviour of the protocol. Here equivalence (branching bisimulation) means that there is no observable difference.
Reference: [10] <author> L. Helmink, M.P.A. Sellink, and F.W. Vaandrager. </author> <title> Proof-checking a data link protocol. In H.P. </title> <editor> Barendregt and T. Nipkow, editors, </editor> <booktitle> Proc. of the 1st International Workshop "Types for Proofs and Programs", </booktitle> <month> may </month> <year> 1993, </year> <booktitle> volume 806 of LNCS, </booktitle> <pages> pages 127-165, </pages> <address> Nijmegen, </address> <year> 1994. </year>
Reference-contexts: Apart from a rigorous discipline, the verification yields a term rewriting system to compute the expansion of parallel processes in an optimal way. Large parts of the verification can be reused for other protocols. Discussion. The same protocol has been studied in the setting of I/O-automata <ref> [10] </ref>. Several invariants, safety, deadlock freeness and liveness results are proven. Parts of these proofs are machine checked. A more recent approach can be found in [9]. Here an abstract interpretation is given, with the help of a theorem prover.
Reference: [11] <author> ISO. </author> <title> Information processing systems open systems interconnection - LOTOS a formal description technique based on the temporal ordering of observational behaviour ISO/TC97/SC21/N DIS8807, </title> <year> 1987. </year>
Reference-contexts: Up till that moment it seemed sufficient for verification purposes to use standard data types and the generally accepted common sense knowledge about them. This route had already been abandoned by developers of specification languages as they had experienced that commonly accepted data types do not exist (see e.g. <ref> [11, 13] </ref>). Therefore, abstract data types were added to process algebra. Given the additional requirement that specifications in such a language should be suited for handling by computer based tools, the language CRL (micro Common Representation Language) was born.
Reference: [12] <author> H. Korver and J. Springintveld. </author> <title> A computer-checked verification of Milner's scheduler. </title> <editor> In M. Hagiya and J.C. Mitchell, editors, </editor> <booktitle> Proc. of the Int. Symp. on Theoretical Aspects of Computer Software, volume 789 of LNCS, </booktitle> <pages> pages 161-178, </pages> <address> Sendai, Japan, April 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The next step was to define a proof theory that enabled to prove distributed systems correct [7]. From this point on CRL was ready for its usability test. Several distributed systems have now been proved correct <ref> [2, 3, 5, 12] </ref>. These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct. <p> These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct. Therefore, we think it necessary to check the correctness proofs with automated proof checkers <ref> [15, 16, 12, 2] </ref>. Verification of the BRP. The Bounded Retransmission Protocol of Philips is an example of a distributed system which relies heavily on data. It is a simplified variant of a telecommunication protocol that is used in one of Philips' products.
Reference: [13] <author> S. Mauw. </author> <title> PSF A Process Specification Formalism. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Up till that moment it seemed sufficient for verification purposes to use standard data types and the generally accepted common sense knowledge about them. This route had already been abandoned by developers of specification languages as they had experienced that commonly accepted data types do not exist (see e.g. <ref> [11, 13] </ref>). Therefore, abstract data types were added to process algebra. Given the additional requirement that specifications in such a language should be suited for handling by computer based tools, the language CRL (micro Common Representation Language) was born.
Reference: [14] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, </address> <year> 1989. </year>
Reference-contexts: It is our belief that such hints can steer the theory towards a situation where it can effectively be used at acceptable cost. Therefore, we have started to specify and verify instances of simple distributed systems, using process algebra. Around 1990 it was realised that process algebraic languages <ref> [1, 14] </ref> lack a sufficiently precise treatment of data. Up till that moment it seemed sufficient for verification purposes to use standard data types and the generally accepted common sense knowledge about them.
Reference: [15] <author> M.P.A. </author> <title> Sellink. Verifying process algebra proofs in type theory. In D.J. Andrews, </title> <editor> J.F. Groote, and C.A. Middelburg, editors, </editor> <booktitle> Proc. of the Int. Workshop on Semantics of Specification Languages, Utrecht 1993, Workshops in Computing, </booktitle> <pages> pages 315-339. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct. Therefore, we think it necessary to check the correctness proofs with automated proof checkers <ref> [15, 16, 12, 2] </ref>. Verification of the BRP. The Bounded Retransmission Protocol of Philips is an example of a distributed system which relies heavily on data. It is a simplified variant of a telecommunication protocol that is used in one of Philips' products. <p> As we will show, this part lends itself very naturally to term rewriting and hence to automated proof checking. Finally, the whole correctness proof has been proof checked using the system Coq [4] along the lines set out in <ref> [15, 16] </ref> (see also [2]). This guarantees the highest degree of correctness that can be reached nowadays. We think that we can safely claim that all lemmas and theorems in this document are correct and that they can be proved correct using only the axioms mentioned in this document. <p> So the RSP axiom is a fourth order object in Coq. Reusable part of the verification. We refer to <ref> [15] </ref> for a detailed explanation how the syntax, axioms and rules of CRL can be incorporated in Coq. We reused vernacular code from [2] for a lot of standard facts of process algebra. The files with vernacular commands are available and can be obtained by contacting the second author.
Reference: [16] <author> M.P.A. </author> <title> Sellink. Computer-Aided Verification of Protocols, The Type Theoretic Approach. </title> <type> Phd thesis, </type> <institution> Utrecht University, </institution> <month> February </month> <year> 1996. </year> <month> Forthcoming. 15 </month>
Reference-contexts: These experiments have revealed several problems. The most important is that proofs contain very many trivial steps. For human beings it is hard to guarantee that all these steps are correct. Therefore, we think it necessary to check the correctness proofs with automated proof checkers <ref> [15, 16, 12, 2] </ref>. Verification of the BRP. The Bounded Retransmission Protocol of Philips is an example of a distributed system which relies heavily on data. It is a simplified variant of a telecommunication protocol that is used in one of Philips' products. <p> As we will show, this part lends itself very naturally to term rewriting and hence to automated proof checking. Finally, the whole correctness proof has been proof checked using the system Coq [4] along the lines set out in <ref> [15, 16] </ref> (see also [2]). This guarantees the highest degree of correctness that can be reached nowadays. We think that we can safely claim that all lemmas and theorems in this document are correct and that they can be proved correct using only the axioms mentioned in this document. <p> The division between free constructors and functions was done by hand. In order to check that these definitions coincide with the algebraic specification, the equalities in the specification were proved with induction. Note that the proof theory of CRL already incorporates induction. See also <ref> [16] </ref>. This approach is advantageous, as Coq highly supports induction and primitive recursion over inductively defined sets. Furthermore, equality between terms of these sorts coincides with Coq's meta-equality, and can be checked by the system immediately.
References-found: 16

