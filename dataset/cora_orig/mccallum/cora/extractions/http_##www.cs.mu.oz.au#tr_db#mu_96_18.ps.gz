URL: http://www.cs.mu.oz.au/tr_db/mu_96_18.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Email: email: fchesson, ljjg@cs.mu.OZ.AU  
Title: FLUID: Specifying Control and Data Flow for User Interfaces  
Author: Paul Chesson and Lorraine Johnston 
Keyword: User Interface, Dialogue Specification, Requirements.  
Address: Parkville, Australia, 3052  
Affiliation: Department of Computer Science The University of Melbourne  
Abstract: This paper proposes a language for specifying interactive dialogue between a user and an application. Components used to specify the behaviour of the user interface are grouped around natural language requirements. These requirements are formally expressed using a combination of look-up tables and simple coloured petri-nets. They are combined in a hierarchical structure which propagates events between the user and the application, providing communication flow of control and data. Interaction between requirements is defined by passing, blocking, and generating new events. This provides constraints and abstractions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.A. Carr, N. Jog, H.P. Kumar, M. Teittinen, and C. Alberg. </author> <title> Using Interaction Ob ject Graphs to specify and develop graphical widgets. </title> <type> Technical Report CAR-TR-734, </type> <institution> University of Maryland, College Park, MD, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: Approaches 1, 2, and 3 can cause a measure of separation of the components of each requirement (state, events, and rules), and may need to be detailed in different parts of the specification. Approach 4 (based around ideas from Statecharts [3] and also adopted for user interfaces <ref> [1] </ref>) is the better solution for our objectives, being more concise and keeping components localised. Nevertheless, in all four approaches, requirements remain coupled to the rest of the specification structure and need to be understood within this context when constructing and reading it.
Reference: [2] <author> P.D. Gray and C.W. Johnson. </author> <title> Requirements for the next generation of user interface specification languages. </title> <editor> In P. Palanque and R. Bastide, editors, </editor> <booktitle> Proceedings of The Design, Specification And Verification Of Interactive Systems, </booktitle> <pages> pages 113-133, </pages> <address> Berlin, Germany, 1995. </address> <publisher> Springer-Verlag. </publisher> <pages> 8 </pages>
Reference: [3] <author> D. Harel, A. Pnueli, J.P. Schmidt, and R. Sherman. </author> <title> On the formal semantics of state charts. </title> <booktitle> In IEEE Proc. 2nd Symp. on Logic in Computer Science, </booktitle> <pages> pages 54-64, </pages> <address> Ithaca, New York, </address> <month> June </month> <year> 1987. </year> <journal> The Computer Society of the IEEE. </journal>
Reference-contexts: Approaches 1, 2, and 3 can cause a measure of separation of the components of each requirement (state, events, and rules), and may need to be detailed in different parts of the specification. Approach 4 (based around ideas from Statecharts <ref> [3] </ref> and also adopted for user interfaces [1]) is the better solution for our objectives, being more concise and keeping components localised. Nevertheless, in all four approaches, requirements remain coupled to the rest of the specification structure and need to be understood within this context when constructing and reading it.
Reference: [4] <author> K. Jensen. </author> <title> Coloured Petri Nets, Volume 1: Basic Concepts. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1992. </year>
Reference-contexts: Secondly, there is no way of storing data values which are associated with some events. Lastly, needless duplication of instances of the same entity can occur. A number of possible extensions could be adopted, however the use of coloured petri nets <ref> [4] </ref> overcomes all these limitations with minimum effort. is part of the "Icons" sub-dialogue net from the example introduced in Section 3. The net shows the icons for the Polyline and Box drawing modes represented by tokens, each with a corresponding colour (data value) initially assigned to it.
Reference: [5] <author> A. Monk, M. Curry, and P. Wright. </author> <title> Why industry doesn't use the wonderful notations we researchers have given them to reason about their designs. </title> <editor> In D. Gilmore, editor, </editor> <booktitle> User-centred requirements for software engineering, </booktitle> <pages> pages 253-261, </pages> <address> Berlin, Germany, 1993. </address> <publisher> Springer-Verlag. </publisher> <pages> 9 </pages>
Reference-contexts: Gray and Johnson ([2]) point out that the low salience of temporal logic inhibits the ease of understanding the dynamic interactive behaviour of the interface. In addition, the investment required for learning formal notations is perceived as counterproductive by industry <ref> [5] </ref>.
References-found: 5

