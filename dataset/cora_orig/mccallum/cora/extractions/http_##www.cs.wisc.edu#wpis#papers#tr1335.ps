URL: http://www.cs.wisc.edu/wpis/papers/tr1335.ps
Refering-URL: http://www.cs.wisc.edu/wpis/papers/
Root-URL: 
Email: E-mail: -reps, manuvir, larus-@cs.wisc.edu.  E-mail: tball@research.bell-labs.com.  
Title: The Use of Program Profiling for Software Maintenance with Applications to the Year 2000 Problem  
Author: Thomas Reps, Thomas Ball, Manuvir Das, and James Larus 
Address: 1210 W. Dayton St., Madison, WI 53706.  1000 E. Warrenville Road, P.O. Box 3013, Naperville, IL 60566-7013.  
Affiliation: Computer Sciences Department, University of Wisconsin-Madison,  Lucent Technologies,  
Note: The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the above government agencies or the U.S. Government. The Wisconsin Alumni Research Foundation is in the process of seeking patent protection for the ideas described herein.  
Abstract: This paper describes new techniques to help with testing and debugging, using information obtained from path profiling. A path profiler instruments a program so that the number of times each different loop-free path executes is accumulated during an execution run. With such an instrumented program, each run of the program generates a path spectrum for the executiona distribution of the paths that were executed during that run. A path spectrum is a finite, easily obtainable characterization of a program's execution on a dataset, and provides a behavior signature for a run of the program. Our techniques are based on the idea of comparing path spectra from different runs of the program. When different runs produce different spectra, the spectral differences can be used to identify paths in the program along which control diverges in the two runs. By choosing input datasets to hold all factors constant except one, the divergence can be attributed to this factor. The point of divergence itself may not be the cause of the underlying problem, but provides a starting place for a programmer to begin his exploration. One application of this technique is in the Year 2000 Problem (i.e., the problem of fixing computer systems that use only 2-digit year fields in date-valued data). In this context, path-spectrum comparison provides a heuristic for identifying paths in a program that are good candidates for being date-dependent computations. The application of path-spectrum comparison to a number of other software-maintenance issues is also discussed. * This work was supported in part by the National Science Foundation under grants CCR-9625667, MIP-9625558, and NYI Award CCR-9357779 (with support from Hewlett Packard and Sun Microsystems), and by the Defense Advanced Research Projects Agency (monitored by the Office of Naval Research under contracts N00014-92-J-1937 and N00014-97-1-0114, and by Wright Laboratory Avionics Directorate, Air Force Material Command, USAF, under grant #F33615-94-1-1525). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Abramson, D., Foster, I., Michalakes, J., and Sosic, R., </author> <title> Relative debugging: A new methodology for debugging scientific applications, </title> <journal> Commun. of the ACM 39(11) pp. </journal> <month> 68-77 (November </month> <year> 1996). </year>
Reference-contexts: There is a distant relationship between some of the techniques proposed in Section 6 and previous work on testing and debugging: Relative debugging allows programmers to compare the execution behaviors of multiple instances of the same program <ref> [1] </ref>. The setting for relative debugging is the porting of code (usually Fortran) from one platform (hardware/OS) to another. Because of differences in hardware and/or numerical libraries, the same program may exhibit different behaviors on different platforms.
Reference: 2. <author> Backman, T., </author> <title> Summary of the MITRE assessment on the effects of two-digit years for the year 2000, The MITRE Corporation, </title> <address> McLean, </address> <note> VA (January 1996). (Available on the WWW at URL http://www.mitre.org:80/research/y2k/docs/BRIEF.html.) </note>
Reference-contexts: that incorporates automated components could conceivably be affected, including telephone and electrical power systems, industrial plants, nuclear power plants, defense early-warning systems, logistics and planning systems, and 1 Overow in the ANSI C library occurs on 1/1/2010; in the UNIX time function on 9/30/2034; and in UNIX systems on 1/19/2038 <ref> [2] </ref>. - 3 - weapons systems. <p> Example. The solid arrows in the diagram below show the trie for the pre-2000 spectrum. - 7 - The dotted edges show path [a, b, d, g] <ref> (which occurs during the post-2000 run) </ref>. The shortest prefix of [a, b, d, g] that is not a prefix of any path executed during the pre-2000 run is [a, b, d]. 3.1. <p> This is not the case for some post-2000 runs. For instance, for runs during which the system clock is set so that cur-rent_year () returns a value in the range 00 to 14 <ref> (representing a year in the range 2000 to 2014) </ref>, the value of age will always be less than 15, and thus region c will never be executed. <p> expected not to involve leap-year calculations (e.g., cal 2 1997, cal 2 1998, etc.). - 17 - char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon [9] = 30; switch ((jan1 (y+1)+7-d)%7) - /* * non-leap year */ case 1: mon <ref> [2] </ref> = 28; break; /* */ default: mon [9] = 19; break; /* * leap year */ case 2: foo = foo + 1; /* Statement added so that something in the leap-year case could be highlighted */ break; - d += mon [i]; s += 3*d; cal 2 1997 run.
Reference: 3. <author> Bala, V., </author> <title> Low overhead path profiling, </title> <type> Technical Report, </type> <institution> Hewlett Packard Labs (1996). </institution>
Reference: 4. <author> Ball, T., </author> <title> Efficiently counting program events with support for on-line queries, </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <pages> 16(5) pp. </pages> <month> 1399-1410 (September </month> <year> 1994). </year>
Reference: 5. <author> Ball, T. and Larus, J., </author> <title> Efficient path profiling, </title> <booktitle> in Proceedings of MICRO-29, </booktitle> <month> (December </month> <year> 1996). </year>
Reference-contexts: Path profiling in programs with loops is typically carried out by considering loop-free segments of the program. See Section 4.1 or reference <ref> [5] </ref> for more discussion of this issue.) For purposes of this example, assume that years are represented with only two digits and that no person recorded in the database who is younger than fifteen years old possesses a college degree. <p> profiling is the case where the paths tabulated are all of length 1; node profiling is the case where the paths tabulated are all of length 0. - 10 - report that execution-time overheads on the order of only 30-40% can be achieved with their method for collecting path profiles <ref> [5] </ref>. Their work relies on a particular method for numbering the paths in the program, the main points of which are described in Section 4.1. <p> The published results of Ball and Larus suggest that the answer to this question is no. They report that some of the SPEC benchmarks had approximately 10 9 11 paths, of which only 10 4 were ever executed on a given run <ref> [5] </ref>. Although not all of the possible paths are necessarily feasible, it could be necessary to run 10 5 7 tests (and probably far more) to achieve a high degree of coverage.
Reference: 6. <author> Benedusi, P., Benvenuto, V., and Tomacelli, L., </author> <title> The role of testing and dynamic analysis in program comprehension supports, pp. </title> <booktitle> 149-158 in Proceedings of the Second IEEE Workshop on Program Comprehension, </booktitle> <month> (July 8-9, </month> <year> 1993, </year> <title> Capri, Italy), </title> <editor> ed. B. Fadini and V. Rajlich, </editor> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC (July 1993). </address>
Reference-contexts: The Docket project has explored ways to use information obtained from testing and dynamic analysis, including information about paths traversed during execution, in tools to support program comprehension <ref> [6] </ref>.
Reference: 7. <author> Chen, Y.-F., Rosenblum, D.S., and Vo, K.-P., TestTube: </author> <title> A system for selective regression testing, </title> <booktitle> in Proceedings of the Sixteenth International Conference on Software Engineering, </booktitle> <address> (May 16-21, 1994, Sorrento, Italy), </address> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC (1994). </address>
Reference-contexts: Relative debugging also supports runtime comparison of a modified program to an older reference program. Dependences between tests and program entities have been used to implement selective regression testing in the TestTube system <ref> [7] </ref>. In this case, there are two different versions of a program, and dependence information gathered from previous tests is used to determine whether a test needs to be rerun on the new version. 8.
Reference: 8. <author> Clarke, L.A., Podgurski, A., Richardson, D.J., and Zeil, S.J., </author> <title> A comparison of data ow path selection criteria, pp. </title> <booktitle> 244-251 in Proceedings of the Eightth International Conference on Software Engineering, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC (1985). </address>
Reference: 9. <author> Gartner Group, </author> <title> Year 2000 Problem Gains National Attention, Gartner Group, Stamford, </title> <address> CT (April 1996). </address> <note> (Available on the WWW at URL http://www.gartner.com/aboutgg/pressrel/pry2000.html.) </note>
Reference-contexts: Cost estimates for correcting the various date problems run as high as $600 billion world-wide <ref> [9] </ref>, $300 billion in the U.S., $30 billion for the Federal government, and $10 billion for the Department of Defensenot to mention an estimated $1 trillion in legal fees in the aftermath. <p> 2 1992, cal 2 1996, etc.) were compared against spectra obtained from runs that we expected not to involve leap-year calculations (e.g., cal 2 1997, cal 2 1998, etc.). - 17 - char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon <ref> [9] </ref> = 30; switch ((jan1 (y+1)+7-d)%7) - /* * non-leap year */ case 1: mon [2] = 28; break; /* */ default: mon [9] = 19; break; /* * leap year */ case 2: foo = foo + 1; /* Statement added so that something in the leap-year case could be <p> 2 1997, cal 2 1998, etc.). - 17 - char *p; - register d, i; register char *s; int foo = 0; d = jan1 (y); mon <ref> [9] </ref> = 30; switch ((jan1 (y+1)+7-d)%7) - /* * non-leap year */ case 1: mon [2] = 28; break; /* */ default: mon [9] = 19; break; /* * leap year */ case 2: foo = foo + 1; /* Statement added so that something in the leap-year case could be highlighted */ break; - d += mon [i]; s += 3*d; cal 2 1997 run.
Reference: 10. <author> Horwitz, S., Reps, T., and Binkley, D., </author> <title> Interprocedural slicing using dependence graphs, </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <pages> 12(1) pp. </pages> <month> 26-60 (January </month> <year> 1990). </year> <month> - 24 </month> - 
Reference: 11. <author> Johnson, </author> <title> S.C., Postloading for fun and profit, pp. </title> <booktitle> 325-330 in Proceedings of the Winter 1990 USENIX Conference, </booktitle> <month> (January </month> <year> 1990). </year>
Reference: 12. <author> Larus, J.R. and Schnarr, E., EEL: </author> <title> Machine-independent executable editing, </title> <booktitle> Proceedings of the ACM SIGPLAN 95 Conference on Programming Language Design and Implementation, </booktitle> <address> (La Jolla, CA, </address> <month> June 18-21, </month> <year> 1995), </year> <journal> ACM SIGPLAN Notices 30(6) pp. </journal> <month> 291-300 (June </month> <year> 1995). </year>
Reference: 13. <author> Ottenstein, K.J. and Ottenstein, L.M., </author> <title> The program dependence graph in a software development environment, </title> <booktitle> Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> (Pittsburgh, PA, </address> <month> Apr. </month> <pages> 23-25, </pages> <year> 1984), </year> <journal> ACM SIGPLAN Notices 19(5) pp. </journal> <month> 177-184 (May </month> <year> 1984). </year>
Reference: 14. <author> Rapps, S. and Weyuker, E.J., </author> <title> Selecting software test data using data ow information, </title> <journal> IEEE Transactions on Software Engineering SE-11(4) pp. </journal> <month> 367-375 (April </month> <year> 1985). </year>
Reference: 15. <author> Reps, T., Horwitz, S., Sagiv, M., and Rosay, G., </author> <title> Speeding up slicing, </title> <booktitle> SIGSOFT 94: Proceedings of the Second ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <address> (New Orleans, LA, </address> <month> December 7-9, </month> <year> 1994), </year> <booktitle> ACM SIGSOFT Software Engineering Notes 19(5) pp. </booktitle> <month> 11-20 (December </month> <year> 1994). </year>
Reference: 16. <author> Roper, M., </author> <title> Software Testing, </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY (1994). </address>
Reference: 17. <author> Sedgewick, R., </author> <title> Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1983). </address>
Reference-contexts: One can find the shortest prefix of a path p that is not a prefix of any executed path in a spectrum S using a trie structure on S <ref> [17] </ref>: The first edge of p that deviates from the trie identifies the edge at which p veers into unknown territory, and the prefix of p, up to and including this edge, is the shortest prefix of p that distinguishes p from S. Example. <p> For instance, see <ref> [17] </ref>, pp. 373-374.) Now consider a path from Start to Exit that has prefix pre, where pre ends at node W , and suppose that the sum of the labels on the edges of pre is c, as shown below: - 14 - All such paths have numbers in the range
Reference: 18. <author> Sneed, H.M. and Ritsch, H., </author> <title> Reverse engineering programs via dynamic analysis, pp. </title> <booktitle> 192-201 in Proceedings of the IEEE Working Conference on Reverse Engineering, </booktitle> <address> (May 21-23, 1993, Baltimore, MD), </address> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC (May 1993). </address>
Reference: 19. <author> Sneed, H.M. and Erdos, K., </author> <title> Extracting business rules from source code, pp. </title> <booktitle> 240-247 in Proceedings of the Fourth IEEE Workshop on Program Comprehension, </booktitle> <address> (March 29-31, 1996, Berlin, Germany), </address> <note> ed. </note> <author> V. Rajlich, A. Cimitile, and H.A. </author> <title> Mueller, </title> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, DC (March 1996). </address>
Reference-contexts: the problem of extracting business rules from programs [18]i.e., high-level requirements on how input data is to be processed, expressed in terms of the application domain (e.g., to be billed after delivery the customer must have a credit rating of at least satisfactory, otherwise, the customer must pay on delivery <ref> [19] </ref>). Information about an input/output value pair, the types of the input and output values, and the path through the program that was executed is used to generate several candidate assertions (viz. possible business rules) that characterize the I/O transformation.
Reference: 20. <author> Srivastava, A. and Eustace, A., </author> <title> AT OM: A system for building customized program analysis tools, </title> <booktitle> Proceedings of the ACM SIGPLAN 94 Conference on Programming Language Design and Implementation, </booktitle> <address> (Orlando, FL, </address> <month> June 22-24, </month> <year> 1994), </year> <journal> ACM SIGPLAN Notices 29(6) pp. </journal> <month> 196-205 (June </month> <year> 1994). </year>
Reference: 21. <author> Weiser, M., </author> <title> Program slicing, </title> <journal> IEEE Transactions on Software Engineering SE-10(4) pp. </journal> <month> 352-357 (July </month> <year> 1984). </year>
Reference: 22. <author> Woodward, M.R., Hedley, D., and Hennell, M.A., </author> <title> Experience with path analysis and testing of programs, </title> <journal> IEEE Tr ansactions on Software Engineering SE-6(3) pp. </journal> <month> 278-286 (May </month> <year> 1980). </year>
References-found: 22

