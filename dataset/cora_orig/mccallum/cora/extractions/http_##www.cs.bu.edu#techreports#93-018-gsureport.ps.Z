URL: http://www.cs.bu.edu/techreports/93-018-gsureport.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (jahama@cs.bu.edu)  (kfoury@cs.bu.edu)  
Title: A General Theory of Semi-Unification  
Author: Said Jahama A.J. Kfoury 
Address: 111 Cummington St., Boston, MA 02215, USA.  111 Cummington St., Boston, MA 02215, USA.  
Note: Partly supported by NSF grant CCR-9113196. Address:  Partly supported by NSF grant CCR-9113196. Address:  
Affiliation: Boston University  Boston University  Department of Computer Science, Boston University,  Department of Computer Science, Boston University,  
Abstract: December 20, 1993 Technical Report: bu-cs # 93-018 Abstract Various restrictions on the terms allowed for substitution give rise to different cases of semi-unification. Semi-unification on finite and regular terms has already been considered in the literature. We introduce a general case of semi-unification where substitutions are allowed on non-regular terms, and we prove the equivalence of this general case to a well-known undecidable data base dependency problem , thus establishing the undecidability of general semi-unification. We present a unified way of looking at the various problems of semi-unification. We give some properties that are common to all the cases of semi-unification. We also the principality property and the solution set for those problems. We prove that semi-unification on general terms has the principality property. Finally, we present a recursive inseparability result between semi-unification on regular terms and semi-unification on general terms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. K. Chandra and M. Y. Vardi. </author> <title> The implication problem for functional and inclusion dependencies is undecidable. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(3):761 - 677, </volume> <year> 1985. </year>
Reference-contexts: It also provides some insight into the reason why semi-unification is undecidable. In this report, we prove the equivalence of general semi-unification to a well known problem in database theory, the so-called functional and inclusion dependency problem. This dependency problem is undecidable (see <ref> [1, 2, 17] </ref>), and hence, we obtain the undecidability of general semi-unification. We also present a metatheory that is common to the different cases of semi-unification. The core of this metatheory is a redex procedure used to transform instances of semi-unification. <p> Proof: Any 2 exterior (T ) is uniquely represented by [] k . Hence, [ ] k is one-to-one. Notice that any 2 [T ] k could be written as = 2 <ref> [ 1 ] </ref> k where 39 j 2 j &lt; j and 1 2 T . <p> Hence, there is a 3 such that 3 2 = f i for some i 2 f1; : : : ; kg. In this case cannot be in exterior ([T ] k ). So, if 2 exterior ([T ] k ) it has to be of the form = <ref> [ 1 ] </ref> k where 1 2 T and 1 2 exterior (T ). Hence, [ ] k is a bijection. Define ['] k : exterior ([T ] k ) ! X [ C by setting ['] k () = '([] k ). <p> By Lemma 31, 2 exterior ([T 1 ] k ) iff = <ref> [ 1 ] </ref> k and either 1 2 exterior (T ) and '( 1 ) = c, or 1 = such that 2 exterior (T ); '() = x; S (x) = (T 2 ; ' 2 ) and 2 exterior (T 2 ). <p> Again by Lemma 31 and by definition of ' k and the definition of [S] k we have, 2 exterior ([T 1 ] k ) iff = <ref> [ 1 ] </ref> k and either [ 1 ] k 2 exterior ([T ] k ) and ' k ([ 1 ] k ) = c, or 1 = such that [] 2 exterior ([T ] k ); ' k ([] k ) = x; [S (x)] k = ([T 2 <p> Again by Lemma 31 and by definition of ' k and the definition of [S] k we have, 2 exterior ([T 1 ] k ) iff = <ref> [ 1 ] </ref> k and either [ 1 ] k 2 exterior ([T ] k ) and ' k ([ 1 ] k ) = c, or 1 = such that [] 2 exterior ([T ] k ); ' k ([] k ) = x; [S (x)] k = ([T 2 ] k ; [' 2 )]
Reference: [2] <author> S.S. </author> <title> Cosmadakis and P.C. Kanellakis. Equational theories and database constraints. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 273 - 284, </pages> <year> 1985. </year>
Reference-contexts: It also provides some insight into the reason why semi-unification is undecidable. In this report, we prove the equivalence of general semi-unification to a well known problem in database theory, the so-called functional and inclusion dependency problem. This dependency problem is undecidable (see <ref> [1, 2, 17] </ref>), and hence, we obtain the undecidability of general semi-unification. We also present a metatheory that is common to the different cases of semi-unification. The core of this metatheory is a redex procedure used to transform instances of semi-unification. <p> Proof: This follows directly from theorem 1 in <ref> [2] </ref>. When only unary FDs are considered, the equational theory described there is equivalent to the equational theory EQ described here. Terms of the equational theory in [2] could be represented as terms as described here. Unary functions corresponding to FDs are the same. <p> Proof: This follows directly from theorem 1 in <ref> [2] </ref>. When only unary FDs are considered, the equational theory described there is equivalent to the equational theory EQ described here. Terms of the equational theory in [2] could be represented as terms as described here. Unary functions corresponding to FDs are the same. Unary functions corresponding to INDs are represented as indecies here. For example given a term ia where i is an IND and a is a variable it is represented as a i here. <p> Unary functions corresponding to INDs are represented as indecies here. For example given a term ia where i is an IND and a is a variable it is represented as a i here. This representation 31 eliminates the need for the commutativity rule given in <ref> [2] </ref>. Now, given this correspondence between the two equational theories, it is readily checked that the inference rules in both generate an equivalent set of equations. <p> Notice that still contains INDs and unary FDs. We still call this case restricted dependency. This special case of dependency is shown to be undecidable in <ref> [2] </ref>. We show that restricted dependency is equivalent to general semi-unification. <p> The set of variables occurring in 0 is X E 00 fc 1 ; c 2 g. From the above we can conclude the following lemma. Lemma 25 j= A B iff the corresponding instance of general semi unification 0 has no solution. Lemma 26 <ref> [2] </ref> Let be an instance of restricted dependency.
Reference: [3] <author> S.S. </author> <title> Cosmadakis and P.C. Kanellakis. Functional and inclusion dependencies: A graph theoretic approach. In P.C. </title> <editor> Kanellakis and F. Preparata, editors, </editor> <booktitle> Advances in Computing Research, </booktitle> <pages> pages 164 - 185. </pages> <publisher> JAI Press, </publisher> <year> 1986. </year> <month> 52 </month>
Reference-contexts: In what follows we adapt the definitions of <ref> [3] </ref>. A relation scheme is an object R [U ], where R is the name of the relation scheme and U a finite set of attributes fA 1 ; A 2 ; ; A n g.
Reference: [4] <author> J. Dorre and W. </author> <title> Rounds. On subsumption and semi-unification in fea-ture algebras. </title> <booktitle> In Proceedings of IEEE 5th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 300 - 310, </pages> <year> 1990. </year>
Reference-contexts: Regular semi-unification has been considered in the literature in connection with the "clause satisfiability problem" in a "feature algebra" (this is a problem considered in computational linguistics, see <ref> [4] </ref>). Both finite and regular semi-unification are undecidable. The proof in the regular case is by a direct reduction from the word problem of finite semi-groups, and is given in [4]. By contrast, finite semi-unification was long believed to be decidable. The undecidability result is given in [13]. <p> in connection with the "clause satisfiability problem" in a "feature algebra" (this is a problem considered in computational linguistics, see <ref> [4] </ref>). Both finite and regular semi-unification are undecidable. The proof in the regular case is by a direct reduction from the word problem of finite semi-groups, and is given in [4]. By contrast, finite semi-unification was long believed to be decidable. The undecidability result is given in [13]. The proof of this result is fairly technical and complicated, based on a specialized undecidability result about Turing machines established in the early 1960's [9]. <p> Section 5 gives the definition of regular semi-unification and relates it to clause satisfiability in a feature algebra. Section 5 also contains an outline of a reduction given in <ref> [4] </ref> from the word problem of semi-groups to the clause satisfiability problem. Section 6 contains a reduction from instances on a k-ary signature to instances on a binary signature. It also contains a reduction from instances with n inequalities to instances with 2 inequalities. <p> The problem relevant to our discussion is, given a set of constraints containing a subsumption preorder, does there exist a finite feature algebra satisfying these constraints? This problem has been shown to be undecidable <ref> [4] </ref> by a reduction from the word problem for finite semi-groups [5]. We now give an outline of the steps of this reduction. <p> finite semi-group 2 fl satisfying all the equations in E also satisfies the equation s = t. * Given a set of equations E and another equation e, construct a set of constraints C E (the details of constructing C E are not relevant here, we refer the reader to <ref> [4] </ref> for the complete construction). * C E has a solution in a finite feature algebra iff there is a finite semi group satisfying all the equations in E but not the equation e. Also, in [4] the problem of whether a set of constraints has a solution in a finite <p> details of constructing C E are not relevant here, we refer the reader to <ref> [4] </ref> for the complete construction). * C E has a solution in a finite feature algebra iff there is a finite semi group satisfying all the equations in E but not the equation e. Also, in [4] the problem of whether a set of constraints has a solution in a finite feature algebra is shown to be equivalent to regular semi-unification 5 . This proves the undecidability of regular semi-unification. <p> that the feature algebra is finite, i.e. the problem now becomes, given a set of constraints containing a subsumption preorder, does there exist a feature algebra satisfying these constraints? This problem can also be shown undecidable by a reduction from the word problem of semi-groups using the same construction in <ref> [4] </ref>. Similarly, this problem can be shown to be equivalent to general semi-unification, again, using the same reduction given in [4] and outlined above. This provides an alternative way of proving the undecidability of general semi-unification. <p> does there exist a feature algebra satisfying these constraints? This problem can also be shown undecidable by a reduction from the word problem of semi-groups using the same construction in <ref> [4] </ref>. Similarly, this problem can be shown to be equivalent to general semi-unification, again, using the same reduction given in [4] and outlined above. This provides an alternative way of proving the undecidability of general semi-unification. <p> Hence, given an instance of regular semi-unification we can 5 In <ref> [4] </ref> they refer to regular semi-unification as semi-unification on rational trees 37 run the redex procedure, presented in Section 3, on . The redex procedure still has a property similar to that given by Lemma 11. <p> Also, using the same construction in <ref> [4] </ref>, there is a 00 such that holds in every semigroup iff 00 has no general solution. Hence, for every which is a member of the set mentioned in Part 1 of Theorem 39, there is a corresponding 00 2 ffi gen .
Reference: [5] <author> Yuri Gurevich and Harry R. Lewis. </author> <title> The word problem for cancellation semigroups with zero. </title> <journal> Association for Symbolic Logic, </journal> <volume> 49:184 - 191, </volume> <month> March </month> <year> 1984. </year>
Reference-contexts: We also study the structure of the solution set for the various cases of semi-unification. Two sets A and B are recursively inseparable if there is no recursive set containing A and disjoint from B <ref> [5] </ref>. Notice that recursive inseparability of A and B suffices to show the the nonrecursiveness of both A and B. In this report, we present a recursive inseparability result between the set of instances which have no general solution and the set of instances which have a regular solution. <p> The problem relevant to our discussion is, given a set of constraints containing a subsumption preorder, does there exist a finite feature algebra satisfying these constraints? This problem has been shown to be undecidable [4] by a reduction from the word problem for finite semi-groups <ref> [5] </ref>. We now give an outline of the steps of this reduction. <p> In what follows ,we extend the relation between ffi reg and ffi gen . Two (disjoint) sets A and B are recursively inseparable if there is no recursive set containing A and disjoint from B [20]. The following lemma is taken from <ref> [5] </ref>. Lemma 39 Let range over alphabets containing the symbols 0 and A 0 , and let x i and y i range over words in fl .
Reference: [6] <author> F. Henglein. </author> <title> Type inference and semi-unification. </title> <booktitle> In ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pages 184 - 197, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Several special cases of finite semi-unification have been shown to be decidable. We list here some of those decidable special cases of finite semi-unification. Finite semi-unification on instances with exactly one inequality has been shown to be decidable <ref> [6, 10, 18] </ref>. Furthermore, in [10] a polynomial time decision procedure is given. Acyclic semi-unification is shown to be DEXPTIME-complete in the case of finite semi-unification [12]. <p> In the finite case, it has been shown in <ref> [6, 13] </ref> that the principality property holds. We show that it holds also in the general case. However, in the regular case, it is still open whether this property holds. <p> In the finite case the proof is given in <ref> [6, 13] </ref>. For the general case the proof is given in this report (Corollary 17).
Reference: [7] <author> F. Henglein. </author> <title> Fast left-linear semi-unification. </title> <booktitle> In Proceedings of International Conference on Computing and Information, </booktitle> <pages> pages 32 - 36, </pages> <address> Toronto, May 1990. </address> <publisher> Canadian Scholar's Press Inc. </publisher>
Reference-contexts: Furthermore, in [10] a polynomial time decision procedure is given. Acyclic semi-unification is shown to be DEXPTIME-complete in the case of finite semi-unification [12]. In [11], an exponential procedure is given to show that left linear semi-unification is decidable, this result was improved in <ref> [7] </ref> where a polynomial procedure is given. Instances over 2 variables is also decidable in the finite case [15]. In addition, see [16] where another special case of finite semi-unification is shown to be decidable. 2 Regular terms are terms with finitely many unequal subterms. <p> The proof of this fact in this case is a bit more involved than the case with k = 1. Other decidable cases for finite semi-unification are discussed in <ref> [7, 11, 15] </ref>. 46 7 Comparing The Problems of Semi-Unification In this section we present a comparative study between the three cases of semi-unification. We study the properties of the solution set for each case. We also discuss the principality property for each case.
Reference: [8] <author> F. Henglein. </author> <title> Type inference with polymorphic recursion. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(2) </volume> <pages> 254-290, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, it has been shown in <ref> [8, 14] </ref> that the general form of finite semi-unification is equivalent to the type reconstruction problem for ML with polymorphic recursion. Finite semi-unification has also been studied in connection with Kriesel's conjecture on the length of proofs in Peano Arithmetic (see [18]).
Reference: [9] <author> P.K. Hooper. </author> <title> The undecidability of the Turing machine immortality problem. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 31(2):219 - 234, </volume> <year> 1966. </year>
Reference-contexts: By contrast, finite semi-unification was long believed to be decidable. The undecidability result is given in [13]. The proof of this result is fairly technical and complicated, based on a specialized undecidability result about Turing machines established in the early 1960's <ref> [9] </ref>. Several special cases of finite semi-unification have been shown to be decidable. We list here some of those decidable special cases of finite semi-unification. Finite semi-unification on instances with exactly one inequality has been shown to be decidable [6, 10, 18].
Reference: [10] <author> D. Kapur, D. Musser, P. Narendran, and J. Stillman. </author> <title> Semi-unification. </title> <editor> In Nori and Kumar, editors, </editor> <booktitle> Proceedings of 8th Conference on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <volume> LNCS 338, </volume> <pages> pages 435 - 454. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Finite semi-unification and restrictions on it have been considered in connection with many research problems. We mention here some of these research areas. A sufficient condition for a rewrite rule to be non-terminating can be formulated as an instance of finite semi-unification with exactly one inequality (see <ref> [10, 19] </ref>). <p> Several special cases of finite semi-unification have been shown to be decidable. We list here some of those decidable special cases of finite semi-unification. Finite semi-unification on instances with exactly one inequality has been shown to be decidable <ref> [6, 10, 18] </ref>. Furthermore, in [10] a polynomial time decision procedure is given. Acyclic semi-unification is shown to be DEXPTIME-complete in the case of finite semi-unification [12]. <p> Several special cases of finite semi-unification have been shown to be decidable. We list here some of those decidable special cases of finite semi-unification. Finite semi-unification on instances with exactly one inequality has been shown to be decidable [6, 10, 18]. Furthermore, in <ref> [10] </ref> a polynomial time decision procedure is given. Acyclic semi-unification is shown to be DEXPTIME-complete in the case of finite semi-unification [12]. In [11], an exponential procedure is given to show that left linear semi-unification is decidable, this result was improved in [7] where a polynomial procedure is given. <p> This makes all 3 problems decidable, the reason for that is given later in this report. As in the case when k = 1, all 3 problems of semi-unification are decidable for n = 1. The proof in the finite case is given in <ref> [10] </ref>. In the other cases this is due to the fact that if an instance with one inequality has a general solution then it will have a regular one. The proof of this fact in this case is a bit more involved than the case with k = 1.
Reference: [11] <author> A.J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> Computational consequences and partial solutions of a generalized unification problem. </title> <booktitle> In Proceedings of IEEE 4th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 98 - 105, </pages> <year> 1989. </year>
Reference-contexts: Finite semi-unification on instances with exactly one inequality has been shown to be decidable [6, 10, 18]. Furthermore, in [10] a polynomial time decision procedure is given. Acyclic semi-unification is shown to be DEXPTIME-complete in the case of finite semi-unification [12]. In <ref> [11] </ref>, an exponential procedure is given to show that left linear semi-unification is decidable, this result was improved in [7] where a polynomial procedure is given. Instances over 2 variables is also decidable in the finite case [15]. <p> The proof of this fact in this case is a bit more involved than the case with k = 1. Other decidable cases for finite semi-unification are discussed in <ref> [7, 11, 15] </ref>. 46 7 Comparing The Problems of Semi-Unification In this section we present a comparative study between the three cases of semi-unification. We study the properties of the solution set for each case. We also discuss the principality property for each case.
Reference: [12] <author> A.J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> An analysis of ML typability. </title> <editor> In Arnold, editor, </editor> <booktitle> 15th Colloquium on Trees in Algebra and Programming, CAAP 90, </booktitle> <volume> LNCS 431, </volume> <pages> pages 206 - 220. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The type reconstruction problem for ML is known to be equivalent to a special case of finite semi-unification where the instance satisfies some acyclicity conditions <ref> [12] </ref>. 1 Given a pair of terms (t; u), unification is the problem of finding a substitution S such that S (t) = S (u), while matching is the problem of finding a substitution S such that S (t) = u. <p> Finite semi-unification on instances with exactly one inequality has been shown to be decidable [6, 10, 18]. Furthermore, in [10] a polynomial time decision procedure is given. Acyclic semi-unification is shown to be DEXPTIME-complete in the case of finite semi-unification <ref> [12] </ref>. In [11], an exponential procedure is given to show that left linear semi-unification is decidable, this result was improved in [7] where a polynomial procedure is given. Instances over 2 variables is also decidable in the finite case [15].
Reference: [13] <author> A.J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> The undecidability of the semi-unification problem. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, Baltimore, </booktitle> <pages> pages 468 - 476, </pages> <year> 1990. </year> <month> 53 </month>
Reference-contexts: Both finite and regular semi-unification are undecidable. The proof in the regular case is by a direct reduction from the word problem of finite semi-groups, and is given in [4]. By contrast, finite semi-unification was long believed to be decidable. The undecidability result is given in <ref> [13] </ref>. The proof of this result is fairly technical and complicated, based on a specialized undecidability result about Turing machines established in the early 1960's [9]. Several special cases of finite semi-unification have been shown to be decidable. We list here some of those decidable special cases of finite semi-unification. <p> We also show that each of the three cases of semi-unification with only 2 inequalities 3 In the finite case the redex procedure is the same as that given in <ref> [13] </ref>. 4 is equivalent to semi-unification of the same case with n 2 inequalities 4 . We also look at some restrictions that make (finite, regular and general) semi-unification decidable. The report also studies some properties that distinguish the three cases of semi-unification. <p> In the finite case, it has been shown in <ref> [6, 13] </ref> that the principality property holds. We show that it holds also in the general case. However, in the regular case, it is still open whether this property holds. <p> See Section 7.2 for the details. The report is organized as follows. Section 2 contains the definition of the finite semi-unification problem. It also gives a redex procedure originally described in <ref> [13] </ref>. It also gives the definition of the equational theory related to semi-unification. Most of the material in Section 2 is borrowed from [13]. Section 3 gives the definition of general semi-unification, and gives a modified redex procedure. It also relates this procedure to the equational theory. <p> The report is organized as follows. Section 2 contains the definition of the finite semi-unification problem. It also gives a redex procedure originally described in <ref> [13] </ref>. It also gives the definition of the equational theory related to semi-unification. Most of the material in Section 2 is borrowed from [13]. Section 3 gives the definition of general semi-unification, and gives a modified redex procedure. It also relates this procedure to the equational theory. Section 4 gives the definition of the functional and inclusion dependency problem. <p> For w 2 f1; 2; : : : ; ng fl , let ( ) w : T ! T , be a homomorphism defined on variables in X by: (ff ) w = ff w 2.1 Redex Procedure We now present a procedure originally given in <ref> [13] </ref>. This procedure takes as input an instance as defined above. The procedure halts iff has a (finite) solution. If and when it halts it constructs a solution for . The procedure consists of repeatedly reducing redexes which can be of two kinds. <p> Notice that, in the redex procedure above, a semi-unification instance is allowed to contain variables in X. So, now a substitution is viewed as a function from X to T . The following lemma is taken from <ref> [13] </ref> and it illustrates the correctness of the redex procedure. Lemma 1 Let be an instance of semi-unification with all variables in the initial X. 1. has a solution iff the above procedure, when started on instance , halts producing an instance 0 without redexes. 2. <p> A solution S of is principal iff for every other solution S 0 , S v S 0 . The redex procedure given above, when it halts, produces the principal solution for (see <ref> [13] </ref>). 2.2 Equational Theory Each case of semi-unification we shall consider gives rise to an equational theory EQ, generalizing the concept of P ath Equations given in [13]. Let EQ be a finite set of unary function symbols. Let X be a countably infinite set of variables. <p> The redex procedure given above, when it halts, produces the principal solution for (see <ref> [13] </ref>). 2.2 Equational Theory Each case of semi-unification we shall consider gives rise to an equational theory EQ, generalizing the concept of P ath Equations given in [13]. Let EQ be a finite set of unary function symbols. Let X be a countably infinite set of variables. Let X be an extension of X, as defined in the previous section. Let T EQ be the set of finite terms over EQ and X . <p> Notice that in this case the equational theory is exactly the same as path equations defined in <ref> [13] </ref>. 9 Given an instance we construct an instance E of equations. EQ consists of only two unary function symbols L and R, corresponding to the L and R functions defined in the previous section. <p> For every ; fl 2 fl EQ and ff; fi 2 X, such that fl (u) = ff and fl (t) = fi, add the following equation E : ff = fi i The following lemma is a rephrasing of Lemma 4 in <ref> [13] </ref>. It illustrates the relationship between the equational theory and semi-unification. Lemma 4 Let be an instance of semi-unification. 1. If e is derivable from E then it is satisfied by every solution of . 2. <p> But by Lemma 4, every solution must satisfy those equations. Hence, any solution must assign to ff arbitrary large terms and S can not be finite, which is a contradiction. Finite semi-unification is undecidable. Its undecidability was established in <ref> [13] </ref>. 3 General Semi-Unification The semi-unification problem described in Section 2 is restricted to substitutions on ordinary (finite) terms. The problem can be extended to allow substitutions on general terms (finite or infinite). <p> Proof: The proof of the second part of this lemma is the same as Lemma 4, the proof of the first part is a routine induction on the length of a derivation of an equation. Again, we refer the reader to the proof of Lemma 4 in <ref> [13] </ref> for the details of the proof. Theorem 21 Let be an instance of general semi-unification, and let s be its stripped version. has no solution iff one of the following is true. 1. <p> In the finite case the proof is given in <ref> [6, 13] </ref>. For the general case the proof is given in this report (Corollary 17).
Reference: [14] <author> A.J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> Type-reconstruction in the presence of polymorphic recursion. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(2) </volume> <pages> 290-311, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, it has been shown in <ref> [8, 14] </ref> that the general form of finite semi-unification is equivalent to the type reconstruction problem for ML with polymorphic recursion. Finite semi-unification has also been studied in connection with Kriesel's conjecture on the length of proofs in Peano Arithmetic (see [18]).
Reference: [15] <author> H. Leiss. </author> <title> Decidability of semi-unification in two variables. </title> <institution> Research Report INF 2-ASE-9-89, Siemens, Munchen, </institution> <year> 1989. </year>
Reference-contexts: In [11], an exponential procedure is given to show that left linear semi-unification is decidable, this result was improved in [7] where a polynomial procedure is given. Instances over 2 variables is also decidable in the finite case <ref> [15] </ref>. In addition, see [16] where another special case of finite semi-unification is shown to be decidable. 2 Regular terms are terms with finitely many unequal subterms. <p> The proof of this fact in this case is a bit more involved than the case with k = 1. Other decidable cases for finite semi-unification are discussed in <ref> [7, 11, 15] </ref>. 46 7 Comparing The Problems of Semi-Unification In this section we present a comparative study between the three cases of semi-unification. We study the properties of the solution set for each case. We also discuss the principality property for each case.
Reference: [16] <author> H. Lei and F. Henglein. </author> <title> A decidable case of the semi-unification problem. </title> <booktitle> In Proc. 16th Int'l Symp. on Mathematical Foundations of Computer Science (MFCS), </booktitle> <address> Poland. </address> <publisher> Springer, </publisher> <month> Sept. </month> <year> 1991. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <pages> 520. </pages>
Reference-contexts: In [11], an exponential procedure is given to show that left linear semi-unification is decidable, this result was improved in [7] where a polynomial procedure is given. Instances over 2 variables is also decidable in the finite case [15]. In addition, see <ref> [16] </ref> where another special case of finite semi-unification is shown to be decidable. 2 Regular terms are terms with finitely many unequal subterms.
Reference: [17] <author> J.C. Mitchell. </author> <title> The implication problem for functional and inclusion dependencies. </title> <journal> Information and Control, </journal> <volume> 56(3):154 - 173, </volume> <year> 1983. </year>
Reference-contexts: It also provides some insight into the reason why semi-unification is undecidable. In this report, we prove the equivalence of general semi-unification to a well known problem in database theory, the so-called functional and inclusion dependency problem. This dependency problem is undecidable (see <ref> [1, 2, 17] </ref>), and hence, we obtain the undecidability of general semi-unification. We also present a metatheory that is common to the different cases of semi-unification. The core of this metatheory is a redex procedure used to transform instances of semi-unification.
Reference: [18] <author> P. Pudlak. </author> <title> On a unification problem related to Kreisel's conjecture. </title> <journal> Commentationes Mathematicae Universitatis Carolinae, Prague, Czechoslovakia, </journal> <volume> 29(3):551 - 556, </volume> <year> 1988. </year>
Reference-contexts: Furthermore, it has been shown in [8, 14] that the general form of finite semi-unification is equivalent to the type reconstruction problem for ML with polymorphic recursion. Finite semi-unification has also been studied in connection with Kriesel's conjecture on the length of proofs in Peano Arithmetic (see <ref> [18] </ref>). If we generalize substitutions by allowing them to replace variables by terms that are not necessarily finite, we obtain other cases of semi-unification. <p> Several special cases of finite semi-unification have been shown to be decidable. We list here some of those decidable special cases of finite semi-unification. Finite semi-unification on instances with exactly one inequality has been shown to be decidable <ref> [6, 10, 18] </ref>. Furthermore, in [10] a polynomial time decision procedure is given. Acyclic semi-unification is shown to be DEXPTIME-complete in the case of finite semi-unification [12]. <p> It also relates this procedure to the equational theory. Section 4 gives the definition of the functional and inclusion dependency problem. It establishes the equivalence of an undecidable subcase of 4 In the finite case the proof (unpublished) is due to Pudlack <ref> [18] </ref>. 5 dependency to general semi-unification, which provides one way of proving the undecidability of general semi-unification. Section 5 gives the definition of regular semi-unification and relates it to clause satisfiability in a feature algebra. <p> Proof: Follows directly from Lemmas 33 and 34. 6.2 Instances with two inequalities Given an instance with n &gt; 2 inequalities, we construct an instance 0 with 2 inequalities such that has a solution iff 0 has one. This construction is originally due to <ref> [18] </ref>. We give a slightly modified version of it. We put all the details in because the previous reference is not readily available. The result due to [18] is for a finite solution. We use a similar construction to obtain the result for general and regular solutions also. <p> This construction is originally due to <ref> [18] </ref>. We give a slightly modified version of it. We put all the details in because the previous reference is not readily available. The result due to [18] is for a finite solution. We use a similar construction to obtain the result for general and regular solutions also. Let be an instance of binary semi-unification consisting of the following n inequalities. ft 1 u 1 ; : : : ; t n u n g.
Reference: [19] <author> P.W. Purdom. </author> <title> Detecting looping simplifications. </title> <editor> In Lescanne, editor, </editor> <booktitle> Proceedings of 2nd Conference on Rewriting Techniques and Applications, </booktitle> <volume> LNCS 250, </volume> <pages> pages 54 - 62. </pages> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Finite semi-unification and restrictions on it have been considered in connection with many research problems. We mention here some of these research areas. A sufficient condition for a rewrite rule to be non-terminating can be formulated as an instance of finite semi-unification with exactly one inequality (see <ref> [10, 19] </ref>).
Reference: [20] <author> Hartley Rogers. </author> <title> Theory of Recursive Functions and Effective Computability. </title> <publisher> McGraw-Hill, </publisher> <year> 1967. </year> <month> 54 </month>
Reference-contexts: In what follows ,we extend the relation between ffi reg and ffi gen . Two (disjoint) sets A and B are recursively inseparable if there is no recursive set containing A and disjoint from B <ref> [20] </ref>. The following lemma is taken from [5]. Lemma 39 Let range over alphabets containing the symbols 0 and A 0 , and let x i and y i range over words in fl .
References-found: 20

