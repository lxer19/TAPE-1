URL: http://www.cs.duke.edu/~jsv/Papers/STV92.layered_shortest.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node73.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: CS--1993--30 An Efficient Parallel Algorithm for Shortest Paths in Planar Layered Digraphs  
Author: Sairam Subramanian, Roberto Tamassia, Jeffrey Scott Vitter 
Date: December 20, 1993  
Address: 27708-0129  
Affiliation: Department of Computer Science Duke University Durham, North Carolina  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Aggarwal and J. Park, </author> <title> "Notes on Searching Multidimensional Monotone Arrays," </title> <booktitle> Proc. 29th Annual IEEE Symposium on Foundations of Computer Science (1988), </booktitle> <pages> 496-512. </pages>
Reference-contexts: The problem of determining the value of fi was formalized by Aggarwal and Park as the tube minima problem and has many applications in computational geometry <ref> [1] </ref>. They give the following bounds for calculating the tube minima of an n fi n fi n array: Theorem 6 The tube minima of an p p p n array can be found in time O (log n) and work O (n) in a CREW PRAM.
Reference: [2] <author> N. Alon and Z. Galil, </author> <title> "On the Exponent of the All Pairs Shortest Path Problem," </title> <booktitle> Proc. 32nd Annual IEEE Symposium on Foundations of Computer Science (1991), </booktitle> <pages> 569-575. </pages>
Reference-contexts: For general digraphs, the best algorithm runs in O (log 2 n) time with n 3 = log n processors (using the naive algorithm for matrix multiplication) [14]. Recently Alon and Galil <ref> [2] </ref> have given an algorithm which uses fast matrix multiplication techniques to solve the all-pairs shortest paths problem. The work done by their algorithm is O ((M n) 3+! if the edges have integral weights which are bounded above by M .
Reference: [3] <author> A. Apostolico, M. J. Atallah, L. Larmore, and H. S. Mcfaddin, </author> <title> "Efficient Parallel Algorithms for String Editing and Related Problems ," SIAM Journal on Computing 19 (1990), </title> <type> 968-988. </type>
Reference-contexts: A grid digraph has the vertices arranged in a rectangular grid and the edges directed from left to right and from bottom to top (an example is shown in Figure 1). Apostolico et al. <ref> [3] </ref> gave an algorithm to compute shortest paths in a grid in O (log 2 n) time with O (n) processors. The shortest path problem on grid digraphs has applications in text processing, biological research, tomography and medical diagnosis. <p> Grid digraphs for instance have one-way separators of size p n that 1=2-split the graph. In fact the shortest path algorithm by Apostolico et al. <ref> [3] </ref> uses such separators to construct a divide and conquer solution. <p> This can be done in constant time with jSj processors in a CRCW PRAM. However, a little thought reveals that such a naive approach would require too many processors. Assume without loss of generality that n s n t . We first use an idea from <ref> [3] </ref> to show that the all-pairs shortest paths from vertices in S to vertices in T can be computed in log 2 n time with n s n t + n s n z processors. We make use of the following definition and lemma.
Reference: [4] <author> M.J. Atallah, </author> <title> "A Faster Parallel Algorithm for a Matrix Searching Problem," </title> <booktitle> Proc. 2nd Scandinavian Workshop on Algorithm Theory (1990), </booktitle> <pages> 193-200. </pages>
Reference-contexts: Similarly for the CRCW model of computation Atallah <ref> [4] </ref> has given an algorithm with following bounds: Theorem 7 The tube minima of an p p p n array can be found in time O (log log n) and work O (n) in a CRCW PRAM. We can use these algorithms in the patch-up stage to get improved algorithms.
Reference: [5] <author> R. Bellman, </author> <title> "On a Routing Problem," </title> <booktitle> Quarterly of Applied Mathematics 16 (1958), </booktitle> <pages> 87-90. </pages>
Reference: [6] <author> R. Cole and U. Vishkin, </author> <title> "Optimal parallel algorithms for expression tree evaluation and list ranking ," Procedings of the third Agean Workshop on Computing: </title> <booktitle> (1988), </booktitle> <pages> 91-100. </pages>
Reference-contexts: a series-parallel digraph the weight of a shortest path between the source and the sink is obtained by evaluating an arithmetic expression with operators + (associated with series compositions) and min (associated with parallel compositions), which can be done optimally in O (log n) time with n= log n processors <ref> [6] </ref>. A grid digraph has the vertices arranged in a rectangular grid and the edges directed from left to right and from bottom to top (an example is shown in Figure 1).
Reference: [7] <author> A. L. Delcher and S. R. Kosaraju, </author> <title> "An NC Algorithm for Evaluating Monotone Planar Circuits," </title> <note> manuscript submitted for publication. </note>
Reference-contexts: Layered graphs have been studied under the name of proper hierarchies by Wilson [27]. Di Battista and Nardelli [8] give efficient algorithms to test if a layered digraph with only one source is planar. Recently Kosaraju <ref> [7] </ref> has developed an efficient parallel algorithm to evaluate planar layered circuits.
Reference: [8] <author> G. Di Battista and E. Nardelli, </author> <title> "An Algorithm for Testing Planarity of Hierarchical Graphs," </title> <booktitle> Proc. In. Workshop WG 86, </booktitle> <address> Bernierd, </address> <month> June </month> <year> 1986. (1987), </year> <pages> 277-289. </pages>
Reference-contexts: G is a planar layered digraph if it admits a planar p-line embedding. Figure 2 gives an example of a layered graph with a planar 5-line embedding. Layered graphs have been studied under the name of proper hierarchies by Wilson [27]. Di Battista and Nardelli <ref> [8] </ref> give efficient algorithms to test if a layered digraph with only one source is planar. Recently Kosaraju [7] has developed an efficient parallel algorithm to evaluate planar layered circuits.
Reference: [9] <author> E. W. Dijkstra, </author> <title> "A Note on Two Problems in Connexion with Graphs," </title> <booktitle> Numerische Mathe-matik 1 (1959), </booktitle> <pages> 269-271. </pages>
Reference-contexts: Among the well known sequential algorithms for this problem is the classical Dijkstra's algorithm <ref> [9] </ref>, based on a dynamic programming approach. Its time complexity is O ((n + m)) log n) if elementary data structures are used, and O (n log n + m) when implemented with Fibonacci heaps [12].
Reference: [10] <author> G.N. Frederickson, </author> <title> "Data Structures for On-Line Updating of Minimum Spanning Trees," </title> <booktitle> Proc. 15th ACM Symp. on Theory of Computing (1983), </booktitle> <pages> 252-257. </pages>
Reference-contexts: Our separator algorithm can be easily modified to divide a collection of marked vertices. This change in our division strategy guarantees that at any stage each piece has a small number of boundary vertices. In particular, we have the following lemma, which follows from the arguments in <ref> [10] </ref>. Lemma 5 Let G be an n-vertex planar layered st-graph, and let 0 * 1. <p> algorithm that has a better running time. 14 6 Acknowledgments We'd like to thank Alok Aggarwal and Mike Atallah for showing us that we can get better bounds by using the algorithms for the tube minima problem, and for bringing to our attention Frederickson's technique for maintaining a small boundary <ref> [10] </ref>. 15
Reference: [11] <author> G.N. Frederickson, </author> <title> "Fast algorithms for shortest paths in planar graphs, with applications," </title> <journal> SIAM Journal on Computing 16 (1987), </journal> <pages> 1004-1022. </pages>
Reference-contexts: This can be accomplished by using the following idea due to Frederickson <ref> [11] </ref>: Mark the boundary vertices and use the separator algorithm from Theorem 3 once, to divide the marked vertices (into small pieces), at every stage. Our separator algorithm can be easily modified to divide a collection of marked vertices.
Reference: [12] <author> M.L. Fredman and R.E. Tarjan, </author> <title> "Fibonacci heaps and their uses in improved network optimization algorithms," </title> <journal> Journal of the Association for Computing Machinery 34 (1987), </journal> <pages> 596-615. </pages>
Reference-contexts: Among the well known sequential algorithms for this problem is the classical Dijkstra's algorithm [9], based on a dynamic programming approach. Its time complexity is O ((n + m)) log n) if elementary data structures are used, and O (n log n + m) when implemented with Fibonacci heaps <ref> [12] </ref>. For the important class of acyclic digraphs, a simple variation of Dijkstra's algorithm runs in time O (n + m) . Here n and m denote the number of vertices and edges of G, respectively.
Reference: [13] <author> H. Gazit and G. L. Miller, </author> <title> "A parallel algorithm for finding a separator in planar graphs," </title> <booktitle> Proc. 28th Annual IEEE Symposium on Foundations of Computer Science (1987), </booktitle> <pages> 238-248. </pages>
Reference-contexts: A parallel algorithm for finding a cycle separator for biconnected graphs was given by Miller [17] which uses n processors if the breadth first search tree of the graph is already known, an improved version of the algorithm was given by Gazit and Miller <ref> [13] </ref>, which uses randomization to find a cycle separator with n 1+* processors. Randomized parallel algorithms to find small separators for more general undirected graphs were given by Miller and Thurston [18].
Reference: [14] <author> M. Gondran and M. Minoux, </author> <title> in Graphs and Algorithms, </title> <publisher> Wiley InterScience New York, </publisher> <year> 1984. </year>
Reference-contexts: Developing a parallel shortest path algorithm that runs in polylogarithmic time with a linear number of processors is an outstanding open problem. Indeed, all the known polylog-time parallel techniques for this problem are based on matrix multiplication <ref> [14] </ref> and are therefore far from optimal in terms of the total work done, especially when the digraph is sparse. For general digraphs, the best algorithm runs in O (log 2 n) time with n 3 = log n processors (using the naive algorithm for matrix multiplication) [14]. <p> on matrix multiplication <ref> [14] </ref> and are therefore far from optimal in terms of the total work done, especially when the digraph is sparse. For general digraphs, the best algorithm runs in O (log 2 n) time with n 3 = log n processors (using the naive algorithm for matrix multiplication) [14]. Recently Alon and Galil [2] have given an algorithm which uses fast matrix multiplication techniques to solve the all-pairs shortest paths problem. The work done by their algorithm is O ((M n) 3+! if the edges have integral weights which are bounded above by M .
Reference: [15] <author> R.M. Karp and V. Ramachandran, </author> <title> "A Survey of Parallel Algorithms for Shared Memory Machines," </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <publisher> North Holland, </publisher> <year> 1990, </year> <pages> 871-941. </pages>
Reference-contexts: It is not hard to see that these infinite weight edges do not alter any shortest paths or destroy planarity. This computation can be accomplished in O (log n) time with n= log n processors 3 using standard techniques (see for example <ref> [15] </ref>). A planar layered digraph with exactly one source s (on the first layer) and one sink t ( on the last layer) is called a planar layered st-graph. <p> Proof : Steps 1 through 4 can be done using standard techniques (see <ref> [15] </ref>). Steps 5 and 6 can be completed in O (log n) time using the techniques of Tamassia and Vitter [25]. 2 We now use X to construct a divide and conquer solution for the shortest path problem.
Reference: [16] <author> P. N. Klein and Sairam Subramanian, </author> <title> "A linear-processor polylog-time algorithm for shortest-paths in planar graphs," </title> <booktitle> Proc. 1993 IEEE Symposium on Foundations of Computer Science. </booktitle> <year> (1993). </year>
Reference-contexts: For planar digraphs the number of processors for the single source problem can be reduced to n 1:5 = log n, while keeping the parallel time down to O (log 3 n), by using an algorithm by Pan and Reif [22]. In recent work Klein and Subramanian <ref> [16] </ref> have given a linear-processor polylog-time algorithm for finding single-source shortest paths in planar digraphs. However the algorithm in [16] has a polylogarithmic running time with a large exponent. 1 To our knowledge, efficient parallel algorithms for computing shortest paths have been devised only for two special classes of digraphs: series-parallel <p> In recent work Klein and Subramanian <ref> [16] </ref> have given a linear-processor polylog-time algorithm for finding single-source shortest paths in planar digraphs. However the algorithm in [16] has a polylogarithmic running time with a large exponent. 1 To our knowledge, efficient parallel algorithms for computing shortest paths have been devised only for two special classes of digraphs: series-parallel digraphs and grid digraphs. <p> As far as planar st-graphs are concerned, it seems unlikely that a similar approach would give a linear processor solution. As evidence we present the graph in Figure 9 that does not have a one-way separator of size O ( p n). Klein and Subramanian <ref> [16] </ref> have to some extent resolved this problem by presenting a linear-processor polylog-time algorithm for finding single-source shortest-path problem in planar digraphs. However, their algorithm has a polylogarithmic running time with a large exponent. <p> However, their algorithm has a polylogarithmic running time with a large exponent. It may be possible to use a combination of the ideas presented in this paper along with the ones in <ref> [16] </ref> to get a linear-processor algorithm that has a better running time. 14 6 Acknowledgments We'd like to thank Alok Aggarwal and Mike Atallah for showing us that we can get better bounds by using the algorithms for the tube minima problem, and for bringing to our attention Frederickson's technique for
Reference: [17] <author> G. L. Miller, </author> <title> "Finding small simple cycle separators for 2-connected planar graphs," </title> <journal> Journal of Computer and System Sciences 32 (1986), </journal> <pages> 265-279. </pages>
Reference-contexts: This result and other extensions to it have paved the way to divide and conquer solutions for many problems in planar graphs. A parallel algorithm for finding a cycle separator for biconnected graphs was given by Miller <ref> [17] </ref> which uses n processors if the breadth first search tree of the graph is already known, an improved version of the algorithm was given by Gazit and Miller [13], which uses randomization to find a cycle separator with n 1+* processors.
Reference: [18] <author> G. L. Miller and W. Thurston, </author> <title> "Separators in two and three dimensions," </title> <booktitle> Proc. 22nd Annual ACM Symposium on Theory of Computing (1990), </booktitle> <pages> 300-309. </pages>
Reference-contexts: Randomized parallel algorithms to find small separators for more general undirected graphs were given by Miller and Thurston <ref> [18] </ref>. However, these separators seem unsuitable for use in solving problems on directed planar graphs because they do not take into account the direction of edges, while separating the graph.
Reference: [19] <author> E. Lawler, </author> <title> Combinatorial Optimization: Networks and Matroids, </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1976. </year>
Reference: [20] <author> A. Lempel, S. Even, and I. Cederbaum, </author> <title> "An Algorithm for Planarity Testing of Graphs," Theory of Graphs, </title> <booktitle> Int. Symposium (1966), </booktitle> <pages> 215-232. </pages>
Reference-contexts: These graphs were first introduced in the planarity testing algorithm of Lempel et al. <ref> [20] </ref>. We now define the concept of a left ordering of the vertices in a planar st-graph, which will prove useful in our algorithm. This ordering was introduced by Tamassia and Preparata [24].
Reference: [21] <author> R. J. Lipton and R. E. Tarjan, </author> <title> "Applications of a Planar Separator Theorem," </title> <journal> SIAM Journal on Computing 9 (1980), </journal> <pages> 615-627. 16 </pages>
Reference-contexts: Lipton and Tarjan <ref> [21] </ref> proved that any planar graph with n vertices has a p 8n-separator that 2=3-splits. This result and other extensions to it have paved the way to divide and conquer solutions for many problems in planar graphs. <p> We then show how this division can be used to formulate a recursive solution to the single-source shortest-path problem. To show the existence of such separators we need the following lemma, which follows directly from the arguments of Lipton and Tarjan <ref> [21] </ref>: Lemma 1 Let G be any n-vertex planar layered st-graph containing layers 1 through p. Let S i denote the set of vertices in the ith layer, and let n i denote the size of the set S i . <p> We still have to show that the number of all pairs subproblems at any stage is not too much to handle with just n processors since we are aiming for a 8 linear processor solution. We use the following lemma which follows from the arguments of Lipton and Tarjan <ref> [21] </ref> to show that the total number of source-sink pairs at any level in the recursion is O (n log n). Lemma 2 Let G be an n-vertex planar layered st-graph, and let 0 * 1.
Reference: [22] <author> V. Pan and J. H. Reif, </author> <title> "Fast and efficient solution of path algebra problems," </title> <journal> Journal of Computer and System Sciences 38 (1989), </journal> <pages> 494-510. </pages>
Reference-contexts: For planar digraphs the number of processors for the single source problem can be reduced to n 1:5 = log n, while keeping the parallel time down to O (log 3 n), by using an algorithm by Pan and Reif <ref> [22] </ref>. In recent work Klein and Subramanian [16] have given a linear-processor polylog-time algorithm for finding single-source shortest paths in planar digraphs.
Reference: [23] <author> G. Shannon and F. Wan, </author> <title> "Subdividing Planar Graphs in Prallel," </title> <institution> Dept. of Computer Science Indiana University, </institution> <type> Technical Report, </type> <year> 1991. </year>
Reference: [24] <author> R. Tamassia and F.P. Preparata, </author> <title> "Dynamic Maintenance of Planar Digraphs, with Applications," </title> <booktitle> Algorithmica 5 (1990), </booktitle> <pages> 509-527. </pages>
Reference-contexts: These graphs were first introduced in the planarity testing algorithm of Lempel et al. [20]. We now define the concept of a left ordering of the vertices in a planar st-graph, which will prove useful in our algorithm. This ordering was introduced by Tamassia and Preparata <ref> [24] </ref>. We do this by making use of the dual graph of G (labeled G fl ) defined as follows: 1. Every internal face f in G corresponds to a vertex in G fl . 4 2.
Reference: [25] <author> R. Tamassia and J.S. Vitter, </author> <title> "Parallel Transitive Closure and Point Location in Planar Structures," </title> <note> SIAM Journal on Computing 20 (1991 ), 708-725. </note>
Reference-contexts: Theorem 1 The algorithm outlined above can be implemented in O (log n) time with n= log n processors in an EREW PRAM. Proof : All the steps can be done in O (log n) time using the techniques of Tamassia and Vitter <ref> [25] </ref>. 2 A planar layered st-graph is a special case of a planar st-graph which is defined as a planar acyclic digraph with exactly one source, s, and exactly one sink, t, embedded in the plane so that s and t are on the boundary of the external face. <p> Proof : Steps 1 through 4 can be done using standard techniques (see [15]). Steps 5 and 6 can be completed in O (log n) time using the techniques of Tamassia and Vitter <ref> [25] </ref>. 2 We now use X to construct a divide and conquer solution for the shortest path problem. <p> To determine the processor and time complexity we note that the left ordering of the any planar st-graph with n vertices can be determined in O (log n) time with n= log n processors <ref> [25] </ref>. Thus, we can determine the orderings of S and T in O (log n p + log n) time with q n p = log n processors. The time complexity of the various steps are as follows: 1.
Reference: [26] <author> J. Valdes, R.E. Tarjan, and E.L. Lawler, </author> <title> "The Recognition of Series Parallel Digraphs," </title> <journal> SIAM Journal on Computing 11 (1982), </journal> <pages> 298-313. </pages>
Reference-contexts: However the algorithm in [16] has a polylogarithmic running time with a large exponent. 1 To our knowledge, efficient parallel algorithms for computing shortest paths have been devised only for two special classes of digraphs: series-parallel digraphs and grid digraphs. A series-parallel digraph <ref> [26] </ref> is an acyclic digraph with exactly one source and exactly one sink that is recursively constructed by series and parallel compositions.
Reference: [27] <author> S. Whitesides, </author> <title> "Forms of Hierarchy: A Selected Bibliography," </title> <type> Gen. </type> <institution> Syst. </institution> <month> 14 </month> <year> (1969), </year> <pages> 3-15. 17 </pages>
Reference-contexts: G is a planar layered digraph if it admits a planar p-line embedding. Figure 2 gives an example of a layered graph with a planar 5-line embedding. Layered graphs have been studied under the name of proper hierarchies by Wilson <ref> [27] </ref>. Di Battista and Nardelli [8] give efficient algorithms to test if a layered digraph with only one source is planar. Recently Kosaraju [7] has developed an efficient parallel algorithm to evaluate planar layered circuits.
References-found: 27

