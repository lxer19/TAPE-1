URL: http://www.cs.cornell.edu/Info/People/bba/diss.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/bba/papers.html
Root-URL: http://www.cs.brown.edu/
Title: A Generic Management Model For Corba, Cmip and Snmp zur Erlangung der Wurde eines Doktors
Author: vorgelegt von Bela Ban von Kreuzlingen TG genehmigt auf Antrag von Prof. Dr. L. Richter Prof. Dr. K. Bauknecht 
Degree: Dissertation  
Date: DEZEMBER 1997  
Note: urich  
Affiliation: der Wirtschaftswissenschaftlichen Fakult at der Universit at Z  
Abstract-found: 0
Intro-found: 1
Reference: [ACH93] <author> Sebastian Abeck, Alexander Clemm, and Ulf Hollberg. </author> <title> Simply Open Network Management. </title> <booktitle> In INM [INM93], </booktitle> <pages> pages 361-375. </pages>
Reference-contexts: RELATED RESEARCH resources. Similar work implementing a gateway between the domains of OSI and SNMP is described in <ref> [ACH93] </ref>. It consists of a special intermediate OSI agent that provides OSI managers access to SNMP resources in the form of managed objects. The proposal includes a translation that maps SNMP object types to OSI managed objects and, at runtime, OSI Distinguished Names to SNMP object identifiers (OIDs). <p> The mapping between SNMP and OSI MIBs is conceptually similar to the one in <ref> [ACH93] </ref>, but results in fewer managed object templates being generated.
Reference: [ADF + 94] <author> Tom Atwood, Joshua Duhl, Guy Ferran, Mary Loomis, and Drew Wade. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> release 1.1 edition, </address> <year> 1994. </year>
Reference-contexts: This is done by the adapter when creating a new target filter as shown in fig. 4.39. 45 The syntax is not yet determined, but syntaxes proposed e.g. for OQL <ref> [ADF + 94] </ref> or the OMG query service [COS95] could be used. 4.5. EVENT HANDLING 103 For each target filter, the adapter creates an event destination to which the target filter's destination will point.
Reference: [ANS93] <institution> Architecture Project Management, Poseidon House, </institution> <address> Castle Park. Cambridge. </address> <note> The ANSAware 4.1 manual set, </note> <year> 1993. </year>
Reference-contexts: For historical reasons there has always been a division between tools for operating (e.g. TCP/IP, RPC) and managing (e.g. SNMP, CMIP) a networked system. With the advent of object-oriented distributed computing models (CORBA [OMG95], ANSA <ref> [ANS93] </ref>, Java [RMI96], DCOM [BK96]), there are efforts to make the operational and management 'faces' the same, i.e. to manage and operate the network using the same model. Moreover, distributed systems management tasks cannot themselves be centralized, but 1 2 CHAPTER 1. INTRODUCTION require distribution of management as well. <p> This work is similar to the solution described in [Gen96, ch. 4.3] which proposes to upgrade existing OSI agents with IDL interfaces to the managed objects. Related work done on managing OSI objects from ANSA <ref> [ANS93] </ref> managers is described in [GG95, GP95, Gen96]. 6 This approach can also be divided in a translation part and a 4 Although CMIP actually only denotes the protocol used for communication between manager and agent in the OSI management model, in practice it is often used in a pars pro <p> Similar work is described in [BGG94], but the domain to be accessed from OSI managers is ANSA <ref> [ANS93] </ref> instead of CORBA. The goal is to access existing ANSA objects from OSI managers without modifying the ANSA objects. The approach is twofold: first, a static translation maps the ANSA object model specification to GDMO/ASN.1.
Reference: [ASN90] <author> ISO / IEC 8824. </author> <title> Specification of Abstract Syntax Notation One (ASN.1), </title> <month> April </month> <year> 1990. </year>
Reference-contexts: A disadvantage is that they have to be mapped to an implementation language which may involve conversion / loss of information. Examples of interface specification languages are remote procedure calls [BN84], CORBA Interface Definition Language (IDL) [OMG95], GDMO and ASN.1 <ref> [GDM92, ASN90] </ref> and TINA ODL [TIN95]. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk [GR89], C++ [Str91] or Java [Sun95]. <p> is sent to the agent, the agent will first find the managed object to which the request is directed, then retrieve the information from the managed object and finally return it to the sender. 2.2.3 Specification Language Managed objects are defined using two specification languages: Abstract Syntax Notation One (ASN.1 <ref> [ASN90] </ref>) is used to define data types and Guidelines for the Definition of Managed Objects (GDMO [GDM92]) to define managed objects. <p> A subtype further constrains a type (cf. <ref> [ASN90, section 4] </ref>) and is modeled as follows: for each ASN.1 type T, "parm" has as its value an instance of MetaObj which contains one of the properties shown in table 4.6.
Reference: [ASU86] <author> Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman. </author> <booktitle> Compilers: Principles, Techniques and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: SCOPE 7 1.3.4.1 Dynamic Code Paradigm Code is sent from one location to another to be executed. Examples are Java applets [Sun95] or TeleScript intelligent agents [Whi94]. A Java applet is essentially byte code for a virtual machine <ref> [ASU86, Kam90] </ref> that is sent to a location running a virtual machine interpreter, which then executes it. Thus, code is always sent from a server to a client.
Reference: [Bac86] <author> Maurice J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: With the rise of the UNIX (formerly: MULTICS) operating system in the early seventies and the personal computer in the eighties, decentralization of computation ensued, and computers were interconnected in the form of local area networks (LANs) and wide area networks (WANs) <ref> [Tan92, Bac86] </ref>. Parallel to the decentralization of computational resources, their management had to become decentralized as well. At that time, various proprietary schemes existed or were created to perform management of the computing infrastructure (e.g. TL1, Telnet etc.).
Reference: [Ban96a] <author> Bela Ban. </author> <title> Design of a CORBA-Based GOM Prototype. </title> <type> Internal paper, </type> <institution> IBM Research Division, IBM Zurich Research Laboratory, </institution> <address> Saumerstr. 4, 8803 Ruschlikon, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Both DII and IIOP can be used to implement a CORBA adapter. The advantage of DII is that it is more abstract, therefore easier to implement, whereas IIOP is more complex. In a prototype implementation of a DSOM-based [SOM94] CORBA adapter, the DII was used <ref> [Ban96b, Ban96f, Ban96a] </ref> as described below. The approach is straightforward. Whenever a GOM request is to be dispatched, after successful type-checking using metadata, a Request object will be created. All generic GOM values in the argument list will be converted to CORBA values and added to the Request object. <p> See <ref> [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] </ref> for more details.
Reference: [Ban96b] <author> Bela Ban. </author> <title> Extending CORBA For Multi-Domain Management. </title> <booktitle> In Proceedings of Distributed Object-Oriented Computing For Telecom (DOCT'96) Workshop, </booktitle> <address> ObjectWorld'96, Frankfurt, Germany, </address> <year> 1996. </year>
Reference-contexts: Both DII and IIOP can be used to implement a CORBA adapter. The advantage of DII is that it is more abstract, therefore easier to implement, whereas IIOP is more complex. In a prototype implementation of a DSOM-based [SOM94] CORBA adapter, the DII was used <ref> [Ban96b, Ban96f, Ban96a] </ref> as described below. The approach is straightforward. Whenever a GOM request is to be dispatched, after successful type-checking using metadata, a Request object will be created. All generic GOM values in the argument list will be converted to CORBA values and added to the Request object. <p> GOMscript has a syntax similar to C++. It has simple values such as numbers, booleans, strings, and aggregate values such as structs, unions and lists. It has the usual control 1 The language description can be found in appendix C and further details in <ref> [Ban96c, Ban96b, Ban96e] </ref>. 2 Any prospective object model to be integrated with GOM will automatically be manageable by GOMscript. 131 132 CHAPTER 5. APPLICABILITY statements, e.g. for repetition (for, while) and conditional branching (if, else). <p> See <ref> [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] </ref> for more details.
Reference: [Ban96c] <author> Bela Ban. </author> <title> GOMscript User's Guide. </title> <institution> IBM Corporation, </institution> <year> 1996. </year> <note> Internal Paper. </note>
Reference-contexts: GOMscript has a syntax similar to C++. It has simple values such as numbers, booleans, strings, and aggregate values such as structs, unions and lists. It has the usual control 1 The language description can be found in appendix C and further details in <ref> [Ban96c, Ban96b, Ban96e] </ref>. 2 Any prospective object model to be integrated with GOM will automatically be manageable by GOMscript. 131 132 CHAPTER 5. APPLICABILITY statements, e.g. for repetition (for, while) and conditional branching (if, else). <p> See <ref> [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] </ref> for more details.
Reference: [Ban96d] <author> Bela Ban. </author> <title> Open Distributed Processing: A Reference Model For Distributed Computing. </title> <type> Technical report, </type> <institution> Institute of Computer Science, University of Zurich, </institution> <year> 1996. </year>
Reference-contexts: Some examples are X/Open's XOM/XMP [XOM94], its successor TMN/C++ [TMN96] or IBM's cmipWorks [GMR94]. The prototype implementation uses the cmipWorks product, which offers a string-based API for ASN.1 values and implements all requests required by the CMIP protocol. 30 In terms of ODP viewpoints <ref> [ODP95, Ban96d] </ref>, DII would be in the computational viewpoint and IIOP in the engineering viewpoint [ODP95, DHR92]. 31 The target's object reference is available in the proxy instance. 94 CHAPTER 4.
Reference: [Ban96e] <author> Bela Ban. </author> <title> Towards A Generic Object-Oriented Model For Multi-Domain Management. </title> <booktitle> In Muehlhaeuser [Mue96], </booktitle> <pages> pages 272-276. </pages> <booktitle> Workshop Reader of the 10th European Conference on Object-Oriented Programming (ECOOP'96), </booktitle> <address> Linz. 179 180 BIBLIOGRAPHY </address>
Reference-contexts: GOMscript has a syntax similar to C++. It has simple values such as numbers, booleans, strings, and aggregate values such as structs, unions and lists. It has the usual control 1 The language description can be found in appendix C and further details in <ref> [Ban96c, Ban96b, Ban96e] </ref>. 2 Any prospective object model to be integrated with GOM will automatically be manageable by GOMscript. 131 132 CHAPTER 5. APPLICABILITY statements, e.g. for repetition (for, while) and conditional branching (if, else). <p> See <ref> [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] </ref> for more details.
Reference: [Ban96f] <author> Bela Ban. </author> <title> Towards an Object-Oriented Framework For Multi-Domain Management. </title> <type> Technical Report RZ 2789 (#89267), </type> <institution> IBM Research Division, IBM Zurich Research Laboratory, </institution> <address> Saumerstr. 4, 8803 Ruschlikon, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Both DII and IIOP can be used to implement a CORBA adapter. The advantage of DII is that it is more abstract, therefore easier to implement, whereas IIOP is more complex. In a prototype implementation of a DSOM-based [SOM94] CORBA adapter, the DII was used <ref> [Ban96b, Ban96f, Ban96a] </ref> as described below. The approach is straightforward. Whenever a GOM request is to be dispatched, after successful type-checking using metadata, a Request object will be created. All generic GOM values in the argument list will be converted to CORBA values and added to the Request object.
Reference: [Ban96g] <author> Bela Ban. </author> <title> Using Java For Dynamic Access to Multiple Object Models. </title> <type> Technical report, </type> <institution> IBM Zurich Research Laboratory, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: See <ref> [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] </ref> for more details.
Reference: [BD97] <author> Bela Ban and Luca Deri. </author> <title> Static vs. Dynamic Network Management Based on CORBA. </title> <booktitle> In Proceedings of IS&N, </booktitle> <address> Como, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: CMIP responses are converted to ANSA. Conversion code from GDMO/ASN.1 to ANSA IDL has previously been generated by a translator. Another approach for managing CMIP agents from CORBA management applications is the Liaison project described in <ref> [Der97, Der96, BD97] </ref>. At its core is the Proxy, which works similar to an HTTP server. It accepts CMIP requests, encapsulated in HTTP, dispatches them to a CMIP agent and returns the response again in the form of HTTP to the management client. <p> The Dynamic Skeleton Interface (DSI) and Dynamic Implementation Routine (DIR) [OMG95] are used at runtime on the server side to convert incoming CORBA requests to SNMP PDUs and SNMP responses to CORBA values. Liaison <ref> [Der97, Der96, BD97] </ref> allows CORBA management applications to manage SNMP agents. Aside from access to CMIP agents, it also offers access to SNMP agents. OSI managers. 3.1. <p> Client Independence The dynamic aspect of GOM eliminates the strong dependence of clients on servers that is present in static translation approaches where clients statically include classes generated through translation. The difference between the static- and dynamic approach is shown in fig. 4.5 (see <ref> [BD97] </ref> for a comparison of a static with two dynamic approaches). <p> See <ref> [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] </ref> for more details.
Reference: [BF92] <author> N. Borenstein and N. Freed. </author> <title> MIME (Multipurpose Internet Mail Extensions): Mechanisms for Specifying and Describing the Format of Internet Message Bodies, </title> <month> November </month> <year> 1992. </year> <note> RFC 1343. </note>
Reference-contexts: on the Web [TBLP92] can be compared to that of structured programming in the seventies: information (data) and behavior (programs) are separated; programs are used to manipulate data, and the associations that determine which program is to be invoked for which datum 2 are maintained in a file using MIME <ref> [BF92] </ref>. This brings with it all the disadvantages of structured programming, which will not be dealt with here. 2 For example which application has to be started when an MPEG file is received by the browser. 140 CHAPTER 6.
Reference: [BGG94] <author> Karim Berrah, David Gay, and Guy Genilloud. </author> <title> Accessing ANSA Objects from OSI Network Management. </title> <booktitle> In Proceedings of the Fifth IFIP / IEEE International Workshop on Distributed Systems: Operations and Management (DSOM'94). IFIP / IEEE, 1994. </booktitle> <address> Toulouse, France. </address>
Reference-contexts: SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * <ref> [BGG94] </ref> * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> It is therefore used interchangeably with the terms OSI or X.700. 5 In the CORBA domain, the terms client and server are usually preferred to manager and agent, respectively. 6 A previous paper <ref> [BGG94] </ref> described the opposite mapping, namely accessing ANSA objects from 26 CHAPTER 3. RELATED RESEARCH runtime interaction part (cf. [Spe97]). The translation part maps an OSI GDMO/ASN.1 specification to its corresponding ANSA IDL specification plus conversion code. <p> Similar work is described in <ref> [BGG94] </ref>, but the domain to be accessed from OSI managers is ANSA [ANS93] instead of CORBA. The goal is to access existing ANSA objects from OSI managers without modifying the ANSA objects. The approach is twofold: first, a static translation maps the ANSA object model specification to GDMO/ASN.1.
Reference: [Bir96] <author> Kenneth P. Birman. </author> <title> Building Secure and Reliable Network Applications. </title> <publisher> Manning Publications Co., </publisher> <year> 1996. </year>
Reference-contexts: Its object reference can subsequently be retrieved by any client that knows its registration name. There may be a number of MRs in a network that clients can access. However, for performance reasons, clients will typically try to access the MR closest to them. Process group mechanisms <ref> [Maf95, Bir96] </ref> could be used to increase availability and performance of the MR service. Instead of creating one central instance of an MR, a number of instances would be created in several locations, forming a group. <p> Instead it was chosen to regard scoping and filtering as a way to select a number of managed objects on which an operation can then be invoked. Therefore the concept of a group object <ref> [Maf95, Bir96] </ref> is introduced. A group object is a container for a number of group members. A request sent to it will be sent transparently 4.6. OTHER ISSUES 119 to all members of the group. <p> See [Maf95] and <ref> [Bir96] </ref> for a detailed discussion of fault-tolerant group communication mechanisms. 64 Called linked replies in OSI parlance. 4.6. OTHER ISSUES 121 4.6.2.5 OSI Attribute Groups Attribute groups are defined in [GDM92, 8.8]. An attribute group consists of a number of attributes under a single name (OID). <p> Second, all elements of GOM can be distributed in a network, resulting in better load-balancing and availability of management services. For example the metadata repository 130 CHAPTER 4. THE GENERIC OBJECT MODEL might be replicated on multiple nodes, effectively forming a process group <ref> [Maf95, Bir96] </ref>. A request sent to the CORBA (group) object reference that represents the metadata repository might use the first response returned, which makes the MR reliable, highly available and efficient. Moreover, management of wide-area networks is becoming increasingly decentralized because applications and services are distributed themselves.
Reference: [BK96] <author> Nat Brown and Charlie Kindel. </author> <title> Distributed Component Object Model Protocol - DCOM/1.0. </title> <type> Internet draft, </type> <institution> Microsoft Corporation, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: For historical reasons there has always been a division between tools for operating (e.g. TCP/IP, RPC) and managing (e.g. SNMP, CMIP) a networked system. With the advent of object-oriented distributed computing models (CORBA [OMG95], ANSA [ANS93], Java [RMI96], DCOM <ref> [BK96] </ref>), there are efforts to make the operational and management 'faces' the same, i.e. to manage and operate the network using the same model. Moreover, distributed systems management tasks cannot themselves be centralized, but 1 2 CHAPTER 1. INTRODUCTION require distribution of management as well. <p> GOALS 9 Sun has recently added Remote Method Invocation (RMI) [RMI96] to the language, enabling objects on one machine to invoke methods of objects on remote machines. Whether a method call is local or remote is transparent to the programmer. Microsoft's Distributed Component Object Model (DCOM) <ref> [BK96] </ref> is another model for writing distributed applications. It has gained a strong foothold especially in the PC market as it is part of the Windows95 and WinNT operating systems. DCOM has only recently (1996) evolved from a non-distributed model (COM).
Reference: [Bla92] <author> Uyless Black. </author> <title> Network Management Standards. The OSI, </title> <editor> SNMP and CMOL Standards. Mc Graw-Hill, </editor> <year> 1992. </year>
Reference-contexts: It is thus possible to delete an entire subtree of managed 20 CHAPTER 2. TARGET OBJECT MODELS object instances with a single request. 11 2.3 SNMP 2.3.1 Architecture The Simple Network Management Protocol <ref> [Bla92, CFSD90, LF93] </ref> is a wide-spread Internet standard for network management, mainly due to its simplicity and dissemination. Its architecture is conceptually similar to that of OSI network management. <p> Some of the issues mentioned are targets of further work, some of them have already been implemented. 4.6.1 Integration of SNMP The Simple Network Management Protocol <ref> [CFSD90, Bla92] </ref> has found widespread acceptance for management. Unlike the other two models (CORBA, CMIP) that GOM tries to integrate by providing a uniform API, SNMP is not object-oriented, running counter to GOM's basic assumption of the target models being object-oriented. <p> The feature set supported by an agent is given in a functional unit that can be negotiated between manager and agent when establishing an association <ref> [Bla92, p. 158] </ref>. 4.6. OTHER ISSUES 117 A second reason might be that an agent already exists. Notifications for creation of new objects may be received, but there is no way to discover the managed objects already created in the agent. <p> Using M-SET with the same target set, it is possible to modify the administrativeState attribute of all managed objects in one request. Scoping and filtering is possible with the CMIP requests M-GET, M-SET, M-ACTION and M-DELETE (cf. <ref> [Bla92, ch. 6] </ref>). There are various ways to add OSI scoping and filtering functionality to GOM.
Reference: [BLFF96] <author> T. Berners-Lee, R. Fielding, and H. Frystyk. </author> <title> Hypertext Transfer Protocol - HTTP/1.0, May 1996. </title>
Reference-contexts: Third, access to the distributed information space is performed via an ASCII-based protocol (HTTP) <ref> [BLFF96] </ref>. It is the author's assumption that these three points may change in the future as follows.
Reference: [BN84] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2:39 - 59, </volume> <month> February </month> <year> 1984. </year>
Reference-contexts: A disadvantage is that they have to be mapped to an implementation language which may involve conversion / loss of information. Examples of interface specification languages are remote procedure calls <ref> [BN84] </ref>, CORBA Interface Definition Language (IDL) [OMG95], GDMO and ASN.1 [GDM92, ASN90] and TINA ODL [TIN95]. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk [GR89], C++ [Str91] or Java [Sun95].
Reference: [Box95] <author> Don Box. </author> <title> Building C++ Components Using OLE2. C++ Report, </title> <booktitle> 7(3) </booktitle> <pages> 28-34, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Some models already offer such an API, e.g. CMIP [ITU92a], CORBA's DII or IIOP [OMG95], COM's IDispatch interface <ref> [Box95] </ref> and Java's Core Reflection API [Sun96].
Reference: [Bro94] <author> K. Brockschmidt. </author> <title> Inside OLE2. </title> <publisher> Microsoft Press, </publisher> <address> Redmont, WA, </address> <year> 1994. </year>
Reference-contexts: Rather than translating requests between different ORBs, bridges can also be used to translate requests between ORBs and other non-CORBA systems such as SNMP [CFSD90], CMIP [CMI], COM <ref> [Bro94] </ref> etc. [OMG95, 9.1.2]. CORBA bridges are located at the server side and used to implement functionality, whereas GOM is at the client side and used to access functionality. CORBA request-level bridges could for example be used profitably to implement XoJIDM's interaction translation approach (see 3.1.2). <p> Moreover, it will also be shown that the model presented here does not necessarily need to be restricted to the domains of CMIP and SNMP, but can be extended to integrate other domains such as COM (OLE) <ref> [Bro94] </ref> or Java [Sun95]. Of course, the proposed model could also be employed to enable OSI managers to transparently interfere with SNMP or CORBA domains.
Reference: [Cat91] <author> Roderic G. G. Cattell. </author> <title> Object Data Management: Object-Oriented and Extended Relational Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Mapping a non object-oriented to an object-oriented model may require some counter 22 CHAPTER 2. TARGET OBJECT MODELS intuitive translations, comparable to the ones found in database technology when mapping relational and object-oriented databases (impedance mismatch <ref> [Cat91, ch. 4.7.2] </ref>). 13 A detailed comparison of the CORBA, CMIP and SNMP models can be found in [Rut93, QP93]. 13 These issues are discussed in sections 4.6.1 and 4.4.5. Chapter 3 Related Research The purpose of this chapter is threefold.
Reference: [CB94] <author> William R. Cheswick and Steven M. Bellovin. </author> <title> Firewalls and Internet Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Inter-ORB bridges have the task of converting requests between ORBs of different vendors. They can also be used to control access to ORBs within different domains, such as security (e.g. firewall functionality <ref> [CB94] </ref>) or accounting domains. Inter-ORB bridges are classified into in-line and request-level bridges. In-line bridges are part of the ORB core proper, whereas request-level bridging is performed by application code outside the ORB. Request-level bridges can be further classified into interface-specific and generic bridges.
Reference: [CFSD90] <author> J. Case, M. Fedor, M. Schoffstall, and C. Davin. </author> <title> The Simple Network Management Protocol. </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year>
Reference-contexts: Because of the slowness of the standardization process, the complexity of the proposed new standard, and the urgent need for management tools, the Simple Network Management Protocol (SNMP) <ref> [CFSD90] </ref> was devised. It was originally regarded as a provisional means for management until the OSI standard would be completed, but subsequently became a de-facto standard because of its dissemination, partly due to its simplicity. Today, although SNMP is predominantly used, it is beginning to reach its limits. <p> The DSI receives requests and the DII with the help of metadata stored in the IR dispatches them to instances in other ORBs. Rather than translating requests between different ORBs, bridges can also be used to translate requests between ORBs and other non-CORBA systems such as SNMP <ref> [CFSD90] </ref>, CMIP [CMI], COM [Bro94] etc. [OMG95, 9.1.2]. CORBA bridges are located at the server side and used to implement functionality, whereas GOM is at the client side and used to access functionality. CORBA request-level bridges could for example be used profitably to implement XoJIDM's interaction translation approach (see 3.1.2). <p> It is thus possible to delete an entire subtree of managed 20 CHAPTER 2. TARGET OBJECT MODELS object instances with a single request. 11 2.3 SNMP 2.3.1 Architecture The Simple Network Management Protocol <ref> [Bla92, CFSD90, LF93] </ref> is a wide-spread Internet standard for network management, mainly due to its simplicity and dissemination. Its architecture is conceptually similar to that of OSI network management. <p> a synthesis of the models described above and on the other hand represents a generalization of the (quite specific) event mechanisms of each model, fitting with the generic nature of GOM. 4.5.1 Overview of Existing Event Models 4.5.1.1 SNMP Traps The event model of SNMP as defined in RFC 1157 <ref> [CFSD90] </ref> is very simple and consists of traps being sent from agents to managers (or from managers to other managers). <p> Some of the issues mentioned are targets of further work, some of them have already been implemented. 4.6.1 Integration of SNMP The Simple Network Management Protocol <ref> [CFSD90, Bla92] </ref> has found widespread acceptance for management. Unlike the other two models (CORBA, CMIP) that GOM tries to integrate by providing a uniform API, SNMP is not object-oriented, running counter to GOM's basic assumption of the target models being object-oriented.
Reference: [CGI94] <author> NCSA. </author> <title> The Common Gateway Interface, </title> <note> 1994. http://hoohoo.ncsa.uiuc.edu/cgi/overview.html. BIBLIOGRAPHY 181 </note>
Reference-contexts: It currently comprises the generic object model, metadata repository and two adapters (for CORBA [SOM94] and CMIP [GMR94]). On the basis of this prototype, a few test applications have been developed for feasibility study. These comprise (1) a CGI <ref> [CGI94] </ref> based topology application, which displays the managed objects within OSI agents and which can be accessed using any Web browser [TBLP92], (2) Java bindings [Sun95], which can be included by clients to manipulate GOM instances, (3) the GOMscript interpreter as described in 5.1, and (4) a simple roaming agent facility
Reference: [Cha93] <author> Chang. </author> <title> ISO/CCITT to Internet Management Proxy. </title> <type> Technical Report Issue 1.0, </type> <institution> Network Management Forum, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * <ref> [Cha93, New93] </ref> SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> This work is based on the Network Management Forum's ISO/ITU-T and Internet Management Coexistence (IIMC) activities, which define mappings between SNMP/CMIP and vice versa <ref> [LaB93b, Cha93] </ref>. A compiler has been written following the IIMC approach for mapping SNMP MIBs to OSI MIBs. The resulting GDMO code is already enriched with code that translates CMIP- to SNMP -requests and can be compiled into an OSI agent [Pav93].
Reference: [Cha94] <author> Siva Challa. </author> <title> Towards an Interoperable, Reflective Common Object Model for Statically-Typed Object-Oriented Languages. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Blacksburg, Virginia, </institution> <year> 1994. </year>
Reference-contexts: Reification <ref> [Mae87, Cha94] </ref> is the ability to represent concepts of a system through elements of the system itself and is used by GOM in the sense that all major elements of GOM are modeled as objects (IDL interfaces). 2 Therefore, classes of any target model are represented as instances of the IDL
Reference: [CMI] <author> International Standards Organization. </author> <title> Common Management Information Protocol (CMIP). </title> <type> ISO / IEC 9596. </type>
Reference-contexts: TL1, Telnet etc.). In 1978, the International Standards Organization (ISO) began work to establish a standard for network management, the Open Systems Interconnection (OSI) Network Management standards, intended to create a common management protocol, the Common Management Information Protocol (CMIP) <ref> [CMI] </ref>. Because of the slowness of the standardization process, the complexity of the proposed new standard, and the urgent need for management tools, the Simple Network Management Protocol (SNMP) [CFSD90] was devised. <p> The DSI receives requests and the DII with the help of metadata stored in the IR dispatches them to instances in other ORBs. Rather than translating requests between different ORBs, bridges can also be used to translate requests between ORBs and other non-CORBA systems such as SNMP [CFSD90], CMIP <ref> [CMI] </ref>, COM [Bro94] etc. [OMG95, 9.1.2]. CORBA bridges are located at the server side and used to implement functionality, whereas GOM is at the client side and used to access functionality. CORBA request-level bridges could for example be used profitably to implement XoJIDM's interaction translation approach (see 3.1.2). <p> Queries about or changes of the state of the network can be sent only to the agent, not directly to the objects. The protocol used to interact with the agent is the Common Management Information Protocol (CMIP) <ref> [CMI] </ref>. A manager can send messages and re ceive replies over this protocol to manage the agent. An agent may also send unsolicited information asynchronously to the manager, e.g. to notify it of a problem in case of an element failure.
Reference: [CMRW96] <author> J. Case, K. McCloghrie, M. Rose, and S. Waldbusser. </author> <title> Structure of Management Information for Version 2 of the Simple Network Management Protocol (SNMPv2). </title> <booktitle> RFC 1902, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: Today, although SNMP is predominantly used, it is beginning to reach its limits. Therefore a new version (SNMPv2) has been created <ref> [CMRW96] </ref>, but its deployment has been rather low so far [Ros90a]. For historical reasons there has always been a division between tools for operating (e.g. TCP/IP, RPC) and managing (e.g. SNMP, CMIP) a networked system. <p> How asynchronous requests could be used is discussed in section 4.6.5. 33 This is the most common form as described in RFC 1157; however, other datagram services or even connection-oriented services may be used to implement SNMP. 34 This has been solved in SNMPV2 <ref> [CMRW96] </ref> with bulk retrieval. However, this version is not yet widely used. 35 Actually UDP does not guarantee delivery; packets may get lost. 4.5.
Reference: [Cop92] <author> James O. Coplien. </author> <title> Advanced C++ Programming Styles and Idioms. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: When the reference count is zero, the target object will be deleted. For a discussion of reference counted proxies see <ref> [Cop92, GHJV95] </ref>. The second case is the most frequent in GOM; a proxy lives independently from its target.
Reference: [COS95] <institution> Object Management Group. </institution> <month> CORBAservices: </month> <title> Common Object Services Specification, document 95-3-31 edition, </title> <month> March </month> <year> 1995. </year> <note> Revised Edition. </note>
Reference-contexts: The CORBA architecture includes a set of common object services (CORBAservices <ref> [COS95] </ref>), which are reusable services such as Naming, Event, Persistence etc. 2.1.2 Object Model The CORBA object model provides objects that isolate the requesters of services from the providers of services. An object encapsulates state (attributes) and behavior (operations) and offers access only through a well-defined interface. <p> This is handled in Xo-JIDM's approach using exceptions [Spe97, 4.5.2]. When a single response is returned, no exception is thrown. When multiple responses are returned, an exception is thrown that has to be caught by the application to handle the responses. Responses are collected via an event channel <ref> [COS95] </ref> using either the push- or pull model. For each GDMO template containing ACTIONs, the normal IDL interface plus two additional ones for the pull- and push models will be generated. <p> There is exactly one adapter for each object model. Its IDL interface name consists of a concatenation of the name of the object model it represents and the suffix " Adapter", e.g. "DSOM Adapter". Whenever an adapter is created, it is registered with a naming service (cf. <ref> [COS95] </ref>) using this assigned name. For example, a CMIP adapter on host "adl" would have an interface name of CMIP Adapter and would be registered with the naming service on host "adl" with key "CMIP Adapter" and value "&lt;CORBA object reference of the CMIP adapter instance&gt;". <p> See also section 4.6.4. Since the metadata repository is itself a CORBA interface, it can be located anywhere in the network. Retrieval of an object reference to it will typically be done by the CORBA naming service <ref> [COS95] </ref>. Whenever a new instance of the MR is created, it will be registered under a certain name with the naming service. Its object reference can subsequently be retrieved by any client that knows its registration name. <p> These evaluate the EFD's discriminator construct against the notification's parameters and either reject the notification or pass it on in the form of an event report to each destination specified in the destination list. 4.5.1.3 CORBA Event Service The OMG event service <ref> [COS95, SV97] </ref> allows suppliers to send events to consumers either directly or via event channels which decouple direct communication. A consumer may be notified (push model) whenever a new event has been added to an event channel, or it may retrieve (pull model) events actively from the channel. <p> Initial retrieval of an object reference to the event service will be by means of the CORBA naming service <ref> [COS95] </ref>. 4.5. EVENT HANDLING 99 Consumers may register their interest for certain types of events by creating proxy filter objects which represent a target filter object (or type) in a target system. Proxy filters have an attribute for the destinations to which any incoming event should be sent. <p> This is done by the adapter when creating a new target filter as shown in fig. 4.39. 45 The syntax is not yet determined, but syntaxes proposed e.g. for OQL [ADF + 94] or the OMG query service <ref> [COS95] </ref> could be used. 4.5. EVENT HANDLING 103 For each target filter, the adapter creates an event destination to which the target filter's destination will point. The association between the resulting proxy filter and the event destination is recorded in a table within the adapter. <p> push the event to all consumers of the proxy filter and then store it on the event queue. 46 An event destination may simply be a UNIX socket as in the case of SNMP, an AE-title in the case of OSI, or a reference to a proxy push consumer (CORBA <ref> [COS95] </ref>). What to choose as key in the table and how to match keys is largely implementation dependent. It might also be the case that keys have multiple associated proxy filters, effectively mapping multiple filters to the same destination. <p> CORBA Adapter Whenever a new target filter is created, an adapter has to create an event sink (event destination) which will receive and process all events sent out by the filter. An overview of how this can be done using CORBA's event service <ref> [COS95] </ref> is given below. When a filter is created using as name argument target name of operation CreateFilter, the name is looked up in a naming service. If not found, a new event channel is created and registered under that name with the naming service. <p> In the case of CORBA's event service, the instance name could denote the location of an event channel and a ProxyPushComsumer reference could subsequently be retrieved from the channel <ref> [COS95] </ref>. 47 In the case of OSI, the target filter could be an eventForwardingDiscriminator instance. 4. A proxy filter instance (ProxyFilter) is created that points to the target filter (attribute target filter). Attribute consumers is set to the value of the previous argument of the creation operation (consumers). <p> Transparency is achieved by providing a generic layer consisting of a synthesis of the event handling concepts found in SNMP, CMIP and CORBA, which levels the idiosyncrasies employed by the event handling schemes of different systems. The event service proposed here is modeled after CORBA's event service <ref> [COS95] </ref>, and the concept of filter objects has been taken from the OSI event report management function [ITU93]. <p> The general philosophy followed in coping with integration of idiosyncrasies is adopted from CORBA, which adds new functionality to its architecture in the form of CORBA services <ref> [COS95] </ref>. These do not require modifications to the core architecture of CORBA, but are defined using elements of CORBA's architecture (e.g. through definition of additional CORBA interfaces). <p> Therefore a mechanism has to be provided that allows clients to navigate the OSI naming tree. Keeping in mind that the proposed model is based on CORBA, we should make as much use as possible of already existing services of CORBA. In this case, the naming service <ref> [COS95] </ref> could be used. However, managed objects in an agent are not registered with 4.6. <p> Otherwise, the daemon will not do anything. This scheme duplicates certain tasks, but results in a higher probability that naming service and naming will be synchronized. Mapping Distinguished Names to the Naming Service A distinguished name would be mapped to a Name type in the naming service <ref> [COS95] </ref> which is a list of structs, each containing an id and kind field which are both string types. <p> This address is not checked for validity when set, but only when the real agent is accessed. It can therefore be modified by clients to manipulate different agents. Operation SyncNamingService accepts a naming context of a naming service <ref> [COS95] </ref> and a distinguished name (DN). It will use the address of an agent as given in agent address to register with the naming service all children below (and including) the managed object with the indicated name. <p> Whenever an application is terminated, it may save some of its proxy instances to a file and reload them when restarting the next time. A possible persistence implementation could make use of CORBA's persistence service <ref> [COS95] </ref> which provides generic services to make CORBA instances persistent, ranging from simple flat file storage to complex database management system capability. An alternative is to use GOM's simple externalization operations Dump and Read defined in interface GomElement (cf. fig. 4.4 and appendix A.1). <p> To support highly distributed managed entities, a manager has to be dis tributed as well. 3. The ever increasing size of resources, networks and information forces network management applications to be partitioned into smaller, distributed manage ment 'chunks', resulting in better scalability. 4. CORBA services <ref> [COS95] </ref> allow for reuse of functionality. Flexibility In network management there are usually a large number of managed entities, compared to only a few managers. The chance that one or more of the managed entities is modified is high.
Reference: [Cra93] <author> Daniel H. </author> <title> Craft. A study of pickling. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 5(8) </volume> <pages> 54-66, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: If this alternative is preferred, however, care has to be taken to avoid problems when for example dumping the MetaObj to a stream or when reading it back. Possible schemes for marshaling and unmarshaling structures containing circular references are described in <ref> [Gro93, Cra93, Shi94] </ref>. Of course, the alternative to be adopted has to be decided by the author of a layout and described in the layout definition. The flexible and generic structure of the meta model allows for a number of alternative approaches to handle recursion.
Reference: [Der96] <author> Luca Deri. </author> <title> Surfing Resources Across the Network. </title> <type> Technical report, </type> <institution> IBM Zurich Research Laboratory, </institution> <year> 1996. </year>
Reference-contexts: CMIP responses are converted to ANSA. Conversion code from GDMO/ASN.1 to ANSA IDL has previously been generated by a translator. Another approach for managing CMIP agents from CORBA management applications is the Liaison project described in <ref> [Der97, Der96, BD97] </ref>. At its core is the Proxy, which works similar to an HTTP server. It accepts CMIP requests, encapsulated in HTTP, dispatches them to a CMIP agent and returns the response again in the form of HTTP to the management client. <p> The Dynamic Skeleton Interface (DSI) and Dynamic Implementation Routine (DIR) [OMG95] are used at runtime on the server side to convert incoming CORBA requests to SNMP PDUs and SNMP responses to CORBA values. Liaison <ref> [Der97, Der96, BD97] </ref> allows CORBA management applications to manage SNMP agents. Aside from access to CMIP agents, it also offers access to SNMP agents. OSI managers. 3.1.
Reference: [Der97] <author> Luca Deri. </author> <title> A Component-based Architecture for Open, Independently Extensible Distributed Systems. </title> <type> PhD thesis, </type> <institution> University of Berne, </institution> <year> 1997. </year>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison <ref> [Der97] </ref> * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] <p> RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison <ref> [Der97] </ref> * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related <p> CMIP responses are converted to ANSA. Conversion code from GDMO/ASN.1 to ANSA IDL has previously been generated by a translator. Another approach for managing CMIP agents from CORBA management applications is the Liaison project described in <ref> [Der97, Der96, BD97] </ref>. At its core is the Proxy, which works similar to an HTTP server. It accepts CMIP requests, encapsulated in HTTP, dispatches them to a CMIP agent and returns the response again in the form of HTTP to the management client. <p> The Dynamic Skeleton Interface (DSI) and Dynamic Implementation Routine (DIR) [OMG95] are used at runtime on the server side to convert incoming CORBA requests to SNMP PDUs and SNMP responses to CORBA values. Liaison <ref> [Der97, Der96, BD97] </ref> allows CORBA management applications to manage SNMP agents. Aside from access to CMIP agents, it also offers access to SNMP agents. OSI managers. 3.1.
Reference: [DHR92] <author> De Meer, J., V. Heymer, and R. Roth, </author> <title> editors. Open Distributed Processing. </title> <booktitle> IFIP Transactions C-1. </booktitle> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <year> 1992. </year>
Reference-contexts: The prototype implementation uses the cmipWorks product, which offers a string-based API for ASN.1 values and implements all requests required by the CMIP protocol. 30 In terms of ODP viewpoints [ODP95, Ban96d], DII would be in the computational viewpoint and IIOP in the engineering viewpoint <ref> [ODP95, DHR92] </ref>. 31 The target's object reference is available in the proxy instance. 94 CHAPTER 4.
Reference: [DSO96] <institution> Proceedings of the Seventh IFIP / IEEE International Workshop on Distributed Systems: Operations and Management (DSOM'96). IFIP / IEEE, </institution> <address> 1996. L'Aquila, Italy. </address>
Reference: [GDM92] <author> ISO / IEC 10165-4. </author> <title> Guidelines for the Definition of Managed Objects, </title> <year> 1992. </year>
Reference-contexts: A disadvantage is that they have to be mapped to an implementation language which may involve conversion / loss of information. Examples of interface specification languages are remote procedure calls [BN84], CORBA Interface Definition Language (IDL) [OMG95], GDMO and ASN.1 <ref> [GDM92, ASN90] </ref> and TINA ODL [TIN95]. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk [GR89], C++ [Str91] or Java [Sun95]. <p> request is directed, then retrieve the information from the managed object and finally return it to the sender. 2.2.3 Specification Language Managed objects are defined using two specification languages: Abstract Syntax Notation One (ASN.1 [ASN90]) is used to define data types and Guidelines for the Definition of Managed Objects (GDMO <ref> [GDM92] </ref>) to define managed objects. The type of attributes or operation parameters contained within managed objects is defined using ASN.1, which defines atomic types such as integer, real or string and aggregate types such as lists, structs and unions. An example of ASN.1 is shown in fig. 2.4. <p> An ObjectClass is a union with the members globalForm of type OBJECT IDENTIFIER and nonSpecificForm of type INTEGER. An ObjectInstance is also a union with 3 members. ASN.1 types are assigned to attributes within managed objects as will be shown later. Managed objects are defined using GDMO <ref> [GDM92] </ref> notation. An example of GDMO is given in fig. 2.5. Each managed object class is derived from at least one other class (multiple inheritance is allowed) and contains a number of mandatory and conditional packages. A package contains attributes, actions and notifications. <p> It is for example possible to define a layout in which classes do not directly have attributes and operations, but the latter are contained in packages as is the case in GDMO <ref> [GDM92] </ref> or in interfaces as in the case of TINA [TIN95]. It is important that implementors of metadata adapters provide a precise description of their layout in order for clients to be able to use that meta model. A description of a layout has to contain the following things: 1. <p> The most important elements are briefly described below; for more information refer to <ref> [GDM92] </ref>. A GDMO name binding element defines constraints for the creation of managed objects within other objects and for their subsequent deletion, e.g. an object may not be deleted if it contains other objects. A class template element is the definition from which managed objects can be instantiated. <p> It contains a number of mandatory and conditional packages. The contents of mandatory packages always have to be included in the resulting managed object instance, whereas the contents of conditional packages are only included when certain conditions apply (cf. <ref> [GDM92] </ref>). 16 Packages contain attributes, actions (operations) and notifications. <p> Metadata of target models should be described whenever possible using the existing IDL interfaces of CORBA's Interface Repository. If this is not possible, e.g. in the case of GDMO packages in a GDMO class template (cf. <ref> [GDM92] </ref>), the corresponding IR element (e.g. an InterfaceDef) must be subclassed by the metadata provider to accommodate the additional information, e.g. in an IDL interface X700 InterfaceDef. <p> Since an attribute in a GDMO template needs to record more information than its CORBA counterpart (such as the package to which it belongs and initialization and access constraints such as initial, default, permitted and required values <ref> [GDM92, section 8.4.3.2] </ref>), AttributeDef cannot be used. Therefore, a subclass of AttributeDef needs to be created (X700 AttributeDef) that provides the additional information. This is demonstrated in fig. 4.34. As shown, metadata about a GDMO attribute is kept in an instance of a subclass of IR's AttributeDef interface. <p> See [Maf95] and [Bir96] for a detailed discussion of fault-tolerant group communication mechanisms. 64 Called linked replies in OSI parlance. 4.6. OTHER ISSUES 121 4.6.2.5 OSI Attribute Groups Attribute groups are defined in <ref> [GDM92, 8.8] </ref>. An attribute group consists of a number of attributes under a single name (OID). The attributes that make up the group may be defined to be fixed in the GDMO specification, which means that no member may be removed or added at runtime, or they may be extensible.
Reference: [Gen96] <author> Guy Genilloud. </author> <title> Towards A Distributed Architecture For Systems Management. </title> <type> PhD thesis, </type> <institution> Ecole Polytechnique Federale de Lausanne, </institution> <year> 1996. </year> <note> Thesis No. 1588. </note>
Reference-contexts: There are indications that CORBA is becoming an important technology for implementing both management- and managed entities. The success of Tivoli's management framework [Tiv95], which is based entirely on CORBA, is a strong indicator of this. Genilloud <ref> [Gen96] </ref> reinforces this argument by stating that "distributed objects are thus the paradigm that will allow systems management to converge towards one single, homogeneous and global management architecture". Still, there exist a variety of legacy systems for management purposes. <p> RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud <ref> [GG95, GP95, Gen96] </ref> * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] <p> Both static translation and runtime conversion code were generated manually, but the intention was to make use of an already existing tool (Managed Object Agent Composer [MOA94]) to automate both tasks. This work is similar to the solution described in <ref> [Gen96, ch. 4.3] </ref> which proposes to upgrade existing OSI agents with IDL interfaces to the managed objects. <p> This work is similar to the solution described in [Gen96, ch. 4.3] which proposes to upgrade existing OSI agents with IDL interfaces to the managed objects. Related work done on managing OSI objects from ANSA [ANS93] managers is described in <ref> [GG95, GP95, Gen96] </ref>. 6 This approach can also be divided in a translation part and a 4 Although CMIP actually only denotes the protocol used for communication between manager and agent in the OSI management model, in practice it is often used in a pars pro toto meaning, denoting the entire <p> Some of them are described below. A more detailed description of problems of specification translation is given in <ref> [Gen96, 152-167] </ref>. 3.1.2.2 Multiple Replies A GDMO ACTION may return a single or multiple responses. This is handled in Xo-JIDM's approach using exceptions [Spe97, 4.5.2]. When a single response is returned, no exception is thrown. <p> This code may only be used a fraction of the time but nevertheless increases the size of the code and may impair readability. <ref> [Gen96, 4.6.8] </ref> describes a scheme called flexible translation to solve this problem. <p> For each attribute, there are up to 5 operations to get, set, set to default, add and remove an attribute (see [Spe97, 4.3]), leading to increased code size. Genilloud <ref> [Gen96, 4.3.3] </ref> describes this problem in more detail. A characteristic of CMIP is that multiple attributes can be set or retrieved with a single request. This has been taken into account by providing generic get- and set methods, but this actually defies the purpose of JIDM's strong typing concept. <p> This has been taken into account by providing generic get- and set methods, but this actually defies the purpose of JIDM's strong typing concept. Further problems concerning the manipulation of GDMO attribute groups are described in <ref> [Gen96, 4.6.9.1] </ref>. 3.1.2.4 Conditional Packages Actions, attributes and notifications of GDMO conditional packages may or may not be present in a managed object instantiated from a GDMO template. The JIDM translation algorithm by default includes all conditional packages that might possibly be instantiated in the resulting IDL interface [Spe97, 4.2]. <p> SUMMARY 33 GOM's event handling model (4.5) is generic and does not take into account typed events/notifications. Therefore, a significant code reduction can be achieved. Problems of mapping notifications to IDL operations are described in further detail in <ref> [Gen96, 4.6.10] </ref>. 3.1.2.6 Recursive ASN.1 Types As IDL does not support recursive types (except with sequences), the JIDM translation algorithms supports only direct recursion using sequences of length 1. Indirect recursion is not supported. Genilloud states that recursion can best be supported through manual intervention (flexible translation) [Gen96, 4.6.3]. <p> Indirect recursion is not supported. Genilloud states that recursion can best be supported through manual intervention (flexible translation) <ref> [Gen96, 4.6.3] </ref>. GOM allows to map recursive data types in a simple manner both in the instance- and meta model (see section 4.6.2.6). 3.2 Summary A few characteristics common to most approaches are described here. <p> whenever an event is pushed on the proxy push consumer instance, the following steps are taken: (1) the corresponding proxy filter is looked up in the table using the object reference of the proxy push consumer instance on which the event was received. 46 A similar solution is described in <ref> [Gen96, ch. 4.5.3] </ref>. 104 CHAPTER 4. THE GENERIC OBJECT MODEL (2) The event information carried in the event is converted to a generic GOM event value and (3) pushed to all consumers registered with the proxy filter instance. <p> The effect would be that, when the next operation is invoked on the proxy, it would most probably fail. Genilloud <ref> [Gen96, 4.5.4.1] </ref> describes a scheme how this problem could be solved using OSI notifications. SNMP variables are rather static; there is no dynamic creation and deletion of variables, therefore the problem described above will not occur.
Reference: [GG95] <author> Genilloud Guy and David Gay. </author> <title> Accessing OSI Managed Objects From AN-SAware. </title> <booktitle> In Proceedings of the Sixth IFIP / IEEE International Workshop on Distributed Systems: Operations and Management (DSOM'95). IFIP / IEEE, 1995. </booktitle> <address> Ottawa, Canada. </address>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud <ref> [GG95, GP95, Gen96] </ref> * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] <p> This work is similar to the solution described in [Gen96, ch. 4.3] which proposes to upgrade existing OSI agents with IDL interfaces to the managed objects. Related work done on managing OSI objects from ANSA [ANS93] managers is described in <ref> [GG95, GP95, Gen96] </ref>. 6 This approach can also be divided in a translation part and a 4 Although CMIP actually only denotes the protocol used for communication between manager and agent in the OSI management model, in practice it is often used in a pars pro toto meaning, denoting the entire
Reference: [GHJV95] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <note> 182 BIBLIOGRAPHY </note>
Reference-contexts: Proxy instances can be manipulated by applications as if they were normal instances, but rather than maintaining functionality of their own, operations invoked on them will be processed by GOM, which performs type checking, conversion, dispatching to the corresponding instance in the target system and conversion of return value <ref> [GHJV95] </ref>. All of these tasks are actually performed by adapters. An adapter is a bridge between the generic object model and exactly one specific target model. It type-checks, converts and dispatches requests between them. <p> To get an attribute T, an accessor method T () is defined and to set it, the accessor method has the signature T (const T ptr). 18 Offering different interfaces to existing classes employs the adapter design pattern <ref> [GHJV95] </ref>. 19 According to the OMG's C++ language binding as defined in [OMG95, ch. 16]. 74 CHAPTER 4. <p> If the target class that the instance of GenObj represents does not have a variable with the same name as the message selector, it is 21 This mechanism is known as Proxy pattern and is described in <ref> [GHJV95, P. 215] </ref>. 4.2. <p> GOM's ability to construct values at runtime is an advantage compared to static mapping approaches in the case of recursive types. It was shown that both meta- and instance-data for recursive types can be modeled using GOM. 4.6.3 The Proxy Principle A proxy ([Sha86] <ref> [GHJV95] </ref>) is a placeholder for a different usually remote target object. The proxy is generic in that it can represent instances from various target models. Proxies 'know' which targets they represent, whereas target instances do not know about their proxies (or proxies in general). <p> When the reference count is zero, the target object will be deleted. For a discussion of reference counted proxies see <ref> [Cop92, GHJV95] </ref>. The second case is the most frequent in GOM; a proxy lives independently from its target.
Reference: [GMR94] <author> G. Geiger, A. Majtenyi, and P. Reder. </author> <title> IBM cmipWorks. </title> <type> Technical report, </type> <institution> IBM Corporation, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Deletion of a proxy instance by other means such as the delete operator in the C++ bindings will only cause deletion of the proxy, but not of the target instance. Getting the value of an attribute 8 In string syntax as defined in <ref> [GMR94] </ref>. 4.2. OBJECT MODEL 55 GenObj_ptr person; Long_ptr age; try - age=(Long_ptr)person-&gt;Get ("age"); cout &lt;< "Age is " &lt;< age-&gt;val () &lt;< endl; - catch (GenEx& ex) - /* Error */ - 1. Operation Get is invoked on a proxy instance. 2. <p> There are a number of APIs, most of them in the form of C-libraries, that communicate with an OSI stack to produce requests for the CMIP protocol. Some examples are X/Open's XOM/XMP [XOM94], its successor TMN/C++ [TMN96] or IBM's cmipWorks <ref> [GMR94] </ref>. <p> This is for example the case when an agent does not support notifications. 60 59 The form of the string is taken from the string-syntax proposed in <ref> [GMR94] </ref>, but other schemes are also conceivable. 60 OSI agents are not required to support the entire functionality. The feature set supported by an agent is given in a functional unit that can be negotiated between manager and agent when establishing an association [Bla92, p. 158]. 4.6. <p> The uniform programming model of GOM enables an interpreter writer to base the interpreter on the same homogeneous API, rather than having to use a separate API for each 3 In string-syntax form as defined in <ref> [GMR94] </ref>. 4 Note that both name srv and obj internally point to a GOM proxy instance, which itself has a reference to the corresponding target instance in either the CORBA- or CMIP object model. 5.2. ROAMING AGENTS 133 model. <p> It is hoped that they can be integrated after the fact ... Prototype A prototype implementation of some of the concepts presented has been made. It currently comprises the generic object model, metadata repository and two adapters (for CORBA [SOM94] and CMIP <ref> [GMR94] </ref>). On the basis of this prototype, a few test applications have been developed for feasibility study.
Reference: [GP95] <author> Guy Genilloud and Marc Polizzi. </author> <title> Managing ANSA Objects with OSI Network Management Tools. </title> <type> Technical report, </type> <institution> EPFL, </institution> <year> 1995. </year>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud <ref> [GG95, GP95, Gen96] </ref> * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] <p> This work is similar to the solution described in [Gen96, ch. 4.3] which proposes to upgrade existing OSI agents with IDL interfaces to the managed objects. Related work done on managing OSI objects from ANSA [ANS93] managers is described in <ref> [GG95, GP95, Gen96] </ref>. 6 This approach can also be divided in a translation part and a 4 Although CMIP actually only denotes the protocol used for communication between manager and agent in the OSI management model, in practice it is often used in a pars pro toto meaning, denoting the entire
Reference: [GR89] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80. The Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Examples of interface specification languages are remote procedure calls [BN84], CORBA Interface Definition Language (IDL) [OMG95], GDMO and ASN.1 [GDM92, ASN90] and TINA ODL [TIN95]. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk <ref> [GR89] </ref>, C++ [Str91] or Java [Sun95]. Many object models for distributed systems are based on specification languages to define the system interfaces and then perform a mapping to an implementation language. <p> Object-oriented languages can either be untyped or strongly typed [Weg90]. Untyped languages have no explicit type system and no type-checking is performed upon assignment between values. Examples of untyped languages are Lisp [Ste90a] and Smalltalk <ref> [GR89] </ref>. 4.2. OBJECT MODEL 81 | printer retVal doc num args factory | printer := NameServer at: 'psp30d'. doc := factory create: 'CORBA' className: 'Defs::Document' instName: nil proxyLocation: nil targetLocation: 'adlerhorn.zurich.ibm.com' args: nil. doc name: '/etc/passwd'. retVal := printer Print: doc numberOfCopies: 2. retVal printNl. <p> Using the proposed model, clients only 'pay' for what they actually use. Language Bindings As GOM is based on reification (everything is an object), it fits best with languages that are reified as well, such as Smalltalk or Lisp <ref> [GR89, Ste90a] </ref>. With these languages, 139 GOM objects can be manipulated in a way that is natural to Smalltalk using convenience bindings, without having to resort to auxiliary methods such as Get-, Set or Execute.
Reference: [Gro93] <author> Mark Grossman. </author> <title> Object I/O and runtime type information via automatic code generation in C++. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 6(4) </volume> <pages> 34-42, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: If this alternative is preferred, however, care has to be taken to avoid problems when for example dumping the MetaObj to a stream or when reading it back. Possible schemes for marshaling and unmarshaling structures containing circular references are described in <ref> [Gro93, Cra93, Shi94] </ref>. Of course, the alternative to be adopted has to be decided by the author of a layout and described in the layout definition. The flexible and generic structure of the meta model allows for a number of alternative approaches to handle recursion.
Reference: [Hie94] <author> Juan J. Hierro. </author> <title> Architectural Issues for Using CORBA Technology in OSI Systems Management. Append to XoJIDM mailing list, </title> <month> July </month> <year> 1994. </year>
Reference-contexts: Management Domain = CMIP, Managed Domain = CORBA The subject of this research area is how a CMIP manager can manage objects in the CORBA domain. The XoJIDM task force considers in its prospective Interaction Translation document <ref> [Int95, Hie94, Hie96b, Sou94b, Sou94d] </ref> the use of a proxy agent (controller) to receive CMIP requests and dispatch them to CORBA objects using the Dynamic Invocation Interface (DII). <p> Note, however, that the final document may or may not be in line with the submitted proposals wrt. its contents. The proposals that deal with CORBA manager managing OSI agents are specifically <ref> [Hie94, Hie96b, Sou94c] </ref>. 3.1. INTER-DOMAIN MANAGEMENT 31 is subsequently converted to CORBA 17 and returned to the client.
Reference: [Hie96a] <author> Juan Hierro. </author> <title> Management information repository. Submitted by Telefonica I&D to the NMF - X/Open Joint Inter-Domain Management Taskforce as proposal for Interaction Translation, </title> <month> March </month> <year> 1996. </year>
Reference-contexts: The interfaces offered for the instance-and meta-model are therefore unlike GOM's approach not based on the same object model. 4.3.3.2 Management Interface Repository The work described in <ref> [Hie96a] </ref> is part of a proposal for XoJIDM's Interaction Translation (cf. section 3.1.2).
Reference: [Hie96b] <author> Juan J. Hierro. </author> <title> Common Facilities for OSI Management. </title> <note> Submitted to Xo-JIDM mailing list, February 1996. Submitted as proposal for XoJIDM Interaction Translation. </note>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM <ref> [Int95, Hie96b, Sou94c] </ref> * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] <p> RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM <ref> [Hie96b, Sou94b, Sou94d] </ref> * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> Management Domain = CMIP, Managed Domain = CORBA The subject of this research area is how a CMIP manager can manage objects in the CORBA domain. The XoJIDM task force considers in its prospective Interaction Translation document <ref> [Int95, Hie94, Hie96b, Sou94b, Sou94d] </ref> the use of a proxy agent (controller) to receive CMIP requests and dispatch them to CORBA objects using the Dynamic Invocation Interface (DII). <p> Note, however, that the final document may or may not be in line with the submitted proposals wrt. its contents. The proposals that deal with CORBA manager managing OSI agents are specifically <ref> [Hie94, Hie96b, Sou94c] </ref>. 3.1. INTER-DOMAIN MANAGEMENT 31 is subsequently converted to CORBA 17 and returned to the client.
Reference: [HPSK96] <author> James Won-Ki Hong, Jong-Tae Park, Joong-Gu Song, and Sung-Bum Kim. </author> <title> Implementation and Performance of a TMN SMK System. </title> <booktitle> In DSOM [DSO96]. </booktitle> <address> L'Aquila, Italy. </address>
Reference-contexts: Also, since the first response is used, performance of the overall service would increase. 4.3.3 Related Work 4.3.3.1 SMK Work being done on implementing OSI's Shared Management Knowledge (SMK) management function [X7593, TMN95] is described in <ref> [HPSK96, PHHS96] </ref>. The SMK function is implemented in CORBA and consists of translating the SMK definitions (GDMO/ASN.1) to CORBA IDL following XoJIDM's specification translation proposal [Spe97] and implementing the resulting IDL interfaces in an OSI agent. Management knowledge consists of the following elements: * Instance and instance relationship (Instance Model).
Reference: [IBM96] <institution> IBM Corporation. IBM SOMobjects Java Client, </institution> <year> 1996. </year>
Reference-contexts: Rather than sending the entire DBMS code to the client, it makes more sense to send down a Java applet that implements the GUI functionality which subsequently accesses the CORBA DBMS as a CORBA client. There are some projects that deal with implementing CORBA access from Java via IIOP <ref> [Joe96, IBM96, Sat96, Ion96] </ref>. In this thesis, the author is concerned mainly with the management of static functionality, i.e. with the creation and manipulation of instances located in servers 6 via proxies in the client's address space.
Reference: [INM93] <institution> Information Systems Integrated Network Management III. </institution> <address> Elsevier North-Holland, </address> <year> 1993. </year>
Reference: [Int95] <editor> Joint Inter Domain Management Working Group, </editor> <title> X/Open and Network Management Forum. Inter Domain Management Specifications: Preliminary CORBA / CMISE Interaction Translation Architecture, </title> <month> April </month> <year> 1995. </year> <note> http://www.rdg.opengroup.org/mem only/tech/sysman/jidm/it.htm. </note>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM <ref> [Int95, Hie96b, Sou94c] </ref> * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] <p> Management Domain = CMIP, Managed Domain = CORBA The subject of this research area is how a CMIP manager can manage objects in the CORBA domain. The XoJIDM task force considers in its prospective Interaction Translation document <ref> [Int95, Hie94, Hie96b, Sou94b, Sou94d] </ref> the use of a proxy agent (controller) to receive CMIP requests and dispatch them to CORBA objects using the Dynamic Invocation Interface (DII). <p> The approach chosen involves translation of an OSI agent specification (GDMO / ASN.1) to CORBA IDL (Specification Translation [Spe97]) and subsequent runtime conversion of CORBA requests to CMIP and back (Interaction Translation <ref> [Int95] </ref>). CORBA clients include the language bindings of the IDL specification generated by a GDMO / ASN.1 to IDL translator. Specification Translation defines a mapping from GDMO and ASN.1 to IDL as shown in table. 3.2. <p> This thesis focuses on multi-domain management with the common management domain being CORBA and the managed domains being CMIP, CORBA and (to a lesser extent) SNMP. It will be contrasted mainly with the approach proposed by XoJIDM <ref> [Spe97, Int95] </ref> 19 , which has some limitations: * Clients have to know the types of classes they will be managing; this is typically done by compile-time inclusion of generated client stubs, which creates a tight binding 18 This implies that the exactly same specification of domain A cannot be re-engineered
Reference: [Ion96] <author> Iona Technolgies. </author> <title> OrbixWeb For Java, </title> <year> 1996. </year>
Reference-contexts: Rather than sending the entire DBMS code to the client, it makes more sense to send down a Java applet that implements the GUI functionality which subsequently accesses the CORBA DBMS as a CORBA client. There are some projects that deal with implementing CORBA access from Java via IIOP <ref> [Joe96, IBM96, Sat96, Ion96] </ref>. In this thesis, the author is concerned mainly with the management of static functionality, i.e. with the creation and manipulation of instances located in servers 6 via proxies in the client's address space.
Reference: [ITU92a] <author> ITU-T | ISO/IEC. </author> <title> ITU-T X.700 | ISO/IEC 7498-4: Management Framework For Open Systems Interconnection, </title> <month> September </month> <year> 1992. </year>
Reference-contexts: Typically this transformation is performed by a translator/compiler. Second, the model must offer certain dynamic capabilities such as creation of instances given the class name (as a string) and invocation of operations on instances given the name of the operation. Some models already offer such an API, e.g. CMIP <ref> [ITU92a] </ref>, CORBA's DII or IIOP [OMG95], COM's IDispatch interface [Box95] and Java's Core Reflection API [Sun96]. <p> generic request-level bridge would even go a step further: requests could be bridged between the models of CORBA in addition to those of SNMP and CMIP. 2.2 OSI Network Management (CMIP) 2.2.1 Architecture OSI Network Management 6 has been defined by the joint ISO / ITU-T standard documents X.7xx 7 <ref> [ITU92a, ITU92b, ITU92c] </ref>. The approach proposed by X.700 8 is to place an agent close to the information that is relevant to be managed and / or monitored (cf. fig. 2.3). <p> used to attach a description to an instance, e.g. in the case of CMIP it could represent the distinguished name (<ref> [ITU92a] </ref>). 5 If modules or similar name space structuring mechanisms are used, then the fully specified name has to be used. 6 Target system dependent, e.g. an AE-title in CMIP [ITU92a], or the name of a CORBA server. 52 CHAPTER 4. THE GENERIC OBJECT MODEL enum completion_status -COMPLETED_YES, COMPLETED_NO, COMPLETED_MAYBE-; exception X - unsigned long minor; completion_status completed; -; To create values that represent constants in target systems, operation GetConstant can be used. <p> Deletion The Delete operation of GenObj deletes first the target instance and if successful also the proxy instance. If the target instance cannot be deleted, an exception of type GenEx is thrown, indicating the cause of the failure. Note that in some cases (such as CMIP <ref> [ITU92a] </ref>), objects may contain subordinate objects (children objects) that may have to be deleted before the parent object can be deleted. Trying to delete an instance containing children will result in an exception. <p> Moreover, information needed by a manager to establish an association to an agent is available which enables OSI managers to bind dynamically to agents using the information returned by the SMK function (such as the agent's presentation address, application entity name (AE-title) and protocol <ref> [ITU92a, ITU92b] </ref>). The SMK function deals specifically with metadata about OSI agents' MIB's and is not designed to integrate other types of metadata, as this is not its purpose. It would be impossible or at best awkward to add metadata about CORBA interfaces to the SMK function. <p> To do this it may need to access the proxy instance (on which the operation was invoked) to retrieve specific information needed for this communication, such as for example a CORBA object reference [OMG95], or an OSI AE-title and distinguished name <ref> [ITU92a] </ref>. The flow of a request through the system is depicted in fig. 4.36. Consider the case when a client invokes an operation on a proxy instance using operation Execute (1).
Reference: [ITU92b] <author> ITU-T | ISO/IEC. </author> <title> ITU-T X.701 | ISO/IEC 10040: Information Technology Open Systems Interconnection Systems Management Overview, </title> <year> 1992. </year>
Reference-contexts: generic request-level bridge would even go a step further: requests could be bridged between the models of CORBA in addition to those of SNMP and CMIP. 2.2 OSI Network Management (CMIP) 2.2.1 Architecture OSI Network Management 6 has been defined by the joint ISO / ITU-T standard documents X.7xx 7 <ref> [ITU92a, ITU92b, ITU92c] </ref>. The approach proposed by X.700 8 is to place an agent close to the information that is relevant to be managed and / or monitored (cf. fig. 2.3). <p> Moreover, information needed by a manager to establish an association to an agent is available which enables OSI managers to bind dynamically to agents using the information returned by the SMK function (such as the agent's presentation address, application entity name (AE-title) and protocol <ref> [ITU92a, ITU92b] </ref>). The SMK function deals specifically with metadata about OSI agents' MIB's and is not designed to integrate other types of metadata, as this is not its purpose. It would be impossible or at best awkward to add metadata about CORBA interfaces to the SMK function.
Reference: [ITU92c] <author> ITU-T | ISO/IEC. </author> <title> ITU-T X.720 | ISO/IEC 10165-1: Information Technology Open Systems Interconnection Structure Of Management Information: Management Information Model, </title> <month> January </month> <year> 1992. </year> <note> BIBLIOGRAPHY 183 </note>
Reference-contexts: generic request-level bridge would even go a step further: requests could be bridged between the models of CORBA in addition to those of SNMP and CMIP. 2.2 OSI Network Management (CMIP) 2.2.1 Architecture OSI Network Management 6 has been defined by the joint ISO / ITU-T standard documents X.7xx 7 <ref> [ITU92a, ITU92b, ITU92c] </ref>. The approach proposed by X.700 8 is to place an agent close to the information that is relevant to be managed and / or monitored (cf. fig. 2.3).
Reference: [ITU93] <author> ITU-T. </author> <title> ITU-T X.734: Data Communication Networks. Information Technology Open Systems Interconnection Systems Management: Event Report Management Function, </title> <note> 1993. Recommendation X.734. </note>
Reference-contexts: Proxy filters have two attributes: * A reference to the target filter and * A list of consumers to which incoming events will be forwarded. The target filter may be an instance (e.g. a managed object of template eventForwardingDiscriminator in <ref> [ITU93] </ref>) or a value (e.g. a struct). It will typically contain a filter construct against which potential events are evaluated (cf. fig. 4.37) and forwarded or discarded, and accordingly a list of destinations to which passed events will be forwarded. <p> The event service proposed here is modeled after CORBA's event service [COS95], and the concept of filter objects has been taken from the OSI event report management function <ref> [ITU93] </ref>. In line with the philosophy of GOM, new event handling schemes can be integrated by provisioning additional adapters which constitute a bridge to the new system, knowing how to create filters in these systems and how to receive and convert events to the generic form. <p> Sending an SNMP Trap SNMP traps are usually sent from agent to manager. However, a manager may also wish to send traps, e.g. to another manager to inform it of some problems. Unlike CMIP's event report management function <ref> [ITU93] </ref>, SNMP does not define a mechanism that records to which manager (s) a trap is to be sent, and how managers register for traps with an SNMP agent; RFC 1157 leaves this behavior implementation-specific.
Reference: [Joe96] <author> Sun Microsystems. Joe: </author> <title> Developing Client/Server Applications for the Web, </title> <year> 1996. </year>
Reference-contexts: Rather than sending the entire DBMS code to the client, it makes more sense to send down a Java applet that implements the GUI functionality which subsequently accesses the CORBA DBMS as a CORBA client. There are some projects that deal with implementing CORBA access from Java via IIOP <ref> [Joe96, IBM96, Sat96, Ion96] </ref>. In this thesis, the author is concerned mainly with the management of static functionality, i.e. with the creation and manipulation of instances located in servers 6 via proxies in the client's address space.
Reference: [Kam90] <author> Samuel N. Kamin. </author> <title> Programming Languages: An Interpreter-Based Approach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: SCOPE 7 1.3.4.1 Dynamic Code Paradigm Code is sent from one location to another to be executed. Examples are Java applets [Sun95] or TeleScript intelligent agents [Whi94]. A Java applet is essentially byte code for a virtual machine <ref> [ASU86, Kam90] </ref> that is sent to a location running a virtual machine interpreter, which then executes it. Thus, code is always sent from a server to a client.
Reference: [KQM95] <institution> Knowledge Query and Manipulation Language, </institution> <year> 1995. </year> <note> http://www.cs.umbc.edu/kqml/kqml95/kqml95.html. </note>
Reference-contexts: ROAMING AGENTS 135 implementation would be yet more flexible in reasoning about unknown classes. While semantically attributed languages are still largely a research topic with many differing schemes being proposed, a standard has been evolving that proposes to merge various approaches <ref> [KQM95] </ref>. From the discussion above, it is clear that roaming agents have to be very flexible. They cannot possibly know the extent of classes they will encounter on their trips since the set of classes to handle will likely be non-finite.
Reference: [KS93] <author> Pramod Kalyanasundaram and Adarshpal S. Sethi. </author> <title> An Application Gateway Design for OSI-Internet Management. </title> <booktitle> In INM [INM93], </booktitle> <pages> pages 389-401. </pages>
Reference-contexts: [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * <ref> [KS93] </ref> * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> Unlike in the above approach, translation of SNMP MIBs to OSI MIBs is automated. The gateway agent implements a name mapping from OSI names to SNMP variable names and a service mapping that maps CMIP requests to their SNMP counterparts. The work described in <ref> [KS93] </ref> realizes an application gateway (cf. [Ros90b]) between OSI manager and SNMP agent, which is essentially an OSI agent acting as an SNMP manager and converting requests between the two domains.
Reference: [LaB93a] <author> Lee LaBarre. </author> <note> Translation of Internet MIB-II (RFC1213) to ISO/CCITT GDMO MIB. Technical Report Issue 1.0, </note> <institution> Network Management Forum, </institution> <month> Oc-tober </month> <year> 1993. </year>
Reference-contexts: * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] <ref> [LaB93b, LaB93a] </ref> Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. INTER-DOMAIN MANAGEMENT 25 Inter-Domain Management therefore deals with management of one domain through a different domain, e.g. management of an OSI agent through a CORBA manager.
Reference: [LaB93b] <author> Lee LaBarre. </author> <note> Translation of Internet MIBs to ISO/CCITT GDMO MIBs. Technical Report Issue 1.0, </note> <institution> Network Management Forum, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] <ref> [LaB93b, LaB93a] </ref> Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. INTER-DOMAIN MANAGEMENT 25 Inter-Domain Management therefore deals with management of one domain through a different domain, e.g. management of an OSI agent through a CORBA manager. <p> This work is based on the Network Management Forum's ISO/ITU-T and Internet Management Coexistence (IIMC) activities, which define mappings between SNMP/CMIP and vice versa <ref> [LaB93b, Cha93] </ref>. A compiler has been written following the IIMC approach for mapping SNMP MIBs to OSI MIBs. The resulting GDMO code is already enriched with code that translates CMIP- to SNMP -requests and can be compiled into an OSI agent [Pav93].
Reference: [LF93] <author> Allan Leinwand and Karen Fang. </author> <title> Network Management. A Practical Perspective. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: It is thus possible to delete an entire subtree of managed 20 CHAPTER 2. TARGET OBJECT MODELS object instances with a single request. 11 2.3 SNMP 2.3.1 Architecture The Simple Network Management Protocol <ref> [Bla92, CFSD90, LF93] </ref> is a wide-spread Internet standard for network management, mainly due to its simplicity and dissemination. Its architecture is conceptually similar to that of OSI network management. <p> These represent information in the agent's Management Information Base (MIB) and can be accessed using a unique object identifier. An object identifier is a node in a global naming tree whose structure is jointly administered by the ISO/ITU-T standards bodies (cf. <ref> [LF93, ch. 7, p. 122] </ref>). New object identifiers (for new MIBs) can be added to the leaves of the tree in a well-defined manner. Object identifiers can conceptually be compared to OSI distinguished names and CORBA object references since they unambiguously identify a variable or object, respectively.
Reference: [LS88] <author> B. Liskov and L. Shrira. </author> <title> Promises: Linguistic support for efficient asynchronous procedure calls in distributed systems. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 23(7), </volume> <month> July </month> <year> 1988. </year>
Reference-contexts: Deferred-asynchronous operations usually require a token from the caller on which caller and callee can synchronize. An example for such tokens are promises <ref> [LS88] </ref>. These are part of an asynchronous-deferred operation's parameter list and are used by the callee to store the results and signal that the operation has finished, and by the caller to determine whether the operation has terminated and to fetch the result (s).
Reference: [Mae87] <editor> Pattie Maes. </editor> <title> Concepts and experiments in computational reflection. </title> <booktitle> In Proceedings OOPSLA '87, ACM SIGPLAN Notices, </booktitle> <pages> pages 147-155, </pages> <month> December </month> <year> 1987. </year> <title> Published as Proceedings OOPSLA '87, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> volume 22, number 12. </volume>
Reference-contexts: Reification <ref> [Mae87, Cha94] </ref> is the ability to represent concepts of a system through elements of the system itself and is used by GOM in the sense that all major elements of GOM are modeled as objects (IDL interfaces). 2 Therefore, classes of any target model are represented as instances of the IDL
Reference: [Maf95] <author> Silvano Maffeis. </author> <title> Run-Time Support for Object-Oriented Distributed Programming. </title> <type> PhD thesis, </type> <institution> Institute of Computer Science, University of Zurich, </institution> <year> 1995. </year>
Reference-contexts: B.2). Operations SetProperty and GetProperty allow to attach or retrieve additional state to an instance of GenObj (cf. discussion of attribute properties above). The target systems supported by GOM may have different mechanisms and semantics for operation invocation such as group communication <ref> [Maf95] </ref> where an operation call may return a number of results (or will use the first result returned), or asynchronous operations where an operation invocation is handled by a separate thread. An asynchronous operation returns immediately and the result can be fetched at a later time. <p> Its object reference can subsequently be retrieved by any client that knows its registration name. There may be a number of MRs in a network that clients can access. However, for performance reasons, clients will typically try to access the MR closest to them. Process group mechanisms <ref> [Maf95, Bir96] </ref> could be used to increase availability and performance of the MR service. Instead of creating one central instance of an MR, a number of instances would be created in several locations, forming a group. <p> Instead it was chosen to regard scoping and filtering as a way to select a number of managed objects on which an operation can then be invoked. Therefore the concept of a group object <ref> [Maf95, Bir96] </ref> is introduced. A group object is a container for a number of group members. A request sent to it will be sent transparently 4.6. OTHER ISSUES 119 to all members of the group. <p> See <ref> [Maf95] </ref> and [Bir96] for a detailed discussion of fault-tolerant group communication mechanisms. 64 Called linked replies in OSI parlance. 4.6. OTHER ISSUES 121 4.6.2.5 OSI Attribute Groups Attribute groups are defined in [GDM92, 8.8]. An attribute group consists of a number of attributes under a single name (OID). <p> Below a proposal is presented which extends GOM to take into account asynchronous execution. There are three main kinds of asynchronous execution <ref> [Maf95, 3.4] </ref>: Oneway-asynchronous Operations invoked by callers which return no result and which do not guarantee delivery of operation to receiver. An example of this execution model are oneway operations in CORBA; these must not have a return value and are delivered on a best-effort basis. <p> Second, all elements of GOM can be distributed in a network, resulting in better load-balancing and availability of management services. For example the metadata repository 130 CHAPTER 4. THE GENERIC OBJECT MODEL might be replicated on multiple nodes, effectively forming a process group <ref> [Maf95, Bir96] </ref>. A request sent to the CORBA (group) object reference that represents the metadata repository might use the first response returned, which makes the MR reliable, highly available and efficient. Moreover, management of wide-area networks is becoming increasingly decentralized because applications and services are distributed themselves.
Reference: [Mas97] <author> Introduction to Mascotte. White Paper, </author> <month> May </month> <year> 1997. </year> <title> Esprit Project: </title> <journal> 20804, </journal> <note> version 2.0. </note>
Reference-contexts: CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte <ref> [Mas97] </ref> * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> The approach makes use of XoJIDM's Specification Translation document [Spe97, part 4], which defines a mapping from IDL to GDMO/ASN.1. The Mascotte project <ref> [Mas97] </ref> deals with how the various elements of a CORBA system can be managed using CORBA itself on the manager side. To achieve this, CORBA IDL interfaces have been defined for a number of entities such as the basic object adapter, the ORB core etc.
Reference: [Maz96] <author> Subrata Mazumdar. </author> <title> Inter-Domain Management between CORBA and SNMP: CORBA/SNMP Gateway Approach to WEB-based Management. </title> <booktitle> In DSOM [DSO96]. </booktitle> <address> L'Aquila, Italy. </address>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar <ref> [Maz96] </ref> * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the <p> [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar <ref> [Maz96] </ref> * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. INTER-DOMAIN MANAGEMENT 25 Inter-Domain Management therefore deals with management of one domain through a different domain, e.g. management of an OSI agent through a CORBA manager. <p> XoJIDM has defined a translation algorithm that maps CORBA IDL to SNMP [Spe97, Part 6]. Following this work, <ref> [Maz96] </ref> describes an approach in which SNMP MIBs are translated to CORBA IDL. The Dynamic Skeleton Interface (DSI) and Dynamic Implementation Routine (DIR) [OMG95] are used at runtime on the server side to convert incoming CORBA requests to SNMP PDUs and SNMP responses to CORBA values. <p> Management Domain = SNMP, Managed Domain = CORBA Work in this area deals with enabling SNMP mangers to manage CORBA objects. XoJIDM's specification translation document [Spe97, Part 5] defines a mapping from SNMP to OMG IDL. <ref> [Maz96] </ref> describes an implementation that makes use of this mapping. It consists of a CORBA-based agent that acts as an SNMP agent (using CMU's 11 SNMP library). Incoming SNMP PDUs are converted to CORBA requests and CORBA events are mapped to SNMP traps.
Reference: [MBL93] <author> Subrata Mazumdar, Stephen Brady, and David L. Levine. </author> <title> Design of Protocol Independent Management Agent to Support SNMP and CMIP Queries. </title> <booktitle> In INM [INM93], </booktitle> <pages> pages 377-389. 184 BIBLIOGRAPHY </pages>
Reference-contexts: [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent <ref> [MBL93] </ref> [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. INTER-DOMAIN MANAGEMENT 25 Inter-Domain Management therefore deals with management of one domain through a different domain, e.g. management of an OSI agent through a CORBA manager. <p> Incoming SNMP PDUs are converted to CORBA requests and CORBA events are mapped to SNMP traps. Management Domain = SNMP, Managed Domain = CMIP How to use SNMP managers for management of CMIP agents is important here. The goal of the approach followed in <ref> [MBL93, WMBL92] </ref> is to augment a CMIP agent to support the SNMP protocol as well.
Reference: [ME96] <author> T. Magedanz and T. Eckardt. </author> <title> Mobile Software Agents: A New Paradigm for Telecommunications Management. </title> <booktitle> In Proceedings of IEEE/IFIP Network Operations and Management Symposium (NOMS), </booktitle> <pages> pages 360-369, </pages> <address> Kyoto, Japan, </address> <month> April </month> <year> 1996. </year> <note> IEEE Press. ISBN 0-7803-2518-4,. </note>
Reference-contexts: Dynamic Aspect There are also benefits for applications that cannot predict at compile time the extent of classes they will encounter, instances of which they have to handle. This could be especially important in the area of mobile agent applications <ref> [ME96] </ref> where an agent travels from machine to machine and has to manipulate instances of classes that it did not know about when it was compiled (cf. section 5.2). <p> Dynamic functionality, on the contrary, is active (roaming) in the sense that it may decide itself to migrate to a different location. The concept of agents <ref> [ME96] </ref> or mobile code for example has dynamic functionality. 1.3. SCOPE 7 1.3.4.1 Dynamic Code Paradigm Code is sent from one location to another to be executed. Examples are Java applets [Sun95] or TeleScript intelligent agents [Whi94]. <p> It is at the programmer's discretion whether the script on the old machine will continue its processing or terminate. This scheme allows to implement simple roaming agents. These are pieces of code with associated state that migrate from machine to machine in the network, performing certain tasks <ref> [ME96, Whi94] </ref>, [Mue96, p. 299-424]. A roaming agent has two important characteristics: first, it is stateful because all state (i.e. all variable/value bindings) is carried along when migrating to a new location. <p> How these are acquired and verified is outside the scope of this work, for more information see <ref> [ME96, Whi94] </ref>. 7 To understand semantics, we first have to establish categories of concepts allowing us to agree on how to name concepts within the domain of discourse. 5.2. ROAMING AGENTS 135 implementation would be yet more flexible in reasoning about unknown classes.
Reference: [Mey88] <author> Betrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: Object-Oriented Model Procedural (or structured) programming makes a clear separation between the program logic (functionality, code) and state (structure, data). With the advent of object-oriented programming, this separation was eliminated and data and code were encapsulated to form a computational unit. Major features of object-oriented programming are <ref> [Mey88] </ref>: Encapsulation Data and code are comprised into a unit of computation (i.e. an object). Data within the object is shielded from the outside and can only be modified by invoking operations provided by the object at a (public) interface. <p> For advantages of an object-oriented approach over a structured one, refer to the respective literature (e.g. <ref> [Mey88] </ref>). Second, information on the Web may become typed, that is, instances of classes.
Reference: [MGG96] <author> Philippe Merle, Christoph Gransart, and Jean-Marc Geib. CorbaScript and CorbaWeb: </author> <title> A Generic Object-Oriented Dynamic Environment upon CORBA. </title> <type> Technical report, </type> <institution> Universite de Lille, </institution> <year> 1996. </year>
Reference-contexts: It is more economic both in terms of size and speed to send small agents around in the network rather than large ones (cf. section 5.2) <ref> [MGG96] </ref>. GOM allows a client to contain initially no knowledge of classes of the target system to manipulate. <p> ROAMING AGENTS 133 model. Also, if a new model is integrated, the interpreter does not have to be changed because the API remains the same. There are other interpreters (e.g. CorbaScript <ref> [MGG96] </ref> or TclDII [Tcl95]) that allow to manipulate CORBA instances interactively. Both employ the Dynamic Invocation Interface (DII) to access CORBA instances. Unlike them, GOM is not tied to managing CORBA instances. Rather, any (object) model should be manageable if a suitable adapter is available.
Reference: [MOA94] <institution> IBM Corporation. </institution> <note> The Managed Object Agent Composer User's Guide, </note> <year> 1994. </year>
Reference-contexts: Both static translation and runtime conversion code were generated manually, but the intention was to make use of an already existing tool (Managed Object Agent Composer <ref> [MOA94] </ref>) to automate both tasks. This work is similar to the solution described in [Gen96, ch. 4.3] which proposes to upgrade existing OSI agents with IDL interfaces to the managed objects.
Reference: [MPBS95] <author> Kevin McCarthy, George Pavlou, Saleem Bhatti, and Jose N. De Souza. </author> <title> Exploiting the power of OSI Management for the control of SNMP-capable resources using generic application level gateways. </title> <booktitle> In Information Systems Integrated Network Management IV, </booktitle> <pages> pages 440-453. </pages> <publisher> Elsevier North-Holland, </publisher> <year> 1995. </year>
Reference-contexts: Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * <ref> [MPBS95] </ref> * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> The authors also describe problems encountered in creating an application gateway, such as reconciliation between a connection-oriented (CMIP) and connectionless (SNMP) protocol, and breaking up large CMIP PDUs into several smaller ones with subsequent reassembly. 10 Another approach similar to the ones already described is <ref> [MPBS95] </ref>. This work is based on the Network Management Forum's ISO/ITU-T and Internet Management Coexistence (IIMC) activities, which define mappings between SNMP/CMIP and vice versa [LaB93b, Cha93]. A compiler has been written following the IIMC approach for mapping SNMP MIBs to OSI MIBs.
Reference: [MQS95] <institution> IBM Corporation. MQSeries, </institution> <year> 1995. </year> <note> http://www.hursley.ibm.com/mqseries/. </note>
Reference-contexts: However, for certain types of application, such transparency may be desirable. Adapter implementors may choose various strategies for coping with network partitions 67 To delete the corresponding target, operation Delete of the proxy can be used. 68 Commercial solutions exist for this problem, e.g. MQSeries <ref> [MQS95] </ref>. 4.6. OTHER ISSUES 125 or communication problems, according to the target system (and the possibilities it offers) at hand. 4.6.4 Persistence Proxy instances used in management applications represent instances in various target systems such as SNMP/CMIP agents or CORBA servers.
Reference: [Mue96] <editor> Max Muehlhaeuser, editor. </editor> <booktitle> Special Issues in Object-Oriented Programming. dpunkt.verlag, 1996. Workshop Reader of the 10th European Conference on Object-Oriented Programming (ECOOP'96), </booktitle> <address> Linz. </address>
Reference-contexts: It is at the programmer's discretion whether the script on the old machine will continue its processing or terminate. This scheme allows to implement simple roaming agents. These are pieces of code with associated state that migrate from machine to machine in the network, performing certain tasks [ME96, Whi94], <ref> [Mue96, p. 299-424] </ref>. A roaming agent has two important characteristics: first, it is stateful because all state (i.e. all variable/value bindings) is carried along when migrating to a new location.
Reference: [New93] <author> Owen (ed.) Newman. </author> <note> Translation of ISO/CCITT MIBs to Internet MIBs. Technical Report Issue 1.0, </note> <institution> Network Management Forum, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * <ref> [Cha93, New93] </ref> SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1.
Reference: [Obj95] <institution> Object Management Group. Object Property Services, </institution> <month> June </month> <year> 1995. </year> <note> OMG TC Document 95-6-1. </note>
Reference-contexts: A possible use could be for storing the object identifier (OID) of a GDMO managed object template. In a future version properties will probably be replaced by OMG's property service <ref> [Obj95] </ref> which offers a standardized way of attaching information to any CORBA object without modification of the object's type. A number of operations are defined in interface GenObj to get- and set attribute values, to invoke operations and to delete target instances. 4.2.
Reference: [Obj97] <institution> Object Management Group. Notification Service RFP (Telecom RFP3), </institution> <month> March </month> <year> 1997. </year> <note> Document 97-01-03. </note>
Reference-contexts: EVENT HANDLING 97 RFP for a notification service that should augment the basic event service with more specialized capabilities such as event filtering. 4.5.1.4 X/Open Event Management Service X/Open's Event Management Service (EMS) [X/O96] is a proposal for OMG's notification service RFP <ref> [Obj97] </ref> that exceeds the scope of CORBA's event service. It consists of consumers and suppliers of events, communicating using an event channel. Consumers register for certain events by providing filters. <p> A request for proposal (RFP) for a notification service based on and more powerful than the event service supporting among other things filters has been issued by the OMG <ref> [Obj97] </ref>. It will be beneficial for CORBA adapters to support this new service in order to provide more sophisticated event service capabilities. CMIP Adapter When a target filter is created, the adapter will create a managed object of template type as given in the argument list of operation CreateFilter.
Reference: [ODP95] <author> ITU-T | ISO/IEC. </author> <title> ITU-T X.901 | ISO/IEC 10746-1: ODP Reference Model Part1: Overview, draft international standard edition, </title> <month> May </month> <year> 1995. </year>
Reference-contexts: An information model deals with information (data) and the flow of information in a system, whereas an object model defines information to be in the form of objects, thus being more concrete in terms of modeling. An information model may also be expressed using a structured (functional) model <ref> [ODP95] </ref>. One of GOM's goals is to manage a number of heterogeneous systems from its generic model. <p> Some examples are X/Open's XOM/XMP [XOM94], its successor TMN/C++ [TMN96] or IBM's cmipWorks [GMR94]. The prototype implementation uses the cmipWorks product, which offers a string-based API for ASN.1 values and implements all requests required by the CMIP protocol. 30 In terms of ODP viewpoints <ref> [ODP95, Ban96d] </ref>, DII would be in the computational viewpoint and IIOP in the engineering viewpoint [ODP95, DHR92]. 31 The target's object reference is available in the proxy instance. 94 CHAPTER 4. <p> The prototype implementation uses the cmipWorks product, which offers a string-based API for ASN.1 values and implements all requests required by the CMIP protocol. 30 In terms of ODP viewpoints [ODP95, Ban96d], DII would be in the computational viewpoint and IIOP in the engineering viewpoint <ref> [ODP95, DHR92] </ref>. 31 The target's object reference is available in the proxy instance. 94 CHAPTER 4.
Reference: [OMG95] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture And Specification, </title> <month> July </month> <year> 1995. </year> <note> Revision 2.0. </note>
Reference-contexts: For historical reasons there has always been a division between tools for operating (e.g. TCP/IP, RPC) and managing (e.g. SNMP, CMIP) a networked system. With the advent of object-oriented distributed computing models (CORBA <ref> [OMG95] </ref>, ANSA [ANS93], Java [RMI96], DCOM [BK96]), there are efforts to make the operational and management 'faces' the same, i.e. to manage and operate the network using the same model. Moreover, distributed systems management tasks cannot themselves be centralized, but 1 2 CHAPTER 1. <p> A disadvantage is that they have to be mapped to an implementation language which may involve conversion / loss of information. Examples of interface specification languages are remote procedure calls [BN84], CORBA Interface Definition Language (IDL) <ref> [OMG95] </ref>, GDMO and ASN.1 [GDM92, ASN90] and TINA ODL [TIN95]. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk [GR89], C++ [Str91] or Java [Sun95]. <p> Second, the model must offer certain dynamic capabilities such as creation of instances given the class name (as a string) and invocation of operations on instances given the name of the operation. Some models already offer such an API, e.g. CMIP [ITU92a], CORBA's DII or IIOP <ref> [OMG95] </ref>, COM's IDispatch interface [Box95] and Java's Core Reflection API [Sun96]. <p> A basic knowledge of CORBA, CMIP and SNMP is helpful because the concepts underlying these models will be explained only briefly. 2.1 CORBA 2.1.1 Architecture OMG's Common Object Request Broker <ref> [OMG95] </ref> specifies the architecture by which instances in a heterogeneous environment can communicate with one another regardless of whether they are local or remote. The architecture is shown in fig. 2.1. <p> An interface defines the set of possible operations (i.e. services) that can be performed on an object. An object satisfies an interface if it can be specified as the target object in each potential request described by the interface <ref> [OMG95] </ref>. An operation of an interface is an identifiable entity with a name, optional parameters and a return value that specifies a service that can be performed by the object. 2.1.3 Specification Language Interfaces are specified using the Interface Definition Language (IDL). <p> The ORB finds the implementation of the object and sends the request to it. Then the implementation skeleton is called and the return result is sent back to the client 5 . 2.1.4 Inter-ORB Bridging This section will discuss the concept of inter-ORB bridges <ref> [OMG95, ch. 11] </ref> and how they relate to adapters as defined in this work. Inter-ORB bridges have the task of converting requests between ORBs of different vendors. They can also be used to control access to ORBs within different domains, such as security (e.g. firewall functionality [CB94]) or accounting domains. <p> Rather than translating requests between different ORBs, bridges can also be used to translate requests between ORBs and other non-CORBA systems such as SNMP [CFSD90], CMIP [CMI], COM [Bro94] etc. <ref> [OMG95, 9.1.2] </ref>. CORBA bridges are located at the server side and used to implement functionality, whereas GOM is at the client side and used to access functionality. CORBA request-level bridges could for example be used profitably to implement XoJIDM's interaction translation approach (see 3.1.2). <p> XoJIDM has defined a translation algorithm that maps CORBA IDL to SNMP [Spe97, Part 6]. Following this work, [Maz96] describes an approach in which SNMP MIBs are translated to CORBA IDL. The Dynamic Skeleton Interface (DSI) and Dynamic Implementation Routine (DIR) <ref> [OMG95] </ref> are used at runtime on the server side to convert incoming CORBA requests to SNMP PDUs and SNMP responses to CORBA values. Liaison [Der97, Der96, BD97] allows CORBA management applications to manage SNMP agents. Aside from access to CMIP agents, it also offers access to SNMP agents. <p> OBJECT MODEL 61 4. The type code constants used for each type. Each type code constant is a number that uniquely identifies a type (cf. <ref> [OMG95, ch. 6.7.2] </ref>), e.g. 5 for short, 13 for struct etc. <p> Then it is shown for all elements of the layout which their corresponding elements are in the instance model. Last, the mapping of layout elements describing types to the instance model is presented. CORBA Layout The CORBA layout is modeled after the one used in CORBA's interface repository <ref> [OMG95, ch. 6.4.4] </ref>. It is shown in fig. 4.19. The CORBA layout contains descriptions of modules, classes, attributes, types, operations, parameters, constants, type definitions and exceptions (cf. appendix B.1 for the full description of the layout). The most important elements are briefly described below. <p> Its main use is for structuring the global name space to avoid name collisions. A class contains a list of super- and subclasses and information about its constants, type definitions, exceptions, attributes and operations. An attribute has a name and a type (modeled after CORBA's TypeCode interface <ref> [OMG95, pp. 6-35] </ref>) which can be simple or constructed. 62 CHAPTER 4. THE GENERIC OBJECT MODEL A simple type has a tag ("type code" property) which is a type code constant (number) describing the type. <p> The rightmost column shows the instance model types to which the meta model types are mapped. The mechanism for using parameters to represent constructed types is essentially the same as the one used in CORBA (cf. table 12 in <ref> [OMG95, p. 6-37] </ref>). <p> To get an attribute T, an accessor method T () is defined and to set it, the accessor method has the signature T (const T ptr). 18 Offering different interfaces to existing classes employs the adapter design pattern [GHJV95]. 19 According to the OMG's C++ language binding as defined in <ref> [OMG95, ch. 16] </ref>. 74 CHAPTER 4. <p> Third, if RTTI is not available, a safe downcasting mechanism is provided. Finally, variable argument lists allow to reduce certain steps when invoking an operation. 4.2.4.2 Smalltalk Generated Language Bindings According to OMG's Smalltalk mapping <ref> [OMG95, ch. 19-21] </ref>, a corresponding Smalltalk class GenObj is generated for the IDL interface GenObj as shown in fig. 4.28. Use of Generated Bindings An example of using the generated class for the IDL interface specified in fig. 4.23 is given in fig. 4.29. <p> For each target model a separate database is created in which all metadata about that model is kept. The databases are hidden from clients of the metadata repository and metadata can be retrieved or added only through the CORBA interface repository read-and write-access API <ref> [OMG95, ch. 6] </ref>. This ensures that the CORBA IR API need not be modified, but only its implementation needs to be changed. A client of the metadata repository of course has to know from which model metadata is to be retrieved. <p> Therefore, the name of the database (e.g. "X700") has to be given when 4.3. METADATA REPOSITORY 83 querying metadata about X700. As shown in fig. 4.33, this can be achieved by prefixing a CORBA RepositoryId string (see <ref> [OMG95, section 6.6.4] </ref>) with the name of the object model (and thus of the database) to be used for the metadata lookup. In the example the operation lookup id is used with the RepositoryId "X700:op1vol4/circuit:1.1". <p> To do this it may need to access the proxy instance (on which the operation was invoked) to retrieve specific information needed for this communication, such as for example a CORBA object reference <ref> [OMG95] </ref>, or an OSI AE-title and distinguished name [ITU92a]. The flow of a request through the system is depicted in fig. 4.36. Consider the case when a client invokes an operation on a proxy instance using operation Execute (1). <p> For a discussion of an asynchronous model see section 4.6.5. 4.4.2 IDL Interface All adapters have to inherit from IDL interface Adapter (cf. appendix A.1) and implement the operations dictated by the superclass. 28 E.g. a Dynamic Invocation Interface (DII) request <ref> [OMG95] </ref>, or a CMIP or SNMP request. 92 CHAPTER 4. THE GENERIC OBJECT MODEL The Create operation has to create a target instance at a location given in target location and to initialize the resulting instance with an (optional) argument list. <p> There are essentially two schemes provided by CORBA to achieve this: 29 E.g. a CORBA object reference, or an OSI AE-title and distinguished name 4.4. ADAPTERS 93 1. The Dynamic Invocation Interface (DII) <ref> [OMG95, ch. 4] </ref> and 2. The General Inter-ORB Protocol (GIOP) and its TCP/IP- based implementation, the Internet Inter-ORB Protocol (IIOP) [OMG95, ch. 12] . DII allows dynamic construction and dispatching of requests to CORBA objects. <p> ADAPTERS 93 1. The Dynamic Invocation Interface (DII) [OMG95, ch. 4] and 2. The General Inter-ORB Protocol (GIOP) and its TCP/IP- based implementation, the Internet Inter-ORB Protocol (IIOP) <ref> [OMG95, ch. 12] </ref> . DII allows dynamic construction and dispatching of requests to CORBA objects. It makes use of CORBA's Interface Repository (IR) to type-check at runtime whether the supplied arguments comply with the formal parameters specified in the IDL definition of the operation. <p> struct foo - long value; long value; foo recursive_ref; sequence&lt;foo&gt; recursive_ref; -; -; CMISFilter ::= CHOICE - item [8] FilterItem, and [9] IMPLICIT SET OF CMISFilter, or [10] IMPLICIT SET OF CMISFilter, not [11] CMISFilter - This type has to be transformed as shown in fig. 4.44 (b) according to <ref> [OMG95, 3.8.2] </ref>. In the case of ASN.1, recursive types are allowed ([ASN90, 5.5]), e.g. the definition shown in fig. 4.44 (c) is legal. <p> For advantages of an object-oriented approach over a structured one, refer to the respective literature (e.g. [Mey88]). Second, information on the Web may become typed, that is, instances of classes. Third, HTTP as a protocol may be superseded by either IIOP <ref> [OMG95] </ref> as an 'object-protocol' on the protocol level, or, better, with an RPC-like CORBA API, which is not concerned with protocols, but offers a higher level of abstraction. In a line, in the future the universal request for information in the form of: http://www.zurich.ibm.com/~bba/gom.ps might be replaced by orb://com/ibm/zurich/ban/papers/gom.
Reference: [Pav93] <author> G. Pavlou. </author> <title> The OSIMIS TMN Platform: Support for Multiple Technology Integrated Management Systems. </title> <booktitle> In Proceedings of the 1st RACE IS&N Conference, </booktitle> <address> Paris, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: A compiler has been written following the IIMC approach for mapping SNMP MIBs to OSI MIBs. The resulting GDMO code is already enriched with code that translates CMIP- to SNMP -requests and can be compiled into an OSI agent <ref> [Pav93] </ref>. Management Domain = SNMP, Managed Domain = CORBA Work in this area deals with enabling SNMP mangers to manage CORBA objects. XoJIDM's specification translation document [Spe97, Part 5] defines a mapping from SNMP to OMG IDL. [Maz96] describes an implementation that makes use of this mapping.
Reference: [PHHS96] <author> Jong-Tae Park, Su-Ho Ha, James W. Hong, and Joong-Goo Song. </author> <title> Design and Implementation of a CORBA-based TMN SMK System. </title> <booktitle> In Proceedings of NOMS96, </booktitle> <year> 1996. </year> <note> BIBLIOGRAPHY 185 </note>
Reference-contexts: Also, since the first response is used, performance of the overall service would increase. 4.3.3 Related Work 4.3.3.1 SMK Work being done on implementing OSI's Shared Management Knowledge (SMK) management function [X7593, TMN95] is described in <ref> [HPSK96, PHHS96] </ref>. The SMK function is implemented in CORBA and consists of translating the SMK definitions (GDMO/ASN.1) to CORBA IDL following XoJIDM's specification translation proposal [Spe97] and implementing the resulting IDL interfaces in an OSI agent. Management knowledge consists of the following elements: * Instance and instance relationship (Instance Model).
Reference: [QP93] <author> Peggy Quinn and George Preoteasa. </author> <title> Reconciling Object Models for Systems and Network Management. </title> <type> Technical report, </type> <institution> UNIX Systems Laboratories, Inc., </institution> <year> 1993. </year>
Reference-contexts: TARGET OBJECT MODELS intuitive translations, comparable to the ones found in database technology when mapping relational and object-oriented databases (impedance mismatch [Cat91, ch. 4.7.2]). 13 A detailed comparison of the CORBA, CMIP and SNMP models can be found in <ref> [Rut93, QP93] </ref>. 13 These issues are discussed in sections 4.6.1 and 4.4.5. Chapter 3 Related Research The purpose of this chapter is threefold. First, the scope of Inter-Domain Management (IDM) and a classification of work being done in this area will be presented.
Reference: [RFC91a] <institution> OSI Internet Management, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent <ref> [RFC91a] </ref> * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1.
Reference: [RFC91b] <institution> Management Information Base for Network Management of TCP/IP-based Internets: MIB II, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: The goal of the proxy agent is to present SNMP resources to an OSI manager in the form of OSI managed objects. Employing this scheme, the Internet MIB II specification <ref> [RFC91b] </ref> has been (manually) translated 9 to allow OSI management applications to manage SNMP 7 This scheme involves a proxy OSI agent translating OSI requests to CORBA operations and vice versa. 8 The code for the runtime translator is supposedly generated by the static translator (the paper mentions that future work <p> This may for example be "MIB-II" to denote the Internet MIB as described in RFC 1213 <ref> [RFC91b] </ref>. Parameter instance name can be used to give the resulting instance a description. <p> Conceptually, the metadata repository maintains a separate database for each target (object) model in which the metadata for that model is available in electronic form. The 4.6. OTHER ISSUES 113 database for SNMP contains a number of MIBs, each identified by a name, e.g. "MIB-II" defined in RFC 1213 <ref> [RFC91b] </ref>. A MIB contains a number of variables.
Reference: [RM88] <author> M. Rose and K. McCloghrie. </author> <title> Structure and Identification of Management Information for TCP/IP-based Internets. </title> <type> RFC 1065, </type> <month> August </month> <year> 1988. </year>
Reference-contexts: A variable has a certain type that is defined using ASN.1 macros (cf. below). SNMP has only a small number of types available for describing information, which are the simple types INTEGER, OCTET STRING, OBJECT IDENTIFIER (OID), NULL and a few predefined types such as Gauge and TimeTick <ref> [RM88] </ref>. 12 An additional structuring mechanism are (conceptual) tables which allow to store any number of variables under a given variable.
Reference: [RMI96] <author> Sun Microsystems Inc. </author> <title> Java Remote Method Invocation Specification, </title> <address> 1.1 edition, </address> <month> November </month> <year> 1996. </year> <note> Draft. </note>
Reference-contexts: For historical reasons there has always been a division between tools for operating (e.g. TCP/IP, RPC) and managing (e.g. SNMP, CMIP) a networked system. With the advent of object-oriented distributed computing models (CORBA [OMG95], ANSA [ANS93], Java <ref> [RMI96] </ref>, DCOM [BK96]), there are efforts to make the operational and management 'faces' the same, i.e. to manage and operate the network using the same model. Moreover, distributed systems management tasks cannot themselves be centralized, but 1 2 CHAPTER 1. INTRODUCTION require distribution of management as well. <p> The same mechanism also allows Java code to be sent across the network to a different machine, which subsequently executes the byte-code (Java applets). 1.4. GOALS 9 Sun has recently added Remote Method Invocation (RMI) <ref> [RMI96] </ref> to the language, enabling objects on one machine to invoke methods of objects on remote machines. Whether a method call is local or remote is transparent to the programmer. Microsoft's Distributed Component Object Model (DCOM) [BK96] is another model for writing distributed applications.
Reference: [Ros90a] <author> Marshall T. Rose. </author> <title> The Open Book. A Practical Perspective on OSI. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Today, although SNMP is predominantly used, it is beginning to reach its limits. Therefore a new version (SNMPv2) has been created [CMRW96], but its deployment has been rather low so far <ref> [Ros90a] </ref>. For historical reasons there has always been a division between tools for operating (e.g. TCP/IP, RPC) and managing (e.g. SNMP, CMIP) a networked system.
Reference: [Ros90b] <author> Marshall T. Rose. </author> <title> Transition and Coexistence Strategies for TCP/IP to OSI. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 8(1):57 - 66, </volume> <month> January </month> <year> 1990. </year>
Reference-contexts: The gateway agent implements a name mapping from OSI names to SNMP variable names and a service mapping that maps CMIP requests to their SNMP counterparts. The work described in [KS93] realizes an application gateway (cf. <ref> [Ros90b] </ref>) between OSI manager and SNMP agent, which is essentially an OSI agent acting as an SNMP manager and converting requests between the two domains.
Reference: [Rut93] <author> Tom Rutt. </author> <title> Comparison of the OSI management, OMG and Internet management Object Models. </title> <type> Technical report, </type> <institution> AT&T Bell Labs, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: TARGET OBJECT MODELS intuitive translations, comparable to the ones found in database technology when mapping relational and object-oriented databases (impedance mismatch [Cat91, ch. 4.7.2]). 13 A detailed comparison of the CORBA, CMIP and SNMP models can be found in <ref> [Rut93, QP93] </ref>. 13 These issues are discussed in sections 4.6.1 and 4.4.5. Chapter 3 Related Research The purpose of this chapter is threefold. First, the scope of Inter-Domain Management (IDM) and a classification of work being done in this area will be presented.
Reference: [Sat96] <author> Hirano Satoshi. HORB: </author> <title> Distributed Execution of Java Programs, </title> <year> 1996. </year>
Reference-contexts: Rather than sending the entire DBMS code to the client, it makes more sense to send down a Java applet that implements the GUI functionality which subsequently accesses the CORBA DBMS as a CORBA client. There are some projects that deal with implementing CORBA access from Java via IIOP <ref> [Joe96, IBM96, Sat96, Ion96] </ref>. In this thesis, the author is concerned mainly with the management of static functionality, i.e. with the creation and manipulation of instances located in servers 6 via proxies in the client's address space.
Reference: [SG94] <author> Ute Schurfeld and Dieter Gantenbein. </author> <title> Bilingual Agent. DSOM Access to X.700 Agent. </title> <type> Technical report, </type> <institution> IBM Zurich Research Laboratory, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent <ref> [SG94] </ref> * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM <p> As this work is important for the thesis, a more detailed description will be presented in section 3.1.2. The work on the Bilingual Agent <ref> [SG94] </ref> describes how a CORBA interface can be added to an OSI agent, thus making it in addition to OSI managers also accessible to CORBA managers. Its approach is to translate GDMO templates and ASN.1 types into OMG IDL code.
Reference: [Sha86] <author> M. Shapiro. </author> <title> Structure and Encapsulation in Distributed Systems: The Proxy Principle. </title> <booktitle> In International Conference On Distributed Computing Systems, </booktitle> <address> Massachusetts, Boston, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Concept of handle (local proxy) to an object that finds the corresponding target object wherever the latter may be located. The assumption is that in most distributed systems clients receive a local handle called a proxy <ref> [Sha86] </ref> to a remote object.
Reference: [Shi94] <author> John J. Shilling. </author> <title> How to roll your own persistent objects in C++. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 7(4) </volume> <pages> 25-32, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: If this alternative is preferred, however, care has to be taken to avoid problems when for example dumping the MetaObj to a stream or when reading it back. Possible schemes for marshaling and unmarshaling structures containing circular references are described in <ref> [Gro93, Cra93, Shi94] </ref>. Of course, the alternative to be adopted has to be decided by the author of a layout and described in the layout definition. The flexible and generic structure of the meta model allows for a number of alternative approaches to handle recursion.
Reference: [Slo94] <author> Morris Sloman, </author> <title> editor. Network and Distributed Systems Management. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: means of which management is accomplished. 3 Examples of domains are CORBA, CMIP (X.700), and SNMP. 1 As of August 1997. 2 Usually, the term domain is used in management terminology to denote an area of management to which the same policies apply, such as a security- or administration-domain (cf. <ref> [Slo94] </ref>). 3 Throughout the thesis, domain will be used synonymously with (object) model; the latter being the more generic term. 23 24 CHAPTER 3.
Reference: [SOM94] <author> IBM. </author> <title> SOM Developer's Toolkit: An Introductory Guide To The System Object Model And Its Accompanying Frameworks, </title> <year> 1994. </year>
Reference-contexts: Both DII and IIOP can be used to implement a CORBA adapter. The advantage of DII is that it is more abstract, therefore easier to implement, whereas IIOP is more complex. In a prototype implementation of a DSOM-based <ref> [SOM94] </ref> CORBA adapter, the DII was used [Ban96b, Ban96f, Ban96a] as described below. The approach is straightforward. Whenever a GOM request is to be dispatched, after successful type-checking using metadata, a Request object will be created. <p> It is hoped that they can be integrated after the fact ... Prototype A prototype implementation of some of the concepts presented has been made. It currently comprises the generic object model, metadata repository and two adapters (for CORBA <ref> [SOM94] </ref> and CMIP [GMR94]). On the basis of this prototype, a few test applications have been developed for feasibility study.
Reference: [Sou94a] <author> Nader Soukouti. </author> <title> Inter Domain Management. </title> <note> Append to XoJIDM mailing list, 1994. draft. </note>
Reference: [Sou94b] <author> Nader Soukouti. </author> <title> Managing CORBA Objects Using an OSI Manager. Append to XoJIDM mailing list, </title> <year> 1994. </year>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM <ref> [Hie96b, Sou94b, Sou94d] </ref> * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> Management Domain = CMIP, Managed Domain = CORBA The subject of this research area is how a CMIP manager can manage objects in the CORBA domain. The XoJIDM task force considers in its prospective Interaction Translation document <ref> [Int95, Hie94, Hie96b, Sou94b, Sou94d] </ref> the use of a proxy agent (controller) to receive CMIP requests and dispatch them to CORBA objects using the Dynamic Invocation Interface (DII).
Reference: [Sou94c] <author> Nader Soukouti. </author> <title> Managing OSI Objects Using a CORBA Manager. Append to XoJIDM mailing list, 1994. </title> <type> draft. 186 BIBLIOGRAPHY </type>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM <ref> [Int95, Hie96b, Sou94c] </ref> * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] <p> Note, however, that the final document may or may not be in line with the submitted proposals wrt. its contents. The proposals that deal with CORBA manager managing OSI agents are specifically <ref> [Hie94, Hie96b, Sou94c] </ref>. 3.1. INTER-DOMAIN MANAGEMENT 31 is subsequently converted to CORBA 17 and returned to the client.
Reference: [Sou94d] <author> Nader Soukouti. </author> <title> Toward Managing CORBA Objects Via OSI Network Management Mechanisms. Append to XoJIDM mailing list, </title> <month> July </month> <year> 1994. </year> <note> draft. </note>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG [Tel96] * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM <ref> [Hie96b, Sou94b, Sou94d] </ref> * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and SNMP 3.1. <p> Management Domain = CMIP, Managed Domain = CORBA The subject of this research area is how a CMIP manager can manage objects in the CORBA domain. The XoJIDM task force considers in its prospective Interaction Translation document <ref> [Int95, Hie94, Hie96b, Sou94b, Sou94d] </ref> the use of a proxy agent (controller) to receive CMIP requests and dispatch them to CORBA objects using the Dynamic Invocation Interface (DII).
Reference: [Sou94e] <author> Nader Soukouti. </author> <title> Using CORBA Technology for SNMP Management. </title> <note> Append to XoJIDM mailing list, 1994. draft. </note>
Reference: [Spe97] <institution> Joint Inter-Domain Management Working Group. Inter-Domain Management: </institution> <note> Specification Translation, April 1997. http://www.rdg.opengroup.org/mem only/tech/sysman/jidm/st.htm. </note>
Reference-contexts: RELATED RESEARCH runtime interaction part (cf. <ref> [Spe97] </ref>). The translation part maps an OSI GDMO/ASN.1 specification to its corresponding ANSA IDL specification plus conversion code. The runtime translation makes use of both the generated ANSA classes and the conversion code to translate ANSA operations into OSI requests and back. <p> XoJIDM has defined a translation algorithm that maps CORBA IDL to SNMP <ref> [Spe97, Part 6] </ref>. Following this work, [Maz96] describes an approach in which SNMP MIBs are translated to CORBA IDL. <p> There is a MIBserver that records OSI names (Distinguished Names) and CORBA object references in a table, which can be queried to translate OSI names to CORBA object references and vice versa. The approach makes use of XoJIDM's Specification Translation document <ref> [Spe97, part 4] </ref>, which defines a mapping from IDL to GDMO/ASN.1. The Mascotte project [Mas97] deals with how the various elements of a CORBA system can be managed using CORBA itself on the manager side. <p> The resulting GDMO code is already enriched with code that translates CMIP- to SNMP -requests and can be compiled into an OSI agent [Pav93]. Management Domain = SNMP, Managed Domain = CORBA Work in this area deals with enabling SNMP mangers to manage CORBA objects. XoJIDM's specification translation document <ref> [Spe97, Part 5] </ref> defines a mapping from SNMP to OMG IDL. [Maz96] describes an implementation that makes use of this mapping. It consists of a CORBA-based agent that acts as an SNMP agent (using CMU's 11 SNMP library). <p> The approach chosen involves translation of an OSI agent specification (GDMO / ASN.1) to CORBA IDL (Specification Translation <ref> [Spe97] </ref>) and subsequent runtime conversion of CORBA requests to CMIP and back (Interaction Translation [Int95]). CORBA clients include the language bindings of the IDL specification generated by a GDMO / ASN.1 to IDL translator. Specification Translation defines a mapping from GDMO and ASN.1 to IDL as shown in table. 3.2. <p> Some of them are described below. A more detailed description of problems of specification translation is given in [Gen96, 152-167]. 3.1.2.2 Multiple Replies A GDMO ACTION may return a single or multiple responses. This is handled in Xo-JIDM's approach using exceptions <ref> [Spe97, 4.5.2] </ref>. When a single response is returned, no exception is thrown. When multiple responses are returned, an exception is thrown that has to be caught by the application to handle the responses. Responses are collected via an event channel [COS95] using either the push- or pull model. <p> For each attribute, there are up to 5 operations to get, set, set to default, add and remove an attribute (see <ref> [Spe97, 4.3] </ref>), leading to increased code size. Genilloud [Gen96, 4.3.3] describes this problem in more detail. A characteristic of CMIP is that multiple attributes can be set or retrieved with a single request. <p> The JIDM translation algorithm by default includes all conditional packages that might possibly be instantiated in the resulting IDL interface <ref> [Spe97, 4.2] </ref>. When an implementation detects that an element to be accessed is in a conditional package that is not present, an exception is thrown. How to keep track of the conditional packages (and their elements) that have been included is implementation-dependent. <p> It is for example possible to create an 'empty' instance (one with no attributes) and add an attribute only when it is requested the first time (lazy attribute creation). 3.1.2.5 Notifications Notifications are mapped to four operations: two for pulling and two for pushing operations (confirmed, unconfirmed) <ref> [Spe97, 4.6] </ref>. As in the case of attribute operations this leads to increased code size. 3.2. SUMMARY 33 GOM's event handling model (4.5) is generic and does not take into account typed events/notifications. Therefore, a significant code reduction can be achieved. <p> This thesis focuses on multi-domain management with the common management domain being CORBA and the managed domains being CMIP, CORBA and (to a lesser extent) SNMP. It will be contrasted mainly with the approach proposed by XoJIDM <ref> [Spe97, Int95] </ref> 19 , which has some limitations: * Clients have to know the types of classes they will be managing; this is typically done by compile-time inclusion of generated client stubs, which creates a tight binding 18 This implies that the exactly same specification of domain A cannot be re-engineered <p> The SMK function is implemented in CORBA and consists of translating the SMK definitions (GDMO/ASN.1) to CORBA IDL following XoJIDM's specification translation proposal <ref> [Spe97] </ref> and implementing the resulting IDL interfaces in an OSI agent. Management knowledge consists of the following elements: * Instance and instance relationship (Instance Model). This function allows to retrieve information about an agent's containment tree, it enables e.g.
Reference: [Ste90a] <author> Guy L. Steele. </author> <title> Common LISP. The Language. </title> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference-contexts: Object-oriented languages can either be untyped or strongly typed [Weg90]. Untyped languages have no explicit type system and no type-checking is performed upon assignment between values. Examples of untyped languages are Lisp <ref> [Ste90a] </ref> and Smalltalk [GR89]. 4.2. OBJECT MODEL 81 | printer retVal doc num args factory | printer := NameServer at: 'psp30d'. doc := factory create: 'CORBA' className: 'Defs::Document' instName: nil proxyLocation: nil targetLocation: 'adlerhorn.zurich.ibm.com' args: nil. doc name: '/etc/passwd'. retVal := printer Print: doc numberOfCopies: 2. retVal printNl. <p> Using the proposed model, clients only 'pay' for what they actually use. Language Bindings As GOM is based on reification (everything is an object), it fits best with languages that are reified as well, such as Smalltalk or Lisp <ref> [GR89, Ste90a] </ref>. With these languages, 139 GOM objects can be manipulated in a way that is natural to Smalltalk using convenience bindings, without having to resort to auxiliary methods such as Get-, Set or Execute.
Reference: [Ste90b] <author> W. Richard Stevens. </author> <title> UNIX Network Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: This synchronization task could be performed by a UNIX synchronization daemon <ref> [Ste90b] </ref> (shown in fig. 4.41) that creates EFDs in all agents whose AE-titles are listed in a configuration file. The list of agents to be monitored for creation- and deletion events could be modified at runtime by changing the configuration file and sending a signal (e.g.
Reference: [Str91] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1991. </year>
Reference-contexts: Examples of interface specification languages are remote procedure calls [BN84], CORBA Interface Definition Language (IDL) [OMG95], GDMO and ASN.1 [GDM92, ASN90] and TINA ODL [TIN95]. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk [GR89], C++ <ref> [Str91] </ref> or Java [Sun95]. Many object models for distributed systems are based on specification languages to define the system interfaces and then perform a mapping to an implementation language. In this thesis, the focus will be on interface description languages such as OMG IDL or GDMO. 1.3.7 CORBA vs. <p> Note that convenience bindings (cf. 4.2.4) may offer a more convenient interface to operation execution on top of Execute, e.g. in the case of C++ a method using variable argument lists (cf. <ref> [Str91] </ref>). The return value is an instance of a subclass of Val and can be downcast to the actual class using the narrowing mechanisms available for each language binding as described in 4.2.4. <p> An example of how overloaded operators can be used to facilitate the use of the generated C++ classes is to replace the Get- and Set methods by the subscripting operator <ref> [Str91, par. 13.4.5] </ref>. Thus the two operations shown below: Long_ptr age=(Long_ptr)person-&gt;Get ("age"); Long_ptr new_age=new Long; new_age-&gt;val (32); person-&gt;Set ("age", new_val); could be replaced by: GomLong_ptr age=GomLong::Downcast ((*person)["age"]); (*person)["age"]=new GomLong (32); Note that methods Get and Set may still be used since convenience class GomObj is derived from GenObj. <p> 4.27 The code in fig. 4.27 is essentially the same as in 4.25, but it uses the convenience bindings for C++ which makes the code shorter. 20 Note that, if a C++ implementation supports runtime type identification (RTTI), then a safe downcast can be performed using the dynamic cast operator <ref> [Str91] </ref>. 4.2. <p> Of course some operations will benefit more from this sort of execution than others for which it would make less sense. As an example of a deferred-asynchronous operation using a promise, consider operation GenObj::Execute. Because CORBA currently does not allow overloading of operations <ref> [Str91] </ref>, an additional operation is provided as shown in fig. 4.46. Compared to its corresponding synchronous version, ExecuteAsync returns void and accepts an additional parameter Promise which is a CORBA object.
Reference: [Sun95] <author> Sun Microsystems. </author> <title> The Java Language Environment: A White Paper, </title> <year> 1995. </year>
Reference-contexts: The concept of agents [ME96] or mobile code for example has dynamic functionality. 1.3. SCOPE 7 1.3.4.1 Dynamic Code Paradigm Code is sent from one location to another to be executed. Examples are Java applets <ref> [Sun95] </ref> or TeleScript intelligent agents [Whi94]. A Java applet is essentially byte code for a virtual machine [ASU86, Kam90] that is sent to a location running a virtual machine interpreter, which then executes it. Thus, code is always sent from a server to a client. <p> Examples of interface specification languages are remote procedure calls [BN84], CORBA Interface Definition Language (IDL) [OMG95], GDMO and ASN.1 [GDM92, ASN90] and TINA ODL [TIN95]. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk [GR89], C++ [Str91] or Java <ref> [Sun95] </ref>. Many object models for distributed systems are based on specification languages to define the system interfaces and then perform a mapping to an implementation language. In this thesis, the focus will be on interface description languages such as OMG IDL or GDMO. 1.3.7 CORBA vs. DCOM vs. <p> In this thesis, the focus will be on interface description languages such as OMG IDL or GDMO. 1.3.7 CORBA vs. DCOM vs. Java Sun's Java <ref> [Sun95] </ref> language is similar in syntax to C++. Programs are compiled into byte-code interpreted by a virtual machine (VM). Porting the virtual machine to a number of architectures enables Java programs to run unmodified on every platform for which a VM exists. <p> Moreover, it will also be shown that the model presented here does not necessarily need to be restricted to the domains of CMIP and SNMP, but can be extended to integrate other domains such as COM (OLE) [Bro94] or Java <ref> [Sun95] </ref>. Of course, the proposed model could also be employed to enable OSI managers to transparently interfere with SNMP or CORBA domains. <p> On the basis of this prototype, a few test applications have been developed for feasibility study. These comprise (1) a CGI [CGI94] based topology application, which displays the managed objects within OSI agents and which can be accessed using any Web browser [TBLP92], (2) Java bindings <ref> [Sun95] </ref>, which can be included by clients to manipulate GOM instances, (3) the GOMscript interpreter as described in 5.1, and (4) a simple roaming agent facility (5.2). See [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] for more details.
Reference: [Sun96] <author> Sun Microsystems Inc. </author> <title> Java Core Reflection. API and Specification, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: Some models already offer such an API, e.g. CMIP [ITU92a], CORBA's DII or IIOP [OMG95], COM's IDispatch interface [Box95] and Java's Core Reflection API <ref> [Sun96] </ref>.
Reference: [SV97] <author> Douglas C. Schmidt and Steve Vinoski. </author> <title> The OMG Events Service. C++ Report, </title> <address> 9(2):37 - 46, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: These evaluate the EFD's discriminator construct against the notification's parameters and either reject the notification or pass it on in the form of an event report to each destination specified in the destination list. 4.5.1.3 CORBA Event Service The OMG event service <ref> [COS95, SV97] </ref> allows suppliers to send events to consumers either directly or via event channels which decouple direct communication. A consumer may be notified (push model) whenever a new event has been added to an event channel, or it may retrieve (pull model) events actively from the channel.
Reference: [Tan92] <author> Andrew S. Tanenbaum. </author> <title> Modern Operating Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: With the rise of the UNIX (formerly: MULTICS) operating system in the early seventies and the personal computer in the eighties, decentralization of computation ensued, and computers were interconnected in the form of local area networks (LANs) and wide area networks (WANs) <ref> [Tan92, Bac86] </ref>. Parallel to the decentralization of computational resources, their management had to become decentralized as well. At that time, various proprietary schemes existed or were created to perform management of the computing infrastructure (e.g. TL1, Telnet etc.). <p> Concurrency transparency allows many clients to access the same entities without being aware of the other users in the system and replication transparency allows to have multiple replicas 5 of an entity in a transparent way for the user <ref> [Tan92] </ref>. This work is concerned with how (object) models for management and / or operation of distributed systems (CORBA, CMIP, SNMP) can be handled from a single generic model and therefore does not focus on centralized, non-distributed systems. 1.3.2 Protocol-Centric vs. <p> This scheme avoids having to keep track of the pieces that have already been transferred. In addition, using TCP/IP it is more efficient to transfer one large packet rather than several small ones <ref> [Tan92] </ref>. Once the metadata is in the cache, it can be accessed by clients for queries. The metadata cache can be flushed at any time to accommodate the fact that metadata from a specific source may have been modified in the meantime.
Reference: [TBLP92] <author> J. Groff T. Berners-Lee, R. Cailliau and B. Pollermann. </author> <title> World-Wide Web: The Information Universe. </title> <journal> Electronic Networking, </journal> <volume> 1(2), </volume> <year> 1992. </year>
Reference-contexts: On the basis of this prototype, a few test applications have been developed for feasibility study. These comprise (1) a CGI [CGI94] based topology application, which displays the managed objects within OSI agents and which can be accessed using any Web browser <ref> [TBLP92] </ref>, (2) Java bindings [Sun95], which can be included by clients to manipulate GOM instances, (3) the GOMscript interpreter as described in 5.1, and (4) a simple roaming agent facility (5.2). See [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] for more details. Outlook Currently, the situation on the Web [TBLP92] can be <p> Web browser <ref> [TBLP92] </ref>, (2) Java bindings [Sun95], which can be included by clients to manipulate GOM instances, (3) the GOMscript interpreter as described in 5.1, and (4) a simple roaming agent facility (5.2). See [Ban96g, Ban96b, Ban96a, Ban96e, Ban96c, BD97] for more details. Outlook Currently, the situation on the Web [TBLP92] can be compared to that of structured programming in the seventies: information (data) and behavior (programs) are separated; programs are used to manipulate data, and the associations that determine which program is to be invoked for which datum 2 are maintained in a file using MIME [BF92].
Reference: [Tcl95] <institution> West Virginia University. Tcl Dynamic Invocation Interface, </institution> <year> 1995. </year> <note> http://www.cerc.wvu.edu/dice/iss/TclDii/TclDii.html. </note>
Reference-contexts: ROAMING AGENTS 133 model. Also, if a new model is integrated, the interpreter does not have to be changed because the API remains the same. There are other interpreters (e.g. CorbaScript [MGG96] or TclDII <ref> [Tcl95] </ref>) that allow to manipulate CORBA instances interactively. Both employ the Dynamic Invocation Interface (DII) to access CORBA instances. Unlike them, GOM is not tied to managing CORBA instances. Rather, any (object) model should be manageable if a suitable adapter is available.
Reference: [Tel96] <institution> OMG White Paper: CORBA-Based Telecommunication Network Management System, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG <ref> [Tel96] </ref> * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] <p> RELATED RESEARCH CORBA Server CMIP Agent SNMP Agent CORBA client * JIDM [Int95, Hie96b, Sou94c] * Liaison [Der97] * Bilingual Agent [SG94] * Genilloud [GG95, GP95, Gen96] * Telecom SIG <ref> [Tel96] </ref> * JIDM * GOM * Liaison [Der97] * Mazumdar [Maz96] * Telecom SIG [Tel96] CMIP manager * JIDM [Hie96b, Sou94b, Sou94d] * Mascotte [Mas97] * [BGG94] * CMIP-SNMP Proxy-Agent [RFC91a] * [KS93] * [MPBS95] * [Cha93, New93] SNMP manager * JIDM * Mazumdar [Maz96] * Protocol Independent Management Agent [MBL93] [LaB93b, LaB93a] Table 3.1: Classification of Related Work in the Domains CORBA, CMIP and <p> This has the advantage that the Proxy does not need to maintain any state information, but it also includes the disadvantages of not being object-oriented (internally). The OMG Telecommunication Special Interest Group has issued a white paper on how to use CORBA in the field of telecommunications <ref> [Tel96] </ref>. The focus of this work is on provisioning CORBA services ([COS95]) tailored to the needs of the telecommunications domain. Physical and logical resources are supposed to be represented by CORBA interfaces. Access to OSI and SNMP managed systems will reuse the work done by XoJIDM. <p> Aside from access to CMIP agents, it also offers access to SNMP agents. OSI managers. 3.1. INTER-DOMAIN MANAGEMENT 27 The OMG Telecommunication Special Interest Group has proposed a scheme describing how SNMP devices can be managed from a CORBA-based application <ref> [Tel96] </ref>. Management Domain = CMIP, Managed Domain = CORBA The subject of this research area is how a CMIP manager can manage objects in the CORBA domain.
Reference: [TIN95] <institution> Telecommunications Information Networking Architecture Consortium. </institution> <note> Overall Concepts And Principles Of TINA, 1.0 edition, </note> <month> Feb </month> <year> 1995. </year>
Reference-contexts: CORBA may be used to implement and manage a system. This may be achieved by adding CORBA objects to the system whose task is to manage other objects, or by adding operations to existing CORBA interfaces to make them manageable. In the TINA <ref> [TIN95] </ref> model, management 6 The term server is used here in the sense of a location that implements object interfaces and is not constrained to CORBA servers. 8 CHAPTER 1. <p> A disadvantage is that they have to be mapped to an implementation language which may involve conversion / loss of information. Examples of interface specification languages are remote procedure calls [BN84], CORBA Interface Definition Language (IDL) [OMG95], GDMO and ASN.1 [GDM92, ASN90] and TINA ODL <ref> [TIN95] </ref>. An implementation language is computationally complete and can be used for both system specification and implementation. Examples are Smalltalk [GR89], C++ [Str91] or Java [Sun95]. <p> It is for example possible to define a layout in which classes do not directly have attributes and operations, but the latter are contained in packages as is the case in GDMO [GDM92] or in interfaces as in the case of TINA <ref> [TIN95] </ref>. It is important that implementors of metadata adapters provide a precise description of their layout in order for clients to be able to use that meta model. A description of a layout has to contain the following things: 1.
Reference: [Tiv95] <author> Tivoli Systems Inc. </author> <title> Object-Orientation Brings Advantages To Distributed Systems Management, </title> <year> 1995. </year>
Reference-contexts: INTRODUCTION require distribution of management as well. In this respect, a distributed computing model such as CORBA can be considered a distribution enabler for management tasks. There are indications that CORBA is becoming an important technology for implementing both management- and managed entities. The success of Tivoli's management framework <ref> [Tiv95] </ref>, which is based entirely on CORBA, is a strong indicator of this. Genilloud [Gen96] reinforces this argument by stating that "distributed objects are thus the paradigm that will allow systems management to converge towards one single, homogeneous and global management architecture".
Reference: [TMN95] <institution> ITU-T. M.3010: Principles of Telecommunication Management Network, </institution> <year> 1995. </year>
Reference-contexts: Also, since the first response is used, performance of the overall service would increase. 4.3.3 Related Work 4.3.3.1 SMK Work being done on implementing OSI's Shared Management Knowledge (SMK) management function <ref> [X7593, TMN95] </ref> is described in [HPSK96, PHHS96]. The SMK function is implemented in CORBA and consists of translating the SMK definitions (GDMO/ASN.1) to CORBA IDL following XoJIDM's specification translation proposal [Spe97] and implementing the resulting IDL interfaces in an OSI agent.
Reference: [TMN96] <author> TMN/C++, </author> <note> 1.0 draft 7a edition, </note> <month> May </month> <year> 1996. </year> <month> cmiswg@nmf.org. </month>
Reference-contexts: There are a number of APIs, most of them in the form of C-libraries, that communicate with an OSI stack to produce requests for the CMIP protocol. Some examples are X/Open's XOM/XMP [XOM94], its successor TMN/C++ <ref> [TMN96] </ref> or IBM's cmipWorks [GMR94].
Reference: [UCCH91] <author> Dave Ungar, Craig Chambers, Bay-Wei Chang, and Urs Holzle. </author> <title> Organizing programs without classes. Lisp and Symbolic Computation: </title> <journal> An International Journal, </journal> <volume> 4(3), </volume> <year> 1991. </year> <note> BIBLIOGRAPHY 187 </note>
Reference-contexts: By having no concept of classes in the instance model, but knowing only instances, the generic object model of GOM resembles those of prototype-based models such as SELF <ref> [UCCH91, US91] </ref>. As shown in table 4.1, instances of any target system class are always represented as instances of GenObj, with the target system's class name parameterized within the equivalent GenObj (proxy) instance.
Reference: [US91] <author> Dave Ungar and Randall B. Smith. </author> <title> Self: The power of simplicity. Lisp and Symbolic Computation: </title> <journal> An International Journal, </journal> <volume> 4(3), </volume> <year> 1991. </year>
Reference-contexts: By having no concept of classes in the instance model, but knowing only instances, the generic object model of GOM resembles those of prototype-based models such as SELF <ref> [UCCH91, US91] </ref>. As shown in table 4.1, instances of any target system class are always represented as instances of GenObj, with the target system's class name parameterized within the equivalent GenObj (proxy) instance.
Reference: [Weg90] <author> Peter Wegner. </author> <title> Concepts and Paradigms of Object-Oriented Programming. </title> <journal> OOPS Messenger, </journal> <volume> 1(1):7 - 87, </volume> <month> August </month> <year> 1990. </year>
Reference-contexts: An object is a collection of operations sharing a common state which is hidden from the outside and can be accessed/modified only by invocation of the object's operations. The set of operations offered by an object is called its interface <ref> [Weg90] </ref>. 4 A class is a template from which objects (instances) can be created. It contains the definition of operations and a number of instance variables. When an object is created from a class, it receives its own set of instance variables according to the class' definition. <p> Every class is a type, defined by a predicate that specifies its template. However, not every type is a class, since predicates do not necessarily determine object templates <ref> [Weg90] </ref>. The difference between an information model and an object model is the abstraction level used. <p> Object-oriented languages can either be untyped or strongly typed <ref> [Weg90] </ref>. Untyped languages have no explicit type system and no type-checking is performed upon assignment between values. Examples of untyped languages are Lisp [Ste90a] and Smalltalk [GR89]. 4.2. <p> Type consistency is checked either at compile time or at runtime. Languages in which the type of expressions can be determined at compile time are called statically typed, while languages in which types are determined at runtime are called dynamically typed <ref> [Weg90] </ref>. Both the XoJIDM (3.1.2) and GOM approaches are strongly-typed. But contrary to XoJIDM's approach, which maps GDMO / ASN.1 to C++ code that can be type-checked at compile time, GOM's model uses a type repository to enforce type-checking at runtime.
Reference: [Whi94] <author> J. E. White. </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace. General Magic, </title> <note> 1994. http://www.genmagic.com/WhitePapers. </note>
Reference-contexts: The concept of agents [ME96] or mobile code for example has dynamic functionality. 1.3. SCOPE 7 1.3.4.1 Dynamic Code Paradigm Code is sent from one location to another to be executed. Examples are Java applets [Sun95] or TeleScript intelligent agents <ref> [Whi94] </ref>. A Java applet is essentially byte code for a virtual machine [ASU86, Kam90] that is sent to a location running a virtual machine interpreter, which then executes it. Thus, code is always sent from a server to a client. <p> It is at the programmer's discretion whether the script on the old machine will continue its processing or terminate. This scheme allows to implement simple roaming agents. These are pieces of code with associated state that migrate from machine to machine in the network, performing certain tasks <ref> [ME96, Whi94] </ref>, [Mue96, p. 299-424]. A roaming agent has two important characteristics: first, it is stateful because all state (i.e. all variable/value bindings) is carried along when migrating to a new location. <p> How these are acquired and verified is outside the scope of this work, for more information see <ref> [ME96, Whi94] </ref>. 7 To understand semantics, we first have to establish categories of concepts allowing us to agree on how to name concepts within the domain of discourse. 5.2. ROAMING AGENTS 135 implementation would be yet more flexible in reasoning about unknown classes.
Reference: [WMBL92] <author> S. F. Wu, S. Mazumdar, S. Brady, and D. W. Levine. </author> <title> On Implementing a Protocol Independent MIB. </title> <type> Technical Report RC 18248, </type> <institution> IBM T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Incoming SNMP PDUs are converted to CORBA requests and CORBA events are mapped to SNMP traps. Management Domain = SNMP, Managed Domain = CMIP How to use SNMP managers for management of CMIP agents is important here. The goal of the approach followed in <ref> [MBL93, WMBL92] </ref> is to augment a CMIP agent to support the SNMP protocol as well.
Reference: [X7593] <author> ITU-T. X.750: </author> <title> Management Knowledge Management Function, </title> <year> 1993. </year>
Reference-contexts: Also, since the first response is used, performance of the overall service would increase. 4.3.3 Related Work 4.3.3.1 SMK Work being done on implementing OSI's Shared Management Knowledge (SMK) management function <ref> [X7593, TMN95] </ref> is described in [HPSK96, PHHS96]. The SMK function is implemented in CORBA and consists of translating the SMK definitions (GDMO/ASN.1) to CORBA IDL following XoJIDM's specification translation proposal [Spe97] and implementing the resulting IDL interfaces in an OSI agent. <p> To achieve this goal, the operation could, for example, make use of the OSI shared management knowledge function as defined in X.750 <ref> [X7593] </ref> (see also 4.3.3.1). 4.6.2.3 Scoping and Filtering in OSI Scoping and filtering allows managers to select a subset of the managed objects of an agent as target of a request.
Reference: [X/O96] <institution> X/Open Company Ltd. Systems Management: Event Management Service, </institution> <note> draft v0.3 edition, June 1996. Preliminary Specification. </note>
Reference-contexts: EVENT HANDLING 97 RFP for a notification service that should augment the basic event service with more specialized capabilities such as event filtering. 4.5.1.4 X/Open Event Management Service X/Open's Event Management Service (EMS) <ref> [X/O96] </ref> is a proposal for OMG's notification service RFP [Obj97] that exceeds the scope of CORBA's event service. It consists of consumers and suppliers of events, communicating using an event channel. Consumers register for certain events by providing filters.

References-found: 126

