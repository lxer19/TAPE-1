URL: http://www.cs.wustl.edu/~schmidt/europlop-96/papers/paper12.ps
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-96/ww3-papers.html
Root-URL: 
Email: Email: riehle@ubilab.ubs.ch  
Title: BureaucracyA Composite Pattern.  B u r e a u c r a c A Composite Pattern  
Author: Dirk Riehle, UBS/UBILAB. Dirk Riehle 
Address: Bahnhofstrasse 45, CH-8021 Zrich  
Affiliation: UBILAB, Union Bank of Switzerland  
Note: To be reviewed at EuroPLoP '96. Copyright 1996 Dirk Riehle. Copying for EuroPLoP distribution permitted.  
Abstract: The Bureaucracy pattern is a recurring design theme used to implement hierarchical object structures which allow interaction on every level of the hierarchy and maintain their inner consistency themselves. It is a composite pattern which is based on the Composite, Observer and Chain of Responsibility pattern. Composite patterns require new presentation and modeling techniques since their complexity makes them more difficult to approach than non-composite patterns. This paper uses role modeling to present the Bureaucracy pattern and to explore its design and implementation space. Role modeling has proved to be very useful to get a grip on this complex pattern, and it can be expected to work well for design patterns in general. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Siemens (1996) Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <year> (1996). </year> <title> Pattern-Oriented Software ArchitectureA System of Patterns. </title> <publisher> Wiley & Sons Ltd. </publisher>
Reference: <author> Coplien & Schmidt (1995) James O. Coplien, and Douglas Schmidt. (Eds). </author> <year> (1995). </year> <title> Pattern Languages of Program Design. </title> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley. </publisher> <editor> GOF (1995) Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </editor> <year> (1995). </year> <title> Design Patterns: Elements of Reusable Design. </title> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley. </publisher>
Reference: <author> Harrison & Ossher (1993) William Harrison and Harold Ossher. </author> <title> "Subject-Oriented Programming (A Critique of Pure Objects)." </title> <booktitle> OOPSLA '93 ACM SIGPLAN Notices 28, </booktitle> <month> 10 (October </month> <year> 1993): </year> <note> 411-428. </note> <author> Kristensen & Osterbye (1996) Bent Bruun Kristensen and Kasper Osterbye. </author> <title> "Roles: Conceptual Abstraction Theory and Practical Language Issues." </title> <journal> Theory and Practice of Object Systems. </journal> <note> To appear. </note>
Reference-contexts: Creation of wrappers on the fly has been successfully addressed by Riehle & Bumer (1995). Keeping wrapper state consistent and persistent is a still an unresolved research topic, popping up in what has recently been called Subject-Oriented Programming <ref> (Harrison and Ossher, 1993) </ref>. Sample Code We take up the introductory example and illustrate a possible implementation following the design template of figure 7. Figure 8 shows the resulting class hierarchy.
Reference: <author> Linton et al. (1989) Mark A. Linton, John M. Vlissides and Paul R. Calder. </author> <title> "Composing User Interfaces with InterViews." </title> <booktitle> IEEE Computer 22, </booktitle> <month> 2 (February </month> <year> 1989): </year> <pages> 8-22. </pages>
Reference-contexts: The Bureaucracy pattern presented in this paper can be found in many major frameworks, including ET++ (Weinand & Gamma, 1994) and InterViews <ref> (Linton et al., 1989) </ref>. We have used it extensively in our own frameworks (Riehle & Zllighoven, 1995; Riehle et al., 1996).
Reference: <author> Reenskaug et al. </author> <title> (1996) Trygve Reenskaug, with Per Wold and Odd Arild Lehne. (1996). Working with Objects. Greenwich, Manning. The Bureaucracy Pattern Page 12 of 11 Riehle & Bumer (1995) Dirk Riehle. "How and Why to Encapsulate Class Trees." </title> <booktitle> OOPSLA '95, Conference Proceedings. </booktitle> <address> New York: </address> <publisher> ACM Press, </publisher> <year> 1995. </year> <pages> 251-264. </pages> <note> Riehle & Zllighoven (1995) Dirk Riehle, </note> <author> and Heinz Zlighoven. </author> <year> (1995). </year> <title> A Pattern Language for Tool Construction and Integration Based on the Tools and Materials Metaphor. </title> <editor> In (Coplien & Schmidt, </editor> <year> 1995), </year> <pages> 9-42. </pages>
Reference: <author> Riehle et al. (1996) Dirk Riehle, Bruno Schffer, and Martin Schnyder. </author> <title> Design of a Smalltalk Framework for the Tools and Materials Metaphor. </title> <month> Informatik/Informatique 3 (February </month> <year> 1996), </year> <month> 20-22. </month> <title> Riehle (1996) Dirk Riehle. "Describing and Composing Patterns Using Role Diagrams." </title> <booktitle> WOON '96, Conference Proceedings. </booktitle>
Reference-contexts: This is the way it is usually done in Smalltalk. Since this is somewhat tedious and error prone, we proposed and implemented a tool to support this task <ref> (Riehle et al., 1996) </ref>. Wrapper/Decorator. Finally, you can use wrappers or decorators to adapt an interface to clients' needs. This works well for role modeling as long as these wrappers can be created on the fly and don't have a state of their own that has to be kept persistent.
Reference: <author> Edited by Hans Steffen. </author> <note> To appear. </note>
Reference: <author> Rumbaugh et al. (1991) James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy and William Lorensen. </author> <year> (1991). </year> <title> Object-Oriented Modeling and Design. </title> <publisher> London: Prentice-Hall. </publisher>
Reference: <author> Weber (1947) Max Weber. </author> <year> (1947). </year> <title> The Theory of Social and Economic Organization. </title> <address> New York: </address> <publisher> Oxford University Press. </publisher> <editor> Weinand & Gamma (1994) Andr Weinand and Erich Gamma. </editor> <title> "ET++ a Portable, Homogenous Class Library and Application Framework." </title> <institution> Computer Science Research at UBILAB. Edited by Walter R. Bischofberger and Hans-Peter Frei. Konstanz: Universittsverlag Konstanz, </institution> <year> 1994. </year> <pages> 66-92. </pages>
Reference-contexts: This pattern scales well to structure large parts of an application or framework. It is based on the idea of modern bureaucracy <ref> (Weber, 1947) </ref> which seems to work well for software systems. A composite pattern is first of all a pattern: It represents a design theme that keeps recurring in specific contexts. <p> Being higher in the hierarchy means being closer to the Root. The ideal bureaucracy is built on the idea that the higher a clerk is positioned, the more knowledge and qualification he or she possesses <ref> (Weber, 1947) </ref>. Here the analogy breaks down: There is no need to provide objects higher in the hierarchy with more specialized and elaborate implementations. In fact, objects high in the hierarchy might use only rather general implementations while objects further down the hierarchy do much of the detailed work.
References-found: 9

