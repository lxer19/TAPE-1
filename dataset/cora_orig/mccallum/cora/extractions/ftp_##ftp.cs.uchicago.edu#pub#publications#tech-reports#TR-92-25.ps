URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-92-25.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: Oracles, Proofs and Checking  
Author: Lance Fortnow 
Note: Any oracle that would collapse PCP(log n; 1) and EXP would imply P 6= NP in the unrela tivized world.  
Date: December 21, 1992  
Abstract: We look at various oracle issues about interactive proofs and proof checking and show the fol lowing results: * The PCP(log n; 1) = NP result does not relativize in a strong way. * We create a reasonable oracle access mechanism under which "local-checkability" relativizes. * The IP = PSPACE result holds relative to algebraic extensions. 
Abstract-found: 1
Intro-found: 1
Reference: [AIV92] <author> S. Arora, R. Impagliazzo, and U. Vazirani. </author> <title> Relativizing versus nonrelativizing techniques: The role of local checkability. </title> <type> Manuscript, </type> <institution> University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Thus finding such an oracle would be as hard as settling the P = NP question. fl University of Chicago, 1100 E. 58th St., Chicago, IL 60637. Email: fortnow@cs.uchicago.edu. Partially supported by NSF grant CCR 92-53582. 1 Arora, Impagliazzo and Vazirani <ref> [AIV92] </ref> argue that the "local-checkability" property of complexity classes is a major reason that the results on interactive proofs do not relativize. We give negative evidence for this thesis by showing that under a reasonable access mechanism, local checkability does in fact relativize. <p> PCP A (log n; 1) P ASAT = P A which contradicts the fact that the deterministic time hierarchy relativizes. 2 We conjecture that P 6= NP 6= EXP and for every oracle A, PCP A (log n; 1) 6= EXP A . 4 Local Checkability Arora, Impagliazzo and Vazirani <ref> [AIV92] </ref> define the notion of proof checker as follows: A proof-checker is a Turing machine M that uses universal quantification and which is provided, in addition to the input, a proof string. It is allowed random access to both the input and the proof string.
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23. </pages> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: prove other nonrel-ativizing facts? Also much older questions resurfaced: What exactly to oracle results mean? What should we infer, if anything, from a relativization? Such questions gained even more importance when we discovered the amazing power of multiple prover interactive proof systems [BFL91], transparent proofs [BFLS91] and probabilistically checkable proofs <ref> [AS92, ALM + 92] </ref>. We will not likely find satisfactory answers to these questions in the near future. However, in this paper we will give several results about oracles that may shed light on some of these issues. <p> An easy modification of their proof gives us the second part as well. 2 3 Probabilistically Checkable Proofs In this section, we will show two results about probabilistically checkable proof systems. First we show that the result of Arora, Lund, Motwani, Sundan and Szegedy <ref> [ALM + 92] </ref> does not relativize in a strong way. We then look at what happens if we look at oracles trying to relate PCP and EXP. <p> Thus Babai, Fortnow and Lund [BFL91] show that NEXP = [ k&gt;0 PCP (n k ; n k ). Arora, Lund, Motwani, Sudan and Szegedy <ref> [ALM + 92] </ref> building on techniques of Arora and Safra [AS92] show the following surprising and powerful theorem: Theorem 3.1 NP = PCP (log (n); 1) One can easily create an oracle relative to which this result does not relativize because the verifier has only a polynomial number of computation paths.
Reference: [AS92] <author> S. Arora and S. Safra. </author> <title> Approximating clique is NP-complete. </title> <booktitle> In Proceedings of the 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-13. </pages> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: prove other nonrel-ativizing facts? Also much older questions resurfaced: What exactly to oracle results mean? What should we infer, if anything, from a relativization? Such questions gained even more importance when we discovered the amazing power of multiple prover interactive proof systems [BFL91], transparent proofs [BFLS91] and probabilistically checkable proofs <ref> [AS92, ALM + 92] </ref>. We will not likely find satisfactory answers to these questions in the near future. However, in this paper we will give several results about oracles that may shed light on some of these issues. <p> First we show that the result of Arora, Lund, Motwani, Sundan and Szegedy [ALM + 92] does not relativize in a strong way. We then look at what happens if we look at oracles trying to relate PCP and EXP. Arora and Safra <ref> [AS92] </ref> define a hierarchy of complexity classes PCP, corresponding to the number of random and query bits required to verify a proof of membership in the language, as follows: A verifier M is a probabilistic polynomial-time Turing machine with random access to a string representing a membership proof; M can query <p> Thus Babai, Fortnow and Lund [BFL91] show that NEXP = [ k&gt;0 PCP (n k ; n k ). Arora, Lund, Motwani, Sudan and Szegedy [ALM + 92] building on techniques of Arora and Safra <ref> [AS92] </ref> show the following surprising and powerful theorem: Theorem 3.1 NP = PCP (log (n); 1) One can easily create an oracle relative to which this result does not relativize because the verifier has only a polynomial number of computation paths.
Reference: [BF91] <author> L. Babai and L. Fortnow. Arithmetization: </author> <title> A new method in structural complexity theory. </title> <journal> Computational Complexity, </journal> <volume> 1(1) </volume> <pages> 41-66, </pages> <year> 1991. </year>
Reference-contexts: By Lemma 2.1 there is an unrelativized reduction f mapping an input x to some relativized 3CNF formula A . Part of will contain the formula A as well as as proof that A = f (x). 2 5 Algebraic Oracles Babai and Fortnow <ref> [BF91] </ref> give an algebraic characterization of various complexity classes and argue that the interactive proof take advantage of this characterization. This algebraic characterization also does not seem to relativize.
Reference: [BFL91] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1(1) </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: relativization? How can we use these techniques to prove other nonrel-ativizing facts? Also much older questions resurfaced: What exactly to oracle results mean? What should we infer, if anything, from a relativization? Such questions gained even more importance when we discovered the amazing power of multiple prover interactive proof systems <ref> [BFL91] </ref>, transparent proofs [BFLS91] and probabilistically checkable proofs [AS92, ALM + 92]. We will not likely find satisfactory answers to these questions in the near future. However, in this paper we will give several results about oracles that may shed light on some of these issues. <p> Fortnow, Rompel and Sipser [FRS88] show that the languages accepted by multiple provers and [ k&gt;0 PCP (n k ; n k ) are equivalent. Thus Babai, Fortnow and Lund <ref> [BFL91] </ref> show that NEXP = [ k&gt;0 PCP (n k ; n k ).
Reference: [BFLS91] <author> L. Babai, L. Fortnow, L. Levin, and M. Szegedy. </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In Proceedings of the 23rd ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 21-31. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: we use these techniques to prove other nonrel-ativizing facts? Also much older questions resurfaced: What exactly to oracle results mean? What should we infer, if anything, from a relativization? Such questions gained even more importance when we discovered the amazing power of multiple prover interactive proof systems [BFL91], transparent proofs <ref> [BFLS91] </ref> and probabilistically checkable proofs [AS92, ALM + 92]. We will not likely find satisfactory answers to these questions in the near future. However, in this paper we will give several results about oracles that may shed light on some of these issues.
Reference: [BGS75] <author> T. Baker, J. Gill, and R. Solovay. </author> <title> Relativizations of the P = NP question. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4(4) </volume> <pages> 431-442, </pages> <year> 1975. </year>
Reference-contexts: Perhaps we can use this characterization to separate NP from higher complexity classes like PSPACE and EXP by separating PCP (log n; 1) from these classes. However P A PCP A (log n; 1) for all A and for some B we have P B = PSPACE B <ref> [BGS75] </ref>, for this B we will have P B = PCP B (log n; 1) = NP B = PSPACE B . Thus we would need additional nonrelativizable techniques to separate PCP (log n; 1) from PSPACE. The class EXP does not fall into the same trap.
Reference: [BM88] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin games: a randomized proof system, and a hierarchy of complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36(2) </volume> <pages> 254-276, </pages> <year> 1988. </year>
Reference-contexts: We give evidence for this proposition by showing that IP = PSPACE holds relative to algebraic extensions of arbitrarily complicated languages. 2 Notation and Definitions Most of the notation and definitions follow from the standard textbooks on the field [HU79, GJ79]. Also see <ref> [GMR89, BM88] </ref> for an introduction on interactive proofs. We use to represent the join of two sets A and B, i.e., A B = f0g fi A [ f1g fi B. We use FP to represent the polynomial-time computable functions. It is a misnomer to relativize a complexity class C.
Reference: [Coo71] <author> S. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Proceedings of the 3rd ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 151-158. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: Using Cook's theorem <ref> [Coo71] </ref>, Arora, Impagliazzo and Vazirani show that NP = PFCHK (log n). Arora, Impagliazzo and Vazirani call this fact the "Local Checkability Theorem".
Reference: [FRS88] <author> L. Fortnow, J. Rompel, and M. Sipser. </author> <title> On the power of multi-prover interactive protocols. </title> <booktitle> In Proceedings of the 3rd IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 156-161. </pages> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: If x 2 L, there is a proof x which causes M to accept for every random string, i.e. with probability 1. 2. If x 62 L, then for all proofs , the probability that M using proof accepts is bounded by 1=2. Fortnow, Rompel and Sipser <ref> [FRS88] </ref> show that the languages accepted by multiple provers and [ k&gt;0 PCP (n k ; n k ) are equivalent. Thus Babai, Fortnow and Lund [BFL91] show that NEXP = [ k&gt;0 PCP (n k ; n k ). <p> We use techniques of Fortnow and Sipser [FS88] and Fortnow, Rompel and Sipser <ref> [FRS88] </ref> to show a much stronger negative oracle result: Theorem 3.2 For some oracle A, NP A is not contained in [ j&gt;0 PCP A (n j ; n k ) for any fixed k. <p> We think the oracle access mechanism used in PCP (log n; 1) works fine because the verifier is allowed to run in polynomial time. However, time may prove use wrong. The access mechanism used by Fortnow, Rompel and Sipser <ref> [FRS88] </ref> is almost surely the wrong one. If one thinks about multiple-provers as [ j&gt;0 PCP (n j ; n j ) then we see the proof might have exponential size and thus describe exponential strings in the oracle. It is not clear how to extend the access mechanism. <p> It should be noted however that even if the verifier is given access to exponentially long strings in the oracle, there will still be an oracle A such that co-NP A 6 MIP. We can easily modify the proof of Fortnow, Rompel and Sipser <ref> [FRS88] </ref> so all the diagonalizations occur on exponentially distant lengths with the oracle empty inbetween.
Reference: [FS88] <author> L. Fortnow and M. Sipser. </author> <title> Are there interactive protocols for co-NP languages? Information Processing Letters, </title> <booktitle> 28 </booktitle> <pages> 249-251, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction The result that IP = PSPACE [LFKN92, Sha92] surprised the theoretical computer science community in more ways then one. A few years earlier, Fortnow and Sipser <ref> [FS88] </ref> created an oracle relative to which co-NP did not have interactive proofs. The IP = PSPACE result was honestly a nonrelativizing theorem. <p> We use techniques of Fortnow and Sipser <ref> [FS88] </ref> and Fortnow, Rompel and Sipser [FRS88] to show a much stronger negative oracle result: Theorem 3.2 For some oracle A, NP A is not contained in [ j&gt;0 PCP A (n j ; n k ) for any fixed k. <p> Note that L is many-one reducible to A. Lund, Fortnow, Karloff and Nisan [LFKN92] and Shamir [Sha92] show that every language in PSPACE has an interactive proof. This result does not relativize, Fortnow and Sipser <ref> [FS88] </ref> show that 5 relative to some oracle A, even co-NP does not have interactive proofs. However, the IP = PSPACE result does hold for algebraic extensions: Theorem 5.1 For A an algebraic extension for any set L fl , IP A = PSPACE A .
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and intractability. A Guide to the theory of NP-completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: We give evidence for this proposition by showing that IP = PSPACE holds relative to algebraic extensions of arbitrarily complicated languages. 2 Notation and Definitions Most of the notation and definitions follow from the standard textbooks on the field <ref> [HU79, GJ79] </ref>. Also see [GMR89, BM88] for an introduction on interactive proofs. We use to represent the join of two sets A and B, i.e., A B = f0g fi A [ f1g fi B. We use FP to represent the polynomial-time computable functions.
Reference: [GJ86] <author> J. Goldsmith and D. Joseph. </author> <title> Three results on the polynomial isomorphism of complete sets. </title> <booktitle> In Proceedings of the 27th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 390-397. </pages> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: Determining whether A is satisfiable is NP A -complete. 2. Determining the truth value of A is PSPACE A -complete. Furthermore the completeness reductions do not need access to the oracle. Goldsmith and Joseph <ref> [GJ86] </ref> prove the first part of the lemma. An easy modification of their proof gives us the second part as well. 2 3 Probabilistically Checkable Proofs In this section, we will show two results about probabilistically checkable proof systems.
Reference: [GMR89] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof-systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <year> 1989. </year>
Reference-contexts: We give evidence for this proposition by showing that IP = PSPACE holds relative to algebraic extensions of arbitrarily complicated languages. 2 Notation and Definitions Most of the notation and definitions follow from the standard textbooks on the field [HU79, GJ79]. Also see <ref> [GMR89, BM88] </ref> for an introduction on interactive proofs. We use to represent the join of two sets A and B, i.e., A B = f0g fi A [ f1g fi B. We use FP to represent the polynomial-time computable functions. It is a misnomer to relativize a complexity class C.
Reference: [Hel81] <author> H. Heller. </author> <title> Relativized polynomial hierarchy extending two levels. </title> <type> PhD thesis, </type> <institution> Universitat Munchen, </institution> <year> 1981. </year>
Reference-contexts: We show that in a relativized world, for all k, such a result does not hold even if we allow the verifier to use a polynomial number of random bits and n k proof queries. Although Heller <ref> [Hel81] </ref> has created an oracle A relative to which NP A = EXP A , we show that PCP A (log n; 1) = EXP A would imply that P 6= NP. <p> Thus we would need additional nonrelativizable techniques to separate PCP (log n; 1) from PSPACE. The class EXP does not fall into the same trap. For every oracle A, we have P A 6= EXP A since the deterministic time hierarchy theorem relativizes [HS65]. Heller <ref> [Hel81] </ref> showed that there exists an oracle A where NP A = EXP A . Since Theorem 3.1 does not relativize, Heller's theorem does not necessarily imply that PCP A (log n; 1) = EXP A .
Reference: [HS65] <author> J. Hartmanis and R. Stearns. </author> <title> On the computational complexity of algorithms. </title> <journal> Transactions of the American Mathematical Society, </journal> <volume> 117 </volume> <pages> 285-306, </pages> <year> 1965. </year> <month> 7 </month>
Reference-contexts: Thus we would need additional nonrelativizable techniques to separate PCP (log n; 1) from PSPACE. The class EXP does not fall into the same trap. For every oracle A, we have P A 6= EXP A since the deterministic time hierarchy theorem relativizes <ref> [HS65] </ref>. Heller [Hel81] showed that there exists an oracle A where NP A = EXP A . Since Theorem 3.1 does not relativize, Heller's theorem does not necessarily imply that PCP A (log n; 1) = EXP A .
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Com--putation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1979. </year>
Reference-contexts: We give evidence for this proposition by showing that IP = PSPACE holds relative to algebraic extensions of arbitrarily complicated languages. 2 Notation and Definitions Most of the notation and definitions follow from the standard textbooks on the field <ref> [HU79, GJ79] </ref>. Also see [GMR89, BM88] for an introduction on interactive proofs. We use to represent the join of two sets A and B, i.e., A B = f0g fi A [ f1g fi B. We use FP to represent the polynomial-time computable functions.
Reference: [LFKN92] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <journal> Journal of the ACM, </journal> <volume> 39(4) </volume> <pages> 859-868, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction The result that IP = PSPACE <ref> [LFKN92, Sha92] </ref> surprised the theoretical computer science community in more ways then one. A few years earlier, Fortnow and Sipser [FS88] created an oracle relative to which co-NP did not have interactive proofs. The IP = PSPACE result was honestly a nonrelativizing theorem. <p> Let h1; x 1 ; : : : ; x n i be in A if f (x 1 ; : : : ; x n ) &gt; 0. Note that L is many-one reducible to A. Lund, Fortnow, Karloff and Nisan <ref> [LFKN92] </ref> and Shamir [Sha92] show that every language in PSPACE has an interactive proof. This result does not relativize, Fortnow and Sipser [FS88] show that 5 relative to some oracle A, even co-NP does not have interactive proofs.
Reference: [Sha92] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <journal> Journal of the ACM, </journal> <volume> 39(4) </volume> <pages> 869-877, </pages> <year> 1992. </year> <month> 8 </month>
Reference-contexts: 1 Introduction The result that IP = PSPACE <ref> [LFKN92, Sha92] </ref> surprised the theoretical computer science community in more ways then one. A few years earlier, Fortnow and Sipser [FS88] created an oracle relative to which co-NP did not have interactive proofs. The IP = PSPACE result was honestly a nonrelativizing theorem. <p> Let h1; x 1 ; : : : ; x n i be in A if f (x 1 ; : : : ; x n ) &gt; 0. Note that L is many-one reducible to A. Lund, Fortnow, Karloff and Nisan [LFKN92] and Shamir <ref> [Sha92] </ref> show that every language in PSPACE has an interactive proof. This result does not relativize, Fortnow and Sipser [FS88] show that 5 relative to some oracle A, even co-NP does not have interactive proofs. <p> However, the IP = PSPACE result does hold for algebraic extensions: Theorem 5.1 For A an algebraic extension for any set L fl , IP A = PSPACE A . Proof Sketch: Instead of repeating the entire proof in <ref> [Sha92] </ref>, we will just describe how to modify it. We use the relativized formulae described in Section 2.1. We arithmetized the formulas in the same way as in [Sha92] replacing A (x j1 ; : : : ; x jk ) with f (x j1 ; : : : ; x <p> Proof Sketch: Instead of repeating the entire proof in <ref> [Sha92] </ref>, we will just describe how to modify it. We use the relativized formulae described in Section 2.1. We arithmetized the formulas in the same way as in [Sha92] replacing A (x j1 ; : : : ; x jk ) with f (x j1 ; : : : ; x jk ). Thus the arithmetized degree remains low as required.
References-found: 19

