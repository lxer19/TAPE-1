URL: http://www.isi.edu/~muslea/PS/sccc97.ps
Refering-URL: http://www.isi.edu/~muslea/papers.html
Root-URL: http://www.isi.edu
Email: muslea@isi.edu  
Title: The Very Offline k-Vehicle Routing Problem in Trees  
Author: Ion Muslea 
Note: States of America  
Address: 4676 Admiralty Way, Suite 1001 Marina del Rey, CA 90292-6695, United  
Affiliation: Information Sciences Institute/University of Southern California  
Abstract: The vehicle routing problem (VRP) in trees is a restriction of the general vehicle routing problem in which the underlying graph is a tree. In this paper, we introduce several NP-complete variants of the problem (e.g., common-source, common-destinations, in-place, flexible-requests, and bring-it-back), and we present five fast approximation algorithms for these variants. We mainly focus on the 2-vehicle routing problems, but we also consider possible generalizations for the k-vehicle routing case. In our analysis, the underlying graphs consist of various types of trees: binary and non-binary, weighted and unweighted. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Atallah and S. Kosajaru. </author> <title> Efficient solutions to some transportation problems with application to minimizing robot arm travel. </title> <journal> SIAM Journal of Computing, </journal> <volume> 17 </volume> <pages> 849-869, </pages> <year> 1988. </year>
Reference-contexts: Furthermore, the paper also presented a family of approximation algorithms with a performance ratio going down to 1.21363 as the running time increases. Frederickson [6] also introduced approximation algorithms for the 1-vehicle routing problem in circular and linear graphs, and Attalah and Kosajaru <ref> [1] </ref> provided efficient solutions to a transportation problem based on a robot arm that can make circular and telescoping movements. Finally, Chobrak and Larmore [3] designed several fast algorithms for the two-server problem. <p> A path P in the graph G=(V,E) is a sequence of vertices v 1 ; v 2 ; . . . ; v n such that 8i 2 <ref> [1; n 1] </ref>; (v i ; v i+1 ) 2 E. The vertex v 1 is called the initial vertex, and the vertex v n is called the terminal vertex.
Reference: [2] <author> I. Averbakh and O. Berman. </author> <title> Sales-delivery-man problems on treelike networks. </title> <journal> Networks, </journal> <volume> 25 </volume> <pages> 45-58, </pages> <year> 1995. </year>
Reference-contexts: Frederickson, Hecht, and Kim [9] have proved the vehicle routing problem to be NP-complete for the case of general graphs. As many of the NP-complete graph-problems have interesting properties when the underlying graph is a tree (see <ref> [2] </ref>, [7], [8], and [11]), we shall study the vehicle routing problem in different types of trees (e.g., binary and non-binary, weighted and unweighted). A possible way to differentiate among the several variants of the vehicle routing problem is based on the initial knowledge about the problem. <p> A detailed analysis of the routing and scheduling problems that have time window constraints is done in by Solomon [17], and Solomon and Desrosiers [18]. The k-sales-delivery-man problem (see <ref> [2] </ref>) is a combination of the k-traveling-salesman problem and the k-delivery-man problem, and it deals with the minimization of both the total working time of the server and the waiting time of the objects, the first criteria being more important than the second one.
Reference: [3] <author> M. Chobrak and L. Larmore. </author> <title> On fast algorithms for two servers. </title> <journal> Journal of Algorithms, </journal> <volume> 12 </volume> <pages> 607-614, </pages> <year> 1991. </year>
Reference-contexts: Frederickson [6] also introduced approximation algorithms for the 1-vehicle routing problem in circular and linear graphs, and Attalah and Kosajaru [1] provided efficient solutions to a transportation problem based on a robot arm that can make circular and telescoping movements. Finally, Chobrak and Larmore <ref> [3] </ref> designed several fast algorithms for the two-server problem.
Reference: [4] <author> S. Cook. </author> <title> The complexity of theorem proving procedures. </title> <booktitle> Proceedings of the Third ACM Symposium on Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <year> 1971. </year>
Reference-contexts: If the object o i does not arrive back in src i before the deadline D i , the server has to pay a penalty P i . 2. Literature review Unfortunately, many routing problems are NP-complete in the sense of Cook <ref> [4] </ref> and Karp [15]. Frederickson, Hecht, and Kim [9] proved that the k-traveling-salesman problem, the k-chinese-postman problem, and the k-stacker-crane problem are NP-complete if the underlying graph has no special properties.
Reference: [5] <author> T. Cormen, C. Leiserson, and R. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Frederickson, Hecht, and Kim [9] proved that the k-traveling-salesman problem, the k-chinese-postman problem, and the k-stacker-crane problem are NP-complete if the underlying graph has no special properties. As it has been conjectured that there are no polynomial-time, optimal solutions for NP-complete problems (see <ref> [5] </ref> and [10]), researchers focused on two main directions: finding polynomial-time approximation algorithms with good performance ratios [10], and identifying graphs with special properties that make the problems easier to solve.
Reference: [6] <author> G. Frederickson. </author> <title> A note on the complexity of the simple transportation problem. </title> <journal> SIAM Journal of Computation, </journal> <volume> 22(1) </volume> <pages> 57-61, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, the paper also presented a family of approximation algorithms with a performance ratio going down to 1.21363 as the running time increases. Frederickson <ref> [6] </ref> also introduced approximation algorithms for the 1-vehicle routing problem in circular and linear graphs, and Attalah and Kosajaru [1] provided efficient solutions to a transportation problem based on a robot arm that can make circular and telescoping movements.
Reference: [7] <author> G. Frederickson and D. Guan. </author> <title> Non-preemptive Ensemble Motion Planning on a Tree. </title> <type> Technical Report CSD-TR-864, </type> <institution> Department of Computer Science, Purdue University, </institution> <year> 1992. </year>
Reference-contexts: Frederickson, Hecht, and Kim [9] have proved the vehicle routing problem to be NP-complete for the case of general graphs. As many of the NP-complete graph-problems have interesting properties when the underlying graph is a tree (see [2], <ref> [7] </ref>, [8], and [11]), we shall study the vehicle routing problem in different types of trees (e.g., binary and non-binary, weighted and unweighted). A possible way to differentiate among the several variants of the vehicle routing problem is based on the initial knowledge about the problem. <p> By analyzing the preemptive version of the 1-vehicle routing problem in trees, Frederickson and Guan [8] showed that the problem can be optimally solved in sub-quadratic time. As the non-preemptive version of the 1-vehicle routing problem in trees is NP-complete <ref> [7] </ref>, the authors introduced a linear-time approximation algorithm with a performance ratio of 3/2, and a slightly slower approximation algorithm with a performance ratio of 5/4. Furthermore, the paper also presented a family of approximation algorithms with a performance ratio going down to 1.21363 as the running time increases. <p> Frederickson and Guan [8] showed that the preemptive problem can be optimally solved in polynomial time. In the companion paper <ref> [7] </ref>, the same authors proved that the non-preemptive version of the problem is NP-complete, and they presented several approximation algorithms (one of them running in linear time) with excellent performance ratios. <p> Corollary 1 The non-preemptive kVRP in trees is NP-complete. Proof: restriction to non-preemptive 1-vehicle routing problem. This result is an obvious corollary to the theorem presented by Frederickson and Guan in <ref> [7] </ref>. Theorem 1 The preemptive kVRP in trees is NP-complete for any k 2. Proof: transformation from MSP. Theorem 2 The in-place, kVRP in trees is NP-complete. Proof: transformation from MSP. Theorem 3 The in-place 2-VRP in binary, unweighted trees is NP-complete. Proof: transformation from 2PSP.
Reference: [8] <author> G. Frederickson and D. Guan. </author> <title> Preemptive ensemble motion planning on a tree. </title> <journal> SIAM Journal of Computing, </journal> <volume> 21(6) </volume> <pages> 1130-1152, </pages> <year> 1992. </year>
Reference-contexts: Frederickson, Hecht, and Kim [9] have proved the vehicle routing problem to be NP-complete for the case of general graphs. As many of the NP-complete graph-problems have interesting properties when the underlying graph is a tree (see [2], [7], <ref> [8] </ref>, and [11]), we shall study the vehicle routing problem in different types of trees (e.g., binary and non-binary, weighted and unweighted). A possible way to differentiate among the several variants of the vehicle routing problem is based on the initial knowledge about the problem. <p> These algorithms are based on a tour-splitting heuristic and run in cubical time. By analyzing the preemptive version of the 1-vehicle routing problem in trees, Frederickson and Guan <ref> [8] </ref> showed that the problem can be optimally solved in sub-quadratic time. <p> Given a unique server that is initially located in the root and can carry one object at the time, we want to find the order in which the requests must be served such that the total distance travelled by the server is minimized. Frederickson and Guan <ref> [8] </ref> showed that the preemptive problem can be optimally solved in polynomial time. In the companion paper [7], the same authors proved that the non-preemptive version of the problem is NP-complete, and they presented several approximation algorithms (one of them running in linear time) with excellent performance ratios.
Reference: [9] <author> G. Frederickson, M. Hecht, and C. Kim. </author> <title> Approximation algorithms for some routing problems. </title> <journal> SIAM Journal of Computation, </journal> <volume> 7(2) </volume> <pages> 178-193, </pages> <year> 1978. </year>
Reference-contexts: After serving the requests, the servers must return to their original location. The goal of the problem is to minimize the total distance traveled by the servers during the process of transporting the objects. Frederickson, Hecht, and Kim <ref> [9] </ref> have proved the vehicle routing problem to be NP-complete for the case of general graphs. <p> Literature review Unfortunately, many routing problems are NP-complete in the sense of Cook [4] and Karp [15]. Frederickson, Hecht, and Kim <ref> [9] </ref> proved that the k-traveling-salesman problem, the k-chinese-postman problem, and the k-stacker-crane problem are NP-complete if the underlying graph has no special properties. <p> Frederickson, Hecht, and Kim <ref> [9] </ref> presented a mixed-strategy approximation algorithm that can be successfully used to solve several versions of the vehicle routing problem in a general graph. By combining two stand-alone algorithms, each of which being efficient in some of the extreme cases, the final solution improves the performances of its individual components.
Reference: [10] <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: Frederickson, Hecht, and Kim [9] proved that the k-traveling-salesman problem, the k-chinese-postman problem, and the k-stacker-crane problem are NP-complete if the underlying graph has no special properties. As it has been conjectured that there are no polynomial-time, optimal solutions for NP-complete problems (see [5] and <ref> [10] </ref>), researchers focused on two main directions: finding polynomial-time approximation algorithms with good performance ratios [10], and identifying graphs with special properties that make the problems easier to solve. <p> As it has been conjectured that there are no polynomial-time, optimal solutions for NP-complete problems (see [5] and <ref> [10] </ref>), researchers focused on two main directions: finding polynomial-time approximation algorithms with good performance ratios [10], and identifying graphs with special properties that make the problems easier to solve. Frederickson, Hecht, and Kim [9] presented a mixed-strategy approximation algorithm that can be successfully used to solve several versions of the vehicle routing problem in a general graph. <p> which the servers s i can serve all the requests from R i and return to the root without traveling a distance greater than L? Many of our NP-completeness proofs are based on transformations from the Multiprocessor Scheduling Problem (MSP) or the Two-Processor Scheduling Problem (2PSP), which are defined in <ref> [10] </ref>. We present now our NP-completeness results from [16], and for each theorem and corollary we specify the main idea behind its proof. Corollary 1 The non-preemptive kVRP in trees is NP-complete. Proof: restriction to non-preemptive 1-vehicle routing problem.
Reference: [11] <author> Y. Karuno, H. Nagamochi, and T. Ibaraki. </author> <title> Vehicle scheduling on a tree with release and handling times. </title> <booktitle> Proceedings of the International Symposium on Algorithms and Algebraic Computing (ISAAC), Springer-Verlag Lecture Notes in Computer Science 762, </booktitle> <pages> pages 486-494, </pages> <year> 1993. </year>
Reference-contexts: Frederickson, Hecht, and Kim [9] have proved the vehicle routing problem to be NP-complete for the case of general graphs. As many of the NP-complete graph-problems have interesting properties when the underlying graph is a tree (see [2], [7], [8], and <ref> [11] </ref>), we shall study the vehicle routing problem in different types of trees (e.g., binary and non-binary, weighted and unweighted). A possible way to differentiate among the several variants of the vehicle routing problem is based on the initial knowledge about the problem. <p> Karuno, Namagochi, and Ibaraki <ref> [11] </ref> proved this problem to be NP-complete and showed that an additional depth-first constraint makes the problem solvable in O (jV jfi lg (jV j)).
Reference: [12] <author> W. Klostermeyer. </author> <title> The k-server problem in dynamically ori-entable graphs. </title> <publisher> Forthcoming,, </publisher> <year> 1997. </year>
Reference-contexts: This algorithm has a performance ratio of 2B, where B is the best known performance ratio for Steiner trees. The same paper also introduced a family of approximation algorithms (performance ratio = 2B + *) for the 2-server problem. Klostermeyer (see [13] and <ref> [12] </ref>) also studied the online k-server problem in dynamically orientable graphs. 3. Definitions An undirected graph G = (V; E) consists of a finite set V of vertices and a set E of pairs of vertices, where each element of E contains two distinct vertices.
Reference: [13] <author> W. Klostermeyer. </author> <title> Paths problems in dynamically orientable graphs. </title> <publisher> Forthcoming, </publisher> <year> 1997. </year>
Reference-contexts: This algorithm has a performance ratio of 2B, where B is the best known performance ratio for Steiner trees. The same paper also introduced a family of approximation algorithms (performance ratio = 2B + *) for the 2-server problem. Klostermeyer (see <ref> [13] </ref> and [12]) also studied the online k-server problem in dynamically orientable graphs. 3. Definitions An undirected graph G = (V; E) consists of a finite set V of vertices and a set E of pairs of vertices, where each element of E contains two distinct vertices.
Reference: [14] <author> W. Klostermeyer. </author> <title> The very offline two-server problem. </title> <publisher> Forthcoming, </publisher> <year> 1997. </year>
Reference-contexts: Conversely, offline algorithms know from the very beginning the entire set of requests, together with a preestablished order in which the requests have to be served. Finally, the very offline algorithms (see <ref> [14] </ref>) are a special case of offline algorithms in which the requests may be served in any particular order. <p> The authors analyzed the problem for the cases when the underlying graphs are trees and cactus-networks, and they presented polynomial time solutions for the 1-vehicle routing variant. Klostermeyer <ref> [14] </ref> proved that the in-place, very offline k-server problem in graphs is NP-complete and presented a Steiner-tree-based approximation algorithm for the 1-vehicle routing problem. This algorithm has a performance ratio of 2B, where B is the best known performance ratio for Steiner trees.
Reference: [15] <author> R. Miller and J. Thatcher. </author> <title> Complexity of Computer Computations. </title> <publisher> Plenum Press, </publisher> <address> New York, NY, </address> <year> 1972. </year>
Reference-contexts: If the object o i does not arrive back in src i before the deadline D i , the server has to pay a penalty P i . 2. Literature review Unfortunately, many routing problems are NP-complete in the sense of Cook [4] and Karp <ref> [15] </ref>. Frederickson, Hecht, and Kim [9] proved that the k-traveling-salesman problem, the k-chinese-postman problem, and the k-stacker-crane problem are NP-complete if the underlying graph has no special properties.
Reference: [16] <author> I. Muslea. </author> <title> The k-Vehicle Routing Problem in Trees. M.S. </title> <type> thesis, </type> <institution> Department of Statistics and Computer Science, West Virginia University, </institution> <year> 1996. </year>
Reference-contexts: Running times of 1-VRP algo rithms In <ref> [16] </ref>, we analyzed several versions of the 1-vehicle routing problem in trees, and we introduced a variety of fast polynomial-time algorithms that solve those problems. <p> We present now our NP-completeness results from <ref> [16] </ref>, and for each theorem and corollary we specify the main idea behind its proof. Corollary 1 The non-preemptive kVRP in trees is NP-complete. Proof: restriction to non-preemptive 1-vehicle routing problem. This result is an obvious corollary to the theorem presented by Frederickson and Guan in [7]. <p> Proof: transformation from 2PSP. Note: the proof of this theorem was by all means the most challenging one among all NP-completeness results presented in this paper. Due to space restrictions, we can not present here our proof, but the interested reader can find it in <ref> [16] </ref>. Corollary 2 The in-place kVRP in binary, unweighted trees is NP-complete. Proof: restriction to in-place 2-VRP. Corollary 3 The kVRP in binary, unweighted trees is NP-complete. Proof: restriction to the in-place kVRP in binary, unweighted trees. Theorem 4 The common-source kVRP in trees is NP-complete. Proof: transformation from MSP. <p> Finally, TraverseSub-tree () runs in O (jEj) and computes the distance traveled by a server that traverses a given subtree. 6. Approximation Algorithms for the in-place 2-VRP In <ref> [16] </ref>, we have shown that a server that optimally solves the in-place problem in a tree has to travel a distance equal to twice the weight of the pruned tree.
Reference: [17] <author> M. Solomon. </author> <title> Algorithms for the vehicle routing and scheduling problem with time window constraints. </title> <journal> Operations Research, </journal> <volume> 35(2) </volume> <pages> 254-265, </pages> <year> 1987. </year>
Reference-contexts: A detailed analysis of the routing and scheduling problems that have time window constraints is done in by Solomon <ref> [17] </ref>, and Solomon and Desrosiers [18].
Reference: [18] <author> M. Solomon and J. Desrosiers. </author> <title> Time window constrained routing and scheduling problems: A survey. </title> <journal> Transportation Sci, </journal> <volume> 22 </volume> <pages> 1-13, </pages> <year> 1988. </year>
Reference-contexts: A detailed analysis of the routing and scheduling problems that have time window constraints is done in by Solomon [17], and Solomon and Desrosiers <ref> [18] </ref>. The k-sales-delivery-man problem (see [2]) is a combination of the k-traveling-salesman problem and the k-delivery-man problem, and it deals with the minimization of both the total working time of the server and the waiting time of the objects, the first criteria being more important than the second one.
References-found: 18

