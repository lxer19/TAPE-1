URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-021.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Title: Exploiting Process Lifetime Distributions for Dynamic Load Balancing  
Author: Mor Harchol-Balter Allen B. Downey 
Note: 94720. Supported by National Physical Science Consortium (NPSC) Fellowship. Also supported by NSF grant number CCR-9201092.  94720. Supported by NSF (DARA) grant DMW-8919074.  
Address: 1947 Center St. Suite 600 Berkeley, California 94704-1198  Berkeley, CA  Berkeley, CA  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Computer Science Division, UC  Computer Science Division, UC  
Pubnum: TR-95-021  
Email: Email: harchol@cs.berkeley.edu  Email: downey@cs.berkeley.edu  
Phone: (510) 643-9153 FAX (510) 643-7684  
Abstract: We propose a preemptive migration scheme that assumes no prior knowledge about the behavior of processes, and show that it significantly outperforms more traditional non-preemptive migration schemes. Our scheme migrates a process only if the process' expected remaining lifetime justifies the cost of migration. To quantify this heuristic, we perform empirical studies on the distribution of process lifetimes and the distribution of memory use (which dominates migration cost) for a variety of workloads. We use these results to derive a robust criterion for selecting processes for migration. Using a trace-driven simulation based on actual job arrival times and lifetimes, we show that under our preemptive policy the mean slowdown of all processes is 40% less than under an optimistic non-preemptive migration scheme that uses name lists. Furthermore, the preemptive policy reduces the number of severely delayed processes by a factor of ten, compared with the non-preemptive scheme. 
Abstract-found: 1
Intro-found: 1
Reference: [AE87] <author> Rakesh Agrawal and Ahmed Ezzet. </author> <title> Location independent remote execution in nest. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(8) </volume> <pages> 905-912, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: that do, the majority are based on implicit remote execution of new processes; few provide preemptive migration. (The taxonomy below is based in large part on [Nut94].) The systems that have implemented user-controlled remote execution and migration include: Accent [Zay87], Locus [Thi91], Utopia [ZZWD93], DEMOS/MP [PM83], V [TLC85], and NEST <ref> [AE87] </ref>. Several of these provide some form of automated location policy. Some other systems provide automated remote execution, but perform preemptive migration only at the explicit request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], and Condor [LLM88]. <p> Many load-balancing systems depend on a priori information about processes; for example, explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([Sve90], [ZF87], [Zho89], [ZZWD93], [DO91], [LL90], <ref> [AE87] </ref>). 1.7 Organization of this paper In Section 2, we measure the process lifetime distribution, compute the conditional lifetime distribution, and make several empirical observations about process lifetimes. These results will be used in developing our load migration policy.
Reference: [AF89] <author> Y. Artsy and R. Finkel. </author> <title> Designing a process migration facility: </title> <booktitle> The charlotte experience. IEEE Computer, </booktitle> <pages> pages 47-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Several of these provide some form of automated location policy. Some other systems provide automated remote execution, but perform preemptive migration only at the explicit request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte <ref> [AF89] </ref>, Sprite [DO91], and Condor [LLM88]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing.
Reference: [BF81] <author> Raymond M. Bryant and Rapael A. Finkel. </author> <title> A stable distributed scheduling algorithm. </title> <booktitle> In 2nd International Conference on Distributed Computing Systems, </booktitle> <pages> pages 314-323, </pages> <year> 1981. </year>
Reference: [BK90] <author> Flavio Bonomi and Anurag Kumar. </author> <title> Adaptive optimal load balancing in a nonhomogeneous multiserver system with a central 14 job scheduler. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(10) </volume> <pages> 1232-1250, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Many of the location policies and migration policies proposed in the literature (see for example [ELZ88], [MTS90] <ref> [BK90] </ref>, [EB93], [LR93], [LM82], [WM85]) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by [LO86] is correct for processes older than 1 second.
Reference: [BSW93] <author> Amnon Barak, Guday Shai, and Richard G. Wheeler. </author> <title> The MOSIX Distributed Operating System:Load Balancing for UNIX. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Previous analytic studies have shown that the additional benefit offered by preemptive migration is small compared with the benefits of simple, non-preemptive schemes [ELZ88]. But simulation studies (which can use more realistic workload descriptions) and implemented systems have shown greater benefits for preemptive migration [KL88] and <ref> [BSW93] </ref>. This paper tries to resolve these conflicting results. <p> Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing. Only a few systems have implemented automated load-balancing policies with preemptive migration: MOSIX <ref> [BSW93] </ref> and RHODOS [GGI + 91]. The MOSIX load-balancing scheme is similar to the strategies recommended in this paper; our results support their claim that their scheme is effective and robust. <p> Thus, by the fairness principle, c 2a + m 2 &lt; n, which implies Minimum migration age = Migration cost nm The MOSIX migration policy <ref> [BSW93] </ref> is based on a similar, but simpler restriction: the age of the process must exceed the migration cost. Thus, the slowdown imposed on the migrant process must be less than 2.0. <p> In the presence of preemptive migration, both the mean and standard deviation of slowdown are nearly constant, regardless of the overall load on the system. 4.2.4 Potential complications Previous preemptive load-balancing strategies (e.g. <ref> [BSW93] </ref>) have included mechanisms to avoid perverse behaviors such as repeated migration of a single long-lived process or bulk migrations back and forth between machines. For the most part, we found that simple strategies were stable and well-behaved, and no special checks were necessary to avoid these behaviors.
Reference: [CK87] <author> Thomas L. Cassavant and Jon G. Kuhl. </author> <title> Analysis of three dynamic distributed load-balancing strategies with varying global information requirements. </title> <booktitle> In 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 185-192, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: Although few systems use preemptive migration for load-balancing, there have been many simulation studies and analytic models showing the performance benefits of various load-balancing strategies. Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], <ref> [CK87] </ref>, [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads.
Reference: [DO91] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent process migration: Design alternatives and the sprite implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-785, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Several of these provide some form of automated location policy. Some other systems provide automated remote execution, but perform preemptive migration only at the explicit request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite <ref> [DO91] </ref>, and Condor [LLM88]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing. Only a few systems have implemented automated load-balancing policies with preemptive migration: MOSIX [BSW93] and RHODOS [GGI + 91]. <p> Many load-balancing systems depend on a priori information about processes; for example, explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([Sve90], [ZF87], [Zho89], [ZZWD93], <ref> [DO91] </ref>, [LL90], [AE87]). 1.7 Organization of this paper In Section 2, we measure the process lifetime distribution, compute the conditional lifetime distribution, and make several empirical observations about process lifetimes. These results will be used in developing our load migration policy. <p> Migration cost = Fixed migration cost + Memory migration cost = :33 s + 2 s=MB memory transferred The amount of a process' memory that must be transferred during migration depends on properties of the distributed system. <ref> [DO91] </ref> have an excellent discussion of this issue, and we borrow from them here. At the most, it might be necessary to transfer a process' entire virtual memory. With a distributed file system (as in Sprite) it is only necessary to write dirty pages to the file system before migration. <p> For the sake of simplicity, we assumed that processes are always ready to run (i.e. are never blocked on I/O). During a given time slice, we divide CPU time equally among the processes on the host. Our model of migration cost is based on Sprite <ref> [DO91] </ref>: the total cost of migration is .33 seconds plus 2.0 seconds per megabyte of resident virtual memory (for new procs, of course, the resident set size is zero). As a further simplification, we charge the entire cost of migration to the source host.
Reference: [EB93] <author> D. J. Evans and W. U. N. Butt. </author> <title> Dynamic load balancing using task-transfer probablilites. </title> <journal> Parallel Computing, </journal> <volume> 19 </volume> <pages> 897-916, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Many of the location policies and migration policies proposed in the literature (see for example [ELZ88], [MTS90] [BK90], <ref> [EB93] </ref>, [LR93], [LM82], [WM85]) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by [LO86] is correct for processes older than 1 second.
Reference: [ELZ86] <author> Derek L. Eager, Edward D. Lazowska, and John Zahorjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(5) </volume> <pages> 662-675, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: Although few systems use preemptive migration for load-balancing, there have been many simulation studies and analytic models showing the performance benefits of various load-balancing strategies. Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], <ref> [ELZ86] </ref>); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads.
Reference: [ELZ88] <author> Derek L. Eager, Edward D. Lazowska, and John Zahorjan. </author> <title> The limited performance benefits of migrating active processes for load sharing. </title> <booktitle> In SIGMET-RICS, </booktitle> <pages> pages 662-675, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: 1 Introduction In most existing systems, load balancing is non-preemptive and based on a priori knowledge of process behavior. Previous analytic studies have shown that the additional benefit offered by preemptive migration is small compared with the benefits of simple, non-preemptive schemes <ref> [ELZ88] </ref>. But simulation studies (which can use more realistic workload descriptions) and implemented systems have shown greater benefits for preemptive migration [KL88] and [BSW93]. This paper tries to resolve these conflicting results. <p> Specifically, they found that for T &gt; 3 seconds, the probability of a process' lifetime exceeding T seconds is rT c , where 1:05 &lt; c &lt; 1:25 and r is the normalization factor. Many of the location policies and migration policies proposed in the literature (see for example <ref> [ELZ88] </ref>, [MTS90] [BK90], [EB93], [LR93], [LM82], [WM85]) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by [LO86] is correct for processes older than 1 second. <p> Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], <ref> [ELZ88] </ref>, [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads. This approach eliminates as a source of error the unrealistic workload descriptions that are necessary for analysis. <p> Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], <ref> [ELZ88] </ref>, [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads. This approach eliminates as a source of error the unrealistic workload descriptions that are necessary for analysis. <p> Preemptive migration reduces the mean slowdown by 50% for most traces (and 70% for the two high-load traces). Thus, the performance improvement of preemptive migration over non-preemptive migration is typically between 35% and 45%. This improvement is somewhat greater than that predicted by previous analytic models <ref> [ELZ88] </ref>. The primary reason for this discrepancy is that the workload model required by queueing-theoretic analysis doesn't describe real workloads. <p> Our results are in accord with previous simulator results [KL88] which used a more accurate distribution of process lifetimes than <ref> [ELZ88] </ref>, but which used randomly-generated workloads with Poisson arrivals rather than trace data. 4.2.2 Alternative metrics Although mean slowdown is the most common metric of system performance, we feel that the comparison of slowdowns (as above) understates the benefits of migration as perceived by users. 7 For purposes of comparing the
Reference: [GGI + 91] <author> G.W. Gerrity, A. Goscinski, J. Indul-ska, W. Toomey, and W. Zhu. </author> <title> Rhodos-a testbed for studying design issues in distributed operating systems. In Towards Network Globalization (SICON 91): </title> <booktitle> 2nd International Conference on Networks, </booktitle> <pages> pages 268-274, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing. Only a few systems have implemented automated load-balancing policies with preemptive migration: MOSIX [BSW93] and RHODOS <ref> [GGI + 91] </ref>. The MOSIX load-balancing scheme is similar to the strategies recommended in this paper; our results support their claim that their scheme is effective and robust.
Reference: [HJ90] <author> Anna Hac and Xiaowei Jin. </author> <title> Dynamic load balancing in a distributed system using a sender-initiated algorithm. </title> <journal> Journal of Systems Software, </journal> <volume> 11 </volume> <pages> 79-94, </pages> <year> 1990. </year>
Reference-contexts: Although few systems use preemptive migration for load-balancing, there have been many simulation studies and analytic models showing the performance benefits of various load-balancing strategies. Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], <ref> [HJ90] </ref>, [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads.
Reference: [KL88] <author> Phillip Krueger and Miron Livny. </author> <title> A comparison of preemptive and non-preemptive load distributing. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 123-130, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Previous analytic studies have shown that the additional benefit offered by preemptive migration is small compared with the benefits of simple, non-preemptive schemes [ELZ88]. But simulation studies (which can use more realistic workload descriptions) and implemented systems have shown greater benefits for preemptive migration <ref> [KL88] </ref> and [BSW93]. This paper tries to resolve these conflicting results. <p> Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], <ref> [KL88] </ref>). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads. This approach eliminates as a source of error the unrealistic workload descriptions that are necessary for analysis. Furthermore, our migration policy differs from [KL88] in that our proposed migration policy uses preemptive <p> Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], <ref> [KL88] </ref>). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads. This approach eliminates as a source of error the unrealistic workload descriptions that are necessary for analysis. Furthermore, our migration policy differs from [KL88] in that our proposed migration policy uses preemptive migration exclusively, rather than in addition to remote <p> systems with and without preemptive migration ([BF81], [ELZ88], <ref> [KL88] </ref>). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads. This approach eliminates as a source of error the unrealistic workload descriptions that are necessary for analysis. Furthermore, our migration policy differs from [KL88] in that our proposed migration policy uses preemptive migration exclusively, rather than in addition to remote execution (which they call "placement"). <p> Although this age threshold offers a strict limit on the slowdown seen by a migrant process, it imposes greater slowdowns on the processes that would have benefited if a younger process were allowed to migrate away. A previous simulation study <ref> [KL88] </ref> chose a lower value for this parameter (0:1), but did not explain how it was chosen. Figures 10a and 10b compare the performance of the analytic minimum age criterion with the optimal fixed parameter (f). <p> In reality, the variance of process lifetimes is higher than that of the exponential and hyperexponential distributions used, and process inter-arrival times are more correlated (bursty) than the usual memoryless Poisson arrivals. Our results are in accord with previous simulator results <ref> [KL88] </ref> which used a more accurate distribution of process lifetimes than [ELZ88], but which used randomly-generated workloads with Poisson arrivals rather than trace data. 4.2.2 Alternative metrics Although mean slowdown is the most common metric of system performance, we feel that the comparison of slowdowns (as above) understates the benefits of
Reference: [Kun91] <author> Thomas Kunz. </author> <title> The influence of different workload descriptions on a heuristic load balancing scheme. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(7) </volume> <pages> 725-730, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Although they vary greatly to run on. Previous work ([Zho89] and <ref> [Kun91] </ref>), has suggested that choosing the target host with the shortest cpu run queue is both simple and effective. <p> Although few systems use preemptive migration for load-balancing, there have been many simulation studies and analytic models showing the performance benefits of various load-balancing strategies. Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], [PTS88], <ref> [Kun91] </ref>, [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads.
Reference: [LL90] <author> M. Litzkow and M. Livny. </author> <title> Experience with the condor distributed batch system. </title> <booktitle> In IEEE Workshop on Experimental Distributed Systems, </booktitle> <pages> pages 97-101, </pages> <year> 1990. </year>
Reference-contexts: Many load-balancing systems depend on a priori information about processes; for example, explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([Sve90], [ZF87], [Zho89], [ZZWD93], [DO91], <ref> [LL90] </ref>, [AE87]). 1.7 Organization of this paper In Section 2, we measure the process lifetime distribution, compute the conditional lifetime distribution, and make several empirical observations about process lifetimes. These results will be used in developing our load migration policy.
Reference: [LLM88] <author> M.J. Litzkow, M. Livny, and M.W. </author> <title> Mutka. Condor ahunter of idle workstations. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: Several of these provide some form of automated location policy. Some other systems provide automated remote execution, but perform preemptive migration only at the explicit request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba [TvRaHvSS90], Charlotte [AF89], Sprite [DO91], and Condor <ref> [LLM88] </ref>. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing. Only a few systems have implemented automated load-balancing policies with preemptive migration: MOSIX [BSW93] and RHODOS [GGI + 91].
Reference: [LM82] <author> Miron Livny and Myron Melman. </author> <title> Load balancing in homogeneous broadcast distributed systems. </title> <booktitle> In ACM Computer Network Performance Symposium, </booktitle> <pages> pages 47-55, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: Many of the location policies and migration policies proposed in the literature (see for example [ELZ88], [MTS90] [BK90], [EB93], [LR93], <ref> [LM82] </ref>, [WM85]) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by [LO86] is correct for processes older than 1 second.
Reference: [LO86] <author> W. E. Leland and T. J. Ott. </author> <title> Load-balancing heuristics and process behavior. </title> <booktitle> In Proceedings of Performance and ACM Sigmetrics, </booktitle> <volume> volume 14, </volume> <pages> pages 54-69, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: Rommel, [Rom91], also claims his measurements show that "long processes have exponential service times." On the other hand, <ref> [LO86] </ref> measured 9.5 million Unix processes between 1984 and 1985 and concluded that process lifetimes have a UBNE (used-better-than-new-in-expectation) type of distribution. That is, the greater the current cpu age of a process, the greater its expected remaining cpu lifetime. <p> Many of the location policies and migration policies proposed in the literature (see for example [ELZ88], [MTS90] [BK90], [EB93], [LR93], [LM82], [WM85]) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by <ref> [LO86] </ref> is correct for processes older than 1 second. This functional form is consistent across a variety of machines and workloads, and although the parameter of this function varies (from .8 to 1.3), it is generally near 1.0. Thus, as a rule of thumb, 1.
Reference: [LR93] <author> Hwa-Chun Lin and C.S. Raghavendra. </author> <title> A state-aggregation method for analyzing dynamic load-balancing policies. </title> <booktitle> In IEEE 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 482-489, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Many of the location policies and migration policies proposed in the literature (see for example [ELZ88], [MTS90] [BK90], [EB93], <ref> [LR93] </ref>, [LM82], [WM85]) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by [LO86] is correct for processes older than 1 second.
Reference: [MTS90] <author> Ravi Mirchandaney, Don Towsley, and John A. Stankovic. </author> <title> Adaptive load sharing in heterogeneous distributed systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9 </volume> <pages> 331-346, </pages> <year> 1990. </year>
Reference-contexts: Many of the location policies and migration policies proposed in the literature (see for example [ELZ88], <ref> [MTS90] </ref> [BK90], [EB93], [LR93], [LM82], [WM85]) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by [LO86] is correct for processes older than 1 second.
Reference: [Nut94] <author> Mark Nuttall. </author> <title> Survey of systems providing process or object migration. </title> <type> Technical Report DoC94/10, </type> <institution> Imperial College Research Report, </institution> <year> 1994. </year> <month> 15 </month>
Reference-contexts: Of the ones that do, the majority are based on implicit remote execution of new processes; few provide preemptive migration. (The taxonomy below is based in large part on <ref> [Nut94] </ref>.) The systems that have implemented user-controlled remote execution and migration include: Accent [Zay87], Locus [Thi91], Utopia [ZZWD93], DEMOS/MP [PM83], V [TLC85], and NEST [AE87]. Several of these provide some form of automated location policy.
Reference: [PM83] <editor> M.L. Powell and B.P. Miller. </editor> <booktitle> Process migrations in demos/mp. In ACM-SIGOPS 6th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 110-119, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: Of the ones that do, the majority are based on implicit remote execution of new processes; few provide preemptive migration. (The taxonomy below is based in large part on [Nut94].) The systems that have implemented user-controlled remote execution and migration include: Accent [Zay87], Locus [Thi91], Utopia [ZZWD93], DEMOS/MP <ref> [PM83] </ref>, V [TLC85], and NEST [AE87]. Several of these provide some form of automated location policy.
Reference: [PTS88] <author> Spiridon Pulidas, Don Towsley, and John A. Stankovic. </author> <title> Imbedding gradient estimators in load balancing algorithms. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 482-490, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Although few systems use preemptive migration for load-balancing, there have been many simulation studies and analytic models showing the performance benefits of various load-balancing strategies. Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], [Zho89], <ref> [PTS88] </ref>, [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads.
Reference: [Rom91] <author> C. Gary Rommel. </author> <title> The probability of load balancing success in a homogeneous network. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17 </volume> <pages> 922-933, </pages> <year> 1991. </year>
Reference-contexts: Rommel, <ref> [Rom91] </ref>, also claims his measurements show that "long processes have exponential service times." On the other hand, [LO86] measured 9.5 million Unix processes between 1984 and 1985 and concluded that process lifetimes have a UBNE (used-better-than-new-in-expectation) type of distribution.
Reference: [SPG94] <author> A. Silberschatz, J.L. Peterson, and P.B. Galvin. </author> <title> Operating System Concepts, 4th Edition. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: process is Slowdown of process p = wall time (p) cpu time (p) where wall-time (p) is the total time p spends either getting cpu or waiting on cpu during its life. 1.3 Distribution of process lifetimes Previous efforts to measure the distribution of process lifetimes have produced conflicting results. <ref> [SPG94] </ref> claims that process lifetimes have an exponential distribution, which implies that the expected remaining lifetime of a process is independent of its current age. [SPG94] states "...The duration of cpu bursts have been measured. Although they vary greatly to run on. <p> or waiting on cpu during its life. 1.3 Distribution of process lifetimes Previous efforts to measure the distribution of process lifetimes have produced conflicting results. <ref> [SPG94] </ref> claims that process lifetimes have an exponential distribution, which implies that the expected remaining lifetime of a process is independent of its current age. [SPG94] states "...The duration of cpu bursts have been measured. Although they vary greatly to run on. Previous work ([Zho89] and [Kun91]), has suggested that choosing the target host with the shortest cpu run queue is both simple and effective. <p> In this context, the normalized slowdown is always one less than the slowdown. variance of slowdown This metric is often cited as a measure of the unpredictability of response time <ref> [SPG94] </ref>.
Reference: [Sve90] <author> Anders Svensson. </author> <title> History, an intelligent load sharing filter. </title> <booktitle> In IEEE 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 546-553, </pages> <year> 1990. </year>
Reference-contexts: Migration policies may also be classified as having a priori knowledge about the function of the processes, or how long they will take, or having no prior knowledge about the function of the processes. Prior knowledge is often implemented as a name-list (e.g. <ref> [Sve90] </ref>) that specifies (by name) which processes are eligible for migration. These name-lists may have been created by a user or by the system. Policies that don't rely on any prior knowledge only have system data to work with, like the current age of each process or its memory size. <p> We compare two migration strategies, and show that the proposed age-based preemptive migration strategy (Section 3) performs significantly better than an optimistic version of a non-preemptive strategy that migrates newborn processes according to the process name (similar to strategies proposed by [ZZWD93] and <ref> [Sve90] </ref>). We also suggest that the most common metric of system performance, average slowdown over all processes, understates users' perception of the benefit of process migration. We suggest alternative metrics intended to quantify the number of noticeable slowdowns the user suffers.
Reference: [Thi91] <author> G. Thiel. </author> <title> Locus operating system, a transparent system. </title> <journal> Computer Communications, </journal> <volume> 14(6) </volume> <pages> 336-346, </pages> <year> 1991. </year>
Reference-contexts: Of the ones that do, the majority are based on implicit remote execution of new processes; few provide preemptive migration. (The taxonomy below is based in large part on [Nut94].) The systems that have implemented user-controlled remote execution and migration include: Accent [Zay87], Locus <ref> [Thi91] </ref>, Utopia [ZZWD93], DEMOS/MP [PM83], V [TLC85], and NEST [AE87]. Several of these provide some form of automated location policy.
Reference: [TLC85] <author> Marvin M. Theimer, Keith A. Lantz, and David R Cheriton. </author> <title> Preemptable remote execution facilities for the v-system. </title> <booktitle> In ACM-SIGOPS 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Of the ones that do, the majority are based on implicit remote execution of new processes; few provide preemptive migration. (The taxonomy below is based in large part on [Nut94].) The systems that have implemented user-controlled remote execution and migration include: Accent [Zay87], Locus [Thi91], Utopia [ZZWD93], DEMOS/MP [PM83], V <ref> [TLC85] </ref>, and NEST [AE87]. Several of these provide some form of automated location policy.
Reference: [TvRaHvSS90] <author> A.S. Tanenbaum, R. van Renesse adn H. van Staveren, and G.J. Sharp. </author> <title> Experiences with the amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <pages> pages 336-346, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Several of these provide some form of automated location policy. Some other systems provide automated remote execution, but perform preemptive migration only at the explicit request of a user or for reasons other than load-balancing (such as preserving autonomy): Amoeba <ref> [TvRaHvSS90] </ref>, Charlotte [AF89], Sprite [DO91], and Condor [LLM88]. Although these systems are capable of migrating active processes (with varying degrees of transparency), none have implemented a policy that preempts processes for purposes of load-balancing.
Reference: [WM85] <author> Yung-Terng Wang and Robert J.T. Morris. </author> <title> Load sharing in distributed systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> c-94(3):204-217, </volume> <month> March </month> <year> 1985. </year>
Reference-contexts: Many of the location policies and migration policies proposed in the literature (see for example [ELZ88], [MTS90] [BK90], [EB93], [LR93], [LM82], <ref> [WM85] </ref>) are based on the assumption that process lifetimes are exponential or hyperexponential. We show that the function form of the process lifetime distribution proposed by [LO86] is correct for processes older than 1 second. <p> Although few systems use preemptive migration for load-balancing, there have been many simulation studies and analytic models showing the performance benefits of various load-balancing strategies. Some of these studies have focused on load-balancing by remote execution ([LM82], <ref> [WM85] </ref>, [CK87], [Zho89], [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads.
Reference: [Wol89] <author> R. W. Wolff. </author> <title> Stochastic Modeling and the Theory of Queues. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: cess lifetimes impact our choice of migration policy. 4 1.4 Migration policies: Which processes are worth migrating? As described in Section 1.6, most existing migration policies are non-preemptive, meaning that only newborn processes are migrated. 3 The hyperexponential distribution is defined as the combination of two or more exponential distributions. <ref> [Wol89] </ref> 4 The rule of thumb implies that the expected remaining lifetime of all processes is infinite (a consequence of integrating the tail of the 1 T distribution from zero to infinity). For practical purposes, of course, there is a finite bound on the lifetimes of processes.
Reference: [Zay87] <author> E. R. Zayas. </author> <title> Attacking the process migration bottleneck. </title> <booktitle> In ACM-SIGOPS 11th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 13-24, </pages> <year> 1987. </year>
Reference-contexts: Of the ones that do, the majority are based on implicit remote execution of new processes; few provide preemptive migration. (The taxonomy below is based in large part on [Nut94].) The systems that have implemented user-controlled remote execution and migration include: Accent <ref> [Zay87] </ref>, Locus [Thi91], Utopia [ZZWD93], DEMOS/MP [PM83], V [TLC85], and NEST [AE87]. Several of these provide some form of automated location policy.
Reference: [ZF87] <author> Songnian Zhou and Domenico Ferrari. </author> <title> A measurement study of load balancing performance. </title> <booktitle> In IEEE 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 490-497, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Many load-balancing systems depend on a priori information about processes; for example, explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([Sve90], <ref> [ZF87] </ref>, [Zho89], [ZZWD93], [DO91], [LL90], [AE87]). 1.7 Organization of this paper In Section 2, we measure the process lifetime distribution, compute the conditional lifetime distribution, and make several empirical observations about process lifetimes. These results will be used in developing our load migration policy.
Reference: [Zho89] <author> Songnian Zhou. </author> <title> Performance studies for dynamic load balancing in distributed systems. </title> <type> PhD Dissertation, </type> <institution> University of California, Berkeley, </institution> <year> 1989. </year>
Reference-contexts: Although few systems use preemptive migration for load-balancing, there have been many simulation studies and analytic models showing the performance benefits of various load-balancing strategies. Some of these studies have focused on load-balancing by remote execution ([LM82], [WM85], [CK87], <ref> [Zho89] </ref>, [PTS88], [Kun91], [HJ90], [ELZ86]); others have compared the performance of systems with and without preemptive migration ([BF81], [ELZ88], [KL88]). Our work differs from both [ELZ88] and [KL88] in that we use trace-driven simulations rather than synthetic workloads. <p> Many load-balancing systems depend on a priori information about processes; for example, explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([Sve90], [ZF87], <ref> [Zho89] </ref>, [ZZWD93], [DO91], [LL90], [AE87]). 1.7 Organization of this paper In Section 2, we measure the process lifetime distribution, compute the conditional lifetime distribution, and make several empirical observations about process lifetimes. These results will be used in developing our load migration policy.
Reference: [ZZWD93] <author> S. Zhou, X. Zheng, J. Wang, and P. Delisle. </author> <title> Utopia: a load-sharing facitl-ity for large heterogeneous distributed computing systems. </title> <journal> Software Practice and Expeience, </journal> <volume> 23(2) </volume> <pages> 1305-1336, </pages> <month> De-cember </month> <year> 1993. </year> <month> 16 </month>
Reference-contexts: Of the ones that do, the majority are based on implicit remote execution of new processes; few provide preemptive migration. (The taxonomy below is based in large part on [Nut94].) The systems that have implemented user-controlled remote execution and migration include: Accent [Zay87], Locus [Thi91], Utopia <ref> [ZZWD93] </ref>, DEMOS/MP [PM83], V [TLC85], and NEST [AE87]. Several of these provide some form of automated location policy. <p> Many load-balancing systems depend on a priori information about processes; for example, explicit knowledge about the runtimes of processes or user-provided lists of migratable processes ([Sve90], [ZF87], [Zho89], <ref> [ZZWD93] </ref>, [DO91], [LL90], [AE87]). 1.7 Organization of this paper In Section 2, we measure the process lifetime distribution, compute the conditional lifetime distribution, and make several empirical observations about process lifetimes. These results will be used in developing our load migration policy. <p> We compare two migration strategies, and show that the proposed age-based preemptive migration strategy (Section 3) performs significantly better than an optimistic version of a non-preemptive strategy that migrates newborn processes according to the process name (similar to strategies proposed by <ref> [ZZWD93] </ref> and [Sve90]). We also suggest that the most common metric of system performance, average slowdown over all processes, understates users' perception of the benefit of process migration. We suggest alternative metrics intended to quantify the number of noticeable slowdowns the user suffers.
References-found: 35

