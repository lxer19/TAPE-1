URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/birkedal/pub/smlmix.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/birkedal/www/papers.html
Root-URL: http://www.cs.cmu.edu
Title: 173 Index most general unifier, see unification power function, 12-16 primitives, see pervasives protected variable,
Author: mix-equation, Niven, Larry, split pat, Tofte, Mads, Tolkien, J. R. R., 
Note: mk seenB4list operator, 93 mk seenB4list name operator, 93 ML Kit,  pattern row,  28, 53, see also let-insertion references, 53-55, 93, see also side effect Scheme, 34, 141, see also Similix and Schism Schism, 139 Scott, Walter, 24 self-application,  Shakespeare, William, 136 side effect,  Syntactic Currying, 141 syntactic sugar,  Type2TypeExpression operator, 94 TypeOf operator, 81 unfolding, see call unfolding unification,  variable equivalence,  constraint system, 110-111, 114, 122 program,  D as, 110 pattern 21, 38, 51, 131 pattern row 20, 131  
Address: operator,  20  
Affiliation: mk op  nonfix-phrase,  
Pubnum: stages, 7  20, 121, 131  
Email: well-typed  wildcard  
Phone: 55, 64, 65, 124  9, 35, 131 modules, 17, 20 Mogensen, Torben, 1, 3 monomorphism, 18, 20, 59, 94, 123 monovariant specialization, 26, 32, 45, 55, 63, 117, 118, 134  normalization, 111-116, 124-130 off-line, 9, 18, 107, 137-140 on-line, 9 op-clause, 20, 131 open-phrase, 20 optimality, 13, 47, 48, 133 Option, 23, 36-38, 103, 127 overloading, 18, 23, 55 pattern, 16, 46-53, 64, 75, 96, 121, 124  20, 21, 75, 96, 121, 124 pervasives, 26, 33, 54-55, 71, 118, 123, 124 Petrarca, 12, 26, 138-139, 142 Plato, 62 polymorphism, 18-19, 54, 131, 132, 138, 141 polyvariant specialization, 26, 63, 118, 122  12, 13, 15-16, 26, 42, 46-48 self-interpreter, 10, 12-14, 16, 47, 48  15, 16, 19, 24, 27, 34, 53-55, 131, 137, 141 Similix, 3, 35, 43, 54, 55, 63, 66, 137-138 solution, 111, 115-117 sp-function, 28-30, 35, 39, 50, 52, 64, 80, 81, 93, 123, 131, 134  12, 20, 22-23, 133, 134 syntactical composition, 14 termination, 10, 25, 29-31, 105, 114  110, 114, 123, 125, 126, 128  110, 113, 114, 125, 138 well-annotated, 70, 72-87, 105, 107  17, 18, 20, 24, 87, 105, 122  
Date: streams, 16, 54-55  type ascription, 20, 55, 93  underlining, 64, 124  
Abstract-found: 0
Intro-found: 1
Reference: [PS91] <author> Jens Palsberg and Michael I. Schwartzbach. </author> <title> Binding time analysis: Abstract interpretation versus type inference (second revised version). </title> <note> (This article is believed to be unpublished), </note> <year> 1991. </year>
Reference: [Rom90] <author> Sergei A. Romanenko. </author> <title> Arity raiser and its use in program specialization. </title> <editor> In Neil D. Jones, editor, </editor> <booktitle> ESOP '90. 3rd European Symposium on Programming, </booktitle> <address> Copenhagen, Denmark, </address> <month> May </month> <year> 1990. </year> <booktitle> (Lecture Notes in Computer Science, </booktitle> <volume> vol. 432), </volume> <pages> pages 341-360. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [Ses86] <author> Peter Sestoft. </author> <title> The structure of a self-applicable partial evaluator. </title> <editor> In H. Gan-zinger and Neil D. Jones, editors, </editor> <title> Programs as Data Objects, </title> <booktitle> Copenhagen, Denmark, 1985. (Lecture Notes in Computer Science, </booktitle> <volume> vol. 217), </volume> <pages> pages 236-256. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference: [Tof88] <author> Mads Tofte. </author> <title> Operational Semantics and Polymorphic Type Inference. </title> <type> PhD thesis, </type> <institution> Edinburgh University, Department of Computer Science, Edinburgh University, Mayfield Rd., EH9 3JZ Edinburgh, </institution> <month> May </month> <year> 1988. </year> <note> Available as Technical Report CST-52-88. </note>
Reference: [Tof90] <author> Mads Tofte. </author> <title> Type inference for polymorphic references. </title> <journal> Information and Compution, </journal> <volume> 89(1) </volume> <pages> 1-34, </pages> <month> November </month> <year> 1990. </year>
Reference: [WCRS91] <author> D. Weise, R. Conybeare, E. Ruf, and S. Seligman. </author> <title> Automatic online partial evaluation. </title> <editor> In John Hughes, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture, </booktitle> <address> Cambridge, Massachusetts, </address> <month> August </month> <year> 1991. </year> <booktitle> (Lecture Notes in Computer Science, </booktitle> <volume> vol. 523), </volume> <pages> pages 165-191. </pages> <publisher> ACM, Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [Wel90] <author> Morten Welinder. Disassembler. </author> <type> Student report, </type> <institution> DIKU, </institution> <year> 1990. </year> <title> Describes the code generation of Turbo Pascal version 3.01A; in Danish. Bibliography 170 </title>
Reference: [Mog88] <author> Torben . Mogensen. </author> <title> Partially static structures in a self-applicable partial evaluator. </title> <editor> In D. Bjorner, A. P. Ershov, and Neil D. Jones, editors, </editor> <booktitle> Partial Evaluation and Mixed Computation, </booktitle> <pages> pages 325-347. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference: [Mog89a] <author> Torben . Mogensen. </author> <title> Binding Time Aspects of Partial Evaluation. </title> <type> PhD thesis, </type> <institution> DIKU, University of Copenhagen, Denmark, </institution> <month> March </month> <year> 1989. </year> <pages> 95 pages. </pages>
Reference: [Mog89b] <author> Torben . Mogensen. </author> <title> Separating binding times in language specifications. </title> <booktitle> In Fourth International Conference on Functional Programming Languages and Computer Architecture, </booktitle> <address> London, England, </address> <month> September </month> <year> 1989, </year> <pages> pages 14-25. </pages> <publisher> ACM Press and Addison-Wesley, </publisher> <year> 1989. </year>
Reference: [Mog93] <author> Torben . Mogensen. </author> <title> Constructor specialization. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <pages> pages 22-33, </pages> <year> 1993. </year>
Reference: [Mos82] <author> Peter D. Mosses. </author> <title> Abstract semantic algebras! In D. </title> <editor> Bjorner, editor, </editor> <booktitle> Formal description of Programming Concepts II, </booktitle> <pages> pages 63-88, </pages> <address> Amsterdam, </address> <year> 1982. </year> <booktitle> IFIP IC-2 Working Conference, </booktitle> <publisher> North Holland. </publisher>
Reference: [Mos93a] <author> Christian Mossin. </author> <title> Partial evaluation of general parsers. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <pages> pages 13-21. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1993. </year>
Reference: [Mos93b] <author> Christian Mossin. </author> <title> Polymorphic binding time analysis. </title> <type> Master's thesis, </type> <institution> DIKU, </institution> <year> 1993. </year>
Reference: [MS92] <author> Morten Marquard and Bjarne Steensgaard. </author> <title> Partial evaluation of an object-oriented imperative language. </title> <type> Master's thesis, </type> <institution> DIKU, University of Copen-hagen, Denmark, </institution> <year> 1992. </year>
Reference: [MT91] <author> Robin Milner and Mads Tofte. </author> <title> Commentary on Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [MTH90] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [NN88] <author> Hanne Riis Nielson and Flemming Nielson. </author> <title> The tml-approach to compiler-compilers. </title> <type> Technical Report 1988-47, </type> <institution> Department of Computer Science, Technical University of Denmark, </institution> <year> 1988. </year>
Reference: [Pag91] <author> Frank G. Pagan. </author> <title> Partial Computation and the Construction of Language Processors. </title> <publisher> Prentice Hall Software Series. Prentice Hall, </publisher> <year> 1991. </year>
Reference: [Pau91] <author> Lawrence C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year> <note> 169 Bibliography </note>
Reference: [Hol88] <author> Carsten Kehler Holst. </author> <title> Poor man's generalization. </title> <note> Working Note, </note> <month> August </month> <year> 1988. </year>
Reference: [Hol89] <author> Carsten Kehler Holst. </author> <title> Syntactic currying. </title> <type> Student report, </type> <institution> DIKU, </institution> <year> 1989. </year>
Reference: [JGS93] <author> Neil D. Jones, Carsten K. Gomard, and Peter Sestoft. </author> <title> Partial Evaluation and Program Generation. </title> <publisher> Prentice-Hall, </publisher> <year> 1993. </year>
Reference: [Jon88] <author> Neil D. Jones. </author> <title> Automatic program specialization: A re-examination from basic principles. </title> <editor> In D. Bjorner, A. P. Ershov, and Neil D. Jones, editors, </editor> <booktitle> Partial Evaluation and Mixed Computation, </booktitle> <pages> pages 225-282. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference: [Jon91] <author> Neil D. Jones. </author> <title> Efficient algebraic operations on programs. </title> <booktitle> In AMAST: Algebraic Methodology and Software Technology, </booktitle> <pages> pages 245-267. </pages> <institution> University of Iowa, USA, </institution> <year> 1991. </year>
Reference: [Jon93] <author> Mark P. Jones. </author> <title> Partial evaluation for dictionary-free overloading. </title> <institution> Research Report YALEU/DCS/RR-959, Yale University, Department of Computer Science, </institution> <month> April </month> <year> 1993. </year>
Reference: [Jtr92] <author> Jesper Jtrgensen. </author> <title> Compiler generation by partial evaluation. </title> <type> Master's thesis, </type> <institution> DIKU, Department of Computer Science, University of Copenhagen, Universi-tetsparken 1, DK-2100 Copenhagen , Denmark, </institution> <month> January </month> <year> 1992. </year>
Reference: [JSS89] <author> Neil D. Jones, Peter Sestoft, and Harald Stndergaard. </author> <title> Mix: A self-applicable partial evaluator for experiments in compiler generation. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 2(1) </volume> <pages> 9-50, </pages> <year> 1989. </year>
Reference: [Lau89] <author> John Launchbury. </author> <title> Projection Factorisations in Partial Evaluation. </title> <type> PhD thesis, </type> <institution> Department of Computing, University of Glasgow, </institution> <month> November </month> <year> 1989. </year>
Reference: [Lau91] <author> John Launchbury. </author> <title> A strongly-typed self-applicable partial evaluator. </title> <editor> In John Hughes, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture, Lecture Notes in Computer Science. ACM, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [Lee89] <author> Peter Lee. </author> <title> Realistic Compiler Generation. Foundation of Computing Series. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference: [Mey91] <author> U. Meyer. </author> <title> Techniques for partial evaluation of imperative languages. In Partial Evaluation and Semantics-Based Program Manipulation, New Haven, Connecticut. </title> <journal> (Sigplan Notices, </journal> <volume> vol. 26, no. 9, </volume> <month> September </month> <year> 1991), </year> <pages> pages 94-105. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference: [Mil78] <author> Robin Milner. </author> <title> A theory of type polymorphism in programming. </title> <journal> J. Computer and System Sciences, </journal> <volume> 17 </volume> <pages> 348-375, </pages> <year> 1978. </year> <note> Bibliography 168 </note>
Reference: [Bon92] <author> Anders Bondorf. </author> <title> Improving binding times without explicit CPS-conversion. </title> <booktitle> In 1992 ACM Conference in Lisp and Functional Programming, </booktitle> <address> San Fran-cisco, California. </address> <booktitle> (Lisp Pointers, </booktitle> <volume> vol. V, no. 1, </volume> <year> 1992), </year> <pages> pages 1-10. </pages> <publisher> ACM, </publisher> <year> 1992. </year>
Reference: [Bon93] <author> Anders Bondorf. </author> <title> Similix 5.0 manual. Distributed with the Similix system, </title> <year> 1993. </year>
Reference: [BRTT93] <author> Lars Birkedal, Nick Rothwell, Mads Tofte, and David N. Turner. </author> <title> The ML Kit, </title> <type> Version 1. Technical Report 93/14, </type> <institution> DIKU, University of Copenhagen, Den-mark, </institution> <year> 1993. </year> <note> The ML Kit is obtainable by anonymous ftp from ftp.diku.dk directory pub/diku/users/birkedal. This technical report is distributed along with the ML Kit. </note>
Reference: [Con93] <author> Charles Consel. </author> <title> A tour of Schism: A partial evaluation system for higher-order applicative languages. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <pages> pages 145-154. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1993. </year>
Reference: [dN93] <author> Anne de Niel. </author> <title> Self-applicable Partial Evaluation of Polymorphically Typed Functional Languages. </title> <type> PhD thesis, </type> <institution> Katholieke Universiteit Leuven, </institution> <month> January </month> <year> 1993. </year>
Reference: [GJ89] <author> Carsten K. Gomard and Neil D. Jones. </author> <title> Compiler generation by partial evaluation. </title> <editor> In G. X. Ritter, editor, </editor> <booktitle> Information Processing '89. Proceedings of the IFIP 11th World Computer Congress, </booktitle> <pages> pages 1139-1144. </pages> <publisher> IFIP, North-Holland, </publisher> <year> 1989. </year>
Reference: [GJ91] <author> Carsten K. Gomard and Neil D. Jones. </author> <title> A partial evaluator for the untyped lambda-calculus. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(1) </volume> <pages> 21-69, </pages> <month> January </month> <year> 1991. </year>
Reference: [Gom89] <author> Carsten K. Gomard. </author> <title> Higher order partial evaluation | HOPE for the lambda calculus. </title> <type> Master's thesis, </type> <institution> DIKU, </institution> <address> Universitetsparken 1, DK-2100 Copen-hagen , Denmark, </address> <year> 1989. </year>
Reference: [Gom92] <author> Carsten K. Gomard. </author> <title> A self-applicable partial evaluator for the lambda calculus: Correctness and pragmatics. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(2) </volume> <pages> 147-172, </pages> <month> April </month> <year> 1992. </year>
Reference: [Hen91] <author> Fritz Henglein. </author> <title> Efficient type inference for higher-order binding-time analysis. </title> <editor> In John Hughes, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture, </booktitle> <address> Cambridge, Massachusetts, </address> <month> August </month> <year> 1991. </year> <booktitle> (Lecture Notes in Computer Science, </booktitle> <volume> vol. 523), </volume> <pages> pages 448-472. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [HL92] <author> Carsten Kehler Holst and John Launchbury. </author> <title> Handwriting cogen to avoid problems with static typing. </title> <note> Working Note, October 1992. Bibliography </note>
Reference: [And92] <author> Lars Ole Andersen. </author> <title> C program specialization. </title> <type> Technical Report 92/14, </type> <institution> DIKU, Department of Computer Science, University of Copenhagen, Universitets-parken 1, DK-2100 Copenhagen , Denmark, </institution> <month> May </month> <year> 1992. </year>
Reference: [And93] <author> Lars Ole Andersen. </author> <title> Binding time analysis and the taming of c pointers. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <pages> pages 47-58. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1993. </year>
Reference: [BD91] <author> Anders Bondorf and Olivier Danvy. </author> <title> Automatic autoprojection of recursive equations with global variables and abstract data types. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 16 </volume> <pages> 151-195, </pages> <year> 1991. </year>
Reference: [BD93] <author> Anders Bondorf and Dirk Dussart. </author> <title> Handwriting cogen for a CPS-based partial evaluator. </title> <note> Submitted for publication, </note> <month> June </month> <year> 1993. </year>
Reference: [BHOS76] <author> Lennart Beckman, Anders Haraldson, Osten Oskarsson, and Erik Sandewall. </author> <title> A partial evaluator and its use as a programming tool. </title> <booktitle> In Artificial Intelligence 7, </booktitle> <pages> pages 319-357. </pages> <publisher> North-Holland Publishing Company, </publisher> <year> 1976. </year>
Reference: [BJ93] <author> Anders Bondorf and Jesper Jtrgensen. </author> <title> Efficient analyses for realistic off-line partial evaluation. </title> <note> To appear in Journal of Functional Programming, </note> <year> 1993. </year>
Reference: [BJMS88] <author> Anders Bondorf, Neil D. Jones, Torben Mogensen, and Peter Sestoft. </author> <title> Binding time analysis and the taming of self-application. </title> <type> Draft, </type> <pages> 18 pages, </pages> <institution> DIKU, University of Copenhagen, Denmark, </institution> <month> August </month> <year> 1988. </year>
Reference: [Blo93] <author> Hendrik Blockell. </author> <title> Een partiele evaluator voor ML. </title> <type> Master's thesis, </type> <institution> Katholieke Universiteit Leuven, </institution> <year> 1993. </year> <note> In Dutch. </note>
Reference: [Bon90] <author> Anders Bondorf. </author> <title> Self-Applicable Partial Evaluation. </title> <type> PhD thesis, </type> <institution> DIKU, Department of Computer Science, University of Copenhagen, Universitets-parken 1, DK-2100 Copenhagen , Denmark, </institution> <month> December </month> <year> 1990. </year>

References-found: 53

